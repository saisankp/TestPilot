{"test_class": {"identifier": "ShardTest", "superclass": "extends AbstractShardTest", "interfaces": "", "fields": [{"original_string": "private static final String DUMMY_DATA = \"Dummy data as snapshot sequence number is set to 0 in \"\n            + \"InMemorySnapshotStore and journal recovery seq number will start from 1\";", "modifier": "private static final", "type": "String", "declarator": "DUMMY_DATA = \"Dummy data as snapshot sequence number is set to 0 in \"\n            + \"InMemorySnapshotStore and journal recovery seq number will start from 1\"", "var_name": "DUMMY_DATA"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/ShardTest.java"}, "test_case": {"identifier": "testDataTreeCandidateRecovery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDataTreeCandidateRecovery() throws Exception {\n        // Set up the InMemorySnapshotStore.\n        final DataTree source = setupInMemorySnapshotStore();\n\n        final DataTreeModification writeMod = source.takeSnapshot().newModification();\n        writeMod.write(TestModel.OUTER_LIST_PATH, ImmutableNodes.mapNodeBuilder(TestModel.OUTER_LIST_QNAME).build());\n        writeMod.ready();\n        InMemoryJournal.addEntry(shardID.toString(), 0, DUMMY_DATA);\n\n        // Set up the InMemoryJournal.\n        InMemoryJournal.addEntry(shardID.toString(), 1, new SimpleReplicatedLogEntry(0, 1,\n            payloadForModification(source, writeMod, nextTransactionId())));\n\n        final int nListEntries = 16;\n        final Set<Integer> listEntryKeys = new HashSet<>();\n\n        // Add some ModificationPayload entries\n        for (int i = 1; i <= nListEntries; i++) {\n            listEntryKeys.add(Integer.valueOf(i));\n\n            final YangInstanceIdentifier path = YangInstanceIdentifier.builder(TestModel.OUTER_LIST_PATH)\n                    .nodeWithKey(TestModel.OUTER_LIST_QNAME, TestModel.ID_QNAME, i).build();\n\n            final DataTreeModification mod = source.takeSnapshot().newModification();\n            mod.merge(path, ImmutableNodes.mapEntry(TestModel.OUTER_LIST_QNAME, TestModel.ID_QNAME, i));\n            mod.ready();\n\n            InMemoryJournal.addEntry(shardID.toString(), i + 1, new SimpleReplicatedLogEntry(i, 1,\n                payloadForModification(source, mod, nextTransactionId())));\n        }\n\n        InMemoryJournal.addEntry(shardID.toString(), nListEntries + 2,\n            new ApplyJournalEntries(nListEntries));\n\n        testRecovery(listEntryKeys);\n    }", "signature": "void testDataTreeCandidateRecovery()", "full_signature": "@Test public void testDataTreeCandidateRecovery()", "class_method_signature": "ShardTest.testDataTreeCandidateRecovery()", "testcase": true, "constructor": false, "invocations": ["setupInMemorySnapshotStore", "newModification", "takeSnapshot", "write", "build", "mapNodeBuilder", "ready", "addEntry", "toString", "addEntry", "toString", "payloadForModification", "nextTransactionId", "add", "valueOf", "build", "nodeWithKey", "builder", "newModification", "takeSnapshot", "merge", "mapEntry", "ready", "addEntry", "toString", "payloadForModification", "nextTransactionId", "addEntry", "toString", "testRecovery"]}, "focal_class": {"identifier": "Shard", "superclass": "extends RaftActor", "interfaces": "", "fields": [{"original_string": "@VisibleForTesting\n    static final Object TX_COMMIT_TIMEOUT_CHECK_MESSAGE = new Object() {\n        @Override\n        public String toString() {\n            return \"txCommitTimeoutCheck\";\n        }\n    };", "modifier": "@VisibleForTesting\n    static final", "type": "Object", "declarator": "TX_COMMIT_TIMEOUT_CHECK_MESSAGE = new Object() {\n        @Override\n        public String toString() {\n            return \"txCommitTimeoutCheck\";\n        }\n    }", "var_name": "TX_COMMIT_TIMEOUT_CHECK_MESSAGE"}, {"original_string": "@VisibleForTesting\n    static final Object GET_SHARD_MBEAN_MESSAGE = new Object() {\n        @Override\n        public String toString() {\n            return \"getShardMBeanMessage\";\n        }\n    };", "modifier": "@VisibleForTesting\n    static final", "type": "Object", "declarator": "GET_SHARD_MBEAN_MESSAGE = new Object() {\n        @Override\n        public String toString() {\n            return \"getShardMBeanMessage\";\n        }\n    }", "var_name": "GET_SHARD_MBEAN_MESSAGE"}, {"original_string": "static final Object RESUME_NEXT_PENDING_TRANSACTION = new Object() {\n        @Override\n        public String toString() {\n            return \"resumeNextPendingTransaction\";\n        }\n    };", "modifier": "static final", "type": "Object", "declarator": "RESUME_NEXT_PENDING_TRANSACTION = new Object() {\n        @Override\n        public String toString() {\n            return \"resumeNextPendingTransaction\";\n        }\n    }", "var_name": "RESUME_NEXT_PENDING_TRANSACTION"}, {"original_string": "public static final String DEFAULT_NAME = \"default\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_NAME = \"default\"", "var_name": "DEFAULT_NAME"}, {"original_string": "private static final Collection<ABIVersion> SUPPORTED_ABIVERSIONS;", "modifier": "private static final", "type": "Collection<ABIVersion>", "declarator": "SUPPORTED_ABIVERSIONS", "var_name": "SUPPORTED_ABIVERSIONS"}, {"original_string": "private static final int CLIENT_MAX_MESSAGES = 1000;", "modifier": "private static final", "type": "int", "declarator": "CLIENT_MAX_MESSAGES = 1000", "var_name": "CLIENT_MAX_MESSAGES"}, {"original_string": "private final ShardDataTree store;", "modifier": "private final", "type": "ShardDataTree", "declarator": "store", "var_name": "store"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final String shardName;", "modifier": "private final", "type": "String", "declarator": "shardName", "var_name": "shardName"}, {"original_string": "private final ShardStats shardMBean;", "modifier": "private final", "type": "ShardStats", "declarator": "shardMBean", "var_name": "shardMBean"}, {"original_string": "private final ShardDataTreeListenerInfoMXBeanImpl listenerInfoMXBean;", "modifier": "private final", "type": "ShardDataTreeListenerInfoMXBeanImpl", "declarator": "listenerInfoMXBean", "var_name": "listenerInfoMXBean"}, {"original_string": "private DatastoreContext datastoreContext;", "modifier": "private", "type": "DatastoreContext", "declarator": "datastoreContext", "var_name": "datastoreContext"}, {"original_string": "private final ShardCommitCoordinator commitCoordinator;", "modifier": "private final", "type": "ShardCommitCoordinator", "declarator": "commitCoordinator", "var_name": "commitCoordinator"}, {"original_string": "private long transactionCommitTimeout;", "modifier": "private", "type": "long", "declarator": "transactionCommitTimeout", "var_name": "transactionCommitTimeout"}, {"original_string": "private Cancellable txCommitTimeoutCheckSchedule;", "modifier": "private", "type": "Cancellable", "declarator": "txCommitTimeoutCheckSchedule", "var_name": "txCommitTimeoutCheckSchedule"}, {"original_string": "private final Optional<ActorRef> roleChangeNotifier;", "modifier": "private final", "type": "Optional<ActorRef>", "declarator": "roleChangeNotifier", "var_name": "roleChangeNotifier"}, {"original_string": "private final MessageTracker appendEntriesReplyTracker;", "modifier": "private final", "type": "MessageTracker", "declarator": "appendEntriesReplyTracker", "var_name": "appendEntriesReplyTracker"}, {"original_string": "private final ShardTransactionActorFactory transactionActorFactory;", "modifier": "private final", "type": "ShardTransactionActorFactory", "declarator": "transactionActorFactory", "var_name": "transactionActorFactory"}, {"original_string": "private final ShardSnapshotCohort snapshotCohort;", "modifier": "private final", "type": "ShardSnapshotCohort", "declarator": "snapshotCohort", "var_name": "snapshotCohort"}, {"original_string": "private final DataTreeChangeListenerSupport treeChangeSupport = new DataTreeChangeListenerSupport(this);", "modifier": "private final", "type": "DataTreeChangeListenerSupport", "declarator": "treeChangeSupport = new DataTreeChangeListenerSupport(this)", "var_name": "treeChangeSupport"}, {"original_string": "private ShardSnapshot restoreFromSnapshot;", "modifier": "private", "type": "ShardSnapshot", "declarator": "restoreFromSnapshot", "var_name": "restoreFromSnapshot"}, {"original_string": "private final ShardTransactionMessageRetrySupport messageRetrySupport;", "modifier": "private final", "type": "ShardTransactionMessageRetrySupport", "declarator": "messageRetrySupport", "var_name": "messageRetrySupport"}, {"original_string": "@VisibleForTesting\n    final FrontendMetadata frontendMetadata;", "modifier": "@VisibleForTesting\n    final", "type": "FrontendMetadata", "declarator": "frontendMetadata", "var_name": "frontendMetadata"}, {"original_string": "private Map<FrontendIdentifier, LeaderFrontendState> knownFrontends = ImmutableMap.of();", "modifier": "private", "type": "Map<FrontendIdentifier, LeaderFrontendState>", "declarator": "knownFrontends = ImmutableMap.of()", "var_name": "knownFrontends"}, {"original_string": "private boolean paused;", "modifier": "private", "type": "boolean", "declarator": "paused", "var_name": "paused"}, {"original_string": "private final MessageSlicer responseMessageSlicer;", "modifier": "private final", "type": "MessageSlicer", "declarator": "responseMessageSlicer", "var_name": "responseMessageSlicer"}, {"original_string": "private final Dispatchers dispatchers;", "modifier": "private final", "type": "Dispatchers", "declarator": "dispatchers", "var_name": "dispatchers"}, {"original_string": "private final MessageAssembler requestMessageAssembler;", "modifier": "private final", "type": "MessageAssembler", "declarator": "requestMessageAssembler", "var_name": "requestMessageAssembler"}], "methods": [{"identifier": "Shard", "parameters": "(final AbstractBuilder<?, ?> builder)", "modifiers": "protected", "return": "", "signature": " Shard(final AbstractBuilder<?, ?> builder)", "full_signature": "protected  Shard(final AbstractBuilder<?, ?> builder)", "class_method_signature": "Shard.Shard(final AbstractBuilder<?, ?> builder)", "testcase": false, "constructor": true}, {"identifier": "setTransactionCommitTimeout", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setTransactionCommitTimeout()", "full_signature": "private void setTransactionCommitTimeout()", "class_method_signature": "Shard.setTransactionCommitTimeout()", "testcase": false, "constructor": false}, {"identifier": "createRoleChangeNotifier", "parameters": "(final String shardId)", "modifiers": "private", "return": "Optional<ActorRef>", "signature": "Optional<ActorRef> createRoleChangeNotifier(final String shardId)", "full_signature": "private Optional<ActorRef> createRoleChangeNotifier(final String shardId)", "class_method_signature": "Shard.createRoleChangeNotifier(final String shardId)", "testcase": false, "constructor": false}, {"identifier": "postStop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void postStop()", "full_signature": "@Override public void postStop()", "class_method_signature": "Shard.postStop()", "testcase": false, "constructor": false}, {"identifier": "handleRecover", "parameters": "(final Object message)", "modifiers": "@Override protected", "return": "void", "signature": "void handleRecover(final Object message)", "full_signature": "@Override protected void handleRecover(final Object message)", "class_method_signature": "Shard.handleRecover(final Object message)", "testcase": false, "constructor": false}, {"identifier": "handleNonRaftCommand", "parameters": "(final Object message)", "modifiers": "@Override protected", "return": "void", "signature": "void handleNonRaftCommand(final Object message)", "full_signature": "@Override protected void handleNonRaftCommand(final Object message)", "class_method_signature": "Shard.handleNonRaftCommand(final Object message)", "testcase": false, "constructor": false}, {"identifier": "handleRequestAssemblerMessage", "parameters": "(final Object message)", "modifiers": "private", "return": "void", "signature": "void handleRequestAssemblerMessage(final Object message)", "full_signature": "private void handleRequestAssemblerMessage(final Object message)", "class_method_signature": "Shard.handleRequestAssemblerMessage(final Object message)", "testcase": false, "constructor": false}, {"identifier": "handleRequestEnvelope", "parameters": "(final RequestEnvelope envelope)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void handleRequestEnvelope(final RequestEnvelope envelope)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void handleRequestEnvelope(final RequestEnvelope envelope)", "class_method_signature": "Shard.handleRequestEnvelope(final RequestEnvelope envelope)", "testcase": false, "constructor": false}, {"identifier": "commitTimeoutCheck", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void commitTimeoutCheck()", "full_signature": "private void commitTimeoutCheck()", "class_method_signature": "Shard.commitTimeoutCheck()", "testcase": false, "constructor": false}, {"identifier": "updateAccess", "parameters": "(final SimpleShardDataTreeCohort cohort)", "modifiers": "private", "return": "OptionalLong", "signature": "OptionalLong updateAccess(final SimpleShardDataTreeCohort cohort)", "full_signature": "private OptionalLong updateAccess(final SimpleShardDataTreeCohort cohort)", "class_method_signature": "Shard.updateAccess(final SimpleShardDataTreeCohort cohort)", "testcase": false, "constructor": false}, {"identifier": "disableTracking", "parameters": "(final DisableTrackingPayload payload)", "modifiers": "private", "return": "void", "signature": "void disableTracking(final DisableTrackingPayload payload)", "full_signature": "private void disableTracking(final DisableTrackingPayload payload)", "class_method_signature": "Shard.disableTracking(final DisableTrackingPayload payload)", "testcase": false, "constructor": false}, {"identifier": "onMakeLeaderLocal", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void onMakeLeaderLocal()", "full_signature": "private void onMakeLeaderLocal()", "class_method_signature": "Shard.onMakeLeaderLocal()", "testcase": false, "constructor": false}, {"identifier": "findFrontend", "parameters": "(final ClientIdentifier clientId)", "modifiers": "private @Nullable", "return": "LeaderFrontendState", "signature": "LeaderFrontendState findFrontend(final ClientIdentifier clientId)", "full_signature": "private @Nullable LeaderFrontendState findFrontend(final ClientIdentifier clientId)", "class_method_signature": "Shard.findFrontend(final ClientIdentifier clientId)", "testcase": false, "constructor": false}, {"identifier": "getFrontend", "parameters": "(final ClientIdentifier clientId)", "modifiers": "private", "return": "LeaderFrontendState", "signature": "LeaderFrontendState getFrontend(final ClientIdentifier clientId)", "full_signature": "private LeaderFrontendState getFrontend(final ClientIdentifier clientId)", "class_method_signature": "Shard.getFrontend(final ClientIdentifier clientId)", "testcase": false, "constructor": false}, {"identifier": "selectVersion", "parameters": "(final ConnectClientRequest message)", "modifiers": "private static @NonNull", "return": "ABIVersion", "signature": "ABIVersion selectVersion(final ConnectClientRequest message)", "full_signature": "private static @NonNull ABIVersion selectVersion(final ConnectClientRequest message)", "class_method_signature": "Shard.selectVersion(final ConnectClientRequest message)", "testcase": false, "constructor": false}, {"identifier": "handleConnectClient", "parameters": "(final ConnectClientRequest message)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void handleConnectClient(final ConnectClientRequest message)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void handleConnectClient(final ConnectClientRequest message)", "class_method_signature": "Shard.handleConnectClient(final ConnectClientRequest message)", "testcase": false, "constructor": false}, {"identifier": "handleRequest", "parameters": "(final RequestEnvelope envelope, final long now)", "modifiers": "private @Nullable", "return": "RequestSuccess<?, ?>", "signature": "RequestSuccess<?, ?> handleRequest(final RequestEnvelope envelope, final long now)", "full_signature": "private @Nullable RequestSuccess<?, ?> handleRequest(final RequestEnvelope envelope, final long now)", "class_method_signature": "Shard.handleRequest(final RequestEnvelope envelope, final long now)", "testcase": false, "constructor": false}, {"identifier": "handleGetKnownClients", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void handleGetKnownClients()", "full_signature": "private void handleGetKnownClients()", "class_method_signature": "Shard.handleGetKnownClients()", "testcase": false, "constructor": false}, {"identifier": "hasLeader", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean hasLeader()", "full_signature": "private boolean hasLeader()", "class_method_signature": "Shard.hasLeader()", "testcase": false, "constructor": false}, {"identifier": "getPendingTxCommitQueueSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPendingTxCommitQueueSize()", "full_signature": "public int getPendingTxCommitQueueSize()", "class_method_signature": "Shard.getPendingTxCommitQueueSize()", "testcase": false, "constructor": false}, {"identifier": "getCohortCacheSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCohortCacheSize()", "full_signature": "public int getCohortCacheSize()", "class_method_signature": "Shard.getCohortCacheSize()", "testcase": false, "constructor": false}, {"identifier": "getRoleChangeNotifier", "parameters": "()", "modifiers": "@Override protected", "return": "Optional<ActorRef>", "signature": "Optional<ActorRef> getRoleChangeNotifier()", "full_signature": "@Override protected Optional<ActorRef> getRoleChangeNotifier()", "class_method_signature": "Shard.getRoleChangeNotifier()", "testcase": false, "constructor": false}, {"identifier": "getShardName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getShardName()", "full_signature": " String getShardName()", "class_method_signature": "Shard.getShardName()", "testcase": false, "constructor": false}, {"identifier": "newLeaderStateChanged", "parameters": "(final String memberId, final String leaderId,\n            final short leaderPayloadVersion)", "modifiers": "@Override protected", "return": "LeaderStateChanged", "signature": "LeaderStateChanged newLeaderStateChanged(final String memberId, final String leaderId,\n            final short leaderPayloadVersion)", "full_signature": "@Override protected LeaderStateChanged newLeaderStateChanged(final String memberId, final String leaderId,\n            final short leaderPayloadVersion)", "class_method_signature": "Shard.newLeaderStateChanged(final String memberId, final String leaderId,\n            final short leaderPayloadVersion)", "testcase": false, "constructor": false}, {"identifier": "onDatastoreContext", "parameters": "(final DatastoreContext context)", "modifiers": "protected", "return": "void", "signature": "void onDatastoreContext(final DatastoreContext context)", "full_signature": "protected void onDatastoreContext(final DatastoreContext context)", "class_method_signature": "Shard.onDatastoreContext(final DatastoreContext context)", "testcase": false, "constructor": false}, {"identifier": "persistPayload", "parameters": "(final Identifier id, final Payload payload, final boolean batchHint)", "modifiers": "", "return": "void", "signature": "void persistPayload(final Identifier id, final Payload payload, final boolean batchHint)", "full_signature": " void persistPayload(final Identifier id, final Payload payload, final boolean batchHint)", "class_method_signature": "Shard.persistPayload(final Identifier id, final Payload payload, final boolean batchHint)", "testcase": false, "constructor": false}, {"identifier": "handleCommitTransaction", "parameters": "(final CommitTransaction commit)", "modifiers": "private", "return": "void", "signature": "void handleCommitTransaction(final CommitTransaction commit)", "full_signature": "private void handleCommitTransaction(final CommitTransaction commit)", "class_method_signature": "Shard.handleCommitTransaction(final CommitTransaction commit)", "testcase": false, "constructor": false}, {"identifier": "handleCanCommitTransaction", "parameters": "(final CanCommitTransaction canCommit)", "modifiers": "private", "return": "void", "signature": "void handleCanCommitTransaction(final CanCommitTransaction canCommit)", "full_signature": "private void handleCanCommitTransaction(final CanCommitTransaction canCommit)", "class_method_signature": "Shard.handleCanCommitTransaction(final CanCommitTransaction canCommit)", "testcase": false, "constructor": false}, {"identifier": "handleBatchedModificationsLocal", "parameters": "(final BatchedModifications batched, final ActorRef sender)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") protected", "return": "void", "signature": "void handleBatchedModificationsLocal(final BatchedModifications batched, final ActorRef sender)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") protected void handleBatchedModificationsLocal(final BatchedModifications batched, final ActorRef sender)", "class_method_signature": "Shard.handleBatchedModificationsLocal(final BatchedModifications batched, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "handleBatchedModifications", "parameters": "(final BatchedModifications batched)", "modifiers": "private", "return": "void", "signature": "void handleBatchedModifications(final BatchedModifications batched)", "full_signature": "private void handleBatchedModifications(final BatchedModifications batched)", "class_method_signature": "Shard.handleBatchedModifications(final BatchedModifications batched)", "testcase": false, "constructor": false}, {"identifier": "failIfIsolatedLeader", "parameters": "(final ActorRef sender)", "modifiers": "private", "return": "boolean", "signature": "boolean failIfIsolatedLeader(final ActorRef sender)", "full_signature": "private boolean failIfIsolatedLeader(final ActorRef sender)", "class_method_signature": "Shard.failIfIsolatedLeader(final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "isIsolatedLeader", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isIsolatedLeader()", "full_signature": "protected boolean isIsolatedLeader()", "class_method_signature": "Shard.isIsolatedLeader()", "testcase": false, "constructor": false}, {"identifier": "handleReadyLocalTransaction", "parameters": "(final ReadyLocalTransaction message)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void handleReadyLocalTransaction(final ReadyLocalTransaction message)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void handleReadyLocalTransaction(final ReadyLocalTransaction message)", "class_method_signature": "Shard.handleReadyLocalTransaction(final ReadyLocalTransaction message)", "testcase": false, "constructor": false}, {"identifier": "handleForwardedReadyTransaction", "parameters": "(final ForwardedReadyTransaction forwardedReady)", "modifiers": "private", "return": "void", "signature": "void handleForwardedReadyTransaction(final ForwardedReadyTransaction forwardedReady)", "full_signature": "private void handleForwardedReadyTransaction(final ForwardedReadyTransaction forwardedReady)", "class_method_signature": "Shard.handleForwardedReadyTransaction(final ForwardedReadyTransaction forwardedReady)", "testcase": false, "constructor": false}, {"identifier": "handleAbortTransaction", "parameters": "(final AbortTransaction abort)", "modifiers": "private", "return": "void", "signature": "void handleAbortTransaction(final AbortTransaction abort)", "full_signature": "private void handleAbortTransaction(final AbortTransaction abort)", "class_method_signature": "Shard.handleAbortTransaction(final AbortTransaction abort)", "testcase": false, "constructor": false}, {"identifier": "doAbortTransaction", "parameters": "(final Identifier transactionID, final ActorRef sender)", "modifiers": "", "return": "void", "signature": "void doAbortTransaction(final Identifier transactionID, final ActorRef sender)", "full_signature": " void doAbortTransaction(final Identifier transactionID, final ActorRef sender)", "class_method_signature": "Shard.doAbortTransaction(final Identifier transactionID, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "handleCreateTransaction", "parameters": "(final Object message)", "modifiers": "private", "return": "void", "signature": "void handleCreateTransaction(final Object message)", "full_signature": "private void handleCreateTransaction(final Object message)", "class_method_signature": "Shard.handleCreateTransaction(final Object message)", "testcase": false, "constructor": false}, {"identifier": "closeTransactionChain", "parameters": "(final CloseTransactionChain closeTransactionChain)", "modifiers": "private", "return": "void", "signature": "void closeTransactionChain(final CloseTransactionChain closeTransactionChain)", "full_signature": "private void closeTransactionChain(final CloseTransactionChain closeTransactionChain)", "class_method_signature": "Shard.closeTransactionChain(final CloseTransactionChain closeTransactionChain)", "testcase": false, "constructor": false}, {"identifier": "createTransaction", "parameters": "(final CreateTransaction createTransaction)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void createTransaction(final CreateTransaction createTransaction)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void createTransaction(final CreateTransaction createTransaction)", "class_method_signature": "Shard.createTransaction(final CreateTransaction createTransaction)", "testcase": false, "constructor": false}, {"identifier": "createTransaction", "parameters": "(final int transactionType, final TransactionIdentifier transactionId)", "modifiers": "private", "return": "ActorRef", "signature": "ActorRef createTransaction(final int transactionType, final TransactionIdentifier transactionId)", "full_signature": "private ActorRef createTransaction(final int transactionType, final TransactionIdentifier transactionId)", "class_method_signature": "Shard.createTransaction(final int transactionType, final TransactionIdentifier transactionId)", "testcase": false, "constructor": false}, {"identifier": "askProtocolEncountered", "parameters": "(final TransactionIdentifier transactionId)", "modifiers": "private", "return": "void", "signature": "void askProtocolEncountered(final TransactionIdentifier transactionId)", "full_signature": "private void askProtocolEncountered(final TransactionIdentifier transactionId)", "class_method_signature": "Shard.askProtocolEncountered(final TransactionIdentifier transactionId)", "testcase": false, "constructor": false}, {"identifier": "askProtocolEncountered", "parameters": "(final ClientIdentifier clientId)", "modifiers": "private", "return": "void", "signature": "void askProtocolEncountered(final ClientIdentifier clientId)", "full_signature": "private void askProtocolEncountered(final ClientIdentifier clientId)", "class_method_signature": "Shard.askProtocolEncountered(final ClientIdentifier clientId)", "testcase": false, "constructor": false}, {"identifier": "updateSchemaContext", "parameters": "(final UpdateSchemaContext message)", "modifiers": "private", "return": "void", "signature": "void updateSchemaContext(final UpdateSchemaContext message)", "full_signature": "private void updateSchemaContext(final UpdateSchemaContext message)", "class_method_signature": "Shard.updateSchemaContext(final UpdateSchemaContext message)", "testcase": false, "constructor": false}, {"identifier": "updateSchemaContext", "parameters": "(final @NonNull EffectiveModelContext schemaContext)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void updateSchemaContext(final @NonNull EffectiveModelContext schemaContext)", "full_signature": "@VisibleForTesting void updateSchemaContext(final @NonNull EffectiveModelContext schemaContext)", "class_method_signature": "Shard.updateSchemaContext(final @NonNull EffectiveModelContext schemaContext)", "testcase": false, "constructor": false}, {"identifier": "isMetricsCaptureEnabled", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isMetricsCaptureEnabled()", "full_signature": "private boolean isMetricsCaptureEnabled()", "class_method_signature": "Shard.isMetricsCaptureEnabled()", "testcase": false, "constructor": false}, {"identifier": "getRaftActorSnapshotCohort", "parameters": "()", "modifiers": "@Override @VisibleForTesting public", "return": "RaftActorSnapshotCohort", "signature": "RaftActorSnapshotCohort getRaftActorSnapshotCohort()", "full_signature": "@Override @VisibleForTesting public RaftActorSnapshotCohort getRaftActorSnapshotCohort()", "class_method_signature": "Shard.getRaftActorSnapshotCohort()", "testcase": false, "constructor": false}, {"identifier": "getRaftActorRecoveryCohort", "parameters": "()", "modifiers": "@Override protected", "return": "RaftActorRecoveryCohort", "signature": "RaftActorRecoveryCohort getRaftActorRecoveryCohort()", "full_signature": "@Override protected RaftActorRecoveryCohort getRaftActorRecoveryCohort()", "class_method_signature": "Shard.getRaftActorRecoveryCohort()", "testcase": false, "constructor": false}, {"identifier": "onRecoveryComplete", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onRecoveryComplete()", "full_signature": "@Override protected void onRecoveryComplete()", "class_method_signature": "Shard.onRecoveryComplete()", "testcase": false, "constructor": false}, {"identifier": "applyState", "parameters": "(final ActorRef clientActor, final Identifier identifier, final Object data)", "modifiers": "@Override protected", "return": "void", "signature": "void applyState(final ActorRef clientActor, final Identifier identifier, final Object data)", "full_signature": "@Override protected void applyState(final ActorRef clientActor, final Identifier identifier, final Object data)", "class_method_signature": "Shard.applyState(final ActorRef clientActor, final Identifier identifier, final Object data)", "testcase": false, "constructor": false}, {"identifier": "onStateChanged", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onStateChanged()", "full_signature": "@Override protected void onStateChanged()", "class_method_signature": "Shard.onStateChanged()", "testcase": false, "constructor": false}, {"identifier": "onLeaderChanged", "parameters": "(final String oldLeader, final String newLeader)", "modifiers": "@Override protected", "return": "void", "signature": "void onLeaderChanged(final String oldLeader, final String newLeader)", "full_signature": "@Override protected void onLeaderChanged(final String oldLeader, final String newLeader)", "class_method_signature": "Shard.onLeaderChanged(final String oldLeader, final String newLeader)", "testcase": false, "constructor": false}, {"identifier": "convertPendingTransactionsToMessages", "parameters": "()", "modifiers": "public", "return": "Collection<?>", "signature": "Collection<?> convertPendingTransactionsToMessages()", "full_signature": "public Collection<?> convertPendingTransactionsToMessages()", "class_method_signature": "Shard.convertPendingTransactionsToMessages()", "testcase": false, "constructor": false}, {"identifier": "pauseLeader", "parameters": "(final Runnable operation)", "modifiers": "@Override protected", "return": "void", "signature": "void pauseLeader(final Runnable operation)", "full_signature": "@Override protected void pauseLeader(final Runnable operation)", "class_method_signature": "Shard.pauseLeader(final Runnable operation)", "testcase": false, "constructor": false}, {"identifier": "unpauseLeader", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void unpauseLeader()", "full_signature": "@Override protected void unpauseLeader()", "class_method_signature": "Shard.unpauseLeader()", "testcase": false, "constructor": false}, {"identifier": "newOnDemandRaftStateBuilder", "parameters": "()", "modifiers": "@Override protected", "return": "OnDemandRaftState.AbstractBuilder<?, ?>", "signature": "OnDemandRaftState.AbstractBuilder<?, ?> newOnDemandRaftStateBuilder()", "full_signature": "@Override protected OnDemandRaftState.AbstractBuilder<?, ?> newOnDemandRaftStateBuilder()", "class_method_signature": "Shard.newOnDemandRaftStateBuilder()", "testcase": false, "constructor": false}, {"identifier": "persistenceId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String persistenceId()", "full_signature": "@Override public String persistenceId()", "class_method_signature": "Shard.persistenceId()", "testcase": false, "constructor": false}, {"identifier": "getCommitCoordinator", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "ShardCommitCoordinator", "signature": "ShardCommitCoordinator getCommitCoordinator()", "full_signature": "@VisibleForTesting ShardCommitCoordinator getCommitCoordinator()", "class_method_signature": "Shard.getCommitCoordinator()", "testcase": false, "constructor": false}, {"identifier": "getDatastoreContext", "parameters": "()", "modifiers": "public", "return": "DatastoreContext", "signature": "DatastoreContext getDatastoreContext()", "full_signature": "public DatastoreContext getDatastoreContext()", "class_method_signature": "Shard.getDatastoreContext()", "testcase": false, "constructor": false}, {"identifier": "getDataStore", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "ShardDataTree", "signature": "ShardDataTree getDataStore()", "full_signature": "@VisibleForTesting public ShardDataTree getDataStore()", "class_method_signature": "Shard.getDataStore()", "testcase": false, "constructor": false}, {"identifier": "getShardMBean", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "ShardStats", "signature": "ShardStats getShardMBean()", "full_signature": "@VisibleForTesting ShardStats getShardMBean()", "class_method_signature": "Shard.getShardMBean()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "Shard.builder()", "testcase": false, "constructor": false}, {"identifier": "ticker", "parameters": "()", "modifiers": "", "return": "Ticker", "signature": "Ticker ticker()", "full_signature": " Ticker ticker()", "class_method_signature": "Shard.ticker()", "testcase": false, "constructor": false}, {"identifier": "scheduleNextPendingTransaction", "parameters": "()", "modifiers": "", "return": "void", "signature": "void scheduleNextPendingTransaction()", "full_signature": " void scheduleNextPendingTransaction()", "class_method_signature": "Shard.scheduleNextPendingTransaction()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/Shard.java"}, "focal_method": {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "body": "public static Builder builder() {\n        return new Builder();\n    }", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "Shard.builder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}