{"test_class": {"identifier": "MergeFilesTransformerTest", "superclass": "", "interfaces": "", "fields": [], "file": "jetty-build-support/src/test/java/org/eclipse/jetty/toolchain/shade/MergeFilesTransformerTest.java"}, "test_case": {"identifier": "mergeToSeparateFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mergeToSeparateFile()\n        throws Exception\n    {\n        List<String> files =\n            Arrays.asList( \"target/test-classes/META-INF/LICENSE\", \"target/test-classes/META-INF/LICENSE.txt\" );\n        MergeFilesTransformer mergeFilesTransformer = new MergeFilesTransformer( files, \"LICENSE\", false );\n        Path result = Files.createTempFile( \"result_transform\", \".jetty_tmp.zip\" );\n\n        try (JarOutputStream outputStream = new JarOutputStream( Files.newOutputStream( result ) ))\n        {\n            mergeFilesTransformer.modifyOutputStream( outputStream );\n        }\n\n        try (JarInputStream jarInputStream = new JarInputStream( Files.newInputStream( result ) ))\n        {\n            jarInputStream.getNextJarEntry();\n            StringWriter stringWriter = new StringWriter();\n            IOUtil.copy( jarInputStream, stringWriter );\n            String content = stringWriter.toString();\n            // must contain\n            // COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\n            Assertions.assertTrue(\n                content.contains( \"COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\" ) );\n            // Apache License\n            Assertions.assertTrue( content.contains( \"Apache License\" ) );\n            Assertions.assertTrue( content.contains( \"Version 2.0, January 2004\"));\n            Assertions.assertTrue( content.contains( \"\\\"CLASSPATH\\\" EXCEPTION TO THE GPL VERSION 2\"));\n            // Eclipse Public License - v 1.0\n            Assertions.assertTrue( content.contains( \"Eclipse Public License - v 1.0\" ) );\n        } finally\n        {\n            Files.deleteIfExists( result );\n        }\n    }", "signature": "void mergeToSeparateFile()", "full_signature": "@Test public void mergeToSeparateFile()", "class_method_signature": "MergeFilesTransformerTest.mergeToSeparateFile()", "testcase": true, "constructor": false, "invocations": ["asList", "createTempFile", "newOutputStream", "modifyOutputStream", "newInputStream", "getNextJarEntry", "copy", "toString", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "deleteIfExists"]}, "focal_class": {"identifier": "MergeFilesTransformer", "superclass": "", "interfaces": "implements ResourceTransformer", "fields": [{"original_string": "private List<String> files;", "modifier": "private", "type": "List<String>", "declarator": "files", "var_name": "files"}, {"original_string": "private String resource;", "modifier": "private", "type": "String", "declarator": "resource", "var_name": "resource"}, {"original_string": "private boolean preserveResourceContent = true;", "modifier": "private", "type": "boolean", "declarator": "preserveResourceContent = true", "var_name": "preserveResourceContent"}, {"original_string": "private ByteArrayOutputStream data = new ByteArrayOutputStream();", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "data = new ByteArrayOutputStream()", "var_name": "data"}], "methods": [{"identifier": "MergeFilesTransformer", "parameters": "()", "modifiers": "public", "return": "", "signature": " MergeFilesTransformer()", "full_signature": "public  MergeFilesTransformer()", "class_method_signature": "MergeFilesTransformer.MergeFilesTransformer()", "testcase": false, "constructor": true}, {"identifier": "MergeFilesTransformer", "parameters": "( List<String> files, String resource, boolean preserveResourceContent )", "modifiers": "public", "return": "", "signature": " MergeFilesTransformer( List<String> files, String resource, boolean preserveResourceContent )", "full_signature": "public  MergeFilesTransformer( List<String> files, String resource, boolean preserveResourceContent )", "class_method_signature": "MergeFilesTransformer.MergeFilesTransformer( List<String> files, String resource, boolean preserveResourceContent )", "testcase": false, "constructor": true}, {"identifier": "canTransformResource", "parameters": "( String resource )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canTransformResource( String resource )", "full_signature": "@Override public boolean canTransformResource( String resource )", "class_method_signature": "MergeFilesTransformer.canTransformResource( String resource )", "testcase": false, "constructor": false}, {"identifier": "processResource", "parameters": "( String resource, InputStream is, List<Relocator> relocators )", "modifiers": "@Override public", "return": "void", "signature": "void processResource( String resource, InputStream is, List<Relocator> relocators )", "full_signature": "@Override public void processResource( String resource, InputStream is, List<Relocator> relocators )", "class_method_signature": "MergeFilesTransformer.processResource( String resource, InputStream is, List<Relocator> relocators )", "testcase": false, "constructor": false}, {"identifier": "hasTransformedResource", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasTransformedResource()", "full_signature": "@Override public boolean hasTransformedResource()", "class_method_signature": "MergeFilesTransformer.hasTransformedResource()", "testcase": false, "constructor": false}, {"identifier": "modifyOutputStream", "parameters": "( JarOutputStream jos )", "modifiers": "@Override public", "return": "void", "signature": "void modifyOutputStream( JarOutputStream jos )", "full_signature": "@Override public void modifyOutputStream( JarOutputStream jos )", "class_method_signature": "MergeFilesTransformer.modifyOutputStream( JarOutputStream jos )", "testcase": false, "constructor": false}], "file": "jetty-build-support/src/main/java/org/eclipse/jetty/toolchain/shade/MergeFilesTransformer.java"}, "focal_method": {"identifier": "modifyOutputStream", "parameters": "( JarOutputStream jos )", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void modifyOutputStream( JarOutputStream jos )\n        throws IOException\n    {\n        for ( String file : files )\n        {\n            Files.copy( Paths.get( file ), data );\n            data.write( '\\n' );\n        }\n\n        jos.putNextEntry( new JarEntry( resource ) );\n\n        IOUtil.copy( new ByteArrayInputStream( data.toByteArray() ), jos );\n        data.reset();\n    }", "signature": "void modifyOutputStream( JarOutputStream jos )", "full_signature": "@Override public void modifyOutputStream( JarOutputStream jos )", "class_method_signature": "MergeFilesTransformer.modifyOutputStream( JarOutputStream jos )", "testcase": false, "constructor": false, "invocations": ["copy", "get", "write", "putNextEntry", "copy", "toByteArray", "reset"]}, "repository": {"repo_id": 2045140, "url": "https://github.com/eclipse/jetty.toolchain", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 10, "size": 2094, "license": "licensed"}}