{"test_class": {"identifier": "CSVParseTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/util/CSVParseTest.java"}, "test_case": {"identifier": "parseFlySightDateTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseFlySightDateTest() throws Exception {\n        long millis = 1517000000400L;\n        String str = \"2018-01-26T20:53:20.40Z\"; // FlySight ISO format\n\n        long parsed = CSVParse.parseFlySightDate(str);\n        assertEquals(millis, parsed);\n    }", "signature": "void parseFlySightDateTest()", "full_signature": "@Test public void parseFlySightDateTest()", "class_method_signature": "CSVParseTest.parseFlySightDateTest()", "testcase": true, "constructor": false, "invocations": ["parseFlySightDate", "assertEquals"]}, "focal_class": {"identifier": "CSVParse", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"CSVParse\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"CSVParse\"", "var_name": "TAG"}, {"original_string": "private static SimpleDateFormat df;", "modifier": "private static", "type": "SimpleDateFormat", "declarator": "df", "var_name": "df"}], "methods": [{"identifier": "getColumnDouble", "parameters": "(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "modifiers": "public static", "return": "double", "signature": "double getColumnDouble(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "full_signature": "public static double getColumnDouble(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "class_method_signature": "CSVParse.getColumnDouble(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "testcase": false, "constructor": false}, {"identifier": "getColumnLong", "parameters": "(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "modifiers": "public static", "return": "long", "signature": "long getColumnLong(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "full_signature": "public static long getColumnLong(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "class_method_signature": "CSVParse.getColumnLong(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "testcase": false, "constructor": false}, {"identifier": "getColumnDate", "parameters": "(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "modifiers": "public static", "return": "long", "signature": "long getColumnDate(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "full_signature": "public static long getColumnDate(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "class_method_signature": "CSVParse.getColumnDate(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "testcase": false, "constructor": false}, {"identifier": "getColumnString", "parameters": "(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "modifiers": "@NonNull public static", "return": "String", "signature": "String getColumnString(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "full_signature": "@NonNull public static String getColumnString(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "class_method_signature": "CSVParse.getColumnString(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "testcase": false, "constructor": false}, {"identifier": "getColumnYes", "parameters": "(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "modifiers": "public static", "return": "boolean", "signature": "boolean getColumnYes(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "full_signature": "public static boolean getColumnYes(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "class_method_signature": "CSVParse.getColumnYes(@NonNull String[] row, @NonNull CSVHeader columns, @NonNull String columnName)", "testcase": false, "constructor": false}, {"identifier": "parseFlySightDate", "parameters": "(@NonNull String dateString)", "modifiers": "static", "return": "long", "signature": "long parseFlySightDate(@NonNull String dateString)", "full_signature": "static long parseFlySightDate(@NonNull String dateString)", "class_method_signature": "CSVParse.parseFlySightDate(@NonNull String dateString)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/util/CSVParse.java"}, "focal_method": {"identifier": "parseFlySightDate", "parameters": "(@NonNull String dateString)", "modifiers": "static", "return": "long", "body": "static long parseFlySightDate(@NonNull String dateString) throws ParseException {\n        // Lazy init\n        if (df == null) {\n            // 2018-01-25T11:48:09.80Z\n            df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\", Locale.US);\n            df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        }\n        // Handle milliseconds separately\n        long millis = 0;\n        final int len = dateString.length();\n        if (dateString.charAt(len - 4) == '.') {\n            millis = 10 * Long.parseLong(dateString.substring(len - 3, len - 1));\n        }\n        return df.parse(dateString).getTime() + millis;\n    }", "signature": "long parseFlySightDate(@NonNull String dateString)", "full_signature": "static long parseFlySightDate(@NonNull String dateString)", "class_method_signature": "CSVParse.parseFlySightDate(@NonNull String dateString)", "testcase": false, "constructor": false, "invocations": ["setTimeZone", "getTimeZone", "length", "charAt", "parseLong", "substring", "getTime", "parse"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}