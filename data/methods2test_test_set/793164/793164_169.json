{"test_class": {"identifier": "SplitterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static CamelContext camelContext;", "modifier": "private static", "type": "CamelContext", "declarator": "camelContext", "var_name": "camelContext"}, {"original_string": "private Splitter splitter;", "modifier": "private", "type": "Splitter", "declarator": "splitter", "var_name": "splitter"}, {"original_string": "private TestSplitRule splitRule;", "modifier": "private", "type": "TestSplitRule", "declarator": "splitRule", "var_name": "splitRule"}, {"original_string": "private TestAggregationStrategy aggregationStrat;", "modifier": "private", "type": "TestAggregationStrategy", "declarator": "aggregationStrat", "var_name": "aggregationStrat"}, {"original_string": "private TestProcessor dest;", "modifier": "private", "type": "TestProcessor", "declarator": "dest", "var_name": "dest"}], "file": "platform-camel/core/src/test/java/org/openehealth/ipf/platform/camel/core/process/splitter/SplitterTest.java"}, "test_case": {"identifier": "testSplitRuleWithArrayResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSplitRuleWithArrayResult() throws Exception {\n        Exchange origExchange = createTestExchange();\n        origExchange.getIn().setBody(\"bla,blu\");\n        Splitter splitterWithArrayResult = new Splitter(new Expression() {\n            @Override\n            public <T> T evaluate(Exchange exchange, Class<T> type) {\n                return type.cast(getContent(exchange).split(\",\"));            \n            }}, dest);\n        splitterWithArrayResult.aggregate(new TestAggregationStrategy());\n\n        splitterWithArrayResult.process(origExchange);\n        \n        List<Exchange> received = dest.getReceived();\n        assertEquals(2, received.size());\n        \n        assertEquals(\"bla\", getContent(received.get(0)));\n        assertEquals(\"blu\", getContent(received.get(1)));\n        \n        assertEquals(\"bla:blu\", origExchange.getOut().getBody());\n    }", "signature": "void testSplitRuleWithArrayResult()", "full_signature": "@Test public void testSplitRuleWithArrayResult()", "class_method_signature": "SplitterTest.testSplitRuleWithArrayResult()", "testcase": true, "constructor": false, "invocations": ["createTestExchange", "setBody", "getIn", "cast", "split", "getContent", "aggregate", "process", "getReceived", "assertEquals", "size", "assertEquals", "getContent", "get", "assertEquals", "getContent", "get", "assertEquals", "getBody", "getOut"]}, "focal_class": {"identifier": "Splitter", "superclass": "extends DelegateProcessor", "interfaces": "", "fields": [{"original_string": "private final Expression splitRule;", "modifier": "private final", "type": "Expression", "declarator": "splitRule", "var_name": "splitRule"}, {"original_string": "private static final UseLatestAggregationStrategy DEFAULT_AGGREGATION_STRATEGY = \n        new UseLatestAggregationStrategy();", "modifier": "private static final", "type": "UseLatestAggregationStrategy", "declarator": "DEFAULT_AGGREGATION_STRATEGY = \n        new UseLatestAggregationStrategy()", "var_name": "DEFAULT_AGGREGATION_STRATEGY"}, {"original_string": "private AggregationStrategy aggregationStrategy = DEFAULT_AGGREGATION_STRATEGY;", "modifier": "private", "type": "AggregationStrategy", "declarator": "aggregationStrategy = DEFAULT_AGGREGATION_STRATEGY", "var_name": "aggregationStrategy"}], "methods": [{"identifier": "Splitter", "parameters": "(Expression splitRule, Processor processor)", "modifiers": "public", "return": "", "signature": " Splitter(Expression splitRule, Processor processor)", "full_signature": "public  Splitter(Expression splitRule, Processor processor)", "class_method_signature": "Splitter.Splitter(Expression splitRule, Processor processor)", "testcase": false, "constructor": true}, {"identifier": "aggregate", "parameters": "(AggregationStrategy strategy)", "modifiers": "public", "return": "Splitter", "signature": "Splitter aggregate(AggregationStrategy strategy)", "full_signature": "public Splitter aggregate(AggregationStrategy strategy)", "class_method_signature": "Splitter.aggregate(AggregationStrategy strategy)", "testcase": false, "constructor": false}, {"identifier": "processNext", "parameters": "(Exchange origExchange)", "modifiers": "@Override protected", "return": "void", "signature": "void processNext(Exchange origExchange)", "full_signature": "@Override protected void processNext(Exchange origExchange)", "class_method_signature": "Splitter.processNext(Exchange origExchange)", "testcase": false, "constructor": false}, {"identifier": "finalizeAggregate", "parameters": "(Exchange origExchange, Exchange aggregate)", "modifiers": "protected", "return": "void", "signature": "void finalizeAggregate(Exchange origExchange, Exchange aggregate)", "full_signature": "protected void finalizeAggregate(Exchange origExchange, Exchange aggregate)", "class_method_signature": "Splitter.finalizeAggregate(Exchange origExchange, Exchange aggregate)", "testcase": false, "constructor": false}, {"identifier": "finalizeSubExchange", "parameters": "(Exchange origExchange, Exchange subExchange, SplitIndex index)", "modifiers": "protected", "return": "void", "signature": "void finalizeSubExchange(Exchange origExchange, Exchange subExchange, SplitIndex index)", "full_signature": "protected void finalizeSubExchange(Exchange origExchange, Exchange subExchange, SplitIndex index)", "class_method_signature": "Splitter.finalizeSubExchange(Exchange origExchange, Exchange subExchange, SplitIndex index)", "testcase": false, "constructor": false}, {"identifier": "processAllResults", "parameters": "(Exchange origExchange,\n            Iterable splitResult)", "modifiers": "private", "return": "Exchange", "signature": "Exchange processAllResults(Exchange origExchange,\n            Iterable splitResult)", "full_signature": "private Exchange processAllResults(Exchange origExchange,\n            Iterable splitResult)", "class_method_signature": "Splitter.processAllResults(Exchange origExchange,\n            Iterable splitResult)", "testcase": false, "constructor": false}, {"identifier": "processResult", "parameters": "(final Exchange origExchange,\n            final SplitIndex index, \n            final Object splitPart)", "modifiers": "private", "return": "Exchange", "signature": "Exchange processResult(final Exchange origExchange,\n            final SplitIndex index, \n            final Object splitPart)", "full_signature": "private Exchange processResult(final Exchange origExchange,\n            final SplitIndex index, \n            final Object splitPart)", "class_method_signature": "Splitter.processResult(final Exchange origExchange,\n            final SplitIndex index, \n            final Object splitPart)", "testcase": false, "constructor": false}, {"identifier": "doAggregate", "parameters": "(Exchange aggregate, Exchange subExchange)", "modifiers": "private", "return": "Exchange", "signature": "Exchange doAggregate(Exchange aggregate, Exchange subExchange)", "full_signature": "private Exchange doAggregate(Exchange aggregate, Exchange subExchange)", "class_method_signature": "Splitter.doAggregate(Exchange aggregate, Exchange subExchange)", "testcase": false, "constructor": false}, {"identifier": "evaluateSplitRule", "parameters": "(Exchange origExchange)", "modifiers": "private", "return": "Iterable", "signature": "Iterable evaluateSplitRule(Exchange origExchange)", "full_signature": "private Iterable evaluateSplitRule(Exchange origExchange)", "class_method_signature": "Splitter.evaluateSplitRule(Exchange origExchange)", "testcase": false, "constructor": false}], "file": "platform-camel/core/src/main/java/org/openehealth/ipf/platform/camel/core/process/splitter/Splitter.java"}, "focal_method": {"identifier": "aggregate", "parameters": "(AggregationStrategy strategy)", "modifiers": "public", "return": "Splitter", "body": "public Splitter aggregate(AggregationStrategy strategy) {\n        aggregationStrategy =\n            strategy != null ? strategy : DEFAULT_AGGREGATION_STRATEGY;\n        return this;\n    }", "signature": "Splitter aggregate(AggregationStrategy strategy)", "full_signature": "public Splitter aggregate(AggregationStrategy strategy)", "class_method_signature": "Splitter.aggregate(AggregationStrategy strategy)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}