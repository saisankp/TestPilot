{"test_class": {"identifier": "MethodAnalyzerTest", "superclass": "", "interfaces": "", "fields": [], "file": "smali/dexlib2/src/test/java/org/jf/dexlib2/analysis/MethodAnalyzerTest.java"}, "test_case": {"identifier": "testInstanceOfNarrowingEqz_dalvik", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInstanceOfNarrowingEqz_dalvik() throws IOException {\n        MethodImplementationBuilder builder = new MethodImplementationBuilder(2);\n\n        builder.addInstruction(new BuilderInstruction22c(Opcode.INSTANCE_OF, 0, 1,\n                new ImmutableTypeReference(\"Lmain;\")));\n        builder.addInstruction(new BuilderInstruction21t(Opcode.IF_EQZ, 0, builder.getLabel(\"not_instance_of\")));\n        builder.addInstruction(new BuilderInstruction10x(Opcode.RETURN_VOID));\n\n        builder.addLabel(\"not_instance_of\");\n        builder.addInstruction(new BuilderInstruction10x(Opcode.RETURN_VOID));\n\n        MethodImplementation methodImplementation = builder.getMethodImplementation();\n\n        Method method = new ImmutableMethod(\"Lmain;\", \"narrowing\",\n                Collections.singletonList(new ImmutableMethodParameter(\"Ljava/lang/Object;\", null, null)), \"V\",\n                AccessFlags.PUBLIC.getValue(), null, methodImplementation);\n        ClassDef classDef = new ImmutableClassDef(\"Lmain;\", AccessFlags.PUBLIC.getValue(), \"Ljava/lang/Object;\", null,\n                null, null, null, Collections.singletonList(method));\n        DexFile dexFile = new ImmutableDexFile(Opcodes.forApi(19), Collections.singletonList(classDef));\n\n        ClassPath classPath = new ClassPath(new DexClassProvider(dexFile));\n        MethodAnalyzer methodAnalyzer = new MethodAnalyzer(classPath, method, null, false);\n\n        List<AnalyzedInstruction> analyzedInstructions = methodAnalyzer.getAnalyzedInstructions();\n        Assert.assertEquals(\"Ljava/lang/Object;\",\n                analyzedInstructions.get(2).getPreInstructionRegisterType(1).type.getType());\n\n        Assert.assertEquals(\"Ljava/lang/Object;\",\n                analyzedInstructions.get(3).getPreInstructionRegisterType(1).type.getType());\n    }", "signature": "void testInstanceOfNarrowingEqz_dalvik()", "full_signature": "@Test public void testInstanceOfNarrowingEqz_dalvik()", "class_method_signature": "MethodAnalyzerTest.testInstanceOfNarrowingEqz_dalvik()", "testcase": true, "constructor": false, "invocations": ["addInstruction", "addInstruction", "getLabel", "addInstruction", "addLabel", "addInstruction", "getMethodImplementation", "singletonList", "getValue", "getValue", "singletonList", "forApi", "singletonList", "getAnalyzedInstructions", "assertEquals", "getType", "getPreInstructionRegisterType", "get", "assertEquals", "getType", "getPreInstructionRegisterType", "get"]}, "focal_class": {"identifier": "MethodAnalyzer", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Nonnull private final Method method;", "modifier": "@Nonnull private final", "type": "Method", "declarator": "method", "var_name": "method"}, {"original_string": "@Nonnull private final MethodImplementation methodImpl;", "modifier": "@Nonnull private final", "type": "MethodImplementation", "declarator": "methodImpl", "var_name": "methodImpl"}, {"original_string": "private final boolean normalizeVirtualMethods;", "modifier": "private final", "type": "boolean", "declarator": "normalizeVirtualMethods", "var_name": "normalizeVirtualMethods"}, {"original_string": "private final int paramRegisterCount;", "modifier": "private final", "type": "int", "declarator": "paramRegisterCount", "var_name": "paramRegisterCount"}, {"original_string": "@Nonnull private final ClassPath classPath;", "modifier": "@Nonnull private final", "type": "ClassPath", "declarator": "classPath", "var_name": "classPath"}, {"original_string": "@Nullable private final InlineMethodResolver inlineResolver;", "modifier": "@Nullable private final", "type": "InlineMethodResolver", "declarator": "inlineResolver", "var_name": "inlineResolver"}, {"original_string": "@Nonnull private final SparseArray<AnalyzedInstruction> analyzedInstructions =\n            new SparseArray<AnalyzedInstruction>(0);", "modifier": "@Nonnull private final", "type": "SparseArray<AnalyzedInstruction>", "declarator": "analyzedInstructions =\n            new SparseArray<AnalyzedInstruction>(0)", "var_name": "analyzedInstructions"}, {"original_string": "@Nonnull private final BitSet analyzedState;", "modifier": "@Nonnull private final", "type": "BitSet", "declarator": "analyzedState", "var_name": "analyzedState"}, {"original_string": "@Nullable private AnalysisException analysisException = null;", "modifier": "@Nullable private", "type": "AnalysisException", "declarator": "analysisException = null", "var_name": "analysisException"}, {"original_string": "private final AnalyzedInstruction startOfMethod;", "modifier": "private final", "type": "AnalyzedInstruction", "declarator": "startOfMethod", "var_name": "startOfMethod"}, {"original_string": "private static final BitSet Primitive32BitCategories = BitSetUtils.bitSetOfIndexes(\n            RegisterType.NULL,\n            RegisterType.ONE,\n            RegisterType.BOOLEAN,\n            RegisterType.BYTE,\n            RegisterType.POS_BYTE,\n            RegisterType.SHORT,\n            RegisterType.POS_SHORT,\n            RegisterType.CHAR,\n            RegisterType.INTEGER,\n            RegisterType.FLOAT);", "modifier": "private static final", "type": "BitSet", "declarator": "Primitive32BitCategories = BitSetUtils.bitSetOfIndexes(\n            RegisterType.NULL,\n            RegisterType.ONE,\n            RegisterType.BOOLEAN,\n            RegisterType.BYTE,\n            RegisterType.POS_BYTE,\n            RegisterType.SHORT,\n            RegisterType.POS_SHORT,\n            RegisterType.CHAR,\n            RegisterType.INTEGER,\n            RegisterType.FLOAT)", "var_name": "Primitive32BitCategories"}, {"original_string": "private static final BitSet WideLowCategories = BitSetUtils.bitSetOfIndexes(\n            RegisterType.LONG_LO,\n            RegisterType.DOUBLE_LO);", "modifier": "private static final", "type": "BitSet", "declarator": "WideLowCategories = BitSetUtils.bitSetOfIndexes(\n            RegisterType.LONG_LO,\n            RegisterType.DOUBLE_LO)", "var_name": "WideLowCategories"}, {"original_string": "private static final BitSet WideHighCategories = BitSetUtils.bitSetOfIndexes(\n            RegisterType.LONG_HI,\n            RegisterType.DOUBLE_HI);", "modifier": "private static final", "type": "BitSet", "declarator": "WideHighCategories = BitSetUtils.bitSetOfIndexes(\n            RegisterType.LONG_HI,\n            RegisterType.DOUBLE_HI)", "var_name": "WideHighCategories"}, {"original_string": "private static final BitSet ReferenceOrUninitCategories = BitSetUtils.bitSetOfIndexes(\n            RegisterType.NULL,\n            RegisterType.UNINIT_REF,\n            RegisterType.UNINIT_THIS,\n            RegisterType.REFERENCE);", "modifier": "private static final", "type": "BitSet", "declarator": "ReferenceOrUninitCategories = BitSetUtils.bitSetOfIndexes(\n            RegisterType.NULL,\n            RegisterType.UNINIT_REF,\n            RegisterType.UNINIT_THIS,\n            RegisterType.REFERENCE)", "var_name": "ReferenceOrUninitCategories"}, {"original_string": "private static final BitSet BooleanCategories = BitSetUtils.bitSetOfIndexes(\n            RegisterType.NULL,\n            RegisterType.ONE,\n            RegisterType.BOOLEAN);", "modifier": "private static final", "type": "BitSet", "declarator": "BooleanCategories = BitSetUtils.bitSetOfIndexes(\n            RegisterType.NULL,\n            RegisterType.ONE,\n            RegisterType.BOOLEAN)", "var_name": "BooleanCategories"}], "methods": [{"identifier": "MethodAnalyzer", "parameters": "(@Nonnull ClassPath classPath, @Nonnull Method method,\n                          @Nullable InlineMethodResolver inlineResolver, boolean normalizeVirtualMethods)", "modifiers": "public", "return": "", "signature": " MethodAnalyzer(@Nonnull ClassPath classPath, @Nonnull Method method,\n                          @Nullable InlineMethodResolver inlineResolver, boolean normalizeVirtualMethods)", "full_signature": "public  MethodAnalyzer(@Nonnull ClassPath classPath, @Nonnull Method method,\n                          @Nullable InlineMethodResolver inlineResolver, boolean normalizeVirtualMethods)", "class_method_signature": "MethodAnalyzer.MethodAnalyzer(@Nonnull ClassPath classPath, @Nonnull Method method,\n                          @Nullable InlineMethodResolver inlineResolver, boolean normalizeVirtualMethods)", "testcase": false, "constructor": true}, {"identifier": "getClassPath", "parameters": "()", "modifiers": "@Nonnull public", "return": "ClassPath", "signature": "ClassPath getClassPath()", "full_signature": "@Nonnull public ClassPath getClassPath()", "class_method_signature": "MethodAnalyzer.getClassPath()", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void analyze()", "full_signature": "private void analyze()", "class_method_signature": "MethodAnalyzer.analyze()", "testcase": false, "constructor": false}, {"identifier": "propagateParameterTypes", "parameters": "(int parameterStartRegister)", "modifiers": "private", "return": "void", "signature": "void propagateParameterTypes(int parameterStartRegister)", "full_signature": "private void propagateParameterTypes(int parameterStartRegister)", "class_method_signature": "MethodAnalyzer.propagateParameterTypes(int parameterStartRegister)", "testcase": false, "constructor": false}, {"identifier": "getAnalyzedInstructions", "parameters": "()", "modifiers": "public", "return": "List<AnalyzedInstruction>", "signature": "List<AnalyzedInstruction> getAnalyzedInstructions()", "full_signature": "public List<AnalyzedInstruction> getAnalyzedInstructions()", "class_method_signature": "MethodAnalyzer.getAnalyzedInstructions()", "testcase": false, "constructor": false}, {"identifier": "getInstructions", "parameters": "()", "modifiers": "public", "return": "List<Instruction>", "signature": "List<Instruction> getInstructions()", "full_signature": "public List<Instruction> getInstructions()", "class_method_signature": "MethodAnalyzer.getInstructions()", "testcase": false, "constructor": false}, {"identifier": "getAnalysisException", "parameters": "()", "modifiers": "@Nullable public", "return": "AnalysisException", "signature": "AnalysisException getAnalysisException()", "full_signature": "@Nullable public AnalysisException getAnalysisException()", "class_method_signature": "MethodAnalyzer.getAnalysisException()", "testcase": false, "constructor": false}, {"identifier": "getParamRegisterCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getParamRegisterCount()", "full_signature": "public int getParamRegisterCount()", "class_method_signature": "MethodAnalyzer.getParamRegisterCount()", "testcase": false, "constructor": false}, {"identifier": "getInstructionAddress", "parameters": "(@Nonnull AnalyzedInstruction instruction)", "modifiers": "public", "return": "int", "signature": "int getInstructionAddress(@Nonnull AnalyzedInstruction instruction)", "full_signature": "public int getInstructionAddress(@Nonnull AnalyzedInstruction instruction)", "class_method_signature": "MethodAnalyzer.getInstructionAddress(@Nonnull AnalyzedInstruction instruction)", "testcase": false, "constructor": false}, {"identifier": "setDestinationRegisterTypeAndPropagateChanges", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                                               @Nonnull RegisterType registerType)", "modifiers": "private", "return": "void", "signature": "void setDestinationRegisterTypeAndPropagateChanges(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                                               @Nonnull RegisterType registerType)", "full_signature": "private void setDestinationRegisterTypeAndPropagateChanges(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                                               @Nonnull RegisterType registerType)", "class_method_signature": "MethodAnalyzer.setDestinationRegisterTypeAndPropagateChanges(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                                               @Nonnull RegisterType registerType)", "testcase": false, "constructor": false}, {"identifier": "propagateChanges", "parameters": "(@Nonnull BitSet changedInstructions, int registerNumber, boolean override)", "modifiers": "private", "return": "void", "signature": "void propagateChanges(@Nonnull BitSet changedInstructions, int registerNumber, boolean override)", "full_signature": "private void propagateChanges(@Nonnull BitSet changedInstructions, int registerNumber, boolean override)", "class_method_signature": "MethodAnalyzer.propagateChanges(@Nonnull BitSet changedInstructions, int registerNumber, boolean override)", "testcase": false, "constructor": false}, {"identifier": "overridePredecessorRegisterTypeAndPropagateChanges", "parameters": "(\n            @Nonnull AnalyzedInstruction analyzedInstruction, @Nonnull AnalyzedInstruction predecessor,\n            int registerNumber, @Nonnull RegisterType registerType)", "modifiers": "private", "return": "void", "signature": "void overridePredecessorRegisterTypeAndPropagateChanges(\n            @Nonnull AnalyzedInstruction analyzedInstruction, @Nonnull AnalyzedInstruction predecessor,\n            int registerNumber, @Nonnull RegisterType registerType)", "full_signature": "private void overridePredecessorRegisterTypeAndPropagateChanges(\n            @Nonnull AnalyzedInstruction analyzedInstruction, @Nonnull AnalyzedInstruction predecessor,\n            int registerNumber, @Nonnull RegisterType registerType)", "class_method_signature": "MethodAnalyzer.overridePredecessorRegisterTypeAndPropagateChanges(\n            @Nonnull AnalyzedInstruction analyzedInstruction, @Nonnull AnalyzedInstruction predecessor,\n            int registerNumber, @Nonnull RegisterType registerType)", "testcase": false, "constructor": false}, {"identifier": "setPostRegisterTypeAndPropagateChanges", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                                        int registerNumber, @Nonnull RegisterType registerType)", "modifiers": "private", "return": "void", "signature": "void setPostRegisterTypeAndPropagateChanges(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                                        int registerNumber, @Nonnull RegisterType registerType)", "full_signature": "private void setPostRegisterTypeAndPropagateChanges(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                                        int registerNumber, @Nonnull RegisterType registerType)", "class_method_signature": "MethodAnalyzer.setPostRegisterTypeAndPropagateChanges(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                                        int registerNumber, @Nonnull RegisterType registerType)", "testcase": false, "constructor": false}, {"identifier": "propagateRegisterToSuccessors", "parameters": "(@Nonnull AnalyzedInstruction instruction, int registerNumber,\n                                               @Nonnull BitSet changedInstructions, boolean override)", "modifiers": "private", "return": "void", "signature": "void propagateRegisterToSuccessors(@Nonnull AnalyzedInstruction instruction, int registerNumber,\n                                               @Nonnull BitSet changedInstructions, boolean override)", "full_signature": "private void propagateRegisterToSuccessors(@Nonnull AnalyzedInstruction instruction, int registerNumber,\n                                               @Nonnull BitSet changedInstructions, boolean override)", "class_method_signature": "MethodAnalyzer.propagateRegisterToSuccessors(@Nonnull AnalyzedInstruction instruction, int registerNumber,\n                                               @Nonnull BitSet changedInstructions, boolean override)", "testcase": false, "constructor": false}, {"identifier": "buildInstructionList", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void buildInstructionList()", "full_signature": "private void buildInstructionList()", "class_method_signature": "MethodAnalyzer.buildInstructionList()", "testcase": false, "constructor": false}, {"identifier": "addPredecessorSuccessor", "parameters": "(@Nonnull AnalyzedInstruction predecessor,\n                                         @Nonnull AnalyzedInstruction successor,\n                                         @Nonnull AnalyzedInstruction[][] exceptionHandlers,\n                                         @Nonnull BitSet instructionsToProcess)", "modifiers": "private", "return": "void", "signature": "void addPredecessorSuccessor(@Nonnull AnalyzedInstruction predecessor,\n                                         @Nonnull AnalyzedInstruction successor,\n                                         @Nonnull AnalyzedInstruction[][] exceptionHandlers,\n                                         @Nonnull BitSet instructionsToProcess)", "full_signature": "private void addPredecessorSuccessor(@Nonnull AnalyzedInstruction predecessor,\n                                         @Nonnull AnalyzedInstruction successor,\n                                         @Nonnull AnalyzedInstruction[][] exceptionHandlers,\n                                         @Nonnull BitSet instructionsToProcess)", "class_method_signature": "MethodAnalyzer.addPredecessorSuccessor(@Nonnull AnalyzedInstruction predecessor,\n                                         @Nonnull AnalyzedInstruction successor,\n                                         @Nonnull AnalyzedInstruction[][] exceptionHandlers,\n                                         @Nonnull BitSet instructionsToProcess)", "testcase": false, "constructor": false}, {"identifier": "addPredecessorSuccessor", "parameters": "(@Nonnull AnalyzedInstruction predecessor,\n                                         @Nonnull AnalyzedInstruction successor,\n                                         @Nonnull AnalyzedInstruction[][] exceptionHandlers,\n                                         @Nonnull BitSet instructionsToProcess, boolean allowMoveException)", "modifiers": "private", "return": "void", "signature": "void addPredecessorSuccessor(@Nonnull AnalyzedInstruction predecessor,\n                                         @Nonnull AnalyzedInstruction successor,\n                                         @Nonnull AnalyzedInstruction[][] exceptionHandlers,\n                                         @Nonnull BitSet instructionsToProcess, boolean allowMoveException)", "full_signature": "private void addPredecessorSuccessor(@Nonnull AnalyzedInstruction predecessor,\n                                         @Nonnull AnalyzedInstruction successor,\n                                         @Nonnull AnalyzedInstruction[][] exceptionHandlers,\n                                         @Nonnull BitSet instructionsToProcess, boolean allowMoveException)", "class_method_signature": "MethodAnalyzer.addPredecessorSuccessor(@Nonnull AnalyzedInstruction predecessor,\n                                         @Nonnull AnalyzedInstruction successor,\n                                         @Nonnull AnalyzedInstruction[][] exceptionHandlers,\n                                         @Nonnull BitSet instructionsToProcess, boolean allowMoveException)", "testcase": false, "constructor": false}, {"identifier": "buildExceptionHandlerArray", "parameters": "(@Nonnull TryBlock<? extends ExceptionHandler> tryBlock)", "modifiers": "@Nonnull private", "return": "AnalyzedInstruction[]", "signature": "AnalyzedInstruction[] buildExceptionHandlerArray(@Nonnull TryBlock<? extends ExceptionHandler> tryBlock)", "full_signature": "@Nonnull private AnalyzedInstruction[] buildExceptionHandlerArray(@Nonnull TryBlock<? extends ExceptionHandler> tryBlock)", "class_method_signature": "MethodAnalyzer.buildExceptionHandlerArray(@Nonnull TryBlock<? extends ExceptionHandler> tryBlock)", "testcase": false, "constructor": false}, {"identifier": "analyzeInstruction", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "boolean", "signature": "boolean analyzeInstruction(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private boolean analyzeInstruction(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeInstruction(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeMove", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeMove(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeMove(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeMove(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeMoveResult", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeMoveResult(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeMoveResult(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeMoveResult(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeMoveException", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeMoveException(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeMoveException(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeMoveException(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeOdexReturnVoid", "parameters": "(AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeOdexReturnVoid(AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeOdexReturnVoid(AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeOdexReturnVoid(AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeOdexReturnVoid", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "modifiers": "private", "return": "void", "signature": "void analyzeOdexReturnVoid(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "full_signature": "private void analyzeOdexReturnVoid(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "class_method_signature": "MethodAnalyzer.analyzeOdexReturnVoid(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "testcase": false, "constructor": false}, {"identifier": "analyzeConst", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeConst(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeConst(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeConst(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeWideConst", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeWideConst(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeWideConst(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeWideConst(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeConstString", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeConstString(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeConstString(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeConstString(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeConstClass", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeConstClass(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeConstClass(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeConstClass(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeCheckCast", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeCheckCast(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeCheckCast(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeCheckCast(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "isNotWideningConversion", "parameters": "(RegisterType originalType, RegisterType newType)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNotWideningConversion(RegisterType originalType, RegisterType newType)", "full_signature": "private static boolean isNotWideningConversion(RegisterType originalType, RegisterType newType)", "class_method_signature": "MethodAnalyzer.isNotWideningConversion(RegisterType originalType, RegisterType newType)", "testcase": false, "constructor": false}, {"identifier": "canPropogateTypeAfterInstanceOf", "parameters": "(AnalyzedInstruction analyzedInstanceOfInstruction,\n                                                   AnalyzedInstruction analyzedIfInstruction, ClassPath classPath)", "modifiers": "static", "return": "boolean", "signature": "boolean canPropogateTypeAfterInstanceOf(AnalyzedInstruction analyzedInstanceOfInstruction,\n                                                   AnalyzedInstruction analyzedIfInstruction, ClassPath classPath)", "full_signature": "static boolean canPropogateTypeAfterInstanceOf(AnalyzedInstruction analyzedInstanceOfInstruction,\n                                                   AnalyzedInstruction analyzedIfInstruction, ClassPath classPath)", "class_method_signature": "MethodAnalyzer.canPropogateTypeAfterInstanceOf(AnalyzedInstruction analyzedInstanceOfInstruction,\n                                                   AnalyzedInstruction analyzedIfInstruction, ClassPath classPath)", "testcase": false, "constructor": false}, {"identifier": "analyzeIfEqzNez", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeIfEqzNez(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeIfEqzNez(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeIfEqzNez(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeInstanceOf", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeInstanceOf(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeInstanceOf(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeInstanceOf(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeArrayLength", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeArrayLength(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeArrayLength(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeArrayLength(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeNewInstance", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeNewInstance(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeNewInstance(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeNewInstance(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeNewArray", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeNewArray(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeNewArray(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeNewArray(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeFloatWideCmp", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeFloatWideCmp(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeFloatWideCmp(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeFloatWideCmp(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyze32BitPrimitiveAget", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                           @Nonnull RegisterType registerType)", "modifiers": "private", "return": "void", "signature": "void analyze32BitPrimitiveAget(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                           @Nonnull RegisterType registerType)", "full_signature": "private void analyze32BitPrimitiveAget(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                           @Nonnull RegisterType registerType)", "class_method_signature": "MethodAnalyzer.analyze32BitPrimitiveAget(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                           @Nonnull RegisterType registerType)", "testcase": false, "constructor": false}, {"identifier": "analyzeAgetWide", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeAgetWide(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeAgetWide(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeAgetWide(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeAgetObject", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeAgetObject(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeAgetObject(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeAgetObject(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyze32BitPrimitiveIgetSget", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                               @Nonnull RegisterType registerType)", "modifiers": "private", "return": "void", "signature": "void analyze32BitPrimitiveIgetSget(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                               @Nonnull RegisterType registerType)", "full_signature": "private void analyze32BitPrimitiveIgetSget(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                               @Nonnull RegisterType registerType)", "class_method_signature": "MethodAnalyzer.analyze32BitPrimitiveIgetSget(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                               @Nonnull RegisterType registerType)", "testcase": false, "constructor": false}, {"identifier": "analyzeIgetSgetWideObject", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeIgetSgetWideObject(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeIgetSgetWideObject(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeIgetSgetWideObject(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeInvokeDirect", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeInvokeDirect(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeInvokeDirect(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeInvokeDirect(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeInvokeDirectRange", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeInvokeDirectRange(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeInvokeDirectRange(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeInvokeDirectRange(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeInvokeDirectCommon", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction, int objectRegister)", "modifiers": "private", "return": "void", "signature": "void analyzeInvokeDirectCommon(@Nonnull AnalyzedInstruction analyzedInstruction, int objectRegister)", "full_signature": "private void analyzeInvokeDirectCommon(@Nonnull AnalyzedInstruction analyzedInstruction, int objectRegister)", "class_method_signature": "MethodAnalyzer.analyzeInvokeDirectCommon(@Nonnull AnalyzedInstruction analyzedInstruction, int objectRegister)", "testcase": false, "constructor": false}, {"identifier": "analyzeUnaryOp", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                @Nonnull RegisterType destRegisterType)", "modifiers": "private", "return": "void", "signature": "void analyzeUnaryOp(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                @Nonnull RegisterType destRegisterType)", "full_signature": "private void analyzeUnaryOp(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                @Nonnull RegisterType destRegisterType)", "class_method_signature": "MethodAnalyzer.analyzeUnaryOp(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                @Nonnull RegisterType destRegisterType)", "testcase": false, "constructor": false}, {"identifier": "analyzeBinaryOp", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                 @Nonnull RegisterType destRegisterType, boolean checkForBoolean)", "modifiers": "private", "return": "void", "signature": "void analyzeBinaryOp(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                 @Nonnull RegisterType destRegisterType, boolean checkForBoolean)", "full_signature": "private void analyzeBinaryOp(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                 @Nonnull RegisterType destRegisterType, boolean checkForBoolean)", "class_method_signature": "MethodAnalyzer.analyzeBinaryOp(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                 @Nonnull RegisterType destRegisterType, boolean checkForBoolean)", "testcase": false, "constructor": false}, {"identifier": "analyzeBinary2AddrOp", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                      @Nonnull RegisterType destRegisterType, boolean checkForBoolean)", "modifiers": "private", "return": "void", "signature": "void analyzeBinary2AddrOp(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                      @Nonnull RegisterType destRegisterType, boolean checkForBoolean)", "full_signature": "private void analyzeBinary2AddrOp(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                      @Nonnull RegisterType destRegisterType, boolean checkForBoolean)", "class_method_signature": "MethodAnalyzer.analyzeBinary2AddrOp(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                      @Nonnull RegisterType destRegisterType, boolean checkForBoolean)", "testcase": false, "constructor": false}, {"identifier": "analyzeLiteralBinaryOp", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                        @Nonnull RegisterType destRegisterType, boolean checkForBoolean)", "modifiers": "private", "return": "void", "signature": "void analyzeLiteralBinaryOp(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                        @Nonnull RegisterType destRegisterType, boolean checkForBoolean)", "full_signature": "private void analyzeLiteralBinaryOp(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                        @Nonnull RegisterType destRegisterType, boolean checkForBoolean)", "class_method_signature": "MethodAnalyzer.analyzeLiteralBinaryOp(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                        @Nonnull RegisterType destRegisterType, boolean checkForBoolean)", "testcase": false, "constructor": false}, {"identifier": "getDestTypeForLiteralShiftRight", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction, boolean signedShift)", "modifiers": "private", "return": "RegisterType", "signature": "RegisterType getDestTypeForLiteralShiftRight(@Nonnull AnalyzedInstruction analyzedInstruction, boolean signedShift)", "full_signature": "private RegisterType getDestTypeForLiteralShiftRight(@Nonnull AnalyzedInstruction analyzedInstruction, boolean signedShift)", "class_method_signature": "MethodAnalyzer.getDestTypeForLiteralShiftRight(@Nonnull AnalyzedInstruction analyzedInstruction, boolean signedShift)", "testcase": false, "constructor": false}, {"identifier": "analyzeExecuteInline", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeExecuteInline(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeExecuteInline(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeExecuteInline(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeExecuteInlineRange", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeExecuteInlineRange(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeExecuteInlineRange(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeExecuteInlineRange(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeInvokeDirectEmpty", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeInvokeDirectEmpty(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeInvokeDirectEmpty(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeInvokeDirectEmpty(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeInvokeDirectEmpty", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "modifiers": "private", "return": "void", "signature": "void analyzeInvokeDirectEmpty(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "full_signature": "private void analyzeInvokeDirectEmpty(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "class_method_signature": "MethodAnalyzer.analyzeInvokeDirectEmpty(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "testcase": false, "constructor": false}, {"identifier": "analyzeInvokeObjectInitRange", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "void", "signature": "void analyzeInvokeObjectInitRange(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private void analyzeInvokeObjectInitRange(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeInvokeObjectInitRange(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeInvokeObjectInitRange", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "modifiers": "private", "return": "void", "signature": "void analyzeInvokeObjectInitRange(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "full_signature": "private void analyzeInvokeObjectInitRange(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "class_method_signature": "MethodAnalyzer.analyzeInvokeObjectInitRange(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "testcase": false, "constructor": false}, {"identifier": "analyzeIputIgetQuick", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "boolean", "signature": "boolean analyzeIputIgetQuick(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private boolean analyzeIputIgetQuick(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzeIputIgetQuick(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzeInvokeVirtual", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction, boolean isRange)", "modifiers": "private", "return": "boolean", "signature": "boolean analyzeInvokeVirtual(@Nonnull AnalyzedInstruction analyzedInstruction, boolean isRange)", "full_signature": "private boolean analyzeInvokeVirtual(@Nonnull AnalyzedInstruction analyzedInstruction, boolean isRange)", "class_method_signature": "MethodAnalyzer.analyzeInvokeVirtual(@Nonnull AnalyzedInstruction analyzedInstruction, boolean isRange)", "testcase": false, "constructor": false}, {"identifier": "analyzeInvokeVirtualQuick", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction, boolean isSuper,\n                                              boolean isRange)", "modifiers": "private", "return": "boolean", "signature": "boolean analyzeInvokeVirtualQuick(@Nonnull AnalyzedInstruction analyzedInstruction, boolean isSuper,\n                                              boolean isRange)", "full_signature": "private boolean analyzeInvokeVirtualQuick(@Nonnull AnalyzedInstruction analyzedInstruction, boolean isSuper,\n                                              boolean isRange)", "class_method_signature": "MethodAnalyzer.analyzeInvokeVirtualQuick(@Nonnull AnalyzedInstruction analyzedInstruction, boolean isSuper,\n                                              boolean isRange)", "testcase": false, "constructor": false}, {"identifier": "analyzePutGetVolatile", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction)", "modifiers": "private", "return": "boolean", "signature": "boolean analyzePutGetVolatile(@Nonnull AnalyzedInstruction analyzedInstruction)", "full_signature": "private boolean analyzePutGetVolatile(@Nonnull AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.analyzePutGetVolatile(@Nonnull AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "analyzePutGetVolatile", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "modifiers": "private", "return": "boolean", "signature": "boolean analyzePutGetVolatile(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "full_signature": "private boolean analyzePutGetVolatile(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "class_method_signature": "MethodAnalyzer.analyzePutGetVolatile(@Nonnull AnalyzedInstruction analyzedInstruction, boolean analyzeResult)", "testcase": false, "constructor": false}, {"identifier": "getAndCheckSourceRegister", "parameters": "(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                                          int registerNumber, BitSet validCategories)", "modifiers": "@Nonnull private static", "return": "RegisterType", "signature": "RegisterType getAndCheckSourceRegister(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                                          int registerNumber, BitSet validCategories)", "full_signature": "@Nonnull private static RegisterType getAndCheckSourceRegister(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                                          int registerNumber, BitSet validCategories)", "class_method_signature": "MethodAnalyzer.getAndCheckSourceRegister(@Nonnull AnalyzedInstruction analyzedInstruction,\n                                                          int registerNumber, BitSet validCategories)", "testcase": false, "constructor": false}, {"identifier": "checkRegister", "parameters": "(RegisterType registerType, int registerNumber, BitSet validCategories)", "modifiers": "private static", "return": "void", "signature": "void checkRegister(RegisterType registerType, int registerNumber, BitSet validCategories)", "full_signature": "private static void checkRegister(RegisterType registerType, int registerNumber, BitSet validCategories)", "class_method_signature": "MethodAnalyzer.checkRegister(RegisterType registerType, int registerNumber, BitSet validCategories)", "testcase": false, "constructor": false}, {"identifier": "checkWidePair", "parameters": "(int registerNumber, AnalyzedInstruction analyzedInstruction)", "modifiers": "private static", "return": "void", "signature": "void checkWidePair(int registerNumber, AnalyzedInstruction analyzedInstruction)", "full_signature": "private static void checkWidePair(int registerNumber, AnalyzedInstruction analyzedInstruction)", "class_method_signature": "MethodAnalyzer.checkWidePair(int registerNumber, AnalyzedInstruction analyzedInstruction)", "testcase": false, "constructor": false}, {"identifier": "normalizeMethodReference", "parameters": "(@Nonnull MethodReference methodRef)", "modifiers": "@Nullable private", "return": "MethodReference", "signature": "MethodReference normalizeMethodReference(@Nonnull MethodReference methodRef)", "full_signature": "@Nullable private MethodReference normalizeMethodReference(@Nonnull MethodReference methodRef)", "class_method_signature": "MethodAnalyzer.normalizeMethodReference(@Nonnull MethodReference methodRef)", "testcase": false, "constructor": false}], "file": "smali/dexlib2/src/main/java/org/jf/dexlib2/analysis/MethodAnalyzer.java"}, "focal_method": {"identifier": "getAnalyzedInstructions", "parameters": "()", "modifiers": "public", "return": "List<AnalyzedInstruction>", "body": "public List<AnalyzedInstruction> getAnalyzedInstructions() {\n        return analyzedInstructions.getValues();\n    }", "signature": "List<AnalyzedInstruction> getAnalyzedInstructions()", "full_signature": "public List<AnalyzedInstruction> getAnalyzedInstructions()", "class_method_signature": "MethodAnalyzer.getAnalyzedInstructions()", "testcase": false, "constructor": false, "invocations": ["getValues"]}, "repository": {"repo_id": 132102082, "url": "https://github.com/marshalyauly/vmp", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 12726, "license": "licensed"}}