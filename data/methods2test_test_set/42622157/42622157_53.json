{"test_class": {"identifier": "ChefCookbookAnalyzerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CharStream metadata;", "modifier": "private", "type": "CharStream", "declarator": "metadata", "var_name": "metadata"}], "file": "org.eclipse.winery.crawler/src/test/java/org/eclipse/winery/crawler/chefcookbooks/ChefCookbookAnalyzerTest.java"}, "test_case": {"identifier": "testCompileMetadata", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompileMetadata() {\n        List<ChefCookbookConfiguration> cookbookConfigs;\n        CookbookParseResult extractedCookbookConfigs = new CookbookParseResult(\"openssh\");\n        extractedCookbookConfigs = ChefCookbookAnalyzer.compile(metadata, extractedCookbookConfigs);\n        cookbookConfigs = extractedCookbookConfigs.getAllConfigsAsList();\n        assertEquals(4, cookbookConfigs.size());\n\n        for (int count = 0; count < cookbookConfigs.size(); count++) {\n            assertEquals(\"openssh\", cookbookConfigs.get(count).getName());\n            assertEquals(\"Installs and configures OpenSSH client and daemon\", cookbookConfigs.get(count).getDescription());\n            assertTrue(cookbookConfigs.get(count).getDepends().containsKey(\"iptables\"));\n        }\n\n        assertTrue(extractedCookbookConfigs.getCookbookConfigs().containsKey(\"aix\"));\n    }", "signature": "void testCompileMetadata()", "full_signature": "@Test public void testCompileMetadata()", "class_method_signature": "ChefCookbookAnalyzerTest.testCompileMetadata()", "testcase": true, "constructor": false, "invocations": ["compile", "getAllConfigsAsList", "assertEquals", "size", "size", "assertEquals", "getName", "get", "assertEquals", "getDescription", "get", "assertTrue", "containsKey", "getDepends", "get", "assertTrue", "containsKey", "getCookbookConfigs"]}, "focal_class": {"identifier": "ChefCookbookAnalyzer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ChefCookbookAnalyzer.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ChefCookbookAnalyzer.class.getName())", "var_name": "LOGGER"}], "methods": [{"identifier": "main", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void main()", "full_signature": "public void main()", "class_method_signature": "ChefCookbookAnalyzer.main()", "testcase": false, "constructor": false}, {"identifier": "compileCookbook", "parameters": "(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo)", "modifiers": "public", "return": "CookbookParseResult", "signature": "CookbookParseResult compileCookbook(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo)", "full_signature": "public CookbookParseResult compileCookbook(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo)", "class_method_signature": "ChefCookbookAnalyzer.compileCookbook(CookbookParseResult cookbookParseResult, boolean saveToToscaRepo)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(CharStream input, CookbookParseResult cookbookConfigs)", "modifiers": "public static", "return": "CookbookParseResult", "signature": "CookbookParseResult compile(CharStream input, CookbookParseResult cookbookConfigs)", "full_signature": "public static CookbookParseResult compile(CharStream input, CookbookParseResult cookbookConfigs)", "class_method_signature": "ChefCookbookAnalyzer.compile(CharStream input, CookbookParseResult cookbookConfigs)", "testcase": false, "constructor": false}, {"identifier": "returnComponentTypesFromMetadata", "parameters": "(CookbookParseResult cookbookConfigs)", "modifiers": "private", "return": "CookbookParseResult", "signature": "CookbookParseResult returnComponentTypesFromMetadata(CookbookParseResult cookbookConfigs)", "full_signature": "private CookbookParseResult returnComponentTypesFromMetadata(CookbookParseResult cookbookConfigs)", "class_method_signature": "ChefCookbookAnalyzer.returnComponentTypesFromMetadata(CookbookParseResult cookbookConfigs)", "testcase": false, "constructor": false}, {"identifier": "returnComponentTypesFromAttributes", "parameters": "(CookbookParseResult cookbookConfigs)", "modifiers": "private", "return": "CookbookParseResult", "signature": "CookbookParseResult returnComponentTypesFromAttributes(CookbookParseResult cookbookConfigs)", "full_signature": "private CookbookParseResult returnComponentTypesFromAttributes(CookbookParseResult cookbookConfigs)", "class_method_signature": "ChefCookbookAnalyzer.returnComponentTypesFromAttributes(CookbookParseResult cookbookConfigs)", "testcase": false, "constructor": false}, {"identifier": "returnComponentTypesFromRecipes", "parameters": "(CookbookParseResult cookbookConfigs)", "modifiers": "private", "return": "CookbookParseResult", "signature": "CookbookParseResult returnComponentTypesFromRecipes(CookbookParseResult cookbookConfigs)", "full_signature": "private CookbookParseResult returnComponentTypesFromRecipes(CookbookParseResult cookbookConfigs)", "class_method_signature": "ChefCookbookAnalyzer.returnComponentTypesFromRecipes(CookbookParseResult cookbookConfigs)", "testcase": false, "constructor": false}, {"identifier": "getParseResultFromFile", "parameters": "(CookbookParseResult cookbookConfigs, String rbFilePath)", "modifiers": "public static", "return": "CookbookParseResult", "signature": "CookbookParseResult getParseResultFromFile(CookbookParseResult cookbookConfigs, String rbFilePath)", "full_signature": "public static CookbookParseResult getParseResultFromFile(CookbookParseResult cookbookConfigs, String rbFilePath)", "class_method_signature": "ChefCookbookAnalyzer.getParseResultFromFile(CookbookParseResult cookbookConfigs, String rbFilePath)", "testcase": false, "constructor": false}, {"identifier": "addPlatformVersionInformationFromKitchen", "parameters": "(CookbookParseResult cookbookConfigs)", "modifiers": "private", "return": "CookbookParseResult", "signature": "CookbookParseResult addPlatformVersionInformationFromKitchen(CookbookParseResult cookbookConfigs)", "full_signature": "private CookbookParseResult addPlatformVersionInformationFromKitchen(CookbookParseResult cookbookConfigs)", "class_method_signature": "ChefCookbookAnalyzer.addPlatformVersionInformationFromKitchen(CookbookParseResult cookbookConfigs)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.crawler/src/main/java/org/eclipse/winery/crawler/chefcookbooks/ChefCookbookAnalyzer.java"}, "focal_method": {"identifier": "compile", "parameters": "(CharStream input, CookbookParseResult cookbookConfigs)", "modifiers": "public static", "return": "CookbookParseResult", "body": "public static CookbookParseResult compile(CharStream input, CookbookParseResult cookbookConfigs) {\n        CookbookParseResult extractedCookbookConfigs;\n        ChefDSLLexer chefDSLLexer = new ChefDSLLexer(input);\n        CommonTokenStream commonTokenStream = new CommonTokenStream(chefDSLLexer);\n        ChefDSLParser chefDSLParser = new ChefDSLParser(commonTokenStream);\n        \n        CookbookVisitor cookbookVisitor = new CookbookVisitor(cookbookConfigs);\n        extractedCookbookConfigs = cookbookVisitor.visit(chefDSLParser.program());\n        return extractedCookbookConfigs;\n        \n    }", "signature": "CookbookParseResult compile(CharStream input, CookbookParseResult cookbookConfigs)", "full_signature": "public static CookbookParseResult compile(CharStream input, CookbookParseResult cookbookConfigs)", "class_method_signature": "ChefCookbookAnalyzer.compile(CharStream input, CookbookParseResult cookbookConfigs)", "testcase": false, "constructor": false, "invocations": ["visit", "program"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}