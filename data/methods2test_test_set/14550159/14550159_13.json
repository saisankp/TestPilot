{"test_class": {"identifier": "MediaTypeComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Parameter(0) public MediaType left;", "modifier": "@Parameter(0) public", "type": "MediaType", "declarator": "left", "var_name": "left"}, {"original_string": "@Parameter(1) public MediaType right;", "modifier": "@Parameter(1) public", "type": "MediaType", "declarator": "right", "var_name": "right"}, {"original_string": "@Parameter(2) public int       expectedResult;", "modifier": "@Parameter(2) public", "type": "int", "declarator": "expectedResult", "var_name": "expectedResult"}, {"original_string": "private MediaTypeComparator mediaTypeComparator = new MediaTypeComparator();", "modifier": "private", "type": "MediaTypeComparator", "declarator": "mediaTypeComparator = new MediaTypeComparator()", "var_name": "mediaTypeComparator"}], "file": "everrest-core/src/test/java/org/everrest/core/util/MediaTypeComparatorTest.java"}, "test_case": {"identifier": "testCompare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompare() throws Exception {\n       assertEquals(expectedResult, mediaTypeComparator.compare(left, right));\n    }", "signature": "void testCompare()", "full_signature": "@Test public void testCompare()", "class_method_signature": "MediaTypeComparatorTest.testCompare()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compare"]}, "focal_class": {"identifier": "MediaTypeComparator", "superclass": "", "interfaces": "implements Comparator<MediaType>", "fields": [], "methods": [{"identifier": "compare", "parameters": "(MediaType mediaTypeOne, MediaType mediaTypeTwo)", "modifiers": "@Override public", "return": "int", "signature": "int compare(MediaType mediaTypeOne, MediaType mediaTypeTwo)", "full_signature": "@Override public int compare(MediaType mediaTypeOne, MediaType mediaTypeTwo)", "class_method_signature": "MediaTypeComparator.compare(MediaType mediaTypeOne, MediaType mediaTypeTwo)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(MediaType mime)", "modifiers": "private", "return": "String", "signature": "String toString(MediaType mime)", "full_signature": "private String toString(MediaType mime)", "class_method_signature": "MediaTypeComparator.toString(MediaType mime)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/util/MediaTypeComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(MediaType mediaTypeOne, MediaType mediaTypeTwo)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compare(MediaType mediaTypeOne, MediaType mediaTypeTwo) {\n\n        if (mediaTypeOne.isWildcardType() && !mediaTypeTwo.isWildcardType()) {\n            return 1;\n        }\n        if (mediaTypeOne.isWildcardSubtype() && !mediaTypeTwo.isWildcardSubtype()) {\n            return 1;\n        }\n        if (!mediaTypeOne.isWildcardType() && mediaTypeTwo.isWildcardType()) {\n            return -1;\n        }\n        if (!mediaTypeOne.isWildcardSubtype() && mediaTypeTwo.isWildcardSubtype()) {\n            return -1;\n        }\n\n        Matcher extSubtypeMatcherOne = MediaTypeHelper.EXT_SUBTYPE_PATTERN.matcher(mediaTypeOne.getSubtype());\n        Matcher extSubtypeMatcherTwo = MediaTypeHelper.EXT_SUBTYPE_PATTERN.matcher(mediaTypeTwo.getSubtype());\n        boolean extSubtypeMatcherOneMatches = extSubtypeMatcherOne.matches();\n        boolean extSubtypeMatcherTwoMatches = extSubtypeMatcherTwo.matches();\n\n        if (extSubtypeMatcherOneMatches && !extSubtypeMatcherTwoMatches) {\n            return 1;\n        }\n        if (!extSubtypeMatcherOneMatches && extSubtypeMatcherTwoMatches) {\n            return -1;\n        }\n\n        extSubtypeMatcherOne = MediaTypeHelper.EXT_PREFIX_SUBTYPE_PATTERN.matcher(mediaTypeOne.getSubtype());\n        extSubtypeMatcherTwo = MediaTypeHelper.EXT_PREFIX_SUBTYPE_PATTERN.matcher(mediaTypeTwo.getSubtype());\n        extSubtypeMatcherOneMatches = extSubtypeMatcherOne.matches();\n        extSubtypeMatcherTwoMatches = extSubtypeMatcherTwo.matches();\n\n        if (extSubtypeMatcherOneMatches && !extSubtypeMatcherTwoMatches) {\n            return 1;\n        }\n        if (!extSubtypeMatcherOneMatches && extSubtypeMatcherTwoMatches) {\n            return -1;\n        }\n\n        extSubtypeMatcherOne = MediaTypeHelper.EXT_SUFFIX_SUBTYPE_PATTERN.matcher(mediaTypeOne.getSubtype());\n        extSubtypeMatcherTwo = MediaTypeHelper.EXT_SUFFIX_SUBTYPE_PATTERN.matcher(mediaTypeTwo.getSubtype());\n        extSubtypeMatcherOneMatches = extSubtypeMatcherOne.matches();\n        extSubtypeMatcherTwoMatches = extSubtypeMatcherTwo.matches();\n\n        if (extSubtypeMatcherOneMatches && !extSubtypeMatcherTwoMatches) {\n            return 1;\n        }\n        if (!extSubtypeMatcherOneMatches && extSubtypeMatcherTwoMatches) {\n            return -1;\n        }\n\n        return toString(mediaTypeOne).compareToIgnoreCase(toString(mediaTypeTwo));\n    }", "signature": "int compare(MediaType mediaTypeOne, MediaType mediaTypeTwo)", "full_signature": "@Override public int compare(MediaType mediaTypeOne, MediaType mediaTypeTwo)", "class_method_signature": "MediaTypeComparator.compare(MediaType mediaTypeOne, MediaType mediaTypeTwo)", "testcase": false, "constructor": false, "invocations": ["isWildcardType", "isWildcardType", "isWildcardSubtype", "isWildcardSubtype", "isWildcardType", "isWildcardType", "isWildcardSubtype", "isWildcardSubtype", "matcher", "getSubtype", "matcher", "getSubtype", "matches", "matches", "matcher", "getSubtype", "matcher", "getSubtype", "matches", "matches", "matcher", "getSubtype", "matcher", "getSubtype", "matches", "matches", "compareToIgnoreCase", "toString", "toString"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}