{"test_class": {"identifier": "TestServerLockCleaner", "superclass": "extends TransactionTestBase", "interfaces": "", "fields": [{"original_string": "protected ServerLockCleaner lockCleaner;", "modifier": "protected", "type": "ServerLockCleaner", "declarator": "lockCleaner", "var_name": "lockCleaner"}], "file": "themis-coprocessor/src/test/java/org/apache/hadoop/hbase/themis/cp/TestServerLockCleaner.java"}, "test_case": {"identifier": "testCleanPrimaryLock", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCleanPrimaryLock() throws IOException {\n    // lock exist\n    writeLockAndData(COLUMN);\n    Pair<Long, PrimaryLock> result = lockCleaner.cleanPrimaryLock(COLUMN, prewriteTs);\n    Assert.assertNull(result.getFirst());\n    Assert.assertEquals(getLock(COLUMN), result.getSecond());\n    Assert.assertNull(readLockBytes(COLUMN));\n    // transaction committed with lock cleaned\n    boolean[] isPuts = new boolean[]{true, false};\n    for (boolean isPut : isPuts) {\n      deleteOldDataAndUpdateTs();\n      writeWriteColumn(COLUMN, prewriteTs, commitTs, isPut);\n      result = lockCleaner.cleanPrimaryLock(COLUMN, prewriteTs);\n      Assert.assertEquals(commitTs, result.getFirst().longValue());\n      Assert.assertNull(result.getSecond());\n    }\n    // transaction uncommitted with lock erased\n    deleteOldDataAndUpdateTs();\n    result = lockCleaner.cleanPrimaryLock(COLUMN, prewriteTs);\n    Assert.assertNull(result.getFirst());\n    Assert.assertNull(result.getSecond());\n  }", "signature": "void testCleanPrimaryLock()", "full_signature": "@Test public void testCleanPrimaryLock()", "class_method_signature": "TestServerLockCleaner.testCleanPrimaryLock()", "testcase": true, "constructor": false, "invocations": ["writeLockAndData", "cleanPrimaryLock", "assertNull", "getFirst", "assertEquals", "getLock", "getSecond", "assertNull", "readLockBytes", "deleteOldDataAndUpdateTs", "writeWriteColumn", "cleanPrimaryLock", "assertEquals", "longValue", "getFirst", "assertNull", "getSecond", "deleteOldDataAndUpdateTs", "cleanPrimaryLock", "assertNull", "getFirst", "assertNull", "getSecond"]}, "focal_class": {"identifier": "ServerLockCleaner", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final ThemisCoprocessorClient cpClient;", "modifier": "protected final", "type": "ThemisCoprocessorClient", "declarator": "cpClient", "var_name": "cpClient"}, {"original_string": "protected final HConnection conn;", "modifier": "protected final", "type": "HConnection", "declarator": "conn", "var_name": "conn"}], "methods": [{"identifier": "ServerLockCleaner", "parameters": "(HConnection conn, ThemisCoprocessorClient cpClient)", "modifiers": "public", "return": "", "signature": " ServerLockCleaner(HConnection conn, ThemisCoprocessorClient cpClient)", "full_signature": "public  ServerLockCleaner(HConnection conn, ThemisCoprocessorClient cpClient)", "class_method_signature": "ServerLockCleaner.ServerLockCleaner(HConnection conn, ThemisCoprocessorClient cpClient)", "testcase": false, "constructor": true}, {"identifier": "getPrimaryLockWithColumn", "parameters": "(ThemisLock lock)", "modifiers": "public static", "return": "PrimaryLock", "signature": "PrimaryLock getPrimaryLockWithColumn(ThemisLock lock)", "full_signature": "public static PrimaryLock getPrimaryLockWithColumn(ThemisLock lock)", "class_method_signature": "ServerLockCleaner.getPrimaryLockWithColumn(ThemisLock lock)", "testcase": false, "constructor": false}, {"identifier": "cleanLock", "parameters": "(ThemisLock lock)", "modifiers": "public", "return": "void", "signature": "void cleanLock(ThemisLock lock)", "full_signature": "public void cleanLock(ThemisLock lock)", "class_method_signature": "ServerLockCleaner.cleanLock(ThemisLock lock)", "testcase": false, "constructor": false}, {"identifier": "cleanPrimaryLock", "parameters": "(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "modifiers": "public", "return": "Pair<Long, PrimaryLock>", "signature": "Pair<Long, PrimaryLock> cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "full_signature": "public Pair<Long, PrimaryLock> cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "class_method_signature": "ServerLockCleaner.cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "testcase": false, "constructor": false}, {"identifier": "getTimestampOfWriteIndexingPrewriteTs", "parameters": "(ColumnCoordinate columnCoordinate, long timestamp)", "modifiers": "public", "return": "Long", "signature": "Long getTimestampOfWriteIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "full_signature": "public Long getTimestampOfWriteIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "class_method_signature": "ServerLockCleaner.getTimestampOfWriteIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "createGetOfWriteColumnsIndexingPrewriteTs", "parameters": "(ColumnCoordinate columnCoordinate, long timestamp)", "modifiers": "public", "return": "Get", "signature": "Get createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "full_signature": "public Get createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "class_method_signature": "ServerLockCleaner.createGetOfWriteColumnsIndexingPrewriteTs(ColumnCoordinate columnCoordinate, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "cleanSecondaryLocks", "parameters": "(PrimaryLock primaryLock, Long commitTs)", "modifiers": "public", "return": "void", "signature": "void cleanSecondaryLocks(PrimaryLock primaryLock, Long commitTs)", "full_signature": "public void cleanSecondaryLocks(PrimaryLock primaryLock, Long commitTs)", "class_method_signature": "ServerLockCleaner.cleanSecondaryLocks(PrimaryLock primaryLock, Long commitTs)", "testcase": false, "constructor": false}, {"identifier": "eraseLockAndData", "parameters": "(ColumnCoordinate column, long timestamp)", "modifiers": "public", "return": "void", "signature": "void eraseLockAndData(ColumnCoordinate column, long timestamp)", "full_signature": "public void eraseLockAndData(ColumnCoordinate column, long timestamp)", "class_method_signature": "ServerLockCleaner.eraseLockAndData(ColumnCoordinate column, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "eraseLockAndData", "parameters": "(byte[] tableName, byte[] row, Collection<Column> columns, long timestamp)", "modifiers": "public", "return": "void", "signature": "void eraseLockAndData(byte[] tableName, byte[] row, Collection<Column> columns, long timestamp)", "full_signature": "public void eraseLockAndData(byte[] tableName, byte[] row, Collection<Column> columns, long timestamp)", "class_method_signature": "ServerLockCleaner.eraseLockAndData(byte[] tableName, byte[] row, Collection<Column> columns, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "closeTable", "parameters": "(HTableInterface table)", "modifiers": "protected", "return": "void", "signature": "void closeTable(HTableInterface table)", "full_signature": "protected void closeTable(HTableInterface table)", "class_method_signature": "ServerLockCleaner.closeTable(HTableInterface table)", "testcase": false, "constructor": false}], "file": "themis-coprocessor/src/main/java/org/apache/hadoop/hbase/themis/cp/ServerLockCleaner.java"}, "focal_method": {"identifier": "cleanPrimaryLock", "parameters": "(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "modifiers": "public", "return": "Pair<Long, PrimaryLock>", "body": "public Pair<Long, PrimaryLock> cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs) throws IOException {\n    // read back and erase primary lock if exist\n    ThemisLock lock = cpClient.getLockAndErase(columnCoordinate, prewriteTs);\n    // make sure we must get a primary lock when there are logic errors in code\n    if (lock != null && !(lock instanceof PrimaryLock)) {\n      throw new ThemisFatalException(\"encounter no-primary lock when cleanPrimaryLock, column=\"\n          + columnCoordinate + \", prewriteTs=\" + prewriteTs + \", lock=\" + lock);\n    }\n    PrimaryLock primaryLock = (PrimaryLock)lock;\n    Long commitTs = primaryLock != null ? null :\n      getTimestampOfWriteIndexingPrewriteTs(columnCoordinate, prewriteTs);\n    // commitTs = null indicates the conflicted transaction has been erased by other client; otherwise\n    // the conflicted must be committed by other client.\n    if (commitTs == null) {\n      ThemisCpStatistics.getThemisCpStatistics().cleanLockByEraseCount.inc();\n    } else {\n      ThemisCpStatistics.getThemisCpStatistics().cleanLockByCommitCount.inc();\n    }\n    return new Pair<Long, PrimaryLock>(commitTs, primaryLock);\n  }", "signature": "Pair<Long, PrimaryLock> cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "full_signature": "public Pair<Long, PrimaryLock> cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "class_method_signature": "ServerLockCleaner.cleanPrimaryLock(ColumnCoordinate columnCoordinate,\n      long prewriteTs)", "testcase": false, "constructor": false, "invocations": ["getLockAndErase", "getTimestampOfWriteIndexingPrewriteTs", "inc", "getThemisCpStatistics", "inc", "getThemisCpStatistics"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}