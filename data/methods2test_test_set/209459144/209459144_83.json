{"test_class": {"identifier": "ExperimentTemplateRestApiTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ExperimentTemplateRestApi experimentTemplateStoreApi;", "modifier": "private static", "type": "ExperimentTemplateRestApi", "declarator": "experimentTemplateStoreApi", "var_name": "experimentTemplateStoreApi"}, {"original_string": "private static ExperimentTemplateSpec experimentTemplateSpec;", "modifier": "private static", "type": "ExperimentTemplateSpec", "declarator": "experimentTemplateSpec", "var_name": "experimentTemplateSpec"}, {"original_string": "private static GsonBuilder gsonBuilder = new GsonBuilder();", "modifier": "private static", "type": "GsonBuilder", "declarator": "gsonBuilder = new GsonBuilder()", "var_name": "gsonBuilder"}, {"original_string": "private static Gson gson = gsonBuilder.setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();", "modifier": "private static", "type": "Gson", "declarator": "gson = gsonBuilder.setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create()", "var_name": "gson"}, {"original_string": "protected static String TPL_FILE = \"experimentTemplate/test_template_1.json\";", "modifier": "protected static", "type": "String", "declarator": "TPL_FILE = \"experimentTemplate/test_template_1.json\"", "var_name": "TPL_FILE"}], "file": "submarine-server/server-core/src/test/java/org/apache/submarine/server/rest/ExperimentTemplateRestApiTest.java"}, "test_case": {"identifier": "getExperimentTemplate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getExperimentTemplate() {\n\n    String body = loadContent(TPL_FILE);\n    experimentTemplateSpec = gson.fromJson(body, ExperimentTemplateSpec.class);\n\n    Response getEnvResponse = experimentTemplateStoreApi.\n          getExperimentTemplate(experimentTemplateSpec.getName());\n    ExperimentTemplate experimentTemplate = getExperimentTemplateFromResponse(getEnvResponse);\n    assertEquals(experimentTemplateSpec.getName(), experimentTemplate.getExperimentTemplateSpec().getName());\n\n  }", "signature": "void getExperimentTemplate()", "full_signature": "@Test public void getExperimentTemplate()", "class_method_signature": "ExperimentTemplateRestApiTest.getExperimentTemplate()", "testcase": true, "constructor": false, "invocations": ["loadContent", "fromJson", "getExperimentTemplate", "getName", "getExperimentTemplateFromResponse", "assertEquals", "getName", "getName", "getExperimentTemplateSpec"]}, "focal_class": {"identifier": "ExperimentTemplateRestApi", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ExperimentTemplateManager experimentTemplateManager =\n      ExperimentTemplateManager.getInstance();", "modifier": "private final", "type": "ExperimentTemplateManager", "declarator": "experimentTemplateManager =\n      ExperimentTemplateManager.getInstance()", "var_name": "experimentTemplateManager"}], "methods": [{"identifier": "createExperimentTemplate", "parameters": "(ExperimentTemplateSpec spec)", "modifiers": "@POST @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"Create a experimentTemplate\", tags = {\"experimentTemplate\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = JsonResponse.class)))}) public", "return": "Response", "signature": "Response createExperimentTemplate(ExperimentTemplateSpec spec)", "full_signature": "@POST @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"Create a experimentTemplate\", tags = {\"experimentTemplate\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = JsonResponse.class)))}) public Response createExperimentTemplate(ExperimentTemplateSpec spec)", "class_method_signature": "ExperimentTemplateRestApi.createExperimentTemplate(ExperimentTemplateSpec spec)", "testcase": false, "constructor": false}, {"identifier": "updateExperimentTemplate", "parameters": "(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name,\n      ExperimentTemplateSpec spec)", "modifiers": "@PATCH @Path(\"/{id}\") @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"Update the experimentTemplate with job spec\", tags = {\"experimentTemplates\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = JsonResponse.class))), @ApiResponse( responseCode = \"404\", description = \"ExperimentTemplate not found\")}) public", "return": "Response", "signature": "Response updateExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name,\n      ExperimentTemplateSpec spec)", "full_signature": "@PATCH @Path(\"/{id}\") @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"Update the experimentTemplate with job spec\", tags = {\"experimentTemplates\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = JsonResponse.class))), @ApiResponse( responseCode = \"404\", description = \"ExperimentTemplate not found\")}) public Response updateExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name,\n      ExperimentTemplateSpec spec)", "class_method_signature": "ExperimentTemplateRestApi.updateExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name,\n      ExperimentTemplateSpec spec)", "testcase": false, "constructor": false}, {"identifier": "deleteExperimentTemplate", "parameters": "(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name)", "modifiers": "@DELETE @Path(\"/{id}\") @Operation(summary = \"Delete the experimentTemplate\", tags = {\"experimentTemplates\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse( responseCode = \"404\", description = \"ExperimentTemplate not found\")}) public", "return": "Response", "signature": "Response deleteExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name)", "full_signature": "@DELETE @Path(\"/{id}\") @Operation(summary = \"Delete the experimentTemplate\", tags = {\"experimentTemplates\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse( responseCode = \"404\", description = \"ExperimentTemplate not found\")}) public Response deleteExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name)", "class_method_signature": "ExperimentTemplateRestApi.deleteExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name)", "testcase": false, "constructor": false}, {"identifier": "listExperimentTemplate", "parameters": "(@QueryParam(\"status\") String status)", "modifiers": "@GET @Operation(summary = \"List of ExperimentTemplates\", tags = {\"experimentTemplates\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = JsonResponse.class)))}) public", "return": "Response", "signature": "Response listExperimentTemplate(@QueryParam(\"status\") String status)", "full_signature": "@GET @Operation(summary = \"List of ExperimentTemplates\", tags = {\"experimentTemplates\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = JsonResponse.class)))}) public Response listExperimentTemplate(@QueryParam(\"status\") String status)", "class_method_signature": "ExperimentTemplateRestApi.listExperimentTemplate(@QueryParam(\"status\") String status)", "testcase": false, "constructor": false}, {"identifier": "getExperimentTemplate", "parameters": "(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name)", "modifiers": "@GET @Path(\"/{id}\") @Operation(summary = \"Find experimentTemplate by name\", tags = {\"experimentTemplate\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse( responseCode = \"404\", description = \"ExperimentTemplate not found\")}) public", "return": "Response", "signature": "Response getExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name)", "full_signature": "@GET @Path(\"/{id}\") @Operation(summary = \"Find experimentTemplate by name\", tags = {\"experimentTemplate\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse( responseCode = \"404\", description = \"ExperimentTemplate not found\")}) public Response getExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name)", "class_method_signature": "ExperimentTemplateRestApi.getExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name)", "testcase": false, "constructor": false}, {"identifier": "parseExperimentTemplateServiceException", "parameters": "(\n      SubmarineRuntimeException e)", "modifiers": "private", "return": "Response", "signature": "Response parseExperimentTemplateServiceException(\n      SubmarineRuntimeException e)", "full_signature": "private Response parseExperimentTemplateServiceException(\n      SubmarineRuntimeException e)", "class_method_signature": "ExperimentTemplateRestApi.parseExperimentTemplateServiceException(\n      SubmarineRuntimeException e)", "testcase": false, "constructor": false}], "file": "submarine-server/server-core/src/main/java/org/apache/submarine/server/rest/ExperimentTemplateRestApi.java"}, "focal_method": {"identifier": "getExperimentTemplate", "parameters": "(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name)", "modifiers": "@GET @Path(\"/{id}\") @Operation(summary = \"Find experimentTemplate by name\", tags = {\"experimentTemplate\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse( responseCode = \"404\", description = \"ExperimentTemplate not found\")}) public", "return": "Response", "body": "@GET\n  @Path(\"/{id}\")\n  @Operation(summary = \"Find experimentTemplate by name\",\n          tags = {\"experimentTemplate\"},\n          responses = {\n                  @ApiResponse(description = \"successful operation\", \n                      content = @Content(\n                          schema = @Schema(implementation = JsonResponse.class))),\n                  @ApiResponse(\n                      responseCode = \"404\", \n                      description = \"ExperimentTemplate not found\")})\n  public Response getExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name) {\n    try {\n      ExperimentTemplate experimentTemplate = experimentTemplateManager.getExperimentTemplate(name);\n      return new JsonResponse.Builder<ExperimentTemplate>(Response.Status.OK)\n          .success(true).result(experimentTemplate).build();\n    } catch (SubmarineRuntimeException e) {\n      return parseExperimentTemplateServiceException(e);\n    }\n  }", "signature": "Response getExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name)", "full_signature": "@GET @Path(\"/{id}\") @Operation(summary = \"Find experimentTemplate by name\", tags = {\"experimentTemplate\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = JsonResponse.class))), @ApiResponse( responseCode = \"404\", description = \"ExperimentTemplate not found\")}) public Response getExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name)", "class_method_signature": "ExperimentTemplateRestApi.getExperimentTemplate(\n      @PathParam(RestConstants.EXPERIMENT_TEMPLATE_ID) String name)", "testcase": false, "constructor": false, "invocations": ["getExperimentTemplate", "build", "result", "success", "parseExperimentTemplateServiceException"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}