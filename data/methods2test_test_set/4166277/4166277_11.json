{"test_class": {"identifier": "MBeanHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "sjk-core/src/test/java/org/gridkit/jvmtool/MBeanHelperTest.java"}, "test_case": {"identifier": "test_find_deadlocked_threads", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_find_deadlocked_threads() throws Exception {\n        MBeanHelper helper = new MBeanHelper(ManagementFactory.getPlatformMBeanServer());\n        System.out.println(helper.invoke(threadMXBean(), \"findMonitorDeadlockedThreads\"));\n    }", "signature": "void test_find_deadlocked_threads()", "full_signature": "@Test public void test_find_deadlocked_threads()", "class_method_signature": "MBeanHelperTest.test_find_deadlocked_threads()", "testcase": true, "constructor": false, "invocations": ["getPlatformMBeanServer", "println", "invoke", "threadMXBean"]}, "focal_class": {"identifier": "MBeanHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static String FORMAT_TABLE_COLUMN_WIDTH_THRESHOLD = \"table.column.maxWidth\";", "modifier": "public static", "type": "String", "declarator": "FORMAT_TABLE_COLUMN_WIDTH_THRESHOLD = \"table.column.maxWidth\"", "var_name": "FORMAT_TABLE_COLUMN_WIDTH_THRESHOLD"}, {"original_string": "public static String FORMAT_COMPOSITE_FIELD_WIDTH_THRESHODL = \"composite.field.maxWidth\";", "modifier": "public static", "type": "String", "declarator": "FORMAT_COMPOSITE_FIELD_WIDTH_THRESHODL = \"composite.field.maxWidth\"", "var_name": "FORMAT_COMPOSITE_FIELD_WIDTH_THRESHODL"}, {"original_string": "private MBeanServerConnection mserver;", "modifier": "private", "type": "MBeanServerConnection", "declarator": "mserver", "var_name": "mserver"}, {"original_string": "private int widthThresholdTable = 40;", "modifier": "private", "type": "int", "declarator": "widthThresholdTable = 40", "var_name": "widthThresholdTable"}, {"original_string": "private int widthThresholdComposite = 1000;", "modifier": "private", "type": "int", "declarator": "widthThresholdComposite = 1000", "var_name": "widthThresholdComposite"}, {"original_string": "static Map<String, Object> ARRAY_MAP = new HashMap<String, Object>();", "modifier": "static", "type": "Map<String, Object>", "declarator": "ARRAY_MAP = new HashMap<String, Object>()", "var_name": "ARRAY_MAP"}, {"original_string": "static Map<String, String> TYPE_MAP = new HashMap<String, String>();", "modifier": "static", "type": "Map<String, String>", "declarator": "TYPE_MAP = new HashMap<String, String>()", "var_name": "TYPE_MAP"}], "methods": [{"identifier": "MBeanHelper", "parameters": "(MBeanServerConnection connection)", "modifiers": "public", "return": "", "signature": " MBeanHelper(MBeanServerConnection connection)", "full_signature": "public  MBeanHelper(MBeanServerConnection connection)", "class_method_signature": "MBeanHelper.MBeanHelper(MBeanServerConnection connection)", "testcase": false, "constructor": true}, {"identifier": "setFormatingOption", "parameters": "(String name, Object value)", "modifiers": "public", "return": "void", "signature": "void setFormatingOption(String name, Object value)", "full_signature": "public void setFormatingOption(String name, Object value)", "class_method_signature": "MBeanHelper.setFormatingOption(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "getAttributeInfos", "parameters": "(ObjectName bean, Collection<String> attrs, boolean read, boolean write)", "modifiers": "private", "return": "Map<String, MBeanAttributeInfo>", "signature": "Map<String, MBeanAttributeInfo> getAttributeInfos(ObjectName bean, Collection<String> attrs, boolean read, boolean write)", "full_signature": "private Map<String, MBeanAttributeInfo> getAttributeInfos(ObjectName bean, Collection<String> attrs, boolean read, boolean write)", "class_method_signature": "MBeanHelper.getAttributeInfos(ObjectName bean, Collection<String> attrs, boolean read, boolean write)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "(ObjectName bean, Collection<String> attrs)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getAttributes(ObjectName bean, Collection<String> attrs)", "full_signature": "private Map<String, Object> getAttributes(ObjectName bean, Collection<String> attrs)", "class_method_signature": "MBeanHelper.getAttributes(ObjectName bean, Collection<String> attrs)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(ObjectName bean, Collection<String> attrs)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> get(ObjectName bean, Collection<String> attrs)", "full_signature": "public Map<String, String> get(ObjectName bean, Collection<String> attrs)", "class_method_signature": "MBeanHelper.get(ObjectName bean, Collection<String> attrs)", "testcase": false, "constructor": false}, {"identifier": "getAsTable", "parameters": "(ObjectName bean, Collection<String> attrs, MTable table)", "modifiers": "public", "return": "void", "signature": "void getAsTable(ObjectName bean, Collection<String> attrs, MTable table)", "full_signature": "public void getAsTable(ObjectName bean, Collection<String> attrs, MTable table)", "class_method_signature": "MBeanHelper.getAsTable(ObjectName bean, Collection<String> attrs, MTable table)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(ObjectName bean, String attr, String value)", "modifiers": "public", "return": "void", "signature": "void set(ObjectName bean, String attr, String value)", "full_signature": "public void set(ObjectName bean, String attr, String value)", "class_method_signature": "MBeanHelper.set(ObjectName bean, String attr, String value)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(ObjectName bean, String operation, String... params)", "modifiers": "public", "return": "String", "signature": "String invoke(ObjectName bean, String operation, String... params)", "full_signature": "public String invoke(ObjectName bean, String operation, String... params)", "class_method_signature": "MBeanHelper.invoke(ObjectName bean, String operation, String... params)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Object v, String type)", "modifiers": "private", "return": "String", "signature": "String format(Object v, String type)", "full_signature": "private String format(Object v, String type)", "class_method_signature": "MBeanHelper.format(Object v, String type)", "testcase": false, "constructor": false}, {"identifier": "formatTable", "parameters": "(List<String[]> content, int maxCell, boolean table)", "modifiers": "private", "return": "String", "signature": "String formatTable(List<String[]> content, int maxCell, boolean table)", "full_signature": "private String formatTable(List<String[]> content, int maxCell, boolean table)", "class_method_signature": "MBeanHelper.formatTable(List<String[]> content, int maxCell, boolean table)", "testcase": false, "constructor": false}, {"identifier": "formatLine", "parameters": "(Object v, String type)", "modifiers": "private", "return": "String", "signature": "String formatLine(Object v, String type)", "full_signature": "private String formatLine(Object v, String type)", "class_method_signature": "MBeanHelper.formatLine(Object v, String type)", "testcase": false, "constructor": false}, {"identifier": "formatRow", "parameters": "(CompositeData row, List<String> header)", "modifiers": "private", "return": "String[]", "signature": "String[] formatRow(CompositeData row, List<String> header)", "full_signature": "private String[] formatRow(CompositeData row, List<String> header)", "class_method_signature": "MBeanHelper.formatRow(CompositeData row, List<String> header)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(String value, String type)", "modifiers": "private", "return": "Object", "signature": "Object convert(String value, String type)", "full_signature": "private Object convert(String value, String type)", "class_method_signature": "MBeanHelper.convert(String value, String type)", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "(ObjectName bean)", "modifiers": "public", "return": "String", "signature": "String describe(ObjectName bean)", "full_signature": "public String describe(ObjectName bean)", "class_method_signature": "MBeanHelper.describe(ObjectName bean)", "testcase": false, "constructor": false}, {"identifier": "toPrintableType", "parameters": "(String type)", "modifiers": "static", "return": "String", "signature": "String toPrintableType(String type)", "full_signature": "static String toPrintableType(String type)", "class_method_signature": "MBeanHelper.toPrintableType(String type)", "testcase": false, "constructor": false}], "file": "sjk-core/src/main/java/org/gridkit/jvmtool/MBeanHelper.java"}, "focal_method": {"identifier": "invoke", "parameters": "(ObjectName bean, String operation, String... params)", "modifiers": "public", "return": "String", "body": "public String invoke(ObjectName bean, String operation, String... params) throws InstanceNotFoundException, IntrospectionException, ReflectionException, IOException, MBeanException {\n        MBeanInfo mbinfo = mserver.getMBeanInfo(bean);\n        MBeanOperationInfo op = null;\n        for(MBeanOperationInfo oi: mbinfo.getOperations()) {\n            if (oi.getName().equalsIgnoreCase(operation) && oi.getSignature().length == params.length) {\n                if (op != null) {\n                    throw new IllegalArgumentException(\"Ambiguous \" + operation + \"/\" + params.length + \" operatition signature for \" + bean);\n                }\n                op = oi;\n            }\n        }\n        if (op == null) {\n            throw new IllegalArgumentException(\"Operation \" + operation + \"/\" + params.length + \" not found for \" + bean);\n        }\n        Object[] args = new Object[params.length];\n        String[] sig = new String[params.length];\n        for(int i = 0; i != params.length; ++i) {\n            args[i] = convert(params[i], op.getSignature()[i].getType());\n            sig[i] = op.getSignature()[i].getType();\n        }\n        return format(mserver.invoke(bean, op.getName(), args, sig), op.getReturnType());\n    }", "signature": "String invoke(ObjectName bean, String operation, String... params)", "full_signature": "public String invoke(ObjectName bean, String operation, String... params)", "class_method_signature": "MBeanHelper.invoke(ObjectName bean, String operation, String... params)", "testcase": false, "constructor": false, "invocations": ["getMBeanInfo", "getOperations", "equalsIgnoreCase", "getName", "getSignature", "convert", "getType", "getSignature", "getType", "getSignature", "format", "invoke", "getName", "getReturnType"]}, "repository": {"repo_id": 4166277, "url": "https://github.com/aragozin/jvm-tools", "language": "Java", "is_fork": false, "fork_count": 443, "stargazer_count": 2728, "size": 4961, "license": "licensed"}}