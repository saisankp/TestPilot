{"test_class": {"identifier": "CSVSpecifiedLatLngStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/unsupported/csv/src/test/java/org/geotools/data/csv/parse/CSVSpecifiedLatLngStrategyTest.java"}, "test_case": {"identifier": "testBuildFeatureType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildFeatureType() {\n        String input = CSVTestStrategySupport.buildInputString(\"quux,morx\\n\");\n        CSVFileState fileState = new CSVFileState(input, \"foo\");\n        CSVStrategy strategy = new CSVSpecifiedLatLngStrategy(fileState, \"quux\", \"morx\");\n        SimpleFeatureType featureType = strategy.getFeatureType();\n\n        assertEquals(\"Invalid attribute count\", 1, featureType.getAttributeCount());\n        assertEquals(\"Invalid featuretype name\", \"foo\", featureType.getName().getLocalPart());\n        assertEquals(\"Invalid name\", \"foo\", featureType.getTypeName());\n\n        GeometryDescriptor geometryDescriptor = featureType.getGeometryDescriptor();\n        assertEquals(\"Invalid geometry attribute name\", \"location\",\n                geometryDescriptor.getLocalName());\n    }", "signature": "void testBuildFeatureType()", "full_signature": "@Test public void testBuildFeatureType()", "class_method_signature": "CSVSpecifiedLatLngStrategyTest.testBuildFeatureType()", "testcase": true, "constructor": false, "invocations": ["buildInputString", "getFeatureType", "assertEquals", "getAttributeCount", "assertEquals", "getLocalPart", "getName", "assertEquals", "getTypeName", "getGeometryDescriptor", "assertEquals", "getLocalName"]}, "focal_class": {"identifier": "CSVSpecifiedLatLngStrategy", "superclass": "extends CSVStrategy", "interfaces": "", "fields": [{"original_string": "private final String latField;", "modifier": "private final", "type": "String", "declarator": "latField", "var_name": "latField"}, {"original_string": "private final String lngField;", "modifier": "private final", "type": "String", "declarator": "lngField", "var_name": "lngField"}, {"original_string": "private final String pointField;", "modifier": "private final", "type": "String", "declarator": "pointField", "var_name": "pointField"}], "methods": [{"identifier": "CSVSpecifiedLatLngStrategy", "parameters": "(CSVFileState csvFileState, String latField, String lngField,\n            String pointField)", "modifiers": "public", "return": "", "signature": " CSVSpecifiedLatLngStrategy(CSVFileState csvFileState, String latField, String lngField,\n            String pointField)", "full_signature": "public  CSVSpecifiedLatLngStrategy(CSVFileState csvFileState, String latField, String lngField,\n            String pointField)", "class_method_signature": "CSVSpecifiedLatLngStrategy.CSVSpecifiedLatLngStrategy(CSVFileState csvFileState, String latField, String lngField,\n            String pointField)", "testcase": false, "constructor": true}, {"identifier": "CSVSpecifiedLatLngStrategy", "parameters": "(CSVFileState csvFileState, String latField, String lngField)", "modifiers": "public", "return": "", "signature": " CSVSpecifiedLatLngStrategy(CSVFileState csvFileState, String latField, String lngField)", "full_signature": "public  CSVSpecifiedLatLngStrategy(CSVFileState csvFileState, String latField, String lngField)", "class_method_signature": "CSVSpecifiedLatLngStrategy.CSVSpecifiedLatLngStrategy(CSVFileState csvFileState, String latField, String lngField)", "testcase": false, "constructor": true}, {"identifier": "buildFeatureType", "parameters": "()", "modifiers": "@Override protected", "return": "SimpleFeatureType", "signature": "SimpleFeatureType buildFeatureType()", "full_signature": "@Override protected SimpleFeatureType buildFeatureType()", "class_method_signature": "CSVSpecifiedLatLngStrategy.buildFeatureType()", "testcase": false, "constructor": false}, {"identifier": "createSchema", "parameters": "(SimpleFeatureType featureType)", "modifiers": "@Override public", "return": "void", "signature": "void createSchema(SimpleFeatureType featureType)", "full_signature": "@Override public void createSchema(SimpleFeatureType featureType)", "class_method_signature": "CSVSpecifiedLatLngStrategy.createSchema(SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(SimpleFeature feature)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] encode(SimpleFeature feature)", "full_signature": "@Override public String[] encode(SimpleFeature feature)", "class_method_signature": "CSVSpecifiedLatLngStrategy.encode(SimpleFeature feature)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String recordId, String[] csvRecord)", "modifiers": "@Override public", "return": "SimpleFeature", "signature": "SimpleFeature decode(String recordId, String[] csvRecord)", "full_signature": "@Override public SimpleFeature decode(String recordId, String[] csvRecord)", "class_method_signature": "CSVSpecifiedLatLngStrategy.decode(String recordId, String[] csvRecord)", "testcase": false, "constructor": false}], "file": "modules/unsupported/csv/src/main/java/org/geotools/data/csv/parse/CSVSpecifiedLatLngStrategy.java"}, "focal_method": {"identifier": "buildFeatureType", "parameters": "()", "modifiers": "@Override protected", "return": "SimpleFeatureType", "body": "@Override\n    protected SimpleFeatureType buildFeatureType() {\n        String[] headers;\n        Map<String, Class<?>> typesFromData;\n        CsvReader csvReader = null;\n        try {\n            csvReader = csvFileState.openCSVReader();\n            headers = csvReader.getHeaders();\n            typesFromData = CSVStrategy.findMostSpecificTypesFromData(csvReader, headers);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (csvReader != null) {\n                csvReader.close();\n            }\n        }\n        SimpleFeatureTypeBuilder builder = CSVStrategy.createBuilder(csvFileState, headers,\n                typesFromData);\n        Class<?> latClass = typesFromData.get(latField);\n        Class<?> lngClass = typesFromData.get(lngField);\n        if (CSVStrategy.isNumeric(latClass) && CSVStrategy.isNumeric(lngClass)) {\n        \tList<String> csvHeaders = Arrays.asList(headers);\n        \tint index = csvHeaders.indexOf(latField);\n        \tAttributeTypeBuilder builder2 = new AttributeTypeBuilder();\n        \tbuilder2.setCRS(DefaultGeographicCRS.WGS84);\n        \tbuilder2.binding(Point.class);       \t\n        \tAttributeDescriptor descriptor = builder2.buildDescriptor(pointField);\n        \tbuilder.add(index, descriptor);\n\t\t\t\n        \tbuilder.remove(latField);\n            builder.remove(lngField);\n        }\n        return builder.buildFeatureType();\n    }", "signature": "SimpleFeatureType buildFeatureType()", "full_signature": "@Override protected SimpleFeatureType buildFeatureType()", "class_method_signature": "CSVSpecifiedLatLngStrategy.buildFeatureType()", "testcase": false, "constructor": false, "invocations": ["openCSVReader", "getHeaders", "findMostSpecificTypesFromData", "close", "createBuilder", "get", "get", "isNumeric", "isNumeric", "asList", "indexOf", "setCRS", "binding", "buildDescriptor", "add", "remove", "remove", "buildFeatureType"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}