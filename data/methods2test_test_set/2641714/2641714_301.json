{"test_class": {"identifier": "ReadOnlyVariableResolverFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Request request;", "modifier": "private", "type": "Request", "declarator": "request", "var_name": "request"}, {"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private ReadOnlyVariableResolverFactory factory;", "modifier": "private", "type": "ReadOnlyVariableResolverFactory", "declarator": "factory", "var_name": "factory"}], "file": "tiles-mvel/src/test/java/org/apache/tiles/mvel/ReadOnlyVariableResolverFactoryTest.java"}, "test_case": {"identifier": "testGetVariableResolver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetVariableResolver() {\n        VariableResolverFactory nextFactory = createMock(VariableResolverFactory.class);\n        VariableResolver nextResolver = createMock(VariableResolver.class);\n        VariableResolver requestResolver = createMock(VariableResolver.class);\n        VariableResolver applicationResolver = createMock(VariableResolver.class);\n        expect(nextFactory.getVariableResolver(\"other\")).andReturn(nextResolver);\n        expect(nextFactory.isResolveable(\"other\")).andReturn(true);\n        expect(factory.isTarget(\"requestScope\")).andReturn(true).anyTimes();\n        expect(factory.isTarget(\"applicationScope\")).andReturn(true).anyTimes();\n        expect(factory.isTarget(\"other\")).andReturn(false).anyTimes();\n        expect(factory.createVariableResolver(\"requestScope\")).andReturn(requestResolver);\n        expect(factory.createVariableResolver(\"applicationScope\")).andReturn(applicationResolver);\n\n        replay(factory, request, applicationContext, nextFactory, nextResolver, requestResolver, applicationResolver);\n        factory.setNextFactory(nextFactory);\n        VariableResolver resolver = factory.getVariableResolver(\"requestScope\");\n        assertEquals(requestResolver, resolver);\n        resolver = factory.getVariableResolver(\"requestScope\"); // again to test caching\n        assertEquals(requestResolver, resolver);\n        resolver = factory.getVariableResolver(\"applicationScope\");\n        assertEquals(applicationResolver, resolver);\n        resolver = factory.getVariableResolver(\"other\");\n        assertEquals(nextResolver, resolver);\n        verify(factory, request, applicationContext, nextFactory, nextResolver, requestResolver, applicationResolver);\n    }", "signature": "void testGetVariableResolver()", "full_signature": "@Test public void testGetVariableResolver()", "class_method_signature": "ReadOnlyVariableResolverFactoryTest.testGetVariableResolver()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "createMock", "andReturn", "expect", "getVariableResolver", "andReturn", "expect", "isResolveable", "anyTimes", "andReturn", "expect", "isTarget", "anyTimes", "andReturn", "expect", "isTarget", "anyTimes", "andReturn", "expect", "isTarget", "andReturn", "expect", "createVariableResolver", "andReturn", "expect", "createVariableResolver", "replay", "setNextFactory", "getVariableResolver", "assertEquals", "getVariableResolver", "assertEquals", "getVariableResolver", "assertEquals", "getVariableResolver", "assertEquals", "verify"]}, "focal_class": {"identifier": "ReadOnlyVariableResolverFactory", "superclass": "extends\n        BaseVariableResolverFactory", "interfaces": "", "fields": [{"original_string": "protected TilesRequestContextHolder requestHolder;", "modifier": "protected", "type": "TilesRequestContextHolder", "declarator": "requestHolder", "var_name": "requestHolder"}], "methods": [{"identifier": "ReadOnlyVariableResolverFactory", "parameters": "(TilesRequestContextHolder requestHolder)", "modifiers": "public", "return": "", "signature": " ReadOnlyVariableResolverFactory(TilesRequestContextHolder requestHolder)", "full_signature": "public  ReadOnlyVariableResolverFactory(TilesRequestContextHolder requestHolder)", "class_method_signature": "ReadOnlyVariableResolverFactory.ReadOnlyVariableResolverFactory(TilesRequestContextHolder requestHolder)", "testcase": false, "constructor": true}, {"identifier": "createVariable", "parameters": "(String name, Object value)", "modifiers": "public", "return": "VariableResolver", "signature": "VariableResolver createVariable(String name, Object value)", "full_signature": "public VariableResolver createVariable(String name, Object value)", "class_method_signature": "ReadOnlyVariableResolverFactory.createVariable(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "createVariable", "parameters": "(String name, Object value,\n            Class<?> type)", "modifiers": "public", "return": "VariableResolver", "signature": "VariableResolver createVariable(String name, Object value,\n            Class<?> type)", "full_signature": "public VariableResolver createVariable(String name, Object value,\n            Class<?> type)", "class_method_signature": "ReadOnlyVariableResolverFactory.createVariable(String name, Object value,\n            Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isResolveable", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean isResolveable(String name)", "full_signature": "public boolean isResolveable(String name)", "class_method_signature": "ReadOnlyVariableResolverFactory.isResolveable(String name)", "testcase": false, "constructor": false}, {"identifier": "getVariableResolver", "parameters": "(String name)", "modifiers": "@Override public", "return": "VariableResolver", "signature": "VariableResolver getVariableResolver(String name)", "full_signature": "@Override public VariableResolver getVariableResolver(String name)", "class_method_signature": "ReadOnlyVariableResolverFactory.getVariableResolver(String name)", "testcase": false, "constructor": false}, {"identifier": "createVariableResolver", "parameters": "(String name)", "modifiers": "public abstract", "return": "VariableResolver", "signature": "VariableResolver createVariableResolver(String name)", "full_signature": "public abstract VariableResolver createVariableResolver(String name)", "class_method_signature": "ReadOnlyVariableResolverFactory.createVariableResolver(String name)", "testcase": false, "constructor": false}], "file": "tiles-mvel/src/main/java/org/apache/tiles/mvel/ReadOnlyVariableResolverFactory.java"}, "focal_method": {"identifier": "getVariableResolver", "parameters": "(String name)", "modifiers": "@Override public", "return": "VariableResolver", "body": "@Override\n    public VariableResolver getVariableResolver(String name) {\n        if (isResolveable(name)) {\n            if (variableResolvers != null && variableResolvers.containsKey(name)) {\n                return variableResolvers.get(name);\n            } else if (isTarget(name)) {\n                VariableResolver variableResolver = createVariableResolver(name);\n                variableResolvers.put(name, variableResolver);\n                return variableResolver;\n            } else if (nextFactory != null) {\n                return nextFactory.getVariableResolver(name);\n            }\n        }\n\n        throw new UnresolveablePropertyException(\"unable to resolve variable '\" + name + \"'\");\n    }", "signature": "VariableResolver getVariableResolver(String name)", "full_signature": "@Override public VariableResolver getVariableResolver(String name)", "class_method_signature": "ReadOnlyVariableResolverFactory.getVariableResolver(String name)", "testcase": false, "constructor": false, "invocations": ["isResolveable", "containsKey", "get", "isTarget", "createVariableResolver", "put", "getVariableResolver"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}