{"test_class": {"identifier": "InvalidChainIdHashHandlerTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/transport/src/test/java/hera/client/InvalidChainIdHashHandlerTest.java"}, "test_case": {"identifier": "shouldNotHandleOnNoError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldNotHandleOnNoError() {\n    final FailoverHandler failoverHandler = new InvalidChainIdHashHandler();\n    final String expected = randomUUID().toString();\n    final Response<String> response = Response.success(expected);\n    final Response<String> handled = failoverHandler.handle(null, response);\n    assertEquals(expected, handled.getValue());\n  }", "signature": "void shouldNotHandleOnNoError()", "full_signature": "@Test public void shouldNotHandleOnNoError()", "class_method_signature": "InvalidChainIdHashHandlerTest.shouldNotHandleOnNoError()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "success", "handle", "assertEquals", "getValue"]}, "focal_class": {"identifier": "InvalidChainIdHashHandler", "superclass": "extends ComparableFailoverHandler", "interfaces": "", "fields": [{"original_string": "@ToString.Exclude\n  protected final transient Logger logger = getLogger(getClass());", "modifier": "@ToString.Exclude\n  protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "@ToString.Exclude\n  protected BlockchainMethods blockchainMethods = new BlockchainMethods();", "modifier": "@ToString.Exclude\n  protected", "type": "BlockchainMethods", "declarator": "blockchainMethods = new BlockchainMethods()", "var_name": "blockchainMethods"}, {"original_string": "@Getter\n  protected final int priority = 1;", "modifier": "@Getter\n  protected final", "type": "int", "declarator": "priority = 1", "var_name": "priority"}], "methods": [{"identifier": "InvalidChainIdHashHandler", "parameters": "()", "modifiers": "", "return": "", "signature": " InvalidChainIdHashHandler()", "full_signature": "  InvalidChainIdHashHandler()", "class_method_signature": "InvalidChainIdHashHandler.InvalidChainIdHashHandler()", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "(final Invocation<T> invocation, final Response<T> response)", "modifiers": "@Override public", "return": "Response<T>", "signature": "Response<T> handle(final Invocation<T> invocation, final Response<T> response)", "full_signature": "@Override public Response<T> handle(final Invocation<T> invocation, final Response<T> response)", "class_method_signature": "InvalidChainIdHashHandler.handle(final Invocation<T> invocation, final Response<T> response)", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/client/InvalidChainIdHashHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "(final Invocation<T> invocation, final Response<T> response)", "modifiers": "@Override public", "return": "Response<T>", "body": "@Override\n  public <T> Response<T> handle(final Invocation<T> invocation, final Response<T> response) {\n    try {\n      logger.debug(\"Handle {} with {}\", response.getError(), this);\n\n      if (null == response.getError() || !(response.getError() instanceof CommitException)) {\n        return response;\n      }\n\n      // FIXME: no other way to handle it?\n      final CommitException commitException = (CommitException) response.getError();\n      if (!commitException.getMessage().contains(\"invalid chain id hash\")) {\n        return response;\n      }\n\n      final Context current = ContextHolder.current();\n      logger.trace(\"Context: {}\", current);\n      final ChainIdHashHolder chainIdHashHolder = current.get(GRPC_VALUE_CHAIN_ID_HASH_HOLDER);\n      if (null == chainIdHashHolder) {\n        throw new HerajException(\"No chain id hash holder in context\");\n      }\n\n      final RequestMethod<BlockchainStatus> requestMethod = blockchainMethods.getBlockchainStatus();\n      final ChainIdHash chainIdHash = requestMethod.invoke().getChainIdHash();\n      logger.debug(\"Fetched ChainIdHash: {}\", chainIdHash);\n      chainIdHashHolder.put(chainIdHash);\n    } catch (HerajException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new HerajException(\"Unexpected error\", e);\n    }\n\n    Response<T> next;\n    try {\n      final T ret = invocation.invoke();\n      next = Response.success(ret);\n    } catch (Exception e) {\n      next = Response.fail(e);\n    }\n    return next;\n  }", "signature": "Response<T> handle(final Invocation<T> invocation, final Response<T> response)", "full_signature": "@Override public Response<T> handle(final Invocation<T> invocation, final Response<T> response)", "class_method_signature": "InvalidChainIdHashHandler.handle(final Invocation<T> invocation, final Response<T> response)", "testcase": false, "constructor": false, "invocations": ["debug", "getError", "getError", "getError", "getError", "contains", "getMessage", "current", "trace", "get", "getBlockchainStatus", "getChainIdHash", "invoke", "debug", "put", "invoke", "success", "fail"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}