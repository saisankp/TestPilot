{"test_class": {"identifier": "DBaseFileReaderTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "private static final String PHOTOGRAMMETRIE_VALUE;", "modifier": "private static final", "type": "String", "declarator": "PHOTOGRAMMETRIE_VALUE", "var_name": "PHOTOGRAMMETRIE_VALUE"}, {"original_string": "private static final String BDTOPO_VALUE;", "modifier": "private static final", "type": "String", "declarator": "BDTOPO_VALUE", "var_name": "BDTOPO_VALUE"}, {"original_string": "private static final String BATIMENT_RELIGIEUX_VALUE;", "modifier": "private static final", "type": "String", "declarator": "BATIMENT_RELIGIEUX_VALUE", "var_name": "BATIMENT_RELIGIEUX_VALUE"}, {"original_string": "private static final String TEST_FILENAME = \"org/arakhne/afc/io/dbase/test.dbf\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILENAME = \"org/arakhne/afc/io/dbase/test.dbf\"", "var_name": "TEST_FILENAME"}, {"original_string": "private DBaseFileReader reader;", "modifier": "private", "type": "DBaseFileReader", "declarator": "reader", "var_name": "reader"}], "file": "advanced/dbasefile/src/test/java/org/arakhne/afc/io/dbase/DBaseFileReaderTest.java"}, "test_case": {"identifier": "testGetDBFFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDBFFields() throws Exception {\n    \tassertNull(this.reader.getDBFFields());\n    \tthis.reader.readDBFHeader();\n    \tList<DBaseFileField> fields = this.reader.getDBFFields();\n    \tassertNotNull(fields);\n    \tassertEquals(4, fields.size());\n    \tassertEquals(\"SOURCE\", fields.get(0).getName()); //$NON-NLS-1$\n    \tassertEquals(\"CATEGORIE\", fields.get(1).getName()); //$NON-NLS-1$\n    \tassertEquals(\"NATURE\", fields.get(2).getName()); //$NON-NLS-1$\n    \tassertEquals(\"HAUTEUR\", fields.get(3).getName()); //$NON-NLS-1$\n    }", "signature": "void testGetDBFFields()", "full_signature": "@Test public void testGetDBFFields()", "class_method_signature": "DBaseFileReaderTest.testGetDBFFields()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getDBFFields", "readDBFHeader", "getDBFFields", "assertNotNull", "assertEquals", "size", "assertEquals", "getName", "get", "assertEquals", "getName", "get", "assertEquals", "getName", "get", "assertEquals", "getName", "get"]}, "focal_class": {"identifier": "DBaseFileReader", "superclass": "", "interfaces": "implements Iterable<AttributeProvider>, AutoCloseable", "fields": [{"original_string": "public static final int OPTION_DECODE_STRING = 1;", "modifier": "public static final", "type": "int", "declarator": "OPTION_DECODE_STRING = 1", "var_name": "OPTION_DECODE_STRING"}, {"original_string": "private static final String TRUE_CHARS = \"YyTtOo\";", "modifier": "private static final", "type": "String", "declarator": "TRUE_CHARS = \"YyTtOo\"", "var_name": "TRUE_CHARS"}, {"original_string": "private static final String FALSE_CHARS = \"NnFf\";", "modifier": "private static final", "type": "String", "declarator": "FALSE_CHARS = \"NnFf\"", "var_name": "FALSE_CHARS"}, {"original_string": "private final LittleEndianDataInputStream stream;", "modifier": "private final", "type": "LittleEndianDataInputStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "private transient int recordCount = -1;", "modifier": "private transient", "type": "int", "declarator": "recordCount = -1", "var_name": "recordCount"}, {"original_string": "private int recordSize = -1;", "modifier": "private", "type": "int", "declarator": "recordSize = -1", "var_name": "recordSize"}, {"original_string": "private transient int fieldCount = -1;", "modifier": "private transient", "type": "int", "declarator": "fieldCount = -1", "var_name": "fieldCount"}, {"original_string": "private transient int readingPosition;", "modifier": "private transient", "type": "int", "declarator": "readingPosition", "var_name": "readingPosition"}, {"original_string": "private int firstRecordOffset = -1;", "modifier": "private", "type": "int", "declarator": "firstRecordOffset = -1", "var_name": "firstRecordOffset"}, {"original_string": "private transient ArrayList<DBaseFileField> fields;", "modifier": "private transient", "type": "ArrayList<DBaseFileField>", "declarator": "fields", "var_name": "fields"}, {"original_string": "private transient List<DBaseFileField> selectedColumns = new ArrayList<>();", "modifier": "private transient", "type": "List<DBaseFileField>", "declarator": "selectedColumns = new ArrayList<>()", "var_name": "selectedColumns"}, {"original_string": "private boolean finished;", "modifier": "private", "type": "boolean", "declarator": "finished", "var_name": "finished"}, {"original_string": "private int options = OPTION_DECODE_STRING;", "modifier": "private", "type": "int", "declarator": "options = OPTION_DECODE_STRING", "var_name": "options"}, {"original_string": "private Date lastUpdateDate;", "modifier": "private", "type": "Date", "declarator": "lastUpdateDate", "var_name": "lastUpdateDate"}, {"original_string": "private DBaseCodePage codePage;", "modifier": "private", "type": "DBaseCodePage", "declarator": "codePage", "var_name": "codePage"}, {"original_string": "private int fileVersion;", "modifier": "private", "type": "int", "declarator": "fileVersion", "var_name": "fileVersion"}], "methods": [{"identifier": "DBaseFileReader", "parameters": "(InputStream inputStream)", "modifiers": "@SuppressWarnings(\"resource\") public", "return": "", "signature": " DBaseFileReader(InputStream inputStream)", "full_signature": "@SuppressWarnings(\"resource\") public  DBaseFileReader(InputStream inputStream)", "class_method_signature": "DBaseFileReader.DBaseFileReader(InputStream inputStream)", "testcase": false, "constructor": true}, {"identifier": "DBaseFileReader", "parameters": "(File file)", "modifiers": "@SuppressWarnings(\"resource\") public", "return": "", "signature": " DBaseFileReader(File file)", "full_signature": "@SuppressWarnings(\"resource\") public  DBaseFileReader(File file)", "class_method_signature": "DBaseFileReader.DBaseFileReader(File file)", "testcase": false, "constructor": true}, {"identifier": "DBaseFileReader", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " DBaseFileReader(URL url)", "full_signature": "public  DBaseFileReader(URL url)", "class_method_signature": "DBaseFileReader.DBaseFileReader(URL url)", "testcase": false, "constructor": true}, {"identifier": "DBaseFileReader", "parameters": "(ReadableByteChannel channel)", "modifiers": "public", "return": "", "signature": " DBaseFileReader(ReadableByteChannel channel)", "full_signature": "public  DBaseFileReader(ReadableByteChannel channel)", "class_method_signature": "DBaseFileReader.DBaseFileReader(ReadableByteChannel channel)", "testcase": false, "constructor": true}, {"identifier": "columnize", "parameters": "(String string, int length)", "modifiers": "private static", "return": "String", "signature": "String columnize(String string, int length)", "full_signature": "private static String columnize(String string, int length)", "class_method_signature": "DBaseFileReader.columnize(String string, int length)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "@SuppressWarnings({\"checkstyle:regexp\", \"checkstyle:magicnumber\"}) public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "@SuppressWarnings({\"checkstyle:regexp\", \"checkstyle:magicnumber\"}) public static void main(String[] args)", "class_method_signature": "DBaseFileReader.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "hasOption", "parameters": "(int option)", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean hasOption(int option)", "full_signature": "@Pure public boolean hasOption(int option)", "class_method_signature": "DBaseFileReader.hasOption(int option)", "testcase": false, "constructor": false}, {"identifier": "addOption", "parameters": "(int option)", "modifiers": "public", "return": "void", "signature": "void addOption(int option)", "full_signature": "public void addOption(int option)", "class_method_signature": "DBaseFileReader.addOption(int option)", "testcase": false, "constructor": false}, {"identifier": "removeOption", "parameters": "(int option)", "modifiers": "public", "return": "void", "signature": "void removeOption(int option)", "full_signature": "public void removeOption(int option)", "class_method_signature": "DBaseFileReader.removeOption(int option)", "testcase": false, "constructor": false}, {"identifier": "setOption", "parameters": "(int option, boolean option_is_set)", "modifiers": "public", "return": "void", "signature": "void setOption(int option, boolean option_is_set)", "full_signature": "public void setOption(int option, boolean option_is_set)", "class_method_signature": "DBaseFileReader.setOption(int option, boolean option_is_set)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DBaseFileReader.close()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "@Pure public boolean isClosed()", "class_method_signature": "DBaseFileReader.isClosed()", "testcase": false, "constructor": false}, {"identifier": "getDBFRecordCount", "parameters": "()", "modifiers": "@Pure public", "return": "int", "signature": "int getDBFRecordCount()", "full_signature": "@Pure public int getDBFRecordCount()", "class_method_signature": "DBaseFileReader.getDBFRecordCount()", "testcase": false, "constructor": false}, {"identifier": "getDBFRecordSize", "parameters": "()", "modifiers": "@Pure public", "return": "int", "signature": "int getDBFRecordSize()", "full_signature": "@Pure public int getDBFRecordSize()", "class_method_signature": "DBaseFileReader.getDBFRecordSize()", "testcase": false, "constructor": false}, {"identifier": "getDBFHeaderSize", "parameters": "()", "modifiers": "@Pure @SuppressWarnings(\"checkstyle:magicnumber\") public", "return": "int", "signature": "int getDBFHeaderSize()", "full_signature": "@Pure @SuppressWarnings(\"checkstyle:magicnumber\") public int getDBFHeaderSize()", "class_method_signature": "DBaseFileReader.getDBFHeaderSize()", "testcase": false, "constructor": false}, {"identifier": "getDBFFieldCount", "parameters": "()", "modifiers": "@Pure public", "return": "int", "signature": "int getDBFFieldCount()", "full_signature": "@Pure public int getDBFFieldCount()", "class_method_signature": "DBaseFileReader.getDBFFieldCount()", "testcase": false, "constructor": false}, {"identifier": "getDBFLastUpdateDate", "parameters": "()", "modifiers": "@Pure public", "return": "Date", "signature": "Date getDBFLastUpdateDate()", "full_signature": "@Pure public Date getDBFLastUpdateDate()", "class_method_signature": "DBaseFileReader.getDBFLastUpdateDate()", "testcase": false, "constructor": false}, {"identifier": "getDBFLanguage", "parameters": "()", "modifiers": "@Pure public", "return": "DBaseCodePage", "signature": "DBaseCodePage getDBFLanguage()", "full_signature": "@Pure public DBaseCodePage getDBFLanguage()", "class_method_signature": "DBaseFileReader.getDBFLanguage()", "testcase": false, "constructor": false}, {"identifier": "getDBFVersion", "parameters": "()", "modifiers": "@Pure public", "return": "int", "signature": "int getDBFVersion()", "full_signature": "@Pure public int getDBFVersion()", "class_method_signature": "DBaseFileReader.getDBFVersion()", "testcase": false, "constructor": false}, {"identifier": "readDBFHeader", "parameters": "()", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") public", "return": "void", "signature": "void readDBFHeader()", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") public void readDBFHeader()", "class_method_signature": "DBaseFileReader.readDBFHeader()", "testcase": false, "constructor": false}, {"identifier": "getDBFFields", "parameters": "()", "modifiers": "@Pure public", "return": "List<DBaseFileField>", "signature": "List<DBaseFileField> getDBFFields()", "full_signature": "@Pure public List<DBaseFileField> getDBFFields()", "class_method_signature": "DBaseFileReader.getDBFFields()", "testcase": false, "constructor": false}, {"identifier": "getDBFFieldName", "parameters": "(int index)", "modifiers": "@Pure public", "return": "String", "signature": "String getDBFFieldName(int index)", "full_signature": "@Pure public String getDBFFieldName(int index)", "class_method_signature": "DBaseFileReader.getDBFFieldName(int index)", "testcase": false, "constructor": false}, {"identifier": "getDBFFieldIndex", "parameters": "(String name)", "modifiers": "@Pure public", "return": "int", "signature": "int getDBFFieldIndex(String name)", "full_signature": "@Pure public int getDBFFieldIndex(String name)", "class_method_signature": "DBaseFileReader.getDBFFieldIndex(String name)", "testcase": false, "constructor": false}, {"identifier": "getDBFFieldType", "parameters": "(int index)", "modifiers": "@Pure public", "return": "DBaseFieldType", "signature": "DBaseFieldType getDBFFieldType(int index)", "full_signature": "@Pure public DBaseFieldType getDBFFieldType(int index)", "class_method_signature": "DBaseFileReader.getDBFFieldType(int index)", "testcase": false, "constructor": false}, {"identifier": "readDBFFields", "parameters": "()", "modifiers": "@SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:magicnumber\"}) public", "return": "List<DBaseFileField>", "signature": "List<DBaseFileField> readDBFFields()", "full_signature": "@SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:magicnumber\"}) public List<DBaseFileField> readDBFFields()", "class_method_signature": "DBaseFileReader.readDBFFields()", "testcase": false, "constructor": false}, {"identifier": "readNextDBFRecord", "parameters": "()", "modifiers": "public", "return": "DBaseFileRecord", "signature": "DBaseFileRecord readNextDBFRecord()", "full_signature": "public DBaseFileRecord readNextDBFRecord()", "class_method_signature": "DBaseFileReader.readNextDBFRecord()", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "(int skipAmount)", "modifiers": "public", "return": "void", "signature": "void skip(int skipAmount)", "full_signature": "public void skip(int skipAmount)", "class_method_signature": "DBaseFileReader.skip(int skipAmount)", "testcase": false, "constructor": false}, {"identifier": "seek", "parameters": "(int recordIndex)", "modifiers": "public", "return": "void", "signature": "void seek(int recordIndex)", "full_signature": "public void seek(int recordIndex)", "class_method_signature": "DBaseFileReader.seek(int recordIndex)", "testcase": false, "constructor": false}, {"identifier": "readNextAttributeProvider", "parameters": "()", "modifiers": "public", "return": "AttributeProvider", "signature": "AttributeProvider readNextAttributeProvider()", "full_signature": "public AttributeProvider readNextAttributeProvider()", "class_method_signature": "DBaseFileReader.readNextAttributeProvider()", "testcase": false, "constructor": false}, {"identifier": "readRestOfDBFRecords", "parameters": "()", "modifiers": "public", "return": "List<DBaseFileRecord>", "signature": "List<DBaseFileRecord> readRestOfDBFRecords()", "full_signature": "public List<DBaseFileRecord> readRestOfDBFRecords()", "class_method_signature": "DBaseFileReader.readRestOfDBFRecords()", "testcase": false, "constructor": false}, {"identifier": "readDBFRecord", "parameters": "(int recordNumber)", "modifiers": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\", \"checkstyle:magicnumber\"}) private", "return": "DBaseFileRecord", "signature": "DBaseFileRecord readDBFRecord(int recordNumber)", "full_signature": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\", \"checkstyle:magicnumber\"}) private DBaseFileRecord readDBFRecord(int recordNumber)", "class_method_signature": "DBaseFileReader.readDBFRecord(int recordNumber)", "testcase": false, "constructor": false}, {"identifier": "readStringRecordValue", "parameters": "(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<String> value)", "modifiers": "private", "return": "int", "signature": "int readStringRecordValue(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<String> value)", "full_signature": "private int readStringRecordValue(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<String> value)", "class_method_signature": "DBaseFileReader.readStringRecordValue(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<String> value)", "testcase": false, "constructor": false}, {"identifier": "readDateRecordValue", "parameters": "(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<Date> value)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private static", "return": "int", "signature": "int readDateRecordValue(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<Date> value)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private static int readDateRecordValue(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<Date> value)", "class_method_signature": "DBaseFileReader.readDateRecordValue(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<Date> value)", "testcase": false, "constructor": false}, {"identifier": "readNumberRecordValue", "parameters": "(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<Double> value)", "modifiers": "private static", "return": "int", "signature": "int readNumberRecordValue(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<Double> value)", "full_signature": "private static int readNumberRecordValue(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<Double> value)", "class_method_signature": "DBaseFileReader.readNumberRecordValue(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<Double> value)", "testcase": false, "constructor": false}, {"identifier": "readBooleanRecordValue", "parameters": "(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<Boolean> value)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private static", "return": "int", "signature": "int readBooleanRecordValue(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<Boolean> value)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private static int readBooleanRecordValue(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<Boolean> value)", "class_method_signature": "DBaseFileReader.readBooleanRecordValue(DBaseFileField field, int nrecord, int nfield, byte[] rawData,\n\t\t\tint rawOffset, OutputParameter<Boolean> value)", "testcase": false, "constructor": false}, {"identifier": "read2ByteIntegerRecordValue", "parameters": "(DBaseFileField field, int nrecord, int nfield,\n\t\t\tbyte[] rawData, int rawOffset, OutputParameter<Integer> value)", "modifiers": "private static", "return": "int", "signature": "int read2ByteIntegerRecordValue(DBaseFileField field, int nrecord, int nfield,\n\t\t\tbyte[] rawData, int rawOffset, OutputParameter<Integer> value)", "full_signature": "private static int read2ByteIntegerRecordValue(DBaseFileField field, int nrecord, int nfield,\n\t\t\tbyte[] rawData, int rawOffset, OutputParameter<Integer> value)", "class_method_signature": "DBaseFileReader.read2ByteIntegerRecordValue(DBaseFileField field, int nrecord, int nfield,\n\t\t\tbyte[] rawData, int rawOffset, OutputParameter<Integer> value)", "testcase": false, "constructor": false}, {"identifier": "read4ByteIntegerRecordValue", "parameters": "(DBaseFileField field, int nrecord, int nfield,\n\t\t\tbyte[] rawData, int rawOffset, OutputParameter<Long> value)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private static", "return": "int", "signature": "int read4ByteIntegerRecordValue(DBaseFileField field, int nrecord, int nfield,\n\t\t\tbyte[] rawData, int rawOffset, OutputParameter<Long> value)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private static int read4ByteIntegerRecordValue(DBaseFileField field, int nrecord, int nfield,\n\t\t\tbyte[] rawData, int rawOffset, OutputParameter<Long> value)", "class_method_signature": "DBaseFileReader.read4ByteIntegerRecordValue(DBaseFileField field, int nrecord, int nfield,\n\t\t\tbyte[] rawData, int rawOffset, OutputParameter<Long> value)", "testcase": false, "constructor": false}, {"identifier": "read8ByteDoubleRecordValue", "parameters": "(DBaseFileField field, int nrecord, int nfield,\n\t\t\tbyte[] rawData, int rawOffset, OutputParameter<Double> value)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private static", "return": "int", "signature": "int read8ByteDoubleRecordValue(DBaseFileField field, int nrecord, int nfield,\n\t\t\tbyte[] rawData, int rawOffset, OutputParameter<Double> value)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private static int read8ByteDoubleRecordValue(DBaseFileField field, int nrecord, int nfield,\n\t\t\tbyte[] rawData, int rawOffset, OutputParameter<Double> value)", "class_method_signature": "DBaseFileReader.read8ByteDoubleRecordValue(DBaseFileField field, int nrecord, int nfield,\n\t\t\tbyte[] rawData, int rawOffset, OutputParameter<Double> value)", "testcase": false, "constructor": false}, {"identifier": "selectColumn", "parameters": "(DBaseFileField column)", "modifiers": "public", "return": "void", "signature": "void selectColumn(DBaseFileField column)", "full_signature": "public void selectColumn(DBaseFileField column)", "class_method_signature": "DBaseFileReader.selectColumn(DBaseFileField column)", "testcase": false, "constructor": false}, {"identifier": "selectAllColumns", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void selectAllColumns()", "full_signature": "public void selectAllColumns()", "class_method_signature": "DBaseFileReader.selectAllColumns()", "testcase": false, "constructor": false}, {"identifier": "isColumnSelectable", "parameters": "(DBaseFileField column)", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean isColumnSelectable(DBaseFileField column)", "full_signature": "@Pure public boolean isColumnSelectable(DBaseFileField column)", "class_method_signature": "DBaseFileReader.isColumnSelectable(DBaseFileField column)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override @Pure public", "return": "Iterator<AttributeProvider>", "signature": "Iterator<AttributeProvider> iterator()", "full_signature": "@Override @Pure public Iterator<AttributeProvider> iterator()", "class_method_signature": "DBaseFileReader.iterator()", "testcase": false, "constructor": false}], "file": "advanced/dbasefile/src/main/java/org/arakhne/afc/io/dbase/DBaseFileReader.java"}, "focal_method": {"identifier": "getDBFFields", "parameters": "()", "modifiers": "@Pure public", "return": "List<DBaseFileField>", "body": "@Pure\n\tpublic List<DBaseFileField> getDBFFields() {\n\t\ttry {\n\t\t\treturn readDBFFields();\n\t\t} catch (IOException e) {\n\t\t\treturn null;\n\t\t}\n\t}", "signature": "List<DBaseFileField> getDBFFields()", "full_signature": "@Pure public List<DBaseFileField> getDBFFields()", "class_method_signature": "DBaseFileReader.getDBFFields()", "testcase": false, "constructor": false, "invocations": ["readDBFFields"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}