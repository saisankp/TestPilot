{"test_class": {"identifier": "CountThingsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String JSON_ALL_FIELDS_V2 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.TYPE, CountThings.TYPE)\n            .set(CountThings.JSON_FILTER, TestConstants.KNOWN_FILTER_STR)\n            .set(CountThings.JSON_NAMESPACES, JsonFactory.newArrayBuilder()\n                    .add(TestConstants.KNOWN_NAMESPACE)\n                    .build())\n            .build().toString();", "modifier": "private static final", "type": "String", "declarator": "JSON_ALL_FIELDS_V2 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.TYPE, CountThings.TYPE)\n            .set(CountThings.JSON_FILTER, TestConstants.KNOWN_FILTER_STR)\n            .set(CountThings.JSON_NAMESPACES, JsonFactory.newArrayBuilder()\n                    .add(TestConstants.KNOWN_NAMESPACE)\n                    .build())\n            .build().toString()", "var_name": "JSON_ALL_FIELDS_V2"}, {"original_string": "private static final String JSON_ALL_FIELDS_V1 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.ID, CountThings.NAME)\n            .set(CountThings.JSON_FILTER, TestConstants.KNOWN_FILTER_STR)\n            .set(CountThings.JSON_NAMESPACES, JsonFactory.newArrayBuilder()\n                    .add(TestConstants.KNOWN_NAMESPACE)\n                    .build())\n            .build().toString();", "modifier": "private static final", "type": "String", "declarator": "JSON_ALL_FIELDS_V1 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.ID, CountThings.NAME)\n            .set(CountThings.JSON_FILTER, TestConstants.KNOWN_FILTER_STR)\n            .set(CountThings.JSON_NAMESPACES, JsonFactory.newArrayBuilder()\n                    .add(TestConstants.KNOWN_NAMESPACE)\n                    .build())\n            .build().toString()", "var_name": "JSON_ALL_FIELDS_V1"}, {"original_string": "private static final String JSON_MINIMAL_V2 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.TYPE, CountThings.TYPE)\n            .build().toString();", "modifier": "private static final", "type": "String", "declarator": "JSON_MINIMAL_V2 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.TYPE, CountThings.TYPE)\n            .build().toString()", "var_name": "JSON_MINIMAL_V2"}, {"original_string": "private static final String JSON_MINIMAL_V1 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.ID, CountThings.NAME)\n            .build().toString();", "modifier": "private static final", "type": "String", "declarator": "JSON_MINIMAL_V1 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.ID, CountThings.NAME)\n            .build().toString()", "var_name": "JSON_MINIMAL_V1"}], "file": "signals/commands/thingsearch/src/test/java/org/eclipse/ditto/signals/commands/thingsearch/query/CountThingsTest.java"}, "test_case": {"identifier": "fromJsonWithOnlyRequiredFieldsSetV2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fromJsonWithOnlyRequiredFieldsSetV2() {\n        assertMinimal(CountThings.fromJson(JSON_MINIMAL_V2, DittoHeaders.empty()));\n    }", "signature": "void fromJsonWithOnlyRequiredFieldsSetV2()", "full_signature": "@Test public void fromJsonWithOnlyRequiredFieldsSetV2()", "class_method_signature": "CountThingsTest.fromJsonWithOnlyRequiredFieldsSetV2()", "testcase": true, "constructor": false, "invocations": ["assertMinimal", "fromJson", "empty"]}, "focal_class": {"identifier": "CountThings", "superclass": "extends AbstractCommand<CountThings>", "interfaces": "implements ThingSearchQueryCommand<CountThings>", "fields": [{"original_string": "public static final String NAME = \"countThings\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"countThings\"", "var_name": "NAME"}, {"original_string": "public static final String TYPE = TYPE_PREFIX + NAME;", "modifier": "public static final", "type": "String", "declarator": "TYPE = TYPE_PREFIX + NAME", "var_name": "TYPE"}, {"original_string": "static final JsonFieldDefinition<String> JSON_FILTER =\n            JsonFactory.newStringFieldDefinition(\"filter\", FieldType.REGULAR, JsonSchemaVersion.V_1,\n                    JsonSchemaVersion.V_2);", "modifier": "static final", "type": "JsonFieldDefinition<String>", "declarator": "JSON_FILTER =\n            JsonFactory.newStringFieldDefinition(\"filter\", FieldType.REGULAR, JsonSchemaVersion.V_1,\n                    JsonSchemaVersion.V_2)", "var_name": "JSON_FILTER"}, {"original_string": "static final JsonFieldDefinition<JsonArray> JSON_NAMESPACES =\n            JsonFactory.newJsonArrayFieldDefinition(\"namespaces\", FieldType.REGULAR, JsonSchemaVersion.V_1,\n                    JsonSchemaVersion.V_2);", "modifier": "static final", "type": "JsonFieldDefinition<JsonArray>", "declarator": "JSON_NAMESPACES =\n            JsonFactory.newJsonArrayFieldDefinition(\"namespaces\", FieldType.REGULAR, JsonSchemaVersion.V_1,\n                    JsonSchemaVersion.V_2)", "var_name": "JSON_NAMESPACES"}, {"original_string": "@Nullable private final String filter;", "modifier": "@Nullable private final", "type": "String", "declarator": "filter", "var_name": "filter"}, {"original_string": "@Nullable private final Set<String> namespaces;", "modifier": "@Nullable private final", "type": "Set<String>", "declarator": "namespaces", "var_name": "namespaces"}], "methods": [{"identifier": "CountThings", "parameters": "(final DittoHeaders dittoHeaders, @Nullable final String filter,\n            @Nullable final Collection<String> namespaces)", "modifiers": "private", "return": "", "signature": " CountThings(final DittoHeaders dittoHeaders, @Nullable final String filter,\n            @Nullable final Collection<String> namespaces)", "full_signature": "private  CountThings(final DittoHeaders dittoHeaders, @Nullable final String filter,\n            @Nullable final Collection<String> namespaces)", "class_method_signature": "CountThings.CountThings(final DittoHeaders dittoHeaders, @Nullable final String filter,\n            @Nullable final Collection<String> namespaces)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(@Nullable final String filter, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "CountThings", "signature": "CountThings of(@Nullable final String filter, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders)", "full_signature": "public static CountThings of(@Nullable final String filter, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "CountThings.of(@Nullable final String filter, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "CountThings", "signature": "CountThings of(final DittoHeaders dittoHeaders)", "full_signature": "public static CountThings of(final DittoHeaders dittoHeaders)", "class_method_signature": "CountThings.of(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final String jsonString, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "CountThings", "signature": "CountThings fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "full_signature": "public static CountThings fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "class_method_signature": "CountThings.fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "CountThings", "signature": "CountThings fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "full_signature": "public static CountThings fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "class_method_signature": "CountThings.fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "getFilter", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getFilter()", "full_signature": "@Override public Optional<String> getFilter()", "class_method_signature": "CountThings.getFilter()", "testcase": false, "constructor": false}, {"identifier": "getNamespaces", "parameters": "()", "modifiers": "@Override public", "return": "Optional<Set<String>>", "signature": "Optional<Set<String>> getNamespaces()", "full_signature": "@Override public Optional<Set<String>> getNamespaces()", "class_method_signature": "CountThings.getNamespaces()", "testcase": false, "constructor": false}, {"identifier": "setNamespaces", "parameters": "(@Nullable final Collection<String> namespaces)", "modifiers": "@Override public", "return": "CountThings", "signature": "CountThings setNamespaces(@Nullable final Collection<String> namespaces)", "full_signature": "@Override public CountThings setNamespaces(@Nullable final Collection<String> namespaces)", "class_method_signature": "CountThings.setNamespaces(@Nullable final Collection<String> namespaces)", "testcase": false, "constructor": false}, {"identifier": "appendPayload", "parameters": "(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "modifiers": "@Override protected", "return": "void", "signature": "void appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "full_signature": "@Override protected void appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "class_method_signature": "CountThings.appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "testcase": false, "constructor": false}, {"identifier": "setDittoHeaders", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "CountThings", "signature": "CountThings setDittoHeaders(final DittoHeaders dittoHeaders)", "full_signature": "@Override public CountThings setDittoHeaders(final DittoHeaders dittoHeaders)", "class_method_signature": "CountThings.setDittoHeaders(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object o)", "full_signature": "@Override public boolean equals(@Nullable final Object o)", "class_method_signature": "CountThings.equals(@Nullable final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "CountThings.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CountThings.toString()", "testcase": false, "constructor": false}], "file": "signals/commands/thingsearch/src/main/java/org/eclipse/ditto/signals/commands/thingsearch/query/CountThings.java"}, "focal_method": {"identifier": "fromJson", "parameters": "(final String jsonString, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "CountThings", "body": "public static CountThings fromJson(final String jsonString, final DittoHeaders dittoHeaders) {\n        return fromJson(JsonFactory.newObject(jsonString), dittoHeaders);\n    }", "signature": "CountThings fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "full_signature": "public static CountThings fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "class_method_signature": "CountThings.fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false, "invocations": ["fromJson", "newObject"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}