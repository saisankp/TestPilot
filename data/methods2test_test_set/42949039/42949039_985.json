{"test_class": {"identifier": "DownloaderControllerTest", "superclass": "extends AbstractDownloaderTest", "interfaces": "", "fields": [], "file": "herd-code/herd-tools/herd-downloader/src/test/java/org/finra/herd/tools/downloader/DownloaderControllerTest.java"}, "test_case": {"identifier": "testLogLocalDirectoryContents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLogLocalDirectoryContents() throws Exception\n    {\n        String appenderName = \"TestWriterAppender\";\n        StringWriter stringWriter = addLoggingWriterAppender(appenderName);\n        LogLevel originalLevel = getLogLevel(DownloaderController.class);\n        setLogLevel(DownloaderController.class, LogLevel.INFO);\n\n        /*\n         * Create and inject mock objects\n         */\n        DownloaderWebClient mockDownloaderWebClient = mock(DownloaderWebClient.class);\n        DownloaderWebClient originalDownloaderWebClient = (DownloaderWebClient) ReflectionTestUtils.getField(downloaderController, \"downloaderWebClient\");\n        ReflectionTestUtils.setField(downloaderController, \"downloaderWebClient\", mockDownloaderWebClient);\n\n        DownloaderManifestReader mockDownloaderManifestReader = mock(DownloaderManifestReader.class);\n        DownloaderManifestReader originalDownloaderManifestReader =\n            (DownloaderManifestReader) ReflectionTestUtils.getField(downloaderController, \"manifestReader\");\n        ReflectionTestUtils.setField(downloaderController, \"manifestReader\", mockDownloaderManifestReader);\n\n        BusinessObjectDataHelper mockBusinessObjectDataHelper = mock(BusinessObjectDataHelper.class);\n        BusinessObjectDataHelper originalBusinessObjectDataHelper =\n            (BusinessObjectDataHelper) ReflectionTestUtils.getField(downloaderController, \"businessObjectDataHelper\");\n        ReflectionTestUtils.setField(downloaderController, \"businessObjectDataHelper\", mockBusinessObjectDataHelper);\n\n        S3Service mockS3Service = mock(S3Service.class);\n        S3Service originalS3Service = (S3Service) ReflectionTestUtils.getField(downloaderController, \"s3Service\");\n        ReflectionTestUtils.setField(downloaderController, \"s3Service\", mockS3Service);\n\n        StorageFileHelper mockStorageFileHelper = mock(StorageFileHelper.class);\n        StorageFileHelper originalStorageFileHelper = (StorageFileHelper) ReflectionTestUtils.getField(downloaderController, \"storageFileHelper\");\n        ReflectionTestUtils.setField(downloaderController, \"storageFileHelper\", mockStorageFileHelper);\n\n        StorageHelper mockStorageHelper = mock(StorageHelper.class);\n        StorageHelper originalStorageHelper = (StorageHelper) ReflectionTestUtils.getField(downloaderController, \"storageHelper\");\n        ReflectionTestUtils.setField(downloaderController, \"storageHelper\", mockStorageHelper);\n\n        /*\n         * Start test\n         */\n        Path localPath = Files.createTempDirectory(null);\n        try\n        {\n            String s3KeyPrefix = \"s3KeyPrefix\";\n            String storageName = \"S3_MANAGED\";\n            Path targetDirectoryPath = localPath.resolve(s3KeyPrefix);\n            Path targetFilePath = targetDirectoryPath.resolve(\"file\");\n\n            DownloaderInputManifestDto downloaderInputManifestDto = new DownloaderInputManifestDto();\n            BusinessObjectData businessObjectData = new BusinessObjectData();\n            StorageUnit storageUnit = new StorageUnit(new Storage(storageName, null, null), null, null, StorageUnitStatusEntity.ENABLED, null, null, null);\n            S3KeyPrefixInformation s3KeyPrefixInformation = new S3KeyPrefixInformation();\n            s3KeyPrefixInformation.setS3KeyPrefix(s3KeyPrefix);\n\n            /*\n             * Mock operations on mocked dependencies\n             */\n            when(mockDownloaderManifestReader.readJsonManifest(any())).thenReturn(downloaderInputManifestDto);\n            when(mockDownloaderWebClient.getBusinessObjectData(any())).thenReturn(businessObjectData);\n            when(mockBusinessObjectDataHelper.getStorageUnitByStorageName(any(), any())).thenReturn(storageUnit);\n            when(mockDownloaderWebClient.getS3KeyPrefix(any())).thenReturn(s3KeyPrefixInformation);\n            when(mockS3Service.downloadDirectory(any())).then(new Answer<S3FileTransferResultsDto>()\n            {\n                @Override\n                public S3FileTransferResultsDto answer(InvocationOnMock invocation) throws Throwable\n                {\n                    Files.createFile(targetFilePath);\n                    return null;\n                }\n            });\n\n            /*\n             * Make the call to the method under test\n             */\n            RegServerAccessParamsDto regServerAccessParamsDto = null;\n            File manifestPath = null;\n            S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto = new S3FileTransferRequestParamsDto();\n            s3FileTransferRequestParamsDto.setLocalPath(localPath.toString());\n            s3FileTransferRequestParamsDto.setMaxThreads(1);\n\n            downloaderController.performDownload(regServerAccessParamsDto, manifestPath, s3FileTransferRequestParamsDto);\n\n            // Assert that the proper delegate method is called with the expected params to retrieve credentials\n            verify(mockDownloaderManifestReader).readJsonManifest(manifestPath);\n            verify(mockDownloaderWebClient).getBusinessObjectData(downloaderInputManifestDto);\n            verify(mockBusinessObjectDataHelper).getStorageUnitByStorageName(businessObjectData, storageName);\n            verify(mockDownloaderWebClient).getS3KeyPrefix(businessObjectData);\n            verify(mockS3Service).downloadDirectory(s3FileTransferRequestParamsDto);\n        }\n        finally\n        {\n            setLogLevel(DownloaderController.class, originalLevel);\n            removeLoggingAppender(appenderName);\n\n            /*\n             * Restore mocked dependencies to their original implementation\n             */\n            ReflectionTestUtils.setField(downloaderController, \"downloaderWebClient\", originalDownloaderWebClient);\n            ReflectionTestUtils.setField(downloaderController, \"manifestReader\", originalDownloaderManifestReader);\n            ReflectionTestUtils.setField(downloaderController, \"businessObjectDataHelper\", originalBusinessObjectDataHelper);\n            ReflectionTestUtils.setField(downloaderController, \"s3Service\", originalS3Service);\n            ReflectionTestUtils.setField(downloaderController, \"storageFileHelper\", originalStorageFileHelper);\n            ReflectionTestUtils.setField(downloaderController, \"storageHelper\", originalStorageHelper);\n\n            // Clean up any temporary files\n            FileUtils.deleteDirectory(localPath.toFile());\n        }\n    }", "signature": "void testLogLocalDirectoryContents()", "full_signature": "@Test public void testLogLocalDirectoryContents()", "class_method_signature": "DownloaderControllerTest.testLogLocalDirectoryContents()", "testcase": true, "constructor": false, "invocations": ["addLoggingWriterAppender", "getLogLevel", "setLogLevel", "mock", "getField", "setField", "mock", "getField", "setField", "mock", "getField", "setField", "mock", "getField", "setField", "mock", "getField", "setField", "mock", "getField", "setField", "createTempDirectory", "resolve", "resolve", "setS3KeyPrefix", "thenReturn", "when", "readJsonManifest", "any", "thenReturn", "when", "getBusinessObjectData", "any", "thenReturn", "when", "getStorageUnitByStorageName", "any", "any", "thenReturn", "when", "getS3KeyPrefix", "any", "then", "when", "downloadDirectory", "any", "createFile", "setLocalPath", "toString", "setMaxThreads", "performDownload", "readJsonManifest", "verify", "getBusinessObjectData", "verify", "getStorageUnitByStorageName", "verify", "getS3KeyPrefix", "verify", "downloadDirectory", "verify", "setLogLevel", "removeLoggingAppender", "setField", "setField", "setField", "setField", "setField", "setField", "deleteDirectory", "toFile"]}, "focal_class": {"identifier": "DownloaderController", "superclass": "extends DataBridgeController", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DownloaderController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DownloaderController.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private DownloaderManifestReader manifestReader;", "modifier": "@Autowired\n    private", "type": "DownloaderManifestReader", "declarator": "manifestReader", "var_name": "manifestReader"}, {"original_string": "@Autowired\n    private DownloaderManifestWriter manifestWriter;", "modifier": "@Autowired\n    private", "type": "DownloaderManifestWriter", "declarator": "manifestWriter", "var_name": "manifestWriter"}, {"original_string": "@Autowired\n    private DownloaderWebClient downloaderWebClient;", "modifier": "@Autowired\n    private", "type": "DownloaderWebClient", "declarator": "downloaderWebClient", "var_name": "downloaderWebClient"}, {"original_string": "@Autowired\n    private StorageFileHelper storageFileHelper;", "modifier": "@Autowired\n    private", "type": "StorageFileHelper", "declarator": "storageFileHelper", "var_name": "storageFileHelper"}, {"original_string": "@Autowired\n    private StorageHelper storageHelper;", "modifier": "@Autowired\n    private", "type": "StorageHelper", "declarator": "storageHelper", "var_name": "storageHelper"}, {"original_string": "private static final String OUTPUT_MANIFEST_FILE_NAME = \"manifest.json\";", "modifier": "private static final", "type": "String", "declarator": "OUTPUT_MANIFEST_FILE_NAME = \"manifest.json\"", "var_name": "OUTPUT_MANIFEST_FILE_NAME"}], "methods": [{"identifier": "performDownload", "parameters": "(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath,\n        S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto)", "modifiers": "@SuppressFBWarnings(value = {\"BC_UNCONFIRMED_CAST_OF_RETURN_VALUE\", \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\"}, justification = \"manifestReader.readJsonManifest will always return an DownloaderInputManifestDto object. targetLocalDirectory.list().length will not\" + \" return a NullPointerException.\") public", "return": "void", "signature": "void performDownload(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath,\n        S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto)", "full_signature": "@SuppressFBWarnings(value = {\"BC_UNCONFIRMED_CAST_OF_RETURN_VALUE\", \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\"}, justification = \"manifestReader.readJsonManifest will always return an DownloaderInputManifestDto object. targetLocalDirectory.list().length will not\" + \" return a NullPointerException.\") public void performDownload(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath,\n        S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto)", "class_method_signature": "DownloaderController.performDownload(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath,\n        S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto)", "testcase": false, "constructor": false}, {"identifier": "logLocalDirectoryContents", "parameters": "(File directory)", "modifiers": "private", "return": "void", "signature": "void logLocalDirectoryContents(File directory)", "full_signature": "private void logLocalDirectoryContents(File directory)", "class_method_signature": "DownloaderController.logLocalDirectoryContents(File directory)", "testcase": false, "constructor": false}, {"identifier": "createDownloaderOutputManifestDto", "parameters": "(BusinessObjectData businessObjectData, StorageUnit storageUnit, String s3KeyPrefix)", "modifiers": "protected", "return": "DownloaderOutputManifestDto", "signature": "DownloaderOutputManifestDto createDownloaderOutputManifestDto(BusinessObjectData businessObjectData, StorageUnit storageUnit, String s3KeyPrefix)", "full_signature": "protected DownloaderOutputManifestDto createDownloaderOutputManifestDto(BusinessObjectData businessObjectData, StorageUnit storageUnit, String s3KeyPrefix)", "class_method_signature": "DownloaderController.createDownloaderOutputManifestDto(BusinessObjectData businessObjectData, StorageUnit storageUnit, String s3KeyPrefix)", "testcase": false, "constructor": false}], "file": "herd-code/herd-tools/herd-downloader/src/main/java/org/finra/herd/tools/downloader/DownloaderController.java"}, "focal_method": {"identifier": "logLocalDirectoryContents", "parameters": "(File directory)", "modifiers": "private", "return": "void", "body": "private void logLocalDirectoryContents(File directory)\n    {\n        Collection<File> files = HerdFileUtils.listFiles(directory, TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE);\n        LOGGER.info(String.format(\"Found %d files in \\\"%s\\\" target local directory:\", files.size(), directory.getPath()));\n\n        for (File file : files)\n        {\n            LOGGER.info(String.format(\"    %s\", file.getPath()));\n        }\n    }", "signature": "void logLocalDirectoryContents(File directory)", "full_signature": "private void logLocalDirectoryContents(File directory)", "class_method_signature": "DownloaderController.logLocalDirectoryContents(File directory)", "testcase": false, "constructor": false, "invocations": ["listFiles", "info", "format", "size", "getPath", "info", "format", "getPath"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}