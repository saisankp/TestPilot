{"test_class": {"identifier": "ParallelIndividualCompleterTest", "superclass": "", "interfaces": "", "fields": [], "file": "opt4j-core/src/test/java/org/opt4j/core/common/completer/ParallelIndividualCompleterTest.java"}, "test_case": {"identifier": "optimizationStopped", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void optimizationStopped() {\n\t\tIndividualCompleterModule module = new IndividualCompleterModule();\n\t\tmodule.setThreads(4);\n\t\tmodule.setType(Type.PARALLEL);\n\t\tInjector injector = Guice.createInjector(new MockProblemModule(), module);\n\n\t\tParallelIndividualCompleter completer = injector.getInstance(ParallelIndividualCompleter.class);\n\n\t\tcompleter.optimizationStopped(null);\n\t\tAssert.assertTrue(completer.executor.isShutdown());\n\t\tAssert.assertTrue(completer.executor.isShutdown());\n\t}", "signature": "void optimizationStopped()", "full_signature": "@Test public void optimizationStopped()", "class_method_signature": "ParallelIndividualCompleterTest.optimizationStopped()", "testcase": true, "constructor": false, "invocations": ["setThreads", "setType", "createInjector", "getInstance", "optimizationStopped", "assertTrue", "isShutdown", "assertTrue", "isShutdown"]}, "focal_class": {"identifier": "ParallelIndividualCompleter", "superclass": "extends SequentialIndividualCompleter", "interfaces": "implements OptimizerStateListener", "fields": [{"original_string": "protected final ExecutorService executor;", "modifier": "protected final", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}], "methods": [{"identifier": "ParallelIndividualCompleter", "parameters": "(Control control, Decoder<Genotype, Object> decoder, Evaluator<Object> evaluator,\n\t\t\t@Constant(value = \"maxThreads\", namespace = ParallelIndividualCompleter.class) int maxThreads)", "modifiers": "@Inject public", "return": "", "signature": " ParallelIndividualCompleter(Control control, Decoder<Genotype, Object> decoder, Evaluator<Object> evaluator,\n\t\t\t@Constant(value = \"maxThreads\", namespace = ParallelIndividualCompleter.class) int maxThreads)", "full_signature": "@Inject public  ParallelIndividualCompleter(Control control, Decoder<Genotype, Object> decoder, Evaluator<Object> evaluator,\n\t\t\t@Constant(value = \"maxThreads\", namespace = ParallelIndividualCompleter.class) int maxThreads)", "class_method_signature": "ParallelIndividualCompleter.ParallelIndividualCompleter(Control control, Decoder<Genotype, Object> decoder, Evaluator<Object> evaluator,\n\t\t\t@Constant(value = \"maxThreads\", namespace = ParallelIndividualCompleter.class) int maxThreads)", "testcase": false, "constructor": true}, {"identifier": "complete", "parameters": "(Iterable<? extends Individual> iterable)", "modifiers": "@Override public", "return": "void", "signature": "void complete(Iterable<? extends Individual> iterable)", "full_signature": "@Override public void complete(Iterable<? extends Individual> iterable)", "class_method_signature": "ParallelIndividualCompleter.complete(Iterable<? extends Individual> iterable)", "testcase": false, "constructor": false}, {"identifier": "finalize", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void finalize()", "full_signature": "@Override protected void finalize()", "class_method_signature": "ParallelIndividualCompleter.finalize()", "testcase": false, "constructor": false}, {"identifier": "shutdownExecutorService", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void shutdownExecutorService()", "full_signature": "protected synchronized void shutdownExecutorService()", "class_method_signature": "ParallelIndividualCompleter.shutdownExecutorService()", "testcase": false, "constructor": false}, {"identifier": "optimizationStarted", "parameters": "(Optimizer optimizer)", "modifiers": "@Override public", "return": "void", "signature": "void optimizationStarted(Optimizer optimizer)", "full_signature": "@Override public void optimizationStarted(Optimizer optimizer)", "class_method_signature": "ParallelIndividualCompleter.optimizationStarted(Optimizer optimizer)", "testcase": false, "constructor": false}, {"identifier": "optimizationStopped", "parameters": "(Optimizer optimizer)", "modifiers": "@Override public", "return": "void", "signature": "void optimizationStopped(Optimizer optimizer)", "full_signature": "@Override public void optimizationStopped(Optimizer optimizer)", "class_method_signature": "ParallelIndividualCompleter.optimizationStopped(Optimizer optimizer)", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/common/completer/ParallelIndividualCompleter.java"}, "focal_method": {"identifier": "optimizationStopped", "parameters": "(Optimizer optimizer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void optimizationStopped(Optimizer optimizer) {\n\t\tshutdownExecutorService();\n\t}", "signature": "void optimizationStopped(Optimizer optimizer)", "full_signature": "@Override public void optimizationStopped(Optimizer optimizer)", "class_method_signature": "ParallelIndividualCompleter.optimizationStopped(Optimizer optimizer)", "testcase": false, "constructor": false, "invocations": ["shutdownExecutorService"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}