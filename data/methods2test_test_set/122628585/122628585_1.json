{"test_class": {"identifier": "PolyBaseTest", "superclass": "", "interfaces": "", "fields": [], "file": "fuzzm/fuzzm/src/main/java/fuzzm/poly/PolyBaseTest.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAdd() {\n\t\t//VariableID constant = new VariableID(\"\",0);\t\n\t\tVariableID y = VariableID.principleAlloc(\"Y\", NamedType.REAL,BigFraction.ONE);\n\t\tVariableID x = VariableID.principleAlloc(\"X\",NamedType.REAL,BigFraction.ZERO);\n\t\t//VariableID z = VariableID.preAlloc(\"Z\",NamedType.REAL,BigFraction.ZERO);\n\t\t\n//\t\tSystem.out.println(x.level);\n//\t\tSystem.out.println(y.level);\n//\t\tSystem.out.println(z.level);\n\t\t\n\t\tMap<VariableID,BigFraction> coefs = new HashMap<VariableID,BigFraction>();\n\t\t//coefs.put(constant, BigFraction.ONE);\n\t\tcoefs.put(x, BigFraction.valueOf(BigDecimal.valueOf(2)));\n\t\tPolyBase poly1 = new PolyBase(coefs,BigFraction.ONE);\t\n\t\tSystem.out.println(\"poly1: \" + poly1);\n\t\t\n\t\tMap<VariableID,BigFraction> coefs2 = new HashMap<VariableID,BigFraction>();\n\t\t//coefs2.put(constant, BigFraction.valueOf(BigDecimal.valueOf(40)));\n\t\tcoefs2.put(x, BigFraction.valueOf(BigDecimal.valueOf(5)));\n\t\tcoefs2.put(y, BigFraction.valueOf(BigDecimal.valueOf(4)));\n\t\t\n\t\tPolyBase poly2 = new PolyBase(coefs2,BigFraction.valueOf(BigDecimal.valueOf(40)));\n\t\tSystem.out.println(\"poly2: \" + poly2);\n\t\t\n\t\tAbstractPoly polyadd = poly1.add(poly2);\n\t\tSystem.out.println(\"poly1 + poly2: \" + polyadd);\n\t\t\n\t\tAbstractPoly polyaddsub = polyadd.subtract(poly2);\n\t\tSystem.out.println(\"poly1 + poly2 - poly2: \" + polyaddsub);\n\t\t\n\t\tAbstractPoly polysub = poly1.subtract(poly1);\n\t\tSystem.out.println(\"poly1 - poly1: \" + polysub);\n\t\t\n\t\tAbstractPoly polyaddneg = poly1.add(poly1.negate());\n\t\tSystem.out.println(\"poly1 + (-poly1): \" + polyaddneg);\n\t\t\n\t\tSystem.out.println(\"poly2 * 3: \" + poly2.multiply(BigFraction.valueOf(BigDecimal.valueOf(3))));\n\t\t\n\t\tPolyBase emptyPoly = new PolyBase();\n\t\t\n\t\tMap<VariableID,BigFraction> zerocoefs = new HashMap<VariableID,BigFraction>();\n\t\t//zerocoefs.put(constant, BigFraction.ZERO);\n\t\tPolyBase constZeroPoly = new PolyBase(zerocoefs,BigFraction.ZERO);\n\t\t\n\t\tMap<VariableID,BigFraction> constFourCoef = new HashMap<VariableID,BigFraction>();\n\t\t//constFourCoef.put(constant, BigFraction.valueOf(BigDecimal.valueOf(4)));\n\t\tPolyBase constFourPoly = new PolyBase(constFourCoef,BigFraction.valueOf(BigDecimal.valueOf(4)));\n\t\t\n\t\tMap<VariableID,BigFraction> negHalfCoef = new HashMap<VariableID,BigFraction>();\n\t\tBigFraction negHalf = new BigFraction(BigInteger.valueOf(-1),BigInteger.valueOf(2));\n\t\t//negHalfCoef.put(constant, negHalf);\n\t\tPolyBase constNegHalfPoly = new PolyBase(negHalfCoef,negHalf);\n\t\t\n\t\tSystem.out.println(\"poly1 - constFour: \" + poly1.subtract(constFourPoly));\n\t\t\n\t\tSystem.out.println(\"poly1 solved for x: \" + poly1.solveFor(x));\n\t\tSystem.out.println(\"poly2 solved for x: \" + poly2.solveFor(x));\n\t\tSystem.out.println(\"poly2 solved for y: \" + poly2.solveFor(y));\n\t\tSystem.out.println(\"(poly1 - constFour) solved for x: \" + poly1.subtract(constFourPoly).solveFor(x));\n\t\t\n\t\t\n\t\tSystem.out.println(\"evaluate poly1(x is ZERO by default): \" + poly1.evaluateCEX());\n\t\t\n\t\tMap<VariableID,BigFraction> coefsCex1 = new HashMap<VariableID,BigFraction>();\n\t\tcoefsCex1.put(y, BigFraction.valueOf(BigDecimal.valueOf(2)));\n\t\tPolyBase poly1Cex1 = new PolyBase(coefsCex1,BigFraction.ONE);\n\t\t\n\t\tSystem.out.println(\"evaluate poly1Cex1: \" + poly1Cex1.evaluateCEX());\n\t\t\n\t\tx.setCex(new BigFraction(BigInteger.valueOf(2)));\n\t\tSystem.out.println(\"evaluate poly2: \" + poly2.evaluateCEX());\n\t\t//System.out.println(constZeroPoly);\n\t\t//System.out.println(emptyPoly);\n\t\t\n\t\tassertEquals(poly1,polyaddsub);\n\t\tassertEquals(emptyPoly,polysub);\n\t\tassertEquals(emptyPoly,polyaddneg);\n\t\tassertEquals(emptyPoly,constZeroPoly);\n\t\tassertEquals(constNegHalfPoly, poly1.solveFor(x));\n\t\t\n\t\t\n\t}", "signature": "void testAdd()", "full_signature": "@Test public void testAdd()", "class_method_signature": "PolyBaseTest.testAdd()", "testcase": true, "constructor": false, "invocations": ["principleAlloc", "principleAlloc", "put", "valueOf", "valueOf", "println", "put", "valueOf", "valueOf", "put", "valueOf", "valueOf", "valueOf", "valueOf", "println", "add", "println", "subtract", "println", "subtract", "println", "add", "negate", "println", "println", "multiply", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "println", "subtract", "println", "solveFor", "println", "solveFor", "println", "solveFor", "println", "solveFor", "subtract", "println", "evaluateCEX", "put", "valueOf", "valueOf", "println", "evaluateCEX", "setCex", "valueOf", "println", "evaluateCEX", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "solveFor"]}, "focal_class": {"identifier": "PolyBase", "superclass": "extends AbstractPoly", "interfaces": "", "fields": [{"original_string": "Map<VariableID,BigFraction> coefficients;", "modifier": "", "type": "Map<VariableID,BigFraction>", "declarator": "coefficients", "var_name": "coefficients"}, {"original_string": "BigFraction constant = BigFraction.ZERO;", "modifier": "", "type": "BigFraction", "declarator": "constant = BigFraction.ZERO", "var_name": "constant"}], "methods": [{"identifier": "PolyBase", "parameters": "()", "modifiers": "public", "return": "", "signature": " PolyBase()", "full_signature": "public  PolyBase()", "class_method_signature": "PolyBase.PolyBase()", "testcase": false, "constructor": true}, {"identifier": "PolyBase", "parameters": "(VariableID x)", "modifiers": "public", "return": "", "signature": " PolyBase(VariableID x)", "full_signature": "public  PolyBase(VariableID x)", "class_method_signature": "PolyBase.PolyBase(VariableID x)", "testcase": false, "constructor": true}, {"identifier": "PolyBase", "parameters": "(BigFraction constant)", "modifiers": "public", "return": "", "signature": " PolyBase(BigFraction constant)", "full_signature": "public  PolyBase(BigFraction constant)", "class_method_signature": "PolyBase.PolyBase(BigFraction constant)", "testcase": false, "constructor": true}, {"identifier": "PolyBase", "parameters": "(BigFraction coeff, VariableID x)", "modifiers": "public", "return": "", "signature": " PolyBase(BigFraction coeff, VariableID x)", "full_signature": "public  PolyBase(BigFraction coeff, VariableID x)", "class_method_signature": "PolyBase.PolyBase(BigFraction coeff, VariableID x)", "testcase": false, "constructor": true}, {"identifier": "PolyBase", "parameters": "(Map<VariableID,BigFraction> coefficientsIn)", "modifiers": "public", "return": "", "signature": " PolyBase(Map<VariableID,BigFraction> coefficientsIn)", "full_signature": "public  PolyBase(Map<VariableID,BigFraction> coefficientsIn)", "class_method_signature": "PolyBase.PolyBase(Map<VariableID,BigFraction> coefficientsIn)", "testcase": false, "constructor": true}, {"identifier": "PolyBase", "parameters": "(Map<VariableID,BigFraction> coefficientsIn, BigFraction constant)", "modifiers": "public", "return": "", "signature": " PolyBase(Map<VariableID,BigFraction> coefficientsIn, BigFraction constant)", "full_signature": "public  PolyBase(Map<VariableID,BigFraction> coefficientsIn, BigFraction constant)", "class_method_signature": "PolyBase.PolyBase(Map<VariableID,BigFraction> coefficientsIn, BigFraction constant)", "testcase": false, "constructor": true}, {"identifier": "normalizeCoefficients", "parameters": "(Map<VariableID,BigFraction> cIn)", "modifiers": "private static", "return": "Map<VariableID,BigFraction>", "signature": "Map<VariableID,BigFraction> normalizeCoefficients(Map<VariableID,BigFraction> cIn)", "full_signature": "private static Map<VariableID,BigFraction> normalizeCoefficients(Map<VariableID,BigFraction> cIn)", "class_method_signature": "PolyBase.normalizeCoefficients(Map<VariableID,BigFraction> cIn)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<VariableID>", "signature": "Iterator<VariableID> iterator()", "full_signature": "@Override public Iterator<VariableID> iterator()", "class_method_signature": "PolyBase.iterator()", "testcase": false, "constructor": false}, {"identifier": "solveFor", "parameters": "(VariableID x)", "modifiers": "@Override public", "return": "PolyBase", "signature": "PolyBase solveFor(VariableID x)", "full_signature": "@Override public PolyBase solveFor(VariableID x)", "class_method_signature": "PolyBase.solveFor(VariableID x)", "testcase": false, "constructor": false}, {"identifier": "getCoefficient", "parameters": "(VariableID x)", "modifiers": "@Override public", "return": "BigFraction", "signature": "BigFraction getCoefficient(VariableID x)", "full_signature": "@Override public BigFraction getCoefficient(VariableID x)", "class_method_signature": "PolyBase.getCoefficient(VariableID x)", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "@Override public", "return": "PolyBase", "signature": "PolyBase negate()", "full_signature": "@Override public PolyBase negate()", "class_method_signature": "PolyBase.negate()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(AbstractPoly x)", "modifiers": "@Override public", "return": "PolyBase", "signature": "PolyBase add(AbstractPoly x)", "full_signature": "@Override public PolyBase add(AbstractPoly x)", "class_method_signature": "PolyBase.add(AbstractPoly x)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(BigFraction val)", "modifiers": "@Override public", "return": "PolyBase", "signature": "PolyBase add(BigFraction val)", "full_signature": "@Override public PolyBase add(BigFraction val)", "class_method_signature": "PolyBase.add(BigFraction val)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(AbstractPoly x)", "modifiers": "@Override public", "return": "PolyBase", "signature": "PolyBase subtract(AbstractPoly x)", "full_signature": "@Override public PolyBase subtract(AbstractPoly x)", "class_method_signature": "PolyBase.subtract(AbstractPoly x)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(BigFraction val)", "modifiers": "@Override public", "return": "PolyBase", "signature": "PolyBase subtract(BigFraction val)", "full_signature": "@Override public PolyBase subtract(BigFraction val)", "class_method_signature": "PolyBase.subtract(BigFraction val)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(BigFraction c)", "modifiers": "@Override public", "return": "PolyBase", "signature": "PolyBase multiply(BigFraction c)", "full_signature": "@Override public PolyBase multiply(BigFraction c)", "class_method_signature": "PolyBase.multiply(BigFraction c)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(BigFraction v)", "modifiers": "@Override public", "return": "PolyBase", "signature": "PolyBase divide(BigFraction v)", "full_signature": "@Override public PolyBase divide(BigFraction v)", "class_method_signature": "PolyBase.divide(BigFraction v)", "testcase": false, "constructor": false}, {"identifier": "unaryOpGen", "parameters": "(Function<BigFraction, BigFraction> f)", "modifiers": "private", "return": "PolyBase", "signature": "PolyBase unaryOpGen(Function<BigFraction, BigFraction> f)", "full_signature": "private PolyBase unaryOpGen(Function<BigFraction, BigFraction> f)", "class_method_signature": "PolyBase.unaryOpGen(Function<BigFraction, BigFraction> f)", "testcase": false, "constructor": false}, {"identifier": "binaryOpGen", "parameters": "(BiFunction<BigFraction, BigFraction, BigFraction> f, AbstractPoly x)", "modifiers": "private", "return": "PolyBase", "signature": "PolyBase binaryOpGen(BiFunction<BigFraction, BigFraction, BigFraction> f, AbstractPoly x)", "full_signature": "private PolyBase binaryOpGen(BiFunction<BigFraction, BigFraction, BigFraction> f, AbstractPoly x)", "class_method_signature": "PolyBase.binaryOpGen(BiFunction<BigFraction, BigFraction, BigFraction> f, AbstractPoly x)", "testcase": false, "constructor": false}, {"identifier": "isConstant", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConstant()", "full_signature": "@Override public boolean isConstant()", "class_method_signature": "PolyBase.isConstant()", "testcase": false, "constructor": false}, {"identifier": "getConstant", "parameters": "()", "modifiers": "@Override public", "return": "BigFraction", "signature": "BigFraction getConstant()", "full_signature": "@Override public BigFraction getConstant()", "class_method_signature": "PolyBase.getConstant()", "testcase": false, "constructor": false}, {"identifier": "leadingVariable", "parameters": "()", "modifiers": "@Override public", "return": "VariableID", "signature": "VariableID leadingVariable()", "full_signature": "@Override public VariableID leadingVariable()", "class_method_signature": "PolyBase.leadingVariable()", "testcase": false, "constructor": false}, {"identifier": "trailingVariable", "parameters": "()", "modifiers": "@Override public", "return": "VariableID", "signature": "VariableID trailingVariable()", "full_signature": "@Override public VariableID trailingVariable()", "class_method_signature": "PolyBase.trailingVariable()", "testcase": false, "constructor": false}, {"identifier": "abs", "parameters": "(BigFraction x)", "modifiers": "private static", "return": "BigFraction", "signature": "BigFraction abs(BigFraction x)", "full_signature": "private static BigFraction abs(BigFraction x)", "class_method_signature": "PolyBase.abs(BigFraction x)", "testcase": false, "constructor": false}, {"identifier": "spaceOp", "parameters": "(boolean first, BigFraction coeff, String var)", "modifiers": "private static", "return": "String", "signature": "String spaceOp(boolean first, BigFraction coeff, String var)", "full_signature": "private static String spaceOp(boolean first, BigFraction coeff, String var)", "class_method_signature": "PolyBase.spaceOp(boolean first, BigFraction coeff, String var)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PolyBase.toString()", "testcase": false, "constructor": false}, {"identifier": "cexString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String cexString()", "full_signature": "@Override public String cexString()", "class_method_signature": "PolyBase.cexString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "PolyBase.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "evaluateCEX", "parameters": "()", "modifiers": "@Override public", "return": "BigFraction", "signature": "BigFraction evaluateCEX()", "full_signature": "@Override public BigFraction evaluateCEX()", "class_method_signature": "PolyBase.evaluateCEX()", "testcase": false, "constructor": false}, {"identifier": "polyBounds", "parameters": "(Map<VariableID, RegionBounds> bounds)", "modifiers": "@Override public", "return": "RegionBounds", "signature": "RegionBounds polyBounds(Map<VariableID, RegionBounds> bounds)", "full_signature": "@Override public RegionBounds polyBounds(Map<VariableID, RegionBounds> bounds)", "class_method_signature": "PolyBase.polyBounds(Map<VariableID, RegionBounds> bounds)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Map<VariableID, BigFraction> bounds)", "modifiers": "@Override public", "return": "BigFraction", "signature": "BigFraction evaluate(Map<VariableID, BigFraction> bounds)", "full_signature": "@Override public BigFraction evaluate(Map<VariableID, BigFraction> bounds)", "class_method_signature": "PolyBase.evaluate(Map<VariableID, BigFraction> bounds)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(BigInteger d)", "modifiers": "@Override public", "return": "AbstractPoly", "signature": "AbstractPoly div(BigInteger d)", "full_signature": "@Override public AbstractPoly div(BigInteger d)", "class_method_signature": "PolyBase.div(BigInteger d)", "testcase": false, "constructor": false}, {"identifier": "divisible", "parameters": "(BigInteger d)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean divisible(BigInteger d)", "full_signature": "@Override public boolean divisible(BigInteger d)", "class_method_signature": "PolyBase.divisible(BigInteger d)", "testcase": false, "constructor": false}, {"identifier": "qpoly", "parameters": "(BigInteger Q, VariableID k, VariableID m)", "modifiers": "public static", "return": "PolyBase", "signature": "PolyBase qpoly(BigInteger Q, VariableID k, VariableID m)", "full_signature": "public static PolyBase qpoly(BigInteger Q, VariableID k, VariableID m)", "class_method_signature": "PolyBase.qpoly(BigInteger Q, VariableID k, VariableID m)", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(Map<VariableID, AbstractPoly> rw)", "modifiers": "@Override public", "return": "AbstractPoly", "signature": "AbstractPoly rewrite(Map<VariableID, AbstractPoly> rw)", "full_signature": "@Override public AbstractPoly rewrite(Map<VariableID, AbstractPoly> rw)", "class_method_signature": "PolyBase.rewrite(Map<VariableID, AbstractPoly> rw)", "testcase": false, "constructor": false}, {"identifier": "toACL2", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toACL2()", "full_signature": "@Override public String toACL2()", "class_method_signature": "PolyBase.toACL2()", "testcase": false, "constructor": false}, {"identifier": "updateVariableSet", "parameters": "(Set<VariableID> in)", "modifiers": "@Override public", "return": "Set<VariableID>", "signature": "Set<VariableID> updateVariableSet(Set<VariableID> in)", "full_signature": "@Override public Set<VariableID> updateVariableSet(Set<VariableID> in)", "class_method_signature": "PolyBase.updateVariableSet(Set<VariableID> in)", "testcase": false, "constructor": false}, {"identifier": "leastCommonDenominator", "parameters": "()", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger leastCommonDenominator()", "full_signature": "@Override public BigInteger leastCommonDenominator()", "class_method_signature": "PolyBase.leastCommonDenominator()", "testcase": false, "constructor": false}, {"identifier": "constantLCDContribution", "parameters": "()", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger constantLCDContribution()", "full_signature": "@Override public BigInteger constantLCDContribution()", "class_method_signature": "PolyBase.constantLCDContribution()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(VariableID x)", "modifiers": "@Override public", "return": "AbstractPoly", "signature": "AbstractPoly remove(VariableID x)", "full_signature": "@Override public AbstractPoly remove(VariableID x)", "class_method_signature": "PolyBase.remove(VariableID x)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(AbstractPoly arg)", "modifiers": "@Override public", "return": "BigFraction", "signature": "BigFraction dot(AbstractPoly arg)", "full_signature": "@Override public BigFraction dot(AbstractPoly arg)", "class_method_signature": "PolyBase.dot(AbstractPoly arg)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(AbstractPoly arg)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(AbstractPoly arg)", "full_signature": "@Override public int compareTo(AbstractPoly arg)", "class_method_signature": "PolyBase.compareTo(AbstractPoly arg)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(AbstractPoly x)", "modifiers": "@Override public", "return": "AbstractPoly", "signature": "AbstractPoly remove(AbstractPoly x)", "full_signature": "@Override public AbstractPoly remove(AbstractPoly x)", "class_method_signature": "PolyBase.remove(AbstractPoly x)", "testcase": false, "constructor": false}, {"identifier": "getVariables", "parameters": "()", "modifiers": "@Override public", "return": "Set<VariableID>", "signature": "Set<VariableID> getVariables()", "full_signature": "@Override public Set<VariableID> getVariables()", "class_method_signature": "PolyBase.getVariables()", "testcase": false, "constructor": false}], "file": "fuzzm/fuzzm/src/main/java/fuzzm/poly/PolyBase.java"}, "focal_method": {"identifier": "add", "parameters": "(AbstractPoly x)", "modifiers": "@Override public", "return": "PolyBase", "body": "@Override\n\tpublic PolyBase add(AbstractPoly x) {\n\t\tBiFunction<BigFraction, BigFraction, BigFraction> add = (lhs,rhs) -> lhs.add(rhs);\n\t\treturn binaryOpGen(add,x);\n\t}", "signature": "PolyBase add(AbstractPoly x)", "full_signature": "@Override public PolyBase add(AbstractPoly x)", "class_method_signature": "PolyBase.add(AbstractPoly x)", "testcase": false, "constructor": false, "invocations": ["add", "binaryOpGen"]}, "repository": {"repo_id": 122628585, "url": "https://github.com/collins-research/FuzzM", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 5406, "license": "licensed"}}