{"test_class": {"identifier": "TreeSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TreeNode<Integer> root;", "modifier": "private static", "type": "TreeNode<Integer>", "declarator": "root", "var_name": "root"}], "file": "algs/src/test/java/org/buptdavid/datastructure/tree/TreeSearchTest.java"}, "test_case": {"identifier": "inorderTraversalTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void inorderTraversalTest(){\n\t\tTreeSearch<Integer> treeSearch = new TreeSearch<Integer>();\n\t\t\n\t\tInteger value = 5;\n\t\tString expectedSearchPath = \"8->4->2->5\";\n\t\ttreeSearch.inorderTraversal(root, value);\n\t\tAssert.assertTrue(expectedSearchPath.equals(treeSearch.searchPath.toString()));\n\t\t\n\t\ttreeSearch = new TreeSearch<Integer>();\n\t\t\n\t\tvalue = 6;\n\t\texpectedSearchPath = \"8->4->2->5->1->6\";\n\t\ttreeSearch.inorderTraversal(root, value);\n\t\tAssert.assertTrue(expectedSearchPath.equals(treeSearch.searchPath.toString()));\n\t}", "signature": "void inorderTraversalTest()", "full_signature": "@Test public void inorderTraversalTest()", "class_method_signature": "TreeSearchTest.inorderTraversalTest()", "testcase": true, "constructor": false, "invocations": ["inorderTraversal", "assertTrue", "equals", "toString", "inorderTraversal", "assertTrue", "equals", "toString"]}, "focal_class": {"identifier": "TreeSearch", "superclass": "", "interfaces": "", "fields": [{"original_string": "StringBuffer searchPath = new StringBuffer();", "modifier": "", "type": "StringBuffer", "declarator": "searchPath = new StringBuffer()", "var_name": "searchPath"}, {"original_string": "private boolean isSearched = false;", "modifier": "private", "type": "boolean", "declarator": "isSearched = false", "var_name": "isSearched"}], "methods": [{"identifier": "preorderTraversal", "parameters": "(TreeNode<T> root, T data)", "modifiers": "public", "return": "void", "signature": "void preorderTraversal(TreeNode<T> root, T data)", "full_signature": "public void preorderTraversal(TreeNode<T> root, T data)", "class_method_signature": "TreeSearch.preorderTraversal(TreeNode<T> root, T data)", "testcase": false, "constructor": false}, {"identifier": "inorderTraversal", "parameters": "(TreeNode<T> root, T data)", "modifiers": "public", "return": "void", "signature": "void inorderTraversal(TreeNode<T> root, T data)", "full_signature": "public void inorderTraversal(TreeNode<T> root, T data)", "class_method_signature": "TreeSearch.inorderTraversal(TreeNode<T> root, T data)", "testcase": false, "constructor": false}, {"identifier": "postorderTraversal", "parameters": "(TreeNode<T> root, T data)", "modifiers": "public", "return": "void", "signature": "void postorderTraversal(TreeNode<T> root, T data)", "full_signature": "public void postorderTraversal(TreeNode<T> root, T data)", "class_method_signature": "TreeSearch.postorderTraversal(TreeNode<T> root, T data)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/org/buptdavid/datastructure/tree/TreeSearch.java"}, "focal_method": {"identifier": "inorderTraversal", "parameters": "(TreeNode<T> root, T data)", "modifiers": "public", "return": "void", "body": "public void inorderTraversal(TreeNode<T> root, T data){\n\t\tif(root == null){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(!isSearched)\n\t\t    inorderTraversal(root.left, data);\n\t\t\n\t\tif(!isSearched){\n\t\t\tif(!searchPath.toString().equals(\"\")){\n\t\t\t\tsearchPath.append(\"->\");\n\t\t\t}\n\t\t\tsearchPath.append(root.data);\n\t\t\tif(root.data.equals(data))\n\t\t\t\tisSearched = true;\n\t\t}\n\t\t\n\t\tif(!isSearched)\n\t\t    inorderTraversal(root.right, data);\n\t}", "signature": "void inorderTraversal(TreeNode<T> root, T data)", "full_signature": "public void inorderTraversal(TreeNode<T> root, T data)", "class_method_signature": "TreeSearch.inorderTraversal(TreeNode<T> root, T data)", "testcase": false, "constructor": false, "invocations": ["inorderTraversal", "equals", "toString", "append", "append", "equals", "inorderTraversal"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}