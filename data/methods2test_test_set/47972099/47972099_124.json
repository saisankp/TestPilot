{"test_class": {"identifier": "FieldListTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/api/common/operators/util/FieldListTest.java"}, "test_case": {"identifier": "testAddSetToList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddSetToList() {\n\t\tcheck(new FieldList().addFields(new FieldSet(1)).addFields(2), 1, 2);\n\t\tcheck(new FieldList().addFields(1).addFields(new FieldSet(2)), 1, 2);\n\t\tcheck(new FieldList().addFields(new FieldSet(2)), 2);\n\t}", "signature": "void testAddSetToList()", "full_signature": "@Test public void testAddSetToList()", "class_method_signature": "FieldListTest.testAddSetToList()", "testcase": true, "constructor": false, "invocations": ["check", "addFields", "addFields", "check", "addFields", "addFields", "check", "addFields"]}, "focal_class": {"identifier": "FieldList", "superclass": "extends FieldSet", "interfaces": "", "fields": [{"original_string": "public static final FieldList EMPTY_LIST = new FieldList();", "modifier": "public static final", "type": "FieldList", "declarator": "EMPTY_LIST = new FieldList()", "var_name": "EMPTY_LIST"}], "methods": [{"identifier": "FieldList", "parameters": "()", "modifiers": "public", "return": "", "signature": " FieldList()", "full_signature": "public  FieldList()", "class_method_signature": "FieldList.FieldList()", "testcase": false, "constructor": true}, {"identifier": "FieldList", "parameters": "(int fieldId)", "modifiers": "public", "return": "", "signature": " FieldList(int fieldId)", "full_signature": "public  FieldList(int fieldId)", "class_method_signature": "FieldList.FieldList(int fieldId)", "testcase": false, "constructor": true}, {"identifier": "FieldList", "parameters": "(Integer fieldId)", "modifiers": "public", "return": "", "signature": " FieldList(Integer fieldId)", "full_signature": "public  FieldList(Integer fieldId)", "class_method_signature": "FieldList.FieldList(Integer fieldId)", "testcase": false, "constructor": true}, {"identifier": "FieldList", "parameters": "(int... columnIndexes)", "modifiers": "public", "return": "", "signature": " FieldList(int... columnIndexes)", "full_signature": "public  FieldList(int... columnIndexes)", "class_method_signature": "FieldList.FieldList(int... columnIndexes)", "testcase": false, "constructor": true}, {"identifier": "FieldList", "parameters": "(List<Integer> fields)", "modifiers": "private", "return": "", "signature": " FieldList(List<Integer> fields)", "full_signature": "private  FieldList(List<Integer> fields)", "class_method_signature": "FieldList.FieldList(List<Integer> fields)", "testcase": false, "constructor": true}, {"identifier": "addField", "parameters": "(Integer fieldID)", "modifiers": "@Override public", "return": "FieldList", "signature": "FieldList addField(Integer fieldID)", "full_signature": "@Override public FieldList addField(Integer fieldID)", "class_method_signature": "FieldList.addField(Integer fieldID)", "testcase": false, "constructor": false}, {"identifier": "addFields", "parameters": "(int... fieldIDs)", "modifiers": "@Override public", "return": "FieldList", "signature": "FieldList addFields(int... fieldIDs)", "full_signature": "@Override public FieldList addFields(int... fieldIDs)", "class_method_signature": "FieldList.addFields(int... fieldIDs)", "testcase": false, "constructor": false}, {"identifier": "addFields", "parameters": "(FieldSet set)", "modifiers": "@Override public", "return": "FieldList", "signature": "FieldList addFields(FieldSet set)", "full_signature": "@Override public FieldList addFields(FieldSet set)", "class_method_signature": "FieldList.addFields(FieldSet set)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int pos)", "modifiers": "public", "return": "Integer", "signature": "Integer get(int pos)", "full_signature": "public Integer get(int pos)", "class_method_signature": "FieldList.get(int pos)", "testcase": false, "constructor": false}, {"identifier": "toFieldList", "parameters": "()", "modifiers": "@Override public", "return": "FieldList", "signature": "FieldList toFieldList()", "full_signature": "@Override public FieldList toFieldList()", "class_method_signature": "FieldList.toFieldList()", "testcase": false, "constructor": false}, {"identifier": "isValidSubset", "parameters": "(FieldSet set)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValidSubset(FieldSet set)", "full_signature": "@Override public boolean isValidSubset(FieldSet set)", "class_method_signature": "FieldList.isValidSubset(FieldSet set)", "testcase": false, "constructor": false}, {"identifier": "isValidSubset", "parameters": "(FieldList list)", "modifiers": "public", "return": "boolean", "signature": "boolean isValidSubset(FieldList list)", "full_signature": "public boolean isValidSubset(FieldList list)", "class_method_signature": "FieldList.isValidSubset(FieldList list)", "testcase": false, "constructor": false}, {"identifier": "isValidUnorderedPrefix", "parameters": "(FieldSet set)", "modifiers": "public", "return": "boolean", "signature": "boolean isValidUnorderedPrefix(FieldSet set)", "full_signature": "public boolean isValidUnorderedPrefix(FieldSet set)", "class_method_signature": "FieldList.isValidUnorderedPrefix(FieldSet set)", "testcase": false, "constructor": false}, {"identifier": "isExactMatch", "parameters": "(FieldList list)", "modifiers": "public", "return": "boolean", "signature": "boolean isExactMatch(FieldList list)", "full_signature": "public boolean isExactMatch(FieldList list)", "class_method_signature": "FieldList.isExactMatch(FieldList list)", "testcase": false, "constructor": false}, {"identifier": "getDescriptionPrefix", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getDescriptionPrefix()", "full_signature": "@Override protected String getDescriptionPrefix()", "class_method_signature": "FieldList.getDescriptionPrefix()", "testcase": false, "constructor": false}, {"identifier": "getDescriptionSuffix", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getDescriptionSuffix()", "full_signature": "@Override protected String getDescriptionSuffix()", "class_method_signature": "FieldList.getDescriptionSuffix()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> get()", "full_signature": "private List<Integer> get()", "class_method_signature": "FieldList.get()", "testcase": false, "constructor": false}, {"identifier": "fromInts", "parameters": "(int... ints)", "modifiers": "private static final", "return": "List<Integer>", "signature": "List<Integer> fromInts(int... ints)", "full_signature": "private static final List<Integer> fromInts(int... ints)", "class_method_signature": "FieldList.fromInts(int... ints)", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/common/operators/util/FieldList.java"}, "focal_method": {"identifier": "addFields", "parameters": "(int... fieldIDs)", "modifiers": "@Override public", "return": "FieldList", "body": "@Override\n\tpublic FieldList addFields(int... fieldIDs) {\n\t\tif (fieldIDs == null || fieldIDs.length == 0) {\n\t\t\treturn this;\n\t\t}\n\t\tif (size() == 0) {\n\t\t\treturn new FieldList(fieldIDs);\n\t\t} else {\n\t\t\tArrayList<Integer> list = new ArrayList<Integer>(size() + fieldIDs.length);\n\t\t\tlist.addAll(this.collection);\n\t\t\tfor (int i = 0; i < fieldIDs.length; i++) {\n\t\t\t\tlist.add(fieldIDs[i]);\n\t\t\t}\n\t\t\t\n\t\t\treturn new FieldList(Collections.unmodifiableList(list));\n\t\t}\n\t}", "signature": "FieldList addFields(int... fieldIDs)", "full_signature": "@Override public FieldList addFields(int... fieldIDs)", "class_method_signature": "FieldList.addFields(int... fieldIDs)", "testcase": false, "constructor": false, "invocations": ["size", "size", "addAll", "add", "unmodifiableList"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}