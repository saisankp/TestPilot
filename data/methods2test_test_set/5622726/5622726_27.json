{"test_class": {"identifier": "CleanPatternSanitizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "inputvalidation/src/test/java/com/switchfly/inputvalidation/sanitizer/CleanPatternSanitizerTest.java"}, "test_case": {"identifier": "testExecuteWithCharacterClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteWithCharacterClass() throws Exception {\n        CleanPatternSanitizer sanitizer = new CleanPatternSanitizer(\"[\\\\p{L}\\\\p{Nd}\\\\.\\\\-\\\\s#&',:\\\\/\\\\\\\\]+\");\n        assertEquals(\"P.O. Box 123\", sanitizer.execute(\"P.O. Box 123\"));\n        assertEquals(\"/P.O. Box 123\", sanitizer.execute(\"/P.O. Box 123\"));\n        assertEquals(\"\\\\P.O. Box 123\", sanitizer.execute(\"\\\\P.O. Box 123\"));\n        assertEquals(\"b50 First St/b, iFloor 7/uscriptalerthacked/script\",\n            sanitizer.execute(\"<b>50 First St</b>, <i>Floor 7</u><script>alert(hacked!);</script>\"));\n        assertEquals(\"50 First St, Floor 7\", sanitizer.execute(\"^50 First} St, ~Flo|or 7\"));\n    }", "signature": "void testExecuteWithCharacterClass()", "full_signature": "@Test public void testExecuteWithCharacterClass()", "class_method_signature": "CleanPatternSanitizerTest.testExecuteWithCharacterClass()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute"]}, "focal_class": {"identifier": "CleanPatternSanitizer", "superclass": "", "interfaces": "implements Sanitizer<String>", "fields": [{"original_string": "public static final int FLAGS = Pattern.DOTALL | Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE | Pattern.MULTILINE;", "modifier": "public static final", "type": "int", "declarator": "FLAGS = Pattern.DOTALL | Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE | Pattern.MULTILINE", "var_name": "FLAGS"}, {"original_string": "private final Pattern _pattern;", "modifier": "private final", "type": "Pattern", "declarator": "_pattern", "var_name": "_pattern"}], "methods": [{"identifier": "CleanPatternSanitizer", "parameters": "(Pattern acceptedPattern)", "modifiers": "public", "return": "", "signature": " CleanPatternSanitizer(Pattern acceptedPattern)", "full_signature": "public  CleanPatternSanitizer(Pattern acceptedPattern)", "class_method_signature": "CleanPatternSanitizer.CleanPatternSanitizer(Pattern acceptedPattern)", "testcase": false, "constructor": true}, {"identifier": "CleanPatternSanitizer", "parameters": "(String acceptedPattern)", "modifiers": "public", "return": "", "signature": " CleanPatternSanitizer(String acceptedPattern)", "full_signature": "public  CleanPatternSanitizer(String acceptedPattern)", "class_method_signature": "CleanPatternSanitizer.CleanPatternSanitizer(String acceptedPattern)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(String content)", "modifiers": "@Override public", "return": "String", "signature": "String execute(String content)", "full_signature": "@Override public String execute(String content)", "class_method_signature": "CleanPatternSanitizer.execute(String content)", "testcase": false, "constructor": false}], "file": "inputvalidation/src/main/java/com/switchfly/inputvalidation/sanitizer/CleanPatternSanitizer.java"}, "focal_method": {"identifier": "execute", "parameters": "(String content)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String execute(String content) {\n        if (StringUtils.isBlank(content)) {\n            return content;\n        }\n        Matcher matcher = _pattern.matcher(content);\n        StringBuilder builder = new StringBuilder();\n        while (matcher.find()) {\n            builder.append(matcher.group());\n        }\n        return builder.toString();\n    }", "signature": "String execute(String content)", "full_signature": "@Override public String execute(String content)", "class_method_signature": "CleanPatternSanitizer.execute(String content)", "testcase": false, "constructor": false, "invocations": ["isBlank", "matcher", "find", "append", "group", "toString"]}, "repository": {"repo_id": 5622726, "url": "https://github.com/switchfly/switchfly-java", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 752, "license": "licensed"}}