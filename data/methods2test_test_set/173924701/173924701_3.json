{"test_class": {"identifier": "SearchViewModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();", "modifier": "@Rule\n\tpublic", "type": "InstantTaskExecutorRule", "declarator": "instantTaskExecutorRule = new InstantTaskExecutorRule()", "var_name": "instantTaskExecutorRule"}, {"original_string": "@Mock\n\tSearchNewsUseCase<NewsUI> usecase;", "modifier": "@Mock", "type": "SearchNewsUseCase<NewsUI>", "declarator": "usecase", "var_name": "usecase"}, {"original_string": "@Mock\n\tPagedList<NewsUI> pagedList;", "modifier": "@Mock", "type": "PagedList<NewsUI>", "declarator": "pagedList", "var_name": "pagedList"}, {"original_string": "private SearchViewModel viewModel;", "modifier": "private", "type": "SearchViewModel", "declarator": "viewModel", "var_name": "viewModel"}, {"original_string": "private String query = \"query\";", "modifier": "private", "type": "String", "declarator": "query = \"query\"", "var_name": "query"}], "file": "presentation/src/test/java/com/ezz/presentation/viewmodel/search/SearchViewModelTest.java"}, "test_case": {"identifier": "verify_updateSearchQuery_not_called_in_first_time", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void verify_updateSearchQuery_not_called_in_first_time(){\n\t\twhen(usecase.getSearchPagedList(query)).thenReturn(Observable.just(pagedList));\n\t\tviewModel.searchFor(query);\n\t\tverify(usecase, times(0)).updateSearchQuery(query);\n\t}", "signature": "void verify_updateSearchQuery_not_called_in_first_time()", "full_signature": "@Test public void verify_updateSearchQuery_not_called_in_first_time()", "class_method_signature": "SearchViewModelTest.verify_updateSearchQuery_not_called_in_first_time()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getSearchPagedList", "just", "searchFor", "updateSearchQuery", "verify", "times"]}, "focal_class": {"identifier": "SearchViewModel", "superclass": "extends BaseViewModel", "interfaces": "", "fields": [{"original_string": "private String searchQueryState;", "modifier": "private", "type": "String", "declarator": "searchQueryState", "var_name": "searchQueryState"}, {"original_string": "private SearchNewsUseCase<NewsUI> searchNewsUseCase;", "modifier": "private", "type": "SearchNewsUseCase<NewsUI>", "declarator": "searchNewsUseCase", "var_name": "searchNewsUseCase"}, {"original_string": "private MutableLiveData<PagedList<NewsUI>> pagedListLiveData = new MutableLiveData<>();", "modifier": "private", "type": "MutableLiveData<PagedList<NewsUI>>", "declarator": "pagedListLiveData = new MutableLiveData<>()", "var_name": "pagedListLiveData"}, {"original_string": "private MutableLiveData<DataStatus> pagingDataStatus = new MutableLiveData<>();", "modifier": "private", "type": "MutableLiveData<DataStatus>", "declarator": "pagingDataStatus = new MutableLiveData<>()", "var_name": "pagingDataStatus"}], "methods": [{"identifier": "SearchViewModel", "parameters": "(@Named(value = IO_SCHEDULER) Scheduler subscribeOn, @Named(value = MAIN_THREAD_SCHEDULER) Scheduler observeOn, SearchNewsUseCase<NewsUI> searchNewsUseCase)", "modifiers": "@Inject", "return": "", "signature": " SearchViewModel(@Named(value = IO_SCHEDULER) Scheduler subscribeOn, @Named(value = MAIN_THREAD_SCHEDULER) Scheduler observeOn, SearchNewsUseCase<NewsUI> searchNewsUseCase)", "full_signature": "@Inject  SearchViewModel(@Named(value = IO_SCHEDULER) Scheduler subscribeOn, @Named(value = MAIN_THREAD_SCHEDULER) Scheduler observeOn, SearchNewsUseCase<NewsUI> searchNewsUseCase)", "class_method_signature": "SearchViewModel.SearchViewModel(@Named(value = IO_SCHEDULER) Scheduler subscribeOn, @Named(value = MAIN_THREAD_SCHEDULER) Scheduler observeOn, SearchNewsUseCase<NewsUI> searchNewsUseCase)", "testcase": false, "constructor": true}, {"identifier": "searchFor", "parameters": "(String query)", "modifiers": "public", "return": "void", "signature": "void searchFor(String query)", "full_signature": "public void searchFor(String query)", "class_method_signature": "SearchViewModel.searchFor(String query)", "testcase": false, "constructor": false}, {"identifier": "createPagedList", "parameters": "(String query)", "modifiers": "private", "return": "void", "signature": "void createPagedList(String query)", "full_signature": "private void createPagedList(String query)", "class_method_signature": "SearchViewModel.createPagedList(String query)", "testcase": false, "constructor": false}, {"identifier": "getNewsLiveData", "parameters": "()", "modifiers": "public", "return": "LiveData<PagedList<NewsUI>>", "signature": "LiveData<PagedList<NewsUI>> getNewsLiveData()", "full_signature": "public LiveData<PagedList<NewsUI>> getNewsLiveData()", "class_method_signature": "SearchViewModel.getNewsLiveData()", "testcase": false, "constructor": false}, {"identifier": "getPagingDataStatus", "parameters": "()", "modifiers": "public", "return": "MutableLiveData<DataStatus>", "signature": "MutableLiveData<DataStatus> getPagingDataStatus()", "full_signature": "public MutableLiveData<DataStatus> getPagingDataStatus()", "class_method_signature": "SearchViewModel.getPagingDataStatus()", "testcase": false, "constructor": false}, {"identifier": "getSearchQueryState", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSearchQueryState()", "full_signature": "public String getSearchQueryState()", "class_method_signature": "SearchViewModel.getSearchQueryState()", "testcase": false, "constructor": false}], "file": "presentation/src/main/java/com/ezz/presentation/viewmodel/search/SearchViewModel.java"}, "focal_method": {"identifier": "searchFor", "parameters": "(String query)", "modifiers": "public", "return": "void", "body": "public void searchFor(String query) {\n\t\tif (searchQueryState == null){\n\t\t\tcreatePagedList(query);\n\t\t}else {\n\t\t\tsearchNewsUseCase.updateSearchQuery(query);\n\t\t}\n\t\tsearchQueryState = query;\n\t}", "signature": "void searchFor(String query)", "full_signature": "public void searchFor(String query)", "class_method_signature": "SearchViewModel.searchFor(String query)", "testcase": false, "constructor": false, "invocations": ["createPagedList", "updateSearchQuery"]}, "repository": {"repo_id": 173924701, "url": "https://github.com/EzzWaleed/Journals", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 7, "size": 582, "license": "licensed"}}