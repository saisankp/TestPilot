{"test_class": {"identifier": "TestPoolUtil", "superclass": "", "interfaces": "", "fields": [], "file": "bonecp/src/test/java/com/jolbox/bonecp/TestPoolUtil.java"}, "test_case": {"identifier": "testGenerateException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGenerateException(){\n\t\tassertNotNull(PoolUtil.generateSQLException(\"foo\", new SQLException()));\n\t\tPoolUtil.sqlExceptionClass = Throwable.class;\n\t\tassertNotNull(PoolUtil.generateSQLException(\"foo\", new SQLException()));\n\t}", "signature": "void testGenerateException()", "full_signature": "@Test public void testGenerateException()", "class_method_signature": "TestPoolUtil.testGenerateException()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "generateSQLException", "assertNotNull", "generateSQLException"]}, "focal_class": {"identifier": "PoolUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static Class<Throwable> sqlExceptionClass;", "modifier": "protected static", "type": "Class<Throwable>", "declarator": "sqlExceptionClass", "var_name": "sqlExceptionClass"}, {"original_string": "private static final String exceptionClass = \"java.sql.SQLException\";", "modifier": "private static final", "type": "String", "declarator": "exceptionClass = \"java.sql.SQLException\"", "var_name": "exceptionClass"}], "methods": [{"identifier": "fillLogParams", "parameters": "(String sql, Map<Object, Object> logParams)", "modifiers": "public static", "return": "String", "signature": "String fillLogParams(String sql, Map<Object, Object> logParams)", "full_signature": "public static String fillLogParams(String sql, Map<Object, Object> logParams)", "class_method_signature": "PoolUtil.fillLogParams(String sql, Map<Object, Object> logParams)", "testcase": false, "constructor": false}, {"identifier": "safePrint", "parameters": "(Object... o)", "modifiers": "protected static", "return": "String", "signature": "String safePrint(Object... o)", "full_signature": "protected static String safePrint(Object... o)", "class_method_signature": "PoolUtil.safePrint(Object... o)", "testcase": false, "constructor": false}, {"identifier": "prettyPrint", "parameters": "(Object obj)", "modifiers": "protected static", "return": "String", "signature": "String prettyPrint(Object obj)", "full_signature": "protected static String prettyPrint(Object obj)", "class_method_signature": "PoolUtil.prettyPrint(Object obj)", "testcase": false, "constructor": false}, {"identifier": "formatLogParam", "parameters": "(Blob obj)", "modifiers": "private static", "return": "String", "signature": "String formatLogParam(Blob obj)", "full_signature": "private static String formatLogParam(Blob obj)", "class_method_signature": "PoolUtil.formatLogParam(Blob obj)", "testcase": false, "constructor": false}, {"identifier": "formatLogParam", "parameters": "(Clob obj)", "modifiers": "private static", "return": "String", "signature": "String formatLogParam(Clob obj)", "full_signature": "private static String formatLogParam(Clob obj)", "class_method_signature": "PoolUtil.formatLogParam(Clob obj)", "testcase": false, "constructor": false}, {"identifier": "formatLogParam", "parameters": "(Array obj)", "modifiers": "private static", "return": "String", "signature": "String formatLogParam(Array obj)", "full_signature": "private static String formatLogParam(Array obj)", "class_method_signature": "PoolUtil.formatLogParam(Array obj)", "testcase": false, "constructor": false}, {"identifier": "formatLogParam", "parameters": "(Ref obj)", "modifiers": "private static", "return": "String", "signature": "String formatLogParam(Ref obj)", "full_signature": "private static String formatLogParam(Ref obj)", "class_method_signature": "PoolUtil.formatLogParam(Ref obj)", "testcase": false, "constructor": false}, {"identifier": "stringifyException", "parameters": "(Throwable t)", "modifiers": "public static", "return": "String", "signature": "String stringifyException(Throwable t)", "full_signature": "public static String stringifyException(Throwable t)", "class_method_signature": "PoolUtil.stringifyException(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "generateSQLException", "parameters": "(String reason, Throwable t)", "modifiers": "public static", "return": "SQLException", "signature": "SQLException generateSQLException(String reason, Throwable t)", "full_signature": "public static SQLException generateSQLException(String reason, Throwable t)", "class_method_signature": "PoolUtil.generateSQLException(String reason, Throwable t)", "testcase": false, "constructor": false}], "file": "bonecp/src/main/java/com/jolbox/bonecp/PoolUtil.java"}, "focal_method": {"identifier": "generateSQLException", "parameters": "(String reason, Throwable t)", "modifiers": "public static", "return": "SQLException", "body": "public static SQLException generateSQLException(String reason, Throwable t) {\n\t\t// slow, but this is for very exceptional cases only\n\t\ttry {\n\t\t\t// try JDK6/7 style constructor\n\t\t\tif (sqlExceptionClass == null){ // yes there's a chance this can race but nothing bad happens except for a performance hit...\n\t\t\t\tsqlExceptionClass = (Class<Throwable>) Class.forName(exceptionClass);\n\t\t\t}\n\n\t\t\t\treturn (SQLException)sqlExceptionClass.getConstructor(String.class, Throwable.class).newInstance(reason, t);\n\t\t} catch (Exception e) {\n\t\t\t// fallback to JDK5\n\t\t\treturn new SQLException(PoolUtil.stringifyException(t));\n\t\t}\n\n\t}", "signature": "SQLException generateSQLException(String reason, Throwable t)", "full_signature": "public static SQLException generateSQLException(String reason, Throwable t)", "class_method_signature": "PoolUtil.generateSQLException(String reason, Throwable t)", "testcase": false, "constructor": false, "invocations": ["forName", "newInstance", "getConstructor", "stringifyException"]}, "repository": {"repo_id": 466142, "url": "https://github.com/wwadge/bonecp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 544, "size": 3833, "license": "licensed"}}