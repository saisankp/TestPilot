{"test_class": {"identifier": "ReflectionBodyGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ReflectionBodyGenerator reflectionBodyGenerator = new ReflectionBodyGenerator();", "modifier": "", "type": "ReflectionBodyGenerator", "declarator": "reflectionBodyGenerator = new ReflectionBodyGenerator()", "var_name": "reflectionBodyGenerator"}], "file": "janbanery-core/src/test/java/pl/project13/janbanery/encoders/ReflectionBodyGeneratorTest.java"}, "test_case": {"identifier": "testAsString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAsString() throws Exception {\n    // given\n    String title = \"Title\";\n    String taskTypeName = \"Bug\";\n    Task task = new Task(title, taskTypeName);\n\n    // when\n    String encodedString = reflectionBodyGenerator.asString(task);\n\n    // then\n    // (order of this items may vary, that's why contains() and not isEqualTo())\n    assertThat(encodedString).contains(\"task[title]=Title\");\n    assertThat(encodedString).contains(\"&\");\n    assertThat(encodedString).contains(\"task[task_type_name]=Bug\");\n  }", "signature": "void testAsString()", "full_signature": "@Test public void testAsString()", "class_method_signature": "ReflectionBodyGeneratorTest.testAsString()", "testcase": true, "constructor": false, "invocations": ["asString", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat"]}, "focal_class": {"identifier": "ReflectionBodyGenerator", "superclass": "", "interfaces": "implements FormUrlEncodedBodyGenerator", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}], "methods": [{"identifier": "ReflectionBodyGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReflectionBodyGenerator()", "full_signature": "public  ReflectionBodyGenerator()", "class_method_signature": "ReflectionBodyGenerator.ReflectionBodyGenerator()", "testcase": false, "constructor": true}, {"identifier": "asString", "parameters": "(T entity)", "modifiers": "@Override public", "return": "String", "signature": "String asString(T entity)", "full_signature": "@Override public String asString(T entity)", "class_method_signature": "ReflectionBodyGenerator.asString(T entity)", "testcase": false, "constructor": false}, {"identifier": "getAllFields", "parameters": "(T entity)", "modifiers": "private", "return": "Collection<Field>", "signature": "Collection<Field> getAllFields(T entity)", "full_signature": "private Collection<Field> getAllFields(T entity)", "class_method_signature": "ReflectionBodyGenerator.getAllFields(T entity)", "testcase": false, "constructor": false}, {"identifier": "joinDataParts", "parameters": "(Collection<String> formData)", "modifiers": "@VisibleForTesting", "return": "String", "signature": "String joinDataParts(Collection<String> formData)", "full_signature": "@VisibleForTesting String joinDataParts(Collection<String> formData)", "class_method_signature": "ReflectionBodyGenerator.joinDataParts(Collection<String> formData)", "testcase": false, "constructor": false}], "file": "janbanery-core/src/main/java/pl/project13/janbanery/encoders/ReflectionBodyGenerator.java"}, "focal_method": {"identifier": "asString", "parameters": "(T entity)", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public <T extends KanbaneryResource> String asString(T entity) {\n    String resourceId = entity.getResourceId();\n    log.info(\"Preparing form encoded data for: {}\", resourceId);\n\n    Collection<Field> fields = getAllFields(entity);\n    log.info(\"{} has {} fields in total.\", resourceId, fields.size());\n\n    Collection<Field> fieldsToBeSet = filter(fields, new SettableNotNullFieldsPredicate<T>(entity));\n    log.info(\"{} has {} fields to be set (not null and @Settable)\", resourceId, fieldsToBeSet.size());\n\n    Collection<String> fieldsWithValues = transform(fieldsToBeSet, new FieldNameToArrayNotationWithValueFunction<T>(entity));\n    log.info(\"Prepared array notation of data for {}\", resourceId);\n\n    return joinDataParts(fieldsWithValues);\n  }", "signature": "String asString(T entity)", "full_signature": "@Override public String asString(T entity)", "class_method_signature": "ReflectionBodyGenerator.asString(T entity)", "testcase": false, "constructor": false, "invocations": ["getResourceId", "info", "getAllFields", "info", "size", "filter", "info", "size", "transform", "info", "joinDataParts"]}, "repository": {"repo_id": 1641128, "url": "https://github.com/ktoso/janbanery", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 2250, "license": "licensed"}}