{"test_class": {"identifier": "ImportAttributeModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int ATTRIBUTES_SIZE = 4;", "modifier": "private static final", "type": "int", "declarator": "ATTRIBUTES_SIZE = 4", "var_name": "ATTRIBUTES_SIZE"}, {"original_string": "private ImportAttributeModel model;", "modifier": "private", "type": "ImportAttributeModel", "declarator": "model", "var_name": "model"}], "file": "tiles-template/src/test/java/org/apache/tiles/template/ImportAttributeModelTest.java"}, "test_case": {"identifier": "testExecuteAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteAll() {\n        TilesContainer container = createMock(TilesContainer.class);\n        Request request = createMock(Request.class);\n        AttributeContext attributeContext = createMock(AttributeContext.class);\n        Attribute attribute1 = new Attribute(\"myValue1\");\n        Attribute attribute2 = new Attribute(\"myValue2\");\n        Attribute attribute3 = new Attribute(\"myValue3\");\n        Set<String> cascadedNames = new HashSet<String>();\n        cascadedNames.add(\"myName1\");\n        cascadedNames.add(\"myName2\");\n        Set<String> localNames = new HashSet<String>();\n        localNames.add(\"myName1\");\n        localNames.add(\"myName3\");\n        ApplicationContext applicationContext = createMock(ApplicationContext.class);\n        Map<String, Object> requestScope = new HashMap<String, Object>();\n        requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\n\n        expect(request.getApplicationContext()).andReturn(applicationContext);\n        expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\n        expect(container.getAttributeContext(request)).andReturn(attributeContext);\n        expect(attributeContext.getCascadedAttributeNames()).andReturn(cascadedNames);\n        expect(attributeContext.getLocalAttributeNames()).andReturn(localNames);\n        expect(attributeContext.getAttribute(\"myName1\")).andReturn(attribute1).times(2);\n        expect(attributeContext.getAttribute(\"myName2\")).andReturn(attribute2);\n        expect(attributeContext.getAttribute(\"myName3\")).andReturn(attribute3);\n        expect(container.evaluate(attribute1, request)).andReturn(\"myEvaluatedValue1\").times(2);\n        expect(container.evaluate(attribute2, request)).andReturn(\"myEvaluatedValue2\");\n        expect(container.evaluate(attribute3, request)).andReturn(\"myEvaluatedValue3\");\n\n        replay(container, attributeContext, request, applicationContext);\n        model.execute(null, \"request\", null, false, request);\n        Map<String, Object> attributes = requestScope;\n        assertEquals(ATTRIBUTES_SIZE, attributes.size());\n        assertEquals(\"myEvaluatedValue1\", attributes.get(\"myName1\"));\n        assertEquals(\"myEvaluatedValue2\", attributes.get(\"myName2\"));\n        assertEquals(\"myEvaluatedValue3\", attributes.get(\"myName3\"));\n        verify(container, attributeContext, request, applicationContext);\n    }", "signature": "void testExecuteAll()", "full_signature": "@Test public void testExecuteAll()", "class_method_signature": "ImportAttributeModelTest.testExecuteAll()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "add", "add", "add", "add", "createMock", "put", "andReturn", "expect", "getApplicationContext", "anyTimes", "andReturn", "expect", "getContext", "andReturn", "expect", "getAttributeContext", "andReturn", "expect", "getCascadedAttributeNames", "andReturn", "expect", "getLocalAttributeNames", "times", "andReturn", "expect", "getAttribute", "andReturn", "expect", "getAttribute", "andReturn", "expect", "getAttribute", "times", "andReturn", "expect", "evaluate", "andReturn", "expect", "evaluate", "andReturn", "expect", "evaluate", "replay", "execute", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "verify"]}, "focal_class": {"identifier": "ImportAttributeModel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}], "methods": [{"identifier": "execute", "parameters": "(String name, String scope, String toName, boolean ignore, Request request)", "modifiers": "public", "return": "void", "signature": "void execute(String name, String scope, String toName, boolean ignore, Request request)", "full_signature": "public void execute(String name, String scope, String toName, boolean ignore, Request request)", "class_method_signature": "ImportAttributeModel.execute(String name, String scope, String toName, boolean ignore, Request request)", "testcase": false, "constructor": false}, {"identifier": "getImportedAttributes", "parameters": "(String name,\n            String toName, boolean ignore, Request request)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getImportedAttributes(String name,\n            String toName, boolean ignore, Request request)", "full_signature": "private Map<String, Object> getImportedAttributes(String name,\n            String toName, boolean ignore, Request request)", "class_method_signature": "ImportAttributeModel.getImportedAttributes(String name,\n            String toName, boolean ignore, Request request)", "testcase": false, "constructor": false}, {"identifier": "importSingleAttribute", "parameters": "(TilesContainer container,\n            AttributeContext attributeContext, String name, String toName,\n            boolean ignore, Map<String, Object> attributes,\n            Request request)", "modifiers": "private", "return": "void", "signature": "void importSingleAttribute(TilesContainer container,\n            AttributeContext attributeContext, String name, String toName,\n            boolean ignore, Map<String, Object> attributes,\n            Request request)", "full_signature": "private void importSingleAttribute(TilesContainer container,\n            AttributeContext attributeContext, String name, String toName,\n            boolean ignore, Map<String, Object> attributes,\n            Request request)", "class_method_signature": "ImportAttributeModel.importSingleAttribute(TilesContainer container,\n            AttributeContext attributeContext, String name, String toName,\n            boolean ignore, Map<String, Object> attributes,\n            Request request)", "testcase": false, "constructor": false}, {"identifier": "importAttributes", "parameters": "(Collection<String> names,\n            TilesContainer container, AttributeContext attributeContext,\n            Map<String, Object> attributes, boolean ignore,\n            Request request)", "modifiers": "private", "return": "void", "signature": "void importAttributes(Collection<String> names,\n            TilesContainer container, AttributeContext attributeContext,\n            Map<String, Object> attributes, boolean ignore,\n            Request request)", "full_signature": "private void importAttributes(Collection<String> names,\n            TilesContainer container, AttributeContext attributeContext,\n            Map<String, Object> attributes, boolean ignore,\n            Request request)", "class_method_signature": "ImportAttributeModel.importAttributes(Collection<String> names,\n            TilesContainer container, AttributeContext attributeContext,\n            Map<String, Object> attributes, boolean ignore,\n            Request request)", "testcase": false, "constructor": false}], "file": "tiles-template/src/main/java/org/apache/tiles/template/ImportAttributeModel.java"}, "focal_method": {"identifier": "execute", "parameters": "(String name, String scope, String toName, boolean ignore, Request request)", "modifiers": "public", "return": "void", "body": "public void execute(String name, String scope, String toName, boolean ignore, Request request) {\n        Map<String, Object> attributes = getImportedAttributes(\n                name, toName, ignore, request);\n        if (scope == null) {\n            scope = request.getAvailableScopes().get(0);\n        }\n        request.getContext(scope).putAll(attributes);\n    }", "signature": "void execute(String name, String scope, String toName, boolean ignore, Request request)", "full_signature": "public void execute(String name, String scope, String toName, boolean ignore, Request request)", "class_method_signature": "ImportAttributeModel.execute(String name, String scope, String toName, boolean ignore, Request request)", "testcase": false, "constructor": false, "invocations": ["getImportedAttributes", "get", "getAvailableScopes", "putAll", "getContext"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}