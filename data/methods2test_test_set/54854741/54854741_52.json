{"test_class": {"identifier": "LookAheadReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "services/src/test/java/com/greensopinion/finance/services/transaction/LookAheadReaderTest.java"}, "test_case": {"identifier": "peekLine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void peekLine() throws IOException {\n\t\ttry (LookAheadReader reader = new LookAheadReader(new StringReader(\"one\\rtwo\"))) {\n\t\t\tassertEquals(\"one\", reader.peekLine());\n\t\t\tassertEquals(\"one\", reader.peekLine());\n\t\t\tassertEquals(\"one\", reader.readLine());\n\t\t\tassertEquals(\"two\", reader.peekLine());\n\t\t\tassertEquals(\"two\", reader.readLine());\n\t\t\tassertEquals(null, reader.readLine());\n\t\t\tassertEquals(null, reader.readLine());\n\t\t}\n\t}", "signature": "void peekLine()", "full_signature": "@Test public void peekLine()", "class_method_signature": "LookAheadReaderTest.peekLine()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "peekLine", "assertEquals", "peekLine", "assertEquals", "readLine", "assertEquals", "peekLine", "assertEquals", "readLine", "assertEquals", "readLine", "assertEquals", "readLine"]}, "focal_class": {"identifier": "LookAheadReader", "superclass": "extends Reader", "interfaces": "", "fields": [{"original_string": "private final BufferedReader reader;", "modifier": "private final", "type": "BufferedReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private String nextLine;", "modifier": "private", "type": "String", "declarator": "nextLine", "var_name": "nextLine"}, {"original_string": "private int nextLineIndex;", "modifier": "private", "type": "int", "declarator": "nextLineIndex", "var_name": "nextLineIndex"}], "methods": [{"identifier": "LookAheadReader", "parameters": "(Reader reader)", "modifiers": "", "return": "", "signature": " LookAheadReader(Reader reader)", "full_signature": "  LookAheadReader(Reader reader)", "class_method_signature": "LookAheadReader.LookAheadReader(Reader reader)", "testcase": false, "constructor": true}, {"identifier": "readLine", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String readLine()", "full_signature": "public String readLine()", "class_method_signature": "LookAheadReader.readLine()", "testcase": false, "constructor": false}, {"identifier": "peekLine", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String peekLine()", "full_signature": "public String peekLine()", "class_method_signature": "LookAheadReader.peekLine()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "LookAheadReader.close()", "testcase": false, "constructor": false}, {"identifier": "fillNextLine", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fillNextLine()", "full_signature": "private void fillNextLine()", "class_method_signature": "LookAheadReader.fillNextLine()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(char[] cbuf, int off, int len)", "modifiers": "@Override public", "return": "int", "signature": "int read(char[] cbuf, int off, int len)", "full_signature": "@Override public int read(char[] cbuf, int off, int len)", "class_method_signature": "LookAheadReader.read(char[] cbuf, int off, int len)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/greensopinion/finance/services/transaction/LookAheadReader.java"}, "focal_method": {"identifier": "peekLine", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String peekLine() throws IOException {\n\t\tfillNextLine();\n\t\treturn nextLine;\n\t}", "signature": "String peekLine()", "full_signature": "public String peekLine()", "class_method_signature": "LookAheadReader.peekLine()", "testcase": false, "constructor": false, "invocations": ["fillNextLine"]}, "repository": {"repo_id": 54854741, "url": "https://github.com/greensopinion/greenbeans", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 30, "size": 1684, "license": "licensed"}}