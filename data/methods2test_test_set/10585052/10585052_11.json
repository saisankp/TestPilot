{"test_class": {"identifier": "IDTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ID zero = IDs.zero();", "modifier": "private final", "type": "ID", "declarator": "zero = IDs.zero()", "var_name": "zero"}, {"original_string": "private final ID one = IDs.one();", "modifier": "private final", "type": "ID", "declarator": "one = IDs.one()", "var_name": "one"}, {"original_string": "private final ID zeroZero = IDs.with(IDs.zero(), IDs.zero());", "modifier": "private final", "type": "ID", "declarator": "zeroZero = IDs.with(IDs.zero(), IDs.zero())", "var_name": "zeroZero"}, {"original_string": "private final ID zeroOne = IDs.with(IDs.zero(), IDs.one());", "modifier": "private final", "type": "ID", "declarator": "zeroOne = IDs.with(IDs.zero(), IDs.one())", "var_name": "zeroOne"}, {"original_string": "private final ID oneZero = IDs.with(IDs.one(), IDs.zero());", "modifier": "private final", "type": "ID", "declarator": "oneZero = IDs.with(IDs.one(), IDs.zero())", "var_name": "oneZero"}, {"original_string": "private final ID oneOne = IDs.with(IDs.one(), IDs.one());", "modifier": "private final", "type": "ID", "declarator": "oneOne = IDs.with(IDs.one(), IDs.one())", "var_name": "oneOne"}], "file": "itc4j-core/src/test/java/itc4j/IDTest.java"}, "test_case": {"identifier": "testSplit_ZeroOne", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSplit_ZeroOne() {\n        // split((0, i)) = ((0,i1), (0,i2)), where (i1, i2) = split(i)\n        ID[] splitOne = one.split();\n        ID[] expected = new ID[] {\n            IDs.with(zero, splitOne[0]),\n            IDs.with(zero, splitOne[1])\n        };\n        assertArrayEquals(expected, zeroOne.split());\n    }", "signature": "void testSplit_ZeroOne()", "full_signature": "@Test public void testSplit_ZeroOne()", "class_method_signature": "IDTest.testSplit_ZeroOne()", "testcase": true, "constructor": false, "invocations": ["split", "with", "with", "assertArrayEquals", "split"]}, "focal_class": {"identifier": "ID", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getLeft", "parameters": "()", "modifiers": "abstract", "return": "ID", "signature": "ID getLeft()", "full_signature": "abstract ID getLeft()", "class_method_signature": "ID.getLeft()", "testcase": false, "constructor": false}, {"identifier": "getRight", "parameters": "()", "modifiers": "abstract", "return": "ID", "signature": "ID getRight()", "full_signature": "abstract ID getRight()", "class_method_signature": "ID.getRight()", "testcase": false, "constructor": false}, {"identifier": "isLeaf", "parameters": "()", "modifiers": "abstract", "return": "boolean", "signature": "boolean isLeaf()", "full_signature": "abstract boolean isLeaf()", "class_method_signature": "ID.isLeaf()", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "()", "modifiers": "abstract", "return": "boolean", "signature": "boolean isZero()", "full_signature": "abstract boolean isZero()", "class_method_signature": "ID.isZero()", "testcase": false, "constructor": false}, {"identifier": "isOne", "parameters": "()", "modifiers": "abstract", "return": "boolean", "signature": "boolean isOne()", "full_signature": "abstract boolean isOne()", "class_method_signature": "ID.isOne()", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "()", "modifiers": "abstract", "return": "ID", "signature": "ID normalize()", "full_signature": "abstract ID normalize()", "class_method_signature": "ID.normalize()", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "()", "modifiers": "abstract", "return": "ID[]", "signature": "ID[] split()", "full_signature": "abstract ID[] split()", "class_method_signature": "ID.split()", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(ID other)", "modifiers": "abstract", "return": "ID", "signature": "ID sum(ID other)", "full_signature": "abstract ID sum(ID other)", "class_method_signature": "ID.sum(ID other)", "testcase": false, "constructor": false}], "file": "itc4j-core/src/main/java/itc4j/ID.java"}, "focal_method": {"identifier": "split", "parameters": "()", "modifiers": "abstract", "return": "ID[]", "body": "abstract ID[] split();", "signature": "ID[] split()", "full_signature": "abstract ID[] split()", "class_method_signature": "ID.split()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 10585052, "url": "https://github.com/sinabz/itc4j", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 59, "size": 53, "license": "licensed"}}