{"test_class": {"identifier": "MVELLifeCycleManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/internals/lifecycle/MVELLifeCycleManagerTest.java"}, "test_case": {"identifier": "testClaimIsAllowedExcludedOwner", "parameters": "()", "modifiers": "@Test(expected = PermissionDeniedException.class) public", "return": "void", "body": "@Test(expected = PermissionDeniedException.class)\n\tpublic void testClaimIsAllowedExcludedOwner() {\n\n\t\tUser testUser = new UserImpl(\"BB8\");\n\n\t\tList<String> testGroupIds = new ArrayList<>();\n\t\ttestGroupIds.add(\"testGroup1\");\n\n\t\t// Create the task.\n\t\tString str = \"(with (new Task()) { priority = 55, taskData = (with( new TaskData()) { status = Status.Created } ), \";\n\t\tstr += \"peopleAssignments = (with ( new PeopleAssignments() ) { excludedOwners = [new User('BB8')], potentialOwners = [new Group('testGroup1')]}),\";\n\t\tstr += \"name =  'This is my task name' })\";\n\t\tInternalTask task = (InternalTask) TaskFactory.evalTask(new StringReader(str));\n\n\t\t// Test whether we can claim the task. This should not be possible.\n\t\tOperation operation = Operation.Claim;\n\t\tList<OperationCommand> operationCommands = new ArrayList<>();\n\t\tOperationCommand operationCommand = new OperationCommand();\n\t\t// Set the list of user-types (e.g. PotentialOwners, BusinessAdministrators, etc.) that are allowed to execute this operation.\n\t\tList<Allowed> allowed = new ArrayList<>();\n\t\t// We should only allow PotentialOwner in this test (we're claiming a task).\n\t\tallowed.add(Allowed.PotentialOwner);\n\t\toperationCommand.setAllowed(allowed);\n\n\t\t// Set the status that is required to be able to execute this operation.\n\t\tList<Status> status = new ArrayList<>();\n\t\t// Before we claim a task, the status is \"Created\".\n\t\tstatus.add(Status.Created);\n\t\toperationCommand.setStatus(status);\n\t\toperationCommands.add(operationCommand);\n\n\t\t// We don't need \"targetEntity\" and \"entities\" for this test.\n\t\tMVELLifeCycleManager taskLcManager = new MVELLifeCycleManager();\n\t\ttaskLcManager.evalCommand(operation, operationCommands, task, testUser, null, testGroupIds, null);\n\t}", "signature": "void testClaimIsAllowedExcludedOwner()", "full_signature": "@Test(expected = PermissionDeniedException.class) public void testClaimIsAllowedExcludedOwner()", "class_method_signature": "MVELLifeCycleManagerTest.testClaimIsAllowedExcludedOwner()", "testcase": true, "constructor": false, "invocations": ["add", "evalTask", "add", "setAllowed", "add", "setStatus", "add", "evalCommand"]}, "focal_class": {"identifier": "MVELLifeCycleManager", "superclass": "", "interfaces": "implements LifeCycleManager", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MVELLifeCycleManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MVELLifeCycleManager.class)", "var_name": "logger"}, {"original_string": "private TaskContext context;", "modifier": "private", "type": "TaskContext", "declarator": "context", "var_name": "context"}, {"original_string": "private TaskPersistenceContext persistenceContext;", "modifier": "private", "type": "TaskPersistenceContext", "declarator": "persistenceContext", "var_name": "persistenceContext"}, {"original_string": "private TaskContentService taskContentService;", "modifier": "private", "type": "TaskContentService", "declarator": "taskContentService", "var_name": "taskContentService"}, {"original_string": "private TaskEventSupport taskEventSupport;", "modifier": "private", "type": "TaskEventSupport", "declarator": "taskEventSupport", "var_name": "taskEventSupport"}, {"original_string": "private static Map<Operation, List<OperationCommand>> operations = initMVELOperations();", "modifier": "private static", "type": "Map<Operation, List<OperationCommand>>", "declarator": "operations = initMVELOperations()", "var_name": "operations"}], "methods": [{"identifier": "MVELLifeCycleManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " MVELLifeCycleManager()", "full_signature": "public  MVELLifeCycleManager()", "class_method_signature": "MVELLifeCycleManager.MVELLifeCycleManager()", "testcase": false, "constructor": true}, {"identifier": "MVELLifeCycleManager", "parameters": "(TaskContext context, TaskPersistenceContext persistenceContext, TaskContentService contentService,\n    \t\tTaskEventSupport taskEventSupport)", "modifiers": "public", "return": "", "signature": " MVELLifeCycleManager(TaskContext context, TaskPersistenceContext persistenceContext, TaskContentService contentService,\n    \t\tTaskEventSupport taskEventSupport)", "full_signature": "public  MVELLifeCycleManager(TaskContext context, TaskPersistenceContext persistenceContext, TaskContentService contentService,\n    \t\tTaskEventSupport taskEventSupport)", "class_method_signature": "MVELLifeCycleManager.MVELLifeCycleManager(TaskContext context, TaskPersistenceContext persistenceContext, TaskContentService contentService,\n    \t\tTaskEventSupport taskEventSupport)", "testcase": false, "constructor": true}, {"identifier": "setPersistenceContext", "parameters": "(TaskPersistenceContext persistenceContext)", "modifiers": "public", "return": "void", "signature": "void setPersistenceContext(TaskPersistenceContext persistenceContext)", "full_signature": "public void setPersistenceContext(TaskPersistenceContext persistenceContext)", "class_method_signature": "MVELLifeCycleManager.setPersistenceContext(TaskPersistenceContext persistenceContext)", "testcase": false, "constructor": false}, {"identifier": "setTaskEventSupport", "parameters": "(TaskEventSupport taskEventSupport)", "modifiers": "public", "return": "void", "signature": "void setTaskEventSupport(TaskEventSupport taskEventSupport)", "full_signature": "public void setTaskEventSupport(TaskEventSupport taskEventSupport)", "class_method_signature": "MVELLifeCycleManager.setTaskEventSupport(TaskEventSupport taskEventSupport)", "testcase": false, "constructor": false}, {"identifier": "setTaskContentService", "parameters": "(TaskContentService taskContentService)", "modifiers": "public", "return": "void", "signature": "void setTaskContentService(TaskContentService taskContentService)", "full_signature": "public void setTaskContentService(TaskContentService taskContentService)", "class_method_signature": "MVELLifeCycleManager.setTaskContentService(TaskContentService taskContentService)", "testcase": false, "constructor": false}, {"identifier": "evalCommand", "parameters": "(final Operation operation, final List<OperationCommand> commands, final Task task,\n            final User user, final OrganizationalEntity targetEntity,\n            List<String> groupIds, OrganizationalEntity...entities)", "modifiers": "", "return": "void", "signature": "void evalCommand(final Operation operation, final List<OperationCommand> commands, final Task task,\n            final User user, final OrganizationalEntity targetEntity,\n            List<String> groupIds, OrganizationalEntity...entities)", "full_signature": " void evalCommand(final Operation operation, final List<OperationCommand> commands, final Task task,\n            final User user, final OrganizationalEntity targetEntity,\n            List<String> groupIds, OrganizationalEntity...entities)", "class_method_signature": "MVELLifeCycleManager.evalCommand(final Operation operation, final List<OperationCommand> commands, final Task task,\n            final User user, final OrganizationalEntity targetEntity,\n            List<String> groupIds, OrganizationalEntity...entities)", "testcase": false, "constructor": false}, {"identifier": "isAllowed", "parameters": "(final OperationCommand command, final Task task, final User user,\n            List<String> groupIds)", "modifiers": "private", "return": "boolean", "signature": "boolean isAllowed(final OperationCommand command, final Task task, final User user,\n            List<String> groupIds)", "full_signature": "private boolean isAllowed(final OperationCommand command, final Task task, final User user,\n            List<String> groupIds)", "class_method_signature": "MVELLifeCycleManager.isAllowed(final OperationCommand command, final Task task, final User user,\n            List<String> groupIds)", "testcase": false, "constructor": false}, {"identifier": "isAllowed", "parameters": "(final User user, final List<String> groupIds, final List<OrganizationalEntity> entities)", "modifiers": "private", "return": "boolean", "signature": "boolean isAllowed(final User user, final List<String> groupIds, final List<OrganizationalEntity> entities)", "full_signature": "private boolean isAllowed(final User user, final List<String> groupIds, final List<OrganizationalEntity> entities)", "class_method_signature": "MVELLifeCycleManager.isAllowed(final User user, final List<String> groupIds, final List<OrganizationalEntity> entities)", "testcase": false, "constructor": false}, {"identifier": "commands", "parameters": "(final OperationCommand command, final Task task, final User user,\n            final OrganizationalEntity targetEntity, OrganizationalEntity...entities)", "modifiers": "private", "return": "void", "signature": "void commands(final OperationCommand command, final Task task, final User user,\n            final OrganizationalEntity targetEntity, OrganizationalEntity...entities)", "full_signature": "private void commands(final OperationCommand command, final Task task, final User user,\n            final OrganizationalEntity targetEntity, OrganizationalEntity...entities)", "class_method_signature": "MVELLifeCycleManager.commands(final OperationCommand command, final Task task, final User user,\n            final OrganizationalEntity targetEntity, OrganizationalEntity...entities)", "testcase": false, "constructor": false}, {"identifier": "taskOperation", "parameters": "(final Operation operation, final long taskId, final String userId,\n            final String targetEntityId, final Map<String, Object> data,\n            List<String> groupIds, OrganizationalEntity...entities)", "modifiers": "public", "return": "void", "signature": "void taskOperation(final Operation operation, final long taskId, final String userId,\n            final String targetEntityId, final Map<String, Object> data,\n            List<String> groupIds, OrganizationalEntity...entities)", "full_signature": "public void taskOperation(final Operation operation, final long taskId, final String userId,\n            final String targetEntityId, final Map<String, Object> data,\n            List<String> groupIds, OrganizationalEntity...entities)", "class_method_signature": "MVELLifeCycleManager.taskOperation(final Operation operation, final long taskId, final String userId,\n            final String targetEntityId, final Map<String, Object> data,\n            List<String> groupIds, OrganizationalEntity...entities)", "testcase": false, "constructor": false}, {"identifier": "invokeAssignmentService", "parameters": "(Task taskImpl, TaskContext context, String excludedUser)", "modifiers": "protected", "return": "void", "signature": "void invokeAssignmentService(Task taskImpl, TaskContext context, String excludedUser)", "full_signature": "protected void invokeAssignmentService(Task taskImpl, TaskContext context, String excludedUser)", "class_method_signature": "MVELLifeCycleManager.invokeAssignmentService(Task taskImpl, TaskContext context, String excludedUser)", "testcase": false, "constructor": false}, {"identifier": "initMVELOperations", "parameters": "()", "modifiers": "public static", "return": "Map<Operation, List<OperationCommand>>", "signature": "Map<Operation, List<OperationCommand>> initMVELOperations()", "full_signature": "public static Map<Operation, List<OperationCommand>> initMVELOperations()", "class_method_signature": "MVELLifeCycleManager.initMVELOperations()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Reader reader)", "modifiers": "public static", "return": "String", "signature": "String toString(Reader reader)", "full_signature": "public static String toString(Reader reader)", "class_method_signature": "MVELLifeCycleManager.toString(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "eval", "parameters": "(Reader reader)", "modifiers": "public static", "return": "Object", "signature": "Object eval(Reader reader)", "full_signature": "public static Object eval(Reader reader)", "class_method_signature": "MVELLifeCycleManager.eval(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "eval", "parameters": "(Reader reader, Map<String, Object> vars)", "modifiers": "public static", "return": "Object", "signature": "Object eval(Reader reader, Map<String, Object> vars)", "full_signature": "public static Object eval(Reader reader, Map<String, Object> vars)", "class_method_signature": "MVELLifeCycleManager.eval(Reader reader, Map<String, Object> vars)", "testcase": false, "constructor": false}, {"identifier": "eval", "parameters": "(String str, Map<String, Object> vars)", "modifiers": "public static", "return": "Object", "signature": "Object eval(String str, Map<String, Object> vars)", "full_signature": "public static Object eval(String str, Map<String, Object> vars)", "class_method_signature": "MVELLifeCycleManager.eval(String str, Map<String, Object> vars)", "testcase": false, "constructor": false}, {"identifier": "assignOwnerAndStatus", "parameters": "(InternalTaskData taskData, List<OrganizationalEntity> potentialOwners)", "modifiers": "public static", "return": "Status", "signature": "Status assignOwnerAndStatus(InternalTaskData taskData, List<OrganizationalEntity> potentialOwners)", "full_signature": "public static Status assignOwnerAndStatus(InternalTaskData taskData, List<OrganizationalEntity> potentialOwners)", "class_method_signature": "MVELLifeCycleManager.assignOwnerAndStatus(InternalTaskData taskData, List<OrganizationalEntity> potentialOwners)", "testcase": false, "constructor": false}, {"identifier": "getExecutionErrorHandler", "parameters": "()", "modifiers": "protected", "return": "ExecutionErrorHandler", "signature": "ExecutionErrorHandler getExecutionErrorHandler()", "full_signature": "protected ExecutionErrorHandler getExecutionErrorHandler()", "class_method_signature": "MVELLifeCycleManager.getExecutionErrorHandler()", "testcase": false, "constructor": false}], "file": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/internals/lifecycle/MVELLifeCycleManager.java"}, "focal_method": {"identifier": "evalCommand", "parameters": "(final Operation operation, final List<OperationCommand> commands, final Task task,\n            final User user, final OrganizationalEntity targetEntity,\n            List<String> groupIds, OrganizationalEntity...entities)", "modifiers": "", "return": "void", "body": "void evalCommand(final Operation operation, final List<OperationCommand> commands, final Task task,\n            final User user, final OrganizationalEntity targetEntity,\n            List<String> groupIds, OrganizationalEntity...entities) throws PermissionDeniedException {\n\n        boolean statusMatched = false;\n        final TaskData taskData = task.getTaskData();\n        for (OperationCommand command : commands) {\n            // first find out if we have a matching status\n            if (command.getStatus() != null) {\n                for (Status status : command.getStatus()) {\n                    if (task.getTaskData().getStatus() == status) {\n                        statusMatched = true;\n                        // next find out if the user can execute this doOperation\n                        if (!isAllowed(command, task, user, groupIds)) {\n                            String errorMessage = \"User '\" + user + \"' does not have permissions to execute operation '\" + operation + \"' on task id \" + task.getId();\n\n                            throw new PermissionDeniedException(errorMessage);\n                        }\n\n                        commands(command, task, user, targetEntity, entities);\n                    } else {\n                        logger.debug(\"No match on status for task {} :status {}  != {}\", task.getId(), task.getTaskData().getStatus(), status);\n                    }\n                }\n            }\n\n            if (command.getPreviousStatus() != null) {\n                for (Status status : command.getPreviousStatus()) {\n                    if (taskData.getPreviousStatus() == status) {\n                        statusMatched = true;\n\n                        // next find out if the user can execute this doOperation\n                        if (!isAllowed(command, task, user, groupIds)) {\n                            String errorMessage = \"User '\" + user + \"' does not have permissions to execute operation '\" + operation + \"' on task id \" + task.getId();\n                            throw new PermissionDeniedException(errorMessage);\n                        }\n\n                        commands(command, task, user, targetEntity, entities);\n                    } else {\n                        logger.debug(\"No match on previous status for task {} :status {}  != {}\", task.getId(), task.getTaskData().getStatus(), status);\n                    }\n                }\n            }\n            \n\n            if (!command.isGroupTargetEntityAllowed() && targetEntity instanceof Group) {\n                String errorMessage = \"User '\" + user + \"' was unable to execute operation '\" + operation + \"' on task id \" + task.getId() + \" due to 'target entity cannot be group'\";\n                throw new PermissionDeniedException(errorMessage); \n            }\n        }\n        if (!statusMatched) {\n            String errorMessage = \"User '\" + user + \"' was unable to execute operation '\" + operation + \"' on task id \" + task.getId() + \" due to a no 'current status' match\";\n            throw new PermissionDeniedException(errorMessage);\n        }\n        \n\n    }", "signature": "void evalCommand(final Operation operation, final List<OperationCommand> commands, final Task task,\n            final User user, final OrganizationalEntity targetEntity,\n            List<String> groupIds, OrganizationalEntity...entities)", "full_signature": " void evalCommand(final Operation operation, final List<OperationCommand> commands, final Task task,\n            final User user, final OrganizationalEntity targetEntity,\n            List<String> groupIds, OrganizationalEntity...entities)", "class_method_signature": "MVELLifeCycleManager.evalCommand(final Operation operation, final List<OperationCommand> commands, final Task task,\n            final User user, final OrganizationalEntity targetEntity,\n            List<String> groupIds, OrganizationalEntity...entities)", "testcase": false, "constructor": false, "invocations": ["getTaskData", "getStatus", "getStatus", "getStatus", "getTaskData", "isAllowed", "getId", "commands", "debug", "getId", "getStatus", "getTaskData", "getPreviousStatus", "getPreviousStatus", "getPreviousStatus", "isAllowed", "getId", "commands", "debug", "getId", "getStatus", "getTaskData", "isGroupTargetEntityAllowed", "getId", "getId"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}