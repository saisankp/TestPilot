{"test_class": {"identifier": "SystemRegistrationWorkerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SystemRegistrationWorker sysReg;", "modifier": "private", "type": "SystemRegistrationWorker", "declarator": "sysReg", "var_name": "sysReg"}, {"original_string": "private String registrationData;", "modifier": "private", "type": "String", "declarator": "registrationData", "var_name": "registrationData"}], "file": "OLAT-LMS/src/test/java/org/olat/lms/admin/registration/SystemRegistrationWorkerTest.java"}, "test_case": {"identifier": "testRegistraion", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testRegistraion() {\n        boolean result = sysReg.doTheWork(registrationData, SystemRegistrationManager.REGISTRATION_SERVER, \"1.0\");\n        assertTrue(result);\n    }", "signature": "void testRegistraion()", "full_signature": "@Test @Ignore public void testRegistraion()", "class_method_signature": "SystemRegistrationWorkerTest.testRegistraion()", "testcase": true, "constructor": false, "invocations": ["doTheWork", "assertTrue"]}, "focal_class": {"identifier": "SystemRegistrationWorker", "superclass": "", "interfaces": "implements Enregister", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "@Autowired\n    SystemPropertiesService propertyService;", "modifier": "@Autowired", "type": "SystemPropertiesService", "declarator": "propertyService", "var_name": "propertyService"}], "methods": [{"identifier": "SystemRegistrationWorker", "parameters": "()", "modifiers": "protected", "return": "", "signature": " SystemRegistrationWorker()", "full_signature": "protected  SystemRegistrationWorker()", "class_method_signature": "SystemRegistrationWorker.SystemRegistrationWorker()", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(String registrationData, String url, String version)", "modifiers": "@Override @Async public", "return": "void", "signature": "void register(String registrationData, String url, String version)", "full_signature": "@Override @Async public void register(String registrationData, String url, String version)", "class_method_signature": "SystemRegistrationWorker.register(String registrationData, String url, String version)", "testcase": false, "constructor": false}, {"identifier": "doTheWork", "parameters": "(String registrationData, String url, String version)", "modifiers": "protected", "return": "boolean", "signature": "boolean doTheWork(String registrationData, String url, String version)", "full_signature": "protected boolean doTheWork(String registrationData, String url, String version)", "class_method_signature": "SystemRegistrationWorker.doTheWork(String registrationData, String url, String version)", "testcase": false, "constructor": false}, {"identifier": "delayPost", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int delayPost()", "full_signature": "private int delayPost()", "class_method_signature": "SystemRegistrationWorker.delayPost()", "testcase": false, "constructor": false}], "file": "OLAT-LMS/src/main/java/org/olat/lms/admin/registration/SystemRegistrationWorker.java"}, "focal_method": {"identifier": "doTheWork", "parameters": "(String registrationData, String url, String version)", "modifiers": "protected", "return": "boolean", "body": "protected boolean doTheWork(String registrationData, String url, String version) {\n        String registrationKey = propertyService.getStringProperty(PropertyLocator.SYSTEM_REG_SECRET_KEY);\n        boolean regStatus = false;\n        if (StringHelper.containsNonWhitespace(registrationData)) {\n            // only send when there is something to send\n            final HttpClient client = HttpClientFactory.getHttpClientInstance();\n            client.getParams().setParameter(\"http.useragent\", \"OLAT Registration Agent ; \" + version);\n\n            log.info(\"URL:\" + url, null);\n            final PutMethod method = new PutMethod(url);\n            if (registrationKey != null) {\n                // updating\n                method.setRequestHeader(\"Authorization\", registrationKey);\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Authorization: \" + registrationKey, null);\n                } else {\n                    log.debug(\"Authorization: EXISTS\", null);\n                }\n            } else {\n                log.info(\"Authorization: NONE\", null);\n            }\n            method.setRequestHeader(\"Content-Type\", \"application/xml; charset=utf-8\");\n            try {\n                method.setRequestEntity(new StringRequestEntity(registrationData, \"application/xml\", \"UTF8\"));\n                client.executeMethod(method);\n                final int status = method.getStatusCode();\n                if (status == HttpStatus.SC_NOT_MODIFIED || status == HttpStatus.SC_OK) {\n                    log.info(\"Successfully registered OLAT installation on olat.org server, thank you for your support!\", null);\n                    registrationKey = method.getResponseBodyAsString();\n                    propertyService.setProperty(PropertyLocator.SYSTEM_REG_SECRET_KEY, registrationKey);\n                    regStatus = true;\n                } else if (method.getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n                    log.error(\"File could be created not on registration server::\" + method.getStatusLine().toString(), null);\n                    regStatus = false;\n                } else if (method.getStatusCode() == HttpStatus.SC_NO_CONTENT) {\n                    log.info(method.getResponseBodyAsString() + method.getStatusText());\n                    regStatus = false;\n                } else {\n                    log.error(\"Unexpected HTTP Status::\" + method.getStatusLine().toString() + \" during registration call\", null);\n                    regStatus = false;\n                }\n            } catch (final Exception e) {\n                log.error(\"Unexpected exception during registration call\", e);\n                regStatus = false;\n            }\n        } else {\n            log.warn(\n                    \"****************************************************************************************************************************************************************************\",\n                    null);\n            log.warn(\n                    \"* This OLAT installation is not registered. Please, help us with your statistical data and register your installation under Adminisration - Systemregistration. THANK YOU! *\",\n                    null);\n            log.warn(\n                    \"****************************************************************************************************************************************************************************\",\n                    null);\n        }\n        return regStatus;\n    }", "signature": "boolean doTheWork(String registrationData, String url, String version)", "full_signature": "protected boolean doTheWork(String registrationData, String url, String version)", "class_method_signature": "SystemRegistrationWorker.doTheWork(String registrationData, String url, String version)", "testcase": false, "constructor": false, "invocations": ["getStringProperty", "containsNonWhitespace", "getHttpClientInstance", "setParameter", "getParams", "info", "setRequestHeader", "isDebugEnabled", "debug", "debug", "info", "setRequestHeader", "setRequestEntity", "executeMethod", "getStatusCode", "info", "getResponseBodyAsString", "setProperty", "getStatusCode", "error", "toString", "getStatusLine", "getStatusCode", "info", "getResponseBodyAsString", "getStatusText", "error", "toString", "getStatusLine", "error", "warn", "warn", "warn"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}