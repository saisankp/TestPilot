{"test_class": {"identifier": "RegExpConditionCheckerOperatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EX_REG_EXP = \"A[a-zA-Z]{8}ary\";", "modifier": "private static final", "type": "String", "declarator": "EX_REG_EXP = \"A[a-zA-Z]{8}ary\"", "var_name": "EX_REG_EXP"}, {"original_string": "private static final String EX_TARGET = \"TARGET_STRING_Aqwertzuoary\";", "modifier": "private static final", "type": "String", "declarator": "EX_TARGET = \"TARGET_STRING_Aqwertzuoary\"", "var_name": "EX_TARGET"}, {"original_string": "@Mock\n    private RegExpPatternFactory patternFactory;", "modifier": "@Mock\n    private", "type": "RegExpPatternFactory", "declarator": "patternFactory", "var_name": "patternFactory"}, {"original_string": "@InjectMocks\n    private RegExpConditionCheckerOperator underTest;", "modifier": "@InjectMocks\n    private", "type": "RegExpConditionCheckerOperator", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/test/java/com/epam/wilma/stubconfig/condition/checker/general/operator/RegExpConditionCheckerOperatorTest.java"}, "test_case": {"identifier": "testCheckTargetShouldReturnFalseWhenRegExpIsEmptyString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckTargetShouldReturnFalseWhenRegExpIsEmptyString() {\n        //GIVEN in setUp\n        //WHEN\n        boolean actual = underTest.checkTarget(\"\", EX_TARGET);\n        //THEN\n        assertFalse(actual);\n    }", "signature": "void testCheckTargetShouldReturnFalseWhenRegExpIsEmptyString()", "full_signature": "@Test public void testCheckTargetShouldReturnFalseWhenRegExpIsEmptyString()", "class_method_signature": "RegExpConditionCheckerOperatorTest.testCheckTargetShouldReturnFalseWhenRegExpIsEmptyString()", "testcase": true, "constructor": false, "invocations": ["checkTarget", "assertFalse"]}, "focal_class": {"identifier": "RegExpConditionCheckerOperator", "superclass": "", "interfaces": "implements ConditionCheckerOperator", "fields": [{"original_string": "@Autowired\n    private RegExpPatternFactory patternFactory;", "modifier": "@Autowired\n    private", "type": "RegExpPatternFactory", "declarator": "patternFactory", "var_name": "patternFactory"}], "methods": [{"identifier": "checkTarget", "parameters": "(final String regExp, final String target)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkTarget(final String regExp, final String target)", "full_signature": "@Override public boolean checkTarget(final String regExp, final String target)", "class_method_signature": "RegExpConditionCheckerOperator.checkTarget(final String regExp, final String target)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/main/java/com/epam/wilma/stubconfig/condition/checker/general/operator/RegExpConditionCheckerOperator.java"}, "focal_method": {"identifier": "checkTarget", "parameters": "(final String regExp, final String target)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean checkTarget(final String regExp, final String target) {\n        boolean result = false;\n        if (!\"\".equals(regExp)) {\n            try {\n                Pattern pattern = patternFactory.createPattern(regExp);\n                Matcher matcher = pattern.matcher(target);\n                if (matcher.find()) {\n                    result = true;\n                }\n            } catch (Exception e) {\n                throw new RegularExpressionEvaluationException(\"Regular expression evaluation failed with the expression: \" + regExp, e);\n            }\n        }\n        return result;\n    }", "signature": "boolean checkTarget(final String regExp, final String target)", "full_signature": "@Override public boolean checkTarget(final String regExp, final String target)", "class_method_signature": "RegExpConditionCheckerOperator.checkTarget(final String regExp, final String target)", "testcase": false, "constructor": false, "invocations": ["equals", "createPattern", "matcher", "find"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}