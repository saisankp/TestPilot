{"test_class": {"identifier": "EverrestServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private HttpServletRequest  request;", "modifier": "private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private HttpServletResponse response;", "modifier": "private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private ServletConfig       servletConfig;", "modifier": "private", "type": "ServletConfig", "declarator": "servletConfig", "var_name": "servletConfig"}, {"original_string": "private ServletContext      servletContext;", "modifier": "private", "type": "ServletContext", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "private EverrestProcessor   everrestProcessor;", "modifier": "private", "type": "EverrestProcessor", "declarator": "everrestProcessor", "var_name": "everrestProcessor"}, {"original_string": "private EverrestServlet everrestServlet;", "modifier": "private", "type": "EverrestServlet", "declarator": "everrestServlet", "var_name": "everrestServlet"}], "file": "everrest-core/src/test/java/org/everrest/core/servlet/EverrestServletTest.java"}, "test_case": {"identifier": "rethrowsIOExceptionThatThrownByEverrestProcessor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rethrowsIOExceptionThatThrownByEverrestProcessor() throws Exception {\n        IOException ioException = new IOException();\n        doThrow(ioException).when(everrestProcessor).process(isA(ServletContainerRequest.class), isA(ContainerResponse.class), isA(EnvironmentContext.class));\n\n        thrown.expect(exceptionSameInstanceMatcher(ioException));\n        everrestServlet.service(request, response);\n    }", "signature": "void rethrowsIOExceptionThatThrownByEverrestProcessor()", "full_signature": "@Test public void rethrowsIOExceptionThatThrownByEverrestProcessor()", "class_method_signature": "EverrestServletTest.rethrowsIOExceptionThatThrownByEverrestProcessor()", "testcase": true, "constructor": false, "invocations": ["process", "when", "doThrow", "isA", "isA", "isA", "expect", "exceptionSameInstanceMatcher", "service"]}, "focal_class": {"identifier": "EverrestServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(EverrestServlet.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(EverrestServlet.class)", "var_name": "LOG"}, {"original_string": "private WebApplicationDeclaredRoles webApplicationRoles;", "modifier": "private", "type": "WebApplicationDeclaredRoles", "declarator": "webApplicationRoles", "var_name": "webApplicationRoles"}, {"original_string": "private ErrorPages                  errorPages;", "modifier": "private", "type": "ErrorPages", "declarator": "errorPages", "var_name": "errorPages"}, {"original_string": "protected EverrestProcessor processor;", "modifier": "protected", "type": "EverrestProcessor", "declarator": "processor", "var_name": "processor"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "EverrestServlet.init()", "testcase": false, "constructor": false}, {"identifier": "service", "parameters": "(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "modifiers": "@Override public", "return": "void", "signature": "void service(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "full_signature": "@Override public void service(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "class_method_signature": "EverrestServlet.service(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/servlet/EverrestServlet.java"}, "focal_method": {"identifier": "service", "parameters": "(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void service(HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws IOException, ServletException {\n        EnvironmentContext env = new EnvironmentContext();\n        env.put(HttpServletRequest.class, httpRequest);\n        env.put(HttpServletResponse.class, httpResponse);\n        env.put(ServletConfig.class, getServletConfig());\n        env.put(ServletContext.class, getServletContext());\n        env.put(WebApplicationDeclaredRoles.class, webApplicationRoles);\n        env.put(ErrorPages.class, errorPages);\n        try {\n            ServletContainerRequest request = ServletContainerRequest.create(httpRequest);\n            ContainerResponse response = new ContainerResponse(new ServletContainerResponseWriter(httpResponse));\n            processor.process(request, response, env);\n        } catch (IOException ioe) {\n            // Met problem with Acrobat Reader HTTP client when use EverRest for WebDav.\n            // Client close connection before all data transferred and it cause error on server side.\n            if (ioe.getClass().getName().equals(\"org.apache.catalina.connector.ClientAbortException\")) {\n                LOG.debug(ioe.getMessage(), ioe);\n            } else {\n                throw ioe;\n            }\n        } catch (UnhandledException e) {\n            LOG.error(e.getMessage(), e);\n            if (e.getResponseStatus() != 0) {\n                httpResponse.sendError(e.getResponseStatus());\n            } else {\n                throw new ServletException(e.getCause());\n            }\n        } catch (Throwable e){\n            LOG.debug(e.getLocalizedMessage(), e);\n            throw e;\n        }\n    }", "signature": "void service(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "full_signature": "@Override public void service(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "class_method_signature": "EverrestServlet.service(HttpServletRequest httpRequest, HttpServletResponse httpResponse)", "testcase": false, "constructor": false, "invocations": ["put", "put", "put", "getServletConfig", "put", "getServletContext", "put", "put", "create", "process", "equals", "getName", "getClass", "debug", "getMessage", "error", "getMessage", "getResponseStatus", "sendError", "getResponseStatus", "getCause", "debug", "getLocalizedMessage"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}