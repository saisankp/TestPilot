{"test_class": {"identifier": "DhcpLeaseParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/hms-core/src/test/java/com/vmware/vrack/hms/utils/DhcpLeaseParserTest.java"}, "test_case": {"identifier": "testParseLeaseContent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseLeaseContent()\n    {\n\n        final String leaseContent = \"lease 192.168.0.50 {\\n\" + \"        starts 4 2011/09/22 20:27:28;\\n\"\n            + \"        ends 1 2011/09/26 20:27:28;\\n\" + \"        tstp 1 2011/09/26 20:27:28;\\n\"\n            + \"        binding state free;\\n\" + \"        hardware ethernet 00:00:00:00:00:00;\\n\"\n            + \"        uid \\\"\\\\001\\\\000\\\\033w\\\\223\\\\241i\\\";\\n client-hostname \\\"QCT2C600CFC761D\\\";\\n}\";\n        DhcpLease dhcpLease = DhcpLeaseParser.parseLeaseContent( leaseContent );\n        assertNotNull( dhcpLease );\n        assertNotNull( dhcpLease.getIpAddress() );\n        assertTrue( StringUtils.equals( dhcpLease.getIpAddress(), \"192.168.0.50\" ) );\n\n        assertNotNull( dhcpLease.getMacAddress() );\n        assertTrue( StringUtils.equals( dhcpLease.getMacAddress(), \"00:00:00:00:00:00\" ) );\n    }", "signature": "void testParseLeaseContent()", "full_signature": "@Test public void testParseLeaseContent()", "class_method_signature": "DhcpLeaseParserTest.testParseLeaseContent()", "testcase": true, "constructor": false, "invocations": ["parseLeaseContent", "assertNotNull", "assertNotNull", "getIpAddress", "assertTrue", "equals", "getIpAddress", "assertNotNull", "getMacAddress", "assertTrue", "equals", "getMacAddress"]}, "focal_class": {"identifier": "DhcpLeaseParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger( DhcpLeaseParser.class );", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( DhcpLeaseParser.class )", "var_name": "logger"}, {"original_string": "private static final String DHCP_LEASE_REGEX_PATTERN = \"lease\\\\s([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\"\n        + \"\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.\"\n        + \"([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\s\\\\{(.+?)\\\\}\";", "modifier": "private static final", "type": "String", "declarator": "DHCP_LEASE_REGEX_PATTERN = \"lease\\\\s([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\"\n        + \"\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.\"\n        + \"([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\s\\\\{(.+?)\\\\}\"", "var_name": "DHCP_LEASE_REGEX_PATTERN"}, {"original_string": "private static final String MAC_ADDRESS_REGEX_PATTERN = \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\";", "modifier": "private static final", "type": "String", "declarator": "MAC_ADDRESS_REGEX_PATTERN = \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\"", "var_name": "MAC_ADDRESS_REGEX_PATTERN"}, {"original_string": "private static final String IPV4_ADDRESS_REGEX_PATTERN =\n        \"([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.\"\n            + \"([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\";", "modifier": "private static final", "type": "String", "declarator": "IPV4_ADDRESS_REGEX_PATTERN =\n        \"([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.\"\n            + \"([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\"", "var_name": "IPV4_ADDRESS_REGEX_PATTERN"}, {"original_string": "private static final String DHCP_LEASE_DATE_PATTERN = \"^\\\\d{4}/\\\\d{2}/\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2}$\";", "modifier": "private static final", "type": "String", "declarator": "DHCP_LEASE_DATE_PATTERN = \"^\\\\d{4}/\\\\d{2}/\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2}$\"", "var_name": "DHCP_LEASE_DATE_PATTERN"}, {"original_string": "private static final SimpleDateFormat simpleDateFormat = new SimpleDateFormat( \"yyyy/MM/dd HH:mm:ss\" );", "modifier": "private static final", "type": "SimpleDateFormat", "declarator": "simpleDateFormat = new SimpleDateFormat( \"yyyy/MM/dd HH:mm:ss\" )", "var_name": "simpleDateFormat"}], "methods": [{"identifier": "DhcpLeaseParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " DhcpLeaseParser()", "full_signature": "private  DhcpLeaseParser()", "class_method_signature": "DhcpLeaseParser.DhcpLeaseParser()", "testcase": false, "constructor": true}, {"identifier": "parseLeaseFile", "parameters": "( final String dhcpLeaseFile )", "modifiers": "public static", "return": "List<DhcpLease>", "signature": "List<DhcpLease> parseLeaseFile( final String dhcpLeaseFile )", "full_signature": "public static List<DhcpLease> parseLeaseFile( final String dhcpLeaseFile )", "class_method_signature": "DhcpLeaseParser.parseLeaseFile( final String dhcpLeaseFile )", "testcase": false, "constructor": false}, {"identifier": "parseLeaseContent", "parameters": "( final String leaseContent )", "modifiers": "public static", "return": "DhcpLease", "signature": "DhcpLease parseLeaseContent( final String leaseContent )", "full_signature": "public static DhcpLease parseLeaseContent( final String leaseContent )", "class_method_signature": "DhcpLeaseParser.parseLeaseContent( final String leaseContent )", "testcase": false, "constructor": false}, {"identifier": "getLeaseDate", "parameters": "( final String[] tokens )", "modifiers": "private static", "return": "String", "signature": "String getLeaseDate( final String[] tokens )", "full_signature": "private static String getLeaseDate( final String[] tokens )", "class_method_signature": "DhcpLeaseParser.getLeaseDate( final String[] tokens )", "testcase": false, "constructor": false}, {"identifier": "isLatestLease", "parameters": "( DhcpLease existingLease, DhcpLease newLease )", "modifiers": "public static", "return": "boolean", "signature": "boolean isLatestLease( DhcpLease existingLease, DhcpLease newLease )", "full_signature": "public static boolean isLatestLease( DhcpLease existingLease, DhcpLease newLease )", "class_method_signature": "DhcpLeaseParser.isLatestLease( DhcpLease existingLease, DhcpLease newLease )", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "( final String dateString )", "modifiers": "private static", "return": "Date", "signature": "Date parseDate( final String dateString )", "full_signature": "private static Date parseDate( final String dateString )", "class_method_signature": "DhcpLeaseParser.parseDate( final String dateString )", "testcase": false, "constructor": false}], "file": "modules/hms-core/src/main/java/com/vmware/vrack/hms/utils/DhcpLeaseParser.java"}, "focal_method": {"identifier": "parseLeaseContent", "parameters": "( final String leaseContent )", "modifiers": "public static", "return": "DhcpLease", "body": "public static DhcpLease parseLeaseContent( final String leaseContent )\n    {\n\n        // check that leaseContent is not null or blank\n        if ( StringUtils.isBlank( leaseContent ) )\n        {\n            logger.warn( \"In parseLeaseContent, lease content is either null or blank.\" );\n            return null;\n        }\n\n        // split leaseContent after each line break\n        String[] lines = leaseContent.split( \"\\\\r|\\\\n\" );\n\n        // first line contains IP address.\n        String ipAddress = lines[0].split( \"\\\\s\" )[1];\n        if ( StringUtils.isBlank( ipAddress ) )\n        {\n            logger.debug( \"In parseLeaseContent, IP Address is null or blank of the lease: {}.\", leaseContent );\n            return null;\n        }\n\n        if ( !Pattern.matches( IPV4_ADDRESS_REGEX_PATTERN, ipAddress ) )\n        {\n            logger.warn( \"In parseLeaseContent, IP Address '{}' is not a valid IPv4 Address.\", ipAddress );\n            return null;\n        }\n\n        // parse the remaining lines for mac address\n        String line = null;\n        String singleKey = null;\n        String dualKey = null;\n        String[] tokens = null;\n        String macAddress = null;\n        String starts = null;\n        String ends = null;\n        String bindingState = null;\n        String clientHostname = null;\n        for ( int index = 1; index < lines.length - 1; index++ )\n        {\n\n            line = lines[index].trim();\n\n            // skip if line is blank\n            if ( StringUtils.isBlank( line ) )\n            {\n                continue;\n            }\n\n            // replace line ending characters with blank string.\n            line = line.replaceAll( \"\\\\n\", \"\" );\n            line = line.replaceAll( \"\\\\r\", \"\" );\n            lines[index] = line.substring( 0, line.indexOf( ';' ) );\n            tokens = lines[index].trim().split( \"\\\\s\" );\n            singleKey = tokens[0];\n            dualKey = String.format( \"%s %s\", tokens[0], tokens[1] );\n\n            if ( StringUtils.equals( singleKey, \"starts\" ) )\n            {\n                // starts 0 2016/06/19 10:06:00;\n                starts = DhcpLeaseParser.getLeaseDate( tokens );\n            }\n            else if ( StringUtils.equals( singleKey, \"ends\" ) )\n            {\n                // ends 1 2016/06/20 10:06:00;\n                ends = DhcpLeaseParser.getLeaseDate( tokens );\n            }\n            else if ( StringUtils.equals( dualKey, \"binding state\" ) )\n            {\n                if ( tokens.length == 3 )\n                {\n                    bindingState = tokens[2];\n                }\n            }\n            else if ( StringUtils.equals( singleKey, \"client-hostname\" ) )\n            {\n                // client-hostname \"QCT2C600CFC788A\"\n                if ( tokens.length == 2 )\n                {\n                    // strip off quote\n                    if ( tokens[1].startsWith( \"\\\"\" ) && tokens[1].endsWith( \"\\\"\" ) )\n                    {\n                        clientHostname = tokens[1].substring( 1, tokens[1].length() - 1 );\n                    }\n                }\n            }\n            else if ( StringUtils.equals( dualKey, \"hardware ethernet\" ) )\n            {\n                // hardware ethernet 00:00:00:00:00:00;\n                if ( StringUtils.isNotBlank( tokens[2] ) )\n                {\n                    if ( Pattern.matches( MAC_ADDRESS_REGEX_PATTERN, tokens[2] ) )\n                    {\n                        macAddress = tokens[2];\n                    }\n                }\n            }\n        }\n        if ( StringUtils.isNotBlank( ipAddress ) && StringUtils.isNotBlank( macAddress )\n            && StringUtils.isNotBlank( ends ) && StringUtils.isNotBlank( bindingState ) )\n        {\n            DhcpLease dhcpLease = new DhcpLease();\n            dhcpLease.setIpAddress( ipAddress );\n            dhcpLease.setMacAddress( macAddress );\n            dhcpLease.setEnds( ends );\n            dhcpLease.setBindingState( bindingState );\n            if ( StringUtils.isNotBlank( starts ) )\n            {\n                dhcpLease.setStarts( starts );\n            }\n            if ( StringUtils.isNotBlank( clientHostname ) )\n            {\n                dhcpLease.setClientHostname( clientHostname );\n            }\n            logger.debug( \"In parseLeaseContent, DHCP Lease: {}\", dhcpLease.toString() );\n            return dhcpLease;\n        }\n        return null;\n    }", "signature": "DhcpLease parseLeaseContent( final String leaseContent )", "full_signature": "public static DhcpLease parseLeaseContent( final String leaseContent )", "class_method_signature": "DhcpLeaseParser.parseLeaseContent( final String leaseContent )", "testcase": false, "constructor": false, "invocations": ["isBlank", "warn", "split", "split", "isBlank", "debug", "matches", "warn", "trim", "isBlank", "replaceAll", "replaceAll", "substring", "indexOf", "split", "trim", "format", "equals", "getLeaseDate", "equals", "getLeaseDate", "equals", "equals", "startsWith", "endsWith", "substring", "length", "equals", "isNotBlank", "matches", "isNotBlank", "isNotBlank", "isNotBlank", "isNotBlank", "setIpAddress", "setMacAddress", "setEnds", "setBindingState", "isNotBlank", "setStarts", "isNotBlank", "setClientHostname", "debug", "toString"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}