{"test_class": {"identifier": "PrivilegeManagerFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/security/authorization/PrivilegeManagerFacadeTest.java"}, "test_case": {"identifier": "testGetPrivilege", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPrivilege() throws Exception {\n        PrivilegeManager delegate = mock(PrivilegeManager.class);\n        PrivilegeManagerFacade facade = getFacade(delegate);\n        final String name = \"name\";\n        final Privilege value = mock(Privilege.class);\n        when(delegate.getPrivilege(name)).thenReturn(value);\n        assertSame(\"is same value\", value, facade.getPrivilege(name));\n    }", "signature": "void testGetPrivilege()", "full_signature": "@Test public void testGetPrivilege()", "class_method_signature": "PrivilegeManagerFacadeTest.testGetPrivilege()", "testcase": true, "constructor": false, "invocations": ["mock", "getFacade", "mock", "thenReturn", "when", "getPrivilege", "assertSame", "getPrivilege"]}, "focal_class": {"identifier": "PrivilegeManagerFacade", "superclass": "", "interfaces": "implements PrivilegeManager", "fields": [{"original_string": "private final @NotNull PrivilegeManager delegate;", "modifier": "private final @NotNull", "type": "PrivilegeManager", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "PrivilegeManagerFacade", "parameters": "(final @NotNull PrivilegeManager delegate)", "modifiers": "public", "return": "", "signature": " PrivilegeManagerFacade(final @NotNull PrivilegeManager delegate)", "full_signature": "public  PrivilegeManagerFacade(final @NotNull PrivilegeManager delegate)", "class_method_signature": "PrivilegeManagerFacade.PrivilegeManagerFacade(final @NotNull PrivilegeManager delegate)", "testcase": false, "constructor": true}, {"identifier": "getRegisteredPrivileges", "parameters": "()", "modifiers": "@Override public", "return": "Privilege[]", "signature": "Privilege[] getRegisteredPrivileges()", "full_signature": "@Override public Privilege[] getRegisteredPrivileges()", "class_method_signature": "PrivilegeManagerFacade.getRegisteredPrivileges()", "testcase": false, "constructor": false}, {"identifier": "getPrivilege", "parameters": "(final String privilegeName)", "modifiers": "@Override public", "return": "Privilege", "signature": "Privilege getPrivilege(final String privilegeName)", "full_signature": "@Override public Privilege getPrivilege(final String privilegeName)", "class_method_signature": "PrivilegeManagerFacade.getPrivilege(final String privilegeName)", "testcase": false, "constructor": false}, {"identifier": "registerPrivilege", "parameters": "(final String privilegeName,\n                                       final boolean isAbstract,\n                                       final String[] declaredAggregateNames)", "modifiers": "@Override public", "return": "Privilege", "signature": "Privilege registerPrivilege(final String privilegeName,\n                                       final boolean isAbstract,\n                                       final String[] declaredAggregateNames)", "full_signature": "@Override public Privilege registerPrivilege(final String privilegeName,\n                                       final boolean isAbstract,\n                                       final String[] declaredAggregateNames)", "class_method_signature": "PrivilegeManagerFacade.registerPrivilege(final String privilegeName,\n                                       final boolean isAbstract,\n                                       final String[] declaredAggregateNames)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/security/authorization/PrivilegeManagerFacade.java"}, "focal_method": {"identifier": "getPrivilege", "parameters": "(final String privilegeName)", "modifiers": "@Override public", "return": "Privilege", "body": "@Override\n    public Privilege getPrivilege(final String privilegeName) throws RepositoryException {\n        return delegate.getPrivilege(privilegeName);\n    }", "signature": "Privilege getPrivilege(final String privilegeName)", "full_signature": "@Override public Privilege getPrivilege(final String privilegeName)", "class_method_signature": "PrivilegeManagerFacade.getPrivilege(final String privilegeName)", "testcase": false, "constructor": false, "invocations": ["getPrivilege"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}