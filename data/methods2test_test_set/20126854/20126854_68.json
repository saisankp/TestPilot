{"test_class": {"identifier": "FileByFileV1DeltaGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/FileByFileV1DeltaGeneratorTest.java"}, "test_case": {"identifier": "testGenerateDelta_BaseCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGenerateDelta_BaseCase() throws Exception {\n    // Simple test of generating a patch with no changes.\n    FileByFileV1DeltaGenerator generator = new FileByFileV1DeltaGenerator();\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    try (TempFileHolder oldArchive = new TempFileHolder();\n        TempFileHolder newArchive = new TempFileHolder()) {\n      UnitTestZipArchive.saveTestZip(oldArchive.file);\n      UnitTestZipArchive.saveTestZip(newArchive.file);\n      generator.generateDelta(oldArchive.file, newArchive.file, buffer);\n    }\n    byte[] result = buffer.toByteArray();\n    Assert.assertTrue(result.length > 0);\n  }", "signature": "void testGenerateDelta_BaseCase()", "full_signature": "@Test public void testGenerateDelta_BaseCase()", "class_method_signature": "FileByFileV1DeltaGeneratorTest.testGenerateDelta_BaseCase()", "testcase": true, "constructor": false, "invocations": ["saveTestZip", "saveTestZip", "generateDelta", "toByteArray", "assertTrue"]}, "focal_class": {"identifier": "FileByFileV1DeltaGenerator", "superclass": "", "interfaces": "implements DeltaGenerator", "fields": [{"original_string": "private final List<RecommendationModifier> recommendationModifiers;", "modifier": "private final", "type": "List<RecommendationModifier>", "declarator": "recommendationModifiers", "var_name": "recommendationModifiers"}], "methods": [{"identifier": "FileByFileV1DeltaGenerator", "parameters": "(RecommendationModifier... recommendationModifiers)", "modifiers": "public", "return": "", "signature": " FileByFileV1DeltaGenerator(RecommendationModifier... recommendationModifiers)", "full_signature": "public  FileByFileV1DeltaGenerator(RecommendationModifier... recommendationModifiers)", "class_method_signature": "FileByFileV1DeltaGenerator.FileByFileV1DeltaGenerator(RecommendationModifier... recommendationModifiers)", "testcase": false, "constructor": true}, {"identifier": "generateDelta", "parameters": "(File oldFile, File newFile, OutputStream patchOut)", "modifiers": "@Override public", "return": "void", "signature": "void generateDelta(File oldFile, File newFile, OutputStream patchOut)", "full_signature": "@Override public void generateDelta(File oldFile, File newFile, OutputStream patchOut)", "class_method_signature": "FileByFileV1DeltaGenerator.generateDelta(File oldFile, File newFile, OutputStream patchOut)", "testcase": false, "constructor": false}, {"identifier": "getDeltaGenerator", "parameters": "()", "modifiers": "protected", "return": "DeltaGenerator", "signature": "DeltaGenerator getDeltaGenerator()", "full_signature": "protected DeltaGenerator getDeltaGenerator()", "class_method_signature": "FileByFileV1DeltaGenerator.getDeltaGenerator()", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/FileByFileV1DeltaGenerator.java"}, "focal_method": {"identifier": "generateDelta", "parameters": "(File oldFile, File newFile, OutputStream patchOut)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void generateDelta(File oldFile, File newFile, OutputStream patchOut)\n      throws IOException, InterruptedException {\n    try (TempFileHolder deltaFriendlyOldFile = new TempFileHolder();\n        TempFileHolder deltaFriendlyNewFile = new TempFileHolder();\n        TempFileHolder deltaFile = new TempFileHolder();\n        FileOutputStream deltaFileOut = new FileOutputStream(deltaFile.file);\n        BufferedOutputStream bufferedDeltaOut = new BufferedOutputStream(deltaFileOut)) {\n      PreDiffExecutor.Builder builder =\n          new PreDiffExecutor.Builder()\n              .readingOriginalFiles(oldFile, newFile)\n              .writingDeltaFriendlyFiles(deltaFriendlyOldFile.file, deltaFriendlyNewFile.file);\n      for (RecommendationModifier modifier : recommendationModifiers) {\n        builder.withRecommendationModifier(modifier);\n      }\n      PreDiffExecutor executor = builder.build();\n      PreDiffPlan preDiffPlan = executor.prepareForDiffing();\n      DeltaGenerator deltaGenerator = getDeltaGenerator();\n      deltaGenerator.generateDelta(\n          deltaFriendlyOldFile.file, deltaFriendlyNewFile.file, bufferedDeltaOut);\n      bufferedDeltaOut.close();\n      PatchWriter patchWriter =\n          new PatchWriter(\n              preDiffPlan,\n              deltaFriendlyOldFile.file.length(),\n              deltaFriendlyNewFile.file.length(),\n              deltaFile.file);\n      patchWriter.writeV1Patch(patchOut);\n    }\n  }", "signature": "void generateDelta(File oldFile, File newFile, OutputStream patchOut)", "full_signature": "@Override public void generateDelta(File oldFile, File newFile, OutputStream patchOut)", "class_method_signature": "FileByFileV1DeltaGenerator.generateDelta(File oldFile, File newFile, OutputStream patchOut)", "testcase": false, "constructor": false, "invocations": ["writingDeltaFriendlyFiles", "readingOriginalFiles", "withRecommendationModifier", "build", "prepareForDiffing", "getDeltaGenerator", "generateDelta", "close", "length", "length", "writeV1Patch"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}