{"test_class": {"identifier": "BasicParamPreparerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BasicParamPreparer paramPreparer;", "modifier": "private", "type": "BasicParamPreparer", "declarator": "paramPreparer", "var_name": "paramPreparer"}, {"original_string": "private LevelPreparer levelPreparer;", "modifier": "private", "type": "LevelPreparer", "declarator": "levelPreparer", "var_name": "levelPreparer"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/core/prepared/BasicParamPreparerTest.java"}, "test_case": {"identifier": "shouldInsertLightParameterEntriesIntoIndexWhenParameterHasNoIdentifyEntriesFlagSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldInsertLightParameterEntriesIntoIndexWhenParameterHasNoIdentifyEntriesFlagSet() {\n        // given\n        Level[] levels = new Level[]{\n            level().withName(\"outputLevel\").withType(\"type\").build()\n        };\n        ParameterEntry[] entries = new ParameterEntry[]{\n            parameterEntry().withLevels(\"hello\").build()\n        };\n        Parameter parameter = parameter().withName(\"param\").withInputLevels(0)\n                .withLevels(levels).withEntries(entries).build();\n        when(levelPreparer.prepare(any(Level.class))).thenReturn(preparedLevel().build()).thenReturn(preparedLevel().withName(\"outputLevel\").build());\n\n        // when\n        PreparedParameter preparedParameter = paramPreparer.prepare(new ParameterFromRepository(parameter, RepositoryName.from(\"test\")));\n\n        // then\n        FastLevelIndexWalker<PreparedEntry> walker = new FastLevelIndexWalker<PreparedEntry>(preparedParameter.getIndex());\n        assertThat(walker.find().get(0)).isExactlyInstanceOf(PreparedEntry.class);\n    }", "signature": "void shouldInsertLightParameterEntriesIntoIndexWhenParameterHasNoIdentifyEntriesFlagSet()", "full_signature": "@Test public void shouldInsertLightParameterEntriesIntoIndexWhenParameterHasNoIdentifyEntriesFlagSet()", "class_method_signature": "BasicParamPreparerTest.shouldInsertLightParameterEntriesIntoIndexWhenParameterHasNoIdentifyEntriesFlagSet()", "testcase": true, "constructor": false, "invocations": ["build", "withType", "withName", "level", "build", "withLevels", "parameterEntry", "build", "withEntries", "withLevels", "withInputLevels", "withName", "parameter", "thenReturn", "thenReturn", "when", "prepare", "any", "build", "preparedLevel", "build", "withName", "preparedLevel", "prepare", "from", "getIndex", "isExactlyInstanceOf", "assertThat", "get", "find"]}, "focal_class": {"identifier": "BasicParamPreparer", "superclass": "", "interfaces": "implements ParamPreparer", "fields": [{"original_string": "private final LevelPreparer levelPreparer;", "modifier": "private final", "type": "LevelPreparer", "declarator": "levelPreparer", "var_name": "levelPreparer"}], "methods": [{"identifier": "BasicParamPreparer", "parameters": "(LevelPreparer levelPreparer)", "modifiers": "public", "return": "", "signature": " BasicParamPreparer(LevelPreparer levelPreparer)", "full_signature": "public  BasicParamPreparer(LevelPreparer levelPreparer)", "class_method_signature": "BasicParamPreparer.BasicParamPreparer(LevelPreparer levelPreparer)", "testcase": false, "constructor": true}, {"identifier": "prepare", "parameters": "(ParameterFromRepository parameterFromRepository)", "modifiers": "@Override public", "return": "PreparedParameter", "signature": "PreparedParameter prepare(ParameterFromRepository parameterFromRepository)", "full_signature": "@Override public PreparedParameter prepare(ParameterFromRepository parameterFromRepository)", "class_method_signature": "BasicParamPreparer.prepare(ParameterFromRepository parameterFromRepository)", "testcase": false, "constructor": false}, {"identifier": "buildIndex", "parameters": "(Parameter parameter, Type<?>[] types, Matcher[] matchers)", "modifiers": "private", "return": "LevelIndex<PreparedEntry>", "signature": "LevelIndex<PreparedEntry> buildIndex(Parameter parameter, Type<?>[] types, Matcher[] matchers)", "full_signature": "private LevelIndex<PreparedEntry> buildIndex(Parameter parameter, Type<?>[] types, Matcher[] matchers)", "class_method_signature": "BasicParamPreparer.buildIndex(Parameter parameter, Type<?>[] types, Matcher[] matchers)", "testcase": false, "constructor": false}, {"identifier": "buildLevelNameToIndexMap", "parameters": "(PreparedParameter preparedParameter)", "modifiers": "private", "return": "Map<String, Integer>", "signature": "Map<String, Integer> buildLevelNameToIndexMap(PreparedParameter preparedParameter)", "full_signature": "private Map<String, Integer> buildLevelNameToIndexMap(PreparedParameter preparedParameter)", "class_method_signature": "BasicParamPreparer.buildLevelNameToIndexMap(PreparedParameter preparedParameter)", "testcase": false, "constructor": false}, {"identifier": "getLevelCount", "parameters": "(Parameter parameter)", "modifiers": "private", "return": "int", "signature": "int getLevelCount(Parameter parameter)", "full_signature": "private int getLevelCount(Parameter parameter)", "class_method_signature": "BasicParamPreparer.getLevelCount(Parameter parameter)", "testcase": false, "constructor": false}, {"identifier": "getLevel", "parameters": "(Parameter parameter, int index)", "modifiers": "private", "return": "Level", "signature": "Level getLevel(Parameter parameter, int index)", "full_signature": "private Level getLevel(Parameter parameter, int index)", "class_method_signature": "BasicParamPreparer.getLevel(Parameter parameter, int index)", "testcase": false, "constructor": false}, {"identifier": "getFirstNLevels", "parameters": "(ParameterEntry parameterEntry, int levelCount)", "modifiers": "private", "return": "String[]", "signature": "String[] getFirstNLevels(ParameterEntry parameterEntry, int levelCount)", "full_signature": "private String[] getFirstNLevels(ParameterEntry parameterEntry, int levelCount)", "class_method_signature": "BasicParamPreparer.getFirstNLevels(ParameterEntry parameterEntry, int levelCount)", "testcase": false, "constructor": false}, {"identifier": "prepareIdentifiableEntry", "parameters": "(ParameterEntry parameterEntry)", "modifiers": "@Override public", "return": "PreparedEntry", "signature": "PreparedEntry prepareIdentifiableEntry(ParameterEntry parameterEntry)", "full_signature": "@Override public PreparedEntry prepareIdentifiableEntry(ParameterEntry parameterEntry)", "class_method_signature": "BasicParamPreparer.prepareIdentifiableEntry(ParameterEntry parameterEntry)", "testcase": false, "constructor": false}, {"identifier": "prepareEntry", "parameters": "(ParameterEntry parameterEntry, boolean identifyEntries)", "modifiers": "private", "return": "PreparedEntry", "signature": "PreparedEntry prepareEntry(ParameterEntry parameterEntry, boolean identifyEntries)", "full_signature": "private PreparedEntry prepareEntry(ParameterEntry parameterEntry, boolean identifyEntries)", "class_method_signature": "BasicParamPreparer.prepareEntry(ParameterEntry parameterEntry, boolean identifyEntries)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/core/prepared/BasicParamPreparer.java"}, "focal_method": {"identifier": "prepare", "parameters": "(ParameterFromRepository parameterFromRepository)", "modifiers": "@Override public", "return": "PreparedParameter", "body": "@Override\n    public PreparedParameter prepare(ParameterFromRepository parameterFromRepository) {\n        Parameter parameter = parameterFromRepository.parameter();\n\n        int levelCount = getLevelCount(parameter);\n        PreparedLevel[] levels = new PreparedLevel[levelCount];\n        Type<?>[] types = new Type<?>[levelCount];\n        Matcher[] matchers = new Matcher[levelCount];\n\n        for (int currentLevelIndex = 0; currentLevelIndex < levelCount; currentLevelIndex++) {\n            Level level = getLevel(parameter, currentLevelIndex);\n            PreparedLevel preparedLevel = levelPreparer.prepare(level);\n\n            levels[currentLevelIndex] = preparedLevel;\n            types[currentLevelIndex] = preparedLevel.getType();\n            matchers[currentLevelIndex] = preparedLevel.getMatcher();\n        }\n\n        PreparedParameter preparedParameter = new PreparedParameter(parameterFromRepository.repositoryName(), parameter, levels);\n        preparedParameter.setLevelNameMap(buildLevelNameToIndexMap(preparedParameter));\n\n        if (parameter.isCacheable()) {\n            preparedParameter.setIndex(buildIndex(parameter, types, matchers));\n        }\n\n        return preparedParameter;\n    }", "signature": "PreparedParameter prepare(ParameterFromRepository parameterFromRepository)", "full_signature": "@Override public PreparedParameter prepare(ParameterFromRepository parameterFromRepository)", "class_method_signature": "BasicParamPreparer.prepare(ParameterFromRepository parameterFromRepository)", "testcase": false, "constructor": false, "invocations": ["parameter", "getLevelCount", "getLevel", "prepare", "getType", "getMatcher", "repositoryName", "setLevelNameMap", "buildLevelNameToIndexMap", "isCacheable", "setIndex", "buildIndex"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}