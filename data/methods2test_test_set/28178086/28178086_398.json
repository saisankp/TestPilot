{"test_class": {"identifier": "SeasonalOutlierTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/timeseries/regression/SeasonalOutlierTest.java"}, "test_case": {"identifier": "testAround", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAround() {\n        TsPeriod pos = new TsPeriod(TsFrequency.Monthly, 2000, 3);\n        SeasonalOutlier so1 = new SeasonalOutlier(pos.firstday());\n        // \n        for (int i = -6; i < 6; ++i) {\n            DataBlock data = new DataBlock(12);\n            so1.data(pos.minus(i), data);\n        }\n    }", "signature": "void testAround()", "full_signature": "@Test public void testAround()", "class_method_signature": "SeasonalOutlierTest.testAround()", "testcase": true, "constructor": false, "invocations": ["firstday", "data", "minus"]}, "focal_class": {"identifier": "SeasonalOutlier", "superclass": "extends AbstractOutlierVariable", "interfaces": "", "fields": [{"original_string": "public static final String CODE=\"SO\";", "modifier": "public static final", "type": "String", "declarator": "CODE=\"SO\"", "var_name": "CODE"}, {"original_string": "boolean zeroEnded;", "modifier": "", "type": "boolean", "declarator": "zeroEnded", "var_name": "zeroEnded"}], "methods": [{"identifier": "SeasonalOutlier", "parameters": "(Day pos)", "modifiers": "public", "return": "", "signature": " SeasonalOutlier(Day pos)", "full_signature": "public  SeasonalOutlier(Day pos)", "class_method_signature": "SeasonalOutlier.SeasonalOutlier(Day pos)", "testcase": false, "constructor": true}, {"identifier": "data", "parameters": "(TsPeriod start, DataBlock data)", "modifiers": "@Override public", "return": "void", "signature": "void data(TsPeriod start, DataBlock data)", "full_signature": "@Override public void data(TsPeriod start, DataBlock data)", "class_method_signature": "SeasonalOutlier.data(TsPeriod start, DataBlock data)", "testcase": false, "constructor": false}, {"identifier": "getOutlierType", "parameters": "()", "modifiers": "@Override public", "return": "OutlierType", "signature": "OutlierType getOutlierType()", "full_signature": "@Override public OutlierType getOutlierType()", "class_method_signature": "SeasonalOutlier.getOutlierType()", "testcase": false, "constructor": false}, {"identifier": "getCode", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCode()", "full_signature": "public String getCode()", "class_method_signature": "SeasonalOutlier.getCode()", "testcase": false, "constructor": false}, {"identifier": "isSignificant", "parameters": "(TsDomain domain)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSignificant(TsDomain domain)", "full_signature": "@Override public boolean isSignificant(TsDomain domain)", "class_method_signature": "SeasonalOutlier.isSignificant(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "isZeroEnded", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isZeroEnded()", "full_signature": "public boolean isZeroEnded()", "class_method_signature": "SeasonalOutlier.isZeroEnded()", "testcase": false, "constructor": false}, {"identifier": "setZeroEnded", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setZeroEnded(boolean value)", "full_signature": "public void setZeroEnded(boolean value)", "class_method_signature": "SeasonalOutlier.setZeroEnded(boolean value)", "testcase": false, "constructor": false}, {"identifier": "getFilterRepresentation", "parameters": "(int freq)", "modifiers": "@Override public", "return": "FilterRepresentation", "signature": "FilterRepresentation getFilterRepresentation(int freq)", "full_signature": "@Override public FilterRepresentation getFilterRepresentation(int freq)", "class_method_signature": "SeasonalOutlier.getFilterRepresentation(int freq)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/timeseries/regression/SeasonalOutlier.java"}, "focal_method": {"identifier": "data", "parameters": "(TsPeriod start, DataBlock data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void data(TsPeriod start, DataBlock data) {\n        TsPeriod pstart=new TsPeriod(start.getFrequency(), position);\n        int pos = pstart.minus(start);\n        data.set(0);\n        int freq = start.getFrequency().intValue();\n\n        double z = -1.0 / (freq - 1);\n        int xpos;\n        int len = data.getLength();\n        if (zeroEnded) {\n            int j = 1;\n            if (pos < 0) {\n                return;\n            } else if (pos > len) {\n                int n = pos - len;\n                j = 1 + n % freq;\n                xpos = len;\n            } else {\n                xpos = pos;\n            }\n            do {\n                for (; j < freq && xpos > 0; ++j) {\n                    data.set(--xpos, z);\n                }\n                if (xpos > 0) {\n                    data.set(--xpos, 1);\n                } else {\n                    break;\n                }\n                j = 1;\n            } while (true);\n        } else {\n            if (pos < 0) {\n                xpos = pos % freq;\n            } else {\n                xpos = pos;\n            }\n            if (xpos < 0) {\n                int max=Math.min(len, freq + xpos);\n                for (int j = 0; j < max; ++j) {\n                    data.set(j, z);\n                }\n                xpos += freq;\n\n            }\n\n            for (int i = xpos; i < len;) {\n                data.set(i++, 1);\n                for (int j = 1; j < freq && i < len; ++i, ++j) {\n                    data.set(i, z);\n                }\n            }\n        }\n    }", "signature": "void data(TsPeriod start, DataBlock data)", "full_signature": "@Override public void data(TsPeriod start, DataBlock data)", "class_method_signature": "SeasonalOutlier.data(TsPeriod start, DataBlock data)", "testcase": false, "constructor": false, "invocations": ["getFrequency", "minus", "set", "intValue", "getFrequency", "getLength", "set", "set", "min", "set", "set", "set"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}