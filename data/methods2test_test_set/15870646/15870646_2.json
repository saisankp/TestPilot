{"test_class": {"identifier": "CheapAngleMeterTest", "superclass": "", "interfaces": "", "fields": [], "file": "brouter-util/src/test/java/btools/util/CheapAngleMeterTest.java"}, "test_case": {"identifier": "testCalcAngle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCalcAngle() {\n    CheapAngleMeter am = new CheapAngleMeter();\n    // Segment ends\n    int lon0, lat0, lon1, lat1, lon2, lat2;\n\n    lon0 = toOsmLon(2.317126);\n    lat0 = toOsmLat(48.817927);\n    lon1 = toOsmLon(2.317316);\n    lat1 = toOsmLat(48.817978);\n    lon2 = toOsmLon(2.317471);\n    lat2 = toOsmLat(48.818043);\n    assertEquals(\n      \"Works for an angle between -pi/4 and pi/4\",\n      -10.,\n      am.calcAngle(lon0, lat0, lon1, lat1, lon2, lat2),\n      0.05 * 10.\n    );\n\n    lon0 = toOsmLon(2.317020662874013);\n    lat0 = toOsmLat(48.81799440182911);\n    lon1 = toOsmLon(2.3169460585876327);\n    lat1 = toOsmLat(48.817812421536644);\n    lon2 = lon0;\n    lat2 = lat0;\n    assertEquals(\n      \"Works for an angle between 3*pi/4 and 5*pi/4\",\n      180.,\n      am.calcAngle(lon0, lat0, lon1, lat1, lon2, lat2),\n      0.05 * 180.\n    );\n\n    lon0 = toOsmLon(2.317112);\n    lat0 = toOsmLat(48.817802);\n    lon1 = toOsmLon(2.317632);\n    lat1 = toOsmLat(48.817944);\n    lon2 = toOsmLon(2.317673);\n    lat2 = toOsmLat(48.817799);\n    assertEquals(\n      \"Works for an angle between -3*pi/4 and -pi/4\",\n      100.,\n      am.calcAngle(lon0, lat0, lon1, lat1, lon2, lat2),\n      0.1 * 100.\n    );\n\n    lon0 = toOsmLon(2.317128);\n    lat0 = toOsmLat(48.818072);\n    lon1 = toOsmLon(2.317532);\n    lat1 = toOsmLat(48.818108);\n    lon2 = toOsmLon(2.317497);\n    lat2 = toOsmLat(48.818264);\n    assertEquals(\n      \"Works for an angle between pi/4 and 3*pi/4\",\n      -100.,\n      am.calcAngle(lon0, lat0, lon1, lat1, lon2, lat2),\n      0.1 * 100.\n    );\n  }", "signature": "void testCalcAngle()", "full_signature": "@Test public void testCalcAngle()", "class_method_signature": "CheapAngleMeterTest.testCalcAngle()", "testcase": true, "constructor": false, "invocations": ["toOsmLon", "toOsmLat", "toOsmLon", "toOsmLat", "toOsmLon", "toOsmLat", "assertEquals", "calcAngle", "toOsmLon", "toOsmLat", "toOsmLon", "toOsmLat", "assertEquals", "calcAngle", "toOsmLon", "toOsmLat", "toOsmLon", "toOsmLat", "toOsmLon", "toOsmLat", "assertEquals", "calcAngle", "toOsmLon", "toOsmLat", "toOsmLon", "toOsmLat", "toOsmLon", "toOsmLat", "assertEquals", "calcAngle"]}, "focal_class": {"identifier": "CheapAngleMeter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double cosangle;", "modifier": "private", "type": "double", "declarator": "cosangle", "var_name": "cosangle"}], "methods": [{"identifier": "getCosAngle", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCosAngle()", "full_signature": "public double getCosAngle()", "class_method_signature": "CheapAngleMeter.getCosAngle()", "testcase": false, "constructor": false}, {"identifier": "calcAngle", "parameters": "( int lon0, int lat0,  int lon1, int lat1, int lon2, int lat2 )", "modifiers": "public", "return": "double", "signature": "double calcAngle( int lon0, int lat0,  int lon1, int lat1, int lon2, int lat2 )", "full_signature": "public double calcAngle( int lon0, int lat0,  int lon1, int lat1, int lon2, int lat2 )", "class_method_signature": "CheapAngleMeter.calcAngle( int lon0, int lat0,  int lon1, int lat1, int lon2, int lat2 )", "testcase": false, "constructor": false}], "file": "brouter-util/src/main/java/btools/util/CheapAngleMeter.java"}, "focal_method": {"identifier": "calcAngle", "parameters": "( int lon0, int lat0,  int lon1, int lat1, int lon2, int lat2 )", "modifiers": "public", "return": "double", "body": "public double calcAngle( int lon0, int lat0,  int lon1, int lat1, int lon2, int lat2 )\n  {\n    double[] lonlat2m = CheapRuler.getLonLatToMeterScales( lat1 );\n    double lon2m = lonlat2m[0];\n    double lat2m = lonlat2m[1];\n    double dx10 = (lon1 - lon0) * lon2m;\n    double dy10 = (lat1 - lat0) * lat2m;\n    double dx21 = (lon2 - lon1) * lon2m;\n    double dy21 = (lat2 - lat1) * lat2m;\n\n    double dd = Math.sqrt( (dx10*dx10 + dy10*dy10)*(dx21*dx21 + dy21*dy21) );\n    if ( dd == 0. ) { cosangle = 1.; return 0.; }\n    double sinp = (dy10*dx21 - dx10*dy21)/dd;\n    double cosp = (dy10*dy21 + dx10*dx21)/dd;\n    cosangle = cosp;\n\n    double offset = 0.;\n    double s2 = sinp*sinp;\n    if ( s2 > 0.5 )\n    {\n      if ( sinp > 0. )\n      {\n        offset = 90.;\n        sinp = -cosp;\n      }\n      else\n      {\n        offset = -90.;\n        sinp = cosp;\n      }\n      s2 = cosp*cosp;\n    }\n    else if ( cosp < 0. )\n    {\n      sinp = -sinp;\n      offset = sinp > 0. ? -180. : 180.;\n    }\n    return offset + sinp * ( 57.4539 + s2 * ( 9.57565 + s2 * ( 4.30904 + s2 * 2.56491 ) ) );\n  }", "signature": "double calcAngle( int lon0, int lat0,  int lon1, int lat1, int lon2, int lat2 )", "full_signature": "public double calcAngle( int lon0, int lat0,  int lon1, int lat1, int lon2, int lat2 )", "class_method_signature": "CheapAngleMeter.calcAngle( int lon0, int lat0,  int lon1, int lat1, int lon2, int lat2 )", "testcase": false, "constructor": false, "invocations": ["getLonLatToMeterScales", "sqrt"]}, "repository": {"repo_id": 15870646, "url": "https://github.com/abrensch/brouter", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 172, "size": 3569, "license": "licensed"}}