{"test_class": {"identifier": "GeoLocationAreaTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private Point2d coords11m;", "modifier": "private", "type": "Point2d", "declarator": "coords11m", "var_name": "coords11m"}, {"original_string": "private Point2d coords11x;", "modifier": "private", "type": "Point2d", "declarator": "coords11x", "var_name": "coords11x"}, {"original_string": "private Point2d coords12m;", "modifier": "private", "type": "Point2d", "declarator": "coords12m", "var_name": "coords12m"}, {"original_string": "private Point2d coords12x;", "modifier": "private", "type": "Point2d", "declarator": "coords12x", "var_name": "coords12x"}, {"original_string": "private Point2d coords21m;", "modifier": "private", "type": "Point2d", "declarator": "coords21m", "var_name": "coords21m"}, {"original_string": "private Point2d coords21x;", "modifier": "private", "type": "Point2d", "declarator": "coords21x", "var_name": "coords21x"}, {"original_string": "private Point2d coords22m;", "modifier": "private", "type": "Point2d", "declarator": "coords22m", "var_name": "coords22m"}, {"original_string": "private Point2d coords22x;", "modifier": "private", "type": "Point2d", "declarator": "coords22x", "var_name": "coords22x"}, {"original_string": "private GeoLocationArea location11;", "modifier": "private", "type": "GeoLocationArea", "declarator": "location11", "var_name": "location11"}, {"original_string": "private GeoLocationArea location12;", "modifier": "private", "type": "GeoLocationArea", "declarator": "location12", "var_name": "location12"}, {"original_string": "private GeoLocationArea location13;", "modifier": "private", "type": "GeoLocationArea", "declarator": "location13", "var_name": "location13"}, {"original_string": "private GeoLocationArea location21;", "modifier": "private", "type": "GeoLocationArea", "declarator": "location21", "var_name": "location21"}, {"original_string": "private GeoLocationArea location22;", "modifier": "private", "type": "GeoLocationArea", "declarator": "location22", "var_name": "location22"}, {"original_string": "private GeoLocationArea location23;", "modifier": "private", "type": "GeoLocationArea", "declarator": "location23", "var_name": "location23"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/location/GeoLocationAreaTest.java"}, "test_case": {"identifier": "testGetY", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetY() {\n\t\tassertEpsilonEquals(GeoLocationUtil.castDistance(this.coords11m.getY()), this.location11.getY());\n\t\tassertEpsilonEquals(GeoLocationUtil.castDistance(this.coords11m.getY()), this.location12.getY());\n\t\tassertEpsilonEquals(GeoLocationUtil.castDistance(this.coords12m.getY()), this.location13.getY());\n\t\tassertEpsilonEquals(GeoLocationUtil.castDistance(this.coords21m.getY()), this.location21.getY());\n\t\tassertEpsilonEquals(GeoLocationUtil.castDistance(this.coords21m.getY()), this.location22.getY());\n\t\tassertEpsilonEquals(GeoLocationUtil.castDistance(this.coords22m.getY()), this.location23.getY());\n\t}", "signature": "void testGetY()", "full_signature": "@Test public void testGetY()", "class_method_signature": "GeoLocationAreaTest.testGetY()", "testcase": true, "constructor": false, "invocations": ["assertEpsilonEquals", "castDistance", "getY", "getY", "assertEpsilonEquals", "castDistance", "getY", "getY", "assertEpsilonEquals", "castDistance", "getY", "getY", "assertEpsilonEquals", "castDistance", "getY", "getY", "assertEpsilonEquals", "castDistance", "getY", "getY", "assertEpsilonEquals", "castDistance", "getY", "getY"]}, "focal_class": {"identifier": "GeoLocationArea", "superclass": "extends AbstractGeoLocation", "interfaces": "", "fields": [{"original_string": "private final float x1;", "modifier": "private final", "type": "float", "declarator": "x1", "var_name": "x1"}, {"original_string": "private final float y1;", "modifier": "private final", "type": "float", "declarator": "y1", "var_name": "y1"}, {"original_string": "private final float x2;", "modifier": "private final", "type": "float", "declarator": "x2", "var_name": "x2"}, {"original_string": "private final float y2;", "modifier": "private final", "type": "float", "declarator": "y2", "var_name": "y2"}], "methods": [{"identifier": "GeoLocationArea", "parameters": "(double x1, double y1, double x2, double y2)", "modifiers": "public", "return": "", "signature": " GeoLocationArea(double x1, double y1, double x2, double y2)", "full_signature": "public  GeoLocationArea(double x1, double y1, double x2, double y2)", "class_method_signature": "GeoLocationArea.GeoLocationArea(double x1, double y1, double x2, double y2)", "testcase": false, "constructor": true}, {"identifier": "GeoLocationArea", "parameters": "(Shape2d<?> area)", "modifiers": "public", "return": "", "signature": " GeoLocationArea(Shape2d<?> area)", "full_signature": "public  GeoLocationArea(Shape2d<?> area)", "class_method_signature": "GeoLocationArea.GeoLocationArea(Shape2d<?> area)", "testcase": false, "constructor": true}, {"identifier": "toGeoId", "parameters": "()", "modifiers": "@Pure @Override public", "return": "GeoId", "signature": "GeoId toGeoId()", "full_signature": "@Pure @Override public GeoId toGeoId()", "class_method_signature": "GeoLocationArea.toGeoId()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Pure @Override @SuppressWarnings(\"checkstyle:equalshashcode\") public", "return": "int", "signature": "int hashCode()", "full_signature": "@Pure @Override @SuppressWarnings(\"checkstyle:equalshashcode\") public int hashCode()", "class_method_signature": "GeoLocationArea.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getMinX", "parameters": "()", "modifiers": "@Pure public", "return": "float", "signature": "float getMinX()", "full_signature": "@Pure public float getMinX()", "class_method_signature": "GeoLocationArea.getMinX()", "testcase": false, "constructor": false}, {"identifier": "getMinY", "parameters": "()", "modifiers": "@Pure public", "return": "float", "signature": "float getMinY()", "full_signature": "@Pure public float getMinY()", "class_method_signature": "GeoLocationArea.getMinY()", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "()", "modifiers": "@Pure public", "return": "float", "signature": "float getX()", "full_signature": "@Pure public float getX()", "class_method_signature": "GeoLocationArea.getX()", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "()", "modifiers": "@Pure public", "return": "float", "signature": "float getY()", "full_signature": "@Pure public float getY()", "class_method_signature": "GeoLocationArea.getY()", "testcase": false, "constructor": false}, {"identifier": "getMaxX", "parameters": "()", "modifiers": "@Pure public", "return": "float", "signature": "float getMaxX()", "full_signature": "@Pure public float getMaxX()", "class_method_signature": "GeoLocationArea.getMaxX()", "testcase": false, "constructor": false}, {"identifier": "getMaxY", "parameters": "()", "modifiers": "@Pure public", "return": "float", "signature": "float getMaxY()", "full_signature": "@Pure public float getMaxY()", "class_method_signature": "GeoLocationArea.getMaxY()", "testcase": false, "constructor": false}, {"identifier": "getWidth", "parameters": "()", "modifiers": "@Pure public", "return": "float", "signature": "float getWidth()", "full_signature": "@Pure public float getWidth()", "class_method_signature": "GeoLocationArea.getWidth()", "testcase": false, "constructor": false}, {"identifier": "getHeight", "parameters": "()", "modifiers": "@Pure public", "return": "float", "signature": "float getHeight()", "full_signature": "@Pure public float getHeight()", "class_method_signature": "GeoLocationArea.getHeight()", "testcase": false, "constructor": false}, {"identifier": "toBounds2D", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Rectangle2d", "signature": "Rectangle2d toBounds2D()", "full_signature": "@Pure @Override public Rectangle2d toBounds2D()", "class_method_signature": "GeoLocationArea.toBounds2D()", "testcase": false, "constructor": false}, {"identifier": "toGeodesicPosition", "parameters": "()", "modifiers": "@Pure @Override public", "return": "GeodesicPosition", "signature": "GeodesicPosition toGeodesicPosition()", "full_signature": "@Pure @Override public GeodesicPosition toGeodesicPosition()", "class_method_signature": "GeoLocationArea.toGeodesicPosition()", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/location/GeoLocationArea.java"}, "focal_method": {"identifier": "getY", "parameters": "()", "modifiers": "@Pure public", "return": "float", "body": "@Pure\n\tpublic float getY() {\n\t\treturn this.y1;\n\t}", "signature": "float getY()", "full_signature": "@Pure public float getY()", "class_method_signature": "GeoLocationArea.getY()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}