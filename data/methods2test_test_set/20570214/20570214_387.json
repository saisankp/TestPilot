{"test_class": {"identifier": "MacWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int HMAC_KEY_SIZE = 20;", "modifier": "private static final", "type": "int", "declarator": "HMAC_KEY_SIZE = 20", "var_name": "HMAC_KEY_SIZE"}], "file": "java_src/src/test/java/com/google/crypto/tink/mac/MacWrapperTest.java"}, "test_case": {"identifier": "testSmallPlaintextWithRawKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSmallPlaintextWithRawKey() throws Exception {\n    byte[] keyValue = Random.randBytes(HMAC_KEY_SIZE);\n    Key primary = TestUtil.createKey(\n        TestUtil.createHmacKeyData(keyValue, 16),\n        42,\n        KeyStatusType.ENABLED,\n        OutputPrefixType.RAW);\n    KeysetHandle keysetHandle = TestUtil.createKeysetHandle(\n        TestUtil.createKeyset(primary));\n    Mac mac = new MacWrapper().wrap(Registry.getPrimitives(keysetHandle, Mac.class));\n    byte[] plaintext = \"blah\".getBytes(\"UTF-8\");\n    byte[] tag = mac.computeMac(plaintext);\n    // no prefix\n    assertEquals(16 /* TAG */, tag.length);\n    try {\n      mac.verifyMac(tag, plaintext);\n    } catch (GeneralSecurityException e) {\n      fail(\"Valid MAC, should not throw exception\");\n    }\n  }", "signature": "void testSmallPlaintextWithRawKey()", "full_signature": "@Test public void testSmallPlaintextWithRawKey()", "class_method_signature": "MacWrapperTest.testSmallPlaintextWithRawKey()", "testcase": true, "constructor": false, "invocations": ["randBytes", "createKey", "createHmacKeyData", "createKeysetHandle", "createKeyset", "wrap", "getPrimitives", "getBytes", "computeMac", "assertEquals", "verifyMac", "fail"]}, "focal_class": {"identifier": "MacWrapper", "superclass": "", "interfaces": "implements PrimitiveWrapper<Mac, Mac>", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(MacWrapper.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(MacWrapper.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "MacWrapper", "parameters": "()", "modifiers": "", "return": "", "signature": " MacWrapper()", "full_signature": "  MacWrapper()", "class_method_signature": "MacWrapper.MacWrapper()", "testcase": false, "constructor": true}, {"identifier": "wrap", "parameters": "(final PrimitiveSet<Mac> primitives)", "modifiers": "@Override public", "return": "Mac", "signature": "Mac wrap(final PrimitiveSet<Mac> primitives)", "full_signature": "@Override public Mac wrap(final PrimitiveSet<Mac> primitives)", "class_method_signature": "MacWrapper.wrap(final PrimitiveSet<Mac> primitives)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<Mac>", "signature": "Class<Mac> getPrimitiveClass()", "full_signature": "@Override public Class<Mac> getPrimitiveClass()", "class_method_signature": "MacWrapper.getPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "getInputPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<Mac>", "signature": "Class<Mac> getInputPrimitiveClass()", "full_signature": "@Override public Class<Mac> getInputPrimitiveClass()", "class_method_signature": "MacWrapper.getInputPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void register()", "full_signature": "public static void register()", "class_method_signature": "MacWrapper.register()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/mac/MacWrapper.java"}, "focal_method": {"identifier": "wrap", "parameters": "(final PrimitiveSet<Mac> primitives)", "modifiers": "@Override public", "return": "Mac", "body": "@Override\n  public Mac wrap(final PrimitiveSet<Mac> primitives) throws GeneralSecurityException {\n    return new WrappedMac(primitives);\n  }", "signature": "Mac wrap(final PrimitiveSet<Mac> primitives)", "full_signature": "@Override public Mac wrap(final PrimitiveSet<Mac> primitives)", "class_method_signature": "MacWrapper.wrap(final PrimitiveSet<Mac> primitives)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}