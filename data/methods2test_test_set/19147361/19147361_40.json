{"test_class": {"identifier": "TestThemisMasterObserver", "superclass": "extends TransactionTestBase", "interfaces": "", "fields": [{"original_string": "private HBaseAdmin admin = null;", "modifier": "private", "type": "HBaseAdmin", "declarator": "admin = null", "var_name": "admin"}, {"original_string": "private byte[] testTable = Bytes.toBytes(\"test_table\");", "modifier": "private", "type": "byte[]", "declarator": "testTable = Bytes.toBytes(\"test_table\")", "var_name": "testTable"}, {"original_string": "private byte[] testFamily = Bytes.toBytes(\"test_family\");", "modifier": "private", "type": "byte[]", "declarator": "testFamily = Bytes.toBytes(\"test_family\")", "var_name": "testFamily"}], "file": "themis-coprocessor/src/test/java/org/apache/hadoop/hbase/master/TestThemisMasterObserver.java"}, "test_case": {"identifier": "testCleanTimeExpiredLock", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCleanTimeExpiredLock() throws IOException {\n    ThemisMasterObserver masterObserver = new ThemisMasterObserver();\n    masterObserver.connection = connection;\n    masterObserver.lockCleaner = new ServerLockCleaner(masterObserver.connection,\n      new ThemisCoprocessorClient(connection));\n    writeLockAndData(COLUMN, prewriteTs);\n    writeLockAndData(COLUMN_WITH_ANOTHER_TABLE, prewriteTs + 1);\n    // won't clear lock\n    masterObserver.cleanLockBeforeTimestamp(prewriteTs);\n    checkPrewriteColumnSuccess(COLUMN, prewriteTs);\n    checkPrewriteColumnSuccess(COLUMN_WITH_ANOTHER_TABLE, prewriteTs + 1);\n    \n    // will clear lock of one COLUMN\n    masterObserver.cleanLockBeforeTimestamp(prewriteTs + 1);\n    Assert.assertNull(readLockBytes(COLUMN, prewriteTs));\n    checkPrewriteColumnSuccess(COLUMN_WITH_ANOTHER_TABLE, prewriteTs + 1);\n    \n    // will clear locks for both COLUMNs\n    writeLockAndData(COLUMN, prewriteTs + 1);\n    masterObserver.cleanLockBeforeTimestamp(prewriteTs + 2);\n    Assert.assertNull(readLockBytes(COLUMN, prewriteTs + 1));\n    Assert.assertNull(readLockBytes(COLUMN_WITH_ANOTHER_TABLE, prewriteTs + 1));\n    \n    writeLockAndData(COLUMN, prewriteTs + 100);\n  }", "signature": "void testCleanTimeExpiredLock()", "full_signature": "@Test public void testCleanTimeExpiredLock()", "class_method_signature": "TestThemisMasterObserver.testCleanTimeExpiredLock()", "testcase": true, "constructor": false, "invocations": ["writeLockAndData", "writeLockAndData", "cleanLockBeforeTimestamp", "checkPrewriteColumnSuccess", "checkPrewriteColumnSuccess", "cleanLockBeforeTimestamp", "assertNull", "readLockBytes", "checkPrewriteColumnSuccess", "writeLockAndData", "cleanLockBeforeTimestamp", "assertNull", "readLockBytes", "assertNull", "readLockBytes", "writeLockAndData"]}, "focal_class": {"identifier": "ThemisMasterObserver", "superclass": "extends BaseMasterObserver", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(ThemisMasterObserver.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(ThemisMasterObserver.class)", "var_name": "LOG"}, {"original_string": "public static final String RETURNED_THEMIS_TABLE_DESC = \"__themis.returned.table.desc__\";", "modifier": "public static final", "type": "String", "declarator": "RETURNED_THEMIS_TABLE_DESC = \"__themis.returned.table.desc__\"", "var_name": "RETURNED_THEMIS_TABLE_DESC"}, {"original_string": "public static final String THEMIS_ENABLE_KEY = \"THEMIS_ENABLE\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_ENABLE_KEY = \"THEMIS_ENABLE\"", "var_name": "THEMIS_ENABLE_KEY"}, {"original_string": "public static final String THEMIS_EXPIRED_TIMESTAMP_CALCULATE_PERIOD_KEY = \"themis.expired.timestamp.calculator.period\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_EXPIRED_TIMESTAMP_CALCULATE_PERIOD_KEY = \"themis.expired.timestamp.calculator.period\"", "var_name": "THEMIS_EXPIRED_TIMESTAMP_CALCULATE_PERIOD_KEY"}, {"original_string": "public static final String THEMIS_EXPIRED_DATA_CLEAN_ENABLE_KEY = \"themis.expired.data.clean.enable\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_EXPIRED_DATA_CLEAN_ENABLE_KEY = \"themis.expired.data.clean.enable\"", "var_name": "THEMIS_EXPIRED_DATA_CLEAN_ENABLE_KEY"}, {"original_string": "public static final String THEMIS_EXPIRED_TIMESTAMP_ZNODE_NAME = \"themis-expired-ts\";", "modifier": "public static final", "type": "String", "declarator": "THEMIS_EXPIRED_TIMESTAMP_ZNODE_NAME = \"themis-expired-ts\"", "var_name": "THEMIS_EXPIRED_TIMESTAMP_ZNODE_NAME"}, {"original_string": "protected int expiredTsCalculatePeriod;", "modifier": "protected", "type": "int", "declarator": "expiredTsCalculatePeriod", "var_name": "expiredTsCalculatePeriod"}, {"original_string": "protected Chore themisExpiredTsCalculator;", "modifier": "protected", "type": "Chore", "declarator": "themisExpiredTsCalculator", "var_name": "themisExpiredTsCalculator"}, {"original_string": "protected ZooKeeperWatcher zk;", "modifier": "protected", "type": "ZooKeeperWatcher", "declarator": "zk", "var_name": "zk"}, {"original_string": "protected String themisExpiredTsZNodePath;", "modifier": "protected", "type": "String", "declarator": "themisExpiredTsZNodePath", "var_name": "themisExpiredTsZNodePath"}, {"original_string": "protected HConnection connection;", "modifier": "protected", "type": "HConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "protected ServerLockCleaner lockCleaner;", "modifier": "protected", "type": "ServerLockCleaner", "declarator": "lockCleaner", "var_name": "lockCleaner"}], "methods": [{"identifier": "start", "parameters": "(CoprocessorEnvironment ctx)", "modifiers": "@Override public", "return": "void", "signature": "void start(CoprocessorEnvironment ctx)", "full_signature": "@Override public void start(CoprocessorEnvironment ctx)", "class_method_signature": "ThemisMasterObserver.start(CoprocessorEnvironment ctx)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(CoprocessorEnvironment ctx)", "modifiers": "@Override public", "return": "void", "signature": "void stop(CoprocessorEnvironment ctx)", "full_signature": "@Override public void stop(CoprocessorEnvironment ctx)", "class_method_signature": "ThemisMasterObserver.stop(CoprocessorEnvironment ctx)", "testcase": false, "constructor": false}, {"identifier": "preCreateTable", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "modifiers": "@Override public", "return": "void", "signature": "void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "full_signature": "@Override public void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "class_method_signature": "ThemisMasterObserver.preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      HTableDescriptor desc, HRegionInfo[] regions)", "testcase": false, "constructor": false}, {"identifier": "setReturnedThemisTableDesc", "parameters": "(HTableDescriptor desc)", "modifiers": "protected static", "return": "void", "signature": "void setReturnedThemisTableDesc(HTableDescriptor desc)", "full_signature": "protected static void setReturnedThemisTableDesc(HTableDescriptor desc)", "class_method_signature": "ThemisMasterObserver.setReturnedThemisTableDesc(HTableDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "isReturnedThemisTableDesc", "parameters": "(HTableDescriptor desc)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isReturnedThemisTableDesc(HTableDescriptor desc)", "full_signature": "protected static boolean isReturnedThemisTableDesc(HTableDescriptor desc)", "class_method_signature": "ThemisMasterObserver.isReturnedThemisTableDesc(HTableDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "postGetTableDescriptors", "parameters": "(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      List<HTableDescriptor> descriptors)", "modifiers": "@Override public", "return": "void", "signature": "void postGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      List<HTableDescriptor> descriptors)", "full_signature": "@Override public void postGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      List<HTableDescriptor> descriptors)", "class_method_signature": "ThemisMasterObserver.postGetTableDescriptors(ObserverContext<MasterCoprocessorEnvironment> ctx,\n      List<HTableDescriptor> descriptors)", "testcase": false, "constructor": false}, {"identifier": "createLockFamily", "parameters": "()", "modifiers": "protected static", "return": "HColumnDescriptor", "signature": "HColumnDescriptor createLockFamily()", "full_signature": "protected static HColumnDescriptor createLockFamily()", "class_method_signature": "ThemisMasterObserver.createLockFamily()", "testcase": false, "constructor": false}, {"identifier": "addCommitFamilies", "parameters": "(HTableDescriptor desc)", "modifiers": "protected static", "return": "void", "signature": "void addCommitFamilies(HTableDescriptor desc)", "full_signature": "protected static void addCommitFamilies(HTableDescriptor desc)", "class_method_signature": "ThemisMasterObserver.addCommitFamilies(HTableDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "getCommitFamily", "parameters": "(byte[] familyName)", "modifiers": "protected static", "return": "HColumnDescriptor", "signature": "HColumnDescriptor getCommitFamily(byte[] familyName)", "full_signature": "protected static HColumnDescriptor getCommitFamily(byte[] familyName)", "class_method_signature": "ThemisMasterObserver.getCommitFamily(byte[] familyName)", "testcase": false, "constructor": false}, {"identifier": "isThemisEnableFamily", "parameters": "(HColumnDescriptor desc)", "modifiers": "public static", "return": "boolean", "signature": "boolean isThemisEnableFamily(HColumnDescriptor desc)", "full_signature": "public static boolean isThemisEnableFamily(HColumnDescriptor desc)", "class_method_signature": "ThemisMasterObserver.isThemisEnableFamily(HColumnDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "isThemisEnableTable", "parameters": "(HTableDescriptor desc)", "modifiers": "public static", "return": "boolean", "signature": "boolean isThemisEnableTable(HTableDescriptor desc)", "full_signature": "public static boolean isThemisEnableTable(HTableDescriptor desc)", "class_method_signature": "ThemisMasterObserver.isThemisEnableTable(HTableDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "startExpiredTimestampCalculator", "parameters": "(MasterEnvironment ctx)", "modifiers": "protected synchronized", "return": "void", "signature": "void startExpiredTimestampCalculator(MasterEnvironment ctx)", "full_signature": "protected synchronized void startExpiredTimestampCalculator(MasterEnvironment ctx)", "class_method_signature": "ThemisMasterObserver.startExpiredTimestampCalculator(MasterEnvironment ctx)", "testcase": false, "constructor": false}, {"identifier": "getThemisTables", "parameters": "(HConnection connection)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getThemisTables(HConnection connection)", "full_signature": "public static List<String> getThemisTables(HConnection connection)", "class_method_signature": "ThemisMasterObserver.getThemisTables(HConnection connection)", "testcase": false, "constructor": false}, {"identifier": "getThemisExpiredTsZNodePath", "parameters": "(ZooKeeperWatcher zk)", "modifiers": "public static", "return": "String", "signature": "String getThemisExpiredTsZNodePath(ZooKeeperWatcher zk)", "full_signature": "public static String getThemisExpiredTsZNodePath(ZooKeeperWatcher zk)", "class_method_signature": "ThemisMasterObserver.getThemisExpiredTsZNodePath(ZooKeeperWatcher zk)", "testcase": false, "constructor": false}, {"identifier": "getThemisExpiredTsFromZk", "parameters": "(ZooKeeperWatcher zk)", "modifiers": "public static", "return": "long", "signature": "long getThemisExpiredTsFromZk(ZooKeeperWatcher zk)", "full_signature": "public static long getThemisExpiredTsFromZk(ZooKeeperWatcher zk)", "class_method_signature": "ThemisMasterObserver.getThemisExpiredTsFromZk(ZooKeeperWatcher zk)", "testcase": false, "constructor": false}, {"identifier": "getThemisExpiredTsFromZk", "parameters": "(ZooKeeperWatcher zk, String path)", "modifiers": "public static", "return": "long", "signature": "long getThemisExpiredTsFromZk(ZooKeeperWatcher zk, String path)", "full_signature": "public static long getThemisExpiredTsFromZk(ZooKeeperWatcher zk, String path)", "class_method_signature": "ThemisMasterObserver.getThemisExpiredTsFromZk(ZooKeeperWatcher zk, String path)", "testcase": false, "constructor": false}, {"identifier": "setExpiredTsToZk", "parameters": "(long currentExpiredTs)", "modifiers": "public", "return": "void", "signature": "void setExpiredTsToZk(long currentExpiredTs)", "full_signature": "public void setExpiredTsToZk(long currentExpiredTs)", "class_method_signature": "ThemisMasterObserver.setExpiredTsToZk(long currentExpiredTs)", "testcase": false, "constructor": false}, {"identifier": "cleanLockBeforeTimestamp", "parameters": "(long ts)", "modifiers": "public", "return": "void", "signature": "void cleanLockBeforeTimestamp(long ts)", "full_signature": "public void cleanLockBeforeTimestamp(long ts)", "class_method_signature": "ThemisMasterObserver.cleanLockBeforeTimestamp(long ts)", "testcase": false, "constructor": false}], "file": "themis-coprocessor/src/main/java/org/apache/hadoop/hbase/master/ThemisMasterObserver.java"}, "focal_method": {"identifier": "cleanLockBeforeTimestamp", "parameters": "(long ts)", "modifiers": "public", "return": "void", "body": "public void cleanLockBeforeTimestamp(long ts) throws IOException {\n    List<String> tableNames = getThemisTables(connection);\n    for (String tableName : tableNames) {\n      LOG.info(\"start to clean expired lock for themis table:\" + tableName);\n      byte[] tableNameBytes = Bytes.toBytes(tableName);\n      HTableInterface hTable = null;\n      int cleanedLockCount = 0;\n      try {\n        hTable = new HTable(connection.getConfiguration(), tableName);\n        Scan scan = new Scan();\n        scan.addFamily(ColumnUtil.LOCK_FAMILY_NAME);\n        scan.setTimeRange(0, ts);\n        ResultScanner scanner = hTable.getScanner(scan);\n        Result result = null;\n        while ((result = scanner.next()) != null) {\n          for (KeyValue kv : result.list()) {\n            ThemisLock lock = ThemisLock.parseFromByte(kv.getValue());\n            Column dataColumn = ColumnUtil.getDataColumnFromConstructedQualifier(new Column(kv.getFamily(),\n                kv.getQualifier()));\n            lock.setColumn(new ColumnCoordinate(tableNameBytes, kv.getRow(),\n                dataColumn.getFamily(), dataColumn.getQualifier()));\n            lockCleaner.cleanLock(lock);\n            ++cleanedLockCount;\n            LOG.info(\"themis clean expired lock, lockTs=\" + kv.getTimestamp() + \", expiredTs=\" + ts\n                + \", lock=\" + ThemisLock.parseFromByte(kv.getValue()));\n          }\n        }\n        scanner.close();\n      } finally {\n        if (hTable != null) {\n          hTable.close();\n        }\n      }\n      LOG.info(\"finish clean expired lock for themis table:\" + tableName + \", cleanedLockCount=\"\n          + cleanedLockCount);\n    }\n  }", "signature": "void cleanLockBeforeTimestamp(long ts)", "full_signature": "public void cleanLockBeforeTimestamp(long ts)", "class_method_signature": "ThemisMasterObserver.cleanLockBeforeTimestamp(long ts)", "testcase": false, "constructor": false, "invocations": ["getThemisTables", "info", "toBytes", "getConfiguration", "addFamily", "setTimeRange", "getScanner", "next", "list", "parseFromByte", "getValue", "getDataColumnFromConstructedQualifier", "getFamily", "getQualifier", "setColumn", "getRow", "getFamily", "getQualifier", "cleanLock", "info", "getTimestamp", "parseFromByte", "getValue", "close", "close", "info"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}