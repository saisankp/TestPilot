{"test_class": {"identifier": "LayoutTemplateAnalyzerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    PerspectivePluginServicesImpl pluginServices;", "modifier": "@Mock", "type": "PerspectivePluginServicesImpl", "declarator": "pluginServices", "var_name": "pluginServices"}, {"original_string": "@Mock\n    NavigationServicesImpl navigationServices;", "modifier": "@Mock", "type": "NavigationServicesImpl", "declarator": "navigationServices", "var_name": "navigationServices"}, {"original_string": "@InjectMocks\n    LayoutTemplateAnalyzer layoutTemplateAnalyzer;", "modifier": "@InjectMocks", "type": "LayoutTemplateAnalyzer", "declarator": "layoutTemplateAnalyzer", "var_name": "layoutTemplateAnalyzer"}, {"original_string": "LayoutTemplate layoutA = new LayoutTemplate(\"A\");", "modifier": "", "type": "LayoutTemplate", "declarator": "layoutA = new LayoutTemplate(\"A\")", "var_name": "layoutA"}, {"original_string": "LayoutTemplate layoutB = new LayoutTemplate(\"B\");", "modifier": "", "type": "LayoutTemplate", "declarator": "layoutB = new LayoutTemplate(\"B\")", "var_name": "layoutB"}, {"original_string": "LayoutTemplate layoutC = new LayoutTemplate(\"C\");", "modifier": "", "type": "LayoutTemplate", "declarator": "layoutC = new LayoutTemplate(\"C\")", "var_name": "layoutC"}, {"original_string": "LayoutTemplate layoutD = new LayoutTemplate(\"D\");", "modifier": "", "type": "LayoutTemplate", "declarator": "layoutD = new LayoutTemplate(\"D\")", "var_name": "layoutD"}, {"original_string": "LayoutTemplate layoutE = new LayoutTemplate(\"D\");", "modifier": "", "type": "LayoutTemplate", "declarator": "layoutE = new LayoutTemplate(\"D\")", "var_name": "layoutE"}, {"original_string": "LayoutColumn layoutColumnA = new LayoutColumn(\"12\");", "modifier": "", "type": "LayoutColumn", "declarator": "layoutColumnA = new LayoutColumn(\"12\")", "var_name": "layoutColumnA"}, {"original_string": "LayoutColumn layoutColumnB = new LayoutColumn(\"12\");", "modifier": "", "type": "LayoutColumn", "declarator": "layoutColumnB = new LayoutColumn(\"12\")", "var_name": "layoutColumnB"}, {"original_string": "LayoutColumn layoutColumnD = new LayoutColumn(\"12\");", "modifier": "", "type": "LayoutColumn", "declarator": "layoutColumnD = new LayoutColumn(\"12\")", "var_name": "layoutColumnD"}, {"original_string": "LayoutComponent layoutComponentA = new LayoutComponent(CAROUSEL.getFQClassName());", "modifier": "", "type": "LayoutComponent", "declarator": "layoutComponentA = new LayoutComponent(CAROUSEL.getFQClassName())", "var_name": "layoutComponentA"}, {"original_string": "LayoutComponent layoutComponentB = new LayoutComponent(CAROUSEL.getFQClassName());", "modifier": "", "type": "LayoutComponent", "declarator": "layoutComponentB = new LayoutComponent(CAROUSEL.getFQClassName())", "var_name": "layoutComponentB"}, {"original_string": "LayoutComponent layoutComponentC1 = new LayoutComponent(TABLIST.getFQClassName());", "modifier": "", "type": "LayoutComponent", "declarator": "layoutComponentC1 = new LayoutComponent(TABLIST.getFQClassName())", "var_name": "layoutComponentC1"}, {"original_string": "LayoutComponent layoutComponentC2 = new LayoutComponent(TABLIST.getFQClassName());", "modifier": "", "type": "LayoutComponent", "declarator": "layoutComponentC2 = new LayoutComponent(TABLIST.getFQClassName())", "var_name": "layoutComponentC2"}, {"original_string": "LayoutComponent layoutComponentD = new LayoutComponent(TREE.getFQClassName());", "modifier": "", "type": "LayoutComponent", "declarator": "layoutComponentD = new LayoutComponent(TREE.getFQClassName())", "var_name": "layoutComponentD"}, {"original_string": "LayoutComponent layoutComponentE = new LayoutComponent();", "modifier": "", "type": "LayoutComponent", "declarator": "layoutComponentE = new LayoutComponent()", "var_name": "layoutComponentE"}], "file": "dashbuilder-backend/dashbuilder-navigation-backend/src/test/java/org/dashbuilder/navigation/service/LayoutTemplateAnalyzerTest.java"}, "test_case": {"identifier": "testDefaultItemNoRecursiveIssue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDefaultItemNoRecursiveIssue() throws Exception {\n        layoutComponentC1.addProperty(NAV_DEFAULT_ID, \"item2\");\n        layoutComponentC2.addProperty(NAV_DEFAULT_ID, \"item2\");\n        when(navigationServices.loadNavTree()).thenReturn(new NavTreeBuilder()\n                .group(\"groupC\", \"\", \"\", true)\n                .item(\"item1\", \"\", \"\", true, NavWorkbenchCtx.perspective(\"C\"))\n                .item(\"item2\", \"\", \"\", true, NavWorkbenchCtx.perspective(\"B\"))\n                .endGroup()\n                .build());\n\n        LayoutRecursionIssue info = layoutTemplateAnalyzer.analyzeRecursion(layoutC);\n        assertTrue(info.isEmpty());\n    }", "signature": "void testDefaultItemNoRecursiveIssue()", "full_signature": "@Test public void testDefaultItemNoRecursiveIssue()", "class_method_signature": "LayoutTemplateAnalyzerTest.testDefaultItemNoRecursiveIssue()", "testcase": true, "constructor": false, "invocations": ["addProperty", "addProperty", "thenReturn", "when", "loadNavTree", "build", "endGroup", "item", "item", "group", "perspective", "perspective", "analyzeRecursion", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "LayoutTemplateAnalyzer", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final List<NavDragComponentType> ALL_NAV_GROUP_COMPONENTS = Arrays.asList(CAROUSEL, MENUBAR, TABLIST, TREE, TILES);", "modifier": "static final", "type": "List<NavDragComponentType>", "declarator": "ALL_NAV_GROUP_COMPONENTS = Arrays.asList(CAROUSEL, MENUBAR, TABLIST, TREE, TILES)", "var_name": "ALL_NAV_GROUP_COMPONENTS"}, {"original_string": "static final List<NavDragComponentType> SHOW_ENTIRE_NAV_GROUP_COMPONENTS = Arrays.asList(CAROUSEL);", "modifier": "static final", "type": "List<NavDragComponentType>", "declarator": "SHOW_ENTIRE_NAV_GROUP_COMPONENTS = Arrays.asList(CAROUSEL)", "var_name": "SHOW_ENTIRE_NAV_GROUP_COMPONENTS"}, {"original_string": "static final List<NavDragComponentType> DEFAULT_ITEM_NAV_GROUP_COMPONENTS = Arrays.asList(MENUBAR, TABLIST, TREE);", "modifier": "static final", "type": "List<NavDragComponentType>", "declarator": "DEFAULT_ITEM_NAV_GROUP_COMPONENTS = Arrays.asList(MENUBAR, TABLIST, TREE)", "var_name": "DEFAULT_ITEM_NAV_GROUP_COMPONENTS"}, {"original_string": "private PerspectivePluginServicesImpl pluginServices;", "modifier": "private", "type": "PerspectivePluginServicesImpl", "declarator": "pluginServices", "var_name": "pluginServices"}, {"original_string": "private NavigationServicesImpl navigationServices;", "modifier": "private", "type": "NavigationServicesImpl", "declarator": "navigationServices", "var_name": "navigationServices"}], "methods": [{"identifier": "LayoutTemplateAnalyzer", "parameters": "()", "modifiers": "public", "return": "", "signature": " LayoutTemplateAnalyzer()", "full_signature": "public  LayoutTemplateAnalyzer()", "class_method_signature": "LayoutTemplateAnalyzer.LayoutTemplateAnalyzer()", "testcase": false, "constructor": true}, {"identifier": "LayoutTemplateAnalyzer", "parameters": "(PerspectivePluginServicesImpl pluginServices, NavigationServicesImpl navigationServices)", "modifiers": "@Inject public", "return": "", "signature": " LayoutTemplateAnalyzer(PerspectivePluginServicesImpl pluginServices, NavigationServicesImpl navigationServices)", "full_signature": "@Inject public  LayoutTemplateAnalyzer(PerspectivePluginServicesImpl pluginServices, NavigationServicesImpl navigationServices)", "class_method_signature": "LayoutTemplateAnalyzer.LayoutTemplateAnalyzer(PerspectivePluginServicesImpl pluginServices, NavigationServicesImpl navigationServices)", "testcase": false, "constructor": true}, {"identifier": "analyzeRecursion", "parameters": "(LayoutTemplate layoutTemplate)", "modifiers": "public", "return": "LayoutRecursionIssue", "signature": "LayoutRecursionIssue analyzeRecursion(LayoutTemplate layoutTemplate)", "full_signature": "public LayoutRecursionIssue analyzeRecursion(LayoutTemplate layoutTemplate)", "class_method_signature": "LayoutTemplateAnalyzer.analyzeRecursion(LayoutTemplate layoutTemplate)", "testcase": false, "constructor": false}, {"identifier": "analyzeRecursion", "parameters": "(LayoutTemplate layoutTemplate, LayoutTemplateContext layoutCtx)", "modifiers": "public", "return": "LayoutRecursionIssue", "signature": "LayoutRecursionIssue analyzeRecursion(LayoutTemplate layoutTemplate, LayoutTemplateContext layoutCtx)", "full_signature": "public LayoutRecursionIssue analyzeRecursion(LayoutTemplate layoutTemplate, LayoutTemplateContext layoutCtx)", "class_method_signature": "LayoutTemplateAnalyzer.analyzeRecursion(LayoutTemplate layoutTemplate, LayoutTemplateContext layoutCtx)", "testcase": false, "constructor": false}, {"identifier": "analyzeRecursion", "parameters": "(LayoutTemplate layoutTemplate, LayoutRecursionIssue issue, LayoutTemplateContext layoutCtx)", "modifiers": "public", "return": "boolean", "signature": "boolean analyzeRecursion(LayoutTemplate layoutTemplate, LayoutRecursionIssue issue, LayoutTemplateContext layoutCtx)", "full_signature": "public boolean analyzeRecursion(LayoutTemplate layoutTemplate, LayoutRecursionIssue issue, LayoutTemplateContext layoutCtx)", "class_method_signature": "LayoutTemplateAnalyzer.analyzeRecursion(LayoutTemplate layoutTemplate, LayoutRecursionIssue issue, LayoutTemplateContext layoutCtx)", "testcase": false, "constructor": false}, {"identifier": "analyzeRecursion", "parameters": "(LayoutRow row, LayoutRecursionIssue issue, LayoutTemplateContext layoutCtx)", "modifiers": "public", "return": "boolean", "signature": "boolean analyzeRecursion(LayoutRow row, LayoutRecursionIssue issue, LayoutTemplateContext layoutCtx)", "full_signature": "public boolean analyzeRecursion(LayoutRow row, LayoutRecursionIssue issue, LayoutTemplateContext layoutCtx)", "class_method_signature": "LayoutTemplateAnalyzer.analyzeRecursion(LayoutRow row, LayoutRecursionIssue issue, LayoutTemplateContext layoutCtx)", "testcase": false, "constructor": false}, {"identifier": "analyzeRecursion", "parameters": "(NavGroup navGroup, LayoutNavigationRefType navGroupRefType, LayoutRecursionIssue issue)", "modifiers": "public", "return": "boolean", "signature": "boolean analyzeRecursion(NavGroup navGroup, LayoutNavigationRefType navGroupRefType, LayoutRecursionIssue issue)", "full_signature": "public boolean analyzeRecursion(NavGroup navGroup, LayoutNavigationRefType navGroupRefType, LayoutRecursionIssue issue)", "class_method_signature": "LayoutTemplateAnalyzer.analyzeRecursion(NavGroup navGroup, LayoutNavigationRefType navGroupRefType, LayoutRecursionIssue issue)", "testcase": false, "constructor": false}, {"identifier": "analyzeRecursion", "parameters": "(String perspectiveId, LayoutRecursionIssue issue)", "modifiers": "public", "return": "boolean", "signature": "boolean analyzeRecursion(String perspectiveId, LayoutRecursionIssue issue)", "full_signature": "public boolean analyzeRecursion(String perspectiveId, LayoutRecursionIssue issue)", "class_method_signature": "LayoutTemplateAnalyzer.analyzeRecursion(String perspectiveId, LayoutRecursionIssue issue)", "testcase": false, "constructor": false}, {"identifier": "hasNavigationComponents", "parameters": "(LayoutTemplate layoutTemplate)", "modifiers": "public", "return": "boolean", "signature": "boolean hasNavigationComponents(LayoutTemplate layoutTemplate)", "full_signature": "public boolean hasNavigationComponents(LayoutTemplate layoutTemplate)", "class_method_signature": "LayoutTemplateAnalyzer.hasNavigationComponents(LayoutTemplate layoutTemplate)", "testcase": false, "constructor": false}, {"identifier": "hasNavigationComponents", "parameters": "(LayoutRow row)", "modifiers": "public", "return": "boolean", "signature": "boolean hasNavigationComponents(LayoutRow row)", "full_signature": "public boolean hasNavigationComponents(LayoutRow row)", "class_method_signature": "LayoutTemplateAnalyzer.hasNavigationComponents(LayoutRow row)", "testcase": false, "constructor": false}, {"identifier": "showEntireNavGroup", "parameters": "(LayoutComponent component)", "modifiers": "protected", "return": "boolean", "signature": "boolean showEntireNavGroup(LayoutComponent component)", "full_signature": "protected boolean showEntireNavGroup(LayoutComponent component)", "class_method_signature": "LayoutTemplateAnalyzer.showEntireNavGroup(LayoutComponent component)", "testcase": false, "constructor": false}, {"identifier": "hasDefaultItem", "parameters": "(LayoutComponent component)", "modifiers": "protected", "return": "boolean", "signature": "boolean hasDefaultItem(LayoutComponent component)", "full_signature": "protected boolean hasDefaultItem(LayoutComponent component)", "class_method_signature": "LayoutTemplateAnalyzer.hasDefaultItem(LayoutComponent component)", "testcase": false, "constructor": false}, {"identifier": "isRuntimePerspectiveId", "parameters": "(NavItem navItem)", "modifiers": "protected", "return": "boolean", "signature": "boolean isRuntimePerspectiveId(NavItem navItem)", "full_signature": "protected boolean isRuntimePerspectiveId(NavItem navItem)", "class_method_signature": "LayoutTemplateAnalyzer.isRuntimePerspectiveId(NavItem navItem)", "testcase": false, "constructor": false}, {"identifier": "getFirstRuntimePerspective", "parameters": "(List<NavItem> itemList)", "modifiers": "protected", "return": "NavItem", "signature": "NavItem getFirstRuntimePerspective(List<NavItem> itemList)", "full_signature": "protected NavItem getFirstRuntimePerspective(List<NavItem> itemList)", "class_method_signature": "LayoutTemplateAnalyzer.getFirstRuntimePerspective(List<NavItem> itemList)", "testcase": false, "constructor": false}], "file": "dashbuilder-backend/dashbuilder-navigation-backend/src/main/java/org/dashbuilder/navigation/service/LayoutTemplateAnalyzer.java"}, "focal_method": {"identifier": "analyzeRecursion", "parameters": "(LayoutTemplate layoutTemplate)", "modifiers": "public", "return": "LayoutRecursionIssue", "body": "public LayoutRecursionIssue analyzeRecursion(LayoutTemplate layoutTemplate) {\n        return analyzeRecursion(layoutTemplate, null);\n    }", "signature": "LayoutRecursionIssue analyzeRecursion(LayoutTemplate layoutTemplate)", "full_signature": "public LayoutRecursionIssue analyzeRecursion(LayoutTemplate layoutTemplate)", "class_method_signature": "LayoutTemplateAnalyzer.analyzeRecursion(LayoutTemplate layoutTemplate)", "testcase": false, "constructor": false, "invocations": ["analyzeRecursion"]}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}