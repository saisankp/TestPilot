{"test_class": {"identifier": "TrustAnchorControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_CA_NAME = \"Test CA\";", "modifier": "private static final", "type": "String", "declarator": "TEST_CA_NAME = \"Test CA\"", "var_name": "TEST_CA_NAME"}, {"original_string": "private MockMvc mvc;", "modifier": "private", "type": "MockMvc", "declarator": "mvc", "var_name": "mvc"}, {"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@Autowired\n    private ObjectMapper objectMapper;", "modifier": "@Autowired\n    private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "@Autowired\n    private TrustAnchorController subject;", "modifier": "@Autowired\n    private", "type": "TrustAnchorController", "declarator": "subject", "var_name": "subject"}], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/api/trustanchors/TrustAnchorControllerTest.java"}, "test_case": {"identifier": "should_upload_ripeextended_trust_anchor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_upload_ripeextended_trust_anchor() throws Exception {\n        byte[] rfc8630Tal = Files.readAllBytes(new ClassPathResource(\"tals/ripeextended/afrinic-https_rsync.tal\").getFile().toPath());\n        final MockMultipartFile uploadedTal = new MockMultipartFile(\"file\", \"afrinic-https_rsync.tal\", \"application/octet-stream\", rfc8630Tal);\n\n        ResultActions result = mvc.perform(\n                multipart(\"/api/trust-anchors/upload\")\n                        .file(uploadedTal)\n                        .accept(MediaType.ALL)\n        );\n\n        result\n                .andExpect(status().isCreated())\n                .andExpect(content().contentType(ValidatorApi.API_MIME_TYPE));\n\n        ApiResponse<TrustAnchorResource> response = addTrustAnchorResponse(result);\n        assertThat(response.getData()).isNotNull();\n\n        TrustAnchorResource resource = response.getData();\n\n        Link selfRel = resource.getLinks().getLink(\"self\");\n        mvc.perform(\n                get(selfRel.getHref())\n                        .accept(ValidatorApi.API_MIME_TYPE)\n        )\n                .andExpect(status().isOk())\n                .andExpect(content().contentType(ValidatorApi.API_MIME_TYPE))\n                .andExpect(jsonPath(\"$.data.name\").value(\"AfriNIC RPKI Root\"))\n                .andExpect(jsonPath(\"$.data.locations\", hasSize(2)));\n    }", "signature": "void should_upload_ripeextended_trust_anchor()", "full_signature": "@Test public void should_upload_ripeextended_trust_anchor()", "class_method_signature": "TrustAnchorControllerTest.should_upload_ripeextended_trust_anchor()", "testcase": true, "constructor": false, "invocations": ["readAllBytes", "toPath", "getFile", "perform", "accept", "file", "multipart", "andExpect", "andExpect", "isCreated", "status", "contentType", "content", "addTrustAnchorResponse", "isNotNull", "assertThat", "getData", "getData", "getLink", "getLinks", "andExpect", "andExpect", "andExpect", "andExpect", "perform", "accept", "get", "getHref", "isOk", "status", "contentType", "content", "value", "jsonPath", "jsonPath", "hasSize"]}, "focal_class": {"identifier": "TrustAnchorController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TrustAnchors trustAnchors;", "modifier": "@Autowired\n    private", "type": "TrustAnchors", "declarator": "trustAnchors", "var_name": "trustAnchors"}, {"original_string": "@Autowired\n    private TrustAnchorService trustAnchorService;", "modifier": "@Autowired\n    private", "type": "TrustAnchorService", "declarator": "trustAnchorService", "var_name": "trustAnchorService"}, {"original_string": "@Autowired\n    private ValidationRuns validationRuns;", "modifier": "@Autowired\n    private", "type": "ValidationRuns", "declarator": "validationRuns", "var_name": "validationRuns"}, {"original_string": "@Autowired\n    private MessageSource messageSource;", "modifier": "@Autowired\n    private", "type": "MessageSource", "declarator": "messageSource", "var_name": "messageSource"}, {"original_string": "@Autowired\n    private Storage storage;", "modifier": "@Autowired\n    private", "type": "Storage", "declarator": "storage", "var_name": "storage"}], "methods": [{"identifier": "list", "parameters": "(Locale locale)", "modifiers": "@ApiOperation(\"List the configured Trust Anchors\") @GetMapping public", "return": "ResponseEntity<ApiResponse<List<TrustAnchorResource>>>", "signature": "ResponseEntity<ApiResponse<List<TrustAnchorResource>>> list(Locale locale)", "full_signature": "@ApiOperation(\"List the configured Trust Anchors\") @GetMapping public ResponseEntity<ApiResponse<List<TrustAnchorResource>>> list(Locale locale)", "class_method_signature": "TrustAnchorController.list(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@RequestBody @Valid ApiCommand<AddTrustAnchor> command, Locale locale)", "modifiers": "@ApiOperation(\"Add a Trust Anchor using a JSON payload\") @PostMapping(consumes = { ValidatorApi.API_MIME_TYPE, \"application/json\" }) public", "return": "ResponseEntity<ApiResponse<TrustAnchorResource>>", "signature": "ResponseEntity<ApiResponse<TrustAnchorResource>> add(@RequestBody @Valid ApiCommand<AddTrustAnchor> command, Locale locale)", "full_signature": "@ApiOperation(\"Add a Trust Anchor using a JSON payload\") @PostMapping(consumes = { ValidatorApi.API_MIME_TYPE, \"application/json\" }) public ResponseEntity<ApiResponse<TrustAnchorResource>> add(@RequestBody @Valid ApiCommand<AddTrustAnchor> command, Locale locale)", "class_method_signature": "TrustAnchorController.add(@RequestBody @Valid ApiCommand<AddTrustAnchor> command, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@RequestParam(\"file\") MultipartFile trustAnchorLocator, Locale locale)", "modifiers": "@ApiOperation(\"Add a Trust Anchor from a file\") @PostMapping(path = \"/upload\", consumes = \"multipart/form-data\") public", "return": "ResponseEntity<ApiResponse<TrustAnchorResource>>", "signature": "ResponseEntity<ApiResponse<TrustAnchorResource>> add(@RequestParam(\"file\") MultipartFile trustAnchorLocator, Locale locale)", "full_signature": "@ApiOperation(\"Add a Trust Anchor from a file\") @PostMapping(path = \"/upload\", consumes = \"multipart/form-data\") public ResponseEntity<ApiResponse<TrustAnchorResource>> add(@RequestParam(\"file\") MultipartFile trustAnchorLocator, Locale locale)", "class_method_signature": "TrustAnchorController.add(@RequestParam(\"file\") MultipartFile trustAnchorLocator, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@PathVariable long id, Locale locale)", "modifiers": "@ApiOperation(\"Get a trust anchor by (numeric) identifier\") @GetMapping(path = \"/{id}\") public", "return": "ResponseEntity<ApiResponse<TrustAnchorResource>>", "signature": "ResponseEntity<ApiResponse<TrustAnchorResource>> get(@PathVariable long id, Locale locale)", "full_signature": "@ApiOperation(\"Get a trust anchor by (numeric) identifier\") @GetMapping(path = \"/{id}\") public ResponseEntity<ApiResponse<TrustAnchorResource>> get(@PathVariable long id, Locale locale)", "class_method_signature": "TrustAnchorController.get(@PathVariable long id, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "validationResults", "parameters": "(@PathVariable long id, HttpServletResponse response, Locale locale)", "modifiers": "@GetMapping(path = \"/{id}/validation-run\") public", "return": "ResponseEntity<ApiResponse<ValidationRunResource>>", "signature": "ResponseEntity<ApiResponse<ValidationRunResource>> validationResults(@PathVariable long id, HttpServletResponse response, Locale locale)", "full_signature": "@GetMapping(path = \"/{id}/validation-run\") public ResponseEntity<ApiResponse<ValidationRunResource>> validationResults(@PathVariable long id, HttpServletResponse response, Locale locale)", "class_method_signature": "TrustAnchorController.validationResults(@PathVariable long id, HttpServletResponse response, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "validationChecks", "parameters": "(\n        @PathVariable long id,\n        @RequestParam(name = \"startFrom\", defaultValue = \"0\") long startFrom,\n        @RequestParam(name = \"pageSize\", defaultValue = \"20\") long pageSize,\n        @RequestParam(name = \"search\", required = false) String searchString,\n        @ApiParam(allowableValues = SORT_BY_ALLOWABLE_VALUES)\n        @RequestParam(name = \"sortBy\", defaultValue = \"location\") String sortBy,\n        @ApiParam(allowableValues = SORT_DIRECTION_ALLOWABLE_VALUES)\n        @RequestParam(name = \"sortDirection\", defaultValue = \"asc\") String sortDirection,\n        Locale locale\n    )", "modifiers": "@ApiOperation(\"Get validation issues\") @GetMapping(path = \"/{id}/validation-checks\") public", "return": "ResponseEntity<ApiResponse<Stream<ValidationCheckResource>>>", "signature": "ResponseEntity<ApiResponse<Stream<ValidationCheckResource>>> validationChecks(\n        @PathVariable long id,\n        @RequestParam(name = \"startFrom\", defaultValue = \"0\") long startFrom,\n        @RequestParam(name = \"pageSize\", defaultValue = \"20\") long pageSize,\n        @RequestParam(name = \"search\", required = false) String searchString,\n        @ApiParam(allowableValues = SORT_BY_ALLOWABLE_VALUES)\n        @RequestParam(name = \"sortBy\", defaultValue = \"location\") String sortBy,\n        @ApiParam(allowableValues = SORT_DIRECTION_ALLOWABLE_VALUES)\n        @RequestParam(name = \"sortDirection\", defaultValue = \"asc\") String sortDirection,\n        Locale locale\n    )", "full_signature": "@ApiOperation(\"Get validation issues\") @GetMapping(path = \"/{id}/validation-checks\") public ResponseEntity<ApiResponse<Stream<ValidationCheckResource>>> validationChecks(\n        @PathVariable long id,\n        @RequestParam(name = \"startFrom\", defaultValue = \"0\") long startFrom,\n        @RequestParam(name = \"pageSize\", defaultValue = \"20\") long pageSize,\n        @RequestParam(name = \"search\", required = false) String searchString,\n        @ApiParam(allowableValues = SORT_BY_ALLOWABLE_VALUES)\n        @RequestParam(name = \"sortBy\", defaultValue = \"location\") String sortBy,\n        @ApiParam(allowableValues = SORT_DIRECTION_ALLOWABLE_VALUES)\n        @RequestParam(name = \"sortDirection\", defaultValue = \"asc\") String sortDirection,\n        Locale locale\n    )", "class_method_signature": "TrustAnchorController.validationChecks(\n        @PathVariable long id,\n        @RequestParam(name = \"startFrom\", defaultValue = \"0\") long startFrom,\n        @RequestParam(name = \"pageSize\", defaultValue = \"20\") long pageSize,\n        @RequestParam(name = \"search\", required = false) String searchString,\n        @ApiParam(allowableValues = SORT_BY_ALLOWABLE_VALUES)\n        @RequestParam(name = \"sortBy\", defaultValue = \"location\") String sortBy,\n        @ApiParam(allowableValues = SORT_DIRECTION_ALLOWABLE_VALUES)\n        @RequestParam(name = \"sortDirection\", defaultValue = \"asc\") String sortDirection,\n        Locale locale\n    )", "testcase": false, "constructor": false}, {"identifier": "statuses", "parameters": "()", "modifiers": "@ApiOperation(\"Get the statuses of all configured trust anchors\") @GetMapping(path = \"/statuses\") public", "return": "ApiResponse<List<TaStatus>>", "signature": "ApiResponse<List<TaStatus>> statuses()", "full_signature": "@ApiOperation(\"Get the statuses of all configured trust anchors\") @GetMapping(path = \"/statuses\") public ApiResponse<List<TaStatus>> statuses()", "class_method_signature": "TrustAnchorController.statuses()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@PathVariable long id)", "modifiers": "@ApiOperation(\"Delete a trust anchor by id\") @DeleteMapping(path = \"/{id}\") public", "return": "ResponseEntity<?>", "signature": "ResponseEntity<?> delete(@PathVariable long id)", "full_signature": "@ApiOperation(\"Delete a trust anchor by id\") @DeleteMapping(path = \"/{id}\") public ResponseEntity<?> delete(@PathVariable long id)", "class_method_signature": "TrustAnchorController.delete(@PathVariable long id)", "testcase": false, "constructor": false}, {"identifier": "trustAnchorResource", "parameters": "(Tx.Read tx, TrustAnchor trustAnchor, Locale locale)", "modifiers": "private", "return": "ApiResponse<TrustAnchorResource>", "signature": "ApiResponse<TrustAnchorResource> trustAnchorResource(Tx.Read tx, TrustAnchor trustAnchor, Locale locale)", "full_signature": "private ApiResponse<TrustAnchorResource> trustAnchorResource(Tx.Read tx, TrustAnchor trustAnchor, Locale locale)", "class_method_signature": "TrustAnchorController.trustAnchorResource(Tx.Read tx, TrustAnchor trustAnchor, Locale locale)", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/api/trustanchors/TrustAnchorController.java"}, "focal_method": {"identifier": "get", "parameters": "(@PathVariable long id, Locale locale)", "modifiers": "@ApiOperation(\"Get a trust anchor by (numeric) identifier\") @GetMapping(path = \"/{id}\") public", "return": "ResponseEntity<ApiResponse<TrustAnchorResource>>", "body": "@ApiOperation(\"Get a trust anchor by (numeric) identifier\")\n    @GetMapping(path = \"/{id}\")\n    public ResponseEntity<ApiResponse<TrustAnchorResource>> get(@PathVariable long id, Locale locale) {\n        return storage.readTx(tx ->\n            trustAnchors.get(tx, Key.of(id))\n                    .map(ta -> ResponseEntity.ok(trustAnchorResource(tx, ta, locale)))\n                    .orElse(ResponseEntity.notFound().build()));\n    }", "signature": "ResponseEntity<ApiResponse<TrustAnchorResource>> get(@PathVariable long id, Locale locale)", "full_signature": "@ApiOperation(\"Get a trust anchor by (numeric) identifier\") @GetMapping(path = \"/{id}\") public ResponseEntity<ApiResponse<TrustAnchorResource>> get(@PathVariable long id, Locale locale)", "class_method_signature": "TrustAnchorController.get(@PathVariable long id, Locale locale)", "testcase": false, "constructor": false, "invocations": ["readTx", "orElse", "map", "get", "of", "ok", "trustAnchorResource", "build", "notFound"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}