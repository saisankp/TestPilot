{"test_class": {"identifier": "RSocketServiceAnnotationProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RSocketServiceAnnotationProcessor processor;", "modifier": "private", "type": "RSocketServiceAnnotationProcessor", "declarator": "processor", "var_name": "processor"}], "file": "alibaba-rsocket-spring-boot-starter/src/test/java/com/alibaba/spring/boot/rsocket/responder/invocation/RSocketServiceAnnotationProcessorTest.java"}, "test_case": {"identifier": "testScanRSocketServiceAnnotation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScanRSocketServiceAnnotation() {\n        ReactiveTestService reactiveTestService = new ReactiveTestServiceImpl();\n        processor.scanRSocketServiceAnnotation(reactiveTestService, \"reactiveTestService\");\n        Assertions.assertTrue(processor.contains(ReactiveTestService.class.getCanonicalName()));\n        Assertions.assertNotNull(processor.getInvokeMethod(ReactiveTestService.class.getCanonicalName(),\"findNickById\"));\n\n    }", "signature": "void testScanRSocketServiceAnnotation()", "full_signature": "@Test public void testScanRSocketServiceAnnotation()", "class_method_signature": "RSocketServiceAnnotationProcessorTest.testScanRSocketServiceAnnotation()", "testcase": true, "constructor": false, "invocations": ["scanRSocketServiceAnnotation", "assertTrue", "contains", "getCanonicalName", "assertNotNull", "getInvokeMethod", "getCanonicalName"]}, "focal_class": {"identifier": "RSocketServiceAnnotationProcessor", "superclass": "extends LocalReactiveServiceCallerImpl", "interfaces": "implements BeanPostProcessor", "fields": [{"original_string": "private RSocketProperties rsocketProperties;", "modifier": "private", "type": "RSocketProperties", "declarator": "rsocketProperties", "var_name": "rsocketProperties"}], "methods": [{"identifier": "RSocketServiceAnnotationProcessor", "parameters": "(RSocketProperties rsocketProperties)", "modifiers": "public", "return": "", "signature": " RSocketServiceAnnotationProcessor(RSocketProperties rsocketProperties)", "full_signature": "public  RSocketServiceAnnotationProcessor(RSocketProperties rsocketProperties)", "class_method_signature": "RSocketServiceAnnotationProcessor.RSocketServiceAnnotationProcessor(RSocketProperties rsocketProperties)", "testcase": false, "constructor": true}, {"identifier": "postProcessBeforeInitialization", "parameters": "(@NotNull Object bean, String beanName)", "modifiers": "@Override public", "return": "Object", "signature": "Object postProcessBeforeInitialization(@NotNull Object bean, String beanName)", "full_signature": "@Override public Object postProcessBeforeInitialization(@NotNull Object bean, String beanName)", "class_method_signature": "RSocketServiceAnnotationProcessor.postProcessBeforeInitialization(@NotNull Object bean, String beanName)", "testcase": false, "constructor": false}, {"identifier": "postProcessAfterInitialization", "parameters": "(@NotNull Object bean, String beanName)", "modifiers": "@Override public", "return": "Object", "signature": "Object postProcessAfterInitialization(@NotNull Object bean, String beanName)", "full_signature": "@Override public Object postProcessAfterInitialization(@NotNull Object bean, String beanName)", "class_method_signature": "RSocketServiceAnnotationProcessor.postProcessAfterInitialization(@NotNull Object bean, String beanName)", "testcase": false, "constructor": false}, {"identifier": "scanRSocketServiceAnnotation", "parameters": "(Object bean, String beanName)", "modifiers": "protected", "return": "void", "signature": "void scanRSocketServiceAnnotation(Object bean, String beanName)", "full_signature": "protected void scanRSocketServiceAnnotation(Object bean, String beanName)", "class_method_signature": "RSocketServiceAnnotationProcessor.scanRSocketServiceAnnotation(Object bean, String beanName)", "testcase": false, "constructor": false}, {"identifier": "registerRSocketService", "parameters": "(RSocketService rsocketServiceAnnotation, Object bean)", "modifiers": "private", "return": "void", "signature": "void registerRSocketService(RSocketService rsocketServiceAnnotation, Object bean)", "full_signature": "private void registerRSocketService(RSocketService rsocketServiceAnnotation, Object bean)", "class_method_signature": "RSocketServiceAnnotationProcessor.registerRSocketService(RSocketService rsocketServiceAnnotation, Object bean)", "testcase": false, "constructor": false}], "file": "alibaba-rsocket-spring-boot-starter/src/main/java/com/alibaba/spring/boot/rsocket/responder/invocation/RSocketServiceAnnotationProcessor.java"}, "focal_method": {"identifier": "scanRSocketServiceAnnotation", "parameters": "(Object bean, String beanName)", "modifiers": "protected", "return": "void", "body": "protected void scanRSocketServiceAnnotation(Object bean, String beanName) {\n        Class<?> managedBeanClass = bean.getClass();\n        RSocketService reactiveService = AnnotationUtils.findAnnotation(managedBeanClass, RSocketService.class);\n        if (reactiveService != null) {\n            registerRSocketService(reactiveService, bean);\n        }\n    }", "signature": "void scanRSocketServiceAnnotation(Object bean, String beanName)", "full_signature": "protected void scanRSocketServiceAnnotation(Object bean, String beanName)", "class_method_signature": "RSocketServiceAnnotationProcessor.scanRSocketServiceAnnotation(Object bean, String beanName)", "testcase": false, "constructor": false, "invocations": ["getClass", "findAnnotation", "registerRSocketService"]}, "repository": {"repo_id": 224353263, "url": "https://github.com/alibaba/alibaba-rsocket-broker", "stars": 208, "created": "11/27/2019 5:42:01 AM +00:00", "updates": "2020-01-27T22:23:55+00:00", "fork": "False", "license": "licensed"}}