{"test_class": {"identifier": "GaseousAbsorptionAuxTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GaseousAbsorptionAux absorptionAuxII = GaseousAbsorptionAux.getInstance();", "modifier": "private", "type": "GaseousAbsorptionAux", "declarator": "absorptionAuxII = GaseousAbsorptionAux.getInstance()", "var_name": "absorptionAuxII"}], "file": "s3tbx-olci-radiometry/src/test/java/org/esa/s3tbx/olci/radiometry/gasabsorption/GaseousAbsorptionAuxTest.java"}, "test_case": {"identifier": "testGetAbsorptionOLCI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAbsorptionOLCI() throws Exception {\n        double[] olciAbsorption = absorptionAuxII.absorptionOzone(\"OLCI\");\n        double[] expectedArrays = new double[]{\n                6.666666666666667E-6,\n                3.1E-4,\n                0.003181818181818182,\n                0.021318181818181816,\n                0.04210909090909091,\n                0.10538181818181819,\n                0.10820909090909091,\n                0.050372727272727284,\n                0.041042857142857145,\n                0.035614285714285716,\n                0.019549999999999998,\n                0.009142857142857144,\n                0.0071,\n                0.006966666666666667,\n                0.0067,\n                0.007673333333333333,\n                0.002142857142857143,\n                0.001227272727272727,\n                0.0015,\n                7.095238095238095E-4,\n                0.0\n        };\n        assertEquals(21, olciAbsorption.length);\n        Assert.assertArrayEquals(expectedArrays, olciAbsorption, 1e-8);\n    }", "signature": "void testGetAbsorptionOLCI()", "full_signature": "@Test public void testGetAbsorptionOLCI()", "class_method_signature": "GaseousAbsorptionAuxTest.testGetAbsorptionOLCI()", "testcase": true, "constructor": false, "invocations": ["absorptionOzone", "assertEquals", "assertArrayEquals"]}, "focal_class": {"identifier": "GaseousAbsorptionAux", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<double[]> ozoneHighs;", "modifier": "private", "type": "List<double[]>", "declarator": "ozoneHighs", "var_name": "ozoneHighs"}, {"original_string": "private List<double[]> coeffhighres = new ArrayList<>();", "modifier": "private", "type": "List<double[]>", "declarator": "coeffhighres = new ArrayList<>()", "var_name": "coeffhighres"}], "methods": [{"identifier": "GaseousAbsorptionAux", "parameters": "()", "modifiers": "", "return": "", "signature": " GaseousAbsorptionAux()", "full_signature": "  GaseousAbsorptionAux()", "class_method_signature": "GaseousAbsorptionAux.GaseousAbsorptionAux()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "GaseousAbsorptionAux", "signature": "GaseousAbsorptionAux getInstance()", "full_signature": "public static GaseousAbsorptionAux getInstance()", "class_method_signature": "GaseousAbsorptionAux.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getOzoneHighs", "parameters": "()", "modifiers": "public", "return": "List<double[]>", "signature": "List<double[]> getOzoneHighs()", "full_signature": "public List<double[]> getOzoneHighs()", "class_method_signature": "GaseousAbsorptionAux.getOzoneHighs()", "testcase": false, "constructor": false}, {"identifier": "getCoeffhighres", "parameters": "(List<double[]> ozoneHighs)", "modifiers": "public", "return": "List<double[]>", "signature": "List<double[]> getCoeffhighres(List<double[]> ozoneHighs)", "full_signature": "public List<double[]> getCoeffhighres(List<double[]> ozoneHighs)", "class_method_signature": "GaseousAbsorptionAux.getCoeffhighres(List<double[]> ozoneHighs)", "testcase": false, "constructor": false}, {"identifier": "installAuxdata", "parameters": "()", "modifiers": "", "return": "Path", "signature": "Path installAuxdata()", "full_signature": " Path installAuxdata()", "class_method_signature": "GaseousAbsorptionAux.installAuxdata()", "testcase": false, "constructor": false}, {"identifier": "convolve", "parameters": "(double lower, double upper, List<double[]> coeffhighres)", "modifiers": "", "return": "double", "signature": "double convolve(double lower, double upper, List<double[]> coeffhighres)", "full_signature": " double convolve(double lower, double upper, List<double[]> coeffhighres)", "class_method_signature": "GaseousAbsorptionAux.convolve(double lower, double upper, List<double[]> coeffhighres)", "testcase": false, "constructor": false}, {"identifier": "absorptionOzone", "parameters": "(String instrument)", "modifiers": "public", "return": "double[]", "signature": "double[] absorptionOzone(String instrument)", "full_signature": "public double[] absorptionOzone(String instrument)", "class_method_signature": "GaseousAbsorptionAux.absorptionOzone(String instrument)", "testcase": false, "constructor": false}], "file": "s3tbx-olci-radiometry/src/main/java/org/esa/s3tbx/olci/radiometry/gasabsorption/GaseousAbsorptionAux.java"}, "focal_method": {"identifier": "absorptionOzone", "parameters": "(String instrument)", "modifiers": "public", "return": "double[]", "body": "public double[] absorptionOzone(String instrument) {\n        List<Number> o3absorpInstrument = new ArrayList<>();\n\n        double[] lamC;\n        if (instrument.equals(\"MERIS\")) {\n            lamC = new double[]{412.5, 442.0, 490.0, 510.0, 560.0, 620.0, 665.0, 681.25, 708.75, 753.0, 761.25, 779.0, 865.0,\n                    885.0, 900};\n            double[] lamW = new double[]{10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 3.075, 10.0, 20.0, 20.0, 40.0};\n            for (int i = 0; i < lamC.length; i++) {\n                double lower = lamC[i] - lamW[i] / 2;\n                double upper = lamC[i] + lamW[i] / 2;\n                o3absorpInstrument.add(convolve(lower, upper, this.coeffhighres));\n            }\n        }\n        if (instrument.equals(\"OLCI\")) {\n            lamC = new double[]{\n                    400.0, 412.5, 442.0, 490.0, 510.0, 560.0, 620.0, 665.0, 673.75, 681.25, 708.75, 753.75, 761.25, 764.375, 767.5, 778.75, 865.0,\n                    885.0, 900.0, 940.0, 1020.0};\n            double[] lamW = new double[]{15.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 7.05, 7.05, 10.0, 7.05, 2.05, 3.075, 2.05, 15.0, 20.0, 10.0, 10.0, 20.0, 40.0};\n\n            for (int i = 0; i < lamC.length; i++) {\n                double lower = lamC[i] - lamW[i] / 2;\n                double upper = lamC[i] + lamW[i] / 2;\n                o3absorpInstrument.add(convolve(lower, upper, this.coeffhighres));\n            }\n        }\n        if (instrument.equals(\"S2_MSI\")) {\n            lamC = new double[]{\n                    442.0, 490.0, 560.0, 665.0, 705.0, 740.0, 783.0, 842.0, 865.0, 945.0,\n                    1375.0, 1610.0, 2190.0};\n            double[] lamW = new double[]{20.0, 65.0, 35.0, 30.0, 15.0, 15.0, 20.0, 115.0, 20.0, 20.0,\n                    30.0, 90.0, 180.0}; // http://www.gdal.org/frmt_sentinel2.html\n\n            for (int i = 0; i < lamC.length; i++) {\n                double lower = lamC[i] - lamW[i] / 2;\n                double upper = lamC[i] + lamW[i] / 2;\n                o3absorpInstrument.add(convolve(lower, upper, this.coeffhighres));\n            }\n        }\n\n        return Doubles.toArray(o3absorpInstrument);\n    }", "signature": "double[] absorptionOzone(String instrument)", "full_signature": "public double[] absorptionOzone(String instrument)", "class_method_signature": "GaseousAbsorptionAux.absorptionOzone(String instrument)", "testcase": false, "constructor": false, "invocations": ["equals", "add", "convolve", "equals", "add", "convolve", "equals", "add", "convolve", "toArray"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}