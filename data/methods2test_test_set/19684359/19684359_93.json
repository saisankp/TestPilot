{"test_class": {"identifier": "BigQueryHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private Bigquery mockBigquery;", "modifier": "@Mock private", "type": "Bigquery", "declarator": "mockBigquery", "var_name": "mockBigquery"}, {"original_string": "@Mock private Bigquery.Jobs mockBigqueryJobs;", "modifier": "@Mock private", "type": "Bigquery.Jobs", "declarator": "mockBigqueryJobs", "var_name": "mockBigqueryJobs"}, {"original_string": "@Mock private Bigquery.Jobs.Get mockBigqueryJobsGet;", "modifier": "@Mock private", "type": "Bigquery.Jobs.Get", "declarator": "mockBigqueryJobsGet", "var_name": "mockBigqueryJobsGet"}, {"original_string": "@Mock private Bigquery.Jobs.Insert mockBigqueryJobsInsert;", "modifier": "@Mock private", "type": "Bigquery.Jobs.Insert", "declarator": "mockBigqueryJobsInsert", "var_name": "mockBigqueryJobsInsert"}, {"original_string": "@Mock private Bigquery.Tables mockBigqueryTables;", "modifier": "@Mock private", "type": "Bigquery.Tables", "declarator": "mockBigqueryTables", "var_name": "mockBigqueryTables"}, {"original_string": "@Mock private Bigquery.Tables.Get mockBigqueryTablesGet;", "modifier": "@Mock private", "type": "Bigquery.Tables.Get", "declarator": "mockBigqueryTablesGet", "var_name": "mockBigqueryTablesGet"}, {"original_string": "@Mock private ApiErrorExtractor mockErrorExtractor;", "modifier": "@Mock private", "type": "ApiErrorExtractor", "declarator": "mockErrorExtractor", "var_name": "mockErrorExtractor"}, {"original_string": "private JobStatus jobStatus;", "modifier": "private", "type": "JobStatus", "declarator": "jobStatus", "var_name": "jobStatus"}, {"original_string": "private Job jobHandle;", "modifier": "private", "type": "Job", "declarator": "jobHandle", "var_name": "jobHandle"}, {"original_string": "private Table fakeTable;", "modifier": "private", "type": "Table", "declarator": "fakeTable", "var_name": "fakeTable"}, {"original_string": "private TableSchema fakeTableSchema;", "modifier": "private", "type": "TableSchema", "declarator": "fakeTableSchema", "var_name": "fakeTableSchema"}, {"original_string": "private String jobProjectId = \"google.com:foo-project\";", "modifier": "private", "type": "String", "declarator": "jobProjectId = \"google.com:foo-project\"", "var_name": "jobProjectId"}, {"original_string": "private final String kmsKeyName =\n      \"projects/google.com:foo-project/locations/us-west1/keyRings/ring-1/cryptoKeys/key-1\";", "modifier": "private final", "type": "String", "declarator": "kmsKeyName =\n      \"projects/google.com:foo-project/locations/us-west1/keyRings/ring-1/cryptoKeys/key-1\"", "var_name": "kmsKeyName"}, {"original_string": "private TableReference tableRef;", "modifier": "private", "type": "TableReference", "declarator": "tableRef", "var_name": "tableRef"}, {"original_string": "private String projectId = \"google.com:bar-project\";", "modifier": "private", "type": "String", "declarator": "projectId = \"google.com:bar-project\"", "var_name": "projectId"}, {"original_string": "private String datasetId = \"test_dataset\";", "modifier": "private", "type": "String", "declarator": "datasetId = \"test_dataset\"", "var_name": "datasetId"}, {"original_string": "private String tableId = \"test_table\";", "modifier": "private", "type": "String", "declarator": "tableId = \"test_table\"", "var_name": "tableId"}, {"original_string": "private String jobId = \"bigquery-job-1234\";", "modifier": "private", "type": "String", "declarator": "jobId = \"bigquery-job-1234\"", "var_name": "jobId"}, {"original_string": "private BigQueryHelper helper;", "modifier": "private", "type": "BigQueryHelper", "declarator": "helper", "var_name": "helper"}], "file": "bigquery/src/test/java/com/google/cloud/hadoop/io/bigquery/BigQueryHelperTest.java"}, "test_case": {"identifier": "testInsertJobOrFetchDuplicateAlreadyExistsException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInsertJobOrFetchDuplicateAlreadyExistsException() throws IOException {\n    IOException fakeConflictException = new IOException(\"fake 409 conflict\");\n    when(mockBigqueryJobsInsert.execute()).thenThrow(fakeConflictException);\n    when(mockErrorExtractor.itemAlreadyExists(any(IOException.class))).thenReturn(true);\n    when(mockBigqueryJobsGet.execute()).thenReturn(jobHandle);\n\n    assertThat(helper.insertJobOrFetchDuplicate(jobProjectId, jobHandle)).isEqualTo(jobHandle);\n\n    verify(mockBigquery, times(2)).jobs();\n    ArgumentCaptor<Job> jobCaptor = ArgumentCaptor.forClass(Job.class);\n    verify(mockBigqueryJobs, times(1)).insert(eq(jobProjectId), jobCaptor.capture());\n    Job job = jobCaptor.getValue();\n    assertThat(job).isEqualTo(jobHandle);\n    verify(mockBigqueryJobsInsert, times(1)).execute();\n    verify(mockBigqueryJobs, times(1)).get(eq(jobProjectId), eq(jobId));\n    verify(mockBigqueryJobsGet, times(1)).setLocation(eq(null));\n    verify(mockBigqueryJobsGet, times(1)).execute();\n    verify(mockErrorExtractor).itemAlreadyExists(eq(fakeConflictException));\n  }", "signature": "void testInsertJobOrFetchDuplicateAlreadyExistsException()", "full_signature": "@Test public void testInsertJobOrFetchDuplicateAlreadyExistsException()", "class_method_signature": "BigQueryHelperTest.testInsertJobOrFetchDuplicateAlreadyExistsException()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "execute", "thenReturn", "when", "itemAlreadyExists", "any", "thenReturn", "when", "execute", "isEqualTo", "assertThat", "insertJobOrFetchDuplicate", "jobs", "verify", "times", "forClass", "insert", "verify", "times", "eq", "capture", "getValue", "isEqualTo", "assertThat", "execute", "verify", "times", "get", "verify", "times", "eq", "eq", "setLocation", "verify", "times", "eq", "execute", "verify", "times", "itemAlreadyExists", "verify", "eq"]}, "focal_class": {"identifier": "BigQueryHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String BIGQUERY_JOB_ID_PATTERN = \"[a-zA-Z0-9_-]+\";", "modifier": "public static final", "type": "String", "declarator": "BIGQUERY_JOB_ID_PATTERN = \"[a-zA-Z0-9_-]+\"", "var_name": "BIGQUERY_JOB_ID_PATTERN"}, {"original_string": "public static final int BIGQUERY_JOB_ID_MAX_LENGTH = 1024;", "modifier": "public static final", "type": "int", "declarator": "BIGQUERY_JOB_ID_MAX_LENGTH = 1024", "var_name": "BIGQUERY_JOB_ID_MAX_LENGTH"}, {"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}, {"original_string": "private ApiErrorExtractor errorExtractor = ApiErrorExtractor.INSTANCE;", "modifier": "private", "type": "ApiErrorExtractor", "declarator": "errorExtractor = ApiErrorExtractor.INSTANCE", "var_name": "errorExtractor"}, {"original_string": "private Bigquery service;", "modifier": "private", "type": "Bigquery", "declarator": "service", "var_name": "service"}], "methods": [{"identifier": "BigQueryHelper", "parameters": "(Bigquery service)", "modifiers": "public", "return": "", "signature": " BigQueryHelper(Bigquery service)", "full_signature": "public  BigQueryHelper(Bigquery service)", "class_method_signature": "BigQueryHelper.BigQueryHelper(Bigquery service)", "testcase": false, "constructor": true}, {"identifier": "getRawBigquery", "parameters": "()", "modifiers": "public", "return": "Bigquery", "signature": "Bigquery getRawBigquery()", "full_signature": "public Bigquery getRawBigquery()", "class_method_signature": "BigQueryHelper.getRawBigquery()", "testcase": false, "constructor": false}, {"identifier": "importFederatedFromGcs", "parameters": "(\n      String projectId,\n      TableReference tableRef,\n      @Nullable TableSchema schema,\n      BigQueryFileFormat sourceFormat,\n      List<String> gcsPaths)", "modifiers": "public", "return": "void", "signature": "void importFederatedFromGcs(\n      String projectId,\n      TableReference tableRef,\n      @Nullable TableSchema schema,\n      BigQueryFileFormat sourceFormat,\n      List<String> gcsPaths)", "full_signature": "public void importFederatedFromGcs(\n      String projectId,\n      TableReference tableRef,\n      @Nullable TableSchema schema,\n      BigQueryFileFormat sourceFormat,\n      List<String> gcsPaths)", "class_method_signature": "BigQueryHelper.importFederatedFromGcs(\n      String projectId,\n      TableReference tableRef,\n      @Nullable TableSchema schema,\n      BigQueryFileFormat sourceFormat,\n      List<String> gcsPaths)", "testcase": false, "constructor": false}, {"identifier": "importFromGcs", "parameters": "(\n      String projectId,\n      TableReference tableRef,\n      @Nullable TableSchema schema,\n      @Nullable TimePartitioning timePartitioning,\n      @Nullable String kmsKeyName,\n      BigQueryFileFormat sourceFormat,\n      String createDisposition,\n      String writeDisposition,\n      List<String> gcsPaths,\n      boolean awaitCompletion)", "modifiers": "public", "return": "void", "signature": "void importFromGcs(\n      String projectId,\n      TableReference tableRef,\n      @Nullable TableSchema schema,\n      @Nullable TimePartitioning timePartitioning,\n      @Nullable String kmsKeyName,\n      BigQueryFileFormat sourceFormat,\n      String createDisposition,\n      String writeDisposition,\n      List<String> gcsPaths,\n      boolean awaitCompletion)", "full_signature": "public void importFromGcs(\n      String projectId,\n      TableReference tableRef,\n      @Nullable TableSchema schema,\n      @Nullable TimePartitioning timePartitioning,\n      @Nullable String kmsKeyName,\n      BigQueryFileFormat sourceFormat,\n      String createDisposition,\n      String writeDisposition,\n      List<String> gcsPaths,\n      boolean awaitCompletion)", "class_method_signature": "BigQueryHelper.importFromGcs(\n      String projectId,\n      TableReference tableRef,\n      @Nullable TableSchema schema,\n      @Nullable TimePartitioning timePartitioning,\n      @Nullable String kmsKeyName,\n      BigQueryFileFormat sourceFormat,\n      String createDisposition,\n      String writeDisposition,\n      List<String> gcsPaths,\n      boolean awaitCompletion)", "testcase": false, "constructor": false}, {"identifier": "exportBigQueryToGcs", "parameters": "(\n      String projectId, TableReference tableRef, List<String> gcsPaths, boolean awaitCompletion)", "modifiers": "public", "return": "void", "signature": "void exportBigQueryToGcs(\n      String projectId, TableReference tableRef, List<String> gcsPaths, boolean awaitCompletion)", "full_signature": "public void exportBigQueryToGcs(\n      String projectId, TableReference tableRef, List<String> gcsPaths, boolean awaitCompletion)", "class_method_signature": "BigQueryHelper.exportBigQueryToGcs(\n      String projectId, TableReference tableRef, List<String> gcsPaths, boolean awaitCompletion)", "testcase": false, "constructor": false}, {"identifier": "tableExists", "parameters": "(TableReference tableRef)", "modifiers": "public", "return": "boolean", "signature": "boolean tableExists(TableReference tableRef)", "full_signature": "public boolean tableExists(TableReference tableRef)", "class_method_signature": "BigQueryHelper.tableExists(TableReference tableRef)", "testcase": false, "constructor": false}, {"identifier": "getTable", "parameters": "(TableReference tableRef)", "modifiers": "public", "return": "Table", "signature": "Table getTable(TableReference tableRef)", "full_signature": "public Table getTable(TableReference tableRef)", "class_method_signature": "BigQueryHelper.getTable(TableReference tableRef)", "testcase": false, "constructor": false}, {"identifier": "createJobReference", "parameters": "(\n      String projectId, String jobIdPrefix, @Nullable String location)", "modifiers": "public", "return": "JobReference", "signature": "JobReference createJobReference(\n      String projectId, String jobIdPrefix, @Nullable String location)", "full_signature": "public JobReference createJobReference(\n      String projectId, String jobIdPrefix, @Nullable String location)", "class_method_signature": "BigQueryHelper.createJobReference(\n      String projectId, String jobIdPrefix, @Nullable String location)", "testcase": false, "constructor": false}, {"identifier": "checkJobIdEquality", "parameters": "(Job expected, Job actual)", "modifiers": "public", "return": "void", "signature": "void checkJobIdEquality(Job expected, Job actual)", "full_signature": "public void checkJobIdEquality(Job expected, Job actual)", "class_method_signature": "BigQueryHelper.checkJobIdEquality(Job expected, Job actual)", "testcase": false, "constructor": false}, {"identifier": "insertJobOrFetchDuplicate", "parameters": "(String projectId, Job job)", "modifiers": "public", "return": "Job", "signature": "Job insertJobOrFetchDuplicate(String projectId, Job job)", "full_signature": "public Job insertJobOrFetchDuplicate(String projectId, Job job)", "class_method_signature": "BigQueryHelper.insertJobOrFetchDuplicate(String projectId, Job job)", "testcase": false, "constructor": false}, {"identifier": "setErrorExtractor", "parameters": "(ApiErrorExtractor errorExtractor)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setErrorExtractor(ApiErrorExtractor errorExtractor)", "full_signature": "@VisibleForTesting void setErrorExtractor(ApiErrorExtractor errorExtractor)", "class_method_signature": "BigQueryHelper.setErrorExtractor(ApiErrorExtractor errorExtractor)", "testcase": false, "constructor": false}], "file": "bigquery/src/main/java/com/google/cloud/hadoop/io/bigquery/BigQueryHelper.java"}, "focal_method": {"identifier": "insertJobOrFetchDuplicate", "parameters": "(String projectId, Job job)", "modifiers": "public", "return": "Job", "body": "public Job insertJobOrFetchDuplicate(String projectId, Job job) throws IOException {\n    checkArgument(\n        job.getJobReference() != null && job.getJobReference().getJobId() != null,\n        \"Require non-null JobReference and JobId inside; getJobReference() == '%s'\",\n        job.getJobReference());\n    Job response;\n    try {\n      response = service.jobs().insert(projectId, job).execute();\n      logger.atFine().log(\"Successfully inserted job '%s'. Response: '%s'\", job, response);\n    } catch (IOException insertJobException) {\n      if (errorExtractor.itemAlreadyExists(insertJobException)) {\n        logger.atInfo().withCause(insertJobException).log(\n            \"Fetching existing job after catching exception for duplicate jobId '%s'\",\n            job.getJobReference().getJobId());\n        try {\n          response =\n              service\n                  .jobs()\n                  .get(projectId, job.getJobReference().getJobId())\n                  .setLocation(job.getJobReference().getLocation())\n                  .execute();\n        } catch (IOException getJobException) {\n          getJobException.addSuppressed(insertJobException);\n          throw new IOException(\n              String.format(\"Failed to get duplicate job '%s'\", job), getJobException);\n        }\n      } else {\n        throw new IOException(\n            String.format(\"Unhandled exception trying to insert job '%s'\", job),\n            insertJobException);\n      }\n    }\n    checkJobIdEquality(job, response);\n    return response;\n  }", "signature": "Job insertJobOrFetchDuplicate(String projectId, Job job)", "full_signature": "public Job insertJobOrFetchDuplicate(String projectId, Job job)", "class_method_signature": "BigQueryHelper.insertJobOrFetchDuplicate(String projectId, Job job)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "getJobReference", "getJobId", "getJobReference", "getJobReference", "execute", "insert", "jobs", "log", "atFine", "itemAlreadyExists", "log", "withCause", "atInfo", "getJobId", "getJobReference", "execute", "setLocation", "get", "jobs", "getJobId", "getJobReference", "getLocation", "getJobReference", "addSuppressed", "format", "format", "checkJobIdEquality"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}