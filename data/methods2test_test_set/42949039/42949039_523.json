{"test_class": {"identifier": "UserNamespaceAuthorizationHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private UserNamespaceAuthorizationHelper userNamespaceAuthorizationHelper;", "modifier": "@InjectMocks\n    private", "type": "UserNamespaceAuthorizationHelper", "declarator": "userNamespaceAuthorizationHelper", "var_name": "userNamespaceAuthorizationHelper"}, {"original_string": "@Mock\n    private NamespaceDao namespaceDao;", "modifier": "@Mock\n    private", "type": "NamespaceDao", "declarator": "namespaceDao", "var_name": "namespaceDao"}, {"original_string": "@Mock\n    private ConfigurationHelper configurationHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Mock\n    private UserDao userDao;", "modifier": "@Mock\n    private", "type": "UserDao", "declarator": "userDao", "var_name": "userDao"}, {"original_string": "@Mock\n    private UserNamespaceAuthorizationDao userNamespaceAuthorizationDao;", "modifier": "@Mock\n    private", "type": "UserNamespaceAuthorizationDao", "declarator": "userNamespaceAuthorizationDao", "var_name": "userNamespaceAuthorizationDao"}, {"original_string": "@Mock\n    private WildcardHelper wildcardHelper;", "modifier": "@Mock\n    private", "type": "WildcardHelper", "declarator": "wildcardHelper", "var_name": "wildcardHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/UserNamespaceAuthorizationHelperTest.java"}, "test_case": {"identifier": "testGetNamespacePermissions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetNamespacePermissions()\n    {\n        UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity = new UserNamespaceAuthorizationEntity();\n        userNamespaceAuthorizationEntity.setExecutePermission(true);\n        userNamespaceAuthorizationEntity.setGrantPermission(true);\n        userNamespaceAuthorizationEntity.setReadPermission(true);\n        userNamespaceAuthorizationEntity.setWritePermission(true);\n        userNamespaceAuthorizationEntity.setWriteAttributePermission(true);\n        userNamespaceAuthorizationEntity.setWriteDescriptiveContentPermission(true);\n\n        List<NamespacePermissionEnum> namespacePermissions = userNamespaceAuthorizationHelper.getNamespacePermissions(userNamespaceAuthorizationEntity);\n\n        assertThat(namespacePermissions.contains(NamespacePermissionEnum.EXECUTE), is(true));\n        assertThat(namespacePermissions.contains(NamespacePermissionEnum.GRANT), is(true));\n        assertThat(namespacePermissions.contains(NamespacePermissionEnum.READ), is(true));\n        assertThat(namespacePermissions.contains(NamespacePermissionEnum.WRITE), is(true));\n        assertThat(namespacePermissions.contains(NamespacePermissionEnum.WRITE_ATTRIBUTE), is(true));\n        assertThat(namespacePermissions.contains(NamespacePermissionEnum.WRITE_DESCRIPTIVE_CONTENT), is(true));\n    }", "signature": "void testGetNamespacePermissions()", "full_signature": "@Test public void testGetNamespacePermissions()", "class_method_signature": "UserNamespaceAuthorizationHelperTest.testGetNamespacePermissions()", "testcase": true, "constructor": false, "invocations": ["setExecutePermission", "setGrantPermission", "setReadPermission", "setWritePermission", "setWriteAttributePermission", "setWriteDescriptiveContentPermission", "getNamespacePermissions", "assertThat", "contains", "is", "assertThat", "contains", "is", "assertThat", "contains", "is", "assertThat", "contains", "is", "assertThat", "contains", "is", "assertThat", "contains", "is"]}, "focal_class": {"identifier": "UserNamespaceAuthorizationHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private NamespaceDao namespaceDao;", "modifier": "@Autowired\n    private", "type": "NamespaceDao", "declarator": "namespaceDao", "var_name": "namespaceDao"}, {"original_string": "@Autowired\n    private UserDao userDao;", "modifier": "@Autowired\n    private", "type": "UserDao", "declarator": "userDao", "var_name": "userDao"}, {"original_string": "@Autowired\n    private UserNamespaceAuthorizationDao userNamespaceAuthorizationDao;", "modifier": "@Autowired\n    private", "type": "UserNamespaceAuthorizationDao", "declarator": "userNamespaceAuthorizationDao", "var_name": "userNamespaceAuthorizationDao"}, {"original_string": "@Autowired\n    private WildcardHelper wildcardHelper;", "modifier": "@Autowired\n    private", "type": "WildcardHelper", "declarator": "wildcardHelper", "var_name": "wildcardHelper"}], "methods": [{"identifier": "buildNamespaceAuthorizations", "parameters": "(ApplicationUser applicationUser)", "modifiers": "public", "return": "void", "signature": "void buildNamespaceAuthorizations(ApplicationUser applicationUser)", "full_signature": "public void buildNamespaceAuthorizations(ApplicationUser applicationUser)", "class_method_signature": "UserNamespaceAuthorizationHelper.buildNamespaceAuthorizations(ApplicationUser applicationUser)", "testcase": false, "constructor": false}, {"identifier": "getAllNamespaceAuthorizations", "parameters": "()", "modifiers": "public", "return": "Set<NamespaceAuthorization>", "signature": "Set<NamespaceAuthorization> getAllNamespaceAuthorizations()", "full_signature": "public Set<NamespaceAuthorization> getAllNamespaceAuthorizations()", "class_method_signature": "UserNamespaceAuthorizationHelper.getAllNamespaceAuthorizations()", "testcase": false, "constructor": false}, {"identifier": "getNamespacePermissions", "parameters": "(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "modifiers": "public", "return": "List<NamespacePermissionEnum>", "signature": "List<NamespacePermissionEnum> getNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "full_signature": "public List<NamespacePermissionEnum> getNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "class_method_signature": "UserNamespaceAuthorizationHelper.getNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "testcase": false, "constructor": false}, {"identifier": "getAllNamespacePermissions", "parameters": "()", "modifiers": "private", "return": "List<NamespacePermissionEnum>", "signature": "List<NamespacePermissionEnum> getAllNamespacePermissions()", "full_signature": "private List<NamespacePermissionEnum> getAllNamespacePermissions()", "class_method_signature": "UserNamespaceAuthorizationHelper.getAllNamespacePermissions()", "testcase": false, "constructor": false}, {"identifier": "toNamespaceAuthorization", "parameters": "(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "modifiers": "private", "return": "NamespaceAuthorization", "signature": "NamespaceAuthorization toNamespaceAuthorization(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "full_signature": "private NamespaceAuthorization toNamespaceAuthorization(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "class_method_signature": "UserNamespaceAuthorizationHelper.toNamespaceAuthorization(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "testcase": false, "constructor": false}, {"identifier": "isNamespaceAuthorizationAdmin", "parameters": "(String userId)", "modifiers": "protected", "return": "boolean", "signature": "boolean isNamespaceAuthorizationAdmin(String userId)", "full_signature": "protected boolean isNamespaceAuthorizationAdmin(String userId)", "class_method_signature": "UserNamespaceAuthorizationHelper.isNamespaceAuthorizationAdmin(String userId)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/UserNamespaceAuthorizationHelper.java"}, "focal_method": {"identifier": "getNamespacePermissions", "parameters": "(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "modifiers": "public", "return": "List<NamespacePermissionEnum>", "body": "public List<NamespacePermissionEnum> getNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)\n    {\n        List<NamespacePermissionEnum> namespacePermissions = new ArrayList<>();\n\n        if (BooleanUtils.isTrue(userNamespaceAuthorizationEntity.getReadPermission()))\n        {\n            namespacePermissions.add(NamespacePermissionEnum.READ);\n        }\n        if (BooleanUtils.isTrue(userNamespaceAuthorizationEntity.getWritePermission()))\n        {\n            namespacePermissions.add(NamespacePermissionEnum.WRITE);\n        }\n        if (BooleanUtils.isTrue(userNamespaceAuthorizationEntity.getExecutePermission()))\n        {\n            namespacePermissions.add(NamespacePermissionEnum.EXECUTE);\n        }\n        if (BooleanUtils.isTrue(userNamespaceAuthorizationEntity.getGrantPermission()))\n        {\n            namespacePermissions.add(NamespacePermissionEnum.GRANT);\n        }\n        if (BooleanUtils.isTrue(userNamespaceAuthorizationEntity.getWriteDescriptiveContentPermission()))\n        {\n            namespacePermissions.add(NamespacePermissionEnum.WRITE_DESCRIPTIVE_CONTENT);\n        }\n        if (BooleanUtils.isTrue(userNamespaceAuthorizationEntity.getWriteAttributePermission()))\n        {\n            namespacePermissions.add(NamespacePermissionEnum.WRITE_ATTRIBUTE);\n        }\n\n        return namespacePermissions;\n    }", "signature": "List<NamespacePermissionEnum> getNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "full_signature": "public List<NamespacePermissionEnum> getNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "class_method_signature": "UserNamespaceAuthorizationHelper.getNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "testcase": false, "constructor": false, "invocations": ["isTrue", "getReadPermission", "add", "isTrue", "getWritePermission", "add", "isTrue", "getExecutePermission", "add", "isTrue", "getGrantPermission", "add", "isTrue", "getWriteDescriptiveContentPermission", "add", "isTrue", "getWriteAttributePermission", "add"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}