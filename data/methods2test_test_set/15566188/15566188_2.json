{"test_class": {"identifier": "RestErrorHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FIELD_ERROR_CODE = \"NotNull\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_ERROR_CODE = \"NotNull\"", "var_name": "FIELD_ERROR_CODE"}, {"original_string": "private static final String FIELD_ERROR_DEFAULT_MESSAGE = \"May not be null\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_ERROR_DEFAULT_MESSAGE = \"May not be null\"", "var_name": "FIELD_ERROR_DEFAULT_MESSAGE"}, {"original_string": "private static final String FIELD_NAME = \"field\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_NAME = \"field\"", "var_name": "FIELD_NAME"}, {"original_string": "private static final String OBJECT_NAME = \"object\";", "modifier": "private static final", "type": "String", "declarator": "OBJECT_NAME = \"object\"", "var_name": "OBJECT_NAME"}, {"original_string": "private RestErrorHandler errorHandler = new RestErrorHandler();", "modifier": "private", "type": "RestErrorHandler", "declarator": "errorHandler = new RestErrorHandler()", "var_name": "errorHandler"}], "file": "jooq-only/src/test/java/net/petrikainulainen/spring/jooq/common/controller/RestErrorHandlerTest.java"}, "test_case": {"identifier": "handleValidationError_WithOneFieldError_ShouldReturnRestErrorWithOneValidationError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void handleValidationError_WithOneFieldError_ShouldReturnRestErrorWithOneValidationError() throws NoSuchMethodException {\n\n        MethodParameter invokedMethod = createInvokedMethod();\n\n        FieldError fieldValidationError = createFieldError(FIELD_NAME, FIELD_ERROR_CODE, FIELD_ERROR_DEFAULT_MESSAGE);\n        BindingResult bindingResult = new BeanPropertyBindingResult(new Object(), OBJECT_NAME);\n        bindingResult.addError(fieldValidationError);\n\n        MethodArgumentNotValidException ex = new MethodArgumentNotValidException(invokedMethod, bindingResult);\n\n        RestError error = errorHandler.handleValidationError(ex);\n\n        assertThat(error.getCode()).isEqualTo(HttpStatus.BAD_REQUEST.value());\n        assertThat(error.getMessage()).isNotEmpty();\n        assertThat(error.getStatus()).isEqualTo(HttpStatus.BAD_REQUEST);\n\n        List<ValidationError> validationErrors = error.getValidationErrors();\n        assertThat(validationErrors).hasSize(1);\n\n        ValidationError validationError = validationErrors.get(0);\n        assertThat(validationError.getField()).isEqualTo(FIELD_NAME);\n        assertThat(validationError.getErrorCode()).isEqualTo(FIELD_ERROR_CODE);\n        assertThat(validationError.getErrorMessage()).isEqualTo(FIELD_ERROR_DEFAULT_MESSAGE);\n    }", "signature": "void handleValidationError_WithOneFieldError_ShouldReturnRestErrorWithOneValidationError()", "full_signature": "@Test public void handleValidationError_WithOneFieldError_ShouldReturnRestErrorWithOneValidationError()", "class_method_signature": "RestErrorHandlerTest.handleValidationError_WithOneFieldError_ShouldReturnRestErrorWithOneValidationError()", "testcase": true, "constructor": false, "invocations": ["createInvokedMethod", "createFieldError", "addError", "handleValidationError", "isEqualTo", "assertThat", "getCode", "value", "isNotEmpty", "assertThat", "getMessage", "isEqualTo", "assertThat", "getStatus", "getValidationErrors", "hasSize", "assertThat", "get", "isEqualTo", "assertThat", "getField", "isEqualTo", "assertThat", "getErrorCode", "isEqualTo", "assertThat", "getErrorMessage"]}, "focal_class": {"identifier": "RestErrorHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RestErrorHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RestErrorHandler.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "handleTodoNotFound", "parameters": "(TodoNotFoundException ex)", "modifiers": "@ExceptionHandler(TodoNotFoundException.class) @ResponseStatus(HttpStatus.NOT_FOUND) public", "return": "void", "signature": "void handleTodoNotFound(TodoNotFoundException ex)", "full_signature": "@ExceptionHandler(TodoNotFoundException.class) @ResponseStatus(HttpStatus.NOT_FOUND) public void handleTodoNotFound(TodoNotFoundException ex)", "class_method_signature": "RestErrorHandler.handleTodoNotFound(TodoNotFoundException ex)", "testcase": false, "constructor": false}, {"identifier": "handleValidationError", "parameters": "(MethodArgumentNotValidException ex)", "modifiers": "@ExceptionHandler(MethodArgumentNotValidException.class) @ResponseStatus(HttpStatus.BAD_REQUEST) @ResponseBody public", "return": "RestError", "signature": "RestError handleValidationError(MethodArgumentNotValidException ex)", "full_signature": "@ExceptionHandler(MethodArgumentNotValidException.class) @ResponseStatus(HttpStatus.BAD_REQUEST) @ResponseBody public RestError handleValidationError(MethodArgumentNotValidException ex)", "class_method_signature": "RestErrorHandler.handleValidationError(MethodArgumentNotValidException ex)", "testcase": false, "constructor": false}], "file": "jooq-only/src/main/java/net/petrikainulainen/spring/jooq/common/controller/RestErrorHandler.java"}, "focal_method": {"identifier": "handleValidationError", "parameters": "(MethodArgumentNotValidException ex)", "modifiers": "@ExceptionHandler(MethodArgumentNotValidException.class) @ResponseStatus(HttpStatus.BAD_REQUEST) @ResponseBody public", "return": "RestError", "body": "@ExceptionHandler(MethodArgumentNotValidException.class)\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ResponseBody\n    public RestError handleValidationError(MethodArgumentNotValidException ex) {\n        LOGGER.info(\"Handling validation error\");\n\n        RestError.Builder error = RestError.getBuilder()\n                .status(HttpStatus.BAD_REQUEST)\n                .code(HttpStatus.BAD_REQUEST.value())\n                .message(ex.getMessage());\n\n        List<FieldError> fieldErrors = ex.getBindingResult().getFieldErrors();\n\n        for (FieldError fieldError: fieldErrors) {\n            error.validationError(fieldError.getField(), fieldError.getCode(), fieldError.getDefaultMessage());\n        }\n\n        RestError validationError = error.build();\n\n        LOGGER.info(\"Returning validation error: {}\", validationError);\n\n        return validationError;\n    }", "signature": "RestError handleValidationError(MethodArgumentNotValidException ex)", "full_signature": "@ExceptionHandler(MethodArgumentNotValidException.class) @ResponseStatus(HttpStatus.BAD_REQUEST) @ResponseBody public RestError handleValidationError(MethodArgumentNotValidException ex)", "class_method_signature": "RestErrorHandler.handleValidationError(MethodArgumentNotValidException ex)", "testcase": false, "constructor": false, "invocations": ["info", "message", "code", "status", "getBuilder", "value", "getMessage", "getFieldErrors", "getBindingResult", "validationError", "getField", "getCode", "getDefaultMessage", "build", "info"]}, "repository": {"repo_id": 15566188, "url": "https://github.com/pkainulainen/jooq-with-spring-examples", "language": "Java", "is_fork": false, "fork_count": 51, "stargazer_count": 70, "size": 370, "license": "licensed"}}