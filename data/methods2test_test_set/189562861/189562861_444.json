{"test_class": {"identifier": "DefaultDubboConfigBinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private DubboConfigBinder dubboConfigBinder;", "modifier": "@Autowired\n    private", "type": "DubboConfigBinder", "declarator": "dubboConfigBinder", "var_name": "dubboConfigBinder"}, {"original_string": "@Value(\"${dubbo.consumer.default}\")\n    private Boolean isDefault;", "modifier": "@Value(\"${dubbo.consumer.default}\")\n    private", "type": "Boolean", "declarator": "isDefault", "var_name": "isDefault"}, {"original_string": "@Value(\"${dubbo.consumer.client}\")\n    private String client;", "modifier": "@Value(\"${dubbo.consumer.client}\")\n    private", "type": "String", "declarator": "client", "var_name": "client"}, {"original_string": "@Value(\"${dubbo.consumer.threadpool}\")\n    private String threadPool;", "modifier": "@Value(\"${dubbo.consumer.threadpool}\")\n    private", "type": "String", "declarator": "threadPool", "var_name": "threadPool"}, {"original_string": "@Value(\"${dubbo.consumer.corethreads}\")\n    private Integer coreThreads;", "modifier": "@Value(\"${dubbo.consumer.corethreads}\")\n    private", "type": "Integer", "declarator": "coreThreads", "var_name": "coreThreads"}, {"original_string": "@Value(\"${dubbo.consumer.threads}\")\n    private Integer threads;", "modifier": "@Value(\"${dubbo.consumer.threads}\")\n    private", "type": "Integer", "declarator": "threads", "var_name": "threads"}, {"original_string": "@Value(\"${dubbo.consumer.queues}\")\n    private Integer queues;", "modifier": "@Value(\"${dubbo.consumer.queues}\")\n    private", "type": "Integer", "declarator": "queues", "var_name": "queues"}], "file": "dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/context/properties/DefaultDubboConfigBinderTest.java"}, "test_case": {"identifier": "testBinder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBinder() {\n\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        dubboConfigBinder.bind(\"dubbo.application\", applicationConfig);\n        Assert.assertEquals(\"hello\", applicationConfig.getName());\n        Assert.assertEquals(\"world\", applicationConfig.getOwner());\n\n        RegistryConfig registryConfig = new RegistryConfig();\n        dubboConfigBinder.bind(\"dubbo.registry\", registryConfig);\n        Assert.assertEquals(\"10.20.153.17\", registryConfig.getAddress());\n\n        ProtocolConfig protocolConfig = new ProtocolConfig();\n        dubboConfigBinder.bind(\"dubbo.protocol\", protocolConfig);\n        Assert.assertEquals(Integer.valueOf(20881), protocolConfig.getPort());\n\n        ConsumerConfig consumerConfig = new ConsumerConfig();\n        dubboConfigBinder.bind(\"dubbo.consumer\", consumerConfig);\n\n        Assert.assertEquals(isDefault, consumerConfig.isDefault());\n        Assert.assertEquals(client, consumerConfig.getClient());\n        Assert.assertEquals(threadPool, consumerConfig.getThreadpool());\n        Assert.assertEquals(coreThreads, consumerConfig.getCorethreads());\n        Assert.assertEquals(threads, consumerConfig.getThreads());\n        Assert.assertEquals(queues, consumerConfig.getQueues());\n    }", "signature": "void testBinder()", "full_signature": "@Test public void testBinder()", "class_method_signature": "DefaultDubboConfigBinderTest.testBinder()", "testcase": true, "constructor": false, "invocations": ["bind", "assertEquals", "getName", "assertEquals", "getOwner", "bind", "assertEquals", "getAddress", "bind", "assertEquals", "valueOf", "getPort", "bind", "assertEquals", "isDefault", "assertEquals", "getClient", "assertEquals", "getThreadpool", "assertEquals", "getCorethreads", "assertEquals", "getThreads", "assertEquals", "getQueues"]}, "focal_class": {"identifier": "DefaultDubboConfigBinder", "superclass": "extends AbstractDubboConfigBinder", "interfaces": "", "fields": [], "methods": [{"identifier": "bind", "parameters": "(String prefix, C dubboConfig)", "modifiers": "@Override public", "return": "void", "signature": "void bind(String prefix, C dubboConfig)", "full_signature": "@Override public void bind(String prefix, C dubboConfig)", "class_method_signature": "DefaultDubboConfigBinder.bind(String prefix, C dubboConfig)", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/context/properties/DefaultDubboConfigBinder.java"}, "focal_method": {"identifier": "bind", "parameters": "(String prefix, C dubboConfig)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public <C extends AbstractConfig> void bind(String prefix, C dubboConfig) {\n        DataBinder dataBinder = new DataBinder(dubboConfig);\n        // Set ignored*\n        dataBinder.setIgnoreInvalidFields(isIgnoreInvalidFields());\n        dataBinder.setIgnoreUnknownFields(isIgnoreUnknownFields());\n        // Get properties under specified prefix from PropertySources\n        Map<String, Object> properties = getSubProperties(getPropertySources(), prefix);\n        // Convert Map to MutablePropertyValues\n        MutablePropertyValues propertyValues = new MutablePropertyValues(properties);\n        // Bind\n        dataBinder.bind(propertyValues);\n    }", "signature": "void bind(String prefix, C dubboConfig)", "full_signature": "@Override public void bind(String prefix, C dubboConfig)", "class_method_signature": "DefaultDubboConfigBinder.bind(String prefix, C dubboConfig)", "testcase": false, "constructor": false, "invocations": ["setIgnoreInvalidFields", "isIgnoreInvalidFields", "setIgnoreUnknownFields", "isIgnoreUnknownFields", "getSubProperties", "getPropertySources", "bind"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}