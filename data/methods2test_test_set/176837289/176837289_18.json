{"test_class": {"identifier": "KerberosUserMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Object rules = ConfigFactory.parseString(\n    \"rules=[\" +\n            // Short names (no realms):\n            \"{\" +\n                \"if: \\\"realm == null and primary.endsWith('-hello')\\\",\" +\n                \"then: \\\"primary[:-6] + '-bonjour@altostrat.net'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"realm == null and primary.endsWith('-lowercase')\\\",\" +\n                \"then: \\\"primary|lower + '@altostrat.com.au'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"realm == null\\\",\" +\n                \"then: \\\"primary + '@altostrat.com'\\\"\" +\n            \"},\" +\n            // Kerberos usernames:\n            \"{\" +\n                \"if: \\\"instance == null and realm == 'EXAMPLE.COM'\\\",\" +\n                \"then: \\\"primary + '@altostrat.com'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"instance != null and realm == 'EXAMPLE.COM'\\\",\" +\n                \"then: \\\"primary + '--' + instance + '@altostrat.com'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"primary.endsWith('-app') and realm == 'FOO.ORG'\\\",\" +\n                \"then: \\\"'robot-' + primary[:-4] + '@altostrat.org'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"realm == 'FOO.ORG'\\\",\" +\n                \"then: \\\"primary + '@altostrat.org'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"principal == 'bob@SUPER.REALM'\\\",\" +\n                \"then: \\\"'bob-super@super-domain.com'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"principal == 'bob/6.7.8.9@HELLO'\\\",\" +\n                \"then: \\\"'bobby@some-domain.org'\\\"\" +\n            \"}\" +\n        \"]\"\n        ).getAnyRef(\"rules\");", "modifier": "private static final", "type": "Object", "declarator": "rules = ConfigFactory.parseString(\n    \"rules=[\" +\n            // Short names (no realms):\n            \"{\" +\n                \"if: \\\"realm == null and primary.endsWith('-hello')\\\",\" +\n                \"then: \\\"primary[:-6] + '-bonjour@altostrat.net'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"realm == null and primary.endsWith('-lowercase')\\\",\" +\n                \"then: \\\"primary|lower + '@altostrat.com.au'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"realm == null\\\",\" +\n                \"then: \\\"primary + '@altostrat.com'\\\"\" +\n            \"},\" +\n            // Kerberos usernames:\n            \"{\" +\n                \"if: \\\"instance == null and realm == 'EXAMPLE.COM'\\\",\" +\n                \"then: \\\"primary + '@altostrat.com'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"instance != null and realm == 'EXAMPLE.COM'\\\",\" +\n                \"then: \\\"primary + '--' + instance + '@altostrat.com'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"primary.endsWith('-app') and realm == 'FOO.ORG'\\\",\" +\n                \"then: \\\"'robot-' + primary[:-4] + '@altostrat.org'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"realm == 'FOO.ORG'\\\",\" +\n                \"then: \\\"primary + '@altostrat.org'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"principal == 'bob@SUPER.REALM'\\\",\" +\n                \"then: \\\"'bob-super@super-domain.com'\\\"\" +\n            \"},\" +\n            \"{\" +\n                \"if: \\\"principal == 'bob/6.7.8.9@HELLO'\\\",\" +\n                \"then: \\\"'bobby@some-domain.org'\\\"\" +\n            \"}\" +\n        \"]\"\n        ).getAnyRef(\"rules\")", "var_name": "rules"}, {"original_string": "@ClassRule\n    public static SettingsOverride settingsOverride = new SettingsOverride(Map.of(\n        AppSettings.USER_MAPPING_RULES, rules\n    ));", "modifier": "@ClassRule\n    public static", "type": "SettingsOverride", "declarator": "settingsOverride = new SettingsOverride(Map.of(\n        AppSettings.USER_MAPPING_RULES, rules\n    ))", "var_name": "settingsOverride"}], "file": "code/core/src/test/java/com/google/cloud/broker/usermapping/KerberosUserMapperTest.java"}, "test_case": {"identifier": "testMapKerberosName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMapKerberosName() {\n        KerberosUserMapper mapper = new KerberosUserMapper();\n        assertEquals(\"alice@altostrat.com\", mapper.map(\"alice@EXAMPLE.COM\"));\n        assertEquals(\"hive--example.com@altostrat.com\", mapper.map(\"hive/example.com@EXAMPLE.COM\"));\n        assertEquals(\"robot-yarn@altostrat.org\", mapper.map(\"yarn-app@FOO.ORG\"));\n        assertEquals(\"bob@altostrat.org\", mapper.map(\"bob@FOO.ORG\"));\n        assertEquals(\"bob-super@super-domain.com\", mapper.map(\"bob@SUPER.REALM\"));\n        assertEquals(\"bobby@some-domain.org\", mapper.map(\"bob/6.7.8.9@HELLO\"));\n    }", "signature": "void testMapKerberosName()", "full_signature": "@Test public void testMapKerberosName()", "class_method_signature": "KerberosUserMapperTest.testMapKerberosName()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "map", "assertEquals", "map", "assertEquals", "map", "assertEquals", "map", "assertEquals", "map", "assertEquals", "map"]}, "focal_class": {"identifier": "KerberosUserMapper", "superclass": "extends AbstractUserMapper", "interfaces": "", "fields": [{"original_string": "private List<Rule> rulesList = new ArrayList<>();", "modifier": "private", "type": "List<Rule>", "declarator": "rulesList = new ArrayList<>()", "var_name": "rulesList"}, {"original_string": "private final static String INVALID_SETTING = \"Invalid `\" + AppSettings.USER_MAPPING_RULES + \"` setting -- \";", "modifier": "private final static", "type": "String", "declarator": "INVALID_SETTING = \"Invalid `\" + AppSettings.USER_MAPPING_RULES + \"` setting -- \"", "var_name": "INVALID_SETTING"}], "methods": [{"identifier": "KerberosUserMapper", "parameters": "()", "modifiers": "public", "return": "", "signature": " KerberosUserMapper()", "full_signature": "public  KerberosUserMapper()", "class_method_signature": "KerberosUserMapper.KerberosUserMapper()", "testcase": false, "constructor": true}, {"identifier": "loadMappingRules", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadMappingRules()", "full_signature": "private void loadMappingRules()", "class_method_signature": "KerberosUserMapper.loadMappingRules()", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "signature": "String map(String name)", "full_signature": "@Override public String map(String name)", "class_method_signature": "KerberosUserMapper.map(String name)", "testcase": false, "constructor": false}], "file": "code/core/src/main/java/com/google/cloud/broker/usermapping/KerberosUserMapper.java"}, "focal_method": {"identifier": "map", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String map(String name) {\n        Context context = new Context();\n        KerberosName principal = new KerberosName(name);\n        context.put(\"principal\", principal.getFullName());\n        context.put(\"primary\", principal.getPrimary());\n        context.put(\"instance\", principal.getInstance());\n        context.put(\"realm\", principal.getRealm());\n        // Look through the list of rules\n        for (Rule rule : rulesList) {\n            boolean isApplicable = rule.evaluateIfCondition(context);\n            if (isApplicable) {\n                // An applicable rule was found. Apply it to get the user mapping.\n                return rule.evaluateThenExpression(context);\n            }\n        }\n        throw new IllegalArgumentException(\"Principal `\" + name + \"` cannot be mapped to a Google identity.\");\n    }", "signature": "String map(String name)", "full_signature": "@Override public String map(String name)", "class_method_signature": "KerberosUserMapper.map(String name)", "testcase": false, "constructor": false, "invocations": ["put", "getFullName", "put", "getPrimary", "put", "getInstance", "put", "getRealm", "evaluateIfCondition", "evaluateThenExpression"]}, "repository": {"repo_id": 176837289, "url": "https://github.com/GoogleCloudPlatform/gcp-token-broker", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 27, "size": 1700, "license": "licensed"}}