{"test_class": {"identifier": "ExtSourcePerunTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Spy\n\tprivate static ExtSourcePerun extSourcePerun;", "modifier": "@Spy\n\tprivate static", "type": "ExtSourcePerun", "declarator": "extSourcePerun", "var_name": "extSourcePerun"}], "file": "perun-core/src/test/java/cz/metacentrum/perun/core/impl/ExtSourcePerunTest.java"}, "test_case": {"identifier": "getUsersSubjectsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getUsersSubjectsTest() throws Exception {\n\t\tSystem.out.println(\"getUsersSubjectsTest\");\n\n\t\t// set up list of rich users\n\t\tAttributeDefinition attributeDefinition = new AttributeDefinition();\n\t\tattributeDefinition.setFriendlyName(\"firstName\");\n\t\tattributeDefinition.setNamespace(AttributesManager.NS_USER_ATTR_DEF);\n\t\tattributeDefinition.setType(String.class.getName());\n\t\tAttribute attribute = new Attribute(attributeDefinition, \"metodej\");\n\n\t\tExtSource extSource = new ExtSource();\n\t\textSource.setName(\"extSourceNameForLogin\");\n\n\t\tUserExtSource userExtSource = new UserExtSource();\n\t\tuserExtSource.setLogin(\"extSourceNameForLogin\");\n\t\tuserExtSource.setExtSource(extSource);\n\t\tRichUser richUser = new RichUser(new User(), Collections.singletonList(userExtSource), Collections.singletonList(attribute));\n\n\t\tList<RichUser> richUserList = new ArrayList<>();\n\t\trichUserList.add(richUser);\n\n\t\tJsonDeserializer deserializer = mock(JsonDeserializer.class);\n\t\tdoReturn(deserializer).when(extSourcePerun).call(\"usersManager\", \"findRichUsers\", \"searchString=query\");\n\t\tdoReturn(richUserList).when(deserializer).readList(RichUser.class);\n\n\t\t// define needed attributes\n\t\tMap<String, String> mapOfAttributes = new HashMap<>();\n\t\tmapOfAttributes.put(\"usersQuery\", \"query\");\n\t\tmapOfAttributes.put(\"perunUrl\", \"perunUrl\");\n\t\tmapOfAttributes.put(\"username\", \"username\");\n\t\tmapOfAttributes.put(\"password\", \"password\");\n\t\tmapOfAttributes.put(\"extSourceNameForLogin\", \"extSourceNameForLogin\");\n\t\tmapOfAttributes.put(\"xmlMapping\", \"firstName={urn:perun:user:attribute-def:def:firstName},\\nlogin={login}\");\n\t\tdoReturn(mapOfAttributes).when(extSourcePerun).getAttributes();\n\n\t\t// create expected subject to get\n\t\tList<Map<String, String>> expectedSubjects = new ArrayList<>();\n\t\tMap<String, String> subject = new HashMap<>();\n\t\tsubject.put(\"login\", \"extSourceNameForLogin\");\n\t\tsubject.put(\"firstName\", \"metodej\");\n\t\texpectedSubjects.add(subject);\n\n\t\t// test the method\n\t\tList<Map<String, String>> actualSubjects = extSourcePerun.getUsersSubjects();\n\t\tassertEquals(\"subjects should be same\", expectedSubjects, actualSubjects);\n\t}", "signature": "void getUsersSubjectsTest()", "full_signature": "@Test public void getUsersSubjectsTest()", "class_method_signature": "ExtSourcePerunTest.getUsersSubjectsTest()", "testcase": true, "constructor": false, "invocations": ["println", "setFriendlyName", "setNamespace", "setType", "getName", "setName", "setLogin", "setExtSource", "singletonList", "singletonList", "add", "mock", "call", "when", "doReturn", "readList", "when", "doReturn", "put", "put", "put", "put", "put", "put", "getAttributes", "when", "doReturn", "put", "put", "add", "getUsersSubjects", "assertEquals"]}, "focal_class": {"identifier": "ExtSourcePerun", "superclass": "extends ExtSource", "interfaces": "implements ExtSourceApi", "fields": [{"original_string": "private final static Logger log = LoggerFactory.getLogger(ExtSourcePerun.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ExtSourcePerun.class)", "var_name": "log"}, {"original_string": "private static final String format = \"json\";", "modifier": "private static final", "type": "String", "declarator": "format = \"json\"", "var_name": "format"}, {"original_string": "private String perunUrl;", "modifier": "private", "type": "String", "declarator": "perunUrl", "var_name": "perunUrl"}, {"original_string": "private String username;", "modifier": "private", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private static CookieStore cookieStore = new BasicCookieStore();", "modifier": "private static", "type": "CookieStore", "declarator": "cookieStore = new BasicCookieStore()", "var_name": "cookieStore"}, {"original_string": "private String extSourceNameForLogin = null;", "modifier": "private", "type": "String", "declarator": "extSourceNameForLogin = null", "var_name": "extSourceNameForLogin"}, {"original_string": "public static final Pattern attributePattern = Pattern.compile(\"[{](.+)[}]\");", "modifier": "public static final", "type": "Pattern", "declarator": "attributePattern = Pattern.compile(\"[{](.+)[}]\")", "var_name": "attributePattern"}, {"original_string": "private static PerunBlImpl perunBl;", "modifier": "private static", "type": "PerunBlImpl", "declarator": "perunBl", "var_name": "perunBl"}], "methods": [{"identifier": "setPerunBlImpl", "parameters": "(PerunBlImpl perun)", "modifiers": "public static", "return": "PerunBlImpl", "signature": "PerunBlImpl setPerunBlImpl(PerunBlImpl perun)", "full_signature": "public static PerunBlImpl setPerunBlImpl(PerunBlImpl perun)", "class_method_signature": "ExtSourcePerun.setPerunBlImpl(PerunBlImpl perun)", "testcase": false, "constructor": false}, {"identifier": "findSubjectsLogins", "parameters": "(String searchString)", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> findSubjectsLogins(String searchString)", "full_signature": "@Override public List<Map<String,String>> findSubjectsLogins(String searchString)", "class_method_signature": "ExtSourcePerun.findSubjectsLogins(String searchString)", "testcase": false, "constructor": false}, {"identifier": "findSubjectsLogins", "parameters": "(String searchString, int maxResulsts)", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> findSubjectsLogins(String searchString, int maxResulsts)", "full_signature": "@Override public List<Map<String,String>> findSubjectsLogins(String searchString, int maxResulsts)", "class_method_signature": "ExtSourcePerun.findSubjectsLogins(String searchString, int maxResulsts)", "testcase": false, "constructor": false}, {"identifier": "findSubjects", "parameters": "(String searchString)", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> findSubjects(String searchString)", "full_signature": "@Override public List<Map<String,String>> findSubjects(String searchString)", "class_method_signature": "ExtSourcePerun.findSubjects(String searchString)", "testcase": false, "constructor": false}, {"identifier": "findSubjects", "parameters": "(String searchString, int maxResults)", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> findSubjects(String searchString, int maxResults)", "full_signature": "@Override public List<Map<String,String>> findSubjects(String searchString, int maxResults)", "class_method_signature": "ExtSourcePerun.findSubjects(String searchString, int maxResults)", "testcase": false, "constructor": false}, {"identifier": "getSubjectByLogin", "parameters": "(String login)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getSubjectByLogin(String login)", "full_signature": "@Override public Map<String, String> getSubjectByLogin(String login)", "class_method_signature": "ExtSourcePerun.getSubjectByLogin(String login)", "testcase": false, "constructor": false}, {"identifier": "getGroupSubjects", "parameters": "(Map<String, String> attributes)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getGroupSubjects(Map<String, String> attributes)", "full_signature": "@Override public List<Map<String, String>> getGroupSubjects(Map<String, String> attributes)", "class_method_signature": "ExtSourcePerun.getGroupSubjects(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "getUsersSubjects", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getUsersSubjects()", "full_signature": "@Override public List<Map<String, String>> getUsersSubjects()", "class_method_signature": "ExtSourcePerun.getUsersSubjects()", "testcase": false, "constructor": false}, {"identifier": "convertRichUsersToListOfSubjects", "parameters": "(List<RichUser> richUsers)", "modifiers": "private", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> convertRichUsersToListOfSubjects(List<RichUser> richUsers)", "full_signature": "private List<Map<String, String>> convertRichUsersToListOfSubjects(List<RichUser> richUsers)", "class_method_signature": "ExtSourcePerun.convertRichUsersToListOfSubjects(List<RichUser> richUsers)", "testcase": false, "constructor": false}, {"identifier": "covertRichUserToSubject", "parameters": "(RichUser richUser)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> covertRichUserToSubject(RichUser richUser)", "full_signature": "private Map<String, String> covertRichUserToSubject(RichUser richUser)", "class_method_signature": "ExtSourcePerun.covertRichUserToSubject(RichUser richUser)", "testcase": false, "constructor": false}, {"identifier": "lookingForValueInRichUserAttributes", "parameters": "(String value, RichUser richUser)", "modifiers": "private", "return": "String", "signature": "String lookingForValueInRichUserAttributes(String value, RichUser richUser)", "full_signature": "private String lookingForValueInRichUserAttributes(String value, RichUser richUser)", "class_method_signature": "ExtSourcePerun.lookingForValueInRichUserAttributes(String value, RichUser richUser)", "testcase": false, "constructor": false}, {"identifier": "findRichUser", "parameters": "(String login)", "modifiers": "private", "return": "RichUser", "signature": "RichUser findRichUser(String login)", "full_signature": "private RichUser findRichUser(String login)", "class_method_signature": "ExtSourcePerun.findRichUser(String login)", "testcase": false, "constructor": false}, {"identifier": "findRichUsers", "parameters": "(String substring)", "modifiers": "private", "return": "List<RichUser>", "signature": "List<RichUser> findRichUsers(String substring)", "full_signature": "private List<RichUser> findRichUsers(String substring)", "class_method_signature": "ExtSourcePerun.findRichUsers(String substring)", "testcase": false, "constructor": false}, {"identifier": "findRichUsers", "parameters": "(Integer groupId)", "modifiers": "private", "return": "List<RichUser>", "signature": "List<RichUser> findRichUsers(Integer groupId)", "full_signature": "private List<RichUser> findRichUsers(Integer groupId)", "class_method_signature": "ExtSourcePerun.findRichUsers(Integer groupId)", "testcase": false, "constructor": false}, {"identifier": "setEnviroment", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setEnviroment()", "full_signature": "private void setEnviroment()", "class_method_signature": "ExtSourcePerun.setEnviroment()", "testcase": false, "constructor": false}, {"identifier": "convertListOfRichMembersToListOfRichUsers", "parameters": "(List<RichMember> richMembers)", "modifiers": "private", "return": "List<RichUser>", "signature": "List<RichUser> convertListOfRichMembersToListOfRichUsers(List<RichMember> richMembers)", "full_signature": "private List<RichUser> convertListOfRichMembersToListOfRichUsers(List<RichMember> richMembers)", "class_method_signature": "ExtSourcePerun.convertListOfRichMembersToListOfRichUsers(List<RichMember> richMembers)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(String managerName, String methodName)", "modifiers": "private", "return": "Deserializer", "signature": "Deserializer call(String managerName, String methodName)", "full_signature": "private Deserializer call(String managerName, String methodName)", "class_method_signature": "ExtSourcePerun.call(String managerName, String methodName)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(String managerName, String methodName, String query)", "modifiers": "protected", "return": "Deserializer", "signature": "Deserializer call(String managerName, String methodName, String query)", "full_signature": "protected Deserializer call(String managerName, String methodName, String query)", "class_method_signature": "ExtSourcePerun.call(String managerName, String methodName, String query)", "testcase": false, "constructor": false}, {"identifier": "processIOException", "parameters": "(Throwable e)", "modifiers": "private", "return": "void", "signature": "void processIOException(Throwable e)", "full_signature": "private void processIOException(Throwable e)", "class_method_signature": "ExtSourcePerun.processIOException(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "processIOException", "parameters": "(HttpURLConnection con, Throwable e)", "modifiers": "private", "return": "void", "signature": "void processIOException(HttpURLConnection con, Throwable e)", "full_signature": "private void processIOException(HttpURLConnection con, Throwable e)", "class_method_signature": "ExtSourcePerun.processIOException(HttpURLConnection con, Throwable e)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ExtSourcePerun.close()", "testcase": false, "constructor": false}, {"identifier": "getSubjectGroups", "parameters": "(Map<String, String> attributes)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getSubjectGroups(Map<String, String> attributes)", "full_signature": "@Override public List<Map<String, String>> getSubjectGroups(Map<String, String> attributes)", "class_method_signature": "ExtSourcePerun.getSubjectGroups(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "()", "modifiers": "protected", "return": "Map<String,String>", "signature": "Map<String,String> getAttributes()", "full_signature": "protected Map<String,String> getAttributes()", "class_method_signature": "ExtSourcePerun.getAttributes()", "testcase": false, "constructor": false}], "file": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/ExtSourcePerun.java"}, "focal_method": {"identifier": "getUsersSubjects", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<String, String>>", "body": "@Override\n\tpublic List<Map<String, String>> getUsersSubjects() {\n\t\tString query = getAttributes().get(UsersManager.USERS_QUERY);\n\n\t\tsetEnviroment();\n\n\t\treturn convertRichUsersToListOfSubjects(findRichUsers(query));\n\t}", "signature": "List<Map<String, String>> getUsersSubjects()", "full_signature": "@Override public List<Map<String, String>> getUsersSubjects()", "class_method_signature": "ExtSourcePerun.getUsersSubjects()", "testcase": false, "constructor": false, "invocations": ["get", "getAttributes", "setEnviroment", "convertRichUsersToListOfSubjects", "findRichUsers"]}, "repository": {"repo_id": 4085998, "url": "https://github.com/CESNET/perun", "stars": 38, "created": "4/20/2012 11:55:38 AM +00:00", "updates": "2020-01-27T09:51:13+00:00", "fork": "False", "license": "licensed"}}