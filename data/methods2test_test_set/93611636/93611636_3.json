{"test_class": {"identifier": "FibonacciRpcEndpointTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FibonacciService fibonacciService = Mockito.mock(FibonacciService.class);", "modifier": "private final", "type": "FibonacciService", "declarator": "fibonacciService = Mockito.mock(FibonacciService.class)", "var_name": "fibonacciService"}, {"original_string": "private final long expected = Randomness.nextLong();", "modifier": "private final", "type": "long", "declarator": "expected = Randomness.nextLong()", "var_name": "expected"}, {"original_string": "private final int term = Randomness.nextInt();", "modifier": "private final", "type": "int", "declarator": "term = Randomness.nextInt()", "var_name": "term"}, {"original_string": "private final FibonacciRpcEndpoint fibonacciRpcApi = new FibonacciRpcEndpoint(fibonacciService);", "modifier": "private final", "type": "FibonacciRpcEndpoint", "declarator": "fibonacciRpcApi = new FibonacciRpcEndpoint(fibonacciService)", "var_name": "fibonacciRpcApi"}], "file": "worker/src/test/java/io/servicecomb/company/worker/FibonacciRpcEndpointTest.java"}, "test_case": {"identifier": "providesFibonacciTermWithUnderlyingService", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void providesFibonacciTermWithUnderlyingService() {\n    when(fibonacciService.term(term)).thenReturn(expected);\n\n    long fibo = fibonacciRpcApi.term(term);\n\n    assertThat(fibo).isEqualTo(expected);\n  }", "signature": "void providesFibonacciTermWithUnderlyingService()", "full_signature": "@Test public void providesFibonacciTermWithUnderlyingService()", "class_method_signature": "FibonacciRpcEndpointTest.providesFibonacciTermWithUnderlyingService()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "term", "term", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "FibonacciRpcEndpoint", "superclass": "", "interfaces": "implements FibonacciEndpoint", "fields": [{"original_string": "private final FibonacciService fibonacciService;", "modifier": "private final", "type": "FibonacciService", "declarator": "fibonacciService", "var_name": "fibonacciService"}], "methods": [{"identifier": "FibonacciRpcEndpoint", "parameters": "(FibonacciService fibonacciService)", "modifiers": "@Autowired public", "return": "", "signature": " FibonacciRpcEndpoint(FibonacciService fibonacciService)", "full_signature": "@Autowired public  FibonacciRpcEndpoint(FibonacciService fibonacciService)", "class_method_signature": "FibonacciRpcEndpoint.FibonacciRpcEndpoint(FibonacciService fibonacciService)", "testcase": false, "constructor": true}, {"identifier": "term", "parameters": "(int n)", "modifiers": "@Override public", "return": "long", "signature": "long term(int n)", "full_signature": "@Override public long term(int n)", "class_method_signature": "FibonacciRpcEndpoint.term(int n)", "testcase": false, "constructor": false}], "file": "worker/src/main/java/io/servicecomb/company/worker/FibonacciRpcEndpoint.java"}, "focal_method": {"identifier": "term", "parameters": "(int n)", "modifiers": "@Override public", "return": "long", "body": "@Override\n  public long term(int n) {\n    return fibonacciService.term(n);\n  }", "signature": "long term(int n)", "full_signature": "@Override public long term(int n)", "class_method_signature": "FibonacciRpcEndpoint.term(int n)", "testcase": false, "constructor": false, "invocations": ["term"]}, "repository": {"repo_id": 93611636, "url": "https://github.com/huaweicse/ServiceComb-Company-WorkShop", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 79, "size": 1350, "license": "licensed"}}