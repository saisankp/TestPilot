{"test_class": {"identifier": "PrecompilePluginTest", "superclass": "", "interfaces": "", "fields": [], "file": "handlebars-maven-plugin/src/test/java/com/github/jknack/handlebars/maven/PrecompilePluginTest.java"}, "test_case": {"identifier": "i18nJs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void i18nJs() throws Exception {\n    PrecompilePlugin plugin = new PrecompilePlugin();\n    plugin.setPrefix(\"src/test/resources/i18nJs\");\n    plugin.setSuffix(\".html\");\n    plugin.setOutput(\"target/helpers-i18njs.js\");\n    plugin.setProject(newProject());\n    plugin.setHandlebarsJsFile(\"/handlebars-v4.7.6.js\");\n\n    plugin.execute();\n\n    assertEquals(FileUtils.fileRead(\"target/helpers-i18njs.js\"),\n        FileUtils.fileRead(\"src/test/resources/helpers-i18njs.expected\").trim(),\n        FileUtils.fileRead(\"target/helpers-i18njs.js\").trim());\n  }", "signature": "void i18nJs()", "full_signature": "@Test public void i18nJs()", "class_method_signature": "PrecompilePluginTest.i18nJs()", "testcase": true, "constructor": false, "invocations": ["setPrefix", "setSuffix", "setOutput", "setProject", "newProject", "setHandlebarsJsFile", "execute", "assertEquals", "fileRead", "trim", "fileRead", "trim", "fileRead"]}, "focal_class": {"identifier": "PrecompilePlugin", "superclass": "extends HandlebarsPlugin", "interfaces": "", "fields": [{"original_string": "@Parameter(defaultValue = \"${basedir}/src/main/webapp\")\n  private String prefix;", "modifier": "@Parameter(defaultValue = \"${basedir}/src/main/webapp\")\n  private", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "@Parameter(defaultValue = \".hbs\")\n  private String suffix = \".hbs\";", "modifier": "@Parameter(defaultValue = \".hbs\")\n  private", "type": "String", "declarator": "suffix = \".hbs\"", "var_name": "suffix"}, {"original_string": "@Parameter\n  private List<String> templates;", "modifier": "@Parameter\n  private", "type": "List<String>", "declarator": "templates", "var_name": "templates"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}/${project.build.finalName}/js/helpers.js\")\n  private String output;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}/${project.build.finalName}/js/helpers.js\")\n  private", "type": "String", "declarator": "output", "var_name": "output"}, {"original_string": "@Parameter(defaultValue = \"/handlebars-v4.7.6.js\")\n  private String handlebarsJsFile;", "modifier": "@Parameter(defaultValue = \"/handlebars-v4.7.6.js\")\n  private", "type": "String", "declarator": "handlebarsJsFile", "var_name": "handlebarsJsFile"}, {"original_string": "@Parameter\n  private String runtime;", "modifier": "@Parameter\n  private", "type": "String", "declarator": "runtime", "var_name": "runtime"}, {"original_string": "@Parameter\n  private boolean minimize;", "modifier": "@Parameter\n  private", "type": "boolean", "declarator": "minimize", "var_name": "minimize"}, {"original_string": "@Parameter\n  private boolean amd;", "modifier": "@Parameter\n  private", "type": "boolean", "declarator": "amd", "var_name": "amd"}, {"original_string": "@Parameter\n  private String encoding = \"UTF-8\";", "modifier": "@Parameter\n  private", "type": "String", "declarator": "encoding = \"UTF-8\"", "var_name": "encoding"}], "methods": [{"identifier": "doExecute", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doExecute()", "full_signature": "@Override protected void doExecute()", "class_method_signature": "PrecompilePlugin.doExecute()", "testcase": false, "constructor": false}, {"identifier": "silentHelpers", "parameters": "(final Handlebars handlebars)", "modifiers": "private", "return": "void", "signature": "void silentHelpers(final Handlebars handlebars)", "full_signature": "private void silentHelpers(final Handlebars handlebars)", "class_method_signature": "PrecompilePlugin.silentHelpers(final Handlebars handlebars)", "testcase": false, "constructor": false}, {"identifier": "i18n", "parameters": "(final Handlebars handlebars)", "modifiers": "private", "return": "void", "signature": "void i18n(final Handlebars handlebars)", "full_signature": "private void i18n(final Handlebars handlebars)", "class_method_signature": "PrecompilePlugin.i18n(final Handlebars handlebars)", "testcase": false, "constructor": false}, {"identifier": "i18nJs", "parameters": "(final Handlebars handlebars, final List<CharSequence> extras,\n      final URL[] classpath)", "modifiers": "private", "return": "void", "signature": "void i18nJs(final Handlebars handlebars, final List<CharSequence> extras,\n      final URL[] classpath)", "full_signature": "private void i18nJs(final Handlebars handlebars, final List<CharSequence> extras,\n      final URL[] classpath)", "class_method_signature": "PrecompilePlugin.i18nJs(final Handlebars handlebars, final List<CharSequence> extras,\n      final URL[] classpath)", "testcase": false, "constructor": false}, {"identifier": "registerHelper", "parameters": "(final String name, final String body, final String... args)", "modifiers": "private", "return": "CharSequence", "signature": "CharSequence registerHelper(final String name, final String body, final String... args)", "full_signature": "private CharSequence registerHelper(final String name, final String body, final String... args)", "class_method_signature": "PrecompilePlugin.registerHelper(final String name, final String body, final String... args)", "testcase": false, "constructor": false}, {"identifier": "minimize", "parameters": "(final File output)", "modifiers": "private", "return": "void", "signature": "void minimize(final File output)", "full_signature": "private void minimize(final File output)", "class_method_signature": "PrecompilePlugin.minimize(final File output)", "testcase": false, "constructor": false}, {"identifier": "setRuntime", "parameters": "(final String runtime)", "modifiers": "public", "return": "void", "signature": "void setRuntime(final String runtime)", "full_signature": "public void setRuntime(final String runtime)", "class_method_signature": "PrecompilePlugin.setRuntime(final String runtime)", "testcase": false, "constructor": false}, {"identifier": "setMinimize", "parameters": "(final boolean minimize)", "modifiers": "public", "return": "void", "signature": "void setMinimize(final boolean minimize)", "full_signature": "public void setMinimize(final boolean minimize)", "class_method_signature": "PrecompilePlugin.setMinimize(final boolean minimize)", "testcase": false, "constructor": false}, {"identifier": "setOutput", "parameters": "(final String output)", "modifiers": "public", "return": "void", "signature": "void setOutput(final String output)", "full_signature": "public void setOutput(final String output)", "class_method_signature": "PrecompilePlugin.setOutput(final String output)", "testcase": false, "constructor": false}, {"identifier": "setAmd", "parameters": "(final boolean amd)", "modifiers": "public", "return": "void", "signature": "void setAmd(final boolean amd)", "full_signature": "public void setAmd(final boolean amd)", "class_method_signature": "PrecompilePlugin.setAmd(final boolean amd)", "testcase": false, "constructor": false}, {"identifier": "setPrefix", "parameters": "(final String prefix)", "modifiers": "public", "return": "void", "signature": "void setPrefix(final String prefix)", "full_signature": "public void setPrefix(final String prefix)", "class_method_signature": "PrecompilePlugin.setPrefix(final String prefix)", "testcase": false, "constructor": false}, {"identifier": "setSuffix", "parameters": "(final String suffix)", "modifiers": "public", "return": "void", "signature": "void setSuffix(final String suffix)", "full_signature": "public void setSuffix(final String suffix)", "class_method_signature": "PrecompilePlugin.setSuffix(final String suffix)", "testcase": false, "constructor": false}, {"identifier": "addTemplate", "parameters": "(final String template)", "modifiers": "public", "return": "void", "signature": "void addTemplate(final String template)", "full_signature": "public void addTemplate(final String template)", "class_method_signature": "PrecompilePlugin.addTemplate(final String template)", "testcase": false, "constructor": false}, {"identifier": "setHandlebarsJsFile", "parameters": "(final String handlebarsJsFile)", "modifiers": "public", "return": "void", "signature": "void setHandlebarsJsFile(final String handlebarsJsFile)", "full_signature": "public void setHandlebarsJsFile(final String handlebarsJsFile)", "class_method_signature": "PrecompilePlugin.setHandlebarsJsFile(final String handlebarsJsFile)", "testcase": false, "constructor": false}], "file": "handlebars-maven-plugin/src/main/java/com/github/jknack/handlebars/maven/PrecompilePlugin.java"}, "focal_method": {"identifier": "i18nJs", "parameters": "(final Handlebars handlebars, final List<CharSequence> extras,\n      final URL[] classpath)", "modifiers": "private", "return": "void", "body": "private void i18nJs(final Handlebars handlebars, final List<CharSequence> extras,\n      final URL[] classpath) {\n    handlebars.registerHelper(I18nHelper.i18nJs.name(), new Helper<String>() {\n      @Override\n      public Object apply(final String context, final Options options) throws IOException {\n        StringBuilder output = new StringBuilder();\n        output.append(\"// i18nJs output:\\n\");\n        output.append(\"// register an empty i18nJs helper:\\n\");\n        output.append(registerHelper(I18nHelper.i18nJs.name(),\n            \"I18n.locale = arguments[0] || \\\"\" + Locale.getDefault() + \"\\\";\\n\"\n            + \"return '';\", \"arguments\"));\n        output.append(\"// redirect i18n helper to i18n.js:\\n\");\n        output.append(registerHelper(I18nHelper.i18n.name(), \"var key = arguments[0],\\n\"\n            + \"  i18nOpts = {},\\n\"\n            + \"  len = arguments.length - 1,\"\n            + \"  options = arguments[len];\\n\"\n            + \"for(var i = 1; i < len; i++) {\\n\"\n            + \"  i18nOpts['arg' + (i - 1)] = arguments[i];\\n\"\n            + \"}\\n\"\n            + \"i18nOpts.locale = options.hash.locale;\\n\"\n            + \"return I18n.t(key, i18nOpts);\"));\n        extras.add(output);\n        return null;\n      }\n\n      @Override\n      public String toString() {\n        return I18nHelper.i18nJs.name() + \"-maven-plugin\";\n      }\n    });\n  }", "signature": "void i18nJs(final Handlebars handlebars, final List<CharSequence> extras,\n      final URL[] classpath)", "full_signature": "private void i18nJs(final Handlebars handlebars, final List<CharSequence> extras,\n      final URL[] classpath)", "class_method_signature": "PrecompilePlugin.i18nJs(final Handlebars handlebars, final List<CharSequence> extras,\n      final URL[] classpath)", "testcase": false, "constructor": false, "invocations": ["registerHelper", "name", "append", "append", "append", "registerHelper", "name", "getDefault", "append", "append", "registerHelper", "name", "add", "name"]}, "repository": {"repo_id": 4459604, "url": "https://github.com/jknack/handlebars.java", "stars": 1107, "created": "5/27/2012 3:22:22 AM +00:00", "updates": "2020-01-24T06:58:31+00:00", "fork": "False", "license": "licensed"}}