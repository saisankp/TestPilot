{"test_class": {"identifier": "StringUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String text = \"Test\";", "modifier": "private", "type": "String", "declarator": "text = \"Test\"", "var_name": "text"}, {"original_string": "private String def = \"Default\";", "modifier": "private", "type": "String", "declarator": "def = \"Default\"", "var_name": "def"}, {"original_string": "private String empty = \"\";", "modifier": "private", "type": "String", "declarator": "empty = \"\"", "var_name": "empty"}, {"original_string": "private String nullText = null;", "modifier": "private", "type": "String", "declarator": "nullText = null", "var_name": "nullText"}, {"original_string": "@Rule\n    public ExpectedException thrown= ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown= ExpectedException.none()", "var_name": "thrown"}], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/util/StringUtilsTest.java"}, "test_case": {"identifier": "testIsEmpty", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsEmpty(TestContext context) {\n        context.assertTrue(StringUtils.isEmpty(nullText));\n        context.assertTrue(StringUtils.isEmpty(\"\"));\n        context.assertFalse(StringUtils.isEmpty(\"  \"));\n        context.assertFalse(StringUtils.isEmpty(text));\n        context.assertFalse(StringUtils.isEmpty(\" \" + text + \" \"));\n    }", "signature": "void testIsEmpty(TestContext context)", "full_signature": "@Test public void testIsEmpty(TestContext context)", "class_method_signature": "StringUtilsTest.testIsEmpty(TestContext context)", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "assertTrue", "isEmpty", "assertFalse", "isEmpty", "assertFalse", "isEmpty", "assertFalse", "isEmpty"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "StringUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " StringUtils()", "full_signature": "private  StringUtils()", "class_method_signature": "StringUtils.StringUtils()", "testcase": false, "constructor": true}, {"identifier": "isEmpty", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(CharSequence cs)", "full_signature": "public static boolean isEmpty(CharSequence cs)", "class_method_signature": "StringUtils.isEmpty(CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(CharSequence cs)", "full_signature": "public static boolean isNotEmpty(CharSequence cs)", "class_method_signature": "StringUtils.isNotEmpty(CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "isNotEmptyTrimmed", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmptyTrimmed(String str)", "full_signature": "public static boolean isNotEmptyTrimmed(String str)", "class_method_signature": "StringUtils.isNotEmptyTrimmed(String str)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String trim(String str)", "full_signature": "public static String trim(String str)", "class_method_signature": "StringUtils.trim(String str)", "testcase": false, "constructor": false}, {"identifier": "getStringOrEmpty", "parameters": "(String inputString)", "modifiers": "public static", "return": "String", "signature": "String getStringOrEmpty(String inputString)", "full_signature": "public static String getStringOrEmpty(String inputString)", "class_method_signature": "StringUtils.getStringOrEmpty(String inputString)", "testcase": false, "constructor": false}, {"identifier": "getStringOrDefault", "parameters": "(String inputString, String def)", "modifiers": "public static", "return": "String", "signature": "String getStringOrDefault(String inputString, String def)", "full_signature": "public static String getStringOrDefault(String inputString, String def)", "class_method_signature": "StringUtils.getStringOrDefault(String inputString, String def)", "testcase": false, "constructor": false}, {"identifier": "replaceWildcardConfigs", "parameters": "(String contentWithWildcards, Map<String, Object> properties)", "modifiers": "public static", "return": "String", "signature": "String replaceWildcardConfigs(String contentWithWildcards, Map<String, Object> properties)", "full_signature": "public static String replaceWildcardConfigs(String contentWithWildcards, Map<String, Object> properties)", "class_method_signature": "StringUtils.replaceWildcardConfigs(String contentWithWildcards, Map<String, Object> properties)", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/util/StringUtils.java"}, "focal_method": {"identifier": "isEmpty", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }", "signature": "boolean isEmpty(CharSequence cs)", "full_signature": "public static boolean isEmpty(CharSequence cs)", "class_method_signature": "StringUtils.isEmpty(CharSequence cs)", "testcase": false, "constructor": false, "invocations": ["length"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}