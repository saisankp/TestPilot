{"test_class": {"identifier": "EnvironmentHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "IMessageProcessor messageProcessor;", "modifier": "", "type": "IMessageProcessor", "declarator": "messageProcessor", "var_name": "messageProcessor"}], "file": "CoreFeatures/HttpEndpoint/EnvironmentHandler/src/test/java/info/smart_tools/smartactors/http_endpoint/environment_handler/EnvironmentHandlerTest.java"}, "test_case": {"identifier": "whenEnvironmentHandlerReceiveEnvironment_ItShouldProcessMessageProcessor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenEnvironmentHandlerReceiveEnvironment_ItShouldProcessMessageProcessor()\n            throws Exception {\n        messageProcessor = mock(IMessageProcessor.class);\n        IKey keyIMessageProcessor = Keys.getOrAdd(\"info.smart_tools.smartactors.message_processing_interfaces.message_processing.IMessageProcessor\");\n        IOC.register(\n                keyIMessageProcessor,\n                new SingletonStrategy(messageProcessor)\n        );\n        IObject iObject = IOC.resolve(Keys.getOrAdd(\"IObjectByString\"), \"{}\");\n        IKey keyIObject = Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\");\n        IOC.register(\n                keyIObject,\n                new SingletonStrategy(iObject)\n        );\n        IObject environment = IOC.resolve(Keys.getOrAdd(\"IObjectByString\"), \"{\\\"message\\\": {\\\"hello\\\": \\\"world\\\"}, \\\"context\\\": {}}\");\n        Map<Class<? extends Throwable>, IObject> exceptionalChainsAndEnv = new HashMap<>();\n//        exceptionalChainsAndEnv.put(InvalidArgumentException.class, null);\n        IMessageReceiver messageReceivers[] = new IMessageReceiver[1];\n        IObject iObjects[] = new IObject[1];\n        messageReceivers[0] = null;\n        iObjects[0] = null;\n        IReceiverChain chain = new ImmutableReceiverChain(\"name\", mock(IObject.class), messageReceivers, iObjects, exceptionalChainsAndEnv);\n        IQueue<ITask> queue = new BlockingQueue(null);\n\n        IEnvironmentHandler handler = new EnvironmentHandler(queue, 1);\n        handler.handle(environment, chain, null);\n        try {\n            verify(messageProcessor, times(1)).process(\n                    (IObject) environment.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"message\")),\n                    (IObject) environment.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"context\")));\n        } catch (ReadValueException e) {\n            e.printStackTrace();\n        }\n\n        Assert.assertTrue(((boolean) ((IObject)environment.getValue(new FieldName(\"context\"))).getValue(new FieldName(\"fromExternal\"))));\n    }", "signature": "void whenEnvironmentHandlerReceiveEnvironment_ItShouldProcessMessageProcessor()", "full_signature": "@Test public void whenEnvironmentHandlerReceiveEnvironment_ItShouldProcessMessageProcessor()", "class_method_signature": "EnvironmentHandlerTest.whenEnvironmentHandlerReceiveEnvironment_ItShouldProcessMessageProcessor()", "testcase": true, "constructor": false, "invocations": ["mock", "getOrAdd", "register", "resolve", "getOrAdd", "getOrAdd", "register", "resolve", "getOrAdd", "mock", "handle", "process", "verify", "times", "getValue", "resolve", "getOrAdd", "getValue", "resolve", "getOrAdd", "printStackTrace", "assertTrue", "getValue", "getValue"]}, "focal_class": {"identifier": "EnvironmentHandler", "superclass": "", "interfaces": "implements IEnvironmentHandler", "fields": [{"original_string": "private final IQueue<ITask> taskQueue;", "modifier": "private final", "type": "IQueue<ITask>", "declarator": "taskQueue", "var_name": "taskQueue"}, {"original_string": "private final int stackDepth;", "modifier": "private final", "type": "int", "declarator": "stackDepth", "var_name": "stackDepth"}, {"original_string": "private final IFieldName messageFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "messageFieldName", "var_name": "messageFieldName"}, {"original_string": "private final IFieldName contextFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "contextFieldName", "var_name": "contextFieldName"}, {"original_string": "private final IFieldName fromExternalFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "fromExternalFieldName", "var_name": "fromExternalFieldName"}], "methods": [{"identifier": "EnvironmentHandler", "parameters": "(final IQueue<ITask> taskQueue, final int stackDepth)", "modifiers": "public", "return": "", "signature": " EnvironmentHandler(final IQueue<ITask> taskQueue, final int stackDepth)", "full_signature": "public  EnvironmentHandler(final IQueue<ITask> taskQueue, final int stackDepth)", "class_method_signature": "EnvironmentHandler.EnvironmentHandler(final IQueue<ITask> taskQueue, final int stackDepth)", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "(final IObject environment, final IReceiverChain receiverChain, final IAction<Throwable> callback)", "modifiers": "public", "return": "void", "signature": "void handle(final IObject environment, final IReceiverChain receiverChain, final IAction<Throwable> callback)", "full_signature": "public void handle(final IObject environment, final IReceiverChain receiverChain, final IAction<Throwable> callback)", "class_method_signature": "EnvironmentHandler.handle(final IObject environment, final IReceiverChain receiverChain, final IAction<Throwable> callback)", "testcase": false, "constructor": false}], "file": "CoreFeatures/HttpEndpoint/EnvironmentHandler/src/main/java/info/smart_tools/smartactors/http_endpoint/environment_handler/EnvironmentHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "(final IObject environment, final IReceiverChain receiverChain, final IAction<Throwable> callback)", "modifiers": "public", "return": "void", "body": "public void handle(final IObject environment, final IReceiverChain receiverChain, final IAction<Throwable> callback)\n            throws EnvironmentHandleException {\n        try {\n            IMessageProcessingSequence processingSequence =\n                    IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.message_processing_interfaces.message_processing.IMessageProcessingSequence\"), stackDepth, receiverChain);\n            IMessageProcessor messageProcessor =\n                    IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.message_processing_interfaces.message_processing.IMessageProcessor\"), taskQueue, processingSequence);\n\n            IObject message = (IObject) environment.getValue(this.messageFieldName);\n            IObject context = (IObject) environment.getValue(this.contextFieldName);\n            context.setValue(this.fromExternalFieldName, true);\n            messageProcessor.process(message, context);\n        } catch (ResolutionException | InvalidArgumentException | ReadValueException | ChangeValueException\n                | MessageProcessorProcessException e) {\n            throw new EnvironmentHandleException(e);\n        }\n    }", "signature": "void handle(final IObject environment, final IReceiverChain receiverChain, final IAction<Throwable> callback)", "full_signature": "public void handle(final IObject environment, final IReceiverChain receiverChain, final IAction<Throwable> callback)", "class_method_signature": "EnvironmentHandler.handle(final IObject environment, final IReceiverChain receiverChain, final IAction<Throwable> callback)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "resolve", "getOrAdd", "getValue", "getValue", "setValue", "process"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}