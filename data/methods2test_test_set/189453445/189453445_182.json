{"test_class": {"identifier": "Route53StepDefinitionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Route53StepDefinitions route53StepDefinitions;", "modifier": "@Autowired\n    private", "type": "Route53StepDefinitions", "declarator": "route53StepDefinitions", "var_name": "route53StepDefinitions"}, {"original_string": "@Autowired\n    private Route53RaiderImpl route53Raider;", "modifier": "@Autowired\n    private", "type": "Route53RaiderImpl", "declarator": "route53Raider", "var_name": "route53Raider"}, {"original_string": "@Autowired\n    private ExecutionStateCache executionStateCache;", "modifier": "@Autowired\n    private", "type": "ExecutionStateCache", "declarator": "executionStateCache", "var_name": "executionStateCache"}, {"original_string": "private static String PRIMARY=\"primary.com\";", "modifier": "private static", "type": "String", "declarator": "PRIMARY=\"primary.com\"", "var_name": "PRIMARY"}, {"original_string": "private static String SECONDARY=\"secondary.com\";", "modifier": "private static", "type": "String", "declarator": "SECONDARY=\"secondary.com\"", "var_name": "SECONDARY"}], "file": "cloudraider-core/src/test/java/com/intuit/cloudraider/cucumber/steps/Route53StepDefinitionsTest.java"}, "test_case": {"identifier": "testAssertFalseR53FailoverInvalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAssertFalseR53FailoverInvalid() throws Throwable\n    {\n        route53StepDefinitions.assertFalseR53Failover(PRIMARY, \"\");\n    }", "signature": "void testAssertFalseR53FailoverInvalid()", "full_signature": "@Test public void testAssertFalseR53FailoverInvalid()", "class_method_signature": "Route53StepDefinitionsTest.testAssertFalseR53FailoverInvalid()", "testcase": true, "constructor": false, "invocations": ["assertFalseR53Failover"]}, "focal_class": {"identifier": "Route53StepDefinitions", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ExecutionStateCache executionStateCache;", "modifier": "@Autowired\n    private", "type": "ExecutionStateCache", "declarator": "executionStateCache", "var_name": "executionStateCache"}, {"original_string": "@Autowired\n    @Qualifier(\"r53RaiderBean\")\n    private Route53Raider route53Raider;", "modifier": "@Autowired\n    @Qualifier(\"r53RaiderBean\")\n    private", "type": "Route53Raider", "declarator": "route53Raider", "var_name": "route53Raider"}, {"original_string": "Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "private String r53HealthCheckId;", "modifier": "private", "type": "String", "declarator": "r53HealthCheckId", "var_name": "r53HealthCheckId"}, {"original_string": "private String r53PolicyName;", "modifier": "private", "type": "String", "declarator": "r53PolicyName", "var_name": "r53PolicyName"}], "methods": [{"identifier": "getExecutionStateCache", "parameters": "()", "modifiers": "public", "return": "ExecutionStateCache", "signature": "ExecutionStateCache getExecutionStateCache()", "full_signature": "public ExecutionStateCache getExecutionStateCache()", "class_method_signature": "Route53StepDefinitions.getExecutionStateCache()", "testcase": false, "constructor": false}, {"identifier": "setExecutionStateCache", "parameters": "(ExecutionStateCache executionStateCache)", "modifiers": "public", "return": "void", "signature": "void setExecutionStateCache(ExecutionStateCache executionStateCache)", "full_signature": "public void setExecutionStateCache(ExecutionStateCache executionStateCache)", "class_method_signature": "Route53StepDefinitions.setExecutionStateCache(ExecutionStateCache executionStateCache)", "testcase": false, "constructor": false}, {"identifier": "Route53StepDefinitions", "parameters": "()", "modifiers": "public", "return": "", "signature": " Route53StepDefinitions()", "full_signature": "public  Route53StepDefinitions()", "class_method_signature": "Route53StepDefinitions.Route53StepDefinitions()", "testcase": false, "constructor": true}, {"identifier": "assertTrueR53Failover", "parameters": "(String primary, String secondary)", "modifiers": "@Then(\"^assertTrue R53 failover from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\") public", "return": "void", "signature": "void assertTrueR53Failover(String primary, String secondary)", "full_signature": "@Then(\"^assertTrue R53 failover from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\") public void assertTrueR53Failover(String primary, String secondary)", "class_method_signature": "Route53StepDefinitions.assertTrueR53Failover(String primary, String secondary)", "testcase": false, "constructor": false}, {"identifier": "assertFalseR53Failover", "parameters": "(String primary, String secondary)", "modifiers": "@Then(\"^assertFalse R53 failover from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\") public", "return": "void", "signature": "void assertFalseR53Failover(String primary, String secondary)", "full_signature": "@Then(\"^assertFalse R53 failover from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\") public void assertFalseR53Failover(String primary, String secondary)", "class_method_signature": "Route53StepDefinitions.assertFalseR53Failover(String primary, String secondary)", "testcase": false, "constructor": false}, {"identifier": "givenR53HealthCheckID", "parameters": "(String r53HealthCheckId)", "modifiers": "@Given(\"^R53 Healthcheck ID \\\"([^\\\"]*)\\\"$\") public", "return": "Route53StepDefinitions", "signature": "Route53StepDefinitions givenR53HealthCheckID(String r53HealthCheckId)", "full_signature": "@Given(\"^R53 Healthcheck ID \\\"([^\\\"]*)\\\"$\") public Route53StepDefinitions givenR53HealthCheckID(String r53HealthCheckId)", "class_method_signature": "Route53StepDefinitions.givenR53HealthCheckID(String r53HealthCheckId)", "testcase": false, "constructor": false}, {"identifier": "assertCloudWatchAlarmState", "parameters": "(String expectedState)", "modifiers": "@Then(\"^assertR53 HealthCheck state = \\\"([^\\\"]*)\\\"$\") public", "return": "void", "signature": "void assertCloudWatchAlarmState(String expectedState)", "full_signature": "@Then(\"^assertR53 HealthCheck state = \\\"([^\\\"]*)\\\"$\") public void assertCloudWatchAlarmState(String expectedState)", "class_method_signature": "Route53StepDefinitions.assertCloudWatchAlarmState(String expectedState)", "testcase": false, "constructor": false}, {"identifier": "assertCloudWatchAlarmState", "parameters": "(String route53HealthCheckId, String expectedState)", "modifiers": "@Then(\"^assertR53 HealthCheckId \\\"([^\\\"]*)\\\" with state = \\\"([^\\\"]*)\\\"$\") public", "return": "void", "signature": "void assertCloudWatchAlarmState(String route53HealthCheckId, String expectedState)", "full_signature": "@Then(\"^assertR53 HealthCheckId \\\"([^\\\"]*)\\\" with state = \\\"([^\\\"]*)\\\"$\") public void assertCloudWatchAlarmState(String route53HealthCheckId, String expectedState)", "class_method_signature": "Route53StepDefinitions.assertCloudWatchAlarmState(String route53HealthCheckId, String expectedState)", "testcase": false, "constructor": false}, {"identifier": "giveR53TrafficPolicyName", "parameters": "(String r53PolicyName)", "modifiers": "@Given(\"^R53 traffic policy name \\\"([^\\\"]*)\\\"$\") public", "return": "Route53StepDefinitions", "signature": "Route53StepDefinitions giveR53TrafficPolicyName(String r53PolicyName)", "full_signature": "@Given(\"^R53 traffic policy name \\\"([^\\\"]*)\\\"$\") public Route53StepDefinitions giveR53TrafficPolicyName(String r53PolicyName)", "class_method_signature": "Route53StepDefinitions.giveR53TrafficPolicyName(String r53PolicyName)", "testcase": false, "constructor": false}, {"identifier": "updateR53PolicyVersion", "parameters": "(int version)", "modifiers": "@When(\"^R53 update traffic policy version to (\\\\d+)$\") public", "return": "void", "signature": "void updateR53PolicyVersion(int version)", "full_signature": "@When(\"^R53 update traffic policy version to (\\\\d+)$\") public void updateR53PolicyVersion(int version)", "class_method_signature": "Route53StepDefinitions.updateR53PolicyVersion(int version)", "testcase": false, "constructor": false}, {"identifier": "assertR53VersionId", "parameters": "(int expectedVersion)", "modifiers": "@Then(\"^assertR53 traffic policy versionId = (\\\\d+)$\") public", "return": "void", "signature": "void assertR53VersionId(int expectedVersion)", "full_signature": "@Then(\"^assertR53 traffic policy versionId = (\\\\d+)$\") public void assertR53VersionId(int expectedVersion)", "class_method_signature": "Route53StepDefinitions.assertR53VersionId(int expectedVersion)", "testcase": false, "constructor": false}, {"identifier": "updatR53HealthCheckRegions", "parameters": "(String regions)", "modifiers": "@When(\"^R53 update HealthCheck regions to \\\"([^\\\"]*)\\\"$\") public", "return": "void", "signature": "void updatR53HealthCheckRegions(String regions)", "full_signature": "@When(\"^R53 update HealthCheck regions to \\\"([^\\\"]*)\\\"$\") public void updatR53HealthCheckRegions(String regions)", "class_method_signature": "Route53StepDefinitions.updatR53HealthCheckRegions(String regions)", "testcase": false, "constructor": false}, {"identifier": "assertR53HealthCheckRegions", "parameters": "(String regions)", "modifiers": "@Then(\"^assertR53 HealthCheck regions = \\\"([^\\\"]*)\\\"$\") public", "return": "void", "signature": "void assertR53HealthCheckRegions(String regions)", "full_signature": "@Then(\"^assertR53 HealthCheck regions = \\\"([^\\\"]*)\\\"$\") public void assertR53HealthCheckRegions(String regions)", "class_method_signature": "Route53StepDefinitions.assertR53HealthCheckRegions(String regions)", "testcase": false, "constructor": false}, {"identifier": "resetR53HealthCheckRegions", "parameters": "()", "modifiers": "@When(\"^R53 reset HealthCheck to default regions$\") public", "return": "void", "signature": "void resetR53HealthCheckRegions()", "full_signature": "@When(\"^R53 reset HealthCheck to default regions$\") public void resetR53HealthCheckRegions()", "class_method_signature": "Route53StepDefinitions.resetR53HealthCheckRegions()", "testcase": false, "constructor": false}, {"identifier": "isRegex", "parameters": "(final String str)", "modifiers": "private", "return": "boolean", "signature": "boolean isRegex(final String str)", "full_signature": "private boolean isRegex(final String str)", "class_method_signature": "Route53StepDefinitions.isRegex(final String str)", "testcase": false, "constructor": false}], "file": "cloudraider-core/src/main/java/com/intuit/cloudraider/cucumber/steps/Route53StepDefinitions.java"}, "focal_method": {"identifier": "assertFalseR53Failover", "parameters": "(String primary, String secondary)", "modifiers": "@Then(\"^assertFalse R53 failover from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\") public", "return": "void", "body": "@Then(\"^assertFalse R53 failover from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n    public void assertFalseR53Failover(String primary, String secondary) throws Throwable {\n        if (!isRegex(secondary)) {\n            Assert.assertFalse(\"DNS Failover Check failed\", DNSLookup.hostNameLookup(primary).equalsIgnoreCase(secondary));\n        } else {\n            Assert.assertFalse(\"DNS Failover Check failed\", DNSLookup.hostNameLookup(primary).matches(secondary));\n        }\n    }", "signature": "void assertFalseR53Failover(String primary, String secondary)", "full_signature": "@Then(\"^assertFalse R53 failover from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\") public void assertFalseR53Failover(String primary, String secondary)", "class_method_signature": "Route53StepDefinitions.assertFalseR53Failover(String primary, String secondary)", "testcase": false, "constructor": false, "invocations": ["isRegex", "assertFalse", "equalsIgnoreCase", "hostNameLookup", "assertFalse", "matches", "hostNameLookup"]}, "repository": {"repo_id": 189453445, "url": "https://github.com/intuit/CloudRaider", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 16, "size": 730, "license": "licensed"}}