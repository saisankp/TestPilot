{"test_class": {"identifier": "HashTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final String encodedHash = Base58Utils.encode(randomUUID().toString().getBytes());", "modifier": "protected final", "type": "String", "declarator": "encodedHash = Base58Utils.encode(randomUUID().toString().getBytes())", "var_name": "encodedHash"}], "file": "core/common/src/test/java/hera/api/model/HashTest.java"}, "test_case": {"identifier": "testAdapt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAdapt() {\n    final Hash hash = Hash.of(encodedHash);\n    assertEquals(Hash.of(encodedHash), hash.adapt(Hash.class));\n    assertEquals(BlockHash.of(encodedHash), hash.adapt(BlockHash.class));\n    assertEquals(TxHash.of(encodedHash), hash.adapt(TxHash.class));\n    assertEquals(ContractTxHash.of(encodedHash), hash.adapt(ContractTxHash.class));\n  }", "signature": "void testAdapt()", "full_signature": "@Test public void testAdapt()", "class_method_signature": "HashTest.testAdapt()", "testcase": true, "constructor": false, "invocations": ["of", "assertEquals", "of", "adapt", "assertEquals", "of", "adapt", "assertEquals", "of", "adapt", "assertEquals", "of", "adapt"]}, "focal_class": {"identifier": "Hash", "superclass": "", "interfaces": "implements Adaptor, Encodable", "fields": [{"original_string": "public static final Hash EMPTY = Hash.of(BytesValue.EMPTY);", "modifier": "public static final", "type": "Hash", "declarator": "EMPTY = Hash.of(BytesValue.EMPTY)", "var_name": "EMPTY"}, {"original_string": "@Getter\n  protected final BytesValue bytesValue;", "modifier": "@Getter\n  protected final", "type": "BytesValue", "declarator": "bytesValue", "var_name": "bytesValue"}], "methods": [{"identifier": "of", "parameters": "(final String encoded)", "modifiers": "public static", "return": "Hash", "signature": "Hash of(final String encoded)", "full_signature": "public static Hash of(final String encoded)", "class_method_signature": "Hash.of(final String encoded)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final BytesValue bytesValue)", "modifiers": "public static", "return": "Hash", "signature": "Hash of(final BytesValue bytesValue)", "full_signature": "public static Hash of(final BytesValue bytesValue)", "class_method_signature": "Hash.of(final BytesValue bytesValue)", "testcase": false, "constructor": false}, {"identifier": "Hash", "parameters": "(final String encoded)", "modifiers": "public", "return": "", "signature": " Hash(final String encoded)", "full_signature": "public  Hash(final String encoded)", "class_method_signature": "Hash.Hash(final String encoded)", "testcase": false, "constructor": true}, {"identifier": "Hash", "parameters": "(final BytesValue bytesValue)", "modifiers": "public", "return": "", "signature": " Hash(final BytesValue bytesValue)", "full_signature": "public  Hash(final BytesValue bytesValue)", "class_method_signature": "Hash.Hash(final BytesValue bytesValue)", "testcase": false, "constructor": true}, {"identifier": "getEncoded", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getEncoded()", "full_signature": "@Override public String getEncoded()", "class_method_signature": "Hash.getEncoded()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Hash.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Hash.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Hash.toString()", "testcase": false, "constructor": false}, {"identifier": "adapt", "parameters": "(Class<T> adaptor)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T adapt(Class<T> adaptor)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T adapt(Class<T> adaptor)", "class_method_signature": "Hash.adapt(Class<T> adaptor)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/hera/api/model/Hash.java"}, "focal_method": {"identifier": "adapt", "parameters": "(Class<T> adaptor)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n  @Override\n  public <T> T adapt(Class<T> adaptor) {\n    if (adaptor.isAssignableFrom(Hash.class)) {\n      return (T) this;\n    } else if (adaptor.isAssignableFrom(BlockHash.class)) {\n      return (T) BlockHash.of(getBytesValue());\n    } else if (adaptor.isAssignableFrom(TxHash.class)) {\n      return (T) TxHash.of(getBytesValue());\n    } else if (adaptor.isAssignableFrom(ContractTxHash.class)) {\n      return (T) ContractTxHash.of(getBytesValue());\n    }\n    return null;\n  }", "signature": "T adapt(Class<T> adaptor)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T adapt(Class<T> adaptor)", "class_method_signature": "Hash.adapt(Class<T> adaptor)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "isAssignableFrom", "of", "getBytesValue", "isAssignableFrom", "of", "getBytesValue", "isAssignableFrom", "of", "getBytesValue"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}