{"test_class": {"identifier": "ReflectionExtTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> SERVICE_METHOD_NAMES = Stream.of(MyService.class.getMethods())\n            .map(Method::getName)\n            .collect(Collectors.toSet());", "modifier": "private static final", "type": "Set<String>", "declarator": "SERVICE_METHOD_NAMES = Stream.of(MyService.class.getMethods())\n            .map(Method::getName)\n            .collect(Collectors.toSet())", "var_name": "SERVICE_METHOD_NAMES"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/ReflectionExtTest.java"}, "test_case": {"identifier": "testFindAnnotatedMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindAnnotatedMethods() {\n        List<Method> annotatedMethods = ReflectionExt.findAnnotatedMethods(new MyServiceImpl(), PostConstruct.class);\n        assertThat(annotatedMethods).hasSize(1);\n        assertThat(annotatedMethods.get(0).getName()).isEqualTo(\"classAnnotated\");\n    }", "signature": "void testFindAnnotatedMethods()", "full_signature": "@Test public void testFindAnnotatedMethods()", "class_method_signature": "ReflectionExtTest.testFindAnnotatedMethods()", "testcase": true, "constructor": false, "invocations": ["findAnnotatedMethods", "hasSize", "assertThat", "isEqualTo", "assertThat", "getName", "get"]}, "focal_class": {"identifier": "ReflectionExt", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<Class<?>> WRAPPERS = CollectionsExt.asSet(\n            Byte.class, Short.class, Integer.class, Long.class, Float.class, Double.class,\n            Boolean.class\n    );", "modifier": "private static final", "type": "Set<Class<?>>", "declarator": "WRAPPERS = CollectionsExt.asSet(\n            Byte.class, Short.class, Integer.class, Long.class, Float.class, Double.class,\n            Boolean.class\n    )", "var_name": "WRAPPERS"}, {"original_string": "private static final Set<Class<?>> STD_DATA_TYPES = CollectionsExt.asSet(\n            String.class\n    );", "modifier": "private static final", "type": "Set<Class<?>>", "declarator": "STD_DATA_TYPES = CollectionsExt.asSet(\n            String.class\n    )", "var_name": "STD_DATA_TYPES"}, {"original_string": "private static final ConcurrentMap<Class<?>, List<Field>> CLASS_FIELDS = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentMap<Class<?>, List<Field>>", "declarator": "CLASS_FIELDS = new ConcurrentHashMap<>()", "var_name": "CLASS_FIELDS"}, {"original_string": "private static final ConcurrentMap<Method, Optional<Method>> FIND_INTERFACE_METHOD_CACHE = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentMap<Method, Optional<Method>>", "declarator": "FIND_INTERFACE_METHOD_CACHE = new ConcurrentHashMap<>()", "var_name": "FIND_INTERFACE_METHOD_CACHE"}, {"original_string": "private static final List<Pair<String, Class<?>[]>> OBJECT_METHODS = Stream.of(Object.class.getMethods())\n            .map(m -> Pair.of(m.getName(), m.getParameterTypes()))\n            .collect(Collectors.toList());", "modifier": "private static final", "type": "List<Pair<String, Class<?>[]>>", "declarator": "OBJECT_METHODS = Stream.of(Object.class.getMethods())\n            .map(m -> Pair.of(m.getName(), m.getParameterTypes()))\n            .collect(Collectors.toList())", "var_name": "OBJECT_METHODS"}, {"original_string": "private static final Constructor<MethodHandles.Lookup> lookupConstructor;", "modifier": "private static final", "type": "Constructor<MethodHandles.Lookup>", "declarator": "lookupConstructor", "var_name": "lookupConstructor"}, {"original_string": "private static final ConcurrentMap<Pair<Class, Method>, MethodHandle> DEFAULT_METHOD_HANDLES = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentMap<Pair<Class, Method>, MethodHandle>", "declarator": "DEFAULT_METHOD_HANDLES = new ConcurrentHashMap<>()", "var_name": "DEFAULT_METHOD_HANDLES"}], "methods": [{"identifier": "ReflectionExt", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReflectionExt()", "full_signature": "private  ReflectionExt()", "class_method_signature": "ReflectionExt.ReflectionExt()", "testcase": false, "constructor": true}, {"identifier": "isPrimitiveOrWrapper", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitiveOrWrapper(Class<?> type)", "full_signature": "public static boolean isPrimitiveOrWrapper(Class<?> type)", "class_method_signature": "ReflectionExt.isPrimitiveOrWrapper(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isStandardDataType", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isStandardDataType(Class<?> type)", "full_signature": "public static boolean isStandardDataType(Class<?> type)", "class_method_signature": "ReflectionExt.isStandardDataType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isContainerType", "parameters": "(Field field)", "modifiers": "public static", "return": "boolean", "signature": "boolean isContainerType(Field field)", "full_signature": "public static boolean isContainerType(Field field)", "class_method_signature": "ReflectionExt.isContainerType(Field field)", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumeric(Class<?> type)", "full_signature": "public static boolean isNumeric(Class<?> type)", "class_method_signature": "ReflectionExt.isNumeric(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isObjectMethod", "parameters": "(Method method)", "modifiers": "public static", "return": "boolean", "signature": "boolean isObjectMethod(Method method)", "full_signature": "public static boolean isObjectMethod(Method method)", "class_method_signature": "ReflectionExt.isObjectMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "findAllInterfaces", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "List<Class<?>>", "signature": "List<Class<?>> findAllInterfaces(Class<?> type)", "full_signature": "public static List<Class<?>> findAllInterfaces(Class<?> type)", "class_method_signature": "ReflectionExt.findAllInterfaces(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "findAnnotatedMethods", "parameters": "(T instance, Class<A> methodAnnotation)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> findAnnotatedMethods(T instance, Class<A> methodAnnotation)", "full_signature": "public static List<Method> findAnnotatedMethods(T instance, Class<A> methodAnnotation)", "class_method_signature": "ReflectionExt.findAnnotatedMethods(T instance, Class<A> methodAnnotation)", "testcase": false, "constructor": false}, {"identifier": "findCallerStackTrace", "parameters": "()", "modifiers": "public static", "return": "Optional<StackTraceElement>", "signature": "Optional<StackTraceElement> findCallerStackTrace()", "full_signature": "public static Optional<StackTraceElement> findCallerStackTrace()", "class_method_signature": "ReflectionExt.findCallerStackTrace()", "testcase": false, "constructor": false}, {"identifier": "bypassBytecodeGeneratedWrappers", "parameters": "(T instance)", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> bypassBytecodeGeneratedWrappers(T instance)", "full_signature": "private static Class<?> bypassBytecodeGeneratedWrappers(T instance)", "class_method_signature": "ReflectionExt.bypassBytecodeGeneratedWrappers(T instance)", "testcase": false, "constructor": false}, {"identifier": "findInterfaceMethod", "parameters": "(Method method)", "modifiers": "public static", "return": "Optional<Method>", "signature": "Optional<Method> findInterfaceMethod(Method method)", "full_signature": "public static Optional<Method> findInterfaceMethod(Method method)", "class_method_signature": "ReflectionExt.findInterfaceMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(Class<?> type, String name)", "modifiers": "public static", "return": "Field", "signature": "Field getField(Class<?> type, String name)", "full_signature": "public static Field getField(Class<?> type, String name)", "class_method_signature": "ReflectionExt.getField(Class<?> type, String name)", "testcase": false, "constructor": false}, {"identifier": "getFieldValue", "parameters": "(Field field, Object object)", "modifiers": "public static", "return": "T", "signature": "T getFieldValue(Field field, Object object)", "full_signature": "public static T getFieldValue(Field field, Object object)", "class_method_signature": "ReflectionExt.getFieldValue(Field field, Object object)", "testcase": false, "constructor": false}, {"identifier": "getAllFields", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "List<Field>", "signature": "List<Field> getAllFields(Class<?> type)", "full_signature": "public static List<Field> getAllFields(Class<?> type)", "class_method_signature": "ReflectionExt.getAllFields(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "findDefaultMethodHandle", "parameters": "(Class<?> apiInterface, Method method)", "modifiers": "private static", "return": "MethodHandle", "signature": "MethodHandle findDefaultMethodHandle(Class<?> apiInterface, Method method)", "full_signature": "private static MethodHandle findDefaultMethodHandle(Class<?> apiInterface, Method method)", "class_method_signature": "ReflectionExt.findDefaultMethodHandle(Class<?> apiInterface, Method method)", "testcase": false, "constructor": false}, {"identifier": "buildDefaultMethodHandle", "parameters": "(Class<?> apiInterface, Method method)", "modifiers": "private static", "return": "MethodHandle", "signature": "MethodHandle buildDefaultMethodHandle(Class<?> apiInterface, Method method)", "full_signature": "private static MethodHandle buildDefaultMethodHandle(Class<?> apiInterface, Method method)", "class_method_signature": "ReflectionExt.buildDefaultMethodHandle(Class<?> apiInterface, Method method)", "testcase": false, "constructor": false}, {"identifier": "invokeDefault", "parameters": "(Object proxy, Class<?> apiInterface, Method method, Object[] args)", "modifiers": "public static", "return": "Object", "signature": "Object invokeDefault(Object proxy, Class<?> apiInterface, Method method, Object[] args)", "full_signature": "public static Object invokeDefault(Object proxy, Class<?> apiInterface, Method method, Object[] args)", "class_method_signature": "ReflectionExt.invokeDefault(Object proxy, Class<?> apiInterface, Method method, Object[] args)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/ReflectionExt.java"}, "focal_method": {"identifier": "findAnnotatedMethods", "parameters": "(T instance, Class<A> methodAnnotation)", "modifiers": "public static", "return": "List<Method>", "body": "public static <T, A extends Annotation> List<Method> findAnnotatedMethods(T instance, Class<A> methodAnnotation) {\n        Class<?> instanceType = bypassBytecodeGeneratedWrappers(instance);\n\n        List<Method> result = new ArrayList<>();\n        for (Method m : instanceType.getMethods()) {\n            for (Annotation a : m.getAnnotations()) {\n                if (a.annotationType() == methodAnnotation) {\n                    result.add(m);\n                }\n            }\n        }\n        return result;\n    }", "signature": "List<Method> findAnnotatedMethods(T instance, Class<A> methodAnnotation)", "full_signature": "public static List<Method> findAnnotatedMethods(T instance, Class<A> methodAnnotation)", "class_method_signature": "ReflectionExt.findAnnotatedMethods(T instance, Class<A> methodAnnotation)", "testcase": false, "constructor": false, "invocations": ["bypassBytecodeGeneratedWrappers", "getMethods", "getAnnotations", "annotationType", "add"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}