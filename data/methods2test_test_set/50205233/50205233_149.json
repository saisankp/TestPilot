{"test_class": {"identifier": "TokenStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int WORD = TokenStream.BasicTokenizer.WORD;", "modifier": "public static final", "type": "int", "declarator": "WORD = TokenStream.BasicTokenizer.WORD", "var_name": "WORD"}, {"original_string": "public static final int SYMBOL = TokenStream.BasicTokenizer.SYMBOL;", "modifier": "public static final", "type": "int", "declarator": "SYMBOL = TokenStream.BasicTokenizer.SYMBOL", "var_name": "SYMBOL"}, {"original_string": "public static final int DECIMAL = TokenStream.BasicTokenizer.DECIMAL;", "modifier": "public static final", "type": "int", "declarator": "DECIMAL = TokenStream.BasicTokenizer.DECIMAL", "var_name": "DECIMAL"}, {"original_string": "public static final int SINGLE_QUOTED_STRING = TokenStream.BasicTokenizer.SINGLE_QUOTED_STRING;", "modifier": "public static final", "type": "int", "declarator": "SINGLE_QUOTED_STRING = TokenStream.BasicTokenizer.SINGLE_QUOTED_STRING", "var_name": "SINGLE_QUOTED_STRING"}, {"original_string": "public static final int DOUBLE_QUOTED_STRING = TokenStream.BasicTokenizer.DOUBLE_QUOTED_STRING;", "modifier": "public static final", "type": "int", "declarator": "DOUBLE_QUOTED_STRING = TokenStream.BasicTokenizer.DOUBLE_QUOTED_STRING", "var_name": "DOUBLE_QUOTED_STRING"}, {"original_string": "public static final int COMMENT = TokenStream.BasicTokenizer.COMMENT;", "modifier": "public static final", "type": "int", "declarator": "COMMENT = TokenStream.BasicTokenizer.COMMENT", "var_name": "COMMENT"}, {"original_string": "private Tokenizer tokenizer;", "modifier": "private", "type": "Tokenizer", "declarator": "tokenizer", "var_name": "tokenizer"}, {"original_string": "private String content;", "modifier": "private", "type": "String", "declarator": "content", "var_name": "content"}, {"original_string": "private TokenStream tokens;", "modifier": "private", "type": "TokenStream", "declarator": "tokens", "var_name": "tokens"}], "file": "debezium-core/src/test/java/io/debezium/text/TokenStreamTest.java"}, "test_case": {"identifier": "shouldConsumeCaseInsensitiveStringInOriginalCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldConsumeCaseInsensitiveStringInOriginalCase() {\n        makeCaseInsensitive();\n        String firstToken = tokens.consume();\n\n        assertThat(firstToken).isEqualTo(\"Select\");\n    }", "signature": "void shouldConsumeCaseInsensitiveStringInOriginalCase()", "full_signature": "@Test public void shouldConsumeCaseInsensitiveStringInOriginalCase()", "class_method_signature": "TokenStreamTest.shouldConsumeCaseInsensitiveStringInOriginalCase()", "testcase": true, "constructor": false, "invocations": ["makeCaseInsensitive", "consume", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "TokenStream", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String ANY_VALUE = \"any value\";", "modifier": "public static final", "type": "String", "declarator": "ANY_VALUE = \"any value\"", "var_name": "ANY_VALUE"}, {"original_string": "public static final int ANY_TYPE = Integer.MIN_VALUE;", "modifier": "public static final", "type": "int", "declarator": "ANY_TYPE = Integer.MIN_VALUE", "var_name": "ANY_TYPE"}, {"original_string": "protected final String inputString;", "modifier": "protected final", "type": "String", "declarator": "inputString", "var_name": "inputString"}, {"original_string": "private final char[] inputContent;", "modifier": "private final", "type": "char[]", "declarator": "inputContent", "var_name": "inputContent"}, {"original_string": "private final boolean caseSensitive;", "modifier": "private final", "type": "boolean", "declarator": "caseSensitive", "var_name": "caseSensitive"}, {"original_string": "private final Tokenizer tokenizer;", "modifier": "private final", "type": "Tokenizer", "declarator": "tokenizer", "var_name": "tokenizer"}, {"original_string": "private List<Token> tokens;", "modifier": "private", "type": "List<Token>", "declarator": "tokens", "var_name": "tokens"}, {"original_string": "private ListIterator<Token> tokenIterator;", "modifier": "private", "type": "ListIterator<Token>", "declarator": "tokenIterator", "var_name": "tokenIterator"}, {"original_string": "private Token currentToken;", "modifier": "private", "type": "Token", "declarator": "currentToken", "var_name": "currentToken"}, {"original_string": "private boolean completed;", "modifier": "private", "type": "boolean", "declarator": "completed", "var_name": "completed"}], "methods": [{"identifier": "TokenStream", "parameters": "(String content,\n                       Tokenizer tokenizer,\n                       boolean caseSensitive)", "modifiers": "public", "return": "", "signature": " TokenStream(String content,\n                       Tokenizer tokenizer,\n                       boolean caseSensitive)", "full_signature": "public  TokenStream(String content,\n                       Tokenizer tokenizer,\n                       boolean caseSensitive)", "class_method_signature": "TokenStream.TokenStream(String content,\n                       Tokenizer tokenizer,\n                       boolean caseSensitive)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream start()", "full_signature": "public TokenStream start()", "class_method_signature": "TokenStream.start()", "testcase": false, "constructor": false}, {"identifier": "initializeTokens", "parameters": "(List<Token> tokens)", "modifiers": "protected", "return": "List<Token>", "signature": "List<Token> initializeTokens(List<Token> tokens)", "full_signature": "protected List<Token> initializeTokens(List<Token> tokens)", "class_method_signature": "TokenStream.initializeTokens(List<Token> tokens)", "testcase": false, "constructor": false}, {"identifier": "rewind", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void rewind()", "full_signature": "public void rewind()", "class_method_signature": "TokenStream.rewind()", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "()", "modifiers": "public", "return": "Marker", "signature": "Marker mark()", "full_signature": "public Marker mark()", "class_method_signature": "TokenStream.mark()", "testcase": false, "constructor": false}, {"identifier": "rewind", "parameters": "(Marker marker)", "modifiers": "public", "return": "boolean", "signature": "boolean rewind(Marker marker)", "full_signature": "public boolean rewind(Marker marker)", "class_method_signature": "TokenStream.rewind(Marker marker)", "testcase": false, "constructor": false}, {"identifier": "advance", "parameters": "(Marker marker)", "modifiers": "public", "return": "boolean", "signature": "boolean advance(Marker marker)", "full_signature": "public boolean advance(Marker marker)", "class_method_signature": "TokenStream.advance(Marker marker)", "testcase": false, "constructor": false}, {"identifier": "previousPosition", "parameters": "()", "modifiers": "public", "return": "Position", "signature": "Position previousPosition()", "full_signature": "public Position previousPosition()", "class_method_signature": "TokenStream.previousPosition()", "testcase": false, "constructor": false}, {"identifier": "previousPosition", "parameters": "(int count)", "modifiers": "public", "return": "Position", "signature": "Position previousPosition(int count)", "full_signature": "public Position previousPosition(int count)", "class_method_signature": "TokenStream.previousPosition(int count)", "testcase": false, "constructor": false}, {"identifier": "nextPosition", "parameters": "()", "modifiers": "public", "return": "Position", "signature": "Position nextPosition()", "full_signature": "public Position nextPosition()", "class_method_signature": "TokenStream.nextPosition()", "testcase": false, "constructor": false}, {"identifier": "consumeInteger", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int consumeInteger()", "full_signature": "public int consumeInteger()", "class_method_signature": "TokenStream.consumeInteger()", "testcase": false, "constructor": false}, {"identifier": "consumeLong", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long consumeLong()", "full_signature": "public long consumeLong()", "class_method_signature": "TokenStream.consumeLong()", "testcase": false, "constructor": false}, {"identifier": "consumeBoolean", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean consumeBoolean()", "full_signature": "public boolean consumeBoolean()", "class_method_signature": "TokenStream.consumeBoolean()", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String consume()", "full_signature": "public String consume()", "class_method_signature": "TokenStream.consume()", "testcase": false, "constructor": false}, {"identifier": "throwNoMoreContent", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void throwNoMoreContent()", "full_signature": "protected void throwNoMoreContent()", "class_method_signature": "TokenStream.throwNoMoreContent()", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String peek()", "full_signature": "public String peek()", "class_method_signature": "TokenStream.peek()", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "(String expected)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consume(String expected)", "full_signature": "public TokenStream consume(String expected)", "class_method_signature": "TokenStream.consume(String expected)", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "(char expected)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consume(char expected)", "full_signature": "public TokenStream consume(char expected)", "class_method_signature": "TokenStream.consume(char expected)", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "(int expectedType)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consume(int expectedType)", "full_signature": "public TokenStream consume(int expectedType)", "class_method_signature": "TokenStream.consume(int expectedType)", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "(String expected,\n                               String... expectedForNextTokens)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consume(String expected,\n                               String... expectedForNextTokens)", "full_signature": "public TokenStream consume(String expected,\n                               String... expectedForNextTokens)", "class_method_signature": "TokenStream.consume(String expected,\n                               String... expectedForNextTokens)", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "(String[] nextTokens)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consume(String[] nextTokens)", "full_signature": "public TokenStream consume(String[] nextTokens)", "class_method_signature": "TokenStream.consume(String[] nextTokens)", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "(Iterable<String> nextTokens)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consume(Iterable<String> nextTokens)", "full_signature": "public TokenStream consume(Iterable<String> nextTokens)", "class_method_signature": "TokenStream.consume(Iterable<String> nextTokens)", "testcase": false, "constructor": false}, {"identifier": "consumeAnyOf", "parameters": "(int... typeOptions)", "modifiers": "public", "return": "String", "signature": "String consumeAnyOf(int... typeOptions)", "full_signature": "public String consumeAnyOf(int... typeOptions)", "class_method_signature": "TokenStream.consumeAnyOf(int... typeOptions)", "testcase": false, "constructor": false}, {"identifier": "consumeAnyOf", "parameters": "(String... options)", "modifiers": "public", "return": "String", "signature": "String consumeAnyOf(String... options)", "full_signature": "public String consumeAnyOf(String... options)", "class_method_signature": "TokenStream.consumeAnyOf(String... options)", "testcase": false, "constructor": false}, {"identifier": "consumeThrough", "parameters": "(char expected)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consumeThrough(char expected)", "full_signature": "public TokenStream consumeThrough(char expected)", "class_method_signature": "TokenStream.consumeThrough(char expected)", "testcase": false, "constructor": false}, {"identifier": "consumeThrough", "parameters": "(char expected, char skipMatchingTokens)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consumeThrough(char expected, char skipMatchingTokens)", "full_signature": "public TokenStream consumeThrough(char expected, char skipMatchingTokens)", "class_method_signature": "TokenStream.consumeThrough(char expected, char skipMatchingTokens)", "testcase": false, "constructor": false}, {"identifier": "consumeThrough", "parameters": "(String expected)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consumeThrough(String expected)", "full_signature": "public TokenStream consumeThrough(String expected)", "class_method_signature": "TokenStream.consumeThrough(String expected)", "testcase": false, "constructor": false}, {"identifier": "consumeThrough", "parameters": "(String expected, String skipMatchingTokens)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consumeThrough(String expected, String skipMatchingTokens)", "full_signature": "public TokenStream consumeThrough(String expected, String skipMatchingTokens)", "class_method_signature": "TokenStream.consumeThrough(String expected, String skipMatchingTokens)", "testcase": false, "constructor": false}, {"identifier": "consumeUntil", "parameters": "(char expected)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consumeUntil(char expected)", "full_signature": "public TokenStream consumeUntil(char expected)", "class_method_signature": "TokenStream.consumeUntil(char expected)", "testcase": false, "constructor": false}, {"identifier": "consumeUntil", "parameters": "(char expected, char skipMatchingTokens)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consumeUntil(char expected, char skipMatchingTokens)", "full_signature": "public TokenStream consumeUntil(char expected, char skipMatchingTokens)", "class_method_signature": "TokenStream.consumeUntil(char expected, char skipMatchingTokens)", "testcase": false, "constructor": false}, {"identifier": "consumeUntil", "parameters": "(String expected)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consumeUntil(String expected)", "full_signature": "public TokenStream consumeUntil(String expected)", "class_method_signature": "TokenStream.consumeUntil(String expected)", "testcase": false, "constructor": false}, {"identifier": "consumeUntil", "parameters": "(String expected, String... skipMatchingTokens)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consumeUntil(String expected, String... skipMatchingTokens)", "full_signature": "public TokenStream consumeUntil(String expected, String... skipMatchingTokens)", "class_method_signature": "TokenStream.consumeUntil(String expected, String... skipMatchingTokens)", "testcase": false, "constructor": false}, {"identifier": "consumeUntilEndOrOneOf", "parameters": "(String... stopTokens)", "modifiers": "public", "return": "TokenStream", "signature": "TokenStream consumeUntilEndOrOneOf(String... stopTokens)", "full_signature": "public TokenStream consumeUntilEndOrOneOf(String... stopTokens)", "class_method_signature": "TokenStream.consumeUntilEndOrOneOf(String... stopTokens)", "testcase": false, "constructor": false}, {"identifier": "canConsumeInteger", "parameters": "(IntConsumer consumer)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsumeInteger(IntConsumer consumer)", "full_signature": "public boolean canConsumeInteger(IntConsumer consumer)", "class_method_signature": "TokenStream.canConsumeInteger(IntConsumer consumer)", "testcase": false, "constructor": false}, {"identifier": "canConsumeBoolean", "parameters": "(BooleanConsumer consumer)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsumeBoolean(BooleanConsumer consumer)", "full_signature": "public boolean canConsumeBoolean(BooleanConsumer consumer)", "class_method_signature": "TokenStream.canConsumeBoolean(BooleanConsumer consumer)", "testcase": false, "constructor": false}, {"identifier": "canConsumeLong", "parameters": "(LongConsumer consumer)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsumeLong(LongConsumer consumer)", "full_signature": "public boolean canConsumeLong(LongConsumer consumer)", "class_method_signature": "TokenStream.canConsumeLong(LongConsumer consumer)", "testcase": false, "constructor": false}, {"identifier": "canConsume", "parameters": "(String expected)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsume(String expected)", "full_signature": "public boolean canConsume(String expected)", "class_method_signature": "TokenStream.canConsume(String expected)", "testcase": false, "constructor": false}, {"identifier": "canConsume", "parameters": "(int type, String expected)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsume(int type, String expected)", "full_signature": "public boolean canConsume(int type, String expected)", "class_method_signature": "TokenStream.canConsume(int type, String expected)", "testcase": false, "constructor": false}, {"identifier": "canConsumeWord", "parameters": "(String expected)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsumeWord(String expected)", "full_signature": "public boolean canConsumeWord(String expected)", "class_method_signature": "TokenStream.canConsumeWord(String expected)", "testcase": false, "constructor": false}, {"identifier": "canConsume", "parameters": "(char expected)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsume(char expected)", "full_signature": "public boolean canConsume(char expected)", "class_method_signature": "TokenStream.canConsume(char expected)", "testcase": false, "constructor": false}, {"identifier": "canConsume", "parameters": "(int expectedType)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsume(int expectedType)", "full_signature": "public boolean canConsume(int expectedType)", "class_method_signature": "TokenStream.canConsume(int expectedType)", "testcase": false, "constructor": false}, {"identifier": "canConsume", "parameters": "(String currentExpected,\n                              String... expectedForNextTokens)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsume(String currentExpected,\n                              String... expectedForNextTokens)", "full_signature": "public boolean canConsume(String currentExpected,\n                              String... expectedForNextTokens)", "class_method_signature": "TokenStream.canConsume(String currentExpected,\n                              String... expectedForNextTokens)", "testcase": false, "constructor": false}, {"identifier": "canConsume", "parameters": "(int type, String currentExpected, String... expectedForNextTokens)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsume(int type, String currentExpected, String... expectedForNextTokens)", "full_signature": "public boolean canConsume(int type, String currentExpected, String... expectedForNextTokens)", "class_method_signature": "TokenStream.canConsume(int type, String currentExpected, String... expectedForNextTokens)", "testcase": false, "constructor": false}, {"identifier": "canConsumeWords", "parameters": "(String currentExpected, String... expectedForNextTokens)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsumeWords(String currentExpected, String... expectedForNextTokens)", "full_signature": "public boolean canConsumeWords(String currentExpected, String... expectedForNextTokens)", "class_method_signature": "TokenStream.canConsumeWords(String currentExpected, String... expectedForNextTokens)", "testcase": false, "constructor": false}, {"identifier": "canConsume", "parameters": "(String[] nextTokens)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsume(String[] nextTokens)", "full_signature": "public boolean canConsume(String[] nextTokens)", "class_method_signature": "TokenStream.canConsume(String[] nextTokens)", "testcase": false, "constructor": false}, {"identifier": "canConsume", "parameters": "(Iterable<String> nextTokens)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsume(Iterable<String> nextTokens)", "full_signature": "public boolean canConsume(Iterable<String> nextTokens)", "class_method_signature": "TokenStream.canConsume(Iterable<String> nextTokens)", "testcase": false, "constructor": false}, {"identifier": "canConsumeAnyOf", "parameters": "(String firstOption,\n                                   String... additionalOptions)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsumeAnyOf(String firstOption,\n                                   String... additionalOptions)", "full_signature": "public boolean canConsumeAnyOf(String firstOption,\n                                   String... additionalOptions)", "class_method_signature": "TokenStream.canConsumeAnyOf(String firstOption,\n                                   String... additionalOptions)", "testcase": false, "constructor": false}, {"identifier": "canConsumeAnyOf", "parameters": "(String[] options)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsumeAnyOf(String[] options)", "full_signature": "public boolean canConsumeAnyOf(String[] options)", "class_method_signature": "TokenStream.canConsumeAnyOf(String[] options)", "testcase": false, "constructor": false}, {"identifier": "canConsumeAnyOf", "parameters": "(Iterable<String> options)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsumeAnyOf(Iterable<String> options)", "full_signature": "public boolean canConsumeAnyOf(Iterable<String> options)", "class_method_signature": "TokenStream.canConsumeAnyOf(Iterable<String> options)", "testcase": false, "constructor": false}, {"identifier": "canConsumeAnyOf", "parameters": "(int firstTypeOption,\n                                   int... additionalTypeOptions)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsumeAnyOf(int firstTypeOption,\n                                   int... additionalTypeOptions)", "full_signature": "public boolean canConsumeAnyOf(int firstTypeOption,\n                                   int... additionalTypeOptions)", "class_method_signature": "TokenStream.canConsumeAnyOf(int firstTypeOption,\n                                   int... additionalTypeOptions)", "testcase": false, "constructor": false}, {"identifier": "canConsumeAnyOf", "parameters": "(int[] typeOptions)", "modifiers": "public", "return": "boolean", "signature": "boolean canConsumeAnyOf(int[] typeOptions)", "full_signature": "public boolean canConsumeAnyOf(int[] typeOptions)", "class_method_signature": "TokenStream.canConsumeAnyOf(int[] typeOptions)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(String expected)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(String expected)", "full_signature": "public boolean matches(String expected)", "class_method_signature": "TokenStream.matches(String expected)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(int type, String expected)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(int type, String expected)", "full_signature": "public boolean matches(int type, String expected)", "class_method_signature": "TokenStream.matches(int type, String expected)", "testcase": false, "constructor": false}, {"identifier": "matchesWord", "parameters": "(String expected)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesWord(String expected)", "full_signature": "public boolean matchesWord(String expected)", "class_method_signature": "TokenStream.matchesWord(String expected)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(char expected)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(char expected)", "full_signature": "public boolean matches(char expected)", "class_method_signature": "TokenStream.matches(char expected)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(int expectedType)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(int expectedType)", "full_signature": "public boolean matches(int expectedType)", "class_method_signature": "TokenStream.matches(int expectedType)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(String currentExpected,\n                           String... expectedForNextTokens)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(String currentExpected,\n                           String... expectedForNextTokens)", "full_signature": "public boolean matches(String currentExpected,\n                           String... expectedForNextTokens)", "class_method_signature": "TokenStream.matches(String currentExpected,\n                           String... expectedForNextTokens)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(String[] nextTokens)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(String[] nextTokens)", "full_signature": "public boolean matches(String[] nextTokens)", "class_method_signature": "TokenStream.matches(String[] nextTokens)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(Iterable<String> nextTokens)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(Iterable<String> nextTokens)", "full_signature": "public boolean matches(Iterable<String> nextTokens)", "class_method_signature": "TokenStream.matches(Iterable<String> nextTokens)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(int currentExpectedType,\n                           int... expectedTypeForNextTokens)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(int currentExpectedType,\n                           int... expectedTypeForNextTokens)", "full_signature": "public boolean matches(int currentExpectedType,\n                           int... expectedTypeForNextTokens)", "class_method_signature": "TokenStream.matches(int currentExpectedType,\n                           int... expectedTypeForNextTokens)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(int[] typesForNextTokens)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(int[] typesForNextTokens)", "full_signature": "public boolean matches(int[] typesForNextTokens)", "class_method_signature": "TokenStream.matches(int[] typesForNextTokens)", "testcase": false, "constructor": false}, {"identifier": "matchesAnyOf", "parameters": "(String firstOption,\n                                String... additionalOptions)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesAnyOf(String firstOption,\n                                String... additionalOptions)", "full_signature": "public boolean matchesAnyOf(String firstOption,\n                                String... additionalOptions)", "class_method_signature": "TokenStream.matchesAnyOf(String firstOption,\n                                String... additionalOptions)", "testcase": false, "constructor": false}, {"identifier": "matchesAnyOf", "parameters": "(int type, String firstOption, String... additionalOptions)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesAnyOf(int type, String firstOption, String... additionalOptions)", "full_signature": "public boolean matchesAnyOf(int type, String firstOption, String... additionalOptions)", "class_method_signature": "TokenStream.matchesAnyOf(int type, String firstOption, String... additionalOptions)", "testcase": false, "constructor": false}, {"identifier": "matchesAnyWordOf", "parameters": "(String firstOption, String... additionalOptions)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesAnyWordOf(String firstOption, String... additionalOptions)", "full_signature": "public boolean matchesAnyWordOf(String firstOption, String... additionalOptions)", "class_method_signature": "TokenStream.matchesAnyWordOf(String firstOption, String... additionalOptions)", "testcase": false, "constructor": false}, {"identifier": "matchesAnyOf", "parameters": "(String[] options)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesAnyOf(String[] options)", "full_signature": "public boolean matchesAnyOf(String[] options)", "class_method_signature": "TokenStream.matchesAnyOf(String[] options)", "testcase": false, "constructor": false}, {"identifier": "matchesAnyOf", "parameters": "(Iterable<String> options)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesAnyOf(Iterable<String> options)", "full_signature": "public boolean matchesAnyOf(Iterable<String> options)", "class_method_signature": "TokenStream.matchesAnyOf(Iterable<String> options)", "testcase": false, "constructor": false}, {"identifier": "matchesAnyOf", "parameters": "(int firstTypeOption,\n                                int... additionalTypeOptions)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesAnyOf(int firstTypeOption,\n                                int... additionalTypeOptions)", "full_signature": "public boolean matchesAnyOf(int firstTypeOption,\n                                int... additionalTypeOptions)", "class_method_signature": "TokenStream.matchesAnyOf(int firstTypeOption,\n                                int... additionalTypeOptions)", "testcase": false, "constructor": false}, {"identifier": "matchesAnyOf", "parameters": "(int[] typeOptions)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesAnyOf(int[] typeOptions)", "full_signature": "public boolean matchesAnyOf(int[] typeOptions)", "class_method_signature": "TokenStream.matchesAnyOf(int[] typeOptions)", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "public boolean hasNext()", "class_method_signature": "TokenStream.hasNext()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TokenStream.toString()", "testcase": false, "constructor": false}, {"identifier": "moveToNextToken", "parameters": "(List<Token> newTokens)", "modifiers": "private", "return": "void", "signature": "void moveToNextToken(List<Token> newTokens)", "full_signature": "private void moveToNextToken(List<Token> newTokens)", "class_method_signature": "TokenStream.moveToNextToken(List<Token> newTokens)", "testcase": false, "constructor": false}, {"identifier": "moveToNextToken", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void moveToNextToken()", "full_signature": "private void moveToNextToken()", "class_method_signature": "TokenStream.moveToNextToken()", "testcase": false, "constructor": false}, {"identifier": "currentToken", "parameters": "()", "modifiers": "final", "return": "Token", "signature": "Token currentToken()", "full_signature": "final Token currentToken()", "class_method_signature": "TokenStream.currentToken()", "testcase": false, "constructor": false}, {"identifier": "getContentFrom", "parameters": "(Marker starting)", "modifiers": "public", "return": "String", "signature": "String getContentFrom(Marker starting)", "full_signature": "public String getContentFrom(Marker starting)", "class_method_signature": "TokenStream.getContentFrom(Marker starting)", "testcase": false, "constructor": false}, {"identifier": "getContentBetween", "parameters": "(Marker starting,\n                                    Position end)", "modifiers": "public", "return": "String", "signature": "String getContentBetween(Marker starting,\n                                    Position end)", "full_signature": "public String getContentBetween(Marker starting,\n                                    Position end)", "class_method_signature": "TokenStream.getContentBetween(Marker starting,\n                                    Position end)", "testcase": false, "constructor": false}, {"identifier": "getContentBetween", "parameters": "(Position starting,\n                                    Position end)", "modifiers": "public", "return": "String", "signature": "String getContentBetween(Position starting,\n                                    Position end)", "full_signature": "public String getContentBetween(Position starting,\n                                    Position end)", "class_method_signature": "TokenStream.getContentBetween(Position starting,\n                                    Position end)", "testcase": false, "constructor": false}, {"identifier": "getContentBetween", "parameters": "(int startIndex,\n                                       Position end)", "modifiers": "protected", "return": "String", "signature": "String getContentBetween(int startIndex,\n                                       Position end)", "full_signature": "protected String getContentBetween(int startIndex,\n                                       Position end)", "class_method_signature": "TokenStream.getContentBetween(int startIndex,\n                                       Position end)", "testcase": false, "constructor": false}, {"identifier": "previousToken", "parameters": "(int count)", "modifiers": "public final", "return": "Token", "signature": "Token previousToken(int count)", "full_signature": "public final Token previousToken(int count)", "class_method_signature": "TokenStream.previousToken(int count)", "testcase": false, "constructor": false}, {"identifier": "generateFragment", "parameters": "()", "modifiers": "", "return": "String", "signature": "String generateFragment()", "full_signature": " String generateFragment()", "class_method_signature": "TokenStream.generateFragment()", "testcase": false, "constructor": false}, {"identifier": "generateFragment", "parameters": "(String content,\n                                   int indexOfProblem,\n                                   int charactersToIncludeBeforeAndAfter,\n                                   String highlightText)", "modifiers": "static", "return": "String", "signature": "String generateFragment(String content,\n                                   int indexOfProblem,\n                                   int charactersToIncludeBeforeAndAfter,\n                                   String highlightText)", "full_signature": "static String generateFragment(String content,\n                                   int indexOfProblem,\n                                   int charactersToIncludeBeforeAndAfter,\n                                   String highlightText)", "class_method_signature": "TokenStream.generateFragment(String content,\n                                   int indexOfProblem,\n                                   int charactersToIncludeBeforeAndAfter,\n                                   String highlightText)", "testcase": false, "constructor": false}, {"identifier": "basicTokenizer", "parameters": "(boolean includeComments)", "modifiers": "public static", "return": "BasicTokenizer", "signature": "BasicTokenizer basicTokenizer(boolean includeComments)", "full_signature": "public static BasicTokenizer basicTokenizer(boolean includeComments)", "class_method_signature": "TokenStream.basicTokenizer(boolean includeComments)", "testcase": false, "constructor": false}, {"identifier": "getInputString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInputString()", "full_signature": "public String getInputString()", "class_method_signature": "TokenStream.getInputString()", "testcase": false, "constructor": false}], "file": "debezium-core/src/main/java/io/debezium/text/TokenStream.java"}, "focal_method": {"identifier": "consume", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String consume() throws ParsingException, IllegalStateException {\n        if (completed) {\n            throwNoMoreContent();\n        }\n        // Get the value from the current token ...\n        String result = currentToken().value();\n        moveToNextToken();\n        return result;\n    }", "signature": "String consume()", "full_signature": "public String consume()", "class_method_signature": "TokenStream.consume()", "testcase": false, "constructor": false, "invocations": ["throwNoMoreContent", "value", "currentToken", "moveToNextToken"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}