{"test_class": {"identifier": "GoogleLocationClientTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "private GoogleLocationClient googleLocationClient;", "modifier": "private", "type": "GoogleLocationClient", "declarator": "googleLocationClient", "var_name": "googleLocationClient"}, {"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}], "file": "library/src/test/java/io/ona/kujaku/location/clients/GoogleLocationClientTest.java"}, "test_case": {"identifier": "stopLocationUpdatesShouldSetListenerToNullWhenListenerIsCurrentlySet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void stopLocationUpdatesShouldSetListenerToNullWhenListenerIsCurrentlySet() {\n        LocationListener locationListener = Mockito.mock(LocationListener.class);\n\n        googleLocationClient.addLocationListener(locationListener);\n\n\n        Assert.assertTrue(googleLocationClient.getLocationListeners().size() > 0);\n        googleLocationClient.stopLocationUpdates();\n\n        Assert.assertEquals(0, googleLocationClient.getLocationListeners().size());\n\n        // do the same test using the deprecated setLocationListener and getLocationListener\n        googleLocationClient.setLocationListener(locationListener);\n\n        Assert.assertNotNull(googleLocationClient.getLocationListener());\n        googleLocationClient.stopLocationUpdates();\n\n        Assert.assertNull(googleLocationClient.getLocationListener());\n    }", "signature": "void stopLocationUpdatesShouldSetListenerToNullWhenListenerIsCurrentlySet()", "full_signature": "@Test public void stopLocationUpdatesShouldSetListenerToNullWhenListenerIsCurrentlySet()", "class_method_signature": "GoogleLocationClientTest.stopLocationUpdatesShouldSetListenerToNullWhenListenerIsCurrentlySet()", "testcase": true, "constructor": false, "invocations": ["mock", "addLocationListener", "assertTrue", "size", "getLocationListeners", "stopLocationUpdates", "assertEquals", "size", "getLocationListeners", "setLocationListener", "assertNotNull", "getLocationListener", "stopLocationUpdates", "assertNull", "getLocationListener"]}, "focal_class": {"identifier": "GoogleLocationClient", "superclass": "extends BaseLocationClient", "interfaces": "implements LocationListener", "fields": [{"original_string": "private Location lastLocation;", "modifier": "private", "type": "Location", "declarator": "lastLocation", "var_name": "lastLocation"}, {"original_string": "private FusedLocationProviderClient fusedLocationClient;", "modifier": "private", "type": "FusedLocationProviderClient", "declarator": "fusedLocationClient", "var_name": "fusedLocationClient"}, {"original_string": "private GoogleLocationCallback googleLocationCallback;", "modifier": "private", "type": "GoogleLocationCallback", "declarator": "googleLocationCallback", "var_name": "googleLocationCallback"}, {"original_string": "private long updateInterval = 5000;", "modifier": "private", "type": "long", "declarator": "updateInterval = 5000", "var_name": "updateInterval"}, {"original_string": "private long fastestUpdateInterval = 1000;", "modifier": "private", "type": "long", "declarator": "fastestUpdateInterval = 1000", "var_name": "fastestUpdateInterval"}, {"original_string": "private Object gpsStatusCallback;", "modifier": "private", "type": "Object", "declarator": "gpsStatusCallback", "var_name": "gpsStatusCallback"}], "methods": [{"identifier": "GoogleLocationClient", "parameters": "(@NonNull Context context)", "modifiers": "public", "return": "", "signature": " GoogleLocationClient(@NonNull Context context)", "full_signature": "public  GoogleLocationClient(@NonNull Context context)", "class_method_signature": "GoogleLocationClient.GoogleLocationClient(@NonNull Context context)", "testcase": false, "constructor": true}, {"identifier": "stopLocationUpdates", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stopLocationUpdates()", "full_signature": "@Override public void stopLocationUpdates()", "class_method_signature": "GoogleLocationClient.stopLocationUpdates()", "testcase": false, "constructor": false}, {"identifier": "getLastLocation", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "Location", "signature": "Location getLastLocation()", "full_signature": "@Override @Nullable public Location getLastLocation()", "class_method_signature": "GoogleLocationClient.getLastLocation()", "testcase": false, "constructor": false}, {"identifier": "onLocationChanged", "parameters": "(Location location)", "modifiers": "@Override public", "return": "void", "signature": "void onLocationChanged(Location location)", "full_signature": "@Override public void onLocationChanged(Location location)", "class_method_signature": "GoogleLocationClient.onLocationChanged(Location location)", "testcase": false, "constructor": false}, {"identifier": "requestLocationUpdates", "parameters": "(@NonNull android.location.LocationListener locationListener)", "modifiers": "@Override public", "return": "void", "signature": "void requestLocationUpdates(@NonNull android.location.LocationListener locationListener)", "full_signature": "@Override public void requestLocationUpdates(@NonNull android.location.LocationListener locationListener)", "class_method_signature": "GoogleLocationClient.requestLocationUpdates(@NonNull android.location.LocationListener locationListener)", "testcase": false, "constructor": false}, {"identifier": "requestLocationUpdates", "parameters": "(@NonNull android.location.LocationListener locationListener\n            , @NonNull LocationRequest locationRequest)", "modifiers": "public", "return": "void", "signature": "void requestLocationUpdates(@NonNull android.location.LocationListener locationListener\n            , @NonNull LocationRequest locationRequest)", "full_signature": "public void requestLocationUpdates(@NonNull android.location.LocationListener locationListener\n            , @NonNull LocationRequest locationRequest)", "class_method_signature": "GoogleLocationClient.requestLocationUpdates(@NonNull android.location.LocationListener locationListener\n            , @NonNull LocationRequest locationRequest)", "testcase": false, "constructor": false}, {"identifier": "registerForGpsStoppedEvent", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerForGpsStoppedEvent()", "full_signature": "private void registerForGpsStoppedEvent()", "class_method_signature": "GoogleLocationClient.registerForGpsStoppedEvent()", "testcase": false, "constructor": false}, {"identifier": "unregisterForGpsStoppedEvent", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unregisterForGpsStoppedEvent()", "full_signature": "private void unregisterForGpsStoppedEvent()", "class_method_signature": "GoogleLocationClient.unregisterForGpsStoppedEvent()", "testcase": false, "constructor": false}, {"identifier": "resetLastLocationIfLocationServiceIsOff", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetLastLocationIfLocationServiceIsOff()", "full_signature": "private void resetLastLocationIfLocationServiceIsOff()", "class_method_signature": "GoogleLocationClient.resetLastLocationIfLocationServiceIsOff()", "testcase": false, "constructor": false}, {"identifier": "setUpdateIntervals", "parameters": "(long updateInterval, long fastestUpdateInterval)", "modifiers": "@Override public", "return": "void", "signature": "void setUpdateIntervals(long updateInterval, long fastestUpdateInterval)", "full_signature": "@Override public void setUpdateIntervals(long updateInterval, long fastestUpdateInterval)", "class_method_signature": "GoogleLocationClient.setUpdateIntervals(long updateInterval, long fastestUpdateInterval)", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "signature": "String getProvider()", "full_signature": "@NonNull @Override public String getProvider()", "class_method_signature": "GoogleLocationClient.getProvider()", "testcase": false, "constructor": false}, {"identifier": "isProviderEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isProviderEnabled()", "full_signature": "@Override public boolean isProviderEnabled()", "class_method_signature": "GoogleLocationClient.isProviderEnabled()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "GoogleLocationClient.close()", "testcase": false, "constructor": false}, {"identifier": "getFusedLocationClient", "parameters": "()", "modifiers": "public", "return": "FusedLocationProviderClient", "signature": "FusedLocationProviderClient getFusedLocationClient()", "full_signature": "public FusedLocationProviderClient getFusedLocationClient()", "class_method_signature": "GoogleLocationClient.getFusedLocationClient()", "testcase": false, "constructor": false}], "file": "library/src/main/java/io/ona/kujaku/location/clients/GoogleLocationClient.java"}, "focal_method": {"identifier": "stopLocationUpdates", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void stopLocationUpdates() {\n        if (isMonitoringLocation()) {\n            lastLocation = null;\n            clearLocationListeners();\n            fusedLocationClient.removeLocationUpdates(googleLocationCallback);\n        }\n\n        unregisterForGpsStoppedEvent();\n    }", "signature": "void stopLocationUpdates()", "full_signature": "@Override public void stopLocationUpdates()", "class_method_signature": "GoogleLocationClient.stopLocationUpdates()", "testcase": false, "constructor": false, "invocations": ["isMonitoringLocation", "clearLocationListeners", "removeLocationUpdates", "unregisterForGpsStoppedEvent"]}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}