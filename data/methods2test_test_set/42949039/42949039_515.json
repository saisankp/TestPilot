{"test_class": {"identifier": "BusinessObjectFormatExternalInterfaceDescriptiveInformationHelperTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/BusinessObjectFormatExternalInterfaceDescriptiveInformationHelperTest.java"}, "test_case": {"identifier": "testCreateBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntitiesWithException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntitiesWithException()\n    {\n        // Create a velocity template for the external interface entity.\n        String velocityTemplateDescription = \"#elseif\";\n\n        // Create a business object format entity.\n        BusinessObjectFormatEntity businessObjectFormatEntity = businessObjectFormatDaoTestHelper\n            .createBusinessObjectFormatEntity(NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, FORMAT_DESCRIPTION,\n                NO_FORMAT_DOCUMENT_SCHEMA, NO_FORMAT_DOCUMENT_SCHEMA_URL, LATEST_VERSION_FLAG_SET, NO_PARTITION_KEY, NO_PARTITION_KEY_GROUP, NO_ATTRIBUTES,\n                SCHEMA_DELIMITER_PIPE, SCHEMA_COLLECTION_ITEMS_DELIMITER_COMMA, SCHEMA_MAP_KEYS_DELIMITER_HASH, SCHEMA_ESCAPE_CHARACTER_BACKSLASH,\n                null, null, SCHEMA_NULL_VALUE_BACKSLASH_N, NO_COLUMNS, NO_PARTITION_COLUMNS);\n\n        // Create an external interface entity.\n        ExternalInterfaceEntity externalInterfaceEntity = externalInterfaceDaoTestHelper.createExternalInterfaceEntity(EXTERNAL_INTERFACE);\n        externalInterfaceEntity.setDescription(velocityTemplateDescription);\n\n        // Create a business object format to external interface mapping entity.\n        businessObjectFormatExternalInterfaceDaoTestHelper\n            .createBusinessObjectFormatExternalInterfaceEntity(businessObjectFormatEntity, externalInterfaceEntity);\n\n        // Build the illegal argument exception message.\n        String parseErrorExceptionMessage = String.format(\n            \"Encountered \\\"#elseif\\\" at External Interface Description[line 1, column 1]%n\" + \"Was expecting one of:%n\" + \"    <EOF> %n\" + \"    \\\"(\\\" ...%n\" +\n                \"    <RPAREN> ...%n\" + \"    <ESCAPE_DIRECTIVE> ...%n\" + \"    <SET_DIRECTIVE> ...%n\" + \"    \\\"##\\\" ...%n\" + \"    \\\"\\\\\\\\\\\\\\\\\\\" ...%n\" +\n                \"    \\\"\\\\\\\\\\\" ...%n\" + \"    <TEXT> ...%n\" + \"    \\\"*#\\\" ...%n\" + \"    \\\"*#\\\" ...%n\" + \"    \\\"]]#\\\" ...%n\" + \"    <STRING_LITERAL> ...%n\" +\n                \"    <IF_DIRECTIVE> ...%n\" + \"    <INTEGER_LITERAL> ...%n\" + \"    <FLOATING_POINT_LITERAL> ...%n\" + \"    <WORD> ...%n\" +\n                \"    <BRACKETED_WORD> ...%n\" + \"    <IDENTIFIER> ...%n\" + \"    <DOT> ...%n\" + \"    \\\"{\\\" ...%n\" + \"    \\\"}\\\" ...%n\" +\n                \"    <EMPTY_INDEX> ...%n\" + \"    \");\n\n        String illegalArgumentExceptionMessage = String\n            .format(\"Failed to evaluate velocity template in the external interface with name \\\"%s\\\". Reason: %s\", externalInterfaceEntity.getCode(),\n                parseErrorExceptionMessage);\n\n        try\n        {\n            // Call the method under test.\n            businessObjectFormatExternalInterfaceDescriptiveInformationHelper\n                .createBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntities(businessObjectFormatEntity, externalInterfaceEntity);\n            fail();\n        }\n        catch (IllegalArgumentException illegalArgumentException)\n        {\n            // Validate the exception message\n            assertEquals(\"Actual illegal argument exception message not equal to expected illegal argument exception message.\", illegalArgumentExceptionMessage,\n                illegalArgumentException.getMessage());\n        }\n    }", "signature": "void testCreateBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntitiesWithException()", "full_signature": "@Test public void testCreateBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntitiesWithException()", "class_method_signature": "BusinessObjectFormatExternalInterfaceDescriptiveInformationHelperTest.testCreateBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntitiesWithException()", "testcase": true, "constructor": false, "invocations": ["createBusinessObjectFormatEntity", "createExternalInterfaceEntity", "setDescription", "createBusinessObjectFormatExternalInterfaceEntity", "format", "format", "getCode", "createBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntities", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "BusinessObjectFormatExternalInterfaceDescriptiveInformationHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BusinessObjectFormatExternalInterfaceDescriptiveInformationHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BusinessObjectFormatExternalInterfaceDescriptiveInformationHelper.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private BusinessObjectFormatHelper businessObjectFormatHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectFormatHelper", "declarator": "businessObjectFormatHelper", "var_name": "businessObjectFormatHelper"}, {"original_string": "@Autowired\n    private VelocityNonStrictHelper velocityHelper;", "modifier": "@Autowired\n    private", "type": "VelocityNonStrictHelper", "declarator": "velocityHelper", "var_name": "velocityHelper"}], "methods": [{"identifier": "createBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntities", "parameters": "(\n        BusinessObjectFormatEntity businessObjectFormatEntity, ExternalInterfaceEntity externalInterfaceEntity)", "modifiers": "public", "return": "BusinessObjectFormatExternalInterfaceDescriptiveInformation", "signature": "BusinessObjectFormatExternalInterfaceDescriptiveInformation createBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntities(\n        BusinessObjectFormatEntity businessObjectFormatEntity, ExternalInterfaceEntity externalInterfaceEntity)", "full_signature": "public BusinessObjectFormatExternalInterfaceDescriptiveInformation createBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntities(\n        BusinessObjectFormatEntity businessObjectFormatEntity, ExternalInterfaceEntity externalInterfaceEntity)", "class_method_signature": "BusinessObjectFormatExternalInterfaceDescriptiveInformationHelper.createBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntities(\n        BusinessObjectFormatEntity businessObjectFormatEntity, ExternalInterfaceEntity externalInterfaceEntity)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/BusinessObjectFormatExternalInterfaceDescriptiveInformationHelper.java"}, "focal_method": {"identifier": "createBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntities", "parameters": "(\n        BusinessObjectFormatEntity businessObjectFormatEntity, ExternalInterfaceEntity externalInterfaceEntity)", "modifiers": "public", "return": "BusinessObjectFormatExternalInterfaceDescriptiveInformation", "body": "public BusinessObjectFormatExternalInterfaceDescriptiveInformation createBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntities(\n        BusinessObjectFormatEntity businessObjectFormatEntity, ExternalInterfaceEntity externalInterfaceEntity)\n    {\n        // Convert the business object format entity to the business object format model object\n        BusinessObjectFormat businessObjectFormat = businessObjectFormatHelper.createBusinessObjectFormatFromEntity(businessObjectFormatEntity);\n\n        // Build the BusinessObjectFormatExternalInterfaceKey with information from the business object format entity and the external interface entity\n        BusinessObjectFormatExternalInterfaceKey businessObjectFormatExternalInterfaceKey =\n            new BusinessObjectFormatExternalInterfaceKey(businessObjectFormat.getNamespace(), businessObjectFormat.getBusinessObjectDefinitionName(),\n                businessObjectFormat.getBusinessObjectFormatUsage(), businessObjectFormat.getBusinessObjectFormatFileType(), externalInterfaceEntity.getCode());\n\n        // Velocity Template Resource Names:\n        // ${StringUtils}                       The string utilities class\n        // ${CollectionUtils}                   The collection utilities class\n        // ${Collections}                       The collections class\n        // ${namespace}                         The namespace associated with this business object format\n        // ${businessObjectDefinitionName}      The name of the business object definition associated with this business object format\n        // ${businessObjectFormatUsage}         The usage associated with the business object format\n        // ${businessObjectFormatFileType}      The file type associated with the business object format\n        // ${businessObjectFormatAttributes}    The business object format attributes map of key value pairs\n        // ${partitionColumnNames}              The partition column names associated with the business object format\n        // ${partitionKeyGroup}                 The partition key group associated with the business object format\n\n        // Build velocity context variable map\n        Map<String, Object> velocityContext = Maps.newHashMap();\n        velocityContext.put(\"StringUtils\", StringUtils.class);\n        velocityContext.put(\"CollectionUtils\", CollectionUtils.class);\n        velocityContext.put(\"Collections\", Collections.class);\n        velocityContext.put(\"namespace\", businessObjectFormat.getNamespace());\n        velocityContext.put(\"businessObjectDefinitionName\", businessObjectFormat.getBusinessObjectDefinitionName());\n        velocityContext.put(\"businessObjectFormatUsage\", businessObjectFormat.getBusinessObjectFormatUsage());\n        velocityContext.put(\"businessObjectFormatFileType\", businessObjectFormat.getBusinessObjectFormatFileType());\n\n        // Build an insertion ordered map of business object format attributes.\n        Map<String, String> businessObjectFormatAttributes = Maps.newLinkedHashMap();\n        for (Attribute attribute : businessObjectFormat.getAttributes())\n        {\n            businessObjectFormatAttributes.put(attribute.getName(), attribute.getValue());\n        }\n\n        velocityContext.put(\"businessObjectFormatAttributes\", businessObjectFormatAttributes);\n\n        // Build an insertion ordered list of partition column names.\n        List<String> partitionColumnNames = Lists.newLinkedList();\n        if (businessObjectFormat.getSchema() != null)\n        {\n            for (SchemaColumn schemaColumn : businessObjectFormat.getSchema().getPartitions())\n            {\n                partitionColumnNames.add(schemaColumn.getName());\n            }\n        }\n\n        velocityContext.put(\"partitionColumnNames\", partitionColumnNames);\n\n        if (businessObjectFormatEntity.getPartitionKeyGroup() != null)\n        {\n            velocityContext.put(\"partitionKeyGroup\", businessObjectFormatEntity.getPartitionKeyGroup().getPartitionKeyGroupName());\n        }\n        else\n        {\n            velocityContext.put(\"partitionKeyGroup\", \"\");\n        }\n\n        // Create a string to hold the velocity template evaluated external interface description.\n        String velocityEvaluatedExternalInterfaceDescription;\n\n        // Catch any parse error exceptions, and throw an illegal argument exception instead.\n        try\n        {\n            // Use the velocity helper to evaluate the external interface description velocity template.\n            // During the evaluation of the velocity template by the velocity engine a parse error exception may occur.\n            velocityEvaluatedExternalInterfaceDescription =\n                velocityHelper.evaluate(externalInterfaceEntity.getDescription(), velocityContext, \"External Interface Description\", false);\n        }\n        catch (ParseErrorException parseErrorException)\n        {\n            // Build an exception message that contains the external interface information as well as the parse error.\n            String exceptionMessage = String\n                .format(\"Failed to evaluate velocity template in the external interface with name \\\"%s\\\". Reason: %s\", externalInterfaceEntity.getCode(),\n                    parseErrorException.getMessage());\n\n            // Log the parsing error.\n            LOGGER.error(exceptionMessage, parseErrorException);\n\n            // Throw a new illegal argument exception with the exception message.\n            throw new IllegalArgumentException(exceptionMessage);\n        }\n\n        return new BusinessObjectFormatExternalInterfaceDescriptiveInformation(businessObjectFormatExternalInterfaceKey,\n            externalInterfaceEntity.getDisplayName(), velocityEvaluatedExternalInterfaceDescription);\n    }", "signature": "BusinessObjectFormatExternalInterfaceDescriptiveInformation createBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntities(\n        BusinessObjectFormatEntity businessObjectFormatEntity, ExternalInterfaceEntity externalInterfaceEntity)", "full_signature": "public BusinessObjectFormatExternalInterfaceDescriptiveInformation createBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntities(\n        BusinessObjectFormatEntity businessObjectFormatEntity, ExternalInterfaceEntity externalInterfaceEntity)", "class_method_signature": "BusinessObjectFormatExternalInterfaceDescriptiveInformationHelper.createBusinessObjectFormatExternalInterfaceDescriptiveInformationFromEntities(\n        BusinessObjectFormatEntity businessObjectFormatEntity, ExternalInterfaceEntity externalInterfaceEntity)", "testcase": false, "constructor": false, "invocations": ["createBusinessObjectFormatFromEntity", "getNamespace", "getBusinessObjectDefinitionName", "getBusinessObjectFormatUsage", "getBusinessObjectFormatFileType", "getCode", "newHashMap", "put", "put", "put", "put", "getNamespace", "put", "getBusinessObjectDefinitionName", "put", "getBusinessObjectFormatUsage", "put", "getBusinessObjectFormatFileType", "newLinkedHashMap", "getAttributes", "put", "getName", "getValue", "put", "newLinkedList", "getSchema", "getPartitions", "getSchema", "add", "getName", "put", "getPartitionKeyGroup", "put", "getPartitionKeyGroupName", "getPartitionKeyGroup", "put", "evaluate", "getDescription", "format", "getCode", "getMessage", "error", "getDisplayName"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}