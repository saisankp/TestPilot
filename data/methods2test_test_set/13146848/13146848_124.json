{"test_class": {"identifier": "PageRangeTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-model/src/test/java/org/sejda/model/pdf/page/PageRangeTest.java"}, "test_case": {"identifier": "testIntersect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIntersect() {\n        PageRange base = new PageRange(0, 10);\n        PageRange noIntersection = new PageRange(11, 12);\n        PageRange intersecion = new PageRange(5, 15);\n        PageRange included = new PageRange(2, 5);\n        assertTrue(base.intersects(intersecion));\n        assertTrue(base.intersects(included));\n        assertFalse(base.intersects(noIntersection));\n    }", "signature": "void testIntersect()", "full_signature": "@Test public void testIntersect()", "class_method_signature": "PageRangeTest.testIntersect()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "intersects", "assertTrue", "intersects", "assertFalse", "intersects"]}, "focal_class": {"identifier": "PageRange", "superclass": "", "interfaces": "implements PagesSelection", "fields": [{"original_string": "private static final int UNBOUNDED_END = Integer.MAX_VALUE;", "modifier": "private static final", "type": "int", "declarator": "UNBOUNDED_END = Integer.MAX_VALUE", "var_name": "UNBOUNDED_END"}, {"original_string": "@Min(1)\n    private int start;", "modifier": "@Min(1)\n    private", "type": "int", "declarator": "start", "var_name": "start"}, {"original_string": "@Min(1)\n    private int end;", "modifier": "@Min(1)\n    private", "type": "int", "declarator": "end", "var_name": "end"}], "methods": [{"identifier": "PageRange", "parameters": "()", "modifiers": "", "return": "", "signature": " PageRange()", "full_signature": "  PageRange()", "class_method_signature": "PageRange.PageRange()", "testcase": false, "constructor": true}, {"identifier": "PageRange", "parameters": "(int start, int end)", "modifiers": "public", "return": "", "signature": " PageRange(int start, int end)", "full_signature": "public  PageRange(int start, int end)", "class_method_signature": "PageRange.PageRange(int start, int end)", "testcase": false, "constructor": true}, {"identifier": "PageRange", "parameters": "(int start)", "modifiers": "public", "return": "", "signature": " PageRange(int start)", "full_signature": "public  PageRange(int start)", "class_method_signature": "PageRange.PageRange(int start)", "testcase": false, "constructor": true}, {"identifier": "getStart", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStart()", "full_signature": "public int getStart()", "class_method_signature": "PageRange.getStart()", "testcase": false, "constructor": false}, {"identifier": "getEnd", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getEnd()", "full_signature": "public int getEnd()", "class_method_signature": "PageRange.getEnd()", "testcase": false, "constructor": false}, {"identifier": "isUnbounded", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUnbounded()", "full_signature": "public boolean isUnbounded()", "class_method_signature": "PageRange.isUnbounded()", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(PageRange range)", "modifiers": "public", "return": "boolean", "signature": "boolean intersects(PageRange range)", "full_signature": "public boolean intersects(PageRange range)", "class_method_signature": "PageRange.intersects(PageRange range)", "testcase": false, "constructor": false}, {"identifier": "getPages", "parameters": "(int totalNumberOfPage)", "modifiers": "@Override public", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> getPages(int totalNumberOfPage)", "full_signature": "@Override public SortedSet<Integer> getPages(int totalNumberOfPage)", "class_method_signature": "PageRange.getPages(int totalNumberOfPage)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(int page)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(int page)", "full_signature": "public boolean contains(int page)", "class_method_signature": "PageRange.contains(int page)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PageRange.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PageRange.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "PageRange.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "one", "parameters": "(int page)", "modifiers": "public static", "return": "PageRange", "signature": "PageRange one(int page)", "full_signature": "public static PageRange one(int page)", "class_method_signature": "PageRange.one(int page)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/pdf/page/PageRange.java"}, "focal_method": {"identifier": "intersects", "parameters": "(PageRange range)", "modifiers": "public", "return": "boolean", "body": "public boolean intersects(PageRange range) {\n        return (range.getStart() >= start && range.getStart() <= end)\n                || (range.getEnd() >= start && range.getEnd() <= end);\n    }", "signature": "boolean intersects(PageRange range)", "full_signature": "public boolean intersects(PageRange range)", "class_method_signature": "PageRange.intersects(PageRange range)", "testcase": false, "constructor": false, "invocations": ["getStart", "getStart", "getEnd", "getEnd"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}