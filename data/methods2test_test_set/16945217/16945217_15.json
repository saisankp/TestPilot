{"test_class": {"identifier": "GoogleConcurrentLruCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "tddl-common/src/test/java/com/taobao/tddl/common/utils/GoogleConcurrentLruCacheTest.java"}, "test_case": {"identifier": "testSimple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSimple() {\n\n        GoogleConcurrentLruCache cache = new GoogleConcurrentLruCache(10, new EvictionListener<String, String>() {\n\n            public void onEviction(String key, String value) {\n                System.out.println(\"evict key:\" + key + \" values:\" + value);\n            }\n        });\n\n        for (int i = 0; i < 11; i++) {\n            cache.put(\"key\" + i, \"value\" + i);\n        }\n    }", "signature": "void testSimple()", "full_signature": "@Test public void testSimple()", "class_method_signature": "GoogleConcurrentLruCacheTest.testSimple()", "testcase": true, "constructor": false, "invocations": ["println", "put"]}, "focal_class": {"identifier": "GoogleConcurrentLruCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConcurrentLinkedHashMap<K, V> cache;", "modifier": "private", "type": "ConcurrentLinkedHashMap<K, V>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private static final int              DEFAULT_CAPACITY         = 389;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_CAPACITY         = 389", "var_name": "DEFAULT_CAPACITY"}, {"original_string": "public static final int               DEFAULT_CONCURENCY_LEVEL = 64;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_CONCURENCY_LEVEL = 64", "var_name": "DEFAULT_CONCURENCY_LEVEL"}, {"original_string": "private AtomicLong                    get                      = new AtomicLong(0);", "modifier": "private", "type": "AtomicLong", "declarator": "get                      = new AtomicLong(0)", "var_name": "get"}, {"original_string": "private AtomicLong                    hit                      = new AtomicLong(0);", "modifier": "private", "type": "AtomicLong", "declarator": "hit                      = new AtomicLong(0)", "var_name": "hit"}], "methods": [{"identifier": "GoogleConcurrentLruCache", "parameters": "()", "modifiers": "public", "return": "", "signature": " GoogleConcurrentLruCache()", "full_signature": "public  GoogleConcurrentLruCache()", "class_method_signature": "GoogleConcurrentLruCache.GoogleConcurrentLruCache()", "testcase": false, "constructor": true}, {"identifier": "GoogleConcurrentLruCache", "parameters": "(int capacity)", "modifiers": "public", "return": "", "signature": " GoogleConcurrentLruCache(int capacity)", "full_signature": "public  GoogleConcurrentLruCache(int capacity)", "class_method_signature": "GoogleConcurrentLruCache.GoogleConcurrentLruCache(int capacity)", "testcase": false, "constructor": true}, {"identifier": "GoogleConcurrentLruCache", "parameters": "(int capacity, EvictionListener<K, V> listener)", "modifiers": "public", "return": "", "signature": " GoogleConcurrentLruCache(int capacity, EvictionListener<K, V> listener)", "full_signature": "public  GoogleConcurrentLruCache(int capacity, EvictionListener<K, V> listener)", "class_method_signature": "GoogleConcurrentLruCache.GoogleConcurrentLruCache(int capacity, EvictionListener<K, V> listener)", "testcase": false, "constructor": true}, {"identifier": "capacity", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long capacity()", "full_signature": "public long capacity()", "class_method_signature": "GoogleConcurrentLruCache.capacity()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "GoogleConcurrentLruCache.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "GoogleConcurrentLruCache.size()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "GoogleConcurrentLruCache.clear()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object key)", "modifiers": "public", "return": "V", "signature": "V get(Object key)", "full_signature": "public V get(Object key)", "class_method_signature": "GoogleConcurrentLruCache.get(Object key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "public", "return": "void", "signature": "void put(K key, V value)", "full_signature": "public void put(K key, V value)", "class_method_signature": "GoogleConcurrentLruCache.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(K key, V value)", "modifiers": "public", "return": "boolean", "signature": "boolean putIfAbsent(K key, V value)", "full_signature": "public boolean putIfAbsent(K key, V value)", "class_method_signature": "GoogleConcurrentLruCache.putIfAbsent(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(K key, V old, V value)", "modifiers": "public", "return": "boolean", "signature": "boolean replace(K key, V old, V value)", "full_signature": "public boolean replace(K key, V old, V value)", "class_method_signature": "GoogleConcurrentLruCache.replace(K key, V old, V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(K key)", "modifiers": "public", "return": "void", "signature": "void remove(K key)", "full_signature": "public void remove(K key)", "class_method_signature": "GoogleConcurrentLruCache.remove(K key)", "testcase": false, "constructor": false}, {"identifier": "keySet", "parameters": "()", "modifiers": "public", "return": "Set<K>", "signature": "Set<K> keySet()", "full_signature": "public Set<K> keySet()", "class_method_signature": "GoogleConcurrentLruCache.keySet()", "testcase": false, "constructor": false}, {"identifier": "hotKeySet", "parameters": "(int n)", "modifiers": "public", "return": "Set<K>", "signature": "Set<K> hotKeySet(int n)", "full_signature": "public Set<K> hotKeySet(int n)", "class_method_signature": "GoogleConcurrentLruCache.hotKeySet(int n)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(K key)", "modifiers": "public", "return": "boolean", "signature": "boolean containsKey(K key)", "full_signature": "public boolean containsKey(K key)", "class_method_signature": "GoogleConcurrentLruCache.containsKey(K key)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStatus()", "full_signature": "public String getStatus()", "class_method_signature": "GoogleConcurrentLruCache.getStatus()", "testcase": false, "constructor": false}], "file": "tddl-common/src/main/java/com/taobao/tddl/common/utils/GoogleConcurrentLruCache.java"}, "focal_method": {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "public", "return": "void", "body": "public void put(K key, V value) {\n        cache.put(key, value);\n    }", "signature": "void put(K key, V value)", "full_signature": "public void put(K key, V value)", "class_method_signature": "GoogleConcurrentLruCache.put(K key, V value)", "testcase": false, "constructor": false, "invocations": ["put"]}, "repository": {"repo_id": 16945217, "url": "https://github.com/cpsing/tddl", "language": "Java", "is_fork": false, "fork_count": 126, "stargazer_count": 31, "size": 3247, "license": "licensed"}}