{"test_class": {"identifier": "AnnotationProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AnnotationProcessor sut;", "modifier": "private", "type": "AnnotationProcessor", "declarator": "sut", "var_name": "sut"}], "file": "plugface-core/src/test/java/org/plugface/core/internal/AnnotationProcessorTest.java"}, "test_case": {"identifier": "shouldRetrieveDependencies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRetrieveDependencies() {\n        final Collection<Node<?>> dependencies = sut.getDependencies(DependencyPlugin.class);\n        assertFalse(dependencies.isEmpty());\n    }", "signature": "void shouldRetrieveDependencies()", "full_signature": "@Test public void shouldRetrieveDependencies()", "class_method_signature": "AnnotationProcessorTest.shouldRetrieveDependencies()", "testcase": true, "constructor": false, "invocations": ["getDependencies", "assertFalse", "isEmpty"]}, "focal_class": {"identifier": "AnnotationProcessor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getPluginName", "parameters": "(T plugin)", "modifiers": "public static", "return": "String", "signature": "String getPluginName(T plugin)", "full_signature": "public static String getPluginName(T plugin)", "class_method_signature": "AnnotationProcessor.getPluginName(T plugin)", "testcase": false, "constructor": false}, {"identifier": "getPluginName", "parameters": "(Class<T> plugin)", "modifiers": "public static", "return": "String", "signature": "String getPluginName(Class<T> plugin)", "full_signature": "public static String getPluginName(Class<T> plugin)", "class_method_signature": "AnnotationProcessor.getPluginName(Class<T> plugin)", "testcase": false, "constructor": false}, {"identifier": "hasDependencies", "parameters": "(Class<?> pluginClass)", "modifiers": "public", "return": "boolean", "signature": "boolean hasDependencies(Class<?> pluginClass)", "full_signature": "public boolean hasDependencies(Class<?> pluginClass)", "class_method_signature": "AnnotationProcessor.hasDependencies(Class<?> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "(Class<?> pluginClass)", "modifiers": "public", "return": "Collection<Node<?>>", "signature": "Collection<Node<?>> getDependencies(Class<?> pluginClass)", "full_signature": "public Collection<Node<?>> getDependencies(Class<?> pluginClass)", "class_method_signature": "AnnotationProcessor.getDependencies(Class<?> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "getPluginAnnotation", "parameters": "(Class<?> pluginClass)", "modifiers": "private static", "return": "Plugin", "signature": "Plugin getPluginAnnotation(Class<?> pluginClass)", "full_signature": "private static Plugin getPluginAnnotation(Class<?> pluginClass)", "class_method_signature": "AnnotationProcessor.getPluginAnnotation(Class<?> pluginClass)", "testcase": false, "constructor": false}], "file": "plugface-core/src/main/java/org/plugface/core/internal/AnnotationProcessor.java"}, "focal_method": {"identifier": "getDependencies", "parameters": "(Class<?> pluginClass)", "modifiers": "public", "return": "Collection<Node<?>>", "body": "public Collection<Node<?>> getDependencies(Class<?> pluginClass) {\n        final Constructor<?>[] constructors = pluginClass.getConstructors();\n        if (constructors.length == 0) {\n            throw new IllegalArgumentException(String.format(\"Class %s doesn't have a public constructor. Class: %s\", pluginClass.getSimpleName(), pluginClass.getName()));\n        }\n\n        for (Constructor<?> constructor : constructors) {\n            final Inject annotation = constructor.getAnnotation(Inject.class);\n            if (annotation == null) {\n                continue;\n            }\n            final Collection<Node<?>> dependencies = new ArrayList<>();\n            final Class<?>[] parameterTypes = constructor.getParameterTypes();\n            for (final Class<?> param : parameterTypes) {\n                dependencies.add(new Node<>(param));\n\n            }\n            return dependencies;\n\n        }\n        return new ArrayList<>();\n    }", "signature": "Collection<Node<?>> getDependencies(Class<?> pluginClass)", "full_signature": "public Collection<Node<?>> getDependencies(Class<?> pluginClass)", "class_method_signature": "AnnotationProcessor.getDependencies(Class<?> pluginClass)", "testcase": false, "constructor": false, "invocations": ["getConstructors", "format", "getSimpleName", "getName", "getAnnotation", "getParameterTypes", "add"]}, "repository": {"repo_id": 84065080, "url": "https://github.com/MatteoJoliveau/PlugFace", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 34, "size": 10277, "license": "licensed"}}