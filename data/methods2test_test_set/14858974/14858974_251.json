{"test_class": {"identifier": "ModelMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/axway/grapes/server/db/ModelMapperTest.java"}, "test_case": {"identifier": "getDbModule", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDbModule(){\n        final Module module = DataModelFactory.createModule(\"root\", \"1.0.0-SNAPSHOT\");\n        final Artifact artifact = DataModelFactory.createArtifact(\"com.axway.root\", \"artifact1\", \"1.0.0-SNAPSHOT\", \"win\", \"component\", \"jar\");\n        module.addArtifact(artifact);\n\n        final Artifact thirdparty = DataModelFactory.createArtifact(\"org.apache\", \"all\", \"6.8.0-5426\", \"\", \"\", \"jar\");\n        final Dependency dependency = DataModelFactory.createDependency(thirdparty, Scope.COMPILE);\n        module.addDependency(dependency);\n\n        final Module submodule = DataModelFactory.createModule(\"sub1\", \"1.0.0-SNAPSHOT\");\n        final Artifact artifact2 = DataModelFactory.createArtifact(\"com.axway.root.sub1\", \"artifactSub1\", \"1.0.0-SNAPSHOT\", \"\", \"\", \"jar\");\n        submodule.addArtifact(artifact2);\n        final Artifact thirdparty2 = DataModelFactory.createArtifact(\"org.lol\", \"all\", \"1.2.3-4\", \"\", \"\", \"jar\");\n        final Dependency dependency2 = DataModelFactory.createDependency(thirdparty2, Scope.PROVIDED);\n        submodule.addDependency(dependency2);\n        module.addSubmodule(submodule);\n\n        final ModelMapper modelMapper = new ModelMapper(mock(RepositoryHandler.class));\n        final DbModule dbModule = modelMapper.getDbModule(module);\n        assertEquals(module.getName(), dbModule.getName());\n        assertEquals(module.getVersion(), dbModule.getVersion());\n        assertEquals(1, dbModule.getArtifacts().size());\n        assertEquals(artifact.getGavc(), dbModule.getArtifacts().get(0));\n        assertEquals(1, dbModule.getDependencies().size());\n        assertEquals(thirdparty.getGavc(), dbModule.getDependencies().get(0).getTarget());\n        assertEquals(DbModule.generateID(module.getName(), module.getVersion()), dbModule.getDependencies().get(0).getSource());\n        assertEquals(dependency.getScope(), dbModule.getDependencies().get(0).getScope());\n        assertEquals(1, dbModule.getSubmodules().size());\n\n        final DbModule dbSubmodule = dbModule.getSubmodules().get(0);\n        assertEquals(submodule.getName() , dbSubmodule.getName());\n        assertEquals(submodule.getVersion(), dbSubmodule.getVersion());\n        assertEquals(1, dbSubmodule.getArtifacts().size());\n        assertEquals(artifact2.getGavc(), dbSubmodule.getArtifacts().get(0));\n        assertEquals(1, dbSubmodule.getDependencies().size());\n        assertEquals(thirdparty2.getGavc(), dbSubmodule.getDependencies().get(0).getTarget());\n        assertEquals(DbModule.generateID(submodule.getName(), submodule.getVersion()), dbSubmodule.getDependencies().get(0).getSource());\n        assertEquals(dependency2.getScope(), dbSubmodule.getDependencies().get(0).getScope());\n\n    }", "signature": "void getDbModule()", "full_signature": "@Test public void getDbModule()", "class_method_signature": "ModelMapperTest.getDbModule()", "testcase": true, "constructor": false, "invocations": ["createModule", "createArtifact", "addArtifact", "createArtifact", "createDependency", "addDependency", "createModule", "createArtifact", "addArtifact", "createArtifact", "createDependency", "addDependency", "addSubmodule", "mock", "getDbModule", "assertEquals", "getName", "getName", "assertEquals", "getVersion", "getVersion", "assertEquals", "size", "getArtifacts", "assertEquals", "getGavc", "get", "getArtifacts", "assertEquals", "size", "getDependencies", "assertEquals", "getGavc", "getTarget", "get", "getDependencies", "assertEquals", "generateID", "getName", "getVersion", "getSource", "get", "getDependencies", "assertEquals", "getScope", "getScope", "get", "getDependencies", "assertEquals", "size", "getSubmodules", "get", "getSubmodules", "assertEquals", "getName", "getName", "assertEquals", "getVersion", "getVersion", "assertEquals", "size", "getArtifacts", "assertEquals", "getGavc", "get", "getArtifacts", "assertEquals", "size", "getDependencies", "assertEquals", "getGavc", "getTarget", "get", "getDependencies", "assertEquals", "generateID", "getName", "getVersion", "getSource", "get", "getDependencies", "assertEquals", "getScope", "getScope", "get", "getDependencies"]}, "focal_class": {"identifier": "ModelMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RepositoryHandler repositoryHandler;", "modifier": "private final", "type": "RepositoryHandler", "declarator": "repositoryHandler", "var_name": "repositoryHandler"}], "methods": [{"identifier": "ModelMapper", "parameters": "(final RepositoryHandler repoHandler)", "modifiers": "public", "return": "", "signature": " ModelMapper(final RepositoryHandler repoHandler)", "full_signature": "public  ModelMapper(final RepositoryHandler repoHandler)", "class_method_signature": "ModelMapper.ModelMapper(final RepositoryHandler repoHandler)", "testcase": false, "constructor": true}, {"identifier": "getDbOrganization", "parameters": "(final Organization organization)", "modifiers": "public", "return": "DbOrganization", "signature": "DbOrganization getDbOrganization(final Organization organization)", "full_signature": "public DbOrganization getDbOrganization(final Organization organization)", "class_method_signature": "ModelMapper.getDbOrganization(final Organization organization)", "testcase": false, "constructor": false}, {"identifier": "getOrganization", "parameters": "(final DbOrganization dbOrganization)", "modifiers": "public", "return": "Organization", "signature": "Organization getOrganization(final DbOrganization dbOrganization)", "full_signature": "public Organization getOrganization(final DbOrganization dbOrganization)", "class_method_signature": "ModelMapper.getOrganization(final DbOrganization dbOrganization)", "testcase": false, "constructor": false}, {"identifier": "getDbLicense", "parameters": "(final License license)", "modifiers": "public", "return": "DbLicense", "signature": "DbLicense getDbLicense(final License license)", "full_signature": "public DbLicense getDbLicense(final License license)", "class_method_signature": "ModelMapper.getDbLicense(final License license)", "testcase": false, "constructor": false}, {"identifier": "getLicense", "parameters": "(final DbLicense dbLicense)", "modifiers": "public", "return": "License", "signature": "License getLicense(final DbLicense dbLicense)", "full_signature": "public License getLicense(final DbLicense dbLicense)", "class_method_signature": "ModelMapper.getLicense(final DbLicense dbLicense)", "testcase": false, "constructor": false}, {"identifier": "getDbArtifact", "parameters": "(final Artifact artifact)", "modifiers": "public", "return": "DbArtifact", "signature": "DbArtifact getDbArtifact(final Artifact artifact)", "full_signature": "public DbArtifact getDbArtifact(final Artifact artifact)", "class_method_signature": "ModelMapper.getDbArtifact(final Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "getArtifact", "parameters": "(final DbArtifact dbArtifact)", "modifiers": "public", "return": "Artifact", "signature": "Artifact getArtifact(final DbArtifact dbArtifact)", "full_signature": "public Artifact getArtifact(final DbArtifact dbArtifact)", "class_method_signature": "ModelMapper.getArtifact(final DbArtifact dbArtifact)", "testcase": false, "constructor": false}, {"identifier": "getDbModule", "parameters": "(final Module module)", "modifiers": "public", "return": "DbModule", "signature": "DbModule getDbModule(final Module module)", "full_signature": "public DbModule getDbModule(final Module module)", "class_method_signature": "ModelMapper.getDbModule(final Module module)", "testcase": false, "constructor": false}, {"identifier": "getModule", "parameters": "(final DbModule dbModule)", "modifiers": "public", "return": "Module", "signature": "Module getModule(final DbModule dbModule)", "full_signature": "public Module getModule(final DbModule dbModule)", "class_method_signature": "ModelMapper.getModule(final DbModule dbModule)", "testcase": false, "constructor": false}, {"identifier": "getDependency", "parameters": "(final DbDependency dbDependency, final String sourceName, final String sourceVersion)", "modifiers": "public", "return": "Dependency", "signature": "Dependency getDependency(final DbDependency dbDependency, final String sourceName, final String sourceVersion)", "full_signature": "public Dependency getDependency(final DbDependency dbDependency, final String sourceName, final String sourceVersion)", "class_method_signature": "ModelMapper.getDependency(final DbDependency dbDependency, final String sourceName, final String sourceVersion)", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "(final DbComment dbComment)", "modifiers": "public", "return": "Comment", "signature": "Comment getComment(final DbComment dbComment)", "full_signature": "public Comment getComment(final DbComment dbComment)", "class_method_signature": "ModelMapper.getComment(final DbComment dbComment)", "testcase": false, "constructor": false}, {"identifier": "getDbComment", "parameters": "(final Comment comment)", "modifiers": "public", "return": "DbComment", "signature": "DbComment getDbComment(final Comment comment)", "full_signature": "public DbComment getDbComment(final Comment comment)", "class_method_signature": "ModelMapper.getDbComment(final Comment comment)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/db/ModelMapper.java"}, "focal_method": {"identifier": "getDbModule", "parameters": "(final Module module)", "modifiers": "public", "return": "DbModule", "body": "public DbModule getDbModule(final Module module) {\n        final DbModule dbModule = new DbModule();\n\n        dbModule.setName(module.getName());\n        dbModule.setVersion(module.getVersion());\n        dbModule.setPromoted(module.isPromoted());\n        dbModule.setSubmodule(module.isSubmodule());\n        dbModule.setCreatedDateTime(module.getCreatedDateTime());\n        dbModule.setUpdatedDateTime(module.getUpdatedDateTime());\n\n        // Artifact\n        for (final Artifact artifact : module.getArtifacts()) {\n            final DbArtifact dbArtifact = getDbArtifact(artifact);\n            dbModule.addArtifact(dbArtifact);\n        }\n\n        // Dependencies\n        for (final Dependency dependency : module.getDependencies()) {\n            dbModule.addDependency(dependency.getTarget().getGavc(), dependency.getScope());\n        }\n\n        // SubModules\n        final StringBuilder sb = new StringBuilder();\n        for (final Module submodule : module.getSubmodules()) {\n            final DbModule dbSubmodule = getDbModule(submodule);\n            dbModule.addSubmodule(dbSubmodule);\n            sb.setLength(0);\n        }\n\n        return dbModule;\n    }", "signature": "DbModule getDbModule(final Module module)", "full_signature": "public DbModule getDbModule(final Module module)", "class_method_signature": "ModelMapper.getDbModule(final Module module)", "testcase": false, "constructor": false, "invocations": ["setName", "getName", "setVersion", "getVersion", "setPromoted", "isPromoted", "setSubmodule", "isSubmodule", "setCreatedDateTime", "getCreatedDateTime", "setUpdatedDateTime", "getUpdatedDateTime", "getArtifacts", "getDbArtifact", "addArtifact", "getDependencies", "addDependency", "getGavc", "getTarget", "getScope", "getSubmodules", "getDbModule", "addSubmodule", "setLength"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}