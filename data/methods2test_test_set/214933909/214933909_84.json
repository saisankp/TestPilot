{"test_class": {"identifier": "DasClientTest", "superclass": "extends DataPreparer", "interfaces": "", "fields": [{"original_string": "private final static String DATABASE_LOGIC_NAME_MYSQL = \"MySqlSimple\";", "modifier": "private final static", "type": "String", "declarator": "DATABASE_LOGIC_NAME_MYSQL = \"MySqlSimple\"", "var_name": "DATABASE_LOGIC_NAME_MYSQL"}, {"original_string": "private final static String DATABASE_LOGIC_NAME_SQLSVR = \"SqlSvrSimple\";", "modifier": "private final static", "type": "String", "declarator": "DATABASE_LOGIC_NAME_SQLSVR = \"SqlSvrSimple\"", "var_name": "DATABASE_LOGIC_NAME_SQLSVR"}, {"original_string": "private static PersonDefinition p = Person.PERSON;", "modifier": "private static", "type": "PersonDefinition", "declarator": "p = Person.PERSON", "var_name": "p"}], "file": "das-client/src/test/java/com/ppdai/das/client/DasClientTest.java"}, "test_case": {"identifier": "testUpdateOverloading", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testUpdateOverloading() throws Exception {\n        dao.update(SqlBuilder.selectCount(), Hints.hints());\n    }", "signature": "void testUpdateOverloading()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testUpdateOverloading()", "class_method_signature": "DasClientTest.testUpdateOverloading()", "testcase": true, "constructor": false, "invocations": ["update", "selectCount", "hints"]}, "focal_class": {"identifier": "DasClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DAS_CLIENT_DEBUG = \"das.client.debug\";", "modifier": "private static final", "type": "String", "declarator": "DAS_CLIENT_DEBUG = \"das.client.debug\"", "var_name": "DAS_CLIENT_DEBUG"}, {"original_string": "private DasDelegate delegate;", "modifier": "private", "type": "DasDelegate", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final boolean debugMode;", "modifier": "private final", "type": "boolean", "declarator": "debugMode", "var_name": "debugMode"}], "methods": [{"identifier": "DasClient", "parameters": "(DasDelegate delegate)", "modifiers": "public", "return": "", "signature": " DasClient(DasDelegate delegate)", "full_signature": "public  DasClient(DasDelegate delegate)", "class_method_signature": "DasClient.DasClient(DasDelegate delegate)", "testcase": false, "constructor": true}, {"identifier": "queryByPk", "parameters": "(T pk, Hints...hints)", "modifiers": "public", "return": "T", "signature": "T queryByPk(T pk, Hints...hints)", "full_signature": "public T queryByPk(T pk, Hints...hints)", "class_method_signature": "DasClient.queryByPk(T pk, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "queryBySample", "parameters": "(T sample, Hints...hints)", "modifiers": "public", "return": "List<T>", "signature": "List<T> queryBySample(T sample, Hints...hints)", "full_signature": "public List<T> queryBySample(T sample, Hints...hints)", "class_method_signature": "DasClient.queryBySample(T sample, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "queryBySample", "parameters": "(T sample, PageRange range, Hints...hints)", "modifiers": "public", "return": "List<T>", "signature": "List<T> queryBySample(T sample, PageRange range, Hints...hints)", "full_signature": "public List<T> queryBySample(T sample, PageRange range, Hints...hints)", "class_method_signature": "DasClient.queryBySample(T sample, PageRange range, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "countBySample", "parameters": "(T sample, Hints...hints)", "modifiers": "public", "return": "long", "signature": "long countBySample(T sample, Hints...hints)", "full_signature": "public long countBySample(T sample, Hints...hints)", "class_method_signature": "DasClient.countBySample(T sample, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(T entity, Hints...hints)", "modifiers": "public", "return": "int", "signature": "int insert(T entity, Hints...hints)", "full_signature": "public int insert(T entity, Hints...hints)", "class_method_signature": "DasClient.insert(T entity, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(List<T> entities, Hints...hints)", "modifiers": "public", "return": "int", "signature": "int insert(List<T> entities, Hints...hints)", "full_signature": "public int insert(List<T> entities, Hints...hints)", "class_method_signature": "DasClient.insert(List<T> entities, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "batchInsert", "parameters": "(List<T> entities, Hints...hints)", "modifiers": "public", "return": "int[]", "signature": "int[] batchInsert(List<T> entities, Hints...hints)", "full_signature": "public int[] batchInsert(List<T> entities, Hints...hints)", "class_method_signature": "DasClient.batchInsert(List<T> entities, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "deleteByPk", "parameters": "(T pk, Hints...hints)", "modifiers": "public", "return": "int", "signature": "int deleteByPk(T pk, Hints...hints)", "full_signature": "public int deleteByPk(T pk, Hints...hints)", "class_method_signature": "DasClient.deleteByPk(T pk, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "deleteBySample", "parameters": "(T sample, Hints...hints)", "modifiers": "public", "return": "int", "signature": "int deleteBySample(T sample, Hints...hints)", "full_signature": "public int deleteBySample(T sample, Hints...hints)", "class_method_signature": "DasClient.deleteBySample(T sample, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "batchDelete", "parameters": "(List<T> entities, Hints...hints)", "modifiers": "public", "return": "int[]", "signature": "int[] batchDelete(List<T> entities, Hints...hints)", "full_signature": "public int[] batchDelete(List<T> entities, Hints...hints)", "class_method_signature": "DasClient.batchDelete(List<T> entities, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(T entity, Hints...hints)", "modifiers": "public", "return": "int", "signature": "int update(T entity, Hints...hints)", "full_signature": "public int update(T entity, Hints...hints)", "class_method_signature": "DasClient.update(T entity, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(List<T> entities, Hints...hints)", "modifiers": "public", "return": "int[]", "signature": "int[] batchUpdate(List<T> entities, Hints...hints)", "full_signature": "public int[] batchUpdate(List<T> entities, Hints...hints)", "class_method_signature": "DasClient.batchUpdate(List<T> entities, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "queryObject", "parameters": "(SqlBuilder builder)", "modifiers": "public", "return": "T", "signature": "T queryObject(SqlBuilder builder)", "full_signature": "public T queryObject(SqlBuilder builder)", "class_method_signature": "DasClient.queryObject(SqlBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "queryObjectNullable", "parameters": "(SqlBuilder builder)", "modifiers": "public", "return": "T", "signature": "T queryObjectNullable(SqlBuilder builder)", "full_signature": "public T queryObjectNullable(SqlBuilder builder)", "class_method_signature": "DasClient.queryObjectNullable(SqlBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(SqlBuilder builder)", "modifiers": "public", "return": "List<T>", "signature": "List<T> query(SqlBuilder builder)", "full_signature": "public List<T> query(SqlBuilder builder)", "class_method_signature": "DasClient.query(SqlBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "batchQuery", "parameters": "(BatchQueryBuilder builder)", "modifiers": "public", "return": "List<?>", "signature": "List<?> batchQuery(BatchQueryBuilder builder)", "full_signature": "public List<?> batchQuery(BatchQueryBuilder builder)", "class_method_signature": "DasClient.batchQuery(BatchQueryBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(SqlBuilder builder)", "modifiers": "public", "return": "int", "signature": "int update(SqlBuilder builder)", "full_signature": "public int update(SqlBuilder builder)", "class_method_signature": "DasClient.update(SqlBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(BatchUpdateBuilder builder)", "modifiers": "public", "return": "int[]", "signature": "int[] batchUpdate(BatchUpdateBuilder builder)", "full_signature": "public int[] batchUpdate(BatchUpdateBuilder builder)", "class_method_signature": "DasClient.batchUpdate(BatchUpdateBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(CallBuilder builder)", "modifiers": "public", "return": "void", "signature": "void call(CallBuilder builder)", "full_signature": "public void call(CallBuilder builder)", "class_method_signature": "DasClient.call(CallBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "batchCall", "parameters": "(BatchCallBuilder builder)", "modifiers": "public", "return": "int[]", "signature": "int[] batchCall(BatchCallBuilder builder)", "full_signature": "public int[] batchCall(BatchCallBuilder builder)", "class_method_signature": "DasClient.batchCall(BatchCallBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Transaction transaction, Hints...hints)", "modifiers": "public", "return": "void", "signature": "void execute(Transaction transaction, Hints...hints)", "full_signature": "public void execute(Transaction transaction, Hints...hints)", "class_method_signature": "DasClient.execute(Transaction transaction, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(CallableTransaction<T> transaction, Hints...hints)", "modifiers": "public", "return": "T", "signature": "T execute(CallableTransaction<T> transaction, Hints...hints)", "full_signature": "public T execute(CallableTransaction<T> transaction, Hints...hints)", "class_method_signature": "DasClient.execute(CallableTransaction<T> transaction, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "checkHints", "parameters": "(Hints...hintsList)", "modifiers": "protected", "return": "Hints", "signature": "Hints checkHints(Hints...hintsList)", "full_signature": "protected Hints checkHints(Hints...hintsList)", "class_method_signature": "DasClient.checkHints(Hints...hintsList)", "testcase": false, "constructor": false}, {"identifier": "internalExecute", "parameters": "(Hints hints, Diagnosable<T> action)", "modifiers": "private", "return": "T", "signature": "T internalExecute(Hints hints, Diagnosable<T> action)", "full_signature": "private T internalExecute(Hints hints, Diagnosable<T> action)", "class_method_signature": "DasClient.internalExecute(Hints hints, Diagnosable<T> action)", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/client/DasClient.java"}, "focal_method": {"identifier": "update", "parameters": "(T entity, Hints...hints)", "modifiers": "public", "return": "int", "body": "public <T> int update(T entity, Hints...hints) throws SQLException {\n        Preconditions.checkArgument(!(entity instanceof SqlBuilder), \"Please call SqlBuilder.hints()\");\n\t    final Hints hint = checkHints(hints);\n        return internalExecute(hint, ()->{return delegate.update(entity, hint);});\n\t}", "signature": "int update(T entity, Hints...hints)", "full_signature": "public int update(T entity, Hints...hints)", "class_method_signature": "DasClient.update(T entity, Hints...hints)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "checkHints", "internalExecute", "update"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}