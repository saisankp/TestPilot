{"test_class": {"identifier": "BigDecimalUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "aw-reporting-model/src/test/java/com/google/api/ads/adwords/awreporting/model/util/BigDecimalUtilTest.java"}, "test_case": {"identifier": "testNotANumber", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n  public void testNotANumber() {\n    String numString = \"abcdef\";\n    BigDecimalUtil.parseFromNumberString(numString);\n  }", "signature": "void testNotANumber()", "full_signature": "@Test(expected = RuntimeException.class) public void testNotANumber()", "class_method_signature": "BigDecimalUtilTest.testNotANumber()", "testcase": true, "constructor": false, "invocations": ["parseFromNumberString"]}, "focal_class": {"identifier": "BigDecimalUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BigDecimal MICRO = new BigDecimal(1000000);", "modifier": "private static final", "type": "BigDecimal", "declarator": "MICRO = new BigDecimal(1000000)", "var_name": "MICRO"}, {"original_string": "private static final ThreadLocal<DecimalFormat> humanReadableFormat =\n      new ThreadLocal<DecimalFormat>() {\n        @Override\n        protected DecimalFormat initialValue() {\n          return new DecimalFormat(\"#0.00\");\n        }\n      };", "modifier": "private static final", "type": "ThreadLocal<DecimalFormat>", "declarator": "humanReadableFormat =\n      new ThreadLocal<DecimalFormat>() {\n        @Override\n        protected DecimalFormat initialValue() {\n          return new DecimalFormat(\"#0.00\");\n        }\n      }", "var_name": "humanReadableFormat"}], "methods": [{"identifier": "BigDecimalUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " BigDecimalUtil()", "full_signature": "private  BigDecimalUtil()", "class_method_signature": "BigDecimalUtil.BigDecimalUtil()", "testcase": false, "constructor": true}, {"identifier": "parseFromNumberString", "parameters": "(@Nullable String numberString)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal parseFromNumberString(@Nullable String numberString)", "full_signature": "public static BigDecimal parseFromNumberString(@Nullable String numberString)", "class_method_signature": "BigDecimalUtil.parseFromNumberString(@Nullable String numberString)", "testcase": false, "constructor": false}, {"identifier": "parseFromNumberStringPercentage", "parameters": "(@Nullable String numberString)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal parseFromNumberStringPercentage(@Nullable String numberString)", "full_signature": "public static BigDecimal parseFromNumberStringPercentage(@Nullable String numberString)", "class_method_signature": "BigDecimalUtil.parseFromNumberStringPercentage(@Nullable String numberString)", "testcase": false, "constructor": false}, {"identifier": "formatAsReadable", "parameters": "(@Nullable BigDecimal number)", "modifiers": "public static", "return": "String", "signature": "String formatAsReadable(@Nullable BigDecimal number)", "full_signature": "public static String formatAsReadable(@Nullable BigDecimal number)", "class_method_signature": "BigDecimalUtil.formatAsReadable(@Nullable BigDecimal number)", "testcase": false, "constructor": false}, {"identifier": "parseFromMoneyString", "parameters": "(@Nullable String numberString)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal parseFromMoneyString(@Nullable String numberString)", "full_signature": "public static BigDecimal parseFromMoneyString(@Nullable String numberString)", "class_method_signature": "BigDecimalUtil.parseFromMoneyString(@Nullable String numberString)", "testcase": false, "constructor": false}], "file": "aw-reporting-model/src/main/java/com/google/api/ads/adwords/awreporting/model/util/BigDecimalUtil.java"}, "focal_method": {"identifier": "parseFromNumberString", "parameters": "(@Nullable String numberString)", "modifiers": "public static", "return": "BigDecimal", "body": "public static BigDecimal parseFromNumberString(@Nullable String numberString) {\n    BigDecimal result = null;\n\n    if (numberString != null) {\n      String nonSpacedString = numberString.replaceAll(\"[ \\\\t\\\\n\\\\x0B\\\\f\\\\r%]\", \"\");\n\n      if (!Strings.isNullOrEmpty(nonSpacedString)){\n        int indexOfComma = nonSpacedString.indexOf(',');\n        int indexOfDot = nonSpacedString.indexOf('.');\n  \n        DecimalFormat decimalFormat = (DecimalFormat) NumberFormat.getInstance();\n        DecimalFormatSymbols otherSymbols = new DecimalFormatSymbols();\n  \n        if (indexOfComma < indexOfDot) {\n          otherSymbols.setDecimalSeparator('.');\n          otherSymbols.setGroupingSeparator(',');\n        } else {\n          otherSymbols.setDecimalSeparator(',');\n          otherSymbols.setGroupingSeparator('.');\n        }\n  \n        decimalFormat.setParseBigDecimal(true);\n        decimalFormat.setDecimalFormatSymbols(otherSymbols);\n  \n        try {\n          result = (BigDecimal) decimalFormat.parse(nonSpacedString);\n        } catch (ParseException e) {\n          throw new RuntimeException(\"Error parsing '\" + nonSpacedString + \"' as BigDecimal\", e);\n        }\n      }\n    }\n    return result;\n  }", "signature": "BigDecimal parseFromNumberString(@Nullable String numberString)", "full_signature": "public static BigDecimal parseFromNumberString(@Nullable String numberString)", "class_method_signature": "BigDecimalUtil.parseFromNumberString(@Nullable String numberString)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "isNullOrEmpty", "indexOf", "indexOf", "getInstance", "setDecimalSeparator", "setGroupingSeparator", "setDecimalSeparator", "setGroupingSeparator", "setParseBigDecimal", "setDecimalFormatSymbols", "parse"]}, "repository": {"repo_id": 13736359, "url": "https://github.com/googleads/aw-reporting", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 120, "size": 5133, "license": "licensed"}}