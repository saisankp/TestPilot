{"test_class": {"identifier": "JoltTransformerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String IDENTITY_SPEC = \"[\\n\" +\n            \"  {\\n\" +\n            \"    \\\"operation\\\": \\\"shift\\\",\\n\" +\n            \"    \\\"spec\\\": {\\n\" +\n            \"      \\\"@\\\": \\\"\\\"\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"]\";", "modifier": "private final", "type": "String", "declarator": "IDENTITY_SPEC = \"[\\n\" +\n            \"  {\\n\" +\n            \"    \\\"operation\\\": \\\"shift\\\",\\n\" +\n            \"    \\\"spec\\\": {\\n\" +\n            \"      \\\"@\\\": \\\"\\\"\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"]\"", "var_name": "IDENTITY_SPEC"}, {"original_string": "private final String COPY_TO_ARRAY_SPEC = \"[\\n\" +\n            \"  {\\n\" +\n            \"    \\\"operation\\\": \\\"shift\\\",\\n\" +\n            \"    \\\"spec\\\": {\\n\" +\n            \"      \\\"@\\\": \\\"records[0].value\\\"\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"]\";", "modifier": "private final", "type": "String", "declarator": "COPY_TO_ARRAY_SPEC = \"[\\n\" +\n            \"  {\\n\" +\n            \"    \\\"operation\\\": \\\"shift\\\",\\n\" +\n            \"    \\\"spec\\\": {\\n\" +\n            \"      \\\"@\\\": \\\"records[0].value\\\"\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"]\"", "var_name": "COPY_TO_ARRAY_SPEC"}, {"original_string": "private final String TRANSFORM_WITH_METADATA_SPEC = \"[\\n\" +\n            \"  {\\n\" +\n            \"    \\\"operation\\\": \\\"shift\\\",\\n\" +\n            \"    \\\"spec\\\": {\\n\" +\n            \"      \\\"urlParts\\\": {\\n\" +\n            \"        \\\"1\\\": \\\"records[0].value.metadata.techId\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"headers\\\": {\\n\" +\n            \"        \\\"x-abc\\\": \\\"records[0].value.metadata.x-abc\\\",\\n\" +\n            \"        \\\"x-def\\\": \\\"records[0].value.metadata.x-def\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"payload\\\": {\\n\" +\n            \"        \\\"@\\\": \\\"records[0].value.dummyEvent\\\",\\n\" +\n            \"        \\\"sending\\\": {\\n\" +\n            \"          \\\"id\\\": [\\\"records[0].key\\\", \\\"records[0].value.&\\\"]\\n\" +\n            \"        }\\n\" +\n            \"      }\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"]\";", "modifier": "private final", "type": "String", "declarator": "TRANSFORM_WITH_METADATA_SPEC = \"[\\n\" +\n            \"  {\\n\" +\n            \"    \\\"operation\\\": \\\"shift\\\",\\n\" +\n            \"    \\\"spec\\\": {\\n\" +\n            \"      \\\"urlParts\\\": {\\n\" +\n            \"        \\\"1\\\": \\\"records[0].value.metadata.techId\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"headers\\\": {\\n\" +\n            \"        \\\"x-abc\\\": \\\"records[0].value.metadata.x-abc\\\",\\n\" +\n            \"        \\\"x-def\\\": \\\"records[0].value.metadata.x-def\\\"\\n\" +\n            \"      },\\n\" +\n            \"      \\\"payload\\\": {\\n\" +\n            \"        \\\"@\\\": \\\"records[0].value.dummyEvent\\\",\\n\" +\n            \"        \\\"sending\\\": {\\n\" +\n            \"          \\\"id\\\": [\\\"records[0].key\\\", \\\"records[0].value.&\\\"]\\n\" +\n            \"        }\\n\" +\n            \"      }\\n\" +\n            \"    }\\n\" +\n            \"  }\\n\" +\n            \"]\"", "var_name": "TRANSFORM_WITH_METADATA_SPEC"}, {"original_string": "private JoltSpec identitySpec;", "modifier": "private", "type": "JoltSpec", "declarator": "identitySpec", "var_name": "identitySpec"}, {"original_string": "private JoltSpec copyToArraySpec;", "modifier": "private", "type": "JoltSpec", "declarator": "copyToArraySpec", "var_name": "copyToArraySpec"}, {"original_string": "private JoltSpec transformWithMetadataSpec;", "modifier": "private", "type": "JoltSpec", "declarator": "transformWithMetadataSpec", "var_name": "transformWithMetadataSpec"}, {"original_string": "private final String COMPLEX_INPUT_JSON = ResourcesUtils.loadResource(\"complex_input_json\", true);", "modifier": "private final", "type": "String", "declarator": "COMPLEX_INPUT_JSON = ResourcesUtils.loadResource(\"complex_input_json\", true)", "var_name": "COMPLEX_INPUT_JSON"}, {"original_string": "private final String TRANSFORM_WITH_METADATA_INPUT_JSON = ResourcesUtils.loadResource(\"transform_with_metadata_input_json\", true);", "modifier": "private final", "type": "String", "declarator": "TRANSFORM_WITH_METADATA_INPUT_JSON = ResourcesUtils.loadResource(\"transform_with_metadata_input_json\", true)", "var_name": "TRANSFORM_WITH_METADATA_INPUT_JSON"}, {"original_string": "private final String TRANSFORM_WITH_METADATA_EXPECTED_OUTPUT_JSON = ResourcesUtils.loadResource(\"transform_with_metadata_expected_output_json\", true);", "modifier": "private final", "type": "String", "declarator": "TRANSFORM_WITH_METADATA_EXPECTED_OUTPUT_JSON = ResourcesUtils.loadResource(\"transform_with_metadata_expected_output_json\", true)", "var_name": "TRANSFORM_WITH_METADATA_EXPECTED_OUTPUT_JSON"}], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/json/transform/JoltTransformerTest.java"}, "test_case": {"identifier": "testTransformInputSpecInvalid", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransformInputSpecInvalid(TestContext context) {\n        JoltTransformer.transform(\"{}\", new JoltSpec(null)).setHandler(transform -> {\n            context.assertFalse(transform.succeeded());\n            context.assertNull(transform.result());\n            context.assertEquals(NullPointerException.class, transform.cause().getClass());\n        });\n    }", "signature": "void testTransformInputSpecInvalid(TestContext context)", "full_signature": "@Test public void testTransformInputSpecInvalid(TestContext context)", "class_method_signature": "JoltTransformerTest.testTransformInputSpecInvalid(TestContext context)", "testcase": true, "constructor": false, "invocations": ["setHandler", "transform", "assertFalse", "succeeded", "assertNull", "result", "assertEquals", "getClass", "cause"]}, "focal_class": {"identifier": "JoltTransformer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "transform", "parameters": "(String jsonInput, JoltSpec spec)", "modifiers": "public static", "return": "Future<JsonObject>", "signature": "Future<JsonObject> transform(String jsonInput, JoltSpec spec)", "full_signature": "public static Future<JsonObject> transform(String jsonInput, JoltSpec spec)", "class_method_signature": "JoltTransformer.transform(String jsonInput, JoltSpec spec)", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/json/transform/JoltTransformer.java"}, "focal_method": {"identifier": "transform", "parameters": "(String jsonInput, JoltSpec spec)", "modifiers": "public static", "return": "Future<JsonObject>", "body": "public static Future<JsonObject> transform(String jsonInput, JoltSpec spec) {\n        Future<JsonObject> future = Future.future();\n        try {\n            Chainr chainr = spec.getChainr();\n            Object inputJSON = JsonUtils.jsonToObject(jsonInput);\n            Object transformedOutput = chainr.transform(inputJSON);\n            future.complete(new JsonObject(JsonUtils.toJsonString(transformedOutput)));\n        } catch (Exception ex){\n            future.fail(ex);\n        }\n        return future;\n    }", "signature": "Future<JsonObject> transform(String jsonInput, JoltSpec spec)", "full_signature": "public static Future<JsonObject> transform(String jsonInput, JoltSpec spec)", "class_method_signature": "JoltTransformer.transform(String jsonInput, JoltSpec spec)", "testcase": false, "constructor": false, "invocations": ["future", "getChainr", "jsonToObject", "transform", "complete", "toJsonString", "fail"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}