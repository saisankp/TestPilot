{"test_class": {"identifier": "JavaToValueConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/types/JavaToValueConverterTest.java"}, "test_case": {"identifier": "testJavaToValueConversion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testJavaToValueConversion() {\n\t\ttry {\n\t\t\tassertNull(JavaToValueConverter.convertBoxedJavaType(null));\n\t\t\t\n\t\t\tassertEquals(new StringValue(\"123Test\"), JavaToValueConverter.convertBoxedJavaType(\"123Test\"));\n\t\t\tassertEquals(new ByteValue((byte) 44), JavaToValueConverter.convertBoxedJavaType((byte) 44));\n\t\t\tassertEquals(new ShortValue((short) 10000), JavaToValueConverter.convertBoxedJavaType((short) 10000));\n\t\t\tassertEquals(new IntValue(3567564), JavaToValueConverter.convertBoxedJavaType(3567564));\n\t\t\tassertEquals(new LongValue(767692734), JavaToValueConverter.convertBoxedJavaType(767692734L));\n\t\t\tassertEquals(new FloatValue(17.5f), JavaToValueConverter.convertBoxedJavaType(17.5f));\n\t\t\tassertEquals(new DoubleValue(3.1415926), JavaToValueConverter.convertBoxedJavaType(3.1415926));\n\t\t\tassertEquals(new BooleanValue(true), JavaToValueConverter.convertBoxedJavaType(true));\n\t\t\tassertEquals(new CharValue('@'), JavaToValueConverter.convertBoxedJavaType('@'));\n\t\t\t\n\t\t\ttry {\n\t\t\t\tJavaToValueConverter.convertBoxedJavaType(new ArrayList<Object>());\n\t\t\t\tfail(\"Accepted invalid type.\");\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\t// expected\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testJavaToValueConversion()", "full_signature": "@Test public void testJavaToValueConversion()", "class_method_signature": "JavaToValueConverterTest.testJavaToValueConversion()", "testcase": true, "constructor": false, "invocations": ["assertNull", "convertBoxedJavaType", "assertEquals", "convertBoxedJavaType", "assertEquals", "convertBoxedJavaType", "assertEquals", "convertBoxedJavaType", "assertEquals", "convertBoxedJavaType", "assertEquals", "convertBoxedJavaType", "assertEquals", "convertBoxedJavaType", "assertEquals", "convertBoxedJavaType", "assertEquals", "convertBoxedJavaType", "assertEquals", "convertBoxedJavaType", "convertBoxedJavaType", "fail", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "JavaToValueConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convertBoxedJavaType", "parameters": "(Object boxed)", "modifiers": "public static", "return": "Value", "signature": "Value convertBoxedJavaType(Object boxed)", "full_signature": "public static Value convertBoxedJavaType(Object boxed)", "class_method_signature": "JavaToValueConverter.convertBoxedJavaType(Object boxed)", "testcase": false, "constructor": false}, {"identifier": "convertValueType", "parameters": "(Value value)", "modifiers": "public static", "return": "Object", "signature": "Object convertValueType(Value value)", "full_signature": "public static Object convertValueType(Value value)", "class_method_signature": "JavaToValueConverter.convertValueType(Value value)", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/types/JavaToValueConverter.java"}, "focal_method": {"identifier": "convertBoxedJavaType", "parameters": "(Object boxed)", "modifiers": "public static", "return": "Value", "body": "public static Value convertBoxedJavaType(Object boxed) {\n\t\tif (boxed == null) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tfinal Class<?> clazz = boxed.getClass();\n\t\t\n\t\tif (clazz == String.class) {\n\t\t\treturn new StringValue((String) boxed);\n\t\t}\n\t\telse if (clazz == Integer.class) {\n\t\t\treturn new IntValue((Integer) boxed);\n\t\t}\n\t\telse if (clazz == Long.class) {\n\t\t\treturn new LongValue((Long) boxed);\n\t\t}\n\t\telse if (clazz == Double.class) {\n\t\t\treturn new DoubleValue((Double) boxed);\n\t\t}\n\t\telse if (clazz == Float.class) {\n\t\t\treturn new FloatValue((Float) boxed);\n\t\t}\n\t\telse if (clazz == Boolean.class) {\n\t\t\treturn new BooleanValue((Boolean) boxed);\n\t\t}\n\t\telse if (clazz == Byte.class) {\n\t\t\treturn new ByteValue((Byte) boxed);\n\t\t}\n\t\telse if (clazz == Short.class) {\n\t\t\treturn new ShortValue((Short) boxed);\n\t\t}\n\t\telse if (clazz == Character.class) {\n\t\t\treturn new CharValue((Character) boxed);\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Object is no primitive Java type.\");\n\t\t}\n\t}", "signature": "Value convertBoxedJavaType(Object boxed)", "full_signature": "public static Value convertBoxedJavaType(Object boxed)", "class_method_signature": "JavaToValueConverter.convertBoxedJavaType(Object boxed)", "testcase": false, "constructor": false, "invocations": ["getClass"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}