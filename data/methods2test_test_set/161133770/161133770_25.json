{"test_class": {"identifier": "RedisFeatureSinkTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public transient TestPipeline p = TestPipeline.create();", "modifier": "@Rule public transient", "type": "TestPipeline", "declarator": "p = TestPipeline.create()", "var_name": "p"}, {"original_string": "private static String REDIS_HOST = \"localhost\";", "modifier": "private static", "type": "String", "declarator": "REDIS_HOST = \"localhost\"", "var_name": "REDIS_HOST"}, {"original_string": "private static int REDIS_PORT = 51233;", "modifier": "private static", "type": "int", "declarator": "REDIS_PORT = 51233", "var_name": "REDIS_PORT"}, {"original_string": "private static Integer[] REDIS_CLUSTER_PORTS = {6380, 6381, 6382};", "modifier": "private static", "type": "Integer[]", "declarator": "REDIS_CLUSTER_PORTS = {6380, 6381, 6382}", "var_name": "REDIS_CLUSTER_PORTS"}, {"original_string": "private RedisStringCommands<byte[], byte[]> sync;", "modifier": "private", "type": "RedisStringCommands<byte[], byte[]>", "declarator": "sync", "var_name": "sync"}, {"original_string": "private RedisFeatureSink redisFeatureSink;", "modifier": "private", "type": "RedisFeatureSink", "declarator": "redisFeatureSink", "var_name": "redisFeatureSink"}, {"original_string": "private Map<FeatureSetReference, FeatureSetSpec> specMap;", "modifier": "private", "type": "Map<FeatureSetReference, FeatureSetSpec>", "declarator": "specMap", "var_name": "specMap"}, {"original_string": "@Parameterized.Parameter(0)\n  public Redis redisServer;", "modifier": "@Parameterized.Parameter(0)\n  public", "type": "Redis", "declarator": "redisServer", "var_name": "redisServer"}, {"original_string": "@Parameterized.Parameter(1)\n  public AbstractRedisClient redisClient;", "modifier": "@Parameterized.Parameter(1)\n  public", "type": "AbstractRedisClient", "declarator": "redisClient", "var_name": "redisClient"}, {"original_string": "@Parameterized.Parameter(2)\n  public Message redisConfig;", "modifier": "@Parameterized.Parameter(2)\n  public", "type": "Message", "declarator": "redisConfig", "var_name": "redisConfig"}], "file": "storage/connectors/redis/src/test/java/feast/storage/connectors/redis/writer/RedisFeatureSinkTest.java"}, "test_case": {"identifier": "shouldWriteToRedis", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldWriteToRedis() {\n\n    HashMap<RedisKey, FeatureRow> kvs = new LinkedHashMap<>();\n    kvs.put(\n        createRedisKey(\"myproject/fs\", field(\"entity\", 1, Enum.INT64)),\n        createFeatureRow(\n            null, Timestamp.getDefaultInstance(), field(hash(\"feature\"), \"one\", Enum.STRING)));\n    kvs.put(\n        createRedisKey(\"myproject/fs\", field(\"entity\", 2, Enum.INT64)),\n        createFeatureRow(\n            null, Timestamp.getDefaultInstance(), field(hash(\"feature\"), \"two\", Enum.STRING)));\n\n    List<FeatureRow> featureRows =\n        ImmutableList.of(\n            createFeatureRow(\n                \"myproject/fs\",\n                null,\n                field(\"entity\", 1, Enum.INT64),\n                field(\"feature\", \"one\", Enum.STRING)),\n            createFeatureRow(\n                \"myproject/fs\",\n                null,\n                field(\"entity\", 2, Enum.INT64),\n                field(\"feature\", \"two\", Enum.STRING)));\n\n    p.apply(Create.of(featureRows)).apply(redisFeatureSink.writer());\n    p.run();\n\n    kvs.forEach(\n        (key, value) -> {\n          byte[] actual = sync.get(key.toByteArray());\n          assertThat(actual, equalTo(value.toByteArray()));\n        });\n  }", "signature": "void shouldWriteToRedis()", "full_signature": "@Test public void shouldWriteToRedis()", "class_method_signature": "RedisFeatureSinkTest.shouldWriteToRedis()", "testcase": true, "constructor": false, "invocations": ["put", "createRedisKey", "field", "createFeatureRow", "getDefaultInstance", "field", "hash", "put", "createRedisKey", "field", "createFeatureRow", "getDefaultInstance", "field", "hash", "of", "createFeatureRow", "field", "field", "createFeatureRow", "field", "field", "apply", "apply", "of", "writer", "run", "forEach", "get", "toByteArray", "assertThat", "equalTo", "toByteArray"]}, "focal_class": {"identifier": "RedisFeatureSink", "superclass": "", "interfaces": "implements FeatureSink", "fields": [{"original_string": "private static final int DEFAULT_BATCH_SIZE = 10000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_BATCH_SIZE = 10000", "var_name": "DEFAULT_BATCH_SIZE"}, {"original_string": "private static final int DEFAULT_FREQUENCY_SECONDS = 30;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_FREQUENCY_SECONDS = 30", "var_name": "DEFAULT_FREQUENCY_SECONDS"}, {"original_string": "PCollectionView<Map<String, Iterable<FeatureSetSpec>>> specsView;", "modifier": "", "type": "PCollectionView<Map<String, Iterable<FeatureSetSpec>>>", "declarator": "specsView", "var_name": "specsView"}], "methods": [{"identifier": "fromConfig", "parameters": "(RedisConfig redisConfig)", "modifiers": "public static", "return": "FeatureSink", "signature": "FeatureSink fromConfig(RedisConfig redisConfig)", "full_signature": "public static FeatureSink fromConfig(RedisConfig redisConfig)", "class_method_signature": "RedisFeatureSink.fromConfig(RedisConfig redisConfig)", "testcase": false, "constructor": false}, {"identifier": "fromConfig", "parameters": "(RedisClusterConfig redisConfig)", "modifiers": "public static", "return": "FeatureSink", "signature": "FeatureSink fromConfig(RedisClusterConfig redisConfig)", "full_signature": "public static FeatureSink fromConfig(RedisClusterConfig redisConfig)", "class_method_signature": "RedisFeatureSink.fromConfig(RedisClusterConfig redisConfig)", "testcase": false, "constructor": false}, {"identifier": "getRedisConfig", "parameters": "()", "modifiers": "@Nullable public abstract", "return": "RedisConfig", "signature": "RedisConfig getRedisConfig()", "full_signature": "@Nullable public abstract RedisConfig getRedisConfig()", "class_method_signature": "RedisFeatureSink.getRedisConfig()", "testcase": false, "constructor": false}, {"identifier": "getRedisClusterConfig", "parameters": "()", "modifiers": "@Nullable public abstract", "return": "RedisClusterConfig", "signature": "RedisClusterConfig getRedisClusterConfig()", "full_signature": "@Nullable public abstract RedisClusterConfig getRedisClusterConfig()", "class_method_signature": "RedisFeatureSink.getRedisClusterConfig()", "testcase": false, "constructor": false}, {"identifier": "toBuilder", "parameters": "()", "modifiers": "public abstract", "return": "Builder", "signature": "Builder toBuilder()", "full_signature": "public abstract Builder toBuilder()", "class_method_signature": "RedisFeatureSink.toBuilder()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "RedisFeatureSink.builder()", "testcase": false, "constructor": false}, {"identifier": "withSpecsView", "parameters": "(\n      PCollectionView<Map<String, Iterable<FeatureSetSpec>>> specsView)", "modifiers": "public", "return": "RedisFeatureSink", "signature": "RedisFeatureSink withSpecsView(\n      PCollectionView<Map<String, Iterable<FeatureSetSpec>>> specsView)", "full_signature": "public RedisFeatureSink withSpecsView(\n      PCollectionView<Map<String, Iterable<FeatureSetSpec>>> specsView)", "class_method_signature": "RedisFeatureSink.withSpecsView(\n      PCollectionView<Map<String, Iterable<FeatureSetSpec>>> specsView)", "testcase": false, "constructor": false}, {"identifier": "getSpecsView", "parameters": "()", "modifiers": "", "return": "PCollectionView<Map<String, Iterable<FeatureSetSpec>>>", "signature": "PCollectionView<Map<String, Iterable<FeatureSetSpec>>> getSpecsView()", "full_signature": " PCollectionView<Map<String, Iterable<FeatureSetSpec>>> getSpecsView()", "class_method_signature": "RedisFeatureSink.getSpecsView()", "testcase": false, "constructor": false}, {"identifier": "prepareWrite", "parameters": "(\n      PCollection<KV<FeatureSetReference, FeatureSetProto.FeatureSetSpec>> featureSetSpecs)", "modifiers": "@Override public", "return": "PCollection<FeatureSetReference>", "signature": "PCollection<FeatureSetReference> prepareWrite(\n      PCollection<KV<FeatureSetReference, FeatureSetProto.FeatureSetSpec>> featureSetSpecs)", "full_signature": "@Override public PCollection<FeatureSetReference> prepareWrite(\n      PCollection<KV<FeatureSetReference, FeatureSetProto.FeatureSetSpec>> featureSetSpecs)", "class_method_signature": "RedisFeatureSink.prepareWrite(\n      PCollection<KV<FeatureSetReference, FeatureSetProto.FeatureSetSpec>> featureSetSpecs)", "testcase": false, "constructor": false}, {"identifier": "writer", "parameters": "()", "modifiers": "@Override public", "return": "PTransform<PCollection<FeatureRow>, WriteResult>", "signature": "PTransform<PCollection<FeatureRow>, WriteResult> writer()", "full_signature": "@Override public PTransform<PCollection<FeatureRow>, WriteResult> writer()", "class_method_signature": "RedisFeatureSink.writer()", "testcase": false, "constructor": false}], "file": "storage/connectors/redis/src/main/java/feast/storage/connectors/redis/writer/RedisFeatureSink.java"}, "focal_method": {"identifier": "writer", "parameters": "()", "modifiers": "@Override public", "return": "PTransform<PCollection<FeatureRow>, WriteResult>", "body": "@Override\n  public PTransform<PCollection<FeatureRow>, WriteResult> writer() {\n    int flushFrequencySeconds = DEFAULT_FREQUENCY_SECONDS;\n\n    if (getRedisClusterConfig() != null) {\n\n      if (getRedisClusterConfig().getFlushFrequencySeconds() > 0) {\n        flushFrequencySeconds = getRedisClusterConfig().getFlushFrequencySeconds();\n      }\n\n      RedisKeySerializer serializer =\n          new RedisKeyPrefixSerializer(getRedisClusterConfig().getKeyPrefix());\n      return new RedisCustomIO.Write(\n              new RedisClusterIngestionClient(getRedisClusterConfig()), getSpecsView(), serializer)\n          .withFlushFrequency(Duration.standardSeconds(flushFrequencySeconds))\n          .withBatchSize(DEFAULT_BATCH_SIZE);\n\n    } else if (getRedisConfig() != null) {\n      if (getRedisConfig().getFlushFrequencySeconds() > 0) {\n        flushFrequencySeconds = getRedisConfig().getFlushFrequencySeconds();\n      }\n\n      RedisKeySerializer serializer = new RedisKeyProtoSerializer();\n      return new RedisCustomIO.Write(\n              new RedisStandaloneIngestionClient(getRedisConfig()), getSpecsView(), serializer)\n          .withFlushFrequency(Duration.standardSeconds(flushFrequencySeconds))\n          .withBatchSize(DEFAULT_BATCH_SIZE);\n    } else {\n      throw new RuntimeException(\n          \"At least one RedisConfig or RedisClusterConfig must be provided to Redis Sink\");\n    }\n  }", "signature": "PTransform<PCollection<FeatureRow>, WriteResult> writer()", "full_signature": "@Override public PTransform<PCollection<FeatureRow>, WriteResult> writer()", "class_method_signature": "RedisFeatureSink.writer()", "testcase": false, "constructor": false, "invocations": ["getRedisClusterConfig", "getFlushFrequencySeconds", "getRedisClusterConfig", "getFlushFrequencySeconds", "getRedisClusterConfig", "getKeyPrefix", "getRedisClusterConfig", "withBatchSize", "withFlushFrequency", "getRedisClusterConfig", "getSpecsView", "standardSeconds", "getRedisConfig", "getFlushFrequencySeconds", "getRedisConfig", "getFlushFrequencySeconds", "getRedisConfig", "withBatchSize", "withFlushFrequency", "getRedisConfig", "getSpecsView", "standardSeconds"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}