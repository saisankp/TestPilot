{"test_class": {"identifier": "DXSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private DXProject testProject;", "modifier": "private", "type": "DXProject", "declarator": "testProject", "var_name": "testProject"}], "file": "src/java/src/test/java/com/dnanexus/DXSearchTest.java"}, "test_case": {"identifier": "testFindExecutionsWithPaging", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindExecutionsWithPaging() {\n        if (!TestEnvironment.canRunTest(ConfigOption.RUN_JOBS)) {\n            System.err.println(\"Skipping test that would run jobs\");\n            return;\n        }\n\n        DXApplet applet = createMinimalApplet();\n\n        // A sample input: {input_string: \"java\"}\n        SampleAppInput appInput = new SampleAppInput(\"java\");\n\n        // Instantiate to create a bunch of jobs, and save them\n        List<DXJob> jobs = Lists.newArrayList();\n        for (int i = 0; i < 8; ++i) {\n            jobs.add(applet.newRun().setInput(appInput).setProject(testProject)\n                    .setName(\"javaFindExecutionsPagingTest\").run());\n        }\n\n        // Set a small page size\n        assertEqualsAnyOrder(\n                DXSearch.findExecutions().inProject(testProject)\n                        .nameMatchesExactly(\"javaFindExecutionsPagingTest\").execute(3),\n                jobs.toArray(new DXJob[0]));\n        // Page size is a multiple of the number of results\n        assertEqualsAnyOrder(\n                DXSearch.findExecutions().inProject(testProject)\n                        .nameMatchesExactly(\"javaFindExecutionsPagingTest\").execute(4),\n                jobs.toArray(new DXJob[0]));\n    }", "signature": "void testFindExecutionsWithPaging()", "full_signature": "@Test public void testFindExecutionsWithPaging()", "class_method_signature": "DXSearchTest.testFindExecutionsWithPaging()", "testcase": true, "constructor": false, "invocations": ["canRunTest", "println", "createMinimalApplet", "newArrayList", "add", "run", "setName", "setProject", "setInput", "newRun", "assertEqualsAnyOrder", "execute", "nameMatchesExactly", "inProject", "findExecutions", "toArray", "assertEqualsAnyOrder", "execute", "nameMatchesExactly", "inProject", "findExecutions", "toArray"]}, "focal_class": {"identifier": "DXSearch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper()", "var_name": "MAPPER"}], "methods": [{"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false}, {"identifier": "findDataObjectsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findDataObjectsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findExecutions", "parameters": "()", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutions()", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions()", "class_method_signature": "DXSearch.findExecutions()", "testcase": false, "constructor": false}, {"identifier": "findExecutionsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findExecutionsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findJobs", "parameters": "()", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobs()", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobs()", "class_method_signature": "DXSearch.findJobs()", "testcase": false, "constructor": false}, {"identifier": "findJobsWithEnvironment", "parameters": "(DXEnvironment env)", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "class_method_signature": "DXSearch.findJobsWithEnvironment(DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "serializeCompoundQuery", "parameters": "(String operator, List<? extends Object> operands)", "modifiers": "private static", "return": "JsonNode", "signature": "JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "full_signature": "private static JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "class_method_signature": "DXSearch.serializeCompoundQuery(String operator, List<? extends Object> operands)", "testcase": false, "constructor": false}, {"identifier": "DXSearch", "parameters": "()", "modifiers": "private", "return": "", "signature": " DXSearch()", "full_signature": "private  DXSearch()", "class_method_signature": "DXSearch.DXSearch()", "testcase": false, "constructor": true}], "file": "src/java/src/main/java/com/dnanexus/DXSearch.java"}, "focal_method": {"identifier": "findExecutions", "parameters": "()", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "body": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions() {\n        return new FindExecutionsRequestBuilder<DXExecution>();\n    }", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutions()", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions()", "class_method_signature": "DXSearch.findExecutions()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4802269, "url": "https://github.com/dnanexus/dx-toolkit", "stars": 59, "created": "6/27/2012 12:23:47 AM +00:00", "updates": "2020-01-21T16:35:18+00:00", "fork": "False", "license": "licensed"}}