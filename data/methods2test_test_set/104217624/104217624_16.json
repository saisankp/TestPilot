{"test_class": {"identifier": "RrdpParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/rrdp/RrdpParserTest.java"}, "test_case": {"identifier": "should_parse_notification", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_parse_notification() throws Exception {\n        final Notification notification = new RrdpParser().notification(fileIS(\"rrdp/notification1.xml\"));\n        assertEquals(\"9df4b597-af9e-4dca-bdda-719cce2c4e28\", notification.sessionId);\n        assertEquals(\"http://repo.net/repo/snapshot.xml\", notification.snapshotUri);\n        assertEquals(\"EEEA7F7AD96D85BBD1F7274FA7DA0025984A2AF3D5A0538F77BEC732ECB1B068\", notification.snapshotHash);\n        assertEquals(BigInteger.ONE, notification.serial);\n        assertEquals(0, notification.deltas.size());\n    }", "signature": "void should_parse_notification()", "full_signature": "@Test public void should_parse_notification()", "class_method_signature": "RrdpParserTest.should_parse_notification()", "testcase": true, "constructor": false, "invocations": ["notification", "fileIS", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "size"]}, "focal_class": {"identifier": "RrdpParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseSnapshot", "parameters": "(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "modifiers": "public", "return": "void", "signature": "void parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "full_signature": "public void parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "class_method_signature": "RrdpParser.parseSnapshot(InputStream inputStream, Consumer<SnapshotHeader> processSnapshotHeader, Consumer<SnapshotObject> processSnapshotObject)", "testcase": false, "constructor": false}, {"identifier": "parseDelta", "parameters": "(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "modifiers": "public", "return": "void", "signature": "void parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "full_signature": "public void parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "class_method_signature": "RrdpParser.parseDelta(InputStream inputStream, Consumer<DeltaHeader> processDeltaHeader, Consumer<DeltaElement> processDeltaElement)", "testcase": false, "constructor": false}, {"identifier": "notification", "parameters": "(final InputStream inputStream)", "modifiers": "public", "return": "Notification", "signature": "Notification notification(final InputStream inputStream)", "full_signature": "public Notification notification(final InputStream inputStream)", "class_method_signature": "RrdpParser.notification(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getAttr", "parameters": "(final StartElement startElement, final String attrName, final String noAttrMessage)", "modifiers": "private", "return": "String", "signature": "String getAttr(final StartElement startElement, final String attrName, final String noAttrMessage)", "full_signature": "private String getAttr(final StartElement startElement, final String attrName, final String noAttrMessage)", "class_method_signature": "RrdpParser.getAttr(final StartElement startElement, final String attrName, final String noAttrMessage)", "testcase": false, "constructor": false}, {"identifier": "getAttr", "parameters": "(final StartElement startElement, final String attrName)", "modifiers": "private", "return": "String", "signature": "String getAttr(final StartElement startElement, final String attrName)", "full_signature": "private String getAttr(final StartElement startElement, final String attrName)", "class_method_signature": "RrdpParser.getAttr(final StartElement startElement, final String attrName)", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/rrdp/RrdpParser.java"}, "focal_method": {"identifier": "notification", "parameters": "(final InputStream inputStream)", "modifiers": "public", "return": "Notification", "body": "public Notification notification(final InputStream inputStream) {\n        try {\n            final XMLInputFactory factory = XMLInputFactory.newInstance();\n            final XMLEventReader eventReader = factory.createXMLEventReader(inputStream);\n\n            String sessionId = null;\n            BigInteger serial = null;\n            String snapshotUri = null;\n            String snapshotHash = null;\n            final List<DeltaInfo> deltas = new ArrayList<>();\n\n            while (eventReader.hasNext()) {\n                final XMLEvent event = eventReader.nextEvent();\n\n                if (event.getEventType() == XMLStreamConstants.START_ELEMENT) {\n                    final StartElement startElement = event.asStartElement();\n                    final String qName = startElement.getName().getLocalPart();\n\n                    switch (qName) {\n                        case \"notification\":\n                            serial = new BigInteger(getAttr(startElement, \"serial\", \"Notification serial is not present\"));\n                            sessionId = getAttr(startElement, \"session_id\", \"Session id is not present\");\n                            break;\n                        case \"snapshot\":\n                            snapshotUri = getAttr(startElement, \"uri\", \"Snapshot URI is not present\");\n                            snapshotHash = getAttr(startElement, \"hash\", \"Snapshot hash is not present\");\n                            break;\n                        case \"delta\":\n                            final String deltaUri = getAttr(startElement, \"uri\", \"Delta URI is not present\");\n                            final String deltaHash = getAttr(startElement, \"hash\", \"Delta hash is not present\");\n                            final String deltaSerial = getAttr(startElement, \"serial\", \"Delta serial is not present\");\n                            deltas.add(new DeltaInfo(deltaUri, deltaHash, new BigInteger(deltaSerial)));\n                            break;\n                    }\n                }\n            }\n            return new Notification(sessionId, serial, snapshotUri, snapshotHash, deltas);\n        } catch (XMLStreamException e) {\n            throw new RrdpException(\"Couldn't parse notification: \", e);\n        }\n    }", "signature": "Notification notification(final InputStream inputStream)", "full_signature": "public Notification notification(final InputStream inputStream)", "class_method_signature": "RrdpParser.notification(final InputStream inputStream)", "testcase": false, "constructor": false, "invocations": ["newInstance", "createXMLEventReader", "hasNext", "nextEvent", "getEventType", "asStartElement", "getLocalPart", "getName", "getAttr", "getAttr", "getAttr", "getAttr", "getAttr", "getAttr", "getAttr", "add"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}