{"test_class": {"identifier": "BinaryTreeInOrderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BinaryTreeInOrder binaryTreeInOrder;", "modifier": "private", "type": "BinaryTreeInOrder", "declarator": "binaryTreeInOrder", "var_name": "binaryTreeInOrder"}], "file": "algs/src/test/java/com/github/pedrovgs/problem15/BinaryTreeInOrderTest.java"}, "test_case": {"identifier": "shouldReturnBinaryNodesInPreOrderRecursive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnBinaryNodesInPreOrderRecursive() {\n    BinaryNode<Integer> root = new BinaryNode<Integer>(0);\n    BinaryNode<Integer> n1 = new BinaryNode<Integer>(1);\n    BinaryNode<Integer> n2 = new BinaryNode<Integer>(2);\n    BinaryNode<Integer> n3 = new BinaryNode<Integer>(3);\n    BinaryNode<Integer> n4 = new BinaryNode<Integer>(4);\n\n    root.setLeft(n1);\n    root.setRight(n2);\n    n1.setLeft(n3);\n    n1.setRight(n4);\n\n    List<BinaryNode<Integer>> result = binaryTreeInOrder.getRecursive(root);\n\n    List<BinaryNode<Integer>> expected = Arrays.asList(n3, n1, n4, root, n2);\n    assertEquals(expected, result);\n  }", "signature": "void shouldReturnBinaryNodesInPreOrderRecursive()", "full_signature": "@Test public void shouldReturnBinaryNodesInPreOrderRecursive()", "class_method_signature": "BinaryTreeInOrderTest.shouldReturnBinaryNodesInPreOrderRecursive()", "testcase": true, "constructor": false, "invocations": ["setLeft", "setRight", "setLeft", "setRight", "getRecursive", "asList", "assertEquals"]}, "focal_class": {"identifier": "BinaryTreeInOrder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getRecursive", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode<Integer>>", "signature": "List<BinaryNode<Integer>> getRecursive(BinaryNode root)", "full_signature": "public List<BinaryNode<Integer>> getRecursive(BinaryNode root)", "class_method_signature": "BinaryTreeInOrder.getRecursive(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getInner", "parameters": "(BinaryNode<Integer> root)", "modifiers": "private", "return": "List<BinaryNode<Integer>>", "signature": "List<BinaryNode<Integer>> getInner(BinaryNode<Integer> root)", "full_signature": "private List<BinaryNode<Integer>> getInner(BinaryNode<Integer> root)", "class_method_signature": "BinaryTreeInOrder.getInner(BinaryNode<Integer> root)", "testcase": false, "constructor": false}, {"identifier": "getIterative", "parameters": "(BinaryNode<Integer> root)", "modifiers": "public", "return": "List<BinaryNode<Integer>>", "signature": "List<BinaryNode<Integer>> getIterative(BinaryNode<Integer> root)", "full_signature": "public List<BinaryNode<Integer>> getIterative(BinaryNode<Integer> root)", "class_method_signature": "BinaryTreeInOrder.getIterative(BinaryNode<Integer> root)", "testcase": false, "constructor": false}, {"identifier": "validateBinaryNode", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "void", "signature": "void validateBinaryNode(BinaryNode root)", "full_signature": "private void validateBinaryNode(BinaryNode root)", "class_method_signature": "BinaryTreeInOrder.validateBinaryNode(BinaryNode root)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem15/BinaryTreeInOrder.java"}, "focal_method": {"identifier": "getRecursive", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode<Integer>>", "body": "public List<BinaryNode<Integer>> getRecursive(BinaryNode root) {\n    validateBinaryNode(root);\n\n    return getInner(root);\n  }", "signature": "List<BinaryNode<Integer>> getRecursive(BinaryNode root)", "full_signature": "public List<BinaryNode<Integer>> getRecursive(BinaryNode root)", "class_method_signature": "BinaryTreeInOrder.getRecursive(BinaryNode root)", "testcase": false, "constructor": false, "invocations": ["validateBinaryNode", "getInner"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}