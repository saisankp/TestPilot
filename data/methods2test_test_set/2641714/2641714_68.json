{"test_class": {"identifier": "AddAttributeModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AddAttributeModel model;", "modifier": "private", "type": "AddAttributeModel", "declarator": "model", "var_name": "model"}], "file": "tiles-template/src/test/java/org/apache/tiles/template/AddAttributeModelTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws IOException {\n        Request request = createMock(Request.class);\n        ModelBody modelBody = createMock(ModelBody.class);\n        Deque<Object> composeStack = new ArrayDeque<Object>();\n        ListAttribute listAttribute = new ListAttribute();\n        Attribute attribute;\n        composeStack.push(listAttribute);\n        Map<String, Object> requestScope = new HashMap<String, Object>();\n        requestScope.put(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME, composeStack);\n\n        expect(request.getContext(\"request\")).andReturn(requestScope).times(2);\n        expect(modelBody.evaluateAsString()).andReturn(null);\n        expect(modelBody.evaluateAsString()).andReturn(\"myBody\");\n\n        replay(request, modelBody);\n        model.execute(\"myValue\", \"myExpression\", \"myRole\", \"myType\",\n                request, modelBody);\n        List<Attribute> attributes = listAttribute.getValue();\n        assertEquals(1, attributes.size());\n        attribute = attributes.iterator().next();\n        assertEquals(\"myValue\", attribute.getValue());\n        assertEquals(\"myExpression\", attribute.getExpressionObject().getExpression());\n        assertEquals(\"myRole\", attribute.getRole());\n        assertEquals(\"myType\", attribute.getRenderer());\n\n        composeStack.clear();\n        listAttribute = new ListAttribute();\n        attribute = new Attribute();\n        composeStack.push(listAttribute);\n        composeStack.push(attribute);\n\n        model.execute(null, \"myExpression\", \"myRole\", \"myType\", request,\n                modelBody);\n        attributes = listAttribute.getValue();\n        assertEquals(1, attributes.size());\n        attribute = attributes.iterator().next();\n        assertEquals(\"myBody\", attribute.getValue());\n        assertEquals(\"myExpression\", attribute.getExpressionObject()\n                .getExpression());\n        assertEquals(\"myRole\", attribute.getRole());\n        assertEquals(\"myType\", attribute.getRenderer());\n        verify(request, modelBody);\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "AddAttributeModelTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "push", "put", "times", "andReturn", "expect", "getContext", "andReturn", "expect", "evaluateAsString", "andReturn", "expect", "evaluateAsString", "replay", "execute", "getValue", "assertEquals", "size", "next", "iterator", "assertEquals", "getValue", "assertEquals", "getExpression", "getExpressionObject", "assertEquals", "getRole", "assertEquals", "getRenderer", "clear", "push", "push", "execute", "getValue", "assertEquals", "size", "next", "iterator", "assertEquals", "getValue", "assertEquals", "getExpression", "getExpressionObject", "assertEquals", "getRole", "assertEquals", "getRenderer", "verify"]}, "focal_class": {"identifier": "AddAttributeModel", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "execute", "parameters": "(Object value, String expression, String role,\n            String type, Request request, ModelBody modelBody)", "modifiers": "public", "return": "void", "signature": "void execute(Object value, String expression, String role,\n            String type, Request request, ModelBody modelBody)", "full_signature": "public void execute(Object value, String expression, String role,\n            String type, Request request, ModelBody modelBody)", "class_method_signature": "AddAttributeModel.execute(Object value, String expression, String role,\n            String type, Request request, ModelBody modelBody)", "testcase": false, "constructor": false}, {"identifier": "addAttributeToList", "parameters": "(Attribute attribute,\n            Deque<Object> composeStack, Object value, String expression,\n            String body, String role, String type)", "modifiers": "private", "return": "void", "signature": "void addAttributeToList(Attribute attribute,\n            Deque<Object> composeStack, Object value, String expression,\n            String body, String role, String type)", "full_signature": "private void addAttributeToList(Attribute attribute,\n            Deque<Object> composeStack, Object value, String expression,\n            String body, String role, String type)", "class_method_signature": "AddAttributeModel.addAttributeToList(Attribute attribute,\n            Deque<Object> composeStack, Object value, String expression,\n            String body, String role, String type)", "testcase": false, "constructor": false}], "file": "tiles-template/src/main/java/org/apache/tiles/template/AddAttributeModel.java"}, "focal_method": {"identifier": "execute", "parameters": "(Object value, String expression, String role,\n            String type, Request request, ModelBody modelBody)", "modifiers": "public", "return": "void", "body": "public void execute(Object value, String expression, String role,\n            String type, Request request, ModelBody modelBody)\n            throws IOException {\n        Attribute attribute = new Attribute();\n        Deque<Object> composeStack = ComposeStackUtil.getComposeStack(request);\n        composeStack.push(attribute);\n        String body = modelBody.evaluateAsString();\n        attribute = (Attribute) composeStack.pop();\n        addAttributeToList(attribute, composeStack, value, expression, body,\n                role, type);\n    }", "signature": "void execute(Object value, String expression, String role,\n            String type, Request request, ModelBody modelBody)", "full_signature": "public void execute(Object value, String expression, String role,\n            String type, Request request, ModelBody modelBody)", "class_method_signature": "AddAttributeModel.execute(Object value, String expression, String role,\n            String type, Request request, ModelBody modelBody)", "testcase": false, "constructor": false, "invocations": ["getComposeStack", "push", "evaluateAsString", "pop", "addAttributeToList"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}