{"test_class": {"identifier": "ConfigurableServiceUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core.config.core/src/test/java/org/openhab/core/config/core/ConfigurableServiceUtilTest.java"}, "test_case": {"identifier": "asConfigurableServiceUndefinedProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void asConfigurableServiceUndefinedProperties() {\n        Properties properties = new Properties();\n\n        ConfigurableService configurableService = ConfigurableServiceUtil\n                .asConfigurableService((key) -> properties.get(key));\n\n        assertThat(configurableService.annotationType(), is(ConfigurableService.class));\n        assertThat(configurableService.category(), is(emptyString()));\n        assertThat(configurableService.description_uri(), is(emptyString()));\n        assertThat(configurableService.factory(), is(false));\n        assertThat(configurableService.label(), is(emptyString()));\n    }", "signature": "void asConfigurableServiceUndefinedProperties()", "full_signature": "@Test public void asConfigurableServiceUndefinedProperties()", "class_method_signature": "ConfigurableServiceUtilTest.asConfigurableServiceUndefinedProperties()", "testcase": true, "constructor": false, "invocations": ["asConfigurableService", "get", "assertThat", "annotationType", "is", "assertThat", "category", "is", "emptyString", "assertThat", "description_uri", "is", "emptyString", "assertThat", "factory", "is", "assertThat", "label", "is", "emptyString"]}, "focal_class": {"identifier": "ConfigurableServiceUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String SERVICE_PROPERTY_DESCRIPTION_URI = ConfigurableService.PREFIX_ + \"description.uri\";", "modifier": "static final", "type": "String", "declarator": "SERVICE_PROPERTY_DESCRIPTION_URI = ConfigurableService.PREFIX_ + \"description.uri\"", "var_name": "SERVICE_PROPERTY_DESCRIPTION_URI"}, {"original_string": "static final String SERVICE_PROPERTY_LABEL = ConfigurableService.PREFIX_ + \"label\";", "modifier": "static final", "type": "String", "declarator": "SERVICE_PROPERTY_LABEL = ConfigurableService.PREFIX_ + \"label\"", "var_name": "SERVICE_PROPERTY_LABEL"}, {"original_string": "static final String SERVICE_PROPERTY_CATEGORY = ConfigurableService.PREFIX_ + \"category\";", "modifier": "static final", "type": "String", "declarator": "SERVICE_PROPERTY_CATEGORY = ConfigurableService.PREFIX_ + \"category\"", "var_name": "SERVICE_PROPERTY_CATEGORY"}, {"original_string": "static final String SERVICE_PROPERTY_FACTORY_SERVICE = ConfigurableService.PREFIX_ + \"factory\";", "modifier": "static final", "type": "String", "declarator": "SERVICE_PROPERTY_FACTORY_SERVICE = ConfigurableService.PREFIX_ + \"factory\"", "var_name": "SERVICE_PROPERTY_FACTORY_SERVICE"}, {"original_string": "public static final String CONFIGURABLE_SERVICE_FILTER = \"(&(\" + SERVICE_PROPERTY_DESCRIPTION_URI + \"=*)(!(\"\n            + SERVICE_PROPERTY_FACTORY_SERVICE + \"=*)))\";", "modifier": "public static final", "type": "String", "declarator": "CONFIGURABLE_SERVICE_FILTER = \"(&(\" + SERVICE_PROPERTY_DESCRIPTION_URI + \"=*)(!(\"\n            + SERVICE_PROPERTY_FACTORY_SERVICE + \"=*)))\"", "var_name": "CONFIGURABLE_SERVICE_FILTER"}, {"original_string": "public static final String CONFIGURABLE_MULTI_CONFIG_SERVICE_FILTER = \"(\" + SERVICE_PROPERTY_FACTORY_SERVICE\n            + \"=*)\";", "modifier": "public static final", "type": "String", "declarator": "CONFIGURABLE_MULTI_CONFIG_SERVICE_FILTER = \"(\" + SERVICE_PROPERTY_FACTORY_SERVICE\n            + \"=*)\"", "var_name": "CONFIGURABLE_MULTI_CONFIG_SERVICE_FILTER"}], "methods": [{"identifier": "asConfigurableService", "parameters": "(Function<String, @Nullable Object> propertyResolver)", "modifiers": "public static", "return": "ConfigurableService", "signature": "ConfigurableService asConfigurableService(Function<String, @Nullable Object> propertyResolver)", "full_signature": "public static ConfigurableService asConfigurableService(Function<String, @Nullable Object> propertyResolver)", "class_method_signature": "ConfigurableServiceUtil.asConfigurableService(Function<String, @Nullable Object> propertyResolver)", "testcase": false, "constructor": false}, {"identifier": "resolveString", "parameters": "(Function<String, @Nullable Object> propertyResolver, String key)", "modifiers": "private static", "return": "String", "signature": "String resolveString(Function<String, @Nullable Object> propertyResolver, String key)", "full_signature": "private static String resolveString(Function<String, @Nullable Object> propertyResolver, String key)", "class_method_signature": "ConfigurableServiceUtil.resolveString(Function<String, @Nullable Object> propertyResolver, String key)", "testcase": false, "constructor": false}, {"identifier": "resolveBoolean", "parameters": "(Function<String, @Nullable Object> propertyResolver, String key)", "modifiers": "private static", "return": "boolean", "signature": "boolean resolveBoolean(Function<String, @Nullable Object> propertyResolver, String key)", "full_signature": "private static boolean resolveBoolean(Function<String, @Nullable Object> propertyResolver, String key)", "class_method_signature": "ConfigurableServiceUtil.resolveBoolean(Function<String, @Nullable Object> propertyResolver, String key)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.config.core/src/main/java/org/openhab/core/config/core/ConfigurableServiceUtil.java"}, "focal_method": {"identifier": "asConfigurableService", "parameters": "(Function<String, @Nullable Object> propertyResolver)", "modifiers": "public static", "return": "ConfigurableService", "body": "public static ConfigurableService asConfigurableService(Function<String, @Nullable Object> propertyResolver) {\n        return new ConfigurableService() {\n            @Override\n            public Class<? extends Annotation> annotationType() {\n                return ConfigurableService.class;\n            }\n\n            @Override\n            public String label() {\n                return resolveString(propertyResolver, SERVICE_PROPERTY_LABEL);\n            }\n\n            @Override\n            public boolean factory() {\n                return resolveBoolean(propertyResolver, SERVICE_PROPERTY_FACTORY_SERVICE);\n            }\n\n            @Override\n            public String description_uri() {\n                return resolveString(propertyResolver, SERVICE_PROPERTY_DESCRIPTION_URI);\n            }\n\n            @Override\n            public String category() {\n                return resolveString(propertyResolver, SERVICE_PROPERTY_CATEGORY);\n            }\n        };\n    }", "signature": "ConfigurableService asConfigurableService(Function<String, @Nullable Object> propertyResolver)", "full_signature": "public static ConfigurableService asConfigurableService(Function<String, @Nullable Object> propertyResolver)", "class_method_signature": "ConfigurableServiceUtil.asConfigurableService(Function<String, @Nullable Object> propertyResolver)", "testcase": false, "constructor": false, "invocations": ["resolveString", "resolveBoolean", "resolveString", "resolveString"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}