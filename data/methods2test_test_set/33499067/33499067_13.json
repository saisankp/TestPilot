{"test_class": {"identifier": "GattSerialTransportProfileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "BluetoothGattService mockSerialService;", "modifier": "", "type": "BluetoothGattService", "declarator": "mockSerialService", "var_name": "mockSerialService"}, {"original_string": "BluetoothGattService mockScratchService;", "modifier": "", "type": "BluetoothGattService", "declarator": "mockScratchService", "var_name": "mockScratchService"}, {"original_string": "BluetoothGattCharacteristic mockChar;", "modifier": "", "type": "BluetoothGattCharacteristic", "declarator": "mockChar", "var_name": "mockChar"}, {"original_string": "GattClient mockGattClient;", "modifier": "", "type": "GattClient", "declarator": "mockGattClient", "var_name": "mockGattClient"}, {"original_string": "Handler mockHandler;", "modifier": "", "type": "Handler", "declarator": "mockHandler", "var_name": "mockHandler"}, {"original_string": "GattSerialTransportProfile.SerialListener mockListener;", "modifier": "", "type": "GattSerialTransportProfile.SerialListener", "declarator": "mockListener", "var_name": "mockListener"}, {"original_string": "GattSerialTransportProfile gstp;", "modifier": "", "type": "GattSerialTransportProfile", "declarator": "gstp", "var_name": "gstp"}], "file": "sdk/src/test/java/com/punchthrough/bean/sdk/internal/serial/GattSerialTransportProfileTest.java"}, "test_case": {"identifier": "testOnCharacteristicChanged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnCharacteristicChanged() throws NoEnumFoundException {\n        // More setup\n        byte[] value = {1, 2, 3};\n        int index = 1;\n        ScratchBank bank = EnumParse.enumWithRawValue(ScratchBank.class, index);\n        gstp.setListener(mockListener);\n        BluetoothGattCharacteristic mockChar = mock(BluetoothGattCharacteristic.class);\n        when(mockChar.getUuid()).thenReturn(Constants.UUID_SCRATCH_CHAR_1);\n        when(mockChar.getValue()).thenReturn(value);\n\n        // Test and verify\n        gstp.onCharacteristicChanged(mockGattClient, mockChar);\n        verify(mockListener).onScratchValueChanged(bank, value);\n    }", "signature": "void testOnCharacteristicChanged()", "full_signature": "@Test public void testOnCharacteristicChanged()", "class_method_signature": "GattSerialTransportProfileTest.testOnCharacteristicChanged()", "testcase": true, "constructor": false, "invocations": ["enumWithRawValue", "setListener", "mock", "thenReturn", "when", "getUuid", "thenReturn", "when", "getValue", "onCharacteristicChanged", "onScratchValueChanged", "verify"]}, "focal_class": {"identifier": "GattSerialTransportProfile", "superclass": "extends BaseProfile", "interfaces": "", "fields": [{"original_string": "protected static final String TAG = \"GattSerialXportProfile\";", "modifier": "protected static final", "type": "String", "declarator": "TAG = \"GattSerialXportProfile\"", "var_name": "TAG"}, {"original_string": "public static final int PACKET_TX_MAX_PAYLOAD_LENGTH = 19;", "modifier": "public static final", "type": "int", "declarator": "PACKET_TX_MAX_PAYLOAD_LENGTH = 19", "var_name": "PACKET_TX_MAX_PAYLOAD_LENGTH"}, {"original_string": "private static final List<UUID> BEAN_SCRATCH_UUIDS = Arrays.asList(\n            Constants.UUID_SCRATCH_CHAR_1,\n            Constants.UUID_SCRATCH_CHAR_2,\n            Constants.UUID_SCRATCH_CHAR_3,\n            Constants.UUID_SCRATCH_CHAR_4,\n            Constants.UUID_SCRATCH_CHAR_5\n    );", "modifier": "private static final", "type": "List<UUID>", "declarator": "BEAN_SCRATCH_UUIDS = Arrays.asList(\n            Constants.UUID_SCRATCH_CHAR_1,\n            Constants.UUID_SCRATCH_CHAR_2,\n            Constants.UUID_SCRATCH_CHAR_3,\n            Constants.UUID_SCRATCH_CHAR_4,\n            Constants.UUID_SCRATCH_CHAR_5\n    )", "var_name": "BEAN_SCRATCH_UUIDS"}, {"original_string": "private SerialListener mListener;", "modifier": "private", "type": "SerialListener", "declarator": "mListener", "var_name": "mListener"}, {"original_string": "private BluetoothGattCharacteristic mSerialCharacteristic;", "modifier": "private", "type": "BluetoothGattCharacteristic", "declarator": "mSerialCharacteristic", "var_name": "mSerialCharacteristic"}, {"original_string": "private Handler mHandler;", "modifier": "private", "type": "Handler", "declarator": "mHandler", "var_name": "mHandler"}, {"original_string": "private MessageAssembler mMessageAssembler = new MessageAssembler();", "modifier": "private", "type": "MessageAssembler", "declarator": "mMessageAssembler = new MessageAssembler()", "var_name": "mMessageAssembler"}, {"original_string": "private boolean ready = false;", "modifier": "private", "type": "boolean", "declarator": "ready = false", "var_name": "ready"}, {"original_string": "private boolean mReadyToSend = false;", "modifier": "private", "type": "boolean", "declarator": "mReadyToSend = false", "var_name": "mReadyToSend"}, {"original_string": "private List<GattSerialPacket> mPendingPackets = new ArrayList<>(32);", "modifier": "private", "type": "List<GattSerialPacket>", "declarator": "mPendingPackets = new ArrayList<>(32)", "var_name": "mPendingPackets"}, {"original_string": "private int mOutgoingMessageCount = 0;", "modifier": "private", "type": "int", "declarator": "mOutgoingMessageCount = 0", "var_name": "mOutgoingMessageCount"}, {"original_string": "private final Runnable mDequeueRunnable = new Runnable() {\n        @Override\n        public void run() {\n            if (!mPendingPackets.isEmpty()) {\n                if (mReadyToSend && mSerialCharacteristic != null) {\n                    mReadyToSend = false;\n                    GattSerialPacket packet = mPendingPackets.remove(0);\n                    mSerialCharacteristic.setValue(packet.getPacketData());\n                    if (!mGattClient.writeCharacteristic(mSerialCharacteristic)) {\n                        Log.e(TAG, \"Failed char write\");\n                    }\n                } else {\n                    mHandler.postDelayed(this, 150);\n                }\n            }\n        }\n    };", "modifier": "private final", "type": "Runnable", "declarator": "mDequeueRunnable = new Runnable() {\n        @Override\n        public void run() {\n            if (!mPendingPackets.isEmpty()) {\n                if (mReadyToSend && mSerialCharacteristic != null) {\n                    mReadyToSend = false;\n                    GattSerialPacket packet = mPendingPackets.remove(0);\n                    mSerialCharacteristic.setValue(packet.getPacketData());\n                    if (!mGattClient.writeCharacteristic(mSerialCharacteristic)) {\n                        Log.e(TAG, \"Failed char write\");\n                    }\n                } else {\n                    mHandler.postDelayed(this, 150);\n                }\n            }\n        }\n    }", "var_name": "mDequeueRunnable"}], "methods": [{"identifier": "GattSerialTransportProfile", "parameters": "(GattClient client, Handler handler)", "modifiers": "public", "return": "", "signature": " GattSerialTransportProfile(GattClient client, Handler handler)", "full_signature": "public  GattSerialTransportProfile(GattClient client, Handler handler)", "class_method_signature": "GattSerialTransportProfile.GattSerialTransportProfile(GattClient client, Handler handler)", "testcase": false, "constructor": true}, {"identifier": "onProfileReady", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onProfileReady()", "full_signature": "@Override public void onProfileReady()", "class_method_signature": "GattSerialTransportProfile.onProfileReady()", "testcase": false, "constructor": false}, {"identifier": "onCharacteristicWrite", "parameters": "(GattClient client, BluetoothGattCharacteristic characteristic)", "modifiers": "@Override public", "return": "void", "signature": "void onCharacteristicWrite(GattClient client, BluetoothGattCharacteristic characteristic)", "full_signature": "@Override public void onCharacteristicWrite(GattClient client, BluetoothGattCharacteristic characteristic)", "class_method_signature": "GattSerialTransportProfile.onCharacteristicWrite(GattClient client, BluetoothGattCharacteristic characteristic)", "testcase": false, "constructor": false}, {"identifier": "onCharacteristicChanged", "parameters": "(GattClient client, BluetoothGattCharacteristic characteristic)", "modifiers": "@Override public", "return": "void", "signature": "void onCharacteristicChanged(GattClient client, BluetoothGattCharacteristic characteristic)", "full_signature": "@Override public void onCharacteristicChanged(GattClient client, BluetoothGattCharacteristic characteristic)", "class_method_signature": "GattSerialTransportProfile.onCharacteristicChanged(GattClient client, BluetoothGattCharacteristic characteristic)", "testcase": false, "constructor": false}, {"identifier": "onReadRemoteRssi", "parameters": "(GattClient client, int rssi)", "modifiers": "@Override public", "return": "void", "signature": "void onReadRemoteRssi(GattClient client, int rssi)", "full_signature": "@Override public void onReadRemoteRssi(GattClient client, int rssi)", "class_method_signature": "GattSerialTransportProfile.onReadRemoteRssi(GattClient client, int rssi)", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "(String message)", "modifiers": "public", "return": "void", "signature": "void abort(String message)", "full_signature": "public void abort(String message)", "class_method_signature": "GattSerialTransportProfile.abort(String message)", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(Buffer message)", "modifiers": "public", "return": "void", "signature": "void sendMessage(Buffer message)", "full_signature": "public void sendMessage(Buffer message)", "class_method_signature": "GattSerialTransportProfile.sendMessage(Buffer message)", "testcase": false, "constructor": false}, {"identifier": "setListener", "parameters": "(SerialListener listener)", "modifiers": "public", "return": "void", "signature": "void setListener(SerialListener listener)", "full_signature": "public void setListener(SerialListener listener)", "class_method_signature": "GattSerialTransportProfile.setListener(SerialListener listener)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "GattSerialTransportProfile.getName()", "testcase": false, "constructor": false}, {"identifier": "isReady", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReady()", "full_signature": "public boolean isReady()", "class_method_signature": "GattSerialTransportProfile.isReady()", "testcase": false, "constructor": false}, {"identifier": "clearReady", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearReady()", "full_signature": "public void clearReady()", "class_method_signature": "GattSerialTransportProfile.clearReady()", "testcase": false, "constructor": false}], "file": "sdk/src/main/java/com/punchthrough/bean/sdk/internal/serial/GattSerialTransportProfile.java"}, "focal_method": {"identifier": "onCharacteristicChanged", "parameters": "(GattClient client, BluetoothGattCharacteristic characteristic)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onCharacteristicChanged(GattClient client, BluetoothGattCharacteristic characteristic) {\n        if (characteristic == mSerialCharacteristic) {\n            byte[] data = mMessageAssembler.assemble(new GattSerialPacket(characteristic.getValue()));\n            if (data != null) {\n                if (BuildConfig.DEBUG) {\n                    Log.d(TAG, \"Received data\");\n                }\n                if (mListener != null) {\n                    mListener.onMessageReceived(data);\n                } else {\n                    client.disconnect();\n                }\n            }\n        } else {\n            // scratch\n            int index = BEAN_SCRATCH_UUIDS.indexOf(characteristic.getUuid());\n            if (index > -1) {\n                index += 1;\n                if (BuildConfig.DEBUG) {\n                    Log.d(TAG, \"Received scratch bank update (\" + index + \")\");\n                }\n                if (mListener != null) {\n                    try {\n                        ScratchBank bank = EnumParse.enumWithRawValue(ScratchBank.class, index);\n                        mListener.onScratchValueChanged(bank, characteristic.getValue());\n                    } catch (NoEnumFoundException e) {\n                        Log.e(TAG, \"Couldn't parse bank enum from scratch bank with index \" +\n                                index);\n                        e.printStackTrace();\n                    }\n                } else {\n                    client.disconnect();\n                }\n            }\n        }\n    }", "signature": "void onCharacteristicChanged(GattClient client, BluetoothGattCharacteristic characteristic)", "full_signature": "@Override public void onCharacteristicChanged(GattClient client, BluetoothGattCharacteristic characteristic)", "class_method_signature": "GattSerialTransportProfile.onCharacteristicChanged(GattClient client, BluetoothGattCharacteristic characteristic)", "testcase": false, "constructor": false, "invocations": ["assemble", "getValue", "d", "onMessageReceived", "disconnect", "indexOf", "getUuid", "d", "enumWithRawValue", "onScratchValueChanged", "getValue", "e", "printStackTrace", "disconnect"]}, "repository": {"repo_id": 33499067, "url": "https://github.com/PunchThrough/bean-sdk-android", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 55, "size": 2818, "license": "licensed"}}