{"test_class": {"identifier": "StructureResonanceGeneratorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "LonePairElectronChecker                 lpcheck = new LonePairElectronChecker();", "modifier": "", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "base/reaction/src/test/java/org/openscience/cdk/tools/StructureResonanceGeneratorTest.java"}, "test_case": {"identifier": "testGetContainers2Groups", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetContainers2Groups() throws Exception {\n        IAtomContainer molecule = builder.newInstance(IAtomContainer.class);\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.addBond(0, 1, IBond.Order.SINGLE);\n        molecule.getBond(0).setID(\"bond_0\");\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.addBond(1, 2, IBond.Order.DOUBLE);\n        molecule.getBond(1).setID(\"bond_1\");\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.getAtom(3).setFormalCharge(+1);\n        molecule.addBond(2, 3, IBond.Order.SINGLE);\n        molecule.getBond(2).setID(\"bond_2\");\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.addBond(3, 4, IBond.Order.SINGLE);\n        molecule.getBond(3).setID(\"bond_3\");\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.addBond(4, 5, IBond.Order.SINGLE);\n        molecule.getBond(4).setID(\"bond_4\");\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.addBond(5, 6, IBond.Order.DOUBLE);\n        molecule.getBond(5).setID(\"bond_5\");\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.addBond(6, 7, IBond.Order.SINGLE);\n        molecule.getBond(6).setID(\"bond_6\");\n        molecule.getAtom(7).setFormalCharge(+1);\n        addExplicitHydrogens(molecule);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        lpcheck.saturate(molecule);\n\n        StructureResonanceGenerator sRG = new StructureResonanceGenerator();\n        IAtomContainerSet setOfContainers = sRG.getContainers(molecule);\n\n        Assert.assertEquals(2, setOfContainers.getAtomContainerCount());\n        for (int i = 0; i < 2; i++) {\n            Assert.assertEquals(3, setOfContainers.getAtomContainer(i).getAtomCount());\n            Assert.assertEquals(2, setOfContainers.getAtomContainer(i).getBondCount());\n\n        }\n    }", "signature": "void testGetContainers2Groups()", "full_signature": "@Test public void testGetContainers2Groups()", "class_method_signature": "StructureResonanceGeneratorTest.testGetContainers2Groups()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "addAtom", "addBond", "setID", "getBond", "addAtom", "addBond", "setID", "getBond", "addAtom", "setFormalCharge", "getAtom", "addBond", "setID", "getBond", "addAtom", "addBond", "setID", "getBond", "addAtom", "addBond", "setID", "getBond", "addAtom", "addBond", "setID", "getBond", "addAtom", "addBond", "setID", "getBond", "setFormalCharge", "getAtom", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "saturate", "getContainers", "assertEquals", "getAtomContainerCount", "assertEquals", "getAtomCount", "getAtomContainer", "assertEquals", "getBondCount", "getAtomContainer"]}, "focal_class": {"identifier": "StructureResonanceGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ILoggingTool           logger        = LoggingToolFactory\n                                                         .createLoggingTool(StructureResonanceGenerator.class);", "modifier": "private", "type": "ILoggingTool", "declarator": "logger        = LoggingToolFactory\n                                                         .createLoggingTool(StructureResonanceGenerator.class)", "var_name": "logger"}, {"original_string": "private List<IReactionProcess> reactionsList = new ArrayList<IReactionProcess>();", "modifier": "private", "type": "List<IReactionProcess>", "declarator": "reactionsList = new ArrayList<IReactionProcess>()", "var_name": "reactionsList"}, {"original_string": "private boolean                lookingSymmetry;", "modifier": "private", "type": "boolean", "declarator": "lookingSymmetry", "var_name": "lookingSymmetry"}, {"original_string": "private int                    maxStructures = 50;", "modifier": "private", "type": "int", "declarator": "maxStructures = 50", "var_name": "maxStructures"}], "methods": [{"identifier": "StructureResonanceGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " StructureResonanceGenerator()", "full_signature": "public  StructureResonanceGenerator()", "class_method_signature": "StructureResonanceGenerator.StructureResonanceGenerator()", "testcase": false, "constructor": true}, {"identifier": "StructureResonanceGenerator", "parameters": "(boolean lookingSymmetry)", "modifiers": "public", "return": "", "signature": " StructureResonanceGenerator(boolean lookingSymmetry)", "full_signature": "public  StructureResonanceGenerator(boolean lookingSymmetry)", "class_method_signature": "StructureResonanceGenerator.StructureResonanceGenerator(boolean lookingSymmetry)", "testcase": false, "constructor": true}, {"identifier": "setReactions", "parameters": "(List<IReactionProcess> newReactionsList)", "modifiers": "public", "return": "void", "signature": "void setReactions(List<IReactionProcess> newReactionsList)", "full_signature": "public void setReactions(List<IReactionProcess> newReactionsList)", "class_method_signature": "StructureResonanceGenerator.setReactions(List<IReactionProcess> newReactionsList)", "testcase": false, "constructor": false}, {"identifier": "getReactions", "parameters": "()", "modifiers": "public", "return": "List<IReactionProcess>", "signature": "List<IReactionProcess> getReactions()", "full_signature": "public List<IReactionProcess> getReactions()", "class_method_signature": "StructureResonanceGenerator.getReactions()", "testcase": false, "constructor": false}, {"identifier": "setMaximalStructures", "parameters": "(int maxStruct)", "modifiers": "public", "return": "void", "signature": "void setMaximalStructures(int maxStruct)", "full_signature": "public void setMaximalStructures(int maxStruct)", "class_method_signature": "StructureResonanceGenerator.setMaximalStructures(int maxStruct)", "testcase": false, "constructor": false}, {"identifier": "getMaximalStructures", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaximalStructures()", "full_signature": "public int getMaximalStructures()", "class_method_signature": "StructureResonanceGenerator.getMaximalStructures()", "testcase": false, "constructor": false}, {"identifier": "setDefaultReactions", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setDefaultReactions()", "full_signature": "public void setDefaultReactions()", "class_method_signature": "StructureResonanceGenerator.setDefaultReactions()", "testcase": false, "constructor": false}, {"identifier": "callDefaultReactions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void callDefaultReactions()", "full_signature": "private void callDefaultReactions()", "class_method_signature": "StructureResonanceGenerator.callDefaultReactions()", "testcase": false, "constructor": false}, {"identifier": "getStructures", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "IAtomContainerSet", "signature": "IAtomContainerSet getStructures(IAtomContainer molecule)", "full_signature": "public IAtomContainerSet getStructures(IAtomContainer molecule)", "class_method_signature": "StructureResonanceGenerator.getStructures(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "getContainers", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "IAtomContainerSet", "signature": "IAtomContainerSet getContainers(IAtomContainer molecule)", "full_signature": "public IAtomContainerSet getContainers(IAtomContainer molecule)", "class_method_signature": "StructureResonanceGenerator.getContainers(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "getContainer", "parameters": "(IAtomContainer molecule, IAtom atom)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getContainer(IAtomContainer molecule, IAtom atom)", "full_signature": "public IAtomContainer getContainer(IAtomContainer molecule, IAtom atom)", "class_method_signature": "StructureResonanceGenerator.getContainer(IAtomContainer molecule, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getContainer", "parameters": "(IAtomContainer molecule, IBond bond)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getContainer(IAtomContainer molecule, IBond bond)", "full_signature": "public IAtomContainer getContainer(IAtomContainer molecule, IBond bond)", "class_method_signature": "StructureResonanceGenerator.getContainer(IAtomContainer molecule, IBond bond)", "testcase": false, "constructor": false}, {"identifier": "existAC", "parameters": "(IAtomContainerSet set, IAtomContainer atomContainer)", "modifiers": "private", "return": "boolean", "signature": "boolean existAC(IAtomContainerSet set, IAtomContainer atomContainer)", "full_signature": "private boolean existAC(IAtomContainerSet set, IAtomContainer atomContainer)", "class_method_signature": "StructureResonanceGenerator.existAC(IAtomContainerSet set, IAtomContainer atomContainer)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/tools/StructureResonanceGenerator.java"}, "focal_method": {"identifier": "getContainers", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "IAtomContainerSet", "body": "public IAtomContainerSet getContainers(IAtomContainer molecule) {\n        IAtomContainerSet setOfCont = molecule.getBuilder().newInstance(IAtomContainerSet.class);\n        IAtomContainerSet setOfMol = getStructures(molecule);\n\n        if (setOfMol.getAtomContainerCount() == 0) return setOfCont;\n\n        /* extraction of all bonds which has been produced a changes of order */\n        List<IBond> bondList = new ArrayList<IBond>();\n        for (int i = 1; i < setOfMol.getAtomContainerCount(); i++) {\n            IAtomContainer mol = setOfMol.getAtomContainer(i);\n            for (int j = 0; j < mol.getBondCount(); j++) {\n                IBond bond = molecule.getBond(j);\n                if (!mol.getBond(j).getOrder().equals(bond.getOrder())) {\n                    if (!bondList.contains(bond)) bondList.add(bond);\n                }\n            }\n        }\n\n        if (bondList.size() == 0) return null;\n\n        int[] flagBelonging = new int[bondList.size()];\n        for (int i = 0; i < flagBelonging.length; i++)\n            flagBelonging[i] = 0;\n        int[] position = new int[bondList.size()];\n        int maxGroup = 1;\n\n        /* Analysis if the bond are linked together */\n        List<IBond> newBondList = new ArrayList<IBond>();\n        newBondList.add(bondList.get(0));\n\n        int pos = 0;\n        for (int i = 0; i < newBondList.size(); i++) {\n\n            if (i == 0)\n                flagBelonging[i] = maxGroup;\n            else {\n                if (flagBelonging[position[i]] == 0) {\n                    maxGroup++;\n                    flagBelonging[position[i]] = maxGroup;\n                }\n            }\n\n            IBond bondA = newBondList.get(i);\n            for (int ato = 0; ato < 2; ato++) {\n                IAtom atomA1 = bondA.getAtom(ato);\n                List<IBond> bondA1s = molecule.getConnectedBondsList(atomA1);\n                for (int j = 0; j < bondA1s.size(); j++) {\n                    IBond bondB = bondA1s.get(j);\n                    if (!newBondList.contains(bondB)) for (int k = 0; k < bondList.size(); k++)\n                        if (bondList.get(k).equals(bondB)) if (flagBelonging[k] == 0) {\n                            flagBelonging[k] = maxGroup;\n                            pos++;\n                            newBondList.add(bondB);\n                            position[pos] = k;\n\n                        }\n                }\n            }\n            //if it is final size and not all are added\n            if (newBondList.size() - 1 == i) for (int k = 0; k < bondList.size(); k++)\n                if (!newBondList.contains(bondList.get(k))) {\n                    newBondList.add(bondList.get(k));\n                    position[i + 1] = k;\n                    break;\n                }\n        }\n        /* creating containers according groups */\n        for (int i = 0; i < maxGroup; i++) {\n            IAtomContainer container = molecule.getBuilder().newInstance(IAtomContainer.class);\n            for (int j = 0; j < bondList.size(); j++) {\n                if (flagBelonging[j] != i + 1) continue;\n                IBond bond = bondList.get(j);\n                IAtom atomA1 = bond.getBegin();\n                IAtom atomA2 = bond.getEnd();\n                if (!container.contains(atomA1)) container.addAtom(atomA1);\n                if (!container.contains(atomA2)) container.addAtom(atomA2);\n                container.addBond(bond);\n            }\n            setOfCont.addAtomContainer(container);\n        }\n        return setOfCont;\n    }", "signature": "IAtomContainerSet getContainers(IAtomContainer molecule)", "full_signature": "public IAtomContainerSet getContainers(IAtomContainer molecule)", "class_method_signature": "StructureResonanceGenerator.getContainers(IAtomContainer molecule)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getBuilder", "getStructures", "getAtomContainerCount", "getAtomContainerCount", "getAtomContainer", "getBondCount", "getBond", "equals", "getOrder", "getBond", "getOrder", "contains", "add", "size", "size", "size", "add", "get", "size", "get", "getAtom", "getConnectedBondsList", "size", "get", "contains", "size", "equals", "get", "add", "size", "size", "contains", "get", "add", "get", "newInstance", "getBuilder", "size", "get", "getBegin", "getEnd", "contains", "addAtom", "contains", "addAtom", "addBond", "addAtomContainer"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}