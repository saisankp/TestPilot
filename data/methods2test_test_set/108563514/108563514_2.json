{"test_class": {"identifier": "FederatedRepositoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private FederatedDataSource dataSource;", "modifier": "@Mock\n    private", "type": "FederatedDataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "@Mock\n    private FederatedNetworkDataSource networkDataSource;", "modifier": "@Mock\n    private", "type": "FederatedNetworkDataSource", "declarator": "networkDataSource", "var_name": "networkDataSource"}, {"original_string": "@Mock\n    private FederatedDataSet dataSet;", "modifier": "@Mock\n    private", "type": "FederatedDataSet", "declarator": "dataSet", "var_name": "dataSet"}, {"original_string": "private FederatedRepository cut;", "modifier": "private", "type": "FederatedRepository", "declarator": "cut", "var_name": "cut"}], "file": "app/src/test/java/com/mccorby/federatedlearning/core/repository/FederatedRepositoryImplTest.java"}, "test_case": {"identifier": "testGetTrainingData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTrainingData() {\n        // Given\n        given(dataSource.getTrainingData()).willReturn(dataSet);\n\n        // When\n        FederatedDataSet trainingData = cut.getTrainingData();\n\n        // Then\n        assertNotNull(trainingData);\n    }", "signature": "void testGetTrainingData()", "full_signature": "@Test public void testGetTrainingData()", "class_method_signature": "FederatedRepositoryImplTest.testGetTrainingData()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getTrainingData", "getTrainingData", "assertNotNull"]}, "focal_class": {"identifier": "FederatedRepositoryImpl", "superclass": "", "interfaces": "implements FederatedRepository", "fields": [{"original_string": "private FederatedDataSource dataSource;", "modifier": "private", "type": "FederatedDataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "private FederatedNetworkDataSource networkDataSource;", "modifier": "private", "type": "FederatedNetworkDataSource", "declarator": "networkDataSource", "var_name": "networkDataSource"}], "methods": [{"identifier": "FederatedRepositoryImpl", "parameters": "(FederatedDataSource dataSource, FederatedNetworkDataSource networkDataSource)", "modifiers": "public", "return": "", "signature": " FederatedRepositoryImpl(FederatedDataSource dataSource, FederatedNetworkDataSource networkDataSource)", "full_signature": "public  FederatedRepositoryImpl(FederatedDataSource dataSource, FederatedNetworkDataSource networkDataSource)", "class_method_signature": "FederatedRepositoryImpl.FederatedRepositoryImpl(FederatedDataSource dataSource, FederatedNetworkDataSource networkDataSource)", "testcase": false, "constructor": true}, {"identifier": "getTrainingData", "parameters": "()", "modifiers": "@Override public", "return": "FederatedDataSet", "signature": "FederatedDataSet getTrainingData()", "full_signature": "@Override public FederatedDataSet getTrainingData()", "class_method_signature": "FederatedRepositoryImpl.getTrainingData()", "testcase": false, "constructor": false}, {"identifier": "getTestData", "parameters": "()", "modifiers": "@Override public", "return": "FederatedDataSet", "signature": "FederatedDataSet getTestData()", "full_signature": "@Override public FederatedDataSet getTestData()", "class_method_signature": "FederatedRepositoryImpl.getTestData()", "testcase": false, "constructor": false}, {"identifier": "getCrossValidationData", "parameters": "()", "modifiers": "@Override public", "return": "FederatedDataSet", "signature": "FederatedDataSet getCrossValidationData()", "full_signature": "@Override public FederatedDataSet getCrossValidationData()", "class_method_signature": "FederatedRepositoryImpl.getCrossValidationData()", "testcase": false, "constructor": false}, {"identifier": "uploadGradient", "parameters": "(byte[] gradient)", "modifiers": "@Override public", "return": "Observable<Boolean>", "signature": "Observable<Boolean> uploadGradient(byte[] gradient)", "full_signature": "@Override public Observable<Boolean> uploadGradient(byte[] gradient)", "class_method_signature": "FederatedRepositoryImpl.uploadGradient(byte[] gradient)", "testcase": false, "constructor": false}, {"identifier": "retrieveGradient", "parameters": "()", "modifiers": "@Override public", "return": "Observable<byte[]>", "signature": "Observable<byte[]> retrieveGradient()", "full_signature": "@Override public Observable<byte[]> retrieveGradient()", "class_method_signature": "FederatedRepositoryImpl.retrieveGradient()", "testcase": false, "constructor": false}, {"identifier": "registerModel", "parameters": "()", "modifiers": "@Override public", "return": "Observable<Integer>", "signature": "Observable<Integer> registerModel()", "full_signature": "@Override public Observable<Integer> registerModel()", "class_method_signature": "FederatedRepositoryImpl.registerModel()", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/mccorby/federatedlearning/core/repository/FederatedRepositoryImpl.java"}, "focal_method": {"identifier": "getTrainingData", "parameters": "()", "modifiers": "@Override public", "return": "FederatedDataSet", "body": "@Override\n    public FederatedDataSet getTrainingData() {\n        return dataSource.getTrainingData();\n    }", "signature": "FederatedDataSet getTrainingData()", "full_signature": "@Override public FederatedDataSet getTrainingData()", "class_method_signature": "FederatedRepositoryImpl.getTrainingData()", "testcase": false, "constructor": false, "invocations": ["getTrainingData"]}, "repository": {"repo_id": 108563514, "url": "https://github.com/mccorby/FederatedAndroidTrainer", "language": "Java", "is_fork": false, "fork_count": 24, "stargazer_count": 121, "size": 292, "license": "licensed"}}