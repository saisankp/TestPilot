{"test_class": {"identifier": "AbstractDaoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestDao dao;", "modifier": "private", "type": "TestDao", "declarator": "dao", "var_name": "dao"}], "file": "stardao-core/src/test/java/io/stardog/stardao/core/AbstractDaoTest.java"}, "test_case": {"identifier": "testGetModelClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetModelClass() throws Exception {\n        assertEquals(TestModel.class, dao.getModelClass());\n    }", "signature": "void testGetModelClass()", "full_signature": "@Test public void testGetModelClass()", "class_method_signature": "AbstractDaoTest.testGetModelClass()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getModelClass"]}, "focal_class": {"identifier": "AbstractDao", "superclass": "", "interfaces": "implements Dao<M,P,K>", "fields": [{"original_string": "private final Class<M> modelClass;", "modifier": "private final", "type": "Class<M>", "declarator": "modelClass", "var_name": "modelClass"}, {"original_string": "private final Class<P> partialClass;", "modifier": "private final", "type": "Class<P>", "declarator": "partialClass", "var_name": "partialClass"}, {"original_string": "private final FieldData fieldData;", "modifier": "private final", "type": "FieldData", "declarator": "fieldData", "var_name": "fieldData"}], "methods": [{"identifier": "AbstractDao", "parameters": "(Class<M> modelClass, Class<P> partialClass)", "modifiers": "public", "return": "", "signature": " AbstractDao(Class<M> modelClass, Class<P> partialClass)", "full_signature": "public  AbstractDao(Class<M> modelClass, Class<P> partialClass)", "class_method_signature": "AbstractDao.AbstractDao(Class<M> modelClass, Class<P> partialClass)", "testcase": false, "constructor": true}, {"identifier": "generateFieldData", "parameters": "()", "modifiers": "protected", "return": "FieldData", "signature": "FieldData generateFieldData()", "full_signature": "protected FieldData generateFieldData()", "class_method_signature": "AbstractDao.generateFieldData()", "testcase": false, "constructor": false}, {"identifier": "getModelClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<M>", "signature": "Class<M> getModelClass()", "full_signature": "@Override public Class<M> getModelClass()", "class_method_signature": "AbstractDao.getModelClass()", "testcase": false, "constructor": false}, {"identifier": "getPartialClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<P>", "signature": "Class<P> getPartialClass()", "full_signature": "@Override public Class<P> getPartialClass()", "class_method_signature": "AbstractDao.getPartialClass()", "testcase": false, "constructor": false}, {"identifier": "getFieldData", "parameters": "()", "modifiers": "public", "return": "FieldData", "signature": "FieldData getFieldData()", "full_signature": "public FieldData getFieldData()", "class_method_signature": "AbstractDao.getFieldData()", "testcase": false, "constructor": false}, {"identifier": "getDisplayModelName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDisplayModelName()", "full_signature": "public String getDisplayModelName()", "class_method_signature": "AbstractDao.getDisplayModelName()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(K id)", "modifiers": "@Override public", "return": "M", "signature": "M load(K id)", "full_signature": "@Override public M load(K id)", "class_method_signature": "AbstractDao.load(K id)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(K id, Iterable<String> fields)", "modifiers": "public", "return": "P", "signature": "P load(K id, Iterable<String> fields)", "full_signature": "public P load(K id, Iterable<String> fields)", "class_method_signature": "AbstractDao.load(K id, Iterable<String> fields)", "testcase": false, "constructor": false}, {"identifier": "loadOpt", "parameters": "(K id, Iterable<String> fields)", "modifiers": "public abstract", "return": "Optional<P>", "signature": "Optional<P> loadOpt(K id, Iterable<String> fields)", "full_signature": "public abstract Optional<P> loadOpt(K id, Iterable<String> fields)", "class_method_signature": "AbstractDao.loadOpt(K id, Iterable<String> fields)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(P partial)", "modifiers": "public", "return": "M", "signature": "M create(P partial)", "full_signature": "public M create(P partial)", "class_method_signature": "AbstractDao.create(P partial)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(P partial, Instant createAt)", "modifiers": "public", "return": "M", "signature": "M create(P partial, Instant createAt)", "full_signature": "public M create(P partial, Instant createAt)", "class_method_signature": "AbstractDao.create(P partial, Instant createAt)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(P partial, I createBy)", "modifiers": "public", "return": "M", "signature": "M create(P partial, I createBy)", "full_signature": "public M create(P partial, I createBy)", "class_method_signature": "AbstractDao.create(P partial, I createBy)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(P partial, Instant createAt, I createBy)", "modifiers": "public abstract", "return": "M", "signature": "M create(P partial, Instant createAt, I createBy)", "full_signature": "public abstract M create(P partial, Instant createAt, I createBy)", "class_method_signature": "AbstractDao.create(P partial, Instant createAt, I createBy)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(K id, Update<P> update)", "modifiers": "public", "return": "void", "signature": "void update(K id, Update<P> update)", "full_signature": "public void update(K id, Update<P> update)", "class_method_signature": "AbstractDao.update(K id, Update<P> update)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(K id, Update<P> update, Instant updateAt)", "modifiers": "public", "return": "void", "signature": "void update(K id, Update<P> update, Instant updateAt)", "full_signature": "public void update(K id, Update<P> update, Instant updateAt)", "class_method_signature": "AbstractDao.update(K id, Update<P> update, Instant updateAt)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(K id, Update<P> update, I updateBy)", "modifiers": "public", "return": "void", "signature": "void update(K id, Update<P> update, I updateBy)", "full_signature": "public void update(K id, Update<P> update, I updateBy)", "class_method_signature": "AbstractDao.update(K id, Update<P> update, I updateBy)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(K id, Update<P> update, Instant updateAt, I updateBy)", "modifiers": "public abstract", "return": "void", "signature": "void update(K id, Update<P> update, Instant updateAt, I updateBy)", "full_signature": "public abstract void update(K id, Update<P> update, Instant updateAt, I updateBy)", "class_method_signature": "AbstractDao.update(K id, Update<P> update, Instant updateAt, I updateBy)", "testcase": false, "constructor": false}, {"identifier": "updateAndReturn", "parameters": "(K id, Update<P> update)", "modifiers": "@Override public", "return": "M", "signature": "M updateAndReturn(K id, Update<P> update)", "full_signature": "@Override public M updateAndReturn(K id, Update<P> update)", "class_method_signature": "AbstractDao.updateAndReturn(K id, Update<P> update)", "testcase": false, "constructor": false}, {"identifier": "updateAndReturn", "parameters": "(K id, Update<P> update, Instant updateAt)", "modifiers": "public", "return": "M", "signature": "M updateAndReturn(K id, Update<P> update, Instant updateAt)", "full_signature": "public M updateAndReturn(K id, Update<P> update, Instant updateAt)", "class_method_signature": "AbstractDao.updateAndReturn(K id, Update<P> update, Instant updateAt)", "testcase": false, "constructor": false}, {"identifier": "updateAndReturn", "parameters": "(K id, Update<P> update, I updateBy)", "modifiers": "public", "return": "M", "signature": "M updateAndReturn(K id, Update<P> update, I updateBy)", "full_signature": "public M updateAndReturn(K id, Update<P> update, I updateBy)", "class_method_signature": "AbstractDao.updateAndReturn(K id, Update<P> update, I updateBy)", "testcase": false, "constructor": false}, {"identifier": "updateAndReturn", "parameters": "(K id, Update<P> update, Instant updateAt, I updateBy)", "modifiers": "public abstract", "return": "M", "signature": "M updateAndReturn(K id, Update<P> update, Instant updateAt, I updateBy)", "full_signature": "public abstract M updateAndReturn(K id, Update<P> update, Instant updateAt, I updateBy)", "class_method_signature": "AbstractDao.updateAndReturn(K id, Update<P> update, Instant updateAt, I updateBy)", "testcase": false, "constructor": false}, {"identifier": "dropAndInitTable", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dropAndInitTable()", "full_signature": "public void dropAndInitTable()", "class_method_signature": "AbstractDao.dropAndInitTable()", "testcase": false, "constructor": false}], "file": "stardao-core/src/main/java/io/stardog/stardao/core/AbstractDao.java"}, "focal_method": {"identifier": "getModelClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<M>", "body": "@Override\n    public Class<M> getModelClass() {\n        return modelClass;\n    }", "signature": "Class<M> getModelClass()", "full_signature": "@Override public Class<M> getModelClass()", "class_method_signature": "AbstractDao.getModelClass()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 79784019, "url": "https://github.com/stardogventures/stardao", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 219, "license": "licensed"}}