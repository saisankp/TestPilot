{"test_class": {"identifier": "DockerfileGitHubUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    GitHubUtil gitHubUtil;", "modifier": "@Mock", "type": "GitHubUtil", "declarator": "gitHubUtil", "var_name": "gitHubUtil"}, {"original_string": "private DockerfileGitHubUtil dockerfileGitHubUtil;", "modifier": "private", "type": "DockerfileGitHubUtil", "declarator": "dockerfileGitHubUtil", "var_name": "dockerfileGitHubUtil"}], "file": "dockerfile-image-update/src/test/java/com/salesforce/dockerfileimageupdate/utils/DockerfileGitHubUtilTest.java"}, "test_case": {"identifier": "testModifyOnGithubRecursive", "parameters": "()", "modifiers": "@Test(dependsOnMethods = \"testFindImagesAndFix\") public", "return": "void", "body": "@Test(dependsOnMethods = \"testFindImagesAndFix\")\n    public void testModifyOnGithubRecursive() throws Exception {\n        gitHubUtil = mock(GitHubUtil.class);\n\n        GHRepository repo = mock(GHRepository.class);\n        List<GHContent> tree = mock(List.class);\n        Iterator<GHContent> treeIterator = mock(Iterator.class);\n        GHContent content = mock(GHContent.class);\n        when(content.isFile()).thenReturn(false, true);\n        when(content.getDownloadUrl()).thenReturn(null,  \" \");\n        when(content.isDirectory()).thenReturn(true, false);\n        when(content.getPath()).thenReturn(\"path\");\n        when(content.read()).thenReturn(new InputStream() {\n            @Override\n            public int read() throws IOException {\n                return -1;\n            }\n        });\n        when(treeIterator.hasNext()).thenReturn(true, true, true, true, true, false);\n        when(treeIterator.next()).thenReturn(content);\n        when(tree.iterator()).thenReturn(treeIterator);\n        String branch = \"branch\";\n        String img = \"img\";\n        String tag = \"tag\";\n\n        when(repo.getDirectoryContent(\"path\", branch)).thenReturn(tree);\n\n        dockerfileGitHubUtil = new DockerfileGitHubUtil(gitHubUtil);\n        dockerfileGitHubUtil.modifyOnGithubRecursive(repo, content, branch, img, tag);\n\n        verify(content, times(6)).isFile();\n        verify(content, times(2)).isDirectory();\n        verify(content, times(5)).getDownloadUrl();\n    }", "signature": "void testModifyOnGithubRecursive()", "full_signature": "@Test(dependsOnMethods = \"testFindImagesAndFix\") public void testModifyOnGithubRecursive()", "class_method_signature": "DockerfileGitHubUtilTest.testModifyOnGithubRecursive()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "isFile", "thenReturn", "when", "getDownloadUrl", "thenReturn", "when", "isDirectory", "thenReturn", "when", "getPath", "thenReturn", "when", "read", "thenReturn", "when", "hasNext", "thenReturn", "when", "next", "thenReturn", "when", "iterator", "thenReturn", "when", "getDirectoryContent", "modifyOnGithubRecursive", "isFile", "verify", "times", "isDirectory", "verify", "times", "getDownloadUrl", "verify", "times"]}, "focal_class": {"identifier": "DockerfileGitHubUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DockerfileGitHubUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DockerfileGitHubUtil.class)", "var_name": "log"}, {"original_string": "private final GitHubUtil gitHubUtil;", "modifier": "private final", "type": "GitHubUtil", "declarator": "gitHubUtil", "var_name": "gitHubUtil"}], "methods": [{"identifier": "DockerfileGitHubUtil", "parameters": "(GitHubUtil gitHubUtil)", "modifiers": "public", "return": "", "signature": " DockerfileGitHubUtil(GitHubUtil gitHubUtil)", "full_signature": "public  DockerfileGitHubUtil(GitHubUtil gitHubUtil)", "class_method_signature": "DockerfileGitHubUtil.DockerfileGitHubUtil(GitHubUtil gitHubUtil)", "testcase": false, "constructor": true}, {"identifier": "getGitHubUtil", "parameters": "()", "modifiers": "protected", "return": "GitHubUtil", "signature": "GitHubUtil getGitHubUtil()", "full_signature": "protected GitHubUtil getGitHubUtil()", "class_method_signature": "DockerfileGitHubUtil.getGitHubUtil()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateFork", "parameters": "(GHRepository parent)", "modifiers": "public", "return": "GHRepository", "signature": "GHRepository getOrCreateFork(GHRepository parent)", "full_signature": "public GHRepository getOrCreateFork(GHRepository parent)", "class_method_signature": "DockerfileGitHubUtil.getOrCreateFork(GHRepository parent)", "testcase": false, "constructor": false}, {"identifier": "getMyself", "parameters": "()", "modifiers": "public", "return": "GHMyself", "signature": "GHMyself getMyself()", "full_signature": "public GHMyself getMyself()", "class_method_signature": "DockerfileGitHubUtil.getMyself()", "testcase": false, "constructor": false}, {"identifier": "getRepo", "parameters": "(String repoName)", "modifiers": "public", "return": "GHRepository", "signature": "GHRepository getRepo(String repoName)", "full_signature": "public GHRepository getRepo(String repoName)", "class_method_signature": "DockerfileGitHubUtil.getRepo(String repoName)", "testcase": false, "constructor": false}, {"identifier": "findFilesWithImage", "parameters": "(String query, String org)", "modifiers": "public", "return": "PagedSearchIterable<GHContent>", "signature": "PagedSearchIterable<GHContent> findFilesWithImage(String query, String org)", "full_signature": "public PagedSearchIterable<GHContent> findFilesWithImage(String query, String org)", "class_method_signature": "DockerfileGitHubUtil.findFilesWithImage(String query, String org)", "testcase": false, "constructor": false}, {"identifier": "getGHRepositories", "parameters": "(Multimap<String, String> pathToDockerfileInParentRepo,\n                                                            GHMyself currentUser)", "modifiers": "public", "return": "List<GHRepository>", "signature": "List<GHRepository> getGHRepositories(Multimap<String, String> pathToDockerfileInParentRepo,\n                                                            GHMyself currentUser)", "full_signature": "public List<GHRepository> getGHRepositories(Multimap<String, String> pathToDockerfileInParentRepo,\n                                                            GHMyself currentUser)", "class_method_signature": "DockerfileGitHubUtil.getGHRepositories(Multimap<String, String> pathToDockerfileInParentRepo,\n                                                            GHMyself currentUser)", "testcase": false, "constructor": false}, {"identifier": "modifyAllOnGithub", "parameters": "(GHRepository repo, String branch,\n                                  String img, String tag)", "modifiers": "public", "return": "void", "signature": "void modifyAllOnGithub(GHRepository repo, String branch,\n                                  String img, String tag)", "full_signature": "public void modifyAllOnGithub(GHRepository repo, String branch,\n                                  String img, String tag)", "class_method_signature": "DockerfileGitHubUtil.modifyAllOnGithub(GHRepository repo, String branch,\n                                  String img, String tag)", "testcase": false, "constructor": false}, {"identifier": "modifyOnGithubRecursive", "parameters": "(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag)", "modifiers": "protected", "return": "void", "signature": "void modifyOnGithubRecursive(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag)", "full_signature": "protected void modifyOnGithubRecursive(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag)", "class_method_signature": "DockerfileGitHubUtil.modifyOnGithubRecursive(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag)", "testcase": false, "constructor": false}, {"identifier": "tryRetrievingContent", "parameters": "(GHRepository repo, String path, String branch)", "modifiers": "public", "return": "GHContent", "signature": "GHContent tryRetrievingContent(GHRepository repo, String path, String branch)", "full_signature": "public GHContent tryRetrievingContent(GHRepository repo, String path, String branch)", "class_method_signature": "DockerfileGitHubUtil.tryRetrievingContent(GHRepository repo, String path, String branch)", "testcase": false, "constructor": false}, {"identifier": "modifyOnGithub", "parameters": "(GHContent content,\n                               String branch, String img, String tag, String customMessage)", "modifiers": "public", "return": "void", "signature": "void modifyOnGithub(GHContent content,\n                               String branch, String img, String tag, String customMessage)", "full_signature": "public void modifyOnGithub(GHContent content,\n                               String branch, String img, String tag, String customMessage)", "class_method_signature": "DockerfileGitHubUtil.modifyOnGithub(GHContent content,\n                               String branch, String img, String tag, String customMessage)", "testcase": false, "constructor": false}, {"identifier": "findImagesAndFix", "parameters": "(GHContent content,\n                                    String branch, String img, String tag, String customMessage,\n                                    BufferedReader reader)", "modifiers": "protected", "return": "void", "signature": "void findImagesAndFix(GHContent content,\n                                    String branch, String img, String tag, String customMessage,\n                                    BufferedReader reader)", "full_signature": "protected void findImagesAndFix(GHContent content,\n                                    String branch, String img, String tag, String customMessage,\n                                    BufferedReader reader)", "class_method_signature": "DockerfileGitHubUtil.findImagesAndFix(GHContent content,\n                                    String branch, String img, String tag, String customMessage,\n                                    BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "rewriteDockerfile", "parameters": "(String img, String tag, BufferedReader reader, StringBuilder strB)", "modifiers": "protected", "return": "boolean", "signature": "boolean rewriteDockerfile(String img, String tag, BufferedReader reader, StringBuilder strB)", "full_signature": "protected boolean rewriteDockerfile(String img, String tag, BufferedReader reader, StringBuilder strB)", "class_method_signature": "DockerfileGitHubUtil.rewriteDockerfile(String img, String tag, BufferedReader reader, StringBuilder strB)", "testcase": false, "constructor": false}, {"identifier": "changeIfDockerfileBaseImageLine", "parameters": "(String imageToFind, String tag, StringBuilder stringBuilder, String line)", "modifiers": "protected", "return": "boolean", "signature": "boolean changeIfDockerfileBaseImageLine(String imageToFind, String tag, StringBuilder stringBuilder, String line)", "full_signature": "protected boolean changeIfDockerfileBaseImageLine(String imageToFind, String tag, StringBuilder stringBuilder, String line)", "class_method_signature": "DockerfileGitHubUtil.changeIfDockerfileBaseImageLine(String imageToFind, String tag, StringBuilder stringBuilder, String line)", "testcase": false, "constructor": false}, {"identifier": "getGitHubJsonStore", "parameters": "(String store)", "modifiers": "public", "return": "GitHubJsonStore", "signature": "GitHubJsonStore getGitHubJsonStore(String store)", "full_signature": "public GitHubJsonStore getGitHubJsonStore(String store)", "class_method_signature": "DockerfileGitHubUtil.getGitHubJsonStore(String store)", "testcase": false, "constructor": false}, {"identifier": "createPullReq", "parameters": "(GHRepository origRepo,\n                              String branch, GHRepository forkRepo,\n                              PullRequestInfo pullRequestInfo)", "modifiers": "public", "return": "void", "signature": "void createPullReq(GHRepository origRepo,\n                              String branch, GHRepository forkRepo,\n                              PullRequestInfo pullRequestInfo)", "full_signature": "public void createPullReq(GHRepository origRepo,\n                              String branch, GHRepository forkRepo,\n                              PullRequestInfo pullRequestInfo)", "class_method_signature": "DockerfileGitHubUtil.createPullReq(GHRepository origRepo,\n                              String branch, GHRepository forkRepo,\n                              PullRequestInfo pullRequestInfo)", "testcase": false, "constructor": false}, {"identifier": "getPullRequestForImageBranch", "parameters": "(GHRepository repository, GitForkBranch gitForkBranch)", "modifiers": "public", "return": "Optional<GHPullRequest>", "signature": "Optional<GHPullRequest> getPullRequestForImageBranch(GHRepository repository, GitForkBranch gitForkBranch)", "full_signature": "public Optional<GHPullRequest> getPullRequestForImageBranch(GHRepository repository, GitForkBranch gitForkBranch)", "class_method_signature": "DockerfileGitHubUtil.getPullRequestForImageBranch(GHRepository repository, GitForkBranch gitForkBranch)", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateForkBranchToParentDefault", "parameters": "(GHRepository parent, GHRepository fork, GitForkBranch gitForkBranch)", "modifiers": "public", "return": "void", "signature": "void createOrUpdateForkBranchToParentDefault(GHRepository parent, GHRepository fork, GitForkBranch gitForkBranch)", "full_signature": "public void createOrUpdateForkBranchToParentDefault(GHRepository parent, GHRepository fork, GitForkBranch gitForkBranch)", "class_method_signature": "DockerfileGitHubUtil.createOrUpdateForkBranchToParentDefault(GHRepository parent, GHRepository fork, GitForkBranch gitForkBranch)", "testcase": false, "constructor": false}, {"identifier": "thisUserIsOwner", "parameters": "(GHRepository repo)", "modifiers": "public", "return": "boolean", "signature": "boolean thisUserIsOwner(GHRepository repo)", "full_signature": "public boolean thisUserIsOwner(GHRepository repo)", "class_method_signature": "DockerfileGitHubUtil.thisUserIsOwner(GHRepository repo)", "testcase": false, "constructor": false}, {"identifier": "getGHContents", "parameters": "(String org, String img)", "modifiers": "public", "return": "Optional<PagedSearchIterable<GHContent>>", "signature": "Optional<PagedSearchIterable<GHContent>> getGHContents(String org, String img)", "full_signature": "public Optional<PagedSearchIterable<GHContent>> getGHContents(String org, String img)", "class_method_signature": "DockerfileGitHubUtil.getGHContents(String org, String img)", "testcase": false, "constructor": false}], "file": "dockerfile-image-update/src/main/java/com/salesforce/dockerfileimageupdate/utils/DockerfileGitHubUtil.java"}, "focal_method": {"identifier": "modifyOnGithubRecursive", "parameters": "(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag)", "modifiers": "protected", "return": "void", "body": "protected void modifyOnGithubRecursive(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag) throws IOException {\n        /* If we have a submodule; we want to skip.\n           Content is submodule when the type is file, but content.getDownloadUrl() is null.\n         */\n        if (content.isFile() && content.getDownloadUrl() != null) {\n            modifyOnGithub(content, branch, img, tag, \"\");\n        } else if(content.isDirectory()) {\n            for (GHContent newContent : repo.getDirectoryContent(content.getPath(), branch)) {\n                modifyOnGithubRecursive(repo, newContent, branch, img, tag);\n            }\n        } else {\n            // The only other case is if we have a file, but content.getDownloadUrl() is null\n            log.info(\"Skipping submodule {}\", content.getName());\n        }\n    }", "signature": "void modifyOnGithubRecursive(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag)", "full_signature": "protected void modifyOnGithubRecursive(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag)", "class_method_signature": "DockerfileGitHubUtil.modifyOnGithubRecursive(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag)", "testcase": false, "constructor": false, "invocations": ["isFile", "getDownloadUrl", "modifyOnGithub", "isDirectory", "getDirectoryContent", "getPath", "modifyOnGithubRecursive", "info", "getName"]}, "repository": {"repo_id": 104787715, "url": "https://github.com/salesforce/dockerfile-image-update", "stars": 62, "created": "9/25/2017 6:38:13 PM +00:00", "updates": "2020-01-23T07:15:59+00:00", "fork": "False", "license": "licensed"}}