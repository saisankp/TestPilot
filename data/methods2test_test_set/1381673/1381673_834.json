{"test_class": {"identifier": "DSLSentenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/DSLSentenceTest.java"}, "test_case": {"identifier": "testCopy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCopy() {\n        final String definition = \"Human lives in \\\"{city}\\\"\";\n        final String drl = \"Human(city==\\\"{city}\\\")\";\n\n        final DSLSentence original = makeDslSentence(definition,\n                                                     drl);\n        final DSLSentence copy = original.copy();\n\n        assertEquals(original.getDefinition(),\n                     copy.getDefinition());\n        assertEquals(original.getDrl(),\n                     copy.getDrl());\n        assertEquals(original.getValues(),\n                     copy.getValues());\n        assertEquals(firstValue(original),\n                     firstValue(copy));\n        assertNotSame(firstValue(original),\n                      firstValue(copy));\n    }", "signature": "void testCopy()", "full_signature": "@Test public void testCopy()", "class_method_signature": "DSLSentenceTest.testCopy()", "testcase": true, "constructor": false, "invocations": ["makeDslSentence", "copy", "assertEquals", "getDefinition", "getDefinition", "assertEquals", "getDrl", "getDrl", "assertEquals", "getValues", "getValues", "assertEquals", "firstValue", "firstValue", "assertNotSame", "firstValue", "firstValue"]}, "focal_class": {"identifier": "DSLSentence", "superclass": "", "interfaces": "implements\n        IPattern,\n        IAction", "fields": [{"original_string": "public static final String ENUM_TAG = \"ENUM\";", "modifier": "public static final", "type": "String", "declarator": "ENUM_TAG = \"ENUM\"", "var_name": "ENUM_TAG"}, {"original_string": "public static final String DATE_TAG = \"DATE\";", "modifier": "public static final", "type": "String", "declarator": "DATE_TAG = \"DATE\"", "var_name": "DATE_TAG"}, {"original_string": "public static final String BOOLEAN_TAG = \"BOOLEAN\";", "modifier": "public static final", "type": "String", "declarator": "BOOLEAN_TAG = \"BOOLEAN\"", "var_name": "BOOLEAN_TAG"}, {"original_string": "public static final String CUSTOM_FORM_TAG = \"CF\";", "modifier": "public static final", "type": "String", "declarator": "CUSTOM_FORM_TAG = \"CF\"", "var_name": "CUSTOM_FORM_TAG"}, {"original_string": "private String drl;", "modifier": "private", "type": "String", "declarator": "drl", "var_name": "drl"}, {"original_string": "private String sentence;", "modifier": "private", "type": "String", "declarator": "sentence", "var_name": "sentence"}, {"original_string": "private String definition;", "modifier": "private", "type": "String", "declarator": "definition", "var_name": "definition"}, {"original_string": "private List<DSLVariableValue> values;", "modifier": "private", "type": "List<DSLVariableValue>", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "DSLSentence.toString()", "testcase": false, "constructor": false}, {"identifier": "interpolate", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String interpolate()", "full_signature": "public String interpolate()", "class_method_signature": "DSLSentence.interpolate()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "DSLSentence", "signature": "DSLSentence copy()", "full_signature": "public DSLSentence copy()", "class_method_signature": "DSLSentence.copy()", "testcase": false, "constructor": false}, {"identifier": "mapCopy", "parameters": "(final List<DSLVariableValue> values)", "modifiers": "private", "return": "List<DSLVariableValue>", "signature": "List<DSLVariableValue> mapCopy(final List<DSLVariableValue> values)", "full_signature": "private List<DSLVariableValue> mapCopy(final List<DSLVariableValue> values)", "class_method_signature": "DSLSentence.mapCopy(final List<DSLVariableValue> values)", "testcase": false, "constructor": false}, {"identifier": "getDrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDrl()", "full_signature": "public String getDrl()", "class_method_signature": "DSLSentence.getDrl()", "testcase": false, "constructor": false}, {"identifier": "setDrl", "parameters": "(String drl)", "modifiers": "public", "return": "void", "signature": "void setDrl(String drl)", "full_signature": "public void setDrl(String drl)", "class_method_signature": "DSLSentence.setDrl(String drl)", "testcase": false, "constructor": false}, {"identifier": "getDefinition", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDefinition()", "full_signature": "public String getDefinition()", "class_method_signature": "DSLSentence.getDefinition()", "testcase": false, "constructor": false}, {"identifier": "setDefinition", "parameters": "(String definition)", "modifiers": "public", "return": "void", "signature": "void setDefinition(String definition)", "full_signature": "public void setDefinition(String definition)", "class_method_signature": "DSLSentence.setDefinition(String definition)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "List<DSLVariableValue>", "signature": "List<DSLVariableValue> getValues()", "full_signature": "public List<DSLVariableValue> getValues()", "class_method_signature": "DSLSentence.getValues()", "testcase": false, "constructor": false}, {"identifier": "getEnumFieldValueMap", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getEnumFieldValueMap()", "full_signature": "public Map<String, String> getEnumFieldValueMap()", "class_method_signature": "DSLSentence.getEnumFieldValueMap()", "testcase": false, "constructor": false}, {"identifier": "parseSentence", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parseSentence()", "full_signature": "private void parseSentence()", "class_method_signature": "DSLSentence.parseSentence()", "testcase": false, "constructor": false}, {"identifier": "parseDefinition", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parseDefinition()", "full_signature": "private void parseDefinition()", "class_method_signature": "DSLSentence.parseDefinition()", "testcase": false, "constructor": false}, {"identifier": "getIndexForEndOfVariable", "parameters": "(String dsl,\n                                         int start)", "modifiers": "private", "return": "int", "signature": "int getIndexForEndOfVariable(String dsl,\n                                         int start)", "full_signature": "private int getIndexForEndOfVariable(String dsl,\n                                         int start)", "class_method_signature": "DSLSentence.getIndexForEndOfVariable(String dsl,\n                                         int start)", "testcase": false, "constructor": false}, {"identifier": "parseValue", "parameters": "(String variable)", "modifiers": "private", "return": "DSLVariableValue", "signature": "DSLVariableValue parseValue(String variable)", "full_signature": "private DSLVariableValue parseValue(String variable)", "class_method_signature": "DSLSentence.parseValue(String variable)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "DSLSentence.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DSLSentence.hashCode()", "testcase": false, "constructor": false}], "file": "drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/DSLSentence.java"}, "focal_method": {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "DSLSentence", "body": "public DSLSentence copy() {\n        final DSLSentence copy = new DSLSentence();\n\n        copy.drl = getDrl();\n        copy.definition = getDefinition();\n        copy.values = mapCopy(getValues());\n\n        return copy;\n    }", "signature": "DSLSentence copy()", "full_signature": "public DSLSentence copy()", "class_method_signature": "DSLSentence.copy()", "testcase": false, "constructor": false, "invocations": ["getDrl", "getDefinition", "mapCopy", "getValues"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}