{"test_class": {"identifier": "SchemaValidatorTest", "superclass": "extends AbstractSchemaTestCase", "interfaces": "", "fields": [{"original_string": "protected TopicMapIF topicmap;", "modifier": "protected", "type": "TopicMapIF", "declarator": "topicmap", "var_name": "topicmap"}, {"original_string": "protected TopicMapBuilderIF builder;", "modifier": "protected", "type": "TopicMapBuilderIF", "declarator": "builder", "var_name": "builder"}], "file": "ontopia-schema/src/test/java/net/ontopia/topicmaps/schema/impl/osl/SchemaValidatorTest.java"}, "test_case": {"identifier": "testLevelOfScopeMatchingExact", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLevelOfScopeMatchingExact() throws IOException, SchemaSyntaxException {\n    OSLSchema schema = (OSLSchema) readSchema(\"in\", \"scopelevel-exact.xml\");\n\n    TopicIF type = makeType(\"#something\");\n    TopicIF instance = builder.makeTopic();\n    instance.addType(type);\n\n    TopicIF occscope = makeType(\"#occ_scope\");\n\n    TopicIF occtype = makeType(\"#occtype\");\n    OccurrenceIF occ = builder.makeOccurrence(instance, occtype, \"\");\n\n    occ.addTheme(occscope);\n\n    validate(schema);\n  }", "signature": "void testLevelOfScopeMatchingExact()", "full_signature": "@Test public void testLevelOfScopeMatchingExact()", "class_method_signature": "SchemaValidatorTest.testLevelOfScopeMatchingExact()", "testcase": true, "constructor": false, "invocations": ["readSchema", "makeType", "makeTopic", "addType", "makeType", "makeType", "makeOccurrence", "addTheme", "validate"]}, "focal_class": {"identifier": "SchemaValidator", "superclass": "", "interfaces": "implements SchemaValidatorIF", "fields": [{"original_string": "protected OSLSchema schema;", "modifier": "protected", "type": "OSLSchema", "declarator": "schema", "var_name": "schema"}, {"original_string": "protected ValidationHandlerIF handler;", "modifier": "protected", "type": "ValidationHandlerIF", "declarator": "handler", "var_name": "handler"}], "methods": [{"identifier": "SchemaValidator", "parameters": "(OSLSchema schema)", "modifiers": "", "return": "", "signature": " SchemaValidator(OSLSchema schema)", "full_signature": "  SchemaValidator(OSLSchema schema)", "class_method_signature": "SchemaValidator.SchemaValidator(OSLSchema schema)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(TopicIF topic)", "modifiers": "@Override public", "return": "void", "signature": "void validate(TopicIF topic)", "full_signature": "@Override public void validate(TopicIF topic)", "class_method_signature": "SchemaValidator.validate(TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(TopicMapIF topicmap)", "modifiers": "@Override public", "return": "void", "signature": "void validate(TopicMapIF topicmap)", "full_signature": "@Override public void validate(TopicMapIF topicmap)", "class_method_signature": "SchemaValidator.validate(TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(AssociationIF association)", "modifiers": "@Override public", "return": "void", "signature": "void validate(AssociationIF association)", "full_signature": "@Override public void validate(AssociationIF association)", "class_method_signature": "SchemaValidator.validate(AssociationIF association)", "testcase": false, "constructor": false}, {"identifier": "setValidationHandler", "parameters": "(ValidationHandlerIF handler)", "modifiers": "@Override public", "return": "void", "signature": "void setValidationHandler(ValidationHandlerIF handler)", "full_signature": "@Override public void setValidationHandler(ValidationHandlerIF handler)", "class_method_signature": "SchemaValidator.setValidationHandler(ValidationHandlerIF handler)", "testcase": false, "constructor": false}, {"identifier": "getValidationHandler", "parameters": "()", "modifiers": "@Override public", "return": "ValidationHandlerIF", "signature": "ValidationHandlerIF getValidationHandler()", "full_signature": "@Override public ValidationHandlerIF getValidationHandler()", "class_method_signature": "SchemaValidator.getValidationHandler()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(TMObjectIF container, Collection constraints,\n                          Collection objects)", "modifiers": "protected", "return": "void", "signature": "void validate(TMObjectIF container, Collection constraints,\n                          Collection objects)", "full_signature": "protected void validate(TMObjectIF container, Collection constraints,\n                          Collection objects)", "class_method_signature": "SchemaValidator.validate(TMObjectIF container, Collection constraints,\n                          Collection objects)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(TMObjectIF container, Collection constraints,\n                          Collection objects, boolean strict)", "modifiers": "protected", "return": "void", "signature": "void validate(TMObjectIF container, Collection constraints,\n                          Collection objects, boolean strict)", "full_signature": "protected void validate(TMObjectIF container, Collection constraints,\n                          Collection objects, boolean strict)", "class_method_signature": "SchemaValidator.validate(TMObjectIF container, Collection constraints,\n                          Collection objects, boolean strict)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(TMObjectIF object, ConstraintIF constraint)", "modifiers": "protected", "return": "void", "signature": "void validate(TMObjectIF object, ConstraintIF constraint)", "full_signature": "protected void validate(TMObjectIF object, ConstraintIF constraint)", "class_method_signature": "SchemaValidator.validate(TMObjectIF object, ConstraintIF constraint)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(TopicNameIF basename, TopicNameConstraint constraint)", "modifiers": "protected", "return": "void", "signature": "void validate(TopicNameIF basename, TopicNameConstraint constraint)", "full_signature": "protected void validate(TopicNameIF basename, TopicNameConstraint constraint)", "class_method_signature": "SchemaValidator.validate(TopicNameIF basename, TopicNameConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(VariantNameIF variant, VariantConstraint constraint)", "modifiers": "protected", "return": "void", "signature": "void validate(VariantNameIF variant, VariantConstraint constraint)", "full_signature": "protected void validate(VariantNameIF variant, VariantConstraint constraint)", "class_method_signature": "SchemaValidator.validate(VariantNameIF variant, VariantConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(OccurrenceIF occ, OccurrenceConstraint constraint)", "modifiers": "protected", "return": "void", "signature": "void validate(OccurrenceIF occ, OccurrenceConstraint constraint)", "full_signature": "protected void validate(OccurrenceIF occ, OccurrenceConstraint constraint)", "class_method_signature": "SchemaValidator.validate(OccurrenceIF occ, OccurrenceConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(AssociationRoleIF role, TopicRoleConstraint constraint)", "modifiers": "protected", "return": "void", "signature": "void validate(AssociationRoleIF role, TopicRoleConstraint constraint)", "full_signature": "protected void validate(AssociationRoleIF role, TopicRoleConstraint constraint)", "class_method_signature": "SchemaValidator.validate(AssociationRoleIF role, TopicRoleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(AssociationRoleIF role, AssociationRoleConstraint constraint)", "modifiers": "protected", "return": "void", "signature": "void validate(AssociationRoleIF role, AssociationRoleConstraint constraint)", "full_signature": "protected void validate(AssociationRoleIF role, AssociationRoleConstraint constraint)", "class_method_signature": "SchemaValidator.validate(AssociationRoleIF role, AssociationRoleConstraint constraint)", "testcase": false, "constructor": false}, {"identifier": "validateScope", "parameters": "(TMObjectIF container, ScopedIF scoped,\n                               ScopedConstraintIF constraint)", "modifiers": "protected", "return": "void", "signature": "void validateScope(TMObjectIF container, ScopedIF scoped,\n                               ScopedConstraintIF constraint)", "full_signature": "protected void validateScope(TMObjectIF container, ScopedIF scoped,\n                               ScopedConstraintIF constraint)", "class_method_signature": "SchemaValidator.validateScope(TMObjectIF container, ScopedIF scoped,\n                               ScopedConstraintIF constraint)", "testcase": false, "constructor": false}, {"identifier": "findClass", "parameters": "(TMObjectIF object, Collection classes)", "modifiers": "protected", "return": "ConstraintIF", "signature": "ConstraintIF findClass(TMObjectIF object, Collection classes)", "full_signature": "protected ConstraintIF findClass(TMObjectIF object, Collection classes)", "class_method_signature": "SchemaValidator.findClass(TMObjectIF object, Collection classes)", "testcase": false, "constructor": false}, {"identifier": "findClass", "parameters": "(TopicIF topic, Collection classes)", "modifiers": "protected", "return": "ConstraintIF", "signature": "ConstraintIF findClass(TopicIF topic, Collection classes)", "full_signature": "protected ConstraintIF findClass(TopicIF topic, Collection classes)", "class_method_signature": "SchemaValidator.findClass(TopicIF topic, Collection classes)", "testcase": false, "constructor": false}, {"identifier": "findClassFor", "parameters": "(TopicIF tclass, Collection classes)", "modifiers": "protected", "return": "ConstraintIF", "signature": "ConstraintIF findClassFor(TopicIF tclass, Collection classes)", "full_signature": "protected ConstraintIF findClassFor(TopicIF tclass, Collection classes)", "class_method_signature": "SchemaValidator.findClassFor(TopicIF tclass, Collection classes)", "testcase": false, "constructor": false}, {"identifier": "getTopic", "parameters": "(TopicClass klass, TopicMapIF tm)", "modifiers": "protected", "return": "TopicIF", "signature": "TopicIF getTopic(TopicClass klass, TopicMapIF tm)", "full_signature": "protected TopicIF getTopic(TopicClass klass, TopicMapIF tm)", "class_method_signature": "SchemaValidator.getTopic(TopicClass klass, TopicMapIF tm)", "testcase": false, "constructor": false}, {"identifier": "getRange", "parameters": "(CardinalityConstraintIF constraint)", "modifiers": "private", "return": "String", "signature": "String getRange(CardinalityConstraintIF constraint)", "full_signature": "private String getRange(CardinalityConstraintIF constraint)", "class_method_signature": "SchemaValidator.getRange(CardinalityConstraintIF constraint)", "testcase": false, "constructor": false}], "file": "ontopia-schema/src/main/java/net/ontopia/topicmaps/schema/impl/osl/SchemaValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(TopicIF topic)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void validate(TopicIF topic) throws SchemaViolationException {\n    // find appropriate class\n    TopicClass klass = (TopicClass) findClass(topic, schema.getTopicClasses());\n    if (klass == null) {\n      if (schema.isStrict())\n        handler.violation(\"No matching rule for topic\",\n                          topic.getTopicMap(), topic, null);\n      return;\n    }\n\n    // pick out constraint collections\n    Collection basenamecs = klass.getAllTopicNameConstraints();\n    Collection occurrencecs = klass.getAllOccurrenceConstraints();\n    Collection rolecs = klass.getAllRoleConstraints();\n    \n    // other classes\n    Collection others = klass.getOtherClasses();\n    Iterator it = topic.getTypes().iterator();\n    while (it.hasNext()) {\n      TopicIF tclass = (TopicIF) it.next();\n      if (klass.getTypeSpecification().matchType(tclass))\n        continue;\n\n      boolean found = false;\n      Iterator it2 = others.iterator();\n      while (it2.hasNext()) {\n        TypeSpecification typespec = (TypeSpecification) it2.next();\n\n        if (typespec.matchType(tclass)) {\n          found = true;\n          TopicClass otherclass =\n            (TopicClass) findClassFor(tclass, schema.getTopicClasses());\n\n          if (otherclass != null) {\n            basenamecs.addAll(otherclass.getAllTopicNameConstraints());\n            occurrencecs.addAll(otherclass.getAllOccurrenceConstraints());\n            rolecs.addAll(otherclass.getAllRoleConstraints());\n          }\n          break;\n        }\n      }\n\n      if (!found)\n        handler.violation(\"Topic instance of illegal other class\",\n                          topic, tclass, null);\n    }\n\n    // characteristics\n    validate(topic, basenamecs, topic.getTopicNames(), klass.isStrict());\n    validate(topic, occurrencecs, topic.getOccurrences(), klass.isStrict());\n    validate(topic, rolecs, topic.getRoles(), klass.isStrict());\n  }", "signature": "void validate(TopicIF topic)", "full_signature": "@Override public void validate(TopicIF topic)", "class_method_signature": "SchemaValidator.validate(TopicIF topic)", "testcase": false, "constructor": false, "invocations": ["findClass", "getTopicClasses", "isStrict", "violation", "getTopicMap", "getAllTopicNameConstraints", "getAllOccurrenceConstraints", "getAllRoleConstraints", "getOtherClasses", "iterator", "getTypes", "hasNext", "next", "matchType", "getTypeSpecification", "iterator", "hasNext", "next", "matchType", "findClassFor", "getTopicClasses", "addAll", "getAllTopicNameConstraints", "addAll", "getAllOccurrenceConstraints", "addAll", "getAllRoleConstraints", "violation", "validate", "getTopicNames", "isStrict", "validate", "getOccurrences", "isStrict", "validate", "getRoles", "isStrict"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}