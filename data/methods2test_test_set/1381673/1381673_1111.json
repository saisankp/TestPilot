{"test_class": {"identifier": "ConverterTypeUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Map<String, Object> CONVERTIBLE_FROM_STRING;", "modifier": "private static", "type": "Map<String, Object>", "declarator": "CONVERTIBLE_FROM_STRING", "var_name": "CONVERTIBLE_FROM_STRING"}, {"original_string": "private static Map<String, Object> UNCONVERTIBLE_FROM_STRING;", "modifier": "private static", "type": "Map<String, Object>", "declarator": "UNCONVERTIBLE_FROM_STRING", "var_name": "UNCONVERTIBLE_FROM_STRING"}, {"original_string": "private static Map<Object, String> CONVERTIBLE_TO_STRING;", "modifier": "private static", "type": "Map<Object, String>", "declarator": "CONVERTIBLE_TO_STRING", "var_name": "CONVERTIBLE_TO_STRING"}], "file": "kie-pmml-trusty/kie-pmml-commons/src/test/java/org/kie/pmml/commons/utils/ConverterTypeUtilTest.java"}, "test_case": {"identifier": "convertConvertibleToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertConvertibleToString() {\n        CONVERTIBLE_TO_STRING.forEach((s, o) -> {\n            Class<?> expectedClass = o.getClass();\n            Object retrieved = ConverterTypeUtil.convert(expectedClass, s);\n            assertEquals(retrieved, o);\n        });\n    }", "signature": "void convertConvertibleToString()", "full_signature": "@Test public void convertConvertibleToString()", "class_method_signature": "ConverterTypeUtilTest.convertConvertibleToString()", "testcase": true, "constructor": false, "invocations": ["forEach", "getClass", "convert", "assertEquals"]}, "focal_class": {"identifier": "ConverterTypeUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String FAILED_CONVERSION = \"Failed to convert %s to %s\";", "modifier": "static final", "type": "String", "declarator": "FAILED_CONVERSION = \"Failed to convert %s to %s\"", "var_name": "FAILED_CONVERSION"}, {"original_string": "private static Predicate<Class<?>> IS_BOOLEAN =\n            expectedClass -> expectedClass.isAssignableFrom(Boolean.class) || expectedClass.isAssignableFrom(boolean.class);", "modifier": "private static", "type": "Predicate<Class<?>>", "declarator": "IS_BOOLEAN =\n            expectedClass -> expectedClass.isAssignableFrom(Boolean.class) || expectedClass.isAssignableFrom(boolean.class)", "var_name": "IS_BOOLEAN"}, {"original_string": "private static Predicate<Class<?>> IS_INTEGER =\n            expectedClass -> expectedClass.isAssignableFrom(Integer.class) || expectedClass.isAssignableFrom(int.class);", "modifier": "private static", "type": "Predicate<Class<?>>", "declarator": "IS_INTEGER =\n            expectedClass -> expectedClass.isAssignableFrom(Integer.class) || expectedClass.isAssignableFrom(int.class)", "var_name": "IS_INTEGER"}, {"original_string": "private static Predicate<Class<?>> IS_LONG =\n            expectedClass -> expectedClass.isAssignableFrom(Long.class) || expectedClass.isAssignableFrom(long.class);", "modifier": "private static", "type": "Predicate<Class<?>>", "declarator": "IS_LONG =\n            expectedClass -> expectedClass.isAssignableFrom(Long.class) || expectedClass.isAssignableFrom(long.class)", "var_name": "IS_LONG"}, {"original_string": "private static Predicate<Class<?>> IS_DOUBLE =\n            expectedClass -> expectedClass.isAssignableFrom(Double.class) || expectedClass.isAssignableFrom(double.class);", "modifier": "private static", "type": "Predicate<Class<?>>", "declarator": "IS_DOUBLE =\n            expectedClass -> expectedClass.isAssignableFrom(Double.class) || expectedClass.isAssignableFrom(double.class)", "var_name": "IS_DOUBLE"}, {"original_string": "private static Predicate<Class<?>> IS_FLOAT =\n            expectedClass -> expectedClass.isAssignableFrom(Float.class) || expectedClass.isAssignableFrom(float.class);", "modifier": "private static", "type": "Predicate<Class<?>>", "declarator": "IS_FLOAT =\n            expectedClass -> expectedClass.isAssignableFrom(Float.class) || expectedClass.isAssignableFrom(float.class)", "var_name": "IS_FLOAT"}, {"original_string": "private static Predicate<Class<?>> IS_CHARACTER =\n            expectedClass -> expectedClass.isAssignableFrom(Character.class) || expectedClass.isAssignableFrom(char.class);", "modifier": "private static", "type": "Predicate<Class<?>>", "declarator": "IS_CHARACTER =\n            expectedClass -> expectedClass.isAssignableFrom(Character.class) || expectedClass.isAssignableFrom(char.class)", "var_name": "IS_CHARACTER"}, {"original_string": "private static Predicate<Class<?>> IS_BYTE =\n            expectedClass -> expectedClass.isAssignableFrom(Byte.class) || expectedClass.isAssignableFrom(byte.class);", "modifier": "private static", "type": "Predicate<Class<?>>", "declarator": "IS_BYTE =\n            expectedClass -> expectedClass.isAssignableFrom(Byte.class) || expectedClass.isAssignableFrom(byte.class)", "var_name": "IS_BYTE"}, {"original_string": "private static Predicate<Class<?>> IS_SHORT =\n            expectedClass -> expectedClass.isAssignableFrom(Short.class) || expectedClass.isAssignableFrom(short.class);", "modifier": "private static", "type": "Predicate<Class<?>>", "declarator": "IS_SHORT =\n            expectedClass -> expectedClass.isAssignableFrom(Short.class) || expectedClass.isAssignableFrom(short.class)", "var_name": "IS_SHORT"}], "methods": [{"identifier": "ConverterTypeUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConverterTypeUtil()", "full_signature": "private  ConverterTypeUtil()", "class_method_signature": "ConverterTypeUtil.ConverterTypeUtil()", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(Class<?> expectedClass, Object originalObject)", "modifiers": "public static", "return": "Object", "signature": "Object convert(Class<?> expectedClass, Object originalObject)", "full_signature": "public static Object convert(Class<?> expectedClass, Object originalObject)", "class_method_signature": "ConverterTypeUtil.convert(Class<?> expectedClass, Object originalObject)", "testcase": false, "constructor": false}, {"identifier": "convertFromString", "parameters": "(Class<?> expectedClass, String originalObject)", "modifiers": "static", "return": "Object", "signature": "Object convertFromString(Class<?> expectedClass, String originalObject)", "full_signature": "static Object convertFromString(Class<?> expectedClass, String originalObject)", "class_method_signature": "ConverterTypeUtil.convertFromString(Class<?> expectedClass, String originalObject)", "testcase": false, "constructor": false}, {"identifier": "parseBoolean", "parameters": "(String value)", "modifiers": "private static", "return": "boolean", "signature": "boolean parseBoolean(String value)", "full_signature": "private static boolean parseBoolean(String value)", "class_method_signature": "ConverterTypeUtil.parseBoolean(String value)", "testcase": false, "constructor": false}, {"identifier": "parseChar", "parameters": "(String value)", "modifiers": "private static", "return": "char", "signature": "char parseChar(String value)", "full_signature": "private static char parseChar(String value)", "class_method_signature": "ConverterTypeUtil.parseChar(String value)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/ConverterTypeUtil.java"}, "focal_method": {"identifier": "convert", "parameters": "(Class<?> expectedClass, Object originalObject)", "modifiers": "public static", "return": "Object", "body": "public static Object convert(Class<?> expectedClass, Object originalObject) {\n        if (originalObject == null) {\n            return null;\n        }\n        Class<?> currentClass = originalObject.getClass();\n        if (expectedClass.isAssignableFrom(currentClass)) {\n            return originalObject;\n        }\n        Object toReturn;\n        if (currentClass.equals(String.class)) {\n            try {\n                toReturn = convertFromString(expectedClass, (String) originalObject);\n            } catch (Exception e) {\n                throw new KiePMMLException(String.format(FAILED_CONVERSION, originalObject,\n                                                         expectedClass.getName()), e);\n            }\n        } else if (expectedClass == String.class) {\n            toReturn = originalObject.toString();\n        } else {\n            throw new KiePMMLException(String.format(FAILED_CONVERSION, originalObject,\n                                                     expectedClass.getName()));\n        }\n        return toReturn;\n    }", "signature": "Object convert(Class<?> expectedClass, Object originalObject)", "full_signature": "public static Object convert(Class<?> expectedClass, Object originalObject)", "class_method_signature": "ConverterTypeUtil.convert(Class<?> expectedClass, Object originalObject)", "testcase": false, "constructor": false, "invocations": ["getClass", "isAssignableFrom", "equals", "convertFromString", "format", "getName", "toString", "format", "getName"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}