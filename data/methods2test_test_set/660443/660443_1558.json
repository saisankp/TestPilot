{"test_class": {"identifier": "HBondAcceptorCountDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/HBondAcceptorCountDescriptorTest.java"}, "test_case": {"identifier": "exocyclicOxygenInAromaticRing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void exocyclicOxygenInAromaticRing() throws InvalidSmilesException {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer m = sp.parseSmiles(\"Cn1c2nc([nH]c2c(=O)n(c1=O)C)C1CCCC1\");\n\n        HBondAcceptorCountDescriptor hbond_acceptor_desc = new HBondAcceptorCountDescriptor();\n        int actual = ((IntegerResult)hbond_acceptor_desc.calculate(m).getValue()).intValue();\n        org.hamcrest.MatcherAssert.assertThat(actual, CoreMatchers.is(3));\n    }", "signature": "void exocyclicOxygenInAromaticRing()", "full_signature": "@Test public void exocyclicOxygenInAromaticRing()", "class_method_signature": "HBondAcceptorCountDescriptorTest.exocyclicOxygenInAromaticRing()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "intValue", "getValue", "calculate", "assertThat", "is"]}, "focal_class": {"identifier": "HBondAcceptorCountDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private boolean               checkAromaticity = false;", "modifier": "private", "type": "boolean", "declarator": "checkAromaticity = false", "var_name": "checkAromaticity"}, {"original_string": "private static final String[] NAMES            = {\"nHBAcc\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES            = {\"nHBAcc\"}", "var_name": "NAMES"}], "methods": [{"identifier": "HBondAcceptorCountDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " HBondAcceptorCountDescriptor()", "full_signature": "public  HBondAcceptorCountDescriptor()", "class_method_signature": "HBondAcceptorCountDescriptor.HBondAcceptorCountDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "HBondAcceptorCountDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "HBondAcceptorCountDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "HBondAcceptorCountDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "HBondAcceptorCountDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "HBondAcceptorCountDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "HBondAcceptorCountDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "HBondAcceptorCountDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "HBondAcceptorCountDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "HBondAcceptorCountDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/HBondAcceptorCountDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n        int hBondAcceptors = 0;\n\n        IAtomContainer ac;\n        try {\n            ac = (IAtomContainer) atomContainer.clone();\n        } catch (CloneNotSupportedException e) {\n            return getDummyDescriptorValue(e);\n        }\n\n        // aromaticity is detected prior to descriptor calculation if the respective parameter is set to true\n\n        if (checkAromaticity) {\n            try {\n                AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(ac);\n                Aromaticity.cdkLegacy().apply(ac);\n            } catch (CDKException e) {\n                return getDummyDescriptorValue(e);\n            }\n        }\n\n        //org.openscience.cdk.interfaces.IAtom[] atoms = ac.getAtoms();\n        // labelled for loop to allow for labelled continue statements within the loop\n        atomloop: for (IAtom atom : ac.atoms()) {\n            // looking for suitable nitrogen atoms\n            if (atom.getAtomicNumber() == IElement.N && atom.getFormalCharge() <= 0) {\n\n                // excluding nitrogens that are adjacent to an oxygen\n                List<IBond> bonds = ac.getConnectedBondsList(atom);\n                int nPiBonds = 0;\n                for (IBond bond : bonds) {\n                    if (bond.getOther(atom).getAtomicNumber() == IElement.O) continue atomloop;\n                    if (IBond.Order.DOUBLE.equals(bond.getOrder())) nPiBonds++;\n                }\n\n                // if the nitrogen is aromatic and there are no pi bonds then it's\n                // lone pair cannot accept any hydrogen bonds\n                if (atom.getFlag(CDKConstants.ISAROMATIC) && nPiBonds == 0) continue;\n\n                hBondAcceptors++;\n            }\n            // looking for suitable oxygen atoms\n            else if (atom.getAtomicNumber() == IElement.O && atom.getFormalCharge() <= 0) {\n                //excluding oxygens that are adjacent to a nitrogen or to an aromatic carbon\n                List<IBond> neighbours = ac.getConnectedBondsList(atom);\n                for (IBond bond : neighbours) {\n                    IAtom neighbor = bond.getOther(atom);\n                    if (neighbor.getAtomicNumber() == IElement.N ||\n                        (neighbor.getAtomicNumber() == IElement.C &&\n                         neighbor.isAromatic() &&\n                         bond.getOrder() != IBond.Order.DOUBLE))\n                        continue atomloop;;\n                }\n                hBondAcceptors++;\n            }\n        }\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult(\n                hBondAcceptors), getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "HBondAcceptorCountDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["clone", "getDummyDescriptorValue", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "getDummyDescriptorValue", "atoms", "getAtomicNumber", "getFormalCharge", "getConnectedBondsList", "getAtomicNumber", "getOther", "equals", "getOrder", "getFlag", "getAtomicNumber", "getFormalCharge", "getConnectedBondsList", "getOther", "getAtomicNumber", "getAtomicNumber", "isAromatic", "getOrder", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}