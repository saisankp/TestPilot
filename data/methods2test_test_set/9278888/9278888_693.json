{"test_class": {"identifier": "MutableSpanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Pattern CREDIT_CARD = Pattern.compile(\"[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}\");", "modifier": "static final", "type": "Pattern", "declarator": "CREDIT_CARD = Pattern.compile(\"[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}\")", "var_name": "CREDIT_CARD"}, {"original_string": "static final Exception EX1 = new Exception(), EX2 = new Exception();", "modifier": "static final", "type": "Exception", "declarator": "EX1 = new Exception()", "var_name": "EX1"}, {"original_string": "public static List<Supplier<MutableSpan>> PERMUTATIONS = asList(\n    MutableSpan::new,\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.traceId(\"000000000000000a\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.traceId(\"000000000000000b\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localRootId(\"000000000000000a\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localRootId(\"000000000000000b\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.parentId(\"000000000000000a\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.parentId(\"000000000000000b\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.id(\"000000000000000a\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.id(\"000000000000000b\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.setDebug();\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.setShared();\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.kind(Span.Kind.CLIENT);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.kind(Span.Kind.SERVER);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.startTimestamp(1L);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.startTimestamp(2L);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.finishTimestamp(1L);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.finishTimestamp(2L);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.name(\"foo\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.name(\"Foo\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localServiceName(\"foo\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localServiceName(\"Foo\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localIp(\"1.2.3.4\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localIp(\"::1\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localPort(80);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localPort(443);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.remoteServiceName(\"foo\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.remoteServiceName(\"Foo\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.remoteIpAndPort(\"1.2.3.4\", 0);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.remoteIpAndPort(\"::1\", 0);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.remoteIpAndPort(\"127.0.0.1\", 80);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.remoteIpAndPort(\"127.0.0.1\", 443);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.tag(\"error\", \"wasted\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.tag(\"error\", \"\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.annotate(1L, \"wasted\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.annotate(2L, \"wasted\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.error(EX1);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.error(EX2);\n      return span;\n    }\n  );", "modifier": "public static", "type": "List<Supplier<MutableSpan>>", "declarator": "PERMUTATIONS = asList(\n    MutableSpan::new,\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.traceId(\"000000000000000a\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.traceId(\"000000000000000b\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localRootId(\"000000000000000a\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localRootId(\"000000000000000b\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.parentId(\"000000000000000a\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.parentId(\"000000000000000b\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.id(\"000000000000000a\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.id(\"000000000000000b\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.setDebug();\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.setShared();\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.kind(Span.Kind.CLIENT);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.kind(Span.Kind.SERVER);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.startTimestamp(1L);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.startTimestamp(2L);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.finishTimestamp(1L);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.finishTimestamp(2L);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.name(\"foo\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.name(\"Foo\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localServiceName(\"foo\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localServiceName(\"Foo\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localIp(\"1.2.3.4\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localIp(\"::1\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localPort(80);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.localPort(443);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.remoteServiceName(\"foo\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.remoteServiceName(\"Foo\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.remoteIpAndPort(\"1.2.3.4\", 0);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.remoteIpAndPort(\"::1\", 0);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.remoteIpAndPort(\"127.0.0.1\", 80);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.remoteIpAndPort(\"127.0.0.1\", 443);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.tag(\"error\", \"wasted\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.tag(\"error\", \"\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.annotate(1L, \"wasted\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.annotate(2L, \"wasted\");\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.error(EX1);\n      return span;\n    },\n    () -> {\n      MutableSpan span = new MutableSpan();\n      span.error(EX2);\n      return span;\n    }\n  )", "var_name": "PERMUTATIONS"}], "file": "brave/src/test/java/brave/handler/MutableSpanTest.java"}, "test_case": {"identifier": "shared", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shared() {\n    MutableSpan span = new MutableSpan();\n    span.setShared();\n    assertThat(span.shared()).isTrue();\n\n    span.unsetShared();\n    assertThat(span.shared()).isFalse();\n    assertThat(span.flags).isZero();\n  }", "signature": "void shared()", "full_signature": "@Test public void shared()", "class_method_signature": "MutableSpanTest.shared()", "testcase": true, "constructor": false, "invocations": ["setShared", "isTrue", "assertThat", "shared", "unsetShared", "isFalse", "assertThat", "shared", "isZero", "assertThat"]}, "focal_class": {"identifier": "MutableSpan", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "static final Object[] EMPTY_ARRAY = new Object[0];", "modifier": "static final", "type": "Object[]", "declarator": "EMPTY_ARRAY = new Object[0]", "var_name": "EMPTY_ARRAY"}, {"original_string": "static final MutableSpan EMPTY = new MutableSpan();", "modifier": "static final", "type": "MutableSpan", "declarator": "EMPTY = new MutableSpan()", "var_name": "EMPTY"}, {"original_string": "String traceId, localRootId, parentId, id;", "modifier": "", "type": "String", "declarator": "traceId", "var_name": "traceId"}, {"original_string": "Kind kind;", "modifier": "", "type": "Kind", "declarator": "kind", "var_name": "kind"}, {"original_string": "int flags;", "modifier": "", "type": "int", "declarator": "flags", "var_name": "flags"}, {"original_string": "long startTimestamp, finishTimestamp;", "modifier": "", "type": "long", "declarator": "startTimestamp", "var_name": "startTimestamp"}, {"original_string": "String name, localServiceName, localIp, remoteServiceName, remoteIp;", "modifier": "", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "int localPort, remotePort;", "modifier": "", "type": "int", "declarator": "localPort", "var_name": "localPort"}, {"original_string": "Throwable error;", "modifier": "", "type": "Throwable", "declarator": "error", "var_name": "error"}, {"original_string": "Object[] tags = EMPTY_ARRAY, annotations = EMPTY_ARRAY;", "modifier": "", "type": "Object[]", "declarator": "tags = EMPTY_ARRAY", "var_name": "tags"}, {"original_string": "int tagCount, annotationCount;", "modifier": "", "type": "int", "declarator": "tagCount", "var_name": "tagCount"}, {"original_string": "static final ZipkinJsonV2 JSON_ENCODER = new ZipkinJsonV2(Tags.ERROR);", "modifier": "static final", "type": "ZipkinJsonV2", "declarator": "JSON_ENCODER = new ZipkinJsonV2(Tags.ERROR)", "var_name": "JSON_ENCODER"}, {"original_string": "static final String THIRTY_TWO_ZEROS;", "modifier": "static final", "type": "String", "declarator": "THIRTY_TWO_ZEROS", "var_name": "THIRTY_TWO_ZEROS"}], "methods": [{"identifier": "MutableSpan", "parameters": "()", "modifiers": "public", "return": "", "signature": " MutableSpan()", "full_signature": "public  MutableSpan()", "class_method_signature": "MutableSpan.MutableSpan()", "testcase": false, "constructor": true}, {"identifier": "MutableSpan", "parameters": "(TraceContext context, @Nullable MutableSpan defaults)", "modifiers": "public", "return": "", "signature": " MutableSpan(TraceContext context, @Nullable MutableSpan defaults)", "full_signature": "public  MutableSpan(TraceContext context, @Nullable MutableSpan defaults)", "class_method_signature": "MutableSpan.MutableSpan(TraceContext context, @Nullable MutableSpan defaults)", "testcase": false, "constructor": true}, {"identifier": "MutableSpan", "parameters": "(MutableSpan toCopy)", "modifiers": "public", "return": "", "signature": " MutableSpan(MutableSpan toCopy)", "full_signature": "public  MutableSpan(MutableSpan toCopy)", "class_method_signature": "MutableSpan.MutableSpan(MutableSpan toCopy)", "testcase": false, "constructor": true}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Deprecated public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Deprecated public boolean isEmpty()", "class_method_signature": "MutableSpan.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "traceId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String traceId()", "full_signature": "public String traceId()", "class_method_signature": "MutableSpan.traceId()", "testcase": false, "constructor": false}, {"identifier": "traceId", "parameters": "(String traceId)", "modifiers": "public", "return": "void", "signature": "void traceId(String traceId)", "full_signature": "public void traceId(String traceId)", "class_method_signature": "MutableSpan.traceId(String traceId)", "testcase": false, "constructor": false}, {"identifier": "localRootId", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String localRootId()", "full_signature": "@Nullable public String localRootId()", "class_method_signature": "MutableSpan.localRootId()", "testcase": false, "constructor": false}, {"identifier": "localRootId", "parameters": "(String localRootId)", "modifiers": "public", "return": "void", "signature": "void localRootId(String localRootId)", "full_signature": "public void localRootId(String localRootId)", "class_method_signature": "MutableSpan.localRootId(String localRootId)", "testcase": false, "constructor": false}, {"identifier": "parentId", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String parentId()", "full_signature": "@Nullable public String parentId()", "class_method_signature": "MutableSpan.parentId()", "testcase": false, "constructor": false}, {"identifier": "parentId", "parameters": "(@Nullable String parentId)", "modifiers": "public", "return": "void", "signature": "void parentId(@Nullable String parentId)", "full_signature": "public void parentId(@Nullable String parentId)", "class_method_signature": "MutableSpan.parentId(@Nullable String parentId)", "testcase": false, "constructor": false}, {"identifier": "id", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String id()", "full_signature": "public String id()", "class_method_signature": "MutableSpan.id()", "testcase": false, "constructor": false}, {"identifier": "id", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void id(String id)", "full_signature": "public void id(String id)", "class_method_signature": "MutableSpan.id(String id)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String name()", "full_signature": "@Nullable public String name()", "class_method_signature": "MutableSpan.name()", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "(@Nullable String name)", "modifiers": "public", "return": "void", "signature": "void name(@Nullable String name)", "full_signature": "public void name(@Nullable String name)", "class_method_signature": "MutableSpan.name(@Nullable String name)", "testcase": false, "constructor": false}, {"identifier": "startTimestamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long startTimestamp()", "full_signature": "public long startTimestamp()", "class_method_signature": "MutableSpan.startTimestamp()", "testcase": false, "constructor": false}, {"identifier": "startTimestamp", "parameters": "(long startTimestamp)", "modifiers": "public", "return": "void", "signature": "void startTimestamp(long startTimestamp)", "full_signature": "public void startTimestamp(long startTimestamp)", "class_method_signature": "MutableSpan.startTimestamp(long startTimestamp)", "testcase": false, "constructor": false}, {"identifier": "finishTimestamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long finishTimestamp()", "full_signature": "public long finishTimestamp()", "class_method_signature": "MutableSpan.finishTimestamp()", "testcase": false, "constructor": false}, {"identifier": "finishTimestamp", "parameters": "(long finishTimestamp)", "modifiers": "public", "return": "void", "signature": "void finishTimestamp(long finishTimestamp)", "full_signature": "public void finishTimestamp(long finishTimestamp)", "class_method_signature": "MutableSpan.finishTimestamp(long finishTimestamp)", "testcase": false, "constructor": false}, {"identifier": "kind", "parameters": "()", "modifiers": "public", "return": "Kind", "signature": "Kind kind()", "full_signature": "public Kind kind()", "class_method_signature": "MutableSpan.kind()", "testcase": false, "constructor": false}, {"identifier": "kind", "parameters": "(@Nullable Kind kind)", "modifiers": "public", "return": "void", "signature": "void kind(@Nullable Kind kind)", "full_signature": "public void kind(@Nullable Kind kind)", "class_method_signature": "MutableSpan.kind(@Nullable Kind kind)", "testcase": false, "constructor": false}, {"identifier": "localServiceName", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String localServiceName()", "full_signature": "@Nullable public String localServiceName()", "class_method_signature": "MutableSpan.localServiceName()", "testcase": false, "constructor": false}, {"identifier": "localServiceName", "parameters": "(@Nullable String localServiceName)", "modifiers": "public", "return": "void", "signature": "void localServiceName(@Nullable String localServiceName)", "full_signature": "public void localServiceName(@Nullable String localServiceName)", "class_method_signature": "MutableSpan.localServiceName(@Nullable String localServiceName)", "testcase": false, "constructor": false}, {"identifier": "localIp", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String localIp()", "full_signature": "@Nullable public String localIp()", "class_method_signature": "MutableSpan.localIp()", "testcase": false, "constructor": false}, {"identifier": "localIp", "parameters": "(@Nullable String localIp)", "modifiers": "public", "return": "boolean", "signature": "boolean localIp(@Nullable String localIp)", "full_signature": "public boolean localIp(@Nullable String localIp)", "class_method_signature": "MutableSpan.localIp(@Nullable String localIp)", "testcase": false, "constructor": false}, {"identifier": "localPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int localPort()", "full_signature": "public int localPort()", "class_method_signature": "MutableSpan.localPort()", "testcase": false, "constructor": false}, {"identifier": "localPort", "parameters": "(int localPort)", "modifiers": "public", "return": "void", "signature": "void localPort(int localPort)", "full_signature": "public void localPort(int localPort)", "class_method_signature": "MutableSpan.localPort(int localPort)", "testcase": false, "constructor": false}, {"identifier": "remoteServiceName", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String remoteServiceName()", "full_signature": "@Nullable public String remoteServiceName()", "class_method_signature": "MutableSpan.remoteServiceName()", "testcase": false, "constructor": false}, {"identifier": "remoteServiceName", "parameters": "(@Nullable String remoteServiceName)", "modifiers": "public", "return": "void", "signature": "void remoteServiceName(@Nullable String remoteServiceName)", "full_signature": "public void remoteServiceName(@Nullable String remoteServiceName)", "class_method_signature": "MutableSpan.remoteServiceName(@Nullable String remoteServiceName)", "testcase": false, "constructor": false}, {"identifier": "remoteIp", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String remoteIp()", "full_signature": "@Nullable public String remoteIp()", "class_method_signature": "MutableSpan.remoteIp()", "testcase": false, "constructor": false}, {"identifier": "remoteIp", "parameters": "(@Nullable String remoteIp)", "modifiers": "public", "return": "void", "signature": "void remoteIp(@Nullable String remoteIp)", "full_signature": "public void remoteIp(@Nullable String remoteIp)", "class_method_signature": "MutableSpan.remoteIp(@Nullable String remoteIp)", "testcase": false, "constructor": false}, {"identifier": "remotePort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int remotePort()", "full_signature": "public int remotePort()", "class_method_signature": "MutableSpan.remotePort()", "testcase": false, "constructor": false}, {"identifier": "remotePort", "parameters": "(int remotePort)", "modifiers": "public", "return": "void", "signature": "void remotePort(int remotePort)", "full_signature": "public void remotePort(int remotePort)", "class_method_signature": "MutableSpan.remotePort(int remotePort)", "testcase": false, "constructor": false}, {"identifier": "remoteIpAndPort", "parameters": "(@Nullable String remoteIp, int remotePort)", "modifiers": "public", "return": "boolean", "signature": "boolean remoteIpAndPort(@Nullable String remoteIp, int remotePort)", "full_signature": "public boolean remoteIpAndPort(@Nullable String remoteIp, int remotePort)", "class_method_signature": "MutableSpan.remoteIpAndPort(@Nullable String remoteIp, int remotePort)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "()", "modifiers": "public", "return": "Throwable", "signature": "Throwable error()", "full_signature": "public Throwable error()", "class_method_signature": "MutableSpan.error()", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(@Nullable Throwable error)", "modifiers": "public", "return": "void", "signature": "void error(@Nullable Throwable error)", "full_signature": "public void error(@Nullable Throwable error)", "class_method_signature": "MutableSpan.error(@Nullable Throwable error)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean debug()", "full_signature": "public boolean debug()", "class_method_signature": "MutableSpan.debug()", "testcase": false, "constructor": false}, {"identifier": "setDebug", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setDebug()", "full_signature": "public void setDebug()", "class_method_signature": "MutableSpan.setDebug()", "testcase": false, "constructor": false}, {"identifier": "unsetDebug", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unsetDebug()", "full_signature": "public void unsetDebug()", "class_method_signature": "MutableSpan.unsetDebug()", "testcase": false, "constructor": false}, {"identifier": "shared", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean shared()", "full_signature": "public boolean shared()", "class_method_signature": "MutableSpan.shared()", "testcase": false, "constructor": false}, {"identifier": "setShared", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setShared()", "full_signature": "public void setShared()", "class_method_signature": "MutableSpan.setShared()", "testcase": false, "constructor": false}, {"identifier": "unsetShared", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unsetShared()", "full_signature": "public void unsetShared()", "class_method_signature": "MutableSpan.unsetShared()", "testcase": false, "constructor": false}, {"identifier": "annotationCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int annotationCount()", "full_signature": "public int annotationCount()", "class_method_signature": "MutableSpan.annotationCount()", "testcase": false, "constructor": false}, {"identifier": "annotationTimestampAt", "parameters": "(int i)", "modifiers": "public", "return": "long", "signature": "long annotationTimestampAt(int i)", "full_signature": "public long annotationTimestampAt(int i)", "class_method_signature": "MutableSpan.annotationTimestampAt(int i)", "testcase": false, "constructor": false}, {"identifier": "annotationValueAt", "parameters": "(int i)", "modifiers": "public", "return": "String", "signature": "String annotationValueAt(int i)", "full_signature": "public String annotationValueAt(int i)", "class_method_signature": "MutableSpan.annotationValueAt(int i)", "testcase": false, "constructor": false}, {"identifier": "annotations", "parameters": "()", "modifiers": "public", "return": "Collection<Map.Entry<Long, String>>", "signature": "Collection<Map.Entry<Long, String>> annotations()", "full_signature": "public Collection<Map.Entry<Long, String>> annotations()", "class_method_signature": "MutableSpan.annotations()", "testcase": false, "constructor": false}, {"identifier": "forEachAnnotation", "parameters": "(AnnotationConsumer<T> annotationConsumer, T target)", "modifiers": "public", "return": "void", "signature": "void forEachAnnotation(AnnotationConsumer<T> annotationConsumer, T target)", "full_signature": "public void forEachAnnotation(AnnotationConsumer<T> annotationConsumer, T target)", "class_method_signature": "MutableSpan.forEachAnnotation(AnnotationConsumer<T> annotationConsumer, T target)", "testcase": false, "constructor": false}, {"identifier": "forEachAnnotation", "parameters": "(AnnotationUpdater annotationUpdater)", "modifiers": "public", "return": "void", "signature": "void forEachAnnotation(AnnotationUpdater annotationUpdater)", "full_signature": "public void forEachAnnotation(AnnotationUpdater annotationUpdater)", "class_method_signature": "MutableSpan.forEachAnnotation(AnnotationUpdater annotationUpdater)", "testcase": false, "constructor": false}, {"identifier": "containsAnnotation", "parameters": "(String value)", "modifiers": "public", "return": "boolean", "signature": "boolean containsAnnotation(String value)", "full_signature": "public boolean containsAnnotation(String value)", "class_method_signature": "MutableSpan.containsAnnotation(String value)", "testcase": false, "constructor": false}, {"identifier": "annotate", "parameters": "(long timestamp, String value)", "modifiers": "public", "return": "void", "signature": "void annotate(long timestamp, String value)", "full_signature": "public void annotate(long timestamp, String value)", "class_method_signature": "MutableSpan.annotate(long timestamp, String value)", "testcase": false, "constructor": false}, {"identifier": "tagCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int tagCount()", "full_signature": "public int tagCount()", "class_method_signature": "MutableSpan.tagCount()", "testcase": false, "constructor": false}, {"identifier": "tagKeyAt", "parameters": "(int i)", "modifiers": "public", "return": "String", "signature": "String tagKeyAt(int i)", "full_signature": "public String tagKeyAt(int i)", "class_method_signature": "MutableSpan.tagKeyAt(int i)", "testcase": false, "constructor": false}, {"identifier": "tagValueAt", "parameters": "(int i)", "modifiers": "public", "return": "String", "signature": "String tagValueAt(int i)", "full_signature": "public String tagValueAt(int i)", "class_method_signature": "MutableSpan.tagValueAt(int i)", "testcase": false, "constructor": false}, {"identifier": "tags", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> tags()", "full_signature": "public Map<String, String> tags()", "class_method_signature": "MutableSpan.tags()", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "(String key)", "modifiers": "@Nullable public", "return": "String", "signature": "String tag(String key)", "full_signature": "@Nullable public String tag(String key)", "class_method_signature": "MutableSpan.tag(String key)", "testcase": false, "constructor": false}, {"identifier": "removeTag", "parameters": "(String key)", "modifiers": "@Nullable public", "return": "String", "signature": "String removeTag(String key)", "full_signature": "@Nullable public String removeTag(String key)", "class_method_signature": "MutableSpan.removeTag(String key)", "testcase": false, "constructor": false}, {"identifier": "forEachTag", "parameters": "(TagConsumer<T> tagConsumer, T target)", "modifiers": "public", "return": "void", "signature": "void forEachTag(TagConsumer<T> tagConsumer, T target)", "full_signature": "public void forEachTag(TagConsumer<T> tagConsumer, T target)", "class_method_signature": "MutableSpan.forEachTag(TagConsumer<T> tagConsumer, T target)", "testcase": false, "constructor": false}, {"identifier": "forEachTag", "parameters": "(TagUpdater tagUpdater)", "modifiers": "public", "return": "void", "signature": "void forEachTag(TagUpdater tagUpdater)", "full_signature": "public void forEachTag(TagUpdater tagUpdater)", "class_method_signature": "MutableSpan.forEachTag(TagUpdater tagUpdater)", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "(String key, String value)", "modifiers": "public", "return": "void", "signature": "void tag(String key, String value)", "full_signature": "public void tag(String key, String value)", "class_method_signature": "MutableSpan.tag(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MutableSpan.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MutableSpan.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "MutableSpan.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Object[] input, int i, Object key, Object value)", "modifiers": "static", "return": "Object[]", "signature": "Object[] add(Object[] input, int i, Object key, Object value)", "full_signature": "static Object[] add(Object[] input, int i, Object key, Object value)", "class_method_signature": "MutableSpan.add(Object[] input, int i, Object key, Object value)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Object[] input, int i, Object value)", "modifiers": "static", "return": "void", "signature": "void update(Object[] input, int i, Object value)", "full_signature": "static void update(Object[] input, int i, Object value)", "class_method_signature": "MutableSpan.update(Object[] input, int i, Object value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object[] input, int i)", "modifiers": "static", "return": "void", "signature": "void remove(Object[] input, int i)", "full_signature": "static void remove(Object[] input, int i)", "class_method_signature": "MutableSpan.remove(Object[] input, int i)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Object[] input)", "modifiers": "static", "return": "Object[]", "signature": "Object[] copy(Object[] input)", "full_signature": "static Object[] copy(Object[] input)", "class_method_signature": "MutableSpan.copy(Object[] input)", "testcase": false, "constructor": false}, {"identifier": "entriesEqual", "parameters": "(Object[] left, int leftCount, Object[] right, int rightCount)", "modifiers": "static", "return": "boolean", "signature": "boolean entriesEqual(Object[] left, int leftCount, Object[] right, int rightCount)", "full_signature": "static boolean entriesEqual(Object[] left, int leftCount, Object[] right, int rightCount)", "class_method_signature": "MutableSpan.entriesEqual(Object[] left, int leftCount, Object[] right, int rightCount)", "testcase": false, "constructor": false}, {"identifier": "entriesHashCode", "parameters": "(Object[] entries, int count)", "modifiers": "static", "return": "int", "signature": "int entriesHashCode(Object[] entries, int count)", "full_signature": "static int entriesHashCode(Object[] entries, int count)", "class_method_signature": "MutableSpan.entriesHashCode(Object[] entries, int count)", "testcase": false, "constructor": false}, {"identifier": "normalizeIdField", "parameters": "(String field, @Nullable String id, boolean isNullable)", "modifiers": "@Nullable static", "return": "String", "signature": "String normalizeIdField(String field, @Nullable String id, boolean isNullable)", "full_signature": "@Nullable static String normalizeIdField(String field, @Nullable String id, boolean isNullable)", "class_method_signature": "MutableSpan.normalizeIdField(String field, @Nullable String id, boolean isNullable)", "testcase": false, "constructor": false}, {"identifier": "validateHexAndReturnPadding", "parameters": "(String field, String value, int desiredLength)", "modifiers": "static", "return": "int", "signature": "int validateHexAndReturnPadding(String field, String value, int desiredLength)", "full_signature": "static int validateHexAndReturnPadding(String field, String value, int desiredLength)", "class_method_signature": "MutableSpan.validateHexAndReturnPadding(String field, String value, int desiredLength)", "testcase": false, "constructor": false}, {"identifier": "padLeft", "parameters": "(String id, int desiredLength, int existingPadding)", "modifiers": "static", "return": "String", "signature": "String padLeft(String id, int desiredLength, int existingPadding)", "full_signature": "static String padLeft(String id, int desiredLength, int existingPadding)", "class_method_signature": "MutableSpan.padLeft(String id, int desiredLength, int existingPadding)", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(@Nullable Object a, @Nullable Object b)", "modifiers": "static", "return": "boolean", "signature": "boolean equal(@Nullable Object a, @Nullable Object b)", "full_signature": "static boolean equal(@Nullable Object a, @Nullable Object b)", "class_method_signature": "MutableSpan.equal(@Nullable Object a, @Nullable Object b)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/handler/MutableSpan.java"}, "focal_method": {"identifier": "shared", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean shared() {\n    return (flags & FLAG_SHARED) == FLAG_SHARED;\n  }", "signature": "boolean shared()", "full_signature": "public boolean shared()", "class_method_signature": "MutableSpan.shared()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}