{"test_class": {"identifier": "TestNameNodeResourceChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Configuration conf;", "modifier": "private", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private File baseDir;", "modifier": "private", "type": "File", "declarator": "baseDir", "var_name": "baseDir"}, {"original_string": "private File nameDir;", "modifier": "private", "type": "File", "declarator": "nameDir", "var_name": "nameDir"}], "file": "adfs-hdfs-project/adfs-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestNameNodeResourceChecker.java"}, "test_case": {"identifier": "testCheckingExtraVolumes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCheckingExtraVolumes() throws IOException {\n    Configuration conf = new Configuration();\n    File nameDir = new File(System.getProperty(\"test.build.data\"), \"name-dir\");\n    nameDir.mkdirs();\n    conf.set(\"dfs.name.dir\", nameDir.getAbsolutePath());\n    conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKED_VOLUMES_KEY, nameDir.getAbsolutePath());\n    conf.setLong(DFSConfigKeys.DFS_NAMENODE_DU_RESERVED_KEY, Long.MAX_VALUE);\n\n    NameNodeResourceChecker nb = new NameNodeResourceChecker(conf);\n\n    assertEquals(\"Should not check the same volume more than once.\",\n        1, nb.getVolumesLowOnSpace().size());\n  }", "signature": "void testCheckingExtraVolumes()", "full_signature": "@Test public void testCheckingExtraVolumes()", "class_method_signature": "TestNameNodeResourceChecker.testCheckingExtraVolumes()", "testcase": true, "constructor": false, "invocations": ["getProperty", "mkdirs", "set", "getAbsolutePath", "set", "getAbsolutePath", "setLong", "assertEquals", "size", "getVolumesLowOnSpace"]}, "focal_class": {"identifier": "NameNodeResourceChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(NameNodeResourceChecker.class.getName());", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(NameNodeResourceChecker.class.getName())", "var_name": "LOG"}, {"original_string": "private long duReserved;", "modifier": "private", "type": "long", "declarator": "duReserved", "var_name": "duReserved"}, {"original_string": "private final Configuration conf;", "modifier": "private final", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private Map<String, DF> volumes;", "modifier": "private", "type": "Map<String, DF>", "declarator": "volumes", "var_name": "volumes"}], "methods": [{"identifier": "NameNodeResourceChecker", "parameters": "(Configuration conf)", "modifiers": "public", "return": "", "signature": " NameNodeResourceChecker(Configuration conf)", "full_signature": "public  NameNodeResourceChecker(Configuration conf)", "class_method_signature": "NameNodeResourceChecker.NameNodeResourceChecker(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "addDirsToCheck", "parameters": "(Collection<File> directoriesToCheck)", "modifiers": "private", "return": "void", "signature": "void addDirsToCheck(Collection<File> directoriesToCheck)", "full_signature": "private void addDirsToCheck(Collection<File> directoriesToCheck)", "class_method_signature": "NameNodeResourceChecker.addDirsToCheck(Collection<File> directoriesToCheck)", "testcase": false, "constructor": false}, {"identifier": "hasAvailableDiskSpace", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean hasAvailableDiskSpace()", "full_signature": " boolean hasAvailableDiskSpace()", "class_method_signature": "NameNodeResourceChecker.hasAvailableDiskSpace()", "testcase": false, "constructor": false}, {"identifier": "getVolumesLowOnSpace", "parameters": "()", "modifiers": "", "return": "Collection<String>", "signature": "Collection<String> getVolumesLowOnSpace()", "full_signature": " Collection<String> getVolumesLowOnSpace()", "class_method_signature": "NameNodeResourceChecker.getVolumesLowOnSpace()", "testcase": false, "constructor": false}, {"identifier": "setVolumes", "parameters": "(Map<String, DF> volumes)", "modifiers": "", "return": "void", "signature": "void setVolumes(Map<String, DF> volumes)", "full_signature": " void setVolumes(Map<String, DF> volumes)", "class_method_signature": "NameNodeResourceChecker.setVolumes(Map<String, DF> volumes)", "testcase": false, "constructor": false}], "file": "adfs-hdfs-project/adfs-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeResourceChecker.java"}, "focal_method": {"identifier": "getVolumesLowOnSpace", "parameters": "()", "modifiers": "", "return": "Collection<String>", "body": "Collection<String> getVolumesLowOnSpace() throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Going to check the following volumes disk space: \" + volumes);\n    }\n    Collection<String> lowVolumes = new ArrayList<String>();\n    for (DF volume : volumes.values()) {\n      long availableSpace = volume.getAvailable();\n      String fileSystem = volume.getFilesystem();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Space available on volume '\" + fileSystem + \"' is \" + availableSpace);\n      }\n      if (availableSpace < duReserved) {\n        LOG.warn(\"Space available on volume '\" + fileSystem + \"' is \"\n            + availableSpace +\n            \", which is below the configured reserved amount \" + duReserved);\n        lowVolumes.add(volume.getFilesystem());\n      }\n    }\n    return lowVolumes;\n  }", "signature": "Collection<String> getVolumesLowOnSpace()", "full_signature": " Collection<String> getVolumesLowOnSpace()", "class_method_signature": "NameNodeResourceChecker.getVolumesLowOnSpace()", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "values", "getAvailable", "getFilesystem", "isDebugEnabled", "debug", "warn", "add", "getFilesystem"]}, "repository": {"repo_id": 3937799, "url": "https://github.com/taobao/ADFS", "language": "Java", "is_fork": false, "fork_count": 50, "stargazer_count": 108, "size": 53300, "license": "licensed"}}