{"test_class": {"identifier": "StandardGISGridSetTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private static final String SHP_RESOURCE = MapPolylineGridSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\";", "modifier": "private static final", "type": "String", "declarator": "SHP_RESOURCE = MapPolylineGridSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\"", "var_name": "SHP_RESOURCE"}, {"original_string": "private static final int MAX_REFERENCE_SIZE = 1000;", "modifier": "private static final", "type": "int", "declarator": "MAX_REFERENCE_SIZE = 1000", "var_name": "MAX_REFERENCE_SIZE"}, {"original_string": "private ArrayList<GISPrimitive> reference = null;", "modifier": "private", "type": "ArrayList<GISPrimitive>", "declarator": "reference = null", "var_name": "reference"}, {"original_string": "private Point2d center = null;", "modifier": "private", "type": "Point2d", "declarator": "center = null", "var_name": "center"}, {"original_string": "private Rectangle2d worldBounds = null;", "modifier": "private", "type": "Rectangle2d", "declarator": "worldBounds = null", "var_name": "worldBounds"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/grid/StandardGISGridSetTest.java"}, "test_case": {"identifier": "testAddAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddAll() {\n\t\tthis.reference.clear();\n\t\tthis.reference.add(new MapPoint(1000,1000));\n\t\tthis.reference.add(new MapPoint(0,0));\n\t\tthis.reference.add(new MapPoint(501,801));\n\t\tthis.reference.add(new MapPoint(500,800));\n\t\tthis.reference.add(new MapPoint(502,802));\n\t\tthis.reference.add(new MapPoint(100,800));\n\t\tthis.reference.add(new MapPoint(800,0));\n\n\t\tRectangle2d bounds = new Rectangle2d();\n\t\t\n\t\tList<Point2d> transformed = new ArrayList<>();\n\t\tfor (final GISPrimitive it : this.reference) {\n\t\t\ttransformed.add(((MapPoint) it).getPoint());\n\t\t}\n\t\t\n\t\tbounds.setFromPointCloud(transformed);\n\n\t\tStandardGISGridSet<GISPrimitive> test = new StandardGISGridSet<>(100, 100, bounds);\n\t\tassertTrue(test.addAll(this.reference));\n\n\t\tint nb = 0;\n\t\tfor(GISPrimitive p : test) {\n\t\t\tassertTrue(this.reference.contains(p));\n\t\t\t++nb;\n\t\t}\n\n\t\tassertEquals(this.reference.size(), nb);\n\t}", "signature": "void testAddAll()", "full_signature": "@Test public void testAddAll()", "class_method_signature": "StandardGISGridSetTest.testAddAll()", "testcase": true, "constructor": false, "invocations": ["clear", "add", "add", "add", "add", "add", "add", "add", "add", "getPoint", "setFromPointCloud", "assertTrue", "addAll", "assertTrue", "contains", "assertEquals", "size"]}, "focal_class": {"identifier": "StandardGISGridSet", "superclass": "extends AbstractGISGridSet<P>", "interfaces": "", "fields": [], "methods": [{"identifier": "StandardGISGridSet", "parameters": "(int nRows, int nColumns, Rectangle2d bounds)", "modifiers": "public", "return": "", "signature": " StandardGISGridSet(int nRows, int nColumns, Rectangle2d bounds)", "full_signature": "public  StandardGISGridSet(int nRows, int nColumns, Rectangle2d bounds)", "class_method_signature": "StandardGISGridSet.StandardGISGridSet(int nRows, int nColumns, Rectangle2d bounds)", "testcase": false, "constructor": true}, {"identifier": "StandardGISGridSet", "parameters": "(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "modifiers": "public", "return": "", "signature": " StandardGISGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "full_signature": "public  StandardGISGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "class_method_signature": "StandardGISGridSet.StandardGISGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(P point)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(P point)", "full_signature": "@Override public boolean add(P point)", "class_method_signature": "StandardGISGridSet.add(P point)", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/grid/StandardGISGridSet.java"}, "focal_method": {"identifier": "add", "parameters": "(P point)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean add(P point) {\n\t\tif (this.grid.addElement(point)) {\n\t\t\tupdateComponentType(point);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean add(P point)", "full_signature": "@Override public boolean add(P point)", "class_method_signature": "StandardGISGridSet.add(P point)", "testcase": false, "constructor": false, "invocations": ["addElement", "updateComponentType"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}