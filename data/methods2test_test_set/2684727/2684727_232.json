{"test_class": {"identifier": "PaymentMethodsTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String METHOD1 = \"name1\";", "modifier": "private static final", "type": "String", "declarator": "METHOD1 = \"name1\"", "var_name": "METHOD1"}, {"original_string": "private static final String METHOD2 = \"name2\";", "modifier": "private static final", "type": "String", "declarator": "METHOD2 = \"name2\"", "var_name": "METHOD2"}, {"original_string": "private static final String METHOD3 = \"name3\";", "modifier": "private static final", "type": "String", "declarator": "METHOD3 = \"name3\"", "var_name": "METHOD3"}, {"original_string": "private static final int ORDER_ID1 = 1;", "modifier": "private static final", "type": "int", "declarator": "ORDER_ID1 = 1", "var_name": "ORDER_ID1"}, {"original_string": "private static final int ORDER_ID2 = 2;", "modifier": "private static final", "type": "int", "declarator": "ORDER_ID2 = 2", "var_name": "ORDER_ID2"}, {"original_string": "private static final UUID UUID1 = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "UUID1 = UUID.randomUUID()", "var_name": "UUID1"}, {"original_string": "private static final UUID UUID2 = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "UUID2 = UUID.randomUUID()", "var_name": "UUID2"}, {"original_string": "PaymentMethodsTable mPaymentMethodsTable;", "modifier": "", "type": "PaymentMethodsTable", "declarator": "mPaymentMethodsTable", "var_name": "mPaymentMethodsTable"}, {"original_string": "@Mock\n    SQLiteDatabase mSQLiteDatabase;", "modifier": "@Mock", "type": "SQLiteDatabase", "declarator": "mSQLiteDatabase", "var_name": "mSQLiteDatabase"}, {"original_string": "@Mock\n    TableDefaultsCustomizer mTableDefaultsCustomizer;", "modifier": "@Mock", "type": "TableDefaultsCustomizer", "declarator": "mTableDefaultsCustomizer", "var_name": "mTableDefaultsCustomizer"}, {"original_string": "@Mock\n    OrderingPreferencesManager orderingPreferencesManager;", "modifier": "@Mock", "type": "OrderingPreferencesManager", "declarator": "orderingPreferencesManager", "var_name": "orderingPreferencesManager"}, {"original_string": "@Captor\n    ArgumentCaptor<String> mSqlCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<String>", "declarator": "mSqlCaptor", "var_name": "mSqlCaptor"}, {"original_string": "SQLiteOpenHelper mSQLiteOpenHelper;", "modifier": "", "type": "SQLiteOpenHelper", "declarator": "mSQLiteOpenHelper", "var_name": "mSQLiteOpenHelper"}, {"original_string": "PaymentMethod mPaymentMethod1;", "modifier": "", "type": "PaymentMethod", "declarator": "mPaymentMethod1", "var_name": "mPaymentMethod1"}, {"original_string": "PaymentMethod mPaymentMethod2;", "modifier": "", "type": "PaymentMethod", "declarator": "mPaymentMethod2", "var_name": "mPaymentMethod2"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/tables/PaymentMethodsTableTest.java"}, "test_case": {"identifier": "onUpgradeFromV18", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onUpgradeFromV18() {\n        final int oldVersion = 18;\n        final int newVersion = DatabaseHelper.DATABASE_VERSION;\n\n        final TableDefaultsCustomizer customizer = mock(TableDefaultsCustomizer.class);\n        mPaymentMethodsTable.onUpgrade(mSQLiteDatabase, oldVersion, newVersion, customizer);\n        verify(mSQLiteDatabase, atLeastOnce()).execSQL(mSqlCaptor.capture());\n        verify(customizer, never()).insertPaymentMethodDefaults(mPaymentMethodsTable);\n\n        final List<String> allValues = mSqlCaptor.getAllValues();\n        assertEquals(2, allValues.size());\n        assertEquals(allValues.get(0), \"ALTER TABLE \" + mPaymentMethodsTable.getTableName() + \" ADD entity_uuid TEXT\");\n    }", "signature": "void onUpgradeFromV18()", "full_signature": "@Test public void onUpgradeFromV18()", "class_method_signature": "PaymentMethodsTableTest.onUpgradeFromV18()", "testcase": true, "constructor": false, "invocations": ["mock", "onUpgrade", "execSQL", "verify", "atLeastOnce", "capture", "insertPaymentMethodDefaults", "verify", "never", "getAllValues", "assertEquals", "size", "assertEquals", "get", "getTableName"]}, "focal_class": {"identifier": "PaymentMethodsTable", "superclass": "extends AbstractSqlTable<PaymentMethod>", "interfaces": "", "fields": [{"original_string": "public static final String TABLE_NAME = \"paymentmethods\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_NAME = \"paymentmethods\"", "var_name": "TABLE_NAME"}, {"original_string": "public static final String COLUMN_METHOD = \"method\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_METHOD = \"method\"", "var_name": "COLUMN_METHOD"}, {"original_string": "public static final String COLUMN_REIMBURSABLE = \"expenseable\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_REIMBURSABLE = \"expenseable\"", "var_name": "COLUMN_REIMBURSABLE"}], "methods": [{"identifier": "PaymentMethodsTable", "parameters": "(@NonNull SQLiteOpenHelper sqLiteOpenHelper,\n                               @NonNull OrderingPreferencesManager orderingPreferencesManager)", "modifiers": "public", "return": "", "signature": " PaymentMethodsTable(@NonNull SQLiteOpenHelper sqLiteOpenHelper,\n                               @NonNull OrderingPreferencesManager orderingPreferencesManager)", "full_signature": "public  PaymentMethodsTable(@NonNull SQLiteOpenHelper sqLiteOpenHelper,\n                               @NonNull OrderingPreferencesManager orderingPreferencesManager)", "class_method_signature": "PaymentMethodsTable.PaymentMethodsTable(@NonNull SQLiteOpenHelper sqLiteOpenHelper,\n                               @NonNull OrderingPreferencesManager orderingPreferencesManager)", "testcase": false, "constructor": true}, {"identifier": "onCreate", "parameters": "(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void onCreate(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "full_signature": "@Override public synchronized void onCreate(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "class_method_signature": "PaymentMethodsTable.onCreate(@NonNull SQLiteDatabase db, @NonNull TableDefaultsCustomizer customizer)", "testcase": false, "constructor": false}, {"identifier": "onUpgrade", "parameters": "(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "full_signature": "@Override public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "class_method_signature": "PaymentMethodsTable.onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "testcase": false, "constructor": false}, {"identifier": "hasCustomOrderIdColumn", "parameters": "(@NonNull SQLiteDatabase db)", "modifiers": "private", "return": "boolean", "signature": "boolean hasCustomOrderIdColumn(@NonNull SQLiteDatabase db)", "full_signature": "private boolean hasCustomOrderIdColumn(@NonNull SQLiteDatabase db)", "class_method_signature": "PaymentMethodsTable.hasCustomOrderIdColumn(@NonNull SQLiteDatabase db)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/tables/PaymentMethodsTable.java"}, "focal_method": {"identifier": "onUpgrade", "parameters": "(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n    public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer) {\n        super.onUpgrade(db, oldVersion, newVersion, customizer);\n        if (oldVersion <= 11) {\n            final String sql = \"CREATE TABLE \" + getTableName() + \" (\"\n                    + COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\n                    + COLUMN_METHOD + \" TEXT\"\n                    + \");\";\n\n            Logger.debug(this, sql);\n            db.execSQL(sql);\n            customizer.insertPaymentMethodDefaults(this);\n        }\n\n        if (oldVersion <= 14) { // v14 => v15. adding sync info\n            onUpgradeToAddSyncInformation(db, oldVersion, newVersion);\n        }\n\n        if (oldVersion <= 15) { // v15 => v16. adding custom_order_id column\n            final String addCustomOrderColumn = String.format(\"ALTER TABLE %s ADD COLUMN %s INTEGER DEFAULT 0\",\n                    getTableName(), AbstractColumnTable.COLUMN_CUSTOM_ORDER_ID);\n            Logger.debug(this, addCustomOrderColumn);\n            db.execSQL(addCustomOrderColumn);\n        }\n\n        if (oldVersion <= 16) { // v16 => 17. add the custom_order_id column to iOS (which was forgotten)\n            if (!hasCustomOrderIdColumn(db)) {\n                final String addCustomOrderColumn = String.format(\"ALTER TABLE %s ADD COLUMN %s INTEGER DEFAULT 0\", getTableName(), AbstractColumnTable.COLUMN_CUSTOM_ORDER_ID);\n                final String updateDefaultCustomOrder = String.format(\"UPDATE %s SET %s = ROWID\", getTableName(), AbstractColumnTable.COLUMN_CUSTOM_ORDER_ID);\n                Logger.debug(this, addCustomOrderColumn);\n                Logger.debug(this, updateDefaultCustomOrder);\n                db.execSQL(addCustomOrderColumn);\n                db.execSQL(updateDefaultCustomOrder);\n            }\n        }\n\n        if (oldVersion <= 18) { // v18 => 19 added UUID column\n            onUpgradeToAddUUID(db, oldVersion);\n        }\n\n        if (oldVersion <= 21) { // v20 => 21 added reimbursable column\n            final String alterPaymentMethods = \"ALTER TABLE \" + getTableName() + \" ADD COLUMN \" + COLUMN_REIMBURSABLE + \" BOOLEAN DEFAULT 0\";\n            Logger.debug(this, alterPaymentMethods);\n            db.execSQL(alterPaymentMethods);\n        }\n    }", "signature": "void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "full_signature": "@Override public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "class_method_signature": "PaymentMethodsTable.onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer)", "testcase": false, "constructor": false, "invocations": ["onUpgrade", "getTableName", "debug", "execSQL", "insertPaymentMethodDefaults", "onUpgradeToAddSyncInformation", "format", "getTableName", "debug", "execSQL", "hasCustomOrderIdColumn", "format", "getTableName", "format", "getTableName", "debug", "debug", "execSQL", "execSQL", "onUpgradeToAddUUID", "getTableName", "debug", "execSQL"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}