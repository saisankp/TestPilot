{"test_class": {"identifier": "ColumnRangesTest", "superclass": "", "interfaces": "", "fields": [], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/sql/optimizer/rule/range/ColumnRangesTest.java"}, "test_case": {"identifier": "notColLtValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void notColLtValue() {\n        ConstantExpression value = constant(\"joe\");\n        ConditionExpression compare = not(compare(value, Comparison.LT, firstName));\n        ColumnRanges expected = null;\n        assertEquals(expected, ColumnRanges.rangeAtNode(compare));\n    }", "signature": "void notColLtValue()", "full_signature": "@Test public void notColLtValue()", "class_method_signature": "ColumnRangesTest.notColLtValue()", "testcase": true, "constructor": false, "invocations": ["constant", "not", "compare", "assertEquals", "rangeAtNode"]}, "focal_class": {"identifier": "ColumnRanges", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ColumnExpression columnExpression;", "modifier": "private", "type": "ColumnExpression", "declarator": "columnExpression", "var_name": "columnExpression"}, {"original_string": "private Set<? extends ConditionExpression> rootConditions;", "modifier": "private", "type": "Set<? extends ConditionExpression>", "declarator": "rootConditions", "var_name": "rootConditions"}, {"original_string": "private List<RangeSegment> segments;", "modifier": "private", "type": "List<RangeSegment>", "declarator": "segments", "var_name": "segments"}], "methods": [{"identifier": "rangeAtNode", "parameters": "(ConditionExpression node)", "modifiers": "public static", "return": "ColumnRanges", "signature": "ColumnRanges rangeAtNode(ConditionExpression node)", "full_signature": "public static ColumnRanges rangeAtNode(ConditionExpression node)", "class_method_signature": "ColumnRanges.rangeAtNode(ConditionExpression node)", "testcase": false, "constructor": false}, {"identifier": "andRanges", "parameters": "(ColumnRanges left, ColumnRanges right)", "modifiers": "public static", "return": "ColumnRanges", "signature": "ColumnRanges andRanges(ColumnRanges left, ColumnRanges right)", "full_signature": "public static ColumnRanges andRanges(ColumnRanges left, ColumnRanges right)", "class_method_signature": "ColumnRanges.andRanges(ColumnRanges left, ColumnRanges right)", "testcase": false, "constructor": false}, {"identifier": "combineBool", "parameters": "(ColumnRanges leftRange, ColumnRanges rightRange, boolean isAnd)", "modifiers": "private static", "return": "List<RangeSegment>", "signature": "List<RangeSegment> combineBool(ColumnRanges leftRange, ColumnRanges rightRange, boolean isAnd)", "full_signature": "private static List<RangeSegment> combineBool(ColumnRanges leftRange, ColumnRanges rightRange, boolean isAnd)", "class_method_signature": "ColumnRanges.combineBool(ColumnRanges leftRange, ColumnRanges rightRange, boolean isAnd)", "testcase": false, "constructor": false}, {"identifier": "combineBool", "parameters": "(ColumnRanges leftRange, ColumnRanges rightRange, String logicOp)", "modifiers": "private static", "return": "List<RangeSegment>", "signature": "List<RangeSegment> combineBool(ColumnRanges leftRange, ColumnRanges rightRange, String logicOp)", "full_signature": "private static List<RangeSegment> combineBool(ColumnRanges leftRange, ColumnRanges rightRange, String logicOp)", "class_method_signature": "ColumnRanges.combineBool(ColumnRanges leftRange, ColumnRanges rightRange, String logicOp)", "testcase": false, "constructor": false}, {"identifier": "getConditions", "parameters": "()", "modifiers": "public", "return": "Collection<? extends ConditionExpression>", "signature": "Collection<? extends ConditionExpression> getConditions()", "full_signature": "public Collection<? extends ConditionExpression> getConditions()", "class_method_signature": "ColumnRanges.getConditions()", "testcase": false, "constructor": false}, {"identifier": "getSegments", "parameters": "()", "modifiers": "public", "return": "List<RangeSegment>", "signature": "List<RangeSegment> getSegments()", "full_signature": "public List<RangeSegment> getSegments()", "class_method_signature": "ColumnRanges.getSegments()", "testcase": false, "constructor": false}, {"identifier": "getColumnExpression", "parameters": "()", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression getColumnExpression()", "full_signature": "public ColumnExpression getColumnExpression()", "class_method_signature": "ColumnRanges.getColumnExpression()", "testcase": false, "constructor": false}, {"identifier": "describeRanges", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String describeRanges()", "full_signature": "public String describeRanges()", "class_method_signature": "ColumnRanges.describeRanges()", "testcase": false, "constructor": false}, {"identifier": "isAllSingle", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllSingle()", "full_signature": "public boolean isAllSingle()", "class_method_signature": "ColumnRanges.isAllSingle()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ColumnRanges.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ColumnRanges.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ColumnRanges.toString()", "testcase": false, "constructor": false}, {"identifier": "ColumnRanges", "parameters": "(ColumnExpression columnExpression, Set<? extends ConditionExpression> rootConditions,\n                        List<RangeSegment> segments)", "modifiers": "public", "return": "", "signature": " ColumnRanges(ColumnExpression columnExpression, Set<? extends ConditionExpression> rootConditions,\n                        List<RangeSegment> segments)", "full_signature": "public  ColumnRanges(ColumnExpression columnExpression, Set<? extends ConditionExpression> rootConditions,\n                        List<RangeSegment> segments)", "class_method_signature": "ColumnRanges.ColumnRanges(ColumnExpression columnExpression, Set<? extends ConditionExpression> rootConditions,\n                        List<RangeSegment> segments)", "testcase": false, "constructor": true}, {"identifier": "ColumnRanges", "parameters": "(ColumnExpression columnExpression, ConditionExpression rootCondition,\n                        List<RangeSegment> segments)", "modifiers": "public", "return": "", "signature": " ColumnRanges(ColumnExpression columnExpression, ConditionExpression rootCondition,\n                        List<RangeSegment> segments)", "full_signature": "public  ColumnRanges(ColumnExpression columnExpression, ConditionExpression rootCondition,\n                        List<RangeSegment> segments)", "class_method_signature": "ColumnRanges.ColumnRanges(ColumnExpression columnExpression, ConditionExpression rootCondition,\n                        List<RangeSegment> segments)", "testcase": false, "constructor": true}, {"identifier": "comparisonToRange", "parameters": "(ComparisonCondition comparisonCondition)", "modifiers": "private static", "return": "ColumnRanges", "signature": "ColumnRanges comparisonToRange(ComparisonCondition comparisonCondition)", "full_signature": "private static ColumnRanges comparisonToRange(ComparisonCondition comparisonCondition)", "class_method_signature": "ColumnRanges.comparisonToRange(ComparisonCondition comparisonCondition)", "testcase": false, "constructor": false}, {"identifier": "flip", "parameters": "(Comparison op)", "modifiers": "private static", "return": "Comparison", "signature": "Comparison flip(Comparison op)", "full_signature": "private static Comparison flip(Comparison op)", "class_method_signature": "ColumnRanges.flip(Comparison op)", "testcase": false, "constructor": false}, {"identifier": "inListToRange", "parameters": "(InListCondition inListCondition)", "modifiers": "private static", "return": "ColumnRanges", "signature": "ColumnRanges inListToRange(InListCondition inListCondition)", "full_signature": "private static ColumnRanges inListToRange(InListCondition inListCondition)", "class_method_signature": "ColumnRanges.inListToRange(InListCondition inListCondition)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/sql/optimizer/rule/range/ColumnRanges.java"}, "focal_method": {"identifier": "rangeAtNode", "parameters": "(ConditionExpression node)", "modifiers": "public static", "return": "ColumnRanges", "body": "public static ColumnRanges rangeAtNode(ConditionExpression node) {\n        if (node instanceof ComparisonCondition) {\n            ComparisonCondition comparisonCondition = (ComparisonCondition) node;\n            return comparisonToRange(comparisonCondition);\n        }\n        else if (node instanceof LogicalFunctionCondition) {\n            LogicalFunctionCondition condition = (LogicalFunctionCondition) node;\n            if (condition.getOperands().size() != 2)\n                return null;\n            ColumnRanges leftRange = rangeAtNode(condition.getLeft());\n            ColumnRanges rightRange = rangeAtNode(condition.getRight());\n            if (leftRange != null && rightRange != null) {\n                List<RangeSegment> combinedSegments = combineBool(leftRange, rightRange, condition.getFunction());\n                if (combinedSegments != null) {\n                    return new ColumnRanges(leftRange.getColumnExpression(), condition, combinedSegments);\n                }\n            }\n        }\n        else if (node instanceof FunctionCondition) {\n            FunctionCondition condition = (FunctionCondition) node;\n            if (\"isNull\".equals(condition.getFunction())) {\n                if (condition.getOperands().size() == 1) {\n                    ExpressionNode operand = condition.getOperands().get(0);\n                    if (operand instanceof ColumnExpression) {\n                        ColumnExpression operandColumn = (ColumnExpression) operand;\n                        return new ColumnRanges(operandColumn, condition,\n                                Collections.singletonList(RangeSegment.onlyNull(operandColumn)));\n                    }\n                }\n            }\n        }\n        else if (node instanceof InListCondition) {\n            InListCondition inListCondition = (InListCondition) node;\n            return inListToRange(inListCondition);\n        }\n        return null;\n    }", "signature": "ColumnRanges rangeAtNode(ConditionExpression node)", "full_signature": "public static ColumnRanges rangeAtNode(ConditionExpression node)", "class_method_signature": "ColumnRanges.rangeAtNode(ConditionExpression node)", "testcase": false, "constructor": false, "invocations": ["comparisonToRange", "size", "getOperands", "rangeAtNode", "getLeft", "rangeAtNode", "getRight", "combineBool", "getFunction", "getColumnExpression", "equals", "getFunction", "size", "getOperands", "get", "getOperands", "singletonList", "onlyNull", "inListToRange"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}