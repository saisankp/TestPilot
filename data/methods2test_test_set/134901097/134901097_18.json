{"test_class": {"identifier": "DecryptionKeyLocationResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    JsonWebEncryption encryption;", "modifier": "@Mock", "type": "JsonWebEncryption", "declarator": "encryption", "var_name": "encryption"}, {"original_string": "@Mock\n    Headers headers;", "modifier": "@Mock", "type": "Headers", "declarator": "headers", "var_name": "headers"}, {"original_string": "@Mock\n    HttpsJwks mockedHttpsJwks;", "modifier": "@Mock", "type": "HttpsJwks", "declarator": "mockedHttpsJwks", "var_name": "mockedHttpsJwks"}, {"original_string": "@Mock\n    UrlStreamResolver urlResolver;", "modifier": "@Mock", "type": "UrlStreamResolver", "declarator": "urlResolver", "var_name": "urlResolver"}, {"original_string": "@Rule\n    public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}], "file": "implementation/src/test/java/io/smallrye/jwt/auth/principal/DecryptionKeyLocationResolverTest.java"}, "test_case": {"identifier": "testLoadHttpsJwksNonMathchingKidAndRefreshDeclined", "parameters": "()", "modifiers": "@Test(expected = UnresolvableKeyException.class) public", "return": "void", "body": "@Test(expected = UnresolvableKeyException.class)\n    public void testLoadHttpsJwksNonMathchingKidAndRefreshDeclined() throws Exception {\n        JWTAuthContextInfo contextInfo = new JWTAuthContextInfo();\n        contextInfo.setDecryptionKeyLocation(\"https://github.com/my_key.jwks\");\n        contextInfo.setJwksRefreshInterval(10);\n        contextInfo.setForcedJwksRefreshInterval(10);\n\n        DecryptionKeyLocationResolver keyLocationResolver = new DecryptionKeyLocationResolver(contextInfo) {\n            protected HttpsJwks initializeHttpsJwks(String loc) {\n                return mockedHttpsJwks;\n            }\n        };\n        // token 'kid' is '1'\n        when(encryption.getHeaders()).thenReturn(headers);\n        when(headers.getStringHeaderValue(JsonWebKey.KEY_ID_PARAMETER)).thenReturn(\"1\");\n\n        RsaJsonWebKey jwk = RsaJwkGenerator.generateJwk(2048);\n\n        // Return JWK Set with a non-matching JWK with 'kid' set to '2' \n        jwk.setKeyId(\"2\");\n        when(mockedHttpsJwks.getJsonWebKeys()).thenReturn(Collections.singletonList(jwk));\n\n        // Refresh JWK Set and get a matching JWK with 'kid' set to '1'\n        doAnswer((i) -> {\n            jwk.setKeyId(\"1\");\n            return null;\n        }).when(mockedHttpsJwks).refresh();\n\n        keyLocationResolver = Mockito.spy(keyLocationResolver);\n        assertEquals(jwk.getPrivateKey(), keyLocationResolver.resolveKey(encryption, emptyList()));\n        assertNull(keyLocationResolver.key);\n\n        // Return JWK Set with a non-matching JWK with 'kid' set to '2'\n        jwk.setKeyId(\"2\");\n        keyLocationResolver.resolveKey(encryption, emptyList());\n    }", "signature": "void testLoadHttpsJwksNonMathchingKidAndRefreshDeclined()", "full_signature": "@Test(expected = UnresolvableKeyException.class) public void testLoadHttpsJwksNonMathchingKidAndRefreshDeclined()", "class_method_signature": "DecryptionKeyLocationResolverTest.testLoadHttpsJwksNonMathchingKidAndRefreshDeclined()", "testcase": true, "constructor": false, "invocations": ["setDecryptionKeyLocation", "setJwksRefreshInterval", "setForcedJwksRefreshInterval", "thenReturn", "when", "getHeaders", "thenReturn", "when", "getStringHeaderValue", "generateJwk", "setKeyId", "thenReturn", "when", "getJsonWebKeys", "singletonList", "refresh", "when", "doAnswer", "setKeyId", "spy", "assertEquals", "getPrivateKey", "resolveKey", "emptyList", "assertNull", "setKeyId", "resolveKey", "emptyList"]}, "focal_class": {"identifier": "DecryptionKeyLocationResolver", "superclass": "extends AbstractKeyLocationResolver", "interfaces": "implements DecryptionKeyResolver", "fields": [], "methods": [{"identifier": "DecryptionKeyLocationResolver", "parameters": "(JWTAuthContextInfo authContextInfo)", "modifiers": "public", "return": "", "signature": " DecryptionKeyLocationResolver(JWTAuthContextInfo authContextInfo)", "full_signature": "public  DecryptionKeyLocationResolver(JWTAuthContextInfo authContextInfo)", "class_method_signature": "DecryptionKeyLocationResolver.DecryptionKeyLocationResolver(JWTAuthContextInfo authContextInfo)", "testcase": false, "constructor": true}, {"identifier": "resolveKey", "parameters": "(JsonWebEncryption jwe, List<JsonWebStructure> nestingContext)", "modifiers": "@Override public", "return": "Key", "signature": "Key resolveKey(JsonWebEncryption jwe, List<JsonWebStructure> nestingContext)", "full_signature": "@Override public Key resolveKey(JsonWebEncryption jwe, List<JsonWebStructure> nestingContext)", "class_method_signature": "DecryptionKeyLocationResolver.resolveKey(JsonWebEncryption jwe, List<JsonWebStructure> nestingContext)", "testcase": false, "constructor": false}, {"identifier": "tryAsDecryptionJwk", "parameters": "(JsonWebEncryption jwe)", "modifiers": "private", "return": "Key", "signature": "Key tryAsDecryptionJwk(JsonWebEncryption jwe)", "full_signature": "private Key tryAsDecryptionJwk(JsonWebEncryption jwe)", "class_method_signature": "DecryptionKeyLocationResolver.tryAsDecryptionJwk(JsonWebEncryption jwe)", "testcase": false, "constructor": false}, {"identifier": "fromJwkToDecryptionKey", "parameters": "(JsonWebKey jwk)", "modifiers": "private", "return": "Key", "signature": "Key fromJwkToDecryptionKey(JsonWebKey jwk)", "full_signature": "private Key fromJwkToDecryptionKey(JsonWebKey jwk)", "class_method_signature": "DecryptionKeyLocationResolver.fromJwkToDecryptionKey(JsonWebKey jwk)", "testcase": false, "constructor": false}, {"identifier": "initializeKeyContent", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initializeKeyContent()", "full_signature": "protected void initializeKeyContent()", "class_method_signature": "DecryptionKeyLocationResolver.initializeKeyContent()", "testcase": false, "constructor": false}, {"identifier": "tryAsPEMPrivateKey", "parameters": "(String content)", "modifiers": "static", "return": "PrivateKey", "signature": "PrivateKey tryAsPEMPrivateKey(String content)", "full_signature": "static PrivateKey tryAsPEMPrivateKey(String content)", "class_method_signature": "DecryptionKeyLocationResolver.tryAsPEMPrivateKey(String content)", "testcase": false, "constructor": false}], "file": "implementation/src/main/java/io/smallrye/jwt/auth/principal/DecryptionKeyLocationResolver.java"}, "focal_method": {"identifier": "resolveKey", "parameters": "(JsonWebEncryption jwe, List<JsonWebStructure> nestingContext)", "modifiers": "@Override public", "return": "Key", "body": "@Override\n    public Key resolveKey(JsonWebEncryption jwe, List<JsonWebStructure> nestingContext)\n            throws UnresolvableKeyException {\n        verifyKid(jwe, authContextInfo.getTokenDecryptionKeyId());\n\n        // The key may have been calculated in the constructor from the local PEM, or,\n        // if authContextInfo.getTokenKeyId() is not null - from the local JWK(S) content.\n        if (key != null) {\n            return key;\n        }\n\n        // At this point the key can be loaded from either the HTTPS or local JWK(s) content using\n        // the current token kid to select the key.\n        Key theKey = tryAsDecryptionJwk(jwe);\n\n        if (theKey == null) {\n            reportUnresolvableKeyException(authContextInfo.getDecryptionKeyContent(),\n                    authContextInfo.getDecryptionKeyLocation());\n        }\n        return theKey;\n    }", "signature": "Key resolveKey(JsonWebEncryption jwe, List<JsonWebStructure> nestingContext)", "full_signature": "@Override public Key resolveKey(JsonWebEncryption jwe, List<JsonWebStructure> nestingContext)", "class_method_signature": "DecryptionKeyLocationResolver.resolveKey(JsonWebEncryption jwe, List<JsonWebStructure> nestingContext)", "testcase": false, "constructor": false, "invocations": ["verifyKid", "getTokenDecryptionKeyId", "tryAsDecryptionJwk", "reportUnresolvableKeyException", "getDecryptionKeyContent", "getDecryptionKeyLocation"]}, "repository": {"repo_id": 134901097, "url": "https://github.com/smallrye/smallrye-jwt", "stars": 19, "created": "5/25/2018 8:19:37 PM +00:00", "updates": "2020-01-23T18:42:37+00:00", "fork": "False", "license": "licensed"}}