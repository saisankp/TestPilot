{"test_class": {"identifier": "GroupZipperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "src/de/slackspace/openkeepass/domain/zipper/GroupZipperTest.java"}, "test_case": {"identifier": "shouldCreateCloneFromTreeStructure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateCloneFromTreeStructure() {\n        KeePassFile keePassFile = createTreeStructure();\n        KeePassFile clonedKeePassFile = new GroupZipper(keePassFile).cloneKeePassFile();\n\n        compareKeePassFiles(keePassFile, clonedKeePassFile);\n    }", "signature": "void shouldCreateCloneFromTreeStructure()", "full_signature": "@Test public void shouldCreateCloneFromTreeStructure()", "class_method_signature": "GroupZipperTest.shouldCreateCloneFromTreeStructure()", "testcase": true, "constructor": false, "invocations": ["createTreeStructure", "cloneKeePassFile", "compareKeePassFiles"]}, "focal_class": {"identifier": "GroupZipper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Meta meta;", "modifier": "private", "type": "Meta", "declarator": "meta", "var_name": "meta"}, {"original_string": "private int index = 0;", "modifier": "private", "type": "int", "declarator": "index = 0", "var_name": "index"}, {"original_string": "private Group node;", "modifier": "private", "type": "Group", "declarator": "node", "var_name": "node"}, {"original_string": "private GroupZipper parent;", "modifier": "private", "type": "GroupZipper", "declarator": "parent", "var_name": "parent"}], "methods": [{"identifier": "GroupZipper", "parameters": "(KeePassFile keePassFile)", "modifiers": "public", "return": "", "signature": " GroupZipper(KeePassFile keePassFile)", "full_signature": "public  GroupZipper(KeePassFile keePassFile)", "class_method_signature": "GroupZipper.GroupZipper(KeePassFile keePassFile)", "testcase": false, "constructor": true}, {"identifier": "GroupZipper", "parameters": "(GroupZipper parent, Group group, int index)", "modifiers": "private", "return": "", "signature": " GroupZipper(GroupZipper parent, Group group, int index)", "full_signature": "private  GroupZipper(GroupZipper parent, Group group, int index)", "class_method_signature": "GroupZipper.GroupZipper(GroupZipper parent, Group group, int index)", "testcase": false, "constructor": true}, {"identifier": "canDown", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canDown()", "full_signature": "public boolean canDown()", "class_method_signature": "GroupZipper.canDown()", "testcase": false, "constructor": false}, {"identifier": "down", "parameters": "()", "modifiers": "public", "return": "GroupZipper", "signature": "GroupZipper down()", "full_signature": "public GroupZipper down()", "class_method_signature": "GroupZipper.down()", "testcase": false, "constructor": false}, {"identifier": "canUp", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canUp()", "full_signature": "public boolean canUp()", "class_method_signature": "GroupZipper.canUp()", "testcase": false, "constructor": false}, {"identifier": "up", "parameters": "()", "modifiers": "public", "return": "GroupZipper", "signature": "GroupZipper up()", "full_signature": "public GroupZipper up()", "class_method_signature": "GroupZipper.up()", "testcase": false, "constructor": false}, {"identifier": "canRight", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canRight()", "full_signature": "public boolean canRight()", "class_method_signature": "GroupZipper.canRight()", "testcase": false, "constructor": false}, {"identifier": "right", "parameters": "()", "modifiers": "public", "return": "GroupZipper", "signature": "GroupZipper right()", "full_signature": "public GroupZipper right()", "class_method_signature": "GroupZipper.right()", "testcase": false, "constructor": false}, {"identifier": "canLeft", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canLeft()", "full_signature": "public boolean canLeft()", "class_method_signature": "GroupZipper.canLeft()", "testcase": false, "constructor": false}, {"identifier": "left", "parameters": "()", "modifiers": "public", "return": "GroupZipper", "signature": "GroupZipper left()", "full_signature": "public GroupZipper left()", "class_method_signature": "GroupZipper.left()", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "()", "modifiers": "public", "return": "Group", "signature": "Group getNode()", "full_signature": "public Group getNode()", "class_method_signature": "GroupZipper.getNode()", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(Group group)", "modifiers": "public", "return": "GroupZipper", "signature": "GroupZipper replace(Group group)", "full_signature": "public GroupZipper replace(Group group)", "class_method_signature": "GroupZipper.replace(Group group)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "KeePassFile", "signature": "KeePassFile close()", "full_signature": "public KeePassFile close()", "class_method_signature": "GroupZipper.close()", "testcase": false, "constructor": false}, {"identifier": "cloneKeePassFile", "parameters": "()", "modifiers": "public", "return": "KeePassFile", "signature": "KeePassFile cloneKeePassFile()", "full_signature": "public KeePassFile cloneKeePassFile()", "class_method_signature": "GroupZipper.cloneKeePassFile()", "testcase": false, "constructor": false}, {"identifier": "cloneGroup", "parameters": "(Group group)", "modifiers": "private", "return": "Group", "signature": "Group cloneGroup(Group group)", "full_signature": "private Group cloneGroup(Group group)", "class_method_signature": "GroupZipper.cloneGroup(Group group)", "testcase": false, "constructor": false}, {"identifier": "cloneEntriesInGroup", "parameters": "(Group group, GroupBuilder groupBuilder)", "modifiers": "private", "return": "void", "signature": "void cloneEntriesInGroup(Group group, GroupBuilder groupBuilder)", "full_signature": "private void cloneEntriesInGroup(Group group, GroupBuilder groupBuilder)", "class_method_signature": "GroupZipper.cloneEntriesInGroup(Group group, GroupBuilder groupBuilder)", "testcase": false, "constructor": false}, {"identifier": "cloneEntry", "parameters": "(Entry entry, List<Entry> removeList, List<Entry> addList)", "modifiers": "private", "return": "void", "signature": "void cloneEntry(Entry entry, List<Entry> removeList, List<Entry> addList)", "full_signature": "private void cloneEntry(Entry entry, List<Entry> removeList, List<Entry> addList)", "class_method_signature": "GroupZipper.cloneEntry(Entry entry, List<Entry> removeList, List<Entry> addList)", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "public", "return": "Group", "signature": "Group getRoot()", "full_signature": "public Group getRoot()", "class_method_signature": "GroupZipper.getRoot()", "testcase": false, "constructor": false}, {"identifier": "replaceMeta", "parameters": "(Meta meta)", "modifiers": "public", "return": "GroupZipper", "signature": "GroupZipper replaceMeta(Meta meta)", "full_signature": "public GroupZipper replaceMeta(Meta meta)", "class_method_signature": "GroupZipper.replaceMeta(Meta meta)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "GroupZipper.toString()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public", "return": "Iterator<Group>", "signature": "Iterator<Group> iterator()", "full_signature": "public Iterator<Group> iterator()", "class_method_signature": "GroupZipper.iterator()", "testcase": false, "constructor": false}], "file": "src/de/slackspace/openkeepass/domain/zipper/GroupZipper.java"}, "focal_method": {"identifier": "cloneKeePassFile", "parameters": "()", "modifiers": "public", "return": "KeePassFile", "body": "public KeePassFile cloneKeePassFile() {\n        Iterator<Group> iter = iterator();\n\n        while(iter.hasNext()) {\n            Group group = iter.next();\n\n            Group clonedGroup = cloneGroup(group);\n            replace(clonedGroup);\n        }\n\n        return close();\n    }", "signature": "KeePassFile cloneKeePassFile()", "full_signature": "public KeePassFile cloneKeePassFile()", "class_method_signature": "GroupZipper.cloneKeePassFile()", "testcase": false, "constructor": false, "invocations": ["iterator", "hasNext", "next", "cloneGroup", "replace", "close"]}, "repository": {"repo_id": 102137829, "url": "https://github.com/privacyint/ThornSec", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 10, "size": 20604, "license": "licensed"}}