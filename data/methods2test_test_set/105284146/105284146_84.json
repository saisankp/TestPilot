{"test_class": {"identifier": "SecurityAnalysisToolTest", "superclass": "extends AbstractToolTest", "interfaces": "", "fields": [{"original_string": "private SecurityAnalysisTool tool;", "modifier": "private", "type": "SecurityAnalysisTool", "declarator": "tool", "var_name": "tool"}], "file": "security-analysis-api/src/test/java/com/powsybl/security/tools/SecurityAnalysisToolTest.java"}, "test_case": {"identifier": "parseInputs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseInputs() throws IOException {\n        ToolOptions options = emptyOptions();\n\n        SecurityAnalysisExecutionInput input = new SecurityAnalysisExecutionInput();\n\n        SecurityAnalysisTool.updateInput(options, input);\n        assertThat(input.getViolationTypes()).isEmpty();\n        assertThat(input.getResultExtensions()).isEmpty();\n        assertThat(input.getContingenciesSource()).isNotPresent();\n\n        options = mockOptions(ImmutableMap.of(SecurityAnalysisToolConstants.LIMIT_TYPES_OPTION, \"HIGH_VOLTAGE,CURRENT\"));\n        SecurityAnalysisTool.updateInput(options, input);\n        assertThat(input.getViolationTypes()).containsExactly(LimitViolationType.CURRENT, LimitViolationType.HIGH_VOLTAGE);\n\n        options = mockOptions(ImmutableMap.of(SecurityAnalysisToolConstants.WITH_EXTENSIONS_OPTION, \"ext1,ext2\"));\n        SecurityAnalysisTool.updateInput(options, input);\n        assertThat(input.getResultExtensions()).containsExactly(\"ext1\", \"ext2\");\n\n        ToolOptions invalidOptions = mockOptions(ImmutableMap.of(SecurityAnalysisToolConstants.CONTINGENCIES_FILE_OPTION, \"contingencies\"));\n        assertThatIllegalArgumentException().isThrownBy(() -> SecurityAnalysisTool.updateInput(invalidOptions, input));\n\n        Files.write(fileSystem.getPath(\"contingencies\"), \"test\".getBytes());\n        options = mockOptions(ImmutableMap.of(SecurityAnalysisToolConstants.CONTINGENCIES_FILE_OPTION, \"contingencies\"));\n        SecurityAnalysisTool.updateInput(options, input);\n        assertThat(input.getContingenciesSource()).isPresent();\n        if (input.getContingenciesSource().isPresent()) {\n            assertEquals(\"test\", new String(input.getContingenciesSource().get().read()));\n        } else {\n            fail();\n        }\n    }", "signature": "void parseInputs()", "full_signature": "@Test public void parseInputs()", "class_method_signature": "SecurityAnalysisToolTest.parseInputs()", "testcase": true, "constructor": false, "invocations": ["emptyOptions", "updateInput", "isEmpty", "assertThat", "getViolationTypes", "isEmpty", "assertThat", "getResultExtensions", "isNotPresent", "assertThat", "getContingenciesSource", "mockOptions", "of", "updateInput", "containsExactly", "assertThat", "getViolationTypes", "mockOptions", "of", "updateInput", "containsExactly", "assertThat", "getResultExtensions", "mockOptions", "of", "isThrownBy", "assertThatIllegalArgumentException", "updateInput", "write", "getPath", "getBytes", "mockOptions", "of", "updateInput", "isPresent", "assertThat", "getContingenciesSource", "isPresent", "getContingenciesSource", "assertEquals", "read", "get", "getContingenciesSource", "fail"]}, "focal_class": {"identifier": "SecurityAnalysisTool", "superclass": "", "interfaces": "implements Tool", "fields": [], "methods": [{"identifier": "getCommand", "parameters": "()", "modifiers": "@Override public", "return": "Command", "signature": "Command getCommand()", "full_signature": "@Override public Command getCommand()", "class_method_signature": "SecurityAnalysisTool.getCommand()", "testcase": false, "constructor": false}, {"identifier": "updateInput", "parameters": "(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "modifiers": "static", "return": "void", "signature": "void updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "full_signature": "static void updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "class_method_signature": "SecurityAnalysisTool.updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "testcase": false, "constructor": false}, {"identifier": "configBasedInputBuildStrategy", "parameters": "(PlatformConfig config)", "modifiers": "private static", "return": "SecurityAnalysisInputBuildStrategy", "signature": "SecurityAnalysisInputBuildStrategy configBasedInputBuildStrategy(PlatformConfig config)", "full_signature": "private static SecurityAnalysisInputBuildStrategy configBasedInputBuildStrategy(PlatformConfig config)", "class_method_signature": "SecurityAnalysisTool.configBasedInputBuildStrategy(PlatformConfig config)", "testcase": false, "constructor": false}, {"identifier": "preprocessedInputBuildStrategy", "parameters": "(Supplier<LimitViolationFilter> filterInitializer,\n                                                                             SecurityAnalysisPreprocessorFactory preprocessorFactory)", "modifiers": "private static", "return": "SecurityAnalysisInputBuildStrategy", "signature": "SecurityAnalysisInputBuildStrategy preprocessedInputBuildStrategy(Supplier<LimitViolationFilter> filterInitializer,\n                                                                             SecurityAnalysisPreprocessorFactory preprocessorFactory)", "full_signature": "private static SecurityAnalysisInputBuildStrategy preprocessedInputBuildStrategy(Supplier<LimitViolationFilter> filterInitializer,\n                                                                             SecurityAnalysisPreprocessorFactory preprocessorFactory)", "class_method_signature": "SecurityAnalysisTool.preprocessedInputBuildStrategy(Supplier<LimitViolationFilter> filterInitializer,\n                                                                             SecurityAnalysisPreprocessorFactory preprocessorFactory)", "testcase": false, "constructor": false}, {"identifier": "buildPreprocessedInput", "parameters": "(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "modifiers": "static", "return": "SecurityAnalysisInput", "signature": "SecurityAnalysisInput buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "full_signature": "static SecurityAnalysisInput buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "class_method_signature": "SecurityAnalysisTool.buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "testcase": false, "constructor": false}, {"identifier": "createBuilder", "parameters": "(PlatformConfig platformConfig)", "modifiers": "private static", "return": "SecurityAnalysisExecutionBuilder", "signature": "SecurityAnalysisExecutionBuilder createBuilder(PlatformConfig platformConfig)", "full_signature": "private static SecurityAnalysisExecutionBuilder createBuilder(PlatformConfig platformConfig)", "class_method_signature": "SecurityAnalysisTool.createBuilder(PlatformConfig platformConfig)", "testcase": false, "constructor": false}, {"identifier": "buildExecution", "parameters": "(ToolOptions options, SecurityAnalysisExecutionBuilder builder)", "modifiers": "private static", "return": "SecurityAnalysisExecution", "signature": "SecurityAnalysisExecution buildExecution(ToolOptions options, SecurityAnalysisExecutionBuilder builder)", "full_signature": "private static SecurityAnalysisExecution buildExecution(ToolOptions options, SecurityAnalysisExecutionBuilder builder)", "class_method_signature": "SecurityAnalysisTool.buildExecution(ToolOptions options, SecurityAnalysisExecutionBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "runSecurityAnalysisWithLog", "parameters": "(ComputationManager computationManager,\n                                                             SecurityAnalysisExecution execution,\n                                                             SecurityAnalysisExecutionInput input,\n                                                             Path logPath)", "modifiers": "private static", "return": "SecurityAnalysisResult", "signature": "SecurityAnalysisResult runSecurityAnalysisWithLog(ComputationManager computationManager,\n                                                             SecurityAnalysisExecution execution,\n                                                             SecurityAnalysisExecutionInput input,\n                                                             Path logPath)", "full_signature": "private static SecurityAnalysisResult runSecurityAnalysisWithLog(ComputationManager computationManager,\n                                                             SecurityAnalysisExecution execution,\n                                                             SecurityAnalysisExecutionInput input,\n                                                             Path logPath)", "class_method_signature": "SecurityAnalysisTool.runSecurityAnalysisWithLog(ComputationManager computationManager,\n                                                             SecurityAnalysisExecution execution,\n                                                             SecurityAnalysisExecutionInput input,\n                                                             Path logPath)", "testcase": false, "constructor": false}, {"identifier": "readNetwork", "parameters": "(CommandLine line, ToolRunningContext context, ImportersLoader importersLoader)", "modifiers": "static", "return": "Network", "signature": "Network readNetwork(CommandLine line, ToolRunningContext context, ImportersLoader importersLoader)", "full_signature": "static Network readNetwork(CommandLine line, ToolRunningContext context, ImportersLoader importersLoader)", "class_method_signature": "SecurityAnalysisTool.readNetwork(CommandLine line, ToolRunningContext context, ImportersLoader importersLoader)", "testcase": false, "constructor": false}, {"identifier": "uncheckedWriteBytes", "parameters": "(byte[] bytes, Path path)", "modifiers": "private static", "return": "void", "signature": "void uncheckedWriteBytes(byte[] bytes, Path path)", "full_signature": "private static void uncheckedWriteBytes(byte[] bytes, Path path)", "class_method_signature": "SecurityAnalysisTool.uncheckedWriteBytes(byte[] bytes, Path path)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(CommandLine line, ToolRunningContext context)", "modifiers": "@Override public", "return": "void", "signature": "void run(CommandLine line, ToolRunningContext context)", "full_signature": "@Override public void run(CommandLine line, ToolRunningContext context)", "class_method_signature": "SecurityAnalysisTool.run(CommandLine line, ToolRunningContext context)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(CommandLine line, ToolRunningContext context,\n             SecurityAnalysisExecutionBuilder executionBuilder,\n             Supplier<SecurityAnalysisParameters> parametersLoader,\n             ImportersLoader importersLoader,\n             Supplier<TableFormatterConfig> tableFormatterConfigLoader)", "modifiers": "", "return": "void", "signature": "void run(CommandLine line, ToolRunningContext context,\n             SecurityAnalysisExecutionBuilder executionBuilder,\n             Supplier<SecurityAnalysisParameters> parametersLoader,\n             ImportersLoader importersLoader,\n             Supplier<TableFormatterConfig> tableFormatterConfigLoader)", "full_signature": " void run(CommandLine line, ToolRunningContext context,\n             SecurityAnalysisExecutionBuilder executionBuilder,\n             Supplier<SecurityAnalysisParameters> parametersLoader,\n             ImportersLoader importersLoader,\n             Supplier<TableFormatterConfig> tableFormatterConfigLoader)", "class_method_signature": "SecurityAnalysisTool.run(CommandLine line, ToolRunningContext context,\n             SecurityAnalysisExecutionBuilder executionBuilder,\n             Supplier<SecurityAnalysisParameters> parametersLoader,\n             ImportersLoader importersLoader,\n             Supplier<TableFormatterConfig> tableFormatterConfigLoader)", "testcase": false, "constructor": false}], "file": "security-analysis-api/src/main/java/com/powsybl/security/tools/SecurityAnalysisTool.java"}, "focal_method": {"identifier": "updateInput", "parameters": "(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "modifiers": "static", "return": "void", "body": "static void updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs) {\n        options.getPath(PARAMETERS_FILE_OPTION)\n                .ifPresent(f -> JsonSecurityAnalysisParameters.update(inputs.getParameters(), f));\n\n        options.getPath(CONTINGENCIES_FILE_OPTION)\n                .map(p -> FileUtil.asByteSource(p))\n                .ifPresent(inputs::setContingenciesSource);\n\n        options.getValues(LIMIT_TYPES_OPTION)\n                .map(types -> types.stream().map(LimitViolationType::valueOf).collect(Collectors.toList()))\n                .ifPresent(inputs::addViolationTypes);\n\n        options.getValues(WITH_EXTENSIONS_OPTION)\n                .ifPresent(inputs::addResultExtensions);\n    }", "signature": "void updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "full_signature": "static void updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "class_method_signature": "SecurityAnalysisTool.updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "testcase": false, "constructor": false, "invocations": ["ifPresent", "getPath", "update", "getParameters", "ifPresent", "map", "getPath", "asByteSource", "ifPresent", "map", "getValues", "collect", "map", "stream", "toList", "ifPresent", "getValues"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}