{"test_class": {"identifier": "JavaImageIOCompareTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String wsdlLoc = \"/pserv-pa-java-se/JavaImageIOCompare?wsdl\";", "modifier": "", "type": "String", "declarator": "wsdlLoc = \"/pserv-pa-java-se/JavaImageIOCompare?wsdl\"", "var_name": "wsdlLoc"}, {"original_string": "Compare ids = null;", "modifier": "", "type": "Compare", "declarator": "ids = null", "var_name": "ids"}], "file": "services/java-se/src/test/java/eu/planets_project/services/java_se/image/JavaImageIOCompareTest.java"}, "test_case": {"identifier": "testDescribe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDescribe() {\n        ServiceDescription desc = ids.describe();\n        assertTrue(\"The ServiceDescription should not be NULL.\", desc != null );\n        System.out.println(\"Recieved service description: \" + desc.toXmlFormatted());\n    }", "signature": "void testDescribe()", "full_signature": "@Test public void testDescribe()", "class_method_signature": "JavaImageIOCompareTest.testDescribe()", "testcase": true, "constructor": false, "invocations": ["describe", "assertTrue", "println", "toXmlFormatted"]}, "focal_class": {"identifier": "JavaImageIOCompare", "superclass": "", "interfaces": "implements Compare", "fields": [{"original_string": "public static final String NAME = \"JavaImageIOCompare\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"JavaImageIOCompare\"", "var_name": "NAME"}, {"original_string": "private static Logger log = Logger.getLogger(JavaImageIOCompare.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(JavaImageIOCompare.class.getName())", "var_name": "log"}, {"original_string": "public static final URI PSNR_URI = URI.create(\"planets:pc/compare/image/psnr\");", "modifier": "public static final", "type": "URI", "declarator": "PSNR_URI = URI.create(\"planets:pc/compare/image/psnr\")", "var_name": "PSNR_URI"}], "methods": [{"identifier": "buildPsnrProperty", "parameters": "( double psnr )", "modifiers": "public static", "return": "PropertyComparison", "signature": "PropertyComparison buildPsnrProperty( double psnr )", "full_signature": "public static PropertyComparison buildPsnrProperty( double psnr )", "class_method_signature": "JavaImageIOCompare.buildPsnrProperty( double psnr )", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(DigitalObject first, DigitalObject second,\n            List<Parameter> config)", "modifiers": "public", "return": "CompareResult", "signature": "CompareResult compare(DigitalObject first, DigitalObject second,\n            List<Parameter> config)", "full_signature": "public CompareResult compare(DigitalObject first, DigitalObject second,\n            List<Parameter> config)", "class_method_signature": "JavaImageIOCompare.compare(DigitalObject first, DigitalObject second,\n            List<Parameter> config)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(DigitalObject configFile)", "modifiers": "public", "return": "List<Parameter>", "signature": "List<Parameter> convert(DigitalObject configFile)", "full_signature": "public List<Parameter> convert(DigitalObject configFile)", "class_method_signature": "JavaImageIOCompare.convert(DigitalObject configFile)", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "ServiceDescription", "signature": "ServiceDescription describe()", "full_signature": "public ServiceDescription describe()", "class_method_signature": "JavaImageIOCompare.describe()", "testcase": false, "constructor": false}, {"identifier": "psnr", "parameters": "( BufferedImage i1, BufferedImage i2 )", "modifiers": "private static", "return": "Double", "signature": "Double psnr( BufferedImage i1, BufferedImage i2 )", "full_signature": "private static Double psnr( BufferedImage i1, BufferedImage i2 )", "class_method_signature": "JavaImageIOCompare.psnr( BufferedImage i1, BufferedImage i2 )", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "( String[] args )", "modifiers": "public static", "return": "void", "signature": "void main( String[] args )", "full_signature": "public static void main( String[] args )", "class_method_signature": "JavaImageIOCompare.main( String[] args )", "testcase": false, "constructor": false}], "file": "services/java-se/src/main/java/eu/planets_project/services/java_se/image/JavaImageIOCompare.java"}, "focal_method": {"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "ServiceDescription", "body": "public ServiceDescription describe() {\n        ServiceDescription.Builder mds = new ServiceDescription.Builder(NAME, Compare.class.getCanonicalName());\n        mds.description(\"A Raster DigitalObject Comparison Service based on the Java SE built-in ImageIO library.\");\n        mds.author(\"Andrew Jackson <Andrew.Jackson@bl.uk>\");\n        mds.classname(this.getClass().getCanonicalName());\n        mds.version(\"1.0.1\");\n        mds.tool(JavaImageIOIdentify.tool);\n        \n        List<URI> ifs = new ArrayList<URI>();\n        for( String fmt_name : JavaImageIOIdentify.unique(ImageIO.getReaderFormatNames()) ) {\n            ifs.add( FormatRegistryFactory.getFormatRegistry().createExtensionUri( fmt_name ) );\n        }\n        mds.inputFormats(ifs.toArray(new URI[]{}));\n\n        return mds.build();\n    }", "signature": "ServiceDescription describe()", "full_signature": "public ServiceDescription describe()", "class_method_signature": "JavaImageIOCompare.describe()", "testcase": false, "constructor": false, "invocations": ["getCanonicalName", "description", "author", "classname", "getCanonicalName", "getClass", "version", "tool", "unique", "getReaderFormatNames", "add", "createExtensionUri", "getFormatRegistry", "inputFormats", "toArray", "build"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}