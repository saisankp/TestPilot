{"test_class": {"identifier": "DubboAppenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LoggingEvent event;", "modifier": "private", "type": "LoggingEvent", "declarator": "event", "var_name": "event"}], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/DubboAppenderTest.java"}, "test_case": {"identifier": "testAppend", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAppend() throws Exception {\n        DubboAppender appender = new DubboAppender();\n        appender.append(event);\n        assertThat(DubboAppender.logList, hasSize(0));\n        DubboAppender.doStart();\n        appender.append(event);\n        assertThat(DubboAppender.logList, hasSize(1));\n        Log log = DubboAppender.logList.get(0);\n        assertThat(log.getLogThread(), equalTo(\"thread-name\"));\n    }", "signature": "void testAppend()", "full_signature": "@Test public void testAppend()", "class_method_signature": "DubboAppenderTest.testAppend()", "testcase": true, "constructor": false, "invocations": ["append", "assertThat", "hasSize", "doStart", "append", "assertThat", "hasSize", "get", "assertThat", "getLogThread", "equalTo"]}, "focal_class": {"identifier": "DubboAppender", "superclass": "extends FileAppender", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_FILE_NAME = \"dubbo.log\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_FILE_NAME = \"dubbo.log\"", "var_name": "DEFAULT_FILE_NAME"}, {"original_string": "public static boolean available = false;", "modifier": "public static", "type": "boolean", "declarator": "available = false", "var_name": "available"}, {"original_string": "public static List<Log> logList = new ArrayList<>();", "modifier": "public static", "type": "List<Log>", "declarator": "logList = new ArrayList<>()", "var_name": "logList"}], "methods": [{"identifier": "DubboAppender", "parameters": "()", "modifiers": "public", "return": "", "signature": " DubboAppender()", "full_signature": "public  DubboAppender()", "class_method_signature": "DubboAppender.DubboAppender()", "testcase": false, "constructor": true}, {"identifier": "doStart", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void doStart()", "full_signature": "public static void doStart()", "class_method_signature": "DubboAppender.doStart()", "testcase": false, "constructor": false}, {"identifier": "doStop", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void doStop()", "full_signature": "public static void doStop()", "class_method_signature": "DubboAppender.doStop()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clear()", "full_signature": "public static void clear()", "class_method_signature": "DubboAppender.clear()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(LoggingEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void append(LoggingEvent event)", "full_signature": "@Override public void append(LoggingEvent event)", "class_method_signature": "DubboAppender.append(LoggingEvent event)", "testcase": false, "constructor": false}, {"identifier": "parseLog", "parameters": "(LoggingEvent event)", "modifiers": "private", "return": "Log", "signature": "Log parseLog(LoggingEvent event)", "full_signature": "private Log parseLog(LoggingEvent event)", "class_method_signature": "DubboAppender.parseLog(LoggingEvent event)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/DubboAppender.java"}, "focal_method": {"identifier": "append", "parameters": "(LoggingEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void append(LoggingEvent event) {\n        super.append(event);\n        if (available) {\n            Log temp = parseLog(event);\n            logList.add(temp);\n        }\n    }", "signature": "void append(LoggingEvent event)", "full_signature": "@Override public void append(LoggingEvent event)", "class_method_signature": "DubboAppender.append(LoggingEvent event)", "testcase": false, "constructor": false, "invocations": ["append", "parseLog", "add"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}