{"test_class": {"identifier": "VisualizerUtilityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Config config;", "modifier": "private static", "type": "Config", "declarator": "config", "var_name": "config"}], "file": "kafka/src/test/java/com/expedia/adaptivealerting/kafka/visualizer/VisualizerUtilityTest.java"}, "test_case": {"identifier": "testConvertToDate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertToDate() {\n        long time = 1587665081L;\n        String dateTime = convertToDate(time);\n        assertNotNull(dateTime);\n        assertTrue(dateTime.contains(\"2020\"));\n        assertTrue(dateTime.contains(\"04\"));\n        assertTrue(dateTime.contains(\"23\"));\n        assertTrue(dateTime.contains(\"18\"));\n        assertTrue(dateTime.equalsIgnoreCase(\"2020-04-23T18:04:41.000+0000\"));\n    }", "signature": "void testConvertToDate()", "full_signature": "@Test public void testConvertToDate()", "class_method_signature": "VisualizerUtilityTest.testConvertToDate()", "testcase": true, "constructor": false, "invocations": ["convertToDate", "assertNotNull", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "equalsIgnoreCase"]}, "focal_class": {"identifier": "VisualizerUtility", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Config config = new TypesafeConfigLoader(\"visualizer\").loadMergedConfig();", "modifier": "private static", "type": "Config", "declarator": "config = new TypesafeConfigLoader(\"visualizer\").loadMergedConfig()", "var_name": "config"}], "methods": [{"identifier": "convertToJson", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String convertToJson(Object object)", "full_signature": "public static String convertToJson(Object object)", "class_method_signature": "VisualizerUtility.convertToJson(Object object)", "testcase": false, "constructor": false}, {"identifier": "convertToDate", "parameters": "(long timestamp)", "modifiers": "public static", "return": "String", "signature": "String convertToDate(long timestamp)", "full_signature": "public static String convertToDate(long timestamp)", "class_method_signature": "VisualizerUtility.convertToDate(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "getMetricConsumerProps", "parameters": "(Config metricConsumerConfig)", "modifiers": "public static", "return": "Properties", "signature": "Properties getMetricConsumerProps(Config metricConsumerConfig)", "full_signature": "public static Properties getMetricConsumerProps(Config metricConsumerConfig)", "class_method_signature": "VisualizerUtility.getMetricConsumerProps(Config metricConsumerConfig)", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "(String configName)", "modifiers": "public static", "return": "Config", "signature": "Config getConfig(String configName)", "full_signature": "public static Config getConfig(String configName)", "class_method_signature": "VisualizerUtility.getConfig(String configName)", "testcase": false, "constructor": false}], "file": "kafka/src/main/java/com/expedia/adaptivealerting/kafka/visualizer/VisualizerUtility.java"}, "focal_method": {"identifier": "convertToDate", "parameters": "(long timestamp)", "modifiers": "public static", "return": "String", "body": "public static String convertToDate(long timestamp) {\n        Date date = new Date(timestamp * 1000L);\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n        format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        String dateString = format.format(date);\n        return dateString;\n    }", "signature": "String convertToDate(long timestamp)", "full_signature": "public static String convertToDate(long timestamp)", "class_method_signature": "VisualizerUtility.convertToDate(long timestamp)", "testcase": false, "constructor": false, "invocations": ["setTimeZone", "getTimeZone", "format"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}