{"test_class": {"identifier": "AergoClientBuilderTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/transport/src/test/java/hera/client/AergoClientBuilderTest.java"}, "test_case": {"identifier": "testBuild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBuild() {\n    final AergoClient aergoClient = new AergoClientBuilder()\n        .withEndpoint(\"localhost:7845\")\n        .withPlainText()\n        .withNonBlockingConnect()\n        .withTimeout(3000L, TimeUnit.MILLISECONDS)\n        .withRetry(3, 1000, TimeUnit.MILLISECONDS)\n        .build();\n    assertNotNull(aergoClient);\n  }", "signature": "void testBuild()", "full_signature": "@Test public void testBuild()", "class_method_signature": "AergoClientBuilderTest.testBuild()", "testcase": true, "constructor": false, "invocations": ["build", "withRetry", "withTimeout", "withNonBlockingConnect", "withPlainText", "withEndpoint", "assertNotNull"]}, "focal_class": {"identifier": "AergoClientBuilder", "superclass": "", "interfaces": "implements ClientConfiguer<AergoClientBuilder>", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final Map<Object, Object> key2Value = new HashMap<>();", "modifier": "protected final", "type": "Map<Object, Object>", "declarator": "key2Value = new HashMap<>()", "var_name": "key2Value"}, {"original_string": "protected final List<ComparableFailoverHandler> failoverHandlers = new ArrayList<>();", "modifier": "protected final", "type": "List<ComparableFailoverHandler>", "declarator": "failoverHandlers = new ArrayList<>()", "var_name": "failoverHandlers"}], "methods": [{"identifier": "addConfiguration", "parameters": "(final String key, final String value)", "modifiers": "@Override public", "return": "AergoClientBuilder", "signature": "AergoClientBuilder addConfiguration(final String key, final String value)", "full_signature": "@Override public AergoClientBuilder addConfiguration(final String key, final String value)", "class_method_signature": "AergoClientBuilder.addConfiguration(final String key, final String value)", "testcase": false, "constructor": false}, {"identifier": "withEndpoint", "parameters": "(final String endpoint)", "modifiers": "@Override public", "return": "AergoClientBuilder", "signature": "AergoClientBuilder withEndpoint(final String endpoint)", "full_signature": "@Override public AergoClientBuilder withEndpoint(final String endpoint)", "class_method_signature": "AergoClientBuilder.withEndpoint(final String endpoint)", "testcase": false, "constructor": false}, {"identifier": "withNonBlockingConnect", "parameters": "()", "modifiers": "@Override public", "return": "AergoClientBuilder", "signature": "AergoClientBuilder withNonBlockingConnect()", "full_signature": "@Override public AergoClientBuilder withNonBlockingConnect()", "class_method_signature": "AergoClientBuilder.withNonBlockingConnect()", "testcase": false, "constructor": false}, {"identifier": "withBlockingConnect", "parameters": "()", "modifiers": "@Override public", "return": "AergoClientBuilder", "signature": "AergoClientBuilder withBlockingConnect()", "full_signature": "@Override public AergoClientBuilder withBlockingConnect()", "class_method_signature": "AergoClientBuilder.withBlockingConnect()", "testcase": false, "constructor": false}, {"identifier": "withPlainText", "parameters": "()", "modifiers": "@Override public", "return": "AergoClientBuilder", "signature": "AergoClientBuilder withPlainText()", "full_signature": "@Override public AergoClientBuilder withPlainText()", "class_method_signature": "AergoClientBuilder.withPlainText()", "testcase": false, "constructor": false}, {"identifier": "withTransportSecurity", "parameters": "(String serverCommonName, String serverCertPath,\n      String clientCertPath, String clientKeyPath)", "modifiers": "@Override public", "return": "AergoClientBuilder", "signature": "AergoClientBuilder withTransportSecurity(String serverCommonName, String serverCertPath,\n      String clientCertPath, String clientKeyPath)", "full_signature": "@Override public AergoClientBuilder withTransportSecurity(String serverCommonName, String serverCertPath,\n      String clientCertPath, String clientKeyPath)", "class_method_signature": "AergoClientBuilder.withTransportSecurity(String serverCommonName, String serverCertPath,\n      String clientCertPath, String clientKeyPath)", "testcase": false, "constructor": false}, {"identifier": "withTransportSecurity", "parameters": "(final String serverCommonName,\n      final InputStream serverCertInputStream, final InputStream clientCertInputStream,\n      final InputStream clientKeyInputStream)", "modifiers": "@Override public", "return": "AergoClientBuilder", "signature": "AergoClientBuilder withTransportSecurity(final String serverCommonName,\n      final InputStream serverCertInputStream, final InputStream clientCertInputStream,\n      final InputStream clientKeyInputStream)", "full_signature": "@Override public AergoClientBuilder withTransportSecurity(final String serverCommonName,\n      final InputStream serverCertInputStream, final InputStream clientCertInputStream,\n      final InputStream clientKeyInputStream)", "class_method_signature": "AergoClientBuilder.withTransportSecurity(final String serverCommonName,\n      final InputStream serverCertInputStream, final InputStream clientCertInputStream,\n      final InputStream clientKeyInputStream)", "testcase": false, "constructor": false}, {"identifier": "withTimeout", "parameters": "(final long timeout, final TimeUnit unit)", "modifiers": "@Override public", "return": "AergoClientBuilder", "signature": "AergoClientBuilder withTimeout(final long timeout, final TimeUnit unit)", "full_signature": "@Override public AergoClientBuilder withTimeout(final long timeout, final TimeUnit unit)", "class_method_signature": "AergoClientBuilder.withTimeout(final long timeout, final TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "withRetry", "parameters": "(int count, long interval, TimeUnit unit)", "modifiers": "@Override public", "return": "AergoClientBuilder", "signature": "AergoClientBuilder withRetry(int count, long interval, TimeUnit unit)", "full_signature": "@Override public AergoClientBuilder withRetry(int count, long interval, TimeUnit unit)", "class_method_signature": "AergoClientBuilder.withRetry(int count, long interval, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "AergoClient", "signature": "AergoClient build()", "full_signature": "public AergoClient build()", "class_method_signature": "AergoClientBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "initContext", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "Context", "signature": "Context initContext()", "full_signature": "@SuppressWarnings(\"unchecked\") protected Context initContext()", "class_method_signature": "AergoClientBuilder.initContext()", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/client/AergoClientBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "AergoClient", "body": "public AergoClient build() {\n    final Context context = initContext();\n    logger.trace(\"Init context: {}\", context);\n    final ContextStorage<Context> contextStorage = new UnmodifiableContextStorage(context);\n    return new AergoClientImpl(contextStorage);\n  }", "signature": "AergoClient build()", "full_signature": "public AergoClient build()", "class_method_signature": "AergoClientBuilder.build()", "testcase": false, "constructor": false, "invocations": ["initContext", "trace"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}