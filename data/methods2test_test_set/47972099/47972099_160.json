{"test_class": {"identifier": "JavaToValueConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/types/JavaToValueConverterTest.java"}, "test_case": {"identifier": "testValueToJavaConversion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testValueToJavaConversion() {\n\t\ttry {\n\t\t\tassertNull(JavaToValueConverter.convertValueType(null));\n\t\t\t\n\t\t\tassertEquals(\"123Test\", JavaToValueConverter.convertValueType(new StringValue(\"123Test\")));\n\t\t\tassertEquals((byte) 44, JavaToValueConverter.convertValueType(new ByteValue((byte) 44)));\n\t\t\tassertEquals((short) 10000, JavaToValueConverter.convertValueType(new ShortValue((short) 10000)));\n\t\t\tassertEquals(3567564, JavaToValueConverter.convertValueType(new IntValue(3567564)));\n\t\t\tassertEquals(767692734L, JavaToValueConverter.convertValueType(new LongValue(767692734)));\n\t\t\tassertEquals(17.5f, JavaToValueConverter.convertValueType(new FloatValue(17.5f)));\n\t\t\tassertEquals(3.1415926, JavaToValueConverter.convertValueType(new DoubleValue(3.1415926)));\n\t\t\tassertEquals(true, JavaToValueConverter.convertValueType(new BooleanValue(true)));\n\t\t\tassertEquals('@', JavaToValueConverter.convertValueType(new CharValue('@')));\n\t\t\t\n\t\t\ttry {\n\t\t\t\tJavaToValueConverter.convertValueType(new MyValue());\n\t\t\t\tfail(\"Accepted invalid type.\");\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\t// expected\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testValueToJavaConversion()", "full_signature": "@Test public void testValueToJavaConversion()", "class_method_signature": "JavaToValueConverterTest.testValueToJavaConversion()", "testcase": true, "constructor": false, "invocations": ["assertNull", "convertValueType", "assertEquals", "convertValueType", "assertEquals", "convertValueType", "assertEquals", "convertValueType", "assertEquals", "convertValueType", "assertEquals", "convertValueType", "assertEquals", "convertValueType", "assertEquals", "convertValueType", "assertEquals", "convertValueType", "assertEquals", "convertValueType", "convertValueType", "fail", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "JavaToValueConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convertBoxedJavaType", "parameters": "(Object boxed)", "modifiers": "public static", "return": "Value", "signature": "Value convertBoxedJavaType(Object boxed)", "full_signature": "public static Value convertBoxedJavaType(Object boxed)", "class_method_signature": "JavaToValueConverter.convertBoxedJavaType(Object boxed)", "testcase": false, "constructor": false}, {"identifier": "convertValueType", "parameters": "(Value value)", "modifiers": "public static", "return": "Object", "signature": "Object convertValueType(Value value)", "full_signature": "public static Object convertValueType(Value value)", "class_method_signature": "JavaToValueConverter.convertValueType(Value value)", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/types/JavaToValueConverter.java"}, "focal_method": {"identifier": "convertValueType", "parameters": "(Value value)", "modifiers": "public static", "return": "Object", "body": "public static Object convertValueType(Value value) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tif (value instanceof StringValue) {\n\t\t\treturn ((StringValue) value).getValue();\n\t\t}\n\t\telse if (value instanceof IntValue) {\n\t\t\treturn ((IntValue) value).getValue();\n\t\t}\n\t\telse if (value instanceof  LongValue) {\n\t\t\treturn ((LongValue) value).getValue();\n\t\t}\n\t\telse if (value instanceof DoubleValue) {\n\t\t\treturn ((DoubleValue) value).getValue();\n\t\t}\n\t\telse if (value instanceof FloatValue) {\n\t\t\treturn ((FloatValue) value).getValue();\n\t\t}\n\t\telse if (value instanceof BooleanValue) {\n\t\t\treturn ((BooleanValue) value).getValue();\n\t\t}\n\t\telse if (value instanceof ByteValue) {\n\t\t\treturn ((ByteValue) value).getValue();\n\t\t}\n\t\telse if (value instanceof ShortValue) {\n\t\t\treturn ((ShortValue) value).getValue();\n\t\t}\n\t\telse if (value instanceof CharValue) {\n\t\t\treturn ((CharValue) value).getValue();\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Object is no primitive Java type.\");\n\t\t}\n\t}", "signature": "Object convertValueType(Value value)", "full_signature": "public static Object convertValueType(Value value)", "class_method_signature": "JavaToValueConverter.convertValueType(Value value)", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue", "getValue", "getValue", "getValue", "getValue", "getValue", "getValue", "getValue"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}