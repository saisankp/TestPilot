{"test_class": {"identifier": "APIParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Environment<Class<?>> environment = StubEnvironment.of(Project.EMPTY);", "modifier": "", "type": "Environment<Class<?>>", "declarator": "environment = StubEnvironment.of(Project.EMPTY)", "var_name": "environment"}, {"original_string": "APIParser<Class<?>> parser = new APIParser<>(environment);", "modifier": "", "type": "APIParser<Class<?>>", "declarator": "parser = new APIParser<>(environment)", "var_name": "parser"}], "file": "scribe/core/src/test/java/com/karuslabs/scribe/core/parsers/APIParserTest.java"}, "test_case": {"identifier": "resolve_inferred_default", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void resolve_inferred_default() {    \n        parser.parse(Inferred.class);\n        \n        assertEquals(\"1.13\", environment.mappings.get(\"api-version\"));\n        verify(environment).warn(Inferred.class, \"Could not infer \\\"api-version\\\", \\\"1.13\\\" will be used instead\");\n    }", "signature": "void resolve_inferred_default()", "full_signature": "@Test void resolve_inferred_default()", "class_method_signature": "APIParserTest.resolve_inferred_default()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "get", "warn", "verify"]}, "focal_class": {"identifier": "APIParser", "superclass": "extends SingleParser<T>", "interfaces": "", "fields": [], "methods": [{"identifier": "APIParser", "parameters": "(Environment<T> environment)", "modifiers": "public", "return": "", "signature": " APIParser(Environment<T> environment)", "full_signature": "public  APIParser(Environment<T> environment)", "class_method_signature": "APIParser.APIParser(Environment<T> environment)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(T type)", "modifiers": "@Override protected", "return": "void", "signature": "void parse(T type)", "full_signature": "@Override protected void parse(T type)", "class_method_signature": "APIParser.parse(T type)", "testcase": false, "constructor": false}], "file": "scribe/core/src/main/java/com/karuslabs/scribe/core/parsers/APIParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(T type)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void parse(T type) {\n       var api = environment.resolver.any(type, API.class);\n       if (api.value() != Version.INFERRED) {\n           environment.mappings.put(\"api-version\", api.value().toString());\n           return;\n       }\n       \n       for (var version : Version.values()) {\n           if (environment.project.api.startsWith(version + \".\") || environment.project.api.startsWith(version + \"-\")) {\n               environment.mappings.put(\"api-version\", version.toString());\n               break;\n           }\n       }\n       \n       if (!environment.mappings.containsKey(\"api-version\")) {\n           environment.mappings.put(\"api-version\", Version.INFERRED.toString());\n           environment.warn(type, \"Could not infer \\\"api-version\\\", \\\"\" + Version.INFERRED + \"\\\" will be used instead\");\n       }\n    }", "signature": "void parse(T type)", "full_signature": "@Override protected void parse(T type)", "class_method_signature": "APIParser.parse(T type)", "testcase": false, "constructor": false, "invocations": ["any", "value", "put", "toString", "value", "values", "startsWith", "startsWith", "put", "toString", "containsKey", "put", "toString", "warn"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}