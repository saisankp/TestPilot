{"test_class": {"identifier": "SimpleTrialTest", "superclass": "", "interfaces": "", "fields": [], "file": "simpletrial/src/test/java/be/rottenrei/simpletrial/SimpleTrialTest.java"}, "test_case": {"identifier": "oldTimestampMustCauseTrialToBeOver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void oldTimestampMustCauseTrialToBeOver() {\n        Context context = mock(Context.class);\n        TrialFactor factor = mock(TrialFactor.class);\n        when(factor.readTimestamp(any(Context.class))).thenReturn(123L);\n\n        SimpleTrial trial = new SimpleTrial(context, new SimpleTrial.Config().factors(factor));\n\n        verify(factor).persistTimestamp(123L, context);\n        assertTrue(trial.isTrialPeriodFinished());\n    }", "signature": "void oldTimestampMustCauseTrialToBeOver()", "full_signature": "@Test public void oldTimestampMustCauseTrialToBeOver()", "class_method_signature": "SimpleTrialTest.oldTimestampMustCauseTrialToBeOver()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "readTimestamp", "any", "factors", "persistTimestamp", "verify", "assertTrue", "isTrialPeriodFinished"]}, "focal_class": {"identifier": "SimpleTrial", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_TRIAL_DURATION_IN_DAYS = 14;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_TRIAL_DURATION_IN_DAYS = 14", "var_name": "DEFAULT_TRIAL_DURATION_IN_DAYS"}, {"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private final long trialDurationInMilliseconds;", "modifier": "private final", "type": "long", "declarator": "trialDurationInMilliseconds", "var_name": "trialDurationInMilliseconds"}, {"original_string": "private final Config config;", "modifier": "private final", "type": "Config", "declarator": "config", "var_name": "config"}, {"original_string": "private long trialStartTimestamp;", "modifier": "private", "type": "long", "declarator": "trialStartTimestamp", "var_name": "trialStartTimestamp"}], "methods": [{"identifier": "SimpleTrial", "parameters": "(Context context, Config config)", "modifiers": "public", "return": "", "signature": " SimpleTrial(Context context, Config config)", "full_signature": "public  SimpleTrial(Context context, Config config)", "class_method_signature": "SimpleTrial.SimpleTrial(Context context, Config config)", "testcase": false, "constructor": true}, {"identifier": "isTrialPeriodFinished", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTrialPeriodFinished()", "full_signature": "public boolean isTrialPeriodFinished()", "class_method_signature": "SimpleTrial.isTrialPeriodFinished()", "testcase": false, "constructor": false}, {"identifier": "getTrialStartDate", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getTrialStartDate()", "full_signature": "public Date getTrialStartDate()", "class_method_signature": "SimpleTrial.getTrialStartDate()", "testcase": false, "constructor": false}, {"identifier": "persistTrialStartTimestamp", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void persistTrialStartTimestamp()", "full_signature": "private void persistTrialStartTimestamp()", "class_method_signature": "SimpleTrial.persistTrialStartTimestamp()", "testcase": false, "constructor": false}, {"identifier": "updateTrialStartDate", "parameters": "(Date trialStartDate)", "modifiers": "public", "return": "void", "signature": "void updateTrialStartDate(Date trialStartDate)", "full_signature": "public void updateTrialStartDate(Date trialStartDate)", "class_method_signature": "SimpleTrial.updateTrialStartDate(Date trialStartDate)", "testcase": false, "constructor": false}, {"identifier": "calculateTrialStartTimestamp", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long calculateTrialStartTimestamp()", "full_signature": "private long calculateTrialStartTimestamp()", "class_method_signature": "SimpleTrial.calculateTrialStartTimestamp()", "testcase": false, "constructor": false}], "file": "simpletrial/src/main/java/be/rottenrei/simpletrial/SimpleTrial.java"}, "focal_method": {"identifier": "isTrialPeriodFinished", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isTrialPeriodFinished() {\n        return new Date().getTime() >= trialStartTimestamp + trialDurationInMilliseconds;\n    }", "signature": "boolean isTrialPeriodFinished()", "full_signature": "public boolean isTrialPeriodFinished()", "class_method_signature": "SimpleTrial.isTrialPeriodFinished()", "testcase": false, "constructor": false, "invocations": ["getTime"]}, "repository": {"repo_id": 82601803, "url": "https://github.com/karottenreibe/simpletrial", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 83, "license": "licensed"}}