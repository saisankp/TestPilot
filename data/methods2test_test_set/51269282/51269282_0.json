{"test_class": {"identifier": "HttpZipkinFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "zipkin-core/src/test/java/com/smoketurner/dropwizard/zipkin/HttpZipkinFactoryTest.java"}, "test_case": {"identifier": "shouldBeConfigurable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldBeConfigurable() throws IOException {\n    ObjectMapper mapper =\n        new ObjectMapper(new YAMLFactory()).setSubtypeResolver(new DiscoverableSubtypeResolver());\n\n    final ZipkinFactory factory =\n        mapper.readValue(\n            \"enabled: true\\n\"\n                + \"collector: http\\n\"\n                + \"baseUrl: http://example.com:1234/zipkin\\n\"\n                + \"connectTimeout: 1d\\n\"\n                + \"readTimeout: 2d\\n\"\n                + \"reportTimeout: 3d\\n\",\n            ZipkinFactory.class);\n    assertThat(factory).isInstanceOf(HttpZipkinFactory.class);\n    HttpZipkinFactory httpFactory = (HttpZipkinFactory) factory;\n    assertThat(httpFactory.getBaseUrl()).isEqualTo(\"http://example.com:1234/zipkin\");\n    assertThat(httpFactory.getReportTimeout()).isEqualTo(Duration.days(3));\n  }", "signature": "void shouldBeConfigurable()", "full_signature": "@Test public void shouldBeConfigurable()", "class_method_signature": "HttpZipkinFactoryTest.shouldBeConfigurable()", "testcase": true, "constructor": false, "invocations": ["setSubtypeResolver", "readValue", "isInstanceOf", "assertThat", "isEqualTo", "assertThat", "getBaseUrl", "isEqualTo", "assertThat", "getReportTimeout", "days"]}, "focal_class": {"identifier": "HttpZipkinFactory", "superclass": "extends ReportingZipkinFactory", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HttpZipkinFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HttpZipkinFactory.class)", "var_name": "LOGGER"}, {"original_string": "@NotEmpty private String baseUrl = \"http://127.0.0.1:9411/\";", "modifier": "@NotEmpty private", "type": "String", "declarator": "baseUrl = \"http://127.0.0.1:9411/\"", "var_name": "baseUrl"}, {"original_string": "@NotNull\n  @MinDuration(value = 0, unit = TimeUnit.MILLISECONDS)\n  private Duration connectTimeout = Duration.seconds(10);", "modifier": "@NotNull\n  @MinDuration(value = 0, unit = TimeUnit.MILLISECONDS)\n  private", "type": "Duration", "declarator": "connectTimeout = Duration.seconds(10)", "var_name": "connectTimeout"}, {"original_string": "@NotNull\n  @MinDuration(value = 0, unit = TimeUnit.MILLISECONDS)\n  private Duration readTimeout = Duration.seconds(60);", "modifier": "@NotNull\n  @MinDuration(value = 0, unit = TimeUnit.MILLISECONDS)\n  private", "type": "Duration", "declarator": "readTimeout = Duration.seconds(60)", "var_name": "readTimeout"}], "methods": [{"identifier": "getBaseUrl", "parameters": "()", "modifiers": "@JsonProperty public", "return": "String", "signature": "String getBaseUrl()", "full_signature": "@JsonProperty public String getBaseUrl()", "class_method_signature": "HttpZipkinFactory.getBaseUrl()", "testcase": false, "constructor": false}, {"identifier": "setBaseUrl", "parameters": "(String baseUrl)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setBaseUrl(String baseUrl)", "full_signature": "@JsonProperty public void setBaseUrl(String baseUrl)", "class_method_signature": "HttpZipkinFactory.setBaseUrl(String baseUrl)", "testcase": false, "constructor": false}, {"identifier": "setConnectTimeout", "parameters": "(Duration connectTimeout)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setConnectTimeout(Duration connectTimeout)", "full_signature": "@JsonProperty public void setConnectTimeout(Duration connectTimeout)", "class_method_signature": "HttpZipkinFactory.setConnectTimeout(Duration connectTimeout)", "testcase": false, "constructor": false}, {"identifier": "setReadTimeout", "parameters": "(Duration readTimeout)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setReadTimeout(Duration readTimeout)", "full_signature": "@JsonProperty public void setReadTimeout(Duration readTimeout)", "class_method_signature": "HttpZipkinFactory.setReadTimeout(Duration readTimeout)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(final Environment environment)", "modifiers": "@Override public", "return": "Optional<HttpTracing>", "signature": "Optional<HttpTracing> build(final Environment environment)", "full_signature": "@Override public Optional<HttpTracing> build(final Environment environment)", "class_method_signature": "HttpZipkinFactory.build(final Environment environment)", "testcase": false, "constructor": false}], "file": "zipkin-core/src/main/java/com/smoketurner/dropwizard/zipkin/HttpZipkinFactory.java"}, "focal_method": {"identifier": "getBaseUrl", "parameters": "()", "modifiers": "@JsonProperty public", "return": "String", "body": "@JsonProperty\n  public String getBaseUrl() {\n    return baseUrl;\n  }", "signature": "String getBaseUrl()", "full_signature": "@JsonProperty public String getBaseUrl()", "class_method_signature": "HttpZipkinFactory.getBaseUrl()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 51269282, "url": "https://github.com/smoketurner/dropwizard-zipkin", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 50, "size": 3275, "license": "licensed"}}