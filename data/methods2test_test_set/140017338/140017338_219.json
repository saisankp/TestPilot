{"test_class": {"identifier": "MatchStateValidatorTest", "superclass": "extends AntennaTestWithMockedContext", "interfaces": "", "fields": [{"original_string": "private MatchStateValidator matchStateValidator;", "modifier": "private", "type": "MatchStateValidator", "declarator": "matchStateValidator", "var_name": "matchStateValidator"}, {"original_string": "private Artifact artifactUNKNOWN;", "modifier": "private", "type": "Artifact", "declarator": "artifactUNKNOWN", "var_name": "artifactUNKNOWN"}, {"original_string": "private Artifact artifactProprietaryUNKNOWN;", "modifier": "private", "type": "Artifact", "declarator": "artifactProprietaryUNKNOWN", "var_name": "artifactProprietaryUNKNOWN"}, {"original_string": "private Artifact artifactEXACT;", "modifier": "private", "type": "Artifact", "declarator": "artifactEXACT", "var_name": "artifactEXACT"}, {"original_string": "private Artifact artifactProprietaryEXACT;", "modifier": "private", "type": "Artifact", "declarator": "artifactProprietaryEXACT", "var_name": "artifactProprietaryEXACT"}, {"original_string": "@Rule\n    public TemporaryFolder tmpFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "tmpFolder = new TemporaryFolder()", "var_name": "tmpFolder"}], "file": "modules/simple-validators/src/test/java/org/eclipse/sw360/antenna/validators/workflow/processors/MatchStateValidatorTest.java"}, "test_case": {"identifier": "validateMatchStateTest2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validateMatchStateTest2() {\n        List<Artifact> artifacts = new ArrayList<>();\n        artifacts.add(artifactEXACT);\n        artifacts.add(artifactProprietaryUNKNOWN);\n        artifacts.add(artifactProprietaryEXACT);\n        assertThat(matchStateValidator.evaluate(artifacts).getEvaluationResults().size()).isEqualTo(0);\n    }", "signature": "void validateMatchStateTest2()", "full_signature": "@Test public void validateMatchStateTest2()", "class_method_signature": "MatchStateValidatorTest.validateMatchStateTest2()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "isEqualTo", "assertThat", "size", "getEvaluationResults", "evaluate"]}, "focal_class": {"identifier": "MatchStateValidator", "superclass": "extends AbstractComplianceChecker", "interfaces": "", "fields": [{"original_string": "private static final String SIMILAR_SEVERITY_KEY = \"severityOfSIMILAR\";", "modifier": "private static final", "type": "String", "declarator": "SIMILAR_SEVERITY_KEY = \"severityOfSIMILAR\"", "var_name": "SIMILAR_SEVERITY_KEY"}, {"original_string": "private static final String UNKNOWN_SEVERITY_KEY = \"severityOfUNKNOWN\";", "modifier": "private static final", "type": "String", "declarator": "UNKNOWN_SEVERITY_KEY = \"severityOfUNKNOWN\"", "var_name": "UNKNOWN_SEVERITY_KEY"}, {"original_string": "private IEvaluationResult.Severity SIMILAR_Severity = IEvaluationResult.Severity.WARN;", "modifier": "private", "type": "IEvaluationResult.Severity", "declarator": "SIMILAR_Severity = IEvaluationResult.Severity.WARN", "var_name": "SIMILAR_Severity"}, {"original_string": "private IEvaluationResult.Severity UNKNOWN_Severity = IEvaluationResult.Severity.WARN;", "modifier": "private", "type": "IEvaluationResult.Severity", "declarator": "UNKNOWN_Severity = IEvaluationResult.Severity.WARN", "var_name": "UNKNOWN_Severity"}], "methods": [{"identifier": "MatchStateValidator", "parameters": "()", "modifiers": "public", "return": "", "signature": " MatchStateValidator()", "full_signature": "public  MatchStateValidator()", "class_method_signature": "MatchStateValidator.MatchStateValidator()", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "IPolicyEvaluation", "signature": "IPolicyEvaluation evaluate(Collection<Artifact> artifacts)", "full_signature": "@Override public IPolicyEvaluation evaluate(Collection<Artifact> artifacts)", "class_method_signature": "MatchStateValidator.evaluate(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "getRulesetDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRulesetDescription()", "full_signature": "@Override public String getRulesetDescription()", "class_method_signature": "MatchStateValidator.getRulesetDescription()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, String> configMap)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, String> configMap)", "full_signature": "@Override public void configure(Map<String, String> configMap)", "class_method_signature": "MatchStateValidator.configure(Map<String, String> configMap)", "testcase": false, "constructor": false}], "file": "modules/simple-validators/src/main/java/org/eclipse/sw360/antenna/validators/workflow/processors/MatchStateValidator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "IPolicyEvaluation", "body": "@Override\n    public IPolicyEvaluation evaluate(Collection<Artifact> artifacts) {\n        DefaultPolicyEvaluation policyEvaluation = new DefaultPolicyEvaluation();\n        artifacts.stream()\n                .filter(artifact -> !artifact.getFlag(Artifact.IS_PROPRIETARY_FLAG_KEY))\n                .forEach(artifact -> {\n                    final Optional<ArtifactMatchingMetadata> artifactMatchingMetadata = artifact.askFor(ArtifactMatchingMetadata.class);\n                    if(! artifactMatchingMetadata.isPresent()) {\n                        return;\n                    }\n                    MatchState artifactsMatchState = artifactMatchingMetadata.get().getMatchState();\n                    if (MatchState.SIMILAR.equals(artifactsMatchState)) {\n                        policyEvaluation.addEvaluationResult(\"MatchStateValidator::rule\", \"The match State is SIMILAR\", SIMILAR_Severity, artifact);\n                    }else if (MatchState.UNKNOWN.equals(artifactsMatchState)) {\n                        policyEvaluation.addEvaluationResult(\"MatchStateValidator::rule\", \"The match State is UNKNOWN\", UNKNOWN_Severity, artifact);\n                    }\n                });\n        return policyEvaluation;\n    }", "signature": "IPolicyEvaluation evaluate(Collection<Artifact> artifacts)", "full_signature": "@Override public IPolicyEvaluation evaluate(Collection<Artifact> artifacts)", "class_method_signature": "MatchStateValidator.evaluate(Collection<Artifact> artifacts)", "testcase": false, "constructor": false, "invocations": ["forEach", "filter", "stream", "getFlag", "askFor", "isPresent", "getMatchState", "get", "equals", "addEvaluationResult", "equals", "addEvaluationResult"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}