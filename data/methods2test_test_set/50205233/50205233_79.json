{"test_class": {"identifier": "ExtractNewRecordStateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DROP_TOMBSTONES = \"drop.tombstones\";", "modifier": "private static final", "type": "String", "declarator": "DROP_TOMBSTONES = \"drop.tombstones\"", "var_name": "DROP_TOMBSTONES"}, {"original_string": "private static final String HANDLE_DELETES = \"delete.handling.mode\";", "modifier": "private static final", "type": "String", "declarator": "HANDLE_DELETES = \"delete.handling.mode\"", "var_name": "HANDLE_DELETES"}, {"original_string": "private static final String ROUTE_BY_FIELD = \"route.by.field\";", "modifier": "private static final", "type": "String", "declarator": "ROUTE_BY_FIELD = \"route.by.field\"", "var_name": "ROUTE_BY_FIELD"}, {"original_string": "private static final String ADD_FIELDS = \"add.fields\";", "modifier": "private static final", "type": "String", "declarator": "ADD_FIELDS = \"add.fields\"", "var_name": "ADD_FIELDS"}, {"original_string": "private static final String ADD_HEADERS = \"add.headers\";", "modifier": "private static final", "type": "String", "declarator": "ADD_HEADERS = \"add.headers\"", "var_name": "ADD_HEADERS"}, {"original_string": "private static final String ADD_FIELDS_PREFIX = ADD_FIELDS + \".prefix\";", "modifier": "private static final", "type": "String", "declarator": "ADD_FIELDS_PREFIX = ADD_FIELDS + \".prefix\"", "var_name": "ADD_FIELDS_PREFIX"}, {"original_string": "private static final String ADD_HEADERS_PREFIX = ADD_HEADERS + \".prefix\";", "modifier": "private static final", "type": "String", "declarator": "ADD_HEADERS_PREFIX = ADD_HEADERS + \".prefix\"", "var_name": "ADD_HEADERS_PREFIX"}, {"original_string": "final Schema recordSchema = SchemaBuilder.struct()\n            .field(\"id\", SchemaBuilder.int8())\n            .field(\"name\", SchemaBuilder.string())\n            .build();", "modifier": "final", "type": "Schema", "declarator": "recordSchema = SchemaBuilder.struct()\n            .field(\"id\", SchemaBuilder.int8())\n            .field(\"name\", SchemaBuilder.string())\n            .build()", "var_name": "recordSchema"}, {"original_string": "final Schema sourceSchema = SchemaBuilder.struct()\n            .field(\"lsn\", SchemaBuilder.int32())\n            .build();", "modifier": "final", "type": "Schema", "declarator": "sourceSchema = SchemaBuilder.struct()\n            .field(\"lsn\", SchemaBuilder.int32())\n            .build()", "var_name": "sourceSchema"}, {"original_string": "final Envelope envelope = Envelope.defineSchema()\n            .withName(\"dummy.Envelope\")\n            .withRecord(recordSchema)\n            .withSource(sourceSchema)\n            .build();", "modifier": "final", "type": "Envelope", "declarator": "envelope = Envelope.defineSchema()\n            .withName(\"dummy.Envelope\")\n            .withRecord(recordSchema)\n            .withSource(sourceSchema)\n            .build()", "var_name": "envelope"}], "file": "debezium-core/src/test/java/io/debezium/transforms/ExtractNewRecordStateTest.java"}, "test_case": {"identifier": "testAddFields", "parameters": "()", "modifiers": "@Test @FixFor({ \"DBZ-1452\", \"DBZ-2504\" }) public", "return": "void", "body": "@Test\n    @FixFor({ \"DBZ-1452\", \"DBZ-2504\" })\n    public void testAddFields() {\n        try (final ExtractNewRecordState<SourceRecord> transform = new ExtractNewRecordState<>()) {\n            final Map<String, String> props = new HashMap<>();\n            props.put(ADD_FIELDS, \"op , lsn,id\");\n            props.put(ADD_FIELDS_PREFIX, \"prefix.\");\n            transform.configure(props);\n\n            final SourceRecord updateRecord = createUpdateRecord();\n            final SourceRecord unwrapped = transform.apply(updateRecord);\n            assertThat(((Struct) unwrapped.value()).get(\"prefix.op\")).isEqualTo(Envelope.Operation.UPDATE.code());\n            assertThat(((Struct) unwrapped.value()).get(\"prefix.lsn\")).isEqualTo(1234);\n            assertThat(((Struct) unwrapped.value()).get(\"prefix.id\")).isEqualTo(\"571\");\n        }\n    }", "signature": "void testAddFields()", "full_signature": "@Test @FixFor({ \"DBZ-1452\", \"DBZ-2504\" }) public void testAddFields()", "class_method_signature": "ExtractNewRecordStateTest.testAddFields()", "testcase": true, "constructor": false, "invocations": ["put", "put", "configure", "createUpdateRecord", "apply", "isEqualTo", "assertThat", "get", "value", "code", "isEqualTo", "assertThat", "get", "value", "isEqualTo", "assertThat", "get", "value"]}, "focal_class": {"identifier": "ExtractNewRecordState", "superclass": "", "interfaces": "implements Transformation<R>", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ExtractNewRecordState.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ExtractNewRecordState.class)", "var_name": "LOGGER"}, {"original_string": "private static final String PURPOSE = \"source field insertion\";", "modifier": "private static final", "type": "String", "declarator": "PURPOSE = \"source field insertion\"", "var_name": "PURPOSE"}, {"original_string": "private static final int SCHEMA_CACHE_SIZE = 64;", "modifier": "private static final", "type": "int", "declarator": "SCHEMA_CACHE_SIZE = 64", "var_name": "SCHEMA_CACHE_SIZE"}, {"original_string": "private static final Pattern FIELD_SEPARATOR = Pattern.compile(\"\\\\.\");", "modifier": "private static final", "type": "Pattern", "declarator": "FIELD_SEPARATOR = Pattern.compile(\"\\\\.\")", "var_name": "FIELD_SEPARATOR"}, {"original_string": "private boolean dropTombstones;", "modifier": "private", "type": "boolean", "declarator": "dropTombstones", "var_name": "dropTombstones"}, {"original_string": "private DeleteHandling handleDeletes;", "modifier": "private", "type": "DeleteHandling", "declarator": "handleDeletes", "var_name": "handleDeletes"}, {"original_string": "private List<FieldReference> additionalHeaders;", "modifier": "private", "type": "List<FieldReference>", "declarator": "additionalHeaders", "var_name": "additionalHeaders"}, {"original_string": "private List<FieldReference> additionalFields;", "modifier": "private", "type": "List<FieldReference>", "declarator": "additionalFields", "var_name": "additionalFields"}, {"original_string": "private String routeByField;", "modifier": "private", "type": "String", "declarator": "routeByField", "var_name": "routeByField"}, {"original_string": "private final ExtractField<R> afterDelegate = new ExtractField.Value<R>();", "modifier": "private final", "type": "ExtractField<R>", "declarator": "afterDelegate = new ExtractField.Value<R>()", "var_name": "afterDelegate"}, {"original_string": "private final ExtractField<R> beforeDelegate = new ExtractField.Value<R>();", "modifier": "private final", "type": "ExtractField<R>", "declarator": "beforeDelegate = new ExtractField.Value<R>()", "var_name": "beforeDelegate"}, {"original_string": "private final InsertField<R> removedDelegate = new InsertField.Value<R>();", "modifier": "private final", "type": "InsertField<R>", "declarator": "removedDelegate = new InsertField.Value<R>()", "var_name": "removedDelegate"}, {"original_string": "private final InsertField<R> updatedDelegate = new InsertField.Value<R>();", "modifier": "private final", "type": "InsertField<R>", "declarator": "updatedDelegate = new InsertField.Value<R>()", "var_name": "updatedDelegate"}, {"original_string": "private BoundedConcurrentHashMap<Schema, Schema> schemaUpdateCache;", "modifier": "private", "type": "BoundedConcurrentHashMap<Schema, Schema>", "declarator": "schemaUpdateCache", "var_name": "schemaUpdateCache"}, {"original_string": "private SmtManager<R> smtManager;", "modifier": "private", "type": "SmtManager<R>", "declarator": "smtManager", "var_name": "smtManager"}], "methods": [{"identifier": "configure", "parameters": "(final Map<String, ?> configs)", "modifiers": "@Override public", "return": "void", "signature": "void configure(final Map<String, ?> configs)", "full_signature": "@Override public void configure(final Map<String, ?> configs)", "class_method_signature": "ExtractNewRecordState.configure(final Map<String, ?> configs)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final R record)", "modifiers": "@Override public", "return": "R", "signature": "R apply(final R record)", "full_signature": "@Override public R apply(final R record)", "class_method_signature": "ExtractNewRecordState.apply(final R record)", "testcase": false, "constructor": false}, {"identifier": "setTopic", "parameters": "(String updatedTopicValue, R record)", "modifiers": "private", "return": "R", "signature": "R setTopic(String updatedTopicValue, R record)", "full_signature": "private R setTopic(String updatedTopicValue, R record)", "class_method_signature": "ExtractNewRecordState.setTopic(String updatedTopicValue, R record)", "testcase": false, "constructor": false}, {"identifier": "makeHeaders", "parameters": "(List<FieldReference> additionalHeaders, Struct originalRecordValue)", "modifiers": "private", "return": "Headers", "signature": "Headers makeHeaders(List<FieldReference> additionalHeaders, Struct originalRecordValue)", "full_signature": "private Headers makeHeaders(List<FieldReference> additionalHeaders, Struct originalRecordValue)", "class_method_signature": "ExtractNewRecordState.makeHeaders(List<FieldReference> additionalHeaders, Struct originalRecordValue)", "testcase": false, "constructor": false}, {"identifier": "addFields", "parameters": "(List<FieldReference> additionalFields, R originalRecord, R unwrappedRecord)", "modifiers": "private", "return": "R", "signature": "R addFields(List<FieldReference> additionalFields, R originalRecord, R unwrappedRecord)", "full_signature": "private R addFields(List<FieldReference> additionalFields, R originalRecord, R unwrappedRecord)", "class_method_signature": "ExtractNewRecordState.addFields(List<FieldReference> additionalFields, R originalRecord, R unwrappedRecord)", "testcase": false, "constructor": false}, {"identifier": "makeUpdatedSchema", "parameters": "(List<FieldReference> additionalFields, Schema schema, Struct originalRecordValue)", "modifiers": "private", "return": "Schema", "signature": "Schema makeUpdatedSchema(List<FieldReference> additionalFields, Schema schema, Struct originalRecordValue)", "full_signature": "private Schema makeUpdatedSchema(List<FieldReference> additionalFields, Schema schema, Struct originalRecordValue)", "class_method_signature": "ExtractNewRecordState.makeUpdatedSchema(List<FieldReference> additionalFields, Schema schema, Struct originalRecordValue)", "testcase": false, "constructor": false}, {"identifier": "updateSchema", "parameters": "(FieldReference fieldReference, SchemaBuilder builder, Schema originalRecordSchema)", "modifiers": "private", "return": "SchemaBuilder", "signature": "SchemaBuilder updateSchema(FieldReference fieldReference, SchemaBuilder builder, Schema originalRecordSchema)", "full_signature": "private SchemaBuilder updateSchema(FieldReference fieldReference, SchemaBuilder builder, Schema originalRecordSchema)", "class_method_signature": "ExtractNewRecordState.updateSchema(FieldReference fieldReference, SchemaBuilder builder, Schema originalRecordSchema)", "testcase": false, "constructor": false}, {"identifier": "updateValue", "parameters": "(FieldReference fieldReference, Struct updatedValue, Struct struct)", "modifiers": "private", "return": "Struct", "signature": "Struct updateValue(FieldReference fieldReference, Struct updatedValue, Struct struct)", "full_signature": "private Struct updateValue(FieldReference fieldReference, Struct updatedValue, Struct struct)", "class_method_signature": "ExtractNewRecordState.updateValue(FieldReference fieldReference, Struct updatedValue, Struct struct)", "testcase": false, "constructor": false}, {"identifier": "config", "parameters": "()", "modifiers": "@Override public", "return": "ConfigDef", "signature": "ConfigDef config()", "full_signature": "@Override public ConfigDef config()", "class_method_signature": "ExtractNewRecordState.config()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ExtractNewRecordState.close()", "testcase": false, "constructor": false}], "file": "debezium-core/src/main/java/io/debezium/transforms/ExtractNewRecordState.java"}, "focal_method": {"identifier": "addFields", "parameters": "(List<FieldReference> additionalFields, R originalRecord, R unwrappedRecord)", "modifiers": "private", "return": "R", "body": "private R addFields(List<FieldReference> additionalFields, R originalRecord, R unwrappedRecord) {\n        final Struct value = requireStruct(unwrappedRecord.value(), PURPOSE);\n        Struct originalRecordValue = (Struct) originalRecord.value();\n\n        Schema updatedSchema = schemaUpdateCache.computeIfAbsent(value.schema(),\n                s -> makeUpdatedSchema(additionalFields, value.schema(), originalRecordValue));\n\n        // Update the value with the new fields\n        Struct updatedValue = new Struct(updatedSchema);\n        for (org.apache.kafka.connect.data.Field field : value.schema().fields()) {\n            updatedValue.put(field.name(), value.get(field));\n\n        }\n\n        for (FieldReference fieldReference : additionalFields) {\n            updatedValue = updateValue(fieldReference, updatedValue, originalRecordValue);\n        }\n\n        return unwrappedRecord.newRecord(\n                unwrappedRecord.topic(),\n                unwrappedRecord.kafkaPartition(),\n                unwrappedRecord.keySchema(),\n                unwrappedRecord.key(),\n                updatedSchema,\n                updatedValue,\n                unwrappedRecord.timestamp());\n    }", "signature": "R addFields(List<FieldReference> additionalFields, R originalRecord, R unwrappedRecord)", "full_signature": "private R addFields(List<FieldReference> additionalFields, R originalRecord, R unwrappedRecord)", "class_method_signature": "ExtractNewRecordState.addFields(List<FieldReference> additionalFields, R originalRecord, R unwrappedRecord)", "testcase": false, "constructor": false, "invocations": ["requireStruct", "value", "value", "computeIfAbsent", "schema", "makeUpdatedSchema", "schema", "fields", "schema", "put", "name", "get", "updateValue", "newRecord", "topic", "kafkaPartition", "keySchema", "key", "timestamp"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}