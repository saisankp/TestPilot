{"test_class": {"identifier": "DnsResolverConnectionStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<String, InetAddress[]> resolverMap = new HashMap<>();", "modifier": "private final", "type": "Map<String, InetAddress[]>", "declarator": "resolverMap = new HashMap<>()", "var_name": "resolverMap"}, {"original_string": "private final Function<String, InetAddress[]> customResolver = name -> resolverMap.get(name);", "modifier": "private final", "type": "Function<String, InetAddress[]>", "declarator": "customResolver = name -> resolverMap.get(name)", "var_name": "customResolver"}, {"original_string": "private LdapURL directory1v4;", "modifier": "private", "type": "LdapURL", "declarator": "directory1v4", "var_name": "directory1v4"}, {"original_string": "private LdapURL directory1v6;", "modifier": "private", "type": "LdapURL", "declarator": "directory1v6", "var_name": "directory1v6"}, {"original_string": "private LdapURL directory2v4;", "modifier": "private", "type": "LdapURL", "declarator": "directory2v4", "var_name": "directory2v4"}, {"original_string": "private LdapURL directory2v6;", "modifier": "private", "type": "LdapURL", "declarator": "directory2v6", "var_name": "directory2v6"}, {"original_string": "private LdapURL directory3v4;", "modifier": "private", "type": "LdapURL", "declarator": "directory3v4", "var_name": "directory3v4"}], "file": "core/src/test/java/org/ldaptive/DnsResolverConnectionStrategyTest.java"}, "test_case": {"identifier": "iterator", "parameters": "(final String actual, final LdapURL[] expected)", "modifiers": "@Test(groups = \"conn\", dataProvider = \"urls\") public", "return": "void", "body": "@Test(groups = \"conn\", dataProvider = \"urls\")\n  public void iterator(final String actual, final LdapURL[] expected)\n  {\n    final DnsResolverConnectionStrategy strategy = new DnsResolverConnectionStrategy();\n    strategy.setResolverFunction(customResolver);\n    strategy.initialize(actual, ldapURL -> true);\n    Assert.assertEquals(\n      StreamSupport.stream(strategy.spliterator(), false).collect(Collectors.toList()), Arrays.asList(expected));\n  }", "signature": "void iterator(final String actual, final LdapURL[] expected)", "full_signature": "@Test(groups = \"conn\", dataProvider = \"urls\") public void iterator(final String actual, final LdapURL[] expected)", "class_method_signature": "DnsResolverConnectionStrategyTest.iterator(final String actual, final LdapURL[] expected)", "testcase": true, "constructor": false, "invocations": ["setResolverFunction", "initialize", "assertEquals", "collect", "stream", "spliterator", "toList", "asList"]}, "focal_class": {"identifier": "DnsResolverConnectionStrategy", "superclass": "extends AbstractConnectionStrategy", "interfaces": "", "fields": [{"original_string": "protected static final Duration DEFAULT_TTL = Duration.ofHours(6);", "modifier": "protected static final", "type": "Duration", "declarator": "DEFAULT_TTL = Duration.ofHours(6)", "var_name": "DEFAULT_TTL"}, {"original_string": "private final Function<List<LdapURL>, Iterator<LdapURL>> iterFunction;", "modifier": "private final", "type": "Function<List<LdapURL>, Iterator<LdapURL>>", "declarator": "iterFunction", "var_name": "iterFunction"}, {"original_string": "private final Duration dnsTtl;", "modifier": "private final", "type": "Duration", "declarator": "dnsTtl", "var_name": "dnsTtl"}, {"original_string": "private Function<String, InetAddress[]> resolverFunction = name -> {\n    try {\n      return InetAddress.getAllByName(name);\n    } catch (UnknownHostException e) {\n      throw new IllegalStateException(\"Could not resolve IP address for \" + name, e);\n    }\n  };", "modifier": "private", "type": "Function<String, InetAddress[]>", "declarator": "resolverFunction = name -> {\n    try {\n      return InetAddress.getAllByName(name);\n    } catch (UnknownHostException e) {\n      throw new IllegalStateException(\"Could not resolve IP address for \" + name, e);\n    }\n  }", "var_name": "resolverFunction"}, {"original_string": "private String ldapUrls;", "modifier": "private", "type": "String", "declarator": "ldapUrls", "var_name": "ldapUrls"}, {"original_string": "private Instant expirationTime;", "modifier": "private", "type": "Instant", "declarator": "expirationTime", "var_name": "expirationTime"}], "methods": [{"identifier": "DnsResolverConnectionStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " DnsResolverConnectionStrategy()", "full_signature": "public  DnsResolverConnectionStrategy()", "class_method_signature": "DnsResolverConnectionStrategy.DnsResolverConnectionStrategy()", "testcase": false, "constructor": true}, {"identifier": "DnsResolverConnectionStrategy", "parameters": "(final Duration ttl)", "modifiers": "public", "return": "", "signature": " DnsResolverConnectionStrategy(final Duration ttl)", "full_signature": "public  DnsResolverConnectionStrategy(final Duration ttl)", "class_method_signature": "DnsResolverConnectionStrategy.DnsResolverConnectionStrategy(final Duration ttl)", "testcase": false, "constructor": true}, {"identifier": "DnsResolverConnectionStrategy", "parameters": "(final Function<List<LdapURL>, Iterator<LdapURL>> function)", "modifiers": "public", "return": "", "signature": " DnsResolverConnectionStrategy(final Function<List<LdapURL>, Iterator<LdapURL>> function)", "full_signature": "public  DnsResolverConnectionStrategy(final Function<List<LdapURL>, Iterator<LdapURL>> function)", "class_method_signature": "DnsResolverConnectionStrategy.DnsResolverConnectionStrategy(final Function<List<LdapURL>, Iterator<LdapURL>> function)", "testcase": false, "constructor": true}, {"identifier": "DnsResolverConnectionStrategy", "parameters": "(final Function<List<LdapURL>, Iterator<LdapURL>> function, final Duration ttl)", "modifiers": "public", "return": "", "signature": " DnsResolverConnectionStrategy(final Function<List<LdapURL>, Iterator<LdapURL>> function, final Duration ttl)", "full_signature": "public  DnsResolverConnectionStrategy(final Function<List<LdapURL>, Iterator<LdapURL>> function, final Duration ttl)", "class_method_signature": "DnsResolverConnectionStrategy.DnsResolverConnectionStrategy(final Function<List<LdapURL>, Iterator<LdapURL>> function, final Duration ttl)", "testcase": false, "constructor": true}, {"identifier": "getResolverFunction", "parameters": "()", "modifiers": "public", "return": "Function<String, InetAddress[]>", "signature": "Function<String, InetAddress[]> getResolverFunction()", "full_signature": "public Function<String, InetAddress[]> getResolverFunction()", "class_method_signature": "DnsResolverConnectionStrategy.getResolverFunction()", "testcase": false, "constructor": false}, {"identifier": "setResolverFunction", "parameters": "(final Function<String, InetAddress[]> func)", "modifiers": "public", "return": "void", "signature": "void setResolverFunction(final Function<String, InetAddress[]> func)", "full_signature": "public void setResolverFunction(final Function<String, InetAddress[]> func)", "class_method_signature": "DnsResolverConnectionStrategy.setResolverFunction(final Function<String, InetAddress[]> func)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<LdapURL>", "signature": "Iterator<LdapURL> iterator()", "full_signature": "@Override public Iterator<LdapURL> iterator()", "class_method_signature": "DnsResolverConnectionStrategy.iterator()", "testcase": false, "constructor": false}, {"identifier": "populate", "parameters": "(final String urls, final LdapURLSet urlSet)", "modifiers": "@Override public", "return": "void", "signature": "void populate(final String urls, final LdapURLSet urlSet)", "full_signature": "@Override public void populate(final String urls, final LdapURLSet urlSet)", "class_method_signature": "DnsResolverConnectionStrategy.populate(final String urls, final LdapURLSet urlSet)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/DnsResolverConnectionStrategy.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<LdapURL>", "body": "@Override\n  public Iterator<LdapURL> iterator()\n  {\n    if (!isInitialized()) {\n      throw new IllegalStateException(\"Strategy is not initialized\");\n    }\n    if (Instant.now().isAfter(expirationTime)) {\n      populate(ldapUrls, ldapURLSet);\n    }\n    if (iterFunction != null) {\n      return iterFunction.apply(ldapURLSet.getUrls());\n    }\n    return new DefaultLdapURLIterator(ldapURLSet.getUrls());\n  }", "signature": "Iterator<LdapURL> iterator()", "full_signature": "@Override public Iterator<LdapURL> iterator()", "class_method_signature": "DnsResolverConnectionStrategy.iterator()", "testcase": false, "constructor": false, "invocations": ["isInitialized", "isAfter", "now", "populate", "apply", "getUrls", "getUrls"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}