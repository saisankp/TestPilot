{"test_class": {"identifier": "OpearFileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(OpearFileTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(OpearFileTest.class)", "var_name": "LOGGER"}, {"original_string": "final File baseDir = new File(\"src/test/resources/OpearFileTest\");", "modifier": "final", "type": "File", "declarator": "baseDir = new File(\"src/test/resources/OpearFileTest\")", "var_name": "baseDir"}, {"original_string": "final File testTarget = new File(\"target/test-output/OpearFileTest\");", "modifier": "final", "type": "File", "declarator": "testTarget = new File(\"target/test-output/OpearFileTest\")", "var_name": "testTarget"}, {"original_string": "final File deepTestSrc = new File(baseDir, \"deep_test_src\");", "modifier": "final", "type": "File", "declarator": "deepTestSrc = new File(baseDir, \"deep_test_src\")", "var_name": "deepTestSrc"}, {"original_string": "final File deepTestTarget = new File(testTarget, \"deep_test.jar\");", "modifier": "final", "type": "File", "declarator": "deepTestTarget = new File(testTarget, \"deep_test.jar\")", "var_name": "deepTestTarget"}, {"original_string": "final File embedModuleSrc = new File(baseDir, \"embedded_module_src\");", "modifier": "final", "type": "File", "declarator": "embedModuleSrc = new File(baseDir, \"embedded_module_src\")", "var_name": "embedModuleSrc"}, {"original_string": "final File embedModuleTarget = new File(testTarget, \"embedded_module.jar\");", "modifier": "final", "type": "File", "declarator": "embedModuleTarget = new File(testTarget, \"embedded_module.jar\")", "var_name": "embedModuleTarget"}], "file": "core/src/test/java/net/adamcin/oakpal/core/opear/OpearFileTest.java"}, "test_case": {"identifier": "testValidateUriHeaderValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateUriHeaderValues() {\n        final Manifest manifest = new Manifest();\n        manifest.getMainAttributes().put(NAME_CLASS_PATH, \"../somedir\");\n        assertTrue(\".. should fail\",\n                OpearFile.validateUriHeaderValues(manifest, NAME_CLASS_PATH).isFailure());\n        manifest.getMainAttributes().put(NAME_CLASS_PATH, \"/somedir\");\n        assertTrue(\"/ should succeed\",\n                OpearFile.validateUriHeaderValues(manifest, NAME_CLASS_PATH).isSuccess());\n        manifest.getMainAttributes().put(NAME_CLASS_PATH, \"/somedir/../..\");\n        assertTrue(\"/../.. should fail\",\n                OpearFile.validateUriHeaderValues(manifest, NAME_CLASS_PATH).isFailure());\n    }", "signature": "void testValidateUriHeaderValues()", "full_signature": "@Test public void testValidateUriHeaderValues()", "class_method_signature": "OpearFileTest.testValidateUriHeaderValues()", "testcase": true, "constructor": false, "invocations": ["put", "getMainAttributes", "assertTrue", "isFailure", "validateUriHeaderValues", "put", "getMainAttributes", "assertTrue", "isSuccess", "validateUriHeaderValues", "put", "getMainAttributes", "assertTrue", "isFailure", "validateUriHeaderValues"]}, "focal_class": {"identifier": "OpearFile", "superclass": "", "interfaces": "implements Opear", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(OpearFile.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(OpearFile.class)", "var_name": "LOGGER"}, {"original_string": "public static final Attributes.Name NAME_BUNDLE_SYMBOLICNAME = new Attributes.Name(MF_BUNDLE_SYMBOLICNAME);", "modifier": "public static final", "type": "Attributes.Name", "declarator": "NAME_BUNDLE_SYMBOLICNAME = new Attributes.Name(MF_BUNDLE_SYMBOLICNAME)", "var_name": "NAME_BUNDLE_SYMBOLICNAME"}, {"original_string": "public static final Attributes.Name NAME_BUNDLE_VERSION = new Attributes.Name(MF_BUNDLE_VERSION);", "modifier": "public static final", "type": "Attributes.Name", "declarator": "NAME_BUNDLE_VERSION = new Attributes.Name(MF_BUNDLE_VERSION)", "var_name": "NAME_BUNDLE_VERSION"}, {"original_string": "public static final Attributes.Name NAME_CLASS_PATH = new Attributes.Name(MF_CLASS_PATH);", "modifier": "public static final", "type": "Attributes.Name", "declarator": "NAME_CLASS_PATH = new Attributes.Name(MF_CLASS_PATH)", "var_name": "NAME_CLASS_PATH"}, {"original_string": "public static final Attributes.Name NAME_OAKPAL_VERSION = new Attributes.Name(MF_OAKPAL_VERSION);", "modifier": "public static final", "type": "Attributes.Name", "declarator": "NAME_OAKPAL_VERSION = new Attributes.Name(MF_OAKPAL_VERSION)", "var_name": "NAME_OAKPAL_VERSION"}, {"original_string": "public static final Attributes.Name NAME_OAKPAL_PLAN = new Attributes.Name(MF_OAKPAL_PLAN);", "modifier": "public static final", "type": "Attributes.Name", "declarator": "NAME_OAKPAL_PLAN = new Attributes.Name(MF_OAKPAL_PLAN)", "var_name": "NAME_OAKPAL_PLAN"}, {"original_string": "final File cacheDir;", "modifier": "final", "type": "File", "declarator": "cacheDir", "var_name": "cacheDir"}, {"original_string": "final OpearMetadata metadata;", "modifier": "final", "type": "OpearMetadata", "declarator": "metadata", "var_name": "metadata"}], "methods": [{"identifier": "OpearFile", "parameters": "(final File cacheDir, final OpearMetadata metadata)", "modifiers": "", "return": "", "signature": " OpearFile(final File cacheDir, final OpearMetadata metadata)", "full_signature": "  OpearFile(final File cacheDir, final OpearMetadata metadata)", "class_method_signature": "OpearFile.OpearFile(final File cacheDir, final OpearMetadata metadata)", "testcase": false, "constructor": true}, {"identifier": "getDefaultPlan", "parameters": "()", "modifiers": "@Override public", "return": "URL", "signature": "URL getDefaultPlan()", "full_signature": "@Override public URL getDefaultPlan()", "class_method_signature": "OpearFile.getDefaultPlan()", "testcase": false, "constructor": false}, {"identifier": "getSpecificPlan", "parameters": "(final @NotNull String planName)", "modifiers": "@Override public", "return": "Result<URL>", "signature": "Result<URL> getSpecificPlan(final @NotNull String planName)", "full_signature": "@Override public Result<URL> getSpecificPlan(final @NotNull String planName)", "class_method_signature": "OpearFile.getSpecificPlan(final @NotNull String planName)", "testcase": false, "constructor": false}, {"identifier": "getPlanClassLoader", "parameters": "(final @NotNull ClassLoader parent)", "modifiers": "@Override public", "return": "ClassLoader", "signature": "ClassLoader getPlanClassLoader(final @NotNull ClassLoader parent)", "full_signature": "@Override public ClassLoader getPlanClassLoader(final @NotNull ClassLoader parent)", "class_method_signature": "OpearFile.getPlanClassLoader(final @NotNull ClassLoader parent)", "testcase": false, "constructor": false}, {"identifier": "readExpectedManifest", "parameters": "(final @NotNull File mfFile)", "modifiers": "static", "return": "Result<Manifest>", "signature": "Result<Manifest> readExpectedManifest(final @NotNull File mfFile)", "full_signature": "static Result<Manifest> readExpectedManifest(final @NotNull File mfFile)", "class_method_signature": "OpearFile.readExpectedManifest(final @NotNull File mfFile)", "testcase": false, "constructor": false}, {"identifier": "metaForSimpleDir", "parameters": "(final @NotNull File directory)", "modifiers": "static", "return": "OpearMetadata", "signature": "OpearMetadata metaForSimpleDir(final @NotNull File directory)", "full_signature": "static OpearMetadata metaForSimpleDir(final @NotNull File directory)", "class_method_signature": "OpearFile.metaForSimpleDir(final @NotNull File directory)", "testcase": false, "constructor": false}, {"identifier": "validateUriHeaderValuesWithDefaultForMissing", "parameters": "(final @NotNull Manifest manifest,\n                                                                         final @NotNull Attributes.Name headerName,\n                                                                         final @NotNull String... defaultValue)", "modifiers": "static", "return": "Result<String[]>", "signature": "Result<String[]> validateUriHeaderValuesWithDefaultForMissing(final @NotNull Manifest manifest,\n                                                                         final @NotNull Attributes.Name headerName,\n                                                                         final @NotNull String... defaultValue)", "full_signature": "static Result<String[]> validateUriHeaderValuesWithDefaultForMissing(final @NotNull Manifest manifest,\n                                                                         final @NotNull Attributes.Name headerName,\n                                                                         final @NotNull String... defaultValue)", "class_method_signature": "OpearFile.validateUriHeaderValuesWithDefaultForMissing(final @NotNull Manifest manifest,\n                                                                         final @NotNull Attributes.Name headerName,\n                                                                         final @NotNull String... defaultValue)", "testcase": false, "constructor": false}, {"identifier": "validateUriHeaderValues", "parameters": "(final @NotNull Manifest manifest,\n                                                    final @NotNull Attributes.Name headerName)", "modifiers": "static", "return": "Result<String[]>", "signature": "Result<String[]> validateUriHeaderValues(final @NotNull Manifest manifest,\n                                                    final @NotNull Attributes.Name headerName)", "full_signature": "static Result<String[]> validateUriHeaderValues(final @NotNull Manifest manifest,\n                                                    final @NotNull Attributes.Name headerName)", "class_method_signature": "OpearFile.validateUriHeaderValues(final @NotNull Manifest manifest,\n                                                    final @NotNull Attributes.Name headerName)", "testcase": false, "constructor": false}, {"identifier": "validateOpearManifest", "parameters": "(final @Nullable Manifest manifest)", "modifiers": "static", "return": "Result<OpearMetadata>", "signature": "Result<OpearMetadata> validateOpearManifest(final @Nullable Manifest manifest)", "full_signature": "static Result<OpearMetadata> validateOpearManifest(final @Nullable Manifest manifest)", "class_method_signature": "OpearFile.validateOpearManifest(final @Nullable Manifest manifest)", "testcase": false, "constructor": false}, {"identifier": "fromDirectory", "parameters": "(final @NotNull File directory)", "modifiers": "public static", "return": "Result<OpearFile>", "signature": "Result<OpearFile> fromDirectory(final @NotNull File directory)", "full_signature": "public static Result<OpearFile> fromDirectory(final @NotNull File directory)", "class_method_signature": "OpearFile.fromDirectory(final @NotNull File directory)", "testcase": false, "constructor": false}, {"identifier": "getHashCacheKey", "parameters": "(final @NotNull String path)", "modifiers": "static", "return": "Result<String>", "signature": "Result<String> getHashCacheKey(final @NotNull String path)", "full_signature": "static Result<String> getHashCacheKey(final @NotNull String path)", "class_method_signature": "OpearFile.getHashCacheKey(final @NotNull String path)", "testcase": false, "constructor": false}, {"identifier": "fromJar", "parameters": "(final @NotNull JarFile jarFile, final @NotNull File cacheBaseDir)", "modifiers": "public static", "return": "Result<OpearFile>", "signature": "Result<OpearFile> fromJar(final @NotNull JarFile jarFile, final @NotNull File cacheBaseDir)", "full_signature": "public static Result<OpearFile> fromJar(final @NotNull JarFile jarFile, final @NotNull File cacheBaseDir)", "class_method_signature": "OpearFile.fromJar(final @NotNull JarFile jarFile, final @NotNull File cacheBaseDir)", "testcase": false, "constructor": false}, {"identifier": "cacheJar", "parameters": "(final @NotNull JarFile jarFile, final @NotNull File cacheDir)", "modifiers": "static", "return": "Result<File>", "signature": "Result<File> cacheJar(final @NotNull JarFile jarFile, final @NotNull File cacheDir)", "full_signature": "static Result<File> cacheJar(final @NotNull JarFile jarFile, final @NotNull File cacheDir)", "class_method_signature": "OpearFile.cacheJar(final @NotNull JarFile jarFile, final @NotNull File cacheDir)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/opear/OpearFile.java"}, "focal_method": {"identifier": "validateUriHeaderValues", "parameters": "(final @NotNull Manifest manifest,\n                                                    final @NotNull Attributes.Name headerName)", "modifiers": "static", "return": "Result<String[]>", "body": "static Result<String[]> validateUriHeaderValues(final @NotNull Manifest manifest,\n                                                    final @NotNull Attributes.Name headerName) {\n\n        final List<Result<String>> cpResult = Util.getManifestHeaderValues(manifest, headerName.toString())\n                .stream()\n                .map(result1(URI::new))\n                .map(uriResult -> uriResult.flatMap(uri -> {\n                    final String normal = uri.normalize().getPath().replaceFirst(\"^/\", \"\");\n                    if (\"..\".equals(normal) || normal.startsWith(\"../\")) {\n                        return Result.failure(\"Illegal parent path selector in \" + normal);\n                    } else {\n                        return Result.success(normal);\n                    }\n                }))\n                .collect(Collectors.toList());\n        return cpResult.stream()\n                .filter(Result::isFailure).findFirst()\n                .map(failed ->\n                        failed.getError()\n                                .map(Result::<String[]>failure)\n                                .orElseGet(() -> Result.<String[]>failure(format(\"invalid %s header\", headerName))))\n                .orElseGet(() -> Result.success(cpResult.stream().flatMap(Result::stream).toArray(String[]::new)));\n    }", "signature": "Result<String[]> validateUriHeaderValues(final @NotNull Manifest manifest,\n                                                    final @NotNull Attributes.Name headerName)", "full_signature": "static Result<String[]> validateUriHeaderValues(final @NotNull Manifest manifest,\n                                                    final @NotNull Attributes.Name headerName)", "class_method_signature": "OpearFile.validateUriHeaderValues(final @NotNull Manifest manifest,\n                                                    final @NotNull Attributes.Name headerName)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "map", "stream", "getManifestHeaderValues", "toString", "result1", "flatMap", "replaceFirst", "getPath", "normalize", "equals", "startsWith", "failure", "success", "toList", "orElseGet", "map", "findFirst", "filter", "stream", "orElseGet", "map", "getError", "failure", "format", "success", "toArray", "flatMap", "stream"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}