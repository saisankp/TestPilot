{"test_class": {"identifier": "BinaryTreeDepthTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BinaryTreeDepth binaryTreeDepth;", "modifier": "private", "type": "BinaryTreeDepth", "declarator": "binaryTreeDepth", "var_name": "binaryTreeDepth"}], "file": "algs/src/test/java/com/github/pedrovgs/problem19/BinaryTreeDepthTest.java"}, "test_case": {"identifier": "shouldCalculateBinaryTreeDepthWithANormalBinaryTree", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldCalculateBinaryTreeDepthWithANormalBinaryTree() {\n    BinaryNode<Integer> root = new BinaryNode<Integer>(0);\n    BinaryNode<Integer> n1 = new BinaryNode<Integer>(1);\n    BinaryNode<Integer> n2 = new BinaryNode<Integer>(2);\n    BinaryNode<Integer> n3 = new BinaryNode<Integer>(3);\n    BinaryNode<Integer> n4 = new BinaryNode<Integer>(4);\n    BinaryNode<Integer> n5 = new BinaryNode<Integer>(5);\n    root.setLeft(n1);\n    root.setRight(n2);\n    n1.setLeft(n3);\n    n1.setRight(n4);\n    n4.setLeft(n5);\n\n    int depth = binaryTreeDepth.get(root);\n\n    assertEquals(4, depth);\n  }", "signature": "void shouldCalculateBinaryTreeDepthWithANormalBinaryTree()", "full_signature": "@Test public void shouldCalculateBinaryTreeDepthWithANormalBinaryTree()", "class_method_signature": "BinaryTreeDepthTest.shouldCalculateBinaryTreeDepthWithANormalBinaryTree()", "testcase": true, "constructor": false, "invocations": ["setLeft", "setRight", "setLeft", "setRight", "setLeft", "get", "assertEquals"]}, "focal_class": {"identifier": "BinaryTreeDepth", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "get", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "int", "signature": "int get(BinaryNode root)", "full_signature": "public int get(BinaryNode root)", "class_method_signature": "BinaryTreeDepth.get(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getInner", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "int", "signature": "int getInner(BinaryNode root)", "full_signature": "private int getInner(BinaryNode root)", "class_method_signature": "BinaryTreeDepth.getInner(BinaryNode root)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem19/BinaryTreeDepth.java"}, "focal_method": {"identifier": "get", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "int", "body": "public int get(BinaryNode root) {\n    if (root == null) {\n      throw new IllegalArgumentException(\"You can't pass a null BinaryNode as parameter\");\n    }\n    return getInner(root);\n  }", "signature": "int get(BinaryNode root)", "full_signature": "public int get(BinaryNode root)", "class_method_signature": "BinaryTreeDepth.get(BinaryNode root)", "testcase": false, "constructor": false, "invocations": ["getInner"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}