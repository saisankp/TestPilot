{"test_class": {"identifier": "ArchiverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(ArchiverTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(ArchiverTest.class.getName())", "var_name": "log"}, {"original_string": "private static final long MEGABYTE = 1024 * 1024;", "modifier": "private static final", "type": "long", "declarator": "MEGABYTE = 1024 * 1024", "var_name": "MEGABYTE"}, {"original_string": "private static final String SERVICENAME = \"testservice\";", "modifier": "private static final", "type": "String", "declarator": "SERVICENAME = \"testservice\"", "var_name": "SERVICENAME"}, {"original_string": "@Rule\n    public TemporaryFolder temp = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temp = new TemporaryFolder()", "var_name": "temp"}], "file": "log/src/test/java/org/cloudname/log/archiver/ArchiverTest.java"}, "test_case": {"identifier": "testInitializationUnexist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitializationUnexist() throws Exception {\n        final String logPath = temp.newFolder(\"test2\").getAbsolutePath()\n            + File.separator\n            + \"unexist\";\n        final Archiver archiver = new Archiver(logPath, SERVICENAME, MEGABYTE);\n        archiver.init();\n    }", "signature": "void testInitializationUnexist()", "full_signature": "@Test public void testInitializationUnexist()", "class_method_signature": "ArchiverTest.testInitializationUnexist()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "newFolder", "init"]}, "focal_class": {"identifier": "Archiver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_FILES_OPEN = 2;", "modifier": "private static final", "type": "int", "declarator": "MAX_FILES_OPEN = 2", "var_name": "MAX_FILES_OPEN"}, {"original_string": "private String service = \"\";", "modifier": "private", "type": "String", "declarator": "service = \"\"", "var_name": "service"}, {"original_string": "private final SlotMapper slotMapper = new SlotMapper();", "modifier": "private final", "type": "SlotMapper", "declarator": "slotMapper = new SlotMapper()", "var_name": "slotMapper"}, {"original_string": "private final SlotLruCache<String,Slot> slotLruCache = new SlotLruCache<String,Slot>(MAX_FILES_OPEN);", "modifier": "private final", "type": "SlotLruCache<String,Slot>", "declarator": "slotLruCache = new SlotLruCache<String,Slot>(MAX_FILES_OPEN)", "var_name": "slotLruCache"}, {"original_string": "private final String logPath;", "modifier": "private final", "type": "String", "declarator": "logPath", "var_name": "logPath"}, {"original_string": "private final long maxFileSize;", "modifier": "private final", "type": "long", "declarator": "maxFileSize", "var_name": "maxFileSize"}, {"original_string": "private TimeProvider timeProvider;", "modifier": "private", "type": "TimeProvider", "declarator": "timeProvider", "var_name": "timeProvider"}, {"original_string": "private boolean closed = false;", "modifier": "private", "type": "boolean", "declarator": "closed = false", "var_name": "closed"}], "methods": [{"identifier": "Archiver", "parameters": "(String logPath, String service, long maxFileSize)", "modifiers": "public", "return": "", "signature": " Archiver(String logPath, String service, long maxFileSize)", "full_signature": "public  Archiver(String logPath, String service, long maxFileSize)", "class_method_signature": "Archiver.Archiver(String logPath, String service, long maxFileSize)", "testcase": false, "constructor": true}, {"identifier": "Archiver", "parameters": "(String logPath, String service, long maxFileSize, TimeProvider timeProvider)", "modifiers": "public", "return": "", "signature": " Archiver(String logPath, String service, long maxFileSize, TimeProvider timeProvider)", "full_signature": "public  Archiver(String logPath, String service, long maxFileSize, TimeProvider timeProvider)", "class_method_signature": "Archiver.Archiver(String logPath, String service, long maxFileSize, TimeProvider timeProvider)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "Archiver.init()", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(final Timber.LogEvent logEvent)", "modifiers": "public", "return": "WriteReport", "signature": "WriteReport handle(final Timber.LogEvent logEvent)", "full_signature": "public WriteReport handle(final Timber.LogEvent logEvent)", "class_method_signature": "Archiver.handle(final Timber.LogEvent logEvent)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flush()", "full_signature": "public void flush()", "class_method_signature": "Archiver.flush()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "Archiver.close()", "testcase": false, "constructor": false}, {"identifier": "getSlot", "parameters": "(Timber.LogEvent event)", "modifiers": "private", "return": "Slot", "signature": "Slot getSlot(Timber.LogEvent event)", "full_signature": "private Slot getSlot(Timber.LogEvent event)", "class_method_signature": "Archiver.getSlot(Timber.LogEvent event)", "testcase": false, "constructor": false}], "file": "log/src/main/java/org/cloudname/log/archiver/Archiver.java"}, "focal_method": {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void init() {\n        final File logDir = new File(logPath);\n\n        // Make the root log directory if it does not exist\n        if (! logDir.exists()) {\n            logDir.mkdirs();\n        }\n    }", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "Archiver.init()", "testcase": false, "constructor": false, "invocations": ["exists", "mkdirs"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}