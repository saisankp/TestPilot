{"test_class": {"identifier": "AnagramsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String A = \"a\";", "modifier": "private static final", "type": "String", "declarator": "A = \"a\"", "var_name": "A"}, {"original_string": "private static final List<String> ANAGRAMS_FOR_A = new ArrayList<String>() {{ add(\"a\"); }};", "modifier": "private static final", "type": "List<String>", "declarator": "ANAGRAMS_FOR_A = new ArrayList<String>() {{ add(\"a\"); }}", "var_name": "ANAGRAMS_FOR_A"}, {"original_string": "private static final String AB = \"ab\";", "modifier": "private static final", "type": "String", "declarator": "AB = \"ab\"", "var_name": "AB"}, {"original_string": "private static final List<String> ANAGRAMS_FOR_AB = new ArrayList<String>() {{ add(\"ab\"); add(\"ba\"); }};", "modifier": "private static final", "type": "List<String>", "declarator": "ANAGRAMS_FOR_AB = new ArrayList<String>() {{ add(\"ab\"); add(\"ba\"); }}", "var_name": "ANAGRAMS_FOR_AB"}, {"original_string": "private static final String ABC = \"abc\";", "modifier": "private static final", "type": "String", "declarator": "ABC = \"abc\"", "var_name": "ABC"}, {"original_string": "private static final List<String> ANAGRAMS_FOR_ABC = new ArrayList<String>() {{ add(\"abc\"); add(\"acb\"); add(\"bac\"); add(\"bca\"); add(\"cab\"); add(\"cba\"); }};", "modifier": "private static final", "type": "List<String>", "declarator": "ANAGRAMS_FOR_ABC = new ArrayList<String>() {{ add(\"abc\"); add(\"acb\"); add(\"bac\"); add(\"bca\"); add(\"cab\"); add(\"cba\"); }}", "var_name": "ANAGRAMS_FOR_ABC"}, {"original_string": "Anagrams anagrams;", "modifier": "", "type": "Anagrams", "declarator": "anagrams", "var_name": "anagrams"}], "file": "anagrams/20141114-xavi-seb/src/test/java/AnagramsTest.java"}, "test_case": {"identifier": "testAnagramsForAbcHasCorrectLength", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAnagramsForAbcHasCorrectLength() {\n        List<String> expected = ANAGRAMS_FOR_ABC;\n\n        List<String> result = anagrams.from(ABC);\n\n        assertThat(result).hasSameSizeAs(expected);\n    }", "signature": "void testAnagramsForAbcHasCorrectLength()", "full_signature": "@Test public void testAnagramsForAbcHasCorrectLength()", "class_method_signature": "AnagramsTest.testAnagramsForAbcHasCorrectLength()", "testcase": true, "constructor": false, "invocations": ["from", "hasSameSizeAs", "assertThat"]}, "focal_class": {"identifier": "Anagrams", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "from", "parameters": "(String word)", "modifiers": "public", "return": "List<String>", "signature": "List<String> from(String word)", "full_signature": "public List<String> from(String word)", "class_method_signature": "Anagrams.from(String word)", "testcase": false, "constructor": false}, {"identifier": "generatePermutationsFor", "parameters": "(String word)", "modifiers": "", "return": "List<String>", "signature": "List<String> generatePermutationsFor(String word)", "full_signature": " List<String> generatePermutationsFor(String word)", "class_method_signature": "Anagrams.generatePermutationsFor(String word)", "testcase": false, "constructor": false}, {"identifier": "factorial", "parameters": "(int n)", "modifiers": "", "return": "int", "signature": "int factorial(int n)", "full_signature": " int factorial(int n)", "class_method_signature": "Anagrams.factorial(int n)", "testcase": false, "constructor": false}], "file": "anagrams/20141114-xavi-seb/src/main/java/Anagrams.java"}, "focal_method": {"identifier": "from", "parameters": "(String word)", "modifiers": "public", "return": "List<String>", "body": "public List<String> from(String word) {\n        List<String> anagrams = new ArrayList<String>();\n        for (int i = 0; i < word.length(); i++) {\n            anagrams.addAll(generatePermutationsFor(word));\n        }\n        return anagrams;\n    }", "signature": "List<String> from(String word)", "full_signature": "public List<String> from(String word)", "class_method_signature": "Anagrams.from(String word)", "testcase": false, "constructor": false, "invocations": ["length", "addAll", "generatePermutationsFor"]}, "repository": {"repo_id": 6509909, "url": "https://github.com/novoda/dojos", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 72, "size": 12987, "license": "licensed"}}