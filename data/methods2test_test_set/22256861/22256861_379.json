{"test_class": {"identifier": "MphChlOpTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-mphchl/src/test/java/org/esa/s3tbx/mphchl/MphChlOpTest.java"}, "test_case": {"identifier": "testIsValidL1bSourceProduct", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsValidL1bSourceProduct() {\n        Product sourceProduct = new Product(\"test\", \"test\", 1, 1);\n        assertFalse(MphChlOp.isValidL1bSourceProduct(sourceProduct, Sensor.MERIS_3RD));\n        for (String bandName : MphChlConstants.MERIS_REQUIRED_RADIANCE_BAND_NAMES) {\n            sourceProduct.addBand(bandName, ProductData.TYPE_FLOAT32);\n        }\n        assertTrue(MphChlOp.isValidL1bSourceProduct(sourceProduct, Sensor.MERIS_3RD));\n        assertFalse(MphChlOp.isValidL1bSourceProduct(sourceProduct, Sensor.OLCI));\n        assertFalse(MphChlOp.isValidL1bSourceProduct(sourceProduct, Sensor.MERIS_4TH));\n\n        for (String bandName : MphChlConstants.MERIS_REQUIRED_RADIANCE_BAND_NAMES_4TH) {\n            sourceProduct.addBand(bandName, ProductData.TYPE_FLOAT32);\n        }\n        assertTrue(MphChlOp.isValidL1bSourceProduct(sourceProduct, Sensor.MERIS_4TH));\n\n        for (String bandName : MphChlConstants.OLCI_REQUIRED_RADIANCE_BAND_NAMES) {\n            sourceProduct.addBand(bandName, ProductData.TYPE_FLOAT32);\n        }\n        assertTrue(MphChlOp.isValidL1bSourceProduct(sourceProduct, Sensor.OLCI));\n    }", "signature": "void testIsValidL1bSourceProduct()", "full_signature": "@Test public void testIsValidL1bSourceProduct()", "class_method_signature": "MphChlOpTest.testIsValidL1bSourceProduct()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isValidL1bSourceProduct", "addBand", "assertTrue", "isValidL1bSourceProduct", "assertFalse", "isValidL1bSourceProduct", "assertFalse", "isValidL1bSourceProduct", "addBand", "assertTrue", "isValidL1bSourceProduct", "addBand", "assertTrue", "isValidL1bSourceProduct"]}, "focal_class": {"identifier": "MphChlOp", "superclass": "extends Operator", "interfaces": "", "fields": [{"original_string": "@Parameter(defaultValue = \"\",\n            description = \"Expression defining pixels considered for processing. \" +\n                    \"If not set, all valid pixels over water are processed.\",\n            converter = BooleanExpressionConverter.class)\n    private String validPixelExpression;", "modifier": "@Parameter(defaultValue = \"\",\n            description = \"Expression defining pixels considered for processing. \" +\n                    \"If not set, all valid pixels over water are processed.\",\n            converter = BooleanExpressionConverter.class)\n    private", "type": "String", "declarator": "validPixelExpression", "var_name": "validPixelExpression"}, {"original_string": "@Parameter(defaultValue = \"1000.0\",\n            description = \"Maximum chlorophyll, arithmetically higher values are capped.\")\n    private double cyanoMaxValue;", "modifier": "@Parameter(defaultValue = \"1000.0\",\n            description = \"Maximum chlorophyll, arithmetically higher values are capped.\")\n    private", "type": "double", "declarator": "cyanoMaxValue", "var_name": "cyanoMaxValue"}, {"original_string": "@Parameter(defaultValue = \"500.0\",\n            description = \"Chlorophyll threshold, above which all cyanobacteria dominated waters are 'float'.\")\n    private double chlThreshForFloatFlag;", "modifier": "@Parameter(defaultValue = \"500.0\",\n            description = \"Chlorophyll threshold, above which all cyanobacteria dominated waters are 'float'.\")\n    private", "type": "double", "declarator": "chlThreshForFloatFlag", "var_name": "chlThreshForFloatFlag"}, {"original_string": "@Parameter(defaultValue = \"false\",\n            description = \"Switch to true to write 'mph' band.\")\n    boolean exportMph;", "modifier": "@Parameter(defaultValue = \"false\",\n            description = \"Switch to true to write 'mph' band.\")", "type": "boolean", "declarator": "exportMph", "var_name": "exportMph"}, {"original_string": "@Parameter(defaultValue = \"false\",\n            description = \"Switch to true to apply a 3x3 low-pass filter on the result.\")\n    boolean applyLowPassFilter;", "modifier": "@Parameter(defaultValue = \"false\",\n            description = \"Switch to true to apply a 3x3 low-pass filter on the result.\")", "type": "boolean", "declarator": "applyLowPassFilter", "var_name": "applyLowPassFilter"}, {"original_string": "@SourceProduct(description = \"L1b or Rayleigh corrected product\", label = \"OLCI or MERIS L1b or Rayleigh corrected product\")\n    private Product sourceProduct;", "modifier": "@SourceProduct(description = \"L1b or Rayleigh corrected product\", label = \"OLCI or MERIS L1b or Rayleigh corrected product\")\n    private", "type": "Product", "declarator": "sourceProduct", "var_name": "sourceProduct"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "MphChlOp.initialize()", "testcase": false, "constructor": false}, {"identifier": "createFilteredProduct", "parameters": "(Product mphChlProduct)", "modifiers": "private", "return": "Product", "signature": "Product createFilteredProduct(Product mphChlProduct)", "full_signature": "private Product createFilteredProduct(Product mphChlProduct)", "class_method_signature": "MphChlOp.createFilteredProduct(Product mphChlProduct)", "testcase": false, "constructor": false}, {"identifier": "getJaiKernel", "parameters": "()", "modifiers": "private", "return": "KernelJAI", "signature": "KernelJAI getJaiKernel()", "full_signature": "private KernelJAI getJaiKernel()", "class_method_signature": "MphChlOp.getJaiKernel()", "testcase": false, "constructor": false}, {"identifier": "createMphChlPixelProduct", "parameters": "()", "modifiers": "private", "return": "Product", "signature": "Product createMphChlPixelProduct()", "full_signature": "private Product createMphChlPixelProduct()", "class_method_signature": "MphChlOp.createMphChlPixelProduct()", "testcase": false, "constructor": false}, {"identifier": "getSensorType", "parameters": "(Product sourceProduct)", "modifiers": "static", "return": "Sensor", "signature": "Sensor getSensorType(Product sourceProduct)", "full_signature": "static Sensor getSensorType(Product sourceProduct)", "class_method_signature": "MphChlOp.getSensorType(Product sourceProduct)", "testcase": false, "constructor": false}, {"identifier": "isValidL1bSourceProduct", "parameters": "(Product sourceProduct, Sensor sensor)", "modifiers": "static", "return": "boolean", "signature": "boolean isValidL1bSourceProduct(Product sourceProduct, Sensor sensor)", "full_signature": "static boolean isValidL1bSourceProduct(Product sourceProduct, Sensor sensor)", "class_method_signature": "MphChlOp.isValidL1bSourceProduct(Product sourceProduct, Sensor sensor)", "testcase": false, "constructor": false}, {"identifier": "isValidBrrSourceProduct", "parameters": "(Product sourceProduct, Sensor sensor)", "modifiers": "static", "return": "boolean", "signature": "boolean isValidBrrSourceProduct(Product sourceProduct, Sensor sensor)", "full_signature": "static boolean isValidBrrSourceProduct(Product sourceProduct, Sensor sensor)", "class_method_signature": "MphChlOp.isValidBrrSourceProduct(Product sourceProduct, Sensor sensor)", "testcase": false, "constructor": false}, {"identifier": "getSensorFromBrrSourceProduct", "parameters": "(String[] sourceBands)", "modifiers": "static", "return": "Sensor", "signature": "Sensor getSensorFromBrrSourceProduct(String[] sourceBands)", "full_signature": "static Sensor getSensorFromBrrSourceProduct(String[] sourceBands)", "class_method_signature": "MphChlOp.getSensorFromBrrSourceProduct(String[] sourceBands)", "testcase": false, "constructor": false}], "file": "s3tbx-mphchl/src/main/java/org/esa/s3tbx/mphchl/MphChlOp.java"}, "focal_method": {"identifier": "isValidL1bSourceProduct", "parameters": "(Product sourceProduct, Sensor sensor)", "modifiers": "static", "return": "boolean", "body": "static boolean isValidL1bSourceProduct(Product sourceProduct, Sensor sensor) {\n        for (String bandName : sensor.getRequiredRadianceBandNames()) {\n            if (!sourceProduct.containsBand(bandName)) {\n                return false;\n            }\n        }\n        return true;\n    }", "signature": "boolean isValidL1bSourceProduct(Product sourceProduct, Sensor sensor)", "full_signature": "static boolean isValidL1bSourceProduct(Product sourceProduct, Sensor sensor)", "class_method_signature": "MphChlOp.isValidL1bSourceProduct(Product sourceProduct, Sensor sensor)", "testcase": false, "constructor": false, "invocations": ["getRequiredRadianceBandNames", "containsBand"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}