{"test_class": {"identifier": "GitScmTest", "superclass": "extends PipelineBaseTest", "interfaces": "", "fields": [{"original_string": "public static final String HTTPS_GITHUB_NO_JENKINSFILE = \"https://github.com/vivek/test-no-jenkins-file.git\";", "modifier": "public static final", "type": "String", "declarator": "HTTPS_GITHUB_NO_JENKINSFILE = \"https://github.com/vivek/test-no-jenkins-file.git\"", "var_name": "HTTPS_GITHUB_NO_JENKINSFILE"}, {"original_string": "public static final String HTTPS_GITHUB_PUBLIC = \"https://github.com/cloudbeers/multibranch-demo.git\";", "modifier": "public static final", "type": "String", "declarator": "HTTPS_GITHUB_PUBLIC = \"https://github.com/cloudbeers/multibranch-demo.git\"", "var_name": "HTTPS_GITHUB_PUBLIC"}, {"original_string": "public static final String HTTPS_GITHUB_PUBLIC_HASH = \"996e1f714b08e971ec79e3bea686287e66441f043177999a13dbc546d8fe402a\";", "modifier": "public static final", "type": "String", "declarator": "HTTPS_GITHUB_PUBLIC_HASH = \"996e1f714b08e971ec79e3bea686287e66441f043177999a13dbc546d8fe402a\"", "var_name": "HTTPS_GITHUB_PUBLIC_HASH"}, {"original_string": "@Rule\n    public GitSampleRepoRule sampleRepo = new GitSampleRepoRule();", "modifier": "@Rule\n    public", "type": "GitSampleRepoRule", "declarator": "sampleRepo = new GitSampleRepoRule()", "var_name": "sampleRepo"}], "file": "blueocean-git-pipeline/src/test/java/io/jenkins/blueocean/blueocean_git_pipeline/GitScmTest.java"}, "test_case": {"identifier": "shouldGetBadRequestForBadGitUriOnCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGetBadRequestForBadGitUriOnCreate() throws Exception {\n\n        User user = login();\n        this.jwtToken = getJwtToken(j.jenkins, user.getId(), user.getId());\n\n        post(\"/organizations/\" + getOrgName() + \"/pipelines/\",\n                ImmutableMap.of(\"name\", \"demo\",\n                        \"$class\", \"io.jenkins.blueocean.blueocean_git_pipeline.GitPipelineCreateRequest\",\n                        \"scmConfig\", ImmutableMap.of(\"uri\", \"/sdsd/sdsd/sdsd\")\n                ), 400);\n\n    }", "signature": "void shouldGetBadRequestForBadGitUriOnCreate()", "full_signature": "@Test public void shouldGetBadRequestForBadGitUriOnCreate()", "class_method_signature": "GitScmTest.shouldGetBadRequestForBadGitUriOnCreate()", "testcase": true, "constructor": false, "invocations": ["login", "getJwtToken", "getId", "getId", "post", "getOrgName", "of", "of"]}, "focal_class": {"identifier": "GitScm", "superclass": "extends AbstractScm", "interfaces": "", "fields": [{"original_string": "public static final String ID = \"git\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"git\"", "var_name": "ID"}, {"original_string": "static final String CREDENTIAL_DOMAIN_NAME = \"blueocean-git-domain\";", "modifier": "static final", "type": "String", "declarator": "CREDENTIAL_DOMAIN_NAME = \"blueocean-git-domain\"", "var_name": "CREDENTIAL_DOMAIN_NAME"}, {"original_string": "static final String CREDENTIAL_DESCRIPTION_PW = \"Git username/password\";", "modifier": "static final", "type": "String", "declarator": "CREDENTIAL_DESCRIPTION_PW = \"Git username/password\"", "var_name": "CREDENTIAL_DESCRIPTION_PW"}, {"original_string": "protected final Reachable parent;", "modifier": "protected final", "type": "Reachable", "declarator": "parent", "var_name": "parent"}], "methods": [{"identifier": "GitScm", "parameters": "(Reachable parent)", "modifiers": "public", "return": "", "signature": " GitScm(Reachable parent)", "full_signature": "public  GitScm(Reachable parent)", "class_method_signature": "GitScm.GitScm(Reachable parent)", "testcase": false, "constructor": true}, {"identifier": "makeCredentialId", "parameters": "(String repositoryUrl)", "modifiers": "public static", "return": "String", "signature": "String makeCredentialId(String repositoryUrl)", "full_signature": "public static String makeCredentialId(String repositoryUrl)", "class_method_signature": "GitScm.makeCredentialId(String repositoryUrl)", "testcase": false, "constructor": false}, {"identifier": "normalizeServerUrl", "parameters": "(String repositoryUrl)", "modifiers": "private static", "return": "String", "signature": "String normalizeServerUrl(String repositoryUrl)", "full_signature": "private static String normalizeServerUrl(String repositoryUrl)", "class_method_signature": "GitScm.normalizeServerUrl(String repositoryUrl)", "testcase": false, "constructor": false}, {"identifier": "getLink", "parameters": "()", "modifiers": "@Override public", "return": "Link", "signature": "Link getLink()", "full_signature": "@Override public Link getLink()", "class_method_signature": "GitScm.getLink()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override @Nonnull public", "return": "String", "signature": "String getId()", "full_signature": "@Override @Nonnull public String getId()", "class_method_signature": "GitScm.getId()", "testcase": false, "constructor": false}, {"identifier": "getUri", "parameters": "()", "modifiers": "@Override @Nonnull public", "return": "String", "signature": "String getUri()", "full_signature": "@Override @Nonnull public String getUri()", "class_method_signature": "GitScm.getUri()", "testcase": false, "constructor": false}, {"identifier": "getStaplerRequest", "parameters": "()", "modifiers": "protected", "return": "StaplerRequest", "signature": "StaplerRequest getStaplerRequest()", "full_signature": "protected StaplerRequest getStaplerRequest()", "class_method_signature": "GitScm.getStaplerRequest()", "testcase": false, "constructor": false}, {"identifier": "getCredentialId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCredentialId()", "full_signature": "@Override public String getCredentialId()", "class_method_signature": "GitScm.getCredentialId()", "testcase": false, "constructor": false}, {"identifier": "getCredentialForCurrentRequest", "parameters": "()", "modifiers": "protected", "return": "StandardCredentials", "signature": "StandardCredentials getCredentialForCurrentRequest()", "full_signature": "protected StandardCredentials getCredentialForCurrentRequest()", "class_method_signature": "GitScm.getCredentialForCurrentRequest()", "testcase": false, "constructor": false}, {"identifier": "getOrganizations", "parameters": "()", "modifiers": "@Override public", "return": "Container<ScmOrganization>", "signature": "Container<ScmOrganization> getOrganizations()", "full_signature": "@Override public Container<ScmOrganization> getOrganizations()", "class_method_signature": "GitScm.getOrganizations()", "testcase": false, "constructor": false}, {"identifier": "getServers", "parameters": "()", "modifiers": "@Override public", "return": "ScmServerEndpointContainer", "signature": "ScmServerEndpointContainer getServers()", "full_signature": "@Override public ScmServerEndpointContainer getServers()", "class_method_signature": "GitScm.getServers()", "testcase": false, "constructor": false}, {"identifier": "validateAndCreate", "parameters": "(@JsonBody JSONObject request)", "modifiers": "@Override public", "return": "HttpResponse", "signature": "HttpResponse validateAndCreate(@JsonBody JSONObject request)", "full_signature": "@Override public HttpResponse validateAndCreate(@JsonBody JSONObject request)", "class_method_signature": "GitScm.validateAndCreate(@JsonBody JSONObject request)", "testcase": false, "constructor": false}, {"identifier": "createPWCredentials", "parameters": "(String credentialId, User user, @JsonBody JSONObject request, String repositoryUrl)", "modifiers": "private", "return": "void", "signature": "void createPWCredentials(String credentialId, User user, @JsonBody JSONObject request, String repositoryUrl)", "full_signature": "private void createPWCredentials(String credentialId, User user, @JsonBody JSONObject request, String repositoryUrl)", "class_method_signature": "GitScm.createPWCredentials(String credentialId, User user, @JsonBody JSONObject request, String repositoryUrl)", "testcase": false, "constructor": false}], "file": "blueocean-git-pipeline/src/main/java/io/jenkins/blueocean/blueocean_git_pipeline/GitScm.java"}, "focal_method": {"identifier": "getId", "parameters": "()", "modifiers": "@Override @Nonnull public", "return": "String", "body": "@Override\n    @Nonnull\n    public String getId() {\n        return ID;\n    }", "signature": "String getId()", "full_signature": "@Override @Nonnull public String getId()", "class_method_signature": "GitScm.getId()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}