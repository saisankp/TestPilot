{"test_class": {"identifier": "RegistrationDataValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RegistrationDataValidator target;", "modifier": "private final", "type": "RegistrationDataValidator", "declarator": "target", "var_name": "target"}], "file": "webauthn4j-core/src/test/java/com/webauthn4j/validator/RegistrationDataValidatorTest.java"}, "test_case": {"identifier": "validateUVUPFlags_not_required_test", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void validateUVUPFlags_not_required_test() {\n        AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData = new AuthenticatorData<>(null, (byte) 0, 0);\n        target.validateUVUPFlags(authenticatorData, false, false);\n    }", "signature": "void validateUVUPFlags_not_required_test()", "full_signature": "@Test void validateUVUPFlags_not_required_test()", "class_method_signature": "RegistrationDataValidatorTest.validateUVUPFlags_not_required_test()", "testcase": true, "constructor": false, "invocations": ["validateUVUPFlags"]}, "focal_class": {"identifier": "RegistrationDataValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ChallengeValidator challengeValidator = new ChallengeValidator();", "modifier": "private final", "type": "ChallengeValidator", "declarator": "challengeValidator = new ChallengeValidator()", "var_name": "challengeValidator"}, {"original_string": "private final OriginValidator originValidator = new OriginValidator();", "modifier": "private final", "type": "OriginValidator", "declarator": "originValidator = new OriginValidator()", "var_name": "originValidator"}, {"original_string": "private final TokenBindingValidator tokenBindingValidator = new TokenBindingValidator();", "modifier": "private final", "type": "TokenBindingValidator", "declarator": "tokenBindingValidator = new TokenBindingValidator()", "var_name": "tokenBindingValidator"}, {"original_string": "private final RpIdHashValidator rpIdHashValidator = new RpIdHashValidator();", "modifier": "private final", "type": "RpIdHashValidator", "declarator": "rpIdHashValidator = new RpIdHashValidator()", "var_name": "rpIdHashValidator"}, {"original_string": "private final ClientExtensionValidator clientExtensionValidator = new ClientExtensionValidator();", "modifier": "private final", "type": "ClientExtensionValidator", "declarator": "clientExtensionValidator = new ClientExtensionValidator()", "var_name": "clientExtensionValidator"}, {"original_string": "private final AuthenticatorExtensionValidator authenticatorExtensionValidator = new AuthenticatorExtensionValidator();", "modifier": "private final", "type": "AuthenticatorExtensionValidator", "declarator": "authenticatorExtensionValidator = new AuthenticatorExtensionValidator()", "var_name": "authenticatorExtensionValidator"}, {"original_string": "private final List<CustomRegistrationValidator> customRegistrationValidators = new ArrayList<>();", "modifier": "private final", "type": "List<CustomRegistrationValidator>", "declarator": "customRegistrationValidators = new ArrayList<>()", "var_name": "customRegistrationValidators"}, {"original_string": "private final AttestationValidator attestationValidator;", "modifier": "private final", "type": "AttestationValidator", "declarator": "attestationValidator", "var_name": "attestationValidator"}], "methods": [{"identifier": "RegistrationDataValidator", "parameters": "(\n            List<AttestationStatementValidator> attestationStatementValidators,\n            CertPathTrustworthinessValidator certPathTrustworthinessValidator,\n            SelfAttestationTrustworthinessValidator selfAttestationTrustworthinessValidator,\n            List<CustomRegistrationValidator> customRegistrationValidators,\n            ObjectConverter objectConverter)", "modifiers": "public", "return": "", "signature": " RegistrationDataValidator(\n            List<AttestationStatementValidator> attestationStatementValidators,\n            CertPathTrustworthinessValidator certPathTrustworthinessValidator,\n            SelfAttestationTrustworthinessValidator selfAttestationTrustworthinessValidator,\n            List<CustomRegistrationValidator> customRegistrationValidators,\n            ObjectConverter objectConverter)", "full_signature": "public  RegistrationDataValidator(\n            List<AttestationStatementValidator> attestationStatementValidators,\n            CertPathTrustworthinessValidator certPathTrustworthinessValidator,\n            SelfAttestationTrustworthinessValidator selfAttestationTrustworthinessValidator,\n            List<CustomRegistrationValidator> customRegistrationValidators,\n            ObjectConverter objectConverter)", "class_method_signature": "RegistrationDataValidator.RegistrationDataValidator(\n            List<AttestationStatementValidator> attestationStatementValidators,\n            CertPathTrustworthinessValidator certPathTrustworthinessValidator,\n            SelfAttestationTrustworthinessValidator selfAttestationTrustworthinessValidator,\n            List<CustomRegistrationValidator> customRegistrationValidators,\n            ObjectConverter objectConverter)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(RegistrationData registrationData, RegistrationParameters registrationParameters)", "modifiers": "@SuppressWarnings(\"deprecation\") public", "return": "void", "signature": "void validate(RegistrationData registrationData, RegistrationParameters registrationParameters)", "full_signature": "@SuppressWarnings(\"deprecation\") public void validate(RegistrationData registrationData, RegistrationParameters registrationParameters)", "class_method_signature": "RegistrationDataValidator.validate(RegistrationData registrationData, RegistrationParameters registrationParameters)", "testcase": false, "constructor": false}, {"identifier": "validateAuthenticatorDataField", "parameters": "(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData)", "modifiers": "", "return": "void", "signature": "void validateAuthenticatorDataField(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData)", "full_signature": " void validateAuthenticatorDataField(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData)", "class_method_signature": "RegistrationDataValidator.validateAuthenticatorDataField(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData)", "testcase": false, "constructor": false}, {"identifier": "validateUVUPFlags", "parameters": "(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData, boolean isUserVerificationRequired, boolean isUserPresenceRequired)", "modifiers": "", "return": "void", "signature": "void validateUVUPFlags(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData, boolean isUserVerificationRequired, boolean isUserPresenceRequired)", "full_signature": " void validateUVUPFlags(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData, boolean isUserVerificationRequired, boolean isUserPresenceRequired)", "class_method_signature": "RegistrationDataValidator.validateUVUPFlags(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData, boolean isUserVerificationRequired, boolean isUserPresenceRequired)", "testcase": false, "constructor": false}, {"identifier": "getCustomRegistrationValidators", "parameters": "()", "modifiers": "public", "return": "List<CustomRegistrationValidator>", "signature": "List<CustomRegistrationValidator> getCustomRegistrationValidators()", "full_signature": "public List<CustomRegistrationValidator> getCustomRegistrationValidators()", "class_method_signature": "RegistrationDataValidator.getCustomRegistrationValidators()", "testcase": false, "constructor": false}], "file": "webauthn4j-core/src/main/java/com/webauthn4j/validator/RegistrationDataValidator.java"}, "focal_method": {"identifier": "validateUVUPFlags", "parameters": "(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData, boolean isUserVerificationRequired, boolean isUserPresenceRequired)", "modifiers": "", "return": "void", "body": "void validateUVUPFlags(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData, boolean isUserVerificationRequired, boolean isUserPresenceRequired) {\n        //spec| Step10\n        //spec| If user verification is required for this registration, verify that the User Verified bit of the flags in authData is set.\n        if (isUserVerificationRequired && !authenticatorData.isFlagUV()) {\n            throw new UserNotVerifiedException(\"Validator is configured to check user verified, but UV flag in authenticatorData is not set.\");\n        }\n\n        //spec| Step11\n        //spec| Verify that the User Present bit of the flags in authData is set.\n        if (isUserPresenceRequired && !authenticatorData.isFlagUP()) {\n            throw new UserNotPresentException(\"Validator is configured to check user present, but UP flag in authenticatorData is not set.\");\n        }\n    }", "signature": "void validateUVUPFlags(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData, boolean isUserVerificationRequired, boolean isUserPresenceRequired)", "full_signature": " void validateUVUPFlags(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData, boolean isUserVerificationRequired, boolean isUserPresenceRequired)", "class_method_signature": "RegistrationDataValidator.validateUVUPFlags(AuthenticatorData<RegistrationExtensionAuthenticatorOutput> authenticatorData, boolean isUserVerificationRequired, boolean isUserPresenceRequired)", "testcase": false, "constructor": false, "invocations": ["isFlagUV", "isFlagUP"]}, "repository": {"repo_id": 134147639, "url": "https://github.com/webauthn4j/webauthn4j", "stars": 101, "created": "5/20/2018 12:14:36 PM +00:00", "updates": "2020-01-27T13:01:46+00:00", "fork": "False", "license": "licensed"}}