{"test_class": {"identifier": "JDBCSmellQueriesTest", "superclass": "extends PostgresTestCase", "interfaces": "", "fields": [{"original_string": "private SmellQueries queries;", "modifier": "private", "type": "SmellQueries", "declarator": "queries", "var_name": "queries"}, {"original_string": "private int projectId;", "modifier": "private", "type": "int", "declarator": "projectId", "var_name": "projectId"}, {"original_string": "private Smell smell;", "modifier": "private", "type": "Smell", "declarator": "smell", "var_name": "smell"}, {"original_string": "private ProjectQueries projectQueries;", "modifier": "private", "type": "ProjectQueries", "declarator": "projectQueries", "var_name": "projectQueries"}, {"original_string": "private JDBCDeveloperQueries developerQueries;", "modifier": "private", "type": "JDBCDeveloperQueries", "declarator": "developerQueries", "var_name": "developerQueries"}, {"original_string": "private JDBCCommitQueries commitQueries;", "modifier": "private", "type": "JDBCCommitQueries", "declarator": "commitQueries", "var_name": "commitQueries"}], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCSmellQueriesTest.java"}, "test_case": {"identifier": "testInsertSmellCategory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInsertSmellCategory() {\n        smell.id = createSmell(projectId, smell, queries);\n        Commit commit = prepareCommit();\n\n        // Insert will fail if commit does not exists\n        executeFailure(\n                queries.smellCategoryInsertionStatement(projectId, \"any\", smell, SmellCategory.INTRODUCTION)\n        );\n\n        // Insert will go to the right category\n        executeSuccess(\n                queries.smellCategoryInsertionStatement(projectId, commit.sha, smell, SmellCategory.INTRODUCTION)\n        );\n        assertEquals(1, getSmellCount(SmellCategory.INTRODUCTION));\n        assertEquals(0, getSmellCount(SmellCategory.REFACTOR));\n        assertEquals(0, getSmellCount(SmellCategory.PRESENCE));\n\n        executeSuccess(\n                queries.smellCategoryInsertionStatement(projectId, commit.sha, smell, SmellCategory.REFACTOR)\n        );\n        assertEquals(1, getSmellCount(SmellCategory.INTRODUCTION));\n        assertEquals(1, getSmellCount(SmellCategory.REFACTOR));\n        assertEquals(0, getSmellCount(SmellCategory.PRESENCE));\n\n        executeSuccess(\n                queries.smellCategoryInsertionStatement(projectId, commit.sha, smell, SmellCategory.PRESENCE)\n        );\n        assertEquals(1, getSmellCount(SmellCategory.INTRODUCTION));\n        assertEquals(1, getSmellCount(SmellCategory.REFACTOR));\n        assertEquals(1, getSmellCount(SmellCategory.PRESENCE));\n\n        // Two inserts in same category won't update category count.\n        executeFailure(\n                queries.smellCategoryInsertionStatement(projectId, commit.sha, smell, SmellCategory.PRESENCE)\n        );\n        assertEquals(1, getSmellCount(SmellCategory.INTRODUCTION));\n        assertEquals(1, getSmellCount(SmellCategory.REFACTOR));\n        assertEquals(1, getSmellCount(SmellCategory.PRESENCE));\n    }", "signature": "void testInsertSmellCategory()", "full_signature": "@Test public void testInsertSmellCategory()", "class_method_signature": "JDBCSmellQueriesTest.testInsertSmellCategory()", "testcase": true, "constructor": false, "invocations": ["createSmell", "prepareCommit", "executeFailure", "smellCategoryInsertionStatement", "executeSuccess", "smellCategoryInsertionStatement", "assertEquals", "getSmellCount", "assertEquals", "getSmellCount", "assertEquals", "getSmellCount", "executeSuccess", "smellCategoryInsertionStatement", "assertEquals", "getSmellCount", "assertEquals", "getSmellCount", "assertEquals", "getSmellCount", "executeSuccess", "smellCategoryInsertionStatement", "assertEquals", "getSmellCount", "assertEquals", "getSmellCount", "assertEquals", "getSmellCount", "executeFailure", "smellCategoryInsertionStatement", "assertEquals", "getSmellCount", "assertEquals", "getSmellCount", "assertEquals", "getSmellCount"]}, "focal_class": {"identifier": "JDBCSmellQueries", "superclass": "extends JDBCQueriesHelper", "interfaces": "implements SmellQueries", "fields": [{"original_string": "private CommitQueries commitQueries;", "modifier": "private", "type": "CommitQueries", "declarator": "commitQueries", "var_name": "commitQueries"}], "methods": [{"identifier": "JDBCSmellQueries", "parameters": "(CommitQueries commitQueries)", "modifiers": "public", "return": "", "signature": " JDBCSmellQueries(CommitQueries commitQueries)", "full_signature": "public  JDBCSmellQueries(CommitQueries commitQueries)", "class_method_signature": "JDBCSmellQueries.JDBCSmellQueries(CommitQueries commitQueries)", "testcase": false, "constructor": true}, {"identifier": "smellInsertionStatement", "parameters": "(int projectId, Smell smell)", "modifiers": "@Override public", "return": "String", "signature": "String smellInsertionStatement(int projectId, Smell smell)", "full_signature": "@Override public String smellInsertionStatement(int projectId, Smell smell)", "class_method_signature": "JDBCSmellQueries.smellInsertionStatement(int projectId, Smell smell)", "testcase": false, "constructor": false}, {"identifier": "smellCategoryInsertionStatement", "parameters": "(int projectId, String sha1, Smell smell, SmellCategory category)", "modifiers": "@Override public", "return": "String", "signature": "String smellCategoryInsertionStatement(int projectId, String sha1, Smell smell, SmellCategory category)", "full_signature": "@Override public String smellCategoryInsertionStatement(int projectId, String sha1, Smell smell, SmellCategory category)", "class_method_signature": "JDBCSmellQueries.smellCategoryInsertionStatement(int projectId, String sha1, Smell smell, SmellCategory category)", "testcase": false, "constructor": false}, {"identifier": "lostSmellCategoryInsertionStatement", "parameters": "(int projectId, Smell smell, SmellCategory category, int since, int until)", "modifiers": "@Override public", "return": "String", "signature": "String lostSmellCategoryInsertionStatement(int projectId, Smell smell, SmellCategory category, int since, int until)", "full_signature": "@Override public String lostSmellCategoryInsertionStatement(int projectId, Smell smell, SmellCategory category, int since, int until)", "class_method_signature": "JDBCSmellQueries.lostSmellCategoryInsertionStatement(int projectId, Smell smell, SmellCategory category, int since, int until)", "testcase": false, "constructor": false}, {"identifier": "smellIdQuery", "parameters": "(int projectId, Smell smell)", "modifiers": "@Override public", "return": "String", "signature": "String smellIdQuery(int projectId, Smell smell)", "full_signature": "@Override public String smellIdQuery(int projectId, Smell smell)", "class_method_signature": "JDBCSmellQueries.smellIdQuery(int projectId, Smell smell)", "testcase": false, "constructor": false}, {"identifier": "smellIdQuery", "parameters": "(int projectId, String instance, String file, String type, String renamedFrom)", "modifiers": "private", "return": "String", "signature": "String smellIdQuery(int projectId, String instance, String file, String type, String renamedFrom)", "full_signature": "private String smellIdQuery(int projectId, String instance, String file, String type, String renamedFrom)", "class_method_signature": "JDBCSmellQueries.smellIdQuery(int projectId, String instance, String file, String type, String renamedFrom)", "testcase": false, "constructor": false}, {"identifier": "commitSmellsQuery", "parameters": "(int projectId, String commitId, String smellType)", "modifiers": "@Override public", "return": "String", "signature": "String commitSmellsQuery(int projectId, String commitId, String smellType)", "full_signature": "@Override public String commitSmellsQuery(int projectId, String commitId, String smellType)", "class_method_signature": "JDBCSmellQueries.commitSmellsQuery(int projectId, String commitId, String smellType)", "testcase": false, "constructor": false}, {"identifier": "lastSmellIdQuery", "parameters": "(int projectId)", "modifiers": "public", "return": "String", "signature": "String lastSmellIdQuery(int projectId)", "full_signature": "public String lastSmellIdQuery(int projectId)", "class_method_signature": "JDBCSmellQueries.lastSmellIdQuery(int projectId)", "testcase": false, "constructor": false}, {"identifier": "allRefactoredInstancesWithSha1", "parameters": "(int projectId)", "modifiers": "public", "return": "String", "signature": "String allRefactoredInstancesWithSha1(int projectId)", "full_signature": "public String allRefactoredInstancesWithSha1(int projectId)", "class_method_signature": "JDBCSmellQueries.allRefactoredInstancesWithSha1(int projectId)", "testcase": false, "constructor": false}, {"identifier": "setAsDeleted", "parameters": "(int projectId, int refactoringId, boolean deleted)", "modifiers": "public", "return": "String", "signature": "String setAsDeleted(int projectId, int refactoringId, boolean deleted)", "full_signature": "public String setAsDeleted(int projectId, int refactoringId, boolean deleted)", "class_method_signature": "JDBCSmellQueries.setAsDeleted(int projectId, int refactoringId, boolean deleted)", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCSmellQueries.java"}, "focal_method": {"identifier": "smellCategoryInsertionStatement", "parameters": "(int projectId, String sha1, Smell smell, SmellCategory category)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String smellCategoryInsertionStatement(int projectId, String sha1, Smell smell, SmellCategory category) {\n        return \"INSERT INTO \" + category.getName() + \" (project_id, smell_id, commit_id) VALUES \" +\n                \"(\" + projectId + \", \" + smell.id + \", (\" +\n                commitQueries.idFromShaQuery(projectId, sha1) + \"));\";\n    }", "signature": "String smellCategoryInsertionStatement(int projectId, String sha1, Smell smell, SmellCategory category)", "full_signature": "@Override public String smellCategoryInsertionStatement(int projectId, String sha1, Smell smell, SmellCategory category)", "class_method_signature": "JDBCSmellQueries.smellCategoryInsertionStatement(int projectId, String sha1, Smell smell, SmellCategory category)", "testcase": false, "constructor": false, "invocations": ["getName", "idFromShaQuery"]}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}