{"test_class": {"identifier": "FootprintExtractionProcessTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String THE_GEOM = \"the_geom\";", "modifier": "private static final", "type": "String", "declarator": "THE_GEOM = \"the_geom\"", "var_name": "THE_GEOM"}, {"original_string": "private static final String CREATE_SPATIAL_INDEX = \"create spatial index\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_SPATIAL_INDEX = \"create spatial index\"", "var_name": "CREATE_SPATIAL_INDEX"}, {"original_string": "private static final double TOLERANCE = 1.0e-12;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 1.0e-12", "var_name": "TOLERANCE"}, {"original_string": "private FootprintExtractionProcess process;", "modifier": "private", "type": "FootprintExtractionProcess", "declarator": "process", "var_name": "process"}, {"original_string": "private Geometry referenceGeometry;", "modifier": "private", "type": "Geometry", "declarator": "referenceGeometry", "var_name": "referenceGeometry"}, {"original_string": "private File cloudFile;", "modifier": "private", "type": "File", "declarator": "cloudFile", "var_name": "cloudFile"}, {"original_string": "private File islandFile;", "modifier": "private", "type": "File", "declarator": "islandFile", "var_name": "islandFile"}], "file": "modules/unsupported/process-raster/src/test/java/org/geotools/process/raster/FootprintExtractionProcessTest.java"}, "test_case": {"identifier": "cloudExtractionWithoutDarkPixels", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cloudExtractionWithoutDarkPixels() throws Exception {\n        GeoTiffReader reader = null;\n        FeatureIterator<SimpleFeature> iter = null;\n        GridCoverage2D cov = null;\n        try {\n            reader = new GeoTiffReader(cloudFile);\n            cov = reader.read(null);\n\n            // Exclude pixels with luminance less than 20.\n            final int referenceLuminance = 10;\n            List<Range<Integer>> exclusionRanges = Collections.singletonList(new Range<Integer>(Integer.class, 0, referenceLuminance));\n            SimpleFeatureCollection fc = process.execute(cov, exclusionRanges, 10d, false, null,\n                    true, true, null, null);\n            iter = fc.features();\n\n            SimpleFeature feature = iter.next();\n            Geometry geometry = (Geometry) feature.getDefaultGeometry();\n\n            Raster raster = cov.getRenderedImage().getData();\n            int[] darkPixel = new int[3];\n\n            // These positions identify a couple of dark pixels of the cloud edge\n            raster.getPixel(9, 13, darkPixel);\n            double luminance = ImageUtilities.RGB_TO_GRAY_MATRIX[0][0] * darkPixel[0]\n                    + ImageUtilities.RGB_TO_GRAY_MATRIX[0][1] * darkPixel[1]\n                    + ImageUtilities.RGB_TO_GRAY_MATRIX[0][2] * darkPixel[2];\n            assertTrue(luminance < referenceLuminance);\n\n            raster.getPixel(15, 7, darkPixel);\n            luminance = ImageUtilities.RGB_TO_GRAY_MATRIX[0][0] * darkPixel[0]\n                    + ImageUtilities.RGB_TO_GRAY_MATRIX[0][1] * darkPixel[1]\n                    + ImageUtilities.RGB_TO_GRAY_MATRIX[0][2] * darkPixel[2];\n            assertTrue(luminance < referenceLuminance);\n\n            // The computed polygon should have different shape due to dark pixels being excluded\n            assertFalse(referenceGeometry.equalsExact(geometry, TOLERANCE));\n        } finally {\n            if (iter != null) {\n                iter.close();\n            }\n            if (reader != null) {\n                try {\n                    reader.dispose();\n                } catch (Throwable t) {\n\n                }\n            }\n            if (cov != null) {\n                try {\n                    cov.dispose(true);\n                } catch (Throwable t) {\n\n                }\n            }\n        }\n    }", "signature": "void cloudExtractionWithoutDarkPixels()", "full_signature": "@Test public void cloudExtractionWithoutDarkPixels()", "class_method_signature": "FootprintExtractionProcessTest.cloudExtractionWithoutDarkPixels()", "testcase": true, "constructor": false, "invocations": ["read", "singletonList", "execute", "features", "next", "getDefaultGeometry", "getData", "getRenderedImage", "getPixel", "assertTrue", "getPixel", "assertTrue", "assertFalse", "equalsExact", "close", "dispose", "dispose"]}, "focal_class": {"identifier": "FootprintExtractionProcess", "superclass": "", "interfaces": "implements RasterProcess", "fields": [], "methods": [{"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"data\", description = \"Source raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"exclusionRanges\", description = \"the ranges of luminance values to be excluded by the computation.\", min = 0) List<Range<Integer>> exclusionRanges,\n            @DescribeParameter(name = \"thresholdArea\", description = \"Indicates the minimum area of a polygon to be included in the final result\", min = 0) Double thresholdArea, \n            @DescribeParameter(name = \"computeSimplifiedFootprint\", description = \"Indicates whether the simplified footprint should be computed\", min = 0) Boolean computeSimplifiedFootprint, \n            @DescribeParameter(name = \"simplifierFactor\", description = \"Indicates the simplifier factor to be applied when computing the simplified footprint\", min = 0) Double simplifierFactor, \n            @DescribeParameter(name = \"removeCollinear\", description = \"Indicates whether remove collinear point should be applied\", min = 0) Boolean removeCollinear,\n            @DescribeParameter(name = \"forceValid\", description = \"Indicates whether polygon should be forced to be valid, also removing holes\", min = 0) Boolean forceValid,\n            @DescribeParameter(name = \"loadingType\", description = \"Indicates which type of imageLoading should be performed (DEFERRED vs IMMEDIATE)\", min = 0) ImageLoadingType imageLoadingType,\n            ProgressListener progressListener)", "modifiers": "@DescribeResult(name = \"result\", description = \"The compute footprint geometry\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Source raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"exclusionRanges\", description = \"the ranges of luminance values to be excluded by the computation.\", min = 0) List<Range<Integer>> exclusionRanges,\n            @DescribeParameter(name = \"thresholdArea\", description = \"Indicates the minimum area of a polygon to be included in the final result\", min = 0) Double thresholdArea, \n            @DescribeParameter(name = \"computeSimplifiedFootprint\", description = \"Indicates whether the simplified footprint should be computed\", min = 0) Boolean computeSimplifiedFootprint, \n            @DescribeParameter(name = \"simplifierFactor\", description = \"Indicates the simplifier factor to be applied when computing the simplified footprint\", min = 0) Double simplifierFactor, \n            @DescribeParameter(name = \"removeCollinear\", description = \"Indicates whether remove collinear point should be applied\", min = 0) Boolean removeCollinear,\n            @DescribeParameter(name = \"forceValid\", description = \"Indicates whether polygon should be forced to be valid, also removing holes\", min = 0) Boolean forceValid,\n            @DescribeParameter(name = \"loadingType\", description = \"Indicates which type of imageLoading should be performed (DEFERRED vs IMMEDIATE)\", min = 0) ImageLoadingType imageLoadingType,\n            ProgressListener progressListener)", "full_signature": "@DescribeResult(name = \"result\", description = \"The compute footprint geometry\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Source raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"exclusionRanges\", description = \"the ranges of luminance values to be excluded by the computation.\", min = 0) List<Range<Integer>> exclusionRanges,\n            @DescribeParameter(name = \"thresholdArea\", description = \"Indicates the minimum area of a polygon to be included in the final result\", min = 0) Double thresholdArea, \n            @DescribeParameter(name = \"computeSimplifiedFootprint\", description = \"Indicates whether the simplified footprint should be computed\", min = 0) Boolean computeSimplifiedFootprint, \n            @DescribeParameter(name = \"simplifierFactor\", description = \"Indicates the simplifier factor to be applied when computing the simplified footprint\", min = 0) Double simplifierFactor, \n            @DescribeParameter(name = \"removeCollinear\", description = \"Indicates whether remove collinear point should be applied\", min = 0) Boolean removeCollinear,\n            @DescribeParameter(name = \"forceValid\", description = \"Indicates whether polygon should be forced to be valid, also removing holes\", min = 0) Boolean forceValid,\n            @DescribeParameter(name = \"loadingType\", description = \"Indicates which type of imageLoading should be performed (DEFERRED vs IMMEDIATE)\", min = 0) ImageLoadingType imageLoadingType,\n            ProgressListener progressListener)", "class_method_signature": "FootprintExtractionProcess.execute(\n            @DescribeParameter(name = \"data\", description = \"Source raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"exclusionRanges\", description = \"the ranges of luminance values to be excluded by the computation.\", min = 0) List<Range<Integer>> exclusionRanges,\n            @DescribeParameter(name = \"thresholdArea\", description = \"Indicates the minimum area of a polygon to be included in the final result\", min = 0) Double thresholdArea, \n            @DescribeParameter(name = \"computeSimplifiedFootprint\", description = \"Indicates whether the simplified footprint should be computed\", min = 0) Boolean computeSimplifiedFootprint, \n            @DescribeParameter(name = \"simplifierFactor\", description = \"Indicates the simplifier factor to be applied when computing the simplified footprint\", min = 0) Double simplifierFactor, \n            @DescribeParameter(name = \"removeCollinear\", description = \"Indicates whether remove collinear point should be applied\", min = 0) Boolean removeCollinear,\n            @DescribeParameter(name = \"forceValid\", description = \"Indicates whether polygon should be forced to be valid, also removing holes\", min = 0) Boolean forceValid,\n            @DescribeParameter(name = \"loadingType\", description = \"Indicates which type of imageLoading should be performed (DEFERRED vs IMMEDIATE)\", min = 0) ImageLoadingType imageLoadingType,\n            ProgressListener progressListener)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-raster/src/main/java/org/geotools/process/raster/FootprintExtractionProcess.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"data\", description = \"Source raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"exclusionRanges\", description = \"the ranges of luminance values to be excluded by the computation.\", min = 0) List<Range<Integer>> exclusionRanges,\n            @DescribeParameter(name = \"thresholdArea\", description = \"Indicates the minimum area of a polygon to be included in the final result\", min = 0) Double thresholdArea, \n            @DescribeParameter(name = \"computeSimplifiedFootprint\", description = \"Indicates whether the simplified footprint should be computed\", min = 0) Boolean computeSimplifiedFootprint, \n            @DescribeParameter(name = \"simplifierFactor\", description = \"Indicates the simplifier factor to be applied when computing the simplified footprint\", min = 0) Double simplifierFactor, \n            @DescribeParameter(name = \"removeCollinear\", description = \"Indicates whether remove collinear point should be applied\", min = 0) Boolean removeCollinear,\n            @DescribeParameter(name = \"forceValid\", description = \"Indicates whether polygon should be forced to be valid, also removing holes\", min = 0) Boolean forceValid,\n            @DescribeParameter(name = \"loadingType\", description = \"Indicates which type of imageLoading should be performed (DEFERRED vs IMMEDIATE)\", min = 0) ImageLoadingType imageLoadingType,\n            ProgressListener progressListener)", "modifiers": "@DescribeResult(name = \"result\", description = \"The compute footprint geometry\") public", "return": "SimpleFeatureCollection", "body": "@DescribeResult(name = \"result\", description = \"The compute footprint geometry\")\n    public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Source raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"exclusionRanges\", description = \"the ranges of luminance values to be excluded by the computation.\", min = 0) List<Range<Integer>> exclusionRanges,\n            @DescribeParameter(name = \"thresholdArea\", description = \"Indicates the minimum area of a polygon to be included in the final result\", min = 0) Double thresholdArea, \n            @DescribeParameter(name = \"computeSimplifiedFootprint\", description = \"Indicates whether the simplified footprint should be computed\", min = 0) Boolean computeSimplifiedFootprint, \n            @DescribeParameter(name = \"simplifierFactor\", description = \"Indicates the simplifier factor to be applied when computing the simplified footprint\", min = 0) Double simplifierFactor, \n            @DescribeParameter(name = \"removeCollinear\", description = \"Indicates whether remove collinear point should be applied\", min = 0) Boolean removeCollinear,\n            @DescribeParameter(name = \"forceValid\", description = \"Indicates whether polygon should be forced to be valid, also removing holes\", min = 0) Boolean forceValid,\n            @DescribeParameter(name = \"loadingType\", description = \"Indicates which type of imageLoading should be performed (DEFERRED vs IMMEDIATE)\", min = 0) ImageLoadingType imageLoadingType,\n            ProgressListener progressListener)\n            throws ProcessException {\n\n        //\n        // initial checks\n        //\n        if (coverage == null) {\n            throw new ProcessException(\"Invalid input, source grid coverage should be not null\");\n        }\n\n        // Checking for defaults\n        if (exclusionRanges == null) {\n            exclusionRanges = MarchingSquaresVectorizer.DEFAULT_RANGES;\n        }\n\n        if (computeSimplifiedFootprint == null) {\n            computeSimplifiedFootprint = false;\n        }\n\n        if (simplifierFactor == null) {\n            simplifierFactor = MarchingSquaresVectorizer.DEFAULT_SIMPLIFIER_FACTOR;\n        }\n\n        if (forceValid == null) {\n            forceValid = true;\n        }\n\n        if (removeCollinear == null) {\n            removeCollinear = true;\n        }\n\n        if (imageLoadingType == null) {\n            imageLoadingType = ImageLoadingType.getDefault();\n        }\n\n        if (thresholdArea == null) {\n            thresholdArea = MarchingSquaresVectorizer.DEFAULT_THRESHOLD_AREA;\n        }\n\n        MarchingSquaresVectorizer vectorizer = new MarchingSquaresVectorizer(coverage, null, thresholdArea, simplifierFactor, imageLoadingType, exclusionRanges);\n        vectorizer.setComputeSimplifiedFootprint(computeSimplifiedFootprint);\n        vectorizer.setForceValid(forceValid);\n        vectorizer.setRemoveCollinear(removeCollinear);\n        try {\n            vectorizer.process();\n\n            Geometry geometry = vectorizer.getFootprint();\n\n            // wrap as a feature collection and return\n            final SimpleFeatureType featureType = CoverageUtilities.createFeatureType(coverage,\n                    Geometry.class);\n            final SimpleFeatureBuilder builder = new SimpleFeatureBuilder(featureType);\n            int i = 0;\n            final ListFeatureCollection featureCollection = new ListFeatureCollection(featureType);\n\n            // create feature and add to list\n            builder.set(\"the_geom\", geometry);\n\n            featureCollection.add(builder.buildFeature(String.valueOf(i++)));\n            if (computeSimplifiedFootprint) {\n                builder.set(\"the_geom\", vectorizer.getSimplifiedFootprint());\n                featureCollection.add(builder.buildFeature(String.valueOf(i++)));\n            }\n            return featureCollection;\n        } catch (Exception e) {\n            throw new ProcessException(\"Exception occurred while computing the footprint\", e);\n        } finally {\n            vectorizer.dispose();\n        }\n    }", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Source raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"exclusionRanges\", description = \"the ranges of luminance values to be excluded by the computation.\", min = 0) List<Range<Integer>> exclusionRanges,\n            @DescribeParameter(name = \"thresholdArea\", description = \"Indicates the minimum area of a polygon to be included in the final result\", min = 0) Double thresholdArea, \n            @DescribeParameter(name = \"computeSimplifiedFootprint\", description = \"Indicates whether the simplified footprint should be computed\", min = 0) Boolean computeSimplifiedFootprint, \n            @DescribeParameter(name = \"simplifierFactor\", description = \"Indicates the simplifier factor to be applied when computing the simplified footprint\", min = 0) Double simplifierFactor, \n            @DescribeParameter(name = \"removeCollinear\", description = \"Indicates whether remove collinear point should be applied\", min = 0) Boolean removeCollinear,\n            @DescribeParameter(name = \"forceValid\", description = \"Indicates whether polygon should be forced to be valid, also removing holes\", min = 0) Boolean forceValid,\n            @DescribeParameter(name = \"loadingType\", description = \"Indicates which type of imageLoading should be performed (DEFERRED vs IMMEDIATE)\", min = 0) ImageLoadingType imageLoadingType,\n            ProgressListener progressListener)", "full_signature": "@DescribeResult(name = \"result\", description = \"The compute footprint geometry\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Source raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"exclusionRanges\", description = \"the ranges of luminance values to be excluded by the computation.\", min = 0) List<Range<Integer>> exclusionRanges,\n            @DescribeParameter(name = \"thresholdArea\", description = \"Indicates the minimum area of a polygon to be included in the final result\", min = 0) Double thresholdArea, \n            @DescribeParameter(name = \"computeSimplifiedFootprint\", description = \"Indicates whether the simplified footprint should be computed\", min = 0) Boolean computeSimplifiedFootprint, \n            @DescribeParameter(name = \"simplifierFactor\", description = \"Indicates the simplifier factor to be applied when computing the simplified footprint\", min = 0) Double simplifierFactor, \n            @DescribeParameter(name = \"removeCollinear\", description = \"Indicates whether remove collinear point should be applied\", min = 0) Boolean removeCollinear,\n            @DescribeParameter(name = \"forceValid\", description = \"Indicates whether polygon should be forced to be valid, also removing holes\", min = 0) Boolean forceValid,\n            @DescribeParameter(name = \"loadingType\", description = \"Indicates which type of imageLoading should be performed (DEFERRED vs IMMEDIATE)\", min = 0) ImageLoadingType imageLoadingType,\n            ProgressListener progressListener)", "class_method_signature": "FootprintExtractionProcess.execute(\n            @DescribeParameter(name = \"data\", description = \"Source raster\") GridCoverage2D coverage,\n            @DescribeParameter(name = \"exclusionRanges\", description = \"the ranges of luminance values to be excluded by the computation.\", min = 0) List<Range<Integer>> exclusionRanges,\n            @DescribeParameter(name = \"thresholdArea\", description = \"Indicates the minimum area of a polygon to be included in the final result\", min = 0) Double thresholdArea, \n            @DescribeParameter(name = \"computeSimplifiedFootprint\", description = \"Indicates whether the simplified footprint should be computed\", min = 0) Boolean computeSimplifiedFootprint, \n            @DescribeParameter(name = \"simplifierFactor\", description = \"Indicates the simplifier factor to be applied when computing the simplified footprint\", min = 0) Double simplifierFactor, \n            @DescribeParameter(name = \"removeCollinear\", description = \"Indicates whether remove collinear point should be applied\", min = 0) Boolean removeCollinear,\n            @DescribeParameter(name = \"forceValid\", description = \"Indicates whether polygon should be forced to be valid, also removing holes\", min = 0) Boolean forceValid,\n            @DescribeParameter(name = \"loadingType\", description = \"Indicates which type of imageLoading should be performed (DEFERRED vs IMMEDIATE)\", min = 0) ImageLoadingType imageLoadingType,\n            ProgressListener progressListener)", "testcase": false, "constructor": false, "invocations": ["getDefault", "setComputeSimplifiedFootprint", "setForceValid", "setRemoveCollinear", "process", "getFootprint", "createFeatureType", "set", "add", "buildFeature", "valueOf", "set", "getSimplifiedFootprint", "add", "buildFeature", "valueOf", "dispose"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}