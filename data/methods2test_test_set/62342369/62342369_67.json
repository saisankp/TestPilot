{"test_class": {"identifier": "PlanParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "step-plans/step-plans-parser/src/test/java/step/plans/nl/parser/PlanParserTest.java"}, "test_case": {"identifier": "testWrap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWrap() throws IOException, ParsingException {\n\t\tPlanParser parser = new PlanParser();\n\t\tPlan plan = parser.parse(\"Echo 'test'\\nEcho 'test'\");\n\t\tAssert.assertEquals(TestCase.class, plan.getRoot().getClass());\n\t}", "signature": "void testWrap()", "full_signature": "@Test public void testWrap()", "class_method_signature": "PlanParserTest.testWrap()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "getClass", "getRoot"]}, "focal_class": {"identifier": "PlanParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected boolean wrapInTestcase = true;", "modifier": "protected", "type": "boolean", "declarator": "wrapInTestcase = true", "var_name": "wrapInTestcase"}, {"original_string": "protected Configuration configuration;", "modifier": "protected", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private static final Pattern DYNAMIC_NAME_PATTERN = Pattern.compile(\"[ ]*\\\\|(.+?)\\\\|[ ]*\");", "modifier": "private static final", "type": "Pattern", "declarator": "DYNAMIC_NAME_PATTERN = Pattern.compile(\"[ ]*\\\\|(.+?)\\\\|[ ]*\")", "var_name": "DYNAMIC_NAME_PATTERN"}], "methods": [{"identifier": "PlanParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " PlanParser()", "full_signature": "public  PlanParser()", "class_method_signature": "PlanParser.PlanParser()", "testcase": false, "constructor": true}, {"identifier": "PlanParser", "parameters": "(Configuration configuration)", "modifiers": "public", "return": "", "signature": " PlanParser(Configuration configuration)", "full_signature": "public  PlanParser(Configuration configuration)", "class_method_signature": "PlanParser.PlanParser(Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "isWrapInTestcase", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWrapInTestcase()", "full_signature": "public boolean isWrapInTestcase()", "class_method_signature": "PlanParser.isWrapInTestcase()", "testcase": false, "constructor": false}, {"identifier": "setWrapInTestcase", "parameters": "(boolean wrapInTestcase)", "modifiers": "public", "return": "void", "signature": "void setWrapInTestcase(boolean wrapInTestcase)", "full_signature": "public void setWrapInTestcase(boolean wrapInTestcase)", "class_method_signature": "PlanParser.setWrapInTestcase(boolean wrapInTestcase)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String content)", "modifiers": "public", "return": "Plan", "signature": "Plan parse(String content)", "full_signature": "public Plan parse(String content)", "class_method_signature": "PlanParser.parse(String content)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream inputStream)", "modifiers": "public", "return": "Plan", "signature": "Plan parse(InputStream inputStream)", "full_signature": "public Plan parse(InputStream inputStream)", "class_method_signature": "PlanParser.parse(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Reader contentReader)", "modifiers": "protected", "return": "Plan", "signature": "Plan parse(Reader contentReader)", "full_signature": "protected Plan parse(Reader contentReader)", "class_method_signature": "PlanParser.parse(Reader contentReader)", "testcase": false, "constructor": false}], "file": "step-plans/step-plans-parser/src/main/java/step/plans/nl/parser/PlanParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String content)", "modifiers": "public", "return": "Plan", "body": "public Plan parse(String content) throws ParsingException {\n\t\treturn parse(new StringReader(content));\n\t}", "signature": "Plan parse(String content)", "full_signature": "public Plan parse(String content)", "class_method_signature": "PlanParser.parse(String content)", "testcase": false, "constructor": false, "invocations": ["parse"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}