{"test_class": {"identifier": "FxUtilsTest", "superclass": "extends UtilityClassTest<FxUtils>", "interfaces": "", "fields": [], "file": "api/src/test/java/edu/wpi/first/shuffleboard/api/util/FxUtilsTest.java"}, "test_case": {"identifier": "menuItemTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void menuItemTest() {\n    CompletableFuture<Boolean> future = new CompletableFuture<>();\n    MenuItem menuItem = FxUtils.menuItem(\"Test item\", event -> future.complete(true));\n\n    menuItem.fire();\n    assertTimeoutPreemptively(Duration.ofSeconds(5), future::join);\n  }", "signature": "void menuItemTest()", "full_signature": "@Test public void menuItemTest()", "class_method_signature": "FxUtilsTest.menuItemTest()", "testcase": true, "constructor": false, "invocations": ["menuItem", "complete", "fire", "assertTimeoutPreemptively", "ofSeconds"]}, "focal_class": {"identifier": "FxUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Object FX_CONTROLLER_KEY = new Object();", "modifier": "private static final", "type": "Object", "declarator": "FX_CONTROLLER_KEY = new Object()", "var_name": "FX_CONTROLLER_KEY"}], "methods": [{"identifier": "FxUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " FxUtils()", "full_signature": "private  FxUtils()", "class_method_signature": "FxUtils.FxUtils()", "testcase": false, "constructor": true}, {"identifier": "runOnFxThread", "parameters": "(Runnable task)", "modifiers": "public static", "return": "CompletableFuture<Boolean>", "signature": "CompletableFuture<Boolean> runOnFxThread(Runnable task)", "full_signature": "public static CompletableFuture<Boolean> runOnFxThread(Runnable task)", "class_method_signature": "FxUtils.runOnFxThread(Runnable task)", "testcase": false, "constructor": false}, {"identifier": "bind", "parameters": "(Property<T> property,\n                                    ObservableMap<K, V> map,\n                                    K key,\n                                    Function<V, T> converter)", "modifiers": "public static", "return": "void", "signature": "void bind(Property<T> property,\n                                    ObservableMap<K, V> map,\n                                    K key,\n                                    Function<V, T> converter)", "full_signature": "public static void bind(Property<T> property,\n                                    ObservableMap<K, V> map,\n                                    K key,\n                                    Function<V, T> converter)", "class_method_signature": "FxUtils.bind(Property<T> property,\n                                    ObservableMap<K, V> map,\n                                    K key,\n                                    Function<V, T> converter)", "testcase": false, "constructor": false}, {"identifier": "bind", "parameters": "(Property<T> property, DataSource<T> dataSource)", "modifiers": "public static", "return": "void", "signature": "void bind(Property<T> property, DataSource<T> dataSource)", "full_signature": "public static void bind(Property<T> property, DataSource<T> dataSource)", "class_method_signature": "FxUtils.bind(Property<T> property, DataSource<T> dataSource)", "testcase": false, "constructor": false}, {"identifier": "bind", "parameters": "(ObservableList<? super T> list,\n                              ObservableValue<? extends List<? extends T>> observable)", "modifiers": "public static", "return": "void", "signature": "void bind(ObservableList<? super T> list,\n                              ObservableValue<? extends List<? extends T>> observable)", "full_signature": "public static void bind(ObservableList<? super T> list,\n                              ObservableValue<? extends List<? extends T>> observable)", "class_method_signature": "FxUtils.bind(ObservableList<? super T> list,\n                              ObservableValue<? extends List<? extends T>> observable)", "testcase": false, "constructor": false}, {"identifier": "bindBidirectional", "parameters": "(Property<T> property, DataSource<T> dataSource)", "modifiers": "public static", "return": "void", "signature": "void bindBidirectional(Property<T> property, DataSource<T> dataSource)", "full_signature": "public static void bindBidirectional(Property<T> property, DataSource<T> dataSource)", "class_method_signature": "FxUtils.bindBidirectional(Property<T> property, DataSource<T> dataSource)", "testcase": false, "constructor": false}, {"identifier": "when", "parameters": "(Property<Boolean> condition)", "modifiers": "public static", "return": "When", "signature": "When when(Property<Boolean> condition)", "full_signature": "public static When when(Property<Boolean> condition)", "class_method_signature": "FxUtils.when(Property<Boolean> condition)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(Color color)", "modifiers": "public static", "return": "String", "signature": "String toHexString(Color color)", "full_signature": "public static String toHexString(Color color)", "class_method_signature": "FxUtils.toHexString(Color color)", "testcase": false, "constructor": false}, {"identifier": "menuItem", "parameters": "(String text, EventHandler<ActionEvent> eventHandler)", "modifiers": "public static", "return": "MenuItem", "signature": "MenuItem menuItem(String text, EventHandler<ActionEvent> eventHandler)", "full_signature": "public static MenuItem menuItem(String text, EventHandler<ActionEvent> eventHandler)", "class_method_signature": "FxUtils.menuItem(String text, EventHandler<ActionEvent> eventHandler)", "testcase": false, "constructor": false}, {"identifier": "menuLabel", "parameters": "(String text)", "modifiers": "public static", "return": "MenuItem", "signature": "MenuItem menuLabel(String text)", "full_signature": "public static MenuItem menuLabel(String text)", "class_method_signature": "FxUtils.menuLabel(String text)", "testcase": false, "constructor": false}, {"identifier": "getLabel", "parameters": "(Node node)", "modifiers": "public static", "return": "Optional<Label>", "signature": "Optional<Label> getLabel(Node node)", "full_signature": "public static Optional<Label> getLabel(Node node)", "class_method_signature": "FxUtils.getLabel(Node node)", "testcase": false, "constructor": false}, {"identifier": "setController", "parameters": "(Node node, Object controller)", "modifiers": "public static", "return": "void", "signature": "void setController(Node node, Object controller)", "full_signature": "public static void setController(Node node, Object controller)", "class_method_signature": "FxUtils.setController(Node node, Object controller)", "testcase": false, "constructor": false}, {"identifier": "getController", "parameters": "(Node node)", "modifiers": "public static", "return": "T", "signature": "T getController(Node node)", "full_signature": "public static T getController(Node node)", "class_method_signature": "FxUtils.getController(Node node)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Class<?> controllerClass)", "modifiers": "public static", "return": "N", "signature": "N load(Class<?> controllerClass)", "full_signature": "public static N load(Class<?> controllerClass)", "class_method_signature": "FxUtils.load(Class<?> controllerClass)", "testcase": false, "constructor": false}, {"identifier": "requestClose", "parameters": "(Window window)", "modifiers": "public static", "return": "void", "signature": "void requestClose(Window window)", "full_signature": "public static void requestClose(Window window)", "class_method_signature": "FxUtils.requestClose(Window window)", "testcase": false, "constructor": false}], "file": "api/src/main/java/edu/wpi/first/shuffleboard/api/util/FxUtils.java"}, "focal_method": {"identifier": "menuItem", "parameters": "(String text, EventHandler<ActionEvent> eventHandler)", "modifiers": "public static", "return": "MenuItem", "body": "public static MenuItem menuItem(String text, EventHandler<ActionEvent> eventHandler) {\n    MenuItem menuItem = new MenuItem(text);\n    menuItem.setOnAction(eventHandler);\n    return menuItem;\n  }", "signature": "MenuItem menuItem(String text, EventHandler<ActionEvent> eventHandler)", "full_signature": "public static MenuItem menuItem(String text, EventHandler<ActionEvent> eventHandler)", "class_method_signature": "FxUtils.menuItem(String text, EventHandler<ActionEvent> eventHandler)", "testcase": false, "constructor": false, "invocations": ["setOnAction"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}