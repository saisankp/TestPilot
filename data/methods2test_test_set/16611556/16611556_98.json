{"test_class": {"identifier": "BridgeMethodMappingStoreImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BridgeMethodMappingStoreImpl store = new BridgeMethodMappingStoreImpl();", "modifier": "private final", "type": "BridgeMethodMappingStoreImpl", "declarator": "store = new BridgeMethodMappingStoreImpl()", "var_name": "store"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/aop/support/BridgeMethodMappingStoreImplTest.java"}, "test_case": {"identifier": "testWrongMappings", "parameters": "()", "modifiers": "@Test(expected = InvalidAnnotationException.class) public", "return": "void", "body": "@Test(expected = InvalidAnnotationException.class)\n    public void testWrongMappings() {\n        store.getTargetParamsTypes(SubGeneric3.class, \"set\", new Class<?>[] { Object.class, Object.class });\n    }", "signature": "void testWrongMappings()", "full_signature": "@Test(expected = InvalidAnnotationException.class) public void testWrongMappings()", "class_method_signature": "BridgeMethodMappingStoreImplTest.testWrongMappings()", "testcase": true, "constructor": false, "invocations": ["getTargetParamsTypes"]}, "focal_class": {"identifier": "BridgeMethodMappingStoreImpl", "superclass": "", "interfaces": "implements BridgeMethodMappingStore", "fields": [{"original_string": "private final Map<Class<?>, Map<String, Map<String, Class<?>[]>>> map = new ConcurrentHashMap<Class<?>, Map<String, Map<String, Class<?>[]>>>();", "modifier": "private final", "type": "Map<Class<?>, Map<String, Map<String, Class<?>[]>>>", "declarator": "map = new ConcurrentHashMap<Class<?>, Map<String, Map<String, Class<?>[]>>>()", "var_name": "map"}], "methods": [{"identifier": "getTargetParamsTypes", "parameters": "(final Class<?> clazz, final String methodName, final Class<?>[] erasedParamTypes)", "modifiers": "@Override public", "return": "Class<?>[]", "signature": "Class<?>[] getTargetParamsTypes(final Class<?> clazz, final String methodName, final Class<?>[] erasedParamTypes)", "full_signature": "@Override public Class<?>[] getTargetParamsTypes(final Class<?> clazz, final String methodName, final Class<?>[] erasedParamTypes)", "class_method_signature": "BridgeMethodMappingStoreImpl.getTargetParamsTypes(final Class<?> clazz, final String methodName, final Class<?>[] erasedParamTypes)", "testcase": false, "constructor": false}, {"identifier": "processBridgeMethodMappingsAnnotation", "parameters": "(final Class<?> clazz)", "modifiers": "private", "return": "void", "signature": "void processBridgeMethodMappingsAnnotation(final Class<?> clazz)", "full_signature": "private void processBridgeMethodMappingsAnnotation(final Class<?> clazz)", "class_method_signature": "BridgeMethodMappingStoreImpl.processBridgeMethodMappingsAnnotation(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "addMethodMapping", "parameters": "(final Class<?> clazz, final Map<String, Map<String, Class<?>[]>> methodNameMap, final String methodName,\n            final Class<?>[] erasedParamTypes, final Class<?>[] targetParamTypes)", "modifiers": "private", "return": "void", "signature": "void addMethodMapping(final Class<?> clazz, final Map<String, Map<String, Class<?>[]>> methodNameMap, final String methodName,\n            final Class<?>[] erasedParamTypes, final Class<?>[] targetParamTypes)", "full_signature": "private void addMethodMapping(final Class<?> clazz, final Map<String, Map<String, Class<?>[]>> methodNameMap, final String methodName,\n            final Class<?>[] erasedParamTypes, final Class<?>[] targetParamTypes)", "class_method_signature": "BridgeMethodMappingStoreImpl.addMethodMapping(final Class<?> clazz, final Map<String, Map<String, Class<?>[]>> methodNameMap, final String methodName,\n            final Class<?>[] erasedParamTypes, final Class<?>[] targetParamTypes)", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/aop/support/BridgeMethodMappingStoreImpl.java"}, "focal_method": {"identifier": "getTargetParamsTypes", "parameters": "(final Class<?> clazz, final String methodName, final Class<?>[] erasedParamTypes)", "modifiers": "@Override public", "return": "Class<?>[]", "body": "@Override\n    public Class<?>[] getTargetParamsTypes(final Class<?> clazz, final String methodName, final Class<?>[] erasedParamTypes) {\n        if (!map.containsKey(clazz)) {\n            // initialize all class' bridge method mappings\n            processBridgeMethodMappingsAnnotation(clazz);\n        }\n\n        Map<String, Map<String, Class<?>[]>> methodNameMap = map.get(clazz);\n        Map<String, Class<?>[]> erasedParamTypesMap = null;\n        Class<?>[] targetParamTypes = null;\n        if (methodNameMap != null) {\n            erasedParamTypesMap = methodNameMap.get(methodName);\n        }\n\n        String key = Arrays.toString(erasedParamTypes);\n        if (erasedParamTypesMap != null) {\n            targetParamTypes = erasedParamTypesMap.get(key);\n        }\n\n        if (targetParamTypes == null) {\n            throw new RuntimeException(String.format(\n                    \"Annotation [%s] must be defined on [%s] for bridge method [%s] with erased param types [%s]\",\n                    BridgeMethodMappings.class.getName(), clazz.getName(), methodName, key));\n        }\n\n        return targetParamTypes;\n    }", "signature": "Class<?>[] getTargetParamsTypes(final Class<?> clazz, final String methodName, final Class<?>[] erasedParamTypes)", "full_signature": "@Override public Class<?>[] getTargetParamsTypes(final Class<?> clazz, final String methodName, final Class<?>[] erasedParamTypes)", "class_method_signature": "BridgeMethodMappingStoreImpl.getTargetParamsTypes(final Class<?> clazz, final String methodName, final Class<?>[] erasedParamTypes)", "testcase": false, "constructor": false, "invocations": ["containsKey", "processBridgeMethodMappingsAnnotation", "get", "get", "toString", "get", "format", "getName", "getName"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}