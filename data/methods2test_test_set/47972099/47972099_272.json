{"test_class": {"identifier": "StreamRecordTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/streamrecord/StreamRecordTest.java"}, "test_case": {"identifier": "testCopyTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCopyTo() {\n\t\tStreamRecord<String> recNoTimestamp = new StreamRecord<String>(\"test\");\n\t\tStreamRecord<String> recNoTimestampCopy = new StreamRecord<>(null);\n\t\trecNoTimestamp.copyTo(\"test\", recNoTimestampCopy);\n\t\tassertEquals(recNoTimestamp, recNoTimestampCopy);\n\n\t\tStreamRecord<String> recWithTimestamp = new StreamRecord<String>(\"test\", 99);\n\t\tStreamRecord<String> recWithTimestampCopy = new StreamRecord<>(null);\n\t\trecWithTimestamp.copyTo(\"test\", recWithTimestampCopy);\n\t\tassertEquals(recWithTimestamp, recWithTimestampCopy);\n\t}", "signature": "void testCopyTo()", "full_signature": "@Test public void testCopyTo()", "class_method_signature": "StreamRecordTest.testCopyTo()", "testcase": true, "constructor": false, "invocations": ["copyTo", "assertEquals", "copyTo", "assertEquals"]}, "focal_class": {"identifier": "StreamRecord", "superclass": "extends StreamElement", "interfaces": "", "fields": [{"original_string": "private T value;", "modifier": "private", "type": "T", "declarator": "value", "var_name": "value"}, {"original_string": "private long timestamp;", "modifier": "private", "type": "long", "declarator": "timestamp", "var_name": "timestamp"}, {"original_string": "private boolean hasTimestamp;", "modifier": "private", "type": "boolean", "declarator": "hasTimestamp", "var_name": "hasTimestamp"}], "methods": [{"identifier": "StreamRecord", "parameters": "(T value)", "modifiers": "public", "return": "", "signature": " StreamRecord(T value)", "full_signature": "public  StreamRecord(T value)", "class_method_signature": "StreamRecord.StreamRecord(T value)", "testcase": false, "constructor": true}, {"identifier": "StreamRecord", "parameters": "(T value, long timestamp)", "modifiers": "public", "return": "", "signature": " StreamRecord(T value, long timestamp)", "full_signature": "public  StreamRecord(T value, long timestamp)", "class_method_signature": "StreamRecord.StreamRecord(T value, long timestamp)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getValue()", "full_signature": "public T getValue()", "class_method_signature": "StreamRecord.getValue()", "testcase": false, "constructor": false}, {"identifier": "getTimestamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimestamp()", "full_signature": "public long getTimestamp()", "class_method_signature": "StreamRecord.getTimestamp()", "testcase": false, "constructor": false}, {"identifier": "hasTimestamp", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasTimestamp()", "full_signature": "public boolean hasTimestamp()", "class_method_signature": "StreamRecord.hasTimestamp()", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(X element)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "StreamRecord<X>", "signature": "StreamRecord<X> replace(X element)", "full_signature": "@SuppressWarnings(\"unchecked\") public StreamRecord<X> replace(X element)", "class_method_signature": "StreamRecord.replace(X element)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(X value, long timestamp)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "StreamRecord<X>", "signature": "StreamRecord<X> replace(X value, long timestamp)", "full_signature": "@SuppressWarnings(\"unchecked\") public StreamRecord<X> replace(X value, long timestamp)", "class_method_signature": "StreamRecord.replace(X value, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "setTimestamp", "parameters": "(long timestamp)", "modifiers": "public", "return": "void", "signature": "void setTimestamp(long timestamp)", "full_signature": "public void setTimestamp(long timestamp)", "class_method_signature": "StreamRecord.setTimestamp(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "eraseTimestamp", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void eraseTimestamp()", "full_signature": "public void eraseTimestamp()", "class_method_signature": "StreamRecord.eraseTimestamp()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(T valueCopy)", "modifiers": "public", "return": "StreamRecord<T>", "signature": "StreamRecord<T> copy(T valueCopy)", "full_signature": "public StreamRecord<T> copy(T valueCopy)", "class_method_signature": "StreamRecord.copy(T valueCopy)", "testcase": false, "constructor": false}, {"identifier": "copyTo", "parameters": "(T valueCopy, StreamRecord<T> target)", "modifiers": "public", "return": "void", "signature": "void copyTo(T valueCopy, StreamRecord<T> target)", "full_signature": "public void copyTo(T valueCopy, StreamRecord<T> target)", "class_method_signature": "StreamRecord.copyTo(T valueCopy, StreamRecord<T> target)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "StreamRecord.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "StreamRecord.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StreamRecord.toString()", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/streamrecord/StreamRecord.java"}, "focal_method": {"identifier": "copyTo", "parameters": "(T valueCopy, StreamRecord<T> target)", "modifiers": "public", "return": "void", "body": "public void copyTo(T valueCopy, StreamRecord<T> target) {\n\t\ttarget.value = valueCopy;\n\t\ttarget.timestamp = this.timestamp;\n\t\ttarget.hasTimestamp = this.hasTimestamp;\n\t}", "signature": "void copyTo(T valueCopy, StreamRecord<T> target)", "full_signature": "public void copyTo(T valueCopy, StreamRecord<T> target)", "class_method_signature": "StreamRecord.copyTo(T valueCopy, StreamRecord<T> target)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}