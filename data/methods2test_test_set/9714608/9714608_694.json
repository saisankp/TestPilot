{"test_class": {"identifier": "AgentMotionTest", "superclass": "extends AbstractMathTestCase", "interfaces": "", "fields": [], "file": "advanced/agentmotion/src/test/java/org/arakhne/afc/agentmotion/AgentMotionTest.java"}, "test_case": {"identifier": "getAngular", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getAngular() {\n\t\tdouble x = getRandom().nextDouble();\n\t\tdouble y = getRandom().nextDouble();\n\t\tdouble r = getRandom().nextDouble();\n\t\tAgentMotion m = new AgentMotion(x, y, r);\n\t\tassertEpsilonEquals(r, m.getAngular());\n\t}", "signature": "void getAngular()", "full_signature": "@Test public void getAngular()", "class_method_signature": "AgentMotionTest.getAngular()", "testcase": true, "constructor": false, "invocations": ["nextDouble", "getRandom", "nextDouble", "getRandom", "nextDouble", "getRandom", "assertEpsilonEquals", "getAngular"]}, "focal_class": {"identifier": "AgentMotion", "superclass": "", "interfaces": "implements Serializable, Cloneable", "fields": [{"original_string": "private static final long serialVersionUID = 8733139573585094484L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 8733139573585094484L", "var_name": "serialVersionUID"}, {"original_string": "private Vector2d linear = new Vector2d();", "modifier": "private", "type": "Vector2d", "declarator": "linear = new Vector2d()", "var_name": "linear"}, {"original_string": "private double angular;", "modifier": "private", "type": "double", "declarator": "angular", "var_name": "angular"}], "methods": [{"identifier": "AgentMotion", "parameters": "()", "modifiers": "public", "return": "", "signature": " AgentMotion()", "full_signature": "public  AgentMotion()", "class_method_signature": "AgentMotion.AgentMotion()", "testcase": false, "constructor": true}, {"identifier": "AgentMotion", "parameters": "(AgentMotion outputToCopy)", "modifiers": "public", "return": "", "signature": " AgentMotion(AgentMotion outputToCopy)", "full_signature": "public  AgentMotion(AgentMotion outputToCopy)", "class_method_signature": "AgentMotion.AgentMotion(AgentMotion outputToCopy)", "testcase": false, "constructor": true}, {"identifier": "AgentMotion", "parameters": "(double angularMotion)", "modifiers": "public", "return": "", "signature": " AgentMotion(double angularMotion)", "full_signature": "public  AgentMotion(double angularMotion)", "class_method_signature": "AgentMotion.AgentMotion(double angularMotion)", "testcase": false, "constructor": true}, {"identifier": "AgentMotion", "parameters": "(double linearx, double lineary)", "modifiers": "public", "return": "", "signature": " AgentMotion(double linearx, double lineary)", "full_signature": "public  AgentMotion(double linearx, double lineary)", "class_method_signature": "AgentMotion.AgentMotion(double linearx, double lineary)", "testcase": false, "constructor": true}, {"identifier": "AgentMotion", "parameters": "(double linearx, double lineary, double angularMotion)", "modifiers": "public", "return": "", "signature": " AgentMotion(double linearx, double lineary, double angularMotion)", "full_signature": "public  AgentMotion(double linearx, double lineary, double angularMotion)", "class_method_signature": "AgentMotion.AgentMotion(double linearx, double lineary, double angularMotion)", "testcase": false, "constructor": true}, {"identifier": "AgentMotion", "parameters": "(Vector2D<?, ?> linearMotion)", "modifiers": "public", "return": "", "signature": " AgentMotion(Vector2D<?, ?> linearMotion)", "full_signature": "public  AgentMotion(Vector2D<?, ?> linearMotion)", "class_method_signature": "AgentMotion.AgentMotion(Vector2D<?, ?> linearMotion)", "testcase": false, "constructor": true}, {"identifier": "AgentMotion", "parameters": "(Vector2D<?, ?> linearMotion, double angularMotion)", "modifiers": "public", "return": "", "signature": " AgentMotion(Vector2D<?, ?> linearMotion, double angularMotion)", "full_signature": "public  AgentMotion(Vector2D<?, ?> linearMotion, double angularMotion)", "class_method_signature": "AgentMotion.AgentMotion(Vector2D<?, ?> linearMotion, double angularMotion)", "testcase": false, "constructor": true}, {"identifier": "minus", "parameters": "(AgentMotion motion)", "modifiers": "@Pure @ScalaOperator(\"-\") public", "return": "AgentMotion", "signature": "AgentMotion minus(AgentMotion motion)", "full_signature": "@Pure @ScalaOperator(\"-\") public AgentMotion minus(AgentMotion motion)", "class_method_signature": "AgentMotion.minus(AgentMotion motion)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(double motion)", "modifiers": "@Pure @ScalaOperator(\"-\") public", "return": "AgentMotion", "signature": "AgentMotion minus(double motion)", "full_signature": "@Pure @ScalaOperator(\"-\") public AgentMotion minus(double motion)", "class_method_signature": "AgentMotion.minus(double motion)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(Vector2D<?, ?> motion)", "modifiers": "@Pure @ScalaOperator(\"-\") public", "return": "AgentMotion", "signature": "AgentMotion minus(Vector2D<?, ?> motion)", "full_signature": "@Pure @ScalaOperator(\"-\") public AgentMotion minus(Vector2D<?, ?> motion)", "class_method_signature": "AgentMotion.minus(Vector2D<?, ?> motion)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(AgentMotion motion)", "modifiers": "@Pure @ScalaOperator(\"+\") public", "return": "AgentMotion", "signature": "AgentMotion plus(AgentMotion motion)", "full_signature": "@Pure @ScalaOperator(\"+\") public AgentMotion plus(AgentMotion motion)", "class_method_signature": "AgentMotion.plus(AgentMotion motion)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(double motion)", "modifiers": "@Pure @ScalaOperator(\"+\") public", "return": "AgentMotion", "signature": "AgentMotion plus(double motion)", "full_signature": "@Pure @ScalaOperator(\"+\") public AgentMotion plus(double motion)", "class_method_signature": "AgentMotion.plus(double motion)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(Vector2D<?, ?> motion)", "modifiers": "@Pure @ScalaOperator(\"+\") public", "return": "AgentMotion", "signature": "AgentMotion plus(Vector2D<?, ?> motion)", "full_signature": "@Pure @ScalaOperator(\"+\") public AgentMotion plus(Vector2D<?, ?> motion)", "class_method_signature": "AgentMotion.plus(Vector2D<?, ?> motion)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Pure @Override public", "return": "AgentMotion", "signature": "AgentMotion clone()", "full_signature": "@Pure @Override public AgentMotion clone()", "class_method_signature": "AgentMotion.clone()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Pure @Override public boolean equals(Object obj)", "class_method_signature": "AgentMotion.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getAngular", "parameters": "()", "modifiers": "@Pure public", "return": "double", "signature": "double getAngular()", "full_signature": "@Pure public double getAngular()", "class_method_signature": "AgentMotion.getAngular()", "testcase": false, "constructor": false}, {"identifier": "getLinear", "parameters": "()", "modifiers": "@Pure public", "return": "Vector2D<?, ?>", "signature": "Vector2D<?, ?> getLinear()", "full_signature": "@Pure public Vector2D<?, ?> getLinear()", "class_method_signature": "AgentMotion.getLinear()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Pure @Override public int hashCode()", "class_method_signature": "AgentMotion.hashCode()", "testcase": false, "constructor": false}, {"identifier": "operator_add", "parameters": "(AgentMotion motion)", "modifiers": "@Pure @XtextOperator(\"+=\") public", "return": "void", "signature": "void operator_add(AgentMotion motion)", "full_signature": "@Pure @XtextOperator(\"+=\") public void operator_add(AgentMotion motion)", "class_method_signature": "AgentMotion.operator_add(AgentMotion motion)", "testcase": false, "constructor": false}, {"identifier": "operator_add", "parameters": "(double motion)", "modifiers": "@Pure @XtextOperator(\"+=\") public", "return": "void", "signature": "void operator_add(double motion)", "full_signature": "@Pure @XtextOperator(\"+=\") public void operator_add(double motion)", "class_method_signature": "AgentMotion.operator_add(double motion)", "testcase": false, "constructor": false}, {"identifier": "operator_add", "parameters": "(Vector2D<?, ?> motion)", "modifiers": "@Pure @XtextOperator(\"+=\") public", "return": "void", "signature": "void operator_add(Vector2D<?, ?> motion)", "full_signature": "@Pure @XtextOperator(\"+=\") public void operator_add(Vector2D<?, ?> motion)", "class_method_signature": "AgentMotion.operator_add(Vector2D<?, ?> motion)", "testcase": false, "constructor": false}, {"identifier": "operator_minus", "parameters": "(AgentMotion motion)", "modifiers": "@Pure @XtextOperator(\"-\") public", "return": "AgentMotion", "signature": "AgentMotion operator_minus(AgentMotion motion)", "full_signature": "@Pure @XtextOperator(\"-\") public AgentMotion operator_minus(AgentMotion motion)", "class_method_signature": "AgentMotion.operator_minus(AgentMotion motion)", "testcase": false, "constructor": false}, {"identifier": "operator_minus", "parameters": "(double motion)", "modifiers": "@Pure @XtextOperator(\"-\") public", "return": "AgentMotion", "signature": "AgentMotion operator_minus(double motion)", "full_signature": "@Pure @XtextOperator(\"-\") public AgentMotion operator_minus(double motion)", "class_method_signature": "AgentMotion.operator_minus(double motion)", "testcase": false, "constructor": false}, {"identifier": "operator_minus", "parameters": "(Vector2D<?, ?> motion)", "modifiers": "@Pure @XtextOperator(\"-\") public", "return": "AgentMotion", "signature": "AgentMotion operator_minus(Vector2D<?, ?> motion)", "full_signature": "@Pure @XtextOperator(\"-\") public AgentMotion operator_minus(Vector2D<?, ?> motion)", "class_method_signature": "AgentMotion.operator_minus(Vector2D<?, ?> motion)", "testcase": false, "constructor": false}, {"identifier": "operator_plus", "parameters": "(AgentMotion motion)", "modifiers": "@Pure @XtextOperator(\"+\") public", "return": "AgentMotion", "signature": "AgentMotion operator_plus(AgentMotion motion)", "full_signature": "@Pure @XtextOperator(\"+\") public AgentMotion operator_plus(AgentMotion motion)", "class_method_signature": "AgentMotion.operator_plus(AgentMotion motion)", "testcase": false, "constructor": false}, {"identifier": "operator_plus", "parameters": "(double motion)", "modifiers": "@Pure @XtextOperator(\"+\") public", "return": "AgentMotion", "signature": "AgentMotion operator_plus(double motion)", "full_signature": "@Pure @XtextOperator(\"+\") public AgentMotion operator_plus(double motion)", "class_method_signature": "AgentMotion.operator_plus(double motion)", "testcase": false, "constructor": false}, {"identifier": "operator_plus", "parameters": "(Vector2D<?, ?> motion)", "modifiers": "@Pure @XtextOperator(\"+\") public", "return": "AgentMotion", "signature": "AgentMotion operator_plus(Vector2D<?, ?> motion)", "full_signature": "@Pure @XtextOperator(\"+\") public AgentMotion operator_plus(Vector2D<?, ?> motion)", "class_method_signature": "AgentMotion.operator_plus(Vector2D<?, ?> motion)", "testcase": false, "constructor": false}, {"identifier": "operator_remove", "parameters": "(AgentMotion motion)", "modifiers": "@Pure @XtextOperator(\"-=\") public", "return": "void", "signature": "void operator_remove(AgentMotion motion)", "full_signature": "@Pure @XtextOperator(\"-=\") public void operator_remove(AgentMotion motion)", "class_method_signature": "AgentMotion.operator_remove(AgentMotion motion)", "testcase": false, "constructor": false}, {"identifier": "operator_remove", "parameters": "(double motion)", "modifiers": "@Pure @XtextOperator(\"-=\") public", "return": "void", "signature": "void operator_remove(double motion)", "full_signature": "@Pure @XtextOperator(\"-=\") public void operator_remove(double motion)", "class_method_signature": "AgentMotion.operator_remove(double motion)", "testcase": false, "constructor": false}, {"identifier": "operator_remove", "parameters": "(Vector2D<?, ?> motion)", "modifiers": "@Pure @XtextOperator(\"-=\") public", "return": "void", "signature": "void operator_remove(Vector2D<?, ?> motion)", "full_signature": "@Pure @XtextOperator(\"-=\") public void operator_remove(Vector2D<?, ?> motion)", "class_method_signature": "AgentMotion.operator_remove(Vector2D<?, ?> motion)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(AgentMotion motionToCopy)", "modifiers": "public", "return": "void", "signature": "void set(AgentMotion motionToCopy)", "full_signature": "public void set(AgentMotion motionToCopy)", "class_method_signature": "AgentMotion.set(AgentMotion motionToCopy)", "testcase": false, "constructor": false}, {"identifier": "setAngular", "parameters": "(AgentMotion motionToCopy)", "modifiers": "public", "return": "void", "signature": "void setAngular(AgentMotion motionToCopy)", "full_signature": "public void setAngular(AgentMotion motionToCopy)", "class_method_signature": "AgentMotion.setAngular(AgentMotion motionToCopy)", "testcase": false, "constructor": false}, {"identifier": "setAngular", "parameters": "(double angular)", "modifiers": "public", "return": "void", "signature": "void setAngular(double angular)", "full_signature": "public void setAngular(double angular)", "class_method_signature": "AgentMotion.setAngular(double angular)", "testcase": false, "constructor": false}, {"identifier": "setLinear", "parameters": "(AgentMotion motionToCopy)", "modifiers": "public", "return": "void", "signature": "void setLinear(AgentMotion motionToCopy)", "full_signature": "public void setLinear(AgentMotion motionToCopy)", "class_method_signature": "AgentMotion.setLinear(AgentMotion motionToCopy)", "testcase": false, "constructor": false}, {"identifier": "setLinear", "parameters": "(double dx, double dy)", "modifiers": "public", "return": "void", "signature": "void setLinear(double dx, double dy)", "full_signature": "public void setLinear(double dx, double dy)", "class_method_signature": "AgentMotion.setLinear(double dx, double dy)", "testcase": false, "constructor": false}, {"identifier": "setLinear", "parameters": "(Vector2D<?, ?> linear)", "modifiers": "public", "return": "void", "signature": "void setLinear(Vector2D<?, ?> linear)", "full_signature": "public void setLinear(Vector2D<?, ?> linear)", "class_method_signature": "AgentMotion.setLinear(Vector2D<?, ?> linear)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Pure @Override public", "return": "String", "signature": "String toString()", "full_signature": "@Pure @Override public String toString()", "class_method_signature": "AgentMotion.toString()", "testcase": false, "constructor": false}], "file": "advanced/agentmotion/src/main/java/org/arakhne/afc/agentmotion/AgentMotion.java"}, "focal_method": {"identifier": "getAngular", "parameters": "()", "modifiers": "@Pure public", "return": "double", "body": "@Pure\n\tpublic double getAngular() {\n\t\treturn this.angular;\n\t}", "signature": "double getAngular()", "full_signature": "@Pure public double getAngular()", "class_method_signature": "AgentMotion.getAngular()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}