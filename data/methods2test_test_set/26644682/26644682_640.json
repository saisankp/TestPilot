{"test_class": {"identifier": "SplitReplaceOnValueActionTest", "superclass": "extends Base_2_1_0_PE_Test", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SplitReplaceOnValueAction task;", "modifier": "@Autowired\n    private", "type": "SplitReplaceOnValueAction", "declarator": "task", "var_name": "task"}, {"original_string": "@Autowired\n    private PreparationRepository repository;", "modifier": "@Autowired\n    private", "type": "PreparationRepository", "declarator": "repository", "var_name": "repository"}], "file": "dataprep-upgrade/src/test/java/org/talend/dataprep/upgrade/to_2_1_0_PE/SplitReplaceOnValueActionTest.java"}, "test_case": {"identifier": "shouldSplitActions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSplitActions() {\n\n        // when\n        task.run();\n\n        // then\n        final List<PreparationActions> prepActionsList =\n                repository.list(PreparationActions.class).collect(Collectors.toList());\n\n        int actionUpdated = 0;\n        int actionNotUpdated = 0;\n        for (PreparationActions prepActions : prepActionsList) {\n            for (Action action : prepActions.getActions()) {\n                if (REPLACE_CELL_VALUE.equals(action.getName())) {\n                    final Map<String, String> parameters = action.getParameters();\n                    assertTrue(parameters.containsKey(\"new_value\"));\n                    assertTrue(parameters.containsKey(\"original_value\"));\n                    assertFalse(parameters.containsKey(CELL_VALUE));\n                    assertFalse(parameters.containsKey(REPLACE_VALUE));\n                    actionUpdated++;\n                } else {\n                    actionNotUpdated++;\n                }\n            }\n        }\n\n        assertEquals(1, actionUpdated);\n        assertEquals(33, actionNotUpdated);\n\n    }", "signature": "void shouldSplitActions()", "full_signature": "@Test public void shouldSplitActions()", "class_method_signature": "SplitReplaceOnValueActionTest.shouldSplitActions()", "testcase": true, "constructor": false, "invocations": ["run", "collect", "list", "toList", "getActions", "equals", "getName", "getParameters", "assertTrue", "containsKey", "assertTrue", "containsKey", "assertFalse", "containsKey", "assertFalse", "containsKey", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "SplitReplaceOnValueAction", "superclass": "", "interfaces": "implements BaseUpgradeTaskTo_2_1_0_PE", "fields": [{"original_string": "private static final Logger LOGGER = getLogger(SplitReplaceOnValueAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = getLogger(SplitReplaceOnValueAction.class)", "var_name": "LOGGER"}, {"original_string": "private static final String REPLACE_ON_VALUE = \"replace_on_value\";", "modifier": "private static final", "type": "String", "declarator": "REPLACE_ON_VALUE = \"replace_on_value\"", "var_name": "REPLACE_ON_VALUE"}, {"original_string": "private static final String CELL = \"cell\";", "modifier": "private static final", "type": "String", "declarator": "CELL = \"cell\"", "var_name": "CELL"}, {"original_string": "static final String CELL_VALUE = \"cell_value\";", "modifier": "static final", "type": "String", "declarator": "CELL_VALUE = \"cell_value\"", "var_name": "CELL_VALUE"}, {"original_string": "static final String REPLACE_VALUE = \"replace_value\";", "modifier": "static final", "type": "String", "declarator": "REPLACE_VALUE = \"replace_value\"", "var_name": "REPLACE_VALUE"}, {"original_string": "static final String REPLACE_CELL_VALUE = \"replace_cell_value\";", "modifier": "static final", "type": "String", "declarator": "REPLACE_CELL_VALUE = \"replace_cell_value\"", "var_name": "REPLACE_CELL_VALUE"}, {"original_string": "@Autowired\n    private PreparationRepository preparationRepository;", "modifier": "@Autowired\n    private", "type": "PreparationRepository", "declarator": "preparationRepository", "var_name": "preparationRepository"}, {"original_string": "@Autowired\n    private ObjectMapper mapper;", "modifier": "@Autowired\n    private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "SplitReplaceOnValueAction.init()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "SplitReplaceOnValueAction.run()", "testcase": false, "constructor": false}, {"identifier": "updateActionParameters", "parameters": "(Map<String, String> parameters)", "modifiers": "private", "return": "void", "signature": "void updateActionParameters(Map<String, String> parameters)", "full_signature": "private void updateActionParameters(Map<String, String> parameters)", "class_method_signature": "SplitReplaceOnValueAction.updateActionParameters(Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "buildDefaultCellValueNode", "parameters": "(String cellValue)", "modifiers": "private", "return": "JsonNode", "signature": "JsonNode buildDefaultCellValueNode(String cellValue)", "full_signature": "private JsonNode buildDefaultCellValueNode(String cellValue)", "class_method_signature": "SplitReplaceOnValueAction.buildDefaultCellValueNode(String cellValue)", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getOrder()", "full_signature": "@Override public int getOrder()", "class_method_signature": "SplitReplaceOnValueAction.getOrder()", "testcase": false, "constructor": false}, {"identifier": "getTarget", "parameters": "()", "modifiers": "@Override public", "return": "UpgradeTask.target", "signature": "UpgradeTask.target getTarget()", "full_signature": "@Override public UpgradeTask.target getTarget()", "class_method_signature": "SplitReplaceOnValueAction.getTarget()", "testcase": false, "constructor": false}], "file": "dataprep-upgrade/src/main/java/org/talend/dataprep/upgrade/to_2_1_0_PE/SplitReplaceOnValueAction.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n\n        final Stream<PreparationActions> preparationActionsStream =\n                preparationRepository.list(PreparationActions.class).filter(p -> p.getActions().stream().anyMatch(\n                        a -> REPLACE_ON_VALUE.equals(a.getName()) && CELL.equals(a.getParameters().get(\"scope\"))));\n\n        AtomicLong actionsUpdated = new AtomicLong(0);\n        preparationActionsStream.forEach(currentPrepActions -> {\n            final List<Action> actions = currentPrepActions.getActions();\n            boolean updatePrepActions = false;\n            for (Action action : actions) {\n                final Map<String, String> parameters = action.getParameters();\n                // only deal with replace_on_value with scope cell\n                if (REPLACE_ON_VALUE.equals(action.getName()) && CELL.equals(parameters.get(\"scope\"))) {\n                    // rename action\n                    action.setName(REPLACE_CELL_VALUE);\n                    // update parameters\n                    updateActionParameters(parameters);\n                    updatePrepActions = true;\n                }\n            }\n            // only save updated preparation actions\n            if (updatePrepActions) {\n                preparationRepository.add(currentPrepActions);\n                actionsUpdated.getAndIncrement();\n            }\n        });\n\n        LOGGER.info(\"'Replace On Value' implementations were successfully split, {} action(s) updated\", actionsUpdated);\n\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "SplitReplaceOnValueAction.run()", "testcase": false, "constructor": false, "invocations": ["filter", "list", "anyMatch", "stream", "getActions", "equals", "getName", "equals", "get", "getParameters", "forEach", "getActions", "getParameters", "equals", "getName", "equals", "get", "setName", "updateActionParameters", "add", "getAndIncrement", "info"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}