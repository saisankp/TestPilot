{"test_class": {"identifier": "TagDaoHelperTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private TagDaoHelper tagDaoHelper;", "modifier": "@InjectMocks\n    private", "type": "TagDaoHelper", "declarator": "tagDaoHelper", "var_name": "tagDaoHelper"}, {"original_string": "@Mock\n    private ConfigurationHelper configurationHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Mock\n    private TagDao tagDao;", "modifier": "@Mock\n    private", "type": "TagDao", "declarator": "tagDao", "var_name": "tagDao"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/helper/TagDaoHelperTest.java"}, "test_case": {"identifier": "testValidateParentTagType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateParentTagType()\n    {\n        try\n        {\n            // Call the method under test\n            tagDaoHelper.validateParentTagType(TAG_TYPE_CODE, TAG_TYPE_CODE);\n        }\n        catch (IllegalArgumentException illegalArgumentException)\n        {\n            // Confirm the exception does not occur\n            fail(\"Should not have caught an exception.\");\n        }\n    }", "signature": "void testValidateParentTagType()", "full_signature": "@Test public void testValidateParentTagType()", "class_method_signature": "TagDaoHelperTest.testValidateParentTagType()", "testcase": true, "constructor": false, "invocations": ["validateParentTagType", "fail"]}, "focal_class": {"identifier": "TagDaoHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private TagDao tagDao;", "modifier": "@Autowired\n    private", "type": "TagDao", "declarator": "tagDao", "var_name": "tagDao"}], "methods": [{"identifier": "assertDisplayNameDoesNotExistForTag", "parameters": "(String tagCode, String displayName)", "modifiers": "public", "return": "void", "signature": "void assertDisplayNameDoesNotExistForTag(String tagCode, String displayName)", "full_signature": "public void assertDisplayNameDoesNotExistForTag(String tagCode, String displayName)", "class_method_signature": "TagDaoHelper.assertDisplayNameDoesNotExistForTag(String tagCode, String displayName)", "testcase": false, "constructor": false}, {"identifier": "getTagChildrenEntities", "parameters": "(TagEntity parentTagEntity)", "modifiers": "public", "return": "List<TagEntity>", "signature": "List<TagEntity> getTagChildrenEntities(TagEntity parentTagEntity)", "full_signature": "public List<TagEntity> getTagChildrenEntities(TagEntity parentTagEntity)", "class_method_signature": "TagDaoHelper.getTagChildrenEntities(TagEntity parentTagEntity)", "testcase": false, "constructor": false}, {"identifier": "getTagEntity", "parameters": "(TagKey tagKey)", "modifiers": "public", "return": "TagEntity", "signature": "TagEntity getTagEntity(TagKey tagKey)", "full_signature": "public TagEntity getTagEntity(TagKey tagKey)", "class_method_signature": "TagDaoHelper.getTagEntity(TagKey tagKey)", "testcase": false, "constructor": false}, {"identifier": "validateParentTagEntity", "parameters": "(TagEntity tagEntity, TagEntity parentTagEntity)", "modifiers": "public", "return": "void", "signature": "void validateParentTagEntity(TagEntity tagEntity, TagEntity parentTagEntity)", "full_signature": "public void validateParentTagEntity(TagEntity tagEntity, TagEntity parentTagEntity)", "class_method_signature": "TagDaoHelper.validateParentTagEntity(TagEntity tagEntity, TagEntity parentTagEntity)", "testcase": false, "constructor": false}, {"identifier": "validateParentTagType", "parameters": "(String tagTypeCode, String parentTagTypeCode)", "modifiers": "public", "return": "void", "signature": "void validateParentTagType(String tagTypeCode, String parentTagTypeCode)", "full_signature": "public void validateParentTagType(String tagTypeCode, String parentTagTypeCode)", "class_method_signature": "TagDaoHelper.validateParentTagType(String tagTypeCode, String parentTagTypeCode)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/helper/TagDaoHelper.java"}, "focal_method": {"identifier": "validateParentTagType", "parameters": "(String tagTypeCode, String parentTagTypeCode)", "modifiers": "public", "return": "void", "body": "public void validateParentTagType(String tagTypeCode, String parentTagTypeCode)\n    {\n        Assert.isTrue(tagTypeCode.equalsIgnoreCase(parentTagTypeCode), \"Tag type code in parent tag key must match the tag type code in the request.\");\n    }", "signature": "void validateParentTagType(String tagTypeCode, String parentTagTypeCode)", "full_signature": "public void validateParentTagType(String tagTypeCode, String parentTagTypeCode)", "class_method_signature": "TagDaoHelper.validateParentTagType(String tagTypeCode, String parentTagTypeCode)", "testcase": false, "constructor": false, "invocations": ["isTrue", "equalsIgnoreCase"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}