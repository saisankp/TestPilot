{"test_class": {"identifier": "CMapAwareDocumentFontTest", "superclass": "", "interfaces": "", "fields": [], "file": "itext/src/test/java/com/itextpdf/text/pdf/CMapAwareDocumentFontTest.java"}, "test_case": {"identifier": "testWidths", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWidths() throws Exception{\n        final PdfReader pdfReader = TestResourceUtils.getResourceAsPdfReader(this, \"fontwithwidthissue.pdf\");\n\n        try {\n            PdfDictionary fontsDic = pdfReader.getPageN(1).getAsDict(PdfName.RESOURCES).getAsDict(PdfName.FONT);\n            PRIndirectReference fontDicIndirect = (PRIndirectReference)fontsDic.get(new PdfName(\"F1\"));\n            \n            CMapAwareDocumentFont f = new CMapAwareDocumentFont(fontDicIndirect);\n            Assert.assertTrue(\"Width should not be 0\", f.getWidth('h') != 0);\n        } finally {\n            pdfReader.close();\n        }\n    }", "signature": "void testWidths()", "full_signature": "@Test public void testWidths()", "class_method_signature": "CMapAwareDocumentFontTest.testWidths()", "testcase": true, "constructor": false, "invocations": ["getResourceAsPdfReader", "getAsDict", "getAsDict", "getPageN", "get", "assertTrue", "getWidth", "close"]}, "focal_class": {"identifier": "CMapAwareDocumentFont", "superclass": "extends DocumentFont", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CMapAwareDocumentFont.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CMapAwareDocumentFont.class)", "var_name": "LOGGER"}, {"original_string": "private PdfDictionary fontDic;", "modifier": "private", "type": "PdfDictionary", "declarator": "fontDic", "var_name": "fontDic"}, {"original_string": "private int spaceWidth;", "modifier": "private", "type": "int", "declarator": "spaceWidth", "var_name": "spaceWidth"}, {"original_string": "private CMapToUnicode toUnicodeCmap;", "modifier": "private", "type": "CMapToUnicode", "declarator": "toUnicodeCmap", "var_name": "toUnicodeCmap"}, {"original_string": "private CMapByteCid byteCid;", "modifier": "private", "type": "CMapByteCid", "declarator": "byteCid", "var_name": "byteCid"}, {"original_string": "private CMapCidUni cidUni;", "modifier": "private", "type": "CMapCidUni", "declarator": "cidUni", "var_name": "cidUni"}, {"original_string": "private char[] cidbyte2uni;", "modifier": "private", "type": "char[]", "declarator": "cidbyte2uni", "var_name": "cidbyte2uni"}, {"original_string": "private Map<Integer,Integer> uni2cid;", "modifier": "private", "type": "Map<Integer,Integer>", "declarator": "uni2cid", "var_name": "uni2cid"}], "methods": [{"identifier": "CMapAwareDocumentFont", "parameters": "(PdfDictionary font)", "modifiers": "public", "return": "", "signature": " CMapAwareDocumentFont(PdfDictionary font)", "full_signature": "public  CMapAwareDocumentFont(PdfDictionary font)", "class_method_signature": "CMapAwareDocumentFont.CMapAwareDocumentFont(PdfDictionary font)", "testcase": false, "constructor": true}, {"identifier": "CMapAwareDocumentFont", "parameters": "(PRIndirectReference refFont)", "modifiers": "public", "return": "", "signature": " CMapAwareDocumentFont(PRIndirectReference refFont)", "full_signature": "public  CMapAwareDocumentFont(PRIndirectReference refFont)", "class_method_signature": "CMapAwareDocumentFont.CMapAwareDocumentFont(PRIndirectReference refFont)", "testcase": false, "constructor": true}, {"identifier": "initFont", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initFont()", "full_signature": "private void initFont()", "class_method_signature": "CMapAwareDocumentFont.initFont()", "testcase": false, "constructor": false}, {"identifier": "processToUnicode", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processToUnicode()", "full_signature": "private void processToUnicode()", "class_method_signature": "CMapAwareDocumentFont.processToUnicode()", "testcase": false, "constructor": false}, {"identifier": "processUni2Byte", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processUni2Byte()", "full_signature": "private void processUni2Byte()", "class_method_signature": "CMapAwareDocumentFont.processUni2Byte()", "testcase": false, "constructor": false}, {"identifier": "computeAverageWidth", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int computeAverageWidth()", "full_signature": "private int computeAverageWidth()", "class_method_signature": "CMapAwareDocumentFont.computeAverageWidth()", "testcase": false, "constructor": false}, {"identifier": "getWidth", "parameters": "(int char1)", "modifiers": "@Override public", "return": "int", "signature": "int getWidth(int char1)", "full_signature": "@Override public int getWidth(int char1)", "class_method_signature": "CMapAwareDocumentFont.getWidth(int char1)", "testcase": false, "constructor": false}, {"identifier": "decodeSingleCID", "parameters": "(byte[] bytes, int offset, int len)", "modifiers": "private", "return": "String", "signature": "String decodeSingleCID(byte[] bytes, int offset, int len)", "full_signature": "private String decodeSingleCID(byte[] bytes, int offset, int len)", "class_method_signature": "CMapAwareDocumentFont.decodeSingleCID(byte[] bytes, int offset, int len)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] cidbytes, final int offset, final int len)", "modifiers": "public", "return": "String", "signature": "String decode(byte[] cidbytes, final int offset, final int len)", "full_signature": "public String decode(byte[] cidbytes, final int offset, final int len)", "class_method_signature": "CMapAwareDocumentFont.decode(byte[] cidbytes, final int offset, final int len)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(byte[] bytes, int offset, int len)", "modifiers": "public", "return": "String", "signature": "String encode(byte[] bytes, int offset, int len)", "full_signature": "public String encode(byte[] bytes, int offset, int len)", "class_method_signature": "CMapAwareDocumentFont.encode(byte[] bytes, int offset, int len)", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/pdf/CMapAwareDocumentFont.java"}, "focal_method": {"identifier": "getWidth", "parameters": "(int char1)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int getWidth(int char1) {\n        if (char1 == ' ')\n            return spaceWidth != 0 ? spaceWidth : defaultWidth;\n        return super.getWidth(char1);\n    }", "signature": "int getWidth(int char1)", "full_signature": "@Override public int getWidth(int char1)", "class_method_signature": "CMapAwareDocumentFont.getWidth(int char1)", "testcase": false, "constructor": false, "invocations": ["getWidth"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}