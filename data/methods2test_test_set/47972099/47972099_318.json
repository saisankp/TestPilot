{"test_class": {"identifier": "BufferReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/api/reader/BufferReaderTest.java"}, "test_case": {"identifier": "testGetNextBufferOrEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetNextBufferOrEvent() throws IOException, InterruptedException {\n\n\t\tfinal TestSingleInputGate inputGate = new TestSingleInputGate(1)\n\t\t\t\t.readBuffer().readBuffer().readEvent()\n\t\t\t\t.readBuffer().readBuffer().readEvent()\n\t\t\t\t.readBuffer().readEndOfPartitionEvent();\n\n\t\tfinal BufferReader reader = new BufferReader(inputGate.getInputGate());\n\n\t\t// Task event listener to be notified...\n\t\tfinal EventListener<TaskEvent> listener = mock(EventListener.class);\n\t\treader.registerTaskEventListener(listener, TestTaskEvent.class);\n\n\t\tint numReadBuffers = 0;\n\t\twhile ((reader.getNextBuffer()) != null) {\n\t\t\tnumReadBuffers++;\n\t\t}\n\n\t\tassertEquals(5, numReadBuffers);\n\t\tverify(listener, times(2)).onEvent(any(TaskEvent.class));\n\t}", "signature": "void testGetNextBufferOrEvent()", "full_signature": "@Test public void testGetNextBufferOrEvent()", "class_method_signature": "BufferReaderTest.testGetNextBufferOrEvent()", "testcase": true, "constructor": false, "invocations": ["readEndOfPartitionEvent", "readBuffer", "readEvent", "readBuffer", "readBuffer", "readEvent", "readBuffer", "readBuffer", "getInputGate", "mock", "registerTaskEventListener", "getNextBuffer", "assertEquals", "onEvent", "verify", "times", "any"]}, "focal_class": {"identifier": "BufferReader", "superclass": "extends AbstractReader", "interfaces": "", "fields": [], "methods": [{"identifier": "BufferReader", "parameters": "(InputGate gate)", "modifiers": "public", "return": "", "signature": " BufferReader(InputGate gate)", "full_signature": "public  BufferReader(InputGate gate)", "class_method_signature": "BufferReader.BufferReader(InputGate gate)", "testcase": false, "constructor": true}, {"identifier": "getNextBuffer", "parameters": "()", "modifiers": "public", "return": "Buffer", "signature": "Buffer getNextBuffer()", "full_signature": "public Buffer getNextBuffer()", "class_method_signature": "BufferReader.getNextBuffer()", "testcase": false, "constructor": false}, {"identifier": "setReporter", "parameters": "(AccumulatorRegistry.Reporter reporter)", "modifiers": "@Override public", "return": "void", "signature": "void setReporter(AccumulatorRegistry.Reporter reporter)", "full_signature": "@Override public void setReporter(AccumulatorRegistry.Reporter reporter)", "class_method_signature": "BufferReader.setReporter(AccumulatorRegistry.Reporter reporter)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/reader/BufferReader.java"}, "focal_method": {"identifier": "getNextBuffer", "parameters": "()", "modifiers": "public", "return": "Buffer", "body": "public Buffer getNextBuffer() throws IOException, InterruptedException {\n\t\twhile (true) {\n\t\t\tfinal BufferOrEvent bufferOrEvent = inputGate.getNextBufferOrEvent();\n\n\t\t\tif (bufferOrEvent.isBuffer()) {\n\t\t\t\treturn bufferOrEvent.getBuffer();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (handleEvent(bufferOrEvent.getEvent())) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "signature": "Buffer getNextBuffer()", "full_signature": "public Buffer getNextBuffer()", "class_method_signature": "BufferReader.getNextBuffer()", "testcase": false, "constructor": false, "invocations": ["getNextBufferOrEvent", "isBuffer", "getBuffer", "handleEvent", "getEvent"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}