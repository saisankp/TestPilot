{"test_class": {"identifier": "MergeParametersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private SingleTaskOutput output;", "modifier": "private", "type": "SingleTaskOutput", "declarator": "output", "var_name": "output"}], "file": "sejda-model/src/test/java/org/sejda/model/parameter/MergeParametersTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        MergeParameters eq1 = new MergeParameters();\n        MergeParameters eq2 = new MergeParameters();\n        MergeParameters eq3 = new MergeParameters();\n        MergeParameters diff = new MergeParameters();\n        diff.setBlankPageIfOdd(true);\n        diff.setAcroFormPolicy(AcroFormPolicy.MERGE);\n        TestUtils.testEqualsAndHashCodes(eq1, eq2, eq3, diff);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "MergeParametersTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["setBlankPageIfOdd", "setAcroFormPolicy", "testEqualsAndHashCodes"]}, "focal_class": {"identifier": "MergeParameters", "superclass": "extends BaseMergeParameters<MergeInput>", "interfaces": "", "fields": [{"original_string": "private boolean blankPageIfOdd = false;", "modifier": "private", "type": "boolean", "declarator": "blankPageIfOdd = false", "var_name": "blankPageIfOdd"}, {"original_string": "@NotNull\n    private OutlinePolicy outlinePolicy = OutlinePolicy.RETAIN;", "modifier": "@NotNull\n    private", "type": "OutlinePolicy", "declarator": "outlinePolicy = OutlinePolicy.RETAIN", "var_name": "outlinePolicy"}, {"original_string": "@NotNull\n    private AcroFormPolicy acroFormPolicy = AcroFormPolicy.MERGE_RENAMING_EXISTING_FIELDS;", "modifier": "@NotNull\n    private", "type": "AcroFormPolicy", "declarator": "acroFormPolicy = AcroFormPolicy.MERGE_RENAMING_EXISTING_FIELDS", "var_name": "acroFormPolicy"}, {"original_string": "@NotNull\n    private CatalogPageLabelsPolicy catalogPageLabelsPolicy = CatalogPageLabelsPolicy.DISCARD;", "modifier": "@NotNull\n    private", "type": "CatalogPageLabelsPolicy", "declarator": "catalogPageLabelsPolicy = CatalogPageLabelsPolicy.DISCARD", "var_name": "catalogPageLabelsPolicy"}, {"original_string": "@NotNull\n    private ToCPolicy tocPolicy = ToCPolicy.NONE;", "modifier": "@NotNull\n    private", "type": "ToCPolicy", "declarator": "tocPolicy = ToCPolicy.NONE", "var_name": "tocPolicy"}, {"original_string": "private boolean filenameFooter = false;", "modifier": "private", "type": "boolean", "declarator": "filenameFooter = false", "var_name": "filenameFooter"}, {"original_string": "private boolean normalizePageSizes = false;", "modifier": "private", "type": "boolean", "declarator": "normalizePageSizes = false", "var_name": "normalizePageSizes"}, {"original_string": "private boolean firstInputCoverTitle = false;", "modifier": "private", "type": "boolean", "declarator": "firstInputCoverTitle = false", "var_name": "firstInputCoverTitle"}, {"original_string": "@Valid\n    private List<Rotation> rotations = new ArrayList<>();", "modifier": "@Valid\n    private", "type": "List<Rotation>", "declarator": "rotations = new ArrayList<>()", "var_name": "rotations"}], "methods": [{"identifier": "isBlankPageIfOdd", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBlankPageIfOdd()", "full_signature": "public boolean isBlankPageIfOdd()", "class_method_signature": "MergeParameters.isBlankPageIfOdd()", "testcase": false, "constructor": false}, {"identifier": "setBlankPageIfOdd", "parameters": "(boolean blankPageIfOdd)", "modifiers": "public", "return": "void", "signature": "void setBlankPageIfOdd(boolean blankPageIfOdd)", "full_signature": "public void setBlankPageIfOdd(boolean blankPageIfOdd)", "class_method_signature": "MergeParameters.setBlankPageIfOdd(boolean blankPageIfOdd)", "testcase": false, "constructor": false}, {"identifier": "getAcroFormPolicy", "parameters": "()", "modifiers": "public", "return": "AcroFormPolicy", "signature": "AcroFormPolicy getAcroFormPolicy()", "full_signature": "public AcroFormPolicy getAcroFormPolicy()", "class_method_signature": "MergeParameters.getAcroFormPolicy()", "testcase": false, "constructor": false}, {"identifier": "setAcroFormPolicy", "parameters": "(AcroFormPolicy acroFormPolicy)", "modifiers": "public", "return": "void", "signature": "void setAcroFormPolicy(AcroFormPolicy acroFormPolicy)", "full_signature": "public void setAcroFormPolicy(AcroFormPolicy acroFormPolicy)", "class_method_signature": "MergeParameters.setAcroFormPolicy(AcroFormPolicy acroFormPolicy)", "testcase": false, "constructor": false}, {"identifier": "getOutlinePolicy", "parameters": "()", "modifiers": "public", "return": "OutlinePolicy", "signature": "OutlinePolicy getOutlinePolicy()", "full_signature": "public OutlinePolicy getOutlinePolicy()", "class_method_signature": "MergeParameters.getOutlinePolicy()", "testcase": false, "constructor": false}, {"identifier": "setOutlinePolicy", "parameters": "(OutlinePolicy outlinePolicy)", "modifiers": "public", "return": "void", "signature": "void setOutlinePolicy(OutlinePolicy outlinePolicy)", "full_signature": "public void setOutlinePolicy(OutlinePolicy outlinePolicy)", "class_method_signature": "MergeParameters.setOutlinePolicy(OutlinePolicy outlinePolicy)", "testcase": false, "constructor": false}, {"identifier": "getTableOfContentsPolicy", "parameters": "()", "modifiers": "public", "return": "ToCPolicy", "signature": "ToCPolicy getTableOfContentsPolicy()", "full_signature": "public ToCPolicy getTableOfContentsPolicy()", "class_method_signature": "MergeParameters.getTableOfContentsPolicy()", "testcase": false, "constructor": false}, {"identifier": "setTableOfContentsPolicy", "parameters": "(ToCPolicy tocPolicy)", "modifiers": "public", "return": "void", "signature": "void setTableOfContentsPolicy(ToCPolicy tocPolicy)", "full_signature": "public void setTableOfContentsPolicy(ToCPolicy tocPolicy)", "class_method_signature": "MergeParameters.setTableOfContentsPolicy(ToCPolicy tocPolicy)", "testcase": false, "constructor": false}, {"identifier": "isFilenameFooter", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFilenameFooter()", "full_signature": "public boolean isFilenameFooter()", "class_method_signature": "MergeParameters.isFilenameFooter()", "testcase": false, "constructor": false}, {"identifier": "setFilenameFooter", "parameters": "(boolean filenameFooter)", "modifiers": "public", "return": "void", "signature": "void setFilenameFooter(boolean filenameFooter)", "full_signature": "public void setFilenameFooter(boolean filenameFooter)", "class_method_signature": "MergeParameters.setFilenameFooter(boolean filenameFooter)", "testcase": false, "constructor": false}, {"identifier": "isNormalizePageSizes", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNormalizePageSizes()", "full_signature": "public boolean isNormalizePageSizes()", "class_method_signature": "MergeParameters.isNormalizePageSizes()", "testcase": false, "constructor": false}, {"identifier": "setNormalizePageSizes", "parameters": "(boolean normalizePageSizes)", "modifiers": "public", "return": "void", "signature": "void setNormalizePageSizes(boolean normalizePageSizes)", "full_signature": "public void setNormalizePageSizes(boolean normalizePageSizes)", "class_method_signature": "MergeParameters.setNormalizePageSizes(boolean normalizePageSizes)", "testcase": false, "constructor": false}, {"identifier": "getCatalogPageLabelsPolicy", "parameters": "()", "modifiers": "public", "return": "CatalogPageLabelsPolicy", "signature": "CatalogPageLabelsPolicy getCatalogPageLabelsPolicy()", "full_signature": "public CatalogPageLabelsPolicy getCatalogPageLabelsPolicy()", "class_method_signature": "MergeParameters.getCatalogPageLabelsPolicy()", "testcase": false, "constructor": false}, {"identifier": "setCatalogPageLabelsPolicy", "parameters": "(CatalogPageLabelsPolicy catalogPageLabelsPolicy)", "modifiers": "public", "return": "void", "signature": "void setCatalogPageLabelsPolicy(CatalogPageLabelsPolicy catalogPageLabelsPolicy)", "full_signature": "public void setCatalogPageLabelsPolicy(CatalogPageLabelsPolicy catalogPageLabelsPolicy)", "class_method_signature": "MergeParameters.setCatalogPageLabelsPolicy(CatalogPageLabelsPolicy catalogPageLabelsPolicy)", "testcase": false, "constructor": false}, {"identifier": "isFirstInputCoverTitle", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFirstInputCoverTitle()", "full_signature": "public boolean isFirstInputCoverTitle()", "class_method_signature": "MergeParameters.isFirstInputCoverTitle()", "testcase": false, "constructor": false}, {"identifier": "setFirstInputCoverTitle", "parameters": "(boolean firstInputCoverTitle)", "modifiers": "public", "return": "void", "signature": "void setFirstInputCoverTitle(boolean firstInputCoverTitle)", "full_signature": "public void setFirstInputCoverTitle(boolean firstInputCoverTitle)", "class_method_signature": "MergeParameters.setFirstInputCoverTitle(boolean firstInputCoverTitle)", "testcase": false, "constructor": false}, {"identifier": "getRotations", "parameters": "()", "modifiers": "public", "return": "List<Rotation>", "signature": "List<Rotation> getRotations()", "full_signature": "public List<Rotation> getRotations()", "class_method_signature": "MergeParameters.getRotations()", "testcase": false, "constructor": false}, {"identifier": "setRotations", "parameters": "(List<Rotation> rotations)", "modifiers": "public", "return": "void", "signature": "void setRotations(List<Rotation> rotations)", "full_signature": "public void setRotations(List<Rotation> rotations)", "class_method_signature": "MergeParameters.setRotations(List<Rotation> rotations)", "testcase": false, "constructor": false}, {"identifier": "getRotation", "parameters": "(int index)", "modifiers": "public", "return": "Rotation", "signature": "Rotation getRotation(int index)", "full_signature": "public Rotation getRotation(int index)", "class_method_signature": "MergeParameters.getRotation(int index)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MergeParameters.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "MergeParameters.equals(Object other)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/parameter/MergeParameters.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (!(other instanceof MergeParameters)) {\n            return false;\n        }\n        MergeParameters params = (MergeParameters) other;\n        return new EqualsBuilder().appendSuper(super.equals(other))\n                .append(acroFormPolicy, params.getAcroFormPolicy()).append(blankPageIfOdd, params.isBlankPageIfOdd())\n                .append(outlinePolicy, params.getOutlinePolicy()).append(tocPolicy, params.getTableOfContentsPolicy())\n                .append(filenameFooter, params.isFilenameFooter())\n                .append(normalizePageSizes, params.isNormalizePageSizes())\n                .append(catalogPageLabelsPolicy, params.catalogPageLabelsPolicy)\n                .append(firstInputCoverTitle, params.firstInputCoverTitle)\n                .append(rotations, params.rotations)\n                .isEquals();\n    }", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "MergeParameters.equals(Object other)", "testcase": false, "constructor": false, "invocations": ["isEquals", "append", "append", "append", "append", "append", "append", "append", "append", "append", "appendSuper", "equals", "getAcroFormPolicy", "isBlankPageIfOdd", "getOutlinePolicy", "getTableOfContentsPolicy", "isFilenameFooter", "isNormalizePageSizes"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}