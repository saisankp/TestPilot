{"test_class": {"identifier": "ElasticsearchConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ElasticsearchConfig EMPTY_CONFIG = new ElasticsearchConfig(\n      \"es\",\n      new MapConfig(Collections.<String, String>emptyMap()));", "modifier": "private", "type": "ElasticsearchConfig", "declarator": "EMPTY_CONFIG = new ElasticsearchConfig(\n      \"es\",\n      new MapConfig(Collections.<String, String>emptyMap()))", "var_name": "EMPTY_CONFIG"}], "file": "samza-elasticsearch/src/test/java/com/quantiply/samza/system/elasticsearch/ElasticsearchConfigTest.java"}, "test_case": {"identifier": "testFlushMaxActions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFlushMaxActions() throws Exception {\n    assertEquals(1000, EMPTY_CONFIG.getBulkFlushMaxActions());\n\n    ElasticsearchConfig config = configForProperty(\"systems.es.flush.max.actions\", \"500\");\n    assertEquals(500, config.getBulkFlushMaxActions());\n  }", "signature": "void testFlushMaxActions()", "full_signature": "@Test public void testFlushMaxActions()", "class_method_signature": "ElasticsearchConfigTest.testFlushMaxActions()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getBulkFlushMaxActions", "configForProperty", "assertEquals", "getBulkFlushMaxActions"]}, "focal_class": {"identifier": "ElasticsearchConfig", "superclass": "extends MapConfig", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ElasticsearchConfig.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ElasticsearchConfig.class)", "var_name": "LOGGER"}, {"original_string": "public static final String CONFIG_KEY_FLUSH_MAX_ACTIONS = \"flush.max.actions\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_KEY_FLUSH_MAX_ACTIONS = \"flush.max.actions\"", "var_name": "CONFIG_KEY_FLUSH_MAX_ACTIONS"}, {"original_string": "public static final String CONFIG_KEY_FLUSH_INTERVALS_MS = \"flush.interval.ms\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_KEY_FLUSH_INTERVALS_MS = \"flush.interval.ms\"", "var_name": "CONFIG_KEY_FLUSH_INTERVALS_MS"}, {"original_string": "public static final String CONFIG_KEY_HTTP_URL = \"http.url\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_KEY_HTTP_URL = \"http.url\"", "var_name": "CONFIG_KEY_HTTP_URL"}, {"original_string": "public static final String CONFIG_KEY_HTTP_AUTH_TYPE = \"http.auth.type\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_KEY_HTTP_AUTH_TYPE = \"http.auth.type\"", "var_name": "CONFIG_KEY_HTTP_AUTH_TYPE"}, {"original_string": "public static final String CONFIG_KEY_HTTP_AUTH_BASIC_USER = \"http.auth.basic.user\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_KEY_HTTP_AUTH_BASIC_USER = \"http.auth.basic.user\"", "var_name": "CONFIG_KEY_HTTP_AUTH_BASIC_USER"}, {"original_string": "public static final String CONFIG_KEY_HTTP_AUTH_BASIC_PASSWORD = \"http.auth.basic.password\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_KEY_HTTP_AUTH_BASIC_PASSWORD = \"http.auth.basic.password\"", "var_name": "CONFIG_KEY_HTTP_AUTH_BASIC_PASSWORD"}, {"original_string": "public static final String CONFIG_KEY_HTTP_CONNECT_TIMEOUT_MS = \"http.connect.timeout.ms\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_KEY_HTTP_CONNECT_TIMEOUT_MS = \"http.connect.timeout.ms\"", "var_name": "CONFIG_KEY_HTTP_CONNECT_TIMEOUT_MS"}, {"original_string": "public static final String CONFIG_KEY_HTTP_READ_TIMEOUT_MS = \"http.read.timeout.ms\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_KEY_HTTP_READ_TIMEOUT_MS = \"http.read.timeout.ms\"", "var_name": "CONFIG_KEY_HTTP_READ_TIMEOUT_MS"}], "methods": [{"identifier": "ElasticsearchConfig", "parameters": "(String name, Config config)", "modifiers": "public", "return": "", "signature": " ElasticsearchConfig(String name, Config config)", "full_signature": "public  ElasticsearchConfig(String name, Config config)", "class_method_signature": "ElasticsearchConfig.ElasticsearchConfig(String name, Config config)", "testcase": false, "constructor": true}, {"identifier": "getHTTPURL", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHTTPURL()", "full_signature": "public String getHTTPURL()", "class_method_signature": "ElasticsearchConfig.getHTTPURL()", "testcase": false, "constructor": false}, {"identifier": "getAuthType", "parameters": "()", "modifiers": "public", "return": "AuthType", "signature": "AuthType getAuthType()", "full_signature": "public AuthType getAuthType()", "class_method_signature": "ElasticsearchConfig.getAuthType()", "testcase": false, "constructor": false}, {"identifier": "getBasicAuthUser", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBasicAuthUser()", "full_signature": "public String getBasicAuthUser()", "class_method_signature": "ElasticsearchConfig.getBasicAuthUser()", "testcase": false, "constructor": false}, {"identifier": "getBasicAuthPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBasicAuthPassword()", "full_signature": "public String getBasicAuthPassword()", "class_method_signature": "ElasticsearchConfig.getBasicAuthPassword()", "testcase": false, "constructor": false}, {"identifier": "getConnectTimeoutMs", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getConnectTimeoutMs()", "full_signature": "public int getConnectTimeoutMs()", "class_method_signature": "ElasticsearchConfig.getConnectTimeoutMs()", "testcase": false, "constructor": false}, {"identifier": "getReadTimeoutMs", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getReadTimeoutMs()", "full_signature": "public int getReadTimeoutMs()", "class_method_signature": "ElasticsearchConfig.getReadTimeoutMs()", "testcase": false, "constructor": false}, {"identifier": "getBulkFlushMaxActions", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBulkFlushMaxActions()", "full_signature": "public int getBulkFlushMaxActions()", "class_method_signature": "ElasticsearchConfig.getBulkFlushMaxActions()", "testcase": false, "constructor": false}, {"identifier": "getBulkFlushIntervalMS", "parameters": "()", "modifiers": "public", "return": "Optional<Integer>", "signature": "Optional<Integer> getBulkFlushIntervalMS()", "full_signature": "public Optional<Integer> getBulkFlushIntervalMS()", "class_method_signature": "ElasticsearchConfig.getBulkFlushIntervalMS()", "testcase": false, "constructor": false}, {"identifier": "logAllSettings", "parameters": "(Config config)", "modifiers": "private", "return": "void", "signature": "void logAllSettings(Config config)", "full_signature": "private void logAllSettings(Config config)", "class_method_signature": "ElasticsearchConfig.logAllSettings(Config config)", "testcase": false, "constructor": false}], "file": "samza-elasticsearch/src/main/java/com/quantiply/samza/system/elasticsearch/ElasticsearchConfig.java"}, "focal_method": {"identifier": "getBulkFlushMaxActions", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getBulkFlushMaxActions() {\n    return getInt(CONFIG_KEY_FLUSH_MAX_ACTIONS, 1000);\n  }", "signature": "int getBulkFlushMaxActions()", "full_signature": "public int getBulkFlushMaxActions()", "class_method_signature": "ElasticsearchConfig.getBulkFlushMaxActions()", "testcase": false, "constructor": false, "invocations": ["getInt"]}, "repository": {"repo_id": 23237318, "url": "https://github.com/quantiply/rico", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 5128, "license": "licensed"}}