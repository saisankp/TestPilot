{"test_class": {"identifier": "PatternSizeWeightFunctionTest", "superclass": "", "interfaces": "", "fields": [], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/ranking/PatternSizeWeightFunctionTest.java"}, "test_case": {"identifier": "weightsLargerPatternMore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void weightsLargerPatternMore() throws Exception {\n        APIUsagePattern smallerPattern = somePattern(buildAUG().withActionNode(\"N\").build());\n        APIUsagePattern largerPattern = somePattern(buildAUG().withActionNodes(\"N\", \"M\").build());\n        Model model = () -> asSet(smallerPattern, largerPattern);\n\n        double smallerWeight = new PatternSizeWeightFunction().getWeight(instance(smallerPattern), null, model);\n        double largerWeight = new PatternSizeWeightFunction().getWeight(instance(largerPattern), null, model);\n\n        assertThat(smallerWeight, is(lessThan(largerWeight)));\n    }", "signature": "void weightsLargerPatternMore()", "full_signature": "@Test public void weightsLargerPatternMore()", "class_method_signature": "PatternSizeWeightFunctionTest.weightsLargerPatternMore()", "testcase": true, "constructor": false, "invocations": ["somePattern", "build", "withActionNode", "buildAUG", "somePattern", "build", "withActionNodes", "buildAUG", "asSet", "getWeight", "instance", "getWeight", "instance", "assertThat", "is", "lessThan"]}, "focal_class": {"identifier": "PatternSizeWeightFunction", "superclass": "", "interfaces": "implements ViolationWeightFunction", "fields": [], "methods": [{"identifier": "getWeight", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "double", "signature": "double getWeight(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public double getWeight(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "PatternSizeWeightFunction.getWeight(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false}, {"identifier": "getPatternWeight", "parameters": "(Overlap violation)", "modifiers": "private", "return": "int", "signature": "int getPatternWeight(Overlap violation)", "full_signature": "private int getPatternWeight(Overlap violation)", "class_method_signature": "PatternSizeWeightFunction.getPatternWeight(Overlap violation)", "testcase": false, "constructor": false}, {"identifier": "getMaxPatternWeight", "parameters": "(Model model)", "modifiers": "private", "return": "int", "signature": "int getMaxPatternWeight(Model model)", "full_signature": "private int getMaxPatternWeight(Model model)", "class_method_signature": "PatternSizeWeightFunction.getMaxPatternWeight(Model model)", "testcase": false, "constructor": false}, {"identifier": "getFormula", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "String", "signature": "String getFormula(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public String getFormula(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "PatternSizeWeightFunction.getFormula(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "PatternSizeWeightFunction.getId()", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/ranking/PatternSizeWeightFunction.java"}, "focal_method": {"identifier": "getWeight", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double getWeight(Overlap violation, Overlaps overlaps, Model model) {\n        return Math.log10(getPatternWeight(violation)) / Math.log10(getMaxPatternWeight(model));\n    }", "signature": "double getWeight(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public double getWeight(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "PatternSizeWeightFunction.getWeight(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false, "invocations": ["log10", "getPatternWeight", "log10", "getMaxPatternWeight"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}