{"test_class": {"identifier": "LogHistogramTest", "superclass": "extends HistogramTestCases", "interfaces": "", "fields": [], "file": "core/src/test/java/com/tdunning/math/stats/LogHistogramTest.java"}, "test_case": {"identifier": "testApproxLog", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApproxLog() {\n        double x = 1e-6;\n        for (int i = 0; i < 1000; i++) {\n            assertEquals(Math.log(x) / Math.log(2), LogHistogram.approxLog2(x), 0.01);\n            x *= 1.0 + Math.PI / 100.0;\n        }\n        assertTrue(\"Insufficient range\", x > 1e6);\n    }", "signature": "void testApproxLog()", "full_signature": "@Test public void testApproxLog()", "class_method_signature": "LogHistogramTest.testApproxLog()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "log", "log", "approxLog2", "assertTrue"]}, "focal_class": {"identifier": "LogHistogram", "superclass": "extends Histogram", "interfaces": "", "fields": [{"original_string": "private double logFactor;", "modifier": "private", "type": "double", "declarator": "logFactor", "var_name": "logFactor"}, {"original_string": "private double logOffset;", "modifier": "private", "type": "double", "declarator": "logOffset", "var_name": "logOffset"}], "methods": [{"identifier": "LogHistogram", "parameters": "(double min, double max)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "", "signature": " LogHistogram(double min, double max)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public  LogHistogram(double min, double max)", "class_method_signature": "LogHistogram.LogHistogram(double min, double max)", "testcase": false, "constructor": true}, {"identifier": "LogHistogram", "parameters": "(double min, double max, double epsilonFactor)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "", "signature": " LogHistogram(double min, double max, double epsilonFactor)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public  LogHistogram(double min, double max, double epsilonFactor)", "class_method_signature": "LogHistogram.LogHistogram(double min, double max, double epsilonFactor)", "testcase": false, "constructor": true}, {"identifier": "approxLog2", "parameters": "(double value)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "signature": "double approxLog2(double value)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double approxLog2(double value)", "class_method_signature": "LogHistogram.approxLog2(double value)", "testcase": false, "constructor": false}, {"identifier": "pow2", "parameters": "(double x)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "signature": "double pow2(double x)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double pow2(double x)", "class_method_signature": "LogHistogram.pow2(double x)", "testcase": false, "constructor": false}, {"identifier": "bucketIndex", "parameters": "(double x)", "modifiers": "@Override protected", "return": "int", "signature": "int bucketIndex(double x)", "full_signature": "@Override protected int bucketIndex(double x)", "class_method_signature": "LogHistogram.bucketIndex(double x)", "testcase": false, "constructor": false}, {"identifier": "lowerBound", "parameters": "(int k)", "modifiers": "@Override", "return": "double", "signature": "double lowerBound(int k)", "full_signature": "@Override double lowerBound(int k)", "class_method_signature": "LogHistogram.lowerBound(int k)", "testcase": false, "constructor": false}, {"identifier": "getCompressedCounts", "parameters": "()", "modifiers": "@Override", "return": "long[]", "signature": "long[] getCompressedCounts()", "full_signature": "@Override long[] getCompressedCounts()", "class_method_signature": "LogHistogram.getCompressedCounts()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream out)", "modifiers": "@Override", "return": "void", "signature": "void writeObject(ObjectOutputStream out)", "full_signature": "@Override void writeObject(ObjectOutputStream out)", "class_method_signature": "LogHistogram.writeObject(ObjectOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream in)", "modifiers": "@Override", "return": "void", "signature": "void readObject(ObjectInputStream in)", "full_signature": "@Override void readObject(ObjectInputStream in)", "class_method_signature": "LogHistogram.readObject(ObjectInputStream in)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Iterable<Histogram> others)", "modifiers": "@Override", "return": "void", "signature": "void add(Iterable<Histogram> others)", "full_signature": "@Override void add(Iterable<Histogram> others)", "class_method_signature": "LogHistogram.add(Iterable<Histogram> others)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tdunning/math/stats/LogHistogram.java"}, "focal_method": {"identifier": "approxLog2", "parameters": "(double value)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "double", "body": "@SuppressWarnings(\"WeakerAccess\")\n    public static double approxLog2(double value) {\n        final long valueBits = Double.doubleToRawLongBits(value);\n        final long exponent = ((valueBits & 0x7ff0_0000_0000_0000L) >>> 52) - 1024;\n        final double m = Double.longBitsToDouble((valueBits & 0x800fffffffffffffL) | 0x3ff0000000000000L);\n        return (m * (2 - (1.0 / 3) * m) + exponent - (2.0 / 3.0));\n    }", "signature": "double approxLog2(double value)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static double approxLog2(double value)", "class_method_signature": "LogHistogram.approxLog2(double value)", "testcase": false, "constructor": false, "invocations": ["doubleToRawLongBits", "longBitsToDouble"]}, "repository": {"repo_id": 14509169, "url": "https://github.com/tdunning/t-digest", "language": "Java", "is_fork": false, "fork_count": 170, "stargazer_count": 1212, "size": 41644, "license": "licensed"}}