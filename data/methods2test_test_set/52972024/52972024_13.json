{"test_class": {"identifier": "ParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "OldModules/ValidateFormDataActor/src/test/java/info/smart_tools/smartactors/actors/validate_form_data/parser/ParserTest.java"}, "test_case": {"identifier": "shouldRightValidateAndTerms", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRightValidateAndTerms() throws Exception {\n        String rules = \"\u0440\u0443\u0441\u0441\u043a\u0438\u0439 && \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435\";\n        assertFalse(new Parser(rules, \"\").validate());\n        assertFalse(new Parser(rules, \"qwerty\").validate());\n        assertTrue(new Parser(rules, \"\u0439\u0446\u0443\u043a\u0435\u043d\").validate());\n    }", "signature": "void shouldRightValidateAndTerms()", "full_signature": "@Test public void shouldRightValidateAndTerms()", "class_method_signature": "ParserTest.shouldRightValidateAndTerms()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "validate", "assertFalse", "validate", "assertTrue", "te());"]}, "focal_class": {"identifier": "Parser", "superclass": "", "interfaces": "implements ParserConstants", "fields": [{"original_string": "private String field;", "modifier": "private", "type": "String", "declarator": "field", "var_name": "field"}, {"original_string": "private boolean result = true;", "modifier": "private", "type": "boolean", "declarator": "result = true", "var_name": "result"}, {"original_string": "public ParserTokenManager token_source;", "modifier": "public", "type": "ParserTokenManager", "declarator": "token_source", "var_name": "token_source"}, {"original_string": "SimpleCharStream jj_input_stream;", "modifier": "", "type": "SimpleCharStream", "declarator": "jj_input_stream", "var_name": "jj_input_stream"}, {"original_string": "public Token token;", "modifier": "public", "type": "Token", "declarator": "token", "var_name": "token"}, {"original_string": "public Token jj_nt;", "modifier": "public", "type": "Token", "declarator": "jj_nt", "var_name": "jj_nt"}, {"original_string": "private int jj_ntk;", "modifier": "private", "type": "int", "declarator": "jj_ntk", "var_name": "jj_ntk"}, {"original_string": "private int jj_gen;", "modifier": "private", "type": "int", "declarator": "jj_gen", "var_name": "jj_gen"}, {"original_string": "final private int[] jj_la1 = new int[5];", "modifier": "final private", "type": "int[]", "declarator": "jj_la1 = new int[5]", "var_name": "jj_la1"}, {"original_string": "static private int[] jj_la1_0;", "modifier": "static private", "type": "int[]", "declarator": "jj_la1_0", "var_name": "jj_la1_0"}, {"original_string": "private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();", "modifier": "private", "type": "java.util.List<int[]>", "declarator": "jj_expentries = new java.util.ArrayList<int[]>()", "var_name": "jj_expentries"}, {"original_string": "private int[] jj_expentry;", "modifier": "private", "type": "int[]", "declarator": "jj_expentry", "var_name": "jj_expentry"}, {"original_string": "private int jj_kind = -1;", "modifier": "private", "type": "int", "declarator": "jj_kind = -1", "var_name": "jj_kind"}], "methods": [{"identifier": "Parser", "parameters": "(String rules, String field)", "modifiers": "public", "return": "", "signature": " Parser(String rules, String field)", "full_signature": "public  Parser(String rules, String field)", "class_method_signature": "Parser.Parser(String rules, String field)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "Boolean", "signature": "Boolean validate()", "full_signature": "public Boolean validate()", "class_method_signature": "Parser.validate()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "()", "modifiers": "final public", "return": "void", "signature": "void parse()", "full_signature": "final public void parse()", "class_method_signature": "Parser.parse()", "testcase": false, "constructor": false}, {"identifier": "expression", "parameters": "()", "modifiers": "final public", "return": "void", "signature": "void expression()", "full_signature": "final public void expression()", "class_method_signature": "Parser.expression()", "testcase": false, "constructor": false}, {"identifier": "queryTerm", "parameters": "()", "modifiers": "final public", "return": "void", "signature": "void queryTerm()", "full_signature": "final public void queryTerm()", "class_method_signature": "Parser.queryTerm()", "testcase": false, "constructor": false}, {"identifier": "compareTerm", "parameters": "()", "modifiers": "final public", "return": "boolean", "signature": "boolean compareTerm()", "full_signature": "final public boolean compareTerm()", "class_method_signature": "Parser.compareTerm()", "testcase": false, "constructor": false}, {"identifier": "jj_la1_init_0", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void jj_la1_init_0()", "full_signature": "private static void jj_la1_init_0()", "class_method_signature": "Parser.jj_la1_init_0()", "testcase": false, "constructor": false}, {"identifier": "Parser", "parameters": "(java.io.InputStream stream)", "modifiers": "public", "return": "", "signature": " Parser(java.io.InputStream stream)", "full_signature": "public  Parser(java.io.InputStream stream)", "class_method_signature": "Parser.Parser(java.io.InputStream stream)", "testcase": false, "constructor": true}, {"identifier": "Parser", "parameters": "(java.io.InputStream stream, String encoding)", "modifiers": "public", "return": "", "signature": " Parser(java.io.InputStream stream, String encoding)", "full_signature": "public  Parser(java.io.InputStream stream, String encoding)", "class_method_signature": "Parser.Parser(java.io.InputStream stream, String encoding)", "testcase": false, "constructor": true}, {"identifier": "ReInit", "parameters": "(java.io.InputStream stream)", "modifiers": "public", "return": "void", "signature": "void ReInit(java.io.InputStream stream)", "full_signature": "public void ReInit(java.io.InputStream stream)", "class_method_signature": "Parser.ReInit(java.io.InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "ReInit", "parameters": "(java.io.InputStream stream, String encoding)", "modifiers": "public", "return": "void", "signature": "void ReInit(java.io.InputStream stream, String encoding)", "full_signature": "public void ReInit(java.io.InputStream stream, String encoding)", "class_method_signature": "Parser.ReInit(java.io.InputStream stream, String encoding)", "testcase": false, "constructor": false}, {"identifier": "Parser", "parameters": "(java.io.Reader stream)", "modifiers": "public", "return": "", "signature": " Parser(java.io.Reader stream)", "full_signature": "public  Parser(java.io.Reader stream)", "class_method_signature": "Parser.Parser(java.io.Reader stream)", "testcase": false, "constructor": true}, {"identifier": "ReInit", "parameters": "(java.io.Reader stream)", "modifiers": "public", "return": "void", "signature": "void ReInit(java.io.Reader stream)", "full_signature": "public void ReInit(java.io.Reader stream)", "class_method_signature": "Parser.ReInit(java.io.Reader stream)", "testcase": false, "constructor": false}, {"identifier": "Parser", "parameters": "(ParserTokenManager tm)", "modifiers": "public", "return": "", "signature": " Parser(ParserTokenManager tm)", "full_signature": "public  Parser(ParserTokenManager tm)", "class_method_signature": "Parser.Parser(ParserTokenManager tm)", "testcase": false, "constructor": true}, {"identifier": "ReInit", "parameters": "(ParserTokenManager tm)", "modifiers": "public", "return": "void", "signature": "void ReInit(ParserTokenManager tm)", "full_signature": "public void ReInit(ParserTokenManager tm)", "class_method_signature": "Parser.ReInit(ParserTokenManager tm)", "testcase": false, "constructor": false}, {"identifier": "jj_consume_token", "parameters": "(int kind)", "modifiers": "private", "return": "Token", "signature": "Token jj_consume_token(int kind)", "full_signature": "private Token jj_consume_token(int kind)", "class_method_signature": "Parser.jj_consume_token(int kind)", "testcase": false, "constructor": false}, {"identifier": "getNextToken", "parameters": "()", "modifiers": "final public", "return": "Token", "signature": "Token getNextToken()", "full_signature": "final public Token getNextToken()", "class_method_signature": "Parser.getNextToken()", "testcase": false, "constructor": false}, {"identifier": "getToken", "parameters": "(int index)", "modifiers": "final public", "return": "Token", "signature": "Token getToken(int index)", "full_signature": "final public Token getToken(int index)", "class_method_signature": "Parser.getToken(int index)", "testcase": false, "constructor": false}, {"identifier": "jj_ntk", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int jj_ntk()", "full_signature": "private int jj_ntk()", "class_method_signature": "Parser.jj_ntk()", "testcase": false, "constructor": false}, {"identifier": "generateParseException", "parameters": "()", "modifiers": "public", "return": "ParseException", "signature": "ParseException generateParseException()", "full_signature": "public ParseException generateParseException()", "class_method_signature": "Parser.generateParseException()", "testcase": false, "constructor": false}, {"identifier": "enable_tracing", "parameters": "()", "modifiers": "final public", "return": "void", "signature": "void enable_tracing()", "full_signature": "final public void enable_tracing()", "class_method_signature": "Parser.enable_tracing()", "testcase": false, "constructor": false}, {"identifier": "disable_tracing", "parameters": "()", "modifiers": "final public", "return": "void", "signature": "void disable_tracing()", "full_signature": "final public void disable_tracing()", "class_method_signature": "Parser.disable_tracing()", "testcase": false, "constructor": false}], "file": "OldModules/ValidateFormDataActor/src/main/java/info/smart_tools/smartactors/actors/validate_form_data/parser/Parser.java"}, "focal_method": {"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "Boolean", "body": "public Boolean validate() {\n        try {\n            parse();\n            return result;\n        } catch (Exception e) {\n            return false;\n        }\n    }", "signature": "Boolean validate()", "full_signature": "public Boolean validate()", "class_method_signature": "Parser.validate()", "testcase": false, "constructor": false, "invocations": ["parse"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}