{"test_class": {"identifier": "ImageSizeHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/ImageSizeHandlerTest.java"}, "test_case": {"identifier": "testCreateTargetImageSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateTargetImageSize() {\n        ImageSize[] imageSizes = new ImageSize[]{\n                new ImageSize(\"in\", 21687, 998, 2000, 1500),\n                new ImageSize(\"in\", 23687, 445, 2000, 1500),\n                new ImageSize(\"in\", 25687, 1443, 2000, 1500)};\n\n        final ImageSize targetImageSize = ImageSizeHandler.createTargetImageSize(imageSizes);\n\n        Assert.assertNotNull(targetImageSize);\n        assertEquals(\"in\", targetImageSize.getIdentifier());\n        assertEquals(21687, targetImageSize.getStartOffset());\n        assertEquals(445, targetImageSize.getTrackOffset());\n        assertEquals(6000, targetImageSize.getRows());\n        assertEquals(2498, targetImageSize.getColumns());\n    }", "signature": "void testCreateTargetImageSize()", "full_signature": "@Test public void testCreateTargetImageSize()", "class_method_signature": "ImageSizeHandlerTest.testCreateTargetImageSize()", "testcase": true, "constructor": false, "invocations": ["createTargetImageSize", "assertNotNull", "assertEquals", "getIdentifier", "assertEquals", "getStartOffset", "assertEquals", "getTrackOffset", "assertEquals", "getRows", "assertEquals", "getColumns"]}, "focal_class": {"identifier": "ImageSizeHandler", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createTargetImageSize", "parameters": "(ImageSize[] imageSizes)", "modifiers": "public static", "return": "ImageSize", "signature": "ImageSize createTargetImageSize(ImageSize[] imageSizes)", "full_signature": "public static ImageSize createTargetImageSize(ImageSize[] imageSizes)", "class_method_signature": "ImageSizeHandler.createTargetImageSize(ImageSize[] imageSizes)", "testcase": false, "constructor": false}, {"identifier": "extractImageSizes", "parameters": "(Document manifestDocument)", "modifiers": "public static", "return": "ImageSize[]", "signature": "ImageSize[] extractImageSizes(Document manifestDocument)", "full_signature": "public static ImageSize[] extractImageSizes(Document manifestDocument)", "class_method_signature": "ImageSizeHandler.extractImageSizes(Document manifestDocument)", "testcase": false, "constructor": false}, {"identifier": "extractImageSizeFromNode", "parameters": "(Node element, String idExtension)", "modifiers": "public static", "return": "ImageSize", "signature": "ImageSize extractImageSizeFromNode(Node element, String idExtension)", "full_signature": "public static ImageSize extractImageSizeFromNode(Node element, String idExtension)", "class_method_signature": "ImageSizeHandler.extractImageSizeFromNode(Node element, String idExtension)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "(String gridName)", "modifiers": "private static", "return": "String", "signature": "String getId(String gridName)", "full_signature": "private static String getId(String gridName)", "class_method_signature": "ImageSizeHandler.getId(String gridName)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/ImageSizeHandler.java"}, "focal_method": {"identifier": "createTargetImageSize", "parameters": "(ImageSize[] imageSizes)", "modifiers": "public static", "return": "ImageSize", "body": "public static ImageSize createTargetImageSize(ImageSize[] imageSizes) {\n        String identifier = \"\";\n        int startOffset = Integer.MAX_VALUE;\n        int trackOffset = Integer.MAX_VALUE;\n        int highestStart = Integer.MIN_VALUE;\n        int highestTrack = Integer.MIN_VALUE;\n        for (ImageSize imageSize : imageSizes) {\n            if (imageSize == null) {\n                continue;\n            }\n            if (imageSize.getStartOffset() < startOffset) {\n                startOffset = imageSize.getStartOffset();\n            }\n            if (imageSize.getTrackOffset() < trackOffset) {\n                trackOffset = imageSize.getTrackOffset();\n            }\n            if (imageSize.getStartOffset() + imageSize.getRows() > highestStart) {\n                highestStart = imageSize.getStartOffset() + imageSize.getRows();\n            }\n            if (imageSize.getTrackOffset() + imageSize.getColumns() > highestTrack) {\n                highestTrack = imageSize.getTrackOffset() + imageSize.getColumns();\n            }\n            identifier = imageSize.getIdentifier();\n        }\n        return new ImageSize(identifier, startOffset, trackOffset, highestStart - startOffset, highestTrack - trackOffset);\n    }", "signature": "ImageSize createTargetImageSize(ImageSize[] imageSizes)", "full_signature": "public static ImageSize createTargetImageSize(ImageSize[] imageSizes)", "class_method_signature": "ImageSizeHandler.createTargetImageSize(ImageSize[] imageSizes)", "testcase": false, "constructor": false, "invocations": ["getStartOffset", "getStartOffset", "getTrackOffset", "getTrackOffset", "getStartOffset", "getRows", "getStartOffset", "getRows", "getTrackOffset", "getColumns", "getTrackOffset", "getColumns", "getIdentifier"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}