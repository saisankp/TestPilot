{"test_class": {"identifier": "LineStringSorterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "IDirectPosition p1;", "modifier": "", "type": "IDirectPosition", "declarator": "p1", "var_name": "p1"}, {"original_string": "IDirectPosition p2;", "modifier": "", "type": "IDirectPosition", "declarator": "p2", "var_name": "p2"}, {"original_string": "IDirectPosition p3;", "modifier": "", "type": "IDirectPosition", "declarator": "p3", "var_name": "p3"}, {"original_string": "IDirectPosition p4;", "modifier": "", "type": "IDirectPosition", "declarator": "p4", "var_name": "p4"}, {"original_string": "IDirectPosition p5;", "modifier": "", "type": "IDirectPosition", "declarator": "p5", "var_name": "p5"}, {"original_string": "IDirectPosition p6;", "modifier": "", "type": "IDirectPosition", "declarator": "p6", "var_name": "p6"}, {"original_string": "IDirectPosition p7;", "modifier": "", "type": "IDirectPosition", "declarator": "p7", "var_name": "p7"}, {"original_string": "ILineString line1;", "modifier": "", "type": "ILineString", "declarator": "line1", "var_name": "line1"}, {"original_string": "ILineString line2;", "modifier": "", "type": "ILineString", "declarator": "line2", "var_name": "line2"}, {"original_string": "ILineString line3;", "modifier": "", "type": "ILineString", "declarator": "line3", "var_name": "line3"}, {"original_string": "ILineString line4;", "modifier": "", "type": "ILineString", "declarator": "line4", "var_name": "line4"}, {"original_string": "ILineString line5;", "modifier": "", "type": "ILineString", "declarator": "line5", "var_name": "line5"}], "file": "geoxygene-spatial/src/test/java/fr/ign/cogit/geoxygene/spatial/util/LineStringSorterTest.java"}, "test_case": {"identifier": "testSort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSort() {\n    List<ILineString> result = LineStringSorter.sort(line1, Arrays.asList(line2, line3, line4,\n        line5));\n//    for (ILineString l : result) {\n//      System.out.println(l);\n//    }\n    Assert.assertEquals(Arrays.asList(line4, line2, line3), result);\n    ILineString l = new GM_LineString(\n        new DirectPosition(651128.2399543846, 6861330.51367064),\n        new DirectPosition(651128.2399543575, 6861330.513667467),\n        new DirectPosition(651126.8, 6861362.7),\n        new DirectPosition(651124.9, 6861379.5)\n    );    \n    /*    \n    LINESTRING (\n        651128.2399543846 6861330.51367064 208062339707572470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, \n        651128.2399543575 6861330.513667467 13710458074977423000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, \n        651126.8 6861362.7 33233305273509640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, \n        651124.9 6861379.5 0\n    )\n    */\n    ILineString l1 = new GM_LineString(\n        new DirectPosition(651122.5650124006, 6861360.588720706),\n        new DirectPosition(651131.5104028855, 6861365.078859089)\n    );\n    ILineString l2 = new GM_LineString(\n        new DirectPosition(651131.6845765973, 6861360.470596566),\n        new DirectPosition(651122.7929930952, 6861360.134530621)\n    );\n    ILineString l3 = new GM_LineString(\n        new DirectPosition(651123.5411303148, 6861357.7533064), \n        new DirectPosition(651131.6902512497, 6861360.3204574445)\n    );\n    ILineString l4 = new GM_LineString(\n        new DirectPosition(651131.7755160853, 6861358.064532925),\n        new DirectPosition(651123.5411303148, 6861357.7533064)\n    );\n    ILineString l5 = new GM_LineString(\n        new DirectPosition(651132.0299365349, 6861351.333113982),\n        new DirectPosition(651124.042100489, 6861351.031206041)\n    );\n    ILineString l6 = new GM_LineString(\n        new DirectPosition(651124.0589372854, 6861350.533388453),\n        new DirectPosition(651132.049947978, 6861350.803654156)\n    );\n    ILineString l7 = new GM_LineString(\n        new DirectPosition(651132.1906160566, 6861347.081878759),\n        new DirectPosition(651124.1859040088, 6861346.779332973)\n    );\n    ILineString l8 = new GM_LineString(\n        new DirectPosition(651124.2198938279, 6861345.774347863),\n        new DirectPosition(651132.2297963421, 6861346.045252511)\n    );\n    ILineString l9 = new GM_LineString(\n        new DirectPosition(651132.3512955783, 6861342.830643537),\n        new DirectPosition(651124.3297075287, 6861342.527459906)\n    );\n    ILineString l10 = new GM_LineString(\n        new DirectPosition(651124.3808503704, 6861341.015307275),\n        new DirectPosition(651132.4096447063, 6861341.286850867)\n    );\n    ILineString l11 = new GM_LineString(\n        new DirectPosition(651132.2142040946, 6861337.837054882),\n        new DirectPosition(651124.4735110486, 6861338.275586839)\n    );\n    ILineString l12 = new GM_LineString(\n        new DirectPosition(651124.5907630872, 6861335.499412037),\n        new DirectPosition(651132.0997370766, 6861335.816554354)\n    );\n    ILineString l13 = new GM_LineString(\n        new DirectPosition(651131.9308314561, 6861333.578202283),\n        new DirectPosition(651124.6486970368, 6861334.127710758)\n    );\n    List<ILineString> list = Arrays.asList(l1, l2, l3, l8, l4, l12, l5, l11, l10, l6, l9, l7, l13);\n    Collections.shuffle(list);\n    result = LineStringSorter.sort(l, list);\n//    System.out.println(result.get(0).intersection(l));\n//    System.out.println(result.get(result.size() - 1).intersection(l));\n//    for (ILineString l : result) {\n//      System.out.println(l);\n//    }\n    Assert.assertEquals(Arrays.asList(l13, l12, l11, l10, l9, l8, l7, l6, l5, l4, l3, l2, l1), result);\n    ILineString ll = new GM_LineString(\n        new DirectPosition(651036.3, 6861368.800000001, Double.POSITIVE_INFINITY),\n        new DirectPosition(651039.4, 6861386.800000001, 0),\n        new DirectPosition(651047.7000000001, 6861432.800000001, 0),\n        new DirectPosition(651048.49003641, 6861442.991466861, 0),\n        new DirectPosition(651048.4900364373, 6861442.991470035, 0));\n    ILineString ll1 = new GM_LineString(\n        new DirectPosition(651044.082420469, 6861436.968906329),\n        new DirectPosition(651054.2437587668, 6861435.603961451));\n    ILineString ll2 = new GM_LineString(\n        new DirectPosition(651035.4940586238, 6861383.924357968),\n        new DirectPosition(651047.1717791874, 6861381.963138461));\n    list = Arrays.asList(ll1, ll2);\n    result = LineStringSorter.sort(ll, list);\n    Assert.assertEquals(Arrays.asList(ll2, ll1), result);    \n  }", "signature": "void testSort()", "full_signature": "@Test public void testSort()", "class_method_signature": "LineStringSorterTest.testSort()", "testcase": true, "constructor": false, "invocations": ["sort", "asList", "assertEquals", "asList", "asList", "shuffle", "sort", "assertEquals", "asList", "asList", "sort", "assertEquals", "asList"]}, "focal_class": {"identifier": "LineStringSorter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "sort", "parameters": "(ILineString line, Collection<ILineString> collection)", "modifiers": "public static", "return": "List<ILineString>", "signature": "List<ILineString> sort(ILineString line, Collection<ILineString> collection)", "full_signature": "public static List<ILineString> sort(ILineString line, Collection<ILineString> collection)", "class_method_signature": "LineStringSorter.sort(ILineString line, Collection<ILineString> collection)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(IDirectPosition point, Collection<ILineString> collection)", "modifiers": "public static", "return": "List<ILineString>", "signature": "List<ILineString> sort(IDirectPosition point, Collection<ILineString> collection)", "full_signature": "public static List<ILineString> sort(IDirectPosition point, Collection<ILineString> collection)", "class_method_signature": "LineStringSorter.sort(IDirectPosition point, Collection<ILineString> collection)", "testcase": false, "constructor": false}], "file": "geoxygene-spatial/src/main/java/fr/ign/cogit/geoxygene/spatial/util/LineStringSorter.java"}, "focal_method": {"identifier": "sort", "parameters": "(ILineString line, Collection<ILineString> collection)", "modifiers": "public static", "return": "List<ILineString>", "body": "public static List<ILineString> sort(ILineString line, Collection<ILineString> collection) {\n    final Map<ILineString, Double> paramForLineString = new HashMap<>();\n    for (ILineString l : collection) {\n      if (line.intersects(l)) {\n        IGeometry intersection = line.intersection(l);\n        if (intersection == null) {\n          continue;\n        }\n        double minParam = Double.POSITIVE_INFINITY;\n        for (IDirectPosition p : intersection.coord()) {\n          double param = line.paramForPoint(p)[0];\n          minParam = Math.min(minParam, param);\n        }\n        paramForLineString.put(l, minParam);\n      }\n    }\n    Comparator<ILineString> comparator = (o1, o2) -> {\n      double p1 = paramForLineString.get(o1);\n      double p2 = paramForLineString.get(o2);\n      return Double.compare(p1, p2);\n    };\n    List<ILineString> result = new ArrayList<>(paramForLineString.keySet());\n    result.sort(comparator);\n    return result;\n  }", "signature": "List<ILineString> sort(ILineString line, Collection<ILineString> collection)", "full_signature": "public static List<ILineString> sort(ILineString line, Collection<ILineString> collection)", "class_method_signature": "LineStringSorter.sort(ILineString line, Collection<ILineString> collection)", "testcase": false, "constructor": false, "invocations": ["intersects", "intersection", "coord", "paramForPoint", "min", "put", "get", "get", "compare", "keySet", "sort"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}