{"test_class": {"identifier": "BakedItemListTest", "superclass": "", "interfaces": "", "fields": [], "file": "Projects/Project_10/BakedItemListTest.java"}, "test_case": {"identifier": "readItemFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void readItemFile() throws Exception {\n      BakedItemList b = new BakedItemList();\n      b.readItemFile(\"baked_item_data.csv\");\n      Assert.assertEquals(\"Auburn's Best Bakery\", b.getListName());\n      Assert.assertEquals(6, b.getItemCount());\n      Assert.assertEquals(2, b.getExcludedCount());\n   }", "signature": "void readItemFile()", "full_signature": "@Test public void readItemFile()", "class_method_signature": "BakedItemListTest.readItemFile()", "testcase": true, "constructor": false, "invocations": ["readItemFile", "assertEquals", "getListName", "assertEquals", "getItemCount", "assertEquals", "getExcludedCount"]}, "focal_class": {"identifier": "BakedItemList", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String listName;", "modifier": "private", "type": "String", "declarator": "listName", "var_name": "listName"}, {"original_string": "private BakedItem[] itemList = new BakedItem[100];", "modifier": "private", "type": "BakedItem[]", "declarator": "itemList = new BakedItem[100]", "var_name": "itemList"}, {"original_string": "private int itemCount;", "modifier": "private", "type": "int", "declarator": "itemCount", "var_name": "itemCount"}, {"original_string": "private String[] excludedRecords = new String[30];", "modifier": "private", "type": "String[]", "declarator": "excludedRecords = new String[30]", "var_name": "excludedRecords"}, {"original_string": "private int excludedCount;", "modifier": "private", "type": "int", "declarator": "excludedCount", "var_name": "excludedCount"}, {"original_string": "private static int listCount = 0;", "modifier": "private static", "type": "int", "declarator": "listCount = 0", "var_name": "listCount"}], "methods": [{"identifier": "BakedItemList", "parameters": "()", "modifiers": "public", "return": "", "signature": " BakedItemList()", "full_signature": "public  BakedItemList()", "class_method_signature": "BakedItemList.BakedItemList()", "testcase": false, "constructor": true}, {"identifier": "getListName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getListName()", "full_signature": "public String getListName()", "class_method_signature": "BakedItemList.getListName()", "testcase": false, "constructor": false}, {"identifier": "setListName", "parameters": "(String listNamein)", "modifiers": "public", "return": "void", "signature": "void setListName(String listNamein)", "full_signature": "public void setListName(String listNamein)", "class_method_signature": "BakedItemList.setListName(String listNamein)", "testcase": false, "constructor": false}, {"identifier": "getItemList", "parameters": "()", "modifiers": "public", "return": "BakedItem[]", "signature": "BakedItem[] getItemList()", "full_signature": "public BakedItem[] getItemList()", "class_method_signature": "BakedItemList.getItemList()", "testcase": false, "constructor": false}, {"identifier": "setItemList", "parameters": "(BakedItem[] itemListin)", "modifiers": "public", "return": "void", "signature": "void setItemList(BakedItem[] itemListin)", "full_signature": "public void setItemList(BakedItem[] itemListin)", "class_method_signature": "BakedItemList.setItemList(BakedItem[] itemListin)", "testcase": false, "constructor": false}, {"identifier": "getItemCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getItemCount()", "full_signature": "public int getItemCount()", "class_method_signature": "BakedItemList.getItemCount()", "testcase": false, "constructor": false}, {"identifier": "setItemCount", "parameters": "(int itemCountin)", "modifiers": "public", "return": "void", "signature": "void setItemCount(int itemCountin)", "full_signature": "public void setItemCount(int itemCountin)", "class_method_signature": "BakedItemList.setItemCount(int itemCountin)", "testcase": false, "constructor": false}, {"identifier": "getExcludedRecords", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getExcludedRecords()", "full_signature": "public String[] getExcludedRecords()", "class_method_signature": "BakedItemList.getExcludedRecords()", "testcase": false, "constructor": false}, {"identifier": "setExcludedRecords", "parameters": "(String[] excludedRecordsin)", "modifiers": "public", "return": "void", "signature": "void setExcludedRecords(String[] excludedRecordsin)", "full_signature": "public void setExcludedRecords(String[] excludedRecordsin)", "class_method_signature": "BakedItemList.setExcludedRecords(String[] excludedRecordsin)", "testcase": false, "constructor": false}, {"identifier": "getExcludedCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExcludedCount()", "full_signature": "public int getExcludedCount()", "class_method_signature": "BakedItemList.getExcludedCount()", "testcase": false, "constructor": false}, {"identifier": "setExcludedCount", "parameters": "(int excludedCountin)", "modifiers": "public", "return": "void", "signature": "void setExcludedCount(int excludedCountin)", "full_signature": "public void setExcludedCount(int excludedCountin)", "class_method_signature": "BakedItemList.setExcludedCount(int excludedCountin)", "testcase": false, "constructor": false}, {"identifier": "getListCount", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getListCount()", "full_signature": "public static int getListCount()", "class_method_signature": "BakedItemList.getListCount()", "testcase": false, "constructor": false}, {"identifier": "resetListCount", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void resetListCount()", "full_signature": "public static void resetListCount()", "class_method_signature": "BakedItemList.resetListCount()", "testcase": false, "constructor": false}, {"identifier": "readItemFile", "parameters": "(String fileName)", "modifiers": "public", "return": "void", "signature": "void readItemFile(String fileName)", "full_signature": "public void readItemFile(String fileName)", "class_method_signature": "BakedItemList.readItemFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "generateReport", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateReport()", "full_signature": "public String generateReport()", "class_method_signature": "BakedItemList.generateReport()", "testcase": false, "constructor": false}, {"identifier": "generateReportByClass", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateReportByClass()", "full_signature": "public String generateReportByClass()", "class_method_signature": "BakedItemList.generateReportByClass()", "testcase": false, "constructor": false}, {"identifier": "generateReportByPrice", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateReportByPrice()", "full_signature": "public String generateReportByPrice()", "class_method_signature": "BakedItemList.generateReportByPrice()", "testcase": false, "constructor": false}, {"identifier": "generateReportByFlavor", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateReportByFlavor()", "full_signature": "public String generateReportByFlavor()", "class_method_signature": "BakedItemList.generateReportByFlavor()", "testcase": false, "constructor": false}, {"identifier": "generateExcludedRecordsReport", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateExcludedRecordsReport()", "full_signature": "public String generateExcludedRecordsReport()", "class_method_signature": "BakedItemList.generateExcludedRecordsReport()", "testcase": false, "constructor": false}], "file": "Projects/Project_10/BakedItemList.java"}, "focal_method": {"identifier": "readItemFile", "parameters": "(String fileName)", "modifiers": "public", "return": "void", "body": "public void readItemFile(String fileName) throws IOException {\n      Scanner scan = new Scanner(new File(fileName));\n      listName = scan.nextLine();\n      String[] elements;\n      char type;\n      String typeS;\n      while (scan.hasNext()) {\n         String input = scan.nextLine();\n         elements = input.split(\",\");\n         typeS = elements[0];\n         type = typeS.toUpperCase().charAt(0);\n\n         // Switch variables\n         String nameIn;\n         String flavorIn;\n         int quantityIn;\n         double crustCostIn;\n         int layersIn;\n         int tiersIn;\n         String[] ingredients = new String[50];\n         int j;\n         String[] ingredientsTrim;\n\n         switch (type) {\n            case 'C':\n               nameIn = elements[1];\n               flavorIn = elements[2];\n               quantityIn = Integer.parseInt(elements[3]);\n               j = 0;\n               for (int i = 0; i < elements.length - 4; i++) {\n                  ingredients[i] = elements[i + 4];\n                  j++;\n               }\n               ingredientsTrim = Arrays.copyOf(ingredients, j);\n               Cookie c = new Cookie(nameIn, flavorIn, quantityIn,\n                     ingredientsTrim);\n               itemList[itemCount] = c;\n               itemCount++;\n               break;\n\n            case 'P':\n               nameIn = elements[1];\n               flavorIn = elements[2];\n               quantityIn = Integer.parseInt(elements[3]);\n               crustCostIn = Double.parseDouble(elements[4]);\n               j = 0;\n               for (int i = 0; i < elements.length - 5; i++) {\n                  ingredients[i] = elements[i + 5];\n                  j++;\n               }\n               ingredientsTrim = Arrays.copyOf(ingredients, j);\n               Pie p = new Pie(nameIn, flavorIn, quantityIn, crustCostIn,\n                     ingredientsTrim);\n               itemList[itemCount] = p;\n               itemCount++;\n               break;\n\n            case 'K':\n               nameIn = elements[1];\n               flavorIn = elements[2];\n               quantityIn = Integer.parseInt(elements[3]);\n               layersIn = Integer.parseInt(elements[4]);\n               j = 0;\n               for (int i = 0; i < elements.length - 5; i++) {\n                  ingredients[i] = elements[i + 5];\n                  j++;\n               }\n               ingredientsTrim = Arrays.copyOf(ingredients, j);\n               Cake k = new Cake(nameIn, flavorIn, quantityIn, layersIn,\n                     ingredientsTrim);\n               itemList[itemCount] = k;\n               itemCount++;\n               break;\n\n            case 'W':\n               nameIn = elements[1];\n               flavorIn = elements[2];\n               quantityIn = Integer.parseInt(elements[3]);\n               layersIn = Integer.parseInt(elements[4]);\n               tiersIn = Integer.parseInt(elements[5]);\n               j = 0;\n               for (int i = 0; i < elements.length - 6; i++) {\n                  ingredients[i] = elements[i + 6];\n                  j++;\n               }\n               ingredientsTrim = Arrays.copyOf(ingredients, j);\n               WeddingCake w = new WeddingCake(nameIn, flavorIn, quantityIn,\n                     layersIn, tiersIn, ingredientsTrim);\n               itemList[itemCount] = w;\n               itemCount++;\n               break;\n\n            default:\n               excludedRecords[excludedCount] = input;\n               excludedCount++;\n               break;\n         }\n      }\n   }", "signature": "void readItemFile(String fileName)", "full_signature": "public void readItemFile(String fileName)", "class_method_signature": "BakedItemList.readItemFile(String fileName)", "testcase": false, "constructor": false, "invocations": ["nextLine", "hasNext", "nextLine", "split", "charAt", "toUpperCase", "parseInt", "copyOf", "parseInt", "parseDouble", "copyOf", "parseInt", "parseInt", "copyOf", "parseInt", "parseInt", "parseInt", "copyOf"]}, "repository": {"repo_id": 79497496, "url": "https://github.com/perryBunn/COMP1210", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 15825, "license": "MIT License"}}