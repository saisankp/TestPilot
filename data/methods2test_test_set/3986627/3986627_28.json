{"test_class": {"identifier": "ExistenceCheckTest", "superclass": "extends AbstractReviewTest", "interfaces": "", "fields": [], "file": "org.jabylon.review.standard/src/test/java/org/jabylon/review/standard/internal/ExistenceCheckTest.java"}, "test_case": {"identifier": "testReviewWithBothPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReviewWithBothPresent() {\n        Property slave = createProperty(\"key\", \"value\");\n        Property master = createProperty(\"key\", \"value\");\n        Review review = getFixture().review(null, master, slave);\n        assertNull(review);\n    }", "signature": "void testReviewWithBothPresent()", "full_signature": "@Test public void testReviewWithBothPresent()", "class_method_signature": "ExistenceCheckTest.testReviewWithBothPresent()", "testcase": true, "constructor": false, "invocations": ["createProperty", "createProperty", "review", "getFixture", "assertNull"]}, "focal_class": {"identifier": "ExistenceCheck", "superclass": "", "interfaces": "implements ReviewParticipant", "fields": [], "methods": [{"identifier": "ExistenceCheck", "parameters": "()", "modifiers": "public", "return": "", "signature": " ExistenceCheck()", "full_signature": "public  ExistenceCheck()", "class_method_signature": "ExistenceCheck.ExistenceCheck()", "testcase": false, "constructor": true}, {"identifier": "review", "parameters": "(PropertyFileDescriptor descriptor, Property master,\n            Property slave)", "modifiers": "@Override public", "return": "Review", "signature": "Review review(PropertyFileDescriptor descriptor, Property master,\n            Property slave)", "full_signature": "@Override public Review review(PropertyFileDescriptor descriptor, Property master,\n            Property slave)", "class_method_signature": "ExistenceCheck.review(PropertyFileDescriptor descriptor, Property master,\n            Property slave)", "testcase": false, "constructor": false}, {"identifier": "getReviewType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getReviewType()", "full_signature": "@Override public String getReviewType()", "class_method_signature": "ExistenceCheck.getReviewType()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(Property property)", "modifiers": "private", "return": "boolean", "signature": "boolean exists(Property property)", "full_signature": "private boolean exists(Property property)", "class_method_signature": "ExistenceCheck.exists(Property property)", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getID()", "full_signature": "@Override public String getID()", "class_method_signature": "ExistenceCheck.getID()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "ExistenceCheck.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ExistenceCheck.getName()", "testcase": false, "constructor": false}], "file": "org.jabylon.review.standard/src/main/java/org/jabylon/review/standard/internal/ExistenceCheck.java"}, "focal_method": {"identifier": "review", "parameters": "(PropertyFileDescriptor descriptor, Property master,\n            Property slave)", "modifiers": "@Override public", "return": "Review", "body": "@Override\n    public Review review(PropertyFileDescriptor descriptor, Property master,\n            Property slave) {\n        boolean masterExists = exists(master);\n        //don't check anything if master exists. Missing translations are not worth a review\n        if(masterExists)\n            return null;\n\n        if(master!=null)\n        {\n            // master exists, but has an empty value.\n            // it's alright if slave value is empty as well\n            if(!exists(slave))\n                return null;\n        }\n\n        if(slave != null)\n        {\n            Review review = PropertiesFactory.eINSTANCE.createReview();\n            review.setCreated(System.currentTimeMillis());\n            String message = \"The key ''{0}'' is missing in the template language\";\n            message = MessageFormat.format(message, slave.getKey());\n            review.setMessage(message);\n            review.setUser(\"Jabylon\");\n\t\t\treview.setReviewType(getReviewType());\n            review.setSeverity(Severity.ERROR);\n            return review;\n        }\n        return null;\n    }", "signature": "Review review(PropertyFileDescriptor descriptor, Property master,\n            Property slave)", "full_signature": "@Override public Review review(PropertyFileDescriptor descriptor, Property master,\n            Property slave)", "class_method_signature": "ExistenceCheck.review(PropertyFileDescriptor descriptor, Property master,\n            Property slave)", "testcase": false, "constructor": false, "invocations": ["exists", "exists", "createReview", "setCreated", "currentTimeMillis", "format", "getKey", "setMessage", "setUser", "setReviewType", "getReviewType", "setSeverity"]}, "repository": {"repo_id": 3986627, "url": "https://github.com/jutzig/jabylon", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 51, "size": 13400, "license": "licensed"}}