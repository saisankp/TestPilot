{"test_class": {"identifier": "TravisRestServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private TravisRestService travisRestService;", "modifier": "@Autowired\n  private", "type": "TravisRestService", "declarator": "travisRestService", "var_name": "travisRestService"}, {"original_string": "@MockBean\n  private ProfContextDumpRepository profContextDumpRepository;", "modifier": "@MockBean\n  private", "type": "ProfContextDumpRepository", "declarator": "profContextDumpRepository", "var_name": "profContextDumpRepository"}, {"original_string": "@MockBean\n  private ProjectRepository projectRepository;", "modifier": "@MockBean\n  private", "type": "ProjectRepository", "declarator": "projectRepository", "var_name": "projectRepository"}, {"original_string": "@MockBean\n  private BranchRepository branchRepository;", "modifier": "@MockBean\n  private", "type": "BranchRepository", "declarator": "branchRepository", "var_name": "branchRepository"}, {"original_string": "@MockBean\n  private BuildRepository buildRepository;", "modifier": "@MockBean\n  private", "type": "BuildRepository", "declarator": "buildRepository", "var_name": "buildRepository"}, {"original_string": "@MockBean\n  private JandyWorker jandyWorker;", "modifier": "@MockBean\n  private", "type": "JandyWorker", "declarator": "jandyWorker", "var_name": "jandyWorker"}, {"original_string": "@MockBean\n  private SampleRepository sampleRepository;", "modifier": "@MockBean\n  private", "type": "SampleRepository", "declarator": "sampleRepository", "var_name": "sampleRepository"}, {"original_string": "private BuildInfo bi;", "modifier": "private", "type": "BuildInfo", "declarator": "bi", "var_name": "bi"}, {"original_string": "private Project project;", "modifier": "private", "type": "Project", "declarator": "project", "var_name": "project"}, {"original_string": "private Branch branch;", "modifier": "private", "type": "Branch", "declarator": "branch", "var_name": "branch"}], "file": "jandy-server/src/test/java/io/jandy/service/TravisRestServiceTest.java"}, "test_case": {"identifier": "testBegin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBegin() throws Exception {\n\n    Build build = new Build();\n    build.setId(3L);\n    build.setLanguage(bi.getLang());\n    build.setTravisBuildId(bi.getBuildId());\n    build.setNumber(bi.getBuildNum());\n    build.setBranch(branch);\n    build.setNumSamples(bi.getNumSamples());\n\n    when(projectRepository.findByAccountAndName(anyString(), anyString())).thenReturn(project);\n//    when(branchRepository.findByNameAndProject_Id(anyString(), anyLong())).thenReturn(null);\n    when(branchRepository.save(any(Branch.class))).thenReturn(branch);\n//    when(buildRepository.findByTravisBuildId(anyLong())).thenReturn(null);\n    when(buildRepository.save(any(Build.class))).thenReturn(build);\n\n    travisRestService.begin(bi);\n\n    verify(jandyWorker, times(1)).start(eq(bi.getBuildId()), any());\n    verify(projectRepository, times(1)).findByAccountAndName(eq(bi.getOwnerName()), eq(bi.getRepoName()));\n    verify(branchRepository, times(1)).findByNameAndProject_Id(eq(bi.getBranchName()), eq(project.getId()));\n    verify(buildRepository, times(1)).findByTravisBuildId(eq(bi.getBuildId()));\n\n    verify(branchRepository, times(1)).save(refEq(branch, \"id\"));\n    verify(buildRepository, times(1)).save(refEq(build, \"id\"));\n  }", "signature": "void testBegin()", "full_signature": "@Test public void testBegin()", "class_method_signature": "TravisRestServiceTest.testBegin()", "testcase": true, "constructor": false, "invocations": ["setId", "setLanguage", "getLang", "setTravisBuildId", "getBuildId", "setNumber", "getBuildNum", "setBranch", "setNumSamples", "getNumSamples", "thenReturn", "when", "findByAccountAndName", "anyString", "anyString", "thenReturn", "when", "save", "any", "thenReturn", "when", "save", "any", "begin", "start", "verify", "times", "eq", "getBuildId", "any", "findByAccountAndName", "verify", "times", "eq", "getOwnerName", "eq", "getRepoName", "findByNameAndProject_Id", "verify", "times", "eq", "getBranchName", "eq", "getId", "findByTravisBuildId", "verify", "times", "eq", "getBuildId", "save", "verify", "times", "refEq", "save", "verify", "times", "refEq"]}, "focal_class": {"identifier": "TravisRestService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TravisRestService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TravisRestService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n  private ProfContextDumpRepository profContextDumpRepository;", "modifier": "@Autowired\n  private", "type": "ProfContextDumpRepository", "declarator": "profContextDumpRepository", "var_name": "profContextDumpRepository"}, {"original_string": "@Autowired\n  private BuildRepository buildRepository;", "modifier": "@Autowired\n  private", "type": "BuildRepository", "declarator": "buildRepository", "var_name": "buildRepository"}, {"original_string": "@Autowired\n  private BranchRepository branchRepository;", "modifier": "@Autowired\n  private", "type": "BranchRepository", "declarator": "branchRepository", "var_name": "branchRepository"}, {"original_string": "@Autowired\n  private ProjectRepository projectRepository;", "modifier": "@Autowired\n  private", "type": "ProjectRepository", "declarator": "projectRepository", "var_name": "projectRepository"}, {"original_string": "@Autowired\n  private SampleRepository sampleRepository;", "modifier": "@Autowired\n  private", "type": "SampleRepository", "declarator": "sampleRepository", "var_name": "sampleRepository"}, {"original_string": "@Autowired\n  private JandyWorker jandyWorker;", "modifier": "@Autowired\n  private", "type": "JandyWorker", "declarator": "jandyWorker", "var_name": "jandyWorker"}], "methods": [{"identifier": "begin", "parameters": "(BuildInfo bi)", "modifiers": "@Transactional public", "return": "void", "signature": "void begin(BuildInfo bi)", "full_signature": "@Transactional public void begin(BuildInfo bi)", "class_method_signature": "TravisRestService.begin(BuildInfo bi)", "testcase": false, "constructor": false}, {"identifier": "createProf", "parameters": "(ProfilingInfo profParams)", "modifiers": "@Transactional public", "return": "Map<String, ?>", "signature": "Map<String, ?> createProf(ProfilingInfo profParams)", "full_signature": "@Transactional public Map<String, ?> createProf(ProfilingInfo profParams)", "class_method_signature": "TravisRestService.createProf(ProfilingInfo profParams)", "testcase": false, "constructor": false}, {"identifier": "saveProf", "parameters": "(ProfilingContext profilingContext)", "modifiers": "public", "return": "void", "signature": "void saveProf(ProfilingContext profilingContext)", "full_signature": "public void saveProf(ProfilingContext profilingContext)", "class_method_signature": "TravisRestService.saveProf(ProfilingContext profilingContext)", "testcase": false, "constructor": false}, {"identifier": "updateTreeNodes", "parameters": "(List<TreeNode> treeNodes)", "modifiers": "public", "return": "void", "signature": "void updateTreeNodes(List<TreeNode> treeNodes)", "full_signature": "public void updateTreeNodes(List<TreeNode> treeNodes)", "class_method_signature": "TravisRestService.updateTreeNodes(List<TreeNode> treeNodes)", "testcase": false, "constructor": false}, {"identifier": "finish", "parameters": "(long buildId)", "modifiers": "public", "return": "void", "signature": "void finish(long buildId)", "full_signature": "public void finish(long buildId)", "class_method_signature": "TravisRestService.finish(long buildId)", "testcase": false, "constructor": false}], "file": "jandy-server/src/main/java/io/jandy/service/TravisRestService.java"}, "focal_method": {"identifier": "begin", "parameters": "(BuildInfo bi)", "modifiers": "@Transactional public", "return": "void", "body": "@Transactional\n  public void begin(BuildInfo bi) {\n    Project project = projectRepository.findByAccountAndName(bi.getOwnerName(), bi.getRepoName());\n\n    Branch branch = branchRepository.findByNameAndProject_Id(bi.getBranchName(), project.getId());\n    if (branch == null) {\n      branch = new Branch();\n      branch.setName(bi.getBranchName());\n      branch.setProject(project);\n      branch = branchRepository.save(branch);\n    }\n\n    Build build = buildRepository.findByTravisBuildId(bi.getBuildId());\n    if (build != null) {\n      profContextDumpRepository.delete(build.getProfiles());\n      sampleRepository.delete(build.getSamples());\n      buildRepository.delete(build);\n    }\n\n    build = new Build();\n    build.setLanguage(bi.getLang());\n    build.setTravisBuildId(bi.getBuildId());\n    build.setBranch(branch);\n    build.setNumber(bi.getBuildNum());\n    build.setNumSamples(bi.getNumSamples());\n    build = buildRepository.save(build);\n\n    jandyWorker.start(bi.getBuildId(), ProfService.class);\n\n    logger.info(\"start build for profiling: {}/{} -> {}\", bi.getOwnerName(), bi.getRepoName(), bi.getBuildId());\n  }", "signature": "void begin(BuildInfo bi)", "full_signature": "@Transactional public void begin(BuildInfo bi)", "class_method_signature": "TravisRestService.begin(BuildInfo bi)", "testcase": false, "constructor": false, "invocations": ["findByAccountAndName", "getOwnerName", "getRepoName", "findByNameAndProject_Id", "getBranchName", "getId", "setName", "getBranchName", "setProject", "save", "findByTravisBuildId", "getBuildId", "delete", "getProfiles", "delete", "getSamples", "delete", "setLanguage", "getLang", "setTravisBuildId", "getBuildId", "setBranch", "setNumber", "getBuildNum", "setNumSamples", "getNumSamples", "save", "start", "getBuildId", "info", "getOwnerName", "getRepoName", "getBuildId"]}, "repository": {"repo_id": 37814227, "url": "https://github.com/jandy-team/jandy", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 12, "size": 5059, "license": "licensed"}}