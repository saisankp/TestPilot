{"test_class": {"identifier": "AllocationUtilsTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [{"original_string": "private TTopologyTemplate topology;", "modifier": "private", "type": "TTopologyTemplate", "declarator": "topology", "var_name": "topology"}], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/targetallocation/util/AllocationUtilsTest.java"}, "test_case": {"identifier": "deepcopy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deepcopy() {\n        topology.getNodeTemplates().forEach(nt -> {\n            nt.setMinInstances(1);\n            nt.setMaxInstances(\"1\");\n        });\n        TTopologyTemplate clone = BackendUtils.clone(topology);\n        assertEquals(topology, clone);\n        TTopologyTemplate cloneNotEquals = AllocationUtils.deepcopy(topology);\n        assertNotEquals(topology, cloneNotEquals);\n    }", "signature": "void deepcopy()", "full_signature": "@Test public void deepcopy()", "class_method_signature": "AllocationUtilsTest.deepcopy()", "testcase": true, "constructor": false, "invocations": ["forEach", "getNodeTemplates", "setMinInstances", "setMaxInstances", "clone", "assertEquals", "deepcopy", "assertNotEquals"]}, "focal_class": {"identifier": "AllocationUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static long idCounter = 0;", "modifier": "public static", "type": "long", "declarator": "idCounter = 0", "var_name": "idCounter"}, {"original_string": "private static IRepository repository = RepositoryFactory.getRepository();", "modifier": "private static", "type": "IRepository", "declarator": "repository = RepositoryFactory.getRepository()", "var_name": "repository"}], "methods": [{"identifier": "getPermutations", "parameters": "(List<List<T>> possibilities, int max)", "modifiers": "public static", "return": "List<List<T>>", "signature": "List<List<T>> getPermutations(List<List<T>> possibilities, int max)", "full_signature": "public static List<List<T>> getPermutations(List<List<T>> possibilities, int max)", "class_method_signature": "AllocationUtils.getPermutations(List<List<T>> possibilities, int max)", "testcase": false, "constructor": false}, {"identifier": "getPermutations", "parameters": "(List<List<T>> possibilities, List<List<T>> results,\n                                            int depth, List<T> current, int max)", "modifiers": "private static", "return": "void", "signature": "void getPermutations(List<List<T>> possibilities, List<List<T>> results,\n                                            int depth, List<T> current, int max)", "full_signature": "private static void getPermutations(List<List<T>> possibilities, List<List<T>> results,\n                                            int depth, List<T> current, int max)", "class_method_signature": "AllocationUtils.getPermutations(List<List<T>> possibilities, List<List<T>> results,\n                                            int depth, List<T> current, int max)", "testcase": false, "constructor": false}, {"identifier": "generateTargetLabelTopologies", "parameters": "(TopologyWrapper topology,\n                                                                      List<List<PermutationHelper>> permutations)", "modifiers": "public static", "return": "List<TopologyWrapper>", "signature": "List<TopologyWrapper> generateTargetLabelTopologies(TopologyWrapper topology,\n                                                                      List<List<PermutationHelper>> permutations)", "full_signature": "public static List<TopologyWrapper> generateTargetLabelTopologies(TopologyWrapper topology,\n                                                                      List<List<PermutationHelper>> permutations)", "class_method_signature": "AllocationUtils.generateTargetLabelTopologies(TopologyWrapper topology,\n                                                                      List<List<PermutationHelper>> permutations)", "testcase": false, "constructor": false}, {"identifier": "getPolicyTemplates", "parameters": "(TNodeTemplate nodeTemplate)", "modifiers": "public static", "return": "List<TPolicyTemplate>", "signature": "List<TPolicyTemplate> getPolicyTemplates(TNodeTemplate nodeTemplate)", "full_signature": "public static List<TPolicyTemplate> getPolicyTemplates(TNodeTemplate nodeTemplate)", "class_method_signature": "AllocationUtils.getPolicyTemplates(TNodeTemplate nodeTemplate)", "testcase": false, "constructor": false}, {"identifier": "toPolicyTemplate", "parameters": "(TPolicy policy)", "modifiers": "public static", "return": "TPolicyTemplate", "signature": "TPolicyTemplate toPolicyTemplate(TPolicy policy)", "full_signature": "public static TPolicyTemplate toPolicyTemplate(TPolicy policy)", "class_method_signature": "AllocationUtils.toPolicyTemplate(TPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "deepcopy", "parameters": "(TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "TTopologyTemplate", "signature": "TTopologyTemplate deepcopy(TTopologyTemplate topologyTemplate)", "full_signature": "public static TTopologyTemplate deepcopy(TTopologyTemplate topologyTemplate)", "class_method_signature": "AllocationUtils.deepcopy(TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "deepcopy", "parameters": "(TTopologyTemplate topologyTemplate, boolean changeNames)", "modifiers": "public static", "return": "TTopologyTemplate", "signature": "TTopologyTemplate deepcopy(TTopologyTemplate topologyTemplate, boolean changeNames)", "full_signature": "public static TTopologyTemplate deepcopy(TTopologyTemplate topologyTemplate, boolean changeNames)", "class_method_signature": "AllocationUtils.deepcopy(TTopologyTemplate topologyTemplate, boolean changeNames)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(TNodeTemplate nodeTemplate, boolean changeNames)", "modifiers": "public static", "return": "TNodeTemplate", "signature": "TNodeTemplate clone(TNodeTemplate nodeTemplate, boolean changeNames)", "full_signature": "public static TNodeTemplate clone(TNodeTemplate nodeTemplate, boolean changeNames)", "class_method_signature": "AllocationUtils.clone(TNodeTemplate nodeTemplate, boolean changeNames)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(TRelationshipTemplate relationshipTemplate, boolean changeNames)", "modifiers": "public static", "return": "TRelationshipTemplate", "signature": "TRelationshipTemplate clone(TRelationshipTemplate relationshipTemplate, boolean changeNames)", "full_signature": "public static TRelationshipTemplate clone(TRelationshipTemplate relationshipTemplate, boolean changeNames)", "class_method_signature": "AllocationUtils.clone(TRelationshipTemplate relationshipTemplate, boolean changeNames)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/targetallocation/util/AllocationUtils.java"}, "focal_method": {"identifier": "deepcopy", "parameters": "(TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "TTopologyTemplate", "body": "public static TTopologyTemplate deepcopy(TTopologyTemplate topologyTemplate) {\n        return deepcopy(topologyTemplate, true);\n    }", "signature": "TTopologyTemplate deepcopy(TTopologyTemplate topologyTemplate)", "full_signature": "public static TTopologyTemplate deepcopy(TTopologyTemplate topologyTemplate)", "class_method_signature": "AllocationUtils.deepcopy(TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false, "invocations": ["deepcopy"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}