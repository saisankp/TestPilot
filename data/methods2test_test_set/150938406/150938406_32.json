{"test_class": {"identifier": "EvalClusterBatchOpTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Row[] rows = new Row[] {\n\t\tRow.of(0, \"0,0,0\"),\n\t\tRow.of(0, \"0.1,0.1,0.1\"),\n\t\tRow.of(0, \"0.2,0.2,0.2\"),\n\t\tRow.of(1, \"9,9,9\"),\n\t\tRow.of(1, \"9.1,9.1,9.1\"),\n\t\tRow.of(1, \"9.2,9.2,9.2\")\n\t};", "modifier": "private static", "type": "Row[]", "declarator": "rows = new Row[] {\n\t\tRow.of(0, \"0,0,0\"),\n\t\tRow.of(0, \"0.1,0.1,0.1\"),\n\t\tRow.of(0, \"0.2,0.2,0.2\"),\n\t\tRow.of(1, \"9,9,9\"),\n\t\tRow.of(1, \"9.1,9.1,9.1\"),\n\t\tRow.of(1, \"9.2,9.2,9.2\")\n\t}", "var_name": "rows"}], "file": "core/src/test/java/com/alibaba/alink/operator/batch/evaluation/EvalClusterBatchOpTest.java"}, "test_case": {"identifier": "testNoVector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNoVector() throws Exception {\n\t\tMemSourceBatchOp inOp = new MemSourceBatchOp(Arrays.asList(rows), new String[] {\"label\", \"Y\"});\n\n\t\tKMeans train = new KMeans()\n\t\t\t.setVectorCol(\"Y\")\n\t\t\t.setPredictionCol(\"pred\")\n\t\t\t.setK(2);\n\n\t\tClusterMetrics metrics = new EvalClusterBatchOp()\n\t\t\t.setPredictionCol(\"pred\")\n\t\t\t.linkFrom(train.fit(inOp).transform(inOp))\n\t\t\t.collectMetrics();\n\n\t\tAssert.assertEquals(metrics.getCount().intValue(), 6);\n\t\tAssert.assertArrayEquals(metrics.getClusterArray(), new String[]{\"0\", \"1\"});\n\t}", "signature": "void testNoVector()", "full_signature": "@Test public void testNoVector()", "class_method_signature": "EvalClusterBatchOpTest.testNoVector()", "testcase": true, "constructor": false, "invocations": ["asList", "setK", "setPredictionCol", "setVectorCol", "collectMetrics", "linkFrom", "setPredictionCol", "transform", "fit", "assertEquals", "intValue", "getCount", "assertArrayEquals", "getClusterArray"]}, "focal_class": {"identifier": "EvalClusterBatchOp", "superclass": "extends BatchOperator<EvalClusterBatchOp>", "interfaces": "implements EvalClusterParams<EvalClusterBatchOp>, EvaluationMetricsCollector<ClusterMetrics, EvalClusterBatchOp>", "fields": [{"original_string": "public static final String SILHOUETTE_COEFFICIENT = \"silhouetteCoefficient\";", "modifier": "public static final", "type": "String", "declarator": "SILHOUETTE_COEFFICIENT = \"silhouetteCoefficient\"", "var_name": "SILHOUETTE_COEFFICIENT"}, {"original_string": "private static final String METRICS_SUMMARY = \"metricsSummary\";", "modifier": "private static final", "type": "String", "declarator": "METRICS_SUMMARY = \"metricsSummary\"", "var_name": "METRICS_SUMMARY"}, {"original_string": "private static final String EVAL_RESULT = \"cluster_eval_result\";", "modifier": "private static final", "type": "String", "declarator": "EVAL_RESULT = \"cluster_eval_result\"", "var_name": "EVAL_RESULT"}, {"original_string": "private static final String LABELS = \"labels\";", "modifier": "private static final", "type": "String", "declarator": "LABELS = \"labels\"", "var_name": "LABELS"}, {"original_string": "private static final String PREDICTIONS = \"predictions\";", "modifier": "private static final", "type": "String", "declarator": "PREDICTIONS = \"predictions\"", "var_name": "PREDICTIONS"}], "methods": [{"identifier": "EvalClusterBatchOp", "parameters": "()", "modifiers": "public", "return": "", "signature": " EvalClusterBatchOp()", "full_signature": "public  EvalClusterBatchOp()", "class_method_signature": "EvalClusterBatchOp.EvalClusterBatchOp()", "testcase": false, "constructor": true}, {"identifier": "EvalClusterBatchOp", "parameters": "(Params params)", "modifiers": "public", "return": "", "signature": " EvalClusterBatchOp(Params params)", "full_signature": "public  EvalClusterBatchOp(Params params)", "class_method_signature": "EvalClusterBatchOp.EvalClusterBatchOp(Params params)", "testcase": false, "constructor": true}, {"identifier": "createMetrics", "parameters": "(List<Row> rows)", "modifiers": "@Override public", "return": "ClusterMetrics", "signature": "ClusterMetrics createMetrics(List<Row> rows)", "full_signature": "@Override public ClusterMetrics createMetrics(List<Row> rows)", "class_method_signature": "EvalClusterBatchOp.createMetrics(List<Row> rows)", "testcase": false, "constructor": false}, {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "EvalClusterBatchOp", "signature": "EvalClusterBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public EvalClusterBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "EvalClusterBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false}, {"identifier": "calLocalPredResult", "parameters": "(DataSet<Row> data)", "modifiers": "private static", "return": "DataSet<LongMatrix>", "signature": "DataSet<LongMatrix> calLocalPredResult(DataSet<Row> data)", "full_signature": "private static DataSet<LongMatrix> calLocalPredResult(DataSet<Row> data)", "class_method_signature": "EvalClusterBatchOp.calLocalPredResult(DataSet<Row> data)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/batch/evaluation/EvalClusterBatchOp.java"}, "focal_method": {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "EvalClusterBatchOp", "body": "@Override\n    public EvalClusterBatchOp linkFrom(BatchOperator<?>... inputs) {\n        BatchOperator in = checkAndGetFirst(inputs);\n        String labelColName = this.getLabelCol();\n        String predResultColName = this.getPredictionCol();\n        String vectorColName = this.getVectorCol();\n        DistanceType distanceType = getDistanceType();\n        FastDistance distance = distanceType.getFastDistance();\n\n        DataSet<Params> empty = MLEnvironmentFactory.get(getMLEnvironmentId()).getExecutionEnvironment().fromElements(\n            new Params());\n        DataSet<Params> labelMetrics = empty, vectorMetrics;\n\n        if (null != labelColName) {\n            DataSet<Row> data = in.select(new String[] {labelColName, predResultColName}).getDataSet();\n            labelMetrics = calLocalPredResult(data)\n                .reduce(new ReduceFunction<LongMatrix>() {\n                    @Override\n                    public LongMatrix reduce(LongMatrix value1, LongMatrix value2) {\n                        value1.plusEqual(value2);\n                        return value1;\n                    }\n                })\n                .map(new MapFunction<LongMatrix, Params>() {\n                    @Override\n                    public Params map(LongMatrix value) {\n                        return ClusterEvaluationUtil.extractParamsFromConfusionMatrix(value);\n                    }\n                });\n        }\n        if (null != vectorColName) {\n            DataSet<Row> data = in.select(new String[] {predResultColName, vectorColName}).getDataSet();\n            DataSet<BaseMetricsSummary> metricsSummary = data\n                .groupBy(0)\n                .reduceGroup(new CalcClusterMetricsSummary(distance))\n                .reduce(new EvaluationUtil.ReduceBaseMetrics());\n            DataSet<Tuple1<Double>> silhouetteCoefficient = data.map(\n                new RichMapFunction<Row, Tuple1<Double>>() {\n                    @Override\n                    public Tuple1<Double> map(Row value) {\n                        List<BaseMetricsSummary> list = getRuntimeContext().getBroadcastVariable(METRICS_SUMMARY);\n                        return ClusterEvaluationUtil.calSilhouetteCoefficient(value,\n                            (ClusterMetricsSummary)list.get(0));\n                    }\n                }).withBroadcastSet(metricsSummary, METRICS_SUMMARY)\n                .aggregate(Aggregations.SUM, 0);\n\n            vectorMetrics = metricsSummary.map(new ClusterEvaluationUtil.SaveDataAsParams()).withBroadcastSet(\n                silhouetteCoefficient, SILHOUETTE_COEFFICIENT);\n        } else {\n            vectorMetrics = in.select(predResultColName)\n                .getDataSet()\n                .reduceGroup(new BasicClusterParams());\n        }\n\n        DataSet<Row> out = labelMetrics\n            .union(vectorMetrics)\n            .reduceGroup(new GroupReduceFunction<Params, Row>() {\n                @Override\n                public void reduce(Iterable<Params> values, Collector<Row> out) {\n                    Params params = new Params();\n                    for (Params p : values) {\n                        params.merge(p);\n                    }\n                    out.collect(Row.of(params.toJson()));\n                }\n            });\n\n        this.setOutputTable(DataSetConversionUtil.toTable(getMLEnvironmentId(),\n            out, new TableSchema(new String[] {EVAL_RESULT}, new TypeInformation[] {Types.STRING})\n        ));\n        return this;\n    }", "signature": "EvalClusterBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public EvalClusterBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "EvalClusterBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false, "invocations": ["checkAndGetFirst", "getLabelCol", "getPredictionCol", "getVectorCol", "getDistanceType", "getFastDistance", "fromElements", "getExecutionEnvironment", "get", "getMLEnvironmentId", "getDataSet", "select", "map", "reduce", "calLocalPredResult", "plusEqual", "extractParamsFromConfusionMatrix", "getDataSet", "select", "reduce", "reduceGroup", "groupBy", "aggregate", "withBroadcastSet", "map", "getBroadcastVariable", "getRuntimeContext", "calSilhouetteCoefficient", "get", "withBroadcastSet", "map", "reduceGroup", "getDataSet", "select", "reduceGroup", "union", "merge", "collect", "of", "toJson", "setOutputTable", "toTable", "getMLEnvironmentId"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}