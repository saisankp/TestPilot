{"test_class": {"identifier": "ScoredClustersAllocationAlgorithmPreferenceForSmallHostsTest", "superclass": "extends ScoredClustersAllocationAlgorithm", "interfaces": "", "fields": [{"original_string": "private ScoredClustersAllocationAlgorithmPreferenceForSmallHosts spyAlgorithm;", "modifier": "private", "type": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts", "declarator": "spyAlgorithm", "var_name": "spyAlgorithm"}], "file": "autonomic-allocation-algorithms/src/test/java/br/com/autonomiccs/autonomic/allocation/algorithms/impl/ScoredClustersAllocationAlgorithmPreferenceForSmallHostsTest.java"}, "test_case": {"identifier": "rankHostsToStartTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rankHostsToStartTest() {\n        List<HostResources> hosts = createHostsWithScore();\n\n        Mockito.doReturn(hosts).when(spyAlgorithm).cloneListOfHosts(hosts);\n        Mockito.doReturn(hosts).when(spyAlgorithm).setEachHostScore(hosts);\n        Mockito.doNothing().when(spyAlgorithm).sortHosts(hosts);\n\n        spyAlgorithm.rankHostsToStart(hosts);\n\n        InOrder inOrder = Mockito.inOrder(spyAlgorithm);\n        inOrder.verify(spyAlgorithm).cloneListOfHosts(hosts);\n        inOrder.verify(spyAlgorithm).setEachHostScore(hosts);\n        inOrder.verify(spyAlgorithm).sortHosts(hosts);\n    }", "signature": "void rankHostsToStartTest()", "full_signature": "@Test public void rankHostsToStartTest()", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHostsTest.rankHostsToStartTest()", "testcase": true, "constructor": false, "invocations": ["createHostsWithScore", "cloneListOfHosts", "when", "doReturn", "setEachHostScore", "when", "doReturn", "sortHosts", "when", "doNothing", "rankHostsToStart", "inOrder", "cloneListOfHosts", "verify", "setEachHostScore", "verify", "sortHosts", "verify"]}, "focal_class": {"identifier": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts", "superclass": "extends AllocationAlgorithmBase", "interfaces": "", "fields": [{"original_string": "private ClusterUpwardComparator clusterUpwardScoreComparator = new ClusterUpwardComparator();", "modifier": "private", "type": "ClusterUpwardComparator", "declarator": "clusterUpwardScoreComparator = new ClusterUpwardComparator()", "var_name": "clusterUpwardScoreComparator"}, {"original_string": "@SuppressWarnings(\"unchecked\")\n    private Comparator<ClusterResources> reversedComparator = ComparatorUtils.reversedComparator(clusterUpwardScoreComparator);", "modifier": "@SuppressWarnings(\"unchecked\")\n    private", "type": "Comparator<ClusterResources>", "declarator": "reversedComparator = ComparatorUtils.reversedComparator(clusterUpwardScoreComparator)", "var_name": "reversedComparator"}, {"original_string": "protected HostUpwardComparator hostUpwardScoreComparator = new HostUpwardComparator();", "modifier": "protected", "type": "HostUpwardComparator", "declarator": "hostUpwardScoreComparator = new HostUpwardComparator()", "var_name": "hostUpwardScoreComparator"}], "methods": [{"identifier": "rankClustersToAllocation", "parameters": "(List<ClusterResourcesAvailableToStart> clustersAvailableToStart)", "modifiers": "@Override public", "return": "List<ClusterResourcesAvailableToStart>", "signature": "List<ClusterResourcesAvailableToStart> rankClustersToAllocation(List<ClusterResourcesAvailableToStart> clustersAvailableToStart)", "full_signature": "@Override public List<ClusterResourcesAvailableToStart> rankClustersToAllocation(List<ClusterResourcesAvailableToStart> clustersAvailableToStart)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.rankClustersToAllocation(List<ClusterResourcesAvailableToStart> clustersAvailableToStart)", "testcase": false, "constructor": false}, {"identifier": "setClustersScore", "parameters": "(List<ClusterResourcesAvailableToStart> clusters)", "modifiers": "protected", "return": "void", "signature": "void setClustersScore(List<ClusterResourcesAvailableToStart> clusters)", "full_signature": "protected void setClustersScore(List<ClusterResourcesAvailableToStart> clusters)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.setClustersScore(List<ClusterResourcesAvailableToStart> clusters)", "testcase": false, "constructor": false}, {"identifier": "calculateClusterScore", "parameters": "(ClusterResources cluster)", "modifiers": "protected", "return": "long", "signature": "long calculateClusterScore(ClusterResources cluster)", "full_signature": "protected long calculateClusterScore(ClusterResources cluster)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.calculateClusterScore(ClusterResources cluster)", "testcase": false, "constructor": false}, {"identifier": "sortClustersDownwardScore", "parameters": "(List<ClusterResourcesAvailableToStart> clusters)", "modifiers": "protected", "return": "void", "signature": "void sortClustersDownwardScore(List<ClusterResourcesAvailableToStart> clusters)", "full_signature": "protected void sortClustersDownwardScore(List<ClusterResourcesAvailableToStart> clusters)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.sortClustersDownwardScore(List<ClusterResourcesAvailableToStart> clusters)", "testcase": false, "constructor": false}, {"identifier": "rankHostsToStart", "parameters": "(List<HostResources> hostsResources)", "modifiers": "@Override public", "return": "List<HostResources>", "signature": "List<HostResources> rankHostsToStart(List<HostResources> hostsResources)", "full_signature": "@Override public List<HostResources> rankHostsToStart(List<HostResources> hostsResources)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.rankHostsToStart(List<HostResources> hostsResources)", "testcase": false, "constructor": false}, {"identifier": "sortHosts", "parameters": "(List<HostResources> hosts)", "modifiers": "protected", "return": "void", "signature": "void sortHosts(List<HostResources> hosts)", "full_signature": "protected void sortHosts(List<HostResources> hosts)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.sortHosts(List<HostResources> hosts)", "testcase": false, "constructor": false}, {"identifier": "setEachHostScore", "parameters": "(List<HostResources> hosts)", "modifiers": "protected", "return": "List<HostResources>", "signature": "List<HostResources> setEachHostScore(List<HostResources> hosts)", "full_signature": "protected List<HostResources> setEachHostScore(List<HostResources> hosts)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.setEachHostScore(List<HostResources> hosts)", "testcase": false, "constructor": false}, {"identifier": "calculateHostScore", "parameters": "(HostResources hostToStart)", "modifiers": "protected", "return": "double", "signature": "double calculateHostScore(HostResources hostToStart)", "full_signature": "protected double calculateHostScore(HostResources hostToStart)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.calculateHostScore(HostResources hostToStart)", "testcase": false, "constructor": false}, {"identifier": "sortHostsUpwardScore", "parameters": "(List<HostResources> hosts)", "modifiers": "protected", "return": "void", "signature": "void sortHostsUpwardScore(List<HostResources> hosts)", "full_signature": "protected void sortHostsUpwardScore(List<HostResources> hosts)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.sortHostsUpwardScore(List<HostResources> hosts)", "testcase": false, "constructor": false}], "file": "autonomic-allocation-algorithms/src/main/java/br/com/autonomiccs/autonomic/allocation/algorithms/impl/ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.java"}, "focal_method": {"identifier": "rankHostsToStart", "parameters": "(List<HostResources> hostsResources)", "modifiers": "@Override public", "return": "List<HostResources>", "body": "@Override\n    public List<HostResources> rankHostsToStart(List<HostResources> hostsResources) {\n        List<HostResources> sortedHosts = cloneListOfHosts(hostsResources);\n        setEachHostScore(sortedHosts);\n        sortHosts(sortedHosts);\n        return sortedHosts;\n    }", "signature": "List<HostResources> rankHostsToStart(List<HostResources> hostsResources)", "full_signature": "@Override public List<HostResources> rankHostsToStart(List<HostResources> hostsResources)", "class_method_signature": "ScoredClustersAllocationAlgorithmPreferenceForSmallHosts.rankHostsToStart(List<HostResources> hostsResources)", "testcase": false, "constructor": false, "invocations": ["cloneListOfHosts", "setEachHostScore", "sortHosts"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}