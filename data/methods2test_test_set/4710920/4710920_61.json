{"test_class": {"identifier": "ConsumerSignFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/filter/ConsumerSignFilterTest.java"}, "test_case": {"identifier": "testAuthEnabled", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testAuthEnabled() {\n        URL url = URL.valueOf(\"dubbo://10.10.10.10:2181\")\n                .addParameter(Constants.ACCESS_KEY_ID_KEY, \"ak\")\n                .addParameter(Constants.SECRET_ACCESS_KEY_KEY, \"sk\")\n                .addParameter(CommonConstants.APPLICATION_KEY, \"test\")\n                .addParameter(Constants.SERVICE_AUTH, true);\n        Invoker invoker = mock(Invoker.class);\n        Invocation invocation = mock(Invocation.class);\n        when(invoker.getUrl()).thenReturn(url);\n        ConsumerSignFilter consumerSignFilter = new ConsumerSignFilter();\n        consumerSignFilter.invoke(invoker, invocation);\n        verify(invocation, times(1)).setAttachment(eq(Constants.REQUEST_SIGNATURE_KEY), anyString());\n    }", "signature": "void testAuthEnabled()", "full_signature": "@Test void testAuthEnabled()", "class_method_signature": "ConsumerSignFilterTest.testAuthEnabled()", "testcase": true, "constructor": false, "invocations": ["addParameter", "addParameter", "addParameter", "addParameter", "valueOf", "mock", "mock", "thenReturn", "when", "getUrl", "invoke", "setAttachment", "verify", "times", "eq", "anyString"]}, "focal_class": {"identifier": "ConsumerSignFilter", "superclass": "", "interfaces": "implements Filter", "fields": [], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ConsumerSignFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/filter/ConsumerSignFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        URL url = invoker.getUrl();\n        boolean shouldAuth = url.getParameter(Constants.SERVICE_AUTH, false);\n        if (shouldAuth) {\n            Authenticator authenticator = ExtensionLoader.getExtensionLoader(Authenticator.class)\n                    .getExtension(url.getParameter(Constants.AUTHENTICATOR, Constants.DEFAULT_AUTHENTICATOR));\n            authenticator.sign(invocation, url);\n        }\n        return invoker.invoke(invocation);\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ConsumerSignFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getUrl", "getParameter", "getExtension", "getExtensionLoader", "getParameter", "sign", "invoke"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}