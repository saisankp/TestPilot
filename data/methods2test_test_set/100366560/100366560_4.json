{"test_class": {"identifier": "JodaTimeSingleFieldPeriodConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "JodaTimeSingleFieldPeriodConverter converter = new JodaTimeSingleFieldPeriodConverter();", "modifier": "", "type": "JodaTimeSingleFieldPeriodConverter", "declarator": "converter = new JodaTimeSingleFieldPeriodConverter()", "var_name": "converter"}], "file": "beanmother-joda-time-converter/src/test/java/io/beanmother/joda/converter/JodaTimeSingleFieldPeriodConverterTest.java"}, "test_case": {"identifier": "convert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convert() throws Exception {\n        Integer period = 5;\n\n        Seconds seconds = (Seconds) converter.convert(period, TypeToken.of(Seconds.class));\n        assertEquals(5, seconds.getSeconds());\n\n        Minutes minutes = (Minutes) converter.convert(period, TypeToken.of(Minutes.class));\n        assertEquals(5, minutes.getMinutes());\n\n        Hours hours = (Hours) converter.convert(period, TypeToken.of(Hours.class));\n        assertEquals(5, hours.getHours());\n\n        Days days = (Days) converter.convert(period, TypeToken.of(Days.class));\n        assertEquals(5, days.getDays());\n\n        Weeks weeks = (Weeks) converter.convert(period, TypeToken.of(Weeks.class));\n        assertEquals(5, weeks.getWeeks());\n\n        Months months = (Months) converter.convert(period, TypeToken.of(Months.class));\n        assertEquals(5, months.getMonths());\n\n        Years years = (Years) converter.convert(period, TypeToken.of(Years.class));\n        assertEquals(5, years.getYears());\n\n    }", "signature": "void convert()", "full_signature": "@Test public void convert()", "class_method_signature": "JodaTimeSingleFieldPeriodConverterTest.convert()", "testcase": true, "constructor": false, "invocations": ["convert", "of", "assertEquals", "getSeconds", "convert", "of", "assertEquals", "getMinutes", "convert", "of", "assertEquals", "getHours", "convert", "of", "assertEquals", "getDays", "convert", "of", "assertEquals", "getWeeks", "convert", "of", "assertEquals", "getMonths", "convert", "of", "assertEquals", "getYears"]}, "focal_class": {"identifier": "JodaTimeSingleFieldPeriodConverter", "superclass": "extends AbstractConverter", "interfaces": "", "fields": [{"original_string": "private final static StringToNumberConverter stringToNumberConverter = new StringToNumberConverter();", "modifier": "private final static", "type": "StringToNumberConverter", "declarator": "stringToNumberConverter = new StringToNumberConverter()", "var_name": "stringToNumberConverter"}, {"original_string": "private final static NumberToNumberConverter numberToNumberConverter = new NumberToNumberConverter();", "modifier": "private final static", "type": "NumberToNumberConverter", "declarator": "numberToNumberConverter = new NumberToNumberConverter()", "var_name": "numberToNumberConverter"}], "methods": [{"identifier": "convert", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "Object", "signature": "Object convert(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public Object convert(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "JodaTimeSingleFieldPeriodConverter.convert(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false}, {"identifier": "canHandle", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canHandle(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public boolean canHandle(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "JodaTimeSingleFieldPeriodConverter.canHandle(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false}], "file": "beanmother-joda-time-converter/src/main/java/io/beanmother/joda/converter/JodaTimeSingleFieldPeriodConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object convert(Object source, TypeToken<?> targetTypeToken) {\n        if (!canHandle(source, targetTypeToken)) {\n            throw new ConverterException(source, targetTypeToken.getRawType());\n        }\n\n        Integer period = null;\n        if (source instanceof Number) {\n            period = (Integer) numberToNumberConverter.convert(source, TypeToken.of(Integer.class));\n        } else if (source instanceof String) {\n            period = (Integer) stringToNumberConverter.convert(source, TypeToken.of(Integer.class));\n        }\n\n        Type targetType = targetTypeToken.getType();\n\n        if (targetType.equals(Seconds.class)) {\n            return Seconds.seconds(period);\n        } else if (targetType.equals(Minutes.class)) {\n            return Minutes.minutes(period);\n        } else if (targetType.equals(Hours.class)) {\n            return Hours.hours(period);\n        } else if (targetType.equals(Days.class)) {\n            return Days.days(period);\n        } else if (targetType.equals(Weeks.class)) {\n            return Weeks.weeks(period);\n        } else if (targetType.equals(Months.class)) {\n            return Months.months(period);\n        } else if (targetType.equals(Years.class)) {\n            return Years.years(period);\n        }\n\n        throw new ConverterException(source, targetTypeToken.getRawType());\n    }", "signature": "Object convert(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public Object convert(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "JodaTimeSingleFieldPeriodConverter.convert(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false, "invocations": ["canHandle", "getRawType", "convert", "of", "convert", "of", "getType", "equals", "seconds", "equals", "minutes", "equals", "hours", "equals", "days", "equals", "weeks", "equals", "months", "equals", "years", "getRawType"]}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}