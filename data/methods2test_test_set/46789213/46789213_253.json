{"test_class": {"identifier": "TestDistanceDemo", "superclass": "", "interfaces": "", "fields": [], "file": "demos/distance/src/test/java/dk/alexandra/fresco/demo/TestDistanceDemo.java"}, "test_case": {"identifier": "testDistanceCmdLine3PartyWithInputY", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testDistanceCmdLine3PartyWithInputY() throws Exception {\n    DistanceDemo.main(\n        new String[]{\"-i\", \"3\", \"-p\", \"1:localhost:8081\", \"-p\", \"2:localhost:8082\",\n            \"-p\", \"3:localhost:8083\", \"-s\", \"dummyArithmetic\", \"-y\", \"15\"});\n    fail();\n  }", "signature": "void testDistanceCmdLine3PartyWithInputY()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testDistanceCmdLine3PartyWithInputY()", "class_method_signature": "TestDistanceDemo.testDistanceCmdLine3PartyWithInputY()", "testcase": true, "constructor": false, "invocations": ["main", "fail"]}, "focal_class": {"identifier": "DistanceDemo", "superclass": "", "interfaces": "implements Application<BigInteger, ProtocolBuilderNumeric>", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(DistanceDemo.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DistanceDemo.class)", "var_name": "log"}, {"original_string": "private int myId;", "modifier": "private", "type": "int", "declarator": "myId", "var_name": "myId"}, {"original_string": "private int myX;", "modifier": "private", "type": "int", "declarator": "myX", "var_name": "myX"}, {"original_string": "private int myY;", "modifier": "private", "type": "int", "declarator": "myY", "var_name": "myY"}], "methods": [{"identifier": "DistanceDemo", "parameters": "(int id, int x, int y)", "modifiers": "public", "return": "", "signature": " DistanceDemo(int id, int x, int y)", "full_signature": "public  DistanceDemo(int id, int x, int y)", "class_method_signature": "DistanceDemo.DistanceDemo(int id, int x, int y)", "testcase": false, "constructor": true}, {"identifier": "buildComputation", "parameters": "(ProtocolBuilderNumeric producer)", "modifiers": "@Override public", "return": "DRes<BigInteger>", "signature": "DRes<BigInteger> buildComputation(ProtocolBuilderNumeric producer)", "full_signature": "@Override public DRes<BigInteger> buildComputation(ProtocolBuilderNumeric producer)", "class_method_signature": "DistanceDemo.buildComputation(ProtocolBuilderNumeric producer)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "DistanceDemo.main(String[] args)", "testcase": false, "constructor": false}], "file": "demos/distance/src/main/java/dk/alexandra/fresco/demo/DistanceDemo.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "body": "public static <ResourcePoolT extends ResourcePool> void main(String[] args) throws IOException {\n    CmdLineUtil<ResourcePoolT, ProtocolBuilderNumeric> cmdUtil = new CmdLineUtil<>();\n    int x = 0;\n    int y = 0;\n    cmdUtil.addOption(Option.builder(\"x\").desc(\"The integer x coordinate of this party. \"\n        + \"Note only party 1 and 2 should supply this input.\").hasArg().build());\n    cmdUtil.addOption(Option.builder(\"y\").desc(\"The integer y coordinate of this party. \"\n        + \"Note only party 1 and 2 should supply this input\").hasArg().build());\n    CommandLine cmd = cmdUtil.parse(args);\n    NetworkConfiguration networkConfiguration = cmdUtil.getNetworkConfiguration();\n\n    if (networkConfiguration.getMyId() == 1 || networkConfiguration.getMyId() == 2) {\n      if (!cmd.hasOption(\"x\") || !cmd.hasOption(\"y\")) {\n        cmdUtil.displayHelp();\n        throw new IllegalArgumentException(\"Party 1 and 2 must submit input\");\n      } else {\n        x = Integer.parseInt(cmd.getOptionValue(\"x\"));\n        y = Integer.parseInt(cmd.getOptionValue(\"y\"));\n      }\n    } else {\n      if (cmd.hasOption(\"x\") || cmd.hasOption(\"y\")) {\n        throw new IllegalArgumentException(\"Only party 1 and 2 should submit input\");\n      }\n    }\n\n    DistanceDemo distDemo = new DistanceDemo(networkConfiguration.getMyId(), x, y);\n    SecureComputationEngine<ResourcePoolT, ProtocolBuilderNumeric> sce = cmdUtil.getSce();\n    ResourcePoolT resourcePool = cmdUtil.getResourcePool();\n    BigInteger bigInteger = sce.runApplication(distDemo, resourcePool, cmdUtil.getNetwork());\n    double dist = Math.sqrt(bigInteger.doubleValue());\n    log.info(\"Distance between party 1 and 2 is: \" + dist);\n    cmdUtil.closeNetwork();\n    sce.shutdownSCE();\n\n  }", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "DistanceDemo.main(String[] args)", "testcase": false, "constructor": false, "invocations": ["addOption", "build", "hasArg", "desc", "builder", "addOption", "build", "hasArg", "desc", "builder", "parse", "getNetworkConfiguration", "getMyId", "getMyId", "hasOption", "hasOption", "displayHelp", "parseInt", "getOptionValue", "parseInt", "getOptionValue", "hasOption", "hasOption", "getMyId", "getSce", "getResourcePool", "runApplication", "getNetwork", "sqrt", "doubleValue", "info", "closeNetwork", "shutdownSCE"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}