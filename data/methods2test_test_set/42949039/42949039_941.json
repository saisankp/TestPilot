{"test_class": {"identifier": "DataBridgeManifestReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataBridgeManifestReader<DataBridgeBaseManifestDto> dataBridgeManifestReader;", "modifier": "private", "type": "DataBridgeManifestReader<DataBridgeBaseManifestDto>", "declarator": "dataBridgeManifestReader", "var_name": "dataBridgeManifestReader"}], "file": "herd-code/herd-tools/herd-tools-common/src/test/java/org/finra/herd/tools/common/databridge/DataBridgeManifestReaderTest.java"}, "test_case": {"identifier": "testReadJsonManifest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadJsonManifest() throws Exception\n    {\n        DataBridgeBaseManifestDto dataBridgeBaseManifestDto = getDataBridgeBaseManifestDto();\n\n        File file = createTempFile(new ObjectMapper().writeValueAsString(dataBridgeBaseManifestDto));\n        try\n        {\n            dataBridgeManifestReader.readJsonManifest(file);\n        }\n        catch (Exception e)\n        {\n            Assert.fail(\"unexpected exception was thrown \" + e);\n        }\n    }", "signature": "void testReadJsonManifest()", "full_signature": "@Test public void testReadJsonManifest()", "class_method_signature": "DataBridgeManifestReaderTest.testReadJsonManifest()", "testcase": true, "constructor": false, "invocations": ["getDataBridgeBaseManifestDto", "createTempFile", "writeValueAsString", "readJsonManifest", "fail"]}, "focal_class": {"identifier": "DataBridgeManifestReader", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getManifestFromReader", "parameters": "(Reader reader, ObjectMapper objectMapper)", "modifiers": "protected abstract", "return": "M", "signature": "M getManifestFromReader(Reader reader, ObjectMapper objectMapper)", "full_signature": "protected abstract M getManifestFromReader(Reader reader, ObjectMapper objectMapper)", "class_method_signature": "DataBridgeManifestReader.getManifestFromReader(Reader reader, ObjectMapper objectMapper)", "testcase": false, "constructor": false}, {"identifier": "readJsonManifest", "parameters": "(File jsonManifestFile)", "modifiers": "public", "return": "M", "signature": "M readJsonManifest(File jsonManifestFile)", "full_signature": "public M readJsonManifest(File jsonManifestFile)", "class_method_signature": "DataBridgeManifestReader.readJsonManifest(File jsonManifestFile)", "testcase": false, "constructor": false}, {"identifier": "validateManifest", "parameters": "(M manifest)", "modifiers": "protected", "return": "void", "signature": "void validateManifest(M manifest)", "full_signature": "protected void validateManifest(M manifest)", "class_method_signature": "DataBridgeManifestReader.validateManifest(M manifest)", "testcase": false, "constructor": false}], "file": "herd-code/herd-tools/herd-tools-common/src/main/java/org/finra/herd/tools/common/databridge/DataBridgeManifestReader.java"}, "focal_method": {"identifier": "readJsonManifest", "parameters": "(File jsonManifestFile)", "modifiers": "public", "return": "M", "body": "public M readJsonManifest(File jsonManifestFile) throws IOException, IllegalArgumentException\n    {\n        // Verify that the file exists and can be read.\n        HerdFileUtils.verifyFileExistsAndReadable(jsonManifestFile);\n\n        // Deserialize the JSON manifest.\n        BufferedInputStream buffer = new BufferedInputStream(new FileInputStream(jsonManifestFile));\n        BufferedReader reader = new BufferedReader(new InputStreamReader(buffer, Charsets.UTF_8));\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY);\n        objectMapper.setVisibility(PropertyAccessor.GETTER, Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.SETTER, Visibility.NONE);\n        M manifest = getManifestFromReader(reader, objectMapper);\n\n        // Validate the manifest and return it.\n        validateManifest(manifest);\n        return manifest;\n    }", "signature": "M readJsonManifest(File jsonManifestFile)", "full_signature": "public M readJsonManifest(File jsonManifestFile)", "class_method_signature": "DataBridgeManifestReader.readJsonManifest(File jsonManifestFile)", "testcase": false, "constructor": false, "invocations": ["verifyFileExistsAndReadable", "setVisibility", "setVisibility", "setVisibility", "getManifestFromReader", "validateManifest"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}