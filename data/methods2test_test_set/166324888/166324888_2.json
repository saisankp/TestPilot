{"test_class": {"identifier": "ImportKeystorePresenterTest", "superclass": "extends BaseTestCase", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ImportKeystoreContract.View view;", "modifier": "@Mock\n    private", "type": "ImportKeystoreContract.View", "declarator": "view", "var_name": "view"}, {"original_string": "private ImportKeystorePresenter presenter;", "modifier": "private", "type": "ImportKeystorePresenter", "declarator": "presenter", "var_name": "presenter"}], "file": "wallet/src/test/java/com/platon/aton/component/ui/presenter/ImportKeystorePresenterTest.java"}, "test_case": {"identifier": "importKeystore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n     public void importKeystore(){\n         String keystore = \"{\\\"address\\\":{\\\"mainnet\\\":\\\"lat1x8z5nfgjnaryutayxxkzzkrfzenpwl7k6r2a8z\\\",\\\"testnet\\\":\\\"lax1x8z5nfgjnaryutayxxkzzkrfzenpwl7k4xcjfd\\\"},\\\"id\\\":\\\"054f3f85-c00f-4f76-b707-05d8d5c81ce6\\\",\\\"version\\\":3,\\\"crypto\\\":{\\\"cipher\\\":\\\"aes-128-ctr\\\",\\\"cipherparams\\\":{\\\"iv\\\":\\\"44c541ccc02edfb61f51eeddc1c010f8\\\"},\\\"ciphertext\\\":\\\"eb5b975d540f19469b191b44405a1bddc58355562a529264140a467fedff77ca\\\",\\\"kdf\\\":\\\"scrypt\\\",\\\"kdfparams\\\":{\\\"dklen\\\":32,\\\"n\\\":16384,\\\"p\\\":1,\\\"r\\\":8,\\\"salt\\\":\\\"c2b94a06c2ededad04cb4ba68c57eb86eba6b7f52ba14849b1538a84fe8bf9f1\\\"},\\\"mac\\\":\\\"9c81f37af1921a90f98a41655866e6d7b8139fa6c844b2724c260fbf45cc8f28\\\"}}\\n\";\n         String name = \"Ella\";\n         String password = \"qq123456\";\n         presenter.importKeystore(keystore,name,password);\n\n\n     }", "signature": "void importKeystore()", "full_signature": "@Test public void importKeystore()", "class_method_signature": "ImportKeystorePresenterTest.importKeystore()", "testcase": true, "constructor": false, "invocations": ["importKeystore"]}, "focal_class": {"identifier": "ImportKeystorePresenter", "superclass": "extends BasePresenter<ImportKeystoreContract.View>", "interfaces": "implements ImportKeystoreContract.Presenter", "fields": [{"original_string": "private static final int MSG_OK = 1;", "modifier": "private static final", "type": "int", "declarator": "MSG_OK = 1", "var_name": "MSG_OK"}, {"original_string": "private static final int MSG_PASSWORD_FAILED = -1;", "modifier": "private static final", "type": "int", "declarator": "MSG_PASSWORD_FAILED = -1", "var_name": "MSG_PASSWORD_FAILED"}, {"original_string": "private static final int MSG_KEYSTORE_ERROR = -2;", "modifier": "private static final", "type": "int", "declarator": "MSG_KEYSTORE_ERROR = -2", "var_name": "MSG_KEYSTORE_ERROR"}, {"original_string": "private static final int MSG_WALLET_EXISTS = -3;", "modifier": "private static final", "type": "int", "declarator": "MSG_WALLET_EXISTS = -3", "var_name": "MSG_WALLET_EXISTS"}, {"original_string": "private Handler mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n            switch (msg.what) {\n                case MSG_OK:\n                    EventPublisher.getInstance().sendWalletNumberChangeEvent();\n                    dismissLoadingDialogImmediately();\n                    MainActivity.actionStart(currentActivity());\n                    currentActivity().finish();\n                    break;\n                case MSG_PASSWORD_FAILED:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.validPasswordError));\n                    break;\n                case MSG_KEYSTORE_ERROR:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.parsedError, string(R.string.keystore)));\n                    break;\n                case MSG_WALLET_EXISTS:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.walletExists));\n                    break;\n                default:\n                    break;\n            }\n        }\n    };", "modifier": "private", "type": "Handler", "declarator": "mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n            switch (msg.what) {\n                case MSG_OK:\n                    EventPublisher.getInstance().sendWalletNumberChangeEvent();\n                    dismissLoadingDialogImmediately();\n                    MainActivity.actionStart(currentActivity());\n                    currentActivity().finish();\n                    break;\n                case MSG_PASSWORD_FAILED:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.validPasswordError));\n                    break;\n                case MSG_KEYSTORE_ERROR:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.parsedError, string(R.string.keystore)));\n                    break;\n                case MSG_WALLET_EXISTS:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.walletExists));\n                    break;\n                default:\n                    break;\n            }\n        }\n    }", "var_name": "mHandler"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "ImportKeystorePresenter.init()", "testcase": false, "constructor": false}, {"identifier": "checkPaste", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void checkPaste()", "full_signature": "@Override public void checkPaste()", "class_method_signature": "ImportKeystorePresenter.checkPaste()", "testcase": false, "constructor": false}, {"identifier": "parseQRCode", "parameters": "(String QRCode)", "modifiers": "@Override public", "return": "void", "signature": "void parseQRCode(String QRCode)", "full_signature": "@Override public void parseQRCode(String QRCode)", "class_method_signature": "ImportKeystorePresenter.parseQRCode(String QRCode)", "testcase": false, "constructor": false}, {"identifier": "importKeystore", "parameters": "(String keystore, String name, String password)", "modifiers": "@Override public", "return": "void", "signature": "void importKeystore(String keystore, String name, String password)", "full_signature": "@Override public void importKeystore(String keystore, String name, String password)", "class_method_signature": "ImportKeystorePresenter.importKeystore(String keystore, String name, String password)", "testcase": false, "constructor": false}, {"identifier": "isExists", "parameters": "(String walletName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isExists(String walletName)", "full_signature": "@Override public boolean isExists(String walletName)", "class_method_signature": "ImportKeystorePresenter.isExists(String walletName)", "testcase": false, "constructor": false}, {"identifier": "loadDBWalletNumber", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void loadDBWalletNumber()", "full_signature": "@Override public void loadDBWalletNumber()", "class_method_signature": "ImportKeystorePresenter.loadDBWalletNumber()", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/component/ui/presenter/ImportKeystorePresenter.java"}, "focal_method": {"identifier": "importKeystore", "parameters": "(String keystore, String name, String password)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void importKeystore(String keystore, String name, String password) {\n\n        if (isExists(name)) {\n            return;\n        }\n\n        showLoadingDialog();\n        new Thread() {\n            @Override\n            public void run() {\n                int code = WalletManager.getInstance().importKeystore(keystore, name, password);\n                switch (code) {\n                    case WalletManager.CODE_OK:\n                        mHandler.sendEmptyMessage(MSG_OK);\n                        break;\n                    case WalletManager.CODE_ERROR_KEYSTORE:\n                        mHandler.sendEmptyMessage(MSG_KEYSTORE_ERROR);\n                        break;\n                    case WalletManager.CODE_ERROR_NAME:\n                        break;\n                    case WalletManager.CODE_ERROR_PASSWORD:\n                        mHandler.sendEmptyMessage(MSG_PASSWORD_FAILED);\n                        break;\n                    case WalletManager.CODE_ERROR_WALLET_EXISTS:\n                        mHandler.sendEmptyMessage(MSG_WALLET_EXISTS);\n                        break;\n                    case WalletManager.CODE_ERROR_UNKNOW:\n                        mHandler.sendEmptyMessage(MSG_PASSWORD_FAILED);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }.start();\n    }", "signature": "void importKeystore(String keystore, String name, String password)", "full_signature": "@Override public void importKeystore(String keystore, String name, String password)", "class_method_signature": "ImportKeystorePresenter.importKeystore(String keystore, String name, String password)", "testcase": false, "constructor": false, "invocations": ["isExists", "showLoadingDialog", "start", "importKeystore", "getInstance", "sendEmptyMessage", "sendEmptyMessage", "sendEmptyMessage", "sendEmptyMessage", "sendEmptyMessage"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}