{"test_class": {"identifier": "StaxPayloadMethodArgumentResolverTest", "superclass": "extends AbstractMethodArgumentResolverTestCase", "interfaces": "", "fields": [{"original_string": "private StaxPayloadMethodArgumentResolver resolver;", "modifier": "private", "type": "StaxPayloadMethodArgumentResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private MethodParameter streamParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "streamParameter", "var_name": "streamParameter"}, {"original_string": "private MethodParameter eventParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "eventParameter", "var_name": "eventParameter"}, {"original_string": "private MethodParameter invalidParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "invalidParameter", "var_name": "invalidParameter"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/server/endpoint/adapter/method/StaxPayloadMethodArgumentResolverTest.java"}, "test_case": {"identifier": "supportsParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void supportsParameter() {\n\t\tassertTrue(\"resolver does not support XMLStreamReader\", resolver.supportsParameter(streamParameter));\n\t\tassertTrue(\"resolver does not support XMLEventReader\", resolver.supportsParameter(eventParameter));\n\t\tassertFalse(\"resolver supports invalid parameter\", resolver.supportsParameter(invalidParameter));\n\t}", "signature": "void supportsParameter()", "full_signature": "@Test public void supportsParameter()", "class_method_signature": "StaxPayloadMethodArgumentResolverTest.supportsParameter()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "supportsParameter", "assertTrue", "supportsParameter", "assertFalse", "supportsParameter"]}, "focal_class": {"identifier": "StaxPayloadMethodArgumentResolver", "superclass": "extends TransformerObjectSupport", "interfaces": "implements MethodArgumentResolver", "fields": [{"original_string": "private final XMLInputFactory inputFactory = createXmlInputFactory();", "modifier": "private final", "type": "XMLInputFactory", "declarator": "inputFactory = createXmlInputFactory()", "var_name": "inputFactory"}], "methods": [{"identifier": "supportsParameter", "parameters": "(MethodParameter parameter)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsParameter(MethodParameter parameter)", "full_signature": "@Override public boolean supportsParameter(MethodParameter parameter)", "class_method_signature": "StaxPayloadMethodArgumentResolver.supportsParameter(MethodParameter parameter)", "testcase": false, "constructor": false}, {"identifier": "resolveArgument", "parameters": "(MessageContext messageContext, MethodParameter parameter)", "modifiers": "@Override public", "return": "Object", "signature": "Object resolveArgument(MessageContext messageContext, MethodParameter parameter)", "full_signature": "@Override public Object resolveArgument(MessageContext messageContext, MethodParameter parameter)", "class_method_signature": "StaxPayloadMethodArgumentResolver.resolveArgument(MessageContext messageContext, MethodParameter parameter)", "testcase": false, "constructor": false}, {"identifier": "resolveStreamReader", "parameters": "(Source requestSource)", "modifiers": "private", "return": "XMLStreamReader", "signature": "XMLStreamReader resolveStreamReader(Source requestSource)", "full_signature": "private XMLStreamReader resolveStreamReader(Source requestSource)", "class_method_signature": "StaxPayloadMethodArgumentResolver.resolveStreamReader(Source requestSource)", "testcase": false, "constructor": false}, {"identifier": "resolveEventReader", "parameters": "(Source requestSource)", "modifiers": "private", "return": "XMLEventReader", "signature": "XMLEventReader resolveEventReader(Source requestSource)", "full_signature": "private XMLEventReader resolveEventReader(Source requestSource)", "class_method_signature": "StaxPayloadMethodArgumentResolver.resolveEventReader(Source requestSource)", "testcase": false, "constructor": false}, {"identifier": "createXmlInputFactory", "parameters": "()", "modifiers": "protected", "return": "XMLInputFactory", "signature": "XMLInputFactory createXmlInputFactory()", "full_signature": "protected XMLInputFactory createXmlInputFactory()", "class_method_signature": "StaxPayloadMethodArgumentResolver.createXmlInputFactory()", "testcase": false, "constructor": false}, {"identifier": "convertToByteArrayInputStream", "parameters": "(Source source)", "modifiers": "private", "return": "ByteArrayInputStream", "signature": "ByteArrayInputStream convertToByteArrayInputStream(Source source)", "full_signature": "private ByteArrayInputStream convertToByteArrayInputStream(Source source)", "class_method_signature": "StaxPayloadMethodArgumentResolver.convertToByteArrayInputStream(Source source)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/method/StaxPayloadMethodArgumentResolver.java"}, "focal_method": {"identifier": "supportsParameter", "parameters": "(MethodParameter parameter)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean supportsParameter(MethodParameter parameter) {\n\t\tif (parameter.getParameterAnnotation(RequestPayload.class) == null) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tClass<?> parameterType = parameter.getParameterType();\n\t\t\treturn XMLStreamReader.class.equals(parameterType) || XMLEventReader.class.equals(parameterType);\n\t\t}\n\t}", "signature": "boolean supportsParameter(MethodParameter parameter)", "full_signature": "@Override public boolean supportsParameter(MethodParameter parameter)", "class_method_signature": "StaxPayloadMethodArgumentResolver.supportsParameter(MethodParameter parameter)", "testcase": false, "constructor": false, "invocations": ["getParameterAnnotation", "getParameterType", "equals", "equals"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}