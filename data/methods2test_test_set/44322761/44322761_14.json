{"test_class": {"identifier": "HouseIdTest", "superclass": "", "interfaces": "", "fields": [], "file": "thai-widget/src/test/java/nectec/thai/identity/HouseIdTest.java"}, "test_case": {"identifier": "setInvalidFormatId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setInvalidFormatId() {\n        HouseId hid;\n        hid = new HouseId(\"123456\");\n        assertFalse(\"Id's length 6 must be invalid\", hid.isValidFormat());\n        hid = new HouseId(\"1234567890\");\n        assertFalse(\"Id's length 10 must be invalid\", hid.isValidFormat());\n        hid = new HouseId(\"\");\n        assertFalse(\"Id's length 0 must be invalid\", hid.isValidFormat());\n        hid = new HouseId(\"123456789012\");\n        assertFalse(\"Id's length 12 must be invalid\", hid.isValidFormat());\n        hid = new HouseId(\"123456789012345\");\n        assertFalse(\"Id's length 15 must be invalid\", hid.isValidFormat());\n        hid = new HouseId(\"ab34/6789x1\");\n        assertFalse(\"Not only digit must be invalid\", hid.isValidFormat());\n        hid = new HouseId(\"1234x678901\");\n        assertFalse(\"Not only digit must be invalid\", hid.isValidFormat());\n        hid = new HouseId(\"-----------\");\n        assertFalse(\"only slash sign must be invalid\", hid.isValidFormat());\n    }", "signature": "void setInvalidFormatId()", "full_signature": "@Test public void setInvalidFormatId()", "class_method_signature": "HouseIdTest.setInvalidFormatId()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isValidFormat", "assertFalse", "isValidFormat", "assertFalse", "isValidFormat", "assertFalse", "isValidFormat", "assertFalse", "isValidFormat", "assertFalse", "isValidFormat", "assertFalse", "isValidFormat", "assertFalse", "isValidFormat"]}, "focal_class": {"identifier": "HouseId", "superclass": "", "interfaces": "implements Identity", "fields": [{"original_string": "public static final int LENGTH = 11;", "modifier": "public static final", "type": "int", "declarator": "LENGTH = 11", "var_name": "LENGTH"}, {"original_string": "private static final int[] MULTIPLIER_TABLE = {11, 10, 9, 8, 7, 6, 5, 4, 3, 2};", "modifier": "private static final", "type": "int[]", "declarator": "MULTIPLIER_TABLE = {11, 10, 9, 8, 7, 6, 5, 4, 3, 2}", "var_name": "MULTIPLIER_TABLE"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final nectec.thai.identity.PrettyPrinter printer = new IdPrettyPrinter() {\n            @Override protected boolean positionToInsertSeparatorBefore(int position) {\n                switch (position) {\n                    case 4:\n                    case 10:\n                        return true;\n                }\n                return false;\n            }\n        };", "modifier": "private final", "type": "nectec.thai.identity.PrettyPrinter", "declarator": "printer = new IdPrettyPrinter() {\n            @Override protected boolean positionToInsertSeparatorBefore(int position) {\n                switch (position) {\n                    case 4:\n                    case 10:\n                        return true;\n                }\n                return false;\n            }\n        }", "var_name": "printer"}], "methods": [{"identifier": "HouseId", "parameters": "(String id)", "modifiers": "public", "return": "", "signature": " HouseId(String id)", "full_signature": "public  HouseId(String id)", "class_method_signature": "HouseId.HouseId(String id)", "testcase": false, "constructor": true}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HouseId.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "HouseId.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HouseId.toString()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean validate()", "full_signature": "@Override public boolean validate()", "class_method_signature": "HouseId.validate()", "testcase": false, "constructor": false}, {"identifier": "isValidFormat", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValidFormat()", "full_signature": "@Override public boolean isValidFormat()", "class_method_signature": "HouseId.isValidFormat()", "testcase": false, "constructor": false}, {"identifier": "getCheckDigit", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getCheckDigit()", "full_signature": "protected int getCheckDigit()", "class_method_signature": "HouseId.getCheckDigit()", "testcase": false, "constructor": false}, {"identifier": "calculateCheckDigit", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int calculateCheckDigit()", "full_signature": "protected int calculateCheckDigit()", "class_method_signature": "HouseId.calculateCheckDigit()", "testcase": false, "constructor": false}, {"identifier": "prettyPrint", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String prettyPrint()", "full_signature": "@Override public String prettyPrint()", "class_method_signature": "HouseId.prettyPrint()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "HouseId.getId()", "testcase": false, "constructor": false}], "file": "thai-widget/src/main/java/nectec/thai/identity/HouseId.java"}, "focal_method": {"identifier": "isValidFormat", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override public boolean isValidFormat() {\n        return !(id.length() != LENGTH || !TextUtils.isDigitOnly(id));\n    }", "signature": "boolean isValidFormat()", "full_signature": "@Override public boolean isValidFormat()", "class_method_signature": "HouseId.isValidFormat()", "testcase": false, "constructor": false, "invocations": ["length", "isDigitOnly"]}, "repository": {"repo_id": 44322761, "url": "https://github.com/nectec-opensource/thai-widget", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 2551, "license": "licensed"}}