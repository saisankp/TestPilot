{"test_class": {"identifier": "ImageMosaicReaderTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private final static double DELTA = 1E-4;", "modifier": "private final static", "type": "double", "declarator": "DELTA = 1E-4", "var_name": "DELTA"}, {"original_string": "private final static Logger LOGGER = Logger.getLogger(ImageMosaicReaderTest.class.toString());", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(ImageMosaicReaderTest.class.toString())", "var_name": "LOGGER"}, {"original_string": "private URL rgbURL;", "modifier": "private", "type": "URL", "declarator": "rgbURL", "var_name": "rgbURL"}, {"original_string": "private URL heterogeneousGranulesURL;", "modifier": "private", "type": "URL", "declarator": "heterogeneousGranulesURL", "var_name": "heterogeneousGranulesURL"}, {"original_string": "private URL indexURL;", "modifier": "private", "type": "URL", "declarator": "indexURL", "var_name": "indexURL"}, {"original_string": "private URL index2URL;", "modifier": "private", "type": "URL", "declarator": "index2URL", "var_name": "index2URL"}, {"original_string": "private URL indexAlphaURL;", "modifier": "private", "type": "URL", "declarator": "indexAlphaURL", "var_name": "indexAlphaURL"}, {"original_string": "private URL grayURL;", "modifier": "private", "type": "URL", "declarator": "grayURL", "var_name": "grayURL"}, {"original_string": "private URL index_unique_paletteAlphaURL;", "modifier": "private", "type": "URL", "declarator": "index_unique_paletteAlphaURL", "var_name": "index_unique_paletteAlphaURL"}, {"original_string": "private URL rgbAURL;", "modifier": "private", "type": "URL", "declarator": "rgbAURL", "var_name": "rgbAURL"}, {"original_string": "private URL rgbAURLTiff;", "modifier": "private", "type": "URL", "declarator": "rgbAURLTiff", "var_name": "rgbAURLTiff"}, {"original_string": "private URL overviewURL;", "modifier": "private", "type": "URL", "declarator": "overviewURL", "var_name": "overviewURL"}, {"original_string": "static boolean INTERACTIVE;", "modifier": "static", "type": "boolean", "declarator": "INTERACTIVE", "var_name": "INTERACTIVE"}, {"original_string": "private URL timeURL;", "modifier": "private", "type": "URL", "declarator": "timeURL", "var_name": "timeURL"}, {"original_string": "private URL timeAdditionalDomainsURL;", "modifier": "private", "type": "URL", "declarator": "timeAdditionalDomainsURL", "var_name": "timeAdditionalDomainsURL"}, {"original_string": "private URL timeAdditionalDomainsRangeURL;", "modifier": "private", "type": "URL", "declarator": "timeAdditionalDomainsRangeURL", "var_name": "timeAdditionalDomainsRangeURL"}, {"original_string": "private URL timeRangesURL;", "modifier": "private", "type": "URL", "declarator": "timeRangesURL", "var_name": "timeRangesURL"}, {"original_string": "private URL imposedEnvelopeURL;", "modifier": "private", "type": "URL", "declarator": "imposedEnvelopeURL", "var_name": "imposedEnvelopeURL"}, {"original_string": "private final static String H2_SAMPLE_PROPERTIES = \"SPI=org.geotools.data.h2.H2DataStoreFactory\\n\"\n            + \"dbtype=h2\\n\" + \"Loose\\\\ bbox=true #important for performances\\n\"\n            + \"Estimated\\\\ extends=false #important for performances\\n\" + \"user=gs\\n\"\n            + \"passwd=gs\\n\" + \"validate \\\\connections=true #important for avoiding errors\\n\"\n            + \"Connection\\\\ timeout=3600\\n\"\n            + \"max \\\\connections=10 #important for performances, internal pooling\\n\"\n            + \"min \\\\connections=5  #important for performances, internal pooling\\n\";", "modifier": "private final static", "type": "String", "declarator": "H2_SAMPLE_PROPERTIES = \"SPI=org.geotools.data.h2.H2DataStoreFactory\\n\"\n            + \"dbtype=h2\\n\" + \"Loose\\\\ bbox=true #important for performances\\n\"\n            + \"Estimated\\\\ extends=false #important for performances\\n\" + \"user=gs\\n\"\n            + \"passwd=gs\\n\" + \"validate \\\\connections=true #important for avoiding errors\\n\"\n            + \"Connection\\\\ timeout=3600\\n\"\n            + \"max \\\\connections=10 #important for performances, internal pooling\\n\"\n            + \"min \\\\connections=5  #important for performances, internal pooling\\n\"", "var_name": "H2_SAMPLE_PROPERTIES"}, {"original_string": "private URL timeFormatURL;", "modifier": "private", "type": "URL", "declarator": "timeFormatURL", "var_name": "timeFormatURL"}, {"original_string": "private URL oneBitURL;", "modifier": "private", "type": "URL", "declarator": "oneBitURL", "var_name": "oneBitURL"}], "file": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/ImageMosaicReaderTest.java"}, "test_case": {"identifier": "timeTimeRangeSelection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void timeTimeRangeSelection() throws Exception {\n        final AbstractGridFormat format = TestUtils\n                .getFormat(timeAdditionalDomainsRangeURL);\n        ImageMosaicReader reader = TestUtils.getReader(timeAdditionalDomainsRangeURL, format);\n    \n        // specify a range that's below the available data \n        GridCoverage2D coverage = readCoverageInDateRange(reader, \"2008-10-20T00:00:00.000Z\", \"2008-10-25T12:00:00.000Z\");\n        assertNull(coverage);\n        \n        // specify a range that's above the available data\n        coverage = readCoverageInDateRange(reader, \"2008-11-20T00:00:00.000Z\", \"2008-11-25T12:00:00.000Z\");\n        assertNull(coverage);\n        \n        // specify a range that's in a hole where no data is available\n        coverage = readCoverageInDateRange(reader, \"2008-11-04T12:00:00.000Z\", \"2008-11-04T18:00:00.000Z\");\n        assertNull(coverage);\n        \n        // specify a range that covers it all\n        coverage = readCoverageInDateRange(reader, \"2008-10-20T00:00:00.000Z\", \"2008-11-20T00:00:00.000Z\");\n        assertNotNull(coverage);\n        \n        // specify a range that overlaps with the first range on the low side\n        coverage = readCoverageInDateRange(reader, \"2008-10-28T00:00:00.000Z\", \"2008-10-31T18:00:00.000Z\");\n        assertNotNull(coverage);\n        String fileSource = (String) coverage.getProperty(AbstractGridCoverage2DReader.FILE_SOURCE_PROPERTY);\n        assertEquals(\"temp_020_099_20081031T000000_20081103T000000_12_24\", FilenameUtils.getBaseName(fileSource));\n        \n        // specify a range that overlaps in the middle with the second range\n        coverage = readCoverageInDateRange(reader, \"2008-11-03T12:00:00.000Z\", \"2008-11-04T00:00:00.000Z\");\n        assertNotNull(coverage);\n        fileSource = (String) coverage.getProperty(AbstractGridCoverage2DReader.FILE_SOURCE_PROPERTY);\n        assertEquals(\"temp_020_099_20081101T000000_20081104T000000_12_24\", FilenameUtils.getBaseName(fileSource));\n        \n        // specify a range matching an exact start of a range\n        coverage = readCoverageInDateRange(reader, \"2008-10-31T00:00:00.000Z\", \"2008-10-31T00:00:00.000Z\");\n        assertNotNull(coverage);\n        fileSource = (String) coverage.getProperty(AbstractGridCoverage2DReader.FILE_SOURCE_PROPERTY);\n        assertEquals(\"temp_020_099_20081031T000000_20081103T000000_12_24\", FilenameUtils.getBaseName(fileSource));\n        \n        // specify a range matching an exact end of a range\n        coverage = readCoverageInDateRange(reader, \"2008-11-04T00:00:00.000Z\", \"2008-11-04T00:00:00.000Z\");\n        assertNotNull(coverage);\n        fileSource = (String) coverage.getProperty(AbstractGridCoverage2DReader.FILE_SOURCE_PROPERTY);\n        assertEquals(\"temp_020_099_20081101T000000_20081104T000000_12_24\", FilenameUtils.getBaseName(fileSource));\n    }", "signature": "void timeTimeRangeSelection()", "full_signature": "@Test public void timeTimeRangeSelection()", "class_method_signature": "ImageMosaicReaderTest.timeTimeRangeSelection()", "testcase": true, "constructor": false, "invocations": ["getFormat", "getReader", "readCoverageInDateRange", "assertNull", "readCoverageInDateRange", "assertNull", "readCoverageInDateRange", "assertNull", "readCoverageInDateRange", "assertNotNull", "readCoverageInDateRange", "assertNotNull", "getProperty", "assertEquals", "getBaseName", "readCoverageInDateRange", "assertNotNull", "getProperty", "assertEquals", "getBaseName", "readCoverageInDateRange", "assertNotNull", "getProperty", "assertEquals", "getBaseName", "readCoverageInDateRange", "assertNotNull", "getProperty", "assertEquals", "getBaseName"]}, "focal_class": {"identifier": "ImageMosaicReader", "superclass": "extends AbstractGridCoverage2DReader", "interfaces": "implements StructuredGridCoverage2DReader", "fields": [{"original_string": "Set<String> names = new HashSet<String>();", "modifier": "", "type": "Set<String>", "declarator": "names = new HashSet<String>()", "var_name": "names"}, {"original_string": "String defaultName = null;", "modifier": "", "type": "String", "declarator": "defaultName = null", "var_name": "defaultName"}, {"original_string": "public static final String UNSPECIFIED = \"_UN$PECIFIED_\";", "modifier": "public static final", "type": "String", "declarator": "UNSPECIFIED = \"_UN$PECIFIED_\"", "var_name": "UNSPECIFIED"}, {"original_string": "Map<String, RasterManager> rasterManagers = new ConcurrentHashMap<String, RasterManager>();", "modifier": "", "type": "Map<String, RasterManager>", "declarator": "rasterManagers = new ConcurrentHashMap<String, RasterManager>()", "var_name": "rasterManagers"}, {"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging.getLogger(ImageMosaicReader.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(ImageMosaicReader.class)", "var_name": "LOGGER"}, {"original_string": "URL sourceURL;", "modifier": "", "type": "URL", "declarator": "sourceURL", "var_name": "sourceURL"}, {"original_string": "File parentDirectory;", "modifier": "", "type": "File", "declarator": "parentDirectory", "var_name": "parentDirectory"}, {"original_string": "boolean expandMe;", "modifier": "", "type": "boolean", "declarator": "expandMe", "var_name": "expandMe"}, {"original_string": "PathType pathType;", "modifier": "", "type": "PathType", "declarator": "pathType", "var_name": "pathType"}, {"original_string": "ExecutorService multiThreadedLoader;", "modifier": "", "type": "ExecutorService", "declarator": "multiThreadedLoader", "var_name": "multiThreadedLoader"}, {"original_string": "String locationAttributeName=Utils.DEFAULT_LOCATION_ATTRIBUTE;", "modifier": "", "type": "String", "declarator": "locationAttributeName=Utils.DEFAULT_LOCATION_ATTRIBUTE", "var_name": "locationAttributeName"}, {"original_string": "int maxAllowedTiles=ImageMosaicFormat.MAX_ALLOWED_TILES.getDefaultValue();", "modifier": "", "type": "int", "declarator": "maxAllowedTiles=ImageMosaicFormat.MAX_ALLOWED_TILES.getDefaultValue()", "var_name": "maxAllowedTiles"}, {"original_string": "ImageReaderSpi suggestedSPI;", "modifier": "", "type": "ImageReaderSpi", "declarator": "suggestedSPI", "var_name": "suggestedSPI"}, {"original_string": "GranuleCatalog granuleCatalog;", "modifier": "", "type": "GranuleCatalog", "declarator": "granuleCatalog", "var_name": "granuleCatalog"}, {"original_string": "boolean cachingIndex;", "modifier": "", "type": "boolean", "declarator": "cachingIndex", "var_name": "cachingIndex"}, {"original_string": "boolean imposedBBox;", "modifier": "", "type": "boolean", "declarator": "imposedBBox", "var_name": "imposedBBox"}, {"original_string": "boolean heterogeneousGranules;", "modifier": "", "type": "boolean", "declarator": "heterogeneousGranules", "var_name": "heterogeneousGranules"}, {"original_string": "boolean checkAuxiliaryMetadata = false;", "modifier": "", "type": "boolean", "declarator": "checkAuxiliaryMetadata = false", "var_name": "checkAuxiliaryMetadata"}, {"original_string": "String typeName;", "modifier": "", "type": "String", "declarator": "typeName", "var_name": "typeName"}], "methods": [{"identifier": "getRasterManager", "parameters": "(String name)", "modifiers": "public", "return": "RasterManager", "signature": "RasterManager getRasterManager(String name)", "full_signature": "public RasterManager getRasterManager(String name)", "class_method_signature": "ImageMosaicReader.getRasterManager(String name)", "testcase": false, "constructor": false}, {"identifier": "getGridCoverageNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getGridCoverageNames()", "full_signature": "@Override public String[] getGridCoverageNames()", "class_method_signature": "ImageMosaicReader.getGridCoverageNames()", "testcase": false, "constructor": false}, {"identifier": "ImageMosaicReader", "parameters": "(Object source, Hints uHints)", "modifiers": "public", "return": "", "signature": " ImageMosaicReader(Object source, Hints uHints)", "full_signature": "public  ImageMosaicReader(Object source, Hints uHints)", "class_method_signature": "ImageMosaicReader.ImageMosaicReader(Object source, Hints uHints)", "testcase": false, "constructor": true}, {"identifier": "initReaderFromDescriptor", "parameters": "(final ImageMosaicDescriptor source, final Hints uHints)", "modifiers": "private", "return": "void", "signature": "void initReaderFromDescriptor(final ImageMosaicDescriptor source, final Hints uHints)", "full_signature": "private void initReaderFromDescriptor(final ImageMosaicDescriptor source, final Hints uHints)", "class_method_signature": "ImageMosaicReader.initReaderFromDescriptor(final ImageMosaicDescriptor source, final Hints uHints)", "testcase": false, "constructor": false}, {"identifier": "initReaderFromURL", "parameters": "(final Object source, final Hints hints)", "modifiers": "private", "return": "void", "signature": "void initReaderFromURL(final Object source, final Hints hints)", "full_signature": "private void initReaderFromURL(final Object source, final Hints hints)", "class_method_signature": "ImageMosaicReader.initReaderFromURL(final Object source, final Hints hints)", "testcase": false, "constructor": false}, {"identifier": "setGridGeometry", "parameters": "(final ReferencedEnvelope envelope, final GranuleCatalog catalog,\n            String typeName)", "modifiers": "private", "return": "void", "signature": "void setGridGeometry(final ReferencedEnvelope envelope, final GranuleCatalog catalog,\n            String typeName)", "full_signature": "private void setGridGeometry(final ReferencedEnvelope envelope, final GranuleCatalog catalog,\n            String typeName)", "class_method_signature": "ImageMosaicReader.setGridGeometry(final ReferencedEnvelope envelope, final GranuleCatalog catalog,\n            String typeName)", "testcase": false, "constructor": false}, {"identifier": "setGridGeometry", "parameters": "(final String typeName)", "modifiers": "private", "return": "void", "signature": "void setGridGeometry(final String typeName)", "full_signature": "private void setGridGeometry(final String typeName)", "class_method_signature": "ImageMosaicReader.setGridGeometry(final String typeName)", "testcase": false, "constructor": false}, {"identifier": "extractProperties", "parameters": "(final MosaicConfigurationBean configuration)", "modifiers": "private", "return": "void", "signature": "void extractProperties(final MosaicConfigurationBean configuration)", "full_signature": "private void extractProperties(final MosaicConfigurationBean configuration)", "class_method_signature": "ImageMosaicReader.extractProperties(final MosaicConfigurationBean configuration)", "testcase": false, "constructor": false}, {"identifier": "ImageMosaicReader", "parameters": "(Object source)", "modifiers": "public", "return": "", "signature": " ImageMosaicReader(Object source)", "full_signature": "public  ImageMosaicReader(Object source)", "class_method_signature": "ImageMosaicReader.ImageMosaicReader(Object source)", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "public", "return": "Format", "signature": "Format getFormat()", "full_signature": "public Format getFormat()", "class_method_signature": "ImageMosaicReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(GeneralParameterValue[] params)", "modifiers": "public", "return": "GridCoverage2D", "signature": "GridCoverage2D read(GeneralParameterValue[] params)", "full_signature": "public GridCoverage2D read(GeneralParameterValue[] params)", "class_method_signature": "ImageMosaicReader.read(GeneralParameterValue[] params)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String coverageName, GeneralParameterValue[] params)", "modifiers": "public", "return": "GridCoverage2D", "signature": "GridCoverage2D read(String coverageName, GeneralParameterValue[] params)", "full_signature": "public GridCoverage2D read(String coverageName, GeneralParameterValue[] params)", "class_method_signature": "ImageMosaicReader.read(String coverageName, GeneralParameterValue[] params)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(GeneralParameterValue[] params, String coverageName)", "modifiers": "private", "return": "Collection<GridCoverage2D>", "signature": "Collection<GridCoverage2D> read(GeneralParameterValue[] params, String coverageName)", "full_signature": "private Collection<GridCoverage2D> read(GeneralParameterValue[] params, String coverageName)", "class_method_signature": "ImageMosaicReader.read(GeneralParameterValue[] params, String coverageName)", "testcase": false, "constructor": false}, {"identifier": "getHints", "parameters": "()", "modifiers": "", "return": "Hints", "signature": "Hints getHints()", "full_signature": " Hints getHints()", "class_method_signature": "ImageMosaicReader.getHints()", "testcase": false, "constructor": false}, {"identifier": "getHighestRes", "parameters": "()", "modifiers": "", "return": "double[]", "signature": "double[] getHighestRes()", "full_signature": " double[] getHighestRes()", "class_method_signature": "ImageMosaicReader.getHighestRes()", "testcase": false, "constructor": false}, {"identifier": "getOverviewsResolution", "parameters": "()", "modifiers": "", "return": "double[][]", "signature": "double[][] getOverviewsResolution()", "full_signature": " double[][] getOverviewsResolution()", "class_method_signature": "ImageMosaicReader.getOverviewsResolution()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfOvervies", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getNumberOfOvervies()", "full_signature": " int getNumberOfOvervies()", "class_method_signature": "ImageMosaicReader.getNumberOfOvervies()", "testcase": false, "constructor": false}, {"identifier": "getRaster2Model", "parameters": "()", "modifiers": "", "return": "MathTransform", "signature": "MathTransform getRaster2Model()", "full_signature": " MathTransform getRaster2Model()", "class_method_signature": "ImageMosaicReader.getRaster2Model()", "testcase": false, "constructor": false}, {"identifier": "getGridCoverageFactory", "parameters": "()", "modifiers": "", "return": "GridCoverageFactory", "signature": "GridCoverageFactory getGridCoverageFactory()", "full_signature": " GridCoverageFactory getGridCoverageFactory()", "class_method_signature": "ImageMosaicReader.getGridCoverageFactory()", "testcase": false, "constructor": false}, {"identifier": "getGridCoverageCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getGridCoverageCount()", "full_signature": "@Override public int getGridCoverageCount()", "class_method_signature": "ImageMosaicReader.getGridCoverageCount()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void dispose()", "full_signature": "@Override public synchronized void dispose()", "class_method_signature": "ImageMosaicReader.dispose()", "testcase": false, "constructor": false}, {"identifier": "disposeManagers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void disposeManagers()", "full_signature": "private void disposeManagers()", "class_method_signature": "ImageMosaicReader.disposeManagers()", "testcase": false, "constructor": false}, {"identifier": "getMetadataNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getMetadataNames()", "full_signature": "@Override public String[] getMetadataNames()", "class_method_signature": "ImageMosaicReader.getMetadataNames()", "testcase": false, "constructor": false}, {"identifier": "getMetadataNames", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getMetadataNames(String coverageName)", "full_signature": "@Override public String[] getMetadataNames(String coverageName)", "class_method_signature": "ImageMosaicReader.getMetadataNames(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "getMetadataValue", "parameters": "(final String name)", "modifiers": "@Override public", "return": "String", "signature": "String getMetadataValue(final String name)", "full_signature": "@Override public String getMetadataValue(final String name)", "class_method_signature": "ImageMosaicReader.getMetadataValue(final String name)", "testcase": false, "constructor": false}, {"identifier": "getMetadataValue", "parameters": "(String coverageName, final String name)", "modifiers": "@Override public", "return": "String", "signature": "String getMetadataValue(String coverageName, final String name)", "full_signature": "@Override public String getMetadataValue(String coverageName, final String name)", "class_method_signature": "ImageMosaicReader.getMetadataValue(String coverageName, final String name)", "testcase": false, "constructor": false}, {"identifier": "getDynamicParameters", "parameters": "()", "modifiers": "@Override public", "return": "Set<ParameterDescriptor<List>>", "signature": "Set<ParameterDescriptor<List>> getDynamicParameters()", "full_signature": "@Override public Set<ParameterDescriptor<List>> getDynamicParameters()", "class_method_signature": "ImageMosaicReader.getDynamicParameters()", "testcase": false, "constructor": false}, {"identifier": "getDynamicParameters", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "Set<ParameterDescriptor<List>>", "signature": "Set<ParameterDescriptor<List>> getDynamicParameters(String coverageName)", "full_signature": "@Override public Set<ParameterDescriptor<List>> getDynamicParameters(String coverageName)", "class_method_signature": "ImageMosaicReader.getDynamicParameters(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "isParameterSupported", "parameters": "(Identifier name)", "modifiers": "public", "return": "boolean", "signature": "boolean isParameterSupported(Identifier name)", "full_signature": "public boolean isParameterSupported(Identifier name)", "class_method_signature": "ImageMosaicReader.isParameterSupported(Identifier name)", "testcase": false, "constructor": false}, {"identifier": "getNumOverviews", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "int", "signature": "int getNumOverviews(String coverageName)", "full_signature": "@Override public int getNumOverviews(String coverageName)", "class_method_signature": "ImageMosaicReader.getNumOverviews(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "getNumOverviews", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumOverviews()", "full_signature": "@Override public int getNumOverviews()", "class_method_signature": "ImageMosaicReader.getNumOverviews()", "testcase": false, "constructor": false}, {"identifier": "getReadingResolutions", "parameters": "(OverviewPolicy policy,\n            double[] requestedResolution)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] getReadingResolutions(OverviewPolicy policy,\n            double[] requestedResolution)", "full_signature": "@Override public double[] getReadingResolutions(OverviewPolicy policy,\n            double[] requestedResolution)", "class_method_signature": "ImageMosaicReader.getReadingResolutions(OverviewPolicy policy,\n            double[] requestedResolution)", "testcase": false, "constructor": false}, {"identifier": "getReadingResolutions", "parameters": "(String coverageName, OverviewPolicy policy,\n            double[] requestedResolution)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] getReadingResolutions(String coverageName, OverviewPolicy policy,\n            double[] requestedResolution)", "full_signature": "@Override public double[] getReadingResolutions(String coverageName, OverviewPolicy policy,\n            double[] requestedResolution)", "class_method_signature": "ImageMosaicReader.getReadingResolutions(String coverageName, OverviewPolicy policy,\n            double[] requestedResolution)", "testcase": false, "constructor": false}, {"identifier": "isParameterSupported", "parameters": "(String coverageName, Identifier parameterName)", "modifiers": "public", "return": "boolean", "signature": "boolean isParameterSupported(String coverageName, Identifier parameterName)", "full_signature": "public boolean isParameterSupported(String coverageName, Identifier parameterName)", "class_method_signature": "ImageMosaicReader.isParameterSupported(String coverageName, Identifier parameterName)", "testcase": false, "constructor": false}, {"identifier": "checkUnspecifiedCoverage", "parameters": "(String coverageName)", "modifiers": "private", "return": "String", "signature": "String checkUnspecifiedCoverage(String coverageName)", "full_signature": "private String checkUnspecifiedCoverage(String coverageName)", "class_method_signature": "ImageMosaicReader.checkUnspecifiedCoverage(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "addRasterManager", "parameters": "(final MosaicConfigurationBean configuration, final boolean init)", "modifiers": "protected", "return": "RasterManager", "signature": "RasterManager addRasterManager(final MosaicConfigurationBean configuration, final boolean init)", "full_signature": "protected RasterManager addRasterManager(final MosaicConfigurationBean configuration, final boolean init)", "class_method_signature": "ImageMosaicReader.addRasterManager(final MosaicConfigurationBean configuration, final boolean init)", "testcase": false, "constructor": false}, {"identifier": "getGranules", "parameters": "(final String coverageName, final boolean readOnly)", "modifiers": "@Override public", "return": "GranuleSource", "signature": "GranuleSource getGranules(final String coverageName, final boolean readOnly)", "full_signature": "@Override public GranuleSource getGranules(final String coverageName, final boolean readOnly)", "class_method_signature": "ImageMosaicReader.getGranules(final String coverageName, final boolean readOnly)", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadOnly()", "full_signature": "@Override public boolean isReadOnly()", "class_method_signature": "ImageMosaicReader.isReadOnly()", "testcase": false, "constructor": false}, {"identifier": "createCoverage", "parameters": "(String coverageName, SimpleFeatureType indexSchema)", "modifiers": "@Override public", "return": "void", "signature": "void createCoverage(String coverageName, SimpleFeatureType indexSchema)", "full_signature": "@Override public void createCoverage(String coverageName, SimpleFeatureType indexSchema)", "class_method_signature": "ImageMosaicReader.createCoverage(String coverageName, SimpleFeatureType indexSchema)", "testcase": false, "constructor": false}, {"identifier": "removeCoverage", "parameters": "(String coverageName, final boolean delete)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeCoverage(String coverageName, final boolean delete)", "full_signature": "@Override public boolean removeCoverage(String coverageName, final boolean delete)", "class_method_signature": "ImageMosaicReader.removeCoverage(String coverageName, final boolean delete)", "testcase": false, "constructor": false}, {"identifier": "removeCoverage", "parameters": "(String coverageName, final boolean forceDelete, final boolean checkForReferences)", "modifiers": "private", "return": "boolean", "signature": "boolean removeCoverage(String coverageName, final boolean forceDelete, final boolean checkForReferences)", "full_signature": "private boolean removeCoverage(String coverageName, final boolean forceDelete, final boolean checkForReferences)", "class_method_signature": "ImageMosaicReader.removeCoverage(String coverageName, final boolean forceDelete, final boolean checkForReferences)", "testcase": false, "constructor": false}, {"identifier": "getOriginalEnvelope", "parameters": "()", "modifiers": "@Override public", "return": "GeneralEnvelope", "signature": "GeneralEnvelope getOriginalEnvelope()", "full_signature": "@Override public GeneralEnvelope getOriginalEnvelope()", "class_method_signature": "ImageMosaicReader.getOriginalEnvelope()", "testcase": false, "constructor": false}, {"identifier": "getOriginalEnvelope", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "GeneralEnvelope", "signature": "GeneralEnvelope getOriginalEnvelope(String coverageName)", "full_signature": "@Override public GeneralEnvelope getOriginalEnvelope(String coverageName)", "class_method_signature": "ImageMosaicReader.getOriginalEnvelope(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "getOriginalGridRange", "parameters": "()", "modifiers": "@Override public", "return": "GridEnvelope", "signature": "GridEnvelope getOriginalGridRange()", "full_signature": "@Override public GridEnvelope getOriginalGridRange()", "class_method_signature": "ImageMosaicReader.getOriginalGridRange()", "testcase": false, "constructor": false}, {"identifier": "getOriginalGridRange", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "GridEnvelope", "signature": "GridEnvelope getOriginalGridRange(String coverageName)", "full_signature": "@Override public GridEnvelope getOriginalGridRange(String coverageName)", "class_method_signature": "ImageMosaicReader.getOriginalGridRange(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "getOriginalGridToWorld", "parameters": "(PixelInCell pixInCell)", "modifiers": "@Override public", "return": "MathTransform", "signature": "MathTransform getOriginalGridToWorld(PixelInCell pixInCell)", "full_signature": "@Override public MathTransform getOriginalGridToWorld(PixelInCell pixInCell)", "class_method_signature": "ImageMosaicReader.getOriginalGridToWorld(PixelInCell pixInCell)", "testcase": false, "constructor": false}, {"identifier": "getOriginalGridToWorld", "parameters": "(String coverageName, PixelInCell pixInCell)", "modifiers": "@Override public", "return": "MathTransform", "signature": "MathTransform getOriginalGridToWorld(String coverageName, PixelInCell pixInCell)", "full_signature": "@Override public MathTransform getOriginalGridToWorld(String coverageName, PixelInCell pixInCell)", "class_method_signature": "ImageMosaicReader.getOriginalGridToWorld(String coverageName, PixelInCell pixInCell)", "testcase": false, "constructor": false}, {"identifier": "getCoordinateReferenceSystem", "parameters": "()", "modifiers": "@Override public", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCoordinateReferenceSystem()", "full_signature": "@Override public CoordinateReferenceSystem getCoordinateReferenceSystem()", "class_method_signature": "ImageMosaicReader.getCoordinateReferenceSystem()", "testcase": false, "constructor": false}, {"identifier": "getCoordinateReferenceSystem", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCoordinateReferenceSystem(String coverageName)", "full_signature": "@Override public CoordinateReferenceSystem getCoordinateReferenceSystem(String coverageName)", "class_method_signature": "ImageMosaicReader.getCoordinateReferenceSystem(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "getImageLayout", "parameters": "()", "modifiers": "@Override public", "return": "ImageLayout", "signature": "ImageLayout getImageLayout()", "full_signature": "@Override public ImageLayout getImageLayout()", "class_method_signature": "ImageMosaicReader.getImageLayout()", "testcase": false, "constructor": false}, {"identifier": "getImageLayout", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "ImageLayout", "signature": "ImageLayout getImageLayout(String coverageName)", "full_signature": "@Override public ImageLayout getImageLayout(String coverageName)", "class_method_signature": "ImageMosaicReader.getImageLayout(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "getResolutionLevels", "parameters": "()", "modifiers": "@Override public", "return": "double[][]", "signature": "double[][] getResolutionLevels()", "full_signature": "@Override public double[][] getResolutionLevels()", "class_method_signature": "ImageMosaicReader.getResolutionLevels()", "testcase": false, "constructor": false}, {"identifier": "getResolutionLevels", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "double[][]", "signature": "double[][] getResolutionLevels(String coverageName)", "full_signature": "@Override public double[][] getResolutionLevels(String coverageName)", "class_method_signature": "ImageMosaicReader.getResolutionLevels(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "harvest", "parameters": "(String defaultCoverage, Object source, Hints hints)", "modifiers": "@Override public", "return": "List<HarvestedSource>", "signature": "List<HarvestedSource> harvest(String defaultCoverage, Object source, Hints hints)", "full_signature": "@Override public List<HarvestedSource> harvest(String defaultCoverage, Object source, Hints hints)", "class_method_signature": "ImageMosaicReader.harvest(String defaultCoverage, Object source, Hints hints)", "testcase": false, "constructor": false}, {"identifier": "singleFileList", "parameters": "(Object source)", "modifiers": "private", "return": "boolean", "signature": "boolean singleFileList(Object source)", "full_signature": "private boolean singleFileList(Object source)", "class_method_signature": "ImageMosaicReader.singleFileList(Object source)", "testcase": false, "constructor": false}, {"identifier": "getDimensionDescriptors", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "List<DimensionDescriptor>", "signature": "List<DimensionDescriptor> getDimensionDescriptors(String coverageName)", "full_signature": "@Override public List<DimensionDescriptor> getDimensionDescriptors(String coverageName)", "class_method_signature": "ImageMosaicReader.getDimensionDescriptors(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(boolean deleteData)", "modifiers": "@Override public", "return": "void", "signature": "void delete(boolean deleteData)", "full_signature": "@Override public void delete(boolean deleteData)", "class_method_signature": "ImageMosaicReader.delete(boolean deleteData)", "testcase": false, "constructor": false}, {"identifier": "removeDB", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeDB()", "full_signature": "private void removeDB()", "class_method_signature": "ImageMosaicReader.removeDB()", "testcase": false, "constructor": false}, {"identifier": "finalizeCleanup", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void finalizeCleanup()", "full_signature": "private void finalizeCleanup()", "class_method_signature": "ImageMosaicReader.finalizeCleanup()", "testcase": false, "constructor": false}, {"identifier": "removeCoverage", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeCoverage(String coverageName)", "full_signature": "@Override public boolean removeCoverage(String coverageName)", "class_method_signature": "ImageMosaicReader.removeCoverage(String coverageName)", "testcase": false, "constructor": false}], "file": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/ImageMosaicReader.java"}, "focal_method": {"identifier": "getFormat", "parameters": "()", "modifiers": "public", "return": "Format", "body": "public Format getFormat() {\n\t\treturn new ImageMosaicFormat();\n\t}", "signature": "Format getFormat()", "full_signature": "public Format getFormat()", "class_method_signature": "ImageMosaicReader.getFormat()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}