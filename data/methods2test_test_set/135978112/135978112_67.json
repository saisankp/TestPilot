{"test_class": {"identifier": "ConnectorPluginsResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Map<String, String> props = new HashMap<>();", "modifier": "private static", "type": "Map<String, String>", "declarator": "props = new HashMap<>()", "var_name": "props"}, {"original_string": "private static final ConfigInfos CONFIG_INFOS;", "modifier": "private static final", "type": "ConfigInfos", "declarator": "CONFIG_INFOS", "var_name": "CONFIG_INFOS"}, {"original_string": "private static final int ERROR_COUNT = 1;", "modifier": "private static final", "type": "int", "declarator": "ERROR_COUNT = 1", "var_name": "ERROR_COUNT"}, {"original_string": "@Mock\n    private Herder herder;", "modifier": "@Mock\n    private", "type": "Herder", "declarator": "herder", "var_name": "herder"}, {"original_string": "private ConnectorPluginsResource connectorPluginsResource;", "modifier": "private", "type": "ConnectorPluginsResource", "declarator": "connectorPluginsResource", "var_name": "connectorPluginsResource"}], "file": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java"}, "test_case": {"identifier": "testListConnectorPlugins", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testListConnectorPlugins() {\n        Set<ConnectorPluginInfo> connectorPlugins = new HashSet<>(connectorPluginsResource.listConnectorPlugins());\n        assertFalse(connectorPlugins.contains(new ConnectorPluginInfo(Connector.class.getCanonicalName())));\n        assertFalse(connectorPlugins.contains(new ConnectorPluginInfo(SourceConnector.class.getCanonicalName())));\n        assertFalse(connectorPlugins.contains(new ConnectorPluginInfo(SinkConnector.class.getCanonicalName())));\n        assertFalse(connectorPlugins.contains(new ConnectorPluginInfo(VerifiableSourceConnector.class.getCanonicalName())));\n        assertFalse(connectorPlugins.contains(new ConnectorPluginInfo(VerifiableSinkConnector.class.getCanonicalName())));\n        assertFalse(connectorPlugins.contains(new ConnectorPluginInfo(MockSourceConnector.class.getCanonicalName())));\n        assertFalse(connectorPlugins.contains(new ConnectorPluginInfo(MockSinkConnector.class.getCanonicalName())));\n        assertFalse(connectorPlugins.contains(new ConnectorPluginInfo(MockConnector.class.getCanonicalName())));\n        assertTrue(connectorPlugins.contains(new ConnectorPluginInfo(ConnectorPluginsResourceTestConnector.class.getCanonicalName())));\n    }", "signature": "void testListConnectorPlugins()", "full_signature": "@Test public void testListConnectorPlugins()", "class_method_signature": "ConnectorPluginsResourceTest.testListConnectorPlugins()", "testcase": true, "constructor": false, "invocations": ["listConnectorPlugins", "assertFalse", "contains", "getCanonicalName", "assertFalse", "contains", "getCanonicalName", "assertFalse", "contains", "getCanonicalName", "assertFalse", "contains", "getCanonicalName", "assertFalse", "contains", "getCanonicalName", "assertFalse", "contains", "getCanonicalName", "assertFalse", "contains", "getCanonicalName", "assertFalse", "contains", "getCanonicalName", "assertTrue", "contains", "getCanonicalName"]}, "focal_class": {"identifier": "ConnectorPluginsResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Herder herder;", "modifier": "private final", "type": "Herder", "declarator": "herder", "var_name": "herder"}], "methods": [{"identifier": "ConnectorPluginsResource", "parameters": "(Herder herder)", "modifiers": "public", "return": "", "signature": " ConnectorPluginsResource(Herder herder)", "full_signature": "public  ConnectorPluginsResource(Herder herder)", "class_method_signature": "ConnectorPluginsResource.ConnectorPluginsResource(Herder herder)", "testcase": false, "constructor": true}, {"identifier": "validateConfigs", "parameters": "(final @PathParam(\"connectorType\") String connType,\n                                       final Map<String, String> connectorConfig)", "modifiers": "@PUT @Path(\"/{connectorType}/config/validate\") public", "return": "ConfigInfos", "signature": "ConfigInfos validateConfigs(final @PathParam(\"connectorType\") String connType,\n                                       final Map<String, String> connectorConfig)", "full_signature": "@PUT @Path(\"/{connectorType}/config/validate\") public ConfigInfos validateConfigs(final @PathParam(\"connectorType\") String connType,\n                                       final Map<String, String> connectorConfig)", "class_method_signature": "ConnectorPluginsResource.validateConfigs(final @PathParam(\"connectorType\") String connType,\n                                       final Map<String, String> connectorConfig)", "testcase": false, "constructor": false}, {"identifier": "listConnectorPlugins", "parameters": "()", "modifiers": "@GET @Path(\"/\") public", "return": "List<ConnectorPluginInfo>", "signature": "List<ConnectorPluginInfo> listConnectorPlugins()", "full_signature": "@GET @Path(\"/\") public List<ConnectorPluginInfo> listConnectorPlugins()", "class_method_signature": "ConnectorPluginsResource.listConnectorPlugins()", "testcase": false, "constructor": false}], "file": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResource.java"}, "focal_method": {"identifier": "listConnectorPlugins", "parameters": "()", "modifiers": "@GET @Path(\"/\") public", "return": "List<ConnectorPluginInfo>", "body": "@GET\n    @Path(\"/\")\n    public List<ConnectorPluginInfo> listConnectorPlugins() {\n        return AbstractHerder.connectorPlugins();\n    }", "signature": "List<ConnectorPluginInfo> listConnectorPlugins()", "full_signature": "@GET @Path(\"/\") public List<ConnectorPluginInfo> listConnectorPlugins()", "class_method_signature": "ConnectorPluginsResource.listConnectorPlugins()", "testcase": false, "constructor": false, "invocations": ["connectorPlugins"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}