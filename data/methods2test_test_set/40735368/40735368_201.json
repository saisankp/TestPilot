{"test_class": {"identifier": "XPathUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/extension/complex/src/test/java/org/geotools/data/complex/filter/XPathUtilTest.java"}, "test_case": {"identifier": "testSteps", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSteps() throws Exception {\n        FeatureType complexType = ComplexTestData\n                .createExample01MultiValuedComplexProperty(new UniqueNameFeatureTypeFactoryImpl());\n        Name name = complexType.getName();\n        AttributeDescriptor descriptor = new AttributeDescriptorImpl(complexType, name, 0,\n                Integer.MAX_VALUE, true, null);\n\n        NamespaceSupport namespaces = new NamespaceSupport();\n        namespaces.declarePrefix(\"wq\", name.getNamespaceURI());\n        try {\n            XPathUtil.steps(descriptor, null, namespaces);\n            fail(\"passed null\");\n        } catch (NullPointerException e) {\n        }\n\n        List expected;\n        String xpath;\n\n        xpath = \"/\";\n        assertEquals(1, XPathUtil.steps(descriptor, xpath, namespaces).size());\n        XPathUtil.Step step = (XPathUtil.Step) XPathUtil.steps(descriptor, xpath, namespaces).get(0);\n        QName rootQName = new QName(name.getNamespaceURI(), name.getLocalPart());\n        assertEquals(rootQName, step.getName());\n\n        expected = Collections.singletonList(new XPathUtil.Step(rootQName, 1));\n        xpath = \"wq_plus\";\n        assertEquals(expected, XPathUtil.steps(descriptor, xpath, namespaces));\n\n        expected = Collections.singletonList(new XPathUtil.Step(rootQName, 1));\n        xpath = \"/wq_plus\";\n        assertEquals(expected, XPathUtil.steps(descriptor, xpath, namespaces));\n\n        expected = Collections.singletonList(new XPathUtil.Step(rootQName, 1));\n        xpath = \"wq_plus/measurement/result/../../measurement/determinand_description/../..\";\n        assertEquals(expected, XPathUtil.steps(descriptor, xpath, namespaces));\n\n        expected = Arrays.asList(new XPathUtil.Step[] {\n                new XPathUtil.Step(new QName(rootQName.getNamespaceURI(), \"measurement\"), 2),\n                new XPathUtil.Step(new QName(rootQName.getNamespaceURI(), \"result\"), 1) });\n\n        xpath = \"wq_plus/measurement/result/../../measurement[2]/result\";\n        assertEquals(expected, XPathUtil.steps(descriptor, xpath, namespaces));\n\n        expected = Arrays.asList(new XPathUtil.Step[] {\n                new XPathUtil.Step(new QName(rootQName.getNamespaceURI(), \"measurement\"), 1),\n                new XPathUtil.Step(new QName(rootQName.getNamespaceURI(), \"result\"), 1) });\n        xpath = \"wq_plus/measurement/result/../result/.\";\n        assertEquals(expected, XPathUtil.steps(descriptor, xpath, namespaces));\n\n        expected = Arrays.asList(new XPathUtil.Step[] { new XPathUtil.Step(new QName(rootQName\n                .getNamespaceURI(), \"measurement\"), 5) });\n        xpath = \"measurement/result/../../measurement[5]\";\n        assertEquals(expected, XPathUtil.steps(descriptor, xpath, namespaces));\n    }", "signature": "void testSteps()", "full_signature": "@Test public void testSteps()", "class_method_signature": "XPathUtilTest.testSteps()", "testcase": true, "constructor": false, "invocations": ["createExample01MultiValuedComplexProperty", "getName", "declarePrefix", "getNamespaceURI", "steps", "fail", "assertEquals", "size", "steps", "get", "steps", "getNamespaceURI", "getLocalPart", "assertEquals", "getName", "singletonList", "assertEquals", "steps", "singletonList", "assertEquals", "steps", "singletonList", "assertEquals", "steps", "asList", "getNamespaceURI", "getNamespaceURI", "assertEquals", "steps", "asList", "getNamespaceURI", "getNamespaceURI", "assertEquals", "steps", "asList", "getNamespaceURI", "assertEquals", "steps"]}, "focal_class": {"identifier": "XPathUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging.getLogger(XPathUtil.class\n            .getPackage().getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(XPathUtil.class\n            .getPackage().getName())", "var_name": "LOGGER"}], "methods": [{"identifier": "splitPath", "parameters": "(String s)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> splitPath(String s)", "full_signature": "private static List<String> splitPath(String s)", "class_method_signature": "XPathUtil.splitPath(String s)", "testcase": false, "constructor": false}, {"identifier": "rootElementSteps", "parameters": "(final AttributeDescriptor rootElement,\n            final NamespaceSupport namespaces)", "modifiers": "public static", "return": "StepList", "signature": "StepList rootElementSteps(final AttributeDescriptor rootElement,\n            final NamespaceSupport namespaces)", "full_signature": "public static StepList rootElementSteps(final AttributeDescriptor rootElement,\n            final NamespaceSupport namespaces)", "class_method_signature": "XPathUtil.rootElementSteps(final AttributeDescriptor rootElement,\n            final NamespaceSupport namespaces)", "testcase": false, "constructor": false}, {"identifier": "steps", "parameters": "(final AttributeDescriptor root, final String xpathExpression,\n            final NamespaceSupport namespaces)", "modifiers": "public static", "return": "StepList", "signature": "StepList steps(final AttributeDescriptor root, final String xpathExpression,\n            final NamespaceSupport namespaces)", "full_signature": "public static StepList steps(final AttributeDescriptor root, final String xpathExpression,\n            final NamespaceSupport namespaces)", "class_method_signature": "XPathUtil.steps(final AttributeDescriptor root, final String xpathExpression,\n            final NamespaceSupport namespaces)", "testcase": false, "constructor": false}, {"identifier": "deglose", "parameters": "(final String prefixedName, final AttributeDescriptor root,\n            final NamespaceSupport namespaces, boolean isXmlAttribute)", "modifiers": "private static", "return": "QName", "signature": "QName deglose(final String prefixedName, final AttributeDescriptor root,\n            final NamespaceSupport namespaces, boolean isXmlAttribute)", "full_signature": "private static QName deglose(final String prefixedName, final AttributeDescriptor root,\n            final NamespaceSupport namespaces, boolean isXmlAttribute)", "class_method_signature": "XPathUtil.deglose(final String prefixedName, final AttributeDescriptor root,\n            final NamespaceSupport namespaces, boolean isXmlAttribute)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Name targetNodeName, StepList targetXPath)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(Name targetNodeName, StepList targetXPath)", "full_signature": "public static boolean equals(Name targetNodeName, StepList targetXPath)", "class_method_signature": "XPathUtil.equals(Name targetNodeName, StepList targetXPath)", "testcase": false, "constructor": false}], "file": "modules/extension/complex/src/main/java/org/geotools/data/complex/filter/XPathUtil.java"}, "focal_method": {"identifier": "steps", "parameters": "(final AttributeDescriptor root, final String xpathExpression,\n            final NamespaceSupport namespaces)", "modifiers": "public static", "return": "StepList", "body": "public static StepList steps(final AttributeDescriptor root, final String xpathExpression,\n            final NamespaceSupport namespaces) throws IllegalArgumentException {\n\n        if (root == null) {\n            throw new NullPointerException(\"root\");\n        }\n\n        if (xpathExpression == null) {\n            throw new NullPointerException(\"xpathExpression\");\n        }\n\n        String expression = xpathExpression.trim();\n\n        if (\"\".equals(expression)) {\n            throw new IllegalArgumentException(\"expression is empty\");\n        }\n\n        StepList steps = new StepList();\n\n        if (\"/\".equals(expression)) {\n            expression = root.getName().getLocalPart();\n        }\n\n        if (expression.startsWith(\"/\")) {\n            expression = expression.substring(1);\n        }\n\n        final List<String> partialSteps = splitPath(expression);\n\n        if (partialSteps.size() == 0) {\n            throw new IllegalArgumentException(\"no steps provided\");\n        }\n\n        int startIndex = 0;\n\n        for (int i = startIndex; i < partialSteps.size(); i++) {\n\n            String step = partialSteps.get(i);\n            if (\"..\".equals(step)) {\n                steps.remove(steps.size() - 1);\n            } else if (\".\".equals(step)) {\n                continue;\n            } else {\n                int index = 1;\n                boolean isXmlAttribute = false;\n                boolean isIndexed = false;\n                String predicate = null;\n                String stepName = step;\n                if (step.indexOf('[') != -1) {\n                    int start = step.indexOf('[');\n                    int end = step.indexOf(']');\n                    stepName = step.substring(0, start);\n                    String s = step.substring(start + 1, end);\n                    Scanner scanner = new Scanner(s);\n                    if (scanner.hasNextInt()) {\n                        index = scanner.nextInt();\n                        isIndexed = true;\n                    } else {\n                        predicate = s;\n                    }\n                }\n                if (step.charAt(0) == '@') {\n                    isXmlAttribute = true;\n                    stepName = stepName.substring(1);\n                }\n                QName qName = deglose(stepName, root, namespaces, isXmlAttribute);\n                if (predicate == null) {\n                    steps.add(new Step(qName, index, isXmlAttribute, isIndexed));\n                } else {\n                    steps.add(new Step(qName, isXmlAttribute, predicate));\n                }\n                 \n            }\n            //            \n            // if (step.indexOf('[') != -1) {\n            // int start = step.indexOf('[');\n            // int end = step.indexOf(']');\n            // String stepName = step.substring(0, start);\n            // int stepIndex = Integer.parseInt(step.substring(start + 1, end));\n            // QName qName = deglose(stepName, root, namespaces);\n            // steps.add(new Step(qName, stepIndex));\n            // } else if (\"..\".equals(step)) {\n            // steps.remove(steps.size() - 1);\n            // } else if (\".\".equals(step)) {\n            // continue;\n            // } else {\n            // QName qName = deglose(step, root, namespaces);\n            // steps.add(new Step(qName, 1));\n            // }\n        }\n        \n        // XPath simplification phase: if the xpath expression contains more\n        // nodes\n        // than the root node itself, and the root node is present, remove the\n        // root\n        // node as it is redundant\n        if (root != null && steps.size() > 1) {\n            Step step = (Step) steps.get(0);\n            Name rootName = root.getName();\n            QName stepName = step.getName();\n            if (Types.equals(rootName, stepName)) {\n                LOGGER.fine(\"removing root name from xpath \" + steps + \" as it is redundant\");\n                steps.remove(0);\n            }\n        }\n        \n        return steps;\n    }", "signature": "StepList steps(final AttributeDescriptor root, final String xpathExpression,\n            final NamespaceSupport namespaces)", "full_signature": "public static StepList steps(final AttributeDescriptor root, final String xpathExpression,\n            final NamespaceSupport namespaces)", "class_method_signature": "XPathUtil.steps(final AttributeDescriptor root, final String xpathExpression,\n            final NamespaceSupport namespaces)", "testcase": false, "constructor": false, "invocations": ["trim", "equals", "equals", "getLocalPart", "getName", "startsWith", "substring", "splitPath", "size", "size", "get", "equals", "remove", "size", "equals", "indexOf", "indexOf", "indexOf", "substring", "substring", "hasNextInt", "nextInt", "charAt", "substring", "deglose", "add", "add", "size", "get", "getName", "getName", "equals", "fine", "remove"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}