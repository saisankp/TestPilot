{"test_class": {"identifier": "EphemerisModuleHandlerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private @NonNullByDefault({}) EphemerisModuleHandlerFactory factory;", "modifier": "private @NonNullByDefault({})", "type": "EphemerisModuleHandlerFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private @NonNullByDefault({}) Module moduleMock;", "modifier": "private @NonNullByDefault({})", "type": "Module", "declarator": "moduleMock", "var_name": "moduleMock"}], "file": "bundles/org.openhab.core.automation/src/test/java/org/openhab/core/automation/internal/module/factory/EphemerisModuleHandlerFactoryTest.java"}, "test_case": {"identifier": "testFactoryCreatesModuleHandlerForDaysetCondition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFactoryCreatesModuleHandlerForDaysetCondition() {\n        when(moduleMock.getTypeUID()).thenReturn(EphemerisConditionHandler.DAYSET_MODULE_TYPE_ID);\n\n        when(moduleMock.getConfiguration()).thenReturn(new Configuration(Map.of(\"dayset\", \"school\")));\n        ModuleHandler handler = factory.internalCreate(moduleMock, \"My second rule\");\n        assertThat(handler, is(notNullValue()));\n        assertThat(handler, instanceOf(EphemerisConditionHandler.class));\n    }", "signature": "void testFactoryCreatesModuleHandlerForDaysetCondition()", "full_signature": "@Test public void testFactoryCreatesModuleHandlerForDaysetCondition()", "class_method_signature": "EphemerisModuleHandlerFactoryTest.testFactoryCreatesModuleHandlerForDaysetCondition()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getTypeUID", "thenReturn", "when", "getConfiguration", "of", "internalCreate", "assertThat", "is", "notNullValue", "assertThat", "instanceOf"]}, "focal_class": {"identifier": "EphemerisModuleHandlerFactory", "superclass": "extends BaseModuleHandlerFactory", "interfaces": "implements ModuleHandlerFactory", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(EphemerisModuleHandlerFactory.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(EphemerisModuleHandlerFactory.class)", "var_name": "logger"}, {"original_string": "private static final Collection<String> TYPES = List.of(EphemerisConditionHandler.HOLIDAY_MODULE_TYPE_ID,\n            EphemerisConditionHandler.WEEKEND_MODULE_TYPE_ID, EphemerisConditionHandler.WEEKDAY_MODULE_TYPE_ID,\n            EphemerisConditionHandler.DAYSET_MODULE_TYPE_ID);", "modifier": "private static final", "type": "Collection<String>", "declarator": "TYPES = List.of(EphemerisConditionHandler.HOLIDAY_MODULE_TYPE_ID,\n            EphemerisConditionHandler.WEEKEND_MODULE_TYPE_ID, EphemerisConditionHandler.WEEKDAY_MODULE_TYPE_ID,\n            EphemerisConditionHandler.DAYSET_MODULE_TYPE_ID)", "var_name": "TYPES"}, {"original_string": "private final EphemerisManager ephemerisManager;", "modifier": "private final", "type": "EphemerisManager", "declarator": "ephemerisManager", "var_name": "ephemerisManager"}], "methods": [{"identifier": "EphemerisModuleHandlerFactory", "parameters": "(final @Reference EphemerisManager ephemerisManager)", "modifiers": "@Activate public", "return": "", "signature": " EphemerisModuleHandlerFactory(final @Reference EphemerisManager ephemerisManager)", "full_signature": "@Activate public  EphemerisModuleHandlerFactory(final @Reference EphemerisManager ephemerisManager)", "class_method_signature": "EphemerisModuleHandlerFactory.EphemerisModuleHandlerFactory(final @Reference EphemerisManager ephemerisManager)", "testcase": false, "constructor": true}, {"identifier": "deactivate", "parameters": "()", "modifiers": "@Override @Deactivate protected", "return": "void", "signature": "void deactivate()", "full_signature": "@Override @Deactivate protected void deactivate()", "class_method_signature": "EphemerisModuleHandlerFactory.deactivate()", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "()", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getTypes()", "full_signature": "@Override public Collection<String> getTypes()", "class_method_signature": "EphemerisModuleHandlerFactory.getTypes()", "testcase": false, "constructor": false}, {"identifier": "internalCreate", "parameters": "(final Module module, final String ruleUID)", "modifiers": "@Override protected @Nullable", "return": "ModuleHandler", "signature": "ModuleHandler internalCreate(final Module module, final String ruleUID)", "full_signature": "@Override protected @Nullable ModuleHandler internalCreate(final Module module, final String ruleUID)", "class_method_signature": "EphemerisModuleHandlerFactory.internalCreate(final Module module, final String ruleUID)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/factory/EphemerisModuleHandlerFactory.java"}, "focal_method": {"identifier": "internalCreate", "parameters": "(final Module module, final String ruleUID)", "modifiers": "@Override protected @Nullable", "return": "ModuleHandler", "body": "@Override\n    protected @Nullable ModuleHandler internalCreate(final Module module, final String ruleUID) {\n        final String moduleTypeUID = module.getTypeUID();\n        logger.trace(\"create {} -> {} : {}\", module.getId(), moduleTypeUID, ruleUID);\n\n        if (module instanceof Condition) {\n            switch (moduleTypeUID) {\n                case EphemerisConditionHandler.HOLIDAY_MODULE_TYPE_ID:\n                case EphemerisConditionHandler.WEEKEND_MODULE_TYPE_ID:\n                case EphemerisConditionHandler.WEEKDAY_MODULE_TYPE_ID:\n                case EphemerisConditionHandler.DAYSET_MODULE_TYPE_ID:\n                    return new EphemerisConditionHandler((Condition) module, ephemerisManager);\n            }\n        }\n\n        logger.error(\"The ModuleHandler is not supported: {}\", moduleTypeUID);\n        return null;\n    }", "signature": "ModuleHandler internalCreate(final Module module, final String ruleUID)", "full_signature": "@Override protected @Nullable ModuleHandler internalCreate(final Module module, final String ruleUID)", "class_method_signature": "EphemerisModuleHandlerFactory.internalCreate(final Module module, final String ruleUID)", "testcase": false, "constructor": false, "invocations": ["getTypeUID", "trace", "getId", "error"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}