{"test_class": {"identifier": "JsonWriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "json/src/test/java/tech/tablesaw/io/json/JsonWriterTest.java"}, "test_case": {"identifier": "arrayOfArraysWithHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void arrayOfArraysWithHeader() throws IOException {\n    String json =\n        \"[[\\\"Date\\\",\\\"Value\\\"],[1453438800000,-2.144],[1454043600000,-2.976],[1454648400000,-2.9541]]\";\n    Table table = Table.read().string(json, \"json\");\n    StringWriter writer = new StringWriter();\n    table\n        .write()\n        .usingOptions(JsonWriteOptions.builder(writer).asObjects(false).header(true).build());\n    assertEquals(json, writer.toString());\n  }", "signature": "void arrayOfArraysWithHeader()", "full_signature": "@Test public void arrayOfArraysWithHeader()", "class_method_signature": "JsonWriterTest.arrayOfArraysWithHeader()", "testcase": true, "constructor": false, "invocations": ["string", "read", "usingOptions", "write", "build", "header", "asObjects", "builder", "assertEquals", "toString"]}, "focal_class": {"identifier": "JsonWriter", "superclass": "", "interfaces": "implements DataWriter<JsonWriteOptions>", "fields": [{"original_string": "private static final JsonWriter INSTANCE = new JsonWriter();", "modifier": "private static final", "type": "JsonWriter", "declarator": "INSTANCE = new JsonWriter()", "var_name": "INSTANCE"}, {"original_string": "private static final ObjectMapper mapper =\n      new ObjectMapper().registerModule(new JavaTimeModule());", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper =\n      new ObjectMapper().registerModule(new JavaTimeModule())", "var_name": "mapper"}], "methods": [{"identifier": "register", "parameters": "(WriterRegistry registry)", "modifiers": "public static", "return": "void", "signature": "void register(WriterRegistry registry)", "full_signature": "public static void register(WriterRegistry registry)", "class_method_signature": "JsonWriter.register(WriterRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Table table, JsonWriteOptions options)", "modifiers": "public", "return": "void", "signature": "void write(Table table, JsonWriteOptions options)", "full_signature": "public void write(Table table, JsonWriteOptions options)", "class_method_signature": "JsonWriter.write(Table table, JsonWriteOptions options)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Table table, Destination dest)", "modifiers": "@Override public", "return": "void", "signature": "void write(Table table, Destination dest)", "full_signature": "@Override public void write(Table table, Destination dest)", "class_method_signature": "JsonWriter.write(Table table, Destination dest)", "testcase": false, "constructor": false}], "file": "json/src/main/java/tech/tablesaw/io/json/JsonWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(Table table, JsonWriteOptions options)", "modifiers": "public", "return": "void", "body": "public void write(Table table, JsonWriteOptions options) throws IOException {\n    ArrayNode output = mapper.createArrayNode();\n    if (options.asObjects()) {\n      for (int r = 0; r < table.rowCount(); r++) {\n        ObjectNode row = mapper.createObjectNode();\n        for (int c = 0; c < table.columnCount(); c++) {\n          row.set(table.column(c).name(), mapper.convertValue(table.get(r, c), JsonNode.class));\n        }\n        output.add(row);\n      }\n    } else {\n      if (options.header()) {\n        ArrayNode row = mapper.createArrayNode();\n        for (int c = 0; c < table.columnCount(); c++) {\n          row.add(mapper.convertValue(table.column(c).name(), JsonNode.class));\n        }\n        output.add(row);\n      }\n      for (int r = 0; r < table.rowCount(); r++) {\n        ArrayNode row = mapper.createArrayNode();\n        for (int c = 0; c < table.columnCount(); c++) {\n          row.add(mapper.convertValue(table.get(r, c), JsonNode.class));\n        }\n        output.add(row);\n      }\n    }\n\n    String str = mapper.writeValueAsString(output);\n    try (Writer writer = options.destination().createWriter()) {\n      writer.write(str);\n    }\n  }", "signature": "void write(Table table, JsonWriteOptions options)", "full_signature": "public void write(Table table, JsonWriteOptions options)", "class_method_signature": "JsonWriter.write(Table table, JsonWriteOptions options)", "testcase": false, "constructor": false, "invocations": ["createArrayNode", "asObjects", "rowCount", "createObjectNode", "columnCount", "set", "name", "column", "convertValue", "get", "add", "header", "createArrayNode", "columnCount", "add", "convertValue", "name", "column", "add", "rowCount", "createArrayNode", "columnCount", "add", "convertValue", "get", "add", "writeValueAsString", "createWriter", "destination", "write"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}