{"test_class": {"identifier": "ConditionDescriptorNodesParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConditionDescriptor conditionDescriptor;", "modifier": "private", "type": "ConditionDescriptor", "declarator": "conditionDescriptor", "var_name": "conditionDescriptor"}, {"original_string": "@Mock\n    private ConditionDescriptorParser conditionDescriptorParser;", "modifier": "@Mock\n    private", "type": "ConditionDescriptorParser", "declarator": "conditionDescriptorParser", "var_name": "conditionDescriptorParser"}, {"original_string": "@InjectMocks\n    private ConditionDescriptorNodesParser underTest;", "modifier": "@InjectMocks\n    private", "type": "ConditionDescriptorNodesParser", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private Document document;", "modifier": "@Mock\n    private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private Element element;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "element", "var_name": "element"}, {"original_string": "@Mock\n    private NodeList nodeList;", "modifier": "@Mock\n    private", "type": "NodeList", "declarator": "nodeList", "var_name": "nodeList"}, {"original_string": "@Mock\n    private Element conditionDescriptorElement;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "conditionDescriptorElement", "var_name": "conditionDescriptorElement"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/dom/parser/sequence/ConditionDescriptorNodesParserTest.java"}, "test_case": {"identifier": "testParseNodesOfElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseNodesOfElement() {\n        //GIVEN\n        List<ConditionDescriptor> expected = new ArrayList<>();\n        expected.add(conditionDescriptor);\n        expected.add(conditionDescriptor);\n        given(element.getElementsByTagName(ConditionDescriptor.TAG_NAME)).willReturn(nodeList);\n        given(nodeList.getLength()).willReturn(2);\n        given(nodeList.item(0)).willReturn(conditionDescriptorElement);\n        given(nodeList.item(1)).willReturn(conditionDescriptorElement);\n        given(conditionDescriptorParser.parseNode(conditionDescriptorElement, document)).willReturn(conditionDescriptor);\n        //WHEN\n        List<ConditionDescriptor> result = underTest.parseNodesOfElement(document, element);\n        //THEN\n        assertEquals(expected, result);\n    }", "signature": "void testParseNodesOfElement()", "full_signature": "@Test public void testParseNodesOfElement()", "class_method_signature": "ConditionDescriptorNodesParserTest.testParseNodesOfElement()", "testcase": true, "constructor": false, "invocations": ["add", "add", "willReturn", "given", "getElementsByTagName", "willReturn", "given", "getLength", "willReturn", "given", "item", "willReturn", "given", "item", "willReturn", "given", "parseNode", "parseNodesOfElement", "assertEquals"]}, "focal_class": {"identifier": "ConditionDescriptorNodesParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ConditionDescriptorParser conditionDescriptorParser;", "modifier": "@Autowired\n    private", "type": "ConditionDescriptorParser", "declarator": "conditionDescriptorParser", "var_name": "conditionDescriptorParser"}], "methods": [{"identifier": "parseNodesOfElement", "parameters": "(final Document document, final Element element)", "modifiers": "public", "return": "List<ConditionDescriptor>", "signature": "List<ConditionDescriptor> parseNodesOfElement(final Document document, final Element element)", "full_signature": "public List<ConditionDescriptor> parseNodesOfElement(final Document document, final Element element)", "class_method_signature": "ConditionDescriptorNodesParser.parseNodesOfElement(final Document document, final Element element)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/dom/parser/sequence/ConditionDescriptorNodesParser.java"}, "focal_method": {"identifier": "parseNodesOfElement", "parameters": "(final Document document, final Element element)", "modifiers": "public", "return": "List<ConditionDescriptor>", "body": "public List<ConditionDescriptor> parseNodesOfElement(final Document document, final Element element) {\n        List<ConditionDescriptor> result = new ArrayList<>();\n        NodeList conditionDescriptorNodes = element.getElementsByTagName(ConditionDescriptor.TAG_NAME);\n        for (int i = 0; i < conditionDescriptorNodes.getLength(); i++) {\n            ConditionDescriptor conditionDescriptor = conditionDescriptorParser.parseNode(conditionDescriptorNodes.item(i), document);\n            result.add(conditionDescriptor);\n        }\n        return result;\n    }", "signature": "List<ConditionDescriptor> parseNodesOfElement(final Document document, final Element element)", "full_signature": "public List<ConditionDescriptor> parseNodesOfElement(final Document document, final Element element)", "class_method_signature": "ConditionDescriptorNodesParser.parseNodesOfElement(final Document document, final Element element)", "testcase": false, "constructor": false, "invocations": ["getElementsByTagName", "getLength", "parseNode", "item", "add"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}