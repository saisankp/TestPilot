{"test_class": {"identifier": "InstrumentedHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HttpClient client = new HttpClient();", "modifier": "private final", "type": "HttpClient", "declarator": "client = new HttpClient()", "var_name": "client"}, {"original_string": "private final MetricRegistry registry = new MetricRegistry();", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = new MetricRegistry()", "var_name": "registry"}, {"original_string": "private final Server server = new Server();", "modifier": "private final", "type": "Server", "declarator": "server = new Server()", "var_name": "server"}, {"original_string": "private final ServerConnector connector = new ServerConnector(server);", "modifier": "private final", "type": "ServerConnector", "declarator": "connector = new ServerConnector(server)", "var_name": "connector"}, {"original_string": "private final InstrumentedHandler handler = new InstrumentedHandler(registry);", "modifier": "private final", "type": "InstrumentedHandler", "declarator": "handler = new InstrumentedHandler(registry)", "var_name": "handler"}], "file": "metrics-jetty9/src/test/java/com/codahale/metrics/jetty9/InstrumentedHandlerTest.java"}, "test_case": {"identifier": "hasAName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hasAName() throws Exception {\n        assertThat(handler.getName())\n            .isEqualTo(\"handler\");\n    }", "signature": "void hasAName()", "full_signature": "@Test public void hasAName()", "class_method_signature": "InstrumentedHandlerTest.hasAName()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getName"]}, "focal_class": {"identifier": "InstrumentedHandler", "superclass": "extends HandlerWrapper", "interfaces": "", "fields": [{"original_string": "private final MetricRegistry metricRegistry;", "modifier": "private final", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final String prefix;", "modifier": "private final", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private Timer requests;", "modifier": "private", "type": "Timer", "declarator": "requests", "var_name": "requests"}, {"original_string": "private Timer dispatches;", "modifier": "private", "type": "Timer", "declarator": "dispatches", "var_name": "dispatches"}, {"original_string": "private Counter activeRequests;", "modifier": "private", "type": "Counter", "declarator": "activeRequests", "var_name": "activeRequests"}, {"original_string": "private Counter activeDispatches;", "modifier": "private", "type": "Counter", "declarator": "activeDispatches", "var_name": "activeDispatches"}, {"original_string": "private Counter activeSuspended;", "modifier": "private", "type": "Counter", "declarator": "activeSuspended", "var_name": "activeSuspended"}, {"original_string": "private Meter asyncDispatches;", "modifier": "private", "type": "Meter", "declarator": "asyncDispatches", "var_name": "asyncDispatches"}, {"original_string": "private Meter asyncTimeouts;", "modifier": "private", "type": "Meter", "declarator": "asyncTimeouts", "var_name": "asyncTimeouts"}, {"original_string": "private Meter[] responses;", "modifier": "private", "type": "Meter[]", "declarator": "responses", "var_name": "responses"}, {"original_string": "private Timer getRequests;", "modifier": "private", "type": "Timer", "declarator": "getRequests", "var_name": "getRequests"}, {"original_string": "private Timer postRequests;", "modifier": "private", "type": "Timer", "declarator": "postRequests", "var_name": "postRequests"}, {"original_string": "private Timer headRequests;", "modifier": "private", "type": "Timer", "declarator": "headRequests", "var_name": "headRequests"}, {"original_string": "private Timer putRequests;", "modifier": "private", "type": "Timer", "declarator": "putRequests", "var_name": "putRequests"}, {"original_string": "private Timer deleteRequests;", "modifier": "private", "type": "Timer", "declarator": "deleteRequests", "var_name": "deleteRequests"}, {"original_string": "private Timer optionsRequests;", "modifier": "private", "type": "Timer", "declarator": "optionsRequests", "var_name": "optionsRequests"}, {"original_string": "private Timer traceRequests;", "modifier": "private", "type": "Timer", "declarator": "traceRequests", "var_name": "traceRequests"}, {"original_string": "private Timer connectRequests;", "modifier": "private", "type": "Timer", "declarator": "connectRequests", "var_name": "connectRequests"}, {"original_string": "private Timer moveRequests;", "modifier": "private", "type": "Timer", "declarator": "moveRequests", "var_name": "moveRequests"}, {"original_string": "private Timer otherRequests;", "modifier": "private", "type": "Timer", "declarator": "otherRequests", "var_name": "otherRequests"}, {"original_string": "private AsyncListener listener;", "modifier": "private", "type": "AsyncListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "private HttpChannelState.State DISPATCHED_HACK;", "modifier": "private", "type": "HttpChannelState.State", "declarator": "DISPATCHED_HACK", "var_name": "DISPATCHED_HACK"}], "methods": [{"identifier": "InstrumentedHandler", "parameters": "(MetricRegistry registry)", "modifiers": "public", "return": "", "signature": " InstrumentedHandler(MetricRegistry registry)", "full_signature": "public  InstrumentedHandler(MetricRegistry registry)", "class_method_signature": "InstrumentedHandler.InstrumentedHandler(MetricRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedHandler", "parameters": "(MetricRegistry registry, String prefix)", "modifiers": "public", "return": "", "signature": " InstrumentedHandler(MetricRegistry registry, String prefix)", "full_signature": "public  InstrumentedHandler(MetricRegistry registry, String prefix)", "class_method_signature": "InstrumentedHandler.InstrumentedHandler(MetricRegistry registry, String prefix)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "InstrumentedHandler.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "InstrumentedHandler.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "doStart", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doStart()", "full_signature": "@Override protected void doStart()", "class_method_signature": "InstrumentedHandler.doStart()", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(String path,\n                       Request request,\n                       HttpServletRequest httpRequest,\n                       HttpServletResponse httpResponse)", "modifiers": "@Override public", "return": "void", "signature": "void handle(String path,\n                       Request request,\n                       HttpServletRequest httpRequest,\n                       HttpServletResponse httpResponse)", "full_signature": "@Override public void handle(String path,\n                       Request request,\n                       HttpServletRequest httpRequest,\n                       HttpServletResponse httpResponse)", "class_method_signature": "InstrumentedHandler.handle(String path,\n                       Request request,\n                       HttpServletRequest httpRequest,\n                       HttpServletResponse httpResponse)", "testcase": false, "constructor": false}, {"identifier": "requestTimer", "parameters": "(String method)", "modifiers": "private", "return": "Timer", "signature": "Timer requestTimer(String method)", "full_signature": "private Timer requestTimer(String method)", "class_method_signature": "InstrumentedHandler.requestTimer(String method)", "testcase": false, "constructor": false}, {"identifier": "updateResponses", "parameters": "(HttpServletRequest request, HttpServletResponse response, long start, boolean isHandled)", "modifiers": "private", "return": "void", "signature": "void updateResponses(HttpServletRequest request, HttpServletResponse response, long start, boolean isHandled)", "full_signature": "private void updateResponses(HttpServletRequest request, HttpServletResponse response, long start, boolean isHandled)", "class_method_signature": "InstrumentedHandler.updateResponses(HttpServletRequest request, HttpServletResponse response, long start, boolean isHandled)", "testcase": false, "constructor": false}], "file": "metrics-jetty9/src/main/java/com/codahale/metrics/jetty9/InstrumentedHandler.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getName() {\n        return name;\n    }", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "InstrumentedHandler.getName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}