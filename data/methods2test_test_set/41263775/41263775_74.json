{"test_class": {"identifier": "LongQuantizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/quantizer/LongQuantizerTest.java"}, "test_case": {"identifier": "testWithCompressionFactor_5", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithCompressionFactor_5() throws Exception {\n        Quantizer<Long> quantizer = LongQuantizer.withCompressionFactor(5);\n        // Note: comparing using toString, as double comparison with epsilon would not distinguish 0.0 from -0.0...\n        Assert.assertEquals(\"0\", quantizer.getQuantizedValue(0L).toString());\n        Assert.assertEquals(\"0\", quantizer.getQuantizedValue(4L).toString());\n        Assert.assertEquals(\"5\", quantizer.getQuantizedValue(5L).toString());\n        Assert.assertEquals(\"5\", quantizer.getQuantizedValue(9L).toString());\n        Assert.assertEquals(\"10\", quantizer.getQuantizedValue(11L).toString());\n        Assert.assertEquals(\"0\", quantizer.getQuantizedValue(-0L).toString());\n        Assert.assertEquals(\"0\", quantizer.getQuantizedValue(-4L).toString());\n        Assert.assertEquals(\"-5\", quantizer.getQuantizedValue(-5L).toString());\n        Assert.assertEquals(\"-5\", quantizer.getQuantizedValue(-9L).toString());\n        Assert.assertEquals(\"-10\", quantizer.getQuantizedValue(-11L).toString());\n    }", "signature": "void testWithCompressionFactor_5()", "full_signature": "@Test public void testWithCompressionFactor_5()", "class_method_signature": "LongQuantizerTest.testWithCompressionFactor_5()", "testcase": true, "constructor": false, "invocations": ["withCompressionFactor", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue"]}, "focal_class": {"identifier": "LongQuantizer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "withCompressionFactor", "parameters": "(int compressionFactor)", "modifiers": "public static", "return": "Quantizer<Long>", "signature": "Quantizer<Long> withCompressionFactor(int compressionFactor)", "full_signature": "public static Quantizer<Long> withCompressionFactor(int compressionFactor)", "class_method_signature": "LongQuantizer.withCompressionFactor(int compressionFactor)", "testcase": false, "constructor": false}, {"identifier": "LongQuantizer", "parameters": "()", "modifiers": "", "return": "", "signature": " LongQuantizer()", "full_signature": "  LongQuantizer()", "class_method_signature": "LongQuantizer.LongQuantizer()", "testcase": false, "constructor": true}], "file": "code/src/main/java/com/googlecode/cqengine/quantizer/LongQuantizer.java"}, "focal_method": {"identifier": "withCompressionFactor", "parameters": "(int compressionFactor)", "modifiers": "public static", "return": "Quantizer<Long>", "body": "public static Quantizer<Long> withCompressionFactor(int compressionFactor) {\n        return new CompressingQuantizer(compressionFactor);\n    }", "signature": "Quantizer<Long> withCompressionFactor(int compressionFactor)", "full_signature": "public static Quantizer<Long> withCompressionFactor(int compressionFactor)", "class_method_signature": "LongQuantizer.withCompressionFactor(int compressionFactor)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}