{"test_class": {"identifier": "DATypeFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-parent/model/src/test/java/fr/javatronic/damapping/processor/model/factory/DATypeFactoryTest.java"}, "test_case": {"identifier": "from_with_types_null_qualifiedname_raises_NPE", "parameters": "()", "modifiers": "@Test(expectedExceptions = NullPointerException.class) public", "return": "void", "body": "@Test(expectedExceptions = NullPointerException.class)\n  public void from_with_types_null_qualifiedname_raises_NPE() throws Exception {\n    DATypeFactory.from(null, Collections.<DAType>emptyList());\n  }", "signature": "void from_with_types_null_qualifiedname_raises_NPE()", "full_signature": "@Test(expectedExceptions = NullPointerException.class) public void from_with_types_null_qualifiedname_raises_NPE()", "class_method_signature": "DATypeFactoryTest.from_with_types_null_qualifiedname_raises_NPE()", "testcase": true, "constructor": false, "invocations": ["from", "emptyList"]}, "focal_class": {"identifier": "DATypeFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DAType VOID_DATYPE = DATypeImpl.typeBuilder(DATypeKind.VOID, DANameFactory.voidDAName()).build();", "modifier": "private static final", "type": "DAType", "declarator": "VOID_DATYPE = DATypeImpl.typeBuilder(DATypeKind.VOID, DANameFactory.voidDAName()).build()", "var_name": "VOID_DATYPE"}], "methods": [{"identifier": "DATypeFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " DATypeFactory()", "full_signature": "private  DATypeFactory()", "class_method_signature": "DATypeFactory.DATypeFactory()", "testcase": false, "constructor": true}, {"identifier": "voidDaType", "parameters": "()", "modifiers": "@Nonnull public static", "return": "DAType", "signature": "DAType voidDaType()", "full_signature": "@Nonnull public static DAType voidDaType()", "class_method_signature": "DATypeFactory.voidDaType()", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(@Nonnull Class<?> clazz)", "modifiers": "@Nonnull public static", "return": "DAType", "signature": "DAType from(@Nonnull Class<?> clazz)", "full_signature": "@Nonnull public static DAType from(@Nonnull Class<?> clazz)", "class_method_signature": "DATypeFactory.from(@Nonnull Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(@Nonnull Class<?> clazz, @Nonnull List<DAType> typeArgs)", "modifiers": "@Nonnull public static", "return": "DAType", "signature": "DAType from(@Nonnull Class<?> clazz, @Nonnull List<DAType> typeArgs)", "full_signature": "@Nonnull public static DAType from(@Nonnull Class<?> clazz, @Nonnull List<DAType> typeArgs)", "class_method_signature": "DATypeFactory.from(@Nonnull Class<?> clazz, @Nonnull List<DAType> typeArgs)", "testcase": false, "constructor": false}, {"identifier": "declared", "parameters": "(@Nonnull String qualifiedName)", "modifiers": "@Nonnull public static", "return": "DAType", "signature": "DAType declared(@Nonnull String qualifiedName)", "full_signature": "@Nonnull public static DAType declared(@Nonnull String qualifiedName)", "class_method_signature": "DATypeFactory.declared(@Nonnull String qualifiedName)", "testcase": false, "constructor": false}, {"identifier": "declared", "parameters": "(@Nonnull String qualifiedName, @Nonnull List<DAType> typeArgs)", "modifiers": "@Nonnull public static", "return": "DAType", "signature": "DAType declared(@Nonnull String qualifiedName, @Nonnull List<DAType> typeArgs)", "full_signature": "@Nonnull public static DAType declared(@Nonnull String qualifiedName, @Nonnull List<DAType> typeArgs)", "class_method_signature": "DATypeFactory.declared(@Nonnull String qualifiedName, @Nonnull List<DAType> typeArgs)", "testcase": false, "constructor": false}, {"identifier": "wildcardWithSuperBound", "parameters": "(@Nonnull DAType superbound)", "modifiers": "@Nonnull public static", "return": "DAType", "signature": "DAType wildcardWithSuperBound(@Nonnull DAType superbound)", "full_signature": "@Nonnull public static DAType wildcardWithSuperBound(@Nonnull DAType superbound)", "class_method_signature": "DATypeFactory.wildcardWithSuperBound(@Nonnull DAType superbound)", "testcase": false, "constructor": false}, {"identifier": "wildcardWithExtendsBound", "parameters": "(@Nonnull DAType extendsBound)", "modifiers": "@Nonnull public static", "return": "DAType", "signature": "DAType wildcardWithExtendsBound(@Nonnull DAType extendsBound)", "full_signature": "@Nonnull public static DAType wildcardWithExtendsBound(@Nonnull DAType extendsBound)", "class_method_signature": "DATypeFactory.wildcardWithExtendsBound(@Nonnull DAType extendsBound)", "testcase": false, "constructor": false}, {"identifier": "instance", "parameters": "(String simpleName, String qualifiedName, List<DAType> typeArgs)", "modifiers": "@Nonnull private static", "return": "DAType", "signature": "DAType instance(String simpleName, String qualifiedName, List<DAType> typeArgs)", "full_signature": "@Nonnull private static DAType instance(String simpleName, String qualifiedName, List<DAType> typeArgs)", "class_method_signature": "DATypeFactory.instance(String simpleName, String qualifiedName, List<DAType> typeArgs)", "testcase": false, "constructor": false}, {"identifier": "instance", "parameters": "(DAName simpleName, DANameImpl qualifiedName, List<DAType> typeArgs)", "modifiers": "@Nonnull private static", "return": "DAType", "signature": "DAType instance(DAName simpleName, DANameImpl qualifiedName, List<DAType> typeArgs)", "full_signature": "@Nonnull private static DAType instance(DAName simpleName, DANameImpl qualifiedName, List<DAType> typeArgs)", "class_method_signature": "DATypeFactory.instance(DAName simpleName, DANameImpl qualifiedName, List<DAType> typeArgs)", "testcase": false, "constructor": false}], "file": "core-parent/model/src/main/java/fr/javatronic/damapping/processor/model/factory/DATypeFactory.java"}, "focal_method": {"identifier": "from", "parameters": "(@Nonnull Class<?> clazz)", "modifiers": "@Nonnull public static", "return": "DAType", "body": "@Nonnull\n  public static DAType from(@Nonnull Class<?> clazz) {\n    return instance(clazz.getSimpleName(), clazz.getCanonicalName(), Collections.<DAType>emptyList());\n  }", "signature": "DAType from(@Nonnull Class<?> clazz)", "full_signature": "@Nonnull public static DAType from(@Nonnull Class<?> clazz)", "class_method_signature": "DATypeFactory.from(@Nonnull Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["instance", "getSimpleName", "getCanonicalName", "emptyList"]}, "repository": {"repo_id": 14714017, "url": "https://github.com/lesaint/damapping", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 4324, "license": "licensed"}}