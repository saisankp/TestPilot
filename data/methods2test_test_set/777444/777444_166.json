{"test_class": {"identifier": "WriteHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WriteHandler handler;", "modifier": "private", "type": "WriteHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private ObjectName oName;", "modifier": "private", "type": "ObjectName", "declarator": "oName", "var_name": "oName"}], "file": "agent/core/src/test/java/org/jolokia/handler/WriteHandlerTest.java"}, "test_case": {"identifier": "invalidAttribute", "parameters": "()", "modifiers": "@Test(expectedExceptions = {AttributeNotFoundException.class}) public", "return": "void", "body": "@Test(expectedExceptions = {AttributeNotFoundException.class})\n    public void invalidAttribute() throws MalformedObjectNameException, InstanceNotFoundException, IOException, ReflectionException, AttributeNotFoundException, MBeanException {\n        JmxWriteRequest req = new JmxRequestBuilder(WRITE,oName).attribute(\"ReadOnly\").value(\"Sommer\").build();\n        handler.doHandleRequest(getMBeanServer(),req);\n    }", "signature": "void invalidAttribute()", "full_signature": "@Test(expectedExceptions = {AttributeNotFoundException.class}) public void invalidAttribute()", "class_method_signature": "WriteHandlerTest.invalidAttribute()", "testcase": true, "constructor": false, "invocations": ["build", "value", "attribute", "doHandleRequest", "getMBeanServer"]}, "focal_class": {"identifier": "WriteHandler", "superclass": "extends JsonRequestHandler<JmxWriteRequest>", "interfaces": "", "fields": [{"original_string": "private Converters converters;", "modifier": "private", "type": "Converters", "declarator": "converters", "var_name": "converters"}], "methods": [{"identifier": "WriteHandler", "parameters": "(Restrictor pRestrictor, Converters pConverters)", "modifiers": "public", "return": "", "signature": " WriteHandler(Restrictor pRestrictor, Converters pConverters)", "full_signature": "public  WriteHandler(Restrictor pRestrictor, Converters pConverters)", "class_method_signature": "WriteHandler.WriteHandler(Restrictor pRestrictor, Converters pConverters)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "RequestType", "signature": "RequestType getType()", "full_signature": "@Override public RequestType getType()", "class_method_signature": "WriteHandler.getType()", "testcase": false, "constructor": false}, {"identifier": "checkForRestriction", "parameters": "(JmxWriteRequest pRequest)", "modifiers": "@Override protected", "return": "void", "signature": "void checkForRestriction(JmxWriteRequest pRequest)", "full_signature": "@Override protected void checkForRestriction(JmxWriteRequest pRequest)", "class_method_signature": "WriteHandler.checkForRestriction(JmxWriteRequest pRequest)", "testcase": false, "constructor": false}, {"identifier": "doHandleRequest", "parameters": "(MBeanServerConnection server, JmxWriteRequest request)", "modifiers": "@Override public", "return": "Object", "signature": "Object doHandleRequest(MBeanServerConnection server, JmxWriteRequest request)", "full_signature": "@Override public Object doHandleRequest(MBeanServerConnection server, JmxWriteRequest request)", "class_method_signature": "WriteHandler.doHandleRequest(MBeanServerConnection server, JmxWriteRequest request)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(JmxWriteRequest request, MBeanServerConnection server)", "modifiers": "private", "return": "Object", "signature": "Object setAttribute(JmxWriteRequest request, MBeanServerConnection server)", "full_signature": "private Object setAttribute(JmxWriteRequest request, MBeanServerConnection server)", "class_method_signature": "WriteHandler.setAttribute(JmxWriteRequest request, MBeanServerConnection server)", "testcase": false, "constructor": false}, {"identifier": "useReturnValueWithPath", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean useReturnValueWithPath()", "full_signature": "@Override public boolean useReturnValueWithPath()", "class_method_signature": "WriteHandler.useReturnValueWithPath()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "(String pType, Object pCurrentValue, JmxWriteRequest pRequest)", "modifiers": "private", "return": "Object[]", "signature": "Object[] getValues(String pType, Object pCurrentValue, JmxWriteRequest pRequest)", "full_signature": "private Object[] getValues(String pType, Object pCurrentValue, JmxWriteRequest pRequest)", "class_method_signature": "WriteHandler.getValues(String pType, Object pCurrentValue, JmxWriteRequest pRequest)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "(OpenMBeanAttributeInfo pOpenTypeInfo, Object pCurrentValue, JmxWriteRequest pRequest)", "modifiers": "private", "return": "Object[]", "signature": "Object[] getValues(OpenMBeanAttributeInfo pOpenTypeInfo, Object pCurrentValue, JmxWriteRequest pRequest)", "full_signature": "private Object[] getValues(OpenMBeanAttributeInfo pOpenTypeInfo, Object pCurrentValue, JmxWriteRequest pRequest)", "class_method_signature": "WriteHandler.getValues(OpenMBeanAttributeInfo pOpenTypeInfo, Object pCurrentValue, JmxWriteRequest pRequest)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/handler/WriteHandler.java"}, "focal_method": {"identifier": "doHandleRequest", "parameters": "(MBeanServerConnection server, JmxWriteRequest request)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object doHandleRequest(MBeanServerConnection server, JmxWriteRequest request)\n            throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException, IOException {\n\n        try {\n            return setAttribute(request, server);\n        } catch (IntrospectionException exp) {\n            throw new IllegalArgumentException(\"Cannot get info for MBean \" + request.getObjectName() + \": \" +exp,exp);\n        } catch (InvalidAttributeValueException e) {\n            throw new IllegalArgumentException(\"Invalid value \" + request.getValue() + \" for attribute \" +\n                    request.getAttributeName() + \", MBean \" + request.getObjectNameAsString(),e);\n        } catch (IllegalAccessException e) {\n            throw new IllegalArgumentException(\"Cannot set value \" + request.getValue() + \" for attribute \" +\n                    request.getAttributeName() + \", MBean \" + request.getObjectNameAsString(),e);\n        } catch (InvocationTargetException e) {\n            throw new IllegalArgumentException(\"Cannot set value \" + request.getValue() + \" for attribute \" +\n                    request.getAttributeName() + \", MBean \" + request.getObjectNameAsString(),e);\n        }\n    }", "signature": "Object doHandleRequest(MBeanServerConnection server, JmxWriteRequest request)", "full_signature": "@Override public Object doHandleRequest(MBeanServerConnection server, JmxWriteRequest request)", "class_method_signature": "WriteHandler.doHandleRequest(MBeanServerConnection server, JmxWriteRequest request)", "testcase": false, "constructor": false, "invocations": ["setAttribute", "getObjectName", "getValue", "getAttributeName", "getObjectNameAsString", "getValue", "getAttributeName", "getObjectNameAsString", "getValue", "getAttributeName", "getObjectNameAsString"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}