{"test_class": {"identifier": "SimpleSlotTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/instance/SimpleSlotTest.java"}, "test_case": {"identifier": "testStateTransitions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testStateTransitions() {\n\t\ttry {\n\t\t\t// release immediately\n\t\t\t{\n\t\t\t\tSimpleSlot slot = getSlot();\n\t\t\t\tassertTrue(slot.isAlive());\n\n\t\t\t\tslot.releaseSlot();\n\t\t\t\tassertFalse(slot.isAlive());\n\t\t\t\tassertTrue(slot.isCanceled());\n\t\t\t\tassertTrue(slot.isReleased());\n\t\t\t}\n\n\t\t\t// state transitions manually\n\t\t\t{\n\t\t\t\tSimpleSlot slot = getSlot();\n\t\t\t\tassertTrue(slot.isAlive());\n\n\t\t\t\tslot.markCancelled();\n\t\t\t\tassertFalse(slot.isAlive());\n\t\t\t\tassertTrue(slot.isCanceled());\n\t\t\t\tassertFalse(slot.isReleased());\n\n\t\t\t\tslot.markReleased();\n\t\t\t\tassertFalse(slot.isAlive());\n\t\t\t\tassertTrue(slot.isCanceled());\n\t\t\t\tassertTrue(slot.isReleased());\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testStateTransitions()", "full_signature": "@Test public void testStateTransitions()", "class_method_signature": "SimpleSlotTest.testStateTransitions()", "testcase": true, "constructor": false, "invocations": ["getSlot", "assertTrue", "isAlive", "releaseSlot", "assertFalse", "isAlive", "assertTrue", "isCanceled", "assertTrue", "isReleased", "getSlot", "assertTrue", "isAlive", "markCancelled", "assertFalse", "isAlive", "assertTrue", "isCanceled", "assertFalse", "isReleased", "markReleased", "assertFalse", "isAlive", "assertTrue", "isCanceled", "assertTrue", "isReleased", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "SimpleSlot", "superclass": "extends Slot", "interfaces": "", "fields": [{"original_string": "private static final AtomicReferenceFieldUpdater<SimpleSlot, Execution> VERTEX_UPDATER =\n\t\t\tAtomicReferenceFieldUpdater.newUpdater(SimpleSlot.class, Execution.class, \"executedTask\");", "modifier": "private static final", "type": "AtomicReferenceFieldUpdater<SimpleSlot, Execution>", "declarator": "VERTEX_UPDATER =\n\t\t\tAtomicReferenceFieldUpdater.newUpdater(SimpleSlot.class, Execution.class, \"executedTask\")", "var_name": "VERTEX_UPDATER"}, {"original_string": "private volatile Execution executedTask;", "modifier": "private volatile", "type": "Execution", "declarator": "executedTask", "var_name": "executedTask"}, {"original_string": "private Locality locality = Locality.UNCONSTRAINED;", "modifier": "private", "type": "Locality", "declarator": "locality = Locality.UNCONSTRAINED", "var_name": "locality"}], "methods": [{"identifier": "SimpleSlot", "parameters": "(JobID jobID, Instance instance, int slotNumber)", "modifiers": "public", "return": "", "signature": " SimpleSlot(JobID jobID, Instance instance, int slotNumber)", "full_signature": "public  SimpleSlot(JobID jobID, Instance instance, int slotNumber)", "class_method_signature": "SimpleSlot.SimpleSlot(JobID jobID, Instance instance, int slotNumber)", "testcase": false, "constructor": true}, {"identifier": "SimpleSlot", "parameters": "(JobID jobID, Instance instance, int slotNumber, SharedSlot parent, AbstractID groupID)", "modifiers": "public", "return": "", "signature": " SimpleSlot(JobID jobID, Instance instance, int slotNumber, SharedSlot parent, AbstractID groupID)", "full_signature": "public  SimpleSlot(JobID jobID, Instance instance, int slotNumber, SharedSlot parent, AbstractID groupID)", "class_method_signature": "SimpleSlot.SimpleSlot(JobID jobID, Instance instance, int slotNumber, SharedSlot parent, AbstractID groupID)", "testcase": false, "constructor": true}, {"identifier": "getNumberLeaves", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumberLeaves()", "full_signature": "@Override public int getNumberLeaves()", "class_method_signature": "SimpleSlot.getNumberLeaves()", "testcase": false, "constructor": false}, {"identifier": "getExecutedVertex", "parameters": "()", "modifiers": "public", "return": "Execution", "signature": "Execution getExecutedVertex()", "full_signature": "public Execution getExecutedVertex()", "class_method_signature": "SimpleSlot.getExecutedVertex()", "testcase": false, "constructor": false}, {"identifier": "setExecutedVertex", "parameters": "(Execution executedVertex)", "modifiers": "public", "return": "boolean", "signature": "boolean setExecutedVertex(Execution executedVertex)", "full_signature": "public boolean setExecutedVertex(Execution executedVertex)", "class_method_signature": "SimpleSlot.setExecutedVertex(Execution executedVertex)", "testcase": false, "constructor": false}, {"identifier": "getLocality", "parameters": "()", "modifiers": "public", "return": "Locality", "signature": "Locality getLocality()", "full_signature": "public Locality getLocality()", "class_method_signature": "SimpleSlot.getLocality()", "testcase": false, "constructor": false}, {"identifier": "setLocality", "parameters": "(Locality locality)", "modifiers": "public", "return": "void", "signature": "void setLocality(Locality locality)", "full_signature": "public void setLocality(Locality locality)", "class_method_signature": "SimpleSlot.setLocality(Locality locality)", "testcase": false, "constructor": false}, {"identifier": "releaseSlot", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void releaseSlot()", "full_signature": "@Override public void releaseSlot()", "class_method_signature": "SimpleSlot.releaseSlot()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SimpleSlot.toString()", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/instance/SimpleSlot.java"}, "focal_method": {"identifier": "releaseSlot", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void releaseSlot() {\n\n\t\tif (!isCanceled()) {\n\n\t\t\t// kill all tasks currently running in this slot\n\t\t\tExecution exec = this.executedTask;\n\t\t\tif (exec != null && !exec.isFinished()) {\n\t\t\t\texec.fail(new Exception(\n\t\t\t\t\t\t\"The slot in which the task was executed has been released. Probably loss of TaskManager \"\n\t\t\t\t\t\t\t\t+ getInstance()));\n\t\t\t}\n\n\t\t\t// release directly (if we are directly allocated),\n\t\t\t// otherwise release through the parent shared slot\n\t\t\tif (getParent() == null) {\n\t\t\t\t// we have to give back the slot to the owning instance\n\t\t\t\tif (markCancelled()) {\n\t\t\t\t\tgetInstance().returnAllocatedSlot(this);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// we have to ask our parent to dispose us\n\t\t\t\tgetParent().releaseChild(this);\n\t\t\t}\n\t\t}\n\t}", "signature": "void releaseSlot()", "full_signature": "@Override public void releaseSlot()", "class_method_signature": "SimpleSlot.releaseSlot()", "testcase": false, "constructor": false, "invocations": ["isCanceled", "isFinished", "fail", "getInstance", "getParent", "markCancelled", "returnAllocatedSlot", "getInstance", "releaseChild", "getParent"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}