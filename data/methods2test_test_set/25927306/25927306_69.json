{"test_class": {"identifier": "RandomConnectionStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/RandomConnectionStrategyTest.java"}, "test_case": {"identifier": "hasNext", "parameters": "(final String actual, final LdapURL[] expected)", "modifiers": "@Test(groups = \"conn\", dataProvider = \"urls\") public", "return": "void", "body": "@Test(groups = \"conn\", dataProvider = \"urls\")\n  public void hasNext(final String actual, final LdapURL[] expected)\n  {\n    final RandomConnectionStrategy strategy = new RandomConnectionStrategy();\n    strategy.initialize(actual, ldapURL -> true);\n    final Iterator<LdapURL> iter = strategy.iterator();\n    int i = 0;\n    while (iter.hasNext()) {\n      iter.next();\n      i++;\n    }\n    Assert.assertEquals(i, expected.length);\n  }", "signature": "void hasNext(final String actual, final LdapURL[] expected)", "full_signature": "@Test(groups = \"conn\", dataProvider = \"urls\") public void hasNext(final String actual, final LdapURL[] expected)", "class_method_signature": "RandomConnectionStrategyTest.hasNext(final String actual, final LdapURL[] expected)", "testcase": true, "constructor": false, "invocations": ["initialize", "iterator", "hasNext", "next", "assertEquals"]}, "focal_class": {"identifier": "RandomConnectionStrategy", "superclass": "extends AbstractConnectionStrategy", "interfaces": "", "fields": [], "methods": [{"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<LdapURL>", "signature": "Iterator<LdapURL> iterator()", "full_signature": "@Override public Iterator<LdapURL> iterator()", "class_method_signature": "RandomConnectionStrategy.iterator()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/RandomConnectionStrategy.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<LdapURL>", "body": "@Override\n  public Iterator<LdapURL> iterator()\n  {\n    if (!isInitialized()) {\n      throw new IllegalStateException(\"Strategy is not initialized\");\n    }\n    // CheckStyle:AnonInnerLength OFF\n    return new Iterator<>() {\n      private final List<LdapURL> active = ldapURLSet.getActiveUrls().stream().collect(\n        Collectors.collectingAndThen(\n          Collectors.toCollection(ArrayList::new),\n          list -> {\n            Collections.shuffle(list);\n            return list;\n          }));\n      private final List<LdapURL> inactive = ldapURLSet.getInactiveUrls().stream().collect(\n        Collectors.collectingAndThen(\n          Collectors.toCollection(ArrayList::new),\n          list -> {\n            Collections.shuffle(list);\n            return list;\n          }));\n      private int i;\n\n\n      @Override\n      public boolean hasNext()\n      {\n        return i < active.size() + inactive.size();\n      }\n\n\n      @Override\n      public LdapURL next()\n      {\n        final LdapURL url;\n        if (i < active.size()) {\n          url = active.get(i);\n        } else {\n          url = inactive.get(i - active.size());\n        }\n        i++;\n        return url;\n      }\n    };\n    // CheckStyle:AnonInnerLength ON\n  }", "signature": "Iterator<LdapURL> iterator()", "full_signature": "@Override public Iterator<LdapURL> iterator()", "class_method_signature": "RandomConnectionStrategy.iterator()", "testcase": false, "constructor": false, "invocations": ["isInitialized", "collect", "stream", "getActiveUrls", "collectingAndThen", "toCollection", "shuffle", "collect", "stream", "getInactiveUrls", "collectingAndThen", "toCollection", "shuffle", "size", "size", "size", "get", "get", "size"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}