{"test_class": {"identifier": "MapCodecFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AnnotatedElement annotations;", "modifier": "@Mock\n    private", "type": "AnnotatedElement", "declarator": "annotations", "var_name": "annotations"}, {"original_string": "@Mock\n    private BoundList boundList;", "modifier": "@Mock\n    private", "type": "BoundList", "declarator": "boundList", "var_name": "boundList"}, {"original_string": "@Mock\n    private CodecFactory delegate;", "modifier": "@Mock\n    private", "type": "CodecFactory", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "@Mock\n    private Codec<List> codec;", "modifier": "@Mock\n    private", "type": "Codec<List>", "declarator": "codec", "var_name": "codec"}, {"original_string": "@Mock\n    private ResolverContext context;", "modifier": "@Mock\n    private", "type": "ResolverContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private Choices choices;", "modifier": "@Mock\n    private", "type": "Choices", "declarator": "choices", "var_name": "choices"}, {"original_string": "@Mock\n    private Choices.Choice firstChoice;", "modifier": "@Mock\n    private", "type": "Choices.Choice", "declarator": "firstChoice", "var_name": "firstChoice"}, {"original_string": "@Mock\n    private Choices.Choice secondChoice;", "modifier": "@Mock\n    private", "type": "Choices.Choice", "declarator": "secondChoice", "var_name": "secondChoice"}], "file": "preon-binding/src/test/java/org/codehaus/preon/codec/MapCodecFactoryTest.java"}, "test_case": {"identifier": "shouldNotReturnCodecForObjectAnnotatedWithChoicesOneOfWhichNotEntry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotReturnCodecForObjectAnnotatedWithChoicesOneOfWhichNotEntry() {\n        when(annotations.getAnnotation(BoundList.class)).thenReturn(boundList);\n        when(boundList.selectFrom()).thenReturn(choices);\n        when(choices.alternatives()).thenReturn(new Choices.Choice[] { firstChoice, secondChoice });\n        when(firstChoice.type()).thenReturn((Class) Map.Entry.class);\n        when(secondChoice.type()).thenReturn((Class) String.class);\n\n        MapCodecFactory factory = new MapCodecFactory(delegate);\n        Codec<Map> mapCodec = factory.create(annotations, Map.class, context);\n        assertThat(mapCodec, is(nullValue()));\n\n        verify(annotations).getAnnotation(BoundList.class);\n        verifyNoMoreInteractions(annotations, delegate, codec);\n    }", "signature": "void shouldNotReturnCodecForObjectAnnotatedWithChoicesOneOfWhichNotEntry()", "full_signature": "@Test public void shouldNotReturnCodecForObjectAnnotatedWithChoicesOneOfWhichNotEntry()", "class_method_signature": "MapCodecFactoryTest.shouldNotReturnCodecForObjectAnnotatedWithChoicesOneOfWhichNotEntry()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAnnotation", "thenReturn", "when", "selectFrom", "thenReturn", "when", "alternatives", "thenReturn", "when", "type", "thenReturn", "when", "type", "create", "assertThat", "is", "nullValue", "getAnnotation", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "MapCodecFactory", "superclass": "", "interfaces": "implements CodecFactory", "fields": [{"original_string": "private final CodecFactory codecFactory;", "modifier": "private final", "type": "CodecFactory", "declarator": "codecFactory", "var_name": "codecFactory"}], "methods": [{"identifier": "MapCodecFactory", "parameters": "(CodecFactory codecFactory)", "modifiers": "public", "return": "", "signature": " MapCodecFactory(CodecFactory codecFactory)", "full_signature": "public  MapCodecFactory(CodecFactory codecFactory)", "class_method_signature": "MapCodecFactory.MapCodecFactory(CodecFactory codecFactory)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(AnnotatedElement metadata, Class<T> type, ResolverContext context)", "modifiers": "public", "return": "Codec<T>", "signature": "Codec<T> create(AnnotatedElement metadata, Class<T> type, ResolverContext context)", "full_signature": "public Codec<T> create(AnnotatedElement metadata, Class<T> type, ResolverContext context)", "class_method_signature": "MapCodecFactory.create(AnnotatedElement metadata, Class<T> type, ResolverContext context)", "testcase": false, "constructor": false}, {"identifier": "typeIsGuaranteedToBeEntry", "parameters": "(BoundList boundList)", "modifiers": "private", "return": "boolean", "signature": "boolean typeIsGuaranteedToBeEntry(BoundList boundList)", "full_signature": "private boolean typeIsGuaranteedToBeEntry(BoundList boundList)", "class_method_signature": "MapCodecFactory.typeIsGuaranteedToBeEntry(BoundList boundList)", "testcase": false, "constructor": false}], "file": "preon-binding/src/main/java/org/codehaus/preon/codec/MapCodecFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(AnnotatedElement metadata, Class<T> type, ResolverContext context)", "modifiers": "public", "return": "Codec<T>", "body": "public <T> Codec<T> create(AnnotatedElement metadata, Class<T> type, ResolverContext context) {\n        if (Map.class.isAssignableFrom(type)) {\n            BoundList boundList = metadata.getAnnotation(BoundList.class);\n            if (boundList != null && typeIsGuaranteedToBeEntry(boundList)) {\n                Codec<List> listCodec =\n                        codecFactory.create(metadata, List.class, context);\n                if (listCodec != null) {\n                    return new ListBasedMapCodec(listCodec);\n                }  else {\n                    return null;\n                }\n            }\n        }\n        return null;\n    }", "signature": "Codec<T> create(AnnotatedElement metadata, Class<T> type, ResolverContext context)", "full_signature": "public Codec<T> create(AnnotatedElement metadata, Class<T> type, ResolverContext context)", "class_method_signature": "MapCodecFactory.create(AnnotatedElement metadata, Class<T> type, ResolverContext context)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "getAnnotation", "typeIsGuaranteedToBeEntry", "create"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}