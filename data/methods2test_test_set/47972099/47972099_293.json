{"test_class": {"identifier": "AscendingTimestampExtractorTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/AscendingTimestampExtractorTest.java"}, "test_case": {"identifier": "testWithFailingHandler", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWithFailingHandler() {\n\t\tAscendingTimestampExtractor<Long> extractor = new LongExtractor()\n\t\t\t\t.withViolationHandler(new AscendingTimestampExtractor.FailingHandler());\n\t\t\n\t\trunValidTests(extractor);\n\t\ttry {\n\t\t\trunInvalidTest(extractor);\n\t\t\tfail(\"should fail with an exception\");\n\t\t} catch (Exception ignored) {}\n\t}", "signature": "void testWithFailingHandler()", "full_signature": "@Test public void testWithFailingHandler()", "class_method_signature": "AscendingTimestampExtractorTest.testWithFailingHandler()", "testcase": true, "constructor": false, "invocations": ["withViolationHandler", "runValidTests", "runInvalidTest", "fail"]}, "focal_class": {"identifier": "AscendingTimestampExtractor", "superclass": "", "interfaces": "implements AssignerWithPeriodicWatermarks<T>", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private long currentTimestamp = Long.MIN_VALUE;", "modifier": "private", "type": "long", "declarator": "currentTimestamp = Long.MIN_VALUE", "var_name": "currentTimestamp"}, {"original_string": "private MonotonyViolationHandler violationHandler = new LoggingHandler();", "modifier": "private", "type": "MonotonyViolationHandler", "declarator": "violationHandler = new LoggingHandler()", "var_name": "violationHandler"}], "methods": [{"identifier": "extractAscendingTimestamp", "parameters": "(T element)", "modifiers": "public abstract", "return": "long", "signature": "long extractAscendingTimestamp(T element)", "full_signature": "public abstract long extractAscendingTimestamp(T element)", "class_method_signature": "AscendingTimestampExtractor.extractAscendingTimestamp(T element)", "testcase": false, "constructor": false}, {"identifier": "withViolationHandler", "parameters": "(MonotonyViolationHandler handler)", "modifiers": "public", "return": "AscendingTimestampExtractor<T>", "signature": "AscendingTimestampExtractor<T> withViolationHandler(MonotonyViolationHandler handler)", "full_signature": "public AscendingTimestampExtractor<T> withViolationHandler(MonotonyViolationHandler handler)", "class_method_signature": "AscendingTimestampExtractor.withViolationHandler(MonotonyViolationHandler handler)", "testcase": false, "constructor": false}, {"identifier": "extractTimestamp", "parameters": "(T element, long elementPrevTimestamp)", "modifiers": "@Override public final", "return": "long", "signature": "long extractTimestamp(T element, long elementPrevTimestamp)", "full_signature": "@Override public final long extractTimestamp(T element, long elementPrevTimestamp)", "class_method_signature": "AscendingTimestampExtractor.extractTimestamp(T element, long elementPrevTimestamp)", "testcase": false, "constructor": false}, {"identifier": "getCurrentWatermark", "parameters": "()", "modifiers": "@Override public final", "return": "Watermark", "signature": "Watermark getCurrentWatermark()", "full_signature": "@Override public final Watermark getCurrentWatermark()", "class_method_signature": "AscendingTimestampExtractor.getCurrentWatermark()", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/AscendingTimestampExtractor.java"}, "focal_method": {"identifier": "withViolationHandler", "parameters": "(MonotonyViolationHandler handler)", "modifiers": "public", "return": "AscendingTimestampExtractor<T>", "body": "public AscendingTimestampExtractor<T> withViolationHandler(MonotonyViolationHandler handler) {\n\t\tthis.violationHandler = requireNonNull(handler);\n\t\treturn this;\n\t}", "signature": "AscendingTimestampExtractor<T> withViolationHandler(MonotonyViolationHandler handler)", "full_signature": "public AscendingTimestampExtractor<T> withViolationHandler(MonotonyViolationHandler handler)", "class_method_signature": "AscendingTimestampExtractor.withViolationHandler(MonotonyViolationHandler handler)", "testcase": false, "constructor": false, "invocations": ["requireNonNull"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}