{"test_class": {"identifier": "ServiceInstanceMetadataUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static URL url = URL.valueOf(\"dubbo://192.168.0.102:20880/org.apache.dubbo.metadata.MetadataService?&anyhost=true&application=spring-cloud-alibaba-dubbo-provider&bind.ip=192.168.0.102&bind.port=20880&default.deprecated=false&default.dynamic=false&default.register=true&deprecated=false&dubbo=2.0.2&dynamic=false&generic=false&group=spring-cloud-alibaba-dubbo-provider&interface=org.apache.dubbo.metadata.MetadataService&methods=getAllServiceKeys,getServiceRestMetadata,getExportedURLs,getAllExportedURLs&pid=58350&register=true&release=2.7.1&revision=1.0.0&side=provider&timestamp=1557928573174&version=1.0.0\");", "modifier": "private static", "type": "URL", "declarator": "url = URL.valueOf(\"dubbo://192.168.0.102:20880/org.apache.dubbo.metadata.MetadataService?&anyhost=true&application=spring-cloud-alibaba-dubbo-provider&bind.ip=192.168.0.102&bind.port=20880&default.deprecated=false&default.dynamic=false&default.register=true&deprecated=false&dubbo=2.0.2&dynamic=false&generic=false&group=spring-cloud-alibaba-dubbo-provider&interface=org.apache.dubbo.metadata.MetadataService&methods=getAllServiceKeys,getServiceRestMetadata,getExportedURLs,getAllExportedURLs&pid=58350&register=true&release=2.7.1&revision=1.0.0&side=provider&timestamp=1557928573174&version=1.0.0\")", "var_name": "url"}, {"original_string": "private static URL url2 = URL.valueOf(\"rest://192.168.0.102:20880/org.apache.dubbo.metadata.MetadataService?&anyhost=true&application=spring-cloud-alibaba-dubbo-provider&bind.ip=192.168.0.102&bind.port=20880&default.deprecated=false&default.dynamic=false&default.register=true&deprecated=false&dubbo=2.0.2&dynamic=false&generic=false&group=spring-cloud-alibaba-dubbo-provider&interface=org.apache.dubbo.metadata.MetadataService&methods=getAllServiceKeys,getServiceRestMetadata,getExportedURLs,getAllExportedURLs&pid=58350&register=true&release=2.7.1&revision=1.0.0&side=provider&timestamp=1557928573174&version=1.0.0\");", "modifier": "private static", "type": "URL", "declarator": "url2 = URL.valueOf(\"rest://192.168.0.102:20880/org.apache.dubbo.metadata.MetadataService?&anyhost=true&application=spring-cloud-alibaba-dubbo-provider&bind.ip=192.168.0.102&bind.port=20880&default.deprecated=false&default.dynamic=false&default.register=true&deprecated=false&dubbo=2.0.2&dynamic=false&generic=false&group=spring-cloud-alibaba-dubbo-provider&interface=org.apache.dubbo.metadata.MetadataService&methods=getAllServiceKeys,getServiceRestMetadata,getExportedURLs,getAllExportedURLs&pid=58350&register=true&release=2.7.1&revision=1.0.0&side=provider&timestamp=1557928573174&version=1.0.0\")", "var_name": "url2"}, {"original_string": "private static final String VALUE = \"{\\\"rest\\\":{\\\"version\\\":\\\"1.0.0\\\",\\\"dubbo\\\":\\\"2.0.2\\\",\\\"release\\\":\\\"2.7.1\\\",\\\"port\\\":\\\"20880\\\"},\\\"dubbo\\\":{\\\"version\\\":\\\"1.0.0\\\",\\\"dubbo\\\":\\\"2.0.2\\\",\\\"release\\\":\\\"2.7.1\\\",\\\"port\\\":\\\"20880\\\"}}\";", "modifier": "private static final", "type": "String", "declarator": "VALUE = \"{\\\"rest\\\":{\\\"version\\\":\\\"1.0.0\\\",\\\"dubbo\\\":\\\"2.0.2\\\",\\\"release\\\":\\\"2.7.1\\\",\\\"port\\\":\\\"20880\\\"},\\\"dubbo\\\":{\\\"version\\\":\\\"1.0.0\\\",\\\"dubbo\\\":\\\"2.0.2\\\",\\\"release\\\":\\\"2.7.1\\\",\\\"port\\\":\\\"20880\\\"}}\"", "var_name": "VALUE"}], "file": "dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtilsTest.java"}, "test_case": {"identifier": "testMetadataServiceURLParameters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMetadataServiceURLParameters() {\n\n        List<URL> urls = Arrays.asList(url, url2);\n\n        String parameter = ServiceInstanceMetadataUtils.getMetadataServiceParameter(urls);\n\n        JSONObject jsonObject = JSON.parseObject(parameter);\n\n        urls.forEach(url -> {\n            JSONObject map = jsonObject.getJSONObject(url.getProtocol());\n            for (Map.Entry<String, String> param : url.getParameters().entrySet()) {\n                String value = map.getString(param.getKey());\n                if (value != null) {\n                    assertEquals(param.getValue(), value);\n                }\n            }\n        });\n\n        assertEquals(VALUE, parameter);\n    }", "signature": "void testMetadataServiceURLParameters()", "full_signature": "@Test public void testMetadataServiceURLParameters()", "class_method_signature": "ServiceInstanceMetadataUtilsTest.testMetadataServiceURLParameters()", "testcase": true, "constructor": false, "invocations": ["asList", "getMetadataServiceParameter", "parseObject", "forEach", "getJSONObject", "getProtocol", "entrySet", "getParameters", "getString", "getKey", "assertEquals", "getValue", "assertEquals"]}, "focal_class": {"identifier": "ServiceInstanceMetadataUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String METADATA_SERVICE_PREFIX = \"dubbo.metadata-service.\";", "modifier": "public static final", "type": "String", "declarator": "METADATA_SERVICE_PREFIX = \"dubbo.metadata-service.\"", "var_name": "METADATA_SERVICE_PREFIX"}, {"original_string": "public static final String ENDPOINTS = \"dubbo.endpoints\";", "modifier": "public static final", "type": "String", "declarator": "ENDPOINTS = \"dubbo.endpoints\"", "var_name": "ENDPOINTS"}, {"original_string": "public static String METADATA_SERVICE_URL_PARAMS_PROPERTY_NAME = METADATA_SERVICE_PREFIX + \"url-params\";", "modifier": "public static", "type": "String", "declarator": "METADATA_SERVICE_URL_PARAMS_PROPERTY_NAME = METADATA_SERVICE_PREFIX + \"url-params\"", "var_name": "METADATA_SERVICE_URL_PARAMS_PROPERTY_NAME"}, {"original_string": "public static final String METADATA_SERVICE_URLS_PROPERTY_NAME = METADATA_SERVICE_PREFIX + \"urls\";", "modifier": "public static final", "type": "String", "declarator": "METADATA_SERVICE_URLS_PROPERTY_NAME = METADATA_SERVICE_PREFIX + \"urls\"", "var_name": "METADATA_SERVICE_URLS_PROPERTY_NAME"}, {"original_string": "public static String EXPORTED_SERVICES_REVISION_PROPERTY_NAME = \"dubbo.metadata.revision\";", "modifier": "public static", "type": "String", "declarator": "EXPORTED_SERVICES_REVISION_PROPERTY_NAME = \"dubbo.metadata.revision\"", "var_name": "EXPORTED_SERVICES_REVISION_PROPERTY_NAME"}, {"original_string": "public static String METADATA_STORAGE_TYPE_PROPERTY_NAME = \"dubbo.metadata.storage-type\";", "modifier": "public static", "type": "String", "declarator": "METADATA_STORAGE_TYPE_PROPERTY_NAME = \"dubbo.metadata.storage-type\"", "var_name": "METADATA_STORAGE_TYPE_PROPERTY_NAME"}, {"original_string": "public static String METADATA_CLUSTER_PROPERTY_NAME = \"dubbo.metadata.cluster\";", "modifier": "public static", "type": "String", "declarator": "METADATA_CLUSTER_PROPERTY_NAME = \"dubbo.metadata.cluster\"", "var_name": "METADATA_CLUSTER_PROPERTY_NAME"}, {"original_string": "public static String INSTANCE_REVISION_UPDATED_KEY = \"dubbo.instance.revision.updated\";", "modifier": "public static", "type": "String", "declarator": "INSTANCE_REVISION_UPDATED_KEY = \"dubbo.instance.revision.updated\"", "var_name": "INSTANCE_REVISION_UPDATED_KEY"}], "methods": [{"identifier": "getMetadataServiceURLsParams", "parameters": "(ServiceInstance serviceInstance)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> getMetadataServiceURLsParams(ServiceInstance serviceInstance)", "full_signature": "public static Map<String, Map<String, String>> getMetadataServiceURLsParams(ServiceInstance serviceInstance)", "class_method_signature": "ServiceInstanceMetadataUtils.getMetadataServiceURLsParams(ServiceInstance serviceInstance)", "testcase": false, "constructor": false}, {"identifier": "getMetadataServiceURLParams", "parameters": "(ServiceInstance serviceInstance, String protocol)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getMetadataServiceURLParams(ServiceInstance serviceInstance, String protocol)", "full_signature": "public static Map<String, String> getMetadataServiceURLParams(ServiceInstance serviceInstance, String protocol)", "class_method_signature": "ServiceInstanceMetadataUtils.getMetadataServiceURLParams(ServiceInstance serviceInstance, String protocol)", "testcase": false, "constructor": false}, {"identifier": "getMetadataServiceParameter", "parameters": "(List<URL> urls)", "modifiers": "public static", "return": "String", "signature": "String getMetadataServiceParameter(List<URL> urls)", "full_signature": "public static String getMetadataServiceParameter(List<URL> urls)", "class_method_signature": "ServiceInstanceMetadataUtils.getMetadataServiceParameter(List<URL> urls)", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "(URL providerURL)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> getParams(URL providerURL)", "full_signature": "private static Map<String, String> getParams(URL providerURL)", "class_method_signature": "ServiceInstanceMetadataUtils.getParams(URL providerURL)", "testcase": false, "constructor": false}, {"identifier": "getExportedServicesRevision", "parameters": "(ServiceInstance serviceInstance)", "modifiers": "public static", "return": "String", "signature": "String getExportedServicesRevision(ServiceInstance serviceInstance)", "full_signature": "public static String getExportedServicesRevision(ServiceInstance serviceInstance)", "class_method_signature": "ServiceInstanceMetadataUtils.getExportedServicesRevision(ServiceInstance serviceInstance)", "testcase": false, "constructor": false}, {"identifier": "getMetadataStorageType", "parameters": "(URL registryURL)", "modifiers": "public static", "return": "String", "signature": "String getMetadataStorageType(URL registryURL)", "full_signature": "public static String getMetadataStorageType(URL registryURL)", "class_method_signature": "ServiceInstanceMetadataUtils.getMetadataStorageType(URL registryURL)", "testcase": false, "constructor": false}, {"identifier": "getMetadataStorageType", "parameters": "(ServiceInstance serviceInstance)", "modifiers": "public static", "return": "String", "signature": "String getMetadataStorageType(ServiceInstance serviceInstance)", "full_signature": "public static String getMetadataStorageType(ServiceInstance serviceInstance)", "class_method_signature": "ServiceInstanceMetadataUtils.getMetadataStorageType(ServiceInstance serviceInstance)", "testcase": false, "constructor": false}, {"identifier": "setMetadataStorageType", "parameters": "(ServiceInstance serviceInstance, String metadataType)", "modifiers": "public static", "return": "void", "signature": "void setMetadataStorageType(ServiceInstance serviceInstance, String metadataType)", "full_signature": "public static void setMetadataStorageType(ServiceInstance serviceInstance, String metadataType)", "class_method_signature": "ServiceInstanceMetadataUtils.setMetadataStorageType(ServiceInstance serviceInstance, String metadataType)", "testcase": false, "constructor": false}, {"identifier": "getRemoteCluster", "parameters": "(ServiceInstance serviceInstance)", "modifiers": "public static", "return": "String", "signature": "String getRemoteCluster(ServiceInstance serviceInstance)", "full_signature": "public static String getRemoteCluster(ServiceInstance serviceInstance)", "class_method_signature": "ServiceInstanceMetadataUtils.getRemoteCluster(ServiceInstance serviceInstance)", "testcase": false, "constructor": false}, {"identifier": "isDubboServiceInstance", "parameters": "(ServiceInstance serviceInstance)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDubboServiceInstance(ServiceInstance serviceInstance)", "full_signature": "public static boolean isDubboServiceInstance(ServiceInstance serviceInstance)", "class_method_signature": "ServiceInstanceMetadataUtils.isDubboServiceInstance(ServiceInstance serviceInstance)", "testcase": false, "constructor": false}, {"identifier": "setEndpoints", "parameters": "(ServiceInstance serviceInstance, Map<String, Integer> protocolPorts)", "modifiers": "public static", "return": "void", "signature": "void setEndpoints(ServiceInstance serviceInstance, Map<String, Integer> protocolPorts)", "full_signature": "public static void setEndpoints(ServiceInstance serviceInstance, Map<String, Integer> protocolPorts)", "class_method_signature": "ServiceInstanceMetadataUtils.setEndpoints(ServiceInstance serviceInstance, Map<String, Integer> protocolPorts)", "testcase": false, "constructor": false}, {"identifier": "getProtocolPort", "parameters": "(ServiceInstance serviceInstance, String protocol)", "modifiers": "public static", "return": "Integer", "signature": "Integer getProtocolPort(ServiceInstance serviceInstance, String protocol)", "full_signature": "public static Integer getProtocolPort(ServiceInstance serviceInstance, String protocol)", "class_method_signature": "ServiceInstanceMetadataUtils.getProtocolPort(ServiceInstance serviceInstance, String protocol)", "testcase": false, "constructor": false}, {"identifier": "calInstanceRevision", "parameters": "(ServiceDiscovery serviceDiscovery, ServiceInstance instance)", "modifiers": "public static", "return": "void", "signature": "void calInstanceRevision(ServiceDiscovery serviceDiscovery, ServiceInstance instance)", "full_signature": "public static void calInstanceRevision(ServiceDiscovery serviceDiscovery, ServiceInstance instance)", "class_method_signature": "ServiceInstanceMetadataUtils.calInstanceRevision(ServiceDiscovery serviceDiscovery, ServiceInstance instance)", "testcase": false, "constructor": false}, {"identifier": "isInstanceUpdated", "parameters": "(ServiceInstance instance)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInstanceUpdated(ServiceInstance instance)", "full_signature": "public static boolean isInstanceUpdated(ServiceInstance instance)", "class_method_signature": "ServiceInstanceMetadataUtils.isInstanceUpdated(ServiceInstance instance)", "testcase": false, "constructor": false}, {"identifier": "refreshMetadataAndInstance", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void refreshMetadataAndInstance()", "full_signature": "public static void refreshMetadataAndInstance()", "class_method_signature": "ServiceInstanceMetadataUtils.refreshMetadataAndInstance()", "testcase": false, "constructor": false}, {"identifier": "setDefaultParams", "parameters": "(Map<String, String> params, URL providerURL)", "modifiers": "private static", "return": "void", "signature": "void setDefaultParams(Map<String, String> params, URL providerURL)", "full_signature": "private static void setDefaultParams(Map<String, String> params, URL providerURL)", "class_method_signature": "ServiceInstanceMetadataUtils.setDefaultParams(Map<String, String> params, URL providerURL)", "testcase": false, "constructor": false}], "file": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/ServiceInstanceMetadataUtils.java"}, "focal_method": {"identifier": "getMetadataServiceParameter", "parameters": "(List<URL> urls)", "modifiers": "public static", "return": "String", "body": "public static String getMetadataServiceParameter(List<URL> urls) {\n\n        Map<String, Map<String, String>> params = new HashMap<>();\n\n        urls.stream()\n                // remove APPLICATION_KEY because service name must be present\n                .map(url -> url.removeParameter(APPLICATION_KEY))\n                // remove GROUP_KEY, always uses application name.\n                .map(url -> url.removeParameter(GROUP_KEY))\n                // remove DEPRECATED_KEY because it's always false\n                .map(url -> url.removeParameter(DEPRECATED_KEY))\n                // remove TIMESTAMP_KEY because it's nonsense\n                .map(url -> url.removeParameter(TIMESTAMP_KEY))\n                .forEach(url -> {\n                    String protocol = url.getProtocol();\n                    params.put(protocol, getParams(url));\n                });\n\n        if (params.isEmpty()) {\n            return null;\n        }\n\n        return JSON.toJSONString(params);\n    }", "signature": "String getMetadataServiceParameter(List<URL> urls)", "full_signature": "public static String getMetadataServiceParameter(List<URL> urls)", "class_method_signature": "ServiceInstanceMetadataUtils.getMetadataServiceParameter(List<URL> urls)", "testcase": false, "constructor": false, "invocations": ["forEach", "map", "map", "map", "map", "stream", "removeParameter", "removeParameter", "removeParameter", "removeParameter", "getProtocol", "put", "getParams", "isEmpty", "toJSONString"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}