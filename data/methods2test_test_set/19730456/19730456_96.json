{"test_class": {"identifier": "CollectionUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/util/CollectionUtilsTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() {\n        final List<Integer> input = Arrays.asList(2, 4, 6, 8, 10, 12, 14, 16, 18, 20);\n        assertEquals(10, input.size());\n\n        List<Integer> resEqual = CollectionUtils.truncateRand(input, 10);\n        assertArrayEquals(input.toArray(), resEqual.toArray());\n\n        List<Integer> resEqual2 = CollectionUtils.truncateRand(input, 20);\n        assertArrayEquals(input.toArray(), resEqual2.toArray());\n\n        Set<Integer> excluded = new HashSet<>();\n        for (int i = 0; i < 1000; ++i) {\n            List<Integer> resMinusOne = CollectionUtils.truncateRand(input, 9);\n            Set<Integer> resMinusOneSet = new HashSet<>(resMinusOne);\n            assertEquals(resMinusOne.size(), resMinusOneSet.size());\n            AtomicInteger exclusionCounter = new AtomicInteger(0);\n            input.forEach(x -> {\n                if(!resMinusOneSet.contains(x)) {\n                    excluded.add(x);\n                    exclusionCounter.getAndIncrement();\n                }\n            });\n            assertEquals(1, exclusionCounter.get());\n        }\n        assertEquals(\"Someday I'll fail due to the nature of random\", 10, excluded.size());\n\n        Set<Integer> included = new HashSet<>();\n        for (int i = 0; i < 1000; ++i) {\n            List<Integer> resOne = CollectionUtils.truncateRand(input, 1);\n            included.add(resOne.get(0));\n            assertTrue(input.contains(resOne.get(0)));\n        }\n        assertEquals(\"Someday I'll fail due to the nature of random\", 10, included.size());\n\n        assertEquals(3, CollectionUtils.truncateRand(input, 3).size());\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "CollectionUtilsTest.test()", "testcase": true, "constructor": false, "invocations": ["asList", "assertEquals", "size", "truncateRand", "assertArrayEquals", "toArray", "toArray", "truncateRand", "assertArrayEquals", "toArray", "toArray", "truncateRand", "assertEquals", "size", "size", "forEach", "contains", "add", "getAndIncrement", "assertEquals", "get", "assertEquals", "size", "truncateRand", "add", "get", "assertTrue", "contains", "get", "assertEquals", "size", "assertEquals", "size", "truncateRand"]}, "focal_class": {"identifier": "CollectionUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "truncate", "parameters": "(final List<T> items, int limit)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> truncate(final List<T> items, int limit)", "full_signature": "public static List<T> truncate(final List<T> items, int limit)", "class_method_signature": "CollectionUtils.truncate(final List<T> items, int limit)", "testcase": false, "constructor": false}, {"identifier": "truncateRand", "parameters": "(final List<T> items, int limit)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> truncateRand(final List<T> items, int limit)", "full_signature": "public static List<T> truncateRand(final List<T> items, int limit)", "class_method_signature": "CollectionUtils.truncateRand(final List<T> items, int limit)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/util/CollectionUtils.java"}, "focal_method": {"identifier": "truncateRand", "parameters": "(final List<T> items, int limit)", "modifiers": "public static", "return": "List<T>", "body": "public static <T> List<T> truncateRand(final List<T> items, int limit) {\n        if(limit > items.size()) {\n            return new ArrayList<>(items);\n        }\n        List<T> truncated = new ArrayList<>(limit);\n\n        LinkedList<Integer> index = new LinkedList<>();\n        for (int i = 0; i < items.size(); ++i) {\n            index.add(i);\n        }\n\n        if (limit * 2 < items.size()) {\n            // Limit is very small comparing to items.size()\n            Set<Integer> smallIndex = new HashSet<>();\n            for (int i = 0; i < limit; ++i) {\n                int randomNum = ThreadLocalRandom.current().nextInt(0, index.size());\n                smallIndex.add(index.remove(randomNum));\n            }\n            smallIndex.forEach(i -> truncated.add(items.get(i)));\n        } else {\n            // Limit is compared to items.size()\n            for (int i = 0; i < items.size() - limit; ++i) {\n                int randomNum = ThreadLocalRandom.current().nextInt(0, index.size());\n                index.remove(randomNum);\n            }\n            index.forEach(i -> truncated.add(items.get(i)));\n        }\n\n        return truncated;\n    }", "signature": "List<T> truncateRand(final List<T> items, int limit)", "full_signature": "public static List<T> truncateRand(final List<T> items, int limit)", "class_method_signature": "CollectionUtils.truncateRand(final List<T> items, int limit)", "testcase": false, "constructor": false, "invocations": ["size", "size", "add", "size", "nextInt", "current", "size", "add", "remove", "forEach", "add", "get", "size", "nextInt", "current", "size", "remove", "forEach", "add", "get"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}