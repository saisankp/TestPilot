{"test_class": {"identifier": "AccountAddressTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final byte[] rawAddress = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n      11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33};", "modifier": "public final", "type": "byte[]", "declarator": "rawAddress = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n      11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}", "var_name": "rawAddress"}, {"original_string": "public final String encodedAddress =\n      \"AmJaNDXoPbBRn9XHh9onKbDKuAzj88n5Bzt7KniYA78qUEc5EwBd\";", "modifier": "public final", "type": "String", "declarator": "encodedAddress =\n      \"AmJaNDXoPbBRn9XHh9onKbDKuAzj88n5Bzt7KniYA78qUEc5EwBd\"", "var_name": "encodedAddress"}, {"original_string": "public final String encodedAddressWithoutVersion =\n      Base58Utils.encodeWithCheck((\"noversion\" + randomUUID().toString()).getBytes());", "modifier": "public final", "type": "String", "declarator": "encodedAddressWithoutVersion =\n      Base58Utils.encodeWithCheck((\"noversion\" + randomUUID().toString()).getBytes())", "var_name": "encodedAddressWithoutVersion"}], "file": "core/common/src/test/java/hera/api/model/AccountAddressTest.java"}, "test_case": {"identifier": "testAdapt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAdapt() {\n    final AccountAddress accountAddress = AccountAddress.of(encodedAddress);\n    final AccountAddress accountActual = accountAddress.adapt(AccountAddress.class);\n    final ContractAddress contractActual = accountAddress.adapt(ContractAddress.class);\n    final AccountAddress accountExpected = AccountAddress.of(encodedAddress);\n    final ContractAddress contractExpected = ContractAddress.of(encodedAddress);\n    assertEquals(accountExpected, accountActual);\n    assertEquals(contractExpected, contractActual);\n  }", "signature": "void testAdapt()", "full_signature": "@Test public void testAdapt()", "class_method_signature": "AccountAddressTest.testAdapt()", "testcase": true, "constructor": false, "invocations": ["of", "adapt", "adapt", "of", "of", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "AccountAddress", "superclass": "", "interfaces": "implements Identity, Adaptor", "fields": [{"original_string": "public static final int ADDRESS_BYTE_LENGTH = 33;", "modifier": "public static final", "type": "int", "declarator": "ADDRESS_BYTE_LENGTH = 33", "var_name": "ADDRESS_BYTE_LENGTH"}, {"original_string": "public static final byte ADDRESS_PREFIX = 0x42;", "modifier": "public static final", "type": "byte", "declarator": "ADDRESS_PREFIX = 0x42", "var_name": "ADDRESS_PREFIX"}, {"original_string": "public static final AccountAddress EMPTY = new AccountAddress();", "modifier": "public static final", "type": "AccountAddress", "declarator": "EMPTY = new AccountAddress()", "var_name": "EMPTY"}, {"original_string": "protected transient String encoded;", "modifier": "protected transient", "type": "String", "declarator": "encoded", "var_name": "encoded"}, {"original_string": "@Getter\n\n  protected final BytesValue bytesValue;", "modifier": "@Getter\n\n  protected final", "type": "BytesValue", "declarator": "bytesValue", "var_name": "bytesValue"}], "methods": [{"identifier": "of", "parameters": "(final String encoded)", "modifiers": "public static", "return": "AccountAddress", "signature": "AccountAddress of(final String encoded)", "full_signature": "public static AccountAddress of(final String encoded)", "class_method_signature": "AccountAddress.of(final String encoded)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final BytesValue bytesValue)", "modifiers": "public static", "return": "AccountAddress", "signature": "AccountAddress of(final BytesValue bytesValue)", "full_signature": "public static AccountAddress of(final BytesValue bytesValue)", "class_method_signature": "AccountAddress.of(final BytesValue bytesValue)", "testcase": false, "constructor": false}, {"identifier": "AccountAddress", "parameters": "(final String encoded)", "modifiers": "public", "return": "", "signature": " AccountAddress(final String encoded)", "full_signature": "public  AccountAddress(final String encoded)", "class_method_signature": "AccountAddress.AccountAddress(final String encoded)", "testcase": false, "constructor": true}, {"identifier": "AccountAddress", "parameters": "(final BytesValue bytesValue)", "modifiers": "public", "return": "", "signature": " AccountAddress(final BytesValue bytesValue)", "full_signature": "public  AccountAddress(final BytesValue bytesValue)", "class_method_signature": "AccountAddress.AccountAddress(final BytesValue bytesValue)", "testcase": false, "constructor": true}, {"identifier": "AccountAddress", "parameters": "()", "modifiers": "protected", "return": "", "signature": " AccountAddress()", "full_signature": "protected  AccountAddress()", "class_method_signature": "AccountAddress.AccountAddress()", "testcase": false, "constructor": true}, {"identifier": "hasPrefix", "parameters": "(final BytesValue bytesValue)", "modifiers": "protected", "return": "boolean", "signature": "boolean hasPrefix(final BytesValue bytesValue)", "full_signature": "protected boolean hasPrefix(final BytesValue bytesValue)", "class_method_signature": "AccountAddress.hasPrefix(final BytesValue bytesValue)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(final BytesValue rawAddress)", "modifiers": "protected", "return": "boolean", "signature": "boolean isValid(final BytesValue rawAddress)", "full_signature": "protected boolean isValid(final BytesValue rawAddress)", "class_method_signature": "AccountAddress.isValid(final BytesValue rawAddress)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AccountAddress.toString()", "testcase": false, "constructor": false}, {"identifier": "getEncoded", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEncoded()", "full_signature": "public String getEncoded()", "class_method_signature": "AccountAddress.getEncoded()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getValue()", "full_signature": "@Override public String getValue()", "class_method_signature": "AccountAddress.getValue()", "testcase": false, "constructor": false}, {"identifier": "adapt", "parameters": "(final Class<T> adaptor)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T adapt(final Class<T> adaptor)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T adapt(final Class<T> adaptor)", "class_method_signature": "AccountAddress.adapt(final Class<T> adaptor)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/hera/api/model/AccountAddress.java"}, "focal_method": {"identifier": "adapt", "parameters": "(final Class<T> adaptor)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n  @Override\n  public <T> T adapt(final Class<T> adaptor) {\n    if (adaptor.isAssignableFrom(AccountAddress.class)) {\n      return (T) this;\n    } else if (adaptor.isAssignableFrom(ContractAddress.class)) {\n      return (T) ContractAddress.of(getBytesValue());\n    }\n    return null;\n  }", "signature": "T adapt(final Class<T> adaptor)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T adapt(final Class<T> adaptor)", "class_method_signature": "AccountAddress.adapt(final Class<T> adaptor)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "isAssignableFrom", "of", "getBytesValue"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}