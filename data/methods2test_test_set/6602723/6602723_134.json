{"test_class": {"identifier": "TestCircuitBreakerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CircuitBreakerFactory factory;", "modifier": "private", "type": "CircuitBreakerFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private CircuitBreakerConfig config;", "modifier": "private", "type": "CircuitBreakerConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private static final int TEST_LIMIT = 5;", "modifier": "private static final", "type": "int", "declarator": "TEST_LIMIT = 5", "var_name": "TEST_LIMIT"}, {"original_string": "private static final long TEST_WINDOW_MILLIS = 30000L;", "modifier": "private static final", "type": "long", "declarator": "TEST_WINDOW_MILLIS = 30000L", "var_name": "TEST_WINDOW_MILLIS"}, {"original_string": "private static final long TEST_RESET_MILLIS = 10000L;", "modifier": "private static final", "type": "long", "declarator": "TEST_RESET_MILLIS = 10000L", "var_name": "TEST_RESET_MILLIS"}], "file": "jrugged-core/src/test/java/org/fishwife/jrugged/TestCircuitBreakerFactory.java"}, "test_case": {"identifier": "testCreateCircuitBreaker", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateCircuitBreaker() {\n        CircuitBreaker breaker = factory.createCircuitBreaker(\"testCreate\", config);\n        checkBreaker(breaker, TEST_LIMIT, TEST_WINDOW_MILLIS, TEST_RESET_MILLIS);\n    }", "signature": "void testCreateCircuitBreaker()", "full_signature": "@Test public void testCreateCircuitBreaker()", "class_method_signature": "TestCircuitBreakerFactory.testCreateCircuitBreaker()", "testcase": true, "constructor": false, "invocations": ["createCircuitBreaker", "checkBreaker"]}, "focal_class": {"identifier": "CircuitBreakerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CONFIG_KEY_PREFIX = \"circuit\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_KEY_PREFIX = \"circuit\"", "var_name": "CONFIG_KEY_PREFIX"}, {"original_string": "public static final String LIMIT_KEY = \"limit\";", "modifier": "public static final", "type": "String", "declarator": "LIMIT_KEY = \"limit\"", "var_name": "LIMIT_KEY"}, {"original_string": "public static final String WINDOWMILLIS_KEY = \"windowMillis\";", "modifier": "public static final", "type": "String", "declarator": "WINDOWMILLIS_KEY = \"windowMillis\"", "var_name": "WINDOWMILLIS_KEY"}, {"original_string": "public static final String RESETMILLIS_KEY = \"resetMillis\";", "modifier": "public static final", "type": "String", "declarator": "RESETMILLIS_KEY = \"resetMillis\"", "var_name": "RESETMILLIS_KEY"}, {"original_string": "private final ConcurrentHashMap<String, CircuitBreaker> circuitBreakerMap =\n            new ConcurrentHashMap<String, CircuitBreaker>();", "modifier": "private final", "type": "ConcurrentHashMap<String, CircuitBreaker>", "declarator": "circuitBreakerMap =\n            new ConcurrentHashMap<String, CircuitBreaker>()", "var_name": "circuitBreakerMap"}, {"original_string": "private Properties properties;", "modifier": "private", "type": "Properties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}], "methods": [{"identifier": "createCircuitBreaker", "parameters": "(String name,\n            CircuitBreakerConfig config)", "modifiers": "public synchronized", "return": "CircuitBreaker", "signature": "CircuitBreaker createCircuitBreaker(String name,\n            CircuitBreakerConfig config)", "full_signature": "public synchronized CircuitBreaker createCircuitBreaker(String name,\n            CircuitBreakerConfig config)", "class_method_signature": "CircuitBreakerFactory.createCircuitBreaker(String name,\n            CircuitBreakerConfig config)", "testcase": false, "constructor": false}, {"identifier": "setProperties", "parameters": "(Properties properties)", "modifiers": "public", "return": "void", "signature": "void setProperties(Properties properties)", "full_signature": "public void setProperties(Properties properties)", "class_method_signature": "CircuitBreakerFactory.setProperties(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "findCircuitBreaker", "parameters": "(String name)", "modifiers": "public", "return": "CircuitBreaker", "signature": "CircuitBreaker findCircuitBreaker(String name)", "full_signature": "public CircuitBreaker findCircuitBreaker(String name)", "class_method_signature": "CircuitBreakerFactory.findCircuitBreaker(String name)", "testcase": false, "constructor": false}, {"identifier": "getCircuitBreakerNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getCircuitBreakerNames()", "full_signature": "public Set<String> getCircuitBreakerNames()", "class_method_signature": "CircuitBreakerFactory.getCircuitBreakerNames()", "testcase": false, "constructor": false}, {"identifier": "configureCircuitBreaker", "parameters": "(String name,\n            CircuitBreaker circuit,\n            CircuitBreakerConfig config)", "modifiers": "protected", "return": "void", "signature": "void configureCircuitBreaker(String name,\n            CircuitBreaker circuit,\n            CircuitBreakerConfig config)", "full_signature": "protected void configureCircuitBreaker(String name,\n            CircuitBreaker circuit,\n            CircuitBreakerConfig config)", "class_method_signature": "CircuitBreakerFactory.configureCircuitBreaker(String name,\n            CircuitBreaker circuit,\n            CircuitBreakerConfig config)", "testcase": false, "constructor": false}, {"identifier": "configureDefaultFailureInterpreter", "parameters": "(String name, long resetMillis, CircuitBreaker circuit)", "modifiers": "private", "return": "void", "signature": "void configureDefaultFailureInterpreter(String name, long resetMillis, CircuitBreaker circuit)", "full_signature": "private void configureDefaultFailureInterpreter(String name, long resetMillis, CircuitBreaker circuit)", "class_method_signature": "CircuitBreakerFactory.configureDefaultFailureInterpreter(String name, long resetMillis, CircuitBreaker circuit)", "testcase": false, "constructor": false}, {"identifier": "addCircuitBreakerToMap", "parameters": "(String name, CircuitBreaker circuitBreaker)", "modifiers": "protected", "return": "void", "signature": "void addCircuitBreakerToMap(String name, CircuitBreaker circuitBreaker)", "full_signature": "protected void addCircuitBreakerToMap(String name, CircuitBreaker circuitBreaker)", "class_method_signature": "CircuitBreakerFactory.addCircuitBreakerToMap(String name, CircuitBreaker circuitBreaker)", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "(String name, String key)", "modifiers": "private", "return": "String", "signature": "String getPropertyName(String name, String key)", "full_signature": "private String getPropertyName(String name, String key)", "class_method_signature": "CircuitBreakerFactory.getPropertyName(String name, String key)", "testcase": false, "constructor": false}, {"identifier": "getIntegerPropertyOverrideValue", "parameters": "(String name, String key)", "modifiers": "private", "return": "Integer", "signature": "Integer getIntegerPropertyOverrideValue(String name, String key)", "full_signature": "private Integer getIntegerPropertyOverrideValue(String name, String key)", "class_method_signature": "CircuitBreakerFactory.getIntegerPropertyOverrideValue(String name, String key)", "testcase": false, "constructor": false}, {"identifier": "getLongPropertyOverrideValue", "parameters": "(String name, String key)", "modifiers": "private", "return": "Long", "signature": "Long getLongPropertyOverrideValue(String name, String key)", "full_signature": "private Long getLongPropertyOverrideValue(String name, String key)", "class_method_signature": "CircuitBreakerFactory.getLongPropertyOverrideValue(String name, String key)", "testcase": false, "constructor": false}], "file": "jrugged-core/src/main/java/org/fishwife/jrugged/CircuitBreakerFactory.java"}, "focal_method": {"identifier": "createCircuitBreaker", "parameters": "(String name,\n            CircuitBreakerConfig config)", "modifiers": "public synchronized", "return": "CircuitBreaker", "body": "public synchronized CircuitBreaker createCircuitBreaker(String name,\n            CircuitBreakerConfig config) {\n        CircuitBreaker circuitBreaker = findCircuitBreaker(name);\n\n        if (circuitBreaker == null) {\n            circuitBreaker = new CircuitBreaker(name);\n\n            configureCircuitBreaker(name, circuitBreaker, config);\n            addCircuitBreakerToMap(name, circuitBreaker);\n        }\n\n        return circuitBreaker;\n    }", "signature": "CircuitBreaker createCircuitBreaker(String name,\n            CircuitBreakerConfig config)", "full_signature": "public synchronized CircuitBreaker createCircuitBreaker(String name,\n            CircuitBreakerConfig config)", "class_method_signature": "CircuitBreakerFactory.createCircuitBreaker(String name,\n            CircuitBreakerConfig config)", "testcase": false, "constructor": false, "invocations": ["findCircuitBreaker", "configureCircuitBreaker", "addCircuitBreakerToMap"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}