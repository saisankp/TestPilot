{"test_class": {"identifier": "DbSetIdTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String[] COLUMNS = {\"Region\", \"Sector\"};", "modifier": "static final", "type": "String[]", "declarator": "COLUMNS = {\"Region\", \"Sector\"}", "var_name": "COLUMNS"}, {"original_string": "static final String[] V0 = {};", "modifier": "static final", "type": "String[]", "declarator": "V0 = {}", "var_name": "V0"}, {"original_string": "static final String[] V1 = {\"Belgium\"};", "modifier": "static final", "type": "String[]", "declarator": "V1 = {\"Belgium\"}", "var_name": "V1"}, {"original_string": "static final String[] V2 = {\"Belgium\", \"Industry\"};", "modifier": "static final", "type": "String[]", "declarator": "V2 = {\"Belgium\", \"Industry\"}", "var_name": "V2"}, {"original_string": "static final DbSetId ID0 = DbSetId.root(COLUMNS);", "modifier": "static final", "type": "DbSetId", "declarator": "ID0 = DbSetId.root(COLUMNS)", "var_name": "ID0"}, {"original_string": "static final DbSetId ID1 = ID0.child(V1);", "modifier": "static final", "type": "DbSetId", "declarator": "ID1 = ID0.child(V1)", "var_name": "ID1"}, {"original_string": "static final DbSetId ID2 = ID0.child(V2);", "modifier": "static final", "type": "DbSetId", "declarator": "ID2 = ID0.child(V2)", "var_name": "ID2"}], "file": "jdbcprovider/src/test/java/ec/tss/tsproviders/db/DbSetIdTest.java"}, "test_case": {"identifier": "testRoot", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testRoot() {\n        String[] tmp = new String[1];\n        tmp[0] = null;\n        DbSetId.root(tmp);\n    }", "signature": "void testRoot()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testRoot()", "class_method_signature": "DbSetIdTest.testRoot()", "testcase": true, "constructor": false, "invocations": ["root"]}, "focal_class": {"identifier": "DbSetId", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String[] dimValues;", "modifier": "private final", "type": "String[]", "declarator": "dimValues", "var_name": "dimValues"}, {"original_string": "private final String[] dimColumns;", "modifier": "private final", "type": "String[]", "declarator": "dimColumns", "var_name": "dimColumns"}, {"original_string": "public static final IConstraint<DbSetId> SERIES_CONSTRAINT = new IConstraint<DbSetId>() {\n        @Override\n        public String check(DbSetId t) {\n            return t.isSeries() ? null : \"Not a series\";\n        }\n    };", "modifier": "public static final", "type": "IConstraint<DbSetId>", "declarator": "SERIES_CONSTRAINT = new IConstraint<DbSetId>() {\n        @Override\n        public String check(DbSetId t) {\n            return t.isSeries() ? null : \"Not a series\";\n        }\n    }", "var_name": "SERIES_CONSTRAINT"}, {"original_string": "public static final IConstraint<DbSetId> COLLECTION_CONSTRAINT = new IConstraint<DbSetId>() {\n        @Override\n        public String check(DbSetId t) {\n            return !t.isSeries() ? null : \"Not a collection\";\n        }\n    };", "modifier": "public static final", "type": "IConstraint<DbSetId>", "declarator": "COLLECTION_CONSTRAINT = new IConstraint<DbSetId>() {\n        @Override\n        public String check(DbSetId t) {\n            return !t.isSeries() ? null : \"Not a collection\";\n        }\n    }", "var_name": "COLLECTION_CONSTRAINT"}], "methods": [{"identifier": "root", "parameters": "(@NonNull String... dimColumns)", "modifiers": "@NonNull public static", "return": "DbSetId", "signature": "DbSetId root(@NonNull String... dimColumns)", "full_signature": "@NonNull public static DbSetId root(@NonNull String... dimColumns)", "class_method_signature": "DbSetId.root(@NonNull String... dimColumns)", "testcase": false, "constructor": false}, {"identifier": "DbSetId", "parameters": "(@NonNull String[] dimValues, @NonNull String[] dimColumns)", "modifiers": "private", "return": "", "signature": " DbSetId(@NonNull String[] dimValues, @NonNull String[] dimColumns)", "full_signature": "private  DbSetId(@NonNull String[] dimValues, @NonNull String[] dimColumns)", "class_method_signature": "DbSetId.DbSetId(@NonNull String[] dimValues, @NonNull String[] dimColumns)", "testcase": false, "constructor": true}, {"identifier": "getLevel", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLevel()", "full_signature": "public int getLevel()", "class_method_signature": "DbSetId.getLevel()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(int index)", "modifiers": "@NonNull public", "return": "String", "signature": "String getValue(int index)", "full_signature": "@NonNull public String getValue(int index)", "class_method_signature": "DbSetId.getValue(int index)", "testcase": false, "constructor": false}, {"identifier": "getMaxLevel", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxLevel()", "full_signature": "public int getMaxLevel()", "class_method_signature": "DbSetId.getMaxLevel()", "testcase": false, "constructor": false}, {"identifier": "getColumn", "parameters": "(int index)", "modifiers": "@NonNull public", "return": "String", "signature": "String getColumn(int index)", "full_signature": "@NonNull public String getColumn(int index)", "class_method_signature": "DbSetId.getColumn(int index)", "testcase": false, "constructor": false}, {"identifier": "getDepth", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDepth()", "full_signature": "public int getDepth()", "class_method_signature": "DbSetId.getDepth()", "testcase": false, "constructor": false}, {"identifier": "isSeries", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSeries()", "full_signature": "public boolean isSeries()", "class_method_signature": "DbSetId.isSeries()", "testcase": false, "constructor": false}, {"identifier": "child", "parameters": "(@NonNull String... dimValues)", "modifiers": "@NonNull public", "return": "DbSetId", "signature": "DbSetId child(@NonNull String... dimValues)", "full_signature": "@NonNull public DbSetId child(@NonNull String... dimValues)", "class_method_signature": "DbSetId.child(@NonNull String... dimValues)", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "public boolean isRoot()", "class_method_signature": "DbSetId.isRoot()", "testcase": false, "constructor": false}, {"identifier": "parent", "parameters": "()", "modifiers": "@NonNull public", "return": "Optional<DbSetId>", "signature": "Optional<DbSetId> parent()", "full_signature": "@NonNull public Optional<DbSetId> parent()", "class_method_signature": "DbSetId.parent()", "testcase": false, "constructor": false}, {"identifier": "selectColumns", "parameters": "()", "modifiers": "@NonNull public", "return": "String[]", "signature": "String[] selectColumns()", "full_signature": "@NonNull public String[] selectColumns()", "class_method_signature": "DbSetId.selectColumns()", "testcase": false, "constructor": false}, {"identifier": "filterColumns", "parameters": "()", "modifiers": "@NonNull public", "return": "String[]", "signature": "String[] filterColumns()", "full_signature": "@NonNull public String[] filterColumns()", "class_method_signature": "DbSetId.filterColumns()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DbSetId.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DbSetId.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@NonNull DbSetId that)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(@NonNull DbSetId that)", "full_signature": "private boolean equals(@NonNull DbSetId that)", "class_method_signature": "DbSetId.equals(@NonNull DbSetId that)", "testcase": false, "constructor": false}, {"identifier": "equalsReversed", "parameters": "(@Nullable Object[] l, @Nullable Object[] r)", "modifiers": "private static", "return": "boolean", "signature": "boolean equalsReversed(@Nullable Object[] l, @Nullable Object[] r)", "full_signature": "private static boolean equalsReversed(@Nullable Object[] l, @Nullable Object[] r)", "class_method_signature": "DbSetId.equalsReversed(@Nullable Object[] l, @Nullable Object[] r)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DbSetId.hashCode()", "testcase": false, "constructor": false}], "file": "jdbcprovider/src/main/java/ec/tss/tsproviders/db/DbSetId.java"}, "focal_method": {"identifier": "root", "parameters": "(@NonNull String... dimColumns)", "modifiers": "@NonNull public static", "return": "DbSetId", "body": "@NonNull\n    public static DbSetId root(@NonNull String... dimColumns) throws IllegalArgumentException {\n        for (String o : dimColumns) {\n            if (o == null) {\n                throw new IllegalArgumentException(\"Columns cannot be null\");\n            }\n        }\n        return new DbSetId(Arrays2.EMPTY_STRING_ARRAY, dimColumns.clone());\n    }", "signature": "DbSetId root(@NonNull String... dimColumns)", "full_signature": "@NonNull public static DbSetId root(@NonNull String... dimColumns)", "class_method_signature": "DbSetId.root(@NonNull String... dimColumns)", "testcase": false, "constructor": false, "invocations": ["clone"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}