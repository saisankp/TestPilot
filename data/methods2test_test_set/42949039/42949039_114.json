{"test_class": {"identifier": "SecurityHelperTest", "superclass": "extends AbstractAppTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CacheManager cacheManager;", "modifier": "@Autowired\n    private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "@Autowired\n    private SecurityHelper securityHelper;", "modifier": "@Autowired\n    private", "type": "SecurityHelper", "declarator": "securityHelper", "var_name": "securityHelper"}], "file": "herd-code/herd-app/src/test/java/org/finra/herd/app/security/SecurityHelperTest.java"}, "test_case": {"identifier": "testGetUnrestrictedFunctions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetUnrestrictedFunctions()\n    {\n        // Create a security function not mapped to any of the security roles.\n        SecurityFunctionEntity securityFunctionEntity = new SecurityFunctionEntity();\n        securityFunctionEntity.setCode(SECURITY_FUNCTION);\n        herdDao.saveAndRefresh(securityFunctionEntity);\n\n        // Clear the cache.\n        cacheManager.getCache(DaoSpringModuleConfig.HERD_CACHE_NAME).clear();\n\n        // Get unrestricted functions.\n        Set<GrantedAuthority> result = securityHelper.getUnrestrictedFunctions();\n\n        // Validate that result list contains the test security function.\n        assertTrue(result.contains(new SimpleGrantedAuthority(SECURITY_FUNCTION)));\n    }", "signature": "void testGetUnrestrictedFunctions()", "full_signature": "@Test public void testGetUnrestrictedFunctions()", "class_method_signature": "SecurityHelperTest.testGetUnrestrictedFunctions()", "testcase": true, "constructor": false, "invocations": ["setCode", "saveAndRefresh", "clear", "getCache", "getUnrestrictedFunctions", "assertTrue", "contains"]}, "focal_class": {"identifier": "SecurityHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private SpelExpressionHelper spelExpressionHelper;", "modifier": "@Autowired\n    private", "type": "SpelExpressionHelper", "declarator": "spelExpressionHelper", "var_name": "spelExpressionHelper"}], "methods": [{"identifier": "getUnrestrictedFunctions", "parameters": "()", "modifiers": "public", "return": "Set<GrantedAuthority>", "signature": "Set<GrantedAuthority> getUnrestrictedFunctions()", "full_signature": "public Set<GrantedAuthority> getUnrestrictedFunctions()", "class_method_signature": "SecurityHelper.getUnrestrictedFunctions()", "testcase": false, "constructor": false}, {"identifier": "isSecurityEnabled", "parameters": "(HttpServletRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean isSecurityEnabled(HttpServletRequest request)", "full_signature": "public boolean isSecurityEnabled(HttpServletRequest request)", "class_method_signature": "SecurityHelper.isSecurityEnabled(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "isUserGeneratedByClass", "parameters": "(Authentication authentication, Class<?> generatedByClass)", "modifiers": "public", "return": "boolean", "signature": "boolean isUserGeneratedByClass(Authentication authentication, Class<?> generatedByClass)", "full_signature": "public boolean isUserGeneratedByClass(Authentication authentication, Class<?> generatedByClass)", "class_method_signature": "SecurityHelper.isUserGeneratedByClass(Authentication authentication, Class<?> generatedByClass)", "testcase": false, "constructor": false}, {"identifier": "mapRolesToFunctions", "parameters": "(Collection<String> roles)", "modifiers": "public", "return": "Set<GrantedAuthority>", "signature": "Set<GrantedAuthority> mapRolesToFunctions(Collection<String> roles)", "full_signature": "public Set<GrantedAuthority> mapRolesToFunctions(Collection<String> roles)", "class_method_signature": "SecurityHelper.mapRolesToFunctions(Collection<String> roles)", "testcase": false, "constructor": false}], "file": "herd-code/herd-app/src/main/java/org/finra/herd/app/security/SecurityHelper.java"}, "focal_method": {"identifier": "getUnrestrictedFunctions", "parameters": "()", "modifiers": "public", "return": "Set<GrantedAuthority>", "body": "public Set<GrantedAuthority> getUnrestrictedFunctions()\n    {\n        // TODO Getting HerdDao from applicationContext statically because if we try to wire HerdDao here it does not get constructed with proxy class that is\n        // needed for @Cacheable methods to work.\n        SecurityFunctionDao securityFunctionDao = ApplicationContextHolder.getApplicationContext().getBean(SecurityFunctionDao.class);\n\n        Set<GrantedAuthority> authorities = new HashSet<>();\n\n        // Add all unrestricted functional points.\n        for (String function : securityFunctionDao.getUnrestrictedSecurityFunctions())\n        {\n            authorities.add(new SimpleGrantedAuthority(function));\n        }\n\n        return authorities;\n    }", "signature": "Set<GrantedAuthority> getUnrestrictedFunctions()", "full_signature": "public Set<GrantedAuthority> getUnrestrictedFunctions()", "class_method_signature": "SecurityHelper.getUnrestrictedFunctions()", "testcase": false, "constructor": false, "invocations": ["getBean", "getApplicationContext", "getUnrestrictedSecurityFunctions", "add"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}