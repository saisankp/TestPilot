{"test_class": {"identifier": "LocationNameMatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "code-assert-core/src/test/java/guru/nidi/codeassert/config/LocationNameMatcherTest.java"}, "test_case": {"identifier": "language", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void language() {\n        final LocationNameMatcher m = new LocationNameMatcher(\n                asList(Location.of(\"java:A\"), Location.of(\"kotlin:\")), asList(\"c\"));\n        assertTrue(m.matches(\"c\", null, \"A\", null, true));\n        assertTrue(m.matches(\"c\", JAVA, \"A\", null, true));\n        assertTrue(m.matches(\"c\", KOTLIN, \"B\", null, true));\n        assertFalse(m.matches(\"c\", SCALA, \"A\", null, true));\n    }", "signature": "void language()", "full_signature": "@Test void language()", "class_method_signature": "LocationNameMatcherTest.language()", "testcase": true, "constructor": false, "invocations": ["asList", "of", "of", "asList", "assertTrue", "matches", "assertTrue", "matches", "assertTrue", "matches", "assertFalse", "matches"]}, "focal_class": {"identifier": "LocationNameMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<LocationMatcher> matchers;", "modifier": "private final", "type": "List<LocationMatcher>", "declarator": "matchers", "var_name": "matchers"}, {"original_string": "private final List<String> names;", "modifier": "private final", "type": "List<String>", "declarator": "names", "var_name": "names"}], "methods": [{"identifier": "LocationNameMatcher", "parameters": "(List<Location> locs, List<String> names)", "modifiers": "public", "return": "", "signature": " LocationNameMatcher(List<Location> locs, List<String> names)", "full_signature": "public  LocationNameMatcher(List<Location> locs, List<String> names)", "class_method_signature": "LocationNameMatcher.LocationNameMatcher(List<Location> locs, List<String> names)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(String name, Language lang, String className, String methodName, boolean strictNameMatch)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(String name, Language lang, String className, String methodName, boolean strictNameMatch)", "full_signature": "public boolean matches(String name, Language lang, String className, String methodName, boolean strictNameMatch)", "class_method_signature": "LocationNameMatcher.matches(String name, Language lang, String className, String methodName, boolean strictNameMatch)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(LocationMatcher matcher, String name, Language language, String className,\n                            String methodName, boolean strictNameMatch)", "modifiers": "private", "return": "boolean", "signature": "boolean matches(LocationMatcher matcher, String name, Language language, String className,\n                            String methodName, boolean strictNameMatch)", "full_signature": "private boolean matches(LocationMatcher matcher, String name, Language language, String className,\n                            String methodName, boolean strictNameMatch)", "class_method_signature": "LocationNameMatcher.matches(LocationMatcher matcher, String name, Language language, String className,\n                            String methodName, boolean strictNameMatch)", "testcase": false, "constructor": false}, {"identifier": "matchesName", "parameters": "(String name, boolean strictNameMatch)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesName(String name, boolean strictNameMatch)", "full_signature": "private boolean matchesName(String name, boolean strictNameMatch)", "class_method_signature": "LocationNameMatcher.matchesName(String name, boolean strictNameMatch)", "testcase": false, "constructor": false}, {"identifier": "createPattern", "parameters": "(String pattern, boolean strictPattern)", "modifiers": "private", "return": "String", "signature": "String createPattern(String pattern, boolean strictPattern)", "full_signature": "private String createPattern(String pattern, boolean strictPattern)", "class_method_signature": "LocationNameMatcher.createPattern(String pattern, boolean strictPattern)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LocationNameMatcher.toString()", "testcase": false, "constructor": false}], "file": "code-assert-core/src/main/java/guru/nidi/codeassert/config/LocationNameMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(String name, Language lang, String className, String methodName, boolean strictNameMatch)", "modifiers": "public", "return": "boolean", "body": "public boolean matches(String name, Language lang, String className, String methodName, boolean strictNameMatch) {\n        if (matchers.isEmpty()) {\n            return matchesName(name, strictNameMatch);\n        }\n        for (final LocationMatcher matcher : matchers) {\n            if (matches(matcher, name, lang, className, methodName, strictNameMatch)) {\n                return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean matches(String name, Language lang, String className, String methodName, boolean strictNameMatch)", "full_signature": "public boolean matches(String name, Language lang, String className, String methodName, boolean strictNameMatch)", "class_method_signature": "LocationNameMatcher.matches(String name, Language lang, String className, String methodName, boolean strictNameMatch)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "matchesName", "matches"]}, "repository": {"repo_id": 48196746, "url": "https://github.com/nidi3/code-assert", "stars": 67, "created": "12/17/2015 8:30:58 PM +00:00", "updates": "2019-12-16T11:54:24+00:00", "fork": "False", "license": "licensed"}}