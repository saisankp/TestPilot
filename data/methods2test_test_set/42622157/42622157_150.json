{"test_class": {"identifier": "XMLRepositoryTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/backend/filebased/XMLRepositoryTest.java"}, "test_case": {"identifier": "namespaceWithSpaceAtEndWorks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void namespaceWithSpaceAtEndWorks() throws Exception {\n        this.setRevisionTo(\"5fdcffa9ccd17743d5498cab0914081fc33606e9\");\n        NodeTypeId id = new NodeTypeId(\"http://www.example.org \", \"id\", false);\n        assertFalse(this.repository.exists(id));\n        this.repository.flagAsExisting(id);\n        assertTrue(this.repository.exists(id));\n        assertNotNull(this.repository.getElement(id));\n    }", "signature": "void namespaceWithSpaceAtEndWorks()", "full_signature": "@Test public void namespaceWithSpaceAtEndWorks()", "class_method_signature": "XMLRepositoryTest.namespaceWithSpaceAtEndWorks()", "testcase": true, "constructor": false, "invocations": ["setRevisionTo", "assertFalse", "exists", "flagAsExisting", "assertTrue", "exists", "assertNotNull", "getElement"]}, "focal_class": {"identifier": "XMLRepository", "superclass": "extends AbstractFileBasedRepository", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(XMLRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(XMLRepository.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "XMLRepository", "parameters": "(Path repositoryRoot)", "modifiers": "public", "return": "", "signature": " XMLRepository(Path repositoryRoot)", "full_signature": "public  XMLRepository(Path repositoryRoot)", "class_method_signature": "XMLRepository.XMLRepository(Path repositoryRoot)", "testcase": false, "constructor": true}, {"identifier": "definitionsFromRef", "parameters": "(RepositoryFileReference ref)", "modifiers": "@Override public", "return": "Definitions", "signature": "Definitions definitionsFromRef(RepositoryFileReference ref)", "full_signature": "@Override public Definitions definitionsFromRef(RepositoryFileReference ref)", "class_method_signature": "XMLRepository.definitionsFromRef(RepositoryFileReference ref)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(GenericId id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(GenericId id)", "full_signature": "@Override public boolean exists(GenericId id)", "class_method_signature": "XMLRepository.exists(GenericId id)", "testcase": false, "constructor": false}, {"identifier": "putContentToFile", "parameters": "(RepositoryFileReference ref, InputStream inputStream, MediaType mediaType)", "modifiers": "@Override public", "return": "void", "signature": "void putContentToFile(RepositoryFileReference ref, InputStream inputStream, MediaType mediaType)", "full_signature": "@Override public void putContentToFile(RepositoryFileReference ref, InputStream inputStream, MediaType mediaType)", "class_method_signature": "XMLRepository.putContentToFile(RepositoryFileReference ref, InputStream inputStream, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(RepositoryFileReference ref)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(RepositoryFileReference ref)", "full_signature": "@Override public boolean exists(RepositoryFileReference ref)", "class_method_signature": "XMLRepository.exists(RepositoryFileReference ref)", "testcase": false, "constructor": false}, {"identifier": "getDefinitionsChildIds", "parameters": "(Class<T> idClass, boolean omitDevelopmentVersions)", "modifiers": "public", "return": "SortedSet<T>", "signature": "SortedSet<T> getDefinitionsChildIds(Class<T> idClass, boolean omitDevelopmentVersions)", "full_signature": "public SortedSet<T> getDefinitionsChildIds(Class<T> idClass, boolean omitDevelopmentVersions)", "class_method_signature": "XMLRepository.getDefinitionsChildIds(Class<T> idClass, boolean omitDevelopmentVersions)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/filebased/XMLRepository.java"}, "focal_method": {"identifier": "exists", "parameters": "(GenericId id)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean exists(GenericId id) {\n        Path absolutePath = this.id2AbsolutePath(id);\n        return Files.exists(absolutePath);\n    }", "signature": "boolean exists(GenericId id)", "full_signature": "@Override public boolean exists(GenericId id)", "class_method_signature": "XMLRepository.exists(GenericId id)", "testcase": false, "constructor": false, "invocations": ["id2AbsolutePath", "exists"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}