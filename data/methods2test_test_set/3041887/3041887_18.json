{"test_class": {"identifier": "FJIterateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Procedure<Integer> EXCEPTION_PROCEDURE = new Procedure<Integer>()\n    {\n        public void value(Integer value)\n        {\n            throw new RuntimeException(\"Thread death on its way!\");\n        }\n    };", "modifier": "private static final", "type": "Procedure<Integer>", "declarator": "EXCEPTION_PROCEDURE = new Procedure<Integer>()\n    {\n        public void value(Integer value)\n        {\n            throw new RuntimeException(\"Thread death on its way!\");\n        }\n    }", "var_name": "EXCEPTION_PROCEDURE"}, {"original_string": "private static final ObjectIntProcedure<Integer> EXCEPTION_OBJECT_INT_PROCEDURE = new ObjectIntProcedure<Integer>()\n    {\n        public void value(Integer object, int index)\n        {\n            throw new RuntimeException(\"Thread death on its way!\");\n        }\n    };", "modifier": "private static final", "type": "ObjectIntProcedure<Integer>", "declarator": "EXCEPTION_OBJECT_INT_PROCEDURE = new ObjectIntProcedure<Integer>()\n    {\n        public void value(Integer object, int index)\n        {\n            throw new RuntimeException(\"Thread death on its way!\");\n        }\n    }", "var_name": "EXCEPTION_OBJECT_INT_PROCEDURE"}, {"original_string": "private static final Function<Integer, Collection<String>> INT_TO_TWO_STRINGS = new Function<Integer, Collection<String>>()\n    {\n        public Collection<String> valueOf(Integer integer)\n        {\n            return Lists.fixedSize.of(integer.toString(), integer.toString());\n        }\n    };", "modifier": "private static final", "type": "Function<Integer, Collection<String>>", "declarator": "INT_TO_TWO_STRINGS = new Function<Integer, Collection<String>>()\n    {\n        public Collection<String> valueOf(Integer integer)\n        {\n            return Lists.fixedSize.of(integer.toString(), integer.toString());\n        }\n    }", "var_name": "INT_TO_TWO_STRINGS"}, {"original_string": "private static final Function0<AtomicInteger> ATOMIC_INTEGER_NEW = Functions0.zeroAtomicInteger();", "modifier": "private static final", "type": "Function0<AtomicInteger>", "declarator": "ATOMIC_INTEGER_NEW = Functions0.zeroAtomicInteger()", "var_name": "ATOMIC_INTEGER_NEW"}, {"original_string": "private static final Function0<Integer> INTEGER_NEW = Functions0.value(0);", "modifier": "private static final", "type": "Function0<Integer>", "declarator": "INTEGER_NEW = Functions0.value(0)", "var_name": "INTEGER_NEW"}, {"original_string": "private static final Function<Integer, String> EVEN_OR_ODD = new Function<Integer, String>()\n    {\n        public String valueOf(Integer value)\n        {\n            return value % 2 == 0 ? \"Even\" : \"Odd\";\n        }\n    };", "modifier": "private static final", "type": "Function<Integer, String>", "declarator": "EVEN_OR_ODD = new Function<Integer, String>()\n    {\n        public String valueOf(Integer value)\n        {\n            return value % 2 == 0 ? \"Even\" : \"Odd\";\n        }\n    }", "var_name": "EVEN_OR_ODD"}, {"original_string": "private ImmutableList<RichIterable<Integer>> iterables;", "modifier": "private", "type": "ImmutableList<RichIterable<Integer>>", "declarator": "iterables", "var_name": "iterables"}, {"original_string": "private final ForkJoinPool executor = new ForkJoinPool(2);", "modifier": "private final", "type": "ForkJoinPool", "declarator": "executor = new ForkJoinPool(2)", "var_name": "executor"}], "file": "gs-collections-forkjoin/src/test/java/com/gs/collections/impl/forkjoin/FJIterateTest.java"}, "test_case": {"identifier": "groupBy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void groupBy()\n    {\n        FastList<String> source = FastList.newListWith(\"Ted\", \"Sally\", \"Mary\", \"Bob\", \"Sara\");\n        Multimap<Character, String> result1 = FJIterate.groupBy(source, StringFunctions.firstLetter(), 1);\n        Multimap<Character, String> result2 = FJIterate.groupBy(Collections.synchronizedList(source), StringFunctions.firstLetter(), 1);\n        Multimap<Character, String> result3 = FJIterate.groupBy(Collections.synchronizedCollection(source), StringFunctions.firstLetter(), 1);\n        Multimap<Character, String> result4 = FJIterate.groupBy(LazyIterate.adapt(source), StringFunctions.firstLetter(), 1);\n        Multimap<Character, String> result5 = FJIterate.groupBy(new ArrayList<>(source), StringFunctions.firstLetter(), 1);\n        Multimap<Character, String> result6 = FJIterate.groupBy(source.toSet(), StringFunctions.firstLetter(), 1);\n        Multimap<Character, String> result7 = FJIterate.groupBy(source.toMap(Functions.getStringPassThru(), Functions.getStringPassThru()), StringFunctions.firstLetter(), 1);\n        Multimap<Character, String> result8 = FJIterate.groupBy(source.toBag(), StringFunctions.firstLetter(), 1);\n        Multimap<Character, String> result9 = FJIterate.groupBy(source.toImmutable(), StringFunctions.firstLetter(), 1);\n        MutableMultimap<Character, String> expected = HashBagMultimap.newMultimap();\n        expected.put('T', \"Ted\");\n        expected.put('S', \"Sally\");\n        expected.put('M', \"Mary\");\n        expected.put('B', \"Bob\");\n        expected.put('S', \"Sara\");\n        Assert.assertEquals(expected, HashBagMultimap.newMultimap(result1));\n        Assert.assertEquals(expected, HashBagMultimap.newMultimap(result2));\n        Assert.assertEquals(expected, HashBagMultimap.newMultimap(result3));\n        Assert.assertEquals(expected, HashBagMultimap.newMultimap(result4));\n        Assert.assertEquals(expected, HashBagMultimap.newMultimap(result5));\n        Assert.assertEquals(expected, HashBagMultimap.newMultimap(result6));\n        Assert.assertEquals(expected, HashBagMultimap.newMultimap(result7));\n        Assert.assertEquals(expected, HashBagMultimap.newMultimap(result8));\n        Assert.assertEquals(expected, HashBagMultimap.newMultimap(result9));\n        Verify.assertThrows(IllegalArgumentException.class, new Runnable()\n        {\n            public void run()\n            {\n                FJIterate.groupBy(null, null, 1);\n            }\n        });\n    }", "signature": "void groupBy()", "full_signature": "@Test public void groupBy()", "class_method_signature": "FJIterateTest.groupBy()", "testcase": true, "constructor": false, "invocations": ["newListWith", "groupBy", "firstLetter", "groupBy", "synchronizedList", "firstLetter", "groupBy", "synchronizedCollection", "firstLetter", "groupBy", "adapt", "firstLetter", "groupBy", "firstLetter", "groupBy", "toSet", "firstLetter", "groupBy", "toMap", "getStringPassThru", "getStringPassThru", "firstLetter", "groupBy", "toBag", "firstLetter", "groupBy", "toImmutable", "firstLetter", "newMultimap", "put", "put", "put", "put", "put", "assertEquals", "newMultimap", "assertEquals", "newMultimap", "assertEquals", "newMultimap", "assertEquals", "newMultimap", "assertEquals", "newMultimap", "assertEquals", "newMultimap", "assertEquals", "newMultimap", "assertEquals", "newMultimap", "assertEquals", "newMultimap", "assertThrows", "groupBy"]}, "focal_class": {"identifier": "FJIterate", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_MIN_FORK_SIZE = 5000;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_MIN_FORK_SIZE = 5000", "var_name": "DEFAULT_MIN_FORK_SIZE"}, {"original_string": "private static final int DEFAULT_PARALLEL_TASK_COUNT = ParallelIterate.getDefaultTaskCount() * 4;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PARALLEL_TASK_COUNT = ParallelIterate.getDefaultTaskCount() * 4", "var_name": "DEFAULT_PARALLEL_TASK_COUNT"}, {"original_string": "private static final ForkJoinPool FORK_JOIN_POOL = new ForkJoinPool(ParallelIterate.getDefaultMaxThreadPoolSize());", "modifier": "private static final", "type": "ForkJoinPool", "declarator": "FORK_JOIN_POOL = new ForkJoinPool(ParallelIterate.getDefaultMaxThreadPoolSize())", "var_name": "FORK_JOIN_POOL"}], "methods": [{"identifier": "FJIterate", "parameters": "()", "modifiers": "private", "return": "", "signature": " FJIterate()", "full_signature": "private  FJIterate()", "class_method_signature": "FJIterate.FJIterate()", "testcase": false, "constructor": true}, {"identifier": "forEachWithIndex", "parameters": "(\n            Iterable<T> iterable,\n            ObjectIntProcedure<? super T> procedure)", "modifiers": "public static", "return": "void", "signature": "void forEachWithIndex(\n            Iterable<T> iterable,\n            ObjectIntProcedure<? super T> procedure)", "full_signature": "public static void forEachWithIndex(\n            Iterable<T> iterable,\n            ObjectIntProcedure<? super T> procedure)", "class_method_signature": "FJIterate.forEachWithIndex(\n            Iterable<T> iterable,\n            ObjectIntProcedure<? super T> procedure)", "testcase": false, "constructor": false}, {"identifier": "forEachWithIndex", "parameters": "(\n            Iterable<T> iterable,\n            PT procedure,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "void", "signature": "void forEachWithIndex(\n            Iterable<T> iterable,\n            PT procedure,\n            ForkJoinPool executor)", "full_signature": "public static void forEachWithIndex(\n            Iterable<T> iterable,\n            PT procedure,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.forEachWithIndex(\n            Iterable<T> iterable,\n            PT procedure,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "forEachWithIndex", "parameters": "(\n            Iterable<T> iterable,\n            PT procedure,\n            int minForkSize,\n            int taskCount)", "modifiers": "public static", "return": "void", "signature": "void forEachWithIndex(\n            Iterable<T> iterable,\n            PT procedure,\n            int minForkSize,\n            int taskCount)", "full_signature": "public static void forEachWithIndex(\n            Iterable<T> iterable,\n            PT procedure,\n            int minForkSize,\n            int taskCount)", "class_method_signature": "FJIterate.forEachWithIndex(\n            Iterable<T> iterable,\n            PT procedure,\n            int minForkSize,\n            int taskCount)", "testcase": false, "constructor": false}, {"identifier": "forEachWithIndex", "parameters": "(\n            Iterable<T> iterable,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "void", "signature": "void forEachWithIndex(\n            Iterable<T> iterable,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            ForkJoinPool executor)", "full_signature": "public static void forEachWithIndex(\n            Iterable<T> iterable,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.forEachWithIndex(\n            Iterable<T> iterable,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "forEachWithIndex", "parameters": "(\n            Iterable<T> iterable,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount)", "modifiers": "public static", "return": "void", "signature": "void forEachWithIndex(\n            Iterable<T> iterable,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount)", "full_signature": "public static void forEachWithIndex(\n            Iterable<T> iterable,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount)", "class_method_signature": "FJIterate.forEachWithIndex(\n            Iterable<T> iterable,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount)", "testcase": false, "constructor": false}, {"identifier": "forEachWithIndex", "parameters": "(\n            Iterable<T> iterable,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "void", "signature": "void forEachWithIndex(\n            Iterable<T> iterable,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "full_signature": "public static void forEachWithIndex(\n            Iterable<T> iterable,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.forEachWithIndex(\n            Iterable<T> iterable,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "forEachWithIndexInListOnExecutor", "parameters": "(\n            List<T> list,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "void", "signature": "void forEachWithIndexInListOnExecutor(\n            List<T> list,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "full_signature": "public static void forEachWithIndexInListOnExecutor(\n            List<T> list,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.forEachWithIndexInListOnExecutor(\n            List<T> list,\n            ObjectIntProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(Iterable<T> iterable, Procedure<? super T> procedure)", "modifiers": "public static", "return": "void", "signature": "void forEach(Iterable<T> iterable, Procedure<? super T> procedure)", "full_signature": "public static void forEach(Iterable<T> iterable, Procedure<? super T> procedure)", "class_method_signature": "FJIterate.forEach(Iterable<T> iterable, Procedure<? super T> procedure)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(Iterable<T> iterable, Procedure<? super T> procedure, int batchSize)", "modifiers": "public static", "return": "void", "signature": "void forEach(Iterable<T> iterable, Procedure<? super T> procedure, int batchSize)", "full_signature": "public static void forEach(Iterable<T> iterable, Procedure<? super T> procedure, int batchSize)", "class_method_signature": "FJIterate.forEach(Iterable<T> iterable, Procedure<? super T> procedure, int batchSize)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(Iterable<T> iterable, Procedure<? super T> procedure, int batchSize, ForkJoinPool executor)", "modifiers": "public static", "return": "void", "signature": "void forEach(Iterable<T> iterable, Procedure<? super T> procedure, int batchSize, ForkJoinPool executor)", "full_signature": "public static void forEach(Iterable<T> iterable, Procedure<? super T> procedure, int batchSize, ForkJoinPool executor)", "class_method_signature": "FJIterate.forEach(Iterable<T> iterable, Procedure<? super T> procedure, int batchSize, ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(\n            Iterable<T> iterable,\n            PT procedure,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "void", "signature": "void forEach(\n            Iterable<T> iterable,\n            PT procedure,\n            ForkJoinPool executor)", "full_signature": "public static void forEach(\n            Iterable<T> iterable,\n            PT procedure,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.forEach(\n            Iterable<T> iterable,\n            PT procedure,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(\n            Iterable<T> iterable,\n            PT procedure,\n            int minForkSize,\n            int taskCount)", "modifiers": "public static", "return": "void", "signature": "void forEach(\n            Iterable<T> iterable,\n            PT procedure,\n            int minForkSize,\n            int taskCount)", "full_signature": "public static void forEach(\n            Iterable<T> iterable,\n            PT procedure,\n            int minForkSize,\n            int taskCount)", "class_method_signature": "FJIterate.forEach(\n            Iterable<T> iterable,\n            PT procedure,\n            int minForkSize,\n            int taskCount)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(\n            Iterable<T> iterable,\n            PT procedure,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "void", "signature": "void forEach(\n            Iterable<T> iterable,\n            PT procedure,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "full_signature": "public static void forEach(\n            Iterable<T> iterable,\n            PT procedure,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.forEach(\n            Iterable<T> iterable,\n            PT procedure,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "void", "signature": "void forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            ForkJoinPool executor)", "full_signature": "public static void forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner)", "modifiers": "public static", "return": "void", "signature": "void forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner)", "full_signature": "public static void forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner)", "class_method_signature": "FJIterate.forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int batchSize)", "modifiers": "public static", "return": "void", "signature": "void forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int batchSize)", "full_signature": "public static void forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int batchSize)", "class_method_signature": "FJIterate.forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int batchSize)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> blockFactory,\n            Combiner<PT> combiner,\n            int batchSize,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "void", "signature": "void forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> blockFactory,\n            Combiner<PT> combiner,\n            int batchSize,\n            ForkJoinPool executor)", "full_signature": "public static void forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> blockFactory,\n            Combiner<PT> combiner,\n            int batchSize,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> blockFactory,\n            Combiner<PT> combiner,\n            int batchSize,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount)", "modifiers": "public static", "return": "void", "signature": "void forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount)", "full_signature": "public static void forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount)", "class_method_signature": "FJIterate.forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "void", "signature": "void forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "full_signature": "public static void forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.forEach(\n            Iterable<T> iterable,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "forEachInListOnExecutor", "parameters": "(\n            List<T> list,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "void", "signature": "void forEachInListOnExecutor(\n            List<T> list,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "full_signature": "public static void forEachInListOnExecutor(\n            List<T> list,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.forEachInListOnExecutor(\n            List<T> list,\n            ProcedureFactory<PT> procedureFactory,\n            Combiner<PT> combiner,\n            int minForkSize,\n            int taskCount,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "forEachInBatchWithExecutor", "parameters": "(\n            BatchIterable<T> batchIterable,\n            ProcedureFactory<PT> procedureFactory, Combiner<PT> combiner, int minForkSize, int taskCount,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "void", "signature": "void forEachInBatchWithExecutor(\n            BatchIterable<T> batchIterable,\n            ProcedureFactory<PT> procedureFactory, Combiner<PT> combiner, int minForkSize, int taskCount,\n            ForkJoinPool executor)", "full_signature": "public static void forEachInBatchWithExecutor(\n            BatchIterable<T> batchIterable,\n            ProcedureFactory<PT> procedureFactory, Combiner<PT> combiner, int minForkSize, int taskCount,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.forEachInBatchWithExecutor(\n            BatchIterable<T> batchIterable,\n            ProcedureFactory<PT> procedureFactory, Combiner<PT> combiner, int minForkSize, int taskCount,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "executedInsideOfForEach", "parameters": "()", "modifiers": "static", "return": "boolean", "signature": "boolean executedInsideOfForEach()", "full_signature": "static boolean executedInsideOfForEach()", "class_method_signature": "FJIterate.executedInsideOfForEach()", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> select(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate)", "full_signature": "public static Collection<T> select(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate)", "class_method_signature": "FJIterate.select(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> select(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            boolean allowReorderedResult)", "full_signature": "public static Collection<T> select(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.select(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "R", "signature": "R select(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            boolean allowReorderedResult)", "full_signature": "public static R select(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.select(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "R", "signature": "R select(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "full_signature": "public static R select(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.select(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "calculateTaskCount", "parameters": "(Iterable<T> iterable, int batchSize)", "modifiers": "private static", "return": "int", "signature": "int calculateTaskCount(Iterable<T> iterable, int batchSize)", "full_signature": "private static int calculateTaskCount(Iterable<T> iterable, int batchSize)", "class_method_signature": "FJIterate.calculateTaskCount(Iterable<T> iterable, int batchSize)", "testcase": false, "constructor": false}, {"identifier": "calculateTaskCount", "parameters": "(BatchIterable<T> batchIterable, int batchSize)", "modifiers": "private static", "return": "int", "signature": "int calculateTaskCount(BatchIterable<T> batchIterable, int batchSize)", "full_signature": "private static int calculateTaskCount(BatchIterable<T> batchIterable, int batchSize)", "class_method_signature": "FJIterate.calculateTaskCount(BatchIterable<T> batchIterable, int batchSize)", "testcase": false, "constructor": false}, {"identifier": "calculateTaskCount", "parameters": "(int size, int batchSize)", "modifiers": "private static", "return": "int", "signature": "int calculateTaskCount(int size, int batchSize)", "full_signature": "private static int calculateTaskCount(int size, int batchSize)", "class_method_signature": "FJIterate.calculateTaskCount(int size, int batchSize)", "testcase": false, "constructor": false}, {"identifier": "reject", "parameters": "(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> reject(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate)", "full_signature": "public static Collection<T> reject(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate)", "class_method_signature": "FJIterate.reject(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate)", "testcase": false, "constructor": false}, {"identifier": "reject", "parameters": "(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> reject(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            boolean allowReorderedResult)", "full_signature": "public static Collection<T> reject(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.reject(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "reject", "parameters": "(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "R", "signature": "R reject(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            boolean allowReorderedResult)", "full_signature": "public static R reject(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.reject(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "reject", "parameters": "(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "R", "signature": "R reject(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "full_signature": "public static R reject(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.reject(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(Iterable<T> iterable, Predicate<? super T> predicate)", "modifiers": "public static", "return": "int", "signature": "int count(Iterable<T> iterable, Predicate<? super T> predicate)", "full_signature": "public static int count(Iterable<T> iterable, Predicate<? super T> predicate)", "class_method_signature": "FJIterate.count(Iterable<T> iterable, Predicate<? super T> predicate)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(Iterable<T> iterable, Predicate<? super T> predicate, int batchSize, ForkJoinPool executor)", "modifiers": "public static", "return": "int", "signature": "int count(Iterable<T> iterable, Predicate<? super T> predicate, int batchSize, ForkJoinPool executor)", "full_signature": "public static int count(Iterable<T> iterable, Predicate<? super T> predicate, int batchSize, ForkJoinPool executor)", "class_method_signature": "FJIterate.count(Iterable<T> iterable, Predicate<? super T> predicate, int batchSize, ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, V> function)", "modifiers": "public static", "return": "Collection<V>", "signature": "Collection<V> collect(\n            Iterable<T> iterable,\n            Function<? super T, V> function)", "full_signature": "public static Collection<V> collect(\n            Iterable<T> iterable,\n            Function<? super T, V> function)", "class_method_signature": "FJIterate.collect(\n            Iterable<T> iterable,\n            Function<? super T, V> function)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, V> function,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "Collection<V>", "signature": "Collection<V> collect(\n            Iterable<T> iterable,\n            Function<? super T, V> function,\n            boolean allowReorderedResult)", "full_signature": "public static Collection<V> collect(\n            Iterable<T> iterable,\n            Function<? super T, V> function,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.collect(\n            Iterable<T> iterable,\n            Function<? super T, V> function,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, V> function,\n            R target,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "R", "signature": "R collect(\n            Iterable<T> iterable,\n            Function<? super T, V> function,\n            R target,\n            boolean allowReorderedResult)", "full_signature": "public static R collect(\n            Iterable<T> iterable,\n            Function<? super T, V> function,\n            R target,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.collect(\n            Iterable<T> iterable,\n            Function<? super T, V> function,\n            R target,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, V> function,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "R", "signature": "R collect(\n            Iterable<T> iterable,\n            Function<? super T, V> function,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "full_signature": "public static R collect(\n            Iterable<T> iterable,\n            Function<? super T, V> function,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.collect(\n            Iterable<T> iterable,\n            Function<? super T, V> function,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "flatCollect", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function)", "modifiers": "public static", "return": "Collection<V>", "signature": "Collection<V> flatCollect(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function)", "full_signature": "public static Collection<V> flatCollect(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function)", "class_method_signature": "FJIterate.flatCollect(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function)", "testcase": false, "constructor": false}, {"identifier": "flatCollect", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "Collection<V>", "signature": "Collection<V> flatCollect(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function,\n            boolean allowReorderedResult)", "full_signature": "public static Collection<V> flatCollect(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.flatCollect(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "flatCollect", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function,\n            R target,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "R", "signature": "R flatCollect(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function,\n            R target,\n            boolean allowReorderedResult)", "full_signature": "public static R flatCollect(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function,\n            R target,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.flatCollect(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function,\n            R target,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "flatCollect", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "R", "signature": "R flatCollect(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "full_signature": "public static R flatCollect(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.flatCollect(\n            Iterable<T> iterable,\n            Function<? super T, ? extends Iterable<V>> function,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "collectIf", "parameters": "(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function)", "modifiers": "public static", "return": "Collection<V>", "signature": "Collection<V> collectIf(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function)", "full_signature": "public static Collection<V> collectIf(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function)", "class_method_signature": "FJIterate.collectIf(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function)", "testcase": false, "constructor": false}, {"identifier": "collectIf", "parameters": "(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "Collection<V>", "signature": "Collection<V> collectIf(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function,\n            boolean allowReorderedResult)", "full_signature": "public static Collection<V> collectIf(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.collectIf(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "collectIf", "parameters": "(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function,\n            R target,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "R", "signature": "R collectIf(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function,\n            R target,\n            boolean allowReorderedResult)", "full_signature": "public static R collectIf(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function,\n            R target,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.collectIf(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function,\n            R target,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "collectIf", "parameters": "(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "modifiers": "public static", "return": "R", "signature": "R collectIf(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "full_signature": "public static R collectIf(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "class_method_signature": "FJIterate.collectIf(\n            Iterable<T> iterable,\n            Predicate<? super T> predicate,\n            Function<? super T, V> function,\n            R target,\n            int batchSize,\n            ForkJoinPool executor,\n            boolean allowReorderedResult)", "testcase": false, "constructor": false}, {"identifier": "aggregateBy", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator)", "modifiers": "public static", "return": "MutableMap<K, V>", "signature": "MutableMap<K, V> aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator)", "full_signature": "public static MutableMap<K, V> aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator)", "class_method_signature": "FJIterate.aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator)", "testcase": false, "constructor": false}, {"identifier": "aggregateBy", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            R mutableMap)", "modifiers": "public static", "return": "R", "signature": "R aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            R mutableMap)", "full_signature": "public static R aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            R mutableMap)", "class_method_signature": "FJIterate.aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            R mutableMap)", "testcase": false, "constructor": false}, {"identifier": "aggregateBy", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            int batchSize)", "modifiers": "public static", "return": "MutableMap<K, V>", "signature": "MutableMap<K, V> aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            int batchSize)", "full_signature": "public static MutableMap<K, V> aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            int batchSize)", "class_method_signature": "FJIterate.aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            int batchSize)", "testcase": false, "constructor": false}, {"identifier": "aggregateBy", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            R mutableMap,\n            int batchSize)", "modifiers": "public static", "return": "R", "signature": "R aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            R mutableMap,\n            int batchSize)", "full_signature": "public static R aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            R mutableMap,\n            int batchSize)", "class_method_signature": "FJIterate.aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            R mutableMap,\n            int batchSize)", "testcase": false, "constructor": false}, {"identifier": "aggregateBy", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            int batchSize,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "MutableMap<K, V>", "signature": "MutableMap<K, V> aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            int batchSize,\n            ForkJoinPool executor)", "full_signature": "public static MutableMap<K, V> aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            int batchSize,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            int batchSize,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "aggregateBy", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            R mutableMap,\n            int batchSize,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "R", "signature": "R aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            R mutableMap,\n            int batchSize,\n            ForkJoinPool executor)", "full_signature": "public static R aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            R mutableMap,\n            int batchSize,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.aggregateBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Function2<? super V, ? super T, ? extends V> nonMutatingAggregator,\n            R mutableMap,\n            int batchSize,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "aggregateInPlaceBy", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator)", "modifiers": "public static", "return": "MutableMap<K, V>", "signature": "MutableMap<K, V> aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator)", "full_signature": "public static MutableMap<K, V> aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator)", "class_method_signature": "FJIterate.aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator)", "testcase": false, "constructor": false}, {"identifier": "aggregateInPlaceBy", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            R mutableMap)", "modifiers": "public static", "return": "R", "signature": "R aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            R mutableMap)", "full_signature": "public static R aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            R mutableMap)", "class_method_signature": "FJIterate.aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            R mutableMap)", "testcase": false, "constructor": false}, {"identifier": "aggregateInPlaceBy", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            int batchSize)", "modifiers": "public static", "return": "MutableMap<K, V>", "signature": "MutableMap<K, V> aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            int batchSize)", "full_signature": "public static MutableMap<K, V> aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            int batchSize)", "class_method_signature": "FJIterate.aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            int batchSize)", "testcase": false, "constructor": false}, {"identifier": "aggregateInPlaceBy", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            R mutableMap,\n            int batchSize)", "modifiers": "public static", "return": "R", "signature": "R aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            R mutableMap,\n            int batchSize)", "full_signature": "public static R aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            R mutableMap,\n            int batchSize)", "class_method_signature": "FJIterate.aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            R mutableMap,\n            int batchSize)", "testcase": false, "constructor": false}, {"identifier": "aggregateInPlaceBy", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            int batchSize,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "MutableMap<K, V>", "signature": "MutableMap<K, V> aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            int batchSize,\n            ForkJoinPool executor)", "full_signature": "public static MutableMap<K, V> aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            int batchSize,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            int batchSize,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "aggregateInPlaceBy", "parameters": "(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            R mutableMap,\n            int batchSize,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "R", "signature": "R aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            R mutableMap,\n            int batchSize,\n            ForkJoinPool executor)", "full_signature": "public static R aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            R mutableMap,\n            int batchSize,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.aggregateInPlaceBy(\n            Iterable<T> iterable,\n            Function<? super T, ? extends K> groupBy,\n            Function0<? extends V> zeroValueFactory,\n            Procedure2<? super V, ? super T> mutatingAggregator,\n            R mutableMap,\n            int batchSize,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function)", "modifiers": "public static", "return": "MutableMultimap<K, V>", "signature": "MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function)", "full_signature": "public static MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function)", "class_method_signature": "FJIterate.groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            R concurrentMultimap)", "modifiers": "public static", "return": "MutableMultimap<K, V>", "signature": "MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            R concurrentMultimap)", "full_signature": "public static MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            R concurrentMultimap)", "class_method_signature": "FJIterate.groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            R concurrentMultimap)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            R concurrentMultimap,\n            int batchSize)", "modifiers": "public static", "return": "MutableMultimap<K, V>", "signature": "MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            R concurrentMultimap,\n            int batchSize)", "full_signature": "public static MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            R concurrentMultimap,\n            int batchSize)", "class_method_signature": "FJIterate.groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            R concurrentMultimap,\n            int batchSize)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            int batchSize)", "modifiers": "public static", "return": "MutableMultimap<K, V>", "signature": "MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            int batchSize)", "full_signature": "public static MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            int batchSize)", "class_method_signature": "FJIterate.groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            int batchSize)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            int batchSize,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "MutableMultimap<K, V>", "signature": "MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            int batchSize,\n            ForkJoinPool executor)", "full_signature": "public static MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            int batchSize,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            int batchSize,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            R concurrentMultimap,\n            int batchSize,\n            ForkJoinPool executor)", "modifiers": "public static", "return": "MutableMultimap<K, V>", "signature": "MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            R concurrentMultimap,\n            int batchSize,\n            ForkJoinPool executor)", "full_signature": "public static MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            R concurrentMultimap,\n            int batchSize,\n            ForkJoinPool executor)", "class_method_signature": "FJIterate.groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function,\n            R concurrentMultimap,\n            int batchSize,\n            ForkJoinPool executor)", "testcase": false, "constructor": false}], "file": "gs-collections-forkjoin/src/main/java/com/gs/collections/impl/forkjoin/FJIterate.java"}, "focal_method": {"identifier": "groupBy", "parameters": "(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function)", "modifiers": "public static", "return": "MutableMultimap<K, V>", "body": "public static <K, V> MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function)\n    {\n        return FJIterate.groupBy(iterable, function, FJIterate.DEFAULT_MIN_FORK_SIZE, FJIterate.FORK_JOIN_POOL);\n    }", "signature": "MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function)", "full_signature": "public static MutableMultimap<K, V> groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function)", "class_method_signature": "FJIterate.groupBy(\n            Iterable<V> iterable,\n            Function<? super V, ? extends K> function)", "testcase": false, "constructor": false, "invocations": ["groupBy"]}, "repository": {"repo_id": 3041887, "url": "https://github.com/goldmansachs/gs-collections", "language": "Java", "is_fork": false, "fork_count": 281, "stargazer_count": 1778, "size": 12930, "license": "licensed"}}