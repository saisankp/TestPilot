{"test_class": {"identifier": "ClassTypeUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Object anonymous = new Comparable<String>() {\n                         @Override\n                         public int compareTo(String o) {\n                             return 0;\n                         }\n                     };", "modifier": "", "type": "Object", "declarator": "anonymous = new Comparable<String>() {\n                         @Override\n                         public int compareTo(String o) {\n                             return 0;\n                         }\n                     }", "var_name": "anonymous"}], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/ClassTypeUtilsTest.java"}, "test_case": {"identifier": "canonicalNameToJvmName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canonicalNameToJvmName() throws Exception {\n    }", "signature": "void canonicalNameToJvmName()", "full_signature": "@Test public void canonicalNameToJvmName()", "class_method_signature": "ClassTypeUtilsTest.canonicalNameToJvmName()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "ClassTypeUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getClasses", "parameters": "(String[] typeStrs)", "modifiers": "public static", "return": "Class[]", "signature": "Class[] getClasses(String[] typeStrs)", "full_signature": "public static Class[] getClasses(String[] typeStrs)", "class_method_signature": "ClassTypeUtils.getClasses(String[] typeStrs)", "testcase": false, "constructor": false}, {"identifier": "getClass", "parameters": "(String typeStr)", "modifiers": "public static", "return": "Class", "signature": "Class getClass(String typeStr)", "full_signature": "public static Class getClass(String typeStr)", "class_method_signature": "ClassTypeUtils.getClass(String typeStr)", "testcase": false, "constructor": false}, {"identifier": "canonicalNameToJvmName", "parameters": "(String canonicalName)", "modifiers": "public static", "return": "String", "signature": "String canonicalNameToJvmName(String canonicalName)", "full_signature": "public static String canonicalNameToJvmName(String canonicalName)", "class_method_signature": "ClassTypeUtils.canonicalNameToJvmName(String canonicalName)", "testcase": false, "constructor": false}, {"identifier": "getTypeStrs", "parameters": "(Class[] types)", "modifiers": "public static", "return": "String[]", "signature": "String[] getTypeStrs(Class[] types)", "full_signature": "public static String[] getTypeStrs(Class[] types)", "class_method_signature": "ClassTypeUtils.getTypeStrs(Class[] types)", "testcase": false, "constructor": false}, {"identifier": "getTypeStrs", "parameters": "(Class[] types, boolean javaStyle)", "modifiers": "public static", "return": "String[]", "signature": "String[] getTypeStrs(Class[] types, boolean javaStyle)", "full_signature": "public static String[] getTypeStrs(Class[] types, boolean javaStyle)", "class_method_signature": "ClassTypeUtils.getTypeStrs(Class[] types, boolean javaStyle)", "testcase": false, "constructor": false}, {"identifier": "getTypeStr", "parameters": "(Class clazz)", "modifiers": "public static", "return": "String", "signature": "String getTypeStr(Class clazz)", "full_signature": "public static String getTypeStr(Class clazz)", "class_method_signature": "ClassTypeUtils.getTypeStr(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "jvmNameToCanonicalName", "parameters": "(String jvmName)", "modifiers": "public static", "return": "String", "signature": "String jvmNameToCanonicalName(String jvmName)", "full_signature": "public static String jvmNameToCanonicalName(String jvmName)", "class_method_signature": "ClassTypeUtils.jvmNameToCanonicalName(String jvmName)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/ClassTypeUtils.java"}, "focal_method": {"identifier": "canonicalNameToJvmName", "parameters": "(String canonicalName)", "modifiers": "public static", "return": "String", "body": "public static String canonicalNameToJvmName(String canonicalName) {\n        boolean isArray = canonicalName.endsWith(\"[]\");\n        if (isArray) {\n            String t = \"\"; // \u8ba1\u6570\uff0c\u770b\u4e0a\u51e0\u7ef4\u6570\u7ec4\n            while (isArray) {\n                canonicalName = canonicalName.substring(0, canonicalName.length() - 2);\n                t += \"[\";\n                isArray = canonicalName.endsWith(\"[]\");\n            }\n            if (\"boolean\".equals(canonicalName)) {\n                canonicalName = t + \"Z\";\n            } else if (\"byte\".equals(canonicalName)) {\n                canonicalName = t + \"B\";\n            } else if (\"char\".equals(canonicalName)) {\n                canonicalName = t + \"C\";\n            } else if (\"double\".equals(canonicalName)) {\n                canonicalName = t + \"D\";\n            } else if (\"float\".equals(canonicalName)) {\n                canonicalName = t + \"F\";\n            } else if (\"int\".equals(canonicalName)) {\n                canonicalName = t + \"I\";\n            } else if (\"long\".equals(canonicalName)) {\n                canonicalName = t + \"J\";\n            } else if (\"short\".equals(canonicalName)) {\n                canonicalName = t + \"S\";\n            } else {\n                canonicalName = t + \"L\" + canonicalName + \";\";\n            }\n        }\n        return canonicalName;\n    }", "signature": "String canonicalNameToJvmName(String canonicalName)", "full_signature": "public static String canonicalNameToJvmName(String canonicalName)", "class_method_signature": "ClassTypeUtils.canonicalNameToJvmName(String canonicalName)", "testcase": false, "constructor": false, "invocations": ["endsWith", "substring", "length", "endsWith", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}