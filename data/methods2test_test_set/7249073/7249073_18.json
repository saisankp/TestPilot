{"test_class": {"identifier": "TestKijiTableMapReduceJobInput", "superclass": "extends KijiClientTest", "interfaces": "", "fields": [{"original_string": "private File mTempDir;", "modifier": "private", "type": "File", "declarator": "mTempDir", "var_name": "mTempDir"}, {"original_string": "private Path mTempPath;", "modifier": "private", "type": "Path", "declarator": "mTempPath", "var_name": "mTempPath"}, {"original_string": "private KijiTable mTable;", "modifier": "private", "type": "KijiTable", "declarator": "mTable", "var_name": "mTable"}], "file": "kiji-mapreduce/src/test/java/org/kiji/mapreduce/input/TestKijiTableMapReduceJobInput.java"}, "test_case": {"identifier": "testConfigure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConfigure() throws IOException {\n    final Job job = new Job();\n\n    // Request the latest 3 versions of column 'info:email':\n    KijiDataRequestBuilder builder = KijiDataRequest.builder();\n    builder.newColumnsDef().withMaxVersions(3).add(\"info\", \"email\");\n    KijiDataRequest dataRequest = builder.build();\n\n    // Read from 'here' to 'there':\n    final EntityId startRow = HBaseEntityId.fromHBaseRowKey(Bytes.toBytes(\"here\"));\n    final EntityId limitRow = HBaseEntityId.fromHBaseRowKey(Bytes.toBytes(\"there\"));\n    final KijiRowFilter filter = new StripValueRowFilter();\n    final KijiTableMapReduceJobInput.RowOptions rowOptions =\n        KijiTableMapReduceJobInput.RowOptions.create(startRow, limitRow, filter);\n    final MapReduceJobInput kijiTableJobInput =\n        new KijiTableMapReduceJobInput(mTable.getURI(), dataRequest, rowOptions);\n    kijiTableJobInput.configure(job);\n\n    // Check that the job was configured correctly.\n    final Configuration conf = job.getConfiguration();\n    assertEquals(\n        mTable.getURI(),\n        KijiURI.newBuilder(conf.get(KijiConfKeys.KIJI_INPUT_TABLE_URI)).build());\n\n    final KijiDataRequest decoded =\n        (KijiDataRequest) SerializationUtils.deserialize(\n            Base64.decodeBase64(conf.get(KijiConfKeys.KIJI_INPUT_DATA_REQUEST)));\n    assertEquals(dataRequest, decoded);\n\n    final String confStartRow = Base64.encodeBase64String(startRow.getHBaseRowKey());\n    final String confLimitRow = Base64.encodeBase64String(limitRow.getHBaseRowKey());\n    assertEquals(confStartRow, conf.get(KijiConfKeys.KIJI_START_ROW_KEY));\n    assertEquals(confLimitRow, conf.get(KijiConfKeys.KIJI_LIMIT_ROW_KEY));\n\n    assertEquals(filter.toJson().toString(), conf.get(KijiConfKeys.KIJI_ROW_FILTER));\n  }", "signature": "void testConfigure()", "full_signature": "@Test public void testConfigure()", "class_method_signature": "TestKijiTableMapReduceJobInput.testConfigure()", "testcase": true, "constructor": false, "invocations": ["builder", "add", "withMaxVersions", "newColumnsDef", "build", "fromHBaseRowKey", "toBytes", "fromHBaseRowKey", "toBytes", "create", "getURI", "configure", "getConfiguration", "assertEquals", "getURI", "build", "newBuilder", "get", "deserialize", "decodeBase64", "get", "assertEquals", "encodeBase64String", "getHBaseRowKey", "encodeBase64String", "getHBaseRowKey", "assertEquals", "get", "assertEquals", "get", "assertEquals", "toString", "toJson", "get"]}, "focal_class": {"identifier": "KijiTableMapReduceJobInput", "superclass": "extends MapReduceJobInput", "interfaces": "", "fields": [{"original_string": "private KijiURI mInputTableURI;", "modifier": "private", "type": "KijiURI", "declarator": "mInputTableURI", "var_name": "mInputTableURI"}, {"original_string": "private KijiDataRequest mDataRequest;", "modifier": "private", "type": "KijiDataRequest", "declarator": "mDataRequest", "var_name": "mDataRequest"}, {"original_string": "private RowOptions mRowOptions;", "modifier": "private", "type": "RowOptions", "declarator": "mRowOptions", "var_name": "mRowOptions"}], "methods": [{"identifier": "KijiTableMapReduceJobInput", "parameters": "()", "modifiers": "", "return": "", "signature": " KijiTableMapReduceJobInput()", "full_signature": "  KijiTableMapReduceJobInput()", "class_method_signature": "KijiTableMapReduceJobInput.KijiTableMapReduceJobInput()", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(Map<String, String> params)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(Map<String, String> params)", "full_signature": "@Override public void initialize(Map<String, String> params)", "class_method_signature": "KijiTableMapReduceJobInput.initialize(Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "KijiTableMapReduceJobInput", "parameters": "(\n      KijiURI inputTableURI, KijiDataRequest dataRequest, RowOptions rowOptions)", "modifiers": "", "return": "", "signature": " KijiTableMapReduceJobInput(\n      KijiURI inputTableURI, KijiDataRequest dataRequest, RowOptions rowOptions)", "full_signature": "  KijiTableMapReduceJobInput(\n      KijiURI inputTableURI, KijiDataRequest dataRequest, RowOptions rowOptions)", "class_method_signature": "KijiTableMapReduceJobInput.KijiTableMapReduceJobInput(\n      KijiURI inputTableURI, KijiDataRequest dataRequest, RowOptions rowOptions)", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(Job job)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Job job)", "full_signature": "@Override public void configure(Job job)", "class_method_signature": "KijiTableMapReduceJobInput.configure(Job job)", "testcase": false, "constructor": false}, {"identifier": "getInputFormatClass", "parameters": "()", "modifiers": "@Override protected", "return": "Class<? extends InputFormat<?, ?>>", "signature": "Class<? extends InputFormat<?, ?>> getInputFormatClass()", "full_signature": "@Override protected Class<? extends InputFormat<?, ?>> getInputFormatClass()", "class_method_signature": "KijiTableMapReduceJobInput.getInputFormatClass()", "testcase": false, "constructor": false}, {"identifier": "getInputTableURI", "parameters": "()", "modifiers": "public", "return": "KijiURI", "signature": "KijiURI getInputTableURI()", "full_signature": "public KijiURI getInputTableURI()", "class_method_signature": "KijiTableMapReduceJobInput.getInputTableURI()", "testcase": false, "constructor": false}, {"identifier": "getRowOptions", "parameters": "()", "modifiers": "public", "return": "RowOptions", "signature": "RowOptions getRowOptions()", "full_signature": "public RowOptions getRowOptions()", "class_method_signature": "KijiTableMapReduceJobInput.getRowOptions()", "testcase": false, "constructor": false}], "file": "kiji-mapreduce/src/main/java/org/kiji/mapreduce/input/KijiTableMapReduceJobInput.java"}, "focal_method": {"identifier": "configure", "parameters": "(Job job)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void configure(Job job) throws IOException {\n    // Configure the input format class.\n    super.configure(job);\n    KijiTableInputFormat inputFormat =\n        KijiTableInputFormat.Factory.get(mInputTableURI).getInputFormat();\n    job.setInputFormatClass(inputFormat.getClass());\n    KijiTableInputFormat.configureJob(job, mInputTableURI, mDataRequest,\n          null != mRowOptions ? mRowOptions.getStartRow() : null,\n          null != mRowOptions ? mRowOptions.getLimitRow() : null,\n          null != mRowOptions ? mRowOptions.getRowFilter() : null);\n  }", "signature": "void configure(Job job)", "full_signature": "@Override public void configure(Job job)", "class_method_signature": "KijiTableMapReduceJobInput.configure(Job job)", "testcase": false, "constructor": false, "invocations": ["configure", "getInputFormat", "get", "setInputFormatClass", "getClass", "configureJob", "getStartRow", "getLimitRow", "getRowFilter"]}, "repository": {"repo_id": 7249073, "url": "https://github.com/kijiproject/kiji-mapreduce", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 12, "size": 5029, "license": "licensed"}}