{"test_class": {"identifier": "JpaUnitConcordionRunnerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private JpaUnitContext context;", "modifier": "@Mock\n    private", "type": "JpaUnitContext", "declarator": "context", "var_name": "context"}], "file": "concordion/src/test/java/eu/drus/jpa/unit/api/concordion/JpaUnitConcordionRunnerTest.java"}, "test_case": {"identifier": "testCreateTestCreatesAnEnhancedObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateTestCreatesAnEnhancedObject() throws Exception {\n        // GIVEN\n        final JpaUnitConcordionRunner runner = new JpaUnitConcordionRunner(TestFixture.class);\n\n        // WHEN\n        final Object testObject1 = runner.createTest();\n\n        // THEN\n        assertThat(testObject1, instanceOf(EnhancedProxy.class));\n    }", "signature": "void testCreateTestCreatesAnEnhancedObject()", "full_signature": "@Test public void testCreateTestCreatesAnEnhancedObject()", "class_method_signature": "JpaUnitConcordionRunnerTest.testCreateTestCreatesAnEnhancedObject()", "testcase": true, "constructor": false, "invocations": ["createTest", "assertThat", "instanceOf"]}, "focal_class": {"identifier": "JpaUnitConcordionRunner", "superclass": "extends ConcordionRunner", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JpaUnitConcordionRunner.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JpaUnitConcordionRunner.class)", "var_name": "LOG"}, {"original_string": "private static DecoratorExecutor executor = new DecoratorExecutor();", "modifier": "private static", "type": "DecoratorExecutor", "declarator": "executor = new DecoratorExecutor()", "var_name": "executor"}], "methods": [{"identifier": "JpaUnitConcordionRunner", "parameters": "(final Class<?> fixtureClass)", "modifiers": "public", "return": "", "signature": " JpaUnitConcordionRunner(final Class<?> fixtureClass)", "full_signature": "public  JpaUnitConcordionRunner(final Class<?> fixtureClass)", "class_method_signature": "JpaUnitConcordionRunner.JpaUnitConcordionRunner(final Class<?> fixtureClass)", "testcase": false, "constructor": true}, {"identifier": "getDelegate", "parameters": "(final Object fixtureObject)", "modifiers": "private static", "return": "Object", "signature": "Object getDelegate(final Object fixtureObject)", "full_signature": "private static Object getDelegate(final Object fixtureObject)", "class_method_signature": "JpaUnitConcordionRunner.getDelegate(final Object fixtureObject)", "testcase": false, "constructor": false}, {"identifier": "createTest", "parameters": "()", "modifiers": "@Override protected", "return": "Object", "signature": "Object createTest()", "full_signature": "@Override protected Object createTest()", "class_method_signature": "JpaUnitConcordionRunner.createTest()", "testcase": false, "constructor": false}, {"identifier": "injectFields", "parameters": "(final Object fixtureObject)", "modifiers": "private", "return": "void", "signature": "void injectFields(final Object fixtureObject)", "full_signature": "private void injectFields(final Object fixtureObject)", "class_method_signature": "JpaUnitConcordionRunner.injectFields(final Object fixtureObject)", "testcase": false, "constructor": false}, {"identifier": "createFixture", "parameters": "(final Object fixtureObject)", "modifiers": "@Override protected", "return": "Fixture", "signature": "Fixture createFixture(final Object fixtureObject)", "full_signature": "@Override protected Fixture createFixture(final Object fixtureObject)", "class_method_signature": "JpaUnitConcordionRunner.createFixture(final Object fixtureObject)", "testcase": false, "constructor": false}, {"identifier": "getSpecificationLocator", "parameters": "()", "modifiers": "@Override protected", "return": "SpecificationLocator", "signature": "SpecificationLocator getSpecificationLocator()", "full_signature": "@Override protected SpecificationLocator getSpecificationLocator()", "class_method_signature": "JpaUnitConcordionRunner.getSpecificationLocator()", "testcase": false, "constructor": false}], "file": "concordion/src/main/java/eu/drus/jpa/unit/api/concordion/JpaUnitConcordionRunner.java"}, "focal_method": {"identifier": "createTest", "parameters": "()", "modifiers": "@Override protected", "return": "Object", "body": "@Override\n    protected Object createTest() throws Exception {\n        Object enhancedFixture;\n\n        final Fixture setupFixture = (Fixture) getValue(this, \"setupFixture\");\n        final boolean isFirstTest = (boolean) getValue(this, \"firstTest\");\n\n        if (isFirstTest) {\n            injectValue(this, \"firstTest\", false);\n            // we've already created a test object above, so reuse it to make sure we don't\n            // initialize the fixture object multiple times\n            enhancedFixture = setupFixture.getFixtureObject();\n\n            // we need to setup the concordion scoped objects so that the @Before methods and @Rules\n            // can access them\n            final Object fixtureObject = getDelegate(enhancedFixture);\n            setupFixture.setupForRun(fixtureObject);\n\n            injectFields(fixtureObject);\n        } else {\n            // junit creates a new object for each test case, so we need to capture this\n            // and setup our object - that makes sure that scoped variables are injected properly\n            // the setup of concordion scoped objects is done in this call\n            final Object fixtureObject = super.createTest();\n            injectFields(fixtureObject);\n            enhancedFixture = EnhancedProxy.create(fixtureObject, executor);\n        }\n\n        return enhancedFixture;\n    }", "signature": "Object createTest()", "full_signature": "@Override protected Object createTest()", "class_method_signature": "JpaUnitConcordionRunner.createTest()", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue", "injectValue", "getFixtureObject", "getDelegate", "setupForRun", "injectFields", "createTest", "injectFields", "create"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}