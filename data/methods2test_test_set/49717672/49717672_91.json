{"test_class": {"identifier": "GraphToolsTest", "superclass": "extends RobolectricTestWithConfig", "interfaces": "", "fields": [], "file": "app/src/test/java/com/eveningoutpost/dexdrip/UtilityModels/GraphToolsTest.java"}, "test_case": {"identifier": "interpolateCalculatedValueTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void interpolateCalculatedValueTest() {\n\n        final long startTime = 1531124821000L;\n        final long endTime = startTime + (Constants.MINUTE_IN_MS * 10);\n\n        final BgReading first = new BgReading();\n        final BgReading second = new BgReading();\n\n        first.timestamp = startTime;\n        first.calculated_value = 100;\n\n        second.timestamp = endTime;\n        second.calculated_value = 200;\n\n        assertWithMessage(\"time at first matches first\").that(interpolateCalculatedValue(first,second, startTime)).isEqualTo(100.0);\n        assertWithMessage(\"time at second matches second\").that(interpolateCalculatedValue(first,second, endTime)).isEqualTo(200.0);\n        assertWithMessage(\"time point 1 matches expected\").that(interpolateCalculatedValue(first,second, startTime+(Constants.SECOND_IN_MS * 150))).isEqualTo(125.0);\n        assertWithMessage(\"time point 2 matches expected\").that(interpolateCalculatedValue(first,second, startTime+(Constants.SECOND_IN_MS * 300))).isEqualTo(150.0);\n        assertWithMessage(\"time point 3 matches expected\").that(interpolateCalculatedValue(first,second, startTime+(Constants.SECOND_IN_MS * 400))).isWithin(0.1).of(166.6);\n\n\n\n    }", "signature": "void interpolateCalculatedValueTest()", "full_signature": "@Test public void interpolateCalculatedValueTest()", "class_method_signature": "GraphToolsTest.interpolateCalculatedValueTest()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "that", "assertWithMessage", "interpolateCalculatedValue", "isEqualTo", "that", "assertWithMessage", "interpolateCalculatedValue", "isEqualTo", "that", "assertWithMessage", "interpolateCalculatedValue", "isEqualTo", "that", "assertWithMessage", "interpolateCalculatedValue", "of", "isWithin", "that", "assertWithMessage", "interpolateCalculatedValue"]}, "focal_class": {"identifier": "GraphTools", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "bestYPosition", "parameters": "(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset)", "modifiers": "public static", "return": "Pair<Float, Float>", "signature": "Pair<Float, Float> bestYPosition(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset)", "full_signature": "public static Pair<Float, Float> bestYPosition(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset)", "class_method_signature": "GraphTools.bestYPosition(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset)", "testcase": false, "constructor": false}, {"identifier": "runBinarySearchIteratively", "parameters": "(List<BgReading> readings, long hunt, boolean ascending)", "modifiers": "private static", "return": "int", "signature": "int runBinarySearchIteratively(List<BgReading> readings, long hunt, boolean ascending)", "full_signature": "private static int runBinarySearchIteratively(List<BgReading> readings, long hunt, boolean ascending)", "class_method_signature": "GraphTools.runBinarySearchIteratively(List<BgReading> readings, long hunt, boolean ascending)", "testcase": false, "constructor": false}, {"identifier": "yposRatio", "parameters": "(final float first, final float second, final float ratio)", "modifiers": "public static", "return": "float", "signature": "float yposRatio(final float first, final float second, final float ratio)", "full_signature": "public static float yposRatio(final float first, final float second, final float ratio)", "class_method_signature": "GraphTools.yposRatio(final float first, final float second, final float ratio)", "testcase": false, "constructor": false}, {"identifier": "interpolate", "parameters": "(long firstTimestamp, double firstValue, long secondTimestamp,\n                              double secondValue, long timestamp)", "modifiers": "static", "return": "double", "signature": "double interpolate(long firstTimestamp, double firstValue, long secondTimestamp,\n                              double secondValue, long timestamp)", "full_signature": "static double interpolate(long firstTimestamp, double firstValue, long secondTimestamp,\n                              double secondValue, long timestamp)", "class_method_signature": "GraphTools.interpolate(long firstTimestamp, double firstValue, long secondTimestamp,\n                              double secondValue, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "interpolateCalculatedValue", "parameters": "(BgReading first, BgReading second, long timestamp)", "modifiers": "static", "return": "double", "signature": "double interpolateCalculatedValue(BgReading first, BgReading second, long timestamp)", "full_signature": "static double interpolateCalculatedValue(BgReading first, BgReading second, long timestamp)", "class_method_signature": "GraphTools.interpolateCalculatedValue(BgReading first, BgReading second, long timestamp)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/GraphTools.java"}, "focal_method": {"identifier": "interpolateCalculatedValue", "parameters": "(BgReading first, BgReading second, long timestamp)", "modifiers": "static", "return": "double", "body": "static double interpolateCalculatedValue(BgReading first, BgReading second, long timestamp) {\n        return interpolate(first.timestamp, first.getDg_mgdl(), second.timestamp, second.getDg_mgdl(), timestamp);\n    }", "signature": "double interpolateCalculatedValue(BgReading first, BgReading second, long timestamp)", "full_signature": "static double interpolateCalculatedValue(BgReading first, BgReading second, long timestamp)", "class_method_signature": "GraphTools.interpolateCalculatedValue(BgReading first, BgReading second, long timestamp)", "testcase": false, "constructor": false, "invocations": ["interpolate", "getDg_mgdl", "getDg_mgdl"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}