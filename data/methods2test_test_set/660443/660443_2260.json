{"test_class": {"identifier": "PDBPolymerTest", "superclass": "extends AbstractPDBPolymerTest", "interfaces": "", "fields": [], "file": "base/silent/src/test/java/org/openscience/cdk/silent/PDBPolymerTest.java"}, "test_case": {"identifier": "testGetMonomerNamesInSequentialOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMonomerNamesInSequentialOrder() {\n        PDBPolymer pdbPolymer = new PDBPolymer();\n        Assert.assertEquals(0, pdbPolymer.getMonomerNames().size());\n\n        IStrand oStrand1 = pdbPolymer.getBuilder().newInstance(IStrand.class);\n        oStrand1.setStrandName(\"A\");\n        IMonomer oMono1 = pdbPolymer.getBuilder().newInstance(IMonomer.class);\n        oMono1.setMonomerName(\"TRP279\");\n        IMonomer oMono2 = pdbPolymer.getBuilder().newInstance(IMonomer.class);\n        oMono2.setMonomerName(\"CYS280\");\n        IPDBAtom oPDBAtom2 = pdbPolymer.getBuilder().newInstance(IPDBAtom.class, \"C\");\n        IPDBAtom oPDBAtom3 = pdbPolymer.getBuilder().newInstance(IPDBAtom.class, \"C\");\n        pdbPolymer.addAtom(oPDBAtom2, oMono1, oStrand1);\n        pdbPolymer.addAtom(oPDBAtom3, oMono2, oStrand1);\n        Assert.assertNotNull(pdbPolymer.getAtom(0));\n        Assert.assertNotNull(pdbPolymer.getAtom(1));\n        Assert.assertEquals(oPDBAtom2, pdbPolymer.getAtom(0));\n        Assert.assertEquals(oPDBAtom3, pdbPolymer.getAtom(1));\n\n        Iterator<String> monomers = pdbPolymer.getMonomerNamesInSequentialOrder().iterator();\n        Assert.assertEquals(\"TRP279\", monomers.next());\n        Assert.assertEquals(\"CYS280\", monomers.next());\n    }", "signature": "void testGetMonomerNamesInSequentialOrder()", "full_signature": "@Test public void testGetMonomerNamesInSequentialOrder()", "class_method_signature": "PDBPolymerTest.testGetMonomerNamesInSequentialOrder()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "getMonomerNames", "newInstance", "getBuilder", "setStrandName", "newInstance", "getBuilder", "setMonomerName", "newInstance", "getBuilder", "setMonomerName", "newInstance", "getBuilder", "newInstance", "getBuilder", "addAtom", "addAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "iterator", "getMonomerNamesInSequentialOrder", "assertEquals", "next", "assertEquals", "next"]}, "focal_class": {"identifier": "PDBPolymer", "superclass": "extends BioPolymer", "interfaces": "implements Cloneable, IPDBPolymer", "fields": [{"original_string": "private static final long serialVersionUID = 4173552834313952358L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4173552834313952358L", "var_name": "serialVersionUID"}, {"original_string": "List<String>              sequentialListOfMonomers;", "modifier": "", "type": "List<String>", "declarator": "sequentialListOfMonomers", "var_name": "sequentialListOfMonomers"}, {"original_string": "List<IPDBStructure>       secondaryStructures;", "modifier": "", "type": "List<IPDBStructure>", "declarator": "secondaryStructures", "var_name": "secondaryStructures"}], "methods": [{"identifier": "PDBPolymer", "parameters": "()", "modifiers": "public", "return": "", "signature": " PDBPolymer()", "full_signature": "public  PDBPolymer()", "class_method_signature": "PDBPolymer.PDBPolymer()", "testcase": false, "constructor": true}, {"identifier": "addStructure", "parameters": "(IPDBStructure structure)", "modifiers": "@Override public", "return": "void", "signature": "void addStructure(IPDBStructure structure)", "full_signature": "@Override public void addStructure(IPDBStructure structure)", "class_method_signature": "PDBPolymer.addStructure(IPDBStructure structure)", "testcase": false, "constructor": false}, {"identifier": "getStructures", "parameters": "()", "modifiers": "@Override public", "return": "Collection<IPDBStructure>", "signature": "Collection<IPDBStructure> getStructures()", "full_signature": "@Override public Collection<IPDBStructure> getStructures()", "class_method_signature": "PDBPolymer.getStructures()", "testcase": false, "constructor": false}, {"identifier": "addAtom", "parameters": "(IPDBAtom oAtom)", "modifiers": "@Override public", "return": "void", "signature": "void addAtom(IPDBAtom oAtom)", "full_signature": "@Override public void addAtom(IPDBAtom oAtom)", "class_method_signature": "PDBPolymer.addAtom(IPDBAtom oAtom)", "testcase": false, "constructor": false}, {"identifier": "addAtom", "parameters": "(IPDBAtom oAtom, IMonomer oMonomer)", "modifiers": "public", "return": "void", "signature": "void addAtom(IPDBAtom oAtom, IMonomer oMonomer)", "full_signature": "public void addAtom(IPDBAtom oAtom, IMonomer oMonomer)", "class_method_signature": "PDBPolymer.addAtom(IPDBAtom oAtom, IMonomer oMonomer)", "testcase": false, "constructor": false}, {"identifier": "addAtom", "parameters": "(IPDBAtom oAtom, IMonomer oMonomer, IStrand oStrand)", "modifiers": "@Override public", "return": "void", "signature": "void addAtom(IPDBAtom oAtom, IMonomer oMonomer, IStrand oStrand)", "full_signature": "@Override public void addAtom(IPDBAtom oAtom, IMonomer oMonomer, IStrand oStrand)", "class_method_signature": "PDBPolymer.addAtom(IPDBAtom oAtom, IMonomer oMonomer, IStrand oStrand)", "testcase": false, "constructor": false}, {"identifier": "getMonomerNamesInSequentialOrder", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getMonomerNamesInSequentialOrder()", "full_signature": "public Collection<String> getMonomerNamesInSequentialOrder()", "class_method_signature": "PDBPolymer.getMonomerNamesInSequentialOrder()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "IPDBPolymer", "signature": "IPDBPolymer clone()", "full_signature": "@Override public IPDBPolymer clone()", "class_method_signature": "PDBPolymer.clone()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PDBPolymer.toString()", "testcase": false, "constructor": false}], "file": "base/silent/src/main/java/org/openscience/cdk/silent/PDBPolymer.java"}, "focal_method": {"identifier": "getMonomerNamesInSequentialOrder", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "body": "public Collection<String> getMonomerNamesInSequentialOrder() {\n        // don't return the original\n        return new ArrayList<String>(sequentialListOfMonomers);\n    }", "signature": "Collection<String> getMonomerNamesInSequentialOrder()", "full_signature": "public Collection<String> getMonomerNamesInSequentialOrder()", "class_method_signature": "PDBPolymer.getMonomerNamesInSequentialOrder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}