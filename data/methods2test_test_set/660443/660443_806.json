{"test_class": {"identifier": "NormalizerTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/normalize/NormalizerTest.java"}, "test_case": {"identifier": "testNormalize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNormalize() throws Exception {\n        IAtomContainer ac = new AtomContainer();\n        ac.addAtom(new Atom(\"C\"));\n        ac.addAtom(new Atom(\"N\"));\n        ac.addAtom(new Atom(\"O\"));\n        ac.addAtom(new Atom(\"O\"));\n        ac.addBond(new Bond(ac.getAtom(0), ac.getAtom(1)));\n        ac.addBond(new Bond(ac.getAtom(1), ac.getAtom(2), IBond.Order.DOUBLE));\n        ac.addBond(new Bond(ac.getAtom(1), ac.getAtom(3), IBond.Order.DOUBLE));\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        DocumentBuilder db = dbf.newDocumentBuilder();\n        Document doc = db.newDocument();\n        Element set = doc.createElement(\"replace-set\");\n        doc.appendChild(set);\n        Element replace = doc.createElement(\"replace\");\n        set.appendChild(replace);\n        replace.appendChild(doc.createTextNode(\"O=N=O\"));\n        Element replacement = doc.createElement(\"replacement\");\n        set.appendChild(replacement);\n        replacement.appendChild(doc.createTextNode(\"[O-][N+]=O\"));\n        Normalizer.normalize(ac, doc);\n        Assert.assertTrue(ac.getBond(1).getOrder() == IBond.Order.SINGLE\n                ^ ac.getBond(2).getOrder() == IBond.Order.SINGLE);\n    }", "signature": "void testNormalize()", "full_signature": "@Test public void testNormalize()", "class_method_signature": "NormalizerTest.testNormalize()", "testcase": true, "constructor": false, "invocations": ["addAtom", "addAtom", "addAtom", "addAtom", "addBond", "getAtom", "getAtom", "addBond", "getAtom", "getAtom", "addBond", "getAtom", "getAtom", "newInstance", "newDocumentBuilder", "newDocument", "createElement", "appendChild", "createElement", "appendChild", "appendChild", "createTextNode", "createElement", "appendChild", "appendChild", "createTextNode", "normalize", "assertTrue", "getOrder", "getBond", "getOrder", "getBond"]}, "focal_class": {"identifier": "Normalizer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "normalize", "parameters": "(IAtomContainer ac, Document doc)", "modifiers": "public static", "return": "boolean", "signature": "boolean normalize(IAtomContainer ac, Document doc)", "full_signature": "public static boolean normalize(IAtomContainer ac, Document doc)", "class_method_signature": "Normalizer.normalize(IAtomContainer ac, Document doc)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/normalize/Normalizer.java"}, "focal_method": {"identifier": "normalize", "parameters": "(IAtomContainer ac, Document doc)", "modifiers": "public static", "return": "boolean", "body": "public static boolean normalize(IAtomContainer ac, Document doc) throws InvalidSmilesException, CDKException {\n        NodeList nl = doc.getElementsByTagName(\"replace-set\");\n        SmilesParser sp = new SmilesParser(ac.getBuilder());\n        boolean change = false;\n        for (int i = 0; i < nl.getLength(); i++) {\n            Element child = (Element) nl.item(i);\n            NodeList replaces = child.getElementsByTagName(\"replace\");\n            NodeList replacement = child.getElementsByTagName(\"replacement\");\n            String replacementstring = replacement.item(0).getFirstChild().getNodeValue();\n            if (replacementstring.indexOf('\\n') > -1 || replacementstring.length() < 1) {\n                replacementstring = replacement.item(0).getFirstChild().getNextSibling().getNodeValue();\n            }\n            IAtomContainer replacementStructure = sp.parseSmiles(replacementstring);\n            for (int k = 0; k < replaces.getLength(); k++) {\n                Element replace = (Element) replaces.item(k);\n                String replacestring = replace.getFirstChild().getNodeValue();\n                if (replacestring.indexOf('\\n') > -1 || replacestring.length() < 1) {\n                    replacestring = replace.getFirstChild().getNextSibling().getNodeValue();\n                }\n                IAtomContainer replaceStructure = sp.parseSmiles(replacestring);\n                List<RMap> l = null;\n                UniversalIsomorphismTester universalIsomorphismTester = new UniversalIsomorphismTester();\n                while ((l = universalIsomorphismTester.getSubgraphMap(ac, replaceStructure)) != null) {\n                    List<RMap> l2 = universalIsomorphismTester.makeAtomsMapOfBondsMap(l, ac, replaceStructure);\n                    Iterator<RMap> bondit = l.iterator();\n                    while (bondit.hasNext()) {\n                        RMap rmap = bondit.next();\n                        IBond acbond = ac.getBond(rmap.getId1());\n                        IBond replacebond = replacementStructure.getBond(rmap.getId2());\n                        acbond.setOrder(replacebond.getOrder());\n                        change = true;\n                    }\n                    Iterator<RMap> atomit = l2.iterator();\n                    while (atomit.hasNext()) {\n                        RMap rmap = atomit.next();\n                        IAtom acatom = ac.getAtom(rmap.getId1());\n                        IAtom replaceatom = replacementStructure.getAtom(rmap.getId2());\n                        acatom.setFormalCharge(replaceatom.getFormalCharge());\n                        change = true;\n                    }\n                }\n            }\n        }\n        return (change);\n    }", "signature": "boolean normalize(IAtomContainer ac, Document doc)", "full_signature": "public static boolean normalize(IAtomContainer ac, Document doc)", "class_method_signature": "Normalizer.normalize(IAtomContainer ac, Document doc)", "testcase": false, "constructor": false, "invocations": ["getElementsByTagName", "getBuilder", "getLength", "item", "getElementsByTagName", "getElementsByTagName", "getNodeValue", "getFirstChild", "item", "indexOf", "length", "getNodeValue", "getNextSibling", "getFirstChild", "item", "parseSmiles", "getLength", "item", "getNodeValue", "getFirstChild", "indexOf", "length", "getNodeValue", "getNextSibling", "getFirstChild", "parseSmiles", "getSubgraphMap", "makeAtomsMapOfBondsMap", "iterator", "hasNext", "next", "getBond", "getId1", "getBond", "getId2", "setOrder", "getOrder", "iterator", "hasNext", "next", "getAtom", "getId1", "getAtom", "getId2", "setFormalCharge", "getFormalCharge"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}