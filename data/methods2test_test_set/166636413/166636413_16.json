{"test_class": {"identifier": "QuestionWidgetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}, {"original_string": "@Mock\n    public ReferenceManager referenceManager;", "modifier": "@Mock\n    public", "type": "ReferenceManager", "declarator": "referenceManager", "var_name": "referenceManager"}, {"original_string": "@Mock\n    public AudioHelper audioHelper;", "modifier": "@Mock\n    public", "type": "AudioHelper", "declarator": "audioHelper", "var_name": "audioHelper"}, {"original_string": "@Mock\n    public Analytics analytics;", "modifier": "@Mock\n    public", "type": "Analytics", "declarator": "analytics", "var_name": "analytics"}], "file": "collect_app/src/test/java/org/odk/collect/android/widgets/QuestionWidgetTest.java"}, "test_case": {"identifier": "whenQuestionHasAudio_audioButtonUsesIndexAsClipID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenQuestionHasAudio_audioButtonUsesIndexAsClipID() throws Exception {\n        String reference = createMockReference(referenceManager, \"file://blah.mp3\");\n\n        FormEntryPrompt prompt = new MockFormEntryPromptBuilder()\n                .withIndex(\"i am index\")\n                .withAudioURI(\"file://blah.mp3\")\n                .build();\n\n        TestScreenContextActivity activity = RobolectricHelpers.createThemedActivity(TestScreenContextActivity.class);\n        TestWidget widget = new TestWidget(activity, new QuestionDetails(prompt, \"formAnalyticsID\"));\n\n        AudioButton audioButton = widget.getAudioVideoImageTextLabel().findViewById(R.id.audioButton);\n        verify(audioHelper).setAudio(audioButton, new Clip(\"i am index\", reference));\n    }", "signature": "void whenQuestionHasAudio_audioButtonUsesIndexAsClipID()", "full_signature": "@Test public void whenQuestionHasAudio_audioButtonUsesIndexAsClipID()", "class_method_signature": "QuestionWidgetTest.whenQuestionHasAudio_audioButtonUsesIndexAsClipID()", "testcase": true, "constructor": false, "invocations": ["createMockReference", "build", "withAudioURI", "withIndex", "createThemedActivity", "findViewById", "getAudioVideoImageTextLabel", "setAudio", "verify"]}, "focal_class": {"identifier": "QuestionWidget", "superclass": "extends RelativeLayout", "interfaces": "implements Widget", "fields": [{"original_string": "private final int questionFontSize;", "modifier": "private final", "type": "int", "declarator": "questionFontSize", "var_name": "questionFontSize"}, {"original_string": "private final FormEntryPrompt formEntryPrompt;", "modifier": "private final", "type": "FormEntryPrompt", "declarator": "formEntryPrompt", "var_name": "formEntryPrompt"}, {"original_string": "private final AudioVideoImageTextLabel audioVideoImageTextLabel;", "modifier": "private final", "type": "AudioVideoImageTextLabel", "declarator": "audioVideoImageTextLabel", "var_name": "audioVideoImageTextLabel"}, {"original_string": "private final QuestionDetails questionDetails;", "modifier": "private final", "type": "QuestionDetails", "declarator": "questionDetails", "var_name": "questionDetails"}, {"original_string": "private MediaPlayer player;", "modifier": "private", "type": "MediaPlayer", "declarator": "player", "var_name": "player"}, {"original_string": "private final TextView helpTextView;", "modifier": "private final", "type": "TextView", "declarator": "helpTextView", "var_name": "helpTextView"}, {"original_string": "private final TextView guidanceTextView;", "modifier": "private final", "type": "TextView", "declarator": "guidanceTextView", "var_name": "guidanceTextView"}, {"original_string": "private final View helpTextLayout;", "modifier": "private final", "type": "View", "declarator": "helpTextLayout", "var_name": "helpTextLayout"}, {"original_string": "private final View guidanceTextLayout;", "modifier": "private final", "type": "View", "declarator": "guidanceTextLayout", "var_name": "guidanceTextLayout"}, {"original_string": "private final View textLayout;", "modifier": "private final", "type": "View", "declarator": "textLayout", "var_name": "textLayout"}, {"original_string": "private final TextView warningText;", "modifier": "private final", "type": "TextView", "declarator": "warningText", "var_name": "warningText"}, {"original_string": "private PermissionUtils permissionUtils;", "modifier": "private", "type": "PermissionUtils", "declarator": "permissionUtils", "var_name": "permissionUtils"}, {"original_string": "private static final String GUIDANCE_EXPANDED_STATE = \"expanded_state\";", "modifier": "private static final", "type": "String", "declarator": "GUIDANCE_EXPANDED_STATE = \"expanded_state\"", "var_name": "GUIDANCE_EXPANDED_STATE"}, {"original_string": "private AtomicBoolean expanded;", "modifier": "private", "type": "AtomicBoolean", "declarator": "expanded", "var_name": "expanded"}, {"original_string": "private Bundle state;", "modifier": "private", "type": "Bundle", "declarator": "state", "var_name": "state"}, {"original_string": "protected ThemeUtils themeUtils;", "modifier": "protected", "type": "ThemeUtils", "declarator": "themeUtils", "var_name": "themeUtils"}, {"original_string": "protected final AudioHelper audioHelper;", "modifier": "protected final", "type": "AudioHelper", "declarator": "audioHelper", "var_name": "audioHelper"}, {"original_string": "private WidgetValueChangedListener valueChangedListener;", "modifier": "private", "type": "WidgetValueChangedListener", "declarator": "valueChangedListener", "var_name": "valueChangedListener"}, {"original_string": "@Inject\n    public ReferenceManager referenceManager;", "modifier": "@Inject\n    public", "type": "ReferenceManager", "declarator": "referenceManager", "var_name": "referenceManager"}, {"original_string": "@Inject\n    public AudioHelperFactory audioHelperFactory;", "modifier": "@Inject\n    public", "type": "AudioHelperFactory", "declarator": "audioHelperFactory", "var_name": "audioHelperFactory"}, {"original_string": "@Inject\n    public Analytics analytics;", "modifier": "@Inject\n    public", "type": "Analytics", "declarator": "analytics", "var_name": "analytics"}], "methods": [{"identifier": "QuestionWidget", "parameters": "(Context context, QuestionDetails questionDetails)", "modifiers": "public", "return": "", "signature": " QuestionWidget(Context context, QuestionDetails questionDetails)", "full_signature": "public  QuestionWidget(Context context, QuestionDetails questionDetails)", "class_method_signature": "QuestionWidget.QuestionWidget(Context context, QuestionDetails questionDetails)", "testcase": false, "constructor": true}, {"identifier": "setupGuidanceTextAndLayout", "parameters": "(TextView guidanceTextView, FormEntryPrompt prompt)", "modifiers": "private", "return": "TextView", "signature": "TextView setupGuidanceTextAndLayout(TextView guidanceTextView, FormEntryPrompt prompt)", "full_signature": "private TextView setupGuidanceTextAndLayout(TextView guidanceTextView, FormEntryPrompt prompt)", "class_method_signature": "QuestionWidget.setupGuidanceTextAndLayout(TextView guidanceTextView, FormEntryPrompt prompt)", "testcase": false, "constructor": false}, {"identifier": "configureGuidanceTextView", "parameters": "(TextView guidanceTextView, String guidance)", "modifiers": "private", "return": "TextView", "signature": "TextView configureGuidanceTextView(TextView guidanceTextView, String guidance)", "full_signature": "private TextView configureGuidanceTextView(TextView guidanceTextView, String guidance)", "class_method_signature": "QuestionWidget.configureGuidanceTextView(TextView guidanceTextView, String guidance)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void release()", "full_signature": "public void release()", "class_method_signature": "QuestionWidget.release()", "testcase": false, "constructor": false}, {"identifier": "isRTL", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isRTL()", "full_signature": "public static boolean isRTL()", "class_method_signature": "QuestionWidget.isRTL()", "testcase": false, "constructor": false}, {"identifier": "isRTL", "parameters": "(Locale locale)", "modifiers": "private static", "return": "boolean", "signature": "boolean isRTL(Locale locale)", "full_signature": "private static boolean isRTL(Locale locale)", "class_method_signature": "QuestionWidget.isRTL(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "createQuestionLabel", "parameters": "(FormEntryPrompt prompt)", "modifiers": "private", "return": "AudioVideoImageTextLabel", "signature": "AudioVideoImageTextLabel createQuestionLabel(FormEntryPrompt prompt)", "full_signature": "private AudioVideoImageTextLabel createQuestionLabel(FormEntryPrompt prompt)", "class_method_signature": "QuestionWidget.createQuestionLabel(FormEntryPrompt prompt)", "testcase": false, "constructor": false}, {"identifier": "getHelpTextView", "parameters": "()", "modifiers": "public", "return": "TextView", "signature": "TextView getHelpTextView()", "full_signature": "public TextView getHelpTextView()", "class_method_signature": "QuestionWidget.getHelpTextView()", "testcase": false, "constructor": false}, {"identifier": "getFormEntryPrompt", "parameters": "()", "modifiers": "public", "return": "FormEntryPrompt", "signature": "FormEntryPrompt getFormEntryPrompt()", "full_signature": "public FormEntryPrompt getFormEntryPrompt()", "class_method_signature": "QuestionWidget.getFormEntryPrompt()", "testcase": false, "constructor": false}, {"identifier": "getQuestionDetails", "parameters": "()", "modifiers": "public", "return": "QuestionDetails", "signature": "QuestionDetails getQuestionDetails()", "full_signature": "public QuestionDetails getQuestionDetails()", "class_method_signature": "QuestionWidget.getQuestionDetails()", "testcase": false, "constructor": false}, {"identifier": "recycleDrawablesRecursive", "parameters": "(ViewGroup viewGroup, List<ImageView> images)", "modifiers": "private", "return": "void", "signature": "void recycleDrawablesRecursive(ViewGroup viewGroup, List<ImageView> images)", "full_signature": "private void recycleDrawablesRecursive(ViewGroup viewGroup, List<ImageView> images)", "class_method_signature": "QuestionWidget.recycleDrawablesRecursive(ViewGroup viewGroup, List<ImageView> images)", "testcase": false, "constructor": false}, {"identifier": "recycleDrawables", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void recycleDrawables()", "full_signature": "public void recycleDrawables()", "class_method_signature": "QuestionWidget.recycleDrawables()", "testcase": false, "constructor": false}, {"identifier": "setFocus", "parameters": "(Context context)", "modifiers": "public", "return": "void", "signature": "void setFocus(Context context)", "full_signature": "public void setFocus(Context context)", "class_method_signature": "QuestionWidget.setFocus(Context context)", "testcase": false, "constructor": false}, {"identifier": "setOnLongClickListener", "parameters": "(OnLongClickListener l)", "modifiers": "public abstract", "return": "void", "signature": "void setOnLongClickListener(OnLongClickListener l)", "full_signature": "public abstract void setOnLongClickListener(OnLongClickListener l)", "class_method_signature": "QuestionWidget.setOnLongClickListener(OnLongClickListener l)", "testcase": false, "constructor": false}, {"identifier": "suppressFlingGesture", "parameters": "(MotionEvent e1, MotionEvent e2, float velocityX,\n                                        float velocityY)", "modifiers": "public", "return": "boolean", "signature": "boolean suppressFlingGesture(MotionEvent e1, MotionEvent e2, float velocityX,\n                                        float velocityY)", "full_signature": "public boolean suppressFlingGesture(MotionEvent e1, MotionEvent e2, float velocityX,\n                                        float velocityY)", "class_method_signature": "QuestionWidget.suppressFlingGesture(MotionEvent e1, MotionEvent e2, float velocityX,\n                                        float velocityY)", "testcase": false, "constructor": false}, {"identifier": "addQuestionMediaLayout", "parameters": "(View v)", "modifiers": "protected", "return": "void", "signature": "void addQuestionMediaLayout(View v)", "full_signature": "protected void addQuestionMediaLayout(View v)", "class_method_signature": "QuestionWidget.addQuestionMediaLayout(View v)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "Bundle", "signature": "Bundle getState()", "full_signature": "public Bundle getState()", "class_method_signature": "QuestionWidget.getState()", "testcase": false, "constructor": false}, {"identifier": "getCurrentState", "parameters": "()", "modifiers": "public", "return": "Bundle", "signature": "Bundle getCurrentState()", "full_signature": "public Bundle getCurrentState()", "class_method_signature": "QuestionWidget.getCurrentState()", "testcase": false, "constructor": false}, {"identifier": "saveState", "parameters": "()", "modifiers": "@OverridingMethodsMustInvokeSuper protected", "return": "void", "signature": "void saveState()", "full_signature": "@OverridingMethodsMustInvokeSuper protected void saveState()", "class_method_signature": "QuestionWidget.saveState()", "testcase": false, "constructor": false}, {"identifier": "addHelpTextLayout", "parameters": "(View v)", "modifiers": "protected", "return": "void", "signature": "void addHelpTextLayout(View v)", "full_signature": "protected void addHelpTextLayout(View v)", "class_method_signature": "QuestionWidget.addHelpTextLayout(View v)", "testcase": false, "constructor": false}, {"identifier": "createHelpTextLayout", "parameters": "()", "modifiers": "private", "return": "View", "signature": "View createHelpTextLayout()", "full_signature": "private View createHelpTextLayout()", "class_method_signature": "QuestionWidget.createHelpTextLayout()", "testcase": false, "constructor": false}, {"identifier": "setupHelpText", "parameters": "(TextView helpText, FormEntryPrompt prompt)", "modifiers": "private", "return": "TextView", "signature": "TextView setupHelpText(TextView helpText, FormEntryPrompt prompt)", "full_signature": "private TextView setupHelpText(TextView helpText, FormEntryPrompt prompt)", "class_method_signature": "QuestionWidget.setupHelpText(TextView helpText, FormEntryPrompt prompt)", "testcase": false, "constructor": false}, {"identifier": "addAnswerView", "parameters": "(View v)", "modifiers": "protected", "return": "void", "signature": "void addAnswerView(View v)", "full_signature": "protected void addAnswerView(View v)", "class_method_signature": "QuestionWidget.addAnswerView(View v)", "testcase": false, "constructor": false}, {"identifier": "registerToClearAnswerOnLongPress", "parameters": "(FormEntryActivity activity)", "modifiers": "protected", "return": "void", "signature": "void registerToClearAnswerOnLongPress(FormEntryActivity activity)", "full_signature": "protected void registerToClearAnswerOnLongPress(FormEntryActivity activity)", "class_method_signature": "QuestionWidget.registerToClearAnswerOnLongPress(FormEntryActivity activity)", "testcase": false, "constructor": false}, {"identifier": "cancelLongPress", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cancelLongPress()", "full_signature": "public void cancelLongPress()", "class_method_signature": "QuestionWidget.cancelLongPress()", "testcase": false, "constructor": false}, {"identifier": "showWarning", "parameters": "(String warningBody)", "modifiers": "public", "return": "void", "signature": "void showWarning(String warningBody)", "full_signature": "public void showWarning(String warningBody)", "class_method_signature": "QuestionWidget.showWarning(String warningBody)", "testcase": false, "constructor": false}, {"identifier": "onWindowVisibilityChanged", "parameters": "(int visibility)", "modifiers": "@Override protected", "return": "void", "signature": "void onWindowVisibilityChanged(int visibility)", "full_signature": "@Override protected void onWindowVisibilityChanged(int visibility)", "class_method_signature": "QuestionWidget.onWindowVisibilityChanged(int visibility)", "testcase": false, "constructor": false}, {"identifier": "stopAudio", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopAudio()", "full_signature": "public void stopAudio()", "class_method_signature": "QuestionWidget.stopAudio()", "testcase": false, "constructor": false}, {"identifier": "getSimpleButton", "parameters": "(String text, @IdRes final int withId)", "modifiers": "protected", "return": "Button", "signature": "Button getSimpleButton(String text, @IdRes final int withId)", "full_signature": "protected Button getSimpleButton(String text, @IdRes final int withId)", "class_method_signature": "QuestionWidget.getSimpleButton(String text, @IdRes final int withId)", "testcase": false, "constructor": false}, {"identifier": "getSimpleButton", "parameters": "(@IdRes int id)", "modifiers": "protected", "return": "Button", "signature": "Button getSimpleButton(@IdRes int id)", "full_signature": "protected Button getSimpleButton(@IdRes int id)", "class_method_signature": "QuestionWidget.getSimpleButton(@IdRes int id)", "testcase": false, "constructor": false}, {"identifier": "getSimpleButton", "parameters": "(String text)", "modifiers": "protected", "return": "Button", "signature": "Button getSimpleButton(String text)", "full_signature": "protected Button getSimpleButton(String text)", "class_method_signature": "QuestionWidget.getSimpleButton(String text)", "testcase": false, "constructor": false}, {"identifier": "getCenteredAnswerTextView", "parameters": "()", "modifiers": "protected", "return": "TextView", "signature": "TextView getCenteredAnswerTextView()", "full_signature": "protected TextView getCenteredAnswerTextView()", "class_method_signature": "QuestionWidget.getCenteredAnswerTextView()", "testcase": false, "constructor": false}, {"identifier": "getAnswerTextView", "parameters": "()", "modifiers": "protected", "return": "TextView", "signature": "TextView getAnswerTextView()", "full_signature": "protected TextView getAnswerTextView()", "class_method_signature": "QuestionWidget.getAnswerTextView()", "testcase": false, "constructor": false}, {"identifier": "getAnswerTextView", "parameters": "(String text)", "modifiers": "protected", "return": "TextView", "signature": "TextView getAnswerTextView(String text)", "full_signature": "protected TextView getAnswerTextView(String text)", "class_method_signature": "QuestionWidget.getAnswerTextView(String text)", "testcase": false, "constructor": false}, {"identifier": "getAnswerImageView", "parameters": "(Bitmap bitmap)", "modifiers": "protected", "return": "ImageView", "signature": "ImageView getAnswerImageView(Bitmap bitmap)", "full_signature": "protected ImageView getAnswerImageView(Bitmap bitmap)", "class_method_signature": "QuestionWidget.getAnswerImageView(Bitmap bitmap)", "testcase": false, "constructor": false}, {"identifier": "getAnswerEditText", "parameters": "(boolean readOnly, FormEntryPrompt prompt)", "modifiers": "protected", "return": "EditText", "signature": "EditText getAnswerEditText(boolean readOnly, FormEntryPrompt prompt)", "full_signature": "protected EditText getAnswerEditText(boolean readOnly, FormEntryPrompt prompt)", "class_method_signature": "QuestionWidget.getAnswerEditText(boolean readOnly, FormEntryPrompt prompt)", "testcase": false, "constructor": false}, {"identifier": "waitForData", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void waitForData()", "full_signature": "@Override public final void waitForData()", "class_method_signature": "QuestionWidget.waitForData()", "testcase": false, "constructor": false}, {"identifier": "cancelWaitingForData", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void cancelWaitingForData()", "full_signature": "@Override public final void cancelWaitingForData()", "class_method_signature": "QuestionWidget.cancelWaitingForData()", "testcase": false, "constructor": false}, {"identifier": "isWaitingForData", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean isWaitingForData()", "full_signature": "@Override public final boolean isWaitingForData()", "class_method_signature": "QuestionWidget.isWaitingForData()", "testcase": false, "constructor": false}, {"identifier": "getInstanceFolder", "parameters": "()", "modifiers": "@Nullable public final", "return": "String", "signature": "String getInstanceFolder()", "full_signature": "@Nullable public final String getInstanceFolder()", "class_method_signature": "QuestionWidget.getInstanceFolder()", "testcase": false, "constructor": false}, {"identifier": "getQuestionFontSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getQuestionFontSize()", "full_signature": "public int getQuestionFontSize()", "class_method_signature": "QuestionWidget.getQuestionFontSize()", "testcase": false, "constructor": false}, {"identifier": "getAnswerFontSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAnswerFontSize()", "full_signature": "public int getAnswerFontSize()", "class_method_signature": "QuestionWidget.getAnswerFontSize()", "testcase": false, "constructor": false}, {"identifier": "getGuidanceTextView", "parameters": "()", "modifiers": "public", "return": "TextView", "signature": "TextView getGuidanceTextView()", "full_signature": "public TextView getGuidanceTextView()", "class_method_signature": "QuestionWidget.getGuidanceTextView()", "testcase": false, "constructor": false}, {"identifier": "getHelpTextLayout", "parameters": "()", "modifiers": "public", "return": "View", "signature": "View getHelpTextLayout()", "full_signature": "public View getHelpTextLayout()", "class_method_signature": "QuestionWidget.getHelpTextLayout()", "testcase": false, "constructor": false}, {"identifier": "getAudioVideoImageTextLabel", "parameters": "()", "modifiers": "public", "return": "AudioVideoImageTextLabel", "signature": "AudioVideoImageTextLabel getAudioVideoImageTextLabel()", "full_signature": "public AudioVideoImageTextLabel getAudioVideoImageTextLabel()", "class_method_signature": "QuestionWidget.getAudioVideoImageTextLabel()", "testcase": false, "constructor": false}, {"identifier": "getPlayer", "parameters": "()", "modifiers": "public", "return": "MediaPlayer", "signature": "MediaPlayer getPlayer()", "full_signature": "public MediaPlayer getPlayer()", "class_method_signature": "QuestionWidget.getPlayer()", "testcase": false, "constructor": false}, {"identifier": "getAudioHelper", "parameters": "()", "modifiers": "public", "return": "AudioHelper", "signature": "AudioHelper getAudioHelper()", "full_signature": "public AudioHelper getAudioHelper()", "class_method_signature": "QuestionWidget.getAudioHelper()", "testcase": false, "constructor": false}, {"identifier": "getReferenceManager", "parameters": "()", "modifiers": "public", "return": "ReferenceManager", "signature": "ReferenceManager getReferenceManager()", "full_signature": "public ReferenceManager getReferenceManager()", "class_method_signature": "QuestionWidget.getReferenceManager()", "testcase": false, "constructor": false}, {"identifier": "getPlayColor", "parameters": "(FormEntryPrompt prompt, ThemeUtils themeUtils)", "modifiers": "public static", "return": "int", "signature": "int getPlayColor(FormEntryPrompt prompt, ThemeUtils themeUtils)", "full_signature": "public static int getPlayColor(FormEntryPrompt prompt, ThemeUtils themeUtils)", "class_method_signature": "QuestionWidget.getPlayColor(FormEntryPrompt prompt, ThemeUtils themeUtils)", "testcase": false, "constructor": false}, {"identifier": "getPermissionUtils", "parameters": "()", "modifiers": "public", "return": "PermissionUtils", "signature": "PermissionUtils getPermissionUtils()", "full_signature": "public PermissionUtils getPermissionUtils()", "class_method_signature": "QuestionWidget.getPermissionUtils()", "testcase": false, "constructor": false}, {"identifier": "setPermissionUtils", "parameters": "(PermissionUtils permissionUtils)", "modifiers": "public", "return": "void", "signature": "void setPermissionUtils(PermissionUtils permissionUtils)", "full_signature": "public void setPermissionUtils(PermissionUtils permissionUtils)", "class_method_signature": "QuestionWidget.setPermissionUtils(PermissionUtils permissionUtils)", "testcase": false, "constructor": false}, {"identifier": "setValueChangedListener", "parameters": "(WidgetValueChangedListener valueChangedListener)", "modifiers": "public", "return": "void", "signature": "void setValueChangedListener(WidgetValueChangedListener valueChangedListener)", "full_signature": "public void setValueChangedListener(WidgetValueChangedListener valueChangedListener)", "class_method_signature": "QuestionWidget.setValueChangedListener(WidgetValueChangedListener valueChangedListener)", "testcase": false, "constructor": false}, {"identifier": "widgetValueChanged", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void widgetValueChanged()", "full_signature": "public void widgetValueChanged()", "class_method_signature": "QuestionWidget.widgetValueChanged()", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/widgets/QuestionWidget.java"}, "focal_method": {"identifier": "getAudioVideoImageTextLabel", "parameters": "()", "modifiers": "public", "return": "AudioVideoImageTextLabel", "body": "public AudioVideoImageTextLabel getAudioVideoImageTextLabel() {\n        return audioVideoImageTextLabel;\n    }", "signature": "AudioVideoImageTextLabel getAudioVideoImageTextLabel()", "full_signature": "public AudioVideoImageTextLabel getAudioVideoImageTextLabel()", "class_method_signature": "QuestionWidget.getAudioVideoImageTextLabel()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}