{"test_class": {"identifier": "SubqueryFlattenerTest", "superclass": "extends OptimizerTestBase", "interfaces": "implements TestBase.GenerateAndCheckResult", "fields": [{"original_string": "public static final File RESOURCE_DIR = \n        new File(OptimizerTestBase.RESOURCE_DIR, \"flatten\");", "modifier": "public static final", "type": "File", "declarator": "RESOURCE_DIR = \n        new File(OptimizerTestBase.RESOURCE_DIR, \"flatten\")", "var_name": "RESOURCE_DIR"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/sql/optimizer/SubqueryFlattenerTest.java"}, "test_case": {"identifier": "testFlatten", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFlatten() throws Exception {\n        generateAndCheckResult();\n    }", "signature": "void testFlatten()", "full_signature": "@Test public void testFlatten()", "class_method_signature": "SubqueryFlattenerTest.testFlatten()", "testcase": true, "constructor": false, "invocations": ["generateAndCheckResult"]}, "focal_class": {"identifier": "SubqueryFlattener", "superclass": "", "interfaces": "", "fields": [{"original_string": "SQLParserContext parserContext;", "modifier": "", "type": "SQLParserContext", "declarator": "parserContext", "var_name": "parserContext"}, {"original_string": "NodeFactory nodeFactory;", "modifier": "", "type": "NodeFactory", "declarator": "nodeFactory", "var_name": "nodeFactory"}, {"original_string": "private Stack<SelectNode> selectStack;", "modifier": "private", "type": "Stack<SelectNode>", "declarator": "selectStack", "var_name": "selectStack"}, {"original_string": "private SelectNode currentSelectNode;", "modifier": "private", "type": "SelectNode", "declarator": "currentSelectNode", "var_name": "currentSelectNode"}], "methods": [{"identifier": "SubqueryFlattener", "parameters": "(SQLParserContext parserContext)", "modifiers": "public", "return": "", "signature": " SubqueryFlattener(SQLParserContext parserContext)", "full_signature": "public  SubqueryFlattener(SQLParserContext parserContext)", "class_method_signature": "SubqueryFlattener.SubqueryFlattener(SQLParserContext parserContext)", "testcase": false, "constructor": true}, {"identifier": "flatten", "parameters": "(DMLStatementNode stmt)", "modifiers": "public", "return": "DMLStatementNode", "signature": "DMLStatementNode flatten(DMLStatementNode stmt)", "full_signature": "public DMLStatementNode flatten(DMLStatementNode stmt)", "class_method_signature": "SubqueryFlattener.flatten(DMLStatementNode stmt)", "testcase": false, "constructor": false}, {"identifier": "selectNode", "parameters": "(SelectNode selectNode, QueryTreeNode parentNode)", "modifiers": "protected", "return": "void", "signature": "void selectNode(SelectNode selectNode, QueryTreeNode parentNode)", "full_signature": "protected void selectNode(SelectNode selectNode, QueryTreeNode parentNode)", "class_method_signature": "SubqueryFlattener.selectNode(SelectNode selectNode, QueryTreeNode parentNode)", "testcase": false, "constructor": false}, {"identifier": "flattenFromList", "parameters": "(SelectNode selectNode, QueryTreeNode parentNode)", "modifiers": "private", "return": "void", "signature": "void flattenFromList(SelectNode selectNode, QueryTreeNode parentNode)", "full_signature": "private void flattenFromList(SelectNode selectNode, QueryTreeNode parentNode)", "class_method_signature": "SubqueryFlattener.flattenFromList(SelectNode selectNode, QueryTreeNode parentNode)", "testcase": false, "constructor": false}, {"identifier": "outerAggregatesPreventFlattening", "parameters": "(SelectNode selectNode, Set<FromSubquery> fromSubqueries)", "modifiers": "private", "return": "boolean", "signature": "boolean outerAggregatesPreventFlattening(SelectNode selectNode, Set<FromSubquery> fromSubqueries)", "full_signature": "private boolean outerAggregatesPreventFlattening(SelectNode selectNode, Set<FromSubquery> fromSubqueries)", "class_method_signature": "SubqueryFlattener.outerAggregatesPreventFlattening(SelectNode selectNode, Set<FromSubquery> fromSubqueries)", "testcase": false, "constructor": false}, {"identifier": "getFromSubqueries", "parameters": "(SelectNode selectNode)", "modifiers": "private", "return": "Set<FromSubquery>", "signature": "Set<FromSubquery> getFromSubqueries(SelectNode selectNode)", "full_signature": "private Set<FromSubquery> getFromSubqueries(SelectNode selectNode)", "class_method_signature": "SubqueryFlattener.getFromSubqueries(SelectNode selectNode)", "testcase": false, "constructor": false}, {"identifier": "andNode", "parameters": "(AndNode andNode)", "modifiers": "protected", "return": "void", "signature": "void andNode(AndNode andNode)", "full_signature": "protected void andNode(AndNode andNode)", "class_method_signature": "SubqueryFlattener.andNode(AndNode andNode)", "testcase": false, "constructor": false}, {"identifier": "subqueryNode", "parameters": "(SubqueryNode subqueryNode, \n                                     BinaryComparisonOperatorNode parentComparisonOperator)", "modifiers": "protected", "return": "ValueNode", "signature": "ValueNode subqueryNode(SubqueryNode subqueryNode, \n                                     BinaryComparisonOperatorNode parentComparisonOperator)", "full_signature": "protected ValueNode subqueryNode(SubqueryNode subqueryNode, \n                                     BinaryComparisonOperatorNode parentComparisonOperator)", "class_method_signature": "SubqueryFlattener.subqueryNode(SubqueryNode subqueryNode, \n                                     BinaryComparisonOperatorNode parentComparisonOperator)", "testcase": false, "constructor": false}, {"identifier": "flattenableFromSubquery", "parameters": "(FromSubquery fromSubquery, boolean hasOtherFromTables)", "modifiers": "protected", "return": "boolean", "signature": "boolean flattenableFromSubquery(FromSubquery fromSubquery, boolean hasOtherFromTables)", "full_signature": "protected boolean flattenableFromSubquery(FromSubquery fromSubquery, boolean hasOtherFromTables)", "class_method_signature": "SubqueryFlattener.flattenableFromSubquery(FromSubquery fromSubquery, boolean hasOtherFromTables)", "testcase": false, "constructor": false}, {"identifier": "mergeWhereClause", "parameters": "(ValueNode whereClause, ValueNode intoWhereClause)", "modifiers": "protected", "return": "ValueNode", "signature": "ValueNode mergeWhereClause(ValueNode whereClause, ValueNode intoWhereClause)", "full_signature": "protected ValueNode mergeWhereClause(ValueNode whereClause, ValueNode intoWhereClause)", "class_method_signature": "SubqueryFlattener.mergeWhereClause(ValueNode whereClause, ValueNode intoWhereClause)", "testcase": false, "constructor": false}, {"identifier": "isUniqueSubquery", "parameters": "(SelectNode selectNode, ValueNode parentOperand)", "modifiers": "protected", "return": "boolean", "signature": "boolean isUniqueSubquery(SelectNode selectNode, ValueNode parentOperand)", "full_signature": "protected boolean isUniqueSubquery(SelectNode selectNode, ValueNode parentOperand)", "class_method_signature": "SubqueryFlattener.isUniqueSubquery(SelectNode selectNode, ValueNode parentOperand)", "testcase": false, "constructor": false}, {"identifier": "innerJoinedFromTables", "parameters": "(FromList fromList, \n                                            List<FromTable> intoList,\n                                            List<BinaryComparisonOperatorNode> equalityConditions)", "modifiers": "protected", "return": "boolean", "signature": "boolean innerJoinedFromTables(FromList fromList, \n                                            List<FromTable> intoList,\n                                            List<BinaryComparisonOperatorNode> equalityConditions)", "full_signature": "protected boolean innerJoinedFromTables(FromList fromList, \n                                            List<FromTable> intoList,\n                                            List<BinaryComparisonOperatorNode> equalityConditions)", "class_method_signature": "SubqueryFlattener.innerJoinedFromTables(FromList fromList, \n                                            List<FromTable> intoList,\n                                            List<BinaryComparisonOperatorNode> equalityConditions)", "testcase": false, "constructor": false}, {"identifier": "innerJoinedFromTables", "parameters": "(ResultSetNode fromTable, \n                                            List<FromTable> intoList,\n                                            List<BinaryComparisonOperatorNode> equalityConditions)", "modifiers": "protected", "return": "boolean", "signature": "boolean innerJoinedFromTables(ResultSetNode fromTable, \n                                            List<FromTable> intoList,\n                                            List<BinaryComparisonOperatorNode> equalityConditions)", "full_signature": "protected boolean innerJoinedFromTables(ResultSetNode fromTable, \n                                            List<FromTable> intoList,\n                                            List<BinaryComparisonOperatorNode> equalityConditions)", "class_method_signature": "SubqueryFlattener.innerJoinedFromTables(ResultSetNode fromTable, \n                                            List<FromTable> intoList,\n                                            List<BinaryComparisonOperatorNode> equalityConditions)", "testcase": false, "constructor": false}, {"identifier": "addEqualityConditions", "parameters": "(AndNode conditions,\n                                         List<BinaryComparisonOperatorNode> equalityConditions)", "modifiers": "protected", "return": "void", "signature": "void addEqualityConditions(AndNode conditions,\n                                         List<BinaryComparisonOperatorNode> equalityConditions)", "full_signature": "protected void addEqualityConditions(AndNode conditions,\n                                         List<BinaryComparisonOperatorNode> equalityConditions)", "class_method_signature": "SubqueryFlattener.addEqualityConditions(AndNode conditions,\n                                         List<BinaryComparisonOperatorNode> equalityConditions)", "testcase": false, "constructor": false}, {"identifier": "getEquatedColumns", "parameters": "(List<FromTable> fromTables, \n                                                                      List<BinaryComparisonOperatorNode> equalityConditions)", "modifiers": "protected", "return": "Collection<Collection<ColumnBinding>>", "signature": "Collection<Collection<ColumnBinding>> getEquatedColumns(List<FromTable> fromTables, \n                                                                      List<BinaryComparisonOperatorNode> equalityConditions)", "full_signature": "protected Collection<Collection<ColumnBinding>> getEquatedColumns(List<FromTable> fromTables, \n                                                                      List<BinaryComparisonOperatorNode> equalityConditions)", "class_method_signature": "SubqueryFlattener.getEquatedColumns(List<FromTable> fromTables, \n                                                                      List<BinaryComparisonOperatorNode> equalityConditions)", "testcase": false, "constructor": false}, {"identifier": "addEquatedColumns", "parameters": "(ColumnBinding cb1, ColumnBinding cb2, \n                                     Collection<Collection<ColumnBinding>> equatedColumns)", "modifiers": "protected", "return": "void", "signature": "void addEquatedColumns(ColumnBinding cb1, ColumnBinding cb2, \n                                     Collection<Collection<ColumnBinding>> equatedColumns)", "full_signature": "protected void addEquatedColumns(ColumnBinding cb1, ColumnBinding cb2, \n                                     Collection<Collection<ColumnBinding>> equatedColumns)", "class_method_signature": "SubqueryFlattener.addEquatedColumns(ColumnBinding cb1, ColumnBinding cb2, \n                                     Collection<Collection<ColumnBinding>> equatedColumns)", "testcase": false, "constructor": false}, {"identifier": "getColumnEquality", "parameters": "(FromTable fromTable, Column column, \n                                               List<FromTable> fromTables, \n                                               Collection<Collection<ColumnBinding>> equatedColumns,\n                                               List<BinaryComparisonOperatorNode> equalityConditions, \n                                               ValueNode parentOperand,\n                                               Map<ColumnBinding,ColumnEquality> columnEqualities)", "modifiers": "protected", "return": "ColumnEquality", "signature": "ColumnEquality getColumnEquality(FromTable fromTable, Column column, \n                                               List<FromTable> fromTables, \n                                               Collection<Collection<ColumnBinding>> equatedColumns,\n                                               List<BinaryComparisonOperatorNode> equalityConditions, \n                                               ValueNode parentOperand,\n                                               Map<ColumnBinding,ColumnEquality> columnEqualities)", "full_signature": "protected ColumnEquality getColumnEquality(FromTable fromTable, Column column, \n                                               List<FromTable> fromTables, \n                                               Collection<Collection<ColumnBinding>> equatedColumns,\n                                               List<BinaryComparisonOperatorNode> equalityConditions, \n                                               ValueNode parentOperand,\n                                               Map<ColumnBinding,ColumnEquality> columnEqualities)", "class_method_signature": "SubqueryFlattener.getColumnEquality(FromTable fromTable, Column column, \n                                               List<FromTable> fromTables, \n                                               Collection<Collection<ColumnBinding>> equatedColumns,\n                                               List<BinaryComparisonOperatorNode> equalityConditions, \n                                               ValueNode parentOperand,\n                                               Map<ColumnBinding,ColumnEquality> columnEqualities)", "testcase": false, "constructor": false}, {"identifier": "getColumnBinding", "parameters": "(ValueNode expr,\n                                             List<FromTable> fromTables)", "modifiers": "protected", "return": "ColumnBinding", "signature": "ColumnBinding getColumnBinding(ValueNode expr,\n                                             List<FromTable> fromTables)", "full_signature": "protected ColumnBinding getColumnBinding(ValueNode expr,\n                                             List<FromTable> fromTables)", "class_method_signature": "SubqueryFlattener.getColumnBinding(ValueNode expr,\n                                             List<FromTable> fromTables)", "testcase": false, "constructor": false}, {"identifier": "isColumnReference", "parameters": "(ValueNode expr,\n                                        Collection<ColumnBinding> equated)", "modifiers": "protected", "return": "boolean", "signature": "boolean isColumnReference(ValueNode expr,\n                                        Collection<ColumnBinding> equated)", "full_signature": "protected boolean isColumnReference(ValueNode expr,\n                                        Collection<ColumnBinding> equated)", "class_method_signature": "SubqueryFlattener.isColumnReference(ValueNode expr,\n                                        Collection<ColumnBinding> equated)", "testcase": false, "constructor": false}, {"identifier": "isAggregateMethod", "parameters": "(Visitable node)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAggregateMethod(Visitable node)", "full_signature": "public static boolean isAggregateMethod(Visitable node)", "class_method_signature": "SubqueryFlattener.isAggregateMethod(Visitable node)", "testcase": false, "constructor": false}, {"identifier": "getReference", "parameters": "(ColumnReference reference, Collection<FromSubquery> subqueries)", "modifiers": "private static", "return": "ValueNode", "signature": "ValueNode getReference(ColumnReference reference, Collection<FromSubquery> subqueries)", "full_signature": "private static ValueNode getReference(ColumnReference reference, Collection<FromSubquery> subqueries)", "class_method_signature": "SubqueryFlattener.getReference(ColumnReference reference, Collection<FromSubquery> subqueries)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/sql/optimizer/SubqueryFlattener.java"}, "focal_method": {"identifier": "flatten", "parameters": "(DMLStatementNode stmt)", "modifiers": "public", "return": "DMLStatementNode", "body": "public DMLStatementNode flatten(DMLStatementNode stmt) throws StandardException {\n        ResultSetNode resultSet = stmt.getResultSetNode();\n        if (resultSet.getNodeType() == NodeTypes.SELECT_NODE) {\n            selectStack = new Stack<>();\n            currentSelectNode = null;\n            selectNode((SelectNode)resultSet, stmt);\n        }\n        return stmt;\n    }", "signature": "DMLStatementNode flatten(DMLStatementNode stmt)", "full_signature": "public DMLStatementNode flatten(DMLStatementNode stmt)", "class_method_signature": "SubqueryFlattener.flatten(DMLStatementNode stmt)", "testcase": false, "constructor": false, "invocations": ["getResultSetNode", "getNodeType", "selectNode"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}