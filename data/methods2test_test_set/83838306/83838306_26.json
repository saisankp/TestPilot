{"test_class": {"identifier": "OptionSelectorWeightedTest", "superclass": "", "interfaces": "", "fields": [], "file": "outland-feature-java/src/test/java/outland/feature/OptionSelectorWeightedTest.java"}, "test_case": {"identifier": "testFairStrings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFairStrings() {\n\n    /*\n    maxweight is 10_000; thus in a 10K iteration we'd expect the option with weight \"4000\" to be\n    selected about 40% of the time.\n     */\n    final ArrayList<FeatureOption> itemList = Lists.newArrayList(\n        FeatureOption.newBuilder().setKey(\"10%\").setWeight(1_000).build(),\n        FeatureOption.newBuilder().setKey(\"20%\").setWeight(2_000).build(),\n        FeatureOption.newBuilder().setKey(\"30%\").setWeight(3_000).build(),\n        FeatureOption.newBuilder().setKey(\"40%\").setWeight(4_000).build()\n    );\n\n    final OptionSelectorWeighted or = new OptionSelectorWeighted(itemList);\n    final int[] resultFrequencies = new int[4];\n    final int nearestRoundTo = 1_000;\n\n    /*\n     iterate as many times as the max weight; this means a 10% weight should be be hit about\n     1000 times, which makes some of the arithmetic below easier\n      */\n    final int runs = 10_000;\n    IntStream.range(0, runs).forEach(i -> {\n      /*\n       maps our 4 possible results (1000 to 4000) into array slots 0 to 3\n        */\n      final int fitIntoArray = (or.select().getWeight() / nearestRoundTo) - 1;\n      resultFrequencies[fitIntoArray]++;\n    });\n\n    final Set<Integer> nearestFrequencies = Sets.newHashSet();\n    final int nearestRoundUp = nearestRoundTo / 2; // avoid rounding down to 0 for a number < 1000\n    for (int resultFrequency : resultFrequencies) {\n      /*\n      take the actual frequency and map it to the closest thousandth\n       */\n      final int nearestFrequency =\n          (int) (nearestRoundTo * Math.floor((resultFrequency + nearestRoundUp) / nearestRoundTo));\n\n      nearestFrequencies.add(nearestFrequency);\n    }\n\n    /*\n    check we have our four expected frequencies\n     */\n    assertTrue(nearestFrequencies.contains(1_000));\n    assertTrue(nearestFrequencies.contains(2_000));\n    assertTrue(nearestFrequencies.contains(3_000));\n    assertTrue(nearestFrequencies.contains(4_000));\n  }", "signature": "void testFairStrings()", "full_signature": "@Test public void testFairStrings()", "class_method_signature": "OptionSelectorWeightedTest.testFairStrings()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "build", "setWeight", "setKey", "newBuilder", "build", "setWeight", "setKey", "newBuilder", "build", "setWeight", "setKey", "newBuilder", "build", "setWeight", "setKey", "newBuilder", "forEach", "range", "getWeight", "select", "newHashSet", "floor", "add", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "OptionSelectorWeighted", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final double[] wheel;", "modifier": "private final", "type": "double[]", "declarator": "wheel", "var_name": "wheel"}, {"original_string": "private final FeatureOption[] values;", "modifier": "private final", "type": "FeatureOption[]", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "OptionSelectorWeighted", "parameters": "(List<FeatureOption> options)", "modifiers": "", "return": "", "signature": " OptionSelectorWeighted(List<FeatureOption> options)", "full_signature": "  OptionSelectorWeighted(List<FeatureOption> options)", "class_method_signature": "OptionSelectorWeighted.OptionSelectorWeighted(List<FeatureOption> options)", "testcase": false, "constructor": true}, {"identifier": "select", "parameters": "()", "modifiers": "", "return": "FeatureOption", "signature": "FeatureOption select()", "full_signature": " FeatureOption select()", "class_method_signature": "OptionSelectorWeighted.select()", "testcase": false, "constructor": false}, {"identifier": "buildValues", "parameters": "(List<FeatureOption> options)", "modifiers": "private", "return": "FeatureOption[]", "signature": "FeatureOption[] buildValues(List<FeatureOption> options)", "full_signature": "private FeatureOption[] buildValues(List<FeatureOption> options)", "class_method_signature": "OptionSelectorWeighted.buildValues(List<FeatureOption> options)", "testcase": false, "constructor": false}, {"identifier": "buildWheel", "parameters": "(List<FeatureOption> options)", "modifiers": "private", "return": "double[]", "signature": "double[] buildWheel(List<FeatureOption> options)", "full_signature": "private double[] buildWheel(List<FeatureOption> options)", "class_method_signature": "OptionSelectorWeighted.buildWheel(List<FeatureOption> options)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(int weight)", "modifiers": "private", "return": "double", "signature": "double normalize(int weight)", "full_signature": "private double normalize(int weight)", "class_method_signature": "OptionSelectorWeighted.normalize(int weight)", "testcase": false, "constructor": false}], "file": "outland-feature-java/src/main/java/outland/feature/OptionSelectorWeighted.java"}, "focal_method": {"identifier": "select", "parameters": "()", "modifiers": "", "return": "FeatureOption", "body": "FeatureOption select() {\n    final double randomValue = Math.random();\n    int idx = Arrays.binarySearch(wheel, randomValue);\n    if (idx < 0) {\n      idx = -idx - 1;\n    }\n    return values[idx];\n  }", "signature": "FeatureOption select()", "full_signature": " FeatureOption select()", "class_method_signature": "OptionSelectorWeighted.select()", "testcase": false, "constructor": false, "invocations": ["random", "binarySearch"]}, "repository": {"repo_id": 83838306, "url": "https://github.com/dehora/outland", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 944, "license": "licensed"}}