{"test_class": {"identifier": "ConnectorDefinitionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConnectorDefinitionService connectorDefinitionService;", "modifier": "private", "type": "ConnectorDefinitionService", "declarator": "connectorDefinitionService", "var_name": "connectorDefinitionService"}, {"original_string": "@Mock\n    private ObjectMapper objectMapper;", "modifier": "@Mock\n    private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "@Mock\n    private ResourcePatternResolver resourceLoader;", "modifier": "@Mock\n    private", "type": "ResourcePatternResolver", "declarator": "resourceLoader", "var_name": "resourceLoader"}], "file": "activiti-spring-connector/src/test/java/org/activiti/core/common/spring/connector/ConnectorDefinitionServiceTest.java"}, "test_case": {"identifier": "validateShouldThrowExceptionWhenTwoConnectorsHaveTheSameName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validateShouldThrowExceptionWhenTwoConnectorsHaveTheSameName() {\n        //given\n        ConnectorDefinition connectorDefinition = new ConnectorDefinition();\n        connectorDefinition.setName(\"Conflicting name connector\");\n\n        ConnectorDefinition connectorDefinitionWithSameName = new ConnectorDefinition();\n        connectorDefinitionWithSameName.setName(\"Conflicting name connector\");\n\n        //when\n        Throwable throwable = catchThrowable(\n                () -> connectorDefinitionService.validate(Arrays.asList(connectorDefinition,\n                                                                 connectorDefinitionWithSameName))\n        );\n\n        //then\n        assertThat(throwable)\n                .isInstanceOf(IllegalStateException.class)\n                .hasMessage(\"More than one connectorDefinition with name '\" + connectorDefinition.getName() + \"' was found. Names must be unique.\");\n    }", "signature": "void validateShouldThrowExceptionWhenTwoConnectorsHaveTheSameName()", "full_signature": "@Test public void validateShouldThrowExceptionWhenTwoConnectorsHaveTheSameName()", "class_method_signature": "ConnectorDefinitionServiceTest.validateShouldThrowExceptionWhenTwoConnectorsHaveTheSameName()", "testcase": true, "constructor": false, "invocations": ["setName", "setName", "catchThrowable", "validate", "asList", "hasMessage", "isInstanceOf", "assertThat", "getName"]}, "focal_class": {"identifier": "ConnectorDefinitionService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String connectorRoot;", "modifier": "private", "type": "String", "declarator": "connectorRoot", "var_name": "connectorRoot"}, {"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "private ResourcePatternResolver resourceLoader;", "modifier": "private", "type": "ResourcePatternResolver", "declarator": "resourceLoader", "var_name": "resourceLoader"}], "methods": [{"identifier": "ConnectorDefinitionService", "parameters": "(String connectorRoot, ObjectMapper objectMapper, ResourcePatternResolver resourceLoader)", "modifiers": "public", "return": "", "signature": " ConnectorDefinitionService(String connectorRoot, ObjectMapper objectMapper, ResourcePatternResolver resourceLoader)", "full_signature": "public  ConnectorDefinitionService(String connectorRoot, ObjectMapper objectMapper, ResourcePatternResolver resourceLoader)", "class_method_signature": "ConnectorDefinitionService.ConnectorDefinitionService(String connectorRoot, ObjectMapper objectMapper, ResourcePatternResolver resourceLoader)", "testcase": false, "constructor": true}, {"identifier": "retrieveResources", "parameters": "()", "modifiers": "private", "return": "Optional<Resource[]>", "signature": "Optional<Resource[]> retrieveResources()", "full_signature": "private Optional<Resource[]> retrieveResources()", "class_method_signature": "ConnectorDefinitionService.retrieveResources()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InputStream inputStream)", "modifiers": "private", "return": "ConnectorDefinition", "signature": "ConnectorDefinition read(InputStream inputStream)", "full_signature": "private ConnectorDefinition read(InputStream inputStream)", "class_method_signature": "ConnectorDefinitionService.read(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "public", "return": "List<ConnectorDefinition>", "signature": "List<ConnectorDefinition> get()", "full_signature": "public List<ConnectorDefinition> get()", "class_method_signature": "ConnectorDefinitionService.get()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(List<ConnectorDefinition> connectorDefinitions)", "modifiers": "protected", "return": "void", "signature": "void validate(List<ConnectorDefinition> connectorDefinitions)", "full_signature": "protected void validate(List<ConnectorDefinition> connectorDefinitions)", "class_method_signature": "ConnectorDefinitionService.validate(List<ConnectorDefinition> connectorDefinitions)", "testcase": false, "constructor": false}], "file": "activiti-spring-connector/src/main/java/org/activiti/core/common/spring/connector/ConnectorDefinitionService.java"}, "focal_method": {"identifier": "validate", "parameters": "(List<ConnectorDefinition> connectorDefinitions)", "modifiers": "protected", "return": "void", "body": "protected void validate(List<ConnectorDefinition> connectorDefinitions) {\n        if (!connectorDefinitions.isEmpty()) {\n            Set<String> processedNames = new HashSet<>();\n\n            for (ConnectorDefinition connectorDefinition : connectorDefinitions) {\n                String name = connectorDefinition.getName();\n                if (name == null || name.isEmpty()) {\n                    throw new IllegalStateException(\"connectorDefinition name cannot be null or empty\");\n                }\n                if (name.contains(\".\")) {\n                    throw new IllegalStateException(\"connectorDefinition name cannot have '.' character\");\n                }\n                if (!processedNames.add(name)) {\n                    throw new IllegalStateException(\"More than one connectorDefinition with name '\" + name + \"' was found. Names must be unique.\");\n                }\n            }\n        }\n    }", "signature": "void validate(List<ConnectorDefinition> connectorDefinitions)", "full_signature": "protected void validate(List<ConnectorDefinition> connectorDefinitions)", "class_method_signature": "ConnectorDefinitionService.validate(List<ConnectorDefinition> connectorDefinitions)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getName", "isEmpty", "contains", "add"]}, "repository": {"repo_id": 152714817, "url": "https://github.com/Activiti/activiti-core-common", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 7, "size": 543, "license": "licensed"}}