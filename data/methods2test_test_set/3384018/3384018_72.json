{"test_class": {"identifier": "TestResponseContentEncoding", "superclass": "", "interfaces": "", "fields": [], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/client/protocol/TestResponseContentEncoding.java"}, "test_case": {"identifier": "testGzipContentEncoding", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGzipContentEncoding() throws Exception {\n        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 200, \"OK\");\n        StringEntity original = new StringEntity(\"encoded stuff\");\n        original.setContentEncoding(\"GZip\");\n        response.setEntity(original);\n        HttpContext context = new BasicHttpContext();\n\n        HttpResponseInterceptor interceptor = new ResponseContentEncoding();\n        interceptor.process(response, context);\n        HttpEntity entity = response.getEntity();\n        Assert.assertNotNull(entity);\n        Assert.assertTrue(entity instanceof GzipDecompressingEntity);\n    }", "signature": "void testGzipContentEncoding()", "full_signature": "@Test public void testGzipContentEncoding()", "class_method_signature": "TestResponseContentEncoding.testGzipContentEncoding()", "testcase": true, "constructor": false, "invocations": ["setContentEncoding", "setEntity", "process", "getEntity", "assertNotNull", "assertTrue"]}, "focal_class": {"identifier": "ResponseContentEncoding", "superclass": "", "interfaces": "implements HttpResponseInterceptor", "fields": [], "methods": [{"identifier": "process", "parameters": "(\n            final HttpResponse response,\n            final HttpContext context)", "modifiers": "public", "return": "void", "signature": "void process(\n            final HttpResponse response,\n            final HttpContext context)", "full_signature": "public void process(\n            final HttpResponse response,\n            final HttpContext context)", "class_method_signature": "ResponseContentEncoding.process(\n            final HttpResponse response,\n            final HttpContext context)", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/protocol/ResponseContentEncoding.java"}, "focal_method": {"identifier": "process", "parameters": "(\n            final HttpResponse response,\n            final HttpContext context)", "modifiers": "public", "return": "void", "body": "public void process(\n            final HttpResponse response,\n            final HttpContext context) throws HttpException, IOException {\n        HttpEntity entity = response.getEntity();\n\n        // It wasn't a 304 Not Modified response, 204 No Content or similar\n        if (entity != null) {\n            Header ceheader = entity.getContentEncoding();\n            if (ceheader != null) {\n                HeaderElement[] codecs = ceheader.getElements();\n                for (HeaderElement codec : codecs) {\n                    String codecname = codec.getName().toLowerCase(Locale.US);\n                    if (\"gzip\".equals(codecname) || \"x-gzip\".equals(codecname)) {\n                        response.setEntity(new GzipDecompressingEntity(response.getEntity()));\n                        return;\n                    } else if (\"deflate\".equals(codecname)) {\n                        response.setEntity(new DeflateDecompressingEntity(response.getEntity()));\n                        return;\n                    } else if (\"identity\".equals(codecname)) {\n\n                        /* Don't need to transform the content - no-op */\n                        return;\n                    } else {\n                        throw new HttpException(\"Unsupported Content-Coding: \" + codec.getName());\n                    }\n                }\n            }\n        }\n    }", "signature": "void process(\n            final HttpResponse response,\n            final HttpContext context)", "full_signature": "public void process(\n            final HttpResponse response,\n            final HttpContext context)", "class_method_signature": "ResponseContentEncoding.process(\n            final HttpResponse response,\n            final HttpContext context)", "testcase": false, "constructor": false, "invocations": ["getEntity", "getContentEncoding", "getElements", "toLowerCase", "getName", "equals", "equals", "setEntity", "getEntity", "equals", "setEntity", "getEntity", "equals", "getName"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}