{"test_class": {"identifier": "JavaxJsonTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String KEY_PREFIX = \"prefix\";", "modifier": "static final", "type": "String", "declarator": "KEY_PREFIX = \"prefix\"", "var_name": "KEY_PREFIX"}, {"original_string": "static final String KEY_URI = \"uri\";", "modifier": "static final", "type": "String", "declarator": "KEY_URI = \"uri\"", "var_name": "KEY_URI"}], "file": "api/src/test/java/net/adamcin/oakpal/api/JavaxJsonTest.java"}, "test_case": {"identifier": "testWrap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrap() {\n        assertSame(\"null is JsonObject.NULL\", JsonObject.NULL, wrap(null));\n        assertSame(\"same true\", JsonObject.TRUE, wrap(true));\n        assertSame(\"same false\", JsonObject.FALSE, wrap(false));\n        final JsonValue value = Json.createArrayBuilder().add(\"foo\").build().get(0);\n        assertSame(\"same value\", value, wrap(value));\n        assertEquals(\"equal string value\", value, wrap(\"foo\"));\n        final JsonObject object = key(\"foo\", \"bar\").get();\n        final JsonObjectConvertible objectible = () -> object;\n        assertSame(\"same value\", object, wrap(objectible));\n        final JsonArray array = arr().val(\"foo1\").val(\"foo2\").val(\"foo3\").get();\n        final JsonArrayConvertible arrayable = () -> array;\n        assertSame(\"same value\", array, wrap(arrayable));\n        final Calendar now = Calendar.getInstance();\n        assertEquals(\"same date\", wrap(ISO8601.format(now)), wrap(now));\n\n        assertEquals(\"same int\",\n                10, ((JsonNumber) wrap(10)).intValue());\n        assertEquals(\"same long\",\n                Integer.MAX_VALUE + 1L, ((JsonNumber) wrap(Integer.MAX_VALUE + 1L)).longValue());\n        assertEquals(\"same double\",\n                42.0D, ((JsonNumber) wrap(42.0D)).doubleValue(), 1.0D);\n\n        final BigInteger bigInteger = new BigInteger(Long.toString(Integer.MAX_VALUE + 1L));\n        assertEquals(\"same bigint\", bigInteger,\n                ((JsonNumber) wrap(bigInteger)).bigIntegerValue());\n        final BigDecimal bigDecimal = new BigDecimal(Double.toString(Integer.MAX_VALUE + 1L));\n        assertEquals(\"same bigd\", bigDecimal,\n                ((JsonNumber) wrap(bigDecimal)).bigDecimalValue());\n        final float fval = 4.0f;\n        assertEquals(\"same float\", Float.valueOf(fval).doubleValue(),\n                ((JsonNumber) wrap(fval)).doubleValue(), 1.0D);\n\n        final String[] foos = {\"foo\"};\n        assertEquals(\"strings should be wrapped inside of a JsonArray\",\n                Json.createArrayBuilder().add(\"foo\").build(), wrap(foos));\n\n        assertEquals(\"ints should be wrapped inside of a JsonArray\",\n                Json.createArrayBuilder().add(42).build(), wrap(new int[]{42}));\n        assertEquals(\"longs should be wrapped inside of a JsonArray\",\n                Json.createArrayBuilder().add(42L).build(), wrap(new long[]{42L}));\n        assertEquals(\"doubles should be wrapped inside of a JsonArray\",\n                Json.createArrayBuilder().add(42.0D).build(), wrap(new double[]{42.0D}));\n        assertEquals(\"chars should be wrapped inside of a String\",\n                Json.createArrayBuilder().add(String.valueOf(new char[]{'c', 'a', 't'})).build().get(0),\n                wrap(new char[]{'c', 'a', 't'}));\n        final byte[] bytes = \"foo\".getBytes(StandardCharsets.UTF_8);\n        final String bytesEncoded = Base64.getUrlEncoder().encodeToString(bytes);\n        assertEquals(\"bytes should be Base64 encoded in a String\",\n                Json.createArrayBuilder().add(bytesEncoded).build().get(0),\n                wrap(bytes));\n\n        assertEquals(\"floats should be converted to doubles and wrapped inside of a JsonArray\",\n                Json.createArrayBuilder().add(4.0D).build(), wrap(new float[]{4.0F}));\n\n        assertEquals(\"booleans should be wrapped inside of a JsonArray\",\n                Json.createArrayBuilder().add(true).build(), wrap(new boolean[]{true}));\n\n        final String prefix = \"foo\";\n        final String uri = \"http://foo.com/1.0\";\n        final Map<Integer, JsonNamespace> convMap = Collections\n                .singletonMap(5, JsonNamespace.create(prefix, uri));\n        assertEquals(\"convert map to json obj\",\n                key(\"5\", key(KEY_PREFIX, prefix).key(KEY_URI, uri)).get(), wrap(convMap));\n\n        final List<String> ordinals = Arrays.asList(\"one\", \"two\", \"three\");\n        assertEquals(\"collection to json array of wrapped elements\",\n                Json.createArrayBuilder().add(\"one\").add(\"two\").add(\"three\").build(),\n                wrap(ordinals));\n\n        final String otherwiseString = \"justAString\";\n        final Object otherwise = new Object() {\n            @Override\n            public String toString() {\n                return otherwiseString;\n            }\n        };\n        assertEquals(\"otherwise, just toString the object to a json string\",\n                Json.createArrayBuilder().add(otherwiseString).build().get(0),\n                wrap(otherwise));\n    }", "signature": "void testWrap()", "full_signature": "@Test public void testWrap()", "class_method_signature": "JavaxJsonTest.testWrap()", "testcase": true, "constructor": false, "invocations": ["assertSame", "wrap", "assertSame", "wrap", "assertSame", "wrap", "get", "build", "add", "createArrayBuilder", "assertSame", "wrap", "assertEquals", "wrap", "get", "key", "assertSame", "wrap", "get", "val", "val", "val", "arr", "assertSame", "wrap", "getInstance", "assertEquals", "wrap", "format", "wrap", "assertEquals", "intValue", "wrap", "assertEquals", "longValue", "wrap", "assertEquals", "doubleValue", "wrap", "toString", "assertEquals", "bigIntegerValue", "wrap", "toString", "assertEquals", "bigDecimalValue", "wrap", "assertEquals", "doubleValue", "valueOf", "doubleValue", "wrap", "assertEquals", "build", "add", "createArrayBuilder", "wrap", "assertEquals", "build", "add", "createArrayBuilder", "wrap", "assertEquals", "build", "add", "createArrayBuilder", "wrap", "assertEquals", "build", "add", "createArrayBuilder", "wrap", "assertEquals", "get", "build", "add", "createArrayBuilder", "valueOf", "wrap", "getBytes", "encodeToString", "getUrlEncoder", "assertEquals", "get", "build", "add", "createArrayBuilder", "wrap", "assertEquals", "build", "add", "createArrayBuilder", "wrap", "assertEquals", "build", "add", "createArrayBuilder", "wrap", "singletonMap", "create", "assertEquals", "get", "key", "key", "key", "wrap", "asList", "assertEquals", "build", "add", "add", "add", "createArrayBuilder", "wrap", "assertEquals", "get", "build", "add", "createArrayBuilder", "wrap"]}, "focal_class": {"identifier": "JavaxJson", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final Function<JsonValue, String> JSON_VALUE_STRING = compose1(JavaxJson::unwrap, Object::toString);", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "Function<JsonValue, String>", "declarator": "JSON_VALUE_STRING = compose1(JavaxJson::unwrap, Object::toString)", "var_name": "JSON_VALUE_STRING"}], "methods": [{"identifier": "JavaxJson", "parameters": "()", "modifiers": "private", "return": "", "signature": " JavaxJson()", "full_signature": "private  JavaxJson()", "class_method_signature": "JavaxJson.JavaxJson()", "testcase": false, "constructor": true}, {"identifier": "nonEmptyValue", "parameters": "(final @Nullable JsonValue value)", "modifiers": "public static", "return": "boolean", "signature": "boolean nonEmptyValue(final @Nullable JsonValue value)", "full_signature": "public static boolean nonEmptyValue(final @Nullable JsonValue value)", "class_method_signature": "JavaxJson.nonEmptyValue(final @Nullable JsonValue value)", "testcase": false, "constructor": false}, {"identifier": "nonDefaultValue", "parameters": "(final @Nullable JsonValue value, final @NotNull JsonValue defaultValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean nonDefaultValue(final @Nullable JsonValue value, final @NotNull JsonValue defaultValue)", "full_signature": "public static boolean nonDefaultValue(final @Nullable JsonValue value, final @NotNull JsonValue defaultValue)", "class_method_signature": "JavaxJson.nonDefaultValue(final @Nullable JsonValue value, final @NotNull JsonValue defaultValue)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(final Object object)", "modifiers": "public static", "return": "JsonValue", "signature": "JsonValue wrap(final Object object)", "full_signature": "public static JsonValue wrap(final Object object)", "class_method_signature": "JavaxJson.wrap(final Object object)", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "(final JsonValue jsonValue)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "Object", "signature": "Object unwrap(final JsonValue jsonValue)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static Object unwrap(final JsonValue jsonValue)", "class_method_signature": "JavaxJson.unwrap(final JsonValue jsonValue)", "testcase": false, "constructor": false}, {"identifier": "unwrapObject", "parameters": "(final JsonObject jsonObject)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "Map<String, Object>", "signature": "Map<String, Object> unwrapObject(final JsonObject jsonObject)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static Map<String, Object> unwrapObject(final JsonObject jsonObject)", "class_method_signature": "JavaxJson.unwrapObject(final JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "unwrapArray", "parameters": "(final JsonArray jsonArray)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "List<Object>", "signature": "List<Object> unwrapArray(final JsonArray jsonArray)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static List<Object> unwrapArray(final JsonArray jsonArray)", "class_method_signature": "JavaxJson.unwrapArray(final JsonArray jsonArray)", "testcase": false, "constructor": false}, {"identifier": "shallowMergeObjects", "parameters": "(final @Nullable JsonObject base,\n                                                          final @Nullable JsonObject overlay)", "modifiers": "public static @NotNull", "return": "JsonObject", "signature": "JsonObject shallowMergeObjects(final @Nullable JsonObject base,\n                                                          final @Nullable JsonObject overlay)", "full_signature": "public static @NotNull JsonObject shallowMergeObjects(final @Nullable JsonObject base,\n                                                          final @Nullable JsonObject overlay)", "class_method_signature": "JavaxJson.shallowMergeObjects(final @Nullable JsonObject base,\n                                                          final @Nullable JsonObject overlay)", "testcase": false, "constructor": false}, {"identifier": "val", "parameters": "(Object value)", "modifiers": "public static", "return": "Value", "signature": "Value val(Object value)", "full_signature": "public static Value val(Object value)", "class_method_signature": "JavaxJson.val(Object value)", "testcase": false, "constructor": false}, {"identifier": "obj", "parameters": "(final Key... keys)", "modifiers": "public static", "return": "Obj", "signature": "Obj obj(final Key... keys)", "full_signature": "public static Obj obj(final Key... keys)", "class_method_signature": "JavaxJson.obj(final Key... keys)", "testcase": false, "constructor": false}, {"identifier": "obj", "parameters": "(final JsonObject jsonObject)", "modifiers": "public static", "return": "Obj", "signature": "Obj obj(final JsonObject jsonObject)", "full_signature": "public static Obj obj(final JsonObject jsonObject)", "class_method_signature": "JavaxJson.obj(final JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "obj", "parameters": "(final Map<?, ?> map)", "modifiers": "public static", "return": "Obj", "signature": "Obj obj(final Map<?, ?> map)", "full_signature": "public static Obj obj(final Map<?, ?> map)", "class_method_signature": "JavaxJson.obj(final Map<?, ?> map)", "testcase": false, "constructor": false}, {"identifier": "key", "parameters": "(final String key, final Object value)", "modifiers": "public static", "return": "Key", "signature": "Key key(final String key, final Object value)", "full_signature": "public static Key key(final String key, final Object value)", "class_method_signature": "JavaxJson.key(final String key, final Object value)", "testcase": false, "constructor": false}, {"identifier": "key", "parameters": "(final String key)", "modifiers": "public static", "return": "KeyCursor", "signature": "KeyCursor key(final String key)", "full_signature": "public static KeyCursor key(final String key)", "class_method_signature": "JavaxJson.key(final String key)", "testcase": false, "constructor": false}, {"identifier": "arr", "parameters": "(Object... values)", "modifiers": "public static", "return": "Arr", "signature": "Arr arr(Object... values)", "full_signature": "public static Arr arr(Object... values)", "class_method_signature": "JavaxJson.arr(Object... values)", "testcase": false, "constructor": false}, {"identifier": "optObject", "parameters": "(final JsonObject json, final String key)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "Optional<JsonObject>", "signature": "Optional<JsonObject> optObject(final JsonObject json, final String key)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static Optional<JsonObject> optObject(final JsonObject json, final String key)", "class_method_signature": "JavaxJson.optObject(final JsonObject json, final String key)", "testcase": false, "constructor": false}, {"identifier": "objectOrEmpty", "parameters": "(final JsonObject json, final String key)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "JsonObject", "signature": "JsonObject objectOrEmpty(final JsonObject json, final String key)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static JsonObject objectOrEmpty(final JsonObject json, final String key)", "class_method_signature": "JavaxJson.objectOrEmpty(final JsonObject json, final String key)", "testcase": false, "constructor": false}, {"identifier": "optArray", "parameters": "(final JsonObject json, final String key)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "Optional<JsonArray>", "signature": "Optional<JsonArray> optArray(final JsonObject json, final String key)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static Optional<JsonArray> optArray(final JsonObject json, final String key)", "class_method_signature": "JavaxJson.optArray(final JsonObject json, final String key)", "testcase": false, "constructor": false}, {"identifier": "arrayOrEmpty", "parameters": "(final JsonObject json, final String key)", "modifiers": "public static", "return": "JsonArray", "signature": "JsonArray arrayOrEmpty(final JsonObject json, final String key)", "full_signature": "public static JsonArray arrayOrEmpty(final JsonObject json, final String key)", "class_method_signature": "JavaxJson.arrayOrEmpty(final JsonObject json, final String key)", "testcase": false, "constructor": false}, {"identifier": "mapArrayOfStrings", "parameters": "(final JsonArray jsonArray)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> mapArrayOfStrings(final JsonArray jsonArray)", "full_signature": "public static List<String> mapArrayOfStrings(final JsonArray jsonArray)", "class_method_signature": "JavaxJson.mapArrayOfStrings(final JsonArray jsonArray)", "testcase": false, "constructor": false}, {"identifier": "mapArrayOfStrings", "parameters": "(final JsonArray jsonArray,\n                                                final Function<String, R> mapFunction)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> mapArrayOfStrings(final JsonArray jsonArray,\n                                                final Function<String, R> mapFunction)", "full_signature": "public static List<R> mapArrayOfStrings(final JsonArray jsonArray,\n                                                final Function<String, R> mapFunction)", "class_method_signature": "JavaxJson.mapArrayOfStrings(final JsonArray jsonArray,\n                                                final Function<String, R> mapFunction)", "testcase": false, "constructor": false}, {"identifier": "mapArrayOfStrings", "parameters": "(final JsonArray jsonArray,\n                                                final Function<String, R> mapFunction,\n                                                final boolean discardNulls)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> mapArrayOfStrings(final JsonArray jsonArray,\n                                                final Function<String, R> mapFunction,\n                                                final boolean discardNulls)", "full_signature": "public static List<R> mapArrayOfStrings(final JsonArray jsonArray,\n                                                final Function<String, R> mapFunction,\n                                                final boolean discardNulls)", "class_method_signature": "JavaxJson.mapArrayOfStrings(final JsonArray jsonArray,\n                                                final Function<String, R> mapFunction,\n                                                final boolean discardNulls)", "testcase": false, "constructor": false}, {"identifier": "mapArrayOfObjects", "parameters": "(final JsonArray jsonArray,\n                                                final Function<JsonObject, R> mapFunction)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> mapArrayOfObjects(final JsonArray jsonArray,\n                                                final Function<JsonObject, R> mapFunction)", "full_signature": "public static List<R> mapArrayOfObjects(final JsonArray jsonArray,\n                                                final Function<JsonObject, R> mapFunction)", "class_method_signature": "JavaxJson.mapArrayOfObjects(final JsonArray jsonArray,\n                                                final Function<JsonObject, R> mapFunction)", "testcase": false, "constructor": false}, {"identifier": "mapArrayOfObjects", "parameters": "(final JsonArray jsonArray,\n                                                final Function<JsonObject, R> mapFunction,\n                                                final boolean discardNulls)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> mapArrayOfObjects(final JsonArray jsonArray,\n                                                final Function<JsonObject, R> mapFunction,\n                                                final boolean discardNulls)", "full_signature": "public static List<R> mapArrayOfObjects(final JsonArray jsonArray,\n                                                final Function<JsonObject, R> mapFunction,\n                                                final boolean discardNulls)", "class_method_signature": "JavaxJson.mapArrayOfObjects(final JsonArray jsonArray,\n                                                final Function<JsonObject, R> mapFunction,\n                                                final boolean discardNulls)", "testcase": false, "constructor": false}, {"identifier": "mapObjectValues", "parameters": "(final JsonObject jsonObject,\n                                              final BiFunction<String, JsonObject, R> mapBiFunction,\n                                              final boolean discardNulls)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> mapObjectValues(final JsonObject jsonObject,\n                                              final BiFunction<String, JsonObject, R> mapBiFunction,\n                                              final boolean discardNulls)", "full_signature": "public static List<R> mapObjectValues(final JsonObject jsonObject,\n                                              final BiFunction<String, JsonObject, R> mapBiFunction,\n                                              final boolean discardNulls)", "class_method_signature": "JavaxJson.mapObjectValues(final JsonObject jsonObject,\n                                              final BiFunction<String, JsonObject, R> mapBiFunction,\n                                              final boolean discardNulls)", "testcase": false, "constructor": false}, {"identifier": "parseFromArray", "parameters": "(final @NotNull JsonArray jsonArray,\n                                             final @NotNull Fun.ThrowingFunction<String, R> parser,\n                                             final @Nullable BiConsumer<String, Exception> errorConsumer)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "List<R>", "signature": "List<R> parseFromArray(final @NotNull JsonArray jsonArray,\n                                             final @NotNull Fun.ThrowingFunction<String, R> parser,\n                                             final @Nullable BiConsumer<String, Exception> errorConsumer)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static List<R> parseFromArray(final @NotNull JsonArray jsonArray,\n                                             final @NotNull Fun.ThrowingFunction<String, R> parser,\n                                             final @Nullable BiConsumer<String, Exception> errorConsumer)", "class_method_signature": "JavaxJson.parseFromArray(final @NotNull JsonArray jsonArray,\n                                             final @NotNull Fun.ThrowingFunction<String, R> parser,\n                                             final @Nullable BiConsumer<String, Exception> errorConsumer)", "testcase": false, "constructor": false}, {"identifier": "hasNonNull", "parameters": "(final @NotNull JsonObject json, final String key)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasNonNull(final @NotNull JsonObject json, final String key)", "full_signature": "public static boolean hasNonNull(final @NotNull JsonObject json, final String key)", "class_method_signature": "JavaxJson.hasNonNull(final @NotNull JsonObject json, final String key)", "testcase": false, "constructor": false}], "file": "api/src/main/java/net/adamcin/oakpal/api/JavaxJson.java"}, "focal_method": {"identifier": "wrap", "parameters": "(final Object object)", "modifiers": "public static", "return": "JsonValue", "body": "public static JsonValue wrap(final Object object) {\n        if (object == null) {\n            return JsonValue.NULL;\n        } else if (object instanceof JsonValue) {\n            return (JsonValue) object;\n        } else if (object instanceof HasValue) {\n            return ((HasValue) object).toValue().get();\n        } else if (object instanceof JsonObjectConvertible) {\n            return ((JsonObjectConvertible) object).toJson();\n        } else if (object instanceof JsonArrayConvertible) {\n            return ((JsonArrayConvertible) object).toJson();\n        } else if (object instanceof String) {\n            return Json.createArrayBuilder().add((String) object).build().get(0);\n        } else if (object instanceof Calendar) {\n            return wrap(ISO8601.format((Calendar) object));\n        } else if (object instanceof Boolean) {\n            return ((Boolean) object) ? JsonValue.TRUE : JsonValue.FALSE;\n        } else if (object instanceof Number) {\n            if (object instanceof Integer) {\n                return Json.createArrayBuilder().add((Integer) object).build().get(0);\n            } else if (object instanceof Long) {\n                return Json.createArrayBuilder().add((Long) object).build().get(0);\n            } else if (object instanceof Double) {\n                return Json.createArrayBuilder().add((Double) object).build().get(0);\n            } else if (object instanceof BigInteger) {\n                return Json.createArrayBuilder().add((BigInteger) object).build().get(0);\n            } else if (object instanceof BigDecimal) {\n                return Json.createArrayBuilder().add((BigDecimal) object).build().get(0);\n            } else {\n                // interesting... javax.json doesn't provide support for floats alongside doubles,\n                // but it does support both ints and longs.\n                return Json.createArrayBuilder().add(new BigDecimal(object.toString())).build().get(0);\n            }\n        } else if (object instanceof Object[]) {\n            return Arrays.stream((Object[]) object).map(JavaxJson::wrap)\n                    .collect(JsonCollectors.toJsonArray());\n        } else if (object.getClass().isArray() && object.getClass().getComponentType().isPrimitive()) {\n            if (object instanceof int[]) {\n                return Arrays.stream((int[]) object).mapToObj(JavaxJson::wrap).collect(JsonCollectors.toJsonArray());\n            } else if (object instanceof long[]) {\n                return Arrays.stream((long[]) object).mapToObj(JavaxJson::wrap).collect(JsonCollectors.toJsonArray());\n            } else if (object instanceof double[]) {\n                return Arrays.stream((double[]) object).mapToObj(JavaxJson::wrap).collect(JsonCollectors.toJsonArray());\n            } else if (object instanceof char[]) {\n                return wrap(String.valueOf((char[]) object));\n            } else if (object instanceof byte[]) {\n                return wrap(Base64.getUrlEncoder().encodeToString((byte[]) object));\n            } else if (object instanceof float[]) {\n                // interesting... there is an IntStream and a LongStream,\n                // and there is a DoubleStream, but there is no FloatStream\n                final float[] floats = (float[]) object;\n                final double[] doubles = new double[floats.length];\n                for (int i = 0; i < floats.length; i++) {\n                    doubles[i] = floats[i];\n                }\n                return wrap(doubles);\n            } else if (object instanceof boolean[]) {\n                // zero support anywhere for boolean arrays. just box and throw over\n                final boolean[] booleans = (boolean[]) object;\n                final Boolean[] boxed = new Boolean[booleans.length];\n                for (int i = 0; i < booleans.length; i++) {\n                    boxed[i] = booleans[i];\n                }\n                return wrap(boxed);\n            }\n        } else if (object instanceof Map) {\n            return ((Map<?, ?>) object).entrySet().stream()\n                    .collect(Collectors.toMap(\n                            entry -> String.valueOf(entry.getKey()),\n                            entry -> wrap(entry.getValue()))).entrySet().stream()\n                    .collect(JsonCollectors.toJsonObject());\n        } else if (object instanceof Collection) {\n            return ((Collection<?>) object).stream().map(JavaxJson::wrap)\n                    .collect(JsonCollectors.toJsonArray());\n        }\n        return Json.createArrayBuilder().add(String.valueOf(object)).build().get(0);\n    }", "signature": "JsonValue wrap(final Object object)", "full_signature": "public static JsonValue wrap(final Object object)", "class_method_signature": "JavaxJson.wrap(final Object object)", "testcase": false, "constructor": false, "invocations": ["get", "toValue", "toJson", "toJson", "get", "build", "add", "createArrayBuilder", "wrap", "format", "get", "build", "add", "createArrayBuilder", "get", "build", "add", "createArrayBuilder", "get", "build", "add", "createArrayBuilder", "get", "build", "add", "createArrayBuilder", "get", "build", "add", "createArrayBuilder", "get", "build", "add", "createArrayBuilder", "toString", "collect", "map", "stream", "toJsonArray", "isArray", "getClass", "isPrimitive", "getComponentType", "getClass", "collect", "mapToObj", "stream", "toJsonArray", "collect", "mapToObj", "stream", "toJsonArray", "collect", "mapToObj", "stream", "toJsonArray", "wrap", "valueOf", "wrap", "encodeToString", "getUrlEncoder", "wrap", "wrap", "collect", "stream", "entrySet", "collect", "stream", "entrySet", "toMap", "valueOf", "getKey", "wrap", "getValue", "toJsonObject", "collect", "map", "stream", "toJsonArray", "get", "build", "add", "createArrayBuilder", "valueOf"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}