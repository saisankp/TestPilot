{"test_class": {"identifier": "ObjectHashMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-core/src/test/java/org/drools/core/util/ObjectHashMapTest.java"}, "test_case": {"identifier": "testEqualityWithResize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEqualityWithResize() {        \n        KieBaseConfiguration kconf = KnowledgeBaseFactory.newKnowledgeBaseConfiguration();\n        kconf.setOption( EqualityBehaviorOption.EQUALITY );\n        KieBase kbase = KnowledgeBaseFactory.newKnowledgeBase(kconf);\n        KieSession ksession = kbase.newKieSession();\n        \n        int length = 1 * 300 * 1000 ;\n        \n        List<FactHandle> handles = new ArrayList<FactHandle>(1000);\n        List<String> objects = new ArrayList<String>(1000);\n        for ( int i = 0; i < length; i++) { \n            String s = getPropertyName(i);\n            FactHandle handle = ksession.insert( s );\n            objects.add( s );\n            handles.add( handle );\n        }\n        \n        for ( int i = 0; i < length; i++) { \n            String s = objects.get(i);\n            FactHandle handle = handles.get( i );\n            assertEquals( s, ksession.getObject( handle ) );            \n            assertSame( handle, ksession.getFactHandle( s ) );\n            \n            // now check with disconnected facthandle\n            handle = DefaultFactHandle.createFromExternalFormat(((DefaultFactHandle)handle).toExternalForm());\n            assertEquals( s, ksession.getObject( handle ) );\n        }\n        \n        for ( int i = 0; i < length; i++) { \n            FactHandle handle = handles.get( i );         \n            \n            // now retract with disconnected facthandle\n            handle = DefaultFactHandle.createFromExternalFormat(((DefaultFactHandle)handle).toExternalForm());\n            ksession.retract( handle );\n            assertEquals( length - i -1, ksession.getObjects().size() );\n            assertEquals( length - i -1, ksession.getFactHandles().size() );            \n        }        \n        \n        assertEquals( 0, ksession.getObjects().size() );\n        assertEquals( 0, ksession.getFactHandles().size() );        \n    }", "signature": "void testEqualityWithResize()", "full_signature": "@Test public void testEqualityWithResize()", "class_method_signature": "ObjectHashMapTest.testEqualityWithResize()", "testcase": true, "constructor": false, "invocations": ["newKnowledgeBaseConfiguration", "setOption", "newKnowledgeBase", "newKieSession", "getPropertyName", "insert", "add", "add", "get", "get", "assertEquals", "getObject", "assertSame", "getFactHandle", "createFromExternalFormat", "toExternalForm", "assertEquals", "getObject", "get", "createFromExternalFormat", "toExternalForm", "retract", "assertEquals", "size", "getObjects", "assertEquals", "size", "getFactHandles", "assertEquals", "size", "getObjects", "assertEquals", "size", "getFactHandles"]}, "focal_class": {"identifier": "ObjectHashMap", "superclass": "extends AbstractHashTable", "interfaces": "implements Externalizable", "fields": [{"original_string": "private static final long serialVersionUID = 510l;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 510l", "var_name": "serialVersionUID"}], "methods": [{"identifier": "ObjectHashMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " ObjectHashMap()", "full_signature": "public  ObjectHashMap()", "class_method_signature": "ObjectHashMap.ObjectHashMap()", "testcase": false, "constructor": true}, {"identifier": "ObjectHashMap", "parameters": "(final int capacity,\n                         final float loadFactor)", "modifiers": "public", "return": "", "signature": " ObjectHashMap(final int capacity,\n                         final float loadFactor)", "full_signature": "public  ObjectHashMap(final int capacity,\n                         final float loadFactor)", "class_method_signature": "ObjectHashMap.ObjectHashMap(final int capacity,\n                         final float loadFactor)", "testcase": false, "constructor": true}, {"identifier": "ObjectHashMap", "parameters": "(final Entry[] table)", "modifiers": "public", "return": "", "signature": " ObjectHashMap(final Entry[] table)", "full_signature": "public  ObjectHashMap(final Entry[] table)", "class_method_signature": "ObjectHashMap.ObjectHashMap(final Entry[] table)", "testcase": false, "constructor": true}, {"identifier": "ObjectHashMap", "parameters": "(final float loadFactor,\n                         final Entry[] table)", "modifiers": "public", "return": "", "signature": " ObjectHashMap(final float loadFactor,\n                         final Entry[] table)", "full_signature": "public  ObjectHashMap(final float loadFactor,\n                         final Entry[] table)", "class_method_signature": "ObjectHashMap.ObjectHashMap(final float loadFactor,\n                         final Entry[] table)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(final Object key,\n                      final Object value)", "modifiers": "public", "return": "Object", "signature": "Object put(final Object key,\n                      final Object value)", "full_signature": "public Object put(final Object key,\n                      final Object value)", "class_method_signature": "ObjectHashMap.put(final Object key,\n                      final Object value)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final Object key,\n                      final Object value,\n                      final boolean checkExists)", "modifiers": "public", "return": "Object", "signature": "Object put(final Object key,\n                      final Object value,\n                      final boolean checkExists)", "full_signature": "public Object put(final Object key,\n                      final Object value,\n                      final boolean checkExists)", "class_method_signature": "ObjectHashMap.put(final Object key,\n                      final Object value,\n                      final boolean checkExists)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final Object key)", "modifiers": "public", "return": "Object", "signature": "Object get(final Object key)", "full_signature": "public Object get(final Object key)", "class_method_signature": "ObjectHashMap.get(final Object key)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final Object key)", "modifiers": "public", "return": "Object", "signature": "Object remove(final Object key)", "full_signature": "public Object remove(final Object key)", "class_method_signature": "ObjectHashMap.remove(final Object key)", "testcase": false, "constructor": false}, {"identifier": "getBucket", "parameters": "(final Object object)", "modifiers": "public", "return": "Entry", "signature": "Entry getBucket(final Object object)", "full_signature": "public Entry getBucket(final Object object)", "class_method_signature": "ObjectHashMap.getBucket(final Object object)", "testcase": false, "constructor": false}, {"identifier": "getResizeHashcode", "parameters": "(Entry entry)", "modifiers": "@Override public", "return": "int", "signature": "int getResizeHashcode(Entry entry)", "full_signature": "@Override public int getResizeHashcode(Entry entry)", "class_method_signature": "ObjectHashMap.getResizeHashcode(Entry entry)", "testcase": false, "constructor": false}], "file": "drools-core/src/main/java/org/drools/core/util/ObjectHashMap.java"}, "focal_method": {"identifier": "get", "parameters": "(final Object key)", "modifiers": "public", "return": "Object", "body": "public Object get(final Object key) {\n        final int hashCode = this.comparator.hashCodeOf( key );\n        final int index = indexOf( hashCode,\n                                   this.table.length );\n\n        ObjectEntry current = (ObjectEntry) this.table[index];\n        while ( current != null ) {\n            if ( hashCode == current.cachedHashCode && this.comparator.areEqual(key,\n                                                                                current.key ) ) {\n                return current.value;\n            }\n            current = (ObjectEntry) current.getNext();\n        }\n        return null;\n    }", "signature": "Object get(final Object key)", "full_signature": "public Object get(final Object key)", "class_method_signature": "ObjectHashMap.get(final Object key)", "testcase": false, "constructor": false, "invocations": ["hashCodeOf", "indexOf", "areEqual", "getNext"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}