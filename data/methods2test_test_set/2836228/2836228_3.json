{"test_class": {"identifier": "EntityGraphTest", "superclass": "extends AbstractTestBase", "interfaces": "", "fields": [{"original_string": "private ConfigurationStore store = ConfigurationStore.get();", "modifier": "private", "type": "ConfigurationStore", "declarator": "store = ConfigurationStore.get()", "var_name": "store"}, {"original_string": "private EntityGraph graph = EntityGraph.get();", "modifier": "private", "type": "EntityGraph", "declarator": "graph = EntityGraph.get()", "var_name": "graph"}], "file": "common/src/test/java/org/apache/ivory/entity/v0/EntityGraphTest.java"}, "test_case": {"identifier": "testOnRemove2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnRemove2() throws Exception {\n\n        Process p1 = new Process();\n        p1.setName(\"ap1\");\n        Process p2 = new Process();\n        p2.setName(\"ap2\");\n        Cluster cluster = new Cluster();\n        cluster.setName(\"ac1\");\n        cluster.setColo(\"3\");\n        Feed f1 = addInput(p1, \"af1\", cluster);\n        Feed f3 = addOutput(p1, \"af3\", cluster);\n        Feed f2 = addOutput(p2, \"af2\", cluster);\n        attachInput(p2, f3);\n        org.apache.ivory.entity.v0.process.Cluster processCluster = new org.apache.ivory.entity.v0.process.Cluster();\n        processCluster.setName(\"ac1\");\n        p1.setClusters(new org.apache.ivory.entity.v0.process.Clusters());\n        p1.getClusters().getClusters().add(processCluster);\n        processCluster = new org.apache.ivory.entity.v0.process.Cluster();\n        processCluster.setName(\"ac1\");\n        p2.setClusters(new org.apache.ivory.entity.v0.process.Clusters());\n        p2.getClusters().getClusters().add(processCluster);\n\n        store.publish(EntityType.CLUSTER, cluster);\n        store.publish(EntityType.FEED, f1);\n        store.publish(EntityType.FEED, f2);\n        store.publish(EntityType.FEED, f3);\n        store.publish(EntityType.PROCESS, p1);\n        store.publish(EntityType.PROCESS, p2);\n\n        Set<Entity> entities = graph.getDependents(p1);\n        Assert.assertEquals(entities.size(), 3);\n        Assert.assertTrue(entities.contains(cluster));\n        Assert.assertTrue(entities.contains(f1));\n        Assert.assertTrue(entities.contains(f3));\n\n        entities = graph.getDependents(p2);\n        Assert.assertEquals(entities.size(), 3);\n        Assert.assertTrue(entities.contains(cluster));\n        Assert.assertTrue(entities.contains(f2));\n        Assert.assertTrue(entities.contains(f3));\n\n        entities = graph.getDependents(f1);\n        Assert.assertEquals(entities.size(), 2);\n        Assert.assertTrue(entities.contains(p1));\n        Assert.assertTrue(entities.contains(cluster));\n\n        entities = graph.getDependents(f2);\n        Assert.assertEquals(entities.size(), 2);\n        Assert.assertTrue(entities.contains(p2));\n        Assert.assertTrue(entities.contains(cluster));\n\n        entities = graph.getDependents(f3);\n        Assert.assertEquals(entities.size(), 3);\n        Assert.assertTrue(entities.contains(p2));\n        Assert.assertTrue(entities.contains(p1));\n        Assert.assertTrue(entities.contains(cluster));\n\n        entities = graph.getDependents(cluster);\n        Assert.assertEquals(entities.size(), 5);\n        Assert.assertTrue(entities.contains(p1));\n        Assert.assertTrue(entities.contains(p2));\n        Assert.assertTrue(entities.contains(f1));\n        Assert.assertTrue(entities.contains(f2));\n        Assert.assertTrue(entities.contains(f3));\n\n        store.remove(EntityType.PROCESS, p2.getName());\n        store.remove(EntityType.FEED, f2.getName());\n\n        entities = graph.getDependents(p1);\n        Assert.assertEquals(entities.size(), 3);\n        Assert.assertTrue(entities.contains(cluster));\n        Assert.assertTrue(entities.contains(f1));\n        Assert.assertTrue(entities.contains(f3));\n\n        entities = graph.getDependents(p2);\n        Assert.assertTrue(entities == null);\n\n        entities = graph.getDependents(f1);\n        Assert.assertEquals(entities.size(), 2);\n        Assert.assertTrue(entities.contains(p1));\n        Assert.assertTrue(entities.contains(cluster));\n\n        entities = graph.getDependents(f2);\n        Assert.assertTrue(entities == null);\n\n        entities = graph.getDependents(f3);\n        Assert.assertEquals(entities.size(), 2);\n        Assert.assertTrue(entities.contains(p1));\n        Assert.assertTrue(entities.contains(cluster));\n\n        entities = graph.getDependents(cluster);\n        Assert.assertEquals(entities.size(), 3);\n        Assert.assertTrue(entities.contains(p1));\n        Assert.assertTrue(entities.contains(f1));\n        Assert.assertTrue(entities.contains(f3));\n    }", "signature": "void testOnRemove2()", "full_signature": "@Test public void testOnRemove2()", "class_method_signature": "EntityGraphTest.testOnRemove2()", "testcase": true, "constructor": false, "invocations": ["setName", "setName", "setName", "setColo", "addInput", "addOutput", "addOutput", "attachInput", "setName", "setClusters", "add", "getClusters", "getClusters", "setName", "setClusters", "add", "getClusters", "getClusters", "publish", "publish", "publish", "publish", "publish", "publish", "getDependents", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "getDependents", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "getDependents", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "getDependents", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "getDependents", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "getDependents", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "remove", "getName", "remove", "getName", "getDependents", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "getDependents", "assertTrue", "getDependents", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "getDependents", "assertTrue", "getDependents", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "getDependents", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "EntityGraph", "superclass": "", "interfaces": "implements ConfigurationChangeListener", "fields": [{"original_string": "private static Logger LOG = Logger.getLogger(EntityGraph.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = Logger.getLogger(EntityGraph.class)", "var_name": "LOG"}, {"original_string": "private static EntityGraph instance = new EntityGraph();", "modifier": "private static", "type": "EntityGraph", "declarator": "instance = new EntityGraph()", "var_name": "instance"}, {"original_string": "private Map<Node, Set<Node>> graph = new ConcurrentHashMap<Node, Set<Node>>();", "modifier": "private", "type": "Map<Node, Set<Node>>", "declarator": "graph = new ConcurrentHashMap<Node, Set<Node>>()", "var_name": "graph"}], "methods": [{"identifier": "EntityGraph", "parameters": "()", "modifiers": "private", "return": "", "signature": " EntityGraph()", "full_signature": "private  EntityGraph()", "class_method_signature": "EntityGraph.EntityGraph()", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "public static", "return": "EntityGraph", "signature": "EntityGraph get()", "full_signature": "public static EntityGraph get()", "class_method_signature": "EntityGraph.get()", "testcase": false, "constructor": false}, {"identifier": "getDependents", "parameters": "(Entity entity)", "modifiers": "public", "return": "Set<Entity>", "signature": "Set<Entity> getDependents(Entity entity)", "full_signature": "public Set<Entity> getDependents(Entity entity)", "class_method_signature": "EntityGraph.getDependents(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "onAdd", "parameters": "(Entity entity)", "modifiers": "@Override public", "return": "void", "signature": "void onAdd(Entity entity)", "full_signature": "@Override public void onAdd(Entity entity)", "class_method_signature": "EntityGraph.onAdd(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "onRemove", "parameters": "(Entity entity)", "modifiers": "@Override public", "return": "void", "signature": "void onRemove(Entity entity)", "full_signature": "@Override public void onRemove(Entity entity)", "class_method_signature": "EntityGraph.onRemove(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "onChange", "parameters": "(Entity oldEntity, Entity newEntity)", "modifiers": "@Override public", "return": "void", "signature": "void onChange(Entity oldEntity, Entity newEntity)", "full_signature": "@Override public void onChange(Entity oldEntity, Entity newEntity)", "class_method_signature": "EntityGraph.onChange(Entity oldEntity, Entity newEntity)", "testcase": false, "constructor": false}, {"identifier": "getEdgesFor", "parameters": "(Process process)", "modifiers": "private", "return": "Map<Node, Set<Node>>", "signature": "Map<Node, Set<Node>> getEdgesFor(Process process)", "full_signature": "private Map<Node, Set<Node>> getEdgesFor(Process process)", "class_method_signature": "EntityGraph.getEdgesFor(Process process)", "testcase": false, "constructor": false}, {"identifier": "getEdgesFor", "parameters": "(Feed feed)", "modifiers": "private", "return": "Map<Node, Set<Node>>", "signature": "Map<Node, Set<Node>> getEdgesFor(Feed feed)", "full_signature": "private Map<Node, Set<Node>> getEdgesFor(Feed feed)", "class_method_signature": "EntityGraph.getEdgesFor(Feed feed)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/apache/ivory/entity/v0/EntityGraph.java"}, "focal_method": {"identifier": "getDependents", "parameters": "(Entity entity)", "modifiers": "public", "return": "Set<Entity>", "body": "public Set<Entity> getDependents(Entity entity) throws IvoryException {\n        Node entityNode = new Node(entity.getEntityType(), entity.getName());\n        if (graph.containsKey(entityNode)) {\n            ConfigurationStore store = ConfigurationStore.get();\n            Set<Entity> dependents = new HashSet<Entity>();\n            for (Node node : graph.get(entityNode)) {\n                Entity dependentEntity = store.get(node.type, node.name);\n                assert dependentEntity != null : \"Unable to find \" + node;\n                dependents.add(dependentEntity);\n            }\n            return dependents;\n        } else {\n            return null;\n        }\n    }", "signature": "Set<Entity> getDependents(Entity entity)", "full_signature": "public Set<Entity> getDependents(Entity entity)", "class_method_signature": "EntityGraph.getDependents(Entity entity)", "testcase": false, "constructor": false, "invocations": ["getEntityType", "getName", "containsKey", "get", "get", "get", "add"]}, "repository": {"repo_id": 2836228, "url": "https://github.com/sriksun/Ivory", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 28, "size": 11708, "license": "licensed"}}