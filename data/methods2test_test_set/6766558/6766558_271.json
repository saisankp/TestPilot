{"test_class": {"identifier": "HystrixThreadPoolMetricsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final HystrixCommandGroupKey groupKey = HystrixCommandGroupKey.Factory.asKey(\"HystrixThreadPoolMetrics-UnitTest\");", "modifier": "private static final", "type": "HystrixCommandGroupKey", "declarator": "groupKey = HystrixCommandGroupKey.Factory.asKey(\"HystrixThreadPoolMetrics-UnitTest\")", "var_name": "groupKey"}, {"original_string": "private static final HystrixThreadPoolKey tpKey = HystrixThreadPoolKey.Factory.asKey(\"HystrixThreadPoolMetrics-ThreadPool\");", "modifier": "private static final", "type": "HystrixThreadPoolKey", "declarator": "tpKey = HystrixThreadPoolKey.Factory.asKey(\"HystrixThreadPoolMetrics-ThreadPool\")", "var_name": "tpKey"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/HystrixThreadPoolMetricsTest.java"}, "test_case": {"identifier": "shouldYieldNoExecutedTasksOnStartup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldYieldNoExecutedTasksOnStartup() throws Exception {\n        //given\n        final Collection<HystrixThreadPoolMetrics> instances = HystrixThreadPoolMetrics.getInstances();\n\n        //then\n        assertEquals(0, instances.size());\n\n    }", "signature": "void shouldYieldNoExecutedTasksOnStartup()", "full_signature": "@Test public void shouldYieldNoExecutedTasksOnStartup()", "class_method_signature": "HystrixThreadPoolMetricsTest.shouldYieldNoExecutedTasksOnStartup()", "testcase": true, "constructor": false, "invocations": ["getInstances", "assertEquals", "size"]}, "focal_class": {"identifier": "HystrixThreadPoolMetrics", "superclass": "extends HystrixMetrics", "interfaces": "", "fields": [{"original_string": "private static final HystrixEventType[] ALL_COMMAND_EVENT_TYPES = HystrixEventType.values();", "modifier": "private static final", "type": "HystrixEventType[]", "declarator": "ALL_COMMAND_EVENT_TYPES = HystrixEventType.values()", "var_name": "ALL_COMMAND_EVENT_TYPES"}, {"original_string": "private static final HystrixEventType.ThreadPool[] ALL_THREADPOOL_EVENT_TYPES = HystrixEventType.ThreadPool.values();", "modifier": "private static final", "type": "HystrixEventType.ThreadPool[]", "declarator": "ALL_THREADPOOL_EVENT_TYPES = HystrixEventType.ThreadPool.values()", "var_name": "ALL_THREADPOOL_EVENT_TYPES"}, {"original_string": "private static final int NUMBER_THREADPOOL_EVENT_TYPES = ALL_THREADPOOL_EVENT_TYPES.length;", "modifier": "private static final", "type": "int", "declarator": "NUMBER_THREADPOOL_EVENT_TYPES = ALL_THREADPOOL_EVENT_TYPES.length", "var_name": "NUMBER_THREADPOOL_EVENT_TYPES"}, {"original_string": "private static final ConcurrentHashMap<String, HystrixThreadPoolMetrics> metrics = new ConcurrentHashMap<String, HystrixThreadPoolMetrics>();", "modifier": "private static final", "type": "ConcurrentHashMap<String, HystrixThreadPoolMetrics>", "declarator": "metrics = new ConcurrentHashMap<String, HystrixThreadPoolMetrics>()", "var_name": "metrics"}, {"original_string": "public static final Func2<long[], HystrixCommandCompletion, long[]> appendEventToBucket\n            = new Func2<long[], HystrixCommandCompletion, long[]>() {\n        @Override\n        public long[] call(long[] initialCountArray, HystrixCommandCompletion execution) {\n            ExecutionResult.EventCounts eventCounts = execution.getEventCounts();\n            for (HystrixEventType eventType: ALL_COMMAND_EVENT_TYPES) {\n                long eventCount = eventCounts.getCount(eventType);\n                HystrixEventType.ThreadPool threadPoolEventType = HystrixEventType.ThreadPool.from(eventType);\n                if (threadPoolEventType != null) {\n                    initialCountArray[threadPoolEventType.ordinal()] += eventCount;\n                }\n            }\n            return initialCountArray;\n        }\n    };", "modifier": "public static final", "type": "Func2<long[], HystrixCommandCompletion, long[]>", "declarator": "appendEventToBucket\n            = new Func2<long[], HystrixCommandCompletion, long[]>() {\n        @Override\n        public long[] call(long[] initialCountArray, HystrixCommandCompletion execution) {\n            ExecutionResult.EventCounts eventCounts = execution.getEventCounts();\n            for (HystrixEventType eventType: ALL_COMMAND_EVENT_TYPES) {\n                long eventCount = eventCounts.getCount(eventType);\n                HystrixEventType.ThreadPool threadPoolEventType = HystrixEventType.ThreadPool.from(eventType);\n                if (threadPoolEventType != null) {\n                    initialCountArray[threadPoolEventType.ordinal()] += eventCount;\n                }\n            }\n            return initialCountArray;\n        }\n    }", "var_name": "appendEventToBucket"}, {"original_string": "public static final Func2<long[], long[], long[]> counterAggregator = new Func2<long[], long[], long[]>() {\n        @Override\n        public long[] call(long[] cumulativeEvents, long[] bucketEventCounts) {\n            for (int i = 0; i < NUMBER_THREADPOOL_EVENT_TYPES; i++) {\n                cumulativeEvents[i] += bucketEventCounts[i];\n            }\n            return cumulativeEvents;\n        }\n    };", "modifier": "public static final", "type": "Func2<long[], long[], long[]>", "declarator": "counterAggregator = new Func2<long[], long[], long[]>() {\n        @Override\n        public long[] call(long[] cumulativeEvents, long[] bucketEventCounts) {\n            for (int i = 0; i < NUMBER_THREADPOOL_EVENT_TYPES; i++) {\n                cumulativeEvents[i] += bucketEventCounts[i];\n            }\n            return cumulativeEvents;\n        }\n    }", "var_name": "counterAggregator"}, {"original_string": "private final HystrixThreadPoolKey threadPoolKey;", "modifier": "private final", "type": "HystrixThreadPoolKey", "declarator": "threadPoolKey", "var_name": "threadPoolKey"}, {"original_string": "private final ThreadPoolExecutor threadPool;", "modifier": "private final", "type": "ThreadPoolExecutor", "declarator": "threadPool", "var_name": "threadPool"}, {"original_string": "private final HystrixThreadPoolProperties properties;", "modifier": "private final", "type": "HystrixThreadPoolProperties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private final AtomicInteger concurrentExecutionCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "concurrentExecutionCount = new AtomicInteger()", "var_name": "concurrentExecutionCount"}, {"original_string": "private final RollingThreadPoolEventCounterStream rollingCounterStream;", "modifier": "private final", "type": "RollingThreadPoolEventCounterStream", "declarator": "rollingCounterStream", "var_name": "rollingCounterStream"}, {"original_string": "private final CumulativeThreadPoolEventCounterStream cumulativeCounterStream;", "modifier": "private final", "type": "CumulativeThreadPoolEventCounterStream", "declarator": "cumulativeCounterStream", "var_name": "cumulativeCounterStream"}, {"original_string": "private final RollingThreadPoolMaxConcurrencyStream rollingThreadPoolMaxConcurrencyStream;", "modifier": "private final", "type": "RollingThreadPoolMaxConcurrencyStream", "declarator": "rollingThreadPoolMaxConcurrencyStream", "var_name": "rollingThreadPoolMaxConcurrencyStream"}], "methods": [{"identifier": "getInstance", "parameters": "(HystrixThreadPoolKey key, ThreadPoolExecutor threadPool, HystrixThreadPoolProperties properties)", "modifiers": "public static", "return": "HystrixThreadPoolMetrics", "signature": "HystrixThreadPoolMetrics getInstance(HystrixThreadPoolKey key, ThreadPoolExecutor threadPool, HystrixThreadPoolProperties properties)", "full_signature": "public static HystrixThreadPoolMetrics getInstance(HystrixThreadPoolKey key, ThreadPoolExecutor threadPool, HystrixThreadPoolProperties properties)", "class_method_signature": "HystrixThreadPoolMetrics.getInstance(HystrixThreadPoolKey key, ThreadPoolExecutor threadPool, HystrixThreadPoolProperties properties)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(HystrixThreadPoolKey key)", "modifiers": "public static", "return": "HystrixThreadPoolMetrics", "signature": "HystrixThreadPoolMetrics getInstance(HystrixThreadPoolKey key)", "full_signature": "public static HystrixThreadPoolMetrics getInstance(HystrixThreadPoolKey key)", "class_method_signature": "HystrixThreadPoolMetrics.getInstance(HystrixThreadPoolKey key)", "testcase": false, "constructor": false}, {"identifier": "getInstances", "parameters": "()", "modifiers": "public static", "return": "Collection<HystrixThreadPoolMetrics>", "signature": "Collection<HystrixThreadPoolMetrics> getInstances()", "full_signature": "public static Collection<HystrixThreadPoolMetrics> getInstances()", "class_method_signature": "HystrixThreadPoolMetrics.getInstances()", "testcase": false, "constructor": false}, {"identifier": "hasExecutedCommandsOnThread", "parameters": "(HystrixThreadPoolMetrics threadPoolMetrics)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasExecutedCommandsOnThread(HystrixThreadPoolMetrics threadPoolMetrics)", "full_signature": "private static boolean hasExecutedCommandsOnThread(HystrixThreadPoolMetrics threadPoolMetrics)", "class_method_signature": "HystrixThreadPoolMetrics.hasExecutedCommandsOnThread(HystrixThreadPoolMetrics threadPoolMetrics)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "static", "return": "void", "signature": "void reset()", "full_signature": "static void reset()", "class_method_signature": "HystrixThreadPoolMetrics.reset()", "testcase": false, "constructor": false}, {"identifier": "HystrixThreadPoolMetrics", "parameters": "(HystrixThreadPoolKey threadPoolKey, ThreadPoolExecutor threadPool, HystrixThreadPoolProperties properties)", "modifiers": "private", "return": "", "signature": " HystrixThreadPoolMetrics(HystrixThreadPoolKey threadPoolKey, ThreadPoolExecutor threadPool, HystrixThreadPoolProperties properties)", "full_signature": "private  HystrixThreadPoolMetrics(HystrixThreadPoolKey threadPoolKey, ThreadPoolExecutor threadPool, HystrixThreadPoolProperties properties)", "class_method_signature": "HystrixThreadPoolMetrics.HystrixThreadPoolMetrics(HystrixThreadPoolKey threadPoolKey, ThreadPoolExecutor threadPool, HystrixThreadPoolProperties properties)", "testcase": false, "constructor": true}, {"identifier": "getThreadPool", "parameters": "()", "modifiers": "public", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor getThreadPool()", "full_signature": "public ThreadPoolExecutor getThreadPool()", "class_method_signature": "HystrixThreadPoolMetrics.getThreadPool()", "testcase": false, "constructor": false}, {"identifier": "getThreadPoolKey", "parameters": "()", "modifiers": "public", "return": "HystrixThreadPoolKey", "signature": "HystrixThreadPoolKey getThreadPoolKey()", "full_signature": "public HystrixThreadPoolKey getThreadPoolKey()", "class_method_signature": "HystrixThreadPoolMetrics.getThreadPoolKey()", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "public", "return": "HystrixThreadPoolProperties", "signature": "HystrixThreadPoolProperties getProperties()", "full_signature": "public HystrixThreadPoolProperties getProperties()", "class_method_signature": "HystrixThreadPoolMetrics.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getCurrentActiveCount", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number getCurrentActiveCount()", "full_signature": "public Number getCurrentActiveCount()", "class_method_signature": "HystrixThreadPoolMetrics.getCurrentActiveCount()", "testcase": false, "constructor": false}, {"identifier": "getCurrentCompletedTaskCount", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number getCurrentCompletedTaskCount()", "full_signature": "public Number getCurrentCompletedTaskCount()", "class_method_signature": "HystrixThreadPoolMetrics.getCurrentCompletedTaskCount()", "testcase": false, "constructor": false}, {"identifier": "getCurrentCorePoolSize", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number getCurrentCorePoolSize()", "full_signature": "public Number getCurrentCorePoolSize()", "class_method_signature": "HystrixThreadPoolMetrics.getCurrentCorePoolSize()", "testcase": false, "constructor": false}, {"identifier": "getCurrentLargestPoolSize", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number getCurrentLargestPoolSize()", "full_signature": "public Number getCurrentLargestPoolSize()", "class_method_signature": "HystrixThreadPoolMetrics.getCurrentLargestPoolSize()", "testcase": false, "constructor": false}, {"identifier": "getCurrentMaximumPoolSize", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number getCurrentMaximumPoolSize()", "full_signature": "public Number getCurrentMaximumPoolSize()", "class_method_signature": "HystrixThreadPoolMetrics.getCurrentMaximumPoolSize()", "testcase": false, "constructor": false}, {"identifier": "getCurrentPoolSize", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number getCurrentPoolSize()", "full_signature": "public Number getCurrentPoolSize()", "class_method_signature": "HystrixThreadPoolMetrics.getCurrentPoolSize()", "testcase": false, "constructor": false}, {"identifier": "getCurrentTaskCount", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number getCurrentTaskCount()", "full_signature": "public Number getCurrentTaskCount()", "class_method_signature": "HystrixThreadPoolMetrics.getCurrentTaskCount()", "testcase": false, "constructor": false}, {"identifier": "getCurrentQueueSize", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number getCurrentQueueSize()", "full_signature": "public Number getCurrentQueueSize()", "class_method_signature": "HystrixThreadPoolMetrics.getCurrentQueueSize()", "testcase": false, "constructor": false}, {"identifier": "markThreadExecution", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void markThreadExecution()", "full_signature": "public void markThreadExecution()", "class_method_signature": "HystrixThreadPoolMetrics.markThreadExecution()", "testcase": false, "constructor": false}, {"identifier": "getRollingCountThreadsExecuted", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRollingCountThreadsExecuted()", "full_signature": "public long getRollingCountThreadsExecuted()", "class_method_signature": "HystrixThreadPoolMetrics.getRollingCountThreadsExecuted()", "testcase": false, "constructor": false}, {"identifier": "getCumulativeCountThreadsExecuted", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCumulativeCountThreadsExecuted()", "full_signature": "public long getCumulativeCountThreadsExecuted()", "class_method_signature": "HystrixThreadPoolMetrics.getCumulativeCountThreadsExecuted()", "testcase": false, "constructor": false}, {"identifier": "getRollingCountThreadsRejected", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRollingCountThreadsRejected()", "full_signature": "public long getRollingCountThreadsRejected()", "class_method_signature": "HystrixThreadPoolMetrics.getRollingCountThreadsRejected()", "testcase": false, "constructor": false}, {"identifier": "getCumulativeCountThreadsRejected", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCumulativeCountThreadsRejected()", "full_signature": "public long getCumulativeCountThreadsRejected()", "class_method_signature": "HystrixThreadPoolMetrics.getCumulativeCountThreadsRejected()", "testcase": false, "constructor": false}, {"identifier": "getRollingCount", "parameters": "(HystrixEventType.ThreadPool event)", "modifiers": "public", "return": "long", "signature": "long getRollingCount(HystrixEventType.ThreadPool event)", "full_signature": "public long getRollingCount(HystrixEventType.ThreadPool event)", "class_method_signature": "HystrixThreadPoolMetrics.getRollingCount(HystrixEventType.ThreadPool event)", "testcase": false, "constructor": false}, {"identifier": "getCumulativeCount", "parameters": "(HystrixEventType.ThreadPool event)", "modifiers": "public", "return": "long", "signature": "long getCumulativeCount(HystrixEventType.ThreadPool event)", "full_signature": "public long getCumulativeCount(HystrixEventType.ThreadPool event)", "class_method_signature": "HystrixThreadPoolMetrics.getCumulativeCount(HystrixEventType.ThreadPool event)", "testcase": false, "constructor": false}, {"identifier": "getCumulativeCount", "parameters": "(HystrixRollingNumberEvent event)", "modifiers": "@Override public", "return": "long", "signature": "long getCumulativeCount(HystrixRollingNumberEvent event)", "full_signature": "@Override public long getCumulativeCount(HystrixRollingNumberEvent event)", "class_method_signature": "HystrixThreadPoolMetrics.getCumulativeCount(HystrixRollingNumberEvent event)", "testcase": false, "constructor": false}, {"identifier": "getRollingCount", "parameters": "(HystrixRollingNumberEvent event)", "modifiers": "@Override public", "return": "long", "signature": "long getRollingCount(HystrixRollingNumberEvent event)", "full_signature": "@Override public long getRollingCount(HystrixRollingNumberEvent event)", "class_method_signature": "HystrixThreadPoolMetrics.getRollingCount(HystrixRollingNumberEvent event)", "testcase": false, "constructor": false}, {"identifier": "markThreadCompletion", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void markThreadCompletion()", "full_signature": "public void markThreadCompletion()", "class_method_signature": "HystrixThreadPoolMetrics.markThreadCompletion()", "testcase": false, "constructor": false}, {"identifier": "getRollingMaxActiveThreads", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRollingMaxActiveThreads()", "full_signature": "public long getRollingMaxActiveThreads()", "class_method_signature": "HystrixThreadPoolMetrics.getRollingMaxActiveThreads()", "testcase": false, "constructor": false}, {"identifier": "markThreadRejection", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void markThreadRejection()", "full_signature": "public void markThreadRejection()", "class_method_signature": "HystrixThreadPoolMetrics.markThreadRejection()", "testcase": false, "constructor": false}, {"identifier": "getCurrentConcurrencyThunk", "parameters": "(final HystrixThreadPoolKey threadPoolKey)", "modifiers": "public static", "return": "Func0<Integer>", "signature": "Func0<Integer> getCurrentConcurrencyThunk(final HystrixThreadPoolKey threadPoolKey)", "full_signature": "public static Func0<Integer> getCurrentConcurrencyThunk(final HystrixThreadPoolKey threadPoolKey)", "class_method_signature": "HystrixThreadPoolMetrics.getCurrentConcurrencyThunk(final HystrixThreadPoolKey threadPoolKey)", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/HystrixThreadPoolMetrics.java"}, "focal_method": {"identifier": "getInstances", "parameters": "()", "modifiers": "public static", "return": "Collection<HystrixThreadPoolMetrics>", "body": "public static Collection<HystrixThreadPoolMetrics> getInstances() {\n        List<HystrixThreadPoolMetrics> threadPoolMetrics = new ArrayList<HystrixThreadPoolMetrics>();\n        for (HystrixThreadPoolMetrics tpm: metrics.values()) {\n            if (hasExecutedCommandsOnThread(tpm)) {\n                threadPoolMetrics.add(tpm);\n            }\n        }\n\n        return Collections.unmodifiableCollection(threadPoolMetrics);\n    }", "signature": "Collection<HystrixThreadPoolMetrics> getInstances()", "full_signature": "public static Collection<HystrixThreadPoolMetrics> getInstances()", "class_method_signature": "HystrixThreadPoolMetrics.getInstances()", "testcase": false, "constructor": false, "invocations": ["values", "hasExecutedCommandsOnThread", "add", "unmodifiableCollection"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}