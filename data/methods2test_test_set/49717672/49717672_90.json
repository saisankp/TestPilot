{"test_class": {"identifier": "GraphToolsTest", "superclass": "extends RobolectricTestWithConfig", "interfaces": "", "fields": [], "file": "app/src/test/java/com/eveningoutpost/dexdrip/UtilityModels/GraphToolsTest.java"}, "test_case": {"identifier": "bestYPositionTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void bestYPositionTest() {\n    // TODO\n    }", "signature": "void bestYPositionTest()", "full_signature": "@Test public void bestYPositionTest()", "class_method_signature": "GraphToolsTest.bestYPositionTest()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "GraphTools", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "bestYPosition", "parameters": "(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset)", "modifiers": "public static", "return": "Pair<Float, Float>", "signature": "Pair<Float, Float> bestYPosition(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset)", "full_signature": "public static Pair<Float, Float> bestYPosition(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset)", "class_method_signature": "GraphTools.bestYPosition(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset)", "testcase": false, "constructor": false}, {"identifier": "runBinarySearchIteratively", "parameters": "(List<BgReading> readings, long hunt, boolean ascending)", "modifiers": "private static", "return": "int", "signature": "int runBinarySearchIteratively(List<BgReading> readings, long hunt, boolean ascending)", "full_signature": "private static int runBinarySearchIteratively(List<BgReading> readings, long hunt, boolean ascending)", "class_method_signature": "GraphTools.runBinarySearchIteratively(List<BgReading> readings, long hunt, boolean ascending)", "testcase": false, "constructor": false}, {"identifier": "yposRatio", "parameters": "(final float first, final float second, final float ratio)", "modifiers": "public static", "return": "float", "signature": "float yposRatio(final float first, final float second, final float ratio)", "full_signature": "public static float yposRatio(final float first, final float second, final float ratio)", "class_method_signature": "GraphTools.yposRatio(final float first, final float second, final float ratio)", "testcase": false, "constructor": false}, {"identifier": "interpolate", "parameters": "(long firstTimestamp, double firstValue, long secondTimestamp,\n                              double secondValue, long timestamp)", "modifiers": "static", "return": "double", "signature": "double interpolate(long firstTimestamp, double firstValue, long secondTimestamp,\n                              double secondValue, long timestamp)", "full_signature": "static double interpolate(long firstTimestamp, double firstValue, long secondTimestamp,\n                              double secondValue, long timestamp)", "class_method_signature": "GraphTools.interpolate(long firstTimestamp, double firstValue, long secondTimestamp,\n                              double secondValue, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "interpolateCalculatedValue", "parameters": "(BgReading first, BgReading second, long timestamp)", "modifiers": "static", "return": "double", "signature": "double interpolateCalculatedValue(BgReading first, BgReading second, long timestamp)", "full_signature": "static double interpolateCalculatedValue(BgReading first, BgReading second, long timestamp)", "class_method_signature": "GraphTools.interpolateCalculatedValue(BgReading first, BgReading second, long timestamp)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/GraphTools.java"}, "focal_method": {"identifier": "bestYPosition", "parameters": "(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset)", "modifiers": "public static", "return": "Pair<Float, Float>", "body": "public static Pair<Float, Float> bestYPosition(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset) {\n\n        final double unitsScale = (mgdl ? 1f : Constants.MGDL_TO_MMOLL);\n        final float defaultPosition = (float) (7 * unitsScale);\n\n        float offsetedYpos = defaultPosition;\n        float calculatedYpos = defaultPosition;\n\n        if (readings != null && readings.size() > 0) {\n\n            final float offsetScaled = (float) (offset * unitsScale);\n\n            BgReading before = null;\n            BgReading after = null;\n\n            final int chopResult = runBinarySearchIteratively(readings, timestamp, ascending);\n\n            for (int i = chopResult; ascending ? (i < readings.size()) : (i >= 0); i = i + (ascending ? 1 : -1)) {\n                if (readings.get(i).timestamp <= timestamp) {\n                    before = readings.get(i);\n                } else {\n                    after = readings.get(i);\n                    break;\n                }\n            }\n\n            if (before == null && after == null) {\n                return new Pair<>(offsetedYpos, calculatedYpos);\n            }\n\n            if (before == null) {\n                before = after;\n            } else if (after == null) {\n                after = before;\n            }\n\n            calculatedYpos = (float) (interpolateCalculatedValue(before, after, timestamp) * unitsScale);\n\n            if (calculatedYpos >= highMark) {\n                offsetedYpos = calculatedYpos - offsetScaled;\n            } else {\n                offsetedYpos = calculatedYpos + offsetScaled;\n            }\n\n        }\n        return new Pair<>(offsetedYpos, calculatedYpos);\n\n    }", "signature": "Pair<Float, Float> bestYPosition(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset)", "full_signature": "public static Pair<Float, Float> bestYPosition(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset)", "class_method_signature": "GraphTools.bestYPosition(final List<BgReading> readings, final long timestamp, final boolean mgdl, final boolean ascending, final double highMark, final double offset)", "testcase": false, "constructor": false, "invocations": ["size", "runBinarySearchIteratively", "size", "get", "get", "get", "interpolateCalculatedValue"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}