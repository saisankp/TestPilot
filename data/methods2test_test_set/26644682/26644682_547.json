{"test_class": {"identifier": "XlsUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/xls/XlsUtilsTest.java"}, "test_case": {"identifier": "get_ColumnsNumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void get_ColumnsNumber() throws Exception {\n        Assertions\n                .assertThat(XlsUtils.getColumnsNumber(getClass().getResourceAsStream(\"data_xls.xml\"))) //\n                .isEqualTo(33);\n\n        Assertions\n                .assertThat(XlsUtils.getColumnsNumber(getClass().getResourceAsStream(\"simple_data.xml\"))) //\n                .isEqualTo(4);\n\n        Assertions\n                .assertThat(XlsUtils.getColumnsNumber(getClass().getResourceAsStream(\"TDP-1781.xml\"))) //\n                .isEqualTo(6);\n    }", "signature": "void get_ColumnsNumber()", "full_signature": "@Test public void get_ColumnsNumber()", "class_method_signature": "XlsUtilsTest.get_ColumnsNumber()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getColumnsNumber", "getResourceAsStream", "getClass", "isEqualTo", "assertThat", "getColumnsNumber", "getResourceAsStream", "getClass", "isEqualTo", "assertThat", "getColumnsNumber", "getResourceAsStream", "getClass"]}, "focal_class": {"identifier": "XlsUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(XlsUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(XlsUtils.class)", "var_name": "LOGGER"}, {"original_string": "private static final XMLInputFactory XML_INPUT_FACTORY = XMLInputSingletonHolder.xmlInputFactory;", "modifier": "private static final", "type": "XMLInputFactory", "declarator": "XML_INPUT_FACTORY = XMLInputSingletonHolder.xmlInputFactory", "var_name": "XML_INPUT_FACTORY"}], "methods": [{"identifier": "XlsUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " XlsUtils()", "full_signature": "private  XlsUtils()", "class_method_signature": "XlsUtils.XlsUtils()", "testcase": false, "constructor": true}, {"identifier": "getCellValueAsString", "parameters": "(Cell cell, FormulaEvaluator formulaEvaluator)", "modifiers": "public static", "return": "String", "signature": "String getCellValueAsString(Cell cell, FormulaEvaluator formulaEvaluator)", "full_signature": "public static String getCellValueAsString(Cell cell, FormulaEvaluator formulaEvaluator)", "class_method_signature": "XlsUtils.getCellValueAsString(Cell cell, FormulaEvaluator formulaEvaluator)", "testcase": false, "constructor": false}, {"identifier": "getCellValueAsString", "parameters": "(Cell cell, CellValue cellValue)", "modifiers": "private static", "return": "String", "signature": "String getCellValueAsString(Cell cell, CellValue cellValue)", "full_signature": "private static String getCellValueAsString(Cell cell, CellValue cellValue)", "class_method_signature": "XlsUtils.getCellValueAsString(Cell cell, CellValue cellValue)", "testcase": false, "constructor": false}, {"identifier": "getNumericValue", "parameters": "(Cell cell, CellValue cellValue, boolean fromFormula)", "modifiers": "private static", "return": "String", "signature": "String getNumericValue(Cell cell, CellValue cellValue, boolean fromFormula)", "full_signature": "private static String getNumericValue(Cell cell, CellValue cellValue, boolean fromFormula)", "class_method_signature": "XlsUtils.getNumericValue(Cell cell, CellValue cellValue, boolean fromFormula)", "testcase": false, "constructor": false}, {"identifier": "isNewExcelFormat", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNewExcelFormat(InputStream inputStream)", "full_signature": "public static boolean isNewExcelFormat(InputStream inputStream)", "class_method_signature": "XlsUtils.isNewExcelFormat(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getActiveSheetsFromWorkbookSpec", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getActiveSheetsFromWorkbookSpec(InputStream inputStream)", "full_signature": "public static List<String> getActiveSheetsFromWorkbookSpec(InputStream inputStream)", "class_method_signature": "XlsUtils.getActiveSheetsFromWorkbookSpec(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getColumnsNumber", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "int", "signature": "int getColumnsNumber(InputStream inputStream)", "full_signature": "public static int getColumnsNumber(InputStream inputStream)", "class_method_signature": "XlsUtils.getColumnsNumber(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getAttributesNameValue", "parameters": "(XMLStreamReader streamReader)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> getAttributesNameValue(XMLStreamReader streamReader)", "full_signature": "private static Map<String, String> getAttributesNameValue(XMLStreamReader streamReader)", "class_method_signature": "XlsUtils.getAttributesNameValue(XMLStreamReader streamReader)", "testcase": false, "constructor": false}, {"identifier": "getColumnsNumberFromDimension", "parameters": "(String dimension)", "modifiers": "public static", "return": "int", "signature": "int getColumnsNumberFromDimension(String dimension)", "full_signature": "public static int getColumnsNumberFromDimension(String dimension)", "class_method_signature": "XlsUtils.getColumnsNumberFromDimension(String dimension)", "testcase": false, "constructor": false}, {"identifier": "getColumnNumberFromCellRef", "parameters": "(String lastCell)", "modifiers": "public static", "return": "int", "signature": "int getColumnNumberFromCellRef(String lastCell)", "full_signature": "public static int getColumnNumberFromCellRef(String lastCell)", "class_method_signature": "XlsUtils.getColumnNumberFromCellRef(String lastCell)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/xls/XlsUtils.java"}, "focal_method": {"identifier": "getColumnsNumber", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "int", "body": "public static int getColumnsNumber(InputStream inputStream) throws XMLStreamException, IOException {\n        // If doesn't support mark, wrap up\n        if (!inputStream.markSupported()) {\n            inputStream = new PushbackInputStream(inputStream, 8);\n        }\n\n        int colNumber = 0;\n\n        // TDP-1781 xlsx files may not containing dimension so we fallback to col element number\n\n        XMLStreamReader streamReader = XML_INPUT_FACTORY.createXMLStreamReader(inputStream);\n        try {\n            while (streamReader.hasNext()) {\n                switch (streamReader.next()) {\n                case START_ELEMENT:\n                    if (StringUtils.equals(streamReader.getLocalName(), \"dimension\")) {\n                        Map<String, String> attributesValues = getAttributesNameValue(streamReader);\n                        if (!attributesValues.isEmpty()) {\n                            return getColumnsNumberFromDimension(attributesValues.get(\"ref\"));\n                        }\n                    }\n                    if (StringUtils.equals(streamReader.getLocalName(), \"col\")) {\n                        colNumber++;\n                    }\n                    break;\n                case END_ELEMENT:\n                    if (StringUtils.equals(streamReader.getLocalName(), \"cols\")) {\n                        return colNumber;\n                    }\n                default:\n                    // no op\n                }\n            }\n        } finally {\n            if (streamReader != null) {\n                streamReader.close();\n            }\n        }\n        return -1;\n    }", "signature": "int getColumnsNumber(InputStream inputStream)", "full_signature": "public static int getColumnsNumber(InputStream inputStream)", "class_method_signature": "XlsUtils.getColumnsNumber(InputStream inputStream)", "testcase": false, "constructor": false, "invocations": ["markSupported", "createXMLStreamReader", "hasNext", "next", "equals", "getLocalName", "getAttributesNameValue", "isEmpty", "getColumnsNumberFromDimension", "get", "equals", "getLocalName", "equals", "getLocalName", "close"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}