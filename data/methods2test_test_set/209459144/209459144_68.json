{"test_class": {"identifier": "EnvironmentRestApiTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static EnvironmentRestApi environmentStoreApi;", "modifier": "private static", "type": "EnvironmentRestApi", "declarator": "environmentStoreApi", "var_name": "environmentStoreApi"}, {"original_string": "private static String kernelName = \"team_default_python_3\";", "modifier": "private static", "type": "String", "declarator": "kernelName = \"team_default_python_3\"", "var_name": "kernelName"}, {"original_string": "private static String dockerImage = \"continuumio/anaconda3\";", "modifier": "private static", "type": "String", "declarator": "dockerImage = \"continuumio/anaconda3\"", "var_name": "dockerImage"}, {"original_string": "private static List<String> kernelChannels = Arrays.asList(\"defaults\", \"anaconda\");", "modifier": "private static", "type": "List<String>", "declarator": "kernelChannels = Arrays.asList(\"defaults\", \"anaconda\")", "var_name": "kernelChannels"}, {"original_string": "private static List<String> kernelDependencies = Arrays.asList(\n      \"_ipyw_jlab_nb_ext_conf=0.1.0=py37_0\",\n      \"alabaster=0.7.12=py37_0\",\n      \"anaconda=2020.02=py37_0\",\n      \"anaconda-client=1.7.2=py37_0\",\n      \"anaconda-navigator=1.9.12=py37_0\");", "modifier": "private static", "type": "List<String>", "declarator": "kernelDependencies = Arrays.asList(\n      \"_ipyw_jlab_nb_ext_conf=0.1.0=py37_0\",\n      \"alabaster=0.7.12=py37_0\",\n      \"anaconda=2020.02=py37_0\",\n      \"anaconda-client=1.7.2=py37_0\",\n      \"anaconda-navigator=1.9.12=py37_0\")", "var_name": "kernelDependencies"}, {"original_string": "private static GsonBuilder gsonBuilder = new GsonBuilder()\n      .registerTypeAdapter(EnvironmentId.class, new EnvironmentIdSerializer())\n      .registerTypeAdapter(EnvironmentId.class, new EnvironmentIdDeserializer());", "modifier": "private static", "type": "GsonBuilder", "declarator": "gsonBuilder = new GsonBuilder()\n      .registerTypeAdapter(EnvironmentId.class, new EnvironmentIdSerializer())\n      .registerTypeAdapter(EnvironmentId.class, new EnvironmentIdDeserializer())", "var_name": "gsonBuilder"}, {"original_string": "private static Gson gson = gsonBuilder.setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();", "modifier": "private static", "type": "Gson", "declarator": "gson = gsonBuilder.setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create()", "var_name": "gson"}], "file": "submarine-server/server-core/src/test/java/org/apache/submarine/server/rest/EnvironmentRestApiTest.java"}, "test_case": {"identifier": "listEnvironment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void listEnvironment() {\n    Response getEnvResponse = environmentStoreApi.listEnvironment(\"\");\n    String entity = (String) getEnvResponse.getEntity();\n    JsonResponse jsonResponse = gson.fromJson(entity, JsonResponse.class);\n\n    // environments.length = 2; One is created in this test, one is get from database\n    Environment[] environments = gson\n        .fromJson(gson.toJson(jsonResponse.getResult()), Environment[].class);\n    assertEquals(2, environments.length);\n\n    Environment environment = environments[0];\n    assertEquals(\"foo\", environment.getEnvironmentSpec().getName());\n    assertEquals(kernelName,\n        environment.getEnvironmentSpec().getKernelSpec().getName());\n    assertEquals(kernelChannels,\n        environment.getEnvironmentSpec().getKernelSpec().getChannels());\n    assertEquals(kernelDependencies,\n        environment.getEnvironmentSpec().getKernelSpec().getDependencies());\n    assertEquals(\"continuumio/miniconda\",\n        environment.getEnvironmentSpec().getDockerImage());\n  }", "signature": "void listEnvironment()", "full_signature": "@Test public void listEnvironment()", "class_method_signature": "EnvironmentRestApiTest.listEnvironment()", "testcase": true, "constructor": false, "invocations": ["listEnvironment", "getEntity", "fromJson", "fromJson", "toJson", "getResult", "assertEquals", "assertEquals", "getName", "getEnvironmentSpec", "assertEquals", "getName", "getKernelSpec", "getEnvironmentSpec", "assertEquals", "getChannels", "getKernelSpec", "getEnvironmentSpec", "assertEquals", "getDependencies", "getKernelSpec", "getEnvironmentSpec", "assertEquals", "getDockerImage", "getEnvironmentSpec"]}, "focal_class": {"identifier": "EnvironmentRestApi", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EnvironmentManager environmentManager =\n      EnvironmentManager.getInstance();", "modifier": "private final", "type": "EnvironmentManager", "declarator": "environmentManager =\n      EnvironmentManager.getInstance()", "var_name": "environmentManager"}], "methods": [{"identifier": "createEnvironment", "parameters": "(EnvironmentSpec spec)", "modifiers": "@POST @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"Create a environment\", tags = {\"environment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = Environment.class)))}) public", "return": "Response", "signature": "Response createEnvironment(EnvironmentSpec spec)", "full_signature": "@POST @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"Create a environment\", tags = {\"environment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = Environment.class)))}) public Response createEnvironment(EnvironmentSpec spec)", "class_method_signature": "EnvironmentRestApi.createEnvironment(EnvironmentSpec spec)", "testcase": false, "constructor": false}, {"identifier": "updateEnvironment", "parameters": "(\n      @PathParam(RestConstants.ENVIRONMENT_ID) String name,\n      EnvironmentSpec spec)", "modifiers": "@PATCH @Path(\"/{id}\") @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"Update the environment with job spec\", tags = {\"environments\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = Environment.class))), @ApiResponse( responseCode = \"404\", description = \"Environment not found\")}) public", "return": "Response", "signature": "Response updateEnvironment(\n      @PathParam(RestConstants.ENVIRONMENT_ID) String name,\n      EnvironmentSpec spec)", "full_signature": "@PATCH @Path(\"/{id}\") @Consumes({RestConstants.MEDIA_TYPE_YAML, MediaType.APPLICATION_JSON}) @Operation(summary = \"Update the environment with job spec\", tags = {\"environments\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = Environment.class))), @ApiResponse( responseCode = \"404\", description = \"Environment not found\")}) public Response updateEnvironment(\n      @PathParam(RestConstants.ENVIRONMENT_ID) String name,\n      EnvironmentSpec spec)", "class_method_signature": "EnvironmentRestApi.updateEnvironment(\n      @PathParam(RestConstants.ENVIRONMENT_ID) String name,\n      EnvironmentSpec spec)", "testcase": false, "constructor": false}, {"identifier": "deleteEnvironment", "parameters": "(\n      @PathParam(RestConstants.ENVIRONMENT_ID) String name)", "modifiers": "@DELETE @Path(\"/{id}\") @Operation(summary = \"Delete the environment\", tags = {\"environments\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = Environment.class))), @ApiResponse( responseCode = \"404\", description = \"Environment not found\")}) public", "return": "Response", "signature": "Response deleteEnvironment(\n      @PathParam(RestConstants.ENVIRONMENT_ID) String name)", "full_signature": "@DELETE @Path(\"/{id}\") @Operation(summary = \"Delete the environment\", tags = {\"environments\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = Environment.class))), @ApiResponse( responseCode = \"404\", description = \"Environment not found\")}) public Response deleteEnvironment(\n      @PathParam(RestConstants.ENVIRONMENT_ID) String name)", "class_method_signature": "EnvironmentRestApi.deleteEnvironment(\n      @PathParam(RestConstants.ENVIRONMENT_ID) String name)", "testcase": false, "constructor": false}, {"identifier": "listEnvironment", "parameters": "(@QueryParam(\"status\") String status)", "modifiers": "@GET @Operation(summary = \"List of Environments\", tags = {\"environments\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = Environment.class)))}) public", "return": "Response", "signature": "Response listEnvironment(@QueryParam(\"status\") String status)", "full_signature": "@GET @Operation(summary = \"List of Environments\", tags = {\"environments\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = Environment.class)))}) public Response listEnvironment(@QueryParam(\"status\") String status)", "class_method_signature": "EnvironmentRestApi.listEnvironment(@QueryParam(\"status\") String status)", "testcase": false, "constructor": false}, {"identifier": "getEnvironment", "parameters": "(\n      @PathParam(RestConstants.ENVIRONMENT_ID) String name)", "modifiers": "@GET @Path(\"/{id}\") @Operation(summary = \"Find environment by name\", tags = {\"environment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = Environment.class))), @ApiResponse( responseCode = \"404\", description = \"Environment not found\")}) public", "return": "Response", "signature": "Response getEnvironment(\n      @PathParam(RestConstants.ENVIRONMENT_ID) String name)", "full_signature": "@GET @Path(\"/{id}\") @Operation(summary = \"Find environment by name\", tags = {\"environment\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema(implementation = Environment.class))), @ApiResponse( responseCode = \"404\", description = \"Environment not found\")}) public Response getEnvironment(\n      @PathParam(RestConstants.ENVIRONMENT_ID) String name)", "class_method_signature": "EnvironmentRestApi.getEnvironment(\n      @PathParam(RestConstants.ENVIRONMENT_ID) String name)", "testcase": false, "constructor": false}, {"identifier": "parseEnvironmentServiceException", "parameters": "(\n      SubmarineRuntimeException e)", "modifiers": "private", "return": "Response", "signature": "Response parseEnvironmentServiceException(\n      SubmarineRuntimeException e)", "full_signature": "private Response parseEnvironmentServiceException(\n      SubmarineRuntimeException e)", "class_method_signature": "EnvironmentRestApi.parseEnvironmentServiceException(\n      SubmarineRuntimeException e)", "testcase": false, "constructor": false}], "file": "submarine-server/server-core/src/main/java/org/apache/submarine/server/rest/EnvironmentRestApi.java"}, "focal_method": {"identifier": "listEnvironment", "parameters": "(@QueryParam(\"status\") String status)", "modifiers": "@GET @Operation(summary = \"List of Environments\", tags = {\"environments\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = Environment.class)))}) public", "return": "Response", "body": "@GET\n  @Operation(summary = \"List of Environments\",\n          tags = {\"environments\"},\n          responses = {\n                  @ApiResponse(description = \"successful operation\", \n                      content = @Content(\n                          schema = @Schema(\n                              implementation = Environment.class)))})\n  public Response listEnvironment(@QueryParam(\"status\") String status) {\n    try {\n      List<Environment> environmentList =\n          environmentManager.listEnvironments(status);\n      return new JsonResponse.Builder<List<Environment>>(Response.Status.OK)\n          .success(true).result(environmentList).build();\n    } catch (SubmarineRuntimeException e) {\n      return parseEnvironmentServiceException(e);\n    }\n  }", "signature": "Response listEnvironment(@QueryParam(\"status\") String status)", "full_signature": "@GET @Operation(summary = \"List of Environments\", tags = {\"environments\"}, responses = { @ApiResponse(description = \"successful operation\", content = @Content( schema = @Schema( implementation = Environment.class)))}) public Response listEnvironment(@QueryParam(\"status\") String status)", "class_method_signature": "EnvironmentRestApi.listEnvironment(@QueryParam(\"status\") String status)", "testcase": false, "constructor": false, "invocations": ["listEnvironments", "build", "result", "success", "parseEnvironmentServiceException"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}