{"test_class": {"identifier": "MinimalZipArchiveTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] unitTestZipArchive;", "modifier": "private", "type": "byte[]", "declarator": "unitTestZipArchive", "var_name": "unitTestZipArchive"}, {"original_string": "private File tempFile;", "modifier": "private", "type": "File", "declarator": "tempFile", "var_name": "tempFile"}], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/MinimalZipArchiveTest.java"}, "test_case": {"identifier": "testListEntries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testListEntries() throws IOException {\n    // Ensure all entries are found, and that they are in file order.\n    List<MinimalZipEntry> parsedEntries = MinimalZipArchive.listEntries(tempFile);\n    long lastSeenHeaderOffset = -1;\n    for (int x = 0; x < UnitTestZipArchive.allEntriesInFileOrder.size(); x++) {\n      UnitTestZipEntry expected = UnitTestZipArchive.allEntriesInFileOrder.get(x);\n      MinimalZipEntry actual = parsedEntries.get(x);\n      Assert.assertEquals(expected.path, actual.getFileName());\n      Assert.assertEquals(expected.level == 0 ? 0 : 8, actual.getCompressionMethod());\n      Assert.assertEquals(expected.getCompressedBinaryContent().length, actual.getCompressedSize());\n      Assert.assertEquals(\n          expected.getUncompressedBinaryContent().length, actual.getUncompressedSize());\n      Assert.assertEquals(false, actual.getGeneralPurposeFlagBit11());\n      CRC32 crc32 = new CRC32();\n      crc32.update(expected.getUncompressedBinaryContent());\n      Assert.assertEquals(crc32.getValue(), actual.getCrc32OfUncompressedData());\n\n      // Offset verification is a little trickier\n      // 1. Verify that the offsets are in ascending order and increasing.\n      Assert.assertTrue(actual.getFileOffsetOfLocalEntry() > lastSeenHeaderOffset);\n      lastSeenHeaderOffset = actual.getFileOffsetOfLocalEntry();\n\n      // 2. Verify that the local signature header is at the calculated position\n      byte[] expectedSignatureBlock = new byte[] {0x50, 0x4b, 0x03, 0x04};\n      for (int index = 0; index < 4; index++) {\n        byte actualByte = unitTestZipArchive[((int) actual.getFileOffsetOfLocalEntry()) + index];\n        Assert.assertEquals(expectedSignatureBlock[index], actualByte);\n      }\n\n      // 3. Verify that the data is at the calculated position\n      byte[] expectedContent = expected.getCompressedBinaryContent();\n      int calculatedDataOffset = (int) actual.getFileOffsetOfCompressedData();\n      for (int index = 0; index < expectedContent.length; index++) {\n        Assert.assertEquals(\n            expectedContent[index], unitTestZipArchive[calculatedDataOffset + index]);\n      }\n    }\n  }", "signature": "void testListEntries()", "full_signature": "@Test public void testListEntries()", "class_method_signature": "MinimalZipArchiveTest.testListEntries()", "testcase": true, "constructor": false, "invocations": ["listEntries", "size", "get", "get", "assertEquals", "getFileName", "assertEquals", "getCompressionMethod", "assertEquals", "getCompressedBinaryContent", "getCompressedSize", "assertEquals", "getUncompressedBinaryContent", "getUncompressedSize", "assertEquals", "getGeneralPurposeFlagBit11", "update", "getUncompressedBinaryContent", "assertEquals", "getValue", "getCrc32OfUncompressedData", "assertTrue", "getFileOffsetOfLocalEntry", "getFileOffsetOfLocalEntry", "getFileOffsetOfLocalEntry", "assertEquals", "getCompressedBinaryContent", "getFileOffsetOfCompressedData", "assertEquals"]}, "focal_class": {"identifier": "MinimalZipArchive", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Comparator<MinimalZipEntry> LOCAL_ENTRY_OFFSET_COMAPRATOR =\n      new Comparator<MinimalZipEntry>() {\n        @Override\n        public int compare(MinimalZipEntry o1, MinimalZipEntry o2) {\n          return Long.compare(o1.getFileOffsetOfLocalEntry(), o2.getFileOffsetOfLocalEntry());\n        }\n      };", "modifier": "private static final", "type": "Comparator<MinimalZipEntry>", "declarator": "LOCAL_ENTRY_OFFSET_COMAPRATOR =\n      new Comparator<MinimalZipEntry>() {\n        @Override\n        public int compare(MinimalZipEntry o1, MinimalZipEntry o2) {\n          return Long.compare(o1.getFileOffsetOfLocalEntry(), o2.getFileOffsetOfLocalEntry());\n        }\n      }", "var_name": "LOCAL_ENTRY_OFFSET_COMAPRATOR"}], "methods": [{"identifier": "listEntries", "parameters": "(File file)", "modifiers": "public static", "return": "List<MinimalZipEntry>", "signature": "List<MinimalZipEntry> listEntries(File file)", "full_signature": "public static List<MinimalZipEntry> listEntries(File file)", "class_method_signature": "MinimalZipArchive.listEntries(File file)", "testcase": false, "constructor": false}, {"identifier": "listEntriesInternal", "parameters": "(RandomAccessFileInputStream in)", "modifiers": "private static", "return": "List<MinimalZipEntry>", "signature": "List<MinimalZipEntry> listEntriesInternal(RandomAccessFileInputStream in)", "full_signature": "private static List<MinimalZipEntry> listEntriesInternal(RandomAccessFileInputStream in)", "class_method_signature": "MinimalZipArchive.listEntriesInternal(RandomAccessFileInputStream in)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/MinimalZipArchive.java"}, "focal_method": {"identifier": "listEntries", "parameters": "(File file)", "modifiers": "public static", "return": "List<MinimalZipEntry>", "body": "public static List<MinimalZipEntry> listEntries(File file) throws IOException {\n    try (RandomAccessFileInputStream in = new RandomAccessFileInputStream(file)) {\n      return listEntriesInternal(in);\n    }\n  }", "signature": "List<MinimalZipEntry> listEntries(File file)", "full_signature": "public static List<MinimalZipEntry> listEntries(File file)", "class_method_signature": "MinimalZipArchive.listEntries(File file)", "testcase": false, "constructor": false, "invocations": ["listEntriesInternal"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}