{"test_class": {"identifier": "MinimalZipParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] unitTestZipArchive;", "modifier": "private", "type": "byte[]", "declarator": "unitTestZipArchive", "var_name": "unitTestZipArchive"}], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/MinimalZipParserTest.java"}, "test_case": {"identifier": "testLocateStartOfEocd_WithArray_NoEocd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLocateStartOfEocd_WithArray_NoEocd() {\n    int eocdOffset = MinimalZipParser.locateStartOfEocd(new byte[32768]);\n    Assert.assertEquals(-1, eocdOffset);\n  }", "signature": "void testLocateStartOfEocd_WithArray_NoEocd()", "full_signature": "@Test public void testLocateStartOfEocd_WithArray_NoEocd()", "class_method_signature": "MinimalZipParserTest.testLocateStartOfEocd_WithArray_NoEocd()", "testcase": true, "constructor": false, "invocations": ["locateStartOfEocd", "assertEquals"]}, "focal_class": {"identifier": "MinimalZipParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int EOCD_SIGNATURE = 0x06054b50;", "modifier": "public static final", "type": "int", "declarator": "EOCD_SIGNATURE = 0x06054b50", "var_name": "EOCD_SIGNATURE"}, {"original_string": "public static final int CENTRAL_DIRECTORY_ENTRY_SIGNATURE = 0x02014b50;", "modifier": "public static final", "type": "int", "declarator": "CENTRAL_DIRECTORY_ENTRY_SIGNATURE = 0x02014b50", "var_name": "CENTRAL_DIRECTORY_ENTRY_SIGNATURE"}, {"original_string": "public static final int LOCAL_ENTRY_SIGNATURE = 0x04034b50;", "modifier": "public static final", "type": "int", "declarator": "LOCAL_ENTRY_SIGNATURE = 0x04034b50", "var_name": "LOCAL_ENTRY_SIGNATURE"}], "methods": [{"identifier": "readByteOrDie", "parameters": "(InputStream in)", "modifiers": "private static", "return": "int", "signature": "int readByteOrDie(InputStream in)", "full_signature": "private static int readByteOrDie(InputStream in)", "class_method_signature": "MinimalZipParser.readByteOrDie(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "skipOrDie", "parameters": "(InputStream in, long numBytes)", "modifiers": "private static", "return": "void", "signature": "void skipOrDie(InputStream in, long numBytes)", "full_signature": "private static void skipOrDie(InputStream in, long numBytes)", "class_method_signature": "MinimalZipParser.skipOrDie(InputStream in, long numBytes)", "testcase": false, "constructor": false}, {"identifier": "read16BitUnsigned", "parameters": "(InputStream in)", "modifiers": "private static", "return": "int", "signature": "int read16BitUnsigned(InputStream in)", "full_signature": "private static int read16BitUnsigned(InputStream in)", "class_method_signature": "MinimalZipParser.read16BitUnsigned(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "read32BitUnsigned", "parameters": "(InputStream in)", "modifiers": "private static", "return": "long", "signature": "long read32BitUnsigned(InputStream in)", "full_signature": "private static long read32BitUnsigned(InputStream in)", "class_method_signature": "MinimalZipParser.read32BitUnsigned(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "readOrDie", "parameters": "(InputStream in, byte[] buffer, int offset, int length)", "modifiers": "private static", "return": "void", "signature": "void readOrDie(InputStream in, byte[] buffer, int offset, int length)", "full_signature": "private static void readOrDie(InputStream in, byte[] buffer, int offset, int length)", "class_method_signature": "MinimalZipParser.readOrDie(InputStream in, byte[] buffer, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "parseCentralDirectoryEntry", "parameters": "(InputStream in)", "modifiers": "public static", "return": "MinimalZipEntry", "signature": "MinimalZipEntry parseCentralDirectoryEntry(InputStream in)", "full_signature": "public static MinimalZipEntry parseCentralDirectoryEntry(InputStream in)", "class_method_signature": "MinimalZipParser.parseCentralDirectoryEntry(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "parseLocalEntryAndGetCompressedDataOffset", "parameters": "(InputStream in)", "modifiers": "public static", "return": "long", "signature": "long parseLocalEntryAndGetCompressedDataOffset(InputStream in)", "full_signature": "public static long parseLocalEntryAndGetCompressedDataOffset(InputStream in)", "class_method_signature": "MinimalZipParser.parseLocalEntryAndGetCompressedDataOffset(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "locateStartOfEocd", "parameters": "(RandomAccessFileInputStream in, int searchBufferLength)", "modifiers": "public static", "return": "long", "signature": "long locateStartOfEocd(RandomAccessFileInputStream in, int searchBufferLength)", "full_signature": "public static long locateStartOfEocd(RandomAccessFileInputStream in, int searchBufferLength)", "class_method_signature": "MinimalZipParser.locateStartOfEocd(RandomAccessFileInputStream in, int searchBufferLength)", "testcase": false, "constructor": false}, {"identifier": "locateStartOfEocd", "parameters": "(byte[] buffer)", "modifiers": "public static", "return": "int", "signature": "int locateStartOfEocd(byte[] buffer)", "full_signature": "public static int locateStartOfEocd(byte[] buffer)", "class_method_signature": "MinimalZipParser.locateStartOfEocd(byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "parseEocd", "parameters": "(InputStream in)", "modifiers": "public static", "return": "MinimalCentralDirectoryMetadata", "signature": "MinimalCentralDirectoryMetadata parseEocd(InputStream in)", "full_signature": "public static MinimalCentralDirectoryMetadata parseEocd(InputStream in)", "class_method_signature": "MinimalZipParser.parseEocd(InputStream in)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/MinimalZipParser.java"}, "focal_method": {"identifier": "locateStartOfEocd", "parameters": "(RandomAccessFileInputStream in, int searchBufferLength)", "modifiers": "public static", "return": "long", "body": "public static long locateStartOfEocd(RandomAccessFileInputStream in, int searchBufferLength)\n      throws IOException {\n    final int maxBufferSize = (int) Math.min(searchBufferLength, in.length());\n    final byte[] buffer = new byte[maxBufferSize];\n    final long rangeStart = in.length() - buffer.length;\n    in.setRange(rangeStart, buffer.length);\n    readOrDie(in, buffer, 0, buffer.length);\n    int offset = locateStartOfEocd(buffer);\n    if (offset == -1) {\n      return -1;\n    }\n    return rangeStart + offset;\n  }", "signature": "long locateStartOfEocd(RandomAccessFileInputStream in, int searchBufferLength)", "full_signature": "public static long locateStartOfEocd(RandomAccessFileInputStream in, int searchBufferLength)", "class_method_signature": "MinimalZipParser.locateStartOfEocd(RandomAccessFileInputStream in, int searchBufferLength)", "testcase": false, "constructor": false, "invocations": ["min", "length", "length", "setRange", "readOrDie", "locateStartOfEocd"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}