{"test_class": {"identifier": "ExtenderActivatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static BundleEvent bundleEvent;", "modifier": "private static", "type": "BundleEvent", "declarator": "bundleEvent", "var_name": "bundleEvent"}, {"original_string": "private static ExtenderActivator bundleListener;", "modifier": "private static", "type": "ExtenderActivator", "declarator": "bundleListener", "var_name": "bundleListener"}], "file": "osgi/extender/basic/src/test/java/org/openehealth/ipf/osgi/extender/basic/ExtenderActivatorTest.java"}, "test_case": {"identifier": "testBundleChanged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBundleChanged() {\n        bundleListener.bundleChanged(bundleEvent);\n        assertEquals(1, ExtensionsCount.getValue());\n    }", "signature": "void testBundleChanged()", "full_signature": "@Test public void testBundleChanged()", "class_method_signature": "ExtenderActivatorTest.testBundleChanged()", "testcase": true, "constructor": false, "invocations": ["bundleChanged", "assertEquals", "getValue"]}, "focal_class": {"identifier": "ExtenderActivator", "superclass": "", "interfaces": "implements BundleActivator, SynchronousBundleListener", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ExtenderActivator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ExtenderActivator.class)", "var_name": "LOG"}, {"original_string": "private final ExtensionActivator extensionActivator;", "modifier": "private final", "type": "ExtensionActivator", "declarator": "extensionActivator", "var_name": "extensionActivator"}], "methods": [{"identifier": "ExtenderActivator", "parameters": "()", "modifiers": "public", "return": "", "signature": " ExtenderActivator()", "full_signature": "public  ExtenderActivator()", "class_method_signature": "ExtenderActivator.ExtenderActivator()", "testcase": false, "constructor": true}, {"identifier": "bundleChanged", "parameters": "(BundleEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void bundleChanged(BundleEvent event)", "full_signature": "@Override public void bundleChanged(BundleEvent event)", "class_method_signature": "ExtenderActivator.bundleChanged(BundleEvent event)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(BundleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void start(BundleContext context)", "full_signature": "@Override public void start(BundleContext context)", "class_method_signature": "ExtenderActivator.start(BundleContext context)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(BundleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void stop(BundleContext context)", "full_signature": "@Override public void stop(BundleContext context)", "class_method_signature": "ExtenderActivator.stop(BundleContext context)", "testcase": false, "constructor": false}, {"identifier": "activateExtensionClasses", "parameters": "(List<Class<?>> classes)", "modifiers": "private", "return": "void", "signature": "void activateExtensionClasses(List<Class<?>> classes)", "full_signature": "private void activateExtensionClasses(List<Class<?>> classes)", "class_method_signature": "ExtenderActivator.activateExtensionClasses(List<Class<?>> classes)", "testcase": false, "constructor": false}], "file": "osgi/extender/basic/src/main/java/org/openehealth/ipf/osgi/extender/basic/ExtenderActivator.java"}, "focal_method": {"identifier": "bundleChanged", "parameters": "(BundleEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void bundleChanged(BundleEvent event) {\n        if (event.getType() == STARTED) {\n            activateExtensionClasses(ExtensionClasses.loadAll(event.getBundle()));\n        }\n    }", "signature": "void bundleChanged(BundleEvent event)", "full_signature": "@Override public void bundleChanged(BundleEvent event)", "class_method_signature": "ExtenderActivator.bundleChanged(BundleEvent event)", "testcase": false, "constructor": false, "invocations": ["getType", "activateExtensionClasses", "loadAll", "getBundle"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}