{"test_class": {"identifier": "SerializedProcessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/processors/SerializedProcessorTest.java"}, "test_case": {"identifier": "onSubscribeOnSubscribeRace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onSubscribeOnSubscribeRace() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final FlowableProcessor<Integer> s = PublishProcessor.<Integer>create().toSerialized();\n\n            TestSubscriber<Integer> ts = s.test();\n\n            final BooleanSubscription bs1 = new BooleanSubscription();\n            final BooleanSubscription bs2 = new BooleanSubscription();\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    s.onSubscribe(bs1);\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    s.onSubscribe(bs2);\n                }\n            };\n\n            TestHelper.race(r1, r2);\n\n            ts.assertEmpty();\n        }\n    }", "signature": "void onSubscribeOnSubscribeRace()", "full_signature": "@Test public void onSubscribeOnSubscribeRace()", "class_method_signature": "SerializedProcessorTest.onSubscribeOnSubscribeRace()", "testcase": true, "constructor": false, "invocations": ["toSerialized", "create", "test", "onSubscribe", "onSubscribe", "race", "assertEmpty"]}, "focal_class": {"identifier": "SerializedProcessor", "superclass": "extends FlowableProcessor<T>", "interfaces": "", "fields": [{"original_string": "final FlowableProcessor<T> actual;", "modifier": "final", "type": "FlowableProcessor<T>", "declarator": "actual", "var_name": "actual"}, {"original_string": "boolean emitting;", "modifier": "", "type": "boolean", "declarator": "emitting", "var_name": "emitting"}, {"original_string": "AppendOnlyLinkedArrayList<Object> queue;", "modifier": "", "type": "AppendOnlyLinkedArrayList<Object>", "declarator": "queue", "var_name": "queue"}, {"original_string": "volatile boolean done;", "modifier": "volatile", "type": "boolean", "declarator": "done", "var_name": "done"}], "methods": [{"identifier": "SerializedProcessor", "parameters": "(final FlowableProcessor<T> actual)", "modifiers": "", "return": "", "signature": " SerializedProcessor(final FlowableProcessor<T> actual)", "full_signature": "  SerializedProcessor(final FlowableProcessor<T> actual)", "class_method_signature": "SerializedProcessor.SerializedProcessor(final FlowableProcessor<T> actual)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(Subscriber<? super T> s)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Subscriber<? super T> s)", "full_signature": "@Override protected void subscribeActual(Subscriber<? super T> s)", "class_method_signature": "SerializedProcessor.subscribeActual(Subscriber<? super T> s)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "SerializedProcessor.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "SerializedProcessor.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "SerializedProcessor.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "SerializedProcessor.onComplete()", "testcase": false, "constructor": false}, {"identifier": "emitLoop", "parameters": "()", "modifiers": "", "return": "void", "signature": "void emitLoop()", "full_signature": " void emitLoop()", "class_method_signature": "SerializedProcessor.emitLoop()", "testcase": false, "constructor": false}, {"identifier": "hasSubscribers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasSubscribers()", "full_signature": "@Override public boolean hasSubscribers()", "class_method_signature": "SerializedProcessor.hasSubscribers()", "testcase": false, "constructor": false}, {"identifier": "hasThrowable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasThrowable()", "full_signature": "@Override public boolean hasThrowable()", "class_method_signature": "SerializedProcessor.hasThrowable()", "testcase": false, "constructor": false}, {"identifier": "getThrowable", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "Throwable", "signature": "Throwable getThrowable()", "full_signature": "@Override @Nullable public Throwable getThrowable()", "class_method_signature": "SerializedProcessor.getThrowable()", "testcase": false, "constructor": false}, {"identifier": "hasComplete", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasComplete()", "full_signature": "@Override public boolean hasComplete()", "class_method_signature": "SerializedProcessor.hasComplete()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/processors/SerializedProcessor.java"}, "focal_method": {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onSubscribe(Subscription s) {\n        boolean cancel;\n        if (!done) {\n            synchronized (this) {\n                if (done) {\n                    cancel = true;\n                } else {\n                    if (emitting) {\n                        AppendOnlyLinkedArrayList<Object> q = queue;\n                        if (q == null) {\n                            q = new AppendOnlyLinkedArrayList<Object>(4);\n                            queue = q;\n                        }\n                        q.add(NotificationLite.subscription(s));\n                        return;\n                    }\n                    emitting = true;\n                    cancel = false;\n                }\n            }\n        } else {\n            cancel = true;\n        }\n        if (cancel) {\n            s.cancel();\n        } else {\n            actual.onSubscribe(s);\n            emitLoop();\n        }\n    }", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "SerializedProcessor.onSubscribe(Subscription s)", "testcase": false, "constructor": false, "invocations": ["add", "subscription", "cancel", "onSubscribe", "emitLoop"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}