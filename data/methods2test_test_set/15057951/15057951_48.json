{"test_class": {"identifier": "DescribedCollectionTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-editor/src/test/java/org/smartparam/editor/core/identity/DescribedCollectionTest.java"}, "test_case": {"identifier": "shouldReturnImmutableCollectionAsListIfCreatedFromList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnImmutableCollectionAsListIfCreatedFromList() {\n        // given\n        DescribedCollection<String> collection = new DescribedCollection<String>(RepositoryName.from(\"repository\"), Arrays.asList(\"1\"));\n\n        // when\n        List<String> collectionItems = collection.itemsList();\n        catchException(collectionItems).add(\"2\");\n\n        // then\n        assertThat(caughtException()).isInstanceOf(UnsupportedOperationException.class);\n    }", "signature": "void shouldReturnImmutableCollectionAsListIfCreatedFromList()", "full_signature": "@Test public void shouldReturnImmutableCollectionAsListIfCreatedFromList()", "class_method_signature": "DescribedCollectionTest.shouldReturnImmutableCollectionAsListIfCreatedFromList()", "testcase": true, "constructor": false, "invocations": ["from", "asList", "itemsList", "add", "catchException", "isInstanceOf", "assertThat", "caughtException"]}, "focal_class": {"identifier": "DescribedCollection", "superclass": "", "interfaces": "implements Iterable<T>", "fields": [{"original_string": "private final RepositoryName source;", "modifier": "private final", "type": "RepositoryName", "declarator": "source", "var_name": "source"}, {"original_string": "private final Collection<T> items;", "modifier": "private final", "type": "Collection<T>", "declarator": "items", "var_name": "items"}], "methods": [{"identifier": "DescribedCollection", "parameters": "(RepositoryName source, Collection<T> items)", "modifiers": "public", "return": "", "signature": " DescribedCollection(RepositoryName source, Collection<T> items)", "full_signature": "public  DescribedCollection(RepositoryName source, Collection<T> items)", "class_method_signature": "DescribedCollection.DescribedCollection(RepositoryName source, Collection<T> items)", "testcase": false, "constructor": true}, {"identifier": "DescribedCollection", "parameters": "(RepositoryName source, T... items)", "modifiers": "public", "return": "", "signature": " DescribedCollection(RepositoryName source, T... items)", "full_signature": "public  DescribedCollection(RepositoryName source, T... items)", "class_method_signature": "DescribedCollection.DescribedCollection(RepositoryName source, T... items)", "testcase": false, "constructor": true}, {"identifier": "source", "parameters": "()", "modifiers": "public", "return": "RepositoryName", "signature": "RepositoryName source()", "full_signature": "public RepositoryName source()", "class_method_signature": "DescribedCollection.source()", "testcase": false, "constructor": false}, {"identifier": "items", "parameters": "()", "modifiers": "public", "return": "Collection<T>", "signature": "Collection<T> items()", "full_signature": "public Collection<T> items()", "class_method_signature": "DescribedCollection.items()", "testcase": false, "constructor": false}, {"identifier": "itemsList", "parameters": "()", "modifiers": "public", "return": "List<T>", "signature": "List<T> itemsList()", "full_signature": "public List<T> itemsList()", "class_method_signature": "DescribedCollection.itemsList()", "testcase": false, "constructor": false}, {"identifier": "firstItem", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T firstItem()", "full_signature": "public T firstItem()", "class_method_signature": "DescribedCollection.firstItem()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "DescribedCollection.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<T>", "signature": "Iterator<T> iterator()", "full_signature": "@Override public Iterator<T> iterator()", "class_method_signature": "DescribedCollection.iterator()", "testcase": false, "constructor": false}], "file": "smartparam-editor/src/main/java/org/smartparam/editor/core/identity/DescribedCollection.java"}, "focal_method": {"identifier": "itemsList", "parameters": "()", "modifiers": "public", "return": "List<T>", "body": "public List<T> itemsList() {\n        if (List.class.isAssignableFrom(items.getClass())) {\n            return Collections.unmodifiableList((List<T>) items);\n        }\n        throw new IllegalStateException(\"Tried to get a non-list collection as list!\");\n    }", "signature": "List<T> itemsList()", "full_signature": "public List<T> itemsList()", "class_method_signature": "DescribedCollection.itemsList()", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "getClass", "unmodifiableList"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}