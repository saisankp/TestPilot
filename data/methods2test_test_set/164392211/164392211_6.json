{"test_class": {"identifier": "TableFQNameTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java"}, "test_case": {"identifier": "testEquals_SchemaName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals_SchemaName() {\n\n        TableFQName n1 = TableFQName.forSchemaAndName(\"s1\", \"t1\");\n        TableFQName n2 = TableFQName.forSchemaAndName(\"s1\", \"t1\");\n        TableFQName n3 = TableFQName.forSchemaAndName(\"s2\", \"t1\");\n        TableFQName n4 = TableFQName.forSchemaAndName(\"s1\", \"t2\");\n\n        assertEquals(n1, n1);\n        assertEquals(n1, n2);\n        assertNotEquals(n1, n3);\n        assertNotEquals(n1, n4);\n    }", "signature": "void testEquals_SchemaName()", "full_signature": "@Test public void testEquals_SchemaName()", "class_method_signature": "TableFQNameTest.testEquals_SchemaName()", "testcase": true, "constructor": false, "invocations": ["forSchemaAndName", "forSchemaAndName", "forSchemaAndName", "forSchemaAndName", "assertEquals", "assertEquals", "assertNotEquals", "assertNotEquals"]}, "focal_class": {"identifier": "TableFQName", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String catalog;", "modifier": "private", "type": "String", "declarator": "catalog", "var_name": "catalog"}, {"original_string": "private String schema;", "modifier": "private", "type": "String", "declarator": "schema", "var_name": "schema"}, {"original_string": "private String table;", "modifier": "private", "type": "String", "declarator": "table", "var_name": "table"}], "methods": [{"identifier": "TableFQName", "parameters": "(String catalog, String schema, String table)", "modifiers": "public", "return": "", "signature": " TableFQName(String catalog, String schema, String table)", "full_signature": "public  TableFQName(String catalog, String schema, String table)", "class_method_signature": "TableFQName.TableFQName(String catalog, String schema, String table)", "testcase": false, "constructor": true}, {"identifier": "forName", "parameters": "(String tableName)", "modifiers": "public static", "return": "TableFQName", "signature": "TableFQName forName(String tableName)", "full_signature": "public static TableFQName forName(String tableName)", "class_method_signature": "TableFQName.forName(String tableName)", "testcase": false, "constructor": false}, {"identifier": "forSchemaAndName", "parameters": "(String schema, String tableName)", "modifiers": "public static", "return": "TableFQName", "signature": "TableFQName forSchemaAndName(String schema, String tableName)", "full_signature": "public static TableFQName forSchemaAndName(String schema, String tableName)", "class_method_signature": "TableFQName.forSchemaAndName(String schema, String tableName)", "testcase": false, "constructor": false}, {"identifier": "forCatalogAndName", "parameters": "(String catalog, String tableName)", "modifiers": "public static", "return": "TableFQName", "signature": "TableFQName forCatalogAndName(String catalog, String tableName)", "full_signature": "public static TableFQName forCatalogAndName(String catalog, String tableName)", "class_method_signature": "TableFQName.forCatalogAndName(String catalog, String tableName)", "testcase": false, "constructor": false}, {"identifier": "forCatalogSchemaAndName", "parameters": "(String catalog, String schema, String tableName)", "modifiers": "public static", "return": "TableFQName", "signature": "TableFQName forCatalogSchemaAndName(String catalog, String schema, String tableName)", "full_signature": "public static TableFQName forCatalogSchemaAndName(String catalog, String schema, String tableName)", "class_method_signature": "TableFQName.forCatalogSchemaAndName(String catalog, String schema, String tableName)", "testcase": false, "constructor": false}, {"identifier": "hasCatalog", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasCatalog()", "full_signature": "public boolean hasCatalog()", "class_method_signature": "TableFQName.hasCatalog()", "testcase": false, "constructor": false}, {"identifier": "hasSchema", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasSchema()", "full_signature": "public boolean hasSchema()", "class_method_signature": "TableFQName.hasSchema()", "testcase": false, "constructor": false}, {"identifier": "getCatalog", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCatalog()", "full_signature": "public String getCatalog()", "class_method_signature": "TableFQName.getCatalog()", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSchema()", "full_signature": "public String getSchema()", "class_method_signature": "TableFQName.getSchema()", "testcase": false, "constructor": false}, {"identifier": "getTable", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTable()", "full_signature": "public String getTable()", "class_method_signature": "TableFQName.getTable()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "TableFQName.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TableFQName.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TableFQName.toString()", "testcase": false, "constructor": false}], "file": "dflib-jdbc/src/main/java/com/nhl/dflib/jdbc/connector/metadata/TableFQName.java"}, "focal_method": {"identifier": "forSchemaAndName", "parameters": "(String schema, String tableName)", "modifiers": "public static", "return": "TableFQName", "body": "public static TableFQName forSchemaAndName(String schema, String tableName) {\n        return new TableFQName(null, schema, tableName);\n    }", "signature": "TableFQName forSchemaAndName(String schema, String tableName)", "full_signature": "public static TableFQName forSchemaAndName(String schema, String tableName)", "class_method_signature": "TableFQName.forSchemaAndName(String schema, String tableName)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}