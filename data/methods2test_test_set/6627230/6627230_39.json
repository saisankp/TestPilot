{"test_class": {"identifier": "TableTokenResolverTest", "superclass": "extends AbstractTokenResolverTest", "interfaces": "", "fields": [], "file": "dal-jdbc/src/test/java/org/unidal/dal/jdbc/query/token/resolver/TableTokenResolverTest.java"}, "test_case": {"identifier": "testCurrentTable2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testCurrentTable2() throws Exception {\n      QueryDef query = new QueryDef(\"test\", UserEntity.class, QueryType.SELECT, \"<TABLE name='user'/>\");\n      Readset<?> readset = UserEntity.READSET_FULL;\n      User user = new User();\n      QueryContext ctx = getSelectContext(query, user, readset);\n\n      m_queryResolver.resolve(ctx);\n      Assert.assertEquals(\"`user` u\", ctx.getSqlStatement());\n      Assert.assertEquals(true, ctx.isTableResolved());\n   }", "signature": "void testCurrentTable2()", "full_signature": "@Test public void testCurrentTable2()", "class_method_signature": "TableTokenResolverTest.testCurrentTable2()", "testcase": true, "constructor": false, "invocations": ["getSelectContext", "resolve", "assertEquals", "getSqlStatement", "assertEquals", "isTableResolved"]}, "focal_class": {"identifier": "TableTokenResolver", "superclass": "", "interfaces": "implements TokenResolver", "fields": [{"original_string": "@Inject\n   private TableProviderManager m_manager;", "modifier": "@Inject\n   private", "type": "TableProviderManager", "declarator": "m_manager", "var_name": "m_manager"}, {"original_string": "@Inject\n   private QueryNaming m_naming;", "modifier": "@Inject\n   private", "type": "QueryNaming", "declarator": "m_naming", "var_name": "m_naming"}], "methods": [{"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "TableTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false}], "file": "dal-jdbc/src/main/java/org/unidal/dal/jdbc/query/token/resolver/TableTokenResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "body": "public String resolve(Token token, QueryContext ctx) {\n      if (token.getType() != TokenType.TABLE) {\n         throw new DalRuntimeException(\"Internal error: only TABLE token is supported by \" + getClass());\n      }\n\n      SimpleTagToken table = (SimpleTagToken) token;\n      String tableName = table.getAttribute(\"name\", ctx.getEntityInfo().getLogicalName());\n      String[] logicalNameAndAlias = ctx.getEntityInfo().getLogicalNameAndAlias(tableName);\n      TableProvider tableProvider = m_manager.getTableProvider(logicalNameAndAlias[0]);\n      String physicalTableName = tableProvider.getPhysicalTableName(ctx.getQueryHints(), tableName);\n\n      switch (ctx.getQuery().getType()) {\n      case SELECT:\n         String alias = table.getAttribute(\"alias\", logicalNameAndAlias[1]);\n\n         ctx.setTableResolved(true);\n         return m_naming.getTable(physicalTableName, alias);\n      case INSERT:\n         return m_naming.getTable(physicalTableName);\n      case UPDATE:\n         return m_naming.getTable(physicalTableName);\n      case DELETE:\n         return m_naming.getTable(physicalTableName);\n      default:\n         throw new DalRuntimeException(\"TABLE token does not support query type: \" + ctx.getQuery().getType());\n      }\n   }", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "TableTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false, "invocations": ["getType", "getClass", "getAttribute", "getLogicalName", "getEntityInfo", "getLogicalNameAndAlias", "getEntityInfo", "getTableProvider", "getPhysicalTableName", "getQueryHints", "getType", "getQuery", "getAttribute", "setTableResolved", "getTable", "getTable", "getTable", "getTable", "getType", "getQuery"]}, "repository": {"repo_id": 6627230, "url": "https://github.com/unidal/frameworks", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 100, "size": 3009, "license": "licensed"}}