{"test_class": {"identifier": "MainWindowControllerTest", "superclass": "extends ApplicationTest", "interfaces": "", "fields": [], "file": "app/src/test/java/edu/wpi/first/shuffleboard/app/MainWindowControllerTest.java"}, "test_case": {"identifier": "testNetworkTableSourceContextMenu", "parameters": "()", "modifiers": "@Test @Tag(\"NonHeadlessTests\") public", "return": "void", "body": "@Test\n  @Tag(\"NonHeadlessTests\")\n  public void testNetworkTableSourceContextMenu() {\n    NetworkTableInstance inst = NetworkTableInstance.getDefault();\n    inst.getEntry(\"/testSourceContextMenu\").setString(\"value\");\n    inst.waitForEntryListenerQueue(-1.0);\n    WaitForAsyncUtils.waitForFxEvents();\n\n    rightClickOn(TextMatchers.hasText(\"testSourceContextMenu\"));\n    Node showAsText = lookup(TextMatchers.hasText(\"Show as: Text View\")).query();\n    assertNotNull(showAsText);\n    clickOn(showAsText);\n\n    WidgetTile tile = lookup(\".tile\").query();\n    assertNotNull(tile);\n    Widget widget = tile.getContent();\n    DataSource source = widget.getSources().get(0);\n    assertTrue(source.isActive());\n    assertEquals(\"testSourceContextMenu\", source.getName());\n    assertEquals(\"value\",source.getData());\n  }", "signature": "void testNetworkTableSourceContextMenu()", "full_signature": "@Test @Tag(\"NonHeadlessTests\") public void testNetworkTableSourceContextMenu()", "class_method_signature": "MainWindowControllerTest.testNetworkTableSourceContextMenu()", "testcase": true, "constructor": false, "invocations": ["getDefault", "setString", "getEntry", "waitForEntryListenerQueue", "waitForFxEvents", "rightClickOn", "hasText", "query", "lookup", "hasText", "assertNotNull", "clickOn", "query", "lookup", "assertNotNull", "getContent", "get", "getSources", "assertTrue", "isActive", "assertEquals", "getName", "assertEquals", "getData"]}, "focal_class": {"identifier": "MainWindowController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(MainWindowController.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(MainWindowController.class.getName())", "var_name": "log"}, {"original_string": "@FXML\n  private MenuItem recordingMenu;", "modifier": "@FXML\n  private", "type": "MenuItem", "declarator": "recordingMenu", "var_name": "recordingMenu"}, {"original_string": "@FXML\n  private Pane root;", "modifier": "@FXML\n  private", "type": "Pane", "declarator": "root", "var_name": "root"}, {"original_string": "@FXML\n  private Pane contentRoot;", "modifier": "@FXML\n  private", "type": "Pane", "declarator": "contentRoot", "var_name": "contentRoot"}, {"original_string": "@FXML\n  private Pane leftDrawer;", "modifier": "@FXML\n  private", "type": "Pane", "declarator": "leftDrawer", "var_name": "leftDrawer"}, {"original_string": "@FXML\n  private DashboardTabPane dashboard;", "modifier": "@FXML\n  private", "type": "DashboardTabPane", "declarator": "dashboard", "var_name": "dashboard"}, {"original_string": "private final PluginDialog pluginDialog = new PluginDialog();", "modifier": "private final", "type": "PluginDialog", "declarator": "pluginDialog = new PluginDialog()", "var_name": "pluginDialog"}, {"original_string": "private final AboutDialog aboutDialog = new AboutDialog();", "modifier": "private final", "type": "AboutDialog", "declarator": "aboutDialog = new AboutDialog()", "var_name": "aboutDialog"}, {"original_string": "private final ExportRecordingDialog exportRecordingDialog = new ExportRecordingDialog();", "modifier": "private final", "type": "ExportRecordingDialog", "declarator": "exportRecordingDialog = new ExportRecordingDialog()", "var_name": "exportRecordingDialog"}, {"original_string": "private final PrefsDialog prefsDialog = new PrefsDialog();", "modifier": "private final", "type": "PrefsDialog", "declarator": "prefsDialog = new PrefsDialog()", "var_name": "prefsDialog"}, {"original_string": "private final SaveFileHandler saveFileHandler = new SaveFileHandler();", "modifier": "private final", "type": "SaveFileHandler", "declarator": "saveFileHandler = new SaveFileHandler()", "var_name": "saveFileHandler"}, {"original_string": "private final ObservableValue<List<String>> stylesheets\n      = EasyBind.map(AppPreferences.getInstance().themeProperty(), Theme::getStyleSheets);", "modifier": "private final", "type": "ObservableValue<List<String>>", "declarator": "stylesheets\n      = EasyBind.map(AppPreferences.getInstance().themeProperty(), Theme::getStyleSheets)", "var_name": "stylesheets"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void initialize()", "full_signature": "@FXML private void initialize()", "class_method_signature": "MainWindowController.initialize()", "testcase": false, "constructor": false}, {"identifier": "tearDownPluginWhenUnloaded", "parameters": "(Plugin plugin)", "modifiers": "private", "return": "void", "signature": "void tearDownPluginWhenUnloaded(Plugin plugin)", "full_signature": "private void tearDownPluginWhenUnloaded(Plugin plugin)", "class_method_signature": "MainWindowController.tearDownPluginWhenUnloaded(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "setLeftDrawerCallbacks", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setLeftDrawerCallbacks()", "full_signature": "private void setLeftDrawerCallbacks()", "class_method_signature": "MainWindowController.setLeftDrawerCallbacks()", "testcase": false, "constructor": false}, {"identifier": "tearDown", "parameters": "(Plugin plugin)", "modifiers": "private", "return": "void", "signature": "void tearDown(Plugin plugin)", "full_signature": "private void tearDown(Plugin plugin)", "class_method_signature": "MainWindowController.tearDown(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "setDashboard", "parameters": "(DashboardTabPane dashboard)", "modifiers": "private", "return": "void", "signature": "void setDashboard(DashboardTabPane dashboard)", "full_signature": "private void setDashboard(DashboardTabPane dashboard)", "class_method_signature": "MainWindowController.setDashboard(DashboardTabPane dashboard)", "testcase": false, "constructor": false}, {"identifier": "setDashboard", "parameters": "(DashboardData dashboardData)", "modifiers": "public", "return": "void", "signature": "void setDashboard(DashboardData dashboardData)", "full_signature": "public void setDashboard(DashboardData dashboardData)", "class_method_signature": "MainWindowController.setDashboard(DashboardData dashboardData)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@FXML public", "return": "void", "signature": "void close()", "full_signature": "@FXML public void close()", "class_method_signature": "MainWindowController.close()", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "private", "return": "DashboardData", "signature": "DashboardData getData()", "full_signature": "private DashboardData getData()", "class_method_signature": "MainWindowController.getData()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "()", "modifiers": "@FXML public", "return": "void", "signature": "void save()", "full_signature": "@FXML public void save()", "class_method_signature": "MainWindowController.save()", "testcase": false, "constructor": false}, {"identifier": "saveAs", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void saveAs()", "full_signature": "@FXML private void saveAs()", "class_method_signature": "MainWindowController.saveAs()", "testcase": false, "constructor": false}, {"identifier": "newLayout", "parameters": "()", "modifiers": "@FXML public", "return": "void", "signature": "void newLayout()", "full_signature": "@FXML public void newLayout()", "class_method_signature": "MainWindowController.newLayout()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "()", "modifiers": "@FXML public", "return": "void", "signature": "void load()", "full_signature": "@FXML public void load()", "class_method_signature": "MainWindowController.load()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(File saveFile)", "modifiers": "public", "return": "void", "signature": "void load(File saveFile)", "full_signature": "public void load(File saveFile)", "class_method_signature": "MainWindowController.load(File saveFile)", "testcase": false, "constructor": false}, {"identifier": "showPrefs", "parameters": "()", "modifiers": "@FXML public", "return": "void", "signature": "void showPrefs()", "full_signature": "@FXML public void showPrefs()", "class_method_signature": "MainWindowController.showPrefs()", "testcase": false, "constructor": false}, {"identifier": "toggleRecording", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void toggleRecording()", "full_signature": "@FXML private void toggleRecording()", "class_method_signature": "MainWindowController.toggleRecording()", "testcase": false, "constructor": false}, {"identifier": "loadPlayback", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void loadPlayback()", "full_signature": "@FXML private void loadPlayback()", "class_method_signature": "MainWindowController.loadPlayback()", "testcase": false, "constructor": false}, {"identifier": "exportRecordings", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void exportRecordings()", "full_signature": "@FXML private void exportRecordings()", "class_method_signature": "MainWindowController.exportRecordings()", "testcase": false, "constructor": false}, {"identifier": "closeCurrentTab", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void closeCurrentTab()", "full_signature": "@FXML private void closeCurrentTab()", "class_method_signature": "MainWindowController.closeCurrentTab()", "testcase": false, "constructor": false}, {"identifier": "showTabPrefs", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void showTabPrefs()", "full_signature": "@FXML private void showTabPrefs()", "class_method_signature": "MainWindowController.showTabPrefs()", "testcase": false, "constructor": false}, {"identifier": "newTab", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void newTab()", "full_signature": "@FXML private void newTab()", "class_method_signature": "MainWindowController.newTab()", "testcase": false, "constructor": false}, {"identifier": "showPlugins", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void showPlugins()", "full_signature": "@FXML private void showPlugins()", "class_method_signature": "MainWindowController.showPlugins()", "testcase": false, "constructor": false}, {"identifier": "showAboutDialog", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void showAboutDialog()", "full_signature": "@FXML private void showAboutDialog()", "class_method_signature": "MainWindowController.showAboutDialog()", "testcase": false, "constructor": false}, {"identifier": "openDocsInBrowser", "parameters": "()", "modifiers": "@FXML private", "return": "void", "signature": "void openDocsInBrowser()", "full_signature": "@FXML private void openDocsInBrowser()", "class_method_signature": "MainWindowController.openDocsInBrowser()", "testcase": false, "constructor": false}], "file": "app/src/main/java/edu/wpi/first/shuffleboard/app/MainWindowController.java"}, "focal_method": {"identifier": "getData", "parameters": "()", "modifiers": "private", "return": "DashboardData", "body": "private DashboardData getData() {\n    return new DashboardData(\n        dashboard,\n        new WindowGeometry(root.getScene().getWindow())\n    );\n  }", "signature": "DashboardData getData()", "full_signature": "private DashboardData getData()", "class_method_signature": "MainWindowController.getData()", "testcase": false, "constructor": false, "invocations": ["getWindow", "getScene"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}