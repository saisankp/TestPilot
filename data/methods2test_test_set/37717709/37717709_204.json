{"test_class": {"identifier": "TestScopeObserver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScopeObserver observer;", "modifier": "private", "type": "ScopeObserver", "declarator": "observer", "var_name": "observer"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/scope/TestScopeObserver.java"}, "test_case": {"identifier": "testEnterScope", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEnterScope() {\n        Assert.assertNull(observer.currentScope());\n\n        observer.enterScope(Scope.SESSION);\n        Assert.assertEquals(Scope.SESSION, observer.currentScope());\n\n        observer.enterScope(Scope.APPLICATION);\n        Assert.assertEquals(Scope.APPLICATION, observer.currentScope());\n\n        observer.enterScope(null);\n        Assert.assertEquals(Scope.APPLICATION, observer.currentScope());\n    }", "signature": "void testEnterScope()", "full_signature": "@Test public void testEnterScope()", "class_method_signature": "TestScopeObserver.testEnterScope()", "testcase": true, "constructor": false, "invocations": ["assertNull", "currentScope", "enterScope", "assertEquals", "currentScope", "enterScope", "assertEquals", "currentScope", "enterScope", "assertEquals", "currentScope"]}, "focal_class": {"identifier": "ScopeObserver", "superclass": "", "interfaces": "implements ScopePublisher", "fields": [{"original_string": "private static final Logger LOGGER =\n            LogManager.getLogger(ScopeObserver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n            LogManager.getLogger(ScopeObserver.class)", "var_name": "LOGGER"}, {"original_string": "private final Collection<ScopeSubscriber> scopeSubscriber;", "modifier": "private final", "type": "Collection<ScopeSubscriber>", "declarator": "scopeSubscriber", "var_name": "scopeSubscriber"}, {"original_string": "private final Stack<Scope> scopes;", "modifier": "private final", "type": "Stack<Scope>", "declarator": "scopes", "var_name": "scopes"}], "methods": [{"identifier": "ScopeObserver", "parameters": "()", "modifiers": "public", "return": "", "signature": " ScopeObserver()", "full_signature": "public  ScopeObserver()", "class_method_signature": "ScopeObserver.ScopeObserver()", "testcase": false, "constructor": true}, {"identifier": "enterScope", "parameters": "(final Scope scope)", "modifiers": "public", "return": "void", "signature": "void enterScope(final Scope scope)", "full_signature": "public void enterScope(final Scope scope)", "class_method_signature": "ScopeObserver.enterScope(final Scope scope)", "testcase": false, "constructor": false}, {"identifier": "exitScope", "parameters": "(final Scope scope)", "modifiers": "public", "return": "void", "signature": "void exitScope(final Scope scope)", "full_signature": "public void exitScope(final Scope scope)", "class_method_signature": "ScopeObserver.exitScope(final Scope scope)", "testcase": false, "constructor": false}, {"identifier": "currentScope", "parameters": "()", "modifiers": "public", "return": "Scope", "signature": "Scope currentScope()", "full_signature": "public Scope currentScope()", "class_method_signature": "ScopeObserver.currentScope()", "testcase": false, "constructor": false}, {"identifier": "addScopeSubscriber", "parameters": "(final ScopeSubscriber subscriber)", "modifiers": "public", "return": "void", "signature": "void addScopeSubscriber(final ScopeSubscriber subscriber)", "full_signature": "public void addScopeSubscriber(final ScopeSubscriber subscriber)", "class_method_signature": "ScopeObserver.addScopeSubscriber(final ScopeSubscriber subscriber)", "testcase": false, "constructor": false}, {"identifier": "removeScopeSubscriber", "parameters": "(final ScopeSubscriber subscriber)", "modifiers": "public", "return": "void", "signature": "void removeScopeSubscriber(final ScopeSubscriber subscriber)", "full_signature": "public void removeScopeSubscriber(final ScopeSubscriber subscriber)", "class_method_signature": "ScopeObserver.removeScopeSubscriber(final ScopeSubscriber subscriber)", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/scope/ScopeObserver.java"}, "focal_method": {"identifier": "enterScope", "parameters": "(final Scope scope)", "modifiers": "public", "return": "void", "body": "public void enterScope(final Scope scope) {\n        if (scope == null) {\n            LOGGER.warn(\"ignoring entered null scope\");\n            return;\n        }\n\n        LOGGER.info(\"entering new scope '\" + scope.getName() + \"'...\");\n\n        final Scope previous = currentScope();\n        scopes.push(scope);\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"current scope stack: \" + scopes);\n        }\n\n        synchronized (scopeSubscriber) {\n            for (ScopeSubscriber listener : scopeSubscriber) {\n                listener.enterScope(previous, scope);\n            }\n        }\n    }", "signature": "void enterScope(final Scope scope)", "full_signature": "public void enterScope(final Scope scope)", "class_method_signature": "ScopeObserver.enterScope(final Scope scope)", "testcase": false, "constructor": false, "invocations": ["warn", "info", "getName", "currentScope", "push", "isDebugEnabled", "debug", "enterScope"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}