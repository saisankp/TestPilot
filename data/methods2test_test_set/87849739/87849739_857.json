{"test_class": {"identifier": "PipelineFunctionDefaultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String KNOWN_VALUE = \"expected\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_VALUE = \"expected\"", "var_name": "KNOWN_VALUE"}, {"original_string": "private static final String KNOWN_FALLBACK = \"fallback\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_FALLBACK = \"fallback\"", "var_name": "KNOWN_FALLBACK"}, {"original_string": "private static final String KNOWN_PLACEHOLDER = \"thing:name\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_PLACEHOLDER = \"thing:name\"", "var_name": "KNOWN_PLACEHOLDER"}, {"original_string": "private final PipelineFunctionDefault function = new PipelineFunctionDefault();", "modifier": "private final", "type": "PipelineFunctionDefault", "declarator": "function = new PipelineFunctionDefault()", "var_name": "function"}, {"original_string": "@Mock\n    private ExpressionResolver expressionResolver;", "modifier": "@Mock\n    private", "type": "ExpressionResolver", "declarator": "expressionResolver", "var_name": "expressionResolver"}], "file": "model/placeholders/src/test/java/org/eclipse/ditto/model/placeholders/PipelineFunctionDefaultTest.java"}, "test_case": {"identifier": "applyReturnsDefault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void applyReturnsDefault() {\n        final PipelineElement input = PipelineElement.unresolved();\n        final String params = \"(\\'\" + KNOWN_FALLBACK + \"\\')\";\n        assertThat(function.apply(input, params, expressionResolver)).contains(KNOWN_FALLBACK);\n    }", "signature": "void applyReturnsDefault()", "full_signature": "@Test public void applyReturnsDefault()", "class_method_signature": "PipelineFunctionDefaultTest.applyReturnsDefault()", "testcase": true, "constructor": false, "invocations": ["unresolved", "contains", "assertThat", "apply"]}, "focal_class": {"identifier": "PipelineFunctionDefault", "superclass": "", "interfaces": "implements PipelineFunction", "fields": [{"original_string": "private static final String FUNCTION_NAME = \"default\";", "modifier": "private static final", "type": "String", "declarator": "FUNCTION_NAME = \"default\"", "var_name": "FUNCTION_NAME"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "PipelineFunctionDefault.getName()", "testcase": false, "constructor": false}, {"identifier": "getSignature", "parameters": "()", "modifiers": "@Override public", "return": "DefaultFunctionSignature", "signature": "DefaultFunctionSignature getSignature()", "full_signature": "@Override public DefaultFunctionSignature getSignature()", "class_method_signature": "PipelineFunctionDefault.getSignature()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "modifiers": "@Override public", "return": "PipelineElement", "signature": "PipelineElement apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "full_signature": "@Override public PipelineElement apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "class_method_signature": "PipelineFunctionDefault.apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false}, {"identifier": "parseAndResolveThrow", "parameters": "(final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "modifiers": "private", "return": "PipelineElement", "signature": "PipelineElement parseAndResolveThrow(final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "full_signature": "private PipelineElement parseAndResolveThrow(final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "class_method_signature": "PipelineFunctionDefault.parseAndResolveThrow(final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false}], "file": "model/placeholders/src/main/java/org/eclipse/ditto/model/placeholders/PipelineFunctionDefault.java"}, "focal_method": {"identifier": "apply", "parameters": "(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "modifiers": "@Override public", "return": "PipelineElement", "body": "@Override\n    public PipelineElement apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver) {\n\n        // parse + resolve the specified default value for unresolved placeholders\n        // if previous stage does not resolve to a value. deleted pipeline elements remain deleted.\n        // evaluate parameter first to fail fast.\n        final PipelineElement parameter = parseAndResolveThrow(paramsIncludingParentheses, expressionResolver);\n        return value.onUnresolved(() -> parameter);\n    }", "signature": "PipelineElement apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "full_signature": "@Override public PipelineElement apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "class_method_signature": "PipelineFunctionDefault.apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false, "invocations": ["parseAndResolveThrow", "onUnresolved"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}