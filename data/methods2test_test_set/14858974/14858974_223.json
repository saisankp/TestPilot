{"test_class": {"identifier": "DependencyListViewTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/axway/grapes/server/webapp/views/DependencyListViewTest.java"}, "test_case": {"identifier": "checkEmptyDependencyList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkEmptyDependencyList(){\n        final DependencyListView depList = new DependencyListView(\"test\",\n                new Decorator(),\n                mock(LicenseMatcher.class),\n                mock(ModelMapper.class),\n                \"DependencyListView.ftl\");\n        final Table results = depList.getTable();\n\n        assertNotNull(results);\n        assertEquals(0, results.size());\n    }", "signature": "void checkEmptyDependencyList()", "full_signature": "@Test public void checkEmptyDependencyList()", "class_method_signature": "DependencyListViewTest.checkEmptyDependencyList()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "getTable", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "DependencyListView", "superclass": "extends View", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DependencyListView.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DependencyListView.class)", "var_name": "LOG"}, {"original_string": "public static final String NOT_IDENTIFIED_YET = \"not identified yet\";", "modifier": "public static final", "type": "String", "declarator": "NOT_IDENTIFIED_YET = \"not identified yet\"", "var_name": "NOT_IDENTIFIED_YET"}, {"original_string": "private final String title;", "modifier": "private final", "type": "String", "declarator": "title", "var_name": "title"}, {"original_string": "private final ModelMapper mapper;", "modifier": "private final", "type": "ModelMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private LicenseMatcher licenseMatcher;", "modifier": "private", "type": "LicenseMatcher", "declarator": "licenseMatcher", "var_name": "licenseMatcher"}, {"original_string": "private Decorator decorator;", "modifier": "private", "type": "Decorator", "declarator": "decorator", "var_name": "decorator"}, {"original_string": "public static final String SOURCE_FIELD = \"Source\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_FIELD = \"Source\"", "var_name": "SOURCE_FIELD"}, {"original_string": "public static final String SOURCE_VERSION_FIELD = \"Source Version\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_VERSION_FIELD = \"Source Version\"", "var_name": "SOURCE_VERSION_FIELD"}, {"original_string": "public static final String TARGET_FIELD = \"Target\";", "modifier": "public static final", "type": "String", "declarator": "TARGET_FIELD = \"Target\"", "var_name": "TARGET_FIELD"}, {"original_string": "public static final String DOWNLOAD_URL_FIELD = \"Download Url\";", "modifier": "public static final", "type": "String", "declarator": "DOWNLOAD_URL_FIELD = \"Download Url\"", "var_name": "DOWNLOAD_URL_FIELD"}, {"original_string": "public static final String SIZE_FIELD = \"Size\";", "modifier": "public static final", "type": "String", "declarator": "SIZE_FIELD = \"Size\"", "var_name": "SIZE_FIELD"}, {"original_string": "public static final String SCOPE_FIELD = \"Scope\";", "modifier": "public static final", "type": "String", "declarator": "SCOPE_FIELD = \"Scope\"", "var_name": "SCOPE_FIELD"}, {"original_string": "public static final String LICENSE_FIELD = \"License\";", "modifier": "public static final", "type": "String", "declarator": "LICENSE_FIELD = \"License\"", "var_name": "LICENSE_FIELD"}, {"original_string": "public static final String LICENSE_LONG_NAME_FIELD = \"License Full Name\";", "modifier": "public static final", "type": "String", "declarator": "LICENSE_LONG_NAME_FIELD = \"License Full Name\"", "var_name": "LICENSE_LONG_NAME_FIELD"}, {"original_string": "public static final String LICENSE_URL_FIELD = \"License Url\";", "modifier": "public static final", "type": "String", "declarator": "LICENSE_URL_FIELD = \"License Url\"", "var_name": "LICENSE_URL_FIELD"}, {"original_string": "public static final String LICENSE_COMMENT_FIELD = \"License Comment\";", "modifier": "public static final", "type": "String", "declarator": "LICENSE_COMMENT_FIELD = \"License Comment\"", "var_name": "LICENSE_COMMENT_FIELD"}, {"original_string": "private final List<Dependency> dependencies = new ArrayList<>();", "modifier": "private final", "type": "List<Dependency>", "declarator": "dependencies = new ArrayList<>()", "var_name": "dependencies"}], "methods": [{"identifier": "DependencyListView", "parameters": "(final String title,\n                              final Decorator decorator,\n                              final LicenseMatcher licenseMatcher,\n                              final ModelMapper mapper,\n                              final String templateName)", "modifiers": "public", "return": "", "signature": " DependencyListView(final String title,\n                              final Decorator decorator,\n                              final LicenseMatcher licenseMatcher,\n                              final ModelMapper mapper,\n                              final String templateName)", "full_signature": "public  DependencyListView(final String title,\n                              final Decorator decorator,\n                              final LicenseMatcher licenseMatcher,\n                              final ModelMapper mapper,\n                              final String templateName)", "class_method_signature": "DependencyListView.DependencyListView(final String title,\n                              final Decorator decorator,\n                              final LicenseMatcher licenseMatcher,\n                              final ModelMapper mapper,\n                              final String templateName)", "testcase": false, "constructor": true}, {"identifier": "getTitle", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTitle()", "full_signature": "public String getTitle()", "class_method_signature": "DependencyListView.getTitle()", "testcase": false, "constructor": false}, {"identifier": "addDependency", "parameters": "(final Dependency dependency)", "modifiers": "public", "return": "void", "signature": "void addDependency(final Dependency dependency)", "full_signature": "public void addDependency(final Dependency dependency)", "class_method_signature": "DependencyListView.addDependency(final Dependency dependency)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(final List<Dependency> dependencies)", "modifiers": "public", "return": "void", "signature": "void addAll(final List<Dependency> dependencies)", "full_signature": "public void addAll(final List<Dependency> dependencies)", "class_method_signature": "DependencyListView.addAll(final List<Dependency> dependencies)", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "public", "return": "List<Dependency>", "signature": "List<Dependency> getDependencies()", "full_signature": "public List<Dependency> getDependencies()", "class_method_signature": "DependencyListView.getDependencies()", "testcase": false, "constructor": false}, {"identifier": "getTable", "parameters": "()", "modifiers": "public", "return": "Table", "signature": "Table getTable()", "full_signature": "public Table getTable()", "class_method_signature": "DependencyListView.getTable()", "testcase": false, "constructor": false}, {"identifier": "getLicense", "parameters": "(final String licenseId)", "modifiers": "private", "return": "License", "signature": "License getLicense(final String licenseId)", "full_signature": "private License getLicense(final String licenseId)", "class_method_signature": "DependencyListView.getLicense(final String licenseId)", "testcase": false, "constructor": false}, {"identifier": "getHeaders", "parameters": "()", "modifiers": "private", "return": "String[]", "signature": "String[] getHeaders()", "full_signature": "private String[] getHeaders()", "class_method_signature": "DependencyListView.getHeaders()", "testcase": false, "constructor": false}, {"identifier": "getDependencyCells", "parameters": "(final Dependency dependency, final License license)", "modifiers": "private", "return": "String[]", "signature": "String[] getDependencyCells(final Dependency dependency, final License license)", "full_signature": "private String[] getDependencyCells(final Dependency dependency, final License license)", "class_method_signature": "DependencyListView.getDependencyCells(final Dependency dependency, final License license)", "testcase": false, "constructor": false}, {"identifier": "getArtifactLink", "parameters": "(String gavc)", "modifiers": "public", "return": "String", "signature": "String getArtifactLink(String gavc)", "full_signature": "public String getArtifactLink(String gavc)", "class_method_signature": "DependencyListView.getArtifactLink(String gavc)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/webapp/views/DependencyListView.java"}, "focal_method": {"identifier": "getTable", "parameters": "()", "modifiers": "public", "return": "Table", "body": "public Table getTable(){\n        final Table table = new Table(getHeaders());\n\n        // Create row(s) per dependency\n        for(final Dependency dependency: dependencies){\n            final List<String> licenseIds = dependency.getTarget().getLicenses();\n\n            // A dependency can have many rows if it has many licenses\n            if(licenseIds.isEmpty()){\n                table.addRow(getDependencyCells(dependency, DataModelFactory.createLicense(\"\",\"\",\"\",\"\",\"\")));\n            }\n            else{\n                for(final String licenseId: dependency.getTarget().getLicenses()){\n                    final License license = getLicense(licenseId);\n                    table.addRow(getDependencyCells(dependency, license));\n                }\n            }\n        }\n\n        return table;\n    }", "signature": "Table getTable()", "full_signature": "public Table getTable()", "class_method_signature": "DependencyListView.getTable()", "testcase": false, "constructor": false, "invocations": ["getHeaders", "getLicenses", "getTarget", "isEmpty", "addRow", "getDependencyCells", "createLicense", "getLicenses", "getTarget", "getLicense", "addRow", "getDependencyCells"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}