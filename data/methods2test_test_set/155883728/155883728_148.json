{"test_class": {"identifier": "ResultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String specialLoggerInfo = \"oakpal_special.info\";", "modifier": "private static final", "type": "String", "declarator": "specialLoggerInfo = \"oakpal_special.info\"", "var_name": "specialLoggerInfo"}, {"original_string": "private static final String specialLoggerError = \"oakpal_special.error\";", "modifier": "private static final", "type": "String", "declarator": "specialLoggerError = \"oakpal_special.error\"", "var_name": "specialLoggerError"}], "file": "api/src/test/java/net/adamcin/oakpal/api/ResultTest.java"}, "test_case": {"identifier": "testIsSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsSuccess() {\n        assertTrue(\"success is success\", Result.success(\"success\").isSuccess());\n        assertFalse(\"failure is not success\", Result.failure(\"failure\").isSuccess());\n    }", "signature": "void testIsSuccess()", "full_signature": "@Test public void testIsSuccess()", "class_method_signature": "ResultTest.testIsSuccess()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isSuccess", "success", "assertFalse", "isSuccess", "failure"]}, "focal_class": {"identifier": "Result", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Result.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Result.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "Result", "parameters": "()", "modifiers": "private", "return": "", "signature": " Result()", "full_signature": "private  Result()", "class_method_signature": "Result.Result()", "testcase": false, "constructor": true}, {"identifier": "map", "parameters": "(final @NotNull Function<? super V, W> f)", "modifiers": "public abstract", "return": "Result<W>", "signature": "Result<W> map(final @NotNull Function<? super V, W> f)", "full_signature": "public abstract Result<W> map(final @NotNull Function<? super V, W> f)", "class_method_signature": "Result.map(final @NotNull Function<? super V, W> f)", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(final @NotNull Function<? super V, Result<W>> f)", "modifiers": "public abstract", "return": "Result<W>", "signature": "Result<W> flatMap(final @NotNull Function<? super V, Result<W>> f)", "full_signature": "public abstract Result<W> flatMap(final @NotNull Function<? super V, Result<W>> f)", "class_method_signature": "Result.flatMap(final @NotNull Function<? super V, Result<W>> f)", "testcase": false, "constructor": false}, {"identifier": "getOrDefault", "parameters": "(final V defaultValue)", "modifiers": "public abstract", "return": "V", "signature": "V getOrDefault(final V defaultValue)", "full_signature": "public abstract V getOrDefault(final V defaultValue)", "class_method_signature": "Result.getOrDefault(final V defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getOrElse", "parameters": "(final @NotNull Supplier<? extends V> defaultValue)", "modifiers": "public abstract", "return": "V", "signature": "V getOrElse(final @NotNull Supplier<? extends V> defaultValue)", "full_signature": "public abstract V getOrElse(final @NotNull Supplier<? extends V> defaultValue)", "class_method_signature": "Result.getOrElse(final @NotNull Supplier<? extends V> defaultValue)", "testcase": false, "constructor": false}, {"identifier": "orElse", "parameters": "(final @NotNull Supplier<Result<V>> defaultValue)", "modifiers": "public abstract", "return": "Result<V>", "signature": "Result<V> orElse(final @NotNull Supplier<Result<V>> defaultValue)", "full_signature": "public abstract Result<V> orElse(final @NotNull Supplier<Result<V>> defaultValue)", "class_method_signature": "Result.orElse(final @NotNull Supplier<Result<V>> defaultValue)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "public abstract", "return": "Stream<V>", "signature": "Stream<V> stream()", "full_signature": "public abstract Stream<V> stream()", "class_method_signature": "Result.stream()", "testcase": false, "constructor": false}, {"identifier": "teeLogError", "parameters": "()", "modifiers": "public abstract", "return": "Result<V>", "signature": "Result<V> teeLogError()", "full_signature": "public abstract Result<V> teeLogError()", "class_method_signature": "Result.teeLogError()", "testcase": false, "constructor": false}, {"identifier": "isSuccess", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isSuccess()", "full_signature": "public final boolean isSuccess()", "class_method_signature": "Result.isSuccess()", "testcase": false, "constructor": false}, {"identifier": "isFailure", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isFailure()", "full_signature": "public final boolean isFailure()", "class_method_signature": "Result.isFailure()", "testcase": false, "constructor": false}, {"identifier": "toOptional", "parameters": "()", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public final", "return": "Optional<V>", "signature": "Optional<V> toOptional()", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public final Optional<V> toOptional()", "class_method_signature": "Result.toOptional()", "testcase": false, "constructor": false}, {"identifier": "getError", "parameters": "()", "modifiers": "public abstract", "return": "Optional<RuntimeException>", "signature": "Optional<RuntimeException> getError()", "full_signature": "public abstract Optional<RuntimeException> getError()", "class_method_signature": "Result.getError()", "testcase": false, "constructor": false}, {"identifier": "findCause", "parameters": "(final @NotNull Predicate<? super Throwable> predicate)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public final", "return": "Optional<Throwable>", "signature": "Optional<Throwable> findCause(final @NotNull Predicate<? super Throwable> predicate)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public final Optional<Throwable> findCause(final @NotNull Predicate<? super Throwable> predicate)", "class_method_signature": "Result.findCause(final @NotNull Predicate<? super Throwable> predicate)", "testcase": false, "constructor": false}, {"identifier": "findCause", "parameters": "(final @NotNull Class<E> errorType)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public final", "return": "Optional<E>", "signature": "Optional<E> findCause(final @NotNull Class<E> errorType)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public final Optional<E> findCause(final @NotNull Class<E> errorType)", "class_method_signature": "Result.findCause(final @NotNull Class<E> errorType)", "testcase": false, "constructor": false}, {"identifier": "throwCause", "parameters": "(final @NotNull Class<E> errorType)", "modifiers": "public final", "return": "void", "signature": "void throwCause(final @NotNull Class<E> errorType)", "full_signature": "public final void throwCause(final @NotNull Class<E> errorType)", "class_method_signature": "Result.throwCause(final @NotNull Class<E> errorType)", "testcase": false, "constructor": false}, {"identifier": "causing", "parameters": "(final @NotNull Throwable caused)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") static", "return": "Stream<Throwable>", "signature": "Stream<Throwable> causing(final @NotNull Throwable caused)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") static Stream<Throwable> causing(final @NotNull Throwable caused)", "class_method_signature": "Result.causing(final @NotNull Throwable caused)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(final @NotNull Consumer<? super V> consumer)", "modifiers": "public abstract", "return": "void", "signature": "void forEach(final @NotNull Consumer<? super V> consumer)", "full_signature": "public abstract void forEach(final @NotNull Consumer<? super V> consumer)", "class_method_signature": "Result.forEach(final @NotNull Consumer<? super V> consumer)", "testcase": false, "constructor": false}, {"identifier": "failure", "parameters": "(final String message)", "modifiers": "public static", "return": "Result<V>", "signature": "Result<V> failure(final String message)", "full_signature": "public static Result<V> failure(final String message)", "class_method_signature": "Result.failure(final String message)", "testcase": false, "constructor": false}, {"identifier": "failure", "parameters": "(final @NotNull Exception e)", "modifiers": "public static", "return": "Result<V>", "signature": "Result<V> failure(final @NotNull Exception e)", "full_signature": "public static Result<V> failure(final @NotNull Exception e)", "class_method_signature": "Result.failure(final @NotNull Exception e)", "testcase": false, "constructor": false}, {"identifier": "failure", "parameters": "(final @NotNull String message, final @NotNull Exception e)", "modifiers": "public static", "return": "Result<V>", "signature": "Result<V> failure(final @NotNull String message, final @NotNull Exception e)", "full_signature": "public static Result<V> failure(final @NotNull String message, final @NotNull Exception e)", "class_method_signature": "Result.failure(final @NotNull String message, final @NotNull Exception e)", "testcase": false, "constructor": false}, {"identifier": "failure", "parameters": "(final @NotNull RuntimeException e)", "modifiers": "public static", "return": "Result<V>", "signature": "Result<V> failure(final @NotNull RuntimeException e)", "full_signature": "public static Result<V> failure(final @NotNull RuntimeException e)", "class_method_signature": "Result.failure(final @NotNull RuntimeException e)", "testcase": false, "constructor": false}, {"identifier": "success", "parameters": "(final V value)", "modifiers": "public static", "return": "Result<V>", "signature": "Result<V> success(final V value)", "full_signature": "public static Result<V> success(final V value)", "class_method_signature": "Result.success(final V value)", "testcase": false, "constructor": false}, {"identifier": "tryCollect", "parameters": "(final @NotNull Collector<V, A, R> collector)", "modifiers": "public static", "return": "Collector<Result<V>, Builder<V, A>, Result<R>>", "signature": "Collector<Result<V>, Builder<V, A>, Result<R>> tryCollect(final @NotNull Collector<V, A, R> collector)", "full_signature": "public static Collector<Result<V>, Builder<V, A>, Result<R>> tryCollect(final @NotNull Collector<V, A, R> collector)", "class_method_signature": "Result.tryCollect(final @NotNull Collector<V, A, R> collector)", "testcase": false, "constructor": false}, {"identifier": "logAndRestream", "parameters": "()", "modifiers": "public static", "return": "Collector<Result<V>, Stream.Builder<Result<V>>, Stream<Result<V>>>", "signature": "Collector<Result<V>, Stream.Builder<Result<V>>, Stream<Result<V>>> logAndRestream()", "full_signature": "public static Collector<Result<V>, Stream.Builder<Result<V>>, Stream<Result<V>>> logAndRestream()", "class_method_signature": "Result.logAndRestream()", "testcase": false, "constructor": false}, {"identifier": "logAndRestream", "parameters": "(final @NotNull String message)", "modifiers": "public static", "return": "Collector<Result<V>, Stream.Builder<Result<V>>, Stream<Result<V>>>", "signature": "Collector<Result<V>, Stream.Builder<Result<V>>, Stream<Result<V>>> logAndRestream(final @NotNull String message)", "full_signature": "public static Collector<Result<V>, Stream.Builder<Result<V>>, Stream<Result<V>>> logAndRestream(final @NotNull String message)", "class_method_signature": "Result.logAndRestream(final @NotNull String message)", "testcase": false, "constructor": false}], "file": "api/src/main/java/net/adamcin/oakpal/api/Result.java"}, "focal_method": {"identifier": "isSuccess", "parameters": "()", "modifiers": "public final", "return": "boolean", "body": "public final boolean isSuccess() {\n        return !isFailure();\n    }", "signature": "boolean isSuccess()", "full_signature": "public final boolean isSuccess()", "class_method_signature": "Result.isSuccess()", "testcase": false, "constructor": false, "invocations": ["isFailure"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}