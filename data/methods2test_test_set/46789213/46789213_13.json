{"test_class": {"identifier": "TestSpdzDummyDataSupplier", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<FieldDefinition> fields = Arrays.asList(\n      new BigIntegerFieldDefinition(new BigInteger(\"251\")),\n      new BigIntegerFieldDefinition(ModulusFinder.findSuitableModulus(8)),\n      new BigIntegerFieldDefinition(ModulusFinder.findSuitableModulus(16))\n  );", "modifier": "private final", "type": "List<FieldDefinition>", "declarator": "fields = Arrays.asList(\n      new BigIntegerFieldDefinition(new BigInteger(\"251\")),\n      new BigIntegerFieldDefinition(ModulusFinder.findSuitableModulus(8)),\n      new BigIntegerFieldDefinition(ModulusFinder.findSuitableModulus(16))\n  )", "var_name": "fields"}], "file": "suite/spdz/src/test/java/dk/alexandra/fresco/suite/spdz/storage/TestSpdzDummyDataSupplier.java"}, "test_case": {"identifier": "testGetters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetters() {\n    FieldDefinition fieldDefinition = fields.get(0);\n    SpdzDummyDataSupplier supplier =\n        new SpdzDummyDataSupplier(1, 2, fieldDefinition, BigInteger.ONE);\n    assertEquals(BigInteger.ONE,\n        fieldDefinition.convertToUnsigned(supplier.getSecretSharedKey()));\n  }", "signature": "void testGetters()", "full_signature": "@Test public void testGetters()", "class_method_signature": "TestSpdzDummyDataSupplier.testGetters()", "testcase": true, "constructor": false, "invocations": ["get", "assertEquals", "convertToUnsigned", "getSecretSharedKey"]}, "focal_class": {"identifier": "SpdzDummyDataSupplier", "superclass": "", "interfaces": "implements SpdzDataSupplier", "fields": [{"original_string": "private final int myId;", "modifier": "private final", "type": "int", "declarator": "myId", "var_name": "myId"}, {"original_string": "private final ArithmeticDummyDataSupplier supplier;", "modifier": "private final", "type": "ArithmeticDummyDataSupplier", "declarator": "supplier", "var_name": "supplier"}, {"original_string": "private final FieldDefinition fieldDefinition;", "modifier": "private final", "type": "FieldDefinition", "declarator": "fieldDefinition", "var_name": "fieldDefinition"}, {"original_string": "private final BigInteger secretSharedKey;", "modifier": "private final", "type": "BigInteger", "declarator": "secretSharedKey", "var_name": "secretSharedKey"}, {"original_string": "private final int expPipeLength;", "modifier": "private final", "type": "int", "declarator": "expPipeLength", "var_name": "expPipeLength"}, {"original_string": "private final ModularReductionAlgorithm reducer;", "modifier": "private final", "type": "ModularReductionAlgorithm", "declarator": "reducer", "var_name": "reducer"}], "methods": [{"identifier": "SpdzDummyDataSupplier", "parameters": "(int myId, int noOfPlayers, FieldDefinition fieldDefinition,\n      BigInteger secretSharedKey)", "modifiers": "public", "return": "", "signature": " SpdzDummyDataSupplier(int myId, int noOfPlayers, FieldDefinition fieldDefinition,\n      BigInteger secretSharedKey)", "full_signature": "public  SpdzDummyDataSupplier(int myId, int noOfPlayers, FieldDefinition fieldDefinition,\n      BigInteger secretSharedKey)", "class_method_signature": "SpdzDummyDataSupplier.SpdzDummyDataSupplier(int myId, int noOfPlayers, FieldDefinition fieldDefinition,\n      BigInteger secretSharedKey)", "testcase": false, "constructor": true}, {"identifier": "SpdzDummyDataSupplier", "parameters": "(int myId, int noOfPlayers, FieldDefinition fieldDefinition,\n      BigInteger secretSharedKey, int expPipeLength)", "modifiers": "public", "return": "", "signature": " SpdzDummyDataSupplier(int myId, int noOfPlayers, FieldDefinition fieldDefinition,\n      BigInteger secretSharedKey, int expPipeLength)", "full_signature": "public  SpdzDummyDataSupplier(int myId, int noOfPlayers, FieldDefinition fieldDefinition,\n      BigInteger secretSharedKey, int expPipeLength)", "class_method_signature": "SpdzDummyDataSupplier.SpdzDummyDataSupplier(int myId, int noOfPlayers, FieldDefinition fieldDefinition,\n      BigInteger secretSharedKey, int expPipeLength)", "testcase": false, "constructor": true}, {"identifier": "getNextTriple", "parameters": "()", "modifiers": "@Override public", "return": "SpdzTriple", "signature": "SpdzTriple getNextTriple()", "full_signature": "@Override public SpdzTriple getNextTriple()", "class_method_signature": "SpdzDummyDataSupplier.getNextTriple()", "testcase": false, "constructor": false}, {"identifier": "getNextExpPipe", "parameters": "()", "modifiers": "@Override public", "return": "SpdzSInt[]", "signature": "SpdzSInt[] getNextExpPipe()", "full_signature": "@Override public SpdzSInt[] getNextExpPipe()", "class_method_signature": "SpdzDummyDataSupplier.getNextExpPipe()", "testcase": false, "constructor": false}, {"identifier": "getNextInputMask", "parameters": "(int towardPlayerId)", "modifiers": "@Override public", "return": "SpdzInputMask", "signature": "SpdzInputMask getNextInputMask(int towardPlayerId)", "full_signature": "@Override public SpdzInputMask getNextInputMask(int towardPlayerId)", "class_method_signature": "SpdzDummyDataSupplier.getNextInputMask(int towardPlayerId)", "testcase": false, "constructor": false}, {"identifier": "getNextBit", "parameters": "()", "modifiers": "@Override public", "return": "SpdzSInt", "signature": "SpdzSInt getNextBit()", "full_signature": "@Override public SpdzSInt getNextBit()", "class_method_signature": "SpdzDummyDataSupplier.getNextBit()", "testcase": false, "constructor": false}, {"identifier": "getFieldDefinition", "parameters": "()", "modifiers": "@Override public", "return": "FieldDefinition", "signature": "FieldDefinition getFieldDefinition()", "full_signature": "@Override public FieldDefinition getFieldDefinition()", "class_method_signature": "SpdzDummyDataSupplier.getFieldDefinition()", "testcase": false, "constructor": false}, {"identifier": "getSecretSharedKey", "parameters": "()", "modifiers": "@Override public", "return": "FieldElement", "signature": "FieldElement getSecretSharedKey()", "full_signature": "@Override public FieldElement getSecretSharedKey()", "class_method_signature": "SpdzDummyDataSupplier.getSecretSharedKey()", "testcase": false, "constructor": false}, {"identifier": "getNextRandomFieldElement", "parameters": "()", "modifiers": "@Override public", "return": "SpdzSInt", "signature": "SpdzSInt getNextRandomFieldElement()", "full_signature": "@Override public SpdzSInt getNextRandomFieldElement()", "class_method_signature": "SpdzDummyDataSupplier.getNextRandomFieldElement()", "testcase": false, "constructor": false}, {"identifier": "toSpdzSInt", "parameters": "(Pair<BigInteger, BigInteger> raw)", "modifiers": "private", "return": "SpdzSInt", "signature": "SpdzSInt toSpdzSInt(Pair<BigInteger, BigInteger> raw)", "full_signature": "private SpdzSInt toSpdzSInt(Pair<BigInteger, BigInteger> raw)", "class_method_signature": "SpdzDummyDataSupplier.toSpdzSInt(Pair<BigInteger, BigInteger> raw)", "testcase": false, "constructor": false}, {"identifier": "createElement", "parameters": "(BigInteger value)", "modifiers": "private", "return": "FieldElement", "signature": "FieldElement createElement(BigInteger value)", "full_signature": "private FieldElement createElement(BigInteger value)", "class_method_signature": "SpdzDummyDataSupplier.createElement(BigInteger value)", "testcase": false, "constructor": false}], "file": "suite/spdz/src/main/java/dk/alexandra/fresco/suite/spdz/storage/SpdzDummyDataSupplier.java"}, "focal_method": {"identifier": "getSecretSharedKey", "parameters": "()", "modifiers": "@Override public", "return": "FieldElement", "body": "@Override\n  public FieldElement getSecretSharedKey() {\n    return createElement(secretSharedKey);\n  }", "signature": "FieldElement getSecretSharedKey()", "full_signature": "@Override public FieldElement getSecretSharedKey()", "class_method_signature": "SpdzDummyDataSupplier.getSecretSharedKey()", "testcase": false, "constructor": false, "invocations": ["createElement"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}