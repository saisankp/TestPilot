{"test_class": {"identifier": "CompositeExceptionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Throwable ex1 = new Throwable(\"Ex1\");", "modifier": "private final", "type": "Throwable", "declarator": "ex1 = new Throwable(\"Ex1\")", "var_name": "ex1"}, {"original_string": "private final Throwable ex2 = new Throwable(\"Ex2\", ex1);", "modifier": "private final", "type": "Throwable", "declarator": "ex2 = new Throwable(\"Ex2\", ex1)", "var_name": "ex2"}, {"original_string": "private final Throwable ex3 = new Throwable(\"Ex3\", ex2);", "modifier": "private final", "type": "Throwable", "declarator": "ex3 = new Throwable(\"Ex3\", ex2)", "var_name": "ex3"}], "file": "rxjava/src/test/java/io/reactivex/exceptions/CompositeExceptionTest.java"}, "test_case": {"identifier": "rootCauseEval", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rootCauseEval() {\n        final TestException ex0 = new TestException();\n        Throwable throwable = new Throwable() {\n\n            private static final long serialVersionUID = 3597694032723032281L;\n\n            @Override\n            public synchronized Throwable getCause() {\n                return ex0;\n            }\n        };\n        CompositeException ex = new CompositeException(throwable);\n        assertSame(ex, ex.getRootCause(ex));\n    }", "signature": "void rootCauseEval()", "full_signature": "@Test public void rootCauseEval()", "class_method_signature": "CompositeExceptionTest.rootCauseEval()", "testcase": true, "constructor": false, "invocations": ["assertSame", "getRootCause"]}, "focal_class": {"identifier": "CompositeException", "superclass": "extends RuntimeException", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 3026362227162912146L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 3026362227162912146L", "var_name": "serialVersionUID"}, {"original_string": "private final List<Throwable> exceptions;", "modifier": "private final", "type": "List<Throwable>", "declarator": "exceptions", "var_name": "exceptions"}, {"original_string": "private final String message;", "modifier": "private final", "type": "String", "declarator": "message", "var_name": "message"}, {"original_string": "private Throwable cause;", "modifier": "private", "type": "Throwable", "declarator": "cause", "var_name": "cause"}], "methods": [{"identifier": "CompositeException", "parameters": "(@NonNull Throwable... exceptions)", "modifiers": "public", "return": "", "signature": " CompositeException(@NonNull Throwable... exceptions)", "full_signature": "public  CompositeException(@NonNull Throwable... exceptions)", "class_method_signature": "CompositeException.CompositeException(@NonNull Throwable... exceptions)", "testcase": false, "constructor": true}, {"identifier": "CompositeException", "parameters": "(@NonNull Iterable<? extends Throwable> errors)", "modifiers": "public", "return": "", "signature": " CompositeException(@NonNull Iterable<? extends Throwable> errors)", "full_signature": "public  CompositeException(@NonNull Iterable<? extends Throwable> errors)", "class_method_signature": "CompositeException.CompositeException(@NonNull Iterable<? extends Throwable> errors)", "testcase": false, "constructor": true}, {"identifier": "getExceptions", "parameters": "()", "modifiers": "@NonNull public", "return": "List<Throwable>", "signature": "List<Throwable> getExceptions()", "full_signature": "@NonNull public List<Throwable> getExceptions()", "class_method_signature": "CompositeException.getExceptions()", "testcase": false, "constructor": false}, {"identifier": "getMessage", "parameters": "()", "modifiers": "@Override @NonNull public", "return": "String", "signature": "String getMessage()", "full_signature": "@Override @NonNull public String getMessage()", "class_method_signature": "CompositeException.getMessage()", "testcase": false, "constructor": false}, {"identifier": "getCause", "parameters": "()", "modifiers": "@Override @NonNull public synchronized", "return": "Throwable", "signature": "Throwable getCause()", "full_signature": "@Override @NonNull public synchronized Throwable getCause()", "class_method_signature": "CompositeException.getCause()", "testcase": false, "constructor": false}, {"identifier": "printStackTrace", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void printStackTrace()", "full_signature": "@Override public void printStackTrace()", "class_method_signature": "CompositeException.printStackTrace()", "testcase": false, "constructor": false}, {"identifier": "printStackTrace", "parameters": "(PrintStream s)", "modifiers": "@Override public", "return": "void", "signature": "void printStackTrace(PrintStream s)", "full_signature": "@Override public void printStackTrace(PrintStream s)", "class_method_signature": "CompositeException.printStackTrace(PrintStream s)", "testcase": false, "constructor": false}, {"identifier": "printStackTrace", "parameters": "(PrintWriter s)", "modifiers": "@Override public", "return": "void", "signature": "void printStackTrace(PrintWriter s)", "full_signature": "@Override public void printStackTrace(PrintWriter s)", "class_method_signature": "CompositeException.printStackTrace(PrintWriter s)", "testcase": false, "constructor": false}, {"identifier": "printStackTrace", "parameters": "(PrintStreamOrWriter s)", "modifiers": "private", "return": "void", "signature": "void printStackTrace(PrintStreamOrWriter s)", "full_signature": "private void printStackTrace(PrintStreamOrWriter s)", "class_method_signature": "CompositeException.printStackTrace(PrintStreamOrWriter s)", "testcase": false, "constructor": false}, {"identifier": "appendStackTrace", "parameters": "(StringBuilder b, Throwable ex, String prefix)", "modifiers": "private", "return": "void", "signature": "void appendStackTrace(StringBuilder b, Throwable ex, String prefix)", "full_signature": "private void appendStackTrace(StringBuilder b, Throwable ex, String prefix)", "class_method_signature": "CompositeException.appendStackTrace(StringBuilder b, Throwable ex, String prefix)", "testcase": false, "constructor": false}, {"identifier": "getListOfCauses", "parameters": "(Throwable ex)", "modifiers": "private", "return": "List<Throwable>", "signature": "List<Throwable> getListOfCauses(Throwable ex)", "full_signature": "private List<Throwable> getListOfCauses(Throwable ex)", "class_method_signature": "CompositeException.getListOfCauses(Throwable ex)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "CompositeException.size()", "testcase": false, "constructor": false}, {"identifier": "getRootCause", "parameters": "(Throwable e)", "modifiers": "", "return": "Throwable", "signature": "Throwable getRootCause(Throwable e)", "full_signature": " Throwable getRootCause(Throwable e)", "class_method_signature": "CompositeException.getRootCause(Throwable e)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/exceptions/CompositeException.java"}, "focal_method": {"identifier": "getRootCause", "parameters": "(Throwable e)", "modifiers": "", "return": "Throwable", "body": "Throwable getRootCause(Throwable e) {\n        Throwable root = e.getCause();\n        if (root == null || cause == root) {\n            return e;\n        }\n        while (true) {\n            Throwable cause = root.getCause();\n            if (cause == null || cause == root) {\n                return root;\n            }\n            root = cause;\n        }\n    }", "signature": "Throwable getRootCause(Throwable e)", "full_signature": " Throwable getRootCause(Throwable e)", "class_method_signature": "CompositeException.getRootCause(Throwable e)", "testcase": false, "constructor": false, "invocations": ["getCause", "getCause"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}