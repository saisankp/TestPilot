{"test_class": {"identifier": "TestHCatUtil", "superclass": "", "interfaces": "", "fields": [], "file": "hcatalog/core/src/test/java/org/apache/hive/hcatalog/common/TestHCatUtil.java"}, "test_case": {"identifier": "testGetTableSchemaWithPtnColsSerDeReportedFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetTableSchemaWithPtnColsSerDeReportedFields() throws IOException {\n    Map<String, String> parameters = Maps.newHashMap();\n    parameters.put(serdeConstants.SERIALIZATION_CLASS,\n        \"org.apache.hadoop.hive.serde2.thrift.test.IntString\");\n    parameters.put(serdeConstants.SERIALIZATION_FORMAT, \"org.apache.thrift.protocol.TBinaryProtocol\");\n\n    SerDeInfo serDeInfo = new SerDeInfo(null,\n        \"org.apache.hadoop.hive.serde2.thrift.ThriftDeserializer\", parameters);\n\n    // StorageDescriptor has an empty list of fields - SerDe will report them.\n    StorageDescriptor sd = new StorageDescriptor(new ArrayList<FieldSchema>(), \"location\",\n        \"org.apache.hadoop.mapred.TextInputFormat\", \"org.apache.hadoop.mapred.TextOutputFormat\",\n        false, -1, serDeInfo, new ArrayList<String>(), new ArrayList<Order>(),\n        new HashMap<String, String>());\n\n    org.apache.hadoop.hive.metastore.api.Table apiTable =\n        new org.apache.hadoop.hive.metastore.api.Table(\"test_tblname\", \"test_dbname\", \"test_owner\",\n            0, 0, 0, sd, new ArrayList<FieldSchema>(), new HashMap<String, String>(),\n            \"viewOriginalText\", \"viewExpandedText\", TableType.EXTERNAL_TABLE.name());\n    Table table = new Table(apiTable);\n\n    List<HCatFieldSchema> expectedHCatSchema = Lists.newArrayList(\n        new HCatFieldSchema(\"myint\", HCatFieldSchema.Type.INT, null),\n        new HCatFieldSchema(\"mystring\", HCatFieldSchema.Type.STRING, null),\n        new HCatFieldSchema(\"underscore_int\", HCatFieldSchema.Type.INT, null));\n\n    Assert.assertEquals(new HCatSchema(expectedHCatSchema),\n        HCatUtil.getTableSchemaWithPtnCols(table));\n  }", "signature": "void testGetTableSchemaWithPtnColsSerDeReportedFields()", "full_signature": "@Test public void testGetTableSchemaWithPtnColsSerDeReportedFields()", "class_method_signature": "TestHCatUtil.testGetTableSchemaWithPtnColsSerDeReportedFields()", "testcase": true, "constructor": false, "invocations": ["newHashMap", "put", "put", "name", "newArrayList", "assertEquals", "getTableSchemaWithPtnCols"]}, "focal_class": {"identifier": "HCatUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(HCatUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(HCatUtil.class)", "var_name": "LOG"}, {"original_string": "private static volatile HiveClientCache hiveClientCache;", "modifier": "private static volatile", "type": "HiveClientCache", "declarator": "hiveClientCache", "var_name": "hiveClientCache"}, {"original_string": "private final static int DEFAULT_HIVE_CACHE_EXPIRY_TIME_SECONDS = 2 * 60;", "modifier": "private final static", "type": "int", "declarator": "DEFAULT_HIVE_CACHE_EXPIRY_TIME_SECONDS = 2 * 60", "var_name": "DEFAULT_HIVE_CACHE_EXPIRY_TIME_SECONDS"}], "methods": [{"identifier": "checkJobContextIfRunningFromBackend", "parameters": "(JobContext j)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkJobContextIfRunningFromBackend(JobContext j)", "full_signature": "public static boolean checkJobContextIfRunningFromBackend(JobContext j)", "class_method_signature": "HCatUtil.checkJobContextIfRunningFromBackend(JobContext j)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Serializable obj)", "modifiers": "public static", "return": "String", "signature": "String serialize(Serializable obj)", "full_signature": "public static String serialize(Serializable obj)", "class_method_signature": "HCatUtil.serialize(Serializable obj)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(String str)", "modifiers": "public static", "return": "Object", "signature": "Object deserialize(String str)", "full_signature": "public static Object deserialize(String str)", "class_method_signature": "HCatUtil.deserialize(String str)", "testcase": false, "constructor": false}, {"identifier": "encodeBytes", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String encodeBytes(byte[] bytes)", "full_signature": "public static String encodeBytes(byte[] bytes)", "class_method_signature": "HCatUtil.encodeBytes(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "decodeBytes", "parameters": "(String str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decodeBytes(String str)", "full_signature": "public static byte[] decodeBytes(String str)", "class_method_signature": "HCatUtil.decodeBytes(String str)", "testcase": false, "constructor": false}, {"identifier": "getHCatFieldSchemaList", "parameters": "(\n    FieldSchema... fields)", "modifiers": "public static", "return": "List<HCatFieldSchema>", "signature": "List<HCatFieldSchema> getHCatFieldSchemaList(\n    FieldSchema... fields)", "full_signature": "public static List<HCatFieldSchema> getHCatFieldSchemaList(\n    FieldSchema... fields)", "class_method_signature": "HCatUtil.getHCatFieldSchemaList(\n    FieldSchema... fields)", "testcase": false, "constructor": false}, {"identifier": "getHCatFieldSchemaList", "parameters": "(\n    List<FieldSchema> fields)", "modifiers": "public static", "return": "List<HCatFieldSchema>", "signature": "List<HCatFieldSchema> getHCatFieldSchemaList(\n    List<FieldSchema> fields)", "full_signature": "public static List<HCatFieldSchema> getHCatFieldSchemaList(\n    List<FieldSchema> fields)", "class_method_signature": "HCatUtil.getHCatFieldSchemaList(\n    List<FieldSchema> fields)", "testcase": false, "constructor": false}, {"identifier": "extractSchema", "parameters": "(Table table)", "modifiers": "public static", "return": "HCatSchema", "signature": "HCatSchema extractSchema(Table table)", "full_signature": "public static HCatSchema extractSchema(Table table)", "class_method_signature": "HCatUtil.extractSchema(Table table)", "testcase": false, "constructor": false}, {"identifier": "extractSchema", "parameters": "(Partition partition)", "modifiers": "public static", "return": "HCatSchema", "signature": "HCatSchema extractSchema(Partition partition)", "full_signature": "public static HCatSchema extractSchema(Partition partition)", "class_method_signature": "HCatUtil.extractSchema(Partition partition)", "testcase": false, "constructor": false}, {"identifier": "getFieldSchemaList", "parameters": "(\n    List<HCatFieldSchema> hcatFields)", "modifiers": "public static", "return": "List<FieldSchema>", "signature": "List<FieldSchema> getFieldSchemaList(\n    List<HCatFieldSchema> hcatFields)", "full_signature": "public static List<FieldSchema> getFieldSchemaList(\n    List<HCatFieldSchema> hcatFields)", "class_method_signature": "HCatUtil.getFieldSchemaList(\n    List<HCatFieldSchema> hcatFields)", "testcase": false, "constructor": false}, {"identifier": "getTable", "parameters": "(HiveMetaStoreClient client, String dbName, String tableName)", "modifiers": "public static", "return": "Table", "signature": "Table getTable(HiveMetaStoreClient client, String dbName, String tableName)", "full_signature": "public static Table getTable(HiveMetaStoreClient client, String dbName, String tableName)", "class_method_signature": "HCatUtil.getTable(HiveMetaStoreClient client, String dbName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "getTableSchemaWithPtnCols", "parameters": "(Table table)", "modifiers": "public static", "return": "HCatSchema", "signature": "HCatSchema getTableSchemaWithPtnCols(Table table)", "full_signature": "public static HCatSchema getTableSchemaWithPtnCols(Table table)", "class_method_signature": "HCatUtil.getTableSchemaWithPtnCols(Table table)", "testcase": false, "constructor": false}, {"identifier": "getPartitionColumns", "parameters": "(Table table)", "modifiers": "public static", "return": "HCatSchema", "signature": "HCatSchema getPartitionColumns(Table table)", "full_signature": "public static HCatSchema getPartitionColumns(Table table)", "class_method_signature": "HCatUtil.getPartitionColumns(Table table)", "testcase": false, "constructor": false}, {"identifier": "validatePartitionSchema", "parameters": "(Table table,\n                              HCatSchema partitionSchema)", "modifiers": "public static", "return": "List<FieldSchema>", "signature": "List<FieldSchema> validatePartitionSchema(Table table,\n                              HCatSchema partitionSchema)", "full_signature": "public static List<FieldSchema> validatePartitionSchema(Table table,\n                              HCatSchema partitionSchema)", "class_method_signature": "HCatUtil.validatePartitionSchema(Table table,\n                              HCatSchema partitionSchema)", "testcase": false, "constructor": false}, {"identifier": "validateMorePermissive", "parameters": "(FsAction first, FsAction second)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateMorePermissive(FsAction first, FsAction second)", "full_signature": "public static boolean validateMorePermissive(FsAction first, FsAction second)", "class_method_signature": "HCatUtil.validateMorePermissive(FsAction first, FsAction second)", "testcase": false, "constructor": false}, {"identifier": "validateExecuteBitPresentIfReadOrWrite", "parameters": "(FsAction perms)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateExecuteBitPresentIfReadOrWrite(FsAction perms)", "full_signature": "public static boolean validateExecuteBitPresentIfReadOrWrite(FsAction perms)", "class_method_signature": "HCatUtil.validateExecuteBitPresentIfReadOrWrite(FsAction perms)", "testcase": false, "constructor": false}, {"identifier": "getJobTrackerDelegationToken", "parameters": "(\n    Configuration conf, String userName)", "modifiers": "public static", "return": "Token<org.apache.hadoop.mapreduce.security.token.delegation.DelegationTokenIdentifier>", "signature": "Token<org.apache.hadoop.mapreduce.security.token.delegation.DelegationTokenIdentifier> getJobTrackerDelegationToken(\n    Configuration conf, String userName)", "full_signature": "public static Token<org.apache.hadoop.mapreduce.security.token.delegation.DelegationTokenIdentifier> getJobTrackerDelegationToken(\n    Configuration conf, String userName)", "class_method_signature": "HCatUtil.getJobTrackerDelegationToken(\n    Configuration conf, String userName)", "testcase": false, "constructor": false}, {"identifier": "extractThriftToken", "parameters": "(\n    String tokenStrForm, String tokenSignature)", "modifiers": "public static", "return": "Token<? extends AbstractDelegationTokenIdentifier>", "signature": "Token<? extends AbstractDelegationTokenIdentifier> extractThriftToken(\n    String tokenStrForm, String tokenSignature)", "full_signature": "public static Token<? extends AbstractDelegationTokenIdentifier> extractThriftToken(\n    String tokenStrForm, String tokenSignature)", "class_method_signature": "HCatUtil.extractThriftToken(\n    String tokenStrForm, String tokenSignature)", "testcase": false, "constructor": false}, {"identifier": "getStorageHandler", "parameters": "(Configuration conf, StorerInfo storerInfo)", "modifiers": "public static", "return": "HiveStorageHandler", "signature": "HiveStorageHandler getStorageHandler(Configuration conf, StorerInfo storerInfo)", "full_signature": "public static HiveStorageHandler getStorageHandler(Configuration conf, StorerInfo storerInfo)", "class_method_signature": "HCatUtil.getStorageHandler(Configuration conf, StorerInfo storerInfo)", "testcase": false, "constructor": false}, {"identifier": "getStorageHandler", "parameters": "(Configuration conf, PartInfo partitionInfo)", "modifiers": "public static", "return": "HiveStorageHandler", "signature": "HiveStorageHandler getStorageHandler(Configuration conf, PartInfo partitionInfo)", "full_signature": "public static HiveStorageHandler getStorageHandler(Configuration conf, PartInfo partitionInfo)", "class_method_signature": "HCatUtil.getStorageHandler(Configuration conf, PartInfo partitionInfo)", "testcase": false, "constructor": false}, {"identifier": "getStorageHandler", "parameters": "(Configuration conf,\n                             String storageHandler,\n                             String serDe,\n                             String inputFormat,\n                             String outputFormat)", "modifiers": "public static", "return": "HiveStorageHandler", "signature": "HiveStorageHandler getStorageHandler(Configuration conf,\n                             String storageHandler,\n                             String serDe,\n                             String inputFormat,\n                             String outputFormat)", "full_signature": "public static HiveStorageHandler getStorageHandler(Configuration conf,\n                             String storageHandler,\n                             String serDe,\n                             String inputFormat,\n                             String outputFormat)", "class_method_signature": "HCatUtil.getStorageHandler(Configuration conf,\n                             String storageHandler,\n                             String serDe,\n                             String inputFormat,\n                             String outputFormat)", "testcase": false, "constructor": false}, {"identifier": "getDbAndTableName", "parameters": "(String tableName)", "modifiers": "public static", "return": "Pair<String, String>", "signature": "Pair<String, String> getDbAndTableName(String tableName)", "full_signature": "public static Pair<String, String> getDbAndTableName(String tableName)", "class_method_signature": "HCatUtil.getDbAndTableName(String tableName)", "testcase": false, "constructor": false}, {"identifier": "getInputJobProperties", "parameters": "(HiveStorageHandler storageHandler,\n      InputJobInfo inputJobInfo)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getInputJobProperties(HiveStorageHandler storageHandler,\n      InputJobInfo inputJobInfo)", "full_signature": "public static Map<String, String> getInputJobProperties(HiveStorageHandler storageHandler,\n      InputJobInfo inputJobInfo)", "class_method_signature": "HCatUtil.getInputJobProperties(HiveStorageHandler storageHandler,\n      InputJobInfo inputJobInfo)", "testcase": false, "constructor": false}, {"identifier": "configureOutputStorageHandler", "parameters": "(HiveStorageHandler storageHandler,\n                  Configuration conf,\n                  OutputJobInfo outputJobInfo)", "modifiers": "@InterfaceAudience.Private @InterfaceStability.Evolving public static", "return": "void", "signature": "void configureOutputStorageHandler(HiveStorageHandler storageHandler,\n                  Configuration conf,\n                  OutputJobInfo outputJobInfo)", "full_signature": "@InterfaceAudience.Private @InterfaceStability.Evolving public static void configureOutputStorageHandler(HiveStorageHandler storageHandler,\n                  Configuration conf,\n                  OutputJobInfo outputJobInfo)", "class_method_signature": "HCatUtil.configureOutputStorageHandler(HiveStorageHandler storageHandler,\n                  Configuration conf,\n                  OutputJobInfo outputJobInfo)", "testcase": false, "constructor": false}, {"identifier": "copyConf", "parameters": "(Configuration src, Configuration dest)", "modifiers": "public static", "return": "void", "signature": "void copyConf(Configuration src, Configuration dest)", "full_signature": "public static void copyConf(Configuration src, Configuration dest)", "class_method_signature": "HCatUtil.copyConf(Configuration src, Configuration dest)", "testcase": false, "constructor": false}, {"identifier": "getHiveClient", "parameters": "(HiveConf hiveConf)", "modifiers": "public static", "return": "HiveMetaStoreClient", "signature": "HiveMetaStoreClient getHiveClient(HiveConf hiveConf)", "full_signature": "public static HiveMetaStoreClient getHiveClient(HiveConf hiveConf)", "class_method_signature": "HCatUtil.getHiveClient(HiveConf hiveConf)", "testcase": false, "constructor": false}, {"identifier": "closeHiveClientQuietly", "parameters": "(HiveMetaStoreClient client)", "modifiers": "public static", "return": "void", "signature": "void closeHiveClientQuietly(HiveMetaStoreClient client)", "full_signature": "public static void closeHiveClientQuietly(HiveMetaStoreClient client)", "class_method_signature": "HCatUtil.closeHiveClientQuietly(HiveMetaStoreClient client)", "testcase": false, "constructor": false}, {"identifier": "getHiveConf", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "HiveConf", "signature": "HiveConf getHiveConf(Configuration conf)", "full_signature": "public static HiveConf getHiveConf(Configuration conf)", "class_method_signature": "HCatUtil.getHiveConf(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getJobConfFromContext", "parameters": "(JobContext jobContext)", "modifiers": "public static", "return": "JobConf", "signature": "JobConf getJobConfFromContext(JobContext jobContext)", "full_signature": "public static JobConf getJobConfFromContext(JobContext jobContext)", "class_method_signature": "HCatUtil.getJobConfFromContext(JobContext jobContext)", "testcase": false, "constructor": false}, {"identifier": "copyJobPropertiesToJobConf", "parameters": "(\n    Map<String, String> jobProperties, JobConf jobConf)", "modifiers": "public static", "return": "void", "signature": "void copyJobPropertiesToJobConf(\n    Map<String, String> jobProperties, JobConf jobConf)", "full_signature": "public static void copyJobPropertiesToJobConf(\n    Map<String, String> jobProperties, JobConf jobConf)", "class_method_signature": "HCatUtil.copyJobPropertiesToJobConf(\n    Map<String, String> jobProperties, JobConf jobConf)", "testcase": false, "constructor": false}, {"identifier": "isHadoop23", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isHadoop23()", "full_signature": "public static boolean isHadoop23()", "class_method_signature": "HCatUtil.isHadoop23()", "testcase": false, "constructor": false}], "file": "hcatalog/core/src/main/java/org/apache/hive/hcatalog/common/HCatUtil.java"}, "focal_method": {"identifier": "getTableSchemaWithPtnCols", "parameters": "(Table table)", "modifiers": "public static", "return": "HCatSchema", "body": "public static HCatSchema getTableSchemaWithPtnCols(Table table) throws IOException {\n    HCatSchema tableSchema = new HCatSchema(HCatUtil.getHCatFieldSchemaList(table.getCols()));\n\n    if (table.getPartitionKeys().size() != 0) {\n\n      // add partition keys to table schema\n      // NOTE : this assumes that we do not ever have ptn keys as columns\n      // inside the table schema as well!\n      for (FieldSchema fs : table.getPartitionKeys()) {\n        tableSchema.append(HCatSchemaUtils.getHCatFieldSchema(fs));\n      }\n    }\n    return tableSchema;\n  }", "signature": "HCatSchema getTableSchemaWithPtnCols(Table table)", "full_signature": "public static HCatSchema getTableSchemaWithPtnCols(Table table)", "class_method_signature": "HCatUtil.getTableSchemaWithPtnCols(Table table)", "testcase": false, "constructor": false, "invocations": ["getHCatFieldSchemaList", "getCols", "size", "getPartitionKeys", "getPartitionKeys", "append", "getHCatFieldSchema"]}, "repository": {"repo_id": 272398615, "url": "https://github.com/zhihuili/project-panthera-ase", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 59864, "license": "licensed"}}