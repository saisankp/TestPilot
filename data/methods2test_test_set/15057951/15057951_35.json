{"test_class": {"identifier": "LevelDAOTest", "superclass": "extends DatabaseTest", "interfaces": "", "fields": [], "file": "smartparam-repository-jdbc/src/test/java/org/smartparam/repository/jdbc/dao/LevelDAOTest.java"}, "test_case": {"identifier": "shouldDeleteLevelsForParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDeleteLevelsForParameter() {\n        // given\n        database().withParameter(\"parameter\").withLevels(\"parameter\", 2).build();\n        LevelDAO levelDAO = get(LevelDAO.class);\n        QueryRunner runner = queryRunner();\n\n        // when\n        levelDAO.deleteParameterLevels(runner, \"parameter\");\n        runner.close();\n\n        // then\n        assertDatabase().hasNoLevelsForParameter(\"parameter\").close();\n    }", "signature": "void shouldDeleteLevelsForParameter()", "full_signature": "@Test public void shouldDeleteLevelsForParameter()", "class_method_signature": "LevelDAOTest.shouldDeleteLevelsForParameter()", "testcase": true, "constructor": false, "invocations": ["build", "withLevels", "withParameter", "database", "get", "queryRunner", "deleteParameterLevels", "close", "close", "hasNoLevelsForParameter", "assertDatabase"]}, "focal_class": {"identifier": "LevelDAO", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JdbcConfig configuration;", "modifier": "private final", "type": "JdbcConfig", "declarator": "configuration", "var_name": "configuration"}], "methods": [{"identifier": "LevelDAO", "parameters": "(JdbcConfig configuration)", "modifiers": "public", "return": "", "signature": " LevelDAO(JdbcConfig configuration)", "full_signature": "public  LevelDAO(JdbcConfig configuration)", "class_method_signature": "LevelDAO.LevelDAO(JdbcConfig configuration)", "testcase": false, "constructor": true}, {"identifier": "insertParameterLevels", "parameters": "(QueryRunner queryRunner, List<Level> levels, long parameterId)", "modifiers": "public", "return": "void", "signature": "void insertParameterLevels(QueryRunner queryRunner, List<Level> levels, long parameterId)", "full_signature": "public void insertParameterLevels(QueryRunner queryRunner, List<Level> levels, long parameterId)", "class_method_signature": "LevelDAO.insertParameterLevels(QueryRunner queryRunner, List<Level> levels, long parameterId)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(QueryRunner queryRunner, Level level, long parameterId)", "modifiers": "public", "return": "long", "signature": "long insert(QueryRunner queryRunner, Level level, long parameterId)", "full_signature": "public long insert(QueryRunner queryRunner, Level level, long parameterId)", "class_method_signature": "LevelDAO.insert(QueryRunner queryRunner, Level level, long parameterId)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(QueryRunner queryRunner, Level level, long parameterId, int order)", "modifiers": "private", "return": "long", "signature": "long insert(QueryRunner queryRunner, Level level, long parameterId, int order)", "full_signature": "private long insert(QueryRunner queryRunner, Level level, long parameterId, int order)", "class_method_signature": "LevelDAO.insert(QueryRunner queryRunner, Level level, long parameterId, int order)", "testcase": false, "constructor": false}, {"identifier": "getLevel", "parameters": "(QueryRunner queryRunner, long id)", "modifiers": "public", "return": "JdbcLevel", "signature": "JdbcLevel getLevel(QueryRunner queryRunner, long id)", "full_signature": "public JdbcLevel getLevel(QueryRunner queryRunner, long id)", "class_method_signature": "LevelDAO.getLevel(QueryRunner queryRunner, long id)", "testcase": false, "constructor": false}, {"identifier": "getLevels", "parameters": "(QueryRunner queryRunner, long parameterId)", "modifiers": "public", "return": "List<Level>", "signature": "List<Level> getLevels(QueryRunner queryRunner, long parameterId)", "full_signature": "public List<Level> getLevels(QueryRunner queryRunner, long parameterId)", "class_method_signature": "LevelDAO.getLevels(QueryRunner queryRunner, long parameterId)", "testcase": false, "constructor": false}, {"identifier": "getJdbcLevels", "parameters": "(QueryRunner queryRunner, long parameterId)", "modifiers": "public", "return": "List<JdbcLevel>", "signature": "List<JdbcLevel> getJdbcLevels(QueryRunner queryRunner, long parameterId)", "full_signature": "public List<JdbcLevel> getJdbcLevels(QueryRunner queryRunner, long parameterId)", "class_method_signature": "LevelDAO.getJdbcLevels(QueryRunner queryRunner, long parameterId)", "testcase": false, "constructor": false}, {"identifier": "createSelectQuery", "parameters": "(long parameterId)", "modifiers": "private", "return": "SelectQuery", "signature": "SelectQuery createSelectQuery(long parameterId)", "full_signature": "private SelectQuery createSelectQuery(long parameterId)", "class_method_signature": "LevelDAO.createSelectQuery(long parameterId)", "testcase": false, "constructor": false}, {"identifier": "deleteParameterLevels", "parameters": "(QueryRunner queryRunner, String parameterName)", "modifiers": "public", "return": "void", "signature": "void deleteParameterLevels(QueryRunner queryRunner, String parameterName)", "full_signature": "public void deleteParameterLevels(QueryRunner queryRunner, String parameterName)", "class_method_signature": "LevelDAO.deleteParameterLevels(QueryRunner queryRunner, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(QueryRunner queryRunner, long parameterId, long levelId)", "modifiers": "public", "return": "void", "signature": "void delete(QueryRunner queryRunner, long parameterId, long levelId)", "full_signature": "public void delete(QueryRunner queryRunner, long parameterId, long levelId)", "class_method_signature": "LevelDAO.delete(QueryRunner queryRunner, long parameterId, long levelId)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(QueryRunner queryRunner, long levelId, Level level)", "modifiers": "public", "return": "void", "signature": "void update(QueryRunner queryRunner, long levelId, Level level)", "full_signature": "public void update(QueryRunner queryRunner, long levelId, Level level)", "class_method_signature": "LevelDAO.update(QueryRunner queryRunner, long levelId, Level level)", "testcase": false, "constructor": false}, {"identifier": "reorder", "parameters": "(QueryRunner queryRunner, long[] reorderedLevelIds)", "modifiers": "public", "return": "void", "signature": "void reorder(QueryRunner queryRunner, long[] reorderedLevelIds)", "full_signature": "public void reorder(QueryRunner queryRunner, long[] reorderedLevelIds)", "class_method_signature": "LevelDAO.reorder(QueryRunner queryRunner, long[] reorderedLevelIds)", "testcase": false, "constructor": false}], "file": "smartparam-repository-jdbc/src/main/java/org/smartparam/repository/jdbc/dao/LevelDAO.java"}, "focal_method": {"identifier": "deleteParameterLevels", "parameters": "(QueryRunner queryRunner, String parameterName)", "modifiers": "public", "return": "void", "body": "public void deleteParameterLevels(QueryRunner queryRunner, String parameterName) {\n        DeleteQuery query = QueryFactory.delete().from(configuration.levelEntityName())\n                .where(\"fk_parameter = (select id from \" + configuration.parameterEntityName() + \" where name = :parameterName)\")\n                .withArgument(\"parameterName\", parameterName);\n        queryRunner.delete(query);\n    }", "signature": "void deleteParameterLevels(QueryRunner queryRunner, String parameterName)", "full_signature": "public void deleteParameterLevels(QueryRunner queryRunner, String parameterName)", "class_method_signature": "LevelDAO.deleteParameterLevels(QueryRunner queryRunner, String parameterName)", "testcase": false, "constructor": false, "invocations": ["withArgument", "where", "from", "delete", "levelEntityName", "parameterEntityName", "delete"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}