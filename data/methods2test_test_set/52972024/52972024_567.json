{"test_class": {"identifier": "AsyncOperationCollectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IAsyncOperationCollection collection;", "modifier": "private", "type": "IAsyncOperationCollection", "declarator": "collection", "var_name": "collection"}, {"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private String collectionName;", "modifier": "private", "type": "String", "declarator": "collectionName", "var_name": "collectionName"}, {"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}, {"original_string": "private IField keyNameField;", "modifier": "private", "type": "IField", "declarator": "keyNameField", "var_name": "keyNameField"}, {"original_string": "private IField keyValueField;", "modifier": "private", "type": "IField", "declarator": "keyValueField", "var_name": "keyValueField"}, {"original_string": "private IField specificKeyNameField;", "modifier": "private", "type": "IField", "declarator": "specificKeyNameField", "var_name": "specificKeyNameField"}, {"original_string": "private IField documentField;", "modifier": "private", "type": "IField", "declarator": "documentField", "var_name": "documentField"}, {"original_string": "private IField idField;", "modifier": "private", "type": "IField", "declarator": "idField", "var_name": "idField"}, {"original_string": "private IField isActiveField;", "modifier": "private", "type": "IField", "declarator": "isActiveField", "var_name": "isActiveField"}, {"original_string": "private IField searchResultField;", "modifier": "private", "type": "IField", "declarator": "searchResultField", "var_name": "searchResultField"}], "file": "CoreFeatures/Database/AsyncOperationCollection/src/test/java/info/smart_tools/smartactors/database/async_operation_collection/AsyncOperationCollectionTest.java"}, "test_case": {"identifier": "ShouldDeleteObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ShouldDeleteObject() throws Exception {\n\n        String token = mock(String.class);\n        IObject deleteQuery = mock(IObject.class);\n        IKey keyIObject = mock(IKey.class);\n        when(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\")).thenReturn(keyIObject);\n        when(IOC.resolve(keyIObject)).thenReturn(deleteQuery);\n\n        IDatabaseTask deleteTask = mock(IDatabaseTask.class);\n        IKey keyTask = mock(IKey.class);\n        when(Keys.getOrAdd(\"db.async_ops_collection.delete\")).thenReturn(keyTask);\n        when(IOC.resolve(eq(keyTask), any(), any(), eq(token))).thenReturn(deleteTask);\n        collection.delete(token);\n\n        verify(deleteTask).execute();\n    }", "signature": "void ShouldDeleteObject()", "full_signature": "@Test public void ShouldDeleteObject()", "class_method_signature": "AsyncOperationCollectionTest.ShouldDeleteObject()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getOrAdd", "thenReturn", "when", "resolve", "mock", "mock", "thenReturn", "when", "getOrAdd", "thenReturn", "when", "resolve", "eq", "any", "any", "eq", "delete", "execute", "verify"]}, "focal_class": {"identifier": "AsyncOperationCollection", "superclass": "", "interfaces": "implements IAsyncOperationCollection", "fields": [{"original_string": "private IPool connectionPool;", "modifier": "private", "type": "IPool", "declarator": "connectionPool", "var_name": "connectionPool"}, {"original_string": "private String collectionName;", "modifier": "private", "type": "String", "declarator": "collectionName", "var_name": "collectionName"}, {"original_string": "private IField idField;", "modifier": "private", "type": "IField", "declarator": "idField", "var_name": "idField"}], "methods": [{"identifier": "AsyncOperationCollection", "parameters": "(final IPool connectionPool, final String collectionName)", "modifiers": "public", "return": "", "signature": " AsyncOperationCollection(final IPool connectionPool, final String collectionName)", "full_signature": "public  AsyncOperationCollection(final IPool connectionPool, final String collectionName)", "class_method_signature": "AsyncOperationCollection.AsyncOperationCollection(final IPool connectionPool, final String collectionName)", "testcase": false, "constructor": true}, {"identifier": "getAsyncOperation", "parameters": "(final String token)", "modifiers": "@Override public", "return": "IObject", "signature": "IObject getAsyncOperation(final String token)", "full_signature": "@Override public IObject getAsyncOperation(final String token)", "class_method_signature": "AsyncOperationCollection.getAsyncOperation(final String token)", "testcase": false, "constructor": false}, {"identifier": "createAsyncOperation", "parameters": "(final IObject data, final String token, final String expiredTime)", "modifiers": "@Override public", "return": "void", "signature": "void createAsyncOperation(final IObject data, final String token, final String expiredTime)", "full_signature": "@Override public void createAsyncOperation(final IObject data, final String token, final String expiredTime)", "class_method_signature": "AsyncOperationCollection.createAsyncOperation(final IObject data, final String token, final String expiredTime)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final String token)", "modifiers": "@Override public", "return": "void", "signature": "void delete(final String token)", "full_signature": "@Override public void delete(final String token)", "class_method_signature": "AsyncOperationCollection.delete(final String token)", "testcase": false, "constructor": false}, {"identifier": "complete", "parameters": "(final IObject document)", "modifiers": "@Override public", "return": "void", "signature": "void complete(final IObject document)", "full_signature": "@Override public void complete(final IObject document)", "class_method_signature": "AsyncOperationCollection.complete(final IObject document)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database/AsyncOperationCollection/src/main/java/info/smart_tools/smartactors/database/async_operation_collection/AsyncOperationCollection.java"}, "focal_method": {"identifier": "delete", "parameters": "(final String token)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void delete(final String token) throws DeleteAsyncOperationException {\n\n        try (IPoolGuard poolGuard = new PoolGuard(connectionPool)) {\n\n            ITask task = IOC.resolve(\n                    Keys.getOrAdd(\"db.async_ops_collection.delete\"),\n                    poolGuard.getObject(),\n                    collectionName,\n                    token\n            );\n            task.execute();\n        } catch (TaskExecutionException e) {\n            throw new DeleteAsyncOperationException(\"Error during execution complete.\", e);\n        } catch (PoolGuardException e) {\n            throw new DeleteAsyncOperationException(\"Can't get connection from pool.\", e);\n        } catch (ResolutionException e) {\n            throw new DeleteAsyncOperationException(\"Can't get Task from IOC\", e);\n        }\n    }", "signature": "void delete(final String token)", "full_signature": "@Override public void delete(final String token)", "class_method_signature": "AsyncOperationCollection.delete(final String token)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "getObject", "execute"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}