{"test_class": {"identifier": "NotifierInfoCatalogResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "NotifierInfoCatalogResource resource;", "modifier": "", "type": "NotifierInfoCatalogResource", "declarator": "resource", "var_name": "resource"}, {"original_string": "@Injectable\n    StreamCatalogService mockCatalogService;", "modifier": "@Injectable", "type": "StreamCatalogService", "declarator": "mockCatalogService", "var_name": "mockCatalogService"}, {"original_string": "@Injectable\n    UriInfo mockUriInfo;", "modifier": "@Injectable", "type": "UriInfo", "declarator": "mockUriInfo", "var_name": "mockUriInfo"}, {"original_string": "@Injectable\n    FileStorage mockFileStorage;", "modifier": "@Injectable", "type": "FileStorage", "declarator": "mockFileStorage", "var_name": "mockFileStorage"}, {"original_string": "@Injectable\n    InputStream mockInputStream;", "modifier": "@Injectable", "type": "InputStream", "declarator": "mockInputStream", "var_name": "mockInputStream"}, {"original_string": "@Injectable\n    FormDataContentDisposition mockFormDataContentDisposition;", "modifier": "@Injectable", "type": "FormDataContentDisposition", "declarator": "mockFormDataContentDisposition", "var_name": "mockFormDataContentDisposition"}, {"original_string": "@Injectable\n    FormDataBodyPart mockFormDataBodyPart;", "modifier": "@Injectable", "type": "FormDataBodyPart", "declarator": "mockFormDataBodyPart", "var_name": "mockFormDataBodyPart"}, {"original_string": "MultivaluedMap<String, String> multiValuedMap;", "modifier": "", "type": "MultivaluedMap<String, String>", "declarator": "multiValuedMap", "var_name": "multiValuedMap"}, {"original_string": "@Injectable\n    StreamlineAuthorizer authorizer = new NoopAuthorizer();", "modifier": "@Injectable", "type": "StreamlineAuthorizer", "declarator": "authorizer = new NoopAuthorizer()", "var_name": "authorizer"}, {"original_string": "@Injectable\n    SecurityContext securityContext;", "modifier": "@Injectable", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}], "file": "streams/service/src/test/java/com/hortonworks/streamline/streams/service/NotifierInfoCatalogResourceTest.java"}, "test_case": {"identifier": "testGetNotifierById", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetNotifierById() throws Exception {\n        final Notifier notifier = new Notifier();\n        new Expectations() {\n            {\n                mockCatalogService.getNotifierInfo(anyLong);times=1;\n                result = notifier;\n            }\n        };\n\n        Notifier result = (Notifier) resource.getNotifierById(1L, securityContext).getEntity();\n        assertEquals(notifier, result);\n    }", "signature": "void testGetNotifierById()", "full_signature": "@Test public void testGetNotifierById()", "class_method_signature": "NotifierInfoCatalogResourceTest.testGetNotifierById()", "testcase": true, "constructor": false, "invocations": ["getNotifierInfo", "getEntity", "getNotifierById", "assertEquals"]}, "focal_class": {"identifier": "NotifierInfoCatalogResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NotifierInfoCatalogResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NotifierInfoCatalogResource.class)", "var_name": "LOG"}, {"original_string": "private final StreamlineAuthorizer authorizer;", "modifier": "private final", "type": "StreamlineAuthorizer", "declarator": "authorizer", "var_name": "authorizer"}, {"original_string": "private final StreamCatalogService catalogService;", "modifier": "private final", "type": "StreamCatalogService", "declarator": "catalogService", "var_name": "catalogService"}, {"original_string": "private final FileStorage fileStorage;", "modifier": "private final", "type": "FileStorage", "declarator": "fileStorage", "var_name": "fileStorage"}], "methods": [{"identifier": "NotifierInfoCatalogResource", "parameters": "(StreamlineAuthorizer authorizer, StreamCatalogService catalogService, FileStorage fileStorage)", "modifiers": "public", "return": "", "signature": " NotifierInfoCatalogResource(StreamlineAuthorizer authorizer, StreamCatalogService catalogService, FileStorage fileStorage)", "full_signature": "public  NotifierInfoCatalogResource(StreamlineAuthorizer authorizer, StreamCatalogService catalogService, FileStorage fileStorage)", "class_method_signature": "NotifierInfoCatalogResource.NotifierInfoCatalogResource(StreamlineAuthorizer authorizer, StreamCatalogService catalogService, FileStorage fileStorage)", "testcase": false, "constructor": true}, {"identifier": "listNotifiers", "parameters": "(@Context UriInfo uriInfo, @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/notifiers\") @Timed public", "return": "Response", "signature": "Response listNotifiers(@Context UriInfo uriInfo, @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/notifiers\") @Timed public Response listNotifiers(@Context UriInfo uriInfo, @Context SecurityContext securityContext)", "class_method_signature": "NotifierInfoCatalogResource.listNotifiers(@Context UriInfo uriInfo, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "getNotifierById", "parameters": "(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/notifiers/{id}\") @Timed public", "return": "Response", "signature": "Response getNotifierById(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/notifiers/{id}\") @Timed public Response getNotifierById(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "class_method_signature": "NotifierInfoCatalogResource.getNotifierById(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "addNotifier", "parameters": "(@FormDataParam(\"notifierJarFile\") final InputStream inputStream,\n                                @FormDataParam(\"notifierJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                                @FormDataParam(\"notifierConfig\") final FormDataBodyPart notifierConfig,\n                                @Context SecurityContext securityContext)", "modifiers": "@POST @Consumes(MediaType.MULTIPART_FORM_DATA) @Path(\"/notifiers\") @Timed public", "return": "Response", "signature": "Response addNotifier(@FormDataParam(\"notifierJarFile\") final InputStream inputStream,\n                                @FormDataParam(\"notifierJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                                @FormDataParam(\"notifierConfig\") final FormDataBodyPart notifierConfig,\n                                @Context SecurityContext securityContext)", "full_signature": "@POST @Consumes(MediaType.MULTIPART_FORM_DATA) @Path(\"/notifiers\") @Timed public Response addNotifier(@FormDataParam(\"notifierJarFile\") final InputStream inputStream,\n                                @FormDataParam(\"notifierJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                                @FormDataParam(\"notifierConfig\") final FormDataBodyPart notifierConfig,\n                                @Context SecurityContext securityContext)", "class_method_signature": "NotifierInfoCatalogResource.addNotifier(@FormDataParam(\"notifierJarFile\") final InputStream inputStream,\n                                @FormDataParam(\"notifierJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                                @FormDataParam(\"notifierConfig\") final FormDataBodyPart notifierConfig,\n                                @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "removeNotifierInfo", "parameters": "(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "modifiers": "@DELETE @Path(\"/notifiers/{id}\") @Timed public", "return": "Response", "signature": "Response removeNotifierInfo(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "full_signature": "@DELETE @Path(\"/notifiers/{id}\") @Timed public Response removeNotifierInfo(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "class_method_signature": "NotifierInfoCatalogResource.removeNotifierInfo(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateNotifierInfo", "parameters": "(@PathParam(\"id\") Long id,\n                                            @FormDataParam(\"notifierJarFile\") final InputStream inputStream,\n                                            @FormDataParam(\"notifierJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                                            @FormDataParam(\"notifierConfig\") final FormDataBodyPart notifierConfig,\n                                            @Context SecurityContext securityContext)", "modifiers": "@PUT @Consumes(MediaType.MULTIPART_FORM_DATA) @Path(\"/notifiers/{id}\") @Timed public", "return": "Response", "signature": "Response addOrUpdateNotifierInfo(@PathParam(\"id\") Long id,\n                                            @FormDataParam(\"notifierJarFile\") final InputStream inputStream,\n                                            @FormDataParam(\"notifierJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                                            @FormDataParam(\"notifierConfig\") final FormDataBodyPart notifierConfig,\n                                            @Context SecurityContext securityContext)", "full_signature": "@PUT @Consumes(MediaType.MULTIPART_FORM_DATA) @Path(\"/notifiers/{id}\") @Timed public Response addOrUpdateNotifierInfo(@PathParam(\"id\") Long id,\n                                            @FormDataParam(\"notifierJarFile\") final InputStream inputStream,\n                                            @FormDataParam(\"notifierJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                                            @FormDataParam(\"notifierConfig\") final FormDataBodyPart notifierConfig,\n                                            @Context SecurityContext securityContext)", "class_method_signature": "NotifierInfoCatalogResource.addOrUpdateNotifierInfo(@PathParam(\"id\") Long id,\n                                            @FormDataParam(\"notifierJarFile\") final InputStream inputStream,\n                                            @FormDataParam(\"notifierJarFile\") final FormDataContentDisposition contentDispositionHeader,\n                                            @FormDataParam(\"notifierConfig\") final FormDataBodyPart notifierConfig,\n                                            @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "downloadNotifier", "parameters": "(@PathParam(\"notifierId\") Long notifierId, @Context SecurityContext securityContext)", "modifiers": "@Timed @GET @Produces({\"application/java-archive\", \"application/json\"}) @Path(\"/notifiers/download/{notifierId}\") public", "return": "Response", "signature": "Response downloadNotifier(@PathParam(\"notifierId\") Long notifierId, @Context SecurityContext securityContext)", "full_signature": "@Timed @GET @Produces({\"application/java-archive\", \"application/json\"}) @Path(\"/notifiers/download/{notifierId}\") public Response downloadNotifier(@PathParam(\"notifierId\") Long notifierId, @Context SecurityContext securityContext)", "class_method_signature": "NotifierInfoCatalogResource.downloadNotifier(@PathParam(\"notifierId\") Long notifierId, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "uploadJar", "parameters": "(InputStream is, String notifierName)", "modifiers": "private", "return": "String", "signature": "String uploadJar(InputStream is, String notifierName)", "full_signature": "private String uploadJar(InputStream is, String notifierName)", "class_method_signature": "NotifierInfoCatalogResource.uploadJar(InputStream is, String notifierName)", "testcase": false, "constructor": false}], "file": "streams/service/src/main/java/com/hortonworks/streamline/streams/service/NotifierInfoCatalogResource.java"}, "focal_method": {"identifier": "getNotifierById", "parameters": "(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/notifiers/{id}\") @Timed public", "return": "Response", "body": "@GET\n    @Path(\"/notifiers/{id}\")\n    @Timed\n    public Response getNotifierById(@PathParam(\"id\") Long id, @Context SecurityContext securityContext) {\n        boolean notifierUser = SecurityUtil.hasRole(authorizer, securityContext, Roles.ROLE_NOTIFIER_USER);\n        if (notifierUser) {\n            LOG.debug(\"Allowing get Notifier, since user has role: {}\", Roles.ROLE_NOTIFIER_USER);\n        } else {\n            SecurityUtil.checkPermissions(authorizer, securityContext, Notifier.NAMESPACE, id, READ);\n        }\n        Notifier result = catalogService.getNotifierInfo(id);\n        if (result != null) {\n            return WSUtils.respondEntity(result, OK);\n        }\n\n        throw EntityNotFoundException.byId(id.toString());\n    }", "signature": "Response getNotifierById(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/notifiers/{id}\") @Timed public Response getNotifierById(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "class_method_signature": "NotifierInfoCatalogResource.getNotifierById(@PathParam(\"id\") Long id, @Context SecurityContext securityContext)", "testcase": false, "constructor": false, "invocations": ["hasRole", "debug", "checkPermissions", "getNotifierInfo", "respondEntity", "byId", "toString"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}