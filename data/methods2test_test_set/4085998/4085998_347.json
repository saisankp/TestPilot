{"test_class": {"identifier": "urn_perun_group_attribute_def_def_unixGroupName_namespaceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private urn_perun_group_attribute_def_def_unixGroupName_namespace classInstance;", "modifier": "private", "type": "urn_perun_group_attribute_def_def_unixGroupName_namespace", "declarator": "classInstance", "var_name": "classInstance"}, {"original_string": "private Attribute attributeToCheck;", "modifier": "private", "type": "Attribute", "declarator": "attributeToCheck", "var_name": "attributeToCheck"}, {"original_string": "private Group group = new Group(1,\"group1\",\"Group 1\",null,null,null,null,0,0);", "modifier": "private", "type": "Group", "declarator": "group = new Group(1,\"group1\",\"Group 1\",null,null,null,null,0,0)", "var_name": "group"}, {"original_string": "private PerunSessionImpl sess;", "modifier": "private", "type": "PerunSessionImpl", "declarator": "sess", "var_name": "sess"}], "file": "perun-core/src/test/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_unixGroupName_namespaceTest.java"}, "test_case": {"identifier": "testResourceWithSameGID", "parameters": "()", "modifiers": "@Test(expected = WrongReferenceAttributeValueException.class) public", "return": "void", "body": "@Test(expected = WrongReferenceAttributeValueException.class)\n\tpublic void testResourceWithSameGID() throws Exception {\n\t\tSystem.out.println(\"testResourceWithSameGID()\");\n\t\tattributeToCheck.setValue(\"my name\");\n\t\tResource resource = mock(Resource.class);\n\t\twhen(sess.getPerunBl().getResourcesManagerBl().getResourcesByAttribute(sess, attributeToCheck)).thenReturn(Collections.singletonList(resource));\n\t\twhen(sess.getPerunBl().getModulesUtilsBl().getListOfResourceGIDsFromListOfGroupGIDs(sess, new ArrayList<>())).thenReturn(Collections.singletonList(attributeToCheck));\n\t\twhen(sess.getPerunBl().getModulesUtilsBl().haveRightToWriteAttributeInAnyGroupOrResource(sess, new ArrayList<>(), Collections.singletonList(resource), attributeToCheck, attributeToCheck)).thenReturn(true);\n\t\twhen(sess.getPerunBl().getModulesUtilsBl().haveTheSameAttributeWithTheSameNamespace(sess, resource, attributeToCheck)).thenReturn(2);\n\n\t\tclassInstance.checkAttributeSemantics(sess, group, attributeToCheck);\n\t}", "signature": "void testResourceWithSameGID()", "full_signature": "@Test(expected = WrongReferenceAttributeValueException.class) public void testResourceWithSameGID()", "class_method_signature": "urn_perun_group_attribute_def_def_unixGroupName_namespaceTest.testResourceWithSameGID()", "testcase": true, "constructor": false, "invocations": ["println", "setValue", "mock", "thenReturn", "when", "getResourcesByAttribute", "getResourcesManagerBl", "getPerunBl", "singletonList", "thenReturn", "when", "getListOfResourceGIDsFromListOfGroupGIDs", "getModulesUtilsBl", "getPerunBl", "singletonList", "thenReturn", "when", "haveRightToWriteAttributeInAnyGroupOrResource", "getModulesUtilsBl", "getPerunBl", "singletonList", "thenReturn", "when", "haveTheSameAttributeWithTheSameNamespace", "getModulesUtilsBl", "getPerunBl", "checkAttributeSemantics"]}, "focal_class": {"identifier": "urn_perun_group_attribute_def_def_unixGroupName_namespace", "superclass": "extends GroupAttributesModuleAbstract", "interfaces": "implements GroupAttributesModuleImplApi", "fields": [{"original_string": "private static final String A_R_unixGroupName_namespace = AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGroupName-namespace\";", "modifier": "private static final", "type": "String", "declarator": "A_R_unixGroupName_namespace = AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGroupName-namespace\"", "var_name": "A_R_unixGroupName_namespace"}, {"original_string": "private static final String A_G_unixGID_namespace = AttributesManager.NS_GROUP_ATTR_DEF + \":unixGID-namespace\";", "modifier": "private static final", "type": "String", "declarator": "A_G_unixGID_namespace = AttributesManager.NS_GROUP_ATTR_DEF + \":unixGID-namespace\"", "var_name": "A_G_unixGID_namespace"}, {"original_string": "private static final String A_R_unixGID_namespace = AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\";", "modifier": "private static final", "type": "String", "declarator": "A_R_unixGID_namespace = AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\"", "var_name": "A_R_unixGID_namespace"}, {"original_string": "protected static final Pattern defaultUnixGroupNamePattern = Pattern.compile(\"^[-_.a-zA-Z0-9]+$\");", "modifier": "protected static final", "type": "Pattern", "declarator": "defaultUnixGroupNamePattern = Pattern.compile(\"^[-_.a-zA-Z0-9]+$\")", "var_name": "defaultUnixGroupNamePattern"}], "methods": [{"identifier": "checkAttributeSyntax", "parameters": "(PerunSessionImpl sess, Group group, Attribute attribute)", "modifiers": "@Override public", "return": "void", "signature": "void checkAttributeSyntax(PerunSessionImpl sess, Group group, Attribute attribute)", "full_signature": "@Override public void checkAttributeSyntax(PerunSessionImpl sess, Group group, Attribute attribute)", "class_method_signature": "urn_perun_group_attribute_def_def_unixGroupName_namespace.checkAttributeSyntax(PerunSessionImpl sess, Group group, Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "checkAttributeSemantics", "parameters": "(PerunSessionImpl sess, Group group, Attribute attribute)", "modifiers": "@Override public", "return": "void", "signature": "void checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute)", "full_signature": "@Override public void checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute)", "class_method_signature": "urn_perun_group_attribute_def_def_unixGroupName_namespace.checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "changedAttributeHook", "parameters": "(PerunSessionImpl session, Group group, Attribute attribute)", "modifiers": "@Override public", "return": "void", "signature": "void changedAttributeHook(PerunSessionImpl session, Group group, Attribute attribute)", "full_signature": "@Override public void changedAttributeHook(PerunSessionImpl session, Group group, Attribute attribute)", "class_method_signature": "urn_perun_group_attribute_def_def_unixGroupName_namespace.changedAttributeHook(PerunSessionImpl session, Group group, Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getDependencies()", "full_signature": "@Override public List<String> getDependencies()", "class_method_signature": "urn_perun_group_attribute_def_def_unixGroupName_namespace.getDependencies()", "testcase": false, "constructor": false}], "file": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_unixGroupName_namespace.java"}, "focal_method": {"identifier": "checkAttributeSemantics", "parameters": "(PerunSessionImpl sess, Group group, Attribute attribute)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute) throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException{\n\t\t//prepare namespace and groupName value variables\n\t\tString groupName = null;\n\t\tif(attribute.getValue() != null) groupName = attribute.valueAsString();\n\t\tString groupNameNamespace = attribute.getFriendlyNameParameter();\n\n\t\tif(groupName == null) {\n\t\t\t// if this is group attribute, its ok\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\t//prepare attributes group and resource unixGroupName\n\t\t\tAttribute groupUnixGroupName = attribute;\n\t\t\tAttribute resourceUnixGroupName = new Attribute(sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, A_R_unixGroupName_namespace + \":\" + groupNameNamespace));\n\t\t\tresourceUnixGroupName.setValue(attribute.getValue());\n\n\t\t\t//prepare lists of groups and resources with the same groupName value in the same namespace\n\n\t\t\t//Fill lists of groups and resources\n\t\t\tList<Group> groupsWithSameGroupNameInTheSameNamespace = new ArrayList<>(sess.getPerunBl().getGroupsManagerBl().getGroupsByAttribute(sess, groupUnixGroupName));\n\t\t\tList<Resource> resourcesWithSameGroupNameInTheSameNamespace = new ArrayList<>(sess.getPerunBl().getResourcesManagerBl().getResourcesByAttribute(sess, resourceUnixGroupName));\n\t\t\t//Remove self from the list of groups with the same namespace\n\t\t\t//FIXME This behavior is not correct, because there are two possible situations:\n\t\t\t// - This is the Check right after setting a new value (correct behavior), we need to skip this value from checking\n\t\t\t// - This is the Check without setting a new value (not correct), and if this group is the only one with the value, we will lose the right for it\n\t\t\tgroupsWithSameGroupNameInTheSameNamespace.remove(group);\n\n\t\t\t//If there is no group or resource with same GroupNameInTheSameNamespace, its ok\n\t\t\tif(groupsWithSameGroupNameInTheSameNamespace.isEmpty() && resourcesWithSameGroupNameInTheSameNamespace.isEmpty()) return;\n\n\t\t\t//First need to know that i have right to write any of duplicit groupName-namespace attribute\n\t\t\tboolean haveRights = sess.getPerunBl().getModulesUtilsBl().haveRightToWriteAttributeInAnyGroupOrResource(sess, groupsWithSameGroupNameInTheSameNamespace, resourcesWithSameGroupNameInTheSameNamespace, groupUnixGroupName, resourceUnixGroupName);\n\t\t\tif(!haveRights) throw new WrongReferenceAttributeValueException(attribute, null, group, null, \"This groupName is already used for other group or resource and user has no rights to use it.\");\n\n\t\t\t//Now if rights are ok, prepare lists of UnixGIDs attributes of this group (also equivalent resource GID)\n\t\t\tList<Attribute> groupUnixGIDs = sess.getPerunBl().getAttributesManagerBl().getAllAttributesStartWithNameWithoutNullValue(sess, group, A_G_unixGID_namespace + \":\");\n\t\t\tList<Attribute> resourceVersionOfUnixGIDs = sess.getPerunBl().getModulesUtilsBl().getListOfResourceGIDsFromListOfGroupGIDs(sess, groupUnixGIDs);\n\n\t\t\t//In list of duplicit groups looking for GID in same namespace but with different value, thats not correct\n\t\t\tif(!groupsWithSameGroupNameInTheSameNamespace.isEmpty()) {\n\t\t\t\tfor(Group g: groupsWithSameGroupNameInTheSameNamespace) {\n\t\t\t\t\tfor(Attribute a: groupUnixGIDs) {\n\t\t\t\t\t\tint compare;\n\t\t\t\t\t\tcompare = sess.getPerunBl().getModulesUtilsBl().haveTheSameAttributeWithTheSameNamespace(sess, g, a);\n\n\t\t\t\t\t\tif(compare > 0) {\n\t\t\t\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, a, group, null, g, null, \"One of the group GIDs is from the same namespace like other group GID but with different values.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//In list of duplicit resources looking for GID in same namespace but with different value, thats not correct\n\t\t\tif(!resourcesWithSameGroupNameInTheSameNamespace.isEmpty()) {\n\t\t\t\tfor(Resource r: resourcesWithSameGroupNameInTheSameNamespace) {\n\t\t\t\t\tfor(Attribute a: resourceVersionOfUnixGIDs) {\n\t\t\t\t\t\tint compare;\n\t\t\t\t\t\tcompare = sess.getPerunBl().getModulesUtilsBl().haveTheSameAttributeWithTheSameNamespace(sess, r, a);\n\n\t\t\t\t\t\tif(compare > 0) {\n\t\t\t\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, a, group, null, r, null, \"One of the group GIDs is from the same namespace like other resource GIDs but with different values.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch(AttributeNotExistsException ex) {\n\t\t\tthrow new ConsistencyErrorException(ex);\n\t\t}\n\t}", "signature": "void checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute)", "full_signature": "@Override public void checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute)", "class_method_signature": "urn_perun_group_attribute_def_def_unixGroupName_namespace.checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute)", "testcase": false, "constructor": false, "invocations": ["getValue", "valueAsString", "getFriendlyNameParameter", "getAttributeDefinition", "getAttributesManagerBl", "getPerunBl", "setValue", "getValue", "getGroupsByAttribute", "getGroupsManagerBl", "getPerunBl", "getResourcesByAttribute", "getResourcesManagerBl", "getPerunBl", "remove", "isEmpty", "isEmpty", "haveRightToWriteAttributeInAnyGroupOrResource", "getModulesUtilsBl", "getPerunBl", "getAllAttributesStartWithNameWithoutNullValue", "getAttributesManagerBl", "getPerunBl", "getListOfResourceGIDsFromListOfGroupGIDs", "getModulesUtilsBl", "getPerunBl", "isEmpty", "haveTheSameAttributeWithTheSameNamespace", "getModulesUtilsBl", "getPerunBl", "isEmpty", "haveTheSameAttributeWithTheSameNamespace", "getModulesUtilsBl", "getPerunBl"]}, "repository": {"repo_id": 4085998, "url": "https://github.com/CESNET/perun", "stars": 38, "created": "4/20/2012 11:55:38 AM +00:00", "updates": "2020-01-27T09:51:13+00:00", "fork": "False", "license": "licensed"}}