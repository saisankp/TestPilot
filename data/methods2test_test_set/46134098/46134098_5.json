{"test_class": {"identifier": "POResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File INPUT_FILE = new File(\"src/test/resource/resfilter/po/input.po\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE = new File(\"src/test/resource/resfilter/po/input.po\")", "var_name": "INPUT_FILE"}, {"original_string": "private static final File EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/po/write-output.po\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/po/write-output.po\")", "var_name": "EXPECTED_WRITE_FILE"}, {"original_string": "private static final File MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/pot/merge-input-1.pot\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/pot/merge-input-1.pot\")", "var_name": "MERGE_INPUT_1_FILE"}, {"original_string": "private static final File MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/pot/merge-input-2.pot\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/pot/merge-input-2.pot\")", "var_name": "MERGE_INPUT_2_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/pot/merge-output-1.pot\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/pot/merge-output-1.pot\")", "var_name": "EXPECTED_MERGE_1_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/pot/merge-output-2.pot\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/pot/merge-output-2.pot\")", "var_name": "EXPECTED_MERGE_2_FILE"}, {"original_string": "private static final Collection<ResourceString> EXPECTED_INPUT_RES_LIST;", "modifier": "private static final", "type": "Collection<ResourceString>", "declarator": "EXPECTED_INPUT_RES_LIST", "var_name": "EXPECTED_INPUT_RES_LIST"}, {"original_string": "private static LanguageBundle WRITE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "WRITE_BUNDLE", "var_name": "WRITE_BUNDLE"}, {"original_string": "private static LanguageBundle MERGE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "MERGE_BUNDLE", "var_name": "MERGE_BUNDLE"}, {"original_string": "private static final POResource res = new POResource();", "modifier": "private static final", "type": "POResource", "declarator": "res = new POResource()", "var_name": "res"}], "file": "gp-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/impl/POResourceTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() throws IOException, ResourceFilterException {\n        assertTrue(\"The input test file <\" + INPUT_FILE + \"> does not exist.\", INPUT_FILE.exists());\n\n        try (InputStream is = new FileInputStream(INPUT_FILE)) {\n            LanguageBundle bundle = res.parse(is, null);\n            List<ResourceString> resStrList = new ArrayList<>(bundle.getResourceStrings());\n            Collections.sort(resStrList, new ResourceStringComparator());\n            assertEquals(\"ResourceStrings did not match.\", EXPECTED_INPUT_RES_LIST, resStrList);\n        }\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "POResourceTest.testParse()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "exists", "parse", "getResourceStrings", "sort", "assertEquals"]}, "focal_class": {"identifier": "POResource", "superclass": "extends POTResource", "interfaces": "", "fields": [], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "POResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "POResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}], "file": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/POResource.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "body": "@Override\n    public LanguageBundle parse(InputStream inStream, FilterOptions options)\n            throws IOException, ResourceFilterException {\n\n        LanguageBundleBuilder bb = new LanguageBundleBuilder(true);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inStream, CHAR_SET));\n\n        // use these to store the state of an entry\n        String singularKey = null;\n        String pluralKey = null;\n        boolean singularValueSet = false;\n\n        String line;\n        while ((line = reader.readLine()) != null) {\n\n            if (line.isEmpty()) {\n                // reset state, new entry is starting next\n                singularKey = null;\n                pluralKey = null;\n                singularValueSet = false;\n                continue;\n            }\n\n            String value = extractMessage(line, reader);\n            if (value == null || value.isEmpty()) {\n                continue;\n            }\n\n            if (line.startsWith(UNTRANSLATED_STRING_PREFIX)) {\n                // save the singular key for next loop iteration\n                singularKey = value;\n            } else if (singularKey != null && pluralKey == null && line.startsWith(UNTRANSLATED_PLURAL_STRING_PREFIX)) {\n                // save the plural key for next loop iteration\n                pluralKey = value;\n            } else if (singularKey != null && pluralKey == null && line.startsWith(TRANSLATED_STRING_PREFIX)\n                    && !line.startsWith(TRANSLATED_PLURAL_0_STRING_PREFIX)) {\n                // this covers the normal case when:\n                // msgid \"untranslated-string\"\n                // msgstr \"translated-string\"\n                \n                bb.addResourceString(singularKey, value);\n            } else if (singularKey != null && pluralKey != null && line.startsWith(TRANSLATED_PLURAL_0_STRING_PREFIX)) {\n                // this covers the singular key/value in a plural entry\n                // the key is the value of msgid and the value is that of\n                // msgstr[0]\n                // msgid \"Unable to find user: @users\"\n                // msgid_plural \"Unable to find users: @users\"\n                // msgstr[0] \"Benutzer konnte nicht gefunden werden: @users\"\n                // msgstr[1] \"Benutzer konnten nicht gefunden werden: @users\"\n\n                bb.addResourceString(singularKey, value);\n                singularValueSet = true;\n            } else if (singularKey != null && pluralKey != null && singularValueSet\n                    && line.startsWith(TRANSLATED_PLURAL_1_STRING_PREFIX)) {\n                // this covers the plural key/value in a plural entry\n                // the key is the value of msgid_plural and the value is that of\n                // msgstr[1]\n                bb.addResourceString(pluralKey, value);\n            }\n        }\n\n        return bb.build();\n    }", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "POResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["readLine", "isEmpty", "extractMessage", "isEmpty", "startsWith", "startsWith", "startsWith", "startsWith", "addResourceString", "startsWith", "addResourceString", "startsWith", "addResourceString", "build"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}