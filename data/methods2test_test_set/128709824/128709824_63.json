{"test_class": {"identifier": "AbstractSerializerTest", "superclass": "extends AbstractSerializer", "interfaces": "", "fields": [{"original_string": "private TestSerializer serializer = new TestSerializer();", "modifier": "private", "type": "TestSerializer", "declarator": "serializer = new TestSerializer()", "var_name": "serializer"}], "file": "core/api/src/test/java/com/alipay/sofa/rpc/codec/AbstractSerializerTest.java"}, "test_case": {"identifier": "buildDeserializeError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void buildDeserializeError() {\n        RpcInternalContext old = RpcInternalContext.peekContext();\n        try {\n            RpcInternalContext.removeContext();\n            SofaRpcException exception = serializer.buildDeserializeError(\"xx\");\n            Assert.assertEquals(RpcErrorType.UNKNOWN, exception.getErrorType());\n\n            RpcInternalContext.getContext().setProviderSide(true);\n            exception = serializer.buildDeserializeError(\"xx\");\n            Assert.assertEquals(RpcErrorType.SERVER_DESERIALIZE, exception.getErrorType());\n\n            RpcInternalContext.getContext().setProviderSide(false);\n            exception = serializer.buildDeserializeError(\"xx\");\n            Assert.assertEquals(RpcErrorType.CLIENT_DESERIALIZE, exception.getErrorType());\n\n            RpcInternalContext.removeContext();\n            exception = serializer.buildDeserializeError(\"xx\", new RuntimeException());\n            Assert.assertEquals(RpcErrorType.UNKNOWN, exception.getErrorType());\n\n            RpcInternalContext.getContext().setProviderSide(true);\n            exception = serializer.buildDeserializeError(\"xx\", new RuntimeException());\n            Assert.assertEquals(RpcErrorType.SERVER_DESERIALIZE, exception.getErrorType());\n\n            RpcInternalContext.getContext().setProviderSide(false);\n            exception = serializer.buildDeserializeError(\"xx\", new RuntimeException());\n            Assert.assertEquals(RpcErrorType.CLIENT_DESERIALIZE, exception.getErrorType());\n        } finally {\n            RpcInternalContext.setContext(old);\n        }\n    }", "signature": "void buildDeserializeError()", "full_signature": "@Test public void buildDeserializeError()", "class_method_signature": "AbstractSerializerTest.buildDeserializeError()", "testcase": true, "constructor": false, "invocations": ["peekContext", "removeContext", "buildDeserializeError", "assertEquals", "getErrorType", "setProviderSide", "getContext", "buildDeserializeError", "assertEquals", "getErrorType", "setProviderSide", "getContext", "buildDeserializeError", "assertEquals", "getErrorType", "removeContext", "buildDeserializeError", "assertEquals", "getErrorType", "setProviderSide", "getContext", "buildDeserializeError", "assertEquals", "getErrorType", "setProviderSide", "getContext", "buildDeserializeError", "assertEquals", "getErrorType", "setContext"]}, "focal_class": {"identifier": "AbstractSerializer", "superclass": "", "interfaces": "implements Serializer", "fields": [], "methods": [{"identifier": "buildSerializeError", "parameters": "(String message)", "modifiers": "protected", "return": "SofaRpcException", "signature": "SofaRpcException buildSerializeError(String message)", "full_signature": "protected SofaRpcException buildSerializeError(String message)", "class_method_signature": "AbstractSerializer.buildSerializeError(String message)", "testcase": false, "constructor": false}, {"identifier": "buildSerializeError", "parameters": "(String message, Throwable throwable)", "modifiers": "protected", "return": "SofaRpcException", "signature": "SofaRpcException buildSerializeError(String message, Throwable throwable)", "full_signature": "protected SofaRpcException buildSerializeError(String message, Throwable throwable)", "class_method_signature": "AbstractSerializer.buildSerializeError(String message, Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "buildDeserializeError", "parameters": "(String message)", "modifiers": "protected", "return": "SofaRpcException", "signature": "SofaRpcException buildDeserializeError(String message)", "full_signature": "protected SofaRpcException buildDeserializeError(String message)", "class_method_signature": "AbstractSerializer.buildDeserializeError(String message)", "testcase": false, "constructor": false}, {"identifier": "buildDeserializeError", "parameters": "(String message, Throwable throwable)", "modifiers": "protected", "return": "SofaRpcException", "signature": "SofaRpcException buildDeserializeError(String message, Throwable throwable)", "full_signature": "protected SofaRpcException buildDeserializeError(String message, Throwable throwable)", "class_method_signature": "AbstractSerializer.buildDeserializeError(String message, Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "getErrorCode", "parameters": "(boolean serialize)", "modifiers": "private", "return": "int", "signature": "int getErrorCode(boolean serialize)", "full_signature": "private int getErrorCode(boolean serialize)", "class_method_signature": "AbstractSerializer.getErrorCode(boolean serialize)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/codec/AbstractSerializer.java"}, "focal_method": {"identifier": "buildDeserializeError", "parameters": "(String message)", "modifiers": "protected", "return": "SofaRpcException", "body": "protected SofaRpcException buildDeserializeError(String message) {\n        return new SofaRpcException(getErrorCode(false), LogCodes.getLog(LogCodes.ERROR_SERIALIZER, message));\n    }", "signature": "SofaRpcException buildDeserializeError(String message)", "full_signature": "protected SofaRpcException buildDeserializeError(String message)", "class_method_signature": "AbstractSerializer.buildDeserializeError(String message)", "testcase": false, "constructor": false, "invocations": ["getErrorCode", "getLog"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}