{"test_class": {"identifier": "RsrcCtxWrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/RsrcCtxWrapperTest.java"}, "test_case": {"identifier": "testAuthenticateException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuthenticateException() {\n        HttpServletRequest reqMock = Mockito.mock(HttpServletRequest.class);\n        HttpServletResponse resMock = Mockito.mock(HttpServletResponse.class);\n\n        AuthorityList authListMock = new AuthorityList();\n        Authorizer authorizerMock = Mockito.mock(Authorizer.class);\n        Authority authMock = Mockito.mock(Authority.class);\n        Metric metricMock = Mockito.mock(Metric.class);\n        Object timerMetricMock = Mockito.mock(Object.class);\n\n        Mockito.when(authMock.getHeader()).thenReturn(\"testheader\");\n        Mockito.when(reqMock.getHeader(\"testheader\")).thenReturn(\"testcred\");\n        Mockito.when(authMock.getCredSource()).thenReturn(com.yahoo.athenz.auth.Authority.CredSource.HEADER);\n        Mockito.when(authMock.authenticate(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any()))\n                .thenThrow(new com.yahoo.athenz.common.server.rest.ResourceException(403));\n        Mockito.when(reqMock.getRemoteAddr()).thenReturn(\"1.1.1.1\");\n        Mockito.when(reqMock.getMethod()).thenReturn(\"POST\");\n        authListMock.add(authMock);\n\n        RsrcCtxWrapper wrapper = new RsrcCtxWrapper(reqMock, resMock, authListMock, false,\n                authorizerMock, metricMock, timerMetricMock, \"apiName\");\n\n        try {\n            wrapper.authenticate();\n        } catch (ResourceException ex) {\n            assertEquals(403, ex.getCode());\n        }\n    }", "signature": "void testAuthenticateException()", "full_signature": "@Test public void testAuthenticateException()", "class_method_signature": "RsrcCtxWrapperTest.testAuthenticateException()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "getHeader", "thenReturn", "when", "getHeader", "thenReturn", "when", "getCredSource", "thenThrow", "when", "authenticate", "any", "any", "any", "any", "thenReturn", "when", "getRemoteAddr", "thenReturn", "when", "getMethod", "add", "authenticate", "assertEquals", "getCode"]}, "focal_class": {"identifier": "RsrcCtxWrapper", "superclass": "", "interfaces": "implements ResourceContext", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RsrcCtxWrapper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RsrcCtxWrapper.class)", "var_name": "LOG"}, {"original_string": "com.yahoo.athenz.common.server.rest.ResourceContext ctx;", "modifier": "", "type": "com.yahoo.athenz.common.server.rest.ResourceContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "boolean optionalAuth;", "modifier": "", "type": "boolean", "declarator": "optionalAuth", "var_name": "optionalAuth"}, {"original_string": "Metric metric;", "modifier": "", "type": "Metric", "declarator": "metric", "var_name": "metric"}, {"original_string": "private Object timerMetric;", "modifier": "private", "type": "Object", "declarator": "timerMetric", "var_name": "timerMetric"}, {"original_string": "private String apiName;", "modifier": "private", "type": "String", "declarator": "apiName", "var_name": "apiName"}], "methods": [{"identifier": "RsrcCtxWrapper", "parameters": "(HttpServletRequest request, HttpServletResponse response,\n            Http.AuthorityList authList,  boolean optionalAuth, Authorizer authorizer,\n            Metric metric, Object timerMetric, String apiName)", "modifiers": "public", "return": "", "signature": " RsrcCtxWrapper(HttpServletRequest request, HttpServletResponse response,\n            Http.AuthorityList authList,  boolean optionalAuth, Authorizer authorizer,\n            Metric metric, Object timerMetric, String apiName)", "full_signature": "public  RsrcCtxWrapper(HttpServletRequest request, HttpServletResponse response,\n            Http.AuthorityList authList,  boolean optionalAuth, Authorizer authorizer,\n            Metric metric, Object timerMetric, String apiName)", "class_method_signature": "RsrcCtxWrapper.RsrcCtxWrapper(HttpServletRequest request, HttpServletResponse response,\n            Http.AuthorityList authList,  boolean optionalAuth, Authorizer authorizer,\n            Metric metric, Object timerMetric, String apiName)", "testcase": false, "constructor": true}, {"identifier": "context", "parameters": "()", "modifiers": "public", "return": "com.yahoo.athenz.common.server.rest.ResourceContext", "signature": "com.yahoo.athenz.common.server.rest.ResourceContext context()", "full_signature": "public com.yahoo.athenz.common.server.rest.ResourceContext context()", "class_method_signature": "RsrcCtxWrapper.context()", "testcase": false, "constructor": false}, {"identifier": "principal", "parameters": "()", "modifiers": "public", "return": "Principal", "signature": "Principal principal()", "full_signature": "public Principal principal()", "class_method_signature": "RsrcCtxWrapper.principal()", "testcase": false, "constructor": false}, {"identifier": "getRequestDomain", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRequestDomain()", "full_signature": "public String getRequestDomain()", "class_method_signature": "RsrcCtxWrapper.getRequestDomain()", "testcase": false, "constructor": false}, {"identifier": "getTimerMetric", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getTimerMetric()", "full_signature": "public Object getTimerMetric()", "class_method_signature": "RsrcCtxWrapper.getTimerMetric()", "testcase": false, "constructor": false}, {"identifier": "setRequestDomain", "parameters": "(String requestDomain)", "modifiers": "public", "return": "void", "signature": "void setRequestDomain(String requestDomain)", "full_signature": "public void setRequestDomain(String requestDomain)", "class_method_signature": "RsrcCtxWrapper.setRequestDomain(String requestDomain)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "()", "modifiers": "@Override public", "return": "HttpServletRequest", "signature": "HttpServletRequest request()", "full_signature": "@Override public HttpServletRequest request()", "class_method_signature": "RsrcCtxWrapper.request()", "testcase": false, "constructor": false}, {"identifier": "response", "parameters": "()", "modifiers": "@Override public", "return": "HttpServletResponse", "signature": "HttpServletResponse response()", "full_signature": "@Override public HttpServletResponse response()", "class_method_signature": "RsrcCtxWrapper.response()", "testcase": false, "constructor": false}, {"identifier": "getApiName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getApiName()", "full_signature": "@Override public String getApiName()", "class_method_signature": "RsrcCtxWrapper.getApiName()", "testcase": false, "constructor": false}, {"identifier": "getHttpMethod", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getHttpMethod()", "full_signature": "@Override public String getHttpMethod()", "class_method_signature": "RsrcCtxWrapper.getHttpMethod()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void authenticate()", "full_signature": "@Override public void authenticate()", "class_method_signature": "RsrcCtxWrapper.authenticate()", "testcase": false, "constructor": false}, {"identifier": "authorize", "parameters": "(String action, String resource, String trustedDomain)", "modifiers": "@Override public", "return": "void", "signature": "void authorize(String action, String resource, String trustedDomain)", "full_signature": "@Override public void authorize(String action, String resource, String trustedDomain)", "class_method_signature": "RsrcCtxWrapper.authorize(String action, String resource, String trustedDomain)", "testcase": false, "constructor": false}, {"identifier": "logPrincipal", "parameters": "(final Principal principal)", "modifiers": "public", "return": "void", "signature": "void logPrincipal(final Principal principal)", "full_signature": "public void logPrincipal(final Principal principal)", "class_method_signature": "RsrcCtxWrapper.logPrincipal(final Principal principal)", "testcase": false, "constructor": false}, {"identifier": "logPrincipal", "parameters": "(final String principal)", "modifiers": "public", "return": "void", "signature": "void logPrincipal(final String principal)", "full_signature": "public void logPrincipal(final String principal)", "class_method_signature": "RsrcCtxWrapper.logPrincipal(final String principal)", "testcase": false, "constructor": false}, {"identifier": "logAuthorityId", "parameters": "(Authority authority)", "modifiers": "public", "return": "void", "signature": "void logAuthorityId(Authority authority)", "full_signature": "public void logAuthorityId(Authority authority)", "class_method_signature": "RsrcCtxWrapper.logAuthorityId(Authority authority)", "testcase": false, "constructor": false}, {"identifier": "throwZtsException", "parameters": "(com.yahoo.athenz.common.server.rest.ResourceException restExc)", "modifiers": "public", "return": "void", "signature": "void throwZtsException(com.yahoo.athenz.common.server.rest.ResourceException restExc)", "full_signature": "public void throwZtsException(com.yahoo.athenz.common.server.rest.ResourceException restExc)", "class_method_signature": "RsrcCtxWrapper.throwZtsException(com.yahoo.athenz.common.server.rest.ResourceException restExc)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/RsrcCtxWrapper.java"}, "focal_method": {"identifier": "authenticate", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void authenticate() {\n        try {\n            ctx.authenticate(optionalAuth);\n            // For ZTS, prevent authentication with mTLS restricted certs\n            final Principal principal = principal();\n            if (principal != null && principal.getMtlsRestricted()) {\n                LOG.error(\"authenticate: certificate is mTLS restricted\");\n                throw new com.yahoo.athenz.common.server.rest.ResourceException(com.yahoo.athenz.common.server.rest.ResourceException.UNAUTHORIZED, \"certificate is mTLS restricted\");\n            }\n        } catch (com.yahoo.athenz.common.server.rest.ResourceException restExc) {\n            throwZtsException(restExc);\n        }\n    }", "signature": "void authenticate()", "full_signature": "@Override public void authenticate()", "class_method_signature": "RsrcCtxWrapper.authenticate()", "testcase": false, "constructor": false, "invocations": ["authenticate", "principal", "getMtlsRestricted", "error", "throwZtsException"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}