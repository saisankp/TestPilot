{"test_class": {"identifier": "TMXMLReaderTest", "superclass": "extends AbstractXMLTestCase", "interfaces": "", "fields": [{"original_string": "private final static String testdataDirectory = \"canonical\";", "modifier": "private final static", "type": "String", "declarator": "testdataDirectory = \"canonical\"", "var_name": "testdataDirectory"}], "file": "ontopia-engine/src/test/java/net/ontopia/topicmaps/xml/TMXMLReaderTest.java"}, "test_case": {"identifier": "testReadFromURL", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReadFromURL() throws IOException {\n    TopicMapIF tm = new TMXMLReader(TestFileUtils.getTestInputURL(\"tmxml\", \"in\", \"empty-topic.xml\")).read();\n    Assert.assertNotNull(tm);\n    Assert.assertEquals(2, tm.getTopics().size());\n    \n  }", "signature": "void testReadFromURL()", "full_signature": "@Test public void testReadFromURL()", "class_method_signature": "TMXMLReaderTest.testReadFromURL()", "testcase": true, "constructor": false, "invocations": ["read", "getTestInputURL", "assertNotNull", "assertEquals", "size", "getTopics"]}, "focal_class": {"identifier": "TMXMLReader", "superclass": "extends AbstractXMLFormatReader", "interfaces": "implements TopicMapReaderIF", "fields": [{"original_string": "public static final String PROPERTY_VALIDATE = \"validate\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_VALIDATE = \"validate\"", "var_name": "PROPERTY_VALIDATE"}, {"original_string": "private boolean validate = true;", "modifier": "private", "type": "boolean", "declarator": "validate = true", "var_name": "validate"}, {"original_string": "private static final int START          = 0;", "modifier": "private static final", "type": "int", "declarator": "START          = 0", "var_name": "START"}, {"original_string": "private static final int TOP            = 1;", "modifier": "private static final", "type": "int", "declarator": "TOP            = 1", "var_name": "TOP"}, {"original_string": "private static final int TOPIC          = 2;", "modifier": "private static final", "type": "int", "declarator": "TOPIC          = 2", "var_name": "TOPIC"}, {"original_string": "private static final int IDENTIFIER     = 3;", "modifier": "private static final", "type": "int", "declarator": "IDENTIFIER     = 3", "var_name": "IDENTIFIER"}, {"original_string": "private static final int MAYBETOPICNAME = 4;", "modifier": "private static final", "type": "int", "declarator": "MAYBETOPICNAME = 4", "var_name": "MAYBETOPICNAME"}, {"original_string": "private static final int BASENAME       = 5;", "modifier": "private static final", "type": "int", "declarator": "BASENAME       = 5", "var_name": "BASENAME"}, {"original_string": "private static final int TOPICNAME      = 6;", "modifier": "private static final", "type": "int", "declarator": "TOPICNAME      = 6", "var_name": "TOPICNAME"}, {"original_string": "private static final int VARIANT        = 7;", "modifier": "private static final", "type": "int", "declarator": "VARIANT        = 7", "var_name": "VARIANT"}, {"original_string": "private static final int ASSOCIATION    = 8;", "modifier": "private static final", "type": "int", "declarator": "ASSOCIATION    = 8", "var_name": "ASSOCIATION"}, {"original_string": "private static final int ROLE           = 9;", "modifier": "private static final", "type": "int", "declarator": "ROLE           = 9", "var_name": "ROLE"}], "methods": [{"identifier": "TMXMLReader", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " TMXMLReader(URL url)", "full_signature": "public  TMXMLReader(URL url)", "class_method_signature": "TMXMLReader.TMXMLReader(URL url)", "testcase": false, "constructor": true}, {"identifier": "TMXMLReader", "parameters": "(URL url, LocatorIF base_address)", "modifiers": "public", "return": "", "signature": " TMXMLReader(URL url, LocatorIF base_address)", "full_signature": "public  TMXMLReader(URL url, LocatorIF base_address)", "class_method_signature": "TMXMLReader.TMXMLReader(URL url, LocatorIF base_address)", "testcase": false, "constructor": true}, {"identifier": "TMXMLReader", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " TMXMLReader(File file)", "full_signature": "public  TMXMLReader(File file)", "class_method_signature": "TMXMLReader.TMXMLReader(File file)", "testcase": false, "constructor": true}, {"identifier": "TMXMLReader", "parameters": "(Reader reader, LocatorIF base_address)", "modifiers": "public", "return": "", "signature": " TMXMLReader(Reader reader, LocatorIF base_address)", "full_signature": "public  TMXMLReader(Reader reader, LocatorIF base_address)", "class_method_signature": "TMXMLReader.TMXMLReader(Reader reader, LocatorIF base_address)", "testcase": false, "constructor": true}, {"identifier": "TMXMLReader", "parameters": "(InputStream stream, LocatorIF base_address)", "modifiers": "public", "return": "", "signature": " TMXMLReader(InputStream stream, LocatorIF base_address)", "full_signature": "public  TMXMLReader(InputStream stream, LocatorIF base_address)", "class_method_signature": "TMXMLReader.TMXMLReader(InputStream stream, LocatorIF base_address)", "testcase": false, "constructor": true}, {"identifier": "TMXMLReader", "parameters": "(InputSource source, LocatorIF base)", "modifiers": "public", "return": "", "signature": " TMXMLReader(InputSource source, LocatorIF base)", "full_signature": "public  TMXMLReader(InputSource source, LocatorIF base)", "class_method_signature": "TMXMLReader.TMXMLReader(InputSource source, LocatorIF base)", "testcase": false, "constructor": true}, {"identifier": "getValidate", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getValidate()", "full_signature": "public boolean getValidate()", "class_method_signature": "TMXMLReader.getValidate()", "testcase": false, "constructor": false}, {"identifier": "setValidate", "parameters": "(boolean validate)", "modifiers": "public", "return": "void", "signature": "void setValidate(boolean validate)", "full_signature": "public void setValidate(boolean validate)", "class_method_signature": "TMXMLReader.setValidate(boolean validate)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "TopicMapIF", "signature": "TopicMapIF read()", "full_signature": "@Override public TopicMapIF read()", "class_method_signature": "TMXMLReader.read()", "testcase": false, "constructor": false}, {"identifier": "importInto", "parameters": "(TopicMapIF topicmap)", "modifiers": "@Override public", "return": "void", "signature": "void importInto(TopicMapIF topicmap)", "full_signature": "@Override public void importInto(TopicMapIF topicmap)", "class_method_signature": "TMXMLReader.importInto(TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "readAll", "parameters": "()", "modifiers": "@Override public", "return": "Collection", "signature": "Collection readAll()", "full_signature": "@Override public Collection readAll()", "class_method_signature": "TMXMLReader.readAll()", "testcase": false, "constructor": false}, {"identifier": "getTMXMLSchema", "parameters": "()", "modifiers": "private", "return": "InputSource", "signature": "InputSource getTMXMLSchema()", "full_signature": "private InputSource getTMXMLSchema()", "class_method_signature": "TMXMLReader.getTMXMLSchema()", "testcase": false, "constructor": false}, {"identifier": "setAdditionalProperties", "parameters": "(Map<String, Object> properties)", "modifiers": "@Override public", "return": "void", "signature": "void setAdditionalProperties(Map<String, Object> properties)", "full_signature": "@Override public void setAdditionalProperties(Map<String, Object> properties)", "class_method_signature": "TMXMLReader.setAdditionalProperties(Map<String, Object> properties)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/topicmaps/xml/TMXMLReader.java"}, "focal_method": {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "TopicMapIF", "body": "@Override\n  public TopicMapIF read() throws IOException {\n    InMemoryTopicMapStore store = new InMemoryTopicMapStore();\n    store.setBaseAddress(base_address);\n    TopicMapIF topicmap = store.getTopicMap();\n    importInto(topicmap);\n\n    ClassInstanceUtils.resolveAssociations1(topicmap);\n    ClassInstanceUtils.resolveAssociations2(topicmap);\n    \n    return topicmap;\n  }", "signature": "TopicMapIF read()", "full_signature": "@Override public TopicMapIF read()", "class_method_signature": "TMXMLReader.read()", "testcase": false, "constructor": false, "invocations": ["setBaseAddress", "getTopicMap", "importInto", "resolveAssociations1", "resolveAssociations2"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}