{"test_class": {"identifier": "DefaultDataProviderMethodResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Mockito rule needs no further configuration\")\n    @Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Mockito rule needs no further configuration\")\n    @Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Spy\n    private DefaultDataProviderMethodResolver underTest;", "modifier": "@Spy\n    private", "type": "DefaultDataProviderMethodResolver", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private DataProviderResolverContext context;", "modifier": "@Mock\n    private", "type": "DataProviderResolverContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final Method method = Methods.anyMethod();", "modifier": "private final", "type": "Method", "declarator": "method = Methods.anyMethod()", "var_name": "method"}], "file": "core/src/test/java/com/tngtech/junit/dataprovider/resolver/DefaultDataProviderMethodResolverTest.java"}, "test_case": {"identifier": "testIsMatchingNameConventionShouldReturnTrueIfDataProviderMethodHavingDataPrefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsMatchingNameConventionShouldReturnTrueIfDataProviderMethodHavingDataPrefix() {\n        // Given:\n        final String testMethodName = \"testMethod\";\n        final String dataProviderMethodName = \"dataTestMethod\";\n\n        // When:\n        boolean result = underTest.isMatchingNameConvention(testMethodName, dataProviderMethodName);\n\n        // Then:\n        assertThat(result).isTrue();\n    }", "signature": "void testIsMatchingNameConventionShouldReturnTrueIfDataProviderMethodHavingDataPrefix()", "full_signature": "@Test public void testIsMatchingNameConventionShouldReturnTrueIfDataProviderMethodHavingDataPrefix()", "class_method_signature": "DefaultDataProviderMethodResolverTest.testIsMatchingNameConventionShouldReturnTrueIfDataProviderMethodHavingDataPrefix()", "testcase": true, "constructor": false, "invocations": ["isMatchingNameConvention", "isTrue", "assertThat"]}, "focal_class": {"identifier": "DefaultDataProviderMethodResolver", "superclass": "", "interfaces": "implements DataProviderMethodResolver", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(DataProviderResolverContext context)", "modifiers": "@Override public", "return": "List<Method>", "signature": "List<Method> resolve(DataProviderResolverContext context)", "full_signature": "@Override public List<Method> resolve(DataProviderResolverContext context)", "class_method_signature": "DefaultDataProviderMethodResolver.resolve(DataProviderResolverContext context)", "testcase": false, "constructor": false}, {"identifier": "findAnnotatedMethods", "parameters": "(List<Class<?>> locations, Class<? extends Annotation> annotationClass)", "modifiers": "protected", "return": "List<Method>", "signature": "List<Method> findAnnotatedMethods(List<Class<?>> locations, Class<? extends Annotation> annotationClass)", "full_signature": "protected List<Method> findAnnotatedMethods(List<Class<?>> locations, Class<? extends Annotation> annotationClass)", "class_method_signature": "DefaultDataProviderMethodResolver.findAnnotatedMethods(List<Class<?>> locations, Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "isMatchingNameConvention", "parameters": "(String testMethodName, String dataProviderMethodName)", "modifiers": "protected", "return": "boolean", "signature": "boolean isMatchingNameConvention(String testMethodName, String dataProviderMethodName)", "full_signature": "protected boolean isMatchingNameConvention(String testMethodName, String dataProviderMethodName)", "class_method_signature": "DefaultDataProviderMethodResolver.isMatchingNameConvention(String testMethodName, String dataProviderMethodName)", "testcase": false, "constructor": false}, {"identifier": "sorted", "parameters": "(Method[] methods)", "modifiers": "private", "return": "Method[]", "signature": "Method[] sorted(Method[] methods)", "full_signature": "private Method[] sorted(Method[] methods)", "class_method_signature": "DefaultDataProviderMethodResolver.sorted(Method[] methods)", "testcase": false, "constructor": false}, {"identifier": "isMethodShadowedBy", "parameters": "(Method method, List<Method> methods)", "modifiers": "private", "return": "boolean", "signature": "boolean isMethodShadowedBy(Method method, List<Method> methods)", "full_signature": "private boolean isMethodShadowedBy(Method method, List<Method> methods)", "class_method_signature": "DefaultDataProviderMethodResolver.isMethodShadowedBy(Method method, List<Method> methods)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tngtech/junit/dataprovider/resolver/DefaultDataProviderMethodResolver.java"}, "focal_method": {"identifier": "isMatchingNameConvention", "parameters": "(String testMethodName, String dataProviderMethodName)", "modifiers": "protected", "return": "boolean", "body": "protected boolean isMatchingNameConvention(String testMethodName, String dataProviderMethodName) {\n        if (dataProviderMethodName.equals(testMethodName)) {\n            return true;\n        } else if (dataProviderMethodName.equals(testMethodName.replaceAll(\"^test\", \"dataProvider\"))) {\n            return true;\n        } else if (dataProviderMethodName.equals(testMethodName.replaceAll(\"^test\", \"data\"))) {\n            return true;\n        } else if (dataProviderMethodName\n                .equals(\"dataProvider\" + toUpperCase(testMethodName.charAt(0)) + testMethodName.substring(1))) {\n            return true;\n        } else if (dataProviderMethodName\n                .equals(\"data\" + toUpperCase(testMethodName.charAt(0)) + testMethodName.substring(1))) {\n            return true;\n        }\n        return false;\n    }", "signature": "boolean isMatchingNameConvention(String testMethodName, String dataProviderMethodName)", "full_signature": "protected boolean isMatchingNameConvention(String testMethodName, String dataProviderMethodName)", "class_method_signature": "DefaultDataProviderMethodResolver.isMatchingNameConvention(String testMethodName, String dataProviderMethodName)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "replaceAll", "equals", "replaceAll", "equals", "toUpperCase", "charAt", "substring", "equals", "toUpperCase", "charAt", "substring"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}