{"test_class": {"identifier": "TestHttpField", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-net/src/test/java/com/fireflysource/net/http/common/model/TestHttpField.java"}, "test_case": {"identifier": "testContainsList", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testContainsList() {\n        HttpField field = new HttpField(\"name\", \",aaa,Bbb,CCC, ddd , e e, \\\"\\\\\\\"f,f\\\\\\\"\\\", \");\n        assertTrue(field.contains(\"aaa\"));\n        assertTrue(field.contains(\"bbb\"));\n        assertTrue(field.contains(\"ccc\"));\n        assertTrue(field.contains(\"Aaa\"));\n        assertTrue(field.contains(\"Bbb\"));\n        assertTrue(field.contains(\"Ccc\"));\n        assertTrue(field.contains(\"AAA\"));\n        assertTrue(field.contains(\"BBB\"));\n        assertTrue(field.contains(\"CCC\"));\n        assertTrue(field.contains(\"ddd\"));\n        assertTrue(field.contains(\"e e\"));\n        assertTrue(field.contains(\"\\\"f,f\\\"\"));\n        assertFalse(field.contains(\"\"));\n        assertFalse(field.contains(\"aa\"));\n        assertFalse(field.contains(\"bb\"));\n        assertFalse(field.contains(\"cc\"));\n        assertFalse(field.contains(null));\n    }", "signature": "void testContainsList()", "full_signature": "@Test void testContainsList()", "class_method_signature": "TestHttpField.testContainsList()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertFalse", "contains", "assertFalse", "contains", "assertFalse", "contains", "assertFalse", "contains", "assertFalse", "contains"]}, "focal_class": {"identifier": "HttpField", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String ZERO_QUALITY = \"q=0\";", "modifier": "private final static", "type": "String", "declarator": "ZERO_QUALITY = \"q=0\"", "var_name": "ZERO_QUALITY"}, {"original_string": "private final HttpHeader header;", "modifier": "private final", "type": "HttpHeader", "declarator": "header", "var_name": "header"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final String value;", "modifier": "private final", "type": "String", "declarator": "value", "var_name": "value"}, {"original_string": "private int hash = 0;", "modifier": "private", "type": "int", "declarator": "hash = 0", "var_name": "hash"}], "methods": [{"identifier": "HttpField", "parameters": "(HttpHeader header, String name, String value)", "modifiers": "public", "return": "", "signature": " HttpField(HttpHeader header, String name, String value)", "full_signature": "public  HttpField(HttpHeader header, String name, String value)", "class_method_signature": "HttpField.HttpField(HttpHeader header, String name, String value)", "testcase": false, "constructor": true}, {"identifier": "HttpField", "parameters": "(HttpHeader header, String value)", "modifiers": "public", "return": "", "signature": " HttpField(HttpHeader header, String value)", "full_signature": "public  HttpField(HttpHeader header, String value)", "class_method_signature": "HttpField.HttpField(HttpHeader header, String value)", "testcase": false, "constructor": true}, {"identifier": "HttpField", "parameters": "(HttpHeader header, HttpHeaderValue value)", "modifiers": "public", "return": "", "signature": " HttpField(HttpHeader header, HttpHeaderValue value)", "full_signature": "public  HttpField(HttpHeader header, HttpHeaderValue value)", "class_method_signature": "HttpField.HttpField(HttpHeader header, HttpHeaderValue value)", "testcase": false, "constructor": true}, {"identifier": "HttpField", "parameters": "(String name, String value)", "modifiers": "public", "return": "", "signature": " HttpField(String name, String value)", "full_signature": "public  HttpField(String name, String value)", "class_method_signature": "HttpField.HttpField(String name, String value)", "testcase": false, "constructor": true}, {"identifier": "getHeader", "parameters": "()", "modifiers": "public", "return": "HttpHeader", "signature": "HttpHeader getHeader()", "full_signature": "public HttpHeader getHeader()", "class_method_signature": "HttpField.getHeader()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "HttpField.getName()", "testcase": false, "constructor": false}, {"identifier": "getLowerCaseName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLowerCaseName()", "full_signature": "public String getLowerCaseName()", "class_method_signature": "HttpField.getLowerCaseName()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValue()", "full_signature": "public String getValue()", "class_method_signature": "HttpField.getValue()", "testcase": false, "constructor": false}, {"identifier": "getIntValue", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getIntValue()", "full_signature": "public int getIntValue()", "class_method_signature": "HttpField.getIntValue()", "testcase": false, "constructor": false}, {"identifier": "getLongValue", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLongValue()", "full_signature": "public long getLongValue()", "class_method_signature": "HttpField.getLongValue()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getValues()", "full_signature": "public String[] getValues()", "class_method_signature": "HttpField.getValues()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String search)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(String search)", "full_signature": "public boolean contains(String search)", "class_method_signature": "HttpField.contains(String search)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HttpField.toString()", "testcase": false, "constructor": false}, {"identifier": "isSameName", "parameters": "(HttpField field)", "modifiers": "public", "return": "boolean", "signature": "boolean isSameName(HttpField field)", "full_signature": "public boolean isSameName(HttpField field)", "class_method_signature": "HttpField.isSameName(HttpField field)", "testcase": false, "constructor": false}, {"identifier": "nameHashCode", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int nameHashCode()", "full_signature": "private int nameHashCode()", "class_method_signature": "HttpField.nameHashCode()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HttpField.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "HttpField.equals(Object o)", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/http/common/model/HttpField.java"}, "focal_method": {"identifier": "contains", "parameters": "(String search)", "modifiers": "public", "return": "boolean", "body": "public boolean contains(String search) {\n        if (search == null)\n            return value == null;\n        if (search.length() == 0)\n            return false;\n        if (value == null)\n            return false;\n        if (search.equals(value))\n            return true;\n\n        search = StringUtils.asciiToLowerCase(search);\n\n        int state = 0;\n        int match = 0;\n        int param = 0;\n\n        for (int i = 0; i < value.length(); i++) {\n            char c = value.charAt(i);\n            switch (state) {\n                case 0: // initial white space\n                    switch (c) {\n                        case '\"': // open quote\n                            match = 0;\n                            state = 2;\n                            break;\n\n                        case ',': // ignore leading empty field\n                            break;\n\n                        case ';': // ignore leading empty field parameter\n                            param = -1;\n                            match = -1;\n                            state = 5;\n                            break;\n\n                        case ' ': // more white space\n                        case '\\t':\n                            break;\n\n                        default: // character\n                            match = Character.toLowerCase(c) == search.charAt(0) ? 1 : -1;\n                            state = 1;\n                            break;\n                    }\n                    break;\n\n                case 1: // In token\n                    switch (c) {\n                        case ',': // next field\n                            // Have we matched the token?\n                            if (match == search.length())\n                                return true;\n                            state = 0;\n                            break;\n\n                        case ';':\n                            param = match >= 0 ? 0 : -1;\n                            state = 5; // parameter\n                            break;\n\n                        default:\n                            if (match > 0) {\n                                if (match < search.length())\n                                    match = Character.toLowerCase(c) == search.charAt(match) ? (match + 1) : -1;\n                                else if (c != ' ' && c != '\\t')\n                                    match = -1;\n                            }\n                            break;\n\n                    }\n                    break;\n\n                case 2: // In Quoted token\n                    switch (c) {\n                        case '\\\\': // quoted character\n                            state = 3;\n                            break;\n\n                        case '\"': // end quote\n                            state = 4;\n                            break;\n\n                        default:\n                            if (match >= 0) {\n                                if (match < search.length())\n                                    match = Character.toLowerCase(c) == search.charAt(match) ? (match + 1) : -1;\n                                else\n                                    match = -1;\n                            }\n                    }\n                    break;\n\n                case 3: // In Quoted character in quoted token\n                    if (match >= 0) {\n                        if (match < search.length())\n                            match = Character.toLowerCase(c) == search.charAt(match) ? (match + 1) : -1;\n                        else\n                            match = -1;\n                    }\n                    state = 2;\n                    break;\n\n                case 4: // WS after end quote\n                    switch (c) {\n                        case ' ': // white space\n                        case '\\t': // white space\n                            break;\n\n                        case ';':\n                            state = 5; // parameter\n                            break;\n\n                        case ',': // end token\n                            // Have we matched the token?\n                            if (match == search.length())\n                                return true;\n                            state = 0;\n                            break;\n\n                        default:\n                            // This is an illegal token, just ignore\n                            match = -1;\n                    }\n                    break;\n\n                case 5:  // parameter\n                    switch (c) {\n                        case ',': // end token\n                            // Have we matched the token and not q=0?\n                            if (param != ZERO_QUALITY.length() && match == search.length())\n                                return true;\n                            param = 0;\n                            state = 0;\n                            break;\n\n                        case ' ': // white space\n                        case '\\t': // white space\n                            break;\n\n                        default:\n                            if (param >= 0) {\n                                if (param < ZERO_QUALITY.length())\n                                    param = Character.toLowerCase(c) == ZERO_QUALITY.charAt(param) ? (param + 1) : -1;\n                                else if (c != '0' && c != '.')\n                                    param = -1;\n                            }\n\n                    }\n                    break;\n\n                default:\n                    throw new IllegalStateException();\n            }\n        }\n\n        return param != ZERO_QUALITY.length() && match == search.length();\n    }", "signature": "boolean contains(String search)", "full_signature": "public boolean contains(String search)", "class_method_signature": "HttpField.contains(String search)", "testcase": false, "constructor": false, "invocations": ["length", "equals", "asciiToLowerCase", "length", "charAt", "toLowerCase", "charAt", "length", "length", "toLowerCase", "charAt", "length", "toLowerCase", "charAt", "length", "toLowerCase", "charAt", "length", "length", "length", "length", "toLowerCase", "charAt", "length", "length"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}