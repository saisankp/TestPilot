{"test_class": {"identifier": "AdductFormulaTest", "superclass": "extends AbstractAdductFormulaTest", "interfaces": "", "fields": [], "file": "base/silent/src/test/java/org/openscience/cdk/silent/AdductFormulaTest.java"}, "test_case": {"identifier": "testAdductFormula", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdductFormula() {\n        IAdductFormula mfS = new AdductFormula();\n        Assert.assertNotNull(mfS);\n    }", "signature": "void testAdductFormula()", "full_signature": "@Test public void testAdductFormula()", "class_method_signature": "AdductFormulaTest.testAdductFormula()", "testcase": true, "constructor": false, "invocations": ["assertNotNull"]}, "focal_class": {"identifier": "AdductFormula", "superclass": "", "interfaces": "implements Iterable<IMolecularFormula>, IAdductFormula, Cloneable", "fields": [{"original_string": "private static final long       serialVersionUID = -811384981700039389L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -811384981700039389L", "var_name": "serialVersionUID"}, {"original_string": "private List<IMolecularFormula> components;", "modifier": "private", "type": "List<IMolecularFormula>", "declarator": "components", "var_name": "components"}], "methods": [{"identifier": "AdductFormula", "parameters": "()", "modifiers": "public", "return": "", "signature": " AdductFormula()", "full_signature": "public  AdductFormula()", "class_method_signature": "AdductFormula.AdductFormula()", "testcase": false, "constructor": true}, {"identifier": "AdductFormula", "parameters": "(IMolecularFormula formula)", "modifiers": "public", "return": "", "signature": " AdductFormula(IMolecularFormula formula)", "full_signature": "public  AdductFormula(IMolecularFormula formula)", "class_method_signature": "AdductFormula.AdductFormula(IMolecularFormula formula)", "testcase": false, "constructor": true}, {"identifier": "addMolecularFormula", "parameters": "(IMolecularFormula formula)", "modifiers": "@Override public", "return": "void", "signature": "void addMolecularFormula(IMolecularFormula formula)", "full_signature": "@Override public void addMolecularFormula(IMolecularFormula formula)", "class_method_signature": "AdductFormula.addMolecularFormula(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(IMolecularFormulaSet formulaSet)", "modifiers": "@Override public", "return": "void", "signature": "void add(IMolecularFormulaSet formulaSet)", "full_signature": "@Override public void add(IMolecularFormulaSet formulaSet)", "class_method_signature": "AdductFormula.add(IMolecularFormulaSet formulaSet)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(IIsotope isotope)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(IIsotope isotope)", "full_signature": "@Override public boolean contains(IIsotope isotope)", "class_method_signature": "AdductFormula.contains(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "getCharge", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getCharge()", "full_signature": "@Override public Integer getCharge()", "class_method_signature": "AdductFormula.getCharge()", "testcase": false, "constructor": false}, {"identifier": "getIsotopeCount", "parameters": "(IIsotope isotope)", "modifiers": "@Override public", "return": "int", "signature": "int getIsotopeCount(IIsotope isotope)", "full_signature": "@Override public int getIsotopeCount(IIsotope isotope)", "class_method_signature": "AdductFormula.getIsotopeCount(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "getIsotopeCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIsotopeCount()", "full_signature": "@Override public int getIsotopeCount()", "class_method_signature": "AdductFormula.getIsotopeCount()", "testcase": false, "constructor": false}, {"identifier": "isotopes", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<IIsotope>", "signature": "Iterable<IIsotope> isotopes()", "full_signature": "@Override public Iterable<IIsotope> isotopes()", "class_method_signature": "AdductFormula.isotopes()", "testcase": false, "constructor": false}, {"identifier": "isotopesList", "parameters": "()", "modifiers": "private", "return": "List<IIsotope>", "signature": "List<IIsotope> isotopesList()", "full_signature": "private List<IIsotope> isotopesList()", "class_method_signature": "AdductFormula.isotopesList()", "testcase": false, "constructor": false}, {"identifier": "setCharge", "parameters": "(Integer charge)", "modifiers": "@Override public", "return": "void", "signature": "void setCharge(Integer charge)", "full_signature": "@Override public void setCharge(Integer charge)", "class_method_signature": "AdductFormula.setCharge(Integer charge)", "testcase": false, "constructor": false}, {"identifier": "molecularFormulas", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<IMolecularFormula>", "signature": "Iterable<IMolecularFormula> molecularFormulas()", "full_signature": "@Override public Iterable<IMolecularFormula> molecularFormulas()", "class_method_signature": "AdductFormula.molecularFormulas()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<IMolecularFormula>", "signature": "Iterator<IMolecularFormula> iterator()", "full_signature": "@Override public Iterator<IMolecularFormula> iterator()", "class_method_signature": "AdductFormula.iterator()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "AdductFormula.size()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(IMolecularFormula formula)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(IMolecularFormula formula)", "full_signature": "@Override public boolean contains(IMolecularFormula formula)", "class_method_signature": "AdductFormula.contains(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getMolecularFormula", "parameters": "(int position)", "modifiers": "@Override public", "return": "IMolecularFormula", "signature": "IMolecularFormula getMolecularFormula(int position)", "full_signature": "@Override public IMolecularFormula getMolecularFormula(int position)", "class_method_signature": "AdductFormula.getMolecularFormula(int position)", "testcase": false, "constructor": false}, {"identifier": "removeAllMolecularFormulas", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeAllMolecularFormulas()", "full_signature": "@Override public void removeAllMolecularFormulas()", "class_method_signature": "AdductFormula.removeAllMolecularFormulas()", "testcase": false, "constructor": false}, {"identifier": "removeMolecularFormula", "parameters": "(IMolecularFormula formula)", "modifiers": "@Override public", "return": "void", "signature": "void removeMolecularFormula(IMolecularFormula formula)", "full_signature": "@Override public void removeMolecularFormula(IMolecularFormula formula)", "class_method_signature": "AdductFormula.removeMolecularFormula(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "removeMolecularFormula", "parameters": "(int position)", "modifiers": "@Override public", "return": "void", "signature": "void removeMolecularFormula(int position)", "full_signature": "@Override public void removeMolecularFormula(int position)", "class_method_signature": "AdductFormula.removeMolecularFormula(int position)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "AdductFormula.clone()", "testcase": false, "constructor": false}, {"identifier": "isTheSame", "parameters": "(IIsotope isotopeOne, IIsotope isotopeTwo)", "modifiers": "private", "return": "boolean", "signature": "boolean isTheSame(IIsotope isotopeOne, IIsotope isotopeTwo)", "full_signature": "private boolean isTheSame(IIsotope isotopeOne, IIsotope isotopeTwo)", "class_method_signature": "AdductFormula.isTheSame(IIsotope isotopeOne, IIsotope isotopeTwo)", "testcase": false, "constructor": false}, {"identifier": "getBuilder", "parameters": "()", "modifiers": "@Override public", "return": "IChemObjectBuilder", "signature": "IChemObjectBuilder getBuilder()", "full_signature": "@Override public IChemObjectBuilder getBuilder()", "class_method_signature": "AdductFormula.getBuilder()", "testcase": false, "constructor": false}], "file": "base/silent/src/main/java/org/openscience/cdk/silent/AdductFormula.java"}, "focal_method": {"identifier": "AdductFormula", "parameters": "()", "modifiers": "public", "return": "", "body": "public AdductFormula() {\n        components = new ArrayList<IMolecularFormula>();\n    }", "signature": " AdductFormula()", "full_signature": "public  AdductFormula()", "class_method_signature": "AdductFormula.AdductFormula()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}