{"test_class": {"identifier": "CheckpointSchedulerActionTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IRecoverStrategy recoverStrategy;", "modifier": "private", "type": "IRecoverStrategy", "declarator": "recoverStrategy", "var_name": "recoverStrategy"}, {"original_string": "private IAction failureAction;", "modifier": "private", "type": "IAction", "declarator": "failureAction", "var_name": "failureAction"}, {"original_string": "private ISchedulerEntry entryMock;", "modifier": "private", "type": "ISchedulerEntry", "declarator": "entryMock", "var_name": "entryMock"}, {"original_string": "private IObject entryState;", "modifier": "private", "type": "IObject", "declarator": "entryState", "var_name": "entryState"}, {"original_string": "private String entryId;", "modifier": "private", "type": "String", "declarator": "entryId", "var_name": "entryId"}, {"original_string": "private IMessageBusHandler messageBusHandlerMock;", "modifier": "private", "type": "IMessageBusHandler", "declarator": "messageBusHandlerMock", "var_name": "messageBusHandlerMock"}, {"original_string": "private Object chainId = new Object();", "modifier": "private", "type": "Object", "declarator": "chainId = new Object()", "var_name": "chainId"}], "file": "CoreFeatures/Checkpoint/CheckpointActor/src/test/java/info/smart_tools/smartactors/checkpoint/checkpoint_actor/CheckpointSchedulerActionTest.java"}, "test_case": {"identifier": "Should_initializeRecoverStrategyAndCopyFieldsToEntryStateOnInitialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_initializeRecoverStrategyAndCopyFieldsToEntryStateOnInitialization()\n            throws Exception {\n        CheckpointSchedulerAction action = new CheckpointSchedulerAction();\n        IMessageProcessor processorMock = mock(IMessageProcessor.class);\n\n        IObject args = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"),\n                (\"{'recover':{'strategy':'the recover strategy'},\" +\n                        \"'message':{'a':'1'},\" +\n                        \"'responsibleCheckpointId':'rCP',\" +\n                        \"'prevCheckpointId':'prCP',\" +\n                        \"'prevCheckpointEntryId':'pcpEi'}\").replace('\\'','\"'));\n\n        args.setValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"processor\"), processorMock);\n\n        action.init(entryMock, args);\n\n        verify(recoverStrategy).init(same(entryState), any(), same(processorMock));\n        assertEquals(\"rCP\", entryState.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"responsibleCheckpointId\")));\n        assertEquals(\"prCP\", entryState.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"prevCheckpointId\")));\n        assertEquals(\"pcpEi\", entryState.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"prevCheckpointEntryId\")));\n        assertEquals(\"the recover strategy\", entryState.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"recoverStrategy\")));\n        assertEquals(\"1\", ((IObject) entryState.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"message\")))\n            .getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"a\")));\n    }", "signature": "void Should_initializeRecoverStrategyAndCopyFieldsToEntryStateOnInitialization()", "full_signature": "@Test public void Should_initializeRecoverStrategyAndCopyFieldsToEntryStateOnInitialization()", "class_method_signature": "CheckpointSchedulerActionTest.Should_initializeRecoverStrategyAndCopyFieldsToEntryStateOnInitialization()", "testcase": true, "constructor": false, "invocations": ["mock", "resolve", "getOrAdd", "replace", "setValue", "resolve", "getOrAdd", "init", "init", "verify", "same", "any", "same", "assertEquals", "getValue", "resolve", "getOrAdd", "assertEquals", "getValue", "resolve", "getOrAdd", "assertEquals", "getValue", "resolve", "getOrAdd", "assertEquals", "getValue", "resolve", "getOrAdd", "assertEquals", "getValue", "getValue", "resolve", "getOrAdd", "resolve", "getOrAdd"]}, "focal_class": {"identifier": "CheckpointSchedulerAction", "superclass": "", "interfaces": "implements ISchedulerAction", "fields": [{"original_string": "private final IFieldName recoverFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "recoverFieldName", "var_name": "recoverFieldName"}, {"original_string": "private final IFieldName strategyFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "strategyFieldName", "var_name": "strategyFieldName"}, {"original_string": "private final IFieldName recoverStrategyFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "recoverStrategyFieldName", "var_name": "recoverStrategyFieldName"}, {"original_string": "private final IFieldName messageFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "messageFieldName", "var_name": "messageFieldName"}, {"original_string": "private final IFieldName completedFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "completedFieldName", "var_name": "completedFieldName"}, {"original_string": "private final IFieldName gotFeedbackFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "gotFeedbackFieldName", "var_name": "gotFeedbackFieldName"}, {"original_string": "private final IFieldName responsibleCheckpointIdFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "responsibleCheckpointIdFieldName", "var_name": "responsibleCheckpointIdFieldName"}, {"original_string": "private final IFieldName prevCheckpointEntryIdFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "prevCheckpointEntryIdFieldName", "var_name": "prevCheckpointEntryIdFieldName"}, {"original_string": "private final IFieldName prevCheckpointIdFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "prevCheckpointIdFieldName", "var_name": "prevCheckpointIdFieldName"}, {"original_string": "private final IFieldName processorFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "processorFieldName", "var_name": "processorFieldName"}], "methods": [{"identifier": "CheckpointSchedulerAction", "parameters": "()", "modifiers": "public", "return": "", "signature": " CheckpointSchedulerAction()", "full_signature": "public  CheckpointSchedulerAction()", "class_method_signature": "CheckpointSchedulerAction.CheckpointSchedulerAction()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final ISchedulerEntry entry, final IObject args)", "modifiers": "@Override public", "return": "void", "signature": "void init(final ISchedulerEntry entry, final IObject args)", "full_signature": "@Override public void init(final ISchedulerEntry entry, final IObject args)", "class_method_signature": "CheckpointSchedulerAction.init(final ISchedulerEntry entry, final IObject args)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final ISchedulerEntry entry)", "full_signature": "@Override public void execute(final ISchedulerEntry entry)", "class_method_signature": "CheckpointSchedulerAction.execute(final ISchedulerEntry entry)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Checkpoint/CheckpointActor/src/main/java/info/smart_tools/smartactors/checkpoint/checkpoint_actor/CheckpointSchedulerAction.java"}, "focal_method": {"identifier": "init", "parameters": "(final ISchedulerEntry entry, final IObject args)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void init(final ISchedulerEntry entry, final IObject args)\n            throws SchedulerActionInitializationException {\n        try {\n            IObject recoverConfig = (IObject) args.getValue(recoverFieldName);\n            String recoverStrategyId = (String) recoverConfig.getValue(strategyFieldName);\n            IObject message = (IObject) args.getValue(messageFieldName);\n\n            if (null == message) {\n                throw new SchedulerActionInitializationException(\n                        \"Checkpoint scheduler action arguments should contain message object.\", null);\n            }\n\n            entry.getState().setValue(messageFieldName, message);\n\n            IRecoverStrategy strategy = IOC.resolve(Keys.getOrAdd(recoverStrategyId));\n\n            strategy.init(entry.getState(), recoverConfig, (IMessageProcessor) args.getValue(processorFieldName));\n\n            entry.getState().setValue(recoverStrategyFieldName, recoverStrategyId);\n\n            // Store id's of currently and previously responsible for the message checkpoints and identifier of the message in storage of\n            // previous checkpoint in the entry state.\n            entry.getState().setValue(responsibleCheckpointIdFieldName, args.getValue(responsibleCheckpointIdFieldName));\n            entry.getState().setValue(prevCheckpointIdFieldName, args.getValue(prevCheckpointIdFieldName));\n            entry.getState().setValue(prevCheckpointEntryIdFieldName, args.getValue(prevCheckpointEntryIdFieldName));\n        } catch (ReadValueException | InvalidArgumentException | ResolutionException | RecoverStrategyInitializationException\n                | ChangeValueException e) {\n            throw new SchedulerActionInitializationException(\"Error occurred initializing checkpoint action.\", e);\n        }\n    }", "signature": "void init(final ISchedulerEntry entry, final IObject args)", "full_signature": "@Override public void init(final ISchedulerEntry entry, final IObject args)", "class_method_signature": "CheckpointSchedulerAction.init(final ISchedulerEntry entry, final IObject args)", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue", "getValue", "setValue", "getState", "resolve", "getOrAdd", "init", "getState", "getValue", "setValue", "getState", "setValue", "getState", "getValue", "setValue", "getState", "getValue", "setValue", "getState", "getValue"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}