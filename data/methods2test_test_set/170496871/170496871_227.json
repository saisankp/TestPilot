{"test_class": {"identifier": "DefaultModelStorageTest", "superclass": "extends AbstractModelStorageTest", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/inference/storage/model/DefaultModelStorageTest.java"}, "test_case": {"identifier": "testSynchronizeWithExceptionInLock", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSynchronizeWithExceptionInLock() {\n        Lock[] locks = new Lock[10];\n        for (int i = 0; i < locks.length; i++)\n            locks[i] = mock(Lock.class);\n\n        RuntimeException ex = new RuntimeException();\n\n        doThrow(ex).when(locks[5]).lock();\n\n        try {\n            DefaultModelStorage.synchronize(() -> {}, locks);\n            fail();\n        }\n        catch (RuntimeException e) {\n            assertEquals(ex, e);\n        }\n\n        for (int i = 0; i < locks.length; i++) {\n            if (i <= 4) {\n                verify(locks[i], times(1)).lock();\n                verify(locks[i], times(1)).unlock();\n            }\n            else if (i > 5) {\n                verify(locks[i], times(0)).lock();\n                verify(locks[i], times(0)).unlock();\n            }\n            else {\n                verify(locks[i], times(1)).lock();\n                verify(locks[i], times(0)).unlock();\n            }\n\n            verifyNoMoreInteractions(locks[i]);\n        }\n    }", "signature": "void testSynchronizeWithExceptionInLock()", "full_signature": "@Test public void testSynchronizeWithExceptionInLock()", "class_method_signature": "DefaultModelStorageTest.testSynchronizeWithExceptionInLock()", "testcase": true, "constructor": false, "invocations": ["mock", "lock", "when", "doThrow", "synchronize", "fail", "assertEquals", "lock", "verify", "times", "unlock", "verify", "times", "lock", "verify", "times", "unlock", "verify", "times", "lock", "verify", "times", "unlock", "verify", "times", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "DefaultModelStorage", "superclass": "", "interfaces": "implements ModelStorage", "fields": [{"original_string": "private final ModelStorageProvider storageProvider;", "modifier": "private final", "type": "ModelStorageProvider", "declarator": "storageProvider", "var_name": "storageProvider"}], "methods": [{"identifier": "DefaultModelStorage", "parameters": "(ModelStorageProvider storageProvider)", "modifiers": "public", "return": "", "signature": " DefaultModelStorage(ModelStorageProvider storageProvider)", "full_signature": "public  DefaultModelStorage(ModelStorageProvider storageProvider)", "class_method_signature": "DefaultModelStorage.DefaultModelStorage(ModelStorageProvider storageProvider)", "testcase": false, "constructor": true}, {"identifier": "putFile", "parameters": "(String path, byte[] data, boolean onlyIfNotExist)", "modifiers": "@Override public", "return": "void", "signature": "void putFile(String path, byte[] data, boolean onlyIfNotExist)", "full_signature": "@Override public void putFile(String path, byte[] data, boolean onlyIfNotExist)", "class_method_signature": "DefaultModelStorage.putFile(String path, byte[] data, boolean onlyIfNotExist)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(String path)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getFile(String path)", "full_signature": "@Override public byte[] getFile(String path)", "class_method_signature": "DefaultModelStorage.getFile(String path)", "testcase": false, "constructor": false}, {"identifier": "mkdir", "parameters": "(String path, boolean onlyIfNotExist)", "modifiers": "@Override public", "return": "void", "signature": "void mkdir(String path, boolean onlyIfNotExist)", "full_signature": "@Override public void mkdir(String path, boolean onlyIfNotExist)", "class_method_signature": "DefaultModelStorage.mkdir(String path, boolean onlyIfNotExist)", "testcase": false, "constructor": false}, {"identifier": "mkdirs", "parameters": "(String path)", "modifiers": "@Override public", "return": "void", "signature": "void mkdirs(String path)", "full_signature": "@Override public void mkdirs(String path)", "class_method_signature": "DefaultModelStorage.mkdirs(String path)", "testcase": false, "constructor": false}, {"identifier": "listFiles", "parameters": "(String path)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> listFiles(String path)", "full_signature": "@Override public Set<String> listFiles(String path)", "class_method_signature": "DefaultModelStorage.listFiles(String path)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String path)", "modifiers": "@Override public", "return": "void", "signature": "void remove(String path)", "full_signature": "@Override public void remove(String path)", "class_method_signature": "DefaultModelStorage.remove(String path)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(String path)", "full_signature": "@Override public boolean exists(String path)", "class_method_signature": "DefaultModelStorage.exists(String path)", "testcase": false, "constructor": false}, {"identifier": "isDirectory", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDirectory(String path)", "full_signature": "@Override public boolean isDirectory(String path)", "class_method_signature": "DefaultModelStorage.isDirectory(String path)", "testcase": false, "constructor": false}, {"identifier": "isFile", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isFile(String path)", "full_signature": "@Override public boolean isFile(String path)", "class_method_signature": "DefaultModelStorage.isFile(String path)", "testcase": false, "constructor": false}, {"identifier": "getFileStat", "parameters": "(String path)", "modifiers": "@Override public", "return": "FileStat", "signature": "FileStat getFileStat(String path)", "full_signature": "@Override public FileStat getFileStat(String path)", "class_method_signature": "DefaultModelStorage.getFileStat(String path)", "testcase": false, "constructor": false}, {"identifier": "lockPaths", "parameters": "(Supplier<T> supplier, String... paths)", "modifiers": "@Override public", "return": "T", "signature": "T lockPaths(Supplier<T> supplier, String... paths)", "full_signature": "@Override public T lockPaths(Supplier<T> supplier, String... paths)", "class_method_signature": "DefaultModelStorage.lockPaths(Supplier<T> supplier, String... paths)", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "(String path)", "modifiers": "private", "return": "String", "signature": "String getParent(String path)", "full_signature": "private String getParent(String path)", "class_method_signature": "DefaultModelStorage.getParent(String path)", "testcase": false, "constructor": false}, {"identifier": "synchronize", "parameters": "(Runnable task, Lock... locks)", "modifiers": "static", "return": "void", "signature": "void synchronize(Runnable task, Lock... locks)", "full_signature": "static void synchronize(Runnable task, Lock... locks)", "class_method_signature": "DefaultModelStorage.synchronize(Runnable task, Lock... locks)", "testcase": false, "constructor": false}, {"identifier": "synchronize", "parameters": "(Supplier<T> task, Lock... locks)", "modifiers": "static", "return": "T", "signature": "T synchronize(Supplier<T> task, Lock... locks)", "full_signature": "static T synchronize(Supplier<T> task, Lock... locks)", "class_method_signature": "DefaultModelStorage.synchronize(Supplier<T> task, Lock... locks)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/inference/storage/model/DefaultModelStorage.java"}, "focal_method": {"identifier": "synchronize", "parameters": "(Runnable task, Lock... locks)", "modifiers": "static", "return": "void", "body": "static void synchronize(Runnable task, Lock... locks) {\n        synchronize(() -> {\n            task.run();\n            return null;\n        }, locks);\n    }", "signature": "void synchronize(Runnable task, Lock... locks)", "full_signature": "static void synchronize(Runnable task, Lock... locks)", "class_method_signature": "DefaultModelStorage.synchronize(Runnable task, Lock... locks)", "testcase": false, "constructor": false, "invocations": ["synchronize", "run"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}