{"test_class": {"identifier": "TextUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "collect_app/src/test/java/org/odk/collect/android/utilities/TextUtilsTest.java"}, "test_case": {"identifier": "textToHtml_BouncesNullInput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void textToHtml_BouncesNullInput() {\n        String input = null;\n        CharSequence observed = TextUtils.textToHtml(input);\n        Assert.assertNull(observed);\n    }", "signature": "void textToHtml_BouncesNullInput()", "full_signature": "@Test public void textToHtml_BouncesNullInput()", "class_method_signature": "TextUtilsTest.textToHtml_BouncesNullInput()", "testcase": true, "constructor": false, "invocations": ["textToHtml", "assertNull"]}, "focal_class": {"identifier": "TextUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ReplaceCallback.Callback createHeader = new ReplaceCallback.Callback() {\n        public String matchFound(MatchResult match) {\n            int level = match.group(1).length();\n            return \"<h\" + level + \">\" + match.group(2).replaceAll(\"#+$\", \"\").trim() + \"</h\" + level\n                    + \">\";\n        }\n    };", "modifier": "private static", "type": "ReplaceCallback.Callback", "declarator": "createHeader = new ReplaceCallback.Callback() {\n        public String matchFound(MatchResult match) {\n            int level = match.group(1).length();\n            return \"<h\" + level + \">\" + match.group(2).replaceAll(\"#+$\", \"\").trim() + \"</h\" + level\n                    + \">\";\n        }\n    }", "var_name": "createHeader"}, {"original_string": "private static ReplaceCallback.Callback createParagraph = new ReplaceCallback.Callback() {\n        public String matchFound(MatchResult match) {\n            String trimmed = match.group(1).trim();\n            if (trimmed.matches(\"(?i)^<\\\\/?(h|p|bl)\")) {\n                return match.group(1);\n            }\n            return \"<p>\" + trimmed + \"</p>\";\n        }\n    };", "modifier": "private static", "type": "ReplaceCallback.Callback", "declarator": "createParagraph = new ReplaceCallback.Callback() {\n        public String matchFound(MatchResult match) {\n            String trimmed = match.group(1).trim();\n            if (trimmed.matches(\"(?i)^<\\\\/?(h|p|bl)\")) {\n                return match.group(1);\n            }\n            return \"<p>\" + trimmed + \"</p>\";\n        }\n    }", "var_name": "createParagraph"}, {"original_string": "private static ReplaceCallback.Callback createSpan = new ReplaceCallback.Callback() {\n        public String matchFound(MatchResult match) {\n            String attributes = sanitizeAttributes(match.group(1));\n            return \"<font\" + attributes + \">\" + match.group(2).trim() + \"</font>\";\n        }\n\n        // throw away all styles except for color and font-family\n        private String sanitizeAttributes(String attributes) {\n\n            String stylesText = attributes.replaceAll(\"style=[\\\"'](.*?)[\\\"']\", \"$1\");\n            String[] styles = stylesText.trim().split(\";\");\n            StringBuffer stylesOutput = new StringBuffer();\n\n            for (String style : styles) {\n                String[] stylesAttributes = style.trim().split(\":\");\n                if (stylesAttributes[0].equals(\"color\")) {\n                    stylesOutput.append(\" color=\\\"\" + stylesAttributes[1] + \"\\\"\");\n                }\n                if (stylesAttributes[0].equals(\"font-family\")) {\n                    stylesOutput.append(\" face=\\\"\" + stylesAttributes[1] + \"\\\"\");\n                }\n            }\n\n            return stylesOutput.toString();\n        }\n    };", "modifier": "private static", "type": "ReplaceCallback.Callback", "declarator": "createSpan = new ReplaceCallback.Callback() {\n        public String matchFound(MatchResult match) {\n            String attributes = sanitizeAttributes(match.group(1));\n            return \"<font\" + attributes + \">\" + match.group(2).trim() + \"</font>\";\n        }\n\n        // throw away all styles except for color and font-family\n        private String sanitizeAttributes(String attributes) {\n\n            String stylesText = attributes.replaceAll(\"style=[\\\"'](.*?)[\\\"']\", \"$1\");\n            String[] styles = stylesText.trim().split(\";\");\n            StringBuffer stylesOutput = new StringBuffer();\n\n            for (String style : styles) {\n                String[] stylesAttributes = style.trim().split(\":\");\n                if (stylesAttributes[0].equals(\"color\")) {\n                    stylesOutput.append(\" color=\\\"\" + stylesAttributes[1] + \"\\\"\");\n                }\n                if (stylesAttributes[0].equals(\"font-family\")) {\n                    stylesOutput.append(\" face=\\\"\" + stylesAttributes[1] + \"\\\"\");\n                }\n            }\n\n            return stylesOutput.toString();\n        }\n    }", "var_name": "createSpan"}], "methods": [{"identifier": "TextUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " TextUtils()", "full_signature": "private  TextUtils()", "class_method_signature": "TextUtils.TextUtils()", "testcase": false, "constructor": true}, {"identifier": "markdownToHtml", "parameters": "(String text)", "modifiers": "protected static", "return": "String", "signature": "String markdownToHtml(String text)", "full_signature": "protected static String markdownToHtml(String text)", "class_method_signature": "TextUtils.markdownToHtml(String text)", "testcase": false, "constructor": false}, {"identifier": "textToHtml", "parameters": "(String text)", "modifiers": "public static", "return": "CharSequence", "signature": "CharSequence textToHtml(String text)", "full_signature": "public static CharSequence textToHtml(String text)", "class_method_signature": "TextUtils.textToHtml(String text)", "testcase": false, "constructor": false}, {"identifier": "ellipsizeBeginning", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String ellipsizeBeginning(String text)", "full_signature": "public static String ellipsizeBeginning(String text)", "class_method_signature": "TextUtils.ellipsizeBeginning(String text)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(@NonNull CharSequence delimiter, @NonNull Iterable tokens)", "modifiers": "public static", "return": "String", "signature": "String join(@NonNull CharSequence delimiter, @NonNull Iterable tokens)", "full_signature": "public static String join(@NonNull CharSequence delimiter, @NonNull Iterable tokens)", "class_method_signature": "TextUtils.join(@NonNull CharSequence delimiter, @NonNull Iterable tokens)", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/utilities/TextUtils.java"}, "focal_method": {"identifier": "textToHtml", "parameters": "(String text)", "modifiers": "public static", "return": "CharSequence", "body": "public static CharSequence textToHtml(String text) {\n\n        if (text == null) {\n            return null;\n        }\n\n        return Html.fromHtml(markdownToHtml(text));\n    }", "signature": "CharSequence textToHtml(String text)", "full_signature": "public static CharSequence textToHtml(String text)", "class_method_signature": "TextUtils.textToHtml(String text)", "testcase": false, "constructor": false, "invocations": ["fromHtml", "markdownToHtml"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}