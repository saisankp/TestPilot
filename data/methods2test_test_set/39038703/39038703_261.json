{"test_class": {"identifier": "LicenseUtilsTest", "superclass": "extends AbstractUnitTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(LicenseUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(LicenseUtilsTest.class)", "var_name": "log"}, {"original_string": "protected CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();", "modifier": "protected", "type": "CommunityService", "declarator": "communityService = ContentServiceFactory.getInstance().getCommunityService()", "var_name": "communityService"}, {"original_string": "protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();", "modifier": "protected", "type": "CollectionService", "declarator": "collectionService = ContentServiceFactory.getInstance().getCollectionService()", "var_name": "collectionService"}, {"original_string": "protected EPersonService ePersonService = EPersonServiceFactory.getInstance().getEPersonService();", "modifier": "protected", "type": "EPersonService", "declarator": "ePersonService = EPersonServiceFactory.getInstance().getEPersonService()", "var_name": "ePersonService"}, {"original_string": "protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();", "modifier": "protected", "type": "ItemService", "declarator": "itemService = ContentServiceFactory.getInstance().getItemService()", "var_name": "itemService"}, {"original_string": "protected InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();", "modifier": "protected", "type": "InstallItemService", "declarator": "installItemService = ContentServiceFactory.getInstance().getInstallItemService()", "var_name": "installItemService"}, {"original_string": "protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();", "modifier": "protected", "type": "WorkspaceItemService", "declarator": "workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService()", "var_name": "workspaceItemService"}, {"original_string": "protected LicenseService licenseService = CoreServiceFactory.getInstance().getLicenseService();", "modifier": "protected", "type": "LicenseService", "declarator": "licenseService = CoreServiceFactory.getInstance().getLicenseService()", "var_name": "licenseService"}, {"original_string": "protected BitstreamService bitstreamService = ContentServiceFactory.getInstance().getBitstreamService();", "modifier": "protected", "type": "BitstreamService", "declarator": "bitstreamService = ContentServiceFactory.getInstance().getBitstreamService()", "var_name": "bitstreamService"}, {"original_string": "private Community owningCommunity;", "modifier": "private", "type": "Community", "declarator": "owningCommunity", "var_name": "owningCommunity"}], "file": "dspace-api/src/test/java/org/dspace/content/LicenseUtilsTest.java"}, "test_case": {"identifier": "testGetLicenseText_5args", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetLicenseText_5args() throws SQLException, AuthorizeException, IOException {\n        //parameters for the test\n        Locale locale = null;\n        Collection collection = null;\n        Item item = null;\n        EPerson person = null;\n        Map<String, Object> additionalInfo = null;\n\n        // We don't test attribute 4 as this is the date, and the date often differs between when the test\n        // is executed, and when the LicenceUtils code gets the current date/time which causes the test to fail\n        String template = \"Template license: %1$s %2$s %3$s %5$s %6$s\";\n        String templateLong = \"Template license: %1$s %2$s %3$s %5$s %6$s %8$s %9$s %10$s %11$s\";\n        String templateResult = \"Template license: first name last name testgetlicensetext_5args@email.com  \";\n        String templateLongResult = \"Template license: first name last name testgetlicensetext_5args@email.com   arg1 arg2 arg3 arg4\";\n        String defaultLicense = licenseService.getDefaultSubmissionLicense();\n        context.turnOffAuthorisationSystem();\n        person = ePersonService.create(context);\n        person.setFirstName(context, \"first name\");\n        person.setLastName(context, \"last name\");\n        person.setEmail(\"testGetLicenseText_5args@email.com\");\n\n        //TODO: the tested method doesn't verify the input, will throw NPE if any parameter is null\n\n        //testing for default license\n        locale = Locale.ENGLISH;\n        collection = collectionService.create(context, owningCommunity);\n        item = installItemService.installItem(context, workspaceItemService.create(context, collection, false));\n        additionalInfo = null;\n        assertThat(\"testGetLicenseText_5args 0\", LicenseUtils.getLicenseText(locale, collection, item, person, additionalInfo), equalTo(defaultLicense));\n\n        locale = Locale.GERMAN;\n        collection = collectionService.create(context, owningCommunity);\n        item = installItemService.installItem(context, workspaceItemService.create(context, collection, false));\n        additionalInfo = null;\n        assertThat(\"testGetLicenseText_5args 1\", LicenseUtils.getLicenseText(locale, collection, item, person, additionalInfo), equalTo(defaultLicense));\n\n        locale = Locale.ENGLISH;\n        collection = collectionService.create(context, owningCommunity);\n        item = installItemService.installItem(context, workspaceItemService.create(context, collection, false));\n        additionalInfo = new HashMap<String, Object>();\n        additionalInfo.put(\"arg1\", \"arg1\");\n        additionalInfo.put(\"arg2\", \"arg2\");\n        additionalInfo.put(\"arg3\", \"arg3\");\n        assertThat(\"testGetLicenseText_5args 2\", LicenseUtils.getLicenseText(locale, collection, item, person, additionalInfo), equalTo(defaultLicense));\n\n        //test collection template\n        locale = Locale.ENGLISH;\n        collection = collectionService.create(context, owningCommunity);\n        collection.setLicense(context, template);\n        item = installItemService.installItem(context, workspaceItemService.create(context, collection, false));\n        additionalInfo = null;\n        assertThat(\"testGetLicenseText_5args 3\", LicenseUtils.getLicenseText(locale, collection, item, person, additionalInfo), equalTo(templateResult));\n\n        locale = Locale.GERMAN;\n        collection = collectionService.create(context, owningCommunity);\n        collection.setLicense(context, template);\n        item = installItemService.installItem(context, workspaceItemService.create(context, collection, false));\n        additionalInfo = null;\n        assertThat(\"testGetLicenseText_5args 4\", LicenseUtils.getLicenseText(locale, collection, item, person, additionalInfo), equalTo(templateResult));\n\n        locale = Locale.ENGLISH;\n        collection = collectionService.create(context, owningCommunity);\n        collection.setLicense(context, templateLong);\n        item = installItemService.installItem(context, workspaceItemService.create(context, collection, false));\n        additionalInfo = new LinkedHashMap<String, Object>();\n        additionalInfo.put(\"arg1\", \"arg1\");\n        additionalInfo.put(\"arg2\", \"arg2\");\n        additionalInfo.put(\"arg3\", \"arg3\");\n        additionalInfo.put(\"arg4\", \"arg4\");\n        assertThat(\"testGetLicenseText_5args 5\", LicenseUtils.getLicenseText(locale, collection, item, person, additionalInfo), equalTo(templateLongResult));\n\n        context.restoreAuthSystemState();\n    }", "signature": "void testGetLicenseText_5args()", "full_signature": "@Test public void testGetLicenseText_5args()", "class_method_signature": "LicenseUtilsTest.testGetLicenseText_5args()", "testcase": true, "constructor": false, "invocations": ["getDefaultSubmissionLicense", "turnOffAuthorisationSystem", "create", "setFirstName", "setLastName", "setEmail", "create", "installItem", "create", "assertThat", "getLicenseText", "equalTo", "create", "installItem", "create", "assertThat", "getLicenseText", "equalTo", "create", "installItem", "create", "put", "put", "put", "assertThat", "getLicenseText", "equalTo", "create", "setLicense", "installItem", "create", "assertThat", "getLicenseText", "equalTo", "create", "setLicense", "installItem", "create", "assertThat", "getLicenseText", "equalTo", "create", "setLicense", "installItem", "create", "put", "put", "put", "put", "assertThat", "getLicenseText", "equalTo", "restoreAuthSystemState"]}, "focal_class": {"identifier": "LicenseUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BitstreamService bitstreamService = ContentServiceFactory.getInstance().getBitstreamService();", "modifier": "private static final", "type": "BitstreamService", "declarator": "bitstreamService = ContentServiceFactory.getInstance().getBitstreamService()", "var_name": "bitstreamService"}, {"original_string": "private static final BitstreamFormatService bitstreamFormat = ContentServiceFactory.getInstance().getBitstreamFormatService();", "modifier": "private static final", "type": "BitstreamFormatService", "declarator": "bitstreamFormat = ContentServiceFactory.getInstance().getBitstreamFormatService()", "var_name": "bitstreamFormat"}, {"original_string": "private static final CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();", "modifier": "private static final", "type": "CollectionService", "declarator": "collectionService = ContentServiceFactory.getInstance().getCollectionService()", "var_name": "collectionService"}, {"original_string": "private static final ItemService itemService = ContentServiceFactory.getInstance().getItemService();", "modifier": "private static final", "type": "ItemService", "declarator": "itemService = ContentServiceFactory.getInstance().getItemService()", "var_name": "itemService"}], "methods": [{"identifier": "getLicenseText", "parameters": "(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)", "modifiers": "public static", "return": "String", "signature": "String getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)", "full_signature": "public static String getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)", "class_method_signature": "LicenseUtils.getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)", "testcase": false, "constructor": false}, {"identifier": "getLicenseText", "parameters": "(Locale locale, Collection collection,\n            Item item, EPerson eperson)", "modifiers": "public static", "return": "String", "signature": "String getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson)", "full_signature": "public static String getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson)", "class_method_signature": "LicenseUtils.getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson)", "testcase": false, "constructor": false}, {"identifier": "grantLicense", "parameters": "(Context context, Item item,\n            String licenseText)", "modifiers": "public static", "return": "void", "signature": "void grantLicense(Context context, Item item,\n            String licenseText)", "full_signature": "public static void grantLicense(Context context, Item item,\n            String licenseText)", "class_method_signature": "LicenseUtils.grantLicense(Context context, Item item,\n            String licenseText)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/content/LicenseUtils.java"}, "focal_method": {"identifier": "getLicenseText", "parameters": "(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)", "modifiers": "public static", "return": "String", "body": "public static String getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)\n    {\n        Formatter formatter = new Formatter(locale);\n\n        // EPerson firstname, lastname, email and the current date\n        // will be available as separate arguments to make more simple produce\n        // \"tradition\" text license\n        // collection, item and eperson object will be also available\n        int numArgs = 7 + (additionalInfo != null ? additionalInfo.size() : 0);\n        Object[] args = new Object[numArgs];\n        args[0] = eperson.getFirstName();\n        args[1] = eperson.getLastName();\n        args[2] = eperson.getEmail();\n        args[3] = new java.util.Date();\n        args[4] = new FormattableArgument(\"collection\", collection);\n        args[5] = new FormattableArgument(\"item\", item);\n        args[6] = new FormattableArgument(\"eperson\", eperson);\n\n        if (additionalInfo != null)\n        {\n            int i = 7; // Start is next index after previous args\n            for (Map.Entry<String, Object> info : additionalInfo.entrySet())\n            {\n                args[i] = new FormattableArgument(info.getKey(), info.getValue());\n                i++;\n            }\n        }\n\n        String licenseTemplate = collectionService.getLicense(collection);\n\n        return formatter.format(licenseTemplate, args).toString();\n    }", "signature": "String getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)", "full_signature": "public static String getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)", "class_method_signature": "LicenseUtils.getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)", "testcase": false, "constructor": false, "invocations": ["size", "getFirstName", "getLastName", "getEmail", "entrySet", "getKey", "getValue", "getLicense", "toString", "format"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}