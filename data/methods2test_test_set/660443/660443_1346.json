{"test_class": {"identifier": "GeometricDoubleBondEncoderFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/stereo/GeometricDoubleBondEncoderFactoryTest.java"}, "test_case": {"identifier": "testAccept_Hybridization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccept_Hybridization() throws Exception {\n\n        IAtom atom = mock(IAtom.class);\n        IBond a = mock(IBond.class);\n        IBond b = mock(IBond.class);\n        IBond c = mock(IBond.class);\n\n        when(a.getOrder()).thenReturn(IBond.Order.DOUBLE);\n\n        List<IBond> bonds = Arrays.asList(a, b, c);\n        assertFalse(GeometricDoubleBondEncoderFactory.accept(atom, bonds));\n\n        when(atom.getHybridization()).thenReturn(IAtomType.Hybridization.SP2);\n\n        assertTrue(GeometricDoubleBondEncoderFactory.accept(atom, bonds));\n    }", "signature": "void testAccept_Hybridization()", "full_signature": "@Test public void testAccept_Hybridization()", "class_method_signature": "GeometricDoubleBondEncoderFactoryTest.testAccept_Hybridization()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "thenReturn", "when", "getOrder", "asList", "assertFalse", "accept", "thenReturn", "when", "getHybridization", "assertTrue", "accept"]}, "focal_class": {"identifier": "GeometricDoubleBondEncoderFactory", "superclass": "", "interfaces": "implements StereoEncoderFactory", "fields": [], "methods": [{"identifier": "create", "parameters": "(IAtomContainer container, int[][] graph)", "modifiers": "@Override public", "return": "StereoEncoder", "signature": "StereoEncoder create(IAtomContainer container, int[][] graph)", "full_signature": "@Override public StereoEncoder create(IAtomContainer container, int[][] graph)", "class_method_signature": "GeometricDoubleBondEncoderFactory.create(IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "newEncoder", "parameters": "(IAtomContainer container, IAtom left, IAtom leftParent, IAtom right,\n            IAtom rightParent, int[][] graph)", "modifiers": "static", "return": "StereoEncoder", "signature": "StereoEncoder newEncoder(IAtomContainer container, IAtom left, IAtom leftParent, IAtom right,\n            IAtom rightParent, int[][] graph)", "full_signature": "static StereoEncoder newEncoder(IAtomContainer container, IAtom left, IAtom leftParent, IAtom right,\n            IAtom rightParent, int[][] graph)", "class_method_signature": "GeometricDoubleBondEncoderFactory.newEncoder(IAtomContainer container, IAtom left, IAtom leftParent, IAtom right,\n            IAtom rightParent, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "geometric", "parameters": "(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "modifiers": "static", "return": "GeometricParity", "signature": "GeometricParity geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "full_signature": "static GeometricParity geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "class_method_signature": "GeometricDoubleBondEncoderFactory.geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "testcase": false, "constructor": false}, {"identifier": "permutation", "parameters": "(int[] neighbors)", "modifiers": "static", "return": "PermutationParity", "signature": "PermutationParity permutation(int[] neighbors)", "full_signature": "static PermutationParity permutation(int[] neighbors)", "class_method_signature": "GeometricDoubleBondEncoderFactory.permutation(int[] neighbors)", "testcase": false, "constructor": false}, {"identifier": "moveToBack", "parameters": "(int[] neighbors, int v)", "modifiers": "static", "return": "int[]", "signature": "int[] moveToBack(int[] neighbors, int v)", "full_signature": "static int[] moveToBack(int[] neighbors, int v)", "class_method_signature": "GeometricDoubleBondEncoderFactory.moveToBack(int[] neighbors, int v)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(IAtom atom, List<IBond> bonds)", "modifiers": "static", "return": "boolean", "signature": "boolean accept(IAtom atom, List<IBond> bonds)", "full_signature": "static boolean accept(IAtom atom, List<IBond> bonds)", "class_method_signature": "GeometricDoubleBondEncoderFactory.accept(IAtom atom, List<IBond> bonds)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/stereo/GeometricDoubleBondEncoderFactory.java"}, "focal_method": {"identifier": "accept", "parameters": "(IAtom atom, List<IBond> bonds)", "modifiers": "static", "return": "boolean", "body": "static boolean accept(IAtom atom, List<IBond> bonds) {\n\n        int dbCount = 0;\n\n        // not SP2\n        if (!IAtomType.Hybridization.SP2.equals(atom.getHybridization())) return false;\n\n        // only have one neighbour (which is the other atom) -> this is no configurable\n        if (bonds.size() == 1) return false;\n\n        for (IBond bond : bonds) {\n\n            // increment the number of double bonds\n            if (DOUBLE.equals(bond.getOrder())) dbCount++;\n\n            // up/down bonds sometimes used to indicate E/Z\n            IBond.Stereo stereo = bond.getStereo();\n            if (IBond.Stereo.UP_OR_DOWN.equals(stereo) || IBond.Stereo.UP_OR_DOWN_INVERTED.equals(stereo))\n                return false;\n\n        }\n\n        // not cumulated\n        return dbCount == 1;\n    }", "signature": "boolean accept(IAtom atom, List<IBond> bonds)", "full_signature": "static boolean accept(IAtom atom, List<IBond> bonds)", "class_method_signature": "GeometricDoubleBondEncoderFactory.accept(IAtom atom, List<IBond> bonds)", "testcase": false, "constructor": false, "invocations": ["equals", "getHybridization", "size", "equals", "getOrder", "getStereo", "equals", "equals"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}