{"test_class": {"identifier": "OptionSelectorBoolTest", "superclass": "", "interfaces": "", "fields": [], "file": "outland-feature-java/src/test/java/outland/feature/OptionSelectorBoolTest.java"}, "test_case": {"identifier": "testSelectFair", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSelectFair() {\n\n    FeatureOption f = FeatureOption.newBuilder()\n        .setKey(\"false\").setValue(\"false\").setWeight(5_000).build();\n\n    FeatureOption t = FeatureOption.newBuilder()\n        .setKey(\"true\").setValue(\"true\").setWeight(5_000).build();\n\n    OptionCollection collection = OptionCollection.newBuilder()\n        .setOption(OptionType.bool)\n        .addItems(t)\n        .addItems(f)\n        .buildPartial();\n\n    final Feature feature1 = Feature.newBuilder()\n        .setOptions(collection).setStatus(Status.on)\n        .build();\n\n    OptionSelectorBool oe = new OptionSelectorBool();\n    oe.selectBooleanOptions(\n        feature1.getOptions(),\n        feature1.getStatus(),\n        new OptionSelectorWeighted(feature1.getOptions().getItemsList())\n    );\n\n    final int[] fCount = {0};\n    final int[] tCount = {0};\n\n    final int runs = 10000;\n\n    IntStream.range(0, runs).forEach(\n        i -> {\n          @SuppressWarnings(\"unused\")\n          int noop = oe.selectBooleanOptions(\n              feature1.getOptions(),\n              feature1.getStatus(),\n              new OptionSelectorWeighted(feature1.getOptions().getItemsList())\n          ) ? tCount[0]++ : fCount[0]++;\n        }\n    );\n\n    int tC = tCount[0];\n    int fC = fCount[0];\n\n    int nearestNth = runs / 10;\n    int nearestRoundUp = nearestNth / 2;\n\n    final int tr = (int) (nearestNth * Math.floor((tC + nearestRoundUp) / nearestNth));\n    final int fr = (int) (nearestNth * Math.floor((fC + nearestRoundUp) / nearestNth));\n\n    assertTrue(tr == fr && (tr + fr == runs));\n  }", "signature": "void testSelectFair()", "full_signature": "@Test public void testSelectFair()", "class_method_signature": "OptionSelectorBoolTest.testSelectFair()", "testcase": true, "constructor": false, "invocations": ["build", "setWeight", "setValue", "setKey", "newBuilder", "build", "setWeight", "setValue", "setKey", "newBuilder", "buildPartial", "addItems", "addItems", "setOption", "newBuilder", "build", "setStatus", "setOptions", "newBuilder", "selectBooleanOptions", "getOptions", "getStatus", "getItemsList", "getOptions", "forEach", "range", "selectBooleanOptions", "getOptions", "getStatus", "getItemsList", "getOptions", "floor", "floor", "assertTrue"]}, "focal_class": {"identifier": "OptionSelectorBool", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "selectBooleanOptions", "parameters": "(\n      OptionCollection options,\n      Status state,\n      OptionSelectorWeighted optionSelectorWeighted\n  )", "modifiers": "", "return": "boolean", "signature": "boolean selectBooleanOptions(\n      OptionCollection options,\n      Status state,\n      OptionSelectorWeighted optionSelectorWeighted\n  )", "full_signature": " boolean selectBooleanOptions(\n      OptionCollection options,\n      Status state,\n      OptionSelectorWeighted optionSelectorWeighted\n  )", "class_method_signature": "OptionSelectorBool.selectBooleanOptions(\n      OptionCollection options,\n      Status state,\n      OptionSelectorWeighted optionSelectorWeighted\n  )", "testcase": false, "constructor": false}], "file": "outland-feature-java/src/main/java/outland/feature/OptionSelectorBool.java"}, "focal_method": {"identifier": "selectBooleanOptions", "parameters": "(\n      OptionCollection options,\n      Status state,\n      OptionSelectorWeighted optionSelectorWeighted\n  )", "modifiers": "", "return": "boolean", "body": "boolean selectBooleanOptions(\n      OptionCollection options,\n      Status state,\n      OptionSelectorWeighted optionSelectorWeighted\n  ) {\n    if (!options.getOption().equals(OptionType.bool)) {\n      return false; // todo: throw this?\n    }\n\n    if (!state.equals(Status.on)) {\n      return false; // todo: replace with a fallback when we add fallbacks for options\n    }\n\n    final List<FeatureOption> optionsList = options.getItemsList();\n\n    if (optionsList.get(0).getWeight() == 0 && optionsList.get(1).getWeight() == 0) {\n      // zero/missing weights treated as a plain toggle\n      return state.equals(Status.on);\n    }\n\n    return Boolean.parseBoolean(optionSelectorWeighted.select().getValue());\n  }", "signature": "boolean selectBooleanOptions(\n      OptionCollection options,\n      Status state,\n      OptionSelectorWeighted optionSelectorWeighted\n  )", "full_signature": " boolean selectBooleanOptions(\n      OptionCollection options,\n      Status state,\n      OptionSelectorWeighted optionSelectorWeighted\n  )", "class_method_signature": "OptionSelectorBool.selectBooleanOptions(\n      OptionCollection options,\n      Status state,\n      OptionSelectorWeighted optionSelectorWeighted\n  )", "testcase": false, "constructor": false, "invocations": ["equals", "getOption", "equals", "getItemsList", "getWeight", "get", "getWeight", "get", "equals", "parseBoolean", "getValue", "select"]}, "repository": {"repo_id": 83838306, "url": "https://github.com/dehora/outland", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 944, "license": "licensed"}}