{"test_class": {"identifier": "FeatureRowToStoreAllocatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public transient TestPipeline p = TestPipeline.create();", "modifier": "@Rule public transient", "type": "TestPipeline", "declarator": "p = TestPipeline.create()", "var_name": "p"}], "file": "ingestion/src/test/java/feast/ingestion/transform/FeatureRowToStoreAllocatorTest.java"}, "test_case": {"identifier": "featureRowShouldBeAllocatedToStoreTagsAccordingToSubscriptionBlacklist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void featureRowShouldBeAllocatedToStoreTagsAccordingToSubscriptionBlacklist() {\n    Subscription subscription1 = Subscription.newBuilder().setProject(\"*\").setName(\"*\").build();\n    Subscription subscription2 =\n        Subscription.newBuilder().setProject(\"project1\").setName(\"fs_2\").build();\n    Subscription subscription3 =\n        Subscription.newBuilder().setProject(\"project1\").setName(\"fs_1\").setExclude(true).build();\n    Subscription subscription4 =\n        Subscription.newBuilder().setProject(\"project2\").setName(\"*\").setExclude(true).build();\n\n    List<Subscription> testStoreSubscriptions1 =\n        Arrays.asList(subscription1, subscription2, subscription3);\n    StoreProto.Store testStore1 = newStore(testStoreSubscriptions1);\n\n    List<Subscription> testStoreSubscriptions2 = Arrays.asList(subscription1, subscription4);\n    StoreProto.Store testStore2 = newStore(testStoreSubscriptions2);\n\n    Map<StoreProto.Store, TupleTag<FeatureRowProto.FeatureRow>> storeTags =\n        ImmutableMap.of(\n            testStore1, new TupleTag<>(),\n            testStore2, new TupleTag<>());\n\n    PCollectionTuple allocatedRows =\n        p.apply(\n                Create.of(\n                    FeatureRowProto.FeatureRow.newBuilder().setFeatureSet(\"project1/fs_1\").build(),\n                    FeatureRowProto.FeatureRow.newBuilder().setFeatureSet(\"project2/fs_1\").build(),\n                    FeatureRowProto.FeatureRow.newBuilder().setFeatureSet(\"project2/fs_2\").build()))\n            .apply(\n                FeatureRowToStoreAllocator.newBuilder()\n                    .setStoreTags(storeTags)\n                    .setStores(ImmutableList.of(testStore1, testStore2))\n                    .build());\n\n    PAssert.that(\n            allocatedRows\n                .get(storeTags.get(testStore1))\n                .setCoder(ProtoCoder.of(FeatureRowProto.FeatureRow.class))\n                .apply(\"CountStore1\", Count.globally()))\n        .containsInAnyOrder(2L);\n\n    PAssert.that(\n            allocatedRows\n                .get(storeTags.get(testStore2))\n                .setCoder(ProtoCoder.of(FeatureRowProto.FeatureRow.class))\n                .apply(\"CountStore2\", Count.globally()))\n        .containsInAnyOrder(1L);\n\n    p.run();\n  }", "signature": "void featureRowShouldBeAllocatedToStoreTagsAccordingToSubscriptionBlacklist()", "full_signature": "@Test public void featureRowShouldBeAllocatedToStoreTagsAccordingToSubscriptionBlacklist()", "class_method_signature": "FeatureRowToStoreAllocatorTest.featureRowShouldBeAllocatedToStoreTagsAccordingToSubscriptionBlacklist()", "testcase": true, "constructor": false, "invocations": ["build", "setName", "setProject", "newBuilder", "build", "setName", "setProject", "newBuilder", "build", "setExclude", "setName", "setProject", "newBuilder", "build", "setExclude", "setName", "setProject", "newBuilder", "asList", "newStore", "asList", "newStore", "of", "apply", "apply", "of", "build", "setFeatureSet", "newBuilder", "build", "setFeatureSet", "newBuilder", "build", "setFeatureSet", "newBuilder", "build", "setStores", "setStoreTags", "newBuilder", "of", "containsInAnyOrder", "that", "apply", "setCoder", "get", "get", "of", "globally", "containsInAnyOrder", "that", "apply", "setCoder", "get", "get", "of", "globally", "run"]}, "focal_class": {"identifier": "FeatureRowToStoreAllocator", "superclass": "extends PTransform<PCollection<FeatureRowProto.FeatureRow>, PCollectionTuple>", "interfaces": "", "fields": [], "methods": [{"identifier": "getStores", "parameters": "()", "modifiers": "public abstract", "return": "List<StoreProto.Store>", "signature": "List<StoreProto.Store> getStores()", "full_signature": "public abstract List<StoreProto.Store> getStores()", "class_method_signature": "FeatureRowToStoreAllocator.getStores()", "testcase": false, "constructor": false}, {"identifier": "getStoreTags", "parameters": "()", "modifiers": "public abstract", "return": "Map<StoreProto.Store, TupleTag<FeatureRowProto.FeatureRow>>", "signature": "Map<StoreProto.Store, TupleTag<FeatureRowProto.FeatureRow>> getStoreTags()", "full_signature": "public abstract Map<StoreProto.Store, TupleTag<FeatureRowProto.FeatureRow>> getStoreTags()", "class_method_signature": "FeatureRowToStoreAllocator.getStoreTags()", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "FeatureRowToStoreAllocator.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(PCollection<FeatureRowProto.FeatureRow> input)", "modifiers": "@Override public", "return": "PCollectionTuple", "signature": "PCollectionTuple expand(PCollection<FeatureRowProto.FeatureRow> input)", "full_signature": "@Override public PCollectionTuple expand(PCollection<FeatureRowProto.FeatureRow> input)", "class_method_signature": "FeatureRowToStoreAllocator.expand(PCollection<FeatureRowProto.FeatureRow> input)", "testcase": false, "constructor": false}], "file": "ingestion/src/main/java/feast/ingestion/transform/FeatureRowToStoreAllocator.java"}, "focal_method": {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "body": "public static Builder newBuilder() {\n    return new AutoValue_FeatureRowToStoreAllocator.Builder();\n  }", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "FeatureRowToStoreAllocator.newBuilder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}