{"test_class": {"identifier": "PojoPluginTest", "superclass": "", "interfaces": "", "fields": [], "file": "rice-middleware/kns/src/test/java/org/kuali/rice/kns/web/struts/form/pojo/PojoPluginTest.java"}, "test_case": {"identifier": "testGetChildCollectionThrowsNestedNullException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetChildCollectionThrowsNestedNullException() throws Exception {\n\n        // We need to initialize PropertyUtils to use our plugins\n        new PojoPlugin().init(null, new ModuleConfigImpl());\n\n        TestCollectionHolderHolder tchh = new TestCollectionHolderHolder();\n        tchh.setTch(new TestCollectionHolder());\n        \n        // this simulates a situation in which the property (tch) is a proxied object \n        // that can't be fetched, so getting it works (returns the proxy) but trying \n        // to access the collection underneath it throws a NestedNullException\n        Object result = ObjectUtils.getPropertyValue(tchh, \"tch.collection\");\n\n        // before, the empty string was being returned, which doesn't make sense for a collection\n        assertFalse(\"\".equals(result));\n\n        // now we return null\n        assertTrue(null == result);\n    }", "signature": "void testGetChildCollectionThrowsNestedNullException()", "full_signature": "@Test public void testGetChildCollectionThrowsNestedNullException()", "class_method_signature": "PojoPluginTest.testGetChildCollectionThrowsNestedNullException()", "testcase": true, "constructor": false, "invocations": ["init", "setTch", "getPropertyValue", "assertFalse", "equals", "assertTrue"]}, "focal_class": {"identifier": "PojoPlugin", "superclass": "", "interfaces": "implements PlugIn", "fields": [{"original_string": "static final Logger logger = Logger.getLogger(PojoPlugin.class.getName());", "modifier": "static final", "type": "Logger", "declarator": "logger = Logger.getLogger(PojoPlugin.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "initBeanUtils", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void initBeanUtils()", "full_signature": "public static void initBeanUtils()", "class_method_signature": "PojoPlugin.initBeanUtils()", "testcase": false, "constructor": false}, {"identifier": "PojoPlugin", "parameters": "()", "modifiers": "public", "return": "", "signature": " PojoPlugin()", "full_signature": "public  PojoPlugin()", "class_method_signature": "PojoPlugin.PojoPlugin()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(ActionServlet servlet, ModuleConfig config)", "modifiers": "public", "return": "void", "signature": "void init(ActionServlet servlet, ModuleConfig config)", "full_signature": "public void init(ActionServlet servlet, ModuleConfig config)", "class_method_signature": "PojoPlugin.init(ActionServlet servlet, ModuleConfig config)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "PojoPlugin.destroy()", "testcase": false, "constructor": false}], "file": "rice-middleware/kns/src/main/java/org/kuali/rice/kns/web/struts/form/pojo/PojoPlugin.java"}, "focal_method": {"identifier": "init", "parameters": "(ActionServlet servlet, ModuleConfig config)", "modifiers": "public", "return": "void", "body": "public void init(ActionServlet servlet, ModuleConfig config) throws ServletException {\n        initBeanUtils();\n        // override the Struts ControllerConfig with our own wrapper that knows how to\n        // dynamically find max file upload size according to Rice run-time settings\n        config.setControllerConfig(new KualiControllerConfig(config.getControllerConfig()));\n    }", "signature": "void init(ActionServlet servlet, ModuleConfig config)", "full_signature": "public void init(ActionServlet servlet, ModuleConfig config)", "class_method_signature": "PojoPlugin.init(ActionServlet servlet, ModuleConfig config)", "testcase": false, "constructor": false, "invocations": ["initBeanUtils", "setControllerConfig", "getControllerConfig"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}