{"test_class": {"identifier": "CssUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX = 10000;", "modifier": "private static final", "type": "int", "declarator": "MAX = 10000", "var_name": "MAX"}, {"original_string": "private CssUtils css;", "modifier": "private", "type": "CssUtils", "declarator": "css", "var_name": "css"}, {"original_string": "private String string;", "modifier": "private", "type": "String", "declarator": "string", "var_name": "string"}], "file": "xmlworker/src/test/java/com/itextpdf/tool/xml/css/CssUtilsTest.java"}, "test_case": {"identifier": "parseBorder3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void parseBorder3() {\n\t\tString border = \"1px dashed\";\n\t\tMap<String, String> map = css.parseBorder(border);\n\t\tAssert.assertTrue(map.containsKey(\"border-left-style\"));\n\t\tAssert.assertEquals(\"dashed\", map.get(\"border-left-style\"));\n\t\tAssert.assertTrue(map.containsKey(\"border-top-style\"));\n\t\tAssert.assertEquals(\"dashed\", map.get(\"border-top-style\"));\n\t\tAssert.assertTrue(map.containsKey(\"border-bottom-style\"));\n\t\tAssert.assertEquals(\"dashed\", map.get(\"border-bottom-style\"));\n\t\tAssert.assertTrue(map.containsKey(\"border-right-style\"));\n\t\tAssert.assertEquals(\"dashed\", map.get(\"border-right-style\"));\n\t\tAssert.assertTrue(map.containsKey(\"border-left-width\"));\n\t\tAssert.assertEquals(\"1px\", map.get(\"border-left-width\"));\n\t\tAssert.assertTrue(map.containsKey(\"border-top-width\"));\n\t\tAssert.assertEquals(\"1px\", map.get(\"border-top-width\"));\n\t\tAssert.assertTrue(map.containsKey(\"border-bottom-width\"));\n\t\tAssert.assertEquals(\"1px\", map.get(\"border-bottom-width\"));\n\t\tAssert.assertTrue(map.containsKey(\"border-right-width\"));\n\t\tAssert.assertEquals(\"1px\", map.get(\"border-right-width\"));\n\t}", "signature": "void parseBorder3()", "full_signature": "@Test public void parseBorder3()", "class_method_signature": "CssUtilsTest.parseBorder3()", "testcase": true, "constructor": false, "invocations": ["parseBorder", "assertTrue", "containsKey", "assertEquals", "get", "assertTrue", "containsKey", "assertEquals", "get", "assertTrue", "containsKey", "assertEquals", "get", "assertTrue", "containsKey", "assertEquals", "get", "assertTrue", "containsKey", "assertEquals", "get", "assertTrue", "containsKey", "assertEquals", "get", "assertTrue", "containsKey", "assertEquals", "get", "assertTrue", "containsKey", "assertEquals", "get"]}, "focal_class": {"identifier": "CssUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String COLOR = \"-color\";", "modifier": "private static final", "type": "String", "declarator": "COLOR = \"-color\"", "var_name": "COLOR"}, {"original_string": "private static final String STYLE = \"-style\";", "modifier": "private static final", "type": "String", "declarator": "STYLE = \"-style\"", "var_name": "STYLE"}, {"original_string": "private static final String WIDTH = \"-width\";", "modifier": "private static final", "type": "String", "declarator": "WIDTH = \"-width\"", "var_name": "WIDTH"}, {"original_string": "private static final String BORDER2 = \"border-\";", "modifier": "private static final", "type": "String", "declarator": "BORDER2 = \"border-\"", "var_name": "BORDER2"}, {"original_string": "private static final String _0_LEFT_1 = \"{0}left{1}\";", "modifier": "private static final", "type": "String", "declarator": "_0_LEFT_1 = \"{0}left{1}\"", "var_name": "_0_LEFT_1"}, {"original_string": "private static final String _0_RIGHT_1 = \"{0}right{1}\";", "modifier": "private static final", "type": "String", "declarator": "_0_RIGHT_1 = \"{0}right{1}\"", "var_name": "_0_RIGHT_1"}, {"original_string": "private static final String _0_BOTTOM_1 = \"{0}bottom{1}\";", "modifier": "private static final", "type": "String", "declarator": "_0_BOTTOM_1 = \"{0}bottom{1}\"", "var_name": "_0_BOTTOM_1"}, {"original_string": "private static final String _0_TOP_1 = \"{0}top{1}\";", "modifier": "private static final", "type": "String", "declarator": "_0_TOP_1 = \"{0}top{1}\"", "var_name": "_0_TOP_1"}, {"original_string": "private static CssUtils instance = new CssUtils();", "modifier": "private static", "type": "CssUtils", "declarator": "instance = new CssUtils()", "var_name": "instance"}, {"original_string": "public static final int DEFAULT_FONT_SIZE_PT = 12;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_FONT_SIZE_PT = 12", "var_name": "DEFAULT_FONT_SIZE_PT"}, {"original_string": "private static final Set<String> borderwidth = new HashSet<String>(\n\t\t\tArrays.asList(new String[] { CSS.Value.THIN, CSS.Value.MEDIUM, CSS.Value.THICK }));", "modifier": "private static final", "type": "Set<String>", "declarator": "borderwidth = new HashSet<String>(\n\t\t\tArrays.asList(new String[] { CSS.Value.THIN, CSS.Value.MEDIUM, CSS.Value.THICK }))", "var_name": "borderwidth"}, {"original_string": "private static final Set<String> borderstyle = new HashSet<String>(\n\t\t\tArrays.asList(new String[] { CSS.Value.NONE, CSS.Value.HIDDEN, CSS.Value.DOTTED, CSS.Value.DASHED, CSS.Value.SOLID, CSS.Value.DOUBLE, CSS.Value.GROOVE, CSS.Value.RIDGE, CSS.Value.INSET, CSS.Value.OUTSET}));", "modifier": "private static final", "type": "Set<String>", "declarator": "borderstyle = new HashSet<String>(\n\t\t\tArrays.asList(new String[] { CSS.Value.NONE, CSS.Value.HIDDEN, CSS.Value.DOTTED, CSS.Value.DASHED, CSS.Value.SOLID, CSS.Value.DOUBLE, CSS.Value.GROOVE, CSS.Value.RIDGE, CSS.Value.INSET, CSS.Value.OUTSET}))", "var_name": "borderstyle"}, {"original_string": "private static final Set<String> backgroundPositions = new HashSet<String>(\n\t\t\tArrays.asList(new String[] { CSS.Value.LEFT, CSS.Value.CENTER, CSS.Value.BOTTOM, CSS.Value.TOP, CSS.Value.RIGHT }));", "modifier": "private static final", "type": "Set<String>", "declarator": "backgroundPositions = new HashSet<String>(\n\t\t\tArrays.asList(new String[] { CSS.Value.LEFT, CSS.Value.CENTER, CSS.Value.BOTTOM, CSS.Value.TOP, CSS.Value.RIGHT }))", "var_name": "backgroundPositions"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "CssUtils", "signature": "CssUtils getInstance()", "full_signature": "public static CssUtils getInstance()", "class_method_signature": "CssUtils.getInstance()", "testcase": false, "constructor": false}, {"identifier": "CssUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " CssUtils()", "full_signature": "private  CssUtils()", "class_method_signature": "CssUtils.CssUtils()", "testcase": false, "constructor": true}, {"identifier": "parseBoxValues", "parameters": "(final java.lang.String box,\n                                             final java.lang.String pre, final java.lang.String post)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> parseBoxValues(final java.lang.String box,\n                                             final java.lang.String pre, final java.lang.String post)", "full_signature": "public Map<String, String> parseBoxValues(final java.lang.String box,\n                                             final java.lang.String pre, final java.lang.String post)", "class_method_signature": "CssUtils.parseBoxValues(final java.lang.String box,\n                                             final java.lang.String pre, final java.lang.String post)", "testcase": false, "constructor": false}, {"identifier": "parseBoxValues", "parameters": "(final String box,\n                                              final String pre, final String post, String preKey)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> parseBoxValues(final String box,\n                                              final String pre, final String post, String preKey)", "full_signature": "public Map<String, String> parseBoxValues(final String box,\n                                              final String pre, final String post, String preKey)", "class_method_signature": "CssUtils.parseBoxValues(final String box,\n                                              final String pre, final String post, String preKey)", "testcase": false, "constructor": false}, {"identifier": "parseBorder", "parameters": "(final String border)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> parseBorder(final String border)", "full_signature": "public Map<String, String> parseBorder(final String border)", "class_method_signature": "CssUtils.parseBorder(final String border)", "testcase": false, "constructor": false}, {"identifier": "parseBorder", "parameters": "(final String border, final String borderKey)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> parseBorder(final String border, final String borderKey)", "full_signature": "public Map<String, String> parseBorder(final String border, final String borderKey)", "class_method_signature": "CssUtils.parseBorder(final String border, final String borderKey)", "testcase": false, "constructor": false}, {"identifier": "stripDoubleSpacesAndTrim", "parameters": "(final String str)", "modifiers": "public", "return": "String", "signature": "String stripDoubleSpacesAndTrim(final String str)", "full_signature": "public String stripDoubleSpacesAndTrim(final String str)", "class_method_signature": "CssUtils.stripDoubleSpacesAndTrim(final String str)", "testcase": false, "constructor": false}, {"identifier": "stripDoubleSpacesTrimAndToLowerCase", "parameters": "(final String str)", "modifiers": "public", "return": "String", "signature": "String stripDoubleSpacesTrimAndToLowerCase(final String str)", "full_signature": "public String stripDoubleSpacesTrimAndToLowerCase(final String str)", "class_method_signature": "CssUtils.stripDoubleSpacesTrimAndToLowerCase(final String str)", "testcase": false, "constructor": false}, {"identifier": "processBackground", "parameters": "(final String background)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> processBackground(final String background)", "full_signature": "public Map<String, String> processBackground(final String background)", "class_method_signature": "CssUtils.processBackground(final String background)", "testcase": false, "constructor": false}, {"identifier": "processListStyle", "parameters": "(final String listStyle)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> processListStyle(final String listStyle)", "full_signature": "public Map<String, String> processListStyle(final String listStyle)", "class_method_signature": "CssUtils.processListStyle(final String listStyle)", "testcase": false, "constructor": false}, {"identifier": "processFont", "parameters": "(final String font)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> processFont(final String font)", "full_signature": "public Map<String, String> processFont(final String font)", "class_method_signature": "CssUtils.processFont(final String font)", "testcase": false, "constructor": false}, {"identifier": "checkMetricStyle", "parameters": "(final Tag t, final String style)", "modifiers": "public", "return": "float", "signature": "float checkMetricStyle(final Tag t, final String style)", "full_signature": "public float checkMetricStyle(final Tag t, final String style)", "class_method_signature": "CssUtils.checkMetricStyle(final Tag t, final String style)", "testcase": false, "constructor": false}, {"identifier": "checkMetricStyle", "parameters": "(final Map<String,String> css, final String style)", "modifiers": "public", "return": "Float", "signature": "Float checkMetricStyle(final Map<String,String> css, final String style)", "full_signature": "public Float checkMetricStyle(final Map<String,String> css, final String style)", "class_method_signature": "CssUtils.checkMetricStyle(final Map<String,String> css, final String style)", "testcase": false, "constructor": false}, {"identifier": "isMetricValue", "parameters": "(final String value)", "modifiers": "public", "return": "boolean", "signature": "boolean isMetricValue(final String value)", "full_signature": "public boolean isMetricValue(final String value)", "class_method_signature": "CssUtils.isMetricValue(final String value)", "testcase": false, "constructor": false}, {"identifier": "isRelativeValue", "parameters": "(final String value)", "modifiers": "public", "return": "boolean", "signature": "boolean isRelativeValue(final String value)", "full_signature": "public boolean isRelativeValue(final String value)", "class_method_signature": "CssUtils.isRelativeValue(final String value)", "testcase": false, "constructor": false}, {"identifier": "isNumericValue", "parameters": "(final String value)", "modifiers": "public", "return": "boolean", "signature": "boolean isNumericValue(final String value)", "full_signature": "public boolean isNumericValue(final String value)", "class_method_signature": "CssUtils.isNumericValue(final String value)", "testcase": false, "constructor": false}, {"identifier": "parseValueToPt", "parameters": "(final String value, final float baseValue)", "modifiers": "public", "return": "float", "signature": "float parseValueToPt(final String value, final float baseValue)", "full_signature": "public float parseValueToPt(final String value, final float baseValue)", "class_method_signature": "CssUtils.parseValueToPt(final String value, final float baseValue)", "testcase": false, "constructor": false}, {"identifier": "parseRelativeValue", "parameters": "(final String relativeValue, final float baseValue)", "modifiers": "public", "return": "float", "signature": "float parseRelativeValue(final String relativeValue, final float baseValue)", "full_signature": "public float parseRelativeValue(final String relativeValue, final float baseValue)", "class_method_signature": "CssUtils.parseRelativeValue(final String relativeValue, final float baseValue)", "testcase": false, "constructor": false}, {"identifier": "parsePxInCmMmPcToPt", "parameters": "(final String length, final String defaultMetric)", "modifiers": "public", "return": "float", "signature": "float parsePxInCmMmPcToPt(final String length, final String defaultMetric)", "full_signature": "public float parsePxInCmMmPcToPt(final String length, final String defaultMetric)", "class_method_signature": "CssUtils.parsePxInCmMmPcToPt(final String length, final String defaultMetric)", "testcase": false, "constructor": false}, {"identifier": "parsePxInCmMmPcToPt", "parameters": "(final String length)", "modifiers": "public", "return": "float", "signature": "float parsePxInCmMmPcToPt(final String length)", "full_signature": "public float parsePxInCmMmPcToPt(final String length)", "class_method_signature": "CssUtils.parsePxInCmMmPcToPt(final String length)", "testcase": false, "constructor": false}, {"identifier": "determinePositionBetweenValueAndUnit", "parameters": "(final String string)", "modifiers": "public", "return": "int", "signature": "int determinePositionBetweenValueAndUnit(final String string)", "full_signature": "public int determinePositionBetweenValueAndUnit(final String string)", "class_method_signature": "CssUtils.determinePositionBetweenValueAndUnit(final String string)", "testcase": false, "constructor": false}, {"identifier": "getLeftAndRightMargin", "parameters": "(final Tag t, final float pageWidth)", "modifiers": "public", "return": "float", "signature": "float getLeftAndRightMargin(final Tag t, final float pageWidth)", "full_signature": "public float getLeftAndRightMargin(final Tag t, final float pageWidth)", "class_method_signature": "CssUtils.getLeftAndRightMargin(final Tag t, final float pageWidth)", "testcase": false, "constructor": false}, {"identifier": "extractUrl", "parameters": "(final String url)", "modifiers": "public", "return": "String", "signature": "String extractUrl(final String url)", "full_signature": "public String extractUrl(final String url)", "class_method_signature": "CssUtils.extractUrl(final String url)", "testcase": false, "constructor": false}, {"identifier": "validateTextHeight", "parameters": "(final Map<String, String> css,\n\t\t\tfloat textHeight)", "modifiers": "public", "return": "float", "signature": "float validateTextHeight(final Map<String, String> css,\n\t\t\tfloat textHeight)", "full_signature": "public float validateTextHeight(final Map<String, String> css,\n\t\t\tfloat textHeight)", "class_method_signature": "CssUtils.validateTextHeight(final Map<String, String> css,\n\t\t\tfloat textHeight)", "testcase": false, "constructor": false}, {"identifier": "calculateMarginTop", "parameters": "(final String value, final float largestFont, final MarginMemory configuration)", "modifiers": "public", "return": "float", "signature": "float calculateMarginTop(final String value, final float largestFont, final MarginMemory configuration)", "full_signature": "public float calculateMarginTop(final String value, final float largestFont, final MarginMemory configuration)", "class_method_signature": "CssUtils.calculateMarginTop(final String value, final float largestFont, final MarginMemory configuration)", "testcase": false, "constructor": false}, {"identifier": "calculateMarginTop", "parameters": "(final float value, final MarginMemory configuration)", "modifiers": "public", "return": "float", "signature": "float calculateMarginTop(final float value, final MarginMemory configuration)", "full_signature": "public float calculateMarginTop(final float value, final MarginMemory configuration)", "class_method_signature": "CssUtils.calculateMarginTop(final float value, final MarginMemory configuration)", "testcase": false, "constructor": false}, {"identifier": "trimAndRemoveQuoutes", "parameters": "(String s)", "modifiers": "public", "return": "String", "signature": "String trimAndRemoveQuoutes(String s)", "full_signature": "public String trimAndRemoveQuoutes(String s)", "class_method_signature": "CssUtils.trimAndRemoveQuoutes(String s)", "testcase": false, "constructor": false}, {"identifier": "splitComplexCssStyle", "parameters": "(String s)", "modifiers": "public", "return": "String[]", "signature": "String[] splitComplexCssStyle(String s)", "full_signature": "public String[] splitComplexCssStyle(String s)", "class_method_signature": "CssUtils.splitComplexCssStyle(String s)", "testcase": false, "constructor": false}], "file": "xmlworker/src/main/java/com/itextpdf/tool/xml/css/CssUtils.java"}, "focal_method": {"identifier": "parseBorder", "parameters": "(final String border)", "modifiers": "public", "return": "Map<String, String>", "body": "public Map<String, String> parseBorder(final String border) {\n        return parseBorder(border, null);\n    }", "signature": "Map<String, String> parseBorder(final String border)", "full_signature": "public Map<String, String> parseBorder(final String border)", "class_method_signature": "CssUtils.parseBorder(final String border)", "testcase": false, "constructor": false, "invocations": ["parseBorder"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}