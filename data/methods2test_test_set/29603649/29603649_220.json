{"test_class": {"identifier": "AndGeneralCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ConditionChecker headerChecker;", "modifier": "@Mock\n    private", "type": "ConditionChecker", "declarator": "headerChecker", "var_name": "headerChecker"}, {"original_string": "@Mock\n    private ConditionChecker bodyChecker;", "modifier": "@Mock\n    private", "type": "ConditionChecker", "declarator": "bodyChecker", "var_name": "bodyChecker"}, {"original_string": "@Mock\n    private WilmaHttpRequest request;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private ParameterList parameterMap;", "modifier": "@Mock\n    private", "type": "ParameterList", "declarator": "parameterMap", "var_name": "parameterMap"}, {"original_string": "@Mock\n    private ConditionChecker urlChecker;", "modifier": "@Mock\n    private", "type": "ConditionChecker", "declarator": "urlChecker", "var_name": "urlChecker"}, {"original_string": "private AndGeneralChecker underTest;", "modifier": "private", "type": "AndGeneralChecker", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/test/java/com/epam/wilma/stubconfig/condition/checker/general/AndGeneralCheckerTest.java"}, "test_case": {"identifier": "testCheckConditionShouldCallHeaderAndBodyPatternCheckersAndReturnWithTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckConditionShouldCallHeaderAndBodyPatternCheckersAndReturnWithTrue() {\n        //GIVEN\n        BDDMockito.given(headerChecker.checkCondition(request, parameterMap)).willReturn(true);\n        BDDMockito.given(bodyChecker.checkCondition(request, parameterMap)).willReturn(true);\n        BDDMockito.given(urlChecker.checkCondition(request, parameterMap)).willReturn(true);\n        //WHEN\n        boolean actual = underTest.checkCondition(request, parameterMap);\n        //THEN\n        assertTrue(actual);\n    }", "signature": "void testCheckConditionShouldCallHeaderAndBodyPatternCheckersAndReturnWithTrue()", "full_signature": "@Test public void testCheckConditionShouldCallHeaderAndBodyPatternCheckersAndReturnWithTrue()", "class_method_signature": "AndGeneralCheckerTest.testCheckConditionShouldCallHeaderAndBodyPatternCheckersAndReturnWithTrue()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "checkCondition", "willReturn", "given", "checkCondition", "willReturn", "given", "checkCondition", "checkCondition", "assertTrue"]}, "focal_class": {"identifier": "AndGeneralChecker", "superclass": "", "interfaces": "implements ConditionChecker", "fields": [{"original_string": "private final ConditionChecker headerChecker;", "modifier": "private final", "type": "ConditionChecker", "declarator": "headerChecker", "var_name": "headerChecker"}, {"original_string": "private final ConditionChecker bodyChecker;", "modifier": "private final", "type": "ConditionChecker", "declarator": "bodyChecker", "var_name": "bodyChecker"}, {"original_string": "private final ConditionChecker urlChecker;", "modifier": "private final", "type": "ConditionChecker", "declarator": "urlChecker", "var_name": "urlChecker"}], "methods": [{"identifier": "AndGeneralChecker", "parameters": "(final ConditionChecker headerChecker, final ConditionChecker bodyChecker, final ConditionChecker urlChecker)", "modifiers": "public", "return": "", "signature": " AndGeneralChecker(final ConditionChecker headerChecker, final ConditionChecker bodyChecker, final ConditionChecker urlChecker)", "full_signature": "public  AndGeneralChecker(final ConditionChecker headerChecker, final ConditionChecker bodyChecker, final ConditionChecker urlChecker)", "class_method_signature": "AndGeneralChecker.AndGeneralChecker(final ConditionChecker headerChecker, final ConditionChecker bodyChecker, final ConditionChecker urlChecker)", "testcase": false, "constructor": true}, {"identifier": "checkCondition", "parameters": "(final WilmaHttpRequest request, final ParameterList parameterMap)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterMap)", "full_signature": "@Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterMap)", "class_method_signature": "AndGeneralChecker.checkCondition(final WilmaHttpRequest request, final ParameterList parameterMap)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/main/java/com/epam/wilma/stubconfig/condition/checker/general/AndGeneralChecker.java"}, "focal_method": {"identifier": "checkCondition", "parameters": "(final WilmaHttpRequest request, final ParameterList parameterMap)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterMap) {\n        return headerChecker.checkCondition(request, parameterMap) || bodyChecker.checkCondition(request, parameterMap)\n                || urlChecker.checkCondition(request, parameterMap);\n    }", "signature": "boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterMap)", "full_signature": "@Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterMap)", "class_method_signature": "AndGeneralChecker.checkCondition(final WilmaHttpRequest request, final ParameterList parameterMap)", "testcase": false, "constructor": false, "invocations": ["checkCondition", "checkCondition", "checkCondition"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}