{"test_class": {"identifier": "TraversalTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ImmutableList<TraversalSection> sections = ImmutableList.of(\n            new ConstantAccelerationTraversalSection(4, 2, 0, 4, 2),\n            new ConstantSpeedTraversalSection(4, 4, 1),\n            new ConstantAccelerationTraversalSection(8, -1, 4, 0, 4));", "modifier": "private final", "type": "ImmutableList<TraversalSection>", "declarator": "sections = ImmutableList.of(\n            new ConstantAccelerationTraversalSection(4, 2, 0, 4, 2),\n            new ConstantSpeedTraversalSection(4, 4, 1),\n            new ConstantAccelerationTraversalSection(8, -1, 4, 0, 4))", "var_name": "sections"}, {"original_string": "private final Traversal constantAccelerationTraversal = new Traversal(sections);", "modifier": "private final", "type": "Traversal", "declarator": "constantAccelerationTraversal = new Traversal(sections)", "var_name": "constantAccelerationTraversal"}, {"original_string": "private final ImmutableList<TraversalSection> realExampleSections = ImmutableList.of(\n        new ConstantAccelerationTraversalSection(0.014932585323793109, 2.7993232561717623E-6, 8.000102181418545E-5, 3.000040503637245E-4, 78.59150530918177),\n        new ConstantSpeedTraversalSection(1.434959353209076, 3.000040503637245E-4, 4783.133265932021),\n        new ConstantAccelerationTraversalSection(0.014932585323793107, -2.7993232561717623E-6, 3.000040503637245E-4, 8.000102181418545E-5, 78.59150530918177),\n        new ConstantSpeedTraversalSection(0.1988110026007896, 8.000102181418545E-5, 2485.1057910554996),\n        new ConstantAccelerationTraversalSection(0.0011431626335406458, -2.7993232561717623E-6, 8.000102181418545E-5, 0.0, 28.578700811992505));", "modifier": "private final", "type": "ImmutableList<TraversalSection>", "declarator": "realExampleSections = ImmutableList.of(\n        new ConstantAccelerationTraversalSection(0.014932585323793109, 2.7993232561717623E-6, 8.000102181418545E-5, 3.000040503637245E-4, 78.59150530918177),\n        new ConstantSpeedTraversalSection(1.434959353209076, 3.000040503637245E-4, 4783.133265932021),\n        new ConstantAccelerationTraversalSection(0.014932585323793107, -2.7993232561717623E-6, 3.000040503637245E-4, 8.000102181418545E-5, 78.59150530918177),\n        new ConstantSpeedTraversalSection(0.1988110026007896, 8.000102181418545E-5, 2485.1057910554996),\n        new ConstantAccelerationTraversalSection(0.0011431626335406458, -2.7993232561717623E-6, 8.000102181418545E-5, 0.0, 28.578700811992505))", "var_name": "realExampleSections"}, {"original_string": "private final Traversal realTraversal = new Traversal(realExampleSections);", "modifier": "private final", "type": "Traversal", "declarator": "realTraversal = new Traversal(realExampleSections)", "var_name": "realTraversal"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/physics/TraversalTest.java"}, "test_case": {"identifier": "getSpeedAtTime_realExample", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void getSpeedAtTime_realExample() {\n        assertThat(realTraversal.getSpeedAtTime(4968.894977362377)).isCloseTo(8.000102181418545E-5, within(1e-9));\n    }", "signature": "void getSpeedAtTime_realExample()", "full_signature": "@Test void getSpeedAtTime_realExample()", "class_method_signature": "TraversalTest.getSpeedAtTime_realExample()", "testcase": true, "constructor": false, "invocations": ["isCloseTo", "assertThat", "getSpeedAtTime", "within"]}, "focal_class": {"identifier": "Traversal", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final double ROUNDING_ERROR_FRACTION = 1E-9;", "modifier": "private static final", "type": "double", "declarator": "ROUNDING_ERROR_FRACTION = 1E-9", "var_name": "ROUNDING_ERROR_FRACTION"}, {"original_string": "public static final Traversal EMPTY_TRAVERSAL = new Traversal(ImmutableList.of());", "modifier": "public static final", "type": "Traversal", "declarator": "EMPTY_TRAVERSAL = new Traversal(ImmutableList.of())", "var_name": "EMPTY_TRAVERSAL"}, {"original_string": "private final ImmutableList<TraversalSection> sections;", "modifier": "private final", "type": "ImmutableList<TraversalSection>", "declarator": "sections", "var_name": "sections"}, {"original_string": "private final double totalDuration;", "modifier": "private final", "type": "double", "declarator": "totalDuration", "var_name": "totalDuration"}, {"original_string": "private final double totalDistance;", "modifier": "private final", "type": "double", "declarator": "totalDistance", "var_name": "totalDistance"}], "methods": [{"identifier": "Traversal", "parameters": "(ImmutableList<TraversalSection> sections)", "modifiers": "public", "return": "", "signature": " Traversal(ImmutableList<TraversalSection> sections)", "full_signature": "public  Traversal(ImmutableList<TraversalSection> sections)", "class_method_signature": "Traversal.Traversal(ImmutableList<TraversalSection> sections)", "testcase": false, "constructor": true}, {"identifier": "getSections", "parameters": "()", "modifiers": "public", "return": "ImmutableList<TraversalSection>", "signature": "ImmutableList<TraversalSection> getSections()", "full_signature": "public ImmutableList<TraversalSection> getSections()", "class_method_signature": "Traversal.getSections()", "testcase": false, "constructor": false}, {"identifier": "getTotalDuration", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTotalDuration()", "full_signature": "public double getTotalDuration()", "class_method_signature": "Traversal.getTotalDuration()", "testcase": false, "constructor": false}, {"identifier": "getTotalDistance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTotalDistance()", "full_signature": "public double getTotalDistance()", "class_method_signature": "Traversal.getTotalDistance()", "testcase": false, "constructor": false}, {"identifier": "getDistanceAtTime", "parameters": "(double time)", "modifiers": "public", "return": "double", "signature": "double getDistanceAtTime(double time)", "full_signature": "public double getDistanceAtTime(double time)", "class_method_signature": "Traversal.getDistanceAtTime(double time)", "testcase": false, "constructor": false}, {"identifier": "getTimeAtDistance", "parameters": "(double distance)", "modifiers": "public", "return": "double", "signature": "double getTimeAtDistance(double distance)", "full_signature": "public double getTimeAtDistance(double distance)", "class_method_signature": "Traversal.getTimeAtDistance(double distance)", "testcase": false, "constructor": false}, {"identifier": "getSpeedAtTime", "parameters": "(double time)", "modifiers": "public", "return": "double", "signature": "double getSpeedAtTime(double time)", "full_signature": "public double getSpeedAtTime(double time)", "class_method_signature": "Traversal.getSpeedAtTime(double time)", "testcase": false, "constructor": false}, {"identifier": "getSpeedAtDistance", "parameters": "(double distance)", "modifiers": "public", "return": "double", "signature": "double getSpeedAtDistance(double distance)", "full_signature": "public double getSpeedAtDistance(double distance)", "class_method_signature": "Traversal.getSpeedAtDistance(double distance)", "testcase": false, "constructor": false}, {"identifier": "getAccelerationAtTime", "parameters": "(double time)", "modifiers": "public", "return": "double", "signature": "double getAccelerationAtTime(double time)", "full_signature": "public double getAccelerationAtTime(double time)", "class_method_signature": "Traversal.getAccelerationAtTime(double time)", "testcase": false, "constructor": false}, {"identifier": "getAccelerationAtDistance", "parameters": "(double distance)", "modifiers": "public", "return": "double", "signature": "double getAccelerationAtDistance(double distance)", "full_signature": "public double getAccelerationAtDistance(double distance)", "class_method_signature": "Traversal.getAccelerationAtDistance(double distance)", "testcase": false, "constructor": false}, {"identifier": "getDurationAccelerating", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDurationAccelerating()", "full_signature": "public double getDurationAccelerating()", "class_method_signature": "Traversal.getDurationAccelerating()", "testcase": false, "constructor": false}, {"identifier": "getDurationAtConstantSpeed", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDurationAtConstantSpeed()", "full_signature": "public double getDurationAtConstantSpeed()", "class_method_signature": "Traversal.getDurationAtConstantSpeed()", "testcase": false, "constructor": false}, {"identifier": "getDurationDecelerating", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDurationDecelerating()", "full_signature": "public double getDurationDecelerating()", "class_method_signature": "Traversal.getDurationDecelerating()", "testcase": false, "constructor": false}, {"identifier": "getDurationAt", "parameters": "(Predicate<TraversalSection> condition)", "modifiers": "private", "return": "double", "signature": "double getDurationAt(Predicate<TraversalSection> condition)", "full_signature": "private double getDurationAt(Predicate<TraversalSection> condition)", "class_method_signature": "Traversal.getDurationAt(Predicate<TraversalSection> condition)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/physics/Traversal.java"}, "focal_method": {"identifier": "getSpeedAtTime", "parameters": "(double time)", "modifiers": "public", "return": "double", "body": "public double getSpeedAtTime(double time) {\n        if (DoubleMath.fuzzyEquals(time, totalDuration, totalDuration * ROUNDING_ERROR_FRACTION)) {\n            TraversalSection lastSection = Iterables.getLast(sections);\n            return lastSection.getSpeedAtTime(lastSection.getDuration());\n        }\n        if (time > totalDuration) {\n            return 0;\n        }\n\n        if (time < 0) {\n            throw new TraversalCalculationException(\"Negative time provided\");\n        }\n\n        return SegmentGraphUtilities.getValueAt(\n                sections,\n                TraversalSection::getDuration,\n                TraversalSection::getSpeedAtTime,\n                time);\n    }", "signature": "double getSpeedAtTime(double time)", "full_signature": "public double getSpeedAtTime(double time)", "class_method_signature": "Traversal.getSpeedAtTime(double time)", "testcase": false, "constructor": false, "invocations": ["fuzzyEquals", "getLast", "getSpeedAtTime", "getDuration", "getValueAt"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}