{"test_class": {"identifier": "EmrDaoImplTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Map<String, Map<EmrClusterCacheKey, String>> emrClusterCacheMap;", "modifier": "@Mock\n    private", "type": "Map<String, Map<EmrClusterCacheKey, String>>", "declarator": "emrClusterCacheMap", "var_name": "emrClusterCacheMap"}, {"original_string": "@Mock\n    private Map<String, EmrClusterCacheTimestamps> emrClusterCacheTimestampsMap;", "modifier": "@Mock\n    private", "type": "Map<String, EmrClusterCacheTimestamps>", "declarator": "emrClusterCacheTimestampsMap", "var_name": "emrClusterCacheTimestampsMap"}, {"original_string": "@Mock\n    private AwsClientFactory awsClientFactory;", "modifier": "@Mock\n    private", "type": "AwsClientFactory", "declarator": "awsClientFactory", "var_name": "awsClientFactory"}, {"original_string": "@Mock\n    private ConfigurationHelper configurationHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Mock\n    private Ec2Dao ec2Dao;", "modifier": "@Mock\n    private", "type": "Ec2Dao", "declarator": "ec2Dao", "var_name": "ec2Dao"}, {"original_string": "@InjectMocks\n    private EmrDaoImpl emrDaoImpl;", "modifier": "@InjectMocks\n    private", "type": "EmrDaoImpl", "declarator": "emrDaoImpl", "var_name": "emrDaoImpl"}, {"original_string": "@Mock\n    private EmrHelper emrHelper;", "modifier": "@Mock\n    private", "type": "EmrHelper", "declarator": "emrHelper", "var_name": "emrHelper"}, {"original_string": "@Mock\n    private EmrOperations emrOperations;", "modifier": "@Mock\n    private", "type": "EmrOperations", "declarator": "emrOperations", "var_name": "emrOperations"}, {"original_string": "@Mock\n    private HerdStringHelper herdStringHelper;", "modifier": "@Mock\n    private", "type": "HerdStringHelper", "declarator": "herdStringHelper", "var_name": "herdStringHelper"}, {"original_string": "@Mock\n    private JsonHelper jsonHelper;", "modifier": "@Mock\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Captor\n    private ArgumentCaptor<AmazonElasticMapReduceClient> amazonElasticMapReduceClientArgumentCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<AmazonElasticMapReduceClient>", "declarator": "amazonElasticMapReduceClientArgumentCaptor", "var_name": "amazonElasticMapReduceClientArgumentCaptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<RunJobFlowRequest> runJobFlowRequestArgumentCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<RunJobFlowRequest>", "declarator": "runJobFlowRequestArgumentCaptor", "var_name": "runJobFlowRequestArgumentCaptor"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/impl/EmrDaoImplTest.java"}, "test_case": {"identifier": "testGetActiveEmrClusterByNameWhenClusterNameIsBlank", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetActiveEmrClusterByNameWhenClusterNameIsBlank()\n    {\n        // Create an AWS parameters DTO.\n        AwsParamsDto awsParamsDto =\n            new AwsParamsDto(AWS_ASSUMED_ROLE_ACCESS_KEY, AWS_ASSUMED_ROLE_SECRET_KEY, AWS_ASSUMED_ROLE_SESSION_TOKEN, HTTP_PROXY_HOST, HTTP_PROXY_PORT,\n                AWS_REGION_NAME_US_EAST_1);\n\n        // Call the method under test.\n        ClusterSummary result = emrDaoImpl.getActiveEmrClusterByNameAndAccountId(BLANK_TEXT, null, awsParamsDto);\n\n        // Verify the external calls.\n        verifyNoMoreInteractionsHelper();\n\n        // Validate the results.\n        assertNull(result);\n    }", "signature": "void testGetActiveEmrClusterByNameWhenClusterNameIsBlank()", "full_signature": "@Test public void testGetActiveEmrClusterByNameWhenClusterNameIsBlank()", "class_method_signature": "EmrDaoImplTest.testGetActiveEmrClusterByNameWhenClusterNameIsBlank()", "testcase": true, "constructor": false, "invocations": ["getActiveEmrClusterByNameAndAccountId", "verifyNoMoreInteractionsHelper", "assertNull"]}, "focal_class": {"identifier": "EmrDaoImpl", "superclass": "", "interfaces": "implements EmrDao", "fields": [{"original_string": "private static final int DELTA_UPDATE_BUFFER_IN_MINUTES = 1;", "modifier": "private static final", "type": "int", "declarator": "DELTA_UPDATE_BUFFER_IN_MINUTES = 1", "var_name": "DELTA_UPDATE_BUFFER_IN_MINUTES"}, {"original_string": "private static final int FULL_RELOAD_CACHE_TIME_PERIOD_IN_MINUTES = 10;", "modifier": "private static final", "type": "int", "declarator": "FULL_RELOAD_CACHE_TIME_PERIOD_IN_MINUTES = 10", "var_name": "FULL_RELOAD_CACHE_TIME_PERIOD_IN_MINUTES"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(EmrDaoImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(EmrDaoImpl.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private AwsClientFactory awsClientFactory;", "modifier": "@Autowired\n    private", "type": "AwsClientFactory", "declarator": "awsClientFactory", "var_name": "awsClientFactory"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private Ec2Dao ec2Dao;", "modifier": "@Autowired\n    private", "type": "Ec2Dao", "declarator": "ec2Dao", "var_name": "ec2Dao"}, {"original_string": "@Autowired\n    private Map<String, Map<EmrClusterCacheKey, String>> emrClusterCacheMap;", "modifier": "@Autowired\n    private", "type": "Map<String, Map<EmrClusterCacheKey, String>>", "declarator": "emrClusterCacheMap", "var_name": "emrClusterCacheMap"}, {"original_string": "@Autowired\n    private Map<String, EmrClusterCacheTimestamps> emrClusterCacheTimestampsMap;", "modifier": "@Autowired\n    private", "type": "Map<String, EmrClusterCacheTimestamps>", "declarator": "emrClusterCacheTimestampsMap", "var_name": "emrClusterCacheTimestampsMap"}, {"original_string": "@Autowired\n    private EmrHelper emrHelper;", "modifier": "@Autowired\n    private", "type": "EmrHelper", "declarator": "emrHelper", "var_name": "emrHelper"}, {"original_string": "@Autowired\n    private EmrOperations emrOperations;", "modifier": "@Autowired\n    private", "type": "EmrOperations", "declarator": "emrOperations", "var_name": "emrOperations"}, {"original_string": "@Autowired\n    private HerdStringHelper herdStringHelper;", "modifier": "@Autowired\n    private", "type": "HerdStringHelper", "declarator": "herdStringHelper", "var_name": "herdStringHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}], "methods": [{"identifier": "addEmrStep", "parameters": "(String clusterId, StepConfig emrStepConfig, AwsParamsDto awsParamsDto)", "modifiers": "@Override public", "return": "String", "signature": "String addEmrStep(String clusterId, StepConfig emrStepConfig, AwsParamsDto awsParamsDto)", "full_signature": "@Override public String addEmrStep(String clusterId, StepConfig emrStepConfig, AwsParamsDto awsParamsDto)", "class_method_signature": "EmrDaoImpl.addEmrStep(String clusterId, StepConfig emrStepConfig, AwsParamsDto awsParamsDto)", "testcase": false, "constructor": false}, {"identifier": "createEmrCluster", "parameters": "(String clusterName, EmrClusterDefinition emrClusterDefinition, EmrParamsDto emrParamsDto)", "modifiers": "@Override public", "return": "String", "signature": "String createEmrCluster(String clusterName, EmrClusterDefinition emrClusterDefinition, EmrParamsDto emrParamsDto)", "full_signature": "@Override public String createEmrCluster(String clusterName, EmrClusterDefinition emrClusterDefinition, EmrParamsDto emrParamsDto)", "class_method_signature": "EmrDaoImpl.createEmrCluster(String clusterName, EmrClusterDefinition emrClusterDefinition, EmrParamsDto emrParamsDto)", "testcase": false, "constructor": false}, {"identifier": "getActiveEmrClusterByNameAndAccountId", "parameters": "(String clusterName, String accountId, AwsParamsDto awsParams)", "modifiers": "@Override public synchronized", "return": "ClusterSummary", "signature": "ClusterSummary getActiveEmrClusterByNameAndAccountId(String clusterName, String accountId, AwsParamsDto awsParams)", "full_signature": "@Override public synchronized ClusterSummary getActiveEmrClusterByNameAndAccountId(String clusterName, String accountId, AwsParamsDto awsParams)", "class_method_signature": "EmrDaoImpl.getActiveEmrClusterByNameAndAccountId(String clusterName, String accountId, AwsParamsDto awsParams)", "testcase": false, "constructor": false}, {"identifier": "getApplications", "parameters": "(List<EmrClusterDefinitionApplication> emrClusterDefinitionApplications)", "modifiers": "public", "return": "List<Application>", "signature": "List<Application> getApplications(List<EmrClusterDefinitionApplication> emrClusterDefinitionApplications)", "full_signature": "public List<Application> getApplications(List<EmrClusterDefinitionApplication> emrClusterDefinitionApplications)", "class_method_signature": "EmrDaoImpl.getApplications(List<EmrClusterDefinitionApplication> emrClusterDefinitionApplications)", "testcase": false, "constructor": false}, {"identifier": "getClusterActiveStep", "parameters": "(String clusterId, AwsParamsDto awsParamsDto)", "modifiers": "@Override public", "return": "StepSummary", "signature": "StepSummary getClusterActiveStep(String clusterId, AwsParamsDto awsParamsDto)", "full_signature": "@Override public StepSummary getClusterActiveStep(String clusterId, AwsParamsDto awsParamsDto)", "class_method_signature": "EmrDaoImpl.getClusterActiveStep(String clusterId, AwsParamsDto awsParamsDto)", "testcase": false, "constructor": false}, {"identifier": "getClusterStep", "parameters": "(String clusterId, String stepId, AwsParamsDto awsParamsDto)", "modifiers": "@Override public", "return": "Step", "signature": "Step getClusterStep(String clusterId, String stepId, AwsParamsDto awsParamsDto)", "full_signature": "@Override public Step getClusterStep(String clusterId, String stepId, AwsParamsDto awsParamsDto)", "class_method_signature": "EmrDaoImpl.getClusterStep(String clusterId, String stepId, AwsParamsDto awsParamsDto)", "testcase": false, "constructor": false}, {"identifier": "getEmrClient", "parameters": "(AwsParamsDto awsParamsDto)", "modifiers": "@Override public", "return": "AmazonElasticMapReduceClient", "signature": "AmazonElasticMapReduceClient getEmrClient(AwsParamsDto awsParamsDto)", "full_signature": "@Override public AmazonElasticMapReduceClient getEmrClient(AwsParamsDto awsParamsDto)", "class_method_signature": "EmrDaoImpl.getEmrClient(AwsParamsDto awsParamsDto)", "testcase": false, "constructor": false}, {"identifier": "getEmrClusterById", "parameters": "(String clusterId, AwsParamsDto awsParams)", "modifiers": "@Override public", "return": "Cluster", "signature": "Cluster getEmrClusterById(String clusterId, AwsParamsDto awsParams)", "full_signature": "@Override public Cluster getEmrClusterById(String clusterId, AwsParamsDto awsParams)", "class_method_signature": "EmrDaoImpl.getEmrClusterById(String clusterId, AwsParamsDto awsParams)", "testcase": false, "constructor": false}, {"identifier": "getEmrClusterStatusById", "parameters": "(String clusterId, AwsParamsDto awsParams)", "modifiers": "@Override public", "return": "String", "signature": "String getEmrClusterStatusById(String clusterId, AwsParamsDto awsParams)", "full_signature": "@Override public String getEmrClusterStatusById(String clusterId, AwsParamsDto awsParams)", "class_method_signature": "EmrDaoImpl.getEmrClusterStatusById(String clusterId, AwsParamsDto awsParams)", "testcase": false, "constructor": false}, {"identifier": "getEmrMasterInstance", "parameters": "(String clusterId, AwsParamsDto awsParams)", "modifiers": "@Override public", "return": "Instance", "signature": "Instance getEmrMasterInstance(String clusterId, AwsParamsDto awsParams)", "full_signature": "@Override public Instance getEmrMasterInstance(String clusterId, AwsParamsDto awsParams)", "class_method_signature": "EmrDaoImpl.getEmrMasterInstance(String clusterId, AwsParamsDto awsParams)", "testcase": false, "constructor": false}, {"identifier": "getListInstanceFleetsResult", "parameters": "(String clusterId, AwsParamsDto awsParams)", "modifiers": "@Override public", "return": "ListInstanceFleetsResult", "signature": "ListInstanceFleetsResult getListInstanceFleetsResult(String clusterId, AwsParamsDto awsParams)", "full_signature": "@Override public ListInstanceFleetsResult getListInstanceFleetsResult(String clusterId, AwsParamsDto awsParams)", "class_method_signature": "EmrDaoImpl.getListInstanceFleetsResult(String clusterId, AwsParamsDto awsParams)", "testcase": false, "constructor": false}, {"identifier": "terminateEmrCluster", "parameters": "(String clusterId, boolean overrideTerminationProtection, AwsParamsDto awsParams)", "modifiers": "@Override public", "return": "void", "signature": "void terminateEmrCluster(String clusterId, boolean overrideTerminationProtection, AwsParamsDto awsParams)", "full_signature": "@Override public void terminateEmrCluster(String clusterId, boolean overrideTerminationProtection, AwsParamsDto awsParams)", "class_method_signature": "EmrDaoImpl.terminateEmrCluster(String clusterId, boolean overrideTerminationProtection, AwsParamsDto awsParams)", "testcase": false, "constructor": false}, {"identifier": "getConfigurations", "parameters": "(List<EmrClusterDefinitionConfiguration> emrClusterDefinitionConfigurations)", "modifiers": "protected", "return": "List<Configuration>", "signature": "List<Configuration> getConfigurations(List<EmrClusterDefinitionConfiguration> emrClusterDefinitionConfigurations)", "full_signature": "protected List<Configuration> getConfigurations(List<EmrClusterDefinitionConfiguration> emrClusterDefinitionConfigurations)", "class_method_signature": "EmrDaoImpl.getConfigurations(List<EmrClusterDefinitionConfiguration> emrClusterDefinitionConfigurations)", "testcase": false, "constructor": false}, {"identifier": "getEbsBlockDeviceConfigs", "parameters": "(List<EmrClusterDefinitionEbsBlockDeviceConfig> emrClusterDefinitionEbsBlockDeviceConfigs)", "modifiers": "protected", "return": "List<EbsBlockDeviceConfig>", "signature": "List<EbsBlockDeviceConfig> getEbsBlockDeviceConfigs(List<EmrClusterDefinitionEbsBlockDeviceConfig> emrClusterDefinitionEbsBlockDeviceConfigs)", "full_signature": "protected List<EbsBlockDeviceConfig> getEbsBlockDeviceConfigs(List<EmrClusterDefinitionEbsBlockDeviceConfig> emrClusterDefinitionEbsBlockDeviceConfigs)", "class_method_signature": "EmrDaoImpl.getEbsBlockDeviceConfigs(List<EmrClusterDefinitionEbsBlockDeviceConfig> emrClusterDefinitionEbsBlockDeviceConfigs)", "testcase": false, "constructor": false}, {"identifier": "getEbsConfiguration", "parameters": "(EmrClusterDefinitionEbsConfiguration emrClusterDefinitionEbsConfiguration)", "modifiers": "protected", "return": "EbsConfiguration", "signature": "EbsConfiguration getEbsConfiguration(EmrClusterDefinitionEbsConfiguration emrClusterDefinitionEbsConfiguration)", "full_signature": "protected EbsConfiguration getEbsConfiguration(EmrClusterDefinitionEbsConfiguration emrClusterDefinitionEbsConfiguration)", "class_method_signature": "EmrDaoImpl.getEbsConfiguration(EmrClusterDefinitionEbsConfiguration emrClusterDefinitionEbsConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getEmrClusterCacheByAccountId", "parameters": "(String accountId)", "modifiers": "protected", "return": "Map<EmrClusterCacheKey, String>", "signature": "Map<EmrClusterCacheKey, String> getEmrClusterCacheByAccountId(String accountId)", "full_signature": "protected Map<EmrClusterCacheKey, String> getEmrClusterCacheByAccountId(String accountId)", "class_method_signature": "EmrDaoImpl.getEmrClusterCacheByAccountId(String accountId)", "testcase": false, "constructor": false}, {"identifier": "getEmrClusterCacheTimestampsByAccountId", "parameters": "(String accountId)", "modifiers": "protected", "return": "EmrClusterCacheTimestamps", "signature": "EmrClusterCacheTimestamps getEmrClusterCacheTimestampsByAccountId(String accountId)", "full_signature": "protected EmrClusterCacheTimestamps getEmrClusterCacheTimestampsByAccountId(String accountId)", "class_method_signature": "EmrDaoImpl.getEmrClusterCacheTimestampsByAccountId(String accountId)", "testcase": false, "constructor": false}, {"identifier": "getInstanceFleets", "parameters": "(List<EmrClusterDefinitionInstanceFleet> emrClusterDefinitionInstanceFleets)", "modifiers": "protected", "return": "List<InstanceFleetConfig>", "signature": "List<InstanceFleetConfig> getInstanceFleets(List<EmrClusterDefinitionInstanceFleet> emrClusterDefinitionInstanceFleets)", "full_signature": "protected List<InstanceFleetConfig> getInstanceFleets(List<EmrClusterDefinitionInstanceFleet> emrClusterDefinitionInstanceFleets)", "class_method_signature": "EmrDaoImpl.getInstanceFleets(List<EmrClusterDefinitionInstanceFleet> emrClusterDefinitionInstanceFleets)", "testcase": false, "constructor": false}, {"identifier": "getInstanceGroupConfig", "parameters": "(InstanceRoleType roleType, String instanceType, Integer instanceCount, BigDecimal bidPrice,\n        EmrClusterDefinitionEbsConfiguration emrClusterDefinitionEbsConfiguration)", "modifiers": "protected", "return": "InstanceGroupConfig", "signature": "InstanceGroupConfig getInstanceGroupConfig(InstanceRoleType roleType, String instanceType, Integer instanceCount, BigDecimal bidPrice,\n        EmrClusterDefinitionEbsConfiguration emrClusterDefinitionEbsConfiguration)", "full_signature": "protected InstanceGroupConfig getInstanceGroupConfig(InstanceRoleType roleType, String instanceType, Integer instanceCount, BigDecimal bidPrice,\n        EmrClusterDefinitionEbsConfiguration emrClusterDefinitionEbsConfiguration)", "class_method_signature": "EmrDaoImpl.getInstanceGroupConfig(InstanceRoleType roleType, String instanceType, Integer instanceCount, BigDecimal bidPrice,\n        EmrClusterDefinitionEbsConfiguration emrClusterDefinitionEbsConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getInstanceGroupConfigs", "parameters": "(InstanceDefinitions instanceDefinitions)", "modifiers": "protected", "return": "List<InstanceGroupConfig>", "signature": "List<InstanceGroupConfig> getInstanceGroupConfigs(InstanceDefinitions instanceDefinitions)", "full_signature": "protected List<InstanceGroupConfig> getInstanceGroupConfigs(InstanceDefinitions instanceDefinitions)", "class_method_signature": "EmrDaoImpl.getInstanceGroupConfigs(InstanceDefinitions instanceDefinitions)", "testcase": false, "constructor": false}, {"identifier": "getInstanceTypeConfigs", "parameters": "(List<EmrClusterDefinitionInstanceTypeConfig> emrClusterDefinitionInstanceTypeConfigs)", "modifiers": "protected", "return": "List<InstanceTypeConfig>", "signature": "List<InstanceTypeConfig> getInstanceTypeConfigs(List<EmrClusterDefinitionInstanceTypeConfig> emrClusterDefinitionInstanceTypeConfigs)", "full_signature": "protected List<InstanceTypeConfig> getInstanceTypeConfigs(List<EmrClusterDefinitionInstanceTypeConfig> emrClusterDefinitionInstanceTypeConfigs)", "class_method_signature": "EmrDaoImpl.getInstanceTypeConfigs(List<EmrClusterDefinitionInstanceTypeConfig> emrClusterDefinitionInstanceTypeConfigs)", "testcase": false, "constructor": false}, {"identifier": "getKerberosAttributes", "parameters": "(EmrClusterDefinitionKerberosAttributes emrClusterDefinitionKerberosAttributes)", "modifiers": "protected", "return": "KerberosAttributes", "signature": "KerberosAttributes getKerberosAttributes(EmrClusterDefinitionKerberosAttributes emrClusterDefinitionKerberosAttributes)", "full_signature": "protected KerberosAttributes getKerberosAttributes(EmrClusterDefinitionKerberosAttributes emrClusterDefinitionKerberosAttributes)", "class_method_signature": "EmrDaoImpl.getKerberosAttributes(EmrClusterDefinitionKerberosAttributes emrClusterDefinitionKerberosAttributes)", "testcase": false, "constructor": false}, {"identifier": "getLaunchSpecifications", "parameters": "(EmrClusterDefinitionLaunchSpecifications emrClusterDefinitionLaunchSpecifications)", "modifiers": "protected", "return": "InstanceFleetProvisioningSpecifications", "signature": "InstanceFleetProvisioningSpecifications getLaunchSpecifications(EmrClusterDefinitionLaunchSpecifications emrClusterDefinitionLaunchSpecifications)", "full_signature": "protected InstanceFleetProvisioningSpecifications getLaunchSpecifications(EmrClusterDefinitionLaunchSpecifications emrClusterDefinitionLaunchSpecifications)", "class_method_signature": "EmrDaoImpl.getLaunchSpecifications(EmrClusterDefinitionLaunchSpecifications emrClusterDefinitionLaunchSpecifications)", "testcase": false, "constructor": false}, {"identifier": "getMap", "parameters": "(List<Parameter> parameters)", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> getMap(List<Parameter> parameters)", "full_signature": "protected Map<String, String> getMap(List<Parameter> parameters)", "class_method_signature": "EmrDaoImpl.getMap(List<Parameter> parameters)", "testcase": false, "constructor": false}, {"identifier": "getOnDemandSpecification", "parameters": "(EmrClusterDefinitionOnDemandSpecification emrClusterDefinitionOnDemandSpecification)", "modifiers": "protected", "return": "OnDemandProvisioningSpecification", "signature": "OnDemandProvisioningSpecification getOnDemandSpecification(EmrClusterDefinitionOnDemandSpecification emrClusterDefinitionOnDemandSpecification)", "full_signature": "protected OnDemandProvisioningSpecification getOnDemandSpecification(EmrClusterDefinitionOnDemandSpecification emrClusterDefinitionOnDemandSpecification)", "class_method_signature": "EmrDaoImpl.getOnDemandSpecification(EmrClusterDefinitionOnDemandSpecification emrClusterDefinitionOnDemandSpecification)", "testcase": false, "constructor": false}, {"identifier": "getSpotSpecification", "parameters": "(EmrClusterDefinitionSpotSpecification emrClusterDefinitionSpotSpecification)", "modifiers": "protected", "return": "SpotProvisioningSpecification", "signature": "SpotProvisioningSpecification getSpotSpecification(EmrClusterDefinitionSpotSpecification emrClusterDefinitionSpotSpecification)", "full_signature": "protected SpotProvisioningSpecification getSpotSpecification(EmrClusterDefinitionSpotSpecification emrClusterDefinitionSpotSpecification)", "class_method_signature": "EmrDaoImpl.getSpotSpecification(EmrClusterDefinitionSpotSpecification emrClusterDefinitionSpotSpecification)", "testcase": false, "constructor": false}, {"identifier": "getVolumeSpecification", "parameters": "(EmrClusterDefinitionVolumeSpecification emrClusterDefinitionVolumeSpecification)", "modifiers": "protected", "return": "VolumeSpecification", "signature": "VolumeSpecification getVolumeSpecification(EmrClusterDefinitionVolumeSpecification emrClusterDefinitionVolumeSpecification)", "full_signature": "protected VolumeSpecification getVolumeSpecification(EmrClusterDefinitionVolumeSpecification emrClusterDefinitionVolumeSpecification)", "class_method_signature": "EmrDaoImpl.getVolumeSpecification(EmrClusterDefinitionVolumeSpecification emrClusterDefinitionVolumeSpecification)", "testcase": false, "constructor": false}, {"identifier": "addCustomBootstrapActionConfig", "parameters": "(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "modifiers": "private", "return": "void", "signature": "void addCustomBootstrapActionConfig(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "full_signature": "private void addCustomBootstrapActionConfig(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "class_method_signature": "EmrDaoImpl.addCustomBootstrapActionConfig(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "testcase": false, "constructor": false}, {"identifier": "addCustomMasterBootstrapActionConfig", "parameters": "(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "modifiers": "private", "return": "void", "signature": "void addCustomMasterBootstrapActionConfig(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "full_signature": "private void addCustomMasterBootstrapActionConfig(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "class_method_signature": "EmrDaoImpl.addCustomMasterBootstrapActionConfig(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "testcase": false, "constructor": false}, {"identifier": "addDaemonBootstrapActionConfig", "parameters": "(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "modifiers": "private", "return": "void", "signature": "void addDaemonBootstrapActionConfig(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "full_signature": "private void addDaemonBootstrapActionConfig(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "class_method_signature": "EmrDaoImpl.addDaemonBootstrapActionConfig(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "testcase": false, "constructor": false}, {"identifier": "addHadoopBootstrapActionConfig", "parameters": "(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "modifiers": "private", "return": "void", "signature": "void addHadoopBootstrapActionConfig(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "full_signature": "private void addHadoopBootstrapActionConfig(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "class_method_signature": "EmrDaoImpl.addHadoopBootstrapActionConfig(EmrClusterDefinition emrClusterDefinition, ArrayList<BootstrapActionConfig> bootstrapActions)", "testcase": false, "constructor": false}, {"identifier": "getActiveEmrClusterStates", "parameters": "()", "modifiers": "private", "return": "String[]", "signature": "String[] getActiveEmrClusterStates()", "full_signature": "private String[] getActiveEmrClusterStates()", "class_method_signature": "EmrDaoImpl.getActiveEmrClusterStates()", "testcase": false, "constructor": false}, {"identifier": "getBootstrapActionConfig", "parameters": "(String scriptDescription, String bootstrapScript)", "modifiers": "private", "return": "BootstrapActionConfig", "signature": "BootstrapActionConfig getBootstrapActionConfig(String scriptDescription, String bootstrapScript)", "full_signature": "private BootstrapActionConfig getBootstrapActionConfig(String scriptDescription, String bootstrapScript)", "class_method_signature": "EmrDaoImpl.getBootstrapActionConfig(String scriptDescription, String bootstrapScript)", "testcase": false, "constructor": false}, {"identifier": "getBootstrapActionConfigList", "parameters": "(EmrClusterDefinition emrClusterDefinition, String trustingAccountStagingBucketName)", "modifiers": "private", "return": "ArrayList<BootstrapActionConfig>", "signature": "ArrayList<BootstrapActionConfig> getBootstrapActionConfigList(EmrClusterDefinition emrClusterDefinition, String trustingAccountStagingBucketName)", "full_signature": "private ArrayList<BootstrapActionConfig> getBootstrapActionConfigList(EmrClusterDefinition emrClusterDefinition, String trustingAccountStagingBucketName)", "class_method_signature": "EmrDaoImpl.getBootstrapActionConfigList(EmrClusterDefinition emrClusterDefinition, String trustingAccountStagingBucketName)", "testcase": false, "constructor": false}, {"identifier": "getBootstrapScriptLocation", "parameters": "(String bootstrapConfigurationValue, String trustingAccountStagingBucketName)", "modifiers": "private", "return": "String", "signature": "String getBootstrapScriptLocation(String bootstrapConfigurationValue, String trustingAccountStagingBucketName)", "full_signature": "private String getBootstrapScriptLocation(String bootstrapConfigurationValue, String trustingAccountStagingBucketName)", "class_method_signature": "EmrDaoImpl.getBootstrapScriptLocation(String bootstrapConfigurationValue, String trustingAccountStagingBucketName)", "testcase": false, "constructor": false}, {"identifier": "getEmrTags", "parameters": "(EmrClusterDefinition emrClusterDefinition)", "modifiers": "private", "return": "List<Tag>", "signature": "List<Tag> getEmrTags(EmrClusterDefinition emrClusterDefinition)", "full_signature": "private List<Tag> getEmrTags(EmrClusterDefinition emrClusterDefinition)", "class_method_signature": "EmrDaoImpl.getEmrTags(EmrClusterDefinition emrClusterDefinition)", "testcase": false, "constructor": false}, {"identifier": "getJobFlowInstancesConfig", "parameters": "(EmrClusterDefinition emrClusterDefinition)", "modifiers": "private", "return": "JobFlowInstancesConfig", "signature": "JobFlowInstancesConfig getJobFlowInstancesConfig(EmrClusterDefinition emrClusterDefinition)", "full_signature": "private JobFlowInstancesConfig getJobFlowInstancesConfig(EmrClusterDefinition emrClusterDefinition)", "class_method_signature": "EmrDaoImpl.getJobFlowInstancesConfig(EmrClusterDefinition emrClusterDefinition)", "testcase": false, "constructor": false}, {"identifier": "getRunJobFlowRequest", "parameters": "(String clusterName, EmrClusterDefinition emrClusterDefinition, String trustingAccountStagingBucketName)", "modifiers": "private", "return": "RunJobFlowRequest", "signature": "RunJobFlowRequest getRunJobFlowRequest(String clusterName, EmrClusterDefinition emrClusterDefinition, String trustingAccountStagingBucketName)", "full_signature": "private RunJobFlowRequest getRunJobFlowRequest(String clusterName, EmrClusterDefinition emrClusterDefinition, String trustingAccountStagingBucketName)", "class_method_signature": "EmrDaoImpl.getRunJobFlowRequest(String clusterName, EmrClusterDefinition emrClusterDefinition, String trustingAccountStagingBucketName)", "testcase": false, "constructor": false}, {"identifier": "getStepConfig", "parameters": "(EmrClusterDefinition emrClusterDefinition)", "modifiers": "private", "return": "List<StepConfig>", "signature": "List<StepConfig> getStepConfig(EmrClusterDefinition emrClusterDefinition)", "full_signature": "private List<StepConfig> getStepConfig(EmrClusterDefinition emrClusterDefinition)", "class_method_signature": "EmrDaoImpl.getStepConfig(EmrClusterDefinition emrClusterDefinition)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/impl/EmrDaoImpl.java"}, "focal_method": {"identifier": "getActiveEmrClusterByNameAndAccountId", "parameters": "(String clusterName, String accountId, AwsParamsDto awsParams)", "modifiers": "@Override public synchronized", "return": "ClusterSummary", "body": "@Override\n    public synchronized ClusterSummary getActiveEmrClusterByNameAndAccountId(String clusterName, String accountId, AwsParamsDto awsParams)\n    {\n        LOGGER.info(\"Entering synchronized method.\");\n\n        // Initialize a cluster summary to null for the case that the cluster is not found in the list.\n        ClusterSummary clusterSummary = null;\n\n        // Get the cluster cache using the accountId.\n        Map<EmrClusterCacheKey, String> emrClusterCache = getEmrClusterCacheByAccountId(accountId);\n\n        LOGGER.debug(\"EMR cluster cache retrieved. emrClusterCache=\\\"{}\\\" emrClusterCacheContents=\\\"{}\\\"\", System.identityHashCode(emrClusterCache),\n            emrClusterCache.toString());\n\n        if (StringUtils.isNotBlank(clusterName))\n        {\n            // Build the EMR cluster cache key\n            EmrClusterCacheKey emrClusterCacheKey = new EmrClusterCacheKey(clusterName.toUpperCase(), accountId);\n\n            LOGGER.info(\"EMR cluster cache key. emrClusterCacheKey=\\\"{}\\\"\", emrClusterCacheKey.toString());\n\n            // First check to see if this cluster id is stored locally in the EMR Cluster Cache.\n            // If the EMR cluster cache does contain the cluster key use the id found in the EMR cluster cache.\n            // Else the EMR cluster cache does not contain the cluster key then move on to do a list cluster.\n            if (emrClusterCache.containsKey(emrClusterCacheKey))\n            {\n                // Get the cluster id value from the EMR cluster cache with the cluster name key.\n                String clusterId = emrClusterCache.get(emrClusterCacheKey);\n\n                // Retrieve the cluster status to validate the cluster.\n                Cluster cluster = getEmrClusterById(clusterId, awsParams);\n                ClusterStatus clusterStatus = cluster == null ? null : cluster.getStatus();\n                String status = clusterStatus == null ? null : clusterStatus.getState();\n                LOGGER.info(\"Found the EMR cluster name in the EMR cluster cache. emrClusterName=\\\"{}\\\" emrClusterId=\\\"{}\\\" emrClusterStatus=\\\"{}\\\"\",\n                    clusterName.toUpperCase(), clusterId, status);\n\n                // If the status is not null and the status is in one of the active EMR cluster states,\n                // then return the cluster summary with the cluster id from the EMR cluster cache.\n                // Else remove the cluster from the EMR cluster cache and then move on to do a list cluster.\n                if (status != null && Arrays.asList(getActiveEmrClusterStates()).contains(status))\n                {\n                    LOGGER.info(\"Exiting synchronized block.\");\n                    return new ClusterSummary().withId(clusterId).withName(clusterName).withStatus(clusterStatus);\n                }\n                else\n                {\n                    LOGGER.info(\"Removing cluster from EMR cluster cache. emrClusterName=\\\"{}\\\" emrClusterId=\\\"{}\\\" emrClusterStatus=\\\"{}\\\"\",\n                        clusterName.toUpperCase(), clusterId, status);\n\n                    // Remove the cluster from the cache.\n                    emrClusterCache.remove(emrClusterCacheKey);\n                }\n            }\n\n            LOGGER.info(\"The cluster name was not in the cluster cache. Make a list cluster request to find the cluster id. emrClusterName=\\\"{}\\\"\",\n                clusterName.toUpperCase());\n\n            // Get the EMR cluster cache timeout values.\n            EmrClusterCacheTimestamps emrClusterCacheTimestamps = getEmrClusterCacheTimestampsByAccountId(accountId);\n            LocalDateTime lastFullReload = emrClusterCacheTimestamps.getLastFullReload();\n            LocalDateTime lastDeltaUpdate = emrClusterCacheTimestamps.getLastDeltaUpdate();\n\n            // New cache timeout values.\n            LocalDateTime newLastFullReload;\n            LocalDateTime newLastDeltaUpdate;\n\n            // Default the created after date to null for the full update case.\n            Date createdAfter = null;\n\n            // If the last delta update is null, or the last full reload is null, or the if the difference between the current time and the lastFullReload is\n            // greater than FULL_RELOAD_CACHE_TIME_PERIOD_IN_MINUTES, then do a full reload.\n            if (lastDeltaUpdate == null || lastFullReload == null ||\n                Duration.between(lastFullReload, LocalDateTime.now(ZoneId.systemDefault())).toMinutes() > FULL_RELOAD_CACHE_TIME_PERIOD_IN_MINUTES)\n            {\n                // Set the new last full reload time to the current time.\n                newLastFullReload = LocalDateTime.now(ZoneId.systemDefault());\n\n                // Clear the EMR cluster cache\n                emrClusterCache.clear();\n\n                LOGGER.info(\"EMR cluster cache cleared. Starting a full reload of the EMR cluster cache. \" +\n                        \"newLastFullReload=\\\"{}\\\" lastFullReload=\\\"{}\\\" emrClusterCache=\\\"{}\\\"\", newLastFullReload, lastFullReload,\n                    System.identityHashCode(emrClusterCache));\n            }\n            else\n            {\n                // Set the created after date to the last delta update minus the delta update safety buffer time.\n                createdAfter = Date.from(lastDeltaUpdate.minusMinutes(DELTA_UPDATE_BUFFER_IN_MINUTES).atZone(ZoneId.systemDefault()).toInstant());\n\n                // Keep the last full reload the same.\n                newLastFullReload = lastFullReload;\n\n                LOGGER.info(\"Beginning a delta reload of the EMR cluster cache. lastFullReload=\\\"{}\\\" lastDeltaUpdate=\\\"{}\\\"\", lastFullReload, lastDeltaUpdate);\n            }\n\n            // Set the new last delta update to the current time.\n            newLastDeltaUpdate = LocalDateTime.now(ZoneId.systemDefault());\n\n            LOGGER\n                .info(\"The new last delta update is newLastDeltaUpdate=\\\"{}\\\" and the created after is createdAfter=\\\"{}\\\"\", newLastDeltaUpdate, createdAfter);\n\n            /**\n             * Call AWSOperations for ListClusters API. Need to list all the active clusters that are in\n             * BOOTSTRAPPING/RUNNING/STARTING/WAITING states\n             */\n            ListClustersRequest listClustersRequest = new ListClustersRequest().withClusterStates(getActiveEmrClusterStates());\n\n            /**\n             * ListClusterRequest returns only 50 clusters at a time. However, this returns a marker\n             * that can be used for subsequent calls to listClusters to get all the clusters\n             */\n            String markerForListClusters = listClustersRequest.getMarker();\n\n            // Loop through all the available clusters and look for the given cluster id\n            do\n            {\n                /**\n                 * Call AWSOperations for ListClusters API.\n                 * Need to include the Marker returned by the previous iteration\n                 */\n                ListClustersResult clusterResult = emrOperations\n                    .listEmrClusters(getEmrClient(awsParams), listClustersRequest.withMarker(markerForListClusters).withCreatedAfter(createdAfter));\n\n                // Loop through all the active clusters returned by AWS\n                for (ClusterSummary clusterInstance : clusterResult.getClusters())\n                {\n                    LOGGER\n                        .info(\"Adding EMR cluster to the EMR Cluster Cache. emrClusterName=\\\"{}\\\" emrClusterId=\\\"{}\\\"\", clusterInstance.getName().toUpperCase(),\n                            clusterInstance.getId());\n\n                    // Add this cluster instance to the EMR cluster cache.\n                    emrClusterCache.put(new EmrClusterCacheKey(clusterInstance.getName().toUpperCase(), accountId), clusterInstance.getId());\n\n                    // If the cluster name matches, then set the clusterSummary to the clusterInstance\n                    if (StringUtils.isNotBlank(clusterInstance.getName()) && clusterInstance.getName().equalsIgnoreCase(clusterName))\n                    {\n                        clusterSummary = clusterInstance;\n                    }\n                }\n                markerForListClusters = clusterResult.getMarker();\n            }\n            while (markerForListClusters != null);\n\n            // Update the cluster cache timestamps\n            emrClusterCacheTimestamps.setLastFullReload(newLastFullReload);\n            emrClusterCacheTimestamps.setLastDeltaUpdate(newLastDeltaUpdate);\n        }\n\n        LOGGER.info(\"Returning clusterSummary=\\\"{}\\\"\", clusterSummary == null ? null : clusterSummary.toString());\n\n        LOGGER.debug(\"State of cache after calling getActiveEmrClusterByNameAndAccountId. emrClusterCache=\\\"{}\\\" emrClusterCacheContents=\\\"{}\\\"\",\n            System.identityHashCode(emrClusterCache), emrClusterCache.toString());\n\n        LOGGER.info(\"Exiting synchronized method.\");\n\n        return clusterSummary;\n    }", "signature": "ClusterSummary getActiveEmrClusterByNameAndAccountId(String clusterName, String accountId, AwsParamsDto awsParams)", "full_signature": "@Override public synchronized ClusterSummary getActiveEmrClusterByNameAndAccountId(String clusterName, String accountId, AwsParamsDto awsParams)", "class_method_signature": "EmrDaoImpl.getActiveEmrClusterByNameAndAccountId(String clusterName, String accountId, AwsParamsDto awsParams)", "testcase": false, "constructor": false, "invocations": ["info", "getEmrClusterCacheByAccountId", "debug", "identityHashCode", "toString", "isNotBlank", "toUpperCase", "info", "toString", "containsKey", "get", "getEmrClusterById", "getStatus", "getState", "info", "toUpperCase", "contains", "asList", "getActiveEmrClusterStates", "info", "withStatus", "withName", "withId", "info", "toUpperCase", "remove", "info", "toUpperCase", "getEmrClusterCacheTimestampsByAccountId", "getLastFullReload", "getLastDeltaUpdate", "toMinutes", "between", "now", "systemDefault", "now", "systemDefault", "clear", "info", "identityHashCode", "from", "toInstant", "atZone", "minusMinutes", "systemDefault", "info", "now", "systemDefault", "info", "withClusterStates", "getActiveEmrClusterStates", "getMarker", "listEmrClusters", "getEmrClient", "withCreatedAfter", "withMarker", "getClusters", "info", "toUpperCase", "getName", "getId", "put", "toUpperCase", "getName", "getId", "isNotBlank", "getName", "equalsIgnoreCase", "getName", "getMarker", "setLastFullReload", "setLastDeltaUpdate", "info", "toString", "debug", "identityHashCode", "toString", "info"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}