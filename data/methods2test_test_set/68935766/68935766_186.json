{"test_class": {"identifier": "LoadParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String[] EMPTY = new String[0];", "modifier": "static final", "type": "String[]", "declarator": "EMPTY = new String[0]", "var_name": "EMPTY"}, {"original_string": "Environment<Class<?>> environment = StubEnvironment.of(Project.EMPTY);", "modifier": "", "type": "Environment<Class<?>>", "declarator": "environment = StubEnvironment.of(Project.EMPTY)", "var_name": "environment"}, {"original_string": "LoadParser<Class<?>> parser = new LoadParser<>(environment);", "modifier": "", "type": "LoadParser<Class<?>>", "declarator": "parser = new LoadParser<>(environment)", "var_name": "parser"}], "file": "scribe/core/src/test/java/com/karuslabs/scribe/core/parsers/LoadParserTest.java"}, "test_case": {"identifier": "parse_empty", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void parse_empty() {\n        parser.parse(Empty.class);\n        var mappings = environment.mappings;\n        \n        assertEquals(4, mappings.size());\n        assertEquals(\"POSTWORLD\", mappings.get(\"load\"));\n        assertArrayEquals(EMPTY, (String[]) mappings.get(\"loadbefore\"));\n        assertArrayEquals(EMPTY, (String[]) mappings.get(\"softdepend\"));\n        assertArrayEquals(EMPTY, (String[]) mappings.get(\"depend\"));\n    }", "signature": "void parse_empty()", "full_signature": "@Test void parse_empty()", "class_method_signature": "LoadParserTest.parse_empty()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "size", "assertEquals", "get", "assertArrayEquals", "get", "assertArrayEquals", "get", "assertArrayEquals", "get"]}, "focal_class": {"identifier": "LoadParser", "superclass": "extends SingleParser<T>", "interfaces": "", "fields": [{"original_string": "private Matcher matcher;", "modifier": "private", "type": "Matcher", "declarator": "matcher", "var_name": "matcher"}], "methods": [{"identifier": "LoadParser", "parameters": "(Environment<T> environment)", "modifiers": "public", "return": "", "signature": " LoadParser(Environment<T> environment)", "full_signature": "public  LoadParser(Environment<T> environment)", "class_method_signature": "LoadParser.LoadParser(Environment<T> environment)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(T type)", "modifiers": "@Override protected", "return": "void", "signature": "void parse(T type)", "full_signature": "@Override protected void parse(T type)", "class_method_signature": "LoadParser.parse(T type)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(T type, String[] names)", "modifiers": "protected", "return": "void", "signature": "void check(T type, String[] names)", "full_signature": "protected void check(T type, String[] names)", "class_method_signature": "LoadParser.check(T type, String[] names)", "testcase": false, "constructor": false}], "file": "scribe/core/src/main/java/com/karuslabs/scribe/core/parsers/LoadParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(T type)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void parse(T type) {\n        var load = environment.resolver.any(type, Load.class);\n        var mapping = environment.mappings;\n        \n        mapping.put(\"load\", load.during().toString());\n        \n        check(type, load.before());\n        mapping.put(\"loadbefore\", load.before());\n        \n        check(type, load.optionallyAfter());\n        mapping.put(\"softdepend\", load.optionallyAfter());\n        \n        check(type, load.after());\n        mapping.put(\"depend\", load.after());\n    }", "signature": "void parse(T type)", "full_signature": "@Override protected void parse(T type)", "class_method_signature": "LoadParser.parse(T type)", "testcase": false, "constructor": false, "invocations": ["any", "put", "toString", "during", "check", "before", "put", "before", "check", "optionallyAfter", "put", "optionallyAfter", "check", "after", "put", "after"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}