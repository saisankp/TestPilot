{"test_class": {"identifier": "FunctionTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "server/metrics/promql/src/test/java/com/alipay/sofa/lookout/server/prom/ql/func/FunctionTest.java"}, "test_case": {"identifier": "funcMinOverTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void funcMinOverTime() {\n        Function sumOverTime = Function.getFunction(\"min_over_time\");\n        List<Series> series = loadMockSeries(\"testdata/min_over_time.test\");\n        Evaluator evaluator = new Evaluator(series.get(0).getPoints().last().getT());\n        Expressions expressions = new Expressions();\n        MatrixSelector matrixSelector = new MatrixSelector(\"test_metric\", null,\n            Duration.ofSeconds(60));\n        matrixSelector.getSeriess().addAll(series);\n        expressions.add(matrixSelector);\n        Value value = sumOverTime.getCall().invoke(evaluator, expressions);\n        Assert.assertTrue(value instanceof Vector);\n        Vector vector = (Vector) value;\n        Assert.assertEquals(2, vector.getSamples().get(0).getV(), 0);\n\n        //test range=[90s]\n        series = loadMockSeries(\"testdata/min_over_time.test\");\n        MatrixSelector matrixSelector2 = new MatrixSelector(\"test_metric\", null,\n            Duration.ofSeconds(90));\n        matrixSelector2.getSeriess().addAll(series);\n        expressions.getExpressions().clear();\n        expressions.getExpressions().add(matrixSelector2);\n        value = sumOverTime.getCall().invoke(evaluator, expressions);\n        vector = (Vector) value;\n        Assert.assertEquals(1, vector.getSamples().get(0).getV(), 0);\n    }", "signature": "void funcMinOverTime()", "full_signature": "@Test public void funcMinOverTime()", "class_method_signature": "FunctionTest.funcMinOverTime()", "testcase": true, "constructor": false, "invocations": ["getFunction", "loadMockSeries", "getT", "last", "getPoints", "get", "ofSeconds", "addAll", "getSeriess", "add", "invoke", "getCall", "assertTrue", "assertEquals", "getV", "get", "getSamples", "loadMockSeries", "ofSeconds", "addAll", "getSeriess", "clear", "getExpressions", "add", "getExpressions", "invoke", "getCall", "assertEquals", "getV", "get", "getSamples"]}, "focal_class": {"identifier": "Function", "superclass": "", "interfaces": "", "fields": [{"original_string": "String name;", "modifier": "", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "ValueType[] argTypes;", "modifier": "", "type": "ValueType[]", "declarator": "argTypes", "var_name": "argTypes"}, {"original_string": "int variadic;", "modifier": "", "type": "int", "declarator": "variadic", "var_name": "variadic"}, {"original_string": "ValueType returnType;", "modifier": "", "type": "ValueType", "declarator": "returnType", "var_name": "returnType"}, {"original_string": "FuncCallFn call;", "modifier": "", "type": "FuncCallFn", "declarator": "call", "var_name": "call"}, {"original_string": "static Map<String, Function> functions = new HashMap<String, Function>() {{\n        put(\"count_over_time\",\n                new Function(\"count_over_time\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcCountOverTime));\n        put(\"avg_over_time\",\n                new Function(\"avg_over_time\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcAvgOverTime));\n        put(\"sum_over_time\",\n                new Function(\"sum_over_time\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcSumOverTime));\n        put(\"sum2_over_time\",\n                new Function(\"sum2_over_time\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcSum2OverTime));\n        put(\"max_over_time\",\n                new Function(\"max_over_time\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcMaxOverTime));\n        put(\"min_over_time\",\n                new Function(\"min_over_time\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcMinOverTime));\n        put(\"delta\", new Function(\"delta\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcDelta));\n        put(\"idelta\", new Function(\"idelta\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcIdelta));\n        put(\"rate\", new Function(\"rate\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcRate));\n        put(\"increase\", new Function(\"increase\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcIncrease));\n        put(\"increase2\", new Function(\"increase2\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcIncrease2));\n        put(\"histogram_quantile\", new Function(\"histogram_quantile\", new ValueType[]{ValueType.scalar, ValueType.vector}, ValueType.vector,\n                Function::funcHistogramQuantile));\n\n        //\u642d\u914d sofa lookout sdk \u7528\u7684\u51fd\u6570\n        put(\"zhistogram_quantile\", new Function(\"zhistogram_quantile\", new ValueType[]{ValueType.scalar, ValueType.vector}, ValueType.vector,\n                Function::funcHistogramQuantileLK));\n    }};", "modifier": "static", "type": "Map<String, Function>", "declarator": "functions = new HashMap<String, Function>() {{\n        put(\"count_over_time\",\n                new Function(\"count_over_time\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcCountOverTime));\n        put(\"avg_over_time\",\n                new Function(\"avg_over_time\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcAvgOverTime));\n        put(\"sum_over_time\",\n                new Function(\"sum_over_time\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcSumOverTime));\n        put(\"sum2_over_time\",\n                new Function(\"sum2_over_time\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcSum2OverTime));\n        put(\"max_over_time\",\n                new Function(\"max_over_time\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcMaxOverTime));\n        put(\"min_over_time\",\n                new Function(\"min_over_time\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcMinOverTime));\n        put(\"delta\", new Function(\"delta\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcDelta));\n        put(\"idelta\", new Function(\"idelta\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcIdelta));\n        put(\"rate\", new Function(\"rate\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcRate));\n        put(\"increase\", new Function(\"increase\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcIncrease));\n        put(\"increase2\", new Function(\"increase2\", new ValueType[]{ValueType.matrix}, ValueType.vector, Function::funcIncrease2));\n        put(\"histogram_quantile\", new Function(\"histogram_quantile\", new ValueType[]{ValueType.scalar, ValueType.vector}, ValueType.vector,\n                Function::funcHistogramQuantile));\n\n        //\u642d\u914d sofa lookout sdk \u7528\u7684\u51fd\u6570\n        put(\"zhistogram_quantile\", new Function(\"zhistogram_quantile\", new ValueType[]{ValueType.scalar, ValueType.vector}, ValueType.vector,\n                Function::funcHistogramQuantileLK));\n    }}", "var_name": "functions"}], "methods": [{"identifier": "Function", "parameters": "(String name, ValueType[] argTypes, ValueType returnType, FuncCallFn call)", "modifiers": "public", "return": "", "signature": " Function(String name, ValueType[] argTypes, ValueType returnType, FuncCallFn call)", "full_signature": "public  Function(String name, ValueType[] argTypes, ValueType returnType, FuncCallFn call)", "class_method_signature": "Function.Function(String name, ValueType[] argTypes, ValueType returnType, FuncCallFn call)", "testcase": false, "constructor": true}, {"identifier": "getFunction", "parameters": "(String name)", "modifiers": "public static", "return": "Function", "signature": "Function getFunction(String name)", "full_signature": "public static Function getFunction(String name)", "class_method_signature": "Function.getFunction(String name)", "testcase": false, "constructor": false}, {"identifier": "getArgTypes", "parameters": "()", "modifiers": "public", "return": "ValueType[]", "signature": "ValueType[] getArgTypes()", "full_signature": "public ValueType[] getArgTypes()", "class_method_signature": "Function.getArgTypes()", "testcase": false, "constructor": false}, {"identifier": "getVariadic", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getVariadic()", "full_signature": "public int getVariadic()", "class_method_signature": "Function.getVariadic()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Function.getName()", "testcase": false, "constructor": false}, {"identifier": "getReturnType", "parameters": "()", "modifiers": "public", "return": "ValueType", "signature": "ValueType getReturnType()", "full_signature": "public ValueType getReturnType()", "class_method_signature": "Function.getReturnType()", "testcase": false, "constructor": false}, {"identifier": "getCall", "parameters": "()", "modifiers": "public", "return": "FuncCallFn", "signature": "FuncCallFn getCall()", "full_signature": "public FuncCallFn getCall()", "class_method_signature": "Function.getCall()", "testcase": false, "constructor": false}, {"identifier": "funcSum2OverTime", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "static", "return": "Value", "signature": "Value funcSum2OverTime(Evaluator ev, Expressions args)", "full_signature": "static Value funcSum2OverTime(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcSum2OverTime(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "funcSumOverTime", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "static", "return": "Value", "signature": "Value funcSumOverTime(Evaluator ev, Expressions args)", "full_signature": "static Value funcSumOverTime(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcSumOverTime(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "funcMaxOverTime", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "static", "return": "Value", "signature": "Value funcMaxOverTime(Evaluator ev, Expressions args)", "full_signature": "static Value funcMaxOverTime(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcMaxOverTime(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "funcMinOverTime", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "static", "return": "Value", "signature": "Value funcMinOverTime(Evaluator ev, Expressions args)", "full_signature": "static Value funcMinOverTime(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcMinOverTime(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "aggrOverTime", "parameters": "(Evaluator ev, Expressions args, AggrFn aggrFn)", "modifiers": "private static", "return": "Value", "signature": "Value aggrOverTime(Evaluator ev, Expressions args, AggrFn aggrFn)", "full_signature": "private static Value aggrOverTime(Evaluator ev, Expressions args, AggrFn aggrFn)", "class_method_signature": "Function.aggrOverTime(Evaluator ev, Expressions args, AggrFn aggrFn)", "testcase": false, "constructor": false}, {"identifier": "aggrOverTime", "parameters": "(Evaluator ev, Expressions args, AggrFn aggrFn, boolean metricNameIgnored)", "modifiers": "private static", "return": "Value", "signature": "Value aggrOverTime(Evaluator ev, Expressions args, AggrFn aggrFn, boolean metricNameIgnored)", "full_signature": "private static Value aggrOverTime(Evaluator ev, Expressions args, AggrFn aggrFn, boolean metricNameIgnored)", "class_method_signature": "Function.aggrOverTime(Evaluator ev, Expressions args, AggrFn aggrFn, boolean metricNameIgnored)", "testcase": false, "constructor": false}, {"identifier": "funcDelta", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "private static", "return": "Value", "signature": "Value funcDelta(Evaluator ev, Expressions args)", "full_signature": "private static Value funcDelta(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcDelta(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "funcIncrease2", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "private static", "return": "Value", "signature": "Value funcIncrease2(Evaluator ev, Expressions args)", "full_signature": "private static Value funcIncrease2(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcIncrease2(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "extrapolatedRate", "parameters": "(Evaluator ev, Expr arg, boolean isCounter, boolean isRate)", "modifiers": "private static", "return": "Value", "signature": "Value extrapolatedRate(Evaluator ev, Expr arg, boolean isCounter, boolean isRate)", "full_signature": "private static Value extrapolatedRate(Evaluator ev, Expr arg, boolean isCounter, boolean isRate)", "class_method_signature": "Function.extrapolatedRate(Evaluator ev, Expr arg, boolean isCounter, boolean isRate)", "testcase": false, "constructor": false}, {"identifier": "funcIdelta", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "private static", "return": "Value", "signature": "Value funcIdelta(Evaluator ev, Expressions args)", "full_signature": "private static Value funcIdelta(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcIdelta(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "instantValue", "parameters": "(Evaluator ev, Expr arg, boolean isRate)", "modifiers": "private static", "return": "Value", "signature": "Value instantValue(Evaluator ev, Expr arg, boolean isRate)", "full_signature": "private static Value instantValue(Evaluator ev, Expr arg, boolean isRate)", "class_method_signature": "Function.instantValue(Evaluator ev, Expr arg, boolean isRate)", "testcase": false, "constructor": false}, {"identifier": "funcRate", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "private static", "return": "Value", "signature": "Value funcRate(Evaluator ev, Expressions args)", "full_signature": "private static Value funcRate(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcRate(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "funcIncrease", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "private static", "return": "Value", "signature": "Value funcIncrease(Evaluator ev, Expressions args)", "full_signature": "private static Value funcIncrease(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcIncrease(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "funcAvgOverTime", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "private static", "return": "Value", "signature": "Value funcAvgOverTime(Evaluator ev, Expressions args)", "full_signature": "private static Value funcAvgOverTime(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcAvgOverTime(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "funcCountOverTime", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "private static", "return": "Value", "signature": "Value funcCountOverTime(Evaluator ev, Expressions args)", "full_signature": "private static Value funcCountOverTime(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcCountOverTime(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "funcHistogramQuantile", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "public static", "return": "Value", "signature": "Value funcHistogramQuantile(Evaluator ev, Expressions args)", "full_signature": "public static Value funcHistogramQuantile(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcHistogramQuantile(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "funcHistogramQuantileLK", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "private static", "return": "Value", "signature": "Value funcHistogramQuantileLK(Evaluator ev, Expressions args)", "full_signature": "private static Value funcHistogramQuantileLK(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcHistogramQuantileLK(Evaluator ev, Expressions args)", "testcase": false, "constructor": false}, {"identifier": "durationMilliseconds", "parameters": "(Duration offset)", "modifiers": "private static", "return": "long", "signature": "long durationMilliseconds(Duration offset)", "full_signature": "private static long durationMilliseconds(Duration offset)", "class_method_signature": "Function.durationMilliseconds(Duration offset)", "testcase": false, "constructor": false}], "file": "server/metrics/promql/src/main/java/com/alipay/sofa/lookout/server/prom/ql/func/Function.java"}, "focal_method": {"identifier": "funcMinOverTime", "parameters": "(Evaluator ev, Expressions args)", "modifiers": "static", "return": "Value", "body": "static Value funcMinOverTime(Evaluator ev, Expressions args) {\n        return aggrOverTime(ev, args, values -> {\n            double min = Float.MAX_VALUE;\n            for (Series.Point v : values) {\n                if (v.getV() < min) {\n                    min = v.getV();\n                }\n            }\n            return min;\n        });\n    }", "signature": "Value funcMinOverTime(Evaluator ev, Expressions args)", "full_signature": "static Value funcMinOverTime(Evaluator ev, Expressions args)", "class_method_signature": "Function.funcMinOverTime(Evaluator ev, Expressions args)", "testcase": false, "constructor": false, "invocations": ["aggrOverTime", "getV", "getV"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}