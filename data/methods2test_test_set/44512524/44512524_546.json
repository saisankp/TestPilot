{"test_class": {"identifier": "RegisterSetTest", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/cardinality/RegisterSetTest.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge()\n    {\n        Random rand = new Random(2);\n        int count = 32;\n        RegisterSet rs = new RegisterSet(count);\n        RegisterSet[] rss = new RegisterSet[5];\n\n        for (int i = 0; i < rss.length; i++)\n        {\n            rss[i] = new RegisterSet(count);\n\n            for (int pos = 0; pos < rs.count; pos++)\n            {\n                int val = rand.nextInt(10);\n                rs.updateIfGreater(pos, val);\n                rss[i].set(pos, val);\n            }\n        }\n\n        RegisterSet merged = new RegisterSet(count);\n        for (int i = 0; i < rss.length; i++)\n        {\n           merged.merge(rss[i]);\n        }\n\n        for (int pos = 0; pos < rs.count; pos++)\n        {\n            assertEquals(rs.get(pos), merged.get(pos));\n        }\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "RegisterSetTest.testMerge()", "testcase": true, "constructor": false, "invocations": ["nextInt", "updateIfGreater", "set", "merge", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "RegisterSet", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static int LOG2_BITS_PER_WORD = 6;", "modifier": "public final static", "type": "int", "declarator": "LOG2_BITS_PER_WORD = 6", "var_name": "LOG2_BITS_PER_WORD"}, {"original_string": "public final static int REGISTER_SIZE = 5;", "modifier": "public final static", "type": "int", "declarator": "REGISTER_SIZE = 5", "var_name": "REGISTER_SIZE"}, {"original_string": "public final int count;", "modifier": "public final", "type": "int", "declarator": "count", "var_name": "count"}, {"original_string": "public final int size;", "modifier": "public final", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "private final int[] M;", "modifier": "private final", "type": "int[]", "declarator": "M", "var_name": "M"}], "methods": [{"identifier": "RegisterSet", "parameters": "(int count)", "modifiers": "public", "return": "", "signature": " RegisterSet(int count)", "full_signature": "public  RegisterSet(int count)", "class_method_signature": "RegisterSet.RegisterSet(int count)", "testcase": false, "constructor": true}, {"identifier": "RegisterSet", "parameters": "(int count, int[] initialValues)", "modifiers": "public", "return": "", "signature": " RegisterSet(int count, int[] initialValues)", "full_signature": "public  RegisterSet(int count, int[] initialValues)", "class_method_signature": "RegisterSet.RegisterSet(int count, int[] initialValues)", "testcase": false, "constructor": true}, {"identifier": "getBits", "parameters": "(int count)", "modifiers": "public static", "return": "int", "signature": "int getBits(int count)", "full_signature": "public static int getBits(int count)", "class_method_signature": "RegisterSet.getBits(int count)", "testcase": false, "constructor": false}, {"identifier": "getSizeForCount", "parameters": "(int count)", "modifiers": "public static", "return": "int", "signature": "int getSizeForCount(int count)", "full_signature": "public static int getSizeForCount(int count)", "class_method_signature": "RegisterSet.getSizeForCount(int count)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int position, int value)", "modifiers": "public", "return": "void", "signature": "void set(int position, int value)", "full_signature": "public void set(int position, int value)", "class_method_signature": "RegisterSet.set(int position, int value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int position)", "modifiers": "public", "return": "int", "signature": "int get(int position)", "full_signature": "public int get(int position)", "class_method_signature": "RegisterSet.get(int position)", "testcase": false, "constructor": false}, {"identifier": "updateIfGreater", "parameters": "(int position, int value)", "modifiers": "public", "return": "boolean", "signature": "boolean updateIfGreater(int position, int value)", "full_signature": "public boolean updateIfGreater(int position, int value)", "class_method_signature": "RegisterSet.updateIfGreater(int position, int value)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(RegisterSet that)", "modifiers": "public", "return": "void", "signature": "void merge(RegisterSet that)", "full_signature": "public void merge(RegisterSet that)", "class_method_signature": "RegisterSet.merge(RegisterSet that)", "testcase": false, "constructor": false}, {"identifier": "readOnlyBits", "parameters": "()", "modifiers": "", "return": "int[]", "signature": "int[] readOnlyBits()", "full_signature": " int[] readOnlyBits()", "class_method_signature": "RegisterSet.readOnlyBits()", "testcase": false, "constructor": false}, {"identifier": "bits", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] bits()", "full_signature": "public int[] bits()", "class_method_signature": "RegisterSet.bits()", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/cardinality/RegisterSet.java"}, "focal_method": {"identifier": "merge", "parameters": "(RegisterSet that)", "modifiers": "public", "return": "void", "body": "public void merge(RegisterSet that)\n    {\n        for (int bucket = 0; bucket < M.length; bucket++)\n        {\n            int word = 0;\n            for (int j = 0; j < LOG2_BITS_PER_WORD; j++)\n            {\n                int mask = 0x1f << (REGISTER_SIZE * j);\n\n                int thisVal = (this.M[bucket] & mask);\n                int thatVal = (that.M[bucket] & mask);\n                word |= (thisVal < thatVal) ? thatVal : thisVal;\n            }\n            this.M[bucket] = word;\n        }\n    }", "signature": "void merge(RegisterSet that)", "full_signature": "public void merge(RegisterSet that)", "class_method_signature": "RegisterSet.merge(RegisterSet that)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}