{"test_class": {"identifier": "DatePickerDialogTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DatePickerDialog datePickerDialog;", "modifier": "private", "type": "DatePickerDialog", "declarator": "datePickerDialog", "var_name": "datePickerDialog"}], "file": "thai-widget/src/test/java/nectec/thai/widget/date/DatePickerDialogTest.java"}, "test_case": {"identifier": "testCalendarFromPicker", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalendarFromPicker() throws Exception {\n        datePickerDialog.yearPicker.setValue(2016 + 543);\n        datePickerDialog.monthPicker.setValue(MARCH);\n        datePickerDialog.dayPicker.setValue(31);\n\n        Calendar newCalendar = datePickerDialog.newCalendarFromPicker();\n        assertEquals(31, newCalendar.get(DAY_OF_MONTH));\n        assertEquals(MARCH, newCalendar.get(MONTH));\n        assertEquals(2016, newCalendar.get(YEAR));\n        assertEquals(31, newCalendar.getActualMaximum(DAY_OF_MONTH));\n\n        datePickerDialog.monthPicker.setValue(FEBRUARY);\n        newCalendar = datePickerDialog.newCalendarFromPicker();\n        assertEquals(29, newCalendar.get(DAY_OF_MONTH));\n    }", "signature": "void testCalendarFromPicker()", "full_signature": "@Test public void testCalendarFromPicker()", "class_method_signature": "DatePickerDialogTest.testCalendarFromPicker()", "testcase": true, "constructor": false, "invocations": ["setValue", "setValue", "setValue", "newCalendarFromPicker", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "getActualMaximum", "setValue", "newCalendarFromPicker", "assertEquals", "get"]}, "focal_class": {"identifier": "DatePickerDialog", "superclass": "extends AlertDialog", "interfaces": "implements DatePopup, NumberPicker.OnValueChangeListener", "fields": [{"original_string": "private static final String[] THAI_MONTH = {\"\u0e21\u0e01\u0e23\u0e32\u0e04\u0e21\", \"\u0e01\u0e38\u0e21\u0e20\u0e32\u0e1e\u0e31\u0e19\u0e18\u0e4c\",\n            \"\u0e21\u0e35\u0e19\u0e32\u0e04\u0e21\", \"\u0e40\u0e21\u0e29\u0e32\u0e22\u0e19\", \"\u0e1e\u0e24\u0e29\u0e20\u0e32\u0e04\u0e21\", \"\u0e21\u0e34\u0e16\u0e38\u0e19\u0e32\u0e22\u0e19\", \"\u0e01\u0e23\u0e01\u0e0e\u0e32\u0e04\u0e21\", \"\u0e2a\u0e34\u0e07\u0e2b\u0e32\u0e04\u0e21\",\n            \"\u0e01\u0e31\u0e19\u0e22\u0e32\u0e22\u0e19\", \"\u0e15\u0e38\u0e25\u0e32\u0e04\u0e21\", \"\u0e1e\u0e24\u0e28\u0e08\u0e34\u0e01\u0e32\u0e22\u0e19\", \"\u0e18\u0e31\u0e19\u0e27\u0e32\u0e04\u0e21\"};", "modifier": "private static final", "type": "String[]", "declarator": "THAI_MONTH = {\"\u0e21\u0e01\u0e23\u0e32\u0e04\u0e21\", \"\u0e01\u0e38\u0e21\u0e20\u0e32\u0e1e\u0e31\u0e19\u0e18\u0e4c\",\n            \"\u0e21\u0e35\u0e19\u0e32\u0e04\u0e21\", \"\u0e40\u0e21\u0e29\u0e32\u0e22\u0e19\", \"\u0e1e\u0e24\u0e29\u0e20\u0e32\u0e04\u0e21\", \"\u0e21\u0e34\u0e16\u0e38\u0e19\u0e32\u0e22\u0e19\", \"\u0e01\u0e23\u0e01\u0e0e\u0e32\u0e04\u0e21\", \"\u0e2a\u0e34\u0e07\u0e2b\u0e32\u0e04\u0e21\",\n            \"\u0e01\u0e31\u0e19\u0e22\u0e32\u0e22\u0e19\", \"\u0e15\u0e38\u0e25\u0e32\u0e04\u0e21\", \"\u0e1e\u0e24\u0e28\u0e08\u0e34\u0e01\u0e32\u0e22\u0e19\", \"\u0e18\u0e31\u0e19\u0e27\u0e32\u0e04\u0e21\"};", "var_name": "THAI_MONTH"}, {"original_string": "protected final NumberPicker dayPicker;", "modifier": "protected final", "type": "NumberPicker", "declarator": "dayPicker", "var_name": "dayPicker"}, {"original_string": "protected final NumberPicker monthPicker;", "modifier": "protected final", "type": "NumberPicker", "declarator": "monthPicker", "var_name": "monthPicker"}, {"original_string": "protected final NumberPicker yearPicker;", "modifier": "protected final", "type": "NumberPicker", "declarator": "yearPicker", "var_name": "yearPicker"}, {"original_string": "private Calendar calendar;", "modifier": "private", "type": "Calendar", "declarator": "calendar", "var_name": "calendar"}, {"original_string": "private DatePickerCallback callback;", "modifier": "private", "type": "DatePickerCallback", "declarator": "callback", "var_name": "callback"}, {"original_string": "private final DialogInterface.OnClickListener onPositiveButtonClick = new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialogInterface, int i) {\n            View currentFocus = getCurrentFocus();\n            if (currentFocus != null) currentFocus.clearFocus();\n            if (callback != null) callback.onPicked(DatePickerDialog.this, calendar);\n            dismiss();\n        }\n    };", "modifier": "private final", "type": "DialogInterface.OnClickListener", "declarator": "onPositiveButtonClick = new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialogInterface, int i) {\n            View currentFocus = getCurrentFocus();\n            if (currentFocus != null) currentFocus.clearFocus();\n            if (callback != null) callback.onPicked(DatePickerDialog.this, calendar);\n            dismiss();\n        }\n    }", "var_name": "onPositiveButtonClick"}, {"original_string": "private final DialogInterface.OnClickListener onNegativeButtonClick = new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialogInterface, int i) {\n            if (callback != null) callback.onCancel();\n            dismiss();\n        }\n    };", "modifier": "private final", "type": "DialogInterface.OnClickListener", "declarator": "onNegativeButtonClick = new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialogInterface, int i) {\n            if (callback != null) callback.onCancel();\n            dismiss();\n        }\n    }", "var_name": "onNegativeButtonClick"}, {"original_string": "private Calendar maxDate;", "modifier": "private", "type": "Calendar", "declarator": "maxDate", "var_name": "maxDate"}, {"original_string": "private Calendar minDate;", "modifier": "private", "type": "Calendar", "declarator": "minDate", "var_name": "minDate"}], "methods": [{"identifier": "DatePickerDialog", "parameters": "(Context context)", "modifiers": "public", "return": "", "signature": " DatePickerDialog(Context context)", "full_signature": "public  DatePickerDialog(Context context)", "class_method_signature": "DatePickerDialog.DatePickerDialog(Context context)", "testcase": false, "constructor": true}, {"identifier": "DatePickerDialog", "parameters": "(Context context, DatePickerCallback datePickerCallback)", "modifiers": "public", "return": "", "signature": " DatePickerDialog(Context context, DatePickerCallback datePickerCallback)", "full_signature": "public  DatePickerDialog(Context context, DatePickerCallback datePickerCallback)", "class_method_signature": "DatePickerDialog.DatePickerDialog(Context context, DatePickerCallback datePickerCallback)", "testcase": false, "constructor": true}, {"identifier": "DatePickerDialog", "parameters": "(Context context, Calendar calendar, DatePickerCallback datePickerCallback)", "modifiers": "public", "return": "", "signature": " DatePickerDialog(Context context, Calendar calendar, DatePickerCallback datePickerCallback)", "full_signature": "public  DatePickerDialog(Context context, Calendar calendar, DatePickerCallback datePickerCallback)", "class_method_signature": "DatePickerDialog.DatePickerDialog(Context context, Calendar calendar, DatePickerCallback datePickerCallback)", "testcase": false, "constructor": true}, {"identifier": "updateDate", "parameters": "(Calendar calendar)", "modifiers": "public final", "return": "void", "signature": "void updateDate(Calendar calendar)", "full_signature": "public final void updateDate(Calendar calendar)", "class_method_signature": "DatePickerDialog.updateDate(Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "updateDate", "parameters": "(int year, int month, int dayOfMonth)", "modifiers": "@Override public", "return": "void", "signature": "void updateDate(int year, int month, int dayOfMonth)", "full_signature": "@Override public void updateDate(int year, int month, int dayOfMonth)", "class_method_signature": "DatePickerDialog.updateDate(int year, int month, int dayOfMonth)", "testcase": false, "constructor": false}, {"identifier": "getYear", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getYear()", "full_signature": "@Override public int getYear()", "class_method_signature": "DatePickerDialog.getYear()", "testcase": false, "constructor": false}, {"identifier": "getMonth", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMonth()", "full_signature": "@Override public int getMonth()", "class_method_signature": "DatePickerDialog.getMonth()", "testcase": false, "constructor": false}, {"identifier": "getDayOfMonth", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDayOfMonth()", "full_signature": "@Override public int getDayOfMonth()", "class_method_signature": "DatePickerDialog.getDayOfMonth()", "testcase": false, "constructor": false}, {"identifier": "setMaxDate", "parameters": "(int year, int month, int dayOfMonth)", "modifiers": "@Override public", "return": "void", "signature": "void setMaxDate(int year, int month, int dayOfMonth)", "full_signature": "@Override public void setMaxDate(int year, int month, int dayOfMonth)", "class_method_signature": "DatePickerDialog.setMaxDate(int year, int month, int dayOfMonth)", "testcase": false, "constructor": false}, {"identifier": "setMinDate", "parameters": "(int year, int month, int dayOfMonth)", "modifiers": "@Override public", "return": "void", "signature": "void setMinDate(int year, int month, int dayOfMonth)", "full_signature": "@Override public void setMinDate(int year, int month, int dayOfMonth)", "class_method_signature": "DatePickerDialog.setMinDate(int year, int month, int dayOfMonth)", "testcase": false, "constructor": false}, {"identifier": "setCallback", "parameters": "(DatePickerCallback callback)", "modifiers": "@Override public", "return": "void", "signature": "void setCallback(DatePickerCallback callback)", "full_signature": "@Override public void setCallback(DatePickerCallback callback)", "class_method_signature": "DatePickerDialog.setCallback(DatePickerCallback callback)", "testcase": false, "constructor": false}, {"identifier": "setMaxDateIsToday", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setMaxDateIsToday()", "full_signature": "public void setMaxDateIsToday()", "class_method_signature": "DatePickerDialog.setMaxDateIsToday()", "testcase": false, "constructor": false}, {"identifier": "setMaxDate", "parameters": "(Calendar maxDate)", "modifiers": "public", "return": "void", "signature": "void setMaxDate(Calendar maxDate)", "full_signature": "public void setMaxDate(Calendar maxDate)", "class_method_signature": "DatePickerDialog.setMaxDate(Calendar maxDate)", "testcase": false, "constructor": false}, {"identifier": "setMinDateIsToday", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setMinDateIsToday()", "full_signature": "public void setMinDateIsToday()", "class_method_signature": "DatePickerDialog.setMinDateIsToday()", "testcase": false, "constructor": false}, {"identifier": "setMinDate", "parameters": "(Calendar minDate)", "modifiers": "public", "return": "void", "signature": "void setMinDate(Calendar minDate)", "full_signature": "public void setMinDate(Calendar minDate)", "class_method_signature": "DatePickerDialog.setMinDate(Calendar minDate)", "testcase": false, "constructor": false}, {"identifier": "show", "parameters": "(int year, int month, int dayOfMonth)", "modifiers": "@Override public", "return": "void", "signature": "void show(int year, int month, int dayOfMonth)", "full_signature": "@Override public void show(int year, int month, int dayOfMonth)", "class_method_signature": "DatePickerDialog.show(int year, int month, int dayOfMonth)", "testcase": false, "constructor": false}, {"identifier": "show", "parameters": "(Calendar calendar)", "modifiers": "@Override public", "return": "void", "signature": "void show(Calendar calendar)", "full_signature": "@Override public void show(Calendar calendar)", "class_method_signature": "DatePickerDialog.show(Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "setPopupTitle", "parameters": "(String title)", "modifiers": "@Override public", "return": "void", "signature": "void setPopupTitle(String title)", "full_signature": "@Override public void setPopupTitle(String title)", "class_method_signature": "DatePickerDialog.setPopupTitle(String title)", "testcase": false, "constructor": false}, {"identifier": "onValueChange", "parameters": "(NumberPicker numberPicker, int i, int i1)", "modifiers": "@Override public", "return": "void", "signature": "void onValueChange(NumberPicker numberPicker, int i, int i1)", "full_signature": "@Override public void onValueChange(NumberPicker numberPicker, int i, int i1)", "class_method_signature": "DatePickerDialog.onValueChange(NumberPicker numberPicker, int i, int i1)", "testcase": false, "constructor": false}, {"identifier": "updateValueAndUi", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void updateValueAndUi()", "full_signature": "protected void updateValueAndUi()", "class_method_signature": "DatePickerDialog.updateValueAndUi()", "testcase": false, "constructor": false}, {"identifier": "trimDayOverMaxDayOfNewMonth", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void trimDayOverMaxDayOfNewMonth()", "full_signature": "private void trimDayOverMaxDayOfNewMonth()", "class_method_signature": "DatePickerDialog.trimDayOverMaxDayOfNewMonth()", "testcase": false, "constructor": false}, {"identifier": "newCalendarFromPicker", "parameters": "()", "modifiers": "protected", "return": "Calendar", "signature": "Calendar newCalendarFromPicker()", "full_signature": "protected Calendar newCalendarFromPicker()", "class_method_signature": "DatePickerDialog.newCalendarFromPicker()", "testcase": false, "constructor": false}, {"identifier": "updateMaxValueIfMaxDateSet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateMaxValueIfMaxDateSet()", "full_signature": "private void updateMaxValueIfMaxDateSet()", "class_method_signature": "DatePickerDialog.updateMaxValueIfMaxDateSet()", "testcase": false, "constructor": false}, {"identifier": "updateMinValueIfMinDateSet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateMinValueIfMinDateSet()", "full_signature": "private void updateMinValueIfMinDateSet()", "class_method_signature": "DatePickerDialog.updateMinValueIfMinDateSet()", "testcase": false, "constructor": false}], "file": "thai-widget/src/main/java/nectec/thai/widget/date/DatePickerDialog.java"}, "focal_method": {"identifier": "newCalendarFromPicker", "parameters": "()", "modifiers": "protected", "return": "Calendar", "body": "protected Calendar newCalendarFromPicker() {\n        Calendar newCalendar = Calendar.getInstance();\n        newCalendar.set(yearPicker.getValue() - 543, monthPicker.getValue(), 1);\n\n        if (dayPicker.getValue() > newCalendar.getActualMaximum(DAY_OF_MONTH)) {\n            dayPicker.setValue(newCalendar.getActualMaximum(DAY_OF_MONTH));\n        }\n        dayPicker.setMaxValue(newCalendar.getActualMaximum(DAY_OF_MONTH));\n        newCalendar.set(DAY_OF_MONTH, dayPicker.getValue());\n        return newCalendar;\n    }", "signature": "Calendar newCalendarFromPicker()", "full_signature": "protected Calendar newCalendarFromPicker()", "class_method_signature": "DatePickerDialog.newCalendarFromPicker()", "testcase": false, "constructor": false, "invocations": ["getInstance", "set", "getValue", "getValue", "getValue", "getActualMaximum", "setValue", "getActualMaximum", "setMaxValue", "getActualMaximum", "set", "getValue"]}, "repository": {"repo_id": 44322761, "url": "https://github.com/nectec-opensource/thai-widget", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 2551, "license": "licensed"}}