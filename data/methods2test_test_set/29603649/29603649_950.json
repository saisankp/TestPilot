{"test_class": {"identifier": "WilmaLogHandlerServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private FileReader messageFileReader;", "modifier": "@Mock\n    private", "type": "FileReader", "declarator": "messageFileReader", "var_name": "messageFileReader"}, {"original_string": "@Mock\n    private LogFilePathProvider filePathProvider;", "modifier": "@Mock\n    private", "type": "LogFilePathProvider", "declarator": "filePathProvider", "var_name": "filePathProvider"}, {"original_string": "@Mock\n    private LogFileHandler logFileHandler;", "modifier": "@Mock\n    private", "type": "LogFileHandler", "declarator": "logFileHandler", "var_name": "logFileHandler"}, {"original_string": "@Mock\n    private HttpServletRequest request;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private HttpServletResponse response;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private Path path;", "modifier": "@Mock\n    private", "type": "Path", "declarator": "path", "var_name": "path"}, {"original_string": "@InjectMocks\n    private WilmaLogHandlerServlet underTest;", "modifier": "@InjectMocks\n    private", "type": "WilmaLogHandlerServlet", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/logging/WilmaLogHandlerServletTest.java"}, "test_case": {"identifier": "testDoGetShouldCallWriteFileContentToResponseWhenPathIsNotEmpty", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testDoGetShouldCallWriteFileContentToResponseWhenPathIsNotEmpty() throws ServletException, IOException {\n        // GIVEN\n        String pathInfo = \"/filename\";\n        given(request.getPathInfo()).willReturn(null);\n        given(request.getPathInfo()).willReturn(pathInfo);\n        // WHEN\n        underTest.doGet(request, response);\n        // THEN\n        verify(logFileHandler).writeFileContentToResponse(request, response, pathInfo, path);\n    }", "signature": "void testDoGetShouldCallWriteFileContentToResponseWhenPathIsNotEmpty()", "full_signature": "@Test public final void testDoGetShouldCallWriteFileContentToResponseWhenPathIsNotEmpty()", "class_method_signature": "WilmaLogHandlerServletTest.testDoGetShouldCallWriteFileContentToResponseWhenPathIsNotEmpty()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getPathInfo", "willReturn", "given", "getPathInfo", "doGet", "writeFileContentToResponse", "verify"]}, "focal_class": {"identifier": "WilmaLogHandlerServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "private final LogFilePathProvider filePathProvider;", "modifier": "private final", "type": "LogFilePathProvider", "declarator": "filePathProvider", "var_name": "filePathProvider"}, {"original_string": "private final LogFileHandler logFileHandler;", "modifier": "private final", "type": "LogFileHandler", "declarator": "logFileHandler", "var_name": "logFileHandler"}], "methods": [{"identifier": "WilmaLogHandlerServlet", "parameters": "(LogFilePathProvider filePathProvider, LogFileHandler logFileHandler)", "modifiers": "@Autowired public", "return": "", "signature": " WilmaLogHandlerServlet(LogFilePathProvider filePathProvider, LogFileHandler logFileHandler)", "full_signature": "@Autowired public  WilmaLogHandlerServlet(LogFilePathProvider filePathProvider, LogFileHandler logFileHandler)", "class_method_signature": "WilmaLogHandlerServlet.WilmaLogHandlerServlet(LogFilePathProvider filePathProvider, LogFileHandler logFileHandler)", "testcase": false, "constructor": true}, {"identifier": "doGet", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "WilmaLogHandlerServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "doPost", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doPost(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "WilmaLogHandlerServlet.doPost(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "pathIsEmpty", "parameters": "(final HttpServletRequest req)", "modifiers": "private", "return": "boolean", "signature": "boolean pathIsEmpty(final HttpServletRequest req)", "full_signature": "private boolean pathIsEmpty(final HttpServletRequest req)", "class_method_signature": "WilmaLogHandlerServlet.pathIsEmpty(final HttpServletRequest req)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/logging/WilmaLogHandlerServlet.java"}, "focal_method": {"identifier": "doGet", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {\n        Path path = filePathProvider.getAppLogFilePath();\n        if (pathIsEmpty(req)) {\n            logFileHandler.writeFileNamesToResponse(resp, path);\n        } else {\n            logFileHandler.writeFileContentToResponse(req, resp, req.getPathInfo(), path);\n        }\n    }", "signature": "void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "WilmaLogHandlerServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false, "invocations": ["getAppLogFilePath", "pathIsEmpty", "writeFileNamesToResponse", "writeFileContentToResponse", "getPathInfo"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}