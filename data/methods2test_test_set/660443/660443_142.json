{"test_class": {"identifier": "AbbreviationLabelTest", "superclass": "", "interfaces": "", "fields": [], "file": "display/renderbasic/src/test/java/org/openscience/cdk/renderer/generators/standard/AbbreviationLabelTest.java"}, "test_case": {"identifier": "het", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void het() {\n        // 'Het' not 'He'lium and 't'erts\n        assertFalse(AbbreviationLabel.parse(\"Het\", new ArrayList<String>()));\n    }", "signature": "void het()", "full_signature": "@Test public void het()", "class_method_signature": "AbbreviationLabelTest.het()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "parse"]}, "focal_class": {"identifier": "AbbreviationLabel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MINUS_STRING = \"\\u2212\";", "modifier": "private static final", "type": "String", "declarator": "MINUS_STRING = \"\\u2212\"", "var_name": "MINUS_STRING"}, {"original_string": "private final static String[] PREFIX_LIST = new String[]{\n            \"n\", \"norm\", \"n-\", \"c\", \"cy\", \"cyc\", \"cyclo\", \"c-\", \"cy-\", \"cyc-\", \"i\", \"iso\", \"i-\", \"t\", \"tert\", \"t-\", \"s\",\n            \"sec\", \"s-\", \"o\", \"ortho\", \"o-\", \"m\", \"meta\", \"m-\", \"p\", \"para\", \"p-\", \"1-\", \"2-\", \"3-\", \"4-\", \"5-\", \"6-\",\n            \"7-\", \"8-\", \"9-\"\n    };", "modifier": "private final static", "type": "String[]", "declarator": "PREFIX_LIST = new String[]{\n            \"n\", \"norm\", \"n-\", \"c\", \"cy\", \"cyc\", \"cyclo\", \"c-\", \"cy-\", \"cyc-\", \"i\", \"iso\", \"i-\", \"t\", \"tert\", \"t-\", \"s\",\n            \"sec\", \"s-\", \"o\", \"ortho\", \"o-\", \"m\", \"meta\", \"m-\", \"p\", \"para\", \"p-\", \"1-\", \"2-\", \"3-\", \"4-\", \"5-\", \"6-\",\n            \"7-\", \"8-\", \"9-\"\n    }", "var_name": "PREFIX_LIST"}, {"original_string": "private final static String[] ITAL_PREFIX = new String[]{\n            \"n\", \"norm\", \"sec\", \"s\", \"tert\", \"t\",\n            \"ortho\", \"o\", \"meta\", \"m\", \"para\", \"p\"\n    };", "modifier": "private final static", "type": "String[]", "declarator": "ITAL_PREFIX = new String[]{\n            \"n\", \"norm\", \"sec\", \"s\", \"tert\", \"t\",\n            \"ortho\", \"o\", \"meta\", \"m\", \"para\", \"p\"\n    }", "var_name": "ITAL_PREFIX"}, {"original_string": "private final static String[] SYMBOL_LIST = new String[]{\"acac\", \"Ace\", \"Acetyl\", \"Acyl\", \"Ad\", \"All\", \"Alloc\", \"Allyl\", \"Amyl\", \"AOC\",\n                                                             \"BDMS\", \"Benzoyl\", \"Benzyl\", \"Bn\", \"BOC\", \"Boc\", \"BOM\", \"bpy\", \"Bromo\", \"Bs\", \"Bu\", \"But\", \"Butyl\", \"Bz\", \"Bzl\",\n                                                             \"Car\", \"Cbz\", \"Chloro\", \"CoA\", \"Cy\",\n                                                             \"dppf\", \"dppp\", \"dba\", \"D\", \"Dan\", \"Dansyl\", \"DEIPS\", \"DEM\", \"Dip\", \"Dmb\", \"DPA\", \"DTBMS\",\n                                                             \"EE\", \"EOM\", \"Et\", \"Ethyl\",\n                                                             \"Fluoro\", \"FMOC\", \"Fmoc\", \"Formyl\",\n                                                             \"Heptyl\", \"Hexyl\",\n                                                             \"Iodo\", \"IPDMS\",\n                                                             \"Me\", \"MEM\", \"Mesityl\", \"Mesyl\", \"Methoxy\", \"Methyl\", \"MOM\", \"Ms\",\n                                                             \"Nitro\",\n                                                             \"Oct\", \"Octyl\",\n                                                             \"PAB\", \"Pentyl\", \"Ph\", \"Phenyl\", \"Pivaloyl\", \"PMB\", \"Pro\", \"Propargyl\", \"Propyl\", \"Pv\",\n                                                             \"R\", \"SEM\",\n                                                             \"T\", \"TBS\", \"TBDMS\", \"Trt\", \"TBDPS\", \"TES\", \"Tf\", \"THP\", \"THPO\", \"TIPS\", \"TMS\", \"Tos\", \"Tol\", \"Tosyl\", \"Tr\", \"Troc\",\n                                                             \"Vinyl\", \"Voc\", \"Z\"};", "modifier": "private final static", "type": "String[]", "declarator": "SYMBOL_LIST = new String[]{\"acac\", \"Ace\", \"Acetyl\", \"Acyl\", \"Ad\", \"All\", \"Alloc\", \"Allyl\", \"Amyl\", \"AOC\",\n                                                             \"BDMS\", \"Benzoyl\", \"Benzyl\", \"Bn\", \"BOC\", \"Boc\", \"BOM\", \"bpy\", \"Bromo\", \"Bs\", \"Bu\", \"But\", \"Butyl\", \"Bz\", \"Bzl\",\n                                                             \"Car\", \"Cbz\", \"Chloro\", \"CoA\", \"Cy\",\n                                                             \"dppf\", \"dppp\", \"dba\", \"D\", \"Dan\", \"Dansyl\", \"DEIPS\", \"DEM\", \"Dip\", \"Dmb\", \"DPA\", \"DTBMS\",\n                                                             \"EE\", \"EOM\", \"Et\", \"Ethyl\",\n                                                             \"Fluoro\", \"FMOC\", \"Fmoc\", \"Formyl\",\n                                                             \"Heptyl\", \"Hexyl\",\n                                                             \"Iodo\", \"IPDMS\",\n                                                             \"Me\", \"MEM\", \"Mesityl\", \"Mesyl\", \"Methoxy\", \"Methyl\", \"MOM\", \"Ms\",\n                                                             \"Nitro\",\n                                                             \"Oct\", \"Octyl\",\n                                                             \"PAB\", \"Pentyl\", \"Ph\", \"Phenyl\", \"Pivaloyl\", \"PMB\", \"Pro\", \"Propargyl\", \"Propyl\", \"Pv\",\n                                                             \"R\", \"SEM\",\n                                                             \"T\", \"TBS\", \"TBDMS\", \"Trt\", \"TBDPS\", \"TES\", \"Tf\", \"THP\", \"THPO\", \"TIPS\", \"TMS\", \"Tos\", \"Tol\", \"Tosyl\", \"Tr\", \"Troc\",\n                                                             \"Vinyl\", \"Voc\", \"Z\"}", "var_name": "SYMBOL_LIST"}, {"original_string": "private static Trie PREFIX_TRIE = new Trie();", "modifier": "private static", "type": "Trie", "declarator": "PREFIX_TRIE = new Trie()", "var_name": "PREFIX_TRIE"}, {"original_string": "private static Trie ITAL_PREFIX_TRIE = new Trie();", "modifier": "private static", "type": "Trie", "declarator": "ITAL_PREFIX_TRIE = new Trie()", "var_name": "ITAL_PREFIX_TRIE"}, {"original_string": "private static Trie SYMBOL_TRIE = new Trie();", "modifier": "private static", "type": "Trie", "declarator": "SYMBOL_TRIE = new Trie()", "var_name": "SYMBOL_TRIE"}, {"original_string": "static int STYLE_NORMAL    = 0;", "modifier": "static", "type": "int", "declarator": "STYLE_NORMAL    = 0", "var_name": "STYLE_NORMAL"}, {"original_string": "static int STYLE_SUBSCRIPT = -1;", "modifier": "static", "type": "int", "declarator": "STYLE_SUBSCRIPT = -1", "var_name": "STYLE_SUBSCRIPT"}, {"original_string": "static int STYLE_SUPSCRIPT = +1;", "modifier": "static", "type": "int", "declarator": "STYLE_SUPSCRIPT = +1", "var_name": "STYLE_SUPSCRIPT"}, {"original_string": "static int STYLE_ITALIC    = 2;", "modifier": "static", "type": "int", "declarator": "STYLE_ITALIC    = 2", "var_name": "STYLE_ITALIC"}], "methods": [{"identifier": "parse", "parameters": "(String label, List<String> tokens)", "modifiers": "static", "return": "boolean", "signature": "boolean parse(String label, List<String> tokens)", "full_signature": "static boolean parse(String label, List<String> tokens)", "class_method_signature": "AbbreviationLabel.parse(String label, List<String> tokens)", "testcase": false, "constructor": false}, {"identifier": "failParse", "parameters": "(String label, List<String> tokens)", "modifiers": "private static", "return": "boolean", "signature": "boolean failParse(String label, List<String> tokens)", "full_signature": "private static boolean failParse(String label, List<String> tokens)", "class_method_signature": "AbbreviationLabel.failParse(String label, List<String> tokens)", "testcase": false, "constructor": false}, {"identifier": "isNumber", "parameters": "(String str)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNumber(String str)", "full_signature": "private static boolean isNumber(String str)", "class_method_signature": "AbbreviationLabel.isNumber(String str)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(List<String> tokens)", "modifiers": "static", "return": "void", "signature": "void reverse(List<String> tokens)", "full_signature": "static void reverse(List<String> tokens)", "class_method_signature": "AbbreviationLabel.reverse(List<String> tokens)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(List<String> tokens)", "modifiers": "static", "return": "List<FormattedText>", "signature": "List<FormattedText> format(List<String> tokens)", "full_signature": "static List<FormattedText> format(List<String> tokens)", "class_method_signature": "AbbreviationLabel.format(List<String> tokens)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(List<FormattedText> texts, int from, int to)", "modifiers": "static", "return": "void", "signature": "void reduce(List<FormattedText> texts, int from, int to)", "full_signature": "static void reduce(List<FormattedText> texts, int from, int to)", "class_method_signature": "AbbreviationLabel.reduce(List<FormattedText> texts, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "isChargeToken", "parameters": "(String token)", "modifiers": "private static", "return": "boolean", "signature": "boolean isChargeToken(String token)", "full_signature": "private static boolean isChargeToken(String token)", "class_method_signature": "AbbreviationLabel.isChargeToken(String token)", "testcase": false, "constructor": false}, {"identifier": "isDigit", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDigit(char c)", "full_signature": "private static boolean isDigit(char c)", "class_method_signature": "AbbreviationLabel.isDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "norm", "parameters": "(char c)", "modifiers": "private static", "return": "char", "signature": "char norm(char c)", "full_signature": "private static char norm(char c)", "class_method_signature": "AbbreviationLabel.norm(char c)", "testcase": false, "constructor": false}, {"identifier": "findPrefix", "parameters": "(Trie trie, String string, int i, int best)", "modifiers": "private static", "return": "int", "signature": "int findPrefix(Trie trie, String string, int i, int best)", "full_signature": "private static int findPrefix(Trie trie, String string, int i, int best)", "class_method_signature": "AbbreviationLabel.findPrefix(Trie trie, String string, int i, int best)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(Trie trie, String str, int i)", "modifiers": "private static", "return": "Trie", "signature": "Trie insert(Trie trie, String str, int i)", "full_signature": "private static Trie insert(Trie trie, String str, int i)", "class_method_signature": "AbbreviationLabel.insert(Trie trie, String str, int i)", "testcase": false, "constructor": false}], "file": "display/renderbasic/src/main/java/org/openscience/cdk/renderer/generators/standard/AbbreviationLabel.java"}, "focal_method": {"identifier": "parse", "parameters": "(String label, List<String> tokens)", "modifiers": "static", "return": "boolean", "body": "static boolean parse(String label, List<String> tokens) {\n\n        int i = 0;\n        int len = label.length();\n\n        while (i < len) {\n\n            int st = i;\n            int last;\n\n            char c = label.charAt(i);\n\n            // BRACKETS we treat as separate\n            if (c == '(' || c == ')') {\n                tokens.add(Character.toString(c));\n                i++;\n\n                // digits following closing brackets\n                if (c == ')') {\n                    st = i;\n                    while (i < len && isDigit(c = label.charAt(i))) {\n                        i++;\n                    }\n                    if (i > st)\n                        tokens.add(label.substring(st, i));\n                }\n\n                continue;\n            }\n\n            // separators\n            if (c == '/' || c == '\u00b7' || c == '.' || c == '\u2022' || c == '=') {\n                tokens.add(Character.toString(c));\n                i++;\n\n                int beg = i;\n                while (i < label.length() && isDigit(label.charAt(i))) {\n                    i++;\n                }\n                if (i > beg)\n                    tokens.add(label.substring(beg, i));\n                continue;\n            }\n\n            // SYMBOL Tokens\n            // optional prefix o- m- p- etc.\n            if ((last = findPrefix(PREFIX_TRIE, label, i, -1)) > 0) {\n                i += (last - i);\n            }\n            final int symSt = i;\n\n            // a valid symbol token\n            if ((last = findPrefix(SYMBOL_TRIE, label, i, -1)) > 0) {\n                i += (last - i);\n                // an optional number suffix e.g. O2 F3 Ph3 etc.\n                while (i < len && isDigit(label.charAt(i))) {\n                    i++;\n                }\n            }\n            // a charge token, only if it's after some other parts\n            else if (i == st && st > 0) {\n                c = norm(label.charAt(i));\n                if (c == '-' || c == '+') {\n                    i++;\n                    while (i < len && isDigit(label.charAt(i))) {\n                        i++;\n                    }\n                    // we expect charge at the end of the string.. if there is\n                    // still more it's not good input\n                    if (i < len) {\n                        return failParse(label, tokens);\n                    }\n                }\n            }\n\n            if (i == st || i == symSt) {\n                return failParse(label, tokens);\n            }\n\n            tokens.add(label.substring(st, i));\n        }\n\n        return true;\n    }", "signature": "boolean parse(String label, List<String> tokens)", "full_signature": "static boolean parse(String label, List<String> tokens)", "class_method_signature": "AbbreviationLabel.parse(String label, List<String> tokens)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "add", "toString", "isDigit", "charAt", "add", "substring", "add", "toString", "length", "isDigit", "charAt", "add", "substring", "findPrefix", "findPrefix", "isDigit", "charAt", "norm", "charAt", "isDigit", "charAt", "failParse", "failParse", "add", "substring"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}