{"test_class": {"identifier": "DataSeriesImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ValueFactoryImpl FACTORY = new ValueFactoryImpl();", "modifier": "private static final", "type": "ValueFactoryImpl", "declarator": "FACTORY = new ValueFactoryImpl()", "var_name": "FACTORY"}], "file": "series/src/test/java/com/barchart/feed/series/DataSeriesImplTest.java"}, "test_case": {"identifier": "testInsertData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInsertData() {\n//        1        2013-12-10T09:00:00.003-06:00\n//        2        2013-12-10T09:00:00.005-06:00\n//        3        2013-12-10T09:00:00.007-06:00\n//        4        2013-12-10T09:00:00.009-06:00\n//        5        2013-12-10T09:00:00.011-06:00\n//        6        2013-12-10T09:00:00.013-06:00\n//        7        2013-12-10T09:00:00.015-06:00\n//        8        2013-12-10T09:00:01.000-06:00\n//        9        2013-12-10T09:00:01.002-06:00\n//        10       2013-12-10T09:00:01.004-06:00\n//        11       2013-12-10T09:00:01.006-06:00\n//        12       2013-12-10T09:00:02.000-06:00\n//        13       2013-12-10T09:00:02.002-06:00\n//        14       2013-12-10T09:00:02.004-06:00\n//        15       2013-12-10T12:00:00.147-06:00\n//        2013-12-10T11:59:58.001-06:00\n\n        final DateTime dt = new DateTime(2013, 12, 10, 9, 0, 0, 0);\n        final DateTime dt2 = new DateTime(2013, 12, 10, 9, 0, 0, 3);\n        final DateTime dt3 = new DateTime(2013, 12, 10, 9, 0, 0, 5);\n        final DateTime dt4 = new DateTime(2013, 12, 10, 9, 0, 0, 7);\n        final DateTime dt5 = new DateTime(2013, 12, 10, 9, 0, 0, 9);\n        final DateTime dt6 = new DateTime(2013, 12, 10, 9, 0, 0, 11);\n        final DateTime dt7 = new DateTime(2013, 12, 10, 9, 0, 0, 13);\n        final DateTime dt8 = new DateTime(2013, 12, 10, 9, 0, 0, 15);\n        final DateTime dt9 = new DateTime(2013, 12, 10, 9, 0, 1, 0);\n        final DateTime dt10 = new DateTime(2013, 12, 10, 9, 0, 1, 2);\n        final DateTime dt11 = new DateTime(2013, 12, 10, 9, 0, 1, 4);\n        final DateTime dt12 = new DateTime(2013, 12, 10, 9, 0, 1, 6);\n        final DateTime dt13 = new DateTime(2013, 12, 10, 9, 0, 2, 0);\n        final DateTime dt14 = new DateTime(2013, 12, 10, 9, 0, 2, 2);\n        final DateTime dt15 = new DateTime(2013, 12, 10, 9, 0, 2, 4);\n        final DateTime dt16 = new DateTime(2013, 12, 10, 12, 0, 0, 147);\n\n        final DateTime t = new DateTime(2013, 12, 10, 11, 59, 58, 1);\n\n        final Period p = new Period(PeriodType.TICK, 1);\n        final DataSeriesImpl<DataPointImpl> ds = new DataSeriesImpl<DataPointImpl>(p);\n\n\t\tds.insertData(new BarImpl(null, dt, p, null, null, null, null, null, null));\n        assertEquals(1, ds.size());\n\t\tassertEquals(0, ds.indexOf(dt, false));\n\n\t\tds.insertData(new BarImpl(null, dt2, p, null, null, null, null, null, null));\n        assertEquals(2, ds.size());\n\t\tassertEquals(1, ds.indexOf(dt2, false));\n\n\t\tds.insertData(new BarImpl(null, dt3, p, null, null, null, null, null, null));\n        assertEquals(3, ds.size());\n\t\tassertEquals(2, ds.indexOf(dt3, false));\n\n\t\tds.insertData(new BarImpl(null, dt4, p, null, null, null, null, null, null));\n        assertEquals(4, ds.size());\n\t\tassertEquals(3, ds.indexOf(dt4, false));\n\n\t\tds.insertData(new BarImpl(null, dt5, p, null, null, null, null, null, null));\n        assertEquals(5, ds.size());\n\t\tassertEquals(4, ds.indexOf(dt5, false));\n\n\t\tds.insertData(new BarImpl(null, dt6, p, null, null, null, null, null, null));\n        assertEquals(6, ds.size());\n\t\tassertEquals(5, ds.indexOf(dt6, false));\n\n\t\tds.insertData(new BarImpl(null, dt7, p, null, null, null, null, null, null));\n        assertEquals(7, ds.size());\n\t\tassertEquals(6, ds.indexOf(dt7, false));\n\n\t\tds.insertData(new BarImpl(null, dt8, p, null, null, null, null, null, null));\n        assertEquals(8, ds.size());\n\t\tassertEquals(7, ds.indexOf(dt8, false));\n\n\t\tds.insertData(new BarImpl(null, dt9, p, null, null, null, null, null, null));\n        assertEquals(9, ds.size());\n\t\tassertEquals(8, ds.indexOf(dt9, false));\n\n\t\tds.insertData(new BarImpl(null, dt10, p, null, null, null, null, null, null));\n        assertEquals(10, ds.size());\n\t\tassertEquals(9, ds.indexOf(dt10, false));\n\n\t\tds.insertData(new BarImpl(null, dt11, p, null, null, null, null, null, null));\n        assertEquals(11, ds.size());\n\t\tassertEquals(10, ds.indexOf(dt11, false));\n\n\t\tds.insertData(new BarImpl(null, dt12, p, null, null, null, null, null, null));\n        assertEquals(12, ds.size());\n\t\tassertEquals(11, ds.indexOf(dt12, false));\n\n\t\tds.insertData(new BarImpl(null, dt13, p, null, null, null, null, null, null));\n        assertEquals(13, ds.size());\n\t\tassertEquals(12, ds.indexOf(dt13, false));\n\n\t\tds.insertData(new BarImpl(null, dt14, p, null, null, null, null, null, null));\n        assertEquals(14, ds.size());\n\t\tassertEquals(13, ds.indexOf(dt14, false));\n\n\t\tds.insertData(new BarImpl(null, dt15, p, null, null, null, null, null, null));\n        assertEquals(15, ds.size());\n\t\tassertEquals(14, ds.indexOf(dt15, false));\n\n\t\tds.insertData(new BarImpl(null, dt16, p, null, null, null, null, null, null));\n        assertEquals(16, ds.size());\n\t\tassertEquals(15, ds.indexOf(dt16, false));\n\n        ////\n\n        //Becomes index 15 and bumps the above insertion to the right\n\t\tds.insertData(new BarImpl(null, t, p, null, null, null, null, null, null));\n        assertEquals(17, ds.size());\n\t\tassertEquals(15, ds.indexOf(t, false));\n\n        //Prev dt16 now is moved to the right due to the above insertion\n\t\tassertEquals(16, ds.indexOf(dt16, false));\n\n        System.out.println(dt);\n    }", "signature": "void testInsertData()", "full_signature": "@Test public void testInsertData()", "class_method_signature": "DataSeriesImplTest.testInsertData()", "testcase": true, "constructor": false, "invocations": ["insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "insertData", "assertEquals", "size", "assertEquals", "indexOf", "assertEquals", "indexOf", "println"]}, "focal_class": {"identifier": "DataSeriesImpl", "superclass": "", "interfaces": "implements DataSeries<E>", "fields": [{"original_string": "private Period period;", "modifier": "private", "type": "Period", "declarator": "period", "var_name": "period"}, {"original_string": "private List<DataPointImpl> data = Collections.synchronizedList(new ArrayList<DataPointImpl>());", "modifier": "private", "type": "List<DataPointImpl>", "declarator": "data = Collections.synchronizedList(new ArrayList<DataPointImpl>())", "var_name": "data"}], "methods": [{"identifier": "DataSeriesImpl", "parameters": "(Period period)", "modifiers": "public", "return": "", "signature": " DataSeriesImpl(Period period)", "full_signature": "public  DataSeriesImpl(Period period)", "class_method_signature": "DataSeriesImpl.DataSeriesImpl(Period period)", "testcase": false, "constructor": true}, {"identifier": "getPeriod", "parameters": "()", "modifiers": "@Override public", "return": "Period", "signature": "Period getPeriod()", "full_signature": "@Override public Period getPeriod()", "class_method_signature": "DataSeriesImpl.getPeriod()", "testcase": false, "constructor": false}, {"identifier": "getStart", "parameters": "()", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime getStart()", "full_signature": "@Override public DateTime getStart()", "class_method_signature": "DataSeriesImpl.getStart()", "testcase": false, "constructor": false}, {"identifier": "getEnd", "parameters": "()", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime getEnd()", "full_signature": "@Override public DateTime getEnd()", "class_method_signature": "DataSeriesImpl.getEnd()", "testcase": false, "constructor": false}, {"identifier": "getFirst", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "E", "signature": "E getFirst()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public E getFirst()", "class_method_signature": "DataSeriesImpl.getFirst()", "testcase": false, "constructor": false}, {"identifier": "getLast", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "E", "signature": "E getLast()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public E getLast()", "class_method_signature": "DataSeriesImpl.getLast()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "DataSeriesImpl.size()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "E", "signature": "E get(int index)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public E get(int index)", "class_method_signature": "DataSeriesImpl.get(int index)", "testcase": false, "constructor": false}, {"identifier": "forDate", "parameters": "(DateTime date)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "E", "signature": "E forDate(DateTime date)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public E forDate(DateTime date)", "class_method_signature": "DataSeriesImpl.forDate(DateTime date)", "testcase": false, "constructor": false}, {"identifier": "closestIndexOf", "parameters": "(Time time, int idxLower, int idxUpper, boolean compareAtRes)", "modifiers": "@Override public", "return": "int", "signature": "int closestIndexOf(Time time, int idxLower, int idxUpper, boolean compareAtRes)", "full_signature": "@Override public int closestIndexOf(Time time, int idxLower, int idxUpper, boolean compareAtRes)", "class_method_signature": "DataSeriesImpl.closestIndexOf(Time time, int idxLower, int idxUpper, boolean compareAtRes)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(DateTime date, boolean exactOnly)", "modifiers": "@Override public", "return": "int", "signature": "int indexOf(DateTime date, boolean exactOnly)", "full_signature": "@Override public int indexOf(DateTime date, boolean exactOnly)", "class_method_signature": "DataSeriesImpl.indexOf(DateTime date, boolean exactOnly)", "testcase": false, "constructor": false}, {"identifier": "getInterpolatedIndex", "parameters": "(int size, long searchMillis, long leastMillis, long mostMillis, boolean isExact)", "modifiers": "private", "return": "int", "signature": "int getInterpolatedIndex(int size, long searchMillis, long leastMillis, long mostMillis, boolean isExact)", "full_signature": "private int getInterpolatedIndex(int size, long searchMillis, long leastMillis, long mostMillis, boolean isExact)", "class_method_signature": "DataSeriesImpl.getInterpolatedIndex(int size, long searchMillis, long leastMillis, long mostMillis, boolean isExact)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(DateTime date, int high, int low, boolean exactOnly)", "modifiers": "public", "return": "int", "signature": "int indexOf(DateTime date, int high, int low, boolean exactOnly)", "full_signature": "public int indexOf(DateTime date, int high, int low, boolean exactOnly)", "class_method_signature": "DataSeriesImpl.indexOf(DateTime date, int high, int low, boolean exactOnly)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Iterator<E>", "signature": "Iterator<E> iterator()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Iterator<E> iterator()", "class_method_signature": "DataSeriesImpl.iterator()", "testcase": false, "constructor": false}, {"identifier": "reverseIterator", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "Iterator<E>", "signature": "Iterator<E> reverseIterator()", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public Iterator<E> reverseIterator()", "class_method_signature": "DataSeriesImpl.reverseIterator()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "E[]", "signature": "E[] toArray()", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public E[] toArray()", "class_method_signature": "DataSeriesImpl.toArray()", "testcase": false, "constructor": false}, {"identifier": "insertData", "parameters": "(E e)", "modifiers": "public", "return": "void", "signature": "void insertData(E e)", "full_signature": "public void insertData(E e)", "class_method_signature": "DataSeriesImpl.insertData(E e)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(E e)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(E e)", "full_signature": "@Override public boolean add(E e)", "class_method_signature": "DataSeriesImpl.add(E e)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int index, E e)", "modifiers": "@Override public", "return": "void", "signature": "void add(int index, E e)", "full_signature": "@Override public void add(int index, E e)", "class_method_signature": "DataSeriesImpl.add(int index, E e)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, E e)", "modifiers": "@Override public", "return": "E", "signature": "E set(int index, E e)", "full_signature": "@Override public E set(int index, E e)", "class_method_signature": "DataSeriesImpl.set(int index, E e)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int index)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "E", "signature": "E remove(int index)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public E remove(int index)", "class_method_signature": "DataSeriesImpl.remove(int index)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "DataSeriesImpl.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override public boolean contains(Object o)", "class_method_signature": "DataSeriesImpl.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(T[] a)", "modifiers": "@Override public", "return": "T[]", "signature": "T[] toArray(T[] a)", "full_signature": "@Override public T[] toArray(T[] a)", "class_method_signature": "DataSeriesImpl.toArray(T[] a)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object o)", "full_signature": "@Override public boolean remove(Object o)", "class_method_signature": "DataSeriesImpl.remove(Object o)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsAll(Collection<?> c)", "full_signature": "@Override public boolean containsAll(Collection<?> c)", "class_method_signature": "DataSeriesImpl.containsAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Collection<? extends E> c)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "boolean", "signature": "boolean addAll(Collection<? extends E> c)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public boolean addAll(Collection<? extends E> c)", "class_method_signature": "DataSeriesImpl.addAll(Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(int index, Collection<? extends E> c)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "boolean", "signature": "boolean addAll(int index, Collection<? extends E> c)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public boolean addAll(int index, Collection<? extends E> c)", "class_method_signature": "DataSeriesImpl.addAll(int index, Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(Collection<?> c)", "full_signature": "@Override public boolean removeAll(Collection<?> c)", "class_method_signature": "DataSeriesImpl.removeAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean retainAll(Collection<?> c)", "full_signature": "@Override public boolean retainAll(Collection<?> c)", "class_method_signature": "DataSeriesImpl.retainAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "DataSeriesImpl.clear()", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(Object o)", "modifiers": "@Override public", "return": "int", "signature": "int indexOf(Object o)", "full_signature": "@Override public int indexOf(Object o)", "class_method_signature": "DataSeriesImpl.indexOf(Object o)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(Object o)", "modifiers": "@Override public", "return": "int", "signature": "int lastIndexOf(Object o)", "full_signature": "@Override public int lastIndexOf(Object o)", "class_method_signature": "DataSeriesImpl.lastIndexOf(Object o)", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "ListIterator<E>", "signature": "ListIterator<E> listIterator()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public ListIterator<E> listIterator()", "class_method_signature": "DataSeriesImpl.listIterator()", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "(int index)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "ListIterator<E>", "signature": "ListIterator<E> listIterator(int index)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public ListIterator<E> listIterator(int index)", "class_method_signature": "DataSeriesImpl.listIterator(int index)", "testcase": false, "constructor": false}, {"identifier": "subList", "parameters": "(int fromIndex, int toIndex)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "List<E>", "signature": "List<E> subList(int fromIndex, int toIndex)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public List<E> subList(int fromIndex, int toIndex)", "class_method_signature": "DataSeriesImpl.subList(int fromIndex, int toIndex)", "testcase": false, "constructor": false}], "file": "series/src/main/java/com/barchart/feed/series/DataSeriesImpl.java"}, "focal_method": {"identifier": "insertData", "parameters": "(E e)", "modifiers": "public", "return": "void", "body": "public void insertData(E e) {\n\t\tdata.add(indexOf(e.getDate(), false), (DataPointImpl) e);\n\t}", "signature": "void insertData(E e)", "full_signature": "public void insertData(E e)", "class_method_signature": "DataSeriesImpl.insertData(E e)", "testcase": false, "constructor": false, "invocations": ["add", "indexOf", "getDate"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}