{"test_class": {"identifier": "TrendActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QueryExecutor queryExecutor;", "modifier": "private", "type": "QueryExecutor", "declarator": "queryExecutor", "var_name": "queryExecutor"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private MockElasticsearchServer elasticsearchServer;", "modifier": "private", "type": "MockElasticsearchServer", "declarator": "elasticsearchServer", "var_name": "elasticsearchServer"}, {"original_string": "private HazelcastInstance hazelcastInstance;", "modifier": "private", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}, {"original_string": "private ElasticsearchQueryStore queryStore;", "modifier": "private", "type": "ElasticsearchQueryStore", "declarator": "queryStore", "var_name": "queryStore"}], "file": "real-time/foxtrot/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/TrendActionTest.java"}, "test_case": {"identifier": "testTrendActionWithFieldWithValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTrendActionWithFieldWithValues() throws QueryStoreException, JsonProcessingException {\n        TrendRequest trendRequest = new TrendRequest();\n        trendRequest.setTable(TestUtils.TEST_TABLE_NAME);\n        BetweenFilter betweenFilter = new BetweenFilter();\n        betweenFilter.setFrom(1L);\n        betweenFilter.setTo(System.currentTimeMillis());\n        betweenFilter.setTemporal(true);\n        betweenFilter.setField(\"_timestamp\");\n        trendRequest.setField(\"os\");\n        trendRequest.setFilters(Lists.<Filter>newArrayList(betweenFilter));\n        trendRequest.setValues(Arrays.asList(\"android\"));\n\n        TrendResponse expectedResponse = new TrendResponse();\n        Map<String, List<TrendResponse.Count>> trends = new HashMap<String, List<TrendResponse.Count>>();\n\n        List<TrendResponse.Count> counts = Lists.newArrayList();\n        counts.add(new TrendResponse.Count(1397606400000L, 6));\n        counts.add(new TrendResponse.Count(1398643200000L, 1));\n        trends.put(\"android\", counts);\n\n        expectedResponse.setTrends(trends);\n\n        TrendResponse actualResponse = TrendResponse.class.cast(queryExecutor.execute(trendRequest));\n        assertEquals(expectedResponse, actualResponse);\n    }", "signature": "void testTrendActionWithFieldWithValues()", "full_signature": "@Test public void testTrendActionWithFieldWithValues()", "class_method_signature": "TrendActionTest.testTrendActionWithFieldWithValues()", "testcase": true, "constructor": false, "invocations": ["setTable", "setFrom", "setTo", "currentTimeMillis", "setTemporal", "setField", "setField", "setFilters", "newArrayList", "setValues", "asList", "newArrayList", "add", "add", "put", "setTrends", "cast", "execute", "assertEquals"]}, "focal_class": {"identifier": "TrendAction", "superclass": "extends Action<TrendRequest>", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TrendAction.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TrendAction.class.getSimpleName())", "var_name": "logger"}], "methods": [{"identifier": "TrendAction", "parameters": "(TrendRequest parameter,\n                       TableMetadataManager tableMetadataManager,\n                       DataStore dataStore,\n                       QueryStore queryStore,\n                       ElasticsearchConnection connection,\n                       String cacheToken)", "modifiers": "public", "return": "", "signature": " TrendAction(TrendRequest parameter,\n                       TableMetadataManager tableMetadataManager,\n                       DataStore dataStore,\n                       QueryStore queryStore,\n                       ElasticsearchConnection connection,\n                       String cacheToken)", "full_signature": "public  TrendAction(TrendRequest parameter,\n                       TableMetadataManager tableMetadataManager,\n                       DataStore dataStore,\n                       QueryStore queryStore,\n                       ElasticsearchConnection connection,\n                       String cacheToken)", "class_method_signature": "TrendAction.TrendAction(TrendRequest parameter,\n                       TableMetadataManager tableMetadataManager,\n                       DataStore dataStore,\n                       QueryStore queryStore,\n                       ElasticsearchConnection connection,\n                       String cacheToken)", "testcase": false, "constructor": true}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override protected String getRequestCacheKey()", "class_method_signature": "TrendAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(TrendRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(TrendRequest parameter)", "full_signature": "@Override public ActionResponse execute(TrendRequest parameter)", "class_method_signature": "TrendAction.execute(TrendRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getDefaultTimeSpan", "parameters": "()", "modifiers": "@Override protected", "return": "Filter", "signature": "Filter getDefaultTimeSpan()", "full_signature": "@Override protected Filter getDefaultTimeSpan()", "class_method_signature": "TrendAction.getDefaultTimeSpan()", "testcase": false, "constructor": false}, {"identifier": "buildAggregation", "parameters": "(TrendRequest request)", "modifiers": "private", "return": "AbstractAggregationBuilder", "signature": "AbstractAggregationBuilder buildAggregation(TrendRequest request)", "full_signature": "private AbstractAggregationBuilder buildAggregation(TrendRequest request)", "class_method_signature": "TrendAction.buildAggregation(TrendRequest request)", "testcase": false, "constructor": false}, {"identifier": "buildResponse", "parameters": "(TrendRequest request, Aggregations aggregations)", "modifiers": "private", "return": "TrendResponse", "signature": "TrendResponse buildResponse(TrendRequest request, Aggregations aggregations)", "full_signature": "private TrendResponse buildResponse(TrendRequest request, Aggregations aggregations)", "class_method_signature": "TrendAction.buildResponse(TrendRequest request, Aggregations aggregations)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/TrendAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(TrendRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(TrendRequest parameter) throws QueryStoreException {\n        parameter.setTable(ElasticsearchUtils.getValidTableName(parameter.getTable()));\n        if (null == parameter.getFilters()) {\n            parameter.setFilters(Lists.<Filter>newArrayList(new AnyFilter(parameter.getTable())));\n        }\n        String field = parameter.getField();\n        if (parameter.getTable() == null) {\n            throw new QueryStoreException(QueryStoreException.ErrorCode.INVALID_REQUEST, \"Invalid table name\");\n        }\n        if (null == field || field.isEmpty()) {\n            throw new QueryStoreException(QueryStoreException.ErrorCode.INVALID_REQUEST, \"Invalid field name\");\n        }\n        if (null != parameter.getValues() && parameter.getValues().size() != 0) {\n            List<Object> values = (List) parameter.getValues();\n            Filter filter = new InFilter(field, values);\n            parameter.getFilters().add(filter);\n        }\n\n        try {\n            AbstractAggregationBuilder aggregationBuilder = buildAggregation(parameter);\n            SearchResponse searchResponse = getConnection().getClient()\n                    .prepareSearch(ElasticsearchUtils.getIndices(parameter.getTable(), parameter))\n                    .setQuery(new ElasticSearchQueryGenerator(FilterCombinerType.and).genFilter(parameter.getFilters()))\n                    .setSearchType(SearchType.COUNT)\n                    .addAggregation(aggregationBuilder)\n                    .execute()\n                    .get();\n\n            Aggregations aggregations = searchResponse.getAggregations();\n            if (aggregations != null) {\n                return buildResponse(parameter, aggregations);\n            } else {\n                logger.error(\"Null response for Trend. Request : \" + parameter.toString());\n                return new TrendResponse(Collections.<String, List<TrendResponse.Count>>emptyMap());\n            }\n        } catch (Exception e) {\n            logger.error(\"Error running trend action: \", e);\n            throw new QueryStoreException(QueryStoreException.ErrorCode.QUERY_EXECUTION_ERROR,\n                    \"Error running trend action.\", e);\n        }\n    }", "signature": "ActionResponse execute(TrendRequest parameter)", "full_signature": "@Override public ActionResponse execute(TrendRequest parameter)", "class_method_signature": "TrendAction.execute(TrendRequest parameter)", "testcase": false, "constructor": false, "invocations": ["setTable", "getValidTableName", "getTable", "getFilters", "setFilters", "newArrayList", "getTable", "getField", "getTable", "isEmpty", "getValues", "size", "getValues", "getValues", "add", "getFilters", "buildAggregation", "get", "execute", "addAggregation", "setSearchType", "setQuery", "prepareSearch", "getClient", "getConnection", "getIndices", "getTable", "genFilter", "getFilters", "getAggregations", "buildResponse", "error", "toString", "emptyMap", "error"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}