{"test_class": {"identifier": "JavaKeyStoreTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "client/wallet/src/test/java/hera/keystore/JavaKeyStoreTest.java"}, "test_case": {"identifier": "testLoadExistingOne", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLoadExistingOne() {\n    // when\n    final InputStream in = open(\"keystore.p12\");\n    final String ksPassword = \"password\";\n    final JavaKeyStore keyStore = new JavaKeyStore(\"PKCS12\", in, ksPassword.toCharArray());\n    final KeyAlias alias = new KeyAlias(\"keyalias\");\n    final String keyPassword = \"password\";\n    final Authentication authentication = Authentication.of(alias, keyPassword);\n\n    // then\n    final Signer signer = keyStore.load(authentication);\n    logger.info(\"Signer: {}\", signer);\n    assertNotNull(signer);\n  }", "signature": "void testLoadExistingOne()", "full_signature": "@Test public void testLoadExistingOne()", "class_method_signature": "JavaKeyStoreTest.testLoadExistingOne()", "testcase": true, "constructor": false, "invocations": ["open", "toCharArray", "of", "load", "info", "assertNotNull"]}, "focal_class": {"identifier": "JavaKeyStore", "superclass": "extends AbstractKeyStore", "interfaces": "implements KeyStore", "fields": [{"original_string": "protected final Object lock = new Object();", "modifier": "protected final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "protected final java.security.Provider bcProvider = new BouncyCastleProvider();", "modifier": "protected final", "type": "java.security.Provider", "declarator": "bcProvider = new BouncyCastleProvider()", "var_name": "bcProvider"}, {"original_string": "protected final java.security.KeyStore delegate;", "modifier": "protected final", "type": "java.security.KeyStore", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "JavaKeyStore", "parameters": "(final java.security.KeyStore delegate)", "modifiers": "public", "return": "", "signature": " JavaKeyStore(final java.security.KeyStore delegate)", "full_signature": "public  JavaKeyStore(final java.security.KeyStore delegate)", "class_method_signature": "JavaKeyStore.JavaKeyStore(final java.security.KeyStore delegate)", "testcase": false, "constructor": true}, {"identifier": "JavaKeyStore", "parameters": "(final String type)", "modifiers": "@Deprecated public", "return": "", "signature": " JavaKeyStore(final String type)", "full_signature": "@Deprecated public  JavaKeyStore(final String type)", "class_method_signature": "JavaKeyStore.JavaKeyStore(final String type)", "testcase": false, "constructor": true}, {"identifier": "JavaKeyStore", "parameters": "(final String type, final java.security.Provider provider)", "modifiers": "@Deprecated public", "return": "", "signature": " JavaKeyStore(final String type, final java.security.Provider provider)", "full_signature": "@Deprecated public  JavaKeyStore(final String type, final java.security.Provider provider)", "class_method_signature": "JavaKeyStore.JavaKeyStore(final String type, final java.security.Provider provider)", "testcase": false, "constructor": true}, {"identifier": "JavaKeyStore", "parameters": "(final String type, final InputStream inputStream, final char[] password)", "modifiers": "@Deprecated public", "return": "", "signature": " JavaKeyStore(final String type, final InputStream inputStream, final char[] password)", "full_signature": "@Deprecated public  JavaKeyStore(final String type, final InputStream inputStream, final char[] password)", "class_method_signature": "JavaKeyStore.JavaKeyStore(final String type, final InputStream inputStream, final char[] password)", "testcase": false, "constructor": true}, {"identifier": "JavaKeyStore", "parameters": "(final String type, final java.security.Provider provider,\n      final InputStream inputStream, final char[] password)", "modifiers": "public", "return": "", "signature": " JavaKeyStore(final String type, final java.security.Provider provider,\n      final InputStream inputStream, final char[] password)", "full_signature": "public  JavaKeyStore(final String type, final java.security.Provider provider,\n      final InputStream inputStream, final char[] password)", "class_method_signature": "JavaKeyStore.JavaKeyStore(final String type, final java.security.Provider provider,\n      final InputStream inputStream, final char[] password)", "testcase": false, "constructor": true}, {"identifier": "save", "parameters": "(final Authentication authentication, final AergoKey key)", "modifiers": "@Override public", "return": "void", "signature": "void save(final Authentication authentication, final AergoKey key)", "full_signature": "@Override public void save(final Authentication authentication, final AergoKey key)", "class_method_signature": "JavaKeyStore.save(final Authentication authentication, final AergoKey key)", "testcase": false, "constructor": false}, {"identifier": "generateCertificate", "parameters": "(final AergoKey key)", "modifiers": "protected", "return": "Certificate", "signature": "Certificate generateCertificate(final AergoKey key)", "full_signature": "protected Certificate generateCertificate(final AergoKey key)", "class_method_signature": "JavaKeyStore.generateCertificate(final AergoKey key)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(final Authentication authentication)", "modifiers": "@Override public", "return": "Signer", "signature": "Signer load(final Authentication authentication)", "full_signature": "@Override public Signer load(final Authentication authentication)", "class_method_signature": "JavaKeyStore.load(final Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final Authentication authentication)", "modifiers": "@Override public", "return": "void", "signature": "void remove(final Authentication authentication)", "full_signature": "@Override public void remove(final Authentication authentication)", "class_method_signature": "JavaKeyStore.remove(final Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "(final Authentication authentication, final String password)", "modifiers": "@Override public", "return": "EncryptedPrivateKey", "signature": "EncryptedPrivateKey export(final Authentication authentication, final String password)", "full_signature": "@Override public EncryptedPrivateKey export(final Authentication authentication, final String password)", "class_method_signature": "JavaKeyStore.export(final Authentication authentication, final String password)", "testcase": false, "constructor": false}, {"identifier": "listIdentities", "parameters": "()", "modifiers": "@Override public", "return": "List<Identity>", "signature": "List<Identity> listIdentities()", "full_signature": "@Override public List<Identity> listIdentities()", "class_method_signature": "JavaKeyStore.listIdentities()", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(final String path, final char[] password)", "modifiers": "@Override public", "return": "void", "signature": "void store(final String path, final char[] password)", "full_signature": "@Override public void store(final String path, final char[] password)", "class_method_signature": "JavaKeyStore.store(final String path, final char[] password)", "testcase": false, "constructor": false}, {"identifier": "isExists", "parameters": "(final Authentication authentication)", "modifiers": "protected", "return": "boolean", "signature": "boolean isExists(final Authentication authentication)", "full_signature": "protected boolean isExists(final Authentication authentication)", "class_method_signature": "JavaKeyStore.isExists(final Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "loadRawKey", "parameters": "(final Authentication authentication)", "modifiers": "protected", "return": "java.security.Key", "signature": "java.security.Key loadRawKey(final Authentication authentication)", "full_signature": "protected java.security.Key loadRawKey(final Authentication authentication)", "class_method_signature": "JavaKeyStore.loadRawKey(final Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "convertPrivateKey", "parameters": "(final java.security.Key privateKey)", "modifiers": "protected", "return": "AergoKey", "signature": "AergoKey convertPrivateKey(final java.security.Key privateKey)", "full_signature": "protected AergoKey convertPrivateKey(final java.security.Key privateKey)", "class_method_signature": "JavaKeyStore.convertPrivateKey(final java.security.Key privateKey)", "testcase": false, "constructor": false}], "file": "client/wallet/src/main/java/hera/keystore/JavaKeyStore.java"}, "focal_method": {"identifier": "load", "parameters": "(final Authentication authentication)", "modifiers": "@Override public", "return": "Signer", "body": "@Override\n  public Signer load(final Authentication authentication) {\n    try {\n      assertNotNull(authentication, \"Authentication must not null\");\n      logger.debug(\"Load with authentication: {}\", authentication);\n\n      java.security.Key rawKey;\n      synchronized (lock) {\n        if (!isExists(authentication)) {\n          throw new InvalidAuthenticationException(\"Invalid authentication\");\n        }\n\n        rawKey = loadRawKey(authentication);\n      }\n\n      final AergoKey aergoKey = convertPrivateKey(rawKey);\n      logger.trace(\"Loaded key: {}\", aergoKey);\n      return aergoKey;\n    } catch (Exception e) {\n      throw converter.convert(e);\n    }\n  }", "signature": "Signer load(final Authentication authentication)", "full_signature": "@Override public Signer load(final Authentication authentication)", "class_method_signature": "JavaKeyStore.load(final Authentication authentication)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "debug", "isExists", "loadRawKey", "convertPrivateKey", "trace", "convert"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}