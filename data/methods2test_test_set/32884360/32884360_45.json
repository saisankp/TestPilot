{"test_class": {"identifier": "AISBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TypesRegistry typesRegistry = TestTypesRegistry.MCOMPAT;", "modifier": "private final", "type": "TypesRegistry", "declarator": "typesRegistry = TestTypesRegistry.MCOMPAT", "var_name": "typesRegistry"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/ais/model/AISBuilderTest.java"}, "test_case": {"identifier": "testMoveTreeToEmptyGroup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMoveTreeToEmptyGroup()\n    {\n        AISBuilder builder = new AISBuilder();\n        // Source group tables: a(b(c, d))\n        builder.table(\"s\", \"a\");\n        builder.column(\"s\", \"a\", \"aid\", 0, type(\"MCOMPAT\", \"int\", false), false, null, null);\n        builder.pk(\"s\", \"a\");\n        builder.indexColumn(\"s\", \"a\", Index.PRIMARY, \"aid\", 0, true, null);\n        builder.table(\"s\", \"b\");\n        builder.column(\"s\", \"b\", \"bid\", 0, type(\"MCOMPAT\", \"int\", false), false, null, null);\n        builder.column(\"s\", \"b\", \"aid\", 1, type(\"MCOMPAT\", \"int\", false), false, null, null);\n        builder.pk(\"s\", \"b\");\n        builder.indexColumn(\"s\", \"b\", Index.PRIMARY, \"bid\", 0, true, null);\n        builder.table(\"s\", \"c\");\n        builder.column(\"s\", \"c\", \"cid\", 0, type(\"MCOMPAT\", \"int\", false), false, null, null);\n        builder.column(\"s\", \"c\", \"bid\", 1, type(\"MCOMPAT\", \"int\", false), false, null, null);\n        builder.table(\"s\", \"d\");\n        builder.column(\"s\", \"d\", \"did\", 0, type(\"MCOMPAT\", \"int\", false), false, null, null);\n        builder.column(\"s\", \"d\", \"bid\", 1, type(\"MCOMPAT\", \"int\", false), false, null, null);\n        builder.joinTables(\"ab\", \"s\", \"a\", \"s\", \"b\");\n        builder.joinColumns(\"ab\", \"s\", \"a\", \"aid\", \"s\", \"b\", \"aid\");\n        builder.joinTables(\"bc\", \"s\", \"b\", \"s\", \"c\");\n        builder.joinColumns(\"bc\", \"s\", \"b\", \"bid\", \"s\", \"c\", \"bid\");\n        builder.joinTables(\"bd\", \"s\", \"b\", \"s\", \"d\");\n        builder.joinColumns(\"bd\", \"s\", \"b\", \"bid\", \"s\", \"d\", \"bid\");\n        // Source and target groups\n        builder.basicSchemaIsComplete();\n        builder.createGroup(\"source\", \"g\");\n        builder.addJoinToGroup(\"source\", \"ab\", 0);\n        builder.addJoinToGroup(\"source\", \"bc\", 0);\n        builder.addJoinToGroup(\"source\", \"bd\", 0);\n        builder.createGroup(\"target\", \"g\");\n\n        AkibanInformationSchema ais = builder.akibanInformationSchema();\n        Assert.assertEquals(4, ais.getTables().size());\n        Assert.assertEquals(2, ais.getGroups().size());\n        Assert.assertEquals(3, ais.getJoins().size());\n        // Move b to target\n        builder.moveTreeToEmptyGroup(\"s\", \"b\", \"target\");\n        builder.groupingIsComplete();\n\n        Table a = ais.getTable(\"s\", \"a\");\n        List<Join> aChildren = a.getChildJoins();\n        Assert.assertTrue(aChildren.isEmpty());\n        Table b = ais.getTable(\"s\", \"b\");\n        for (Join join : b.getChildJoins()) {\n            if (join.getChild() == ais.getTable(\"s\", \"c\") ||\n                join.getChild() == ais.getTable(\"s\", \"d\")) {\n            } else {\n                Assert.fail();\n            }\n        }\n\n        Assert.assertEquals(0, \n                builder.akibanInformationSchema().validate(AISValidations.BASIC_VALIDATIONS).failures().size());\n    }", "signature": "void testMoveTreeToEmptyGroup()", "full_signature": "@Test public void testMoveTreeToEmptyGroup()", "class_method_signature": "AISBuilderTest.testMoveTreeToEmptyGroup()", "testcase": true, "constructor": false, "invocations": ["table", "column", "type", "pk", "indexColumn", "table", "column", "type", "column", "type", "pk", "indexColumn", "table", "column", "type", "column", "type", "table", "column", "type", "column", "type", "joinTables", "joinColumns", "joinTables", "joinColumns", "joinTables", "joinColumns", "basicSchemaIsComplete", "createGroup", "addJoinToGroup", "addJoinToGroup", "addJoinToGroup", "createGroup", "akibanInformationSchema", "assertEquals", "size", "getTables", "assertEquals", "size", "getGroups", "assertEquals", "size", "getJoins", "moveTreeToEmptyGroup", "groupingIsComplete", "getTable", "getChildJoins", "assertTrue", "isEmpty", "getTable", "getChildJoins", "getChild", "getTable", "getChild", "getTable", "fail", "assertEquals", "size", "failures", "validate", "akibanInformationSchema"]}, "focal_class": {"identifier": "AISBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AISBuilder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AISBuilder.class)", "var_name": "LOG"}, {"original_string": "public final static int MAX_COLUMN_NAME_LENGTH = 64;", "modifier": "public final static", "type": "int", "declarator": "MAX_COLUMN_NAME_LENGTH = 64", "var_name": "MAX_COLUMN_NAME_LENGTH"}, {"original_string": "private final AkibanInformationSchema ais;", "modifier": "private final", "type": "AkibanInformationSchema", "declarator": "ais", "var_name": "ais"}, {"original_string": "private final Map<String, ForwardTableReference> forwardReferences = // join name\n                                                                         // ->\n                                                                         // ForwardTableReference\n        new LinkedHashMap<>();", "modifier": "private final", "type": "Map<String, ForwardTableReference>", "declarator": "forwardReferences = // join name\n                                                                         // ->\n                                                                         // ForwardTableReference\n        new LinkedHashMap<>()", "var_name": "forwardReferences"}, {"original_string": "private final NameGenerator nameGenerator;", "modifier": "private final", "type": "NameGenerator", "declarator": "nameGenerator", "var_name": "nameGenerator"}, {"original_string": "private final StorageFormatRegistry storageFormatRegistry;", "modifier": "private final", "type": "StorageFormatRegistry", "declarator": "storageFormatRegistry", "var_name": "storageFormatRegistry"}], "methods": [{"identifier": "AISBuilder", "parameters": "()", "modifiers": "public", "return": "", "signature": " AISBuilder()", "full_signature": "public  AISBuilder()", "class_method_signature": "AISBuilder.AISBuilder()", "testcase": false, "constructor": true}, {"identifier": "AISBuilder", "parameters": "(AkibanInformationSchema ais)", "modifiers": "public", "return": "", "signature": " AISBuilder(AkibanInformationSchema ais)", "full_signature": "public  AISBuilder(AkibanInformationSchema ais)", "class_method_signature": "AISBuilder.AISBuilder(AkibanInformationSchema ais)", "testcase": false, "constructor": true}, {"identifier": "AISBuilder", "parameters": "(AkibanInformationSchema ais, NameGenerator nameGenerator,\n                      StorageFormatRegistry storageFormatRegistry)", "modifiers": "public", "return": "", "signature": " AISBuilder(AkibanInformationSchema ais, NameGenerator nameGenerator,\n                      StorageFormatRegistry storageFormatRegistry)", "full_signature": "public  AISBuilder(AkibanInformationSchema ais, NameGenerator nameGenerator,\n                      StorageFormatRegistry storageFormatRegistry)", "class_method_signature": "AISBuilder.AISBuilder(AkibanInformationSchema ais, NameGenerator nameGenerator,\n                      StorageFormatRegistry storageFormatRegistry)", "testcase": false, "constructor": true}, {"identifier": "getNameGenerator", "parameters": "()", "modifiers": "public", "return": "NameGenerator", "signature": "NameGenerator getNameGenerator()", "full_signature": "public NameGenerator getNameGenerator()", "class_method_signature": "AISBuilder.getNameGenerator()", "testcase": false, "constructor": false}, {"identifier": "sequence", "parameters": "(String schemaName, String sequenceName,\n                             long start, long increment, long minValue, long maxValue, boolean cycle)", "modifiers": "public", "return": "Sequence", "signature": "Sequence sequence(String schemaName, String sequenceName,\n                             long start, long increment, long minValue, long maxValue, boolean cycle)", "full_signature": "public Sequence sequence(String schemaName, String sequenceName,\n                             long start, long increment, long minValue, long maxValue, boolean cycle)", "class_method_signature": "AISBuilder.sequence(String schemaName, String sequenceName,\n                             long start, long increment, long minValue, long maxValue, boolean cycle)", "testcase": false, "constructor": false}, {"identifier": "table", "parameters": "(String schemaName, String tableName)", "modifiers": "public", "return": "Table", "signature": "Table table(String schemaName, String tableName)", "full_signature": "public Table table(String schemaName, String tableName)", "class_method_signature": "AISBuilder.table(String schemaName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "view", "parameters": "(String schemaName, String tableName,\n                     String definition, Properties definitionProperties,\n                     Map<TableName,Collection<String>> tableColumnReferences)", "modifiers": "public", "return": "void", "signature": "void view(String schemaName, String tableName,\n                     String definition, Properties definitionProperties,\n                     Map<TableName,Collection<String>> tableColumnReferences)", "full_signature": "public void view(String schemaName, String tableName,\n                     String definition, Properties definitionProperties,\n                     Map<TableName,Collection<String>> tableColumnReferences)", "class_method_signature": "AISBuilder.view(String schemaName, String tableName,\n                     String definition, Properties definitionProperties,\n                     Map<TableName,Collection<String>> tableColumnReferences)", "testcase": false, "constructor": false}, {"identifier": "column", "parameters": "(String schemaName, String tableName, String columnName,\n                Integer position, TInstance type, Boolean autoIncrement,\n                String defaultValue, String defaultFunction)", "modifiers": "public", "return": "Column", "signature": "Column column(String schemaName, String tableName, String columnName,\n                Integer position, TInstance type, Boolean autoIncrement,\n                String defaultValue, String defaultFunction)", "full_signature": "public Column column(String schemaName, String tableName, String columnName,\n                Integer position, TInstance type, Boolean autoIncrement,\n                String defaultValue, String defaultFunction)", "class_method_signature": "AISBuilder.column(String schemaName, String tableName, String columnName,\n                Integer position, TInstance type, Boolean autoIncrement,\n                String defaultValue, String defaultFunction)", "testcase": false, "constructor": false}, {"identifier": "column", "parameters": "(Columnar table, String columnName,\n                          Integer position, TInstance type, Boolean autoIncrement,\n                          String defaultValue, String defaultFunction)", "modifiers": "private", "return": "Column", "signature": "Column column(Columnar table, String columnName,\n                          Integer position, TInstance type, Boolean autoIncrement,\n                          String defaultValue, String defaultFunction)", "full_signature": "private Column column(Columnar table, String columnName,\n                          Integer position, TInstance type, Boolean autoIncrement,\n                          String defaultValue, String defaultFunction)", "class_method_signature": "AISBuilder.column(Columnar table, String columnName,\n                          Integer position, TInstance type, Boolean autoIncrement,\n                          String defaultValue, String defaultFunction)", "testcase": false, "constructor": false}, {"identifier": "columnAsIdentity", "parameters": "(String schemaName, String tableName, String columnName,\n                                 long start, long increment, boolean defaultIdentity)", "modifiers": "public", "return": "void", "signature": "void columnAsIdentity(String schemaName, String tableName, String columnName,\n                                 long start, long increment, boolean defaultIdentity)", "full_signature": "public void columnAsIdentity(String schemaName, String tableName, String columnName,\n                                 long start, long increment, boolean defaultIdentity)", "class_method_signature": "AISBuilder.columnAsIdentity(String schemaName, String tableName, String columnName,\n                                 long start, long increment, boolean defaultIdentity)", "testcase": false, "constructor": false}, {"identifier": "columnAsIdentity", "parameters": "(String schemaName, String tableName, String columnName,\n            String sequenceName, Boolean defaultIdentity)", "modifiers": "public", "return": "void", "signature": "void columnAsIdentity(String schemaName, String tableName, String columnName,\n            String sequenceName, Boolean defaultIdentity)", "full_signature": "public void columnAsIdentity(String schemaName, String tableName, String columnName,\n            String sequenceName, Boolean defaultIdentity)", "class_method_signature": "AISBuilder.columnAsIdentity(String schemaName, String tableName, String columnName,\n            String sequenceName, Boolean defaultIdentity)", "testcase": false, "constructor": false}, {"identifier": "pk", "parameters": "(String schemaName, String tableName)", "modifiers": "public", "return": "void", "signature": "void pk(String schemaName, String tableName)", "full_signature": "public void pk(String schemaName, String tableName)", "class_method_signature": "AISBuilder.pk(String schemaName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "pkConstraint", "parameters": "(String schemaName, String tableName, TableName constraintName)", "modifiers": "public", "return": "void", "signature": "void pkConstraint(String schemaName, String tableName, TableName constraintName)", "full_signature": "public void pkConstraint(String schemaName, String tableName, TableName constraintName)", "class_method_signature": "AISBuilder.pkConstraint(String schemaName, String tableName, TableName constraintName)", "testcase": false, "constructor": false}, {"identifier": "unique", "parameters": "(String schemaName, String tableName, String indexName)", "modifiers": "public", "return": "void", "signature": "void unique(String schemaName, String tableName, String indexName)", "full_signature": "public void unique(String schemaName, String tableName, String indexName)", "class_method_signature": "AISBuilder.unique(String schemaName, String tableName, String indexName)", "testcase": false, "constructor": false}, {"identifier": "uniqueConstraint", "parameters": "(String schemaName, String tableName, String indexName, TableName constraintName)", "modifiers": "public", "return": "void", "signature": "void uniqueConstraint(String schemaName, String tableName, String indexName, TableName constraintName)", "full_signature": "public void uniqueConstraint(String schemaName, String tableName, String indexName, TableName constraintName)", "class_method_signature": "AISBuilder.uniqueConstraint(String schemaName, String tableName, String indexName, TableName constraintName)", "testcase": false, "constructor": false}, {"identifier": "index", "parameters": "(String schemaName, String tableName, String indexName)", "modifiers": "public", "return": "void", "signature": "void index(String schemaName, String tableName, String indexName)", "full_signature": "public void index(String schemaName, String tableName, String indexName)", "class_method_signature": "AISBuilder.index(String schemaName, String tableName, String indexName)", "testcase": false, "constructor": false}, {"identifier": "index", "parameters": "(String schemaName, String tableName, String indexName, Boolean unique, Boolean isPrimaryKey, TableName constraintName)", "modifiers": "public", "return": "void", "signature": "void index(String schemaName, String tableName, String indexName, Boolean unique, Boolean isPrimaryKey, TableName constraintName)", "full_signature": "public void index(String schemaName, String tableName, String indexName, Boolean unique, Boolean isPrimaryKey, TableName constraintName)", "class_method_signature": "AISBuilder.index(String schemaName, String tableName, String indexName, Boolean unique, Boolean isPrimaryKey, TableName constraintName)", "testcase": false, "constructor": false}, {"identifier": "index", "parameters": "(String schemaName, String tableName, String indexName, Boolean unique, Boolean isPrimaryKey, TableName constraintName, StorageDescription copyStorage)", "modifiers": "public", "return": "void", "signature": "void index(String schemaName, String tableName, String indexName, Boolean unique, Boolean isPrimaryKey, TableName constraintName, StorageDescription copyStorage)", "full_signature": "public void index(String schemaName, String tableName, String indexName, Boolean unique, Boolean isPrimaryKey, TableName constraintName, StorageDescription copyStorage)", "class_method_signature": "AISBuilder.index(String schemaName, String tableName, String indexName, Boolean unique, Boolean isPrimaryKey, TableName constraintName, StorageDescription copyStorage)", "testcase": false, "constructor": false}, {"identifier": "groupIndex", "parameters": "(String groupName, String indexName, Boolean unique, Index.JoinType joinType)", "modifiers": "public", "return": "void", "signature": "void groupIndex(String groupName, String indexName, Boolean unique, Index.JoinType joinType)", "full_signature": "public void groupIndex(String groupName, String indexName, Boolean unique, Index.JoinType joinType)", "class_method_signature": "AISBuilder.groupIndex(String groupName, String indexName, Boolean unique, Index.JoinType joinType)", "testcase": false, "constructor": false}, {"identifier": "groupIndex", "parameters": "(TableName groupName, String indexName, Boolean unique, Index.JoinType joinType)", "modifiers": "public", "return": "void", "signature": "void groupIndex(TableName groupName, String indexName, Boolean unique, Index.JoinType joinType)", "full_signature": "public void groupIndex(TableName groupName, String indexName, Boolean unique, Index.JoinType joinType)", "class_method_signature": "AISBuilder.groupIndex(TableName groupName, String indexName, Boolean unique, Index.JoinType joinType)", "testcase": false, "constructor": false}, {"identifier": "indexColumn", "parameters": "(String schemaName, String tableName,\n            String indexName, String columnName, Integer position,\n            Boolean ascending, Integer indexedLength)", "modifiers": "public", "return": "void", "signature": "void indexColumn(String schemaName, String tableName,\n            String indexName, String columnName, Integer position,\n            Boolean ascending, Integer indexedLength)", "full_signature": "public void indexColumn(String schemaName, String tableName,\n            String indexName, String columnName, Integer position,\n            Boolean ascending, Integer indexedLength)", "class_method_signature": "AISBuilder.indexColumn(String schemaName, String tableName,\n            String indexName, String columnName, Integer position,\n            Boolean ascending, Integer indexedLength)", "testcase": false, "constructor": false}, {"identifier": "groupIndexColumn", "parameters": "(String groupName, String indexName, String schemaName, String tableName,\n                                 String columnName, Integer position)", "modifiers": "public", "return": "void", "signature": "void groupIndexColumn(String groupName, String indexName, String schemaName, String tableName,\n                                 String columnName, Integer position)", "full_signature": "public void groupIndexColumn(String groupName, String indexName, String schemaName, String tableName,\n                                 String columnName, Integer position)", "class_method_signature": "AISBuilder.groupIndexColumn(String groupName, String indexName, String schemaName, String tableName,\n                                 String columnName, Integer position)", "testcase": false, "constructor": false}, {"identifier": "groupIndexColumn", "parameters": "(TableName groupName, String indexName, String schemaName, String tableName,\n                                 String columnName, Integer position)", "modifiers": "public", "return": "void", "signature": "void groupIndexColumn(TableName groupName, String indexName, String schemaName, String tableName,\n                                 String columnName, Integer position)", "full_signature": "public void groupIndexColumn(TableName groupName, String indexName, String schemaName, String tableName,\n                                 String columnName, Integer position)", "class_method_signature": "AISBuilder.groupIndexColumn(TableName groupName, String indexName, String schemaName, String tableName,\n                                 String columnName, Integer position)", "testcase": false, "constructor": false}, {"identifier": "fullTextIndex", "parameters": "(TableName tableName, String indexName)", "modifiers": "public", "return": "void", "signature": "void fullTextIndex(TableName tableName, String indexName)", "full_signature": "public void fullTextIndex(TableName tableName, String indexName)", "class_method_signature": "AISBuilder.fullTextIndex(TableName tableName, String indexName)", "testcase": false, "constructor": false}, {"identifier": "fullTextIndexColumn", "parameters": "(TableName indexedTableName, String indexName, \n                                    String schemaName, String tableName, String columnName, Integer position)", "modifiers": "public", "return": "void", "signature": "void fullTextIndexColumn(TableName indexedTableName, String indexName, \n                                    String schemaName, String tableName, String columnName, Integer position)", "full_signature": "public void fullTextIndexColumn(TableName indexedTableName, String indexName, \n                                    String schemaName, String tableName, String columnName, Integer position)", "class_method_signature": "AISBuilder.fullTextIndexColumn(TableName indexedTableName, String indexName, \n                                    String schemaName, String tableName, String columnName, Integer position)", "testcase": false, "constructor": false}, {"identifier": "joinTables", "parameters": "(String joinName, String parentSchemaName,\n            String parentTableName, String childSchemaName,\n            String childTableName)", "modifiers": "public", "return": "void", "signature": "void joinTables(String joinName, String parentSchemaName,\n            String parentTableName, String childSchemaName,\n            String childTableName)", "full_signature": "public void joinTables(String joinName, String parentSchemaName,\n            String parentTableName, String childSchemaName,\n            String childTableName)", "class_method_signature": "AISBuilder.joinTables(String joinName, String parentSchemaName,\n            String parentTableName, String childSchemaName,\n            String childTableName)", "testcase": false, "constructor": false}, {"identifier": "joinColumns", "parameters": "(String joinName, String parentSchemaName,\n            String parentTableName, String parentColumnName,\n            String childSchemaName, String childTableName,\n            String childColumnName)", "modifiers": "public", "return": "void", "signature": "void joinColumns(String joinName, String parentSchemaName,\n            String parentTableName, String parentColumnName,\n            String childSchemaName, String childTableName,\n            String childColumnName)", "full_signature": "public void joinColumns(String joinName, String parentSchemaName,\n            String parentTableName, String parentColumnName,\n            String childSchemaName, String childTableName,\n            String childColumnName)", "class_method_signature": "AISBuilder.joinColumns(String joinName, String parentSchemaName,\n            String parentTableName, String parentColumnName,\n            String childSchemaName, String childTableName,\n            String childColumnName)", "testcase": false, "constructor": false}, {"identifier": "routine", "parameters": "(String schemaName, String routineName,\n                        String language, Routine.CallingConvention callingConvention)", "modifiers": "public", "return": "void", "signature": "void routine(String schemaName, String routineName,\n                        String language, Routine.CallingConvention callingConvention)", "full_signature": "public void routine(String schemaName, String routineName,\n                        String language, Routine.CallingConvention callingConvention)", "class_method_signature": "AISBuilder.routine(String schemaName, String routineName,\n                        String language, Routine.CallingConvention callingConvention)", "testcase": false, "constructor": false}, {"identifier": "parameter", "parameters": "(String schemaName, String routineName, \n                          String parameterName, Parameter.Direction direction, \n                          TInstance type)", "modifiers": "public", "return": "void", "signature": "void parameter(String schemaName, String routineName, \n                          String parameterName, Parameter.Direction direction, \n                          TInstance type)", "full_signature": "public void parameter(String schemaName, String routineName, \n                          String parameterName, Parameter.Direction direction, \n                          TInstance type)", "class_method_signature": "AISBuilder.parameter(String schemaName, String routineName, \n                          String parameterName, Parameter.Direction direction, \n                          TInstance type)", "testcase": false, "constructor": false}, {"identifier": "routineExternalName", "parameters": "(String schemaName, String routineName,\n                                    String jarSchema, String jarName, \n                                    String className, String methodName)", "modifiers": "public", "return": "void", "signature": "void routineExternalName(String schemaName, String routineName,\n                                    String jarSchema, String jarName, \n                                    String className, String methodName)", "full_signature": "public void routineExternalName(String schemaName, String routineName,\n                                    String jarSchema, String jarName, \n                                    String className, String methodName)", "class_method_signature": "AISBuilder.routineExternalName(String schemaName, String routineName,\n                                    String jarSchema, String jarName, \n                                    String className, String methodName)", "testcase": false, "constructor": false}, {"identifier": "routineDefinition", "parameters": "(String schemaName, String routineName,\n                                  String definition)", "modifiers": "public", "return": "void", "signature": "void routineDefinition(String schemaName, String routineName,\n                                  String definition)", "full_signature": "public void routineDefinition(String schemaName, String routineName,\n                                  String definition)", "class_method_signature": "AISBuilder.routineDefinition(String schemaName, String routineName,\n                                  String definition)", "testcase": false, "constructor": false}, {"identifier": "routineSQLAllowed", "parameters": "(String schemaName, String routineName,\n                                  Routine.SQLAllowed sqlAllowed)", "modifiers": "public", "return": "void", "signature": "void routineSQLAllowed(String schemaName, String routineName,\n                                  Routine.SQLAllowed sqlAllowed)", "full_signature": "public void routineSQLAllowed(String schemaName, String routineName,\n                                  Routine.SQLAllowed sqlAllowed)", "class_method_signature": "AISBuilder.routineSQLAllowed(String schemaName, String routineName,\n                                  Routine.SQLAllowed sqlAllowed)", "testcase": false, "constructor": false}, {"identifier": "routineDynamicResultSets", "parameters": "(String schemaName, String routineName,\n                                         int dynamicResultSets)", "modifiers": "public", "return": "void", "signature": "void routineDynamicResultSets(String schemaName, String routineName,\n                                         int dynamicResultSets)", "full_signature": "public void routineDynamicResultSets(String schemaName, String routineName,\n                                         int dynamicResultSets)", "class_method_signature": "AISBuilder.routineDynamicResultSets(String schemaName, String routineName,\n                                         int dynamicResultSets)", "testcase": false, "constructor": false}, {"identifier": "routineDeterministic", "parameters": "(String schemaName, String routineName,\n                                     boolean deterministic)", "modifiers": "public", "return": "void", "signature": "void routineDeterministic(String schemaName, String routineName,\n                                     boolean deterministic)", "full_signature": "public void routineDeterministic(String schemaName, String routineName,\n                                     boolean deterministic)", "class_method_signature": "AISBuilder.routineDeterministic(String schemaName, String routineName,\n                                     boolean deterministic)", "testcase": false, "constructor": false}, {"identifier": "routineCalledOnNullInput", "parameters": "(String schemaName, String routineName,\n                                         boolean calledOnNullInput)", "modifiers": "public", "return": "void", "signature": "void routineCalledOnNullInput(String schemaName, String routineName,\n                                         boolean calledOnNullInput)", "full_signature": "public void routineCalledOnNullInput(String schemaName, String routineName,\n                                         boolean calledOnNullInput)", "class_method_signature": "AISBuilder.routineCalledOnNullInput(String schemaName, String routineName,\n                                         boolean calledOnNullInput)", "testcase": false, "constructor": false}, {"identifier": "sqljJar", "parameters": "(String schemaName, String jarName, URL url)", "modifiers": "public", "return": "void", "signature": "void sqljJar(String schemaName, String jarName, URL url)", "full_signature": "public void sqljJar(String schemaName, String jarName, URL url)", "class_method_signature": "AISBuilder.sqljJar(String schemaName, String jarName, URL url)", "testcase": false, "constructor": false}, {"identifier": "basicSchemaIsComplete", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void basicSchemaIsComplete()", "full_signature": "public void basicSchemaIsComplete()", "class_method_signature": "AISBuilder.basicSchemaIsComplete()", "testcase": false, "constructor": false}, {"identifier": "createGroup", "parameters": "(String groupName, String groupSchemaName)", "modifiers": "public", "return": "void", "signature": "void createGroup(String groupName, String groupSchemaName)", "full_signature": "public void createGroup(String groupName, String groupSchemaName)", "class_method_signature": "AISBuilder.createGroup(String groupName, String groupSchemaName)", "testcase": false, "constructor": false}, {"identifier": "createGroup", "parameters": "(String groupName, String groupSchemaName,\n                            StorageDescription copyStorage)", "modifiers": "public", "return": "void", "signature": "void createGroup(String groupName, String groupSchemaName,\n                            StorageDescription copyStorage)", "full_signature": "public void createGroup(String groupName, String groupSchemaName,\n                            StorageDescription copyStorage)", "class_method_signature": "AISBuilder.createGroup(String groupName, String groupSchemaName,\n                            StorageDescription copyStorage)", "testcase": false, "constructor": false}, {"identifier": "deleteGroup", "parameters": "(String groupName)", "modifiers": "public", "return": "void", "signature": "void deleteGroup(String groupName)", "full_signature": "public void deleteGroup(String groupName)", "class_method_signature": "AISBuilder.deleteGroup(String groupName)", "testcase": false, "constructor": false}, {"identifier": "deleteGroup", "parameters": "(TableName groupName)", "modifiers": "public", "return": "void", "signature": "void deleteGroup(TableName groupName)", "full_signature": "public void deleteGroup(TableName groupName)", "class_method_signature": "AISBuilder.deleteGroup(TableName groupName)", "testcase": false, "constructor": false}, {"identifier": "addTableToGroup", "parameters": "(String groupName, String schemaName,\n            String tableName)", "modifiers": "public", "return": "void", "signature": "void addTableToGroup(String groupName, String schemaName,\n            String tableName)", "full_signature": "public void addTableToGroup(String groupName, String schemaName,\n            String tableName)", "class_method_signature": "AISBuilder.addTableToGroup(String groupName, String schemaName,\n            String tableName)", "testcase": false, "constructor": false}, {"identifier": "addTableToGroup", "parameters": "(TableName groupName, String schemaName, String tableName)", "modifiers": "public", "return": "void", "signature": "void addTableToGroup(TableName groupName, String schemaName, String tableName)", "full_signature": "public void addTableToGroup(TableName groupName, String schemaName, String tableName)", "class_method_signature": "AISBuilder.addTableToGroup(TableName groupName, String schemaName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "addJoinToGroup", "parameters": "(String groupName, String joinName, Integer weight)", "modifiers": "public", "return": "void", "signature": "void addJoinToGroup(String groupName, String joinName, Integer weight)", "full_signature": "public void addJoinToGroup(String groupName, String joinName, Integer weight)", "class_method_signature": "AISBuilder.addJoinToGroup(String groupName, String joinName, Integer weight)", "testcase": false, "constructor": false}, {"identifier": "addJoinToGroup", "parameters": "(TableName groupName, String joinName, Integer weight)", "modifiers": "public", "return": "void", "signature": "void addJoinToGroup(TableName groupName, String joinName, Integer weight)", "full_signature": "public void addJoinToGroup(TableName groupName, String joinName, Integer weight)", "class_method_signature": "AISBuilder.addJoinToGroup(TableName groupName, String joinName, Integer weight)", "testcase": false, "constructor": false}, {"identifier": "removeTableFromGroup", "parameters": "(String groupName, String schemaName,\n            String tableName)", "modifiers": "public", "return": "void", "signature": "void removeTableFromGroup(String groupName, String schemaName,\n            String tableName)", "full_signature": "public void removeTableFromGroup(String groupName, String schemaName,\n            String tableName)", "class_method_signature": "AISBuilder.removeTableFromGroup(String groupName, String schemaName,\n            String tableName)", "testcase": false, "constructor": false}, {"identifier": "removeTableFromGroup", "parameters": "(TableName groupName, String schemaName, String tableName)", "modifiers": "public", "return": "void", "signature": "void removeTableFromGroup(TableName groupName, String schemaName, String tableName)", "full_signature": "public void removeTableFromGroup(TableName groupName, String schemaName, String tableName)", "class_method_signature": "AISBuilder.removeTableFromGroup(TableName groupName, String schemaName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "removeJoinFromGroup", "parameters": "(String groupName, String joinName)", "modifiers": "public", "return": "void", "signature": "void removeJoinFromGroup(String groupName, String joinName)", "full_signature": "public void removeJoinFromGroup(String groupName, String joinName)", "class_method_signature": "AISBuilder.removeJoinFromGroup(String groupName, String joinName)", "testcase": false, "constructor": false}, {"identifier": "removeJoinFromGroup", "parameters": "(TableName groupName, String joinName)", "modifiers": "public", "return": "void", "signature": "void removeJoinFromGroup(TableName groupName, String joinName)", "full_signature": "public void removeJoinFromGroup(TableName groupName, String joinName)", "class_method_signature": "AISBuilder.removeJoinFromGroup(TableName groupName, String joinName)", "testcase": false, "constructor": false}, {"identifier": "moveTreeToGroup", "parameters": "(String schemaName, String tableName,\n            String groupName, String joinName)", "modifiers": "public", "return": "void", "signature": "void moveTreeToGroup(String schemaName, String tableName,\n            String groupName, String joinName)", "full_signature": "public void moveTreeToGroup(String schemaName, String tableName,\n            String groupName, String joinName)", "class_method_signature": "AISBuilder.moveTreeToGroup(String schemaName, String tableName,\n            String groupName, String joinName)", "testcase": false, "constructor": false}, {"identifier": "moveTreeToGroup", "parameters": "(String schemaName, String tableName, TableName groupName, String joinName)", "modifiers": "public", "return": "void", "signature": "void moveTreeToGroup(String schemaName, String tableName, TableName groupName, String joinName)", "full_signature": "public void moveTreeToGroup(String schemaName, String tableName, TableName groupName, String joinName)", "class_method_signature": "AISBuilder.moveTreeToGroup(String schemaName, String tableName, TableName groupName, String joinName)", "testcase": false, "constructor": false}, {"identifier": "moveTreeToEmptyGroup", "parameters": "(String schemaName, String tableName,\n            String groupName)", "modifiers": "public", "return": "void", "signature": "void moveTreeToEmptyGroup(String schemaName, String tableName,\n            String groupName)", "full_signature": "public void moveTreeToEmptyGroup(String schemaName, String tableName,\n            String groupName)", "class_method_signature": "AISBuilder.moveTreeToEmptyGroup(String schemaName, String tableName,\n            String groupName)", "testcase": false, "constructor": false}, {"identifier": "moveTreeToEmptyGroup", "parameters": "(String schemaName, String tableName, TableName groupName)", "modifiers": "public", "return": "void", "signature": "void moveTreeToEmptyGroup(String schemaName, String tableName, TableName groupName)", "full_signature": "public void moveTreeToEmptyGroup(String schemaName, String tableName, TableName groupName)", "class_method_signature": "AISBuilder.moveTreeToEmptyGroup(String schemaName, String tableName, TableName groupName)", "testcase": false, "constructor": false}, {"identifier": "groupingIsComplete", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void groupingIsComplete()", "full_signature": "public void groupingIsComplete()", "class_method_signature": "AISBuilder.groupingIsComplete()", "testcase": false, "constructor": false}, {"identifier": "finishStorageDescription", "parameters": "(HasStorage object)", "modifiers": "public", "return": "void", "signature": "void finishStorageDescription(HasStorage object)", "full_signature": "public void finishStorageDescription(HasStorage object)", "class_method_signature": "AISBuilder.finishStorageDescription(HasStorage object)", "testcase": false, "constructor": false}, {"identifier": "finishStorageDescription", "parameters": "(HasStorage object, StorageDescription copyStorage)", "modifiers": "public", "return": "void", "signature": "void finishStorageDescription(HasStorage object, StorageDescription copyStorage)", "full_signature": "public void finishStorageDescription(HasStorage object, StorageDescription copyStorage)", "class_method_signature": "AISBuilder.finishStorageDescription(HasStorage object, StorageDescription copyStorage)", "testcase": false, "constructor": false}, {"identifier": "clearGroupings", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearGroupings()", "full_signature": "public void clearGroupings()", "class_method_signature": "AISBuilder.clearGroupings()", "testcase": false, "constructor": false}, {"identifier": "foreignKey", "parameters": "(String referencingSchemaName, String referencingTableName, List<String> referencingColumnNames,\n                           String referencedSchemaName, String referencedTableName, List<String> referencedColumnNames,\n                           ForeignKey.Action deleteAction, ForeignKey.Action updateAction,\n                           boolean deferrable, boolean initiallyDeferred,\n                           String name)", "modifiers": "public", "return": "void", "signature": "void foreignKey(String referencingSchemaName, String referencingTableName, List<String> referencingColumnNames,\n                           String referencedSchemaName, String referencedTableName, List<String> referencedColumnNames,\n                           ForeignKey.Action deleteAction, ForeignKey.Action updateAction,\n                           boolean deferrable, boolean initiallyDeferred,\n                           String name)", "full_signature": "public void foreignKey(String referencingSchemaName, String referencingTableName, List<String> referencingColumnNames,\n                           String referencedSchemaName, String referencedTableName, List<String> referencedColumnNames,\n                           ForeignKey.Action deleteAction, ForeignKey.Action updateAction,\n                           boolean deferrable, boolean initiallyDeferred,\n                           String name)", "class_method_signature": "AISBuilder.foreignKey(String referencingSchemaName, String referencingTableName, List<String> referencingColumnNames,\n                           String referencedSchemaName, String referencedTableName, List<String> referencedColumnNames,\n                           ForeignKey.Action deleteAction, ForeignKey.Action updateAction,\n                           boolean deferrable, boolean initiallyDeferred,\n                           String name)", "testcase": false, "constructor": false}, {"identifier": "akibanInformationSchema", "parameters": "()", "modifiers": "public", "return": "AkibanInformationSchema", "signature": "AkibanInformationSchema akibanInformationSchema()", "full_signature": "public AkibanInformationSchema akibanInformationSchema()", "class_method_signature": "AISBuilder.akibanInformationSchema()", "testcase": false, "constructor": false}, {"identifier": "findRoot", "parameters": "(Group group)", "modifiers": "private", "return": "Table", "signature": "Table findRoot(Group group)", "full_signature": "private Table findRoot(Group group)", "class_method_signature": "AISBuilder.findRoot(Group group)", "testcase": false, "constructor": false}, {"identifier": "setRootIfNeeded", "parameters": "(Group group)", "modifiers": "private", "return": "void", "signature": "void setRootIfNeeded(Group group)", "full_signature": "private void setRootIfNeeded(Group group)", "class_method_signature": "AISBuilder.setRootIfNeeded(Group group)", "testcase": false, "constructor": false}, {"identifier": "moveTree", "parameters": "(List<Join> joins, Group group)", "modifiers": "private", "return": "void", "signature": "void moveTree(List<Join> joins, Group group)", "full_signature": "private void moveTree(List<Join> joins, Group group)", "class_method_signature": "AISBuilder.moveTree(List<Join> joins, Group group)", "testcase": false, "constructor": false}, {"identifier": "checkFound", "parameters": "(Object object, String action, String needed, TableName name)", "modifiers": "private", "return": "void", "signature": "void checkFound(Object object, String action, String needed, TableName name)", "full_signature": "private void checkFound(Object object, String action, String needed, TableName name)", "class_method_signature": "AISBuilder.checkFound(Object object, String action, String needed, TableName name)", "testcase": false, "constructor": false}, {"identifier": "checkFound", "parameters": "(Object object, String action, String needed,\n            String name)", "modifiers": "private", "return": "void", "signature": "void checkFound(Object object, String action, String needed,\n            String name)", "full_signature": "private void checkFound(Object object, String action, String needed,\n            String name)", "class_method_signature": "AISBuilder.checkFound(Object object, String action, String needed,\n            String name)", "testcase": false, "constructor": false}, {"identifier": "checkGroupAddition", "parameters": "(Group group, Group existingGroup,\n            String name)", "modifiers": "private", "return": "void", "signature": "void checkGroupAddition(Group group, Group existingGroup,\n            String name)", "full_signature": "private void checkGroupAddition(Group group, Group existingGroup,\n            String name)", "class_method_signature": "AISBuilder.checkGroupAddition(Group group, Group existingGroup,\n            String name)", "testcase": false, "constructor": false}, {"identifier": "checkInGroup", "parameters": "(Group group, HasGroup object, String action,\n            String objectDescription)", "modifiers": "private", "return": "void", "signature": "void checkInGroup(Group group, HasGroup object, String action,\n            String objectDescription)", "full_signature": "private void checkInGroup(Group group, HasGroup object, String action,\n            String objectDescription)", "class_method_signature": "AISBuilder.checkInGroup(Group group, HasGroup object, String action,\n            String objectDescription)", "testcase": false, "constructor": false}, {"identifier": "checkCycle", "parameters": "(Table table, Group group)", "modifiers": "private", "return": "void", "signature": "void checkCycle(Table table, Group group)", "full_signature": "private void checkCycle(Table table, Group group)", "class_method_signature": "AISBuilder.checkCycle(Table table, Group group)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(String... strings)", "modifiers": "private", "return": "String", "signature": "String concat(String... strings)", "full_signature": "private String concat(String... strings)", "class_method_signature": "AISBuilder.concat(String... strings)", "testcase": false, "constructor": false}, {"identifier": "setTablesGroup", "parameters": "(Table table, Group group)", "modifiers": "private", "return": "void", "signature": "void setTablesGroup(Table table, Group group)", "full_signature": "private void setTablesGroup(Table table, Group group)", "class_method_signature": "AISBuilder.setTablesGroup(Table table, Group group)", "testcase": false, "constructor": false}, {"identifier": "getRooTableID", "parameters": "(Table table)", "modifiers": "private", "return": "int", "signature": "int getRooTableID(Table table)", "full_signature": "private int getRooTableID(Table table)", "class_method_signature": "AISBuilder.getRooTableID(Table table)", "testcase": false, "constructor": false}, {"identifier": "findFullGroupName", "parameters": "(String groupName)", "modifiers": "private", "return": "TableName", "signature": "TableName findFullGroupName(String groupName)", "full_signature": "private TableName findFullGroupName(String groupName)", "class_method_signature": "AISBuilder.findFullGroupName(String groupName)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/ais/model/AISBuilder.java"}, "focal_method": {"identifier": "moveTreeToEmptyGroup", "parameters": "(String schemaName, String tableName,\n            String groupName)", "modifiers": "public", "return": "void", "body": "public void moveTreeToEmptyGroup(String schemaName, String tableName,\n            String groupName) {\n        moveTreeToEmptyGroup(schemaName, tableName, findFullGroupName(groupName));\n    }", "signature": "void moveTreeToEmptyGroup(String schemaName, String tableName,\n            String groupName)", "full_signature": "public void moveTreeToEmptyGroup(String schemaName, String tableName,\n            String groupName)", "class_method_signature": "AISBuilder.moveTreeToEmptyGroup(String schemaName, String tableName,\n            String groupName)", "testcase": false, "constructor": false, "invocations": ["moveTreeToEmptyGroup", "findFullGroupName"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}