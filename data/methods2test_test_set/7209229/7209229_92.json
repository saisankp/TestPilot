{"test_class": {"identifier": "TestMergeableExponentiallyDecayingReservoir", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long NUM_MSECS_IN_SEC = 1000L;", "modifier": "private static final", "type": "long", "declarator": "NUM_MSECS_IN_SEC = 1000L", "var_name": "NUM_MSECS_IN_SEC"}, {"original_string": "private static final long NUM_NSECS_IN_MSEC = 1000000L;", "modifier": "private static final", "type": "long", "declarator": "NUM_NSECS_IN_MSEC = 1000000L", "var_name": "NUM_NSECS_IN_MSEC"}], "file": "metrics-histograms/metrics-core-impl/src/test/java/com/codahale/metrics/TestMergeableExponentiallyDecayingReservoir.java"}, "test_case": {"identifier": "testEmptyReservoir", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEmptyReservoir()\n  {\n    MergeableExponentiallyDecayingReservoir res = new MergeableExponentiallyDecayingReservoir(10, 0.015);\n\n    // add NO data\n\n    double[] dataValues = res.getUnsortedValues();\n    assertEquals(\"expected empty dataValues array\", 0, dataValues.length);\n    double result = StatUtils.percentile(dataValues, 50.0);\n    assertEquals(\"expected NaN for 50th percentile of empty array\", Double.NaN, result);\n    result = StatUtils.max(dataValues);\n    assertEquals(\"expected NaN for max of empty array\", Double.NaN, result);\n  }", "signature": "void testEmptyReservoir()", "full_signature": "@Test public void testEmptyReservoir()", "class_method_signature": "TestMergeableExponentiallyDecayingReservoir.testEmptyReservoir()", "testcase": true, "constructor": false, "invocations": ["getUnsortedValues", "assertEquals", "percentile", "assertEquals", "max", "assertEquals"]}, "focal_class": {"identifier": "MergeableExponentiallyDecayingReservoir", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_SIZE = 1028;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SIZE = 1028", "var_name": "DEFAULT_SIZE"}, {"original_string": "public static final double DEFAULT_ALPHA = 0.015;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_ALPHA = 0.015", "var_name": "DEFAULT_ALPHA"}, {"original_string": "private static final long RESCALE_THRESHOLD = TimeUnit.HOURS.toNanos(1);", "modifier": "private static final", "type": "long", "declarator": "RESCALE_THRESHOLD = TimeUnit.HOURS.toNanos(1)", "var_name": "RESCALE_THRESHOLD"}, {"original_string": "private static final long CURRENT_NEXT_SCALE_TIME = Long.MIN_VALUE;", "modifier": "private static final", "type": "long", "declarator": "CURRENT_NEXT_SCALE_TIME = Long.MIN_VALUE", "var_name": "CURRENT_NEXT_SCALE_TIME"}, {"original_string": "private final ConcurrentSkipListMap<Double, Double> _values;", "modifier": "private final", "type": "ConcurrentSkipListMap<Double, Double>", "declarator": "_values", "var_name": "_values"}, {"original_string": "private final ReentrantReadWriteLock _lock;", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "_lock", "var_name": "_lock"}, {"original_string": "private final double _alpha;", "modifier": "private final", "type": "double", "declarator": "_alpha", "var_name": "_alpha"}, {"original_string": "private final int _size;", "modifier": "private final", "type": "int", "declarator": "_size", "var_name": "_size"}, {"original_string": "private final AtomicLong _count;", "modifier": "private final", "type": "AtomicLong", "declarator": "_count", "var_name": "_count"}, {"original_string": "private volatile long _startTime;", "modifier": "private volatile", "type": "long", "declarator": "_startTime", "var_name": "_startTime"}, {"original_string": "private final AtomicLong _nextScaleTime;", "modifier": "private final", "type": "AtomicLong", "declarator": "_nextScaleTime", "var_name": "_nextScaleTime"}, {"original_string": "private final Clock _clock;", "modifier": "private final", "type": "Clock", "declarator": "_clock", "var_name": "_clock"}], "methods": [{"identifier": "MergeableExponentiallyDecayingReservoir", "parameters": "()", "modifiers": "public", "return": "", "signature": " MergeableExponentiallyDecayingReservoir()", "full_signature": "public  MergeableExponentiallyDecayingReservoir()", "class_method_signature": "MergeableExponentiallyDecayingReservoir.MergeableExponentiallyDecayingReservoir()", "testcase": false, "constructor": true}, {"identifier": "MergeableExponentiallyDecayingReservoir", "parameters": "(int size, double alpha)", "modifiers": "public", "return": "", "signature": " MergeableExponentiallyDecayingReservoir(int size, double alpha)", "full_signature": "public  MergeableExponentiallyDecayingReservoir(int size, double alpha)", "class_method_signature": "MergeableExponentiallyDecayingReservoir.MergeableExponentiallyDecayingReservoir(int size, double alpha)", "testcase": false, "constructor": true}, {"identifier": "MergeableExponentiallyDecayingReservoir", "parameters": "(int size, double alpha, Clock clock)", "modifiers": "public", "return": "", "signature": " MergeableExponentiallyDecayingReservoir(int size, double alpha, Clock clock)", "full_signature": "public  MergeableExponentiallyDecayingReservoir(int size, double alpha, Clock clock)", "class_method_signature": "MergeableExponentiallyDecayingReservoir.MergeableExponentiallyDecayingReservoir(int size, double alpha, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "MergeableExponentiallyDecayingReservoir.size()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void update(double value)", "full_signature": "public void update(double value)", "class_method_signature": "MergeableExponentiallyDecayingReservoir.update(double value)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(double value, long timestamp)", "modifiers": "public", "return": "void", "signature": "void update(double value, long timestamp)", "full_signature": "public void update(double value, long timestamp)", "class_method_signature": "MergeableExponentiallyDecayingReservoir.update(double value, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(MergeableExponentiallyDecayingReservoir other)", "modifiers": "public", "return": "void", "signature": "void merge(MergeableExponentiallyDecayingReservoir other)", "full_signature": "public void merge(MergeableExponentiallyDecayingReservoir other)", "class_method_signature": "MergeableExponentiallyDecayingReservoir.merge(MergeableExponentiallyDecayingReservoir other)", "testcase": false, "constructor": false}, {"identifier": "getLandmark", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLandmark()", "full_signature": "public long getLandmark()", "class_method_signature": "MergeableExponentiallyDecayingReservoir.getLandmark()", "testcase": false, "constructor": false}, {"identifier": "getDescendingMap", "parameters": "()", "modifiers": "public", "return": "ConcurrentNavigableMap<Double, Double>", "signature": "ConcurrentNavigableMap<Double, Double> getDescendingMap()", "full_signature": "public ConcurrentNavigableMap<Double, Double> getDescendingMap()", "class_method_signature": "MergeableExponentiallyDecayingReservoir.getDescendingMap()", "testcase": false, "constructor": false}, {"identifier": "getUnsortedValues", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getUnsortedValues()", "full_signature": "public double[] getUnsortedValues()", "class_method_signature": "MergeableExponentiallyDecayingReservoir.getUnsortedValues()", "testcase": false, "constructor": false}, {"identifier": "currentTimeInSeconds", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long currentTimeInSeconds()", "full_signature": "private long currentTimeInSeconds()", "class_method_signature": "MergeableExponentiallyDecayingReservoir.currentTimeInSeconds()", "testcase": false, "constructor": false}, {"identifier": "weight", "parameters": "(long t)", "modifiers": "private", "return": "double", "signature": "double weight(long t)", "full_signature": "private double weight(long t)", "class_method_signature": "MergeableExponentiallyDecayingReservoir.weight(long t)", "testcase": false, "constructor": false}, {"identifier": "rescaleIfNeeded", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rescaleIfNeeded()", "full_signature": "private void rescaleIfNeeded()", "class_method_signature": "MergeableExponentiallyDecayingReservoir.rescaleIfNeeded()", "testcase": false, "constructor": false}, {"identifier": "rescale", "parameters": "(long now, long next)", "modifiers": "private", "return": "void", "signature": "void rescale(long now, long next)", "full_signature": "private void rescale(long now, long next)", "class_method_signature": "MergeableExponentiallyDecayingReservoir.rescale(long now, long next)", "testcase": false, "constructor": false}, {"identifier": "rescale", "parameters": "(long now, long next, long startTime)", "modifiers": "public", "return": "ConcurrentNavigableMap<Double, Double>", "signature": "ConcurrentNavigableMap<Double, Double> rescale(long now, long next, long startTime)", "full_signature": "public ConcurrentNavigableMap<Double, Double> rescale(long now, long next, long startTime)", "class_method_signature": "MergeableExponentiallyDecayingReservoir.rescale(long now, long next, long startTime)", "testcase": false, "constructor": false}, {"identifier": "lockForRescale", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void lockForRescale()", "full_signature": "private void lockForRescale()", "class_method_signature": "MergeableExponentiallyDecayingReservoir.lockForRescale()", "testcase": false, "constructor": false}, {"identifier": "unlockForRescale", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unlockForRescale()", "full_signature": "private void unlockForRescale()", "class_method_signature": "MergeableExponentiallyDecayingReservoir.unlockForRescale()", "testcase": false, "constructor": false}, {"identifier": "lockForRegularUsage", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void lockForRegularUsage()", "full_signature": "private void lockForRegularUsage()", "class_method_signature": "MergeableExponentiallyDecayingReservoir.lockForRegularUsage()", "testcase": false, "constructor": false}, {"identifier": "unlockForRegularUsage", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unlockForRegularUsage()", "full_signature": "private void unlockForRegularUsage()", "class_method_signature": "MergeableExponentiallyDecayingReservoir.unlockForRegularUsage()", "testcase": false, "constructor": false}], "file": "metrics-histograms/metrics-core-impl/src/main/java/com/codahale/metrics/MergeableExponentiallyDecayingReservoir.java"}, "focal_method": {"identifier": "getUnsortedValues", "parameters": "()", "modifiers": "public", "return": "double[]", "body": "public double[] getUnsortedValues()\n    {\n      lockForRegularUsage();\n      try\n      {\n        Collection<Double> dataValues = _values.values();\n        double[] result = new double[dataValues.size()];\n        int j = 0;\n        for (Double dataValue : dataValues)\n        {\n          result[j++] = dataValue.doubleValue();\n        }\n        return result;\n      }\n      finally\n      {\n        unlockForRegularUsage();\n      }\n    }", "signature": "double[] getUnsortedValues()", "full_signature": "public double[] getUnsortedValues()", "class_method_signature": "MergeableExponentiallyDecayingReservoir.getUnsortedValues()", "testcase": false, "constructor": false, "invocations": ["lockForRegularUsage", "values", "size", "doubleValue", "unlockForRegularUsage"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}