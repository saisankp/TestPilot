{"test_class": {"identifier": "ConnectedAndroidDeviceTest", "superclass": "", "interfaces": "", "fields": [], "file": "android/testSrc/com/android/tools/idea/run/ConnectedAndroidDeviceTest.java"}, "test_case": {"identifier": "getName_emulatorWithAvdName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getName_emulatorWithAvdName() {\n    IDevice emulatorWithNoAvdName = createMockRunningEmulator(\"My Pixel\");\n    assertThat(new ConnectedAndroidDevice(emulatorWithNoAvdName, null).getName()).isEqualTo(\"Google Pixel [My Pixel]\");\n  }", "signature": "void getName_emulatorWithAvdName()", "full_signature": "@Test public void getName_emulatorWithAvdName()", "class_method_signature": "ConnectedAndroidDeviceTest.getName_emulatorWithAvdName()", "testcase": true, "constructor": false, "invocations": ["createMockRunningEmulator", "isEqualTo", "assertThat", "getName"]}, "focal_class": {"identifier": "ConnectedAndroidDevice", "superclass": "", "interfaces": "implements AndroidDevice", "fields": [{"original_string": "private static final ExtensionPointName<DeviceNameRendererEx> EP_NAME = ExtensionPointName.create(\"com.android.run.deviceNameRenderer\");", "modifier": "private static final", "type": "ExtensionPointName<DeviceNameRendererEx>", "declarator": "EP_NAME = ExtensionPointName.create(\"com.android.run.deviceNameRenderer\")", "var_name": "EP_NAME"}, {"original_string": "@NotNull private final IDevice myDevice;", "modifier": "@NotNull private final", "type": "IDevice", "declarator": "myDevice", "var_name": "myDevice"}, {"original_string": "@Nullable private final String myAvdName;", "modifier": "@Nullable private final", "type": "String", "declarator": "myAvdName", "var_name": "myAvdName"}, {"original_string": "@Nullable private final DeviceNameRendererEx myDeviceNameRenderer;", "modifier": "@Nullable private final", "type": "DeviceNameRendererEx", "declarator": "myDeviceNameRenderer", "var_name": "myDeviceNameRenderer"}, {"original_string": "private volatile String myDeviceManufacturer;", "modifier": "private volatile", "type": "String", "declarator": "myDeviceManufacturer", "var_name": "myDeviceManufacturer"}, {"original_string": "private volatile String myDeviceBuild;", "modifier": "private volatile", "type": "String", "declarator": "myDeviceBuild", "var_name": "myDeviceBuild"}, {"original_string": "private volatile String myDeviceModel;", "modifier": "private volatile", "type": "String", "declarator": "myDeviceModel", "var_name": "myDeviceModel"}], "methods": [{"identifier": "ConnectedAndroidDevice", "parameters": "(@NotNull IDevice device, @Nullable List<AvdInfo> avdInfos)", "modifiers": "public", "return": "", "signature": " ConnectedAndroidDevice(@NotNull IDevice device, @Nullable List<AvdInfo> avdInfos)", "full_signature": "public  ConnectedAndroidDevice(@NotNull IDevice device, @Nullable List<AvdInfo> avdInfos)", "class_method_signature": "ConnectedAndroidDevice.ConnectedAndroidDevice(@NotNull IDevice device, @Nullable List<AvdInfo> avdInfos)", "testcase": false, "constructor": true}, {"identifier": "getAvdInfo", "parameters": "(@NotNull IDevice device, @Nullable List<AvdInfo> avdInfos)", "modifiers": "@Nullable private static", "return": "AvdInfo", "signature": "AvdInfo getAvdInfo(@NotNull IDevice device, @Nullable List<AvdInfo> avdInfos)", "full_signature": "@Nullable private static AvdInfo getAvdInfo(@NotNull IDevice device, @Nullable List<AvdInfo> avdInfos)", "class_method_signature": "ConnectedAndroidDevice.getAvdInfo(@NotNull IDevice device, @Nullable List<AvdInfo> avdInfos)", "testcase": false, "constructor": false}, {"identifier": "isRunning", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRunning()", "full_signature": "@Override public boolean isRunning()", "class_method_signature": "ConnectedAndroidDevice.isRunning()", "testcase": false, "constructor": false}, {"identifier": "isVirtual", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isVirtual()", "full_signature": "@Override public boolean isVirtual()", "class_method_signature": "ConnectedAndroidDevice.isVirtual()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "AndroidVersion", "signature": "AndroidVersion getVersion()", "full_signature": "@NotNull @Override public AndroidVersion getVersion()", "class_method_signature": "ConnectedAndroidDevice.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getDensity", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDensity()", "full_signature": "@Override public int getDensity()", "class_method_signature": "ConnectedAndroidDevice.getDensity()", "testcase": false, "constructor": false}, {"identifier": "getAbis", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<Abi>", "signature": "List<Abi> getAbis()", "full_signature": "@NotNull @Override public List<Abi> getAbis()", "class_method_signature": "ConnectedAndroidDevice.getAbis()", "testcase": false, "constructor": false}, {"identifier": "getSerial", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getSerial()", "full_signature": "@NotNull @Override public String getSerial()", "class_method_signature": "ConnectedAndroidDevice.getSerial()", "testcase": false, "constructor": false}, {"identifier": "supportsFeature", "parameters": "(@NotNull IDevice.HardwareFeature feature)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsFeature(@NotNull IDevice.HardwareFeature feature)", "full_signature": "@Override public boolean supportsFeature(@NotNull IDevice.HardwareFeature feature)", "class_method_signature": "ConnectedAndroidDevice.supportsFeature(@NotNull IDevice.HardwareFeature feature)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getName()", "full_signature": "@NotNull @Override public String getName()", "class_method_signature": "ConnectedAndroidDevice.getName()", "testcase": false, "constructor": false}, {"identifier": "renderLabel", "parameters": "(@NotNull SimpleColoredComponent renderer, boolean isCompatible, @Nullable String searchPrefix)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean renderLabel(@NotNull SimpleColoredComponent renderer, boolean isCompatible, @Nullable String searchPrefix)", "full_signature": "@Override public boolean renderLabel(@NotNull SimpleColoredComponent renderer, boolean isCompatible, @Nullable String searchPrefix)", "class_method_signature": "ConnectedAndroidDevice.renderLabel(@NotNull SimpleColoredComponent renderer, boolean isCompatible, @Nullable String searchPrefix)", "testcase": false, "constructor": false}, {"identifier": "getDeviceName", "parameters": "()", "modifiers": "@NotNull private", "return": "String", "signature": "String getDeviceName()", "full_signature": "@NotNull private String getDeviceName()", "class_method_signature": "ConnectedAndroidDevice.getDeviceName()", "testcase": false, "constructor": false}, {"identifier": "prepareToRenderLabel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void prepareToRenderLabel()", "full_signature": "@Override public void prepareToRenderLabel()", "class_method_signature": "ConnectedAndroidDevice.prepareToRenderLabel()", "testcase": false, "constructor": false}, {"identifier": "getDeviceManufacturer", "parameters": "()", "modifiers": "@NotNull private", "return": "String", "signature": "String getDeviceManufacturer()", "full_signature": "@NotNull private String getDeviceManufacturer()", "class_method_signature": "ConnectedAndroidDevice.getDeviceManufacturer()", "testcase": false, "constructor": false}, {"identifier": "getDeviceModel", "parameters": "()", "modifiers": "@NotNull private", "return": "String", "signature": "String getDeviceModel()", "full_signature": "@NotNull private String getDeviceModel()", "class_method_signature": "ConnectedAndroidDevice.getDeviceModel()", "testcase": false, "constructor": false}, {"identifier": "getDeviceBuild", "parameters": "()", "modifiers": "@NotNull private", "return": "String", "signature": "String getDeviceBuild()", "full_signature": "@NotNull private String getDeviceBuild()", "class_method_signature": "ConnectedAndroidDevice.getDeviceBuild()", "testcase": false, "constructor": false}, {"identifier": "launch", "parameters": "(@NotNull Project project)", "modifiers": "@NotNull @Override public", "return": "ListenableFuture<IDevice>", "signature": "ListenableFuture<IDevice> launch(@NotNull Project project)", "full_signature": "@NotNull @Override public ListenableFuture<IDevice> launch(@NotNull Project project)", "class_method_signature": "ConnectedAndroidDevice.launch(@NotNull Project project)", "testcase": false, "constructor": false}, {"identifier": "launch", "parameters": "(@NotNull Project project, @NotNull List<String> arguments)", "modifiers": "@NotNull @Override public", "return": "ListenableFuture<IDevice>", "signature": "ListenableFuture<IDevice> launch(@NotNull Project project, @NotNull List<String> arguments)", "full_signature": "@NotNull @Override public ListenableFuture<IDevice> launch(@NotNull Project project, @NotNull List<String> arguments)", "class_method_signature": "ConnectedAndroidDevice.launch(@NotNull Project project, @NotNull List<String> arguments)", "testcase": false, "constructor": false}, {"identifier": "getLaunchedDevice", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "ListenableFuture<IDevice>", "signature": "ListenableFuture<IDevice> getLaunchedDevice()", "full_signature": "@NotNull @Override public ListenableFuture<IDevice> getLaunchedDevice()", "class_method_signature": "ConnectedAndroidDevice.getLaunchedDevice()", "testcase": false, "constructor": false}, {"identifier": "getDevice", "parameters": "()", "modifiers": "@NotNull public", "return": "IDevice", "signature": "IDevice getDevice()", "full_signature": "@NotNull public IDevice getDevice()", "class_method_signature": "ConnectedAndroidDevice.getDevice()", "testcase": false, "constructor": false}, {"identifier": "getRendererExtension", "parameters": "(@NotNull IDevice device)", "modifiers": "@Nullable private static", "return": "DeviceNameRendererEx", "signature": "DeviceNameRendererEx getRendererExtension(@NotNull IDevice device)", "full_signature": "@Nullable private static DeviceNameRendererEx getRendererExtension(@NotNull IDevice device)", "class_method_signature": "ConnectedAndroidDevice.getRendererExtension(@NotNull IDevice device)", "testcase": false, "constructor": false}, {"identifier": "canRun", "parameters": "(@NotNull AndroidVersion minSdkVersion,\n                                    @NotNull IAndroidTarget projectTarget,\n                                    @NotNull EnumSet<IDevice.HardwareFeature> requiredFeatures,\n                                    @Nullable Set<String> supportedAbis)", "modifiers": "@Override @NotNull public", "return": "LaunchCompatibility", "signature": "LaunchCompatibility canRun(@NotNull AndroidVersion minSdkVersion,\n                                    @NotNull IAndroidTarget projectTarget,\n                                    @NotNull EnumSet<IDevice.HardwareFeature> requiredFeatures,\n                                    @Nullable Set<String> supportedAbis)", "full_signature": "@Override @NotNull public LaunchCompatibility canRun(@NotNull AndroidVersion minSdkVersion,\n                                    @NotNull IAndroidTarget projectTarget,\n                                    @NotNull EnumSet<IDevice.HardwareFeature> requiredFeatures,\n                                    @Nullable Set<String> supportedAbis)", "class_method_signature": "ConnectedAndroidDevice.canRun(@NotNull AndroidVersion minSdkVersion,\n                                    @NotNull IAndroidTarget projectTarget,\n                                    @NotNull EnumSet<IDevice.HardwareFeature> requiredFeatures,\n                                    @Nullable Set<String> supportedAbis)", "testcase": false, "constructor": false}, {"identifier": "isDispatchThread", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isDispatchThread()", "full_signature": "private boolean isDispatchThread()", "class_method_signature": "ConnectedAndroidDevice.isDispatchThread()", "testcase": false, "constructor": false}, {"identifier": "isDebuggable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDebuggable()", "full_signature": "@Override public boolean isDebuggable()", "class_method_signature": "ConnectedAndroidDevice.isDebuggable()", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/run/ConnectedAndroidDevice.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "body": "@NotNull\n  @Override\n  public String getName() {\n    if (myDeviceNameRenderer != null) {\n      return myDeviceNameRenderer.getName(myDevice);\n    }\n\n    if (isVirtual()) {\n      if (myAvdName != null) {\n        return myAvdName;\n      }\n      else {\n        // if the avd name is not available, then include the serial number in order to differentiate\n        // between multiple emulators\n        return getDeviceName() + \" [\" + getSerial() + \"]\";\n      }\n    }\n    return getDeviceName();\n  }", "signature": "String getName()", "full_signature": "@NotNull @Override public String getName()", "class_method_signature": "ConnectedAndroidDevice.getName()", "testcase": false, "constructor": false, "invocations": ["getName", "isVirtual", "getDeviceName", "getSerial", "getDeviceName"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}