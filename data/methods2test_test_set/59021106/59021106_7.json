{"test_class": {"identifier": "RegraSomatorioTest", "superclass": "", "interfaces": "", "fields": [], "file": "sandbox/dominio/src/test/java/br/ufg/inf/es/saep/sandbox/dominio/regra/RegraSomatorioTest.java"}, "test_case": {"identifier": "umAvaliavelComExpressaoConstante", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void umAvaliavelComExpressaoConstante() {\n        // Parser que adequadamente identifica depend\u00eancia \"x\" na express\u00e3o \"x\"\n        ParserTeste parser = new ParserTeste();\n        ArrayList<String> deps = new ArrayList<>();\n        deps.add(\"x\");\n        parser.setDependencias(deps);\n\n        Regra r = new RegraSomatorio(\"v\", \"d\", 1, 0, \"1\", \"x\");\n        r.preparacao(parser);\n\n        List<Avaliavel> avaliaveis = new ArrayList<>(0);\n        HashMap<String, Valor> atributos = new HashMap<>(0);\n        atributos.put(\"a\", new Valor(true));\n        avaliaveis.add(new Relato(\"x\", atributos));\n\n        assertEquals(0, r.avalie(avaliaveis, null).getReal(), 0.0001f);\n    }", "signature": "void umAvaliavelComExpressaoConstante()", "full_signature": "@Test public void umAvaliavelComExpressaoConstante()", "class_method_signature": "RegraSomatorioTest.umAvaliavelComExpressaoConstante()", "testcase": true, "constructor": false, "invocations": ["add", "setDependencias", "preparacao", "put", "add", "assertEquals", "getReal", "avalie"]}, "focal_class": {"identifier": "RegraSomatorio", "superclass": "extends RegraExpressao", "interfaces": "", "fields": [{"original_string": "private String classe;", "modifier": "private", "type": "String", "declarator": "classe", "var_name": "classe"}], "methods": [{"identifier": "RegraSomatorio", "parameters": "(\n            final String variavel,\n            final String descricao,\n            final float valorMaximo,\n            final float valorMinimo,\n            final String expressao,\n            final String nomeClasse)", "modifiers": "public", "return": "", "signature": " RegraSomatorio(\n            final String variavel,\n            final String descricao,\n            final float valorMaximo,\n            final float valorMinimo,\n            final String expressao,\n            final String nomeClasse)", "full_signature": "public  RegraSomatorio(\n            final String variavel,\n            final String descricao,\n            final float valorMaximo,\n            final float valorMinimo,\n            final String expressao,\n            final String nomeClasse)", "class_method_signature": "RegraSomatorio.RegraSomatorio(\n            final String variavel,\n            final String descricao,\n            final float valorMaximo,\n            final float valorMinimo,\n            final String expressao,\n            final String nomeClasse)", "testcase": false, "constructor": true}, {"identifier": "avalie", "parameters": "(final List<Avaliavel> avaliaveis,\n                        final Map<String, Valor> contexto)", "modifiers": "@Override public final", "return": "Valor", "signature": "Valor avalie(final List<Avaliavel> avaliaveis,\n                        final Map<String, Valor> contexto)", "full_signature": "@Override public final Valor avalie(final List<Avaliavel> avaliaveis,\n                        final Map<String, Valor> contexto)", "class_method_signature": "RegraSomatorio.avalie(final List<Avaliavel> avaliaveis,\n                        final Map<String, Valor> contexto)", "testcase": false, "constructor": false}, {"identifier": "prioridade", "parameters": "(final String variavel,\n                             final Avaliavel avaliavel,\n                             final Map<String, Valor> ctx)", "modifiers": "private", "return": "float", "signature": "float prioridade(final String variavel,\n                             final Avaliavel avaliavel,\n                             final Map<String, Valor> ctx)", "full_signature": "private float prioridade(final String variavel,\n                             final Avaliavel avaliavel,\n                             final Map<String, Valor> ctx)", "class_method_signature": "RegraSomatorio.prioridade(final String variavel,\n                             final Avaliavel avaliavel,\n                             final Map<String, Valor> ctx)", "testcase": false, "constructor": false}], "file": "sandbox/dominio/src/main/java/br/ufg/inf/es/saep/sandbox/dominio/regra/RegraSomatorio.java"}, "focal_method": {"identifier": "avalie", "parameters": "(final List<Avaliavel> avaliaveis,\n                        final Map<String, Valor> contexto)", "modifiers": "@Override public final", "return": "Valor", "body": "@Override\n    public final Valor avalie(final List<Avaliavel> avaliaveis,\n                        final Map<String, Valor> contexto) {\n        float somatorio = 0f;\n\n        for (Avaliavel avaliavel : avaliaveis) {\n            // Considera apenas avali\u00e1veis da classe em quest\u00e3o\n            Valor atributo = avaliavel.get(\"classe\");\n            String classe = atributo == null ? null : atributo.getString();\n\n            if (!this.classe.equals(classe)) {\n                continue;\n            }\n\n            // Atualiza contexto da express\u00e3o com dados do avali\u00e1vel\n            for (String dd : ctx.keySet()) {\n                ctx.put(dd, prioridade(dd, avaliavel, contexto));\n            }\n\n            somatorio = somatorio + ast.valor(ctx);\n        }\n\n        return new Valor(somatorio);\n    }", "signature": "Valor avalie(final List<Avaliavel> avaliaveis,\n                        final Map<String, Valor> contexto)", "full_signature": "@Override public final Valor avalie(final List<Avaliavel> avaliaveis,\n                        final Map<String, Valor> contexto)", "class_method_signature": "RegraSomatorio.avalie(final List<Avaliavel> avaliaveis,\n                        final Map<String, Valor> contexto)", "testcase": false, "constructor": false, "invocations": ["get", "getString", "equals", "keySet", "put", "prioridade", "valor"]}, "repository": {"repo_id": 59021106, "url": "https://github.com/kyriosdata/saep", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 14, "size": 1194, "license": "licensed"}}