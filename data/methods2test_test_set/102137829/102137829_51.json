{"test_class": {"identifier": "BinaryTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/de/slackspace/openkeepass/domain/BinaryTest.java"}, "test_case": {"identifier": "shouldMarshallObjectToXml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldMarshallObjectToXml() throws Exception {\n        Binary binary = new BinaryBuilder()\n                .id(5)\n                .data(new byte[10])\n                .isCompressed(true)\n                .build();\n\n        ByteArrayOutputStream bos = new SimpleXmlParser().toXml(binary);\n\n        String xml = XmlStringCleaner.cleanXmlString(new String(bos.toByteArray()));\n        Assert.assertEquals(\"<Binary ID='5' Compressed='True'>H4sIAAAAAAAAAGNggAEAdmiK4woAAAA=</Binary>\", xml);\n    }", "signature": "void shouldMarshallObjectToXml()", "full_signature": "@Test public void shouldMarshallObjectToXml()", "class_method_signature": "BinaryTest.shouldMarshallObjectToXml()", "testcase": true, "constructor": false, "invocations": ["build", "isCompressed", "data", "id", "toXml", "cleanXmlString", "toByteArray", "assertEquals"]}, "focal_class": {"identifier": "Binary", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Attribute(name = \"ID\")\n    private int id;", "modifier": "@Attribute(name = \"ID\")\n    private", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "@Attribute(name = \"Compressed\")\n    private Boolean isCompressed;", "modifier": "@Attribute(name = \"Compressed\")\n    private", "type": "Boolean", "declarator": "isCompressed", "var_name": "isCompressed"}, {"original_string": "@Text\n    private byte[] data;", "modifier": "@Text\n    private", "type": "byte[]", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "Binary", "parameters": "()", "modifiers": "", "return": "", "signature": " Binary()", "full_signature": "  Binary()", "class_method_signature": "Binary.Binary()", "testcase": false, "constructor": true}, {"identifier": "Binary", "parameters": "(BinaryContract binaryContract)", "modifiers": "public", "return": "", "signature": " Binary(BinaryContract binaryContract)", "full_signature": "public  Binary(BinaryContract binaryContract)", "class_method_signature": "Binary.Binary(BinaryContract binaryContract)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getId()", "full_signature": "public int getId()", "class_method_signature": "Binary.getId()", "testcase": false, "constructor": false}, {"identifier": "isCompressed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCompressed()", "full_signature": "public boolean isCompressed()", "class_method_signature": "Binary.isCompressed()", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getData()", "full_signature": "public byte[] getData()", "class_method_signature": "Binary.getData()", "testcase": false, "constructor": false}, {"identifier": "decompressData", "parameters": "()", "modifiers": "private", "return": "byte[]", "signature": "byte[] decompressData()", "full_signature": "private byte[] decompressData()", "class_method_signature": "Binary.decompressData()", "testcase": false, "constructor": false}, {"identifier": "compressData", "parameters": "(BinaryContract binaryContract)", "modifiers": "private", "return": "byte[]", "signature": "byte[] compressData(BinaryContract binaryContract)", "full_signature": "private byte[] compressData(BinaryContract binaryContract)", "class_method_signature": "Binary.compressData(BinaryContract binaryContract)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "Binary.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public final boolean equals(Object obj)", "class_method_signature": "Binary.equals(Object obj)", "testcase": false, "constructor": false}], "file": "src/de/slackspace/openkeepass/domain/Binary.java"}, "focal_method": {"identifier": "isCompressed", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isCompressed() {\n        if (isCompressed == null) {\n            return false;\n        }\n        return isCompressed;\n    }", "signature": "boolean isCompressed()", "full_signature": "public boolean isCompressed()", "class_method_signature": "Binary.isCompressed()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 102137829, "url": "https://github.com/privacyint/ThornSec", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 10, "size": 20604, "license": "licensed"}}