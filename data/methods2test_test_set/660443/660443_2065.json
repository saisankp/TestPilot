{"test_class": {"identifier": "PCCompoundASNReaderTest", "superclass": "extends SimpleChemObjectReaderTest", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(PCCompoundASNReaderTest.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(PCCompoundASNReaderTest.class)", "var_name": "logger"}], "file": "storage/io/src/test/java/org/openscience/cdk/io/PCCompoundASNReaderTest.java"}, "test_case": {"identifier": "testAccepts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccepts() {\n        PCCompoundASNReader reader = new PCCompoundASNReader();\n        Assert.assertTrue(reader.accepts(ChemFile.class));\n    }", "signature": "void testAccepts()", "full_signature": "@Test public void testAccepts()", "class_method_signature": "PCCompoundASNReaderTest.testAccepts()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "accepts"]}, "focal_class": {"identifier": "PCCompoundASNReader", "superclass": "extends DefaultChemObjectReader", "interfaces": "", "fields": [{"original_string": "private BufferedReader      input;", "modifier": "private", "type": "BufferedReader", "declarator": "input", "var_name": "input"}, {"original_string": "private static ILoggingTool logger   = LoggingToolFactory.createLoggingTool(PCCompoundASNReader.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger   = LoggingToolFactory.createLoggingTool(PCCompoundASNReader.class)", "var_name": "logger"}, {"original_string": "IAtomContainer              molecule = null;", "modifier": "", "type": "IAtomContainer", "declarator": "molecule = null", "var_name": "molecule"}, {"original_string": "Map<String, IAtom>          atomIDs  = null;", "modifier": "", "type": "Map<String, IAtom>", "declarator": "atomIDs  = null", "var_name": "atomIDs"}], "methods": [{"identifier": "PCCompoundASNReader", "parameters": "(Reader input)", "modifiers": "public", "return": "", "signature": " PCCompoundASNReader(Reader input)", "full_signature": "public  PCCompoundASNReader(Reader input)", "class_method_signature": "PCCompoundASNReader.PCCompoundASNReader(Reader input)", "testcase": false, "constructor": true}, {"identifier": "PCCompoundASNReader", "parameters": "(InputStream input)", "modifiers": "public", "return": "", "signature": " PCCompoundASNReader(InputStream input)", "full_signature": "public  PCCompoundASNReader(InputStream input)", "class_method_signature": "PCCompoundASNReader.PCCompoundASNReader(InputStream input)", "testcase": false, "constructor": true}, {"identifier": "PCCompoundASNReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " PCCompoundASNReader()", "full_signature": "public  PCCompoundASNReader()", "class_method_signature": "PCCompoundASNReader.PCCompoundASNReader()", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "PCCompoundASNReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(Reader input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(Reader input)", "full_signature": "@Override public void setReader(Reader input)", "class_method_signature": "PCCompoundASNReader.setReader(Reader input)", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(InputStream input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(InputStream input)", "full_signature": "@Override public void setReader(InputStream input)", "class_method_signature": "PCCompoundASNReader.setReader(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "PCCompoundASNReader.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(T object)", "modifiers": "@Override public", "return": "T", "signature": "T read(T object)", "full_signature": "@Override public T read(T object)", "class_method_signature": "PCCompoundASNReader.read(T object)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PCCompoundASNReader.close()", "testcase": false, "constructor": false}, {"identifier": "readChemFile", "parameters": "(IChemFile file)", "modifiers": "private", "return": "IChemFile", "signature": "IChemFile readChemFile(IChemFile file)", "full_signature": "private IChemFile readChemFile(IChemFile file)", "class_method_signature": "PCCompoundASNReader.readChemFile(IChemFile file)", "testcase": false, "constructor": false}, {"identifier": "processBlock", "parameters": "(String line)", "modifiers": "private", "return": "void", "signature": "void processBlock(String line)", "full_signature": "private void processBlock(String line)", "class_method_signature": "PCCompoundASNReader.processBlock(String line)", "testcase": false, "constructor": false}, {"identifier": "processPropsBlock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processPropsBlock()", "full_signature": "private void processPropsBlock()", "class_method_signature": "PCCompoundASNReader.processPropsBlock()", "testcase": false, "constructor": false}, {"identifier": "processPropsBlockBlock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processPropsBlockBlock()", "full_signature": "private void processPropsBlockBlock()", "class_method_signature": "PCCompoundASNReader.processPropsBlockBlock()", "testcase": false, "constructor": false}, {"identifier": "extractURN", "parameters": "()", "modifiers": "private", "return": "URN", "signature": "URN extractURN()", "full_signature": "private URN extractURN()", "class_method_signature": "PCCompoundASNReader.extractURN()", "testcase": false, "constructor": false}, {"identifier": "processAtomBlock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processAtomBlock()", "full_signature": "private void processAtomBlock()", "class_method_signature": "PCCompoundASNReader.processAtomBlock()", "testcase": false, "constructor": false}, {"identifier": "processBondBlock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processBondBlock()", "full_signature": "private void processBondBlock()", "class_method_signature": "PCCompoundASNReader.processBondBlock()", "testcase": false, "constructor": false}, {"identifier": "getAtom", "parameters": "(int i)", "modifiers": "private", "return": "IAtom", "signature": "IAtom getAtom(int i)", "full_signature": "private IAtom getAtom(int i)", "class_method_signature": "PCCompoundASNReader.getAtom(int i)", "testcase": false, "constructor": false}, {"identifier": "getBond", "parameters": "(int i)", "modifiers": "private", "return": "IBond", "signature": "IBond getBond(int i)", "full_signature": "private IBond getBond(int i)", "class_method_signature": "PCCompoundASNReader.getBond(int i)", "testcase": false, "constructor": false}, {"identifier": "processAtomBlockBlock", "parameters": "(String line)", "modifiers": "private", "return": "void", "signature": "void processAtomBlockBlock(String line)", "full_signature": "private void processAtomBlockBlock(String line)", "class_method_signature": "PCCompoundASNReader.processAtomBlockBlock(String line)", "testcase": false, "constructor": false}, {"identifier": "processBondBlockBlock", "parameters": "(String line)", "modifiers": "private", "return": "void", "signature": "void processBondBlockBlock(String line)", "full_signature": "private void processBondBlockBlock(String line)", "class_method_signature": "PCCompoundASNReader.processBondBlockBlock(String line)", "testcase": false, "constructor": false}, {"identifier": "processAtomAIDs", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processAtomAIDs()", "full_signature": "private void processAtomAIDs()", "class_method_signature": "PCCompoundASNReader.processAtomAIDs()", "testcase": false, "constructor": false}, {"identifier": "processBondAtomIDs", "parameters": "(int pos)", "modifiers": "private", "return": "void", "signature": "void processBondAtomIDs(int pos)", "full_signature": "private void processBondAtomIDs(int pos)", "class_method_signature": "PCCompoundASNReader.processBondAtomIDs(int pos)", "testcase": false, "constructor": false}, {"identifier": "processAtomElements", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processAtomElements()", "full_signature": "private void processAtomElements()", "class_method_signature": "PCCompoundASNReader.processAtomElements()", "testcase": false, "constructor": false}, {"identifier": "toSymbol", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String toSymbol(String value)", "full_signature": "private String toSymbol(String value)", "class_method_signature": "PCCompoundASNReader.toSymbol(String value)", "testcase": false, "constructor": false}, {"identifier": "skipBlock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void skipBlock()", "full_signature": "private void skipBlock()", "class_method_signature": "PCCompoundASNReader.skipBlock()", "testcase": false, "constructor": false}, {"identifier": "getCommand", "parameters": "(String line)", "modifiers": "private", "return": "String", "signature": "String getCommand(String line)", "full_signature": "private String getCommand(String line)", "class_method_signature": "PCCompoundASNReader.getCommand(String line)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String line)", "modifiers": "private", "return": "String", "signature": "String getValue(String line)", "full_signature": "private String getValue(String line)", "class_method_signature": "PCCompoundASNReader.getValue(String line)", "testcase": false, "constructor": false}, {"identifier": "getQuotedValue", "parameters": "(String line)", "modifiers": "private", "return": "String", "signature": "String getQuotedValue(String line)", "full_signature": "private String getQuotedValue(String line)", "class_method_signature": "PCCompoundASNReader.getQuotedValue(String line)", "testcase": false, "constructor": false}], "file": "storage/io/src/main/java/org/openscience/cdk/io/PCCompoundASNReader.java"}, "focal_method": {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean accepts(Class<? extends IChemObject> classObject) {\n        if (IChemFile.class.equals(classObject)) return true;\n        Class<?>[] interfaces = classObject.getInterfaces();\n        for (int i = 0; i < interfaces.length; i++) {\n            if (IChemFile.class.equals(interfaces[i])) return true;\n        }\n        Class superClass = classObject.getSuperclass();\n        if (superClass != null) return this.accepts(superClass);\n        return false;\n    }", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "PCCompoundASNReader.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false, "invocations": ["equals", "getInterfaces", "equals", "getSuperclass", "accepts"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}