{"test_class": {"identifier": "SingleElectronDiffTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "misc/diff/src/test/java/org/openscience/cdk/tools/diff/SingleElectronDiffTest.java"}, "test_case": {"identifier": "testDiff", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDiff() {\n        IAtom carbon = mock(IAtom.class);\n        IAtom oxygen = mock(IAtom.class);\n\n        when(carbon.getSymbol()).thenReturn(\"C\");\n        when(oxygen.getSymbol()).thenReturn(\"O\");\n\n        ISingleElectron bond1 = mock(ISingleElectron.class);\n        ISingleElectron bond2 = mock(ISingleElectron.class);\n\n        when(bond1.getAtom()).thenReturn(carbon);\n        when(bond2.getAtom()).thenReturn(oxygen);\n\n        String result = SingleElectronDiff.diff(bond1, bond2);\n        Assert.assertNotNull(result);\n        Assert.assertNotSame(0, result.length());\n        assertContains(result, \"SingleElectronDiff\");\n        assertContains(result, \"AtomDiff\");\n        assertContains(result, \"C/O\");\n    }", "signature": "void testDiff()", "full_signature": "@Test public void testDiff()", "class_method_signature": "SingleElectronDiffTest.testDiff()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getSymbol", "thenReturn", "when", "getSymbol", "mock", "mock", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "diff", "assertNotNull", "assertNotSame", "length", "assertContains", "assertContains", "assertContains"]}, "focal_class": {"identifier": "SingleElectronDiff", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SingleElectronDiff", "parameters": "()", "modifiers": "private", "return": "", "signature": " SingleElectronDiff()", "full_signature": "private  SingleElectronDiff()", "class_method_signature": "SingleElectronDiff.SingleElectronDiff()", "testcase": false, "constructor": true}, {"identifier": "diff", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "String", "signature": "String diff(IChemObject first, IChemObject second)", "full_signature": "public static String diff(IChemObject first, IChemObject second)", "class_method_signature": "SingleElectronDiff.diff(IChemObject first, IChemObject second)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "IDifference", "signature": "IDifference difference(IChemObject first, IChemObject second)", "full_signature": "public static IDifference difference(IChemObject first, IChemObject second)", "class_method_signature": "SingleElectronDiff.difference(IChemObject first, IChemObject second)", "testcase": false, "constructor": false}], "file": "misc/diff/src/main/java/org/openscience/cdk/tools/diff/SingleElectronDiff.java"}, "focal_method": {"identifier": "diff", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "String", "body": "public static String diff(IChemObject first, IChemObject second) {\n        IDifference diff = difference(first, second);\n        if (diff == null) {\n            return \"\";\n        } else {\n            return diff.toString();\n        }\n    }", "signature": "String diff(IChemObject first, IChemObject second)", "full_signature": "public static String diff(IChemObject first, IChemObject second)", "class_method_signature": "SingleElectronDiff.diff(IChemObject first, IChemObject second)", "testcase": false, "constructor": false, "invocations": ["difference", "toString"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}