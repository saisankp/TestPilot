{"test_class": {"identifier": "SccpExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Router router = null;", "modifier": "private", "type": "Router", "declarator": "router = null", "var_name": "router"}, {"original_string": "private SccpResource sccpResource = null;", "modifier": "private", "type": "SccpResource", "declarator": "sccpResource = null", "var_name": "sccpResource"}, {"original_string": "private SccpStackImpl sccpStack = null;", "modifier": "private", "type": "SccpStackImpl", "declarator": "sccpStack = null", "var_name": "sccpStack"}, {"original_string": "private SccpExecutor sccpExecutor = null;", "modifier": "private", "type": "SccpExecutor", "declarator": "sccpExecutor = null", "var_name": "sccpExecutor"}], "file": "sccp/sccp-impl/src/test/java/org/mobicents/protocols/ss7/sccp/impl/oam/SccpExecutorTest.java"}, "test_case": {"identifier": "testManageAddress", "parameters": "()", "modifiers": "@Test(groups = { \"oam\", \"functional.mgmt\" }) public", "return": "void", "body": "@Test(groups = { \"oam\", \"functional.mgmt\" })\n    public void testManageAddress() {\n        String prim_addressCmd = \"sccp address create 1 71 6535 8 0 0 12 93707100007\";\n        String result = this.sccpExecutor.execute(prim_addressCmd.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.ADDRESS_SUCCESSFULLY_ADDED, this.sccpStack.getName()));\n        assertEquals(this.router.getRoutingAddresses().size(), 1);\n\n        // test show\n        prim_addressCmd = \"sccp address show\";\n        result = this.sccpExecutor.execute(prim_addressCmd.split(\" \"));\n        assertEquals(result, \"key=1  pc=6535,ssn=8,AI=71,gt=GlobalTitle0001Impl [digits=93707100007, natureOfAddress=SPARE_12, encodingScheme=BCDOddEncodingScheme[type=BCD_ODD, code=1]]\\n\");\n    }", "signature": "void testManageAddress()", "full_signature": "@Test(groups = { \"oam\", \"functional.mgmt\" }) public void testManageAddress()", "class_method_signature": "SccpExecutorTest.testManageAddress()", "testcase": true, "constructor": false, "invocations": ["execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRoutingAddresses", "execute", "split", "assertEquals"]}, "focal_class": {"identifier": "SccpExecutor", "superclass": "", "interfaces": "implements ShellExecutor", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(SccpExecutor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(SccpExecutor.class)", "var_name": "logger"}, {"original_string": "private FastMap<String, SccpStackImpl> sccpStacks = new FastMap<String, SccpStackImpl>();", "modifier": "private", "type": "FastMap<String, SccpStackImpl>", "declarator": "sccpStacks = new FastMap<String, SccpStackImpl>()", "var_name": "sccpStacks"}, {"original_string": "private SccpStackImpl sccpStack = null;", "modifier": "private", "type": "SccpStackImpl", "declarator": "sccpStack = null", "var_name": "sccpStack"}], "methods": [{"identifier": "SccpExecutor", "parameters": "()", "modifiers": "public", "return": "", "signature": " SccpExecutor()", "full_signature": "public  SccpExecutor()", "class_method_signature": "SccpExecutor.SccpExecutor()", "testcase": false, "constructor": true}, {"identifier": "setSccpStacks", "parameters": "(Map<String, SccpStackImpl> sccpStacksTemp)", "modifiers": "public", "return": "void", "signature": "void setSccpStacks(Map<String, SccpStackImpl> sccpStacksTemp)", "full_signature": "public void setSccpStacks(Map<String, SccpStackImpl> sccpStacksTemp)", "class_method_signature": "SccpExecutor.setSccpStacks(Map<String, SccpStackImpl> sccpStacksTemp)", "testcase": false, "constructor": false}, {"identifier": "setDefaultValue", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setDefaultValue()", "full_signature": "private void setDefaultValue()", "class_method_signature": "SccpExecutor.setDefaultValue()", "testcase": false, "constructor": false}, {"identifier": "getSccpStacks", "parameters": "()", "modifiers": "public", "return": "Map<String, SccpStackImpl>", "signature": "Map<String, SccpStackImpl> getSccpStacks()", "full_signature": "public Map<String, SccpStackImpl> getSccpStacks()", "class_method_signature": "SccpExecutor.getSccpStacks()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String[] options)", "modifiers": "public", "return": "String", "signature": "String execute(String[] options)", "full_signature": "public String execute(String[] options)", "class_method_signature": "SccpExecutor.execute(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageRss", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageRss(String[] options)", "full_signature": "private String manageRss(String[] options)", "class_method_signature": "SccpExecutor.manageRss(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageRsp", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageRsp(String[] options)", "full_signature": "private String manageRsp(String[] options)", "class_method_signature": "SccpExecutor.manageRsp(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageAddress", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageAddress(String[] options)", "full_signature": "private String manageAddress(String[] options)", "class_method_signature": "SccpExecutor.manageAddress(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageRule(String[] options)", "full_signature": "private String manageRule(String[] options)", "class_method_signature": "SccpExecutor.manageRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "createRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String createRule(String[] options)", "full_signature": "private String createRule(String[] options)", "class_method_signature": "SccpExecutor.createRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "modifyRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String modifyRule(String[] options)", "full_signature": "private String modifyRule(String[] options)", "class_method_signature": "SccpExecutor.modifyRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "deleteRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String deleteRule(String[] options)", "full_signature": "private String deleteRule(String[] options)", "class_method_signature": "SccpExecutor.deleteRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "showRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String showRule(String[] options)", "full_signature": "private String showRule(String[] options)", "class_method_signature": "SccpExecutor.showRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "createAddress", "parameters": "(String[] options, int index, boolean isRule)", "modifiers": "private", "return": "SccpAddress", "signature": "SccpAddress createAddress(String[] options, int index, boolean isRule)", "full_signature": "private SccpAddress createAddress(String[] options, int index, boolean isRule)", "class_method_signature": "SccpExecutor.createAddress(String[] options, int index, boolean isRule)", "testcase": false, "constructor": false}, {"identifier": "manageLmr", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageLmr(String[] options)", "full_signature": "private String manageLmr(String[] options)", "class_method_signature": "SccpExecutor.manageLmr(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageSap", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageSap(String[] options)", "full_signature": "private String manageSap(String[] options)", "class_method_signature": "SccpExecutor.manageSap(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageDest", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageDest(String[] options)", "full_signature": "private String manageDest(String[] options)", "class_method_signature": "SccpExecutor.manageDest(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageConcernedSpc", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageConcernedSpc(String[] options)", "full_signature": "private String manageConcernedSpc(String[] options)", "class_method_signature": "SccpExecutor.manageConcernedSpc(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageSet", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageSet(String[] options)", "full_signature": "private String manageSet(String[] options)", "class_method_signature": "SccpExecutor.manageSet(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageGet", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageGet(String[] options)", "full_signature": "private String manageGet(String[] options)", "class_method_signature": "SccpExecutor.manageGet(String[] options)", "testcase": false, "constructor": false}, {"identifier": "handles", "parameters": "(String command)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handles(String command)", "full_signature": "@Override public boolean handles(String command)", "class_method_signature": "SccpExecutor.handles(String command)", "testcase": false, "constructor": false}], "file": "sccp/sccp-impl/src/main/java/org/mobicents/protocols/ss7/sccp/impl/oam/SccpExecutor.java"}, "focal_method": {"identifier": "manageAddress", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "body": "private String manageAddress(String[] options) throws Exception {\n        // Minimum 3 needed. Show\n        if (options.length < 3) {\n            return SccpOAMMessage.INVALID_COMMAND;\n        }\n\n        String command = options[2];\n\n        if (command == null) {\n            return SccpOAMMessage.INVALID_COMMAND;\n        }\n\n        if (command.equals(\"create\")) {\n            if (options.length < 4) {\n                return SccpOAMMessage.INVALID_COMMAND;\n            }\n            int addressId = Integer.parseInt(options[3]);\n\n            int count = 11;\n\n            while (count < options.length) {\n                String key = options[count++];\n                if (key == null) {\n                    return SccpOAMMessage.INVALID_COMMAND;\n                }\n\n                if (key.equals(\"stackname\")) {\n                    String m3uaStackName = options[count++];\n\n                    SccpStackImpl sccpStaclImpl = this.sccpStacks.get(m3uaStackName);\n\n                    if (sccpStaclImpl == null) {\n                        return String.format(SccpOAMMessage.NO_SCCP_MANAGEMENT_BEAN_FOR_NAME, m3uaStackName);\n                    }\n\n                    this.sccpStack = sccpStaclImpl;\n                } else {\n                    return SccpOAMMessage.INVALID_COMMAND;\n                }\n\n            }\n\n            this.setDefaultValue();\n            SccpAddress address = this.createAddress(options, 4, false);\n\n            this.sccpStack.getRouter().addRoutingAddress(addressId, address);\n            return String.format(SccpOAMMessage.ADDRESS_SUCCESSFULLY_ADDED, this.sccpStack.getName());\n        } else if (command.equals(\"modify\")) {\n            if (options.length < 4) {\n                return SccpOAMMessage.INVALID_COMMAND;\n            }\n            int addressId = Integer.parseInt(options[3]);\n\n            int count = 11;\n\n            while (count < options.length) {\n                String key = options[count++];\n                if (key == null) {\n                    return SccpOAMMessage.INVALID_COMMAND;\n                }\n\n                if (key.equals(\"stackname\")) {\n                    String m3uaStackName = options[count++];\n\n                    SccpStackImpl sccpStaclImpl = this.sccpStacks.get(m3uaStackName);\n\n                    if (sccpStaclImpl == null) {\n                        return String.format(SccpOAMMessage.NO_SCCP_MANAGEMENT_BEAN_FOR_NAME, m3uaStackName);\n                    }\n\n                    this.sccpStack = sccpStaclImpl;\n                } else {\n                    return SccpOAMMessage.INVALID_COMMAND;\n                }\n\n            }\n\n            this.setDefaultValue();\n\n            SccpAddress address = this.createAddress(options, 4, false);\n\n            this.sccpStack.getRouter().modifyRoutingAddress(addressId, address);\n            return String.format(SccpOAMMessage.ADDRESS_SUCCESSFULLY_MODIFIED, this.sccpStack.getName());\n        } else if (command.equals(\"delete\")) {\n            // sccp address delete <id> stackname <stack-name>\n\n            if (options.length < 4) {\n                return SccpOAMMessage.INVALID_COMMAND;\n            }\n            int addressId = Integer.parseInt(options[3]);\n\n            int count = 4;\n\n            while (count < options.length) {\n                String key = options[count++];\n                if (key == null) {\n                    return SccpOAMMessage.INVALID_COMMAND;\n                }\n\n                if (key.equals(\"stackname\")) {\n                    String m3uaStackName = options[count++];\n\n                    SccpStackImpl sccpStaclImpl = this.sccpStacks.get(m3uaStackName);\n\n                    if (sccpStaclImpl == null) {\n                        return String.format(SccpOAMMessage.NO_SCCP_MANAGEMENT_BEAN_FOR_NAME, m3uaStackName);\n                    }\n\n                    this.sccpStack = sccpStaclImpl;\n                } else {\n                    return SccpOAMMessage.INVALID_COMMAND;\n                }\n\n            }\n\n            this.setDefaultValue();\n\n            this.sccpStack.getRouter().removeRoutingAddress(addressId);\n            return String.format(SccpOAMMessage.ADDRESS_SUCCESSFULLY_DELETED, this.sccpStack.getName());\n\n        } else if (command.equals(\"show\")) {\n            // sccp address show id <id> stackname <stack-name>\n\n            int count = 3;\n            int addressId = -1;\n            while (count < options.length) {\n                String key = options[count++];\n                if (key == null) {\n                    return SccpOAMMessage.INVALID_COMMAND;\n                }\n\n                if (key.equals(\"stackname\")) {\n                    String m3uaStackName = options[count++];\n\n                    SccpStackImpl sccpStaclImpl = this.sccpStacks.get(m3uaStackName);\n\n                    if (sccpStaclImpl == null) {\n                        return String.format(SccpOAMMessage.NO_SCCP_MANAGEMENT_BEAN_FOR_NAME, m3uaStackName);\n                    }\n\n                    this.sccpStack = sccpStaclImpl;\n                } else if (key.equals(\"id\")) {\n                    addressId = Integer.parseInt(options[count++]);\n                } else {\n                    return SccpOAMMessage.INVALID_COMMAND;\n                }\n\n            }\n\n            this.setDefaultValue();\n\n            if (addressId != -1) {\n                SccpAddress pa = this.sccpStack.getRouter().getRoutingAddress(addressId);\n                if (pa == null) {\n                    return String.format(SccpOAMMessage.ADDRESS_DOESNT_EXIST, this.sccpStack.getName());\n                }\n                return pa.toString();\n            }\n\n            if (this.sccpStack.getRouter().getRoutingAddresses().size() == 0) {\n                return String.format(SccpOAMMessage.ADDRESS_DOESNT_EXIST, this.sccpStack.getName());\n            }\n\n            StringBuffer sb = new StringBuffer();\n\n            Map<Integer, SccpAddress> idVsPrimAdd = this.sccpStack.getRouter().getRoutingAddresses();\n            for (Integer e : idVsPrimAdd.keySet()) {\n                SccpAddress address = idVsPrimAdd.get(e);\n                sb.append(\"key=\");\n                sb.append(e);\n                sb.append(\"  \");\n                sb.append(address);\n                sb.append(\"\\n\");\n            }\n            return sb.toString();\n        }\n\n        return SccpOAMMessage.INVALID_COMMAND;\n    }", "signature": "String manageAddress(String[] options)", "full_signature": "private String manageAddress(String[] options)", "class_method_signature": "SccpExecutor.manageAddress(String[] options)", "testcase": false, "constructor": false, "invocations": ["equals", "parseInt", "equals", "get", "format", "setDefaultValue", "createAddress", "addRoutingAddress", "getRouter", "format", "getName", "equals", "parseInt", "equals", "get", "format", "setDefaultValue", "createAddress", "modifyRoutingAddress", "getRouter", "format", "getName", "equals", "parseInt", "equals", "get", "format", "setDefaultValue", "removeRoutingAddress", "getRouter", "format", "getName", "equals", "equals", "get", "format", "equals", "parseInt", "setDefaultValue", "getRoutingAddress", "getRouter", "format", "getName", "toString", "size", "getRoutingAddresses", "getRouter", "format", "getName", "getRoutingAddresses", "getRouter", "keySet", "get", "append", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 53577396, "url": "https://github.com/polarking/jss7-attack-simulator", "language": "Java", "is_fork": false, "fork_count": 27, "stargazer_count": 29, "size": 28339, "license": "licensed"}}