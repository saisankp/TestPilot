{"test_class": {"identifier": "TestSequenceFileSerializerFactory", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-sinks/flume-hdfs-sink/src/test/java/org/apache/flume/sink/hdfs/TestSequenceFileSerializerFactory.java"}, "test_case": {"identifier": "getCustomFormatter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getCustomFormatter() {\n    SequenceFileSerializer formatter = SequenceFileSerializerFactory.getSerializer(\n        \"org.apache.flume.sink.hdfs.MyCustomSerializer$Builder\", new Context());\n\n    assertTrue(formatter != null);\n    assertTrue(formatter.getClass().getName(),\n        formatter instanceof MyCustomSerializer);\n  }", "signature": "void getCustomFormatter()", "full_signature": "@Test public void getCustomFormatter()", "class_method_signature": "TestSequenceFileSerializerFactory.getCustomFormatter()", "testcase": true, "constructor": false, "invocations": ["getSerializer", "assertTrue", "assertTrue", "getName", "getClass"]}, "focal_class": {"identifier": "SequenceFileSerializerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger =\n      LoggerFactory.getLogger(SequenceFileSerializerFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n      LoggerFactory.getLogger(SequenceFileSerializerFactory.class)", "var_name": "logger"}, {"original_string": "static final String CTX_PREFIX = \"writeFormat.\";", "modifier": "static final", "type": "String", "declarator": "CTX_PREFIX = \"writeFormat.\"", "var_name": "CTX_PREFIX"}], "methods": [{"identifier": "getSerializer", "parameters": "(String formatType,\n                                              Context context)", "modifiers": "@SuppressWarnings(\"unchecked\") static", "return": "SequenceFileSerializer", "signature": "SequenceFileSerializer getSerializer(String formatType,\n                                              Context context)", "full_signature": "@SuppressWarnings(\"unchecked\") static SequenceFileSerializer getSerializer(String formatType,\n                                              Context context)", "class_method_signature": "SequenceFileSerializerFactory.getSerializer(String formatType,\n                                              Context context)", "testcase": false, "constructor": false}], "file": "flume-ng-sinks/flume-hdfs-sink/src/main/java/org/apache/flume/sink/hdfs/SequenceFileSerializerFactory.java"}, "focal_method": {"identifier": "getSerializer", "parameters": "(String formatType,\n                                              Context context)", "modifiers": "@SuppressWarnings(\"unchecked\") static", "return": "SequenceFileSerializer", "body": "@SuppressWarnings(\"unchecked\")\n  static SequenceFileSerializer getSerializer(String formatType,\n                                              Context context) {\n\n    Preconditions.checkNotNull(formatType,\n        \"serialize type must not be null\");\n\n    // try to find builder class in enum of known formatters\n    SequenceFileSerializerType type;\n    try {\n      type = SequenceFileSerializerType.valueOf(formatType);\n    } catch (IllegalArgumentException e) {\n      logger.debug(\"Not in enum, loading builder class: {}\", formatType);\n      type = SequenceFileSerializerType.Other;\n    }\n    Class<? extends SequenceFileSerializer.Builder> builderClass =\n        type.getBuilderClass();\n\n    // handle the case where they have specified their own builder in the config\n    if (builderClass == null) {\n      try {\n        Class c = Class.forName(formatType);\n        if (c != null && SequenceFileSerializer.Builder.class.isAssignableFrom(c)) {\n          builderClass = (Class<? extends SequenceFileSerializer.Builder>) c;\n        } else {\n          logger.error(\"Unable to instantiate Builder from {}\", formatType);\n          return null;\n        }\n      } catch (ClassNotFoundException ex) {\n        logger.error(\"Class not found: \" + formatType, ex);\n        return null;\n      } catch (ClassCastException ex) {\n        logger.error(\"Class does not extend \" +\n            SequenceFileSerializer.Builder.class.getCanonicalName() + \": \" +\n            formatType, ex);\n        return null;\n      }\n    }\n\n    // build the builder\n    SequenceFileSerializer.Builder builder;\n    try {\n      builder = builderClass.newInstance();\n    } catch (InstantiationException ex) {\n      logger.error(\"Cannot instantiate builder: \" + formatType, ex);\n      return null;\n    } catch (IllegalAccessException ex) {\n      logger.error(\"Cannot instantiate builder: \" + formatType, ex);\n      return null;\n    }\n\n    return builder.build(context);\n  }", "signature": "SequenceFileSerializer getSerializer(String formatType,\n                                              Context context)", "full_signature": "@SuppressWarnings(\"unchecked\") static SequenceFileSerializer getSerializer(String formatType,\n                                              Context context)", "class_method_signature": "SequenceFileSerializerFactory.getSerializer(String formatType,\n                                              Context context)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "valueOf", "debug", "getBuilderClass", "forName", "isAssignableFrom", "error", "error", "error", "getCanonicalName", "newInstance", "error", "error", "build"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}