{"test_class": {"identifier": "ParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-net/src/test/java/com/fireflysource/net/websocket/common/decoder/ParserTest.java"}, "test_case": {"identifier": "testParseCase515", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseCase515() {\n        List<WebSocketFrame> send = new ArrayList<>();\n        send.add(new TextFrame().setPayload(\"fragment1\").setFin(false));\n        send.add(new ContinuationFrame().setPayload(\"fragment2\").setFin(true));\n        send.add(new ContinuationFrame().setPayload(\"fragment3\").setFin(false)); // bad frame\n        send.add(new TextFrame().setPayload(\"fragment4\").setFin(true));\n        send.add(new CloseInfo(StatusCode.NORMAL).asFrame());\n\n        ByteBuffer completeBuf = UnitGenerator.generate(send);\n        UnitParser parser = new UnitParser();\n        IncomingFramesCapture capture = new IncomingFramesCapture();\n        parser.setIncomingFramesHandler(capture);\n\n        ProtocolException x = assertThrows(ProtocolException.class, () -> parser.parseQuietly(completeBuf));\n        assertTrue(x.getMessage().contains(\"CONTINUATION frame without prior !FIN\"));\n    }", "signature": "void testParseCase515()", "full_signature": "@Test public void testParseCase515()", "class_method_signature": "ParserTest.testParseCase515()", "testcase": true, "constructor": false, "invocations": ["add", "setFin", "setPayload", "add", "setFin", "setPayload", "add", "setFin", "setPayload", "add", "setFin", "setPayload", "add", "asFrame", "generate", "setIncomingFramesHandler", "assertThrows", "parseQuietly", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "Parser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final LazyLogger LOG = SystemLogger.create(Parser.class);", "modifier": "private static final", "type": "LazyLogger", "declarator": "LOG = SystemLogger.create(Parser.class)", "var_name": "LOG"}, {"original_string": "private final WebSocketPolicy policy;", "modifier": "private final", "type": "WebSocketPolicy", "declarator": "policy", "var_name": "policy"}, {"original_string": "private final LongAdder messagesIn = new LongAdder();", "modifier": "private final", "type": "LongAdder", "declarator": "messagesIn = new LongAdder()", "var_name": "messagesIn"}, {"original_string": "private State state = State.START;", "modifier": "private", "type": "State", "declarator": "state = State.START", "var_name": "state"}, {"original_string": "private int cursor = 0;", "modifier": "private", "type": "int", "declarator": "cursor = 0", "var_name": "cursor"}, {"original_string": "private WebSocketFrame frame;", "modifier": "private", "type": "WebSocketFrame", "declarator": "frame", "var_name": "frame"}, {"original_string": "private boolean priorDataFrame;", "modifier": "private", "type": "boolean", "declarator": "priorDataFrame", "var_name": "priorDataFrame"}, {"original_string": "private ByteBuffer payload;", "modifier": "private", "type": "ByteBuffer", "declarator": "payload", "var_name": "payload"}, {"original_string": "private int payloadLength;", "modifier": "private", "type": "int", "declarator": "payloadLength", "var_name": "payloadLength"}, {"original_string": "private PayloadProcessor maskProcessor = new DeMaskProcessor();", "modifier": "private", "type": "PayloadProcessor", "declarator": "maskProcessor = new DeMaskProcessor()", "var_name": "maskProcessor"}, {"original_string": "private byte flagsInUse = 0x00;", "modifier": "private", "type": "byte", "declarator": "flagsInUse = 0x00", "var_name": "flagsInUse"}, {"original_string": "private IncomingFrames incomingFramesHandler;", "modifier": "private", "type": "IncomingFrames", "declarator": "incomingFramesHandler", "var_name": "incomingFramesHandler"}], "methods": [{"identifier": "Parser", "parameters": "(WebSocketPolicy wspolicy)", "modifiers": "public", "return": "", "signature": " Parser(WebSocketPolicy wspolicy)", "full_signature": "public  Parser(WebSocketPolicy wspolicy)", "class_method_signature": "Parser.Parser(WebSocketPolicy wspolicy)", "testcase": false, "constructor": true}, {"identifier": "assertSanePayloadLength", "parameters": "(long len)", "modifiers": "private", "return": "void", "signature": "void assertSanePayloadLength(long len)", "full_signature": "private void assertSanePayloadLength(long len)", "class_method_signature": "Parser.assertSanePayloadLength(long len)", "testcase": false, "constructor": false}, {"identifier": "configureFromExtensions", "parameters": "(List<? extends Extension> exts)", "modifiers": "public", "return": "void", "signature": "void configureFromExtensions(List<? extends Extension> exts)", "full_signature": "public void configureFromExtensions(List<? extends Extension> exts)", "class_method_signature": "Parser.configureFromExtensions(List<? extends Extension> exts)", "testcase": false, "constructor": false}, {"identifier": "getIncomingFramesHandler", "parameters": "()", "modifiers": "public", "return": "IncomingFrames", "signature": "IncomingFrames getIncomingFramesHandler()", "full_signature": "public IncomingFrames getIncomingFramesHandler()", "class_method_signature": "Parser.getIncomingFramesHandler()", "testcase": false, "constructor": false}, {"identifier": "getPolicy", "parameters": "()", "modifiers": "public", "return": "WebSocketPolicy", "signature": "WebSocketPolicy getPolicy()", "full_signature": "public WebSocketPolicy getPolicy()", "class_method_signature": "Parser.getPolicy()", "testcase": false, "constructor": false}, {"identifier": "isRsv1InUse", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRsv1InUse()", "full_signature": "public boolean isRsv1InUse()", "class_method_signature": "Parser.isRsv1InUse()", "testcase": false, "constructor": false}, {"identifier": "isRsv2InUse", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRsv2InUse()", "full_signature": "public boolean isRsv2InUse()", "class_method_signature": "Parser.isRsv2InUse()", "testcase": false, "constructor": false}, {"identifier": "isRsv3InUse", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRsv3InUse()", "full_signature": "public boolean isRsv3InUse()", "class_method_signature": "Parser.isRsv3InUse()", "testcase": false, "constructor": false}, {"identifier": "notifyFrame", "parameters": "(final Frame f)", "modifiers": "protected", "return": "void", "signature": "void notifyFrame(final Frame f)", "full_signature": "protected void notifyFrame(final Frame f)", "class_method_signature": "Parser.notifyFrame(final Frame f)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(ByteBuffer buffer)", "modifiers": "public", "return": "void", "signature": "void parse(ByteBuffer buffer)", "full_signature": "public void parse(ByteBuffer buffer)", "class_method_signature": "Parser.parse(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "parseSingleFrame", "parameters": "(ByteBuffer buffer)", "modifiers": "public", "return": "void", "signature": "void parseSingleFrame(ByteBuffer buffer)", "full_signature": "public void parseSingleFrame(ByteBuffer buffer)", "class_method_signature": "Parser.parseSingleFrame(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reset()", "full_signature": "private void reset()", "class_method_signature": "Parser.reset()", "testcase": false, "constructor": false}, {"identifier": "parseFrame", "parameters": "(ByteBuffer buffer)", "modifiers": "private", "return": "boolean", "signature": "boolean parseFrame(ByteBuffer buffer)", "full_signature": "private boolean parseFrame(ByteBuffer buffer)", "class_method_signature": "Parser.parseFrame(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "parsePayload", "parameters": "(ByteBuffer buffer)", "modifiers": "private", "return": "boolean", "signature": "boolean parsePayload(ByteBuffer buffer)", "full_signature": "private boolean parsePayload(ByteBuffer buffer)", "class_method_signature": "Parser.parsePayload(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "setIncomingFramesHandler", "parameters": "(IncomingFrames incoming)", "modifiers": "public", "return": "void", "signature": "void setIncomingFramesHandler(IncomingFrames incoming)", "full_signature": "public void setIncomingFramesHandler(IncomingFrames incoming)", "class_method_signature": "Parser.setIncomingFramesHandler(IncomingFrames incoming)", "testcase": false, "constructor": false}, {"identifier": "getMessagesIn", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMessagesIn()", "full_signature": "public long getMessagesIn()", "class_method_signature": "Parser.getMessagesIn()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Parser.toString()", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/websocket/common/decoder/Parser.java"}, "focal_method": {"identifier": "setIncomingFramesHandler", "parameters": "(IncomingFrames incoming)", "modifiers": "public", "return": "void", "body": "public void setIncomingFramesHandler(IncomingFrames incoming) {\n        this.incomingFramesHandler = incoming;\n    }", "signature": "void setIncomingFramesHandler(IncomingFrames incoming)", "full_signature": "public void setIncomingFramesHandler(IncomingFrames incoming)", "class_method_signature": "Parser.setIncomingFramesHandler(IncomingFrames incoming)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}