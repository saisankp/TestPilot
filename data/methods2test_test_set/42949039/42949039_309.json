{"test_class": {"identifier": "StoragePolicyProcessorJmsMessageListenerTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private StorageFileHelper storageFileHelper;", "modifier": "@Autowired\n    private", "type": "StorageFileHelper", "declarator": "storageFileHelper", "var_name": "storageFileHelper"}, {"original_string": "@Autowired\n    StoragePolicyProcessorJmsMessageListener storagePolicyProcessorJmsMessageListener;", "modifier": "@Autowired", "type": "StoragePolicyProcessorJmsMessageListener", "declarator": "storagePolicyProcessorJmsMessageListener", "var_name": "storagePolicyProcessorJmsMessageListener"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/StoragePolicyProcessorJmsMessageListenerTest.java"}, "test_case": {"identifier": "testProcessMessageBusinessObjectDataNoExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessMessageBusinessObjectDataNoExists() throws Exception\n    {\n        // Create a business object data key.\n        BusinessObjectDataKey businessObjectDataKey =\n            new BusinessObjectDataKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE,\n                NO_SUBPARTITION_VALUES, DATA_VERSION);\n\n        // Create a storage policy key.\n        StoragePolicyKey storagePolicyKey = new StoragePolicyKey(STORAGE_POLICY_NAMESPACE_CD, STORAGE_POLICY_NAME);\n\n        // Perform a storage policy transition.\n        executeWithoutLogging(StoragePolicyProcessorJmsMessageListener.class, () -> {\n            storagePolicyProcessorJmsMessageListener\n                .processMessage(jsonHelper.objectToJson(new StoragePolicySelection(businessObjectDataKey, storagePolicyKey, INITIAL_VERSION)), null);\n        });\n    }", "signature": "void testProcessMessageBusinessObjectDataNoExists()", "full_signature": "@Test public void testProcessMessageBusinessObjectDataNoExists()", "class_method_signature": "StoragePolicyProcessorJmsMessageListenerTest.testProcessMessageBusinessObjectDataNoExists()", "testcase": true, "constructor": false, "invocations": ["executeWithoutLogging", "processMessage", "objectToJson"]}, "focal_class": {"identifier": "StoragePolicyProcessorJmsMessageListener", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(StoragePolicyProcessorJmsMessageListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(StoragePolicyProcessorJmsMessageListener.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    private StoragePolicyProcessorService storagePolicyProcessorService;", "modifier": "@Autowired\n    private", "type": "StoragePolicyProcessorService", "declarator": "storagePolicyProcessorService", "var_name": "storagePolicyProcessorService"}], "methods": [{"identifier": "controlStoragePolicyProcessorJmsMessageListener", "parameters": "()", "modifiers": "@Scheduled(fixedDelay = 60000) public", "return": "void", "signature": "void controlStoragePolicyProcessorJmsMessageListener()", "full_signature": "@Scheduled(fixedDelay = 60000) public void controlStoragePolicyProcessorJmsMessageListener()", "class_method_signature": "StoragePolicyProcessorJmsMessageListener.controlStoragePolicyProcessorJmsMessageListener()", "testcase": false, "constructor": false}, {"identifier": "processMessage", "parameters": "(String payload, @Headers Map<Object, Object> allHeaders)", "modifiers": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE, containerFactory = \"storagePolicyProcessorJmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE) public", "return": "void", "signature": "void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "full_signature": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE, containerFactory = \"storagePolicyProcessorJmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE) public void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "class_method_signature": "StoragePolicyProcessorJmsMessageListener.processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/StoragePolicyProcessorJmsMessageListener.java"}, "focal_method": {"identifier": "processMessage", "parameters": "(String payload, @Headers Map<Object, Object> allHeaders)", "modifiers": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE, containerFactory = \"storagePolicyProcessorJmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE) public", "return": "void", "body": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE,\n        containerFactory = \"storagePolicyProcessorJmsListenerContainerFactory\",\n        destination = HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE)\n    public void processMessage(String payload, @Headers Map<Object, Object> allHeaders)\n    {\n        LOGGER.info(\"Message received from the JMS queue. jmsQueueName=\\\"{}\\\" jmsMessageHeaders=\\\"{}\\\" jmsMessagePayload={}\",\n            HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE, allHeaders, payload);\n\n        // Process the message as storage policy selection message.\n        try\n        {\n            // Process messages coming from the storage policy selector job.\n            StoragePolicySelection storagePolicySelection = jsonHelper.unmarshallJsonToObject(StoragePolicySelection.class, payload);\n\n            LOGGER.debug(\"Received storage policy selection message: businessObjectDataKey={} storagePolicyKey={} storagePolicyVersion={}\",\n                jsonHelper.objectToJson(storagePolicySelection.getBusinessObjectDataKey()),\n                jsonHelper.objectToJson(storagePolicySelection.getStoragePolicyKey()), storagePolicySelection.getStoragePolicyVersion());\n\n            // Process the storage policy selection message.\n            storagePolicyProcessorService.processStoragePolicySelectionMessage(storagePolicySelection);\n        }\n        catch (RuntimeException | IOException e)\n        {\n            // Log a warning message if storage unit status is already ARCHIVED. Such error case is typically caused by a duplicate SQS message.\n            if (e instanceof IllegalArgumentException &&\n                e.getMessage().startsWith(String.format(\"Storage unit status is \\\"%s\\\"\", StorageUnitStatusEntity.ARCHIVED)))\n            {\n                LOGGER.warn(\"Failed to process message from the JMS queue. jmsQueueName=\\\"{}\\\" jmsMessagePayload={}\",\n                    HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE, payload, e);\n            }\n            // Otherwise, log an error.\n            else\n            {\n                LOGGER.error(\"Failed to process message from the JMS queue. jmsQueueName=\\\"{}\\\" jmsMessagePayload={}\",\n                    HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE, payload, e);\n            }\n        }\n    }", "signature": "void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "full_signature": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE, containerFactory = \"storagePolicyProcessorJmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE) public void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "class_method_signature": "StoragePolicyProcessorJmsMessageListener.processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "testcase": false, "constructor": false, "invocations": ["info", "unmarshallJsonToObject", "debug", "objectToJson", "getBusinessObjectDataKey", "objectToJson", "getStoragePolicyKey", "getStoragePolicyVersion", "processStoragePolicySelectionMessage", "startsWith", "getMessage", "format", "warn", "error"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}