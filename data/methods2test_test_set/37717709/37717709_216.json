{"test_class": {"identifier": "TestEventStrategyDecoratorFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VoiceXmlInterpreterContext context;", "modifier": "private", "type": "VoiceXmlInterpreterContext", "declarator": "context", "var_name": "context"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/event/TestEventStrategyDecoratorFactory.java"}, "test_case": {"identifier": "testGetDecorator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDecorator() throws Exception {\n        final VoiceXmlDocument document = new VoiceXmlDocument();\n        final Vxml vxml = document.getVxml();\n        final Form form = vxml.appendChild(Form.class);\n        final Field field = form.appendChild(Field.class);\n        final ObjectTag object = form.appendChild(ObjectTag.class);\n        final Record record = form.appendChild(Record.class);\n        final Initial initial = form.appendChild(Initial.class);\n\n        final FieldFormItem fieldItem = new FieldFormItem(context, field);\n        final EventStrategyDecoratorFactory factory = new EventStrategyDecoratorFactory();\n        final EventStrategy strategy1 = factory.getDecorator(context, null,\n                null, fieldItem);\n        Assert.assertNotNull(strategy1);\n        Assert.assertEquals(InputItemRecognitionEventStrategy.class,\n                strategy1.getClass());\n\n        final RecordFormItem recordItem = new RecordFormItem(context, record);\n        final EventStrategy strategy2 = factory.getDecorator(context, null,\n                null, recordItem);\n        Assert.assertNotNull(strategy2);\n        Assert.assertEquals(RecordingEventStrategy.class, strategy2.getClass());\n\n        final ObjectFormItem objectItem = new ObjectFormItem(context, object);\n        final EventStrategy strategy3 = factory.getDecorator(context, null,\n                null, objectItem);\n        Assert.assertNotNull(strategy3);\n        Assert.assertEquals(ObjectTagEventStrategy.class, strategy3.getClass());\n\n        final InitialFormItem initialItem = new InitialFormItem(context,\n                initial);\n        final EventStrategy strategy4 = factory.getDecorator(context, null,\n                null, initialItem);\n        Assert.assertNotNull(strategy4);\n        Assert.assertEquals(FormLevelRecognitionEventStrategy.class,\n                strategy4.getClass());\n\n        final EventStrategy strategy5 = factory.getDecorator(context, null,\n                null, null);\n        Assert.assertNull(\"expected a null strategy for a null input item\",\n                strategy5);\n    }", "signature": "void testGetDecorator()", "full_signature": "@Test public void testGetDecorator()", "class_method_signature": "TestEventStrategyDecoratorFactory.testGetDecorator()", "testcase": true, "constructor": false, "invocations": ["getVxml", "appendChild", "appendChild", "appendChild", "appendChild", "appendChild", "getDecorator", "assertNotNull", "assertEquals", "getClass", "getDecorator", "assertNotNull", "assertEquals", "getClass", "getDecorator", "assertNotNull", "assertEquals", "getClass", "getDecorator", "assertNotNull", "assertEquals", "getClass", "getDecorator", "assertNull"]}, "focal_class": {"identifier": "EventStrategyDecoratorFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER =\n            LogManager.getLogger(EventStrategyDecoratorFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n            LogManager.getLogger(EventStrategyDecoratorFactory.class)", "var_name": "LOGGER"}, {"original_string": "private static final Map<String, EventStrategyPrototype>\n        STRATEGIES;", "modifier": "private static final", "type": "Map<String, EventStrategyPrototype>", "declarator": "STRATEGIES", "var_name": "STRATEGIES"}], "methods": [{"identifier": "getDecorator", "parameters": "(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "modifiers": "public", "return": "EventStrategy", "signature": "EventStrategy getDecorator(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "full_signature": "public EventStrategy getDecorator(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "class_method_signature": "EventStrategyDecoratorFactory.getDecorator(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/event/EventStrategyDecoratorFactory.java"}, "focal_method": {"identifier": "getDecorator", "parameters": "(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "modifiers": "public", "return": "EventStrategy", "body": "public EventStrategy getDecorator(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item) {\n        if (item == null) {\n            LOGGER.warn(\"can not obtain a decorator for a null input item\");\n            return null;\n        }\n        final String tagName = item.getNodeTagName();\n        final EventStrategyPrototype prototype = STRATEGIES.get(tagName);\n        if (prototype == null) {\n            LOGGER.warn(\"no decorator for tag '\" + tagName + \"'\");\n            return null;\n        }\n        return prototype.newInstance(context, interpreter, fia, item);\n    }", "signature": "EventStrategy getDecorator(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "full_signature": "public EventStrategy getDecorator(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "class_method_signature": "EventStrategyDecoratorFactory.getDecorator(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "testcase": false, "constructor": false, "invocations": ["warn", "getNodeTagName", "get", "warn", "newInstance"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}