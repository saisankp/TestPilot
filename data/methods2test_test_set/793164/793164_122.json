{"test_class": {"identifier": "AdhocQueryRequestValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AdhocQueryRequestValidator validator;", "modifier": "private", "type": "AdhocQueryRequestValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private QueryRegistry request, requestMpq, folderRequest, folderRequestMpq;", "modifier": "private", "type": "QueryRegistry", "declarator": "request", "var_name": "request"}, {"original_string": "private QueryRegistryTransformer transformer;", "modifier": "private", "type": "QueryRegistryTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "private ValidationProfile iti16Profile, iti18Profile, iti51Profile;", "modifier": "private", "type": "ValidationProfile", "declarator": "iti16Profile", "var_name": "iti16Profile"}], "file": "commons/ihe/xds/src/test/java/org/openehealth/ipf/commons/ihe/xds/core/validate/requests/AdhocQueryRequestValidatorTest.java"}, "test_case": {"identifier": "testMissingPatientIdFolderMPQ", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMissingPatientIdFolderMPQ() {\n        ((FindFoldersForMultiplePatientsQuery) folderRequestMpq.getQuery()).setPatientIds(null);\n        validator.validate(transformer.toEbXML(folderRequestMpq), iti51Profile);\n\n    }", "signature": "void testMissingPatientIdFolderMPQ()", "full_signature": "@Test public void testMissingPatientIdFolderMPQ()", "class_method_signature": "AdhocQueryRequestValidatorTest.testMissingPatientIdFolderMPQ()", "testcase": true, "constructor": false, "invocations": ["setPatientIds", "getQuery", "validate", "toEbXML"]}, "focal_class": {"identifier": "AdhocQueryRequestValidator", "superclass": "", "interfaces": "implements Validator<EbXMLAdhocQueryRequest, ValidationProfile>", "fields": [{"original_string": "private static final CXValidator cxValidator = new CXValidator();", "modifier": "private static final", "type": "CXValidator", "declarator": "cxValidator = new CXValidator()", "var_name": "cxValidator"}, {"original_string": "private static final TimeValidator timeValidator = new TimeValidator();", "modifier": "private static final", "type": "TimeValidator", "declarator": "timeValidator = new TimeValidator()", "var_name": "timeValidator"}, {"original_string": "private static final NopValidator nopValidator = new NopValidator();", "modifier": "private static final", "type": "NopValidator", "declarator": "nopValidator = new NopValidator()", "var_name": "nopValidator"}, {"original_string": "private static final Map<QueryType, Set<String>> ALLOWED_MULTIPLE_SLOTS;", "modifier": "private static final", "type": "Map<QueryType, Set<String>>", "declarator": "ALLOWED_MULTIPLE_SLOTS", "var_name": "ALLOWED_MULTIPLE_SLOTS"}, {"original_string": "private static final Map<List<InteractionId>, List<QueryType>> ALLOWED_QUERY_TYPES;", "modifier": "private static final", "type": "Map<List<InteractionId>, List<QueryType>>", "declarator": "ALLOWED_QUERY_TYPES", "var_name": "ALLOWED_QUERY_TYPES"}], "methods": [{"identifier": "addAllowedMultipleSlots", "parameters": "(QueryType queryType, QueryParameter... parameters)", "modifiers": "private static", "return": "void", "signature": "void addAllowedMultipleSlots(QueryType queryType, QueryParameter... parameters)", "full_signature": "private static void addAllowedMultipleSlots(QueryType queryType, QueryParameter... parameters)", "class_method_signature": "AdhocQueryRequestValidator.addAllowedMultipleSlots(QueryType queryType, QueryParameter... parameters)", "testcase": false, "constructor": false}, {"identifier": "getValidators", "parameters": "(QueryType queryType, ValidationProfile profile)", "modifiers": "private", "return": "QueryParameterValidation[]", "signature": "QueryParameterValidation[] getValidators(QueryType queryType, ValidationProfile profile)", "full_signature": "private QueryParameterValidation[] getValidators(QueryType queryType, ValidationProfile profile)", "class_method_signature": "AdhocQueryRequestValidator.getValidators(QueryType queryType, ValidationProfile profile)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(EbXMLAdhocQueryRequest request, ValidationProfile profile)", "modifiers": "@Override public", "return": "void", "signature": "void validate(EbXMLAdhocQueryRequest request, ValidationProfile profile)", "full_signature": "@Override public void validate(EbXMLAdhocQueryRequest request, ValidationProfile profile)", "class_method_signature": "AdhocQueryRequestValidator.validate(EbXMLAdhocQueryRequest request, ValidationProfile profile)", "testcase": false, "constructor": false}], "file": "commons/ihe/xds/src/main/java/org/openehealth/ipf/commons/ihe/xds/core/validate/requests/AdhocQueryRequestValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(EbXMLAdhocQueryRequest request, ValidationProfile profile)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(EbXMLAdhocQueryRequest request, ValidationProfile profile) {\n        notNull(request, \"request cannot be null\");\n\n        if (profile.getInteractionId() == IpfInteractionId.ITI_63) {\n            metaDataAssert(QueryReturnType.LEAF_CLASS_WITH_REPOSITORY_ITEM.getCode().equals(request.getReturnType()),\n                    UNKNOWN_RETURN_TYPE, request.getReturnType());\n        } else {\n            metaDataAssert(QueryReturnType.LEAF_CLASS.getCode().equals(request.getReturnType())\n                        || QueryReturnType.OBJECT_REF.getCode().equals(request.getReturnType()),\n                UNKNOWN_RETURN_TYPE, request.getReturnType());\n        }\n\n        QueryType queryType = QueryType.valueOfId(request.getId());\n        metaDataAssert(queryType != null, UNKNOWN_QUERY_TYPE, request.getId());\n\n        boolean found = false;\n        for(Map.Entry<List<InteractionId>, List<QueryType>> entry : ALLOWED_QUERY_TYPES.entrySet()) {\n            if (entry.getKey().contains(profile.getInteractionId())) {\n                metaDataAssert(entry.getValue().contains(queryType), UNSUPPORTED_QUERY_TYPE, queryType);\n                found = true;\n                break;\n            }\n        }\n        metaDataAssert(found, UNKNOWN_QUERY_TYPE, queryType);\n\n        if (queryType == QueryType.SQL) {\n            metaDataAssert(request.getSql() != null, MISSING_SQL_QUERY_TEXT);\n        } else {\n            new SlotLengthAndNameUniquenessValidator().validateSlots(\n                    request.getSlots(),\n                    ALLOWED_MULTIPLE_SLOTS.get(queryType));\n            for (QueryParameterValidation validation : getValidators(queryType, profile)) {\n                validation.validate(request);\n            }\n\n            if (queryType == FIND_DOCUMENTS_MPQ) {\n                metaDataAssert(\n                        (! request.getSlotValues(DOC_ENTRY_CLASS_CODE.getSlotName()).isEmpty()) ||\n                        (! request.getSlotValues(DOC_ENTRY_EVENT_CODE.getSlotName()).isEmpty()) ||\n                        (! request.getSlotValues(DOC_ENTRY_HEALTHCARE_FACILITY_TYPE_CODE.getSlotName()).isEmpty()),\n                        ValidationMessage.MISSING_REQUIRED_QUERY_PARAMETER,\n                        \"at least one of $XDSDocumentEntryClassCode, $XDSDocumentEntryEventCodeList, $XDSDocumentEntryHealthcareFacilityTypeCode\");\n            }\n        }\n    }", "signature": "void validate(EbXMLAdhocQueryRequest request, ValidationProfile profile)", "full_signature": "@Override public void validate(EbXMLAdhocQueryRequest request, ValidationProfile profile)", "class_method_signature": "AdhocQueryRequestValidator.validate(EbXMLAdhocQueryRequest request, ValidationProfile profile)", "testcase": false, "constructor": false, "invocations": ["notNull", "getInteractionId", "metaDataAssert", "equals", "getCode", "getReturnType", "getReturnType", "metaDataAssert", "equals", "getCode", "getReturnType", "equals", "getCode", "getReturnType", "getReturnType", "valueOfId", "getId", "metaDataAssert", "getId", "entrySet", "contains", "getKey", "getInteractionId", "metaDataAssert", "contains", "getValue", "metaDataAssert", "metaDataAssert", "getSql", "validateSlots", "getSlots", "get", "getValidators", "validate", "metaDataAssert", "isEmpty", "getSlotValues", "getSlotName", "isEmpty", "getSlotValues", "getSlotName", "isEmpty", "getSlotValues", "getSlotName"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}