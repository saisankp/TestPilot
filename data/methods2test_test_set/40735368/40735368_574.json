{"test_class": {"identifier": "CrsTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/library/referencing/src/test/java/org/geotools/referencing/CrsTest.java"}, "test_case": {"identifier": "testGetHorizontalCrs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetHorizontalCrs() {\n        assertEquals( DefaultEngineeringCRS.GENERIC_2D, CRS.getHorizontalCRS(DefaultEngineeringCRS.GENERIC_2D));\n    }", "signature": "void testGetHorizontalCrs()", "full_signature": "@Test public void testGetHorizontalCrs()", "class_method_signature": "CrsTest.testGetHorizontalCrs()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getHorizontalCRS"]}, "focal_class": {"identifier": "CRS", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger LOGGER = Logging.getLogger(CRS.class);", "modifier": "static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(CRS.class)", "var_name": "LOGGER"}, {"original_string": "static volatile AtomicBoolean FORCED_LON_LAT = null;", "modifier": "static volatile", "type": "AtomicBoolean", "declarator": "FORCED_LON_LAT = null", "var_name": "FORCED_LON_LAT"}, {"original_string": "private static final Hints FORCE_LONGITUDE_FIRST_AXIS_ORDER = new Hints(\n            Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER, Boolean.TRUE);", "modifier": "private static final", "type": "Hints", "declarator": "FORCE_LONGITUDE_FIRST_AXIS_ORDER = new Hints(\n            Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER, Boolean.TRUE)", "var_name": "FORCE_LONGITUDE_FIRST_AXIS_ORDER"}, {"original_string": "private static CRSAuthorityFactory defaultFactory;", "modifier": "private static", "type": "CRSAuthorityFactory", "declarator": "defaultFactory", "var_name": "defaultFactory"}, {"original_string": "private static CRSAuthorityFactory xyFactory;", "modifier": "private static", "type": "CRSAuthorityFactory", "declarator": "xyFactory", "var_name": "xyFactory"}, {"original_string": "private static CoordinateOperationFactory strictFactory;", "modifier": "private static", "type": "CoordinateOperationFactory", "declarator": "strictFactory", "var_name": "strictFactory"}, {"original_string": "private static CoordinateOperationFactory lenientFactory;", "modifier": "private static", "type": "CoordinateOperationFactory", "declarator": "lenientFactory", "var_name": "lenientFactory"}], "methods": [{"identifier": "CRS", "parameters": "()", "modifiers": "private", "return": "", "signature": " CRS()", "full_signature": "private  CRS()", "class_method_signature": "CRS.CRS()", "testcase": false, "constructor": true}, {"identifier": "getAuthorityFactory", "parameters": "(final boolean longitudeFirst)", "modifiers": "public static synchronized", "return": "CRSAuthorityFactory", "signature": "CRSAuthorityFactory getAuthorityFactory(final boolean longitudeFirst)", "full_signature": "public static synchronized CRSAuthorityFactory getAuthorityFactory(final boolean longitudeFirst)", "class_method_signature": "CRS.getAuthorityFactory(final boolean longitudeFirst)", "testcase": false, "constructor": false}, {"identifier": "updateForcedLonLat", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void updateForcedLonLat()", "full_signature": "private static void updateForcedLonLat()", "class_method_signature": "CRS.updateForcedLonLat()", "testcase": false, "constructor": false}, {"identifier": "isForcedLonLat", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean isForcedLonLat()", "full_signature": "private static boolean isForcedLonLat()", "class_method_signature": "CRS.isForcedLonLat()", "testcase": false, "constructor": false}, {"identifier": "getCoordinateOperationFactory", "parameters": "(final boolean lenient)", "modifiers": "public static synchronized", "return": "CoordinateOperationFactory", "signature": "CoordinateOperationFactory getCoordinateOperationFactory(final boolean lenient)", "full_signature": "public static synchronized CoordinateOperationFactory getCoordinateOperationFactory(final boolean lenient)", "class_method_signature": "CRS.getCoordinateOperationFactory(final boolean lenient)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(final String authority)", "modifiers": "public static", "return": "Version", "signature": "Version getVersion(final String authority)", "full_signature": "public static Version getVersion(final String authority)", "class_method_signature": "CRS.getVersion(final String authority)", "testcase": false, "constructor": false}, {"identifier": "getSupportedCodes", "parameters": "(final String authority)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getSupportedCodes(final String authority)", "full_signature": "public static Set<String> getSupportedCodes(final String authority)", "class_method_signature": "CRS.getSupportedCodes(final String authority)", "testcase": false, "constructor": false}, {"identifier": "getSupportedAuthorities", "parameters": "(final boolean returnAliases)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getSupportedAuthorities(final boolean returnAliases)", "full_signature": "public static Set<String> getSupportedAuthorities(final boolean returnAliases)", "class_method_signature": "CRS.getSupportedAuthorities(final boolean returnAliases)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(final String code)", "modifiers": "public static", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem decode(final String code)", "full_signature": "public static CoordinateReferenceSystem decode(final String code)", "class_method_signature": "CRS.decode(final String code)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String code, final boolean longitudeFirst)", "modifiers": "public static", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem decode(String code, final boolean longitudeFirst)", "full_signature": "public static CoordinateReferenceSystem decode(String code, final boolean longitudeFirst)", "class_method_signature": "CRS.decode(String code, final boolean longitudeFirst)", "testcase": false, "constructor": false}, {"identifier": "parseWKT", "parameters": "(final String wkt)", "modifiers": "public static", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem parseWKT(final String wkt)", "full_signature": "public static CoordinateReferenceSystem parseWKT(final String wkt)", "class_method_signature": "CRS.parseWKT(final String wkt)", "testcase": false, "constructor": false}, {"identifier": "getEnvelope", "parameters": "(final CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "Envelope", "signature": "Envelope getEnvelope(final CoordinateReferenceSystem crs)", "full_signature": "public static Envelope getEnvelope(final CoordinateReferenceSystem crs)", "class_method_signature": "CRS.getEnvelope(final CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "getGeographicBoundingBox", "parameters": "(final CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "GeographicBoundingBox", "signature": "GeographicBoundingBox getGeographicBoundingBox(final CoordinateReferenceSystem crs)", "full_signature": "public static GeographicBoundingBox getGeographicBoundingBox(final CoordinateReferenceSystem crs)", "class_method_signature": "CRS.getGeographicBoundingBox(final CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "getHorizontalCRS", "parameters": "(final CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "SingleCRS", "signature": "SingleCRS getHorizontalCRS(final CoordinateReferenceSystem crs)", "full_signature": "public static SingleCRS getHorizontalCRS(final CoordinateReferenceSystem crs)", "class_method_signature": "CRS.getHorizontalCRS(final CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "getProjectedCRS", "parameters": "(final CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "ProjectedCRS", "signature": "ProjectedCRS getProjectedCRS(final CoordinateReferenceSystem crs)", "full_signature": "public static ProjectedCRS getProjectedCRS(final CoordinateReferenceSystem crs)", "class_method_signature": "CRS.getProjectedCRS(final CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "getMapProjection", "parameters": "(final CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "MapProjection", "signature": "MapProjection getMapProjection(final CoordinateReferenceSystem crs)", "full_signature": "public static MapProjection getMapProjection(final CoordinateReferenceSystem crs)", "class_method_signature": "CRS.getMapProjection(final CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "unrollProjection", "parameters": "(MathTransform mt)", "modifiers": "private static", "return": "MapProjection", "signature": "MapProjection unrollProjection(MathTransform mt)", "full_signature": "private static MapProjection unrollProjection(MathTransform mt)", "class_method_signature": "CRS.unrollProjection(MathTransform mt)", "testcase": false, "constructor": false}, {"identifier": "getVerticalCRS", "parameters": "(final CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "VerticalCRS", "signature": "VerticalCRS getVerticalCRS(final CoordinateReferenceSystem crs)", "full_signature": "public static VerticalCRS getVerticalCRS(final CoordinateReferenceSystem crs)", "class_method_signature": "CRS.getVerticalCRS(final CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "getTemporalCRS", "parameters": "(final CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "TemporalCRS", "signature": "TemporalCRS getTemporalCRS(final CoordinateReferenceSystem crs)", "full_signature": "public static TemporalCRS getTemporalCRS(final CoordinateReferenceSystem crs)", "class_method_signature": "CRS.getTemporalCRS(final CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "getEllipsoid", "parameters": "(final CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "Ellipsoid", "signature": "Ellipsoid getEllipsoid(final CoordinateReferenceSystem crs)", "full_signature": "public static Ellipsoid getEllipsoid(final CoordinateReferenceSystem crs)", "class_method_signature": "CRS.getEllipsoid(final CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "equalsIgnoreMetadata", "parameters": "(final Object object1, final Object object2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsIgnoreMetadata(final Object object1, final Object object2)", "full_signature": "public static boolean equalsIgnoreMetadata(final Object object1, final Object object2)", "class_method_signature": "CRS.equalsIgnoreMetadata(final Object object1, final Object object2)", "testcase": false, "constructor": false}, {"identifier": "toSRS", "parameters": "(final CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "String", "signature": "String toSRS(final CoordinateReferenceSystem crs)", "full_signature": "public static String toSRS(final CoordinateReferenceSystem crs)", "class_method_signature": "CRS.toSRS(final CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "toSRS", "parameters": "(final CoordinateReferenceSystem crs, boolean codeOnly)", "modifiers": "public static", "return": "String", "signature": "String toSRS(final CoordinateReferenceSystem crs, boolean codeOnly)", "full_signature": "public static String toSRS(final CoordinateReferenceSystem crs, boolean codeOnly)", "class_method_signature": "CRS.toSRS(final CoordinateReferenceSystem crs, boolean codeOnly)", "testcase": false, "constructor": false}, {"identifier": "lookupIdentifier", "parameters": "(final IdentifiedObject object, final boolean fullScan)", "modifiers": "public static", "return": "String", "signature": "String lookupIdentifier(final IdentifiedObject object, final boolean fullScan)", "full_signature": "public static String lookupIdentifier(final IdentifiedObject object, final boolean fullScan)", "class_method_signature": "CRS.lookupIdentifier(final IdentifiedObject object, final boolean fullScan)", "testcase": false, "constructor": false}, {"identifier": "lookupIdentifier", "parameters": "(final Citation authority,\n            final CoordinateReferenceSystem crs, final boolean fullScan)", "modifiers": "public static", "return": "String", "signature": "String lookupIdentifier(final Citation authority,\n            final CoordinateReferenceSystem crs, final boolean fullScan)", "full_signature": "public static String lookupIdentifier(final Citation authority,\n            final CoordinateReferenceSystem crs, final boolean fullScan)", "class_method_signature": "CRS.lookupIdentifier(final Citation authority,\n            final CoordinateReferenceSystem crs, final boolean fullScan)", "testcase": false, "constructor": false}, {"identifier": "lookupEpsgCode", "parameters": "(final CoordinateReferenceSystem crs, final boolean fullScan)", "modifiers": "public static", "return": "Integer", "signature": "Integer lookupEpsgCode(final CoordinateReferenceSystem crs, final boolean fullScan)", "full_signature": "public static Integer lookupEpsgCode(final CoordinateReferenceSystem crs, final boolean fullScan)", "class_method_signature": "CRS.lookupEpsgCode(final CoordinateReferenceSystem crs, final boolean fullScan)", "testcase": false, "constructor": false}, {"identifier": "findMathTransform", "parameters": "(final CoordinateReferenceSystem sourceCRS,\n                                                  final CoordinateReferenceSystem targetCRS)", "modifiers": "public static", "return": "MathTransform", "signature": "MathTransform findMathTransform(final CoordinateReferenceSystem sourceCRS,\n                                                  final CoordinateReferenceSystem targetCRS)", "full_signature": "public static MathTransform findMathTransform(final CoordinateReferenceSystem sourceCRS,\n                                                  final CoordinateReferenceSystem targetCRS)", "class_method_signature": "CRS.findMathTransform(final CoordinateReferenceSystem sourceCRS,\n                                                  final CoordinateReferenceSystem targetCRS)", "testcase": false, "constructor": false}, {"identifier": "findMathTransform", "parameters": "(final CoordinateReferenceSystem sourceCRS,\n                                                  final CoordinateReferenceSystem targetCRS,\n                                                  boolean lenient)", "modifiers": "public static", "return": "MathTransform", "signature": "MathTransform findMathTransform(final CoordinateReferenceSystem sourceCRS,\n                                                  final CoordinateReferenceSystem targetCRS,\n                                                  boolean lenient)", "full_signature": "public static MathTransform findMathTransform(final CoordinateReferenceSystem sourceCRS,\n                                                  final CoordinateReferenceSystem targetCRS,\n                                                  boolean lenient)", "class_method_signature": "CRS.findMathTransform(final CoordinateReferenceSystem sourceCRS,\n                                                  final CoordinateReferenceSystem targetCRS,\n                                                  boolean lenient)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Envelope envelope,\n            final CoordinateReferenceSystem targetCRS)", "modifiers": "public static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope transform(Envelope envelope,\n            final CoordinateReferenceSystem targetCRS)", "full_signature": "public static GeneralEnvelope transform(Envelope envelope,\n            final CoordinateReferenceSystem targetCRS)", "class_method_signature": "CRS.transform(Envelope envelope,\n            final CoordinateReferenceSystem targetCRS)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final MathTransform transform, final Envelope envelope)", "modifiers": "public static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope transform(final MathTransform transform, final Envelope envelope)", "full_signature": "public static GeneralEnvelope transform(final MathTransform transform, final Envelope envelope)", "class_method_signature": "CRS.transform(final MathTransform transform, final Envelope envelope)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final MathTransform   transform,\n                                             final Envelope        envelope,\n                                             GeneralDirectPosition targetPt)", "modifiers": "private static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope transform(final MathTransform   transform,\n                                             final Envelope        envelope,\n                                             GeneralDirectPosition targetPt)", "full_signature": "private static GeneralEnvelope transform(final MathTransform   transform,\n                                             final Envelope        envelope,\n                                             GeneralDirectPosition targetPt)", "class_method_signature": "CRS.transform(final MathTransform   transform,\n                                             final Envelope        envelope,\n                                             GeneralDirectPosition targetPt)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final CoordinateOperation operation, final Envelope envelope)", "modifiers": "public static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope transform(final CoordinateOperation operation, final Envelope envelope)", "full_signature": "public static GeneralEnvelope transform(final CoordinateOperation operation, final Envelope envelope)", "class_method_signature": "CRS.transform(final CoordinateOperation operation, final Envelope envelope)", "testcase": false, "constructor": false}, {"identifier": "expandEnvelopeByLongitude", "parameters": "(double longitude, DirectPosition input,\n            GeneralEnvelope transformed, CoordinateReferenceSystem sourceCRS)", "modifiers": "private static", "return": "void", "signature": "void expandEnvelopeByLongitude(double longitude, DirectPosition input,\n            GeneralEnvelope transformed, CoordinateReferenceSystem sourceCRS)", "full_signature": "private static void expandEnvelopeByLongitude(double longitude, DirectPosition input,\n            GeneralEnvelope transformed, CoordinateReferenceSystem sourceCRS)", "class_method_signature": "CRS.expandEnvelopeByLongitude(double longitude, DirectPosition input,\n            GeneralEnvelope transformed, CoordinateReferenceSystem sourceCRS)", "testcase": false, "constructor": false}, {"identifier": "toGeneralEnvelope", "parameters": "(final Envelope envelope)", "modifiers": "private static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope toGeneralEnvelope(final Envelope envelope)", "full_signature": "private static GeneralEnvelope toGeneralEnvelope(final Envelope envelope)", "class_method_signature": "CRS.toGeneralEnvelope(final Envelope envelope)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final MathTransform2D transform,\n                                        final Rectangle2D     envelope,\n                                              Rectangle2D     destination)", "modifiers": "public static", "return": "Rectangle2D", "signature": "Rectangle2D transform(final MathTransform2D transform,\n                                        final Rectangle2D     envelope,\n                                              Rectangle2D     destination)", "full_signature": "public static Rectangle2D transform(final MathTransform2D transform,\n                                        final Rectangle2D     envelope,\n                                              Rectangle2D     destination)", "class_method_signature": "CRS.transform(final MathTransform2D transform,\n                                        final Rectangle2D     envelope,\n                                              Rectangle2D     destination)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final MathTransform2D transform,\n                                         final Rectangle2D     envelope,\n                                               Rectangle2D     destination,\n                                         final Point2D.Double  point)", "modifiers": "@SuppressWarnings(\"fallthrough\") private static", "return": "Rectangle2D", "signature": "Rectangle2D transform(final MathTransform2D transform,\n                                         final Rectangle2D     envelope,\n                                               Rectangle2D     destination,\n                                         final Point2D.Double  point)", "full_signature": "@SuppressWarnings(\"fallthrough\") private static Rectangle2D transform(final MathTransform2D transform,\n                                         final Rectangle2D     envelope,\n                                               Rectangle2D     destination,\n                                         final Point2D.Double  point)", "class_method_signature": "CRS.transform(final MathTransform2D transform,\n                                         final Rectangle2D     envelope,\n                                               Rectangle2D     destination,\n                                         final Point2D.Double  point)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final CoordinateOperation operation,\n                                        final Rectangle2D         envelope,\n                                              Rectangle2D         destination)", "modifiers": "public static", "return": "Rectangle2D", "signature": "Rectangle2D transform(final CoordinateOperation operation,\n                                        final Rectangle2D         envelope,\n                                              Rectangle2D         destination)", "full_signature": "public static Rectangle2D transform(final CoordinateOperation operation,\n                                        final Rectangle2D         envelope,\n                                              Rectangle2D         destination)", "class_method_signature": "CRS.transform(final CoordinateOperation operation,\n                                        final Rectangle2D         envelope,\n                                              Rectangle2D         destination)", "testcase": false, "constructor": false}, {"identifier": "unexpectedException", "parameters": "(final String methodName, final Exception exception)", "modifiers": "static", "return": "void", "signature": "void unexpectedException(final String methodName, final Exception exception)", "full_signature": "static void unexpectedException(final String methodName, final Exception exception)", "class_method_signature": "CRS.unexpectedException(final String methodName, final Exception exception)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(final String aspects)", "modifiers": "public static", "return": "void", "signature": "void reset(final String aspects)", "full_signature": "public static void reset(final String aspects)", "class_method_signature": "CRS.reset(final String aspects)", "testcase": false, "constructor": false}, {"identifier": "cleanupThreadLocals", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void cleanupThreadLocals()", "full_signature": "public static void cleanupThreadLocals()", "class_method_signature": "CRS.cleanupThreadLocals()", "testcase": false, "constructor": false}, {"identifier": "getAxisOrder", "parameters": "(CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "AxisOrder", "signature": "AxisOrder getAxisOrder(CoordinateReferenceSystem crs)", "full_signature": "public static AxisOrder getAxisOrder(CoordinateReferenceSystem crs)", "class_method_signature": "CRS.getAxisOrder(CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "getAxisOrder", "parameters": "(CoordinateReferenceSystem crs, boolean useBaseGeoCRS)", "modifiers": "public static", "return": "AxisOrder", "signature": "AxisOrder getAxisOrder(CoordinateReferenceSystem crs, boolean useBaseGeoCRS)", "full_signature": "public static AxisOrder getAxisOrder(CoordinateReferenceSystem crs, boolean useBaseGeoCRS)", "class_method_signature": "CRS.getAxisOrder(CoordinateReferenceSystem crs, boolean useBaseGeoCRS)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(final String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(final String[] args)", "full_signature": "public static void main(final String[] args)", "class_method_signature": "CRS.main(final String[] args)", "testcase": false, "constructor": false}], "file": "modules/library/referencing/src/main/java/org/geotools/referencing/CRS.java"}, "focal_method": {"identifier": "getHorizontalCRS", "parameters": "(final CoordinateReferenceSystem crs)", "modifiers": "public static", "return": "SingleCRS", "body": "public static SingleCRS getHorizontalCRS(final CoordinateReferenceSystem crs) {\n        if (crs instanceof SingleCRS) {\n            final CoordinateSystem cs = crs.getCoordinateSystem();\n            final int dimension = cs.getDimension();\n            if (dimension == 2) {\n                /*\n                 * For two-dimensional CRS, returns the CRS directly if it is either a\n                 * GeographicCRS, or any kind of derived CRS having a GeographicCRS as\n                 * its base.\n                 */\n                CoordinateReferenceSystem base = crs;\n                while (base instanceof GeneralDerivedCRS) {\n                    base = ((GeneralDerivedCRS) base).getBaseCRS();\n                }\n                // No need to test for ProjectedCRS, since the code above unwrap it.\n                if (base instanceof GeographicCRS) {\n                    return (SingleCRS) crs; // Really returns 'crs', not 'base'.\n                }\n                // cartesian are certainly valid horizontal CRS\n                if (base.getCoordinateSystem() instanceof CartesianCS) {\n                    return (SingleCRS) crs; // Really returns 'crs', not 'base'.\n                }\n            } else if (dimension >= 3 && crs instanceof GeographicCRS) {\n                /*\n                 * For three-dimensional Geographic CRS, extracts the axis having a direction\n                 * like \"North\", \"North-East\", \"East\", etc. If we find exactly two of them,\n                 * we can build a new GeographicCRS using them.\n                 */\n                CoordinateSystemAxis axis0 = null, axis1 = null;\n                int count = 0;\n                for (int i=0; i<dimension; i++) {\n                    final CoordinateSystemAxis axis = cs.getAxis(i);\nsearch:             if (DefaultCoordinateSystemAxis.isCompassDirection(axis.getDirection())) {\n                        switch (count++) {\n                            case 0: axis0 = axis; break;\n                            case 1: axis1 = axis; break;\n                            default: break search;\n                        }\n                    }\n                }\n                if (count == 2) {\n                    final GeodeticDatum datum = ((GeographicCRS) crs).getDatum();\n                    Map<String,?> properties = CRSUtilities.changeDimensionInName(cs, \"3D\", \"2D\");\n                    EllipsoidalCS horizontalCS;\n                    try {\n                        horizontalCS = ReferencingFactoryFinder.getCSFactory(null).\n                                createEllipsoidalCS(properties, axis0, axis1);\n                    } catch (FactoryException e) {\n                        Logging.recoverableException(CRS.class, \"getHorizontalCRS\", e);\n                        horizontalCS = new DefaultEllipsoidalCS(properties, axis0, axis1);\n                    }\n                    properties = CRSUtilities.changeDimensionInName(crs, \"3D\", \"2D\");\n                    GeographicCRS horizontalCRS;\n                    try {\n                        horizontalCRS = ReferencingFactoryFinder.getCRSFactory(null).\n                                createGeographicCRS(properties, datum, horizontalCS);\n                    } catch (FactoryException e) {\n                        Logging.recoverableException(CRS.class, \"getHorizontalCRS\", e);\n                        horizontalCRS = new DefaultGeographicCRS(properties, datum, horizontalCS);\n                    }\n                    return horizontalCRS;\n                }\n            }\n        }\n        if (crs instanceof CompoundCRS) {\n            final CompoundCRS cp = (CompoundCRS) crs;\n            for (final CoordinateReferenceSystem c : cp.getCoordinateReferenceSystems()) {\n                final SingleCRS candidate = getHorizontalCRS(c);\n                if (candidate != null) {\n                    return candidate;\n                }\n            }\n        }\n        return null;\n    }", "signature": "SingleCRS getHorizontalCRS(final CoordinateReferenceSystem crs)", "full_signature": "public static SingleCRS getHorizontalCRS(final CoordinateReferenceSystem crs)", "class_method_signature": "CRS.getHorizontalCRS(final CoordinateReferenceSystem crs)", "testcase": false, "constructor": false, "invocations": ["getCoordinateSystem", "getDimension", "getBaseCRS", "getCoordinateSystem", "getAxis", "isCompassDirection", "getDirection", "getDatum", "changeDimensionInName", "createEllipsoidalCS", "getCSFactory", "recoverableException", "changeDimensionInName", "createGeographicCRS", "getCRSFactory", "recoverableException", "getCoordinateReferenceSystems", "getHorizontalCRS"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}