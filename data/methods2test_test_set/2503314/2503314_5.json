{"test_class": {"identifier": "CorrespondingHolidayManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final CorrespondingHolidayManager sut = new CorrespondingHolidayManager();", "modifier": "final", "type": "CorrespondingHolidayManager", "declarator": "sut = new CorrespondingHolidayManager()", "var_name": "sut"}, {"original_string": "private  HolidayManager holidayManager;", "modifier": "private", "type": "HolidayManager", "declarator": "holidayManager", "var_name": "holidayManager"}, {"original_string": "final static ApplicationContext ctx = mock(ApplicationContext.class);", "modifier": "final static", "type": "ApplicationContext", "declarator": "ctx = mock(ApplicationContext.class)", "var_name": "ctx"}], "file": "tntconcept-core/src/test/java/com/autentia/tnt/manager/holiday/CorrespondingHolidayManagerTest.java"}, "test_case": {"identifier": "shouldReturnHolidaysFromSeveralYearsConsideringHiring", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldReturnHolidaysFromSeveralYearsConsideringHiring() {\n\t\tList<Holiday> holidays = this.getListOfCompensationDays(3);\n\t\tHoliday newYear2018 = new Holiday();\n\t\tnewYear2018.setId(4);\n\t\tnewYear2018.setCompensation(false);\n\t\tnewYear2018.setDate(new GregorianCalendar(2018, Calendar.JANUARY, 1).getTime());\n\t\tList<Holiday> january2018 = Arrays.asList(newYear2018);\n\t\tdoReturn(january2018).when(holidayManager).getAllEntities(any(), any());\n\t\tDate hiringDate = new GregorianCalendar(2019, Calendar.JANUARY, 3).getTime();\n\t\tCalendar calMin = new GregorianCalendar(2018, Calendar.DECEMBER, 1);\n\t\tCalendar calMax = new GregorianCalendar(2019, Calendar.FEBRUARY, 1);\n\t\t\n\t\tList<Holiday> result = sut.calculateCorrespondingHolidays(calMin, calMax, holidays, hiringDate);\n\t\t\n\t\tassertThat(result.size(), is(1));\t\n\t}", "signature": "void shouldReturnHolidaysFromSeveralYearsConsideringHiring()", "full_signature": "@Test public void shouldReturnHolidaysFromSeveralYearsConsideringHiring()", "class_method_signature": "CorrespondingHolidayManagerTest.shouldReturnHolidaysFromSeveralYearsConsideringHiring()", "testcase": true, "constructor": false, "invocations": ["getListOfCompensationDays", "setId", "setCompensation", "setDate", "getTime", "asList", "getAllEntities", "when", "doReturn", "any", "any", "getTime", "calculateCorrespondingHolidays", "assertThat", "size", "is"]}, "focal_class": {"identifier": "CorrespondingHolidayManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log log = LogFactory.getLog(UserHolidaysStateManager.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog(UserHolidaysStateManager.class)", "var_name": "log"}], "methods": [{"identifier": "getDefault", "parameters": "()", "modifiers": "public static", "return": "CorrespondingHolidayManager", "signature": "CorrespondingHolidayManager getDefault()", "full_signature": "public static CorrespondingHolidayManager getDefault()", "class_method_signature": "CorrespondingHolidayManager.getDefault()", "testcase": false, "constructor": false}, {"identifier": "CorrespondingHolidayManager", "parameters": "()", "modifiers": "protected", "return": "", "signature": " CorrespondingHolidayManager()", "full_signature": "protected  CorrespondingHolidayManager()", "class_method_signature": "CorrespondingHolidayManager.CorrespondingHolidayManager()", "testcase": false, "constructor": true}, {"identifier": "calculateCorrespondingHolidays", "parameters": "(Calendar calMin, Calendar calMax, List<Holiday> allHolidays,\n\t\t\tDate hiringDate)", "modifiers": "public", "return": "List<Holiday>", "signature": "List<Holiday> calculateCorrespondingHolidays(Calendar calMin, Calendar calMax, List<Holiday> allHolidays,\n\t\t\tDate hiringDate)", "full_signature": "public List<Holiday> calculateCorrespondingHolidays(Calendar calMin, Calendar calMax, List<Holiday> allHolidays,\n\t\t\tDate hiringDate)", "class_method_signature": "CorrespondingHolidayManager.calculateCorrespondingHolidays(Calendar calMin, Calendar calMax, List<Holiday> allHolidays,\n\t\t\tDate hiringDate)", "testcase": false, "constructor": false}, {"identifier": "getCorrespondingHolidays", "parameters": "(List<Holiday> holidays, LocalDate hiringDate,\n\t\t\tint yearOfCalculation)", "modifiers": "protected", "return": "List<Holiday>", "signature": "List<Holiday> getCorrespondingHolidays(List<Holiday> holidays, LocalDate hiringDate,\n\t\t\tint yearOfCalculation)", "full_signature": "protected List<Holiday> getCorrespondingHolidays(List<Holiday> holidays, LocalDate hiringDate,\n\t\t\tint yearOfCalculation)", "class_method_signature": "CorrespondingHolidayManager.getCorrespondingHolidays(List<Holiday> holidays, LocalDate hiringDate,\n\t\t\tint yearOfCalculation)", "testcase": false, "constructor": false}, {"identifier": "removeCompensationDays", "parameters": "(List<Holiday> holidays, int yearOfCalculation, LocalDate hiringDate)", "modifiers": "private", "return": "void", "signature": "void removeCompensationDays(List<Holiday> holidays, int yearOfCalculation, LocalDate hiringDate)", "full_signature": "private void removeCompensationDays(List<Holiday> holidays, int yearOfCalculation, LocalDate hiringDate)", "class_method_signature": "CorrespondingHolidayManager.removeCompensationDays(List<Holiday> holidays, int yearOfCalculation, LocalDate hiringDate)", "testcase": false, "constructor": false}, {"identifier": "getFirstNWorkingDays", "parameters": "(int numberOfDays, int currentYear)", "modifiers": "private", "return": "List<LocalDate>", "signature": "List<LocalDate> getFirstNWorkingDays(int numberOfDays, int currentYear)", "full_signature": "private List<LocalDate> getFirstNWorkingDays(int numberOfDays, int currentYear)", "class_method_signature": "CorrespondingHolidayManager.getFirstNWorkingDays(int numberOfDays, int currentYear)", "testcase": false, "constructor": false}, {"identifier": "getNotCorrespondingDays", "parameters": "(LocalDate hiringDate, List<LocalDate> firstWorkingDays)", "modifiers": "private", "return": "int", "signature": "int getNotCorrespondingDays(LocalDate hiringDate, List<LocalDate> firstWorkingDays)", "full_signature": "private int getNotCorrespondingDays(LocalDate hiringDate, List<LocalDate> firstWorkingDays)", "class_method_signature": "CorrespondingHolidayManager.getNotCorrespondingDays(LocalDate hiringDate, List<LocalDate> firstWorkingDays)", "testcase": false, "constructor": false}, {"identifier": "isHiringYearThisYear", "parameters": "(int yearOfCalculation, LocalDate hiringDate)", "modifiers": "private", "return": "boolean", "signature": "boolean isHiringYearThisYear(int yearOfCalculation, LocalDate hiringDate)", "full_signature": "private boolean isHiringYearThisYear(int yearOfCalculation, LocalDate hiringDate)", "class_method_signature": "CorrespondingHolidayManager.isHiringYearThisYear(int yearOfCalculation, LocalDate hiringDate)", "testcase": false, "constructor": false}, {"identifier": "isWeekend", "parameters": "(LocalDate date)", "modifiers": "private", "return": "boolean", "signature": "boolean isWeekend(LocalDate date)", "full_signature": "private boolean isWeekend(LocalDate date)", "class_method_signature": "CorrespondingHolidayManager.isWeekend(LocalDate date)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(Date date)", "modifiers": "private", "return": "LocalDate", "signature": "LocalDate parseDate(Date date)", "full_signature": "private LocalDate parseDate(Date date)", "class_method_signature": "CorrespondingHolidayManager.parseDate(Date date)", "testcase": false, "constructor": false}], "file": "tntconcept-core/src/main/java/com/autentia/tnt/manager/holiday/CorrespondingHolidayManager.java"}, "focal_method": {"identifier": "calculateCorrespondingHolidays", "parameters": "(Calendar calMin, Calendar calMax, List<Holiday> allHolidays,\n\t\t\tDate hiringDate)", "modifiers": "public", "return": "List<Holiday>", "body": "public List<Holiday> calculateCorrespondingHolidays(Calendar calMin, Calendar calMax, List<Holiday> allHolidays,\n\t\t\tDate hiringDate) {\n\t\tList<Holiday> correspondingHolidays = new ArrayList<Holiday>();\n\n\t\tif (calMax.get(Calendar.YEAR) - calMin.get(Calendar.YEAR) > 0) {\n\t\t\tfor (int year = calMin.get(Calendar.YEAR); year <= calMax.get(Calendar.YEAR); year++) {\n\t\t\t\tcorrespondingHolidays = Stream\n\t\t\t\t\t\t.concat(getCorrespondingHolidays(allHolidays, parseDate(hiringDate), year).stream(),\n\t\t\t\t\t\t\t\tcorrespondingHolidays.stream())\n\t\t\t\t\t\t.collect(Collectors.toList());\n\t\t\t}\n\t\t} else {\n\t\t\tcorrespondingHolidays = getCorrespondingHolidays(allHolidays, parseDate(hiringDate),\n\t\t\t\t\tcalMax.get(Calendar.YEAR));\n\t\t}\n\t\treturn correspondingHolidays;\n\t}", "signature": "List<Holiday> calculateCorrespondingHolidays(Calendar calMin, Calendar calMax, List<Holiday> allHolidays,\n\t\t\tDate hiringDate)", "full_signature": "public List<Holiday> calculateCorrespondingHolidays(Calendar calMin, Calendar calMax, List<Holiday> allHolidays,\n\t\t\tDate hiringDate)", "class_method_signature": "CorrespondingHolidayManager.calculateCorrespondingHolidays(Calendar calMin, Calendar calMax, List<Holiday> allHolidays,\n\t\t\tDate hiringDate)", "testcase": false, "constructor": false, "invocations": ["get", "get", "get", "get", "collect", "concat", "stream", "getCorrespondingHolidays", "parseDate", "stream", "toList", "getCorrespondingHolidays", "parseDate", "get"]}, "repository": {"repo_id": 2503314, "url": "https://github.com/autentia/TNTConcept", "stars": 11, "created": "10/3/2011 8:00:30 AM +00:00", "updates": "2020-01-24T12:30:31+00:00", "fork": "False", "license": "licensed"}}