{"test_class": {"identifier": "JDBCSmellQueriesTest", "superclass": "extends PostgresTestCase", "interfaces": "", "fields": [{"original_string": "private SmellQueries queries;", "modifier": "private", "type": "SmellQueries", "declarator": "queries", "var_name": "queries"}, {"original_string": "private int projectId;", "modifier": "private", "type": "int", "declarator": "projectId", "var_name": "projectId"}, {"original_string": "private Smell smell;", "modifier": "private", "type": "Smell", "declarator": "smell", "var_name": "smell"}, {"original_string": "private ProjectQueries projectQueries;", "modifier": "private", "type": "ProjectQueries", "declarator": "projectQueries", "var_name": "projectQueries"}, {"original_string": "private JDBCDeveloperQueries developerQueries;", "modifier": "private", "type": "JDBCDeveloperQueries", "declarator": "developerQueries", "var_name": "developerQueries"}, {"original_string": "private JDBCCommitQueries commitQueries;", "modifier": "private", "type": "JDBCCommitQueries", "declarator": "commitQueries", "var_name": "commitQueries"}], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCSmellQueriesTest.java"}, "test_case": {"identifier": "testCommitSmellsQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommitSmellsQuery() {\n        List<Map<String, Object>> result;\n        Commit commit = prepareCommit(\"sha\");\n        Commit second_commit = prepareCommit(\"another_sha\");\n        String commitIdQuery = commitQueries.idFromShaQuery(projectId, commit.sha);\n        int commitId = (int) persistence.query(commitIdQuery).get(0).get(\"id\");\n\n        // No smell means no result\n        result = persistence.query(queries.commitSmellsQuery(projectId, String.valueOf(commitId), smell.type));\n        assertTrue(result.isEmpty());\n\n        Smell anotherSmellType = new Smell(\"MIM\", smell.instance, \"yetanotherfile\");\n        Smell anotherSmell = new Smell(smell.type, \"anotherinstance\", \"anotherfile\");\n        Smell smellOtherCommit = new Smell(smell.type, \"my.smell.instance\", \"anotherfile\");\n        smell.id = createSmell(projectId, smell, queries);\n        anotherSmell.id = createSmell(projectId, anotherSmell, queries);\n        anotherSmellType.id = createSmell(projectId, anotherSmellType, queries);\n        smellOtherCommit.id = createSmell(projectId, smellOtherCommit, queries);\n        // Presences in first commit\n        executeSuccess(queries.smellCategoryInsertionStatement(projectId, commit.sha, smell, SmellCategory.PRESENCE));\n        executeSuccess(queries.smellCategoryInsertionStatement(projectId, commit.sha, anotherSmell, SmellCategory.PRESENCE));\n        executeSuccess(queries.smellCategoryInsertionStatement(projectId, commit.sha, anotherSmellType, SmellCategory.PRESENCE));\n        // Presences in second commit\n        executeSuccess(queries.smellCategoryInsertionStatement(projectId, second_commit.sha, anotherSmell, SmellCategory.PRESENCE));\n        executeSuccess(queries.smellCategoryInsertionStatement(projectId, second_commit.sha, smellOtherCommit, SmellCategory.PRESENCE));\n\n        // We can use the raw commit ID\n        result = persistence.query(queries.commitSmellsQuery(projectId, String.valueOf(commitId), null));\n        assertEquals(3, result.size());\n        checkContainsSmells(result, Arrays.asList(smell, anotherSmellType, anotherSmell));\n\n        // We can use a query to retrieve commitId\n        result = persistence.query(queries.commitSmellsQuery(projectId, \"(\" + commitIdQuery + \")\", null));\n        assertEquals(3, result.size());\n        checkContainsSmells(result, Arrays.asList(smell, anotherSmellType, anotherSmell));\n\n        // We can filter by smell type\n        result = persistence.query(queries.commitSmellsQuery(projectId, String.valueOf(commitId), smell.type));\n        assertEquals(2, result.size());\n        checkContainsSmells(result, Arrays.asList(smell, anotherSmell));\n\n        // We can return the smell parent's values\n        Smell withParent = new Smell(smell.type, \"withParentInstance\", \"withParentFile\");\n        withParent.parent = smell;\n        withParent.id = createSmell(projectId, withParent, queries);\n        executeSuccess(queries.smellCategoryInsertionStatement(projectId, commit.sha, withParent, SmellCategory.PRESENCE));\n        result = persistence.query(queries.commitSmellsQuery(projectId, String.valueOf(commitId), smell.type));\n        assertEquals(3, result.size());\n        checkContainsSmells(result, Arrays.asList(smell, anotherSmell, withParent));\n\n        // We filter by commit\n        result = persistence.query(queries.commitSmellsQuery(projectId, \"(\" + commitQueries.idFromShaQuery(projectId, second_commit.sha) + \")\", smell.type));\n        assertEquals(2, result.size());\n        checkContainsSmells(result, Arrays.asList(anotherSmell, smellOtherCommit));\n    }", "signature": "void testCommitSmellsQuery()", "full_signature": "@Test public void testCommitSmellsQuery()", "class_method_signature": "JDBCSmellQueriesTest.testCommitSmellsQuery()", "testcase": true, "constructor": false, "invocations": ["prepareCommit", "prepareCommit", "idFromShaQuery", "get", "get", "query", "query", "commitSmellsQuery", "valueOf", "assertTrue", "isEmpty", "createSmell", "createSmell", "createSmell", "createSmell", "executeSuccess", "smellCategoryInsertionStatement", "executeSuccess", "smellCategoryInsertionStatement", "executeSuccess", "smellCategoryInsertionStatement", "executeSuccess", "smellCategoryInsertionStatement", "executeSuccess", "smellCategoryInsertionStatement", "query", "commitSmellsQuery", "valueOf", "assertEquals", "size", "checkContainsSmells", "asList", "query", "commitSmellsQuery", "assertEquals", "size", "checkContainsSmells", "asList", "query", "commitSmellsQuery", "valueOf", "assertEquals", "size", "checkContainsSmells", "asList", "createSmell", "executeSuccess", "smellCategoryInsertionStatement", "query", "commitSmellsQuery", "valueOf", "assertEquals", "size", "checkContainsSmells", "asList", "query", "commitSmellsQuery", "idFromShaQuery", "assertEquals", "size", "checkContainsSmells", "asList"]}, "focal_class": {"identifier": "JDBCSmellQueries", "superclass": "extends JDBCQueriesHelper", "interfaces": "implements SmellQueries", "fields": [{"original_string": "private CommitQueries commitQueries;", "modifier": "private", "type": "CommitQueries", "declarator": "commitQueries", "var_name": "commitQueries"}], "methods": [{"identifier": "JDBCSmellQueries", "parameters": "(CommitQueries commitQueries)", "modifiers": "public", "return": "", "signature": " JDBCSmellQueries(CommitQueries commitQueries)", "full_signature": "public  JDBCSmellQueries(CommitQueries commitQueries)", "class_method_signature": "JDBCSmellQueries.JDBCSmellQueries(CommitQueries commitQueries)", "testcase": false, "constructor": true}, {"identifier": "smellInsertionStatement", "parameters": "(int projectId, Smell smell)", "modifiers": "@Override public", "return": "String", "signature": "String smellInsertionStatement(int projectId, Smell smell)", "full_signature": "@Override public String smellInsertionStatement(int projectId, Smell smell)", "class_method_signature": "JDBCSmellQueries.smellInsertionStatement(int projectId, Smell smell)", "testcase": false, "constructor": false}, {"identifier": "smellCategoryInsertionStatement", "parameters": "(int projectId, String sha1, Smell smell, SmellCategory category)", "modifiers": "@Override public", "return": "String", "signature": "String smellCategoryInsertionStatement(int projectId, String sha1, Smell smell, SmellCategory category)", "full_signature": "@Override public String smellCategoryInsertionStatement(int projectId, String sha1, Smell smell, SmellCategory category)", "class_method_signature": "JDBCSmellQueries.smellCategoryInsertionStatement(int projectId, String sha1, Smell smell, SmellCategory category)", "testcase": false, "constructor": false}, {"identifier": "lostSmellCategoryInsertionStatement", "parameters": "(int projectId, Smell smell, SmellCategory category, int since, int until)", "modifiers": "@Override public", "return": "String", "signature": "String lostSmellCategoryInsertionStatement(int projectId, Smell smell, SmellCategory category, int since, int until)", "full_signature": "@Override public String lostSmellCategoryInsertionStatement(int projectId, Smell smell, SmellCategory category, int since, int until)", "class_method_signature": "JDBCSmellQueries.lostSmellCategoryInsertionStatement(int projectId, Smell smell, SmellCategory category, int since, int until)", "testcase": false, "constructor": false}, {"identifier": "smellIdQuery", "parameters": "(int projectId, Smell smell)", "modifiers": "@Override public", "return": "String", "signature": "String smellIdQuery(int projectId, Smell smell)", "full_signature": "@Override public String smellIdQuery(int projectId, Smell smell)", "class_method_signature": "JDBCSmellQueries.smellIdQuery(int projectId, Smell smell)", "testcase": false, "constructor": false}, {"identifier": "smellIdQuery", "parameters": "(int projectId, String instance, String file, String type, String renamedFrom)", "modifiers": "private", "return": "String", "signature": "String smellIdQuery(int projectId, String instance, String file, String type, String renamedFrom)", "full_signature": "private String smellIdQuery(int projectId, String instance, String file, String type, String renamedFrom)", "class_method_signature": "JDBCSmellQueries.smellIdQuery(int projectId, String instance, String file, String type, String renamedFrom)", "testcase": false, "constructor": false}, {"identifier": "commitSmellsQuery", "parameters": "(int projectId, String commitId, String smellType)", "modifiers": "@Override public", "return": "String", "signature": "String commitSmellsQuery(int projectId, String commitId, String smellType)", "full_signature": "@Override public String commitSmellsQuery(int projectId, String commitId, String smellType)", "class_method_signature": "JDBCSmellQueries.commitSmellsQuery(int projectId, String commitId, String smellType)", "testcase": false, "constructor": false}, {"identifier": "lastSmellIdQuery", "parameters": "(int projectId)", "modifiers": "public", "return": "String", "signature": "String lastSmellIdQuery(int projectId)", "full_signature": "public String lastSmellIdQuery(int projectId)", "class_method_signature": "JDBCSmellQueries.lastSmellIdQuery(int projectId)", "testcase": false, "constructor": false}, {"identifier": "allRefactoredInstancesWithSha1", "parameters": "(int projectId)", "modifiers": "public", "return": "String", "signature": "String allRefactoredInstancesWithSha1(int projectId)", "full_signature": "public String allRefactoredInstancesWithSha1(int projectId)", "class_method_signature": "JDBCSmellQueries.allRefactoredInstancesWithSha1(int projectId)", "testcase": false, "constructor": false}, {"identifier": "setAsDeleted", "parameters": "(int projectId, int refactoringId, boolean deleted)", "modifiers": "public", "return": "String", "signature": "String setAsDeleted(int projectId, int refactoringId, boolean deleted)", "full_signature": "public String setAsDeleted(int projectId, int refactoringId, boolean deleted)", "class_method_signature": "JDBCSmellQueries.setAsDeleted(int projectId, int refactoringId, boolean deleted)", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCSmellQueries.java"}, "focal_method": {"identifier": "commitSmellsQuery", "parameters": "(int projectId, String commitId, String smellType)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String commitSmellsQuery(int projectId, String commitId, String smellType) {\n        String smellsQuery = \"SELECT smell.id, type, instance, file, renamed_from FROM smell \" +\n                \"RIGHT JOIN smell_presence ON smell_presence.smell_id = smell.id \" +\n                \"WHERE smell_presence.commit_id = \" + commitId;\n        if (smellType != null) {\n            smellsQuery += \" AND smell.type = '\" + smellType + \"'\";\n        }\n\n        String query = \"WITH sm AS (\" + smellsQuery + \") \" +\n                \"SELECT sm.id, sm.type, sm.instance, sm.file, \" +\n                \"parent.type AS parent_type, parent.instance AS parent_instance, parent.file AS parent_file \" +\n                \"FROM sm \" +\n                \"LEFT JOIN (SELECT id, type, instance, file FROM smell) parent \" +\n                \"ON parent.id = sm.renamed_from\";\n\n        return query;\n    }", "signature": "String commitSmellsQuery(int projectId, String commitId, String smellType)", "full_signature": "@Override public String commitSmellsQuery(int projectId, String commitId, String smellType)", "class_method_signature": "JDBCSmellQueries.commitSmellsQuery(int projectId, String commitId, String smellType)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}