{"test_class": {"identifier": "UserMaximumExtentCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DOUBLE_TOLERANCE = .0000000001;", "modifier": "private static final", "type": "double", "declarator": "DOUBLE_TOLERANCE = .0000000001", "var_name": "DOUBLE_TOLERANCE"}, {"original_string": "private static final String LAYER_ID = \"countries\";", "modifier": "private static final", "type": "String", "declarator": "LAYER_ID = \"countries\"", "var_name": "LAYER_ID"}, {"original_string": "private static final String CRS = \"EPSG:4326\";", "modifier": "private static final", "type": "String", "declarator": "CRS = \"EPSG:4326\"", "var_name": "CRS"}, {"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}], "file": "command/src/test/java/org/geomajas/command/configuration/UserMaximumExtentCommandTest.java"}, "test_case": {"identifier": "testUserMaximumExtent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUserMaximumExtent() throws Exception {\n\t\tUserMaximumExtentRequest request = new UserMaximumExtentRequest();\n\t\trequest.setCrs(CRS);\n\t\trequest.setLayerIds(new String[] { LAYER_ID });\n\t\tUserMaximumExtentResponse response = (UserMaximumExtentResponse) dispatcher.execute(\n\t\t\t\tUserMaximumExtentRequest.COMMAND, request, null, \"en\");\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\t\tBbox bounds = response.getBounds();\n\t\tAssert.assertNotNull(bounds);\n\t\tAssert.assertEquals(-1.0, bounds.getX(), DOUBLE_TOLERANCE);\n\t\tAssert.assertEquals(-1.0, bounds.getY(), DOUBLE_TOLERANCE);\n\t\tAssert.assertEquals(1.0, bounds.getMaxX(), DOUBLE_TOLERANCE);\n\t\tAssert.assertEquals(1.0, bounds.getMaxY(), DOUBLE_TOLERANCE);\n\t}", "signature": "void testUserMaximumExtent()", "full_signature": "@Test public void testUserMaximumExtent()", "class_method_signature": "UserMaximumExtentCommandTest.testUserMaximumExtent()", "testcase": true, "constructor": false, "invocations": ["setCrs", "setLayerIds", "execute", "isError", "printStackTrace", "get", "getErrors", "assertFalse", "isError", "getBounds", "assertNotNull", "assertEquals", "getX", "assertEquals", "getY", "assertEquals", "getMaxX", "assertEquals", "getMaxY"]}, "focal_class": {"identifier": "UserMaximumExtentCommand", "superclass": "", "interfaces": "implements CommandHasRequest<UserMaximumExtentRequest, UserMaximumExtentResponse>", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(UserMaximumExtentCommand.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(UserMaximumExtentCommand.class)", "var_name": "log"}, {"original_string": "@Autowired\n\tprivate DtoConverterService converterService;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "converterService", "var_name": "converterService"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate ConfigurationService configurationService;", "modifier": "@Autowired\n\tprivate", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "@Autowired\n\tprivate VectorLayerService layerService;", "modifier": "@Autowired\n\tprivate", "type": "VectorLayerService", "declarator": "layerService", "var_name": "layerService"}, {"original_string": "@Autowired\n\tprivate SecurityContext securityContext;", "modifier": "@Autowired\n\tprivate", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "UserMaximumExtentRequest", "signature": "UserMaximumExtentRequest getEmptyCommandRequest()", "full_signature": "@Override public UserMaximumExtentRequest getEmptyCommandRequest()", "class_method_signature": "UserMaximumExtentCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "UserMaximumExtentResponse", "signature": "UserMaximumExtentResponse getEmptyCommandResponse()", "full_signature": "@Override public UserMaximumExtentResponse getEmptyCommandResponse()", "class_method_signature": "UserMaximumExtentCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(UserMaximumExtentRequest request, UserMaximumExtentResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(UserMaximumExtentRequest request, UserMaximumExtentResponse response)", "full_signature": "@Override public void execute(UserMaximumExtentRequest request, UserMaximumExtentResponse response)", "class_method_signature": "UserMaximumExtentCommand.execute(UserMaximumExtentRequest request, UserMaximumExtentResponse response)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/configuration/UserMaximumExtentCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(UserMaximumExtentRequest request, UserMaximumExtentResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(UserMaximumExtentRequest request, UserMaximumExtentResponse response) throws Exception {\n\t\tString[] layers;\n\t\tArrayList<String> tempLayers = new ArrayList<String>();\n\t\tString[] includeLayers = request.getLayerIds();\n\t\tboolean excludeRasterLayers = request.isExcludeRasterLayers();\n\t\tif (includeLayers != null && includeLayers.length > 0) {\n\t\t\tfor (String layerId : includeLayers) {\n\t\t\t\tif (!securityContext.isLayerVisible(layerId)) {\n\t\t\t\t\tthrow new GeomajasSecurityException(ExceptionCode.LAYER_NOT_VISIBLE, layerId);\n\t\t\t\t}\n\t\t\t\tLayer<?> l = configurationService.getLayer(layerId);\n\t\t\t\tif (null == l) {\n\t\t\t\t\tthrow new GeomajasException(ExceptionCode.LAYER_NOT_FOUND, layerId);\n\t\t\t\t}\n\t\t\t\tif (!excludeRasterLayers || l.getLayerInfo().getLayerType() != LayerType.RASTER) {\n\t\t\t\t\ttempLayers.add(l.getId());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlayers = tempLayers.toArray(new String[tempLayers.size()]);\n\n\t\tLayer<?> layer;\n\t\tCrs targetCrs = geoService.getCrs2(request.getCrs());\n\n\t\tif (layers.length == 0) {\n\t\t\t// return empty bbox\n\t\t\tresponse.setBounds(new Bbox());\n\t\t} else {\n\t\t\tEnvelope extent = new Envelope();\n\t\t\tfor (String layerId : layers) {\n\t\t\t\tlayer = configurationService.getLayer(layerId);\n\t\t\t\tif (layer != null) {\n\t\t\t\t\tEnvelope bounds;\n\t\t\t\t\tif (layer.getLayerInfo().getLayerType() == LayerType.RASTER) {\n\t\t\t\t\t\tbounds = securityContext.getVisibleArea(layerId).getEnvelopeInternal();\n\t\t\t\t\t\tCrsTransform transform = geoService.getCrsTransform(layer.getCrs(), targetCrs);\n\t\t\t\t\t\tbounds = geoService.transform(bounds, transform);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbounds = layerService.getBounds(layerId, targetCrs, null);\n\t\t\t\t\t}\n\t\t\t\t\textent.expandToInclude(bounds);\n\t\t\t\t} else {\n\t\t\t\t\tlog.warn(\"layer not found ?! \" + layerId);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresponse.setBounds(converterService.toDto(extent));\n\t\t}\n\t}", "signature": "void execute(UserMaximumExtentRequest request, UserMaximumExtentResponse response)", "full_signature": "@Override public void execute(UserMaximumExtentRequest request, UserMaximumExtentResponse response)", "class_method_signature": "UserMaximumExtentCommand.execute(UserMaximumExtentRequest request, UserMaximumExtentResponse response)", "testcase": false, "constructor": false, "invocations": ["getLayerIds", "isExcludeRasterLayers", "isLayerVisible", "getLayer", "getLayerType", "getLayerInfo", "add", "getId", "toArray", "size", "getCrs2", "getCrs", "setBounds", "getLayer", "getLayerType", "getLayerInfo", "getEnvelopeInternal", "getVisibleArea", "getCrsTransform", "getCrs", "transform", "getBounds", "expandToInclude", "warn", "setBounds", "toDto"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}