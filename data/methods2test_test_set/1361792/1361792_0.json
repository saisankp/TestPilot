{"test_class": {"identifier": "GitDirLocatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  MavenProject project;", "modifier": "@Mock", "type": "MavenProject", "declarator": "project", "var_name": "project"}, {"original_string": "List<MavenProject> reactorProjects = Collections.emptyList();", "modifier": "", "type": "List<MavenProject>", "declarator": "reactorProjects = Collections.emptyList()", "var_name": "reactorProjects"}], "file": "maven/src/test/java/pl/project13/maven/git/GitDirLocatorTest.java"}, "test_case": {"identifier": "shouldUseTheManuallySpecifiedDirectory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldUseTheManuallySpecifiedDirectory() throws Exception {\n    // given\n    File dotGitDir = Files.createTempDirectory(\"temp\").toFile();\n    try {\n\n      // when\n      GitDirLocator locator = new GitDirLocator(project, reactorProjects);\n      File foundDirectory = locator.lookupGitDirectory(dotGitDir);\n\n      // then\n      assert foundDirectory != null;\n      assertThat(foundDirectory.getAbsolutePath()).isEqualTo(dotGitDir.getAbsolutePath());\n    } finally {\n      if (!dotGitDir.delete()) {\n        dotGitDir.deleteOnExit();\n      }\n    }\n  }", "signature": "void shouldUseTheManuallySpecifiedDirectory()", "full_signature": "@Test public void shouldUseTheManuallySpecifiedDirectory()", "class_method_signature": "GitDirLocatorTest.shouldUseTheManuallySpecifiedDirectory()", "testcase": true, "constructor": false, "invocations": ["toFile", "createTempDirectory", "lookupGitDirectory", "isEqualTo", "assertThat", "getAbsolutePath", "getAbsolutePath", "delete", "deleteOnExit"]}, "focal_class": {"identifier": "GitDirLocator", "superclass": "", "interfaces": "", "fields": [{"original_string": "final MavenProject mavenProject;", "modifier": "final", "type": "MavenProject", "declarator": "mavenProject", "var_name": "mavenProject"}, {"original_string": "final List<MavenProject> reactorProjects;", "modifier": "final", "type": "List<MavenProject>", "declarator": "reactorProjects", "var_name": "reactorProjects"}], "methods": [{"identifier": "GitDirLocator", "parameters": "(MavenProject mavenProject, List<MavenProject> reactorProjects)", "modifiers": "public", "return": "", "signature": " GitDirLocator(MavenProject mavenProject, List<MavenProject> reactorProjects)", "full_signature": "public  GitDirLocator(MavenProject mavenProject, List<MavenProject> reactorProjects)", "class_method_signature": "GitDirLocator.GitDirLocator(MavenProject mavenProject, List<MavenProject> reactorProjects)", "testcase": false, "constructor": true}, {"identifier": "lookupGitDirectory", "parameters": "(@Nonnull File manuallyConfiguredDir)", "modifiers": "@Nullable public", "return": "File", "signature": "File lookupGitDirectory(@Nonnull File manuallyConfiguredDir)", "full_signature": "@Nullable public File lookupGitDirectory(@Nonnull File manuallyConfiguredDir)", "class_method_signature": "GitDirLocator.lookupGitDirectory(@Nonnull File manuallyConfiguredDir)", "testcase": false, "constructor": false}, {"identifier": "findProjectGitDirectory", "parameters": "()", "modifiers": "@Nullable private", "return": "File", "signature": "File findProjectGitDirectory()", "full_signature": "@Nullable private File findProjectGitDirectory()", "class_method_signature": "GitDirLocator.findProjectGitDirectory()", "testcase": false, "constructor": false}, {"identifier": "processGitDirFile", "parameters": "(@Nonnull File file)", "modifiers": "private", "return": "File", "signature": "File processGitDirFile(@Nonnull File file)", "full_signature": "private File processGitDirFile(@Nonnull File file)", "class_method_signature": "GitDirLocator.processGitDirFile(@Nonnull File file)", "testcase": false, "constructor": false}, {"identifier": "isExistingDirectory", "parameters": "(@Nullable File fileLocation)", "modifiers": "private static", "return": "boolean", "signature": "boolean isExistingDirectory(@Nullable File fileLocation)", "full_signature": "private static boolean isExistingDirectory(@Nullable File fileLocation)", "class_method_signature": "GitDirLocator.isExistingDirectory(@Nullable File fileLocation)", "testcase": false, "constructor": false}], "file": "maven/src/main/java/pl/project13/maven/git/GitDirLocator.java"}, "focal_method": {"identifier": "lookupGitDirectory", "parameters": "(@Nonnull File manuallyConfiguredDir)", "modifiers": "@Nullable public", "return": "File", "body": "@Nullable\n  public File lookupGitDirectory(@Nonnull File manuallyConfiguredDir) {\n    if (manuallyConfiguredDir.exists()) {\n\n      // If manuallyConfiguredDir is a directory then we can use it as the git path.\n      if (manuallyConfiguredDir.isDirectory()) {\n        return manuallyConfiguredDir;\n      }\n\n      // If the path exists but is not a directory it might be a git submodule \"gitdir\" link.\n      File gitDirLinkPath = processGitDirFile(manuallyConfiguredDir);\n\n      // If the linkPath was found from the file and it exists then use it.\n      if (isExistingDirectory(gitDirLinkPath)) {\n        return gitDirLinkPath;\n      }\n\n      /*\n       * FIXME: I think we should fail here because a manual path was set and it was not found\n       * but I'm leaving it falling back to searching for the git path because that is the current\n       * behaviour - Unluckypixie.\n       */\n    }\n\n    return findProjectGitDirectory();\n  }", "signature": "File lookupGitDirectory(@Nonnull File manuallyConfiguredDir)", "full_signature": "@Nullable public File lookupGitDirectory(@Nonnull File manuallyConfiguredDir)", "class_method_signature": "GitDirLocator.lookupGitDirectory(@Nonnull File manuallyConfiguredDir)", "testcase": false, "constructor": false, "invocations": ["exists", "isDirectory", "processGitDirFile", "isExistingDirectory", "findProjectGitDirectory"]}, "repository": {"repo_id": 1361792, "url": "https://github.com/git-commit-id/git-commit-id-maven-plugin", "stars": 1017, "created": "2/13/2011 1:55:14 PM +00:00", "updates": "2020-01-26T17:04:13+00:00", "fork": "False", "license": "licensed"}}