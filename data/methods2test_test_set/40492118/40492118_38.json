{"test_class": {"identifier": "MarshmallowNetworkObservingStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}, {"original_string": "@Spy private MarshmallowNetworkObservingStrategy strategy =\n      new MarshmallowNetworkObservingStrategy();", "modifier": "@Spy private", "type": "MarshmallowNetworkObservingStrategy", "declarator": "strategy =\n      new MarshmallowNetworkObservingStrategy()", "var_name": "strategy"}, {"original_string": "@Mock private PowerManager powerManager;", "modifier": "@Mock private", "type": "PowerManager", "declarator": "powerManager", "var_name": "powerManager"}, {"original_string": "@Mock private ConnectivityManager connectivityManager;", "modifier": "@Mock private", "type": "ConnectivityManager", "declarator": "connectivityManager", "var_name": "connectivityManager"}, {"original_string": "@Mock private Context contextMock;", "modifier": "@Mock private", "type": "Context", "declarator": "contextMock", "var_name": "contextMock"}, {"original_string": "@Mock private Intent intent;", "modifier": "@Mock private", "type": "Intent", "declarator": "intent", "var_name": "intent"}, {"original_string": "@Mock private Network network;", "modifier": "@Mock private", "type": "Network", "declarator": "network", "var_name": "network"}, {"original_string": "@Spy private Context context;", "modifier": "@Spy private", "type": "Context", "declarator": "context", "var_name": "context"}], "file": "library/src/test/java/com/github/pwittchen/reactivenetwork/library/rx2/network/observing/strategy/MarshmallowNetworkObservingStrategyTest.java"}, "test_case": {"identifier": "shouldNotBeInIdleModeWhenDeviceIsNotInIdleMode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldNotBeInIdleModeWhenDeviceIsNotInIdleMode() {\n    // given\n    preparePowerManagerMocks(Boolean.FALSE, Boolean.TRUE);\n\n    // when\n    final boolean isIdleMode = strategy.isIdleMode(contextMock);\n\n    // then\n    assertThat(isIdleMode).isFalse();\n  }", "signature": "void shouldNotBeInIdleModeWhenDeviceIsNotInIdleMode()", "full_signature": "@Test public void shouldNotBeInIdleModeWhenDeviceIsNotInIdleMode()", "class_method_signature": "MarshmallowNetworkObservingStrategyTest.shouldNotBeInIdleModeWhenDeviceIsNotInIdleMode()", "testcase": true, "constructor": false, "invocations": ["preparePowerManagerMocks", "isIdleMode", "isFalse", "assertThat"]}, "focal_class": {"identifier": "MarshmallowNetworkObservingStrategy", "superclass": "", "interfaces": "implements NetworkObservingStrategy", "fields": [{"original_string": "protected static final String ERROR_MSG_NETWORK_CALLBACK =\n      \"could not unregister network callback\";", "modifier": "protected static final", "type": "String", "declarator": "ERROR_MSG_NETWORK_CALLBACK =\n      \"could not unregister network callback\"", "var_name": "ERROR_MSG_NETWORK_CALLBACK"}, {"original_string": "protected static final String ERROR_MSG_RECEIVER = \"could not unregister receiver\";", "modifier": "protected static final", "type": "String", "declarator": "ERROR_MSG_RECEIVER = \"could not unregister receiver\"", "var_name": "ERROR_MSG_RECEIVER"}, {"original_string": "@SuppressWarnings(\"NullAway\") // it has to be initialized in the Observable due to Context\n  private ConnectivityManager.NetworkCallback networkCallback;", "modifier": "@SuppressWarnings(\"NullAway\") // it has to be initialized in the Observable due to Context\n  private", "type": "ConnectivityManager.NetworkCallback", "declarator": "networkCallback", "var_name": "networkCallback"}, {"original_string": "private final Subject<Connectivity> connectivitySubject;", "modifier": "private final", "type": "Subject<Connectivity>", "declarator": "connectivitySubject", "var_name": "connectivitySubject"}, {"original_string": "private final BroadcastReceiver idleReceiver;", "modifier": "private final", "type": "BroadcastReceiver", "declarator": "idleReceiver", "var_name": "idleReceiver"}, {"original_string": "private Connectivity lastConnectivity = Connectivity.create();", "modifier": "private", "type": "Connectivity", "declarator": "lastConnectivity = Connectivity.create()", "var_name": "lastConnectivity"}], "methods": [{"identifier": "MarshmallowNetworkObservingStrategy", "parameters": "()", "modifiers": "@SuppressWarnings(\"NullAway\") // networkCallback cannot be initialized here public", "return": "", "signature": " MarshmallowNetworkObservingStrategy()", "full_signature": "@SuppressWarnings(\"NullAway\") // networkCallback cannot be initialized here public  MarshmallowNetworkObservingStrategy()", "class_method_signature": "MarshmallowNetworkObservingStrategy.MarshmallowNetworkObservingStrategy()", "testcase": false, "constructor": true}, {"identifier": "observeNetworkConnectivity", "parameters": "(final Context context)", "modifiers": "@Override public", "return": "Observable<Connectivity>", "signature": "Observable<Connectivity> observeNetworkConnectivity(final Context context)", "full_signature": "@Override public Observable<Connectivity> observeNetworkConnectivity(final Context context)", "class_method_signature": "MarshmallowNetworkObservingStrategy.observeNetworkConnectivity(final Context context)", "testcase": false, "constructor": false}, {"identifier": "propagateAnyConnectedState", "parameters": "(final Connectivity last,\n      final Connectivity current)", "modifiers": "protected", "return": "Publisher<Connectivity>", "signature": "Publisher<Connectivity> propagateAnyConnectedState(final Connectivity last,\n      final Connectivity current)", "full_signature": "protected Publisher<Connectivity> propagateAnyConnectedState(final Connectivity last,\n      final Connectivity current)", "class_method_signature": "MarshmallowNetworkObservingStrategy.propagateAnyConnectedState(final Connectivity last,\n      final Connectivity current)", "testcase": false, "constructor": false}, {"identifier": "registerIdleReceiver", "parameters": "(final Context context)", "modifiers": "protected", "return": "void", "signature": "void registerIdleReceiver(final Context context)", "full_signature": "protected void registerIdleReceiver(final Context context)", "class_method_signature": "MarshmallowNetworkObservingStrategy.registerIdleReceiver(final Context context)", "testcase": false, "constructor": false}, {"identifier": "createIdleBroadcastReceiver", "parameters": "()", "modifiers": "@NonNull protected", "return": "BroadcastReceiver", "signature": "BroadcastReceiver createIdleBroadcastReceiver()", "full_signature": "@NonNull protected BroadcastReceiver createIdleBroadcastReceiver()", "class_method_signature": "MarshmallowNetworkObservingStrategy.createIdleBroadcastReceiver()", "testcase": false, "constructor": false}, {"identifier": "isIdleMode", "parameters": "(final Context context)", "modifiers": "protected", "return": "boolean", "signature": "boolean isIdleMode(final Context context)", "full_signature": "protected boolean isIdleMode(final Context context)", "class_method_signature": "MarshmallowNetworkObservingStrategy.isIdleMode(final Context context)", "testcase": false, "constructor": false}, {"identifier": "tryToUnregisterCallback", "parameters": "(final ConnectivityManager manager)", "modifiers": "protected", "return": "void", "signature": "void tryToUnregisterCallback(final ConnectivityManager manager)", "full_signature": "protected void tryToUnregisterCallback(final ConnectivityManager manager)", "class_method_signature": "MarshmallowNetworkObservingStrategy.tryToUnregisterCallback(final ConnectivityManager manager)", "testcase": false, "constructor": false}, {"identifier": "tryToUnregisterReceiver", "parameters": "(Context context)", "modifiers": "protected", "return": "void", "signature": "void tryToUnregisterReceiver(Context context)", "full_signature": "protected void tryToUnregisterReceiver(Context context)", "class_method_signature": "MarshmallowNetworkObservingStrategy.tryToUnregisterReceiver(Context context)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(final String message, final Exception exception)", "modifiers": "@Override public", "return": "void", "signature": "void onError(final String message, final Exception exception)", "full_signature": "@Override public void onError(final String message, final Exception exception)", "class_method_signature": "MarshmallowNetworkObservingStrategy.onError(final String message, final Exception exception)", "testcase": false, "constructor": false}, {"identifier": "createNetworkCallback", "parameters": "(final Context context)", "modifiers": "protected", "return": "ConnectivityManager.NetworkCallback", "signature": "ConnectivityManager.NetworkCallback createNetworkCallback(final Context context)", "full_signature": "protected ConnectivityManager.NetworkCallback createNetworkCallback(final Context context)", "class_method_signature": "MarshmallowNetworkObservingStrategy.createNetworkCallback(final Context context)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(Connectivity connectivity)", "modifiers": "protected", "return": "void", "signature": "void onNext(Connectivity connectivity)", "full_signature": "protected void onNext(Connectivity connectivity)", "class_method_signature": "MarshmallowNetworkObservingStrategy.onNext(Connectivity connectivity)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/network/observing/strategy/MarshmallowNetworkObservingStrategy.java"}, "focal_method": {"identifier": "isIdleMode", "parameters": "(final Context context)", "modifiers": "protected", "return": "boolean", "body": "protected boolean isIdleMode(final Context context) {\n    final String packageName = context.getPackageName();\n    final PowerManager manager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);\n    boolean isIgnoringOptimizations = manager.isIgnoringBatteryOptimizations(packageName);\n    return manager.isDeviceIdleMode() && !isIgnoringOptimizations;\n  }", "signature": "boolean isIdleMode(final Context context)", "full_signature": "protected boolean isIdleMode(final Context context)", "class_method_signature": "MarshmallowNetworkObservingStrategy.isIdleMode(final Context context)", "testcase": false, "constructor": false, "invocations": ["getPackageName", "getSystemService", "isIgnoringBatteryOptimizations", "isDeviceIdleMode"]}, "repository": {"repo_id": 40492118, "url": "https://github.com/pwittchen/ReactiveNetwork", "stars": 2282, "created": "8/10/2015 4:06:58 PM +00:00", "updates": "2020-01-26T20:59:17+00:00", "fork": "False", "license": "licensed"}}