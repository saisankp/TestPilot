{"test_class": {"identifier": "SofaRegistryHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "registry/registry-sofa/src/test/java/com/alipay/sofa/rpc/registry/sofa/SofaRegistryHelperTest.java"}, "test_case": {"identifier": "parseProviderInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseProviderInfo() throws Exception {\n        String defaultProtocol = RpcConfigs.getStringValue(RpcOptions.DEFAULT_PROTOCOL);\n        // 10.244.22.1:8080?zone=GZ00A&self_app_name=icardcenter&app_name=icardcenter&_TIMEOUT=3000\n        // 11.166.0.239:12200?_TIMEOUT=3000&p=1&_SERIALIZETYPE=hessian2&app_name=iptcore&zone=GZ00A&_IDLETIMEOUT=27&_MAXREADIDLETIME=30&v=4.0\n        // 10.209.76.82:12200?_TIMEOUT=3000&p=1&_SERIALIZETYPE=hessian2&app_name=ipayprocess&zone=GZ00A&_IDLETIMEOUT=27&_MAXREADIDLETIME=30&v=4.0\n        // 10.15.232.229:55555?_CONNECTIONNUM=1&v=4.0&_SERIALIZETYPE=4&app_name=test&p=1&_TIMEOUT=4000\n        // 10.15.232.229:12222?_TIMEOUT=3333&p=1&_SERIALIZETYPE=4&_CONNECTIONNUM=1&_WARMUPTIME=60000&_WARMUPWEIGHT=5&app_name=test-server&v=4.0&_WEIGHT=2000&[cd]=[clientTimeout#5555]&[echoStr]=[timeout#4444]\n        // [xxxx]=[clientTimeout#2000@retries#2]\n        // [xxxx]=[_AUTORECONNECT#false@_TIMEOUT#2000]\n        String url = \"10.244.22.1:8080?zone=GZ00A&self_app_name=icardcenter&app_name=icardcenter&_TIMEOUT=3000\";\n        ProviderInfo provider = SofaRegistryHelper.parseProviderInfo(url);\n\n        Assert.assertTrue(defaultProtocol.equals(provider.getProtocolType()));\n        Assert.assertTrue(\"10.244.22.1\".equals(provider.getHost()));\n        Assert.assertTrue(provider.getPort() == 8080);\n        Assert.assertTrue(\"GZ00A\".equals(provider.getAttr(\"zone\")));\n        Assert.assertTrue(\"icardcenter\".equals(provider.getAttr(ProviderInfoAttrs.ATTR_APP_NAME)));\n        Assert.assertTrue((Integer) provider.getDynamicAttr(ProviderInfoAttrs.ATTR_TIMEOUT) == 3000);\n\n        url = \"11.166.0.239:12200?_TIMEOUT=3000&p=1&_SERIALIZETYPE=hessian2&app_name=iptcore&zone=GZ00B&_IDLETIMEOUT=27&_MAXREADIDLETIME=30&v=4.0\";\n        provider = SofaRegistryHelper.parseProviderInfo(url);\n\n        Assert.assertTrue(RpcConstants.PROTOCOL_TYPE_BOLT.equals(provider.getProtocolType()));\n        Assert.assertTrue(RpcConstants.SERIALIZE_HESSIAN2.equals(provider.getSerializationType()));\n        Assert.assertTrue(\"11.166.0.239\".equals(provider.getHost()));\n        Assert.assertTrue(provider.getPort() == 12200);\n        Assert.assertTrue(\"GZ00B\".equals(provider.getAttr(\"zone\")));\n        Assert.assertTrue(\"iptcore\".equals(provider.getAttr(ProviderInfoAttrs.ATTR_APP_NAME)));\n        Assert.assertTrue(\"27\".equals(provider.getAttr(\"_IDLETIMEOUT\")));\n        Assert.assertTrue(\"30\".equals(provider.getAttr(\"_MAXREADIDLETIME\")));\n        Assert.assertTrue(\"4.0\".equals(provider.getAttr(\"v\")));\n        Assert.assertTrue(\"1\".equals(provider.getAttr(\"p\")));\n\n        url = \"10.209.80.104:12200?zone=GZ00A&self_app_name=icif&_SERIALIZETYPE=java&app_name=icif&_TIMEOUT=3000\";\n        provider = SofaRegistryHelper.parseProviderInfo(url);\n\n        Assert.assertTrue(defaultProtocol.equals(provider.getProtocolType()));\n        Assert.assertTrue(RpcConstants.SERIALIZE_JAVA.equals(provider.getSerializationType()));\n        Assert.assertTrue(\"10.209.80.104\".equals(provider.getHost()));\n        Assert.assertTrue(provider.getPort() == 12200);\n        Assert.assertTrue(\"GZ00A\".equals(provider.getAttr(\"zone\")));\n        Assert.assertTrue(\"icif\".equals(provider.getAttr(ProviderInfoAttrs.ATTR_APP_NAME)));\n        Assert.assertTrue((Integer) provider.getDynamicAttr(ProviderInfoAttrs.ATTR_TIMEOUT) == 3000);\n        Assert.assertTrue(provider.getAttr(\"v\") == null);\n        Assert.assertTrue(provider.getAttr(\"p\") == null);\n\n        url = \"10.209.76.82:12200?_TIMEOUT=3000&p=13&_SERIALIZETYPE=11&app_name=ipayprocess&zone=GZ00A&_IDLETIMEOUT=27&_MAXREADIDLETIME=30&v=4.0&[xx]=[_AUTORECONNECT#false@_TIMEOUT#2000]\";\n        provider = SofaRegistryHelper.parseProviderInfo(url);\n\n        Assert.assertTrue(RpcConstants.PROTOCOL_TYPE_TR.equals(provider.getProtocolType()));\n        Assert.assertTrue(RpcConstants.SERIALIZE_PROTOBUF.equals(provider.getSerializationType()));\n        Assert.assertTrue(\"10.209.76.82\".equals(provider.getHost()));\n        Assert.assertTrue(provider.getPort() == 12200);\n        Assert.assertTrue(\"GZ00A\".equals(provider.getAttr(\"zone\")));\n        Assert.assertTrue(\"ipayprocess\".equals(provider.getAttr(ProviderInfoAttrs.ATTR_APP_NAME)));\n        Assert.assertTrue((Integer) provider.getDynamicAttr(ProviderInfoAttrs.ATTR_TIMEOUT) == 3000);\n        Assert.assertTrue(\"27\".equals(provider.getAttr(\"_IDLETIMEOUT\")));\n        Assert.assertTrue(\"30\".equals(provider.getAttr(\"_MAXREADIDLETIME\")));\n        Assert.assertTrue(\"4.0\".equals(provider.getAttr(\"v\")));\n        Assert.assertTrue(\"13\".equals(provider.getAttr(\"p\")));\n        Assert.assertTrue((Integer) provider.getDynamicAttr(\".xx.timeout\") == 2000);\n        Assert.assertTrue(\"false\".equals(provider.getAttr(\".xx._AUTORECONNECT\")));\n\n        url = \"tri://10.15.232.229:55555?_CONNECTIONNUM=1&v=4.0&_SERIALIZETYPE=11&app_name=test&p=1&_TIMEOUT=4000\";\n        provider = SofaRegistryHelper.parseProviderInfo(url);\n\n        Assert.assertTrue(RpcConstants.PROTOCOL_TYPE_TRIPLE.equals(provider.getProtocolType()));\n        Assert.assertTrue(RpcConstants.SERIALIZE_PROTOBUF.equals(provider.getSerializationType()));\n        Assert.assertTrue(\"10.15.232.229\".equals(provider.getHost()));\n        Assert.assertTrue(provider.getPort() == 55555);\n        Assert.assertTrue(\"test\".equals(provider.getAttr(ProviderInfoAttrs.ATTR_APP_NAME)));\n        Assert.assertTrue(\"1\".equals(provider.getAttr(ProviderInfoAttrs.ATTR_CONNECTIONS)));\n        Assert.assertTrue((Integer) provider.getDynamicAttr(ProviderInfoAttrs.ATTR_TIMEOUT) == 4000);\n        Assert.assertTrue(\"4.0\".equals(provider.getAttr(\"v\")));\n        Assert.assertTrue(\"1\".equals(provider.getAttr(\"p\")));\n\n        url = \"10.15.232.229:12222?_TIMEOUT=3333&p=1&_SERIALIZETYPE=4&_CONNECTIONNUM=1&_WARMUPTIME=6&_WARMUPWEIGHT=5&app_name=test-server&v=4.0&_WEIGHT=2000&[cd]=[]&[echoStr]=[clientTimeout#4444]\";\n        provider = SofaRegistryHelper.parseProviderInfo(url);\n\n        Assert.assertTrue(RpcConstants.PROTOCOL_TYPE_BOLT.equals(provider.getProtocolType()));\n        Assert.assertTrue(RpcConstants.SERIALIZE_HESSIAN2.equals(provider.getSerializationType()));\n        Assert.assertTrue(\"10.15.232.229\".equals(provider.getHost()));\n        Assert.assertTrue(provider.getPort() == 12222);\n        Assert.assertTrue(\"test-server\".equals(provider.getAttr(ProviderInfoAttrs.ATTR_APP_NAME)));\n        Assert.assertTrue(\"1\".equals(provider.getAttr(ProviderInfoAttrs.ATTR_CONNECTIONS)));\n        Assert.assertTrue((Integer) provider.getDynamicAttr(ProviderInfoAttrs.ATTR_TIMEOUT) == 3333);\n        Assert.assertTrue((Integer) provider.getDynamicAttr(ProviderInfoAttrs.ATTR_WARMUP_WEIGHT) == 5);\n        Assert.assertTrue(provider.getDynamicAttr(ProviderInfoAttrs.ATTR_WARM_UP_END_TIME) != null);\n        Assert.assertEquals(provider.getStaticAttr(ProviderInfoAttrs.ATTR_WARMUP_WEIGHT), \"5\");\n        Assert.assertEquals(provider.getStaticAttr(ProviderInfoAttrs.ATTR_WARMUP_TIME), \"6\");\n        Assert.assertTrue(provider.getWeight() == 5);\n        Assert.assertTrue(provider.getStatus() == ProviderStatus.WARMING_UP);\n        try {\n            Thread.sleep(10);\n        } catch (Exception e) {\n        }\n        Assert.assertTrue(provider.getWeight() == 2000);\n        Assert.assertTrue(provider.getStatus() == ProviderStatus.AVAILABLE);\n        Assert.assertTrue(provider.getDynamicAttr(ProviderInfoAttrs.ATTR_WARM_UP_END_TIME) == null);\n        Assert.assertTrue(\"4.0\".equals(provider.getAttr(\"v\")));\n        Assert.assertTrue(\"1\".equals(provider.getAttr(\"p\")));\n        Assert.assertTrue(provider.getAttr(\".cd.timeout\") == null);\n        Assert.assertTrue((Integer) provider.getDynamicAttr(\".echoStr.timeout\") == 4444);\n\n        url = \"10.15.232.229:12222?_TIMEOUT=3333&p=1&_SERIALIZETYPE=4&_CONNECTIONNUM=1&_WARMUPTIME=6&_WARMUPWEIGHT=5&startTime=123456\";\n        provider = SofaRegistryHelper.parseProviderInfo(url);\n        Assert.assertTrue((Integer) provider.getDynamicAttr(ProviderInfoAttrs.ATTR_TIMEOUT) == 3333);\n        Assert.assertTrue((Integer) provider.getDynamicAttr(ProviderInfoAttrs.ATTR_WARMUP_WEIGHT) == 5);\n        Assert.assertTrue(provider.getDynamicAttr(ProviderInfoAttrs.ATTR_WARM_UP_END_TIME) != null);\n        Assert.assertEquals(provider.getStaticAttr(ProviderInfoAttrs.ATTR_WARMUP_WEIGHT), \"5\");\n        Assert.assertEquals(provider.getStaticAttr(ProviderInfoAttrs.ATTR_WARMUP_TIME), \"6\");\n        Assert.assertTrue(provider.getWeight() == 100);\n        Assert.assertTrue(provider.getStatus() == ProviderStatus.AVAILABLE);\n\n        url = \"bolt://10.244.22.1:8080?zone=GZ00A&appName=icardcenter&timeout=3000&serialization=hessian2\";\n        provider = SofaRegistryHelper.parseProviderInfo(url);\n        Assert.assertTrue(RpcConstants.PROTOCOL_TYPE_BOLT.equals(provider.getProtocolType()));\n        Assert.assertTrue(RpcConstants.SERIALIZE_HESSIAN2.equals(provider.getSerializationType()));\n        Assert.assertTrue(\"10.244.22.1\".equals(provider.getHost()));\n        Assert.assertTrue(provider.getPort() == 8080);\n        Assert.assertTrue(\"GZ00A\".equals(provider.getAttr(\"zone\")));\n        Assert.assertTrue(\"icardcenter\".equals(provider.getAttr(ProviderInfoAttrs.ATTR_APP_NAME)));\n        Assert.assertTrue((Integer) provider.getDynamicAttr(ProviderInfoAttrs.ATTR_TIMEOUT) == 3000);\n    }", "signature": "void parseProviderInfo()", "full_signature": "@Test public void parseProviderInfo()", "class_method_signature": "SofaRegistryHelperTest.parseProviderInfo()", "testcase": true, "constructor": false, "invocations": ["getStringValue", "parseProviderInfo", "assertTrue", "equals", "getProtocolType", "assertTrue", "equals", "getHost", "assertTrue", "getPort", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "getDynamicAttr", "parseProviderInfo", "assertTrue", "equals", "getProtocolType", "assertTrue", "equals", "getSerializationType", "assertTrue", "equals", "getHost", "assertTrue", "getPort", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "parseProviderInfo", "assertTrue", "equals", "getProtocolType", "assertTrue", "equals", "getSerializationType", "assertTrue", "equals", "getHost", "assertTrue", "getPort", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "getDynamicAttr", "assertTrue", "getAttr", "assertTrue", "getAttr", "parseProviderInfo", "assertTrue", "equals", "getProtocolType", "assertTrue", "equals", "getSerializationType", "assertTrue", "equals", "getHost", "assertTrue", "getPort", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "getDynamicAttr", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "getDynamicAttr", "assertTrue", "equals", "getAttr", "parseProviderInfo", "assertTrue", "equals", "getProtocolType", "assertTrue", "equals", "getSerializationType", "assertTrue", "equals", "getHost", "assertTrue", "getPort", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "getDynamicAttr", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "parseProviderInfo", "assertTrue", "equals", "getProtocolType", "assertTrue", "equals", "getSerializationType", "assertTrue", "equals", "getHost", "assertTrue", "getPort", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "getDynamicAttr", "assertTrue", "getDynamicAttr", "assertTrue", "getDynamicAttr", "assertEquals", "getStaticAttr", "assertEquals", "getStaticAttr", "assertTrue", "getWeight", "assertTrue", "getStatus", "sleep", "assertTrue", "getWeight", "assertTrue", "getStatus", "assertTrue", "getDynamicAttr", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "getAttr", "assertTrue", "getDynamicAttr", "parseProviderInfo", "assertTrue", "getDynamicAttr", "assertTrue", "getDynamicAttr", "assertTrue", "getDynamicAttr", "assertEquals", "getStaticAttr", "assertEquals", "getStaticAttr", "assertTrue", "getWeight", "assertTrue", "getStatus", "parseProviderInfo", "assertTrue", "equals", "getProtocolType", "assertTrue", "equals", "getSerializationType", "assertTrue", "equals", "getHost", "assertTrue", "getPort", "assertTrue", "equals", "getAttr", "assertTrue", "equals", "getAttr", "assertTrue", "getDynamicAttr"]}, "focal_class": {"identifier": "SofaRegistryHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER                     = LoggerFactory.getLogger(SofaRegistryHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER                     = LoggerFactory.getLogger(SofaRegistryHelper.class)", "var_name": "LOGGER"}, {"original_string": "public static final String  PUBLISHER_PREFIX           = \"SofaProvider-\";", "modifier": "public static final", "type": "String", "declarator": "PUBLISHER_PREFIX           = \"SofaProvider-\"", "var_name": "PUBLISHER_PREFIX"}, {"original_string": "public static final String  SUBSCRIBER_PREFIX          = \"SofaSubscriber-\";", "modifier": "public static final", "type": "String", "declarator": "SUBSCRIBER_PREFIX          = \"SofaSubscriber-\"", "var_name": "SUBSCRIBER_PREFIX"}, {"original_string": "public static final String  SUBSCRIBER_LIST_GROUP_ID   = \"SOFA\";", "modifier": "public static final", "type": "String", "declarator": "SUBSCRIBER_LIST_GROUP_ID   = \"SOFA\"", "var_name": "SUBSCRIBER_LIST_GROUP_ID"}, {"original_string": "public static final String  SUBSCRIBER_CONFIG_GROUP_ID = \"SOFA.CONFIG\";", "modifier": "public static final", "type": "String", "declarator": "SUBSCRIBER_CONFIG_GROUP_ID = \"SOFA.CONFIG\"", "var_name": "SUBSCRIBER_CONFIG_GROUP_ID"}, {"original_string": "public static final String  PROTOCOL_TYPE_OVERRIDE     = \"override\";", "modifier": "public static final", "type": "String", "declarator": "PROTOCOL_TYPE_OVERRIDE     = \"override\"", "var_name": "PROTOCOL_TYPE_OVERRIDE"}], "methods": [{"identifier": "buildListDataId", "parameters": "(AbstractInterfaceConfig config, String protocol)", "modifiers": "public static", "return": "String", "signature": "String buildListDataId(AbstractInterfaceConfig config, String protocol)", "full_signature": "public static String buildListDataId(AbstractInterfaceConfig config, String protocol)", "class_method_signature": "SofaRegistryHelper.buildListDataId(AbstractInterfaceConfig config, String protocol)", "testcase": false, "constructor": false}, {"identifier": "convertProviderToUrls", "parameters": "(ProviderConfig providerConfig, ServerConfig server)", "modifiers": "public static", "return": "String", "signature": "String convertProviderToUrls(ProviderConfig providerConfig, ServerConfig server)", "full_signature": "public static String convertProviderToUrls(ProviderConfig providerConfig, ServerConfig server)", "class_method_signature": "SofaRegistryHelper.convertProviderToUrls(ProviderConfig providerConfig, ServerConfig server)", "testcase": false, "constructor": false}, {"identifier": "convertMap2Pair", "parameters": "(Map<String, String> map)", "modifiers": "private static", "return": "String", "signature": "String convertMap2Pair(Map<String, String> map)", "full_signature": "private static String convertMap2Pair(Map<String, String> map)", "class_method_signature": "SofaRegistryHelper.convertMap2Pair(Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "getKeyPairs", "parameters": "(String key, Object value)", "modifiers": "private static", "return": "String", "signature": "String getKeyPairs(String key, Object value)", "full_signature": "private static String getKeyPairs(String key, Object value)", "class_method_signature": "SofaRegistryHelper.getKeyPairs(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "addCommonAttrs", "parameters": "(StringBuilder sb)", "modifiers": "private static", "return": "void", "signature": "void addCommonAttrs(StringBuilder sb)", "full_signature": "private static void addCommonAttrs(StringBuilder sb)", "class_method_signature": "SofaRegistryHelper.addCommonAttrs(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "parseProviderInfos", "parameters": "(List<String> urls)", "modifiers": "public static", "return": "List<ProviderInfo>", "signature": "List<ProviderInfo> parseProviderInfos(List<String> urls)", "full_signature": "public static List<ProviderInfo> parseProviderInfos(List<String> urls)", "class_method_signature": "SofaRegistryHelper.parseProviderInfos(List<String> urls)", "testcase": false, "constructor": false}, {"identifier": "parseProviderInfo", "parameters": "(String originUrl)", "modifiers": "public static", "return": "ProviderInfo", "signature": "ProviderInfo parseProviderInfo(String originUrl)", "full_signature": "public static ProviderInfo parseProviderInfo(String originUrl)", "class_method_signature": "SofaRegistryHelper.parseProviderInfo(String originUrl)", "testcase": false, "constructor": false}, {"identifier": "parseMethodInfo", "parameters": "(Map<String, Object> methodParameters, String method, String valueStr)", "modifiers": "static", "return": "void", "signature": "void parseMethodInfo(Map<String, Object> methodParameters, String method, String valueStr)", "full_signature": "static void parseMethodInfo(Map<String, Object> methodParameters, String method, String valueStr)", "class_method_signature": "SofaRegistryHelper.parseMethodInfo(Map<String, Object> methodParameters, String method, String valueStr)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Map<String, String> map, String... keys)", "modifiers": "static", "return": "String", "signature": "String getValue(Map<String, String> map, String... keys)", "full_signature": "static String getValue(Map<String, String> map, String... keys)", "class_method_signature": "SofaRegistryHelper.getValue(Map<String, String> map, String... keys)", "testcase": false, "constructor": false}, {"identifier": "removeOldKeys", "parameters": "(Map<String, String> map, String... keys)", "modifiers": "static", "return": "void", "signature": "void removeOldKeys(Map<String, String> map, String... keys)", "full_signature": "static void removeOldKeys(Map<String, String> map, String... keys)", "class_method_signature": "SofaRegistryHelper.removeOldKeys(Map<String, String> map, String... keys)", "testcase": false, "constructor": false}], "file": "registry/registry-sofa/src/main/java/com/alipay/sofa/rpc/registry/sofa/SofaRegistryHelper.java"}, "focal_method": {"identifier": "parseProviderInfo", "parameters": "(String originUrl)", "modifiers": "public static", "return": "ProviderInfo", "body": "public static ProviderInfo parseProviderInfo(String originUrl) {\n        String url = originUrl;\n        String host = null;\n        int port = 80;\n        String path = null;\n        String schema = null;\n        int i = url.indexOf(\"://\"); // seperator between schema and body\n        if (i > 0) {\n            schema = url.substring(0, i); // http\n            url = url.substring(i + 3); // 127.0.0.1:8080/xxx/yyy?a=1&b=2&[c]=[ccc]\n        }\n        Map<String, String> parameters = new HashMap<String, String>();\n        i = url.indexOf('?'); // seperator between body and parameters\n        if (i >= 0) {\n            String[] parts = url.substring(i + 1).split(\"\\\\&\"); //a=1&b=2&[c]=[ccc]\n            for (String part : parts) {\n                part = part.trim();\n                if (part.length() > 0) {\n                    int j = part.indexOf('=');\n                    if (j >= 0) {\n                        parameters.put(part.substring(0, j), part.substring(j + 1));\n                    } else {\n                        parameters.put(part, part);\n                    }\n                }\n            }\n            url = url.substring(0, i); //  127.0.0.1:8080/xxx/yyy\n        }\n        i = url.indexOf('/');\n        if (i >= 0) {\n            path = url.substring(i + 1); // xxx/yyy\n            url = url.substring(0, i); // 127.0.0.1:8080\n        }\n        i = url.indexOf(':');\n        if (i >= 0 && i < url.length() - 1) {\n            port = Integer.parseInt(url.substring(i + 1)); // 8080\n            url = url.substring(0, i); // 127.0.0.1\n        }\n        if (url.length() > 0) {\n            host = url; // 127.0.0.1\n        }\n\n        ProviderInfo providerInfo = new ProviderInfo();\n        providerInfo.setOriginUrl(originUrl);\n        providerInfo.setHost(host);\n        if (port != 80) {\n            providerInfo.setPort(port);\n        }\n        if (path != null) {\n            providerInfo.setPath(path);\n        }\n        if (schema != null) {\n            providerInfo.setProtocolType(schema);\n        }\n\n        // \u89e3\u6790\u7279\u6b8a\u5c5e\u6027\n        // p=1\n        String protocolStr = getValue(parameters, RPC_REMOTING_PROTOCOL);\n        if (schema == null && protocolStr != null) {\n            // 1->bolt 13->tr\n            if ((RemotingConstants.PROTOCOL_BOLT + \"\").equals(protocolStr)) {\n                protocolStr = PROTOCOL_TYPE_BOLT;\n            } else if ((RemotingConstants.PROTOCOL_TR + \"\").equals(protocolStr)) {\n                protocolStr = PROTOCOL_TYPE_TR;\n            }\n            try {\n                providerInfo.setProtocolType(protocolStr);\n            } catch (Exception e) {\n                LOGGER.error(LogCodes.getLog(LogCodes.ERROR_INVALID_ATTRIBUTE, \"protocol\", originUrl));\n            }\n        }\n        // TODO SOFAVERSION v=4.0\n        // timeout \n        String timeoutStr = getValue(parameters, ATTR_TIMEOUT, TIMEOUT);\n        if (timeoutStr != null) {\n            removeOldKeys(parameters, ATTR_TIMEOUT, TIMEOUT);\n            try {// \u52a0\u5165\u52a8\u6001\n                providerInfo.setDynamicAttr(ATTR_TIMEOUT, Integer.parseInt(timeoutStr));\n            } catch (Exception e) {\n                LOGGER.error(LogCodes.getLog(LogCodes.ERROR_INVALID_ATTRIBUTE, \"timeout\", originUrl));\n            }\n        }\n        // serializeType \u4f7f\u7528\u5b57\u7b26\u4f20\u9012\n        String serializationStr = getValue(parameters, ATTR_SERIALIZATION,\n            SERIALIZE_TYPE_KEY);\n        if (serializationStr != null) {\n            removeOldKeys(parameters, ATTR_SERIALIZATION, SERIALIZE_TYPE_KEY);\n            // 1 -> hessian   2->java   4->hessian2  11->protobuf\n            if ((RemotingConstants.SERIALIZE_CODE_HESSIAN + \"\").equals(serializationStr)) {\n                serializationStr = SERIALIZE_HESSIAN;\n            } else if ((RemotingConstants.SERIALIZE_CODE_JAVA + \"\").equals(serializationStr)) {\n                serializationStr = SERIALIZE_JAVA;\n            } else if ((RemotingConstants.SERIALIZE_CODE_HESSIAN2 + \"\").equals(serializationStr)) {\n                serializationStr = SERIALIZE_HESSIAN2;\n            } else if ((RemotingConstants.SERIALIZE_CODE_PROTOBUF + \"\").equals(serializationStr)) {\n                serializationStr = SERIALIZE_PROTOBUF;\n            }\n            providerInfo.setSerializationType(serializationStr);\n        }\n        // appName\n        String appNameStr = getValue(parameters, ATTR_APP_NAME, APP_NAME,\n            SofaRegistryConstants.SELF_APP_NAME);\n        if (appNameStr != null) {\n            removeOldKeys(parameters, APP_NAME, SofaRegistryConstants.SELF_APP_NAME);\n            providerInfo.setStaticAttr(ATTR_APP_NAME, appNameStr);\n        }\n        // connections\n        String connections = getValue(parameters, ATTR_CONNECTIONS, SofaRegistryConstants.CONNECTI_NUM);\n        if (connections != null) {\n            removeOldKeys(parameters, SofaRegistryConstants.CONNECTI_NUM);\n            providerInfo.setStaticAttr(ATTR_CONNECTIONS, connections);\n        }\n\n        //rpc version\n        String rpcVersion = getValue(parameters, ATTR_RPC_VERSION);\n        providerInfo.setRpcVersion(CommonUtils.parseInt(rpcVersion, providerInfo.getRpcVersion()));\n\n        // weight\n        String weightStr = getValue(parameters, ATTR_WEIGHT, WEIGHT_KEY);\n        if (weightStr != null) {\n            removeOldKeys(parameters, ATTR_WEIGHT, WEIGHT_KEY);\n            try {\n                int weight = Integer.parseInt(weightStr);\n                providerInfo.setWeight(weight);\n                providerInfo.setStaticAttr(ATTR_WEIGHT, weightStr);\n            } catch (Exception e) {\n                LOGGER.error(LogCodes.getLog(LogCodes.ERROR_INVALID_ATTRIBUTE, \"weight\", originUrl));\n            }\n        }\n        // warmupTime\n        String warmupTimeStr = getValue(parameters, ATTR_WARMUP_TIME, SofaRegistryConstants.WARMUP_TIME_KEY);\n        int warmupTime = 0;\n        if (warmupTimeStr != null) {\n            removeOldKeys(parameters, ATTR_WARMUP_TIME, SofaRegistryConstants.WARMUP_TIME_KEY);\n            try {\n                warmupTime = Integer.parseInt(warmupTimeStr);\n                providerInfo.setStaticAttr(ATTR_WARMUP_TIME, warmupTimeStr);\n            } catch (Exception e) {\n                LOGGER.error(LogCodes.getLog(LogCodes.ERROR_INVALID_ATTRIBUTE, \"warmupTime\", originUrl));\n            }\n        }\n        // warmupWeight\n        String warmupWeightStr = getValue(parameters, ATTR_WARMUP_WEIGHT,\n            SofaRegistryConstants.WARMUP_WEIGHT_KEY);\n        int warmupWeight = 0;\n        if (warmupWeightStr != null) {\n            removeOldKeys(parameters, ATTR_WARMUP_WEIGHT, SofaRegistryConstants.WARMUP_WEIGHT_KEY);\n            try {\n                warmupWeight = Integer.parseInt(warmupWeightStr);\n                providerInfo.setStaticAttr(ATTR_WARMUP_WEIGHT, warmupWeightStr);\n            } catch (Exception e) {\n                LOGGER.error(LogCodes.getLog(LogCodes.ERROR_INVALID_ATTRIBUTE, \"warmupWeight\", originUrl));\n            }\n        }\n        // startTime\n        String startTimeStr = getValue(parameters, ATTR_START_TIME);\n        long startTime = 0L;\n        if (startTimeStr != null) {\n            try {\n                startTime = Long.parseLong(startTimeStr);\n            } catch (Exception e) {\n                LOGGER.error(LogCodes.getLog(LogCodes.ERROR_INVALID_ATTRIBUTE, \"startTime\", originUrl));\n            }\n        }\n        if (startTime == 0) {\n            startTime = System.currentTimeMillis();\n        }\n        // \u8bbe\u7f6e\u9884\u70ed\u72b6\u6001\n        if (StringUtils.isNotBlank(warmupTimeStr) && StringUtils.isNotBlank(warmupWeightStr)) {\n            if (warmupTime > 0) {\n                providerInfo.setStatus(ProviderStatus.WARMING_UP);\n                providerInfo.setDynamicAttr(ATTR_WARMUP_WEIGHT, warmupWeight);\n                providerInfo.setDynamicAttr(ATTR_WARM_UP_END_TIME, startTime + warmupTime);\n            }\n        }\n        // \u89e3\u6790hostMachineName\n        String hostMachineName = getValue(parameters, HOST_MACHINE_KEY);\n        if (StringUtils.isNotBlank(hostMachineName)) {\n            providerInfo.setDynamicAttr(ATTR_HOST_MACHINE, hostMachineName);\n        }\n\n        // \u89e3\u6790\u65b9\u6cd5\u53c2\u6570\n        List<String> methodKeys = new ArrayList<String>();\n        Map<String, Object> methodParameters = new HashMap<String, Object>();\n        for (Map.Entry<String, String> entry : parameters.entrySet()) {\n            if (entry.getKey().startsWith(\"[\") && entry.getKey().endsWith(\"]\") && entry.getValue().startsWith(\"[\") &&\n                entry.getValue().endsWith(\"]\")) { // \u8ba4\u4e3a\u662f\u65b9\u6cd5\u914d\u7f6e\n                String key = entry.getKey();\n                methodKeys.add(key);\n                String methodName = key.substring(1, key.length() - 1);\n                parseMethodInfo(methodParameters, methodName, entry.getValue());\n            }\n        }\n        for (String methodKey : methodKeys) {\n            parameters.remove(methodKey);\n        }\n\n        providerInfo.getStaticAttrs().putAll(parameters);\n        providerInfo.getDynamicAttrs().putAll(methodParameters);\n\n        providerInfo.setStaticAttr(ProviderInfoAttrs.ATTR_SOURCE, \"sofa\");\n        return providerInfo;\n    }", "signature": "ProviderInfo parseProviderInfo(String originUrl)", "full_signature": "public static ProviderInfo parseProviderInfo(String originUrl)", "class_method_signature": "SofaRegistryHelper.parseProviderInfo(String originUrl)", "testcase": false, "constructor": false, "invocations": ["indexOf", "substring", "substring", "indexOf", "split", "substring", "trim", "length", "indexOf", "put", "substring", "substring", "put", "substring", "indexOf", "substring", "substring", "indexOf", "length", "parseInt", "substring", "substring", "length", "setOriginUrl", "setHost", "setPort", "setPath", "setProtocolType", "getValue", "equals", "equals", "setProtocolType", "error", "getLog", "getValue", "removeOldKeys", "setDynamicAttr", "parseInt", "error", "getLog", "getValue", "removeOldKeys", "equals", "equals", "equals", "equals", "setSerializationType", "getValue", "removeOldKeys", "setStaticAttr", "getValue", "removeOldKeys", "setStaticAttr", "getValue", "setRpcVersion", "parseInt", "getRpcVersion", "getValue", "removeOldKeys", "parseInt", "setWeight", "setStaticAttr", "error", "getLog", "getValue", "removeOldKeys", "parseInt", "setStaticAttr", "error", "getLog", "getValue", "removeOldKeys", "parseInt", "setStaticAttr", "error", "getLog", "getValue", "parseLong", "error", "getLog", "currentTimeMillis", "isNotBlank", "isNotBlank", "setStatus", "setDynamicAttr", "setDynamicAttr", "getValue", "isNotBlank", "setDynamicAttr", "entrySet", "startsWith", "getKey", "endsWith", "getKey", "startsWith", "getValue", "endsWith", "getValue", "getKey", "add", "substring", "length", "parseMethodInfo", "getValue", "remove", "putAll", "getStaticAttrs", "putAll", "getDynamicAttrs", "setStaticAttr"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}