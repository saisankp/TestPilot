{"test_class": {"identifier": "ZTSAccessTokenFileLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JwtsSigningKeyResolver resolver;", "modifier": "private", "type": "JwtsSigningKeyResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private final File ecPublicKey = new File(\"./src/test/resources/ec_public.key\");", "modifier": "private final", "type": "File", "declarator": "ecPublicKey = new File(\"./src/test/resources/ec_public.key\")", "var_name": "ecPublicKey"}, {"original_string": "private final File confFile = new File(\"./src/test/resources/athenz.conf\");", "modifier": "private final", "type": "File", "declarator": "confFile = new File(\"./src/test/resources/athenz.conf\")", "var_name": "confFile"}], "file": "clients/java/zts/core/src/test/java/com/yahoo/athenz/zts/ZTSAccessTokenFileLoaderTest.java"}, "test_case": {"identifier": "voidTestPreload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void voidTestPreload() {\n        ZTSAccessTokenFileLoader ztsAccessTokenFileLoader = new ZTSAccessTokenFileLoader(resolver);\n        ztsAccessTokenFileLoader.preload();\n    }", "signature": "void voidTestPreload()", "full_signature": "@Test public void voidTestPreload()", "class_method_signature": "ZTSAccessTokenFileLoaderTest.voidTestPreload()", "testcase": true, "constructor": false, "invocations": ["preload"]}, "focal_class": {"identifier": "ZTSAccessTokenFileLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ZTSAccessTokenFileLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ZTSAccessTokenFileLoader.class)", "var_name": "LOG"}, {"original_string": "static public final String ACCESS_TOKEN_PATH_PROPERTY = \"athenz.zts.client.accesstoken.path\";", "modifier": "static public final", "type": "String", "declarator": "ACCESS_TOKEN_PATH_PROPERTY = \"athenz.zts.client.accesstoken.path\"", "var_name": "ACCESS_TOKEN_PATH_PROPERTY"}, {"original_string": "static private final String DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\";", "modifier": "static private final", "type": "String", "declarator": "DEFAULT_ACCESS_TOKEN_DIR_PATH = \"/var/lib/sia/tokens/\"", "var_name": "DEFAULT_ACCESS_TOKEN_DIR_PATH"}, {"original_string": "static private final String ROLE_NAME_CONNECTOR = \",\";", "modifier": "static private final", "type": "String", "declarator": "ROLE_NAME_CONNECTOR = \",\"", "var_name": "ROLE_NAME_CONNECTOR"}, {"original_string": "static private final String DOMAIN_ROLE_CONNECTOR = \":role:\";", "modifier": "static private final", "type": "String", "declarator": "DOMAIN_ROLE_CONNECTOR = \":role:\"", "var_name": "DOMAIN_ROLE_CONNECTOR"}, {"original_string": "final private String path;", "modifier": "final private", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private JwtsSigningKeyResolver accessSignKeyResolver;", "modifier": "private", "type": "JwtsSigningKeyResolver", "declarator": "accessSignKeyResolver", "var_name": "accessSignKeyResolver"}, {"original_string": "private ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}, {"original_string": "private Map<String, String> roleNameMap;", "modifier": "private", "type": "Map<String, String>", "declarator": "roleNameMap", "var_name": "roleNameMap"}], "methods": [{"identifier": "ZTSAccessTokenFileLoader", "parameters": "(JwtsSigningKeyResolver resolver)", "modifiers": "public", "return": "", "signature": " ZTSAccessTokenFileLoader(JwtsSigningKeyResolver resolver)", "full_signature": "public  ZTSAccessTokenFileLoader(JwtsSigningKeyResolver resolver)", "class_method_signature": "ZTSAccessTokenFileLoader.ZTSAccessTokenFileLoader(JwtsSigningKeyResolver resolver)", "testcase": false, "constructor": true}, {"identifier": "preload", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void preload()", "full_signature": "public void preload()", "class_method_signature": "ZTSAccessTokenFileLoader.preload()", "testcase": false, "constructor": false}, {"identifier": "lookupAccessTokenFromDisk", "parameters": "(String domain, List<String> rolesName)", "modifiers": "public", "return": "AccessTokenResponse", "signature": "AccessTokenResponse lookupAccessTokenFromDisk(String domain, List<String> rolesName)", "full_signature": "public AccessTokenResponse lookupAccessTokenFromDisk(String domain, List<String> rolesName)", "class_method_signature": "ZTSAccessTokenFileLoader.lookupAccessTokenFromDisk(String domain, List<String> rolesName)", "testcase": false, "constructor": false}, {"identifier": "getRolesStr", "parameters": "(String domain, List<String> roleNames)", "modifiers": "static private", "return": "String", "signature": "String getRolesStr(String domain, List<String> roleNames)", "full_signature": "static private String getRolesStr(String domain, List<String> roleNames)", "class_method_signature": "ZTSAccessTokenFileLoader.getRolesStr(String domain, List<String> roleNames)", "testcase": false, "constructor": false}, {"identifier": "addToRoleMap", "parameters": "(String domain, String fileName, AccessTokenResponse accessTokenResponse)", "modifiers": "private", "return": "void", "signature": "void addToRoleMap(String domain, String fileName, AccessTokenResponse accessTokenResponse)", "full_signature": "private void addToRoleMap(String domain, String fileName, AccessTokenResponse accessTokenResponse)", "class_method_signature": "ZTSAccessTokenFileLoader.addToRoleMap(String domain, String fileName, AccessTokenResponse accessTokenResponse)", "testcase": false, "constructor": false}], "file": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSAccessTokenFileLoader.java"}, "focal_method": {"identifier": "preload", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void preload() {\n        File dir = new File(path);\n\n        // preload the map from the <domain, rolesname> -> <file path>\n        // expected dir should be <base token path>/<domain dir>/<token file>s\n        // after preload the map, when we look up the access token,\n        // the map will directly read the required file\n        if (dir.exists() && dir.isDirectory()) {\n            for (File domainDir: dir.listFiles()) {\n                if (domainDir.isDirectory()) {\n                    for (File tokenFile: domainDir.listFiles()) {\n                        if (!tokenFile.isDirectory()) {\n                            AccessTokenResponse accessTokenResponse = null;\n                            try {\n                                accessTokenResponse = objectMapper.readValue(tokenFile, AccessTokenResponse.class);\n                            } catch (IOException e) {\n                                LOG.error(\"Failed to load or parse token file: {}\", tokenFile);\n                            }\n\n                            // if access token parsed fail, continue to scan tokens\n                            if (accessTokenResponse == null) {\n                                continue;\n                            }\n\n                            AccessTokenResponseCacheEntry cacheEntry = new AccessTokenResponseCacheEntry(accessTokenResponse);\n\n                            // check access token is still valid\n                            if (!cacheEntry.isExpired(-1)) {\n                                addToRoleMap(domainDir.getName(), tokenFile.getName(), accessTokenResponse);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n    }", "signature": "void preload()", "full_signature": "public void preload()", "class_method_signature": "ZTSAccessTokenFileLoader.preload()", "testcase": false, "constructor": false, "invocations": ["exists", "isDirectory", "listFiles", "isDirectory", "listFiles", "isDirectory", "readValue", "error", "isExpired", "addToRoleMap", "getName", "getName"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}