{"test_class": {"identifier": "HeaderEntryFiltersTest", "superclass": "", "interfaces": "", "fields": [], "file": "protocol-adapter/src/test/java/org/eclipse/ditto/protocoladapter/HeaderEntryFiltersTest.java"}, "test_case": {"identifier": "toExternalHeadersFilterDiscardsDittoInternalAckRequests", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toExternalHeadersFilterDiscardsDittoInternalAckRequests() {\n        final DittoHeaderDefinition headerDefinition = DittoHeaderDefinition.REQUESTED_ACKS;\n        final Map<String, HeaderDefinition> headerDefinitions =\n                Maps.newHashMap(headerDefinition.getKey(), headerDefinition);\n        final List<AcknowledgementRequest> allAcknowledgementRequests = Lists.list(\n                AcknowledgementRequest.of(AcknowledgementLabel.of(\"foo\")),\n                AcknowledgementRequest.of(DittoAcknowledgementLabel.TWIN_PERSISTED),\n                AcknowledgementRequest.of(AcknowledgementLabel.of(\"bar\")));\n        final JsonArray allAcknowledgementRequestsJsonArray = allAcknowledgementRequests.stream()\n                .map(AcknowledgementRequest::toString)\n                .map(JsonValue::of)\n                .collect(JsonCollectors.valuesToArray());\n        final String value = allAcknowledgementRequestsJsonArray.toString();\n        final JsonArray externalAcknowledgementRequests = allAcknowledgementRequestsJsonArray.toBuilder()\n                .remove(1)\n                .build();\n        final String expected = externalAcknowledgementRequests.toString();\n\n        final HeaderEntryFilter underTest = HeaderEntryFilters.toExternalHeadersFilter(headerDefinitions);\n\n        assertThat(underTest.apply(headerDefinition.getKey(), value)).isEqualTo(expected);\n    }", "signature": "void toExternalHeadersFilterDiscardsDittoInternalAckRequests()", "full_signature": "@Test public void toExternalHeadersFilterDiscardsDittoInternalAckRequests()", "class_method_signature": "HeaderEntryFiltersTest.toExternalHeadersFilterDiscardsDittoInternalAckRequests()", "testcase": true, "constructor": false, "invocations": ["newHashMap", "getKey", "list", "of", "of", "of", "of", "of", "collect", "map", "map", "stream", "valuesToArray", "toString", "build", "remove", "toBuilder", "toString", "toExternalHeadersFilter", "isEqualTo", "assertThat", "apply", "getKey"]}, "focal_class": {"identifier": "HeaderEntryFilters", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "HeaderEntryFilters", "parameters": "()", "modifiers": "private", "return": "", "signature": " HeaderEntryFilters()", "full_signature": "private  HeaderEntryFilters()", "class_method_signature": "HeaderEntryFilters.HeaderEntryFilters()", "testcase": false, "constructor": true}, {"identifier": "toExternalHeadersFilter", "parameters": "(final Map<String, HeaderDefinition> headerDefinitionMap)", "modifiers": "static", "return": "HeaderEntryFilter", "signature": "HeaderEntryFilter toExternalHeadersFilter(final Map<String, HeaderDefinition> headerDefinitionMap)", "full_signature": "static HeaderEntryFilter toExternalHeadersFilter(final Map<String, HeaderDefinition> headerDefinitionMap)", "class_method_signature": "HeaderEntryFilters.toExternalHeadersFilter(final Map<String, HeaderDefinition> headerDefinitionMap)", "testcase": false, "constructor": false}, {"identifier": "shouldWriteToExternal", "parameters": "(final Map<String, HeaderDefinition> headerDefinitions)", "modifiers": "private static", "return": "HeaderEntryFilter", "signature": "HeaderEntryFilter shouldWriteToExternal(final Map<String, HeaderDefinition> headerDefinitions)", "full_signature": "private static HeaderEntryFilter shouldWriteToExternal(final Map<String, HeaderDefinition> headerDefinitions)", "class_method_signature": "HeaderEntryFilters.shouldWriteToExternal(final Map<String, HeaderDefinition> headerDefinitions)", "testcase": false, "constructor": false}, {"identifier": "readJsonArraysFromHeaders", "parameters": "(final Map<String, HeaderDefinition> headerDefinitions)", "modifiers": "private static", "return": "HeaderEntryFilter", "signature": "HeaderEntryFilter readJsonArraysFromHeaders(final Map<String, HeaderDefinition> headerDefinitions)", "full_signature": "private static HeaderEntryFilter readJsonArraysFromHeaders(final Map<String, HeaderDefinition> headerDefinitions)", "class_method_signature": "HeaderEntryFilters.readJsonArraysFromHeaders(final Map<String, HeaderDefinition> headerDefinitions)", "testcase": false, "constructor": false}, {"identifier": "discardDittoAckRequests", "parameters": "()", "modifiers": "private static", "return": "HeaderEntryFilter", "signature": "HeaderEntryFilter discardDittoAckRequests()", "full_signature": "private static HeaderEntryFilter discardDittoAckRequests()", "class_method_signature": "HeaderEntryFilters.discardDittoAckRequests()", "testcase": false, "constructor": false}, {"identifier": "fromExternalHeadersFilter", "parameters": "(final Map<String, HeaderDefinition> headerDefinitionMap)", "modifiers": "static", "return": "HeaderEntryFilter", "signature": "HeaderEntryFilter fromExternalHeadersFilter(final Map<String, HeaderDefinition> headerDefinitionMap)", "full_signature": "static HeaderEntryFilter fromExternalHeadersFilter(final Map<String, HeaderDefinition> headerDefinitionMap)", "class_method_signature": "HeaderEntryFilters.fromExternalHeadersFilter(final Map<String, HeaderDefinition> headerDefinitionMap)", "testcase": false, "constructor": false}, {"identifier": "existsAsHeaderDefinition", "parameters": "(final Map<String, HeaderDefinition> headerDefinitionMap)", "modifiers": "static", "return": "HeaderEntryFilter", "signature": "HeaderEntryFilter existsAsHeaderDefinition(final Map<String, HeaderDefinition> headerDefinitionMap)", "full_signature": "static HeaderEntryFilter existsAsHeaderDefinition(final Map<String, HeaderDefinition> headerDefinitionMap)", "class_method_signature": "HeaderEntryFilters.existsAsHeaderDefinition(final Map<String, HeaderDefinition> headerDefinitionMap)", "testcase": false, "constructor": false}, {"identifier": "existsAsHeaderDefinitionAndExternal", "parameters": "(final Map<String, HeaderDefinition> headerDefinitionMap)", "modifiers": "static", "return": "HeaderEntryFilter", "signature": "HeaderEntryFilter existsAsHeaderDefinitionAndExternal(final Map<String, HeaderDefinition> headerDefinitionMap)", "full_signature": "static HeaderEntryFilter existsAsHeaderDefinitionAndExternal(final Map<String, HeaderDefinition> headerDefinitionMap)", "class_method_signature": "HeaderEntryFilters.existsAsHeaderDefinitionAndExternal(final Map<String, HeaderDefinition> headerDefinitionMap)", "testcase": false, "constructor": false}], "file": "protocol-adapter/src/main/java/org/eclipse/ditto/protocoladapter/HeaderEntryFilters.java"}, "focal_method": {"identifier": "toExternalHeadersFilter", "parameters": "(final Map<String, HeaderDefinition> headerDefinitionMap)", "modifiers": "static", "return": "HeaderEntryFilter", "body": "static HeaderEntryFilter toExternalHeadersFilter(final Map<String, HeaderDefinition> headerDefinitionMap) {\n        final HeaderEntryFilter headerEntryFilter = shouldWriteToExternal(headerDefinitionMap);\n        if (headerDefinitionMap.isEmpty()) {\n            return headerEntryFilter;\n        } else {\n            // only discard Ditto ack request if any headerDefinitions were set - e.g. that is case for the Ditto backend\n            //  the Ditto client should not discard ack requests\n            return headerEntryFilter.andThen(discardDittoAckRequests());\n        }\n    }", "signature": "HeaderEntryFilter toExternalHeadersFilter(final Map<String, HeaderDefinition> headerDefinitionMap)", "full_signature": "static HeaderEntryFilter toExternalHeadersFilter(final Map<String, HeaderDefinition> headerDefinitionMap)", "class_method_signature": "HeaderEntryFilters.toExternalHeadersFilter(final Map<String, HeaderDefinition> headerDefinitionMap)", "testcase": false, "constructor": false, "invocations": ["shouldWriteToExternal", "isEmpty", "andThen", "discardDittoAckRequests"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}