{"test_class": {"identifier": "ConfigValueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConfigValue configValue = new ConfigValue(\"1\", ImmutableMap.of(\n            ImmutableSet.of(\"Prefix1\"), \"2\",\n            ImmutableSet.of(\"Prefix2\", \"Prefix3\"), \"3\",\n            ImmutableSet.of(\"Prefix4\"), \"4\"));", "modifier": "private", "type": "ConfigValue", "declarator": "configValue = new ConfigValue(\"1\", ImmutableMap.of(\n            ImmutableSet.of(\"Prefix1\"), \"2\",\n            ImmutableSet.of(\"Prefix2\", \"Prefix3\"), \"3\",\n            ImmutableSet.of(\"Prefix4\"), \"4\"))", "var_name": "configValue"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/config/ConfigValueTest.java"}, "test_case": {"identifier": "testCase_prefixDoesntExist", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testCase_prefixDoesntExist() {\n        ConfigValue prefixedConfigValue = configValue.getPrefix(\"Prefix0\");\n\n        assertThat(prefixedConfigValue.prefixedValues).isEqualTo(ImmutableMap.of());\n        assertThat(prefixedConfigValue.currentValue).isEqualTo(\"1\");\n    }", "signature": "void testCase_prefixDoesntExist()", "full_signature": "@Test void testCase_prefixDoesntExist()", "class_method_signature": "ConfigValueTest.testCase_prefixDoesntExist()", "testcase": true, "constructor": false, "invocations": ["getPrefix", "isEqualTo", "assertThat", "of", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ConfigValue", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "static final String PREFIX_SEPARATOR = \"@\";", "modifier": "static final", "type": "String", "declarator": "PREFIX_SEPARATOR = \"@\"", "var_name": "PREFIX_SEPARATOR"}, {"original_string": "final ImmutableMap<ImmutableSet<String>, String> prefixedValues;", "modifier": "final", "type": "ImmutableMap<ImmutableSet<String>, String>", "declarator": "prefixedValues", "var_name": "prefixedValues"}, {"original_string": "@CheckForNull final String currentValue;", "modifier": "@CheckForNull final", "type": "String", "declarator": "currentValue", "var_name": "currentValue"}], "methods": [{"identifier": "ConfigValue", "parameters": "(String currentValue, ImmutableMap<ImmutableSet<String>, String> prefixedValues)", "modifiers": "", "return": "", "signature": " ConfigValue(String currentValue, ImmutableMap<ImmutableSet<String>, String> prefixedValues)", "full_signature": "  ConfigValue(String currentValue, ImmutableMap<ImmutableSet<String>, String> prefixedValues)", "class_method_signature": "ConfigValue.ConfigValue(String currentValue, ImmutableMap<ImmutableSet<String>, String> prefixedValues)", "testcase": false, "constructor": true}, {"identifier": "getPrefix", "parameters": "(String prefix)", "modifiers": "", "return": "ConfigValue", "signature": "ConfigValue getPrefix(String prefix)", "full_signature": " ConfigValue getPrefix(String prefix)", "class_method_signature": "ConfigValue.getPrefix(String prefix)", "testcase": false, "constructor": false}, {"identifier": "getWithPrefixBias", "parameters": "(String prefix)", "modifiers": "", "return": "ConfigValue", "signature": "ConfigValue getWithPrefixBias(String prefix)", "full_signature": " ConfigValue getWithPrefixBias(String prefix)", "class_method_signature": "ConfigValue.getWithPrefixBias(String prefix)", "testcase": false, "constructor": false}, {"identifier": "getFilteredPrefixedValues", "parameters": "(String prefix)", "modifiers": "private", "return": "ImmutableMap<ImmutableSet<String>, String>", "signature": "ImmutableMap<ImmutableSet<String>, String> getFilteredPrefixedValues(String prefix)", "full_signature": "private ImmutableMap<ImmutableSet<String>, String> getFilteredPrefixedValues(String prefix)", "class_method_signature": "ConfigValue.getFilteredPrefixedValues(String prefix)", "testcase": false, "constructor": false}, {"identifier": "getPrefixValue", "parameters": "(String prefix, ImmutableMap<ImmutableSet<String>, String> filteredPrefixedValues)", "modifiers": "private", "return": "String", "signature": "String getPrefixValue(String prefix, ImmutableMap<ImmutableSet<String>, String> filteredPrefixedValues)", "full_signature": "private String getPrefixValue(String prefix, ImmutableMap<ImmutableSet<String>, String> filteredPrefixedValues)", "class_method_signature": "ConfigValue.getPrefixValue(String prefix, ImmutableMap<ImmutableSet<String>, String> filteredPrefixedValues)", "testcase": false, "constructor": false}, {"identifier": "getValuesByPrefixedKeys", "parameters": "(String constant)", "modifiers": "", "return": "ImmutableMap<String, String>", "signature": "ImmutableMap<String, String> getValuesByPrefixedKeys(String constant)", "full_signature": " ImmutableMap<String, String> getValuesByPrefixedKeys(String constant)", "class_method_signature": "ConfigValue.getValuesByPrefixedKeys(String constant)", "testcase": false, "constructor": false}, {"identifier": "getPrefixedConfigString", "parameters": "(ImmutableSet<String> prefixes, String constant)", "modifiers": "", "return": "String", "signature": "String getPrefixedConfigString(ImmutableSet<String> prefixes, String constant)", "full_signature": " String getPrefixedConfigString(ImmutableSet<String> prefixes, String constant)", "class_method_signature": "ConfigValue.getPrefixedConfigString(ImmutableSet<String> prefixes, String constant)", "testcase": false, "constructor": false}, {"identifier": "getPrefixes", "parameters": "()", "modifiers": "", "return": "ImmutableSet<String>", "signature": "ImmutableSet<String> getPrefixes()", "full_signature": " ImmutableSet<String> getPrefixes()", "class_method_signature": "ConfigValue.getPrefixes()", "testcase": false, "constructor": false}, {"identifier": "removePrefix", "parameters": "(String prefix, ImmutableSet<String> prefixes)", "modifiers": "private", "return": "ImmutableSet<String>", "signature": "ImmutableSet<String> removePrefix(String prefix, ImmutableSet<String> prefixes)", "full_signature": "private ImmutableSet<String> removePrefix(String prefix, ImmutableSet<String> prefixes)", "class_method_signature": "ConfigValue.removePrefix(String prefix, ImmutableSet<String> prefixes)", "testcase": false, "constructor": false}, {"identifier": "hasSinglePrefix", "parameters": "(Set<String> prefixes)", "modifiers": "private", "return": "boolean", "signature": "boolean hasSinglePrefix(Set<String> prefixes)", "full_signature": "private boolean hasSinglePrefix(Set<String> prefixes)", "class_method_signature": "ConfigValue.hasSinglePrefix(Set<String> prefixes)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/config/ConfigValue.java"}, "focal_method": {"identifier": "getPrefix", "parameters": "(String prefix)", "modifiers": "", "return": "ConfigValue", "body": "ConfigValue getPrefix(String prefix) {\n        ImmutableMap<ImmutableSet<String>, String> filteredPrefixedValues = getFilteredPrefixedValues(prefix);\n        String currentValue = getPrefixValue(prefix, filteredPrefixedValues);\n\n        ImmutableMap.Builder<ImmutableSet<String>, String> prefixedValues = ImmutableMap.builder();\n        filteredPrefixedValues.forEach((prefixes, value) -> {\n            ImmutableSet<String> updatedPrefixes = removePrefix(prefix, prefixes);\n            if (!updatedPrefixes.isEmpty()) {\n                prefixedValues.put(updatedPrefixes, value);\n            }\n        });\n\n        return new ConfigValue(currentValue, prefixedValues.build());\n    }", "signature": "ConfigValue getPrefix(String prefix)", "full_signature": " ConfigValue getPrefix(String prefix)", "class_method_signature": "ConfigValue.getPrefix(String prefix)", "testcase": false, "constructor": false, "invocations": ["getFilteredPrefixedValues", "getPrefixValue", "builder", "forEach", "removePrefix", "isEmpty", "put", "build"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}