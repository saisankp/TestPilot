{"test_class": {"identifier": "MillisecondTimeNormaliserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MillisecondTimeNormaliser normaliser = new MillisecondTimeNormaliser();", "modifier": "private", "type": "MillisecondTimeNormaliser", "declarator": "normaliser = new MillisecondTimeNormaliser()", "var_name": "normaliser"}, {"original_string": "private Time secTime = Time.valueOf(\"13:12:05\");", "modifier": "private", "type": "Time", "declarator": "secTime = Time.valueOf(\"13:12:05\")", "var_name": "secTime"}, {"original_string": "private Time millisTime = new Time(secTime.getTime() + 1L);", "modifier": "private", "type": "Time", "declarator": "millisTime = new Time(secTime.getTime() + 1L)", "var_name": "millisTime"}], "file": "dbfit-java/sqlserver/src/test/java/dbfit/environment/MillisecondTimeNormaliserTest.java"}, "test_case": {"identifier": "toStringExposesTimeUpToMilliseconds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toStringExposesTimeUpToMilliseconds() {\n        Time normalisedTime = (Time) normaliser.transform(millisTime);\n        String[] timeParts = normalisedTime.toString().split(\"\\\\.\");\n\n        assertEquals(\"13:12:05\", timeParts[0]);\n        assertEquals(1, Integer.parseInt(timeParts[1]));\n        assertEquals(2, timeParts.length);\n    }", "signature": "void toStringExposesTimeUpToMilliseconds()", "full_signature": "@Test public void toStringExposesTimeUpToMilliseconds()", "class_method_signature": "MillisecondTimeNormaliserTest.toStringExposesTimeUpToMilliseconds()", "testcase": true, "constructor": false, "invocations": ["transform", "split", "toString", "assertEquals", "assertEquals", "parseInt", "assertEquals"]}, "focal_class": {"identifier": "MillisecondTimeNormaliser", "superclass": "", "interfaces": "implements TypeTransformer", "fields": [], "methods": [{"identifier": "transform", "parameters": "(Object o)", "modifiers": "@Override public", "return": "Object", "signature": "Object transform(Object o)", "full_signature": "@Override public Object transform(Object o)", "class_method_signature": "MillisecondTimeNormaliser.transform(Object o)", "testcase": false, "constructor": false}], "file": "dbfit-java/sqlserver/src/main/java/dbfit/environment/MillisecondTimeNormaliser.java"}, "focal_method": {"identifier": "transform", "parameters": "(Object o)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object transform(Object o) {\n        return (o == null) ? null : new MillisecondTime((Time) o);\n    }", "signature": "Object transform(Object o)", "full_signature": "@Override public Object transform(Object o)", "class_method_signature": "MillisecondTimeNormaliser.transform(Object o)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}