{"test_class": {"identifier": "NetworkExtTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/util/NetworkExtTest.java"}, "test_case": {"identifier": "testToIPv4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToIPv4() {\n        long address = (((((1L << 8) | 1) << 8) | 1) << 8) | 1;\n        assertThat(NetworkExt.toIPv4(address)).isEqualTo(\"1.1.1.1\");\n    }", "signature": "void testToIPv4()", "full_signature": "@Test public void testToIPv4()", "class_method_signature": "NetworkExtTest.testToIPv4()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "toIPv4"]}, "focal_class": {"identifier": "NetworkExt", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(NetworkExt.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(NetworkExt.class)", "var_name": "logger"}, {"original_string": "public static final String IP4_LOOPBACK = \"127.0.0.1\";", "modifier": "public static final", "type": "String", "declarator": "IP4_LOOPBACK = \"127.0.0.1\"", "var_name": "IP4_LOOPBACK"}, {"original_string": "public static final String IP6_LOOPBACK = \"0:0:0:0:0:0:0:1\";", "modifier": "public static final", "type": "String", "declarator": "IP6_LOOPBACK = \"0:0:0:0:0:0:0:1\"", "var_name": "IP6_LOOPBACK"}, {"original_string": "private static final AtomicReference<Optional<String>> resolvedHostNameRef = new AtomicReference<>();", "modifier": "private static final", "type": "AtomicReference<Optional<String>>", "declarator": "resolvedHostNameRef = new AtomicReference<>()", "var_name": "resolvedHostNameRef"}, {"original_string": "private static final AtomicReference<Optional<List<String>>> resolvedLocalIPsRef = new AtomicReference<>();", "modifier": "private static final", "type": "AtomicReference<Optional<List<String>>>", "declarator": "resolvedLocalIPsRef = new AtomicReference<>()", "var_name": "resolvedLocalIPsRef"}, {"original_string": "private static final Pattern IPV4_CDIR_RE = Pattern.compile(\"(\\\\d+[.]\\\\d+[.]\\\\d+[.]\\\\d+)/(\\\\d+)\");", "modifier": "private static final", "type": "Pattern", "declarator": "IPV4_CDIR_RE = Pattern.compile(\"(\\\\d+[.]\\\\d+[.]\\\\d+[.]\\\\d+)/(\\\\d+)\")", "var_name": "IPV4_CDIR_RE"}, {"original_string": "private static final Pattern IPV4_RE = Pattern.compile(\"(\\\\d+)[.](\\\\d+)[.](\\\\d+)[.](\\\\d+)\");", "modifier": "private static final", "type": "Pattern", "declarator": "IPV4_RE = Pattern.compile(\"(\\\\d+)[.](\\\\d+)[.](\\\\d+)[.](\\\\d+)\")", "var_name": "IPV4_RE"}], "methods": [{"identifier": "findUnusedPort", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int findUnusedPort()", "full_signature": "public static int findUnusedPort()", "class_method_signature": "NetworkExt.findUnusedPort()", "testcase": false, "constructor": false}, {"identifier": "getHostName", "parameters": "()", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> getHostName()", "full_signature": "public static Optional<String> getHostName()", "class_method_signature": "NetworkExt.getHostName()", "testcase": false, "constructor": false}, {"identifier": "resolveHostName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String resolveHostName()", "full_signature": "public static String resolveHostName()", "class_method_signature": "NetworkExt.resolveHostName()", "testcase": false, "constructor": false}, {"identifier": "isLoopbackIP", "parameters": "(String ip)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLoopbackIP(String ip)", "full_signature": "public static boolean isLoopbackIP(String ip)", "class_method_signature": "NetworkExt.isLoopbackIP(String ip)", "testcase": false, "constructor": false}, {"identifier": "isIPv6", "parameters": "(String ip)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIPv6(String ip)", "full_signature": "public static boolean isIPv6(String ip)", "class_method_signature": "NetworkExt.isIPv6(String ip)", "testcase": false, "constructor": false}, {"identifier": "getLocalIPs", "parameters": "(boolean ipv4Only)", "modifiers": "public static", "return": "Optional<List<String>>", "signature": "Optional<List<String>> getLocalIPs(boolean ipv4Only)", "full_signature": "public static Optional<List<String>> getLocalIPs(boolean ipv4Only)", "class_method_signature": "NetworkExt.getLocalIPs(boolean ipv4Only)", "testcase": false, "constructor": false}, {"identifier": "getLocalIPs", "parameters": "()", "modifiers": "public static", "return": "Optional<List<String>>", "signature": "Optional<List<String>> getLocalIPs()", "full_signature": "public static Optional<List<String>> getLocalIPs()", "class_method_signature": "NetworkExt.getLocalIPs()", "testcase": false, "constructor": false}, {"identifier": "resolveLocalIPs", "parameters": "(boolean ipv4Only)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> resolveLocalIPs(boolean ipv4Only)", "full_signature": "public static List<String> resolveLocalIPs(boolean ipv4Only)", "class_method_signature": "NetworkExt.resolveLocalIPs(boolean ipv4Only)", "testcase": false, "constructor": false}, {"identifier": "toIPv4", "parameters": "(long addressLong)", "modifiers": "public static", "return": "String", "signature": "String toIPv4(long addressLong)", "full_signature": "public static String toIPv4(long addressLong)", "class_method_signature": "NetworkExt.toIPv4(long addressLong)", "testcase": false, "constructor": false}, {"identifier": "toIpV6AddressName", "parameters": "(Inet6Address inet6Address)", "modifiers": "public static", "return": "String", "signature": "String toIpV6AddressName(Inet6Address inet6Address)", "full_signature": "public static String toIpV6AddressName(Inet6Address inet6Address)", "class_method_signature": "NetworkExt.toIpV6AddressName(Inet6Address inet6Address)", "testcase": false, "constructor": false}, {"identifier": "toNetworkBitMask", "parameters": "(int maskLength)", "modifiers": "public static", "return": "long", "signature": "long toNetworkBitMask(int maskLength)", "full_signature": "public static long toNetworkBitMask(int maskLength)", "class_method_signature": "NetworkExt.toNetworkBitMask(int maskLength)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(String ipAddress, NetworkAddress networkAddress)", "modifiers": "public static", "return": "boolean", "signature": "boolean matches(String ipAddress, NetworkAddress networkAddress)", "full_signature": "public static boolean matches(String ipAddress, NetworkAddress networkAddress)", "class_method_signature": "NetworkExt.matches(String ipAddress, NetworkAddress networkAddress)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(long ipAddress, NetworkAddress networkAddress)", "modifiers": "public static", "return": "boolean", "signature": "boolean matches(long ipAddress, NetworkAddress networkAddress)", "full_signature": "public static boolean matches(long ipAddress, NetworkAddress networkAddress)", "class_method_signature": "NetworkExt.matches(long ipAddress, NetworkAddress networkAddress)", "testcase": false, "constructor": false}, {"identifier": "buildNetworkMatchPredicate", "parameters": "(List<String> cdirs)", "modifiers": "public static", "return": "Function<String, Boolean>", "signature": "Function<String, Boolean> buildNetworkMatchPredicate(List<String> cdirs)", "full_signature": "public static Function<String, Boolean> buildNetworkMatchPredicate(List<String> cdirs)", "class_method_signature": "NetworkExt.buildNetworkMatchPredicate(List<String> cdirs)", "testcase": false, "constructor": false}, {"identifier": "parseCDIR", "parameters": "(String cdir)", "modifiers": "public static", "return": "NetworkAddress", "signature": "NetworkAddress parseCDIR(String cdir)", "full_signature": "public static NetworkAddress parseCDIR(String cdir)", "class_method_signature": "NetworkExt.parseCDIR(String cdir)", "testcase": false, "constructor": false}, {"identifier": "isIpV4", "parameters": "(String address)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIpV4(String address)", "full_signature": "public static boolean isIpV4(String address)", "class_method_signature": "NetworkExt.isIpV4(String address)", "testcase": false, "constructor": false}, {"identifier": "toBits", "parameters": "(String ipv4Address)", "modifiers": "public static", "return": "long", "signature": "long toBits(String ipv4Address)", "full_signature": "public static long toBits(String ipv4Address)", "class_method_signature": "NetworkExt.toBits(String ipv4Address)", "testcase": false, "constructor": false}, {"identifier": "parseIpV4", "parameters": "(String address)", "modifiers": "private static", "return": "Optional<int[]>", "signature": "Optional<int[]> parseIpV4(String address)", "full_signature": "private static Optional<int[]> parseIpV4(String address)", "class_method_signature": "NetworkExt.parseIpV4(String address)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/NetworkExt.java"}, "focal_method": {"identifier": "toIPv4", "parameters": "(long addressLong)", "modifiers": "public static", "return": "String", "body": "public static String toIPv4(long addressLong) {\n        return Long.toString(addressLong >> 24 & 0xFF) + '.' +\n                Long.toString(addressLong >> 16 & 0xFF) + '.' +\n                Long.toString(addressLong >> 8 & 0xFF) + '.' +\n                Long.toString(addressLong & 0xFF);\n    }", "signature": "String toIPv4(long addressLong)", "full_signature": "public static String toIPv4(long addressLong)", "class_method_signature": "NetworkExt.toIPv4(long addressLong)", "testcase": false, "constructor": false, "invocations": ["toString", "toString", "toString", "toString"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}