{"test_class": {"identifier": "ConvexHullTest", "superclass": "", "interfaces": "", "fields": [], "file": "display/renderbasic/src/test/java/org/openscience/cdk/renderer/generators/standard/ConvexHullTest.java"}, "test_case": {"identifier": "testPointsOf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPointsOf() throws Exception {\n        Rectangle2D rect = new Rectangle2D.Double(-5, -5, 10, 10);\n        List<Point2D> points = ConvexHull.pointsOf(rect);\n        assertThat(points.size(), is(4));\n        assertThat(points.get(0).getX(), closeTo(-5, 0.01));\n        assertThat(points.get(0).getY(), closeTo(-5, 0.01));\n        assertThat(points.get(1).getX(), closeTo(5, 0.01));\n        assertThat(points.get(1).getY(), closeTo(-5, 0.01));\n        assertThat(points.get(2).getX(), closeTo(5, 0.01));\n        assertThat(points.get(2).getY(), closeTo(5, 0.01));\n        assertThat(points.get(3).getX(), closeTo(-5, 0.01));\n        assertThat(points.get(3).getY(), closeTo(5, 0.01));\n    }", "signature": "void testPointsOf()", "full_signature": "@Test public void testPointsOf()", "class_method_signature": "ConvexHullTest.testPointsOf()", "testcase": true, "constructor": false, "invocations": ["pointsOf", "assertThat", "size", "is", "assertThat", "getX", "get", "closeTo", "assertThat", "getY", "get", "closeTo", "assertThat", "getX", "get", "closeTo", "assertThat", "getY", "get", "closeTo", "assertThat", "getX", "get", "closeTo", "assertThat", "getY", "get", "closeTo", "assertThat", "getX", "get", "closeTo", "assertThat", "getY", "get", "closeTo"]}, "focal_class": {"identifier": "ConvexHull", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Shape hull;", "modifier": "private final", "type": "Shape", "declarator": "hull", "var_name": "hull"}], "methods": [{"identifier": "ConvexHull", "parameters": "(final Shape hull)", "modifiers": "private", "return": "", "signature": " ConvexHull(final Shape hull)", "full_signature": "private  ConvexHull(final Shape hull)", "class_method_signature": "ConvexHull.ConvexHull(final Shape hull)", "testcase": false, "constructor": true}, {"identifier": "ofShape", "parameters": "(final Shape shape)", "modifiers": "public static", "return": "ConvexHull", "signature": "ConvexHull ofShape(final Shape shape)", "full_signature": "public static ConvexHull ofShape(final Shape shape)", "class_method_signature": "ConvexHull.ofShape(final Shape shape)", "testcase": false, "constructor": false}, {"identifier": "ofShapes", "parameters": "(final List<Shape> shapes)", "modifiers": "public static", "return": "ConvexHull", "signature": "ConvexHull ofShapes(final List<Shape> shapes)", "full_signature": "public static ConvexHull ofShapes(final List<Shape> shapes)", "class_method_signature": "ConvexHull.ofShapes(final List<Shape> shapes)", "testcase": false, "constructor": false}, {"identifier": "outline", "parameters": "()", "modifiers": "", "return": "Shape", "signature": "Shape outline()", "full_signature": " Shape outline()", "class_method_signature": "ConvexHull.outline()", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final AffineTransform transform)", "modifiers": "", "return": "ConvexHull", "signature": "ConvexHull transform(final AffineTransform transform)", "full_signature": " ConvexHull transform(final AffineTransform transform)", "class_method_signature": "ConvexHull.transform(final AffineTransform transform)", "testcase": false, "constructor": false}, {"identifier": "shapeOf", "parameters": "(List<Point2D> points)", "modifiers": "static", "return": "Shape", "signature": "Shape shapeOf(List<Point2D> points)", "full_signature": "static Shape shapeOf(List<Point2D> points)", "class_method_signature": "ConvexHull.shapeOf(List<Point2D> points)", "testcase": false, "constructor": false}, {"identifier": "pointsOf", "parameters": "(final Shape shape)", "modifiers": "static", "return": "List<Point2D>", "signature": "List<Point2D> pointsOf(final Shape shape)", "full_signature": "static List<Point2D> pointsOf(final Shape shape)", "class_method_signature": "ConvexHull.pointsOf(final Shape shape)", "testcase": false, "constructor": false}, {"identifier": "grahamScan", "parameters": "(final List<Point2D> points)", "modifiers": "static", "return": "List<Point2D>", "signature": "List<Point2D> grahamScan(final List<Point2D> points)", "full_signature": "static List<Point2D> grahamScan(final List<Point2D> points)", "class_method_signature": "ConvexHull.grahamScan(final List<Point2D> points)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(List<Point2D> outline, Line2D line)", "modifiers": "private", "return": "Point2D", "signature": "Point2D intersect(List<Point2D> outline, Line2D line)", "full_signature": "private Point2D intersect(List<Point2D> outline, Line2D line)", "class_method_signature": "ConvexHull.intersect(List<Point2D> outline, Line2D line)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(Point2D a, Point2D b)", "modifiers": "", "return": "Point2D", "signature": "Point2D intersect(Point2D a, Point2D b)", "full_signature": " Point2D intersect(Point2D a, Point2D b)", "class_method_signature": "ConvexHull.intersect(Point2D a, Point2D b)", "testcase": false, "constructor": false}, {"identifier": "lineLineIntersect", "parameters": "(final Line2D lineA, final Line2D lineB)", "modifiers": "public static", "return": "Point2D", "signature": "Point2D lineLineIntersect(final Line2D lineA, final Line2D lineB)", "full_signature": "public static Point2D lineLineIntersect(final Line2D lineA, final Line2D lineB)", "class_method_signature": "ConvexHull.lineLineIntersect(final Line2D lineA, final Line2D lineB)", "testcase": false, "constructor": false}, {"identifier": "lineLineIntersect", "parameters": "(final double x1, final double y1, final double x2, final double y2,\n            final double x3, final double y3, final double x4, final double y4)", "modifiers": "static", "return": "Point2D", "signature": "Point2D lineLineIntersect(final double x1, final double y1, final double x2, final double y2,\n            final double x3, final double y3, final double x4, final double y4)", "full_signature": "static Point2D lineLineIntersect(final double x1, final double y1, final double x2, final double y2,\n            final double x3, final double y3, final double x4, final double y4)", "class_method_signature": "ConvexHull.lineLineIntersect(final double x1, final double y1, final double x2, final double y2,\n            final double x3, final double y3, final double x4, final double y4)", "testcase": false, "constructor": false}, {"identifier": "isLeftTurn", "parameters": "(Point2D a, Point2D b, Point2D c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isLeftTurn(Point2D a, Point2D b, Point2D c)", "full_signature": "private static boolean isLeftTurn(Point2D a, Point2D b, Point2D c)", "class_method_signature": "ConvexHull.isLeftTurn(Point2D a, Point2D b, Point2D c)", "testcase": false, "constructor": false}, {"identifier": "winding", "parameters": "(Point2D a, Point2D b, Point2D c)", "modifiers": "private static", "return": "int", "signature": "int winding(Point2D a, Point2D b, Point2D c)", "full_signature": "private static int winding(Point2D a, Point2D b, Point2D c)", "class_method_signature": "ConvexHull.winding(Point2D a, Point2D b, Point2D c)", "testcase": false, "constructor": false}], "file": "display/renderbasic/src/main/java/org/openscience/cdk/renderer/generators/standard/ConvexHull.java"}, "focal_method": {"identifier": "pointsOf", "parameters": "(final Shape shape)", "modifiers": "static", "return": "List<Point2D>", "body": "static List<Point2D> pointsOf(final Shape shape) {\n        final List<Point2D> points = new ArrayList<Point2D>();\n        final double[] coordinates = new double[6];\n        for (PathIterator i = shape.getPathIterator(null); !i.isDone(); i.next()) {\n            switch (i.currentSegment(coordinates)) {\n                case PathIterator.SEG_CLOSE:\n                    break;\n                case PathIterator.SEG_MOVETO:\n                case PathIterator.SEG_LINETO:\n                    points.add(new Point2D.Double(coordinates[0], coordinates[1]));\n                    break;\n                case PathIterator.SEG_QUADTO:\n                    points.add(new Point2D.Double(coordinates[0], coordinates[1]));\n                    points.add(new Point2D.Double(coordinates[2], coordinates[3]));\n                    break;\n                case PathIterator.SEG_CUBICTO:\n                    points.add(new Point2D.Double(coordinates[0], coordinates[1]));\n                    points.add(new Point2D.Double(coordinates[2], coordinates[3]));\n                    points.add(new Point2D.Double(coordinates[4], coordinates[5]));\n                    break;\n            }\n        }\n\n        if (!points.isEmpty() && points.get(points.size() - 1).equals(points.get(0))) {\n            points.remove(points.size() - 1);\n        }\n        return points;\n    }", "signature": "List<Point2D> pointsOf(final Shape shape)", "full_signature": "static List<Point2D> pointsOf(final Shape shape)", "class_method_signature": "ConvexHull.pointsOf(final Shape shape)", "testcase": false, "constructor": false, "invocations": ["getPathIterator", "isDone", "next", "currentSegment", "add", "add", "add", "add", "add", "add", "isEmpty", "equals", "get", "size", "get", "remove", "size"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}