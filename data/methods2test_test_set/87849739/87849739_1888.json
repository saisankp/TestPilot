{"test_class": {"identifier": "ProtocolFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAMESPACE = \"namespace\";", "modifier": "private static final", "type": "String", "declarator": "NAMESPACE = \"namespace\"", "var_name": "NAMESPACE"}, {"original_string": "private static final String ID = \"id\";", "modifier": "private static final", "type": "String", "declarator": "ID = \"id\"", "var_name": "ID"}], "file": "protocol-adapter/src/test/java/org/eclipse/ditto/protocoladapter/ProtocolFactoryTest.java"}, "test_case": {"identifier": "testNewTopicPathBuilderFromNamespace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewTopicPathBuilderFromNamespace() {\n        final TopicPathBuilder topicPathBuilder = ProtocolFactory.newTopicPathBuilderFromNamespace(NAMESPACE);\n        final TopicPath topicPath = topicPathBuilder.twin().commands().modify().build();\n        assertThat(topicPath.getNamespace()).isEqualTo(NAMESPACE);\n        assertThat(topicPath.getId()).isEqualTo(TopicPath.ID_PLACEHOLDER);\n        assertThat(topicPath.getChannel()).isEqualTo(TopicPath.Channel.TWIN);\n        assertThat(topicPath.getGroup()).isEqualTo(TopicPath.Group.THINGS);\n        assertThat(topicPath.getCriterion()).isEqualTo(TopicPath.Criterion.COMMANDS);\n        assertThat(topicPath.getAction()).contains(TopicPath.Action.MODIFY);\n    }", "signature": "void testNewTopicPathBuilderFromNamespace()", "full_signature": "@Test public void testNewTopicPathBuilderFromNamespace()", "class_method_signature": "ProtocolFactoryTest.testNewTopicPathBuilderFromNamespace()", "testcase": true, "constructor": false, "invocations": ["newTopicPathBuilderFromNamespace", "build", "modify", "commands", "twin", "isEqualTo", "assertThat", "getNamespace", "isEqualTo", "assertThat", "getId", "isEqualTo", "assertThat", "getChannel", "isEqualTo", "assertThat", "getGroup", "isEqualTo", "assertThat", "getCriterion", "contains", "assertThat", "getAction"]}, "focal_class": {"identifier": "ProtocolFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ProtocolFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " ProtocolFactory()", "full_signature": "private  ProtocolFactory()", "class_method_signature": "ProtocolFactory.ProtocolFactory()", "testcase": false, "constructor": true}, {"identifier": "newAdaptableBuilder", "parameters": "(final TopicPath topicPath)", "modifiers": "public static", "return": "AdaptableBuilder", "signature": "AdaptableBuilder newAdaptableBuilder(final TopicPath topicPath)", "full_signature": "public static AdaptableBuilder newAdaptableBuilder(final TopicPath topicPath)", "class_method_signature": "ProtocolFactory.newAdaptableBuilder(final TopicPath topicPath)", "testcase": false, "constructor": false}, {"identifier": "newAdaptableBuilder", "parameters": "(final Adaptable existingAdaptable)", "modifiers": "public static", "return": "AdaptableBuilder", "signature": "AdaptableBuilder newAdaptableBuilder(final Adaptable existingAdaptable)", "full_signature": "public static AdaptableBuilder newAdaptableBuilder(final Adaptable existingAdaptable)", "class_method_signature": "ProtocolFactory.newAdaptableBuilder(final Adaptable existingAdaptable)", "testcase": false, "constructor": false}, {"identifier": "newAdaptableBuilder", "parameters": "(final Adaptable existingAdaptable,\n            final TopicPath overwriteTopicPath)", "modifiers": "@Deprecated public static", "return": "AdaptableBuilder", "signature": "AdaptableBuilder newAdaptableBuilder(final Adaptable existingAdaptable,\n            final TopicPath overwriteTopicPath)", "full_signature": "@Deprecated public static AdaptableBuilder newAdaptableBuilder(final Adaptable existingAdaptable,\n            final TopicPath overwriteTopicPath)", "class_method_signature": "ProtocolFactory.newAdaptableBuilder(final Adaptable existingAdaptable,\n            final TopicPath overwriteTopicPath)", "testcase": false, "constructor": false}, {"identifier": "setExtra", "parameters": "(final Adaptable existingAdaptable, final JsonObject extra)", "modifiers": "public static", "return": "Adaptable", "signature": "Adaptable setExtra(final Adaptable existingAdaptable, final JsonObject extra)", "full_signature": "public static Adaptable setExtra(final Adaptable existingAdaptable, final JsonObject extra)", "class_method_signature": "ProtocolFactory.setExtra(final Adaptable existingAdaptable, final JsonObject extra)", "testcase": false, "constructor": false}, {"identifier": "emptyTopicPath", "parameters": "()", "modifiers": "public static", "return": "TopicPath", "signature": "TopicPath emptyTopicPath()", "full_signature": "public static TopicPath emptyTopicPath()", "class_method_signature": "ProtocolFactory.emptyTopicPath()", "testcase": false, "constructor": false}, {"identifier": "newTopicPath", "parameters": "(final String path)", "modifiers": "@SuppressWarnings({\"squid:S1166\"}) public static", "return": "TopicPath", "signature": "TopicPath newTopicPath(final String path)", "full_signature": "@SuppressWarnings({\"squid:S1166\"}) public static TopicPath newTopicPath(final String path)", "class_method_signature": "ProtocolFactory.newTopicPath(final String path)", "testcase": false, "constructor": false}, {"identifier": "newTopicPathBuilder", "parameters": "(final String thingId)", "modifiers": "@Deprecated public static", "return": "TopicPathBuilder", "signature": "TopicPathBuilder newTopicPathBuilder(final String thingId)", "full_signature": "@Deprecated public static TopicPathBuilder newTopicPathBuilder(final String thingId)", "class_method_signature": "ProtocolFactory.newTopicPathBuilder(final String thingId)", "testcase": false, "constructor": false}, {"identifier": "newTopicPathBuilder", "parameters": "(final ThingId thingId)", "modifiers": "public static", "return": "TopicPathBuilder", "signature": "TopicPathBuilder newTopicPathBuilder(final ThingId thingId)", "full_signature": "public static TopicPathBuilder newTopicPathBuilder(final ThingId thingId)", "class_method_signature": "ProtocolFactory.newTopicPathBuilder(final ThingId thingId)", "testcase": false, "constructor": false}, {"identifier": "newTopicPathBuilder", "parameters": "(final NamespacedEntityId entityId)", "modifiers": "public static", "return": "TopicPathBuilder", "signature": "TopicPathBuilder newTopicPathBuilder(final NamespacedEntityId entityId)", "full_signature": "public static TopicPathBuilder newTopicPathBuilder(final NamespacedEntityId entityId)", "class_method_signature": "ProtocolFactory.newTopicPathBuilder(final NamespacedEntityId entityId)", "testcase": false, "constructor": false}, {"identifier": "newTopicPathBuilder", "parameters": "(final PolicyId policyId)", "modifiers": "public static", "return": "TopicPathBuilder", "signature": "TopicPathBuilder newTopicPathBuilder(final PolicyId policyId)", "full_signature": "public static TopicPathBuilder newTopicPathBuilder(final PolicyId policyId)", "class_method_signature": "ProtocolFactory.newTopicPathBuilder(final PolicyId policyId)", "testcase": false, "constructor": false}, {"identifier": "newTopicPathBuilderFromNamespace", "parameters": "(final String namespace)", "modifiers": "public static", "return": "TopicPathBuilder", "signature": "TopicPathBuilder newTopicPathBuilderFromNamespace(final String namespace)", "full_signature": "public static TopicPathBuilder newTopicPathBuilderFromNamespace(final String namespace)", "class_method_signature": "ProtocolFactory.newTopicPathBuilderFromNamespace(final String namespace)", "testcase": false, "constructor": false}, {"identifier": "newPayload", "parameters": "(final String jsonString)", "modifiers": "public static", "return": "Payload", "signature": "Payload newPayload(final String jsonString)", "full_signature": "public static Payload newPayload(final String jsonString)", "class_method_signature": "ProtocolFactory.newPayload(final String jsonString)", "testcase": false, "constructor": false}, {"identifier": "newPayload", "parameters": "(final JsonObject jsonObject)", "modifiers": "public static", "return": "Payload", "signature": "Payload newPayload(final JsonObject jsonObject)", "full_signature": "public static Payload newPayload(final JsonObject jsonObject)", "class_method_signature": "ProtocolFactory.newPayload(final JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "newPayloadBuilder", "parameters": "()", "modifiers": "public static", "return": "PayloadBuilder", "signature": "PayloadBuilder newPayloadBuilder()", "full_signature": "public static PayloadBuilder newPayloadBuilder()", "class_method_signature": "ProtocolFactory.newPayloadBuilder()", "testcase": false, "constructor": false}, {"identifier": "newPayloadBuilder", "parameters": "(@Nullable final JsonPointer path)", "modifiers": "public static", "return": "PayloadBuilder", "signature": "PayloadBuilder newPayloadBuilder(@Nullable final JsonPointer path)", "full_signature": "public static PayloadBuilder newPayloadBuilder(@Nullable final JsonPointer path)", "class_method_signature": "ProtocolFactory.newPayloadBuilder(@Nullable final JsonPointer path)", "testcase": false, "constructor": false}, {"identifier": "emptyHeaders", "parameters": "()", "modifiers": "public static", "return": "DittoHeaders", "signature": "DittoHeaders emptyHeaders()", "full_signature": "public static DittoHeaders emptyHeaders()", "class_method_signature": "ProtocolFactory.emptyHeaders()", "testcase": false, "constructor": false}, {"identifier": "newHeadersWithDittoContentType", "parameters": "(final Map<String, String> headers)", "modifiers": "public static", "return": "DittoHeaders", "signature": "DittoHeaders newHeadersWithDittoContentType(final Map<String, String> headers)", "full_signature": "public static DittoHeaders newHeadersWithDittoContentType(final Map<String, String> headers)", "class_method_signature": "ProtocolFactory.newHeadersWithDittoContentType(final Map<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "newHeaders", "parameters": "(final Collection<Map.Entry<String, String>> headers)", "modifiers": "public static", "return": "DittoHeaders", "signature": "DittoHeaders newHeaders(final Collection<Map.Entry<String, String>> headers)", "full_signature": "public static DittoHeaders newHeaders(final Collection<Map.Entry<String, String>> headers)", "class_method_signature": "ProtocolFactory.newHeaders(final Collection<Map.Entry<String, String>> headers)", "testcase": false, "constructor": false}, {"identifier": "newHeaders", "parameters": "(final JsonObject headersAsJson)", "modifiers": "public static", "return": "DittoHeaders", "signature": "DittoHeaders newHeaders(final JsonObject headersAsJson)", "full_signature": "public static DittoHeaders newHeaders(final JsonObject headersAsJson)", "class_method_signature": "ProtocolFactory.newHeaders(final JsonObject headersAsJson)", "testcase": false, "constructor": false}, {"identifier": "wrapAsJsonifiableAdaptable", "parameters": "(final Adaptable adaptable)", "modifiers": "public static", "return": "JsonifiableAdaptable", "signature": "JsonifiableAdaptable wrapAsJsonifiableAdaptable(final Adaptable adaptable)", "full_signature": "public static JsonifiableAdaptable wrapAsJsonifiableAdaptable(final Adaptable adaptable)", "class_method_signature": "ProtocolFactory.wrapAsJsonifiableAdaptable(final Adaptable adaptable)", "testcase": false, "constructor": false}, {"identifier": "jsonifiableAdaptableFromJson", "parameters": "(final JsonObject adaptableAsJson)", "modifiers": "public static", "return": "JsonifiableAdaptable", "signature": "JsonifiableAdaptable jsonifiableAdaptableFromJson(final JsonObject adaptableAsJson)", "full_signature": "public static JsonifiableAdaptable jsonifiableAdaptableFromJson(final JsonObject adaptableAsJson)", "class_method_signature": "ProtocolFactory.jsonifiableAdaptableFromJson(final JsonObject adaptableAsJson)", "testcase": false, "constructor": false}], "file": "protocol-adapter/src/main/java/org/eclipse/ditto/protocoladapter/ProtocolFactory.java"}, "focal_method": {"identifier": "newTopicPathBuilderFromNamespace", "parameters": "(final String namespace)", "modifiers": "public static", "return": "TopicPathBuilder", "body": "public static TopicPathBuilder newTopicPathBuilderFromNamespace(final String namespace) {\n        return ImmutableTopicPathBuilder.of(namespace, TopicPath.ID_PLACEHOLDER).things();\n    }", "signature": "TopicPathBuilder newTopicPathBuilderFromNamespace(final String namespace)", "full_signature": "public static TopicPathBuilder newTopicPathBuilderFromNamespace(final String namespace)", "class_method_signature": "ProtocolFactory.newTopicPathBuilderFromNamespace(final String namespace)", "testcase": false, "constructor": false, "invocations": ["things", "of"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}