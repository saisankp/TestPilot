{"test_class": {"identifier": "FileSystemClassInformationRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static File jarFile;", "modifier": "private static", "type": "File", "declarator": "jarFile", "var_name": "jarFile"}, {"original_string": "private static FileSystemClassInformationRepository repo;", "modifier": "private static", "type": "FileSystemClassInformationRepository", "declarator": "repo", "var_name": "repo"}], "file": "instrumenter/src/test/java/com/offbynull/coroutines/instrumenter/asm/FileSystemClassInformationRepositoryTest.java"}, "test_case": {"identifier": "mustGetClassInformationForRunnableFuture", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mustGetClassInformationForRunnableFuture() {\n        ClassInformation info = repo.getInformation(\"fake/java/util/concurrent/RunnableFuture\");\n        \n        assertEquals(\"java/lang/Object\", info.getSuperClassName());\n        assertEquals(2, info.getInterfaces().size());\n        assertTrue(info.getInterfaces().contains(\"fake/java/lang/Runnable\"));\n        assertTrue(info.getInterfaces().contains(\"fake/java/util/concurrent/Future\"));\n        assertTrue(info.isInterface());\n    }", "signature": "void mustGetClassInformationForRunnableFuture()", "full_signature": "@Test public void mustGetClassInformationForRunnableFuture()", "class_method_signature": "FileSystemClassInformationRepositoryTest.mustGetClassInformationForRunnableFuture()", "testcase": true, "constructor": false, "invocations": ["getInformation", "assertEquals", "getSuperClassName", "assertEquals", "size", "getInterfaces", "assertTrue", "contains", "getInterfaces", "assertTrue", "contains", "getInterfaces", "assertTrue", "isInterface"]}, "focal_class": {"identifier": "FileSystemClassInformationRepository", "superclass": "", "interfaces": "implements ClassInformationRepository", "fields": [{"original_string": "private final Map<String, ClassInformation> hierarchyMap = new HashMap<>();", "modifier": "private final", "type": "Map<String, ClassInformation>", "declarator": "hierarchyMap = new HashMap<>()", "var_name": "hierarchyMap"}], "methods": [{"identifier": "create", "parameters": "(List<File> initialClasspath)", "modifiers": "public static", "return": "FileSystemClassInformationRepository", "signature": "FileSystemClassInformationRepository create(List<File> initialClasspath)", "full_signature": "public static FileSystemClassInformationRepository create(List<File> initialClasspath)", "class_method_signature": "FileSystemClassInformationRepository.create(List<File> initialClasspath)", "testcase": false, "constructor": false}, {"identifier": "getInformation", "parameters": "(String internalClassName)", "modifiers": "@Override public", "return": "ClassInformation", "signature": "ClassInformation getInformation(String internalClassName)", "full_signature": "@Override public ClassInformation getInformation(String internalClassName)", "class_method_signature": "FileSystemClassInformationRepository.getInformation(String internalClassName)", "testcase": false, "constructor": false}, {"identifier": "addIndividual", "parameters": "(String className, ClassInformation classInformation)", "modifiers": "public", "return": "void", "signature": "void addIndividual(String className, ClassInformation classInformation)", "full_signature": "public void addIndividual(String className, ClassInformation classInformation)", "class_method_signature": "FileSystemClassInformationRepository.addIndividual(String className, ClassInformation classInformation)", "testcase": false, "constructor": false}, {"identifier": "addClasspath", "parameters": "(List<File> classpath)", "modifiers": "public", "return": "void", "signature": "void addClasspath(List<File> classpath)", "full_signature": "public void addClasspath(List<File> classpath)", "class_method_signature": "FileSystemClassInformationRepository.addClasspath(List<File> classpath)", "testcase": false, "constructor": false}, {"identifier": "addDirectory", "parameters": "(File directory)", "modifiers": "private", "return": "void", "signature": "void addDirectory(File directory)", "full_signature": "private void addDirectory(File directory)", "class_method_signature": "FileSystemClassInformationRepository.addDirectory(File directory)", "testcase": false, "constructor": false}, {"identifier": "addJar", "parameters": "(File file)", "modifiers": "private", "return": "void", "signature": "void addJar(File file)", "full_signature": "private void addJar(File file)", "class_method_signature": "FileSystemClassInformationRepository.addJar(File file)", "testcase": false, "constructor": false}, {"identifier": "populateSuperClassMapping", "parameters": "(final InputStream is)", "modifiers": "private", "return": "void", "signature": "void populateSuperClassMapping(final InputStream is)", "full_signature": "private void populateSuperClassMapping(final InputStream is)", "class_method_signature": "FileSystemClassInformationRepository.populateSuperClassMapping(final InputStream is)", "testcase": false, "constructor": false}], "file": "instrumenter/src/main/java/com/offbynull/coroutines/instrumenter/asm/FileSystemClassInformationRepository.java"}, "focal_method": {"identifier": "getInformation", "parameters": "(String internalClassName)", "modifiers": "@Override public", "return": "ClassInformation", "body": "@Override\n    public ClassInformation getInformation(String internalClassName) {\n        Validate.notNull(internalClassName);\n        return hierarchyMap.get(internalClassName);\n    }", "signature": "ClassInformation getInformation(String internalClassName)", "full_signature": "@Override public ClassInformation getInformation(String internalClassName)", "class_method_signature": "FileSystemClassInformationRepository.getInformation(String internalClassName)", "testcase": false, "constructor": false, "invocations": ["notNull", "get"]}, "repository": {"repo_id": 31940141, "url": "https://github.com/offbynull/coroutines", "language": "Java", "is_fork": false, "fork_count": 45, "stargazer_count": 287, "size": 841, "license": "licensed"}}