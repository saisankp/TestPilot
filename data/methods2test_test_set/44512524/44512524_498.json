{"test_class": {"identifier": "AMSSketchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Random random = new Random();", "modifier": "private", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "private ZipfDistribution zipf;", "modifier": "private", "type": "ZipfDistribution", "declarator": "zipf", "var_name": "zipf"}], "file": "ml/streaminer/src/test/java/org/streaminer/stream/frequency/AMSSketchTest.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdd() {\n        int n = 1048575;\n        int range = 12345;\n        \n        AMSSketch sketch = new AMSSketch(5, 512);\n        StreamGenerator gen = new StreamGenerator(0.8, n, range);\n        gen.generate();\n        gen.exact();\n        \n        long[] stream = gen.stream;\n        long sumsq = gen.sumsq;\n        \n        for (int i=1; i<=range; i++) \n            sketch.add(stream[i], 1);  \n        \n        // actual frequency\n        RealCounting<Long> actualFreq = new RealCounting<Long>();\n        for (int i=1; i<=range; i++)\n            actualFreq.add(stream[i], 1);      \n        \n        List<CountEntry<Long>> topk = actualFreq.peek(10);\n        \n        System.out.println(\"Frequency Table\\n\" + StringUtils.repeat(\"-\", 80));\n        System.out.println(\"Item\\tactual\\testimated\");\n        for (CountEntry<Long> item : topk) {\n            System.out.println(item.getItem() + \"\\t\" \n                    + item.getFrequency() + \"\\t\" \n                    + sketch.estimateCount(item.getItem()));\n        }\n        \n        System.out.println(\"Exact F2: \" + sumsq);\n        System.out.println(\"Estimated F2: \" + sketch.estimateF2());\n    }", "signature": "void testAdd()", "full_signature": "@Test public void testAdd()", "class_method_signature": "AMSSketchTest.testAdd()", "testcase": true, "constructor": false, "invocations": ["generate", "exact", "add", "add", "peek", "println", "repeat", "println", "println", "getItem", "getFrequency", "estimateCount", "getItem", "println", "println", "estimateF2"]}, "focal_class": {"identifier": "AMSSketch", "superclass": "", "interfaces": "implements ISimpleFrequency<Long>, Comparable<AMSSketch>", "fields": [{"original_string": "private int depth;", "modifier": "private", "type": "int", "declarator": "depth", "var_name": "depth"}, {"original_string": "private int buckets;", "modifier": "private", "type": "int", "declarator": "buckets", "var_name": "buckets"}, {"original_string": "private int count = 0;", "modifier": "private", "type": "int", "declarator": "count = 0", "var_name": "count"}, {"original_string": "private int[] counts;", "modifier": "private", "type": "int[]", "declarator": "counts", "var_name": "counts"}, {"original_string": "private long[][] test;", "modifier": "private", "type": "long[][]", "declarator": "test", "var_name": "test"}, {"original_string": "private SecureRandom prng = new SecureRandom();", "modifier": "private", "type": "SecureRandom", "declarator": "prng = new SecureRandom()", "var_name": "prng"}], "methods": [{"identifier": "AMSSketch", "parameters": "(int depth, int buckets)", "modifiers": "public", "return": "", "signature": " AMSSketch(int depth, int buckets)", "full_signature": "public  AMSSketch(int depth, int buckets)", "class_method_signature": "AMSSketch.AMSSketch(int depth, int buckets)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Long item)", "modifiers": "public", "return": "boolean", "signature": "boolean add(Long item)", "full_signature": "public boolean add(Long item)", "class_method_signature": "AMSSketch.add(Long item)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Long item, long incrementCount)", "modifiers": "public", "return": "boolean", "signature": "boolean add(Long item, long incrementCount)", "full_signature": "public boolean add(Long item, long incrementCount)", "class_method_signature": "AMSSketch.add(Long item, long incrementCount)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(AMSSketch o)", "modifiers": "public", "return": "int", "signature": "int compareTo(AMSSketch o)", "full_signature": "public int compareTo(AMSSketch o)", "class_method_signature": "AMSSketch.compareTo(AMSSketch o)", "testcase": false, "constructor": false}, {"identifier": "estimateCount", "parameters": "(Long item)", "modifiers": "public", "return": "long", "signature": "long estimateCount(Long item)", "full_signature": "public long estimateCount(Long item)", "class_method_signature": "AMSSketch.estimateCount(Long item)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long size()", "full_signature": "public long size()", "class_method_signature": "AMSSketch.size()", "testcase": false, "constructor": false}, {"identifier": "estimateF2", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long estimateF2()", "full_signature": "public long estimateF2()", "class_method_signature": "AMSSketch.estimateF2()", "testcase": false, "constructor": false}, {"identifier": "innerProduct", "parameters": "(AMSSketch b)", "modifiers": "public", "return": "long", "signature": "long innerProduct(AMSSketch b)", "full_signature": "public long innerProduct(AMSSketch b)", "class_method_signature": "AMSSketch.innerProduct(AMSSketch b)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(AMSSketch source)", "modifiers": "public", "return": "boolean", "signature": "boolean add(AMSSketch source)", "full_signature": "public boolean add(AMSSketch source)", "class_method_signature": "AMSSketch.add(AMSSketch source)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(AMSSketch source)", "modifiers": "public", "return": "boolean", "signature": "boolean subtract(AMSSketch source)", "full_signature": "public boolean subtract(AMSSketch source)", "class_method_signature": "AMSSketch.subtract(AMSSketch source)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Long item)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(Long item)", "full_signature": "public boolean contains(Long item)", "class_method_signature": "AMSSketch.contains(Long item)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/frequency/AMSSketch.java"}, "focal_method": {"identifier": "add", "parameters": "(Long item)", "modifiers": "public", "return": "boolean", "body": "public boolean add(Long item) {\n        return add(item, 1);\n    }", "signature": "boolean add(Long item)", "full_signature": "public boolean add(Long item)", "class_method_signature": "AMSSketch.add(Long item)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}