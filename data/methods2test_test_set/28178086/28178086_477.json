{"test_class": {"identifier": "PreprocessingModelTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/PreprocessingModelTest.java"}, "test_case": {"identifier": "demoDictionary", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void demoDictionary() {\n        Map<String, Class> dic = PreprocessingModel.dictionary(false);\n        for (Entry<String, Class> o : dic.entrySet()) {\n            System.out.print(o.getKey());\n            System.out.print('\\t');\n            System.out.println(o.getValue().getSimpleName());\n        }\n        dic = PreprocessingModel.dictionary(true);\n        for (Entry<String, Class> o : dic.entrySet()) {\n            System.out.print(o.getKey());\n            System.out.print('\\t');\n            System.out.println(o.getValue().getSimpleName());\n        }\n    }", "signature": "void demoDictionary()", "full_signature": "@Test @Ignore public void demoDictionary()", "class_method_signature": "PreprocessingModelTest.demoDictionary()", "testcase": true, "constructor": false, "invocations": ["dictionary", "entrySet", "print", "getKey", "print", "println", "getSimpleName", "getValue", "dictionary", "entrySet", "print", "getKey", "print", "println", "getSimpleName", "getValue"]}, "focal_class": {"identifier": "PreprocessingModel", "superclass": "", "interfaces": "implements IProcResults", "fields": [{"original_string": "public final ModelDescription description;", "modifier": "public final", "type": "ModelDescription", "declarator": "description", "var_name": "description"}, {"original_string": "public final ModelEstimation estimation;", "modifier": "public final", "type": "ModelEstimation", "declarator": "estimation", "var_name": "estimation"}, {"original_string": "public InformationSet info_;", "modifier": "public", "type": "InformationSet", "declarator": "info_", "var_name": "info_"}, {"original_string": "private List<ProcessingInformation> log_ = new ArrayList<>();", "modifier": "private", "type": "List<ProcessingInformation>", "declarator": "log_ = new ArrayList<>()", "var_name": "log_"}, {"original_string": "private static final OutlierEstimation[] NO_OUTLIER = new OutlierEstimation[0];", "modifier": "private static final", "type": "OutlierEstimation[]", "declarator": "NO_OUTLIER = new OutlierEstimation[0]", "var_name": "NO_OUTLIER"}, {"original_string": "private TsVariableList x_;", "modifier": "private", "type": "TsVariableList", "declarator": "x_", "var_name": "x_"}, {"original_string": "private TsData fullres_, lin_, fcast_, bcast_;", "modifier": "private", "type": "TsData", "declarator": "fullres_", "var_name": "fullres_"}, {"original_string": "private Forecasts xfcasts_;", "modifier": "private", "type": "Forecasts", "declarator": "xfcasts_", "var_name": "xfcasts_"}, {"original_string": "private int ncasts = -2;", "modifier": "private", "type": "int", "declarator": "ncasts = -2", "var_name": "ncasts"}, {"original_string": "public static final String LOG = \"log\",\n            ADJUST = \"adjust\",\n            SPAN = \"span\", ESPAN = \"espan\", START = \"start\", END = \"end\", N = \"n\", NM = \"missing\", PERIOD = \"period\",\n            REGRESSION = \"regression\",\n            OUTLIERS = \"outlier(*)\",\n            CALENDAR = \"calendar(*)\",\n            EASTER = \"easter\",\n            FULLRES = \"fullresiduals\",\n            FCASTS = \"fcasts\",\n            EFCASTS = \"efcasts\",\n            BCASTS = \"bcasts\",\n            LIN_FCASTS = \"lin_fcasts\",\n            LIN_BCASTS = \"lin_bcasts\",\n            NTD = \"ntd\", NMH = \"nmh\",\n            TD = \"td\", TD1 = \"td(1)\", TD2 = \"td(2)\", TD3 = \"td(3)\", TD4 = \"td(4)\", TD5 = \"td(5)\", TD6 = \"td(6)\", TD7 = \"td(7)\",\n            TD8 = \"td(8)\", TD9 = \"td(9)\", TD10 = \"td(10)\", TD11 = \"td(11)\", TD12 = \"td(12)\", TD13 = \"td(13)\", TD14 = \"td(14)\",\n            LP = \"lp\", OUT = \"out\", OUT1 = \"out(1)\", OUT2 = \"out(2)\", OUT3 = \"out(3)\", OUT4 = \"out(4)\", OUT5 = \"out(5)\", OUT6 = \"out(6)\", OUT7 = \"out(7)\",\n            NOUT = \"nout\", NOUTAO = \"noutao\", NOUTLS = \"noutls\", NOUTTC = \"nouttc\", NOUTSO = \"noutso\",\n            OUT8 = \"out(8)\", OUT9 = \"out(9)\", OUT10 = \"out(10)\", OUT11 = \"out(11)\", OUT12 = \"out(12)\", OUT13 = \"out(13)\", OUT14 = \"out(14)\",\n            OUT15 = \"out(15)\", OUT16 = \"out(16)\", OUT17 = \"out(17)\", OUT18 = \"out(18)\", OUT19 = \"out(19)\", OUT20 = \"out(20)\",\n            OUT21 = \"out(21)\", OUT22 = \"out(22)\", OUT23 = \"out(23)\", OUT24 = \"out(24)\", OUT25 = \"out(25)\", OUT26 = \"out(26)\",\n            OUT27 = \"out(27)\", OUT28 = \"out(28)\", OUT29 = \"out(29)\", OUT30 = \"out(30)\",\n            USER=\"user\", COEFF = \"coefficients\", COVAR = \"covar\", COEFFDESC = \"description\", PCOVAR = \"pcovar\",\n            TD_DERIVED = \"td-derived\", TD_FTEST = \"td-ftest\";", "modifier": "public static final", "type": "String", "declarator": "LOG = \"log\"", "var_name": "LOG"}, {"original_string": "private static final InformationMapping<PreprocessingModel> MAPPING = new InformationMapping<>(PreprocessingModel.class);", "modifier": "private static final", "type": "InformationMapping<PreprocessingModel>", "declarator": "MAPPING = new InformationMapping<>(PreprocessingModel.class)", "var_name": "MAPPING"}], "methods": [{"identifier": "getNcasts", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNcasts()", "full_signature": "public int getNcasts()", "class_method_signature": "PreprocessingModel.getNcasts()", "testcase": false, "constructor": false}, {"identifier": "setNcasts", "parameters": "(int ncasts)", "modifiers": "public", "return": "void", "signature": "void setNcasts(int ncasts)", "full_signature": "public void setNcasts(int ncasts)", "class_method_signature": "PreprocessingModel.setNcasts(int ncasts)", "testcase": false, "constructor": false}, {"identifier": "outlierComponent", "parameters": "(OutlierType type)", "modifiers": "public static", "return": "ComponentType", "signature": "ComponentType outlierComponent(OutlierType type)", "full_signature": "public static ComponentType outlierComponent(OutlierType type)", "class_method_signature": "PreprocessingModel.outlierComponent(OutlierType type)", "testcase": false, "constructor": false}, {"identifier": "outlierTypes", "parameters": "(ComponentType cmp)", "modifiers": "public static", "return": "OutlierType[]", "signature": "OutlierType[] outlierTypes(ComponentType cmp)", "full_signature": "public static OutlierType[] outlierTypes(ComponentType cmp)", "class_method_signature": "PreprocessingModel.outlierTypes(ComponentType cmp)", "testcase": false, "constructor": false}, {"identifier": "backTransform", "parameters": "(TsData s, boolean T, boolean S)", "modifiers": "public", "return": "void", "signature": "void backTransform(TsData s, boolean T, boolean S)", "full_signature": "public void backTransform(TsData s, boolean T, boolean S)", "class_method_signature": "PreprocessingModel.backTransform(TsData s, boolean T, boolean S)", "testcase": false, "constructor": false}, {"identifier": "PreprocessingModel", "parameters": "(ModelDescription description, ModelEstimation estimation)", "modifiers": "public", "return": "", "signature": " PreprocessingModel(ModelDescription description, ModelEstimation estimation)", "full_signature": "public  PreprocessingModel(ModelDescription description, ModelEstimation estimation)", "class_method_signature": "PreprocessingModel.PreprocessingModel(ModelDescription description, ModelEstimation estimation)", "testcase": false, "constructor": true}, {"identifier": "updateModel", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateModel()", "full_signature": "public void updateModel()", "class_method_signature": "PreprocessingModel.updateModel()", "testcase": false, "constructor": false}, {"identifier": "addProcessingInformation", "parameters": "(ProcessingInformation info)", "modifiers": "public", "return": "void", "signature": "void addProcessingInformation(ProcessingInformation info)", "full_signature": "public void addProcessingInformation(ProcessingInformation info)", "class_method_signature": "PreprocessingModel.addProcessingInformation(ProcessingInformation info)", "testcase": false, "constructor": false}, {"identifier": "addProcessingInformation", "parameters": "(Collection<ProcessingInformation> info)", "modifiers": "public", "return": "void", "signature": "void addProcessingInformation(Collection<ProcessingInformation> info)", "full_signature": "public void addProcessingInformation(Collection<ProcessingInformation> info)", "class_method_signature": "PreprocessingModel.addProcessingInformation(Collection<ProcessingInformation> info)", "testcase": false, "constructor": false}, {"identifier": "likelihoodFunction", "parameters": "()", "modifiers": "public", "return": "IFunction", "signature": "IFunction likelihoodFunction()", "full_signature": "public IFunction likelihoodFunction()", "class_method_signature": "PreprocessingModel.likelihoodFunction()", "testcase": false, "constructor": false}, {"identifier": "maxLikelihoodFunction", "parameters": "()", "modifiers": "public", "return": "IFunctionInstance", "signature": "IFunctionInstance maxLikelihoodFunction()", "full_signature": "public IFunctionInstance maxLikelihoodFunction()", "class_method_signature": "PreprocessingModel.maxLikelihoodFunction()", "testcase": false, "constructor": false}, {"identifier": "missings", "parameters": "(boolean unbiased)", "modifiers": "public", "return": "MissingValueEstimation[]", "signature": "MissingValueEstimation[] missings(boolean unbiased)", "full_signature": "public MissingValueEstimation[] missings(boolean unbiased)", "class_method_signature": "PreprocessingModel.missings(boolean unbiased)", "testcase": false, "constructor": false}, {"identifier": "interpolatedSeries", "parameters": "(boolean bTransformed)", "modifiers": "public", "return": "TsData", "signature": "TsData interpolatedSeries(boolean bTransformed)", "full_signature": "public TsData interpolatedSeries(boolean bTransformed)", "class_method_signature": "PreprocessingModel.interpolatedSeries(boolean bTransformed)", "testcase": false, "constructor": false}, {"identifier": "linearizedSeries", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData linearizedSeries()", "full_signature": "public TsData linearizedSeries()", "class_method_signature": "PreprocessingModel.linearizedSeries()", "testcase": false, "constructor": false}, {"identifier": "linearizedSeries", "parameters": "(boolean includeUndefinedReg)", "modifiers": "public", "return": "TsData", "signature": "TsData linearizedSeries(boolean includeUndefinedReg)", "full_signature": "public TsData linearizedSeries(boolean includeUndefinedReg)", "class_method_signature": "PreprocessingModel.linearizedSeries(boolean includeUndefinedReg)", "testcase": false, "constructor": false}, {"identifier": "preadjustmentEffect", "parameters": "(TsDomain domain)", "modifiers": "public", "return": "TsData", "signature": "TsData preadjustmentEffect(TsDomain domain)", "full_signature": "public TsData preadjustmentEffect(TsDomain domain)", "class_method_signature": "PreprocessingModel.preadjustmentEffect(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "preadjustmentEffect", "parameters": "(TsDomain domain, final ComponentType type)", "modifiers": "public", "return": "TsData", "signature": "TsData preadjustmentEffect(TsDomain domain, final ComponentType type)", "full_signature": "public TsData preadjustmentEffect(TsDomain domain, final ComponentType type)", "class_method_signature": "PreprocessingModel.preadjustmentEffect(TsDomain domain, final ComponentType type)", "testcase": false, "constructor": false}, {"identifier": "regressionEffect", "parameters": "(TsDomain domain)", "modifiers": "public", "return": "TsData", "signature": "TsData regressionEffect(TsDomain domain)", "full_signature": "public TsData regressionEffect(TsDomain domain)", "class_method_signature": "PreprocessingModel.regressionEffect(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "preadjustmentEffect", "parameters": "(TsDomain domain, Class<T> tclass)", "modifiers": "public", "return": "TsData", "signature": "TsData preadjustmentEffect(TsDomain domain, Class<T> tclass)", "full_signature": "public TsData preadjustmentEffect(TsDomain domain, Class<T> tclass)", "class_method_signature": "PreprocessingModel.preadjustmentEffect(TsDomain domain, Class<T> tclass)", "testcase": false, "constructor": false}, {"identifier": "regressionEffect", "parameters": "(TsDomain domain, Class<T> tclass)", "modifiers": "public", "return": "TsData", "signature": "TsData regressionEffect(TsDomain domain, Class<T> tclass)", "full_signature": "public TsData regressionEffect(TsDomain domain, Class<T> tclass)", "class_method_signature": "PreprocessingModel.regressionEffect(TsDomain domain, Class<T> tclass)", "testcase": false, "constructor": false}, {"identifier": "preadjustmentEffect", "parameters": "(TsDomain domain, Predicate<PreadjustmentVariable> selector)", "modifiers": "public", "return": "TsData", "signature": "TsData preadjustmentEffect(TsDomain domain, Predicate<PreadjustmentVariable> selector)", "full_signature": "public TsData preadjustmentEffect(TsDomain domain, Predicate<PreadjustmentVariable> selector)", "class_method_signature": "PreprocessingModel.preadjustmentEffect(TsDomain domain, Predicate<PreadjustmentVariable> selector)", "testcase": false, "constructor": false}, {"identifier": "regressionEffect", "parameters": "(TsDomain domain, Predicate<Variable> selector)", "modifiers": "private", "return": "TsData", "signature": "TsData regressionEffect(TsDomain domain, Predicate<Variable> selector)", "full_signature": "private TsData regressionEffect(TsDomain domain, Predicate<Variable> selector)", "class_method_signature": "PreprocessingModel.regressionEffect(TsDomain domain, Predicate<Variable> selector)", "testcase": false, "constructor": false}, {"identifier": "deterministicEffect", "parameters": "(TsDomain domain)", "modifiers": "public", "return": "TsData", "signature": "TsData deterministicEffect(TsDomain domain)", "full_signature": "public TsData deterministicEffect(TsDomain domain)", "class_method_signature": "PreprocessingModel.deterministicEffect(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "deterministicEffect", "parameters": "(TsDomain domain, Predicate<ITsVariable> selector)", "modifiers": "public", "return": "TsData", "signature": "TsData deterministicEffect(TsDomain domain, Predicate<ITsVariable> selector)", "full_signature": "public TsData deterministicEffect(TsDomain domain, Predicate<ITsVariable> selector)", "class_method_signature": "PreprocessingModel.deterministicEffect(TsDomain domain, Predicate<ITsVariable> selector)", "testcase": false, "constructor": false}, {"identifier": "deterministicEffect", "parameters": "(TsDomain domain, Class<T> tclass)", "modifiers": "public", "return": "TsData", "signature": "TsData deterministicEffect(TsDomain domain, Class<T> tclass)", "full_signature": "public TsData deterministicEffect(TsDomain domain, Class<T> tclass)", "class_method_signature": "PreprocessingModel.deterministicEffect(TsDomain domain, Class<T> tclass)", "testcase": false, "constructor": false}, {"identifier": "tradingDaysEffect", "parameters": "(TsDomain domain)", "modifiers": "public", "return": "TsData", "signature": "TsData tradingDaysEffect(TsDomain domain)", "full_signature": "public TsData tradingDaysEffect(TsDomain domain)", "class_method_signature": "PreprocessingModel.tradingDaysEffect(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "movingHolidaysEffect", "parameters": "(TsDomain domain)", "modifiers": "public", "return": "TsData", "signature": "TsData movingHolidaysEffect(TsDomain domain)", "full_signature": "public TsData movingHolidaysEffect(TsDomain domain)", "class_method_signature": "PreprocessingModel.movingHolidaysEffect(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "outliersEffect", "parameters": "(TsDomain domain)", "modifiers": "public", "return": "TsData", "signature": "TsData outliersEffect(TsDomain domain)", "full_signature": "public TsData outliersEffect(TsDomain domain)", "class_method_signature": "PreprocessingModel.outliersEffect(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "outliersEffect", "parameters": "(TsDomain domain, final ComponentType type)", "modifiers": "public", "return": "TsData", "signature": "TsData outliersEffect(TsDomain domain, final ComponentType type)", "full_signature": "public TsData outliersEffect(TsDomain domain, final ComponentType type)", "class_method_signature": "PreprocessingModel.outliersEffect(TsDomain domain, final ComponentType type)", "testcase": false, "constructor": false}, {"identifier": "outliersEstimation", "parameters": "(boolean unbiased, boolean prespecified)", "modifiers": "public", "return": "OutlierEstimation[]", "signature": "OutlierEstimation[] outliersEstimation(boolean unbiased, boolean prespecified)", "full_signature": "public OutlierEstimation[] outliersEstimation(boolean unbiased, boolean prespecified)", "class_method_signature": "PreprocessingModel.outliersEstimation(boolean unbiased, boolean prespecified)", "testcase": false, "constructor": false}, {"identifier": "regressors", "parameters": "(TsDomain domain)", "modifiers": "public", "return": "List<TsData>", "signature": "List<TsData> regressors(TsDomain domain)", "full_signature": "public List<TsData> regressors(TsDomain domain)", "class_method_signature": "PreprocessingModel.regressors(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "deterministicEffect", "parameters": "(TsDomain domain, final ComponentType type)", "modifiers": "public", "return": "TsData", "signature": "TsData deterministicEffect(TsDomain domain, final ComponentType type)", "full_signature": "public TsData deterministicEffect(TsDomain domain, final ComponentType type)", "class_method_signature": "PreprocessingModel.deterministicEffect(TsDomain domain, final ComponentType type)", "testcase": false, "constructor": false}, {"identifier": "userEffect", "parameters": "(TsDomain domain, final ComponentType type)", "modifiers": "public", "return": "TsData", "signature": "TsData userEffect(TsDomain domain, final ComponentType type)", "full_signature": "public TsData userEffect(TsDomain domain, final ComponentType type)", "class_method_signature": "PreprocessingModel.userEffect(TsDomain domain, final ComponentType type)", "testcase": false, "constructor": false}, {"identifier": "userEffect", "parameters": "(TsDomain domain)", "modifiers": "public", "return": "TsData", "signature": "TsData userEffect(TsDomain domain)", "full_signature": "public TsData userEffect(TsDomain domain)", "class_method_signature": "PreprocessingModel.userEffect(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "linearizedForecast", "parameters": "(int nf)", "modifiers": "public", "return": "TsData", "signature": "TsData linearizedForecast(int nf)", "full_signature": "public TsData linearizedForecast(int nf)", "class_method_signature": "PreprocessingModel.linearizedForecast(int nf)", "testcase": false, "constructor": false}, {"identifier": "linearizedForecast", "parameters": "(int nf, boolean includeUndefinedReg)", "modifiers": "public", "return": "TsData", "signature": "TsData linearizedForecast(int nf, boolean includeUndefinedReg)", "full_signature": "public TsData linearizedForecast(int nf, boolean includeUndefinedReg)", "class_method_signature": "PreprocessingModel.linearizedForecast(int nf, boolean includeUndefinedReg)", "testcase": false, "constructor": false}, {"identifier": "linearizedBackcast", "parameters": "(int nf, boolean includeUndefinedReg)", "modifiers": "public", "return": "TsData", "signature": "TsData linearizedBackcast(int nf, boolean includeUndefinedReg)", "full_signature": "public TsData linearizedBackcast(int nf, boolean includeUndefinedReg)", "class_method_signature": "PreprocessingModel.linearizedBackcast(int nf, boolean includeUndefinedReg)", "testcase": false, "constructor": false}, {"identifier": "forecasts", "parameters": "(int nf)", "modifiers": "public", "return": "Forecasts", "signature": "Forecasts forecasts(int nf)", "full_signature": "public Forecasts forecasts(int nf)", "class_method_signature": "PreprocessingModel.forecasts(int nf)", "testcase": false, "constructor": false}, {"identifier": "linearizedBackcast", "parameters": "(int nb)", "modifiers": "public", "return": "TsData", "signature": "TsData linearizedBackcast(int nb)", "full_signature": "public TsData linearizedBackcast(int nb)", "class_method_signature": "PreprocessingModel.linearizedBackcast(int nb)", "testcase": false, "constructor": false}, {"identifier": "forecast", "parameters": "(int nf, boolean transformed)", "modifiers": "public", "return": "TsData", "signature": "TsData forecast(int nf, boolean transformed)", "full_signature": "public TsData forecast(int nf, boolean transformed)", "class_method_signature": "PreprocessingModel.forecast(int nf, boolean transformed)", "testcase": false, "constructor": false}, {"identifier": "backcast", "parameters": "(int nb, boolean transformed)", "modifiers": "public", "return": "TsData", "signature": "TsData backcast(int nb, boolean transformed)", "full_signature": "public TsData backcast(int nb, boolean transformed)", "class_method_signature": "PreprocessingModel.backcast(int nb, boolean transformed)", "testcase": false, "constructor": false}, {"identifier": "getDeterministicComponent", "parameters": "()", "modifiers": "public", "return": "DeterministicComponent", "signature": "DeterministicComponent getDeterministicComponent()", "full_signature": "public DeterministicComponent getDeterministicComponent()", "class_method_signature": "PreprocessingModel.getDeterministicComponent()", "testcase": false, "constructor": false}, {"identifier": "getDictionary", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Class>", "signature": "Map<String, Class> getDictionary()", "full_signature": "@Override public Map<String, Class> getDictionary()", "class_method_signature": "PreprocessingModel.getDictionary()", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(String id, Class<T> tclass\n    )", "modifiers": "@Override public", "return": "T", "signature": "T getData(String id, Class<T> tclass\n    )", "full_signature": "@Override public T getData(String id, Class<T> tclass\n    )", "class_method_signature": "PreprocessingModel.getData(String id, Class<T> tclass\n    )", "testcase": false, "constructor": false}, {"identifier": "searchAll", "parameters": "(String wc, Class<T> tclass\n    )", "modifiers": "@Override public", "return": "Map<String, T>", "signature": "Map<String, T> searchAll(String wc, Class<T> tclass\n    )", "full_signature": "@Override public Map<String, T> searchAll(String wc, Class<T> tclass\n    )", "class_method_signature": "PreprocessingModel.searchAll(String wc, Class<T> tclass\n    )", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String id\n    )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(String id\n    )", "full_signature": "@Override public boolean contains(String id\n    )", "class_method_signature": "PreprocessingModel.contains(String id\n    )", "testcase": false, "constructor": false}, {"identifier": "getProcessingInformation", "parameters": "()", "modifiers": "@Override public", "return": "List<ProcessingInformation>", "signature": "List<ProcessingInformation> getProcessingInformation()", "full_signature": "@Override public List<ProcessingInformation> getProcessingInformation()", "class_method_signature": "PreprocessingModel.getProcessingInformation()", "testcase": false, "constructor": false}, {"identifier": "fillDictionary", "parameters": "(String prefix, Map<String, Class> map, boolean compact)", "modifiers": "public static", "return": "void", "signature": "void fillDictionary(String prefix, Map<String, Class> map, boolean compact)", "full_signature": "public static void fillDictionary(String prefix, Map<String, Class> map, boolean compact)", "class_method_signature": "PreprocessingModel.fillDictionary(String prefix, Map<String, Class> map, boolean compact)", "testcase": false, "constructor": false}, {"identifier": "dictionary", "parameters": "(boolean compact)", "modifiers": "public static", "return": "Map<String, Class>", "signature": "Map<String, Class> dictionary(boolean compact)", "full_signature": "public static Map<String, Class> dictionary(boolean compact)", "class_method_signature": "PreprocessingModel.dictionary(boolean compact)", "testcase": false, "constructor": false}, {"identifier": "op", "parameters": "(TsData l, TsData r)", "modifiers": "private", "return": "TsData", "signature": "TsData op(TsData l, TsData r)", "full_signature": "private TsData op(TsData l, TsData r)", "class_method_signature": "PreprocessingModel.op(TsData l, TsData r)", "testcase": false, "constructor": false}, {"identifier": "inv_op", "parameters": "(TsData l, TsData r)", "modifiers": "private", "return": "TsData", "signature": "TsData inv_op(TsData l, TsData r)", "full_signature": "private TsData inv_op(TsData l, TsData r)", "class_method_signature": "PreprocessingModel.inv_op(TsData l, TsData r)", "testcase": false, "constructor": false}, {"identifier": "getForecastError", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData getForecastError()", "full_signature": "public TsData getForecastError()", "class_method_signature": "PreprocessingModel.getForecastError()", "testcase": false, "constructor": false}, {"identifier": "getTde", "parameters": "(boolean fcast)", "modifiers": "private", "return": "TsData", "signature": "TsData getTde(boolean fcast)", "full_signature": "private TsData getTde(boolean fcast)", "class_method_signature": "PreprocessingModel.getTde(boolean fcast)", "testcase": false, "constructor": false}, {"identifier": "getYcal", "parameters": "(boolean fcast)", "modifiers": "private", "return": "TsData", "signature": "TsData getYcal(boolean fcast)", "full_signature": "private TsData getYcal(boolean fcast)", "class_method_signature": "PreprocessingModel.getYcal(boolean fcast)", "testcase": false, "constructor": false}, {"identifier": "getReg", "parameters": "(boolean fcast)", "modifiers": "private", "return": "TsData", "signature": "TsData getReg(boolean fcast)", "full_signature": "private TsData getReg(boolean fcast)", "class_method_signature": "PreprocessingModel.getReg(boolean fcast)", "testcase": false, "constructor": false}, {"identifier": "getReg", "parameters": "(ComponentType componentType, boolean fcast)", "modifiers": "private", "return": "TsData", "signature": "TsData getReg(ComponentType componentType, boolean fcast)", "full_signature": "private TsData getReg(ComponentType componentType, boolean fcast)", "class_method_signature": "PreprocessingModel.getReg(ComponentType componentType, boolean fcast)", "testcase": false, "constructor": false}, {"identifier": "getOutlier", "parameters": "(ComponentType componentType, boolean fcast)", "modifiers": "private", "return": "TsData", "signature": "TsData getOutlier(ComponentType componentType, boolean fcast)", "full_signature": "private TsData getOutlier(ComponentType componentType, boolean fcast)", "class_method_signature": "PreprocessingModel.getOutlier(ComponentType componentType, boolean fcast)", "testcase": false, "constructor": false}, {"identifier": "getOmhe", "parameters": "(boolean fcast)", "modifiers": "private", "return": "TsData", "signature": "TsData getOmhe(boolean fcast)", "full_signature": "private TsData getOmhe(boolean fcast)", "class_method_signature": "PreprocessingModel.getOmhe(boolean fcast)", "testcase": false, "constructor": false}, {"identifier": "getMhe", "parameters": "(boolean fcast)", "modifiers": "private", "return": "TsData", "signature": "TsData getMhe(boolean fcast)", "full_signature": "private TsData getMhe(boolean fcast)", "class_method_signature": "PreprocessingModel.getMhe(boolean fcast)", "testcase": false, "constructor": false}, {"identifier": "getEe", "parameters": "(boolean fcast)", "modifiers": "private", "return": "TsData", "signature": "TsData getEe(boolean fcast)", "full_signature": "private TsData getEe(boolean fcast)", "class_method_signature": "PreprocessingModel.getEe(boolean fcast)", "testcase": false, "constructor": false}, {"identifier": "getDet", "parameters": "(boolean fcast)", "modifiers": "private", "return": "TsData", "signature": "TsData getDet(boolean fcast)", "full_signature": "private TsData getDet(boolean fcast)", "class_method_signature": "PreprocessingModel.getDet(boolean fcast)", "testcase": false, "constructor": false}, {"identifier": "getCal", "parameters": "(boolean fcast)", "modifiers": "private", "return": "TsData", "signature": "TsData getCal(boolean fcast)", "full_signature": "private TsData getCal(boolean fcast)", "class_method_signature": "PreprocessingModel.getCal(boolean fcast)", "testcase": false, "constructor": false}, {"identifier": "getRmde", "parameters": "(boolean fcast)", "modifiers": "private", "return": "TsData", "signature": "TsData getRmde(boolean fcast)", "full_signature": "private TsData getRmde(boolean fcast)", "class_method_signature": "PreprocessingModel.getRmde(boolean fcast)", "testcase": false, "constructor": false}, {"identifier": "getForecastCount", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getForecastCount()", "full_signature": "private int getForecastCount()", "class_method_signature": "PreprocessingModel.getForecastCount()", "testcase": false, "constructor": false}, {"identifier": "domain", "parameters": "(boolean fcast)", "modifiers": "private", "return": "TsDomain", "signature": "TsDomain domain(boolean fcast)", "full_signature": "private TsDomain domain(boolean fcast)", "class_method_signature": "PreprocessingModel.domain(boolean fcast)", "testcase": false, "constructor": false}, {"identifier": "getFullResiduals", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData getFullResiduals()", "full_signature": "public TsData getFullResiduals()", "class_method_signature": "PreprocessingModel.getFullResiduals()", "testcase": false, "constructor": false}, {"identifier": "vars", "parameters": "()", "modifiers": "private", "return": "TsVariableList", "signature": "TsVariableList vars()", "full_signature": "private TsVariableList vars()", "class_method_signature": "PreprocessingModel.vars()", "testcase": false, "constructor": false}, {"identifier": "isMultiplicative", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMultiplicative()", "full_signature": "public boolean isMultiplicative()", "class_method_signature": "PreprocessingModel.isMultiplicative()", "testcase": false, "constructor": false}, {"identifier": "getFrequency", "parameters": "()", "modifiers": "public", "return": "TsFrequency", "signature": "TsFrequency getFrequency()", "full_signature": "public TsFrequency getFrequency()", "class_method_signature": "PreprocessingModel.getFrequency()", "testcase": false, "constructor": false}, {"identifier": "getRegressionItem", "parameters": "(Class<V> tclass, int vpos)", "modifiers": "public", "return": "RegressionItem", "signature": "RegressionItem getRegressionItem(Class<V> tclass, int vpos)", "full_signature": "public RegressionItem getRegressionItem(Class<V> tclass, int vpos)", "class_method_signature": "PreprocessingModel.getRegressionItem(Class<V> tclass, int vpos)", "testcase": false, "constructor": false}, {"identifier": "getMapping", "parameters": "()", "modifiers": "public static", "return": "InformationMapping<PreprocessingModel>", "signature": "InformationMapping<PreprocessingModel> getMapping()", "full_signature": "public static InformationMapping<PreprocessingModel> getMapping()", "class_method_signature": "PreprocessingModel.getMapping()", "testcase": false, "constructor": false}, {"identifier": "setMapping", "parameters": "(String name, Class<T> tclass, Function<PreprocessingModel, T> extractor)", "modifiers": "public static", "return": "void", "signature": "void setMapping(String name, Class<T> tclass, Function<PreprocessingModel, T> extractor)", "full_signature": "public static void setMapping(String name, Class<T> tclass, Function<PreprocessingModel, T> extractor)", "class_method_signature": "PreprocessingModel.setMapping(String name, Class<T> tclass, Function<PreprocessingModel, T> extractor)", "testcase": false, "constructor": false}, {"identifier": "setTsData", "parameters": "(String name, Function<PreprocessingModel, TsData> extractor)", "modifiers": "public static", "return": "void", "signature": "void setTsData(String name, Function<PreprocessingModel, TsData> extractor)", "full_signature": "public static void setTsData(String name, Function<PreprocessingModel, TsData> extractor)", "class_method_signature": "PreprocessingModel.setTsData(String name, Function<PreprocessingModel, TsData> extractor)", "testcase": false, "constructor": false}, {"identifier": "nperiods", "parameters": "(PreprocessingModel m, int n)", "modifiers": "private static", "return": "int", "signature": "int nperiods(PreprocessingModel m, int n)", "full_signature": "private static int nperiods(PreprocessingModel m, int n)", "class_method_signature": "PreprocessingModel.nperiods(PreprocessingModel m, int n)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/PreprocessingModel.java"}, "focal_method": {"identifier": "dictionary", "parameters": "(boolean compact)", "modifiers": "public static", "return": "Map<String, Class>", "body": "public static Map<String, Class> dictionary(boolean compact) {\n        LinkedHashMap<String, Class> map = new LinkedHashMap<>();\n        fillDictionary(null, map, compact);\n        return map;\n    }", "signature": "Map<String, Class> dictionary(boolean compact)", "full_signature": "public static Map<String, Class> dictionary(boolean compact)", "class_method_signature": "PreprocessingModel.dictionary(boolean compact)", "testcase": false, "constructor": false, "invocations": ["fillDictionary"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}