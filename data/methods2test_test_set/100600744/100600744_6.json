{"test_class": {"identifier": "JmsMessageListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JmsMessageListener sut;", "modifier": "private", "type": "JmsMessageListener", "declarator": "sut", "var_name": "sut"}, {"original_string": "private LocalMessageStorage storage;", "modifier": "private", "type": "LocalMessageStorage", "declarator": "storage", "var_name": "storage"}], "file": "backend/src/test/java/jmstool/jms/JmsMessageListenerTest.java"}, "test_case": {"identifier": "shouldAddNewMapMessageToStorage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldAddNewMapMessageToStorage() throws JMSException {\n\t\tMockMapMessage message = new MockMapMessage();\n\t\tmessage.setString(\"myText\", \"my awesome message \\uF609\");\n\n\t\tsut.onMessage(message);\n\n\t\tCollection<SimpleMessage> resultInStorage = storage.getMessagesAfter(0);\n\t\tassertThat(resultInStorage).hasSize(1);\n\t\tSimpleMessage first = resultInStorage.iterator().next();\n\n\t\tassertThat(first.getText()).isNotNull();\n\t\tassertThat(first.getProps()).isEmpty();\n\t}", "signature": "void shouldAddNewMapMessageToStorage()", "full_signature": "@Test public void shouldAddNewMapMessageToStorage()", "class_method_signature": "JmsMessageListenerTest.shouldAddNewMapMessageToStorage()", "testcase": true, "constructor": false, "invocations": ["setString", "onMessage", "getMessagesAfter", "hasSize", "assertThat", "next", "iterator", "isNotNull", "assertThat", "getText", "isEmpty", "assertThat", "getProps"]}, "focal_class": {"identifier": "JmsMessageListener", "superclass": "", "interfaces": "implements MessageListener", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "public static final String JMS_IBM_CHARACTER_SET = \"JMS_IBM_Character_Set\";", "modifier": "public static final", "type": "String", "declarator": "JMS_IBM_CHARACTER_SET = \"JMS_IBM_Character_Set\"", "var_name": "JMS_IBM_CHARACTER_SET"}, {"original_string": "private final LocalMessageStorage storage;", "modifier": "private final", "type": "LocalMessageStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final String queue;", "modifier": "private final", "type": "String", "declarator": "queue", "var_name": "queue"}, {"original_string": "private final List<String> propertiesToExtract;", "modifier": "private final", "type": "List<String>", "declarator": "propertiesToExtract", "var_name": "propertiesToExtract"}, {"original_string": "private final String encoding;", "modifier": "private final", "type": "String", "declarator": "encoding", "var_name": "encoding"}, {"original_string": "private final MessageConverter messageConverter = new SimpleMessageConverter();", "modifier": "private final", "type": "MessageConverter", "declarator": "messageConverter = new SimpleMessageConverter()", "var_name": "messageConverter"}], "methods": [{"identifier": "JmsMessageListener", "parameters": "(String queue, LocalMessageStorage storage, List<String> propertiesToExtract,\n\t\t\tString encoding)", "modifiers": "public", "return": "", "signature": " JmsMessageListener(String queue, LocalMessageStorage storage, List<String> propertiesToExtract,\n\t\t\tString encoding)", "full_signature": "public  JmsMessageListener(String queue, LocalMessageStorage storage, List<String> propertiesToExtract,\n\t\t\tString encoding)", "class_method_signature": "JmsMessageListener.JmsMessageListener(String queue, LocalMessageStorage storage, List<String> propertiesToExtract,\n\t\t\tString encoding)", "testcase": false, "constructor": true}, {"identifier": "onMessage", "parameters": "(Message msg)", "modifiers": "@Override public", "return": "void", "signature": "void onMessage(Message msg)", "full_signature": "@Override public void onMessage(Message msg)", "class_method_signature": "JmsMessageListener.onMessage(Message msg)", "testcase": false, "constructor": false}, {"identifier": "extractTextFromMessage", "parameters": "(Message msg)", "modifiers": "private", "return": "String", "signature": "String extractTextFromMessage(Message msg)", "full_signature": "private String extractTextFromMessage(Message msg)", "class_method_signature": "JmsMessageListener.extractTextFromMessage(Message msg)", "testcase": false, "constructor": false}, {"identifier": "encodingFromMessageOrDefault", "parameters": "(BytesMessage bytesMessage)", "modifiers": "private", "return": "String", "signature": "String encodingFromMessageOrDefault(BytesMessage bytesMessage)", "full_signature": "private String encodingFromMessageOrDefault(BytesMessage bytesMessage)", "class_method_signature": "JmsMessageListener.encodingFromMessageOrDefault(BytesMessage bytesMessage)", "testcase": false, "constructor": false}, {"identifier": "getMessageProperties", "parameters": "(Message msg)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getMessageProperties(Message msg)", "full_signature": "public Map<String, String> getMessageProperties(Message msg)", "class_method_signature": "JmsMessageListener.getMessageProperties(Message msg)", "testcase": false, "constructor": false}], "file": "backend/src/main/java/jmstool/jms/JmsMessageListener.java"}, "focal_method": {"identifier": "onMessage", "parameters": "(Message msg)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void onMessage(Message msg) {\n\t\tlogger.debug(\"received new message from queue '{}'\", queue);\n\t\tString text = Exceptions.sneak().get(() -> extractTextFromMessage(msg));\n\t\tSimpleMessage message = new SimpleMessage(text, queue, getMessageProperties(msg));\n\t\tstorage.addMessage(message);\n\t}", "signature": "void onMessage(Message msg)", "full_signature": "@Override public void onMessage(Message msg)", "class_method_signature": "JmsMessageListener.onMessage(Message msg)", "testcase": false, "constructor": false, "invocations": ["debug", "get", "sneak", "extractTextFromMessage", "getMessageProperties", "addMessage"]}, "repository": {"repo_id": 100600744, "url": "https://github.com/0xERR0R/jmstool", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 577, "license": "licensed"}}