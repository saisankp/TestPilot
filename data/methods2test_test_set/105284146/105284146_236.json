{"test_class": {"identifier": "ConversionParametersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FileSystem fileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}], "file": "iidm/iidm-converter-api/src/test/java/com/powsybl/iidm/ConversionParametersTest.java"}, "test_case": {"identifier": "testConversionParameters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConversionParameters() {\n        Properties properties = new Properties();\n        properties.put(\"test-param-boolean\", \"true\");\n        Parameter paramBoolean = new Parameter(\"test-param-boolean\", ParameterType.BOOLEAN, \"\", Boolean.FALSE);\n        Parameter paramBoolean2 = new Parameter(\"test-param-boolean2\", ParameterType.BOOLEAN, \"\", Boolean.FALSE);\n        assertTrue(ConversionParameters.readBooleanParameter(\"TEST\", properties, paramBoolean));\n        assertTrue(ConversionParameters.readBooleanParameter(\"TEST\", properties, paramBoolean, ParameterDefaultValueConfig.INSTANCE));\n        assertFalse(ConversionParameters.readBooleanParameter(\"TEST\", properties, paramBoolean2, ParameterDefaultValueConfig.INSTANCE));\n\n        properties.put(\"test-param-string\", \"TestProperty\");\n        Parameter paramString = new Parameter(\"test-param-string\", ParameterType.STRING, \"\", \"TestParam\");\n        Parameter paramString2 = new Parameter(\"test-param-string2\", ParameterType.STRING, \"\", \"TestParam\");\n        assertEquals(\"TestProperty\", ConversionParameters.readStringParameter(\"TEST\", properties, paramString));\n        assertEquals(\"TestProperty\", ConversionParameters.readStringParameter(\"TEST\", properties, paramString, ParameterDefaultValueConfig.INSTANCE));\n        assertEquals(\"TestParam\", ConversionParameters.readStringParameter(\"TEST\", properties, paramString2, ParameterDefaultValueConfig.INSTANCE));\n\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"Test1Property\");\n        stringList.add(\"Test2Property\");\n        List<String> stringList2 = new ArrayList<>();\n        stringList2.add(\"Test1Param\");\n        stringList2.add(\"Test2Param\");\n        properties.put(\"test-param-string-list\", stringList);\n        Parameter paramStringList = new Parameter(\"test-param-string-list\", ParameterType.STRING_LIST, \"\", stringList2);\n        Parameter paramStringList2 = new Parameter(\"test-param-string-list2\", ParameterType.STRING_LIST, \"\", stringList2);\n        assertEquals(\"Test2Property\", ConversionParameters.readStringListParameter(\"TEST\", properties, paramStringList).get(1));\n        assertEquals(\"Test2Property\", ConversionParameters.readStringListParameter(\"TEST\", properties, paramStringList, ParameterDefaultValueConfig.INSTANCE).get(1));\n        assertEquals(\"Test1Param\", ConversionParameters.readStringListParameter(\"TEST\", properties, paramStringList2, ParameterDefaultValueConfig.INSTANCE).get(0));\n\n        properties.put(\"test-param-double\", 0.06);\n        Parameter paramDouble = new Parameter(\"test-param-double\", ParameterType.DOUBLE, \"\", 0.08);\n        Parameter paramDouble2 = new Parameter(\"test-param-double2\", ParameterType.DOUBLE, \"\", 0.08);\n        assertEquals(0.06, ConversionParameters.readDoubleParameter(\"TEST\", properties, paramDouble), 1e-8);\n        assertEquals(0.06, ConversionParameters.readDoubleParameter(\"TEST\", properties, paramDouble, ParameterDefaultValueConfig.INSTANCE), 1e-8);\n        assertEquals(0.08, ConversionParameters.readDoubleParameter(\"TEST\", properties, paramDouble2, ParameterDefaultValueConfig.INSTANCE), 1e-8);\n\n        InMemoryPlatformConfig config = new InMemoryPlatformConfig(fileSystem);\n        config.createModuleConfig(\"import-export-parameters-default-value\").setStringProperty(\"test-param-double\", \"0.06\");\n        assertEquals(0.06, ConversionParameters.readDoubleParameter(\"TEST\", new Properties(), paramDouble, new ParameterDefaultValueConfig(config)), 1e-8);\n\n    }", "signature": "void testConversionParameters()", "full_signature": "@Test public void testConversionParameters()", "class_method_signature": "ConversionParametersTest.testConversionParameters()", "testcase": true, "constructor": false, "invocations": ["put", "assertTrue", "readBooleanParameter", "assertTrue", "readBooleanParameter", "assertFalse", "readBooleanParameter", "put", "assertEquals", "readStringParameter", "assertEquals", "readStringParameter", "assertEquals", "readStringParameter", "add", "add", "add", "add", "put", "assertEquals", "get", "readStringListParameter", "assertEquals", "get", "readStringListParameter", "assertEquals", "get", "readStringListParameter", "put", "assertEquals", "readDoubleParameter", "assertEquals", "readDoubleParameter", "assertEquals", "readDoubleParameter", "setStringProperty", "createModuleConfig", "assertEquals", "readDoubleParameter"]}, "focal_class": {"identifier": "ConversionParameters", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "readParameter", "parameters": "(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "modifiers": "public static", "return": "Object", "signature": "Object readParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "full_signature": "public static Object readParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "class_method_signature": "ConversionParameters.readParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "testcase": false, "constructor": false}, {"identifier": "readParameter", "parameters": "(String format, Properties paramaters, Parameter configuredParameter)", "modifiers": "public static", "return": "Object", "signature": "Object readParameter(String format, Properties paramaters, Parameter configuredParameter)", "full_signature": "public static Object readParameter(String format, Properties paramaters, Parameter configuredParameter)", "class_method_signature": "ConversionParameters.readParameter(String format, Properties paramaters, Parameter configuredParameter)", "testcase": false, "constructor": false}, {"identifier": "readBooleanParameter", "parameters": "(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "modifiers": "public static", "return": "boolean", "signature": "boolean readBooleanParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "full_signature": "public static boolean readBooleanParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "class_method_signature": "ConversionParameters.readBooleanParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "testcase": false, "constructor": false}, {"identifier": "readBooleanParameter", "parameters": "(String format, Properties parameters, Parameter configuredParameter)", "modifiers": "public static", "return": "boolean", "signature": "boolean readBooleanParameter(String format, Properties parameters, Parameter configuredParameter)", "full_signature": "public static boolean readBooleanParameter(String format, Properties parameters, Parameter configuredParameter)", "class_method_signature": "ConversionParameters.readBooleanParameter(String format, Properties parameters, Parameter configuredParameter)", "testcase": false, "constructor": false}, {"identifier": "readStringParameter", "parameters": "(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "modifiers": "public static", "return": "String", "signature": "String readStringParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "full_signature": "public static String readStringParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "class_method_signature": "ConversionParameters.readStringParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "testcase": false, "constructor": false}, {"identifier": "readStringParameter", "parameters": "(String format, Properties parameters, Parameter configuredParameter)", "modifiers": "public static", "return": "String", "signature": "String readStringParameter(String format, Properties parameters, Parameter configuredParameter)", "full_signature": "public static String readStringParameter(String format, Properties parameters, Parameter configuredParameter)", "class_method_signature": "ConversionParameters.readStringParameter(String format, Properties parameters, Parameter configuredParameter)", "testcase": false, "constructor": false}, {"identifier": "readStringListParameter", "parameters": "(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> readStringListParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "full_signature": "public static List<String> readStringListParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "class_method_signature": "ConversionParameters.readStringListParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "testcase": false, "constructor": false}, {"identifier": "readStringListParameter", "parameters": "(String format, Properties parameters, Parameter configuredParameter)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> readStringListParameter(String format, Properties parameters, Parameter configuredParameter)", "full_signature": "public static List<String> readStringListParameter(String format, Properties parameters, Parameter configuredParameter)", "class_method_signature": "ConversionParameters.readStringListParameter(String format, Properties parameters, Parameter configuredParameter)", "testcase": false, "constructor": false}, {"identifier": "readDoubleParameter", "parameters": "(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "modifiers": "public static", "return": "double", "signature": "double readDoubleParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "full_signature": "public static double readDoubleParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "class_method_signature": "ConversionParameters.readDoubleParameter(String format, Properties parameters, Parameter configuredParameter, ParameterDefaultValueConfig defaultValueConfig)", "testcase": false, "constructor": false}, {"identifier": "readDoubleParameter", "parameters": "(String format, Properties parameters, Parameter configuredParameter)", "modifiers": "public static", "return": "double", "signature": "double readDoubleParameter(String format, Properties parameters, Parameter configuredParameter)", "full_signature": "public static double readDoubleParameter(String format, Properties parameters, Parameter configuredParameter)", "class_method_signature": "ConversionParameters.readDoubleParameter(String format, Properties parameters, Parameter configuredParameter)", "testcase": false, "constructor": false}, {"identifier": "readParameter", "parameters": "(String format, Properties parameters, Parameter configuredParameter, T defaultValue,\n                                          BiFunction<ModuleConfig, List<String>, T> supplier, Predicate<T> isPresent)", "modifiers": "private static", "return": "T", "signature": "T readParameter(String format, Properties parameters, Parameter configuredParameter, T defaultValue,\n                                          BiFunction<ModuleConfig, List<String>, T> supplier, Predicate<T> isPresent)", "full_signature": "private static T readParameter(String format, Properties parameters, Parameter configuredParameter, T defaultValue,\n                                          BiFunction<ModuleConfig, List<String>, T> supplier, Predicate<T> isPresent)", "class_method_signature": "ConversionParameters.readParameter(String format, Properties parameters, Parameter configuredParameter, T defaultValue,\n                                          BiFunction<ModuleConfig, List<String>, T> supplier, Predicate<T> isPresent)", "testcase": false, "constructor": false}, {"identifier": "readParameter", "parameters": "(String format, Properties parameters, Parameter configuredParameter, T defaultValue, BiFunction<ModuleConfig, List<String>, Optional<T>> supplier)", "modifiers": "private static", "return": "T", "signature": "T readParameter(String format, Properties parameters, Parameter configuredParameter, T defaultValue, BiFunction<ModuleConfig, List<String>, Optional<T>> supplier)", "full_signature": "private static T readParameter(String format, Properties parameters, Parameter configuredParameter, T defaultValue, BiFunction<ModuleConfig, List<String>, Optional<T>> supplier)", "class_method_signature": "ConversionParameters.readParameter(String format, Properties parameters, Parameter configuredParameter, T defaultValue, BiFunction<ModuleConfig, List<String>, Optional<T>> supplier)", "testcase": false, "constructor": false}, {"identifier": "ConversionParameters", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConversionParameters()", "full_signature": "private  ConversionParameters()", "class_method_signature": "ConversionParameters.ConversionParameters()", "testcase": false, "constructor": true}], "file": "iidm/iidm-converter-api/src/main/java/com/powsybl/iidm/ConversionParameters.java"}, "focal_method": {"identifier": "ConversionParameters", "parameters": "()", "modifiers": "private", "return": "", "body": "private ConversionParameters() {\n    }", "signature": " ConversionParameters()", "full_signature": "private  ConversionParameters()", "class_method_signature": "ConversionParameters.ConversionParameters()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}