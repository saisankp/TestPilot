{"test_class": {"identifier": "IdGeneratorServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(IdGeneratorServiceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(IdGeneratorServiceTest.class)", "var_name": "log"}], "file": "common/src/test/java/io/blobkeeper/common/service/IdGeneratorServiceTest.java"}, "test_case": {"identifier": "getTimestamp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getTimestamp() {\n        long mills = currentTimeMillis();\n        IdGeneratorService idGeneratorService = new IdGeneratorService();\n        long id = idGeneratorService.generate(1);\n        assertEquals(idGeneratorService.getTimestamp(id), mills);\n    }", "signature": "void getTimestamp()", "full_signature": "@Test public void getTimestamp()", "class_method_signature": "IdGeneratorServiceTest.getTimestamp()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "generate", "assertEquals", "getTimestamp"]}, "focal_class": {"identifier": "IdGeneratorService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(IdGeneratorService.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(IdGeneratorService.class)", "var_name": "log"}, {"original_string": "private static long epoch = 1388534400000L;", "modifier": "private static", "type": "long", "declarator": "epoch = 1388534400000L", "var_name": "epoch"}, {"original_string": "private long shardIdBits = 10L;", "modifier": "private", "type": "long", "declarator": "shardIdBits = 10L", "var_name": "shardIdBits"}, {"original_string": "private long maxShardId = -1L ^ (-1L << shardIdBits);", "modifier": "private", "type": "long", "declarator": "maxShardId = -1L ^ (-1L << shardIdBits)", "var_name": "maxShardId"}, {"original_string": "private long sequenceBits = 12L;", "modifier": "private", "type": "long", "declarator": "sequenceBits = 12L", "var_name": "sequenceBits"}, {"original_string": "private long shardIdShift = sequenceBits;", "modifier": "private", "type": "long", "declarator": "shardIdShift = sequenceBits", "var_name": "shardIdShift"}, {"original_string": "private long timestampLeftShift = sequenceBits + shardIdBits;", "modifier": "private", "type": "long", "declarator": "timestampLeftShift = sequenceBits + shardIdBits", "var_name": "timestampLeftShift"}, {"original_string": "private long maxSequenceId = -1L ^ (-1L << sequenceBits);", "modifier": "private", "type": "long", "declarator": "maxSequenceId = -1L ^ (-1L << sequenceBits)", "var_name": "maxSequenceId"}, {"original_string": "private long lastTimestamp = -1L;", "modifier": "private", "type": "long", "declarator": "lastTimestamp = -1L", "var_name": "lastTimestamp"}, {"original_string": "private int sequence;", "modifier": "private", "type": "int", "declarator": "sequence", "var_name": "sequence"}], "methods": [{"identifier": "generate", "parameters": "(int shardId)", "modifiers": "public synchronized", "return": "long", "signature": "long generate(int shardId)", "full_signature": "public synchronized long generate(int shardId)", "class_method_signature": "IdGeneratorService.generate(int shardId)", "testcase": false, "constructor": false}, {"identifier": "getShard", "parameters": "(long id)", "modifiers": "public", "return": "int", "signature": "int getShard(long id)", "full_signature": "public int getShard(long id)", "class_method_signature": "IdGeneratorService.getShard(long id)", "testcase": false, "constructor": false}, {"identifier": "getTimestamp", "parameters": "(long id)", "modifiers": "public", "return": "long", "signature": "long getTimestamp(long id)", "full_signature": "public long getTimestamp(long id)", "class_method_signature": "IdGeneratorService.getTimestamp(long id)", "testcase": false, "constructor": false}, {"identifier": "getHash", "parameters": "(long id)", "modifiers": "public", "return": "HashCode", "signature": "HashCode getHash(long id)", "full_signature": "public HashCode getHash(long id)", "class_method_signature": "IdGeneratorService.getHash(long id)", "testcase": false, "constructor": false}, {"identifier": "getNextMills", "parameters": "(long lastTimestamp)", "modifiers": "private", "return": "long", "signature": "long getNextMills(long lastTimestamp)", "full_signature": "private long getNextMills(long lastTimestamp)", "class_method_signature": "IdGeneratorService.getNextMills(long lastTimestamp)", "testcase": false, "constructor": false}], "file": "common/src/main/java/io/blobkeeper/common/service/IdGeneratorService.java"}, "focal_method": {"identifier": "getTimestamp", "parameters": "(long id)", "modifiers": "public", "return": "long", "body": "public long getTimestamp(long id) {\n        return ((id >> timestampLeftShift) + epoch);\n    }", "signature": "long getTimestamp(long id)", "full_signature": "public long getTimestamp(long id)", "class_method_signature": "IdGeneratorService.getTimestamp(long id)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 43258821, "url": "https://github.com/sherman/blobkeeper", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 20, "size": 417, "license": "licensed"}}