{"test_class": {"identifier": "QueueDrainObserverTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/observers/QueueDrainObserverTest.java"}, "test_case": {"identifier": "unorderedSlowPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void unorderedSlowPath() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Disposable d = Disposables.empty();\n        QueueDrainObserver<Integer, Integer, Integer> qd = createUnordered(to, d);\n        to.onSubscribe(Disposables.empty());\n\n        qd.enter();\n        qd.onNext(1);\n\n        to.assertEmpty();\n    }", "signature": "void unorderedSlowPath()", "full_signature": "@Test public void unorderedSlowPath()", "class_method_signature": "QueueDrainObserverTest.unorderedSlowPath()", "testcase": true, "constructor": false, "invocations": ["empty", "createUnordered", "onSubscribe", "empty", "enter", "onNext", "assertEmpty"]}, "focal_class": {"identifier": "QueueDrainObserver", "superclass": "extends QueueDrainSubscriberPad2", "interfaces": "implements Observer<T>, ObservableQueueDrain<U, V>", "fields": [{"original_string": "protected final Observer<? super V> actual;", "modifier": "protected final", "type": "Observer<? super V>", "declarator": "actual", "var_name": "actual"}, {"original_string": "protected final SimplePlainQueue<U> queue;", "modifier": "protected final", "type": "SimplePlainQueue<U>", "declarator": "queue", "var_name": "queue"}, {"original_string": "protected volatile boolean cancelled;", "modifier": "protected volatile", "type": "boolean", "declarator": "cancelled", "var_name": "cancelled"}, {"original_string": "protected volatile boolean done;", "modifier": "protected volatile", "type": "boolean", "declarator": "done", "var_name": "done"}, {"original_string": "protected Throwable error;", "modifier": "protected", "type": "Throwable", "declarator": "error", "var_name": "error"}], "methods": [{"identifier": "QueueDrainObserver", "parameters": "(Observer<? super V> actual, SimplePlainQueue<U> queue)", "modifiers": "public", "return": "", "signature": " QueueDrainObserver(Observer<? super V> actual, SimplePlainQueue<U> queue)", "full_signature": "public  QueueDrainObserver(Observer<? super V> actual, SimplePlainQueue<U> queue)", "class_method_signature": "QueueDrainObserver.QueueDrainObserver(Observer<? super V> actual, SimplePlainQueue<U> queue)", "testcase": false, "constructor": true}, {"identifier": "cancelled", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean cancelled()", "full_signature": "@Override public final boolean cancelled()", "class_method_signature": "QueueDrainObserver.cancelled()", "testcase": false, "constructor": false}, {"identifier": "done", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean done()", "full_signature": "@Override public final boolean done()", "class_method_signature": "QueueDrainObserver.done()", "testcase": false, "constructor": false}, {"identifier": "enter", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean enter()", "full_signature": "@Override public final boolean enter()", "class_method_signature": "QueueDrainObserver.enter()", "testcase": false, "constructor": false}, {"identifier": "fastEnter", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean fastEnter()", "full_signature": "public final boolean fastEnter()", "class_method_signature": "QueueDrainObserver.fastEnter()", "testcase": false, "constructor": false}, {"identifier": "fastPathEmit", "parameters": "(U value, boolean delayError, Disposable dispose)", "modifiers": "protected final", "return": "void", "signature": "void fastPathEmit(U value, boolean delayError, Disposable dispose)", "full_signature": "protected final void fastPathEmit(U value, boolean delayError, Disposable dispose)", "class_method_signature": "QueueDrainObserver.fastPathEmit(U value, boolean delayError, Disposable dispose)", "testcase": false, "constructor": false}, {"identifier": "fastPathOrderedEmit", "parameters": "(U value, boolean delayError, Disposable disposable)", "modifiers": "protected final", "return": "void", "signature": "void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable)", "full_signature": "protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable)", "class_method_signature": "QueueDrainObserver.fastPathOrderedEmit(U value, boolean delayError, Disposable disposable)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "()", "modifiers": "@Override public final", "return": "Throwable", "signature": "Throwable error()", "full_signature": "@Override public final Throwable error()", "class_method_signature": "QueueDrainObserver.error()", "testcase": false, "constructor": false}, {"identifier": "leave", "parameters": "(int m)", "modifiers": "@Override public final", "return": "int", "signature": "int leave(int m)", "full_signature": "@Override public final int leave(int m)", "class_method_signature": "QueueDrainObserver.leave(int m)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(Observer<? super V> a, U v)", "modifiers": "@Override public", "return": "void", "signature": "void accept(Observer<? super V> a, U v)", "full_signature": "@Override public void accept(Observer<? super V> a, U v)", "class_method_signature": "QueueDrainObserver.accept(Observer<? super V> a, U v)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/observers/QueueDrainObserver.java"}, "focal_method": {"identifier": "enter", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "body": "@Override\n    public final boolean enter() {\n        return wip.getAndIncrement() == 0;\n    }", "signature": "boolean enter()", "full_signature": "@Override public final boolean enter()", "class_method_signature": "QueueDrainObserver.enter()", "testcase": false, "constructor": false, "invocations": ["getAndIncrement"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}