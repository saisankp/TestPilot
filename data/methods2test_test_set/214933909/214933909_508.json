{"test_class": {"identifier": "DataBaseDaoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    DataBaseDao dataBaseDao;", "modifier": "@Autowired", "type": "DataBaseDao", "declarator": "dataBaseDao", "var_name": "dataBaseDao"}, {"original_string": "DataBaseInfo dataBaseInfo;", "modifier": "", "type": "DataBaseInfo", "declarator": "dataBaseInfo", "var_name": "dataBaseInfo"}, {"original_string": "DataBaseModel dataBaseModel;", "modifier": "", "type": "DataBaseModel", "declarator": "dataBaseModel", "var_name": "dataBaseModel"}, {"original_string": "Paging<DataBaseInfo> paging;", "modifier": "", "type": "Paging<DataBaseInfo>", "declarator": "paging", "var_name": "paging"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/dao/DataBaseDaoTest.java"}, "test_case": {"identifier": "updateDataBaseInfoTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void updateDataBaseInfoTest() throws Exception {\n        int cout = dataBaseDao.updateDataBaseInfo(443L, 22L, \"22222\");\n        System.out.println(\"updateDataBaseInfo :-------> \" + cout);\n        Assert.assertTrue(cout > 0);\n    }", "signature": "void updateDataBaseInfoTest()", "full_signature": "@Test public void updateDataBaseInfoTest()", "class_method_signature": "DataBaseDaoTest.updateDataBaseInfoTest()", "testcase": true, "constructor": false, "invocations": ["updateDataBaseInfo", "println", "assertTrue"]}, "focal_class": {"identifier": "DataBaseDao", "superclass": "extends BaseDao", "interfaces": "", "fields": [], "methods": [{"identifier": "insertDataBaseInfo", "parameters": "(DataBaseInfo dataBaseInfo)", "modifiers": "public", "return": "Long", "signature": "Long insertDataBaseInfo(DataBaseInfo dataBaseInfo)", "full_signature": "public Long insertDataBaseInfo(DataBaseInfo dataBaseInfo)", "class_method_signature": "DataBaseDao.insertDataBaseInfo(DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false}, {"identifier": "insertDatabaselist", "parameters": "(List<DataBaseInfo> dataBaseInfoList)", "modifiers": "public", "return": "int[]", "signature": "int[] insertDatabaselist(List<DataBaseInfo> dataBaseInfoList)", "full_signature": "public int[] insertDatabaselist(List<DataBaseInfo> dataBaseInfoList)", "class_method_signature": "DataBaseDao.insertDatabaselist(List<DataBaseInfo> dataBaseInfoList)", "testcase": false, "constructor": false}, {"identifier": "updateDataBaseInfo", "parameters": "(DataBaseInfo dataBaseInfo)", "modifiers": "public", "return": "int", "signature": "int updateDataBaseInfo(DataBaseInfo dataBaseInfo)", "full_signature": "public int updateDataBaseInfo(DataBaseInfo dataBaseInfo)", "class_method_signature": "DataBaseDao.updateDataBaseInfo(DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false}, {"identifier": "updateDataBaseInfo", "parameters": "(Long id, String dbname, String db_address, String db_port, String db_user,\n                                  String db_password, String db_catalog, Integer db_type, String comment, String updateUserNo)", "modifiers": "public", "return": "int", "signature": "int updateDataBaseInfo(Long id, String dbname, String db_address, String db_port, String db_user,\n                                  String db_password, String db_catalog, Integer db_type, String comment, String updateUserNo)", "full_signature": "public int updateDataBaseInfo(Long id, String dbname, String db_address, String db_port, String db_user,\n                                  String db_password, String db_catalog, Integer db_type, String comment, String updateUserNo)", "class_method_signature": "DataBaseDao.updateDataBaseInfo(Long id, String dbname, String db_address, String db_port, String db_user,\n                                  String db_password, String db_catalog, Integer db_type, String comment, String updateUserNo)", "testcase": false, "constructor": false}, {"identifier": "updateDataBaseInfo", "parameters": "(Long id, Long groupId, String comment)", "modifiers": "public", "return": "int", "signature": "int updateDataBaseInfo(Long id, Long groupId, String comment)", "full_signature": "public int updateDataBaseInfo(Long id, Long groupId, String comment)", "class_method_signature": "DataBaseDao.updateDataBaseInfo(Long id, Long groupId, String comment)", "testcase": false, "constructor": false}, {"identifier": "updateDataBaseInfo", "parameters": "(Long id, String comment)", "modifiers": "public", "return": "int", "signature": "int updateDataBaseInfo(Long id, String comment)", "full_signature": "public int updateDataBaseInfo(Long id, String comment)", "class_method_signature": "DataBaseDao.updateDataBaseInfo(Long id, String comment)", "testcase": false, "constructor": false}, {"identifier": "updateDataBaseInfo", "parameters": "(Long id, Long groupId)", "modifiers": "public", "return": "int", "signature": "int updateDataBaseInfo(Long id, Long groupId)", "full_signature": "public int updateDataBaseInfo(Long id, Long groupId)", "class_method_signature": "DataBaseDao.updateDataBaseInfo(Long id, Long groupId)", "testcase": false, "constructor": false}, {"identifier": "deleteDataBaseInfo", "parameters": "(Long id)", "modifiers": "public", "return": "int", "signature": "int deleteDataBaseInfo(Long id)", "full_signature": "public int deleteDataBaseInfo(Long id)", "class_method_signature": "DataBaseDao.deleteDataBaseInfo(Long id)", "testcase": false, "constructor": false}, {"identifier": "getDataBaseInfoByDbId", "parameters": "(Long id)", "modifiers": "public", "return": "DataBaseInfo", "signature": "DataBaseInfo getDataBaseInfoByDbId(Long id)", "full_signature": "public DataBaseInfo getDataBaseInfoByDbId(Long id)", "class_method_signature": "DataBaseDao.getDataBaseInfoByDbId(Long id)", "testcase": false, "constructor": false}, {"identifier": "getDatabaseByName", "parameters": "(String name)", "modifiers": "public", "return": "DataBaseInfo", "signature": "DataBaseInfo getDatabaseByName(String name)", "full_signature": "public DataBaseInfo getDatabaseByName(String name)", "class_method_signature": "DataBaseDao.getDatabaseByName(String name)", "testcase": false, "constructor": false}, {"identifier": "getAllDbByProjectId", "parameters": "(long projectId)", "modifiers": "public", "return": "List<DataBaseInfo>", "signature": "List<DataBaseInfo> getAllDbByProjectId(long projectId)", "full_signature": "public List<DataBaseInfo> getAllDbByProjectId(long projectId)", "class_method_signature": "DataBaseDao.getAllDbByProjectId(long projectId)", "testcase": false, "constructor": false}, {"identifier": "getAllDbByAppId", "parameters": "(String appid)", "modifiers": "public", "return": "List<DataBaseInfo>", "signature": "List<DataBaseInfo> getAllDbByAppId(String appid)", "full_signature": "public List<DataBaseInfo> getAllDbByAppId(String appid)", "class_method_signature": "DataBaseDao.getAllDbByAppId(String appid)", "testcase": false, "constructor": false}, {"identifier": "getAllDbAllinOneNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllDbAllinOneNames()", "full_signature": "public List<String> getAllDbAllinOneNames()", "class_method_signature": "DataBaseDao.getAllDbAllinOneNames()", "testcase": false, "constructor": false}, {"identifier": "getGroupDBsByGroup", "parameters": "(Long groupId)", "modifiers": "public", "return": "List<DataBaseInfo>", "signature": "List<DataBaseInfo> getGroupDBsByGroup(Long groupId)", "full_signature": "public List<DataBaseInfo> getGroupDBsByGroup(Long groupId)", "class_method_signature": "DataBaseDao.getGroupDBsByGroup(Long groupId)", "testcase": false, "constructor": false}, {"identifier": "getCountByName", "parameters": "(String dbname)", "modifiers": "public", "return": "Long", "signature": "Long getCountByName(String dbname)", "full_signature": "public Long getCountByName(String dbname)", "class_method_signature": "DataBaseDao.getCountByName(String dbname)", "testcase": false, "constructor": false}, {"identifier": "getCountByIdAndName", "parameters": "(Long id, String dbname)", "modifiers": "public", "return": "Long", "signature": "Long getCountByIdAndName(Long id, String dbname)", "full_signature": "public Long getCountByIdAndName(Long id, String dbname)", "class_method_signature": "DataBaseDao.getCountByIdAndName(Long id, String dbname)", "testcase": false, "constructor": false}, {"identifier": "getAllDbsByDbNames", "parameters": "(List<String> dbNames)", "modifiers": "public", "return": "List<DataBaseInfo>", "signature": "List<DataBaseInfo> getAllDbsByDbNames(List<String> dbNames)", "full_signature": "public List<DataBaseInfo> getAllDbsByDbNames(List<String> dbNames)", "class_method_signature": "DataBaseDao.getAllDbsByDbNames(List<String> dbNames)", "testcase": false, "constructor": false}, {"identifier": "getAllDbsByIdss", "parameters": "(List<Long> ids)", "modifiers": "public", "return": "List<DataBaseInfo>", "signature": "List<DataBaseInfo> getAllDbsByIdss(List<Long> ids)", "full_signature": "public List<DataBaseInfo> getAllDbsByIdss(List<Long> ids)", "class_method_signature": "DataBaseDao.getAllDbsByIdss(List<Long> ids)", "testcase": false, "constructor": false}, {"identifier": "getMasterCologByDatabaseSetId", "parameters": "(Long dbset_id)", "modifiers": "public", "return": "DataBaseInfo", "signature": "DataBaseInfo getMasterCologByDatabaseSetId(Long dbset_id)", "full_signature": "public DataBaseInfo getMasterCologByDatabaseSetId(Long dbset_id)", "class_method_signature": "DataBaseDao.getMasterCologByDatabaseSetId(Long dbset_id)", "testcase": false, "constructor": false}, {"identifier": "getTotalCount", "parameters": "(Paging<DataBaseInfo> paging)", "modifiers": "public", "return": "Long", "signature": "Long getTotalCount(Paging<DataBaseInfo> paging)", "full_signature": "public Long getTotalCount(Paging<DataBaseInfo> paging)", "class_method_signature": "DataBaseDao.getTotalCount(Paging<DataBaseInfo> paging)", "testcase": false, "constructor": false}, {"identifier": "findDbPageList", "parameters": "(Paging<DataBaseInfo> paging)", "modifiers": "public", "return": "List<DataBaseView>", "signature": "List<DataBaseView> findDbPageList(Paging<DataBaseInfo> paging)", "full_signature": "public List<DataBaseView> findDbPageList(Paging<DataBaseInfo> paging)", "class_method_signature": "DataBaseDao.findDbPageList(Paging<DataBaseInfo> paging)", "testcase": false, "constructor": false}, {"identifier": "getTotalCountByUserId", "parameters": "(Paging<DataBaseInfo> paging, Long userId)", "modifiers": "public", "return": "Long", "signature": "Long getTotalCountByUserId(Paging<DataBaseInfo> paging, Long userId)", "full_signature": "public Long getTotalCountByUserId(Paging<DataBaseInfo> paging, Long userId)", "class_method_signature": "DataBaseDao.getTotalCountByUserId(Paging<DataBaseInfo> paging, Long userId)", "testcase": false, "constructor": false}, {"identifier": "findDbPageListByUserId", "parameters": "(Paging<DataBaseInfo> paging, Long userId)", "modifiers": "public", "return": "List<DataBaseView>", "signature": "List<DataBaseView> findDbPageListByUserId(Paging<DataBaseInfo> paging, Long userId)", "full_signature": "public List<DataBaseView> findDbPageListByUserId(Paging<DataBaseInfo> paging, Long userId)", "class_method_signature": "DataBaseDao.findDbPageListByUserId(Paging<DataBaseInfo> paging, Long userId)", "testcase": false, "constructor": false}, {"identifier": "appenWhere", "parameters": "(Paging<DataBaseInfo> paging)", "modifiers": "private", "return": "String", "signature": "String appenWhere(Paging<DataBaseInfo> paging)", "full_signature": "private String appenWhere(Paging<DataBaseInfo> paging)", "class_method_signature": "DataBaseDao.appenWhere(Paging<DataBaseInfo> paging)", "testcase": false, "constructor": false}, {"identifier": "appenCondition", "parameters": "(Paging<DataBaseInfo> paging)", "modifiers": "private", "return": "String", "signature": "String appenCondition(Paging<DataBaseInfo> paging)", "full_signature": "private String appenCondition(Paging<DataBaseInfo> paging)", "class_method_signature": "DataBaseDao.appenCondition(Paging<DataBaseInfo> paging)", "testcase": false, "constructor": false}, {"identifier": "getDatabaseListByLikeName", "parameters": "(String dbname)", "modifiers": "public", "return": "List<DataBaseInfo>", "signature": "List<DataBaseInfo> getDatabaseListByLikeName(String dbname)", "full_signature": "public List<DataBaseInfo> getDatabaseListByLikeName(String dbname)", "class_method_signature": "DataBaseDao.getDatabaseListByLikeName(String dbname)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/dao/DataBaseDao.java"}, "focal_method": {"identifier": "updateDataBaseInfo", "parameters": "(DataBaseInfo dataBaseInfo)", "modifiers": "public", "return": "int", "body": "public int updateDataBaseInfo(DataBaseInfo dataBaseInfo) throws SQLException {\n        return this.updateDataBaseInfo(dataBaseInfo.getId(), dataBaseInfo.getDbname(), dataBaseInfo.getDb_address(), dataBaseInfo.getDb_port(), dataBaseInfo.getDb_user(), dataBaseInfo.getDb_password(), dataBaseInfo.getDb_catalog(), dataBaseInfo.getDb_type(), dataBaseInfo.getComment(), dataBaseInfo.getUpdateUserNo());\n    }", "signature": "int updateDataBaseInfo(DataBaseInfo dataBaseInfo)", "full_signature": "public int updateDataBaseInfo(DataBaseInfo dataBaseInfo)", "class_method_signature": "DataBaseDao.updateDataBaseInfo(DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false, "invocations": ["updateDataBaseInfo", "getId", "getDbname", "getDb_address", "getDb_port", "getDb_user", "getDb_password", "getDb_catalog", "getDb_type", "getComment", "getUpdateUserNo"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}