{"test_class": {"identifier": "TikaBinaryProcessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/gentics/mesh/core/binary/impl/TikaBinaryProcessorTest.java"}, "test_case": {"identifier": "tikaCachingTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void tikaCachingTest() throws FileNotFoundException, IOException {\n\t\tLazy<Vertx> lazy = Mockito.mock(Lazy.class);\n\t\twhen(lazy.get()).thenReturn(Vertx.vertx());\n\t\tTikaBinaryProcessor processor = new TikaBinaryProcessor(lazy, new MeshOptions(), mockDb());\n\t\tFileUpload ul = mockUpload(\"test.pdf\", \"application/pdf\");\n\n\t\tMaybe<Consumer<BinaryGraphField>> result = processor.process(new BinaryDataProcessorContext(null, null, null, ul, \"HASHSUM\"));\n\n\t\tConsumer<BinaryGraphField> consumer = result.blockingGet();\n\t\tBinaryGraphField field = Mockito.mock(BinaryGraphField.class);\n\t\tconsumer.accept(field);\n\t}", "signature": "void tikaCachingTest()", "full_signature": "@Test public void tikaCachingTest()", "class_method_signature": "TikaBinaryProcessorTest.tikaCachingTest()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "get", "vertx", "mockDb", "mockUpload", "process", "blockingGet", "mock", "accept"]}, "focal_class": {"identifier": "TikaBinaryProcessor", "superclass": "extends AbstractBinaryProcessor", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(TikaBinaryProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TikaBinaryProcessor.class)", "var_name": "log"}, {"original_string": "private final Set<String> acceptedTypes = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "acceptedTypes = new HashSet<>()", "var_name": "acceptedTypes"}, {"original_string": "private final Set<String> acceptedDocumentTypes = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "acceptedDocumentTypes = new HashSet<>()", "var_name": "acceptedDocumentTypes"}, {"original_string": "private final Set<String> skipSet = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "skipSet = new HashSet<>()", "var_name": "skipSet"}, {"original_string": "private final Lazy<Vertx> vertx;", "modifier": "private final", "type": "Lazy<Vertx>", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private final MeshOptions options;", "modifier": "private final", "type": "MeshOptions", "declarator": "options", "var_name": "options"}, {"original_string": "private final Database db;", "modifier": "private final", "type": "Database", "declarator": "db", "var_name": "db"}, {"original_string": "private static final int DEFAULT_NON_DOC_TIKA_PARSE_LIMIT = 0;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_NON_DOC_TIKA_PARSE_LIMIT = 0", "var_name": "DEFAULT_NON_DOC_TIKA_PARSE_LIMIT"}], "methods": [{"identifier": "TikaBinaryProcessor", "parameters": "(Lazy<Vertx> vertx, MeshOptions options, Database db)", "modifiers": "@Inject public", "return": "", "signature": " TikaBinaryProcessor(Lazy<Vertx> vertx, MeshOptions options, Database db)", "full_signature": "@Inject public  TikaBinaryProcessor(Lazy<Vertx> vertx, MeshOptions options, Database db)", "class_method_signature": "TikaBinaryProcessor.TikaBinaryProcessor(Lazy<Vertx> vertx, MeshOptions options, Database db)", "testcase": false, "constructor": true}, {"identifier": "accepts", "parameters": "(String contentType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(String contentType)", "full_signature": "@Override public boolean accepts(String contentType)", "class_method_signature": "TikaBinaryProcessor.accepts(String contentType)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(BinaryDataProcessorContext ctx)", "modifiers": "@Override public", "return": "Maybe<Consumer<BinaryGraphField>>", "signature": "Maybe<Consumer<BinaryGraphField>> process(BinaryDataProcessorContext ctx)", "full_signature": "@Override public Maybe<Consumer<BinaryGraphField>> process(BinaryDataProcessorContext ctx)", "class_method_signature": "TikaBinaryProcessor.process(BinaryDataProcessorContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getExtractOptions", "parameters": "(InternalActionContext ac, String nodeUuid, String fieldName)", "modifiers": "private", "return": "Maybe<BinaryExtractOptions>", "signature": "Maybe<BinaryExtractOptions> getExtractOptions(InternalActionContext ac, String nodeUuid, String fieldName)", "full_signature": "private Maybe<BinaryExtractOptions> getExtractOptions(InternalActionContext ac, String nodeUuid, String fieldName)", "class_method_signature": "TikaBinaryProcessor.getExtractOptions(InternalActionContext ac, String nodeUuid, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(BinaryExtractOptions extractOptions, FileUpload upload)", "modifiers": "private", "return": "Maybe<Consumer<BinaryGraphField>>", "signature": "Maybe<Consumer<BinaryGraphField>> process(BinaryExtractOptions extractOptions, FileUpload upload)", "full_signature": "private Maybe<Consumer<BinaryGraphField>> process(BinaryExtractOptions extractOptions, FileUpload upload)", "class_method_signature": "TikaBinaryProcessor.process(BinaryExtractOptions extractOptions, FileUpload upload)", "testcase": false, "constructor": false}, {"identifier": "parseFile", "parameters": "(InputStream ins, int len)", "modifiers": "public", "return": "TikaResult", "signature": "TikaResult parseFile(InputStream ins, int len)", "full_signature": "public TikaResult parseFile(InputStream ins, int len)", "class_method_signature": "TikaBinaryProcessor.parseFile(InputStream ins, int len)", "testcase": false, "constructor": false}, {"identifier": "parseFile", "parameters": "(InputStream ins, int len, boolean parseMetadata)", "modifiers": "public", "return": "TikaResult", "signature": "TikaResult parseFile(InputStream ins, int len, boolean parseMetadata)", "full_signature": "public TikaResult parseFile(InputStream ins, int len, boolean parseMetadata)", "class_method_signature": "TikaBinaryProcessor.parseFile(InputStream ins, int len, boolean parseMetadata)", "testcase": false, "constructor": false}, {"identifier": "getParserLimit", "parameters": "(BinaryExtractOptions extractOptions, String contentType)", "modifiers": "private", "return": "int", "signature": "int getParserLimit(BinaryExtractOptions extractOptions, String contentType)", "full_signature": "private int getParserLimit(BinaryExtractOptions extractOptions, String contentType)", "class_method_signature": "TikaBinaryProcessor.getParserLimit(BinaryExtractOptions extractOptions, String contentType)", "testcase": false, "constructor": false}, {"identifier": "getParserLimit", "parameters": "(String contentType)", "modifiers": "public", "return": "int", "signature": "int getParserLimit(String contentType)", "full_signature": "public int getParserLimit(String contentType)", "class_method_signature": "TikaBinaryProcessor.getParserLimit(String contentType)", "testcase": false, "constructor": false}, {"identifier": "sanitizeName", "parameters": "(String key)", "modifiers": "public static", "return": "String", "signature": "String sanitizeName(String key)", "full_signature": "public static String sanitizeName(String key)", "class_method_signature": "TikaBinaryProcessor.sanitizeName(String key)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/gentics/mesh/core/binary/impl/TikaBinaryProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(BinaryDataProcessorContext ctx)", "modifiers": "@Override public", "return": "Maybe<Consumer<BinaryGraphField>>", "body": "@Override\n\tpublic Maybe<Consumer<BinaryGraphField>> process(BinaryDataProcessorContext ctx) {\n\t\tFileUpload upload = ctx.getUpload();\n\t\treturn getExtractOptions(ctx.getActionContext(), ctx.getNodeUuid(), ctx.getFieldName())\n\t\t\t.flatMap(\n\t\t\t\textractOptions -> process(extractOptions, upload),\n\t\t\t\tMaybe::error,\n\t\t\t\t() -> process(null, upload)\n\t\t\t);\n\t}", "signature": "Maybe<Consumer<BinaryGraphField>> process(BinaryDataProcessorContext ctx)", "full_signature": "@Override public Maybe<Consumer<BinaryGraphField>> process(BinaryDataProcessorContext ctx)", "class_method_signature": "TikaBinaryProcessor.process(BinaryDataProcessorContext ctx)", "testcase": false, "constructor": false, "invocations": ["getUpload", "flatMap", "getExtractOptions", "getActionContext", "getNodeUuid", "getFieldName", "process", "process"]}, "repository": {"repo_id": 67999496, "url": "https://github.com/gentics/mesh", "stars": 412, "created": "9/12/2016 10:28:41 AM +00:00", "updates": "2020-01-27T10:25:42+00:00", "fork": "False", "license": "licensed"}}