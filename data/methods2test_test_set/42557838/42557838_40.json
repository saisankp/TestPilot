{"test_class": {"identifier": "CookieParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Parser<Map<String, Cookie>> cookieParser = new CookieParser();", "modifier": "private static", "type": "Parser<Map<String, Cookie>>", "declarator": "cookieParser = new CookieParser()", "var_name": "cookieParser"}], "file": "http/src/test/java/ro/polak/http/protocol/parser/impl/CookieParserTest.java"}, "test_case": {"identifier": "shouldParseMalformedEmptyValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseMalformedEmptyValue() throws MalformedInputException {\n        Map<String, Cookie> cookies = cookieParser.parse(\" ; \");\n        assertThat(cookies.size(), is(0));\n    }", "signature": "void shouldParseMalformedEmptyValue()", "full_signature": "@Test public void shouldParseMalformedEmptyValue()", "class_method_signature": "CookieParserTest.shouldParseMalformedEmptyValue()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "size", "is"]}, "focal_class": {"identifier": "CookieParser", "superclass": "", "interfaces": "implements Parser<Map<String, Cookie>>", "fields": [{"original_string": "private static final String VALUE_SEPARATOR = \"=\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_SEPARATOR = \"=\"", "var_name": "VALUE_SEPARATOR"}, {"original_string": "private static final String COOKIE_SEPARATOR = \";\";", "modifier": "private static final", "type": "String", "declarator": "COOKIE_SEPARATOR = \";\"", "var_name": "COOKIE_SEPARATOR"}], "methods": [{"identifier": "parse", "parameters": "(final String input)", "modifiers": "@Override public", "return": "Map<String, Cookie>", "signature": "Map<String, Cookie> parse(final String input)", "full_signature": "@Override public Map<String, Cookie> parse(final String input)", "class_method_signature": "CookieParser.parse(final String input)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/protocol/parser/impl/CookieParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final String input)", "modifiers": "@Override public", "return": "Map<String, Cookie>", "body": "@Override\n    public Map<String, Cookie> parse(final String input) throws MalformedInputException {\n        Map<String, Cookie> cookies = new HashMap<>();\n\n        // Splitting separate cookies array\n        String[] cookiesStr = input.split(COOKIE_SEPARATOR);\n        for (int i = 0; i < cookiesStr.length; i++) {\n            // Splitting cookie name=value pair\n            String[] cookieValues = cookiesStr[i].split(VALUE_SEPARATOR, 2);\n            String cookieName = cookieValues[0].trim();\n            if (cookieValues.length > 1 && cookieName.length() > 0) {\n                Cookie cookie = new Cookie(cookieName, StringUtilities.urlDecode(cookieValues[1]));\n                cookies.put(cookie.getName(), cookie);\n            }\n        }\n\n        return cookies;\n    }", "signature": "Map<String, Cookie> parse(final String input)", "full_signature": "@Override public Map<String, Cookie> parse(final String input)", "class_method_signature": "CookieParser.parse(final String input)", "testcase": false, "constructor": false, "invocations": ["split", "split", "trim", "length", "urlDecode", "put", "getName"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}