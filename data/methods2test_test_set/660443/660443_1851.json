{"test_class": {"identifier": "ProtonTotalPartialChargeDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/ProtonTotalPartialChargeDescriptorTest.java"}, "test_case": {"identifier": "testNaNs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNaNs() throws java.lang.Exception {\n        IAtomicDescriptor descriptor = new ProtonTotalPartialChargeDescriptor();\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"C(F)(F)\");\n        addExplicitHydrogens(mol);\n        DoubleArrayResult retval = (DoubleArrayResult) descriptor.calculate(mol.getAtom(0), mol).getValue();\n        Assert.assertEquals(5, retval.length());\n        Assert.assertTrue(Double.isNaN(retval.get(3)));\n        Assert.assertTrue(Double.isNaN(retval.get(4)));\n    }", "signature": "void testNaNs()", "full_signature": "@Test public void testNaNs()", "class_method_signature": "ProtonTotalPartialChargeDescriptorTest.testNaNs()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "addExplicitHydrogens", "getValue", "calculate", "getAtom", "assertEquals", "length", "assertTrue", "isNaN", "get", "assertTrue", "isNaN", "get"]}, "focal_class": {"identifier": "ProtonTotalPartialChargeDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "implements IAtomicDescriptor", "fields": [{"original_string": "private GasteigerMarsiliPartialCharges peoe             = null;", "modifier": "private", "type": "GasteigerMarsiliPartialCharges", "declarator": "peoe             = null", "var_name": "peoe"}, {"original_string": "private List<IAtom>                    neighboors;", "modifier": "private", "type": "List<IAtom>", "declarator": "neighboors", "var_name": "neighboors"}, {"original_string": "private final int                      MAX_PROTON_COUNT = 5;", "modifier": "private final", "type": "int", "declarator": "MAX_PROTON_COUNT = 5", "var_name": "MAX_PROTON_COUNT"}], "methods": [{"identifier": "ProtonTotalPartialChargeDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " ProtonTotalPartialChargeDescriptor()", "full_signature": "public  ProtonTotalPartialChargeDescriptor()", "class_method_signature": "ProtonTotalPartialChargeDescriptor.ProtonTotalPartialChargeDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "ProtonTotalPartialChargeDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "ProtonTotalPartialChargeDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "ProtonTotalPartialChargeDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "ProtonTotalPartialChargeDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "ProtonTotalPartialChargeDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "class_method_signature": "ProtonTotalPartialChargeDescriptor.calculate(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "ProtonTotalPartialChargeDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "ProtonTotalPartialChargeDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/ProtonTotalPartialChargeDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer ac) {\n        neighboors = ac.getConnectedAtomsList(atom);\n\n        IAtomContainer clone;\n        try {\n            clone = (IAtomContainer) ac.clone();\n        } catch (CloneNotSupportedException e) {\n            return getDummyDescriptorValue(e);\n        }\n\n        try {\n            peoe = new GasteigerMarsiliPartialCharges();\n            peoe.setMaxGasteigerIters(6);\n            //\tHydrogenAdder hAdder = new HydrogenAdder();\n            //\thAdder.addExplicitHydrogensToSatisfyValency(mol);\n            peoe.assignGasteigerMarsiliSigmaPartialCharges(clone, true);\n        } catch (Exception exception) {\n            return getDummyDescriptorValue(exception);\n        }\n\n        IAtom localAtom = clone.getAtom(ac.indexOf(atom));\n        neighboors = clone.getConnectedAtomsList(localAtom);\n\n        // we assume that an atom has a mxa number of protons = MAX_PROTON_COUNT\n        // if it has less, we pad with NaN\n        DoubleArrayResult protonPartialCharge = new DoubleArrayResult(MAX_PROTON_COUNT);\n        assert (neighboors.size() < MAX_PROTON_COUNT);\n\n        protonPartialCharge.add(localAtom.getCharge());\n        int hydrogenNeighbors = 0;\n        for (IAtom neighboor : neighboors) {\n            if (neighboor.getSymbol().equals(\"H\")) {\n                hydrogenNeighbors++;\n                protonPartialCharge.add(neighboor.getCharge());\n            }\n        }\n        int remainder = MAX_PROTON_COUNT - (hydrogenNeighbors + 1);\n        for (int i = 0; i < remainder; i++)\n            protonPartialCharge.add(Double.NaN);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), protonPartialCharge,\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "class_method_signature": "ProtonTotalPartialChargeDescriptor.calculate(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false, "invocations": ["getConnectedAtomsList", "clone", "getDummyDescriptorValue", "setMaxGasteigerIters", "assignGasteigerMarsiliSigmaPartialCharges", "getDummyDescriptorValue", "getAtom", "indexOf", "getConnectedAtomsList", "size", "add", "getCharge", "equals", "getSymbol", "add", "getCharge", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}