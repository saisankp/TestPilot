{"test_class": {"identifier": "KarelDbCoordinatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LEADER_ID = \"leader\";", "modifier": "private static final", "type": "String", "declarator": "LEADER_ID = \"leader\"", "var_name": "LEADER_ID"}, {"original_string": "private static final String MEMBER_ID = \"member\";", "modifier": "private static final", "type": "String", "declarator": "MEMBER_ID = \"member\"", "var_name": "MEMBER_ID"}, {"original_string": "private static final String LEADER_HOST = \"leaderHost\";", "modifier": "private static final", "type": "String", "declarator": "LEADER_HOST = \"leaderHost\"", "var_name": "LEADER_HOST"}, {"original_string": "private static final int LEADER_PORT = 8083;", "modifier": "private static final", "type": "int", "declarator": "LEADER_PORT = 8083", "var_name": "LEADER_PORT"}, {"original_string": "private static final KarelDbIdentity LEADER_INFO = new KarelDbIdentity(\n        \"http\",\n        LEADER_HOST,\n        LEADER_PORT,\n        true\n    );", "modifier": "private static final", "type": "KarelDbIdentity", "declarator": "LEADER_INFO = new KarelDbIdentity(\n        \"http\",\n        LEADER_HOST,\n        LEADER_PORT,\n        true\n    )", "var_name": "LEADER_INFO"}, {"original_string": "private static final KarelDbIdentity INELIGIBLE_LEADER_INFO = new KarelDbIdentity(\n        \"http\",\n        LEADER_HOST,\n        LEADER_PORT,\n        false\n    );", "modifier": "private static final", "type": "KarelDbIdentity", "declarator": "INELIGIBLE_LEADER_INFO = new KarelDbIdentity(\n        \"http\",\n        LEADER_HOST,\n        LEADER_PORT,\n        false\n    )", "var_name": "INELIGIBLE_LEADER_INFO"}, {"original_string": "private String groupId = \"test-group\";", "modifier": "private", "type": "String", "declarator": "groupId = \"test-group\"", "var_name": "groupId"}, {"original_string": "private int sessionTimeoutMs = 10;", "modifier": "private", "type": "int", "declarator": "sessionTimeoutMs = 10", "var_name": "sessionTimeoutMs"}, {"original_string": "private int rebalanceTimeoutMs = 60;", "modifier": "private", "type": "int", "declarator": "rebalanceTimeoutMs = 60", "var_name": "rebalanceTimeoutMs"}, {"original_string": "private int heartbeatIntervalMs = 2;", "modifier": "private", "type": "int", "declarator": "heartbeatIntervalMs = 2", "var_name": "heartbeatIntervalMs"}, {"original_string": "private long retryBackoffMs = 100;", "modifier": "private", "type": "long", "declarator": "retryBackoffMs = 100", "var_name": "retryBackoffMs"}, {"original_string": "private MockTime time;", "modifier": "private", "type": "MockTime", "declarator": "time", "var_name": "time"}, {"original_string": "private MockClient client;", "modifier": "private", "type": "MockClient", "declarator": "client", "var_name": "client"}, {"original_string": "private Cluster cluster = TestUtils.singletonCluster(\"topic\", 1);", "modifier": "private", "type": "Cluster", "declarator": "cluster = TestUtils.singletonCluster(\"topic\", 1)", "var_name": "cluster"}, {"original_string": "private Node node = cluster.nodes().get(0);", "modifier": "private", "type": "Node", "declarator": "node = cluster.nodes().get(0)", "var_name": "node"}, {"original_string": "private Metadata metadata;", "modifier": "private", "type": "Metadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private Metrics metrics;", "modifier": "private", "type": "Metrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private ConsumerNetworkClient consumerClient;", "modifier": "private", "type": "ConsumerNetworkClient", "declarator": "consumerClient", "var_name": "consumerClient"}, {"original_string": "private MockRebalanceListener rebalanceListener;", "modifier": "private", "type": "MockRebalanceListener", "declarator": "rebalanceListener", "var_name": "rebalanceListener"}, {"original_string": "private KarelDbCoordinator coordinator;", "modifier": "private", "type": "KarelDbCoordinator", "declarator": "coordinator", "var_name": "coordinator"}], "file": "kareldb-server/src/test/java/io/kareldb/server/leader/KarelDbCoordinatorTest.java"}, "test_case": {"identifier": "testMetadata", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMetadata() {\n        JoinGroupRequestData.JoinGroupRequestProtocolCollection serialized = coordinator.metadata();\n        assertEquals(1, serialized.size());\n\n        JoinGroupRequestData.JoinGroupRequestProtocol defaultMetadata = serialized.iterator().next();\n        assertEquals(KarelDbCoordinator.KDB_SUBPROTOCOL_V0, defaultMetadata.name());\n        KarelDbIdentity state\n            = KarelDbProtocol.deserializeMetadata(ByteBuffer.wrap(defaultMetadata.metadata()));\n        assertEquals(LEADER_INFO, state);\n    }", "signature": "void testMetadata()", "full_signature": "@Test public void testMetadata()", "class_method_signature": "KarelDbCoordinatorTest.testMetadata()", "testcase": true, "constructor": false, "invocations": ["metadata", "assertEquals", "size", "next", "iterator", "assertEquals", "name", "deserializeMetadata", "wrap", "metadata", "assertEquals"]}, "focal_class": {"identifier": "KarelDbCoordinator", "superclass": "extends AbstractCoordinator", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(KarelDbCoordinator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(KarelDbCoordinator.class)", "var_name": "LOG"}, {"original_string": "public static final String KDB_SUBPROTOCOL_V0 = \"v0\";", "modifier": "public static final", "type": "String", "declarator": "KDB_SUBPROTOCOL_V0 = \"v0\"", "var_name": "KDB_SUBPROTOCOL_V0"}, {"original_string": "private final KarelDbIdentity identity;", "modifier": "private final", "type": "KarelDbIdentity", "declarator": "identity", "var_name": "identity"}, {"original_string": "private KarelDbProtocol.Assignment assignmentSnapshot;", "modifier": "private", "type": "KarelDbProtocol.Assignment", "declarator": "assignmentSnapshot", "var_name": "assignmentSnapshot"}, {"original_string": "private final KarelDbRebalanceListener listener;", "modifier": "private final", "type": "KarelDbRebalanceListener", "declarator": "listener", "var_name": "listener"}], "methods": [{"identifier": "KarelDbCoordinator", "parameters": "(\n        LogContext logContext,\n        ConsumerNetworkClient client,\n        String groupId,\n        int rebalanceTimeoutMs,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs,\n        KarelDbIdentity identity,\n        KarelDbRebalanceListener listener)", "modifiers": "public", "return": "", "signature": " KarelDbCoordinator(\n        LogContext logContext,\n        ConsumerNetworkClient client,\n        String groupId,\n        int rebalanceTimeoutMs,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs,\n        KarelDbIdentity identity,\n        KarelDbRebalanceListener listener)", "full_signature": "public  KarelDbCoordinator(\n        LogContext logContext,\n        ConsumerNetworkClient client,\n        String groupId,\n        int rebalanceTimeoutMs,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs,\n        KarelDbIdentity identity,\n        KarelDbRebalanceListener listener)", "class_method_signature": "KarelDbCoordinator.KarelDbCoordinator(\n        LogContext logContext,\n        ConsumerNetworkClient client,\n        String groupId,\n        int rebalanceTimeoutMs,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs,\n        KarelDbIdentity identity,\n        KarelDbRebalanceListener listener)", "testcase": false, "constructor": true}, {"identifier": "protocolType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String protocolType()", "full_signature": "@Override public String protocolType()", "class_method_signature": "KarelDbCoordinator.protocolType()", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(long timeout)", "modifiers": "public", "return": "void", "signature": "void poll(long timeout)", "full_signature": "public void poll(long timeout)", "class_method_signature": "KarelDbCoordinator.poll(long timeout)", "testcase": false, "constructor": false}, {"identifier": "metadata", "parameters": "()", "modifiers": "@Override public", "return": "JoinGroupRequestData.JoinGroupRequestProtocolCollection", "signature": "JoinGroupRequestData.JoinGroupRequestProtocolCollection metadata()", "full_signature": "@Override public JoinGroupRequestData.JoinGroupRequestProtocolCollection metadata()", "class_method_signature": "KarelDbCoordinator.metadata()", "testcase": false, "constructor": false}, {"identifier": "onJoinComplete", "parameters": "(\n        int generation,\n        String memberId,\n        String protocol,\n        ByteBuffer memberAssignment\n    )", "modifiers": "@Override protected", "return": "void", "signature": "void onJoinComplete(\n        int generation,\n        String memberId,\n        String protocol,\n        ByteBuffer memberAssignment\n    )", "full_signature": "@Override protected void onJoinComplete(\n        int generation,\n        String memberId,\n        String protocol,\n        ByteBuffer memberAssignment\n    )", "class_method_signature": "KarelDbCoordinator.onJoinComplete(\n        int generation,\n        String memberId,\n        String protocol,\n        ByteBuffer memberAssignment\n    )", "testcase": false, "constructor": false}, {"identifier": "performAssignment", "parameters": "(\n        String kafkaLeaderId, // Kafka group \"leader\" who does assignment, *not* the cluster leader\n        String protocol,\n        List<JoinGroupResponseData.JoinGroupResponseMember> allMemberMetadata\n    )", "modifiers": "@Override protected", "return": "Map<String, ByteBuffer>", "signature": "Map<String, ByteBuffer> performAssignment(\n        String kafkaLeaderId, // Kafka group \"leader\" who does assignment, *not* the cluster leader\n        String protocol,\n        List<JoinGroupResponseData.JoinGroupResponseMember> allMemberMetadata\n    )", "full_signature": "@Override protected Map<String, ByteBuffer> performAssignment(\n        String kafkaLeaderId, // Kafka group \"leader\" who does assignment, *not* the cluster leader\n        String protocol,\n        List<JoinGroupResponseData.JoinGroupResponseMember> allMemberMetadata\n    )", "class_method_signature": "KarelDbCoordinator.performAssignment(\n        String kafkaLeaderId, // Kafka group \"leader\" who does assignment, *not* the cluster leader\n        String protocol,\n        List<JoinGroupResponseData.JoinGroupResponseMember> allMemberMetadata\n    )", "testcase": false, "constructor": false}, {"identifier": "onJoinPrepare", "parameters": "(int generation, String memberId)", "modifiers": "@Override protected", "return": "void", "signature": "void onJoinPrepare(int generation, String memberId)", "full_signature": "@Override protected void onJoinPrepare(int generation, String memberId)", "class_method_signature": "KarelDbCoordinator.onJoinPrepare(int generation, String memberId)", "testcase": false, "constructor": false}, {"identifier": "ensureCoordinatorReady", "parameters": "(Timer timer)", "modifiers": "@Override protected synchronized", "return": "boolean", "signature": "boolean ensureCoordinatorReady(Timer timer)", "full_signature": "@Override protected synchronized boolean ensureCoordinatorReady(Timer timer)", "class_method_signature": "KarelDbCoordinator.ensureCoordinatorReady(Timer timer)", "testcase": false, "constructor": false}, {"identifier": "rejoinNeededOrPending", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean rejoinNeededOrPending()", "full_signature": "@Override protected boolean rejoinNeededOrPending()", "class_method_signature": "KarelDbCoordinator.rejoinNeededOrPending()", "testcase": false, "constructor": false}], "file": "kareldb-server/src/main/java/io/kareldb/server/leader/KarelDbCoordinator.java"}, "focal_method": {"identifier": "metadata", "parameters": "()", "modifiers": "@Override public", "return": "JoinGroupRequestData.JoinGroupRequestProtocolCollection", "body": "@Override\n    public JoinGroupRequestData.JoinGroupRequestProtocolCollection metadata() {\n        ByteBuffer metadata = KarelDbProtocol.serializeMetadata(identity);\n        return new JoinGroupRequestData.JoinGroupRequestProtocolCollection(\n            Collections.singletonList(new JoinGroupRequestData.JoinGroupRequestProtocol()\n                .setName(KDB_SUBPROTOCOL_V0)\n                .setMetadata(metadata.array())).iterator());\n    }", "signature": "JoinGroupRequestData.JoinGroupRequestProtocolCollection metadata()", "full_signature": "@Override public JoinGroupRequestData.JoinGroupRequestProtocolCollection metadata()", "class_method_signature": "KarelDbCoordinator.metadata()", "testcase": false, "constructor": false, "invocations": ["serializeMetadata", "iterator", "singletonList", "setMetadata", "setName", "array"]}, "repository": {"repo_id": 206686299, "url": "https://github.com/rayokota/kareldb", "stars": 315, "created": "9/6/2019 1:17:24 AM +00:00", "updates": "2020-01-25T05:22:09+00:00", "fork": "False", "license": "licensed"}}