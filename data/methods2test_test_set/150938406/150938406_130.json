{"test_class": {"identifier": "KMeansUpdateCentroidsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/clustering/kmeans/KMeansUpdateCentroidsTest.java"}, "test_case": {"identifier": "updateCentroidsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void updateCentroidsTest(){\n        int vectorSize = 2;\n        int len = 5;\n        EuclideanDistance distance = new EuclideanDistance();\n        List<Row> list = new ArrayList<>();\n        for (int i = 0; i < len; i++) {\n            Vector vec = DenseVector.ones(vectorSize).scale(i);\n            list.add(Row.of(vec));\n        }\n        FastDistanceMatrixData matrixData = (FastDistanceMatrixData)\n            distance.prepareMatrixData(list, 0).get(0);\n\n        double[] buffer = new double[]{0.5, 0.5, 2.0, 2.5, 2.5, 2.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};\n        int k = updateCentroids(matrixData, len, vectorSize, buffer, distance);\n        Assert.assertEquals(k, 3);\n        double[] expect = new double[]{0.25, 0.25, 1.25, 1.25, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0};\n        double[] predict = matrixData.getVectors().getData();\n        for (int i = 0; i < expect.length; i++) {\n            Assert.assertEquals(expect[i], predict[i], 0.01);\n        }\n    }", "signature": "void updateCentroidsTest()", "full_signature": "@Test public void updateCentroidsTest()", "class_method_signature": "KMeansUpdateCentroidsTest.updateCentroidsTest()", "testcase": true, "constructor": false, "invocations": ["scale", "ones", "add", "of", "get", "prepareMatrixData", "updateCentroids", "assertEquals", "getData", "getVectors", "assertEquals"]}, "focal_class": {"identifier": "KMeansUpdateCentroids", "superclass": "extends ComputeFunction", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(KMeansUpdateCentroids.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(KMeansUpdateCentroids.class)", "var_name": "LOG"}, {"original_string": "private FastDistance distance;", "modifier": "private", "type": "FastDistance", "declarator": "distance", "var_name": "distance"}], "methods": [{"identifier": "KMeansUpdateCentroids", "parameters": "(FastDistance distance)", "modifiers": "public", "return": "", "signature": " KMeansUpdateCentroids(FastDistance distance)", "full_signature": "public  KMeansUpdateCentroids(FastDistance distance)", "class_method_signature": "KMeansUpdateCentroids.KMeansUpdateCentroids(FastDistance distance)", "testcase": false, "constructor": true}, {"identifier": "calc", "parameters": "(ComContext context)", "modifiers": "@Override public", "return": "void", "signature": "void calc(ComContext context)", "full_signature": "@Override public void calc(ComContext context)", "class_method_signature": "KMeansUpdateCentroids.calc(ComContext context)", "testcase": false, "constructor": false}, {"identifier": "updateCentroids", "parameters": "(FastDistanceMatrixData matrixData, int k, int vectorSize, double[] buffer,\n                               FastDistance distance)", "modifiers": "static", "return": "int", "signature": "int updateCentroids(FastDistanceMatrixData matrixData, int k, int vectorSize, double[] buffer,\n                               FastDistance distance)", "full_signature": "static int updateCentroids(FastDistanceMatrixData matrixData, int k, int vectorSize, double[] buffer,\n                               FastDistance distance)", "class_method_signature": "KMeansUpdateCentroids.updateCentroids(FastDistanceMatrixData matrixData, int k, int vectorSize, double[] buffer,\n                               FastDistance distance)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/clustering/kmeans/KMeansUpdateCentroids.java"}, "focal_method": {"identifier": "updateCentroids", "parameters": "(FastDistanceMatrixData matrixData, int k, int vectorSize, double[] buffer,\n                               FastDistance distance)", "modifiers": "static", "return": "int", "body": "static int updateCentroids(FastDistanceMatrixData matrixData, int k, int vectorSize, double[] buffer,\n                               FastDistance distance) {\n        int index = 0;\n        DenseMatrix matrix = matrixData.getVectors();\n        double[] data = matrix.getData();\n        Arrays.fill(data, 0.0);\n        for (int clusterId = 0; clusterId < k; clusterId++) {\n            int startIndex = clusterId * (vectorSize + 1);\n            double weight = buffer[startIndex + vectorSize];\n            if (weight == 0) {\n                continue;\n            }\n            BLAS.axpy(vectorSize, 1.0 / weight, buffer, startIndex, data, index * vectorSize);\n            index++;\n        }\n        distance.updateLabel(matrixData);\n        return index;\n    }", "signature": "int updateCentroids(FastDistanceMatrixData matrixData, int k, int vectorSize, double[] buffer,\n                               FastDistance distance)", "full_signature": "static int updateCentroids(FastDistanceMatrixData matrixData, int k, int vectorSize, double[] buffer,\n                               FastDistance distance)", "class_method_signature": "KMeansUpdateCentroids.updateCentroids(FastDistanceMatrixData matrixData, int k, int vectorSize, double[] buffer,\n                               FastDistance distance)", "testcase": false, "constructor": false, "invocations": ["getVectors", "getData", "fill", "axpy", "updateLabel"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}