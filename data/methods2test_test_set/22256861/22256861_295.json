{"test_class": {"identifier": "DataInterpolatorStaticTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final double endTimeMJD = 25.5;", "modifier": "private final", "type": "double", "declarator": "endTimeMJD = 25.5", "var_name": "endTimeMJD"}, {"original_string": "private DataInterpolator di;", "modifier": "private", "type": "DataInterpolator", "declarator": "di", "var_name": "di"}, {"original_string": "private Product p1;", "modifier": "private", "type": "Product", "declarator": "p1", "var_name": "p1"}, {"original_string": "private Product p2;", "modifier": "private", "type": "Product", "declarator": "p2", "var_name": "p2"}, {"original_string": "private double startTimeMJD;", "modifier": "private", "type": "double", "declarator": "startTimeMJD", "var_name": "startTimeMJD"}], "file": "s3tbx-c2rcc/src/test/java/org/esa/s3tbx/c2rcc/ancillary/DataInterpolatorStaticTest.java"}, "test_case": {"identifier": "testGetCenterTimeValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCenterTimeValue() throws Exception {\n        final double centerTimeMJD = (endTimeMJD - startTimeMJD) / 2 + startTimeMJD;\n        assertEquals(5.5, di.getValue(centerTimeMJD, 45, -90));\n        assertEquals(7.6, di.getValue(centerTimeMJD, 45, 90));\n        assertEquals(3.85, di.getValue(centerTimeMJD, -45, -90));\n        assertEquals(9.125, di.getValue(centerTimeMJD, -45, 90));\n    }", "signature": "void testGetCenterTimeValue()", "full_signature": "@Test public void testGetCenterTimeValue()", "class_method_signature": "DataInterpolatorStaticTest.testGetCenterTimeValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "DataInterpolatorStatic", "superclass": "extends DataInterpolator", "interfaces": "", "fields": [{"original_string": "private final double startTimeMJD;", "modifier": "private final", "type": "double", "declarator": "startTimeMJD", "var_name": "startTimeMJD"}, {"original_string": "private final double endTimeMJD;", "modifier": "private final", "type": "double", "declarator": "endTimeMJD", "var_name": "endTimeMJD"}, {"original_string": "private Band startBand;", "modifier": "private", "type": "Band", "declarator": "startBand", "var_name": "startBand"}, {"original_string": "private Band endBand;", "modifier": "private", "type": "Band", "declarator": "endBand", "var_name": "endBand"}, {"original_string": "private final GeoCoding startGC;", "modifier": "private final", "type": "GeoCoding", "declarator": "startGC", "var_name": "startGC"}, {"original_string": "private final GeoCoding endGC;", "modifier": "private final", "type": "GeoCoding", "declarator": "endGC", "var_name": "endGC"}], "methods": [{"identifier": "DataInterpolatorStatic", "parameters": "(double startTimeMJD, double endTimeMJD, Product startProduct, Product endProduct, final String bandName, double defaultValue)", "modifiers": "public", "return": "", "signature": " DataInterpolatorStatic(double startTimeMJD, double endTimeMJD, Product startProduct, Product endProduct, final String bandName, double defaultValue)", "full_signature": "public  DataInterpolatorStatic(double startTimeMJD, double endTimeMJD, Product startProduct, Product endProduct, final String bandName, double defaultValue)", "class_method_signature": "DataInterpolatorStatic.DataInterpolatorStatic(double startTimeMJD, double endTimeMJD, Product startProduct, Product endProduct, final String bandName, double defaultValue)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "(double timeMJD, double lat, double lon)", "modifiers": "@Override public", "return": "double", "signature": "double getValue(double timeMJD, double lat, double lon)", "full_signature": "@Override public double getValue(double timeMJD, double lat, double lon)", "class_method_signature": "DataInterpolatorStatic.getValue(double timeMJD, double lat, double lon)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "DataInterpolatorStatic.dispose()", "testcase": false, "constructor": false}, {"identifier": "getStartValue", "parameters": "(double latitude, double longitude)", "modifiers": "protected", "return": "double", "signature": "double getStartValue(double latitude, double longitude)", "full_signature": "protected double getStartValue(double latitude, double longitude)", "class_method_signature": "DataInterpolatorStatic.getStartValue(double latitude, double longitude)", "testcase": false, "constructor": false}, {"identifier": "getEndValue", "parameters": "(double latitude, double longitude)", "modifiers": "protected", "return": "double", "signature": "double getEndValue(double latitude, double longitude)", "full_signature": "protected double getEndValue(double latitude, double longitude)", "class_method_signature": "DataInterpolatorStatic.getEndValue(double latitude, double longitude)", "testcase": false, "constructor": false}], "file": "s3tbx-c2rcc/src/main/java/org/esa/s3tbx/c2rcc/ancillary/DataInterpolatorStatic.java"}, "focal_method": {"identifier": "getValue", "parameters": "(double timeMJD, double lat, double lon)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double getValue(double timeMJD, double lat, double lon) {\n        final double startValue = getStartValue(lat, lon);\n        final double endValue = getEndValue(lat, lon);\n        return startValue + (timeMJD - startTimeMJD) / (endTimeMJD - startTimeMJD) * (endValue - startValue);\n    }", "signature": "double getValue(double timeMJD, double lat, double lon)", "full_signature": "@Override public double getValue(double timeMJD, double lat, double lon)", "class_method_signature": "DataInterpolatorStatic.getValue(double timeMJD, double lat, double lon)", "testcase": false, "constructor": false, "invocations": ["getStartValue", "getEndValue"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}