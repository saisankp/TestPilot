{"test_class": {"identifier": "JDTCompilerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EOL = System.lineSeparator();", "modifier": "private static final", "type": "String", "declarator": "EOL = System.lineSeparator()", "var_name": "EOL"}], "file": "tycho-compiler-jdt/src/test/java/org/eclipse/tycho/compiler/jdt/JDTCompilerTest.java"}, "test_case": {"identifier": "testParseModernStreamWarning", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseModernStreamWarning() throws IOException {\n        List<CompilerMessage> messages = JDTCompiler\n                .parseModernStream(createOutputForLines(\"2. WARNING in foo (at line 4)\"));\n        assertEquals(1, messages.size());\n        CompilerMessage message = messages.get(0);\n        assertEquals(Kind.WARNING, message.getKind());\n        assertEquals(\"foo\", message.getFile());\n        assertEquals(4, message.getStartLine());\n    }", "signature": "void testParseModernStreamWarning()", "full_signature": "@Test public void testParseModernStreamWarning()", "class_method_signature": "JDTCompilerTest.testParseModernStreamWarning()", "testcase": true, "constructor": false, "invocations": ["parseModernStream", "createOutputForLines", "assertEquals", "size", "get", "assertEquals", "getKind", "assertEquals", "getFile", "assertEquals", "getStartLine"]}, "focal_class": {"identifier": "JDTCompiler", "superclass": "extends AbstractCompiler", "interfaces": "", "fields": [{"original_string": "private static final String SEPARATOR = \"----------\";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR = \"----------\"", "var_name": "SEPARATOR"}, {"original_string": "private static final char[] SEPARATOR_CHARS = new char[] { '/', '\\\\' };", "modifier": "private static final", "type": "char[]", "declarator": "SEPARATOR_CHARS = new char[] { '/', '\\\\' }", "var_name": "SEPARATOR_CHARS"}, {"original_string": "private static final char[] ADAPTER_PREFIX = \"#ADAPTER#\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "ADAPTER_PREFIX = \"#ADAPTER#\".toCharArray()", "var_name": "ADAPTER_PREFIX"}, {"original_string": "private static final char[] ADAPTER_ENCODING = \"ENCODING#\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "ADAPTER_ENCODING = \"ENCODING#\".toCharArray()", "var_name": "ADAPTER_ENCODING"}, {"original_string": "private static final char[] ADAPTER_ACCESS = \"ACCESS#\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "ADAPTER_ACCESS = \"ACCESS#\".toCharArray()", "var_name": "ADAPTER_ACCESS"}, {"original_string": "static final Pattern LINE_PATTERN = Pattern\n            .compile(\"(?:(\\\\d*)\\\\. )?(ERROR|WARNING) in (.*?)( \\\\(at line (\\\\d+)\\\\))?\\\\s*\");", "modifier": "static final", "type": "Pattern", "declarator": "LINE_PATTERN = Pattern\n            .compile(\"(?:(\\\\d*)\\\\. )?(ERROR|WARNING) in (.*?)( \\\\(at line (\\\\d+)\\\\))?\\\\s*\")", "var_name": "LINE_PATTERN"}, {"original_string": "@Requirement\n    private JdkLibraryInfoProvider jdkLibInfoProvider;", "modifier": "@Requirement\n    private", "type": "JdkLibraryInfoProvider", "declarator": "jdkLibInfoProvider", "var_name": "jdkLibInfoProvider"}], "methods": [{"identifier": "JDTCompiler", "parameters": "()", "modifiers": "public", "return": "", "signature": " JDTCompiler()", "full_signature": "public  JDTCompiler()", "class_method_signature": "JDTCompiler.JDTCompiler()", "testcase": false, "constructor": true}, {"identifier": "performCompile", "parameters": "(CompilerConfiguration config)", "modifiers": "@Override public", "return": "CompilerResult", "signature": "CompilerResult performCompile(CompilerConfiguration config)", "full_signature": "@Override public CompilerResult performCompile(CompilerConfiguration config)", "class_method_signature": "JDTCompiler.performCompile(CompilerConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "createCommandLine", "parameters": "(CompilerConfiguration config)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] createCommandLine(CompilerConfiguration config)", "full_signature": "@Override public String[] createCommandLine(CompilerConfiguration config)", "class_method_signature": "JDTCompiler.createCommandLine(CompilerConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "buildCompilerArguments", "parameters": "(CompilerConfiguration config, CustomCompilerConfiguration custom,\n            String[] sourceFiles)", "modifiers": "public", "return": "String[]", "signature": "String[] buildCompilerArguments(CompilerConfiguration config, CustomCompilerConfiguration custom,\n            String[] sourceFiles)", "full_signature": "public String[] buildCompilerArguments(CompilerConfiguration config, CustomCompilerConfiguration custom,\n            String[] sourceFiles)", "class_method_signature": "JDTCompiler.buildCompilerArguments(CompilerConfiguration config, CustomCompilerConfiguration custom,\n            String[] sourceFiles)", "testcase": false, "constructor": false}, {"identifier": "suppressSource", "parameters": "(CompilerConfiguration config)", "modifiers": "private static", "return": "boolean", "signature": "boolean suppressSource(CompilerConfiguration config)", "full_signature": "private static boolean suppressSource(CompilerConfiguration config)", "class_method_signature": "JDTCompiler.suppressSource(CompilerConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "suppressEncoding", "parameters": "(CompilerConfiguration config)", "modifiers": "private static", "return": "boolean", "signature": "boolean suppressEncoding(CompilerConfiguration config)", "full_signature": "private static boolean suppressEncoding(CompilerConfiguration config)", "class_method_signature": "JDTCompiler.suppressEncoding(CompilerConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "compileOutOfProcess", "parameters": "(File workingDirectory, String executable, String[] args)", "modifiers": "", "return": "CompilerResult", "signature": "CompilerResult compileOutOfProcess(File workingDirectory, String executable, String[] args)", "full_signature": " CompilerResult compileOutOfProcess(File workingDirectory, String executable, String[] args)", "class_method_signature": "JDTCompiler.compileOutOfProcess(File workingDirectory, String executable, String[] args)", "testcase": false, "constructor": false}, {"identifier": "compileInProcess", "parameters": "(String[] args, CompilerConfiguration config, CustomCompilerConfiguration custom)", "modifiers": "", "return": "CompilerResult", "signature": "CompilerResult compileInProcess(String[] args, CompilerConfiguration config, CustomCompilerConfiguration custom)", "full_signature": " CompilerResult compileInProcess(String[] args, CompilerConfiguration config, CustomCompilerConfiguration custom)", "class_method_signature": "JDTCompiler.compileInProcess(String[] args, CompilerConfiguration config, CustomCompilerConfiguration custom)", "testcase": false, "constructor": false}, {"identifier": "addExternalJavaHomeArgs", "parameters": "(List<String> jdtCompilerArgs, String javaHome)", "modifiers": "private", "return": "void", "signature": "void addExternalJavaHomeArgs(List<String> jdtCompilerArgs, String javaHome)", "full_signature": "private void addExternalJavaHomeArgs(List<String> jdtCompilerArgs, String javaHome)", "class_method_signature": "JDTCompiler.addExternalJavaHomeArgs(List<String> jdtCompilerArgs, String javaHome)", "testcase": false, "constructor": false}, {"identifier": "addToCompilerArgumentsIfNotSet", "parameters": "(String argument, String value, List<String> compilerArguments)", "modifiers": "private", "return": "void", "signature": "void addToCompilerArgumentsIfNotSet(String argument, String value, List<String> compilerArguments)", "full_signature": "private void addToCompilerArgumentsIfNotSet(String argument, String value, List<String> compilerArguments)", "class_method_signature": "JDTCompiler.addToCompilerArgumentsIfNotSet(String argument, String value, List<String> compilerArguments)", "testcase": false, "constructor": false}, {"identifier": "parseModernStream", "parameters": "(BufferedReader input)", "modifiers": "protected static", "return": "List<CompilerMessage>", "signature": "List<CompilerMessage> parseModernStream(BufferedReader input)", "full_signature": "protected static List<CompilerMessage> parseModernStream(BufferedReader input)", "class_method_signature": "JDTCompiler.parseModernStream(BufferedReader input)", "testcase": false, "constructor": false}, {"identifier": "addMessageIfFound", "parameters": "(List<CompilerMessage> messages, String type, String file, int line,\n            String message)", "modifiers": "private static", "return": "void", "signature": "void addMessageIfFound(List<CompilerMessage> messages, String type, String file, int line,\n            String message)", "full_signature": "private static void addMessageIfFound(List<CompilerMessage> messages, String type, String file, int line,\n            String message)", "class_method_signature": "JDTCompiler.addMessageIfFound(List<CompilerMessage> messages, String type, String file, int line,\n            String message)", "testcase": false, "constructor": false}, {"identifier": "createClasspathArgument", "parameters": "(List<String> classpath, CustomCompilerConfiguration custom)", "modifiers": "private", "return": "String", "signature": "String createClasspathArgument(List<String> classpath, CustomCompilerConfiguration custom)", "full_signature": "private String createClasspathArgument(List<String> classpath, CustomCompilerConfiguration custom)", "class_method_signature": "JDTCompiler.createClasspathArgument(List<String> classpath, CustomCompilerConfiguration custom)", "testcase": false, "constructor": false}, {"identifier": "checkCompilerArgs", "parameters": "(Collection<Map.Entry<String, String>> argEntries,\n            CustomCompilerConfiguration custom)", "modifiers": "private", "return": "void", "signature": "void checkCompilerArgs(Collection<Map.Entry<String, String>> argEntries,\n            CustomCompilerConfiguration custom)", "full_signature": "private void checkCompilerArgs(Collection<Map.Entry<String, String>> argEntries,\n            CustomCompilerConfiguration custom)", "class_method_signature": "JDTCompiler.checkCompilerArgs(Collection<Map.Entry<String, String>> argEntries,\n            CustomCompilerConfiguration custom)", "testcase": false, "constructor": false}], "file": "tycho-compiler-jdt/src/main/java/org/eclipse/tycho/compiler/jdt/JDTCompiler.java"}, "focal_method": {"identifier": "parseModernStream", "parameters": "(BufferedReader input)", "modifiers": "protected static", "return": "List<CompilerMessage>", "body": "protected static List<CompilerMessage> parseModernStream(BufferedReader input) throws IOException {\n        List<CompilerMessage> messages = new ArrayList<>();\n        String type = null;\n        String file = null;\n        int lineNr = -1;\n        StringBuilder messageBuffer = new StringBuilder();\n        for (String line = input.readLine(); line != null; line = input.readLine()) {\n            Matcher matcher = LINE_PATTERN.matcher(line);\n            if (matcher.matches()) {\n                addMessageIfFound(messages, type, file, lineNr, messageBuffer.toString());\n                /* String errorNr = */matcher.group(1);\n                type = matcher.group(2);\n                file = matcher.group(3);\n                String lineNumberString = matcher.group(5);\n                if (lineNumberString != null) {\n                    lineNr = Integer.parseInt(lineNumberString);\n                } else {\n                    lineNr = -1;\n                }\n                messageBuffer = new StringBuilder();\n            } else {\n                // context line\n                if (!SEPARATOR.equals(line) && line.trim().length() > 0) {\n                    messageBuffer.append(EOL).append(line);\n                }\n            }\n        }\n        addMessageIfFound(messages, type, file, lineNr, messageBuffer.toString());\n        return messages;\n    }", "signature": "List<CompilerMessage> parseModernStream(BufferedReader input)", "full_signature": "protected static List<CompilerMessage> parseModernStream(BufferedReader input)", "class_method_signature": "JDTCompiler.parseModernStream(BufferedReader input)", "testcase": false, "constructor": false, "invocations": ["readLine", "readLine", "matcher", "matches", "addMessageIfFound", "toString", "group", "group", "group", "group", "parseInt", "equals", "length", "trim", "append", "append", "addMessageIfFound", "toString"]}, "repository": {"repo_id": 2666698, "url": "https://github.com/eclipse/tycho", "language": "Java", "is_fork": false, "fork_count": 67, "stargazer_count": 61, "size": 22429, "license": "licensed"}}