{"test_class": {"identifier": "EtcdWatcherSplittingConsumerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TestConsumer configConsumer = new TestConsumer();", "modifier": "private final", "type": "TestConsumer", "declarator": "configConsumer = new TestConsumer()", "var_name": "configConsumer"}, {"original_string": "private final TestConsumer operConsumer = new TestConsumer();", "modifier": "private final", "type": "TestConsumer", "declarator": "operConsumer = new TestConsumer()", "var_name": "operConsumer"}, {"original_string": "private final Map<ByteSequence, CheckedConsumer<List<WatchEvent>, EtcdException>> consumers = ImmutableMap\n            .of(CONFIGURATION_PREFIX, configConsumer, OPERATIONAL_PREFIX, operConsumer);", "modifier": "private final", "type": "Map<ByteSequence, CheckedConsumer<List<WatchEvent>, EtcdException>>", "declarator": "consumers = ImmutableMap\n            .of(CONFIGURATION_PREFIX, configConsumer, OPERATIONAL_PREFIX, operConsumer)", "var_name": "consumers"}], "file": "ds/src/test/java/org/opendaylight/etcd/ds/impl/EtcdWatcherSplittingConsumerTest.java"}, "test_case": {"identifier": "testOnlyOper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnlyOper() throws EtcdException {\n        EtcdWatcherSplittingConsumer splitter = new EtcdWatcherSplittingConsumer(empty(), consumers);\n        splitter.accept(1L, Lists.newArrayList(newWatchEvent(append(OPERATIONAL_PREFIX, (byte)123))));\n        assertThat(configConsumer.counter.get()).isEqualTo(0L);\n        assertThat(operConsumer.counter.get()).isEqualTo(1L);\n    }", "signature": "void testOnlyOper()", "full_signature": "@Test public void testOnlyOper()", "class_method_signature": "EtcdWatcherSplittingConsumerTest.testOnlyOper()", "testcase": true, "constructor": false, "invocations": ["empty", "accept", "newArrayList", "newWatchEvent", "append", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "EtcdWatcherSplittingConsumer", "superclass": "", "interfaces": "implements CheckedBiConsumer<Long, List<WatchEvent>, EtcdException>", "fields": [{"original_string": "private final Optional<RevAwaiter> revAwaiter;", "modifier": "private final", "type": "Optional<RevAwaiter>", "declarator": "revAwaiter", "var_name": "revAwaiter"}, {"original_string": "private final ImmutableMap<ByteSequence, CheckedConsumer<List<WatchEvent>, EtcdException>> splitConsumers;", "modifier": "private final", "type": "ImmutableMap<ByteSequence, CheckedConsumer<List<WatchEvent>, EtcdException>>", "declarator": "splitConsumers", "var_name": "splitConsumers"}], "methods": [{"identifier": "EtcdWatcherSplittingConsumer", "parameters": "(Optional<RevAwaiter> revAwaiter,\n            Map<ByteSequence, CheckedConsumer<List<WatchEvent>, EtcdException>> splitConsumers)", "modifiers": "", "return": "", "signature": " EtcdWatcherSplittingConsumer(Optional<RevAwaiter> revAwaiter,\n            Map<ByteSequence, CheckedConsumer<List<WatchEvent>, EtcdException>> splitConsumers)", "full_signature": "  EtcdWatcherSplittingConsumer(Optional<RevAwaiter> revAwaiter,\n            Map<ByteSequence, CheckedConsumer<List<WatchEvent>, EtcdException>> splitConsumers)", "class_method_signature": "EtcdWatcherSplittingConsumer.EtcdWatcherSplittingConsumer(Optional<RevAwaiter> revAwaiter,\n            Map<ByteSequence, CheckedConsumer<List<WatchEvent>, EtcdException>> splitConsumers)", "testcase": false, "constructor": true}, {"identifier": "accept", "parameters": "(Long revision, List<WatchEvent> allWatchEvents)", "modifiers": "@Override public", "return": "void", "signature": "void accept(Long revision, List<WatchEvent> allWatchEvents)", "full_signature": "@Override public void accept(Long revision, List<WatchEvent> allWatchEvents)", "class_method_signature": "EtcdWatcherSplittingConsumer.accept(Long revision, List<WatchEvent> allWatchEvents)", "testcase": false, "constructor": false}], "file": "ds/src/main/java/org/opendaylight/etcd/ds/impl/EtcdWatcherSplittingConsumer.java"}, "focal_method": {"identifier": "accept", "parameters": "(Long revision, List<WatchEvent> allWatchEvents)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void accept(Long revision, List<WatchEvent> allWatchEvents) throws EtcdException {\n        Builder<ByteSequence, List<WatchEvent>> listsBuilder = builderWithExpectedSize(splitConsumers.size());\n        ImmutableSet<ByteSequence> prefixes = splitConsumers.keySet();\n        for (ByteSequence keyPrefix : prefixes) {\n            listsBuilder.put(keyPrefix, new ArrayList<WatchEvent>());\n        }\n        ImmutableMap<ByteSequence, List<WatchEvent>> lists = listsBuilder.build();\n\n        for (WatchEvent watchEvent : allWatchEvents) {\n            for (ByteSequence keyPrefix : prefixes) {\n                if (watchEvent.getKeyValue().getKey().startsWith(keyPrefix)) {\n                    lists.get(keyPrefix).add(watchEvent);\n                }\n            }\n        }\n\n        for (Map.Entry<ByteSequence, List<WatchEvent>> list: lists.entrySet()) {\n            List<WatchEvent> eventsList = list.getValue();\n            // Important optimization, because with separate Oper/Config, one or the other is typically empty\n            if (!eventsList.isEmpty()) {\n                splitConsumers.get(list.getKey()).accept(eventsList);\n            }\n        }\n\n        revAwaiter.ifPresent(revAwait -> revAwait.update(revision));\n    }", "signature": "void accept(Long revision, List<WatchEvent> allWatchEvents)", "full_signature": "@Override public void accept(Long revision, List<WatchEvent> allWatchEvents)", "class_method_signature": "EtcdWatcherSplittingConsumer.accept(Long revision, List<WatchEvent> allWatchEvents)", "testcase": false, "constructor": false, "invocations": ["builderWithExpectedSize", "size", "keySet", "put", "build", "startsWith", "getKey", "getKeyValue", "add", "get", "entrySet", "getValue", "isEmpty", "accept", "get", "getKey", "ifPresent", "update"]}, "repository": {"repo_id": 102614080, "url": "https://github.com/vorburger/opendaylight-etcd", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 446, "license": "licensed"}}