{"test_class": {"identifier": "GeometricCumulativeDoubleBondFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/stereo/GeometricCumulativeDoubleBondFactoryTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate() throws Exception {\n        IAtomContainer m = new AtomContainer();\n        m.addAtom(carbonAt(-0.2994, 3.2084));\n        m.addAtom(carbonAt(-1.1244, 3.2084));\n        m.addAtom(carbonAt(-1.9494, 3.2084));\n        m.addAtom(carbonAt(-2.3619, 2.4939));\n        m.addAtom(carbonAt(0.1131, 3.9228));\n        m.addBond(new Bond(m.getAtom(0), m.getAtom(1), IBond.Order.DOUBLE));\n        m.addBond(new Bond(m.getAtom(1), m.getAtom(2), IBond.Order.DOUBLE));\n        m.addBond(new Bond(m.getAtom(2), m.getAtom(3)));\n        m.addBond(new Bond(m.getAtom(0), m.getAtom(4)));\n\n        StereoEncoderFactory factory = new GeometricCumulativeDoubleBondFactory();\n        // graph not used\n        StereoEncoder encoder = factory.create(m, null);\n        assertThat(encoder, is(instanceOf(MultiStereoEncoder.class)));\n    }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "GeometricCumulativeDoubleBondFactoryTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["addAtom", "carbonAt", "addAtom", "carbonAt", "addAtom", "carbonAt", "addAtom", "carbonAt", "addAtom", "carbonAt", "addBond", "getAtom", "getAtom", "addBond", "getAtom", "getAtom", "addBond", "getAtom", "getAtom", "addBond", "getAtom", "getAtom", "create", "assertThat", "is", "instanceOf"]}, "focal_class": {"identifier": "GeometricCumulativeDoubleBondFactory", "superclass": "", "interfaces": "implements StereoEncoderFactory", "fields": [], "methods": [{"identifier": "create", "parameters": "(IAtomContainer container, int[][] graph)", "modifiers": "@Override public", "return": "StereoEncoder", "signature": "StereoEncoder create(IAtomContainer container, int[][] graph)", "full_signature": "@Override public StereoEncoder create(IAtomContainer container, int[][] graph)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.create(IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "axialEncoder", "parameters": "(IAtomContainer container, IAtom start, IAtom end)", "modifiers": "static", "return": "StereoEncoder", "signature": "StereoEncoder axialEncoder(IAtomContainer container, IAtom start, IAtom end)", "full_signature": "static StereoEncoder axialEncoder(IAtomContainer container, IAtom start, IAtom end)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.axialEncoder(IAtomContainer container, IAtom start, IAtom end)", "testcase": false, "constructor": false}, {"identifier": "axial2DEncoder", "parameters": "(IAtomContainer container, IAtom start, List<IBond> startBonds,\n            IAtom end, List<IBond> endBonds)", "modifiers": "private static", "return": "StereoEncoder", "signature": "StereoEncoder axial2DEncoder(IAtomContainer container, IAtom start, List<IBond> startBonds,\n            IAtom end, List<IBond> endBonds)", "full_signature": "private static StereoEncoder axial2DEncoder(IAtomContainer container, IAtom start, List<IBond> startBonds,\n            IAtom end, List<IBond> endBonds)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.axial2DEncoder(IAtomContainer container, IAtom start, List<IBond> startBonds,\n            IAtom end, List<IBond> endBonds)", "testcase": false, "constructor": false}, {"identifier": "axial3DEncoder", "parameters": "(IAtomContainer container, IAtom start, List<IBond> startBonds,\n            IAtom end, List<IBond> endBonds)", "modifiers": "private static", "return": "StereoEncoder", "signature": "StereoEncoder axial3DEncoder(IAtomContainer container, IAtom start, List<IBond> startBonds,\n            IAtom end, List<IBond> endBonds)", "full_signature": "private static StereoEncoder axial3DEncoder(IAtomContainer container, IAtom start, List<IBond> startBonds,\n            IAtom end, List<IBond> endBonds)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.axial3DEncoder(IAtomContainer container, IAtom start, List<IBond> startBonds,\n            IAtom end, List<IBond> endBonds)", "testcase": false, "constructor": false}, {"identifier": "fill2DCoordinates", "parameters": "(IAtomContainer container, IAtom a, List<IBond> connected,\n            Point2d[] coordinates, int[] elevations, int offset)", "modifiers": "private static", "return": "PermutationParity", "signature": "PermutationParity fill2DCoordinates(IAtomContainer container, IAtom a, List<IBond> connected,\n            Point2d[] coordinates, int[] elevations, int offset)", "full_signature": "private static PermutationParity fill2DCoordinates(IAtomContainer container, IAtom a, List<IBond> connected,\n            Point2d[] coordinates, int[] elevations, int offset)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.fill2DCoordinates(IAtomContainer container, IAtom a, List<IBond> connected,\n            Point2d[] coordinates, int[] elevations, int offset)", "testcase": false, "constructor": false}, {"identifier": "fill3DCoordinates", "parameters": "(IAtomContainer container, IAtom a, List<IBond> connected,\n            Point3d[] coordinates, int offset)", "modifiers": "private static", "return": "PermutationParity", "signature": "PermutationParity fill3DCoordinates(IAtomContainer container, IAtom a, List<IBond> connected,\n            Point3d[] coordinates, int offset)", "full_signature": "private static PermutationParity fill3DCoordinates(IAtomContainer container, IAtom a, List<IBond> connected,\n            Point3d[] coordinates, int offset)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.fill3DCoordinates(IAtomContainer container, IAtom a, List<IBond> connected,\n            Point3d[] coordinates, int offset)", "testcase": false, "constructor": false}, {"identifier": "has2DCoordinates", "parameters": "(List<IBond> bonds)", "modifiers": "private static", "return": "boolean", "signature": "boolean has2DCoordinates(List<IBond> bonds)", "full_signature": "private static boolean has2DCoordinates(List<IBond> bonds)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.has2DCoordinates(List<IBond> bonds)", "testcase": false, "constructor": false}, {"identifier": "has3DCoordinates", "parameters": "(List<IBond> bonds)", "modifiers": "private static", "return": "boolean", "signature": "boolean has3DCoordinates(List<IBond> bonds)", "full_signature": "private static boolean has3DCoordinates(List<IBond> bonds)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.has3DCoordinates(List<IBond> bonds)", "testcase": false, "constructor": false}, {"identifier": "elevation", "parameters": "(IBond bond, IAtom a)", "modifiers": "static", "return": "int", "signature": "int elevation(IBond bond, IAtom a)", "full_signature": "static int elevation(IBond bond, IAtom a)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.elevation(IBond bond, IAtom a)", "testcase": false, "constructor": false}, {"identifier": "elevation", "parameters": "(IBond bond)", "modifiers": "static", "return": "int", "signature": "int elevation(IBond bond)", "full_signature": "static int elevation(IBond bond)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.elevation(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "isOdd", "parameters": "(int x)", "modifiers": "private static", "return": "boolean", "signature": "boolean isOdd(int x)", "full_signature": "private static boolean isOdd(int x)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.isOdd(int x)", "testcase": false, "constructor": false}, {"identifier": "isDoubleBond", "parameters": "(IBond bond)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDoubleBond(IBond bond)", "full_signature": "private static boolean isDoubleBond(IBond bond)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.isDoubleBond(IBond bond)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/stereo/GeometricCumulativeDoubleBondFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(IAtomContainer container, int[][] graph)", "modifiers": "@Override public", "return": "StereoEncoder", "body": "@Override\n    public StereoEncoder create(IAtomContainer container, int[][] graph) {\n\n        int n = container.getAtomCount();\n        BondMap map = new BondMap(n);\n\n        List<StereoEncoder> encoders = new ArrayList<StereoEncoder>(1);\n\n        // index double bonds by their atoms\n        for (IBond bond : container.bonds()) {\n            if (isDoubleBond(bond)) map.add(bond);\n        }\n\n        Set<IAtom> visited = new HashSet<IAtom>(n);\n\n        // find atoms which are connected between two double bonds\n        for (IAtom a : map.atoms()) {\n\n            List<IBond> bonds = map.bonds(a);\n            if (bonds.size() == 2) {\n\n                // (s)tart/(e)nd of cumulated system: -s=a=e-\n                IAtom s = bonds.get(0).getOther(a);\n                IAtom e = bonds.get(1).getOther(a);\n                // need the parents to re-use the double bond encoder\n                IAtom sParent = a;\n                IAtom eParent = a;\n\n                visited.add(a);\n                visited.add(s);\n                visited.add(e);\n\n                int size = 2;\n\n                // expand out from 'l'\n                while (s != null && map.cumulated(s)) {\n                    IAtom p = map.bonds(s).get(0).getOther(s);\n                    IAtom q = map.bonds(s).get(1).getOther(s);\n                    sParent = s;\n                    s = visited.add(p) ? p : visited.add(q) ? q : null;\n                    size++;\n                }\n\n                // expand from 'r'\n                while (e != null && map.cumulated(e)) {\n                    IAtom p = map.bonds(e).get(0).getOther(e);\n                    IAtom q = map.bonds(e).get(1).getOther(e);\n                    eParent = e;\n                    e = visited.add(p) ? p : visited.add(q) ? q : null;\n                    size++;\n                }\n\n                // s and e are null if we had a cumulative cycle...\n                if (s != null && e != null) {\n\n                    // system has now be expanded, size is the number of double\n                    // bonds. For odd numbers we use E/Z whilst for even are\n                    // axial M/P.\n                    //  \\           /\n                    //   s = = = = e\n                    //  /           \\\n                    if (isOdd(size)) {\n                        StereoEncoder encoder = GeometricDoubleBondEncoderFactory.newEncoder(container, s, sParent, e,\n                                eParent, graph);\n                        if (encoder != null) {\n                            encoders.add(encoder);\n                        }\n                    } else {\n                        StereoEncoder encoder = axialEncoder(container, s, e);\n                        if (encoder != null) {\n                            encoders.add(encoder);\n                        }\n                    }\n                }\n            }\n        }\n\n        return encoders.isEmpty() ? StereoEncoder.EMPTY : new MultiStereoEncoder(encoders);\n    }", "signature": "StereoEncoder create(IAtomContainer container, int[][] graph)", "full_signature": "@Override public StereoEncoder create(IAtomContainer container, int[][] graph)", "class_method_signature": "GeometricCumulativeDoubleBondFactory.create(IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false, "invocations": ["getAtomCount", "bonds", "isDoubleBond", "add", "atoms", "bonds", "size", "getOther", "get", "getOther", "get", "add", "add", "add", "cumulated", "getOther", "get", "bonds", "getOther", "get", "bonds", "add", "add", "cumulated", "getOther", "get", "bonds", "getOther", "get", "bonds", "add", "add", "isOdd", "newEncoder", "add", "axialEncoder", "add", "isEmpty"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}