{"test_class": {"identifier": "SimulationRunMetadataBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/runner/SimulationRunMetadataBuilderTest.java"}, "test_case": {"identifier": "build", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void build() {\n        ScenarioWithIndex scenarioWithIndex1 = new ScenarioWithIndex(1, new Scenario());\n\n        ScenarioResultMetadata result1 = new ScenarioResultMetadata(scenarioWithIndex1);\n        result1.addExecuted(\"d1\");\n        result1.addExecuted(\"d2\");\n        result1.addAvailable(\"d1\");\n        result1.addAvailable(\"d2\");\n        result1.addAvailable(\"d3\");\n\n        List<DMNMessage> messagesResult1decision1 = getRandomlyGeneratedDMNMessageList();\n        List<DMNMessage> messagesResult1decision2 = getRandomlyGeneratedDMNMessageList();\n\n        Map<Integer, List<String>> expectedResult1Decision1 = fillAuditMessagesForDecision(result1, messagesResult1decision1, \"d1\");\n        Map<Integer, List<String>> expectedResult1Decision2 = fillAuditMessagesForDecision(result1, messagesResult1decision2, \"d2\");\n\n        ScenarioResultMetadata result2 = new ScenarioResultMetadata(new ScenarioWithIndex(2, new Scenario()));\n        List<String> expectedDecisionsResult2 = Arrays.asList(\"d1\", \"d3\");\n        result2.addExecuted(expectedDecisionsResult2.get(0));\n        result2.addExecuted(expectedDecisionsResult2.get(1));\n        result2.addAvailable(\"d1\");\n        result2.addAvailable(\"d2\");\n        result2.addAvailable(\"d3\");\n\n        List<DMNMessage> messagesResult2decision1 = getRandomlyGeneratedDMNMessageList();\n        List<DMNMessage> messagesResult2decision3 = getRandomlyGeneratedDMNMessageList();\n\n        Map<Integer, List<String>> expectedResult2Decision1 = fillAuditMessagesForDecision(result1, messagesResult2decision1, \"d1\");\n        Map<Integer, List<String>> expectedResult2Decision3 = fillAuditMessagesForDecision(result1, messagesResult2decision3, \"d3\");\n\n        SimulationRunMetadataBuilder builder = SimulationRunMetadataBuilder.create();\n        builder.addScenarioResultMetadata(result1);\n        builder.addScenarioResultMetadata(result2);\n        SimulationRunMetadata build = builder.build();\n\n        assertEquals(3, build.getAvailable());\n        assertEquals(3, build.getExecuted());\n        assertEquals(100, build.getCoveragePercentage(), 0.1);\n        assertEquals(2, build.getOutputCounter().get(\"d1\"), 0.1);\n        assertEquals(1, build.getOutputCounter().get(\"d2\"), 0.1);\n        assertEquals(2, build.getScenarioCounter().get(scenarioWithIndex1).size(), 0.1);\n        AuditLog retrieved = build.getAuditLog();\n        assertNotNull(retrieved);\n        final List<AuditLogLine> auditLogLines = retrieved.getAuditLogLines();\n        assertNotNull(auditLogLines);\n        assertEquals(auditLogLines.size(), messagesResult1decision1.size() + messagesResult1decision2.size() + messagesResult2decision1.size() + messagesResult2decision3.size());\n\n        checkAuditLogLine(auditLogLines, expectedResult1Decision1, expectedResult1Decision2, expectedResult2Decision1, expectedResult2Decision3);\n    }", "signature": "void build()", "full_signature": "@Test public void build()", "class_method_signature": "SimulationRunMetadataBuilderTest.build()", "testcase": true, "constructor": false, "invocations": ["addExecuted", "addExecuted", "addAvailable", "addAvailable", "addAvailable", "getRandomlyGeneratedDMNMessageList", "getRandomlyGeneratedDMNMessageList", "fillAuditMessagesForDecision", "fillAuditMessagesForDecision", "asList", "addExecuted", "get", "addExecuted", "get", "addAvailable", "addAvailable", "addAvailable", "getRandomlyGeneratedDMNMessageList", "getRandomlyGeneratedDMNMessageList", "fillAuditMessagesForDecision", "fillAuditMessagesForDecision", "create", "addScenarioResultMetadata", "addScenarioResultMetadata", "build", "assertEquals", "getAvailable", "assertEquals", "getExecuted", "assertEquals", "getCoveragePercentage", "assertEquals", "get", "getOutputCounter", "assertEquals", "get", "getOutputCounter", "assertEquals", "size", "get", "getScenarioCounter", "getAuditLog", "assertNotNull", "getAuditLogLines", "assertNotNull", "assertEquals", "size", "size", "size", "size", "size", "checkAuditLogLine"]}, "focal_class": {"identifier": "SimulationRunMetadataBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected List<ScenarioResultMetadata> scenarioResultMetadata = new ArrayList<>();", "modifier": "protected", "type": "List<ScenarioResultMetadata>", "declarator": "scenarioResultMetadata = new ArrayList<>()", "var_name": "scenarioResultMetadata"}], "methods": [{"identifier": "SimulationRunMetadataBuilder", "parameters": "()", "modifiers": "private", "return": "", "signature": " SimulationRunMetadataBuilder()", "full_signature": "private  SimulationRunMetadataBuilder()", "class_method_signature": "SimulationRunMetadataBuilder.SimulationRunMetadataBuilder()", "testcase": false, "constructor": true}, {"identifier": "addScenarioResultMetadata", "parameters": "(ScenarioResultMetadata scenarioResultMetadata)", "modifiers": "public", "return": "SimulationRunMetadataBuilder", "signature": "SimulationRunMetadataBuilder addScenarioResultMetadata(ScenarioResultMetadata scenarioResultMetadata)", "full_signature": "public SimulationRunMetadataBuilder addScenarioResultMetadata(ScenarioResultMetadata scenarioResultMetadata)", "class_method_signature": "SimulationRunMetadataBuilder.addScenarioResultMetadata(ScenarioResultMetadata scenarioResultMetadata)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "SimulationRunMetadata", "signature": "SimulationRunMetadata build()", "full_signature": "public SimulationRunMetadata build()", "class_method_signature": "SimulationRunMetadataBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "SimulationRunMetadataBuilder", "signature": "SimulationRunMetadataBuilder create()", "full_signature": "public static SimulationRunMetadataBuilder create()", "class_method_signature": "SimulationRunMetadataBuilder.create()", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/runner/SimulationRunMetadataBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "SimulationRunMetadata", "body": "public SimulationRunMetadata build() {\n        int available = 0;\n        Map<String, Integer> outputCounter = new HashMap<>();\n        Map<ScenarioWithIndex, Map<String, Integer>> scenarioCounter = new HashMap<>();\n        AuditLog auditLog = new AuditLog();\n        for (ScenarioResultMetadata scenarioResultMetadatum : scenarioResultMetadata) {\n            // this value is the same for all the scenarios\n            available = scenarioResultMetadatum.getAvailable().size();\n            scenarioResultMetadatum.getExecutedWithCounter()\n                    .forEach((name, counter) -> outputCounter.compute(name,\n                                                                      (key, number) -> number == null ? counter : number + counter));\n        }\n\n        for (ScenarioResultMetadata scenarioResultMetadatum : scenarioResultMetadata) {\n            scenarioCounter.put(scenarioResultMetadatum.getScenarioWithIndex(),\n                                scenarioResultMetadatum.getExecutedWithCounter());\n            auditLog.addAuditLogLines(scenarioResultMetadatum.getAuditLogLines());\n        }\n        return new SimulationRunMetadata(available, outputCounter.keySet().size(), outputCounter, scenarioCounter, auditLog);\n    }", "signature": "SimulationRunMetadata build()", "full_signature": "public SimulationRunMetadata build()", "class_method_signature": "SimulationRunMetadataBuilder.build()", "testcase": false, "constructor": false, "invocations": ["size", "getAvailable", "forEach", "getExecutedWithCounter", "compute", "put", "getScenarioWithIndex", "getExecutedWithCounter", "addAuditLogLines", "getAuditLogLines", "size", "keySet"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}