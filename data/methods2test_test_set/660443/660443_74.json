{"test_class": {"identifier": "AtomContainerDiffTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "misc/diff/src/test/java/org/openscience/cdk/tools/diff/AtomContainerDiffTest.java"}, "test_case": {"identifier": "testDifference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDifference() {\n        IAtom carbon = mock(IAtom.class);\n        IAtom oxygen = mock(IAtom.class);\n\n        when(carbon.getSymbol()).thenReturn(\"C\");\n        when(oxygen.getSymbol()).thenReturn(\"O\");\n\n        IBond b1 = mock(IBond.class);\n        IBond b2 = mock(IBond.class);\n\n        when(b1.getOrder()).thenReturn(IBond.Order.SINGLE);\n        when(b2.getOrder()).thenReturn(IBond.Order.DOUBLE);\n\n        when(b1.getAtomCount()).thenReturn(2);\n        when(b2.getAtomCount()).thenReturn(2);\n\n        when(b1.getBegin()).thenReturn(carbon);\n        when(b1.getEnd()).thenReturn(carbon);\n        when(b2.getBegin()).thenReturn(carbon);\n        when(b2.getEnd()).thenReturn(oxygen);\n\n        IAtomContainer container1 = mock(IAtomContainer.class);\n        IAtomContainer container2 = mock(IAtomContainer.class);\n        when(container1.getElectronContainerCount()).thenReturn(1);\n        when(container2.getElectronContainerCount()).thenReturn(1);\n        when(container1.getElectronContainer(0)).thenReturn(b1);\n        when(container2.getElectronContainer(0)).thenReturn(b2);\n\n        String result = AtomContainerDiff.diff(container1, container2);\n        Assert.assertNotNull(result);\n    }", "signature": "void testDifference()", "full_signature": "@Test public void testDifference()", "class_method_signature": "AtomContainerDiffTest.testDifference()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getSymbol", "thenReturn", "when", "getSymbol", "mock", "mock", "thenReturn", "when", "getOrder", "thenReturn", "when", "getOrder", "thenReturn", "when", "getAtomCount", "thenReturn", "when", "getAtomCount", "thenReturn", "when", "getBegin", "thenReturn", "when", "getEnd", "thenReturn", "when", "getBegin", "thenReturn", "when", "getEnd", "mock", "mock", "thenReturn", "when", "getElectronContainerCount", "thenReturn", "when", "getElectronContainerCount", "thenReturn", "when", "getElectronContainer", "thenReturn", "when", "getElectronContainer", "diff", "assertNotNull"]}, "focal_class": {"identifier": "AtomContainerDiff", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "AtomContainerDiff", "parameters": "()", "modifiers": "private", "return": "", "signature": " AtomContainerDiff()", "full_signature": "private  AtomContainerDiff()", "class_method_signature": "AtomContainerDiff.AtomContainerDiff()", "testcase": false, "constructor": true}, {"identifier": "diff", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "String", "signature": "String diff(IChemObject first, IChemObject second)", "full_signature": "public static String diff(IChemObject first, IChemObject second)", "class_method_signature": "AtomContainerDiff.diff(IChemObject first, IChemObject second)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "IDifference", "signature": "IDifference difference(IChemObject first, IChemObject second)", "full_signature": "public static IDifference difference(IChemObject first, IChemObject second)", "class_method_signature": "AtomContainerDiff.difference(IChemObject first, IChemObject second)", "testcase": false, "constructor": false}], "file": "misc/diff/src/main/java/org/openscience/cdk/tools/diff/AtomContainerDiff.java"}, "focal_method": {"identifier": "difference", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "IDifference", "body": "public static IDifference difference(IChemObject first, IChemObject second) {\n        if (!(first instanceof IAtomContainer && second instanceof IAtomContainer)) {\n            return null;\n        }\n        IAtomContainer firstAC = (IAtomContainer) first;\n        IAtomContainer secondAC = (IAtomContainer) second;\n        ChemObjectDifference totalDiff = new ChemObjectDifference(\"AtomContainerDiff\");\n        totalDiff.addChild(IntegerDifference.construct(\"atomCount\", firstAC.getAtomCount(), secondAC.getAtomCount()));\n        if (firstAC.getAtomCount() == secondAC.getAtomCount()) {\n            for (int i = 0; i < firstAC.getAtomCount(); i++) {\n                totalDiff.addChild(AtomDiff.difference(firstAC.getAtom(i), secondAC.getAtom(i)));\n            }\n        }\n        totalDiff.addChild(IntegerDifference.construct(\"electronContainerCount\", firstAC.getElectronContainerCount(),\n                secondAC.getElectronContainerCount()));\n        if (firstAC.getElectronContainerCount() == secondAC.getElectronContainerCount()) {\n            for (int i = 0; i < firstAC.getElectronContainerCount(); i++) {\n                if (firstAC.getElectronContainer(i) instanceof IBond\n                        && secondAC.getElectronContainer(i) instanceof IBond) {\n                    totalDiff.addChild(BondDiff.difference(firstAC.getElectronContainer(i),\n                            secondAC.getElectronContainer(i)));\n                } else if (firstAC.getElectronContainer(i) instanceof ILonePair\n                        && secondAC.getElectronContainer(i) instanceof ILonePair) {\n                    totalDiff.addChild(LonePairDiff.difference(firstAC.getElectronContainer(i),\n                            secondAC.getElectronContainer(i)));\n                } else if (firstAC.getElectronContainer(i) instanceof ISingleElectron\n                        && secondAC.getElectronContainer(i) instanceof ISingleElectron) {\n                    totalDiff.addChild(SingleElectronDiff.difference(firstAC.getElectronContainer(i),\n                            secondAC.getElectronContainer(i)));\n                } else {\n                    totalDiff.addChild(ElectronContainerDiff.difference(firstAC.getElectronContainer(i),\n                            secondAC.getElectronContainer(i)));\n                }\n            }\n        }\n        totalDiff.addChild(ChemObjectDiff.difference(first, second));\n        if (totalDiff.childCount() > 0) {\n            return totalDiff;\n        } else {\n            return null;\n        }\n    }", "signature": "IDifference difference(IChemObject first, IChemObject second)", "full_signature": "public static IDifference difference(IChemObject first, IChemObject second)", "class_method_signature": "AtomContainerDiff.difference(IChemObject first, IChemObject second)", "testcase": false, "constructor": false, "invocations": ["addChild", "construct", "getAtomCount", "getAtomCount", "getAtomCount", "getAtomCount", "getAtomCount", "addChild", "difference", "getAtom", "getAtom", "addChild", "construct", "getElectronContainerCount", "getElectronContainerCount", "getElectronContainerCount", "getElectronContainerCount", "getElectronContainerCount", "getElectronContainer", "getElectronContainer", "addChild", "difference", "getElectronContainer", "getElectronContainer", "getElectronContainer", "getElectronContainer", "addChild", "difference", "getElectronContainer", "getElectronContainer", "getElectronContainer", "getElectronContainer", "addChild", "difference", "getElectronContainer", "getElectronContainer", "addChild", "difference", "getElectronContainer", "getElectronContainer", "addChild", "difference", "childCount"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}