{"test_class": {"identifier": "DivisorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private IGameContext mockGameContext;", "modifier": "@Mock\n    private", "type": "IGameContext", "declarator": "mockGameContext", "var_name": "mockGameContext"}, {"original_string": "@Mock\n    private Configuration mockConfiguration;", "modifier": "@Mock\n    private", "type": "Configuration", "declarator": "mockConfiguration", "var_name": "mockConfiguration"}, {"original_string": "@Mock\n    private GamePanelDimensionProvider mockProvider;", "modifier": "@Mock\n    private", "type": "GamePanelDimensionProvider", "declarator": "mockProvider", "var_name": "mockProvider"}, {"original_string": "@Mock\n    private BackgroundStyle mockBackgroundStyle;", "modifier": "@Mock\n    private", "type": "BackgroundStyle", "declarator": "mockBackgroundStyle", "var_name": "mockBackgroundStyle"}, {"original_string": "@Mock\n    private Stats mockStats;", "modifier": "@Mock\n    private", "type": "Stats", "declarator": "mockStats", "var_name": "mockStats"}, {"original_string": "private ObservableList<Node> children = FXCollections.observableArrayList();", "modifier": "private", "type": "ObservableList<Node>", "declarator": "children = FXCollections.observableArrayList()", "var_name": "children"}, {"original_string": "private final String sep = File.separator;", "modifier": "private final", "type": "String", "declarator": "sep = File.separator", "var_name": "sep"}, {"original_string": "private final String localDataFolder =\n        System.getProperty(\"user.dir\") + sep\n            + \"src\" + sep\n            + \"test\" + sep\n            + \"resources\" + sep;", "modifier": "private final", "type": "String", "declarator": "localDataFolder =\n        System.getProperty(\"user.dir\") + sep\n            + \"src\" + sep\n            + \"test\" + sep\n            + \"resources\" + sep", "var_name": "localDataFolder"}], "file": "gazeplay-games/src/test/java/net/gazeplay/games/divisor/DivisorTest.java"}, "test_case": {"identifier": "shouldLaunchDefault", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldLaunchDefault() {\n        new MockUp<Utils>() {\n            @mockit.Mock\n            public File getImagesSubdirectory(String dir) {\n                return new File(\"wrong/path\");\n            }\n        };\n\n        Divisor divisor = new Divisor(mockGameContext, mockStats, false);\n\n        divisor.launch();\n\n        assertEquals(1, children.size());\n\n        Target target = (Target) children.get(0);\n        assertTrue(target.getImgLib().pickRandomImage().getUrl().contains(\"common/default/images\"));\n    }", "signature": "void shouldLaunchDefault()", "full_signature": "@Test void shouldLaunchDefault()", "class_method_signature": "DivisorTest.shouldLaunchDefault()", "testcase": true, "constructor": false, "invocations": ["launch", "assertEquals", "size", "get", "assertTrue", "contains", "getUrl", "pickRandomImage", "getImgLib"]}, "focal_class": {"identifier": "Divisor", "superclass": "", "interfaces": "implements GameLifeCycle", "fields": [{"original_string": "private final IGameContext gameContext;", "modifier": "private final", "type": "IGameContext", "declarator": "gameContext", "var_name": "gameContext"}, {"original_string": "private final Stats stats;", "modifier": "private final", "type": "Stats", "declarator": "stats", "var_name": "stats"}, {"original_string": "private final boolean isRabbit;", "modifier": "private final", "type": "boolean", "declarator": "isRabbit", "var_name": "isRabbit"}], "methods": [{"identifier": "Divisor", "parameters": "(final IGameContext gameContext, final Stats stats, final boolean isRabbit)", "modifiers": "public", "return": "", "signature": " Divisor(final IGameContext gameContext, final Stats stats, final boolean isRabbit)", "full_signature": "public  Divisor(final IGameContext gameContext, final Stats stats, final boolean isRabbit)", "class_method_signature": "Divisor.Divisor(final IGameContext gameContext, final Stats stats, final boolean isRabbit)", "testcase": false, "constructor": true}, {"identifier": "launch", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void launch()", "full_signature": "@Override public void launch()", "class_method_signature": "Divisor.launch()", "testcase": false, "constructor": false}, {"identifier": "initBackground", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initBackground()", "full_signature": "private void initBackground()", "class_method_signature": "Divisor.initBackground()", "testcase": false, "constructor": false}, {"identifier": "restart", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void restart()", "full_signature": "public void restart()", "class_method_signature": "Divisor.restart()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "Divisor.dispose()", "testcase": false, "constructor": false}], "file": "gazeplay-games/src/main/java/net/gazeplay/games/divisor/Divisor.java"}, "focal_method": {"identifier": "launch", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void launch() {\n        gameContext.setLimiterAvailable();\n        final Target target;\n        final ImageLibrary imageLibrary;\n\n\n        if (isRabbit) {\n            imageLibrary = ImageUtils.createCustomizedImageLibrary(null, \"divisor/rabbit/images\");\n            initBackground();\n            gameContext.resetBordersToFront();\n        } else {\n            imageLibrary = ImageUtils.createImageLibrary(Utils.getImagesSubdirectory(\"portraits\"));\n        }\n\n        this.stats.notifyNewRoundReady();\n        gameContext.getGazeDeviceManager().addStats(stats);\n        stats.incrementNumberOfGoalsToReach(15);\n\n         target = new Target(gameContext, stats, imageLibrary, 0,System.currentTimeMillis(), this,\n            this.gameContext.getRandomPositionGenerator().newRandomPosition(100), isRabbit);\n\n        gameContext.getChildren().add(target);\n        gameContext.firstStart();\n    }", "signature": "void launch()", "full_signature": "@Override public void launch()", "class_method_signature": "Divisor.launch()", "testcase": false, "constructor": false, "invocations": ["setLimiterAvailable", "createCustomizedImageLibrary", "initBackground", "resetBordersToFront", "createImageLibrary", "getImagesSubdirectory", "notifyNewRoundReady", "addStats", "getGazeDeviceManager", "incrementNumberOfGoalsToReach", "currentTimeMillis", "newRandomPosition", "getRandomPositionGenerator", "add", "getChildren", "firstStart"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}