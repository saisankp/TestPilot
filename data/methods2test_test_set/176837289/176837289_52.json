{"test_class": {"identifier": "CloudDatastoreCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static CloudDatastoreCache cache;", "modifier": "private static", "type": "CloudDatastoreCache", "declarator": "cache", "var_name": "cache"}], "file": "code/extensions/caching/cloud-datastore/src/test/java/com/google/cloud/broker/caching/remote/CloudDatastoreCacheTest.java"}, "test_case": {"identifier": "testSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSet() {\n        // Check that the key doesn't exist\n        Datastore datastore = getService();\n        KeyFactory keyFactory = datastore.newKeyFactory().setKind(CACHE_KIND);\n        Key datastoreKey = keyFactory.newKey(\"test\");\n        Entity entity = datastore.get(datastoreKey);\n        assertNull(entity);\n\n        // Let the backend set the key/value\n        cache.set(\"test\", \"abcd\".getBytes());\n\n        // Check that the key/value was correctly set\n        entity = datastore.get(datastoreKey);\n        assertArrayEquals(\"abcd\".getBytes(), entity.getBlob(CACHE_VALUE_FIELD).toByteArray());\n    }", "signature": "void testSet()", "full_signature": "@Test public void testSet()", "class_method_signature": "CloudDatastoreCacheTest.testSet()", "testcase": true, "constructor": false, "invocations": ["getService", "setKind", "newKeyFactory", "newKey", "get", "assertNull", "set", "getBytes", "get", "assertArrayEquals", "getBytes", "toByteArray", "getBlob"]}, "focal_class": {"identifier": "CloudDatastoreCache", "superclass": "extends AbstractRemoteCache", "interfaces": "", "fields": [{"original_string": "public final static String CACHE_KIND = \"Cache\";", "modifier": "public final static", "type": "String", "declarator": "CACHE_KIND = \"Cache\"", "var_name": "CACHE_KIND"}, {"original_string": "public final static String CACHE_VALUE_FIELD = \"value\";", "modifier": "public final static", "type": "String", "declarator": "CACHE_VALUE_FIELD = \"value\"", "var_name": "CACHE_VALUE_FIELD"}, {"original_string": "public final static String CACHE_EXPIRY_FIELD = \"expiry\";", "modifier": "public final static", "type": "String", "declarator": "CACHE_EXPIRY_FIELD = \"expiry\"", "var_name": "CACHE_EXPIRY_FIELD"}], "methods": [{"identifier": "getService", "parameters": "()", "modifiers": "private static", "return": "Datastore", "signature": "Datastore getService()", "full_signature": "private static Datastore getService()", "class_method_signature": "CloudDatastoreCache.getService()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] get(String key)", "full_signature": "@Override public byte[] get(String key)", "class_method_signature": "CloudDatastoreCache.get(String key)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String key, byte[] value)", "modifiers": "@Override public", "return": "void", "signature": "void set(String key, byte[] value)", "full_signature": "@Override public void set(String key, byte[] value)", "class_method_signature": "CloudDatastoreCache.set(String key, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String key, byte[] value, int expireIn)", "modifiers": "@Override public", "return": "void", "signature": "void set(String key, byte[] value, int expireIn)", "full_signature": "@Override public void set(String key, byte[] value, int expireIn)", "class_method_signature": "CloudDatastoreCache.set(String key, byte[] value, int expireIn)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String key)", "modifiers": "@Override public", "return": "void", "signature": "void delete(String key)", "full_signature": "@Override public void delete(String key)", "class_method_signature": "CloudDatastoreCache.delete(String key)", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredItems", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int deleteExpiredItems()", "full_signature": "public int deleteExpiredItems()", "class_method_signature": "CloudDatastoreCache.deleteExpiredItems()", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredItems", "parameters": "(Integer limit)", "modifiers": "public", "return": "int", "signature": "int deleteExpiredItems(Integer limit)", "full_signature": "public int deleteExpiredItems(Integer limit)", "class_method_signature": "CloudDatastoreCache.deleteExpiredItems(Integer limit)", "testcase": false, "constructor": false}, {"identifier": "acquireLock", "parameters": "(String lockName)", "modifiers": "@Override public", "return": "Lock", "signature": "Lock acquireLock(String lockName)", "full_signature": "@Override public Lock acquireLock(String lockName)", "class_method_signature": "CloudDatastoreCache.acquireLock(String lockName)", "testcase": false, "constructor": false}, {"identifier": "checkConnection", "parameters": "()", "modifiers": "@Override public", "return": "CheckResult", "signature": "CheckResult checkConnection()", "full_signature": "@Override public CheckResult checkConnection()", "class_method_signature": "CloudDatastoreCache.checkConnection()", "testcase": false, "constructor": false}], "file": "code/extensions/caching/cloud-datastore/src/main/java/com/google/cloud/broker/caching/remote/CloudDatastoreCache.java"}, "focal_method": {"identifier": "set", "parameters": "(String key, byte[] value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void set(String key, byte[] value) {\n        set(key, value, 0);\n    }", "signature": "void set(String key, byte[] value)", "full_signature": "@Override public void set(String key, byte[] value)", "class_method_signature": "CloudDatastoreCache.set(String key, byte[] value)", "testcase": false, "constructor": false, "invocations": ["set"]}, "repository": {"repo_id": 176837289, "url": "https://github.com/GoogleCloudPlatform/gcp-token-broker", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 27, "size": 1700, "license": "licensed"}}