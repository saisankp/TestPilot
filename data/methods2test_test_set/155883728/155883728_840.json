{"test_class": {"identifier": "JcrPropertiesTest", "superclass": "extends ProgressCheckTestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/checks/JcrPropertiesTest.java"}, "test_case": {"identifier": "testRequireType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRequireType() throws Exception {\n        TestUtil.testBlock(() -> {\n            ProgressCheck check = new JcrProperties().newInstance(obj()\n                    .key(\"properties\", arr()\n                            .and(key(\"name\", \"double_nan\").key(\"requireType\", \"Double\"))\n                            .and(key(\"name\", \"double_neg_inf\").key(\"requireType\", \"Double\"))\n                    )\n                    .get());\n            CheckReport report = scanWithCheck(check, \"double_properties.zip\");\n            Assert.assertEquals(\"no violations: \" + report.getViolations(), 0, report.getViolations().size());\n            assertTrue(\"all violations have packageIds\", report.getViolations().stream()\n                    .allMatch(viol -> !viol.getPackages().isEmpty()));\n        });\n        TestUtil.testBlock(() -> {\n            ProgressCheck check = new JcrProperties().newInstance(obj()\n                    .key(\"properties\", arr()\n                            .and(key(\"name\", \"double_nan\").key(\"requireType\", \"String\"))\n                            .and(key(\"name\", \"double_neg_inf\").key(\"requireType\", \"String\"))\n                    )\n                    .get());\n            CheckReport report = scanWithCheck(check, \"double_properties.zip\");\n            Assert.assertEquals(\"two violations: \" + report.getViolations(), 2, report.getViolations().size());\n            assertTrue(\"all violations have packageIds\", report.getViolations().stream()\n                    .allMatch(viol -> !viol.getPackages().isEmpty()));\n        });\n    }", "signature": "void testRequireType()", "full_signature": "@Test public void testRequireType()", "class_method_signature": "JcrPropertiesTest.testRequireType()", "testcase": true, "constructor": false, "invocations": ["testBlock", "newInstance", "get", "key", "obj", "and", "and", "arr", "key", "key", "key", "key", "scanWithCheck", "assertEquals", "getViolations", "size", "getViolations", "assertTrue", "allMatch", "stream", "getViolations", "isEmpty", "getPackages", "testBlock", "newInstance", "get", "key", "obj", "and", "and", "arr", "key", "key", "key", "key", "scanWithCheck", "assertEquals", "getViolations", "size", "getViolations", "assertTrue", "allMatch", "stream", "getViolations", "isEmpty", "getPackages"]}, "focal_class": {"identifier": "JcrProperties", "superclass": "", "interfaces": "implements ProgressCheckFactory", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String scopePaths() {\n            return \"scopePaths\";\n        }\n\n        @Override\n        public String denyNodeTypes() {\n            return \"denyNodeTypes\";\n        }\n\n        @Override\n        public String scopeNodeTypes() {\n            return \"scopeNodeTypes\";\n        }\n\n        @Override\n        public String properties() {\n            return \"properties\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String scopePaths() {\n            return \"scopePaths\";\n        }\n\n        @Override\n        public String denyNodeTypes() {\n            return \"denyNodeTypes\";\n        }\n\n        @Override\n        public String scopeNodeTypes() {\n            return \"scopeNodeTypes\";\n        }\n\n        @Override\n        public String properties() {\n            return \"properties\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_SCOPE_PATHS = keys().scopePaths();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_SCOPE_PATHS = keys().scopePaths()", "var_name": "CONFIG_SCOPE_PATHS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_DENY_NODE_TYPES = keys().denyNodeTypes();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_DENY_NODE_TYPES = keys().denyNodeTypes()", "var_name": "CONFIG_DENY_NODE_TYPES"}, {"original_string": "@Deprecated\n    public static final String CONFIG_SCOPE_NODE_TYPES = keys().scopeNodeTypes();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_SCOPE_NODE_TYPES = keys().scopeNodeTypes()", "var_name": "CONFIG_SCOPE_NODE_TYPES"}, {"original_string": "@Deprecated\n    public static final String CONFIG_PROPERTIES = keys().properties();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_PROPERTIES = keys().properties()", "var_name": "CONFIG_PROPERTIES"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "JsonKeys", "signature": "JsonKeys keys()", "full_signature": "@NotNull public static JsonKeys keys()", "class_method_signature": "JcrProperties.keys()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "JcrProperties.newInstance(final JsonObject config)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/checks/JcrProperties.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "body": "@Override\n    public ProgressCheck newInstance(final JsonObject config) {\n        List<Rule> pathScope = Rules.fromJsonArray(arrayOrEmpty(config, keys().scopePaths()));\n\n        List<String> denyNodeTypes = mapArrayOfStrings(arrayOrEmpty(config, keys().denyNodeTypes()));\n        List<String> nodeTypeScope = mapArrayOfStrings(arrayOrEmpty(config, keys().scopeNodeTypes()));\n        final ResourceBundleHolder resourceBundleHolder = new ResourceBundleHolder();\n        List<JcrPropertyConstraints> propertyChecks = JcrPropertyConstraints\n                .fromJsonArray(resourceBundleHolder::getResourceBundle, arrayOrEmpty(config, keys().properties()));\n        return new Check(pathScope, denyNodeTypes, nodeTypeScope, propertyChecks, resourceBundleHolder);\n    }", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "JcrProperties.newInstance(final JsonObject config)", "testcase": false, "constructor": false, "invocations": ["fromJsonArray", "arrayOrEmpty", "scopePaths", "keys", "mapArrayOfStrings", "arrayOrEmpty", "denyNodeTypes", "keys", "mapArrayOfStrings", "arrayOrEmpty", "scopeNodeTypes", "keys", "fromJsonArray", "arrayOrEmpty", "properties", "keys"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}