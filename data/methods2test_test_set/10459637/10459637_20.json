{"test_class": {"identifier": "ICMPTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] pktSerialized = new byte[] {\n            // (byte) 0xc8, 0x2a, 0x14, 0x2d, 0x35, (byte) 0xf1,\n            // 0x00, 0x0c, 0x29, 0x3b, (byte) 0x95, (byte) 0xf2, 0x08, 0x0,\n            0x45, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x40, 0x00, 0x40, 0x01,\n            (byte) 0xa3, (byte) 0xcb,\n            (byte) 0xc0, (byte) 0xa8, (byte) 0x0a, (byte) 0xe7,\n            (byte) 0xc0, (byte) 0xa8, (byte) 0x0a, (byte) 0xdb,\n            0x08, 0x00, 0x7f, 0x0a, 0x76, (byte) 0xf2, 0x00, 0x02,\n            0x01, 0x01, 0x01 };", "modifier": "private", "type": "byte[]", "declarator": "pktSerialized = new byte[] {\n            // (byte) 0xc8, 0x2a, 0x14, 0x2d, 0x35, (byte) 0xf1,\n            // 0x00, 0x0c, 0x29, 0x3b, (byte) 0x95, (byte) 0xf2, 0x08, 0x0,\n            0x45, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x40, 0x00, 0x40, 0x01,\n            (byte) 0xa3, (byte) 0xcb,\n            (byte) 0xc0, (byte) 0xa8, (byte) 0x0a, (byte) 0xe7,\n            (byte) 0xc0, (byte) 0xa8, (byte) 0x0a, (byte) 0xdb,\n            0x08, 0x00, 0x7f, 0x0a, 0x76, (byte) 0xf2, 0x00, 0x02,\n            0x01, 0x01, 0x01 }", "var_name": "pktSerialized"}], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/packet/ICMPTest.java"}, "test_case": {"identifier": "testDeserialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeserialize() {\n        IPacket packet = new IPv4();\n        packet.deserialize(pktSerialized, 0, pktSerialized.length);\n        byte[] pktSerialized1 = packet.serialize();\n        assertTrue(Arrays.equals(pktSerialized, pktSerialized1));\n    }", "signature": "void testDeserialize()", "full_signature": "@Test public void testDeserialize()", "class_method_signature": "ICMPTest.testDeserialize()", "testcase": true, "constructor": false, "invocations": ["deserialize", "serialize", "assertTrue", "equals"]}, "focal_class": {"identifier": "ICMP", "superclass": "extends BasePacket", "interfaces": "", "fields": [{"original_string": "protected byte icmpType;", "modifier": "protected", "type": "byte", "declarator": "icmpType", "var_name": "icmpType"}, {"original_string": "protected byte icmpCode;", "modifier": "protected", "type": "byte", "declarator": "icmpCode", "var_name": "icmpCode"}, {"original_string": "protected short checksum;", "modifier": "protected", "type": "short", "declarator": "checksum", "var_name": "checksum"}], "methods": [{"identifier": "getIcmpType", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getIcmpType()", "full_signature": "public byte getIcmpType()", "class_method_signature": "ICMP.getIcmpType()", "testcase": false, "constructor": false}, {"identifier": "setIcmpType", "parameters": "(byte icmpType)", "modifiers": "public", "return": "ICMP", "signature": "ICMP setIcmpType(byte icmpType)", "full_signature": "public ICMP setIcmpType(byte icmpType)", "class_method_signature": "ICMP.setIcmpType(byte icmpType)", "testcase": false, "constructor": false}, {"identifier": "getIcmpCode", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getIcmpCode()", "full_signature": "public byte getIcmpCode()", "class_method_signature": "ICMP.getIcmpCode()", "testcase": false, "constructor": false}, {"identifier": "setIcmpCode", "parameters": "(byte icmpCode)", "modifiers": "public", "return": "ICMP", "signature": "ICMP setIcmpCode(byte icmpCode)", "full_signature": "public ICMP setIcmpCode(byte icmpCode)", "class_method_signature": "ICMP.setIcmpCode(byte icmpCode)", "testcase": false, "constructor": false}, {"identifier": "getChecksum", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getChecksum()", "full_signature": "public short getChecksum()", "class_method_signature": "ICMP.getChecksum()", "testcase": false, "constructor": false}, {"identifier": "setChecksum", "parameters": "(short checksum)", "modifiers": "public", "return": "ICMP", "signature": "ICMP setChecksum(short checksum)", "full_signature": "public ICMP setChecksum(short checksum)", "class_method_signature": "ICMP.setChecksum(short checksum)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] serialize()", "full_signature": "public byte[] serialize()", "class_method_signature": "ICMP.serialize()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ICMP.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ICMP.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "ICMP.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/packet/ICMP.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "body": "@Override\n    public IPacket deserialize(byte[] data, int offset, int length) {\n        ByteBuffer bb = ByteBuffer.wrap(data, offset, length);\n        this.icmpType = bb.get();\n        this.icmpCode = bb.get();\n        this.checksum = bb.getShort();\n        \n        this.payload = new Data();\n        this.payload = payload.deserialize(data, bb.position(), bb.limit()-bb.position());\n        this.payload.setParent(this);\n        return this;\n    }", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "ICMP.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false, "invocations": ["wrap", "get", "get", "getShort", "deserialize", "position", "limit", "position", "setParent"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}