{"test_class": {"identifier": "CharBufferTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/uk/ac/ebi/beam/CharBufferTest.java"}, "test_case": {"identifier": "isDigit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void isDigit() {\n        for (char c = '0'; c <= '9'; c++)\n            assertTrue(CharBuffer.isDigit(c));\n        for (char c = 'a'; c <= 'z'; c++)\n            assertFalse(CharBuffer.isDigit(c));\n        for (char c = 'A'; c <= 'Z'; c++)\n            assertFalse(CharBuffer.isDigit(c));\n    }", "signature": "void isDigit()", "full_signature": "@Test public void isDigit()", "class_method_signature": "CharBufferTest.isDigit()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isDigit", "assertFalse", "isDigit", "assertFalse", "isDigit"]}, "focal_class": {"identifier": "CharBuffer", "superclass": "", "interfaces": "", "fields": [{"original_string": "public char[] cs;", "modifier": "public", "type": "char[]", "declarator": "cs", "var_name": "cs"}, {"original_string": "public int position;", "modifier": "public", "type": "int", "declarator": "position", "var_name": "position"}], "methods": [{"identifier": "CharBuffer", "parameters": "(char[] cs)", "modifiers": "private", "return": "", "signature": " CharBuffer(char[] cs)", "full_signature": "private  CharBuffer(char[] cs)", "class_method_signature": "CharBuffer.CharBuffer(char[] cs)", "testcase": false, "constructor": true}, {"identifier": "hasRemaining", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean hasRemaining()", "full_signature": " boolean hasRemaining()", "class_method_signature": "CharBuffer.hasRemaining()", "testcase": false, "constructor": false}, {"identifier": "position", "parameters": "()", "modifiers": "", "return": "int", "signature": "int position()", "full_signature": " int position()", "class_method_signature": "CharBuffer.position()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "", "return": "char", "signature": "char get()", "full_signature": " char get()", "class_method_signature": "CharBuffer.get()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "", "return": "char", "signature": "char next()", "full_signature": " char next()", "class_method_signature": "CharBuffer.next()", "testcase": false, "constructor": false}, {"identifier": "nextIsDigit", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean nextIsDigit()", "full_signature": " boolean nextIsDigit()", "class_method_signature": "CharBuffer.nextIsDigit()", "testcase": false, "constructor": false}, {"identifier": "getAsDigit", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getAsDigit()", "full_signature": " int getAsDigit()", "class_method_signature": "CharBuffer.getAsDigit()", "testcase": false, "constructor": false}, {"identifier": "nextAsDigit", "parameters": "()", "modifiers": "", "return": "int", "signature": "int nextAsDigit()", "full_signature": " int nextAsDigit()", "class_method_signature": "CharBuffer.nextAsDigit()", "testcase": false, "constructor": false}, {"identifier": "nextIs", "parameters": "(char c)", "modifiers": "", "return": "boolean", "signature": "boolean nextIs(char c)", "full_signature": " boolean nextIs(char c)", "class_method_signature": "CharBuffer.nextIs(char c)", "testcase": false, "constructor": false}, {"identifier": "getIf", "parameters": "(final char c)", "modifiers": "", "return": "boolean", "signature": "boolean getIf(final char c)", "full_signature": " boolean getIf(final char c)", "class_method_signature": "CharBuffer.getIf(final char c)", "testcase": false, "constructor": false}, {"identifier": "getNumber", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getNumber()", "full_signature": " int getNumber()", "class_method_signature": "CharBuffer.getNumber()", "testcase": false, "constructor": false}, {"identifier": "getNumber", "parameters": "(int nDigits)", "modifiers": "", "return": "int", "signature": "int getNumber(int nDigits)", "full_signature": " int getNumber(int nDigits)", "class_method_signature": "CharBuffer.getNumber(int nDigits)", "testcase": false, "constructor": false}, {"identifier": "substr", "parameters": "(int from, int to)", "modifiers": "", "return": "String", "signature": "String substr(int from, int to)", "full_signature": " String substr(int from, int to)", "class_method_signature": "CharBuffer.substr(int from, int to)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "", "return": "int", "signature": "int length()", "full_signature": " int length()", "class_method_signature": "CharBuffer.length()", "testcase": false, "constructor": false}, {"identifier": "isDigit", "parameters": "(char c)", "modifiers": "static", "return": "boolean", "signature": "boolean isDigit(char c)", "full_signature": "static boolean isDigit(char c)", "class_method_signature": "CharBuffer.isDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "toDigit", "parameters": "(char c)", "modifiers": "static", "return": "int", "signature": "int toDigit(char c)", "full_signature": "static int toDigit(char c)", "class_method_signature": "CharBuffer.toDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "fromString", "parameters": "(String str)", "modifiers": "static", "return": "CharBuffer", "signature": "CharBuffer fromString(String str)", "full_signature": "static CharBuffer fromString(String str)", "class_method_signature": "CharBuffer.fromString(String str)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CharBuffer.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/uk/ac/ebi/beam/CharBuffer.java"}, "focal_method": {"identifier": "isDigit", "parameters": "(char c)", "modifiers": "static", "return": "boolean", "body": "static boolean isDigit(char c) {\n        // Character.isDigit allows 'any' unicode digit, we don't need that\n        return c >= '0' && c <= '9';\n    }", "signature": "boolean isDigit(char c)", "full_signature": "static boolean isDigit(char c)", "class_method_signature": "CharBuffer.isDigit(char c)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}