{"test_class": {"identifier": "ClassReferenceContextTest", "superclass": "", "interfaces": "", "fields": [], "file": "preon-el/src/test/java/org/codehaus/preon/el/ctx/ClassReferenceContextTest.java"}, "test_case": {"identifier": "testInvalidReferences", "parameters": "()", "modifiers": "@Test(expected=BindingException.class) public", "return": "void", "body": "@Test(expected=BindingException.class)\n    public void testInvalidReferences() {\n        ReferenceContext<Person> context = new ClassReferenceContext<Person>(\n                Person.class);\n        context.selectAttribute(\"gender\");\n    }", "signature": "void testInvalidReferences()", "full_signature": "@Test(expected=BindingException.class) public void testInvalidReferences()", "class_method_signature": "ClassReferenceContextTest.testInvalidReferences()", "testcase": true, "constructor": false, "invocations": ["selectAttribute"]}, "focal_class": {"identifier": "ClassReferenceContext", "superclass": "", "interfaces": "implements Reference<T>", "fields": [{"original_string": "private Class<T> type;", "modifier": "private", "type": "Class<T>", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "ClassReferenceContext", "parameters": "(Class<T> type)", "modifiers": "public", "return": "", "signature": " ClassReferenceContext(Class<T> type)", "full_signature": "public  ClassReferenceContext(Class<T> type)", "class_method_signature": "ClassReferenceContext.ClassReferenceContext(Class<T> type)", "testcase": false, "constructor": true}, {"identifier": "getReferenceContext", "parameters": "()", "modifiers": "public", "return": "ReferenceContext<T>", "signature": "ReferenceContext<T> getReferenceContext()", "full_signature": "public ReferenceContext<T> getReferenceContext()", "class_method_signature": "ClassReferenceContext.getReferenceContext()", "testcase": false, "constructor": false}, {"identifier": "isAssignableTo", "parameters": "(Class<?> type)", "modifiers": "public", "return": "boolean", "signature": "boolean isAssignableTo(Class<?> type)", "full_signature": "public boolean isAssignableTo(Class<?> type)", "class_method_signature": "ClassReferenceContext.isAssignableTo(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(T context)", "modifiers": "public", "return": "Object", "signature": "Object resolve(T context)", "full_signature": "public Object resolve(T context)", "class_method_signature": "ClassReferenceContext.resolve(T context)", "testcase": false, "constructor": false}, {"identifier": "selectAttribute", "parameters": "(String name)", "modifiers": "public", "return": "Reference<T>", "signature": "Reference<T> selectAttribute(String name)", "full_signature": "public Reference<T> selectAttribute(String name)", "class_method_signature": "ClassReferenceContext.selectAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "selectItem", "parameters": "(String index)", "modifiers": "public", "return": "Reference<T>", "signature": "Reference<T> selectItem(String index)", "full_signature": "public Reference<T> selectItem(String index)", "class_method_signature": "ClassReferenceContext.selectItem(String index)", "testcase": false, "constructor": false}, {"identifier": "selectItem", "parameters": "(Expression<Integer, T> index)", "modifiers": "public", "return": "Reference<T>", "signature": "Reference<T> selectItem(Expression<Integer, T> index)", "full_signature": "public Reference<T> selectItem(Expression<Integer, T> index)", "class_method_signature": "ClassReferenceContext.selectItem(Expression<Integer, T> index)", "testcase": false, "constructor": false}, {"identifier": "document", "parameters": "(Document target)", "modifiers": "public", "return": "void", "signature": "void document(Document target)", "full_signature": "public void document(Document target)", "class_method_signature": "ClassReferenceContext.document(Document target)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getType()", "full_signature": "public Class<?> getType()", "class_method_signature": "ClassReferenceContext.getType()", "testcase": false, "constructor": false}, {"identifier": "narrow", "parameters": "(Class<?> type)", "modifiers": "public", "return": "Reference<T>", "signature": "Reference<T> narrow(Class<?> type)", "full_signature": "public Reference<T> narrow(Class<?> type)", "class_method_signature": "ClassReferenceContext.narrow(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isBasedOn", "parameters": "(ReferenceContext<T> other)", "modifiers": "public", "return": "boolean", "signature": "boolean isBasedOn(ReferenceContext<T> other)", "full_signature": "public boolean isBasedOn(ReferenceContext<T> other)", "class_method_signature": "ClassReferenceContext.isBasedOn(ReferenceContext<T> other)", "testcase": false, "constructor": false}, {"identifier": "rescope", "parameters": "(ReferenceContext<T> context)", "modifiers": "public", "return": "Reference<T>", "signature": "Reference<T> rescope(ReferenceContext<T> context)", "full_signature": "public Reference<T> rescope(ReferenceContext<T> context)", "class_method_signature": "ClassReferenceContext.rescope(ReferenceContext<T> context)", "testcase": false, "constructor": false}], "file": "preon-el/src/main/java/org/codehaus/preon/el/ctx/ClassReferenceContext.java"}, "focal_method": {"identifier": "selectAttribute", "parameters": "(String name)", "modifiers": "public", "return": "Reference<T>", "body": "public Reference<T> selectAttribute(String name) throws BindingException {\n        return new PropertyReference<T>(this, type, name, this);\n    }", "signature": "Reference<T> selectAttribute(String name)", "full_signature": "public Reference<T> selectAttribute(String name)", "class_method_signature": "ClassReferenceContext.selectAttribute(String name)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}