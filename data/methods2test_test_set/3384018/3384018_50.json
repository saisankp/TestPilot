{"test_class": {"identifier": "TestResponseProcessCookies", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CookieOrigin cookieOrigin;", "modifier": "private", "type": "CookieOrigin", "declarator": "cookieOrigin", "var_name": "cookieOrigin"}, {"original_string": "private CookieSpec cookieSpec;", "modifier": "private", "type": "CookieSpec", "declarator": "cookieSpec", "var_name": "cookieSpec"}, {"original_string": "private CookieStore cookieStore;", "modifier": "private", "type": "CookieStore", "declarator": "cookieStore", "var_name": "cookieStore"}], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/client/protocol/TestResponseProcessCookies.java"}, "test_case": {"identifier": "testSetCookie2OverrideSetCookie", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetCookie2OverrideSetCookie() throws Exception {\n        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 200, \"OK\");\n        response.addHeader(SM.SET_COOKIE, \"name1=value1\");\n        response.addHeader(SM.SET_COOKIE2, \"name1=value2; Version=1\");\n\n        HttpContext context = new BasicHttpContext();\n        context.setAttribute(ClientContext.COOKIE_ORIGIN, this.cookieOrigin);\n        context.setAttribute(ClientContext.COOKIE_SPEC, this.cookieSpec);\n        context.setAttribute(ClientContext.COOKIE_STORE, this.cookieStore);\n\n        HttpResponseInterceptor interceptor = new ResponseProcessCookies();\n        interceptor.process(response, context);\n\n        List<Cookie> cookies = this.cookieStore.getCookies();\n        Assert.assertNotNull(cookies);\n        Assert.assertEquals(1, cookies.size());\n        Cookie cookie = cookies.get(0);\n        Assert.assertEquals(1, cookie.getVersion());\n        Assert.assertEquals(\"name1\", cookie.getName());\n        Assert.assertEquals(\"value2\", cookie.getValue());\n        Assert.assertEquals(\"localhost.local\", cookie.getDomain());\n        Assert.assertEquals(\"/\", cookie.getPath());\n    }", "signature": "void testSetCookie2OverrideSetCookie()", "full_signature": "@Test public void testSetCookie2OverrideSetCookie()", "class_method_signature": "TestResponseProcessCookies.testSetCookie2OverrideSetCookie()", "testcase": true, "constructor": false, "invocations": ["addHeader", "addHeader", "setAttribute", "setAttribute", "setAttribute", "process", "getCookies", "assertNotNull", "assertEquals", "size", "get", "assertEquals", "getVersion", "assertEquals", "getName", "assertEquals", "getValue", "assertEquals", "getDomain", "assertEquals", "getPath"]}, "focal_class": {"identifier": "ResponseProcessCookies", "superclass": "", "interfaces": "implements HttpResponseInterceptor", "fields": [{"original_string": "private final Log log = LogFactory.getLog(getClass());", "modifier": "private final", "type": "Log", "declarator": "log = LogFactory.getLog(getClass())", "var_name": "log"}], "methods": [{"identifier": "ResponseProcessCookies", "parameters": "()", "modifiers": "public", "return": "", "signature": " ResponseProcessCookies()", "full_signature": "public  ResponseProcessCookies()", "class_method_signature": "ResponseProcessCookies.ResponseProcessCookies()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(final HttpResponse response, final HttpContext context)", "modifiers": "public", "return": "void", "signature": "void process(final HttpResponse response, final HttpContext context)", "full_signature": "public void process(final HttpResponse response, final HttpContext context)", "class_method_signature": "ResponseProcessCookies.process(final HttpResponse response, final HttpContext context)", "testcase": false, "constructor": false}, {"identifier": "processCookies", "parameters": "(\n            final HeaderIterator iterator,\n            final CookieSpec cookieSpec,\n            final CookieOrigin cookieOrigin,\n            final CookieStore cookieStore)", "modifiers": "private", "return": "void", "signature": "void processCookies(\n            final HeaderIterator iterator,\n            final CookieSpec cookieSpec,\n            final CookieOrigin cookieOrigin,\n            final CookieStore cookieStore)", "full_signature": "private void processCookies(\n            final HeaderIterator iterator,\n            final CookieSpec cookieSpec,\n            final CookieOrigin cookieOrigin,\n            final CookieStore cookieStore)", "class_method_signature": "ResponseProcessCookies.processCookies(\n            final HeaderIterator iterator,\n            final CookieSpec cookieSpec,\n            final CookieOrigin cookieOrigin,\n            final CookieStore cookieStore)", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/protocol/ResponseProcessCookies.java"}, "focal_method": {"identifier": "process", "parameters": "(final HttpResponse response, final HttpContext context)", "modifiers": "public", "return": "void", "body": "public void process(final HttpResponse response, final HttpContext context)\n            throws HttpException, IOException {\n        if (response == null) {\n            throw new IllegalArgumentException(\"HTTP request may not be null\");\n        }\n        if (context == null) {\n            throw new IllegalArgumentException(\"HTTP context may not be null\");\n        }\n\n        // Obtain actual CookieSpec instance\n        CookieSpec cookieSpec = (CookieSpec) context.getAttribute(\n                ClientContext.COOKIE_SPEC);\n        if (cookieSpec == null) {\n            this.log.debug(\"Cookie spec not specified in HTTP context\");\n            return;\n        }\n        // Obtain cookie store\n        CookieStore cookieStore = (CookieStore) context.getAttribute(\n                ClientContext.COOKIE_STORE);\n        if (cookieStore == null) {\n            this.log.debug(\"Cookie store not specified in HTTP context\");\n            return;\n        }\n        // Obtain actual CookieOrigin instance\n        CookieOrigin cookieOrigin = (CookieOrigin) context.getAttribute(\n                ClientContext.COOKIE_ORIGIN);\n        if (cookieOrigin == null) {\n            this.log.debug(\"Cookie origin not specified in HTTP context\");\n            return;\n        }\n        HeaderIterator it = response.headerIterator(SM.SET_COOKIE);\n        processCookies(it, cookieSpec, cookieOrigin, cookieStore);\n\n        // see if the cookie spec supports cookie versioning.\n        if (cookieSpec.getVersion() > 0) {\n            // process set-cookie2 headers.\n            // Cookie2 will replace equivalent Cookie instances\n            it = response.headerIterator(SM.SET_COOKIE2);\n            processCookies(it, cookieSpec, cookieOrigin, cookieStore);\n        }\n    }", "signature": "void process(final HttpResponse response, final HttpContext context)", "full_signature": "public void process(final HttpResponse response, final HttpContext context)", "class_method_signature": "ResponseProcessCookies.process(final HttpResponse response, final HttpContext context)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "debug", "getAttribute", "debug", "getAttribute", "debug", "headerIterator", "processCookies", "getVersion", "headerIterator", "processCookies"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}