{"test_class": {"identifier": "ExtremeStartupTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ExtremeStartup server = new ExtremeStartup(\"spark team\");", "modifier": "private final", "type": "ExtremeStartup", "declarator": "server = new ExtremeStartup(\"spark team\")", "var_name": "server"}], "file": "java/spark/src/test/java/ExtremeStartupTest.java"}, "test_case": {"identifier": "should_accept_missing_input", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_accept_missing_input() {\n        assertEquals(server.answer(null), \"spark team\");\n    }", "signature": "void should_accept_missing_input()", "full_signature": "@Test public void should_accept_missing_input()", "class_method_signature": "ExtremeStartupTest.should_accept_missing_input()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "answer"]}, "focal_class": {"identifier": "ExtremeStartup", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String teamName;", "modifier": "private final", "type": "String", "declarator": "teamName", "var_name": "teamName"}], "methods": [{"identifier": "ExtremeStartup", "parameters": "(String teamName)", "modifiers": "public", "return": "", "signature": " ExtremeStartup(String teamName)", "full_signature": "public  ExtremeStartup(String teamName)", "class_method_signature": "ExtremeStartup.ExtremeStartup(String teamName)", "testcase": false, "constructor": true}, {"identifier": "answer", "parameters": "(String question)", "modifiers": "public", "return": "String", "signature": "String answer(String question)", "full_signature": "public String answer(String question)", "class_method_signature": "ExtremeStartup.answer(String question)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "ExtremeStartup.main(String[] args)", "testcase": false, "constructor": false}], "file": "java/spark/src/main/java/ExtremeStartup.java"}, "focal_method": {"identifier": "answer", "parameters": "(String question)", "modifiers": "public", "return": "String", "body": "public String answer(String question) {\n        if (question == null)\n            return teamName;\n        Matcher sumMatcher = Pattern.compile(\".*what is the sum of (\\\\d+) and (\\\\d+)\").matcher(question);\n        if (sumMatcher.matches()) {\n            return String.valueOf(Integer.parseInt(sumMatcher.group(1)) + Integer.parseInt(sumMatcher.group(2)));\n        }\n        return teamName;\n    }", "signature": "String answer(String question)", "full_signature": "public String answer(String question)", "class_method_signature": "ExtremeStartup.answer(String question)", "testcase": false, "constructor": false, "invocations": ["matcher", "compile", "matches", "valueOf", "parseInt", "group", "parseInt", "group"]}, "repository": {"repo_id": 1906557, "url": "https://github.com/sopra-steria-norge/extreme_startup_servers", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 64, "size": 1152, "license": "licensed"}}