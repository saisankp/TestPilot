{"test_class": {"identifier": "FrequentTenderersControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FrequentTenderersController frequentTenderersController;", "modifier": "@Autowired\n    private", "type": "FrequentTenderersController", "declarator": "frequentTenderersController", "var_name": "frequentTenderersController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/FrequentTenderersControllerTest.java"}, "test_case": {"identifier": "frequentTenderersTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void frequentTenderersTest() throws Exception {\n        final List<Document> frequentTenderers = frequentTenderersController\n                .frequentTenderers(new YearFilterPagingRequest());\n\n        Assert.assertEquals(0, frequentTenderers.size());\n    }", "signature": "void frequentTenderersTest()", "full_signature": "@Test public void frequentTenderersTest()", "class_method_signature": "FrequentTenderersControllerTest.frequentTenderersTest()", "testcase": true, "constructor": false, "invocations": ["frequentTenderers", "assertEquals", "size"]}, "focal_class": {"identifier": "FrequentTenderersController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "frequentTenderers", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Detect frequent pairs of tenderers that apply together to bids.\" + \"We are only showing pairs if they applied to more than one bid together.\" + \"We are sorting the results after the number of occurences, descending.\" + \"You can use all the filters that are available along with pagination options.\") @RequestMapping(value = \"/api/frequentTenderers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> frequentTenderers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Detect frequent pairs of tenderers that apply together to bids.\" + \"We are only showing pairs if they applied to more than one bid together.\" + \"We are sorting the results after the number of occurences, descending.\" + \"You can use all the filters that are available along with pagination options.\") @RequestMapping(value = \"/api/frequentTenderers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> frequentTenderers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "FrequentTenderersController.frequentTenderers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "activeAwardsCount", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Counts the tenders/awards where the given supplier id is among the winners. \" + \"This assumes there is only one active award, which always seems to be the case, per tender. \") @RequestMapping(value = \"/api/activeAwardsCount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> activeAwardsCount(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Counts the tenders/awards where the given supplier id is among the winners. \" + \"This assumes there is only one active award, which always seems to be the case, per tender. \") @RequestMapping(value = \"/api/activeAwardsCount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> activeAwardsCount(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "FrequentTenderersController.activeAwardsCount(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/FrequentTenderersController.java"}, "focal_method": {"identifier": "frequentTenderers", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Detect frequent pairs of tenderers that apply together to bids.\" + \"We are only showing pairs if they applied to more than one bid together.\" + \"We are sorting the results after the number of occurences, descending.\" + \"You can use all the filters that are available along with pagination options.\") @RequestMapping(value = \"/api/frequentTenderers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"Detect frequent pairs of tenderers that apply together to bids.\"\n            + \"We are only showing pairs if they applied to more than one bid together.\"\n            + \"We are sorting the results after the number of occurences, descending.\"\n            + \"You can use all the filters that are available along with pagination options.\")\n    @RequestMapping(value = \"/api/frequentTenderers\", method = {RequestMethod.POST, RequestMethod.GET},\n            produces = \"application/json\")\n    public List<Document> frequentTenderers(@ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n        Aggregation agg = newAggregation(\n                match(where(\"tender.tenderers.1\").exists(true).and(\"awards.suppliers.0\").exists(true)\n                        .and(MongoConstants.FieldNames.AWARDS_STATUS).is(Award.Status.active.toString())\n                        .andOperator(getYearDefaultFilterCriteria(\n                                filter,\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE\n                        ))),\n                unwind(\"tender.tenderers\"),\n                unwind(\"awards\"),\n                unwind(\"awards.suppliers\"),\n                match(where(MongoConstants.FieldNames.AWARDS_STATUS).is(Award.Status.active.toString())\n                        .andOperator(getYearFilterCriteria(\n                                filter.awardFiltering(),\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE\n                        ))),\n                project().and(MongoConstants.FieldNames.AWARDS_SUPPLIERS_ID).as(\"supplierId\")\n                        .and(\"tender.tenderers._id\").as(\"tendererId\").andExclude(\n                        Fields.UNDERSCORE_ID)\n                        .and(ComparisonOperators.valueOf(MongoConstants.FieldNames.AWARDS_SUPPLIERS_ID).\n                                compareTo(\"tender.tenderers._id\")).as(\"cmp\"),\n                match((where(\"cmp\").ne(0))),\n                project(\"supplierId\", \"tendererId\", \"cmp\")\n                        .and(ConditionalOperators.when(\n                                Criteria.where(\"cmp\").is(1)).thenValueOf(\"$supplierId\")\n                                .otherwiseValueOf(\"$tendererId\")).as(\"tendererId1\")\n                        .and(ConditionalOperators.when(\n                                Criteria.where(\"cmp\").is(1)).thenValueOf(\"$tendererId\")\n                                .otherwiseValueOf(\"$supplierId\")).as(\"tendererId2\"),\n                group(\"tendererId1\", \"tendererId2\").count().as(\"pairCount\"),\n                sort(Sort.Direction.DESC, \"pairCount\"), skip(filter.getSkip()), limit(filter.getPageSize())\n        );\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> frequentTenderers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Detect frequent pairs of tenderers that apply together to bids.\" + \"We are only showing pairs if they applied to more than one bid together.\" + \"We are sorting the results after the number of occurences, descending.\" + \"You can use all the filters that are available along with pagination options.\") @RequestMapping(value = \"/api/frequentTenderers\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> frequentTenderers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "FrequentTenderersController.frequentTenderers(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["newAggregation", "match", "andOperator", "is", "and", "exists", "and", "exists", "where", "toString", "getYearDefaultFilterCriteria", "unwind", "unwind", "unwind", "match", "andOperator", "is", "where", "toString", "getYearFilterCriteria", "awardFiltering", "as", "and", "andExclude", "as", "and", "as", "and", "project", "compareTo", "valueOf", "match", "ne", "where", "as", "and", "as", "and", "project", "otherwiseValueOf", "thenValueOf", "when", "is", "where", "otherwiseValueOf", "thenValueOf", "when", "is", "where", "as", "count", "group", "sort", "skip", "getSkip", "limit", "getPageSize", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}