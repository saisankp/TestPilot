{"test_class": {"identifier": "AttrsTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/carrot2/attrs/AttrsTest.java"}, "test_case": {"identifier": "testFromMapAttrWithInvalidValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFromMapAttrWithInvalidValue() {\n    class Clazz extends AttrComposite {\n      AttrBoolean attrBoolean =\n          attributes.register(\"attrBoolean\", AttrBoolean.builder().defaultValue(null));\n      AttrInteger attrInteger =\n          attributes.register(\"attrInteger\", AttrInteger.builder().defaultValue(null));\n      AttrDouble attrDouble =\n          attributes.register(\"attrDouble\", AttrDouble.builder().defaultValue(null));\n      AttrString attrString =\n          attributes.register(\"attrString\", AttrString.builder().defaultValue(null));\n      AttrEnum<EnumClazz> attrEnum =\n          attributes.register(\"attrEnum\", AttrEnum.builder(EnumClazz.class).defaultValue(null));\n      AttrObject<Clazz> attrObject =\n          attributes.register(\n              \"attrObject\", AttrObject.builder(Clazz.class).defaultValue(null, () -> new Clazz()));\n      AttrObjectArray<Clazz> attrObjectArray =\n          attributes.register(\n              \"attrObjectArray\",\n              AttrObjectArray.builder(Clazz.class, () -> new Clazz()).defaultValue(null));\n    }\n\n    AliasMapper mapper = new AliasMapper();\n    mapper.alias(\"clazz\", Clazz.class, () -> new Clazz());\n\n    Assertions.assertThatExceptionOfType(IllegalArgumentException.class)\n        .isThrownBy(\n            () -> {\n              Map<String, Object> map = Collections.singletonMap(\"extraKey\", \"\");\n              Attrs.populate(new Clazz(), map, mapper::fromName);\n            });\n\n    Assertions.assertThatExceptionOfType(IllegalArgumentException.class)\n        .isThrownBy(\n            () -> {\n              Map<String, Object> map =\n                  Collections.singletonMap(\n                      \"attrObject\", Collections.singletonMap(\"extraKey\", \"invalid-value\"));\n              Attrs.populate(new Clazz(), map, mapper::fromName);\n            });\n\n    for (Object value : Arrays.asList(true, false, null)) {\n      checkValueLegal(mapper, new Clazz(), \"attrBoolean\", value);\n    }\n    for (Object value : Arrays.asList(10, \"true\", 10d, new Object[0], new ArrayList<>())) {\n      checkValueIllegal(mapper, new Clazz(), \"attrBoolean\", (c) -> c.attrBoolean.get(), value);\n    }\n\n    for (Object value : Arrays.asList(10, 10f, 10d, null)) {\n      checkValueLegal(mapper, new Clazz(), \"attrInteger\", value);\n    }\n    for (Object value :\n        Arrays.asList(\n            true,\n            \"true\",\n            10.1f,\n            10.1d,\n            Long.MAX_VALUE,\n            Double.NaN,\n            new Object[0],\n            new ArrayList<>())) {\n      checkValueIllegal(mapper, new Clazz(), \"attrInteger\", (c) -> c.attrInteger.get(), value);\n    }\n\n    for (Object value : Arrays.asList(10, 10f, 10d, null, Double.NaN, Double.MAX_VALUE)) {\n      checkValueLegal(mapper, new Clazz(), \"attrDouble\", value);\n    }\n    for (Object value : Arrays.asList(true, \"true\", new Object[0], new ArrayList<>())) {\n      checkValueIllegal(mapper, new Clazz(), \"attrDouble\", (c) -> c.attrDouble.get(), value);\n    }\n\n    for (Object value : Arrays.asList(null, \"abc\", \"\")) {\n      checkValueLegal(mapper, new Clazz(), \"attrString\", value);\n    }\n    for (Object value : Arrays.asList(true, 10, 10d, new Object[0], new ArrayList<>())) {\n      checkValueIllegal(mapper, new Clazz(), \"attrString\", (c) -> c.attrString.get(), value);\n    }\n\n    for (Object value : Arrays.asList(null, EnumClazz.FOO, EnumClazz.FOO.name())) {\n      checkValueLegal(mapper, new Clazz(), \"attrEnum\", value);\n    }\n    for (Object value :\n        Arrays.asList(true, 10, 10d, \"NONVALUE\", new Object[0], new ArrayList<>())) {\n      checkValueIllegal(mapper, new Clazz(), \"attrEnum\", (c) -> c.attrEnum.get(), value);\n    }\n\n    for (Object value : Arrays.asList(null, new HashMap<>())) {\n      checkValueLegal(mapper, new Clazz(), \"attrObject\", value);\n    }\n    for (Object value :\n        Arrays.asList(\n            true,\n            10,\n            10d,\n            \"NONVALUE\",\n            Collections.singletonMap(\"attrInteger\", \"invalid-value\"),\n            new Object(),\n            new Object[0],\n            new ArrayList<>())) {\n      checkValueIllegal(mapper, new Clazz(), \"attrObject\", (c) -> c.attrObject.get(), value);\n    }\n\n    for (Object value :\n        Arrays.asList(\n            null,\n            new ArrayList<>(),\n            new Object[] {Collections.emptyMap(), Collections.singletonMap(\"attrString\", \"foo\")})) {\n      checkValueLegal(mapper, new Clazz(), \"attrObjectArray\", value);\n    }\n    for (Object value :\n        Arrays.asList(true, 10, 10d, new Object(), new Object[] {\"invalid-value\"})) {\n      checkValueIllegal(\n          mapper, new Clazz(), \"attrObjectArray\", (c) -> c.attrObjectArray.get(), value);\n    }\n  }", "signature": "void testFromMapAttrWithInvalidValue()", "full_signature": "@Test public void testFromMapAttrWithInvalidValue()", "class_method_signature": "AttrsTest.testFromMapAttrWithInvalidValue()", "testcase": true, "constructor": false, "invocations": ["register", "defaultValue", "builder", "register", "defaultValue", "builder", "register", "defaultValue", "builder", "register", "defaultValue", "builder", "register", "defaultValue", "builder", "register", "defaultValue", "builder", "register", "defaultValue", "builder", "alias", "isThrownBy", "assertThatExceptionOfType", "singletonMap", "populate", "isThrownBy", "assertThatExceptionOfType", "singletonMap", "singletonMap", "populate", "asList", "checkValueLegal", "asList", "checkValueIllegal", "get", "asList", "checkValueLegal", "asList", "checkValueIllegal", "get", "asList", "checkValueLegal", "asList", "checkValueIllegal", "get", "asList", "checkValueLegal", "asList", "checkValueIllegal", "get", "asList", "name", "checkValueLegal", "asList", "checkValueIllegal", "get", "asList", "checkValueLegal", "asList", "singletonMap", "checkValueIllegal", "get", "asList", "emptyMap", "singletonMap", "checkValueLegal", "asList", "checkValueIllegal", "get"]}, "focal_class": {"identifier": "Attrs", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String KEY_WRAPPED = \"@value\";", "modifier": "private static final", "type": "String", "declarator": "KEY_WRAPPED = \"@value\"", "var_name": "KEY_WRAPPED"}, {"original_string": "static final String KEY_TYPE = \"@type\";", "modifier": "static final", "type": "String", "declarator": "KEY_TYPE = \"@type\"", "var_name": "KEY_TYPE"}], "methods": [{"identifier": "toMap", "parameters": "(AcceptingVisitor composite)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> toMap(AcceptingVisitor composite)", "full_signature": "public static Map<String, Object> toMap(AcceptingVisitor composite)", "class_method_signature": "Attrs.toMap(AcceptingVisitor composite)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(\n      AcceptingVisitor composite, Function<Object, String> classToName)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> toMap(\n      AcceptingVisitor composite, Function<Object, String> classToName)", "full_signature": "public static Map<String, Object> toMap(\n      AcceptingVisitor composite, Function<Object, String> classToName)", "class_method_signature": "Attrs.toMap(\n      AcceptingVisitor composite, Function<Object, String> classToName)", "testcase": false, "constructor": false}, {"identifier": "fromMap", "parameters": "(\n      Class<? extends E> clazz, Map<String, Object> map)", "modifiers": "public static", "return": "E", "signature": "E fromMap(\n      Class<? extends E> clazz, Map<String, Object> map)", "full_signature": "public static E fromMap(\n      Class<? extends E> clazz, Map<String, Object> map)", "class_method_signature": "Attrs.fromMap(\n      Class<? extends E> clazz, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "fromMap", "parameters": "(\n      Class<? extends E> clazz, Map<String, Object> map, Function<String, Object> nameToClass)", "modifiers": "public static", "return": "E", "signature": "E fromMap(\n      Class<? extends E> clazz, Map<String, Object> map, Function<String, Object> nameToClass)", "full_signature": "public static E fromMap(\n      Class<? extends E> clazz, Map<String, Object> map, Function<String, Object> nameToClass)", "class_method_signature": "Attrs.fromMap(\n      Class<? extends E> clazz, Map<String, Object> map, Function<String, Object> nameToClass)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(\n      AcceptingVisitor instance, Function<Object, String> classToName)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> extract(\n      AcceptingVisitor instance, Function<Object, String> classToName)", "full_signature": "public static Map<String, Object> extract(\n      AcceptingVisitor instance, Function<Object, String> classToName)", "class_method_signature": "Attrs.extract(\n      AcceptingVisitor instance, Function<Object, String> classToName)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(AcceptingVisitor instance)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> extract(AcceptingVisitor instance)", "full_signature": "public static Map<String, Object> extract(AcceptingVisitor instance)", "class_method_signature": "Attrs.extract(AcceptingVisitor instance)", "testcase": false, "constructor": false}, {"identifier": "populate", "parameters": "(E instance, Map<String, Object> map)", "modifiers": "public static", "return": "E", "signature": "E populate(E instance, Map<String, Object> map)", "full_signature": "public static E populate(E instance, Map<String, Object> map)", "class_method_signature": "Attrs.populate(E instance, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "populate", "parameters": "(\n      E instance, Map<String, Object> map, Function<String, Object> nameToClass)", "modifiers": "public static", "return": "E", "signature": "E populate(\n      E instance, Map<String, Object> map, Function<String, Object> nameToClass)", "full_signature": "public static E populate(\n      E instance, Map<String, Object> map, Function<String, Object> nameToClass)", "class_method_signature": "Attrs.populate(\n      E instance, Map<String, Object> map, Function<String, Object> nameToClass)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(AcceptingVisitor composite, ClassNameMapper classNameMapper)", "modifiers": "public static", "return": "String", "signature": "String toJson(AcceptingVisitor composite, ClassNameMapper classNameMapper)", "full_signature": "public static String toJson(AcceptingVisitor composite, ClassNameMapper classNameMapper)", "class_method_signature": "Attrs.toJson(AcceptingVisitor composite, ClassNameMapper classNameMapper)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(AcceptingVisitor composite, Function<Object, String> classToName)", "modifiers": "public static", "return": "String", "signature": "String toJson(AcceptingVisitor composite, Function<Object, String> classToName)", "full_signature": "public static String toJson(AcceptingVisitor composite, Function<Object, String> classToName)", "class_method_signature": "Attrs.toJson(AcceptingVisitor composite, Function<Object, String> classToName)", "testcase": false, "constructor": false}, {"identifier": "safeCast", "parameters": "(Object value, String key, Class<T> clazz)", "modifiers": "static", "return": "T", "signature": "T safeCast(Object value, String key, Class<T> clazz)", "full_signature": "static T safeCast(Object value, String key, Class<T> clazz)", "class_method_signature": "Attrs.safeCast(Object value, String key, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "toDebugString", "parameters": "(Object value)", "modifiers": "static", "return": "String", "signature": "String toDebugString(Object value)", "full_signature": "static String toDebugString(Object value)", "class_method_signature": "Attrs.toDebugString(Object value)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/carrot2/attrs/Attrs.java"}, "focal_method": {"identifier": "populate", "parameters": "(E instance, Map<String, Object> map)", "modifiers": "public static", "return": "E", "body": "public static <E extends AcceptingVisitor> E populate(E instance, Map<String, Object> map) {\n    return populate(instance, map, AliasMapper.SPI_DEFAULTS::fromName);\n  }", "signature": "E populate(E instance, Map<String, Object> map)", "full_signature": "public static E populate(E instance, Map<String, Object> map)", "class_method_signature": "Attrs.populate(E instance, Map<String, Object> map)", "testcase": false, "constructor": false, "invocations": ["populate"]}, "repository": {"repo_id": 2424377, "url": "https://github.com/carrot2/carrot2", "stars": 393, "created": "9/20/2011 6:19:05 PM +00:00", "updates": "2020-01-24T20:43:38+00:00", "fork": "False", "license": "licensed"}}