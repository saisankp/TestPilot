{"test_class": {"identifier": "SimpleEngineManagerTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private SimpleEngineManager engineManager;", "modifier": "private", "type": "SimpleEngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "private static final String USER_STR = \"http://mobi.com/users/tester\";", "modifier": "private static final", "type": "String", "declarator": "USER_STR = \"http://mobi.com/users/tester\"", "var_name": "USER_STR"}, {"original_string": "private static final IRI USER_IRI = VALUE_FACTORY.createIRI(USER_STR);", "modifier": "private static final", "type": "IRI", "declarator": "USER_IRI = VALUE_FACTORY.createIRI(USER_STR)", "var_name": "USER_IRI"}, {"original_string": "private static final String USERNAME = \"tester\";", "modifier": "private static final", "type": "String", "declarator": "USERNAME = \"tester\"", "var_name": "USERNAME"}, {"original_string": "private static final String ERROR = \"error\";", "modifier": "private static final", "type": "String", "declarator": "ERROR = \"error\"", "var_name": "ERROR"}, {"original_string": "private static final String ERROR_STR = \"http://example.com/error\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_STR = \"http://example.com/error\"", "var_name": "ERROR_STR"}, {"original_string": "private static final IRI ERROR_IRI = VALUE_FACTORY.createIRI(ERROR_STR);", "modifier": "private static final", "type": "IRI", "declarator": "ERROR_IRI = VALUE_FACTORY.createIRI(ERROR_STR)", "var_name": "ERROR_IRI"}, {"original_string": "@Mock\n    Engine engine;", "modifier": "@Mock", "type": "Engine", "declarator": "engine", "var_name": "engine"}, {"original_string": "@Mock\n    User user;", "modifier": "@Mock", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock\n    User errorUser;", "modifier": "@Mock", "type": "User", "declarator": "errorUser", "var_name": "errorUser"}, {"original_string": "@Mock\n    Group group;", "modifier": "@Mock", "type": "Group", "declarator": "group", "var_name": "group"}, {"original_string": "@Mock\n    Group errorGroup;", "modifier": "@Mock", "type": "Group", "declarator": "errorGroup", "var_name": "errorGroup"}, {"original_string": "@Mock\n    Role role;", "modifier": "@Mock", "type": "Role", "declarator": "role", "var_name": "role"}, {"original_string": "@Mock\n    UserConfig userConfig;", "modifier": "@Mock", "type": "UserConfig", "declarator": "userConfig", "var_name": "userConfig"}, {"original_string": "@Mock\n    GroupConfig groupConfig;", "modifier": "@Mock", "type": "GroupConfig", "declarator": "groupConfig", "var_name": "groupConfig"}], "file": "com.mobi.jaas/src/test/java/com/mobi/jaas/engines/SimpleEngineManagerTest.java"}, "test_case": {"identifier": "testUserExistsInOneEngine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUserExistsInOneEngine() {\n        boolean result = engineManager.userExists(ERROR, \"user\");\n        verify(engine, times(0)).userExists(\"user\");\n        assertFalse(result);\n\n        result = engineManager.userExists(engine.getEngineName(), \"user\");\n        verify(engine).userExists(\"user\");\n        assertTrue(result);\n    }", "signature": "void testUserExistsInOneEngine()", "full_signature": "@Test public void testUserExistsInOneEngine()", "class_method_signature": "SimpleEngineManagerTest.testUserExistsInOneEngine()", "testcase": true, "constructor": false, "invocations": ["userExists", "userExists", "verify", "times", "assertFalse", "userExists", "getEngineName", "userExists", "verify", "assertTrue"]}, "focal_class": {"identifier": "SimpleEngineManager", "superclass": "", "interfaces": "implements EngineManager", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(this.getClass().getName());", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(this.getClass().getName())", "var_name": "log"}, {"original_string": "protected Map<String, Engine> engines = new HashMap<>();", "modifier": "protected", "type": "Map<String, Engine>", "declarator": "engines = new HashMap<>()", "var_name": "engines"}], "methods": [{"identifier": "addEngine", "parameters": "(Engine engine)", "modifiers": "@Reference(type = '*', dynamic = true) public", "return": "void", "signature": "void addEngine(Engine engine)", "full_signature": "@Reference(type = '*', dynamic = true) public void addEngine(Engine engine)", "class_method_signature": "SimpleEngineManager.addEngine(Engine engine)", "testcase": false, "constructor": false}, {"identifier": "removeEngine", "parameters": "(Engine engine)", "modifiers": "public", "return": "void", "signature": "void removeEngine(Engine engine)", "full_signature": "public void removeEngine(Engine engine)", "class_method_signature": "SimpleEngineManager.removeEngine(Engine engine)", "testcase": false, "constructor": false}, {"identifier": "containsEngine", "parameters": "(String engine)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsEngine(String engine)", "full_signature": "@Override public boolean containsEngine(String engine)", "class_method_signature": "SimpleEngineManager.containsEngine(String engine)", "testcase": false, "constructor": false}, {"identifier": "getRole", "parameters": "(String engine, String roleName)", "modifiers": "@Override public", "return": "Optional<Role>", "signature": "Optional<Role> getRole(String engine, String roleName)", "full_signature": "@Override public Optional<Role> getRole(String engine, String roleName)", "class_method_signature": "SimpleEngineManager.getRole(String engine, String roleName)", "testcase": false, "constructor": false}, {"identifier": "getRole", "parameters": "(String roleName)", "modifiers": "@Override public", "return": "Optional<Role>", "signature": "Optional<Role> getRole(String roleName)", "full_signature": "@Override public Optional<Role> getRole(String roleName)", "class_method_signature": "SimpleEngineManager.getRole(String roleName)", "testcase": false, "constructor": false}, {"identifier": "getUsers", "parameters": "(String engine)", "modifiers": "@Override public", "return": "Set<User>", "signature": "Set<User> getUsers(String engine)", "full_signature": "@Override public Set<User> getUsers(String engine)", "class_method_signature": "SimpleEngineManager.getUsers(String engine)", "testcase": false, "constructor": false}, {"identifier": "getUsers", "parameters": "()", "modifiers": "@Override public", "return": "Set<User>", "signature": "Set<User> getUsers()", "full_signature": "@Override public Set<User> getUsers()", "class_method_signature": "SimpleEngineManager.getUsers()", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(String engine, UserConfig userConfig)", "modifiers": "@Override public", "return": "User", "signature": "User createUser(String engine, UserConfig userConfig)", "full_signature": "@Override public User createUser(String engine, UserConfig userConfig)", "class_method_signature": "SimpleEngineManager.createUser(String engine, UserConfig userConfig)", "testcase": false, "constructor": false}, {"identifier": "storeUser", "parameters": "(String engine, User user)", "modifiers": "@Override public", "return": "void", "signature": "void storeUser(String engine, User user)", "full_signature": "@Override public void storeUser(String engine, User user)", "class_method_signature": "SimpleEngineManager.storeUser(String engine, User user)", "testcase": false, "constructor": false}, {"identifier": "retrieveUser", "parameters": "(String engine, String username)", "modifiers": "@Override public", "return": "Optional<User>", "signature": "Optional<User> retrieveUser(String engine, String username)", "full_signature": "@Override public Optional<User> retrieveUser(String engine, String username)", "class_method_signature": "SimpleEngineManager.retrieveUser(String engine, String username)", "testcase": false, "constructor": false}, {"identifier": "retrieveUser", "parameters": "(String username)", "modifiers": "@Override public", "return": "Optional<User>", "signature": "Optional<User> retrieveUser(String username)", "full_signature": "@Override public Optional<User> retrieveUser(String username)", "class_method_signature": "SimpleEngineManager.retrieveUser(String username)", "testcase": false, "constructor": false}, {"identifier": "deleteUser", "parameters": "(String engine, String username)", "modifiers": "@Override public", "return": "void", "signature": "void deleteUser(String engine, String username)", "full_signature": "@Override public void deleteUser(String engine, String username)", "class_method_signature": "SimpleEngineManager.deleteUser(String engine, String username)", "testcase": false, "constructor": false}, {"identifier": "updateUser", "parameters": "(String engine, User newUser)", "modifiers": "@Override public", "return": "void", "signature": "void updateUser(String engine, User newUser)", "full_signature": "@Override public void updateUser(String engine, User newUser)", "class_method_signature": "SimpleEngineManager.updateUser(String engine, User newUser)", "testcase": false, "constructor": false}, {"identifier": "updateUser", "parameters": "(User newUser)", "modifiers": "@Override public", "return": "void", "signature": "void updateUser(User newUser)", "full_signature": "@Override public void updateUser(User newUser)", "class_method_signature": "SimpleEngineManager.updateUser(User newUser)", "testcase": false, "constructor": false}, {"identifier": "userExists", "parameters": "(String engine, String username)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean userExists(String engine, String username)", "full_signature": "@Override public boolean userExists(String engine, String username)", "class_method_signature": "SimpleEngineManager.userExists(String engine, String username)", "testcase": false, "constructor": false}, {"identifier": "userExists", "parameters": "(String username)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean userExists(String username)", "full_signature": "@Override public boolean userExists(String username)", "class_method_signature": "SimpleEngineManager.userExists(String username)", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "(String engine)", "modifiers": "@Override public", "return": "Set<Group>", "signature": "Set<Group> getGroups(String engine)", "full_signature": "@Override public Set<Group> getGroups(String engine)", "class_method_signature": "SimpleEngineManager.getGroups(String engine)", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "()", "modifiers": "@Override public", "return": "Set<Group>", "signature": "Set<Group> getGroups()", "full_signature": "@Override public Set<Group> getGroups()", "class_method_signature": "SimpleEngineManager.getGroups()", "testcase": false, "constructor": false}, {"identifier": "createGroup", "parameters": "(String engine, GroupConfig groupConfig)", "modifiers": "@Override public", "return": "Group", "signature": "Group createGroup(String engine, GroupConfig groupConfig)", "full_signature": "@Override public Group createGroup(String engine, GroupConfig groupConfig)", "class_method_signature": "SimpleEngineManager.createGroup(String engine, GroupConfig groupConfig)", "testcase": false, "constructor": false}, {"identifier": "storeGroup", "parameters": "(String engine, Group group)", "modifiers": "@Override public", "return": "void", "signature": "void storeGroup(String engine, Group group)", "full_signature": "@Override public void storeGroup(String engine, Group group)", "class_method_signature": "SimpleEngineManager.storeGroup(String engine, Group group)", "testcase": false, "constructor": false}, {"identifier": "retrieveGroup", "parameters": "(String engine, String groupTitle)", "modifiers": "@Override public", "return": "Optional<Group>", "signature": "Optional<Group> retrieveGroup(String engine, String groupTitle)", "full_signature": "@Override public Optional<Group> retrieveGroup(String engine, String groupTitle)", "class_method_signature": "SimpleEngineManager.retrieveGroup(String engine, String groupTitle)", "testcase": false, "constructor": false}, {"identifier": "retrieveGroup", "parameters": "(String groupTitle)", "modifiers": "@Override public", "return": "Optional<Group>", "signature": "Optional<Group> retrieveGroup(String groupTitle)", "full_signature": "@Override public Optional<Group> retrieveGroup(String groupTitle)", "class_method_signature": "SimpleEngineManager.retrieveGroup(String groupTitle)", "testcase": false, "constructor": false}, {"identifier": "deleteGroup", "parameters": "(String engine, String groupTitle)", "modifiers": "@Override public", "return": "void", "signature": "void deleteGroup(String engine, String groupTitle)", "full_signature": "@Override public void deleteGroup(String engine, String groupTitle)", "class_method_signature": "SimpleEngineManager.deleteGroup(String engine, String groupTitle)", "testcase": false, "constructor": false}, {"identifier": "updateGroup", "parameters": "(String engine, Group newGroup)", "modifiers": "@Override public", "return": "void", "signature": "void updateGroup(String engine, Group newGroup)", "full_signature": "@Override public void updateGroup(String engine, Group newGroup)", "class_method_signature": "SimpleEngineManager.updateGroup(String engine, Group newGroup)", "testcase": false, "constructor": false}, {"identifier": "updateGroup", "parameters": "(Group newGroup)", "modifiers": "@Override public", "return": "void", "signature": "void updateGroup(Group newGroup)", "full_signature": "@Override public void updateGroup(Group newGroup)", "class_method_signature": "SimpleEngineManager.updateGroup(Group newGroup)", "testcase": false, "constructor": false}, {"identifier": "groupExists", "parameters": "(String engine, String groupTitle)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean groupExists(String engine, String groupTitle)", "full_signature": "@Override public boolean groupExists(String engine, String groupTitle)", "class_method_signature": "SimpleEngineManager.groupExists(String engine, String groupTitle)", "testcase": false, "constructor": false}, {"identifier": "groupExists", "parameters": "(String groupTitle)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean groupExists(String groupTitle)", "full_signature": "@Override public boolean groupExists(String groupTitle)", "class_method_signature": "SimpleEngineManager.groupExists(String groupTitle)", "testcase": false, "constructor": false}, {"identifier": "getUserRoles", "parameters": "(String engine, String username)", "modifiers": "@Override public", "return": "Set<Role>", "signature": "Set<Role> getUserRoles(String engine, String username)", "full_signature": "@Override public Set<Role> getUserRoles(String engine, String username)", "class_method_signature": "SimpleEngineManager.getUserRoles(String engine, String username)", "testcase": false, "constructor": false}, {"identifier": "getUserRoles", "parameters": "(String username)", "modifiers": "@Override public", "return": "Set<Role>", "signature": "Set<Role> getUserRoles(String username)", "full_signature": "@Override public Set<Role> getUserRoles(String username)", "class_method_signature": "SimpleEngineManager.getUserRoles(String username)", "testcase": false, "constructor": false}, {"identifier": "checkPassword", "parameters": "(String engine, String username, String password)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkPassword(String engine, String username, String password)", "full_signature": "@Override public boolean checkPassword(String engine, String username, String password)", "class_method_signature": "SimpleEngineManager.checkPassword(String engine, String username, String password)", "testcase": false, "constructor": false}, {"identifier": "checkPassword", "parameters": "(String username, String password)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkPassword(String username, String password)", "full_signature": "@Override public boolean checkPassword(String username, String password)", "class_method_signature": "SimpleEngineManager.checkPassword(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "getUsername", "parameters": "(Resource userIri)", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getUsername(Resource userIri)", "full_signature": "@Override public Optional<String> getUsername(Resource userIri)", "class_method_signature": "SimpleEngineManager.getUsername(Resource userIri)", "testcase": false, "constructor": false}], "file": "com.mobi.jaas/src/main/java/com/mobi/jaas/engines/SimpleEngineManager.java"}, "focal_method": {"identifier": "userExists", "parameters": "(String engine, String username)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean userExists(String engine, String username) {\n        log.debug(\"Checking user exists with \" + engine);\n        return engines.containsKey(engine) && engines.get(engine).userExists(username);\n    }", "signature": "boolean userExists(String engine, String username)", "full_signature": "@Override public boolean userExists(String engine, String username)", "class_method_signature": "SimpleEngineManager.userExists(String engine, String username)", "testcase": false, "constructor": false, "invocations": ["debug", "containsKey", "userExists", "get"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}