{"test_class": {"identifier": "OnMajorityPredictionsAggregatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PredictionsAggregator aggregator = new OnMajorityPredictionsAggregator();", "modifier": "private", "type": "PredictionsAggregator", "declarator": "aggregator = new OnMajorityPredictionsAggregator()", "var_name": "aggregator"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/composition/predictionsaggregator/OnMajorityPredictionsAggregatorTest.java"}, "test_case": {"identifier": "testApply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApply() {\n        assertEquals(1.0, aggregator.apply(new double[]{1.0, 1.0, 1.0, 0.0}), 0.001);\n    }", "signature": "void testApply()", "full_signature": "@Test public void testApply()", "class_method_signature": "OnMajorityPredictionsAggregatorTest.testApply()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "apply"]}, "focal_class": {"identifier": "OnMajorityPredictionsAggregator", "superclass": "", "interfaces": "implements PredictionsAggregator", "fields": [], "methods": [{"identifier": "apply", "parameters": "(double[] estimations)", "modifiers": "@Override public", "return": "Double", "signature": "Double apply(double[] estimations)", "full_signature": "@Override public Double apply(double[] estimations)", "class_method_signature": "OnMajorityPredictionsAggregator.apply(double[] estimations)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/composition/predictionsaggregator/OnMajorityPredictionsAggregator.java"}, "focal_method": {"identifier": "apply", "parameters": "(double[] estimations)", "modifiers": "@Override public", "return": "Double", "body": "@Override public Double apply(double[] estimations) {\n        A.notEmpty(estimations, \"estimations vector\");\n\n        Map<Double, Integer> cntrsByCls = new HashMap<>();\n\n        for (Double predictedValue : estimations) {\n            Integer cntrVal = cntrsByCls.getOrDefault(predictedValue, 0) + 1;\n            cntrsByCls.put(predictedValue, cntrVal);\n        }\n\n        return cntrsByCls.entrySet().stream()\n            .max(Comparator.comparing(Map.Entry::getValue))\n            .get().getKey();\n    }", "signature": "Double apply(double[] estimations)", "full_signature": "@Override public Double apply(double[] estimations)", "class_method_signature": "OnMajorityPredictionsAggregator.apply(double[] estimations)", "testcase": false, "constructor": false, "invocations": ["notEmpty", "getOrDefault", "put", "getKey", "get", "max", "stream", "entrySet", "comparing"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}