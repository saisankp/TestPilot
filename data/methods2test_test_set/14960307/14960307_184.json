{"test_class": {"identifier": "FileUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FileUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FileUtilTest.class)", "var_name": "logger"}, {"original_string": "private static final String TEST_FILE = \"CHANGELOG.md\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILE = \"CHANGELOG.md\"", "var_name": "TEST_FILE"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/FileUtilTest.java"}, "test_case": {"identifier": "isValidFileExtension", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isValidFileExtension() throws Exception {\n        Assert.assertEquals(true, FileUtil.isValidFileExtension(\"log\"));\n        Assert.assertEquals(true, FileUtil.isValidFileExtension(\"log2\"));\n        Assert.assertEquals(true, FileUtil.isValidFileExtension(\"log_bak\"));\n        Assert.assertEquals(false, FileUtil.isValidFileExtension(\".log\"));\n        Assert.assertEquals(false, FileUtil.isValidFileExtension(\"$log\"));\n        Assert.assertEquals(false, FileUtil.isValidFileExtension(\" log\"));\n    }", "signature": "void isValidFileExtension()", "full_signature": "@Test public void isValidFileExtension()", "class_method_signature": "FileUtilTest.isValidFileExtension()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "isValidFileExtension", "assertEquals", "isValidFileExtension", "assertEquals", "isValidFileExtension", "assertEquals", "isValidFileExtension", "assertEquals", "isValidFileExtension", "assertEquals", "isValidFileExtension"]}, "focal_class": {"identifier": "FileUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "FileUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileUtil()", "full_signature": "private  FileUtil()", "class_method_signature": "FileUtil.FileUtil()", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(InputStream is1, InputStream is2)", "modifiers": "private static", "return": "boolean", "signature": "boolean equals(InputStream is1, InputStream is2)", "full_signature": "private static boolean equals(InputStream is1, InputStream is2)", "class_method_signature": "FileUtil.equals(InputStream is1, InputStream is2)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(File file1, File file2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(File file1, File file2)", "full_signature": "public static boolean equals(File file1, File file2)", "class_method_signature": "FileUtil.equals(File file1, File file2)", "testcase": false, "constructor": false}, {"identifier": "isValidFileExtension", "parameters": "(String extension)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidFileExtension(String extension)", "full_signature": "public static boolean isValidFileExtension(String extension)", "class_method_signature": "FileUtil.isValidFileExtension(String extension)", "testcase": false, "constructor": false}, {"identifier": "parseFileExtension", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String parseFileExtension(String filename)", "full_signature": "public static String parseFileExtension(String filename)", "class_method_signature": "FileUtil.parseFileExtension(String filename)", "testcase": false, "constructor": false}, {"identifier": "findFiles", "parameters": "(File dir, FileFilter filter)", "modifiers": "public static", "return": "File[]", "signature": "File[] findFiles(File dir, FileFilter filter)", "full_signature": "public static File[] findFiles(File dir, FileFilter filter)", "class_method_signature": "FileUtil.findFiles(File dir, FileFilter filter)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(File sourceFile, File targetFile)", "modifiers": "public static", "return": "void", "signature": "void copy(File sourceFile, File targetFile)", "full_signature": "public static void copy(File sourceFile, File targetFile)", "class_method_signature": "FileUtil.copy(File sourceFile, File targetFile)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(File sourceFile, File targetFile, boolean overwrite)", "modifiers": "public static", "return": "boolean", "signature": "boolean copy(File sourceFile, File targetFile, boolean overwrite)", "full_signature": "public static boolean copy(File sourceFile, File targetFile, boolean overwrite)", "class_method_signature": "FileUtil.copy(File sourceFile, File targetFile, boolean overwrite)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/FileUtil.java"}, "focal_method": {"identifier": "isValidFileExtension", "parameters": "(String extension)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isValidFileExtension(String extension) {\n        for (int i = 0; i < extension.length(); i++) {\n            char c = extension.charAt(i);\n            if (!(Character.isDigit(c) || Character.isLetter(c) || c == '_')) {\n                return false;\n            }\n        }\n        return true;\n    }", "signature": "boolean isValidFileExtension(String extension)", "full_signature": "public static boolean isValidFileExtension(String extension)", "class_method_signature": "FileUtil.isValidFileExtension(String extension)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "isDigit", "isLetter"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}