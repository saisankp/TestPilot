{"test_class": {"identifier": "CompositeLoggerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RecordingLogger<String, Integer, String> logger1;", "modifier": "private", "type": "RecordingLogger<String, Integer, String>", "declarator": "logger1", "var_name": "logger1"}, {"original_string": "private RecordingLogger<String, Integer, String> logger2;", "modifier": "private", "type": "RecordingLogger<String, Integer, String>", "declarator": "logger2", "var_name": "logger2"}, {"original_string": "private RecordingLogger<String, Integer, String> logger3;", "modifier": "private", "type": "RecordingLogger<String, Integer, String>", "declarator": "logger3", "var_name": "logger3"}, {"original_string": "private MobiusLoop.Logger<String, Integer, String> underTest;", "modifier": "private", "type": "MobiusLoop.Logger<String, Integer, String>", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private List<String> logEntries;", "modifier": "private", "type": "List<String>", "declarator": "logEntries", "var_name": "logEntries"}, {"original_string": "private TaggingLogger<String, Integer, String> taggingLogger1;", "modifier": "private", "type": "TaggingLogger<String, Integer, String>", "declarator": "taggingLogger1", "var_name": "taggingLogger1"}, {"original_string": "private TaggingLogger<String, Integer, String> taggingLogger2;", "modifier": "private", "type": "TaggingLogger<String, Integer, String>", "declarator": "taggingLogger2", "var_name": "taggingLogger2"}], "file": "mobius-extras/src/test/java/com/spotify/mobius/extras/CompositeLoggerTest.java"}, "test_case": {"identifier": "delegatesExceptionDuringUpdateToAllLoggers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void delegatesExceptionDuringUpdateToAllLoggers() throws Exception {\n    ExceptionDuringUpdate<String, Integer> testCase =\n        ExceptionDuringUpdate.create(\"Something bad happened\", 6, Exception.class);\n    underTest.exceptionDuringUpdate(testCase.model(), testCase.event(), testCase.createException());\n    assertTestCaseLogged(testCase);\n  }", "signature": "void delegatesExceptionDuringUpdateToAllLoggers()", "full_signature": "@Test public void delegatesExceptionDuringUpdateToAllLoggers()", "class_method_signature": "CompositeLoggerTest.delegatesExceptionDuringUpdateToAllLoggers()", "testcase": true, "constructor": false, "invocations": ["create", "exceptionDuringUpdate", "model", "event", "createException", "assertTestCaseLogged"]}, "focal_class": {"identifier": "CompositeLogger", "superclass": "", "interfaces": "implements Logger<M, E, F>", "fields": [{"original_string": "private final List<Logger<M, E, F>> loggers;", "modifier": "private final", "type": "List<Logger<M, E, F>>", "declarator": "loggers", "var_name": "loggers"}, {"original_string": "private final List<Logger<M, E, F>> loggersReversed;", "modifier": "private final", "type": "List<Logger<M, E, F>>", "declarator": "loggersReversed", "var_name": "loggersReversed"}], "methods": [{"identifier": "from", "parameters": "(Logger<M, E, F> logger, Logger<M, E, F>... loggers)", "modifiers": "@SafeVarargs public static", "return": "Logger<M, E, F>", "signature": "Logger<M, E, F> from(Logger<M, E, F> logger, Logger<M, E, F>... loggers)", "full_signature": "@SafeVarargs public static Logger<M, E, F> from(Logger<M, E, F> logger, Logger<M, E, F>... loggers)", "class_method_signature": "CompositeLogger.from(Logger<M, E, F> logger, Logger<M, E, F>... loggers)", "testcase": false, "constructor": false}, {"identifier": "CompositeLogger", "parameters": "(List<Logger<M, E, F>> loggers)", "modifiers": "private", "return": "", "signature": " CompositeLogger(List<Logger<M, E, F>> loggers)", "full_signature": "private  CompositeLogger(List<Logger<M, E, F>> loggers)", "class_method_signature": "CompositeLogger.CompositeLogger(List<Logger<M, E, F>> loggers)", "testcase": false, "constructor": true}, {"identifier": "beforeInit", "parameters": "(M model)", "modifiers": "@Override public", "return": "void", "signature": "void beforeInit(M model)", "full_signature": "@Override public void beforeInit(M model)", "class_method_signature": "CompositeLogger.beforeInit(M model)", "testcase": false, "constructor": false}, {"identifier": "afterInit", "parameters": "(M model, First<M, F> result)", "modifiers": "@Override public", "return": "void", "signature": "void afterInit(M model, First<M, F> result)", "full_signature": "@Override public void afterInit(M model, First<M, F> result)", "class_method_signature": "CompositeLogger.afterInit(M model, First<M, F> result)", "testcase": false, "constructor": false}, {"identifier": "exceptionDuringInit", "parameters": "(M model, Throwable exception)", "modifiers": "@Override public", "return": "void", "signature": "void exceptionDuringInit(M model, Throwable exception)", "full_signature": "@Override public void exceptionDuringInit(M model, Throwable exception)", "class_method_signature": "CompositeLogger.exceptionDuringInit(M model, Throwable exception)", "testcase": false, "constructor": false}, {"identifier": "beforeUpdate", "parameters": "(M model, E event)", "modifiers": "@Override public", "return": "void", "signature": "void beforeUpdate(M model, E event)", "full_signature": "@Override public void beforeUpdate(M model, E event)", "class_method_signature": "CompositeLogger.beforeUpdate(M model, E event)", "testcase": false, "constructor": false}, {"identifier": "afterUpdate", "parameters": "(M model, E event, Next<M, F> result)", "modifiers": "@Override public", "return": "void", "signature": "void afterUpdate(M model, E event, Next<M, F> result)", "full_signature": "@Override public void afterUpdate(M model, E event, Next<M, F> result)", "class_method_signature": "CompositeLogger.afterUpdate(M model, E event, Next<M, F> result)", "testcase": false, "constructor": false}, {"identifier": "exceptionDuringUpdate", "parameters": "(M model, E event, Throwable exception)", "modifiers": "@Override public", "return": "void", "signature": "void exceptionDuringUpdate(M model, E event, Throwable exception)", "full_signature": "@Override public void exceptionDuringUpdate(M model, E event, Throwable exception)", "class_method_signature": "CompositeLogger.exceptionDuringUpdate(M model, E event, Throwable exception)", "testcase": false, "constructor": false}], "file": "mobius-extras/src/main/java/com/spotify/mobius/extras/CompositeLogger.java"}, "focal_method": {"identifier": "exceptionDuringUpdate", "parameters": "(M model, E event, Throwable exception)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void exceptionDuringUpdate(M model, E event, Throwable exception) {\n    for (Logger<M, E, F> logger : loggersReversed) {\n      logger.exceptionDuringUpdate(model, event, exception);\n    }\n  }", "signature": "void exceptionDuringUpdate(M model, E event, Throwable exception)", "full_signature": "@Override public void exceptionDuringUpdate(M model, E event, Throwable exception)", "class_method_signature": "CompositeLogger.exceptionDuringUpdate(M model, E event, Throwable exception)", "testcase": false, "constructor": false, "invocations": ["exceptionDuringUpdate"]}, "repository": {"repo_id": 118132535, "url": "https://github.com/spotify/mobius", "stars": 663, "created": "1/19/2018 2:07:51 PM +00:00", "updates": "2020-01-27T22:05:43+00:00", "fork": "False", "license": "licensed"}}