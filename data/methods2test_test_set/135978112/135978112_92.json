{"test_class": {"identifier": "StructTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Schema FLAT_STRUCT_SCHEMA = SchemaBuilder.struct()\n            .field(\"int8\", Schema.INT8_SCHEMA)\n            .field(\"int16\", Schema.INT16_SCHEMA)\n            .field(\"int32\", Schema.INT32_SCHEMA)\n            .field(\"int64\", Schema.INT64_SCHEMA)\n            .field(\"float32\", Schema.FLOAT32_SCHEMA)\n            .field(\"float64\", Schema.FLOAT64_SCHEMA)\n            .field(\"boolean\", Schema.BOOLEAN_SCHEMA)\n            .field(\"string\", Schema.STRING_SCHEMA)\n            .field(\"bytes\", Schema.BYTES_SCHEMA)\n            .build();", "modifier": "private static final", "type": "Schema", "declarator": "FLAT_STRUCT_SCHEMA = SchemaBuilder.struct()\n            .field(\"int8\", Schema.INT8_SCHEMA)\n            .field(\"int16\", Schema.INT16_SCHEMA)\n            .field(\"int32\", Schema.INT32_SCHEMA)\n            .field(\"int64\", Schema.INT64_SCHEMA)\n            .field(\"float32\", Schema.FLOAT32_SCHEMA)\n            .field(\"float64\", Schema.FLOAT64_SCHEMA)\n            .field(\"boolean\", Schema.BOOLEAN_SCHEMA)\n            .field(\"string\", Schema.STRING_SCHEMA)\n            .field(\"bytes\", Schema.BYTES_SCHEMA)\n            .build()", "var_name": "FLAT_STRUCT_SCHEMA"}, {"original_string": "private static final Schema ARRAY_SCHEMA = SchemaBuilder.array(Schema.INT8_SCHEMA).build();", "modifier": "private static final", "type": "Schema", "declarator": "ARRAY_SCHEMA = SchemaBuilder.array(Schema.INT8_SCHEMA).build()", "var_name": "ARRAY_SCHEMA"}, {"original_string": "private static final Schema MAP_SCHEMA = SchemaBuilder.map(\n            Schema.INT32_SCHEMA,\n            Schema.STRING_SCHEMA\n    ).build();", "modifier": "private static final", "type": "Schema", "declarator": "MAP_SCHEMA = SchemaBuilder.map(\n            Schema.INT32_SCHEMA,\n            Schema.STRING_SCHEMA\n    ).build()", "var_name": "MAP_SCHEMA"}, {"original_string": "private static final Schema NESTED_CHILD_SCHEMA = SchemaBuilder.struct()\n            .field(\"int8\", Schema.INT8_SCHEMA)\n            .build();", "modifier": "private static final", "type": "Schema", "declarator": "NESTED_CHILD_SCHEMA = SchemaBuilder.struct()\n            .field(\"int8\", Schema.INT8_SCHEMA)\n            .build()", "var_name": "NESTED_CHILD_SCHEMA"}, {"original_string": "private static final Schema NESTED_SCHEMA = SchemaBuilder.struct()\n            .field(\"array\", ARRAY_SCHEMA)\n            .field(\"map\", MAP_SCHEMA)\n            .field(\"nested\", NESTED_CHILD_SCHEMA)\n            .build();", "modifier": "private static final", "type": "Schema", "declarator": "NESTED_SCHEMA = SchemaBuilder.struct()\n            .field(\"array\", ARRAY_SCHEMA)\n            .field(\"map\", MAP_SCHEMA)\n            .field(\"nested\", NESTED_CHILD_SCHEMA)\n            .build()", "var_name": "NESTED_SCHEMA"}, {"original_string": "private static final Schema REQUIRED_FIELD_SCHEMA = Schema.INT8_SCHEMA;", "modifier": "private static final", "type": "Schema", "declarator": "REQUIRED_FIELD_SCHEMA = Schema.INT8_SCHEMA", "var_name": "REQUIRED_FIELD_SCHEMA"}, {"original_string": "private static final Schema OPTIONAL_FIELD_SCHEMA = SchemaBuilder.int8().optional().build();", "modifier": "private static final", "type": "Schema", "declarator": "OPTIONAL_FIELD_SCHEMA = SchemaBuilder.int8().optional().build()", "var_name": "OPTIONAL_FIELD_SCHEMA"}, {"original_string": "private static final Schema DEFAULT_FIELD_SCHEMA = SchemaBuilder.int8().defaultValue((byte) 0).build();", "modifier": "private static final", "type": "Schema", "declarator": "DEFAULT_FIELD_SCHEMA = SchemaBuilder.int8().defaultValue((byte) 0).build()", "var_name": "DEFAULT_FIELD_SCHEMA"}], "file": "connect/api/src/test/java/org/apache/kafka/connect/data/StructTest.java"}, "test_case": {"identifier": "testInvalidStructFieldSchema", "parameters": "()", "modifiers": "@Test(expected = DataException.class) public", "return": "void", "body": "@Test(expected = DataException.class)\n    public void testInvalidStructFieldSchema() {\n        new Struct(NESTED_SCHEMA).put(\"nested\", new Struct(MAP_SCHEMA));\n    }", "signature": "void testInvalidStructFieldSchema()", "full_signature": "@Test(expected = DataException.class) public void testInvalidStructFieldSchema()", "class_method_signature": "StructTest.testInvalidStructFieldSchema()", "testcase": true, "constructor": false, "invocations": ["put"]}, "focal_class": {"identifier": "Struct", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Schema schema;", "modifier": "private final", "type": "Schema", "declarator": "schema", "var_name": "schema"}, {"original_string": "private final Object[] values;", "modifier": "private final", "type": "Object[]", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "Struct", "parameters": "(Schema schema)", "modifiers": "public", "return": "", "signature": " Struct(Schema schema)", "full_signature": "public  Struct(Schema schema)", "class_method_signature": "Struct.Struct(Schema schema)", "testcase": false, "constructor": true}, {"identifier": "schema", "parameters": "()", "modifiers": "public", "return": "Schema", "signature": "Schema schema()", "full_signature": "public Schema schema()", "class_method_signature": "Struct.schema()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String fieldName)", "modifiers": "public", "return": "Object", "signature": "Object get(String fieldName)", "full_signature": "public Object get(String fieldName)", "class_method_signature": "Struct.get(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Field field)", "modifiers": "public", "return": "Object", "signature": "Object get(Field field)", "full_signature": "public Object get(Field field)", "class_method_signature": "Struct.get(Field field)", "testcase": false, "constructor": false}, {"identifier": "getWithoutDefault", "parameters": "(String fieldName)", "modifiers": "public", "return": "Object", "signature": "Object getWithoutDefault(String fieldName)", "full_signature": "public Object getWithoutDefault(String fieldName)", "class_method_signature": "Struct.getWithoutDefault(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getInt8", "parameters": "(String fieldName)", "modifiers": "public", "return": "Byte", "signature": "Byte getInt8(String fieldName)", "full_signature": "public Byte getInt8(String fieldName)", "class_method_signature": "Struct.getInt8(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getInt16", "parameters": "(String fieldName)", "modifiers": "public", "return": "Short", "signature": "Short getInt16(String fieldName)", "full_signature": "public Short getInt16(String fieldName)", "class_method_signature": "Struct.getInt16(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getInt32", "parameters": "(String fieldName)", "modifiers": "public", "return": "Integer", "signature": "Integer getInt32(String fieldName)", "full_signature": "public Integer getInt32(String fieldName)", "class_method_signature": "Struct.getInt32(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getInt64", "parameters": "(String fieldName)", "modifiers": "public", "return": "Long", "signature": "Long getInt64(String fieldName)", "full_signature": "public Long getInt64(String fieldName)", "class_method_signature": "Struct.getInt64(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getFloat32", "parameters": "(String fieldName)", "modifiers": "public", "return": "Float", "signature": "Float getFloat32(String fieldName)", "full_signature": "public Float getFloat32(String fieldName)", "class_method_signature": "Struct.getFloat32(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getFloat64", "parameters": "(String fieldName)", "modifiers": "public", "return": "Double", "signature": "Double getFloat64(String fieldName)", "full_signature": "public Double getFloat64(String fieldName)", "class_method_signature": "Struct.getFloat64(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getBoolean", "parameters": "(String fieldName)", "modifiers": "public", "return": "Boolean", "signature": "Boolean getBoolean(String fieldName)", "full_signature": "public Boolean getBoolean(String fieldName)", "class_method_signature": "Struct.getBoolean(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(String fieldName)", "modifiers": "public", "return": "String", "signature": "String getString(String fieldName)", "full_signature": "public String getString(String fieldName)", "class_method_signature": "Struct.getString(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(String fieldName)", "modifiers": "public", "return": "byte[]", "signature": "byte[] getBytes(String fieldName)", "full_signature": "public byte[] getBytes(String fieldName)", "class_method_signature": "Struct.getBytes(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getArray", "parameters": "(String fieldName)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<T>", "signature": "List<T> getArray(String fieldName)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<T> getArray(String fieldName)", "class_method_signature": "Struct.getArray(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getMap", "parameters": "(String fieldName)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Map<K, V>", "signature": "Map<K, V> getMap(String fieldName)", "full_signature": "@SuppressWarnings(\"unchecked\") public Map<K, V> getMap(String fieldName)", "class_method_signature": "Struct.getMap(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getStruct", "parameters": "(String fieldName)", "modifiers": "public", "return": "Struct", "signature": "Struct getStruct(String fieldName)", "full_signature": "public Struct getStruct(String fieldName)", "class_method_signature": "Struct.getStruct(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String fieldName, Object value)", "modifiers": "public", "return": "Struct", "signature": "Struct put(String fieldName, Object value)", "full_signature": "public Struct put(String fieldName, Object value)", "class_method_signature": "Struct.put(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Field field, Object value)", "modifiers": "public", "return": "Struct", "signature": "Struct put(Field field, Object value)", "full_signature": "public Struct put(Field field, Object value)", "class_method_signature": "Struct.put(Field field, Object value)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void validate()", "full_signature": "public void validate()", "class_method_signature": "Struct.validate()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Struct.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Struct.hashCode()", "testcase": false, "constructor": false}, {"identifier": "lookupField", "parameters": "(String fieldName)", "modifiers": "private", "return": "Field", "signature": "Field lookupField(String fieldName)", "full_signature": "private Field lookupField(String fieldName)", "class_method_signature": "Struct.lookupField(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getCheckType", "parameters": "(String fieldName, Schema.Type type)", "modifiers": "private", "return": "Object", "signature": "Object getCheckType(String fieldName, Schema.Type type)", "full_signature": "private Object getCheckType(String fieldName, Schema.Type type)", "class_method_signature": "Struct.getCheckType(String fieldName, Schema.Type type)", "testcase": false, "constructor": false}], "file": "connect/api/src/main/java/org/apache/kafka/connect/data/Struct.java"}, "focal_method": {"identifier": "put", "parameters": "(String fieldName, Object value)", "modifiers": "public", "return": "Struct", "body": "public Struct put(String fieldName, Object value) {\n        Field field = lookupField(fieldName);\n        return put(field, value);\n    }", "signature": "Struct put(String fieldName, Object value)", "full_signature": "public Struct put(String fieldName, Object value)", "class_method_signature": "Struct.put(String fieldName, Object value)", "testcase": false, "constructor": false, "invocations": ["lookupField", "put"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}