{"test_class": {"identifier": "XDocReportServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Rule\n    public JUnitRuleMockery2 context = JUnitRuleMockery2.createFor(JUnitRuleMockery2.Mode.INTERFACES_AND_CLASSES);", "modifier": "@Rule\n    public", "type": "JUnitRuleMockery2", "declarator": "context = JUnitRuleMockery2.createFor(JUnitRuleMockery2.Mode.INTERFACES_AND_CLASSES)", "var_name": "context"}, {"original_string": "XDocReportService service;", "modifier": "", "type": "XDocReportService", "declarator": "service", "var_name": "service"}], "file": "subdomains/xdocreport/applib/src/test/java/org/apache/isis/subdomains/xdocreport/applib/service/XDocReportServiceTest.java"}, "test_case": {"identifier": "simple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simple() throws Exception {\n\n        // given\n        InputStream in= new FileInputStream(new File(\"src/test/java/org/apache/isis/subdomains/xdocreport/applib/service/example/template/Project-template.docx\"));\n        final byte[] templateBytes = IOUtils.toByteArray(in);\n\n        Project project = new Project(\"XDocReport\");\n        List<Developer> developers = new ArrayList<>();\n        developers.add(new Developer(\"ZERR\", \"Angelo\", \"angelo.zerr@gmail.com\"));\n        developers.add(new Developer(\"Leclercq\", \"Pascal\", \"pascal.leclercq@gmail.com\"));\n        final ProjectDevelopersModel dataModel = new ProjectDevelopersModel(project, developers);\n\n        // when\n        final byte[] docxBytes = service.render(templateBytes, dataModel, OutputType.DOCX);\n\n        // then\n        new File(\"target\").mkdir(); // create the target folder if needed [gradle]\n        IOUtils.write(docxBytes,new FileOutputStream(new File(\"target/Project.docx\")));\n    }", "signature": "void simple()", "full_signature": "@Test public void simple()", "class_method_signature": "XDocReportServiceTest.simple()", "testcase": true, "constructor": false, "invocations": ["toByteArray", "add", "add", "render", "mkdir", "write"]}, "focal_class": {"identifier": "XDocReportService", "superclass": "", "interfaces": "", "fields": [{"original_string": "PdfOptions pdfOptions;", "modifier": "", "type": "PdfOptions", "declarator": "pdfOptions", "var_name": "pdfOptions"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "XDocReportService.init()", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(\n            final byte[] templateBytes,\n            final XDocReportModel dataModel,\n            final OutputType outputType)", "modifiers": "@Programmatic public", "return": "byte[]", "signature": "byte[] render(\n            final byte[] templateBytes,\n            final XDocReportModel dataModel,\n            final OutputType outputType)", "full_signature": "@Programmatic public byte[] render(\n            final byte[] templateBytes,\n            final XDocReportModel dataModel,\n            final OutputType outputType)", "class_method_signature": "XDocReportService.render(\n            final byte[] templateBytes,\n            final XDocReportModel dataModel,\n            final OutputType outputType)", "testcase": false, "constructor": false}, {"identifier": "toDocx", "parameters": "(final byte[] bytes, final XDocReportModel dataModel)", "modifiers": "private", "return": "byte[]", "signature": "byte[] toDocx(final byte[] bytes, final XDocReportModel dataModel)", "full_signature": "private byte[] toDocx(final byte[] bytes, final XDocReportModel dataModel)", "class_method_signature": "XDocReportService.toDocx(final byte[] bytes, final XDocReportModel dataModel)", "testcase": false, "constructor": false}, {"identifier": "toPdf", "parameters": "(final byte[] docxBytes)", "modifiers": "private", "return": "byte[]", "signature": "byte[] toPdf(final byte[] docxBytes)", "full_signature": "private byte[] toPdf(final byte[] docxBytes)", "class_method_signature": "XDocReportService.toPdf(final byte[] docxBytes)", "testcase": false, "constructor": false}, {"identifier": "pdfConverter", "parameters": "()", "modifiers": "protected", "return": "IXWPFConverter<PdfOptions>", "signature": "IXWPFConverter<PdfOptions> pdfConverter()", "full_signature": "protected IXWPFConverter<PdfOptions> pdfConverter()", "class_method_signature": "XDocReportService.pdfConverter()", "testcase": false, "constructor": false}], "file": "subdomains/xdocreport/applib/src/main/java/org/apache/isis/subdomains/xdocreport/applib/service/XDocReportService.java"}, "focal_method": {"identifier": "render", "parameters": "(\n            final byte[] templateBytes,\n            final XDocReportModel dataModel,\n            final OutputType outputType)", "modifiers": "@Programmatic public", "return": "byte[]", "body": "@Programmatic\n    public byte[] render(\n            final byte[] templateBytes,\n            final XDocReportModel dataModel,\n            final OutputType outputType) throws IOException {\n        try {\n            final byte[] docxBytes = toDocx(templateBytes, dataModel);\n\n            switch (outputType) {\n            case PDF:\n                return toPdf(docxBytes);\n            default: // ie DOCX\n                return docxBytes;\n            }\n\n        } catch (XDocReportException e) {\n            throw new IOException(e);\n        }\n    }", "signature": "byte[] render(\n            final byte[] templateBytes,\n            final XDocReportModel dataModel,\n            final OutputType outputType)", "full_signature": "@Programmatic public byte[] render(\n            final byte[] templateBytes,\n            final XDocReportModel dataModel,\n            final OutputType outputType)", "class_method_signature": "XDocReportService.render(\n            final byte[] templateBytes,\n            final XDocReportModel dataModel,\n            final OutputType outputType)", "testcase": false, "constructor": false, "invocations": ["toDocx", "toPdf"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}