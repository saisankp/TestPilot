{"test_class": {"identifier": "ConstantNaryTreeNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TreeNodeListenerStub<DefaultConstantNaryTreeNode<Object>> listener =\n\t\tnew TreeNodeListenerStub<>();", "modifier": "private final", "type": "TreeNodeListenerStub<DefaultConstantNaryTreeNode<Object>>", "declarator": "listener =\n\t\tnew TreeNodeListenerStub<>()", "var_name": "listener"}, {"original_string": "private DefaultConstantNaryTreeNode<Object> root;", "modifier": "private", "type": "DefaultConstantNaryTreeNode<Object>", "declarator": "root", "var_name": "root"}, {"original_string": "private DefaultConstantNaryTreeNode<Object> child1;", "modifier": "private", "type": "DefaultConstantNaryTreeNode<Object>", "declarator": "child1", "var_name": "child1"}, {"original_string": "private DefaultConstantNaryTreeNode<Object> child2;", "modifier": "private", "type": "DefaultConstantNaryTreeNode<Object>", "declarator": "child2", "var_name": "child2"}, {"original_string": "private DefaultConstantNaryTreeNode<Object> node;", "modifier": "private", "type": "DefaultConstantNaryTreeNode<Object>", "declarator": "node", "var_name": "node"}, {"original_string": "private DefaultConstantNaryTreeNode<Object> newNode;", "modifier": "private", "type": "DefaultConstantNaryTreeNode<Object>", "declarator": "newNode", "var_name": "newNode"}], "file": "core/maths/mathtree/src/test/java/org/arakhne/afc/math/tree/node/ConstantNaryTreeNodeTest.java"}, "test_case": {"identifier": "getNotNullChildCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getNotNullChildCount() {\n\t\tassertEquals(2, this.root.getNotNullChildCount());\n\t\tassertEquals(1, this.child1.getNotNullChildCount());\n\t\tassertEquals(0, this.child2.getNotNullChildCount());\n\t\tassertEquals(0, this.node.getNotNullChildCount());\n\t}", "signature": "void getNotNullChildCount()", "full_signature": "@Test public void getNotNullChildCount()", "class_method_signature": "ConstantNaryTreeNodeTest.getNotNullChildCount()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getNotNullChildCount", "assertEquals", "getNotNullChildCount", "assertEquals", "getNotNullChildCount", "assertEquals", "getNotNullChildCount"]}, "focal_class": {"identifier": "ConstantNaryTreeNode", "superclass": "extends AbstractTreeNode<D, N>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -3499092312746430238L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3499092312746430238L", "var_name": "serialVersionUID"}, {"original_string": "private final N[] children;", "modifier": "private final", "type": "N[]", "declarator": "children", "var_name": "children"}], "methods": [{"identifier": "ConstantNaryTreeNode", "parameters": "(int childCount)", "modifiers": "public", "return": "", "signature": " ConstantNaryTreeNode(int childCount)", "full_signature": "public  ConstantNaryTreeNode(int childCount)", "class_method_signature": "ConstantNaryTreeNode.ConstantNaryTreeNode(int childCount)", "testcase": false, "constructor": true}, {"identifier": "ConstantNaryTreeNode", "parameters": "(int childCount, Collection<D> data)", "modifiers": "public", "return": "", "signature": " ConstantNaryTreeNode(int childCount, Collection<D> data)", "full_signature": "public  ConstantNaryTreeNode(int childCount, Collection<D> data)", "class_method_signature": "ConstantNaryTreeNode.ConstantNaryTreeNode(int childCount, Collection<D> data)", "testcase": false, "constructor": true}, {"identifier": "ConstantNaryTreeNode", "parameters": "(int childCount, D data)", "modifiers": "public", "return": "", "signature": " ConstantNaryTreeNode(int childCount, D data)", "full_signature": "public  ConstantNaryTreeNode(int childCount, D data)", "class_method_signature": "ConstantNaryTreeNode.ConstantNaryTreeNode(int childCount, D data)", "testcase": false, "constructor": true}, {"identifier": "ConstantNaryTreeNode", "parameters": "(int childCount, boolean useLinkedList)", "modifiers": "public", "return": "", "signature": " ConstantNaryTreeNode(int childCount, boolean useLinkedList)", "full_signature": "public  ConstantNaryTreeNode(int childCount, boolean useLinkedList)", "class_method_signature": "ConstantNaryTreeNode.ConstantNaryTreeNode(int childCount, boolean useLinkedList)", "testcase": false, "constructor": true}, {"identifier": "ConstantNaryTreeNode", "parameters": "(int childCount, boolean useLinkedList, boolean copyDataCollection, List<D> data)", "modifiers": "public", "return": "", "signature": " ConstantNaryTreeNode(int childCount, boolean useLinkedList, boolean copyDataCollection, List<D> data)", "full_signature": "public  ConstantNaryTreeNode(int childCount, boolean useLinkedList, boolean copyDataCollection, List<D> data)", "class_method_signature": "ConstantNaryTreeNode.ConstantNaryTreeNode(int childCount, boolean useLinkedList, boolean copyDataCollection, List<D> data)", "testcase": false, "constructor": true}, {"identifier": "ConstantNaryTreeNode", "parameters": "(int childCount, boolean useLinkedList, D data)", "modifiers": "public", "return": "", "signature": " ConstantNaryTreeNode(int childCount, boolean useLinkedList, D data)", "full_signature": "public  ConstantNaryTreeNode(int childCount, boolean useLinkedList, D data)", "class_method_signature": "ConstantNaryTreeNode.ConstantNaryTreeNode(int childCount, boolean useLinkedList, D data)", "testcase": false, "constructor": true}, {"identifier": "newArray", "parameters": "(int size)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "N[]", "signature": "N[] newArray(int size)", "full_signature": "@SuppressWarnings(\"unchecked\") private static N[] newArray(int size)", "class_method_signature": "ConstantNaryTreeNode.newArray(int size)", "testcase": false, "constructor": false}, {"identifier": "getPartitionEnumeration", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Class<? extends Enum<?>>", "signature": "Class<? extends Enum<?>> getPartitionEnumeration()", "full_signature": "@Pure @Override public Class<? extends Enum<?>> getPartitionEnumeration()", "class_method_signature": "ConstantNaryTreeNode.getPartitionEnumeration()", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream in)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream in)", "full_signature": "private void readObject(ObjectInputStream in)", "class_method_signature": "ConstantNaryTreeNode.readObject(ObjectInputStream in)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "ConstantNaryTreeNode.clear()", "testcase": false, "constructor": false}, {"identifier": "getChildCount", "parameters": "()", "modifiers": "@Pure @Override public final", "return": "int", "signature": "int getChildCount()", "full_signature": "@Pure @Override public final int getChildCount()", "class_method_signature": "ConstantNaryTreeNode.getChildCount()", "testcase": false, "constructor": false}, {"identifier": "getNotNullChildCount", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int getNotNullChildCount()", "full_signature": "@Pure @Override public int getNotNullChildCount()", "class_method_signature": "ConstantNaryTreeNode.getNotNullChildCount()", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(N child)", "modifiers": "@Pure @Override public final", "return": "int", "signature": "int indexOf(N child)", "full_signature": "@Pure @Override public final int indexOf(N child)", "class_method_signature": "ConstantNaryTreeNode.indexOf(N child)", "testcase": false, "constructor": false}, {"identifier": "getChildAt", "parameters": "(int index)", "modifiers": "@Pure @Override public final", "return": "N", "signature": "N getChildAt(int index)", "full_signature": "@Pure @Override public final N getChildAt(int index)", "class_method_signature": "ConstantNaryTreeNode.getChildAt(int index)", "testcase": false, "constructor": false}, {"identifier": "moveTo", "parameters": "(N newParent, int index)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean moveTo(N newParent, int index)", "full_signature": "@Override public boolean moveTo(N newParent, int index)", "class_method_signature": "ConstantNaryTreeNode.moveTo(N newParent, int index)", "testcase": false, "constructor": false}, {"identifier": "setChildAt", "parameters": "(int index, N newChild)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setChildAt(int index, N newChild)", "full_signature": "@Override public boolean setChildAt(int index, N newChild)", "class_method_signature": "ConstantNaryTreeNode.setChildAt(int index, N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChildAtWithoutEventFiring", "parameters": "(int index, N newChild)", "modifiers": "@Override protected", "return": "void", "signature": "void setChildAtWithoutEventFiring(int index, N newChild)", "full_signature": "@Override protected void setChildAtWithoutEventFiring(int index, N newChild)", "class_method_signature": "ConstantNaryTreeNode.setChildAtWithoutEventFiring(int index, N newChild)", "testcase": false, "constructor": false}, {"identifier": "removeChild", "parameters": "(N child)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean removeChild(N child)", "full_signature": "@Override public final boolean removeChild(N child)", "class_method_signature": "ConstantNaryTreeNode.removeChild(N child)", "testcase": false, "constructor": false}, {"identifier": "isLeaf", "parameters": "()", "modifiers": "@Pure @Override public final", "return": "boolean", "signature": "boolean isLeaf()", "full_signature": "@Pure @Override public final boolean isLeaf()", "class_method_signature": "ConstantNaryTreeNode.isLeaf()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "(Object[] array)", "modifiers": "@Override public", "return": "void", "signature": "void getChildren(Object[] array)", "full_signature": "@Override public void getChildren(Object[] array)", "class_method_signature": "ConstantNaryTreeNode.getChildren(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "getMinHeight", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int getMinHeight()", "full_signature": "@Pure @Override public int getMinHeight()", "class_method_signature": "ConstantNaryTreeNode.getMinHeight()", "testcase": false, "constructor": false}, {"identifier": "getMaxHeight", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int getMaxHeight()", "full_signature": "@Pure @Override public int getMaxHeight()", "class_method_signature": "ConstantNaryTreeNode.getMaxHeight()", "testcase": false, "constructor": false}, {"identifier": "getHeights", "parameters": "(int currentHeight, List<Integer> heights)", "modifiers": "@Override protected", "return": "void", "signature": "void getHeights(int currentHeight, List<Integer> heights)", "full_signature": "@Override protected void getHeights(int currentHeight, List<Integer> heights)", "class_method_signature": "ConstantNaryTreeNode.getHeights(int currentHeight, List<Integer> heights)", "testcase": false, "constructor": false}], "file": "core/maths/mathtree/src/main/java/org/arakhne/afc/math/tree/node/ConstantNaryTreeNode.java"}, "focal_method": {"identifier": "getNotNullChildCount", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "body": "@Pure\n\t@Override\n\tpublic int getNotNullChildCount() {\n\t\treturn this.notNullChildCount;\n\t}", "signature": "int getNotNullChildCount()", "full_signature": "@Pure @Override public int getNotNullChildCount()", "class_method_signature": "ConstantNaryTreeNode.getNotNullChildCount()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}