{"test_class": {"identifier": "ListenerRepoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final long ID = 1l;", "modifier": "public static final", "type": "long", "declarator": "ID = 1l", "var_name": "ID"}, {"original_string": "public static final String TABLE_NAME = \"testTable\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_NAME = \"testTable\"", "var_name": "TABLE_NAME"}, {"original_string": "public static final int WAIT_IN_SEC = 20;", "modifier": "public static final", "type": "int", "declarator": "WAIT_IN_SEC = 20", "var_name": "WAIT_IN_SEC"}, {"original_string": "public static final Date TODAY = new Date();", "modifier": "public static final", "type": "Date", "declarator": "TODAY = new Date()", "var_name": "TODAY"}, {"original_string": "ListenerRepo repo;", "modifier": "", "type": "ListenerRepo", "declarator": "repo", "var_name": "repo"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}], "file": "reactive-source-mysql/src/test/java/org/reactivesource/mysql/ListenerRepoTest.java"}, "test_case": {"identifier": "testInsertThrowsDataAccessExceptionWhenSqlExceptionOccurs", "parameters": "()", "modifiers": "@Test(groups = SMALL, expectedExceptions = DataAccessException.class) public", "return": "void", "body": "@Test(groups = SMALL, expectedExceptions = DataAccessException.class)\n    public void testInsertThrowsDataAccessExceptionWhenSqlExceptionOccurs() throws SQLException {\n        Connection mockedConnection = mock(Connection.class);\n        when(mockedConnection.prepareStatement(anyString(), anyInt())).thenThrow(new SQLException());\n        MysqlConnectionProvider mockedProvider = mock(MysqlConnectionProvider.class);\n        when(mockedProvider.getConnection()).thenReturn(mockedConnection);\n        ListenerRepo mockedRepo = new ListenerRepo();\n\n        mockedRepo.insert(mock(Listener.class), mockedConnection);\n    }", "signature": "void testInsertThrowsDataAccessExceptionWhenSqlExceptionOccurs()", "full_signature": "@Test(groups = SMALL, expectedExceptions = DataAccessException.class) public void testInsertThrowsDataAccessExceptionWhenSqlExceptionOccurs()", "class_method_signature": "ListenerRepoTest.testInsertThrowsDataAccessExceptionWhenSqlExceptionOccurs()", "testcase": true, "constructor": false, "invocations": ["mock", "thenThrow", "when", "prepareStatement", "anyString", "anyInt", "mock", "thenReturn", "when", "getConnection", "insert", "mock"]}, "focal_class": {"identifier": "ListenerRepo", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String TABLE_NAME = \"REACTIVE_LISTENER\";", "modifier": "static final", "type": "String", "declarator": "TABLE_NAME = \"REACTIVE_LISTENER\"", "var_name": "TABLE_NAME"}, {"original_string": "static final String LISTENER_ID_COL = \"LISTENER_ID\";", "modifier": "static final", "type": "String", "declarator": "LISTENER_ID_COL = \"LISTENER_ID\"", "var_name": "LISTENER_ID_COL"}, {"original_string": "static final String TABLE_NAME_COL = \"TABLE_NAME\";", "modifier": "static final", "type": "String", "declarator": "TABLE_NAME_COL = \"TABLE_NAME\"", "var_name": "TABLE_NAME_COL"}, {"original_string": "static final String WAITING_TIMEOUT_SEC_COL = \"WAITING_TIMEOUT_SEC\";", "modifier": "static final", "type": "String", "declarator": "WAITING_TIMEOUT_SEC_COL = \"WAITING_TIMEOUT_SEC\"", "var_name": "WAITING_TIMEOUT_SEC_COL"}, {"original_string": "static final String LAST_CHECK_COL = \"LAST_CHECK\";", "modifier": "static final", "type": "String", "declarator": "LAST_CHECK_COL = \"LAST_CHECK\"", "var_name": "LAST_CHECK_COL"}, {"original_string": "static final String LAST_EVENT_ID_COL = \"LAST_EVENT_ID\";", "modifier": "static final", "type": "String", "declarator": "LAST_EVENT_ID_COL = \"LAST_EVENT_ID\"", "var_name": "LAST_EVENT_ID_COL"}, {"original_string": "private static final String INSERT_LISTENER_QUERY =\n            \"INSERT INTO \" + TABLE_NAME +\n                    \"(\" + LISTENER_ID_COL + \",\" + TABLE_NAME_COL + \",\" + WAITING_TIMEOUT_SEC_COL + \") \" +\n                    \"VALUES \" +\n                    \"(?, ?, ?)\";", "modifier": "private static final", "type": "String", "declarator": "INSERT_LISTENER_QUERY =\n            \"INSERT INTO \" + TABLE_NAME +\n                    \"(\" + LISTENER_ID_COL + \",\" + TABLE_NAME_COL + \",\" + WAITING_TIMEOUT_SEC_COL + \") \" +\n                    \"VALUES \" +\n                    \"(?, ?, ?)\"", "var_name": "INSERT_LISTENER_QUERY"}, {"original_string": "private static final String REFRESH_QUERY =\n            \"UPDATE \" + TABLE_NAME + \" SET \" + LAST_CHECK_COL + \" = NOW() \" +\n                    \"WHERE \" + LISTENER_ID_COL + \"=?\";", "modifier": "private static final", "type": "String", "declarator": "REFRESH_QUERY =\n            \"UPDATE \" + TABLE_NAME + \" SET \" + LAST_CHECK_COL + \" = NOW() \" +\n                    \"WHERE \" + LISTENER_ID_COL + \"=?\"", "var_name": "REFRESH_QUERY"}, {"original_string": "private static final String FIND_BY_ID_QUERY =\n            \"SELECT * FROM \" + TABLE_NAME + \" WHERE \" + LISTENER_ID_COL + \"=?\";", "modifier": "private static final", "type": "String", "declarator": "FIND_BY_ID_QUERY =\n            \"SELECT * FROM \" + TABLE_NAME + \" WHERE \" + LISTENER_ID_COL + \"=?\"", "var_name": "FIND_BY_ID_QUERY"}, {"original_string": "private static final String REMOVE_BY_ID_QUERY =\n            \"DELETE FROM \" + TABLE_NAME +\n                    \" WHERE \" + LISTENER_ID_COL + \"=?\";", "modifier": "private static final", "type": "String", "declarator": "REMOVE_BY_ID_QUERY =\n            \"DELETE FROM \" + TABLE_NAME +\n                    \" WHERE \" + LISTENER_ID_COL + \"=?\"", "var_name": "REMOVE_BY_ID_QUERY"}, {"original_string": "private static final String UPDATE_QUERY =\n            \"UPDATE \" + TABLE_NAME + \" SET \" + LAST_EVENT_ID_COL + \"=? \" +\n                    \"WHERE \" + LISTENER_ID_COL + \"=?\";", "modifier": "private static final", "type": "String", "declarator": "UPDATE_QUERY =\n            \"UPDATE \" + TABLE_NAME + \" SET \" + LAST_EVENT_ID_COL + \"=? \" +\n                    \"WHERE \" + LISTENER_ID_COL + \"=?\"", "var_name": "UPDATE_QUERY"}, {"original_string": "private static final String FIND_BY_TABLE_NAME_QUERY = \"SELECT * FROM \" + TABLE_NAME +\n            \" WHERE \" + TABLE_NAME_COL + \"=?\";", "modifier": "private static final", "type": "String", "declarator": "FIND_BY_TABLE_NAME_QUERY = \"SELECT * FROM \" + TABLE_NAME +\n            \" WHERE \" + TABLE_NAME_COL + \"=?\"", "var_name": "FIND_BY_TABLE_NAME_QUERY"}], "methods": [{"identifier": "insert", "parameters": "(Listener listener, Connection connection)", "modifiers": "public", "return": "Listener", "signature": "Listener insert(Listener listener, Connection connection)", "full_signature": "public Listener insert(Listener listener, Connection connection)", "class_method_signature": "ListenerRepo.insert(Listener listener, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "refreshLastCheck", "parameters": "(Listener listener, Connection connection)", "modifiers": "public", "return": "void", "signature": "void refreshLastCheck(Listener listener, Connection connection)", "full_signature": "public void refreshLastCheck(Listener listener, Connection connection)", "class_method_signature": "ListenerRepo.refreshLastCheck(Listener listener, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Listener listener, Connection connection)", "modifiers": "public", "return": "void", "signature": "void remove(Listener listener, Connection connection)", "full_signature": "public void remove(Listener listener, Connection connection)", "class_method_signature": "ListenerRepo.remove(Listener listener, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Listener listener, Connection connection)", "modifiers": "public", "return": "void", "signature": "void update(Listener listener, Connection connection)", "full_signature": "public void update(Listener listener, Connection connection)", "class_method_signature": "ListenerRepo.update(Listener listener, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(long id, Connection connection)", "modifiers": "public", "return": "Listener", "signature": "Listener findById(long id, Connection connection)", "full_signature": "public Listener findById(long id, Connection connection)", "class_method_signature": "ListenerRepo.findById(long id, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "findByTableName", "parameters": "(String tableName, Connection connection)", "modifiers": "public", "return": "List<Listener>", "signature": "List<Listener> findByTableName(String tableName, Connection connection)", "full_signature": "public List<Listener> findByTableName(String tableName, Connection connection)", "class_method_signature": "ListenerRepo.findByTableName(String tableName, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "extractListener", "parameters": "(ResultSet rs)", "modifiers": "static", "return": "Listener", "signature": "Listener extractListener(ResultSet rs)", "full_signature": "static Listener extractListener(ResultSet rs)", "class_method_signature": "ListenerRepo.extractListener(ResultSet rs)", "testcase": false, "constructor": false}], "file": "reactive-source-mysql/src/main/java/org/reactivesource/mysql/ListenerRepo.java"}, "focal_method": {"identifier": "insert", "parameters": "(Listener listener, Connection connection)", "modifiers": "public", "return": "Listener", "body": "public Listener insert(Listener listener, Connection connection) throws DataAccessException {\n        try (\n                PreparedStatement stmt = connection\n                        .prepareStatement(INSERT_LISTENER_QUERY, Statement.RETURN_GENERATED_KEYS)\n        ) {\n            if (listener.getId() == 0l) {\n                stmt.setObject(1, null);\n            } else {\n                stmt.setObject(1, listener.getId());\n            }\n            stmt.setObject(2, listener.getTableName());\n            stmt.setObject(3, listener.getWaitTimeout());\n            stmt.executeUpdate();\n\n            ResultSet rs = stmt.getGeneratedKeys();\n\n            rs.next();\n            long genId = rs.getLong(\"GENERATED_KEY\");\n            return findById(genId, connection);\n\n        } catch (SQLException e) {\n            throw new DataAccessException(\"Couldn't insert listener\", e);\n        }\n    }", "signature": "Listener insert(Listener listener, Connection connection)", "full_signature": "public Listener insert(Listener listener, Connection connection)", "class_method_signature": "ListenerRepo.insert(Listener listener, Connection connection)", "testcase": false, "constructor": false, "invocations": ["prepareStatement", "getId", "setObject", "setObject", "getId", "setObject", "getTableName", "setObject", "getWaitTimeout", "executeUpdate", "getGeneratedKeys", "next", "getLong", "findById"]}, "repository": {"repo_id": 18311299, "url": "https://github.com/eBay/reactive-source", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 317, "license": "licensed"}}