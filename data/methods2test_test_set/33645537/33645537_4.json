{"test_class": {"identifier": "BinarySearchTreeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TreeNode<Integer> node8;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node8", "var_name": "node8"}, {"original_string": "TreeNode<Integer> node6;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node6", "var_name": "node6"}, {"original_string": "TreeNode<Integer> node4;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node4", "var_name": "node4"}, {"original_string": "TreeNode<Integer> node7;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node7", "var_name": "node7"}, {"original_string": "TreeNode<Integer> node5;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node5", "var_name": "node5"}, {"original_string": "TreeNode<Integer> node4_4;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node4_4", "var_name": "node4_4"}, {"original_string": "TreeNode<Integer> node11;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node11", "var_name": "node11"}, {"original_string": "TreeNode<Integer> node9;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node9", "var_name": "node9"}, {"original_string": "TreeNode<Integer> node9_9;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node9_9", "var_name": "node9_9"}, {"original_string": "TreeNode<Integer> node12;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node12", "var_name": "node12"}], "file": "algs/src/test/java/org/buptdavid/datastructure/tree/BinarySearchTreeTest.java"}, "test_case": {"identifier": "testYES", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testYES(){\n\t\tnode8.left = node6;\n\t\tnode8.right = node11;\n\t\t\n\t\tnode6.left = node4;\n\t\tnode6.right = node7;\n\t\t\n\t\tnode4.left = node4_4;\n\t\tnode4.right = node5;\n\t\t\n\t\tnode11.left = node9;\n\t\tnode11.right = node12;\n\t\t\n\t\tnode9.left = node9_9;\n\t\t\n\t\tAssert.assertTrue(BinarySearchTree.checkBST(node8));\n\t}", "signature": "void testYES()", "full_signature": "@Test public void testYES()", "class_method_signature": "BinarySearchTreeTest.testYES()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "checkBST"]}, "focal_class": {"identifier": "BinarySearchTree", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "checkBSTMinMax", "parameters": "(TreeNode<Integer> root, Integer min, Integer max)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkBSTMinMax(TreeNode<Integer> root, Integer min, Integer max)", "full_signature": "private static boolean checkBSTMinMax(TreeNode<Integer> root, Integer min, Integer max)", "class_method_signature": "BinarySearchTree.checkBSTMinMax(TreeNode<Integer> root, Integer min, Integer max)", "testcase": false, "constructor": false}, {"identifier": "checkBST", "parameters": "(TreeNode<Integer> root)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkBST(TreeNode<Integer> root)", "full_signature": "public static boolean checkBST(TreeNode<Integer> root)", "class_method_signature": "BinarySearchTree.checkBST(TreeNode<Integer> root)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/org/buptdavid/datastructure/tree/BinarySearchTree.java"}, "focal_method": {"identifier": "checkBST", "parameters": "(TreeNode<Integer> root)", "modifiers": "public static", "return": "boolean", "body": "public static boolean checkBST(TreeNode<Integer> root){\n\t\treturn checkBSTMinMax(root, Integer.MIN_VALUE, Integer.MAX_VALUE);\n\t}", "signature": "boolean checkBST(TreeNode<Integer> root)", "full_signature": "public static boolean checkBST(TreeNode<Integer> root)", "class_method_signature": "BinarySearchTree.checkBST(TreeNode<Integer> root)", "testcase": false, "constructor": false, "invocations": ["checkBSTMinMax"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}