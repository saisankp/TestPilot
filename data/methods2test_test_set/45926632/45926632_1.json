{"test_class": {"identifier": "BasicCollectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static KafkaServer mockServer;", "modifier": "private static", "type": "KafkaServer", "declarator": "mockServer", "var_name": "mockServer"}], "file": "support-metrics-client/src/test/java/io/confluent/support/metrics/collectors/BasicCollectorTest.java"}, "test_case": {"identifier": "testCollectMetrics", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCollectMetrics() {\n    // Given\n    TimeUtils time = new TimeUtils();\n    Uuid uuid = new Uuid();\n    long unixTimeAtTestStart = time.nowInUnixTime();\n    Collector metricsCollector = new BasicCollector(mockServer, time, uuid);\n\n    // When\n    GenericContainer metricsRecord = metricsCollector.collectMetrics();\n\n    // Then\n    assertThat(metricsRecord).isInstanceOf(SupportKafkaMetricsBasic.class);\n    assertThat(metricsRecord.getSchema()).isEqualTo(SupportKafkaMetricsBasic.getClassSchema());\n    SupportKafkaMetricsBasic basicRecord = (SupportKafkaMetricsBasic) metricsRecord;\n    assertThat(basicRecord.getTimestamp()).isBetween(unixTimeAtTestStart, time.nowInUnixTime());\n    assertThat(basicRecord.getKafkaVersion()).isEqualTo(AppInfoParser.getVersion());\n    assertThat(basicRecord.getConfluentPlatformVersion()).isEqualTo(Version.getVersion());\n    assertThat(basicRecord.getCollectorState()).isEqualTo(metricsCollector.getRuntimeState().stateId());\n    assertThat(basicRecord.getBrokerProcessUUID()).isEqualTo(uuid.toString());\n  }", "signature": "void testCollectMetrics()", "full_signature": "@Test public void testCollectMetrics()", "class_method_signature": "BasicCollectorTest.testCollectMetrics()", "testcase": true, "constructor": false, "invocations": ["nowInUnixTime", "collectMetrics", "isInstanceOf", "assertThat", "isEqualTo", "assertThat", "getSchema", "getClassSchema", "isBetween", "assertThat", "getTimestamp", "nowInUnixTime", "isEqualTo", "assertThat", "getKafkaVersion", "getVersion", "isEqualTo", "assertThat", "getConfluentPlatformVersion", "getVersion", "isEqualTo", "assertThat", "getCollectorState", "stateId", "getRuntimeState", "isEqualTo", "assertThat", "getBrokerProcessUUID", "toString"]}, "focal_class": {"identifier": "BasicCollector", "superclass": "extends Collector", "interfaces": "", "fields": [{"original_string": "private final TimeUtils time;", "modifier": "private final", "type": "TimeUtils", "declarator": "time", "var_name": "time"}, {"original_string": "private final Uuid uuid;", "modifier": "private final", "type": "Uuid", "declarator": "uuid", "var_name": "uuid"}, {"original_string": "private final KafkaServer server;", "modifier": "private final", "type": "KafkaServer", "declarator": "server", "var_name": "server"}], "methods": [{"identifier": "BasicCollector", "parameters": "(\n      KafkaServer server,\n      TimeUtils time\n  )", "modifiers": "public", "return": "", "signature": " BasicCollector(\n      KafkaServer server,\n      TimeUtils time\n  )", "full_signature": "public  BasicCollector(\n      KafkaServer server,\n      TimeUtils time\n  )", "class_method_signature": "BasicCollector.BasicCollector(\n      KafkaServer server,\n      TimeUtils time\n  )", "testcase": false, "constructor": true}, {"identifier": "BasicCollector", "parameters": "(\n      KafkaServer server,\n      TimeUtils time,\n      Uuid uuid\n  )", "modifiers": "public", "return": "", "signature": " BasicCollector(\n      KafkaServer server,\n      TimeUtils time,\n      Uuid uuid\n  )", "full_signature": "public  BasicCollector(\n      KafkaServer server,\n      TimeUtils time,\n      Uuid uuid\n  )", "class_method_signature": "BasicCollector.BasicCollector(\n      KafkaServer server,\n      TimeUtils time,\n      Uuid uuid\n  )", "testcase": false, "constructor": true}, {"identifier": "collectMetrics", "parameters": "()", "modifiers": "@Override public", "return": "GenericContainer", "signature": "GenericContainer collectMetrics()", "full_signature": "@Override public GenericContainer collectMetrics()", "class_method_signature": "BasicCollector.collectMetrics()", "testcase": false, "constructor": false}], "file": "support-metrics-client/src/main/java/io/confluent/support/metrics/collectors/BasicCollector.java"}, "focal_method": {"identifier": "collectMetrics", "parameters": "()", "modifiers": "@Override public", "return": "GenericContainer", "body": "@Override\n  public GenericContainer collectMetrics() {\n    SupportKafkaMetricsBasic metricsRecord = new SupportKafkaMetricsBasic();\n    metricsRecord.setTimestamp(time.nowInUnixTime());\n    metricsRecord.setKafkaVersion(AppInfoParser.getVersion());\n    metricsRecord.setConfluentPlatformVersion(Version.getVersion());\n    metricsRecord.setCollectorState(this.getRuntimeState().stateId());\n    metricsRecord.setBrokerProcessUUID(uuid.toString());\n    metricsRecord.setClusterId(server.clusterId());\n    return metricsRecord;\n  }", "signature": "GenericContainer collectMetrics()", "full_signature": "@Override public GenericContainer collectMetrics()", "class_method_signature": "BasicCollector.collectMetrics()", "testcase": false, "constructor": false, "invocations": ["setTimestamp", "nowInUnixTime", "setKafkaVersion", "getVersion", "setConfluentPlatformVersion", "getVersion", "setCollectorState", "stateId", "getRuntimeState", "setBrokerProcessUUID", "toString", "setClusterId", "clusterId"]}, "repository": {"repo_id": 45926632, "url": "https://github.com/confluentinc/support-metrics-client", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 5, "size": 858, "license": "licensed"}}