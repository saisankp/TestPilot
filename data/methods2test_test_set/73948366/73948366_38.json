{"test_class": {"identifier": "ConfigPropertiesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String ROOT_DIR;", "modifier": "private static", "type": "String", "declarator": "ROOT_DIR", "var_name": "ROOT_DIR"}, {"original_string": "public static final String STR_DEF_ROOT     = \"/home/athenz\";", "modifier": "public static final", "type": "String", "declarator": "STR_DEF_ROOT     = \"/home/athenz\"", "var_name": "STR_DEF_ROOT"}, {"original_string": "private static final String CONFIG_TEST_PROP_ROOT_DIR = \"athenz.config.properties.test.root.dir\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_TEST_PROP_ROOT_DIR = \"athenz.config.properties.test.root.dir\"", "var_name": "CONFIG_TEST_PROP_ROOT_DIR"}], "file": "libs/java/server_common/src/test/java/com/yahoo/athenz/common/server/util/ConfigPropertiesTest.java"}, "test_case": {"identifier": "testLoadProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadProperties() throws IOException {\n        assertThrows(RuntimeException.class, () -> {\n            ConfigProperties.loadProperties(\"FailFile.txt\");\n        });\n\n        File currentDirectory = new File(new File(\".\").getAbsolutePath());\n\n        assertThrows(RuntimeException.class, () -> {\n            ConfigProperties.loadProperties(currentDirectory.getCanonicalPath() + \"/src/test/resources/testFileConfigEmpty.properties\");\n        });\n\n        ConfigProperties.loadProperties(currentDirectory.getCanonicalPath() + \"/src/test/resources/testFileConfig.properties\");\n    }", "signature": "void testLoadProperties()", "full_signature": "@Test public void testLoadProperties()", "class_method_signature": "ConfigPropertiesTest.testLoadProperties()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "loadProperties", "getAbsolutePath", "assertThrows", "loadProperties", "getCanonicalPath", "loadProperties", "getCanonicalPath"]}, "focal_class": {"identifier": "ConfigProperties", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ConfigProperties.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ConfigProperties.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "loadProperties", "parameters": "(String propFile)", "modifiers": "public static", "return": "void", "signature": "void loadProperties(String propFile)", "full_signature": "public static void loadProperties(String propFile)", "class_method_signature": "ConfigProperties.loadProperties(String propFile)", "testcase": false, "constructor": false}, {"identifier": "getPortNumber", "parameters": "(String property, int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int getPortNumber(String property, int defaultValue)", "full_signature": "public static int getPortNumber(String property, int defaultValue)", "class_method_signature": "ConfigProperties.getPortNumber(String property, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "retrieveConfigSetting", "parameters": "(String property, int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int retrieveConfigSetting(String property, int defaultValue)", "full_signature": "public static int retrieveConfigSetting(String property, int defaultValue)", "class_method_signature": "ConfigProperties.retrieveConfigSetting(String property, int defaultValue)", "testcase": false, "constructor": false}], "file": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/util/ConfigProperties.java"}, "focal_method": {"identifier": "loadProperties", "parameters": "(String propFile)", "modifiers": "public static", "return": "void", "body": "public static void loadProperties(String propFile) {\n        \n        Properties prop = new Properties();\n        try (InputStream is = new FileInputStream(propFile)) {\n            prop.load(is);\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Error while loading \" + propFile, ex);\n        }\n        \n        if (prop.isEmpty()) {\n            throw new RuntimeException(\"No data set in \" + propFile);\n        }\n        \n        LOGGER.info(\"Loading system properties from {}...\", propFile);\n        Enumeration<?> enumeration = prop.propertyNames();\n        while (enumeration.hasMoreElements()) {\n            String key = (String) enumeration.nextElement();\n            String value = prop.getProperty(key);\n            \n            if (!value.isEmpty()) {\n                System.setProperty(key, value);\n                LOGGER.info(\"property name={}, value={}\", key, value);\n            }\n        }\n    }", "signature": "void loadProperties(String propFile)", "full_signature": "public static void loadProperties(String propFile)", "class_method_signature": "ConfigProperties.loadProperties(String propFile)", "testcase": false, "constructor": false, "invocations": ["load", "isEmpty", "info", "propertyNames", "hasMoreElements", "nextElement", "getProperty", "isEmpty", "setProperty", "info"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}