{"test_class": {"identifier": "DefaultSlingSimulatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultSlingSimulator slingSimulator = new DefaultSlingSimulator();", "modifier": "private", "type": "DefaultSlingSimulator", "declarator": "slingSimulator = new DefaultSlingSimulator()", "var_name": "slingSimulator"}], "file": "core/src/test/java/net/adamcin/oakpal/core/sling/DefaultSlingSimulatorTest.java"}, "test_case": {"identifier": "testLoadJcrProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadJcrProperties() throws Exception {\n        final Map<String, Object> props = new HashMap<>();\n        OakpalPlan.fromJson(key(keys().repoInits(), arr()\n                .val(\"register nodetypes\")\n                .val(\"<<===\")\n                .val(\"<'sling'='http://sling.apache.org/jcr/sling/1.0'>\")\n                .val(\"[sling:OsgiConfig] > nt:unstructured, nt:hierarchyNode\")\n                .val(\"===>>\")\n                .val(\"create path (nt:folder) /apps/config/Test(sling:OsgiConfig)\")\n                .val(\"set properties on /apps/config/Test\")\n                .val(\"  set sling:ResourceType{String} to /x/y/z\")\n                .val(\"  set foo{String} to bar\")\n                .val(\"  set foos to bar, bar, bar\")\n                .val(\"  set ones{Long} to 1, 1, 1\")\n                .val(\"end\")\n        ).get()).toOakMachineBuilder(null, getClass().getClassLoader())\n                .build().adminInitAndInspect(session -> {\n            Node testNode = session.getNode(\"/apps/config/Test\");\n            testNode.setProperty(\"nothing\", new String[0]);\n            session.save();\n            DefaultSlingSimulator.loadJcrProperties(props, testNode);\n        });\n\n        final Map<String, Object> expectProps = new HashMap<>();\n        expectProps.put(\"foo\", \"bar\");\n        expectProps.put(\"foos\", Stream.of(\"bar\", \"bar\", \"bar\").toArray(String[]::new));\n        expectProps.put(\"ones\", Stream.of(1L, 1L, 1L).toArray(Long[]::new));\n        expectProps.put(\"nothing\", new String[0]);\n\n        assertEquals(\"expect same keys\", expectProps.keySet(), props.keySet());\n        for (Map.Entry<String, Object> entry : expectProps.entrySet()) {\n            Object expectValue = entry.getValue();\n            if (expectValue.getClass().isArray()) {\n                assertArrayEquals(\"expect equal array for key \" + entry.getKey(), (Object[]) expectValue,\n                        (Object[]) props.get(entry.getKey()));\n            } else {\n                assertEquals(\"expect equal value for key \" + entry.getKey(), expectValue,\n                        props.get(entry.getKey()));\n            }\n        }\n    }", "signature": "void testLoadJcrProperties()", "full_signature": "@Test public void testLoadJcrProperties()", "class_method_signature": "DefaultSlingSimulatorTest.testLoadJcrProperties()", "testcase": true, "constructor": false, "invocations": ["adminInitAndInspect", "build", "toOakMachineBuilder", "fromJson", "get", "key", "repoInits", "keys", "val", "val", "val", "val", "val", "val", "val", "val", "val", "val", "val", "val", "arr", "getClassLoader", "getClass", "getNode", "setProperty", "save", "loadJcrProperties", "put", "put", "toArray", "of", "put", "toArray", "of", "put", "assertEquals", "keySet", "keySet", "entrySet", "getValue", "isArray", "getClass", "assertArrayEquals", "getKey", "get", "getKey", "assertEquals", "getKey", "get", "getKey"]}, "focal_class": {"identifier": "DefaultSlingSimulator", "superclass": "", "interfaces": "implements SlingSimulatorBackend, SlingSimulator", "fields": [{"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private JcrPackageManager packageManager;", "modifier": "private", "type": "JcrPackageManager", "declarator": "packageManager", "var_name": "packageManager"}, {"original_string": "private ErrorListener errorListener;", "modifier": "private", "type": "ErrorListener", "declarator": "errorListener", "var_name": "errorListener"}, {"original_string": "private final LinkedList<SlingInstallable> installables = new LinkedList<>();", "modifier": "private final", "type": "LinkedList<SlingInstallable>", "declarator": "installables = new LinkedList<>()", "var_name": "installables"}, {"original_string": "static final String SLING_NS = \"http://sling.apache.org/jcr/sling/1.0\";", "modifier": "static final", "type": "String", "declarator": "SLING_NS = \"http://sling.apache.org/jcr/sling/1.0\"", "var_name": "SLING_NS"}, {"original_string": "static final String SLING_OSGI_CONFIG = \"{\" + SLING_NS + \"}OsgiConfig\";", "modifier": "static final", "type": "String", "declarator": "SLING_OSGI_CONFIG = \"{\" + SLING_NS + \"}OsgiConfig\"", "var_name": "SLING_OSGI_CONFIG"}, {"original_string": "static final String JCR_CONTENT_DATA = \"jcr:content/jcr:data\";", "modifier": "static final", "type": "String", "declarator": "JCR_CONTENT_DATA = \"jcr:content/jcr:data\"", "var_name": "JCR_CONTENT_DATA"}, {"original_string": "private static final List<String> EXTENSIONS = Arrays.asList(\".config\", \".properties\", \".cfg\", \".cfg.json\");", "modifier": "private static final", "type": "List<String>", "declarator": "EXTENSIONS = Arrays.asList(\".config\", \".properties\", \".cfg\", \".cfg.json\")", "var_name": "EXTENSIONS"}], "methods": [{"identifier": "instance", "parameters": "()", "modifiers": "public static", "return": "SlingSimulatorBackend", "signature": "SlingSimulatorBackend instance()", "full_signature": "public static SlingSimulatorBackend instance()", "class_method_signature": "DefaultSlingSimulator.instance()", "testcase": false, "constructor": false}, {"identifier": "startedScan", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startedScan()", "full_signature": "@Override public void startedScan()", "class_method_signature": "DefaultSlingSimulator.startedScan()", "testcase": false, "constructor": false}, {"identifier": "setSession", "parameters": "(final Session session)", "modifiers": "@Override public", "return": "void", "signature": "void setSession(final Session session)", "full_signature": "@Override public void setSession(final Session session)", "class_method_signature": "DefaultSlingSimulator.setSession(final Session session)", "testcase": false, "constructor": false}, {"identifier": "setPackageManager", "parameters": "(final JcrPackageManager packageManager)", "modifiers": "@Override public", "return": "void", "signature": "void setPackageManager(final JcrPackageManager packageManager)", "full_signature": "@Override public void setPackageManager(final JcrPackageManager packageManager)", "class_method_signature": "DefaultSlingSimulator.setPackageManager(final JcrPackageManager packageManager)", "testcase": false, "constructor": false}, {"identifier": "setErrorListener", "parameters": "(final ErrorListener errorListener)", "modifiers": "@Override public", "return": "void", "signature": "void setErrorListener(final ErrorListener errorListener)", "full_signature": "@Override public void setErrorListener(final ErrorListener errorListener)", "class_method_signature": "DefaultSlingSimulator.setErrorListener(final ErrorListener errorListener)", "testcase": false, "constructor": false}, {"identifier": "dequeueInstallable", "parameters": "()", "modifiers": "@Override public @Nullable", "return": "SlingInstallable", "signature": "SlingInstallable dequeueInstallable()", "full_signature": "@Override public @Nullable SlingInstallable dequeueInstallable()", "class_method_signature": "DefaultSlingSimulator.dequeueInstallable()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(@NotNull final SlingOpenable<ResourceType> installable)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public @NotNull", "return": "Fun.ThrowingSupplier<ResourceType>", "signature": "Fun.ThrowingSupplier<ResourceType> open(@NotNull final SlingOpenable<ResourceType> installable)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public @NotNull Fun.ThrowingSupplier<ResourceType> open(@NotNull final SlingOpenable<ResourceType> installable)", "class_method_signature": "DefaultSlingSimulator.open(@NotNull final SlingOpenable<ResourceType> installable)", "testcase": false, "constructor": false}, {"identifier": "openEmbeddedPackage", "parameters": "(@NotNull final EmbeddedPackageInstallable installable)", "modifiers": "public @NotNull", "return": "JcrPackage", "signature": "JcrPackage openEmbeddedPackage(@NotNull final EmbeddedPackageInstallable installable)", "full_signature": "public @NotNull JcrPackage openEmbeddedPackage(@NotNull final EmbeddedPackageInstallable installable)", "class_method_signature": "DefaultSlingSimulator.openEmbeddedPackage(@NotNull final EmbeddedPackageInstallable installable)", "testcase": false, "constructor": false}, {"identifier": "createInstallableOrReport", "parameters": "(final @NotNull SlingInstallableParams<T> params,\n                                                                       final @NotNull PackageId parentPackageId,\n                                                                       final @NotNull String jcrPath)", "modifiers": "", "return": "Optional<T>", "signature": "Optional<T> createInstallableOrReport(final @NotNull SlingInstallableParams<T> params,\n                                                                       final @NotNull PackageId parentPackageId,\n                                                                       final @NotNull String jcrPath)", "full_signature": " Optional<T> createInstallableOrReport(final @NotNull SlingInstallableParams<T> params,\n                                                                       final @NotNull PackageId parentPackageId,\n                                                                       final @NotNull String jcrPath)", "class_method_signature": "DefaultSlingSimulator.createInstallableOrReport(final @NotNull SlingInstallableParams<T> params,\n                                                                       final @NotNull PackageId parentPackageId,\n                                                                       final @NotNull String jcrPath)", "testcase": false, "constructor": false}, {"identifier": "internalAddInstallable", "parameters": "(final @NotNull SlingInstallable installable)", "modifiers": "", "return": "void", "signature": "void internalAddInstallable(final @NotNull SlingInstallable installable)", "full_signature": " void internalAddInstallable(final @NotNull SlingInstallable installable)", "class_method_signature": "DefaultSlingSimulator.internalAddInstallable(final @NotNull SlingInstallable installable)", "testcase": false, "constructor": false}, {"identifier": "addInstallableNode", "parameters": "(final @NotNull PackageId parentPackageId,\n                                                         final @NotNull Node node)", "modifiers": "@Override public @Nullable", "return": "SlingInstallable", "signature": "SlingInstallable addInstallableNode(final @NotNull PackageId parentPackageId,\n                                                         final @NotNull Node node)", "full_signature": "@Override public @Nullable SlingInstallable addInstallableNode(final @NotNull PackageId parentPackageId,\n                                                         final @NotNull Node node)", "class_method_signature": "DefaultSlingSimulator.addInstallableNode(final @NotNull PackageId parentPackageId,\n                                                         final @NotNull Node node)", "testcase": false, "constructor": false}, {"identifier": "getInstallables", "parameters": "()", "modifiers": "", "return": "LinkedList<SlingInstallable>", "signature": "LinkedList<SlingInstallable> getInstallables()", "full_signature": " LinkedList<SlingInstallable> getInstallables()", "class_method_signature": "DefaultSlingSimulator.getInstallables()", "testcase": false, "constructor": false}, {"identifier": "shufflePackagesByDependency", "parameters": "()", "modifiers": "", "return": "void", "signature": "void shufflePackagesByDependency()", "full_signature": " void shufflePackagesByDependency()", "class_method_signature": "DefaultSlingSimulator.shufflePackagesByDependency()", "testcase": false, "constructor": false}, {"identifier": "readInstallableParamsFromNode", "parameters": "(final @NotNull Node node)", "modifiers": "@NotNull", "return": "Result<Optional<SlingInstallableParams<?>>>", "signature": "Result<Optional<SlingInstallableParams<?>>> readInstallableParamsFromNode(final @NotNull Node node)", "full_signature": "@NotNull Result<Optional<SlingInstallableParams<?>>> readInstallableParamsFromNode(final @NotNull Node node)", "class_method_signature": "DefaultSlingSimulator.readInstallableParamsFromNode(final @NotNull Node node)", "testcase": false, "constructor": false}, {"identifier": "maybePackageResource", "parameters": "(final @NotNull NodeRes nodeRes)", "modifiers": "@Nullable", "return": "EmbeddedPackageInstallableParams", "signature": "EmbeddedPackageInstallableParams maybePackageResource(final @NotNull NodeRes nodeRes)", "full_signature": "@Nullable EmbeddedPackageInstallableParams maybePackageResource(final @NotNull NodeRes nodeRes)", "class_method_signature": "DefaultSlingSimulator.maybePackageResource(final @NotNull NodeRes nodeRes)", "testcase": false, "constructor": false}, {"identifier": "separatorsToUnix", "parameters": "(final String path)", "modifiers": "static", "return": "String", "signature": "String separatorsToUnix(final String path)", "full_signature": "static String separatorsToUnix(final String path)", "class_method_signature": "DefaultSlingSimulator.separatorsToUnix(final String path)", "testcase": false, "constructor": false}, {"identifier": "getResourceId", "parameters": "(final String rawUrl)", "modifiers": "static", "return": "String", "signature": "String getResourceId(final String rawUrl)", "full_signature": "static String getResourceId(final String rawUrl)", "class_method_signature": "DefaultSlingSimulator.getResourceId(final String rawUrl)", "testcase": false, "constructor": false}, {"identifier": "removeConfigExtension", "parameters": "(final String id)", "modifiers": "static", "return": "String", "signature": "String removeConfigExtension(final String id)", "full_signature": "static String removeConfigExtension(final String id)", "class_method_signature": "DefaultSlingSimulator.removeConfigExtension(final String id)", "testcase": false, "constructor": false}, {"identifier": "isConfigExtension", "parameters": "(String url)", "modifiers": "static", "return": "boolean", "signature": "boolean isConfigExtension(String url)", "full_signature": "static boolean isConfigExtension(String url)", "class_method_signature": "DefaultSlingSimulator.isConfigExtension(String url)", "testcase": false, "constructor": false}, {"identifier": "readDictionary", "parameters": "(\n            final InputStream is, final String id)", "modifiers": "static", "return": "Map<String, Object>", "signature": "Map<String, Object> readDictionary(\n            final InputStream is, final String id)", "full_signature": "static Map<String, Object> readDictionary(\n            final InputStream is, final String id)", "class_method_signature": "DefaultSlingSimulator.readDictionary(\n            final InputStream is, final String id)", "testcase": false, "constructor": false}, {"identifier": "maybeConfigResource", "parameters": "(final @NotNull NodeRes resource)", "modifiers": "static @Nullable", "return": "OsgiConfigInstallableParams", "signature": "OsgiConfigInstallableParams maybeConfigResource(final @NotNull NodeRes resource)", "full_signature": "static @Nullable OsgiConfigInstallableParams maybeConfigResource(final @NotNull NodeRes resource)", "class_method_signature": "DefaultSlingSimulator.maybeConfigResource(final @NotNull NodeRes resource)", "testcase": false, "constructor": false}, {"identifier": "loadJcrProperties", "parameters": "(final @NotNull Map<String, Object> configMap, final @NotNull Node configNode)", "modifiers": "static", "return": "void", "signature": "void loadJcrProperties(final @NotNull Map<String, Object> configMap, final @NotNull Node configNode)", "full_signature": "static void loadJcrProperties(final @NotNull Map<String, Object> configMap, final @NotNull Node configNode)", "class_method_signature": "DefaultSlingSimulator.loadJcrProperties(final @NotNull Map<String, Object> configMap, final @NotNull Node configNode)", "testcase": false, "constructor": false}, {"identifier": "convertJcrValue", "parameters": "(final @NotNull Value value)", "modifiers": "static @Nullable", "return": "Object", "signature": "Object convertJcrValue(final @NotNull Value value)", "full_signature": "static @Nullable Object convertJcrValue(final @NotNull Value value)", "class_method_signature": "DefaultSlingSimulator.convertJcrValue(final @NotNull Value value)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/sling/DefaultSlingSimulator.java"}, "focal_method": {"identifier": "loadJcrProperties", "parameters": "(final @NotNull Map<String, Object> configMap, final @NotNull Node configNode)", "modifiers": "static", "return": "void", "body": "static void loadJcrProperties(final @NotNull Map<String, Object> configMap, final @NotNull Node configNode)\n            throws RepositoryException {\n        final PropertyIterator pi = configNode.getProperties();\n        while (pi.hasNext()) {\n            final Property p = pi.nextProperty();\n            final String name = p.getName();\n\n            // ignore jcr: and similar properties\n            if (name.contains(\":\")) {\n                continue;\n            }\n            if (p.getDefinition().isMultiple()) {\n                Object[] data = null;\n                final Value[] values = p.getValues();\n                int i = 0;\n                for (Value v : values) {\n                    Object o = convertJcrValue(v);\n                    if (o != null) {\n                        if (i == 0) {\n                            data = (Object[]) Array.newInstance(o.getClass(), values.length);\n                        }\n                        data[i++] = o;\n                    }\n                }\n                // create empty array in case no value is specified\n                if (data == null) {\n                    data = new String[0];\n                }\n                configMap.put(name, data);\n\n            } else {\n                final Object o = convertJcrValue(p.getValue());\n                if (o != null) {\n                    configMap.put(name, o);\n                }\n            }\n        }\n    }", "signature": "void loadJcrProperties(final @NotNull Map<String, Object> configMap, final @NotNull Node configNode)", "full_signature": "static void loadJcrProperties(final @NotNull Map<String, Object> configMap, final @NotNull Node configNode)", "class_method_signature": "DefaultSlingSimulator.loadJcrProperties(final @NotNull Map<String, Object> configMap, final @NotNull Node configNode)", "testcase": false, "constructor": false, "invocations": ["getProperties", "hasNext", "nextProperty", "getName", "contains", "isMultiple", "getDefinition", "getValues", "convertJcrValue", "newInstance", "getClass", "put", "convertJcrValue", "getValue", "put"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}