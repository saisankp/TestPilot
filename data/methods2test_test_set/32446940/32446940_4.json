{"test_class": {"identifier": "TextSplitterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DrawHandler dimensionCalculatorDrawHandler = new DummyDrawHandler() {\n\t\t@Override\n\t\tprotected DimensionDouble textDimensionHelper(StringStyle sinlgeLine) {\n\t\t\t// return dimensions which do not depend on local swing or font settings to make sure tests work on every JRE\n\t\t\treturn new DimensionDouble(sinlgeLine.getStringWithoutMarkup().length() * 7, 10);\n\t\t}\n\n\t};", "modifier": "private static final", "type": "DrawHandler", "declarator": "dimensionCalculatorDrawHandler = new DummyDrawHandler() {\n\t\t@Override\n\t\tprotected DimensionDouble textDimensionHelper(StringStyle sinlgeLine) {\n\t\t\t// return dimensions which do not depend on local swing or font settings to make sure tests work on every JRE\n\t\t\treturn new DimensionDouble(sinlgeLine.getStringWithoutMarkup().length() * 7, 10);\n\t\t}\n\n\t}", "var_name": "dimensionCalculatorDrawHandler"}], "file": "umlet-elements/src/test/java/com/baselet/diagram/draw/TextSplitterTest.java"}, "test_case": {"identifier": "manyShortWordsWithEnoughSpace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void manyShortWordsWithEnoughSpace() throws Exception {\n\t\tStringStyle[] style = TextSplitter.splitStringAlgorithm(\"test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test\", 5000.0, dimensionCalculatorDrawHandler);\n\t\tassertContentEquals(style, Arrays.asList(\"test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test\"));\n\t}", "signature": "void manyShortWordsWithEnoughSpace()", "full_signature": "@Test public void manyShortWordsWithEnoughSpace()", "class_method_signature": "TextSplitterTest.manyShortWordsWithEnoughSpace()", "testcase": true, "constructor": false, "invocations": ["splitStringAlgorithm", "assertContentEquals", "asList"]}, "focal_class": {"identifier": "TextSplitter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(TextSplitter.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TextSplitter.class)", "var_name": "log"}, {"original_string": "private static final int WORD_CACHE_SIZE = 180;", "modifier": "private static final", "type": "int", "declarator": "WORD_CACHE_SIZE = 180", "var_name": "WORD_CACHE_SIZE"}, {"original_string": "private static final int MIN_WIDTH_CACHE_SIZE = 190;", "modifier": "private static final", "type": "int", "declarator": "MIN_WIDTH_CACHE_SIZE = 190", "var_name": "MIN_WIDTH_CACHE_SIZE"}, {"original_string": "private static final int WORDWRAP_CACHE_SIZE = 400;", "modifier": "private static final", "type": "int", "declarator": "WORDWRAP_CACHE_SIZE = 400", "var_name": "WORDWRAP_CACHE_SIZE"}, {"original_string": "private static final String SPLIT_CHARS = \" \\t\";", "modifier": "private static final", "type": "String", "declarator": "SPLIT_CHARS = \" \\t\"", "var_name": "SPLIT_CHARS"}, {"original_string": "private static LinkedHashMap<String, WordRegion[]> wordCache = new LRUCache<String, WordRegion[]>(WORD_CACHE_SIZE);", "modifier": "private static", "type": "LinkedHashMap<String, WordRegion[]>", "declarator": "wordCache = new LRUCache<String, WordRegion[]>(WORD_CACHE_SIZE)", "var_name": "wordCache"}, {"original_string": "private static LinkedHashMap<MinWidthCacheKey, Double> minWidthCache = new LRUCache<MinWidthCacheKey, Double>(MIN_WIDTH_CACHE_SIZE);", "modifier": "private static", "type": "LinkedHashMap<MinWidthCacheKey, Double>", "declarator": "minWidthCache = new LRUCache<MinWidthCacheKey, Double>(MIN_WIDTH_CACHE_SIZE)", "var_name": "minWidthCache"}, {"original_string": "private static LinkedHashMap<WordwrapCacheKey, WordwrapCacheValue> wordwrapCache = new LRUCache<WordwrapCacheKey, WordwrapCacheValue>(WORDWRAP_CACHE_SIZE);", "modifier": "private static", "type": "LinkedHashMap<WordwrapCacheKey, WordwrapCacheValue>", "declarator": "wordwrapCache = new LRUCache<WordwrapCacheKey, WordwrapCacheValue>(WORDWRAP_CACHE_SIZE)", "var_name": "wordwrapCache"}], "methods": [{"identifier": "drawText", "parameters": "(DrawHandler drawer, String[] textLines, double topLeftX, double topLeftY, double width, double height, AlignHorizontal hAlignment, AlignVertical vAlignment)", "modifiers": "public static", "return": "void", "signature": "void drawText(DrawHandler drawer, String[] textLines, double topLeftX, double topLeftY, double width, double height, AlignHorizontal hAlignment, AlignVertical vAlignment)", "full_signature": "public static void drawText(DrawHandler drawer, String[] textLines, double topLeftX, double topLeftY, double width, double height, AlignHorizontal hAlignment, AlignVertical vAlignment)", "class_method_signature": "TextSplitter.drawText(DrawHandler drawer, String[] textLines, double topLeftX, double topLeftY, double width, double height, AlignHorizontal hAlignment, AlignVertical vAlignment)", "testcase": false, "constructor": false}, {"identifier": "checkifStringFitsNoWordwrap", "parameters": "(String text, double width, DrawHandler drawer)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkifStringFitsNoWordwrap(String text, double width, DrawHandler drawer)", "full_signature": "public static boolean checkifStringFitsNoWordwrap(String text, double width, DrawHandler drawer)", "class_method_signature": "TextSplitter.checkifStringFitsNoWordwrap(String text, double width, DrawHandler drawer)", "testcase": false, "constructor": false}, {"identifier": "checkifStringFitsWithWordwrap", "parameters": "(String text, double width, DrawHandler drawer)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkifStringFitsWithWordwrap(String text, double width, DrawHandler drawer)", "full_signature": "public static boolean checkifStringFitsWithWordwrap(String text, double width, DrawHandler drawer)", "class_method_signature": "TextSplitter.checkifStringFitsWithWordwrap(String text, double width, DrawHandler drawer)", "testcase": false, "constructor": false}, {"identifier": "getSplitStringHeight", "parameters": "(String text, double width, DrawHandler drawer)", "modifiers": "public static", "return": "double", "signature": "double getSplitStringHeight(String text, double width, DrawHandler drawer)", "full_signature": "public static double getSplitStringHeight(String text, double width, DrawHandler drawer)", "class_method_signature": "TextSplitter.getSplitStringHeight(String text, double width, DrawHandler drawer)", "testcase": false, "constructor": false}, {"identifier": "getSplitStringHeight", "parameters": "(String[] textLines, double width, DrawHandler drawer)", "modifiers": "public static", "return": "double", "signature": "double getSplitStringHeight(String[] textLines, double width, DrawHandler drawer)", "full_signature": "public static double getSplitStringHeight(String[] textLines, double width, DrawHandler drawer)", "class_method_signature": "TextSplitter.getSplitStringHeight(String[] textLines, double width, DrawHandler drawer)", "testcase": false, "constructor": false}, {"identifier": "splitStringAlgorithm", "parameters": "(String text, double width, DrawHandler drawer)", "modifiers": "public static", "return": "StringStyle[]", "signature": "StringStyle[] splitStringAlgorithm(String text, double width, DrawHandler drawer)", "full_signature": "public static StringStyle[] splitStringAlgorithm(String text, double width, DrawHandler drawer)", "class_method_signature": "TextSplitter.splitStringAlgorithm(String text, double width, DrawHandler drawer)", "testcase": false, "constructor": false}, {"identifier": "splitStringAndHeightAlgorithm", "parameters": "(String text, double maxWidth, DrawHandler drawer)", "modifiers": "private static", "return": "WordwrapCacheValue", "signature": "WordwrapCacheValue splitStringAndHeightAlgorithm(String text, double maxWidth, DrawHandler drawer)", "full_signature": "private static WordwrapCacheValue splitStringAndHeightAlgorithm(String text, double maxWidth, DrawHandler drawer)", "class_method_signature": "TextSplitter.splitStringAndHeightAlgorithm(String text, double maxWidth, DrawHandler drawer)", "testcase": false, "constructor": false}, {"identifier": "wordFits", "parameters": "(double maxWidth, DrawHandler drawer, String word)", "modifiers": "private static", "return": "boolean", "signature": "boolean wordFits(double maxWidth, DrawHandler drawer, String word)", "full_signature": "private static boolean wordFits(double maxWidth, DrawHandler drawer, String word)", "class_method_signature": "TextSplitter.wordFits(double maxWidth, DrawHandler drawer, String word)", "testcase": false, "constructor": false}, {"identifier": "getTextMinWidth", "parameters": "(String text, DrawHandler drawer)", "modifiers": "public static", "return": "double", "signature": "double getTextMinWidth(String text, DrawHandler drawer)", "full_signature": "public static double getTextMinWidth(String text, DrawHandler drawer)", "class_method_signature": "TextSplitter.getTextMinWidth(String text, DrawHandler drawer)", "testcase": false, "constructor": false}, {"identifier": "getTextMinWidth", "parameters": "(String[] textLines, DrawHandler drawer)", "modifiers": "public static", "return": "double", "signature": "double getTextMinWidth(String[] textLines, DrawHandler drawer)", "full_signature": "public static double getTextMinWidth(String[] textLines, DrawHandler drawer)", "class_method_signature": "TextSplitter.getTextMinWidth(String[] textLines, DrawHandler drawer)", "testcase": false, "constructor": false}, {"identifier": "splitIntoWords", "parameters": "(String text)", "modifiers": "private static", "return": "WordRegion[]", "signature": "WordRegion[] splitIntoWords(String text)", "full_signature": "private static WordRegion[] splitIntoWords(String text)", "class_method_signature": "TextSplitter.splitIntoWords(String text)", "testcase": false, "constructor": false}, {"identifier": "isWhitespace", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isWhitespace(char c)", "full_signature": "private static boolean isWhitespace(char c)", "class_method_signature": "TextSplitter.isWhitespace(char c)", "testcase": false, "constructor": false}, {"identifier": "endBuffer", "parameters": "(DrawHandler drawer)", "modifiers": "private static", "return": "double", "signature": "double endBuffer(DrawHandler drawer)", "full_signature": "private static double endBuffer(DrawHandler drawer)", "class_method_signature": "TextSplitter.endBuffer(DrawHandler drawer)", "testcase": false, "constructor": false}, {"identifier": "getCachedWords", "parameters": "(String lineKey)", "modifiers": "private static", "return": "WordRegion[]", "signature": "WordRegion[] getCachedWords(String lineKey)", "full_signature": "private static WordRegion[] getCachedWords(String lineKey)", "class_method_signature": "TextSplitter.getCachedWords(String lineKey)", "testcase": false, "constructor": false}, {"identifier": "setCachedWords", "parameters": "(String lineKey, WordRegion[] words)", "modifiers": "private static", "return": "void", "signature": "void setCachedWords(String lineKey, WordRegion[] words)", "full_signature": "private static void setCachedWords(String lineKey, WordRegion[] words)", "class_method_signature": "TextSplitter.setCachedWords(String lineKey, WordRegion[] words)", "testcase": false, "constructor": false}, {"identifier": "getCachedMinWidth", "parameters": "(MinWidthCacheKey key)", "modifiers": "private static", "return": "Double", "signature": "Double getCachedMinWidth(MinWidthCacheKey key)", "full_signature": "private static Double getCachedMinWidth(MinWidthCacheKey key)", "class_method_signature": "TextSplitter.getCachedMinWidth(MinWidthCacheKey key)", "testcase": false, "constructor": false}, {"identifier": "setCachedMinWidth", "parameters": "(MinWidthCacheKey key, Double value)", "modifiers": "private static", "return": "void", "signature": "void setCachedMinWidth(MinWidthCacheKey key, Double value)", "full_signature": "private static void setCachedMinWidth(MinWidthCacheKey key, Double value)", "class_method_signature": "TextSplitter.setCachedMinWidth(MinWidthCacheKey key, Double value)", "testcase": false, "constructor": false}, {"identifier": "getCachedWordwrap", "parameters": "(WordwrapCacheKey key)", "modifiers": "private static", "return": "WordwrapCacheValue", "signature": "WordwrapCacheValue getCachedWordwrap(WordwrapCacheKey key)", "full_signature": "private static WordwrapCacheValue getCachedWordwrap(WordwrapCacheKey key)", "class_method_signature": "TextSplitter.getCachedWordwrap(WordwrapCacheKey key)", "testcase": false, "constructor": false}, {"identifier": "getCachedWordwrap", "parameters": "(WordRegion[] words, double width, Style style, Set<FormatLabels> format)", "modifiers": "private static", "return": "WordwrapCacheValue", "signature": "WordwrapCacheValue getCachedWordwrap(WordRegion[] words, double width, Style style, Set<FormatLabels> format)", "full_signature": "private static WordwrapCacheValue getCachedWordwrap(WordRegion[] words, double width, Style style, Set<FormatLabels> format)", "class_method_signature": "TextSplitter.getCachedWordwrap(WordRegion[] words, double width, Style style, Set<FormatLabels> format)", "testcase": false, "constructor": false}, {"identifier": "setCachedWordwrap", "parameters": "(WordwrapCacheKey key, WordwrapCacheValue value)", "modifiers": "private static", "return": "void", "signature": "void setCachedWordwrap(WordwrapCacheKey key, WordwrapCacheValue value)", "full_signature": "private static void setCachedWordwrap(WordwrapCacheKey key, WordwrapCacheValue value)", "class_method_signature": "TextSplitter.setCachedWordwrap(WordwrapCacheKey key, WordwrapCacheValue value)", "testcase": false, "constructor": false}], "file": "umlet-elements/src/main/java/com/baselet/diagram/draw/TextSplitter.java"}, "focal_method": {"identifier": "splitStringAlgorithm", "parameters": "(String text, double width, DrawHandler drawer)", "modifiers": "public static", "return": "StringStyle[]", "body": "public static StringStyle[] splitStringAlgorithm(String text, double width, DrawHandler drawer) {\n\t\treturn splitStringAndHeightAlgorithm(text, width, drawer).getWrappedLines();\n\t}", "signature": "StringStyle[] splitStringAlgorithm(String text, double width, DrawHandler drawer)", "full_signature": "public static StringStyle[] splitStringAlgorithm(String text, double width, DrawHandler drawer)", "class_method_signature": "TextSplitter.splitStringAlgorithm(String text, double width, DrawHandler drawer)", "testcase": false, "constructor": false, "invocations": ["getWrappedLines", "splitStringAndHeightAlgorithm"]}, "repository": {"repo_id": 32446940, "url": "https://github.com/umlet/umlet", "language": "Java", "is_fork": false, "fork_count": 207, "stargazer_count": 848, "size": 59577, "license": "GNU General Public License v3.0"}}