{"test_class": {"identifier": "AmqpClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}], "file": "models/src/test/java/org/jvalue/ods/api/notifications/AmqpClientTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testEquals() {\n\n        AmqpClient client1 = new AmqpClient(\"0\", \"host1\", \"exchange\", \"topic\", \"x.y.z\");\n        AmqpClient client2 = new AmqpClient(\"0\", \"host1\", \"exchange\", \"topic\", \"x.y.z\");\n        AmqpClient client3 = new AmqpClient(\"0\", \"host2\", \"exchange\", \"topic\", \"x.y.z\");\n        AmqpClient client4 = new AmqpClient(\"0\", \"host1\", \"exchange-other\", \"topic\", \"x.y.z\");\n        AmqpClient client5 = new AmqpClient(\"1\", \"host1\", \"exchange\", \"topic\", \"x.y.z\");\n\n        assertEquals(client1, client1);\n        assertEquals(client1, client2);\n        assertNotEquals(client1, client3);\n        assertNotEquals(client1, client4);\n        assertNotEquals(client1, client5);\n        assertNotEquals(client1, null);\n        assertNotEquals(client1, new Object());\n\n        assertEquals(client1.hashCode(), client1.hashCode());\n        assertEquals(client1.hashCode(), client2.hashCode());\n        assertNotEquals(client1.hashCode(), client3.hashCode());\n        assertNotEquals(client1.hashCode(), client4.hashCode());\n        assertNotEquals(client1.hashCode(), client5.hashCode());\n    }", "signature": "void testEquals()", "full_signature": "@Test public final void testEquals()", "class_method_signature": "AmqpClientTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "assertEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals", "assertEquals", "hashCode", "hashCode", "assertEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "AmqpClient", "superclass": "extends Client", "interfaces": "", "fields": [{"original_string": "public static final String CLIENT_TYPE = \"AMQP\";", "modifier": "public static final", "type": "String", "declarator": "CLIENT_TYPE = \"AMQP\"", "var_name": "CLIENT_TYPE"}, {"original_string": "@NotNull private final String exchange;", "modifier": "@NotNull private final", "type": "String", "declarator": "exchange", "var_name": "exchange"}, {"original_string": "@NotNull private final String uri;", "modifier": "@NotNull private final", "type": "String", "declarator": "uri", "var_name": "uri"}, {"original_string": "@NotNull private final String exchangeType;", "modifier": "@NotNull private final", "type": "String", "declarator": "exchangeType", "var_name": "exchangeType"}, {"original_string": "private final String routingKey;", "modifier": "private final", "type": "String", "declarator": "routingKey", "var_name": "routingKey"}], "methods": [{"identifier": "AmqpClient", "parameters": "(\n            @JsonProperty(\"id\") String id,\n            @JsonProperty(\"uri\") String uri,\n            @JsonProperty(\"exchange\") String exchange,\n\t\t\t@JsonProperty(\"exchangeType\") String exchangeType,\n\t\t\t@JsonProperty(\"routingKey\") String routingKey)", "modifiers": "public", "return": "", "signature": " AmqpClient(\n            @JsonProperty(\"id\") String id,\n            @JsonProperty(\"uri\") String uri,\n            @JsonProperty(\"exchange\") String exchange,\n\t\t\t@JsonProperty(\"exchangeType\") String exchangeType,\n\t\t\t@JsonProperty(\"routingKey\") String routingKey)", "full_signature": "public  AmqpClient(\n            @JsonProperty(\"id\") String id,\n            @JsonProperty(\"uri\") String uri,\n            @JsonProperty(\"exchange\") String exchange,\n\t\t\t@JsonProperty(\"exchangeType\") String exchangeType,\n\t\t\t@JsonProperty(\"routingKey\") String routingKey)", "class_method_signature": "AmqpClient.AmqpClient(\n            @JsonProperty(\"id\") String id,\n            @JsonProperty(\"uri\") String uri,\n            @JsonProperty(\"exchange\") String exchange,\n\t\t\t@JsonProperty(\"exchangeType\") String exchangeType,\n\t\t\t@JsonProperty(\"routingKey\") String routingKey)", "testcase": false, "constructor": true}, {"identifier": "getUri", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUri()", "full_signature": "public String getUri()", "class_method_signature": "AmqpClient.getUri()", "testcase": false, "constructor": false}, {"identifier": "getExchange", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExchange()", "full_signature": "public String getExchange()", "class_method_signature": "AmqpClient.getExchange()", "testcase": false, "constructor": false}, {"identifier": "getExchangeType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExchangeType()", "full_signature": "public String getExchangeType()", "class_method_signature": "AmqpClient.getExchangeType()", "testcase": false, "constructor": false}, {"identifier": "getRoutingKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRoutingKey()", "full_signature": "public String getRoutingKey()", "class_method_signature": "AmqpClient.getRoutingKey()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "AmqpClient.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AmqpClient.hashCode()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(ClientVisitor<P, R> visitor, P param)", "modifiers": "@Override public", "return": "R", "signature": "R accept(ClientVisitor<P, R> visitor, P param)", "full_signature": "@Override public R accept(ClientVisitor<P, R> visitor, P param)", "class_method_signature": "AmqpClient.accept(ClientVisitor<P, R> visitor, P param)", "testcase": false, "constructor": false}], "file": "models/src/main/java/org/jvalue/ods/api/notifications/AmqpClient.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) return true;\n\t\tif (o == null || getClass() != o.getClass()) return false;\n\t\tif (!super.equals(o)) return false;\n\t\tAmqpClient that = (AmqpClient) o;\n\t\treturn Objects.equals(exchange, that.exchange) &&\n\t\t\tObjects.equals(uri, that.uri) &&\n\t\t\tObjects.equals(exchangeType, that.exchangeType) &&\n\t\t\tObjects.equals(routingKey, that.routingKey);\n\t}", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "AmqpClient.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 14989619, "url": "https://github.com/jvalue/open-data-service-v1", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 4525, "license": "licensed"}}