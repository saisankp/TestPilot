{"test_class": {"identifier": "SelectionInfoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Function<Integer, String> IDENTIFIER = String::valueOf;", "modifier": "private static final", "type": "Function<Integer, String>", "declarator": "IDENTIFIER = String::valueOf", "var_name": "IDENTIFIER"}, {"original_string": "private SelectionInfo<Integer> single;", "modifier": "private", "type": "SelectionInfo<Integer>", "declarator": "single", "var_name": "single"}, {"original_string": "private SelectionInfo<Integer> multi;", "modifier": "private", "type": "SelectionInfo<Integer>", "declarator": "multi", "var_name": "multi"}], "file": "ballroom/src/test/java/org/jboss/hal/ballroom/dataprovider/SelectionInfoTest.java"}, "test_case": {"identifier": "addMulti", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addMulti() throws Exception {\n        multi.add(\"0\", 0);\n        assertSelection(multi, 0);\n        multi.add(\"1\", 1);\n        assertSelection(multi, 0, 1);\n        multi.add(\"2\", 2);\n        assertSelection(multi, 0, 1, 2);\n    }", "signature": "void addMulti()", "full_signature": "@Test public void addMulti()", "class_method_signature": "SelectionInfoTest.addMulti()", "testcase": true, "constructor": false, "invocations": ["add", "assertSelection", "add", "assertSelection", "add", "assertSelection"]}, "focal_class": {"identifier": "SelectionInfo", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Function<T, String> identifier;", "modifier": "private final", "type": "Function<T, String>", "declarator": "identifier", "var_name": "identifier"}, {"original_string": "private final boolean multiSelect;", "modifier": "private final", "type": "boolean", "declarator": "multiSelect", "var_name": "multiSelect"}, {"original_string": "private final Map<String, T> selection;", "modifier": "private final", "type": "Map<String, T>", "declarator": "selection", "var_name": "selection"}], "methods": [{"identifier": "SelectionInfo", "parameters": "(Function<T, String> identifier, boolean multiSelect)", "modifiers": "", "return": "", "signature": " SelectionInfo(Function<T, String> identifier, boolean multiSelect)", "full_signature": "  SelectionInfo(Function<T, String> identifier, boolean multiSelect)", "class_method_signature": "SelectionInfo.SelectionInfo(Function<T, String> identifier, boolean multiSelect)", "testcase": false, "constructor": true}, {"identifier": "SelectionInfo", "parameters": "(Function<T, String> identifier, boolean multiSelect, Map<String, T> selection)", "modifiers": "", "return": "", "signature": " SelectionInfo(Function<T, String> identifier, boolean multiSelect, Map<String, T> selection)", "full_signature": "  SelectionInfo(Function<T, String> identifier, boolean multiSelect, Map<String, T> selection)", "class_method_signature": "SelectionInfo.SelectionInfo(Function<T, String> identifier, boolean multiSelect, Map<String, T> selection)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "", "return": "void", "signature": "void reset()", "full_signature": " void reset()", "class_method_signature": "SelectionInfo.reset()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String id, T item)", "modifiers": "", "return": "void", "signature": "void add(String id, T item)", "full_signature": " void add(String id, T item)", "class_method_signature": "SelectionInfo.add(String id, T item)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String id)", "modifiers": "", "return": "void", "signature": "void remove(String id)", "full_signature": " void remove(String id)", "class_method_signature": "SelectionInfo.remove(String id)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "SelectionInfo.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SelectionInfo.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SelectionInfo.toString()", "testcase": false, "constructor": false}, {"identifier": "getSelection", "parameters": "()", "modifiers": "public", "return": "List<T>", "signature": "List<T> getSelection()", "full_signature": "public List<T> getSelection()", "class_method_signature": "SelectionInfo.getSelection()", "testcase": false, "constructor": false}, {"identifier": "getSingleSelection", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getSingleSelection()", "full_signature": "public T getSingleSelection()", "class_method_signature": "SelectionInfo.getSingleSelection()", "testcase": false, "constructor": false}, {"identifier": "hasSelection", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasSelection()", "full_signature": "public boolean hasSelection()", "class_method_signature": "SelectionInfo.hasSelection()", "testcase": false, "constructor": false}, {"identifier": "isSelected", "parameters": "(T item)", "modifiers": "public", "return": "boolean", "signature": "boolean isSelected(T item)", "full_signature": "public boolean isSelected(T item)", "class_method_signature": "SelectionInfo.isSelected(T item)", "testcase": false, "constructor": false}, {"identifier": "getSelectionCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSelectionCount()", "full_signature": "public int getSelectionCount()", "class_method_signature": "SelectionInfo.getSelectionCount()", "testcase": false, "constructor": false}, {"identifier": "isMultiSelect", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMultiSelect()", "full_signature": "public boolean isMultiSelect()", "class_method_signature": "SelectionInfo.isMultiSelect()", "testcase": false, "constructor": false}], "file": "ballroom/src/main/java/org/jboss/hal/ballroom/dataprovider/SelectionInfo.java"}, "focal_method": {"identifier": "add", "parameters": "(String id, T item)", "modifiers": "", "return": "void", "body": "void add(String id, T item) {\n        if (!multiSelect) {\n            reset();\n        }\n        selection.put(id, item);\n    }", "signature": "void add(String id, T item)", "full_signature": " void add(String id, T item)", "class_method_signature": "SelectionInfo.add(String id, T item)", "testcase": false, "constructor": false, "invocations": ["reset", "put"]}, "repository": {"repo_id": 38317187, "url": "https://github.com/hal/console", "stars": 34, "created": "6/30/2015 3:26:19 PM +00:00", "updates": "2020-01-26T16:25:43+00:00", "fork": "False", "license": "licensed"}}