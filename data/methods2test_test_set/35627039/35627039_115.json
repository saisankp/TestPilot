{"test_class": {"identifier": "EventInformationBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_COMPONENT_NAME = \"testComponent\";", "modifier": "private static final", "type": "String", "declarator": "TEST_COMPONENT_NAME = \"testComponent\"", "var_name": "TEST_COMPONENT_NAME"}, {"original_string": "public static final String TEST_TARGET_COMPONENT_NAME = \"targetComponentName\";", "modifier": "public static final", "type": "String", "declarator": "TEST_TARGET_COMPONENT_NAME = \"targetComponentName\"", "var_name": "TEST_TARGET_COMPONENT_NAME"}, {"original_string": "public static final String TEST_TARGET_COMPONENT_NAME_2 = \"targetComponentName2\";", "modifier": "public static final", "type": "String", "declarator": "TEST_TARGET_COMPONENT_NAME_2 = \"targetComponentName2\"", "var_name": "TEST_TARGET_COMPONENT_NAME_2"}, {"original_string": "public static final String TEST_STREAM_ID = \"streamId\";", "modifier": "public static final", "type": "String", "declarator": "TEST_STREAM_ID = \"streamId\"", "var_name": "TEST_STREAM_ID"}, {"original_string": "private EventInformationBuilder sut;", "modifier": "private", "type": "EventInformationBuilder", "declarator": "sut", "var_name": "sut"}, {"original_string": "public static final StreamlineEventImpl INPUT_STREAMLINE_EVENT = StreamlineEventImpl.builder()\n            .fieldsAndValues(new HashMap<String, Object>() {{\n                put(\"illuminance\", 70);\n                put(\"temp\", 104);\n                put(\"foo\", 100);\n                put(\"humidity\", \"40h\");\n            }})\n            .dataSourceId(\"ds-\" + System.currentTimeMillis())\n            .header(Collections.singletonMap(\"A\", 1))\n            .build();", "modifier": "public static final", "type": "StreamlineEventImpl", "declarator": "INPUT_STREAMLINE_EVENT = StreamlineEventImpl.builder()\n            .fieldsAndValues(new HashMap<String, Object>() {{\n                put(\"illuminance\", 70);\n                put(\"temp\", 104);\n                put(\"foo\", 100);\n                put(\"humidity\", \"40h\");\n            }})\n            .dataSourceId(\"ds-\" + System.currentTimeMillis())\n            .header(Collections.singletonMap(\"A\", 1))\n            .build()", "var_name": "INPUT_STREAMLINE_EVENT"}], "file": "streams/common/src/test/java/com/hortonworks/streamline/streams/common/event/EventInformationBuilderTest.java"}, "test_case": {"identifier": "testBuild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuild() throws Exception {\n        long timestamp = System.currentTimeMillis();\n\n        EventCorrelationInjector injector = new EventCorrelationInjector();\n\n        StreamlineEvent parentEvent = copyEventWithNewID();\n\n        // use same component name for parent and ancestor for easy testing\n        // this line is covered via `testNoParent()`\n        parentEvent = injector.injectCorrelationInformation(parentEvent, Collections.emptyList(), TEST_COMPONENT_NAME);\n\n        StreamlineEvent injectedEvent = injector.injectCorrelationInformation(\n                INPUT_STREAMLINE_EVENT, Collections.singletonList(parentEvent), TEST_COMPONENT_NAME);\n\n        EventInformation information = sut.build(timestamp, TEST_COMPONENT_NAME, TEST_STREAM_ID,\n                Sets.newHashSet(TEST_TARGET_COMPONENT_NAME, TEST_TARGET_COMPONENT_NAME_2), injectedEvent);\n        assertEquals(timestamp, information.getTimestamp());\n        assertEquals(injectedEvent.getId(), information.getEventId());\n        assertEquals(EventCorrelationInjector.getRootIds(injectedEvent), information.getRootIds());\n        assertEquals(EventCorrelationInjector.getParentIds(injectedEvent), information.getParentIds());\n        assertEquals(EventCorrelationInjector.getSourceComponentName(injectedEvent), information.getComponentName());\n        assertEquals(TEST_COMPONENT_NAME, information.getComponentName());\n        assertEquals(TEST_STREAM_ID, information.getStreamId());\n        assertEquals(Sets.newHashSet(TEST_TARGET_COMPONENT_NAME, TEST_TARGET_COMPONENT_NAME_2),\n                information.getTargetComponents());\n    }", "signature": "void testBuild()", "full_signature": "@Test public void testBuild()", "class_method_signature": "EventInformationBuilderTest.testBuild()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "copyEventWithNewID", "injectCorrelationInformation", "emptyList", "injectCorrelationInformation", "singletonList", "build", "newHashSet", "assertEquals", "getTimestamp", "assertEquals", "getId", "getEventId", "assertEquals", "getRootIds", "getRootIds", "assertEquals", "getParentIds", "getParentIds", "assertEquals", "getSourceComponentName", "getComponentName", "assertEquals", "getComponentName", "assertEquals", "getStreamId", "assertEquals", "newHashSet", "getTargetComponents"]}, "focal_class": {"identifier": "EventInformationBuilder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "build", "parameters": "(long timestamp, String componentName, String streamId, Set<String> targetComponents,\n                                  StreamlineEvent event)", "modifiers": "public", "return": "EventInformation", "signature": "EventInformation build(long timestamp, String componentName, String streamId, Set<String> targetComponents,\n                                  StreamlineEvent event)", "full_signature": "public EventInformation build(long timestamp, String componentName, String streamId, Set<String> targetComponents,\n                                  StreamlineEvent event)", "class_method_signature": "EventInformationBuilder.build(long timestamp, String componentName, String streamId, Set<String> targetComponents,\n                                  StreamlineEvent event)", "testcase": false, "constructor": false}], "file": "streams/common/src/main/java/com/hortonworks/streamline/streams/common/event/EventInformationBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(long timestamp, String componentName, String streamId, Set<String> targetComponents,\n                                  StreamlineEvent event)", "modifiers": "public", "return": "EventInformation", "body": "public EventInformation build(long timestamp, String componentName, String streamId, Set<String> targetComponents,\n                                  StreamlineEvent event) {\n        String sourceComponentName = EventCorrelationInjector.getSourceComponentName(event);\n        if (!componentName.equals(sourceComponentName)) {\n            throw new IllegalStateException(\"component name in event correlation is different from provided component name\");\n        }\n        return new EventInformation(timestamp, componentName, streamId, targetComponents, event.getId(),\n                EventCorrelationInjector.getRootIds(event), EventCorrelationInjector.getParentIds(event),\n                event);\n    }", "signature": "EventInformation build(long timestamp, String componentName, String streamId, Set<String> targetComponents,\n                                  StreamlineEvent event)", "full_signature": "public EventInformation build(long timestamp, String componentName, String streamId, Set<String> targetComponents,\n                                  StreamlineEvent event)", "class_method_signature": "EventInformationBuilder.build(long timestamp, String componentName, String streamId, Set<String> targetComponents,\n                                  StreamlineEvent event)", "testcase": false, "constructor": false, "invocations": ["getSourceComponentName", "equals", "getId", "getRootIds", "getParentIds"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}