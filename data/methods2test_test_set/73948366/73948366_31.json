{"test_class": {"identifier": "HttpDriverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClassLoader classLoader = this.getClass().getClassLoader();", "modifier": "private", "type": "ClassLoader", "declarator": "classLoader = this.getClass().getClassLoader()", "var_name": "classLoader"}], "file": "libs/java/server_common/src/test/java/com/yahoo/athenz/common/server/http/HttpDriverTest.java"}, "test_case": {"identifier": "testDoGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoGet() throws IOException {\n        CloseableHttpClient httpClient = Mockito.mock(CloseableHttpClient.class);\n        CloseableHttpResponse httpResponse = Mockito.mock(CloseableHttpResponse.class);\n        HttpEntity entity = Mockito.mock(HttpEntity.class);\n\n        String data = \"Sample Server Response\";\n\n        Mockito.when(httpResponse.getStatusLine()).thenReturn(new BasicStatusLine(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, \"OK\" ));\n        Mockito.when(entity.getContent()).thenReturn(new ByteArrayInputStream(data.getBytes()));\n        Mockito.when(httpResponse.getEntity()).thenReturn(entity);\n        Mockito.when(httpClient.execute(Mockito.any(HttpGet.class))).thenReturn(httpResponse);\n\n        HttpDriver httpDriver = new HttpDriver.Builder(\"\", null, \"asdf\".toCharArray(), null, null)\n                .build();\n\n        httpDriver.setHttpClient(httpClient);\n\n        String url = \"https://localhost:4443/sample.html\";\n\n        String out = httpDriver.doGet(url);\n        Assert.assertEquals(out, data);\n    }", "signature": "void testDoGet()", "full_signature": "@Test public void testDoGet()", "class_method_signature": "HttpDriverTest.testDoGet()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getStatusLine", "thenReturn", "when", "getContent", "getBytes", "thenReturn", "when", "getEntity", "thenReturn", "when", "execute", "any", "build", "toCharArray", "setHttpClient", "doGet", "assertEquals"]}, "focal_class": {"identifier": "HttpDriver", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HttpDriver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HttpDriver.class)", "var_name": "LOGGER"}, {"original_string": "private static final int DEFAULT_MAX_POOL_TOTAL = 30;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_POOL_TOTAL = 30", "var_name": "DEFAULT_MAX_POOL_TOTAL"}, {"original_string": "private static final int DEFAULT_MAX_POOL_PER_ROUTE = 20;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_POOL_PER_ROUTE = 20", "var_name": "DEFAULT_MAX_POOL_PER_ROUTE"}, {"original_string": "private static final int DEFAULT_CLIENT_INTERVAL_MS = 1000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_CLIENT_INTERVAL_MS = 1000", "var_name": "DEFAULT_CLIENT_INTERVAL_MS"}, {"original_string": "private static final int DEFAULT_CLIENT_MAX_RETRIES = 2;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_CLIENT_MAX_RETRIES = 2", "var_name": "DEFAULT_CLIENT_MAX_RETRIES"}, {"original_string": "private static final int DEFAULT_CLIENT_CONNECT_TIMEOUT_MS = 5000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_CLIENT_CONNECT_TIMEOUT_MS = 5000", "var_name": "DEFAULT_CLIENT_CONNECT_TIMEOUT_MS"}, {"original_string": "private static final int DEFAULT_CLIENT_READ_TIMEOUT_MS = 5000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_CLIENT_READ_TIMEOUT_MS = 5000", "var_name": "DEFAULT_CLIENT_READ_TIMEOUT_MS"}, {"original_string": "private final String baseUrl;", "modifier": "private final", "type": "String", "declarator": "baseUrl", "var_name": "baseUrl"}, {"original_string": "private final int maxPoolPerRoute;", "modifier": "private final", "type": "int", "declarator": "maxPoolPerRoute", "var_name": "maxPoolPerRoute"}, {"original_string": "private final int maxPoolTotal;", "modifier": "private final", "type": "int", "declarator": "maxPoolTotal", "var_name": "maxPoolTotal"}, {"original_string": "private final int clientRetryIntervalMs;", "modifier": "private final", "type": "int", "declarator": "clientRetryIntervalMs", "var_name": "clientRetryIntervalMs"}, {"original_string": "private final int clientMaxRetries;", "modifier": "private final", "type": "int", "declarator": "clientMaxRetries", "var_name": "clientMaxRetries"}, {"original_string": "private final int clientConnectTimeoutMs;", "modifier": "private final", "type": "int", "declarator": "clientConnectTimeoutMs", "var_name": "clientConnectTimeoutMs"}, {"original_string": "private final int clientReadTimeoutMs;", "modifier": "private final", "type": "int", "declarator": "clientReadTimeoutMs", "var_name": "clientReadTimeoutMs"}, {"original_string": "private CloseableHttpClient client;", "modifier": "private", "type": "CloseableHttpClient", "declarator": "client", "var_name": "client"}, {"original_string": "private final PoolingHttpClientConnectionManager connManager;", "modifier": "private final", "type": "PoolingHttpClientConnectionManager", "declarator": "connManager", "var_name": "connManager"}], "methods": [{"identifier": "HttpDriver", "parameters": "(Builder builder)", "modifiers": "public", "return": "", "signature": " HttpDriver(Builder builder)", "full_signature": "public  HttpDriver(Builder builder)", "class_method_signature": "HttpDriver.HttpDriver(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "setHttpClient", "parameters": "(CloseableHttpClient httpClient)", "modifiers": "public", "return": "void", "signature": "void setHttpClient(CloseableHttpClient httpClient)", "full_signature": "public void setHttpClient(CloseableHttpClient httpClient)", "class_method_signature": "HttpDriver.setHttpClient(CloseableHttpClient httpClient)", "testcase": false, "constructor": false}, {"identifier": "createSSLContext", "parameters": "(String trustorePath, char[] trustorePassword, String certPath,\n                                          String keyPath)", "modifiers": "public static", "return": "SSLContext", "signature": "SSLContext createSSLContext(String trustorePath, char[] trustorePassword, String certPath,\n                                          String keyPath)", "full_signature": "public static SSLContext createSSLContext(String trustorePath, char[] trustorePassword, String certPath,\n                                          String keyPath)", "class_method_signature": "HttpDriver.createSSLContext(String trustorePath, char[] trustorePassword, String certPath,\n                                          String keyPath)", "testcase": false, "constructor": false}, {"identifier": "createConnectionPooling", "parameters": "(SSLContext sslContext)", "modifiers": "protected", "return": "PoolingHttpClientConnectionManager", "signature": "PoolingHttpClientConnectionManager createConnectionPooling(SSLContext sslContext)", "full_signature": "protected PoolingHttpClientConnectionManager createConnectionPooling(SSLContext sslContext)", "class_method_signature": "HttpDriver.createConnectionPooling(SSLContext sslContext)", "testcase": false, "constructor": false}, {"identifier": "createHttpClient", "parameters": "(int connTimeoutMs, int readTimeoutMs, SSLContext sslContext,\n                                         PoolingHttpClientConnectionManager poolingHttpClientConnectionManager)", "modifiers": "protected", "return": "CloseableHttpClient", "signature": "CloseableHttpClient createHttpClient(int connTimeoutMs, int readTimeoutMs, SSLContext sslContext,\n                                         PoolingHttpClientConnectionManager poolingHttpClientConnectionManager)", "full_signature": "protected CloseableHttpClient createHttpClient(int connTimeoutMs, int readTimeoutMs, SSLContext sslContext,\n                                         PoolingHttpClientConnectionManager poolingHttpClientConnectionManager)", "class_method_signature": "HttpDriver.createHttpClient(int connTimeoutMs, int readTimeoutMs, SSLContext sslContext,\n                                         PoolingHttpClientConnectionManager poolingHttpClientConnectionManager)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "HttpDriver.close()", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(final String url)", "modifiers": "public", "return": "String", "signature": "String doGet(final String url)", "full_signature": "public String doGet(final String url)", "class_method_signature": "HttpDriver.doGet(final String url)", "testcase": false, "constructor": false}, {"identifier": "doPost", "parameters": "(HttpPost httpPost)", "modifiers": "public", "return": "String", "signature": "String doPost(HttpPost httpPost)", "full_signature": "public String doPost(HttpPost httpPost)", "class_method_signature": "HttpDriver.doPost(HttpPost httpPost)", "testcase": false, "constructor": false}, {"identifier": "doPost", "parameters": "(final String url, final List<NameValuePair> fields)", "modifiers": "public", "return": "String", "signature": "String doPost(final String url, final List<NameValuePair> fields)", "full_signature": "public String doPost(final String url, final List<NameValuePair> fields)", "class_method_signature": "HttpDriver.doPost(final String url, final List<NameValuePair> fields)", "testcase": false, "constructor": false}, {"identifier": "getPostQuery", "parameters": "(HttpPost httpPost)", "modifiers": "private", "return": "String", "signature": "String getPostQuery(HttpPost httpPost)", "full_signature": "private String getPostQuery(HttpPost httpPost)", "class_method_signature": "HttpDriver.getPostQuery(HttpPost httpPost)", "testcase": false, "constructor": false}], "file": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/http/HttpDriver.java"}, "focal_method": {"identifier": "doGet", "parameters": "(final String url)", "modifiers": "public", "return": "String", "body": "public String doGet(final String url) throws IOException {\n        LOGGER.debug(\"Requesting api for {}\", url);\n        HttpGet httpGet = new HttpGet(url);\n\n        // Retry when IOException occurs\n        for (int i = 0; i < clientMaxRetries; i++) {\n            try (CloseableHttpResponse response = client.execute(httpGet)) {\n                if (response != null) {\n                    int statusCode = response.getStatusLine().getStatusCode();\n                    if (statusCode == 200) {\n                        String data = EntityUtils.toString(response.getEntity());\n                        LOGGER.debug(\"Data received: {}, from: {}\", data, url);\n                        return data;\n                    }\n\n                    LOGGER.error(\"Received bad status: {} from: {}\", statusCode, url);\n                    response.getEntity().getContent().close();\n                    return \"\";\n                }\n            } catch (IOException ex) {\n                LOGGER.error(\"Failed to get response from server {} retry: {}/{}, exception: \", url, i, clientMaxRetries, ex);\n                try {\n                    TimeUnit.MILLISECONDS.sleep(clientRetryIntervalMs);\n                } catch (InterruptedException ignored) {\n                }\n            }\n        }\n        throw new IOException(\"Failed to get response from server: \" + url);\n    }", "signature": "String doGet(final String url)", "full_signature": "public String doGet(final String url)", "class_method_signature": "HttpDriver.doGet(final String url)", "testcase": false, "constructor": false, "invocations": ["debug", "execute", "getStatusCode", "getStatusLine", "toString", "getEntity", "debug", "error", "close", "getContent", "getEntity", "error", "sleep"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}