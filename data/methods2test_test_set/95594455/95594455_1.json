{"test_class": {"identifier": "MultipleMetricsMethodBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String[] METRIC_NAMES = { \"counter\", \"gauge\", \"meter\", \"timer\" };", "modifier": "private final static", "type": "String[]", "declarator": "METRIC_NAMES = { \"counter\", \"gauge\", \"meter\", \"timer\" }", "var_name": "METRIC_NAMES"}, {"original_string": "@Inject\n    private MetricRegistry registry;", "modifier": "@Inject\n    private", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "@Inject\n    private MultipleMetricsMethodBean bean;", "modifier": "@Inject\n    private", "type": "MultipleMetricsMethodBean", "declarator": "bean", "var_name": "bean"}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/metrics/MultipleMetricsMethodBeanTest.java"}, "test_case": {"identifier": "callMetricsMethodOnce", "parameters": "()", "modifiers": "@Test @InSequence(2) public", "return": "void", "body": "@Test\n    @InSequence(2)\n    public void callMetricsMethodOnce() {\n        assertThat(\"Metrics are not registered correctly\", registry.getMetricIDs(),\n            is(equalTo(MetricsUtil.createMetricIDs(absoluteMetricNames()))));\n\n        // Call the monitored method and assert it's been instrumented\n        bean.metricsMethod();\n\n        // Make sure that the metrics have been called\n        assertThat(\"Counter count is incorrect\", registry.getCounter(\n                new MetricID(absoluteMetricName(\"counter\"))).getCount(), is(equalTo(1L)));\n        assertThat(\"Meter count is incorrect\", registry.getMeter(\n                new MetricID(absoluteMetricName(\"meter\"))).getCount(), is(equalTo(1L)));\n        assertThat(\"Timer count is incorrect\", registry.getTimer(\n                new MetricID(absoluteMetricName(\"timer\"))).getCount(), is(equalTo(1L)));\n        // Let's call the gauge at the end as Weld is intercepting the gauge\n        // invocation while OWB not\n        assertThat(\"Gauge value is incorrect\", registry.getGauge(\n                new MetricID(absoluteMetricName(\"gauge\"))).getValue(), is(equalTo(1234L)));\n    }", "signature": "void callMetricsMethodOnce()", "full_signature": "@Test @InSequence(2) public void callMetricsMethodOnce()", "class_method_signature": "MultipleMetricsMethodBeanTest.callMetricsMethodOnce()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getMetricIDs", "is", "equalTo", "createMetricIDs", "absoluteMetricNames", "metricsMethod", "assertThat", "getCount", "getCounter", "absoluteMetricName", "is", "equalTo", "assertThat", "getCount", "getMeter", "absoluteMetricName", "is", "equalTo", "assertThat", "getCount", "getTimer", "absoluteMetricName", "is", "equalTo", "assertThat", "getValue", "getGauge", "absoluteMetricName", "is", "equalTo"]}, "focal_class": {"identifier": "MultipleMetricsMethodBean", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "metricsMethod", "parameters": "()", "modifiers": "@Counted(name = \"counter\") @Gauge(name = \"gauge\", unit = MetricUnits.NONE) @Metered(name = \"meter\") @Timed(name = \"timer\") public", "return": "Long", "signature": "Long metricsMethod()", "full_signature": "@Counted(name = \"counter\") @Gauge(name = \"gauge\", unit = MetricUnits.NONE) @Metered(name = \"meter\") @Timed(name = \"timer\") public Long metricsMethod()", "class_method_signature": "MultipleMetricsMethodBean.metricsMethod()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MultipleMetricsMethodBean.toString()", "testcase": false, "constructor": false}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/metrics/MultipleMetricsMethodBean.java"}, "focal_method": {"identifier": "metricsMethod", "parameters": "()", "modifiers": "@Counted(name = \"counter\") @Gauge(name = \"gauge\", unit = MetricUnits.NONE) @Metered(name = \"meter\") @Timed(name = \"timer\") public", "return": "Long", "body": "@Counted(name = \"counter\")\n    @Gauge(name = \"gauge\", unit = MetricUnits.NONE)\n    @Metered(name = \"meter\")\n    @Timed(name = \"timer\")\n    public Long metricsMethod() {\n        return 1234L;\n    }", "signature": "Long metricsMethod()", "full_signature": "@Counted(name = \"counter\") @Gauge(name = \"gauge\", unit = MetricUnits.NONE) @Metered(name = \"meter\") @Timed(name = \"timer\") public Long metricsMethod()", "class_method_signature": "MultipleMetricsMethodBean.metricsMethod()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 95594455, "url": "https://github.com/eclipse/microprofile-metrics", "stars": 57, "created": "6/27/2017 7:44:21 PM +00:00", "updates": "2020-01-24T22:21:48+00:00", "fork": "False", "license": "licensed"}}