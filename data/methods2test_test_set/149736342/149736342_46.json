{"test_class": {"identifier": "RlpDecoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "rlp/src/test/java/org/web3j/rlp/RlpDecoderTest.java"}, "test_case": {"identifier": "testRLPDecode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRLPDecode() {\n\n        // empty array of binary\n        assertTrue(RlpDecoder.decode(new byte[]{}).getValues().isEmpty());\n\n        // The string \"dog\" = [ 0x83, 'd', 'o', 'g' ]\n        assertThat(RlpDecoder.decode(new byte[]{(byte) 0x83, 'd', 'o', 'g'}).getValues().get(0),\n                CoreMatchers.<RlpType>is(RlpString.create(\"dog\")));\n\n        // The list [ \"cat\", \"dog\" ] = [ 0xc8, 0x83, 'c', 'a', 't', 0x83, 'd', 'o', 'g' ]\n        RlpList rlpList = (RlpList) RlpDecoder.decode(\n                new byte[]{\n                        (byte) 0xc8, (byte) 0x83, 'c', 'a', 't', (byte) 0x83, 'd', 'o', 'g'\n                }).getValues().get(0);\n\n        assertThat(rlpList.getValues().get(0),\n                CoreMatchers.<RlpType>is(RlpString.create(\"cat\")));\n\n        assertThat(rlpList.getValues().get(1),\n                CoreMatchers.<RlpType>is(RlpString.create(\"dog\")));\n\n        // The empty string ('null') = [ 0x80 ]\n        assertThat(RlpDecoder.decode(new byte[]{(byte) 0x80}).getValues().get(0),\n                CoreMatchers.<RlpType>is(RlpString.create(\"\")));\n\n        assertThat(RlpDecoder.decode(new byte[]{(byte) 0x80}).getValues().get(0),\n                CoreMatchers.<RlpType>is(RlpString.create(new byte[]{})));\n\n        assertThat(RlpDecoder.decode(new byte[]{(byte) 0x80}).getValues().get(0),\n                CoreMatchers.<RlpType>is(RlpString.create(BigInteger.ZERO)));\n\n        // The empty list = [ 0xc0 ]\n        assertThat(RlpDecoder.decode(new byte[]{(byte) 0xc0}).getValues().get(0),\n                instanceOf(RlpList.class));\n\n        assertTrue(((RlpList) RlpDecoder.decode(new byte[]{(byte) 0xc0})\n                .getValues().get(0)).getValues().isEmpty());\n\n        // The encoded integer 0 ('\\x00') = [ 0x00 ]\n        assertThat(RlpDecoder.decode(new byte[]{(byte) 0x00}).getValues().get(0),\n                CoreMatchers.<RlpType>is(RlpString.create(BigInteger.valueOf(0).byteValue())));\n\n        // The encoded integer 15 ('\\x0f') = [ 0x0f ]\n        assertThat(RlpDecoder.decode(new byte[]{(byte) 0x0f}).getValues().get(0),\n                CoreMatchers.<RlpType>is(RlpString.create(BigInteger.valueOf(15).byteValue())));\n\n        // The encoded integer 1024 ('\\x04\\x00') = [ 0x82, 0x04, 0x00 ]\n        assertThat(RlpDecoder.decode(new byte[]{(byte) 0x82, (byte) 0x04, (byte) 0x00})\n                        .getValues().get(0),\n                CoreMatchers.<RlpType>is(RlpString.create(BigInteger.valueOf(0x0400))));\n\n        // The set theoretical representation of three,\n        // [ [], [[]], [ [], [[]] ] ] = [ 0xc7, 0xc0, 0xc1, 0xc0, 0xc3, 0xc0, 0xc1, 0xc0 ]\n        rlpList = RlpDecoder.decode(new byte[]{\n                (byte) 0xc7,\n                (byte) 0xc0,\n                (byte) 0xc1, (byte) 0xc0,\n                (byte) 0xc3, (byte) 0xc0, (byte) 0xc1, (byte) 0xc0});\n        assertThat(rlpList, instanceOf(RlpList.class));\n\n        assertThat(rlpList.getValues().size(), equalTo(1));\n\n        assertThat(rlpList.getValues().get(0), instanceOf(RlpList.class));\n\n        assertThat(((RlpList)\n                        rlpList.getValues().get(0)).getValues().size(),\n                equalTo(3));\n\n        assertThat(((RlpList)\n                        rlpList.getValues().get(0)).getValues().get(0),\n                instanceOf(RlpList.class));\n\n        assertThat(((RlpList)\n                   ((RlpList) rlpList.getValues().get(0)).getValues().get(0)).getValues().size(),\n                equalTo(0));\n\n        assertThat(((RlpList)\n                   ((RlpList)rlpList.getValues().get(0)).getValues().get(1)).getValues().size(),\n                equalTo(1));\n\n        assertThat(((RlpList)\n                   ((RlpList) rlpList.getValues().get(0)).getValues().get(2)).getValues().size(),\n                equalTo(2));\n\n        assertThat(((RlpList)\n                   ((RlpList) rlpList.getValues().get(0)).getValues().get(2)).getValues().get(0),\n                instanceOf(RlpList.class));\n\n        assertThat(((RlpList)\n                   ((RlpList)\n                   ((RlpList) rlpList.getValues().get(0)).getValues().get(2)).getValues().get(0))\n                        .getValues().size(),\n                equalTo(0));\n\n        assertThat(((RlpList)\n                   ((RlpList)\n                   ((RlpList) rlpList.getValues().get(0)).getValues().get(2)).getValues().get(1))\n                        .getValues().size(),\n                equalTo(1));\n\n        // The string \"Lorem ipsum dolor sit amet,\n        // consectetur adipisicing elit\" =\n        // [ 0xb8, 0x38, 'L', 'o', 'r', 'e', 'm', ' ', ... , 'e', 'l', 'i', 't' ]\n\n        assertThat(RlpDecoder.decode(\n                new byte[]{\n                    (byte) 0xb8,\n                    (byte) 0x38,\n                    'L', 'o', 'r', 'e', 'm', ' ', 'i', 'p', 's', 'u', 'm', ' ',\n                    'd', 'o', 'l', 'o', 'r', ' ', 's', 'i', 't', ' ',\n                    'a', 'm', 'e', 't', ',', ' ',\n                    'c', 'o', 'n', 's', 'e', 'c', 't', 'e', 't', 'u', 'r', ' ',\n                    'a', 'd', 'i', 'p', 'i', 's', 'i', 'c', 'i', 'n', 'g', ' ',\n                    'e', 'l', 'i', 't'\n                }).getValues().get(0),\n                CoreMatchers.<RlpType>is(RlpString.create(\n                        \"Lorem ipsum dolor sit amet, consectetur adipisicing elit\")));\n\n        // https://github.com/paritytech/parity/blob/master/util/rlp/tests/tests.rs#L239\n        assertThat(RlpDecoder.decode(new byte[]{(byte) 0x00}).getValues().get(0),\n                CoreMatchers.<RlpType>is(RlpString.create(new byte[]{0})));\n\n        rlpList = RlpDecoder.decode(new byte[]{\n                (byte) 0xc6, (byte) 0x82, (byte) 0x7a, (byte) 0x77, (byte) 0xc1,\n                (byte) 0x04, (byte) 0x01});\n\n        assertThat(((RlpList) rlpList.getValues().get(0)).getValues().size(),\n                equalTo(3));\n\n        assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(0),\n                instanceOf(RlpString.class));\n\n        assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(1),\n                instanceOf(RlpList.class));\n\n        assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(2),\n                instanceOf(RlpString.class));\n\n        assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(0),\n                CoreMatchers.<RlpType>is(RlpString.create(\"zw\")));\n\n        assertThat(((RlpList)\n                   ((RlpList) rlpList.getValues().get(0)).getValues().get(1)).getValues().get(0),\n                CoreMatchers.<RlpType>is(RlpString.create(4)));\n\n        assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(2),\n                CoreMatchers.<RlpType>is(RlpString.create(1)));\n\n        // payload more than 55 bytes\n        String data = \"F86E12F86B80881BC16D674EC8000094CD2A3D9F938E13CD947EC05ABC7FE734D\"\n                + \"F8DD8268609184E72A00064801BA0C52C114D4F5A3BA904A9B3036E5E118FE0DBB987\"\n                + \"FE3955DA20F2CD8F6C21AB9CA06BA4C2874299A55AD947DBC98A25EE895AABF6B625C\"\n                + \"26C435E84BFD70EDF2F69\";\n\n        byte[] payload = Numeric.hexStringToByteArray(data);\n        rlpList = RlpDecoder.decode(payload);\n\n        assertThat(((RlpList) rlpList.getValues().get(0)).getValues().size(),\n                equalTo(2));\n\n        assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(0),\n                instanceOf(RlpString.class));\n\n        assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(1),\n                instanceOf(RlpList.class));\n\n        assertThat(((RlpList)\n                   ((RlpList) rlpList.getValues().get(0)).getValues().get(1)).getValues().size(),\n                equalTo(9));\n\n    }", "signature": "void testRLPDecode()", "full_signature": "@Test public void testRLPDecode()", "class_method_signature": "RlpDecoderTest.testRLPDecode()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "getValues", "decode", "assertThat", "get", "getValues", "decode", "is", "create", "get", "getValues", "decode", "assertThat", "get", "getValues", "is", "create", "assertThat", "get", "getValues", "is", "create", "assertThat", "get", "getValues", "decode", "is", "create", "assertThat", "get", "getValues", "decode", "is", "create", "assertThat", "get", "getValues", "decode", "is", "create", "assertThat", "get", "getValues", "decode", "instanceOf", "assertTrue", "isEmpty", "getValues", "get", "getValues", "decode", "assertThat", "get", "getValues", "decode", "is", "create", "byteValue", "valueOf", "assertThat", "get", "getValues", "decode", "is", "create", "byteValue", "valueOf", "assertThat", "get", "getValues", "decode", "is", "create", "valueOf", "decode", "assertThat", "instanceOf", "assertThat", "size", "getValues", "equalTo", "assertThat", "get", "getValues", "instanceOf", "assertThat", "size", "getValues", "get", "getValues", "equalTo", "assertThat", "get", "getValues", "get", "getValues", "instanceOf", "assertThat", "size", "getValues", "get", "getValues", "get", "getValues", "equalTo", "assertThat", "size", "getValues", "get", "getValues", "get", "getValues", "equalTo", "assertThat", "size", "getValues", "get", "getValues", "get", "getValues", "equalTo", "assertThat", "get", "getValues", "get", "getValues", "get", "getValues", "instanceOf", "assertThat", "size", "getValues", "get", "getValues", "get", "getValues", "get", "getValues", "equalTo", "assertThat", "size", "getValues", "get", "getValues", "get", "getValues", "get", "getValues", "equalTo", "assertThat", "get", "getValues", "decode", "is", "create", "assertThat", "get", "getValues", "decode", "is", "create", "decode", "assertThat", "size", "getValues", "get", "getValues", "equalTo", "assertThat", "get", "getValues", "get", "getValues", "instanceOf", "assertThat", "get", "getValues", "get", "getValues", "instanceOf", "assertThat", "get", "getValues", "get", "getValues", "instanceOf", "assertThat", "get", "getValues", "get", "getValues", "is", "create", "assertThat", "get", "getValues", "get", "getValues", "get", "getValues", "is", "create", "assertThat", "get", "getValues", "get", "getValues", "is", "create", "hexStringToByteArray", "decode", "assertThat", "size", "getValues", "get", "getValues", "equalTo", "assertThat", "get", "getValues", "get", "getValues", "instanceOf", "assertThat", "get", "getValues", "get", "getValues", "instanceOf", "assertThat", "size", "getValues", "get", "getValues", "get", "getValues", "equalTo"]}, "focal_class": {"identifier": "RlpDecoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static int OFFSET_SHORT_STRING = 0x80;", "modifier": "public static", "type": "int", "declarator": "OFFSET_SHORT_STRING = 0x80", "var_name": "OFFSET_SHORT_STRING"}, {"original_string": "public static int OFFSET_LONG_STRING = 0xb7;", "modifier": "public static", "type": "int", "declarator": "OFFSET_LONG_STRING = 0xb7", "var_name": "OFFSET_LONG_STRING"}, {"original_string": "public static int OFFSET_SHORT_LIST = 0xc0;", "modifier": "public static", "type": "int", "declarator": "OFFSET_SHORT_LIST = 0xc0", "var_name": "OFFSET_SHORT_LIST"}, {"original_string": "public static int OFFSET_LONG_LIST = 0xf7;", "modifier": "public static", "type": "int", "declarator": "OFFSET_LONG_LIST = 0xf7", "var_name": "OFFSET_LONG_LIST"}], "methods": [{"identifier": "decode", "parameters": "(byte[] rlpEncoded)", "modifiers": "public static", "return": "RlpList", "signature": "RlpList decode(byte[] rlpEncoded)", "full_signature": "public static RlpList decode(byte[] rlpEncoded)", "class_method_signature": "RlpDecoder.decode(byte[] rlpEncoded)", "testcase": false, "constructor": false}, {"identifier": "traverse", "parameters": "(byte[] data, int startPos, int endPos, RlpList rlpList)", "modifiers": "private static", "return": "void", "signature": "void traverse(byte[] data, int startPos, int endPos, RlpList rlpList)", "full_signature": "private static void traverse(byte[] data, int startPos, int endPos, RlpList rlpList)", "class_method_signature": "RlpDecoder.traverse(byte[] data, int startPos, int endPos, RlpList rlpList)", "testcase": false, "constructor": false}, {"identifier": "calcLength", "parameters": "(int lengthOfLength, byte[] data, int pos)", "modifiers": "private static", "return": "int", "signature": "int calcLength(int lengthOfLength, byte[] data, int pos)", "full_signature": "private static int calcLength(int lengthOfLength, byte[] data, int pos)", "class_method_signature": "RlpDecoder.calcLength(int lengthOfLength, byte[] data, int pos)", "testcase": false, "constructor": false}], "file": "rlp/src/main/java/org/web3j/rlp/RlpDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(byte[] rlpEncoded)", "modifiers": "public static", "return": "RlpList", "body": "public static RlpList decode(byte[] rlpEncoded) {\n        RlpList rlpList = new RlpList(new ArrayList<RlpType>());\n        traverse(rlpEncoded, 0, rlpEncoded.length, rlpList);\n        return rlpList;\n    }", "signature": "RlpList decode(byte[] rlpEncoded)", "full_signature": "public static RlpList decode(byte[] rlpEncoded)", "class_method_signature": "RlpDecoder.decode(byte[] rlpEncoded)", "testcase": false, "constructor": false, "invocations": ["traverse"]}, "repository": {"repo_id": 149736342, "url": "https://github.com/BrahmaOS/brahmaos-web3j", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 1779, "license": "licensed"}}