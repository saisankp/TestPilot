{"test_class": {"identifier": "SecurityGroupManagerImpl2Test", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "@Inject\n    SecurityGroupManagerImpl2 _sgMgr = null;", "modifier": "@Inject", "type": "SecurityGroupManagerImpl2", "declarator": "_sgMgr = null", "var_name": "_sgMgr"}], "file": "server/src/test/java/com/cloud/network/security/SecurityGroupManagerImpl2Test.java"}, "test_case": {"identifier": "testWork", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWork() throws ConfigurationException {\n        _schedule(1000);\n        _sgMgr.work();\n    }", "signature": "void testWork()", "full_signature": "@Test public void testWork()", "class_method_signature": "SecurityGroupManagerImpl2Test.testWork()", "testcase": true, "constructor": false, "invocations": ["_schedule", "work"]}, "focal_class": {"identifier": "SecurityGroupManagerImpl2", "superclass": "extends SecurityGroupManagerImpl", "interfaces": "", "fields": [{"original_string": "SecurityGroupWorkQueue _workQueue = new LocalSecurityGroupWorkQueue();", "modifier": "", "type": "SecurityGroupWorkQueue", "declarator": "_workQueue = new LocalSecurityGroupWorkQueue()", "var_name": "_workQueue"}, {"original_string": "SecurityGroupWorkTracker _workTracker;", "modifier": "", "type": "SecurityGroupWorkTracker", "declarator": "_workTracker", "var_name": "_workTracker"}, {"original_string": "SecurityManagerMBeanImpl _mBean;", "modifier": "", "type": "SecurityManagerMBeanImpl", "declarator": "_mBean", "var_name": "_mBean"}, {"original_string": "@Inject\n    ManagedContext _managedContext;", "modifier": "@Inject", "type": "ManagedContext", "declarator": "_managedContext", "var_name": "_managedContext"}, {"original_string": "WorkerThread[] _workers;", "modifier": "", "type": "WorkerThread[]", "declarator": "_workers", "var_name": "_workers"}, {"original_string": "private Set<Long> _disabledVms = Collections.newSetFromMap(new ConcurrentHashMap<Long, Boolean>());", "modifier": "private", "type": "Set<Long>", "declarator": "_disabledVms = Collections.newSetFromMap(new ConcurrentHashMap<Long, Boolean>())", "var_name": "_disabledVms"}, {"original_string": "private boolean _schedulerDisabled = false;", "modifier": "private", "type": "boolean", "declarator": "_schedulerDisabled = false", "var_name": "_schedulerDisabled"}], "methods": [{"identifier": "createThreadPools", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void createThreadPools()", "full_signature": "@Override protected void createThreadPools()", "class_method_signature": "SecurityGroupManagerImpl2.createThreadPools()", "testcase": false, "constructor": false}, {"identifier": "scheduleRulesetUpdateToHosts", "parameters": "(List<Long> affectedVms, boolean updateSeqno, Long delayMs)", "modifiers": "@Override //@DB public", "return": "void", "signature": "void scheduleRulesetUpdateToHosts(List<Long> affectedVms, boolean updateSeqno, Long delayMs)", "full_signature": "@Override //@DB public void scheduleRulesetUpdateToHosts(List<Long> affectedVms, boolean updateSeqno, Long delayMs)", "class_method_signature": "SecurityGroupManagerImpl2.scheduleRulesetUpdateToHosts(List<Long> affectedVms, boolean updateSeqno, Long delayMs)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "SecurityGroupManagerImpl2.start()", "testcase": false, "constructor": false}, {"identifier": "work", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void work()", "full_signature": "@Override public void work()", "class_method_signature": "SecurityGroupManagerImpl2.work()", "testcase": false, "constructor": false}, {"identifier": "sendRulesetUpdates", "parameters": "(SecurityGroupWork work)", "modifiers": "public", "return": "void", "signature": "void sendRulesetUpdates(SecurityGroupWork work)", "full_signature": "public void sendRulesetUpdates(SecurityGroupWork work)", "class_method_signature": "SecurityGroupManagerImpl2.sendRulesetUpdates(SecurityGroupWork work)", "testcase": false, "constructor": false}, {"identifier": "cleanupFinishedWork", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanupFinishedWork()", "full_signature": "@Override public void cleanupFinishedWork()", "class_method_signature": "SecurityGroupManagerImpl2.cleanupFinishedWork()", "testcase": false, "constructor": false}, {"identifier": "generateRulesForVM", "parameters": "(Long userVmId, SecurityRuleType type)", "modifiers": "@Override protected", "return": "Map<PortAndProto, Set<String>>", "signature": "Map<PortAndProto, Set<String>> generateRulesForVM(Long userVmId, SecurityRuleType type)", "full_signature": "@Override protected Map<PortAndProto, Set<String>> generateRulesForVM(Long userVmId, SecurityRuleType type)", "class_method_signature": "SecurityGroupManagerImpl2.generateRulesForVM(Long userVmId, SecurityRuleType type)", "testcase": false, "constructor": false}, {"identifier": "getQueueSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getQueueSize()", "full_signature": "public int getQueueSize()", "class_method_signature": "SecurityGroupManagerImpl2.getQueueSize()", "testcase": false, "constructor": false}, {"identifier": "getWorkQueue", "parameters": "()", "modifiers": "public", "return": "SecurityGroupWorkQueue", "signature": "SecurityGroupWorkQueue getWorkQueue()", "full_signature": "public SecurityGroupWorkQueue getWorkQueue()", "class_method_signature": "SecurityGroupManagerImpl2.getWorkQueue()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(String name, Map<String, Object> params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(String name, Map<String, Object> params)", "full_signature": "@Override public boolean configure(String name, Map<String, Object> params)", "class_method_signature": "SecurityGroupManagerImpl2.configure(String name, Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "disableSchedulerForVm", "parameters": "(Long vmId, boolean disable)", "modifiers": "public", "return": "void", "signature": "void disableSchedulerForVm(Long vmId, boolean disable)", "full_signature": "public void disableSchedulerForVm(Long vmId, boolean disable)", "class_method_signature": "SecurityGroupManagerImpl2.disableSchedulerForVm(Long vmId, boolean disable)", "testcase": false, "constructor": false}, {"identifier": "getDisabledVmsForScheduler", "parameters": "()", "modifiers": "public", "return": "Long[]", "signature": "Long[] getDisabledVmsForScheduler()", "full_signature": "public Long[] getDisabledVmsForScheduler()", "class_method_signature": "SecurityGroupManagerImpl2.getDisabledVmsForScheduler()", "testcase": false, "constructor": false}, {"identifier": "enableAllVmsForScheduler", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enableAllVmsForScheduler()", "full_signature": "public void enableAllVmsForScheduler()", "class_method_signature": "SecurityGroupManagerImpl2.enableAllVmsForScheduler()", "testcase": false, "constructor": false}, {"identifier": "disableScheduler", "parameters": "(boolean disable)", "modifiers": "public", "return": "void", "signature": "void disableScheduler(boolean disable)", "full_signature": "public void disableScheduler(boolean disable)", "class_method_signature": "SecurityGroupManagerImpl2.disableScheduler(boolean disable)", "testcase": false, "constructor": false}, {"identifier": "isSchedulerDisabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSchedulerDisabled()", "full_signature": "public boolean isSchedulerDisabled()", "class_method_signature": "SecurityGroupManagerImpl2.isSchedulerDisabled()", "testcase": false, "constructor": false}, {"identifier": "clearWorkQueue", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearWorkQueue()", "full_signature": "public void clearWorkQueue()", "class_method_signature": "SecurityGroupManagerImpl2.clearWorkQueue()", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/network/security/SecurityGroupManagerImpl2.java"}, "focal_method": {"identifier": "work", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void work() {\n        s_logger.trace(\"Checking the work queue\");\n        List<SecurityGroupWork> workItems;\n        try {\n            workItems = _workQueue.getWork(1);\n            for (SecurityGroupWork work : workItems) {\n                if (s_logger.isTraceEnabled()) {\n                    s_logger.trace(\"Processing \" + work.getInstanceId());\n                }\n\n                try {\n                    VmRulesetLogVO rulesetLog = _rulesetLogDao.findByVmId(work.getInstanceId());\n                    if (rulesetLog == null) {\n                        s_logger.warn(\"Could not find ruleset log for vm \" + work.getInstanceId());\n                        continue;\n                    }\n                    work.setLogsequenceNumber(rulesetLog.getLogsequence());\n                    sendRulesetUpdates(work);\n                    _mBean.logUpdateDetails(work.getInstanceId(), work.getLogsequenceNumber());\n                } catch (Exception e) {\n                    s_logger.error(\"Problem during SG work \" + work, e);\n                    work.setStep(Step.Error);\n                }\n            }\n        } catch (InterruptedException e1) {\n            s_logger.warn(\"SG work: caught InterruptException\", e1);\n        }\n    }", "signature": "void work()", "full_signature": "@Override public void work()", "class_method_signature": "SecurityGroupManagerImpl2.work()", "testcase": false, "constructor": false, "invocations": ["trace", "getWork", "isTraceEnabled", "trace", "getInstanceId", "findByVmId", "getInstanceId", "warn", "getInstanceId", "setLogsequenceNumber", "getLogsequence", "sendRulesetUpdates", "logUpdateDetails", "getInstanceId", "getLogsequenceNumber", "error", "setStep", "warn"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}