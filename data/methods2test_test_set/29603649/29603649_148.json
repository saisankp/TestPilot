{"test_class": {"identifier": "FileZipperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private OutputStream outputStream;", "modifier": "@Mock\n    private", "type": "OutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "@Mock\n    private ZipOutputStream zipOutputStream;", "modifier": "@Mock\n    private", "type": "ZipOutputStream", "declarator": "zipOutputStream", "var_name": "zipOutputStream"}, {"original_string": "@Mock\n    private ZipOutputStreamFactory zipOutputStreamFactory;", "modifier": "@Mock\n    private", "type": "ZipOutputStreamFactory", "declarator": "zipOutputStreamFactory", "var_name": "zipOutputStreamFactory"}, {"original_string": "@Mock\n    private ZipEntryFactory entryFactory;", "modifier": "@Mock\n    private", "type": "ZipEntryFactory", "declarator": "entryFactory", "var_name": "entryFactory"}, {"original_string": "@Mock\n    private ZipEntry zipEntry;", "modifier": "@Mock\n    private", "type": "ZipEntry", "declarator": "zipEntry", "var_name": "zipEntry"}, {"original_string": "@InjectMocks\n    private FileZipper underTest;", "modifier": "@InjectMocks\n    private", "type": "FileZipper", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private List<List<String>> filePaths;", "modifier": "private", "type": "List<List<String>>", "declarator": "filePaths", "var_name": "filePaths"}], "file": "wilma-message-search/modules/wilma-message-search-webapp/src/test/java/com/epam/wilma/message/search/web/support/FileZipperTest.java"}, "test_case": {"identifier": "testCreateZipWithFilesWhenFilePathContainsBackSlashes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateZipWithFilesWhenFilePathContainsBackSlashes() throws IOException {\n        //GIVEN\n        List<String> pair = new ArrayList<String>();\n        pair.add(FilenameUtils.separatorsToSystem(\"src\\\\test\\\\resources\\\\first_testreq.txt\"));\n        filePaths.add(pair);\n        //WHEN\n        underTest.createZipWithFiles(filePaths, outputStream);\n        //THEN\n        verify(entryFactory).createZipEntry(\"first_testreq.txt\");\n        verify(zipOutputStream).putNextEntry(zipEntry);\n        verify(zipOutputStream).close();\n    }", "signature": "void testCreateZipWithFilesWhenFilePathContainsBackSlashes()", "full_signature": "@Test public void testCreateZipWithFilesWhenFilePathContainsBackSlashes()", "class_method_signature": "FileZipperTest.testCreateZipWithFilesWhenFilePathContainsBackSlashes()", "testcase": true, "constructor": false, "invocations": ["add", "separatorsToSystem", "add", "createZipWithFiles", "createZipEntry", "verify", "putNextEntry", "verify", "close", "verify"]}, "focal_class": {"identifier": "FileZipper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(FileZipper.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FileZipper.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private ZipOutputStreamFactory zipOutputStreamFactory;", "modifier": "@Autowired\n    private", "type": "ZipOutputStreamFactory", "declarator": "zipOutputStreamFactory", "var_name": "zipOutputStreamFactory"}, {"original_string": "@Autowired\n    private ZipEntryFactory entryFactory;", "modifier": "@Autowired\n    private", "type": "ZipEntryFactory", "declarator": "entryFactory", "var_name": "entryFactory"}], "methods": [{"identifier": "createZipWithFiles", "parameters": "(final List<List<String>> filePaths, final OutputStream result)", "modifiers": "public", "return": "void", "signature": "void createZipWithFiles(final List<List<String>> filePaths, final OutputStream result)", "full_signature": "public void createZipWithFiles(final List<List<String>> filePaths, final OutputStream result)", "class_method_signature": "FileZipper.createZipWithFiles(final List<List<String>> filePaths, final OutputStream result)", "testcase": false, "constructor": false}, {"identifier": "zipFiles", "parameters": "(final List<List<String>> filePaths, final ZipOutputStream zipStream)", "modifiers": "private", "return": "void", "signature": "void zipFiles(final List<List<String>> filePaths, final ZipOutputStream zipStream)", "full_signature": "private void zipFiles(final List<List<String>> filePaths, final ZipOutputStream zipStream)", "class_method_signature": "FileZipper.zipFiles(final List<List<String>> filePaths, final ZipOutputStream zipStream)", "testcase": false, "constructor": false}, {"identifier": "addFileToZipStream", "parameters": "(final ZipOutputStream zipStream, final String fileName, final InputStream file)", "modifiers": "private", "return": "void", "signature": "void addFileToZipStream(final ZipOutputStream zipStream, final String fileName, final InputStream file)", "full_signature": "private void addFileToZipStream(final ZipOutputStream zipStream, final String fileName, final InputStream file)", "class_method_signature": "FileZipper.addFileToZipStream(final ZipOutputStream zipStream, final String fileName, final InputStream file)", "testcase": false, "constructor": false}, {"identifier": "putZipEntryToStream", "parameters": "(final ZipOutputStream zipStream, final String fileName)", "modifiers": "private", "return": "void", "signature": "void putZipEntryToStream(final ZipOutputStream zipStream, final String fileName)", "full_signature": "private void putZipEntryToStream(final ZipOutputStream zipStream, final String fileName)", "class_method_signature": "FileZipper.putZipEntryToStream(final ZipOutputStream zipStream, final String fileName)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(final String filePath)", "modifiers": "private", "return": "String", "signature": "String getFileName(final String filePath)", "full_signature": "private String getFileName(final String filePath)", "class_method_signature": "FileZipper.getFileName(final String filePath)", "testcase": false, "constructor": false}, {"identifier": "closeZipStream", "parameters": "(final ZipOutputStream zipStream)", "modifiers": "private", "return": "void", "signature": "void closeZipStream(final ZipOutputStream zipStream)", "full_signature": "private void closeZipStream(final ZipOutputStream zipStream)", "class_method_signature": "FileZipper.closeZipStream(final ZipOutputStream zipStream)", "testcase": false, "constructor": false}], "file": "wilma-message-search/modules/wilma-message-search-webapp/src/main/java/com/epam/wilma/message/search/web/support/FileZipper.java"}, "focal_method": {"identifier": "createZipWithFiles", "parameters": "(final List<List<String>> filePaths, final OutputStream result)", "modifiers": "public", "return": "void", "body": "public void createZipWithFiles(final List<List<String>> filePaths, final OutputStream result) {\n        ZipOutputStream zipStream = zipOutputStreamFactory.createZipOutputStream(result);\n        zipFiles(filePaths, zipStream);\n        closeZipStream(zipStream);\n    }", "signature": "void createZipWithFiles(final List<List<String>> filePaths, final OutputStream result)", "full_signature": "public void createZipWithFiles(final List<List<String>> filePaths, final OutputStream result)", "class_method_signature": "FileZipper.createZipWithFiles(final List<List<String>> filePaths, final OutputStream result)", "testcase": false, "constructor": false, "invocations": ["createZipOutputStream", "zipFiles", "closeZipStream"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}