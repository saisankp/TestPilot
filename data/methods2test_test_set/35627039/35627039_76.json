{"test_class": {"identifier": "NotificationsResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "NotificationsResource resource;", "modifier": "", "type": "NotificationsResource", "declarator": "resource", "var_name": "resource"}, {"original_string": "@Mocked\n    UriInfo mockUriInfo;", "modifier": "@Mocked", "type": "UriInfo", "declarator": "mockUriInfo", "var_name": "mockUriInfo"}, {"original_string": "@Mocked\n    NotificationService mockNotificationService;", "modifier": "@Mocked", "type": "NotificationService", "declarator": "mockNotificationService", "var_name": "mockNotificationService"}, {"original_string": "@Injectable\n    StreamlineAuthorizer authorizer = new NoopAuthorizer();", "modifier": "@Injectable", "type": "StreamlineAuthorizer", "declarator": "authorizer = new NoopAuthorizer()", "var_name": "authorizer"}, {"original_string": "@Injectable\n    SecurityContext securityContext;", "modifier": "@Injectable", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}], "file": "streams/service/src/test/java/com/hortonworks/streamline/streams/service/NotificationsResourceTest.java"}, "test_case": {"identifier": "testListNotifications", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testListNotifications() throws Exception {\n        final MultivaluedMap<String, String> qp = new MultivaluedHashMap<String, String>() {\n            {\n                putSingle(\"status\", \"DELIVERED\");\n                putSingle(\"notifierName\", \"console_notifier\");\n                putSingle(\"startTs\", \"1444625166800\");\n                putSingle(\"endTs\", \"1444625166810\");\n            }\n        };\n\n        new Expectations() {\n            {\n                mockUriInfo.getQueryParameters(); times = 1;\n                result = qp;\n            }\n        };\n\n        try {\n            resource.listNotifications(mockUriInfo, securityContext);\n\n            fail(\"We don't mock the result so it should throw entity not found\");\n        } catch (EntityNotFoundException e) {\n            // expected\n            new Verifications() {\n                {\n                    List<QueryParam> qps;\n                    mockNotificationService.findNotifications(qps = withCapture());\n                    //System.out.println(qps);\n                    assertEquals(4, qps.size());\n                }\n            };\n        }\n    }", "signature": "void testListNotifications()", "full_signature": "@Test public void testListNotifications()", "class_method_signature": "NotificationsResourceTest.testListNotifications()", "testcase": true, "constructor": false, "invocations": ["putSingle", "putSingle", "putSingle", "putSingle", "getQueryParameters", "listNotifications", "fail", "findNotifications", "withCapture", "assertEquals", "size"]}, "focal_class": {"identifier": "NotificationsResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NotificationsResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NotificationsResource.class)", "var_name": "LOG"}, {"original_string": "private final StreamlineAuthorizer authorizer;", "modifier": "private final", "type": "StreamlineAuthorizer", "declarator": "authorizer", "var_name": "authorizer"}, {"original_string": "private final NotificationService notificationService;", "modifier": "private final", "type": "NotificationService", "declarator": "notificationService", "var_name": "notificationService"}], "methods": [{"identifier": "NotificationsResource", "parameters": "(StreamlineAuthorizer authorizer, NotificationService service)", "modifiers": "public", "return": "", "signature": " NotificationsResource(StreamlineAuthorizer authorizer, NotificationService service)", "full_signature": "public  NotificationsResource(StreamlineAuthorizer authorizer, NotificationService service)", "class_method_signature": "NotificationsResource.NotificationsResource(StreamlineAuthorizer authorizer, NotificationService service)", "testcase": false, "constructor": true}, {"identifier": "getNotificationById", "parameters": "(@PathParam(\"id\") String id,\n                                        @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/notifications/{id}\") @Timed public", "return": "Response", "signature": "Response getNotificationById(@PathParam(\"id\") String id,\n                                        @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/notifications/{id}\") @Timed public Response getNotificationById(@PathParam(\"id\") String id,\n                                        @Context SecurityContext securityContext)", "class_method_signature": "NotificationsResource.getNotificationById(@PathParam(\"id\") String id,\n                                        @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "listNotifications", "parameters": "(@Context UriInfo uriInfo, @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/notifications/\") @Timed public", "return": "Response", "signature": "Response listNotifications(@Context UriInfo uriInfo, @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/notifications/\") @Timed public Response listNotifications(@Context UriInfo uriInfo, @Context SecurityContext securityContext)", "class_method_signature": "NotificationsResource.listNotifications(@Context UriInfo uriInfo, @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "updateNotificationStatus", "parameters": "(@PathParam(\"id\") String notificationId,\n                                             @PathParam(\"status\") Notification.Status status,\n                                             @Context SecurityContext securityContext)", "modifiers": "@PUT @Path(\"/notifications/{id}/{status}\") @Timed public", "return": "Response", "signature": "Response updateNotificationStatus(@PathParam(\"id\") String notificationId,\n                                             @PathParam(\"status\") Notification.Status status,\n                                             @Context SecurityContext securityContext)", "full_signature": "@PUT @Path(\"/notifications/{id}/{status}\") @Timed public Response updateNotificationStatus(@PathParam(\"id\") String notificationId,\n                                             @PathParam(\"status\") Notification.Status status,\n                                             @Context SecurityContext securityContext)", "class_method_signature": "NotificationsResource.updateNotificationStatus(@PathParam(\"id\") String notificationId,\n                                             @PathParam(\"status\") Notification.Status status,\n                                             @Context SecurityContext securityContext)", "testcase": false, "constructor": false}, {"identifier": "getEventById", "parameters": "(@PathParam(\"id\") String id,\n                                 @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/events/{id}\") @Timed public", "return": "Response", "signature": "Response getEventById(@PathParam(\"id\") String id,\n                                 @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/events/{id}\") @Timed public Response getEventById(@PathParam(\"id\") String id,\n                                 @Context SecurityContext securityContext)", "class_method_signature": "NotificationsResource.getEventById(@PathParam(\"id\") String id,\n                                 @Context SecurityContext securityContext)", "testcase": false, "constructor": false}], "file": "streams/service/src/main/java/com/hortonworks/streamline/streams/service/NotificationsResource.java"}, "focal_method": {"identifier": "listNotifications", "parameters": "(@Context UriInfo uriInfo, @Context SecurityContext securityContext)", "modifiers": "@GET @Path(\"/notifications/\") @Timed public", "return": "Response", "body": "@GET\n    @Path(\"/notifications/\")\n    @Timed\n    public Response listNotifications(@Context UriInfo uriInfo, @Context SecurityContext securityContext) {\n        SecurityUtil.checkRole(authorizer, securityContext, Roles.ROLE_NOTIFICATION_USER);\n        List<QueryParam> queryParams = new ArrayList<>();\n        MultivaluedMap<String, String> uriInfoParams = uriInfo.getQueryParameters();\n        Collection<Notification> notifications = null;\n        if (!uriInfoParams.isEmpty()) {\n            queryParams = WSUtils.buildQueryParameters(uriInfoParams);\n        } else {\n            LOG.info(\"Query params empty, will use default criteria to return notifications.\");\n        }\n        notifications = notificationService.findNotifications(queryParams);\n        if (notifications != null && !notifications.isEmpty()) {\n            return WSUtils.respondEntities(notifications, OK);\n        }\n\n        throw EntityNotFoundException.byFilter(queryParams.toString());\n    }", "signature": "Response listNotifications(@Context UriInfo uriInfo, @Context SecurityContext securityContext)", "full_signature": "@GET @Path(\"/notifications/\") @Timed public Response listNotifications(@Context UriInfo uriInfo, @Context SecurityContext securityContext)", "class_method_signature": "NotificationsResource.listNotifications(@Context UriInfo uriInfo, @Context SecurityContext securityContext)", "testcase": false, "constructor": false, "invocations": ["checkRole", "getQueryParameters", "isEmpty", "buildQueryParameters", "info", "findNotifications", "isEmpty", "respondEntities", "byFilter", "toString"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}