{"test_class": {"identifier": "TestIdGeneratorService", "superclass": "extends BasicReusableHostTestCase", "interfaces": "", "fields": [{"original_string": "public int nodeCount = 3;", "modifier": "public", "type": "int", "declarator": "nodeCount = 3", "var_name": "nodeCount"}], "file": "xenon-samples/src/test/java/com/vmware/xenon/services/samples/TestIdGeneratorService.java"}, "test_case": {"identifier": "idGeneratorService", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void idGeneratorService() throws Throwable {\n        HashMap<Long, Long> idCountMap = new HashMap<>();\n        setUpMultiNode();\n        int totalIds = 200;\n        int idCount = 0;\n\n        for (int i = 0; i < totalIds / 2; i++) {\n            VerificationHost peer = this.host.getPeerHost();\n            Operation get = Operation.createGet(peer, IdGeneratorService.SELF_LINK);\n            IdGeneratorService.IdGeneratorResponse state = sender.sendAndWait(\n                    get, IdGeneratorService.IdGeneratorResponse.class);\n            this.host.log(Level.INFO, \"ID Response: %d - %s\", state.uniqueId, state.documentOwner);\n            if (state.uniqueId >= 0) {\n                assertFalse(idCountMap.containsKey(state.uniqueId));\n                idCountMap.put(state.uniqueId, 0L);\n                idCount++;\n            }\n        }\n\n        for (VerificationHost h : this.host.getInProcessHostMap().values()) {\n            h.startService(new IdGeneratorService());\n        }\n\n        this.host.stopHost(this.host.getPeerHost());\n        VerificationHost host = VerificationHost.create(0);\n        host.start();\n        host.startFactory(new IdRangeService());\n        host.startService(new IdGeneratorService());\n        this.host.addPeerNode(host );\n        this.host.joinNodesAndVerifyConvergence(this.nodeCount);\n\n        for (int i = 0; i < totalIds / 2; i++) {\n            VerificationHost peer1 = this.host.getPeerHost();\n            Operation get = Operation.createGet(peer1, IdGeneratorService.SELF_LINK);\n            IdGeneratorService.IdGeneratorResponse state = sender.sendAndWait(\n                    get, IdGeneratorService.IdGeneratorResponse.class);\n            this.host.log(Level.INFO, \"ID Response: %d - %s\", state.uniqueId, state.documentOwner);\n            if (state.uniqueId >= 0) {\n                assertFalse(idCountMap.containsKey(state.uniqueId));\n                idCountMap.put(state.uniqueId, 0L);\n                idCount++;\n            }\n        }\n\n        // Verify that we had enough valid Id generated.\n        assertTrue(idCount >= totalIds / 2);\n\n        // Verify new ranges\n        for (int i = 0; i < 10; i++) {\n            URI uri = UriUtils.buildUri(this.host.getPeerHost(), IdRangeService.FACTORY_LINK);\n            uri = UriUtils.extendUri(uri, UriUtils.convertPathCharsFromLink(IdGeneratorService.SELF_LINK));\n            Operation get = Operation.createGet(uri);\n            IdRangeService.State state = sender.sendAndWait(get, IdRangeService.State.class);\n            this.host.log(Level.INFO, \"Range: %d - %d\", state.minId, state.maxId);\n            if (state.minId >= 0) {\n                assertFalse(idCountMap.containsKey(state.minId));\n                idCountMap.put(state.minId, 0L);\n            }\n        }\n    }", "signature": "void idGeneratorService()", "full_signature": "@Test public void idGeneratorService()", "class_method_signature": "TestIdGeneratorService.idGeneratorService()", "testcase": true, "constructor": false, "invocations": ["setUpMultiNode", "getPeerHost", "createGet", "sendAndWait", "log", "assertFalse", "containsKey", "put", "values", "getInProcessHostMap", "startService", "stopHost", "getPeerHost", "create", "start", "startFactory", "startService", "addPeerNode", "joinNodesAndVerifyConvergence", "getPeerHost", "createGet", "sendAndWait", "log", "assertFalse", "containsKey", "put", "assertTrue", "buildUri", "getPeerHost", "extendUri", "convertPathCharsFromLink", "createGet", "sendAndWait", "log", "assertFalse", "containsKey", "put"]}, "focal_class": {"identifier": "IdGeneratorService", "superclass": "extends StatelessService", "interfaces": "", "fields": [{"original_string": "public static final String SELF_LINK = ServiceUriPaths.SAMPLES\n            + \"/unique-id-int64\";", "modifier": "public static final", "type": "String", "declarator": "SELF_LINK = ServiceUriPaths.SAMPLES\n            + \"/unique-id-int64\"", "var_name": "SELF_LINK"}, {"original_string": "public static final int RANGE_INTERVAL_SIZE = IdRangeService.RANGE_INTERVAL;", "modifier": "public static final", "type": "int", "declarator": "RANGE_INTERVAL_SIZE = IdRangeService.RANGE_INTERVAL", "var_name": "RANGE_INTERVAL_SIZE"}, {"original_string": "private static final Object object = new Object();", "modifier": "private static final", "type": "Object", "declarator": "object = new Object()", "var_name": "object"}, {"original_string": "private RangeCollection rangeCollection = new RangeCollection();", "modifier": "private", "type": "RangeCollection", "declarator": "rangeCollection = new RangeCollection()", "var_name": "rangeCollection"}], "methods": [{"identifier": "IdGeneratorService", "parameters": "()", "modifiers": "public", "return": "", "signature": " IdGeneratorService()", "full_signature": "public  IdGeneratorService()", "class_method_signature": "IdGeneratorService.IdGeneratorService()", "testcase": false, "constructor": true}, {"identifier": "handleStart", "parameters": "(Operation start)", "modifiers": "@Override public", "return": "void", "signature": "void handleStart(Operation start)", "full_signature": "@Override public void handleStart(Operation start)", "class_method_signature": "IdGeneratorService.handleStart(Operation start)", "testcase": false, "constructor": false}, {"identifier": "handleGet", "parameters": "(Operation get)", "modifiers": "@Override public", "return": "void", "signature": "void handleGet(Operation get)", "full_signature": "@Override public void handleGet(Operation get)", "class_method_signature": "IdGeneratorService.handleGet(Operation get)", "testcase": false, "constructor": false}], "file": "xenon-samples/src/main/java/com/vmware/xenon/services/samples/IdGeneratorService.java"}, "focal_method": {"identifier": "IdGeneratorService", "parameters": "()", "modifiers": "public", "return": "", "body": "public IdGeneratorService() {\n    }", "signature": " IdGeneratorService()", "full_signature": "public  IdGeneratorService()", "class_method_signature": "IdGeneratorService.IdGeneratorService()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}