{"test_class": {"identifier": "FilterSetsTest", "superclass": "extends ProgressCheckTestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/checks/FilterSetsTest.java"}, "test_case": {"identifier": "testModeMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testModeMerge() throws Exception {\n        TestUtil.testBlock(() -> {\n            ProgressCheck handler = new FilterSets().newInstance(obj().get());\n            CheckReport report = scanWithCheck(handler, \"tmp_mode_merge.zip\");\n\n            Assert.assertEquals(\"one violation\", 1, report.getViolations().size());\n            Assert.assertEquals(\"is severity\", Severity.MINOR,\n                    report.getViolations().iterator().next().getSeverity());\n            assertTrue(\"all violations have packageIds\", report.getViolations().stream()\n                    .allMatch(viol -> !viol.getPackages().isEmpty()));\n        });\n        TestUtil.testBlock(() -> {\n            ProgressCheck handler = new FilterSets().newInstance(key(\"importModeSeverity\", \"severe\").get());\n            CheckReport report = scanWithCheck(handler, \"tmp_mode_merge.zip\");\n\n            Assert.assertEquals(\"one violation\", 1, report.getViolations().size());\n            Assert.assertEquals(\"is severity\", Severity.SEVERE,\n                    report.getViolations().iterator().next().getSeverity());\n            assertTrue(\"all violations have packageIds\", report.getViolations().stream()\n                    .allMatch(viol -> !viol.getPackages().isEmpty()));\n        });\n    }", "signature": "void testModeMerge()", "full_signature": "@Test public void testModeMerge()", "class_method_signature": "FilterSetsTest.testModeMerge()", "testcase": true, "constructor": false, "invocations": ["testBlock", "newInstance", "get", "obj", "scanWithCheck", "assertEquals", "size", "getViolations", "assertEquals", "getSeverity", "next", "iterator", "getViolations", "assertTrue", "allMatch", "stream", "getViolations", "isEmpty", "getPackages", "testBlock", "newInstance", "get", "key", "scanWithCheck", "assertEquals", "size", "getViolations", "assertEquals", "getSeverity", "next", "iterator", "getViolations", "assertTrue", "allMatch", "stream", "getViolations", "isEmpty", "getPackages"]}, "focal_class": {"identifier": "FilterSets", "superclass": "", "interfaces": "implements ProgressCheckFactory", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String importModeSeverity() {\n            return \"importModeSeverity\";\n        }\n\n        @Override\n        public String allowEmptyFilter() {\n            return \"allowEmptyFilter\";\n        }\n\n        @Override\n        public String allowRootFilter() {\n            return \"allowRootFilter\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String importModeSeverity() {\n            return \"importModeSeverity\";\n        }\n\n        @Override\n        public String allowEmptyFilter() {\n            return \"allowEmptyFilter\";\n        }\n\n        @Override\n        public String allowRootFilter() {\n            return \"allowRootFilter\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_IMPORT_MODE_SEVERITY = keys().importModeSeverity();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_IMPORT_MODE_SEVERITY = keys().importModeSeverity()", "var_name": "CONFIG_IMPORT_MODE_SEVERITY"}, {"original_string": "@Deprecated\n    public static final String CONFIG_ALLOW_EMPTY_FILTER = keys().allowEmptyFilter();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_ALLOW_EMPTY_FILTER = keys().allowEmptyFilter()", "var_name": "CONFIG_ALLOW_EMPTY_FILTER"}, {"original_string": "@Deprecated\n    public static final String CONFIG_ALLOW_ROOT_FILTER = keys().allowRootFilter();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_ALLOW_ROOT_FILTER = keys().allowRootFilter()", "var_name": "CONFIG_ALLOW_ROOT_FILTER"}, {"original_string": "public static final Severity DEFAULT_IMPORT_MODE_SEVERITY = Severity.MINOR;", "modifier": "public static final", "type": "Severity", "declarator": "DEFAULT_IMPORT_MODE_SEVERITY = Severity.MINOR", "var_name": "DEFAULT_IMPORT_MODE_SEVERITY"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "JsonKeys", "signature": "JsonKeys keys()", "full_signature": "@NotNull public static JsonKeys keys()", "class_method_signature": "FilterSets.keys()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "FilterSets.newInstance(final JsonObject config)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/checks/FilterSets.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "body": "@Override\n    public ProgressCheck newInstance(final JsonObject config) {\n        final Severity importModeSeverity = Severity\n                .valueOf(config.getString(keys().importModeSeverity(), DEFAULT_IMPORT_MODE_SEVERITY.name())\n                        .toUpperCase());\n        final boolean allowEmptyFilter = hasNonNull(config, keys().allowEmptyFilter())\n                && config.getBoolean(keys().allowEmptyFilter());\n        final boolean allowRootFilter = hasNonNull(config, keys().allowRootFilter())\n                && config.getBoolean(keys().allowRootFilter());\n        return new Check(importModeSeverity, allowEmptyFilter, allowRootFilter);\n    }", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "FilterSets.newInstance(final JsonObject config)", "testcase": false, "constructor": false, "invocations": ["valueOf", "toUpperCase", "getString", "importModeSeverity", "keys", "name", "hasNonNull", "allowEmptyFilter", "keys", "getBoolean", "allowEmptyFilter", "keys", "hasNonNull", "allowRootFilter", "keys", "getBoolean", "allowRootFilter", "keys"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}