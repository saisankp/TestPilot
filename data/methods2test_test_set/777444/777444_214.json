{"test_class": {"identifier": "DateExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DateExtractor extractor;", "modifier": "private", "type": "DateExtractor", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "private ObjectToJsonConverter converter;", "modifier": "private", "type": "ObjectToJsonConverter", "declarator": "converter", "var_name": "converter"}], "file": "agent/core/src/test/java/org/jolokia/converter/json/DateExtractorTest.java"}, "test_case": {"identifier": "directExtract", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void directExtract() throws AttributeNotFoundException {\n        Date date = new Date();\n        Stack stack = new Stack();\n        Object result = extractor.extractObject(null,date,stack,false);\n        assertEquals(result,date);\n        stack.add(\"time\");\n        result = extractor.extractObject(null,date,stack,false);\n        assertEquals(result,date);\n    }", "signature": "void directExtract()", "full_signature": "@Test public void directExtract()", "class_method_signature": "DateExtractorTest.directExtract()", "testcase": true, "constructor": false, "invocations": ["extractObject", "assertEquals", "add", "extractObject", "assertEquals"]}, "focal_class": {"identifier": "DateExtractor", "superclass": "", "interfaces": "implements Extractor", "fields": [], "methods": [{"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class", "signature": "Class getType()", "full_signature": "public Class getType()", "class_method_signature": "DateExtractor.getType()", "testcase": false, "constructor": false}, {"identifier": "extractObject", "parameters": "(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, boolean jsonify)", "modifiers": "public", "return": "Object", "signature": "Object extractObject(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, boolean jsonify)", "full_signature": "public Object extractObject(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, boolean jsonify)", "class_method_signature": "DateExtractor.extractObject(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, boolean jsonify)", "testcase": false, "constructor": false}, {"identifier": "setObjectValue", "parameters": "(StringToObjectConverter pConverter, Object pInner, String pAttribute, Object pValue)", "modifiers": "public", "return": "Object", "signature": "Object setObjectValue(StringToObjectConverter pConverter, Object pInner, String pAttribute, Object pValue)", "full_signature": "public Object setObjectValue(StringToObjectConverter pConverter, Object pInner, String pAttribute, Object pValue)", "class_method_signature": "DateExtractor.setObjectValue(StringToObjectConverter pConverter, Object pInner, String pAttribute, Object pValue)", "testcase": false, "constructor": false}, {"identifier": "canSetValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canSetValue()", "full_signature": "public boolean canSetValue()", "class_method_signature": "DateExtractor.canSetValue()", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/converter/json/DateExtractor.java"}, "focal_method": {"identifier": "extractObject", "parameters": "(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, boolean jsonify)", "modifiers": "public", "return": "Object", "body": "public Object extractObject(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, boolean jsonify) throws AttributeNotFoundException {\n        if (!jsonify) {\n            return pValue;\n        }\n        Date date = (Date) pValue;\n        String pathPart = pPathParts.isEmpty() ? null : pPathParts.pop();\n        if (pathPart != null) {\n            if (!\"time\".equals(pathPart)) {\n                return pConverter.getValueFaultHandler().handleException(\n                        new AttributeNotFoundException(\"A date accepts only a single inner path element \" +\n                                                       \"of value 'time' (and not '\" + pathPart + \"')\"));\n            }\n            return date.getTime();\n        } else {\n            return DateUtil.toISO8601(date);\n        }\n    }", "signature": "Object extractObject(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, boolean jsonify)", "full_signature": "public Object extractObject(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, boolean jsonify)", "class_method_signature": "DateExtractor.extractObject(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, boolean jsonify)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "pop", "equals", "handleException", "getValueFaultHandler", "getTime", "toISO8601"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}