{"test_class": {"identifier": "MutableCompositeModificationTest", "superclass": "extends AbstractModificationTest", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/modification/MutableCompositeModificationTest.java"}, "test_case": {"identifier": "testApply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApply() throws Exception {\n\n        MutableCompositeModification compositeModification = new MutableCompositeModification();\n        compositeModification.addModification(new WriteModification(TestModel.TEST_PATH,\n            ImmutableNodes.containerNode(TestModel.TEST_QNAME)));\n\n        DOMStoreReadWriteTransaction transaction = store.newReadWriteTransaction();\n        compositeModification.apply(transaction);\n        commitTransaction(transaction);\n\n        Optional<NormalizedNode<?, ?>> data = readData(TestModel.TEST_PATH);\n\n        assertNotNull(data.get());\n        assertEquals(TestModel.TEST_QNAME, data.get().getNodeType());\n    }", "signature": "void testApply()", "full_signature": "@Test public void testApply()", "class_method_signature": "MutableCompositeModificationTest.testApply()", "testcase": true, "constructor": false, "invocations": ["addModification", "containerNode", "newReadWriteTransaction", "apply", "commitTransaction", "readData", "assertNotNull", "get", "assertEquals", "getNodeType", "get"]}, "focal_class": {"identifier": "MutableCompositeModification", "superclass": "extends VersionedExternalizableMessage", "interfaces": "implements CompositeModification", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final List<Modification> modifications = new ArrayList<>();", "modifier": "private final", "type": "List<Modification>", "declarator": "modifications = new ArrayList<>()", "var_name": "modifications"}, {"original_string": "private List<Modification> immutableModifications = null;", "modifier": "private", "type": "List<Modification>", "declarator": "immutableModifications = null", "var_name": "immutableModifications"}], "methods": [{"identifier": "MutableCompositeModification", "parameters": "()", "modifiers": "public", "return": "", "signature": " MutableCompositeModification()", "full_signature": "public  MutableCompositeModification()", "class_method_signature": "MutableCompositeModification.MutableCompositeModification()", "testcase": false, "constructor": true}, {"identifier": "MutableCompositeModification", "parameters": "(final short version)", "modifiers": "public", "return": "", "signature": " MutableCompositeModification(final short version)", "full_signature": "public  MutableCompositeModification(final short version)", "class_method_signature": "MutableCompositeModification.MutableCompositeModification(final short version)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(final DOMStoreWriteTransaction transaction)", "modifiers": "@Override public", "return": "void", "signature": "void apply(final DOMStoreWriteTransaction transaction)", "full_signature": "@Override public void apply(final DOMStoreWriteTransaction transaction)", "class_method_signature": "MutableCompositeModification.apply(final DOMStoreWriteTransaction transaction)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final DataTreeModification transaction)", "modifiers": "@Override public", "return": "void", "signature": "void apply(final DataTreeModification transaction)", "full_signature": "@Override public void apply(final DataTreeModification transaction)", "class_method_signature": "MutableCompositeModification.apply(final DataTreeModification transaction)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "byte", "signature": "byte getType()", "full_signature": "@Override public byte getType()", "class_method_signature": "MutableCompositeModification.getType()", "testcase": false, "constructor": false}, {"identifier": "addModification", "parameters": "(final Modification modification)", "modifiers": "public", "return": "void", "signature": "void addModification(final Modification modification)", "full_signature": "public void addModification(final Modification modification)", "class_method_signature": "MutableCompositeModification.addModification(final Modification modification)", "testcase": false, "constructor": false}, {"identifier": "addModifications", "parameters": "(final Iterable<Modification> newMods)", "modifiers": "public", "return": "void", "signature": "void addModifications(final Iterable<Modification> newMods)", "full_signature": "public void addModifications(final Iterable<Modification> newMods)", "class_method_signature": "MutableCompositeModification.addModifications(final Iterable<Modification> newMods)", "testcase": false, "constructor": false}, {"identifier": "getModifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Modification>", "signature": "List<Modification> getModifications()", "full_signature": "@Override public List<Modification> getModifications()", "class_method_signature": "MutableCompositeModification.getModifications()", "testcase": false, "constructor": false}, {"identifier": "readExternal", "parameters": "(final ObjectInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readExternal(final ObjectInput in)", "full_signature": "@Override public void readExternal(final ObjectInput in)", "class_method_signature": "MutableCompositeModification.readExternal(final ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(final ObjectOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeExternal(final ObjectOutput out)", "full_signature": "@Override public void writeExternal(final ObjectOutput out)", "class_method_signature": "MutableCompositeModification.writeExternal(final ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "fromSerializable", "parameters": "(final Object serializable)", "modifiers": "public static", "return": "MutableCompositeModification", "signature": "MutableCompositeModification fromSerializable(final Object serializable)", "full_signature": "public static MutableCompositeModification fromSerializable(final Object serializable)", "class_method_signature": "MutableCompositeModification.fromSerializable(final Object serializable)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(final NormalizedNodeDataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(final NormalizedNodeDataOutput out)", "full_signature": "@Override public void writeTo(final NormalizedNodeDataOutput out)", "class_method_signature": "MutableCompositeModification.writeTo(final NormalizedNodeDataOutput out)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/modification/MutableCompositeModification.java"}, "focal_method": {"identifier": "apply", "parameters": "(final DOMStoreWriteTransaction transaction)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void apply(final DOMStoreWriteTransaction transaction) {\n        for (Modification modification : modifications) {\n            modification.apply(transaction);\n        }\n    }", "signature": "void apply(final DOMStoreWriteTransaction transaction)", "full_signature": "@Override public void apply(final DOMStoreWriteTransaction transaction)", "class_method_signature": "MutableCompositeModification.apply(final DOMStoreWriteTransaction transaction)", "testcase": false, "constructor": false, "invocations": ["apply"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}