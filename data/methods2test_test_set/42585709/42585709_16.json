{"test_class": {"identifier": "RelatedGroupCriteriaScorerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double PREMIUM = 10d;", "modifier": "private static final", "type": "double", "declarator": "PREMIUM = 10d", "var_name": "PREMIUM"}, {"original_string": "private static final double PENALTY = -5d;", "modifier": "private static final", "type": "double", "declarator": "PENALTY = -5d", "var_name": "PENALTY"}, {"original_string": "static long idGen = 0;", "modifier": "static", "type": "long", "declarator": "idGen = 0", "var_name": "idGen"}], "file": "Engine/src/test/java/ch/hsr/servicecutter/scorer/criterionScorer/RelatedGroupCriteriaScorerTest.java"}, "test_case": {"identifier": "testRelatedGroups", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRelatedGroups() {\n\t\tCouplingInstance group1 = new CouplingInstance();\n\t\tCouplingInstance group2 = new CouplingInstance();\n\t\tCouplingInstance group3 = new CouplingInstance();\n\n\t\tNanoentity nanoentity1a = createNanoEntity(\"1A\");\n\t\tNanoentity nanoentity1b = createNanoEntity(\"1B\");\n\n\t\tgroup1.setNanoentities(Arrays.asList(nanoentity1a, nanoentity1b));\n\n\t\tNanoentity nanoentity2a = createNanoEntity(\"2A\");\n\t\tNanoentity nanoentity2b = createNanoEntity(\"2B\");\n\n\t\tgroup2.setNanoentities(Arrays.asList(nanoentity2a, nanoentity2b));\n\n\t\tNanoentity nanoentity3a = createNanoEntity(\"3A\");\n\t\tNanoentity nanoentity3b = createNanoEntity(\"3B\");\n\n\t\tgroup3.setNanoentities(Arrays.asList(nanoentity3a, nanoentity3b));\n\n\t\tNanoentity other = createNanoEntity(\"other\");\n\n\t\tRelatedGroupCriteriaScorer scorer = new RelatedGroupCriteriaScorer(PENALTY, PREMIUM,\n\t\t\t\tArrays.asList(nanoentity1a, nanoentity1b, nanoentity2a, nanoentity2b, nanoentity3a, nanoentity3b, other));\n\t\tMap<EntityPair, Double> scores = scorer.getScores(new HashSet<CouplingInstance>(Arrays.asList(group1, group2, group3)));\n\n\t\t// check premiums\n\t\tassertThat(scores.get(new EntityPair(nanoentity1a, nanoentity1b)), is(equalTo(PREMIUM)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity2a, nanoentity2b)), is(equalTo(PREMIUM)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity3a, nanoentity3b)), is(equalTo(PREMIUM)));\n\n\t\t// check penalties\n\t\tassertThat(scores.get(new EntityPair(nanoentity1a, nanoentity2b)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity1a, nanoentity2a)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity1a, nanoentity3b)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity1a, nanoentity3a)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity1b, nanoentity2a)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity1b, nanoentity2b)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity1b, nanoentity3a)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity1b, nanoentity3b)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity2a, nanoentity3a)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity2a, nanoentity3b)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity2b, nanoentity3a)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity2b, nanoentity3b)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity1a, other)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity1b, other)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity2a, other)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity2b, other)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity3a, other)), is(equalTo(PENALTY)));\n\t\tassertThat(scores.get(new EntityPair(nanoentity3b, other)), is(equalTo(PENALTY)));\n\t}", "signature": "void testRelatedGroups()", "full_signature": "@Test public void testRelatedGroups()", "class_method_signature": "RelatedGroupCriteriaScorerTest.testRelatedGroups()", "testcase": true, "constructor": false, "invocations": ["createNanoEntity", "createNanoEntity", "setNanoentities", "asList", "createNanoEntity", "createNanoEntity", "setNanoentities", "asList", "createNanoEntity", "createNanoEntity", "setNanoentities", "asList", "createNanoEntity", "asList", "getScores", "asList", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo", "assertThat", "get", "is", "equalTo"]}, "focal_class": {"identifier": "RelatedGroupCriteriaScorer", "superclass": "", "interfaces": "implements CriterionScorer", "fields": [{"original_string": "private double penalty;", "modifier": "private", "type": "double", "declarator": "penalty", "var_name": "penalty"}, {"original_string": "private double premium;", "modifier": "private", "type": "double", "declarator": "premium", "var_name": "premium"}, {"original_string": "private Iterable<Nanoentity> allNanoentities;", "modifier": "private", "type": "Iterable<Nanoentity>", "declarator": "allNanoentities", "var_name": "allNanoentities"}, {"original_string": "private boolean penaltyToOtherGroups;", "modifier": "private", "type": "boolean", "declarator": "penaltyToOtherGroups", "var_name": "penaltyToOtherGroups"}, {"original_string": "private boolean penaltyToAll;", "modifier": "private", "type": "boolean", "declarator": "penaltyToAll", "var_name": "penaltyToAll"}], "methods": [{"identifier": "RelatedGroupCriteriaScorer", "parameters": "(final double penalty, final double premium, final Iterable<Nanoentity> iterable, final boolean penaltyToOtherGroups,\n\t\t\tfinal boolean penaltyToAll)", "modifiers": "public", "return": "", "signature": " RelatedGroupCriteriaScorer(final double penalty, final double premium, final Iterable<Nanoentity> iterable, final boolean penaltyToOtherGroups,\n\t\t\tfinal boolean penaltyToAll)", "full_signature": "public  RelatedGroupCriteriaScorer(final double penalty, final double premium, final Iterable<Nanoentity> iterable, final boolean penaltyToOtherGroups,\n\t\t\tfinal boolean penaltyToAll)", "class_method_signature": "RelatedGroupCriteriaScorer.RelatedGroupCriteriaScorer(final double penalty, final double premium, final Iterable<Nanoentity> iterable, final boolean penaltyToOtherGroups,\n\t\t\tfinal boolean penaltyToAll)", "testcase": false, "constructor": true}, {"identifier": "RelatedGroupCriteriaScorer", "parameters": "(final double premium)", "modifiers": "public", "return": "", "signature": " RelatedGroupCriteriaScorer(final double premium)", "full_signature": "public  RelatedGroupCriteriaScorer(final double premium)", "class_method_signature": "RelatedGroupCriteriaScorer.RelatedGroupCriteriaScorer(final double premium)", "testcase": false, "constructor": true}, {"identifier": "RelatedGroupCriteriaScorer", "parameters": "(final double penalty, final double premium)", "modifiers": "public", "return": "", "signature": " RelatedGroupCriteriaScorer(final double penalty, final double premium)", "full_signature": "public  RelatedGroupCriteriaScorer(final double penalty, final double premium)", "class_method_signature": "RelatedGroupCriteriaScorer.RelatedGroupCriteriaScorer(final double penalty, final double premium)", "testcase": false, "constructor": true}, {"identifier": "RelatedGroupCriteriaScorer", "parameters": "(final double penalty, final double premium, final Iterable<Nanoentity> allEntities)", "modifiers": "public", "return": "", "signature": " RelatedGroupCriteriaScorer(final double penalty, final double premium, final Iterable<Nanoentity> allEntities)", "full_signature": "public  RelatedGroupCriteriaScorer(final double penalty, final double premium, final Iterable<Nanoentity> allEntities)", "class_method_signature": "RelatedGroupCriteriaScorer.RelatedGroupCriteriaScorer(final double penalty, final double premium, final Iterable<Nanoentity> allEntities)", "testcase": false, "constructor": true}, {"identifier": "getScores", "parameters": "(final Set<CouplingInstance> instances)", "modifiers": "@Override public", "return": "Map<EntityPair, Double>", "signature": "Map<EntityPair, Double> getScores(final Set<CouplingInstance> instances)", "full_signature": "@Override public Map<EntityPair, Double> getScores(final Set<CouplingInstance> instances)", "class_method_signature": "RelatedGroupCriteriaScorer.getScores(final Set<CouplingInstance> instances)", "testcase": false, "constructor": false}, {"identifier": "setPenaltyToOtherFields", "parameters": "(final Map<EntityPair, Double> result, final CouplingInstance instance, final Iterable<Nanoentity> otherNanoentities)", "modifiers": "private", "return": "void", "signature": "void setPenaltyToOtherFields(final Map<EntityPair, Double> result, final CouplingInstance instance, final Iterable<Nanoentity> otherNanoentities)", "full_signature": "private void setPenaltyToOtherFields(final Map<EntityPair, Double> result, final CouplingInstance instance, final Iterable<Nanoentity> otherNanoentities)", "class_method_signature": "RelatedGroupCriteriaScorer.setPenaltyToOtherFields(final Map<EntityPair, Double> result, final CouplingInstance instance, final Iterable<Nanoentity> otherNanoentities)", "testcase": false, "constructor": false}], "file": "Engine/src/main/java/ch/hsr/servicecutter/scorer/criterionScorer/RelatedGroupCriteriaScorer.java"}, "focal_method": {"identifier": "getScores", "parameters": "(final Set<CouplingInstance> instances)", "modifiers": "@Override public", "return": "Map<EntityPair, Double>", "body": "@Override\n\tpublic Map<EntityPair, Double> getScores(final Set<CouplingInstance> instances) {\n\t\tMap<EntityPair, Double> result = new HashMap<>();\n\t\tfor (CouplingInstance instance : instances) {\n\t\t\t// add Premium to nanoentities in same group\n\t\t\tif (premium != 0d) {\n\t\t\t\tfor (int i = 0; i < instance.getAllNanoentities().size() - 1; i++) {\n\t\t\t\t\tfor (int j = i + 1; j < instance.getAllNanoentities().size(); j++) {\n\t\t\t\t\t\tresult.put(new EntityPair(instance.getAllNanoentities().get(i), instance.getAllNanoentities().get(j)), premium);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (penalty != 0 && penaltyToAll) {\n\t\t\t\tsetPenaltyToOtherFields(result, instance, allNanoentities);\n\t\t\t}\n\n\t\t\tif (penalty != 0 && penaltyToOtherGroups) {\n\t\t\t\tList<Nanoentity> allNanoentitiesInInstances = instances.stream().flatMap(i -> i.getAllNanoentities().stream()).collect(Collectors.toList());\n\t\t\t\tsetPenaltyToOtherFields(result, instance, allNanoentitiesInInstances);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "signature": "Map<EntityPair, Double> getScores(final Set<CouplingInstance> instances)", "full_signature": "@Override public Map<EntityPair, Double> getScores(final Set<CouplingInstance> instances)", "class_method_signature": "RelatedGroupCriteriaScorer.getScores(final Set<CouplingInstance> instances)", "testcase": false, "constructor": false, "invocations": ["size", "getAllNanoentities", "size", "getAllNanoentities", "put", "get", "getAllNanoentities", "get", "getAllNanoentities", "setPenaltyToOtherFields", "collect", "flatMap", "stream", "stream", "getAllNanoentities", "toList", "setPenaltyToOtherFields"]}, "repository": {"repo_id": 42585709, "url": "https://github.com/ServiceCutter/ServiceCutter", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 29, "size": 8580, "license": "licensed"}}