{"test_class": {"identifier": "MyAttributeValueFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final URI stringEqualFunction;", "modifier": "private final", "type": "URI", "declarator": "stringEqualFunction", "var_name": "stringEqualFunction"}, {"original_string": "private final URI stringEqualOneof;", "modifier": "private final", "type": "URI", "declarator": "stringEqualOneof", "var_name": "stringEqualOneof"}], "file": "Code/core-abce/abce-components/src/test/java-ibm-only/eu/abc4trust/util/attributeTypes/MyAttributeValueFactoryTest.java"}, "test_case": {"identifier": "testComparisons", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComparisons() throws Exception {\n    List<MyAttributeValue> arguments = new ArrayList<MyAttributeValue>();\n\n    arguments.clear();\n    arguments.add(new MyAttributeValueInteger(4, null));\n    arguments.add(new MyAttributeValueInteger(7, null));\n    assertFalse(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:integer-greater-than\"), arguments));\n    assertFalse(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:integer-greater-than-or-equal\"), arguments));\n    assertTrue(evaulateFunction(new URI(\"urn:oasis:names:tc:xacml:1.0:function:integer-less-than\"),\n        arguments));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:integer-less-than-or-equal\"), arguments));\n\n    arguments.clear();\n    arguments.add(new MyAttributeValueInteger(42, null));\n    arguments.add(new MyAttributeValueInteger(42, null));\n    assertFalse(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:integer-greater-than\"), arguments));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:integer-greater-than-or-equal\"), arguments));\n    assertFalse(evaulateFunction(\n        new URI(\"urn:oasis:names:tc:xacml:1.0:function:integer-less-than\"), arguments));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:integer-less-than-or-equal\"), arguments));\n\n    arguments.clear();\n    arguments.add(new MyAttributeValueInteger(142, null));\n    arguments.add(new MyAttributeValueInteger(42, null));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:integer-greater-than\"), arguments));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:integer-greater-than-or-equal\"), arguments));\n    assertFalse(evaulateFunction(\n        new URI(\"urn:oasis:names:tc:xacml:1.0:function:integer-less-than\"), arguments));\n    assertFalse(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:integer-less-than-or-equal\"), arguments));\n\n    arguments.clear();\n    arguments.add(new MyAttributeValueDate(\"2010-10-10\", null));\n    arguments.add(new MyAttributeValueDate(\"2011-11-11\", null));\n    assertFalse(evaulateFunction(\n        new URI(\"urn:oasis:names:tc:xacml:1.0:function:date-greater-than\"), arguments));\n    assertFalse(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:date-greater-than-or-equal\"), arguments));\n    assertTrue(evaulateFunction(new URI(\"urn:oasis:names:tc:xacml:1.0:function:date-less-than\"),\n        arguments));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:date-less-than-or-equal\"), arguments));\n\n    arguments.clear();\n    arguments.add(new MyAttributeValueDate(\"2010-01-01\", null));\n    arguments.add(new MyAttributeValueDate(\"2010-01-01\", null));\n    assertFalse(evaulateFunction(\n        new URI(\"urn:oasis:names:tc:xacml:1.0:function:date-greater-than\"), arguments));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:date-greater-than-or-equal\"), arguments));\n    assertFalse(evaulateFunction(new URI(\"urn:oasis:names:tc:xacml:1.0:function:date-less-than\"),\n        arguments));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:date-less-than-or-equal\"), arguments));\n\n    arguments.clear();\n    arguments.add(new MyAttributeValueDate(\"2011-11-11\", null));\n    arguments.add(new MyAttributeValueDate(\"2010-10-10\", null));\n    assertTrue(evaulateFunction(new URI(\"urn:oasis:names:tc:xacml:1.0:function:date-greater-than\"),\n        arguments));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:date-greater-than-or-equal\"), arguments));\n    assertFalse(evaulateFunction(new URI(\"urn:oasis:names:tc:xacml:1.0:function:date-less-than\"),\n        arguments));\n    assertFalse(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:date-less-than-or-equal\"), arguments));\n    \n    arguments.clear();\n    arguments.add(new MyAttributeValueDateTime(\"2010-10-10T10:10:10Z\", null));\n    arguments.add(new MyAttributeValueDateTime(\"2011-11-11T10:10:10Z\", null));\n    assertFalse(evaulateFunction(\n        new URI(\"urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than\"), arguments));\n    assertFalse(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than-or-equal\"), arguments));\n    assertTrue(evaulateFunction(new URI(\"urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than\"),\n        arguments));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than-or-equal\"), arguments));\n\n    arguments.clear();\n    arguments.add(new MyAttributeValueDateTime(\"2010-01-01T10:10:10Z\", null));\n    arguments.add(new MyAttributeValueDateTime(\"2010-01-01T10:10:10Z\", null));\n    assertFalse(evaulateFunction(\n        new URI(\"urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than\"), arguments));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than-or-equal\"), arguments));\n    assertFalse(evaulateFunction(new URI(\"urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than\"),\n        arguments));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than-or-equal\"), arguments));\n\n    arguments.clear();\n    arguments.add(new MyAttributeValueDateTime(\"2011-11-11T10:10:10Z\", null));\n    arguments.add(new MyAttributeValueDateTime(\"2010-10-10T10:10:10Z\", null));\n    assertTrue(evaulateFunction(new URI(\"urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than\"),\n        arguments));\n    assertTrue(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than-or-equal\"), arguments));\n    assertFalse(evaulateFunction(new URI(\"urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than\"),\n        arguments));\n    assertFalse(evaulateFunction(new URI(\n        \"urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than-or-equal\"), arguments));\n  }", "signature": "void testComparisons()", "full_signature": "@Test public void testComparisons()", "class_method_signature": "MyAttributeValueFactoryTest.testComparisons()", "testcase": true, "constructor": false, "invocations": ["clear", "add", "add", "assertFalse", "evaulateFunction", "assertFalse", "evaulateFunction", "assertTrue", "evaulateFunction", "assertTrue", "evaulateFunction", "clear", "add", "add", "assertFalse", "evaulateFunction", "assertTrue", "evaulateFunction", "assertFalse", "evaulateFunction", "assertTrue", "evaulateFunction", "clear", "add", "add", "assertTrue", "evaulateFunction", "assertTrue", "evaulateFunction", "assertFalse", "evaulateFunction", "assertFalse", "evaulateFunction", "clear", "add", "add", "assertFalse", "evaulateFunction", "assertFalse", "evaulateFunction", "assertTrue", "evaulateFunction", "assertTrue", "evaulateFunction", "clear", "add", "add", "assertFalse", "evaulateFunction", "assertTrue", "evaulateFunction", "assertFalse", "evaulateFunction", "assertTrue", "evaulateFunction", "clear", "add", "add", "assertTrue", "evaulateFunction", "assertTrue", "evaulateFunction", "assertFalse", "evaulateFunction", "assertFalse", "evaulateFunction", "clear", "add", "add", "assertFalse", "evaulateFunction", "assertFalse", "evaulateFunction", "assertTrue", "evaulateFunction", "assertTrue", "evaulateFunction", "clear", "add", "add", "assertFalse", "evaulateFunction", "assertTrue", "evaulateFunction", "assertFalse", "evaulateFunction", "assertTrue", "evaulateFunction", "clear", "add", "add", "assertTrue", "evaulateFunction", "assertTrue", "evaulateFunction", "assertFalse", "evaulateFunction", "assertFalse", "evaulateFunction"]}, "focal_class": {"identifier": "MyAttributeValueFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseValue", "parameters": "(URI dataType, Object attributeValue, /*Nullable*/ EnumAllowedValues av)", "modifiers": "public static", "return": "MyAttributeValue", "signature": "MyAttributeValue parseValue(URI dataType, Object attributeValue, /*Nullable*/ EnumAllowedValues av)", "full_signature": "public static MyAttributeValue parseValue(URI dataType, Object attributeValue, /*Nullable*/ EnumAllowedValues av)", "class_method_signature": "MyAttributeValueFactory.parseValue(URI dataType, Object attributeValue, /*Nullable*/ EnumAllowedValues av)", "testcase": false, "constructor": false}, {"identifier": "operationTypeOfFunction", "parameters": "(URI functionAsUri)", "modifiers": "public static", "return": "OperationType", "signature": "OperationType operationTypeOfFunction(URI functionAsUri)", "full_signature": "public static OperationType operationTypeOfFunction(URI functionAsUri)", "class_method_signature": "MyAttributeValueFactory.operationTypeOfFunction(URI functionAsUri)", "testcase": false, "constructor": false}, {"identifier": "returnTypeOfFunction", "parameters": "(URI functionAsUri)", "modifiers": "public static", "return": "String", "signature": "String returnTypeOfFunction(URI functionAsUri)", "full_signature": "public static String returnTypeOfFunction(URI functionAsUri)", "class_method_signature": "MyAttributeValueFactory.returnTypeOfFunction(URI functionAsUri)", "testcase": false, "constructor": false}, {"identifier": "parseValueFromFunction", "parameters": "(URI function, Object param)", "modifiers": "public static", "return": "MyAttributeValue", "signature": "MyAttributeValue parseValueFromFunction(URI function, Object param)", "full_signature": "public static MyAttributeValue parseValueFromFunction(URI function, Object param)", "class_method_signature": "MyAttributeValueFactory.parseValueFromFunction(URI function, Object param)", "testcase": false, "constructor": false}, {"identifier": "evaulateFunction", "parameters": "(URI function, List<MyAttributeValue> arguments)", "modifiers": "public static", "return": "boolean", "signature": "boolean evaulateFunction(URI function, List<MyAttributeValue> arguments)", "full_signature": "public static boolean evaulateFunction(URI function, List<MyAttributeValue> arguments)", "class_method_signature": "MyAttributeValueFactory.evaulateFunction(URI function, List<MyAttributeValue> arguments)", "testcase": false, "constructor": false}, {"identifier": "checkTypes", "parameters": "(List<MyAttributeValue> arguments, String returnType)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkTypes(List<MyAttributeValue> arguments, String returnType)", "full_signature": "private static boolean checkTypes(List<MyAttributeValue> arguments, String returnType)", "class_method_signature": "MyAttributeValueFactory.checkTypes(List<MyAttributeValue> arguments, String returnType)", "testcase": false, "constructor": false}, {"identifier": "getClassOfType", "parameters": "(String type)", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> getClassOfType(String type)", "full_signature": "private static Class<?> getClassOfType(String type)", "class_method_signature": "MyAttributeValueFactory.getClassOfType(String type)", "testcase": false, "constructor": false}, {"identifier": "isArgumentNumberCorrect", "parameters": "(OperationType op, int size)", "modifiers": "private static", "return": "boolean", "signature": "boolean isArgumentNumberCorrect(OperationType op, int size)", "full_signature": "private static boolean isArgumentNumberCorrect(OperationType op, int size)", "class_method_signature": "MyAttributeValueFactory.isArgumentNumberCorrect(OperationType op, int size)", "testcase": false, "constructor": false}], "file": "Code/core-abce/abce-components/src/main/java-ibm-only/eu/abc4trust/util/attributeTypes/MyAttributeValueFactory.java"}, "focal_method": {"identifier": "evaulateFunction", "parameters": "(URI function, List<MyAttributeValue> arguments)", "modifiers": "public static", "return": "boolean", "body": "public static boolean evaulateFunction(URI function, List<MyAttributeValue> arguments) {\n    String returnType = returnTypeOfFunction(function);\n    if(!checkTypes(arguments, returnType)) {\n      throw new RuntimeException(\"Incorrect type of arguments, when evaluating function: '\"\n        + function + \"'\");\n    }\n    OperationType op = operationTypeOfFunction(function);\n    if (!isArgumentNumberCorrect(op, arguments.size())) {\n      throw new RuntimeException(\"Incorrect number of arguments when evaluating function: '\"\n          + function + \"'\");\n    }\n    switch (op) {\n      case EQUAL:\n        return arguments.get(0).isCompatibleAndEquals(arguments.get(1));\n      case NOTEQUAL:\n        return arguments.get(0).isCompatibleAndNotEquals(arguments.get(1));\n      case EQUALONEOF: {\n        MyAttributeValue first = arguments.get(0);\n        for (int i = 1; i < arguments.size(); ++i) {\n          if (first.isCompatibleAndEquals(arguments.get(i))) {\n            return true;\n          }\n        }\n        return false;\n      }\n      case LESS:\n        return arguments.get(0).isCompatibleAndLess(arguments.get(1));\n      case LESSEQ:\n        return arguments.get(0).isCompatibleAndLessOrEqual(arguments.get(1));\n      case GREATER:\n        return arguments.get(1).isCompatibleAndLess(arguments.get(0));\n      case GREATEREQ:\n        return arguments.get(1).isCompatibleAndLessOrEqual(arguments.get(0));\n      default:\n        throw new RuntimeException(\"Problem with evaluating function: '\" + function + \"'\");\n    }\n  }", "signature": "boolean evaulateFunction(URI function, List<MyAttributeValue> arguments)", "full_signature": "public static boolean evaulateFunction(URI function, List<MyAttributeValue> arguments)", "class_method_signature": "MyAttributeValueFactory.evaulateFunction(URI function, List<MyAttributeValue> arguments)", "testcase": false, "constructor": false, "invocations": ["returnTypeOfFunction", "checkTypes", "operationTypeOfFunction", "isArgumentNumberCorrect", "size", "isCompatibleAndEquals", "get", "get", "isCompatibleAndNotEquals", "get", "get", "get", "size", "isCompatibleAndEquals", "get", "isCompatibleAndLess", "get", "get", "isCompatibleAndLessOrEqual", "get", "get", "isCompatibleAndLess", "get", "get", "isCompatibleAndLessOrEqual", "get", "get"]}, "repository": {"repo_id": 7687890, "url": "https://github.com/p2abcengine/p2abcengine", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 71, "size": 11790, "license": "licensed"}}