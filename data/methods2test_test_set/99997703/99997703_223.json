{"test_class": {"identifier": "NonNegativeIntegerSplitterByWeightsTest", "superclass": "", "interfaces": "", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/utils/NonNegativeIntegerSplitterByWeightsTest.java"}, "test_case": {"identifier": "testWithNoWeights", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testWithNoWeights() {\n        NonNegativeIntegerSplitterByWeights<String> splitter = new NonNegativeIntegerSplitterByWeights<>(ImmutableMap.of());\n        Assertions.assertTrue(splitter.split(1).isEmpty());\n        Assertions.assertTrue(splitter.split(100).isEmpty());\n    }", "signature": "void testWithNoWeights()", "full_signature": "@Test void testWithNoWeights()", "class_method_signature": "NonNegativeIntegerSplitterByWeightsTest.testWithNoWeights()", "testcase": true, "constructor": false, "invocations": ["of", "assertTrue", "isEmpty", "split", "assertTrue", "isEmpty", "split"]}, "focal_class": {"identifier": "NonNegativeIntegerSplitterByWeights", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Comparator<Entry<E, Double>> valueComparator = Entry.comparingByValue();", "modifier": "private final", "type": "Comparator<Entry<E, Double>>", "declarator": "valueComparator = Entry.comparingByValue()", "var_name": "valueComparator"}, {"original_string": "private ImmutableMap<E, Double> proportions;", "modifier": "private", "type": "ImmutableMap<E, Double>", "declarator": "proportions", "var_name": "proportions"}], "methods": [{"identifier": "NonNegativeIntegerSplitterByWeights", "parameters": "(ImmutableMap<E, Double> weights)", "modifiers": "public", "return": "", "signature": " NonNegativeIntegerSplitterByWeights(ImmutableMap<E, Double> weights)", "full_signature": "public  NonNegativeIntegerSplitterByWeights(ImmutableMap<E, Double> weights)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.NonNegativeIntegerSplitterByWeights(ImmutableMap<E, Double> weights)", "testcase": false, "constructor": true}, {"identifier": "createWithSorting", "parameters": "(\n            ImmutableMap<E, Double> weights)", "modifiers": "public static", "return": "NonNegativeIntegerSplitterByWeights<E>", "signature": "NonNegativeIntegerSplitterByWeights<E> createWithSorting(\n            ImmutableMap<E, Double> weights)", "full_signature": "public static NonNegativeIntegerSplitterByWeights<E> createWithSorting(\n            ImmutableMap<E, Double> weights)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.createWithSorting(\n            ImmutableMap<E, Double> weights)", "testcase": false, "constructor": false}, {"identifier": "createFromInts", "parameters": "(ImmutableMap<E, Integer> weights)", "modifiers": "public static", "return": "NonNegativeIntegerSplitterByWeights<E>", "signature": "NonNegativeIntegerSplitterByWeights<E> createFromInts(ImmutableMap<E, Integer> weights)", "full_signature": "public static NonNegativeIntegerSplitterByWeights<E> createFromInts(ImmutableMap<E, Integer> weights)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.createFromInts(ImmutableMap<E, Integer> weights)", "testcase": false, "constructor": false}, {"identifier": "createFromIntsWithSorting", "parameters": "(\n            ImmutableMap<E, Integer> weights)", "modifiers": "public static", "return": "NonNegativeIntegerSplitterByWeights<E>", "signature": "NonNegativeIntegerSplitterByWeights<E> createFromIntsWithSorting(\n            ImmutableMap<E, Integer> weights)", "full_signature": "public static NonNegativeIntegerSplitterByWeights<E> createFromIntsWithSorting(\n            ImmutableMap<E, Integer> weights)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.createFromIntsWithSorting(\n            ImmutableMap<E, Integer> weights)", "testcase": false, "constructor": false}, {"identifier": "splitByTableWeights", "parameters": "(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit)", "modifiers": "public static", "return": "ImmutableTable<R, C, Integer>", "signature": "ImmutableTable<R, C, Integer> splitByTableWeights(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit)", "full_signature": "public static ImmutableTable<R, C, Integer> splitByTableWeights(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.splitByTableWeights(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit)", "testcase": false, "constructor": false}, {"identifier": "splitByIntegerTableWeights", "parameters": "(\n            ImmutableTable<R, C, Integer> weights,\n            int numberToSplit)", "modifiers": "public static", "return": "ImmutableTable<R, C, Integer>", "signature": "ImmutableTable<R, C, Integer> splitByIntegerTableWeights(\n            ImmutableTable<R, C, Integer> weights,\n            int numberToSplit)", "full_signature": "public static ImmutableTable<R, C, Integer> splitByIntegerTableWeights(\n            ImmutableTable<R, C, Integer> weights,\n            int numberToSplit)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.splitByIntegerTableWeights(\n            ImmutableTable<R, C, Integer> weights,\n            int numberToSplit)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(int numberToSplit)", "modifiers": "public", "return": "ImmutableMap<E, Integer>", "signature": "ImmutableMap<E, Integer> split(int numberToSplit)", "full_signature": "public ImmutableMap<E, Integer> split(int numberToSplit)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.split(int numberToSplit)", "testcase": false, "constructor": false}, {"identifier": "assignRemainder", "parameters": "(\n            int totalToBeAssigned,\n            ImmutableMap<E, Double> idealAmounts,\n            ImmutableMap<E, Integer> roundedDownAmounts)", "modifiers": "private", "return": "ImmutableMap<E, Integer>", "signature": "ImmutableMap<E, Integer> assignRemainder(\n            int totalToBeAssigned,\n            ImmutableMap<E, Double> idealAmounts,\n            ImmutableMap<E, Integer> roundedDownAmounts)", "full_signature": "private ImmutableMap<E, Integer> assignRemainder(\n            int totalToBeAssigned,\n            ImmutableMap<E, Double> idealAmounts,\n            ImmutableMap<E, Integer> roundedDownAmounts)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.assignRemainder(\n            int totalToBeAssigned,\n            ImmutableMap<E, Double> idealAmounts,\n            ImmutableMap<E, Integer> roundedDownAmounts)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/utils/NonNegativeIntegerSplitterByWeights.java"}, "focal_method": {"identifier": "split", "parameters": "(int numberToSplit)", "modifiers": "public", "return": "ImmutableMap<E, Integer>", "body": "public ImmutableMap<E, Integer> split(int numberToSplit) {\n        Preconditions.checkArgument(numberToSplit >= 0, \"Quantity to split must be non negative\");\n\n        if (proportions.isEmpty()) {\n            return ImmutableMap.of();\n        }\n\n        ImmutableMap<E, Double> idealAmounts = ImmutableMapFactory.createWithNewValues(\n                proportions,\n                p -> p * numberToSplit);\n\n        ImmutableMap<E, Integer> roundedDownAmounts = ImmutableMapFactory.createWithNewValues(\n                idealAmounts,\n                idealAmount -> (int) Math.floor(idealAmount));\n\n        return assignRemainder(numberToSplit, idealAmounts, roundedDownAmounts);\n    }", "signature": "ImmutableMap<E, Integer> split(int numberToSplit)", "full_signature": "public ImmutableMap<E, Integer> split(int numberToSplit)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.split(int numberToSplit)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "isEmpty", "of", "createWithNewValues", "createWithNewValues", "floor", "assignRemainder"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}