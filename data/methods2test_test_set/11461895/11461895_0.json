{"test_class": {"identifier": "AddressTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/ru/valle/btc/AddressTest.java"}, "test_case": {"identifier": "ripemd160HashToAddress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ripemd160HashToAddress() {\n        assertEquals(\"1PMycacnJaSqwwJqjawXBErnLsZ7RkXUAs\", Address.ripemd160HashToAddress(false,\n                BTCUtils.fromValidHex(\"f54a5851e9372b87810a8e60cdd2e7cfd80b6e31\")));\n        assertEquals(\"1111111111111111111114oLvT2\", Address.ripemd160HashToAddress(false,\n                new byte[20]));\n        assertEquals(\"111111111111111111117K4nzc\", Address.ripemd160HashToAddress(false,\n                new byte[19]));\n        assertEquals(\"1Wh4bh\", Address.ripemd160HashToAddress(false,\n                new byte[0]));\n    }", "signature": "void ripemd160HashToAddress()", "full_signature": "@Test public void ripemd160HashToAddress()", "class_method_signature": "AddressTest.ripemd160HashToAddress()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "ripemd160HashToAddress", "fromValidHex", "assertEquals", "ripemd160HashToAddress", "assertEquals", "ripemd160HashToAddress", "assertEquals", "ripemd160HashToAddress"]}, "focal_class": {"identifier": "Address", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int TYPE_MAINNET = 0;", "modifier": "static final", "type": "int", "declarator": "TYPE_MAINNET = 0", "var_name": "TYPE_MAINNET"}, {"original_string": "static final int TYPE_TESTNET = 111;", "modifier": "static final", "type": "int", "declarator": "TYPE_TESTNET = 111", "var_name": "TYPE_TESTNET"}, {"original_string": "static final int TYPE_P2SH = 5;", "modifier": "static final", "type": "int", "declarator": "TYPE_P2SH = 5", "var_name": "TYPE_P2SH"}, {"original_string": "static final int TYPE_P2SH_TESTNET = 196;", "modifier": "static final", "type": "int", "declarator": "TYPE_P2SH_TESTNET = 196", "var_name": "TYPE_P2SH_TESTNET"}, {"original_string": "static final int TYPE_NONE = -1;", "modifier": "static final", "type": "int", "declarator": "TYPE_NONE = -1", "var_name": "TYPE_NONE"}, {"original_string": "static final int PUBLIC_KEY_TO_ADDRESS_LEGACY = 1;", "modifier": "static final", "type": "int", "declarator": "PUBLIC_KEY_TO_ADDRESS_LEGACY = 1", "var_name": "PUBLIC_KEY_TO_ADDRESS_LEGACY"}, {"original_string": "static final int PUBLIC_KEY_TO_ADDRESS_P2WKH = 2;", "modifier": "static final", "type": "int", "declarator": "PUBLIC_KEY_TO_ADDRESS_P2WKH = 2", "var_name": "PUBLIC_KEY_TO_ADDRESS_P2WKH"}, {"original_string": "static final int PUBLIC_KEY_TO_ADDRESS_P2SH_P2WKH = 4;", "modifier": "static final", "type": "int", "declarator": "PUBLIC_KEY_TO_ADDRESS_P2SH_P2WKH = 4", "var_name": "PUBLIC_KEY_TO_ADDRESS_P2SH_P2WKH"}, {"original_string": "final Transaction.Script.WitnessProgram witnessProgram;", "modifier": "final", "type": "Transaction.Script.WitnessProgram", "declarator": "witnessProgram", "var_name": "witnessProgram"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    @KeyhashType\n    public final int keyhashType;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    @KeyhashType\n    public final", "type": "int", "declarator": "keyhashType", "var_name": "keyhashType"}, {"original_string": "final byte[] hash160;", "modifier": "final", "type": "byte[]", "declarator": "hash160", "var_name": "hash160"}, {"original_string": "@NonNull\n    final String addressString;", "modifier": "@NonNull\n    final", "type": "String", "declarator": "addressString", "var_name": "addressString"}], "methods": [{"identifier": "Address", "parameters": "(@Nullable String address)", "modifiers": "", "return": "", "signature": " Address(@Nullable String address)", "full_signature": "  Address(@Nullable String address)", "class_method_signature": "Address.Address(@Nullable String address)", "testcase": false, "constructor": true}, {"identifier": "Address", "parameters": "(boolean testNet, Transaction.Script.WitnessProgram witnessProgram)", "modifiers": "", "return": "", "signature": " Address(boolean testNet, Transaction.Script.WitnessProgram witnessProgram)", "full_signature": "  Address(boolean testNet, Transaction.Script.WitnessProgram witnessProgram)", "class_method_signature": "Address.Address(boolean testNet, Transaction.Script.WitnessProgram witnessProgram)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "signature": "String toString()", "full_signature": "@NonNull @Override public String toString()", "class_method_signature": "Address.toString()", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String address)", "modifiers": "static", "return": "Address", "signature": "Address decode(String address)", "full_signature": "static Address decode(String address)", "class_method_signature": "Address.decode(String address)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(@Nullable String address, boolean acceptSegwit)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(@Nullable String address, boolean acceptSegwit)", "full_signature": "public static boolean verify(@Nullable String address, boolean acceptSegwit)", "class_method_signature": "Address.verify(@Nullable String address, boolean acceptSegwit)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(@Nullable String address)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(@Nullable String address)", "full_signature": "public static boolean verify(@Nullable String address)", "class_method_signature": "Address.verify(@Nullable String address)", "testcase": false, "constructor": false}, {"identifier": "publicKeyToAddress", "parameters": "(byte[] publicKey)", "modifiers": "static", "return": "String", "signature": "String publicKeyToAddress(byte[] publicKey)", "full_signature": "static String publicKeyToAddress(byte[] publicKey)", "class_method_signature": "Address.publicKeyToAddress(byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "publicKeyToAddress", "parameters": "(boolean testNet, byte[] publicKey)", "modifiers": "static", "return": "String", "signature": "String publicKeyToAddress(boolean testNet, byte[] publicKey)", "full_signature": "static String publicKeyToAddress(boolean testNet, byte[] publicKey)", "class_method_signature": "Address.publicKeyToAddress(boolean testNet, byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "publicKeyToP2wkhAddress", "parameters": "(boolean testNet, byte[] publicKey)", "modifiers": "static", "return": "String", "signature": "String publicKeyToP2wkhAddress(boolean testNet, byte[] publicKey)", "full_signature": "static String publicKeyToP2wkhAddress(boolean testNet, byte[] publicKey)", "class_method_signature": "Address.publicKeyToP2wkhAddress(boolean testNet, byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "publicKeyToP2shP2wkhAddress", "parameters": "(boolean testNet, byte[] publicKey)", "modifiers": "static", "return": "String", "signature": "String publicKeyToP2shP2wkhAddress(boolean testNet, byte[] publicKey)", "full_signature": "static String publicKeyToP2shP2wkhAddress(boolean testNet, byte[] publicKey)", "class_method_signature": "Address.publicKeyToP2shP2wkhAddress(boolean testNet, byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "ripemd160HashToAddress", "parameters": "(boolean testNet, byte[] hashedPublicKey)", "modifiers": "static", "return": "String", "signature": "String ripemd160HashToAddress(boolean testNet, byte[] hashedPublicKey)", "full_signature": "static String ripemd160HashToAddress(boolean testNet, byte[] hashedPublicKey)", "class_method_signature": "Address.ripemd160HashToAddress(boolean testNet, byte[] hashedPublicKey)", "testcase": false, "constructor": false}, {"identifier": "ripemd160HashToP2shAddress", "parameters": "(boolean testNet, byte[] hashedPublicKey)", "modifiers": "static", "return": "String", "signature": "String ripemd160HashToP2shAddress(boolean testNet, byte[] hashedPublicKey)", "full_signature": "static String ripemd160HashToP2shAddress(boolean testNet, byte[] hashedPublicKey)", "class_method_signature": "Address.ripemd160HashToP2shAddress(boolean testNet, byte[] hashedPublicKey)", "testcase": false, "constructor": false}, {"identifier": "ripemd160HashToAddress", "parameters": "(byte version, byte[] hashedPublicKey)", "modifiers": "private static", "return": "String", "signature": "String ripemd160HashToAddress(byte version, byte[] hashedPublicKey)", "full_signature": "private static String ripemd160HashToAddress(byte version, byte[] hashedPublicKey)", "class_method_signature": "Address.ripemd160HashToAddress(byte version, byte[] hashedPublicKey)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Address.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Address.hashCode()", "testcase": false, "constructor": false}], "file": "app/src/main/java/ru/valle/btc/Address.java"}, "focal_method": {"identifier": "ripemd160HashToAddress", "parameters": "(boolean testNet, byte[] hashedPublicKey)", "modifiers": "static", "return": "String", "body": "static String ripemd160HashToAddress(boolean testNet, byte[] hashedPublicKey) {\n        byte version = (byte) (testNet ? TYPE_TESTNET : TYPE_MAINNET);\n        return ripemd160HashToAddress(version, hashedPublicKey);\n    }", "signature": "String ripemd160HashToAddress(boolean testNet, byte[] hashedPublicKey)", "full_signature": "static String ripemd160HashToAddress(boolean testNet, byte[] hashedPublicKey)", "class_method_signature": "Address.ripemd160HashToAddress(boolean testNet, byte[] hashedPublicKey)", "testcase": false, "constructor": false, "invocations": ["ripemd160HashToAddress"]}, "repository": {"repo_id": 11461895, "url": "https://github.com/ValleZ/Paper-Wallet", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 49, "size": 10504, "license": "licensed"}}