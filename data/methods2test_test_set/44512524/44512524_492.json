{"test_class": {"identifier": "TestConcurrentStreamSummary", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int NUM_ITERATIONS = 100000;", "modifier": "private static final", "type": "int", "declarator": "NUM_ITERATIONS = 100000", "var_name": "NUM_ITERATIONS"}], "file": "ml/streaminer/src/test/java/org/streaminer/stream/frequency/topk/TestConcurrentStreamSummary.java"}, "test_case": {"identifier": "testStreamSummary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStreamSummary() {\n        ConcurrentStreamSummary<String> vs = new ConcurrentStreamSummary<String>(3);\n        String[] stream = {\"X\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"X\", \"X\", \"A\", \"A\", \"A\"};\n        for (String i : stream)\n        {\n                vs.add(i);\n                /*\n        for(String s : vs.poll(3))\n        System.out.print(s+\" \");\n                 */\n                System.out.println(vs);\n        }\n    }", "signature": "void testStreamSummary()", "full_signature": "@Test public void testStreamSummary()", "class_method_signature": "TestConcurrentStreamSummary.testStreamSummary()", "testcase": true, "constructor": false, "invocations": ["add", "println"]}, "focal_class": {"identifier": "ConcurrentStreamSummary", "superclass": "", "interfaces": "implements ITopK<T>", "fields": [{"original_string": "private final int capacity;", "modifier": "private final", "type": "int", "declarator": "capacity", "var_name": "capacity"}, {"original_string": "private final ConcurrentHashMap<T, ScoredItem> itemMap;", "modifier": "private final", "type": "ConcurrentHashMap<T, ScoredItem>", "declarator": "itemMap", "var_name": "itemMap"}, {"original_string": "private final AtomicReference<ScoredItem> minVal;", "modifier": "private final", "type": "AtomicReference<ScoredItem>", "declarator": "minVal", "var_name": "minVal"}, {"original_string": "private final AtomicLong size;", "modifier": "private final", "type": "AtomicLong", "declarator": "size", "var_name": "size"}, {"original_string": "private final AtomicBoolean reachCapacity;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "reachCapacity", "var_name": "reachCapacity"}], "methods": [{"identifier": "ConcurrentStreamSummary", "parameters": "(final int capacity)", "modifiers": "public", "return": "", "signature": " ConcurrentStreamSummary(final int capacity)", "full_signature": "public  ConcurrentStreamSummary(final int capacity)", "class_method_signature": "ConcurrentStreamSummary.ConcurrentStreamSummary(final int capacity)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(final T element)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(final T element)", "full_signature": "@Override public boolean add(final T element)", "class_method_signature": "ConcurrentStreamSummary.add(final T element)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final T element, final long incrementCount)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(final T element, final long incrementCount)", "full_signature": "@Override public boolean add(final T element, final long incrementCount)", "class_method_signature": "ConcurrentStreamSummary.add(final T element, final long incrementCount)", "testcase": false, "constructor": false}, {"identifier": "getMinValue", "parameters": "()", "modifiers": "private", "return": "ScoredItem", "signature": "ScoredItem getMinValue()", "full_signature": "private ScoredItem getMinValue()", "class_method_signature": "ConcurrentStreamSummary.getMinValue()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ConcurrentStreamSummary.toString()", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "(final int k)", "modifiers": "@Override public", "return": "List<CountEntry<T>>", "signature": "List<CountEntry<T>> peek(final int k)", "full_signature": "@Override public List<CountEntry<T>> peek(final int k)", "class_method_signature": "ConcurrentStreamSummary.peek(final int k)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long size()", "full_signature": "public long size()", "class_method_signature": "ConcurrentStreamSummary.size()", "testcase": false, "constructor": false}, {"identifier": "peekWithScores", "parameters": "(final int k)", "modifiers": "public", "return": "List<ScoredItem<T>>", "signature": "List<ScoredItem<T>> peekWithScores(final int k)", "full_signature": "public List<ScoredItem<T>> peekWithScores(final int k)", "class_method_signature": "ConcurrentStreamSummary.peekWithScores(final int k)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/frequency/topk/ConcurrentStreamSummary.java"}, "focal_method": {"identifier": "add", "parameters": "(final T element)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean add(final T element) {\n        return add(element, 1);\n    }", "signature": "boolean add(final T element)", "full_signature": "@Override public boolean add(final T element)", "class_method_signature": "ConcurrentStreamSummary.add(final T element)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}