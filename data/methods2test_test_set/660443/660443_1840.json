{"test_class": {"identifier": "RDFProtonDescriptor_GDRTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/RDFProtonDescriptor_GDRTest.java"}, "test_case": {"identifier": "testReturnsNaNForNonHydrogen", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReturnsNaNForNonHydrogen() throws Exception {\n        IAtomContainer mol = new AtomContainer();\n        IAtom atom = new Atom(\"O\");\n        mol.addAtom(atom);\n        DescriptorValue dv = descriptor.calculate(atom, mol);\n        IDescriptorResult result = dv.getValue();\n        Assert.assertNotNull(result);\n        Assert.assertTrue(result instanceof DoubleArrayResult);\n        DoubleArrayResult dResult = (DoubleArrayResult) result;\n        for (int i = 0; i < result.length(); i++) {\n            Assert.assertEquals(Double.NaN, dResult.get(i), 0.000001);\n        }\n    }", "signature": "void testReturnsNaNForNonHydrogen()", "full_signature": "@Test public void testReturnsNaNForNonHydrogen()", "class_method_signature": "RDFProtonDescriptor_GDRTest.testReturnsNaNForNonHydrogen()", "testcase": true, "constructor": false, "invocations": ["addAtom", "calculate", "getValue", "assertNotNull", "assertTrue", "length", "assertEquals", "get"]}, "focal_class": {"identifier": "RDFProtonDescriptor_GDR", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "implements IAtomicDescriptor", "fields": [{"original_string": "private boolean           checkAromaticity    = false;", "modifier": "private", "type": "boolean", "declarator": "checkAromaticity    = false", "var_name": "checkAromaticity"}, {"original_string": "private IAtomContainer    acold               = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "acold               = null", "var_name": "acold"}, {"original_string": "private IRingSet          varRingSet          = null;", "modifier": "private", "type": "IRingSet", "declarator": "varRingSet          = null", "var_name": "varRingSet"}, {"original_string": "private IAtomContainerSet varAtomContainerSet = null;", "modifier": "private", "type": "IAtomContainerSet", "declarator": "varAtomContainerSet = null", "var_name": "varAtomContainerSet"}, {"original_string": "private final static ILoggingTool LOGGER          = LoggingToolFactory\n            .createLoggingTool(RDFProtonDescriptor_GDR.class);", "modifier": "private final static", "type": "ILoggingTool", "declarator": "LOGGER          = LoggingToolFactory\n            .createLoggingTool(RDFProtonDescriptor_GDR.class)", "var_name": "LOGGER"}, {"original_string": "private final        int          gdr_desc_length = 7;", "modifier": "private final", "type": "int", "declarator": "gdr_desc_length = 7", "var_name": "gdr_desc_length"}, {"original_string": "private static String[] descriptorNames;", "modifier": "private static", "type": "String[]", "declarator": "descriptorNames", "var_name": "descriptorNames"}], "methods": [{"identifier": "RDFProtonDescriptor_GDR", "parameters": "()", "modifiers": "public", "return": "", "signature": " RDFProtonDescriptor_GDR()", "full_signature": "public  RDFProtonDescriptor_GDR()", "class_method_signature": "RDFProtonDescriptor_GDR.RDFProtonDescriptor_GDR()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "RDFProtonDescriptor_GDR.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "RDFProtonDescriptor_GDR.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "RDFProtonDescriptor_GDR.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "RDFProtonDescriptor_GDR.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "RDFProtonDescriptor_GDR.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer varAtomContainerSet)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer varAtomContainerSet)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer varAtomContainerSet)", "class_method_signature": "RDFProtonDescriptor_GDR.calculate(IAtom atom, IAtomContainer varAtomContainerSet)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer atomContainer, IRingSet precalculatedringset)", "modifiers": "public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer atomContainer, IRingSet precalculatedringset)", "full_signature": "public DescriptorValue calculate(IAtom atom, IAtomContainer atomContainer, IRingSet precalculatedringset)", "class_method_signature": "RDFProtonDescriptor_GDR.calculate(IAtom atom, IAtomContainer atomContainer, IRingSet precalculatedringset)", "testcase": false, "constructor": false}, {"identifier": "getIfBondIsNotRotatable", "parameters": "(IAtomContainer mol, IBond bond, IAtomContainer detected)", "modifiers": "private", "return": "boolean", "signature": "boolean getIfBondIsNotRotatable(IAtomContainer mol, IBond bond, IAtomContainer detected)", "full_signature": "private boolean getIfBondIsNotRotatable(IAtomContainer mol, IBond bond, IAtomContainer detected)", "class_method_signature": "RDFProtonDescriptor_GDR.getIfBondIsNotRotatable(IAtomContainer mol, IBond bond, IAtomContainer detected)", "testcase": false, "constructor": false}, {"identifier": "getIfACarbonIsDoubleBondedToAnOxygen", "parameters": "(IAtomContainer mol, IAtom carbonAtom)", "modifiers": "private", "return": "boolean", "signature": "boolean getIfACarbonIsDoubleBondedToAnOxygen(IAtomContainer mol, IAtom carbonAtom)", "full_signature": "private boolean getIfACarbonIsDoubleBondedToAnOxygen(IAtomContainer mol, IAtom carbonAtom)", "class_method_signature": "RDFProtonDescriptor_GDR.getIfACarbonIsDoubleBondedToAnOxygen(IAtomContainer mol, IAtom carbonAtom)", "testcase": false, "constructor": false}, {"identifier": "calculateAngleBetweenTwoLines", "parameters": "(Vector3d a, Vector3d b, Vector3d c, Vector3d d)", "modifiers": "private", "return": "double", "signature": "double calculateAngleBetweenTwoLines(Vector3d a, Vector3d b, Vector3d c, Vector3d d)", "full_signature": "private double calculateAngleBetweenTwoLines(Vector3d a, Vector3d b, Vector3d c, Vector3d d)", "class_method_signature": "RDFProtonDescriptor_GDR.calculateAngleBetweenTwoLines(Vector3d a, Vector3d b, Vector3d c, Vector3d d)", "testcase": false, "constructor": false}, {"identifier": "checkAndStore", "parameters": "(int bondToStore, IBond.Order bondOrder, ArrayList<Integer> singleVec,\n            ArrayList<Integer> doubleVec, ArrayList<Integer> cycloexVec, int a1, ArrayList<Integer> atomVec,\n            int sphere, boolean isBondInCycloex)", "modifiers": "private", "return": "void", "signature": "void checkAndStore(int bondToStore, IBond.Order bondOrder, ArrayList<Integer> singleVec,\n            ArrayList<Integer> doubleVec, ArrayList<Integer> cycloexVec, int a1, ArrayList<Integer> atomVec,\n            int sphere, boolean isBondInCycloex)", "full_signature": "private void checkAndStore(int bondToStore, IBond.Order bondOrder, ArrayList<Integer> singleVec,\n            ArrayList<Integer> doubleVec, ArrayList<Integer> cycloexVec, int a1, ArrayList<Integer> atomVec,\n            int sphere, boolean isBondInCycloex)", "class_method_signature": "RDFProtonDescriptor_GDR.checkAndStore(int bondToStore, IBond.Order bondOrder, ArrayList<Integer> singleVec,\n            ArrayList<Integer> doubleVec, ArrayList<Integer> cycloexVec, int a1, ArrayList<Integer> atomVec,\n            int sphere, boolean isBondInCycloex)", "testcase": false, "constructor": false}, {"identifier": "calculateDistanceBetweenTwoAtoms", "parameters": "(IAtom atom1, IAtom atom2)", "modifiers": "private", "return": "double", "signature": "double calculateDistanceBetweenTwoAtoms(IAtom atom1, IAtom atom2)", "full_signature": "private double calculateDistanceBetweenTwoAtoms(IAtom atom1, IAtom atom2)", "class_method_signature": "RDFProtonDescriptor_GDR.calculateDistanceBetweenTwoAtoms(IAtom atom1, IAtom atom2)", "testcase": false, "constructor": false}, {"identifier": "getNearestBondtoAGivenAtom", "parameters": "(IAtomContainer mol, IAtom atom, IBond bond)", "modifiers": "private", "return": "int", "signature": "int getNearestBondtoAGivenAtom(IAtomContainer mol, IAtom atom, IBond bond)", "full_signature": "private int getNearestBondtoAGivenAtom(IAtomContainer mol, IAtom atom, IBond bond)", "class_method_signature": "RDFProtonDescriptor_GDR.getNearestBondtoAGivenAtom(IAtomContainer mol, IAtom atom, IBond bond)", "testcase": false, "constructor": false}, {"identifier": "calculateDistanceBetweenAtomAndBond", "parameters": "(IAtom proton, IBond theBond)", "modifiers": "private", "return": "double[]", "signature": "double[] calculateDistanceBetweenAtomAndBond(IAtom proton, IBond theBond)", "full_signature": "private double[] calculateDistanceBetweenAtomAndBond(IAtom proton, IBond theBond)", "class_method_signature": "RDFProtonDescriptor_GDR.calculateDistanceBetweenAtomAndBond(IAtom proton, IBond theBond)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "RDFProtonDescriptor_GDR.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "RDFProtonDescriptor_GDR.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/RDFProtonDescriptor_GDR.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer varAtomContainerSet)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer varAtomContainerSet) {\n        return (calculate(atom, varAtomContainerSet, null));\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer varAtomContainerSet)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer varAtomContainerSet)", "class_method_signature": "RDFProtonDescriptor_GDR.calculate(IAtom atom, IAtomContainer varAtomContainerSet)", "testcase": false, "constructor": false, "invocations": ["calculate"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}