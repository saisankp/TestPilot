{"test_class": {"identifier": "PartitionTableTest", "superclass": "", "interfaces": "", "fields": [], "file": "baymax-core/src/test/java/com/tongbanjie/baymax/router/strategy/PartitionTableTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n     public void testExecute() throws Exception {\n        PartitionTable table = new TableBuilder().appenTable(\"trade_order\", \"trade_order_{0}\", \"value % 4\")\n                                                 .appendNodeMapping(\"p0:0,1,2,3\")\n                                                 .appendColumn(\"user_id\", null).toTable();\n\n        CalculateUnit unit = new CalculateUnit();\n        unit.addCondition(ConditionUnit.buildConditionUnit(\"trade_order\", \"user_id\", new String[]{\"4\"}, ConditionUnitOperator.EQUAL));\n\n        List<TargetTableEntity> target = table.execute(unit);\n        System.out.println(target);\n        Assert.assertEquals(\"p0\", target.get(0).getTargetDB());\n        Assert.assertEquals(\"trade_order_0\", target.get(0).getTargetTable());\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "PartitionTableTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["toTable", "appendColumn", "appendNodeMapping", "appenTable", "addCondition", "buildConditionUnit", "execute", "println", "assertEquals", "getTargetDB", "get", "assertEquals", "getTargetTable", "get"]}, "focal_class": {"identifier": "PartitionTable", "superclass": "extends PartitionTableMetaData", "interfaces": "", "fields": [], "methods": [{"identifier": "execute", "parameters": "(CalculateUnit calculateUnit)", "modifiers": "public", "return": "List<TargetTableEntity>", "signature": "List<TargetTableEntity> execute(CalculateUnit calculateUnit)", "full_signature": "public List<TargetTableEntity> execute(CalculateUnit calculateUnit)", "class_method_signature": "PartitionTable.execute(CalculateUnit calculateUnit)", "testcase": false, "constructor": false}, {"identifier": "executeRule", "parameters": "(List<TargetTableEntity> targetList, PartitionFunction function, PartitionColumn column, Object value, Set<ConditionUnit> conditionUnits)", "modifiers": "protected", "return": "void", "signature": "void executeRule(List<TargetTableEntity> targetList, PartitionFunction function, PartitionColumn column, Object value, Set<ConditionUnit> conditionUnits)", "full_signature": "protected void executeRule(List<TargetTableEntity> targetList, PartitionFunction function, PartitionColumn column, Object value, Set<ConditionUnit> conditionUnits)", "class_method_signature": "PartitionTable.executeRule(List<TargetTableEntity> targetList, PartitionFunction function, PartitionColumn column, Object value, Set<ConditionUnit> conditionUnits)", "testcase": false, "constructor": false}, {"identifier": "executeRule", "parameters": "(PartitionFunction function, PartitionColumn column, Object value, Set<ConditionUnit> conditionUnits)", "modifiers": "protected", "return": "TargetTableEntity", "signature": "TargetTableEntity executeRule(PartitionFunction function, PartitionColumn column, Object value, Set<ConditionUnit> conditionUnits)", "full_signature": "protected TargetTableEntity executeRule(PartitionFunction function, PartitionColumn column, Object value, Set<ConditionUnit> conditionUnits)", "class_method_signature": "PartitionTable.executeRule(PartitionFunction function, PartitionColumn column, Object value, Set<ConditionUnit> conditionUnits)", "testcase": false, "constructor": false}, {"identifier": "getAllTableNames", "parameters": "()", "modifiers": "public", "return": "List<TargetTableEntity>", "signature": "List<TargetTableEntity> getAllTableNames()", "full_signature": "public List<TargetTableEntity> getAllTableNames()", "class_method_signature": "PartitionTable.getAllTableNames()", "testcase": false, "constructor": false}, {"identifier": "findColumnFromConditions", "parameters": "(Set<ConditionUnit/*column value*/> conditionUnits, String columnName)", "modifiers": "protected", "return": "ConditionUnit", "signature": "ConditionUnit findColumnFromConditions(Set<ConditionUnit/*column value*/> conditionUnits, String columnName)", "full_signature": "protected ConditionUnit findColumnFromConditions(Set<ConditionUnit/*column value*/> conditionUnits, String columnName)", "class_method_signature": "PartitionTable.findColumnFromConditions(Set<ConditionUnit/*column value*/> conditionUnits, String columnName)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PartitionTable.toString()", "testcase": false, "constructor": false}], "file": "baymax-core/src/main/java/com/tongbanjie/baymax/router/strategy/PartitionTable.java"}, "focal_method": {"identifier": "execute", "parameters": "(CalculateUnit calculateUnit)", "modifiers": "public", "return": "List<TargetTableEntity>", "body": "public List<TargetTableEntity> execute(CalculateUnit calculateUnit) {\n        // and \u76f8\u8fde\u7684\u6761\u4ef6\n        Set<ConditionUnit/*column value*/> conditionUnits = calculateUnit.getTablesAndConditions().get(getLogicTableName());\n\n        if (conditionUnits == null || conditionUnits.size() == 0){\n            return null;\n        }\n\n        // \u68c0\u67e5conditon\n\n        List<TargetTableEntity> targetList = new ArrayList<TargetTableEntity>(1);\n\n        for (PartitionColumn column : columns){\n            ConditionUnit matchingConditon = findColumnFromConditions(conditionUnits, column.getName());\n            // \u5bfb\u627e\u5230\u4e86\u5206\u533a\u5217\n            if (matchingConditon != null){\n                if (matchingConditon.getOperator() == ConditionUnitOperator.EQUAL){\n                    // values\n                    executeRule(targetList, rule.getFunction(), column, matchingConditon.getValues().get(0), conditionUnits);\n                }else if (matchingConditon.getOperator() == ConditionUnitOperator.IN){\n                    for (Object obj : matchingConditon.getValues()){\n                        executeRule(targetList, rule.getFunction(), column, obj, conditionUnits);\n                    }\n                }\n            }\n            // \u4ee5\u7b2c\u4e00\u4e2a\u6709\u7ed3\u679c\u7684PartitionColumn\u4e3a\u51c6,\u56e0\u4e3aBaymax3.0\u89c4\u5b9a\uff0c\u5bf9\u4e8e\u6709\u591a\u4e2a\u5206\u533a\u5217\u7684\uff0c\u8def\u7531\u7ed3\u679c\u5fc5\u987b\u76f8\u540c.\n            if (targetList.size() != 0){\n                break;\n            }\n        }\n        return targetList;\n    }", "signature": "List<TargetTableEntity> execute(CalculateUnit calculateUnit)", "full_signature": "public List<TargetTableEntity> execute(CalculateUnit calculateUnit)", "class_method_signature": "PartitionTable.execute(CalculateUnit calculateUnit)", "testcase": false, "constructor": false, "invocations": ["get", "getTablesAndConditions", "getLogicTableName", "size", "findColumnFromConditions", "getName", "getOperator", "executeRule", "getFunction", "get", "getValues", "getOperator", "getValues", "executeRule", "getFunction", "size"]}, "repository": {"repo_id": 59288941, "url": "https://github.com/tongbanjie/baymax", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 45, "size": 1578, "license": "licensed"}}