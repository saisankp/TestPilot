{"test_class": {"identifier": "CDKToBeamTest", "superclass": "", "interfaces": "", "fields": [], "file": "storage/smiles/src/test/java/org/openscience/cdk/smiles/CDKToBeamTest.java"}, "test_case": {"identifier": "chargedAtom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void chargedAtom() throws Exception {\n        IAtom a = new Atom(\"C\");\n        a.setImplicitHydrogenCount(0);\n        for (int chg = -10; chg < 10; chg++) {\n            a.setFormalCharge(chg);\n            assertThat(new CDKToBeam().toBeamAtom(a).charge(), is(chg));\n        }\n    }", "signature": "void chargedAtom()", "full_signature": "@Test public void chargedAtom()", "class_method_signature": "CDKToBeamTest.chargedAtom()", "testcase": true, "constructor": false, "invocations": ["setImplicitHydrogenCount", "setFormalCharge", "assertThat", "charge", "toBeamAtom", "is"]}, "focal_class": {"identifier": "CDKToBeam", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int flavour;", "modifier": "private final", "type": "int", "declarator": "flavour", "var_name": "flavour"}], "methods": [{"identifier": "CDKToBeam", "parameters": "()", "modifiers": "", "return": "", "signature": " CDKToBeam()", "full_signature": "  CDKToBeam()", "class_method_signature": "CDKToBeam.CDKToBeam()", "testcase": false, "constructor": true}, {"identifier": "CDKToBeam", "parameters": "(int flavour)", "modifiers": "", "return": "", "signature": " CDKToBeam(int flavour)", "full_signature": "  CDKToBeam(int flavour)", "class_method_signature": "CDKToBeam.CDKToBeam(int flavour)", "testcase": false, "constructor": true}, {"identifier": "toBeamGraph", "parameters": "(IAtomContainer ac)", "modifiers": "", "return": "Graph", "signature": "Graph toBeamGraph(IAtomContainer ac)", "full_signature": " Graph toBeamGraph(IAtomContainer ac)", "class_method_signature": "CDKToBeam.toBeamGraph(IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "toBeamAtom", "parameters": "(IAtom atom)", "modifiers": "", "return": "Atom", "signature": "Atom toBeamAtom(IAtom atom)", "full_signature": " Atom toBeamAtom(IAtom atom)", "class_method_signature": "CDKToBeam.toBeamAtom(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "toBeamEdge", "parameters": "(IBond b, Map<IAtom, Integer> indices)", "modifiers": "", "return": "Edge", "signature": "Edge toBeamEdge(IBond b, Map<IAtom, Integer> indices)", "full_signature": " Edge toBeamEdge(IBond b, Map<IAtom, Integer> indices)", "class_method_signature": "CDKToBeam.toBeamEdge(IBond b, Map<IAtom, Integer> indices)", "testcase": false, "constructor": false}, {"identifier": "toBeamGraph", "parameters": "(IAtomContainer ac, int flavour)", "modifiers": "static", "return": "Graph", "signature": "Graph toBeamGraph(IAtomContainer ac, int flavour)", "full_signature": "static Graph toBeamGraph(IAtomContainer ac, int flavour)", "class_method_signature": "CDKToBeam.toBeamGraph(IAtomContainer ac, int flavour)", "testcase": false, "constructor": false}, {"identifier": "getMajorMassNumber", "parameters": "(Element e)", "modifiers": "private static", "return": "Integer", "signature": "Integer getMajorMassNumber(Element e)", "full_signature": "private static Integer getMajorMassNumber(Element e)", "class_method_signature": "CDKToBeam.getMajorMassNumber(Element e)", "testcase": false, "constructor": false}, {"identifier": "toBeamAtom", "parameters": "(final IAtom a, final int flavour)", "modifiers": "static", "return": "Atom", "signature": "Atom toBeamAtom(final IAtom a, final int flavour)", "full_signature": "static Atom toBeamAtom(final IAtom a, final int flavour)", "class_method_signature": "CDKToBeam.toBeamAtom(final IAtom a, final int flavour)", "testcase": false, "constructor": false}, {"identifier": "toBeamEdge", "parameters": "(IBond b, int flavour, Map<IAtom, Integer> indices)", "modifiers": "static", "return": "Edge", "signature": "Edge toBeamEdge(IBond b, int flavour, Map<IAtom, Integer> indices)", "full_signature": "static Edge toBeamEdge(IBond b, int flavour, Map<IAtom, Integer> indices)", "class_method_signature": "CDKToBeam.toBeamEdge(IBond b, int flavour, Map<IAtom, Integer> indices)", "testcase": false, "constructor": false}, {"identifier": "toBeamEdgeLabel", "parameters": "(IBond b, int flavour)", "modifiers": "private static", "return": "Bond", "signature": "Bond toBeamEdgeLabel(IBond b, int flavour)", "full_signature": "private static Bond toBeamEdgeLabel(IBond b, int flavour)", "class_method_signature": "CDKToBeam.toBeamEdgeLabel(IBond b, int flavour)", "testcase": false, "constructor": false}, {"identifier": "addGeometricConfiguration", "parameters": "(IDoubleBondStereochemistry dbs, int flavour, GraphBuilder gb, Map<IAtom, Integer> indices)", "modifiers": "private static", "return": "void", "signature": "void addGeometricConfiguration(IDoubleBondStereochemistry dbs, int flavour, GraphBuilder gb, Map<IAtom, Integer> indices)", "full_signature": "private static void addGeometricConfiguration(IDoubleBondStereochemistry dbs, int flavour, GraphBuilder gb, Map<IAtom, Integer> indices)", "class_method_signature": "CDKToBeam.addGeometricConfiguration(IDoubleBondStereochemistry dbs, int flavour, GraphBuilder gb, Map<IAtom, Integer> indices)", "testcase": false, "constructor": false}, {"identifier": "addTetrahedralConfiguration", "parameters": "(ITetrahedralChirality tc, GraphBuilder gb, Map<IAtom, Integer> indices)", "modifiers": "private static", "return": "void", "signature": "void addTetrahedralConfiguration(ITetrahedralChirality tc, GraphBuilder gb, Map<IAtom, Integer> indices)", "full_signature": "private static void addTetrahedralConfiguration(ITetrahedralChirality tc, GraphBuilder gb, Map<IAtom, Integer> indices)", "class_method_signature": "CDKToBeam.addTetrahedralConfiguration(ITetrahedralChirality tc, GraphBuilder gb, Map<IAtom, Integer> indices)", "testcase": false, "constructor": false}, {"identifier": "addExtendedTetrahedralConfiguration", "parameters": "(ExtendedTetrahedral et, GraphBuilder gb,\n            Map<IAtom, Integer> indices)", "modifiers": "private static", "return": "void", "signature": "void addExtendedTetrahedralConfiguration(ExtendedTetrahedral et, GraphBuilder gb,\n            Map<IAtom, Integer> indices)", "full_signature": "private static void addExtendedTetrahedralConfiguration(ExtendedTetrahedral et, GraphBuilder gb,\n            Map<IAtom, Integer> indices)", "class_method_signature": "CDKToBeam.addExtendedTetrahedralConfiguration(ExtendedTetrahedral et, GraphBuilder gb,\n            Map<IAtom, Integer> indices)", "testcase": false, "constructor": false}, {"identifier": "addExtendedCisTransConfig", "parameters": "(ExtendedCisTrans ect, GraphBuilder gb,\n                                                  Map<IAtom, Integer> indices,\n                                                  IAtomContainer container)", "modifiers": "private static", "return": "void", "signature": "void addExtendedCisTransConfig(ExtendedCisTrans ect, GraphBuilder gb,\n                                                  Map<IAtom, Integer> indices,\n                                                  IAtomContainer container)", "full_signature": "private static void addExtendedCisTransConfig(ExtendedCisTrans ect, GraphBuilder gb,\n                                                  Map<IAtom, Integer> indices,\n                                                  IAtomContainer container)", "class_method_signature": "CDKToBeam.addExtendedCisTransConfig(ExtendedCisTrans ect, GraphBuilder gb,\n                                                  Map<IAtom, Integer> indices,\n                                                  IAtomContainer container)", "testcase": false, "constructor": false}], "file": "storage/smiles/src/main/java/org/openscience/cdk/smiles/CDKToBeam.java"}, "focal_method": {"identifier": "toBeamAtom", "parameters": "(IAtom atom)", "modifiers": "", "return": "Atom", "body": "Atom toBeamAtom(IAtom atom) throws CDKException {\n        return toBeamAtom(atom, flavour);\n    }", "signature": "Atom toBeamAtom(IAtom atom)", "full_signature": " Atom toBeamAtom(IAtom atom)", "class_method_signature": "CDKToBeam.toBeamAtom(IAtom atom)", "testcase": false, "constructor": false, "invocations": ["toBeamAtom"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}