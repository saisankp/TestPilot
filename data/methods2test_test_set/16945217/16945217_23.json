{"test_class": {"identifier": "FilterUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "tddl-optimizer/src/test/java/com/taobao/tddl/optimizer/utils/FilterUtilsTest.java"}, "test_case": {"identifier": "testCreateFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateFilter() {\n        String where = \"id > 1 and id <= 10\";\n        IFilter filter = FilterUtils.createFilter(where);\n        System.out.println(filter);\n\n        where = \"name = 'hello' and id in ('1','2')\";\n        filter = FilterUtils.createFilter(where);\n        System.out.println(filter);\n\n        where = \"gmt_create = '2013-11-11 11:11:11'\";\n        filter = FilterUtils.createFilter(where);\n        System.out.println(filter);\n\n        where = \"1+1\";\n        filter = FilterUtils.createFilter(where);\n        System.out.println(filter);\n    }", "signature": "void testCreateFilter()", "full_signature": "@Test public void testCreateFilter()", "class_method_signature": "FilterUtilsTest.testCreateFilter()", "testcase": true, "constructor": false, "invocations": ["createFilter", "println", "createFilter", "println", "createFilter", "println", "createFilter", "println"]}, "focal_class": {"identifier": "FilterUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toDNFAndFlat", "parameters": "(IFilter node)", "modifiers": "public static", "return": "IFilter", "signature": "IFilter toDNFAndFlat(IFilter node)", "full_signature": "public static IFilter toDNFAndFlat(IFilter node)", "class_method_signature": "FilterUtils.toDNFAndFlat(IFilter node)", "testcase": false, "constructor": false}, {"identifier": "toDNF", "parameters": "(IFilter node)", "modifiers": "public static", "return": "IFilter", "signature": "IFilter toDNF(IFilter node)", "full_signature": "public static IFilter toDNF(IFilter node)", "class_method_signature": "FilterUtils.toDNF(IFilter node)", "testcase": false, "constructor": false}, {"identifier": "passOrNode", "parameters": "(ILogicalFilter node)", "modifiers": "private static", "return": "IFilter", "signature": "IFilter passOrNode(ILogicalFilter node)", "full_signature": "private static IFilter passOrNode(ILogicalFilter node)", "class_method_signature": "FilterUtils.passOrNode(ILogicalFilter node)", "testcase": false, "constructor": false}, {"identifier": "expandAndNode", "parameters": "(ILogicalFilter node)", "modifiers": "private static", "return": "IFilter", "signature": "IFilter expandAndNode(ILogicalFilter node)", "full_signature": "private static IFilter expandAndNode(ILogicalFilter node)", "class_method_signature": "FilterUtils.expandAndNode(ILogicalFilter node)", "testcase": false, "constructor": false}, {"identifier": "flatDNFFilter", "parameters": "(IFilter node)", "modifiers": "private static", "return": "IFilter", "signature": "IFilter flatDNFFilter(IFilter node)", "full_signature": "private static IFilter flatDNFFilter(IFilter node)", "class_method_signature": "FilterUtils.flatDNFFilter(IFilter node)", "testcase": false, "constructor": false}, {"identifier": "toDNFNodesArray", "parameters": "(IFilter node)", "modifiers": "public static", "return": "List<List<IFilter>>", "signature": "List<List<IFilter>> toDNFNodesArray(IFilter node)", "full_signature": "public static List<List<IFilter>> toDNFNodesArray(IFilter node)", "class_method_signature": "FilterUtils.toDNFNodesArray(IFilter node)", "testcase": false, "constructor": false}, {"identifier": "toDNFNode", "parameters": "(IFilter node)", "modifiers": "public static", "return": "List<IFilter>", "signature": "List<IFilter> toDNFNode(IFilter node)", "full_signature": "public static List<IFilter> toDNFNode(IFilter node)", "class_method_signature": "FilterUtils.toDNFNode(IFilter node)", "testcase": false, "constructor": false}, {"identifier": "toColumnFiltersMap", "parameters": "(List<IFilter> DNFNode)", "modifiers": "public static", "return": "Map<Object, List<IFilter>>", "signature": "Map<Object, List<IFilter>> toColumnFiltersMap(List<IFilter> DNFNode)", "full_signature": "public static Map<Object, List<IFilter>> toColumnFiltersMap(List<IFilter> DNFNode)", "class_method_signature": "FilterUtils.toColumnFiltersMap(List<IFilter> DNFNode)", "testcase": false, "constructor": false}, {"identifier": "isDNF", "parameters": "(IFilter node)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDNF(IFilter node)", "full_signature": "public static boolean isDNF(IFilter node)", "class_method_signature": "FilterUtils.isDNF(IFilter node)", "testcase": false, "constructor": false}, {"identifier": "isCNFNode", "parameters": "(IFilter node)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCNFNode(IFilter node)", "full_signature": "public static boolean isCNFNode(IFilter node)", "class_method_signature": "FilterUtils.isCNFNode(IFilter node)", "testcase": false, "constructor": false}, {"identifier": "isLogicalNode", "parameters": "(IFilter node)", "modifiers": "private static", "return": "boolean", "signature": "boolean isLogicalNode(IFilter node)", "full_signature": "private static boolean isLogicalNode(IFilter node)", "class_method_signature": "FilterUtils.isLogicalNode(IFilter node)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(IFilter filter)", "modifiers": "public static", "return": "IFilter", "signature": "IFilter merge(IFilter filter)", "full_signature": "public static IFilter merge(IFilter filter)", "class_method_signature": "FilterUtils.merge(IFilter filter)", "testcase": false, "constructor": false}, {"identifier": "needToMerge", "parameters": "(List<List<IFilter>> dNFNodes)", "modifiers": "private static", "return": "boolean", "signature": "boolean needToMerge(List<List<IFilter>> dNFNodes)", "full_signature": "private static boolean needToMerge(List<List<IFilter>> dNFNodes)", "class_method_signature": "FilterUtils.needToMerge(List<List<IFilter>> dNFNodes)", "testcase": false, "constructor": false}, {"identifier": "mergeAndDNFNodesArray", "parameters": "(List<List<IFilter>> DNFNodesBeforeMerge)", "modifiers": "private static", "return": "List<List<IFilter>>", "signature": "List<List<IFilter>> mergeAndDNFNodesArray(List<List<IFilter>> DNFNodesBeforeMerge)", "full_signature": "private static List<List<IFilter>> mergeAndDNFNodesArray(List<List<IFilter>> DNFNodesBeforeMerge)", "class_method_signature": "FilterUtils.mergeAndDNFNodesArray(List<List<IFilter>> DNFNodesBeforeMerge)", "testcase": false, "constructor": false}, {"identifier": "mergeOrDNFNodes", "parameters": "(List<List<IFilter>> DNFNodes)", "modifiers": "private static", "return": "List<List<IFilter>>", "signature": "List<List<IFilter>> mergeOrDNFNodes(List<List<IFilter>> DNFNodes)", "full_signature": "private static List<List<IFilter>> mergeOrDNFNodes(List<List<IFilter>> DNFNodes)", "class_method_signature": "FilterUtils.mergeOrDNFNodes(List<List<IFilter>> DNFNodes)", "testcase": false, "constructor": false}, {"identifier": "DNFToOrLogicTree", "parameters": "(List<List<IFilter>> DNFNodes)", "modifiers": "public static", "return": "IFilter", "signature": "IFilter DNFToOrLogicTree(List<List<IFilter>> DNFNodes)", "full_signature": "public static IFilter DNFToOrLogicTree(List<List<IFilter>> DNFNodes)", "class_method_signature": "FilterUtils.DNFToOrLogicTree(List<List<IFilter>> DNFNodes)", "testcase": false, "constructor": false}, {"identifier": "DNFToAndLogicTree", "parameters": "(List<IFilter> DNFNode)", "modifiers": "public static", "return": "IFilter", "signature": "IFilter DNFToAndLogicTree(List<IFilter> DNFNode)", "full_signature": "public static IFilter DNFToAndLogicTree(List<IFilter> DNFNode)", "class_method_signature": "FilterUtils.DNFToAndLogicTree(List<IFilter> DNFNode)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(IFilter root, IFilter o)", "modifiers": "public static", "return": "IFilter", "signature": "IFilter and(IFilter root, IFilter o)", "full_signature": "public static IFilter and(IFilter root, IFilter o)", "class_method_signature": "FilterUtils.and(IFilter root, IFilter o)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(IFilter root, IFilter o)", "modifiers": "public static", "return": "IFilter", "signature": "IFilter or(IFilter root, IFilter o)", "full_signature": "public static IFilter or(IFilter root, IFilter o)", "class_method_signature": "FilterUtils.or(IFilter root, IFilter o)", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(Comparable columnName, Comparable value)", "modifiers": "public static", "return": "IBooleanFilter", "signature": "IBooleanFilter equal(Comparable columnName, Comparable value)", "full_signature": "public static IBooleanFilter equal(Comparable columnName, Comparable value)", "class_method_signature": "FilterUtils.equal(Comparable columnName, Comparable value)", "testcase": false, "constructor": false}, {"identifier": "isConstFilter", "parameters": "(IBooleanFilter f)", "modifiers": "public static", "return": "boolean", "signature": "boolean isConstFilter(IBooleanFilter f)", "full_signature": "public static boolean isConstFilter(IBooleanFilter f)", "class_method_signature": "FilterUtils.isConstFilter(IBooleanFilter f)", "testcase": false, "constructor": false}, {"identifier": "createFilter", "parameters": "(String where)", "modifiers": "public static", "return": "IFilter", "signature": "IFilter createFilter(String where)", "full_signature": "public static IFilter createFilter(String where)", "class_method_signature": "FilterUtils.createFilter(String where)", "testcase": false, "constructor": false}, {"identifier": "isConstValue", "parameters": "(Object v)", "modifiers": "public static", "return": "boolean", "signature": "boolean isConstValue(Object v)", "full_signature": "public static boolean isConstValue(Object v)", "class_method_signature": "FilterUtils.isConstValue(Object v)", "testcase": false, "constructor": false}], "file": "tddl-optimizer/src/main/java/com/taobao/tddl/optimizer/utils/FilterUtils.java"}, "focal_method": {"identifier": "createFilter", "parameters": "(String where)", "modifiers": "public static", "return": "IFilter", "body": "public static IFilter createFilter(String where) {\n        if (StringUtils.isEmpty(where)) {\n            return null;\n        }\n\n        MySqlExprVisitor visitor = MySqlExprVisitor.parser(where);\n        Comparable value = visitor.getColumnOrValue();\n        if (value instanceof IFilter) {\n            return (IFilter) value;\n        } else if (value instanceof ISelectable) {\n            throw new IllegalArgumentException(\"\u4e0d\u5408\u6cd5\u7684filter\u8868\u8fbe\u5f0f:\" + where);\n        } else {\n            return visitor.buildConstanctFilter(value);\n        }\n    }", "signature": "IFilter createFilter(String where)", "full_signature": "public static IFilter createFilter(String where)", "class_method_signature": "FilterUtils.createFilter(String where)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "parser", "getColumnOrValue", "buildConstanctFilter"]}, "repository": {"repo_id": 16945217, "url": "https://github.com/cpsing/tddl", "language": "Java", "is_fork": false, "fork_count": 126, "stargazer_count": 31, "size": 3247, "license": "licensed"}}