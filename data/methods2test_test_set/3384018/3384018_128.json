{"test_class": {"identifier": "TestURIUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private URI baseURI = URI.create(\"http://a/b/c/d;p?q\");", "modifier": "private", "type": "URI", "declarator": "baseURI = URI.create(\"http://a/b/c/d;p?q\")", "var_name": "baseURI"}], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/client/utils/TestURIUtils.java"}, "test_case": {"identifier": "testResolve41", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolve41() {\n        Assert.assertEquals(\"http:g\", URIUtils.resolve(this.baseURI, \"http:g\").toString());\n    }", "signature": "void testResolve41()", "full_signature": "@Test public void testResolve41()", "class_method_signature": "TestURIUtils.testResolve41()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "resolve"]}, "focal_class": {"identifier": "URIUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createURI", "parameters": "(\n            final String scheme,\n            final String host,\n            int port,\n            final String path,\n            final String query,\n            final String fragment)", "modifiers": "public static", "return": "URI", "signature": "URI createURI(\n            final String scheme,\n            final String host,\n            int port,\n            final String path,\n            final String query,\n            final String fragment)", "full_signature": "public static URI createURI(\n            final String scheme,\n            final String host,\n            int port,\n            final String path,\n            final String query,\n            final String fragment)", "class_method_signature": "URIUtils.createURI(\n            final String scheme,\n            final String host,\n            int port,\n            final String path,\n            final String query,\n            final String fragment)", "testcase": false, "constructor": false}, {"identifier": "rewriteURI", "parameters": "(\n            final URI uri,\n            final HttpHost target,\n            boolean dropFragment)", "modifiers": "public static", "return": "URI", "signature": "URI rewriteURI(\n            final URI uri,\n            final HttpHost target,\n            boolean dropFragment)", "full_signature": "public static URI rewriteURI(\n            final URI uri,\n            final HttpHost target,\n            boolean dropFragment)", "class_method_signature": "URIUtils.rewriteURI(\n            final URI uri,\n            final HttpHost target,\n            boolean dropFragment)", "testcase": false, "constructor": false}, {"identifier": "normalizePath", "parameters": "(String path)", "modifiers": "private static", "return": "String", "signature": "String normalizePath(String path)", "full_signature": "private static String normalizePath(String path)", "class_method_signature": "URIUtils.normalizePath(String path)", "testcase": false, "constructor": false}, {"identifier": "rewriteURI", "parameters": "(\n            final URI uri,\n            final HttpHost target)", "modifiers": "public static", "return": "URI", "signature": "URI rewriteURI(\n            final URI uri,\n            final HttpHost target)", "full_signature": "public static URI rewriteURI(\n            final URI uri,\n            final HttpHost target)", "class_method_signature": "URIUtils.rewriteURI(\n            final URI uri,\n            final HttpHost target)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final URI baseURI, final String reference)", "modifiers": "public static", "return": "URI", "signature": "URI resolve(final URI baseURI, final String reference)", "full_signature": "public static URI resolve(final URI baseURI, final String reference)", "class_method_signature": "URIUtils.resolve(final URI baseURI, final String reference)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final URI baseURI, URI reference)", "modifiers": "public static", "return": "URI", "signature": "URI resolve(final URI baseURI, URI reference)", "full_signature": "public static URI resolve(final URI baseURI, URI reference)", "class_method_signature": "URIUtils.resolve(final URI baseURI, URI reference)", "testcase": false, "constructor": false}, {"identifier": "resolveReferenceStartingWithQueryString", "parameters": "(\n            final URI baseURI, final URI reference)", "modifiers": "private static", "return": "URI", "signature": "URI resolveReferenceStartingWithQueryString(\n            final URI baseURI, final URI reference)", "full_signature": "private static URI resolveReferenceStartingWithQueryString(\n            final URI baseURI, final URI reference)", "class_method_signature": "URIUtils.resolveReferenceStartingWithQueryString(\n            final URI baseURI, final URI reference)", "testcase": false, "constructor": false}, {"identifier": "removeDotSegments", "parameters": "(URI uri)", "modifiers": "private static", "return": "URI", "signature": "URI removeDotSegments(URI uri)", "full_signature": "private static URI removeDotSegments(URI uri)", "class_method_signature": "URIUtils.removeDotSegments(URI uri)", "testcase": false, "constructor": false}, {"identifier": "extractHost", "parameters": "(final URI uri)", "modifiers": "public static", "return": "HttpHost", "signature": "HttpHost extractHost(final URI uri)", "full_signature": "public static HttpHost extractHost(final URI uri)", "class_method_signature": "URIUtils.extractHost(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "URIUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " URIUtils()", "full_signature": "private  URIUtils()", "class_method_signature": "URIUtils.URIUtils()", "testcase": false, "constructor": true}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/utils/URIUtils.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final URI baseURI, final String reference)", "modifiers": "public static", "return": "URI", "body": "public static URI resolve(final URI baseURI, final String reference) {\n        return URIUtils.resolve(baseURI, URI.create(reference));\n    }", "signature": "URI resolve(final URI baseURI, final String reference)", "full_signature": "public static URI resolve(final URI baseURI, final String reference)", "class_method_signature": "URIUtils.resolve(final URI baseURI, final String reference)", "testcase": false, "constructor": false, "invocations": ["resolve", "create"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}