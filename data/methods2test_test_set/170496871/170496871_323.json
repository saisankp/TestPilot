{"test_class": {"identifier": "GiniImpurityMeasureTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/tree/impurity/gini/GiniImpurityMeasureTest.java"}, "test_case": {"identifier": "testImpurityOnEmptyData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testImpurityOnEmptyData() {\n        long[] left = new long[]{0, 0, 0};\n        long[] right = new long[]{0, 0, 0};\n\n        GiniImpurityMeasure impurity = new GiniImpurityMeasure(left, right);\n\n        assertEquals(0.0, impurity.impurity(), 1e-10);\n    }", "signature": "void testImpurityOnEmptyData()", "full_signature": "@Test public void testImpurityOnEmptyData()", "class_method_signature": "GiniImpurityMeasureTest.testImpurityOnEmptyData()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "impurity"]}, "focal_class": {"identifier": "GiniImpurityMeasure", "superclass": "", "interfaces": "implements ImpurityMeasure<GiniImpurityMeasure>", "fields": [{"original_string": "private static final long serialVersionUID = 5338129703395229970L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 5338129703395229970L", "var_name": "serialVersionUID"}, {"original_string": "private final long[] left;", "modifier": "private final", "type": "long[]", "declarator": "left", "var_name": "left"}, {"original_string": "private final long[] right;", "modifier": "private final", "type": "long[]", "declarator": "right", "var_name": "right"}], "methods": [{"identifier": "GiniImpurityMeasure", "parameters": "(long[] left, long[] right)", "modifiers": "", "return": "", "signature": " GiniImpurityMeasure(long[] left, long[] right)", "full_signature": "  GiniImpurityMeasure(long[] left, long[] right)", "class_method_signature": "GiniImpurityMeasure.GiniImpurityMeasure(long[] left, long[] right)", "testcase": false, "constructor": true}, {"identifier": "impurity", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double impurity()", "full_signature": "@Override public double impurity()", "class_method_signature": "GiniImpurityMeasure.impurity()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(GiniImpurityMeasure b)", "modifiers": "@Override public", "return": "GiniImpurityMeasure", "signature": "GiniImpurityMeasure add(GiniImpurityMeasure b)", "full_signature": "@Override public GiniImpurityMeasure add(GiniImpurityMeasure b)", "class_method_signature": "GiniImpurityMeasure.add(GiniImpurityMeasure b)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(GiniImpurityMeasure b)", "modifiers": "@Override public", "return": "GiniImpurityMeasure", "signature": "GiniImpurityMeasure subtract(GiniImpurityMeasure b)", "full_signature": "@Override public GiniImpurityMeasure subtract(GiniImpurityMeasure b)", "class_method_signature": "GiniImpurityMeasure.subtract(GiniImpurityMeasure b)", "testcase": false, "constructor": false}, {"identifier": "getLeft", "parameters": "()", "modifiers": "public", "return": "long[]", "signature": "long[] getLeft()", "full_signature": "public long[] getLeft()", "class_method_signature": "GiniImpurityMeasure.getLeft()", "testcase": false, "constructor": false}, {"identifier": "getRight", "parameters": "()", "modifiers": "public", "return": "long[]", "signature": "long[] getRight()", "full_signature": "public long[] getRight()", "class_method_signature": "GiniImpurityMeasure.getRight()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/tree/impurity/gini/GiniImpurityMeasure.java"}, "focal_method": {"identifier": "impurity", "parameters": "()", "modifiers": "@Override public", "return": "double", "body": "@Override public double impurity() {\n        long leftCnt = 0;\n        long rightCnt = 0;\n\n        double leftImpurity = 0;\n        double rightImpurity = 0;\n\n        for (long e : left)\n            leftCnt += e;\n\n        for (long e : right)\n            rightCnt += e;\n\n        if (leftCnt > 0)\n            for (long e : left)\n                leftImpurity += Math.pow(e, 2) / leftCnt;\n\n        if (rightCnt > 0)\n            for (long e : right)\n                rightImpurity += Math.pow(e, 2) / rightCnt;\n\n        return -(leftImpurity + rightImpurity);\n    }", "signature": "double impurity()", "full_signature": "@Override public double impurity()", "class_method_signature": "GiniImpurityMeasure.impurity()", "testcase": false, "constructor": false, "invocations": ["pow", "pow"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}