{"test_class": {"identifier": "PoolTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/Base/Pool/src/test/java/info/smart_tools/smartactors/base/pool/PoolTest.java"}, "test_case": {"identifier": "Should_executePoorActionWhenFreeItemsAreExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_executePoorActionWhenFreeItemsAreExists() throws Exception {\n        Supplier<Object> createFunc = mock(Supplier.class);\n        when(createFunc.get()).thenReturn(new Object());\n        Pool pool = new Pool(1, createFunc);\n        IPoorAction pAction = mock(IPoorAction.class);\n        pool.onAvailable(pAction);\n        verify(pAction).execute();\n    }", "signature": "void Should_executePoorActionWhenFreeItemsAreExists()", "full_signature": "@Test public void Should_executePoorActionWhenFreeItemsAreExists()", "class_method_signature": "PoolTest.Should_executePoorActionWhenFreeItemsAreExists()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "get", "mock", "onAvailable", "execute", "verify"]}, "focal_class": {"identifier": "Pool", "superclass": "", "interfaces": "implements IPool", "fields": [{"original_string": "private Integer maxItemsCount;", "modifier": "private", "type": "Integer", "declarator": "maxItemsCount", "var_name": "maxItemsCount"}, {"original_string": "private final ArrayBlockingQueue<Object> freeItems;", "modifier": "private final", "type": "ArrayBlockingQueue<Object>", "declarator": "freeItems", "var_name": "freeItems"}, {"original_string": "private AtomicInteger freeItemsCounter = new AtomicInteger();", "modifier": "private", "type": "AtomicInteger", "declarator": "freeItemsCounter = new AtomicInteger()", "var_name": "freeItemsCounter"}, {"original_string": "private ConcurrentLinkedQueue<IPoorAction> taskQueue = new ConcurrentLinkedQueue<>();", "modifier": "private", "type": "ConcurrentLinkedQueue<IPoorAction>", "declarator": "taskQueue = new ConcurrentLinkedQueue<>()", "var_name": "taskQueue"}, {"original_string": "private Supplier<Object> creationFunction;", "modifier": "private", "type": "Supplier<Object>", "declarator": "creationFunction", "var_name": "creationFunction"}], "methods": [{"identifier": "Pool", "parameters": "(final Integer maxItems, final Supplier<Object>  func)", "modifiers": "public", "return": "", "signature": " Pool(final Integer maxItems, final Supplier<Object>  func)", "full_signature": "public  Pool(final Integer maxItems, final Supplier<Object>  func)", "class_method_signature": "Pool.Pool(final Integer maxItems, final Supplier<Object>  func)", "testcase": false, "constructor": true}, {"identifier": "take", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object take()", "full_signature": "public Object take()", "class_method_signature": "Pool.take()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final Object item)", "modifiers": "public", "return": "void", "signature": "void put(final Object item)", "full_signature": "public void put(final Object item)", "class_method_signature": "Pool.put(final Object item)", "testcase": false, "constructor": false}, {"identifier": "onAvailable", "parameters": "(final IPoorAction action)", "modifiers": "public", "return": "void", "signature": "void onAvailable(final IPoorAction action)", "full_signature": "public void onAvailable(final IPoorAction action)", "class_method_signature": "Pool.onAvailable(final IPoorAction action)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Base/Pool/src/main/java/info/smart_tools/smartactors/base/pool/Pool.java"}, "focal_method": {"identifier": "onAvailable", "parameters": "(final IPoorAction action)", "modifiers": "public", "return": "void", "body": "public void onAvailable(final IPoorAction action) {\n        try {\n            if (freeItemsCounter.get() > 0) {\n                action.execute();\n                return;\n            }\n            this.taskQueue.add(action);\n        } catch (ActionExecuteException e) {\n            throw new RuntimeException(\"Failed to execute PoorAction\", e);\n        }\n    }", "signature": "void onAvailable(final IPoorAction action)", "full_signature": "public void onAvailable(final IPoorAction action)", "class_method_signature": "Pool.onAvailable(final IPoorAction action)", "testcase": false, "constructor": false, "invocations": ["get", "execute", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}