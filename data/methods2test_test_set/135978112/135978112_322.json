{"test_class": {"identifier": "KStreamTransformValuesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String topicName = \"topic\";", "modifier": "private", "type": "String", "declarator": "topicName = \"topic\"", "var_name": "topicName"}, {"original_string": "final private Serde<Integer> intSerde = Serdes.Integer();", "modifier": "final private", "type": "Serde<Integer>", "declarator": "intSerde = Serdes.Integer()", "var_name": "intSerde"}, {"original_string": "private KStreamTestDriver driver;", "modifier": "private", "type": "KStreamTestDriver", "declarator": "driver", "var_name": "driver"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java"}, "test_case": {"identifier": "testTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransform() {\n        KStreamBuilder builder = new KStreamBuilder();\n\n        ValueTransformerSupplier<Integer, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Integer, Integer>() {\n                public ValueTransformer<Integer, Integer> get() {\n                    return new ValueTransformer<Integer, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(Integer value) {\n                            total += value;\n                            return total;\n                        }\n\n                        @Override\n                        public Integer punctuate(long timestamp) {\n                            return (int) timestamp;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        stream = builder.stream(intSerde, intSerde, topicName);\n        stream.transformValues(valueTransformerSupplier).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topicName, expectedKeys[i], expectedKeys[i] * 10);\n        }\n\n        assertEquals(4, processor.processed.size());\n\n        driver.punctuate(2);\n        driver.punctuate(3);\n\n        String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\", \"null:2\", \"null:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.processed.get(i));\n        }\n    }", "signature": "void testTransform()", "full_signature": "@Test public void testTransform()", "class_method_signature": "KStreamTransformValuesTest.testTransform()", "testcase": true, "constructor": false, "invocations": ["stream", "process", "transformValues", "process", "assertEquals", "size", "punctuate", "punctuate", "assertEquals", "get"]}, "focal_class": {"identifier": "KStreamTransformValues", "superclass": "", "interfaces": "implements ProcessorSupplier<K, V>", "fields": [{"original_string": "private final ValueTransformerSupplier<V, R> valueTransformerSupplier;", "modifier": "private final", "type": "ValueTransformerSupplier<V, R>", "declarator": "valueTransformerSupplier", "var_name": "valueTransformerSupplier"}], "methods": [{"identifier": "KStreamTransformValues", "parameters": "(ValueTransformerSupplier<V, R> valueTransformerSupplier)", "modifiers": "public", "return": "", "signature": " KStreamTransformValues(ValueTransformerSupplier<V, R> valueTransformerSupplier)", "full_signature": "public  KStreamTransformValues(ValueTransformerSupplier<V, R> valueTransformerSupplier)", "class_method_signature": "KStreamTransformValues.KStreamTransformValues(ValueTransformerSupplier<V, R> valueTransformerSupplier)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KStreamTransformValues.get()", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValues.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "body": "@Override\n    public Processor<K, V> get() {\n        return new KStreamTransformValuesProcessor<>(valueTransformerSupplier.get());\n    }", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KStreamTransformValues.get()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}