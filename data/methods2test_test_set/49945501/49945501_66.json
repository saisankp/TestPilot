{"test_class": {"identifier": "ClassNameAwareRequestMappingHandlerMappingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final StaticWebApplicationContext wac = new StaticWebApplicationContext();", "modifier": "private final", "type": "StaticWebApplicationContext", "declarator": "wac = new StaticWebApplicationContext()", "var_name": "wac"}, {"original_string": "private ClassNameAwareRequestMappingHandlerMapping handlerMapping;", "modifier": "private", "type": "ClassNameAwareRequestMappingHandlerMapping", "declarator": "handlerMapping", "var_name": "handlerMapping"}, {"original_string": "private StarterMvcProperties.ApiProperties apiProps;", "modifier": "private", "type": "StarterMvcProperties.ApiProperties", "declarator": "apiProps", "var_name": "apiProps"}], "file": "neo-starter/src/test/java/eu/neoteric/starter/mvc/ClassNameAwareRequestMappingHandlerMappingTest.java"}, "test_case": {"identifier": "addApiPathPrefixWhenSetUpForApiController", "parameters": "(String apiPath)", "modifiers": "@Test @Parameters({\"api\", \"/api\", \"api/\", \"/api/\"}) public", "return": "void", "body": "@Test\n    @Parameters({\"api\", \"/api\", \"api/\", \"/api/\"})\n    public void addApiPathPrefixWhenSetUpForApiController(String apiPath) throws Exception {\n        apiProps.setPath(apiPath);\n        mappingHandler(apiProps);\n        RequestMappingInfo info = handlerMapping.getMappingForMethod(ListEndpointApiController.class.getMethod(\"getList\"), ListEndpointApiController.class);\n        assertPattern(info, \"/api/list-endpoint-api-controller/getList\");\n    }", "signature": "void addApiPathPrefixWhenSetUpForApiController(String apiPath)", "full_signature": "@Test @Parameters({\"api\", \"/api\", \"api/\", \"/api/\"}) public void addApiPathPrefixWhenSetUpForApiController(String apiPath)", "class_method_signature": "ClassNameAwareRequestMappingHandlerMappingTest.addApiPathPrefixWhenSetUpForApiController(String apiPath)", "testcase": true, "constructor": false, "invocations": ["setPath", "mappingHandler", "getMappingForMethod", "getMethod", "assertPattern"]}, "focal_class": {"identifier": "ClassNameAwareRequestMappingHandlerMapping", "superclass": "extends RequestMappingHandlerMapping", "interfaces": "", "fields": [{"original_string": "private StarterMvcProperties.ApiProperties apiProps;", "modifier": "private", "type": "StarterMvcProperties.ApiProperties", "declarator": "apiProps", "var_name": "apiProps"}], "methods": [{"identifier": "ClassNameAwareRequestMappingHandlerMapping", "parameters": "(StarterMvcProperties.ApiProperties apiProps)", "modifiers": "public", "return": "", "signature": " ClassNameAwareRequestMappingHandlerMapping(StarterMvcProperties.ApiProperties apiProps)", "full_signature": "public  ClassNameAwareRequestMappingHandlerMapping(StarterMvcProperties.ApiProperties apiProps)", "class_method_signature": "ClassNameAwareRequestMappingHandlerMapping.ClassNameAwareRequestMappingHandlerMapping(StarterMvcProperties.ApiProperties apiProps)", "testcase": false, "constructor": true}, {"identifier": "getMappingForMethod", "parameters": "(Method method, Class<?> handlerType)", "modifiers": "@Override protected", "return": "RequestMappingInfo", "signature": "RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType)", "full_signature": "@Override protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType)", "class_method_signature": "ClassNameAwareRequestMappingHandlerMapping.getMappingForMethod(Method method, Class<?> handlerType)", "testcase": false, "constructor": false}, {"identifier": "shouldAddClassNameContext", "parameters": "(Class<?> handlerType)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldAddClassNameContext(Class<?> handlerType)", "full_signature": "private boolean shouldAddClassNameContext(Class<?> handlerType)", "class_method_signature": "ClassNameAwareRequestMappingHandlerMapping.shouldAddClassNameContext(Class<?> handlerType)", "testcase": false, "constructor": false}, {"identifier": "prefixMappingInfo", "parameters": "(Class<?> handlerType)", "modifiers": "private", "return": "RequestMappingInfo", "signature": "RequestMappingInfo prefixMappingInfo(Class<?> handlerType)", "full_signature": "private RequestMappingInfo prefixMappingInfo(Class<?> handlerType)", "class_method_signature": "ClassNameAwareRequestMappingHandlerMapping.prefixMappingInfo(Class<?> handlerType)", "testcase": false, "constructor": false}, {"identifier": "retrievePrefix", "parameters": "(Class<?> handlerType)", "modifiers": "private", "return": "String", "signature": "String retrievePrefix(Class<?> handlerType)", "full_signature": "private String retrievePrefix(Class<?> handlerType)", "class_method_signature": "ClassNameAwareRequestMappingHandlerMapping.retrievePrefix(Class<?> handlerType)", "testcase": false, "constructor": false}, {"identifier": "resolveClassName", "parameters": "(String className)", "modifiers": "private", "return": "String", "signature": "String resolveClassName(String className)", "full_signature": "private String resolveClassName(String className)", "class_method_signature": "ClassNameAwareRequestMappingHandlerMapping.resolveClassName(String className)", "testcase": false, "constructor": false}, {"identifier": "createRequestMappingInfo", "parameters": "(AnnotatedElement element)", "modifiers": "private", "return": "RequestMappingInfo", "signature": "RequestMappingInfo createRequestMappingInfo(AnnotatedElement element)", "full_signature": "private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element)", "class_method_signature": "ClassNameAwareRequestMappingHandlerMapping.createRequestMappingInfo(AnnotatedElement element)", "testcase": false, "constructor": false}], "file": "neo-starter/src/main/java/eu/neoteric/starter/mvc/ClassNameAwareRequestMappingHandlerMapping.java"}, "focal_method": {"identifier": "getMappingForMethod", "parameters": "(Method method, Class<?> handlerType)", "modifiers": "@Override protected", "return": "RequestMappingInfo", "body": "@Override\n    protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {\n        RequestMappingInfo info = createRequestMappingInfo(method);\n        if (info != null) {\n            RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);\n            if (typeInfo != null) {\n                info = typeInfo.combine(info);\n            }\n\n            if (shouldAddClassNameContext(handlerType)) {\n                RequestMappingInfo prefixMappingInfo = prefixMappingInfo(handlerType);\n                info = prefixMappingInfo.combine(info);\n            }\n        }\n        return info;\n    }", "signature": "RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType)", "full_signature": "@Override protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType)", "class_method_signature": "ClassNameAwareRequestMappingHandlerMapping.getMappingForMethod(Method method, Class<?> handlerType)", "testcase": false, "constructor": false, "invocations": ["createRequestMappingInfo", "createRequestMappingInfo", "combine", "shouldAddClassNameContext", "prefixMappingInfo", "combine"]}, "repository": {"repo_id": 49945501, "url": "https://github.com/neoteric-eu/neo-starters", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 969, "license": "licensed"}}