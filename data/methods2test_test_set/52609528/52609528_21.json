{"test_class": {"identifier": "RedisQueueCircuitBreakerStorageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Vertx vertx;", "modifier": "private static", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private Jedis jedis;", "modifier": "private", "type": "Jedis", "declarator": "jedis", "var_name": "jedis"}, {"original_string": "private static RedisQueueCircuitBreakerStorage storage;", "modifier": "private static", "type": "RedisQueueCircuitBreakerStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "@org.junit.Rule\n    public Timeout rule = Timeout.seconds(5);", "modifier": "@org.junit.Rule\n    public", "type": "Timeout", "declarator": "rule = Timeout.seconds(5)", "var_name": "rule"}], "file": "gateleen-queue/src/test/java/org/swisspush/gateleen/queue/queuing/circuitbreaker/impl/RedisQueueCircuitBreakerStorageTest.java"}, "test_case": {"identifier": "testLockQueue", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLockQueue(TestContext context){\n        Async async = context.async();\n        String circuitHash = \"anotherCircuitHash\";\n\n        context.assertFalse(jedis.exists(queuesKey(circuitHash)));\n\n        PatternAndCircuitHash patternAndCircuitHash = buildPatternAndCircuitHash(\"/anotherCircuit\", circuitHash);\n        storage.lockQueue(\"someQueue\", patternAndCircuitHash).setHandler(event -> {\n            context.assertTrue(jedis.exists(queuesKey(circuitHash)));\n            context.assertEquals(1L, jedis.zcard(queuesKey(circuitHash)));\n            context.assertEquals(\"someQueue\", jedis.zrange(queuesKey(circuitHash), 0, 0).iterator().next());\n            async.complete();\n        });\n    }", "signature": "void testLockQueue(TestContext context)", "full_signature": "@Test public void testLockQueue(TestContext context)", "class_method_signature": "RedisQueueCircuitBreakerStorageTest.testLockQueue(TestContext context)", "testcase": true, "constructor": false, "invocations": ["async", "assertFalse", "exists", "queuesKey", "buildPatternAndCircuitHash", "setHandler", "lockQueue", "assertTrue", "exists", "queuesKey", "assertEquals", "zcard", "queuesKey", "assertEquals", "next", "iterator", "zrange", "queuesKey", "complete"]}, "focal_class": {"identifier": "RedisQueueCircuitBreakerStorage", "superclass": "", "interfaces": "implements QueueCircuitBreakerStorage", "fields": [{"original_string": "private RedisClient redisClient;", "modifier": "private", "type": "RedisClient", "declarator": "redisClient", "var_name": "redisClient"}, {"original_string": "private Logger log = LoggerFactory.getLogger(RedisQueueCircuitBreakerStorage.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RedisQueueCircuitBreakerStorage.class)", "var_name": "log"}, {"original_string": "public static final String STORAGE_PREFIX = \"gateleen.queue-circuit-breaker:\";", "modifier": "public static final", "type": "String", "declarator": "STORAGE_PREFIX = \"gateleen.queue-circuit-breaker:\"", "var_name": "STORAGE_PREFIX"}, {"original_string": "public static final String STORAGE_INFOS_SUFFIX = \":infos\";", "modifier": "public static final", "type": "String", "declarator": "STORAGE_INFOS_SUFFIX = \":infos\"", "var_name": "STORAGE_INFOS_SUFFIX"}, {"original_string": "public static final String STORAGE_QUEUES_SUFFIX = \":queues\";", "modifier": "public static final", "type": "String", "declarator": "STORAGE_QUEUES_SUFFIX = \":queues\"", "var_name": "STORAGE_QUEUES_SUFFIX"}, {"original_string": "public static final String STORAGE_ALL_CIRCUITS = STORAGE_PREFIX + \"all-circuits\";", "modifier": "public static final", "type": "String", "declarator": "STORAGE_ALL_CIRCUITS = STORAGE_PREFIX + \"all-circuits\"", "var_name": "STORAGE_ALL_CIRCUITS"}, {"original_string": "public static final String STORAGE_HALFOPEN_CIRCUITS = STORAGE_PREFIX + \"half-open-circuits\";", "modifier": "public static final", "type": "String", "declarator": "STORAGE_HALFOPEN_CIRCUITS = STORAGE_PREFIX + \"half-open-circuits\"", "var_name": "STORAGE_HALFOPEN_CIRCUITS"}, {"original_string": "public static final String STORAGE_OPEN_CIRCUITS = STORAGE_PREFIX + \"open-circuits\";", "modifier": "public static final", "type": "String", "declarator": "STORAGE_OPEN_CIRCUITS = STORAGE_PREFIX + \"open-circuits\"", "var_name": "STORAGE_OPEN_CIRCUITS"}, {"original_string": "public static final String STORAGE_QUEUES_TO_UNLOCK = STORAGE_PREFIX + \"queues-to-unlock\";", "modifier": "public static final", "type": "String", "declarator": "STORAGE_QUEUES_TO_UNLOCK = STORAGE_PREFIX + \"queues-to-unlock\"", "var_name": "STORAGE_QUEUES_TO_UNLOCK"}, {"original_string": "public static final String FIELD_STATE = \"state\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_STATE = \"state\"", "var_name": "FIELD_STATE"}, {"original_string": "public static final String FIELD_FAILRATIO = \"failRatio\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_FAILRATIO = \"failRatio\"", "var_name": "FIELD_FAILRATIO"}, {"original_string": "public static final String FIELD_CIRCUIT = \"circuit\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_CIRCUIT = \"circuit\"", "var_name": "FIELD_CIRCUIT"}, {"original_string": "private LuaScriptState openCircuitLuaScriptState;", "modifier": "private", "type": "LuaScriptState", "declarator": "openCircuitLuaScriptState", "var_name": "openCircuitLuaScriptState"}, {"original_string": "private LuaScriptState closeCircuitLuaScriptState;", "modifier": "private", "type": "LuaScriptState", "declarator": "closeCircuitLuaScriptState", "var_name": "closeCircuitLuaScriptState"}, {"original_string": "private LuaScriptState reOpenCircuitLuaScriptState;", "modifier": "private", "type": "LuaScriptState", "declarator": "reOpenCircuitLuaScriptState", "var_name": "reOpenCircuitLuaScriptState"}, {"original_string": "private LuaScriptState halfOpenCircuitLuaScriptState;", "modifier": "private", "type": "LuaScriptState", "declarator": "halfOpenCircuitLuaScriptState", "var_name": "halfOpenCircuitLuaScriptState"}, {"original_string": "private LuaScriptState unlockSampleQueuesLuaScriptState;", "modifier": "private", "type": "LuaScriptState", "declarator": "unlockSampleQueuesLuaScriptState", "var_name": "unlockSampleQueuesLuaScriptState"}, {"original_string": "private LuaScriptState getAllCircuitsLuaScriptState;", "modifier": "private", "type": "LuaScriptState", "declarator": "getAllCircuitsLuaScriptState", "var_name": "getAllCircuitsLuaScriptState"}], "methods": [{"identifier": "RedisQueueCircuitBreakerStorage", "parameters": "(RedisClient redisClient)", "modifiers": "public", "return": "", "signature": " RedisQueueCircuitBreakerStorage(RedisClient redisClient)", "full_signature": "public  RedisQueueCircuitBreakerStorage(RedisClient redisClient)", "class_method_signature": "RedisQueueCircuitBreakerStorage.RedisQueueCircuitBreakerStorage(RedisClient redisClient)", "testcase": false, "constructor": true}, {"identifier": "getQueueCircuitState", "parameters": "(PatternAndCircuitHash patternAndCircuitHash)", "modifiers": "@Override public", "return": "Future<QueueCircuitState>", "signature": "Future<QueueCircuitState> getQueueCircuitState(PatternAndCircuitHash patternAndCircuitHash)", "full_signature": "@Override public Future<QueueCircuitState> getQueueCircuitState(PatternAndCircuitHash patternAndCircuitHash)", "class_method_signature": "RedisQueueCircuitBreakerStorage.getQueueCircuitState(PatternAndCircuitHash patternAndCircuitHash)", "testcase": false, "constructor": false}, {"identifier": "getQueueCircuitState", "parameters": "(String circuitHash)", "modifiers": "@Override public", "return": "Future<QueueCircuitState>", "signature": "Future<QueueCircuitState> getQueueCircuitState(String circuitHash)", "full_signature": "@Override public Future<QueueCircuitState> getQueueCircuitState(String circuitHash)", "class_method_signature": "RedisQueueCircuitBreakerStorage.getQueueCircuitState(String circuitHash)", "testcase": false, "constructor": false}, {"identifier": "getQueueCircuitInformation", "parameters": "(String circuitHash)", "modifiers": "@Override public", "return": "Future<JsonObject>", "signature": "Future<JsonObject> getQueueCircuitInformation(String circuitHash)", "full_signature": "@Override public Future<JsonObject> getQueueCircuitInformation(String circuitHash)", "class_method_signature": "RedisQueueCircuitBreakerStorage.getQueueCircuitInformation(String circuitHash)", "testcase": false, "constructor": false}, {"identifier": "getAllCircuits", "parameters": "()", "modifiers": "@Override public", "return": "Future<JsonObject>", "signature": "Future<JsonObject> getAllCircuits()", "full_signature": "@Override public Future<JsonObject> getAllCircuits()", "class_method_signature": "RedisQueueCircuitBreakerStorage.getAllCircuits()", "testcase": false, "constructor": false}, {"identifier": "updateStatistics", "parameters": "(PatternAndCircuitHash patternAndCircuitHash, String uniqueRequestID, long timestamp,\n                                                           int errorThresholdPercentage, long entriesMaxAgeMS, long minQueueSampleCount,\n                                                           long maxQueueSampleCount, QueueResponseType queueResponseType)", "modifiers": "@Override public", "return": "Future<UpdateStatisticsResult>", "signature": "Future<UpdateStatisticsResult> updateStatistics(PatternAndCircuitHash patternAndCircuitHash, String uniqueRequestID, long timestamp,\n                                                           int errorThresholdPercentage, long entriesMaxAgeMS, long minQueueSampleCount,\n                                                           long maxQueueSampleCount, QueueResponseType queueResponseType)", "full_signature": "@Override public Future<UpdateStatisticsResult> updateStatistics(PatternAndCircuitHash patternAndCircuitHash, String uniqueRequestID, long timestamp,\n                                                           int errorThresholdPercentage, long entriesMaxAgeMS, long minQueueSampleCount,\n                                                           long maxQueueSampleCount, QueueResponseType queueResponseType)", "class_method_signature": "RedisQueueCircuitBreakerStorage.updateStatistics(PatternAndCircuitHash patternAndCircuitHash, String uniqueRequestID, long timestamp,\n                                                           int errorThresholdPercentage, long entriesMaxAgeMS, long minQueueSampleCount,\n                                                           long maxQueueSampleCount, QueueResponseType queueResponseType)", "testcase": false, "constructor": false}, {"identifier": "lockQueue", "parameters": "(String queueName, PatternAndCircuitHash patternAndCircuitHash)", "modifiers": "@Override public", "return": "Future<Void>", "signature": "Future<Void> lockQueue(String queueName, PatternAndCircuitHash patternAndCircuitHash)", "full_signature": "@Override public Future<Void> lockQueue(String queueName, PatternAndCircuitHash patternAndCircuitHash)", "class_method_signature": "RedisQueueCircuitBreakerStorage.lockQueue(String queueName, PatternAndCircuitHash patternAndCircuitHash)", "testcase": false, "constructor": false}, {"identifier": "popQueueToUnlock", "parameters": "()", "modifiers": "@Override public", "return": "Future<String>", "signature": "Future<String> popQueueToUnlock()", "full_signature": "@Override public Future<String> popQueueToUnlock()", "class_method_signature": "RedisQueueCircuitBreakerStorage.popQueueToUnlock()", "testcase": false, "constructor": false}, {"identifier": "closeCircuit", "parameters": "(PatternAndCircuitHash patternAndCircuitHash)", "modifiers": "@Override public", "return": "Future<Void>", "signature": "Future<Void> closeCircuit(PatternAndCircuitHash patternAndCircuitHash)", "full_signature": "@Override public Future<Void> closeCircuit(PatternAndCircuitHash patternAndCircuitHash)", "class_method_signature": "RedisQueueCircuitBreakerStorage.closeCircuit(PatternAndCircuitHash patternAndCircuitHash)", "testcase": false, "constructor": false}, {"identifier": "closeAndRemoveCircuit", "parameters": "(PatternAndCircuitHash patternAndCircuitHash)", "modifiers": "@Override public", "return": "Future<Void>", "signature": "Future<Void> closeAndRemoveCircuit(PatternAndCircuitHash patternAndCircuitHash)", "full_signature": "@Override public Future<Void> closeAndRemoveCircuit(PatternAndCircuitHash patternAndCircuitHash)", "class_method_signature": "RedisQueueCircuitBreakerStorage.closeAndRemoveCircuit(PatternAndCircuitHash patternAndCircuitHash)", "testcase": false, "constructor": false}, {"identifier": "closeCircuit", "parameters": "(String circuitHash, boolean circuitRemoved)", "modifiers": "private", "return": "Future<Void>", "signature": "Future<Void> closeCircuit(String circuitHash, boolean circuitRemoved)", "full_signature": "private Future<Void> closeCircuit(String circuitHash, boolean circuitRemoved)", "class_method_signature": "RedisQueueCircuitBreakerStorage.closeCircuit(String circuitHash, boolean circuitRemoved)", "testcase": false, "constructor": false}, {"identifier": "closeAllCircuits", "parameters": "()", "modifiers": "@Override public", "return": "Future<Void>", "signature": "Future<Void> closeAllCircuits()", "full_signature": "@Override public Future<Void> closeAllCircuits()", "class_method_signature": "RedisQueueCircuitBreakerStorage.closeAllCircuits()", "testcase": false, "constructor": false}, {"identifier": "closeCircuitsByKey", "parameters": "(String key)", "modifiers": "private", "return": "Future<Void>", "signature": "Future<Void> closeCircuitsByKey(String key)", "full_signature": "private Future<Void> closeCircuitsByKey(String key)", "class_method_signature": "RedisQueueCircuitBreakerStorage.closeCircuitsByKey(String key)", "testcase": false, "constructor": false}, {"identifier": "reOpenCircuit", "parameters": "(PatternAndCircuitHash patternAndCircuitHash)", "modifiers": "@Override public", "return": "Future<Void>", "signature": "Future<Void> reOpenCircuit(PatternAndCircuitHash patternAndCircuitHash)", "full_signature": "@Override public Future<Void> reOpenCircuit(PatternAndCircuitHash patternAndCircuitHash)", "class_method_signature": "RedisQueueCircuitBreakerStorage.reOpenCircuit(PatternAndCircuitHash patternAndCircuitHash)", "testcase": false, "constructor": false}, {"identifier": "setOpenCircuitsToHalfOpen", "parameters": "()", "modifiers": "@Override public", "return": "Future<Long>", "signature": "Future<Long> setOpenCircuitsToHalfOpen()", "full_signature": "@Override public Future<Long> setOpenCircuitsToHalfOpen()", "class_method_signature": "RedisQueueCircuitBreakerStorage.setOpenCircuitsToHalfOpen()", "testcase": false, "constructor": false}, {"identifier": "unlockSampleQueues", "parameters": "()", "modifiers": "@Override public", "return": "Future<List<String>>", "signature": "Future<List<String>> unlockSampleQueues()", "full_signature": "@Override public Future<List<String>> unlockSampleQueues()", "class_method_signature": "RedisQueueCircuitBreakerStorage.unlockSampleQueues()", "testcase": false, "constructor": false}, {"identifier": "buildInfosKey", "parameters": "(String circuitHash)", "modifiers": "private", "return": "String", "signature": "String buildInfosKey(String circuitHash)", "full_signature": "private String buildInfosKey(String circuitHash)", "class_method_signature": "RedisQueueCircuitBreakerStorage.buildInfosKey(String circuitHash)", "testcase": false, "constructor": false}, {"identifier": "buildQueuesKey", "parameters": "(String circuitHash)", "modifiers": "private", "return": "String", "signature": "String buildQueuesKey(String circuitHash)", "full_signature": "private String buildQueuesKey(String circuitHash)", "class_method_signature": "RedisQueueCircuitBreakerStorage.buildQueuesKey(String circuitHash)", "testcase": false, "constructor": false}, {"identifier": "buildStatsKey", "parameters": "(String circuitHash, QueueResponseType queueResponseType)", "modifiers": "private", "return": "String", "signature": "String buildStatsKey(String circuitHash, QueueResponseType queueResponseType)", "full_signature": "private String buildStatsKey(String circuitHash, QueueResponseType queueResponseType)", "class_method_signature": "RedisQueueCircuitBreakerStorage.buildStatsKey(String circuitHash, QueueResponseType queueResponseType)", "testcase": false, "constructor": false}], "file": "gateleen-queue/src/main/java/org/swisspush/gateleen/queue/queuing/circuitbreaker/impl/RedisQueueCircuitBreakerStorage.java"}, "focal_method": {"identifier": "lockQueue", "parameters": "(String queueName, PatternAndCircuitHash patternAndCircuitHash)", "modifiers": "@Override public", "return": "Future<Void>", "body": "@Override\n    public Future<Void> lockQueue(String queueName, PatternAndCircuitHash patternAndCircuitHash) {\n        Future<Void> future = Future.future();\n        redisClient.zadd(buildQueuesKey(patternAndCircuitHash.getCircuitHash()), System.currentTimeMillis(), queueName, event -> {\n            if(event.failed()){\n                future.fail(event.cause().getMessage());\n                return;\n            }\n            future.complete();\n        });\n        return future;\n    }", "signature": "Future<Void> lockQueue(String queueName, PatternAndCircuitHash patternAndCircuitHash)", "full_signature": "@Override public Future<Void> lockQueue(String queueName, PatternAndCircuitHash patternAndCircuitHash)", "class_method_signature": "RedisQueueCircuitBreakerStorage.lockQueue(String queueName, PatternAndCircuitHash patternAndCircuitHash)", "testcase": false, "constructor": false, "invocations": ["future", "zadd", "buildQueuesKey", "getCircuitHash", "currentTimeMillis", "failed", "fail", "getMessage", "cause", "complete"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}