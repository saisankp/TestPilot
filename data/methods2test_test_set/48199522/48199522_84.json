{"test_class": {"identifier": "WeightedPercentileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double[] counts;", "modifier": "private", "type": "double[]", "declarator": "counts", "var_name": "counts"}, {"original_string": "private double[] metrics;", "modifier": "private", "type": "double[]", "declarator": "metrics", "var_name": "metrics"}], "file": "lib/src/test/java/edu/stanford/futuredata/macrobase/analysis/classify/stats/WeightedPercentileTest.java"}, "test_case": {"identifier": "testEvaluate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEvaluate() throws Exception {\n        WeightedPercentile wp = new WeightedPercentile(counts, metrics);\n\n        // p100 is defined as the largest element\n        double p100 = wp.evaluate(100.0);\n        assertEquals(1000.0, p100, 0.01);\n\n        double p99 = wp.evaluate(99.0);\n        assertEquals(995.0, p99, 0.01);\n\n        double p90 = wp.evaluate(90.0);\n        assertEquals(949.0, p90, 0.01);\n\n        double p50 = wp.evaluate(50.0);\n        assertEquals(707.0, p50, 0.01);\n\n        double p1 = wp.evaluate(1.0);\n        assertEquals(100.0, p1, 0.01);\n\n        double p0 = wp.evaluate(0.0);\n        assertEquals(1.0, p0, 0.01);\n    }", "signature": "void testEvaluate()", "full_signature": "@Test public void testEvaluate()", "class_method_signature": "WeightedPercentileTest.testEvaluate()", "testcase": true, "constructor": false, "invocations": ["evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals"]}, "focal_class": {"identifier": "WeightedPercentile", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double[] counts;", "modifier": "private", "type": "double[]", "declarator": "counts", "var_name": "counts"}, {"original_string": "private double[] metrics;", "modifier": "private", "type": "double[]", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private double numRawMetrics = 0;", "modifier": "private", "type": "double", "declarator": "numRawMetrics = 0", "var_name": "numRawMetrics"}, {"original_string": "private WeightedMetric[] weightedMetrics;", "modifier": "private", "type": "WeightedMetric[]", "declarator": "weightedMetrics", "var_name": "weightedMetrics"}], "methods": [{"identifier": "WeightedPercentile", "parameters": "(double[] counts, double[] metrics)", "modifiers": "public", "return": "", "signature": " WeightedPercentile(double[] counts, double[] metrics)", "full_signature": "public  WeightedPercentile(double[] counts, double[] metrics)", "class_method_signature": "WeightedPercentile.WeightedPercentile(double[] counts, double[] metrics)", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(double percentile)", "modifiers": "public", "return": "double", "signature": "double evaluate(double percentile)", "full_signature": "public double evaluate(double percentile)", "class_method_signature": "WeightedPercentile.evaluate(double percentile)", "testcase": false, "constructor": false}, {"identifier": "computeCounts", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void computeCounts()", "full_signature": "private void computeCounts()", "class_method_signature": "WeightedPercentile.computeCounts()", "testcase": false, "constructor": false}], "file": "lib/src/main/java/edu/stanford/futuredata/macrobase/analysis/classify/stats/WeightedPercentile.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(double percentile)", "modifiers": "public", "return": "double", "body": "public double evaluate(double percentile) {\n        if (percentile >= 50.0) {\n            int numToPass = (int)((100.0 - percentile) / 100.0 * numRawMetrics);\n            int numPassed = 0;\n            for (int i = weightedMetrics.length - 1; i >= 0; i--) {\n                numPassed += weightedMetrics[i].count;\n                if (numPassed >= numToPass) {\n                    return weightedMetrics[i].metric;\n                }\n            }\n        } else {\n            int numToPass = (int)(percentile / 100.0 * numRawMetrics);\n            int numPassed = 0;\n            for (int i = 0; i < weightedMetrics.length; i++) {\n                numPassed += weightedMetrics[i].count;\n                if (numPassed >= numToPass) {\n                    return weightedMetrics[i].metric;\n                }\n            }\n        }\n        throw new MacroBaseInternalError(\"WeightedPercentile was implemented incorrectly\");\n    }", "signature": "double evaluate(double percentile)", "full_signature": "public double evaluate(double percentile)", "class_method_signature": "WeightedPercentile.evaluate(double percentile)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}