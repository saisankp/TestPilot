{"test_class": {"identifier": "AbstractMBeanServerExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TestExecutor executor;", "modifier": "", "type": "TestExecutor", "declarator": "executor", "var_name": "executor"}], "file": "agent/core/src/test/java/org/jolokia/backend/executor/AbstractMBeanServerExecutorTest.java"}, "test_case": {"identifier": "eachObjectName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void eachObjectName() throws MalformedObjectNameException, MBeanException, IOException, ReflectionException, NotCompliantMBeanException, InstanceAlreadyExistsException {\n        for (final ObjectName name : new ObjectName[] { new ObjectName(\"test:type=one\"), new ObjectName(\"test:type=two\") }) {\n            executor.each(name,new MBeanServerExecutor.MBeanEachCallback() {\n                public void callback(MBeanServerConnection pConn, ObjectName pName) throws ReflectionException, InstanceNotFoundException, IOException, MBeanException {\n                assertEquals(pName,name);\n                    checkHiddenMBeans(pConn,pName);\n                }\n            });\n        }\n    }", "signature": "void eachObjectName()", "full_signature": "@Test public void eachObjectName()", "class_method_signature": "AbstractMBeanServerExecutorTest.eachObjectName()", "testcase": true, "constructor": false, "invocations": ["each", "assertEquals", "checkHiddenMBeans"]}, "focal_class": {"identifier": "AbstractMBeanServerExecutor", "superclass": "", "interfaces": "implements MBeanServerExecutor, NotificationListener", "fields": [{"original_string": "private long lastMBeanRegistrationChange;", "modifier": "private", "type": "long", "declarator": "lastMBeanRegistrationChange", "var_name": "lastMBeanRegistrationChange"}], "methods": [{"identifier": "getMBeanServers", "parameters": "()", "modifiers": "protected abstract", "return": "Set<MBeanServerConnection>", "signature": "Set<MBeanServerConnection> getMBeanServers()", "full_signature": "protected abstract Set<MBeanServerConnection> getMBeanServers()", "class_method_signature": "AbstractMBeanServerExecutor.getMBeanServers()", "testcase": false, "constructor": false}, {"identifier": "getJolokiaMBeanServer", "parameters": "()", "modifiers": "protected", "return": "MBeanServerConnection", "signature": "MBeanServerConnection getJolokiaMBeanServer()", "full_signature": "protected MBeanServerConnection getJolokiaMBeanServer()", "class_method_signature": "AbstractMBeanServerExecutor.getJolokiaMBeanServer()", "testcase": false, "constructor": false}, {"identifier": "each", "parameters": "(ObjectName pObjectName, MBeanEachCallback pCallback)", "modifiers": "public", "return": "void", "signature": "void each(ObjectName pObjectName, MBeanEachCallback pCallback)", "full_signature": "public void each(ObjectName pObjectName, MBeanEachCallback pCallback)", "class_method_signature": "AbstractMBeanServerExecutor.each(ObjectName pObjectName, MBeanEachCallback pCallback)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)", "modifiers": "public", "return": "T", "signature": "T call(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)", "full_signature": "public T call(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)", "class_method_signature": "AbstractMBeanServerExecutor.call(ObjectName pObjectName, MBeanAction<T> pMBeanAction, Object ... pExtraArgs)", "testcase": false, "constructor": false}, {"identifier": "queryNames", "parameters": "(ObjectName pObjectName)", "modifiers": "public", "return": "Set<ObjectName>", "signature": "Set<ObjectName> queryNames(ObjectName pObjectName)", "full_signature": "public Set<ObjectName> queryNames(ObjectName pObjectName)", "class_method_signature": "AbstractMBeanServerExecutor.queryNames(ObjectName pObjectName)", "testcase": false, "constructor": false}, {"identifier": "registerForMBeanNotifications", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void registerForMBeanNotifications()", "full_signature": "protected void registerForMBeanNotifications()", "class_method_signature": "AbstractMBeanServerExecutor.registerForMBeanNotifications()", "testcase": false, "constructor": false}, {"identifier": "unregisterFromMBeanNotifications", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unregisterFromMBeanNotifications()", "full_signature": "public void unregisterFromMBeanNotifications()", "class_method_signature": "AbstractMBeanServerExecutor.unregisterFromMBeanNotifications()", "testcase": false, "constructor": false}, {"identifier": "handleNotification", "parameters": "(Notification pNotification, Object pHandback)", "modifiers": "public", "return": "void", "signature": "void handleNotification(Notification pNotification, Object pHandback)", "full_signature": "public void handleNotification(Notification pNotification, Object pHandback)", "class_method_signature": "AbstractMBeanServerExecutor.handleNotification(Notification pNotification, Object pHandback)", "testcase": false, "constructor": false}, {"identifier": "hasMBeansListChangedSince", "parameters": "(long pTimestamp)", "modifiers": "public", "return": "boolean", "signature": "boolean hasMBeansListChangedSince(long pTimestamp)", "full_signature": "public boolean hasMBeansListChangedSince(long pTimestamp)", "class_method_signature": "AbstractMBeanServerExecutor.hasMBeansListChangedSince(long pTimestamp)", "testcase": false, "constructor": false}, {"identifier": "updateErrorMsg", "parameters": "(StringBuilder pErrors, Exception exp)", "modifiers": "private", "return": "Exception", "signature": "Exception updateErrorMsg(StringBuilder pErrors, Exception exp)", "full_signature": "private Exception updateErrorMsg(StringBuilder pErrors, Exception exp)", "class_method_signature": "AbstractMBeanServerExecutor.updateErrorMsg(StringBuilder pErrors, Exception exp)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/backend/executor/AbstractMBeanServerExecutor.java"}, "focal_method": {"identifier": "each", "parameters": "(ObjectName pObjectName, MBeanEachCallback pCallback)", "modifiers": "public", "return": "void", "body": "public void each(ObjectName pObjectName, MBeanEachCallback pCallback) throws IOException, ReflectionException, MBeanException {\n        try {\n            Set<ObjectName> visited = new HashSet<ObjectName>();\n            for (MBeanServerConnection server : getMBeanServers()) {\n                // Query for a full name is the same as a direct lookup\n                for (ObjectName nameObject : server.queryNames(pObjectName, null)) {\n                    // Don't add if already visited previously\n                    if (!visited.contains(nameObject)) {\n                        pCallback.callback(server, nameObject);\n                        visited.add(nameObject);\n                    }\n                }\n            }\n        } catch (InstanceNotFoundException exp) {\n            // Well, should not happen, since we do a query before and the returned value are supposed to exist\n            // on the mbean-server. But, who knows ...\n            throw new IllegalArgumentException(\"Cannot find MBean \" +\n                                               (pObjectName != null ? \"(MBean \" + pObjectName + \")\" : \"\") + \": \" + exp,exp);\n        }\n    }", "signature": "void each(ObjectName pObjectName, MBeanEachCallback pCallback)", "full_signature": "public void each(ObjectName pObjectName, MBeanEachCallback pCallback)", "class_method_signature": "AbstractMBeanServerExecutor.each(ObjectName pObjectName, MBeanEachCallback pCallback)", "testcase": false, "constructor": false, "invocations": ["getMBeanServers", "queryNames", "contains", "callback", "add"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}