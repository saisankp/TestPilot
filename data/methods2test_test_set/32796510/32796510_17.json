{"test_class": {"identifier": "MatchResultWithOffsetTest", "superclass": "", "interfaces": "", "fields": [], "file": "streamflyer-core/src/test/java/com/github/rwitzel/streamflyer/regex/addons/tokens/MatchResultWithOffsetTest.java"}, "test_case": {"identifier": "testGroupCountAndMore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGroupCountAndMore() throws Exception {\n        String input = \"1234567890123451xx2yy5aa6bb\";\n        String regex = \"(1xx(2yy((4zz)|(5aa)))(6bb))\";\n        Matcher matcher = Pattern.compile(regex).matcher(input);\n        assertTrue(matcher.find());\n        assertEquals(6, matcher.groupCount());\n\n        {\n            // offset = 0 -> \"1xx2yy5aa6bb\" will be the match result\n            MatchResultWithOffset mo = new MatchResultWithOffset(matcher, 0);\n            assertGroup(-1, \"1xx2yy5aa6bb\", 15, 27, mo);\n            assertGroup(0, \"1xx2yy5aa6bb\", 15, 27, mo);\n            assertGroup(1, \"1xx2yy5aa6bb\", 15, 27, mo);\n            assertGroup(2, \"2yy5aa\", 18, 24, mo);\n            assertGroup(3, \"5aa\", 21, 24, mo);\n            assertGroup(4, null, -1, -1, mo);\n            assertGroup(5, \"5aa\", 21, 24, mo);\n            assertGroup(6, \"6bb\", 24, 27, mo);\n            assertEquals(6, mo.groupCount());\n        }\n\n        {\n            // offset = 1 -> \"1xx2yy5aa6bb\" will be the match result\n            MatchResultWithOffset mo = new MatchResultWithOffset(matcher, 1);\n            assertGroup(-1, \"1xx2yy5aa6bb\", 15, 27, mo);\n            assertGroup(0, \"1xx2yy5aa6bb\", 15, 27, mo);\n            assertGroup(1, \"2yy5aa\", 18, 24, mo);\n            assertGroup(2, \"5aa\", 21, 24, mo);\n            assertGroup(3, null, -1, -1, mo);\n            assertGroup(4, \"5aa\", 21, 24, mo);\n            assertGroup(5, \"6bb\", 24, 27, mo);\n            assertEquals(5, mo.groupCount());\n        }\n\n        {\n            // offset = 2 -> \"2yy5aa\" will be the match result\n            MatchResultWithOffset mo = new MatchResultWithOffset(matcher, 2);\n            assertEquals(\"2yy5aa\", input.substring(18, 24));\n            assertGroup(-1, \"2yy5aa\", 18, 24, mo);\n            assertGroup(0, \"2yy5aa\", 18, 24, mo);\n            assertGroup(1, \"5aa\", 21, 24, mo);\n            assertGroup(2, null, -1, -1, mo);\n            assertGroup(3, \"5aa\", 21, 24, mo);\n            assertEquals(3, mo.groupCount());\n        }\n\n        {\n            // offset = 3 -> \"5aa\" will be the match result\n            MatchResultWithOffset mo = new MatchResultWithOffset(matcher, 3);\n            assertGroup(-1, \"5aa\", 21, 24, mo);\n            assertGroup(0, \"5aa\", 21, 24, mo);\n            assertGroup(1, null, -1, -1, mo);\n            assertGroup(2, \"5aa\", 21, 24, mo);\n            assertEquals(2, mo.groupCount());\n        }\n\n        {\n            // offset = 4 -> null will be the match result\n            MatchResultWithOffset mo = new MatchResultWithOffset(matcher, 4);\n            assertGroup(-1, null, -1, -1, mo);\n            assertEquals(0, mo.groupCount());\n        }\n\n        {\n            // offset = 5 -> \"5aa\" will be the match result\n            MatchResultWithOffset mo = new MatchResultWithOffset(matcher, 5);\n            assertGroup(-1, \"5aa\", 21, 24, mo);\n            assertGroup(0, \"5aa\", 21, 24, mo);\n            assertEquals(0, mo.groupCount());\n        }\n\n        {\n            // offset = 6 -> \"6bb\" will be the match result\n            MatchResultWithOffset mo = new MatchResultWithOffset(matcher, 6);\n            assertGroup(-1, \"6bb\", 24, 27, mo);\n            assertGroup(0, \"6bb\", 24, 27, mo);\n            assertEquals(0, mo.groupCount());\n        }\n\n        {\n            // offset = 7 -> invalid group\n            try {\n                new MatchResultWithOffset(matcher, 7);\n                fail(\"IndexOutOfBoundsException expected\");\n            } catch (IndexOutOfBoundsException e) {\n                assertEquals(\"No group 7\", e.getMessage());\n            }\n        }\n\n        {\n            // offset = -1 -> invalid group\n            try {\n                new MatchResultWithOffset(matcher, -1);\n                fail(\"IndexOutOfBoundsException expected\");\n            } catch (IndexOutOfBoundsException e) {\n                assertEquals(\"No group -1\", e.getMessage());\n            }\n        }\n\n    }", "signature": "void testGroupCountAndMore()", "full_signature": "@Test public void testGroupCountAndMore()", "class_method_signature": "MatchResultWithOffsetTest.testGroupCountAndMore()", "testcase": true, "constructor": false, "invocations": ["matcher", "compile", "assertTrue", "find", "assertEquals", "groupCount", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertEquals", "groupCount", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertEquals", "groupCount", "assertEquals", "substring", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertEquals", "groupCount", "assertGroup", "assertGroup", "assertGroup", "assertGroup", "assertEquals", "groupCount", "assertGroup", "assertEquals", "groupCount", "assertGroup", "assertGroup", "assertEquals", "groupCount", "assertGroup", "assertGroup", "assertEquals", "groupCount", "fail", "assertEquals", "getMessage", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "MatchResultWithOffset", "superclass": "", "interfaces": "implements MatchResult", "fields": [{"original_string": "private MatchResult delegate;", "modifier": "private", "type": "MatchResult", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private int groupOffset;", "modifier": "private", "type": "int", "declarator": "groupOffset", "var_name": "groupOffset"}, {"original_string": "private Integer groupCount;", "modifier": "private", "type": "Integer", "declarator": "groupCount", "var_name": "groupCount"}], "methods": [{"identifier": "MatchResultWithOffset", "parameters": "(MatchResult delegate, int groupOffset)", "modifiers": "public", "return": "", "signature": " MatchResultWithOffset(MatchResult delegate, int groupOffset)", "full_signature": "public  MatchResultWithOffset(MatchResult delegate, int groupOffset)", "class_method_signature": "MatchResultWithOffset.MatchResultWithOffset(MatchResult delegate, int groupOffset)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int start()", "full_signature": "@Override public int start()", "class_method_signature": "MatchResultWithOffset.start()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(int group)", "modifiers": "@Override public", "return": "int", "signature": "int start(int group)", "full_signature": "@Override public int start(int group)", "class_method_signature": "MatchResultWithOffset.start(int group)", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int end()", "full_signature": "@Override public int end()", "class_method_signature": "MatchResultWithOffset.end()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "(int group)", "modifiers": "@Override public", "return": "int", "signature": "int end(int group)", "full_signature": "@Override public int end(int group)", "class_method_signature": "MatchResultWithOffset.end(int group)", "testcase": false, "constructor": false}, {"identifier": "group", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String group()", "full_signature": "@Override public String group()", "class_method_signature": "MatchResultWithOffset.group()", "testcase": false, "constructor": false}, {"identifier": "group", "parameters": "(int group)", "modifiers": "@Override public", "return": "String", "signature": "String group(int group)", "full_signature": "@Override public String group(int group)", "class_method_signature": "MatchResultWithOffset.group(int group)", "testcase": false, "constructor": false}, {"identifier": "groupCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int groupCount()", "full_signature": "@Override public int groupCount()", "class_method_signature": "MatchResultWithOffset.groupCount()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MatchResultWithOffset.toString()", "testcase": false, "constructor": false}], "file": "streamflyer-core/src/main/java/com/github/rwitzel/streamflyer/regex/addons/tokens/MatchResultWithOffset.java"}, "focal_method": {"identifier": "groupCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int groupCount() {\n        if (groupCount == null) {\n            int groupIndex = groupOffset + 1;\n            while (groupIndex <= delegate.groupCount() && delegate.end(groupIndex) <= delegate.end(groupOffset)) {\n                groupIndex++;\n            }\n            groupCount = (groupIndex - 1) - groupOffset;\n        }\n        return groupCount;\n    }", "signature": "int groupCount()", "full_signature": "@Override public int groupCount()", "class_method_signature": "MatchResultWithOffset.groupCount()", "testcase": false, "constructor": false, "invocations": ["groupCount", "end", "end"]}, "repository": {"repo_id": 32796510, "url": "https://github.com/rwitzel/streamflyer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 26, "size": 2880, "license": "licensed"}}