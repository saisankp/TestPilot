{"test_class": {"identifier": "TypeUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public This<String, String> dis;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public", "type": "This<String, String>", "declarator": "dis", "var_name": "dis"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public That<String, String> dat;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public", "type": "That<String, String>", "declarator": "dat", "var_name": "dat"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public The<String, String> da;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public", "type": "The<String, String>", "declarator": "da", "var_name": "da"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public Other<String> uhder;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public", "type": "Other<String>", "declarator": "uhder", "var_name": "uhder"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public Thing ding;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public", "type": "Thing", "declarator": "ding", "var_name": "ding"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public TypeUtilsTest<String>.Tester tester;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public", "type": "TypeUtilsTest<String>.Tester", "declarator": "tester", "var_name": "tester"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public Tester tester2;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public", "type": "Tester", "declarator": "tester2", "var_name": "tester2"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public TypeUtilsTest<String>.That<String, String> dat2;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public", "type": "TypeUtilsTest<String>.That<String, String>", "declarator": "dat2", "var_name": "dat2"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public TypeUtilsTest<Number>.That<String, String> dat3;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public", "type": "TypeUtilsTest<Number>.That<String, String>", "declarator": "dat3", "var_name": "dat3"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public Comparable<? extends Integer>[] intWildcardComparable = null;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public", "type": "Comparable<? extends Integer>[]", "declarator": "intWildcardComparable = null", "var_name": "intWildcardComparable"}, {"original_string": "public static Comparable<String> stringComparable;", "modifier": "public static", "type": "Comparable<String>", "declarator": "stringComparable", "var_name": "stringComparable"}, {"original_string": "public static Comparable<URI> uriComparable;", "modifier": "public static", "type": "Comparable<URI>", "declarator": "uriComparable", "var_name": "uriComparable"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static Comparable<Integer> intComparable;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static", "type": "Comparable<Integer>", "declarator": "intComparable", "var_name": "intComparable"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static Comparable<Long> longComparable;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static", "type": "Comparable<Long>", "declarator": "longComparable", "var_name": "longComparable"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static Comparable<?> wildcardComparable;", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static", "type": "Comparable<?>", "declarator": "wildcardComparable", "var_name": "wildcardComparable"}, {"original_string": "public static URI uri;", "modifier": "public static", "type": "URI", "declarator": "uri", "var_name": "uri"}, {"original_string": "public static List<String>[] stringListArray;", "modifier": "public static", "type": "List<String>[]", "declarator": "stringListArray", "var_name": "stringListArray"}, {"original_string": "public Iterable<? extends Map<Integer, ? extends Collection<?>>> iterable;", "modifier": "public", "type": "Iterable<? extends Map<Integer, ? extends Collection<?>>>", "declarator": "iterable", "var_name": "iterable"}], "file": "smallrye-reactive-messaging-provider/src/test/java/io/smallrye/reactive/messaging/helpers/TypeUtilsTest.java"}, "test_case": {"identifier": "testLang1114", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLang1114() throws Exception {\n        final Type nonWildcardType = getClass().getDeclaredField(\"wildcardComparable\").getGenericType();\n        final Type wildcardType = ((ParameterizedType) nonWildcardType).getActualTypeArguments()[0];\n\n        assertFalse(TypeUtils.equals(wildcardType, nonWildcardType));\n        assertFalse(TypeUtils.equals(nonWildcardType, wildcardType));\n    }", "signature": "void testLang1114()", "full_signature": "@Test public void testLang1114()", "class_method_signature": "TypeUtilsTest.testLang1114()", "testcase": true, "constructor": false, "invocations": ["getGenericType", "getDeclaredField", "getClass", "getActualTypeArguments", "assertFalse", "equals", "assertFalse", "equals"]}, "focal_class": {"identifier": "TypeUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "TypeUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " TypeUtils()", "full_signature": "private  TypeUtils()", "class_method_signature": "TypeUtils.TypeUtils()", "testcase": false, "constructor": true}, {"identifier": "isAssignable", "parameters": "(final Type type, final Type toType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAssignable(final Type type, final Type toType)", "full_signature": "public static boolean isAssignable(final Type type, final Type toType)", "class_method_signature": "TypeUtils.isAssignable(final Type type, final Type toType)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(final Type type, final Type toType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignable(final Type type, final Type toType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static boolean isAssignable(final Type type, final Type toType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "TypeUtils.isAssignable(final Type type, final Type toType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(final Type type, final Class<?> toClass)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignable(final Type type, final Class<?> toClass)", "full_signature": "private static boolean isAssignable(final Type type, final Class<?> toClass)", "class_method_signature": "TypeUtils.isAssignable(final Type type, final Class<?> toClass)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(final Type type, final ParameterizedType toParameterizedType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignable(final Type type, final ParameterizedType toParameterizedType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static boolean isAssignable(final Type type, final ParameterizedType toParameterizedType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "TypeUtils.isAssignable(final Type type, final ParameterizedType toParameterizedType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "unrollVariableAssignments", "parameters": "(TypeVariable<?> var, final Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "Type", "signature": "Type unrollVariableAssignments(TypeVariable<?> var, final Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static Type unrollVariableAssignments(TypeVariable<?> var, final Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "TypeUtils.unrollVariableAssignments(TypeVariable<?> var, final Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(final Type type, final GenericArrayType toGenericArrayType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignable(final Type type, final GenericArrayType toGenericArrayType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static boolean isAssignable(final Type type, final GenericArrayType toGenericArrayType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "TypeUtils.isAssignable(final Type type, final GenericArrayType toGenericArrayType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(final Type type, final WildcardType toWildcardType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignable(final Type type, final WildcardType toWildcardType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static boolean isAssignable(final Type type, final WildcardType toWildcardType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "TypeUtils.isAssignable(final Type type, final WildcardType toWildcardType,\n            final Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(final Type type, final TypeVariable<?> toTypeVariable)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignable(final Type type, final TypeVariable<?> toTypeVariable)", "full_signature": "private static boolean isAssignable(final Type type, final TypeVariable<?> toTypeVariable)", "class_method_signature": "TypeUtils.isAssignable(final Type type, final TypeVariable<?> toTypeVariable)", "testcase": false, "constructor": false}, {"identifier": "substituteTypeVariables", "parameters": "(final Type type, final Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "Type", "signature": "Type substituteTypeVariables(final Type type, final Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static Type substituteTypeVariables(final Type type, final Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "TypeUtils.substituteTypeVariables(final Type type, final Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "getTypeArguments", "parameters": "(final ParameterizedType type)", "modifiers": "private static", "return": "Map<TypeVariable<?>, Type>", "signature": "Map<TypeVariable<?>, Type> getTypeArguments(final ParameterizedType type)", "full_signature": "private static Map<TypeVariable<?>, Type> getTypeArguments(final ParameterizedType type)", "class_method_signature": "TypeUtils.getTypeArguments(final ParameterizedType type)", "testcase": false, "constructor": false}, {"identifier": "getTypeArguments", "parameters": "(final Type type, final Class<?> toClass)", "modifiers": "static", "return": "Map<TypeVariable<?>, Type>", "signature": "Map<TypeVariable<?>, Type> getTypeArguments(final Type type, final Class<?> toClass)", "full_signature": "static Map<TypeVariable<?>, Type> getTypeArguments(final Type type, final Class<?> toClass)", "class_method_signature": "TypeUtils.getTypeArguments(final Type type, final Class<?> toClass)", "testcase": false, "constructor": false}, {"identifier": "getTypeArguments", "parameters": "(final Type type, final Class<?> toClass,\n            final Map<TypeVariable<?>, Type> subtypeVarAssigns)", "modifiers": "private static", "return": "Map<TypeVariable<?>, Type>", "signature": "Map<TypeVariable<?>, Type> getTypeArguments(final Type type, final Class<?> toClass,\n            final Map<TypeVariable<?>, Type> subtypeVarAssigns)", "full_signature": "private static Map<TypeVariable<?>, Type> getTypeArguments(final Type type, final Class<?> toClass,\n            final Map<TypeVariable<?>, Type> subtypeVarAssigns)", "class_method_signature": "TypeUtils.getTypeArguments(final Type type, final Class<?> toClass,\n            final Map<TypeVariable<?>, Type> subtypeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "getTypeArguments", "parameters": "(\n            final ParameterizedType parameterizedType, final Class<?> toClass,\n            final Map<TypeVariable<?>, Type> subtypeVarAssigns)", "modifiers": "private static", "return": "Map<TypeVariable<?>, Type>", "signature": "Map<TypeVariable<?>, Type> getTypeArguments(\n            final ParameterizedType parameterizedType, final Class<?> toClass,\n            final Map<TypeVariable<?>, Type> subtypeVarAssigns)", "full_signature": "private static Map<TypeVariable<?>, Type> getTypeArguments(\n            final ParameterizedType parameterizedType, final Class<?> toClass,\n            final Map<TypeVariable<?>, Type> subtypeVarAssigns)", "class_method_signature": "TypeUtils.getTypeArguments(\n            final ParameterizedType parameterizedType, final Class<?> toClass,\n            final Map<TypeVariable<?>, Type> subtypeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "getTypeArguments", "parameters": "(Class<?> cls, final Class<?> toClass,\n            final Map<TypeVariable<?>, Type> subtypeVarAssigns)", "modifiers": "private static", "return": "Map<TypeVariable<?>, Type>", "signature": "Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, final Class<?> toClass,\n            final Map<TypeVariable<?>, Type> subtypeVarAssigns)", "full_signature": "private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, final Class<?> toClass,\n            final Map<TypeVariable<?>, Type> subtypeVarAssigns)", "class_method_signature": "TypeUtils.getTypeArguments(Class<?> cls, final Class<?> toClass,\n            final Map<TypeVariable<?>, Type> subtypeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "getClosestParentType", "parameters": "(final Class<?> cls, final Class<?> superClass)", "modifiers": "private static", "return": "Type", "signature": "Type getClosestParentType(final Class<?> cls, final Class<?> superClass)", "full_signature": "private static Type getClosestParentType(final Class<?> cls, final Class<?> superClass)", "class_method_signature": "TypeUtils.getClosestParentType(final Class<?> cls, final Class<?> superClass)", "testcase": false, "constructor": false}, {"identifier": "normalizeUpperBounds", "parameters": "(final Type[] bounds)", "modifiers": "public static", "return": "Type[]", "signature": "Type[] normalizeUpperBounds(final Type[] bounds)", "full_signature": "public static Type[] normalizeUpperBounds(final Type[] bounds)", "class_method_signature": "TypeUtils.normalizeUpperBounds(final Type[] bounds)", "testcase": false, "constructor": false}, {"identifier": "getImplicitBounds", "parameters": "(final TypeVariable<?> typeVariable)", "modifiers": "private static", "return": "Type[]", "signature": "Type[] getImplicitBounds(final TypeVariable<?> typeVariable)", "full_signature": "private static Type[] getImplicitBounds(final TypeVariable<?> typeVariable)", "class_method_signature": "TypeUtils.getImplicitBounds(final TypeVariable<?> typeVariable)", "testcase": false, "constructor": false}, {"identifier": "getImplicitUpperBounds", "parameters": "(final WildcardType wildcardType)", "modifiers": "static", "return": "Type[]", "signature": "Type[] getImplicitUpperBounds(final WildcardType wildcardType)", "full_signature": "static Type[] getImplicitUpperBounds(final WildcardType wildcardType)", "class_method_signature": "TypeUtils.getImplicitUpperBounds(final WildcardType wildcardType)", "testcase": false, "constructor": false}, {"identifier": "getImplicitLowerBounds", "parameters": "(final WildcardType wildcardType)", "modifiers": "static", "return": "Type[]", "signature": "Type[] getImplicitLowerBounds(final WildcardType wildcardType)", "full_signature": "static Type[] getImplicitLowerBounds(final WildcardType wildcardType)", "class_method_signature": "TypeUtils.getImplicitLowerBounds(final WildcardType wildcardType)", "testcase": false, "constructor": false}, {"identifier": "getRawType", "parameters": "(final ParameterizedType parameterizedType)", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> getRawType(final ParameterizedType parameterizedType)", "full_signature": "private static Class<?> getRawType(final ParameterizedType parameterizedType)", "class_method_signature": "TypeUtils.getRawType(final ParameterizedType parameterizedType)", "testcase": false, "constructor": false}, {"identifier": "unrollVariables", "parameters": "(Map<TypeVariable<?>, Type> typeArguments, final Type type)", "modifiers": "private static", "return": "Type", "signature": "Type unrollVariables(Map<TypeVariable<?>, Type> typeArguments, final Type type)", "full_signature": "private static Type unrollVariables(Map<TypeVariable<?>, Type> typeArguments, final Type type)", "class_method_signature": "TypeUtils.unrollVariables(Map<TypeVariable<?>, Type> typeArguments, final Type type)", "testcase": false, "constructor": false}, {"identifier": "unrollBounds", "parameters": "(final Map<TypeVariable<?>, Type> typeArguments, final Type[] bounds)", "modifiers": "private static", "return": "Type[]", "signature": "Type[] unrollBounds(final Map<TypeVariable<?>, Type> typeArguments, final Type[] bounds)", "full_signature": "private static Type[] unrollBounds(final Map<TypeVariable<?>, Type> typeArguments, final Type[] bounds)", "class_method_signature": "TypeUtils.unrollBounds(final Map<TypeVariable<?>, Type> typeArguments, final Type[] bounds)", "testcase": false, "constructor": false}, {"identifier": "containsTypeVariables", "parameters": "(final Type type)", "modifiers": "private static", "return": "boolean", "signature": "boolean containsTypeVariables(final Type type)", "full_signature": "private static boolean containsTypeVariables(final Type type)", "class_method_signature": "TypeUtils.containsTypeVariables(final Type type)", "testcase": false, "constructor": false}, {"identifier": "parameterizeWithOwner", "parameters": "(final Type owner, final Class<?> raw,\n            final Type... typeArguments)", "modifiers": "private static", "return": "ParameterizedType", "signature": "ParameterizedType parameterizeWithOwner(final Type owner, final Class<?> raw,\n            final Type... typeArguments)", "full_signature": "private static ParameterizedType parameterizeWithOwner(final Type owner, final Class<?> raw,\n            final Type... typeArguments)", "class_method_signature": "TypeUtils.parameterizeWithOwner(final Type owner, final Class<?> raw,\n            final Type... typeArguments)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Type t1, final Type t2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(final Type t1, final Type t2)", "full_signature": "public static boolean equals(final Type t1, final Type t2)", "class_method_signature": "TypeUtils.equals(final Type t1, final Type t2)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final ParameterizedType p, final Type t)", "modifiers": "private static", "return": "boolean", "signature": "boolean equals(final ParameterizedType p, final Type t)", "full_signature": "private static boolean equals(final ParameterizedType p, final Type t)", "class_method_signature": "TypeUtils.equals(final ParameterizedType p, final Type t)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final GenericArrayType a, final Type t)", "modifiers": "private static", "return": "boolean", "signature": "boolean equals(final GenericArrayType a, final Type t)", "full_signature": "private static boolean equals(final GenericArrayType a, final Type t)", "class_method_signature": "TypeUtils.equals(final GenericArrayType a, final Type t)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final WildcardType w, final Type t)", "modifiers": "private static", "return": "boolean", "signature": "boolean equals(final WildcardType w, final Type t)", "full_signature": "private static boolean equals(final WildcardType w, final Type t)", "class_method_signature": "TypeUtils.equals(final WildcardType w, final Type t)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Type[] t1, final Type[] t2)", "modifiers": "private static", "return": "boolean", "signature": "boolean equals(final Type[] t1, final Type[] t2)", "full_signature": "private static boolean equals(final Type[] t1, final Type[] t2)", "class_method_signature": "TypeUtils.equals(final Type[] t1, final Type[] t2)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final Type type)", "modifiers": "public static", "return": "String", "signature": "String toString(final Type type)", "full_signature": "public static String toString(final Type type)", "class_method_signature": "TypeUtils.toString(final Type type)", "testcase": false, "constructor": false}, {"identifier": "toLongString", "parameters": "(final TypeVariable<?> var)", "modifiers": "static", "return": "String", "signature": "String toLongString(final TypeVariable<?> var)", "full_signature": "static String toLongString(final TypeVariable<?> var)", "class_method_signature": "TypeUtils.toLongString(final TypeVariable<?> var)", "testcase": false, "constructor": false}, {"identifier": "classToString", "parameters": "(final Class<?> c)", "modifiers": "private static", "return": "String", "signature": "String classToString(final Class<?> c)", "full_signature": "private static String classToString(final Class<?> c)", "class_method_signature": "TypeUtils.classToString(final Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "typeVariableToString", "parameters": "(final TypeVariable<?> v)", "modifiers": "private static", "return": "String", "signature": "String typeVariableToString(final TypeVariable<?> v)", "full_signature": "private static String typeVariableToString(final TypeVariable<?> v)", "class_method_signature": "TypeUtils.typeVariableToString(final TypeVariable<?> v)", "testcase": false, "constructor": false}, {"identifier": "parameterizedTypeToString", "parameters": "(final ParameterizedType p)", "modifiers": "private static", "return": "String", "signature": "String parameterizedTypeToString(final ParameterizedType p)", "full_signature": "private static String parameterizedTypeToString(final ParameterizedType p)", "class_method_signature": "TypeUtils.parameterizedTypeToString(final ParameterizedType p)", "testcase": false, "constructor": false}, {"identifier": "appendRecursiveTypes", "parameters": "(final StringBuilder buf, final int[] recursiveTypeIndexes,\n            final Type[] argumentTypes)", "modifiers": "private static", "return": "void", "signature": "void appendRecursiveTypes(final StringBuilder buf, final int[] recursiveTypeIndexes,\n            final Type[] argumentTypes)", "full_signature": "private static void appendRecursiveTypes(final StringBuilder buf, final int[] recursiveTypeIndexes,\n            final Type[] argumentTypes)", "class_method_signature": "TypeUtils.appendRecursiveTypes(final StringBuilder buf, final int[] recursiveTypeIndexes,\n            final Type[] argumentTypes)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Type[] types, final int... indices)", "modifiers": "private static", "return": "Type[]", "signature": "Type[] removeAll(Type[] types, final int... indices)", "full_signature": "private static Type[] removeAll(Type[] types, final int... indices)", "class_method_signature": "TypeUtils.removeAll(Type[] types, final int... indices)", "testcase": false, "constructor": false}, {"identifier": "findRecursiveTypes", "parameters": "(final ParameterizedType p)", "modifiers": "private static", "return": "int[]", "signature": "int[] findRecursiveTypes(final ParameterizedType p)", "full_signature": "private static int[] findRecursiveTypes(final ParameterizedType p)", "class_method_signature": "TypeUtils.findRecursiveTypes(final ParameterizedType p)", "testcase": false, "constructor": false}, {"identifier": "containsVariableTypeSameParametrizedTypeBound", "parameters": "(final TypeVariable<?> typeVariable,\n            final ParameterizedType p)", "modifiers": "private static", "return": "boolean", "signature": "boolean containsVariableTypeSameParametrizedTypeBound(final TypeVariable<?> typeVariable,\n            final ParameterizedType p)", "full_signature": "private static boolean containsVariableTypeSameParametrizedTypeBound(final TypeVariable<?> typeVariable,\n            final ParameterizedType p)", "class_method_signature": "TypeUtils.containsVariableTypeSameParametrizedTypeBound(final TypeVariable<?> typeVariable,\n            final ParameterizedType p)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int[] array, int element)", "modifiers": "public static", "return": "int[]", "signature": "int[] add(int[] array, int element)", "full_signature": "public static int[] add(int[] array, int element)", "class_method_signature": "TypeUtils.add(int[] array, int element)", "testcase": false, "constructor": false}, {"identifier": "wildcardTypeToString", "parameters": "(final WildcardType w)", "modifiers": "private static", "return": "String", "signature": "String wildcardTypeToString(final WildcardType w)", "full_signature": "private static String wildcardTypeToString(final WildcardType w)", "class_method_signature": "TypeUtils.wildcardTypeToString(final WildcardType w)", "testcase": false, "constructor": false}, {"identifier": "genericArrayTypeToString", "parameters": "(final GenericArrayType g)", "modifiers": "private static", "return": "String", "signature": "String genericArrayTypeToString(final GenericArrayType g)", "full_signature": "private static String genericArrayTypeToString(final GenericArrayType g)", "class_method_signature": "TypeUtils.genericArrayTypeToString(final GenericArrayType g)", "testcase": false, "constructor": false}, {"identifier": "appendAllTo", "parameters": "(final StringBuilder buf, final String sep, final T... types)", "modifiers": "@SafeVarargs private static", "return": "StringBuilder", "signature": "StringBuilder appendAllTo(final StringBuilder buf, final String sep, final T... types)", "full_signature": "@SafeVarargs private static StringBuilder appendAllTo(final StringBuilder buf, final String sep, final T... types)", "class_method_signature": "TypeUtils.appendAllTo(final StringBuilder buf, final String sep, final T... types)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(T object)", "modifiers": "private static", "return": "String", "signature": "String toString(T object)", "full_signature": "private static String toString(T object)", "class_method_signature": "TypeUtils.toString(T object)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final Type[] array, final int index)", "modifiers": "private static", "return": "Type[]", "signature": "Type[] remove(final Type[] array, final int index)", "full_signature": "private static Type[] remove(final Type[] array, final int index)", "class_method_signature": "TypeUtils.remove(final Type[] array, final int index)", "testcase": false, "constructor": false}], "file": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/helpers/TypeUtils.java"}, "focal_method": {"identifier": "equals", "parameters": "(final Type t1, final Type t2)", "modifiers": "public static", "return": "boolean", "body": "public static boolean equals(final Type t1, final Type t2) {\n        if (Objects.equals(t1, t2)) {\n            return true;\n        }\n        if (t1 instanceof ParameterizedType) {\n            return equals((ParameterizedType) t1, t2);\n        }\n        if (t1 instanceof GenericArrayType) {\n            return equals((GenericArrayType) t1, t2);\n        }\n        if (t1 instanceof WildcardType) {\n            return equals((WildcardType) t1, t2);\n        }\n        return false;\n    }", "signature": "boolean equals(final Type t1, final Type t2)", "full_signature": "public static boolean equals(final Type t1, final Type t2)", "class_method_signature": "TypeUtils.equals(final Type t1, final Type t2)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 153155267, "url": "https://github.com/smallrye/smallrye-reactive-messaging", "stars": 45, "created": "10/15/2018 5:36:05 PM +00:00", "updates": "2020-01-26T16:55:44+00:00", "fork": "False", "license": "licensed"}}