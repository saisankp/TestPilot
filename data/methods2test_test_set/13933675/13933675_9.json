{"test_class": {"identifier": "TrimAreaMeasurementsFnTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Point2D<Integer>> myBounds = new ArrayList<>();", "modifier": "private", "type": "List<Point2D<Integer>>", "declarator": "myBounds = new ArrayList<>()", "var_name": "myBounds"}, {"original_string": "private Function<ILink, Optional<ILink>> fn;", "modifier": "private", "type": "Function<ILink, Optional<ILink>>", "declarator": "fn", "var_name": "fn"}], "file": "vars-core/src/test/java/vars/annotation/functions/TrimAreaMeasurementsFnTest.java"}, "test_case": {"identifier": "testCompleteIntersection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompleteIntersection() {\n        // Test complete overlap\n        List<Point2D<Integer>> bounds = new ArrayList<>();\n        bounds.add(new Point2D<>(1, 1));\n        bounds.add(new Point2D<>(9, 1));\n        bounds.add(new Point2D<>(9, 9));\n        bounds.add(new Point2D<>(1, 9));\n        AreaMeasurement am = new AreaMeasurement(bounds);\n        ILink link = am.toLink();\n        Optional<ILink> result = fn.apply(link);\n\n        // We expect a result\n        assertTrue(result.isPresent());\n\n        // The coordinates of the areameasurement should be unchanged.\n        // Note that the order may be different\n        ILink link0 = result.get();\n        AreaMeasurement am0 = AreaMeasurement.fromLink(link0);\n        List<Point2D<Integer>> bounds0 = am0.getCoordinates();\n        assertTrue(bounds0.size() == bounds.size());\n        bounds0.stream()\n                .forEach(p -> assertTrue(bounds.contains(p)));\n\n    }", "signature": "void testCompleteIntersection()", "full_signature": "@Test public void testCompleteIntersection()", "class_method_signature": "TrimAreaMeasurementsFnTest.testCompleteIntersection()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "toLink", "apply", "assertTrue", "isPresent", "get", "fromLink", "getCoordinates", "assertTrue", "size", "size", "forEach", "stream", "assertTrue", "contains"]}, "focal_class": {"identifier": "TrimAreaMeasurementsFn", "superclass": "", "interfaces": "implements Function<ILink, Optional<ILink>>", "fields": [{"original_string": "private final Area acceptableBounds;", "modifier": "private final", "type": "Area", "declarator": "acceptableBounds", "var_name": "acceptableBounds"}, {"original_string": "private final Function<ILink, Polygon> toPolygon = new LinkToAWTPolygonFn();", "modifier": "private final", "type": "Function<ILink, Polygon>", "declarator": "toPolygon = new LinkToAWTPolygonFn()", "var_name": "toPolygon"}], "methods": [{"identifier": "TrimAreaMeasurementsFn", "parameters": "(java.util.List<Point2D<Integer>> bounds)", "modifiers": "public", "return": "", "signature": " TrimAreaMeasurementsFn(java.util.List<Point2D<Integer>> bounds)", "full_signature": "public  TrimAreaMeasurementsFn(java.util.List<Point2D<Integer>> bounds)", "class_method_signature": "TrimAreaMeasurementsFn.TrimAreaMeasurementsFn(java.util.List<Point2D<Integer>> bounds)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(ILink link)", "modifiers": "@Override public", "return": "Optional<ILink>", "signature": "Optional<ILink> apply(ILink link)", "full_signature": "@Override public Optional<ILink> apply(ILink link)", "class_method_signature": "TrimAreaMeasurementsFn.apply(ILink link)", "testcase": false, "constructor": false}, {"identifier": "areaToPolygon", "parameters": "(Area area)", "modifiers": "private", "return": "Polygon", "signature": "Polygon areaToPolygon(Area area)", "full_signature": "private Polygon areaToPolygon(Area area)", "class_method_signature": "TrimAreaMeasurementsFn.areaToPolygon(Area area)", "testcase": false, "constructor": false}, {"identifier": "polygonToAreaMeasurement", "parameters": "(Polygon polygon)", "modifiers": "private", "return": "AreaMeasurement", "signature": "AreaMeasurement polygonToAreaMeasurement(Polygon polygon)", "full_signature": "private AreaMeasurement polygonToAreaMeasurement(Polygon polygon)", "class_method_signature": "TrimAreaMeasurementsFn.polygonToAreaMeasurement(Polygon polygon)", "testcase": false, "constructor": false}], "file": "vars-core/src/main/java/vars/annotation/functions/TrimAreaMeasurementsFn.java"}, "focal_method": {"identifier": "apply", "parameters": "(ILink link)", "modifiers": "@Override public", "return": "Optional<ILink>", "body": "@Override\n    public Optional<ILink> apply(ILink link) {\n        if (AreaMeasurement.IS_AREA_MEASUREMENT_PREDICATE.test(link)) {\n            Polygon polygon = toPolygon.apply(link);\n            Area area = new Area(polygon);\n            area.intersect(acceptableBounds);\n\n            Polygon trimmedPolygon = areaToPolygon(area);\n            if (trimmedPolygon.npoints >= 3) {\n                AreaMeasurement trimmedAreaMeasurement = polygonToAreaMeasurement(trimmedPolygon);\n                return Optional.of(trimmedAreaMeasurement.toLink());\n            }\n            else {\n                return Optional.empty();\n            }\n        }\n        else {\n            return Optional.of(link);\n        }\n    }", "signature": "Optional<ILink> apply(ILink link)", "full_signature": "@Override public Optional<ILink> apply(ILink link)", "class_method_signature": "TrimAreaMeasurementsFn.apply(ILink link)", "testcase": false, "constructor": false, "invocations": ["test", "apply", "intersect", "areaToPolygon", "polygonToAreaMeasurement", "of", "toLink", "empty", "of"]}, "repository": {"repo_id": 13933675, "url": "https://github.com/hohonuuli/vars", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 18273, "license": "licensed"}}