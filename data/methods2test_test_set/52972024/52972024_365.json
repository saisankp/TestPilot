{"test_class": {"identifier": "ActorReceiverCreatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/MessageProcessing/ActorReceiverCreator/src/test/java/info/smart_tools/smartactors/message_processing/actor_receiver_creator/ActorReceiverCreatorTest.java"}, "test_case": {"identifier": "checkCreationAndExecution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkCreationAndExecution()\n            throws Exception {\n        IOC.register(\n                IOC.resolve(IOC.getKeyForKeyStorage(), \"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"),\n                new ResolveByNameIocStrategy(\n                        (a) -> {\n                            try {\n                                return new FieldName((String) a[0]);\n                            } catch (Throwable e) {\n                                throw new RuntimeException(\"Could not create new instance of FieldName\", e);\n                            }\n                        }\n                )\n        );\n        IField field = mock(IField.class);\n        IOC.register(\n                IOC.resolve(IOC.getKeyForKeyStorage(), IField.class.getCanonicalName()),\n                new ResolveByNameIocStrategy(\n                        (a) -> {\n                            return field;\n                        }\n                )\n        );\n        // register receiver generator\n        IResolveDependencyStrategy rgs = mock(IResolveDependencyStrategy.class);\n        IReceiverGenerator rg = mock(IReceiverGenerator.class);\n        IOC.register(Keys.getOrAdd(IReceiverGenerator.class.getCanonicalName()), rgs);\n        when(rgs.resolve()).thenReturn(rg);\n        IMessageReceiver mr = mock(IMessageReceiver.class);\n        when(rg.generate(any(CustomActor.class), any(IResolveDependencyStrategy.class), any(String.class))).thenReturn(mr);\n\n        IObject objectSection = mock(IObject.class);\n        when(objectSection.getValue(new FieldName(\"name\"))).thenReturn(\"actorID\");\n        when(objectSection.getValue(new FieldName(\"dependency\"))).thenReturn(\"createSampleActorStrategy\");\n        IResolveDependencyStrategy createSampleActorStrategy = mock(IResolveDependencyStrategy.class);\n        IOC.register(Keys.getOrAdd(\"createSampleActorStrategy\"), createSampleActorStrategy);\n        ConstructorWrapperImpl wrapperImpl = new ConstructorWrapperImpl();\n        CustomActor a = new CustomActor(wrapperImpl);\n        when(createSampleActorStrategy.resolve(objectSection))\n                .thenReturn(a);\n\n        ActorReceiverCreator arc = new ActorReceiverCreator();\n        IRouter router = new Router();\n\n        arc.createObject(router, objectSection);\n        assertEquals(((Router) router).map.size(), 1);\n        IMessageReceiver actorReceiver = router.route(\"actorID\");\n        assertSame(actorReceiver.getClass(), ActorReceiver.class);\n\n        // mock IMessageProcessor, IMessageProcessingSequence, IObject as current sequence\n        IMessageProcessor processor = mock(IMessageProcessor.class);\n        IMessageProcessingSequence sequence = mock(IMessageProcessingSequence.class);\n        IObject currentSequence = mock(IObject.class);\n        IObject env = mock(IObject.class);\n        when(processor.getEnvironment()).thenReturn(env);\n        when(processor.getSequence()).thenReturn(sequence);\n        when(sequence.getCurrentReceiverArguments()).thenReturn(currentSequence);\n        // configure mock of field\n        when(field.in(currentSequence)).thenReturn(\"getSomeValue\");\n        // configure handler message receiver mock\n        doNothing().when(mr).receive(processor);\n        actorReceiver.receive(processor);\n        verify(mr, times(1)).receive(processor);\n        verify(createSampleActorStrategy, times(1)).resolve(objectSection);\n        verify(rg, times(1)).generate(\n                any(CustomActor.class),\n                any(IResolveDependencyStrategy.class),\n                any(String.class)\n        );\n        verify(objectSection, times(1)).getValue(new FieldName(\"name\"));\n        verify(objectSection, times(1)).getValue(new FieldName(\"dependency\"));\n    }", "signature": "void checkCreationAndExecution()", "full_signature": "@Test public void checkCreationAndExecution()", "class_method_signature": "ActorReceiverCreatorTest.checkCreationAndExecution()", "testcase": true, "constructor": false, "invocations": ["register", "resolve", "getKeyForKeyStorage", "mock", "register", "resolve", "getKeyForKeyStorage", "getCanonicalName", "mock", "mock", "register", "getOrAdd", "getCanonicalName", "thenReturn", "when", "resolve", "mock", "thenReturn", "when", "generate", "any", "any", "any", "mock", "thenReturn", "when", "getValue", "thenReturn", "when", "getValue", "mock", "register", "getOrAdd", "thenReturn", "when", "resolve", "createObject", "assertEquals", "size", "route", "assertSame", "getClass", "mock", "mock", "mock", "mock", "thenReturn", "when", "getEnvironment", "thenReturn", "when", "getSequence", "thenReturn", "when", "getCurrentReceiverArguments", "thenReturn", "when", "in", "receive", "when", "doNothing", "receive", "receive", "verify", "times", "resolve", "verify", "times", "generate", "verify", "times", "any", "any", "any", "getValue", "verify", "times", "getValue", "verify", "times"]}, "focal_class": {"identifier": "ActorReceiverCreator", "superclass": "", "interfaces": "implements IRoutedObjectCreator", "fields": [{"original_string": "private FieldName name;", "modifier": "private", "type": "FieldName", "declarator": "name", "var_name": "name"}, {"original_string": "private FieldName dependency;", "modifier": "private", "type": "FieldName", "declarator": "dependency", "var_name": "dependency"}], "methods": [{"identifier": "ActorReceiverCreator", "parameters": "()", "modifiers": "public", "return": "", "signature": " ActorReceiverCreator()", "full_signature": "public  ActorReceiverCreator()", "class_method_signature": "ActorReceiverCreator.ActorReceiverCreator()", "testcase": false, "constructor": true}, {"identifier": "createObject", "parameters": "(final IRouter router, final IObject description)", "modifiers": "@Override public", "return": "void", "signature": "void createObject(final IRouter router, final IObject description)", "full_signature": "@Override public void createObject(final IRouter router, final IObject description)", "class_method_signature": "ActorReceiverCreator.createObject(final IRouter router, final IObject description)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ActorReceiverCreator/src/main/java/info/smart_tools/smartactors/message_processing/actor_receiver_creator/ActorReceiverCreator.java"}, "focal_method": {"identifier": "createObject", "parameters": "(final IRouter router, final IObject description)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void createObject(final IRouter router, final IObject description)\n            throws ObjectCreationException, InvalidArgumentException {\n        try {\n            Map<Object, IMessageReceiver> handlerReceiversMap = new HashMap<>();\n            IWrapperGenerator wg = IOC.resolve(Keys.getOrAdd(IWrapperGenerator.class.getCanonicalName()));\n            IReceiverGenerator rg = IOC.resolve(Keys.getOrAdd(IReceiverGenerator.class.getCanonicalName()));\n            Object object = IOC.resolve(\n                    Keys.getOrAdd((String) description.getValue(this.dependency)),\n                    description\n            );\n            List<Method> methods = new LinkedList<>(Arrays.asList(object.getClass().getDeclaredMethods()));\n            methods.removeIf(m -> m.isSynthetic() || !Modifier.isPublic(m.getModifiers()));\n            for (Method m : methods) {\n                Class wrapperInterface = m.getParameterTypes()[0];\n                Object wrapper = wg.generate(wrapperInterface);\n                IResolveDependencyStrategy strategy = new SingletonStrategy(wrapper);\n                IMessageReceiver handlerReceiver = rg.generate(object, strategy, m.getName());\n                handlerReceiversMap.put(m.getName(), handlerReceiver);\n            }\n            IMessageReceiver handlerRoutingReceiver = new HandlerRoutingReceiver(handlerReceiversMap);\n            IMessageReceiver actorReceiver = new ActorReceiver(handlerRoutingReceiver);\n            router.register(description.getValue(this.name) , actorReceiver);\n        } catch (Throwable e) {\n            throw new ObjectCreationException(\"Could not create receiver chain.\", e);\n        }\n    }", "signature": "void createObject(final IRouter router, final IObject description)", "full_signature": "@Override public void createObject(final IRouter router, final IObject description)", "class_method_signature": "ActorReceiverCreator.createObject(final IRouter router, final IObject description)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "getCanonicalName", "resolve", "getOrAdd", "getCanonicalName", "resolve", "getOrAdd", "getValue", "asList", "getDeclaredMethods", "getClass", "removeIf", "isSynthetic", "isPublic", "getModifiers", "getParameterTypes", "generate", "generate", "getName", "put", "getName", "register", "getValue"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}