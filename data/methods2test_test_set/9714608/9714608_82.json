{"test_class": {"identifier": "MeasureUnitUtilTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/maths/mathphysics/src/test/java/org/arakhne/afc/math/physics/MeasureUnitUtilTest.java"}, "test_case": {"identifier": "unit2milli", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void unit2milli() {\n\t\tassertInlineParameterUsage(MeasureUnitUtil.class, \"unit2milli\", double.class); //$NON-NLS-1$\n\t}", "signature": "void unit2milli()", "full_signature": "@Test public void unit2milli()", "class_method_signature": "MeasureUnitUtilTest.unit2milli()", "testcase": true, "constructor": false, "invocations": ["assertInlineParameterUsage"]}, "focal_class": {"identifier": "MeasureUnitUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "MeasureUnitUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " MeasureUnitUtil()", "full_signature": "private  MeasureUnitUtil()", "class_method_signature": "MeasureUnitUtil.MeasureUnitUtil()", "testcase": false, "constructor": true}, {"identifier": "ms2kmh", "parameters": "(double ms)", "modifiers": "@Pure @Inline(value = \"($1) * 3.6\") public static", "return": "double", "signature": "double ms2kmh(double ms)", "full_signature": "@Pure @Inline(value = \"($1) * 3.6\") public static double ms2kmh(double ms)", "class_method_signature": "MeasureUnitUtil.ms2kmh(double ms)", "testcase": false, "constructor": false}, {"identifier": "kmh2ms", "parameters": "(double kmh)", "modifiers": "@Pure @Inline(value = \"($1) / 3.6\") public static", "return": "double", "signature": "double kmh2ms(double kmh)", "full_signature": "@Pure @Inline(value = \"($1) / 3.6\") public static double kmh2ms(double kmh)", "class_method_signature": "MeasureUnitUtil.kmh2ms(double kmh)", "testcase": false, "constructor": false}, {"identifier": "m2km", "parameters": "(double m)", "modifiers": "@Pure @Inline(value = \"($1) / 1000.\") public static", "return": "double", "signature": "double m2km(double m)", "full_signature": "@Pure @Inline(value = \"($1) / 1000.\") public static double m2km(double m)", "class_method_signature": "MeasureUnitUtil.m2km(double m)", "testcase": false, "constructor": false}, {"identifier": "km2m", "parameters": "(double km)", "modifiers": "@Pure @Inline(value = \"($1) * 1000.\") public static", "return": "double", "signature": "double km2m(double km)", "full_signature": "@Pure @Inline(value = \"($1) * 1000.\") public static double km2m(double km)", "class_method_signature": "MeasureUnitUtil.km2m(double km)", "testcase": false, "constructor": false}, {"identifier": "pix2pix", "parameters": "(double pixelCoord)", "modifiers": "@Pure @Inline(value = \"(int) $2.round($1)\", imported = {Math.class}) public static", "return": "int", "signature": "int pix2pix(double pixelCoord)", "full_signature": "@Pure @Inline(value = \"(int) $2.round($1)\", imported = {Math.class}) public static int pix2pix(double pixelCoord)", "class_method_signature": "MeasureUnitUtil.pix2pix(double pixelCoord)", "testcase": false, "constructor": false}, {"identifier": "pix2pix", "parameters": "(long pixelCoord)", "modifiers": "@Pure @Inline(value = \"(int) ($1)\") public static", "return": "int", "signature": "int pix2pix(long pixelCoord)", "full_signature": "@Pure @Inline(value = \"(int) ($1)\") public static int pix2pix(long pixelCoord)", "class_method_signature": "MeasureUnitUtil.pix2pix(long pixelCoord)", "testcase": false, "constructor": false}, {"identifier": "pix2pix", "parameters": "(float pixel_coord)", "modifiers": "@Pure @Inline(value = \"$2.round($1)\", imported = {Math.class}) public static", "return": "int", "signature": "int pix2pix(float pixel_coord)", "full_signature": "@Pure @Inline(value = \"$2.round($1)\", imported = {Math.class}) public static int pix2pix(float pixel_coord)", "class_method_signature": "MeasureUnitUtil.pix2pix(float pixel_coord)", "testcase": false, "constructor": false}, {"identifier": "unit2nano", "parameters": "(double unit)", "modifiers": "@Pure @Inline(value = \"($1) / 1e-9\") public static", "return": "double", "signature": "double unit2nano(double unit)", "full_signature": "@Pure @Inline(value = \"($1) / 1e-9\") public static double unit2nano(double unit)", "class_method_signature": "MeasureUnitUtil.unit2nano(double unit)", "testcase": false, "constructor": false}, {"identifier": "nano2unit", "parameters": "(double nano)", "modifiers": "@Pure @Inline(value = \"($1) * 1e-9\") public static", "return": "double", "signature": "double nano2unit(double nano)", "full_signature": "@Pure @Inline(value = \"($1) * 1e-9\") public static double nano2unit(double nano)", "class_method_signature": "MeasureUnitUtil.nano2unit(double nano)", "testcase": false, "constructor": false}, {"identifier": "unit2micro", "parameters": "(double unit)", "modifiers": "@Pure @Inline(value = \"($1) / 1e-6\") public static", "return": "double", "signature": "double unit2micro(double unit)", "full_signature": "@Pure @Inline(value = \"($1) / 1e-6\") public static double unit2micro(double unit)", "class_method_signature": "MeasureUnitUtil.unit2micro(double unit)", "testcase": false, "constructor": false}, {"identifier": "micro2unit", "parameters": "(double micro)", "modifiers": "@Pure @Inline(value = \"($1) * 1e-6\") public static", "return": "double", "signature": "double micro2unit(double micro)", "full_signature": "@Pure @Inline(value = \"($1) * 1e-6\") public static double micro2unit(double micro)", "class_method_signature": "MeasureUnitUtil.micro2unit(double micro)", "testcase": false, "constructor": false}, {"identifier": "unit2milli", "parameters": "(double unit)", "modifiers": "@Pure @Inline(value = \"($1) / 1e-3\") public static", "return": "double", "signature": "double unit2milli(double unit)", "full_signature": "@Pure @Inline(value = \"($1) / 1e-3\") public static double unit2milli(double unit)", "class_method_signature": "MeasureUnitUtil.unit2milli(double unit)", "testcase": false, "constructor": false}, {"identifier": "milli2unit", "parameters": "(double milli)", "modifiers": "@Pure @Inline(value = \"($1) * 1e-3\") public static", "return": "double", "signature": "double milli2unit(double milli)", "full_signature": "@Pure @Inline(value = \"($1) * 1e-3\") public static double milli2unit(double milli)", "class_method_signature": "MeasureUnitUtil.milli2unit(double milli)", "testcase": false, "constructor": false}, {"identifier": "milli2micro", "parameters": "(double milli)", "modifiers": "@Pure @Inline(value = \"($1) / 1e-3\") public static", "return": "double", "signature": "double milli2micro(double milli)", "full_signature": "@Pure @Inline(value = \"($1) / 1e-3\") public static double milli2micro(double milli)", "class_method_signature": "MeasureUnitUtil.milli2micro(double milli)", "testcase": false, "constructor": false}, {"identifier": "milli2nano", "parameters": "(double milli)", "modifiers": "@Pure @Inline(value = \"($1) / 1e-6\") public static", "return": "double", "signature": "double milli2nano(double milli)", "full_signature": "@Pure @Inline(value = \"($1) / 1e-6\") public static double milli2nano(double milli)", "class_method_signature": "MeasureUnitUtil.milli2nano(double milli)", "testcase": false, "constructor": false}, {"identifier": "micro2nano", "parameters": "(double milli)", "modifiers": "@Pure @Inline(value = \"($1) / 1e-3\") public static", "return": "double", "signature": "double micro2nano(double milli)", "full_signature": "@Pure @Inline(value = \"($1) / 1e-3\") public static double micro2nano(double milli)", "class_method_signature": "MeasureUnitUtil.micro2nano(double milli)", "testcase": false, "constructor": false}, {"identifier": "micro2milli", "parameters": "(double micro)", "modifiers": "@Pure @Inline(value = \"($1) * 1e-3\") public static", "return": "double", "signature": "double micro2milli(double micro)", "full_signature": "@Pure @Inline(value = \"($1) * 1e-3\") public static double micro2milli(double micro)", "class_method_signature": "MeasureUnitUtil.micro2milli(double micro)", "testcase": false, "constructor": false}, {"identifier": "nano2micro", "parameters": "(double nano)", "modifiers": "@Pure @Inline(value = \"($1) * 1e-3\") public static", "return": "double", "signature": "double nano2micro(double nano)", "full_signature": "@Pure @Inline(value = \"($1) * 1e-3\") public static double nano2micro(double nano)", "class_method_signature": "MeasureUnitUtil.nano2micro(double nano)", "testcase": false, "constructor": false}, {"identifier": "nano2milli", "parameters": "(double nano)", "modifiers": "@Pure @Inline(value = \"($1) * 1e-6\") public static", "return": "double", "signature": "double nano2milli(double nano)", "full_signature": "@Pure @Inline(value = \"($1) * 1e-6\") public static double nano2milli(double nano)", "class_method_signature": "MeasureUnitUtil.nano2milli(double nano)", "testcase": false, "constructor": false}, {"identifier": "m2fh", "parameters": "(double m)", "modifiers": "@Pure @Inline(value = \"($1) * 0.5468\") public static", "return": "double", "signature": "double m2fh(double m)", "full_signature": "@Pure @Inline(value = \"($1) * 0.5468\") public static double m2fh(double m)", "class_method_signature": "MeasureUnitUtil.m2fh(double m)", "testcase": false, "constructor": false}, {"identifier": "ft2fh", "parameters": "(double ft)", "modifiers": "@Pure @Inline(value = \"($1) * 0.1667\") public static", "return": "double", "signature": "double ft2fh(double ft)", "full_signature": "@Pure @Inline(value = \"($1) * 0.1667\") public static double ft2fh(double ft)", "class_method_signature": "MeasureUnitUtil.ft2fh(double ft)", "testcase": false, "constructor": false}, {"identifier": "in2fh", "parameters": "(double in)", "modifiers": "@Pure @Inline(value = \"($1) / 72.\") public static", "return": "double", "signature": "double in2fh(double in)", "full_signature": "@Pure @Inline(value = \"($1) / 72.\") public static double in2fh(double in)", "class_method_signature": "MeasureUnitUtil.in2fh(double in)", "testcase": false, "constructor": false}, {"identifier": "m2ft", "parameters": "(double m)", "modifiers": "@Pure @Inline(value = \"($1) * 0.3048\") public static", "return": "double", "signature": "double m2ft(double m)", "full_signature": "@Pure @Inline(value = \"($1) * 0.3048\") public static double m2ft(double m)", "class_method_signature": "MeasureUnitUtil.m2ft(double m)", "testcase": false, "constructor": false}, {"identifier": "in2ft", "parameters": "(double in)", "modifiers": "@Pure @Inline(value = \"($1 / 12)\") public static", "return": "double", "signature": "double in2ft(double in)", "full_signature": "@Pure @Inline(value = \"($1 / 12)\") public static double in2ft(double in)", "class_method_signature": "MeasureUnitUtil.in2ft(double in)", "testcase": false, "constructor": false}, {"identifier": "fh2ft", "parameters": "(double fh)", "modifiers": "@Pure @Inline(value = \"($1) / 0.1667\") public static", "return": "double", "signature": "double fh2ft(double fh)", "full_signature": "@Pure @Inline(value = \"($1) / 0.1667\") public static double fh2ft(double fh)", "class_method_signature": "MeasureUnitUtil.fh2ft(double fh)", "testcase": false, "constructor": false}, {"identifier": "m2in", "parameters": "(double m)", "modifiers": "@Pure @Inline(value = \"($1) * 0.025\") public static", "return": "double", "signature": "double m2in(double m)", "full_signature": "@Pure @Inline(value = \"($1) * 0.025\") public static double m2in(double m)", "class_method_signature": "MeasureUnitUtil.m2in(double m)", "testcase": false, "constructor": false}, {"identifier": "ft2in", "parameters": "(double ft)", "modifiers": "@Pure @Inline(value = \"($1) * 12.0\") public static", "return": "double", "signature": "double ft2in(double ft)", "full_signature": "@Pure @Inline(value = \"($1) * 12.0\") public static double ft2in(double ft)", "class_method_signature": "MeasureUnitUtil.ft2in(double ft)", "testcase": false, "constructor": false}, {"identifier": "inchToMetric", "parameters": "(double i)", "modifiers": "@Pure @Inline(value = \"($1) / 0.3937\") public static", "return": "double", "signature": "double inchToMetric(double i)", "full_signature": "@Pure @Inline(value = \"($1) / 0.3937\") public static double inchToMetric(double i)", "class_method_signature": "MeasureUnitUtil.inchToMetric(double i)", "testcase": false, "constructor": false}, {"identifier": "metricToInch", "parameters": "(double m)", "modifiers": "@Pure @Inline(value = \"($1) * 0.3937\") public static", "return": "double", "signature": "double metricToInch(double m)", "full_signature": "@Pure @Inline(value = \"($1) * 0.3937\") public static double metricToInch(double m)", "class_method_signature": "MeasureUnitUtil.metricToInch(double m)", "testcase": false, "constructor": false}, {"identifier": "toSeconds", "parameters": "(double value, TimeUnit inputUnit)", "modifiers": "@Pure public static", "return": "double", "signature": "double toSeconds(double value, TimeUnit inputUnit)", "full_signature": "@Pure public static double toSeconds(double value, TimeUnit inputUnit)", "class_method_signature": "MeasureUnitUtil.toSeconds(double value, TimeUnit inputUnit)", "testcase": false, "constructor": false}, {"identifier": "toMeters", "parameters": "(double value, SpaceUnit inputUnit)", "modifiers": "@Pure @SuppressWarnings(\"checkstyle:returncount\") public static", "return": "double", "signature": "double toMeters(double value, SpaceUnit inputUnit)", "full_signature": "@Pure @SuppressWarnings(\"checkstyle:returncount\") public static double toMeters(double value, SpaceUnit inputUnit)", "class_method_signature": "MeasureUnitUtil.toMeters(double value, SpaceUnit inputUnit)", "testcase": false, "constructor": false}, {"identifier": "fromMeters", "parameters": "(double value, SpaceUnit outputUnit)", "modifiers": "@Pure @SuppressWarnings(\"checkstyle:returncount\") public static", "return": "double", "signature": "double fromMeters(double value, SpaceUnit outputUnit)", "full_signature": "@Pure @SuppressWarnings(\"checkstyle:returncount\") public static double fromMeters(double value, SpaceUnit outputUnit)", "class_method_signature": "MeasureUnitUtil.fromMeters(double value, SpaceUnit outputUnit)", "testcase": false, "constructor": false}, {"identifier": "fromSeconds", "parameters": "(double value, TimeUnit outputUnit)", "modifiers": "@Pure public static", "return": "double", "signature": "double fromSeconds(double value, TimeUnit outputUnit)", "full_signature": "@Pure public static double fromSeconds(double value, TimeUnit outputUnit)", "class_method_signature": "MeasureUnitUtil.fromSeconds(double value, TimeUnit outputUnit)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(long value, TimeUnit inputUnit, TimeUnit outputUnit)", "modifiers": "@Pure @Inline(value = \"$4.fromSeconds(MeasureUnitUtil.toSeconds(($1), ($2)), ($3))\", imported = {MeasureUnitUtil.class}) public static", "return": "double", "signature": "double convert(long value, TimeUnit inputUnit, TimeUnit outputUnit)", "full_signature": "@Pure @Inline(value = \"$4.fromSeconds(MeasureUnitUtil.toSeconds(($1), ($2)), ($3))\", imported = {MeasureUnitUtil.class}) public static double convert(long value, TimeUnit inputUnit, TimeUnit outputUnit)", "class_method_signature": "MeasureUnitUtil.convert(long value, TimeUnit inputUnit, TimeUnit outputUnit)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(double value, TimeUnit inputUnit, TimeUnit outputUnit)", "modifiers": "@Pure @Inline(value = \"$4.fromSeconds(MeasureUnitUtil.toSeconds(($1), ($2)), ($3))\", imported = {MeasureUnitUtil.class}) public static", "return": "double", "signature": "double convert(double value, TimeUnit inputUnit, TimeUnit outputUnit)", "full_signature": "@Pure @Inline(value = \"$4.fromSeconds(MeasureUnitUtil.toSeconds(($1), ($2)), ($3))\", imported = {MeasureUnitUtil.class}) public static double convert(double value, TimeUnit inputUnit, TimeUnit outputUnit)", "class_method_signature": "MeasureUnitUtil.convert(double value, TimeUnit inputUnit, TimeUnit outputUnit)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(double value, SpeedUnit inputUnit, SpeedUnit outputUnit)", "modifiers": "@Pure @Inline(value = \"$4.fromMetersPerSecond(MeasureUnitUtil.toMetersPerSecond(($1), ($2)), ($3))\", imported = {MeasureUnitUtil.class}) public static", "return": "double", "signature": "double convert(double value, SpeedUnit inputUnit, SpeedUnit outputUnit)", "full_signature": "@Pure @Inline(value = \"$4.fromMetersPerSecond(MeasureUnitUtil.toMetersPerSecond(($1), ($2)), ($3))\", imported = {MeasureUnitUtil.class}) public static double convert(double value, SpeedUnit inputUnit, SpeedUnit outputUnit)", "class_method_signature": "MeasureUnitUtil.convert(double value, SpeedUnit inputUnit, SpeedUnit outputUnit)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(double value, AngularUnit inputUnit, AngularUnit outputUnit)", "modifiers": "@Pure @Inline(value = \"$4.fromRadiansPerSecond(MeasureUnitUtil.toRadiansPerSecond(($1), ($2)), ($3))\", imported = {MeasureUnitUtil.class}) public static", "return": "double", "signature": "double convert(double value, AngularUnit inputUnit, AngularUnit outputUnit)", "full_signature": "@Pure @Inline(value = \"$4.fromRadiansPerSecond(MeasureUnitUtil.toRadiansPerSecond(($1), ($2)), ($3))\", imported = {MeasureUnitUtil.class}) public static double convert(double value, AngularUnit inputUnit, AngularUnit outputUnit)", "class_method_signature": "MeasureUnitUtil.convert(double value, AngularUnit inputUnit, AngularUnit outputUnit)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(double value, SpaceUnit inputUnit, SpaceUnit outputUnit)", "modifiers": "@Pure @Inline(value = \"$4.fromMeters(MeasureUnitUtil.toMeters(($1), ($2)), ($3))\", imported = {MeasureUnitUtil.class}) public static", "return": "double", "signature": "double convert(double value, SpaceUnit inputUnit, SpaceUnit outputUnit)", "full_signature": "@Pure @Inline(value = \"$4.fromMeters(MeasureUnitUtil.toMeters(($1), ($2)), ($3))\", imported = {MeasureUnitUtil.class}) public static double convert(double value, SpaceUnit inputUnit, SpaceUnit outputUnit)", "class_method_signature": "MeasureUnitUtil.convert(double value, SpaceUnit inputUnit, SpaceUnit outputUnit)", "testcase": false, "constructor": false}, {"identifier": "toMetersPerSecond", "parameters": "(double value, SpeedUnit inputUnit)", "modifiers": "@Pure public static", "return": "double", "signature": "double toMetersPerSecond(double value, SpeedUnit inputUnit)", "full_signature": "@Pure public static double toMetersPerSecond(double value, SpeedUnit inputUnit)", "class_method_signature": "MeasureUnitUtil.toMetersPerSecond(double value, SpeedUnit inputUnit)", "testcase": false, "constructor": false}, {"identifier": "toRadiansPerSecond", "parameters": "(double value, AngularUnit inputUnit)", "modifiers": "@Pure public static", "return": "double", "signature": "double toRadiansPerSecond(double value, AngularUnit inputUnit)", "full_signature": "@Pure public static double toRadiansPerSecond(double value, AngularUnit inputUnit)", "class_method_signature": "MeasureUnitUtil.toRadiansPerSecond(double value, AngularUnit inputUnit)", "testcase": false, "constructor": false}, {"identifier": "fromMetersPerSecond", "parameters": "(double value, SpeedUnit outputUnit)", "modifiers": "@Pure public static", "return": "double", "signature": "double fromMetersPerSecond(double value, SpeedUnit outputUnit)", "full_signature": "@Pure public static double fromMetersPerSecond(double value, SpeedUnit outputUnit)", "class_method_signature": "MeasureUnitUtil.fromMetersPerSecond(double value, SpeedUnit outputUnit)", "testcase": false, "constructor": false}, {"identifier": "fromRadiansPerSecond", "parameters": "(double value, AngularUnit outputUnit)", "modifiers": "@Pure public static", "return": "double", "signature": "double fromRadiansPerSecond(double value, AngularUnit outputUnit)", "full_signature": "@Pure public static double fromRadiansPerSecond(double value, AngularUnit outputUnit)", "class_method_signature": "MeasureUnitUtil.fromRadiansPerSecond(double value, AngularUnit outputUnit)", "testcase": false, "constructor": false}, {"identifier": "getSmallestUnit", "parameters": "(double amount, SpaceUnit unit)", "modifiers": "@Pure public static", "return": "SpaceUnit", "signature": "SpaceUnit getSmallestUnit(double amount, SpaceUnit unit)", "full_signature": "@Pure public static SpaceUnit getSmallestUnit(double amount, SpaceUnit unit)", "class_method_signature": "MeasureUnitUtil.getSmallestUnit(double amount, SpaceUnit unit)", "testcase": false, "constructor": false}], "file": "core/maths/mathphysics/src/main/java/org/arakhne/afc/math/physics/MeasureUnitUtil.java"}, "focal_method": {"identifier": "unit2milli", "parameters": "(double unit)", "modifiers": "@Pure @Inline(value = \"($1) / 1e-3\") public static", "return": "double", "body": "@Pure\n\t@Inline(value = \"($1) / 1e-3\")\n\tpublic static double unit2milli(double unit) {\n\t\treturn unit / 1e-3;\n\t}", "signature": "double unit2milli(double unit)", "full_signature": "@Pure @Inline(value = \"($1) / 1e-3\") public static double unit2milli(double unit)", "class_method_signature": "MeasureUnitUtil.unit2milli(double unit)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}