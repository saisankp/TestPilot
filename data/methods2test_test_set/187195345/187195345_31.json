{"test_class": {"identifier": "OpenLREncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int LARGE_OFFSET = 17000;", "modifier": "private static final", "type": "int", "declarator": "LARGE_OFFSET = 17000", "var_name": "LARGE_OFFSET"}, {"original_string": "private static final int EXPECTED_NR_LRPS_LONG_LINE = 5;", "modifier": "private static final", "type": "int", "declarator": "EXPECTED_NR_LRPS_LONG_LINE = 5", "var_name": "EXPECTED_NR_LRPS_LONG_LINE"}, {"original_string": "private static final long[] LONG_LINE_IDS = {19, 24, 25};", "modifier": "private static final", "type": "long[]", "declarator": "LONG_LINE_IDS = {19, 24, 25}", "var_name": "LONG_LINE_IDS"}, {"original_string": "private Mockery mockery = new Mockery();", "modifier": "private", "type": "Mockery", "declarator": "mockery = new Mockery()", "var_name": "mockery"}, {"original_string": "private TestData td = TestData.getInstance();", "modifier": "private", "type": "TestData", "declarator": "td = TestData.getInstance()", "var_name": "td"}], "file": "encoder/src/test/java/openlr/encoder/OpenLREncoderTest.java"}, "test_case": {"identifier": "testnotConnectedLocation", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testnotConnectedLocation() {\n\n        List<LocationReferenceHolder> locationRef = null;\n        try {\n            OpenLREncoder encoder = new OpenLREncoder();\n            OpenLREncoderParameter params = new OpenLREncoderParameter.Builder().with(td.getMapDatabase()).with(td.getConfiguration()).buildParameter();\n            locationRef = encoder.encodeLocations(params,\n                    Arrays.asList(td.getNotConnectedLocation()));\n            assertFalse(locationRef.get(0).isValid());\n\n        } catch (OpenLRProcessingException e) {\n            fail(\"Encoding location failed with exception: \" + e.getErrorCode(),\n                    e);\n        }\n    }", "signature": "void testnotConnectedLocation()", "full_signature": "@Test public final void testnotConnectedLocation()", "class_method_signature": "OpenLREncoderTest.testnotConnectedLocation()", "testcase": true, "constructor": false, "invocations": ["buildParameter", "with", "with", "getMapDatabase", "getConfiguration", "encodeLocations", "asList", "getNotConnectedLocation", "assertFalse", "isValid", "get", "fail", "getErrorCode"]}, "focal_class": {"identifier": "OpenLREncoder", "superclass": "", "interfaces": "implements openlr.OpenLREncoder", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(OpenLREncoder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(OpenLREncoder.class)", "var_name": "LOG"}, {"original_string": "private final Version VERSION = VersionHelper.getVersion(\"encoder\");", "modifier": "private final", "type": "Version", "declarator": "VERSION = VersionHelper.getVersion(\"encoder\")", "var_name": "VERSION"}], "methods": [{"identifier": "getPhysicalEncoderServices", "parameters": "()", "modifiers": "public static", "return": "List<PhysicalEncoder>", "signature": "List<PhysicalEncoder> getPhysicalEncoderServices()", "full_signature": "public static List<PhysicalEncoder> getPhysicalEncoderServices()", "class_method_signature": "OpenLREncoder.getPhysicalEncoderServices()", "testcase": false, "constructor": false}, {"identifier": "encodeLocations", "parameters": "(\n            final OpenLREncoderParameter parameter, final List<Location> loc)", "modifiers": "@Override public", "return": "List<LocationReferenceHolder>", "signature": "List<LocationReferenceHolder> encodeLocations(\n            final OpenLREncoderParameter parameter, final List<Location> loc)", "full_signature": "@Override public List<LocationReferenceHolder> encodeLocations(\n            final OpenLREncoderParameter parameter, final List<Location> loc)", "class_method_signature": "OpenLREncoder.encodeLocations(\n            final OpenLREncoderParameter parameter, final List<Location> loc)", "testcase": false, "constructor": false}, {"identifier": "encodeLocation", "parameters": "(\n            final OpenLREncoderParameter parameter, final Location loc)", "modifiers": "@Override public", "return": "LocationReferenceHolder", "signature": "LocationReferenceHolder encodeLocation(\n            final OpenLREncoderParameter parameter, final Location loc)", "full_signature": "@Override public LocationReferenceHolder encodeLocation(\n            final OpenLREncoderParameter parameter, final Location loc)", "class_method_signature": "OpenLREncoder.encodeLocation(\n            final OpenLREncoderParameter parameter, final Location loc)", "testcase": false, "constructor": false}, {"identifier": "encodeLocation", "parameters": "(\n            final OpenLREncoderParameter parameter,\n            final OpenLREncoderProperties properties, final Location loc)", "modifiers": "private", "return": "LocationReferenceHolder", "signature": "LocationReferenceHolder encodeLocation(\n            final OpenLREncoderParameter parameter,\n            final OpenLREncoderProperties properties, final Location loc)", "full_signature": "private LocationReferenceHolder encodeLocation(\n            final OpenLREncoderParameter parameter,\n            final OpenLREncoderProperties properties, final Location loc)", "class_method_signature": "OpenLREncoder.encodeLocation(\n            final OpenLREncoderParameter parameter,\n            final OpenLREncoderProperties properties, final Location loc)", "testcase": false, "constructor": false}, {"identifier": "getMajorVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMajorVersion()", "full_signature": "@Override public String getMajorVersion()", "class_method_signature": "OpenLREncoder.getMajorVersion()", "testcase": false, "constructor": false}, {"identifier": "getMinorVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMinorVersion()", "full_signature": "@Override public String getMinorVersion()", "class_method_signature": "OpenLREncoder.getMinorVersion()", "testcase": false, "constructor": false}, {"identifier": "getPatchVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPatchVersion()", "full_signature": "@Override public String getPatchVersion()", "class_method_signature": "OpenLREncoder.getPatchVersion()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVersion()", "full_signature": "@Override public String getVersion()", "class_method_signature": "OpenLREncoder.getVersion()", "testcase": false, "constructor": false}], "file": "encoder/src/main/java/openlr/encoder/OpenLREncoder.java"}, "focal_method": {"identifier": "encodeLocations", "parameters": "(\n            final OpenLREncoderParameter parameter, final List<Location> loc)", "modifiers": "@Override public", "return": "List<LocationReferenceHolder>", "body": "@Override\n    public List<LocationReferenceHolder> encodeLocations(\n            final OpenLREncoderParameter parameter, final List<Location> loc)\n            throws OpenLRProcessingException {\n        if (loc == null || loc.isEmpty()) {\n            LOG.error(\"No location provided!\");\n            throw new OpenLREncoderProcessingException(\n                    EncoderProcessingError.INVALID_PARAMETER);\n        }\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"OpenLR encoding of \" + loc.size() + \" locations started\");\n        }\n        List<LocationReferenceHolder> llr = new ArrayList<LocationReferenceHolder>();\n        OpenLREncoderProperties properties = new OpenLREncoderProperties(parameter.getConfiguration(), parameter.getPhysicalEncoders());\n        // encode every single location\n        for (Location l : loc) {\n            LocationReferenceHolder lr = encodeLocation(parameter, properties, l);\n\n            llr.add(lr);\n        }\n        return llr;\n    }", "signature": "List<LocationReferenceHolder> encodeLocations(\n            final OpenLREncoderParameter parameter, final List<Location> loc)", "full_signature": "@Override public List<LocationReferenceHolder> encodeLocations(\n            final OpenLREncoderParameter parameter, final List<Location> loc)", "class_method_signature": "OpenLREncoder.encodeLocations(\n            final OpenLREncoderParameter parameter, final List<Location> loc)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "error", "isDebugEnabled", "debug", "size", "getConfiguration", "getPhysicalEncoders", "encodeLocation", "add"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}