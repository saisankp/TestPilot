{"test_class": {"identifier": "DifferTest", "superclass": "", "interfaces": "", "fields": [], "file": "spark-job/src/test/java/org/apache/cassandra/diff/DifferTest.java"}, "test_case": {"identifier": "filterTaskStatusForTables", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void filterTaskStatusForTables() {\n        // according to the journal:\n        // * t1 is already completed\n        // * t2 is started and has reported some progress, but has not completed\n        // * t3 has not reported any progress\n        DiffJob.Split split = new DiffJob.Split(1, 1, BigInteger.ONE, BigInteger.TEN);\n        Iterable<KeyspaceTablePair> tables = Lists.newArrayList(ksTbl(\"t1\"), ksTbl(\"t2\"), ksTbl(\"t3\"));\n        Function<KeyspaceTablePair, DiffJob.TaskStatus> journal = (keyspaceTable) -> {\n            switch (keyspaceTable.table) {\n                case \"t1\":\n                    return new DiffJob.TaskStatus(split.end, RangeStats.withValues(6, 6, 6, 6, 6, 6, 6, 6, 6));\n                case \"t2\":\n                    return new DiffJob.TaskStatus(BigInteger.valueOf(5L), RangeStats.withValues(5, 5, 5, 5, 5, 5, 5, 5, 5));\n                case \"t3\":\n                    return DiffJob.TaskStatus.EMPTY;\n                default:\n                    throw new AssertionError();\n            }\n        };\n\n        Map<KeyspaceTablePair, DiffJob.TaskStatus> filtered = Differ.filterTables(tables, split, journal, false);\n        assertEquals(2, filtered.keySet().size());\n        assertEquals(RangeStats.withValues(5, 5, 5, 5, 5, 5, 5, 5, 5), filtered.get(ksTbl(\"t2\")).stats);\n        assertEquals(BigInteger.valueOf(5L), filtered.get(ksTbl(\"t2\")).lastToken);\n        assertEquals(RangeStats.newStats(), filtered.get(ksTbl(\"t3\")).stats);\n        assertNull(filtered.get(ksTbl(\"t3\")).lastToken);\n\n        // if re-running (part of) a job because of failures or problematic partitions, we want to\n        // ignore the status of completed tasks and re-run them anyway as only specified tokens will\n        // be processed - so t1 should be included now\n        filtered = Differ.filterTables(tables, split, journal, true);\n        assertEquals(3, filtered.keySet().size());\n        assertEquals(RangeStats.withValues(6, 6, 6, 6, 6, 6, 6, 6, 6), filtered.get(ksTbl(\"t1\")).stats);\n        assertEquals(split.end, filtered.get(ksTbl(\"t1\")).lastToken);\n        assertEquals(RangeStats.withValues(5, 5, 5, 5, 5, 5, 5, 5, 5), filtered.get(ksTbl(\"t2\")).stats);\n        assertEquals(BigInteger.valueOf(5L), filtered.get(ksTbl(\"t2\")).lastToken);\n        assertEquals(RangeStats.newStats(), filtered.get(ksTbl(\"t3\")).stats);\n        assertNull(filtered.get(ksTbl(\"t3\")).lastToken);\n    }", "signature": "void filterTaskStatusForTables()", "full_signature": "@Test public void filterTaskStatusForTables()", "class_method_signature": "DifferTest.filterTaskStatusForTables()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "ksTbl", "ksTbl", "ksTbl", "withValues", "valueOf", "withValues", "filterTables", "assertEquals", "size", "keySet", "assertEquals", "withValues", "get", "ksTbl", "assertEquals", "valueOf", "get", "ksTbl", "assertEquals", "newStats", "get", "ksTbl", "assertNull", "get", "ksTbl", "filterTables", "assertEquals", "size", "keySet", "assertEquals", "withValues", "get", "ksTbl", "assertEquals", "get", "ksTbl", "assertEquals", "withValues", "get", "ksTbl", "assertEquals", "valueOf", "get", "ksTbl", "assertEquals", "newStats", "get", "ksTbl", "assertNull", "get", "ksTbl"]}, "focal_class": {"identifier": "Differ", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(Differ.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Differ.class)", "var_name": "logger"}, {"original_string": "private static final MetricRegistry metrics = new MetricRegistry();", "modifier": "private static final", "type": "MetricRegistry", "declarator": "metrics = new MetricRegistry()", "var_name": "metrics"}, {"original_string": "private static final int COMPARISON_THREADS = 8;", "modifier": "private static final", "type": "int", "declarator": "COMPARISON_THREADS = 8", "var_name": "COMPARISON_THREADS"}, {"original_string": "private static final ComparisonExecutor COMPARISON_EXECUTOR = ComparisonExecutor.newExecutor(COMPARISON_THREADS, metrics);", "modifier": "private static final", "type": "ComparisonExecutor", "declarator": "COMPARISON_EXECUTOR = ComparisonExecutor.newExecutor(COMPARISON_THREADS, metrics)", "var_name": "COMPARISON_EXECUTOR"}, {"original_string": "private final UUID jobId;", "modifier": "private final", "type": "UUID", "declarator": "jobId", "var_name": "jobId"}, {"original_string": "private final DiffJob.Split split;", "modifier": "private final", "type": "DiffJob.Split", "declarator": "split", "var_name": "split"}, {"original_string": "private final TokenHelper tokenHelper;", "modifier": "private final", "type": "TokenHelper", "declarator": "tokenHelper", "var_name": "tokenHelper"}, {"original_string": "private final List<KeyspaceTablePair> keyspaceTables;", "modifier": "private final", "type": "List<KeyspaceTablePair>", "declarator": "keyspaceTables", "var_name": "keyspaceTables"}, {"original_string": "private final RateLimiter rateLimiter;", "modifier": "private final", "type": "RateLimiter", "declarator": "rateLimiter", "var_name": "rateLimiter"}, {"original_string": "private final DiffJob.TrackerProvider trackerProvider;", "modifier": "private final", "type": "DiffJob.TrackerProvider", "declarator": "trackerProvider", "var_name": "trackerProvider"}, {"original_string": "private final double reverseReadProbability;", "modifier": "private final", "type": "double", "declarator": "reverseReadProbability", "var_name": "reverseReadProbability"}, {"original_string": "private final SpecificTokens specificTokens;", "modifier": "private final", "type": "SpecificTokens", "declarator": "specificTokens", "var_name": "specificTokens"}, {"original_string": "private final RetryStrategyProvider retryStrategyProvider;", "modifier": "private final", "type": "RetryStrategyProvider", "declarator": "retryStrategyProvider", "var_name": "retryStrategyProvider"}, {"original_string": "private static DiffCluster srcDiffCluster;", "modifier": "private static", "type": "DiffCluster", "declarator": "srcDiffCluster", "var_name": "srcDiffCluster"}, {"original_string": "private static DiffCluster targetDiffCluster;", "modifier": "private static", "type": "DiffCluster", "declarator": "targetDiffCluster", "var_name": "targetDiffCluster"}, {"original_string": "private static Session journalSession;", "modifier": "private static", "type": "Session", "declarator": "journalSession", "var_name": "journalSession"}], "methods": [{"identifier": "Differ", "parameters": "(JobConfiguration config,\n                  DiffJob.Params params,\n                  int perExecutorRateLimit,\n                  DiffJob.Split split,\n                  TokenHelper tokenHelper,\n                  ClusterProvider sourceProvider,\n                  ClusterProvider targetProvider,\n                  ClusterProvider metadataProvider,\n                  DiffJob.TrackerProvider trackerProvider)", "modifiers": "public", "return": "", "signature": " Differ(JobConfiguration config,\n                  DiffJob.Params params,\n                  int perExecutorRateLimit,\n                  DiffJob.Split split,\n                  TokenHelper tokenHelper,\n                  ClusterProvider sourceProvider,\n                  ClusterProvider targetProvider,\n                  ClusterProvider metadataProvider,\n                  DiffJob.TrackerProvider trackerProvider)", "full_signature": "public  Differ(JobConfiguration config,\n                  DiffJob.Params params,\n                  int perExecutorRateLimit,\n                  DiffJob.Split split,\n                  TokenHelper tokenHelper,\n                  ClusterProvider sourceProvider,\n                  ClusterProvider targetProvider,\n                  ClusterProvider metadataProvider,\n                  DiffJob.TrackerProvider trackerProvider)", "class_method_signature": "Differ.Differ(JobConfiguration config,\n                  DiffJob.Params params,\n                  int perExecutorRateLimit,\n                  DiffJob.Split split,\n                  TokenHelper tokenHelper,\n                  ClusterProvider sourceProvider,\n                  ClusterProvider targetProvider,\n                  ClusterProvider metadataProvider,\n                  DiffJob.TrackerProvider trackerProvider)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "Map<KeyspaceTablePair, RangeStats>", "signature": "Map<KeyspaceTablePair, RangeStats> run()", "full_signature": "public Map<KeyspaceTablePair, RangeStats> run()", "class_method_signature": "Differ.run()", "testcase": false, "constructor": false}, {"identifier": "diffTable", "parameters": "(final DiffContext context,\n                                final BiConsumer<Throwable, BigInteger> partitionErrorReporter,\n                                final BiConsumer<MismatchType, BigInteger> mismatchReporter,\n                                final BiConsumer<RangeStats, BigInteger> journal)", "modifiers": "public", "return": "RangeStats", "signature": "RangeStats diffTable(final DiffContext context,\n                                final BiConsumer<Throwable, BigInteger> partitionErrorReporter,\n                                final BiConsumer<MismatchType, BigInteger> mismatchReporter,\n                                final BiConsumer<RangeStats, BigInteger> journal)", "full_signature": "public RangeStats diffTable(final DiffContext context,\n                                final BiConsumer<Throwable, BigInteger> partitionErrorReporter,\n                                final BiConsumer<MismatchType, BigInteger> mismatchReporter,\n                                final BiConsumer<RangeStats, BigInteger> journal)", "class_method_signature": "Differ.diffTable(final DiffContext context,\n                                final BiConsumer<Throwable, BigInteger> partitionErrorReporter,\n                                final BiConsumer<MismatchType, BigInteger> mismatchReporter,\n                                final BiConsumer<RangeStats, BigInteger> journal)", "testcase": false, "constructor": false}, {"identifier": "fetchRows", "parameters": "(DiffContext context, PartitionKey key, boolean shouldReverse, DiffCluster.Type type)", "modifiers": "private", "return": "Iterator<Row>", "signature": "Iterator<Row> fetchRows(DiffContext context, PartitionKey key, boolean shouldReverse, DiffCluster.Type type)", "full_signature": "private Iterator<Row> fetchRows(DiffContext context, PartitionKey key, boolean shouldReverse, DiffCluster.Type type)", "class_method_signature": "Differ.fetchRows(DiffContext context, PartitionKey key, boolean shouldReverse, DiffCluster.Type type)", "testcase": false, "constructor": false}, {"identifier": "filterTables", "parameters": "(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted)", "modifiers": "@VisibleForTesting static", "return": "Map<KeyspaceTablePair, DiffJob.TaskStatus>", "signature": "Map<KeyspaceTablePair, DiffJob.TaskStatus> filterTables(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted)", "full_signature": "@VisibleForTesting static Map<KeyspaceTablePair, DiffJob.TaskStatus> filterTables(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted)", "class_method_signature": "Differ.filterTables(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted)", "testcase": false, "constructor": false}, {"identifier": "validateTableSpecs", "parameters": "(TableSpec source, TableSpec target)", "modifiers": "static", "return": "void", "signature": "void validateTableSpecs(TableSpec source, TableSpec target)", "full_signature": "static void validateTableSpecs(TableSpec source, TableSpec target)", "class_method_signature": "Differ.validateTableSpecs(TableSpec source, TableSpec target)", "testcase": false, "constructor": false}, {"identifier": "validateRange", "parameters": "(BigInteger start, BigInteger end, TokenHelper tokens)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void validateRange(BigInteger start, BigInteger end, TokenHelper tokens)", "full_signature": "@VisibleForTesting static void validateRange(BigInteger start, BigInteger end, TokenHelper tokens)", "class_method_signature": "Differ.validateRange(BigInteger start, BigInteger end, TokenHelper tokens)", "testcase": false, "constructor": false}, {"identifier": "accumulate", "parameters": "(Map<KeyspaceTablePair, RangeStats> stats, Map<KeyspaceTablePair, RangeStats> otherStats)", "modifiers": "@VisibleForTesting static", "return": "Map<KeyspaceTablePair, RangeStats>", "signature": "Map<KeyspaceTablePair, RangeStats> accumulate(Map<KeyspaceTablePair, RangeStats> stats, Map<KeyspaceTablePair, RangeStats> otherStats)", "full_signature": "@VisibleForTesting static Map<KeyspaceTablePair, RangeStats> accumulate(Map<KeyspaceTablePair, RangeStats> stats, Map<KeyspaceTablePair, RangeStats> otherStats)", "class_method_signature": "Differ.accumulate(Map<KeyspaceTablePair, RangeStats> stats, Map<KeyspaceTablePair, RangeStats> otherStats)", "testcase": false, "constructor": false}, {"identifier": "updateMetrics", "parameters": "(String prefix, Map<KeyspaceTablePair, RangeStats> statsMap)", "modifiers": "private static", "return": "void", "signature": "void updateMetrics(String prefix, Map<KeyspaceTablePair, RangeStats> statsMap)", "full_signature": "private static void updateMetrics(String prefix, Map<KeyspaceTablePair, RangeStats> statsMap)", "class_method_signature": "Differ.updateMetrics(String prefix, Map<KeyspaceTablePair, RangeStats> statsMap)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void shutdown()", "full_signature": "public static void shutdown()", "class_method_signature": "Differ.shutdown()", "testcase": false, "constructor": false}], "file": "spark-job/src/main/java/org/apache/cassandra/diff/Differ.java"}, "focal_method": {"identifier": "filterTables", "parameters": "(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted)", "modifiers": "@VisibleForTesting static", "return": "Map<KeyspaceTablePair, DiffJob.TaskStatus>", "body": "@VisibleForTesting\n    static Map<KeyspaceTablePair, DiffJob.TaskStatus> filterTables(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted) {\n        Map<KeyspaceTablePair, DiffJob.TaskStatus> tablesToProcess = new HashMap<>();\n        for (KeyspaceTablePair pair : keyspaceTables) {\n            DiffJob.TaskStatus taskStatus = journal.apply(pair);\n            RangeStats diffStats = taskStatus.stats;\n            BigInteger lastToken = taskStatus.lastToken;\n\n            // When we finish processing a split for a given table, we update the task status in journal\n            // to set the last seen token to the split's end token, to indicate that the split is complete.\n            if (!includeCompleted && lastToken != null && lastToken.equals(split.end)) {\n                logger.info(\"Found finished table {} for split {}\", pair, split);\n            }\n            else {\n                tablesToProcess.put(pair, diffStats != null\n                                          ? taskStatus\n                                          : new DiffJob.TaskStatus(taskStatus.lastToken, RangeStats.newStats()));\n            }\n        }\n        return tablesToProcess;\n    }", "signature": "Map<KeyspaceTablePair, DiffJob.TaskStatus> filterTables(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted)", "full_signature": "@VisibleForTesting static Map<KeyspaceTablePair, DiffJob.TaskStatus> filterTables(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted)", "class_method_signature": "Differ.filterTables(Iterable<KeyspaceTablePair> keyspaceTables,\n                                                                   DiffJob.Split split,\n                                                                   Function<KeyspaceTablePair, DiffJob.TaskStatus> journal,\n                                                                   boolean includeCompleted)", "testcase": false, "constructor": false, "invocations": ["apply", "equals", "info", "put", "newStats"]}, "repository": {"repo_id": 204657216, "url": "https://github.com/apache/cassandra-diff", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 112, "license": "licensed"}}