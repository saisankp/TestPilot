{"test_class": {"identifier": "MoleculeSignatureTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private SmilesParser       parser;", "modifier": "private", "type": "SmilesParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private IChemObjectBuilder builder;", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private IAtomContainer     mol;", "modifier": "private", "type": "IAtomContainer", "declarator": "mol", "var_name": "mol"}, {"original_string": "private MoleculeSignature  molSig;", "modifier": "private", "type": "MoleculeSignature", "declarator": "molSig", "var_name": "molSig"}], "file": "descriptor/signature/src/test/java/org/openscience/cdk/signature/MoleculeSignatureTest.java"}, "test_case": {"identifier": "napthaleneWithDoubleBondsAndHydrogenHeightTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void napthaleneWithDoubleBondsAndHydrogenHeightTest() {\n        IAtomContainer napthalene = builder.newInstance(IAtomContainer.class);\n        for (int i = 0; i < 10; i++) {\n            napthalene.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        }\n        napthalene.addBond(0, 1, IBond.Order.SINGLE);\n        napthalene.addBond(0, 5, IBond.Order.DOUBLE);\n        napthalene.addBond(1, 2, IBond.Order.DOUBLE);\n        napthalene.addBond(1, 6, IBond.Order.SINGLE);\n        napthalene.addBond(2, 3, IBond.Order.SINGLE);\n        napthalene.addBond(2, 9, IBond.Order.SINGLE);\n        napthalene.addBond(3, 4, IBond.Order.DOUBLE);\n        napthalene.addBond(4, 5, IBond.Order.SINGLE);\n        napthalene.addBond(6, 7, IBond.Order.DOUBLE);\n        napthalene.addBond(7, 8, IBond.Order.SINGLE);\n        napthalene.addBond(8, 9, IBond.Order.DOUBLE);\n\n        napthalene.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        napthalene.addBond(0, 10, IBond.Order.SINGLE);\n        napthalene.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        napthalene.addBond(3, 11, IBond.Order.SINGLE);\n        napthalene.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        napthalene.addBond(4, 12, IBond.Order.SINGLE);\n        napthalene.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        napthalene.addBond(5, 13, IBond.Order.SINGLE);\n        napthalene.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        napthalene.addBond(6, 14, IBond.Order.SINGLE);\n        napthalene.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        napthalene.addBond(7, 15, IBond.Order.SINGLE);\n        napthalene.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        napthalene.addBond(8, 16, IBond.Order.SINGLE);\n        napthalene.addAtom(builder.newInstance(IAtom.class, \"H\"));\n        napthalene.addBond(9, 17, IBond.Order.SINGLE);\n\n        int height = 2;\n        SignatureQuotientGraph mqg = new SignatureQuotientGraph(napthalene, height);\n        Assert.assertEquals(4, mqg.getVertexCount());\n        Assert.assertEquals(6, mqg.getEdgeCount());\n        Assert.assertEquals(2, mqg.numberOfLoopEdges());\n    }", "signature": "void napthaleneWithDoubleBondsAndHydrogenHeightTest()", "full_signature": "@Test public void napthaleneWithDoubleBondsAndHydrogenHeightTest()", "class_method_signature": "MoleculeSignatureTest.napthaleneWithDoubleBondsAndHydrogenHeightTest()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "newInstance", "addBond", "addBond", "addBond", "addBond", "addBond", "addBond", "addBond", "addBond", "addBond", "addBond", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "assertEquals", "getVertexCount", "assertEquals", "getEdgeCount", "assertEquals", "numberOfLoopEdges"]}, "focal_class": {"identifier": "MoleculeSignature", "superclass": "extends AbstractGraphSignature", "interfaces": "", "fields": [{"original_string": "private IAtomContainer molecule;", "modifier": "private", "type": "IAtomContainer", "declarator": "molecule", "var_name": "molecule"}], "methods": [{"identifier": "MoleculeSignature", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "", "signature": " MoleculeSignature(IAtomContainer molecule)", "full_signature": "public  MoleculeSignature(IAtomContainer molecule)", "class_method_signature": "MoleculeSignature.MoleculeSignature(IAtomContainer molecule)", "testcase": false, "constructor": true}, {"identifier": "MoleculeSignature", "parameters": "(IAtomContainer molecule, int height)", "modifiers": "public", "return": "", "signature": " MoleculeSignature(IAtomContainer molecule, int height)", "full_signature": "public  MoleculeSignature(IAtomContainer molecule, int height)", "class_method_signature": "MoleculeSignature.MoleculeSignature(IAtomContainer molecule, int height)", "testcase": false, "constructor": true}, {"identifier": "getVertexCount", "parameters": "()", "modifiers": "@Override /** {@inheritDoc} */ protected", "return": "int", "signature": "int getVertexCount()", "full_signature": "@Override /** {@inheritDoc} */ protected int getVertexCount()", "class_method_signature": "MoleculeSignature.getVertexCount()", "testcase": false, "constructor": false}, {"identifier": "signatureStringForVertex", "parameters": "(int vertexIndex)", "modifiers": "@Override /** {@inheritDoc} */ public", "return": "String", "signature": "String signatureStringForVertex(int vertexIndex)", "full_signature": "@Override /** {@inheritDoc} */ public String signatureStringForVertex(int vertexIndex)", "class_method_signature": "MoleculeSignature.signatureStringForVertex(int vertexIndex)", "testcase": false, "constructor": false}, {"identifier": "signatureStringForVertex", "parameters": "(int vertexIndex, int height)", "modifiers": "@Override /** {@inheritDoc} */ public", "return": "String", "signature": "String signatureStringForVertex(int vertexIndex, int height)", "full_signature": "@Override /** {@inheritDoc} */ public String signatureStringForVertex(int vertexIndex, int height)", "class_method_signature": "MoleculeSignature.signatureStringForVertex(int vertexIndex, int height)", "testcase": false, "constructor": false}, {"identifier": "signatureForVertex", "parameters": "(int vertexIndex)", "modifiers": "@Override /** {@inheritDoc} */ public", "return": "AbstractVertexSignature", "signature": "AbstractVertexSignature signatureForVertex(int vertexIndex)", "full_signature": "@Override /** {@inheritDoc} */ public AbstractVertexSignature signatureForVertex(int vertexIndex)", "class_method_signature": "MoleculeSignature.signatureForVertex(int vertexIndex)", "testcase": false, "constructor": false}, {"identifier": "calculateOrbits", "parameters": "()", "modifiers": "public", "return": "List<Orbit>", "signature": "List<Orbit> calculateOrbits()", "full_signature": "public List<Orbit> calculateOrbits()", "class_method_signature": "MoleculeSignature.calculateOrbits()", "testcase": false, "constructor": false}, {"identifier": "fromSignatureString", "parameters": "(String signatureString, IChemObjectBuilder coBuilder)", "modifiers": "public static", "return": "IAtomContainer", "signature": "IAtomContainer fromSignatureString(String signatureString, IChemObjectBuilder coBuilder)", "full_signature": "public static IAtomContainer fromSignatureString(String signatureString, IChemObjectBuilder coBuilder)", "class_method_signature": "MoleculeSignature.fromSignatureString(String signatureString, IChemObjectBuilder coBuilder)", "testcase": false, "constructor": false}, {"identifier": "toCanonicalSignatureString", "parameters": "(int height)", "modifiers": "public", "return": "String", "signature": "String toCanonicalSignatureString(int height)", "full_signature": "public String toCanonicalSignatureString(int height)", "class_method_signature": "MoleculeSignature.toCanonicalSignatureString(int height)", "testcase": false, "constructor": false}], "file": "descriptor/signature/src/main/java/org/openscience/cdk/signature/MoleculeSignature.java"}, "focal_method": {"identifier": "getVertexCount", "parameters": "()", "modifiers": "@Override /** {@inheritDoc} */ protected", "return": "int", "body": "@Override\n    /** {@inheritDoc} */\n    protected int getVertexCount() {\n        return this.molecule.getAtomCount();\n    }", "signature": "int getVertexCount()", "full_signature": "@Override /** {@inheritDoc} */ protected int getVertexCount()", "class_method_signature": "MoleculeSignature.getVertexCount()", "testcase": false, "constructor": false, "invocations": ["getAtomCount"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}