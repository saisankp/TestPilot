{"test_class": {"identifier": "RecognitoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final float DEFAULT_SAMPLE_RATE = 22050f;", "modifier": "private static final", "type": "float", "declarator": "DEFAULT_SAMPLE_RATE = 22050f", "var_name": "DEFAULT_SAMPLE_RATE"}, {"original_string": "private final Random random = new Random();", "modifier": "private final", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "private Recognito<String> recognito;", "modifier": "private", "type": "Recognito<String>", "declarator": "recognito", "var_name": "recognito"}, {"original_string": "private double[] voiceSample;", "modifier": "private", "type": "double[]", "declarator": "voiceSample", "var_name": "voiceSample"}], "file": "recognito/src/test/java/com/bitsinharmony/recognito/RecognitoTest.java"}, "test_case": {"identifier": "identifyBreaksWhenNoVoicePrintWasPreviouslyExtracted", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void identifyBreaksWhenNoVoicePrintWasPreviouslyExtracted() {\n       recognito.identify(voiceSample);\n    }", "signature": "void identifyBreaksWhenNoVoicePrintWasPreviouslyExtracted()", "full_signature": "@Test(expected = IllegalStateException.class) public void identifyBreaksWhenNoVoicePrintWasPreviouslyExtracted()", "class_method_signature": "RecognitoTest.identifyBreaksWhenNoVoicePrintWasPreviouslyExtracted()", "testcase": true, "constructor": false, "invocations": ["identify"]}, "focal_class": {"identifier": "Recognito", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final float MIN_SAMPLE_RATE = 8000.0f;", "modifier": "private static final", "type": "float", "declarator": "MIN_SAMPLE_RATE = 8000.0f", "var_name": "MIN_SAMPLE_RATE"}, {"original_string": "private final ConcurrentHashMap<K, VoicePrint> store = new ConcurrentHashMap<K, VoicePrint>();", "modifier": "private final", "type": "ConcurrentHashMap<K, VoicePrint>", "declarator": "store = new ConcurrentHashMap<K, VoicePrint>()", "var_name": "store"}, {"original_string": "private final float sampleRate;", "modifier": "private final", "type": "float", "declarator": "sampleRate", "var_name": "sampleRate"}, {"original_string": "private final AtomicBoolean universalModelWasSetByUser = new AtomicBoolean();", "modifier": "private final", "type": "AtomicBoolean", "declarator": "universalModelWasSetByUser = new AtomicBoolean()", "var_name": "universalModelWasSetByUser"}, {"original_string": "private VoicePrint universalModel;", "modifier": "private", "type": "VoicePrint", "declarator": "universalModel", "var_name": "universalModel"}], "methods": [{"identifier": "Recognito", "parameters": "(float sampleRate)", "modifiers": "public", "return": "", "signature": " Recognito(float sampleRate)", "full_signature": "public  Recognito(float sampleRate)", "class_method_signature": "Recognito.Recognito(float sampleRate)", "testcase": false, "constructor": true}, {"identifier": "Recognito", "parameters": "(float sampleRate, Map<K, VoicePrint> voicePrintsByUserKey)", "modifiers": "public", "return": "", "signature": " Recognito(float sampleRate, Map<K, VoicePrint> voicePrintsByUserKey)", "full_signature": "public  Recognito(float sampleRate, Map<K, VoicePrint> voicePrintsByUserKey)", "class_method_signature": "Recognito.Recognito(float sampleRate, Map<K, VoicePrint> voicePrintsByUserKey)", "testcase": false, "constructor": true}, {"identifier": "getUniversalModel", "parameters": "()", "modifiers": "public", "return": "VoicePrint", "signature": "VoicePrint getUniversalModel()", "full_signature": "public VoicePrint getUniversalModel()", "class_method_signature": "Recognito.getUniversalModel()", "testcase": false, "constructor": false}, {"identifier": "setUniversalModel", "parameters": "(VoicePrint universalModel)", "modifiers": "public synchronized", "return": "void", "signature": "void setUniversalModel(VoicePrint universalModel)", "full_signature": "public synchronized void setUniversalModel(VoicePrint universalModel)", "class_method_signature": "Recognito.setUniversalModel(VoicePrint universalModel)", "testcase": false, "constructor": false}, {"identifier": "createVoicePrint", "parameters": "(K userKey, double[] voiceSample)", "modifiers": "public synchronized", "return": "VoicePrint", "signature": "VoicePrint createVoicePrint(K userKey, double[] voiceSample)", "full_signature": "public synchronized VoicePrint createVoicePrint(K userKey, double[] voiceSample)", "class_method_signature": "Recognito.createVoicePrint(K userKey, double[] voiceSample)", "testcase": false, "constructor": false}, {"identifier": "createVoicePrint", "parameters": "(K userKey, File voiceSampleFile)", "modifiers": "public", "return": "VoicePrint", "signature": "VoicePrint createVoicePrint(K userKey, File voiceSampleFile)", "full_signature": "public VoicePrint createVoicePrint(K userKey, File voiceSampleFile)", "class_method_signature": "Recognito.createVoicePrint(K userKey, File voiceSampleFile)", "testcase": false, "constructor": false}, {"identifier": "convertFileToDoubleArray", "parameters": "(File voiceSampleFile)", "modifiers": "private", "return": "double[]", "signature": "double[] convertFileToDoubleArray(File voiceSampleFile)", "full_signature": "private double[] convertFileToDoubleArray(File voiceSampleFile)", "class_method_signature": "Recognito.convertFileToDoubleArray(File voiceSampleFile)", "testcase": false, "constructor": false}, {"identifier": "mergeVoiceSample", "parameters": "(K userKey, double[] voiceSample)", "modifiers": "public", "return": "VoicePrint", "signature": "VoicePrint mergeVoiceSample(K userKey, double[] voiceSample)", "full_signature": "public VoicePrint mergeVoiceSample(K userKey, double[] voiceSample)", "class_method_signature": "Recognito.mergeVoiceSample(K userKey, double[] voiceSample)", "testcase": false, "constructor": false}, {"identifier": "mergeVoiceSample", "parameters": "(K userKey, File voiceSampleFile)", "modifiers": "public", "return": "VoicePrint", "signature": "VoicePrint mergeVoiceSample(K userKey, File voiceSampleFile)", "full_signature": "public VoicePrint mergeVoiceSample(K userKey, File voiceSampleFile)", "class_method_signature": "Recognito.mergeVoiceSample(K userKey, File voiceSampleFile)", "testcase": false, "constructor": false}, {"identifier": "identify", "parameters": "(double[] voiceSample)", "modifiers": "public", "return": "List<MatchResult<K>>", "signature": "List<MatchResult<K>> identify(double[] voiceSample)", "full_signature": "public List<MatchResult<K>> identify(double[] voiceSample)", "class_method_signature": "Recognito.identify(double[] voiceSample)", "testcase": false, "constructor": false}, {"identifier": "identify", "parameters": "(File voiceSampleFile)", "modifiers": "public", "return": "List<MatchResult<K>>", "signature": "List<MatchResult<K>> identify(File voiceSampleFile)", "full_signature": "public List<MatchResult<K>> identify(File voiceSampleFile)", "class_method_signature": "Recognito.identify(File voiceSampleFile)", "testcase": false, "constructor": false}, {"identifier": "extractFeatures", "parameters": "(double[] voiceSample, float sampleRate)", "modifiers": "private", "return": "double[]", "signature": "double[] extractFeatures(double[] voiceSample, float sampleRate)", "full_signature": "private double[] extractFeatures(double[] voiceSample, float sampleRate)", "class_method_signature": "Recognito.extractFeatures(double[] voiceSample, float sampleRate)", "testcase": false, "constructor": false}], "file": "recognito/src/main/java/com/bitsinharmony/recognito/Recognito.java"}, "focal_method": {"identifier": "identify", "parameters": "(double[] voiceSample)", "modifiers": "public", "return": "List<MatchResult<K>>", "body": "public List<MatchResult<K>> identify(double[] voiceSample) {\n        \n        if(store.isEmpty()) {\n            throw new IllegalStateException(\"There is no voice print enrolled in the system yet\");\n        }\n\n        VoicePrint voicePrint = new VoicePrint(extractFeatures(voiceSample, sampleRate));\n        \n        DistanceCalculator calculator = new EuclideanDistanceCalculator();\n        List<MatchResult<K>> matches = new ArrayList<MatchResult<K>>(store.size());\n\n        double distanceFromUniversalModel = voicePrint.getDistance(calculator, universalModel);\n        for (Entry<K, VoicePrint> entry : store.entrySet()) {\n            double distance = entry.getValue().getDistance(calculator, voicePrint);\n            // likelihood : how close is the given voice sample to the current VoicePrint \n            // compared to the total distance between the current VoicePrint and the universal model \n            int likelihood = 100 - (int) (distance / (distance + distanceFromUniversalModel) * 100);\n            matches.add(new MatchResult<K>(entry.getKey(), likelihood, distance));\n        }\n\n        Collections.sort(matches, new Comparator<MatchResult<K>>() {\n            @Override\n            public int compare(MatchResult<K> m1, MatchResult<K> m2) {\n                return Double.compare(m1.getDistance(), m2.getDistance());\n            }\n        });\n        \n        return matches;\n    }", "signature": "List<MatchResult<K>> identify(double[] voiceSample)", "full_signature": "public List<MatchResult<K>> identify(double[] voiceSample)", "class_method_signature": "Recognito.identify(double[] voiceSample)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "extractFeatures", "size", "getDistance", "entrySet", "getDistance", "getValue", "add", "getKey", "sort", "compare", "getDistance", "getDistance"]}, "repository": {"repo_id": 16597144, "url": "https://github.com/amaurycrickx/recognito", "language": "Java", "is_fork": false, "fork_count": 100, "stargazer_count": 173, "size": 76, "license": "licensed"}}