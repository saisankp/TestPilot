{"test_class": {"identifier": "XMLWorkerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private XMLWorker worker;", "modifier": "private", "type": "XMLWorker", "declarator": "worker", "var_name": "worker"}, {"original_string": "protected boolean called = false;", "modifier": "protected", "type": "boolean", "declarator": "called = false", "var_name": "called"}], "file": "xmlworker/src/test/java/com/itextpdf/tool/xml/XMLWorkerTest.java"}, "test_case": {"identifier": "verifyPipelineCloseCalled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void verifyPipelineCloseCalled() {\n\t\tworker.endElement(\"test\", \"ns\");\n\t\tAssert.assertTrue(called);\n\t}", "signature": "void verifyPipelineCloseCalled()", "full_signature": "@Test public void verifyPipelineCloseCalled()", "class_method_signature": "XMLWorkerTest.verifyPipelineCloseCalled()", "testcase": true, "constructor": false, "invocations": ["endElement", "assertTrue"]}, "focal_class": {"identifier": "XMLWorker", "superclass": "", "interfaces": "implements XMLParserListener", "fields": [{"original_string": "protected final Pipeline<?> rootpPipe;", "modifier": "protected final", "type": "Pipeline<?>", "declarator": "rootpPipe", "var_name": "rootpPipe"}, {"original_string": "private static ThreadLocal<WorkerContextImpl> context = new ThreadLocal<WorkerContextImpl>() {\n\t\t@Override\n\t\tprotected WorkerContextImpl initialValue() {\n\t\t\treturn new WorkerContextImpl();\n\t\t};\n\t};", "modifier": "private static", "type": "ThreadLocal<WorkerContextImpl>", "declarator": "context = new ThreadLocal<WorkerContextImpl>() {\n\t\t@Override\n\t\tprotected WorkerContextImpl initialValue() {\n\t\t\treturn new WorkerContextImpl();\n\t\t};\n\t}", "var_name": "context"}, {"original_string": "protected final boolean parseHtml;", "modifier": "protected final", "type": "boolean", "declarator": "parseHtml", "var_name": "parseHtml"}], "methods": [{"identifier": "XMLWorker", "parameters": "(final Pipeline<?> pipeline, final boolean parseHtml)", "modifiers": "public", "return": "", "signature": " XMLWorker(final Pipeline<?> pipeline, final boolean parseHtml)", "full_signature": "public  XMLWorker(final Pipeline<?> pipeline, final boolean parseHtml)", "class_method_signature": "XMLWorker.XMLWorker(final Pipeline<?> pipeline, final boolean parseHtml)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "XMLWorker.init()", "testcase": false, "constructor": false}, {"identifier": "startElement", "parameters": "(final String tag, final Map<String, String> attr, final String ns)", "modifiers": "public", "return": "void", "signature": "void startElement(final String tag, final Map<String, String> attr, final String ns)", "full_signature": "public void startElement(final String tag, final Map<String, String> attr, final String ns)", "class_method_signature": "XMLWorker.startElement(final String tag, final Map<String, String> attr, final String ns)", "testcase": false, "constructor": false}, {"identifier": "createTag", "parameters": "(String tag, final Map<String, String> attr, final String ns)", "modifiers": "protected", "return": "Tag", "signature": "Tag createTag(String tag, final Map<String, String> attr, final String ns)", "full_signature": "protected Tag createTag(String tag, final Map<String, String> attr, final String ns)", "class_method_signature": "XMLWorker.createTag(String tag, final Map<String, String> attr, final String ns)", "testcase": false, "constructor": false}, {"identifier": "endElement", "parameters": "(final String tag, final String ns)", "modifiers": "public", "return": "void", "signature": "void endElement(final String tag, final String ns)", "full_signature": "public void endElement(final String tag, final String ns)", "class_method_signature": "XMLWorker.endElement(final String tag, final String ns)", "testcase": false, "constructor": false}, {"identifier": "text", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void text(String text)", "full_signature": "public void text(String text)", "class_method_signature": "XMLWorker.text(String text)", "testcase": false, "constructor": false}, {"identifier": "unknownText", "parameters": "(final String text)", "modifiers": "public", "return": "void", "signature": "void unknownText(final String text)", "full_signature": "public void unknownText(final String text)", "class_method_signature": "XMLWorker.unknownText(final String text)", "testcase": false, "constructor": false}, {"identifier": "comment", "parameters": "(final String comment)", "modifiers": "public", "return": "void", "signature": "void comment(final String comment)", "full_signature": "public void comment(final String comment)", "class_method_signature": "XMLWorker.comment(final String comment)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "XMLWorker.close()", "testcase": false, "constructor": false}, {"identifier": "getCurrentTag", "parameters": "()", "modifiers": "protected", "return": "Tag", "signature": "Tag getCurrentTag()", "full_signature": "protected Tag getCurrentTag()", "class_method_signature": "XMLWorker.getCurrentTag()", "testcase": false, "constructor": false}, {"identifier": "getLocalWC", "parameters": "()", "modifiers": "protected static", "return": "WorkerContext", "signature": "WorkerContext getLocalWC()", "full_signature": "protected static WorkerContext getLocalWC()", "class_method_signature": "XMLWorker.getLocalWC()", "testcase": false, "constructor": false}, {"identifier": "closeLocalWC", "parameters": "()", "modifiers": "protected static", "return": "void", "signature": "void closeLocalWC()", "full_signature": "protected static void closeLocalWC()", "class_method_signature": "XMLWorker.closeLocalWC()", "testcase": false, "constructor": false}, {"identifier": "ignoreCdata", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean ignoreCdata()", "full_signature": "protected boolean ignoreCdata()", "class_method_signature": "XMLWorker.ignoreCdata()", "testcase": false, "constructor": false}], "file": "xmlworker/src/main/java/com/itextpdf/tool/xml/XMLWorker.java"}, "focal_method": {"identifier": "endElement", "parameters": "(final String tag, final String ns)", "modifiers": "public", "return": "void", "body": "public void endElement(final String tag, final String ns) {\n\t\tString thetag = null;\n\t\tif (parseHtml) {\n\t\t\tthetag = tag.toLowerCase();\n\t\t} else {\n\t\t\tthetag = tag;\n\t\t}\n\t\tWorkerContext ctx = getLocalWC();\n\t\tif (null != ctx.getCurrentTag() && !thetag.equals(ctx.getCurrentTag().getName())) {\n\t\t\tthrow new RuntimeWorkerException(String.format(\n\t\t\t\t\tLocaleMessages.getInstance().getMessage(LocaleMessages.INVALID_NESTED_TAG), thetag,\n\t\t\t\t\tctx.getCurrentTag().getName()));\n\t\t}\n\t\tPipeline<?> wp = rootpPipe;\n\t\tProcessObject po = new ProcessObject();\n\t\ttry {\n\t\t\twhile (null != (wp = wp.close(ctx, ctx.getCurrentTag(), po)))\n\t\t\t\t;\n\t\t} catch (PipelineException e) {\n\t\t\tthrow new RuntimeWorkerException(e);\n\t\t} finally {\n\t\t\tif (null != ctx.getCurrentTag())\n\t\t\t\tctx.setCurrentTag(ctx.getCurrentTag().getParent());\n\t\t}\n\t}", "signature": "void endElement(final String tag, final String ns)", "full_signature": "public void endElement(final String tag, final String ns)", "class_method_signature": "XMLWorker.endElement(final String tag, final String ns)", "testcase": false, "constructor": false, "invocations": ["toLowerCase", "getLocalWC", "getCurrentTag", "equals", "getName", "getCurrentTag", "format", "getMessage", "getInstance", "getName", "getCurrentTag", "close", "getCurrentTag", "getCurrentTag", "setCurrentTag", "getParent", "getCurrentTag"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}