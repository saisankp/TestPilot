{"test_class": {"identifier": "ReSendToChainRecoverStrategyTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IRecoveryChainChoiceStrategy recoveryChainChoiceStrategy;", "modifier": "private", "type": "IRecoveryChainChoiceStrategy", "declarator": "recoveryChainChoiceStrategy", "var_name": "recoveryChainChoiceStrategy"}], "file": "CoreFeatures/Checkpoint/CheckpointRecoverStrategies/src/test/java/info/smart_tools/smartactors/checkpoint/recover_strategies/ReSendToChainRecoverStrategyTest.java"}, "test_case": {"identifier": "Should_reSendMessageToChainChosenByIRCCS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_reSendMessageToChainChosenByIRCCS()\n            throws Exception {\n        IObject state = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"),\n                (\"{\" +\n                        \"'responsibleCheckpointId':'rcid',\" +\n                        \"'entryId':'eid',\" +\n                        \"'prevCheckpointEntryId':'pceid',\" +\n                        \"'prevCheckpointId':'pcid',\" +\n                        \"'message':{'is-a-message':true}\" +\n                        \"}\").replace('\\'','\"'));\n\n        IMessageBusHandler messageBusHandler = mock(IMessageBusHandler.class);\n\n        ScopeProvider.getCurrentScope().setValue(MessageBus.getMessageBusKey(), messageBusHandler);\n\n        Object chainId = new Object();\n\n        when(recoveryChainChoiceStrategy.chooseRecoveryChain(same(state))).thenReturn(chainId);\n\n        new ReSendToChainRecoverStrategy(recoveryChainChoiceStrategy).reSend(state);\n\n        ArgumentCaptor<IObject> mc = ArgumentCaptor.forClass(IObject.class);\n\n        verify(messageBusHandler).handle(mc.capture(), same(chainId));\n\n\n        assertNotNull(mc.getValue());\n        assertEquals(true, mc.getValue().getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"is-a-message\")));\n\n        IObject checkpointStatus =\n                (IObject) mc.getValue().getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"checkpointStatus\"));\n\n        assertNotNull(checkpointStatus);\n        assertEquals(\"rcid\",\n                checkpointStatus.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"responsibleCheckpointId\")));\n        assertEquals(\"eid\",\n                checkpointStatus.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"checkpointEntryId\")));\n        assertEquals(\"pceid\",\n                checkpointStatus.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"prevCheckpointEntryId\")));\n        assertEquals(\"pcid\",\n                checkpointStatus.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"prevCheckpointId\")));\n    }", "signature": "void Should_reSendMessageToChainChosenByIRCCS()", "full_signature": "@Test public void Should_reSendMessageToChainChosenByIRCCS()", "class_method_signature": "ReSendToChainRecoverStrategyTest.Should_reSendMessageToChainChosenByIRCCS()", "testcase": true, "constructor": false, "invocations": ["resolve", "getOrAdd", "replace", "mock", "setValue", "getCurrentScope", "getMessageBusKey", "thenReturn", "when", "chooseRecoveryChain", "same", "reSend", "forClass", "handle", "verify", "capture", "same", "assertNotNull", "getValue", "assertEquals", "getValue", "getValue", "resolve", "getOrAdd", "getValue", "getValue", "resolve", "getOrAdd", "assertNotNull", "assertEquals", "getValue", "resolve", "getOrAdd", "assertEquals", "getValue", "resolve", "getOrAdd", "assertEquals", "getValue", "resolve", "getOrAdd", "assertEquals", "getValue", "resolve", "getOrAdd"]}, "focal_class": {"identifier": "ReSendToChainRecoverStrategy", "superclass": "", "interfaces": "implements IRecoverStrategy", "fields": [{"original_string": "private final IRecoveryChainChoiceStrategy chainChoiceStrategy;", "modifier": "private final", "type": "IRecoveryChainChoiceStrategy", "declarator": "chainChoiceStrategy", "var_name": "chainChoiceStrategy"}, {"original_string": "private final IFieldName messageFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "messageFieldName", "var_name": "messageFieldName"}, {"original_string": "private final IFieldName responsibleCheckpointIdFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "responsibleCheckpointIdFieldName", "var_name": "responsibleCheckpointIdFieldName"}, {"original_string": "private final IFieldName checkpointEntryIdFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "checkpointEntryIdFieldName", "var_name": "checkpointEntryIdFieldName"}, {"original_string": "private final IFieldName prevCheckpointEntryIdFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "prevCheckpointEntryIdFieldName", "var_name": "prevCheckpointEntryIdFieldName"}, {"original_string": "private final IFieldName entryIdFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "entryIdFieldName", "var_name": "entryIdFieldName"}, {"original_string": "private final IFieldName prevCheckpointIdFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "prevCheckpointIdFieldName", "var_name": "prevCheckpointIdFieldName"}, {"original_string": "private final IFieldName checkpointStatusFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "checkpointStatusFieldName", "var_name": "checkpointStatusFieldName"}], "methods": [{"identifier": "ReSendToChainRecoverStrategy", "parameters": "(final IRecoveryChainChoiceStrategy chainChoiceStrategy)", "modifiers": "public", "return": "", "signature": " ReSendToChainRecoverStrategy(final IRecoveryChainChoiceStrategy chainChoiceStrategy)", "full_signature": "public  ReSendToChainRecoverStrategy(final IRecoveryChainChoiceStrategy chainChoiceStrategy)", "class_method_signature": "ReSendToChainRecoverStrategy.ReSendToChainRecoverStrategy(final IRecoveryChainChoiceStrategy chainChoiceStrategy)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final IObject state, final IObject args, final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "signature": "void init(final IObject state, final IObject args, final IMessageProcessor processor)", "full_signature": "@Override public void init(final IObject state, final IObject args, final IMessageProcessor processor)", "class_method_signature": "ReSendToChainRecoverStrategy.init(final IObject state, final IObject args, final IMessageProcessor processor)", "testcase": false, "constructor": false}, {"identifier": "reSend", "parameters": "(final IObject state)", "modifiers": "@Override public", "return": "void", "signature": "void reSend(final IObject state)", "full_signature": "@Override public void reSend(final IObject state)", "class_method_signature": "ReSendToChainRecoverStrategy.reSend(final IObject state)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Checkpoint/CheckpointRecoverStrategies/src/main/java/info/smart_tools/smartactors/checkpoint/recover_strategies/ReSendToChainRecoverStrategy.java"}, "focal_method": {"identifier": "reSend", "parameters": "(final IObject state)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void reSend(final IObject state) throws RecoverStrategyExecutionException {\n        try {\n            String sMessage = ((IObject) state.getValue(messageFieldName)).serialize();\n            IObject messageClone = IOC.resolve(Keys.getOrAdd(IObject.class.getName()), sMessage);\n\n            IObject checkpointStatus = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n\n            checkpointStatus.setValue(responsibleCheckpointIdFieldName, state.getValue(responsibleCheckpointIdFieldName));\n            checkpointStatus.setValue(checkpointEntryIdFieldName, state.getValue(entryIdFieldName));\n            checkpointStatus.setValue(prevCheckpointEntryIdFieldName, state.getValue(prevCheckpointEntryIdFieldName));\n            checkpointStatus.setValue(prevCheckpointIdFieldName, state.getValue(prevCheckpointIdFieldName));\n\n            messageClone.setValue(checkpointStatusFieldName, checkpointStatus);\n\n            MessageBus.send(messageClone, chainChoiceStrategy.chooseRecoveryChain(state));\n        } catch (ResolutionException | ReadValueException | InvalidArgumentException | ChangeValueException | SendingMessageException\n                | SerializeException e) {\n            throw new RecoverStrategyExecutionException(\"Error occurred re-sending a message.\", e);\n        }\n    }", "signature": "void reSend(final IObject state)", "full_signature": "@Override public void reSend(final IObject state)", "class_method_signature": "ReSendToChainRecoverStrategy.reSend(final IObject state)", "testcase": false, "constructor": false, "invocations": ["serialize", "getValue", "resolve", "getOrAdd", "getName", "resolve", "getOrAdd", "setValue", "getValue", "setValue", "getValue", "setValue", "getValue", "setValue", "getValue", "setValue", "send", "chooseRecoveryChain"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}