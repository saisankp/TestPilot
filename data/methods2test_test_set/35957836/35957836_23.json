{"test_class": {"identifier": "TakeSnapshotTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    TakeSnapshotTask task = new TakeSnapshotTask(null, null, null, from(now()));", "modifier": "@InjectMocks", "type": "TakeSnapshotTask", "declarator": "task = new TakeSnapshotTask(null, null, null, from(now()))", "var_name": "task"}, {"original_string": "@Mock\n    Scorer scorer;", "modifier": "@Mock", "type": "Scorer", "declarator": "scorer", "var_name": "scorer"}, {"original_string": "@Mock\n    Date date = new Date();", "modifier": "@Mock", "type": "Date", "declarator": "date = new Date()", "var_name": "date"}, {"original_string": "static final String ORGANIZATION_LOGIN = \"myLogin\";", "modifier": "static final", "type": "String", "declarator": "ORGANIZATION_LOGIN = \"myLogin\"", "var_name": "ORGANIZATION_LOGIN"}, {"original_string": "static final int ORGANIZATION_ID = 77;", "modifier": "static final", "type": "int", "declarator": "ORGANIZATION_ID = 77", "var_name": "ORGANIZATION_ID"}], "file": "catwatch-backend/src/test/java/org/zalando/catwatch/backend/github/TakeSnapshotTaskTest.java"}, "test_case": {"identifier": "testCollectLanguages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCollectLanguages() throws Exception {\n\n        // given\n        List<RepositoryWrapper> repos = asList( //\n                repo(\"C\", 30, \"Go\", 15, \"Java\", 4), //\n                repo(\"C\", 30, \"Go\", 15, \"Java\", 4), //\n                repo(\"Java\", 2));\n        // when\n        List<Language> langs = new ArrayList<>(task.collectLanguages(org(repos)));\n\n        // then\n        assertThat(langs, hasSize(3));\n        sort(langs, (p1, p2) -> p1.getName().compareTo(p2.getName()));\n\n        assertThat(langs.get(0).getName(), equalTo(\"C\"));\n        assertThat(langs.get(0).getProjectsCount(), equalTo(2));\n        assertThat(langs.get(0).getPercentage(), equalTo(60));\n\n        assertThat(langs.get(1).getName(), equalTo(\"Go\"));\n        assertThat(langs.get(1).getProjectsCount(), equalTo(2));\n        assertThat(langs.get(1).getPercentage(), equalTo(30));\n\n        assertThat(langs.get(2).getName(), equalTo(\"Java\"));\n        assertThat(langs.get(2).getProjectsCount(), equalTo(3));\n        assertThat(langs.get(2).getPercentage(), equalTo(10));\n    }", "signature": "void testCollectLanguages()", "full_signature": "@Test public void testCollectLanguages()", "class_method_signature": "TakeSnapshotTaskTest.testCollectLanguages()", "testcase": true, "constructor": false, "invocations": ["asList", "repo", "repo", "repo", "collectLanguages", "org", "assertThat", "hasSize", "sort", "compareTo", "getName", "getName", "assertThat", "getName", "get", "equalTo", "assertThat", "getProjectsCount", "get", "equalTo", "assertThat", "getPercentage", "get", "equalTo", "assertThat", "getName", "get", "equalTo", "assertThat", "getProjectsCount", "get", "equalTo", "assertThat", "getPercentage", "get", "equalTo", "assertThat", "getName", "get", "equalTo", "assertThat", "getProjectsCount", "get", "equalTo", "assertThat", "getPercentage", "get", "equalTo"]}, "focal_class": {"identifier": "TakeSnapshotTask", "superclass": "", "interfaces": "implements Callable<Snapshot>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TakeSnapshotTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TakeSnapshotTask.class)", "var_name": "logger"}, {"original_string": "private final GitHub gitHub;", "modifier": "private final", "type": "GitHub", "declarator": "gitHub", "var_name": "gitHub"}, {"original_string": "private final String organisationName;", "modifier": "private final", "type": "String", "declarator": "organisationName", "var_name": "organisationName"}, {"original_string": "private final Date snapshotDate;", "modifier": "private final", "type": "Date", "declarator": "snapshotDate", "var_name": "snapshotDate"}, {"original_string": "private Scorer scorer;", "modifier": "private", "type": "Scorer", "declarator": "scorer", "var_name": "scorer"}], "methods": [{"identifier": "TakeSnapshotTask", "parameters": "(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "modifiers": "public", "return": "", "signature": " TakeSnapshotTask(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "full_signature": "public  TakeSnapshotTask(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "class_method_signature": "TakeSnapshotTask.TakeSnapshotTask(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "Snapshot", "signature": "Snapshot call()", "full_signature": "@Override public Snapshot call()", "class_method_signature": "TakeSnapshotTask.call()", "testcase": false, "constructor": false}, {"identifier": "collectStatistics", "parameters": "(final OrganizationWrapper organization)", "modifiers": "", "return": "Statistics", "signature": "Statistics collectStatistics(final OrganizationWrapper organization)", "full_signature": " Statistics collectStatistics(final OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectStatistics(final OrganizationWrapper organization)", "testcase": false, "constructor": false}, {"identifier": "collectProjects", "parameters": "(OrganizationWrapper organization)", "modifiers": "", "return": "Collection<Project>", "signature": "Collection<Project> collectProjects(OrganizationWrapper organization)", "full_signature": " Collection<Project> collectProjects(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectProjects(OrganizationWrapper organization)", "testcase": false, "constructor": false}, {"identifier": "getProjectMaintainers", "parameters": "(RepositoryWrapper repository)", "modifiers": "", "return": "List<String>", "signature": "List<String> getProjectMaintainers(RepositoryWrapper repository)", "full_signature": " List<String> getProjectMaintainers(RepositoryWrapper repository)", "class_method_signature": "TakeSnapshotTask.getProjectMaintainers(RepositoryWrapper repository)", "testcase": false, "constructor": false}, {"identifier": "readCatwatchYaml", "parameters": "(RepositoryWrapper repository, Project project)", "modifiers": "", "return": "void", "signature": "void readCatwatchYaml(RepositoryWrapper repository, Project project)", "full_signature": " void readCatwatchYaml(RepositoryWrapper repository, Project project)", "class_method_signature": "TakeSnapshotTask.readCatwatchYaml(RepositoryWrapper repository, Project project)", "testcase": false, "constructor": false}, {"identifier": "collectContributors", "parameters": "(OrganizationWrapper organization)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "Collection<Contributor>", "signature": "Collection<Contributor> collectContributors(OrganizationWrapper organization)", "full_signature": "@SuppressWarnings(\"unchecked\") Collection<Contributor> collectContributors(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectContributors(OrganizationWrapper organization)", "testcase": false, "constructor": false}, {"identifier": "collectLanguages", "parameters": "(OrganizationWrapper organization)", "modifiers": "@SuppressWarnings(\"rawtypes\")", "return": "Collection<Language>", "signature": "Collection<Language> collectLanguages(OrganizationWrapper organization)", "full_signature": "@SuppressWarnings(\"rawtypes\") Collection<Language> collectLanguages(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectLanguages(OrganizationWrapper organization)", "testcase": false, "constructor": false}], "file": "catwatch-backend/src/main/java/org/zalando/catwatch/backend/github/TakeSnapshotTask.java"}, "focal_method": {"identifier": "collectLanguages", "parameters": "(OrganizationWrapper organization)", "modifiers": "@SuppressWarnings(\"rawtypes\")", "return": "Collection<Language>", "body": "@SuppressWarnings(\"rawtypes\")\n    Collection<Language> collectLanguages(OrganizationWrapper organization) {\n        logger.info(\"Started collecting languages for organization '{}'.\", organisationName);\n\n        Collection<Language> languages = new ArrayList<>();\n\n        Map<String, LongSummaryStatistics> stat = organization.listRepositories().stream()\n                .map(RepositoryWrapper::listLanguages)\n                .map(Map::entrySet)\n                .flatMap(Set::stream)\n                .collect(groupingBy(Map.Entry::getKey,\n                        summarizingLong(entry -> ((Number) ((Map.Entry) entry).getValue()).longValue())));\n\n        final long allLanguageSize = stat.entrySet().stream()\n                .map(entry -> entry.getValue().getSum())\n                .reduce(0L, Long::sum);\n\n        for (Map.Entry<String, LongSummaryStatistics> entry : stat.entrySet()) {\n            Language language = new Language();\n\n            language.setName(entry.getKey());\n            language.setProjectsCount((int) entry.getValue().getCount());\n            language.setPercentage((int) (entry.getValue().getSum() * 100 / allLanguageSize));\n\n            languages.add(language);\n        }\n\n        logger.info(\"Finished collecting languages for organization '{}'.\", organisationName);\n\n        return languages;\n    }", "signature": "Collection<Language> collectLanguages(OrganizationWrapper organization)", "full_signature": "@SuppressWarnings(\"rawtypes\") Collection<Language> collectLanguages(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectLanguages(OrganizationWrapper organization)", "testcase": false, "constructor": false, "invocations": ["info", "collect", "flatMap", "map", "map", "stream", "listRepositories", "groupingBy", "summarizingLong", "longValue", "getValue", "reduce", "map", "stream", "entrySet", "getSum", "getValue", "entrySet", "setName", "getKey", "setProjectsCount", "getCount", "getValue", "setPercentage", "getSum", "getValue", "add", "info"]}, "repository": {"repo_id": 35957836, "url": "https://github.com/zalando-incubator/catwatch", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 55, "size": 1999, "license": "licensed"}}