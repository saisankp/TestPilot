{"test_class": {"identifier": "WebDispatchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final WebDispatch dispatch = createWebDispatch();", "modifier": "private final", "type": "WebDispatch", "declarator": "dispatch = createWebDispatch()", "var_name": "dispatch"}], "file": "services/src/test/java/com/greensopinion/finance/services/web/dispatch/WebDispatchTest.java"}, "test_case": {"identifier": "dispatchToEncryptionSettingsWebService", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void dispatchToEncryptionSettingsWebService() {\n\t\tWebResponse response = dispatch.dispatch(new WebRequest(\"PUT\", \"/encryption-settings\", \"{}\"));\n\t\tassertNotNull(response);\n\t\tassertEquals(Status.NO_CONTENT.getStatusCode(), response.getResponseCode());\n\t}", "signature": "void dispatchToEncryptionSettingsWebService()", "full_signature": "@Test public void dispatchToEncryptionSettingsWebService()", "class_method_signature": "WebDispatchTest.dispatchToEncryptionSettingsWebService()", "testcase": true, "constructor": false, "invocations": ["dispatch", "assertNotNull", "assertEquals", "getStatusCode", "getResponseCode"]}, "focal_class": {"identifier": "WebDispatch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<Class<? extends Annotation>> webMethodAnnotations = ImmutableList\n\t\t\t.<Class<? extends Annotation>> of(GET.class, PUT.class, DELETE.class, POST.class);", "modifier": "private static final", "type": "List<Class<? extends Annotation>>", "declarator": "webMethodAnnotations = ImmutableList\n\t\t\t.<Class<? extends Annotation>> of(GET.class, PUT.class, DELETE.class, POST.class)", "var_name": "webMethodAnnotations"}, {"original_string": "private final Invoker invoker;", "modifier": "private final", "type": "Invoker", "declarator": "invoker", "var_name": "invoker"}, {"original_string": "private final Logger logger;", "modifier": "private final", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private final Map<WebPath, Handler> pathToHandler;", "modifier": "private final", "type": "Map<WebPath, Handler>", "declarator": "pathToHandler", "var_name": "pathToHandler"}], "methods": [{"identifier": "WebDispatch", "parameters": "(Injector injector, Invoker invoker, Logger logger)", "modifiers": "@Inject public", "return": "", "signature": " WebDispatch(Injector injector, Invoker invoker, Logger logger)", "full_signature": "@Inject public  WebDispatch(Injector injector, Invoker invoker, Logger logger)", "class_method_signature": "WebDispatch.WebDispatch(Injector injector, Invoker invoker, Logger logger)", "testcase": false, "constructor": true}, {"identifier": "getLogger", "parameters": "()", "modifiers": "", "return": "Logger", "signature": "Logger getLogger()", "full_signature": " Logger getLogger()", "class_method_signature": "WebDispatch.getLogger()", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "(WebRequest request)", "modifiers": "public", "return": "WebResponse", "signature": "WebResponse dispatch(WebRequest request)", "full_signature": "public WebResponse dispatch(WebRequest request)", "class_method_signature": "WebDispatch.dispatch(WebRequest request)", "testcase": false, "constructor": false}, {"identifier": "notFound", "parameters": "(WebRequest request)", "modifiers": "private", "return": "WebResponse", "signature": "WebResponse notFound(WebRequest request)", "full_signature": "private WebResponse notFound(WebRequest request)", "class_method_signature": "WebDispatch.notFound(WebRequest request)", "testcase": false, "constructor": false}, {"identifier": "createPathToHandler", "parameters": "(Injector injector)", "modifiers": "private", "return": "Map<WebPath, Handler>", "signature": "Map<WebPath, Handler> createPathToHandler(Injector injector)", "full_signature": "private Map<WebPath, Handler> createPathToHandler(Injector injector)", "class_method_signature": "WebDispatch.createPathToHandler(Injector injector)", "testcase": false, "constructor": false}, {"identifier": "introspectWebService", "parameters": "(Builder<WebPath, Handler> builder, Binding<?> binding)", "modifiers": "private", "return": "void", "signature": "void introspectWebService(Builder<WebPath, Handler> builder, Binding<?> binding)", "full_signature": "private void introspectWebService(Builder<WebPath, Handler> builder, Binding<?> binding)", "class_method_signature": "WebDispatch.introspectWebService(Builder<WebPath, Handler> builder, Binding<?> binding)", "testcase": false, "constructor": false}, {"identifier": "introspectWebServiceMethod", "parameters": "(Builder<WebPath, Handler> builder, String httpMethod, String basePath,\n\t\t\tObject webService, Method method)", "modifiers": "private", "return": "void", "signature": "void introspectWebServiceMethod(Builder<WebPath, Handler> builder, String httpMethod, String basePath,\n\t\t\tObject webService, Method method)", "full_signature": "private void introspectWebServiceMethod(Builder<WebPath, Handler> builder, String httpMethod, String basePath,\n\t\t\tObject webService, Method method)", "class_method_signature": "WebDispatch.introspectWebServiceMethod(Builder<WebPath, Handler> builder, String httpMethod, String basePath,\n\t\t\tObject webService, Method method)", "testcase": false, "constructor": false}, {"identifier": "isWebService", "parameters": "(Key<?> key)", "modifiers": "private", "return": "boolean", "signature": "boolean isWebService(Key<?> key)", "full_signature": "private boolean isWebService(Key<?> key)", "class_method_signature": "WebDispatch.isWebService(Key<?> key)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/greensopinion/finance/services/web/dispatch/WebDispatch.java"}, "focal_method": {"identifier": "dispatch", "parameters": "(WebRequest request)", "modifiers": "public", "return": "WebResponse", "body": "public WebResponse dispatch(WebRequest request) {\n\t\ttry {\n\t\t\tfor (Entry<WebPath, Handler> handlerEntry : pathToHandler.entrySet()) {\n\t\t\t\tWebPath webPath = handlerEntry.getKey();\n\t\t\t\tMatchResult match = webPath.match(request.getHttpMethod(), request.getPath());\n\t\t\t\tif (match.matches()) {\n\t\t\t\t\treturn invoker.invoke(request, match, handlerEntry.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn notFound(request);\n\t\t} catch (Exception e) { // fault barrier\n\t\t\tlogger.log(Level.SEVERE, format(\"Unexpected exception: {0}\", e.getMessage()), e);\n\t\t\treturn invoker.toWebResponse(e);\n\t\t}\n\t}", "signature": "WebResponse dispatch(WebRequest request)", "full_signature": "public WebResponse dispatch(WebRequest request)", "class_method_signature": "WebDispatch.dispatch(WebRequest request)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "match", "getHttpMethod", "getPath", "matches", "invoke", "getValue", "notFound", "log", "format", "getMessage", "toWebResponse"]}, "repository": {"repo_id": 54854741, "url": "https://github.com/greensopinion/greenbeans", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 30, "size": 1684, "license": "licensed"}}