{"test_class": {"identifier": "AutomationSecretResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ApiDate NOW = ApiDate.now();", "modifier": "private static final", "type": "ApiDate", "declarator": "NOW = ApiDate.now()", "var_name": "NOW"}, {"original_string": "AutomationSecretResource resource;", "modifier": "", "type": "AutomationSecretResource", "declarator": "resource", "var_name": "resource"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock SecretController secretController;", "modifier": "@Mock", "type": "SecretController", "declarator": "secretController", "var_name": "secretController"}, {"original_string": "@Mock SecretController.SecretBuilder secretBuilder;", "modifier": "@Mock", "type": "SecretController.SecretBuilder", "declarator": "secretBuilder", "var_name": "secretBuilder"}, {"original_string": "@Mock AclDAO aclDAO;", "modifier": "@Mock", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "@Mock SecretDAO secretDAO;", "modifier": "@Mock", "type": "SecretDAO", "declarator": "secretDAO", "var_name": "secretDAO"}, {"original_string": "AutomationClient automation = AutomationClient.of(\n      new Client(1, \"automation\", \"Automation client\", null, NOW, \"test\", NOW, \"test\", null, null, true,\n          true));", "modifier": "", "type": "AutomationClient", "declarator": "automation = AutomationClient.of(\n      new Client(1, \"automation\", \"Automation client\", null, NOW, \"test\", NOW, \"test\", null, null, true,\n          true))", "var_name": "automation"}, {"original_string": "AuditLog auditLog = new SimpleLogger();", "modifier": "", "type": "AuditLog", "declarator": "auditLog = new SimpleLogger()", "var_name": "auditLog"}], "file": "server/src/test/java/keywhiz/service/resources/automation/AutomationSecretResourceTest.java"}, "test_case": {"identifier": "deleteSecret", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void deleteSecret() throws Exception {\n    Secret secret = new Secret(0, \"mySecret\", null, (Secret.LazyString) () -> \"meh\",\n        \"checksum\", NOW, null, NOW, null, ImmutableMap.of(), null, null, 0, 1L, NOW, null);\n\n    HashSet<Group> groups = new HashSet<>();\n    groups.add(new Group(0, \"group1\", \"\", NOW, null, NOW, null, null));\n    groups.add(new Group(0, \"group2\", \"\", NOW, null, NOW, null, null));\n\n    when(secretController.getSecretByName(secret.getName()))\n        .thenReturn(Optional.of(secret));\n    when(aclDAO.getGroupsFor(secret)).thenReturn(groups);\n\n    resource.deleteSecretSeries(automation, secret.getName());\n    verify(secretDAO).deleteSecretsByName(secret.getName());\n  }", "signature": "void deleteSecret()", "full_signature": "@Test public void deleteSecret()", "class_method_signature": "AutomationSecretResourceTest.deleteSecret()", "testcase": true, "constructor": false, "invocations": ["of", "add", "add", "thenReturn", "when", "getSecretByName", "getName", "of", "thenReturn", "when", "getGroupsFor", "deleteSecretSeries", "getName", "deleteSecretsByName", "verify", "getName"]}, "focal_class": {"identifier": "AutomationSecretResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AutomationSecretResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AutomationSecretResource.class)", "var_name": "logger"}, {"original_string": "private final SecretController secretController;", "modifier": "private final", "type": "SecretController", "declarator": "secretController", "var_name": "secretController"}, {"original_string": "private final SecretDAO secretDAO;", "modifier": "private final", "type": "SecretDAO", "declarator": "secretDAO", "var_name": "secretDAO"}, {"original_string": "private final AclDAO aclDAO;", "modifier": "private final", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "private final AuditLog auditLog;", "modifier": "private final", "type": "AuditLog", "declarator": "auditLog", "var_name": "auditLog"}], "methods": [{"identifier": "AutomationSecretResource", "parameters": "(SecretController secretController,\n                                          SecretDAOFactory secretDAOFactory, AclDAOFactory aclDAOFactory, AuditLog auditLog)", "modifiers": "@Inject public", "return": "", "signature": " AutomationSecretResource(SecretController secretController,\n                                          SecretDAOFactory secretDAOFactory, AclDAOFactory aclDAOFactory, AuditLog auditLog)", "full_signature": "@Inject public  AutomationSecretResource(SecretController secretController,\n                                          SecretDAOFactory secretDAOFactory, AclDAOFactory aclDAOFactory, AuditLog auditLog)", "class_method_signature": "AutomationSecretResource.AutomationSecretResource(SecretController secretController,\n                                          SecretDAOFactory secretDAOFactory, AclDAOFactory aclDAOFactory, AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "AutomationSecretResource", "parameters": "(SecretController secretController,\n                                              SecretDAO secretDAO, AclDAO aclDAO, AuditLog auditLog)", "modifiers": "@VisibleForTesting", "return": "", "signature": " AutomationSecretResource(SecretController secretController,\n                                              SecretDAO secretDAO, AclDAO aclDAO, AuditLog auditLog)", "full_signature": "@VisibleForTesting  AutomationSecretResource(SecretController secretController,\n                                              SecretDAO secretDAO, AclDAO aclDAO, AuditLog auditLog)", "class_method_signature": "AutomationSecretResource.AutomationSecretResource(SecretController secretController,\n                                              SecretDAO secretDAO, AclDAO aclDAO, AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "createSecret", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @Valid CreateSecretRequest request)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "AutomationSecretResponse", "signature": "AutomationSecretResponse createSecret(\n      @Auth AutomationClient automationClient,\n      @Valid CreateSecretRequest request)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public AutomationSecretResponse createSecret(\n      @Auth AutomationClient automationClient,\n      @Valid CreateSecretRequest request)", "class_method_signature": "AutomationSecretResource.createSecret(\n      @Auth AutomationClient automationClient,\n      @Valid CreateSecretRequest request)", "testcase": false, "constructor": false}, {"identifier": "readSecrets", "parameters": "(\n      @Auth AutomationClient automationClient, @QueryParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "ImmutableList<AutomationSecretResponse>", "signature": "ImmutableList<AutomationSecretResponse> readSecrets(\n      @Auth AutomationClient automationClient, @QueryParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @GET public ImmutableList<AutomationSecretResponse> readSecrets(\n      @Auth AutomationClient automationClient, @QueryParam(\"name\") String name)", "class_method_signature": "AutomationSecretResource.readSecrets(\n      @Auth AutomationClient automationClient, @QueryParam(\"name\") String name)", "testcase": false, "constructor": false}, {"identifier": "readSecretById", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretId\") LongParam secretId)", "modifiers": "@Path(\"{secretId}\") @Timed @ExceptionMetered @GET public", "return": "AutomationSecretResponse", "signature": "AutomationSecretResponse readSecretById(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretId\") LongParam secretId)", "full_signature": "@Path(\"{secretId}\") @Timed @ExceptionMetered @GET public AutomationSecretResponse readSecretById(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretId\") LongParam secretId)", "class_method_signature": "AutomationSecretResource.readSecretById(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretId\") LongParam secretId)", "testcase": false, "constructor": false}, {"identifier": "deleteSecretSeries", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretName\") String secretName)", "modifiers": "@Path(\"{secretName}\") @Timed @ExceptionMetered @DELETE public", "return": "Response", "signature": "Response deleteSecretSeries(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretName\") String secretName)", "full_signature": "@Path(\"{secretName}\") @Timed @ExceptionMetered @DELETE public Response deleteSecretSeries(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretName\") String secretName)", "class_method_signature": "AutomationSecretResource.deleteSecretSeries(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretName\") String secretName)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/automation/AutomationSecretResource.java"}, "focal_method": {"identifier": "deleteSecretSeries", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretName\") String secretName)", "modifiers": "@Path(\"{secretName}\") @Timed @ExceptionMetered @DELETE public", "return": "Response", "body": "@Path(\"{secretName}\")\n  @Timed @ExceptionMetered\n  @DELETE\n  public Response deleteSecretSeries(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretName\") String secretName) {\n\n    Secret secret = secretController.getSecretByName(secretName).orElseThrow(() -> new NotFoundException(\"Secret series not found.\"));\n    Set<String> groups = aclDAO.getGroupsFor(secret).stream().map(Group::getName).collect(toSet());\n    secretDAO.deleteSecretsByName(secretName);\n\n    // Record all groups to which this secret belongs, so they can be restored manually if necessary\n    Map<String, String> extraInfo = new HashMap<>();\n    extraInfo.put(\"deprecated\", \"true\");\n    extraInfo.put(\"groups\", groups.toString());\n    extraInfo.put(\"current version\", secret.getVersion().toString());\n    auditLog.recordEvent(new Event(Instant.now(), EventTag.SECRET_DELETE, automationClient.getName(), secretName, extraInfo));\n\n    return Response.ok().build();\n  }", "signature": "Response deleteSecretSeries(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretName\") String secretName)", "full_signature": "@Path(\"{secretName}\") @Timed @ExceptionMetered @DELETE public Response deleteSecretSeries(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretName\") String secretName)", "class_method_signature": "AutomationSecretResource.deleteSecretSeries(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"secretName\") String secretName)", "testcase": false, "constructor": false, "invocations": ["orElseThrow", "getSecretByName", "collect", "map", "stream", "getGroupsFor", "toSet", "deleteSecretsByName", "put", "put", "toString", "put", "toString", "getVersion", "recordEvent", "now", "getName", "build", "ok"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}