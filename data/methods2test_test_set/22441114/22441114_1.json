{"test_class": {"identifier": "AetherTest", "superclass": "extends AbstractAetherTest", "interfaces": "", "fields": [], "file": "clay-aether/src/test/java/ru/qatools/clay/aether/AetherTest.java"}, "test_case": {"identifier": "resolveWithoutTransitivesTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resolveWithoutTransitivesTest() throws Exception {\n        List<ArtifactResult> results = aether(localRepo, mavenSettings)\n                .resolve(ALLURE_MODEL, false).get();\n\n        assertThat(results.size(), is(1));\n    }", "signature": "void resolveWithoutTransitivesTest()", "full_signature": "@Test public void resolveWithoutTransitivesTest()", "class_method_signature": "AetherTest.resolveWithoutTransitivesTest()", "testcase": true, "constructor": false, "invocations": ["get", "resolve", "aether", "assertThat", "size", "is"]}, "focal_class": {"identifier": "Aether", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MAVEN_CENTRAL_URL = \"http://repo1.maven.org/maven2\";", "modifier": "public static final", "type": "String", "declarator": "MAVEN_CENTRAL_URL = \"http://repo1.maven.org/maven2\"", "var_name": "MAVEN_CENTRAL_URL"}, {"original_string": "public static final String POM_EXTENSION = \"pom\";", "modifier": "public static final", "type": "String", "declarator": "POM_EXTENSION = \"pom\"", "var_name": "POM_EXTENSION"}, {"original_string": "public static final String MODEL_VERSION = \"4.0.0\";", "modifier": "public static final", "type": "String", "declarator": "MODEL_VERSION = \"4.0.0\"", "var_name": "MODEL_VERSION"}, {"original_string": "public static final String JAR = \"jar\";", "modifier": "public static final", "type": "String", "declarator": "JAR = \"jar\"", "var_name": "JAR"}, {"original_string": "public static final String POM_XML = \"pom.xml\";", "modifier": "public static final", "type": "String", "declarator": "POM_XML = \"pom.xml\"", "var_name": "POM_XML"}, {"original_string": "public static final String AETHER_TEMP_FILE_PREFIX = \"clay-aether\";", "modifier": "public static final", "type": "String", "declarator": "AETHER_TEMP_FILE_PREFIX = \"clay-aether\"", "var_name": "AETHER_TEMP_FILE_PREFIX"}, {"original_string": "private RepositorySystemSession session;", "modifier": "private", "type": "RepositorySystemSession", "declarator": "session", "var_name": "session"}, {"original_string": "private RepositorySystem system;", "modifier": "private", "type": "RepositorySystem", "declarator": "system", "var_name": "system"}, {"original_string": "private List<RemoteRepository> repositories;", "modifier": "private", "type": "List<RemoteRepository>", "declarator": "repositories", "var_name": "repositories"}, {"original_string": "private String scope = JavaScopes.RUNTIME;", "modifier": "private", "type": "String", "declarator": "scope = JavaScopes.RUNTIME", "var_name": "scope"}], "methods": [{"identifier": "Aether", "parameters": "(File localRepoDir, Settings settings)", "modifiers": "", "return": "", "signature": " Aether(File localRepoDir, Settings settings)", "full_signature": "  Aether(File localRepoDir, Settings settings)", "class_method_signature": "Aether.Aether(File localRepoDir, Settings settings)", "testcase": false, "constructor": true}, {"identifier": "Aether", "parameters": "(RepositorySystem system, RepositorySystemSession session, List<RemoteRepository> repositories)", "modifiers": "", "return": "", "signature": " Aether(RepositorySystem system, RepositorySystemSession session, List<RemoteRepository> repositories)", "full_signature": "  Aether(RepositorySystem system, RepositorySystemSession session, List<RemoteRepository> repositories)", "class_method_signature": "Aether.Aether(RepositorySystem system, RepositorySystemSession session, List<RemoteRepository> repositories)", "testcase": false, "constructor": true}, {"identifier": "aether", "parameters": "(File localRepoDir)", "modifiers": "public static", "return": "Aether", "signature": "Aether aether(File localRepoDir)", "full_signature": "public static Aether aether(File localRepoDir)", "class_method_signature": "Aether.aether(File localRepoDir)", "testcase": false, "constructor": false}, {"identifier": "aether", "parameters": "(File localRepoDir, Settings settings)", "modifiers": "public static", "return": "Aether", "signature": "Aether aether(File localRepoDir, Settings settings)", "full_signature": "public static Aether aether(File localRepoDir, Settings settings)", "class_method_signature": "Aether.aether(File localRepoDir, Settings settings)", "testcase": false, "constructor": false}, {"identifier": "aether", "parameters": "(Settings settings)", "modifiers": "public static", "return": "Aether", "signature": "Aether aether(Settings settings)", "full_signature": "public static Aether aether(Settings settings)", "class_method_signature": "Aether.aether(Settings settings)", "testcase": false, "constructor": false}, {"identifier": "aether", "parameters": "(RepositorySystem system, RepositorySystemSession session, List<RemoteRepository> repositories)", "modifiers": "public static", "return": "Aether", "signature": "Aether aether(RepositorySystem system, RepositorySystemSession session, List<RemoteRepository> repositories)", "full_signature": "public static Aether aether(RepositorySystem system, RepositorySystemSession session, List<RemoteRepository> repositories)", "class_method_signature": "Aether.aether(RepositorySystem system, RepositorySystemSession session, List<RemoteRepository> repositories)", "testcase": false, "constructor": false}, {"identifier": "scope", "parameters": "(String scope)", "modifiers": "public", "return": "Aether", "signature": "Aether scope(String scope)", "full_signature": "public Aether scope(String scope)", "class_method_signature": "Aether.scope(String scope)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String artifactCoordinates)", "modifiers": "public", "return": "AetherResult", "signature": "AetherResult resolve(String artifactCoordinates)", "full_signature": "public AetherResult resolve(String artifactCoordinates)", "class_method_signature": "Aether.resolve(String artifactCoordinates)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(Artifact artifact)", "modifiers": "public", "return": "AetherResult", "signature": "AetherResult resolve(Artifact artifact)", "full_signature": "public AetherResult resolve(Artifact artifact)", "class_method_signature": "Aether.resolve(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String artifactCoordinates, boolean withTransitives)", "modifiers": "public", "return": "AetherResult", "signature": "AetherResult resolve(String artifactCoordinates, boolean withTransitives)", "full_signature": "public AetherResult resolve(String artifactCoordinates, boolean withTransitives)", "class_method_signature": "Aether.resolve(String artifactCoordinates, boolean withTransitives)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(Artifact artifact, boolean withTransitives)", "modifiers": "public", "return": "AetherResult", "signature": "AetherResult resolve(Artifact artifact, boolean withTransitives)", "full_signature": "public AetherResult resolve(Artifact artifact, boolean withTransitives)", "class_method_signature": "Aether.resolve(Artifact artifact, boolean withTransitives)", "testcase": false, "constructor": false}, {"identifier": "resolveAll", "parameters": "(String... artifactsCoordinates)", "modifiers": "public", "return": "AetherResult", "signature": "AetherResult resolveAll(String... artifactsCoordinates)", "full_signature": "public AetherResult resolveAll(String... artifactsCoordinates)", "class_method_signature": "Aether.resolveAll(String... artifactsCoordinates)", "testcase": false, "constructor": false}, {"identifier": "resolveAll", "parameters": "(Artifact... artifacts)", "modifiers": "public", "return": "AetherResult", "signature": "AetherResult resolveAll(Artifact... artifacts)", "full_signature": "public AetherResult resolveAll(Artifact... artifacts)", "class_method_signature": "Aether.resolveAll(Artifact... artifacts)", "testcase": false, "constructor": false}, {"identifier": "resolveWithTransitives", "parameters": "(Artifact artifact)", "modifiers": "protected", "return": "AetherResult", "signature": "AetherResult resolveWithTransitives(Artifact artifact)", "full_signature": "protected AetherResult resolveWithTransitives(Artifact artifact)", "class_method_signature": "Aether.resolveWithTransitives(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "resolveWithoutTransitives", "parameters": "(Artifact... artifacts)", "modifiers": "protected", "return": "AetherResult", "signature": "AetherResult resolveWithoutTransitives(Artifact... artifacts)", "full_signature": "protected AetherResult resolveWithoutTransitives(Artifact... artifacts)", "class_method_signature": "Aether.resolveWithoutTransitives(Artifact... artifacts)", "testcase": false, "constructor": false}, {"identifier": "buildArtifactRequests", "parameters": "(Artifact... artifacts)", "modifiers": "protected", "return": "List<ArtifactRequest>", "signature": "List<ArtifactRequest> buildArtifactRequests(Artifact... artifacts)", "full_signature": "protected List<ArtifactRequest> buildArtifactRequests(Artifact... artifacts)", "class_method_signature": "Aether.buildArtifactRequests(Artifact... artifacts)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(String artifactCoordinates)", "modifiers": "public", "return": "List<Artifact>", "signature": "List<Artifact> collect(String artifactCoordinates)", "full_signature": "public List<Artifact> collect(String artifactCoordinates)", "class_method_signature": "Aether.collect(String artifactCoordinates)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(Artifact artifact)", "modifiers": "public", "return": "List<Artifact>", "signature": "List<Artifact> collect(Artifact artifact)", "full_signature": "public List<Artifact> collect(Artifact artifact)", "class_method_signature": "Aether.collect(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "(File jar, String groupId, String artifactId, String version)", "modifiers": "public", "return": "void", "signature": "void install(File jar, String groupId, String artifactId, String version)", "full_signature": "public void install(File jar, String groupId, String artifactId, String version)", "class_method_signature": "Aether.install(File jar, String groupId, String artifactId, String version)", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "(File jar, String groupId, String artifactId, String extension, String version)", "modifiers": "public", "return": "void", "signature": "void install(File jar, String groupId, String artifactId, String extension, String version)", "full_signature": "public void install(File jar, String groupId, String artifactId, String extension, String version)", "class_method_signature": "Aether.install(File jar, String groupId, String artifactId, String extension, String version)", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "(File jar, String groupId, String artifactId, String classifier, String extension, String version)", "modifiers": "public", "return": "void", "signature": "void install(File jar, String groupId, String artifactId, String classifier, String extension, String version)", "full_signature": "public void install(File jar, String groupId, String artifactId, String classifier, String extension, String version)", "class_method_signature": "Aether.install(File jar, String groupId, String artifactId, String classifier, String extension, String version)", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "(File jar, File pom, String groupId, String artifactId, String classifier, String extension, String version)", "modifiers": "public", "return": "void", "signature": "void install(File jar, File pom, String groupId, String artifactId, String classifier, String extension, String version)", "full_signature": "public void install(File jar, File pom, String groupId, String artifactId, String classifier, String extension, String version)", "class_method_signature": "Aether.install(File jar, File pom, String groupId, String artifactId, String classifier, String extension, String version)", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "(Artifact... artifacts)", "modifiers": "public", "return": "void", "signature": "void install(Artifact... artifacts)", "full_signature": "public void install(Artifact... artifacts)", "class_method_signature": "Aether.install(Artifact... artifacts)", "testcase": false, "constructor": false}, {"identifier": "deploy", "parameters": "(DistributionManagement distribution, File jar, String groupId, String artifactId, String version)", "modifiers": "public", "return": "void", "signature": "void deploy(DistributionManagement distribution, File jar, String groupId, String artifactId, String version)", "full_signature": "public void deploy(DistributionManagement distribution, File jar, String groupId, String artifactId, String version)", "class_method_signature": "Aether.deploy(DistributionManagement distribution, File jar, String groupId, String artifactId, String version)", "testcase": false, "constructor": false}, {"identifier": "deploy", "parameters": "(DistributionManagement distribution, File jar, String groupId, String artifactId,\n                       String extension, String version)", "modifiers": "public", "return": "void", "signature": "void deploy(DistributionManagement distribution, File jar, String groupId, String artifactId,\n                       String extension, String version)", "full_signature": "public void deploy(DistributionManagement distribution, File jar, String groupId, String artifactId,\n                       String extension, String version)", "class_method_signature": "Aether.deploy(DistributionManagement distribution, File jar, String groupId, String artifactId,\n                       String extension, String version)", "testcase": false, "constructor": false}, {"identifier": "deploy", "parameters": "(DistributionManagement distribution, File jar, String groupId, String artifactId,\n                       String classifier, String extension, String version)", "modifiers": "public", "return": "void", "signature": "void deploy(DistributionManagement distribution, File jar, String groupId, String artifactId,\n                       String classifier, String extension, String version)", "full_signature": "public void deploy(DistributionManagement distribution, File jar, String groupId, String artifactId,\n                       String classifier, String extension, String version)", "class_method_signature": "Aether.deploy(DistributionManagement distribution, File jar, String groupId, String artifactId,\n                       String classifier, String extension, String version)", "testcase": false, "constructor": false}, {"identifier": "deploy", "parameters": "(DistributionManagement distribution, File jar, File pom, String groupId, String artifactId,\n                       String classifier, String extension, String version)", "modifiers": "public", "return": "void", "signature": "void deploy(DistributionManagement distribution, File jar, File pom, String groupId, String artifactId,\n                       String classifier, String extension, String version)", "full_signature": "public void deploy(DistributionManagement distribution, File jar, File pom, String groupId, String artifactId,\n                       String classifier, String extension, String version)", "class_method_signature": "Aether.deploy(DistributionManagement distribution, File jar, File pom, String groupId, String artifactId,\n                       String classifier, String extension, String version)", "testcase": false, "constructor": false}, {"identifier": "deploy", "parameters": "(DistributionManagement distribution, Artifact... artifacts)", "modifiers": "public", "return": "void", "signature": "void deploy(DistributionManagement distribution, Artifact... artifacts)", "full_signature": "public void deploy(DistributionManagement distribution, Artifact... artifacts)", "class_method_signature": "Aether.deploy(DistributionManagement distribution, Artifact... artifacts)", "testcase": false, "constructor": false}, {"identifier": "createPomFile", "parameters": "(String groupId, String artifactId, String version)", "modifiers": "protected", "return": "File", "signature": "File createPomFile(String groupId, String artifactId, String version)", "full_signature": "protected File createPomFile(String groupId, String artifactId, String version)", "class_method_signature": "Aether.createPomFile(String groupId, String artifactId, String version)", "testcase": false, "constructor": false}, {"identifier": "repositories", "parameters": "()", "modifiers": "protected", "return": "List<RemoteRepository>", "signature": "List<RemoteRepository> repositories()", "full_signature": "protected List<RemoteRepository> repositories()", "class_method_signature": "Aether.repositories()", "testcase": false, "constructor": false}], "file": "clay-aether/src/main/java/ru/qatools/clay/aether/Aether.java"}, "focal_method": {"identifier": "resolveWithoutTransitives", "parameters": "(Artifact... artifacts)", "modifiers": "protected", "return": "AetherResult", "body": "protected AetherResult resolveWithoutTransitives(Artifact... artifacts) throws AetherException {\n        try {\n            return new AetherResult(system.resolveArtifacts(session, buildArtifactRequests(artifacts)));\n        } catch (ArtifactResolutionException e) {\n            throw new AetherException(\"Can't resolve one or more given artifacts \" + Arrays.toString(artifacts), e);\n        }\n    }", "signature": "AetherResult resolveWithoutTransitives(Artifact... artifacts)", "full_signature": "protected AetherResult resolveWithoutTransitives(Artifact... artifacts)", "class_method_signature": "Aether.resolveWithoutTransitives(Artifact... artifacts)", "testcase": false, "constructor": false, "invocations": ["resolveArtifacts", "buildArtifactRequests", "toString"]}, "repository": {"repo_id": 22441114, "url": "https://github.com/camelot-framework/clay", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 474, "license": "licensed"}}