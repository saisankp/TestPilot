{"test_class": {"identifier": "DefaultEquinoxInstallationFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<ArtifactKey, File> bundles;", "modifier": "private", "type": "Map<ArtifactKey, File>", "declarator": "bundles", "var_name": "bundles"}, {"original_string": "private DefaultEquinoxInstallationDescription instDesc;", "modifier": "private", "type": "DefaultEquinoxInstallationDescription", "declarator": "instDesc", "var_name": "instDesc"}, {"original_string": "private BundleStartLevel defaultLevel;", "modifier": "private", "type": "BundleStartLevel", "declarator": "defaultLevel", "var_name": "defaultLevel"}, {"original_string": "private DefaultEquinoxInstallationFactory subject;", "modifier": "private", "type": "DefaultEquinoxInstallationFactory", "declarator": "subject", "var_name": "subject"}], "file": "sisu-equinox/sisu-equinox-launching/src/test/java/org/eclipse/sisu/equinox/launching/internal/DefaultEquinoxInstallationFactoryTest.java"}, "test_case": {"identifier": "testExplicitlyConfiguredAutoStart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExplicitlyConfiguredAutoStart() throws Exception {\n        instDesc.addBundleStartLevel(new BundleStartLevel(\"org.example.bundle1\", 0, true)); // level attribute omitted\n\n        List<String> config = splitAtComma(\n                subject.toOsgiBundles(bundles, instDesc.getBundleStartLevel(), defaultLevel));\n        assertThat(config, hasItem(\"reference:file:absolute/path/to/bundle1@start\")); // implicitly use default start level\n    }", "signature": "void testExplicitlyConfiguredAutoStart()", "full_signature": "@Test public void testExplicitlyConfiguredAutoStart()", "class_method_signature": "DefaultEquinoxInstallationFactoryTest.testExplicitlyConfiguredAutoStart()", "testcase": true, "constructor": false, "invocations": ["addBundleStartLevel", "splitAtComma", "toOsgiBundles", "getBundleStartLevel", "assertThat", "hasItem"]}, "focal_class": {"identifier": "DefaultEquinoxInstallationFactory", "superclass": "", "interfaces": "implements EquinoxInstallationFactory", "fields": [{"original_string": "@Requirement\n    private PlexusContainer plexus;", "modifier": "@Requirement\n    private", "type": "PlexusContainer", "declarator": "plexus", "var_name": "plexus"}, {"original_string": "@Requirement\n    private BundleReader manifestReader;", "modifier": "@Requirement\n    private", "type": "BundleReader", "declarator": "manifestReader", "var_name": "manifestReader"}, {"original_string": "@Requirement\n    private Logger log;", "modifier": "@Requirement\n    private", "type": "Logger", "declarator": "log", "var_name": "log"}], "methods": [{"identifier": "DefaultEquinoxInstallationFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultEquinoxInstallationFactory()", "full_signature": "public  DefaultEquinoxInstallationFactory()", "class_method_signature": "DefaultEquinoxInstallationFactory.DefaultEquinoxInstallationFactory()", "testcase": false, "constructor": true}, {"identifier": "DefaultEquinoxInstallationFactory", "parameters": "(Logger log)", "modifiers": "", "return": "", "signature": " DefaultEquinoxInstallationFactory(Logger log)", "full_signature": "  DefaultEquinoxInstallationFactory(Logger log)", "class_method_signature": "DefaultEquinoxInstallationFactory.DefaultEquinoxInstallationFactory(Logger log)", "testcase": false, "constructor": true}, {"identifier": "createInstallation", "parameters": "(EquinoxInstallationDescription description, File location)", "modifiers": "@Override public", "return": "EquinoxInstallation", "signature": "EquinoxInstallation createInstallation(EquinoxInstallationDescription description, File location)", "full_signature": "@Override public EquinoxInstallation createInstallation(EquinoxInstallationDescription description, File location)", "class_method_signature": "DefaultEquinoxInstallationFactory.createInstallation(EquinoxInstallationDescription description, File location)", "testcase": false, "constructor": false}, {"identifier": "createDevProperties", "parameters": "(File location, Map<String, String> devEntries)", "modifiers": "private", "return": "String", "signature": "String createDevProperties(File location, Map<String, String> devEntries)", "full_signature": "private String createDevProperties(File location, Map<String, String> devEntries)", "class_method_signature": "DefaultEquinoxInstallationFactory.createDevProperties(File location, Map<String, String> devEntries)", "testcase": false, "constructor": false}, {"identifier": "unpack", "parameters": "(File source, File destination)", "modifiers": "protected", "return": "void", "signature": "void unpack(File source, File destination)", "full_signature": "protected void unpack(File source, File destination)", "class_method_signature": "DefaultEquinoxInstallationFactory.unpack(File source, File destination)", "testcase": false, "constructor": false}, {"identifier": "unpackFrameworkExtensions", "parameters": "(File location, Collection<File> frameworkExtensions)", "modifiers": "private", "return": "List<String>", "signature": "List<String> unpackFrameworkExtensions(File location, Collection<File> frameworkExtensions)", "full_signature": "private List<String> unpackFrameworkExtensions(File location, Collection<File> frameworkExtensions)", "class_method_signature": "DefaultEquinoxInstallationFactory.unpackFrameworkExtensions(File location, Collection<File> frameworkExtensions)", "testcase": false, "constructor": false}, {"identifier": "copySystemBundle", "parameters": "(EquinoxInstallationDescription description, File location)", "modifiers": "private", "return": "String", "signature": "String copySystemBundle(EquinoxInstallationDescription description, File location)", "full_signature": "private String copySystemBundle(EquinoxInstallationDescription description, File location)", "class_method_signature": "DefaultEquinoxInstallationFactory.copySystemBundle(EquinoxInstallationDescription description, File location)", "testcase": false, "constructor": false}, {"identifier": "toOsgiBundles", "parameters": "(Map<ArtifactKey, File> bundles, Map<String, BundleStartLevel> startLevel,\n            BundleStartLevel defaultStartLevel)", "modifiers": "protected", "return": "String", "signature": "String toOsgiBundles(Map<ArtifactKey, File> bundles, Map<String, BundleStartLevel> startLevel,\n            BundleStartLevel defaultStartLevel)", "full_signature": "protected String toOsgiBundles(Map<ArtifactKey, File> bundles, Map<String, BundleStartLevel> startLevel,\n            BundleStartLevel defaultStartLevel)", "class_method_signature": "DefaultEquinoxInstallationFactory.toOsgiBundles(Map<ArtifactKey, File> bundles, Map<String, BundleStartLevel> startLevel,\n            BundleStartLevel defaultStartLevel)", "testcase": false, "constructor": false}, {"identifier": "appendAbsolutePath", "parameters": "(File file)", "modifiers": "private", "return": "String", "signature": "String appendAbsolutePath(File file)", "full_signature": "private String appendAbsolutePath(File file)", "class_method_signature": "DefaultEquinoxInstallationFactory.appendAbsolutePath(File file)", "testcase": false, "constructor": false}], "file": "sisu-equinox/sisu-equinox-launching/src/main/java/org/eclipse/sisu/equinox/launching/internal/DefaultEquinoxInstallationFactory.java"}, "focal_method": {"identifier": "toOsgiBundles", "parameters": "(Map<ArtifactKey, File> bundles, Map<String, BundleStartLevel> startLevel,\n            BundleStartLevel defaultStartLevel)", "modifiers": "protected", "return": "String", "body": "protected String toOsgiBundles(Map<ArtifactKey, File> bundles, Map<String, BundleStartLevel> startLevel,\n            BundleStartLevel defaultStartLevel) throws IOException {\n        log.debug(\"Installation OSGI bundles:\");\n        StringBuilder result = new StringBuilder();\n        for (Map.Entry<ArtifactKey, File> entry : bundles.entrySet()) {\n            BundleStartLevel level = startLevel.get(entry.getKey().getId());\n            if (level != null && level.getLevel() == -1) {\n                continue; // system bundle\n            }\n            if (result.length() > 0) {\n                result.append(\",\");\n            }\n\n            StringBuilder line = new StringBuilder();\n            line.append(appendAbsolutePath(entry.getValue()));\n            if (level != null) {\n                line.append('@');\n                if (level.getLevel() > 0) {\n                    line.append(level.getLevel());\n                }\n                if (level.isAutoStart()) {\n                    if (line.charAt(line.length() - 1) == '@') {\n                        line.append(\"start\");\n                    } else {\n                        line.append(\":start\");\n                    }\n                }\n            } else {\n                if (defaultStartLevel.isAutoStart()) {\n                    line.append(\"@start\");\n                }\n            }\n            log.debug(\"\\t\" + line);\n            result.append(line.toString());\n        }\n        return result.toString();\n    }", "signature": "String toOsgiBundles(Map<ArtifactKey, File> bundles, Map<String, BundleStartLevel> startLevel,\n            BundleStartLevel defaultStartLevel)", "full_signature": "protected String toOsgiBundles(Map<ArtifactKey, File> bundles, Map<String, BundleStartLevel> startLevel,\n            BundleStartLevel defaultStartLevel)", "class_method_signature": "DefaultEquinoxInstallationFactory.toOsgiBundles(Map<ArtifactKey, File> bundles, Map<String, BundleStartLevel> startLevel,\n            BundleStartLevel defaultStartLevel)", "testcase": false, "constructor": false, "invocations": ["debug", "entrySet", "get", "getId", "getKey", "getLevel", "length", "append", "append", "appendAbsolutePath", "getValue", "append", "getLevel", "append", "getLevel", "isAutoStart", "charAt", "length", "append", "append", "isAutoStart", "append", "debug", "append", "toString", "toString"]}, "repository": {"repo_id": 2666698, "url": "https://github.com/eclipse/tycho", "language": "Java", "is_fork": false, "fork_count": 67, "stargazer_count": 61, "size": 22429, "license": "licensed"}}