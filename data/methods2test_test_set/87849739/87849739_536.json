{"test_class": {"identifier": "RootRouteExceptionHandlerTest", "superclass": "extends JUnitRouteTest", "interfaces": "", "fields": [{"original_string": "private static final String ROUTE_PATH = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "ROUTE_PATH = \"foo\"", "var_name": "ROUTE_PATH"}, {"original_string": "private static final HttpRequest HTTP_REQUEST = HttpRequest.GET(\"/\" + ROUTE_PATH);", "modifier": "private static final", "type": "HttpRequest", "declarator": "HTTP_REQUEST = HttpRequest.GET(\"/\" + ROUTE_PATH)", "var_name": "HTTP_REQUEST"}, {"original_string": "@Rule\n    public final TestName testName = new TestName();", "modifier": "@Rule\n    public final", "type": "TestName", "declarator": "testName = new TestName()", "var_name": "testName"}, {"original_string": "@Mock\n    private Function<DittoRuntimeException, HttpResponse> dreToHttpResponse;", "modifier": "@Mock\n    private", "type": "Function<DittoRuntimeException, HttpResponse>", "declarator": "dreToHttpResponse", "var_name": "dreToHttpResponse"}, {"original_string": "private ExceptionHandler underTest;", "modifier": "private", "type": "ExceptionHandler", "declarator": "underTest", "var_name": "underTest"}], "file": "services/gateway/endpoints/src/test/java/org/eclipse/ditto/services/gateway/endpoints/routes/RootRouteExceptionHandlerTest.java"}, "test_case": {"identifier": "tryToGetInstanceWithNullFunction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tryToGetInstanceWithNullFunction() {\n        assertThatNullPointerException()\n                .isThrownBy(() -> RootRouteExceptionHandler.getInstance(null))\n                .withMessage(\"The dittoRuntimeExceptionToHttpResponse must not be null!\")\n                .withNoCause();\n    }", "signature": "void tryToGetInstanceWithNullFunction()", "full_signature": "@Test public void tryToGetInstanceWithNullFunction()", "class_method_signature": "RootRouteExceptionHandlerTest.tryToGetInstanceWithNullFunction()", "testcase": true, "constructor": false, "invocations": ["withNoCause", "withMessage", "isThrownBy", "assertThatNullPointerException", "getInstance"]}, "focal_class": {"identifier": "RootRouteExceptionHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DittoLogger LOGGER = DittoLoggerFactory.getLogger(RootRouteExceptionHandler.class);", "modifier": "private static final", "type": "DittoLogger", "declarator": "LOGGER = DittoLoggerFactory.getLogger(RootRouteExceptionHandler.class)", "var_name": "LOGGER"}, {"original_string": "private final Function<DittoRuntimeException, HttpResponse> dreToHttpResponse;", "modifier": "private final", "type": "Function<DittoRuntimeException, HttpResponse>", "declarator": "dreToHttpResponse", "var_name": "dreToHttpResponse"}], "methods": [{"identifier": "RootRouteExceptionHandler", "parameters": "(final Function<DittoRuntimeException, HttpResponse> dreToHttpResponse)", "modifiers": "private", "return": "", "signature": " RootRouteExceptionHandler(final Function<DittoRuntimeException, HttpResponse> dreToHttpResponse)", "full_signature": "private  RootRouteExceptionHandler(final Function<DittoRuntimeException, HttpResponse> dreToHttpResponse)", "class_method_signature": "RootRouteExceptionHandler.RootRouteExceptionHandler(final Function<DittoRuntimeException, HttpResponse> dreToHttpResponse)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(\n            final Function<DittoRuntimeException, HttpResponse> dittoRuntimeExceptionToHttpResponse)", "modifiers": "public static", "return": "ExceptionHandler", "signature": "ExceptionHandler getInstance(\n            final Function<DittoRuntimeException, HttpResponse> dittoRuntimeExceptionToHttpResponse)", "full_signature": "public static ExceptionHandler getInstance(\n            final Function<DittoRuntimeException, HttpResponse> dittoRuntimeExceptionToHttpResponse)", "class_method_signature": "RootRouteExceptionHandler.getInstance(\n            final Function<DittoRuntimeException, HttpResponse> dittoRuntimeExceptionToHttpResponse)", "testcase": false, "constructor": false}, {"identifier": "handleDittoRuntimeException", "parameters": "(final DittoRuntimeException dittoRuntimeException)", "modifiers": "private", "return": "Route", "signature": "Route handleDittoRuntimeException(final DittoRuntimeException dittoRuntimeException)", "full_signature": "private Route handleDittoRuntimeException(final DittoRuntimeException dittoRuntimeException)", "class_method_signature": "RootRouteExceptionHandler.handleDittoRuntimeException(final DittoRuntimeException dittoRuntimeException)", "testcase": false, "constructor": false}, {"identifier": "logException", "parameters": "(final DittoRuntimeException exception)", "modifiers": "private static", "return": "void", "signature": "void logException(final DittoRuntimeException exception)", "full_signature": "private static void logException(final DittoRuntimeException exception)", "class_method_signature": "RootRouteExceptionHandler.logException(final DittoRuntimeException exception)", "testcase": false, "constructor": false}, {"identifier": "handleInternalServerError", "parameters": "(final Throwable cause)", "modifiers": "private static", "return": "Route", "signature": "Route handleInternalServerError(final Throwable cause)", "full_signature": "private static Route handleInternalServerError(final Throwable cause)", "class_method_signature": "RootRouteExceptionHandler.handleInternalServerError(final Throwable cause)", "testcase": false, "constructor": false}], "file": "services/gateway/endpoints/src/main/java/org/eclipse/ditto/services/gateway/endpoints/routes/RootRouteExceptionHandler.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(\n            final Function<DittoRuntimeException, HttpResponse> dittoRuntimeExceptionToHttpResponse)", "modifiers": "public static", "return": "ExceptionHandler", "body": "public static ExceptionHandler getInstance(\n            final Function<DittoRuntimeException, HttpResponse> dittoRuntimeExceptionToHttpResponse) {\n\n        final RootRouteExceptionHandler rootRouteExceptionHandler =\n                new RootRouteExceptionHandler(dittoRuntimeExceptionToHttpResponse);\n\n        final FI.TypedPredicate<CompletionException> isCausedByDittoRuntimeException = exception -> {\n            @Nullable final Throwable cause = exception.getCause();\n            return cause instanceof DittoRuntimeException;\n        };\n\n        final FI.TypedPredicate<CompletionException> isCausedByJsonRuntimeException = exception -> {\n            @Nullable final Throwable cause = exception.getCause();\n            return cause instanceof JsonRuntimeException;\n        };\n\n        return ExceptionHandler.newBuilder()\n                .match(DittoRuntimeException.class, rootRouteExceptionHandler::handleDittoRuntimeException)\n                .match(JsonRuntimeException.class, jsonRuntimeException -> {\n                    final DittoRuntimeException dittoJsonException = new DittoJsonException(jsonRuntimeException);\n                    return rootRouteExceptionHandler.handleDittoRuntimeException(dittoJsonException);\n                })\n                .match(CompletionException.class, isCausedByDittoRuntimeException, ce -> {\n                    final DittoRuntimeException dittoRuntimeException = (DittoRuntimeException) ce.getCause();\n                    return rootRouteExceptionHandler.handleDittoRuntimeException(dittoRuntimeException);\n                })\n                .match(CompletionException.class, isCausedByJsonRuntimeException, ce -> {\n                    final JsonRuntimeException jsonRuntimeException = (JsonRuntimeException) ce.getCause();\n                    final DittoRuntimeException dittoRuntimeException = new DittoJsonException(jsonRuntimeException);\n                    return rootRouteExceptionHandler.handleDittoRuntimeException(dittoRuntimeException);\n                })\n                .matchAny(RootRouteExceptionHandler::handleInternalServerError)\n                .build();\n    }", "signature": "ExceptionHandler getInstance(\n            final Function<DittoRuntimeException, HttpResponse> dittoRuntimeExceptionToHttpResponse)", "full_signature": "public static ExceptionHandler getInstance(\n            final Function<DittoRuntimeException, HttpResponse> dittoRuntimeExceptionToHttpResponse)", "class_method_signature": "RootRouteExceptionHandler.getInstance(\n            final Function<DittoRuntimeException, HttpResponse> dittoRuntimeExceptionToHttpResponse)", "testcase": false, "constructor": false, "invocations": ["getCause", "getCause", "build", "matchAny", "match", "match", "match", "match", "newBuilder", "handleDittoRuntimeException", "getCause", "handleDittoRuntimeException", "getCause", "handleDittoRuntimeException"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}