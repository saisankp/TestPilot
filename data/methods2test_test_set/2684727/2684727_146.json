{"test_class": {"identifier": "IntentImportProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "IntentImportProcessor intentImportProcessor;", "modifier": "", "type": "IntentImportProcessor", "declarator": "intentImportProcessor", "var_name": "intentImportProcessor"}, {"original_string": "IntentImportProcessor mockContentIntentImportProcessor;", "modifier": "", "type": "IntentImportProcessor", "declarator": "mockContentIntentImportProcessor", "var_name": "mockContentIntentImportProcessor"}, {"original_string": "@Mock\n    Analytics analytics;", "modifier": "@Mock", "type": "Analytics", "declarator": "analytics", "var_name": "analytics"}, {"original_string": "@Mock\n    Context context;", "modifier": "@Mock", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    ContentResolver contentResolver;", "modifier": "@Mock", "type": "ContentResolver", "declarator": "contentResolver", "var_name": "contentResolver"}], "file": "app/src/test/java/co/smartreceipts/android/imports/intents/IntentImportProcessorTest.java"}, "test_case": {"identifier": "processMainIntent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void processMainIntent() {\n        final Intent intent = new Intent(Intent.ACTION_MAIN);\n        final TestObserver<IntentImportResult> testObserver = intentImportProcessor.process(intent).test();\n        testObserver.awaitTerminalEvent();\n        testObserver.assertNoValues()\n                .assertComplete()\n                .assertNoErrors();\n    }", "signature": "void processMainIntent()", "full_signature": "@Test public void processMainIntent()", "class_method_signature": "IntentImportProcessorTest.processMainIntent()", "testcase": true, "constructor": false, "invocations": ["test", "process", "awaitTerminalEvent", "assertNoErrors", "assertComplete", "assertNoValues"]}, "focal_class": {"identifier": "IntentImportProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INTENT_CONSUMED = \"co.smartreceipts.android.INTENT_CONSUMED\";", "modifier": "private static final", "type": "String", "declarator": "INTENT_CONSUMED = \"co.smartreceipts.android.INTENT_CONSUMED\"", "var_name": "INTENT_CONSUMED"}, {"original_string": "private static final Set<String> SUPPORTED_SMR_MIME_TYPES = new HashSet<>(Arrays.asList(\"application/octet-stream\", \"application/zip\", \"application/x-zip\", \"application/binary\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "SUPPORTED_SMR_MIME_TYPES = new HashSet<>(Arrays.asList(\"application/octet-stream\", \"application/zip\", \"application/x-zip\", \"application/binary\"))", "var_name": "SUPPORTED_SMR_MIME_TYPES"}, {"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private final Analytics analytics;", "modifier": "private final", "type": "Analytics", "declarator": "analytics", "var_name": "analytics"}, {"original_string": "private Subject<Optional<IntentImportResult>> lastResult = BehaviorSubject.createDefault(Optional.absent());", "modifier": "private", "type": "Subject<Optional<IntentImportResult>>", "declarator": "lastResult = BehaviorSubject.createDefault(Optional.absent())", "var_name": "lastResult"}], "methods": [{"identifier": "IntentImportProcessor", "parameters": "(@NonNull Context context, @NonNull Analytics analytics)", "modifiers": "@Inject public", "return": "", "signature": " IntentImportProcessor(@NonNull Context context, @NonNull Analytics analytics)", "full_signature": "@Inject public  IntentImportProcessor(@NonNull Context context, @NonNull Analytics analytics)", "class_method_signature": "IntentImportProcessor.IntentImportProcessor(@NonNull Context context, @NonNull Analytics analytics)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(@NonNull final Intent intent)", "modifiers": "@NonNull public synchronized", "return": "Maybe<IntentImportResult>", "signature": "Maybe<IntentImportResult> process(@NonNull final Intent intent)", "full_signature": "@NonNull public synchronized Maybe<IntentImportResult> process(@NonNull final Intent intent)", "class_method_signature": "IntentImportProcessor.process(@NonNull final Intent intent)", "testcase": false, "constructor": false}, {"identifier": "markIntentAsSuccessfullyProcessed", "parameters": "(@NonNull Intent intent)", "modifiers": "public synchronized", "return": "void", "signature": "void markIntentAsSuccessfullyProcessed(@NonNull Intent intent)", "full_signature": "public synchronized void markIntentAsSuccessfullyProcessed(@NonNull Intent intent)", "class_method_signature": "IntentImportProcessor.markIntentAsSuccessfullyProcessed(@NonNull Intent intent)", "testcase": false, "constructor": false}, {"identifier": "getLastResult", "parameters": "()", "modifiers": "public synchronized", "return": "Observable<Optional<IntentImportResult>>", "signature": "Observable<Optional<IntentImportResult>> getLastResult()", "full_signature": "public synchronized Observable<Optional<IntentImportResult>> getLastResult()", "class_method_signature": "IntentImportProcessor.getLastResult()", "testcase": false, "constructor": false}, {"identifier": "buildResultFromUri", "parameters": "(@NonNull Uri uri)", "modifiers": "@Nullable private", "return": "IntentImportResult", "signature": "IntentImportResult buildResultFromUri(@NonNull Uri uri)", "full_signature": "@Nullable private IntentImportResult buildResultFromUri(@NonNull Uri uri)", "class_method_signature": "IntentImportProcessor.buildResultFromUri(@NonNull Uri uri)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/imports/intents/IntentImportProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(@NonNull final Intent intent)", "modifiers": "@NonNull public synchronized", "return": "Maybe<IntentImportResult>", "body": "@NonNull\n    public synchronized Maybe<IntentImportResult> process(@NonNull final Intent intent) {\n        return Maybe.fromCallable(() -> {\n                    if (intent.hasExtra(INTENT_CONSUMED)) {\n                        return null; // We've already consumed this intent so do nothing\n                    } else {\n                        final Uri uri;\n                        if (Intent.ACTION_VIEW.equals(intent.getAction()) && intent.getData() != null) {\n                            uri = intent.getData();\n                        } else if (Intent.ACTION_SEND.equals(intent.getAction()) && intent.getExtras() != null) {\n                            uri = (Uri) intent.getExtras().get(Intent.EXTRA_STREAM);\n                        } else {\n                            uri = null; // This is an invalid one\n                        }\n\n                        if (uri != null) {\n                            return buildResultFromUri(uri); // Attempt to build our results from it\n                        } else {\n                            return null;\n                        }\n                    }\n                })\n                .doOnSuccess(intentImportResult -> {\n                    Logger.debug(IntentImportProcessor.this, \"Successfully processed the file {} with uri: {}.\", intentImportResult.getFileType(), intentImportResult.getUri());\n                    analytics.record(new DefaultDataPointEvent(Events.Intents.ReceivedActionableIntent).addDataPoint(new DataPoint(\"type\", intentImportResult.getFileType())));\n                    lastResult.onNext(Optional.of(intentImportResult));\n                })\n                .subscribeOn(Schedulers.io());\n    }", "signature": "Maybe<IntentImportResult> process(@NonNull final Intent intent)", "full_signature": "@NonNull public synchronized Maybe<IntentImportResult> process(@NonNull final Intent intent)", "class_method_signature": "IntentImportProcessor.process(@NonNull final Intent intent)", "testcase": false, "constructor": false, "invocations": ["subscribeOn", "doOnSuccess", "fromCallable", "hasExtra", "equals", "getAction", "getData", "getData", "equals", "getAction", "getExtras", "get", "getExtras", "buildResultFromUri", "debug", "getFileType", "getUri", "record", "addDataPoint", "getFileType", "onNext", "of", "io"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}