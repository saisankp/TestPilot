{"test_class": {"identifier": "FileSystemTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/core/fs/FileSystemTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGet() throws URISyntaxException, IOException {\n\t\tString scheme = \"file\";\n\t\t\n\t\tassertTrue(FileSystem.get(new URI(scheme + \":///test/test\")) instanceof LocalFileSystem);\n\t\t\n\t\ttry {\n\t\t\tFileSystem.get(new URI(scheme + \"://test/test\"));\n\t\t} catch (IOException ioe) {\n\t\t\tassertTrue(ioe.getMessage().startsWith(\"Found local file path with authority '\"));\n\t\t}\n\n\t\tassertTrue(FileSystem.get(new URI(scheme + \":/test/test\")) instanceof LocalFileSystem);\n\t\t\n\t\tassertTrue(FileSystem.get(new URI(scheme + \":test/test\")) instanceof LocalFileSystem);\n\n\t\tassertTrue(FileSystem.get(new URI(\"/test/test\")) instanceof LocalFileSystem);\n\t\t\n\t\tassertTrue(FileSystem.get(new URI(\"test/test\")) instanceof LocalFileSystem);\n\t}", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "FileSystemTest.testGet()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "get", "get", "assertTrue", "startsWith", "getMessage", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get"]}, "focal_class": {"identifier": "FileSystem", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LOCAL_FILESYSTEM_CLASS = \"org.apache.flink.core.fs.local.LocalFileSystem\";", "modifier": "private static final", "type": "String", "declarator": "LOCAL_FILESYSTEM_CLASS = \"org.apache.flink.core.fs.local.LocalFileSystem\"", "var_name": "LOCAL_FILESYSTEM_CLASS"}, {"original_string": "private static final String HADOOP_WRAPPER_FILESYSTEM_CLASS = \"org.apache.flink.runtime.fs.hdfs.HadoopFileSystem\";", "modifier": "private static final", "type": "String", "declarator": "HADOOP_WRAPPER_FILESYSTEM_CLASS = \"org.apache.flink.runtime.fs.hdfs.HadoopFileSystem\"", "var_name": "HADOOP_WRAPPER_FILESYSTEM_CLASS"}, {"original_string": "private static final String MAPR_FILESYSTEM_CLASS = \"org.apache.flink.runtime.fs.maprfs.MapRFileSystem\";", "modifier": "private static final", "type": "String", "declarator": "MAPR_FILESYSTEM_CLASS = \"org.apache.flink.runtime.fs.maprfs.MapRFileSystem\"", "var_name": "MAPR_FILESYSTEM_CLASS"}, {"original_string": "private static final String HADOOP_WRAPPER_SCHEME = \"hdwrapper\";", "modifier": "private static final", "type": "String", "declarator": "HADOOP_WRAPPER_SCHEME = \"hdwrapper\"", "var_name": "HADOOP_WRAPPER_SCHEME"}, {"original_string": "private static final Object SYNCHRONIZATION_OBJECT = new Object();", "modifier": "private static final", "type": "Object", "declarator": "SYNCHRONIZATION_OBJECT = new Object()", "var_name": "SYNCHRONIZATION_OBJECT"}, {"original_string": "private static final Map<FSKey, FileSystem> CACHE = new HashMap<FSKey, FileSystem>();", "modifier": "private static final", "type": "Map<FSKey, FileSystem>", "declarator": "CACHE = new HashMap<FSKey, FileSystem>()", "var_name": "CACHE"}, {"original_string": "private static final Map<String, String> FSDIRECTORY = new HashMap<String, String>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "FSDIRECTORY = new HashMap<String, String>()", "var_name": "FSDIRECTORY"}, {"original_string": "private static URI defaultScheme;", "modifier": "private static", "type": "URI", "declarator": "defaultScheme", "var_name": "defaultScheme"}, {"original_string": "private static HadoopFileSystemWrapper hadoopWrapper;", "modifier": "private static", "type": "HadoopFileSystemWrapper", "declarator": "hadoopWrapper", "var_name": "hadoopWrapper"}], "methods": [{"identifier": "getLocalFileSystem", "parameters": "()", "modifiers": "public static", "return": "FileSystem", "signature": "FileSystem getLocalFileSystem()", "full_signature": "public static FileSystem getLocalFileSystem()", "class_method_signature": "FileSystem.getLocalFileSystem()", "testcase": false, "constructor": false}, {"identifier": "setDefaultScheme", "parameters": "(Configuration config)", "modifiers": "public static", "return": "void", "signature": "void setDefaultScheme(Configuration config)", "full_signature": "public static void setDefaultScheme(Configuration config)", "class_method_signature": "FileSystem.setDefaultScheme(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(URI uri)", "modifiers": "public static", "return": "FileSystem", "signature": "FileSystem get(URI uri)", "full_signature": "public static FileSystem get(URI uri)", "class_method_signature": "FileSystem.get(URI uri)", "testcase": false, "constructor": false}, {"identifier": "instantiateHadoopFileSystemWrapper", "parameters": "(Class<?> wrappedFileSystem)", "modifiers": "private static", "return": "FileSystem", "signature": "FileSystem instantiateHadoopFileSystemWrapper(Class<?> wrappedFileSystem)", "full_signature": "private static FileSystem instantiateHadoopFileSystemWrapper(Class<?> wrappedFileSystem)", "class_method_signature": "FileSystem.instantiateHadoopFileSystemWrapper(Class<?> wrappedFileSystem)", "testcase": false, "constructor": false}, {"identifier": "instantiateFileSystem", "parameters": "(String className)", "modifiers": "private static", "return": "FileSystem", "signature": "FileSystem instantiateFileSystem(String className)", "full_signature": "private static FileSystem instantiateFileSystem(String className)", "class_method_signature": "FileSystem.instantiateFileSystem(String className)", "testcase": false, "constructor": false}, {"identifier": "getHadoopWrapperClassNameForFileSystem", "parameters": "(String scheme)", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> getHadoopWrapperClassNameForFileSystem(String scheme)", "full_signature": "private static Class<?> getHadoopWrapperClassNameForFileSystem(String scheme)", "class_method_signature": "FileSystem.getHadoopWrapperClassNameForFileSystem(String scheme)", "testcase": false, "constructor": false}, {"identifier": "getWorkingDirectory", "parameters": "()", "modifiers": "public abstract", "return": "Path", "signature": "Path getWorkingDirectory()", "full_signature": "public abstract Path getWorkingDirectory()", "class_method_signature": "FileSystem.getWorkingDirectory()", "testcase": false, "constructor": false}, {"identifier": "getHomeDirectory", "parameters": "()", "modifiers": "public abstract", "return": "Path", "signature": "Path getHomeDirectory()", "full_signature": "public abstract Path getHomeDirectory()", "class_method_signature": "FileSystem.getHomeDirectory()", "testcase": false, "constructor": false}, {"identifier": "getUri", "parameters": "()", "modifiers": "public abstract", "return": "URI", "signature": "URI getUri()", "full_signature": "public abstract URI getUri()", "class_method_signature": "FileSystem.getUri()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(URI name)", "modifiers": "public abstract", "return": "void", "signature": "void initialize(URI name)", "full_signature": "public abstract void initialize(URI name)", "class_method_signature": "FileSystem.initialize(URI name)", "testcase": false, "constructor": false}, {"identifier": "getFileStatus", "parameters": "(Path f)", "modifiers": "public abstract", "return": "FileStatus", "signature": "FileStatus getFileStatus(Path f)", "full_signature": "public abstract FileStatus getFileStatus(Path f)", "class_method_signature": "FileSystem.getFileStatus(Path f)", "testcase": false, "constructor": false}, {"identifier": "getFileBlockLocations", "parameters": "(FileStatus file, long start, long len)", "modifiers": "public abstract", "return": "BlockLocation[]", "signature": "BlockLocation[] getFileBlockLocations(FileStatus file, long start, long len)", "full_signature": "public abstract BlockLocation[] getFileBlockLocations(FileStatus file, long start, long len)", "class_method_signature": "FileSystem.getFileBlockLocations(FileStatus file, long start, long len)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(Path f, int bufferSize)", "modifiers": "public abstract", "return": "FSDataInputStream", "signature": "FSDataInputStream open(Path f, int bufferSize)", "full_signature": "public abstract FSDataInputStream open(Path f, int bufferSize)", "class_method_signature": "FileSystem.open(Path f, int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(Path f)", "modifiers": "public abstract", "return": "FSDataInputStream", "signature": "FSDataInputStream open(Path f)", "full_signature": "public abstract FSDataInputStream open(Path f)", "class_method_signature": "FileSystem.open(Path f)", "testcase": false, "constructor": false}, {"identifier": "getDefaultBlockSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getDefaultBlockSize()", "full_signature": "public long getDefaultBlockSize()", "class_method_signature": "FileSystem.getDefaultBlockSize()", "testcase": false, "constructor": false}, {"identifier": "listStatus", "parameters": "(Path f)", "modifiers": "public abstract", "return": "FileStatus[]", "signature": "FileStatus[] listStatus(Path f)", "full_signature": "public abstract FileStatus[] listStatus(Path f)", "class_method_signature": "FileSystem.listStatus(Path f)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(final Path f)", "modifiers": "public", "return": "boolean", "signature": "boolean exists(final Path f)", "full_signature": "public boolean exists(final Path f)", "class_method_signature": "FileSystem.exists(final Path f)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Path f, boolean recursive)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean delete(Path f, boolean recursive)", "full_signature": "public abstract boolean delete(Path f, boolean recursive)", "class_method_signature": "FileSystem.delete(Path f, boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "mkdirs", "parameters": "(Path f)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean mkdirs(Path f)", "full_signature": "public abstract boolean mkdirs(Path f)", "class_method_signature": "FileSystem.mkdirs(Path f)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Path f, boolean overwrite, int bufferSize, short replication,\n\t\t\tlong blockSize)", "modifiers": "public abstract", "return": "FSDataOutputStream", "signature": "FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication,\n\t\t\tlong blockSize)", "full_signature": "public abstract FSDataOutputStream create(Path f, boolean overwrite, int bufferSize, short replication,\n\t\t\tlong blockSize)", "class_method_signature": "FileSystem.create(Path f, boolean overwrite, int bufferSize, short replication,\n\t\t\tlong blockSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Path f, boolean overwrite)", "modifiers": "public abstract", "return": "FSDataOutputStream", "signature": "FSDataOutputStream create(Path f, boolean overwrite)", "full_signature": "public abstract FSDataOutputStream create(Path f, boolean overwrite)", "class_method_signature": "FileSystem.create(Path f, boolean overwrite)", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(Path src, Path dst)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean rename(Path src, Path dst)", "full_signature": "public abstract boolean rename(Path src, Path dst)", "class_method_signature": "FileSystem.rename(Path src, Path dst)", "testcase": false, "constructor": false}, {"identifier": "initOutPathLocalFS", "parameters": "(Path outPath, WriteMode writeMode, boolean createDirectory)", "modifiers": "public", "return": "boolean", "signature": "boolean initOutPathLocalFS(Path outPath, WriteMode writeMode, boolean createDirectory)", "full_signature": "public boolean initOutPathLocalFS(Path outPath, WriteMode writeMode, boolean createDirectory)", "class_method_signature": "FileSystem.initOutPathLocalFS(Path outPath, WriteMode writeMode, boolean createDirectory)", "testcase": false, "constructor": false}, {"identifier": "initOutPathDistFS", "parameters": "(Path outPath, WriteMode writeMode, boolean createDirectory)", "modifiers": "public", "return": "boolean", "signature": "boolean initOutPathDistFS(Path outPath, WriteMode writeMode, boolean createDirectory)", "full_signature": "public boolean initOutPathDistFS(Path outPath, WriteMode writeMode, boolean createDirectory)", "class_method_signature": "FileSystem.initOutPathDistFS(Path outPath, WriteMode writeMode, boolean createDirectory)", "testcase": false, "constructor": false}, {"identifier": "isDistributedFS", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isDistributedFS()", "full_signature": "public abstract boolean isDistributedFS()", "class_method_signature": "FileSystem.isDistributedFS()", "testcase": false, "constructor": false}, {"identifier": "getFileSystemByName", "parameters": "(String className)", "modifiers": "private static", "return": "Class<? extends FileSystem>", "signature": "Class<? extends FileSystem> getFileSystemByName(String className)", "full_signature": "private static Class<? extends FileSystem> getFileSystemByName(String className)", "class_method_signature": "FileSystem.getFileSystemByName(String className)", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java"}, "focal_method": {"identifier": "get", "parameters": "(URI uri)", "modifiers": "public static", "return": "FileSystem", "body": "public static FileSystem get(URI uri) throws IOException {\n\t\tFileSystem fs;\n\n\t\tURI asked = uri;\n\t\tsynchronized (SYNCHRONIZATION_OBJECT) {\n\n\t\t\tif (uri.getScheme() == null) {\n\t\t\t\ttry {\n\t\t\t\t\tif (defaultScheme == null) {\n\t\t\t\t\t\tdefaultScheme = new URI(ConfigConstants.DEFAULT_FILESYSTEM_SCHEME);\n\t\t\t\t\t}\n\n\t\t\t\t\turi = new URI(defaultScheme.getScheme(), null, defaultScheme.getHost(),\n\t\t\t\t\t\tdefaultScheme.getPort(), uri.getPath(), null, null);\n\n\t\t\t\t} catch (URISyntaxException e) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (defaultScheme.getScheme().equals(\"file\")) {\n\t\t\t\t\t\t\turi = new URI(\"file\", null,\n\t\t\t\t\t\t\t\tnew Path(new File(uri.getPath()).getAbsolutePath()).toUri().getPath(), null);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (URISyntaxException ex) {\n\t\t\t\t\t\t// we tried to repair it, but could not. report the scheme error\n\t\t\t\t\t\tthrow new IOException(\"The URI '\" + uri.toString() + \"' is not valid.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(uri.getScheme() == null) {\n\t\t\t\tthrow new IOException(\"The URI '\" + uri + \"' is invalid.\\n\" +\n\t\t\t\t\t\"The fs.default-scheme = \" + defaultScheme + \", the requested URI = \" + asked +\n\t\t\t\t\t\", and the final URI = \" + uri + \".\");\n\t\t\t}\n\n\t\t\tif (uri.getScheme().equals(\"file\") && uri.getAuthority() != null && !uri.getAuthority().isEmpty()) {\n\t\t\t\tString supposedUri = \"file:///\" + uri.getAuthority() + uri.getPath();\n\n\t\t\t\tthrow new IOException(\"Found local file path with authority '\" + uri.getAuthority() + \"' in path '\"\n\t\t\t\t\t\t+ uri.toString() + \"'. Hint: Did you forget a slash? (correct path would be '\" + supposedUri + \"')\");\n\t\t\t}\n\n\t\t\tfinal FSKey key = new FSKey(uri.getScheme(), uri.getAuthority());\n\n\t\t\t// See if there is a file system object in the cache\n\t\t\tif (CACHE.containsKey(key)) {\n\t\t\t\treturn CACHE.get(key);\n\t\t\t}\n\n\t\t\t// Try to create a new file system\n\n\t\t\tif (!FSDIRECTORY.containsKey(uri.getScheme())) {\n\t\t\t\t// no build in support for this file system. Falling back to Hadoop's FileSystem impl.\n\t\t\t\tClass<?> wrapperClass = getHadoopWrapperClassNameForFileSystem(uri.getScheme());\n\t\t\t\tif (wrapperClass != null) {\n\t\t\t\t\t// hadoop has support for the FileSystem\n\t\t\t\t\tFSKey wrappedKey = new FSKey(HADOOP_WRAPPER_SCHEME + \"+\" + uri.getScheme(), uri.getAuthority());\n\t\t\t\t\tif (CACHE.containsKey(wrappedKey)) {\n\t\t\t\t\t\treturn CACHE.get(wrappedKey);\n\t\t\t\t\t}\n\t\t\t\t\t// cache didn't contain the file system. instantiate it:\n\n\t\t\t\t\t// by now we know that the HadoopFileSystem wrapper can wrap the file system.\n\t\t\t\t\tfs = instantiateHadoopFileSystemWrapper(wrapperClass);\n\t\t\t\t\tfs.initialize(uri);\n\t\t\t\t\tCACHE.put(wrappedKey, fs);\n\n\t\t\t\t} else {\n\t\t\t\t\t// we can not read from this file system.\n\t\t\t\t\tthrow new IOException(\"No file system found with scheme \" + uri.getScheme()\n\t\t\t\t\t\t+ \", referenced in file URI '\" + uri.toString() + \"'.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// we end up here if we have a file system with build-in flink support.\n\t\t\t\tString fsClass = FSDIRECTORY.get(uri.getScheme());\n\t\t\t\tif (fsClass.equals(HADOOP_WRAPPER_FILESYSTEM_CLASS)) {\n\t\t\t\t\tfs = instantiateHadoopFileSystemWrapper(null);\n\t\t\t\t} else {\n\t\t\t\t\tfs = instantiateFileSystem(fsClass);\n\t\t\t\t}\n\t\t\t\t// Initialize new file system object\n\t\t\t\tfs.initialize(uri);\n\n\t\t\t\t// Add new file system object to cache\n\t\t\t\tCACHE.put(key, fs);\n\t\t\t}\n\t\t}\n\n\t\treturn fs;\n\t}", "signature": "FileSystem get(URI uri)", "full_signature": "public static FileSystem get(URI uri)", "class_method_signature": "FileSystem.get(URI uri)", "testcase": false, "constructor": false, "invocations": ["getScheme", "getScheme", "getHost", "getPort", "getPath", "equals", "getScheme", "getPath", "toUri", "getAbsolutePath", "getPath", "toString", "getScheme", "equals", "getScheme", "getAuthority", "isEmpty", "getAuthority", "getAuthority", "getPath", "getAuthority", "toString", "getScheme", "getAuthority", "containsKey", "get", "containsKey", "getScheme", "getHadoopWrapperClassNameForFileSystem", "getScheme", "getScheme", "getAuthority", "containsKey", "get", "instantiateHadoopFileSystemWrapper", "initialize", "put", "getScheme", "toString", "get", "getScheme", "equals", "instantiateHadoopFileSystemWrapper", "instantiateFileSystem", "initialize", "put"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}