{"test_class": {"identifier": "PrivateKeyManagerImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/PrivateKeyManagerImplTest.java"}, "test_case": {"identifier": "getPublicKeyData_works", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getPublicKeyData_works() throws Exception {\n    TestPrivateKeyTypeManager privateManager = new TestPrivateKeyTypeManager();\n    TestPublicKeyTypeManager publicManager = new TestPublicKeyTypeManager();\n    PrivateKeyManager<Void> manager =\n        new PrivateKeyManagerImpl<>(privateManager, publicManager, Void.class);\n    Ed25519PrivateKey privateKey =\n        Ed25519PrivateKey.newBuilder()\n            .setPublicKey(\n                Ed25519PublicKey.newBuilder()\n                    .setKeyValue(ByteString.copyFrom(Random.randBytes(32))))\n            .setKeyValue(ByteString.copyFrom(Random.randBytes(32)))\n            .build();\n\n    KeyData keyData = manager.getPublicKeyData(privateKey.toByteString());\n\n    assertThat(keyData.getTypeUrl())\n        .isEqualTo(\"type.googleapis.com/google.crypto.tink.Ed25519PublicKey\");\n    Ed25519PublicKey publicKey =\n        Ed25519PublicKey.parseFrom(keyData.getValue(), ExtensionRegistryLite.getEmptyRegistry());\n    assertThat(publicKey).isEqualTo(privateKey.getPublicKey());\n    assertThat(keyData.getKeyMaterialType()).isEqualTo(KeyMaterialType.ASYMMETRIC_PUBLIC);\n  }", "signature": "void getPublicKeyData_works()", "full_signature": "@Test public void getPublicKeyData_works()", "class_method_signature": "PrivateKeyManagerImplTest.getPublicKeyData_works()", "testcase": true, "constructor": false, "invocations": ["build", "setKeyValue", "setPublicKey", "newBuilder", "setKeyValue", "newBuilder", "copyFrom", "randBytes", "copyFrom", "randBytes", "getPublicKeyData", "toByteString", "isEqualTo", "assertThat", "getTypeUrl", "parseFrom", "getValue", "getEmptyRegistry", "isEqualTo", "assertThat", "getPublicKey", "isEqualTo", "assertThat", "getKeyMaterialType"]}, "focal_class": {"identifier": "PrivateKeyManagerImpl", "superclass": "extends KeyManagerImpl<PrimitiveT, KeyProtoT>", "interfaces": "implements PrivateKeyManager<PrimitiveT>", "fields": [{"original_string": "private final PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyManager;", "modifier": "private final", "type": "PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT>", "declarator": "privateKeyManager", "var_name": "privateKeyManager"}, {"original_string": "private final KeyTypeManager<PublicKeyProtoT> publicKeyManager;", "modifier": "private final", "type": "KeyTypeManager<PublicKeyProtoT>", "declarator": "publicKeyManager", "var_name": "publicKeyManager"}], "methods": [{"identifier": "PrivateKeyManagerImpl", "parameters": "(\n      PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyManager,\n      KeyTypeManager<PublicKeyProtoT> publicKeyManager,\n      Class<PrimitiveT> primitiveClass)", "modifiers": "public", "return": "", "signature": " PrivateKeyManagerImpl(\n      PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyManager,\n      KeyTypeManager<PublicKeyProtoT> publicKeyManager,\n      Class<PrimitiveT> primitiveClass)", "full_signature": "public  PrivateKeyManagerImpl(\n      PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyManager,\n      KeyTypeManager<PublicKeyProtoT> publicKeyManager,\n      Class<PrimitiveT> primitiveClass)", "class_method_signature": "PrivateKeyManagerImpl.PrivateKeyManagerImpl(\n      PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyManager,\n      KeyTypeManager<PublicKeyProtoT> publicKeyManager,\n      Class<PrimitiveT> primitiveClass)", "testcase": false, "constructor": true}, {"identifier": "getPublicKeyData", "parameters": "(ByteString serializedKey)", "modifiers": "@Override public", "return": "KeyData", "signature": "KeyData getPublicKeyData(ByteString serializedKey)", "full_signature": "@Override public KeyData getPublicKeyData(ByteString serializedKey)", "class_method_signature": "PrivateKeyManagerImpl.getPublicKeyData(ByteString serializedKey)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/PrivateKeyManagerImpl.java"}, "focal_method": {"identifier": "getPublicKeyData", "parameters": "(ByteString serializedKey)", "modifiers": "@Override public", "return": "KeyData", "body": "@Override\n  public KeyData getPublicKeyData(ByteString serializedKey) throws GeneralSecurityException {\n    try {\n      KeyProtoT privKeyProto = privateKeyManager.parseKey(serializedKey);\n      privateKeyManager.validateKey(privKeyProto);\n      PublicKeyProtoT publicKeyProto = privateKeyManager.getPublicKey(privKeyProto);\n      publicKeyManager.validateKey(publicKeyProto);\n      return KeyData.newBuilder()\n          .setTypeUrl(publicKeyManager.getKeyType())\n          .setValue(publicKeyProto.toByteString())\n          .setKeyMaterialType(publicKeyManager.keyMaterialType())\n          .build();\n    } catch (InvalidProtocolBufferException e) {\n      throw new GeneralSecurityException(\"expected serialized proto of type \", e);\n    }\n  }", "signature": "KeyData getPublicKeyData(ByteString serializedKey)", "full_signature": "@Override public KeyData getPublicKeyData(ByteString serializedKey)", "class_method_signature": "PrivateKeyManagerImpl.getPublicKeyData(ByteString serializedKey)", "testcase": false, "constructor": false, "invocations": ["parseKey", "validateKey", "getPublicKey", "validateKey", "build", "setKeyMaterialType", "setValue", "setTypeUrl", "newBuilder", "getKeyType", "toByteString", "keyMaterialType"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}