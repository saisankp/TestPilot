{"test_class": {"identifier": "CredentialManagerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CredentialManagerImpl credentialManager;", "modifier": "private", "type": "CredentialManagerImpl", "declarator": "credentialManager", "var_name": "credentialManager"}, {"original_string": "private String masterPassword = \"uber\";", "modifier": "private", "type": "String", "declarator": "masterPassword = \"uber\"", "var_name": "masterPassword"}, {"original_string": "private DummyMasterPasswordProvider masterPasswordProvider;", "modifier": "private", "type": "DummyMasterPasswordProvider", "declarator": "masterPasswordProvider", "var_name": "masterPasswordProvider"}, {"original_string": "private File credentialManagerDirectory;", "modifier": "private", "type": "File", "declarator": "credentialManagerDirectory", "var_name": "credentialManagerDirectory"}, {"original_string": "private static UsernamePassword usernamePassword;", "modifier": "private static", "type": "UsernamePassword", "declarator": "usernamePassword", "var_name": "usernamePassword"}, {"original_string": "private static URI serviceURI;", "modifier": "private static", "type": "URI", "declarator": "serviceURI", "var_name": "serviceURI"}, {"original_string": "private static Key privateKey;", "modifier": "private static", "type": "Key", "declarator": "privateKey", "var_name": "privateKey"}, {"original_string": "private static Certificate[] privateKeyCertChain;", "modifier": "private static", "type": "Certificate[]", "declarator": "privateKeyCertChain", "var_name": "privateKeyCertChain"}, {"original_string": "private static URL privateKeyFileURL = CredentialManagerImplTest.class.getResource(\n\t\t\t\"/security/test-private-key-cert.p12\");", "modifier": "private static", "type": "URL", "declarator": "privateKeyFileURL = CredentialManagerImplTest.class.getResource(\n\t\t\t\"/security/test-private-key-cert.p12\")", "var_name": "privateKeyFileURL"}, {"original_string": "private static final String privateKeyAndPKCS12KeystorePassword = \"test\";", "modifier": "private static final", "type": "String", "declarator": "privateKeyAndPKCS12KeystorePassword = \"test\"", "var_name": "privateKeyAndPKCS12KeystorePassword"}, {"original_string": "private static X509Certificate trustedCertficate;", "modifier": "private static", "type": "X509Certificate", "declarator": "trustedCertficate", "var_name": "trustedCertficate"}, {"original_string": "private static URL trustedCertficateFileURL = CredentialManagerImplTest.class.getResource(\n\t\t\t\"/security/google-trusted-certificate.pem\");", "modifier": "private static", "type": "URL", "declarator": "trustedCertficateFileURL = CredentialManagerImplTest.class.getResource(\n\t\t\t\"/security/google-trusted-certificate.pem\")", "var_name": "trustedCertficateFileURL"}, {"original_string": "private static Observer<KeystoreChangedEvent> keystoreChangedObserver;", "modifier": "private static", "type": "Observer<KeystoreChangedEvent>", "declarator": "keystoreChangedObserver", "var_name": "keystoreChangedObserver"}], "file": "taverna-credential-manager-impl/src/test/java/org/apache/taverna/security/credentialmanager/impl/CredentialManagerImplTest.java"}, "test_case": {"identifier": "testGetAliases", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetAliases() throws CMException {\n\t\t\n\t\tArrayList<String> keystoreAliases = credentialManager.getAliases(KeystoreType.KEYSTORE);\n\t\tArrayList<String> truststoreAliases = credentialManager.getAliases(KeystoreType.TRUSTSTORE);\n\t\t\n\t\t// Initially Keystore/Truststore is empty\n\t\tassertTrue(keystoreAliases.isEmpty());\n\t\t\n\t\tString aliasPassword = credentialManager.addUsernameAndPasswordForService(usernamePassword, serviceURI);\n\t\tString aliasKeyPair = credentialManager.addKeyPair(privateKey, privateKeyCertChain);\n\t\tString aliasTrustedCert = credentialManager.addTrustedCertificate(trustedCertficate);\n\t\t\n\t\tkeystoreAliases = credentialManager.getAliases(KeystoreType.KEYSTORE);\n\t\ttruststoreAliases = credentialManager.getAliases(KeystoreType.TRUSTSTORE);\n\t\t\n\t\tassertTrue(keystoreAliases.size() == 2);\n\t\tassertTrue(truststoreAliases.size() >= 1); // we at least have the one we inserted but could be more copied from Java's defauls truststore\n\t\t\n\t\tassertTrue(keystoreAliases.contains(aliasPassword));\n\t\tassertTrue(keystoreAliases.contains(aliasKeyPair));\n\t\tassertTrue(truststoreAliases.contains(aliasTrustedCert));\n\t}", "signature": "void testGetAliases()", "full_signature": "@Test public void testGetAliases()", "class_method_signature": "CredentialManagerImplTest.testGetAliases()", "testcase": true, "constructor": false, "invocations": ["getAliases", "getAliases", "assertTrue", "isEmpty", "addUsernameAndPasswordForService", "addKeyPair", "addTrustedCertificate", "getAliases", "getAliases", "assertTrue", "size", "assertTrue", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "CredentialManagerImpl", "superclass": "", "interfaces": "implements CredentialManager,\n\t\tObservable<KeystoreChangedEvent>", "fields": [{"original_string": "public static List<String> defaultTrustStorePasswords = Arrays.asList(\n\t\t\tSystem.getProperty(PROPERTY_TRUSTSTORE_PASSWORD, \"\"), \"changeit\",\n\t\t\t\"changeme\", \"\");", "modifier": "public static", "type": "List<String>", "declarator": "defaultTrustStorePasswords = Arrays.asList(\n\t\t\tSystem.getProperty(PROPERTY_TRUSTSTORE_PASSWORD, \"\"), \"changeit\",\n\t\t\t\"changeme\", \"\")", "var_name": "defaultTrustStorePasswords"}, {"original_string": "public static final String OLD_TRUSTSTORE_PASSWORD = \"Tu/Ap%2_$dJt6*+Rca9v\";", "modifier": "public static final", "type": "String", "declarator": "OLD_TRUSTSTORE_PASSWORD = \"Tu/Ap%2_$dJt6*+Rca9v\"", "var_name": "OLD_TRUSTSTORE_PASSWORD"}, {"original_string": "public static final String OLD_T2TRUSTSTORE_FILE = \"t2truststore.jks\";", "modifier": "public static final", "type": "String", "declarator": "OLD_T2TRUSTSTORE_FILE = \"t2truststore.jks\"", "var_name": "OLD_T2TRUSTSTORE_FILE"}, {"original_string": "private static Logger logger = Logger\n\t\t\t.getLogger(CredentialManagerImpl.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger\n\t\t\t.getLogger(CredentialManagerImpl.class)", "var_name": "logger"}, {"original_string": "private MultiCaster<KeystoreChangedEvent> multiCaster = new MultiCaster<>(\n\t\t\tthis);", "modifier": "private", "type": "MultiCaster<KeystoreChangedEvent>", "declarator": "multiCaster = new MultiCaster<>(\n\t\t\tthis)", "var_name": "multiCaster"}, {"original_string": "private File credentialManagerDirectory = null;", "modifier": "private", "type": "File", "declarator": "credentialManagerDirectory = null", "var_name": "credentialManagerDirectory"}, {"original_string": "private String masterPassword;", "modifier": "private", "type": "String", "declarator": "masterPassword", "var_name": "masterPassword"}, {"original_string": "private File keystoreFile = null;", "modifier": "private", "type": "File", "declarator": "keystoreFile = null", "var_name": "keystoreFile"}, {"original_string": "private File truststoreFile = null;", "modifier": "private", "type": "File", "declarator": "truststoreFile = null", "var_name": "truststoreFile"}, {"original_string": "private KeyStore keystore;", "modifier": "private", "type": "KeyStore", "declarator": "keystore", "var_name": "keystore"}, {"original_string": "private KeyStore truststore;", "modifier": "private", "type": "KeyStore", "declarator": "truststore", "var_name": "truststore"}, {"original_string": "private boolean isInitialized = false;", "modifier": "private", "type": "boolean", "declarator": "isInitialized = false", "var_name": "isInitialized"}, {"original_string": "private static SSLSocketFactory tavernaSSLSocketFactory;", "modifier": "private static", "type": "SSLSocketFactory", "declarator": "tavernaSSLSocketFactory", "var_name": "tavernaSSLSocketFactory"}, {"original_string": "private KeystoreChangedObserver keystoresChangedObserver = new KeystoreChangedObserver();", "modifier": "private", "type": "KeystoreChangedObserver", "declarator": "keystoresChangedObserver = new KeystoreChangedObserver()", "var_name": "keystoresChangedObserver"}, {"original_string": "private List<URI> cachedServiceURIsList = null;", "modifier": "private", "type": "List<URI>", "declarator": "cachedServiceURIsList = null", "var_name": "cachedServiceURIsList"}, {"original_string": "private HashMap<URI, URI> cachedServiceURIsMap = null;", "modifier": "private", "type": "HashMap<URI, URI>", "declarator": "cachedServiceURIsMap = null", "var_name": "cachedServiceURIsMap"}, {"original_string": "private ClearCachedServiceURIsObserver clearCachedServiceURIsObserver = new ClearCachedServiceURIsObserver();", "modifier": "private", "type": "ClearCachedServiceURIsObserver", "declarator": "clearCachedServiceURIsObserver = new ClearCachedServiceURIsObserver()", "var_name": "clearCachedServiceURIsObserver"}, {"original_string": "private List<MasterPasswordProvider> masterPasswordProviders;", "modifier": "private", "type": "List<MasterPasswordProvider>", "declarator": "masterPasswordProviders", "var_name": "masterPasswordProviders"}, {"original_string": "private List<JavaTruststorePasswordProvider> javaTruststorePasswordProviders;", "modifier": "private", "type": "List<JavaTruststorePasswordProvider>", "declarator": "javaTruststorePasswordProviders", "var_name": "javaTruststorePasswordProviders"}, {"original_string": "private List<ServiceUsernameAndPasswordProvider> serviceUsernameAndPasswordProviders;", "modifier": "private", "type": "List<ServiceUsernameAndPasswordProvider>", "declarator": "serviceUsernameAndPasswordProviders", "var_name": "serviceUsernameAndPasswordProviders"}, {"original_string": "private List<TrustConfirmationProvider> trustConfirmationProviders;", "modifier": "private", "type": "List<TrustConfirmationProvider>", "declarator": "trustConfirmationProviders", "var_name": "trustConfirmationProviders"}, {"original_string": "private ApplicationConfiguration applicationConfiguration;", "modifier": "private", "type": "ApplicationConfiguration", "declarator": "applicationConfiguration", "var_name": "applicationConfiguration"}, {"original_string": "private File certificatesRevokedIndicatorFile;", "modifier": "private", "type": "File", "declarator": "certificatesRevokedIndicatorFile", "var_name": "certificatesRevokedIndicatorFile"}, {"original_string": "private DistinguishedNameParser dnParser = new DistinguishedNameParserImpl();", "modifier": "private", "type": "DistinguishedNameParser", "declarator": "dnParser = new DistinguishedNameParserImpl()", "var_name": "dnParser"}, {"original_string": "private static final boolean REALLY_DISABLED = false;", "modifier": "private static final", "type": "boolean", "declarator": "REALLY_DISABLED = false", "var_name": "REALLY_DISABLED"}], "methods": [{"identifier": "getSpecialTrustedCertificates", "parameters": "()", "modifiers": "private static", "return": "List<URL>", "signature": "List<URL> getSpecialTrustedCertificates()", "full_signature": "private static List<URL> getSpecialTrustedCertificates()", "class_method_signature": "CredentialManagerImpl.getSpecialTrustedCertificates()", "testcase": false, "constructor": false}, {"identifier": "installAuthenticator", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void installAuthenticator()", "full_signature": "public void installAuthenticator()", "class_method_signature": "CredentialManagerImpl.installAuthenticator()", "testcase": false, "constructor": false}, {"identifier": "deleteRevokedCertificates", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteRevokedCertificates()", "full_signature": "public void deleteRevokedCertificates()", "class_method_signature": "CredentialManagerImpl.deleteRevokedCertificates()", "testcase": false, "constructor": false}, {"identifier": "CredentialManagerImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " CredentialManagerImpl()", "full_signature": "public  CredentialManagerImpl()", "class_method_signature": "CredentialManagerImpl.CredentialManagerImpl()", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initialize()", "full_signature": "private void initialize()", "class_method_signature": "CredentialManagerImpl.initialize()", "testcase": false, "constructor": false}, {"identifier": "getMasterPassword", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getMasterPassword()", "full_signature": "private String getMasterPassword()", "class_method_signature": "CredentialManagerImpl.getMasterPassword()", "testcase": false, "constructor": false}, {"identifier": "loadKeystore", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadKeystore()", "full_signature": "private void loadKeystore()", "class_method_signature": "CredentialManagerImpl.loadKeystore()", "testcase": false, "constructor": false}, {"identifier": "loadTruststore", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadTruststore()", "full_signature": "private void loadTruststore()", "class_method_signature": "CredentialManagerImpl.loadTruststore()", "testcase": false, "constructor": false}, {"identifier": "loadJavaTruststoreUsingPasswordProviders", "parameters": "(\n\t\t\tKeyStore javaTruststore, File javaTruststoreFile)", "modifiers": "private", "return": "boolean", "signature": "boolean loadJavaTruststoreUsingPasswordProviders(\n\t\t\tKeyStore javaTruststore, File javaTruststoreFile)", "full_signature": "private boolean loadJavaTruststoreUsingPasswordProviders(\n\t\t\tKeyStore javaTruststore, File javaTruststoreFile)", "class_method_signature": "CredentialManagerImpl.loadJavaTruststoreUsingPasswordProviders(\n\t\t\tKeyStore javaTruststore, File javaTruststoreFile)", "testcase": false, "constructor": false}, {"identifier": "getUsernameAndPasswordForService", "parameters": "(String serviceURL)", "modifiers": "@Deprecated public", "return": "String[]", "signature": "String[] getUsernameAndPasswordForService(String serviceURL)", "full_signature": "@Deprecated public String[] getUsernameAndPasswordForService(String serviceURL)", "class_method_signature": "CredentialManagerImpl.getUsernameAndPasswordForService(String serviceURL)", "testcase": false, "constructor": false}, {"identifier": "getUsernameAndPasswordForService", "parameters": "(URI serviceURI,\n\t\t\tboolean usePathRecursion, String requestingMessage)", "modifiers": "@Override public", "return": "UsernamePassword", "signature": "UsernamePassword getUsernameAndPasswordForService(URI serviceURI,\n\t\t\tboolean usePathRecursion, String requestingMessage)", "full_signature": "@Override public UsernamePassword getUsernameAndPasswordForService(URI serviceURI,\n\t\t\tboolean usePathRecursion, String requestingMessage)", "class_method_signature": "CredentialManagerImpl.getUsernameAndPasswordForService(URI serviceURI,\n\t\t\tboolean usePathRecursion, String requestingMessage)", "testcase": false, "constructor": false}, {"identifier": "getFragmentMappedURIsForAllUsernameAndPasswordPairs", "parameters": "()", "modifiers": "protected", "return": "Map<URI, URI>", "signature": "Map<URI, URI> getFragmentMappedURIsForAllUsernameAndPasswordPairs()", "full_signature": "protected Map<URI, URI> getFragmentMappedURIsForAllUsernameAndPasswordPairs()", "class_method_signature": "CredentialManagerImpl.getFragmentMappedURIsForAllUsernameAndPasswordPairs()", "testcase": false, "constructor": false}, {"identifier": "getPossibleServiceURIsToLookup", "parameters": "(URI serviceURI,\n\t\t\tboolean usePathRecursion)", "modifiers": "protected", "return": "LinkedHashSet<URI>", "signature": "LinkedHashSet<URI> getPossibleServiceURIsToLookup(URI serviceURI,\n\t\t\tboolean usePathRecursion)", "full_signature": "protected LinkedHashSet<URI> getPossibleServiceURIsToLookup(URI serviceURI,\n\t\t\tboolean usePathRecursion)", "class_method_signature": "CredentialManagerImpl.getPossibleServiceURIsToLookup(URI serviceURI,\n\t\t\tboolean usePathRecursion)", "testcase": false, "constructor": false}, {"identifier": "addFragmentedURI", "parameters": "(LinkedHashSet<URI> possibles, URI uri,\n\t\t\tString rawFragment)", "modifiers": "public", "return": "void", "signature": "void addFragmentedURI(LinkedHashSet<URI> possibles, URI uri,\n\t\t\tString rawFragment)", "full_signature": "public void addFragmentedURI(LinkedHashSet<URI> possibles, URI uri,\n\t\t\tString rawFragment)", "class_method_signature": "CredentialManagerImpl.addFragmentedURI(LinkedHashSet<URI> possibles, URI uri,\n\t\t\tString rawFragment)", "testcase": false, "constructor": false}, {"identifier": "getServiceURLsforAllUsernameAndPasswordPairs", "parameters": "()", "modifiers": "@Deprecated public", "return": "ArrayList<String>", "signature": "ArrayList<String> getServiceURLsforAllUsernameAndPasswordPairs()", "full_signature": "@Deprecated public ArrayList<String> getServiceURLsforAllUsernameAndPasswordPairs()", "class_method_signature": "CredentialManagerImpl.getServiceURLsforAllUsernameAndPasswordPairs()", "testcase": false, "constructor": false}, {"identifier": "addUsernameAndPasswordForService", "parameters": "(\n\t\t\tUsernamePassword usernamePassword, URI serviceURI)", "modifiers": "@Override public", "return": "String", "signature": "String addUsernameAndPasswordForService(\n\t\t\tUsernamePassword usernamePassword, URI serviceURI)", "full_signature": "@Override public String addUsernameAndPasswordForService(\n\t\t\tUsernamePassword usernamePassword, URI serviceURI)", "class_method_signature": "CredentialManagerImpl.addUsernameAndPasswordForService(\n\t\t\tUsernamePassword usernamePassword, URI serviceURI)", "testcase": false, "constructor": false}, {"identifier": "saveUsernameAndPasswordForService", "parameters": "(String username,\n\t\t\tString password, String serviceURL)", "modifiers": "@Deprecated public", "return": "String", "signature": "String saveUsernameAndPasswordForService(String username,\n\t\t\tString password, String serviceURL)", "full_signature": "@Deprecated public String saveUsernameAndPasswordForService(String username,\n\t\t\tString password, String serviceURL)", "class_method_signature": "CredentialManagerImpl.saveUsernameAndPasswordForService(String username,\n\t\t\tString password, String serviceURL)", "testcase": false, "constructor": false}, {"identifier": "deleteUsernameAndPasswordForService", "parameters": "(URI serviceURI)", "modifiers": "@Override public", "return": "void", "signature": "void deleteUsernameAndPasswordForService(URI serviceURI)", "full_signature": "@Override public void deleteUsernameAndPasswordForService(URI serviceURI)", "class_method_signature": "CredentialManagerImpl.deleteUsernameAndPasswordForService(URI serviceURI)", "testcase": false, "constructor": false}, {"identifier": "deleteUsernameAndPasswordForService", "parameters": "(String serviceURL)", "modifiers": "@Deprecated public", "return": "void", "signature": "void deleteUsernameAndPasswordForService(String serviceURL)", "full_signature": "@Deprecated public void deleteUsernameAndPasswordForService(String serviceURL)", "class_method_signature": "CredentialManagerImpl.deleteUsernameAndPasswordForService(String serviceURL)", "testcase": false, "constructor": false}, {"identifier": "addKeyPair", "parameters": "(Key privateKey, Certificate[] certs)", "modifiers": "@Override public", "return": "String", "signature": "String addKeyPair(Key privateKey, Certificate[] certs)", "full_signature": "@Override public String addKeyPair(Key privateKey, Certificate[] certs)", "class_method_signature": "CredentialManagerImpl.addKeyPair(Key privateKey, Certificate[] certs)", "testcase": false, "constructor": false}, {"identifier": "hasKeyPair", "parameters": "(Key privateKey, Certificate[] certs)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasKeyPair(Key privateKey, Certificate[] certs)", "full_signature": "@Override public boolean hasKeyPair(Key privateKey, Certificate[] certs)", "class_method_signature": "CredentialManagerImpl.hasKeyPair(Key privateKey, Certificate[] certs)", "testcase": false, "constructor": false}, {"identifier": "deleteKeyPair", "parameters": "(String alias)", "modifiers": "@Override public", "return": "void", "signature": "void deleteKeyPair(String alias)", "full_signature": "@Override public void deleteKeyPair(String alias)", "class_method_signature": "CredentialManagerImpl.deleteKeyPair(String alias)", "testcase": false, "constructor": false}, {"identifier": "deleteKeyPair", "parameters": "(Key privateKey, Certificate[] certs)", "modifiers": "@Override public", "return": "void", "signature": "void deleteKeyPair(Key privateKey, Certificate[] certs)", "full_signature": "@Override public void deleteKeyPair(Key privateKey, Certificate[] certs)", "class_method_signature": "CredentialManagerImpl.deleteKeyPair(Key privateKey, Certificate[] certs)", "testcase": false, "constructor": false}, {"identifier": "exportKeyPair", "parameters": "(String alias, Path exportFile,\n\t\t\tString pkcs12Password)", "modifiers": "@Override public", "return": "void", "signature": "void exportKeyPair(String alias, Path exportFile,\n\t\t\tString pkcs12Password)", "full_signature": "@Override public void exportKeyPair(String alias, Path exportFile,\n\t\t\tString pkcs12Password)", "class_method_signature": "CredentialManagerImpl.exportKeyPair(String alias, Path exportFile,\n\t\t\tString pkcs12Password)", "testcase": false, "constructor": false}, {"identifier": "getCertificate", "parameters": "(KeystoreType ksType, String alias)", "modifiers": "@Override public", "return": "Certificate", "signature": "Certificate getCertificate(KeystoreType ksType, String alias)", "full_signature": "@Override public Certificate getCertificate(KeystoreType ksType, String alias)", "class_method_signature": "CredentialManagerImpl.getCertificate(KeystoreType ksType, String alias)", "testcase": false, "constructor": false}, {"identifier": "getKeyPairsCertificateChain", "parameters": "(String alias)", "modifiers": "@Override public", "return": "Certificate[]", "signature": "Certificate[] getKeyPairsCertificateChain(String alias)", "full_signature": "@Override public Certificate[] getKeyPairsCertificateChain(String alias)", "class_method_signature": "CredentialManagerImpl.getKeyPairsCertificateChain(String alias)", "testcase": false, "constructor": false}, {"identifier": "getKeyPairsPrivateKey", "parameters": "(String alias)", "modifiers": "@Override public", "return": "Key", "signature": "Key getKeyPairsPrivateKey(String alias)", "full_signature": "@Override public Key getKeyPairsPrivateKey(String alias)", "class_method_signature": "CredentialManagerImpl.getKeyPairsPrivateKey(String alias)", "testcase": false, "constructor": false}, {"identifier": "addTrustedCertificate", "parameters": "(X509Certificate cert)", "modifiers": "@Override public", "return": "String", "signature": "String addTrustedCertificate(X509Certificate cert)", "full_signature": "@Override public String addTrustedCertificate(X509Certificate cert)", "class_method_signature": "CredentialManagerImpl.addTrustedCertificate(X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "createKeyPairAlias", "parameters": "(Key privateKey, Certificate certs[])", "modifiers": "@Override public", "return": "String", "signature": "String createKeyPairAlias(Key privateKey, Certificate certs[])", "full_signature": "@Override public String createKeyPairAlias(Key privateKey, Certificate certs[])", "class_method_signature": "CredentialManagerImpl.createKeyPairAlias(Key privateKey, Certificate certs[])", "testcase": false, "constructor": false}, {"identifier": "createTrustedCertificateAlias", "parameters": "(X509Certificate cert)", "modifiers": "@Override public", "return": "String", "signature": "String createTrustedCertificateAlias(X509Certificate cert)", "full_signature": "@Override public String createTrustedCertificateAlias(X509Certificate cert)", "class_method_signature": "CredentialManagerImpl.createTrustedCertificateAlias(X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "hasTrustedCertificate", "parameters": "(Certificate cert)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasTrustedCertificate(Certificate cert)", "full_signature": "@Override public boolean hasTrustedCertificate(Certificate cert)", "class_method_signature": "CredentialManagerImpl.hasTrustedCertificate(Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "deleteTrustedCertificate", "parameters": "(String alias)", "modifiers": "@Override public", "return": "void", "signature": "void deleteTrustedCertificate(String alias)", "full_signature": "@Override public void deleteTrustedCertificate(String alias)", "class_method_signature": "CredentialManagerImpl.deleteTrustedCertificate(String alias)", "testcase": false, "constructor": false}, {"identifier": "deleteTrustedCertificate", "parameters": "(X509Certificate cert)", "modifiers": "@Override public", "return": "void", "signature": "void deleteTrustedCertificate(X509Certificate cert)", "full_signature": "@Override public void deleteTrustedCertificate(X509Certificate cert)", "class_method_signature": "CredentialManagerImpl.deleteTrustedCertificate(X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "isKeyEntry", "parameters": "(String alias)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isKeyEntry(String alias)", "full_signature": "@Override public boolean isKeyEntry(String alias)", "class_method_signature": "CredentialManagerImpl.isKeyEntry(String alias)", "testcase": false, "constructor": false}, {"identifier": "deleteEntry", "parameters": "(KeystoreType ksType, String alias)", "modifiers": "private", "return": "void", "signature": "void deleteEntry(KeystoreType ksType, String alias)", "full_signature": "private void deleteEntry(KeystoreType ksType, String alias)", "class_method_signature": "CredentialManagerImpl.deleteEntry(KeystoreType ksType, String alias)", "testcase": false, "constructor": false}, {"identifier": "hasEntryWithAlias", "parameters": "(KeystoreType ksType, String alias)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasEntryWithAlias(KeystoreType ksType, String alias)", "full_signature": "@Override public boolean hasEntryWithAlias(KeystoreType ksType, String alias)", "class_method_signature": "CredentialManagerImpl.hasEntryWithAlias(KeystoreType ksType, String alias)", "testcase": false, "constructor": false}, {"identifier": "getAliases", "parameters": "(KeystoreType ksType)", "modifiers": "@Override public", "return": "ArrayList<String>", "signature": "ArrayList<String> getAliases(KeystoreType ksType)", "full_signature": "@Override public ArrayList<String> getAliases(KeystoreType ksType)", "class_method_signature": "CredentialManagerImpl.getAliases(KeystoreType ksType)", "testcase": false, "constructor": false}, {"identifier": "getServiceURIsForAllUsernameAndPasswordPairs", "parameters": "()", "modifiers": "@Override public", "return": "List<URI>", "signature": "List<URI> getServiceURIsForAllUsernameAndPasswordPairs()", "full_signature": "@Override public List<URI> getServiceURIsForAllUsernameAndPasswordPairs()", "class_method_signature": "CredentialManagerImpl.getServiceURIsForAllUsernameAndPasswordPairs()", "testcase": false, "constructor": false}, {"identifier": "loadPKCS12Keystore", "parameters": "(Path pkcs12File, String pkcs12Password)", "modifiers": "@Override public", "return": "KeyStore", "signature": "KeyStore loadPKCS12Keystore(Path pkcs12File, String pkcs12Password)", "full_signature": "@Override public KeyStore loadPKCS12Keystore(Path pkcs12File, String pkcs12Password)", "class_method_signature": "CredentialManagerImpl.loadPKCS12Keystore(Path pkcs12File, String pkcs12Password)", "testcase": false, "constructor": false}, {"identifier": "addObserver", "parameters": "(Observer<KeystoreChangedEvent> observer)", "modifiers": "@Override public", "return": "void", "signature": "void addObserver(Observer<KeystoreChangedEvent> observer)", "full_signature": "@Override public void addObserver(Observer<KeystoreChangedEvent> observer)", "class_method_signature": "CredentialManagerImpl.addObserver(Observer<KeystoreChangedEvent> observer)", "testcase": false, "constructor": false}, {"identifier": "getObservers", "parameters": "()", "modifiers": "@Override public", "return": "List<Observer<KeystoreChangedEvent>>", "signature": "List<Observer<KeystoreChangedEvent>> getObservers()", "full_signature": "@Override public List<Observer<KeystoreChangedEvent>> getObservers()", "class_method_signature": "CredentialManagerImpl.getObservers()", "testcase": false, "constructor": false}, {"identifier": "removeObserver", "parameters": "(Observer<KeystoreChangedEvent> observer)", "modifiers": "@Override public", "return": "void", "signature": "void removeObserver(Observer<KeystoreChangedEvent> observer)", "full_signature": "@Override public void removeObserver(Observer<KeystoreChangedEvent> observer)", "class_method_signature": "CredentialManagerImpl.removeObserver(Observer<KeystoreChangedEvent> observer)", "testcase": false, "constructor": false}, {"identifier": "saveKeystore", "parameters": "(KeystoreType ksType)", "modifiers": "private", "return": "void", "signature": "void saveKeystore(KeystoreType ksType)", "full_signature": "private void saveKeystore(KeystoreType ksType)", "class_method_signature": "CredentialManagerImpl.saveKeystore(KeystoreType ksType)", "testcase": false, "constructor": false}, {"identifier": "confirmMasterPassword", "parameters": "(String password)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean confirmMasterPassword(String password)", "full_signature": "@Override public boolean confirmMasterPassword(String password)", "class_method_signature": "CredentialManagerImpl.confirmMasterPassword(String password)", "testcase": false, "constructor": false}, {"identifier": "changeMasterPassword", "parameters": "(String newMasterPassword)", "modifiers": "@Override public", "return": "void", "signature": "void changeMasterPassword(String newMasterPassword)", "full_signature": "@Override public void changeMasterPassword(String newMasterPassword)", "class_method_signature": "CredentialManagerImpl.changeMasterPassword(String newMasterPassword)", "testcase": false, "constructor": false}, {"identifier": "initializeSSL", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initializeSSL()", "full_signature": "@Override public void initializeSSL()", "class_method_signature": "CredentialManagerImpl.initializeSSL()", "testcase": false, "constructor": false}, {"identifier": "createSSLSocketFactory", "parameters": "()", "modifiers": "private", "return": "SSLSocketFactory", "signature": "SSLSocketFactory createSSLSocketFactory()", "full_signature": "private SSLSocketFactory createSSLSocketFactory()", "class_method_signature": "CredentialManagerImpl.createSSLSocketFactory()", "testcase": false, "constructor": false}, {"identifier": "getTavernaSSLSocketFactory", "parameters": "()", "modifiers": "@Override public", "return": "SSLSocketFactory", "signature": "SSLSocketFactory getTavernaSSLSocketFactory()", "full_signature": "@Override public SSLSocketFactory getTavernaSSLSocketFactory()", "class_method_signature": "CredentialManagerImpl.getTavernaSSLSocketFactory()", "testcase": false, "constructor": false}, {"identifier": "getAuthenticator", "parameters": "()", "modifiers": "@Override public", "return": "Authenticator", "signature": "Authenticator getAuthenticator()", "full_signature": "@Override public Authenticator getAuthenticator()", "class_method_signature": "CredentialManagerImpl.getAuthenticator()", "testcase": false, "constructor": false}, {"identifier": "shouldTrust", "parameters": "(final X509Certificate[] chain)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldTrust(final X509Certificate[] chain)", "full_signature": "private boolean shouldTrust(final X509Certificate[] chain)", "class_method_signature": "CredentialManagerImpl.shouldTrust(final X509Certificate[] chain)", "testcase": false, "constructor": false}, {"identifier": "normalizeServiceURI", "parameters": "(URI serviceURI)", "modifiers": "public", "return": "URI", "signature": "URI normalizeServiceURI(URI serviceURI)", "full_signature": "public URI normalizeServiceURI(URI serviceURI)", "class_method_signature": "CredentialManagerImpl.normalizeServiceURI(URI serviceURI)", "testcase": false, "constructor": false}, {"identifier": "resetAuthCache", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean resetAuthCache()", "full_signature": "@Override public boolean resetAuthCache()", "class_method_signature": "CredentialManagerImpl.resetAuthCache()", "testcase": false, "constructor": false}, {"identifier": "hasUsernamePasswordForService", "parameters": "(URI serviceURI)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasUsernamePasswordForService(URI serviceURI)", "full_signature": "@Override public boolean hasUsernamePasswordForService(URI serviceURI)", "class_method_signature": "CredentialManagerImpl.hasUsernamePasswordForService(URI serviceURI)", "testcase": false, "constructor": false}, {"identifier": "loadDefaultSecurityFiles", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadDefaultSecurityFiles()", "full_signature": "private void loadDefaultSecurityFiles()", "class_method_signature": "CredentialManagerImpl.loadDefaultSecurityFiles()", "testcase": false, "constructor": false}, {"identifier": "setConfigurationDirectoryPath", "parameters": "(Path credentialManagerPath)", "modifiers": "@Override public", "return": "void", "signature": "void setConfigurationDirectoryPath(Path credentialManagerPath)", "full_signature": "@Override public void setConfigurationDirectoryPath(Path credentialManagerPath)", "class_method_signature": "CredentialManagerImpl.setConfigurationDirectoryPath(Path credentialManagerPath)", "testcase": false, "constructor": false}, {"identifier": "setMasterPasswordProviders", "parameters": "(\n\t\t\tList<MasterPasswordProvider> masterPasswordProviders)", "modifiers": "public", "return": "void", "signature": "void setMasterPasswordProviders(\n\t\t\tList<MasterPasswordProvider> masterPasswordProviders)", "full_signature": "public void setMasterPasswordProviders(\n\t\t\tList<MasterPasswordProvider> masterPasswordProviders)", "class_method_signature": "CredentialManagerImpl.setMasterPasswordProviders(\n\t\t\tList<MasterPasswordProvider> masterPasswordProviders)", "testcase": false, "constructor": false}, {"identifier": "getMasterPasswordProviders", "parameters": "()", "modifiers": "public", "return": "List<MasterPasswordProvider>", "signature": "List<MasterPasswordProvider> getMasterPasswordProviders()", "full_signature": "public List<MasterPasswordProvider> getMasterPasswordProviders()", "class_method_signature": "CredentialManagerImpl.getMasterPasswordProviders()", "testcase": false, "constructor": false}, {"identifier": "setJavaTruststorePasswordProviders", "parameters": "(\n\t\t\tList<JavaTruststorePasswordProvider> javaTruststorePasswordProvider)", "modifiers": "public", "return": "void", "signature": "void setJavaTruststorePasswordProviders(\n\t\t\tList<JavaTruststorePasswordProvider> javaTruststorePasswordProvider)", "full_signature": "public void setJavaTruststorePasswordProviders(\n\t\t\tList<JavaTruststorePasswordProvider> javaTruststorePasswordProvider)", "class_method_signature": "CredentialManagerImpl.setJavaTruststorePasswordProviders(\n\t\t\tList<JavaTruststorePasswordProvider> javaTruststorePasswordProvider)", "testcase": false, "constructor": false}, {"identifier": "getJavaTruststorePasswordProviders", "parameters": "()", "modifiers": "public", "return": "List<JavaTruststorePasswordProvider>", "signature": "List<JavaTruststorePasswordProvider> getJavaTruststorePasswordProviders()", "full_signature": "public List<JavaTruststorePasswordProvider> getJavaTruststorePasswordProviders()", "class_method_signature": "CredentialManagerImpl.getJavaTruststorePasswordProviders()", "testcase": false, "constructor": false}, {"identifier": "setServiceUsernameAndPasswordProviders", "parameters": "(\n\t\t\tList<ServiceUsernameAndPasswordProvider> serviceUsernameAndPasswordProviders)", "modifiers": "public", "return": "void", "signature": "void setServiceUsernameAndPasswordProviders(\n\t\t\tList<ServiceUsernameAndPasswordProvider> serviceUsernameAndPasswordProviders)", "full_signature": "public void setServiceUsernameAndPasswordProviders(\n\t\t\tList<ServiceUsernameAndPasswordProvider> serviceUsernameAndPasswordProviders)", "class_method_signature": "CredentialManagerImpl.setServiceUsernameAndPasswordProviders(\n\t\t\tList<ServiceUsernameAndPasswordProvider> serviceUsernameAndPasswordProviders)", "testcase": false, "constructor": false}, {"identifier": "getServiceUsernameAndPasswordProviders", "parameters": "()", "modifiers": "public", "return": "List<ServiceUsernameAndPasswordProvider>", "signature": "List<ServiceUsernameAndPasswordProvider> getServiceUsernameAndPasswordProviders()", "full_signature": "public List<ServiceUsernameAndPasswordProvider> getServiceUsernameAndPasswordProviders()", "class_method_signature": "CredentialManagerImpl.getServiceUsernameAndPasswordProviders()", "testcase": false, "constructor": false}, {"identifier": "setTrustConfirmationProviders", "parameters": "(\n\t\t\tList<TrustConfirmationProvider> trustConfirmationProviders)", "modifiers": "public", "return": "void", "signature": "void setTrustConfirmationProviders(\n\t\t\tList<TrustConfirmationProvider> trustConfirmationProviders)", "full_signature": "public void setTrustConfirmationProviders(\n\t\t\tList<TrustConfirmationProvider> trustConfirmationProviders)", "class_method_signature": "CredentialManagerImpl.setTrustConfirmationProviders(\n\t\t\tList<TrustConfirmationProvider> trustConfirmationProviders)", "testcase": false, "constructor": false}, {"identifier": "getTrustConfirmationProviders", "parameters": "()", "modifiers": "public", "return": "List<TrustConfirmationProvider>", "signature": "List<TrustConfirmationProvider> getTrustConfirmationProviders()", "full_signature": "public List<TrustConfirmationProvider> getTrustConfirmationProviders()", "class_method_signature": "CredentialManagerImpl.getTrustConfirmationProviders()", "testcase": false, "constructor": false}, {"identifier": "setApplicationConfiguration", "parameters": "(\n\t\t\tApplicationConfiguration applicationConfiguration)", "modifiers": "public", "return": "void", "signature": "void setApplicationConfiguration(\n\t\t\tApplicationConfiguration applicationConfiguration)", "full_signature": "public void setApplicationConfiguration(\n\t\t\tApplicationConfiguration applicationConfiguration)", "class_method_signature": "CredentialManagerImpl.setApplicationConfiguration(\n\t\t\tApplicationConfiguration applicationConfiguration)", "testcase": false, "constructor": false}], "file": "taverna-credential-manager-impl/src/main/java/org/apache/taverna/security/credentialmanager/impl/CredentialManagerImpl.java"}, "focal_method": {"identifier": "getAliases", "parameters": "(KeystoreType ksType)", "modifiers": "@Override public", "return": "ArrayList<String>", "body": "@Override\n\tpublic ArrayList<String> getAliases(KeystoreType ksType) throws CMException {\n\t\t// Need to make sure we are initialized before we do anything else\n\t\t// as Credential Manager can be created but not initialized\n\t\tinitialize();\n\n\t\ttry {\n\t\t\tswitch (ksType) {\n\t\t\tcase KEYSTORE:\n\t\t\t\tsynchronized (keystore) {\n\t\t\t\t\treturn Collections.list(keystore.aliases());\n\t\t\t\t}\n\t\t\tcase TRUSTSTORE:\n\t\t\t\tsynchronized (truststore) {\n\t\t\t\t\treturn Collections.list(truststore.aliases());\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tString exMessage = \"failed to access the \" + ksType\n\t\t\t\t\t+ \" to get the aliases\";\n\t\t\tlogger.error(exMessage, ex);\n\t\t\tthrow new CMException(exMessage, ex);\n\t\t}\n\t}", "signature": "ArrayList<String> getAliases(KeystoreType ksType)", "full_signature": "@Override public ArrayList<String> getAliases(KeystoreType ksType)", "class_method_signature": "CredentialManagerImpl.getAliases(KeystoreType ksType)", "testcase": false, "constructor": false, "invocations": ["initialize", "list", "aliases", "list", "aliases", "error"]}, "repository": {"repo_id": 30956939, "url": "https://github.com/apache/incubator-taverna-engine", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 12, "size": 6590, "license": "licensed"}}