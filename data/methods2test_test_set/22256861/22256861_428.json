{"test_class": {"identifier": "FuAlgoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final double[] xFactor = new double[]{2.957, 10.861, 3.744, 3.750, 34.687, 41.853, 7.619, 0.844, 0.189};", "modifier": "private final", "type": "double[]", "declarator": "xFactor = new double[]{2.957, 10.861, 3.744, 3.750, 34.687, 41.853, 7.619, 0.844, 0.189}", "var_name": "xFactor"}, {"original_string": "private final double[] yFactor = new double[]{0.112, 1.711, 5.672, 23.263, 48.791, 23.949, 2.944, 0.307, 0.068};", "modifier": "private final", "type": "double[]", "declarator": "yFactor = new double[]{0.112, 1.711, 5.672, 23.263, 48.791, 23.949, 2.944, 0.307, 0.068}", "var_name": "yFactor"}, {"original_string": "private final double[] zFactor = new double[]{14.354, 58.356, 28.227, 4.022, 0.618, 0.026, 0.000, 0.000, 0.000};", "modifier": "private final", "type": "double[]", "declarator": "zFactor = new double[]{14.354, 58.356, 28.227, 4.022, 0.618, 0.026, 0.000, 0.000, 0.000}", "var_name": "zFactor"}, {"original_string": "private final double[] polyHue = new double[]{-12.0506, 88.9325, -244.6960, 305.2361, -164.6960, 28.5255};", "modifier": "private final", "type": "double[]", "declarator": "polyHue = new double[]{-12.0506, 88.9325, -244.6960, 305.2361, -164.6960, 28.5255}", "var_name": "polyHue"}, {"original_string": "private FuAlgo fuAlgo;", "modifier": "private", "type": "FuAlgo", "declarator": "fuAlgo", "var_name": "fuAlgo"}], "file": "s3tbx-fu-operator/src/test/java/org/esa/s3tbx/fu/FuAlgoTest.java"}, "test_case": {"identifier": "testCheckNumberOfBands", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testCheckNumberOfBands() throws Exception {\n        fuAlgo.getTristimulusValue(new double[4], xFactor);\n    }", "signature": "void testCheckNumberOfBands()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testCheckNumberOfBands()", "class_method_signature": "FuAlgoTest.testCheckNumberOfBands()", "testcase": true, "constructor": false, "invocations": ["getTristimulusValue"]}, "focal_class": {"identifier": "FuAlgo", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final byte MAX_FU_VALUE = 21;", "modifier": "public static final", "type": "byte", "declarator": "MAX_FU_VALUE = 21", "var_name": "MAX_FU_VALUE"}, {"original_string": "private static final double CONST_WHITE_POINT = 0.333333;", "modifier": "private static final", "type": "double", "declarator": "CONST_WHITE_POINT = 0.333333", "var_name": "CONST_WHITE_POINT"}, {"original_string": "private static final double[] ANGLE_OF_TRANSITIONS = new double[]{\n            232.0, 227.168, 220.977, 209.994, 190.779, 163.084, 132.999,\n            109.054, 94.037, 83.346, 74.572, 67.957, 62.186, 56.435,\n            50.665, 45.129, 39.769, 34.906, 30.439, 26.337, 22.741, 19.0, 19.0\n    };", "modifier": "private static final", "type": "double[]", "declarator": "ANGLE_OF_TRANSITIONS = new double[]{\n            232.0, 227.168, 220.977, 209.994, 190.779, 163.084, 132.999,\n            109.054, 94.037, 83.346, 74.572, 67.957, 62.186, 56.435,\n            50.665, 45.129, 39.769, 34.906, 30.439, 26.337, 22.741, 19.0, 19.0\n    }", "var_name": "ANGLE_OF_TRANSITIONS"}, {"original_string": "private double[] x3Factors;", "modifier": "private", "type": "double[]", "declarator": "x3Factors", "var_name": "x3Factors"}, {"original_string": "private double[] y3Factors;", "modifier": "private", "type": "double[]", "declarator": "y3Factors", "var_name": "y3Factors"}, {"original_string": "private double[] z3Factors;", "modifier": "private", "type": "double[]", "declarator": "z3Factors", "var_name": "z3Factors"}, {"original_string": "private double[] polyCoeffs;", "modifier": "private", "type": "double[]", "declarator": "polyCoeffs", "var_name": "polyCoeffs"}], "methods": [{"identifier": "FuAlgo", "parameters": "(Instrument instrument)", "modifiers": "public", "return": "", "signature": " FuAlgo(Instrument instrument)", "full_signature": "public  FuAlgo(Instrument instrument)", "class_method_signature": "FuAlgo.FuAlgo(Instrument instrument)", "testcase": false, "constructor": true}, {"identifier": "FuAlgo", "parameters": "()", "modifiers": "", "return": "", "signature": " FuAlgo()", "full_signature": "  FuAlgo()", "class_method_signature": "FuAlgo.FuAlgo()", "testcase": false, "constructor": true}, {"identifier": "setPolyCoeffs", "parameters": "(double[] polyCoeffs)", "modifiers": "", "return": "void", "signature": "void setPolyCoeffs(double[] polyCoeffs)", "full_signature": " void setPolyCoeffs(double[] polyCoeffs)", "class_method_signature": "FuAlgo.setPolyCoeffs(double[] polyCoeffs)", "testcase": false, "constructor": false}, {"identifier": "setZ3Factors", "parameters": "(double[] z3Factors)", "modifiers": "", "return": "void", "signature": "void setZ3Factors(double[] z3Factors)", "full_signature": " void setZ3Factors(double[] z3Factors)", "class_method_signature": "FuAlgo.setZ3Factors(double[] z3Factors)", "testcase": false, "constructor": false}, {"identifier": "setY3Factors", "parameters": "(double[] y3Factors)", "modifiers": "", "return": "void", "signature": "void setY3Factors(double[] y3Factors)", "full_signature": " void setY3Factors(double[] y3Factors)", "class_method_signature": "FuAlgo.setY3Factors(double[] y3Factors)", "testcase": false, "constructor": false}, {"identifier": "setX3Factors", "parameters": "(double[] x3Factors)", "modifiers": "", "return": "void", "signature": "void setX3Factors(double[] x3Factors)", "full_signature": " void setX3Factors(double[] x3Factors)", "class_method_signature": "FuAlgo.setX3Factors(double[] x3Factors)", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "(double[] spectrum)", "modifiers": "public", "return": "FuResult", "signature": "FuResult compute(double[] spectrum)", "full_signature": "public FuResult compute(double[] spectrum)", "class_method_signature": "FuAlgo.compute(double[] spectrum)", "testcase": false, "constructor": false}, {"identifier": "getFuValue", "parameters": "(final double hueAngle)", "modifiers": "static", "return": "byte", "signature": "byte getFuValue(final double hueAngle)", "full_signature": "static byte getFuValue(final double hueAngle)", "class_method_signature": "FuAlgo.getFuValue(final double hueAngle)", "testcase": false, "constructor": false}, {"identifier": "getTristimulusValue", "parameters": "(double[] spectrum, double[] factors)", "modifiers": "", "return": "double", "signature": "double getTristimulusValue(double[] spectrum, double[] factors)", "full_signature": " double getTristimulusValue(double[] spectrum, double[] factors)", "class_method_signature": "FuAlgo.getTristimulusValue(double[] spectrum, double[] factors)", "testcase": false, "constructor": false}, {"identifier": "getHue", "parameters": "(double chrX, double chrY)", "modifiers": "", "return": "double", "signature": "double getHue(double chrX, double chrY)", "full_signature": " double getHue(double chrX, double chrY)", "class_method_signature": "FuAlgo.getHue(double chrX, double chrY)", "testcase": false, "constructor": false}, {"identifier": "getPolyCorr", "parameters": "(double hue100, double[] constPolyHue)", "modifiers": "", "return": "double", "signature": "double getPolyCorr(double hue100, double[] constPolyHue)", "full_signature": " double getPolyCorr(double hue100, double[] constPolyHue)", "class_method_signature": "FuAlgo.getPolyCorr(double hue100, double[] constPolyHue)", "testcase": false, "constructor": false}], "file": "s3tbx-fu-operator/src/main/java/org/esa/s3tbx/fu/FuAlgo.java"}, "focal_method": {"identifier": "getTristimulusValue", "parameters": "(double[] spectrum, double[] factors)", "modifiers": "", "return": "double", "body": "double getTristimulusValue(double[] spectrum, double[] factors) {\n        if (spectrum.length != factors.length) {\n            throw new IllegalArgumentException(\"The spectrum must have equal length as factors.\");\n        }\n        double summation = 0;\n        for (int i = 0; i < spectrum.length; i++) {\n            summation = (spectrum[i] * factors[i]) + summation;\n        }\n        return summation;\n    }", "signature": "double getTristimulusValue(double[] spectrum, double[] factors)", "full_signature": " double getTristimulusValue(double[] spectrum, double[] factors)", "class_method_signature": "FuAlgo.getTristimulusValue(double[] spectrum, double[] factors)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}