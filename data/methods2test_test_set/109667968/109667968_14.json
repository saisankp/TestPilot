{"test_class": {"identifier": "DrawingManagerTest", "superclass": "extends BaseKujakuLayerTest", "interfaces": "", "fields": [{"original_string": "private MapboxMap mapboxMap = Mockito.mock(MapboxMap.class);", "modifier": "private", "type": "MapboxMap", "declarator": "mapboxMap = Mockito.mock(MapboxMap.class)", "var_name": "mapboxMap"}, {"original_string": "private KujakuMapView mapView = Mockito.mock(KujakuMapView.class);", "modifier": "private", "type": "KujakuMapView", "declarator": "mapView = Mockito.mock(KujakuMapView.class)", "var_name": "mapView"}, {"original_string": "private Style style = Mockito.mock(Style.class);", "modifier": "private", "type": "Style", "declarator": "style = Mockito.mock(Style.class)", "var_name": "style"}, {"original_string": "private DrawingManager manager;", "modifier": "private", "type": "DrawingManager", "declarator": "manager", "var_name": "manager"}], "file": "library/src/test/java/io/ona/kujaku/manager/DrawingManagerTest.java"}, "test_case": {"identifier": "unSetCurrentCircleDraggable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void unSetCurrentCircleDraggable() {\n        manager.create(DrawingManager.getKujakuCircleOptions().withLatLng(new LatLng(1,1)));\n        Circle circle = manager.getKujakuCircles().get(0).getCircle();\n        manager.setDraggable(true, circle);\n\n        Assert.assertTrue(manager.getCurrentKujakuCircle().getCircle().isDraggable());\n        manager.unsetCurrentCircleDraggable();\n        Assert.assertNull(manager.getCurrentKujakuCircle());\n    }", "signature": "void unSetCurrentCircleDraggable()", "full_signature": "@Test public void unSetCurrentCircleDraggable()", "class_method_signature": "DrawingManagerTest.unSetCurrentCircleDraggable()", "testcase": true, "constructor": false, "invocations": ["create", "withLatLng", "getKujakuCircleOptions", "getCircle", "get", "getKujakuCircles", "setDraggable", "assertTrue", "isDraggable", "getCircle", "getCurrentKujakuCircle", "unsetCurrentCircleDraggable", "assertNull", "getCurrentKujakuCircle"]}, "focal_class": {"identifier": "DrawingManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private KujakuMapView kujakuMapView;", "modifier": "private", "type": "KujakuMapView", "declarator": "kujakuMapView", "var_name": "kujakuMapView"}, {"original_string": "private MapboxMap mapboxMap;", "modifier": "private", "type": "MapboxMap", "declarator": "mapboxMap", "var_name": "mapboxMap"}, {"original_string": "private List<KujakuCircle> circles;", "modifier": "private", "type": "List<KujakuCircle>", "declarator": "circles", "var_name": "circles"}, {"original_string": "private KujakuCircle currentKujakuCircle;", "modifier": "private", "type": "KujakuCircle", "declarator": "currentKujakuCircle", "var_name": "currentKujakuCircle"}, {"original_string": "private FillManager fillManager;", "modifier": "private", "type": "FillManager", "declarator": "fillManager", "var_name": "fillManager"}, {"original_string": "private LineManager lineManager;", "modifier": "private", "type": "LineManager", "declarator": "lineManager", "var_name": "lineManager"}, {"original_string": "private CircleManager circleManager;", "modifier": "private", "type": "CircleManager", "declarator": "circleManager", "var_name": "circleManager"}, {"original_string": "private OnDrawingCircleClickListener onDrawingCircleClickListener;", "modifier": "private", "type": "OnDrawingCircleClickListener", "declarator": "onDrawingCircleClickListener", "var_name": "onDrawingCircleClickListener"}, {"original_string": "private OnKujakuLayerLongClickListener onKujakuLayerLongClickListener;", "modifier": "private", "type": "OnKujakuLayerLongClickListener", "declarator": "onKujakuLayerLongClickListener", "var_name": "onKujakuLayerLongClickListener"}, {"original_string": "private boolean drawingEnabled;", "modifier": "private", "type": "boolean", "declarator": "drawingEnabled", "var_name": "drawingEnabled"}, {"original_string": "private FillBoundaryLayer currentFillBoundaryLayer;", "modifier": "private", "type": "FillBoundaryLayer", "declarator": "currentFillBoundaryLayer", "var_name": "currentFillBoundaryLayer"}, {"original_string": "private boolean editBoundaryMode;", "modifier": "private", "type": "boolean", "declarator": "editBoundaryMode", "var_name": "editBoundaryMode"}], "methods": [{"identifier": "DrawingManager", "parameters": "(@NonNull KujakuMapView mapView, @NonNull MapboxMap mapboxMap, @NonNull Style style)", "modifiers": "public", "return": "", "signature": " DrawingManager(@NonNull KujakuMapView mapView, @NonNull MapboxMap mapboxMap, @NonNull Style style)", "full_signature": "public  DrawingManager(@NonNull KujakuMapView mapView, @NonNull MapboxMap mapboxMap, @NonNull Style style)", "class_method_signature": "DrawingManager.DrawingManager(@NonNull KujakuMapView mapView, @NonNull MapboxMap mapboxMap, @NonNull Style style)", "testcase": false, "constructor": true}, {"identifier": "getKujakuCircleOptions", "parameters": "()", "modifiers": "public static", "return": "KujakuCircleOptions", "signature": "KujakuCircleOptions getKujakuCircleOptions()", "full_signature": "public static KujakuCircleOptions getKujakuCircleOptions()", "class_method_signature": "DrawingManager.getKujakuCircleOptions()", "testcase": false, "constructor": false}, {"identifier": "getKujakuCircleMiddleOptions", "parameters": "()", "modifiers": "public static", "return": "KujakuCircleOptions", "signature": "KujakuCircleOptions getKujakuCircleMiddleOptions()", "full_signature": "public static KujakuCircleOptions getKujakuCircleMiddleOptions()", "class_method_signature": "DrawingManager.getKujakuCircleMiddleOptions()", "testcase": false, "constructor": false}, {"identifier": "getKujakuCircleDraggableOptions", "parameters": "()", "modifiers": "public static", "return": "KujakuCircleOptions", "signature": "KujakuCircleOptions getKujakuCircleDraggableOptions()", "full_signature": "public static KujakuCircleOptions getKujakuCircleDraggableOptions()", "class_method_signature": "DrawingManager.getKujakuCircleDraggableOptions()", "testcase": false, "constructor": false}, {"identifier": "setDrawing", "parameters": "(boolean drawing)", "modifiers": "private", "return": "void", "signature": "void setDrawing(boolean drawing)", "full_signature": "private void setDrawing(boolean drawing)", "class_method_signature": "DrawingManager.setDrawing(boolean drawing)", "testcase": false, "constructor": false}, {"identifier": "setCurrentCircle", "parameters": "(@Nullable Circle circle)", "modifiers": "private", "return": "void", "signature": "void setCurrentCircle(@Nullable Circle circle)", "full_signature": "private void setCurrentCircle(@Nullable Circle circle)", "class_method_signature": "DrawingManager.setCurrentCircle(@Nullable Circle circle)", "testcase": false, "constructor": false}, {"identifier": "setCurrentKujakuCircle", "parameters": "(@Nullable KujakuCircle kujakuCircle)", "modifiers": "private", "return": "void", "signature": "void setCurrentKujakuCircle(@Nullable KujakuCircle kujakuCircle)", "full_signature": "private void setCurrentKujakuCircle(@Nullable KujakuCircle kujakuCircle)", "class_method_signature": "DrawingManager.setCurrentKujakuCircle(@Nullable KujakuCircle kujakuCircle)", "testcase": false, "constructor": false}, {"identifier": "startDrawing", "parameters": "(@Nullable FillBoundaryLayer fillBoundaryLayer)", "modifiers": "public", "return": "boolean", "signature": "boolean startDrawing(@Nullable FillBoundaryLayer fillBoundaryLayer)", "full_signature": "public boolean startDrawing(@Nullable FillBoundaryLayer fillBoundaryLayer)", "class_method_signature": "DrawingManager.startDrawing(@Nullable FillBoundaryLayer fillBoundaryLayer)", "testcase": false, "constructor": false}, {"identifier": "editBoundary", "parameters": "(@NonNull FillBoundaryLayer fillBoundaryLayer)", "modifiers": "public", "return": "boolean", "signature": "boolean editBoundary(@NonNull FillBoundaryLayer fillBoundaryLayer)", "full_signature": "public boolean editBoundary(@NonNull FillBoundaryLayer fillBoundaryLayer)", "class_method_signature": "DrawingManager.editBoundary(@NonNull FillBoundaryLayer fillBoundaryLayer)", "testcase": false, "constructor": false}, {"identifier": "startDrawingPoints", "parameters": "(@Nullable List<Point> points)", "modifiers": "public", "return": "void", "signature": "void startDrawingPoints(@Nullable List<Point> points)", "full_signature": "public void startDrawingPoints(@Nullable List<Point> points)", "class_method_signature": "DrawingManager.startDrawingPoints(@Nullable List<Point> points)", "testcase": false, "constructor": false}, {"identifier": "stopDrawingAndDisplayLayer", "parameters": "()", "modifiers": "public", "return": "Polygon", "signature": "Polygon stopDrawingAndDisplayLayer()", "full_signature": "public Polygon stopDrawingAndDisplayLayer()", "class_method_signature": "DrawingManager.stopDrawingAndDisplayLayer()", "testcase": false, "constructor": false}, {"identifier": "stopDrawing", "parameters": "()", "modifiers": "private", "return": "Polygon", "signature": "Polygon stopDrawing()", "full_signature": "private Polygon stopDrawing()", "class_method_signature": "DrawingManager.stopDrawing()", "testcase": false, "constructor": false}, {"identifier": "getCurrentPolygon", "parameters": "()", "modifiers": "public", "return": "Polygon", "signature": "Polygon getCurrentPolygon()", "full_signature": "public Polygon getCurrentPolygon()", "class_method_signature": "DrawingManager.getCurrentPolygon()", "testcase": false, "constructor": false}, {"identifier": "isDrawingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDrawingEnabled()", "full_signature": "public boolean isDrawingEnabled()", "class_method_signature": "DrawingManager.isDrawingEnabled()", "testcase": false, "constructor": false}, {"identifier": "getKujakuCircle", "parameters": "(@Nullable Circle circle)", "modifiers": "private", "return": "KujakuCircle", "signature": "KujakuCircle getKujakuCircle(@Nullable Circle circle)", "full_signature": "private KujakuCircle getKujakuCircle(@Nullable Circle circle)", "class_method_signature": "DrawingManager.getKujakuCircle(@Nullable Circle circle)", "testcase": false, "constructor": false}, {"identifier": "createMiddlePoints", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createMiddlePoints()", "full_signature": "private void createMiddlePoints()", "class_method_signature": "DrawingManager.createMiddlePoints()", "testcase": false, "constructor": false}, {"identifier": "createMiddleKujakuCircleOptions", "parameters": "(@NonNull Circle circle1, @NonNull Circle circle2, @NonNull KujakuCircleOptions options)", "modifiers": "private", "return": "KujakuCircleOptions", "signature": "KujakuCircleOptions createMiddleKujakuCircleOptions(@NonNull Circle circle1, @NonNull Circle circle2, @NonNull KujakuCircleOptions options)", "full_signature": "private KujakuCircleOptions createMiddleKujakuCircleOptions(@NonNull Circle circle1, @NonNull Circle circle2, @NonNull KujakuCircleOptions options)", "class_method_signature": "DrawingManager.createMiddleKujakuCircleOptions(@NonNull Circle circle1, @NonNull Circle circle2, @NonNull KujakuCircleOptions options)", "testcase": false, "constructor": false}, {"identifier": "refreshPolygon", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshPolygon()", "full_signature": "private void refreshPolygon()", "class_method_signature": "DrawingManager.refreshPolygon()", "testcase": false, "constructor": false}, {"identifier": "drawCircle", "parameters": "(@NonNull LatLng latLng)", "modifiers": "public", "return": "Circle", "signature": "Circle drawCircle(@NonNull LatLng latLng)", "full_signature": "public Circle drawCircle(@NonNull LatLng latLng)", "class_method_signature": "DrawingManager.drawCircle(@NonNull LatLng latLng)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(@NonNull KujakuCircleOptions options)", "modifiers": "public", "return": "Circle", "signature": "Circle create(@NonNull KujakuCircleOptions options)", "full_signature": "public Circle create(@NonNull KujakuCircleOptions options)", "class_method_signature": "DrawingManager.create(@NonNull KujakuCircleOptions options)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(@NonNull KujakuCircleOptions options, boolean refresh)", "modifiers": "private", "return": "Circle", "signature": "Circle create(@NonNull KujakuCircleOptions options, boolean refresh)", "full_signature": "private Circle create(@NonNull KujakuCircleOptions options, boolean refresh)", "class_method_signature": "DrawingManager.create(@NonNull KujakuCircleOptions options, boolean refresh)", "testcase": false, "constructor": false}, {"identifier": "createFromList", "parameters": "(@NonNull List<KujakuCircleOptions> options)", "modifiers": "private", "return": "void", "signature": "void createFromList(@NonNull List<KujakuCircleOptions> options)", "full_signature": "private void createFromList(@NonNull List<KujakuCircleOptions> options)", "class_method_signature": "DrawingManager.createFromList(@NonNull List<KujakuCircleOptions> options)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(boolean createMiddlePoints)", "modifiers": "private", "return": "void", "signature": "void refresh(boolean createMiddlePoints)", "full_signature": "private void refresh(boolean createMiddlePoints)", "class_method_signature": "DrawingManager.refresh(boolean createMiddlePoints)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deleteAll()", "full_signature": "private void deleteAll()", "class_method_signature": "DrawingManager.deleteAll()", "testcase": false, "constructor": false}, {"identifier": "clearDrawing", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearDrawing()", "full_signature": "public void clearDrawing()", "class_method_signature": "DrawingManager.clearDrawing()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Nullable KujakuCircle kujakuCircle)", "modifiers": "public", "return": "void", "signature": "void delete(@Nullable KujakuCircle kujakuCircle)", "full_signature": "public void delete(@Nullable KujakuCircle kujakuCircle)", "class_method_signature": "DrawingManager.delete(@Nullable KujakuCircle kujakuCircle)", "testcase": false, "constructor": false}, {"identifier": "deleteDrawingCurrentCircle", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteDrawingCurrentCircle()", "full_signature": "public void deleteDrawingCurrentCircle()", "class_method_signature": "DrawingManager.deleteDrawingCurrentCircle()", "testcase": false, "constructor": false}, {"identifier": "setDraggable", "parameters": "(boolean draggable, @NonNull Circle circle)", "modifiers": "public", "return": "void", "signature": "void setDraggable(boolean draggable, @NonNull Circle circle)", "full_signature": "public void setDraggable(boolean draggable, @NonNull Circle circle)", "class_method_signature": "DrawingManager.setDraggable(boolean draggable, @NonNull Circle circle)", "testcase": false, "constructor": false}, {"identifier": "unsetCurrentCircleDraggable", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unsetCurrentCircleDraggable()", "full_signature": "public void unsetCurrentCircleDraggable()", "class_method_signature": "DrawingManager.unsetCurrentCircleDraggable()", "testcase": false, "constructor": false}, {"identifier": "isMiddleCircle", "parameters": "(@NonNull Circle circle)", "modifiers": "public", "return": "boolean", "signature": "boolean isMiddleCircle(@NonNull Circle circle)", "full_signature": "public boolean isMiddleCircle(@NonNull Circle circle)", "class_method_signature": "DrawingManager.isMiddleCircle(@NonNull Circle circle)", "testcase": false, "constructor": false}, {"identifier": "getKujakuCircles", "parameters": "()", "modifiers": "public", "return": "List<KujakuCircle>", "signature": "List<KujakuCircle> getKujakuCircles()", "full_signature": "public List<KujakuCircle> getKujakuCircles()", "class_method_signature": "DrawingManager.getKujakuCircles()", "testcase": false, "constructor": false}, {"identifier": "getCurrentKujakuCircle", "parameters": "()", "modifiers": "public", "return": "KujakuCircle", "signature": "KujakuCircle getCurrentKujakuCircle()", "full_signature": "public KujakuCircle getCurrentKujakuCircle()", "class_method_signature": "DrawingManager.getCurrentKujakuCircle()", "testcase": false, "constructor": false}, {"identifier": "addOnDrawingCircleClickListener", "parameters": "(OnDrawingCircleClickListener listener)", "modifiers": "public", "return": "void", "signature": "void addOnDrawingCircleClickListener(OnDrawingCircleClickListener listener)", "full_signature": "public void addOnDrawingCircleClickListener(OnDrawingCircleClickListener listener)", "class_method_signature": "DrawingManager.addOnDrawingCircleClickListener(OnDrawingCircleClickListener listener)", "testcase": false, "constructor": false}, {"identifier": "addOnKujakuLayerLongClickListener", "parameters": "(OnKujakuLayerLongClickListener listener)", "modifiers": "public", "return": "void", "signature": "void addOnKujakuLayerLongClickListener(OnKujakuLayerLongClickListener listener)", "full_signature": "public void addOnKujakuLayerLongClickListener(OnKujakuLayerLongClickListener listener)", "class_method_signature": "DrawingManager.addOnKujakuLayerLongClickListener(OnKujakuLayerLongClickListener listener)", "testcase": false, "constructor": false}], "file": "library/src/main/java/io/ona/kujaku/manager/DrawingManager.java"}, "focal_method": {"identifier": "unsetCurrentCircleDraggable", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void unsetCurrentCircleDraggable() {\n        if (this.getCurrentKujakuCircle() != null) {\n            this.setDraggable(false, this.getCurrentKujakuCircle().getCircle());\n        }\n    }", "signature": "void unsetCurrentCircleDraggable()", "full_signature": "public void unsetCurrentCircleDraggable()", "class_method_signature": "DrawingManager.unsetCurrentCircleDraggable()", "testcase": false, "constructor": false, "invocations": ["getCurrentKujakuCircle", "setDraggable", "getCircle", "getCurrentKujakuCircle"]}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}