{"test_class": {"identifier": "SecurityAnalysisExecutionHandlersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FileSystem fileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}, {"original_string": "private Path workingDir;", "modifier": "private", "type": "Path", "declarator": "workingDir", "var_name": "workingDir"}], "file": "security-analysis-api/src/test/java/com/powsybl/security/distributed/SecurityAnalysisExecutionHandlersTest.java"}, "test_case": {"identifier": "forwardedBeforeWithCompleteInput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void forwardedBeforeWithCompleteInput() throws IOException {\n        SecurityAnalysisExecutionInput input = new SecurityAnalysisExecutionInput()\n                .setParameters(new SecurityAnalysisParameters())\n                .setNetworkVariant(EurostagTutorialExample1Factory.create(), VariantManagerConstants.INITIAL_VARIANT_ID)\n                .setContingenciesSource(ByteSource.wrap(\"contingencies definition\".getBytes(StandardCharsets.UTF_8)))\n                .addResultExtensions(ImmutableList.of(\"ext1\", \"ext2\"))\n                .addViolationTypes(ImmutableList.of(LimitViolationType.CURRENT));\n        ExecutionHandler<SecurityAnalysisResult> handler = SecurityAnalysisExecutionHandlers.forwarded(input, 12);\n\n        Path workingDir = fileSystem.getPath(\"/work\");\n        List<CommandExecution> commandExecutions = handler.before(workingDir);\n        SimpleCommand command = (SimpleCommand) commandExecutions.get(0).getCommand();\n        List<String> args = command.getArgs(0);\n        assertThat(args.subList(1, args.size()))\n                .containsExactlyInAnyOrder(\"--case-file=/work/network.xiidm\",\n                        \"--parameters-file=/work/parameters.json\",\n                        \"--output-file=/work/result.json\",\n                        \"--output-format=JSON\",\n                        \"--contingencies-file=/work/contingencies.groovy\",\n                        \"--with-extensions=ext1,ext2\",\n                        \"--limit-types=CURRENT\",\n                        \"--task-count=12\");\n\n        assertThat(workingDir.resolve(\"network.xiidm\")).exists();\n        assertThat(workingDir.resolve(\"parameters.json\")).exists();\n        assertThat(workingDir.resolve(\"contingencies.groovy\")).exists();\n    }", "signature": "void forwardedBeforeWithCompleteInput()", "full_signature": "@Test public void forwardedBeforeWithCompleteInput()", "class_method_signature": "SecurityAnalysisExecutionHandlersTest.forwardedBeforeWithCompleteInput()", "testcase": true, "constructor": false, "invocations": ["addViolationTypes", "addResultExtensions", "setContingenciesSource", "setNetworkVariant", "setParameters", "create", "wrap", "getBytes", "of", "of", "forwarded", "getPath", "before", "getCommand", "get", "getArgs", "containsExactlyInAnyOrder", "assertThat", "subList", "size", "exists", "assertThat", "resolve", "exists", "assertThat", "resolve", "exists", "assertThat", "resolve"]}, "focal_class": {"identifier": "SecurityAnalysisExecutionHandlers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String OUTPUT_FILE_FMT = \"task_%d_result.json\";", "modifier": "private static final", "type": "String", "declarator": "OUTPUT_FILE_FMT = \"task_%d_result.json\"", "var_name": "OUTPUT_FILE_FMT"}, {"original_string": "private static final String OUTPUT_FILE = \"result.json\";", "modifier": "private static final", "type": "String", "declarator": "OUTPUT_FILE = \"result.json\"", "var_name": "OUTPUT_FILE"}, {"original_string": "private static final String SA_TASK_CMD_ID = \"security-analysis-task\";", "modifier": "private static final", "type": "String", "declarator": "SA_TASK_CMD_ID = \"security-analysis-task\"", "var_name": "SA_TASK_CMD_ID"}, {"original_string": "private static final String SA_CMD_ID = \"security-analysis\";", "modifier": "private static final", "type": "String", "declarator": "SA_CMD_ID = \"security-analysis\"", "var_name": "SA_CMD_ID"}, {"original_string": "private static final String TASK_COUNT_ERROR_MESSAGE = \"Number of subtasks must be 1 or greather, was %s.\";", "modifier": "private static final", "type": "String", "declarator": "TASK_COUNT_ERROR_MESSAGE = \"Number of subtasks must be 1 or greather, was %s.\"", "var_name": "TASK_COUNT_ERROR_MESSAGE"}], "methods": [{"identifier": "SecurityAnalysisExecutionHandlers", "parameters": "()", "modifiers": "private", "return": "", "signature": " SecurityAnalysisExecutionHandlers()", "full_signature": "private  SecurityAnalysisExecutionHandlers()", "class_method_signature": "SecurityAnalysisExecutionHandlers.SecurityAnalysisExecutionHandlers()", "testcase": false, "constructor": true}, {"identifier": "forwarded", "parameters": "(SecurityAnalysisExecutionInput input)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResult>", "signature": "ExecutionHandler<SecurityAnalysisResult> forwarded(SecurityAnalysisExecutionInput input)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResult> forwarded(SecurityAnalysisExecutionInput input)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwarded(SecurityAnalysisExecutionInput input)", "testcase": false, "constructor": false}, {"identifier": "forwarded", "parameters": "(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResult>", "signature": "ExecutionHandler<SecurityAnalysisResult> forwarded(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResult> forwarded(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwarded(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "testcase": false, "constructor": false}, {"identifier": "forwardedWithLogs", "parameters": "(SecurityAnalysisExecutionInput input)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResultWithLog>", "signature": "ExecutionHandler<SecurityAnalysisResultWithLog> forwardedWithLogs(SecurityAnalysisExecutionInput input)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResultWithLog> forwardedWithLogs(SecurityAnalysisExecutionInput input)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwardedWithLogs(SecurityAnalysisExecutionInput input)", "testcase": false, "constructor": false}, {"identifier": "forwardedWithLogs", "parameters": "(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResultWithLog>", "signature": "ExecutionHandler<SecurityAnalysisResultWithLog> forwardedWithLogs(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResultWithLog> forwardedWithLogs(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwardedWithLogs(SecurityAnalysisExecutionInput input, Integer forwardedTaskCount)", "testcase": false, "constructor": false}, {"identifier": "distributed", "parameters": "(SecurityAnalysisExecutionInput input, int subtaskCount)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResult>", "signature": "ExecutionHandler<SecurityAnalysisResult> distributed(SecurityAnalysisExecutionInput input, int subtaskCount)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResult> distributed(SecurityAnalysisExecutionInput input, int subtaskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.distributed(SecurityAnalysisExecutionInput input, int subtaskCount)", "testcase": false, "constructor": false}, {"identifier": "distributedWithLog", "parameters": "(SecurityAnalysisExecutionInput input, int subtaskCount)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResultWithLog>", "signature": "ExecutionHandler<SecurityAnalysisResultWithLog> distributedWithLog(SecurityAnalysisExecutionInput input, int subtaskCount)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResultWithLog> distributedWithLog(SecurityAnalysisExecutionInput input, int subtaskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.distributedWithLog(SecurityAnalysisExecutionInput input, int subtaskCount)", "testcase": false, "constructor": false}, {"identifier": "readSingleResult", "parameters": "(Path workingDir)", "modifiers": "public static", "return": "SecurityAnalysisResult", "signature": "SecurityAnalysisResult readSingleResult(Path workingDir)", "full_signature": "public static SecurityAnalysisResult readSingleResult(Path workingDir)", "class_method_signature": "SecurityAnalysisExecutionHandlers.readSingleResult(Path workingDir)", "testcase": false, "constructor": false}, {"identifier": "readSingleResultWithLogs", "parameters": "(Path workingDir)", "modifiers": "public static", "return": "SecurityAnalysisResultWithLog", "signature": "SecurityAnalysisResultWithLog readSingleResultWithLogs(Path workingDir)", "full_signature": "public static SecurityAnalysisResultWithLog readSingleResultWithLogs(Path workingDir)", "class_method_signature": "SecurityAnalysisExecutionHandlers.readSingleResultWithLogs(Path workingDir)", "testcase": false, "constructor": false}, {"identifier": "saCmdOutLogName", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String saCmdOutLogName()", "full_signature": "private static String saCmdOutLogName()", "class_method_signature": "SecurityAnalysisExecutionHandlers.saCmdOutLogName()", "testcase": false, "constructor": false}, {"identifier": "saCmdErrLogName", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String saCmdErrLogName()", "full_signature": "private static String saCmdErrLogName()", "class_method_signature": "SecurityAnalysisExecutionHandlers.saCmdErrLogName()", "testcase": false, "constructor": false}, {"identifier": "forwardedOptions", "parameters": "(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "modifiers": "public static", "return": "void", "signature": "void forwardedOptions(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "full_signature": "public static void forwardedOptions(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwardedOptions(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "testcase": false, "constructor": false}, {"identifier": "forwardedWithLogsOptions", "parameters": "(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "modifiers": "public static", "return": "void", "signature": "void forwardedWithLogsOptions(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "full_signature": "public static void forwardedWithLogsOptions(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwardedWithLogsOptions(Path workingDir, SecurityAnalysisCommandOptions options, Integer taskCount)", "testcase": false, "constructor": false}, {"identifier": "distributedOptions", "parameters": "(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "modifiers": "public static", "return": "void", "signature": "void distributedOptions(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "full_signature": "public static void distributedOptions(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.distributedOptions(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "testcase": false, "constructor": false}, {"identifier": "distributedWithLogsOptions", "parameters": "(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "modifiers": "public static", "return": "void", "signature": "void distributedWithLogsOptions(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "full_signature": "public static void distributedWithLogsOptions(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.distributedWithLogsOptions(Path workingDir, SecurityAnalysisCommandOptions options, int taskCount)", "testcase": false, "constructor": false}, {"identifier": "getOutputPathForTask", "parameters": "(Path workingDir, int taskIndex)", "modifiers": "public static", "return": "Path", "signature": "Path getOutputPathForTask(Path workingDir, int taskIndex)", "full_signature": "public static Path getOutputPathForTask(Path workingDir, int taskIndex)", "class_method_signature": "SecurityAnalysisExecutionHandlers.getOutputPathForTask(Path workingDir, int taskIndex)", "testcase": false, "constructor": false}, {"identifier": "readResults", "parameters": "(Path workingDir, int subtaskCount)", "modifiers": "public static", "return": "SecurityAnalysisResult", "signature": "SecurityAnalysisResult readResults(Path workingDir, int subtaskCount)", "full_signature": "public static SecurityAnalysisResult readResults(Path workingDir, int subtaskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.readResults(Path workingDir, int subtaskCount)", "testcase": false, "constructor": false}, {"identifier": "readResultsWithLogs", "parameters": "(Path workingDir, int subtaskCount)", "modifiers": "public static", "return": "SecurityAnalysisResultWithLog", "signature": "SecurityAnalysisResultWithLog readResultsWithLogs(Path workingDir, int subtaskCount)", "full_signature": "public static SecurityAnalysisResultWithLog readResultsWithLogs(Path workingDir, int subtaskCount)", "class_method_signature": "SecurityAnalysisExecutionHandlers.readResultsWithLogs(Path workingDir, int subtaskCount)", "testcase": false, "constructor": false}, {"identifier": "generateExceptionWithLogs", "parameters": "(Path workingDir, Exception cause, int count)", "modifiers": "private static", "return": "ComputationException", "signature": "ComputationException generateExceptionWithLogs(Path workingDir, Exception cause, int count)", "full_signature": "private static ComputationException generateExceptionWithLogs(Path workingDir, Exception cause, int count)", "class_method_signature": "SecurityAnalysisExecutionHandlers.generateExceptionWithLogs(Path workingDir, Exception cause, int count)", "testcase": false, "constructor": false}, {"identifier": "generateExceptionWithLogs", "parameters": "(Path workingDir, Exception cause)", "modifiers": "private static", "return": "ComputationException", "signature": "ComputationException generateExceptionWithLogs(Path workingDir, Exception cause)", "full_signature": "private static ComputationException generateExceptionWithLogs(Path workingDir, Exception cause)", "class_method_signature": "SecurityAnalysisExecutionHandlers.generateExceptionWithLogs(Path workingDir, Exception cause)", "testcase": false, "constructor": false}, {"identifier": "satErrName", "parameters": "(int i)", "modifiers": "private static", "return": "String", "signature": "String satErrName(int i)", "full_signature": "private static String satErrName(int i)", "class_method_signature": "SecurityAnalysisExecutionHandlers.satErrName(int i)", "testcase": false, "constructor": false}, {"identifier": "satOutName", "parameters": "(int i)", "modifiers": "private static", "return": "String", "signature": "String satOutName(int i)", "full_signature": "private static String satOutName(int i)", "class_method_signature": "SecurityAnalysisExecutionHandlers.satOutName(int i)", "testcase": false, "constructor": false}, {"identifier": "getLogPathForTask", "parameters": "(Path workingDir, int taskNumber)", "modifiers": "public static", "return": "Path", "signature": "Path getLogPathForTask(Path workingDir, int taskNumber)", "full_signature": "public static Path getLogPathForTask(Path workingDir, int taskNumber)", "class_method_signature": "SecurityAnalysisExecutionHandlers.getLogPathForTask(Path workingDir, int taskNumber)", "testcase": false, "constructor": false}, {"identifier": "getLogPath", "parameters": "(Path workingDir)", "modifiers": "public static", "return": "Path", "signature": "Path getLogPath(Path workingDir)", "full_signature": "public static Path getLogPath(Path workingDir)", "class_method_signature": "SecurityAnalysisExecutionHandlers.getLogPath(Path workingDir)", "testcase": false, "constructor": false}], "file": "security-analysis-api/src/main/java/com/powsybl/security/distributed/SecurityAnalysisExecutionHandlers.java"}, "focal_method": {"identifier": "forwarded", "parameters": "(SecurityAnalysisExecutionInput input)", "modifiers": "public static", "return": "ExecutionHandler<SecurityAnalysisResult>", "body": "public static ExecutionHandler<SecurityAnalysisResult> forwarded(SecurityAnalysisExecutionInput input) {\n        return forwarded(input, null);\n    }", "signature": "ExecutionHandler<SecurityAnalysisResult> forwarded(SecurityAnalysisExecutionInput input)", "full_signature": "public static ExecutionHandler<SecurityAnalysisResult> forwarded(SecurityAnalysisExecutionInput input)", "class_method_signature": "SecurityAnalysisExecutionHandlers.forwarded(SecurityAnalysisExecutionInput input)", "testcase": false, "constructor": false, "invocations": ["forwarded"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}