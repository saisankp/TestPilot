{"test_class": {"identifier": "ConsulRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INTERFACE_ID        = \"com.alipay.sofa.rpc.registry.consul.TestService\";", "modifier": "private static final", "type": "String", "declarator": "INTERFACE_ID        = \"com.alipay.sofa.rpc.registry.consul.TestService\"", "var_name": "INTERFACE_ID"}, {"original_string": "private static final String CONSUL_SERVICE_NAME = \"test-service\";", "modifier": "private static final", "type": "String", "declarator": "CONSUL_SERVICE_NAME = \"test-service\"", "var_name": "CONSUL_SERVICE_NAME"}, {"original_string": "private ConsulProcess       consul;", "modifier": "private", "type": "ConsulProcess", "declarator": "consul", "var_name": "consul"}, {"original_string": "private RegistryConfig      registryConfig;", "modifier": "private", "type": "RegistryConfig", "declarator": "registryConfig", "var_name": "registryConfig"}, {"original_string": "private ConsulRegistry      registry;", "modifier": "private", "type": "ConsulRegistry", "declarator": "registry", "var_name": "registry"}], "file": "registry/registry-consul/src/test/java/com/alipay/sofa/rpc/registry/consul/ConsulRegistryTest.java"}, "test_case": {"identifier": "testRegister", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegister() {\n        ProviderConfig<?> providerConfig = providerConfig(\"consul-test-1\", 12200, 12201, 12202);\n        registry.register(providerConfig);\n\n        ConsulClient consulClient = new ConsulClient(\"localhost:\" + consul.getHttpPort());\n        HealthServicesRequest request = HealthServicesRequest.newBuilder().setPassing(true).build();\n        assertUntil(() -> {\n            Response<List<HealthService>> healthServices = consulClient.getHealthServices(INTERFACE_ID, request);\n            Assert.assertEquals(3, healthServices.getValue().size());\n        }, 10, TimeUnit.SECONDS);\n\n        registry.unRegister(providerConfig);\n\n        assertUntil(() -> {\n            Response<List<HealthService>> healthServices = consulClient.getHealthServices(INTERFACE_ID, request);\n            Assert.assertEquals(0, healthServices.getValue().size());\n        }, 10, TimeUnit.SECONDS);\n    }", "signature": "void testRegister()", "full_signature": "@Test public void testRegister()", "class_method_signature": "ConsulRegistryTest.testRegister()", "testcase": true, "constructor": false, "invocations": ["providerConfig", "register", "getHttpPort", "build", "setPassing", "newBuilder", "assertUntil", "getHealthServices", "assertEquals", "size", "getValue", "unRegister", "assertUntil", "getHealthServices", "assertEquals", "size", "getValue"]}, "focal_class": {"identifier": "ConsulRegistry", "superclass": "extends Registry", "interfaces": "", "fields": [{"original_string": "public static final String EXT_NAME=\"ConsulRegistry\";", "modifier": "public static final", "type": "String", "declarator": "EXT_NAME=\"ConsulRegistry\"", "var_name": "EXT_NAME"}, {"original_string": "private final static Logger LOGGER = LoggerFactory.getLogger(ConsulRegistry.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ConsulRegistry.class)", "var_name": "LOGGER"}, {"original_string": "private final ConsulRegistryProperties properties;", "modifier": "private final", "type": "ConsulRegistryProperties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private Map<String, ScheduledFuture> heartbeatFutures = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<String, ScheduledFuture>", "declarator": "heartbeatFutures = new ConcurrentHashMap<>()", "var_name": "heartbeatFutures"}, {"original_string": "private Map<String, HealthServiceInformer> healthServiceInformers = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<String, HealthServiceInformer>", "declarator": "healthServiceInformers = new ConcurrentHashMap<>()", "var_name": "healthServiceInformers"}, {"original_string": "private ConsulClient consulClient;", "modifier": "private", "type": "ConsulClient", "declarator": "consulClient", "var_name": "consulClient"}, {"original_string": "private ScheduledExecutorService heartbeatExecutor;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "heartbeatExecutor", "var_name": "heartbeatExecutor"}], "methods": [{"identifier": "ConsulRegistry", "parameters": "(RegistryConfig registryConfig)", "modifiers": "protected", "return": "", "signature": " ConsulRegistry(RegistryConfig registryConfig)", "full_signature": "protected  ConsulRegistry(RegistryConfig registryConfig)", "class_method_signature": "ConsulRegistry.ConsulRegistry(RegistryConfig registryConfig)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "ConsulRegistry.init()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "ConsulRegistry.destroy()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(DestroyHook hook)", "modifiers": "@Override public", "return": "void", "signature": "void destroy(DestroyHook hook)", "full_signature": "@Override public void destroy(DestroyHook hook)", "class_method_signature": "ConsulRegistry.destroy(DestroyHook hook)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "ConsulRegistry.start()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(ProviderConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void register(ProviderConfig config)", "full_signature": "@Override public void register(ProviderConfig config)", "class_method_signature": "ConsulRegistry.register(ProviderConfig config)", "testcase": false, "constructor": false}, {"identifier": "unRegister", "parameters": "(ProviderConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void unRegister(ProviderConfig config)", "full_signature": "@Override public void unRegister(ProviderConfig config)", "class_method_signature": "ConsulRegistry.unRegister(ProviderConfig config)", "testcase": false, "constructor": false}, {"identifier": "batchUnRegister", "parameters": "(List<ProviderConfig> configs)", "modifiers": "@Override public", "return": "void", "signature": "void batchUnRegister(List<ProviderConfig> configs)", "full_signature": "@Override public void batchUnRegister(List<ProviderConfig> configs)", "class_method_signature": "ConsulRegistry.batchUnRegister(List<ProviderConfig> configs)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(ConsumerConfig config)", "modifiers": "@Override public", "return": "List<ProviderGroup>", "signature": "List<ProviderGroup> subscribe(ConsumerConfig config)", "full_signature": "@Override public List<ProviderGroup> subscribe(ConsumerConfig config)", "class_method_signature": "ConsulRegistry.subscribe(ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "unSubscribe", "parameters": "(ConsumerConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void unSubscribe(ConsumerConfig config)", "full_signature": "@Override public void unSubscribe(ConsumerConfig config)", "class_method_signature": "ConsulRegistry.unSubscribe(ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "batchUnSubscribe", "parameters": "(List<ConsumerConfig> configs)", "modifiers": "@Override public", "return": "void", "signature": "void batchUnSubscribe(List<ConsumerConfig> configs)", "full_signature": "@Override public void batchUnSubscribe(List<ConsumerConfig> configs)", "class_method_signature": "ConsulRegistry.batchUnSubscribe(List<ConsumerConfig> configs)", "testcase": false, "constructor": false}, {"identifier": "lookupHealthService", "parameters": "(ConsumerConfig config)", "modifiers": "private", "return": "List<ProviderInfo>", "signature": "List<ProviderInfo> lookupHealthService(ConsumerConfig config)", "full_signature": "private List<ProviderInfo> lookupHealthService(ConsumerConfig config)", "class_method_signature": "ConsulRegistry.lookupHealthService(ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "deregisterConsulService", "parameters": "(String id)", "modifiers": "private", "return": "void", "signature": "void deregisterConsulService(String id)", "full_signature": "private void deregisterConsulService(String id)", "class_method_signature": "ConsulRegistry.deregisterConsulService(String id)", "testcase": false, "constructor": false}, {"identifier": "registerConsulService", "parameters": "(NewService service)", "modifiers": "private", "return": "void", "signature": "void registerConsulService(NewService service)", "full_signature": "private void registerConsulService(NewService service)", "class_method_signature": "ConsulRegistry.registerConsulService(NewService service)", "testcase": false, "constructor": false}, {"identifier": "checkPass", "parameters": "(NewService service)", "modifiers": "private", "return": "void", "signature": "void checkPass(NewService service)", "full_signature": "private void checkPass(NewService service)", "class_method_signature": "ConsulRegistry.checkPass(NewService service)", "testcase": false, "constructor": false}, {"identifier": "buildNewServices", "parameters": "(ProviderConfig<?> config)", "modifiers": "private", "return": "List<NewService>", "signature": "List<NewService> buildNewServices(ProviderConfig<?> config)", "full_signature": "private List<NewService> buildNewServices(ProviderConfig<?> config)", "class_method_signature": "ConsulRegistry.buildNewServices(ProviderConfig<?> config)", "testcase": false, "constructor": false}, {"identifier": "buildCheck", "parameters": "(String serverHost, int serverPort)", "modifiers": "private", "return": "NewService.Check", "signature": "NewService.Check buildCheck(String serverHost, int serverPort)", "full_signature": "private NewService.Check buildCheck(String serverHost, int serverPort)", "class_method_signature": "ConsulRegistry.buildCheck(String serverHost, int serverPort)", "testcase": false, "constructor": false}], "file": "registry/registry-consul/src/main/java/com/alipay/sofa/rpc/registry/consul/ConsulRegistry.java"}, "focal_method": {"identifier": "register", "parameters": "(ProviderConfig config)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void register(ProviderConfig config) {\n        String appName = config.getAppName();\n\n        if (!registryConfig.isRegister()) {\n            // \u53ea\u8ba2\u9605\u4e0d\u6ce8\u518c\n            if (LOGGER.isInfoEnabled(appName)) {\n                LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_REGISTRY_IGNORE));\n            }\n            return;\n        }\n        if (!config.isRegister()) {\n            return;\n        }\n        // \u6ce8\u518c\u670d\u52a1\u7aef\u8282\u70b9\n        try {\n            List<NewService> services = buildNewServices(config);\n            if (CommonUtils.isNotEmpty(services)) {\n                if (LOGGER.isInfoEnabled(appName)) {\n                    LOGGER.infoWithApp(appName,\n                            LogCodes.getLog(LogCodes.INFO_ROUTE_REGISTRY_PUB_START, config.getInterfaceId()));\n                }\n                for (NewService service : services) {\n                    registerConsulService(service);\n                    if (LOGGER.isInfoEnabled(appName)) {\n                        LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_ROUTE_REGISTRY_PUB, config.getInterfaceId()));\n                    }\n                }\n                if (LOGGER.isInfoEnabled(appName)) {\n                    LOGGER.infoWithApp(appName,\n                            LogCodes.getLog(LogCodes.INFO_ROUTE_REGISTRY_PUB_OVER, config.getInterfaceId()));\n                }\n            }\n        }catch (SofaRpcRuntimeException e){\n            throw e;\n        } catch (Exception e) {\n            throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_REG_PROVIDER, \"consulRegistry\", config.buildKey()), e);\n        }\n\n        if (EventBus.isEnable(ProviderPubEvent.class)) {\n            ProviderPubEvent event = new ProviderPubEvent(config);\n            EventBus.post(event);\n        }\n    }", "signature": "void register(ProviderConfig config)", "full_signature": "@Override public void register(ProviderConfig config)", "class_method_signature": "ConsulRegistry.register(ProviderConfig config)", "testcase": false, "constructor": false, "invocations": ["getAppName", "isRegister", "isInfoEnabled", "infoWithApp", "getLog", "isRegister", "buildNewServices", "isNotEmpty", "isInfoEnabled", "infoWithApp", "getLog", "getInterfaceId", "registerConsulService", "isInfoEnabled", "infoWithApp", "getLog", "getInterfaceId", "isInfoEnabled", "infoWithApp", "getLog", "getInterfaceId", "getLog", "buildKey", "isEnable", "post"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}