{"test_class": {"identifier": "MraidBridgeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock AdConfiguration mockAdConfiguration;", "modifier": "@Mock", "type": "AdConfiguration", "declarator": "mockAdConfiguration", "var_name": "mockAdConfiguration"}, {"original_string": "@Mock MraidNativeCommandHandler mockNativeCommandHandler;", "modifier": "@Mock", "type": "MraidNativeCommandHandler", "declarator": "mockNativeCommandHandler", "var_name": "mockNativeCommandHandler"}, {"original_string": "@Mock MraidBridgeListener mockBridgeListener;", "modifier": "@Mock", "type": "MraidBridgeListener", "declarator": "mockBridgeListener", "var_name": "mockBridgeListener"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockBannerWebView;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)", "type": "MraidWebView", "declarator": "mockBannerWebView", "var_name": "mockBannerWebView"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockInterstitialWebView;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)", "type": "MraidWebView", "declarator": "mockInterstitialWebView", "var_name": "mockInterstitialWebView"}, {"original_string": "@Captor ArgumentCaptor<WebViewClient> bannerWebViewClientCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<WebViewClient>", "declarator": "bannerWebViewClientCaptor", "var_name": "bannerWebViewClientCaptor"}, {"original_string": "private Activity activity;", "modifier": "private", "type": "Activity", "declarator": "activity", "var_name": "activity"}, {"original_string": "private MraidBridge subjectBanner;", "modifier": "private", "type": "MraidBridge", "declarator": "subjectBanner", "var_name": "subjectBanner"}, {"original_string": "private MraidBridge subjectInterstitial;", "modifier": "private", "type": "MraidBridge", "declarator": "subjectInterstitial", "var_name": "subjectInterstitial"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java"}, "test_case": {"identifier": "runCommand_close_shouldCallListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void runCommand_close_shouldCallListener()\n            throws MraidCommandException {\n        Map<String, String> params = new HashMap<String, String>();\n\n        subjectBanner.runCommand(MraidJavascriptCommand.CLOSE, params);\n\n        verify(mockBridgeListener).onClose();\n    }", "signature": "void runCommand_close_shouldCallListener()", "full_signature": "@Test public void runCommand_close_shouldCallListener()", "class_method_signature": "MraidBridgeTest.runCommand_close_shouldCallListener()", "testcase": true, "constructor": false, "invocations": ["runCommand", "onClose", "verify"]}, "focal_class": {"identifier": "MraidBridge", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String FILTERED_JAVASCRIPT_SOURCE = MraidJavascript.JAVASCRIPT_SOURCE\n            .replaceAll(\"(?m)^\\\\s+\", \"\")\n            .replaceAll(\"(?m)^//.*(?=\\\\n)\", \"\");", "modifier": "private final", "type": "String", "declarator": "FILTERED_JAVASCRIPT_SOURCE = MraidJavascript.JAVASCRIPT_SOURCE\n            .replaceAll(\"(?m)^\\\\s+\", \"\")\n            .replaceAll(\"(?m)^//.*(?=\\\\n)\", \"\")", "var_name": "FILTERED_JAVASCRIPT_SOURCE"}, {"original_string": "@NonNull private final AdConfiguration mAdConfiguration;", "modifier": "@NonNull private final", "type": "AdConfiguration", "declarator": "mAdConfiguration", "var_name": "mAdConfiguration"}, {"original_string": "@NonNull private final PlacementType mPlacementType;", "modifier": "@NonNull private final", "type": "PlacementType", "declarator": "mPlacementType", "var_name": "mPlacementType"}, {"original_string": "@NonNull private final MraidNativeCommandHandler mMraidNativeCommandHandler;", "modifier": "@NonNull private final", "type": "MraidNativeCommandHandler", "declarator": "mMraidNativeCommandHandler", "var_name": "mMraidNativeCommandHandler"}, {"original_string": "@Nullable private MraidBridgeListener mMraidBridgeListener;", "modifier": "@Nullable private", "type": "MraidBridgeListener", "declarator": "mMraidBridgeListener", "var_name": "mMraidBridgeListener"}, {"original_string": "@Nullable private MraidWebView mMraidWebView;", "modifier": "@Nullable private", "type": "MraidWebView", "declarator": "mMraidWebView", "var_name": "mMraidWebView"}, {"original_string": "private boolean mIsClicked;", "modifier": "private", "type": "boolean", "declarator": "mIsClicked", "var_name": "mIsClicked"}, {"original_string": "private boolean mHasLoaded;", "modifier": "private", "type": "boolean", "declarator": "mHasLoaded", "var_name": "mHasLoaded"}, {"original_string": "private final WebViewClient mMraidWebViewClient = new WebViewClient() {\n        @Override\n        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {\n            MoPubLog.d(\"Error: \" + description);\n            super.onReceivedError(view, errorCode, description, failingUrl);\n        }\n\n        @Override\n        public boolean shouldOverrideUrlLoading(@NonNull WebView view, @NonNull String url) {\n            return handleShouldOverrideUrl(url);\n        }\n\n        @Override\n        public void onPageFinished(@NonNull WebView view, @NonNull String url) {\n            handlePageFinished();\n        }\n    };", "modifier": "private final", "type": "WebViewClient", "declarator": "mMraidWebViewClient = new WebViewClient() {\n        @Override\n        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {\n            MoPubLog.d(\"Error: \" + description);\n            super.onReceivedError(view, errorCode, description, failingUrl);\n        }\n\n        @Override\n        public boolean shouldOverrideUrlLoading(@NonNull WebView view, @NonNull String url) {\n            return handleShouldOverrideUrl(url);\n        }\n\n        @Override\n        public void onPageFinished(@NonNull WebView view, @NonNull String url) {\n            handlePageFinished();\n        }\n    }", "var_name": "mMraidWebViewClient"}], "methods": [{"identifier": "MraidBridge", "parameters": "(@NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType)", "modifiers": "", "return": "", "signature": " MraidBridge(@NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType)", "full_signature": "  MraidBridge(@NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType)", "class_method_signature": "MraidBridge.MraidBridge(@NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType)", "testcase": false, "constructor": true}, {"identifier": "MraidBridge", "parameters": "(@NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType,\n            @NonNull MraidNativeCommandHandler mraidNativeCommandHandler)", "modifiers": "@VisibleForTesting", "return": "", "signature": " MraidBridge(@NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType,\n            @NonNull MraidNativeCommandHandler mraidNativeCommandHandler)", "full_signature": "@VisibleForTesting  MraidBridge(@NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType,\n            @NonNull MraidNativeCommandHandler mraidNativeCommandHandler)", "class_method_signature": "MraidBridge.MraidBridge(@NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType,\n            @NonNull MraidNativeCommandHandler mraidNativeCommandHandler)", "testcase": false, "constructor": true}, {"identifier": "setMraidBridgeListener", "parameters": "(@Nullable MraidBridgeListener listener)", "modifiers": "", "return": "void", "signature": "void setMraidBridgeListener(@Nullable MraidBridgeListener listener)", "full_signature": " void setMraidBridgeListener(@Nullable MraidBridgeListener listener)", "class_method_signature": "MraidBridge.setMraidBridgeListener(@Nullable MraidBridgeListener listener)", "testcase": false, "constructor": false}, {"identifier": "attachView", "parameters": "(@NonNull MraidWebView mraidWebView)", "modifiers": "", "return": "void", "signature": "void attachView(@NonNull MraidWebView mraidWebView)", "full_signature": " void attachView(@NonNull MraidWebView mraidWebView)", "class_method_signature": "MraidBridge.attachView(@NonNull MraidWebView mraidWebView)", "testcase": false, "constructor": false}, {"identifier": "detach", "parameters": "()", "modifiers": "", "return": "void", "signature": "void detach()", "full_signature": " void detach()", "class_method_signature": "MraidBridge.detach()", "testcase": false, "constructor": false}, {"identifier": "setContentHtml", "parameters": "(@NonNull String htmlData)", "modifiers": "public", "return": "void", "signature": "void setContentHtml(@NonNull String htmlData)", "full_signature": "public void setContentHtml(@NonNull String htmlData)", "class_method_signature": "MraidBridge.setContentHtml(@NonNull String htmlData)", "testcase": false, "constructor": false}, {"identifier": "setContentUrl", "parameters": "(String url)", "modifiers": "public", "return": "void", "signature": "void setContentUrl(String url)", "full_signature": "public void setContentUrl(String url)", "class_method_signature": "MraidBridge.setContentUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "injectJavaScript", "parameters": "(@NonNull String javascript)", "modifiers": "", "return": "void", "signature": "void injectJavaScript(@NonNull String javascript)", "full_signature": " void injectJavaScript(@NonNull String javascript)", "class_method_signature": "MraidBridge.injectJavaScript(@NonNull String javascript)", "testcase": false, "constructor": false}, {"identifier": "fireErrorEvent", "parameters": "(@NonNull MraidJavascriptCommand command, @NonNull String message)", "modifiers": "private", "return": "void", "signature": "void fireErrorEvent(@NonNull MraidJavascriptCommand command, @NonNull String message)", "full_signature": "private void fireErrorEvent(@NonNull MraidJavascriptCommand command, @NonNull String message)", "class_method_signature": "MraidBridge.fireErrorEvent(@NonNull MraidJavascriptCommand command, @NonNull String message)", "testcase": false, "constructor": false}, {"identifier": "fireNativeCommandCompleteEvent", "parameters": "(@NonNull MraidJavascriptCommand command)", "modifiers": "private", "return": "void", "signature": "void fireNativeCommandCompleteEvent(@NonNull MraidJavascriptCommand command)", "full_signature": "private void fireNativeCommandCompleteEvent(@NonNull MraidJavascriptCommand command)", "class_method_signature": "MraidBridge.fireNativeCommandCompleteEvent(@NonNull MraidJavascriptCommand command)", "testcase": false, "constructor": false}, {"identifier": "handleShouldOverrideUrl", "parameters": "(@NonNull final String url)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean handleShouldOverrideUrl(@NonNull final String url)", "full_signature": "@VisibleForTesting boolean handleShouldOverrideUrl(@NonNull final String url)", "class_method_signature": "MraidBridge.handleShouldOverrideUrl(@NonNull final String url)", "testcase": false, "constructor": false}, {"identifier": "handlePageFinished", "parameters": "()", "modifiers": "@VisibleForTesting private", "return": "void", "signature": "void handlePageFinished()", "full_signature": "@VisibleForTesting private void handlePageFinished()", "class_method_signature": "MraidBridge.handlePageFinished()", "testcase": false, "constructor": false}, {"identifier": "runCommand", "parameters": "(@NonNull final MraidJavascriptCommand command,\n            @NonNull Map<String, String> params)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void runCommand(@NonNull final MraidJavascriptCommand command,\n            @NonNull Map<String, String> params)", "full_signature": "@VisibleForTesting void runCommand(@NonNull final MraidJavascriptCommand command,\n            @NonNull Map<String, String> params)", "class_method_signature": "MraidBridge.runCommand(@NonNull final MraidJavascriptCommand command,\n            @NonNull Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "parseClosePosition", "parameters": "(@NonNull String text,\n            @NonNull ClosePosition defaultValue)", "modifiers": "private", "return": "ClosePosition", "signature": "ClosePosition parseClosePosition(@NonNull String text,\n            @NonNull ClosePosition defaultValue)", "full_signature": "private ClosePosition parseClosePosition(@NonNull String text,\n            @NonNull ClosePosition defaultValue)", "class_method_signature": "MraidBridge.parseClosePosition(@NonNull String text,\n            @NonNull ClosePosition defaultValue)", "testcase": false, "constructor": false}, {"identifier": "parseSize", "parameters": "(@NonNull String text)", "modifiers": "private", "return": "int", "signature": "int parseSize(@NonNull String text)", "full_signature": "private int parseSize(@NonNull String text)", "class_method_signature": "MraidBridge.parseSize(@NonNull String text)", "testcase": false, "constructor": false}, {"identifier": "parseOrientation", "parameters": "(String text)", "modifiers": "private", "return": "MraidOrientation", "signature": "MraidOrientation parseOrientation(String text)", "full_signature": "private MraidOrientation parseOrientation(String text)", "class_method_signature": "MraidBridge.parseOrientation(String text)", "testcase": false, "constructor": false}, {"identifier": "checkRange", "parameters": "(int value, int min, int max)", "modifiers": "private", "return": "int", "signature": "int checkRange(int value, int min, int max)", "full_signature": "private int checkRange(int value, int min, int max)", "class_method_signature": "MraidBridge.checkRange(int value, int min, int max)", "testcase": false, "constructor": false}, {"identifier": "parseBoolean", "parameters": "(\n            @Nullable String text, boolean defaultValue)", "modifiers": "private", "return": "boolean", "signature": "boolean parseBoolean(\n            @Nullable String text, boolean defaultValue)", "full_signature": "private boolean parseBoolean(\n            @Nullable String text, boolean defaultValue)", "class_method_signature": "MraidBridge.parseBoolean(\n            @Nullable String text, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "parseBoolean", "parameters": "(final String text)", "modifiers": "private", "return": "boolean", "signature": "boolean parseBoolean(final String text)", "full_signature": "private boolean parseBoolean(final String text)", "class_method_signature": "MraidBridge.parseBoolean(final String text)", "testcase": false, "constructor": false}, {"identifier": "parseURI", "parameters": "(@Nullable String encodedText, URI defaultValue)", "modifiers": "@NonNull private", "return": "URI", "signature": "URI parseURI(@Nullable String encodedText, URI defaultValue)", "full_signature": "@NonNull private URI parseURI(@Nullable String encodedText, URI defaultValue)", "class_method_signature": "MraidBridge.parseURI(@Nullable String encodedText, URI defaultValue)", "testcase": false, "constructor": false}, {"identifier": "parseURI", "parameters": "(@Nullable String encodedText)", "modifiers": "@NonNull private", "return": "URI", "signature": "URI parseURI(@Nullable String encodedText)", "full_signature": "@NonNull private URI parseURI(@Nullable String encodedText)", "class_method_signature": "MraidBridge.parseURI(@Nullable String encodedText)", "testcase": false, "constructor": false}, {"identifier": "notifyViewability", "parameters": "(boolean isViewable)", "modifiers": "", "return": "void", "signature": "void notifyViewability(boolean isViewable)", "full_signature": " void notifyViewability(boolean isViewable)", "class_method_signature": "MraidBridge.notifyViewability(boolean isViewable)", "testcase": false, "constructor": false}, {"identifier": "notifyPlacementType", "parameters": "(PlacementType placementType)", "modifiers": "", "return": "void", "signature": "void notifyPlacementType(PlacementType placementType)", "full_signature": " void notifyPlacementType(PlacementType placementType)", "class_method_signature": "MraidBridge.notifyPlacementType(PlacementType placementType)", "testcase": false, "constructor": false}, {"identifier": "notifyViewState", "parameters": "(ViewState state)", "modifiers": "", "return": "void", "signature": "void notifyViewState(ViewState state)", "full_signature": " void notifyViewState(ViewState state)", "class_method_signature": "MraidBridge.notifyViewState(ViewState state)", "testcase": false, "constructor": false}, {"identifier": "notifySupports", "parameters": "(boolean sms, boolean telephone, boolean calendar,\n            boolean storePicture, boolean inlineVideo)", "modifiers": "", "return": "void", "signature": "void notifySupports(boolean sms, boolean telephone, boolean calendar,\n            boolean storePicture, boolean inlineVideo)", "full_signature": " void notifySupports(boolean sms, boolean telephone, boolean calendar,\n            boolean storePicture, boolean inlineVideo)", "class_method_signature": "MraidBridge.notifySupports(boolean sms, boolean telephone, boolean calendar,\n            boolean storePicture, boolean inlineVideo)", "testcase": false, "constructor": false}, {"identifier": "stringifyRect", "parameters": "(Rect rect)", "modifiers": "@NonNull private", "return": "String", "signature": "String stringifyRect(Rect rect)", "full_signature": "@NonNull private String stringifyRect(Rect rect)", "class_method_signature": "MraidBridge.stringifyRect(Rect rect)", "testcase": false, "constructor": false}, {"identifier": "stringifySize", "parameters": "(Rect rect)", "modifiers": "@NonNull private", "return": "String", "signature": "String stringifySize(Rect rect)", "full_signature": "@NonNull private String stringifySize(Rect rect)", "class_method_signature": "MraidBridge.stringifySize(Rect rect)", "testcase": false, "constructor": false}, {"identifier": "notifyScreenMetrics", "parameters": "(@NonNull final MraidScreenMetrics screenMetrics)", "modifiers": "public", "return": "void", "signature": "void notifyScreenMetrics(@NonNull final MraidScreenMetrics screenMetrics)", "full_signature": "public void notifyScreenMetrics(@NonNull final MraidScreenMetrics screenMetrics)", "class_method_signature": "MraidBridge.notifyScreenMetrics(@NonNull final MraidScreenMetrics screenMetrics)", "testcase": false, "constructor": false}, {"identifier": "notifyReady", "parameters": "()", "modifiers": "", "return": "void", "signature": "void notifyReady()", "full_signature": " void notifyReady()", "class_method_signature": "MraidBridge.notifyReady()", "testcase": false, "constructor": false}, {"identifier": "isClicked", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isClicked()", "full_signature": " boolean isClicked()", "class_method_signature": "MraidBridge.isClicked()", "testcase": false, "constructor": false}, {"identifier": "isVisible", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isVisible()", "full_signature": " boolean isVisible()", "class_method_signature": "MraidBridge.isVisible()", "testcase": false, "constructor": false}, {"identifier": "isAttached", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isAttached()", "full_signature": " boolean isAttached()", "class_method_signature": "MraidBridge.isAttached()", "testcase": false, "constructor": false}, {"identifier": "isLoaded", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isLoaded()", "full_signature": " boolean isLoaded()", "class_method_signature": "MraidBridge.isLoaded()", "testcase": false, "constructor": false}, {"identifier": "getMraidWebView", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "MraidWebView", "signature": "MraidWebView getMraidWebView()", "full_signature": "@VisibleForTesting MraidWebView getMraidWebView()", "class_method_signature": "MraidBridge.getMraidWebView()", "testcase": false, "constructor": false}, {"identifier": "setClicked", "parameters": "(boolean clicked)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setClicked(boolean clicked)", "full_signature": "@VisibleForTesting void setClicked(boolean clicked)", "class_method_signature": "MraidBridge.setClicked(boolean clicked)", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java"}, "focal_method": {"identifier": "runCommand", "parameters": "(@NonNull final MraidJavascriptCommand command,\n            @NonNull Map<String, String> params)", "modifiers": "@VisibleForTesting", "return": "void", "body": "@VisibleForTesting\n    void runCommand(@NonNull final MraidJavascriptCommand command,\n            @NonNull Map<String, String> params)\n            throws MraidCommandException {\n        if (command.requiresClick(mPlacementType) && !mIsClicked) {\n            throw new MraidCommandException(\"Cannot execute this command unless the user clicks\");\n        }\n\n        if (mMraidBridgeListener == null) {\n            throw new MraidCommandException(\"Invalid state to execute this command\");\n        }\n\n        if (mMraidWebView == null) {\n            throw new MraidCommandException(\"The current WebView is being destroyed\");\n        }\n\n        switch (command) {\n            case CLOSE:\n                mMraidBridgeListener.onClose();\n                break;\n            case RESIZE:\n                // All these params are required\n                int width = checkRange(parseSize(params.get(\"width\")), 0, 100000);\n                int height = checkRange(parseSize(params.get(\"height\")), 0, 100000);\n                int offsetX = checkRange(parseSize(params.get(\"offsetX\")), -100000, 100000);\n                int offsetY = checkRange(parseSize(params.get(\"offsetY\")), -100000, 100000);\n                ClosePosition closePosition = parseClosePosition(\n                        params.get(\"customClosePosition\"), ClosePosition.TOP_RIGHT);\n                boolean allowOffscreen = parseBoolean(params.get(\"allowOffscreen\"), true);\n                mMraidBridgeListener.onResize(\n                        width, height, offsetX, offsetY, closePosition, allowOffscreen);\n                break;\n            case EXPAND:\n                URI uri = parseURI(params.get(\"url\"), null);\n                boolean shouldUseCustomClose = parseBoolean(params.get(\"shouldUseCustomClose\"),\n                        false);\n                mMraidBridgeListener.onExpand(uri, shouldUseCustomClose);\n                break;\n            case USE_CUSTOM_CLOSE:\n                shouldUseCustomClose = parseBoolean(params.get(\"shouldUseCustomClose\"), false);\n                mMraidBridgeListener.onUseCustomClose(shouldUseCustomClose);\n                break;\n            case OPEN:\n                uri = parseURI(params.get(\"url\"));\n                mMraidBridgeListener.onOpen(uri);\n                break;\n            case SET_ORIENTATION_PROPERTIES:\n                boolean allowOrientationChange = parseBoolean(params.get(\"allowOrientationChange\"));\n                MraidOrientation forceOrientation = parseOrientation(params.get(\"forceOrientation\"));\n\n                mMraidBridgeListener.onSetOrientationProperties(allowOrientationChange,\n                        forceOrientation);\n                break;\n            case PLAY_VIDEO:\n                uri = parseURI(params.get(\"uri\"));\n                mMraidBridgeListener.onPlayVideo(uri);\n                break;\n            case STORE_PICTURE:\n                uri = parseURI(params.get(\"uri\"));\n                mMraidNativeCommandHandler.storePicture(mMraidWebView.getContext(), uri.toString(),\n                        new MraidCommandFailureListener() {\n                            @Override\n                            public void onFailure(final MraidCommandException exception) {\n                                fireErrorEvent(command, exception.getMessage());\n                            }\n                        });\n                break;\n\n            case CREATE_CALENDAR_EVENT:\n                mMraidNativeCommandHandler.createCalendarEvent(mMraidWebView.getContext(), params);\n                break;\n            case UNSPECIFIED:\n                throw new MraidCommandException(\"Unspecified MRAID Javascript command\");\n        }\n    }", "signature": "void runCommand(@NonNull final MraidJavascriptCommand command,\n            @NonNull Map<String, String> params)", "full_signature": "@VisibleForTesting void runCommand(@NonNull final MraidJavascriptCommand command,\n            @NonNull Map<String, String> params)", "class_method_signature": "MraidBridge.runCommand(@NonNull final MraidJavascriptCommand command,\n            @NonNull Map<String, String> params)", "testcase": false, "constructor": false, "invocations": ["requiresClick", "onClose", "checkRange", "parseSize", "get", "checkRange", "parseSize", "get", "checkRange", "parseSize", "get", "checkRange", "parseSize", "get", "parseClosePosition", "get", "parseBoolean", "get", "onResize", "parseURI", "get", "parseBoolean", "get", "onExpand", "parseBoolean", "get", "onUseCustomClose", "parseURI", "get", "onOpen", "parseBoolean", "get", "parseOrientation", "get", "onSetOrientationProperties", "parseURI", "get", "onPlayVideo", "parseURI", "get", "storePicture", "getContext", "toString", "fireErrorEvent", "getMessage", "createCalendarEvent", "getContext"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}