{"test_class": {"identifier": "KTableSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final private Serde<String> stringSerde = Serdes.String();", "modifier": "final private", "type": "Serde<String>", "declarator": "stringSerde = Serdes.String()", "var_name": "stringSerde"}, {"original_string": "private KStreamTestDriver driver = null;", "modifier": "private", "type": "KStreamTestDriver", "declarator": "driver = null", "var_name": "driver"}, {"original_string": "private File stateDir = null;", "modifier": "private", "type": "File", "declarator": "stateDir = null", "var_name": "stateDir"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableSourceTest.java"}, "test_case": {"identifier": "testValueGetter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValueGetter() throws IOException {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        String topic1 = \"topic1\";\n\n        KTableImpl<String, String, String> table1 = (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1);\n\n        KTableValueGetterSupplier<String, String> getterSupplier1 = table1.valueGetterSupplier();\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n\n        KTableValueGetter<String, String> getter1 = getterSupplier1.get();\n        getter1.init(driver.context());\n\n        driver.process(topic1, \"A\", \"01\");\n        driver.process(topic1, \"B\", \"01\");\n        driver.process(topic1, \"C\", \"01\");\n\n        assertEquals(\"01\", getter1.get(\"A\"));\n        assertEquals(\"01\", getter1.get(\"B\"));\n        assertEquals(\"01\", getter1.get(\"C\"));\n\n        driver.process(topic1, \"A\", \"02\");\n        driver.process(topic1, \"B\", \"02\");\n\n        assertEquals(\"02\", getter1.get(\"A\"));\n        assertEquals(\"02\", getter1.get(\"B\"));\n        assertEquals(\"01\", getter1.get(\"C\"));\n\n        driver.process(topic1, \"A\", \"03\");\n\n        assertEquals(\"03\", getter1.get(\"A\"));\n        assertEquals(\"02\", getter1.get(\"B\"));\n        assertEquals(\"01\", getter1.get(\"C\"));\n\n        driver.process(topic1, \"A\", null);\n        driver.process(topic1, \"B\", null);\n\n        assertNull(getter1.get(\"A\"));\n        assertNull(getter1.get(\"B\"));\n        assertEquals(\"01\", getter1.get(\"C\"));\n\n    }", "signature": "void testValueGetter()", "full_signature": "@Test public void testValueGetter()", "class_method_signature": "KTableSourceTest.testValueGetter()", "testcase": true, "constructor": false, "invocations": ["table", "valueGetterSupplier", "get", "init", "context", "process", "process", "process", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "process", "process", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "process", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "process", "process", "assertNull", "get", "assertNull", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "KTableSource", "superclass": "", "interfaces": "implements ProcessorSupplier<K, V>", "fields": [{"original_string": "public final String topic;", "modifier": "public final", "type": "String", "declarator": "topic", "var_name": "topic"}, {"original_string": "private boolean materialized = false;", "modifier": "private", "type": "boolean", "declarator": "materialized = false", "var_name": "materialized"}, {"original_string": "private boolean sendOldValues = false;", "modifier": "private", "type": "boolean", "declarator": "sendOldValues = false", "var_name": "sendOldValues"}], "methods": [{"identifier": "KTableSource", "parameters": "(String topic)", "modifiers": "public", "return": "", "signature": " KTableSource(String topic)", "full_signature": "public  KTableSource(String topic)", "class_method_signature": "KTableSource.KTableSource(String topic)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KTableSource.get()", "testcase": false, "constructor": false}, {"identifier": "materialize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void materialize()", "full_signature": "public void materialize()", "class_method_signature": "KTableSource.materialize()", "testcase": false, "constructor": false}, {"identifier": "isMaterialized", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMaterialized()", "full_signature": "public boolean isMaterialized()", "class_method_signature": "KTableSource.isMaterialized()", "testcase": false, "constructor": false}, {"identifier": "enableSendingOldValues", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enableSendingOldValues()", "full_signature": "public void enableSendingOldValues()", "class_method_signature": "KTableSource.enableSendingOldValues()", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableSource.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "body": "@Override\n    public Processor<K, V> get() {\n        return materialized ? new MaterializedKTableSourceProcessor() : new KTableSourceProcessor();\n    }", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KTableSource.get()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}