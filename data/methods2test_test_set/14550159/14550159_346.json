{"test_class": {"identifier": "MultipartFormDataWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private MultipartFormDataWriter multipartFormDataWriter;", "modifier": "private", "type": "MultipartFormDataWriter", "declarator": "multipartFormDataWriter", "var_name": "multipartFormDataWriter"}, {"original_string": "private Providers               providers;", "modifier": "private", "type": "Providers", "declarator": "providers", "var_name": "providers"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/multipart/MultipartFormDataWriterTest.java"}, "test_case": {"identifier": "writesItemsOfMultipartContentToOutputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writesItemsOfMultipartContentToOutputStream() throws Exception {\n        ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n        MessageBodyWriter<String> messageBodyWriter = mockStringMessageBodyWriter(bOut);\n        when(providers.getMessageBodyWriter(eq(String.class), any(), any(Annotation[].class), any(MediaType.class))).thenReturn(messageBodyWriter);\n\n        OutputItem item1 = anOutputItem().withName(\"item1\").withEntity(\"item1 entity\").withMediaType(TEXT_PLAIN_TYPE).withFilename(\"item1.txt\").build();\n        OutputItem item2 = anOutputItem().withName(\"item2\").withEntity(\"{\\\"item2\\\":\\\"entity\\\"}\").withMediaType(APPLICATION_JSON_TYPE).withFilename(\"item2.json\").build();\n        multipartFormDataWriter.writeItems(newArrayList(item1, item2), bOut, \"1234567\".getBytes());\n\n        String expectedContent = \"--1234567\\r\\n\" +\n                                 \"Content-Disposition: form-data; name=\\\"item1\\\"; filename=\\\"item1.txt\\\"\\r\\n\" +\n                                 \"Content-Type: text/plain\\r\\n\" +\n                                 \"\\r\\n\" +\n                                 \"item1 entity\\r\\n\" +\n                                 \"--1234567\\r\\n\" +\n                                 \"Content-Disposition: form-data; name=\\\"item2\\\"; filename=\\\"item2.json\\\"\\r\\n\" +\n                                 \"Content-Type: application/json\\r\\n\" +\n                                 \"\\r\\n\" +\n                                 \"{\\\"item2\\\":\\\"entity\\\"}\\r\\n\" +\n                                 \"--1234567--\\r\\n\";\n        assertEquals(expectedContent, bOut.toString());\n    }", "signature": "void writesItemsOfMultipartContentToOutputStream()", "full_signature": "@Test public void writesItemsOfMultipartContentToOutputStream()", "class_method_signature": "MultipartFormDataWriterTest.writesItemsOfMultipartContentToOutputStream()", "testcase": true, "constructor": false, "invocations": ["mockStringMessageBodyWriter", "thenReturn", "when", "getMessageBodyWriter", "eq", "any", "any", "any", "build", "withFilename", "withMediaType", "withEntity", "withName", "anOutputItem", "build", "withFilename", "withMediaType", "withEntity", "withName", "anOutputItem", "writeItems", "newArrayList", "getBytes", "assertEquals", "toString"]}, "focal_class": {"identifier": "MultipartFormDataWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Annotation[] EMPTY             = new Annotation[0];", "modifier": "private static final", "type": "Annotation[]", "declarator": "EMPTY             = new Annotation[0]", "var_name": "EMPTY"}, {"original_string": "private static final byte[]       NEW_LINE          = \"\\r\\n\".getBytes();", "modifier": "private static final", "type": "byte[]", "declarator": "NEW_LINE          = \"\\r\\n\".getBytes()", "var_name": "NEW_LINE"}, {"original_string": "private static final byte[]       HEADER_LINE_DELIM = \": \".getBytes();", "modifier": "private static final", "type": "byte[]", "declarator": "HEADER_LINE_DELIM = \": \".getBytes()", "var_name": "HEADER_LINE_DELIM"}, {"original_string": "private static final byte[]       HYPHENS           = \"--\".getBytes();", "modifier": "private static final", "type": "byte[]", "declarator": "HYPHENS           = \"--\".getBytes()", "var_name": "HYPHENS"}, {"original_string": "private Providers providers;", "modifier": "private", "type": "Providers", "declarator": "providers", "var_name": "providers"}], "methods": [{"identifier": "MultipartFormDataWriter", "parameters": "(Providers providers)", "modifiers": "public", "return": "", "signature": " MultipartFormDataWriter(Providers providers)", "full_signature": "public  MultipartFormDataWriter(Providers providers)", "class_method_signature": "MultipartFormDataWriter.MultipartFormDataWriter(Providers providers)", "testcase": false, "constructor": true}, {"identifier": "writeItems", "parameters": "(Collection<OutputItem> items, OutputStream output, byte[] boundary)", "modifiers": "public", "return": "void", "signature": "void writeItems(Collection<OutputItem> items, OutputStream output, byte[] boundary)", "full_signature": "public void writeItems(Collection<OutputItem> items, OutputStream output, byte[] boundary)", "class_method_signature": "MultipartFormDataWriter.writeItems(Collection<OutputItem> items, OutputStream output, byte[] boundary)", "testcase": false, "constructor": false}, {"identifier": "writeItem", "parameters": "(OutputItem item, OutputStream output, byte[] boundary)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "void", "signature": "void writeItem(OutputItem item, OutputStream output, byte[] boundary)", "full_signature": "@SuppressWarnings(\"unchecked\") protected void writeItem(OutputItem item, OutputStream output, byte[] boundary)", "class_method_signature": "MultipartFormDataWriter.writeItem(OutputItem item, OutputStream output, byte[] boundary)", "testcase": false, "constructor": false}, {"identifier": "writeHeaders", "parameters": "(MultivaluedMap<String, String> headers, OutputStream output)", "modifiers": "private", "return": "void", "signature": "void writeHeaders(MultivaluedMap<String, String> headers, OutputStream output)", "full_signature": "private void writeHeaders(MultivaluedMap<String, String> headers, OutputStream output)", "class_method_signature": "MultipartFormDataWriter.writeHeaders(MultivaluedMap<String, String> headers, OutputStream output)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/multipart/MultipartFormDataWriter.java"}, "focal_method": {"identifier": "writeItems", "parameters": "(Collection<OutputItem> items, OutputStream output, byte[] boundary)", "modifiers": "public", "return": "void", "body": "public void writeItems(Collection<OutputItem> items, OutputStream output, byte[] boundary) throws IOException {\n        for (OutputItem item : items) {\n            writeItem(item, output, boundary);\n        }\n        output.write(HYPHENS);\n        output.write(boundary);\n        output.write(HYPHENS);\n        output.write(NEW_LINE);\n    }", "signature": "void writeItems(Collection<OutputItem> items, OutputStream output, byte[] boundary)", "full_signature": "public void writeItems(Collection<OutputItem> items, OutputStream output, byte[] boundary)", "class_method_signature": "MultipartFormDataWriter.writeItems(Collection<OutputItem> items, OutputStream output, byte[] boundary)", "testcase": false, "constructor": false, "invocations": ["writeItem", "write", "write", "write", "write"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}