{"test_class": {"identifier": "WriteProjectTargetTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/command/WriteProjectTargetTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test @PrepareForTest(FileWriter.class) public", "return": "void", "body": "@Test\n  @PrepareForTest(FileWriter.class)\n  public void testExecute() throws Exception {\n    // Given\n    final byte[] content = randomUUID().toString().getBytes();\n    final OutputStream out = mock(OutputStream.class);\n    mockStatic(Files.class);\n    when(Files.newOutputStream(any())).thenReturn(out);\n\n    final ProjectFile projectFile = new ProjectFile();\n    projectFile.setTarget(randomUUID().toString());\n    final Project project = new Project(randomUUID().toString(), projectFile);\n    final WriteProjectTarget writeProjectTarget = new WriteProjectTarget();\n    writeProjectTarget.setProject(project);\n    writeProjectTarget.setContents(() -> new ByteArrayInputStream(content));\n\n    // When\n    writeProjectTarget.execute();\n\n    // Then\n    verify(out).write(any(), anyInt(), anyInt());\n  }", "signature": "void testExecute()", "full_signature": "@Test @PrepareForTest(FileWriter.class) public void testExecute()", "class_method_signature": "WriteProjectTargetTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["getBytes", "toString", "randomUUID", "mock", "mockStatic", "thenReturn", "when", "newOutputStream", "any", "setTarget", "toString", "randomUUID", "toString", "randomUUID", "setProject", "setContents", "execute", "write", "verify", "any", "anyInt", "anyInt"]}, "focal_class": {"identifier": "WriteProjectTarget", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "@Getter\n  protected Project project;", "modifier": "@Getter\n  protected", "type": "Project", "declarator": "project", "var_name": "project"}, {"original_string": "@Setter\n  protected DangerousSupplier<InputStream> contents;", "modifier": "@Setter\n  protected", "type": "DangerousSupplier<InputStream>", "declarator": "contents", "var_name": "contents"}], "methods": [{"identifier": "setProject", "parameters": "(final Project project)", "modifiers": "public", "return": "void", "signature": "void setProject(final Project project)", "full_signature": "public void setProject(final Project project)", "class_method_signature": "WriteProjectTarget.setProject(final Project project)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "WriteProjectTarget.execute()", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/command/WriteProjectTarget.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void execute() throws Exception {\n    final String buildTarget = project.getProjectFile().getTarget();\n    final Path buildTargetPath = project.getPath().resolve(buildTarget);\n\n    final FileWriter fileWriter = new FileWriter(buildTargetPath);\n    fileWriter.accept(contents.get());\n  }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "WriteProjectTarget.execute()", "testcase": false, "constructor": false, "invocations": ["getTarget", "getProjectFile", "resolve", "getPath", "accept", "get"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}