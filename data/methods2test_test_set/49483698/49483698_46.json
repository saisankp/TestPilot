{"test_class": {"identifier": "TestBytes", "superclass": "", "interfaces": "", "fields": [{"original_string": "byte[] ba = {0x7e, (byte) 0xac, (byte) 0x8a, (byte) 0x93};", "modifier": "", "type": "byte[]", "declarator": "ba = {0x7e, (byte) 0xac, (byte) 0x8a, (byte) 0x93}", "var_name": "ba"}, {"original_string": "int bigEndianInt = 0x7eac8a93;", "modifier": "", "type": "int", "declarator": "bigEndianInt = 0x7eac8a93", "var_name": "bigEndianInt"}, {"original_string": "int littleEndianInt = 0x938aac7e;", "modifier": "", "type": "int", "declarator": "littleEndianInt = 0x938aac7e", "var_name": "littleEndianInt"}], "file": "jhelper/src/test/java/com/hwangjr/jhelper/TestBytes.java"}, "test_case": {"identifier": "testToIntArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToIntArray() {\n        int[] intArrBig = {0x7eac8a93, 0x66AABBCC};\n        int[] intArrLittle = {0x938aac7e, 0xCCBBAA66,};\n        byte[] barr = {0x7e, (byte) 0xac, (byte) 0x8a, (byte) 0x93, 0x66, (byte) 0xAA, (byte) 0xBB, (byte) 0xCC};\n        Assert.assertArrayEquals(Bytes.toIntArray(barr, barr.length, true), intArrBig);\n        Assert.assertArrayEquals(Bytes.toIntArray(barr, barr.length, false), intArrLittle);\n        Assert.assertArrayEquals(Bytes.toIntArray(barr, barr.length, 4, true), intArrBig);\n        Assert.assertArrayEquals(Bytes.toIntArray(barr, barr.length, 4, false), intArrLittle);\n\n        barr = new byte[]{0x7e, (byte) 0xac, (byte) 0x8a, (byte) 0x93, 0x66, (byte) 0xAA};\n        intArrBig = new int[]{0x7eac8a, 0x9366aa};\n        intArrLittle = new int[]{0x8aac7e, 0xaa6693};\n        Assert.assertArrayEquals(Bytes.toIntArray(barr, barr.length, 3, true), intArrBig);\n        Assert.assertArrayEquals(Bytes.toIntArray(barr, barr.length, 3, false), intArrLittle);\n\n        barr = new byte[]{0x7e, (byte) 0xac, (byte) 0x8a, (byte) 0x93, 0x66, (byte) 0xAA};\n        intArrBig = new int[]{0x7eac, 0x8a93, 0x66aa};\n        intArrLittle = new int[]{0xac7e, 0x938a, 0xaa66};\n        Assert.assertArrayEquals(Bytes.toIntArray(barr, barr.length, 2, true), intArrBig);\n        Assert.assertArrayEquals(Bytes.toIntArray(barr, barr.length, 2, false), intArrLittle);\n\n        barr = new byte[]{0x7e, (byte) 0xac, (byte) 0x8a};\n        intArrBig = new int[]{0x7e, 0xac, 0x8a};\n        intArrLittle = new int[]{0x7e, 0xac, 0x8a};\n        Assert.assertArrayEquals(Bytes.toIntArray(barr, barr.length, 1, true), intArrBig);\n        Assert.assertArrayEquals(Bytes.toIntArray(barr, barr.length, 1, false), intArrLittle);\n    }", "signature": "void testToIntArray()", "full_signature": "@Test public void testToIntArray()", "class_method_signature": "TestBytes.testToIntArray()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "toIntArray", "assertArrayEquals", "toIntArray", "assertArrayEquals", "toIntArray", "assertArrayEquals", "toIntArray", "assertArrayEquals", "toIntArray", "assertArrayEquals", "toIntArray", "assertArrayEquals", "toIntArray", "assertArrayEquals", "toIntArray", "assertArrayEquals", "toIntArray", "assertArrayEquals", "toIntArray"]}, "focal_class": {"identifier": "Bytes", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];", "modifier": "public static final", "type": "byte[]", "declarator": "EMPTY_BYTE_ARRAY = new byte[0]", "var_name": "EMPTY_BYTE_ARRAY"}], "methods": [{"identifier": "toByteArray", "parameters": "(int... uints)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int... uints)", "full_signature": "public static byte[] toByteArray(int... uints)", "class_method_signature": "Bytes.toByteArray(int... uints)", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "(byte[] pb, boolean bigEndian)", "modifiers": "public static", "return": "int", "signature": "int toInt(byte[] pb, boolean bigEndian)", "full_signature": "public static int toInt(byte[] pb, boolean bigEndian)", "class_method_signature": "Bytes.toInt(byte[] pb, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(int i, int bitCount)", "modifiers": "public static", "return": "int", "signature": "int normalize(int i, int bitCount)", "full_signature": "public static int normalize(int i, int bitCount)", "class_method_signature": "Bytes.normalize(int i, int bitCount)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(int iarr[], int bitCount)", "modifiers": "public static", "return": "void", "signature": "void normalize(int iarr[], int bitCount)", "full_signature": "public static void normalize(int iarr[], int bitCount)", "class_method_signature": "Bytes.normalize(int iarr[], int bitCount)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int i, int size, boolean isBigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int i, int size, boolean isBigEndian)", "full_signature": "public static byte[] toByteArray(int i, int size, boolean isBigEndian)", "class_method_signature": "Bytes.toByteArray(int i, int size, boolean isBigEndian)", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "(byte b0, byte b1, byte b2, byte b3, boolean bigEndian)", "modifiers": "public static", "return": "int", "signature": "int toInt(byte b0, byte b1, byte b2, byte b3, boolean bigEndian)", "full_signature": "public static int toInt(byte b0, byte b1, byte b2, byte b3, boolean bigEndian)", "class_method_signature": "Bytes.toInt(byte b0, byte b1, byte b2, byte b3, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int i, boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int i, boolean bigEndian)", "full_signature": "public static byte[] toByteArray(int i, boolean bigEndian)", "class_method_signature": "Bytes.toByteArray(int i, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(short i, boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(short i, boolean bigEndian)", "full_signature": "public static byte[] toByteArray(short i, boolean bigEndian)", "class_method_signature": "Bytes.toByteArray(short i, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toIntArray", "parameters": "(byte[] ba, int amount, boolean bigEndian)", "modifiers": "public static", "return": "int[]", "signature": "int[] toIntArray(byte[] ba, int amount, boolean bigEndian)", "full_signature": "public static int[] toIntArray(byte[] ba, int amount, boolean bigEndian)", "class_method_signature": "Bytes.toIntArray(byte[] ba, int amount, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toIntArray", "parameters": "(byte[] ba, final int amount, final int bytePerInteger, boolean bigEndian)", "modifiers": "public static", "return": "int[]", "signature": "int[] toIntArray(byte[] ba, final int amount, final int bytePerInteger, boolean bigEndian)", "full_signature": "public static int[] toIntArray(byte[] ba, final int amount, final int bytePerInteger, boolean bigEndian)", "class_method_signature": "Bytes.toIntArray(byte[] ba, final int amount, final int bytePerInteger, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toReducedBitIntArray", "parameters": "(\n            byte[] ba,\n            final int amount,\n            int bytePerInteger,\n            int bitAmount,\n            boolean bigEndian)", "modifiers": "public static", "return": "int[]", "signature": "int[] toReducedBitIntArray(\n            byte[] ba,\n            final int amount,\n            int bytePerInteger,\n            int bitAmount,\n            boolean bigEndian)", "full_signature": "public static int[] toReducedBitIntArray(\n            byte[] ba,\n            final int amount,\n            int bytePerInteger,\n            int bitAmount,\n            boolean bigEndian)", "class_method_signature": "Bytes.toReducedBitIntArray(\n            byte[] ba,\n            final int amount,\n            int bytePerInteger,\n            int bitAmount,\n            boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "determineSize", "parameters": "(int amount, int arrayLength, int order)", "modifiers": "private static", "return": "int", "signature": "int determineSize(int amount, int arrayLength, int order)", "full_signature": "private static int determineSize(int amount, int arrayLength, int order)", "class_method_signature": "Bytes.determineSize(int amount, int arrayLength, int order)", "testcase": false, "constructor": false}, {"identifier": "toShortArray", "parameters": "(byte[] ba, int amount, boolean bigEndian)", "modifiers": "public static", "return": "short[]", "signature": "short[] toShortArray(byte[] ba, int amount, boolean bigEndian)", "full_signature": "public static short[] toShortArray(byte[] ba, int amount, boolean bigEndian)", "class_method_signature": "Bytes.toShortArray(byte[] ba, int amount, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(short[] sa, int amount, boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(short[] sa, int amount, boolean bigEndian)", "full_signature": "public static byte[] toByteArray(short[] sa, int amount, boolean bigEndian)", "class_method_signature": "Bytes.toByteArray(short[] sa, int amount, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int[] ia, int amount, int bytePerInteger, boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int[] ia, int amount, int bytePerInteger, boolean bigEndian)", "full_signature": "public static byte[] toByteArray(int[] ia, int amount, int bytePerInteger, boolean bigEndian)", "class_method_signature": "Bytes.toByteArray(int[] ia, int amount, int bytePerInteger, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toHexWithZeros", "parameters": "(byte b)", "modifiers": "public static", "return": "String", "signature": "String toHexWithZeros(byte b)", "full_signature": "public static String toHexWithZeros(byte b)", "class_method_signature": "Bytes.toHexWithZeros(byte b)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(byte b)", "modifiers": "public static", "return": "String", "signature": "String toHex(byte b)", "full_signature": "public static String toHex(byte b)", "class_method_signature": "Bytes.toHex(byte b)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toHex(byte[] bytes)", "full_signature": "public static String toHex(byte[] bytes)", "class_method_signature": "Bytes.toHex(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toHexWithZeros", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toHexWithZeros(byte[] bytes)", "full_signature": "public static String toHexWithZeros(byte[] bytes)", "class_method_signature": "Bytes.toHexWithZeros(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "hexDump", "parameters": "(OutputStream os, byte[] bytes, int columns)", "modifiers": "public static", "return": "void", "signature": "void hexDump(OutputStream os, byte[] bytes, int columns)", "full_signature": "public static void hexDump(OutputStream os, byte[] bytes, int columns)", "class_method_signature": "Bytes.hexDump(OutputStream os, byte[] bytes, int columns)", "testcase": false, "constructor": false}, {"identifier": "hexDump", "parameters": "(byte[] bytes, int columns)", "modifiers": "public static", "return": "void", "signature": "void hexDump(byte[] bytes, int columns)", "full_signature": "public static void hexDump(byte[] bytes, int columns)", "class_method_signature": "Bytes.hexDump(byte[] bytes, int columns)", "testcase": false, "constructor": false}], "file": "jhelper/src/main/java/com/hwangjr/jhelper/Bytes.java"}, "focal_method": {"identifier": "toIntArray", "parameters": "(byte[] ba, int amount, boolean bigEndian)", "modifiers": "public static", "return": "int[]", "body": "public static int[] toIntArray(byte[] ba, int amount, boolean bigEndian) {\n        final int size = determineSize(amount, ba.length, 4);\n        int[] result = new int[size / 4];\n        int i = 0;\n        for (int j = 0; j < size; j += 4) {\n            if (bigEndian) {\n                result[i++] = toInt(ba[j], ba[j + 1], ba[j + 2], ba[j + 3], true);\n            } else {\n                result[i++] = toInt(ba[j + 3], ba[j + 2], ba[j + 1], ba[j], true);\n            }\n        }\n        return result;\n    }", "signature": "int[] toIntArray(byte[] ba, int amount, boolean bigEndian)", "full_signature": "public static int[] toIntArray(byte[] ba, int amount, boolean bigEndian)", "class_method_signature": "Bytes.toIntArray(byte[] ba, int amount, boolean bigEndian)", "testcase": false, "constructor": false, "invocations": ["determineSize", "toInt", "toInt"]}, "repository": {"repo_id": 49483698, "url": "https://github.com/AndroidKnife/RecordHelper", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 10, "size": 185, "license": "licensed"}}