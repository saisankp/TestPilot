{"test_class": {"identifier": "AbstractClusterInvokerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<Invoker<IHelloService>> invokers = new ArrayList<Invoker<IHelloService>>();", "modifier": "", "type": "List<Invoker<IHelloService>>", "declarator": "invokers = new ArrayList<Invoker<IHelloService>>()", "var_name": "invokers"}, {"original_string": "List<Invoker<IHelloService>> selectedInvokers = new ArrayList<Invoker<IHelloService>>();", "modifier": "", "type": "List<Invoker<IHelloService>>", "declarator": "selectedInvokers = new ArrayList<Invoker<IHelloService>>()", "var_name": "selectedInvokers"}, {"original_string": "AbstractClusterInvoker<IHelloService> cluster;", "modifier": "", "type": "AbstractClusterInvoker<IHelloService>", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "AbstractClusterInvoker<IHelloService> cluster_nocheck;", "modifier": "", "type": "AbstractClusterInvoker<IHelloService>", "declarator": "cluster_nocheck", "var_name": "cluster_nocheck"}, {"original_string": "Directory<IHelloService> dic;", "modifier": "", "type": "Directory<IHelloService>", "declarator": "dic", "var_name": "dic"}, {"original_string": "RpcInvocation invocation = new RpcInvocation();", "modifier": "", "type": "RpcInvocation", "declarator": "invocation = new RpcInvocation()", "var_name": "invocation"}, {"original_string": "URL url = URL.valueOf(\"registry://localhost:9090\");", "modifier": "", "type": "URL", "declarator": "url = URL.valueOf(\"registry://localhost:9090\")", "var_name": "url"}, {"original_string": "Invoker<IHelloService> invoker1;", "modifier": "", "type": "Invoker<IHelloService>", "declarator": "invoker1", "var_name": "invoker1"}, {"original_string": "Invoker<IHelloService> invoker2;", "modifier": "", "type": "Invoker<IHelloService>", "declarator": "invoker2", "var_name": "invoker2"}, {"original_string": "Invoker<IHelloService> invoker3;", "modifier": "", "type": "Invoker<IHelloService>", "declarator": "invoker3", "var_name": "invoker3"}, {"original_string": "Invoker<IHelloService> invoker4;", "modifier": "", "type": "Invoker<IHelloService>", "declarator": "invoker4", "var_name": "invoker4"}, {"original_string": "Invoker<IHelloService> invoker5;", "modifier": "", "type": "Invoker<IHelloService>", "declarator": "invoker5", "var_name": "invoker5"}, {"original_string": "Invoker<IHelloService> mockedInvoker1;", "modifier": "", "type": "Invoker<IHelloService>", "declarator": "mockedInvoker1", "var_name": "mockedInvoker1"}], "file": "dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java"}, "test_case": {"identifier": "testTimeoutExceptionCode", "parameters": "()", "modifiers": "@Test() public", "return": "void", "body": "@Test()\n    public void testTimeoutExceptionCode() {\n        List<Invoker<DemoService>> invokers = new ArrayList<Invoker<DemoService>>();\n        invokers.add(new Invoker<DemoService>() {\n\n            @Override\n            public Class<DemoService> getInterface() {\n                return DemoService.class;\n            }\n\n            public URL getUrl() {\n                return URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":20880/\" + DemoService.class.getName());\n            }\n\n            @Override\n            public boolean isAvailable() {\n                return false;\n            }\n\n            public Result invoke(Invocation invocation) throws RpcException {\n                throw new RpcException(RpcException.TIMEOUT_EXCEPTION, \"test timeout\");\n            }\n\n            @Override\n            public void destroy() {\n            }\n        });\n        Directory<DemoService> directory = new StaticDirectory<DemoService>(invokers);\n        FailoverClusterInvoker<DemoService> failoverClusterInvoker = new FailoverClusterInvoker<DemoService>(directory);\n        try {\n            failoverClusterInvoker.invoke(new RpcInvocation(\"sayHello\", new Class<?>[0], new Object[0]));\n            Assert.fail();\n        } catch (RpcException e) {\n            Assert.assertEquals(RpcException.TIMEOUT_EXCEPTION, e.getCode());\n        }\n        ForkingClusterInvoker<DemoService> forkingClusterInvoker = new ForkingClusterInvoker<DemoService>(directory);\n        try {\n            forkingClusterInvoker.invoke(new RpcInvocation(\"sayHello\", new Class<?>[0], new Object[0]));\n            Assert.fail();\n        } catch (RpcException e) {\n            Assert.assertEquals(RpcException.TIMEOUT_EXCEPTION, e.getCode());\n        }\n        FailfastClusterInvoker<DemoService> failfastClusterInvoker = new FailfastClusterInvoker<DemoService>(directory);\n        try {\n            failfastClusterInvoker.invoke(new RpcInvocation(\"sayHello\", new Class<?>[0], new Object[0]));\n            Assert.fail();\n        } catch (RpcException e) {\n            Assert.assertEquals(RpcException.TIMEOUT_EXCEPTION, e.getCode());\n        }\n    }", "signature": "void testTimeoutExceptionCode()", "full_signature": "@Test() public void testTimeoutExceptionCode()", "class_method_signature": "AbstractClusterInvokerTest.testTimeoutExceptionCode()", "testcase": true, "constructor": false, "invocations": ["add", "valueOf", "getLocalHost", "getName", "invoke", "fail", "assertEquals", "getCode", "invoke", "fail", "assertEquals", "getCode", "invoke", "fail", "assertEquals", "getCode"]}, "focal_class": {"identifier": "AbstractClusterInvoker", "superclass": "", "interfaces": "implements Invoker<T>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n            .getLogger(AbstractClusterInvoker.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n            .getLogger(AbstractClusterInvoker.class)", "var_name": "logger"}, {"original_string": "protected final Directory<T> directory;", "modifier": "protected final", "type": "Directory<T>", "declarator": "directory", "var_name": "directory"}, {"original_string": "protected final boolean availablecheck;", "modifier": "protected final", "type": "boolean", "declarator": "availablecheck", "var_name": "availablecheck"}, {"original_string": "private AtomicBoolean destroyed = new AtomicBoolean(false);", "modifier": "private", "type": "AtomicBoolean", "declarator": "destroyed = new AtomicBoolean(false)", "var_name": "destroyed"}, {"original_string": "private volatile Invoker<T> stickyInvoker = null;", "modifier": "private volatile", "type": "Invoker<T>", "declarator": "stickyInvoker = null", "var_name": "stickyInvoker"}], "methods": [{"identifier": "AbstractClusterInvoker", "parameters": "(Directory<T> directory)", "modifiers": "public", "return": "", "signature": " AbstractClusterInvoker(Directory<T> directory)", "full_signature": "public  AbstractClusterInvoker(Directory<T> directory)", "class_method_signature": "AbstractClusterInvoker.AbstractClusterInvoker(Directory<T> directory)", "testcase": false, "constructor": true}, {"identifier": "AbstractClusterInvoker", "parameters": "(Directory<T> directory, URL url)", "modifiers": "public", "return": "", "signature": " AbstractClusterInvoker(Directory<T> directory, URL url)", "full_signature": "public  AbstractClusterInvoker(Directory<T> directory, URL url)", "class_method_signature": "AbstractClusterInvoker.AbstractClusterInvoker(Directory<T> directory, URL url)", "testcase": false, "constructor": true}, {"identifier": "getInterface", "parameters": "()", "modifiers": "@Override public", "return": "Class<T>", "signature": "Class<T> getInterface()", "full_signature": "@Override public Class<T> getInterface()", "class_method_signature": "AbstractClusterInvoker.getInterface()", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "URL", "signature": "URL getUrl()", "full_signature": "@Override public URL getUrl()", "class_method_signature": "AbstractClusterInvoker.getUrl()", "testcase": false, "constructor": false}, {"identifier": "isAvailable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAvailable()", "full_signature": "@Override public boolean isAvailable()", "class_method_signature": "AbstractClusterInvoker.isAvailable()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "AbstractClusterInvoker.destroy()", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(LoadBalance loadbalance, Invocation invocation, List<Invoker<T>> invokers, List<Invoker<T>> selected)", "modifiers": "protected", "return": "Invoker<T>", "signature": "Invoker<T> select(LoadBalance loadbalance, Invocation invocation, List<Invoker<T>> invokers, List<Invoker<T>> selected)", "full_signature": "protected Invoker<T> select(LoadBalance loadbalance, Invocation invocation, List<Invoker<T>> invokers, List<Invoker<T>> selected)", "class_method_signature": "AbstractClusterInvoker.select(LoadBalance loadbalance, Invocation invocation, List<Invoker<T>> invokers, List<Invoker<T>> selected)", "testcase": false, "constructor": false}, {"identifier": "doSelect", "parameters": "(LoadBalance loadbalance, Invocation invocation, List<Invoker<T>> invokers, List<Invoker<T>> selected)", "modifiers": "private", "return": "Invoker<T>", "signature": "Invoker<T> doSelect(LoadBalance loadbalance, Invocation invocation, List<Invoker<T>> invokers, List<Invoker<T>> selected)", "full_signature": "private Invoker<T> doSelect(LoadBalance loadbalance, Invocation invocation, List<Invoker<T>> invokers, List<Invoker<T>> selected)", "class_method_signature": "AbstractClusterInvoker.doSelect(LoadBalance loadbalance, Invocation invocation, List<Invoker<T>> invokers, List<Invoker<T>> selected)", "testcase": false, "constructor": false}, {"identifier": "reselect", "parameters": "(LoadBalance loadbalance, Invocation invocation,\n                                List<Invoker<T>> invokers, List<Invoker<T>> selected, boolean availablecheck)", "modifiers": "private", "return": "Invoker<T>", "signature": "Invoker<T> reselect(LoadBalance loadbalance, Invocation invocation,\n                                List<Invoker<T>> invokers, List<Invoker<T>> selected, boolean availablecheck)", "full_signature": "private Invoker<T> reselect(LoadBalance loadbalance, Invocation invocation,\n                                List<Invoker<T>> invokers, List<Invoker<T>> selected, boolean availablecheck)", "class_method_signature": "AbstractClusterInvoker.reselect(LoadBalance loadbalance, Invocation invocation,\n                                List<Invoker<T>> invokers, List<Invoker<T>> selected, boolean availablecheck)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(final Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(final Invocation invocation)", "full_signature": "@Override public Result invoke(final Invocation invocation)", "class_method_signature": "AbstractClusterInvoker.invoke(final Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "checkWhetherDestroyed", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkWhetherDestroyed()", "full_signature": "protected void checkWhetherDestroyed()", "class_method_signature": "AbstractClusterInvoker.checkWhetherDestroyed()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractClusterInvoker.toString()", "testcase": false, "constructor": false}, {"identifier": "checkInvokers", "parameters": "(List<Invoker<T>> invokers, Invocation invocation)", "modifiers": "protected", "return": "void", "signature": "void checkInvokers(List<Invoker<T>> invokers, Invocation invocation)", "full_signature": "protected void checkInvokers(List<Invoker<T>> invokers, Invocation invocation)", "class_method_signature": "AbstractClusterInvoker.checkInvokers(List<Invoker<T>> invokers, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "doInvoke", "parameters": "(Invocation invocation, List<Invoker<T>> invokers,\n                                       LoadBalance loadbalance)", "modifiers": "protected abstract", "return": "Result", "signature": "Result doInvoke(Invocation invocation, List<Invoker<T>> invokers,\n                                       LoadBalance loadbalance)", "full_signature": "protected abstract Result doInvoke(Invocation invocation, List<Invoker<T>> invokers,\n                                       LoadBalance loadbalance)", "class_method_signature": "AbstractClusterInvoker.doInvoke(Invocation invocation, List<Invoker<T>> invokers,\n                                       LoadBalance loadbalance)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(Invocation invocation)", "modifiers": "protected", "return": "List<Invoker<T>>", "signature": "List<Invoker<T>> list(Invocation invocation)", "full_signature": "protected List<Invoker<T>> list(Invocation invocation)", "class_method_signature": "AbstractClusterInvoker.list(Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/AbstractClusterInvoker.java"}, "focal_method": {"identifier": "invoke", "parameters": "(final Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(final Invocation invocation) throws RpcException {\n        checkWhetherDestroyed();\n        LoadBalance loadbalance = null;\n\n        // binding attachments into invocation.\n        Map<String, String> contextAttachments = RpcContext.getContext().getAttachments();\n        if (contextAttachments != null && contextAttachments.size() != 0) {\n            ((RpcInvocation) invocation).addAttachments(contextAttachments);\n        }\n\n        // \u5217\u4e3e Invoker\n        List<Invoker<T>> invokers = list(invocation);\n        if (invokers != null && !invokers.isEmpty()) {\n            // \u52a0\u8f7d LoadBalance\n            loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(invokers.get(0).getUrl()\n                    .getMethodParameter(RpcUtils.getMethodName(invocation), Constants.LOADBALANCE_KEY, Constants.DEFAULT_LOADBALANCE));\n        }\n        RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);\n        // \u8c03\u7528 doInvoke \u8fdb\u884c\u540e\u7eed\u64cd\u4f5c\n        return doInvoke(invocation, invokers, loadbalance);\n    }", "signature": "Result invoke(final Invocation invocation)", "full_signature": "@Override public Result invoke(final Invocation invocation)", "class_method_signature": "AbstractClusterInvoker.invoke(final Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["checkWhetherDestroyed", "getAttachments", "getContext", "size", "addAttachments", "list", "isEmpty", "getExtension", "getExtensionLoader", "getMethodParameter", "getUrl", "get", "getMethodName", "attachInvocationIdIfAsync", "getUrl", "doInvoke"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}