{"test_class": {"identifier": "JcrRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JcrRepository repository;", "modifier": "private", "type": "JcrRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private JcrSession session;", "modifier": "private", "type": "JcrSession", "declarator": "session", "var_name": "session"}, {"original_string": "protected boolean print = false;", "modifier": "protected", "type": "boolean", "declarator": "print = false", "var_name": "print"}, {"original_string": "private static final int ALL_EVENTS = Event.NODE_ADDED | Event.NODE_REMOVED | Event.PROPERTY_ADDED | Event.PROPERTY_CHANGED\n                                          | Event.PROPERTY_REMOVED;", "modifier": "private static final", "type": "int", "declarator": "ALL_EVENTS = Event.NODE_ADDED | Event.NODE_REMOVED | Event.PROPERTY_ADDED | Event.PROPERTY_CHANGED\n                                          | Event.PROPERTY_REMOVED", "var_name": "ALL_EVENTS"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JcrRepositoryTest.java"}, "test_case": {"identifier": "shouldDiscoverCorrectChildNodeTypeButFailOnMandatoryPropertiesWithNoDefaultValues", "parameters": "()", "modifiers": "@FixFor( \"MODE-1525\" ) @Test public", "return": "void", "body": "@FixFor( \"MODE-1525\" )\n    @Test\n    public void shouldDiscoverCorrectChildNodeTypeButFailOnMandatoryPropertiesWithNoDefaultValues() throws Exception {\n        session = createSession();\n\n        InputStream cndStream = getClass().getResourceAsStream(\"/cnd/medical-invalid-mandatories.cnd\");\n        assertThat(cndStream, is(notNullValue()));\n        session.getWorkspace().getNodeTypeManager().registerNodeTypes(cndStream, true);\n\n        // Now create a person ...\n        Node root = session.getRootNode();\n        Node person = root.addNode(\"jsmith\", \"inf:person\");\n        person.setProperty(\"inf:firstName\", \"John\");\n        person.setProperty(\"inf:lastName\", \"Smith\");\n        session.save();\n\n        Node doctor = root.addNode(\"drBarnes\", \"inf:doctor\");\n        doctor.setProperty(\"inf:firstName\", \"Sally\");\n        doctor.setProperty(\"inf:lastName\", \"Barnes\");\n        doctor.setProperty(\"inf:doctorProviderNumber\", \"12345678-AB\");\n        session.save();\n\n        Node referral = root.addNode(\"referral\", \"nt:unstructured\");\n        referral.addMixin(\"er:eReferral\");\n        assertThat(referral.getMixinNodeTypes()[0].getName(), is(\"er:eReferral\"));\n        Node group = referral.addNode(\"er:gp\");\n        assertThat(group.getPrimaryNodeType().getName(), is(\"inf:doctor\"));\n        try {\n            session.save();\n            fail(\"Expected a constraint violation exception\");\n        } catch (ConstraintViolationException e) {\n            // expected, since \"inf:firstName\" is mandatory but doesn't have a default value\n        }\n\n        // Set the missing mandatory properties on the node ...\n        group.setProperty(\"inf:firstName\", \"Sally\");\n        group.setProperty(\"inf:lastName\", \"Barnes\");\n\n        // and now Session.save() will work ...\n        session.save();\n    }", "signature": "void shouldDiscoverCorrectChildNodeTypeButFailOnMandatoryPropertiesWithNoDefaultValues()", "full_signature": "@FixFor( \"MODE-1525\" ) @Test public void shouldDiscoverCorrectChildNodeTypeButFailOnMandatoryPropertiesWithNoDefaultValues()", "class_method_signature": "JcrRepositoryTest.shouldDiscoverCorrectChildNodeTypeButFailOnMandatoryPropertiesWithNoDefaultValues()", "testcase": true, "constructor": false, "invocations": ["createSession", "getResourceAsStream", "getClass", "assertThat", "is", "notNullValue", "registerNodeTypes", "getNodeTypeManager", "getWorkspace", "getRootNode", "addNode", "setProperty", "setProperty", "save", "addNode", "setProperty", "setProperty", "setProperty", "save", "addNode", "addMixin", "assertThat", "getName", "getMixinNodeTypes", "is", "addNode", "assertThat", "getName", "getPrimaryNodeType", "is", "save", "fail", "setProperty", "setProperty", "save"]}, "focal_class": {"identifier": "JcrRepository", "superclass": "", "interfaces": "implements org.modeshape.jcr.api.Repository", "fields": [{"original_string": "protected static final Set<String> MISSING_JAAS_POLICIES = new CopyOnWriteArraySet<String>();", "modifier": "protected static final", "type": "Set<String>", "declarator": "MISSING_JAAS_POLICIES = new CopyOnWriteArraySet<String>()", "var_name": "MISSING_JAAS_POLICIES"}, {"original_string": "private static final boolean AUTO_START_REPO_UPON_LOGIN = true;", "modifier": "private static final", "type": "boolean", "declarator": "AUTO_START_REPO_UPON_LOGIN = true", "var_name": "AUTO_START_REPO_UPON_LOGIN"}, {"original_string": "private static final String INTERNAL_WORKER_USERNAME = \"<modeshape-worker>\";", "modifier": "private static final", "type": "String", "declarator": "INTERNAL_WORKER_USERNAME = \"<modeshape-worker>\"", "var_name": "INTERNAL_WORKER_USERNAME"}, {"original_string": "protected final Logger logger;", "modifier": "protected final", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private final AtomicReference<RepositoryConfiguration> config = new AtomicReference<RepositoryConfiguration>();", "modifier": "private final", "type": "AtomicReference<RepositoryConfiguration>", "declarator": "config = new AtomicReference<RepositoryConfiguration>()", "var_name": "config"}, {"original_string": "private final AtomicReference<String> repositoryName = new AtomicReference<String>();", "modifier": "private final", "type": "AtomicReference<String>", "declarator": "repositoryName = new AtomicReference<String>()", "var_name": "repositoryName"}, {"original_string": "private final Map<String, Object> descriptors;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "descriptors", "var_name": "descriptors"}, {"original_string": "private final AtomicReference<RunningState> runningState = new AtomicReference<RunningState>();", "modifier": "private final", "type": "AtomicReference<RunningState>", "declarator": "runningState = new AtomicReference<RunningState>()", "var_name": "runningState"}, {"original_string": "private final AtomicReference<State> state = new AtomicReference<State>(State.NOT_RUNNING);", "modifier": "private final", "type": "AtomicReference<State>", "declarator": "state = new AtomicReference<State>(State.NOT_RUNNING)", "var_name": "state"}, {"original_string": "private final Lock stateLock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "stateLock = new ReentrantLock()", "var_name": "stateLock"}, {"original_string": "private final AtomicBoolean allowAutoStartDuringLogin = new AtomicBoolean(AUTO_START_REPO_UPON_LOGIN);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "allowAutoStartDuringLogin = new AtomicBoolean(AUTO_START_REPO_UPON_LOGIN)", "var_name": "allowAutoStartDuringLogin"}, {"original_string": "private Problems configurationProblems = null;", "modifier": "private", "type": "Problems", "declarator": "configurationProblems = null", "var_name": "configurationProblems"}], "methods": [{"identifier": "JcrRepository", "parameters": "( RepositoryConfiguration configuration )", "modifiers": "protected", "return": "", "signature": " JcrRepository( RepositoryConfiguration configuration )", "full_signature": "protected  JcrRepository( RepositoryConfiguration configuration )", "class_method_signature": "JcrRepository.JcrRepository( RepositoryConfiguration configuration )", "testcase": false, "constructor": true}, {"identifier": "setConfigurationProblems", "parameters": "( Problems configurationProblems )", "modifiers": "", "return": "void", "signature": "void setConfigurationProblems( Problems configurationProblems )", "full_signature": " void setConfigurationProblems( Problems configurationProblems )", "class_method_signature": "JcrRepository.setConfigurationProblems( Problems configurationProblems )", "testcase": false, "constructor": false}, {"identifier": "repositoryConfiguration", "parameters": "()", "modifiers": "", "return": "RepositoryConfiguration", "signature": "RepositoryConfiguration repositoryConfiguration()", "full_signature": " RepositoryConfiguration repositoryConfiguration()", "class_method_signature": "JcrRepository.repositoryConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "State", "signature": "State getState()", "full_signature": "public State getState()", "class_method_signature": "JcrRepository.getState()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "JcrRepository.getName()", "testcase": false, "constructor": false}, {"identifier": "getActiveSessionsCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getActiveSessionsCount()", "full_signature": "@Override public int getActiveSessionsCount()", "class_method_signature": "JcrRepository.getActiveSessionsCount()", "testcase": false, "constructor": false}, {"identifier": "getRepositoryStatistics", "parameters": "()", "modifiers": "public", "return": "RepositoryStatistics", "signature": "RepositoryStatistics getRepositoryStatistics()", "full_signature": "public RepositoryStatistics getRepositoryStatistics()", "class_method_signature": "JcrRepository.getRepositoryStatistics()", "testcase": false, "constructor": false}, {"identifier": "getStartupProblems", "parameters": "()", "modifiers": "public", "return": "Problems", "signature": "Problems getStartupProblems()", "full_signature": "public Problems getStartupProblems()", "class_method_signature": "JcrRepository.getStartupProblems()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "", "return": "void", "signature": "void start()", "full_signature": " void start()", "class_method_signature": "JcrRepository.start()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "", "return": "Future<Boolean>", "signature": "Future<Boolean> shutdown()", "full_signature": " Future<Boolean> shutdown()", "class_method_signature": "JcrRepository.shutdown()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "( Changes changes )", "modifiers": "", "return": "void", "signature": "void apply( Changes changes )", "full_signature": " void apply( Changes changes )", "class_method_signature": "JcrRepository.apply( Changes changes )", "testcase": false, "constructor": false}, {"identifier": "doStart", "parameters": "()", "modifiers": "protected final", "return": "RunningState", "signature": "RunningState doStart()", "full_signature": "protected final RunningState doStart()", "class_method_signature": "JcrRepository.doStart()", "testcase": false, "constructor": false}, {"identifier": "doShutdown", "parameters": "(boolean rollback)", "modifiers": "protected final", "return": "boolean", "signature": "boolean doShutdown(boolean rollback)", "full_signature": "protected final boolean doShutdown(boolean rollback)", "class_method_signature": "JcrRepository.doShutdown(boolean rollback)", "testcase": false, "constructor": false}, {"identifier": "transactions", "parameters": "()", "modifiers": "public", "return": "Transactions", "signature": "Transactions transactions()", "full_signature": "public Transactions transactions()", "class_method_signature": "JcrRepository.transactions()", "testcase": false, "constructor": false}, {"identifier": "documentStore", "parameters": "()", "modifiers": "protected final", "return": "DocumentStore", "signature": "DocumentStore documentStore()", "full_signature": "protected final DocumentStore documentStore()", "class_method_signature": "JcrRepository.documentStore()", "testcase": false, "constructor": false}, {"identifier": "repositoryName", "parameters": "()", "modifiers": "protected final", "return": "String", "signature": "String repositoryName()", "full_signature": "protected final String repositoryName()", "class_method_signature": "JcrRepository.repositoryName()", "testcase": false, "constructor": false}, {"identifier": "repositoryCache", "parameters": "()", "modifiers": "protected final", "return": "RepositoryCache", "signature": "RepositoryCache repositoryCache()", "full_signature": "protected final RepositoryCache repositoryCache()", "class_method_signature": "JcrRepository.repositoryCache()", "testcase": false, "constructor": false}, {"identifier": "statistics", "parameters": "()", "modifiers": "protected final", "return": "RepositoryStatistics", "signature": "RepositoryStatistics statistics()", "full_signature": "protected final RepositoryStatistics statistics()", "class_method_signature": "JcrRepository.statistics()", "testcase": false, "constructor": false}, {"identifier": "nodeTypeManager", "parameters": "()", "modifiers": "protected final", "return": "RepositoryNodeTypeManager", "signature": "RepositoryNodeTypeManager nodeTypeManager()", "full_signature": "protected final RepositoryNodeTypeManager nodeTypeManager()", "class_method_signature": "JcrRepository.nodeTypeManager()", "testcase": false, "constructor": false}, {"identifier": "queryManager", "parameters": "()", "modifiers": "protected final", "return": "RepositoryQueryManager", "signature": "RepositoryQueryManager queryManager()", "full_signature": "protected final RepositoryQueryManager queryManager()", "class_method_signature": "JcrRepository.queryManager()", "testcase": false, "constructor": false}, {"identifier": "lockManager", "parameters": "()", "modifiers": "protected final", "return": "RepositoryLockManager", "signature": "RepositoryLockManager lockManager()", "full_signature": "protected final RepositoryLockManager lockManager()", "class_method_signature": "JcrRepository.lockManager()", "testcase": false, "constructor": false}, {"identifier": "persistentRegistry", "parameters": "()", "modifiers": "protected final", "return": "NamespaceRegistry", "signature": "NamespaceRegistry persistentRegistry()", "full_signature": "protected final NamespaceRegistry persistentRegistry()", "class_method_signature": "JcrRepository.persistentRegistry()", "testcase": false, "constructor": false}, {"identifier": "systemWorkspaceName", "parameters": "()", "modifiers": "protected final", "return": "String", "signature": "String systemWorkspaceName()", "full_signature": "protected final String systemWorkspaceName()", "class_method_signature": "JcrRepository.systemWorkspaceName()", "testcase": false, "constructor": false}, {"identifier": "systemWorkspaceKey", "parameters": "()", "modifiers": "protected final", "return": "String", "signature": "String systemWorkspaceKey()", "full_signature": "protected final String systemWorkspaceKey()", "class_method_signature": "JcrRepository.systemWorkspaceKey()", "testcase": false, "constructor": false}, {"identifier": "changeBus", "parameters": "()", "modifiers": "protected final", "return": "ChangeBus", "signature": "ChangeBus changeBus()", "full_signature": "protected final ChangeBus changeBus()", "class_method_signature": "JcrRepository.changeBus()", "testcase": false, "constructor": false}, {"identifier": "repositoryKey", "parameters": "()", "modifiers": "protected final", "return": "String", "signature": "String repositoryKey()", "full_signature": "protected final String repositoryKey()", "class_method_signature": "JcrRepository.repositoryKey()", "testcase": false, "constructor": false}, {"identifier": "runningState", "parameters": "()", "modifiers": "protected final", "return": "JcrRepository.RunningState", "signature": "JcrRepository.RunningState runningState()", "full_signature": "protected final JcrRepository.RunningState runningState()", "class_method_signature": "JcrRepository.runningState()", "testcase": false, "constructor": false}, {"identifier": "hasWorkspace", "parameters": "( String workspaceName )", "modifiers": "protected final", "return": "boolean", "signature": "boolean hasWorkspace( String workspaceName )", "full_signature": "protected final boolean hasWorkspace( String workspaceName )", "class_method_signature": "JcrRepository.hasWorkspace( String workspaceName )", "testcase": false, "constructor": false}, {"identifier": "workspaceCache", "parameters": "( String workspaceName )", "modifiers": "protected final", "return": "NodeCache", "signature": "NodeCache workspaceCache( String workspaceName )", "full_signature": "protected final NodeCache workspaceCache( String workspaceName )", "class_method_signature": "JcrRepository.workspaceCache( String workspaceName )", "testcase": false, "constructor": false}, {"identifier": "createSystemSession", "parameters": "( ExecutionContext context,\n                                            boolean readOnly )", "modifiers": "final", "return": "SessionCache", "signature": "SessionCache createSystemSession( ExecutionContext context,\n                                            boolean readOnly )", "full_signature": "final SessionCache createSystemSession( ExecutionContext context,\n                                            boolean readOnly )", "class_method_signature": "JcrRepository.createSystemSession( ExecutionContext context,\n                                            boolean readOnly )", "testcase": false, "constructor": false}, {"identifier": "transactionManager", "parameters": "()", "modifiers": "protected final", "return": "TransactionManager", "signature": "TransactionManager transactionManager()", "full_signature": "protected final TransactionManager transactionManager()", "class_method_signature": "JcrRepository.transactionManager()", "testcase": false, "constructor": false}, {"identifier": "prepareToRestore", "parameters": "()", "modifiers": "protected final", "return": "void", "signature": "void prepareToRestore()", "full_signature": "protected final void prepareToRestore()", "class_method_signature": "JcrRepository.prepareToRestore()", "testcase": false, "constructor": false}, {"identifier": "journalId", "parameters": "()", "modifiers": "protected final", "return": "String", "signature": "String journalId()", "full_signature": "protected final String journalId()", "class_method_signature": "JcrRepository.journalId()", "testcase": false, "constructor": false}, {"identifier": "journal", "parameters": "()", "modifiers": "protected final", "return": "ChangeJournal", "signature": "ChangeJournal journal()", "full_signature": "protected final ChangeJournal journal()", "class_method_signature": "JcrRepository.journal()", "testcase": false, "constructor": false}, {"identifier": "mimeTypeDetectionEnabled", "parameters": "()", "modifiers": "protected final", "return": "boolean", "signature": "boolean mimeTypeDetectionEnabled()", "full_signature": "protected final boolean mimeTypeDetectionEnabled()", "class_method_signature": "JcrRepository.mimeTypeDetectionEnabled()", "testcase": false, "constructor": false}, {"identifier": "completeRestore", "parameters": "(RestoreOptions options)", "modifiers": "protected final", "return": "void", "signature": "void completeRestore(RestoreOptions options)", "full_signature": "protected final void completeRestore(RestoreOptions options)", "class_method_signature": "JcrRepository.completeRestore(RestoreOptions options)", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "public", "return": "RepositoryConfiguration", "signature": "RepositoryConfiguration getConfiguration()", "full_signature": "public RepositoryConfiguration getConfiguration()", "class_method_signature": "JcrRepository.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getDescriptor", "parameters": "( String key )", "modifiers": "@Override public", "return": "String", "signature": "String getDescriptor( String key )", "full_signature": "@Override public String getDescriptor( String key )", "class_method_signature": "JcrRepository.getDescriptor( String key )", "testcase": false, "constructor": false}, {"identifier": "getDescriptorValue", "parameters": "( String key )", "modifiers": "@Override public", "return": "JcrValue", "signature": "JcrValue getDescriptorValue( String key )", "full_signature": "@Override public JcrValue getDescriptorValue( String key )", "class_method_signature": "JcrRepository.getDescriptorValue( String key )", "testcase": false, "constructor": false}, {"identifier": "getDescriptorValues", "parameters": "( String key )", "modifiers": "@Override public", "return": "JcrValue[]", "signature": "JcrValue[] getDescriptorValues( String key )", "full_signature": "@Override public JcrValue[] getDescriptorValues( String key )", "class_method_signature": "JcrRepository.getDescriptorValues( String key )", "testcase": false, "constructor": false}, {"identifier": "isSingleValueDescriptor", "parameters": "( String key )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSingleValueDescriptor( String key )", "full_signature": "@Override public boolean isSingleValueDescriptor( String key )", "class_method_signature": "JcrRepository.isSingleValueDescriptor( String key )", "testcase": false, "constructor": false}, {"identifier": "isStandardDescriptor", "parameters": "( String key )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isStandardDescriptor( String key )", "full_signature": "@Override public boolean isStandardDescriptor( String key )", "class_method_signature": "JcrRepository.isStandardDescriptor( String key )", "testcase": false, "constructor": false}, {"identifier": "getDescriptorKeys", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorKeys()", "full_signature": "@Override public String[] getDescriptorKeys()", "class_method_signature": "JcrRepository.getDescriptorKeys()", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "()", "modifiers": "@Override public synchronized", "return": "JcrSession", "signature": "JcrSession login()", "full_signature": "@Override public synchronized JcrSession login()", "class_method_signature": "JcrRepository.login()", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "( Credentials credentials )", "modifiers": "@Override public synchronized", "return": "JcrSession", "signature": "JcrSession login( Credentials credentials )", "full_signature": "@Override public synchronized JcrSession login( Credentials credentials )", "class_method_signature": "JcrRepository.login( Credentials credentials )", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "( String workspaceName )", "modifiers": "@Override public synchronized", "return": "JcrSession", "signature": "JcrSession login( String workspaceName )", "full_signature": "@Override public synchronized JcrSession login( String workspaceName )", "class_method_signature": "JcrRepository.login( String workspaceName )", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "( final Credentials credentials,\n                                          String workspaceName )", "modifiers": "@Override public synchronized", "return": "JcrSession", "signature": "JcrSession login( final Credentials credentials,\n                                          String workspaceName )", "full_signature": "@Override public synchronized JcrSession login( final Credentials credentials,\n                                          String workspaceName )", "class_method_signature": "JcrRepository.login( final Credentials credentials,\n                                          String workspaceName )", "testcase": false, "constructor": false}, {"identifier": "validateWorkspaceName", "parameters": "( RunningState runningState,\n                                          String workspaceName )", "modifiers": "private", "return": "String", "signature": "String validateWorkspaceName( RunningState runningState,\n                                          String workspaceName )", "full_signature": "private String validateWorkspaceName( RunningState runningState,\n                                          String workspaceName )", "class_method_signature": "JcrRepository.validateWorkspaceName( RunningState runningState,\n                                          String workspaceName )", "testcase": false, "constructor": false}, {"identifier": "initializeDescriptors", "parameters": "()", "modifiers": "@SuppressWarnings( \"deprecation\" ) private", "return": "void", "signature": "void initializeDescriptors()", "full_signature": "@SuppressWarnings( \"deprecation\" ) private void initializeDescriptors()", "class_method_signature": "JcrRepository.initializeDescriptors()", "testcase": false, "constructor": false}, {"identifier": "valueFor", "parameters": "( ValueFactories valueFactories,\n                                      int type,\n                                      Object value )", "modifiers": "private static", "return": "JcrValue", "signature": "JcrValue valueFor( ValueFactories valueFactories,\n                                      int type,\n                                      Object value )", "full_signature": "private static JcrValue valueFor( ValueFactories valueFactories,\n                                      int type,\n                                      Object value )", "class_method_signature": "JcrRepository.valueFor( ValueFactories valueFactories,\n                                      int type,\n                                      Object value )", "testcase": false, "constructor": false}, {"identifier": "valueFor", "parameters": "( ValueFactories valueFactories,\n                                      String value )", "modifiers": "private static", "return": "JcrValue", "signature": "JcrValue valueFor( ValueFactories valueFactories,\n                                      String value )", "full_signature": "private static JcrValue valueFor( ValueFactories valueFactories,\n                                      String value )", "class_method_signature": "JcrRepository.valueFor( ValueFactories valueFactories,\n                                      String value )", "testcase": false, "constructor": false}, {"identifier": "valueFor", "parameters": "( ValueFactories valueFactories,\n                                      boolean value )", "modifiers": "private static", "return": "JcrValue", "signature": "JcrValue valueFor( ValueFactories valueFactories,\n                                      boolean value )", "full_signature": "private static JcrValue valueFor( ValueFactories valueFactories,\n                                      boolean value )", "class_method_signature": "JcrRepository.valueFor( ValueFactories valueFactories,\n                                      boolean value )", "testcase": false, "constructor": false}, {"identifier": "refreshWorkspaces", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void refreshWorkspaces()", "full_signature": "protected void refreshWorkspaces()", "class_method_signature": "JcrRepository.refreshWorkspaces()", "testcase": false, "constructor": false}, {"identifier": "repositoryNameChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void repositoryNameChanged()", "full_signature": "private void repositoryNameChanged()", "class_method_signature": "JcrRepository.repositoryNameChanged()", "testcase": false, "constructor": false}, {"identifier": "determineInitialDelay", "parameters": "( String initialTimeExpression )", "modifiers": "protected", "return": "long", "signature": "long determineInitialDelay( String initialTimeExpression )", "full_signature": "protected long determineInitialDelay( String initialTimeExpression )", "class_method_signature": "JcrRepository.determineInitialDelay( String initialTimeExpression )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JcrRepository.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getName() {\n        return repositoryName.get();\n    }", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "JcrRepository.getName()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}