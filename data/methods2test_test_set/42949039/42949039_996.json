{"test_class": {"identifier": "AccessValidatorAppTest", "superclass": "extends AbstractAccessValidatorTest", "interfaces": "", "fields": [{"original_string": "private AccessValidatorApp accessValidatorApp = new AccessValidatorApp()\n    {\n        ApplicationContext createApplicationContext()\n        {\n            return applicationContext;\n        }\n    };", "modifier": "private", "type": "AccessValidatorApp", "declarator": "accessValidatorApp = new AccessValidatorApp()\n    {\n        ApplicationContext createApplicationContext()\n        {\n            return applicationContext;\n        }\n    }", "var_name": "accessValidatorApp"}], "file": "herd-code/herd-tools/herd-access-validator/src/test/java/org/finra/herd/tools/access/validator/AccessValidatorAppTest.java"}, "test_case": {"identifier": "testParseCommandLineArgumentsHelpOpt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseCommandLineArgumentsHelpOpt()\n    {\n        String output = runTestGetSystemOut(() -> {\n            String[] arguments = {\"--help\"};\n            assertEquals(ToolsCommonConstants.ReturnValue.SUCCESS, accessValidatorApp.parseCommandLineArguments(arguments, applicationContext));\n        });\n\n        assertTrue(\"Incorrect usage information returned.\", output.startsWith(\"usage: \" + AccessValidatorApp.APPLICATION_NAME));\n    }", "signature": "void testParseCommandLineArgumentsHelpOpt()", "full_signature": "@Test public void testParseCommandLineArgumentsHelpOpt()", "class_method_signature": "AccessValidatorAppTest.testParseCommandLineArgumentsHelpOpt()", "testcase": true, "constructor": false, "invocations": ["runTestGetSystemOut", "assertEquals", "parseCommandLineArguments", "assertTrue", "startsWith"]}, "focal_class": {"identifier": "AccessValidatorApp", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String APPLICATION_NAME = \"herd-access-validator-app\";", "modifier": "static final", "type": "String", "declarator": "APPLICATION_NAME = \"herd-access-validator-app\"", "var_name": "APPLICATION_NAME"}, {"original_string": "private static final String DEFAULT_PROPERTIES_FILE_PATH = \".properties\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_PROPERTIES_FILE_PATH = \".properties\"", "var_name": "DEFAULT_PROPERTIES_FILE_PATH"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AccessValidatorApp.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AccessValidatorApp.class)", "var_name": "LOGGER"}, {"original_string": "private ArgumentParser argParser;", "modifier": "private", "type": "ArgumentParser", "declarator": "argParser", "var_name": "argParser"}, {"original_string": "private Option propertiesFilePathOpt;", "modifier": "private", "type": "Option", "declarator": "propertiesFilePathOpt", "var_name": "propertiesFilePathOpt"}, {"original_string": "private Option messageOpt;", "modifier": "private", "type": "Option", "declarator": "messageOpt", "var_name": "messageOpt"}], "methods": [{"identifier": "AccessValidatorApp", "parameters": "()", "modifiers": "", "return": "", "signature": " AccessValidatorApp()", "full_signature": "  AccessValidatorApp()", "class_method_signature": "AccessValidatorApp.AccessValidatorApp()", "testcase": false, "constructor": true}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "@SuppressWarnings(\"PMD.DoNotCallSystemExit\") // Using System.exit is allowed for an actual application to exit. public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "@SuppressWarnings(\"PMD.DoNotCallSystemExit\") // Using System.exit is allowed for an actual application to exit. public static void main(String[] args)", "class_method_signature": "AccessValidatorApp.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "createApplicationContext", "parameters": "()", "modifiers": "", "return": "ApplicationContext", "signature": "ApplicationContext createApplicationContext()", "full_signature": " ApplicationContext createApplicationContext()", "class_method_signature": "AccessValidatorApp.createApplicationContext()", "testcase": false, "constructor": false}, {"identifier": "go", "parameters": "(String[] args)", "modifiers": "", "return": "ToolsCommonConstants.ReturnValue", "signature": "ToolsCommonConstants.ReturnValue go(String[] args)", "full_signature": " ToolsCommonConstants.ReturnValue go(String[] args)", "class_method_signature": "AccessValidatorApp.go(String[] args)", "testcase": false, "constructor": false}, {"identifier": "parseCommandLineArguments", "parameters": "(String[] args, ApplicationContext applicationContext)", "modifiers": "@SuppressWarnings(\"PMD.SystemPrintln\") @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\")", "return": "ToolsCommonConstants.ReturnValue", "signature": "ToolsCommonConstants.ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "full_signature": "@SuppressWarnings(\"PMD.SystemPrintln\") @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\") ToolsCommonConstants.ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "class_method_signature": "AccessValidatorApp.parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "testcase": false, "constructor": false}], "file": "herd-code/herd-tools/herd-access-validator/src/main/java/org/finra/herd/tools/access/validator/AccessValidatorApp.java"}, "focal_method": {"identifier": "parseCommandLineArguments", "parameters": "(String[] args, ApplicationContext applicationContext)", "modifiers": "@SuppressWarnings(\"PMD.SystemPrintln\") @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\")", "return": "ToolsCommonConstants.ReturnValue", "body": "@SuppressWarnings(\"PMD.SystemPrintln\")\n    @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\")\n    ToolsCommonConstants.ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)\n    {\n        try\n        {\n            propertiesFilePathOpt = argParser.addArgument(\"p\", \"properties\", true, \"Path to the properties file. Defaults to '.properties'.\", false);\n            Option helpOpt = argParser.addArgument(\"h\", \"help\", false, \"Display usage information and exit.\", false);\n            Option versionOpt = argParser.addArgument(\"v\", \"version\", false, \"Display version information and exit.\", false);\n            messageOpt = argParser.addArgument(\"m\", \"message\", false, \"Use an AWS SQS message\", false);\n\n\n            // Parse command line arguments without failing on any missing required arguments by passing \"false\" as the second argument.\n            argParser.parseArguments(args, false);\n\n            // If help option was specified, then display usage information and return success.\n            if (argParser.getBooleanValue(helpOpt))\n            {\n                System.out.println(argParser.getUsageInformation());\n                return ToolsCommonConstants.ReturnValue.SUCCESS;\n            }\n\n            // If version option was specified, then display version information and return success.\n            if (argParser.getBooleanValue(versionOpt))\n            {\n                BuildInformation buildInformation = applicationContext.getBean(BuildInformation.class);\n                System.out.println(String\n                    .format(ToolsCommonConstants.BUILD_INFO_STRING_FORMAT, buildInformation.getBuildDate(), buildInformation.getBuildNumber(),\n                        buildInformation.getBuildOs(), buildInformation.getBuildUser()));\n                return ToolsCommonConstants.ReturnValue.SUCCESS;\n            }\n\n            // Parse command line arguments for the second time, enforcing the required arguments by passing \"true\" as the second argument.\n            argParser.parseArguments(args, true);\n        }\n        catch (ParseException e)\n        {\n            // Log a friendly error and return a failure which will cause the application to exit.\n            LOGGER.error(\"Error parsing command line arguments: {}%n{}\", e.getMessage(), argParser.getUsageInformation());\n            return ToolsCommonConstants.ReturnValue.FAILURE;\n        }\n\n        // The command line arguments were all parsed successfully so return null to continue processing.\n        return null;\n    }", "signature": "ToolsCommonConstants.ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "full_signature": "@SuppressWarnings(\"PMD.SystemPrintln\") @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\") ToolsCommonConstants.ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "class_method_signature": "AccessValidatorApp.parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "testcase": false, "constructor": false, "invocations": ["addArgument", "addArgument", "addArgument", "addArgument", "parseArguments", "getBooleanValue", "println", "getUsageInformation", "getBooleanValue", "getBean", "println", "format", "getBuildDate", "getBuildNumber", "getBuildOs", "getBuildUser", "parseArguments", "error", "getMessage", "getUsageInformation"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}