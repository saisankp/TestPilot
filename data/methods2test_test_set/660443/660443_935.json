{"test_class": {"identifier": "MurckoFragmenterTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "static MurckoFragmenter fragmenter;", "modifier": "static", "type": "MurckoFragmenter", "declarator": "fragmenter", "var_name": "fragmenter"}, {"original_string": "static SmilesParser     smilesParser;", "modifier": "static", "type": "SmilesParser", "declarator": "smilesParser", "var_name": "smilesParser"}], "file": "tool/fragment/src/test/java/org/openscience/cdk/fragment/MurckoFragmenterTest.java"}, "test_case": {"identifier": "testGetFragmentsAsContainers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetFragmentsAsContainers() throws Exception {\n\n        IAtomContainer biphenyl = TestMoleculeFactory.makeBiphenyl();\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(biphenyl);\n        Aromaticity.cdkLegacy().apply(biphenyl);\n\n        MurckoFragmenter fragmenter = new MurckoFragmenter(true, 6);\n        fragmenter.generateFragments(biphenyl);\n        IAtomContainer[] fragments = fragmenter.getFragmentsAsContainers();\n\n        assertThat(fragments.length, is(2));\n        assertThat(fragments[0].getAtomCount(), is(12));\n        assertThat(fragments[1].getAtomCount(), is(6));\n    }", "signature": "void testGetFragmentsAsContainers()", "full_signature": "@Test public void testGetFragmentsAsContainers()", "class_method_signature": "MurckoFragmenterTest.testGetFragmentsAsContainers()", "testcase": true, "constructor": false, "invocations": ["makeBiphenyl", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "generateFragments", "getFragmentsAsContainers", "assertThat", "is", "assertThat", "getAtomCount", "is", "assertThat", "getAtomCount", "is"]}, "focal_class": {"identifier": "MurckoFragmenter", "superclass": "", "interfaces": "implements IFragmenter", "fields": [{"original_string": "private static final String IS_SIDECHAIN_ATOM    = \"sidechain\";", "modifier": "private static final", "type": "String", "declarator": "IS_SIDECHAIN_ATOM    = \"sidechain\"", "var_name": "IS_SIDECHAIN_ATOM"}, {"original_string": "private static final String IS_LINKER_ATOM       = \"linker\";", "modifier": "private static final", "type": "String", "declarator": "IS_LINKER_ATOM       = \"linker\"", "var_name": "IS_LINKER_ATOM"}, {"original_string": "private static final String IS_CONNECTED_TO_RING = \"rcon\";", "modifier": "private static final", "type": "String", "declarator": "IS_CONNECTED_TO_RING = \"rcon\"", "var_name": "IS_CONNECTED_TO_RING"}, {"original_string": "MoleculeHashGenerator       generator;", "modifier": "", "type": "MoleculeHashGenerator", "declarator": "generator", "var_name": "generator"}, {"original_string": "SmilesGenerator             smigen;", "modifier": "", "type": "SmilesGenerator", "declarator": "smigen", "var_name": "smigen"}, {"original_string": "Map<Long, IAtomContainer>   frameMap             = new HashMap<Long, IAtomContainer>();", "modifier": "", "type": "Map<Long, IAtomContainer>", "declarator": "frameMap             = new HashMap<Long, IAtomContainer>()", "var_name": "frameMap"}, {"original_string": "Map<Long, IAtomContainer>   ringMap              = new HashMap<Long, IAtomContainer>();", "modifier": "", "type": "Map<Long, IAtomContainer>", "declarator": "ringMap              = new HashMap<Long, IAtomContainer>()", "var_name": "ringMap"}, {"original_string": "boolean                     singleFrameworkOnly  = false;", "modifier": "", "type": "boolean", "declarator": "singleFrameworkOnly  = false", "var_name": "singleFrameworkOnly"}, {"original_string": "boolean                     ringFragments        = true;", "modifier": "", "type": "boolean", "declarator": "ringFragments        = true", "var_name": "ringFragments"}, {"original_string": "int                         minimumFragmentSize  = 5;", "modifier": "", "type": "int", "declarator": "minimumFragmentSize  = 5", "var_name": "minimumFragmentSize"}], "methods": [{"identifier": "MurckoFragmenter", "parameters": "()", "modifiers": "public", "return": "", "signature": " MurckoFragmenter()", "full_signature": "public  MurckoFragmenter()", "class_method_signature": "MurckoFragmenter.MurckoFragmenter()", "testcase": false, "constructor": true}, {"identifier": "MurckoFragmenter", "parameters": "(boolean singleFrameworkOnly, int minimumFragmentSize)", "modifiers": "public", "return": "", "signature": " MurckoFragmenter(boolean singleFrameworkOnly, int minimumFragmentSize)", "full_signature": "public  MurckoFragmenter(boolean singleFrameworkOnly, int minimumFragmentSize)", "class_method_signature": "MurckoFragmenter.MurckoFragmenter(boolean singleFrameworkOnly, int minimumFragmentSize)", "testcase": false, "constructor": true}, {"identifier": "MurckoFragmenter", "parameters": "(boolean singleFrameworkOnly, int minimumFragmentSize, MoleculeHashGenerator generator)", "modifiers": "public", "return": "", "signature": " MurckoFragmenter(boolean singleFrameworkOnly, int minimumFragmentSize, MoleculeHashGenerator generator)", "full_signature": "public  MurckoFragmenter(boolean singleFrameworkOnly, int minimumFragmentSize, MoleculeHashGenerator generator)", "class_method_signature": "MurckoFragmenter.MurckoFragmenter(boolean singleFrameworkOnly, int minimumFragmentSize, MoleculeHashGenerator generator)", "testcase": false, "constructor": true}, {"identifier": "setComputeRingFragments", "parameters": "(boolean val)", "modifiers": "public", "return": "void", "signature": "void setComputeRingFragments(boolean val)", "full_signature": "public void setComputeRingFragments(boolean val)", "class_method_signature": "MurckoFragmenter.setComputeRingFragments(boolean val)", "testcase": false, "constructor": false}, {"identifier": "generateFragments", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "void", "signature": "void generateFragments(IAtomContainer atomContainer)", "full_signature": "@Override public void generateFragments(IAtomContainer atomContainer)", "class_method_signature": "MurckoFragmenter.generateFragments(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "scaffold", "parameters": "(final IAtomContainer mol)", "modifiers": "public static", "return": "IAtomContainer", "signature": "IAtomContainer scaffold(final IAtomContainer mol)", "full_signature": "public static IAtomContainer scaffold(final IAtomContainer mol)", "class_method_signature": "MurckoFragmenter.scaffold(final IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "addRingFragment", "parameters": "(IAtomContainer mol)", "modifiers": "private", "return": "void", "signature": "void addRingFragment(IAtomContainer mol)", "full_signature": "private void addRingFragment(IAtomContainer mol)", "class_method_signature": "MurckoFragmenter.addRingFragment(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(IAtomContainer atomContainer, Set<Long> fragmentSet)", "modifiers": "private", "return": "void", "signature": "void run(IAtomContainer atomContainer, Set<Long> fragmentSet)", "full_signature": "private void run(IAtomContainer atomContainer, Set<Long> fragmentSet)", "class_method_signature": "MurckoFragmenter.run(IAtomContainer atomContainer, Set<Long> fragmentSet)", "testcase": false, "constructor": false}, {"identifier": "removeSideChains", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer removeSideChains(IAtomContainer atomContainer)", "full_signature": "private IAtomContainer removeSideChains(IAtomContainer atomContainer)", "class_method_signature": "MurckoFragmenter.removeSideChains(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "markLinkers", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "void", "signature": "void markLinkers(IAtomContainer atomContainer)", "full_signature": "private void markLinkers(IAtomContainer atomContainer)", "class_method_signature": "MurckoFragmenter.markLinkers(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "markSideChains", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "void", "signature": "void markSideChains(IAtomContainer atomContainer)", "full_signature": "private void markSideChains(IAtomContainer atomContainer)", "class_method_signature": "MurckoFragmenter.markSideChains(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getSmilesFromAtomContainers", "parameters": "(Collection<IAtomContainer> mols)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getSmilesFromAtomContainers(Collection<IAtomContainer> mols)", "full_signature": "private List<String> getSmilesFromAtomContainers(Collection<IAtomContainer> mols)", "class_method_signature": "MurckoFragmenter.getSmilesFromAtomContainers(Collection<IAtomContainer> mols)", "testcase": false, "constructor": false}, {"identifier": "getFragments", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getFragments()", "full_signature": "@Override public String[] getFragments()", "class_method_signature": "MurckoFragmenter.getFragments()", "testcase": false, "constructor": false}, {"identifier": "getFragmentsAsContainers", "parameters": "()", "modifiers": "@Override public", "return": "IAtomContainer[]", "signature": "IAtomContainer[] getFragmentsAsContainers()", "full_signature": "@Override public IAtomContainer[] getFragmentsAsContainers()", "class_method_signature": "MurckoFragmenter.getFragmentsAsContainers()", "testcase": false, "constructor": false}, {"identifier": "getRingSystems", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getRingSystems()", "full_signature": "public String[] getRingSystems()", "class_method_signature": "MurckoFragmenter.getRingSystems()", "testcase": false, "constructor": false}, {"identifier": "getRingSystemsAsContainers", "parameters": "()", "modifiers": "public", "return": "IAtomContainer[]", "signature": "IAtomContainer[] getRingSystemsAsContainers()", "full_signature": "public IAtomContainer[] getRingSystemsAsContainers()", "class_method_signature": "MurckoFragmenter.getRingSystemsAsContainers()", "testcase": false, "constructor": false}, {"identifier": "getFrameworks", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getFrameworks()", "full_signature": "public String[] getFrameworks()", "class_method_signature": "MurckoFragmenter.getFrameworks()", "testcase": false, "constructor": false}, {"identifier": "getFrameworksAsContainers", "parameters": "()", "modifiers": "public", "return": "IAtomContainer[]", "signature": "IAtomContainer[] getFrameworksAsContainers()", "full_signature": "public IAtomContainer[] getFrameworksAsContainers()", "class_method_signature": "MurckoFragmenter.getFrameworksAsContainers()", "testcase": false, "constructor": false}, {"identifier": "isring", "parameters": "(IAtom atom)", "modifiers": "private", "return": "boolean", "signature": "boolean isring(IAtom atom)", "full_signature": "private boolean isring(IAtom atom)", "class_method_signature": "MurckoFragmenter.isring(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "islinker", "parameters": "(IAtom atom)", "modifiers": "private", "return": "boolean", "signature": "boolean islinker(IAtom atom)", "full_signature": "private boolean islinker(IAtom atom)", "class_method_signature": "MurckoFragmenter.islinker(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "issidechain", "parameters": "(IAtom atom)", "modifiers": "private", "return": "boolean", "signature": "boolean issidechain(IAtom atom)", "full_signature": "private boolean issidechain(IAtom atom)", "class_method_signature": "MurckoFragmenter.issidechain(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "islinker", "parameters": "(IBond bond)", "modifiers": "private", "return": "boolean", "signature": "boolean islinker(IBond bond)", "full_signature": "private boolean islinker(IBond bond)", "class_method_signature": "MurckoFragmenter.islinker(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "isZeroAtomLinker", "parameters": "(IBond bond)", "modifiers": "private", "return": "boolean", "signature": "boolean isZeroAtomLinker(IBond bond)", "full_signature": "private boolean isZeroAtomLinker(IBond bond)", "class_method_signature": "MurckoFragmenter.isZeroAtomLinker(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "hasframework", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "boolean", "signature": "boolean hasframework(IAtomContainer atomContainer)", "full_signature": "private boolean hasframework(IAtomContainer atomContainer)", "class_method_signature": "MurckoFragmenter.hasframework(IAtomContainer atomContainer)", "testcase": false, "constructor": false}], "file": "tool/fragment/src/main/java/org/openscience/cdk/fragment/MurckoFragmenter.java"}, "focal_method": {"identifier": "getFragmentsAsContainers", "parameters": "()", "modifiers": "@Override public", "return": "IAtomContainer[]", "body": "@Override\n    public IAtomContainer[] getFragmentsAsContainers() {\n        List<IAtomContainer> allfrags = new ArrayList<IAtomContainer>();\n        allfrags.addAll(frameMap.values());\n        allfrags.addAll(ringMap.values());\n        return allfrags.toArray(new IAtomContainer[0]);\n    }", "signature": "IAtomContainer[] getFragmentsAsContainers()", "full_signature": "@Override public IAtomContainer[] getFragmentsAsContainers()", "class_method_signature": "MurckoFragmenter.getFragmentsAsContainers()", "testcase": false, "constructor": false, "invocations": ["addAll", "values", "addAll", "values", "toArray"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}