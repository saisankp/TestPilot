{"test_class": {"identifier": "TypedMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "Actor-Lite/src/test/java/com/actors/TypedMapTest.java"}, "test_case": {"identifier": "getClassKeyFromEmptyMapThenThrowNoSuchElement", "parameters": "()", "modifiers": "@Test(expected = NoSuchElementException.class) public", "return": "void", "body": "@Test(expected = NoSuchElementException.class)\n    public void getClassKeyFromEmptyMapThenThrowNoSuchElement() {\n        TypedMap<Integer> map = new TypedMap<>(new HashMap<Object,Integer>());\n        map.get(A.class).blockingFirst();\n    }", "signature": "void getClassKeyFromEmptyMapThenThrowNoSuchElement()", "full_signature": "@Test(expected = NoSuchElementException.class) public void getClassKeyFromEmptyMapThenThrowNoSuchElement()", "class_method_signature": "TypedMapTest.getClassKeyFromEmptyMapThenThrowNoSuchElement()", "testcase": true, "constructor": false, "invocations": ["blockingFirst", "get"]}, "focal_class": {"identifier": "TypedMap", "superclass": "", "interfaces": "implements Iterable<Entry<Object, V>>", "fields": [{"original_string": "private final Map<Object, V> map;", "modifier": "private final", "type": "Map<Object, V>", "declarator": "map", "var_name": "map"}], "methods": [{"identifier": "TypedMap", "parameters": "(Map<Object, V> map)", "modifiers": "", "return": "", "signature": " TypedMap(Map<Object, V> map)", "full_signature": "  TypedMap(Map<Object, V> map)", "class_method_signature": "TypedMap.TypedMap(Map<Object, V> map)", "testcase": false, "constructor": true}, {"identifier": "containsKey", "parameters": "(final Class<?> type)", "modifiers": "@NonNull", "return": "Single<Boolean>", "signature": "Single<Boolean> containsKey(final Class<?> type)", "full_signature": "@NonNull Single<Boolean> containsKey(final Class<?> type)", "class_method_signature": "TypedMap.containsKey(final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(Object key)", "modifiers": "@NonNull", "return": "Single<Boolean>", "signature": "Single<Boolean> containsKey(Object key)", "full_signature": "@NonNull Single<Boolean> containsKey(Object key)", "class_method_signature": "TypedMap.containsKey(Object key)", "testcase": false, "constructor": false}, {"identifier": "getOrIgnore", "parameters": "(Object key)", "modifiers": "@NonNull", "return": "Maybe<V>", "signature": "Maybe<V> getOrIgnore(Object key)", "full_signature": "@NonNull Maybe<V> getOrIgnore(Object key)", "class_method_signature": "TypedMap.getOrIgnore(Object key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object key)", "modifiers": "@NonNull", "return": "Single<V>", "signature": "Single<V> get(Object key)", "full_signature": "@NonNull Single<V> get(Object key)", "class_method_signature": "TypedMap.get(Object key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@NonNull Class<?> type)", "modifiers": "@NonNull", "return": "Observable<V>", "signature": "Observable<V> get(@NonNull Class<?> type)", "full_signature": "@NonNull Observable<V> get(@NonNull Class<?> type)", "class_method_signature": "TypedMap.get(@NonNull Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getOrIgnore", "parameters": "(final Class<?> type)", "modifiers": "@NonNull", "return": "Observable<V>", "signature": "Observable<V> getOrIgnore(final Class<?> type)", "full_signature": "@NonNull Observable<V> getOrIgnore(final Class<?> type)", "class_method_signature": "TypedMap.getOrIgnore(final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "errorObservable", "parameters": "(@NonNull final Class<?> type)", "modifiers": "@NonNull private", "return": "Observable<V>", "signature": "Observable<V> errorObservable(@NonNull final Class<?> type)", "full_signature": "@NonNull private Observable<V> errorObservable(@NonNull final Class<?> type)", "class_method_signature": "TypedMap.errorObservable(@NonNull final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "byNonNullKey", "parameters": "()", "modifiers": "@NonNull private", "return": "Predicate<Entry<Object, V>>", "signature": "Predicate<Entry<Object, V>> byNonNullKey()", "full_signature": "@NonNull private Predicate<Entry<Object, V>> byNonNullKey()", "class_method_signature": "TypedMap.byNonNullKey()", "testcase": false, "constructor": false}, {"identifier": "byValidObjectTypes", "parameters": "(final Class<?> type)", "modifiers": "@NonNull private", "return": "Predicate<Entry<Object, V>>", "signature": "Predicate<Entry<Object, V>> byValidObjectTypes(final Class<?> type)", "full_signature": "@NonNull private Predicate<Entry<Object, V>> byValidObjectTypes(final Class<?> type)", "class_method_signature": "TypedMap.byValidObjectTypes(final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "toEntryValue", "parameters": "()", "modifiers": "@NonNull private", "return": "Function<Entry<Object, V>, V>", "signature": "Function<Entry<Object, V>, V> toEntryValue()", "full_signature": "@NonNull private Function<Entry<Object, V>, V> toEntryValue()", "class_method_signature": "TypedMap.toEntryValue()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Object key, V value)", "modifiers": "@NonNull", "return": "TypedMap<V>", "signature": "TypedMap<V> put(Object key, V value)", "full_signature": "@NonNull TypedMap<V> put(Object key, V value)", "class_method_signature": "TypedMap.put(Object key, V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object key)", "modifiers": "@NonNull", "return": "TypedMap<V>", "signature": "TypedMap<V> remove(Object key)", "full_signature": "@NonNull TypedMap<V> remove(Object key)", "class_method_signature": "TypedMap.remove(Object key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@NonNull public", "return": "TypedMap<V>", "signature": "TypedMap<V> clear()", "full_signature": "@NonNull public TypedMap<V> clear()", "class_method_signature": "TypedMap.clear()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "", "return": "int", "signature": "int size()", "full_signature": " int size()", "class_method_signature": "TypedMap.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": " boolean isEmpty()", "class_method_signature": "TypedMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override @NonNull public", "return": "Iterator<Entry<Object, V>>", "signature": "Iterator<Entry<Object, V>> iterator()", "full_signature": "@Override @NonNull public Iterator<Entry<Object, V>> iterator()", "class_method_signature": "TypedMap.iterator()", "testcase": false, "constructor": false}], "file": "Actor-Lite/src/main/java/com/actors/TypedMap.java"}, "focal_method": {"identifier": "get", "parameters": "(Object key)", "modifiers": "@NonNull", "return": "Single<V>", "body": "@NonNull\n    Single<V> get(Object key) {\n        if (map.containsKey(key)) {\n            return Single.just(map.get(key));\n        } else if (key != null && map.containsKey(key.getClass())) {\n            return Single.just(map.get(key.getClass()));\n        } else {\n            return Single.error(new NoSuchElementException(\"no value mapped to : \" + key));\n        }\n    }", "signature": "Single<V> get(Object key)", "full_signature": "@NonNull Single<V> get(Object key)", "class_method_signature": "TypedMap.get(Object key)", "testcase": false, "constructor": false, "invocations": ["containsKey", "just", "get", "containsKey", "getClass", "just", "get", "getClass", "error"]}, "repository": {"repo_id": 115371169, "url": "https://github.com/Ahmed-Adel-Ismail/ActorLite", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 42, "size": 265, "license": "licensed"}}