{"test_class": {"identifier": "QuantityTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char SEP = new DecimalFormatSymbols().getDecimalSeparator();", "modifier": "private static final", "type": "char", "declarator": "SEP = new DecimalFormatSymbols().getDecimalSeparator()", "var_name": "SEP"}], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/library/types/QuantityTypeTest.java"}, "test_case": {"identifier": "testDivideZero", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDivideZero() {\n        assertThrows(ArithmeticException.class, () -> new QuantityType<>(\"4 m\").divide(QuantityType.ZERO));\n    }", "signature": "void testDivideZero()", "full_signature": "@Test public void testDivideZero()", "class_method_signature": "QuantityTypeTest.testDivideZero()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "divide"]}, "focal_class": {"identifier": "QuantityType", "superclass": "extends Number", "interfaces": "implements PrimitiveType, State, Command, Comparable<QuantityType<T>>", "fields": [{"original_string": "private static final long serialVersionUID = 8828949721938234629L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 8828949721938234629L", "var_name": "serialVersionUID"}, {"original_string": "private static final BigDecimal HUNDRED = BigDecimal.valueOf(100);", "modifier": "private static final", "type": "BigDecimal", "declarator": "HUNDRED = BigDecimal.valueOf(100)", "var_name": "HUNDRED"}, {"original_string": "public static final QuantityType<Dimensionless> ZERO = new QuantityType<>(0, AbstractUnit.ONE);", "modifier": "public static final", "type": "QuantityType<Dimensionless>", "declarator": "ZERO = new QuantityType<>(0, AbstractUnit.ONE)", "var_name": "ZERO"}, {"original_string": "public static final QuantityType<Dimensionless> ONE = new QuantityType<>(1, AbstractUnit.ONE);", "modifier": "public static final", "type": "QuantityType<Dimensionless>", "declarator": "ONE = new QuantityType<>(1, AbstractUnit.ONE)", "var_name": "ONE"}, {"original_string": "private static final String UNIT_PATTERN = \"(?<=\\\\d)\\\\s*(?=[a-zA-Z\u00b0\u00b5%'](?![\\\\+\\\\-]?\\\\d))\";", "modifier": "private static final", "type": "String", "declarator": "UNIT_PATTERN = \"(?<=\\\\d)\\\\s*(?=[a-zA-Z\u00b0\u00b5%'](?![\\\\+\\\\-]?\\\\d))\";", "var_name": "UNIT_PATTERN"}, {"original_string": "private transient final Logger logger = LoggerFactory.getLogger(QuantityType.class);", "modifier": "private transient final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(QuantityType.class)", "var_name": "logger"}, {"original_string": "private final Quantity<T> quantity;", "modifier": "private final", "type": "Quantity<T>", "declarator": "quantity", "var_name": "quantity"}], "methods": [{"identifier": "QuantityType", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " QuantityType()", "full_signature": "@SuppressWarnings(\"unchecked\") public  QuantityType()", "class_method_signature": "QuantityType.QuantityType()", "testcase": false, "constructor": true}, {"identifier": "QuantityType", "parameters": "(String value)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " QuantityType(String value)", "full_signature": "@SuppressWarnings(\"unchecked\") public  QuantityType(String value)", "class_method_signature": "QuantityType.QuantityType(String value)", "testcase": false, "constructor": true}, {"identifier": "QuantityType", "parameters": "(Number value, Unit<T> unit)", "modifiers": "public", "return": "", "signature": " QuantityType(Number value, Unit<T> unit)", "full_signature": "public  QuantityType(Number value, Unit<T> unit)", "class_method_signature": "QuantityType.QuantityType(Number value, Unit<T> unit)", "testcase": false, "constructor": true}, {"identifier": "QuantityType", "parameters": "(Quantity<T> quantity)", "modifiers": "private", "return": "", "signature": " QuantityType(Quantity<T> quantity)", "full_signature": "private  QuantityType(Quantity<T> quantity)", "class_method_signature": "QuantityType.QuantityType(Quantity<T> quantity)", "testcase": false, "constructor": true}, {"identifier": "valueOf", "parameters": "(double value, Unit<T> unit)", "modifiers": "public static", "return": "QuantityType<T>", "signature": "QuantityType<T> valueOf(double value, Unit<T> unit)", "full_signature": "public static QuantityType<T> valueOf(double value, Unit<T> unit)", "class_method_signature": "QuantityType.valueOf(double value, Unit<T> unit)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "QuantityType.toString()", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(String value)", "modifiers": "public static", "return": "QuantityType<? extends Quantity<?>>", "signature": "QuantityType<? extends Quantity<?>> valueOf(String value)", "full_signature": "public static QuantityType<? extends Quantity<?>> valueOf(String value)", "class_method_signature": "QuantityType.valueOf(String value)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable Object obj)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "boolean", "signature": "boolean equals(@Nullable Object obj)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public boolean equals(@Nullable Object obj)", "class_method_signature": "QuantityType.equals(@Nullable Object obj)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(QuantityType<T> o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(QuantityType<T> o)", "full_signature": "@Override public int compareTo(QuantityType<T> o)", "class_method_signature": "QuantityType.compareTo(QuantityType<T> o)", "testcase": false, "constructor": false}, {"identifier": "getUnit", "parameters": "()", "modifiers": "public", "return": "Unit<T>", "signature": "Unit<T> getUnit()", "full_signature": "public Unit<T> getUnit()", "class_method_signature": "QuantityType.getUnit()", "testcase": false, "constructor": false}, {"identifier": "getDimension", "parameters": "()", "modifiers": "public", "return": "Dimension", "signature": "Dimension getDimension()", "full_signature": "public Dimension getDimension()", "class_method_signature": "QuantityType.getDimension()", "testcase": false, "constructor": false}, {"identifier": "toUnit", "parameters": "(Unit<?> targetUnit)", "modifiers": "@SuppressWarnings(\"unchecked\") public @Nullable", "return": "QuantityType<T>", "signature": "QuantityType<T> toUnit(Unit<?> targetUnit)", "full_signature": "@SuppressWarnings(\"unchecked\") public @Nullable QuantityType<T> toUnit(Unit<?> targetUnit)", "class_method_signature": "QuantityType.toUnit(Unit<?> targetUnit)", "testcase": false, "constructor": false}, {"identifier": "toUnit", "parameters": "(String targetUnit)", "modifiers": "@SuppressWarnings(\"unchecked\") public @Nullable", "return": "QuantityType<T>", "signature": "QuantityType<T> toUnit(String targetUnit)", "full_signature": "@SuppressWarnings(\"unchecked\") public @Nullable QuantityType<T> toUnit(String targetUnit)", "class_method_signature": "QuantityType.toUnit(String targetUnit)", "testcase": false, "constructor": false}, {"identifier": "toBigDecimal", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal toBigDecimal()", "full_signature": "public BigDecimal toBigDecimal()", "class_method_signature": "QuantityType.toBigDecimal()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "QuantityType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(String pattern)", "modifiers": "@Override public", "return": "String", "signature": "String format(String pattern)", "full_signature": "@Override public String format(String pattern)", "class_method_signature": "QuantityType.format(String pattern)", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int intValue()", "full_signature": "@Override public int intValue()", "class_method_signature": "QuantityType.intValue()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long longValue()", "full_signature": "@Override public long longValue()", "class_method_signature": "QuantityType.longValue()", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float floatValue()", "full_signature": "@Override public float floatValue()", "class_method_signature": "QuantityType.floatValue()", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue()", "full_signature": "@Override public double doubleValue()", "class_method_signature": "QuantityType.doubleValue()", "testcase": false, "constructor": false}, {"identifier": "toFullString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toFullString()", "full_signature": "@Override public String toFullString()", "class_method_signature": "QuantityType.toFullString()", "testcase": false, "constructor": false}, {"identifier": "as", "parameters": "(@Nullable Class<U> target)", "modifiers": "@Override public", "return": "U", "signature": "U as(@Nullable Class<U> target)", "full_signature": "@Override public U as(@Nullable Class<U> target)", "class_method_signature": "QuantityType.as(@Nullable Class<U> target)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(QuantityType<T> state)", "modifiers": "public", "return": "QuantityType<T>", "signature": "QuantityType<T> add(QuantityType<T> state)", "full_signature": "public QuantityType<T> add(QuantityType<T> state)", "class_method_signature": "QuantityType.add(QuantityType<T> state)", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "public", "return": "QuantityType<T>", "signature": "QuantityType<T> negate()", "full_signature": "public QuantityType<T> negate()", "class_method_signature": "QuantityType.negate()", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(QuantityType<T> state)", "modifiers": "public", "return": "QuantityType<T>", "signature": "QuantityType<T> subtract(QuantityType<T> state)", "full_signature": "public QuantityType<T> subtract(QuantityType<T> state)", "class_method_signature": "QuantityType.subtract(QuantityType<T> state)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(BigDecimal value)", "modifiers": "public", "return": "QuantityType<?>", "signature": "QuantityType<?> multiply(BigDecimal value)", "full_signature": "public QuantityType<?> multiply(BigDecimal value)", "class_method_signature": "QuantityType.multiply(BigDecimal value)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(QuantityType<?> state)", "modifiers": "public", "return": "QuantityType<?>", "signature": "QuantityType<?> multiply(QuantityType<?> state)", "full_signature": "public QuantityType<?> multiply(QuantityType<?> state)", "class_method_signature": "QuantityType.multiply(QuantityType<?> state)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(BigDecimal value)", "modifiers": "public", "return": "QuantityType<?>", "signature": "QuantityType<?> divide(BigDecimal value)", "full_signature": "public QuantityType<?> divide(BigDecimal value)", "class_method_signature": "QuantityType.divide(BigDecimal value)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(QuantityType<?> state)", "modifiers": "public", "return": "QuantityType<?>", "signature": "QuantityType<?> divide(QuantityType<?> state)", "full_signature": "public QuantityType<?> divide(QuantityType<?> state)", "class_method_signature": "QuantityType.divide(QuantityType<?> state)", "testcase": false, "constructor": false}, {"identifier": "offset", "parameters": "(QuantityType<T> offset, Unit<T> unit)", "modifiers": "public", "return": "QuantityType<T>", "signature": "QuantityType<T> offset(QuantityType<T> offset, Unit<T> unit)", "full_signature": "public QuantityType<T> offset(QuantityType<T> offset, Unit<T> unit)", "class_method_signature": "QuantityType.offset(QuantityType<T> offset, Unit<T> unit)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/library/types/QuantityType.java"}, "focal_method": {"identifier": "divide", "parameters": "(BigDecimal value)", "modifiers": "public", "return": "QuantityType<?>", "body": "public QuantityType<?> divide(BigDecimal value) {\n        return new QuantityType<>(this.quantity.divide(value));\n    }", "signature": "QuantityType<?> divide(BigDecimal value)", "full_signature": "public QuantityType<?> divide(BigDecimal value)", "class_method_signature": "QuantityType.divide(BigDecimal value)", "testcase": false, "constructor": false, "invocations": ["divide"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}