{"test_class": {"identifier": "ChecklistTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private URL manifestUrl;", "modifier": "private", "type": "URL", "declarator": "manifestUrl", "var_name": "manifestUrl"}, {"original_string": "private URL cndAUrl;", "modifier": "private", "type": "URL", "declarator": "cndAUrl", "var_name": "cndAUrl"}, {"original_string": "private URL cndBUrl;", "modifier": "private", "type": "URL", "declarator": "cndBUrl", "var_name": "cndBUrl"}], "file": "core/src/test/java/net/adamcin/oakpal/core/ChecklistTest.java"}, "test_case": {"identifier": "testAsInitStage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAsInitStage() throws Exception {\n        Checklist.Builder builder = new Checklist.Builder(\"test\");\n        final URL cndA = cndAUrl;\n        final URL cndB = cndBUrl;\n        builder.withCndUrls(Arrays.asList(cndA, cndB));\n        final String NS_PREFIX_FOO = \"foo\";\n        final String NS_URI_FOO = \"http://foo.com\";\n        final String NS_PREFIX_BAR = \"bar\";\n        final String NS_URI_BAR = \"http://bar.com\";\n        final List<JcrNs> jcrNamespaces = Arrays.asList(\n                JcrNs.create(NS_PREFIX_FOO, NS_URI_FOO),\n                JcrNs.create(NS_PREFIX_BAR, NS_URI_BAR));\n        builder.withJcrNamespaces(jcrNamespaces);\n        final NamespaceMapping mapping = JsonCnd.toNamespaceMapping(jcrNamespaces);\n        final List<QNodeTypeDefinition> nodetypes = JsonCnd.getQTypesFromJson(obj()\n                .key(\"foo:primaryType\").val(key(\"extends\", arr().val(\"nt:base\")))\n                .key(\"foo:mixinType\").val(key(\"@\", arr().val(\"mixin\")))\n                .key(\"bar:primaryType\").val(key(\"extends\", arr().val(\"nt:base\")))\n                .key(\"bar:mixinType\").val(key(\"@\", arr().val(\"mixin\"))).get(), mapping);\n        builder.withJcrNodetypes(nodetypes);\n        final List<PrivilegeDefinition> privileges =\n                JsonCnd.getPrivilegesFromJson(arr(\"foo:canDo\", \"bar:canBe\").get(), mapping);\n        builder.withJcrPrivileges(privileges);\n        final List<ForcedRoot> forcedRoots = Arrays.asList(\n                ForcedRoot.fromJson(obj()\n                        .key(ForcedRoot.keys().path(), \"/test/foo\")\n                        .key(ForcedRoot.keys().primaryType(), \"foo:primaryType\")\n                        .key(ForcedRoot.keys().mixinTypes(), arr().val(\"foo:mixinType\"))\n                        .get()),\n                ForcedRoot.fromJson(obj()\n                        .key(ForcedRoot.keys().path(), \"/test/bar\")\n                        .key(ForcedRoot.keys().primaryType(), \"bar:primaryType\")\n                        .key(ForcedRoot.keys().mixinTypes(), arr().val(\"bar:mixinType\"))\n                        .get()));\n        builder.withForcedRoots(forcedRoots);\n        final List<String> repoInits = Arrays.asList(\n                \"create service user testAsInitStage1\",\n                \"create service user testAsInitStage2\"\n        );\n        builder.withRepoInits(repoInits);\n        InitStage initStage = builder.build().asInitStage();\n        final OakMachine machine = new OakMachine.Builder().withInitStage(initStage).build();\n        machine.adminInitAndInspect(session -> {\n            assertEquals(\"foo namespace should be registered\",\n                    NS_URI_FOO, session.getNamespaceURI(NS_PREFIX_FOO));\n            assertEquals(\"bar namespace should be registered\",\n                    NS_URI_BAR, session.getNamespaceURI(NS_PREFIX_BAR));\n            assertTrue(\"/test/foo path exists\", session.nodeExists(\"/test/foo\"));\n            assertTrue(\"/test/foo is a foo:primaryType\",\n                    session.getNode(\"/test/foo\").isNodeType(\"foo:primaryType\"));\n            assertTrue(\"/test/foo is a foo:mixinType\",\n                    session.getNode(\"/test/foo\").isNodeType(\"foo:mixinType\"));\n            assertTrue(\"/test/bar path exists\", session.nodeExists(\"/test/bar\"));\n            assertTrue(\"/test/bar is a bar:primaryType\",\n                    session.getNode(\"/test/bar\").isNodeType(\"bar:primaryType\"));\n            assertTrue(\"/test/bar is a bar:mixinType\",\n                    session.getNode(\"/test/bar\").isNodeType(\"bar:mixinType\"));\n            UserManager userManager = ((JackrabbitSession) session).getUserManager();\n            assertNotNull(\"has principal testAsInitStage1\",\n                    userManager.getAuthorizable(\"testAsInitStage1\"));\n            assertNotNull(\"has principal testAsInitStage2\",\n                    userManager.getAuthorizable(\"testAsInitStage2\"));\n        });\n    }", "signature": "void testAsInitStage()", "full_signature": "@Test public void testAsInitStage()", "class_method_signature": "ChecklistTest.testAsInitStage()", "testcase": true, "constructor": false, "invocations": ["withCndUrls", "asList", "asList", "create", "create", "withJcrNamespaces", "toNamespaceMapping", "getQTypesFromJson", "get", "val", "key", "val", "key", "val", "key", "val", "key", "obj", "key", "val", "arr", "key", "val", "arr", "key", "val", "arr", "key", "val", "arr", "withJcrNodetypes", "getPrivilegesFromJson", "get", "arr", "withJcrPrivileges", "asList", "fromJson", "get", "key", "key", "key", "obj", "path", "keys", "primaryType", "keys", "mixinTypes", "keys", "val", "arr", "fromJson", "get", "key", "key", "key", "obj", "path", "keys", "primaryType", "keys", "mixinTypes", "keys", "val", "arr", "withForcedRoots", "asList", "withRepoInits", "asInitStage", "build", "build", "withInitStage", "adminInitAndInspect", "assertEquals", "getNamespaceURI", "assertEquals", "getNamespaceURI", "assertTrue", "nodeExists", "assertTrue", "isNodeType", "getNode", "assertTrue", "isNodeType", "getNode", "assertTrue", "nodeExists", "assertTrue", "isNodeType", "getNode", "assertTrue", "isNodeType", "getNode", "getUserManager", "assertNotNull", "getAuthorizable", "assertNotNull", "getAuthorizable"]}, "focal_class": {"identifier": "Checklist", "superclass": "", "interfaces": "implements JsonObjectConvertible", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        private final List<String> allKeys = Arrays.asList(\n                name(),\n                checks(),\n                repoInits(),\n                forcedRoots(),\n                cndNames(),\n                cndUrls(),\n                jcrNodetypes(),\n                jcrPrivileges(),\n                jcrNamespaces());\n\n        @Override\n        public String name() {\n            return \"name\";\n        }\n\n        @Override\n        public String cndUrls() {\n            return \"cndUrls\";\n        }\n\n        @Override\n        public String cndNames() {\n            return \"cndNames\";\n        }\n\n        @Override\n        public String jcrNodetypes() {\n            return \"jcrNodetypes\";\n        }\n\n        @Override\n        public String jcrNamespaces() {\n            return \"jcrNamespaces\";\n        }\n\n        @Override\n        public String jcrPrivileges() {\n            return \"jcrPrivileges\";\n        }\n\n        @Override\n        public String forcedRoots() {\n            return \"forcedRoots\";\n        }\n\n        @Override\n        public String repoInits() {\n            return \"repoInits\";\n        }\n\n        @Override\n        public String checks() {\n            return \"checks\";\n        }\n\n        @Override\n        public List<String> orderedKeys() {\n            return allKeys;\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        private final List<String> allKeys = Arrays.asList(\n                name(),\n                checks(),\n                repoInits(),\n                forcedRoots(),\n                cndNames(),\n                cndUrls(),\n                jcrNodetypes(),\n                jcrPrivileges(),\n                jcrNamespaces());\n\n        @Override\n        public String name() {\n            return \"name\";\n        }\n\n        @Override\n        public String cndUrls() {\n            return \"cndUrls\";\n        }\n\n        @Override\n        public String cndNames() {\n            return \"cndNames\";\n        }\n\n        @Override\n        public String jcrNodetypes() {\n            return \"jcrNodetypes\";\n        }\n\n        @Override\n        public String jcrNamespaces() {\n            return \"jcrNamespaces\";\n        }\n\n        @Override\n        public String jcrPrivileges() {\n            return \"jcrPrivileges\";\n        }\n\n        @Override\n        public String forcedRoots() {\n            return \"forcedRoots\";\n        }\n\n        @Override\n        public String repoInits() {\n            return \"repoInits\";\n        }\n\n        @Override\n        public String checks() {\n            return \"checks\";\n        }\n\n        @Override\n        public List<String> orderedKeys() {\n            return allKeys;\n        }\n    }", "var_name": "KEYS"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Checklist.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Checklist.class)", "var_name": "LOGGER"}, {"original_string": "static final Comparator<String> checklistKeyComparator = (s1, s2) -> {\n        final List<String> keyOrder = keys().orderedKeys();\n        if (keyOrder.contains(s1) && keyOrder.contains(s2)) {\n            return Integer.compare(keyOrder.indexOf(s1), keyOrder.indexOf(s2));\n        } else if (keyOrder.contains(s1)) {\n            return -1;\n        } else if (keyOrder.contains(s2)) {\n            return 1;\n        } else {\n            return s1.compareTo(s2);\n        }\n    };", "modifier": "static final", "type": "Comparator<String>", "declarator": "checklistKeyComparator = (s1, s2) -> {\n        final List<String> keyOrder = keys().orderedKeys();\n        if (keyOrder.contains(s1) && keyOrder.contains(s2)) {\n            return Integer.compare(keyOrder.indexOf(s1), keyOrder.indexOf(s2));\n        } else if (keyOrder.contains(s1)) {\n            return -1;\n        } else if (keyOrder.contains(s2)) {\n            return 1;\n        } else {\n            return s1.compareTo(s2);\n        }\n    }", "var_name": "checklistKeyComparator"}, {"original_string": "private final JsonObject originalJson;", "modifier": "private final", "type": "JsonObject", "declarator": "originalJson", "var_name": "originalJson"}, {"original_string": "private final String moduleName;", "modifier": "private final", "type": "String", "declarator": "moduleName", "var_name": "moduleName"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final List<URL> cndUrls;", "modifier": "private final", "type": "List<URL>", "declarator": "cndUrls", "var_name": "cndUrls"}, {"original_string": "private final List<JcrNs> jcrNamespaces;", "modifier": "private final", "type": "List<JcrNs>", "declarator": "jcrNamespaces", "var_name": "jcrNamespaces"}, {"original_string": "private final List<QNodeTypeDefinition> jcrNodetypes;", "modifier": "private final", "type": "List<QNodeTypeDefinition>", "declarator": "jcrNodetypes", "var_name": "jcrNodetypes"}, {"original_string": "private final List<PrivilegeDefinition> jcrPrivileges;", "modifier": "private final", "type": "List<PrivilegeDefinition>", "declarator": "jcrPrivileges", "var_name": "jcrPrivileges"}, {"original_string": "private final List<ForcedRoot> forcedRoots;", "modifier": "private final", "type": "List<ForcedRoot>", "declarator": "forcedRoots", "var_name": "forcedRoots"}, {"original_string": "private final List<CheckSpec.ImmutableSpec> checks;", "modifier": "private final", "type": "List<CheckSpec.ImmutableSpec>", "declarator": "checks", "var_name": "checks"}, {"original_string": "private final List<String> repoInits;", "modifier": "private final", "type": "List<String>", "declarator": "repoInits", "var_name": "repoInits"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "Checklist.JsonKeys", "signature": "Checklist.JsonKeys keys()", "full_signature": "@NotNull public static Checklist.JsonKeys keys()", "class_method_signature": "Checklist.keys()", "testcase": false, "constructor": false}, {"identifier": "comparingJsonKeys", "parameters": "(final @NotNull Function<T, String> jsonKeyExtractor)", "modifiers": "public static", "return": "Comparator<T>", "signature": "Comparator<T> comparingJsonKeys(final @NotNull Function<T, String> jsonKeyExtractor)", "full_signature": "public static Comparator<T> comparingJsonKeys(final @NotNull Function<T, String> jsonKeyExtractor)", "class_method_signature": "Checklist.comparingJsonKeys(final @NotNull Function<T, String> jsonKeyExtractor)", "testcase": false, "constructor": false}, {"identifier": "Checklist", "parameters": "(final @Nullable JsonObject originalJson,\n              final @Nullable String moduleName,\n              final @Nullable String name,\n              final @NotNull List<URL> cndUrls,\n              final @NotNull List<JcrNs> jcrNamespaces,\n              final @NotNull List<QNodeTypeDefinition> jcrNodetypes,\n              final @NotNull List<PrivilegeDefinition> jcrPrivileges,\n              final @NotNull List<ForcedRoot> forcedRoots,\n              final @NotNull List<CheckSpec.ImmutableSpec> checks,\n              final @NotNull List<String> repoInits)", "modifiers": "", "return": "", "signature": " Checklist(final @Nullable JsonObject originalJson,\n              final @Nullable String moduleName,\n              final @Nullable String name,\n              final @NotNull List<URL> cndUrls,\n              final @NotNull List<JcrNs> jcrNamespaces,\n              final @NotNull List<QNodeTypeDefinition> jcrNodetypes,\n              final @NotNull List<PrivilegeDefinition> jcrPrivileges,\n              final @NotNull List<ForcedRoot> forcedRoots,\n              final @NotNull List<CheckSpec.ImmutableSpec> checks,\n              final @NotNull List<String> repoInits)", "full_signature": "  Checklist(final @Nullable JsonObject originalJson,\n              final @Nullable String moduleName,\n              final @Nullable String name,\n              final @NotNull List<URL> cndUrls,\n              final @NotNull List<JcrNs> jcrNamespaces,\n              final @NotNull List<QNodeTypeDefinition> jcrNodetypes,\n              final @NotNull List<PrivilegeDefinition> jcrPrivileges,\n              final @NotNull List<ForcedRoot> forcedRoots,\n              final @NotNull List<CheckSpec.ImmutableSpec> checks,\n              final @NotNull List<String> repoInits)", "class_method_signature": "Checklist.Checklist(final @Nullable JsonObject originalJson,\n              final @Nullable String moduleName,\n              final @Nullable String name,\n              final @NotNull List<URL> cndUrls,\n              final @NotNull List<JcrNs> jcrNamespaces,\n              final @NotNull List<QNodeTypeDefinition> jcrNodetypes,\n              final @NotNull List<PrivilegeDefinition> jcrPrivileges,\n              final @NotNull List<ForcedRoot> forcedRoots,\n              final @NotNull List<CheckSpec.ImmutableSpec> checks,\n              final @NotNull List<String> repoInits)", "testcase": false, "constructor": true}, {"identifier": "getModuleName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getModuleName()", "full_signature": "public String getModuleName()", "class_method_signature": "Checklist.getModuleName()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Checklist.getName()", "testcase": false, "constructor": false}, {"identifier": "getCndUrls", "parameters": "()", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> getCndUrls()", "full_signature": "public List<URL> getCndUrls()", "class_method_signature": "Checklist.getCndUrls()", "testcase": false, "constructor": false}, {"identifier": "getJcrNodetypes", "parameters": "()", "modifiers": "public", "return": "List<QNodeTypeDefinition>", "signature": "List<QNodeTypeDefinition> getJcrNodetypes()", "full_signature": "public List<QNodeTypeDefinition> getJcrNodetypes()", "class_method_signature": "Checklist.getJcrNodetypes()", "testcase": false, "constructor": false}, {"identifier": "getJcrNamespaces", "parameters": "()", "modifiers": "public", "return": "List<JcrNs>", "signature": "List<JcrNs> getJcrNamespaces()", "full_signature": "public List<JcrNs> getJcrNamespaces()", "class_method_signature": "Checklist.getJcrNamespaces()", "testcase": false, "constructor": false}, {"identifier": "getJcrPrivilegeNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getJcrPrivilegeNames()", "full_signature": "public List<String> getJcrPrivilegeNames()", "class_method_signature": "Checklist.getJcrPrivilegeNames()", "testcase": false, "constructor": false}, {"identifier": "getJcrPrivileges", "parameters": "()", "modifiers": "public", "return": "List<PrivilegeDefinition>", "signature": "List<PrivilegeDefinition> getJcrPrivileges()", "full_signature": "public List<PrivilegeDefinition> getJcrPrivileges()", "class_method_signature": "Checklist.getJcrPrivileges()", "testcase": false, "constructor": false}, {"identifier": "getForcedRoots", "parameters": "()", "modifiers": "public", "return": "List<ForcedRoot>", "signature": "List<ForcedRoot> getForcedRoots()", "full_signature": "public List<ForcedRoot> getForcedRoots()", "class_method_signature": "Checklist.getForcedRoots()", "testcase": false, "constructor": false}, {"identifier": "getChecks", "parameters": "()", "modifiers": "public", "return": "List<CheckSpec>", "signature": "List<CheckSpec> getChecks()", "full_signature": "public List<CheckSpec> getChecks()", "class_method_signature": "Checklist.getChecks()", "testcase": false, "constructor": false}, {"identifier": "getRepoInits", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getRepoInits()", "full_signature": "public List<String> getRepoInits()", "class_method_signature": "Checklist.getRepoInits()", "testcase": false, "constructor": false}, {"identifier": "asInitStage", "parameters": "()", "modifiers": "public", "return": "InitStage", "signature": "InitStage asInitStage()", "full_signature": "public InitStage asInitStage()", "class_method_signature": "Checklist.asInitStage()", "testcase": false, "constructor": false}, {"identifier": "insertPrefix", "parameters": "(final @NotNull CheckSpec checkSpec, final String prefix)", "modifiers": "private", "return": "CheckSpec", "signature": "CheckSpec insertPrefix(final @NotNull CheckSpec checkSpec, final String prefix)", "full_signature": "private CheckSpec insertPrefix(final @NotNull CheckSpec checkSpec, final String prefix)", "class_method_signature": "Checklist.insertPrefix(final @NotNull CheckSpec checkSpec, final String prefix)", "testcase": false, "constructor": false}, {"identifier": "getCheckPrefix", "parameters": "(final @Nullable String moduleName,\n                                 final @Nullable String checklistName)", "modifiers": "static", "return": "String", "signature": "String getCheckPrefix(final @Nullable String moduleName,\n                                 final @Nullable String checklistName)", "full_signature": "static String getCheckPrefix(final @Nullable String moduleName,\n                                 final @Nullable String checklistName)", "class_method_signature": "Checklist.getCheckPrefix(final @Nullable String moduleName,\n                                 final @Nullable String checklistName)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Checklist.toString()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject toJson()", "full_signature": "@Override public JsonObject toJson()", "class_method_signature": "Checklist.toJson()", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json)", "modifiers": "public static", "return": "Checklist", "signature": "Checklist fromJson(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json)", "full_signature": "public static Checklist fromJson(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json)", "class_method_signature": "Checklist.fromJson(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/Checklist.java"}, "focal_method": {"identifier": "asInitStage", "parameters": "()", "modifiers": "public", "return": "InitStage", "body": "public InitStage asInitStage() {\n        InitStage.Builder builder = new InitStage.Builder()\n                .withRepoInits(getRepoInits())\n                .withOrderedCndUrls(getCndUrls())\n                .withForcedRoots(getForcedRoots())\n                .withPrivileges(getJcrPrivilegeNames())\n                .withQNodeTypes(getJcrNodetypes())\n                .withNs(getJcrNamespaces());\n\n        return builder.build();\n    }", "signature": "InitStage asInitStage()", "full_signature": "public InitStage asInitStage()", "class_method_signature": "Checklist.asInitStage()", "testcase": false, "constructor": false, "invocations": ["withNs", "withQNodeTypes", "withPrivileges", "withForcedRoots", "withOrderedCndUrls", "withRepoInits", "getRepoInits", "getCndUrls", "getForcedRoots", "getJcrPrivilegeNames", "getJcrNodetypes", "getJcrNamespaces", "build"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}