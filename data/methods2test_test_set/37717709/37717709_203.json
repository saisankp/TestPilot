{"test_class": {"identifier": "TestScopedMap", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScopeObserver observer;", "modifier": "private", "type": "ScopeObserver", "declarator": "observer", "var_name": "observer"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/scope/TestScopedMap.java"}, "test_case": {"identifier": "testEntrySet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEntrySet() {\n        final ScopedMap<String, String> map =\n            new ScopedMap<String, String>(observer);\n        map.enterScope(Scope.SESSION, Scope.DOCUMENT);\n        Assert.assertNull(map.put(\"key1\", \"value1\"));\n        Assert.assertNull(map.put(\"key2\", \"value2\"));\n        final Set<Map.Entry<String, String>> entries = map.entrySet();\n        Assert.assertFalse(entries.isEmpty());\n        for (Map.Entry<String, String> entry : entries) {\n            final String key = entry.getKey();\n            Assert.assertTrue(key.equals(\"key1\") || key.equals(\"key2\"));\n            final String value = entry.getValue();\n            Assert.assertTrue(value.equals(\"value1\") || value.equals(\"value2\"));\n        }\n        final Iterator<Map.Entry<String, String>> iterator = entries.iterator();\n        final Map.Entry<String, String> entry1 = iterator.next();\n        final String key1 = entry1.getKey();\n        final String value1 = entry1.getValue();\n        final String value3 = \"value3\";\n        Assert.assertEquals(value1, map.get(key1));\n        Assert.assertEquals(value1, entry1.setValue(value3));\n        Assert.assertEquals(value3, entry1.getValue());\n        Assert.assertEquals(value3, map.get(key1));\n        final String value4 = \"value4\";\n        Assert.assertEquals(value3, entry1.setValue(value4));\n        Assert.assertEquals(value4, entry1.getValue());\n        Assert.assertEquals(value4, map.get(key1));\n    }", "signature": "void testEntrySet()", "full_signature": "@Test public void testEntrySet()", "class_method_signature": "TestScopedMap.testEntrySet()", "testcase": true, "constructor": false, "invocations": ["enterScope", "assertNull", "put", "assertNull", "put", "entrySet", "assertFalse", "isEmpty", "getKey", "assertTrue", "equals", "equals", "getValue", "assertTrue", "equals", "equals", "iterator", "next", "getKey", "getValue", "assertEquals", "get", "assertEquals", "setValue", "assertEquals", "getValue", "assertEquals", "get", "assertEquals", "setValue", "assertEquals", "getValue", "assertEquals", "get"]}, "focal_class": {"identifier": "ScopedMap", "superclass": "", "interfaces": "implements ScopeSubscriber, Map<K, V>", "fields": [{"original_string": "private static final Logger LOGGER =\n            LogManager.getLogger(ScopedMap.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n            LogManager.getLogger(ScopedMap.class)", "var_name": "LOGGER"}, {"original_string": "private final Map<K, Stack<ScopedMapItem<V>>> map;", "modifier": "private final", "type": "Map<K, Stack<ScopedMapItem<V>>>", "declarator": "map", "var_name": "map"}, {"original_string": "private final ScopeObserver observer;", "modifier": "private final", "type": "ScopeObserver", "declarator": "observer", "var_name": "observer"}, {"original_string": "private Scope scope;", "modifier": "private", "type": "Scope", "declarator": "scope", "var_name": "scope"}], "methods": [{"identifier": "ScopedMap", "parameters": "(final ScopeObserver scopeObserver)", "modifiers": "public", "return": "", "signature": " ScopedMap(final ScopeObserver scopeObserver)", "full_signature": "public  ScopedMap(final ScopeObserver scopeObserver)", "class_method_signature": "ScopedMap.ScopedMap(final ScopeObserver scopeObserver)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ScopedMap.close()", "testcase": false, "constructor": false}, {"identifier": "enterScope", "parameters": "(final Scope previous, final Scope next)", "modifiers": "public", "return": "void", "signature": "void enterScope(final Scope previous, final Scope next)", "full_signature": "public void enterScope(final Scope previous, final Scope next)", "class_method_signature": "ScopedMap.enterScope(final Scope previous, final Scope next)", "testcase": false, "constructor": false}, {"identifier": "exitScope", "parameters": "(final Scope previous, final Scope next)", "modifiers": "public", "return": "void", "signature": "void exitScope(final Scope previous, final Scope next)", "full_signature": "public void exitScope(final Scope previous, final Scope next)", "class_method_signature": "ScopedMap.exitScope(final Scope previous, final Scope next)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "ScopedMap.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "ScopedMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(final Object key)", "modifiers": "public", "return": "boolean", "signature": "boolean containsKey(final Object key)", "full_signature": "public boolean containsKey(final Object key)", "class_method_signature": "ScopedMap.containsKey(final Object key)", "testcase": false, "constructor": false}, {"identifier": "containsValue", "parameters": "(final Object value)", "modifiers": "public", "return": "boolean", "signature": "boolean containsValue(final Object value)", "full_signature": "public boolean containsValue(final Object value)", "class_method_signature": "ScopedMap.containsValue(final Object value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final Object key)", "modifiers": "public", "return": "V", "signature": "V get(final Object key)", "full_signature": "public V get(final Object key)", "class_method_signature": "ScopedMap.get(final Object key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final K key, final V value)", "modifiers": "public", "return": "V", "signature": "V put(final K key, final V value)", "full_signature": "public V put(final K key, final V value)", "class_method_signature": "ScopedMap.put(final K key, final V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final Object key)", "modifiers": "public", "return": "V", "signature": "V remove(final Object key)", "full_signature": "public V remove(final Object key)", "class_method_signature": "ScopedMap.remove(final Object key)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(final Map<? extends K, ? extends V> t)", "modifiers": "public", "return": "void", "signature": "void putAll(final Map<? extends K, ? extends V> t)", "full_signature": "public void putAll(final Map<? extends K, ? extends V> t)", "class_method_signature": "ScopedMap.putAll(final Map<? extends K, ? extends V> t)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ScopedMap.clear()", "testcase": false, "constructor": false}, {"identifier": "keySet", "parameters": "()", "modifiers": "public", "return": "Set<K>", "signature": "Set<K> keySet()", "full_signature": "public Set<K> keySet()", "class_method_signature": "ScopedMap.keySet()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "public", "return": "Collection<V>", "signature": "Collection<V> values()", "full_signature": "public Collection<V> values()", "class_method_signature": "ScopedMap.values()", "testcase": false, "constructor": false}, {"identifier": "entrySet", "parameters": "()", "modifiers": "public", "return": "Set<Map.Entry<K, V>>", "signature": "Set<Map.Entry<K, V>> entrySet()", "full_signature": "public Set<Map.Entry<K, V>> entrySet()", "class_method_signature": "ScopedMap.entrySet()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "ScopedMap.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ScopedMap.hashCode()", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/scope/ScopedMap.java"}, "focal_method": {"identifier": "entrySet", "parameters": "()", "modifiers": "public", "return": "Set<Map.Entry<K, V>>", "body": "public Set<Map.Entry<K, V>> entrySet() {\n        final Set<Map.Entry<K, Stack<ScopedMapItem<V>>>> entries =\n            map.entrySet();\n        final Set<Map.Entry<K, V>> set =\n            new java.util.HashSet<Map.Entry<K, V>>();\n        for (Map.Entry<K, Stack<ScopedMapItem<V>>> entry : entries) {\n            final K key = entry.getKey();\n            final ScopedMapEntry<K, V> current =\n                new ScopedMapEntry<K, V>(key, this);\n            set.add(current);\n        }\n        return set;\n    }", "signature": "Set<Map.Entry<K, V>> entrySet()", "full_signature": "public Set<Map.Entry<K, V>> entrySet()", "class_method_signature": "ScopedMap.entrySet()", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "add"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}