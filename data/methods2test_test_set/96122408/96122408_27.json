{"test_class": {"identifier": "BackgroundServiceActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ActorSystem system;", "modifier": "private static", "type": "ActorSystem", "declarator": "system", "var_name": "system"}, {"original_string": "private static final Props props = Props.create(BackGroundServiceActor.class);", "modifier": "private static final", "type": "Props", "declarator": "props = Props.create(BackGroundServiceActor.class)", "var_name": "props"}, {"original_string": "private static CassandraOperation cassandraOperation = ServiceFactory.getInstance();", "modifier": "private static", "type": "CassandraOperation", "declarator": "cassandraOperation = ServiceFactory.getInstance()", "var_name": "cassandraOperation"}, {"original_string": "private static Util.DbInfo geoLocationDbInfo = Util.dbInfoMap.get(JsonKey.GEO_LOCATION_DB);", "modifier": "private static", "type": "Util.DbInfo", "declarator": "geoLocationDbInfo = Util.dbInfoMap.get(JsonKey.GEO_LOCATION_DB)", "var_name": "geoLocationDbInfo"}, {"original_string": "private static final String locnId = \"hhjcjrdf4scdv56vf79fw4p89\";", "modifier": "private static final", "type": "String", "declarator": "locnId = \"hhjcjrdf4scdv56vf79fw4p89\"", "var_name": "locnId"}], "file": "actors/common/src/test/java/org/sunbird/learner/actors/BackgroundServiceActorTest.java"}, "test_case": {"identifier": "updateUserCountTest", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n  @Ignore\n  public void updateUserCountTest() {\n    Map<String, Object> locnMap = new HashMap<String, Object>();\n    locnMap.put(JsonKey.ID, locnId);\n    locnMap.put(JsonKey.USER_COUNT, 0);\n    cassandraOperation.updateRecord(\n            geoLocationDbInfo.getKeySpace(), geoLocationDbInfo.getTableName(), locnMap);\n    List<Object> locnIdList = new ArrayList<>();\n    locnIdList.add(locnId);\n\n    TestKit probe = new TestKit(system);\n    ActorRef subject = system.actorOf(props);\n    Request actorMessage = new Request();\n\n    actorMessage.getRequest().put(JsonKey.LOCATION_IDS, locnIdList);\n    actorMessage.getRequest().put(JsonKey.OPERATION, \"GeoLocationManagementActor\");\n    actorMessage.setOperation(BackgroundOperations.updateUserCountToLocationID.name());\n\n    subject.tell(actorMessage, probe.getRef());\n    try {\n      Thread.sleep(20000);\n    } catch (InterruptedException e) {\n      ProjectLogger.log(e.getMessage(), e);\n    }\n    Response response =\n        cassandraOperation.getRecordById(\n            geoLocationDbInfo.getKeySpace(), geoLocationDbInfo.getTableName(), locnId);\n    // probe.expectMsgClass(duration(\"300 second\"),Response.class);\n    List<Map<String, Object>> reslist = (List<Map<String, Object>>) response.get(JsonKey.RESPONSE);\n    Map<String, Object> map = reslist.get(0);\n    int count = (int) map.get(JsonKey.USER_COUNT);\n    boolean bool = (count >= 0) ? true : false;\n    assertTrue(bool);\n  }", "signature": "void updateUserCountTest()", "full_signature": "@Test @Ignore public void updateUserCountTest()", "class_method_signature": "BackgroundServiceActorTest.updateUserCountTest()", "testcase": true, "constructor": false, "invocations": ["put", "put", "updateRecord", "getKeySpace", "getTableName", "add", "actorOf", "put", "getRequest", "put", "getRequest", "setOperation", "name", "tell", "getRef", "sleep", "log", "getMessage", "getRecordById", "getKeySpace", "getTableName", "get", "get", "get", "assertTrue"]}, "focal_class": {"identifier": "BackGroundServiceActor", "superclass": "extends BaseActor", "interfaces": "", "fields": [{"original_string": "private CassandraOperation cassandraOperation = ServiceFactory.getInstance();", "modifier": "private", "type": "CassandraOperation", "declarator": "cassandraOperation = ServiceFactory.getInstance()", "var_name": "cassandraOperation"}, {"original_string": "private static ElasticSearchService esService = EsClientFactory.getInstance(JsonKey.REST);", "modifier": "private static", "type": "ElasticSearchService", "declarator": "esService = EsClientFactory.getInstance(JsonKey.REST)", "var_name": "esService"}], "methods": [{"identifier": "onReceive", "parameters": "(Request request)", "modifiers": "@Override public", "return": "void", "signature": "void onReceive(Request request)", "full_signature": "@Override public void onReceive(Request request)", "class_method_signature": "BackGroundServiceActor.onReceive(Request request)", "testcase": false, "constructor": false}, {"identifier": "updateUserCount", "parameters": "(Request actorMessage)", "modifiers": "private", "return": "void", "signature": "void updateUserCount(Request actorMessage)", "full_signature": "private void updateUserCount(Request actorMessage)", "class_method_signature": "BackGroundServiceActor.updateUserCount(Request actorMessage)", "testcase": false, "constructor": false}, {"identifier": "getUserCount", "parameters": "(String locationId)", "modifiers": "private static", "return": "int", "signature": "int getUserCount(String locationId)", "full_signature": "private static int getUserCount(String locationId)", "class_method_signature": "BackGroundServiceActor.getUserCount(String locationId)", "testcase": false, "constructor": false}], "file": "actors/common/src/main/java/org/sunbird/learner/actors/BackGroundServiceActor.java"}, "focal_method": {"identifier": "updateUserCount", "parameters": "(Request actorMessage)", "modifiers": "private", "return": "void", "body": "private void updateUserCount(Request actorMessage) {\n    ProjectLogger.log(\"In BackgroundService actor in updateUserCount method.\");\n    Util.DbInfo locDbInfo = Util.dbInfoMap.get(JsonKey.GEO_LOCATION_DB);\n    List<Object> locationIds = (List<Object>) actorMessage.getRequest().get(JsonKey.LOCATION_IDS);\n    String operation = (String) actorMessage.getRequest().get(JsonKey.OPERATION);\n    ProjectLogger.log(\"operation for updating UserCount\" + operation);\n    Response response =\n        cassandraOperation.getRecordsByProperty(\n            locDbInfo.getKeySpace(), locDbInfo.getTableName(), JsonKey.ID, locationIds);\n    List<Map<String, Object>> list = (List<Map<String, Object>>) response.get(JsonKey.RESPONSE);\n    if (null != list && !list.isEmpty()) {\n      for (Map<String, Object> map : list) {\n        String locationId = (String) map.get(JsonKey.ID);\n        ProjectLogger.log(\"Processing start for LocationId \" + locationId);\n        Long userCountTTL = 0L;\n        int userCount =\n            (map.get(JsonKey.USER_COUNT) == null) ? 0 : (int) (map.get(JsonKey.USER_COUNT));\n        ProjectLogger.log(\"userCount is \" + userCount + \"for location id \" + locationId);\n        if (userCount == 0\n            && !StringUtils.isBlank(operation)\n            && operation.equalsIgnoreCase(\"UpdateUserCountScheduler\")) {\n          ProjectLogger.log(\"Processing start for LocationId for Scheduler \" + locationId);\n          int count = getUserCount(locationId);\n          Map<String, Object> reqMap = new HashMap<>();\n          reqMap.put(JsonKey.ID, locationId);\n          reqMap.put(JsonKey.USER_COUNT, count);\n          reqMap.put(JsonKey.USER_COUNT_TTL, String.valueOf(System.currentTimeMillis()));\n          cassandraOperation.updateRecord(\n              locDbInfo.getKeySpace(), locDbInfo.getTableName(), reqMap);\n        } else if (!StringUtils.isBlank(operation)\n            && operation.equalsIgnoreCase(\"GeoLocationManagementActor\")) {\n          ProjectLogger.log(\n              \"Processing start for LocationId for GeoLocationManagementActor \" + locationId);\n          try {\n            if (!StringUtils.isBlank((String) map.get(JsonKey.USER_COUNT_TTL))) {\n              userCountTTL = Long.valueOf((String) map.get(JsonKey.USER_COUNT_TTL));\n            }\n          } catch (Exception ex) {\n            ProjectLogger.log(\n                \"Exception occurred while converting string to long \"\n                    + (String) map.get(JsonKey.USER_COUNT_TTL));\n            userCountTTL = 0L;\n          }\n          ProjectLogger.log(\"userCountTTL == \" + userCountTTL);\n          Long currentTime = System.currentTimeMillis();\n          Long diff = currentTime - userCountTTL;\n          int hours = (int) (diff / (1000 * 60 * 60));\n          if (hours >= 24) {\n            ProjectLogger.log(\"Updating user count for LocnId \" + locationId);\n            int usrCount = getUserCount(locationId);\n            Map<String, Object> reqMap = new HashMap<>();\n            reqMap.put(JsonKey.ID, locationId);\n            reqMap.put(JsonKey.USER_COUNT, usrCount);\n            reqMap.put(JsonKey.USER_COUNT_TTL, String.valueOf(System.currentTimeMillis()));\n            cassandraOperation.updateRecord(\n                locDbInfo.getKeySpace(), locDbInfo.getTableName(), reqMap);\n          }\n        }\n      }\n      ProjectLogger.log(\"Processing end user count update \");\n    }\n  }", "signature": "void updateUserCount(Request actorMessage)", "full_signature": "private void updateUserCount(Request actorMessage)", "class_method_signature": "BackGroundServiceActor.updateUserCount(Request actorMessage)", "testcase": false, "constructor": false, "invocations": ["log", "get", "get", "getRequest", "get", "getRequest", "log", "getRecordsByProperty", "getKeySpace", "getTableName", "get", "isEmpty", "get", "log", "get", "get", "log", "isBlank", "equalsIgnoreCase", "log", "getUserCount", "put", "put", "put", "valueOf", "currentTimeMillis", "updateRecord", "getKeySpace", "getTableName", "isBlank", "equalsIgnoreCase", "log", "isBlank", "get", "valueOf", "get", "log", "get", "log", "currentTimeMillis", "log", "getUserCount", "put", "put", "put", "valueOf", "currentTimeMillis", "updateRecord", "getKeySpace", "getTableName", "log"]}, "repository": {"repo_id": 96122408, "url": "https://github.com/project-sunbird/sunbird-lms-mw", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 5, "size": 15380, "license": "licensed"}}