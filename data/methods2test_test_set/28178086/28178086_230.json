{"test_class": {"identifier": "X11SpecificationTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/satoolkit/x11/X11SpecificationTest.java"}, "test_case": {"identifier": "testSetHendersonFilterLengthEvenNumber", "parameters": "()", "modifiers": "@Test(expected = X11Exception.class) public", "return": "void", "body": "@Test(expected = X11Exception.class)\n    public void testSetHendersonFilterLengthEvenNumber() {\n        X11Specification expected = new X11Specification();\n        expected.setHendersonFilterLength(12);\n    }", "signature": "void testSetHendersonFilterLengthEvenNumber()", "full_signature": "@Test(expected = X11Exception.class) public void testSetHendersonFilterLengthEvenNumber()", "class_method_signature": "X11SpecificationTest.testSetHendersonFilterLengthEvenNumber()", "testcase": true, "constructor": false, "invocations": ["setHendersonFilterLength"]}, "focal_class": {"identifier": "X11Specification", "superclass": "", "interfaces": "implements IProcSpecification, Cloneable", "fields": [{"original_string": "public static final double DEF_LSIGMA = 1.5, DEF_USIGMA = 2.5;", "modifier": "public static final", "type": "double", "declarator": "DEF_LSIGMA = 1.5", "var_name": "DEF_LSIGMA"}, {"original_string": "public static final int DEF_FCASTS = -1, DEF_BCASTS = 0;", "modifier": "public static final", "type": "int", "declarator": "DEF_FCASTS = -1", "var_name": "DEF_FCASTS"}, {"original_string": "public static final String MODE = \"mode\",\n            SEASONAL = \"seasonal\",\n            LSIGMA = \"lsigma\",\n            USIGMA = \"usigma\",\n            TRENDMA = \"trendma\",\n            SEASONALMA = \"seasonalma\",\n            BCASTS = \"bcasts\",\n            FCASTS = \"fcasts\",\n            CALENDARSIGMA = \"calendarsigma\",\n            SIGMAVEC = \"sigmavec\",\n            EXCLUDEFCAST = \"excludeforcast\",\n            BIAS = \"bias\";", "modifier": "public static final", "type": "String", "declarator": "MODE = \"mode\"", "var_name": "MODE"}, {"original_string": "private DecompositionMode mode_ = DecompositionMode.Undefined;", "modifier": "private", "type": "DecompositionMode", "declarator": "mode_ = DecompositionMode.Undefined", "var_name": "mode_"}, {"original_string": "private boolean seasonal_ = true;", "modifier": "private", "type": "boolean", "declarator": "seasonal_ = true", "var_name": "seasonal_"}, {"original_string": "private SeasonalFilterOption[] filters_;", "modifier": "private", "type": "SeasonalFilterOption[]", "declarator": "filters_", "var_name": "filters_"}, {"original_string": "private double lsigma_ = DEF_LSIGMA, usigma_ = DEF_USIGMA;", "modifier": "private", "type": "double", "declarator": "lsigma_ = DEF_LSIGMA", "var_name": "lsigma_"}, {"original_string": "private int henderson_ = 0;", "modifier": "private", "type": "int", "declarator": "henderson_ = 0", "var_name": "henderson_"}, {"original_string": "private int fcasts_ = DEF_FCASTS, bcasts_ = DEF_BCASTS;", "modifier": "private", "type": "int", "declarator": "fcasts_ = DEF_FCASTS", "var_name": "fcasts_"}, {"original_string": "private CalendarSigma calendarsigma_ = CalendarSigma.None;", "modifier": "private", "type": "CalendarSigma", "declarator": "calendarsigma_ = CalendarSigma.None", "var_name": "calendarsigma_"}, {"original_string": "private SigmavecOption[] sigmavec_;", "modifier": "private", "type": "SigmavecOption[]", "declarator": "sigmavec_", "var_name": "sigmavec_"}, {"original_string": "private boolean excludefcast_ = false;", "modifier": "private", "type": "boolean", "declarator": "excludefcast_ = false", "var_name": "excludefcast_"}, {"original_string": "private BiasCorrection bias = BiasCorrection.Legacy;", "modifier": "private", "type": "BiasCorrection", "declarator": "bias = BiasCorrection.Legacy", "var_name": "bias"}], "methods": [{"identifier": "fillDictionary", "parameters": "(String prefix, Map<String, Class> dic)", "modifiers": "public static", "return": "void", "signature": "void fillDictionary(String prefix, Map<String, Class> dic)", "full_signature": "public static void fillDictionary(String prefix, Map<String, Class> dic)", "class_method_signature": "X11Specification.fillDictionary(String prefix, Map<String, Class> dic)", "testcase": false, "constructor": false}, {"identifier": "getForecastHorizon", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getForecastHorizon()", "full_signature": "public int getForecastHorizon()", "class_method_signature": "X11Specification.getForecastHorizon()", "testcase": false, "constructor": false}, {"identifier": "getBackcastHorizon", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBackcastHorizon()", "full_signature": "public int getBackcastHorizon()", "class_method_signature": "X11Specification.getBackcastHorizon()", "testcase": false, "constructor": false}, {"identifier": "getHendersonFilterLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getHendersonFilterLength()", "full_signature": "public int getHendersonFilterLength()", "class_method_signature": "X11Specification.getHendersonFilterLength()", "testcase": false, "constructor": false}, {"identifier": "getCalendarSigma", "parameters": "()", "modifiers": "public", "return": "CalendarSigma", "signature": "CalendarSigma getCalendarSigma()", "full_signature": "public CalendarSigma getCalendarSigma()", "class_method_signature": "X11Specification.getCalendarSigma()", "testcase": false, "constructor": false}, {"identifier": "getSigmavec", "parameters": "()", "modifiers": "public", "return": "SigmavecOption[]", "signature": "SigmavecOption[] getSigmavec()", "full_signature": "public SigmavecOption[] getSigmavec()", "class_method_signature": "X11Specification.getSigmavec()", "testcase": false, "constructor": false}, {"identifier": "getLowerSigma", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLowerSigma()", "full_signature": "public double getLowerSigma()", "class_method_signature": "X11Specification.getLowerSigma()", "testcase": false, "constructor": false}, {"identifier": "getUpperSigma", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getUpperSigma()", "full_signature": "public double getUpperSigma()", "class_method_signature": "X11Specification.getUpperSigma()", "testcase": false, "constructor": false}, {"identifier": "getMode", "parameters": "()", "modifiers": "public", "return": "DecompositionMode", "signature": "DecompositionMode getMode()", "full_signature": "public DecompositionMode getMode()", "class_method_signature": "X11Specification.getMode()", "testcase": false, "constructor": false}, {"identifier": "getTrendFilter", "parameters": "()", "modifiers": "public", "return": "SymmetricFilter", "signature": "SymmetricFilter getTrendFilter()", "full_signature": "public SymmetricFilter getTrendFilter()", "class_method_signature": "X11Specification.getTrendFilter()", "testcase": false, "constructor": false}, {"identifier": "getSeasonalFilters", "parameters": "()", "modifiers": "public", "return": "SeasonalFilterOption[]", "signature": "SeasonalFilterOption[] getSeasonalFilters()", "full_signature": "public SeasonalFilterOption[] getSeasonalFilters()", "class_method_signature": "X11Specification.getSeasonalFilters()", "testcase": false, "constructor": false}, {"identifier": "isSeasonal", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSeasonal()", "full_signature": "public boolean isSeasonal()", "class_method_signature": "X11Specification.isSeasonal()", "testcase": false, "constructor": false}, {"identifier": "setSeasonal", "parameters": "(boolean seas)", "modifiers": "public", "return": "void", "signature": "void setSeasonal(boolean seas)", "full_signature": "public void setSeasonal(boolean seas)", "class_method_signature": "X11Specification.setSeasonal(boolean seas)", "testcase": false, "constructor": false}, {"identifier": "isExcludefcst", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExcludefcst()", "full_signature": "public boolean isExcludefcst()", "class_method_signature": "X11Specification.isExcludefcst()", "testcase": false, "constructor": false}, {"identifier": "setExcludefcst", "parameters": "(boolean excludefcst)", "modifiers": "public", "return": "void", "signature": "void setExcludefcst(boolean excludefcst)", "full_signature": "public void setExcludefcst(boolean excludefcst)", "class_method_signature": "X11Specification.setExcludefcst(boolean excludefcst)", "testcase": false, "constructor": false}, {"identifier": "isDefault", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDefault()", "full_signature": "public boolean isDefault()", "class_method_signature": "X11Specification.isDefault()", "testcase": false, "constructor": false}, {"identifier": "isAutoHenderson", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAutoHenderson()", "full_signature": "public boolean isAutoHenderson()", "class_method_signature": "X11Specification.isAutoHenderson()", "testcase": false, "constructor": false}, {"identifier": "setForecastHorizon", "parameters": "(int forecastsHorizon)", "modifiers": "public", "return": "void", "signature": "void setForecastHorizon(int forecastsHorizon)", "full_signature": "public void setForecastHorizon(int forecastsHorizon)", "class_method_signature": "X11Specification.setForecastHorizon(int forecastsHorizon)", "testcase": false, "constructor": false}, {"identifier": "setBackcastHorizon", "parameters": "(int backcastsHorizon)", "modifiers": "public", "return": "void", "signature": "void setBackcastHorizon(int backcastsHorizon)", "full_signature": "public void setBackcastHorizon(int backcastsHorizon)", "class_method_signature": "X11Specification.setBackcastHorizon(int backcastsHorizon)", "testcase": false, "constructor": false}, {"identifier": "setCalendarSigma", "parameters": "(CalendarSigma calendarsigma)", "modifiers": "public", "return": "void", "signature": "void setCalendarSigma(CalendarSigma calendarsigma)", "full_signature": "public void setCalendarSigma(CalendarSigma calendarsigma)", "class_method_signature": "X11Specification.setCalendarSigma(CalendarSigma calendarsigma)", "testcase": false, "constructor": false}, {"identifier": "setSigmavec", "parameters": "(SigmavecOption[] sigmavec)", "modifiers": "public", "return": "void", "signature": "void setSigmavec(SigmavecOption[] sigmavec)", "full_signature": "public void setSigmavec(SigmavecOption[] sigmavec)", "class_method_signature": "X11Specification.setSigmavec(SigmavecOption[] sigmavec)", "testcase": false, "constructor": false}, {"identifier": "setMode", "parameters": "(DecompositionMode mode)", "modifiers": "public", "return": "void", "signature": "void setMode(DecompositionMode mode)", "full_signature": "public void setMode(DecompositionMode mode)", "class_method_signature": "X11Specification.setMode(DecompositionMode mode)", "testcase": false, "constructor": false}, {"identifier": "setSigma", "parameters": "(double lsigma, double usigma)", "modifiers": "public", "return": "void", "signature": "void setSigma(double lsigma, double usigma)", "full_signature": "public void setSigma(double lsigma, double usigma)", "class_method_signature": "X11Specification.setSigma(double lsigma, double usigma)", "testcase": false, "constructor": false}, {"identifier": "setLowerSigma", "parameters": "(double lsigma)", "modifiers": "public", "return": "void", "signature": "void setLowerSigma(double lsigma)", "full_signature": "public void setLowerSigma(double lsigma)", "class_method_signature": "X11Specification.setLowerSigma(double lsigma)", "testcase": false, "constructor": false}, {"identifier": "setUpperSigma", "parameters": "(double usigma)", "modifiers": "public", "return": "void", "signature": "void setUpperSigma(double usigma)", "full_signature": "public void setUpperSigma(double usigma)", "class_method_signature": "X11Specification.setUpperSigma(double usigma)", "testcase": false, "constructor": false}, {"identifier": "setHendersonFilterLength", "parameters": "(int len)", "modifiers": "public", "return": "void", "signature": "void setHendersonFilterLength(int len)", "full_signature": "public void setHendersonFilterLength(int len)", "class_method_signature": "X11Specification.setHendersonFilterLength(int len)", "testcase": false, "constructor": false}, {"identifier": "setSeasonalFilters", "parameters": "(SeasonalFilterOption[] seasonalFilter)", "modifiers": "public", "return": "void", "signature": "void setSeasonalFilters(SeasonalFilterOption[] seasonalFilter)", "full_signature": "public void setSeasonalFilters(SeasonalFilterOption[] seasonalFilter)", "class_method_signature": "X11Specification.setSeasonalFilters(SeasonalFilterOption[] seasonalFilter)", "testcase": false, "constructor": false}, {"identifier": "setSeasonalFilter", "parameters": "(SeasonalFilterOption seasonalFilter)", "modifiers": "public", "return": "void", "signature": "void setSeasonalFilter(SeasonalFilterOption seasonalFilter)", "full_signature": "public void setSeasonalFilter(SeasonalFilterOption seasonalFilter)", "class_method_signature": "X11Specification.setSeasonalFilter(SeasonalFilterOption seasonalFilter)", "testcase": false, "constructor": false}, {"identifier": "getBiasCorrection", "parameters": "()", "modifiers": "public", "return": "BiasCorrection", "signature": "BiasCorrection getBiasCorrection()", "full_signature": "public BiasCorrection getBiasCorrection()", "class_method_signature": "X11Specification.getBiasCorrection()", "testcase": false, "constructor": false}, {"identifier": "setBiasCorrection", "parameters": "(BiasCorrection bias)", "modifiers": "public", "return": "void", "signature": "void setBiasCorrection(BiasCorrection bias)", "full_signature": "public void setBiasCorrection(BiasCorrection bias)", "class_method_signature": "X11Specification.setBiasCorrection(BiasCorrection bias)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "X11Specification", "signature": "X11Specification clone()", "full_signature": "@Override public X11Specification clone()", "class_method_signature": "X11Specification.clone()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "X11Specification.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(X11Specification spec)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(X11Specification spec)", "full_signature": "private boolean equals(X11Specification spec)", "class_method_signature": "X11Specification.equals(X11Specification spec)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "X11Specification.hashCode()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(boolean verbose)", "modifiers": "@Override public", "return": "InformationSet", "signature": "InformationSet write(boolean verbose)", "full_signature": "@Override public InformationSet write(boolean verbose)", "class_method_signature": "X11Specification.write(boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InformationSet info)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(InformationSet info)", "full_signature": "@Override public boolean read(InformationSet info)", "class_method_signature": "X11Specification.read(InformationSet info)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/satoolkit/x11/X11Specification.java"}, "focal_method": {"identifier": "setHendersonFilterLength", "parameters": "(int len)", "modifiers": "public", "return": "void", "body": "public void setHendersonFilterLength(int len) {\n        if (len < 0 || len > 101 || (len != 0 && len % 2 == 0)) {\n            throw new X11Exception(\"Invalid henderson length\");\n        }\n        henderson_ = len;\n    }", "signature": "void setHendersonFilterLength(int len)", "full_signature": "public void setHendersonFilterLength(int len)", "class_method_signature": "X11Specification.setHendersonFilterLength(int len)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}