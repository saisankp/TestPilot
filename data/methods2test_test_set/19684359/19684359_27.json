{"test_class": {"identifier": "LoggingMediaHttpUploaderProgressListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger jdkLoggerForConfig =\n      Logger.getLogger(LoggingMediaHttpUploaderProgressListener.class.getCanonicalName());", "modifier": "private static final", "type": "Logger", "declarator": "jdkLoggerForConfig =\n      Logger.getLogger(LoggingMediaHttpUploaderProgressListener.class.getCanonicalName())", "var_name": "jdkLoggerForConfig"}, {"original_string": "private static final Formatter LOG_FORMATTER =\n      new Formatter() {\n        @Override\n        public String format(LogRecord record) {\n          return record.getLevel() + \": \" + record.getMessage();\n        }\n      };", "modifier": "private static final", "type": "Formatter", "declarator": "LOG_FORMATTER =\n      new Formatter() {\n        @Override\n        public String format(LogRecord record) {\n          return record.getLevel() + \": \" + record.getMessage();\n        }\n      }", "var_name": "LOG_FORMATTER"}, {"original_string": "private LoggingMediaHttpUploaderProgressListener listener;", "modifier": "private", "type": "LoggingMediaHttpUploaderProgressListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "private ByteArrayOutputStream logCapturingStream;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "logCapturingStream", "var_name": "logCapturingStream"}, {"original_string": "private StreamHandler customLogHandler;", "modifier": "private", "type": "StreamHandler", "declarator": "customLogHandler", "var_name": "customLogHandler"}], "file": "util/src/test/java/com/google/cloud/hadoop/util/LoggingMediaHttpUploaderProgressListenerTest.java"}, "test_case": {"identifier": "testLoggingCompletion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLoggingCompletion() {\n    listener.progressChanged(UploadState.MEDIA_COMPLETE, 104857600L, 60000L);\n    assertThat(getTestCapturedLog()).isEqualTo(\"FINE: Finished Uploading: NAME\");\n  }", "signature": "void testLoggingCompletion()", "full_signature": "@Test public void testLoggingCompletion()", "class_method_signature": "LoggingMediaHttpUploaderProgressListenerTest.testLoggingCompletion()", "testcase": true, "constructor": false, "invocations": ["progressChanged", "isEqualTo", "assertThat", "getTestCapturedLog"]}, "focal_class": {"identifier": "LoggingMediaHttpUploaderProgressListener", "superclass": "", "interfaces": "implements MediaHttpUploaderProgressListener", "fields": [{"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}, {"original_string": "private static final double BYTES_IN_MB = 1024 * 1024;", "modifier": "private static final", "type": "double", "declarator": "BYTES_IN_MB = 1024 * 1024", "var_name": "BYTES_IN_MB"}, {"original_string": "private final long minLoggingInterval;", "modifier": "private final", "type": "long", "declarator": "minLoggingInterval", "var_name": "minLoggingInterval"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private long startTime;", "modifier": "private", "type": "long", "declarator": "startTime", "var_name": "startTime"}, {"original_string": "private long prevTime;", "modifier": "private", "type": "long", "declarator": "prevTime", "var_name": "prevTime"}, {"original_string": "private long prevUploadedBytes;", "modifier": "private", "type": "long", "declarator": "prevUploadedBytes", "var_name": "prevUploadedBytes"}], "methods": [{"identifier": "LoggingMediaHttpUploaderProgressListener", "parameters": "(String name, long minLoggingInterval)", "modifiers": "public", "return": "", "signature": " LoggingMediaHttpUploaderProgressListener(String name, long minLoggingInterval)", "full_signature": "public  LoggingMediaHttpUploaderProgressListener(String name, long minLoggingInterval)", "class_method_signature": "LoggingMediaHttpUploaderProgressListener.LoggingMediaHttpUploaderProgressListener(String name, long minLoggingInterval)", "testcase": false, "constructor": true}, {"identifier": "progressChanged", "parameters": "(MediaHttpUploader uploader)", "modifiers": "@Override public", "return": "void", "signature": "void progressChanged(MediaHttpUploader uploader)", "full_signature": "@Override public void progressChanged(MediaHttpUploader uploader)", "class_method_signature": "LoggingMediaHttpUploaderProgressListener.progressChanged(MediaHttpUploader uploader)", "testcase": false, "constructor": false}, {"identifier": "progressChanged", "parameters": "(UploadState uploadState, long bytesUploaded, long currentTime)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void progressChanged(UploadState uploadState, long bytesUploaded, long currentTime)", "full_signature": "@VisibleForTesting void progressChanged(UploadState uploadState, long bytesUploaded, long currentTime)", "class_method_signature": "LoggingMediaHttpUploaderProgressListener.progressChanged(UploadState uploadState, long bytesUploaded, long currentTime)", "testcase": false, "constructor": false}], "file": "util/src/main/java/com/google/cloud/hadoop/util/LoggingMediaHttpUploaderProgressListener.java"}, "focal_method": {"identifier": "progressChanged", "parameters": "(MediaHttpUploader uploader)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void progressChanged(MediaHttpUploader uploader) throws IOException {\n    progressChanged(\n        uploader.getUploadState(), uploader.getNumBytesUploaded(), System.currentTimeMillis());\n  }", "signature": "void progressChanged(MediaHttpUploader uploader)", "full_signature": "@Override public void progressChanged(MediaHttpUploader uploader)", "class_method_signature": "LoggingMediaHttpUploaderProgressListener.progressChanged(MediaHttpUploader uploader)", "testcase": false, "constructor": false, "invocations": ["progressChanged", "getUploadState", "getNumBytesUploaded", "currentTimeMillis"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}