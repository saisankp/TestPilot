{"test_class": {"identifier": "PaletteTriggerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int VIBRANT = ColourUtils.rgb(ColourUtils.HEX_255, ColourUtils.HEX_000, ColourUtils.HEX_000);", "modifier": "private static final", "type": "int", "declarator": "VIBRANT = ColourUtils.rgb(ColourUtils.HEX_255, ColourUtils.HEX_000, ColourUtils.HEX_000)", "var_name": "VIBRANT"}, {"original_string": "private static final int LIGHT_VIBRANT = ColourUtils.rgb(ColourUtils.HEX_000, ColourUtils.HEX_255, ColourUtils.HEX_000);", "modifier": "private static final", "type": "int", "declarator": "LIGHT_VIBRANT = ColourUtils.rgb(ColourUtils.HEX_000, ColourUtils.HEX_255, ColourUtils.HEX_000)", "var_name": "LIGHT_VIBRANT"}, {"original_string": "private static final int DARK_VIBRANT = ColourUtils.rgb(ColourUtils.HEX_000, ColourUtils.HEX_000, ColourUtils.HEX_255);", "modifier": "private static final", "type": "int", "declarator": "DARK_VIBRANT = ColourUtils.rgb(ColourUtils.HEX_000, ColourUtils.HEX_000, ColourUtils.HEX_255)", "var_name": "DARK_VIBRANT"}, {"original_string": "private static final int MUTED = ColourUtils.rgb(ColourUtils.HEX_255, ColourUtils.HEX_255, ColourUtils.HEX_000);", "modifier": "private static final", "type": "int", "declarator": "MUTED = ColourUtils.rgb(ColourUtils.HEX_255, ColourUtils.HEX_255, ColourUtils.HEX_000)", "var_name": "MUTED"}, {"original_string": "private static final int LIGHT_MUTED = ColourUtils.rgb(ColourUtils.HEX_255, ColourUtils.HEX_000, ColourUtils.HEX_255);", "modifier": "private static final", "type": "int", "declarator": "LIGHT_MUTED = ColourUtils.rgb(ColourUtils.HEX_255, ColourUtils.HEX_000, ColourUtils.HEX_255)", "var_name": "LIGHT_MUTED"}, {"original_string": "private static final int DARK_MUTED = ColourUtils.rgb(ColourUtils.HEX_000, ColourUtils.HEX_255, ColourUtils.HEX_255);", "modifier": "private static final", "type": "int", "declarator": "DARK_MUTED = ColourUtils.rgb(ColourUtils.HEX_000, ColourUtils.HEX_255, ColourUtils.HEX_255)", "var_name": "DARK_MUTED"}, {"original_string": "private PaletteTrigger paletteTrigger;", "modifier": "private", "type": "PaletteTrigger", "declarator": "paletteTrigger", "var_name": "paletteTrigger"}], "file": "prism-palette/src/test/java/com/stylingandroid/prism/palette/PaletteTriggerTest.java"}, "test_case": {"identifier": "givenADummyPaletteDarkVibrantColourIsCorrect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void givenADummyPaletteDarkVibrantColourIsCorrect() {\n        Filter filter = paletteTrigger.getDarkVibrantFilter();\n        int output = filter.filter(null);\n        assertThat(output).isEqualTo(DARK_VIBRANT);\n    }", "signature": "void givenADummyPaletteDarkVibrantColourIsCorrect()", "full_signature": "@Test public void givenADummyPaletteDarkVibrantColourIsCorrect()", "class_method_signature": "PaletteTriggerTest.givenADummyPaletteDarkVibrantColourIsCorrect()", "testcase": true, "constructor": false, "invocations": ["getDarkVibrantFilter", "filter", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "PaletteTrigger", "superclass": "extends BaseTrigger", "interfaces": "", "fields": [{"original_string": "private Palette palette;", "modifier": "private", "type": "Palette", "declarator": "palette", "var_name": "palette"}, {"original_string": "private Palette.PaletteAsyncListener listener = new Palette.PaletteAsyncListener() {\n        @Override\n        public void onGenerated(Palette newPalette) {\n            setPalette(newPalette);\n        }\n    };", "modifier": "private", "type": "Palette.PaletteAsyncListener", "declarator": "listener = new Palette.PaletteAsyncListener() {\n        @Override\n        public void onGenerated(Palette newPalette) {\n            setPalette(newPalette);\n        }\n    }", "var_name": "listener"}, {"original_string": "private GenericFilter<Palette.Swatch, Integer> rgbColour = new GenericFilter<Palette.Swatch, Integer>() {\n        @Override\n        public Integer filter(Palette.Swatch colour) {\n            if (colour == null) {\n                return Color.TRANSPARENT;\n            }\n            return colour.getRgb();\n        }\n    };", "modifier": "private", "type": "GenericFilter<Palette.Swatch, Integer>", "declarator": "rgbColour = new GenericFilter<Palette.Swatch, Integer>() {\n        @Override\n        public Integer filter(Palette.Swatch colour) {\n            if (colour == null) {\n                return Color.TRANSPARENT;\n            }\n            return colour.getRgb();\n        }\n    }", "var_name": "rgbColour"}, {"original_string": "private GenericFilter<Palette.Swatch, Integer> titleTextColour = new GenericFilter<Palette.Swatch, Integer>() {\n        @Override\n        public Integer filter(Palette.Swatch colour) {\n            if (colour == null) {\n                return Color.TRANSPARENT;\n            }\n            return colour.getTitleTextColor();\n        }\n    };", "modifier": "private", "type": "GenericFilter<Palette.Swatch, Integer>", "declarator": "titleTextColour = new GenericFilter<Palette.Swatch, Integer>() {\n        @Override\n        public Integer filter(Palette.Swatch colour) {\n            if (colour == null) {\n                return Color.TRANSPARENT;\n            }\n            return colour.getTitleTextColor();\n        }\n    }", "var_name": "titleTextColour"}, {"original_string": "private GenericFilter<Palette.Swatch, Integer> bodyTextColour = new GenericFilter<Palette.Swatch, Integer>() {\n        @Override\n        public Integer filter(Palette.Swatch colour) {\n            if (colour == null) {\n                return Color.TRANSPARENT;\n            }\n            return colour.getBodyTextColor();\n        }\n    };", "modifier": "private", "type": "GenericFilter<Palette.Swatch, Integer>", "declarator": "bodyTextColour = new GenericFilter<Palette.Swatch, Integer>() {\n        @Override\n        public Integer filter(Palette.Swatch colour) {\n            if (colour == null) {\n                return Color.TRANSPARENT;\n            }\n            return colour.getBodyTextColor();\n        }\n    }", "var_name": "bodyTextColour"}], "methods": [{"identifier": "PaletteTrigger", "parameters": "()", "modifiers": "public", "return": "", "signature": " PaletteTrigger()", "full_signature": "public  PaletteTrigger()", "class_method_signature": "PaletteTrigger.PaletteTrigger()", "testcase": false, "constructor": true}, {"identifier": "setBitmap", "parameters": "(@NonNull Bitmap bitmap)", "modifiers": "public", "return": "void", "signature": "void setBitmap(@NonNull Bitmap bitmap)", "full_signature": "public void setBitmap(@NonNull Bitmap bitmap)", "class_method_signature": "PaletteTrigger.setBitmap(@NonNull Bitmap bitmap)", "testcase": false, "constructor": false}, {"identifier": "getVibrantFilter", "parameters": "()", "modifiers": "public", "return": "Filter", "signature": "Filter getVibrantFilter()", "full_signature": "public Filter getVibrantFilter()", "class_method_signature": "PaletteTrigger.getVibrantFilter()", "testcase": false, "constructor": false}, {"identifier": "getVibrantFilter", "parameters": "(GenericFilter<Palette.Swatch, Integer> nextFilter)", "modifiers": "public", "return": "Filter", "signature": "Filter getVibrantFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "full_signature": "public Filter getVibrantFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "class_method_signature": "PaletteTrigger.getVibrantFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "testcase": false, "constructor": false}, {"identifier": "getLightVibrantFilter", "parameters": "()", "modifiers": "public", "return": "Filter", "signature": "Filter getLightVibrantFilter()", "full_signature": "public Filter getLightVibrantFilter()", "class_method_signature": "PaletteTrigger.getLightVibrantFilter()", "testcase": false, "constructor": false}, {"identifier": "getLightVibrantFilter", "parameters": "(GenericFilter<Palette.Swatch, Integer> nextFilter)", "modifiers": "public", "return": "Filter", "signature": "Filter getLightVibrantFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "full_signature": "public Filter getLightVibrantFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "class_method_signature": "PaletteTrigger.getLightVibrantFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "testcase": false, "constructor": false}, {"identifier": "getDarkVibrantFilter", "parameters": "()", "modifiers": "public", "return": "Filter", "signature": "Filter getDarkVibrantFilter()", "full_signature": "public Filter getDarkVibrantFilter()", "class_method_signature": "PaletteTrigger.getDarkVibrantFilter()", "testcase": false, "constructor": false}, {"identifier": "getDarkVibrantFilter", "parameters": "(GenericFilter<Palette.Swatch, Integer> nextFilter)", "modifiers": "public", "return": "Filter", "signature": "Filter getDarkVibrantFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "full_signature": "public Filter getDarkVibrantFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "class_method_signature": "PaletteTrigger.getDarkVibrantFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "testcase": false, "constructor": false}, {"identifier": "getMutedFilter", "parameters": "()", "modifiers": "public", "return": "Filter", "signature": "Filter getMutedFilter()", "full_signature": "public Filter getMutedFilter()", "class_method_signature": "PaletteTrigger.getMutedFilter()", "testcase": false, "constructor": false}, {"identifier": "getMutedFilter", "parameters": "(GenericFilter<Palette.Swatch, Integer> nextFilter)", "modifiers": "public", "return": "Filter", "signature": "Filter getMutedFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "full_signature": "public Filter getMutedFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "class_method_signature": "PaletteTrigger.getMutedFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "testcase": false, "constructor": false}, {"identifier": "getLightMutedFilter", "parameters": "()", "modifiers": "public", "return": "Filter", "signature": "Filter getLightMutedFilter()", "full_signature": "public Filter getLightMutedFilter()", "class_method_signature": "PaletteTrigger.getLightMutedFilter()", "testcase": false, "constructor": false}, {"identifier": "getLightMutedFilter", "parameters": "(GenericFilter<Palette.Swatch, Integer> nextFilter)", "modifiers": "public", "return": "Filter", "signature": "Filter getLightMutedFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "full_signature": "public Filter getLightMutedFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "class_method_signature": "PaletteTrigger.getLightMutedFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "testcase": false, "constructor": false}, {"identifier": "getDarkMutedFilter", "parameters": "()", "modifiers": "public", "return": "Filter", "signature": "Filter getDarkMutedFilter()", "full_signature": "public Filter getDarkMutedFilter()", "class_method_signature": "PaletteTrigger.getDarkMutedFilter()", "testcase": false, "constructor": false}, {"identifier": "getDarkMutedFilter", "parameters": "(GenericFilter<Palette.Swatch, Integer> nextFilter)", "modifiers": "public", "return": "Filter", "signature": "Filter getDarkMutedFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "full_signature": "public Filter getDarkMutedFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "class_method_signature": "PaletteTrigger.getDarkMutedFilter(GenericFilter<Palette.Swatch, Integer> nextFilter)", "testcase": false, "constructor": false}, {"identifier": "getColour", "parameters": "()", "modifiers": "public", "return": "GenericFilter<Palette.Swatch, Integer>", "signature": "GenericFilter<Palette.Swatch, Integer> getColour()", "full_signature": "public GenericFilter<Palette.Swatch, Integer> getColour()", "class_method_signature": "PaletteTrigger.getColour()", "testcase": false, "constructor": false}, {"identifier": "getColor", "parameters": "()", "modifiers": "public", "return": "GenericFilter<Palette.Swatch, Integer>", "signature": "GenericFilter<Palette.Swatch, Integer> getColor()", "full_signature": "public GenericFilter<Palette.Swatch, Integer> getColor()", "class_method_signature": "PaletteTrigger.getColor()", "testcase": false, "constructor": false}, {"identifier": "getTitleTextColour", "parameters": "()", "modifiers": "public", "return": "GenericFilter<Palette.Swatch, Integer>", "signature": "GenericFilter<Palette.Swatch, Integer> getTitleTextColour()", "full_signature": "public GenericFilter<Palette.Swatch, Integer> getTitleTextColour()", "class_method_signature": "PaletteTrigger.getTitleTextColour()", "testcase": false, "constructor": false}, {"identifier": "getTitleTextColor", "parameters": "()", "modifiers": "public", "return": "GenericFilter<Palette.Swatch, Integer>", "signature": "GenericFilter<Palette.Swatch, Integer> getTitleTextColor()", "full_signature": "public GenericFilter<Palette.Swatch, Integer> getTitleTextColor()", "class_method_signature": "PaletteTrigger.getTitleTextColor()", "testcase": false, "constructor": false}, {"identifier": "getBodyTextColour", "parameters": "()", "modifiers": "public", "return": "GenericFilter<Palette.Swatch, Integer>", "signature": "GenericFilter<Palette.Swatch, Integer> getBodyTextColour()", "full_signature": "public GenericFilter<Palette.Swatch, Integer> getBodyTextColour()", "class_method_signature": "PaletteTrigger.getBodyTextColour()", "testcase": false, "constructor": false}, {"identifier": "getBodyTextColor", "parameters": "()", "modifiers": "public", "return": "GenericFilter<Palette.Swatch, Integer>", "signature": "GenericFilter<Palette.Swatch, Integer> getBodyTextColor()", "full_signature": "public GenericFilter<Palette.Swatch, Integer> getBodyTextColor()", "class_method_signature": "PaletteTrigger.getBodyTextColor()", "testcase": false, "constructor": false}, {"identifier": "getPalette", "parameters": "()", "modifiers": "", "return": "Palette", "signature": "Palette getPalette()", "full_signature": " Palette getPalette()", "class_method_signature": "PaletteTrigger.getPalette()", "testcase": false, "constructor": false}, {"identifier": "setPalette", "parameters": "(Palette palette)", "modifiers": "", "return": "void", "signature": "void setPalette(Palette palette)", "full_signature": " void setPalette(Palette palette)", "class_method_signature": "PaletteTrigger.setPalette(Palette palette)", "testcase": false, "constructor": false}], "file": "prism-palette/src/main/java/com/stylingandroid/prism/palette/PaletteTrigger.java"}, "focal_method": {"identifier": "getDarkVibrantFilter", "parameters": "()", "modifiers": "public", "return": "Filter", "body": "public Filter getDarkVibrantFilter() {\n        return getDarkVibrantFilter(getColour());\n    }", "signature": "Filter getDarkVibrantFilter()", "full_signature": "public Filter getDarkVibrantFilter()", "class_method_signature": "PaletteTrigger.getDarkVibrantFilter()", "testcase": false, "constructor": false, "invocations": ["getDarkVibrantFilter", "getColour"]}, "repository": {"repo_id": 37817790, "url": "https://github.com/StylingAndroid/Prism", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 669, "size": 470, "license": "licensed"}}