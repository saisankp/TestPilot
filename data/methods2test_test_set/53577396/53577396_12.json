{"test_class": {"identifier": "SccpExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Router router = null;", "modifier": "private", "type": "Router", "declarator": "router = null", "var_name": "router"}, {"original_string": "private SccpResource sccpResource = null;", "modifier": "private", "type": "SccpResource", "declarator": "sccpResource = null", "var_name": "sccpResource"}, {"original_string": "private SccpStackImpl sccpStack = null;", "modifier": "private", "type": "SccpStackImpl", "declarator": "sccpStack = null", "var_name": "sccpStack"}, {"original_string": "private SccpExecutor sccpExecutor = null;", "modifier": "private", "type": "SccpExecutor", "declarator": "sccpExecutor = null", "var_name": "sccpExecutor"}], "file": "sccp/sccp-impl/src/test/java/org/mobicents/protocols/ss7/sccp/impl/oam/SccpExecutorTest.java"}, "test_case": {"identifier": "testConcernedSpc", "parameters": "()", "modifiers": "@Test(groups = { \"oam\", \"functional.mgmt\" }) public", "return": "void", "body": "@Test(groups = { \"oam\", \"functional.mgmt\" })\n    public void testConcernedSpc() {\n\n        String rspCmd = \"sccp csp create 3 21\";\n        String res = this.sccpExecutor.execute(rspCmd.split(\" \"));\n        assertEquals(this.sccpResource.getConcernedSpcs().size(), 1);\n        ConcernedSignalingPointCode cspc = this.sccpResource.getConcernedSpc(3);\n        assertEquals(cspc.getRemoteSpc(), 21);\n\n        // Show test\n        rspCmd = \"sccp csp show\";\n        res = this.sccpExecutor.execute(rspCmd.split(\" \"));\n        assertEquals(res, \"key=3  rsp=21\\n\");\n\n        rspCmd = \"sccp csp create 3 22\";\n        res = this.sccpExecutor.execute(rspCmd.split(\" \"));\n        assertTrue(res.equals(SccpOAMMessage.CS_ALREADY_EXIST),res);\n        assertEquals(this.sccpResource.getConcernedSpcs().size(), 1);\n        cspc = this.sccpResource.getConcernedSpc(3);\n        assertEquals(cspc.getRemoteSpc(), 21);\n\n        rspCmd = \"sccp csp modify 3 23\";\n        res = this.sccpExecutor.execute(rspCmd.split(\" \"));\n        assertEquals(this.sccpResource.getConcernedSpcs().size(), 1);\n        cspc = this.sccpResource.getConcernedSpc(3);\n        assertEquals(cspc.getRemoteSpc(), 23);\n\n        rspCmd = \"sccp csp modify 33 24\";\n        res = this.sccpExecutor.execute(rspCmd.split(\" \"));\n        assertTrue(res.equals(String.format(SccpOAMMessage.CS_DOESNT_EXIST, this.sccpStack.getName())));\n        assertEquals(this.sccpResource.getConcernedSpcs().size(), 1);\n        cspc = this.sccpResource.getConcernedSpc(3);\n        assertEquals(cspc.getRemoteSpc(), 23);\n\n        rspCmd = \"sccp csp show 3\";\n        res = this.sccpExecutor.execute(rspCmd.split(\" \"));\n\n        rspCmd = \"sccp csp show\";\n        res = this.sccpExecutor.execute(rspCmd.split(\" \"));\n\n        rspCmd = \"sccp csp delete 33\";\n        res = this.sccpExecutor.execute(rspCmd.split(\" \"));\n        assertTrue(res.equals(String.format(SccpOAMMessage.CS_DOESNT_EXIST, this.sccpStack.getName())));\n        assertEquals(this.sccpResource.getConcernedSpcs().size(), 1);\n        cspc = this.sccpResource.getConcernedSpc(3);\n        assertEquals(cspc.getRemoteSpc(), 23);\n\n        rspCmd = \"sccp csp delete 3\";\n        res = this.sccpExecutor.execute(rspCmd.split(\" \"));\n        assertEquals(this.sccpResource.getConcernedSpcs().size(), 0);\n    }", "signature": "void testConcernedSpc()", "full_signature": "@Test(groups = { \"oam\", \"functional.mgmt\" }) public void testConcernedSpc()", "class_method_signature": "SccpExecutorTest.testConcernedSpc()", "testcase": true, "constructor": false, "invocations": ["execute", "split", "assertEquals", "size", "getConcernedSpcs", "getConcernedSpc", "assertEquals", "getRemoteSpc", "execute", "split", "assertEquals", "execute", "split", "assertTrue", "equals", "assertEquals", "size", "getConcernedSpcs", "getConcernedSpc", "assertEquals", "getRemoteSpc", "execute", "split", "assertEquals", "size", "getConcernedSpcs", "getConcernedSpc", "assertEquals", "getRemoteSpc", "execute", "split", "assertTrue", "equals", "format", "getName", "assertEquals", "size", "getConcernedSpcs", "getConcernedSpc", "assertEquals", "getRemoteSpc", "execute", "split", "execute", "split", "execute", "split", "assertTrue", "equals", "format", "getName", "assertEquals", "size", "getConcernedSpcs", "getConcernedSpc", "assertEquals", "getRemoteSpc", "execute", "split", "assertEquals", "size", "getConcernedSpcs"]}, "focal_class": {"identifier": "SccpExecutor", "superclass": "", "interfaces": "implements ShellExecutor", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(SccpExecutor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(SccpExecutor.class)", "var_name": "logger"}, {"original_string": "private FastMap<String, SccpStackImpl> sccpStacks = new FastMap<String, SccpStackImpl>();", "modifier": "private", "type": "FastMap<String, SccpStackImpl>", "declarator": "sccpStacks = new FastMap<String, SccpStackImpl>()", "var_name": "sccpStacks"}, {"original_string": "private SccpStackImpl sccpStack = null;", "modifier": "private", "type": "SccpStackImpl", "declarator": "sccpStack = null", "var_name": "sccpStack"}], "methods": [{"identifier": "SccpExecutor", "parameters": "()", "modifiers": "public", "return": "", "signature": " SccpExecutor()", "full_signature": "public  SccpExecutor()", "class_method_signature": "SccpExecutor.SccpExecutor()", "testcase": false, "constructor": true}, {"identifier": "setSccpStacks", "parameters": "(Map<String, SccpStackImpl> sccpStacksTemp)", "modifiers": "public", "return": "void", "signature": "void setSccpStacks(Map<String, SccpStackImpl> sccpStacksTemp)", "full_signature": "public void setSccpStacks(Map<String, SccpStackImpl> sccpStacksTemp)", "class_method_signature": "SccpExecutor.setSccpStacks(Map<String, SccpStackImpl> sccpStacksTemp)", "testcase": false, "constructor": false}, {"identifier": "setDefaultValue", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setDefaultValue()", "full_signature": "private void setDefaultValue()", "class_method_signature": "SccpExecutor.setDefaultValue()", "testcase": false, "constructor": false}, {"identifier": "getSccpStacks", "parameters": "()", "modifiers": "public", "return": "Map<String, SccpStackImpl>", "signature": "Map<String, SccpStackImpl> getSccpStacks()", "full_signature": "public Map<String, SccpStackImpl> getSccpStacks()", "class_method_signature": "SccpExecutor.getSccpStacks()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String[] options)", "modifiers": "public", "return": "String", "signature": "String execute(String[] options)", "full_signature": "public String execute(String[] options)", "class_method_signature": "SccpExecutor.execute(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageRss", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageRss(String[] options)", "full_signature": "private String manageRss(String[] options)", "class_method_signature": "SccpExecutor.manageRss(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageRsp", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageRsp(String[] options)", "full_signature": "private String manageRsp(String[] options)", "class_method_signature": "SccpExecutor.manageRsp(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageAddress", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageAddress(String[] options)", "full_signature": "private String manageAddress(String[] options)", "class_method_signature": "SccpExecutor.manageAddress(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageRule(String[] options)", "full_signature": "private String manageRule(String[] options)", "class_method_signature": "SccpExecutor.manageRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "createRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String createRule(String[] options)", "full_signature": "private String createRule(String[] options)", "class_method_signature": "SccpExecutor.createRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "modifyRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String modifyRule(String[] options)", "full_signature": "private String modifyRule(String[] options)", "class_method_signature": "SccpExecutor.modifyRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "deleteRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String deleteRule(String[] options)", "full_signature": "private String deleteRule(String[] options)", "class_method_signature": "SccpExecutor.deleteRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "showRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String showRule(String[] options)", "full_signature": "private String showRule(String[] options)", "class_method_signature": "SccpExecutor.showRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "createAddress", "parameters": "(String[] options, int index, boolean isRule)", "modifiers": "private", "return": "SccpAddress", "signature": "SccpAddress createAddress(String[] options, int index, boolean isRule)", "full_signature": "private SccpAddress createAddress(String[] options, int index, boolean isRule)", "class_method_signature": "SccpExecutor.createAddress(String[] options, int index, boolean isRule)", "testcase": false, "constructor": false}, {"identifier": "manageLmr", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageLmr(String[] options)", "full_signature": "private String manageLmr(String[] options)", "class_method_signature": "SccpExecutor.manageLmr(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageSap", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageSap(String[] options)", "full_signature": "private String manageSap(String[] options)", "class_method_signature": "SccpExecutor.manageSap(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageDest", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageDest(String[] options)", "full_signature": "private String manageDest(String[] options)", "class_method_signature": "SccpExecutor.manageDest(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageConcernedSpc", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageConcernedSpc(String[] options)", "full_signature": "private String manageConcernedSpc(String[] options)", "class_method_signature": "SccpExecutor.manageConcernedSpc(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageSet", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageSet(String[] options)", "full_signature": "private String manageSet(String[] options)", "class_method_signature": "SccpExecutor.manageSet(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageGet", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageGet(String[] options)", "full_signature": "private String manageGet(String[] options)", "class_method_signature": "SccpExecutor.manageGet(String[] options)", "testcase": false, "constructor": false}, {"identifier": "handles", "parameters": "(String command)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handles(String command)", "full_signature": "@Override public boolean handles(String command)", "class_method_signature": "SccpExecutor.handles(String command)", "testcase": false, "constructor": false}], "file": "sccp/sccp-impl/src/main/java/org/mobicents/protocols/ss7/sccp/impl/oam/SccpExecutor.java"}, "focal_method": {"identifier": "execute", "parameters": "(String[] options)", "modifiers": "public", "return": "String", "body": "public String execute(String[] options) {\n        if (this.sccpStacks.size() == 0) {\n            logger.warn(\"SCCP stack not set. Command will not be executed \");\n            return SccpOAMMessage.SERVER_ERROR;\n        }\n\n        // Atleast 1 option is passed?\n        if (options == null || options.length < 2) {\n            return SccpOAMMessage.INVALID_COMMAND;\n        }\n\n        String firstOption = options[1];\n\n        if (firstOption == null) {\n            return SccpOAMMessage.INVALID_COMMAND;\n        }\n\n        try {\n            if (firstOption.equals(\"rule\")) {\n                return this.manageRule(options);\n            } else if (firstOption.equals(\"address\")) {\n                return this.manageAddress(options);\n            } else if (firstOption.equals(\"rsp\")) {\n                return this.manageRsp(options);\n            } else if (firstOption.equals(\"rss\")) {\n                return this.manageRss(options);\n            } else if (firstOption.equals(\"lmr\")) {\n                return this.manageLmr(options);\n            } else if (firstOption.equals(\"sap\")) {\n                return this.manageSap(options);\n            } else if (firstOption.equals(\"dest\")) {\n                return this.manageDest(options);\n            } else if (firstOption.equals(\"csp\")) {\n                return this.manageConcernedSpc(options);\n            } else if (firstOption.equals(\"set\")) {\n                return this.manageSet(options);\n            } else if (firstOption.equals(\"get\")) {\n                return this.manageGet(options);\n            }\n            // } catch (Exception e) {\n            // logger.error(String.format(\"Error while executing comand %s\", Arrays.toString(options)), e);\n            // return e.getMessage();\n        } catch (Throwable t) {\n            logger.error(String.format(\"Error while executing comand %s\", Arrays.toString(options)), t);\n            return t.getMessage();\n        }\n\n        return SccpOAMMessage.INVALID_COMMAND;\n    }", "signature": "String execute(String[] options)", "full_signature": "public String execute(String[] options)", "class_method_signature": "SccpExecutor.execute(String[] options)", "testcase": false, "constructor": false, "invocations": ["size", "warn", "equals", "manageRule", "equals", "manageAddress", "equals", "manageRsp", "equals", "manageRss", "equals", "manageLmr", "equals", "manageSap", "equals", "manageDest", "equals", "manageConcernedSpc", "equals", "manageSet", "equals", "manageGet", "error", "format", "toString", "getMessage"]}, "repository": {"repo_id": 53577396, "url": "https://github.com/polarking/jss7-attack-simulator", "language": "Java", "is_fork": false, "fork_count": 27, "stargazer_count": 29, "size": 28339, "license": "licensed"}}