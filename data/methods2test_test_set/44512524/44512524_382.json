{"test_class": {"identifier": "AdaptiveStreamFeatureStatisticsTest", "superclass": "", "interfaces": "", "fields": [], "file": "storm/trident-ml/src/test/java/com/github/pmerienne/trident/ml/stats/AdaptiveStreamFeatureStatisticsTest.java"}, "test_case": {"identifier": "testUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUpdate() {\n\t\t// Given\n\t\tRandom random = new Random();\n\t\tdouble expectedMean = 4.0;\n\t\tdouble stdDev = 3.0;\n\t\tint size = 10000;\n\n\t\tdouble[] features = new double[size];\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tfeatures[i] = expectedMean + random.nextGaussian() * stdDev;\n\t\t}\n\n\t\t// When\n\t\tAdaptiveStreamFeatureStatistics statistics = new AdaptiveStreamFeatureStatistics(1000);\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tstatistics.update(features[i]);\n\t\t}\n\n\t\t// Then\n\t\tassertEquals(expectedMean, statistics.getMean(), 0.3);\n\t\tassertEquals(stdDev, statistics.getStdDev(), 0.3);\n\t}", "signature": "void testUpdate()", "full_signature": "@Test public void testUpdate()", "class_method_signature": "AdaptiveStreamFeatureStatisticsTest.testUpdate()", "testcase": true, "constructor": false, "invocations": ["nextGaussian", "update", "assertEquals", "getMean", "assertEquals", "getStdDev"]}, "focal_class": {"identifier": "AdaptiveStreamFeatureStatistics", "superclass": "", "interfaces": "implements StreamFeatureStatistics, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 6267199325838362436L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 6267199325838362436L", "var_name": "serialVersionUID"}, {"original_string": "private long maxSize = 1000;", "modifier": "private", "type": "long", "declarator": "maxSize = 1000", "var_name": "maxSize"}, {"original_string": "private LinkedList<Double> features = new LinkedList<Double>();", "modifier": "private", "type": "LinkedList<Double>", "declarator": "features = new LinkedList<Double>()", "var_name": "features"}, {"original_string": "private long count = 0L;", "modifier": "private", "type": "long", "declarator": "count = 0L", "var_name": "count"}, {"original_string": "private double sum = 0L;", "modifier": "private", "type": "double", "declarator": "sum = 0L", "var_name": "sum"}, {"original_string": "private double squaresSum = 0.0;", "modifier": "private", "type": "double", "declarator": "squaresSum = 0.0", "var_name": "squaresSum"}], "methods": [{"identifier": "AdaptiveStreamFeatureStatistics", "parameters": "()", "modifiers": "public", "return": "", "signature": " AdaptiveStreamFeatureStatistics()", "full_signature": "public  AdaptiveStreamFeatureStatistics()", "class_method_signature": "AdaptiveStreamFeatureStatistics.AdaptiveStreamFeatureStatistics()", "testcase": false, "constructor": true}, {"identifier": "AdaptiveStreamFeatureStatistics", "parameters": "(long maxSize)", "modifiers": "public", "return": "", "signature": " AdaptiveStreamFeatureStatistics(long maxSize)", "full_signature": "public  AdaptiveStreamFeatureStatistics(long maxSize)", "class_method_signature": "AdaptiveStreamFeatureStatistics.AdaptiveStreamFeatureStatistics(long maxSize)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(double feature)", "modifiers": "public", "return": "void", "signature": "void update(double feature)", "full_signature": "public void update(double feature)", "class_method_signature": "AdaptiveStreamFeatureStatistics.update(double feature)", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long getCount()", "full_signature": "@Override public Long getCount()", "class_method_signature": "AdaptiveStreamFeatureStatistics.getCount()", "testcase": false, "constructor": false}, {"identifier": "getMean", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getMean()", "full_signature": "@Override public Double getMean()", "class_method_signature": "AdaptiveStreamFeatureStatistics.getMean()", "testcase": false, "constructor": false}, {"identifier": "getVariance", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getVariance()", "full_signature": "@Override public Double getVariance()", "class_method_signature": "AdaptiveStreamFeatureStatistics.getVariance()", "testcase": false, "constructor": false}, {"identifier": "getStdDev", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getStdDev()", "full_signature": "@Override public Double getStdDev()", "class_method_signature": "AdaptiveStreamFeatureStatistics.getStdDev()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AdaptiveStreamFeatureStatistics.toString()", "testcase": false, "constructor": false}], "file": "storm/trident-ml/src/main/java/com/github/pmerienne/trident/ml/stats/AdaptiveStreamFeatureStatistics.java"}, "focal_method": {"identifier": "update", "parameters": "(double feature)", "modifiers": "public", "return": "void", "body": "public void update(double feature) {\n\t\tthis.count++;\n\t\tthis.features.add(feature);\n\t\tthis.sum += feature;\n\t\tthis.squaresSum += Math.pow(feature, 2);\n\n\t\tif (this.features.size() > maxSize) {\n\t\t\tdouble first = this.features.removeFirst();\n\t\t\tthis.sum -= first;\n\t\t\tthis.squaresSum -= Math.pow(first, 2);\n\t\t}\n\t}", "signature": "void update(double feature)", "full_signature": "public void update(double feature)", "class_method_signature": "AdaptiveStreamFeatureStatistics.update(double feature)", "testcase": false, "constructor": false, "invocations": ["add", "pow", "size", "removeFirst", "pow"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}