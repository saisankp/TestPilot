{"test_class": {"identifier": "SignalFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String URI = \"amqp://user:pass@host:1111/path\";", "modifier": "private static final", "type": "String", "declarator": "URI = \"amqp://user:pass@host:1111/path\"", "var_name": "URI"}, {"original_string": "private static final ConnectionId CONNECTION_ID = TestConstants.createRandomConnectionId();", "modifier": "private static final", "type": "ConnectionId", "declarator": "CONNECTION_ID = TestConstants.createRandomConnectionId()", "var_name": "CONNECTION_ID"}, {"original_string": "private static final AuthorizationSubject AUTHORIZED = newAuthSubject(\"authorized\");", "modifier": "private static final", "type": "AuthorizationSubject", "declarator": "AUTHORIZED = newAuthSubject(\"authorized\")", "var_name": "AUTHORIZED"}, {"original_string": "private static final AuthorizationSubject UNAUTHORIZED = newAuthSubject(\"unauthorized\");", "modifier": "private static final", "type": "AuthorizationSubject", "declarator": "UNAUTHORIZED = newAuthSubject(\"unauthorized\")", "var_name": "UNAUTHORIZED"}, {"original_string": "private static final AuthorizationSubject DUMMY = newAuthSubject(\"dummy\");", "modifier": "private static final", "type": "AuthorizationSubject", "declarator": "DUMMY = newAuthSubject(\"dummy\")", "var_name": "DUMMY"}, {"original_string": "private static final HeaderMapping HEADER_MAPPING =\n            ConnectivityModelFactory.newHeaderMapping(Collections.singletonMap(\"reply-to\", \"{{fn:delete()}}\"));", "modifier": "private static final", "type": "HeaderMapping", "declarator": "HEADER_MAPPING =\n            ConnectivityModelFactory.newHeaderMapping(Collections.singletonMap(\"reply-to\", \"{{fn:delete()}}\"))", "var_name": "HEADER_MAPPING"}, {"original_string": "@Parameterized.Parameter\n    public Topic signalTopic;", "modifier": "@Parameterized.Parameter\n    public", "type": "Topic", "declarator": "signalTopic", "var_name": "signalTopic"}, {"original_string": "@Parameterized.Parameter(1)\n    public Set<AuthorizationSubject> readSubjects;", "modifier": "@Parameterized.Parameter(1)\n    public", "type": "Set<AuthorizationSubject>", "declarator": "readSubjects", "var_name": "readSubjects"}, {"original_string": "@Parameterized.Parameter(2)\n    public List<Target> targets;", "modifier": "@Parameterized.Parameter(2)\n    public", "type": "List<Target>", "declarator": "targets", "var_name": "targets"}, {"original_string": "@Parameterized.Parameter(3)\n    public List<Target> expectedTargets;", "modifier": "@Parameterized.Parameter(3)\n    public", "type": "List<Target>", "declarator": "expectedTargets", "var_name": "expectedTargets"}, {"original_string": "private final ConnectionMonitorRegistry connectionMonitorRegistry = TestConstants.Monitoring.MONITOR_REGISTRY_MOCK;", "modifier": "private final", "type": "ConnectionMonitorRegistry", "declarator": "connectionMonitorRegistry = TestConstants.Monitoring.MONITOR_REGISTRY_MOCK", "var_name": "connectionMonitorRegistry"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/persistence/SignalFilterTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() {\n        final Connection connection =\n                ConnectivityModelFactory.newConnectionBuilder(CONNECTION_ID,\n                        ConnectionType.AMQP_10,\n                        ConnectivityStatus.OPEN,\n                        URI).targets(targets).build();\n\n        final SignalFilter signalFilter = new SignalFilter(connection, connectionMonitorRegistry);\n        final List<Target> filteredTargets = signalFilter.filter(signal(signalTopic, readSubjects));\n        Assertions.assertThat(filteredTargets)\n                .isEqualTo(expectedTargets);\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "SignalFilterTest.test()", "testcase": true, "constructor": false, "invocations": ["build", "targets", "newConnectionBuilder", "filter", "signal", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "SignalFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Connection connection;", "modifier": "private final", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private final ConnectionMonitorRegistry<ConnectionMonitor> connectionMonitorRegistry;", "modifier": "private final", "type": "ConnectionMonitorRegistry<ConnectionMonitor>", "declarator": "connectionMonitorRegistry", "var_name": "connectionMonitorRegistry"}], "methods": [{"identifier": "SignalFilter", "parameters": "(final Connection connection,\n            final ConnectionMonitorRegistry<ConnectionMonitor> connectionMonitorRegistry)", "modifiers": "", "return": "", "signature": " SignalFilter(final Connection connection,\n            final ConnectionMonitorRegistry<ConnectionMonitor> connectionMonitorRegistry)", "full_signature": "  SignalFilter(final Connection connection,\n            final ConnectionMonitorRegistry<ConnectionMonitor> connectionMonitorRegistry)", "class_method_signature": "SignalFilter.SignalFilter(final Connection connection,\n            final ConnectionMonitorRegistry<ConnectionMonitor> connectionMonitorRegistry)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(final Signal<?> signal)", "modifiers": "@SuppressWarnings(\"squid:S3864\")", "return": "List<Target>", "signature": "List<Target> filter(final Signal<?> signal)", "full_signature": "@SuppressWarnings(\"squid:S3864\") List<Target> filter(final Signal<?> signal)", "class_method_signature": "SignalFilter.filter(final Signal<?> signal)", "testcase": false, "constructor": false}, {"identifier": "isTargetAuthorized", "parameters": "(final Target target, final Signal<?> signal)", "modifiers": "private static", "return": "boolean", "signature": "boolean isTargetAuthorized(final Target target, final Signal<?> signal)", "full_signature": "private static boolean isTargetAuthorized(final Target target, final Signal<?> signal)", "class_method_signature": "SignalFilter.isTargetAuthorized(final Target target, final Signal<?> signal)", "testcase": false, "constructor": false}, {"identifier": "isTargetSubscribedForTopic", "parameters": "(final Target target, final Signal<?> signal)", "modifiers": "private", "return": "boolean", "signature": "boolean isTargetSubscribedForTopic(final Target target, final Signal<?> signal)", "full_signature": "private boolean isTargetSubscribedForTopic(final Target target, final Signal<?> signal)", "class_method_signature": "SignalFilter.isTargetSubscribedForTopic(final Target target, final Signal<?> signal)", "testcase": false, "constructor": false}, {"identifier": "applyTopicFilter", "parameters": "(final Signal<?> signal)", "modifiers": "private static", "return": "Predicate<FilteredTopic>", "signature": "Predicate<FilteredTopic> applyTopicFilter(final Signal<?> signal)", "full_signature": "private static Predicate<FilteredTopic> applyTopicFilter(final Signal<?> signal)", "class_method_signature": "SignalFilter.applyTopicFilter(final Signal<?> signal)", "testcase": false, "constructor": false}, {"identifier": "applyNamespaceFilter", "parameters": "(final WithId signal)", "modifiers": "private static", "return": "Predicate<FilteredTopic>", "signature": "Predicate<FilteredTopic> applyNamespaceFilter(final WithId signal)", "full_signature": "private static Predicate<FilteredTopic> applyNamespaceFilter(final WithId signal)", "class_method_signature": "SignalFilter.applyNamespaceFilter(final WithId signal)", "testcase": false, "constructor": false}, {"identifier": "namespaceFromId", "parameters": "(final WithId withId)", "modifiers": "@Nullable private static", "return": "String", "signature": "String namespaceFromId(final WithId withId)", "full_signature": "@Nullable private static String namespaceFromId(final WithId withId)", "class_method_signature": "SignalFilter.namespaceFromId(final WithId withId)", "testcase": false, "constructor": false}, {"identifier": "matchesFilterBeforeEnrichment", "parameters": "(final FilteredTopic filteredTopic, final Signal<?> signal)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesFilterBeforeEnrichment(final FilteredTopic filteredTopic, final Signal<?> signal)", "full_signature": "private boolean matchesFilterBeforeEnrichment(final FilteredTopic filteredTopic, final Signal<?> signal)", "class_method_signature": "SignalFilter.matchesFilterBeforeEnrichment(final FilteredTopic filteredTopic, final Signal<?> signal)", "testcase": false, "constructor": false}, {"identifier": "parseCriteria", "parameters": "(final String filter, final DittoHeaders dittoHeaders)", "modifiers": "private", "return": "Criteria", "signature": "Criteria parseCriteria(final String filter, final DittoHeaders dittoHeaders)", "full_signature": "private Criteria parseCriteria(final String filter, final DittoHeaders dittoHeaders)", "class_method_signature": "SignalFilter.parseCriteria(final String filter, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "topicFromSignal", "parameters": "(final Signal<?> signal)", "modifiers": "private static", "return": "Optional<Topic>", "signature": "Optional<Topic> topicFromSignal(final Signal<?> signal)", "full_signature": "private static Optional<Topic> topicFromSignal(final Signal<?> signal)", "class_method_signature": "SignalFilter.topicFromSignal(final Signal<?> signal)", "testcase": false, "constructor": false}, {"identifier": "getCriterionOfSignal", "parameters": "(final Signal<?> signal)", "modifiers": "@Nullable private static", "return": "TopicPath.Criterion", "signature": "TopicPath.Criterion getCriterionOfSignal(final Signal<?> signal)", "full_signature": "@Nullable private static TopicPath.Criterion getCriterionOfSignal(final Signal<?> signal)", "class_method_signature": "SignalFilter.getCriterionOfSignal(final Signal<?> signal)", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/persistence/SignalFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "(final Signal<?> signal)", "modifiers": "@SuppressWarnings(\"squid:S3864\")", "return": "List<Target>", "body": "@SuppressWarnings(\"squid:S3864\")\n    List<Target> filter(final Signal<?> signal) {\n        return connection.getTargets().stream()\n                .filter(t -> isTargetAuthorized(t, signal)) // this is cheaper, so check this first\n                // count authorized targets\n                .peek(authorizedTarget -> connectionMonitorRegistry.forOutboundDispatched(connection.getId(),\n                        authorizedTarget.getAddress())\n                        .success(signal))\n                .filter(t -> isTargetSubscribedForTopic(t, signal))\n                // count authorized + filtered targets\n                .peek(filteredTarget -> connectionMonitorRegistry.forOutboundFiltered(connection.getId(),\n                        filteredTarget.getAddress())\n                        .success(signal))\n                .collect(Collectors.toList());\n    }", "signature": "List<Target> filter(final Signal<?> signal)", "full_signature": "@SuppressWarnings(\"squid:S3864\") List<Target> filter(final Signal<?> signal)", "class_method_signature": "SignalFilter.filter(final Signal<?> signal)", "testcase": false, "constructor": false, "invocations": ["collect", "peek", "filter", "peek", "filter", "stream", "getTargets", "isTargetAuthorized", "success", "forOutboundDispatched", "getId", "getAddress", "isTargetSubscribedForTopic", "success", "forOutboundFiltered", "getId", "getAddress", "toList"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}