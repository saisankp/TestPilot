{"test_class": {"identifier": "PropertyDocumentImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper mapper = new DatamodelMapper(\"http://example.com/entity/\");", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new DatamodelMapper(\"http://example.com/entity/\")", "var_name": "mapper"}, {"original_string": "private PropertyIdValue pid = new PropertyIdValueImpl(\"P2\", \"http://example.com/entity/\");", "modifier": "private", "type": "PropertyIdValue", "declarator": "pid = new PropertyIdValueImpl(\"P2\", \"http://example.com/entity/\")", "var_name": "pid"}, {"original_string": "private final Statement s = new StatementImpl(\"MyId\", StatementRank.NORMAL,\n\t\t\tnew SomeValueSnakImpl(new PropertyIdValueImpl(\"P42\", \"http://example.com/entity/\")),\n\t\t\tCollections.emptyList(), Collections.emptyList(), pid);", "modifier": "private final", "type": "Statement", "declarator": "s = new StatementImpl(\"MyId\", StatementRank.NORMAL,\n\t\t\tnew SomeValueSnakImpl(new PropertyIdValueImpl(\"P42\", \"http://example.com/entity/\")),\n\t\t\tCollections.emptyList(), Collections.emptyList(), pid)", "var_name": "s"}, {"original_string": "private final List<StatementGroup> statementGroups = Collections.singletonList(\n\t\t\tnew StatementGroupImpl(Collections.singletonList(s))\n\t);", "modifier": "private final", "type": "List<StatementGroup>", "declarator": "statementGroups = Collections.singletonList(\n\t\t\tnew StatementGroupImpl(Collections.singletonList(s))\n\t)", "var_name": "statementGroups"}, {"original_string": "private final MonolingualTextValue label = new TermImpl(\"en\", \"label\");", "modifier": "private final", "type": "MonolingualTextValue", "declarator": "label = new TermImpl(\"en\", \"label\")", "var_name": "label"}, {"original_string": "private final List<MonolingualTextValue> labelList = Collections.singletonList(label);", "modifier": "private final", "type": "List<MonolingualTextValue>", "declarator": "labelList = Collections.singletonList(label)", "var_name": "labelList"}, {"original_string": "private final MonolingualTextValue desc = new TermImpl(\"fr\", \"des\");", "modifier": "private final", "type": "MonolingualTextValue", "declarator": "desc = new TermImpl(\"fr\", \"des\")", "var_name": "desc"}, {"original_string": "private final List<MonolingualTextValue> descList = Collections.singletonList(desc);", "modifier": "private final", "type": "List<MonolingualTextValue>", "declarator": "descList = Collections.singletonList(desc)", "var_name": "descList"}, {"original_string": "private final MonolingualTextValue alias = new TermImpl(\"de\", \"alias\");", "modifier": "private final", "type": "MonolingualTextValue", "declarator": "alias = new TermImpl(\"de\", \"alias\")", "var_name": "alias"}, {"original_string": "private final List<MonolingualTextValue> aliasList = Collections.singletonList(alias);", "modifier": "private final", "type": "List<MonolingualTextValue>", "declarator": "aliasList = Collections.singletonList(alias)", "var_name": "aliasList"}, {"original_string": "private DatatypeIdValue datatypeId = new DatatypeIdImpl(DatatypeIdValue.DT_ITEM);", "modifier": "private", "type": "DatatypeIdValue", "declarator": "datatypeId = new DatatypeIdImpl(DatatypeIdValue.DT_ITEM)", "var_name": "datatypeId"}, {"original_string": "private final PropertyDocument pd1 = new PropertyDocumentImpl(pid, labelList, descList, aliasList,\n\t\t\tstatementGroups, datatypeId, 1234);", "modifier": "private final", "type": "PropertyDocument", "declarator": "pd1 = new PropertyDocumentImpl(pid, labelList, descList, aliasList,\n\t\t\tstatementGroups, datatypeId, 1234)", "var_name": "pd1"}, {"original_string": "private final PropertyDocument pd2 = new PropertyDocumentImpl(pid, labelList, descList, aliasList,\n\t\t\tstatementGroups, datatypeId, 1234);", "modifier": "private final", "type": "PropertyDocument", "declarator": "pd2 = new PropertyDocumentImpl(pid, labelList, descList, aliasList,\n\t\t\tstatementGroups, datatypeId, 1234)", "var_name": "pd2"}, {"original_string": "private final String JSON_PROPERTY = \"{\\\"type\\\":\\\"property\\\",\\\"id\\\":\\\"P2\\\",\\\"labels\\\":{\\\"en\\\":{\\\"language\\\":\\\"en\\\",\\\"value\\\":\\\"label\\\"}},\\\"descriptions\\\":{\\\"fr\\\":{\\\"language\\\":\\\"fr\\\",\\\"value\\\":\\\"des\\\"}},\\\"aliases\\\":{\\\"de\\\":[{\\\"language\\\":\\\"de\\\",\\\"value\\\":\\\"alias\\\"}]},\\\"claims\\\":{\\\"P42\\\":[{\\\"rank\\\":\\\"normal\\\",\\\"id\\\":\\\"MyId\\\",\\\"mainsnak\\\":{\\\"property\\\":\\\"P42\\\",\\\"snaktype\\\":\\\"somevalue\\\"},\\\"type\\\":\\\"statement\\\"}]},\\\"datatype\\\":\\\"wikibase-item\\\",\\\"lastrevid\\\":1234}\";", "modifier": "private final", "type": "String", "declarator": "JSON_PROPERTY = \"{\\\"type\\\":\\\"property\\\",\\\"id\\\":\\\"P2\\\",\\\"labels\\\":{\\\"en\\\":{\\\"language\\\":\\\"en\\\",\\\"value\\\":\\\"label\\\"}},\\\"descriptions\\\":{\\\"fr\\\":{\\\"language\\\":\\\"fr\\\",\\\"value\\\":\\\"des\\\"}},\\\"aliases\\\":{\\\"de\\\":[{\\\"language\\\":\\\"de\\\",\\\"value\\\":\\\"alias\\\"}]},\\\"claims\\\":{\\\"P42\\\":[{\\\"rank\\\":\\\"normal\\\",\\\"id\\\":\\\"MyId\\\",\\\"mainsnak\\\":{\\\"property\\\":\\\"P42\\\",\\\"snaktype\\\":\\\"somevalue\\\"},\\\"type\\\":\\\"statement\\\"}]},\\\"datatype\\\":\\\"wikibase-item\\\",\\\"lastrevid\\\":1234}\"", "var_name": "JSON_PROPERTY"}], "file": "wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/implementation/PropertyDocumentImplTest.java"}, "test_case": {"identifier": "testWithOverridenLabel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWithOverridenLabel() {\n\t\tMonolingualTextValue newLabel = new MonolingualTextValueImpl(\n\t\t\t\t\"The P42 Property\", \"en\");\n\t\tPropertyDocument withLabel = pd1.withLabel(newLabel);\n\t\tassertEquals(\"The P42 Property\", withLabel.findLabel(\"en\"));\n\t}", "signature": "void testWithOverridenLabel()", "full_signature": "@Test public void testWithOverridenLabel()", "class_method_signature": "PropertyDocumentImplTest.testWithOverridenLabel()", "testcase": true, "constructor": false, "invocations": ["withLabel", "assertEquals", "findLabel"]}, "focal_class": {"identifier": "PropertyDocumentImpl", "superclass": "extends TermedStatementDocumentImpl", "interfaces": "implements PropertyDocument", "fields": [{"original_string": "private final DatatypeIdImpl datatype;", "modifier": "private final", "type": "DatatypeIdImpl", "declarator": "datatype", "var_name": "datatype"}], "methods": [{"identifier": "PropertyDocumentImpl", "parameters": "(\n\t\t\tPropertyIdValue id,\n\t\t\tList<MonolingualTextValue> labels,\n\t\t\tList<MonolingualTextValue> descriptions,\n\t\t\tList<MonolingualTextValue> aliases,\n\t\t\tList<StatementGroup> statements,\n\t\t\tDatatypeIdValue datatype,\n\t\t\tlong revisionId)", "modifiers": "public", "return": "", "signature": " PropertyDocumentImpl(\n\t\t\tPropertyIdValue id,\n\t\t\tList<MonolingualTextValue> labels,\n\t\t\tList<MonolingualTextValue> descriptions,\n\t\t\tList<MonolingualTextValue> aliases,\n\t\t\tList<StatementGroup> statements,\n\t\t\tDatatypeIdValue datatype,\n\t\t\tlong revisionId)", "full_signature": "public  PropertyDocumentImpl(\n\t\t\tPropertyIdValue id,\n\t\t\tList<MonolingualTextValue> labels,\n\t\t\tList<MonolingualTextValue> descriptions,\n\t\t\tList<MonolingualTextValue> aliases,\n\t\t\tList<StatementGroup> statements,\n\t\t\tDatatypeIdValue datatype,\n\t\t\tlong revisionId)", "class_method_signature": "PropertyDocumentImpl.PropertyDocumentImpl(\n\t\t\tPropertyIdValue id,\n\t\t\tList<MonolingualTextValue> labels,\n\t\t\tList<MonolingualTextValue> descriptions,\n\t\t\tList<MonolingualTextValue> aliases,\n\t\t\tList<StatementGroup> statements,\n\t\t\tDatatypeIdValue datatype,\n\t\t\tlong revisionId)", "testcase": false, "constructor": true}, {"identifier": "PropertyDocumentImpl", "parameters": "(\n\t\t\t@JsonProperty(\"id\") String jsonId,\n\t\t\t@JsonProperty(\"labels\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> labels,\n\t\t\t@JsonProperty(\"descriptions\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> descriptions,\n\t\t\t@JsonProperty(\"aliases\") @JsonDeserialize(using = AliasesDeserializer.class) Map<String, List<MonolingualTextValue>> aliases,\n\t\t\t@JsonProperty(\"claims\") Map<String, List<StatementImpl.PreStatement>> claims,\n\t\t\t@JsonProperty(\"datatype\") String datatype,\n\t\t\t@JsonProperty(\"lastrevid\") long revisionId,\n\t\t\t@JacksonInject(\"siteIri\") String siteIri)", "modifiers": "@JsonCreator public", "return": "", "signature": " PropertyDocumentImpl(\n\t\t\t@JsonProperty(\"id\") String jsonId,\n\t\t\t@JsonProperty(\"labels\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> labels,\n\t\t\t@JsonProperty(\"descriptions\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> descriptions,\n\t\t\t@JsonProperty(\"aliases\") @JsonDeserialize(using = AliasesDeserializer.class) Map<String, List<MonolingualTextValue>> aliases,\n\t\t\t@JsonProperty(\"claims\") Map<String, List<StatementImpl.PreStatement>> claims,\n\t\t\t@JsonProperty(\"datatype\") String datatype,\n\t\t\t@JsonProperty(\"lastrevid\") long revisionId,\n\t\t\t@JacksonInject(\"siteIri\") String siteIri)", "full_signature": "@JsonCreator public  PropertyDocumentImpl(\n\t\t\t@JsonProperty(\"id\") String jsonId,\n\t\t\t@JsonProperty(\"labels\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> labels,\n\t\t\t@JsonProperty(\"descriptions\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> descriptions,\n\t\t\t@JsonProperty(\"aliases\") @JsonDeserialize(using = AliasesDeserializer.class) Map<String, List<MonolingualTextValue>> aliases,\n\t\t\t@JsonProperty(\"claims\") Map<String, List<StatementImpl.PreStatement>> claims,\n\t\t\t@JsonProperty(\"datatype\") String datatype,\n\t\t\t@JsonProperty(\"lastrevid\") long revisionId,\n\t\t\t@JacksonInject(\"siteIri\") String siteIri)", "class_method_signature": "PropertyDocumentImpl.PropertyDocumentImpl(\n\t\t\t@JsonProperty(\"id\") String jsonId,\n\t\t\t@JsonProperty(\"labels\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> labels,\n\t\t\t@JsonProperty(\"descriptions\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> descriptions,\n\t\t\t@JsonProperty(\"aliases\") @JsonDeserialize(using = AliasesDeserializer.class) Map<String, List<MonolingualTextValue>> aliases,\n\t\t\t@JsonProperty(\"claims\") Map<String, List<StatementImpl.PreStatement>> claims,\n\t\t\t@JsonProperty(\"datatype\") String datatype,\n\t\t\t@JsonProperty(\"lastrevid\") long revisionId,\n\t\t\t@JacksonInject(\"siteIri\") String siteIri)", "testcase": false, "constructor": true}, {"identifier": "PropertyDocumentImpl", "parameters": "(\n\t\t\tPropertyIdValue id,\n\t\t\tMap<String, MonolingualTextValue> labels,\n\t\t\tMap<String, MonolingualTextValue> descriptions,\n\t\t\tMap<String, List<MonolingualTextValue>> aliases,\n\t\t\tMap<String, List<Statement>> claims,\n\t\t\tDatatypeIdValue datatypeId, \n\t\t\tlong revisionId)", "modifiers": "private", "return": "", "signature": " PropertyDocumentImpl(\n\t\t\tPropertyIdValue id,\n\t\t\tMap<String, MonolingualTextValue> labels,\n\t\t\tMap<String, MonolingualTextValue> descriptions,\n\t\t\tMap<String, List<MonolingualTextValue>> aliases,\n\t\t\tMap<String, List<Statement>> claims,\n\t\t\tDatatypeIdValue datatypeId, \n\t\t\tlong revisionId)", "full_signature": "private  PropertyDocumentImpl(\n\t\t\tPropertyIdValue id,\n\t\t\tMap<String, MonolingualTextValue> labels,\n\t\t\tMap<String, MonolingualTextValue> descriptions,\n\t\t\tMap<String, List<MonolingualTextValue>> aliases,\n\t\t\tMap<String, List<Statement>> claims,\n\t\t\tDatatypeIdValue datatypeId, \n\t\t\tlong revisionId)", "class_method_signature": "PropertyDocumentImpl.PropertyDocumentImpl(\n\t\t\tPropertyIdValue id,\n\t\t\tMap<String, MonolingualTextValue> labels,\n\t\t\tMap<String, MonolingualTextValue> descriptions,\n\t\t\tMap<String, List<MonolingualTextValue>> aliases,\n\t\t\tMap<String, List<Statement>> claims,\n\t\t\tDatatypeIdValue datatypeId, \n\t\t\tlong revisionId)", "testcase": false, "constructor": true}, {"identifier": "getJsonDatatype", "parameters": "()", "modifiers": "@JsonProperty(\"datatype\") public", "return": "String", "signature": "String getJsonDatatype()", "full_signature": "@JsonProperty(\"datatype\") public String getJsonDatatype()", "class_method_signature": "PropertyDocumentImpl.getJsonDatatype()", "testcase": false, "constructor": false}, {"identifier": "getPropertyId", "parameters": "()", "modifiers": "@JsonIgnore @Override public", "return": "PropertyIdValue", "signature": "PropertyIdValue getPropertyId()", "full_signature": "@JsonIgnore @Override public PropertyIdValue getPropertyId()", "class_method_signature": "PropertyDocumentImpl.getPropertyId()", "testcase": false, "constructor": false}, {"identifier": "getEntityId", "parameters": "()", "modifiers": "@JsonIgnore @Override public", "return": "PropertyIdValue", "signature": "PropertyIdValue getEntityId()", "full_signature": "@JsonIgnore @Override public PropertyIdValue getEntityId()", "class_method_signature": "PropertyDocumentImpl.getEntityId()", "testcase": false, "constructor": false}, {"identifier": "getDatatype", "parameters": "()", "modifiers": "@JsonIgnore @Override public", "return": "DatatypeIdValue", "signature": "DatatypeIdValue getDatatype()", "full_signature": "@JsonIgnore @Override public DatatypeIdValue getDatatype()", "class_method_signature": "PropertyDocumentImpl.getDatatype()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PropertyDocumentImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "PropertyDocumentImpl.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PropertyDocumentImpl.toString()", "testcase": false, "constructor": false}, {"identifier": "withRevisionId", "parameters": "(long newRevisionId)", "modifiers": "@Override public", "return": "PropertyDocument", "signature": "PropertyDocument withRevisionId(long newRevisionId)", "full_signature": "@Override public PropertyDocument withRevisionId(long newRevisionId)", "class_method_signature": "PropertyDocumentImpl.withRevisionId(long newRevisionId)", "testcase": false, "constructor": false}, {"identifier": "withLabel", "parameters": "(MonolingualTextValue newLabel)", "modifiers": "@Override public", "return": "PropertyDocument", "signature": "PropertyDocument withLabel(MonolingualTextValue newLabel)", "full_signature": "@Override public PropertyDocument withLabel(MonolingualTextValue newLabel)", "class_method_signature": "PropertyDocumentImpl.withLabel(MonolingualTextValue newLabel)", "testcase": false, "constructor": false}, {"identifier": "withDescription", "parameters": "(MonolingualTextValue newDescription)", "modifiers": "@Override public", "return": "PropertyDocument", "signature": "PropertyDocument withDescription(MonolingualTextValue newDescription)", "full_signature": "@Override public PropertyDocument withDescription(MonolingualTextValue newDescription)", "class_method_signature": "PropertyDocumentImpl.withDescription(MonolingualTextValue newDescription)", "testcase": false, "constructor": false}, {"identifier": "withAliases", "parameters": "(String language, List<MonolingualTextValue> aliases)", "modifiers": "@Override public", "return": "PropertyDocument", "signature": "PropertyDocument withAliases(String language, List<MonolingualTextValue> aliases)", "full_signature": "@Override public PropertyDocument withAliases(String language, List<MonolingualTextValue> aliases)", "class_method_signature": "PropertyDocumentImpl.withAliases(String language, List<MonolingualTextValue> aliases)", "testcase": false, "constructor": false}, {"identifier": "withStatement", "parameters": "(Statement statement)", "modifiers": "@Override public", "return": "PropertyDocument", "signature": "PropertyDocument withStatement(Statement statement)", "full_signature": "@Override public PropertyDocument withStatement(Statement statement)", "class_method_signature": "PropertyDocumentImpl.withStatement(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "withoutStatementIds", "parameters": "(Set<String> statementIds)", "modifiers": "@Override public", "return": "PropertyDocument", "signature": "PropertyDocument withoutStatementIds(Set<String> statementIds)", "full_signature": "@Override public PropertyDocument withoutStatementIds(Set<String> statementIds)", "class_method_signature": "PropertyDocumentImpl.withoutStatementIds(Set<String> statementIds)", "testcase": false, "constructor": false}], "file": "wdtk-datamodel/src/main/java/org/wikidata/wdtk/datamodel/implementation/PropertyDocumentImpl.java"}, "focal_method": {"identifier": "withLabel", "parameters": "(MonolingualTextValue newLabel)", "modifiers": "@Override public", "return": "PropertyDocument", "body": "@Override\n\tpublic PropertyDocument withLabel(MonolingualTextValue newLabel) {\n\t\treturn new PropertyDocumentImpl(getEntityId(),\n\t\t\t\twithTerm(labels, newLabel), descriptions,\n\t\t\t\taliases, claims,\n\t\t\t\tdatatype, revisionId);\n\t}", "signature": "PropertyDocument withLabel(MonolingualTextValue newLabel)", "full_signature": "@Override public PropertyDocument withLabel(MonolingualTextValue newLabel)", "class_method_signature": "PropertyDocumentImpl.withLabel(MonolingualTextValue newLabel)", "testcase": false, "constructor": false, "invocations": ["getEntityId", "withTerm"]}, "repository": {"repo_id": 16144428, "url": "https://github.com/Wikidata/Wikidata-Toolkit", "language": "Java", "is_fork": false, "fork_count": 80, "stargazer_count": 264, "size": 11241, "license": "licensed"}}