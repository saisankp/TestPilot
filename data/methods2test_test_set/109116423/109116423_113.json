{"test_class": {"identifier": "ExprModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ExprModel mExprModel;", "modifier": "", "type": "ExprModel", "declarator": "mExprModel", "var_name": "mExprModel"}, {"original_string": "@Rule\n    public TestWatcher mTestWatcher = new TestWatcher() {\n        @Override\n        protected void failed(Throwable e, Description description) {\n            if (mExprModel != null && mExprModel.getFlagMapping() != null) {\n                final String[] mapping = mExprModel.getFlagMapping();\n                for (int i = 0; i < mapping.length; i++) {\n                    L.d(\"flag %d: %s\", i, mapping[i]);\n                }\n            }\n        }\n    };", "modifier": "@Rule\n    public", "type": "TestWatcher", "declarator": "mTestWatcher = new TestWatcher() {\n        @Override\n        protected void failed(Throwable e, Description description) {\n            if (mExprModel != null && mExprModel.getFlagMapping() != null) {\n                final String[] mapping = mExprModel.getFlagMapping();\n                for (int i = 0; i < mapping.length; i++) {\n                    L.d(\"flag %d: %s\", i, mapping[i]);\n                }\n            }\n        }\n    }", "var_name": "mTestWatcher"}], "file": "android/databinding/tool/expr/ExprModelTest.java"}, "test_case": {"identifier": "testAddWithChildren", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddWithChildren() {\n        DummyExpr a = new DummyExpr(\"a\");\n        DummyExpr b = new DummyExpr(\"b\");\n        DummyExpr c = new DummyExpr(\"c\", a, b);\n        mExprModel.register(c);\n        DummyExpr a2 = new DummyExpr(\"a\");\n        DummyExpr b2 = new DummyExpr(\"b\");\n        DummyExpr c2 = new DummyExpr(\"c\", a, b);\n        assertEquals(c, mExprModel.register(c2));\n    }", "signature": "void testAddWithChildren()", "full_signature": "@Test public void testAddWithChildren()", "class_method_signature": "ExprModelTest.testAddWithChildren()", "testcase": true, "constructor": false, "invocations": ["register", "assertEquals", "register"]}, "focal_class": {"identifier": "ExprModel", "superclass": "", "interfaces": "", "fields": [{"original_string": "Map<String, Expr> mExprMap = new HashMap<String, Expr>();", "modifier": "", "type": "Map<String, Expr>", "declarator": "mExprMap = new HashMap<String, Expr>()", "var_name": "mExprMap"}, {"original_string": "List<Expr> mBindingExpressions = new ArrayList<Expr>();", "modifier": "", "type": "List<Expr>", "declarator": "mBindingExpressions = new ArrayList<Expr>()", "var_name": "mBindingExpressions"}, {"original_string": "private int mInvalidateableFieldLimit = 0;", "modifier": "private", "type": "int", "declarator": "mInvalidateableFieldLimit = 0", "var_name": "mInvalidateableFieldLimit"}, {"original_string": "private int mRequirementIdCount = 0;", "modifier": "private", "type": "int", "declarator": "mRequirementIdCount = 0", "var_name": "mRequirementIdCount"}, {"original_string": "private int mArgListIdCounter = 0;", "modifier": "private", "type": "int", "declarator": "mArgListIdCounter = 0", "var_name": "mArgListIdCounter"}, {"original_string": "private static final String TRUE_KEY_SUFFIX = \"== true\";", "modifier": "private static final", "type": "String", "declarator": "TRUE_KEY_SUFFIX = \"== true\"", "var_name": "TRUE_KEY_SUFFIX"}, {"original_string": "private static final String FALSE_KEY_SUFFIX = \"== false\";", "modifier": "private static final", "type": "String", "declarator": "FALSE_KEY_SUFFIX = \"== false\"", "var_name": "FALSE_KEY_SUFFIX"}, {"original_string": "private BitSet mInvalidateAnyFlags;", "modifier": "private", "type": "BitSet", "declarator": "mInvalidateAnyFlags", "var_name": "mInvalidateAnyFlags"}, {"original_string": "private int mInvalidateAnyFlagIndex;", "modifier": "private", "type": "int", "declarator": "mInvalidateAnyFlagIndex", "var_name": "mInvalidateAnyFlagIndex"}, {"original_string": "private List<Expr> mPendingExpressions;", "modifier": "private", "type": "List<Expr>", "declarator": "mPendingExpressions", "var_name": "mPendingExpressions"}, {"original_string": "private String[] mFlagMapping;", "modifier": "private", "type": "String[]", "declarator": "mFlagMapping", "var_name": "mFlagMapping"}, {"original_string": "private int mFlagBucketCount;", "modifier": "private", "type": "int", "declarator": "mFlagBucketCount", "var_name": "mFlagBucketCount"}, {"original_string": "private List<Expr> mObservables;", "modifier": "private", "type": "List<Expr>", "declarator": "mObservables", "var_name": "mObservables"}, {"original_string": "private boolean mSealed = false;", "modifier": "private", "type": "boolean", "declarator": "mSealed = false", "var_name": "mSealed"}, {"original_string": "private Map<String, String> mImports = new HashMap<String, String>();", "modifier": "private", "type": "Map<String, String>", "declarator": "mImports = new HashMap<String, String>()", "var_name": "mImports"}, {"original_string": "private ParserRuleContext mCurrentParserContext;", "modifier": "private", "type": "ParserRuleContext", "declarator": "mCurrentParserContext", "var_name": "mCurrentParserContext"}, {"original_string": "private Location mCurrentLocationInFile;", "modifier": "private", "type": "Location", "declarator": "mCurrentLocationInFile", "var_name": "mCurrentLocationInFile"}, {"original_string": "private Map<String, CallbackWrapper> mCallbackWrappers = new HashMap<String, CallbackWrapper>();", "modifier": "private", "type": "Map<String, CallbackWrapper>", "declarator": "mCallbackWrappers = new HashMap<String, CallbackWrapper>()", "var_name": "mCallbackWrappers"}, {"original_string": "private AtomicInteger mCallbackIdCounter = new AtomicInteger();", "modifier": "private", "type": "AtomicInteger", "declarator": "mCallbackIdCounter = new AtomicInteger()", "var_name": "mCallbackIdCounter"}, {"original_string": "private ExprModelExt mExt = new ExprModelExt();", "modifier": "private", "type": "ExprModelExt", "declarator": "mExt = new ExprModelExt()", "var_name": "mExt"}], "methods": [{"identifier": "register", "parameters": "(T expr)", "modifiers": "public", "return": "T", "signature": "T register(T expr)", "full_signature": "public T register(T expr)", "class_method_signature": "ExprModel.register(T expr)", "testcase": false, "constructor": false}, {"identifier": "markSealed", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void markSealed()", "full_signature": "protected void markSealed()", "class_method_signature": "ExprModel.markSealed()", "testcase": false, "constructor": false}, {"identifier": "getExt", "parameters": "()", "modifiers": "public", "return": "ExprModelExt", "signature": "ExprModelExt getExt()", "full_signature": "public ExprModelExt getExt()", "class_method_signature": "ExprModel.getExt()", "testcase": false, "constructor": false}, {"identifier": "obtainCallbackId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int obtainCallbackId()", "full_signature": "public int obtainCallbackId()", "class_method_signature": "ExprModel.obtainCallbackId()", "testcase": false, "constructor": false}, {"identifier": "setCurrentParserContext", "parameters": "(ParserRuleContext currentParserContext)", "modifiers": "public", "return": "void", "signature": "void setCurrentParserContext(ParserRuleContext currentParserContext)", "full_signature": "public void setCurrentParserContext(ParserRuleContext currentParserContext)", "class_method_signature": "ExprModel.setCurrentParserContext(ParserRuleContext currentParserContext)", "testcase": false, "constructor": false}, {"identifier": "getCurrentParserContext", "parameters": "()", "modifiers": "public", "return": "ParserRuleContext", "signature": "ParserRuleContext getCurrentParserContext()", "full_signature": "public ParserRuleContext getCurrentParserContext()", "class_method_signature": "ExprModel.getCurrentParserContext()", "testcase": false, "constructor": false}, {"identifier": "getCurrentLocationInFile", "parameters": "()", "modifiers": "public", "return": "Location", "signature": "Location getCurrentLocationInFile()", "full_signature": "public Location getCurrentLocationInFile()", "class_method_signature": "ExprModel.getCurrentLocationInFile()", "testcase": false, "constructor": false}, {"identifier": "getExprMap", "parameters": "()", "modifiers": "public", "return": "Map<String, Expr>", "signature": "Map<String, Expr> getExprMap()", "full_signature": "public Map<String, Expr> getExprMap()", "class_method_signature": "ExprModel.getExprMap()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "ExprModel.size()", "testcase": false, "constructor": false}, {"identifier": "comparison", "parameters": "(String op, Expr left, Expr right)", "modifiers": "public", "return": "ComparisonExpr", "signature": "ComparisonExpr comparison(String op, Expr left, Expr right)", "full_signature": "public ComparisonExpr comparison(String op, Expr left, Expr right)", "class_method_signature": "ExprModel.comparison(String op, Expr left, Expr right)", "testcase": false, "constructor": false}, {"identifier": "instanceOfOp", "parameters": "(Expr expr, String type)", "modifiers": "public", "return": "InstanceOfExpr", "signature": "InstanceOfExpr instanceOfOp(Expr expr, String type)", "full_signature": "public InstanceOfExpr instanceOfOp(Expr expr, String type)", "class_method_signature": "ExprModel.instanceOfOp(Expr expr, String type)", "testcase": false, "constructor": false}, {"identifier": "field", "parameters": "(Expr parent, String name)", "modifiers": "public", "return": "FieldAccessExpr", "signature": "FieldAccessExpr field(Expr parent, String name)", "full_signature": "public FieldAccessExpr field(Expr parent, String name)", "class_method_signature": "ExprModel.field(Expr parent, String name)", "testcase": false, "constructor": false}, {"identifier": "observableField", "parameters": "(Expr parent, String name)", "modifiers": "public", "return": "FieldAccessExpr", "signature": "FieldAccessExpr observableField(Expr parent, String name)", "full_signature": "public FieldAccessExpr observableField(Expr parent, String name)", "class_method_signature": "ExprModel.observableField(Expr parent, String name)", "testcase": false, "constructor": false}, {"identifier": "methodReference", "parameters": "(Expr parent, String name)", "modifiers": "public", "return": "MethodReferenceExpr", "signature": "MethodReferenceExpr methodReference(Expr parent, String name)", "full_signature": "public MethodReferenceExpr methodReference(Expr parent, String name)", "class_method_signature": "ExprModel.methodReference(Expr parent, String name)", "testcase": false, "constructor": false}, {"identifier": "symbol", "parameters": "(String text, Class type)", "modifiers": "public", "return": "SymbolExpr", "signature": "SymbolExpr symbol(String text, Class type)", "full_signature": "public SymbolExpr symbol(String text, Class type)", "class_method_signature": "ExprModel.symbol(String text, Class type)", "testcase": false, "constructor": false}, {"identifier": "ternary", "parameters": "(Expr pred, Expr ifTrue, Expr ifFalse)", "modifiers": "public", "return": "TernaryExpr", "signature": "TernaryExpr ternary(Expr pred, Expr ifTrue, Expr ifFalse)", "full_signature": "public TernaryExpr ternary(Expr pred, Expr ifTrue, Expr ifFalse)", "class_method_signature": "ExprModel.ternary(Expr pred, Expr ifTrue, Expr ifFalse)", "testcase": false, "constructor": false}, {"identifier": "identifier", "parameters": "(String name)", "modifiers": "public", "return": "IdentifierExpr", "signature": "IdentifierExpr identifier(String name)", "full_signature": "public IdentifierExpr identifier(String name)", "class_method_signature": "ExprModel.identifier(String name)", "testcase": false, "constructor": false}, {"identifier": "staticIdentifier", "parameters": "(String name)", "modifiers": "public", "return": "StaticIdentifierExpr", "signature": "StaticIdentifierExpr staticIdentifier(String name)", "full_signature": "public StaticIdentifierExpr staticIdentifier(String name)", "class_method_signature": "ExprModel.staticIdentifier(String name)", "testcase": false, "constructor": false}, {"identifier": "builtInVariable", "parameters": "(String name, String type, String accessCode)", "modifiers": "public", "return": "BuiltInVariableExpr", "signature": "BuiltInVariableExpr builtInVariable(String name, String type, String accessCode)", "full_signature": "public BuiltInVariableExpr builtInVariable(String name, String type, String accessCode)", "class_method_signature": "ExprModel.builtInVariable(String name, String type, String accessCode)", "testcase": false, "constructor": false}, {"identifier": "viewFieldExpr", "parameters": "(BindingTarget bindingTarget)", "modifiers": "public", "return": "ViewFieldExpr", "signature": "ViewFieldExpr viewFieldExpr(BindingTarget bindingTarget)", "full_signature": "public ViewFieldExpr viewFieldExpr(BindingTarget bindingTarget)", "class_method_signature": "ExprModel.viewFieldExpr(BindingTarget bindingTarget)", "testcase": false, "constructor": false}, {"identifier": "staticIdentifierFor", "parameters": "(final ModelClass modelClass)", "modifiers": "public", "return": "StaticIdentifierExpr", "signature": "StaticIdentifierExpr staticIdentifierFor(final ModelClass modelClass)", "full_signature": "public StaticIdentifierExpr staticIdentifierFor(final ModelClass modelClass)", "class_method_signature": "ExprModel.staticIdentifierFor(final ModelClass modelClass)", "testcase": false, "constructor": false}, {"identifier": "findStaticIdentifierExpr", "parameters": "(String type)", "modifiers": "@Nullable private", "return": "StaticIdentifierExpr", "signature": "StaticIdentifierExpr findStaticIdentifierExpr(String type)", "full_signature": "@Nullable private StaticIdentifierExpr findStaticIdentifierExpr(String type)", "class_method_signature": "ExprModel.findStaticIdentifierExpr(String type)", "testcase": false, "constructor": false}, {"identifier": "methodCall", "parameters": "(Expr target, String name, List<Expr> args)", "modifiers": "public", "return": "MethodCallExpr", "signature": "MethodCallExpr methodCall(Expr target, String name, List<Expr> args)", "full_signature": "public MethodCallExpr methodCall(Expr target, String name, List<Expr> args)", "class_method_signature": "ExprModel.methodCall(Expr target, String name, List<Expr> args)", "testcase": false, "constructor": false}, {"identifier": "math", "parameters": "(Expr left, String op, Expr right)", "modifiers": "public", "return": "MathExpr", "signature": "MathExpr math(Expr left, String op, Expr right)", "full_signature": "public MathExpr math(Expr left, String op, Expr right)", "class_method_signature": "ExprModel.math(Expr left, String op, Expr right)", "testcase": false, "constructor": false}, {"identifier": "logical", "parameters": "(Expr left, String op, Expr right)", "modifiers": "public", "return": "TernaryExpr", "signature": "TernaryExpr logical(Expr left, String op, Expr right)", "full_signature": "public TernaryExpr logical(Expr left, String op, Expr right)", "class_method_signature": "ExprModel.logical(Expr left, String op, Expr right)", "testcase": false, "constructor": false}, {"identifier": "bitshift", "parameters": "(Expr left, String op, Expr right)", "modifiers": "public", "return": "BitShiftExpr", "signature": "BitShiftExpr bitshift(Expr left, String op, Expr right)", "full_signature": "public BitShiftExpr bitshift(Expr left, String op, Expr right)", "class_method_signature": "ExprModel.bitshift(Expr left, String op, Expr right)", "testcase": false, "constructor": false}, {"identifier": "unary", "parameters": "(String op, Expr expr)", "modifiers": "public", "return": "UnaryExpr", "signature": "UnaryExpr unary(String op, Expr expr)", "full_signature": "public UnaryExpr unary(String op, Expr expr)", "class_method_signature": "ExprModel.unary(String op, Expr expr)", "testcase": false, "constructor": false}, {"identifier": "resourceExpr", "parameters": "(BindingTarget target, String packageName, String resourceType,\n            String resourceName, List<Expr> args)", "modifiers": "public", "return": "Expr", "signature": "Expr resourceExpr(BindingTarget target, String packageName, String resourceType,\n            String resourceName, List<Expr> args)", "full_signature": "public Expr resourceExpr(BindingTarget target, String packageName, String resourceType,\n            String resourceName, List<Expr> args)", "class_method_signature": "ExprModel.resourceExpr(BindingTarget target, String packageName, String resourceType,\n            String resourceName, List<Expr> args)", "testcase": false, "constructor": false}, {"identifier": "bracketExpr", "parameters": "(Expr variableExpr, Expr argExpr)", "modifiers": "public", "return": "Expr", "signature": "Expr bracketExpr(Expr variableExpr, Expr argExpr)", "full_signature": "public Expr bracketExpr(Expr variableExpr, Expr argExpr)", "class_method_signature": "ExprModel.bracketExpr(Expr variableExpr, Expr argExpr)", "testcase": false, "constructor": false}, {"identifier": "castExpr", "parameters": "(String type, Expr expr)", "modifiers": "public", "return": "Expr", "signature": "Expr castExpr(String type, Expr expr)", "full_signature": "public Expr castExpr(String type, Expr expr)", "class_method_signature": "ExprModel.castExpr(String type, Expr expr)", "testcase": false, "constructor": false}, {"identifier": "twoWayListenerExpr", "parameters": "(InverseBinding inverseBinding)", "modifiers": "public", "return": "TwoWayListenerExpr", "signature": "TwoWayListenerExpr twoWayListenerExpr(InverseBinding inverseBinding)", "full_signature": "public TwoWayListenerExpr twoWayListenerExpr(InverseBinding inverseBinding)", "class_method_signature": "ExprModel.twoWayListenerExpr(InverseBinding inverseBinding)", "testcase": false, "constructor": false}, {"identifier": "getBindingExpressions", "parameters": "()", "modifiers": "public", "return": "List<Expr>", "signature": "List<Expr> getBindingExpressions()", "full_signature": "public List<Expr> getBindingExpressions()", "class_method_signature": "ExprModel.getBindingExpressions()", "testcase": false, "constructor": false}, {"identifier": "addImport", "parameters": "(String alias, String type, Location location)", "modifiers": "public", "return": "StaticIdentifierExpr", "signature": "StaticIdentifierExpr addImport(String alias, String type, Location location)", "full_signature": "public StaticIdentifierExpr addImport(String alias, String type, Location location)", "class_method_signature": "ExprModel.addImport(String alias, String type, Location location)", "testcase": false, "constructor": false}, {"identifier": "getImports", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getImports()", "full_signature": "public Map<String, String> getImports()", "class_method_signature": "ExprModel.getImports()", "testcase": false, "constructor": false}, {"identifier": "bindingExpr", "parameters": "(Expr bindingExpr)", "modifiers": "public", "return": "Expr", "signature": "Expr bindingExpr(Expr bindingExpr)", "full_signature": "public Expr bindingExpr(Expr bindingExpr)", "class_method_signature": "ExprModel.bindingExpr(Expr bindingExpr)", "testcase": false, "constructor": false}, {"identifier": "removeExpr", "parameters": "(Expr expr)", "modifiers": "public", "return": "void", "signature": "void removeExpr(Expr expr)", "full_signature": "public void removeExpr(Expr expr)", "class_method_signature": "ExprModel.removeExpr(Expr expr)", "testcase": false, "constructor": false}, {"identifier": "getObservables", "parameters": "()", "modifiers": "public", "return": "List<Expr>", "signature": "List<Expr> getObservables()", "full_signature": "public List<Expr> getObservables()", "class_method_signature": "ExprModel.getObservables()", "testcase": false, "constructor": false}, {"identifier": "seal", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void seal()", "full_signature": "public void seal()", "class_method_signature": "ExprModel.seal()", "testcase": false, "constructor": false}, {"identifier": "updateExpressions", "parameters": "(ModelAnalyzer modelAnalyzer)", "modifiers": "private", "return": "void", "signature": "void updateExpressions(ModelAnalyzer modelAnalyzer)", "full_signature": "private void updateExpressions(ModelAnalyzer modelAnalyzer)", "class_method_signature": "ExprModel.updateExpressions(ModelAnalyzer modelAnalyzer)", "testcase": false, "constructor": false}, {"identifier": "getFlagBucketCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFlagBucketCount()", "full_signature": "public int getFlagBucketCount()", "class_method_signature": "ExprModel.getFlagBucketCount()", "testcase": false, "constructor": false}, {"identifier": "getTotalFlagCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalFlagCount()", "full_signature": "public int getTotalFlagCount()", "class_method_signature": "ExprModel.getTotalFlagCount()", "testcase": false, "constructor": false}, {"identifier": "getInvalidateableFieldLimit", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInvalidateableFieldLimit()", "full_signature": "public int getInvalidateableFieldLimit()", "class_method_signature": "ExprModel.getInvalidateableFieldLimit()", "testcase": false, "constructor": false}, {"identifier": "getFlagMapping", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getFlagMapping()", "full_signature": "public String[] getFlagMapping()", "class_method_signature": "ExprModel.getFlagMapping()", "testcase": false, "constructor": false}, {"identifier": "getFlag", "parameters": "(int id)", "modifiers": "public", "return": "String", "signature": "String getFlag(int id)", "full_signature": "public String getFlag(int id)", "class_method_signature": "ExprModel.getFlag(int id)", "testcase": false, "constructor": false}, {"identifier": "filterNonObservableIds", "parameters": "(final ModelAnalyzer modelAnalyzer)", "modifiers": "private", "return": "List<Expr>", "signature": "List<Expr> filterNonObservableIds(final ModelAnalyzer modelAnalyzer)", "full_signature": "private List<Expr> filterNonObservableIds(final ModelAnalyzer modelAnalyzer)", "class_method_signature": "ExprModel.filterNonObservableIds(final ModelAnalyzer modelAnalyzer)", "testcase": false, "constructor": false}, {"identifier": "filterObservables", "parameters": "(final ModelAnalyzer modelAnalyzer)", "modifiers": "private", "return": "Iterable<Expr>", "signature": "Iterable<Expr> filterObservables(final ModelAnalyzer modelAnalyzer)", "full_signature": "private Iterable<Expr> filterObservables(final ModelAnalyzer modelAnalyzer)", "class_method_signature": "ExprModel.filterObservables(final ModelAnalyzer modelAnalyzer)", "testcase": false, "constructor": false}, {"identifier": "getPendingExpressions", "parameters": "()", "modifiers": "public", "return": "List<Expr>", "signature": "List<Expr> getPendingExpressions()", "full_signature": "public List<Expr> getPendingExpressions()", "class_method_signature": "ExprModel.getPendingExpressions()", "testcase": false, "constructor": false}, {"identifier": "markBitsRead", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean markBitsRead()", "full_signature": "public boolean markBitsRead()", "class_method_signature": "ExprModel.markBitsRead()", "testcase": false, "constructor": false}, {"identifier": "pruneDone", "parameters": "(List<Expr> markedSomeFlagsAsRead)", "modifiers": "private", "return": "boolean", "signature": "boolean pruneDone(List<Expr> markedSomeFlagsAsRead)", "full_signature": "private boolean pruneDone(List<Expr> markedSomeFlagsAsRead)", "class_method_signature": "ExprModel.pruneDone(List<Expr> markedSomeFlagsAsRead)", "testcase": false, "constructor": false}, {"identifier": "hasConditionalOrNestedCannotReadDependency", "parameters": "(Expr expr)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasConditionalOrNestedCannotReadDependency(Expr expr)", "full_signature": "private static boolean hasConditionalOrNestedCannotReadDependency(Expr expr)", "class_method_signature": "ExprModel.hasConditionalOrNestedCannotReadDependency(Expr expr)", "testcase": false, "constructor": false}, {"identifier": "filterShouldRead", "parameters": "(Iterable<Expr> exprs)", "modifiers": "public static", "return": "ArrayList<Expr>", "signature": "ArrayList<Expr> filterShouldRead(Iterable<Expr> exprs)", "full_signature": "public static ArrayList<Expr> filterShouldRead(Iterable<Expr> exprs)", "class_method_signature": "ExprModel.filterShouldRead(Iterable<Expr> exprs)", "testcase": false, "constructor": false}, {"identifier": "findFlagExpression", "parameters": "(int flag)", "modifiers": "public", "return": "Expr", "signature": "Expr findFlagExpression(int flag)", "full_signature": "public Expr findFlagExpression(int flag)", "class_method_signature": "ExprModel.findFlagExpression(int flag)", "testcase": false, "constructor": false}, {"identifier": "getInvalidateAnyBitSet", "parameters": "()", "modifiers": "public", "return": "BitSet", "signature": "BitSet getInvalidateAnyBitSet()", "full_signature": "public BitSet getInvalidateAnyBitSet()", "class_method_signature": "ExprModel.getInvalidateAnyBitSet()", "testcase": false, "constructor": false}, {"identifier": "getInvalidateAnyFlagIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInvalidateAnyFlagIndex()", "full_signature": "public int getInvalidateAnyFlagIndex()", "class_method_signature": "ExprModel.getInvalidateAnyFlagIndex()", "testcase": false, "constructor": false}, {"identifier": "argListExpr", "parameters": "(Iterable<Expr> expressions)", "modifiers": "public", "return": "Expr", "signature": "Expr argListExpr(Iterable<Expr> expressions)", "full_signature": "public Expr argListExpr(Iterable<Expr> expressions)", "class_method_signature": "ExprModel.argListExpr(Iterable<Expr> expressions)", "testcase": false, "constructor": false}, {"identifier": "setCurrentLocationInFile", "parameters": "(Location location)", "modifiers": "public", "return": "void", "signature": "void setCurrentLocationInFile(Location location)", "full_signature": "public void setCurrentLocationInFile(Location location)", "class_method_signature": "ExprModel.setCurrentLocationInFile(Location location)", "testcase": false, "constructor": false}, {"identifier": "listenerExpr", "parameters": "(Expr expression, String name, ModelClass listenerType,\n            ModelMethod listenerMethod)", "modifiers": "public", "return": "Expr", "signature": "Expr listenerExpr(Expr expression, String name, ModelClass listenerType,\n            ModelMethod listenerMethod)", "full_signature": "public Expr listenerExpr(Expr expression, String name, ModelClass listenerType,\n            ModelMethod listenerMethod)", "class_method_signature": "ExprModel.listenerExpr(Expr expression, String name, ModelClass listenerType,\n            ModelMethod listenerMethod)", "testcase": false, "constructor": false}, {"identifier": "assignment", "parameters": "(Expr target, String name, Expr value)", "modifiers": "public", "return": "FieldAssignmentExpr", "signature": "FieldAssignmentExpr assignment(Expr target, String name, Expr value)", "full_signature": "public FieldAssignmentExpr assignment(Expr target, String name, Expr value)", "class_method_signature": "ExprModel.assignment(Expr target, String name, Expr value)", "testcase": false, "constructor": false}, {"identifier": "getCallbackWrappers", "parameters": "()", "modifiers": "public", "return": "Map<String, CallbackWrapper>", "signature": "Map<String, CallbackWrapper> getCallbackWrappers()", "full_signature": "public Map<String, CallbackWrapper> getCallbackWrappers()", "class_method_signature": "ExprModel.getCallbackWrappers()", "testcase": false, "constructor": false}, {"identifier": "callbackWrapper", "parameters": "(ModelClass klass, ModelMethod method)", "modifiers": "public", "return": "CallbackWrapper", "signature": "CallbackWrapper callbackWrapper(ModelClass klass, ModelMethod method)", "full_signature": "public CallbackWrapper callbackWrapper(ModelClass klass, ModelMethod method)", "class_method_signature": "ExprModel.callbackWrapper(ModelClass klass, ModelMethod method)", "testcase": false, "constructor": false}, {"identifier": "lambdaExpr", "parameters": "(Expr expr, CallbackExprModel callbackExprModel)", "modifiers": "public", "return": "LambdaExpr", "signature": "LambdaExpr lambdaExpr(Expr expr, CallbackExprModel callbackExprModel)", "full_signature": "public LambdaExpr lambdaExpr(Expr expr, CallbackExprModel callbackExprModel)", "class_method_signature": "ExprModel.lambdaExpr(Expr expr, CallbackExprModel callbackExprModel)", "testcase": false, "constructor": false}, {"identifier": "findIdentifier", "parameters": "(String name)", "modifiers": "public", "return": "IdentifierExpr", "signature": "IdentifierExpr findIdentifier(String name)", "full_signature": "public IdentifierExpr findIdentifier(String name)", "class_method_signature": "ExprModel.findIdentifier(String name)", "testcase": false, "constructor": false}], "file": "android/databinding/tool/expr/ExprModel.java"}, "focal_method": {"identifier": "register", "parameters": "(T expr)", "modifiers": "public", "return": "T", "body": "public <T extends Expr> T register(T expr) {\n        Preconditions.check(!mSealed, \"Cannot add expressions to a model after it is sealed\");\n        Location location = null;\n        if (mCurrentParserContext != null) {\n            location = new Location(mCurrentParserContext);\n            location.setParentLocation(mCurrentLocationInFile);\n        }\n        //noinspection unchecked\n        T existing = (T) mExprMap.get(expr.getUniqueKey());\n        if (existing != null) {\n            Preconditions.check(expr.getParents().isEmpty(),\n                    \"If an expression already exists, it should've never been added to a parent,\"\n                            + \"if thats the case, somewhere we are creating an expression w/o\"\n                            + \"calling expression model\");\n            // tell the expr that it is being swapped so that if it was added to some other expr\n            // as a parent, those can swap their references\n            expr.onSwappedWith(existing);\n            if (location != null) {\n                existing.addLocation(location);\n            }\n            return existing;\n        }\n        mExprMap.put(expr.getUniqueKey(), expr);\n        expr.setModel(this);\n        if (location != null) {\n            expr.addLocation(location);\n        }\n        return expr;\n    }", "signature": "T register(T expr)", "full_signature": "public T register(T expr)", "class_method_signature": "ExprModel.register(T expr)", "testcase": false, "constructor": false, "invocations": ["check", "setParentLocation", "get", "getUniqueKey", "check", "isEmpty", "getParents", "onSwappedWith", "addLocation", "put", "getUniqueKey", "setModel", "addLocation"]}, "repository": {"repo_id": 109116423, "url": "https://github.com/AndroidSDKSources/android-sdk-sources-for-api-level-26", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 29147, "license": "licensed"}}