{"test_class": {"identifier": "XONValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final XONValidator validator = new XONValidator();", "modifier": "private static final", "type": "XONValidator", "declarator": "validator = new XONValidator()", "var_name": "validator"}], "file": "commons/ihe/xds/src/test/java/org/openehealth/ipf/commons/ihe/xds/core/validate/XONValidatorTest.java"}, "test_case": {"identifier": "testValidateGoodCases", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateGoodCases() throws XDSMetaDataException {\n        validator.validate(\"Some Hospital^^^^^&1.2.3.4.5.6.7.8.9.1789&ISO^^^^45\");\n        validator.validate(\"Some Hospital^^^^^^^^^1.2.3.4.5.6.7.8.9.1789.45\");\n        validator.validate(\"Some Hospital\");\n    }", "signature": "void testValidateGoodCases()", "full_signature": "@Test public void testValidateGoodCases()", "class_method_signature": "XONValidatorTest.testValidateGoodCases()", "testcase": true, "constructor": false, "invocations": ["validate", "validate", "validate"]}, "focal_class": {"identifier": "XONValidator", "superclass": "", "interfaces": "implements ValueValidator", "fields": [{"original_string": "private static final OIDValidator OID_VALIDATOR = new OIDValidator();", "modifier": "private static final", "type": "OIDValidator", "declarator": "OID_VALIDATOR = new OIDValidator()", "var_name": "OID_VALIDATOR"}, {"original_string": "private static final HDValidator HD_VALIDATOR = new HDValidator();", "modifier": "private static final", "type": "HDValidator", "declarator": "HD_VALIDATOR = new HDValidator()", "var_name": "HD_VALIDATOR"}], "methods": [{"identifier": "validate", "parameters": "(String hl7XON)", "modifiers": "@Override public", "return": "void", "signature": "void validate(String hl7XON)", "full_signature": "@Override public void validate(String hl7XON)", "class_method_signature": "XONValidator.validate(String hl7XON)", "testcase": false, "constructor": false}], "file": "commons/ihe/xds/src/main/java/org/openehealth/ipf/commons/ihe/xds/core/validate/XONValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(String hl7XON)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(String hl7XON) throws XDSMetaDataException {\n        Organization organization = Hl7v2Based.parse(hl7XON, Organization.class);\n        metaDataAssert(organization != null, ORGANIZATION_NAME_MISSING, hl7XON);\n\n        XON xon = organization.getHapiObject();\n        metaDataAssert(isNotEmpty(xon.getXon1_OrganizationName().getValue()), ORGANIZATION_NAME_MISSING, hl7XON);\n\n        HD hd = xon.getXon6_AssigningAuthority();\n        if (HD_VALIDATOR.isEmpty(hd)) {\n            String idNumber = xon.getXon10_OrganizationIdentifier().getValue();\n            if (isNotEmpty(idNumber)) {\n                OID_VALIDATOR.validate(idNumber);\n            }\n        } else {\n            HD_VALIDATOR.validate(hd, hl7XON);\n        }\n\n        metaDataAssert(countMatches(hl7XON, \"^\") <= 9, ORGANIZATION_TOO_MANY_COMPONENTS);\n        metaDataAssert(isEmpty(xon.getXon2_OrganizationNameTypeCode().getValue()), ORGANIZATION_TOO_MANY_COMPONENTS);\n        metaDataAssert(isEmpty(xon.getXon3_IDNumber().getValue()), ORGANIZATION_TOO_MANY_COMPONENTS);\n        metaDataAssert(isEmpty(xon.getXon4_CheckDigit().getValue()), ORGANIZATION_TOO_MANY_COMPONENTS);\n        metaDataAssert(isEmpty(xon.getXon5_CheckDigitScheme().getValue()), ORGANIZATION_TOO_MANY_COMPONENTS);\n        metaDataAssert(isEmpty(xon.getXon7_IdentifierTypeCode().getValue()), ORGANIZATION_TOO_MANY_COMPONENTS);\n        metaDataAssert(HD_VALIDATOR.isEmpty(xon.getXon8_AssigningFacility()), ORGANIZATION_TOO_MANY_COMPONENTS);\n        metaDataAssert(isEmpty(xon.getXon9_NameRepresentationCode().getValue()), ORGANIZATION_TOO_MANY_COMPONENTS);\n    }", "signature": "void validate(String hl7XON)", "full_signature": "@Override public void validate(String hl7XON)", "class_method_signature": "XONValidator.validate(String hl7XON)", "testcase": false, "constructor": false, "invocations": ["parse", "metaDataAssert", "getHapiObject", "metaDataAssert", "isNotEmpty", "getValue", "getXon1_OrganizationName", "getXon6_AssigningAuthority", "isEmpty", "getValue", "getXon10_OrganizationIdentifier", "isNotEmpty", "validate", "validate", "metaDataAssert", "countMatches", "metaDataAssert", "isEmpty", "getValue", "getXon2_OrganizationNameTypeCode", "metaDataAssert", "isEmpty", "getValue", "getXon3_IDNumber", "metaDataAssert", "isEmpty", "getValue", "getXon4_CheckDigit", "metaDataAssert", "isEmpty", "getValue", "getXon5_CheckDigitScheme", "metaDataAssert", "isEmpty", "getValue", "getXon7_IdentifierTypeCode", "metaDataAssert", "isEmpty", "getXon8_AssigningFacility", "metaDataAssert", "isEmpty", "getValue", "getXon9_NameRepresentationCode"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}