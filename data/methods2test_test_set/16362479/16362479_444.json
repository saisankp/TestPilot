{"test_class": {"identifier": "SimpleShardDataTreeCohortTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ShardDataTree mockShardDataTree;", "modifier": "@Mock\n    private", "type": "ShardDataTree", "declarator": "mockShardDataTree", "var_name": "mockShardDataTree"}, {"original_string": "@Mock\n    private DataTreeModification mockModification;", "modifier": "@Mock\n    private", "type": "DataTreeModification", "declarator": "mockModification", "var_name": "mockModification"}, {"original_string": "@Mock\n    private CompositeDataTreeCohort mockUserCohorts;", "modifier": "@Mock\n    private", "type": "CompositeDataTreeCohort", "declarator": "mockUserCohorts", "var_name": "mockUserCohorts"}, {"original_string": "@Mock\n    private FutureCallback<DataTreeCandidate> mockPreCallback;", "modifier": "@Mock\n    private", "type": "FutureCallback<DataTreeCandidate>", "declarator": "mockPreCallback", "var_name": "mockPreCallback"}, {"original_string": "private SimpleShardDataTreeCohort cohort;", "modifier": "private", "type": "SimpleShardDataTreeCohort", "declarator": "cohort", "var_name": "cohort"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/SimpleShardDataTreeCohortTest.java"}, "test_case": {"identifier": "testAbortWithCohorts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAbortWithCohorts() throws Exception {\n        doReturn(true).when(mockShardDataTree).startAbort(cohort);\n\n        doReturn(Optional.of(CompletableFuture.completedFuture(null))).when(mockUserCohorts).abort();\n\n        final Future<?> abortFuture = abort(cohort);\n\n        abortFuture.get();\n        verify(mockShardDataTree).startAbort(cohort);\n    }", "signature": "void testAbortWithCohorts()", "full_signature": "@Test public void testAbortWithCohorts()", "class_method_signature": "SimpleShardDataTreeCohortTest.testAbortWithCohorts()", "testcase": true, "constructor": false, "invocations": ["startAbort", "when", "doReturn", "abort", "when", "doReturn", "of", "completedFuture", "abort", "get", "startAbort", "verify"]}, "focal_class": {"identifier": "SimpleShardDataTreeCohort", "superclass": "extends ShardDataTreeCohort", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SimpleShardDataTreeCohort.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SimpleShardDataTreeCohort.class)", "var_name": "LOG"}, {"original_string": "private final DataTreeModification transaction;", "modifier": "private final", "type": "DataTreeModification", "declarator": "transaction", "var_name": "transaction"}, {"original_string": "private final ShardDataTree dataTree;", "modifier": "private final", "type": "ShardDataTree", "declarator": "dataTree", "var_name": "dataTree"}, {"original_string": "private final TransactionIdentifier transactionId;", "modifier": "private final", "type": "TransactionIdentifier", "declarator": "transactionId", "var_name": "transactionId"}, {"original_string": "private final CompositeDataTreeCohort userCohorts;", "modifier": "private final", "type": "CompositeDataTreeCohort", "declarator": "userCohorts", "var_name": "userCohorts"}, {"original_string": "private final @Nullable SortedSet<String> participatingShardNames;", "modifier": "private final @Nullable", "type": "SortedSet<String>", "declarator": "participatingShardNames", "var_name": "participatingShardNames"}, {"original_string": "private State state = State.READY;", "modifier": "private", "type": "State", "declarator": "state = State.READY", "var_name": "state"}, {"original_string": "private DataTreeCandidateTip candidate;", "modifier": "private", "type": "DataTreeCandidateTip", "declarator": "candidate", "var_name": "candidate"}, {"original_string": "private FutureCallback<?> callback;", "modifier": "private", "type": "FutureCallback<?>", "declarator": "callback", "var_name": "callback"}, {"original_string": "private Exception nextFailure;", "modifier": "private", "type": "Exception", "declarator": "nextFailure", "var_name": "nextFailure"}], "methods": [{"identifier": "SimpleShardDataTreeCohort", "parameters": "(final ShardDataTree dataTree, final DataTreeModification transaction,\n            final TransactionIdentifier transactionId, final CompositeDataTreeCohort userCohorts,\n            final Optional<SortedSet<String>> participatingShardNames)", "modifiers": "", "return": "", "signature": " SimpleShardDataTreeCohort(final ShardDataTree dataTree, final DataTreeModification transaction,\n            final TransactionIdentifier transactionId, final CompositeDataTreeCohort userCohorts,\n            final Optional<SortedSet<String>> participatingShardNames)", "full_signature": "  SimpleShardDataTreeCohort(final ShardDataTree dataTree, final DataTreeModification transaction,\n            final TransactionIdentifier transactionId, final CompositeDataTreeCohort userCohorts,\n            final Optional<SortedSet<String>> participatingShardNames)", "class_method_signature": "SimpleShardDataTreeCohort.SimpleShardDataTreeCohort(final ShardDataTree dataTree, final DataTreeModification transaction,\n            final TransactionIdentifier transactionId, final CompositeDataTreeCohort userCohorts,\n            final Optional<SortedSet<String>> participatingShardNames)", "testcase": false, "constructor": true}, {"identifier": "SimpleShardDataTreeCohort", "parameters": "(final ShardDataTree dataTree, final DataTreeModification transaction,\n        final TransactionIdentifier transactionId, final Exception nextFailure)", "modifiers": "", "return": "", "signature": " SimpleShardDataTreeCohort(final ShardDataTree dataTree, final DataTreeModification transaction,\n        final TransactionIdentifier transactionId, final Exception nextFailure)", "full_signature": "  SimpleShardDataTreeCohort(final ShardDataTree dataTree, final DataTreeModification transaction,\n        final TransactionIdentifier transactionId, final Exception nextFailure)", "class_method_signature": "SimpleShardDataTreeCohort.SimpleShardDataTreeCohort(final ShardDataTree dataTree, final DataTreeModification transaction,\n        final TransactionIdentifier transactionId, final Exception nextFailure)", "testcase": false, "constructor": true}, {"identifier": "getIdentifier", "parameters": "()", "modifiers": "@Override public", "return": "TransactionIdentifier", "signature": "TransactionIdentifier getIdentifier()", "full_signature": "@Override public TransactionIdentifier getIdentifier()", "class_method_signature": "SimpleShardDataTreeCohort.getIdentifier()", "testcase": false, "constructor": false}, {"identifier": "getCandidate", "parameters": "()", "modifiers": "@Override", "return": "DataTreeCandidateTip", "signature": "DataTreeCandidateTip getCandidate()", "full_signature": "@Override DataTreeCandidateTip getCandidate()", "class_method_signature": "SimpleShardDataTreeCohort.getCandidate()", "testcase": false, "constructor": false}, {"identifier": "getDataTreeModification", "parameters": "()", "modifiers": "@Override", "return": "DataTreeModification", "signature": "DataTreeModification getDataTreeModification()", "full_signature": "@Override DataTreeModification getDataTreeModification()", "class_method_signature": "SimpleShardDataTreeCohort.getDataTreeModification()", "testcase": false, "constructor": false}, {"identifier": "getParticipatingShardNames", "parameters": "()", "modifiers": "@Override", "return": "Optional<SortedSet<String>>", "signature": "Optional<SortedSet<String>> getParticipatingShardNames()", "full_signature": "@Override Optional<SortedSet<String>> getParticipatingShardNames()", "class_method_signature": "SimpleShardDataTreeCohort.getParticipatingShardNames()", "testcase": false, "constructor": false}, {"identifier": "checkState", "parameters": "(final State expected)", "modifiers": "private", "return": "void", "signature": "void checkState(final State expected)", "full_signature": "private void checkState(final State expected)", "class_method_signature": "SimpleShardDataTreeCohort.checkState(final State expected)", "testcase": false, "constructor": false}, {"identifier": "canCommit", "parameters": "(final FutureCallback<Void> newCallback)", "modifiers": "@Override public", "return": "void", "signature": "void canCommit(final FutureCallback<Void> newCallback)", "full_signature": "@Override public void canCommit(final FutureCallback<Void> newCallback)", "class_method_signature": "SimpleShardDataTreeCohort.canCommit(final FutureCallback<Void> newCallback)", "testcase": false, "constructor": false}, {"identifier": "preCommit", "parameters": "(final FutureCallback<DataTreeCandidate> newCallback)", "modifiers": "@Override public", "return": "void", "signature": "void preCommit(final FutureCallback<DataTreeCandidate> newCallback)", "full_signature": "@Override public void preCommit(final FutureCallback<DataTreeCandidate> newCallback)", "class_method_signature": "SimpleShardDataTreeCohort.preCommit(final FutureCallback<DataTreeCandidate> newCallback)", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "(final FutureCallback<Void> abortCallback)", "modifiers": "@Override public", "return": "void", "signature": "void abort(final FutureCallback<Void> abortCallback)", "full_signature": "@Override public void abort(final FutureCallback<Void> abortCallback)", "class_method_signature": "SimpleShardDataTreeCohort.abort(final FutureCallback<Void> abortCallback)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(final FutureCallback<UnsignedLong> newCallback)", "modifiers": "@Override public", "return": "void", "signature": "void commit(final FutureCallback<UnsignedLong> newCallback)", "full_signature": "@Override public void commit(final FutureCallback<UnsignedLong> newCallback)", "class_method_signature": "SimpleShardDataTreeCohort.commit(final FutureCallback<UnsignedLong> newCallback)", "testcase": false, "constructor": false}, {"identifier": "switchState", "parameters": "(final State newState)", "modifiers": "private", "return": "FutureCallback<T>", "signature": "FutureCallback<T> switchState(final State newState)", "full_signature": "private FutureCallback<T> switchState(final State newState)", "class_method_signature": "SimpleShardDataTreeCohort.switchState(final State newState)", "testcase": false, "constructor": false}, {"identifier": "setNewCandidate", "parameters": "(final DataTreeCandidateTip dataTreeCandidate)", "modifiers": "", "return": "void", "signature": "void setNewCandidate(final DataTreeCandidateTip dataTreeCandidate)", "full_signature": " void setNewCandidate(final DataTreeCandidateTip dataTreeCandidate)", "class_method_signature": "SimpleShardDataTreeCohort.setNewCandidate(final DataTreeCandidateTip dataTreeCandidate)", "testcase": false, "constructor": false}, {"identifier": "successfulCanCommit", "parameters": "()", "modifiers": "", "return": "void", "signature": "void successfulCanCommit()", "full_signature": " void successfulCanCommit()", "class_method_signature": "SimpleShardDataTreeCohort.successfulCanCommit()", "testcase": false, "constructor": false}, {"identifier": "failedCanCommit", "parameters": "(final Exception cause)", "modifiers": "", "return": "void", "signature": "void failedCanCommit(final Exception cause)", "full_signature": " void failedCanCommit(final Exception cause)", "class_method_signature": "SimpleShardDataTreeCohort.failedCanCommit(final Exception cause)", "testcase": false, "constructor": false}, {"identifier": "userPreCommit", "parameters": "(final DataTreeCandidate dataTreeCandidate, final FutureCallback<Void> futureCallback)", "modifiers": "", "return": "void", "signature": "void userPreCommit(final DataTreeCandidate dataTreeCandidate, final FutureCallback<Void> futureCallback)", "full_signature": " void userPreCommit(final DataTreeCandidate dataTreeCandidate, final FutureCallback<Void> futureCallback)", "class_method_signature": "SimpleShardDataTreeCohort.userPreCommit(final DataTreeCandidate dataTreeCandidate, final FutureCallback<Void> futureCallback)", "testcase": false, "constructor": false}, {"identifier": "doUserPreCommit", "parameters": "(final FutureCallback<Void> futureCallback)", "modifiers": "private", "return": "void", "signature": "void doUserPreCommit(final FutureCallback<Void> futureCallback)", "full_signature": "private void doUserPreCommit(final FutureCallback<Void> futureCallback)", "class_method_signature": "SimpleShardDataTreeCohort.doUserPreCommit(final FutureCallback<Void> futureCallback)", "testcase": false, "constructor": false}, {"identifier": "successfulPreCommit", "parameters": "(final DataTreeCandidateTip dataTreeCandidate)", "modifiers": "", "return": "void", "signature": "void successfulPreCommit(final DataTreeCandidateTip dataTreeCandidate)", "full_signature": " void successfulPreCommit(final DataTreeCandidateTip dataTreeCandidate)", "class_method_signature": "SimpleShardDataTreeCohort.successfulPreCommit(final DataTreeCandidateTip dataTreeCandidate)", "testcase": false, "constructor": false}, {"identifier": "failedPreCommit", "parameters": "(final Throwable cause)", "modifiers": "", "return": "void", "signature": "void failedPreCommit(final Throwable cause)", "full_signature": " void failedPreCommit(final Throwable cause)", "class_method_signature": "SimpleShardDataTreeCohort.failedPreCommit(final Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "successfulCommit", "parameters": "(final UnsignedLong journalIndex, final Runnable onComplete)", "modifiers": "", "return": "void", "signature": "void successfulCommit(final UnsignedLong journalIndex, final Runnable onComplete)", "full_signature": " void successfulCommit(final UnsignedLong journalIndex, final Runnable onComplete)", "class_method_signature": "SimpleShardDataTreeCohort.successfulCommit(final UnsignedLong journalIndex, final Runnable onComplete)", "testcase": false, "constructor": false}, {"identifier": "finishSuccessfulCommit", "parameters": "(final UnsignedLong journalIndex, final Runnable onComplete)", "modifiers": "private", "return": "void", "signature": "void finishSuccessfulCommit(final UnsignedLong journalIndex, final Runnable onComplete)", "full_signature": "private void finishSuccessfulCommit(final UnsignedLong journalIndex, final Runnable onComplete)", "class_method_signature": "SimpleShardDataTreeCohort.finishSuccessfulCommit(final UnsignedLong journalIndex, final Runnable onComplete)", "testcase": false, "constructor": false}, {"identifier": "failedCommit", "parameters": "(final Exception cause)", "modifiers": "", "return": "void", "signature": "void failedCommit(final Exception cause)", "full_signature": " void failedCommit(final Exception cause)", "class_method_signature": "SimpleShardDataTreeCohort.failedCommit(final Exception cause)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "@Override public", "return": "State", "signature": "State getState()", "full_signature": "@Override public State getState()", "class_method_signature": "SimpleShardDataTreeCohort.getState()", "testcase": false, "constructor": false}, {"identifier": "reportFailure", "parameters": "(final Exception cause)", "modifiers": "", "return": "void", "signature": "void reportFailure(final Exception cause)", "full_signature": " void reportFailure(final Exception cause)", "class_method_signature": "SimpleShardDataTreeCohort.reportFailure(final Exception cause)", "testcase": false, "constructor": false}, {"identifier": "isFailed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isFailed()", "full_signature": "@Override public boolean isFailed()", "class_method_signature": "SimpleShardDataTreeCohort.isFailed()", "testcase": false, "constructor": false}, {"identifier": "addToStringAttributes", "parameters": "(final ToStringHelper toStringHelper)", "modifiers": "@Override", "return": "ToStringHelper", "signature": "ToStringHelper addToStringAttributes(final ToStringHelper toStringHelper)", "full_signature": "@Override ToStringHelper addToStringAttributes(final ToStringHelper toStringHelper)", "class_method_signature": "SimpleShardDataTreeCohort.addToStringAttributes(final ToStringHelper toStringHelper)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/SimpleShardDataTreeCohort.java"}, "focal_method": {"identifier": "abort", "parameters": "(final FutureCallback<Void> abortCallback)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void abort(final FutureCallback<Void> abortCallback) {\n        if (!dataTree.startAbort(this)) {\n            abortCallback.onSuccess(null);\n            return;\n        }\n\n        candidate = null;\n        state = State.ABORTED;\n\n        final Optional<CompletionStage<?>> maybeAborts = userCohorts.abort();\n        if (!maybeAborts.isPresent()) {\n            abortCallback.onSuccess(null);\n            return;\n        }\n\n        maybeAborts.get().whenComplete((noop, failure) -> {\n            if (failure != null) {\n                abortCallback.onFailure(failure);\n            } else {\n                abortCallback.onSuccess(null);\n            }\n        });\n    }", "signature": "void abort(final FutureCallback<Void> abortCallback)", "full_signature": "@Override public void abort(final FutureCallback<Void> abortCallback)", "class_method_signature": "SimpleShardDataTreeCohort.abort(final FutureCallback<Void> abortCallback)", "testcase": false, "constructor": false, "invocations": ["startAbort", "onSuccess", "abort", "isPresent", "onSuccess", "whenComplete", "get", "onFailure", "onSuccess"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}