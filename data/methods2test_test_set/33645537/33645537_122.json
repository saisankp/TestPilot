{"test_class": {"identifier": "BinaryTreeDepthTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BinaryTreeDepth binaryTreeDepth;", "modifier": "private", "type": "BinaryTreeDepth", "declarator": "binaryTreeDepth", "var_name": "binaryTreeDepth"}], "file": "algs/src/test/java/com/github/pedrovgs/problem19/BinaryTreeDepthTest.java"}, "test_case": {"identifier": "shouldNotAcceptNullBinaryNodes", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullBinaryNodes() {\n    binaryTreeDepth.get(null);\n  }", "signature": "void shouldNotAcceptNullBinaryNodes()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullBinaryNodes()", "class_method_signature": "BinaryTreeDepthTest.shouldNotAcceptNullBinaryNodes()", "testcase": true, "constructor": false, "invocations": ["get"]}, "focal_class": {"identifier": "BinaryTreeDepth", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "get", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "int", "signature": "int get(BinaryNode root)", "full_signature": "public int get(BinaryNode root)", "class_method_signature": "BinaryTreeDepth.get(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getInner", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "int", "signature": "int getInner(BinaryNode root)", "full_signature": "private int getInner(BinaryNode root)", "class_method_signature": "BinaryTreeDepth.getInner(BinaryNode root)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem19/BinaryTreeDepth.java"}, "focal_method": {"identifier": "get", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "int", "body": "public int get(BinaryNode root) {\n    if (root == null) {\n      throw new IllegalArgumentException(\"You can't pass a null BinaryNode as parameter\");\n    }\n    return getInner(root);\n  }", "signature": "int get(BinaryNode root)", "full_signature": "public int get(BinaryNode root)", "class_method_signature": "BinaryTreeDepth.get(BinaryNode root)", "testcase": false, "constructor": false, "invocations": ["getInner"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}