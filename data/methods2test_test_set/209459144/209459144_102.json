{"test_class": {"identifier": "ProjectServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ProjectServiceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ProjectServiceTest.class)", "var_name": "LOG"}, {"original_string": "ProjectService projectService = new ProjectService();", "modifier": "", "type": "ProjectService", "declarator": "projectService = new ProjectService()", "var_name": "projectService"}], "file": "submarine-server/server-core/src/test/java/org/apache/submarine/server/workbench/database/service/ProjectServiceTest.java"}, "test_case": {"identifier": "delete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void delete() throws Exception {\n    ProjectFiles projectFiles = new ProjectFiles();\n    projectFiles.setFileContent(\"ProjectServiceTest-FileContent\");\n    projectFiles.setFileName(\"ProjectServiceTest-FileName\");\n    projectFiles.setCreateBy(\"ProjectServiceTest-UserName\");\n\n    Project project = new Project();\n    project.setDescription(\"ProjectServiceTest-Description\");\n    project.setName(\"ProjectServiceTest-ProjectName\");\n    project.setType(\"PROJECT_TYPE_NOTEBOOK\");\n    project.setUserName(\"ProjectServiceTest-UserName\");\n    project.setVisibility(\"PROJECT_VISIBILITY_PRIVATE\");\n    project.setCreateBy(\"ProjectServiceTest-UserName\");\n    List list = new ArrayList<ProjectFiles>();\n    list.add(projectFiles);\n    project.setProjectFilesList(list);\n\n    Boolean ret = projectService.add(project);\n    assertTrue(ret);\n\n    Boolean deleteRet = projectService.delete(project.getId());\n    assertTrue(deleteRet);\n\n    List<Project> projectList = projectService.queryPageList(\"ProjectServiceTest-UserName\",\n        \"create_time\", \"desc\", 0, 100);\n    assertEquals(projectList.size(), 0);\n\n    ProjectFilesService projectFilesService = new ProjectFilesService();\n    List<ProjectFiles> projectFilesList = projectFilesService.queryList(project.getId());\n    assertEquals(projectFilesList.size(), 0);\n  }", "signature": "void delete()", "full_signature": "@Test public void delete()", "class_method_signature": "ProjectServiceTest.delete()", "testcase": true, "constructor": false, "invocations": ["setFileContent", "setFileName", "setCreateBy", "setDescription", "setName", "setType", "setUserName", "setVisibility", "setCreateBy", "add", "setProjectFilesList", "add", "assertTrue", "delete", "getId", "assertTrue", "queryPageList", "assertEquals", "size", "queryList", "getId", "assertEquals", "size"]}, "focal_class": {"identifier": "ProjectService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ProjectService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ProjectService.class)", "var_name": "LOG"}], "methods": [{"identifier": "queryPageList", "parameters": "(String userName,\n                                     String column,\n                                     String order,\n                                     int pageNo,\n                                     int pageSize)", "modifiers": "public", "return": "List<Project>", "signature": "List<Project> queryPageList(String userName,\n                                     String column,\n                                     String order,\n                                     int pageNo,\n                                     int pageSize)", "full_signature": "public List<Project> queryPageList(String userName,\n                                     String column,\n                                     String order,\n                                     int pageNo,\n                                     int pageSize)", "class_method_signature": "ProjectService.queryPageList(String userName,\n                                     String column,\n                                     String order,\n                                     int pageNo,\n                                     int pageSize)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Project project)", "modifiers": "public", "return": "boolean", "signature": "boolean add(Project project)", "full_signature": "public boolean add(Project project)", "class_method_signature": "ProjectService.add(Project project)", "testcase": false, "constructor": false}, {"identifier": "updateByPrimaryKeySelective", "parameters": "(Project project)", "modifiers": "public", "return": "boolean", "signature": "boolean updateByPrimaryKeySelective(Project project)", "full_signature": "public boolean updateByPrimaryKeySelective(Project project)", "class_method_signature": "ProjectService.updateByPrimaryKeySelective(Project project)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String id)", "modifiers": "public", "return": "boolean", "signature": "boolean delete(String id)", "full_signature": "public boolean delete(String id)", "class_method_signature": "ProjectService.delete(String id)", "testcase": false, "constructor": false}], "file": "submarine-server/server-core/src/main/java/org/apache/submarine/server/workbench/database/service/ProjectService.java"}, "focal_method": {"identifier": "delete", "parameters": "(String id)", "modifiers": "public", "return": "boolean", "body": "public boolean delete(String id) throws Exception {\n    LOG.info(\"delete({})\", id);\n    try (SqlSession sqlSession = MyBatisUtil.getSqlSession()) {\n      ProjectMapper projectMapper = sqlSession.getMapper(ProjectMapper.class);\n      projectMapper.deleteByPrimaryKey(id);\n\n      ProjectFilesMapper projectFilesMapper = sqlSession.getMapper(ProjectFilesMapper.class);\n      ProjectFiles projectFiles = new ProjectFiles();\n      projectFiles.setProjectId(id);\n      projectFilesMapper.deleteSelective(projectFiles);\n      sqlSession.commit();\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      throw new Exception(e);\n    }\n    return true;\n  }", "signature": "boolean delete(String id)", "full_signature": "public boolean delete(String id)", "class_method_signature": "ProjectService.delete(String id)", "testcase": false, "constructor": false, "invocations": ["info", "getSqlSession", "getMapper", "deleteByPrimaryKey", "getMapper", "setProjectId", "deleteSelective", "commit", "error", "getMessage"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}