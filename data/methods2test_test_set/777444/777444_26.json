{"test_class": {"identifier": "KeyStoreUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CA_CERT_SUBJECT_DN_CN = \"CN=ca.test.jolokia.org\";", "modifier": "public static final", "type": "String", "declarator": "CA_CERT_SUBJECT_DN_CN = \"CN=ca.test.jolokia.org\"", "var_name": "CA_CERT_SUBJECT_DN_CN"}, {"original_string": "public static final String SERVER_CERT_SUBJECT_DN = \"CN=Server Cert signed and with extended key usage server, C=DE, ST=Franconia, L=Pegnitz, OU=Test, O=jolokia.org\";", "modifier": "public static final", "type": "String", "declarator": "SERVER_CERT_SUBJECT_DN = \"CN=Server Cert signed and with extended key usage server, C=DE, ST=Franconia, L=Pegnitz, OU=Test, O=jolokia.org\"", "var_name": "SERVER_CERT_SUBJECT_DN"}, {"original_string": "public static final String CA_ALIAS = \"cn=ca.test.jolokia.org,c=de,st=bavaria,l=pegnitz,1.2.840.113549.1.9.1=#1612726f6c616e64406a6f6c6f6b69612e6f7267,ou=dev,o=jolokia\";", "modifier": "public static final", "type": "String", "declarator": "CA_ALIAS = \"cn=ca.test.jolokia.org,c=de,st=bavaria,l=pegnitz,1.2.840.113549.1.9.1=#1612726f6c616e64406a6f6c6f6b69612e6f7267,ou=dev,o=jolokia\"", "var_name": "CA_ALIAS"}, {"original_string": "public static final String SERVER_ALIAS = \"cn=server cert signed and with extended key usage server,c=de,st=franconia,l=pegnitz,ou=test,o=jolokia.org\";", "modifier": "public static final", "type": "String", "declarator": "SERVER_ALIAS = \"cn=server cert signed and with extended key usage server,c=de,st=franconia,l=pegnitz,ou=test,o=jolokia.org\"", "var_name": "SERVER_ALIAS"}], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/security/KeyStoreUtilTest.java"}, "test_case": {"identifier": "testSelfSignedCertificate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSelfSignedCertificate() throws Exception {\n        KeyStore keystore = createKeyStore();\n        KeyStoreUtil.updateWithSelfSignedServerCertificate(keystore);\n        X509Certificate cert = (X509Certificate) keystore.getCertificate(\"jolokia-agent\");\n        assertNotNull(cert);\n        assertEquals(cert.getSubjectDN().getName(), \"CN=Jolokia Agent \" + Version.getAgentVersion() + \", OU=JVM, O=jolokia.org, L=Pegnitz, ST=Franconia, C=DE\");\n        assertEquals(cert.getSubjectDN(), cert.getIssuerDN());\n    }", "signature": "void testSelfSignedCertificate()", "full_signature": "@Test public void testSelfSignedCertificate()", "class_method_signature": "KeyStoreUtilTest.testSelfSignedCertificate()", "testcase": true, "constructor": false, "invocations": ["createKeyStore", "updateWithSelfSignedServerCertificate", "getCertificate", "assertNotNull", "assertEquals", "getName", "getSubjectDN", "getAgentVersion", "assertEquals", "getSubjectDN", "getIssuerDN"]}, "focal_class": {"identifier": "KeyStoreUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String KEYGEN_CLASS_JDK8_SUN = \"sun.security.tools.keytool.CertAndKeyGen\";", "modifier": "private static final", "type": "String", "declarator": "KEYGEN_CLASS_JDK8_SUN = \"sun.security.tools.keytool.CertAndKeyGen\"", "var_name": "KEYGEN_CLASS_JDK8_SUN"}, {"original_string": "private static final String KEYGEN_CLASS_JDK7_SUN = \"sun.security.x509.CertAndKeyGen\";", "modifier": "private static final", "type": "String", "declarator": "KEYGEN_CLASS_JDK7_SUN = \"sun.security.x509.CertAndKeyGen\"", "var_name": "KEYGEN_CLASS_JDK7_SUN"}, {"original_string": "private static final String KEYGEN_CLASS_JDK8_IBM = \"com.ibm.security.tools.CertAndKeyGen\";", "modifier": "private static final", "type": "String", "declarator": "KEYGEN_CLASS_JDK8_IBM = \"com.ibm.security.tools.CertAndKeyGen\"", "var_name": "KEYGEN_CLASS_JDK8_IBM"}, {"original_string": "private static final String KEYGEN_CLASS_JDK7_IBM = \"com.ibm.security.x509.CertAndKeyGen\";", "modifier": "private static final", "type": "String", "declarator": "KEYGEN_CLASS_JDK7_IBM = \"com.ibm.security.x509.CertAndKeyGen\"", "var_name": "KEYGEN_CLASS_JDK7_IBM"}, {"original_string": "private static final String X500_NAME_SUN = \"sun.security.x509.X500Name\";", "modifier": "private static final", "type": "String", "declarator": "X500_NAME_SUN = \"sun.security.x509.X500Name\"", "var_name": "X500_NAME_SUN"}, {"original_string": "private static final String X500_NAME_IBM = \"com.ibm.security.x509.X500Name\";", "modifier": "private static final", "type": "String", "declarator": "X500_NAME_IBM = \"com.ibm.security.x509.X500Name\"", "var_name": "X500_NAME_IBM"}], "methods": [{"identifier": "KeyStoreUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " KeyStoreUtil()", "full_signature": "private  KeyStoreUtil()", "class_method_signature": "KeyStoreUtil.KeyStoreUtil()", "testcase": false, "constructor": true}, {"identifier": "updateWithCaPem", "parameters": "(KeyStore pTrustStore, File pCaCert)", "modifiers": "public static", "return": "void", "signature": "void updateWithCaPem(KeyStore pTrustStore, File pCaCert)", "full_signature": "public static void updateWithCaPem(KeyStore pTrustStore, File pCaCert)", "class_method_signature": "KeyStoreUtil.updateWithCaPem(KeyStore pTrustStore, File pCaCert)", "testcase": false, "constructor": false}, {"identifier": "updateWithServerPems", "parameters": "(KeyStore pKeyStore, File pServerCert, File pServerKey, String pKeyAlgo, char[] pPassword)", "modifiers": "public static", "return": "void", "signature": "void updateWithServerPems(KeyStore pKeyStore, File pServerCert, File pServerKey, String pKeyAlgo, char[] pPassword)", "full_signature": "public static void updateWithServerPems(KeyStore pKeyStore, File pServerCert, File pServerKey, String pKeyAlgo, char[] pPassword)", "class_method_signature": "KeyStoreUtil.updateWithServerPems(KeyStore pKeyStore, File pServerCert, File pServerKey, String pKeyAlgo, char[] pPassword)", "testcase": false, "constructor": false}, {"identifier": "updateWithSelfSignedServerCertificate", "parameters": "(KeyStore pKeyStore)", "modifiers": "public static", "return": "void", "signature": "void updateWithSelfSignedServerCertificate(KeyStore pKeyStore)", "full_signature": "public static void updateWithSelfSignedServerCertificate(KeyStore pKeyStore)", "class_method_signature": "KeyStoreUtil.updateWithSelfSignedServerCertificate(KeyStore pKeyStore)", "testcase": false, "constructor": false}, {"identifier": "createKeyPair", "parameters": "()", "modifiers": "private static", "return": "Object", "signature": "Object createKeyPair()", "full_signature": "private static Object createKeyPair()", "class_method_signature": "KeyStoreUtil.createKeyPair()", "testcase": false, "constructor": false}, {"identifier": "getSelfCertificate", "parameters": "(Object keypair, Object x500Name, Date date, long l)", "modifiers": "private static", "return": "X509Certificate", "signature": "X509Certificate getSelfCertificate(Object keypair, Object x500Name, Date date, long l)", "full_signature": "private static X509Certificate getSelfCertificate(Object keypair, Object x500Name, Date date, long l)", "class_method_signature": "KeyStoreUtil.getSelfCertificate(Object keypair, Object x500Name, Date date, long l)", "testcase": false, "constructor": false}, {"identifier": "getPrivateKey", "parameters": "(Object keypair)", "modifiers": "private static", "return": "PrivateKey", "signature": "PrivateKey getPrivateKey(Object keypair)", "full_signature": "private static PrivateKey getPrivateKey(Object keypair)", "class_method_signature": "KeyStoreUtil.getPrivateKey(Object keypair)", "testcase": false, "constructor": false}, {"identifier": "lookupKeyGenClass", "parameters": "()", "modifiers": "private static", "return": "Class", "signature": "Class lookupKeyGenClass()", "full_signature": "private static Class lookupKeyGenClass()", "class_method_signature": "KeyStoreUtil.lookupKeyGenClass()", "testcase": false, "constructor": false}, {"identifier": "decodePem", "parameters": "(File pemFile)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] decodePem(File pemFile)", "full_signature": "private static byte[] decodePem(File pemFile)", "class_method_signature": "KeyStoreUtil.decodePem(File pemFile)", "testcase": false, "constructor": false}, {"identifier": "readBytes", "parameters": "(File pemFile, BufferedReader reader, String endMarker)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] readBytes(File pemFile, BufferedReader reader, String endMarker)", "full_signature": "private static byte[] readBytes(File pemFile, BufferedReader reader, String endMarker)", "class_method_signature": "KeyStoreUtil.readBytes(File pemFile, BufferedReader reader, String endMarker)", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/security/KeyStoreUtil.java"}, "focal_method": {"identifier": "updateWithSelfSignedServerCertificate", "parameters": "(KeyStore pKeyStore)", "modifiers": "public static", "return": "void", "body": "public static void updateWithSelfSignedServerCertificate(KeyStore pKeyStore)\n            throws NoSuchProviderException, NoSuchAlgorithmException, IOException,\n                   InvalidKeyException, CertificateException, SignatureException, KeyStoreException {\n\n        final Object x500Name;\n        final Object[] certAttributes = { \"Jolokia Agent \" + Version.getAgentVersion(), // CN\n                                          \"JVM\",                                        // OU\n                                          \"jolokia.org\",                                // O\n                                          \"Pegnitz\",                                    // L\n                                          \"Franconia\",                                  // ST\n                                          \"DE\" };\n        if (ClassUtil.checkForClass(X500_NAME_SUN)) {\n            x500Name = ClassUtil.newInstance(X500_NAME_SUN, certAttributes);\n        } else if (ClassUtil.checkForClass(X500_NAME_IBM)) {\n            x500Name = ClassUtil.newInstance(X500_NAME_IBM, certAttributes);\n        } else {\n            throw new IllegalStateException(\"Neither Sun- nor IBM-style JVM found.\");\n        }\n\n        // Need to do it via reflection because Java8 moved class to a different package\n        Object keypair = createKeyPair();\n        PrivateKey privKey = getPrivateKey(keypair);\n\n        X509Certificate[] chain = new X509Certificate[1];\n        chain[0] = getSelfCertificate(keypair, x500Name, new Date(), (long) 3650 * 24 * 60 * 60);\n        pKeyStore.setKeyEntry(\"jolokia-agent\", privKey, new char[0], chain);\n    }", "signature": "void updateWithSelfSignedServerCertificate(KeyStore pKeyStore)", "full_signature": "public static void updateWithSelfSignedServerCertificate(KeyStore pKeyStore)", "class_method_signature": "KeyStoreUtil.updateWithSelfSignedServerCertificate(KeyStore pKeyStore)", "testcase": false, "constructor": false, "invocations": ["getAgentVersion", "checkForClass", "newInstance", "checkForClass", "newInstance", "createKeyPair", "getPrivateKey", "getSelfCertificate", "setKeyEntry"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}