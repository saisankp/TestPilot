{"test_class": {"identifier": "ShamirTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final public static EcCurve curve = CommonConfiguration.CURVE;", "modifier": "final public static", "type": "EcCurve", "declarator": "curve = CommonConfiguration.CURVE", "var_name": "curve"}, {"original_string": "final public static BigInteger r = curve.getR();", "modifier": "final public static", "type": "BigInteger", "declarator": "r = curve.getR()", "var_name": "r"}, {"original_string": "final public static EcPoint G = curve.getG();", "modifier": "final public static", "type": "EcPoint", "declarator": "G = curve.getG()", "var_name": "G"}], "file": "pross-common/src/test/java/com/ibm/pross/common/util/shamir/ShamirTest.java"}, "test_case": {"identifier": "testComputeSharePublicKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testComputeSharePublicKeys() {\n\t\tfail(\"Not yet implemented\");\n\t}", "signature": "void testComputeSharePublicKeys()", "full_signature": "@Test public void testComputeSharePublicKeys()", "class_method_signature": "ShamirTest.testComputeSharePublicKeys()", "testcase": true, "constructor": false, "invocations": ["fail"]}, "focal_class": {"identifier": "Shamir", "superclass": "", "interfaces": "", "fields": [{"original_string": "final public static EcCurve curve = CommonConfiguration.CURVE;", "modifier": "final public static", "type": "EcCurve", "declarator": "curve = CommonConfiguration.CURVE", "var_name": "curve"}, {"original_string": "final public static BigInteger r = curve.getR();", "modifier": "final public static", "type": "BigInteger", "declarator": "r = curve.getR()", "var_name": "r"}, {"original_string": "final public static EcPoint G = curve.getG();", "modifier": "final public static", "type": "EcPoint", "declarator": "G = curve.getG()", "var_name": "G"}], "methods": [{"identifier": "generateCoefficients", "parameters": "(final int threshold)", "modifiers": "public static", "return": "BigInteger[]", "signature": "BigInteger[] generateCoefficients(final int threshold)", "full_signature": "public static BigInteger[] generateCoefficients(final int threshold)", "class_method_signature": "Shamir.generateCoefficients(final int threshold)", "testcase": false, "constructor": false}, {"identifier": "generateCoefficients", "parameters": "(final int threshold, final int indexOfZero)", "modifiers": "public static", "return": "BigInteger[]", "signature": "BigInteger[] generateCoefficients(final int threshold, final int indexOfZero)", "full_signature": "public static BigInteger[] generateCoefficients(final int threshold, final int indexOfZero)", "class_method_signature": "Shamir.generateCoefficients(final int threshold, final int indexOfZero)", "testcase": false, "constructor": false}, {"identifier": "generateFeldmanValues", "parameters": "(final BigInteger[] coefficients)", "modifiers": "public static", "return": "EcPoint[]", "signature": "EcPoint[] generateFeldmanValues(final BigInteger[] coefficients)", "full_signature": "public static EcPoint[] generateFeldmanValues(final BigInteger[] coefficients)", "class_method_signature": "Shamir.generateFeldmanValues(final BigInteger[] coefficients)", "testcase": false, "constructor": false}, {"identifier": "generateFeldmanValues", "parameters": "(final BigInteger[] coefficients, final EcPoint base)", "modifiers": "public static", "return": "EcPoint[]", "signature": "EcPoint[] generateFeldmanValues(final BigInteger[] coefficients, final EcPoint base)", "full_signature": "public static EcPoint[] generateFeldmanValues(final BigInteger[] coefficients, final EcPoint base)", "class_method_signature": "Shamir.generateFeldmanValues(final BigInteger[] coefficients, final EcPoint base)", "testcase": false, "constructor": false}, {"identifier": "generateShares", "parameters": "(final BigInteger[] coefficients, final int n)", "modifiers": "public static", "return": "ShamirShare[]", "signature": "ShamirShare[] generateShares(final BigInteger[] coefficients, final int n)", "full_signature": "public static ShamirShare[] generateShares(final BigInteger[] coefficients, final int n)", "class_method_signature": "Shamir.generateShares(final BigInteger[] coefficients, final int n)", "testcase": false, "constructor": false}, {"identifier": "verifyShamirShareConsistency", "parameters": "(final ShamirShare share, final EcPoint[] feldmanValues)", "modifiers": "public static", "return": "void", "signature": "void verifyShamirShareConsistency(final ShamirShare share, final EcPoint[] feldmanValues)", "full_signature": "public static void verifyShamirShareConsistency(final ShamirShare share, final EcPoint[] feldmanValues)", "class_method_signature": "Shamir.verifyShamirShareConsistency(final ShamirShare share, final EcPoint[] feldmanValues)", "testcase": false, "constructor": false}, {"identifier": "computeSharePublicKeys", "parameters": "(final EcPoint[] feldmanValues, final int n)", "modifiers": "public static", "return": "EcPoint[]", "signature": "EcPoint[] computeSharePublicKeys(final EcPoint[] feldmanValues, final int n)", "full_signature": "public static EcPoint[] computeSharePublicKeys(final EcPoint[] feldmanValues, final int n)", "class_method_signature": "Shamir.computeSharePublicKeys(final EcPoint[] feldmanValues, final int n)", "testcase": false, "constructor": false}, {"identifier": "computeSharePublicKey", "parameters": "(final EcPoint[] feldmanValues, final int xPosition)", "modifiers": "public static", "return": "EcPoint", "signature": "EcPoint computeSharePublicKey(final EcPoint[] feldmanValues, final int xPosition)", "full_signature": "public static EcPoint computeSharePublicKey(final EcPoint[] feldmanValues, final int xPosition)", "class_method_signature": "Shamir.computeSharePublicKey(final EcPoint[] feldmanValues, final int xPosition)", "testcase": false, "constructor": false}], "file": "pross-common/src/main/java/com/ibm/pross/common/util/shamir/Shamir.java"}, "focal_method": {"identifier": "computeSharePublicKeys", "parameters": "(final EcPoint[] feldmanValues, final int n)", "modifiers": "public static", "return": "EcPoint[]", "body": "public static EcPoint[] computeSharePublicKeys(final EcPoint[] feldmanValues, final int n) {\n\n\t\tfinal EcPoint[] sharePublicKeys = new EcPoint[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tsharePublicKeys[i] = computeSharePublicKey(feldmanValues, i+1);\n\t\t}\n\n\t\treturn sharePublicKeys;\n\t}", "signature": "EcPoint[] computeSharePublicKeys(final EcPoint[] feldmanValues, final int n)", "full_signature": "public static EcPoint[] computeSharePublicKeys(final EcPoint[] feldmanValues, final int n)", "class_method_signature": "Shamir.computeSharePublicKeys(final EcPoint[] feldmanValues, final int n)", "testcase": false, "constructor": false, "invocations": ["computeSharePublicKey"]}, "repository": {"repo_id": 144309611, "url": "https://github.com/jasonkresch/protect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 38, "size": 1932, "license": "licensed"}}