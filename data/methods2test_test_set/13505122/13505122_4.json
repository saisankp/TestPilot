{"test_class": {"identifier": "ThreadsTopologyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Tested private ThreadsTopology topology;", "modifier": "@Tested private", "type": "ThreadsTopology", "declarator": "topology", "var_name": "topology"}, {"original_string": "@Mocked private ThreadsEntranceProcessingItem entrancePi;", "modifier": "@Mocked private", "type": "ThreadsEntranceProcessingItem", "declarator": "entrancePi", "var_name": "entrancePi"}, {"original_string": "@Mocked private EntranceProcessor entranceProcessor;", "modifier": "@Mocked private", "type": "EntranceProcessor", "declarator": "entranceProcessor", "var_name": "entranceProcessor"}], "file": "samoa-threads/src/test/java/com/yahoo/labs/samoa/topology/impl/ThreadsTopologyTest.java"}, "test_case": {"identifier": "testRunWithoutEntrancePI", "parameters": "()", "modifiers": "@Test(expected=IllegalStateException.class) public", "return": "void", "body": "@Test(expected=IllegalStateException.class)\n\tpublic void testRunWithoutEntrancePI() {\n\t\ttopology.run();\n\t}", "signature": "void testRunWithoutEntrancePI()", "full_signature": "@Test(expected=IllegalStateException.class) public void testRunWithoutEntrancePI()", "class_method_signature": "ThreadsTopologyTest.testRunWithoutEntrancePI()", "testcase": true, "constructor": false, "invocations": ["run"]}, "focal_class": {"identifier": "ThreadsTopology", "superclass": "extends AbstractTopology", "interfaces": "", "fields": [], "methods": [{"identifier": "ThreadsTopology", "parameters": "(String name)", "modifiers": "", "return": "", "signature": " ThreadsTopology(String name)", "full_signature": "  ThreadsTopology(String name)", "class_method_signature": "ThreadsTopology.ThreadsTopology(String name)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "ThreadsTopology.run()", "testcase": false, "constructor": false}, {"identifier": "setupProcessingItemInstances", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupProcessingItemInstances()", "full_signature": "private void setupProcessingItemInstances()", "class_method_signature": "ThreadsTopology.setupProcessingItemInstances()", "testcase": false, "constructor": false}], "file": "samoa-threads/src/main/java/com/yahoo/labs/samoa/topology/impl/ThreadsTopology.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void run() {\n    \tif (this.getEntranceProcessingItems() == null)\n    \t\tthrow new IllegalStateException(\"You need to set entrance PI before running the topology.\");\n    \tif (this.getEntranceProcessingItems().size() != 1)\n    \t\tthrow new IllegalStateException(\"ThreadsTopology supports 1 entrance PI only. Number of entrance PIs is \"+this.getEntranceProcessingItems().size());\n    \t\n    \tthis.setupProcessingItemInstances();\n    \tThreadsEntranceProcessingItem entrancePi = (ThreadsEntranceProcessingItem) this.getEntranceProcessingItems().toArray()[0];\n    \tif (entrancePi == null)\n            throw new IllegalStateException(\"You need to set entrance PI before running the topology.\");\n    \tentrancePi.getProcessor().onCreate(0); // id=0 as it is not used in simple mode\n        entrancePi.startSendingEvents();\n    }", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "ThreadsTopology.run()", "testcase": false, "constructor": false, "invocations": ["getEntranceProcessingItems", "size", "getEntranceProcessingItems", "size", "getEntranceProcessingItems", "setupProcessingItemInstances", "toArray", "getEntranceProcessingItems", "onCreate", "getProcessor", "startSendingEvents"]}, "repository": {"repo_id": 13505122, "url": "https://github.com/YahooArchive/samoa", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 424, "size": 6642, "license": "licensed"}}