{"test_class": {"identifier": "AbstractEntityServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_ID = \"test-id\";", "modifier": "private static final", "type": "String", "declarator": "TEST_ID = \"test-id\"", "var_name": "TEST_ID"}, {"original_string": "private TestEntityService service;", "modifier": "private", "type": "TestEntityService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n    private TestGateway gateway;", "modifier": "@Mock\n    private", "type": "TestGateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "@Mock\n    private TestEntity domainEntity;", "modifier": "@Mock\n    private", "type": "TestEntity", "declarator": "domainEntity", "var_name": "domainEntity"}, {"original_string": "@Mock\n    private TestAddPayload addPayload;", "modifier": "@Mock\n    private", "type": "TestAddPayload", "declarator": "addPayload", "var_name": "addPayload"}], "file": "service/src/test/java/org/coner/core/domain/service/AbstractEntityServiceTest.java"}, "test_case": {"identifier": "whenGetByIdWithExistingIdItShouldReturnEntity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenGetByIdWithExistingIdItShouldReturnEntity() throws EntityNotFoundException {\n        when(gateway.findById(TEST_ID)).thenReturn(domainEntity);\n\n        TestEntity actual = service.getById(TEST_ID);\n\n        verify(gateway).findById(TEST_ID);\n        verifyNoMoreInteractions(gateway);\n        assertThat(actual).isSameAs(domainEntity);\n    }", "signature": "void whenGetByIdWithExistingIdItShouldReturnEntity()", "full_signature": "@Test public void whenGetByIdWithExistingIdItShouldReturnEntity()", "class_method_signature": "AbstractEntityServiceTest.whenGetByIdWithExistingIdItShouldReturnEntity()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findById", "getById", "findById", "verify", "verifyNoMoreInteractions", "isSameAs", "assertThat"]}, "focal_class": {"identifier": "AbstractEntityService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Class<DE> domainEntityClass;", "modifier": "private final", "type": "Class<DE>", "declarator": "domainEntityClass", "var_name": "domainEntityClass"}, {"original_string": "protected final G gateway;", "modifier": "protected final", "type": "G", "declarator": "gateway", "var_name": "gateway"}], "methods": [{"identifier": "AbstractEntityService", "parameters": "(Class<DE> domainEntityClass, G gateway)", "modifiers": "protected", "return": "", "signature": " AbstractEntityService(Class<DE> domainEntityClass, G gateway)", "full_signature": "protected  AbstractEntityService(Class<DE> domainEntityClass, G gateway)", "class_method_signature": "AbstractEntityService.AbstractEntityService(Class<DE> domainEntityClass, G gateway)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(AP addPayload)", "modifiers": "public", "return": "DE", "signature": "DE add(AP addPayload)", "full_signature": "public DE add(AP addPayload)", "class_method_signature": "AbstractEntityService.add(AP addPayload)", "testcase": false, "constructor": false}, {"identifier": "getById", "parameters": "(String id)", "modifiers": "public", "return": "DE", "signature": "DE getById(String id)", "full_signature": "public DE getById(String id)", "class_method_signature": "AbstractEntityService.getById(String id)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "()", "modifiers": "public", "return": "List<DE>", "signature": "List<DE> getAll()", "full_signature": "public List<DE> getAll()", "class_method_signature": "AbstractEntityService.getAll()", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/domain/service/AbstractEntityService.java"}, "focal_method": {"identifier": "getById", "parameters": "(String id)", "modifiers": "public", "return": "DE", "body": "public DE getById(String id) throws EntityNotFoundException {\n        DE entity = gateway.findById(id);\n        if (entity == null) {\n            throw new EntityNotFoundException(domainEntityClass, id);\n        }\n        return entity;\n    }", "signature": "DE getById(String id)", "full_signature": "public DE getById(String id)", "class_method_signature": "AbstractEntityService.getById(String id)", "testcase": false, "constructor": false, "invocations": ["findById"]}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}