{"test_class": {"identifier": "BatchEvaluationLoggingDecoratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock public BatchEvaluationStrategy<ResourcePool> delegate;", "modifier": "@Mock public", "type": "BatchEvaluationStrategy<ResourcePool>", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "@Mock public ProtocolCollection<ResourcePool> collection;", "modifier": "@Mock public", "type": "ProtocolCollection<ResourcePool>", "declarator": "collection", "var_name": "collection"}], "file": "core/src/test/java/dk/alexandra/fresco/logging/BatchEvaluationLoggingDecoratorTest.java"}, "test_case": {"identifier": "reset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void reset() {\n    BatchEvaluationLoggingDecorator<ResourcePool> decorator =\n        new BatchEvaluationLoggingDecorator<>(delegate);\n\n    decorator.processBatch(collection, mock(ResourcePool.class), mock(NetworkBatchDecorator.class));\n    Assert.assertEquals(1, decorator.getLoggedValues().get(\"AMOUNT_OF_BATCHES\").intValue());\n    decorator.reset();\n    Assert.assertEquals(0, decorator.getLoggedValues().get(\"AMOUNT_OF_BATCHES\").intValue());\n  }", "signature": "void reset()", "full_signature": "@Test public void reset()", "class_method_signature": "BatchEvaluationLoggingDecoratorTest.reset()", "testcase": true, "constructor": false, "invocations": ["processBatch", "mock", "mock", "assertEquals", "intValue", "get", "getLoggedValues", "reset", "assertEquals", "intValue", "get", "getLoggedValues"]}, "focal_class": {"identifier": "BatchEvaluationLoggingDecorator", "superclass": "", "interfaces": "implements BatchEvaluationStrategy<ResourcePoolT>, PerformanceLogger", "fields": [{"original_string": "public static final String BATCH_COUNTER = \"AMOUNT_OF_BATCHES\";", "modifier": "public static final", "type": "String", "declarator": "BATCH_COUNTER = \"AMOUNT_OF_BATCHES\"", "var_name": "BATCH_COUNTER"}, {"original_string": "public static final String BATCH_NATIVE_PROTOCOLS = \"TOTAL_AMOUNT\";", "modifier": "public static final", "type": "String", "declarator": "BATCH_NATIVE_PROTOCOLS = \"TOTAL_AMOUNT\"", "var_name": "BATCH_NATIVE_PROTOCOLS"}, {"original_string": "public static final String BATCH_MIN_PROTOCOLS = \"MIN_AMOUNT_PER_BATCH\";", "modifier": "public static final", "type": "String", "declarator": "BATCH_MIN_PROTOCOLS = \"MIN_AMOUNT_PER_BATCH\"", "var_name": "BATCH_MIN_PROTOCOLS"}, {"original_string": "public static final String BATCH_MAX_PROTOCOLS = \"MAX_AMOUNT_PER_BATCH\";", "modifier": "public static final", "type": "String", "declarator": "BATCH_MAX_PROTOCOLS = \"MAX_AMOUNT_PER_BATCH\"", "var_name": "BATCH_MAX_PROTOCOLS"}, {"original_string": "private BatchEvaluationStrategy<ResourcePoolT> delegate;", "modifier": "private", "type": "BatchEvaluationStrategy<ResourcePoolT>", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private long counter = 0;", "modifier": "private", "type": "long", "declarator": "counter = 0", "var_name": "counter"}, {"original_string": "private long noNativeProtocols = 0;", "modifier": "private", "type": "long", "declarator": "noNativeProtocols = 0", "var_name": "noNativeProtocols"}, {"original_string": "private long minNoNativeProtocolsPerBatch = Integer.MAX_VALUE;", "modifier": "private", "type": "long", "declarator": "minNoNativeProtocolsPerBatch = Integer.MAX_VALUE", "var_name": "minNoNativeProtocolsPerBatch"}, {"original_string": "private long maxNoNativeProtocolsPerBatch = 0;", "modifier": "private", "type": "long", "declarator": "maxNoNativeProtocolsPerBatch = 0", "var_name": "maxNoNativeProtocolsPerBatch"}], "methods": [{"identifier": "BatchEvaluationLoggingDecorator", "parameters": "(\n      BatchEvaluationStrategy<ResourcePoolT> batchEvaluation)", "modifiers": "public", "return": "", "signature": " BatchEvaluationLoggingDecorator(\n      BatchEvaluationStrategy<ResourcePoolT> batchEvaluation)", "full_signature": "public  BatchEvaluationLoggingDecorator(\n      BatchEvaluationStrategy<ResourcePoolT> batchEvaluation)", "class_method_signature": "BatchEvaluationLoggingDecorator.BatchEvaluationLoggingDecorator(\n      BatchEvaluationStrategy<ResourcePoolT> batchEvaluation)", "testcase": false, "constructor": true}, {"identifier": "processBatch", "parameters": "(\n      ProtocolCollection<ResourcePoolT> protocols, ResourcePoolT resourcePool,\n      NetworkBatchDecorator network)", "modifiers": "@Override public", "return": "void", "signature": "void processBatch(\n      ProtocolCollection<ResourcePoolT> protocols, ResourcePoolT resourcePool,\n      NetworkBatchDecorator network)", "full_signature": "@Override public void processBatch(\n      ProtocolCollection<ResourcePoolT> protocols, ResourcePoolT resourcePool,\n      NetworkBatchDecorator network)", "class_method_signature": "BatchEvaluationLoggingDecorator.processBatch(\n      ProtocolCollection<ResourcePoolT> protocols, ResourcePoolT resourcePool,\n      NetworkBatchDecorator network)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "BatchEvaluationLoggingDecorator.reset()", "testcase": false, "constructor": false}, {"identifier": "getLoggedValues", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Long>", "signature": "Map<String, Long> getLoggedValues()", "full_signature": "@Override public Map<String, Long> getLoggedValues()", "class_method_signature": "BatchEvaluationLoggingDecorator.getLoggedValues()", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/logging/BatchEvaluationLoggingDecorator.java"}, "focal_method": {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void reset() {\n    counter = 0;\n    noNativeProtocols = 0;\n    minNoNativeProtocolsPerBatch = Integer.MAX_VALUE;\n    maxNoNativeProtocolsPerBatch = 0;\n  }", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "BatchEvaluationLoggingDecorator.reset()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}