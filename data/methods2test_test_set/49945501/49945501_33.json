{"test_class": {"identifier": "RequestFieldTest", "superclass": "", "interfaces": "", "fields": [], "file": "request-parameters/src/test/java/eu/neoteric/starter/request/RequestFieldTest.java"}, "test_case": {"identifier": "testTwoDifferentObjectsEqualsWhenSameNameGiven", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTwoDifferentObjectsEqualsWhenSameNameGiven() throws Exception {\n        RequestField requestField = RequestField.of(\"foo\");\n        assertThat(requestField).isEqualTo(RequestField.of(\"foo\"));\n    }", "signature": "void testTwoDifferentObjectsEqualsWhenSameNameGiven()", "full_signature": "@Test public void testTwoDifferentObjectsEqualsWhenSameNameGiven()", "class_method_signature": "RequestFieldTest.testTwoDifferentObjectsEqualsWhenSameNameGiven()", "testcase": true, "constructor": false, "invocations": ["of", "isEqualTo", "assertThat", "of"]}, "focal_class": {"identifier": "RequestField", "superclass": "", "interfaces": "implements RequestObject", "fields": [{"original_string": "private final String fieldName;", "modifier": "private final", "type": "String", "declarator": "fieldName", "var_name": "fieldName"}], "methods": [{"identifier": "RequestField", "parameters": "(String fieldName)", "modifiers": "private", "return": "", "signature": " RequestField(String fieldName)", "full_signature": "private  RequestField(String fieldName)", "class_method_signature": "RequestField.RequestField(String fieldName)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(String fieldName)", "modifiers": "public static", "return": "RequestField", "signature": "RequestField of(String fieldName)", "full_signature": "public static RequestField of(String fieldName)", "class_method_signature": "RequestField.of(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getFieldName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFieldName()", "full_signature": "public String getFieldName()", "class_method_signature": "RequestField.getFieldName()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "RequestObjectType", "signature": "RequestObjectType getType()", "full_signature": "@Override public RequestObjectType getType()", "class_method_signature": "RequestField.getType()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RequestField.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public final boolean equals(Object o)", "class_method_signature": "RequestField.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "RequestField.hashCode()", "testcase": false, "constructor": false}], "file": "request-parameters/src/main/java/eu/neoteric/starter/request/RequestField.java"}, "focal_method": {"identifier": "of", "parameters": "(String fieldName)", "modifiers": "public static", "return": "RequestField", "body": "public static RequestField of(String fieldName) {\n        return new RequestField(fieldName);\n    }", "signature": "RequestField of(String fieldName)", "full_signature": "public static RequestField of(String fieldName)", "class_method_signature": "RequestField.of(String fieldName)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 49945501, "url": "https://github.com/neoteric-eu/neo-starters", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 969, "license": "licensed"}}