{"test_class": {"identifier": "XmlNodeConverterTest", "superclass": "extends AbstractCodecTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(XmlNodeConverterTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(XmlNodeConverterTest.class)", "var_name": "LOG"}, {"original_string": "private final NodeConverter bindingSerializer;", "modifier": "private final", "type": "NodeConverter", "declarator": "bindingSerializer", "var_name": "bindingSerializer"}], "file": "lighty-core/lighty-codecs/src/test/java/io/lighty/codecs/XmlNodeConverterTest.java"}, "test_case": {"identifier": "testSerializeRpc_in", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerializeRpc_in() throws Exception {\n        Optional<RpcDefinition> loadRpc = ConverterUtils.loadRpc(schemaContext, SIMPLE_IO_RPC_QNAME);\n        Writer serializeRpc =\n                bindingSerializer.serializeRpc(loadRpc.get().getInput(), testedSimpleRpcInputNormalizedNodes);\n        Assert.assertFalse(Strings.isNullOrEmpty(serializeRpc.toString()));\n        LOG.info(serializeRpc.toString());\n    }", "signature": "void testSerializeRpc_in()", "full_signature": "@Test public void testSerializeRpc_in()", "class_method_signature": "XmlNodeConverterTest.testSerializeRpc_in()", "testcase": true, "constructor": false, "invocations": ["loadRpc", "serializeRpc", "getInput", "get", "assertFalse", "isNullOrEmpty", "toString", "info", "toString"]}, "focal_class": {"identifier": "XmlNodeConverter", "superclass": "", "interfaces": "implements NodeConverter", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(XmlNodeConverter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(XmlNodeConverter.class)", "var_name": "LOG"}, {"original_string": "private static final XMLInputFactory XML_IN_FACTORY;", "modifier": "private static final", "type": "XMLInputFactory", "declarator": "XML_IN_FACTORY", "var_name": "XML_IN_FACTORY"}, {"original_string": "private static final XMLOutputFactory XML_OUT_FACTORY;", "modifier": "private static final", "type": "XMLOutputFactory", "declarator": "XML_OUT_FACTORY", "var_name": "XML_OUT_FACTORY"}, {"original_string": "private final SchemaContext schemaContext;", "modifier": "private final", "type": "SchemaContext", "declarator": "schemaContext", "var_name": "schemaContext"}], "methods": [{"identifier": "XmlNodeConverter", "parameters": "(final SchemaContext schemaContext)", "modifiers": "public", "return": "", "signature": " XmlNodeConverter(final SchemaContext schemaContext)", "full_signature": "public  XmlNodeConverter(final SchemaContext schemaContext)", "class_method_signature": "XmlNodeConverter.XmlNodeConverter(final SchemaContext schemaContext)", "testcase": false, "constructor": true}, {"identifier": "serializeData", "parameters": "(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "modifiers": "@Override public", "return": "Writer", "signature": "Writer serializeData(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "full_signature": "@Override public Writer serializeData(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "class_method_signature": "XmlNodeConverter.serializeData(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "testcase": false, "constructor": false}, {"identifier": "serializeRpc", "parameters": "(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "modifiers": "@Override public", "return": "Writer", "signature": "Writer serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "full_signature": "@Override public Writer serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "class_method_signature": "XmlNodeConverter.serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(final SchemaNode schemaNode, final Reader inputData)", "modifiers": "@Override public", "return": "NormalizedNode<?, ?>", "signature": "NormalizedNode<?, ?> deserialize(final SchemaNode schemaNode, final Reader inputData)", "full_signature": "@Override public NormalizedNode<?, ?> deserialize(final SchemaNode schemaNode, final Reader inputData)", "class_method_signature": "XmlNodeConverter.deserialize(final SchemaNode schemaNode, final Reader inputData)", "testcase": false, "constructor": false}, {"identifier": "createNormalizedNodeWriter", "parameters": "(final SchemaContext schemaContext,\n            final Writer backingWriter, final SchemaPath pathToParent)", "modifiers": "private static", "return": "NormalizedNodeWriter", "signature": "NormalizedNodeWriter createNormalizedNodeWriter(final SchemaContext schemaContext,\n            final Writer backingWriter, final SchemaPath pathToParent)", "full_signature": "private static NormalizedNodeWriter createNormalizedNodeWriter(final SchemaContext schemaContext,\n            final Writer backingWriter, final SchemaPath pathToParent)", "class_method_signature": "XmlNodeConverter.createNormalizedNodeWriter(final SchemaContext schemaContext,\n            final Writer backingWriter, final SchemaPath pathToParent)", "testcase": false, "constructor": false}, {"identifier": "createNormalizedNodeWriter", "parameters": "(final SchemaContext schemaContext,\n            final XMLStreamWriter backingWriter, final SchemaPath pathToParent)", "modifiers": "private static", "return": "NormalizedNodeWriter", "signature": "NormalizedNodeWriter createNormalizedNodeWriter(final SchemaContext schemaContext,\n            final XMLStreamWriter backingWriter, final SchemaPath pathToParent)", "full_signature": "private static NormalizedNodeWriter createNormalizedNodeWriter(final SchemaContext schemaContext,\n            final XMLStreamWriter backingWriter, final SchemaPath pathToParent)", "class_method_signature": "XmlNodeConverter.createNormalizedNodeWriter(final SchemaContext schemaContext,\n            final XMLStreamWriter backingWriter, final SchemaPath pathToParent)", "testcase": false, "constructor": false}, {"identifier": "createXmlStreamWriter", "parameters": "(final Writer backingWriter)", "modifiers": "private static", "return": "XMLStreamWriter", "signature": "XMLStreamWriter createXmlStreamWriter(final Writer backingWriter)", "full_signature": "private static XMLStreamWriter createXmlStreamWriter(final Writer backingWriter)", "class_method_signature": "XmlNodeConverter.createXmlStreamWriter(final Writer backingWriter)", "testcase": false, "constructor": false}, {"identifier": "closeQuietly", "parameters": "(final XMLStreamReader xmlStreamReader)", "modifiers": "public static", "return": "void", "signature": "void closeQuietly(final XMLStreamReader xmlStreamReader)", "full_signature": "public static void closeQuietly(final XMLStreamReader xmlStreamReader)", "class_method_signature": "XmlNodeConverter.closeQuietly(final XMLStreamReader xmlStreamReader)", "testcase": false, "constructor": false}], "file": "lighty-core/lighty-codecs/src/main/java/io/lighty/codecs/XmlNodeConverter.java"}, "focal_method": {"identifier": "serializeRpc", "parameters": "(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "modifiers": "@Override public", "return": "Writer", "body": "@Override\n    public Writer serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)\n            throws SerializationException {\n        Writer writer = new StringWriter();\n        XMLStreamWriter xmlStreamWriter = createXmlStreamWriter(writer);\n        URI namespace = schemaNode.getQName().getNamespace();\n        String localName = schemaNode.getQName().getLocalName();\n        try (NormalizedNodeWriter normalizedNodeWriter =\n                createNormalizedNodeWriter(schemaContext, xmlStreamWriter, schemaNode.getPath())) {\n            // the localName may be \"input\" or \"output\" - this may be changed\n            xmlStreamWriter.writeStartElement(XMLConstants.DEFAULT_NS_PREFIX, localName, namespace.toString());\n            xmlStreamWriter.writeDefaultNamespace(namespace.toString());\n            for (NormalizedNode<?, ?> child : ((ContainerNode) normalizedNode).getValue()) {\n                normalizedNodeWriter.write(child);\n            }\n            normalizedNodeWriter.flush();\n            xmlStreamWriter.writeEndElement();\n            xmlStreamWriter.flush();\n        } catch (IOException | XMLStreamException ioe) {\n            throw new SerializationException(ioe);\n        }\n        return writer;\n    }", "signature": "Writer serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "full_signature": "@Override public Writer serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "class_method_signature": "XmlNodeConverter.serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "testcase": false, "constructor": false, "invocations": ["createXmlStreamWriter", "getNamespace", "getQName", "getLocalName", "getQName", "createNormalizedNodeWriter", "getPath", "writeStartElement", "toString", "writeDefaultNamespace", "toString", "getValue", "write", "flush", "writeEndElement", "flush"]}, "repository": {"repo_id": 132660065, "url": "https://github.com/PantheonTechnologies/lighty-core", "stars": 45, "created": "5/8/2018 8:16:54 PM +00:00", "updates": "2020-01-22T13:46:21+00:00", "fork": "False", "license": "licensed"}}