{"test_class": {"identifier": "DefaultCertificateAuthorityServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CREDENTIAL_NAME = \"/expectedCredential\";", "modifier": "private static final", "type": "String", "declarator": "CREDENTIAL_NAME = \"/expectedCredential\"", "var_name": "CREDENTIAL_NAME"}, {"original_string": "private static final String TRANSITIONAL_CREDENTIAL_NAME = \"/transitionalCredential\";", "modifier": "private static final", "type": "String", "declarator": "TRANSITIONAL_CREDENTIAL_NAME = \"/transitionalCredential\"", "var_name": "TRANSITIONAL_CREDENTIAL_NAME"}, {"original_string": "private CertificateAuthorityService certificateAuthorityService;", "modifier": "private", "type": "CertificateAuthorityService", "declarator": "certificateAuthorityService", "var_name": "certificateAuthorityService"}, {"original_string": "private DefaultCertificateVersionDataService certificateVersionDataService;", "modifier": "private", "type": "DefaultCertificateVersionDataService", "declarator": "certificateVersionDataService", "var_name": "certificateVersionDataService"}, {"original_string": "private CertificateCredentialValue certificate;", "modifier": "private", "type": "CertificateCredentialValue", "declarator": "certificate", "var_name": "certificate"}, {"original_string": "private CertificateCredentialVersion certificateCredential;", "modifier": "private", "type": "CertificateCredentialVersion", "declarator": "certificateCredential", "var_name": "certificateCredential"}, {"original_string": "private CertificateCredentialVersion transitionalCertificateCredential;", "modifier": "private", "type": "CertificateCredentialVersion", "declarator": "transitionalCertificateCredential", "var_name": "transitionalCertificateCredential"}], "file": "components/credentials/src/test/java/org/cloudfoundry/credhub/services/DefaultCertificateAuthorityServiceTest.java"}, "test_case": {"identifier": "findActiveVersion_whenCredentialIsNotACa_throwsException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void findActiveVersion_whenCredentialIsNotACa_throwsException() {\n    when(certificateVersionDataService.findActive(\"actually-a-password\"))\n      .thenReturn(new PasswordCredentialVersion());\n\n    try {\n      certificateAuthorityService.findActiveVersion(\"actually-a-password\");\n    } catch (final ParameterizedValidationException pe) {\n      assertThat(pe.getMessage(), equalTo(ErrorMessages.NOT_A_CA_NAME));\n    } catch (final Exception e) {\n      fail(\"expected EntryNotFoundException, but got \" + e.getClass());\n    }\n  }", "signature": "void findActiveVersion_whenCredentialIsNotACa_throwsException()", "full_signature": "@Test public void findActiveVersion_whenCredentialIsNotACa_throwsException()", "class_method_signature": "DefaultCertificateAuthorityServiceTest.findActiveVersion_whenCredentialIsNotACa_throwsException()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findActive", "findActiveVersion", "assertThat", "getMessage", "equalTo", "fail", "getClass"]}, "focal_class": {"identifier": "DefaultCertificateAuthorityService", "superclass": "", "interfaces": "implements CertificateAuthorityService", "fields": [{"original_string": "private final DefaultCertificateVersionDataService certificateVersionDataService;", "modifier": "private final", "type": "DefaultCertificateVersionDataService", "declarator": "certificateVersionDataService", "var_name": "certificateVersionDataService"}], "methods": [{"identifier": "DefaultCertificateAuthorityService", "parameters": "(final DefaultCertificateVersionDataService certificateVersionDataService)", "modifiers": "@Autowired public", "return": "", "signature": " DefaultCertificateAuthorityService(final DefaultCertificateVersionDataService certificateVersionDataService)", "full_signature": "@Autowired public  DefaultCertificateAuthorityService(final DefaultCertificateVersionDataService certificateVersionDataService)", "class_method_signature": "DefaultCertificateAuthorityService.DefaultCertificateAuthorityService(final DefaultCertificateVersionDataService certificateVersionDataService)", "testcase": false, "constructor": true}, {"identifier": "findActiveVersion", "parameters": "(final String caName)", "modifiers": "@Override public", "return": "CertificateCredentialValue", "signature": "CertificateCredentialValue findActiveVersion(final String caName)", "full_signature": "@Override public CertificateCredentialValue findActiveVersion(final String caName)", "class_method_signature": "DefaultCertificateAuthorityService.findActiveVersion(final String caName)", "testcase": false, "constructor": false}, {"identifier": "findTransitionalVersion", "parameters": "(final String caName)", "modifiers": "@Override public", "return": "CertificateCredentialValue", "signature": "CertificateCredentialValue findTransitionalVersion(final String caName)", "full_signature": "@Override public CertificateCredentialValue findTransitionalVersion(final String caName)", "class_method_signature": "DefaultCertificateAuthorityService.findTransitionalVersion(final String caName)", "testcase": false, "constructor": false}], "file": "components/credentials/src/main/java/org/cloudfoundry/credhub/services/DefaultCertificateAuthorityService.java"}, "focal_method": {"identifier": "findActiveVersion", "parameters": "(final String caName)", "modifiers": "@Override public", "return": "CertificateCredentialValue", "body": "@Override\n  public CertificateCredentialValue findActiveVersion(final String caName) {\n    final CredentialVersion mostRecent = certificateVersionDataService.findActive(caName);\n\n    if (mostRecent == null) {\n      throw new EntryNotFoundException(ErrorMessages.Credential.CERTIFICATE_ACCESS);\n    }\n\n    if (!(mostRecent instanceof CertificateCredentialVersion)) {\n      throw new ParameterizedValidationException(ErrorMessages.NOT_A_CA_NAME);\n    }\n    final CertificateCredentialVersion certificateCredential = (CertificateCredentialVersion) mostRecent;\n\n    if (!certificateCredential.getParsedCertificate().isCa()) {\n      throw new ParameterizedValidationException(ErrorMessages.CERT_NOT_CA);\n    }\n    return new CertificateCredentialValue(\n            certificateCredential.getCertificate(),\n            certificateCredential.getPrivateKey(),\n            certificateCredential.isCertificateAuthority(),\n            certificateCredential.isSelfSigned(),\n            certificateCredential.getGenerated(),\n            certificateCredential.isVersionTransitional(),\n            certificateCredential.getVersionCreatedAt());\n\n  }", "signature": "CertificateCredentialValue findActiveVersion(final String caName)", "full_signature": "@Override public CertificateCredentialValue findActiveVersion(final String caName)", "class_method_signature": "DefaultCertificateAuthorityService.findActiveVersion(final String caName)", "testcase": false, "constructor": false, "invocations": ["findActive", "isCa", "getParsedCertificate", "getCertificate", "getPrivateKey", "isCertificateAuthority", "isSelfSigned", "getGenerated", "isVersionTransitional", "getVersionCreatedAt"]}, "repository": {"repo_id": 57061988, "url": "https://github.com/cloudfoundry-incubator/credhub", "stars": 167, "created": "4/25/2016 5:30:51 PM +00:00", "updates": "2020-01-27T21:31:19+00:00", "fork": "False", "license": "licensed"}}