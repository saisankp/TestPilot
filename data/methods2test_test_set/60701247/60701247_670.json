{"test_class": {"identifier": "AllocationInfosDataSeriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "private final FakeTransportService myTransportService = new FakeTransportService(myTimer);", "modifier": "private final", "type": "FakeTransportService", "declarator": "myTransportService = new FakeTransportService(myTimer)", "var_name": "myTransportService"}, {"original_string": "private final FakeMemoryService myService = new FakeMemoryService();", "modifier": "private final", "type": "FakeMemoryService", "declarator": "myService = new FakeMemoryService()", "var_name": "myService"}, {"original_string": "@NotNull private final FakeIdeProfilerServices myIdeProfilerServices = new FakeIdeProfilerServices();", "modifier": "@NotNull private final", "type": "FakeIdeProfilerServices", "declarator": "myIdeProfilerServices = new FakeIdeProfilerServices()", "var_name": "myIdeProfilerServices"}, {"original_string": "@Rule public FakeGrpcChannel myGrpcChannel = new FakeGrpcChannel(\"AllocationInfosDataSeriesTest\", myTransportService, myService);", "modifier": "@Rule public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel = new FakeGrpcChannel(\"AllocationInfosDataSeriesTest\", myTransportService, myService)", "var_name": "myGrpcChannel"}, {"original_string": "private MemoryProfilerStage myStage;", "modifier": "private", "type": "MemoryProfilerStage", "declarator": "myStage", "var_name": "myStage"}, {"original_string": "private final boolean myNewEventPipeline;", "modifier": "private final", "type": "boolean", "declarator": "myNewEventPipeline", "var_name": "myNewEventPipeline"}], "file": "profilers/testSrc/com/android/tools/profilers/memory/AllocationInfosDataSeriesTest.java"}, "test_case": {"identifier": "testGetDataForXRange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetDataForXRange() {\n    long startTimeUs1 = 2;\n    long endTimeUs1 = 7;\n    long startTimeUs2 = 17;\n    AllocationsInfo info1 = AllocationsInfo.newBuilder()\n      .setStartTime(TimeUnit.MICROSECONDS.toNanos(startTimeUs1)).setEndTime(TimeUnit.MICROSECONDS.toNanos(endTimeUs1)).setLegacy(true)\n      .build();\n    AllocationsInfo info2 = AllocationsInfo.newBuilder()\n      .setStartTime(TimeUnit.MICROSECONDS.toNanos(startTimeUs2)).setEndTime(Long.MAX_VALUE).setLegacy(true).build();\n\n    if (myNewEventPipeline) {\n      myTransportService.addEventToStream(ProfilersTestData.SESSION_DATA.getStreamId(),\n                                          ProfilersTestData.generateMemoryAllocationInfoData(info1.getStartTime(),\n                                                                                             ProfilersTestData.SESSION_DATA.getPid(),\n                                                                                             info1).build());\n      myTransportService.addEventToStream(ProfilersTestData.SESSION_DATA.getStreamId(),\n                                          ProfilersTestData.generateMemoryAllocationInfoData(info2.getStartTime(),\n                                                                                             ProfilersTestData.SESSION_DATA.getPid(),\n                                                                                             info2).build());\n    }\n    else {\n      MemoryData memoryData = MemoryData.newBuilder()\n        .addAllocationsInfo(info1)\n        .addAllocationsInfo(info2)\n        .build();\n      myService.setMemoryData(memoryData);\n    }\n\n    AllocationInfosDataSeries series =\n      new AllocationInfosDataSeries(new ProfilerClient(myGrpcChannel.getName()), ProfilersTestData.SESSION_DATA,\n                                    myIdeProfilerServices.getFeatureTracker(), myStage);\n    List<SeriesData<CaptureDurationData<CaptureObject>>> dataList = series.getDataForRange(new Range(0, Double.MAX_VALUE));\n\n    assertEquals(2, dataList.size());\n    SeriesData<CaptureDurationData<CaptureObject>> data1 = dataList.get(0);\n    assertEquals(startTimeUs1, data1.x);\n    assertEquals(endTimeUs1 - startTimeUs1, data1.value.getDurationUs());\n    CaptureObject capture1 = data1.value.getCaptureEntry().getCaptureObject();\n    assertEquals(TimeUnit.MICROSECONDS.toNanos(startTimeUs1), capture1.getStartTimeNs());\n    assertEquals(TimeUnit.MICROSECONDS.toNanos(endTimeUs1), capture1.getEndTimeNs());\n\n    SeriesData<CaptureDurationData<CaptureObject>> data2 = dataList.get(1);\n    assertEquals(startTimeUs2, data2.x);\n    assertEquals(Long.MAX_VALUE, data2.value.getDurationUs());\n    CaptureObject capture2 = data2.value.getCaptureEntry().getCaptureObject();\n    assertEquals(TimeUnit.MICROSECONDS.toNanos(startTimeUs2), capture2.getStartTimeNs());\n    assertEquals(Long.MAX_VALUE, capture2.getEndTimeNs());\n  }", "signature": "void testGetDataForXRange()", "full_signature": "@Test public void testGetDataForXRange()", "class_method_signature": "AllocationInfosDataSeriesTest.testGetDataForXRange()", "testcase": true, "constructor": false, "invocations": ["build", "setLegacy", "setEndTime", "setStartTime", "newBuilder", "toNanos", "toNanos", "build", "setLegacy", "setEndTime", "setStartTime", "newBuilder", "toNanos", "addEventToStream", "getStreamId", "build", "generateMemoryAllocationInfoData", "getStartTime", "getPid", "addEventToStream", "getStreamId", "build", "generateMemoryAllocationInfoData", "getStartTime", "getPid", "build", "addAllocationsInfo", "addAllocationsInfo", "newBuilder", "setMemoryData", "getName", "getFeatureTracker", "getDataForRange", "assertEquals", "size", "get", "assertEquals", "assertEquals", "getDurationUs", "getCaptureObject", "getCaptureEntry", "assertEquals", "toNanos", "getStartTimeNs", "assertEquals", "toNanos", "getEndTimeNs", "get", "assertEquals", "assertEquals", "getDurationUs", "getCaptureObject", "getCaptureEntry", "assertEquals", "toNanos", "getStartTimeNs", "assertEquals", "getEndTimeNs"]}, "focal_class": {"identifier": "AllocationInfosDataSeries", "superclass": "extends CaptureDataSeries<CaptureObject>", "interfaces": "", "fields": [{"original_string": "@Nullable private MemoryProfilerStage myStage;", "modifier": "@Nullable private", "type": "MemoryProfilerStage", "declarator": "myStage", "var_name": "myStage"}], "methods": [{"identifier": "AllocationInfosDataSeries", "parameters": "(@NotNull ProfilerClient client,\n                                   @NotNull Common.Session session,\n                                   @NotNull FeatureTracker featureTracker,\n                                   @Nullable MemoryProfilerStage stage)", "modifiers": "public", "return": "", "signature": " AllocationInfosDataSeries(@NotNull ProfilerClient client,\n                                   @NotNull Common.Session session,\n                                   @NotNull FeatureTracker featureTracker,\n                                   @Nullable MemoryProfilerStage stage)", "full_signature": "public  AllocationInfosDataSeries(@NotNull ProfilerClient client,\n                                   @NotNull Common.Session session,\n                                   @NotNull FeatureTracker featureTracker,\n                                   @Nullable MemoryProfilerStage stage)", "class_method_signature": "AllocationInfosDataSeries.AllocationInfosDataSeries(@NotNull ProfilerClient client,\n                                   @NotNull Common.Session session,\n                                   @NotNull FeatureTracker featureTracker,\n                                   @Nullable MemoryProfilerStage stage)", "testcase": false, "constructor": true}, {"identifier": "getDataForRange", "parameters": "(Range range)", "modifiers": "@Override public", "return": "List<SeriesData<CaptureDurationData<CaptureObject>>>", "signature": "List<SeriesData<CaptureDurationData<CaptureObject>>> getDataForRange(Range range)", "full_signature": "@Override public List<SeriesData<CaptureDurationData<CaptureObject>>> getDataForRange(Range range)", "class_method_signature": "AllocationInfosDataSeries.getDataForRange(Range range)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/memory/AllocationInfosDataSeries.java"}, "focal_method": {"identifier": "getDataForRange", "parameters": "(Range range)", "modifiers": "@Override public", "return": "List<SeriesData<CaptureDurationData<CaptureObject>>>", "body": "@Override\n  public List<SeriesData<CaptureDurationData<CaptureObject>>> getDataForRange(Range range) {\n    List<Memory.AllocationsInfo> infos =\n      MemoryProfiler.getAllocationInfosForSession(myClient, mySession, range, myStage.getStudioProfilers().getIdeServices());\n\n    List<SeriesData<CaptureDurationData<CaptureObject>>> seriesData = new ArrayList<>();\n    for (Memory.AllocationsInfo info : infos) {\n      long startTimeNs = info.getStartTime();\n      long durationUs = getDurationUs(startTimeNs, info.getEndTime());\n\n      seriesData.add(\n        new SeriesData<>(\n          getHostTime(startTimeNs),\n          new CaptureDurationData<>(durationUs, !info.getLegacy(), !info.getLegacy(), new CaptureEntry<>(\n            info,\n            () -> {\n              if (info.getLegacy()) {\n                return new LegacyAllocationCaptureObject(myClient, mySession, info, myFeatureTracker);\n              }\n              else {\n                return new LiveAllocationCaptureObject(myClient, mySession, startTimeNs, null, myStage);\n              }\n            }))));\n    }\n    return seriesData;\n  }", "signature": "List<SeriesData<CaptureDurationData<CaptureObject>>> getDataForRange(Range range)", "full_signature": "@Override public List<SeriesData<CaptureDurationData<CaptureObject>>> getDataForRange(Range range)", "class_method_signature": "AllocationInfosDataSeries.getDataForRange(Range range)", "testcase": false, "constructor": false, "invocations": ["getAllocationInfosForSession", "getIdeServices", "getStudioProfilers", "getStartTime", "getDurationUs", "getEndTime", "add", "getHostTime", "getLegacy", "getLegacy", "getLegacy"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}