{"test_class": {"identifier": "XMPMetaParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String XMP_WITH_XXE = \"<?xpacket begin=\\\"\\\" id=\\\"W5M0MpCehiHzreSzNTczkc9d\\\"?>\\n\"\n            + \"<!DOCTYPE foo [ <!ENTITY xxe SYSTEM \\\"./src/test/resources/com/itextpdf/xmp/impl/xxe-data.txt\\\" > ]>\\n\"\n            + \"<x:xmpmeta xmlns:x=\\\"adobe:ns:meta/\\\">\\n\"\n            + \"    <rdf:RDF xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\">\\n\"\n            + \"        <rdf:Description rdf:about=\\\"\\\" xmlns:pdfaid=\\\"http://www.aiim.org/pdfa/ns/id/\\\">\\n\"\n            + \"            <pdfaid:part>&xxe;1</pdfaid:part>\\n\"\n            + \"            <pdfaid:conformance>B</pdfaid:conformance>\\n\"\n            + \"        </rdf:Description>\\n\"\n            + \"    </rdf:RDF>\\n\"\n            + \"</x:xmpmeta>\\n\"\n            + \"<?xpacket end=\\\"r\\\"?>\";", "modifier": "private static final", "type": "String", "declarator": "XMP_WITH_XXE = \"<?xpacket begin=\\\"\\\" id=\\\"W5M0MpCehiHzreSzNTczkc9d\\\"?>\\n\"\n            + \"<!DOCTYPE foo [ <!ENTITY xxe SYSTEM \\\"./src/test/resources/com/itextpdf/xmp/impl/xxe-data.txt\\\" > ]>\\n\"\n            + \"<x:xmpmeta xmlns:x=\\\"adobe:ns:meta/\\\">\\n\"\n            + \"    <rdf:RDF xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\">\\n\"\n            + \"        <rdf:Description rdf:about=\\\"\\\" xmlns:pdfaid=\\\"http://www.aiim.org/pdfa/ns/id/\\\">\\n\"\n            + \"            <pdfaid:part>&xxe;1</pdfaid:part>\\n\"\n            + \"            <pdfaid:conformance>B</pdfaid:conformance>\\n\"\n            + \"        </rdf:Description>\\n\"\n            + \"    </rdf:RDF>\\n\"\n            + \"</x:xmpmeta>\\n\"\n            + \"<?xpacket end=\\\"r\\\"?>\"", "var_name": "XMP_WITH_XXE"}], "file": "itext/src/test/java/com/itextpdf/xmp/impl/XMPMetaParserTest.java"}, "test_case": {"identifier": "xxeTestFromByteBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void xxeTestFromByteBuffer() {\n        try {\n            XMPMetaParser.parse(XMP_WITH_XXE.getBytes(), null);\n        } catch (XMPException e) {\n            Assert.assertEquals(\"Children of resource property element must be XML elements\", e.getMessage());\n        }\n    }", "signature": "void xxeTestFromByteBuffer()", "full_signature": "@Test public void xxeTestFromByteBuffer()", "class_method_signature": "XMPMetaParserTest.xxeTestFromByteBuffer()", "testcase": true, "constructor": false, "invocations": ["parse", "getBytes", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "XMPMetaParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Object XMP_RDF = new Object();", "modifier": "private static final", "type": "Object", "declarator": "XMP_RDF = new Object()", "var_name": "XMP_RDF"}, {"original_string": "private static DocumentBuilderFactory factory = createDocumentBuilderFactory();", "modifier": "private static", "type": "DocumentBuilderFactory", "declarator": "factory = createDocumentBuilderFactory()", "var_name": "factory"}], "methods": [{"identifier": "XMPMetaParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " XMPMetaParser()", "full_signature": "private  XMPMetaParser()", "class_method_signature": "XMPMetaParser.XMPMetaParser()", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(Object input, ParseOptions options)", "modifiers": "public static", "return": "XMPMeta", "signature": "XMPMeta parse(Object input, ParseOptions options)", "full_signature": "public static XMPMeta parse(Object input, ParseOptions options)", "class_method_signature": "XMPMetaParser.parse(Object input, ParseOptions options)", "testcase": false, "constructor": false}, {"identifier": "parseXml", "parameters": "(Object input, ParseOptions options)", "modifiers": "private static", "return": "Document", "signature": "Document parseXml(Object input, ParseOptions options)", "full_signature": "private static Document parseXml(Object input, ParseOptions options)", "class_method_signature": "XMPMetaParser.parseXml(Object input, ParseOptions options)", "testcase": false, "constructor": false}, {"identifier": "parseXmlFromInputStream", "parameters": "(InputStream stream, ParseOptions options)", "modifiers": "private static", "return": "Document", "signature": "Document parseXmlFromInputStream(InputStream stream, ParseOptions options)", "full_signature": "private static Document parseXmlFromInputStream(InputStream stream, ParseOptions options)", "class_method_signature": "XMPMetaParser.parseXmlFromInputStream(InputStream stream, ParseOptions options)", "testcase": false, "constructor": false}, {"identifier": "parseXmlFromBytebuffer", "parameters": "(ByteBuffer buffer, ParseOptions options)", "modifiers": "private static", "return": "Document", "signature": "Document parseXmlFromBytebuffer(ByteBuffer buffer, ParseOptions options)", "full_signature": "private static Document parseXmlFromBytebuffer(ByteBuffer buffer, ParseOptions options)", "class_method_signature": "XMPMetaParser.parseXmlFromBytebuffer(ByteBuffer buffer, ParseOptions options)", "testcase": false, "constructor": false}, {"identifier": "parseXmlFromString", "parameters": "(String input, ParseOptions options)", "modifiers": "private static", "return": "Document", "signature": "Document parseXmlFromString(String input, ParseOptions options)", "full_signature": "private static Document parseXmlFromString(String input, ParseOptions options)", "class_method_signature": "XMPMetaParser.parseXmlFromString(String input, ParseOptions options)", "testcase": false, "constructor": false}, {"identifier": "parseInputSource", "parameters": "(InputSource source)", "modifiers": "private static", "return": "Document", "signature": "Document parseInputSource(InputSource source)", "full_signature": "private static Document parseInputSource(InputSource source)", "class_method_signature": "XMPMetaParser.parseInputSource(InputSource source)", "testcase": false, "constructor": false}, {"identifier": "findRootNode", "parameters": "(Node root, boolean xmpmetaRequired, Object[] result)", "modifiers": "private static", "return": "Object[]", "signature": "Object[] findRootNode(Node root, boolean xmpmetaRequired, Object[] result)", "full_signature": "private static Object[] findRootNode(Node root, boolean xmpmetaRequired, Object[] result)", "class_method_signature": "XMPMetaParser.findRootNode(Node root, boolean xmpmetaRequired, Object[] result)", "testcase": false, "constructor": false}, {"identifier": "createDocumentBuilderFactory", "parameters": "()", "modifiers": "private static", "return": "DocumentBuilderFactory", "signature": "DocumentBuilderFactory createDocumentBuilderFactory()", "full_signature": "private static DocumentBuilderFactory createDocumentBuilderFactory()", "class_method_signature": "XMPMetaParser.createDocumentBuilderFactory()", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/xmp/impl/XMPMetaParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(Object input, ParseOptions options)", "modifiers": "public static", "return": "XMPMeta", "body": "public static XMPMeta parse(Object input, ParseOptions options) throws XMPException\n\t{\n\t\tParameterAsserts.assertNotNull(input);\n\t\toptions = options != null ? options : new ParseOptions();\n\n\t\tDocument document = parseXml(input, options);\n\n\t\tboolean xmpmetaRequired = options.getRequireXMPMeta();\n\t\tObject[] result = new Object[3];\n\t\tresult = findRootNode(document, xmpmetaRequired, result);\n\n\t\tif (result != null  &&  result[1] == XMP_RDF)\n\t\t{\n\t\t\tXMPMetaImpl xmp = ParseRDF.parse((Node) result[0]);\n\t\t\txmp.setPacketHeader((String) result[2]);\n\n\t\t\t// Check if the XMP object shall be normalized\n\t\t\tif (!options.getOmitNormalization())\n\t\t\t{\n\t\t\t\treturn XMPNormalizer.process(xmp, options);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn xmp;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// no appropriate root node found, return empty metadata object\n\t\t\treturn new XMPMetaImpl();\n\t\t}\n\t}", "signature": "XMPMeta parse(Object input, ParseOptions options)", "full_signature": "public static XMPMeta parse(Object input, ParseOptions options)", "class_method_signature": "XMPMetaParser.parse(Object input, ParseOptions options)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "parseXml", "getRequireXMPMeta", "findRootNode", "parse", "setPacketHeader", "getOmitNormalization", "process"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}