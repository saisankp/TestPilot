{"test_class": {"identifier": "EmbeddedSensorObservationPeriodTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IEmbeddedSensorStrategy<Object> strategyMock;", "modifier": "private", "type": "IEmbeddedSensorStrategy<Object>", "declarator": "strategyMock", "var_name": "strategyMock"}, {"original_string": "private Object states[];", "modifier": "private", "type": "Object", "declarator": "states[]", "var_name": "states"}, {"original_string": "private IMessageProcessor processors[];", "modifier": "private", "type": "IMessageProcessor", "declarator": "processors[]", "var_name": "processors"}], "file": "CoreFeatures/Statistics/EmbeddedSensor/src/test/java/info/smart_tools/smartactors/statistics/sensors/embedded_sensor/EmbeddedSensorObservationPeriodTest.java"}, "test_case": {"identifier": "Should_createMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_createMessage()\n            throws Exception {\n        IEmbeddedSensorObservationPeriod esop = new EmbeddedSensorObservationPeriod<>(100, 200, 4, strategyMock);\n\n        Collection res = mock(Collection.class);\n        when(strategyMock.extractPeriod(same(states[0]))).thenReturn(res);\n\n        IObject msg = esop.createMessage();\n\n        assertEquals(100L, ((Long) msg.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"periodStart\"))).longValue());\n        assertEquals(200L, ((Long) msg.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"periodEnd\"))).longValue());\n        assertSame(res, msg.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"data\")));\n    }", "signature": "void Should_createMessage()", "full_signature": "@Test public void Should_createMessage()", "class_method_signature": "EmbeddedSensorObservationPeriodTest.Should_createMessage()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "extractPeriod", "same", "createMessage", "assertEquals", "longValue", "getValue", "resolve", "getOrAdd", "assertEquals", "longValue", "getValue", "resolve", "getOrAdd", "assertSame", "getValue", "resolve", "getOrAdd"]}, "focal_class": {"identifier": "EmbeddedSensorObservationPeriod", "superclass": "", "interfaces": "implements IEmbeddedSensorObservationPeriod", "fields": [{"original_string": "private final long periodStart;", "modifier": "private final", "type": "long", "declarator": "periodStart", "var_name": "periodStart"}, {"original_string": "private final long periodEnd;", "modifier": "private final", "type": "long", "declarator": "periodEnd", "var_name": "periodEnd"}, {"original_string": "private final long maxPeriodItems;", "modifier": "private final", "type": "long", "declarator": "maxPeriodItems", "var_name": "maxPeriodItems"}, {"original_string": "private final AtomicLong curItems;", "modifier": "private final", "type": "AtomicLong", "declarator": "curItems", "var_name": "curItems"}, {"original_string": "private final TState state;", "modifier": "private final", "type": "TState", "declarator": "state", "var_name": "state"}, {"original_string": "private final IEmbeddedSensorStrategy<TState> strategy;", "modifier": "private final", "type": "IEmbeddedSensorStrategy<TState>", "declarator": "strategy", "var_name": "strategy"}, {"original_string": "private final IFieldName periodStartFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "periodStartFieldName", "var_name": "periodStartFieldName"}, {"original_string": "private final IFieldName periodEndFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "periodEndFieldName", "var_name": "periodEndFieldName"}, {"original_string": "private final IFieldName dataFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "dataFieldName", "var_name": "dataFieldName"}], "methods": [{"identifier": "EmbeddedSensorObservationPeriod", "parameters": "(final long start, final long end, final long nItems, final IEmbeddedSensorStrategy<TState> strategy)", "modifiers": "public", "return": "", "signature": " EmbeddedSensorObservationPeriod(final long start, final long end, final long nItems, final IEmbeddedSensorStrategy<TState> strategy)", "full_signature": "public  EmbeddedSensorObservationPeriod(final long start, final long end, final long nItems, final IEmbeddedSensorStrategy<TState> strategy)", "class_method_signature": "EmbeddedSensorObservationPeriod.EmbeddedSensorObservationPeriod(final long start, final long end, final long nItems, final IEmbeddedSensorStrategy<TState> strategy)", "testcase": false, "constructor": true}, {"identifier": "nextPeriod", "parameters": "(final long inclTime)", "modifiers": "@Override public", "return": "EmbeddedSensorObservationPeriod<TState>", "signature": "EmbeddedSensorObservationPeriod<TState> nextPeriod(final long inclTime)", "full_signature": "@Override public EmbeddedSensorObservationPeriod<TState> nextPeriod(final long inclTime)", "class_method_signature": "EmbeddedSensorObservationPeriod.nextPeriod(final long inclTime)", "testcase": false, "constructor": false}, {"identifier": "isCountLimited", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isCountLimited()", "full_signature": "private boolean isCountLimited()", "class_method_signature": "EmbeddedSensorObservationPeriod.isCountLimited()", "testcase": false, "constructor": false}, {"identifier": "isStartedAt", "parameters": "(final long time)", "modifiers": "private", "return": "boolean", "signature": "boolean isStartedAt(final long time)", "full_signature": "private boolean isStartedAt(final long time)", "class_method_signature": "EmbeddedSensorObservationPeriod.isStartedAt(final long time)", "testcase": false, "constructor": false}, {"identifier": "isTimeCompleted", "parameters": "(final long time)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTimeCompleted(final long time)", "full_signature": "@Override public boolean isTimeCompleted(final long time)", "class_method_signature": "EmbeddedSensorObservationPeriod.isTimeCompleted(final long time)", "testcase": false, "constructor": false}, {"identifier": "extractData", "parameters": "()", "modifiers": "private", "return": "Collection<? extends Number>", "signature": "Collection<? extends Number> extractData()", "full_signature": "private Collection<? extends Number> extractData()", "class_method_signature": "EmbeddedSensorObservationPeriod.extractData()", "testcase": false, "constructor": false}, {"identifier": "incrementCount", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean incrementCount()", "full_signature": "private boolean incrementCount()", "class_method_signature": "EmbeddedSensorObservationPeriod.incrementCount()", "testcase": false, "constructor": false}, {"identifier": "recordProcessor", "parameters": "(final IMessageProcessor mp, final long time)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean recordProcessor(final IMessageProcessor mp, final long time)", "full_signature": "@Override public boolean recordProcessor(final IMessageProcessor mp, final long time)", "class_method_signature": "EmbeddedSensorObservationPeriod.recordProcessor(final IMessageProcessor mp, final long time)", "testcase": false, "constructor": false}, {"identifier": "createMessage", "parameters": "()", "modifiers": "@Override public", "return": "IObject", "signature": "IObject createMessage()", "full_signature": "@Override public IObject createMessage()", "class_method_signature": "EmbeddedSensorObservationPeriod.createMessage()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Statistics/EmbeddedSensor/src/main/java/info/smart_tools/smartactors/statistics/sensors/embedded_sensor/EmbeddedSensorObservationPeriod.java"}, "focal_method": {"identifier": "createMessage", "parameters": "()", "modifiers": "@Override public", "return": "IObject", "body": "@Override\n    public IObject createMessage()\n            throws ResolutionException, ChangeValueException, InvalidArgumentException, EmbeddedSensorStrategyException {\n        IObject message = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n        message.setValue(periodStartFieldName, periodStart);\n        message.setValue(periodEndFieldName, periodEnd);\n        message.setValue(dataFieldName, extractData());\n        return message;\n    }", "signature": "IObject createMessage()", "full_signature": "@Override public IObject createMessage()", "class_method_signature": "EmbeddedSensorObservationPeriod.createMessage()", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "setValue", "setValue", "setValue", "extractData"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}