{"test_class": {"identifier": "AeadWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int AES_KEY_SIZE = 16;", "modifier": "private static final", "type": "int", "declarator": "AES_KEY_SIZE = 16", "var_name": "AES_KEY_SIZE"}, {"original_string": "private static final int HMAC_KEY_SIZE = 20;", "modifier": "private static final", "type": "int", "declarator": "HMAC_KEY_SIZE = 20", "var_name": "HMAC_KEY_SIZE"}], "file": "java_src/src/test/java/com/google/crypto/tink/aead/AeadWrapperTest.java"}, "test_case": {"identifier": "testMultipleKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMultipleKeys() throws Exception {\n    byte[] aesCtrKeyValue = Random.randBytes(AES_KEY_SIZE);\n    byte[] hmacKeyValue = Random.randBytes(HMAC_KEY_SIZE);\n    int ivSize = 12;\n    int tagSize = 16;\n\n    Key primary =\n        TestUtil.createKey(\n            TestUtil.createAesCtrHmacAeadKeyData(aesCtrKeyValue, ivSize, hmacKeyValue, tagSize),\n            42,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.TINK);\n    Key raw =\n        TestUtil.createKey(\n            TestUtil.createAesCtrHmacAeadKeyData(aesCtrKeyValue, ivSize, hmacKeyValue, tagSize),\n            43,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.RAW);\n    Key legacy =\n        TestUtil.createKey(\n            TestUtil.createAesCtrHmacAeadKeyData(aesCtrKeyValue, ivSize, hmacKeyValue, tagSize),\n            44,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.LEGACY);\n\n    Key tink =\n        TestUtil.createKey(\n            TestUtil.createAesCtrHmacAeadKeyData(aesCtrKeyValue, ivSize, hmacKeyValue, tagSize),\n            45,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.TINK);\n\n    KeysetHandle keysetHandle =\n        TestUtil.createKeysetHandle(TestUtil.createKeyset(primary, raw, legacy, tink));\n    Aead aead = new AeadWrapper().wrap(Registry.getPrimitives(keysetHandle, Aead.class));\n    byte[] plaintext = Random.randBytes(20);\n    byte[] associatedData = Random.randBytes(20);\n    byte[] ciphertext = aead.encrypt(plaintext, associatedData);\n    byte[] prefix = Arrays.copyOfRange(ciphertext, 0, CryptoFormat.NON_RAW_PREFIX_SIZE);\n\n    assertArrayEquals(prefix, CryptoFormat.getOutputPrefix(primary));\n    assertArrayEquals(plaintext, aead.decrypt(ciphertext, associatedData));\n    assertEquals(\n        CryptoFormat.NON_RAW_PREFIX_SIZE + plaintext.length + ivSize + tagSize, ciphertext.length);\n\n    // encrypt with a non-primary RAW key and decrypt with the keyset\n    KeysetHandle keysetHandle2 =\n        TestUtil.createKeysetHandle(TestUtil.createKeyset(raw, legacy, tink));\n    Aead aead2 = new AeadWrapper().wrap(Registry.getPrimitives(keysetHandle2, Aead.class));\n    ciphertext = aead2.encrypt(plaintext, associatedData);\n    assertArrayEquals(plaintext, aead.decrypt(ciphertext, associatedData));\n\n    // encrypt with a random key not in the keyset, decrypt with the keyset should fail\n    byte[] aesCtrKeyValue2 = Random.randBytes(AES_KEY_SIZE);\n    byte[] hmacKeyValue2 = Random.randBytes(HMAC_KEY_SIZE);\n    Key random =\n        TestUtil.createKey(\n            TestUtil.createAesCtrHmacAeadKeyData(aesCtrKeyValue2, ivSize, hmacKeyValue2, tagSize),\n            44,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.TINK);\n    keysetHandle2 = TestUtil.createKeysetHandle(TestUtil.createKeyset(random));\n    aead2 = new AeadWrapper().wrap(Registry.getPrimitives(keysetHandle2, Aead.class));\n    ciphertext = aead2.encrypt(plaintext, associatedData);\n    try {\n      aead.decrypt(ciphertext, associatedData);\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertExceptionContains(e, \"decryption failed\");\n    }\n  }", "signature": "void testMultipleKeys()", "full_signature": "@Test public void testMultipleKeys()", "class_method_signature": "AeadWrapperTest.testMultipleKeys()", "testcase": true, "constructor": false, "invocations": ["randBytes", "randBytes", "createKey", "createAesCtrHmacAeadKeyData", "createKey", "createAesCtrHmacAeadKeyData", "createKey", "createAesCtrHmacAeadKeyData", "createKey", "createAesCtrHmacAeadKeyData", "createKeysetHandle", "createKeyset", "wrap", "getPrimitives", "randBytes", "randBytes", "encrypt", "copyOfRange", "assertArrayEquals", "getOutputPrefix", "assertArrayEquals", "decrypt", "assertEquals", "createKeysetHandle", "createKeyset", "wrap", "getPrimitives", "encrypt", "assertArrayEquals", "decrypt", "randBytes", "randBytes", "createKey", "createAesCtrHmacAeadKeyData", "createKeysetHandle", "createKeyset", "wrap", "getPrimitives", "encrypt", "decrypt", "fail", "assertExceptionContains"]}, "focal_class": {"identifier": "AeadWrapper", "superclass": "", "interfaces": "implements PrimitiveWrapper<Aead, Aead>", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(AeadWrapper.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(AeadWrapper.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "AeadWrapper", "parameters": "()", "modifiers": "", "return": "", "signature": " AeadWrapper()", "full_signature": "  AeadWrapper()", "class_method_signature": "AeadWrapper.AeadWrapper()", "testcase": false, "constructor": true}, {"identifier": "wrap", "parameters": "(final PrimitiveSet<Aead> pset)", "modifiers": "@Override public", "return": "Aead", "signature": "Aead wrap(final PrimitiveSet<Aead> pset)", "full_signature": "@Override public Aead wrap(final PrimitiveSet<Aead> pset)", "class_method_signature": "AeadWrapper.wrap(final PrimitiveSet<Aead> pset)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<Aead>", "signature": "Class<Aead> getPrimitiveClass()", "full_signature": "@Override public Class<Aead> getPrimitiveClass()", "class_method_signature": "AeadWrapper.getPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "getInputPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<Aead>", "signature": "Class<Aead> getInputPrimitiveClass()", "full_signature": "@Override public Class<Aead> getInputPrimitiveClass()", "class_method_signature": "AeadWrapper.getInputPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void register()", "full_signature": "public static void register()", "class_method_signature": "AeadWrapper.register()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/aead/AeadWrapper.java"}, "focal_method": {"identifier": "wrap", "parameters": "(final PrimitiveSet<Aead> pset)", "modifiers": "@Override public", "return": "Aead", "body": "@Override\n  public Aead wrap(final PrimitiveSet<Aead> pset) throws GeneralSecurityException {\n    return new WrappedAead(pset);\n  }", "signature": "Aead wrap(final PrimitiveSet<Aead> pset)", "full_signature": "@Override public Aead wrap(final PrimitiveSet<Aead> pset)", "class_method_signature": "AeadWrapper.wrap(final PrimitiveSet<Aead> pset)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}