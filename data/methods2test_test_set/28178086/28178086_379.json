{"test_class": {"identifier": "AutoCovarianceFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SarimaModel arma1010, arma3101;", "modifier": "private", "type": "SarimaModel", "declarator": "arma1010", "var_name": "arma1010"}, {"original_string": "private double EPS = 1e-8;", "modifier": "private", "type": "double", "declarator": "EPS = 1e-8", "var_name": "EPS"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/arima/AutoCovarianceFunctionTest.java"}, "test_case": {"identifier": "testPrepare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPrepare() {\n        arma3101.setDefault(-.6, -.4);\n        AutoCovarianceFunction acf = arma3101.getAutoCovarianceFunction();\n        acf.prepare(36);\n    }", "signature": "void testPrepare()", "full_signature": "@Test public void testPrepare()", "class_method_signature": "AutoCovarianceFunctionTest.testPrepare()", "testcase": true, "constructor": false, "invocations": ["setDefault", "getAutoCovarianceFunction", "prepare"]}, "focal_class": {"identifier": "AutoCovarianceFunction", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int BLOCK = 36;", "modifier": "private static final", "type": "int", "declarator": "BLOCK = 36", "var_name": "BLOCK"}, {"original_string": "private Polynomial ar_, ma_;", "modifier": "private", "type": "Polynomial", "declarator": "ar_", "var_name": "ar_"}, {"original_string": "private SymmetricFilter sma_;", "modifier": "private", "type": "SymmetricFilter", "declarator": "sma_", "var_name": "sma_"}, {"original_string": "private double[] c_;", "modifier": "private", "type": "double[]", "declarator": "c_", "var_name": "c_"}, {"original_string": "private double var_;", "modifier": "private", "type": "double", "declarator": "var_", "var_name": "var_"}, {"original_string": "private Method method_ = Method.Default2;", "modifier": "private", "type": "Method", "declarator": "method_ = Method.Default2", "var_name": "method_"}], "methods": [{"identifier": "AutoCovarianceFunction", "parameters": "(final Polynomial ma, final Polynomial ar, final double var)", "modifiers": "public", "return": "", "signature": " AutoCovarianceFunction(final Polynomial ma, final Polynomial ar, final double var)", "full_signature": "public  AutoCovarianceFunction(final Polynomial ma, final Polynomial ar, final double var)", "class_method_signature": "AutoCovarianceFunction.AutoCovarianceFunction(final Polynomial ma, final Polynomial ar, final double var)", "testcase": false, "constructor": true}, {"identifier": "AutoCovarianceFunction", "parameters": "(final SymmetricFilter sma, final BackFilter ar)", "modifiers": "public", "return": "", "signature": " AutoCovarianceFunction(final SymmetricFilter sma, final BackFilter ar)", "full_signature": "public  AutoCovarianceFunction(final SymmetricFilter sma, final BackFilter ar)", "class_method_signature": "AutoCovarianceFunction.AutoCovarianceFunction(final SymmetricFilter sma, final BackFilter ar)", "testcase": false, "constructor": true}, {"identifier": "getMethod", "parameters": "()", "modifiers": "public", "return": "Method", "signature": "Method getMethod()", "full_signature": "public Method getMethod()", "class_method_signature": "AutoCovarianceFunction.getMethod()", "testcase": false, "constructor": false}, {"identifier": "setMethod", "parameters": "(Method method)", "modifiers": "public", "return": "void", "signature": "void setMethod(Method method)", "full_signature": "public void setMethod(Method method)", "class_method_signature": "AutoCovarianceFunction.setMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "(final int n)", "modifiers": "public", "return": "double[]", "signature": "double[] values(final int n)", "full_signature": "public double[] values(final int n)", "class_method_signature": "AutoCovarianceFunction.values(final int n)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final int k)", "modifiers": "public", "return": "double", "signature": "double get(final int k)", "full_signature": "public double get(final int k)", "class_method_signature": "AutoCovarianceFunction.get(final int k)", "testcase": false, "constructor": false}, {"identifier": "getBound", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBound()", "full_signature": "public int getBound()", "class_method_signature": "AutoCovarianceFunction.getBound()", "testcase": false, "constructor": false}, {"identifier": "hasBound", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasBound()", "full_signature": "public boolean hasBound()", "class_method_signature": "AutoCovarianceFunction.hasBound()", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(int rank)", "modifiers": "public", "return": "void", "signature": "void prepare(int rank)", "full_signature": "public void prepare(int rank)", "class_method_signature": "AutoCovarianceFunction.prepare(int rank)", "testcase": false, "constructor": false}, {"identifier": "computeDefault", "parameters": "(int rank)", "modifiers": "private", "return": "void", "signature": "void computeDefault(int rank)", "full_signature": "private void computeDefault(int rank)", "class_method_signature": "AutoCovarianceFunction.computeDefault(int rank)", "testcase": false, "constructor": false}, {"identifier": "computeDefault2", "parameters": "(int rank)", "modifiers": "private", "return": "void", "signature": "void computeDefault2(int rank)", "full_signature": "private void computeDefault2(int rank)", "class_method_signature": "AutoCovarianceFunction.computeDefault2(int rank)", "testcase": false, "constructor": false}, {"identifier": "computeSymmetric", "parameters": "(int rank, boolean dsym)", "modifiers": "private", "return": "void", "signature": "void computeSymmetric(int rank, boolean dsym)", "full_signature": "private void computeSymmetric(int rank, boolean dsym)", "class_method_signature": "AutoCovarianceFunction.computeSymmetric(int rank, boolean dsym)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/arima/AutoCovarianceFunction.java"}, "focal_method": {"identifier": "prepare", "parameters": "(int rank)", "modifiers": "public", "return": "void", "body": "public void prepare(int rank) {\n        if (rank == 0) {\n            rank = BLOCK;\n        } else {\n            int r = rank % BLOCK;\n            if (r != 0) {\n                rank += BLOCK - r;\n            }\n        }\n        if (c_ != null && c_.length > rank) {\n            return;\n        }\n\n        switch (method_) {\n            case Default:\n                computeDefault(rank);\n                break;\n            case Default2:\n                computeDefault2(rank);\n                break;\n            case SymmetricFilterDecomposition:\n                computeSymmetric(rank, true);\n                break;\n            case SymmetricFilterDecomposition2:\n                computeSymmetric(rank, false);\n                break;\n        }\n    }", "signature": "void prepare(int rank)", "full_signature": "public void prepare(int rank)", "class_method_signature": "AutoCovarianceFunction.prepare(int rank)", "testcase": false, "constructor": false, "invocations": ["computeDefault", "computeDefault2", "computeSymmetric", "computeSymmetric"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}