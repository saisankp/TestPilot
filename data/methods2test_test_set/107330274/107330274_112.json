{"test_class": {"identifier": "ServerStreamingMethodHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final StreamObserver<String> responseObserver = new StreamObserver<String>() {\n        @Override\n        public void onNext(String value) {\n            throw new RuntimeException(\"Simulated error\");\n        }\n\n        @Override\n        public void onError(Throwable t) {\n        }\n\n        @Override\n        public void onCompleted() {\n        }\n    };", "modifier": "private final", "type": "StreamObserver<String>", "declarator": "responseObserver = new StreamObserver<String>() {\n        @Override\n        public void onNext(String value) {\n            throw new RuntimeException(\"Simulated error\");\n        }\n\n        @Override\n        public void onError(Throwable t) {\n        }\n\n        @Override\n        public void onCompleted() {\n        }\n    }", "var_name": "responseObserver"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/grpc/reactor/server/ServerStreamingMethodHandlerTest.java"}, "test_case": {"identifier": "testOnNextExceptionHandlerAfterSubscribe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnNextExceptionHandlerAfterSubscribe() {\n        DirectProcessor<String> publisher = DirectProcessor.create();\n        Disposable disposable = ServerStreamingMethodHandler.internalHandleResult(publisher, responseObserver);\n\n        publisher.onNext(\"a\");\n        publisher.onNext(\"b\");\n        assertThat(disposable.isDisposed()).isTrue();\n    }", "signature": "void testOnNextExceptionHandlerAfterSubscribe()", "full_signature": "@Test public void testOnNextExceptionHandlerAfterSubscribe()", "class_method_signature": "ServerStreamingMethodHandlerTest.testOnNextExceptionHandlerAfterSubscribe()", "testcase": true, "constructor": false, "invocations": ["create", "internalHandleResult", "onNext", "onNext", "isTrue", "assertThat", "isDisposed"]}, "focal_class": {"identifier": "ServerStreamingMethodHandler", "superclass": "extends AbstractMethodHandler<REQ, RESP, CONTEXT>", "interfaces": "implements ServerCalls.ServerStreamingMethod<REQ, RESP>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ServerStreamingMethodHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ServerStreamingMethodHandler.class)", "var_name": "logger"}], "methods": [{"identifier": "ServerStreamingMethodHandler", "parameters": "(GrpcToReactorMethodBinding<REQ, RESP> binding,\n                                 Supplier<CONTEXT> contextResolver,\n                                 Object reactorService)", "modifiers": "", "return": "", "signature": " ServerStreamingMethodHandler(GrpcToReactorMethodBinding<REQ, RESP> binding,\n                                 Supplier<CONTEXT> contextResolver,\n                                 Object reactorService)", "full_signature": "  ServerStreamingMethodHandler(GrpcToReactorMethodBinding<REQ, RESP> binding,\n                                 Supplier<CONTEXT> contextResolver,\n                                 Object reactorService)", "class_method_signature": "ServerStreamingMethodHandler.ServerStreamingMethodHandler(GrpcToReactorMethodBinding<REQ, RESP> binding,\n                                 Supplier<CONTEXT> contextResolver,\n                                 Object reactorService)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(REQ request, StreamObserver<RESP> responseObserver)", "modifiers": "@Override public", "return": "void", "signature": "void invoke(REQ request, StreamObserver<RESP> responseObserver)", "full_signature": "@Override public void invoke(REQ request, StreamObserver<RESP> responseObserver)", "class_method_signature": "ServerStreamingMethodHandler.invoke(REQ request, StreamObserver<RESP> responseObserver)", "testcase": false, "constructor": false}, {"identifier": "handleResult", "parameters": "(Publisher<RESP> result, StreamObserver<RESP> responseObserver)", "modifiers": "@Override", "return": "Disposable", "signature": "Disposable handleResult(Publisher<RESP> result, StreamObserver<RESP> responseObserver)", "full_signature": "@Override Disposable handleResult(Publisher<RESP> result, StreamObserver<RESP> responseObserver)", "class_method_signature": "ServerStreamingMethodHandler.handleResult(Publisher<RESP> result, StreamObserver<RESP> responseObserver)", "testcase": false, "constructor": false}, {"identifier": "internalHandleResult", "parameters": "(Publisher<RESP> result, StreamObserver<RESP> responseObserver)", "modifiers": "@VisibleForTesting static", "return": "Disposable", "signature": "Disposable internalHandleResult(Publisher<RESP> result, StreamObserver<RESP> responseObserver)", "full_signature": "@VisibleForTesting static Disposable internalHandleResult(Publisher<RESP> result, StreamObserver<RESP> responseObserver)", "class_method_signature": "ServerStreamingMethodHandler.internalHandleResult(Publisher<RESP> result, StreamObserver<RESP> responseObserver)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/grpc/reactor/server/ServerStreamingMethodHandler.java"}, "focal_method": {"identifier": "internalHandleResult", "parameters": "(Publisher<RESP> result, StreamObserver<RESP> responseObserver)", "modifiers": "@VisibleForTesting static", "return": "Disposable", "body": "@VisibleForTesting\n    static <RESP> Disposable internalHandleResult(Publisher<RESP> result, StreamObserver<RESP> responseObserver) {\n        AtomicBoolean cancelled = new AtomicBoolean();\n        AtomicReference<Disposable> disposableRef = new AtomicReference<>();\n\n        Disposable disposable = Flux.from(result).subscribe(\n                value -> {\n                    if (cancelled.get()) {\n                        ReactorExt.safeDispose(disposableRef.get());\n                        return;\n                    }\n                    try {\n                        responseObserver.onNext(value);\n                    } catch (Exception e) {\n                        cancelled.set(true);\n\n                        logger.warn(\"Subscriber threw error in onNext handler. Retrying with onError\", e);\n                        try {\n                            responseObserver.onError(e);\n                        } catch (Exception e2) {\n                            logger.warn(\"Subscriber threw error in onError handler\", e2);\n                        }\n\n                        ReactorExt.safeDispose(disposableRef.get());\n                    }\n                },\n                e -> {\n                    if (cancelled.get()) {\n                        return;\n                    }\n                    try {\n                        responseObserver.onError(e);\n                    } catch (Exception e2) {\n                        logger.warn(\"Subscriber threw error in onError handler\", e2);\n                    }\n                },\n                () -> {\n                    if (cancelled.get()) {\n                        return;\n                    }\n                    try {\n                        responseObserver.onCompleted();\n                    } catch (Exception e) {\n                        logger.warn(\"Subscriber threw error in onCompleted handler\", e);\n                    }\n                }\n        );\n        disposableRef.set(disposable);\n\n        if (cancelled.get()) {\n            ReactorExt.safeDispose(disposable);\n        }\n\n        return disposable;\n    }", "signature": "Disposable internalHandleResult(Publisher<RESP> result, StreamObserver<RESP> responseObserver)", "full_signature": "@VisibleForTesting static Disposable internalHandleResult(Publisher<RESP> result, StreamObserver<RESP> responseObserver)", "class_method_signature": "ServerStreamingMethodHandler.internalHandleResult(Publisher<RESP> result, StreamObserver<RESP> responseObserver)", "testcase": false, "constructor": false, "invocations": ["subscribe", "from", "get", "safeDispose", "get", "onNext", "set", "warn", "onError", "warn", "safeDispose", "get", "get", "onError", "warn", "get", "onCompleted", "warn", "set", "get", "safeDispose"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}