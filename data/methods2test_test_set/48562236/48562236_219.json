{"test_class": {"identifier": "CSVFormatTest", "superclass": "", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/csv/CSVFormatTest.java"}, "test_case": {"identifier": "testWithIgnoreEmptyLines", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithIgnoreEmptyLines() throws Exception {\n        assertFalse(CSVFormat.DEFAULT.withIgnoreEmptyLines(false).getIgnoreEmptyLines());\n        assertTrue(CSVFormat.DEFAULT.withIgnoreEmptyLines(true).getIgnoreEmptyLines());\n    }", "signature": "void testWithIgnoreEmptyLines()", "full_signature": "@Test public void testWithIgnoreEmptyLines()", "class_method_signature": "CSVFormatTest.testWithIgnoreEmptyLines()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "getIgnoreEmptyLines", "withIgnoreEmptyLines", "assertTrue", "getIgnoreEmptyLines", "withIgnoreEmptyLines"]}, "focal_class": {"identifier": "CSVFormat", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final char delimiter;", "modifier": "private final", "type": "char", "declarator": "delimiter", "var_name": "delimiter"}, {"original_string": "private final Character quoteChar;", "modifier": "private final", "type": "Character", "declarator": "quoteChar", "var_name": "quoteChar"}, {"original_string": "private final Quote quotePolicy;", "modifier": "private final", "type": "Quote", "declarator": "quotePolicy", "var_name": "quotePolicy"}, {"original_string": "private final Character commentStart;", "modifier": "private final", "type": "Character", "declarator": "commentStart", "var_name": "commentStart"}, {"original_string": "private final Character escape;", "modifier": "private final", "type": "Character", "declarator": "escape", "var_name": "escape"}, {"original_string": "private final boolean ignoreSurroundingSpaces;", "modifier": "private final", "type": "boolean", "declarator": "ignoreSurroundingSpaces", "var_name": "ignoreSurroundingSpaces"}, {"original_string": "private final boolean ignoreEmptyLines;", "modifier": "private final", "type": "boolean", "declarator": "ignoreEmptyLines", "var_name": "ignoreEmptyLines"}, {"original_string": "private final String recordSeparator;", "modifier": "private final", "type": "String", "declarator": "recordSeparator", "var_name": "recordSeparator"}, {"original_string": "private final String nullString;", "modifier": "private final", "type": "String", "declarator": "nullString", "var_name": "nullString"}, {"original_string": "private final String[] header;", "modifier": "private final", "type": "String[]", "declarator": "header", "var_name": "header"}, {"original_string": "private final boolean skipHeaderRecord;", "modifier": "private final", "type": "boolean", "declarator": "skipHeaderRecord", "var_name": "skipHeaderRecord"}, {"original_string": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\n                                                            false, true, CRLF, null, null, false);", "modifier": "public static final", "type": "CSVFormat", "declarator": "DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\n                                                            false, true, CRLF, null, null, false)", "var_name": "DEFAULT"}, {"original_string": "public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);", "modifier": "public static final", "type": "CSVFormat", "declarator": "RFC4180 = DEFAULT.withIgnoreEmptyLines(false)", "var_name": "RFC4180"}, {"original_string": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);", "modifier": "public static final", "type": "CSVFormat", "declarator": "EXCEL = DEFAULT.withIgnoreEmptyLines(false)", "var_name": "EXCEL"}, {"original_string": "public static final CSVFormat TDF =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withIgnoreSurroundingSpaces(true);", "modifier": "public static final", "type": "CSVFormat", "declarator": "TDF =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withIgnoreSurroundingSpaces(true)", "var_name": "TDF"}, {"original_string": "public static final CSVFormat MYSQL =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withEscape(BACKSLASH)\n            .withIgnoreEmptyLines(false)\n            .withQuoteChar(null)\n            .withRecordSeparator(LF);", "modifier": "public static final", "type": "CSVFormat", "declarator": "MYSQL =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withEscape(BACKSLASH)\n            .withIgnoreEmptyLines(false)\n            .withQuoteChar(null)\n            .withRecordSeparator(LF)", "var_name": "MYSQL"}], "methods": [{"identifier": "isLineBreak", "parameters": "(final char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isLineBreak(final char c)", "full_signature": "private static boolean isLineBreak(final char c)", "class_method_signature": "CSVFormat.isLineBreak(final char c)", "testcase": false, "constructor": false}, {"identifier": "isLineBreak", "parameters": "(final Character c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isLineBreak(final Character c)", "full_signature": "private static boolean isLineBreak(final Character c)", "class_method_signature": "CSVFormat.isLineBreak(final Character c)", "testcase": false, "constructor": false}, {"identifier": "newFormat", "parameters": "(final char delimiter)", "modifiers": "public static", "return": "CSVFormat", "signature": "CSVFormat newFormat(final char delimiter)", "full_signature": "public static CSVFormat newFormat(final char delimiter)", "class_method_signature": "CSVFormat.newFormat(final char delimiter)", "testcase": false, "constructor": false}, {"identifier": "CSVFormat", "parameters": "(final char delimiter, final Character quoteChar,\n            final Quote quotePolicy, final Character commentStart,\n            final Character escape, final boolean ignoreSurroundingSpaces,\n            final boolean ignoreEmptyLines, final String recordSeparator,\n            final String nullString, final String[] header, boolean skipHeaderRecord)", "modifiers": "", "return": "", "signature": " CSVFormat(final char delimiter, final Character quoteChar,\n            final Quote quotePolicy, final Character commentStart,\n            final Character escape, final boolean ignoreSurroundingSpaces,\n            final boolean ignoreEmptyLines, final String recordSeparator,\n            final String nullString, final String[] header, boolean skipHeaderRecord)", "full_signature": "  CSVFormat(final char delimiter, final Character quoteChar,\n            final Quote quotePolicy, final Character commentStart,\n            final Character escape, final boolean ignoreSurroundingSpaces,\n            final boolean ignoreEmptyLines, final String recordSeparator,\n            final String nullString, final String[] header, boolean skipHeaderRecord)", "class_method_signature": "CSVFormat.CSVFormat(final char delimiter, final Character quoteChar,\n            final Quote quotePolicy, final Character commentStart,\n            final Character escape, final boolean ignoreSurroundingSpaces,\n            final boolean ignoreEmptyLines, final String recordSeparator,\n            final String nullString, final String[] header, boolean skipHeaderRecord)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public boolean equals(final Object obj)", "class_method_signature": "CSVFormat.equals(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(final Object... values)", "modifiers": "public", "return": "String", "signature": "String format(final Object... values)", "full_signature": "public String format(final Object... values)", "class_method_signature": "CSVFormat.format(final Object... values)", "testcase": false, "constructor": false}, {"identifier": "getCommentStart", "parameters": "()", "modifiers": "public", "return": "Character", "signature": "Character getCommentStart()", "full_signature": "public Character getCommentStart()", "class_method_signature": "CSVFormat.getCommentStart()", "testcase": false, "constructor": false}, {"identifier": "getDelimiter", "parameters": "()", "modifiers": "public", "return": "char", "signature": "char getDelimiter()", "full_signature": "public char getDelimiter()", "class_method_signature": "CSVFormat.getDelimiter()", "testcase": false, "constructor": false}, {"identifier": "getEscape", "parameters": "()", "modifiers": "public", "return": "Character", "signature": "Character getEscape()", "full_signature": "public Character getEscape()", "class_method_signature": "CSVFormat.getEscape()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getHeader()", "full_signature": "public String[] getHeader()", "class_method_signature": "CSVFormat.getHeader()", "testcase": false, "constructor": false}, {"identifier": "getIgnoreEmptyLines", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getIgnoreEmptyLines()", "full_signature": "public boolean getIgnoreEmptyLines()", "class_method_signature": "CSVFormat.getIgnoreEmptyLines()", "testcase": false, "constructor": false}, {"identifier": "getIgnoreSurroundingSpaces", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getIgnoreSurroundingSpaces()", "full_signature": "public boolean getIgnoreSurroundingSpaces()", "class_method_signature": "CSVFormat.getIgnoreSurroundingSpaces()", "testcase": false, "constructor": false}, {"identifier": "getNullString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNullString()", "full_signature": "public String getNullString()", "class_method_signature": "CSVFormat.getNullString()", "testcase": false, "constructor": false}, {"identifier": "getQuoteChar", "parameters": "()", "modifiers": "public", "return": "Character", "signature": "Character getQuoteChar()", "full_signature": "public Character getQuoteChar()", "class_method_signature": "CSVFormat.getQuoteChar()", "testcase": false, "constructor": false}, {"identifier": "getQuotePolicy", "parameters": "()", "modifiers": "public", "return": "Quote", "signature": "Quote getQuotePolicy()", "full_signature": "public Quote getQuotePolicy()", "class_method_signature": "CSVFormat.getQuotePolicy()", "testcase": false, "constructor": false}, {"identifier": "getRecordSeparator", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRecordSeparator()", "full_signature": "public String getRecordSeparator()", "class_method_signature": "CSVFormat.getRecordSeparator()", "testcase": false, "constructor": false}, {"identifier": "getSkipHeaderRecord", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getSkipHeaderRecord()", "full_signature": "public boolean getSkipHeaderRecord()", "class_method_signature": "CSVFormat.getSkipHeaderRecord()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "CSVFormat.hashCode()", "testcase": false, "constructor": false}, {"identifier": "isCommentingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCommentingEnabled()", "full_signature": "public boolean isCommentingEnabled()", "class_method_signature": "CSVFormat.isCommentingEnabled()", "testcase": false, "constructor": false}, {"identifier": "isEscaping", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEscaping()", "full_signature": "public boolean isEscaping()", "class_method_signature": "CSVFormat.isEscaping()", "testcase": false, "constructor": false}, {"identifier": "isQuoting", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isQuoting()", "full_signature": "public boolean isQuoting()", "class_method_signature": "CSVFormat.isQuoting()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final Reader in)", "modifiers": "public", "return": "CSVParser", "signature": "CSVParser parse(final Reader in)", "full_signature": "public CSVParser parse(final Reader in)", "class_method_signature": "CSVFormat.parse(final Reader in)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CSVFormat.toString()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "", "return": "void", "signature": "void validate()", "full_signature": " void validate()", "class_method_signature": "CSVFormat.validate()", "testcase": false, "constructor": false}, {"identifier": "withCommentStart", "parameters": "(final char commentStart)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withCommentStart(final char commentStart)", "full_signature": "public CSVFormat withCommentStart(final char commentStart)", "class_method_signature": "CSVFormat.withCommentStart(final char commentStart)", "testcase": false, "constructor": false}, {"identifier": "withCommentStart", "parameters": "(final Character commentStart)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withCommentStart(final Character commentStart)", "full_signature": "public CSVFormat withCommentStart(final Character commentStart)", "class_method_signature": "CSVFormat.withCommentStart(final Character commentStart)", "testcase": false, "constructor": false}, {"identifier": "withDelimiter", "parameters": "(final char delimiter)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withDelimiter(final char delimiter)", "full_signature": "public CSVFormat withDelimiter(final char delimiter)", "class_method_signature": "CSVFormat.withDelimiter(final char delimiter)", "testcase": false, "constructor": false}, {"identifier": "withEscape", "parameters": "(final char escape)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withEscape(final char escape)", "full_signature": "public CSVFormat withEscape(final char escape)", "class_method_signature": "CSVFormat.withEscape(final char escape)", "testcase": false, "constructor": false}, {"identifier": "withEscape", "parameters": "(final Character escape)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withEscape(final Character escape)", "full_signature": "public CSVFormat withEscape(final Character escape)", "class_method_signature": "CSVFormat.withEscape(final Character escape)", "testcase": false, "constructor": false}, {"identifier": "withHeader", "parameters": "(final String... header)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withHeader(final String... header)", "full_signature": "public CSVFormat withHeader(final String... header)", "class_method_signature": "CSVFormat.withHeader(final String... header)", "testcase": false, "constructor": false}, {"identifier": "withIgnoreEmptyLines", "parameters": "(final boolean ignoreEmptyLines)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines)", "full_signature": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines)", "class_method_signature": "CSVFormat.withIgnoreEmptyLines(final boolean ignoreEmptyLines)", "testcase": false, "constructor": false}, {"identifier": "withIgnoreSurroundingSpaces", "parameters": "(final boolean ignoreSurroundingSpaces)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces)", "full_signature": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces)", "class_method_signature": "CSVFormat.withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces)", "testcase": false, "constructor": false}, {"identifier": "withNullString", "parameters": "(final String nullString)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withNullString(final String nullString)", "full_signature": "public CSVFormat withNullString(final String nullString)", "class_method_signature": "CSVFormat.withNullString(final String nullString)", "testcase": false, "constructor": false}, {"identifier": "withQuoteChar", "parameters": "(final char quoteChar)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withQuoteChar(final char quoteChar)", "full_signature": "public CSVFormat withQuoteChar(final char quoteChar)", "class_method_signature": "CSVFormat.withQuoteChar(final char quoteChar)", "testcase": false, "constructor": false}, {"identifier": "withQuoteChar", "parameters": "(final Character quoteChar)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withQuoteChar(final Character quoteChar)", "full_signature": "public CSVFormat withQuoteChar(final Character quoteChar)", "class_method_signature": "CSVFormat.withQuoteChar(final Character quoteChar)", "testcase": false, "constructor": false}, {"identifier": "withQuotePolicy", "parameters": "(final Quote quotePolicy)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withQuotePolicy(final Quote quotePolicy)", "full_signature": "public CSVFormat withQuotePolicy(final Quote quotePolicy)", "class_method_signature": "CSVFormat.withQuotePolicy(final Quote quotePolicy)", "testcase": false, "constructor": false}, {"identifier": "withRecordSeparator", "parameters": "(final char recordSeparator)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withRecordSeparator(final char recordSeparator)", "full_signature": "public CSVFormat withRecordSeparator(final char recordSeparator)", "class_method_signature": "CSVFormat.withRecordSeparator(final char recordSeparator)", "testcase": false, "constructor": false}, {"identifier": "withRecordSeparator", "parameters": "(final String recordSeparator)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withRecordSeparator(final String recordSeparator)", "full_signature": "public CSVFormat withRecordSeparator(final String recordSeparator)", "class_method_signature": "CSVFormat.withRecordSeparator(final String recordSeparator)", "testcase": false, "constructor": false}, {"identifier": "withSkipHeaderRecord", "parameters": "(final boolean skipHeaderRecord)", "modifiers": "public", "return": "CSVFormat", "signature": "CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord)", "full_signature": "public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord)", "class_method_signature": "CSVFormat.withSkipHeaderRecord(final boolean skipHeaderRecord)", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/csv/CSVFormat.java"}, "focal_method": {"identifier": "withIgnoreEmptyLines", "parameters": "(final boolean ignoreEmptyLines)", "modifiers": "public", "return": "CSVFormat", "body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\n        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n    }", "signature": "CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines)", "full_signature": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines)", "class_method_signature": "CSVFormat.withIgnoreEmptyLines(final boolean ignoreEmptyLines)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}