{"test_class": {"identifier": "ZipUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File PROJECT_BASE_FOLDER = new File(\".\");", "modifier": "private static final", "type": "File", "declarator": "PROJECT_BASE_FOLDER = new File(\".\")", "var_name": "PROJECT_BASE_FOLDER"}, {"original_string": "private static final File TEST_FILE_FOLDER = new File(PROJECT_BASE_FOLDER, \"src/test/data/test_zip\");", "modifier": "private static final", "type": "File", "declarator": "TEST_FILE_FOLDER = new File(PROJECT_BASE_FOLDER, \"src/test/data/test_zip\")", "var_name": "TEST_FILE_FOLDER"}, {"original_string": "private static File outputFolder = null;", "modifier": "private static", "type": "File", "declarator": "outputFolder = null", "var_name": "outputFolder"}, {"original_string": "private static File extractResultOut = null;", "modifier": "private static", "type": "File", "declarator": "extractResultOut = null", "var_name": "extractResultOut"}, {"original_string": "private static File zip = null;", "modifier": "private static", "type": "File", "declarator": "zip = null", "var_name": "zip"}], "file": "core/utils/src/test/java/eu/planets_project/services/utils/ZipUtilsTest.java"}, "test_case": {"identifier": "testCreateZipFileWithChecksum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateZipFileWithChecksum() {\n        File[] files = TEST_FILE_FOLDER.listFiles();\n        System.out.println(\"File count: \" + files.length);\n        for (int i = 0; i < files.length; i++) {\n            System.out.println(i + \": \" + files[i].getAbsolutePath());\n        }\n        ZipResult zipResult = ZipUtils.createZipAndCheck(\n                TEST_FILE_FOLDER, outputFolder, DigitalObjectUtils.randomizeFileName(TEST_FILE_FOLDER.getName()\n                        + \".zip\"), false);\n        File zip = zipResult.getZipFile();\n        System.out.println(\"Please find ZIP here: \" + zip.getAbsolutePath());\n        System.out.println(\"Zip Checksum is: \" + zipResult.getChecksum());\n    }", "signature": "void testCreateZipFileWithChecksum()", "full_signature": "@Test public void testCreateZipFileWithChecksum()", "class_method_signature": "ZipUtilsTest.testCreateZipFileWithChecksum()", "testcase": true, "constructor": false, "invocations": ["listFiles", "println", "println", "getAbsolutePath", "createZipAndCheck", "randomizeFileName", "getName", "getZipFile", "println", "getAbsolutePath", "println", "getChecksum"]}, "focal_class": {"identifier": "ZipUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = Logger.getLogger(ZipUtils.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(ZipUtils.class.getName())", "var_name": "log"}], "methods": [{"identifier": "createZip", "parameters": "(File srcFolder, File destFolder, String zipName, boolean compress)", "modifiers": "public static", "return": "File", "signature": "File createZip(File srcFolder, File destFolder, String zipName, boolean compress)", "full_signature": "public static File createZip(File srcFolder, File destFolder, String zipName, boolean compress)", "class_method_signature": "ZipUtils.createZip(File srcFolder, File destFolder, String zipName, boolean compress)", "testcase": false, "constructor": false}, {"identifier": "createZipAndCheck", "parameters": "(File srcFolder, File destFolder, String zipName, boolean compress)", "modifiers": "public static", "return": "ZipResult", "signature": "ZipResult createZipAndCheck(File srcFolder, File destFolder, String zipName, boolean compress)", "full_signature": "public static ZipResult createZipAndCheck(File srcFolder, File destFolder, String zipName, boolean compress)", "class_method_signature": "ZipUtils.createZipAndCheck(File srcFolder, File destFolder, String zipName, boolean compress)", "testcase": false, "constructor": false}, {"identifier": "unzipTo", "parameters": "(File zipFile, File destFolder)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "List<File>", "signature": "List<File> unzipTo(File zipFile, File destFolder)", "full_signature": "@SuppressWarnings(\"unchecked\") public static List<File> unzipTo(File zipFile, File destFolder)", "class_method_signature": "ZipUtils.unzipTo(File zipFile, File destFolder)", "testcase": false, "constructor": false}, {"identifier": "readFileEntry", "parameters": "(Zip64File zip64File, FileEntry fileEntry, File destFolder)", "modifiers": "private static", "return": "void", "signature": "void readFileEntry(Zip64File zip64File, FileEntry fileEntry, File destFolder)", "full_signature": "private static void readFileEntry(Zip64File zip64File, FileEntry fileEntry, File destFolder)", "class_method_signature": "ZipUtils.readFileEntry(Zip64File zip64File, FileEntry fileEntry, File destFolder)", "testcase": false, "constructor": false}, {"identifier": "readFolderEntry", "parameters": "(Zip64File zip64File, FileEntry folderEntry, File dest)", "modifiers": "private static", "return": "void", "signature": "void readFolderEntry(Zip64File zip64File, FileEntry folderEntry, File dest)", "full_signature": "private static void readFolderEntry(Zip64File zip64File, FileEntry folderEntry, File dest)", "class_method_signature": "ZipUtils.readFolderEntry(Zip64File zip64File, FileEntry folderEntry, File dest)", "testcase": false, "constructor": false}, {"identifier": "checkAndUnzipTo", "parameters": "(File zipFile, File destFolder, Checksum checksum)", "modifiers": "public static", "return": "List<File>", "signature": "List<File> checkAndUnzipTo(File zipFile, File destFolder, Checksum checksum)", "full_signature": "public static List<File> checkAndUnzipTo(File zipFile, File destFolder, Checksum checksum)", "class_method_signature": "ZipUtils.checkAndUnzipTo(File zipFile, File destFolder, Checksum checksum)", "testcase": false, "constructor": false}, {"identifier": "getAllFragments", "parameters": "(File zip)", "modifiers": "public static", "return": "String[]", "signature": "String[] getAllFragments(File zip)", "full_signature": "public static String[] getAllFragments(File zip)", "class_method_signature": "ZipUtils.getAllFragments(File zip)", "testcase": false, "constructor": false}, {"identifier": "getFileFrom", "parameters": "(File zip, String targetPathInZipfile, File destFolder)", "modifiers": "public static", "return": "File", "signature": "File getFileFrom(File zip, String targetPathInZipfile, File destFolder)", "full_signature": "public static File getFileFrom(File zip, String targetPathInZipfile, File destFolder)", "class_method_signature": "ZipUtils.getFileFrom(File zip, String targetPathInZipfile, File destFolder)", "testcase": false, "constructor": false}, {"identifier": "insertFileInto", "parameters": "(File zipFile, File toInsert, String targetPath)", "modifiers": "public static", "return": "File", "signature": "File insertFileInto(File zipFile, File toInsert, String targetPath)", "full_signature": "public static File insertFileInto(File zipFile, File toInsert, String targetPath)", "class_method_signature": "ZipUtils.insertFileInto(File zipFile, File toInsert, String targetPath)", "testcase": false, "constructor": false}, {"identifier": "parseTargetPath", "parameters": "(String targetPath, File toInsert)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> parseTargetPath(String targetPath, File toInsert)", "full_signature": "private static List<String> parseTargetPath(String targetPath, File toInsert)", "class_method_signature": "ZipUtils.parseTargetPath(String targetPath, File toInsert)", "testcase": false, "constructor": false}, {"identifier": "processAndCreateFolderEntries", "parameters": "(Zip64File zip64File, List<String> pathParts, boolean compress)", "modifiers": "private static", "return": "void", "signature": "void processAndCreateFolderEntries(Zip64File zip64File, List<String> pathParts, boolean compress)", "full_signature": "private static void processAndCreateFolderEntries(Zip64File zip64File, List<String> pathParts, boolean compress)", "class_method_signature": "ZipUtils.processAndCreateFolderEntries(Zip64File zip64File, List<String> pathParts, boolean compress)", "testcase": false, "constructor": false}, {"identifier": "removeFileFrom", "parameters": "(File zipFile, String fileToRemove)", "modifiers": "public static", "return": "File", "signature": "File removeFileFrom(File zipFile, String fileToRemove)", "full_signature": "public static File removeFileFrom(File zipFile, String fileToRemove)", "class_method_signature": "ZipUtils.removeFileFrom(File zipFile, String fileToRemove)", "testcase": false, "constructor": false}, {"identifier": "isZipFile", "parameters": "(File file)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "boolean", "signature": "boolean isZipFile(File file)", "full_signature": "@SuppressWarnings(\"unchecked\") public static boolean isZipFile(File file)", "class_method_signature": "ZipUtils.isZipFile(File file)", "testcase": false, "constructor": false}, {"identifier": "listZipEntries", "parameters": "(File zip)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "List<String>", "signature": "List<String> listZipEntries(File zip)", "full_signature": "@SuppressWarnings(\"unchecked\") public static List<String> listZipEntries(File zip)", "class_method_signature": "ZipUtils.listZipEntries(File zip)", "testcase": false, "constructor": false}, {"identifier": "getParents", "parameters": "(FileEntry fileEntry)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> getParents(FileEntry fileEntry)", "full_signature": "private static List<String> getParents(FileEntry fileEntry)", "class_method_signature": "ZipUtils.getParents(FileEntry fileEntry)", "testcase": false, "constructor": false}, {"identifier": "readEntry", "parameters": "(Zip64File zip64File, FileEntry toRead, File destFolder)", "modifiers": "private static", "return": "File", "signature": "File readEntry(Zip64File zip64File, FileEntry toRead, File destFolder)", "full_signature": "private static File readEntry(Zip64File zip64File, FileEntry toRead, File destFolder)", "class_method_signature": "ZipUtils.readEntry(Zip64File zip64File, FileEntry toRead, File destFolder)", "testcase": false, "constructor": false}, {"identifier": "writeEntry", "parameters": "(Zip64File zip64File, FileEntry targetPath, File toWrite, boolean compress)", "modifiers": "private static", "return": "FileEntry", "signature": "FileEntry writeEntry(Zip64File zip64File, FileEntry targetPath, File toWrite, boolean compress)", "full_signature": "private static FileEntry writeEntry(Zip64File zip64File, FileEntry targetPath, File toWrite, boolean compress)", "class_method_signature": "ZipUtils.writeEntry(Zip64File zip64File, FileEntry targetPath, File toWrite, boolean compress)", "testcase": false, "constructor": false}, {"identifier": "getFileDate", "parameters": "(File file)", "modifiers": "private static", "return": "Date", "signature": "Date getFileDate(File file)", "full_signature": "private static Date getFileDate(File file)", "class_method_signature": "ZipUtils.getFileDate(File file)", "testcase": false, "constructor": false}, {"identifier": "testFileEntry", "parameters": "(Zip64File zip64File, String targetPath)", "modifiers": "@SuppressWarnings(\"unused\") private static", "return": "FileEntry", "signature": "FileEntry testFileEntry(Zip64File zip64File, String targetPath)", "full_signature": "@SuppressWarnings(\"unused\") private static FileEntry testFileEntry(Zip64File zip64File, String targetPath)", "class_method_signature": "ZipUtils.testFileEntry(Zip64File zip64File, String targetPath)", "testcase": false, "constructor": false}, {"identifier": "testFolderEntry", "parameters": "(Zip64File zip64File, String targetPath)", "modifiers": "@SuppressWarnings(\"unused\") private static", "return": "FileEntry", "signature": "FileEntry testFolderEntry(Zip64File zip64File, String targetPath)", "full_signature": "@SuppressWarnings(\"unused\") private static FileEntry testFolderEntry(Zip64File zip64File, String targetPath)", "class_method_signature": "ZipUtils.testFolderEntry(Zip64File zip64File, String targetPath)", "testcase": false, "constructor": false}, {"identifier": "deleteFileEntry", "parameters": "(Zip64File zip, FileEntry toDelete)", "modifiers": "private static", "return": "List<FileEntry>", "signature": "List<FileEntry> deleteFileEntry(Zip64File zip, FileEntry toDelete)", "full_signature": "private static List<FileEntry> deleteFileEntry(Zip64File zip, FileEntry toDelete)", "class_method_signature": "ZipUtils.deleteFileEntry(Zip64File zip, FileEntry toDelete)", "testcase": false, "constructor": false}, {"identifier": "deleteEntriesRecursively", "parameters": "(Zip64File zip, FileEntry toDelete, List<FileEntry> deletedEntries)", "modifiers": "private static", "return": "List<FileEntry>", "signature": "List<FileEntry> deleteEntriesRecursively(Zip64File zip, FileEntry toDelete, List<FileEntry> deletedEntries)", "full_signature": "private static List<FileEntry> deleteEntriesRecursively(Zip64File zip, FileEntry toDelete, List<FileEntry> deletedEntries)", "class_method_signature": "ZipUtils.deleteEntriesRecursively(Zip64File zip, FileEntry toDelete, List<FileEntry> deletedEntries)", "testcase": false, "constructor": false}, {"identifier": "getFileEntry", "parameters": "(Zip64File zip64File, String entryPath)", "modifiers": "private static", "return": "FileEntry", "signature": "FileEntry getFileEntry(Zip64File zip64File, String entryPath)", "full_signature": "private static FileEntry getFileEntry(Zip64File zip64File, String entryPath)", "class_method_signature": "ZipUtils.getFileEntry(Zip64File zip64File, String entryPath)", "testcase": false, "constructor": false}, {"identifier": "getFileEntryChildren", "parameters": "(Zip64File zip, FileEntry folderEntry)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> getFileEntryChildren(Zip64File zip, FileEntry folderEntry)", "full_signature": "private static List<String> getFileEntryChildren(Zip64File zip, FileEntry folderEntry)", "class_method_signature": "ZipUtils.getFileEntryChildren(Zip64File zip, FileEntry folderEntry)", "testcase": false, "constructor": false}, {"identifier": "listZipEntries", "parameters": "(Zip64File zip64File)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "List<String>", "signature": "List<String> listZipEntries(Zip64File zip64File)", "full_signature": "@SuppressWarnings(\"unchecked\") private static List<String> listZipEntries(Zip64File zip64File)", "class_method_signature": "ZipUtils.listZipEntries(Zip64File zip64File)", "testcase": false, "constructor": false}, {"identifier": "listAllFilesAndFolders", "parameters": "(final File dir,\n            final ArrayList<String> list)", "modifiers": "private static", "return": "ArrayList<String>", "signature": "ArrayList<String> listAllFilesAndFolders(final File dir,\n            final ArrayList<String> list)", "full_signature": "private static ArrayList<String> listAllFilesAndFolders(final File dir,\n            final ArrayList<String> list)", "class_method_signature": "ZipUtils.listAllFilesAndFolders(final File dir,\n            final ArrayList<String> list)", "testcase": false, "constructor": false}, {"identifier": "normalizePaths", "parameters": "(File folder)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> normalizePaths(File folder)", "full_signature": "private static List<String> normalizePaths(File folder)", "class_method_signature": "ZipUtils.normalizePaths(File folder)", "testcase": false, "constructor": false}, {"identifier": "listAllFilesAndFolders", "parameters": "(final File dir,\n            final List<File> list)", "modifiers": "static", "return": "List<File>", "signature": "List<File> listAllFilesAndFolders(final File dir,\n            final List<File> list)", "full_signature": "static List<File> listAllFilesAndFolders(final File dir,\n            final List<File> list)", "class_method_signature": "ZipUtils.listAllFilesAndFolders(final File dir,\n            final List<File> list)", "testcase": false, "constructor": false}], "file": "core/utils/src/main/java/eu/planets_project/services/utils/ZipUtils.java"}, "focal_method": {"identifier": "createZipAndCheck", "parameters": "(File srcFolder, File destFolder, String zipName, boolean compress)", "modifiers": "public static", "return": "ZipResult", "body": "public static ZipResult createZipAndCheck(File srcFolder, File destFolder, String zipName, boolean compress) {\n\t\tif(zipName==null) {\n\t\t\tzipName = srcFolder.getName();\n\t\t}\n\t\tFile newZipFile = createZip(srcFolder, destFolder, zipName, compress);\n\t\tlog.info(\"[createZipAndCheck] Zip file created: \" + zipName);\n\t\tZipResult zipResult = new ZipResult();\n\t\ttry {\n\t\t\tbyte[] digest = Checksums.md5(newZipFile);\n\t\t\tzipResult.setZipFile(newZipFile);\n\t\t\tzipResult.setChecksum(new Checksum(\"MD5\", Arrays.toString(digest)));\n\t\t\tlog.info(\"[createZipAndCheck] Checksum (MD5) created: \" + zipResult.getChecksum()); \n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn zipResult;\n\t}", "signature": "ZipResult createZipAndCheck(File srcFolder, File destFolder, String zipName, boolean compress)", "full_signature": "public static ZipResult createZipAndCheck(File srcFolder, File destFolder, String zipName, boolean compress)", "class_method_signature": "ZipUtils.createZipAndCheck(File srcFolder, File destFolder, String zipName, boolean compress)", "testcase": false, "constructor": false, "invocations": ["getName", "createZip", "info", "md5", "setZipFile", "setChecksum", "toString", "info", "getChecksum", "printStackTrace", "printStackTrace"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}