{"test_class": {"identifier": "StrictSubscriberTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/subscribers/StrictSubscriberTest.java"}, "test_case": {"identifier": "doubleOnSubscribe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doubleOnSubscribe() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        SubscriberWrapper<Integer> wrapper = new SubscriberWrapper<Integer>(ts);\n\n        new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> s) {\n                BooleanSubscription b1 = new BooleanSubscription();\n                s.onSubscribe(b1);\n\n                BooleanSubscription b2 = new BooleanSubscription();\n                s.onSubscribe(b2);\n\n                assertTrue(b1.isCancelled());\n                assertTrue(b2.isCancelled());\n            }\n        }.subscribe(wrapper);\n\n        ts.assertFailure(IllegalStateException.class);\n        assertTrue(ts.errors().toString(), ts.errors().get(0).getMessage().contains(\"2.12\"));\n    }", "signature": "void doubleOnSubscribe()", "full_signature": "@Test public void doubleOnSubscribe()", "class_method_signature": "StrictSubscriberTest.doubleOnSubscribe()", "testcase": true, "constructor": false, "invocations": ["subscribe", "onSubscribe", "onSubscribe", "assertTrue", "isCancelled", "assertTrue", "isCancelled", "assertFailure", "assertTrue", "toString", "errors", "contains", "getMessage", "get", "errors"]}, "focal_class": {"identifier": "StrictSubscriber", "superclass": "extends AtomicInteger", "interfaces": "implements FlowableSubscriber<T>, Subscription", "fields": [{"original_string": "private static final long serialVersionUID = -4945028590049415624L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4945028590049415624L", "var_name": "serialVersionUID"}, {"original_string": "final Subscriber<? super T> actual;", "modifier": "final", "type": "Subscriber<? super T>", "declarator": "actual", "var_name": "actual"}, {"original_string": "final AtomicThrowable error;", "modifier": "final", "type": "AtomicThrowable", "declarator": "error", "var_name": "error"}, {"original_string": "final AtomicLong requested;", "modifier": "final", "type": "AtomicLong", "declarator": "requested", "var_name": "requested"}, {"original_string": "final AtomicReference<Subscription> s;", "modifier": "final", "type": "AtomicReference<Subscription>", "declarator": "s", "var_name": "s"}, {"original_string": "final AtomicBoolean once;", "modifier": "final", "type": "AtomicBoolean", "declarator": "once", "var_name": "once"}, {"original_string": "volatile boolean done;", "modifier": "volatile", "type": "boolean", "declarator": "done", "var_name": "done"}], "methods": [{"identifier": "StrictSubscriber", "parameters": "(Subscriber<? super T> actual)", "modifiers": "public", "return": "", "signature": " StrictSubscriber(Subscriber<? super T> actual)", "full_signature": "public  StrictSubscriber(Subscriber<? super T> actual)", "class_method_signature": "StrictSubscriber.StrictSubscriber(Subscriber<? super T> actual)", "testcase": false, "constructor": true}, {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public", "return": "void", "signature": "void request(long n)", "full_signature": "@Override public void request(long n)", "class_method_signature": "StrictSubscriber.request(long n)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "StrictSubscriber.cancel()", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "StrictSubscriber.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "StrictSubscriber.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "StrictSubscriber.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "StrictSubscriber.onComplete()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/subscribers/StrictSubscriber.java"}, "focal_method": {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onSubscribe(Subscription s) {\n        if (once.compareAndSet(false, true)) {\n\n            actual.onSubscribe(this);\n\n            SubscriptionHelper.deferredSetOnce(this.s, requested, s);\n        } else {\n            s.cancel();\n            cancel();\n            onError(new IllegalStateException(\"\u00a72.12 violated: onSubscribe must be called at most once\"));\n        }\n    }", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "StrictSubscriber.onSubscribe(Subscription s)", "testcase": false, "constructor": false, "invocations": ["compareAndSet", "onSubscribe", "deferredSetOnce", "cancel", "cancel", "onError"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}