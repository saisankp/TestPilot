{"test_class": {"identifier": "SplittingManagerTest", "superclass": "extends BaseKujakuLayerTest", "interfaces": "", "fields": [{"original_string": "private MapboxMap mapboxMap = Mockito.mock(MapboxMap.class);", "modifier": "private", "type": "MapboxMap", "declarator": "mapboxMap = Mockito.mock(MapboxMap.class)", "var_name": "mapboxMap"}, {"original_string": "private KujakuMapView mapView = Mockito.mock(KujakuMapView.class);", "modifier": "private", "type": "KujakuMapView", "declarator": "mapView = Mockito.mock(KujakuMapView.class)", "var_name": "mapView"}, {"original_string": "private Style style = Mockito.mock(Style.class);", "modifier": "private", "type": "Style", "declarator": "style = Mockito.mock(Style.class)", "var_name": "style"}, {"original_string": "private SplittingManager manager;", "modifier": "private", "type": "SplittingManager", "declarator": "manager", "var_name": "manager"}], "file": "library/src/test/java/io/ona/kujaku/manager/SplittingManagerTest.java"}, "test_case": {"identifier": "testSplittingManagerOptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSplittingManagerOptions() {\n        SplittingManagerOptions options = new SplittingManagerOptions() {\n            @Override\n            public String getCircleColor() {\n                return \"green\";\n            }\n\n            @Override\n            public String getLineColor() {\n                return \"blue\";\n            }\n\n            @Override\n            public Float getCircleRadius() {\n                return 5f;\n            }\n\n            @Override\n            public String getKujakuFillLayerColor() {\n                return \"black\";\n            }\n\n            @Override\n            public String getKujakuFillLayerColorSelected() {\n                return \"yellow\";\n            }\n\n            @Override\n            public KujakuCircleOptions getKujakuCircleOptions() {\n                return new KujakuCircleOptions()\n                        .withCircleRadius(getCircleRadius())\n                        .withCircleColor(getCircleColor())\n                        .withDraggable(true);\n            }\n        };\n\n        manager.setSplittingManagerOptions(options);\n\n        Assert.assertEquals(options.getCircleColor(), \"green\");\n        Assert.assertEquals(options.getLineColor(), \"blue\");\n        Assert.assertEquals(options.getCircleRadius(), 5f, 0);\n        Assert.assertEquals(options.getKujakuFillLayerColor(), \"black\");\n        Assert.assertEquals(options.getKujakuFillLayerColorSelected(), \"yellow\");\n    }", "signature": "void testSplittingManagerOptions()", "full_signature": "@Test public void testSplittingManagerOptions()", "class_method_signature": "SplittingManagerTest.testSplittingManagerOptions()", "testcase": true, "constructor": false, "invocations": ["withDraggable", "withCircleColor", "withCircleRadius", "getCircleRadius", "getCircleColor", "setSplittingManagerOptions", "assertEquals", "getCircleColor", "assertEquals", "getLineColor", "assertEquals", "getCircleRadius", "assertEquals", "getKujakuFillLayerColor", "assertEquals", "getKujakuFillLayerColorSelected"]}, "focal_class": {"identifier": "SplittingManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private KujakuMapView kujakuMapView;", "modifier": "private", "type": "KujakuMapView", "declarator": "kujakuMapView", "var_name": "kujakuMapView"}, {"original_string": "private MapboxMap mapboxMap;", "modifier": "private", "type": "MapboxMap", "declarator": "mapboxMap", "var_name": "mapboxMap"}, {"original_string": "private FillBoundaryLayer fillBoundaryLayer;", "modifier": "private", "type": "FillBoundaryLayer", "declarator": "fillBoundaryLayer", "var_name": "fillBoundaryLayer"}, {"original_string": "private Circle circleStart;", "modifier": "private", "type": "Circle", "declarator": "circleStart", "var_name": "circleStart"}, {"original_string": "private Circle circleEnd;", "modifier": "private", "type": "Circle", "declarator": "circleEnd", "var_name": "circleEnd"}, {"original_string": "private Line splittingLine;", "modifier": "private", "type": "Line", "declarator": "splittingLine", "var_name": "splittingLine"}, {"original_string": "private List<Point> polygonToSplit;", "modifier": "private", "type": "List<Point>", "declarator": "polygonToSplit", "var_name": "polygonToSplit"}, {"original_string": "private LineManager lineManager;", "modifier": "private", "type": "LineManager", "declarator": "lineManager", "var_name": "lineManager"}, {"original_string": "private CircleManager circleManager;", "modifier": "private", "type": "CircleManager", "declarator": "circleManager", "var_name": "circleManager"}, {"original_string": "private OnSplittingClickListener onSplittingClickListener;", "modifier": "private", "type": "OnSplittingClickListener", "declarator": "onSplittingClickListener", "var_name": "onSplittingClickListener"}, {"original_string": "private OnKujakuLayerClickListener onKujakuLayerClickListener;", "modifier": "private", "type": "OnKujakuLayerClickListener", "declarator": "onKujakuLayerClickListener", "var_name": "onKujakuLayerClickListener"}, {"original_string": "private boolean splittingEnabled;", "modifier": "private", "type": "boolean", "declarator": "splittingEnabled", "var_name": "splittingEnabled"}, {"original_string": "private SplittingManagerOptions options;", "modifier": "private", "type": "SplittingManagerOptions", "declarator": "options", "var_name": "options"}], "methods": [{"identifier": "SplittingManager", "parameters": "(@NonNull KujakuMapView mapView, @NonNull MapboxMap mapboxMap, @NonNull Style style)", "modifiers": "public", "return": "", "signature": " SplittingManager(@NonNull KujakuMapView mapView, @NonNull MapboxMap mapboxMap, @NonNull Style style)", "full_signature": "public  SplittingManager(@NonNull KujakuMapView mapView, @NonNull MapboxMap mapboxMap, @NonNull Style style)", "class_method_signature": "SplittingManager.SplittingManager(@NonNull KujakuMapView mapView, @NonNull MapboxMap mapboxMap, @NonNull Style style)", "testcase": false, "constructor": true}, {"identifier": "setSplittingManagerOptions", "parameters": "(@NonNull SplittingManagerOptions options)", "modifiers": "public", "return": "void", "signature": "void setSplittingManagerOptions(@NonNull SplittingManagerOptions options)", "full_signature": "public void setSplittingManagerOptions(@NonNull SplittingManagerOptions options)", "class_method_signature": "SplittingManager.setSplittingManagerOptions(@NonNull SplittingManagerOptions options)", "testcase": false, "constructor": false}, {"identifier": "startSplitting", "parameters": "(@NonNull FillBoundaryLayer fillBoundaryLayer)", "modifiers": "public", "return": "boolean", "signature": "boolean startSplitting(@NonNull FillBoundaryLayer fillBoundaryLayer)", "full_signature": "public boolean startSplitting(@NonNull FillBoundaryLayer fillBoundaryLayer)", "class_method_signature": "SplittingManager.startSplitting(@NonNull FillBoundaryLayer fillBoundaryLayer)", "testcase": false, "constructor": false}, {"identifier": "startSplitting", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startSplitting()", "full_signature": "private void startSplitting()", "class_method_signature": "SplittingManager.startSplitting()", "testcase": false, "constructor": false}, {"identifier": "stopSplitting", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopSplitting()", "full_signature": "public void stopSplitting()", "class_method_signature": "SplittingManager.stopSplitting()", "testcase": false, "constructor": false}, {"identifier": "drawCircle", "parameters": "(@NonNull LatLng latLng)", "modifiers": "public", "return": "Circle", "signature": "Circle drawCircle(@NonNull LatLng latLng)", "full_signature": "public Circle drawCircle(@NonNull LatLng latLng)", "class_method_signature": "SplittingManager.drawCircle(@NonNull LatLng latLng)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(@NonNull KujakuCircleOptions options)", "modifiers": "private", "return": "Circle", "signature": "Circle create(@NonNull KujakuCircleOptions options)", "full_signature": "private Circle create(@NonNull KujakuCircleOptions options)", "class_method_signature": "SplittingManager.create(@NonNull KujakuCircleOptions options)", "testcase": false, "constructor": false}, {"identifier": "checkSplitPoints", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean checkSplitPoints()", "full_signature": "private boolean checkSplitPoints()", "class_method_signature": "SplittingManager.checkSplitPoints()", "testcase": false, "constructor": false}, {"identifier": "refreshSplitLine", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshSplitLine()", "full_signature": "private void refreshSplitLine()", "class_method_signature": "SplittingManager.refreshSplitLine()", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "()", "modifiers": "public", "return": "List<List<Point>>", "signature": "List<List<Point>> split()", "full_signature": "public List<List<Point>> split()", "class_method_signature": "SplittingManager.split()", "testcase": false, "constructor": false}, {"identifier": "addPointsToPolygons", "parameters": "(@NonNull Point pointA, @NonNull Point pointB, Point crossPoint,  @NonNull List<Point> polygonA,  @NonNull List<Point> polygonB)", "modifiers": "private", "return": "void", "signature": "void addPointsToPolygons(@NonNull Point pointA, @NonNull Point pointB, Point crossPoint,  @NonNull List<Point> polygonA,  @NonNull List<Point> polygonB)", "full_signature": "private void addPointsToPolygons(@NonNull Point pointA, @NonNull Point pointB, Point crossPoint,  @NonNull List<Point> polygonA,  @NonNull List<Point> polygonB)", "class_method_signature": "SplittingManager.addPointsToPolygons(@NonNull Point pointA, @NonNull Point pointB, Point crossPoint,  @NonNull List<Point> polygonA,  @NonNull List<Point> polygonB)", "testcase": false, "constructor": false}, {"identifier": "displayPolygons", "parameters": "(List<List<Point>> polygons)", "modifiers": "private", "return": "void", "signature": "void displayPolygons(List<List<Point>> polygons)", "full_signature": "private void displayPolygons(List<List<Point>> polygons)", "class_method_signature": "SplittingManager.displayPolygons(List<List<Point>> polygons)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deleteAll()", "full_signature": "private void deleteAll()", "class_method_signature": "SplittingManager.deleteAll()", "testcase": false, "constructor": false}, {"identifier": "deleteLine", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deleteLine()", "full_signature": "private void deleteLine()", "class_method_signature": "SplittingManager.deleteLine()", "testcase": false, "constructor": false}, {"identifier": "isSplittingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSplittingEnabled()", "full_signature": "public boolean isSplittingEnabled()", "class_method_signature": "SplittingManager.isSplittingEnabled()", "testcase": false, "constructor": false}, {"identifier": "isSplittingReady", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSplittingReady()", "full_signature": "public boolean isSplittingReady()", "class_method_signature": "SplittingManager.isSplittingReady()", "testcase": false, "constructor": false}, {"identifier": "addOnSplittingClickListener", "parameters": "(OnSplittingClickListener listener)", "modifiers": "public", "return": "void", "signature": "void addOnSplittingClickListener(OnSplittingClickListener listener)", "full_signature": "public void addOnSplittingClickListener(OnSplittingClickListener listener)", "class_method_signature": "SplittingManager.addOnSplittingClickListener(OnSplittingClickListener listener)", "testcase": false, "constructor": false}, {"identifier": "addOnKujakuLayerClickListener", "parameters": "(OnKujakuLayerClickListener listener)", "modifiers": "public", "return": "void", "signature": "void addOnKujakuLayerClickListener(OnKujakuLayerClickListener listener)", "full_signature": "public void addOnKujakuLayerClickListener(OnKujakuLayerClickListener listener)", "class_method_signature": "SplittingManager.addOnKujakuLayerClickListener(OnKujakuLayerClickListener listener)", "testcase": false, "constructor": false}, {"identifier": "lineIntersects", "parameters": "(Point start, Point end, Point splitStart, Point splitEnd)", "modifiers": "private static", "return": "LineIntersectsResult", "signature": "LineIntersectsResult lineIntersects(Point start, Point end, Point splitStart, Point splitEnd)", "full_signature": "private static LineIntersectsResult lineIntersects(Point start, Point end, Point splitStart, Point splitEnd)", "class_method_signature": "SplittingManager.lineIntersects(Point start, Point end, Point splitStart, Point splitEnd)", "testcase": false, "constructor": false}, {"identifier": "lineIntersects", "parameters": "(double line1StartX, double line1StartY,\n                                                                      double line1EndX, double line1EndY,\n                                                                      double line2StartX, double line2StartY,\n                                                                      double line2EndX, double line2EndY)", "modifiers": "private static", "return": "LineIntersectsResult", "signature": "LineIntersectsResult lineIntersects(double line1StartX, double line1StartY,\n                                                                      double line1EndX, double line1EndY,\n                                                                      double line2StartX, double line2StartY,\n                                                                      double line2EndX, double line2EndY)", "full_signature": "private static LineIntersectsResult lineIntersects(double line1StartX, double line1StartY,\n                                                                      double line1EndX, double line1EndY,\n                                                                      double line2StartX, double line2StartY,\n                                                                      double line2EndX, double line2EndY)", "class_method_signature": "SplittingManager.lineIntersects(double line1StartX, double line1StartY,\n                                                                      double line1EndX, double line1EndY,\n                                                                      double line2StartX, double line2StartY,\n                                                                      double line2EndX, double line2EndY)", "testcase": false, "constructor": false}], "file": "library/src/main/java/io/ona/kujaku/manager/SplittingManager.java"}, "focal_method": {"identifier": "setSplittingManagerOptions", "parameters": "(@NonNull SplittingManagerOptions options)", "modifiers": "public", "return": "void", "body": "public void setSplittingManagerOptions(@NonNull SplittingManagerOptions options) {\n        this.options = options;\n    }", "signature": "void setSplittingManagerOptions(@NonNull SplittingManagerOptions options)", "full_signature": "public void setSplittingManagerOptions(@NonNull SplittingManagerOptions options)", "class_method_signature": "SplittingManager.setSplittingManagerOptions(@NonNull SplittingManagerOptions options)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}