{"test_class": {"identifier": "PreSyncProjectCleanUpTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Project myProject;", "modifier": "private", "type": "Project", "declarator": "myProject", "var_name": "myProject"}], "file": "android/testSrc/com/android/tools/idea/gradle/project/sync/cleanup/PreSyncProjectCleanUpTest.java"}, "test_case": {"identifier": "mainConstructor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void mainConstructor() {\n    PreSyncProjectCleanUp projectCleanUp = new PreSyncProjectCleanUp();\n    ProjectCleanUpTask[] tasks = projectCleanUp.getCleanUpTasks();\n    assertThat(tasks).hasLength(5);\n    assertThat(tasks[0]).isInstanceOf(ProjectNotificationsCleanUpTask.class);\n    assertThat(tasks[1]).isInstanceOf(ProjectPreferencesCleanUpTask.class);\n    assertThat(tasks[2]).isInstanceOf(HttpProxySettingsCleanUpTask.class);\n    assertThat(tasks[3]).isInstanceOf(GradleDistributionCleanUpTask.class);\n    assertThat(tasks[4]).isInstanceOf(SyncIssueCleanupTask.class);\n  }", "signature": "void mainConstructor()", "full_signature": "@Test public void mainConstructor()", "class_method_signature": "PreSyncProjectCleanUpTest.mainConstructor()", "testcase": true, "constructor": false, "invocations": ["getCleanUpTasks", "hasLength", "assertThat", "isInstanceOf", "assertThat", "isInstanceOf", "assertThat", "isInstanceOf", "assertThat", "isInstanceOf", "assertThat", "isInstanceOf", "assertThat"]}, "focal_class": {"identifier": "PreSyncProjectCleanUp", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NotNull private final ProjectCleanUpTask[] myCleanUpTasks;", "modifier": "@NotNull private final", "type": "ProjectCleanUpTask[]", "declarator": "myCleanUpTasks", "var_name": "myCleanUpTasks"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "@NotNull public static", "return": "PreSyncProjectCleanUp", "signature": "PreSyncProjectCleanUp getInstance()", "full_signature": "@NotNull public static PreSyncProjectCleanUp getInstance()", "class_method_signature": "PreSyncProjectCleanUp.getInstance()", "testcase": false, "constructor": false}, {"identifier": "PreSyncProjectCleanUp", "parameters": "()", "modifiers": "public", "return": "", "signature": " PreSyncProjectCleanUp()", "full_signature": "public  PreSyncProjectCleanUp()", "class_method_signature": "PreSyncProjectCleanUp.PreSyncProjectCleanUp()", "testcase": false, "constructor": true}, {"identifier": "PreSyncProjectCleanUp", "parameters": "(@NotNull ProjectCleanUpTask... cleanUpTasks)", "modifiers": "@VisibleForTesting", "return": "", "signature": " PreSyncProjectCleanUp(@NotNull ProjectCleanUpTask... cleanUpTasks)", "full_signature": "@VisibleForTesting  PreSyncProjectCleanUp(@NotNull ProjectCleanUpTask... cleanUpTasks)", "class_method_signature": "PreSyncProjectCleanUp.PreSyncProjectCleanUp(@NotNull ProjectCleanUpTask... cleanUpTasks)", "testcase": false, "constructor": true}, {"identifier": "cleanUp", "parameters": "(@NotNull Project project)", "modifiers": "public", "return": "void", "signature": "void cleanUp(@NotNull Project project)", "full_signature": "public void cleanUp(@NotNull Project project)", "class_method_signature": "PreSyncProjectCleanUp.cleanUp(@NotNull Project project)", "testcase": false, "constructor": false}, {"identifier": "getCleanUpTasks", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull", "return": "ProjectCleanUpTask[]", "signature": "ProjectCleanUpTask[] getCleanUpTasks()", "full_signature": "@VisibleForTesting @NotNull ProjectCleanUpTask[] getCleanUpTasks()", "class_method_signature": "PreSyncProjectCleanUp.getCleanUpTasks()", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/gradle/project/sync/cleanup/PreSyncProjectCleanUp.java"}, "focal_method": {"identifier": "getCleanUpTasks", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull", "return": "ProjectCleanUpTask[]", "body": "@VisibleForTesting\n  @NotNull\n  ProjectCleanUpTask[] getCleanUpTasks() {\n    return myCleanUpTasks;\n  }", "signature": "ProjectCleanUpTask[] getCleanUpTasks()", "full_signature": "@VisibleForTesting @NotNull ProjectCleanUpTask[] getCleanUpTasks()", "class_method_signature": "PreSyncProjectCleanUp.getCleanUpTasks()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}