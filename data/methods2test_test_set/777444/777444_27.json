{"test_class": {"identifier": "JaasAuthenticatorTest", "superclass": "extends BaseAuthenticatorTest", "interfaces": "", "fields": [{"original_string": "private JaasAuthenticator auth;", "modifier": "private", "type": "JaasAuthenticator", "declarator": "auth", "var_name": "auth"}], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/security/JaasAuthenticatorTest.java"}, "test_case": {"identifier": "testAuthenticateNoAuthorizationHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuthenticateNoAuthorizationHeader() throws Exception {\n        Headers respHeader = new Headers();\n        HttpExchange ex = createHttpExchange(respHeader);\n\n        Authenticator.Result res = auth.authenticate(ex);\n\n        assertEquals(((Authenticator.Retry) res).getResponseCode(),401);\n        assertTrue(respHeader.containsKey(\"WWW-Authenticate\"));\n        assertTrue(respHeader.getFirst(\"WWW-Authenticate\").contains(\"jolokia\"));\n    }", "signature": "void testAuthenticateNoAuthorizationHeader()", "full_signature": "@Test public void testAuthenticateNoAuthorizationHeader()", "class_method_signature": "JaasAuthenticatorTest.testAuthenticateNoAuthorizationHeader()", "testcase": true, "constructor": false, "invocations": ["createHttpExchange", "authenticate", "assertEquals", "getResponseCode", "assertTrue", "containsKey", "assertTrue", "contains", "getFirst"]}, "focal_class": {"identifier": "JaasAuthenticator", "superclass": "extends BasicAuthenticator", "interfaces": "", "fields": [{"original_string": "private ThreadLocal<Subject> subjectThreadLocal = new ThreadLocal<Subject>();", "modifier": "private", "type": "ThreadLocal<Subject>", "declarator": "subjectThreadLocal = new ThreadLocal<Subject>()", "var_name": "subjectThreadLocal"}], "methods": [{"identifier": "JaasAuthenticator", "parameters": "(String pRealm)", "modifiers": "public", "return": "", "signature": " JaasAuthenticator(String pRealm)", "full_signature": "public  JaasAuthenticator(String pRealm)", "class_method_signature": "JaasAuthenticator.JaasAuthenticator(String pRealm)", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "(HttpExchange pHttpExchange)", "modifiers": "@Override public", "return": "Result", "signature": "Result authenticate(HttpExchange pHttpExchange)", "full_signature": "@Override public Result authenticate(HttpExchange pHttpExchange)", "class_method_signature": "JaasAuthenticator.authenticate(HttpExchange pHttpExchange)", "testcase": false, "constructor": false}, {"identifier": "checkCredentials", "parameters": "(String pUser, String pPassword)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkCredentials(String pUser, String pPassword)", "full_signature": "@Override public boolean checkCredentials(String pUser, String pPassword)", "class_method_signature": "JaasAuthenticator.checkCredentials(String pUser, String pPassword)", "testcase": false, "constructor": false}, {"identifier": "createLoginContext", "parameters": "(String realm, CallbackHandler handler)", "modifiers": "protected", "return": "LoginContext", "signature": "LoginContext createLoginContext(String realm, CallbackHandler handler)", "full_signature": "protected LoginContext createLoginContext(String realm, CallbackHandler handler)", "class_method_signature": "JaasAuthenticator.createLoginContext(String realm, CallbackHandler handler)", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/security/JaasAuthenticator.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(HttpExchange pHttpExchange)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result authenticate(HttpExchange pHttpExchange) {\n        try {\n            Result result = super.authenticate(pHttpExchange);\n            if (result instanceof Success) {\n                Subject subject = subjectThreadLocal.get();\n                if (subject != null) {\n                    pHttpExchange.setAttribute(ConfigKey.JAAS_SUBJECT_REQUEST_ATTRIBUTE, subject);\n                }\n            }\n            return result;\n        } finally {\n            subjectThreadLocal.remove();\n        }\n    }", "signature": "Result authenticate(HttpExchange pHttpExchange)", "full_signature": "@Override public Result authenticate(HttpExchange pHttpExchange)", "class_method_signature": "JaasAuthenticator.authenticate(HttpExchange pHttpExchange)", "testcase": false, "constructor": false, "invocations": ["authenticate", "get", "setAttribute", "remove"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}