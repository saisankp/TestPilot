{"test_class": {"identifier": "PIDTest", "superclass": "", "interfaces": "", "fields": [], "file": "libprocess-client/src/test/java/com/github/kevints/libprocess/client/PIDTest.java"}, "test_case": {"identifier": "testFromString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFromString() throws Exception {\n    PID pid = PID.fromString(\"scheduler@192.168.1.1:8081\");\n    assertEquals(\"scheduler@192.168.1.1:8081\", pid.toString());\n    assertEquals(\"http://192.168.1.1:8081/scheduler\", pid.getBaseUrl().toString());\n  }", "signature": "void testFromString()", "full_signature": "@Test public void testFromString()", "class_method_signature": "PIDTest.testFromString()", "testcase": true, "constructor": false, "invocations": ["fromString", "assertEquals", "toString", "assertEquals", "toString", "getBaseUrl"]}, "focal_class": {"identifier": "PID", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 9120161278939596547L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 9120161278939596547L", "var_name": "serialVersionUID"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final HostAndPort hostAndPort;", "modifier": "private final", "type": "HostAndPort", "declarator": "hostAndPort", "var_name": "hostAndPort"}], "methods": [{"identifier": "PID", "parameters": "(String id, HostAndPort hostAndPort)", "modifiers": "public", "return": "", "signature": " PID(String id, HostAndPort hostAndPort)", "full_signature": "public  PID(String id, HostAndPort hostAndPort)", "class_method_signature": "PID.PID(String id, HostAndPort hostAndPort)", "testcase": false, "constructor": true}, {"identifier": "fromString", "parameters": "(String pid)", "modifiers": "public static", "return": "PID", "signature": "PID fromString(String pid)", "full_signature": "public static PID fromString(String pid)", "class_method_signature": "PID.fromString(String pid)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "PID.getId()", "testcase": false, "constructor": false}, {"identifier": "getHostAndPort", "parameters": "()", "modifiers": "public", "return": "HostAndPort", "signature": "HostAndPort getHostAndPort()", "full_signature": "public HostAndPort getHostAndPort()", "class_method_signature": "PID.getHostAndPort()", "testcase": false, "constructor": false}, {"identifier": "getBaseUrl", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getBaseUrl()", "full_signature": "public URL getBaseUrl()", "class_method_signature": "PID.getBaseUrl()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PID.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "PID.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PID.hashCode()", "testcase": false, "constructor": false}], "file": "libprocess-client/src/main/java/com/github/kevints/libprocess/client/PID.java"}, "focal_method": {"identifier": "fromString", "parameters": "(String pid)", "modifiers": "public static", "return": "PID", "body": "public static PID fromString(String pid) throws IllegalArgumentException {\n    List<String> components = Splitter.on(\"@\").omitEmptyStrings().splitToList(pid);\n    if (components.size() != 2) {\n      throw new IllegalArgumentException(\n          \"Illegal libprocess pid: \" + pid + \". Format is id@host:port.\");\n    }\n    String id = components.get(0);\n    if (CharMatcher.WHITESPACE.matchesAnyOf(id)) {\n      throw new IllegalArgumentException(\"No whitespace allowed in process id.\");\n    }\n    HostAndPort hostAndPort = HostAndPort.fromString(components.get(1))\n        .requireBracketsForIPv6();\n    if (!hostAndPort.hasPort()) {\n      throw new IllegalArgumentException(\"No port specified.\");\n    }\n    return new PID(id, hostAndPort);\n  }", "signature": "PID fromString(String pid)", "full_signature": "public static PID fromString(String pid)", "class_method_signature": "PID.fromString(String pid)", "testcase": false, "constructor": false, "invocations": ["splitToList", "omitEmptyStrings", "on", "size", "get", "matchesAnyOf", "requireBracketsForIPv6", "fromString", "get", "hasPort"]}, "repository": {"repo_id": 18749200, "url": "https://github.com/kevints/mesos-framework-api", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 14, "size": 430, "license": "licensed"}}