{"test_class": {"identifier": "ProcessInstanceEventBatchTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/kogito-services/src/test/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBatchTest.java"}, "test_case": {"identifier": "testNoServiceDefined", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoServiceDefined() {\n        ProcessInstanceEventBatch batch = new ProcessInstanceEventBatch(\"\", null);\n\n        assertThat(batch.extractRuntimeSource(singletonMap(PROCESS_ID_META_DATA, \"travels\"))).isEqualTo(\"/travels\");\n        assertThat(batch.extractRuntimeSource(singletonMap(PROCESS_ID_META_DATA, \"demo.orders\"))).isEqualTo(\"/orders\");\n    }", "signature": "void testNoServiceDefined()", "full_signature": "@Test public void testNoServiceDefined()", "class_method_signature": "ProcessInstanceEventBatchTest.testNoServiceDefined()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "extractRuntimeSource", "singletonMap", "isEqualTo", "assertThat", "extractRuntimeSource", "singletonMap"]}, "focal_class": {"identifier": "ProcessInstanceEventBatch", "superclass": "", "interfaces": "implements EventBatch", "fields": [{"original_string": "public static final String TRACKED = \"tracked\";", "modifier": "public static final", "type": "String", "declarator": "TRACKED = \"tracked\"", "var_name": "TRACKED"}, {"original_string": "private final String service;", "modifier": "private final", "type": "String", "declarator": "service", "var_name": "service"}, {"original_string": "private Addons addons;", "modifier": "private", "type": "Addons", "declarator": "addons", "var_name": "addons"}, {"original_string": "private List<ProcessEvent> rawEvents = new ArrayList<>();", "modifier": "private", "type": "List<ProcessEvent>", "declarator": "rawEvents = new ArrayList<>()", "var_name": "rawEvents"}], "methods": [{"identifier": "ProcessInstanceEventBatch", "parameters": "(String service, Addons addons)", "modifiers": "public", "return": "", "signature": " ProcessInstanceEventBatch(String service, Addons addons)", "full_signature": "public  ProcessInstanceEventBatch(String service, Addons addons)", "class_method_signature": "ProcessInstanceEventBatch.ProcessInstanceEventBatch(String service, Addons addons)", "testcase": false, "constructor": true}, {"identifier": "append", "parameters": "(Object rawEvent)", "modifiers": "@Override public", "return": "void", "signature": "void append(Object rawEvent)", "full_signature": "@Override public void append(Object rawEvent)", "class_method_signature": "ProcessInstanceEventBatch.append(Object rawEvent)", "testcase": false, "constructor": false}, {"identifier": "events", "parameters": "()", "modifiers": "@Override public", "return": "Collection<DataEvent<?>>", "signature": "Collection<DataEvent<?>> events()", "full_signature": "@Override public Collection<DataEvent<?>> events()", "class_method_signature": "ProcessInstanceEventBatch.events()", "testcase": false, "constructor": false}, {"identifier": "handleProcessCompletedEvent", "parameters": "(ProcessCompletedEvent event, ProcessInstanceEventBody body)", "modifiers": "protected", "return": "void", "signature": "void handleProcessCompletedEvent(ProcessCompletedEvent event, ProcessInstanceEventBody body)", "full_signature": "protected void handleProcessCompletedEvent(ProcessCompletedEvent event, ProcessInstanceEventBody body)", "class_method_signature": "ProcessInstanceEventBatch.handleProcessCompletedEvent(ProcessCompletedEvent event, ProcessInstanceEventBody body)", "testcase": false, "constructor": false}, {"identifier": "handleProcessNodeTriggeredEvent", "parameters": "(ProcessNodeTriggeredEvent event, ProcessInstanceEventBody body)", "modifiers": "protected", "return": "void", "signature": "void handleProcessNodeTriggeredEvent(ProcessNodeTriggeredEvent event, ProcessInstanceEventBody body)", "full_signature": "protected void handleProcessNodeTriggeredEvent(ProcessNodeTriggeredEvent event, ProcessInstanceEventBody body)", "class_method_signature": "ProcessInstanceEventBatch.handleProcessNodeTriggeredEvent(ProcessNodeTriggeredEvent event, ProcessInstanceEventBody body)", "testcase": false, "constructor": false}, {"identifier": "handleProcessNodeLeftEvent", "parameters": "(ProcessNodeLeftEvent event, ProcessInstanceEventBody body)", "modifiers": "protected", "return": "void", "signature": "void handleProcessNodeLeftEvent(ProcessNodeLeftEvent event, ProcessInstanceEventBody body)", "full_signature": "protected void handleProcessNodeLeftEvent(ProcessNodeLeftEvent event, ProcessInstanceEventBody body)", "class_method_signature": "ProcessInstanceEventBatch.handleProcessNodeLeftEvent(ProcessNodeLeftEvent event, ProcessInstanceEventBody body)", "testcase": false, "constructor": false}, {"identifier": "handleProcessWorkItemTransitionEvent", "parameters": "(ProcessWorkItemTransitionEvent workItemTransitionEvent, Map<String, UserTaskInstanceEventBody> userTaskInstances)", "modifiers": "protected", "return": "void", "signature": "void handleProcessWorkItemTransitionEvent(ProcessWorkItemTransitionEvent workItemTransitionEvent, Map<String, UserTaskInstanceEventBody> userTaskInstances)", "full_signature": "protected void handleProcessWorkItemTransitionEvent(ProcessWorkItemTransitionEvent workItemTransitionEvent, Map<String, UserTaskInstanceEventBody> userTaskInstances)", "class_method_signature": "ProcessInstanceEventBatch.handleProcessWorkItemTransitionEvent(ProcessWorkItemTransitionEvent workItemTransitionEvent, Map<String, UserTaskInstanceEventBody> userTaskInstances)", "testcase": false, "constructor": false}, {"identifier": "handleProcessVariableChangedEvent", "parameters": "(ProcessVariableChangedEvent variableChangedEvent, Set<VariableInstanceEventBody> variables)", "modifiers": "protected", "return": "void", "signature": "void handleProcessVariableChangedEvent(ProcessVariableChangedEvent variableChangedEvent, Set<VariableInstanceEventBody> variables)", "full_signature": "protected void handleProcessVariableChangedEvent(ProcessVariableChangedEvent variableChangedEvent, Set<VariableInstanceEventBody> variables)", "class_method_signature": "ProcessInstanceEventBatch.handleProcessVariableChangedEvent(ProcessVariableChangedEvent variableChangedEvent, Set<VariableInstanceEventBody> variables)", "testcase": false, "constructor": false}, {"identifier": "createUserTask", "parameters": "(ProcessWorkItemTransitionEvent workItemTransitionEvent)", "modifiers": "protected", "return": "UserTaskInstanceEventBody", "signature": "UserTaskInstanceEventBody createUserTask(ProcessWorkItemTransitionEvent workItemTransitionEvent)", "full_signature": "protected UserTaskInstanceEventBody createUserTask(ProcessWorkItemTransitionEvent workItemTransitionEvent)", "class_method_signature": "ProcessInstanceEventBatch.createUserTask(ProcessWorkItemTransitionEvent workItemTransitionEvent)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ProcessEvent event)", "modifiers": "protected", "return": "ProcessInstanceEventBody", "signature": "ProcessInstanceEventBody create(ProcessEvent event)", "full_signature": "protected ProcessInstanceEventBody create(ProcessEvent event)", "class_method_signature": "ProcessInstanceEventBatch.create(ProcessEvent event)", "testcase": false, "constructor": false}, {"identifier": "createMilestones", "parameters": "(WorkflowProcessInstance pi)", "modifiers": "protected", "return": "Set<MilestoneEventBody>", "signature": "Set<MilestoneEventBody> createMilestones(WorkflowProcessInstance pi)", "full_signature": "protected Set<MilestoneEventBody> createMilestones(WorkflowProcessInstance pi)", "class_method_signature": "ProcessInstanceEventBatch.createMilestones(WorkflowProcessInstance pi)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ProcessNodeEvent event)", "modifiers": "protected", "return": "NodeInstanceEventBody", "signature": "NodeInstanceEventBody create(ProcessNodeEvent event)", "full_signature": "protected NodeInstanceEventBody create(ProcessNodeEvent event)", "class_method_signature": "ProcessInstanceEventBatch.create(ProcessNodeEvent event)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ProcessVariableChangedEvent event)", "modifiers": "protected", "return": "VariableInstanceEventBody", "signature": "VariableInstanceEventBody create(ProcessVariableChangedEvent event)", "full_signature": "protected VariableInstanceEventBody create(ProcessVariableChangedEvent event)", "class_method_signature": "ProcessInstanceEventBatch.create(ProcessVariableChangedEvent event)", "testcase": false, "constructor": false}, {"identifier": "extractRuntimeSource", "parameters": "(Map<String, String> metadata)", "modifiers": "protected", "return": "String", "signature": "String extractRuntimeSource(Map<String, String> metadata)", "full_signature": "protected String extractRuntimeSource(Map<String, String> metadata)", "class_method_signature": "ProcessInstanceEventBatch.extractRuntimeSource(Map<String, String> metadata)", "testcase": false, "constructor": false}], "file": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBatch.java"}, "focal_method": {"identifier": "extractRuntimeSource", "parameters": "(Map<String, String> metadata)", "modifiers": "protected", "return": "String", "body": "protected String extractRuntimeSource(Map<String, String> metadata) {\n        String processId = metadata.get(ProcessInstanceEventBody.PROCESS_ID_META_DATA);\n        if(processId == null){\n            return null;\n        } else {\n            return service + \"/\" + (processId.contains(\".\") ? processId.substring(processId.lastIndexOf('.') + 1) : processId);\n        }\n    }", "signature": "String extractRuntimeSource(Map<String, String> metadata)", "full_signature": "protected String extractRuntimeSource(Map<String, String> metadata)", "class_method_signature": "ProcessInstanceEventBatch.extractRuntimeSource(Map<String, String> metadata)", "testcase": false, "constructor": false, "invocations": ["get", "contains", "substring", "lastIndexOf"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}