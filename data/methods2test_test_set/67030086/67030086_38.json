{"test_class": {"identifier": "ResolveClassAnnotationTest", "superclass": "", "interfaces": "", "fields": [], "file": "pact/consumer/core/src/test/java/org/arquillian/algeron/pact/consumer/core/util/ResolveClassAnnotationTest.java"}, "test_case": {"identifier": "should_get_annotation_from_class_level", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_get_annotation_from_class_level() {\n        assertThat(ResolveClassAnnotation.getClassWithAnnotation(A.class, Pact.class)).isPresent();\n    }", "signature": "void should_get_annotation_from_class_level()", "full_signature": "@Test public void should_get_annotation_from_class_level()", "class_method_signature": "ResolveClassAnnotationTest.should_get_annotation_from_class_level()", "testcase": true, "constructor": false, "invocations": ["isPresent", "assertThat", "getClassWithAnnotation"]}, "focal_class": {"identifier": "ResolveClassAnnotation", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getClassWithAnnotation", "parameters": "(final Class<?> source,\n        final Class<? extends Annotation> annotationClass)", "modifiers": "public static", "return": "Optional<Class<?>>", "signature": "Optional<Class<?>> getClassWithAnnotation(final Class<?> source,\n        final Class<? extends Annotation> annotationClass)", "full_signature": "public static Optional<Class<?>> getClassWithAnnotation(final Class<?> source,\n        final Class<? extends Annotation> annotationClass)", "class_method_signature": "ResolveClassAnnotation.getClassWithAnnotation(final Class<?> source,\n        final Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}], "file": "pact/consumer/core/src/main/java/org/arquillian/algeron/pact/consumer/core/util/ResolveClassAnnotation.java"}, "focal_method": {"identifier": "getClassWithAnnotation", "parameters": "(final Class<?> source,\n        final Class<? extends Annotation> annotationClass)", "modifiers": "public static", "return": "Optional<Class<?>>", "body": "public static Optional<Class<?>> getClassWithAnnotation(final Class<?> source,\n        final Class<? extends Annotation> annotationClass) {\n\n        Class<?> nextSource = source;\n        while (nextSource != Object.class) {\n            if (nextSource.isAnnotationPresent(annotationClass)) {\n                return Optional.of(nextSource);\n            } else {\n                nextSource = nextSource.getSuperclass();\n            }\n        }\n\n        return Optional.empty();\n    }", "signature": "Optional<Class<?>> getClassWithAnnotation(final Class<?> source,\n        final Class<? extends Annotation> annotationClass)", "full_signature": "public static Optional<Class<?>> getClassWithAnnotation(final Class<?> source,\n        final Class<? extends Annotation> annotationClass)", "class_method_signature": "ResolveClassAnnotation.getClassWithAnnotation(final Class<?> source,\n        final Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false, "invocations": ["isAnnotationPresent", "of", "getSuperclass", "empty"]}, "repository": {"repo_id": 67030086, "url": "https://github.com/arquillian/arquillian-algeron", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 661, "license": "licensed"}}