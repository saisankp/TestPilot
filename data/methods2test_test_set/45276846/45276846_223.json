{"test_class": {"identifier": "TestSynchronizationTaskService", "superclass": "extends BasicTestCase", "interfaces": "", "fields": [{"original_string": "public static final String STAT_NAME_PATCH_REQUEST_COUNT = \"PATCHrequestCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_PATCH_REQUEST_COUNT = \"PATCHrequestCount\"", "var_name": "STAT_NAME_PATCH_REQUEST_COUNT"}, {"original_string": "public int updateCount = 10;", "modifier": "public", "type": "int", "declarator": "updateCount = 10", "var_name": "updateCount"}, {"original_string": "public int serviceCount = 10;", "modifier": "public", "type": "int", "declarator": "serviceCount = 10", "var_name": "serviceCount"}, {"original_string": "public int nodeCount = 3;", "modifier": "public", "type": "int", "declarator": "nodeCount = 3", "var_name": "nodeCount"}, {"original_string": "private BiPredicate<ExampleServiceState, ExampleServiceState> exampleStateConvergenceChecker = (\n            initial, current) -> {\n        if (current.name == null) {\n            return false;\n        }\n\n        return current.name.equals(initial.name);\n    };", "modifier": "private", "type": "BiPredicate<ExampleServiceState, ExampleServiceState>", "declarator": "exampleStateConvergenceChecker = (\n            initial, current) -> {\n        if (current.name == null) {\n            return false;\n        }\n\n        return current.name.equals(initial.name);\n    }", "var_name": "exampleStateConvergenceChecker"}], "file": "xenon-common/src/test/java/com/vmware/xenon/common/TestSynchronizationTaskService.java"}, "test_case": {"identifier": "synchAfterClusterRestart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void  synchAfterClusterRestart() throws Throwable {\n        setUpMultiNode();\n        String factoryLink = ExampleService.FACTORY_LINK;\n        this.host.setNodeGroupQuorum(this.nodeCount);\n        this.host.waitForNodeGroupConvergence();\n\n        List<ExampleServiceState> exampleStates = this.host.createExampleServices(\n                this.host.getPeerHost(), this.serviceCount, null, factoryLink);\n\n        Map<String, ExampleServiceState> exampleStatesMap =\n                exampleStates.stream().collect(Collectors.toMap(s -> s.documentSelfLink, s -> s));\n\n        this.host.waitForReplicatedFactoryChildServiceConvergence(\n                this.host.getNodeGroupToFactoryMap(factoryLink),\n                exampleStatesMap,\n                this.exampleStateConvergenceChecker,\n                exampleStatesMap.size(),\n                0, this.nodeCount);\n\n        List<VerificationHost> hosts = new ArrayList<>();\n\n        // Stop all nodes and preserve their state.\n        for (Map.Entry<URI, VerificationHost> entry : this.host.getInProcessHostMap().entrySet()) {\n            VerificationHost host = entry.getValue();\n            this.host.stopHostAndPreserveState(host);\n            hosts.add(host);\n        }\n\n        // Create new nodes with same sandbox and port, but different Id.\n        for (VerificationHost host : hosts) {\n            ServiceHost.Arguments args = new ServiceHost.Arguments();\n            args.sandbox = Paths.get(host.getStorageSandbox()).getParent();\n            args.port = 0;\n            VerificationHost newHost = VerificationHost.create(args);\n            newHost.setPort(host.getPort());\n            newHost.start();\n            this.host.addPeerNode(newHost);\n        }\n\n        this.host.joinNodesAndVerifyConvergence(this.nodeCount);\n        this.host.waitForNodeGroupConvergence(this.nodeCount, this.nodeCount);\n\n\n        // Verify that all states are replicated and synched.\n        this.host.waitForReplicatedFactoryChildServiceConvergence(\n                this.host.getNodeGroupToFactoryMap(factoryLink),\n                exampleStatesMap,\n                this.exampleStateConvergenceChecker,\n                exampleStatesMap.size(),\n                0, this.nodeCount);\n\n        // Remove one old node.\n        VerificationHost nodeToStop = this.host.getPeerHost();\n        this.host.stopHost(nodeToStop);\n\n        // Add new node and verify that state is replicated.\n        this.host.setUpLocalPeerHost(nodeToStop.getPort(),\n                VerificationHost.FAST_MAINT_INTERVAL_MILLIS, null, null);\n        this.host.joinNodesAndVerifyConvergence(this.nodeCount);\n        this.host.waitForNodeGroupConvergence(this.nodeCount, this.nodeCount);\n\n        // Verify that all states are replicated and synched.\n        this.host.waitForReplicatedFactoryChildServiceConvergence(\n                this.host.getNodeGroupToFactoryMap(factoryLink),\n                exampleStatesMap,\n                this.exampleStateConvergenceChecker,\n                exampleStatesMap.size(),\n                0, this.nodeCount);\n    }", "signature": "void synchAfterClusterRestart()", "full_signature": "@Test public void synchAfterClusterRestart()", "class_method_signature": "TestSynchronizationTaskService.synchAfterClusterRestart()", "testcase": true, "constructor": false, "invocations": ["setUpMultiNode", "setNodeGroupQuorum", "waitForNodeGroupConvergence", "createExampleServices", "getPeerHost", "collect", "stream", "toMap", "waitForReplicatedFactoryChildServiceConvergence", "getNodeGroupToFactoryMap", "size", "entrySet", "getInProcessHostMap", "getValue", "stopHostAndPreserveState", "add", "getParent", "get", "getStorageSandbox", "create", "setPort", "getPort", "start", "addPeerNode", "joinNodesAndVerifyConvergence", "waitForNodeGroupConvergence", "waitForReplicatedFactoryChildServiceConvergence", "getNodeGroupToFactoryMap", "size", "getPeerHost", "stopHost", "setUpLocalPeerHost", "getPort", "joinNodesAndVerifyConvergence", "waitForNodeGroupConvergence", "waitForReplicatedFactoryChildServiceConvergence", "getNodeGroupToFactoryMap", "size"]}, "focal_class": {"identifier": "SynchronizationTaskService", "superclass": "extends TaskService<SynchronizationTaskService.State>", "interfaces": "", "fields": [{"original_string": "public static final String FACTORY_LINK = ServiceUriPaths.SYNCHRONIZATION_TASKS;", "modifier": "public static final", "type": "String", "declarator": "FACTORY_LINK = ServiceUriPaths.SYNCHRONIZATION_TASKS", "var_name": "FACTORY_LINK"}, {"original_string": "public static final String STAT_NAME_CHILD_SYNCH_RETRY_COUNT = \"childSynchRetryCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_CHILD_SYNCH_RETRY_COUNT = \"childSynchRetryCount\"", "var_name": "STAT_NAME_CHILD_SYNCH_RETRY_COUNT"}, {"original_string": "public static final String STAT_NAME_SYNCH_RETRY_COUNT = \"synchRetryCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_SYNCH_RETRY_COUNT = \"synchRetryCount\"", "var_name": "STAT_NAME_SYNCH_RETRY_COUNT"}, {"original_string": "public static final int MAX_CHILD_SYNCH_RETRY_COUNT = XenonConfiguration.integer(\n            SynchronizationTaskService.class,\n            \"MAX_CHILD_SYNCH_RETRY_COUNT\",\n            8\n    );", "modifier": "public static final", "type": "int", "declarator": "MAX_CHILD_SYNCH_RETRY_COUNT = XenonConfiguration.integer(\n            SynchronizationTaskService.class,\n            \"MAX_CHILD_SYNCH_RETRY_COUNT\",\n            8\n    )", "var_name": "MAX_CHILD_SYNCH_RETRY_COUNT"}, {"original_string": "private Supplier<Service> childServiceInstantiator;", "modifier": "private", "type": "Supplier<Service>", "declarator": "childServiceInstantiator", "var_name": "childServiceInstantiator"}, {"original_string": "private FactoryService parent;", "modifier": "private", "type": "FactoryService", "declarator": "parent", "var_name": "parent"}, {"original_string": "private final boolean isDetailedLoggingEnabled = XenonConfiguration.bool(\n            SynchronizationTaskService.class,\n            \"isDetailedLoggingEnabled\",\n            false\n    );", "modifier": "private final", "type": "boolean", "declarator": "isDetailedLoggingEnabled = XenonConfiguration.bool(\n            SynchronizationTaskService.class,\n            \"isDetailedLoggingEnabled\",\n            false\n    )", "var_name": "isDetailedLoggingEnabled"}, {"original_string": "private final boolean isCheckpointEnabled = XenonConfiguration.bool(\n            SynchronizationTaskService.class,\n            \"isCheckpointEnabled\",\n            false\n    );", "modifier": "private final", "type": "boolean", "declarator": "isCheckpointEnabled = XenonConfiguration.bool(\n            SynchronizationTaskService.class,\n            \"isCheckpointEnabled\",\n            false\n    )", "var_name": "isCheckpointEnabled"}, {"original_string": "private final long schedulePeriodSeconds = XenonConfiguration.number(\n            SynchronizationTaskService.class,\n            \"schedulePeriodSeconds\",\n            TimeUnit.MINUTES.toSeconds(30)\n    );", "modifier": "private final", "type": "long", "declarator": "schedulePeriodSeconds = XenonConfiguration.number(\n            SynchronizationTaskService.class,\n            \"schedulePeriodSeconds\",\n            TimeUnit.MINUTES.toSeconds(30)\n    )", "var_name": "schedulePeriodSeconds"}], "methods": [{"identifier": "create", "parameters": "(Supplier<Service> childServiceInstantiator)", "modifiers": "public static", "return": "SynchronizationTaskService", "signature": "SynchronizationTaskService create(Supplier<Service> childServiceInstantiator)", "full_signature": "public static SynchronizationTaskService create(Supplier<Service> childServiceInstantiator)", "class_method_signature": "SynchronizationTaskService.create(Supplier<Service> childServiceInstantiator)", "testcase": false, "constructor": false}, {"identifier": "SynchronizationTaskService", "parameters": "()", "modifiers": "public", "return": "", "signature": " SynchronizationTaskService()", "full_signature": "public  SynchronizationTaskService()", "class_method_signature": "SynchronizationTaskService.SynchronizationTaskService()", "testcase": false, "constructor": true}, {"identifier": "handleStart", "parameters": "(Operation post)", "modifiers": "@Override public", "return": "void", "signature": "void handleStart(Operation post)", "full_signature": "@Override public void handleStart(Operation post)", "class_method_signature": "SynchronizationTaskService.handleStart(Operation post)", "testcase": false, "constructor": false}, {"identifier": "initializeState", "parameters": "(State initialState, Operation post)", "modifiers": "@Override protected", "return": "void", "signature": "void initializeState(State initialState, Operation post)", "full_signature": "@Override protected void initializeState(State initialState, Operation post)", "class_method_signature": "SynchronizationTaskService.initializeState(State initialState, Operation post)", "testcase": false, "constructor": false}, {"identifier": "validateStartPost", "parameters": "(Operation post)", "modifiers": "@Override protected", "return": "State", "signature": "State validateStartPost(Operation post)", "full_signature": "@Override protected State validateStartPost(Operation post)", "class_method_signature": "SynchronizationTaskService.validateStartPost(Operation post)", "testcase": false, "constructor": false}, {"identifier": "handlePut", "parameters": "(Operation put)", "modifiers": "@Override public", "return": "void", "signature": "void handlePut(Operation put)", "full_signature": "@Override public void handlePut(Operation put)", "class_method_signature": "SynchronizationTaskService.handlePut(Operation put)", "testcase": false, "constructor": false}, {"identifier": "validatePutRequest", "parameters": "(State currentTask, Operation put)", "modifiers": "public", "return": "State", "signature": "State validatePutRequest(State currentTask, Operation put)", "full_signature": "public State validatePutRequest(State currentTask, Operation put)", "class_method_signature": "SynchronizationTaskService.validatePutRequest(State currentTask, Operation put)", "testcase": false, "constructor": false}, {"identifier": "validateTransition", "parameters": "(\n            Operation patch, SynchronizationTaskService.State currentTask, SynchronizationTaskService.State patchBody)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean validateTransition(\n            Operation patch, SynchronizationTaskService.State currentTask, SynchronizationTaskService.State patchBody)", "full_signature": "@Override protected boolean validateTransition(\n            Operation patch, SynchronizationTaskService.State currentTask, SynchronizationTaskService.State patchBody)", "class_method_signature": "SynchronizationTaskService.validateTransition(\n            Operation patch, SynchronizationTaskService.State currentTask, SynchronizationTaskService.State patchBody)", "testcase": false, "constructor": false}, {"identifier": "handlePatch", "parameters": "(Operation patch)", "modifiers": "@Override public", "return": "void", "signature": "void handlePatch(Operation patch)", "full_signature": "@Override public void handlePatch(Operation patch)", "class_method_signature": "SynchronizationTaskService.handlePatch(Operation patch)", "testcase": false, "constructor": false}, {"identifier": "handleSubStage", "parameters": "(State task)", "modifiers": "public", "return": "void", "signature": "void handleSubStage(State task)", "full_signature": "public void handleSubStage(State task)", "class_method_signature": "SynchronizationTaskService.handleSubStage(State task)", "testcase": false, "constructor": false}, {"identifier": "handleCheckpointStage", "parameters": "(State task)", "modifiers": "private", "return": "void", "signature": "void handleCheckpointStage(State task)", "full_signature": "private void handleCheckpointStage(State task)", "class_method_signature": "SynchronizationTaskService.handleCheckpointStage(State task)", "testcase": false, "constructor": false}, {"identifier": "findMinimumCheckpoint", "parameters": "(List<Long> checkpoints)", "modifiers": "private", "return": "long", "signature": "long findMinimumCheckpoint(List<Long> checkpoints)", "full_signature": "private long findMinimumCheckpoint(List<Long> checkpoints)", "class_method_signature": "SynchronizationTaskService.findMinimumCheckpoint(List<Long> checkpoints)", "testcase": false, "constructor": false}, {"identifier": "handleQueryStage", "parameters": "(State task)", "modifiers": "private", "return": "void", "signature": "void handleQueryStage(State task)", "full_signature": "private void handleQueryStage(State task)", "class_method_signature": "SynchronizationTaskService.handleQueryStage(State task)", "testcase": false, "constructor": false}, {"identifier": "buildChildQueryTask", "parameters": "(State task)", "modifiers": "private", "return": "QueryTask", "signature": "QueryTask buildChildQueryTask(State task)", "full_signature": "private QueryTask buildChildQueryTask(State task)", "class_method_signature": "SynchronizationTaskService.buildChildQueryTask(State task)", "testcase": false, "constructor": false}, {"identifier": "handleSynchronizeStage", "parameters": "(State task, boolean verifyOwnership)", "modifiers": "private", "return": "void", "signature": "void handleSynchronizeStage(State task, boolean verifyOwnership)", "full_signature": "private void handleSynchronizeStage(State task, boolean verifyOwnership)", "class_method_signature": "SynchronizationTaskService.handleSynchronizeStage(State task, boolean verifyOwnership)", "testcase": false, "constructor": false}, {"identifier": "synchronizeChildrenInQueryPage", "parameters": "(State task, ServiceDocumentQueryResult rsp, List<String> documentLinks, int retryCount, int totalServiceCount)", "modifiers": "private", "return": "void", "signature": "void synchronizeChildrenInQueryPage(State task, ServiceDocumentQueryResult rsp, List<String> documentLinks, int retryCount, int totalServiceCount)", "full_signature": "private void synchronizeChildrenInQueryPage(State task, ServiceDocumentQueryResult rsp, List<String> documentLinks, int retryCount, int totalServiceCount)", "class_method_signature": "SynchronizationTaskService.synchronizeChildrenInQueryPage(State task, ServiceDocumentQueryResult rsp, List<String> documentLinks, int retryCount, int totalServiceCount)", "testcase": false, "constructor": false}, {"identifier": "scheduleRetry", "parameters": "(Runnable task, String statNameRetryCount)", "modifiers": "private", "return": "void", "signature": "void scheduleRetry(Runnable task, String statNameRetryCount)", "full_signature": "private void scheduleRetry(Runnable task, String statNameRetryCount)", "class_method_signature": "SynchronizationTaskService.scheduleRetry(Runnable task, String statNameRetryCount)", "testcase": false, "constructor": false}, {"identifier": "getExponentialDelay", "parameters": "(String statNameRetryCount)", "modifiers": "private", "return": "long", "signature": "long getExponentialDelay(String statNameRetryCount)", "full_signature": "private long getExponentialDelay(String statNameRetryCount)", "class_method_signature": "SynchronizationTaskService.getExponentialDelay(String statNameRetryCount)", "testcase": false, "constructor": false}, {"identifier": "verifySynchronizationOwnership", "parameters": "(State task)", "modifiers": "private", "return": "boolean", "signature": "boolean verifySynchronizationOwnership(State task)", "full_signature": "private boolean verifySynchronizationOwnership(State task)", "class_method_signature": "SynchronizationTaskService.verifySynchronizationOwnership(State task)", "testcase": false, "constructor": false}, {"identifier": "synchronizeService", "parameters": "(State task, String link, Operation.CompletionHandler c)", "modifiers": "private", "return": "void", "signature": "void synchronizeService(State task, String link, Operation.CompletionHandler c)", "full_signature": "private void synchronizeService(State task, String link, Operation.CompletionHandler c)", "class_method_signature": "SynchronizationTaskService.synchronizeService(State task, String link, Operation.CompletionHandler c)", "testcase": false, "constructor": false}, {"identifier": "handleCheckNodeGroupAvailabilityStage", "parameters": "(State task)", "modifiers": "private", "return": "void", "signature": "void handleCheckNodeGroupAvailabilityStage(State task)", "full_signature": "private void handleCheckNodeGroupAvailabilityStage(State task)", "class_method_signature": "SynchronizationTaskService.handleCheckNodeGroupAvailabilityStage(State task)", "testcase": false, "constructor": false}, {"identifier": "setFactoryAvailability", "parameters": "(\n            State task, boolean isAvailable, Consumer<Operation> action, Operation parentOp)", "modifiers": "private", "return": "void", "signature": "void setFactoryAvailability(\n            State task, boolean isAvailable, Consumer<Operation> action, Operation parentOp)", "full_signature": "private void setFactoryAvailability(\n            State task, boolean isAvailable, Consumer<Operation> action, Operation parentOp)", "class_method_signature": "SynchronizationTaskService.setFactoryAvailability(\n            State task, boolean isAvailable, Consumer<Operation> action, Operation parentOp)", "testcase": false, "constructor": false}, {"identifier": "setParentService", "parameters": "(FactoryService factoryService)", "modifiers": "public", "return": "void", "signature": "void setParentService(FactoryService factoryService)", "full_signature": "public void setParentService(FactoryService factoryService)", "class_method_signature": "SynchronizationTaskService.setParentService(FactoryService factoryService)", "testcase": false, "constructor": false}, {"identifier": "sendSelfPatch", "parameters": "(State taskState, TaskState.TaskStage stage, Consumer<State> updateTaskState)", "modifiers": "@Override protected", "return": "void", "signature": "void sendSelfPatch(State taskState, TaskState.TaskStage stage, Consumer<State> updateTaskState)", "full_signature": "@Override protected void sendSelfPatch(State taskState, TaskState.TaskStage stage, Consumer<State> updateTaskState)", "class_method_signature": "SynchronizationTaskService.sendSelfPatch(State taskState, TaskState.TaskStage stage, Consumer<State> updateTaskState)", "testcase": false, "constructor": false}, {"identifier": "subStageSetter", "parameters": "(SubStage subStage)", "modifiers": "private", "return": "Consumer<State>", "signature": "Consumer<State> subStageSetter(SubStage subStage)", "full_signature": "private Consumer<State> subStageSetter(SubStage subStage)", "class_method_signature": "SynchronizationTaskService.subStageSetter(SubStage subStage)", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/common/SynchronizationTaskService.java"}, "focal_method": {"identifier": "create", "parameters": "(Supplier<Service> childServiceInstantiator)", "modifiers": "public static", "return": "SynchronizationTaskService", "body": "public static SynchronizationTaskService create(Supplier<Service> childServiceInstantiator) {\n        if (childServiceInstantiator.get() == null) {\n            throw new IllegalArgumentException(\"childServiceInstantiator created null child service\");\n        }\n        SynchronizationTaskService taskService = new SynchronizationTaskService();\n        taskService.childServiceInstantiator = childServiceInstantiator;\n        return taskService;\n    }", "signature": "SynchronizationTaskService create(Supplier<Service> childServiceInstantiator)", "full_signature": "public static SynchronizationTaskService create(Supplier<Service> childServiceInstantiator)", "class_method_signature": "SynchronizationTaskService.create(Supplier<Service> childServiceInstantiator)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}