{"test_class": {"identifier": "SimpleOntologyManagerTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "@Mock\n    private CatalogConfigProvider configProvider;", "modifier": "@Mock\n    private", "type": "CatalogConfigProvider", "declarator": "configProvider", "var_name": "configProvider"}, {"original_string": "@Mock\n    private CatalogManager catalogManager;", "modifier": "@Mock\n    private", "type": "CatalogManager", "declarator": "catalogManager", "var_name": "catalogManager"}, {"original_string": "@Mock\n    private CatalogUtilsService catalogUtilsService;", "modifier": "@Mock\n    private", "type": "CatalogUtilsService", "declarator": "catalogUtilsService", "var_name": "catalogUtilsService"}, {"original_string": "@Mock\n    private SesameTransformer sesameTransformer;", "modifier": "@Mock\n    private", "type": "SesameTransformer", "declarator": "sesameTransformer", "var_name": "sesameTransformer"}, {"original_string": "@Mock\n    private OntologyId ontologyId;", "modifier": "@Mock\n    private", "type": "OntologyId", "declarator": "ontologyId", "var_name": "ontologyId"}, {"original_string": "@Mock\n    private Ontology ontology;", "modifier": "@Mock\n    private", "type": "Ontology", "declarator": "ontology", "var_name": "ontology"}, {"original_string": "@Mock\n    private Ontology vocabulary;", "modifier": "@Mock\n    private", "type": "Ontology", "declarator": "vocabulary", "var_name": "vocabulary"}, {"original_string": "@Mock\n    private OntologyCache ontologyCache;", "modifier": "@Mock\n    private", "type": "OntologyCache", "declarator": "ontologyCache", "var_name": "ontologyCache"}, {"original_string": "@Mock\n    private Cache<String, Ontology> mockCache;", "modifier": "@Mock\n    private", "type": "Cache<String, Ontology>", "declarator": "mockCache", "var_name": "mockCache"}, {"original_string": "@Mock\n    private RepositoryManager mockRepoManager;", "modifier": "@Mock\n    private", "type": "RepositoryManager", "declarator": "mockRepoManager", "var_name": "mockRepoManager"}, {"original_string": "@Mock\n    private BNodeService bNodeService;", "modifier": "@Mock\n    private", "type": "BNodeService", "declarator": "bNodeService", "var_name": "bNodeService"}, {"original_string": "@Mock\n    private ImportsResolver importsResolver;", "modifier": "@Mock\n    private", "type": "ImportsResolver", "declarator": "importsResolver", "var_name": "importsResolver"}, {"original_string": "@Mock\n    private DatasetManager datasetManager;", "modifier": "@Mock\n    private", "type": "DatasetManager", "declarator": "datasetManager", "var_name": "datasetManager"}, {"original_string": "@Mock\n    private RepositoryConfig cacheRepoConfig;", "modifier": "@Mock\n    private", "type": "RepositoryConfig", "declarator": "cacheRepoConfig", "var_name": "cacheRepoConfig"}, {"original_string": "private SimpleOntologyManager manager;", "modifier": "private", "type": "SimpleOntologyManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private OrmFactory<OntologyRecord> ontologyRecordFactory = getRequiredOrmFactory(OntologyRecord.class);", "modifier": "private", "type": "OrmFactory<OntologyRecord>", "declarator": "ontologyRecordFactory = getRequiredOrmFactory(OntologyRecord.class)", "var_name": "ontologyRecordFactory"}, {"original_string": "private OrmFactory<Commit> commitFactory = getRequiredOrmFactory(Commit.class);", "modifier": "private", "type": "OrmFactory<Commit>", "declarator": "commitFactory = getRequiredOrmFactory(Commit.class)", "var_name": "commitFactory"}, {"original_string": "private OrmFactory<Branch> branchFactory = getRequiredOrmFactory(Branch.class);", "modifier": "private", "type": "OrmFactory<Branch>", "declarator": "branchFactory = getRequiredOrmFactory(Branch.class)", "var_name": "branchFactory"}, {"original_string": "private OrmFactory<InProgressCommit> inProgressCommitFactory = getRequiredOrmFactory(InProgressCommit.class);", "modifier": "private", "type": "OrmFactory<InProgressCommit>", "declarator": "inProgressCommitFactory = getRequiredOrmFactory(InProgressCommit.class)", "var_name": "inProgressCommitFactory"}, {"original_string": "private OrmFactory<Dataset> datasetFactory = getRequiredOrmFactory(Dataset.class);", "modifier": "private", "type": "OrmFactory<Dataset>", "declarator": "datasetFactory = getRequiredOrmFactory(Dataset.class)", "var_name": "datasetFactory"}, {"original_string": "private IRI missingIRI;", "modifier": "private", "type": "IRI", "declarator": "missingIRI", "var_name": "missingIRI"}, {"original_string": "private IRI recordIRI;", "modifier": "private", "type": "IRI", "declarator": "recordIRI", "var_name": "recordIRI"}, {"original_string": "private IRI branchIRI;", "modifier": "private", "type": "IRI", "declarator": "branchIRI", "var_name": "branchIRI"}, {"original_string": "private IRI commitIRI;", "modifier": "private", "type": "IRI", "declarator": "commitIRI", "var_name": "commitIRI"}, {"original_string": "private IRI catalogIRI;", "modifier": "private", "type": "IRI", "declarator": "catalogIRI", "var_name": "catalogIRI"}, {"original_string": "private IRI ontologyIRI;", "modifier": "private", "type": "IRI", "declarator": "ontologyIRI", "var_name": "ontologyIRI"}, {"original_string": "private IRI versionIRI;", "modifier": "private", "type": "IRI", "declarator": "versionIRI", "var_name": "versionIRI"}, {"original_string": "private OntologyRecord record;", "modifier": "private", "type": "OntologyRecord", "declarator": "record", "var_name": "record"}, {"original_string": "private Difference difference;", "modifier": "private", "type": "Difference", "declarator": "difference", "var_name": "difference"}, {"original_string": "private InProgressCommit inProgressCommit;", "modifier": "private", "type": "InProgressCommit", "declarator": "inProgressCommit", "var_name": "inProgressCommit"}, {"original_string": "private Model ontologyModel;", "modifier": "private", "type": "Model", "declarator": "ontologyModel", "var_name": "ontologyModel"}, {"original_string": "private Model model;", "modifier": "private", "type": "Model", "declarator": "model", "var_name": "model"}, {"original_string": "private RepositoryManager repoManager = new SimpleRepositoryManager();", "modifier": "private", "type": "RepositoryManager", "declarator": "repoManager = new SimpleRepositoryManager()", "var_name": "repoManager"}, {"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private Repository vocabRepo;", "modifier": "private", "type": "Repository", "declarator": "vocabRepo", "var_name": "vocabRepo"}, {"original_string": "private Repository cacheRepo;", "modifier": "private", "type": "Repository", "declarator": "cacheRepo", "var_name": "cacheRepo"}, {"original_string": "private static final String SYSTEM_DEFAULT_NG_SUFFIX = \"_system_dng\";", "modifier": "private static final", "type": "String", "declarator": "SYSTEM_DEFAULT_NG_SUFFIX = \"_system_dng\"", "var_name": "SYSTEM_DEFAULT_NG_SUFFIX"}], "file": "com.mobi.ontology.impl.repository/src/test/java/com/mobi/ontology/impl/repository/SimpleOntologyManagerTest.java"}, "test_case": {"identifier": "testApplyChangesInProgressCommit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApplyChangesInProgressCommit() {\n        Branch branch = branchFactory.createNew(branchIRI);\n        branch.setHead(commitFactory.createNew(commitIRI));\n        when(catalogManager.getMasterBranch(catalogIRI, recordIRI)).thenReturn(branch);\n\n        manager.applyChanges(ontology, inProgressCommit);\n        verify(catalogUtilsService).getCommitDifference(eq(inProgressCommit.getResource()), any(RepositoryConnection.class));\n        verify(catalogUtilsService).applyDifference(eq(ontologyModel), eq(difference));\n    }", "signature": "void testApplyChangesInProgressCommit()", "full_signature": "@Test public void testApplyChangesInProgressCommit()", "class_method_signature": "SimpleOntologyManagerTest.testApplyChangesInProgressCommit()", "testcase": true, "constructor": false, "invocations": ["createNew", "setHead", "createNew", "thenReturn", "when", "getMasterBranch", "applyChanges", "getCommitDifference", "verify", "eq", "getResource", "any", "applyDifference", "verify", "eq", "eq"]}, "focal_class": {"identifier": "SimpleOntologyManager", "superclass": "extends AbstractOntologyManager", "interfaces": "", "fields": [{"original_string": "static final String COMPONENT_NAME = \"com.mobi.ontology.impl.repository.OntologyManager\";", "modifier": "static final", "type": "String", "declarator": "COMPONENT_NAME = \"com.mobi.ontology.impl.repository.OntologyManager\"", "var_name": "COMPONENT_NAME"}, {"original_string": "private DatasetManager datasetManager;", "modifier": "private", "type": "DatasetManager", "declarator": "datasetManager", "var_name": "datasetManager"}, {"original_string": "private ImportsResolver importsResolver;", "modifier": "private", "type": "ImportsResolver", "declarator": "importsResolver", "var_name": "importsResolver"}, {"original_string": "private BNodeService bNodeService;", "modifier": "private", "type": "BNodeService", "declarator": "bNodeService", "var_name": "bNodeService"}], "methods": [{"identifier": "SimpleOntologyManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleOntologyManager()", "full_signature": "public  SimpleOntologyManager()", "class_method_signature": "SimpleOntologyManager.SimpleOntologyManager()", "testcase": false, "constructor": true}, {"identifier": "setValueFactory", "parameters": "(ValueFactory valueFactory)", "modifiers": "@Reference public", "return": "void", "signature": "void setValueFactory(ValueFactory valueFactory)", "full_signature": "@Reference public void setValueFactory(ValueFactory valueFactory)", "class_method_signature": "SimpleOntologyManager.setValueFactory(ValueFactory valueFactory)", "testcase": false, "constructor": false}, {"identifier": "setModelFactory", "parameters": "(ModelFactory modelFactory)", "modifiers": "@Reference public", "return": "void", "signature": "void setModelFactory(ModelFactory modelFactory)", "full_signature": "@Reference public void setModelFactory(ModelFactory modelFactory)", "class_method_signature": "SimpleOntologyManager.setModelFactory(ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "setSesameTransformer", "parameters": "(SesameTransformer sesameTransformer)", "modifiers": "@Reference public", "return": "void", "signature": "void setSesameTransformer(SesameTransformer sesameTransformer)", "full_signature": "@Reference public void setSesameTransformer(SesameTransformer sesameTransformer)", "class_method_signature": "SimpleOntologyManager.setSesameTransformer(SesameTransformer sesameTransformer)", "testcase": false, "constructor": false}, {"identifier": "setDatasetManager", "parameters": "(DatasetManager datasetManager)", "modifiers": "@Reference public", "return": "void", "signature": "void setDatasetManager(DatasetManager datasetManager)", "full_signature": "@Reference public void setDatasetManager(DatasetManager datasetManager)", "class_method_signature": "SimpleOntologyManager.setDatasetManager(DatasetManager datasetManager)", "testcase": false, "constructor": false}, {"identifier": "setOntologyRecordFactory", "parameters": "(OntologyRecordFactory ontologyRecordFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setOntologyRecordFactory(OntologyRecordFactory ontologyRecordFactory)", "full_signature": "@Reference void setOntologyRecordFactory(OntologyRecordFactory ontologyRecordFactory)", "class_method_signature": "SimpleOntologyManager.setOntologyRecordFactory(OntologyRecordFactory ontologyRecordFactory)", "testcase": false, "constructor": false}, {"identifier": "setConfigProvider", "parameters": "(CatalogConfigProvider configProvider)", "modifiers": "@Reference", "return": "void", "signature": "void setConfigProvider(CatalogConfigProvider configProvider)", "full_signature": "@Reference void setConfigProvider(CatalogConfigProvider configProvider)", "class_method_signature": "SimpleOntologyManager.setConfigProvider(CatalogConfigProvider configProvider)", "testcase": false, "constructor": false}, {"identifier": "setCatalogManager", "parameters": "(CatalogManager catalogManager)", "modifiers": "@Reference public", "return": "void", "signature": "void setCatalogManager(CatalogManager catalogManager)", "full_signature": "@Reference public void setCatalogManager(CatalogManager catalogManager)", "class_method_signature": "SimpleOntologyManager.setCatalogManager(CatalogManager catalogManager)", "testcase": false, "constructor": false}, {"identifier": "setUtilsService", "parameters": "(CatalogUtilsService utilsService)", "modifiers": "@Reference", "return": "void", "signature": "void setUtilsService(CatalogUtilsService utilsService)", "full_signature": "@Reference void setUtilsService(CatalogUtilsService utilsService)", "class_method_signature": "SimpleOntologyManager.setUtilsService(CatalogUtilsService utilsService)", "testcase": false, "constructor": false}, {"identifier": "setRepositoryManager", "parameters": "(RepositoryManager repositoryManager)", "modifiers": "@Reference public", "return": "void", "signature": "void setRepositoryManager(RepositoryManager repositoryManager)", "full_signature": "@Reference public void setRepositoryManager(RepositoryManager repositoryManager)", "class_method_signature": "SimpleOntologyManager.setRepositoryManager(RepositoryManager repositoryManager)", "testcase": false, "constructor": false}, {"identifier": "setBranchFactory", "parameters": "(BranchFactory branchFactory)", "modifiers": "@Reference public", "return": "void", "signature": "void setBranchFactory(BranchFactory branchFactory)", "full_signature": "@Reference public void setBranchFactory(BranchFactory branchFactory)", "class_method_signature": "SimpleOntologyManager.setBranchFactory(BranchFactory branchFactory)", "testcase": false, "constructor": false}, {"identifier": "addOntologyCache", "parameters": "(OntologyCache ontologyCache)", "modifiers": "@Reference(type = '*', dynamic = true, optional = true) public", "return": "void", "signature": "void addOntologyCache(OntologyCache ontologyCache)", "full_signature": "@Reference(type = '*', dynamic = true, optional = true) public void addOntologyCache(OntologyCache ontologyCache)", "class_method_signature": "SimpleOntologyManager.addOntologyCache(OntologyCache ontologyCache)", "testcase": false, "constructor": false}, {"identifier": "removeOntologyCache", "parameters": "(OntologyCache ontologyCache)", "modifiers": "public", "return": "void", "signature": "void removeOntologyCache(OntologyCache ontologyCache)", "full_signature": "public void removeOntologyCache(OntologyCache ontologyCache)", "class_method_signature": "SimpleOntologyManager.removeOntologyCache(OntologyCache ontologyCache)", "testcase": false, "constructor": false}, {"identifier": "setImportsResolver", "parameters": "(ImportsResolver importsResolver)", "modifiers": "@Reference public", "return": "void", "signature": "void setImportsResolver(ImportsResolver importsResolver)", "full_signature": "@Reference public void setImportsResolver(ImportsResolver importsResolver)", "class_method_signature": "SimpleOntologyManager.setImportsResolver(ImportsResolver importsResolver)", "testcase": false, "constructor": false}, {"identifier": "setbNodeService", "parameters": "(BNodeService bNodeService)", "modifiers": "@Reference public", "return": "void", "signature": "void setbNodeService(BNodeService bNodeService)", "full_signature": "@Reference public void setbNodeService(BNodeService bNodeService)", "class_method_signature": "SimpleOntologyManager.setbNodeService(BNodeService bNodeService)", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "()", "modifiers": "@Activate public", "return": "void", "signature": "void activate()", "full_signature": "@Activate public void activate()", "class_method_signature": "SimpleOntologyManager.activate()", "testcase": false, "constructor": false}, {"identifier": "modified", "parameters": "()", "modifiers": "@Modified public", "return": "void", "signature": "void modified()", "full_signature": "@Modified public void modified()", "class_method_signature": "SimpleOntologyManager.modified()", "testcase": false, "constructor": false}, {"identifier": "createOntology", "parameters": "(InputStream inputStream, boolean resolveImports)", "modifiers": "@Override public", "return": "Ontology", "signature": "Ontology createOntology(InputStream inputStream, boolean resolveImports)", "full_signature": "@Override public Ontology createOntology(InputStream inputStream, boolean resolveImports)", "class_method_signature": "SimpleOntologyManager.createOntology(InputStream inputStream, boolean resolveImports)", "testcase": false, "constructor": false}, {"identifier": "createOntology", "parameters": "(Model model)", "modifiers": "@Override public", "return": "Ontology", "signature": "Ontology createOntology(Model model)", "full_signature": "@Override public Ontology createOntology(Model model)", "class_method_signature": "SimpleOntologyManager.createOntology(Model model)", "testcase": false, "constructor": false}, {"identifier": "createOntology", "parameters": "(Model model, Resource recordId, Resource commitId)", "modifiers": "private", "return": "Ontology", "signature": "Ontology createOntology(Model model, Resource recordId, Resource commitId)", "full_signature": "private Ontology createOntology(Model model, Resource recordId, Resource commitId)", "class_method_signature": "SimpleOntologyManager.createOntology(Model model, Resource recordId, Resource commitId)", "testcase": false, "constructor": false}, {"identifier": "createOntology", "parameters": "(Resource recordId, Resource commitId)", "modifiers": "private", "return": "Ontology", "signature": "Ontology createOntology(Resource recordId, Resource commitId)", "full_signature": "private Ontology createOntology(Resource recordId, Resource commitId)", "class_method_signature": "SimpleOntologyManager.createOntology(Resource recordId, Resource commitId)", "testcase": false, "constructor": false}, {"identifier": "applyChanges", "parameters": "(Ontology ontology, Difference difference)", "modifiers": "@Override public", "return": "Ontology", "signature": "Ontology applyChanges(Ontology ontology, Difference difference)", "full_signature": "@Override public Ontology applyChanges(Ontology ontology, Difference difference)", "class_method_signature": "SimpleOntologyManager.applyChanges(Ontology ontology, Difference difference)", "testcase": false, "constructor": false}, {"identifier": "createOntologyId", "parameters": "()", "modifiers": "@Override public", "return": "OntologyId", "signature": "OntologyId createOntologyId()", "full_signature": "@Override public OntologyId createOntologyId()", "class_method_signature": "SimpleOntologyManager.createOntologyId()", "testcase": false, "constructor": false}, {"identifier": "createOntologyId", "parameters": "(Resource resource)", "modifiers": "@Override public", "return": "OntologyId", "signature": "OntologyId createOntologyId(Resource resource)", "full_signature": "@Override public OntologyId createOntologyId(Resource resource)", "class_method_signature": "SimpleOntologyManager.createOntologyId(Resource resource)", "testcase": false, "constructor": false}, {"identifier": "createOntologyId", "parameters": "(IRI ontologyIRI)", "modifiers": "@Override public", "return": "OntologyId", "signature": "OntologyId createOntologyId(IRI ontologyIRI)", "full_signature": "@Override public OntologyId createOntologyId(IRI ontologyIRI)", "class_method_signature": "SimpleOntologyManager.createOntologyId(IRI ontologyIRI)", "testcase": false, "constructor": false}, {"identifier": "createOntologyId", "parameters": "(IRI ontologyIRI, IRI versionIRI)", "modifiers": "@Override public", "return": "OntologyId", "signature": "OntologyId createOntologyId(IRI ontologyIRI, IRI versionIRI)", "full_signature": "@Override public OntologyId createOntologyId(IRI ontologyIRI, IRI versionIRI)", "class_method_signature": "SimpleOntologyManager.createOntologyId(IRI ontologyIRI, IRI versionIRI)", "testcase": false, "constructor": false}, {"identifier": "createOntologyId", "parameters": "(Model model)", "modifiers": "@Override public", "return": "OntologyId", "signature": "OntologyId createOntologyId(Model model)", "full_signature": "@Override public OntologyId createOntologyId(Model model)", "class_method_signature": "SimpleOntologyManager.createOntologyId(Model model)", "testcase": false, "constructor": false}, {"identifier": "getOntology", "parameters": "(@Nonnull Resource recordId, @Nonnull Resource commitId)", "modifiers": "@Override protected", "return": "Optional<Ontology>", "signature": "Optional<Ontology> getOntology(@Nonnull Resource recordId, @Nonnull Resource commitId)", "full_signature": "@Override protected Optional<Ontology> getOntology(@Nonnull Resource recordId, @Nonnull Resource commitId)", "class_method_signature": "SimpleOntologyManager.getOntology(@Nonnull Resource recordId, @Nonnull Resource commitId)", "testcase": false, "constructor": false}, {"identifier": "createOntologyFromCommit", "parameters": "(Resource recordId, Resource commitId)", "modifiers": "private", "return": "Ontology", "signature": "Ontology createOntologyFromCommit(Resource recordId, Resource commitId)", "full_signature": "private Ontology createOntologyFromCommit(Resource recordId, Resource commitId)", "class_method_signature": "SimpleOntologyManager.createOntologyFromCommit(Resource recordId, Resource commitId)", "testcase": false, "constructor": false}], "file": "com.mobi.ontology.impl.repository/src/main/java/com/mobi/ontology/impl/repository/SimpleOntologyManager.java"}, "focal_method": {"identifier": "applyChanges", "parameters": "(Ontology ontology, Difference difference)", "modifiers": "@Override public", "return": "Ontology", "body": "@Override\n    public Ontology applyChanges(Ontology ontology, Difference difference) {\n        if (ontology instanceof SimpleOntology) {\n            SimpleOntology simpleOntology = (SimpleOntology) ontology;\n            simpleOntology.setDifference(difference);\n            return simpleOntology;\n        } else {\n            Model changedOntologyModel = utilsService.applyDifference(ontology.asModel(modelFactory), difference);\n            return createOntology(changedOntologyModel);\n        }\n    }", "signature": "Ontology applyChanges(Ontology ontology, Difference difference)", "full_signature": "@Override public Ontology applyChanges(Ontology ontology, Difference difference)", "class_method_signature": "SimpleOntologyManager.applyChanges(Ontology ontology, Difference difference)", "testcase": false, "constructor": false, "invocations": ["setDifference", "applyDifference", "asModel", "createOntology"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}