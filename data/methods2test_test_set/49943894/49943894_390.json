{"test_class": {"identifier": "VpcVirtualRouterElementTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    DataCenterDao _dcDao;", "modifier": "@Mock", "type": "DataCenterDao", "declarator": "_dcDao", "var_name": "_dcDao"}, {"original_string": "@Mock private DomainRouterDao _routerDao;", "modifier": "@Mock private", "type": "DomainRouterDao", "declarator": "_routerDao", "var_name": "_routerDao"}, {"original_string": "@Mock\n    EntityManager _entityMgr;", "modifier": "@Mock", "type": "EntityManager", "declarator": "_entityMgr", "var_name": "_entityMgr"}, {"original_string": "@Mock\n    NetworkTopologyContext networkTopologyContext;", "modifier": "@Mock", "type": "NetworkTopologyContext", "declarator": "networkTopologyContext", "var_name": "networkTopologyContext"}, {"original_string": "@InjectMocks\n    VpcVirtualNetworkApplianceManagerImpl _vpcRouterMgr;", "modifier": "@InjectMocks", "type": "VpcVirtualNetworkApplianceManagerImpl", "declarator": "_vpcRouterMgr", "var_name": "_vpcRouterMgr"}, {"original_string": "@InjectMocks\n    VpcVirtualRouterElement vpcVirtualRouterElement;", "modifier": "@InjectMocks", "type": "VpcVirtualRouterElement", "declarator": "vpcVirtualRouterElement", "var_name": "vpcVirtualRouterElement"}], "file": "server/src/test/java/com/cloud/network/element/VpcVirtualRouterElementTest.java"}, "test_case": {"identifier": "testApplyVpnUsersException1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApplyVpnUsersException1() {\n        vpcVirtualRouterElement._vpcRouterMgr = _vpcRouterMgr;\n\n        final AdvancedNetworkTopology advancedNetworkTopology = Mockito.mock(AdvancedNetworkTopology.class);\n        final BasicNetworkTopology basicNetworkTopology = Mockito.mock(BasicNetworkTopology.class);\n\n        networkTopologyContext.setAdvancedNetworkTopology(advancedNetworkTopology);\n        networkTopologyContext.setBasicNetworkTopology(basicNetworkTopology);\n        networkTopologyContext.init();\n\n        final RemoteAccessVpn remoteAccessVpn = Mockito.mock(RemoteAccessVpn.class);\n        final List<VpnUser> users = new ArrayList<VpnUser>();\n\n        when(remoteAccessVpn.getVpcId()).thenReturn(null);\n\n        try {\n            final String [] results = vpcVirtualRouterElement.applyVpnUsers(remoteAccessVpn, users);\n            assertNull(results);\n        } catch (final ResourceUnavailableException e) {\n            fail(e.getMessage());\n        }\n\n        verify(remoteAccessVpn, times(1)).getVpcId();\n    }", "signature": "void testApplyVpnUsersException1()", "full_signature": "@Test public void testApplyVpnUsersException1()", "class_method_signature": "VpcVirtualRouterElementTest.testApplyVpnUsersException1()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "setAdvancedNetworkTopology", "setBasicNetworkTopology", "init", "mock", "thenReturn", "when", "getVpcId", "applyVpnUsers", "assertNull", "fail", "getMessage", "getVpcId", "verify", "times"]}, "focal_class": {"identifier": "VpcVirtualRouterElement", "superclass": "extends VirtualRouterElement", "interfaces": "implements VpcProvider, Site2SiteVpnServiceProvider, NetworkACLServiceProvider", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(VpcVirtualRouterElement.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(VpcVirtualRouterElement.class)", "var_name": "s_logger"}, {"original_string": "private static final Map<Service, Map<Capability, String>> capabilities = setCapabilities();", "modifier": "private static final", "type": "Map<Service, Map<Capability, String>>", "declarator": "capabilities = setCapabilities()", "var_name": "capabilities"}, {"original_string": "@Inject\n    VpcManager _vpcMgr;", "modifier": "@Inject", "type": "VpcManager", "declarator": "_vpcMgr", "var_name": "_vpcMgr"}, {"original_string": "@Inject\n    VpcVirtualNetworkApplianceManager _vpcRouterMgr;", "modifier": "@Inject", "type": "VpcVirtualNetworkApplianceManager", "declarator": "_vpcRouterMgr", "var_name": "_vpcRouterMgr"}, {"original_string": "@Inject\n    Site2SiteVpnGatewayDao _vpnGatewayDao;", "modifier": "@Inject", "type": "Site2SiteVpnGatewayDao", "declarator": "_vpnGatewayDao", "var_name": "_vpnGatewayDao"}, {"original_string": "@Inject\n    IPAddressDao _ipAddressDao;", "modifier": "@Inject", "type": "IPAddressDao", "declarator": "_ipAddressDao", "var_name": "_ipAddressDao"}, {"original_string": "@Inject\n    NetworkModel _ntwkModel;", "modifier": "@Inject", "type": "NetworkModel", "declarator": "_ntwkModel", "var_name": "_ntwkModel"}, {"original_string": "@Inject\n    NetworkDao _networkDao;", "modifier": "@Inject", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Inject\n    VpcGatewayDao _vpcGatewayDao;", "modifier": "@Inject", "type": "VpcGatewayDao", "declarator": "_vpcGatewayDao", "var_name": "_vpcGatewayDao"}, {"original_string": "@Inject\n    NetworkACLItemDao _networkACLItemDao;", "modifier": "@Inject", "type": "NetworkACLItemDao", "declarator": "_networkACLItemDao", "var_name": "_networkACLItemDao"}, {"original_string": "@Inject\n    EntityManager _entityMgr;", "modifier": "@Inject", "type": "EntityManager", "declarator": "_entityMgr", "var_name": "_entityMgr"}, {"original_string": "@Inject\n    VirtualMachineManager _itMgr;", "modifier": "@Inject", "type": "VirtualMachineManager", "declarator": "_itMgr", "var_name": "_itMgr"}, {"original_string": "@Inject\n    IpAddressManager _ipAddrMgr;", "modifier": "@Inject", "type": "IpAddressManager", "declarator": "_ipAddrMgr", "var_name": "_ipAddrMgr"}, {"original_string": "@Inject\n    VpcDao _vpcDao;", "modifier": "@Inject", "type": "VpcDao", "declarator": "_vpcDao", "var_name": "_vpcDao"}, {"original_string": "@Autowired\n    @Qualifier(\"vpcNetworkHelper\")\n    private VpcNetworkHelperImpl _vpcNetWprkHelper;", "modifier": "@Autowired\n    @Qualifier(\"vpcNetworkHelper\")\n    private", "type": "VpcNetworkHelperImpl", "declarator": "_vpcNetWprkHelper", "var_name": "_vpcNetWprkHelper"}, {"original_string": "@Inject RouterDeploymentDefinitionBuilder routerDeploymentDefinitionBuilder;", "modifier": "@Inject", "type": "RouterDeploymentDefinitionBuilder", "declarator": "routerDeploymentDefinitionBuilder", "var_name": "routerDeploymentDefinitionBuilder"}], "methods": [{"identifier": "canHandle", "parameters": "(final Network network, final Service service)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canHandle(final Network network, final Service service)", "full_signature": "@Override protected boolean canHandle(final Network network, final Service service)", "class_method_signature": "VpcVirtualRouterElement.canHandle(final Network network, final Service service)", "testcase": false, "constructor": false}, {"identifier": "implementVpc", "parameters": "(final Vpc vpc, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean implementVpc(final Vpc vpc, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public boolean implementVpc(final Vpc vpc, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "VpcVirtualRouterElement.implementVpc(final Vpc vpc, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "shutdownVpc", "parameters": "(final Vpc vpc, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shutdownVpc(final Vpc vpc, final ReservationContext context)", "full_signature": "@Override public boolean shutdownVpc(final Vpc vpc, final ReservationContext context)", "class_method_signature": "VpcVirtualRouterElement.shutdownVpc(final Vpc vpc, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "implement", "parameters": "(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public boolean implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "VpcVirtualRouterElement.implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "configureGuestNetwork", "parameters": "(final Network network, final List<DomainRouterVO> routers )", "modifiers": "protected", "return": "void", "signature": "void configureGuestNetwork(final Network network, final List<DomainRouterVO> routers )", "full_signature": "protected void configureGuestNetwork(final Network network, final List<DomainRouterVO> routers )", "class_method_signature": "VpcVirtualRouterElement.configureGuestNetwork(final Network network, final List<DomainRouterVO> routers )", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean prepare(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public boolean prepare(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "VpcVirtualRouterElement.prepare(final Network network, final NicProfile nic, final VirtualMachineProfile vm, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "(final Network network, final ReservationContext context, final boolean cleanup)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shutdown(final Network network, final ReservationContext context, final boolean cleanup)", "full_signature": "@Override public boolean shutdown(final Network network, final ReservationContext context, final boolean cleanup)", "class_method_signature": "VpcVirtualRouterElement.shutdown(final Network network, final ReservationContext context, final boolean cleanup)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(final Network config, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean destroy(final Network config, final ReservationContext context)", "full_signature": "@Override public boolean destroy(final Network config, final ReservationContext context)", "class_method_signature": "VpcVirtualRouterElement.destroy(final Network config, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "()", "modifiers": "@Override public", "return": "Provider", "signature": "Provider getProvider()", "full_signature": "@Override public Provider getProvider()", "class_method_signature": "VpcVirtualRouterElement.getProvider()", "testcase": false, "constructor": false}, {"identifier": "getRouters", "parameters": "(final Network network, final DeployDestination dest)", "modifiers": "@Override protected", "return": "List<DomainRouterVO>", "signature": "List<DomainRouterVO> getRouters(final Network network, final DeployDestination dest)", "full_signature": "@Override protected List<DomainRouterVO> getRouters(final Network network, final DeployDestination dest)", "class_method_signature": "VpcVirtualRouterElement.getRouters(final Network network, final DeployDestination dest)", "testcase": false, "constructor": false}, {"identifier": "setCapabilities", "parameters": "()", "modifiers": "private static", "return": "Map<Service, Map<Capability, String>>", "signature": "Map<Service, Map<Capability, String>> setCapabilities()", "full_signature": "private static Map<Service, Map<Capability, String>> setCapabilities()", "class_method_signature": "VpcVirtualRouterElement.setCapabilities()", "testcase": false, "constructor": false}, {"identifier": "getCapabilities", "parameters": "()", "modifiers": "@Override public", "return": "Map<Service, Map<Capability, String>>", "signature": "Map<Service, Map<Capability, String>> getCapabilities()", "full_signature": "@Override public Map<Service, Map<Capability, String>> getCapabilities()", "class_method_signature": "VpcVirtualRouterElement.getCapabilities()", "testcase": false, "constructor": false}, {"identifier": "createPrivateGateway", "parameters": "(final PrivateGateway gateway)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean createPrivateGateway(final PrivateGateway gateway)", "full_signature": "@Override public boolean createPrivateGateway(final PrivateGateway gateway)", "class_method_signature": "VpcVirtualRouterElement.createPrivateGateway(final PrivateGateway gateway)", "testcase": false, "constructor": false}, {"identifier": "deletePrivateGateway", "parameters": "(final PrivateGateway gateway)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deletePrivateGateway(final PrivateGateway gateway)", "full_signature": "@Override public boolean deletePrivateGateway(final PrivateGateway gateway)", "class_method_signature": "VpcVirtualRouterElement.deletePrivateGateway(final PrivateGateway gateway)", "testcase": false, "constructor": false}, {"identifier": "applyIps", "parameters": "(final Network network, final List<? extends PublicIpAddress> ipAddress, final Set<Service> services)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyIps(final Network network, final List<? extends PublicIpAddress> ipAddress, final Set<Service> services)", "full_signature": "@Override public boolean applyIps(final Network network, final List<? extends PublicIpAddress> ipAddress, final Set<Service> services)", "class_method_signature": "VpcVirtualRouterElement.applyIps(final Network network, final List<? extends PublicIpAddress> ipAddress, final Set<Service> services)", "testcase": false, "constructor": false}, {"identifier": "applyNetworkACLs", "parameters": "(final Network network, final List<? extends NetworkACLItem> rules)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyNetworkACLs(final Network network, final List<? extends NetworkACLItem> rules)", "full_signature": "@Override public boolean applyNetworkACLs(final Network network, final List<? extends NetworkACLItem> rules)", "class_method_signature": "VpcVirtualRouterElement.applyNetworkACLs(final Network network, final List<? extends NetworkACLItem> rules)", "testcase": false, "constructor": false}, {"identifier": "getVirtualRouterProvider", "parameters": "()", "modifiers": "@Override protected", "return": "Type", "signature": "Type getVirtualRouterProvider()", "full_signature": "@Override protected Type getVirtualRouterProvider()", "class_method_signature": "VpcVirtualRouterElement.getVirtualRouterProvider()", "testcase": false, "constructor": false}, {"identifier": "applyStaticRoutes", "parameters": "(final Vpc vpc, final List<StaticRouteProfile> routes)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyStaticRoutes(final Vpc vpc, final List<StaticRouteProfile> routes)", "full_signature": "@Override public boolean applyStaticRoutes(final Vpc vpc, final List<StaticRouteProfile> routes)", "class_method_signature": "VpcVirtualRouterElement.applyStaticRoutes(final Vpc vpc, final List<StaticRouteProfile> routes)", "testcase": false, "constructor": false}, {"identifier": "applyACLItemsToPrivateGw", "parameters": "(final PrivateGateway gateway, final List<? extends NetworkACLItem> rules)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyACLItemsToPrivateGw(final PrivateGateway gateway, final List<? extends NetworkACLItem> rules)", "full_signature": "@Override public boolean applyACLItemsToPrivateGw(final PrivateGateway gateway, final List<? extends NetworkACLItem> rules)", "class_method_signature": "VpcVirtualRouterElement.applyACLItemsToPrivateGw(final PrivateGateway gateway, final List<? extends NetworkACLItem> rules)", "testcase": false, "constructor": false}, {"identifier": "startSite2SiteVpn", "parameters": "(final Site2SiteVpnConnection conn)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean startSite2SiteVpn(final Site2SiteVpnConnection conn)", "full_signature": "@Override public boolean startSite2SiteVpn(final Site2SiteVpnConnection conn)", "class_method_signature": "VpcVirtualRouterElement.startSite2SiteVpn(final Site2SiteVpnConnection conn)", "testcase": false, "constructor": false}, {"identifier": "stopSite2SiteVpn", "parameters": "(final Site2SiteVpnConnection conn)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stopSite2SiteVpn(final Site2SiteVpnConnection conn)", "full_signature": "@Override public boolean stopSite2SiteVpn(final Site2SiteVpnConnection conn)", "class_method_signature": "VpcVirtualRouterElement.stopSite2SiteVpn(final Site2SiteVpnConnection conn)", "testcase": false, "constructor": false}, {"identifier": "applyVpnUsers", "parameters": "(final RemoteAccessVpn vpn, final List<? extends VpnUser> users)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] applyVpnUsers(final RemoteAccessVpn vpn, final List<? extends VpnUser> users)", "full_signature": "@Override public String[] applyVpnUsers(final RemoteAccessVpn vpn, final List<? extends VpnUser> users)", "class_method_signature": "VpcVirtualRouterElement.applyVpnUsers(final RemoteAccessVpn vpn, final List<? extends VpnUser> users)", "testcase": false, "constructor": false}, {"identifier": "startVpn", "parameters": "(final RemoteAccessVpn vpn)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean startVpn(final RemoteAccessVpn vpn)", "full_signature": "@Override public boolean startVpn(final RemoteAccessVpn vpn)", "class_method_signature": "VpcVirtualRouterElement.startVpn(final RemoteAccessVpn vpn)", "testcase": false, "constructor": false}, {"identifier": "stopVpn", "parameters": "(final RemoteAccessVpn vpn)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stopVpn(final RemoteAccessVpn vpn)", "full_signature": "@Override public boolean stopVpn(final RemoteAccessVpn vpn)", "class_method_signature": "VpcVirtualRouterElement.stopVpn(final RemoteAccessVpn vpn)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/network/element/VpcVirtualRouterElement.java"}, "focal_method": {"identifier": "applyVpnUsers", "parameters": "(final RemoteAccessVpn vpn, final List<? extends VpnUser> users)", "modifiers": "@Override public", "return": "String[]", "body": "@Override\n    public String[] applyVpnUsers(final RemoteAccessVpn vpn, final List<? extends VpnUser> users) throws ResourceUnavailableException {\n        final Long vpcId = vpn.getVpcId();\n        if (vpcId == null) {\n            return null;\n        }\n\n        final List<DomainRouterVO> routers = _vpcRouterMgr.getVpcRouters(vpcId);\n        if (routers == null) {\n            s_logger.debug(\"Cannot apply vpn users on the backend; virtual router doesn't exist in the network \" + vpcId);\n            return null;\n        }\n\n        final Vpc vpc = _entityMgr.findById(Vpc.class, vpcId);\n        final DataCenterVO dcVO = _dcDao.findById(vpc.getZoneId());\n        final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n        String[] result = null;\n        final List<String> combinedResults = new ArrayList<String>();\n        for (final DomainRouterVO domainRouterVO : routers) {\n            result = networkTopology.applyVpnUsers(vpn, users, domainRouterVO);\n            combinedResults.addAll(Arrays.asList(result));\n        }\n        result = new String[combinedResults.size()];\n        final Object [] resultCast = combinedResults.toArray();\n        System.arraycopy(resultCast, 0, result, 0, resultCast.length);\n\n        return result;\n    }", "signature": "String[] applyVpnUsers(final RemoteAccessVpn vpn, final List<? extends VpnUser> users)", "full_signature": "@Override public String[] applyVpnUsers(final RemoteAccessVpn vpn, final List<? extends VpnUser> users)", "class_method_signature": "VpcVirtualRouterElement.applyVpnUsers(final RemoteAccessVpn vpn, final List<? extends VpnUser> users)", "testcase": false, "constructor": false, "invocations": ["getVpcId", "getVpcRouters", "debug", "findById", "findById", "getZoneId", "retrieveNetworkTopology", "applyVpnUsers", "addAll", "asList", "size", "toArray", "arraycopy"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}