{"test_class": {"identifier": "MaintenanceInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MaintenanceInterceptor interceptor = new MaintenanceInterceptor();", "modifier": "", "type": "MaintenanceInterceptor", "declarator": "interceptor = new MaintenanceInterceptor()", "var_name": "interceptor"}, {"original_string": "@Mock\n    HttpServletRequest request;", "modifier": "@Mock", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    HttpServletResponse response;", "modifier": "@Mock", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    Object handler;", "modifier": "@Mock", "type": "Object", "declarator": "handler", "var_name": "handler"}, {"original_string": "@DataPoint\n    public static I1 input1 = new I1( \"127.0.0.1\", \"/hms-aggregator/api/1.0/hms/nodes\" );", "modifier": "@DataPoint\n    public static", "type": "I1", "declarator": "input1 = new I1( \"127.0.0.1\", \"/hms-aggregator/api/1.0/hms/nodes\" )", "var_name": "input1"}, {"original_string": "@DataPoint\n    public static I1 input2 = new I1( \"::1\", \"/hms-aggregator/api/1.0/hms/nodes\" );", "modifier": "@DataPoint\n    public static", "type": "I1", "declarator": "input2 = new I1( \"::1\", \"/hms-aggregator/api/1.0/hms/nodes\" )", "var_name": "input2"}, {"original_string": "@DataPoint\n    public static I1 input3 = new I1( \"0:0:0:0:0:0:0:1\", \"/hms-aggregator/api/1.0/hms/nodes\" );", "modifier": "@DataPoint\n    public static", "type": "I1", "declarator": "input3 = new I1( \"0:0:0:0:0:0:0:1\", \"/hms-aggregator/api/1.0/hms/nodes\" )", "var_name": "input3"}, {"original_string": "@DataPoint\n    public static I2 input4 = new I2( \"192.168.100.2\", \"/hms-aggregator/api/1.0/hms/about\" );", "modifier": "@DataPoint\n    public static", "type": "I2", "declarator": "input4 = new I2( \"192.168.100.2\", \"/hms-aggregator/api/1.0/hms/about\" )", "var_name": "input4"}, {"original_string": "@DataPoint\n    public static I2 input5 = new I2( \"192.168.100.2\", \"/hms-aggregator/api/1.0/hms/upgrade\" );", "modifier": "@DataPoint\n    public static", "type": "I2", "declarator": "input5 = new I2( \"192.168.100.2\", \"/hms-aggregator/api/1.0/hms/upgrade\" )", "var_name": "input5"}, {"original_string": "@DataPoint\n    public static I3 input6 = new I3( \"192.168.100.2\", \"/hms-aggregator/api/1.0/hms/nodes\" );", "modifier": "@DataPoint\n    public static", "type": "I3", "declarator": "input6 = new I3( \"192.168.100.2\", \"/hms-aggregator/api/1.0/hms/nodes\" )", "var_name": "input6"}], "file": "modules/hms-aggregator/src/test/java/com/vmware/vrack/hms/controller/MaintenanceInterceptorTest.java"}, "test_case": {"identifier": "testIfTheRequestIsFromValidSource", "parameters": "( I3 input )", "modifiers": "@Test( expected = HMSRestException.class ) @Theory public", "return": "void", "body": "@Test( expected = HMSRestException.class )\n    @Theory\n    public void testIfTheRequestIsFromValidSource( I3 input )\n        throws Exception\n    {\n        Mockito.when( request.getRequestURL() ).thenReturn( new StringBuffer( input.url ) );\n        Mockito.when( request.getRemoteAddr() ).thenReturn( input.remoteAdd );\n        interceptor.preHandle( request, response, handler );\n    }", "signature": "void testIfTheRequestIsFromValidSource( I3 input )", "full_signature": "@Test( expected = HMSRestException.class ) @Theory public void testIfTheRequestIsFromValidSource( I3 input )", "class_method_signature": "MaintenanceInterceptorTest.testIfTheRequestIsFromValidSource( I3 input )", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getRequestURL", "thenReturn", "when", "getRemoteAddr", "preHandle"]}, "focal_class": {"identifier": "MaintenanceInterceptor", "superclass": "extends HandlerInterceptorAdapter", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger( MaintenanceInterceptor.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( MaintenanceInterceptor.class )", "var_name": "logger"}, {"original_string": "private static AtomicInteger activeRequestCounter = new AtomicInteger();", "modifier": "private static", "type": "AtomicInteger", "declarator": "activeRequestCounter = new AtomicInteger()", "var_name": "activeRequestCounter"}, {"original_string": "private String localIpRegex;", "modifier": "private", "type": "String", "declarator": "localIpRegex", "var_name": "localIpRegex"}, {"original_string": "private String privateIpEligibleApisRegEx;", "modifier": "private", "type": "String", "declarator": "privateIpEligibleApisRegEx", "var_name": "privateIpEligibleApisRegEx"}], "methods": [{"identifier": "preHandle", "parameters": "( HttpServletRequest request, HttpServletResponse response, Object handler )", "modifiers": "public", "return": "boolean", "signature": "boolean preHandle( HttpServletRequest request, HttpServletResponse response, Object handler )", "full_signature": "public boolean preHandle( HttpServletRequest request, HttpServletResponse response, Object handler )", "class_method_signature": "MaintenanceInterceptor.preHandle( HttpServletRequest request, HttpServletResponse response, Object handler )", "testcase": false, "constructor": false}, {"identifier": "isTheRequestFromValidSource", "parameters": "( String requestURL, String remoteAddr )", "modifiers": "private", "return": "boolean", "signature": "boolean isTheRequestFromValidSource( String requestURL, String remoteAddr )", "full_signature": "private boolean isTheRequestFromValidSource( String requestURL, String remoteAddr )", "class_method_signature": "MaintenanceInterceptor.isTheRequestFromValidSource( String requestURL, String remoteAddr )", "testcase": false, "constructor": false}, {"identifier": "validateNodeAvialability", "parameters": "( HttpServletRequest request, HttpServletResponse response )", "modifiers": "private", "return": "boolean", "signature": "boolean validateNodeAvialability( HttpServletRequest request, HttpServletResponse response )", "full_signature": "private boolean validateNodeAvialability( HttpServletRequest request, HttpServletResponse response )", "class_method_signature": "MaintenanceInterceptor.validateNodeAvialability( HttpServletRequest request, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "afterCompletion", "parameters": "( HttpServletRequest request, HttpServletResponse response, Object handler,\n                                 Exception ex )", "modifiers": "@Override public", "return": "void", "signature": "void afterCompletion( HttpServletRequest request, HttpServletResponse response, Object handler,\n                                 Exception ex )", "full_signature": "@Override public void afterCompletion( HttpServletRequest request, HttpServletResponse response, Object handler,\n                                 Exception ex )", "class_method_signature": "MaintenanceInterceptor.afterCompletion( HttpServletRequest request, HttpServletResponse response, Object handler,\n                                 Exception ex )", "testcase": false, "constructor": false}, {"identifier": "getActiveRequests", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getActiveRequests()", "full_signature": "public static int getActiveRequests()", "class_method_signature": "MaintenanceInterceptor.getActiveRequests()", "testcase": false, "constructor": false}, {"identifier": "getLocalIpRegex", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLocalIpRegex()", "full_signature": "public String getLocalIpRegex()", "class_method_signature": "MaintenanceInterceptor.getLocalIpRegex()", "testcase": false, "constructor": false}, {"identifier": "setLocalIpRegex", "parameters": "( String localIpRegex )", "modifiers": "@Value( \"${hms.local.ip.regex}\" ) public", "return": "void", "signature": "void setLocalIpRegex( String localIpRegex )", "full_signature": "@Value( \"${hms.local.ip.regex}\" ) public void setLocalIpRegex( String localIpRegex )", "class_method_signature": "MaintenanceInterceptor.setLocalIpRegex( String localIpRegex )", "testcase": false, "constructor": false}, {"identifier": "getPrivateIpEligibleApisRegEx", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPrivateIpEligibleApisRegEx()", "full_signature": "public String getPrivateIpEligibleApisRegEx()", "class_method_signature": "MaintenanceInterceptor.getPrivateIpEligibleApisRegEx()", "testcase": false, "constructor": false}, {"identifier": "setPrivateIpEligibleApisRegEx", "parameters": "( String privateIpEligibleApisRegEx )", "modifiers": "@Value( \"${hms.private.ip.eligible.apis.regex}\" ) public", "return": "void", "signature": "void setPrivateIpEligibleApisRegEx( String privateIpEligibleApisRegEx )", "full_signature": "@Value( \"${hms.private.ip.eligible.apis.regex}\" ) public void setPrivateIpEligibleApisRegEx( String privateIpEligibleApisRegEx )", "class_method_signature": "MaintenanceInterceptor.setPrivateIpEligibleApisRegEx( String privateIpEligibleApisRegEx )", "testcase": false, "constructor": false}], "file": "modules/hms-aggregator/src/main/java/com/vmware/vrack/hms/controller/MaintenanceInterceptor.java"}, "focal_method": {"identifier": "preHandle", "parameters": "( HttpServletRequest request, HttpServletResponse response, Object handler )", "modifiers": "public", "return": "boolean", "body": "public boolean preHandle( HttpServletRequest request, HttpServletResponse response, Object handler )\n        throws Exception\n    {\n\n        String method = request.getMethod();\n        String requestURL = request.getRequestURL().toString();\n        String remoteAddr = request.getRemoteAddr();\n\n        logger.info( \"Received request: [ {} on {} from remote address {} ].\", method, requestURL, remoteAddr );\n\n        if ( !isTheRequestFromValidSource( requestURL, remoteAddr ) )\n        {\n            logger.error( \"Resource access denied for requestURL: {} remoteAddr: {}\", requestURL, remoteAddr );\n            throw new HMSRestException( Status.FORBIDDEN.getStatusCode(), Status.FORBIDDEN.toString(),\n                                        \" Api access denied.\" );\n        }\n\n        ServiceState serviceState = ServiceManager.getServiceState();\n        if ( serviceState.equals( ServiceState.NORMAL_MAINTENANCE )\n            || serviceState.equals( ServiceState.FORCE_MAINTENANCE ) )\n        {\n\n            // allow upgrade monitoring api, even if service is in maintenance\n            // Allow get/set HMS statue even if service is in maintenance\n            if ( ( !( method.equalsIgnoreCase( RequestMethod.GET.toString() )\n                && requestURL.matches( \".*/upgrade/monitor/.*\" ) ) ) && !( requestURL.matches( \".*/state.*\" ) ) )\n            {\n\n                logger.info( \"HMS Service is in {} state. Aborting the request: [ {} on {} ].\", serviceState, method,\n                             requestURL );\n                throw new HMSRestException( Status.SERVICE_UNAVAILABLE.getStatusCode(),\n                                            Status.SERVICE_UNAVAILABLE.toString(), \" Service is under maintenance.\" );\n            }\n        }\n        return validateNodeAvialability( request, response );\n    }", "signature": "boolean preHandle( HttpServletRequest request, HttpServletResponse response, Object handler )", "full_signature": "public boolean preHandle( HttpServletRequest request, HttpServletResponse response, Object handler )", "class_method_signature": "MaintenanceInterceptor.preHandle( HttpServletRequest request, HttpServletResponse response, Object handler )", "testcase": false, "constructor": false, "invocations": ["getMethod", "toString", "getRequestURL", "getRemoteAddr", "info", "isTheRequestFromValidSource", "error", "getStatusCode", "toString", "getServiceState", "equals", "equals", "equalsIgnoreCase", "toString", "matches", "matches", "info", "getStatusCode", "toString", "validateNodeAvialability"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}