{"test_class": {"identifier": "FirmwareManagementServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String VERSION_1 = \"R01\";", "modifier": "private static final", "type": "String", "declarator": "VERSION_1 = \"R01\"", "var_name": "VERSION_1"}, {"original_string": "private static final String VERSION_2 = \"R02\";", "modifier": "private static final", "type": "String", "declarator": "VERSION_2 = \"R02\"", "var_name": "VERSION_2"}, {"original_string": "private static final String VERSION_3 = \"R03\";", "modifier": "private static final", "type": "String", "declarator": "VERSION_3 = \"R03\"", "var_name": "VERSION_3"}, {"original_string": "@Mock\n    private DeviceRepository deviceRepository;", "modifier": "@Mock\n    private", "type": "DeviceRepository", "declarator": "deviceRepository", "var_name": "deviceRepository"}, {"original_string": "@Mock\n    private DeviceFirmwareFileRepository deviceFirmwareFileRepository;", "modifier": "@Mock\n    private", "type": "DeviceFirmwareFileRepository", "declarator": "deviceFirmwareFileRepository", "var_name": "deviceFirmwareFileRepository"}, {"original_string": "@Mock\n    private ManufacturerRepository manufacturerRepository;", "modifier": "@Mock\n    private", "type": "ManufacturerRepository", "declarator": "manufacturerRepository", "var_name": "manufacturerRepository"}, {"original_string": "@Mock\n    private DeviceModelRepository deviceModelRepository;", "modifier": "@Mock\n    private", "type": "DeviceModelRepository", "declarator": "deviceModelRepository", "var_name": "deviceModelRepository"}, {"original_string": "@Mock\n    private FirmwareFileRepository firmwareFileRepository;", "modifier": "@Mock\n    private", "type": "FirmwareFileRepository", "declarator": "firmwareFileRepository", "var_name": "firmwareFileRepository"}, {"original_string": "@Mock\n    private DomainCoreMapper domainCoreMapper;", "modifier": "@Mock\n    private", "type": "DomainCoreMapper", "declarator": "domainCoreMapper", "var_name": "domainCoreMapper"}, {"original_string": "@Mock\n    private SsldPendingFirmwareUpdateRepository ssldPendingFirmwareUpdateRepository;", "modifier": "@Mock\n    private", "type": "SsldPendingFirmwareUpdateRepository", "declarator": "ssldPendingFirmwareUpdateRepository", "var_name": "ssldPendingFirmwareUpdateRepository"}, {"original_string": "@Mock\n    private WebServiceResponseMessageSender webServiceResponseMessageSender;", "modifier": "@Mock\n    private", "type": "WebServiceResponseMessageSender", "declarator": "webServiceResponseMessageSender", "var_name": "webServiceResponseMessageSender"}, {"original_string": "@Mock\n    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;", "modifier": "@Mock\n    private", "type": "OsgpCoreRequestMessageSender", "declarator": "osgpCoreRequestMessageSender", "var_name": "osgpCoreRequestMessageSender"}, {"original_string": "@Mock\n    private DeviceDomainService deviceDomainService;", "modifier": "@Mock\n    private", "type": "DeviceDomainService", "declarator": "deviceDomainService", "var_name": "deviceDomainService"}, {"original_string": "@Mock\n    private OrganisationDomainService organisationDomainService;", "modifier": "@Mock\n    private", "type": "OrganisationDomainService", "declarator": "organisationDomainService", "var_name": "organisationDomainService"}, {"original_string": "@InjectMocks\n    private FirmwareManagementService firmwareManagementService;", "modifier": "@InjectMocks\n    private", "type": "FirmwareManagementService", "declarator": "firmwareManagementService", "var_name": "firmwareManagementService"}], "file": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java"}, "test_case": {"identifier": "testCheckFirmwareHistoryForExistingVersion", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testCheckFirmwareHistoryForExistingVersion() {\n        // Arrange\n        final FirmwareVersion firmwareVersion1 = new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_2);\n        final FirmwareVersion firmwareVersion2 = new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_2);\n        final List<FirmwareVersion> versionsOnDevice = Arrays.asList(firmwareVersion1, firmwareVersion2);\n\n        // Act\n        final List<FirmwareVersion> versionsNotInHistory = this.firmwareManagementService\n                .checkFirmwareHistoryForVersion(\"DVC\", versionsOnDevice);\n\n        // Validate\n        assertThat(versionsNotInHistory).withFailMessage(\"List should be empty\").isEmpty();\n    }", "signature": "void testCheckFirmwareHistoryForExistingVersion()", "full_signature": "@Test void testCheckFirmwareHistoryForExistingVersion()", "class_method_signature": "FirmwareManagementServiceTest.testCheckFirmwareHistoryForExistingVersion()", "testcase": true, "constructor": false, "invocations": ["asList", "checkFirmwareHistoryForVersion", "isEmpty", "withFailMessage", "assertThat"]}, "focal_class": {"identifier": "FirmwareManagementService", "superclass": "extends AbstractService", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FirmwareManagementService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FirmwareManagementService.class)", "var_name": "LOGGER"}, {"original_string": "private static final String INSTALLER = \"Inserted to match the version reported by the device.\";", "modifier": "private static final", "type": "String", "declarator": "INSTALLER = \"Inserted to match the version reported by the device.\"", "var_name": "INSTALLER"}, {"original_string": "@Autowired\n    private DeviceFirmwareFileRepository deviceFirmwareFileRepository;", "modifier": "@Autowired\n    private", "type": "DeviceFirmwareFileRepository", "declarator": "deviceFirmwareFileRepository", "var_name": "deviceFirmwareFileRepository"}, {"original_string": "@Autowired\n    private DeviceModelRepository deviceModelRepository;", "modifier": "@Autowired\n    private", "type": "DeviceModelRepository", "declarator": "deviceModelRepository", "var_name": "deviceModelRepository"}, {"original_string": "@Autowired\n    private DeviceRepository deviceRepository;", "modifier": "@Autowired\n    private", "type": "DeviceRepository", "declarator": "deviceRepository", "var_name": "deviceRepository"}, {"original_string": "@Autowired\n    private FirmwareFileRepository firmwareFileRepository;", "modifier": "@Autowired\n    private", "type": "FirmwareFileRepository", "declarator": "firmwareFileRepository", "var_name": "firmwareFileRepository"}, {"original_string": "@Autowired\n    private ManufacturerRepository manufacturerRepository;", "modifier": "@Autowired\n    private", "type": "ManufacturerRepository", "declarator": "manufacturerRepository", "var_name": "manufacturerRepository"}, {"original_string": "@Autowired\n    private SsldPendingFirmwareUpdateRepository ssldPendingFirmwareUpdateRepository;", "modifier": "@Autowired\n    private", "type": "SsldPendingFirmwareUpdateRepository", "declarator": "ssldPendingFirmwareUpdateRepository", "var_name": "ssldPendingFirmwareUpdateRepository"}, {"original_string": "@Value(\"${ssld.pending.firmware.update.get.firmware.version.delay}\")\n    private Long getFirmwareVersionDelay;", "modifier": "@Value(\"${ssld.pending.firmware.update.get.firmware.version.delay}\")\n    private", "type": "Long", "declarator": "getFirmwareVersionDelay", "var_name": "getFirmwareVersionDelay"}], "methods": [{"identifier": "FirmwareManagementService", "parameters": "()", "modifiers": "public", "return": "", "signature": " FirmwareManagementService()", "full_signature": "public  FirmwareManagementService()", "class_method_signature": "FirmwareManagementService.FirmwareManagementService()", "testcase": false, "constructor": true}, {"identifier": "updateFirmware", "parameters": "(final CorrelationIds ids,\n            final FirmwareUpdateMessageDataContainer firmwareUpdateMessageDataContainer, final Long scheduleTime,\n            final String messageType, final int messagePriority)", "modifiers": "public", "return": "void", "signature": "void updateFirmware(final CorrelationIds ids,\n            final FirmwareUpdateMessageDataContainer firmwareUpdateMessageDataContainer, final Long scheduleTime,\n            final String messageType, final int messagePriority)", "full_signature": "public void updateFirmware(final CorrelationIds ids,\n            final FirmwareUpdateMessageDataContainer firmwareUpdateMessageDataContainer, final Long scheduleTime,\n            final String messageType, final int messagePriority)", "class_method_signature": "FirmwareManagementService.updateFirmware(final CorrelationIds ids,\n            final FirmwareUpdateMessageDataContainer firmwareUpdateMessageDataContainer, final Long scheduleTime,\n            final String messageType, final int messagePriority)", "testcase": false, "constructor": false}, {"identifier": "createSsldPendingFirmwareUpdateRecord", "parameters": "(final CorrelationIds ids, final String firmwareUrl)", "modifiers": "private", "return": "void", "signature": "void createSsldPendingFirmwareUpdateRecord(final CorrelationIds ids, final String firmwareUrl)", "full_signature": "private void createSsldPendingFirmwareUpdateRecord(final CorrelationIds ids, final String firmwareUrl)", "class_method_signature": "FirmwareManagementService.createSsldPendingFirmwareUpdateRecord(final CorrelationIds ids, final String firmwareUrl)", "testcase": false, "constructor": false}, {"identifier": "getFirmwareFilename", "parameters": "(final String firmwareUrl)", "modifiers": "private static", "return": "String", "signature": "String getFirmwareFilename(final String firmwareUrl)", "full_signature": "private static String getFirmwareFilename(final String firmwareUrl)", "class_method_signature": "FirmwareManagementService.getFirmwareFilename(final String firmwareUrl)", "testcase": false, "constructor": false}, {"identifier": "handleSsldPendingFirmwareUpdate", "parameters": "(final String deviceIdentification)", "modifiers": "public", "return": "void", "signature": "void handleSsldPendingFirmwareUpdate(final String deviceIdentification)", "full_signature": "public void handleSsldPendingFirmwareUpdate(final String deviceIdentification)", "class_method_signature": "FirmwareManagementService.handleSsldPendingFirmwareUpdate(final String deviceIdentification)", "testcase": false, "constructor": false}, {"identifier": "getMostRecentSsldPendingFirmwareUpdate", "parameters": "(\n            final List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates)", "modifiers": "private", "return": "Optional<SsldPendingFirmwareUpdate>", "signature": "Optional<SsldPendingFirmwareUpdate> getMostRecentSsldPendingFirmwareUpdate(\n            final List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates)", "full_signature": "private Optional<SsldPendingFirmwareUpdate> getMostRecentSsldPendingFirmwareUpdate(\n            final List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates)", "class_method_signature": "FirmwareManagementService.getMostRecentSsldPendingFirmwareUpdate(\n            final List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates)", "testcase": false, "constructor": false}, {"identifier": "deleteOutdatedSsldPendingFirmwareUpdates", "parameters": "(final List<SsldPendingFirmwareUpdate> updatesToDelete,\n            final SsldPendingFirmwareUpdate notToBeDeleted)", "modifiers": "private", "return": "void", "signature": "void deleteOutdatedSsldPendingFirmwareUpdates(final List<SsldPendingFirmwareUpdate> updatesToDelete,\n            final SsldPendingFirmwareUpdate notToBeDeleted)", "full_signature": "private void deleteOutdatedSsldPendingFirmwareUpdates(final List<SsldPendingFirmwareUpdate> updatesToDelete,\n            final SsldPendingFirmwareUpdate notToBeDeleted)", "class_method_signature": "FirmwareManagementService.deleteOutdatedSsldPendingFirmwareUpdates(final List<SsldPendingFirmwareUpdate> updatesToDelete,\n            final SsldPendingFirmwareUpdate notToBeDeleted)", "testcase": false, "constructor": false}, {"identifier": "getFirmwareVersion", "parameters": "(@Identification final String organisationIdentification,\n            @Identification final String deviceIdentification, final String correlationUid, final String messageType,\n            final int messagePriority)", "modifiers": "public", "return": "void", "signature": "void getFirmwareVersion(@Identification final String organisationIdentification,\n            @Identification final String deviceIdentification, final String correlationUid, final String messageType,\n            final int messagePriority)", "full_signature": "public void getFirmwareVersion(@Identification final String organisationIdentification,\n            @Identification final String deviceIdentification, final String correlationUid, final String messageType,\n            final int messagePriority)", "class_method_signature": "FirmwareManagementService.getFirmwareVersion(@Identification final String organisationIdentification,\n            @Identification final String deviceIdentification, final String correlationUid, final String messageType,\n            final int messagePriority)", "testcase": false, "constructor": false}, {"identifier": "getFirmwareVersion", "parameters": "(@Identification final String organisationIdentification,\n            @Identification final String deviceIdentification, final String correlationUid, final String messageType,\n            final int messagePriority, final Long delay)", "modifiers": "public", "return": "void", "signature": "void getFirmwareVersion(@Identification final String organisationIdentification,\n            @Identification final String deviceIdentification, final String correlationUid, final String messageType,\n            final int messagePriority, final Long delay)", "full_signature": "public void getFirmwareVersion(@Identification final String organisationIdentification,\n            @Identification final String deviceIdentification, final String correlationUid, final String messageType,\n            final int messagePriority, final Long delay)", "class_method_signature": "FirmwareManagementService.getFirmwareVersion(@Identification final String organisationIdentification,\n            @Identification final String deviceIdentification, final String correlationUid, final String messageType,\n            final int messagePriority, final Long delay)", "testcase": false, "constructor": false}, {"identifier": "handleGetFirmwareVersionResponse", "parameters": "(final List<FirmwareVersionDto> firmwareVersionsDto,\n            final CorrelationIds ids, final String messageType, final int messagePriority,\n            final ResponseMessageResultType deviceResult, final OsgpException exception)", "modifiers": "public", "return": "void", "signature": "void handleGetFirmwareVersionResponse(final List<FirmwareVersionDto> firmwareVersionsDto,\n            final CorrelationIds ids, final String messageType, final int messagePriority,\n            final ResponseMessageResultType deviceResult, final OsgpException exception)", "full_signature": "public void handleGetFirmwareVersionResponse(final List<FirmwareVersionDto> firmwareVersionsDto,\n            final CorrelationIds ids, final String messageType, final int messagePriority,\n            final ResponseMessageResultType deviceResult, final OsgpException exception)", "class_method_signature": "FirmwareManagementService.handleGetFirmwareVersionResponse(final List<FirmwareVersionDto> firmwareVersionsDto,\n            final CorrelationIds ids, final String messageType, final int messagePriority,\n            final ResponseMessageResultType deviceResult, final OsgpException exception)", "testcase": false, "constructor": false}, {"identifier": "checkSsldPendingFirmwareUpdate", "parameters": "(final CorrelationIds ids, final List<FirmwareVersion> firmwareVersions)", "modifiers": "", "return": "boolean", "signature": "boolean checkSsldPendingFirmwareUpdate(final CorrelationIds ids, final List<FirmwareVersion> firmwareVersions)", "full_signature": " boolean checkSsldPendingFirmwareUpdate(final CorrelationIds ids, final List<FirmwareVersion> firmwareVersions)", "class_method_signature": "FirmwareManagementService.checkSsldPendingFirmwareUpdate(final CorrelationIds ids, final List<FirmwareVersion> firmwareVersions)", "testcase": false, "constructor": false}, {"identifier": "checkFirmwareHistory", "parameters": "(final String deviceId,\n            final List<org.opensmartgridplatform.domain.core.valueobjects.FirmwareVersion> firmwareVersions)", "modifiers": "private", "return": "void", "signature": "void checkFirmwareHistory(final String deviceId,\n            final List<org.opensmartgridplatform.domain.core.valueobjects.FirmwareVersion> firmwareVersions)", "full_signature": "private void checkFirmwareHistory(final String deviceId,\n            final List<org.opensmartgridplatform.domain.core.valueobjects.FirmwareVersion> firmwareVersions)", "class_method_signature": "FirmwareManagementService.checkFirmwareHistory(final String deviceId,\n            final List<org.opensmartgridplatform.domain.core.valueobjects.FirmwareVersion> firmwareVersions)", "testcase": false, "constructor": false}, {"identifier": "checkFirmwareHistoryForVersion", "parameters": "(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions)", "modifiers": "public", "return": "List<FirmwareVersion>", "signature": "List<FirmwareVersion> checkFirmwareHistoryForVersion(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions)", "full_signature": "public List<FirmwareVersion> checkFirmwareHistoryForVersion(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions)", "class_method_signature": "FirmwareManagementService.checkFirmwareHistoryForVersion(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions)", "testcase": false, "constructor": false}, {"identifier": "checkFirmwareHistoryForModuleVersionsNotCurrentlyInstalled", "parameters": "(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions)", "modifiers": "private", "return": "List<FirmwareVersion>", "signature": "List<FirmwareVersion> checkFirmwareHistoryForModuleVersionsNotCurrentlyInstalled(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions)", "full_signature": "private List<FirmwareVersion> checkFirmwareHistoryForModuleVersionsNotCurrentlyInstalled(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions)", "class_method_signature": "FirmwareManagementService.checkFirmwareHistoryForModuleVersionsNotCurrentlyInstalled(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions)", "testcase": false, "constructor": false}, {"identifier": "tryToAddDeviceFirmwareFile", "parameters": "(final String deviceIdentification,\n            final List<FirmwareVersion> firmwareVersionsNotCurrent)", "modifiers": "public", "return": "void", "signature": "void tryToAddDeviceFirmwareFile(final String deviceIdentification,\n            final List<FirmwareVersion> firmwareVersionsNotCurrent)", "full_signature": "public void tryToAddDeviceFirmwareFile(final String deviceIdentification,\n            final List<FirmwareVersion> firmwareVersionsNotCurrent)", "class_method_signature": "FirmwareManagementService.tryToAddDeviceFirmwareFile(final String deviceIdentification,\n            final List<FirmwareVersion> firmwareVersionsNotCurrent)", "testcase": false, "constructor": false}, {"identifier": "firmwareFileContainsAllOfTheseModules", "parameters": "(final FirmwareFile file,\n            final List<FirmwareVersion> firmwareVersions)", "modifiers": "private static", "return": "boolean", "signature": "boolean firmwareFileContainsAllOfTheseModules(final FirmwareFile file,\n            final List<FirmwareVersion> firmwareVersions)", "full_signature": "private static boolean firmwareFileContainsAllOfTheseModules(final FirmwareFile file,\n            final List<FirmwareVersion> firmwareVersions)", "class_method_signature": "FirmwareManagementService.firmwareFileContainsAllOfTheseModules(final FirmwareFile file,\n            final List<FirmwareVersion> firmwareVersions)", "testcase": false, "constructor": false}, {"identifier": "createFirmwareModule", "parameters": "(final FirmwareVersion firmwareVersion)", "modifiers": "private static", "return": "FirmwareModule", "signature": "FirmwareModule createFirmwareModule(final FirmwareVersion firmwareVersion)", "full_signature": "private static FirmwareModule createFirmwareModule(final FirmwareVersion firmwareVersion)", "class_method_signature": "FirmwareManagementService.createFirmwareModule(final FirmwareVersion firmwareVersion)", "testcase": false, "constructor": false}, {"identifier": "getAvailableFirmwareFilesForDeviceModel", "parameters": "(final DeviceModel deviceModel)", "modifiers": "private", "return": "List<FirmwareFile>", "signature": "List<FirmwareFile> getAvailableFirmwareFilesForDeviceModel(final DeviceModel deviceModel)", "full_signature": "private List<FirmwareFile> getAvailableFirmwareFilesForDeviceModel(final DeviceModel deviceModel)", "class_method_signature": "FirmwareManagementService.getAvailableFirmwareFilesForDeviceModel(final DeviceModel deviceModel)", "testcase": false, "constructor": false}, {"identifier": "findAllFirmwareFiles", "parameters": "(final String manufacturer, final String modelCode)", "modifiers": "private", "return": "List<FirmwareFile>", "signature": "List<FirmwareFile> findAllFirmwareFiles(final String manufacturer, final String modelCode)", "full_signature": "private List<FirmwareFile> findAllFirmwareFiles(final String manufacturer, final String modelCode)", "class_method_signature": "FirmwareManagementService.findAllFirmwareFiles(final String manufacturer, final String modelCode)", "testcase": false, "constructor": false}, {"identifier": "switchFirmware", "parameters": "(final String organisationIdentification, final String deviceIdentification,\n            final String correlationUid, final String messageType, final int messagePriority, final String version)", "modifiers": "public", "return": "void", "signature": "void switchFirmware(final String organisationIdentification, final String deviceIdentification,\n            final String correlationUid, final String messageType, final int messagePriority, final String version)", "full_signature": "public void switchFirmware(final String organisationIdentification, final String deviceIdentification,\n            final String correlationUid, final String messageType, final int messagePriority, final String version)", "class_method_signature": "FirmwareManagementService.switchFirmware(final String organisationIdentification, final String deviceIdentification,\n            final String correlationUid, final String messageType, final int messagePriority, final String version)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java"}, "focal_method": {"identifier": "checkFirmwareHistoryForVersion", "parameters": "(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions)", "modifiers": "public", "return": "List<FirmwareVersion>", "body": "public List<FirmwareVersion> checkFirmwareHistoryForVersion(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions) {\n\n        if (firmwareVersions.isEmpty()) {\n            return firmwareVersions;\n        }\n        // copy input parameter\n        final List<FirmwareVersion> firmwareVersionsToCheck = new ArrayList<>(firmwareVersions);\n\n        // get history\n        final Device device = this.deviceRepository.findByDeviceIdentification(deviceId);\n        final List<DeviceFirmwareFile> deviceFirmwareFiles = this.deviceFirmwareFileRepository\n                .findByDeviceOrderByInstallationDateAsc(device);\n        final List<FirmwareVersion> firmwareVersionsInHistory = deviceFirmwareFiles.stream()\n                .map(d -> d.getFirmwareFile().getModuleVersions().entrySet())\n                .flatMap(Collection::stream)\n                .map(e -> new FirmwareVersion(FirmwareModuleType.forDescription(e.getKey().getDescription()),\n                        e.getValue()))\n                .collect(Collectors.toList());\n\n        // remove the history versions\n        firmwareVersionsToCheck.removeAll(firmwareVersionsInHistory);\n\n        return firmwareVersionsToCheck;\n    }", "signature": "List<FirmwareVersion> checkFirmwareHistoryForVersion(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions)", "full_signature": "public List<FirmwareVersion> checkFirmwareHistoryForVersion(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions)", "class_method_signature": "FirmwareManagementService.checkFirmwareHistoryForVersion(final String deviceId,\n            final List<FirmwareVersion> firmwareVersions)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "findByDeviceIdentification", "findByDeviceOrderByInstallationDateAsc", "collect", "map", "flatMap", "map", "stream", "entrySet", "getModuleVersions", "getFirmwareFile", "forDescription", "getDescription", "getKey", "getValue", "toList", "removeAll"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}