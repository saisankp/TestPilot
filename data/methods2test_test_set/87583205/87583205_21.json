{"test_class": {"identifier": "QoSControlConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QoSControlConnection controlConnection;", "modifier": "private", "type": "QoSControlConnection", "declarator": "controlConnection", "var_name": "controlConnection"}, {"original_string": "private RMBTClient clientHolder;", "modifier": "private", "type": "RMBTClient", "declarator": "clientHolder", "var_name": "clientHolder"}, {"original_string": "private RMBTTestParameter testParameter;", "modifier": "private", "type": "RMBTTestParameter", "declarator": "testParameter", "var_name": "testParameter"}, {"original_string": "private RMBTTestParameter sslTestParameter;", "modifier": "private", "type": "RMBTTestParameter", "declarator": "sslTestParameter", "var_name": "sslTestParameter"}, {"original_string": "private InetAddress loopbackAddress;", "modifier": "private", "type": "InetAddress", "declarator": "loopbackAddress", "var_name": "loopbackAddress"}, {"original_string": "private OutputStream testOutputStream;", "modifier": "private", "type": "OutputStream", "declarator": "testOutputStream", "var_name": "testOutputStream"}, {"original_string": "private int tcpCallbackCount;", "modifier": "private", "type": "int", "declarator": "tcpCallbackCount", "var_name": "tcpCallbackCount"}, {"original_string": "private String tcpCallbackRequest, tcpCallbackResponse;", "modifier": "private", "type": "String", "declarator": "tcpCallbackRequest", "var_name": "tcpCallbackRequest"}, {"original_string": "private String dnsCallbackRequest, dnsCallbackResponse;", "modifier": "private", "type": "String", "declarator": "dnsCallbackRequest", "var_name": "dnsCallbackRequest"}], "file": "RMBTClient/src/test/java/at/rtr/rmbt/client/v2/task/QoSControlConnectionTest.java"}, "test_case": {"identifier": "basicConnectionProtocolErrorTest", "parameters": "(@Mocked final Socket socket, @Mocked final InetAddress inetAddress,\n                                     @Mocked final BufferedReader bufferedReader)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void basicConnectionProtocolErrorTest (@Mocked final Socket socket, @Mocked final InetAddress inetAddress,\n                                     @Mocked final BufferedReader bufferedReader) throws Exception {\n\n        new Expectations() {{\n\n            InetAddress.getByName(anyString);\n            result = loopbackAddress;\n\n            bufferedReader.readLine();\n            result = \"NOT A PROTOCOL\";\n\n            socket.getOutputStream();\n            times = 1;\n            result = testOutputStream;\n\n        }};\n\n\n        controlConnection = new QoSControlConnection(clientHolder, sslTestParameter);\n        controlConnection.connect();\n        assertNull(\"Control socket is not null despite protocol error\", controlConnection.controlSocket);\n        assertFalse(\"QoSControlConnection reports as running\", controlConnection.isRunning.get());\n        assertTrue(\"QoSControlConnection does not show connection issue\", controlConnection.couldNotConnect.get());\n\n    }", "signature": "void basicConnectionProtocolErrorTest(@Mocked final Socket socket, @Mocked final InetAddress inetAddress,\n                                     @Mocked final BufferedReader bufferedReader)", "full_signature": "@Test public void basicConnectionProtocolErrorTest(@Mocked final Socket socket, @Mocked final InetAddress inetAddress,\n                                     @Mocked final BufferedReader bufferedReader)", "class_method_signature": "QoSControlConnectionTest.basicConnectionProtocolErrorTest(@Mocked final Socket socket, @Mocked final InetAddress inetAddress,\n                                     @Mocked final BufferedReader bufferedReader)", "testcase": true, "constructor": false, "invocations": ["getByName", "readLine", "getOutputStream", "connect", "assertNull", "assertFalse", "get", "assertTrue", "get"]}, "focal_class": {"identifier": "QoSControlConnection", "superclass": "extends AbstractRMBTTest", "interfaces": "implements Runnable", "fields": [{"original_string": "public final static Pattern ID_REGEX_PATTERN = Pattern.compile(\"\\\\+ID([\\\\d]*)\");", "modifier": "public final static", "type": "Pattern", "declarator": "ID_REGEX_PATTERN = Pattern.compile(\"\\\\+ID([\\\\d]*)\")", "var_name": "ID_REGEX_PATTERN"}, {"original_string": "public final AtomicBoolean isRunning = new AtomicBoolean(true);", "modifier": "public final", "type": "AtomicBoolean", "declarator": "isRunning = new AtomicBoolean(true)", "var_name": "isRunning"}, {"original_string": "public final AtomicBoolean couldNotConnect = new AtomicBoolean(false);", "modifier": "public final", "type": "AtomicBoolean", "declarator": "couldNotConnect = new AtomicBoolean(false)", "var_name": "couldNotConnect"}, {"original_string": "private final ConcurrentHashMap<Integer, ControlConnectionResponseCallbackHolder> requestMap = \n\t\t\tnew ConcurrentHashMap<Integer, ControlConnectionResponseCallbackHolder>();", "modifier": "private final", "type": "ConcurrentHashMap<Integer, ControlConnectionResponseCallbackHolder>", "declarator": "requestMap = \n\t\t\tnew ConcurrentHashMap<Integer, ControlConnectionResponseCallbackHolder>()", "var_name": "requestMap"}, {"original_string": "private final TreeSet<Integer> concurrencyGroupSet = new TreeSet<Integer>();", "modifier": "private final", "type": "TreeSet<Integer>", "declarator": "concurrencyGroupSet = new TreeSet<Integer>()", "var_name": "concurrencyGroupSet"}, {"original_string": "protected Socket controlSocket;", "modifier": "protected", "type": "Socket", "declarator": "controlSocket", "var_name": "controlSocket"}], "methods": [{"identifier": "QoSControlConnection", "parameters": "(RMBTClient client, RMBTTestParameter params)", "modifiers": "public", "return": "", "signature": " QoSControlConnection(RMBTClient client, RMBTTestParameter params)", "full_signature": "public  QoSControlConnection(RMBTClient client, RMBTTestParameter params)", "class_method_signature": "QoSControlConnection.QoSControlConnection(RMBTClient client, RMBTTestParameter params)", "testcase": false, "constructor": true}, {"identifier": "sendTaskCommand", "parameters": "(AbstractQoSTask qosTask, String command, ControlConnectionResponseCallback callback)", "modifiers": "public", "return": "void", "signature": "void sendTaskCommand(AbstractQoSTask qosTask, String command, ControlConnectionResponseCallback callback)", "full_signature": "public void sendTaskCommand(AbstractQoSTask qosTask, String command, ControlConnectionResponseCallback callback)", "class_method_signature": "QoSControlConnection.sendTaskCommand(AbstractQoSTask qosTask, String command, ControlConnectionResponseCallback callback)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "QoSControlConnection.run()", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void connect()", "full_signature": "public void connect()", "class_method_signature": "QoSControlConnection.connect()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "QoSControlConnection.close()", "testcase": false, "constructor": false}, {"identifier": "getConcurrencyGroupSet", "parameters": "()", "modifiers": "public", "return": "TreeSet<Integer>", "signature": "TreeSet<Integer> getConcurrencyGroupSet()", "full_signature": "public TreeSet<Integer> getConcurrencyGroupSet()", "class_method_signature": "QoSControlConnection.getConcurrencyGroupSet()", "testcase": false, "constructor": false}], "file": "RMBTClient/src/main/java/at/rtr/rmbt/client/v2/task/QoSControlConnection.java"}, "focal_method": {"identifier": "connect", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void connect() throws Exception {\n\t\tisRunning.set(true);\n\t\ttry {\n\t\t\tcontrolSocket = connect(null, InetAddress.getByName(params.getHost()), params.getPort(), \n\t\t\t\tAbstractQoSTask.QOS_SERVER_PROTOCOL_VERSION, \"ACCEPT\", params.isEncryption(), AbstractQoSTask.CONTROL_CONNECTION_TIMEOUT);\n\t\t    if (controlSocket == null) {\n\t\t        isRunning.set(false);\n\t\t        couldNotConnect.set(true);\n            }\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tisRunning.set(false);\n\t\t\tcouldNotConnect.set(true);\n\t\t\tthrow e;\n\t\t}\n\t}", "signature": "void connect()", "full_signature": "public void connect()", "class_method_signature": "QoSControlConnection.connect()", "testcase": false, "constructor": false, "invocations": ["set", "connect", "getByName", "getHost", "getPort", "isEncryption", "set", "set", "set", "set"]}, "repository": {"repo_id": 87583205, "url": "https://github.com/rtr-nettest/open-rmbt", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 15, "size": 21100, "license": "licensed"}}