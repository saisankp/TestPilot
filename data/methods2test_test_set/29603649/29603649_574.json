{"test_class": {"identifier": "StubConfigurationAccessTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_DEPTH = 10;", "modifier": "private static final", "type": "int", "declarator": "MAX_DEPTH = 10", "var_name": "MAX_DEPTH"}, {"original_string": "@Mock\n    private PropertyHolder propertyHolder;", "modifier": "@Mock\n    private", "type": "PropertyHolder", "declarator": "propertyHolder", "var_name": "propertyHolder"}, {"original_string": "@Mock\n    private StubResourcePathProvider stubResourcePathProvider;", "modifier": "@Mock\n    private", "type": "StubResourcePathProvider", "declarator": "stubResourcePathProvider", "var_name": "stubResourcePathProvider"}, {"original_string": "@Mock\n    private ClassNameMapper classNameMapper;", "modifier": "@Mock\n    private", "type": "ClassNameMapper", "declarator": "classNameMapper", "var_name": "classNameMapper"}, {"original_string": "@InjectMocks\n    private StubConfigurationAccess underTest;", "modifier": "@InjectMocks\n    private", "type": "StubConfigurationAccess", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/configuration/StubConfigurationAccessTest.java"}, "test_case": {"identifier": "testOnApplicationEventShouldSetSequenceHandlerPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnApplicationEventShouldSetSequenceHandlerPath() {\n        //GIVEN\n        String sequenceHandlerPath = \"sequenceHandlerPath\";\n        given(propertyHolder.get(\"stub.sequence.handler.path\")).willReturn(sequenceHandlerPath);\n        //WHEN\n        underTest.setProperties();\n        //THEN\n        verify(stubResourcePathProvider).setSequenceHandlerPath(sequenceHandlerPath);\n    }", "signature": "void testOnApplicationEventShouldSetSequenceHandlerPath()", "full_signature": "@Test public void testOnApplicationEventShouldSetSequenceHandlerPath()", "class_method_signature": "StubConfigurationAccessTest.testOnApplicationEventShouldSetSequenceHandlerPath()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "get", "setProperties", "setSequenceHandlerPath", "verify"]}, "focal_class": {"identifier": "StubConfigurationAccess", "superclass": "", "interfaces": "implements ConfigurationAccessBase", "fields": [{"original_string": "private PropertyDto properties;", "modifier": "private", "type": "PropertyDto", "declarator": "properties", "var_name": "properties"}, {"original_string": "@Autowired\n    private PropertyHolder propertyHolder;", "modifier": "@Autowired\n    private", "type": "PropertyHolder", "declarator": "propertyHolder", "var_name": "propertyHolder"}, {"original_string": "@Autowired\n    private StubResourcePathProvider stubResourcePathProvider;", "modifier": "@Autowired\n    private", "type": "StubResourcePathProvider", "declarator": "stubResourcePathProvider", "var_name": "stubResourcePathProvider"}, {"original_string": "@Autowired\n    private ClassNameMapper classNameMapper;", "modifier": "@Autowired\n    private", "type": "ClassNameMapper", "declarator": "classNameMapper", "var_name": "classNameMapper"}], "methods": [{"identifier": "loadProperties", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void loadProperties()", "full_signature": "@Override public void loadProperties()", "class_method_signature": "StubConfigurationAccess.loadProperties()", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "public", "return": "PropertyDto", "signature": "PropertyDto getProperties()", "full_signature": "public PropertyDto getProperties()", "class_method_signature": "StubConfigurationAccess.getProperties()", "testcase": false, "constructor": false}, {"identifier": "setProperties", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setProperties()", "full_signature": "public void setProperties()", "class_method_signature": "StubConfigurationAccess.setProperties()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/configuration/StubConfigurationAccess.java"}, "focal_method": {"identifier": "setProperties", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void setProperties() {\n        String templatePath = propertyHolder.get(\"stub.template.path\");\n        String conditionCheckerPath = propertyHolder.get(\"stub.condition.checker.path\");\n        String responseFormatterPath = propertyHolder.get(\"stub.response.formatter.path\");\n        String interceptorPath = propertyHolder.get(\"stub.interceptor.path\");\n        String jarPath = propertyHolder.get(\"stub.jar.path\");\n        String cachePath = propertyHolder.get(\"stub.descriptors.cache.path\");\n        String sequenceHandlerPath = propertyHolder.get(\"stub.sequence.handler.path\");\n        stubResourcePathProvider.setTemplatesPath(templatePath);\n        stubResourcePathProvider.setConditionCheckerPath(conditionCheckerPath);\n        stubResourcePathProvider.setResponseFormatterPath(responseFormatterPath);\n        stubResourcePathProvider.setInterceptorPath(interceptorPath);\n        stubResourcePathProvider.setJarPath(jarPath);\n        stubResourcePathProvider.setCachePath(cachePath);\n        stubResourcePathProvider.setSequenceHandlerPath(sequenceHandlerPath);\n        classNameMapper.initialize(stubResourcePathProvider.getEveryPathAsString());\n    }", "signature": "void setProperties()", "full_signature": "public void setProperties()", "class_method_signature": "StubConfigurationAccess.setProperties()", "testcase": false, "constructor": false, "invocations": ["get", "get", "get", "get", "get", "get", "get", "setTemplatesPath", "setConditionCheckerPath", "setResponseFormatterPath", "setInterceptorPath", "setJarPath", "setCachePath", "setSequenceHandlerPath", "initialize", "getEveryPathAsString"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}