{"test_class": {"identifier": "SessionLoginResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock LdapAuthenticator ldapAuthenticator;", "modifier": "@Mock", "type": "LdapAuthenticator", "declarator": "ldapAuthenticator", "var_name": "ldapAuthenticator"}, {"original_string": "@Inject ObjectMapper mapper;", "modifier": "@Inject", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Inject GCMEncryptor GCMEncryptor;", "modifier": "@Inject", "type": "GCMEncryptor", "declarator": "GCMEncryptor", "var_name": "GCMEncryptor"}, {"original_string": "@Inject @SessionCookie CookieConfig sessionCookieConfig;", "modifier": "@Inject @SessionCookie", "type": "CookieConfig", "declarator": "sessionCookieConfig", "var_name": "sessionCookieConfig"}, {"original_string": "SessionLoginResource sessionLoginResource;", "modifier": "", "type": "SessionLoginResource", "declarator": "sessionLoginResource", "var_name": "sessionLoginResource"}, {"original_string": "CookieAuthenticator cookieAuthenticator;", "modifier": "", "type": "CookieAuthenticator", "declarator": "cookieAuthenticator", "var_name": "cookieAuthenticator"}, {"original_string": "BasicCredentials goodCredentials = new BasicCredentials(\"good\",\"credentials\");", "modifier": "", "type": "BasicCredentials", "declarator": "goodCredentials = new BasicCredentials(\"good\",\"credentials\")", "var_name": "goodCredentials"}, {"original_string": "BasicCredentials badCredentials = new BasicCredentials(\"bad\",\"credentials\");", "modifier": "", "type": "BasicCredentials", "declarator": "badCredentials = new BasicCredentials(\"bad\",\"credentials\")", "var_name": "badCredentials"}], "file": "server/src/test/java/keywhiz/service/resources/admin/SessionLoginResourceTest.java"}, "test_case": {"identifier": "badCredentialsThrowUnauthorized", "parameters": "()", "modifiers": "@Test(expected = NotAuthorizedException.class) public", "return": "void", "body": "@Test(expected = NotAuthorizedException.class)\n  public void badCredentialsThrowUnauthorized() throws Exception {\n    when(ldapAuthenticator.authenticate(badCredentials)).thenReturn(Optional.empty());\n\n    sessionLoginResource.login(LoginRequest.from(\"bad\", \"credentials\".toCharArray()));\n  }", "signature": "void badCredentialsThrowUnauthorized()", "full_signature": "@Test(expected = NotAuthorizedException.class) public void badCredentialsThrowUnauthorized()", "class_method_signature": "SessionLoginResourceTest.badCredentialsThrowUnauthorized()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "authenticate", "empty", "login", "from", "toCharArray"]}, "focal_class": {"identifier": "SessionLoginResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SessionLoginResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SessionLoginResource.class)", "var_name": "logger"}, {"original_string": "private final Authenticator<BasicCredentials, User> userAuthenticator;", "modifier": "private final", "type": "Authenticator<BasicCredentials, User>", "declarator": "userAuthenticator", "var_name": "userAuthenticator"}, {"original_string": "private final AuthenticatedEncryptedCookieFactory cookieFactory;", "modifier": "private final", "type": "AuthenticatedEncryptedCookieFactory", "declarator": "cookieFactory", "var_name": "cookieFactory"}], "methods": [{"identifier": "SessionLoginResource", "parameters": "(@Readonly Authenticator<BasicCredentials, User> userAuthenticator,\n      AuthenticatedEncryptedCookieFactory cookieFactory)", "modifiers": "@Inject public", "return": "", "signature": " SessionLoginResource(@Readonly Authenticator<BasicCredentials, User> userAuthenticator,\n      AuthenticatedEncryptedCookieFactory cookieFactory)", "full_signature": "@Inject public  SessionLoginResource(@Readonly Authenticator<BasicCredentials, User> userAuthenticator,\n      AuthenticatedEncryptedCookieFactory cookieFactory)", "class_method_signature": "SessionLoginResource.SessionLoginResource(@Readonly Authenticator<BasicCredentials, User> userAuthenticator,\n      AuthenticatedEncryptedCookieFactory cookieFactory)", "testcase": false, "constructor": true}, {"identifier": "login", "parameters": "(@Valid LoginRequest request)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public", "return": "Response", "signature": "Response login(@Valid LoginRequest request)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public Response login(@Valid LoginRequest request)", "class_method_signature": "SessionLoginResource.login(@Valid LoginRequest request)", "testcase": false, "constructor": false}, {"identifier": "cookiesForUser", "parameters": "(User user)", "modifiers": "public", "return": "ImmutableList<NewCookie>", "signature": "ImmutableList<NewCookie> cookiesForUser(User user)", "full_signature": "public ImmutableList<NewCookie> cookiesForUser(User user)", "class_method_signature": "SessionLoginResource.cookiesForUser(User user)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/admin/SessionLoginResource.java"}, "focal_method": {"identifier": "login", "parameters": "(@Valid LoginRequest request)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public", "return": "Response", "body": "@Timed @ExceptionMetered\n  @POST\n  @Consumes(APPLICATION_JSON)\n  @Produces(APPLICATION_JSON)\n  public Response login(@Valid LoginRequest request) {\n\n    String username = request.username();\n    String password = String.copyValueOf(request.password());\n\n    Optional<User> optionalUser = Optional.empty();\n    try {\n      optionalUser = userAuthenticator.authenticate(new BasicCredentials(username, password));\n    } catch (AuthenticationException e) {\n      logger.warn(\"User authenticator threw something weird.\", e);\n    }\n\n    if (!optionalUser.isPresent()) {\n      logger.info(\"User authentication failed at login for {}\", username);\n      throw new NotAuthorizedException(\"\");\n    }\n\n    logger.info(\"User logged in: {}\", username);\n\n    Response.ResponseBuilder response = Response.ok();\n    cookiesForUser(optionalUser.get())\n        .forEach(response::cookie);\n    return response.build();\n  }", "signature": "Response login(@Valid LoginRequest request)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public Response login(@Valid LoginRequest request)", "class_method_signature": "SessionLoginResource.login(@Valid LoginRequest request)", "testcase": false, "constructor": false, "invocations": ["username", "copyValueOf", "password", "empty", "authenticate", "warn", "isPresent", "info", "info", "ok", "forEach", "cookiesForUser", "get", "build"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}