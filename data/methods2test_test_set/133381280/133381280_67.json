{"test_class": {"identifier": "ReScheduleSupportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "int                            phase         = 0;", "modifier": "", "type": "int", "declarator": "phase         = 0", "var_name": "phase"}, {"original_string": "AtomicInteger                  phase1Counter = new AtomicInteger(0);", "modifier": "", "type": "AtomicInteger", "declarator": "phase1Counter = new AtomicInteger(0)", "var_name": "phase1Counter"}, {"original_string": "AtomicInteger                  phase2Counter = new AtomicInteger(0);", "modifier": "", "type": "AtomicInteger", "declarator": "phase2Counter = new AtomicInteger(0)", "var_name": "phase2Counter"}, {"original_string": "Function<MetricFilter, Object> function      = new Function<MetricFilter, Object>() {\n                                                     @Override\n                                                     public Object apply(MetricFilter o) {\n                                                         if (phase == 0) {\n                                                             System.out.println(\"11111\");\n                                                             phase1Counter.incrementAndGet();\n                                                             return null;//phase1\n                                                         }\n                                                         //phase2\n                                                         System.out.println(\"222\");\n                                                         phase2Counter.incrementAndGet();\n                                                         return null;\n                                                     }\n                                                 };", "modifier": "", "type": "Function<MetricFilter, Object>", "declarator": "function      = new Function<MetricFilter, Object>() {\n                                                     @Override\n                                                     public Object apply(MetricFilter o) {\n                                                         if (phase == 0) {\n                                                             System.out.println(\"11111\");\n                                                             phase1Counter.incrementAndGet();\n                                                             return null;//phase1\n                                                         }\n                                                         //phase2\n                                                         System.out.println(\"222\");\n                                                         phase2Counter.incrementAndGet();\n                                                         return null;\n                                                     }\n                                                 }", "var_name": "function"}], "file": "client/lookout-reg-server/src/test/java/com/alipay/lookout/remote/report/ReScheduleSupportTest.java"}, "test_case": {"identifier": "testInitDelay", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitDelay() {\n        int stepSize = 60000;//60s ,6\n        long now = 1522675416000l;//min+16s=416\n        long min = now / stepSize * stepSize;\n        //380-544 ,\n        //System.out.println(stepBoundary + \",\" + (stepBoundary + stepSize));\n\n        long val = ReScheduleSupport.getInitialDelay(60000, new ManualClock(now, 1l));\n        Assert.assertEquals(now - min, val);\n        System.out.println(\"=============================too small===================\");\n        now = 1522675385000l;\n        min = now / stepSize * stepSize;\n        System.out.println(min + \",\" + (min + stepSize));\n\n        val = ReScheduleSupport.getInitialDelay(60000, new ManualClock(now, 1l));\n        Assert.assertEquals(now - min + stepSize / 10, val);\n\n        System.out.println(\"=============================too big===================\");\n        now = 1522675440000l - 3000l;\n        min = now / stepSize * stepSize;\n        long max = min + stepSize;\n        System.out.println(min + \",\" + max);\n\n        val = ReScheduleSupport.getInitialDelay(60000, new ManualClock(now, 1l));\n        Assert.assertEquals(stepSize - (max - now + stepSize / 10), val);\n    }", "signature": "void testInitDelay()", "full_signature": "@Test public void testInitDelay()", "class_method_signature": "ReScheduleSupportTest.testInitDelay()", "testcase": true, "constructor": false, "invocations": ["getInitialDelay", "assertEquals", "println", "println", "getInitialDelay", "assertEquals", "println", "println", "getInitialDelay", "assertEquals"]}, "focal_class": {"identifier": "ReScheduleSupport", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger    logger              = LookoutLoggerFactory\n                                                           .getLogger(SchedulerPoller.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger              = LookoutLoggerFactory\n                                                           .getLogger(SchedulerPoller.class)", "var_name": "logger"}, {"original_string": "static final String            THREAD_NAME_SPLITOR = \"-\";", "modifier": "static final", "type": "String", "declarator": "THREAD_NAME_SPLITOR = \"-\"", "var_name": "THREAD_NAME_SPLITOR"}, {"original_string": "private Set<TaskResult>        taskResults;", "modifier": "private", "type": "Set<TaskResult>", "declarator": "taskResults", "var_name": "taskResults"}, {"original_string": "private final ScheduledService scheduler;", "modifier": "private final", "type": "ScheduledService", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final LookoutConfig    config;", "modifier": "private final", "type": "LookoutConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final Clock            clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "ReScheduleSupport", "parameters": "(ScheduledService scheduler, LookoutConfig config, Clock clock)", "modifiers": "public", "return": "", "signature": " ReScheduleSupport(ScheduledService scheduler, LookoutConfig config, Clock clock)", "full_signature": "public  ReScheduleSupport(ScheduledService scheduler, LookoutConfig config, Clock clock)", "class_method_signature": "ReScheduleSupport.ReScheduleSupport(ScheduledService scheduler, LookoutConfig config, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "reschedulePoll", "parameters": "(Function<MetricFilter, Object> function)", "modifiers": "public synchronized", "return": "void", "signature": "void reschedulePoll(Function<MetricFilter, Object> function)", "full_signature": "public synchronized void reschedulePoll(Function<MetricFilter, Object> function)", "class_method_signature": "ReScheduleSupport.reschedulePoll(Function<MetricFilter, Object> function)", "testcase": false, "constructor": false}, {"identifier": "schedulePoll", "parameters": "(final PRIORITY priority, final long stepMillis,\n                                   final MetricFilter metricFilter,\n                                   final Function<MetricFilter, Object> function)", "modifiers": "public", "return": "TaskResult", "signature": "TaskResult schedulePoll(final PRIORITY priority, final long stepMillis,\n                                   final MetricFilter metricFilter,\n                                   final Function<MetricFilter, Object> function)", "full_signature": "public TaskResult schedulePoll(final PRIORITY priority, final long stepMillis,\n                                   final MetricFilter metricFilter,\n                                   final Function<MetricFilter, Object> function)", "class_method_signature": "ReScheduleSupport.schedulePoll(final PRIORITY priority, final long stepMillis,\n                                   final MetricFilter metricFilter,\n                                   final Function<MetricFilter, Object> function)", "testcase": false, "constructor": false}, {"identifier": "getInitialDelay", "parameters": "(long stepSize, Clock clock)", "modifiers": "static", "return": "long", "signature": "long getInitialDelay(long stepSize, Clock clock)", "full_signature": "static long getInitialDelay(long stepSize, Clock clock)", "class_method_signature": "ReScheduleSupport.getInitialDelay(long stepSize, Clock clock)", "testcase": false, "constructor": false}], "file": "client/lookout-reg-server/src/main/java/com/alipay/lookout/remote/report/ReScheduleSupport.java"}, "focal_method": {"identifier": "getInitialDelay", "parameters": "(long stepSize, Clock clock)", "modifiers": "static", "return": "long", "body": "static long getInitialDelay(long stepSize, Clock clock) {\n        long now = clock.wallTime();\n        long stepStart = now / stepSize * stepSize;\n        // 1/10\u7684\u65f6\u95f4\u6bb5\uff0c\u4f5c\u4e3a\u8fc7\u4e8e\u9760\u8fd1\u7684\u5224\u65ad\u4f9d\u636e\n        long offset = stepSize / 10;\n\n        long delay = now - stepStart;\n        if (delay < offset) { //\u5f53\u524d\u65f6\u95f4\u8fc7\u4e8e\u9760\u8fd1\u4f4e\u8fb9\u754c,\u5219\u542f\u52a8\u5ef6\u65f6\u8865\u507f\u4e2a10%\u7684\u7684stepSize\uff1b\n            return delay + offset;\n        } else if (delay > stepSize - offset) {//\u5f53\u524d\u65f6\u95f4\u8fc7\u4e8e\u9760\u8fd1\u9ad8\u8fb9\u754c\uff0c\u90a3\u4e48\u518d\u6536\u7f2910%\u7684stepSize\n            return now - stepStart - offset;\n        } else { //\u5982\u679c\u8ddd\u79bb\u5de6\u53f3\u8fb9\u754c\u8ddd\u79bb\u5408\u9002\n            return delay;\n        }\n    }", "signature": "long getInitialDelay(long stepSize, Clock clock)", "full_signature": "static long getInitialDelay(long stepSize, Clock clock)", "class_method_signature": "ReScheduleSupport.getInitialDelay(long stepSize, Clock clock)", "testcase": false, "constructor": false, "invocations": ["wallTime"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}