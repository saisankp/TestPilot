{"test_class": {"identifier": "HadoopTwitterTokenToolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n\tpublic", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private String hadoopCommand;", "modifier": "private", "type": "String", "declarator": "hadoopCommand", "var_name": "hadoopCommand"}, {"original_string": "private File outputLocation;", "modifier": "private", "type": "File", "declarator": "outputLocation", "var_name": "outputLocation"}, {"original_string": "private File resultsOutputLocation;", "modifier": "private", "type": "File", "declarator": "resultsOutputLocation", "var_name": "resultsOutputLocation"}, {"original_string": "private File stemmedTweets;", "modifier": "private", "type": "File", "declarator": "stemmedTweets", "var_name": "stemmedTweets"}, {"original_string": "private File jsonTweets;", "modifier": "private", "type": "File", "declarator": "jsonTweets", "var_name": "jsonTweets"}, {"original_string": "private File monthLongTweets;", "modifier": "private", "type": "File", "declarator": "monthLongTweets", "var_name": "monthLongTweets"}, {"original_string": "private static final String JSON_TWITTER = \"/org/openimaj/twitter/json_tweets.txt\";", "modifier": "private static final", "type": "String", "declarator": "JSON_TWITTER = \"/org/openimaj/twitter/json_tweets.txt\"", "var_name": "JSON_TWITTER"}, {"original_string": "private static int counter = 0;", "modifier": "private static", "type": "int", "declarator": "counter = 0", "var_name": "counter"}], "file": "hadoop/tools/HadoopTwitterTokenTool/src/test/java/org/openimaj/hadoop/tools/twitter/HadoopTwitterTokenToolTest.java"}, "test_case": {"identifier": "testMultiFileInputOnlyOutput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMultiFileInputOnlyOutput() throws Exception {\n\t\t// Produce one set of processes (no output)\n\t\tString firstOuputLocation = this.outputLocation.getAbsolutePath()\n\t\t\t\t+ \"-first\";\n\t\tString secondOuputLocation = this.outputLocation.getAbsolutePath()\n\t\t\t\t+ \"-second\";\n\t\tString firstResultsOut = resultsOutputLocation.getAbsolutePath()\n\t\t\t\t+ \"-first\";\n\t\tString secondResultsOut = resultsOutputLocation.getAbsolutePath()\n\t\t\t\t+ \"-second\";\n\t\tString commandFirst = String.format(hadoopCommand,\n\t\t\t\tstemmedTweets.getAbsolutePath(), firstOuputLocation,\n\t\t\t\t\"WORD_STATS\", firstResultsOut, \"DFIDF\", \"analysis.stemmed\");\n\t\tString[] args = commandFirst.split(\" \");\n\t\targs = (String[]) ArrayUtils.addAll(args, new String[] { \"-pp\",\n\t\t\t\t\"-m PORTER_STEM\" });\n\t\tHadoopTwitterTokenTool.main(args);\n\t\tString commandSecond = String.format(hadoopCommand,\n\t\t\t\tstemmedTweets.getAbsolutePath(), secondOuputLocation,\n\t\t\t\t\"WORD_STATS\", secondResultsOut, \"DFIDF\", \"analysis.stemmed\");\n\t\targs = commandSecond.split(\" \");\n\t\targs = (String[]) ArrayUtils.addAll(args, new String[] { \"-pp\",\n\t\t\t\t\"-m PORTER_STEM\" });\n\t\tHadoopTwitterTokenTool.main(args);\n\t\thadoopCommand = \"-if %s -om %s -ro %s\";\n\t\tFile inputList = folder\n\t\t\t\t.newFile(\"inputs-testMultiFileInputOnlyOutput.txt\");\n\t\tPrintWriter listWriter = new PrintWriter(new FileWriter(inputList));\n\t\tlistWriter.println(firstOuputLocation);\n\t\tlistWriter.println(secondOuputLocation);\n\t\tlistWriter.flush();\n\t\tlistWriter.close();\n\t\tString command = String.format(hadoopCommand,\n\t\t\t\tinputList.getAbsolutePath(), \"WORD_STATS\",\n\t\t\t\tresultsOutputLocation.getAbsolutePath());\n\t\tHadoopTwitterTokenTool.main(command.split(\" \"));\n\t\tHashMap<String, IndependentPair<Long, Long>> wordLineCounts = WordIndex\n\t\t\t\t.readWordCountLines(resultsOutputLocation.getAbsolutePath());\n\t\tassertTrue(wordLineCounts.get(\".\").firstObject() == 24);\n\t}", "signature": "void testMultiFileInputOnlyOutput()", "full_signature": "@Test public void testMultiFileInputOnlyOutput()", "class_method_signature": "HadoopTwitterTokenToolTest.testMultiFileInputOnlyOutput()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "getAbsolutePath", "getAbsolutePath", "getAbsolutePath", "format", "getAbsolutePath", "split", "addAll", "main", "format", "getAbsolutePath", "split", "addAll", "main", "newFile", "println", "println", "flush", "close", "format", "getAbsolutePath", "getAbsolutePath", "main", "split", "readWordCountLines", "getAbsolutePath", "assertTrue", "firstObject", "get"]}, "focal_class": {"identifier": "HadoopTwitterTokenTool", "superclass": "extends Configured", "interfaces": "implements Tool", "fields": [{"original_string": "private static final String ARGS_KEY = \"twitter.token.args\";", "modifier": "private static final", "type": "String", "declarator": "ARGS_KEY = \"twitter.token.args\"", "var_name": "ARGS_KEY"}, {"original_string": "private String[] originalArgs;", "modifier": "private", "type": "String[]", "declarator": "originalArgs", "var_name": "originalArgs"}], "methods": [{"identifier": "HadoopTwitterTokenTool", "parameters": "(String[] originalArgs)", "modifiers": "public", "return": "", "signature": " HadoopTwitterTokenTool(String[] originalArgs)", "full_signature": "public  HadoopTwitterTokenTool(String[] originalArgs)", "class_method_signature": "HadoopTwitterTokenTool.HadoopTwitterTokenTool(String[] originalArgs)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "(String[] args)", "modifiers": "@Override public", "return": "int", "signature": "int run(String[] args)", "full_signature": "@Override public int run(String[] args)", "class_method_signature": "HadoopTwitterTokenTool.run(String[] args)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "HadoopTwitterTokenTool.main(String[] args)", "testcase": false, "constructor": false}], "file": "hadoop/tools/HadoopTwitterTokenTool/src/main/java/org/openimaj/hadoop/tools/twitter/HadoopTwitterTokenTool.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "body": "public static void main(String[] args) throws Exception {\n\t\ttry {\n\t\t\tToolRunner.run(new HadoopTwitterTokenTool(args), args);\n\t\t} catch (CmdLineException e) {\n\t\t\tSystem.err.print(e);\n\t\t}\n\t}", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "HadoopTwitterTokenTool.main(String[] args)", "testcase": false, "constructor": false, "invocations": ["run", "print"]}, "repository": {"repo_id": 4114800, "url": "https://github.com/sinjax/trendminer-java", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 10, "size": 209307, "license": "licensed"}}