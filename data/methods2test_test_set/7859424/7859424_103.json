{"test_class": {"identifier": "StoneCountObserverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Board board;", "modifier": "private", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private StoneCountObserver counter;", "modifier": "private", "type": "StoneCountObserver", "declarator": "counter", "var_name": "counter"}], "file": "src/edu/lclark/orego/feature/StoneCountObserverTest.java"}, "test_case": {"identifier": "testMercyOnLargerBoard", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMercyOnLargerBoard(){\n\t\tboard = new Board(19);\n\t\tcounter = new StoneCountObserver(board, new ChineseFinalScorer(board, 7.5));\n\t\tassertNull(counter.mercyWinner());\n\t\tString[] diagram = {\n\t\t\t\t\"###################\",\n\t\t\t\t\"###################\",\n\t\t\t\t\"###################\",\n\t\t\t\t\"##########.........\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t};\n\t\tboard.setUpProblem(diagram, BLACK);\n\t\tassertNull(counter.mercyWinner());\n\t\tboard.play(board.getCoordinateSystem().at(\"a1\"));\n\t\tassertEquals(BLACK, counter.mercyWinner());\n\t\tdiagram = new String[] {\n\t\t\t\t\"#..................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"...................\",\n\t\t\t\t\"OOOOOOOOOOOOOOO....\",\n\t\t\t\t\"OOOOOOOOOOOOOOOOOOO\",\n\t\t\t\t\"OOOOOOOOOOOOOOOOOOO\",\n\t\t};\n\t\tboard.setUpProblem(diagram, WHITE);\n\t\tassertNull(counter.mercyWinner());\n\t\tboard.play(board.getCoordinateSystem().at(\"e5\"));\n\t\tassertEquals(WHITE, counter.mercyWinner());\t\n\t}", "signature": "void testMercyOnLargerBoard()", "full_signature": "@Test public void testMercyOnLargerBoard()", "class_method_signature": "StoneCountObserverTest.testMercyOnLargerBoard()", "testcase": true, "constructor": false, "invocations": ["assertNull", "mercyWinner", "setUpProblem", "assertNull", "mercyWinner", "play", "at", "getCoordinateSystem", "assertEquals", "mercyWinner", "setUpProblem", "assertNull", "mercyWinner", "play", "at", "getCoordinateSystem", "assertEquals", "mercyWinner"]}, "focal_class": {"identifier": "StoneCountObserver", "superclass": "", "interfaces": "implements BoardObserver", "fields": [{"original_string": "private final int[] counts;", "modifier": "private final", "type": "int[]", "declarator": "counts", "var_name": "counts"}, {"original_string": "private final int blackMercyThreshold;", "modifier": "private final", "type": "int", "declarator": "blackMercyThreshold", "var_name": "blackMercyThreshold"}, {"original_string": "private final int whiteMercyThreshold;", "modifier": "private final", "type": "int", "declarator": "whiteMercyThreshold", "var_name": "whiteMercyThreshold"}], "methods": [{"identifier": "StoneCountObserver", "parameters": "(Board board, Scorer scorer)", "modifiers": "public", "return": "", "signature": " StoneCountObserver(Board board, Scorer scorer)", "full_signature": "public  StoneCountObserver(Board board, Scorer scorer)", "class_method_signature": "StoneCountObserver.StoneCountObserver(Board board, Scorer scorer)", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "StoneCountObserver.clear()", "testcase": false, "constructor": false}, {"identifier": "copyDataFrom", "parameters": "(BoardObserver that)", "modifiers": "@Override public", "return": "void", "signature": "void copyDataFrom(BoardObserver that)", "full_signature": "@Override public void copyDataFrom(BoardObserver that)", "class_method_signature": "StoneCountObserver.copyDataFrom(BoardObserver that)", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "(StoneColor color)", "modifiers": "public", "return": "int", "signature": "int getCount(StoneColor color)", "full_signature": "public int getCount(StoneColor color)", "class_method_signature": "StoneCountObserver.getCount(StoneColor color)", "testcase": false, "constructor": false}, {"identifier": "mercyWinner", "parameters": "()", "modifiers": "public", "return": "StoneColor", "signature": "StoneColor mercyWinner()", "full_signature": "public StoneColor mercyWinner()", "class_method_signature": "StoneCountObserver.mercyWinner()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(StoneColor color, short location,\n\t\t\tShortList capturedStones)", "modifiers": "@Override public", "return": "void", "signature": "void update(StoneColor color, short location,\n\t\t\tShortList capturedStones)", "full_signature": "@Override public void update(StoneColor color, short location,\n\t\t\tShortList capturedStones)", "class_method_signature": "StoneCountObserver.update(StoneColor color, short location,\n\t\t\tShortList capturedStones)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/feature/StoneCountObserver.java"}, "focal_method": {"identifier": "mercyWinner", "parameters": "()", "modifiers": "public", "return": "StoneColor", "body": "public StoneColor mercyWinner() {\n\t\tfinal int difference = counts[BLACK.index()] - counts[WHITE.index()];\n\t\tif (difference >= blackMercyThreshold) {\n\t\t\treturn BLACK;\n\t\t} else if (difference <= whiteMercyThreshold) {\n\t\t\treturn WHITE;\n\t\t}\n\t\treturn null;\n\t}", "signature": "StoneColor mercyWinner()", "full_signature": "public StoneColor mercyWinner()", "class_method_signature": "StoneCountObserver.mercyWinner()", "testcase": false, "constructor": false, "invocations": ["index", "index"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}