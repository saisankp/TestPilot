{"test_class": {"identifier": "DecimatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "GeometryFactory gf = new GeometryFactory();", "modifier": "", "type": "GeometryFactory", "declarator": "gf = new GeometryFactory()", "var_name": "gf"}, {"original_string": "LiteCoordinateSequenceFactory csf = new LiteCoordinateSequenceFactory();", "modifier": "", "type": "LiteCoordinateSequenceFactory", "declarator": "csf = new LiteCoordinateSequenceFactory()", "var_name": "csf"}, {"original_string": "private MathTransform identity = new AffineTransform2D(new AffineTransform());", "modifier": "private", "type": "MathTransform", "declarator": "identity = new AffineTransform2D(new AffineTransform())", "var_name": "identity"}], "file": "modules/library/main/src/test/java/org/geotools/geometry/jts/DecimatorTest.java"}, "test_case": {"identifier": "testDecimateCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecimateCollection() throws Exception {\n        WKTReader2 reader = new WKTReader2();\n        MultiLineString origin = (MultiLineString) reader\n                .read(\"MULTICURVE((0 0, 5 5),CIRCULARSTRING(4 0, 4 4, 8 4))\");\n        Decimator d = new Decimator(0.1, 0.1);\n        MultiLineString simplified = (MultiLineString) d.decimateTransformGeneralize(origin,\n                identity);\n        assertEquals(origin.getGeometryN(0), simplified.getGeometryN(0));\n        assertNotEquals(origin.getGeometryN(1), simplified.getGeometryN(1));\n        assertEquals(\"CircularString\", origin.getGeometryN(1).getGeometryType());\n        assertEquals(\"LineString\", simplified.getGeometryN(1).getGeometryType());\n    }", "signature": "void testDecimateCollection()", "full_signature": "@Test public void testDecimateCollection()", "class_method_signature": "DecimatorTest.testDecimateCollection()", "testcase": true, "constructor": false, "invocations": ["read", "decimateTransformGeneralize", "assertEquals", "getGeometryN", "getGeometryN", "assertNotEquals", "getGeometryN", "getGeometryN", "assertEquals", "getGeometryType", "getGeometryN", "assertEquals", "getGeometryType", "getGeometryN"]}, "focal_class": {"identifier": "Decimator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging.getLogger(Decimator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(Decimator.class)", "var_name": "LOGGER"}, {"original_string": "static final double DP_THRESHOLD;", "modifier": "static final", "type": "double", "declarator": "DP_THRESHOLD", "var_name": "DP_THRESHOLD"}, {"original_string": "private static final double EPS = 1e-9;", "modifier": "private static final", "type": "double", "declarator": "EPS = 1e-9", "var_name": "EPS"}, {"original_string": "private double spanx = -1;", "modifier": "private", "type": "double", "declarator": "spanx = -1", "var_name": "spanx"}, {"original_string": "private double spany = -1;", "modifier": "private", "type": "double", "declarator": "spany = -1", "var_name": "spany"}], "methods": [{"identifier": "Decimator", "parameters": "(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "modifiers": "public", "return": "", "signature": " Decimator(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "full_signature": "public  Decimator(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "class_method_signature": "Decimator.Decimator(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "testcase": false, "constructor": true}, {"identifier": "getSpanX", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSpanX()", "full_signature": "public double getSpanX()", "class_method_signature": "Decimator.getSpanX()", "testcase": false, "constructor": false}, {"identifier": "getSpanY", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSpanY()", "full_signature": "public double getSpanY()", "class_method_signature": "Decimator.getSpanY()", "testcase": false, "constructor": false}, {"identifier": "Decimator", "parameters": "(MathTransform screenToWorld, Rectangle paintArea)", "modifiers": "public", "return": "", "signature": " Decimator(MathTransform screenToWorld, Rectangle paintArea)", "full_signature": "public  Decimator(MathTransform screenToWorld, Rectangle paintArea)", "class_method_signature": "Decimator.Decimator(MathTransform screenToWorld, Rectangle paintArea)", "testcase": false, "constructor": true}, {"identifier": "computeGeneralizationDistances", "parameters": "(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "modifiers": "public static", "return": "double[]", "signature": "double[] computeGeneralizationDistances(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "full_signature": "public static double[] computeGeneralizationDistances(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "class_method_signature": "Decimator.computeGeneralizationDistances(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "testcase": false, "constructor": false}, {"identifier": "isFinite", "parameters": "(double d)", "modifiers": "private static", "return": "boolean", "signature": "boolean isFinite(double d)", "full_signature": "private static boolean isFinite(double d)", "class_method_signature": "Decimator.isFinite(double d)", "testcase": false, "constructor": false}, {"identifier": "getGeneralizationSpans", "parameters": "(double x, double y, MathTransform transform)", "modifiers": "static", "return": "double[]", "signature": "double[] getGeneralizationSpans(double x, double y, MathTransform transform)", "full_signature": "static double[] getGeneralizationSpans(double x, double y, MathTransform transform)", "class_method_signature": "Decimator.getGeneralizationSpans(double x, double y, MathTransform transform)", "testcase": false, "constructor": false}, {"identifier": "Decimator", "parameters": "(MathTransform screenToWorld)", "modifiers": "public", "return": "", "signature": " Decimator(MathTransform screenToWorld)", "full_signature": "public  Decimator(MathTransform screenToWorld)", "class_method_signature": "Decimator.Decimator(MathTransform screenToWorld)", "testcase": false, "constructor": true}, {"identifier": "Decimator", "parameters": "(double spanx, double spany)", "modifiers": "public", "return": "", "signature": " Decimator(double spanx, double spany)", "full_signature": "public  Decimator(double spanx, double spany)", "class_method_signature": "Decimator.Decimator(double spanx, double spany)", "testcase": false, "constructor": true}, {"identifier": "decimateTransformGeneralize", "parameters": "(Geometry geometry,\n\t\t\tMathTransform transform)", "modifiers": "public final", "return": "Geometry", "signature": "Geometry decimateTransformGeneralize(Geometry geometry,\n\t\t\tMathTransform transform)", "full_signature": "public final Geometry decimateTransformGeneralize(Geometry geometry,\n\t\t\tMathTransform transform)", "class_method_signature": "Decimator.decimateTransformGeneralize(Geometry geometry,\n\t\t\tMathTransform transform)", "testcase": false, "constructor": false}, {"identifier": "accumulateGeometryType", "parameters": "(Class elementType, Geometry generalized)", "modifiers": "private", "return": "Class", "signature": "Class accumulateGeometryType(Class elementType, Geometry generalized)", "full_signature": "private Class accumulateGeometryType(Class elementType, Geometry generalized)", "class_method_signature": "Decimator.accumulateGeometryType(Class elementType, Geometry generalized)", "testcase": false, "constructor": false}, {"identifier": "decimate", "parameters": "(Geometry geom)", "modifiers": "public final", "return": "void", "signature": "void decimate(Geometry geom)", "full_signature": "public final void decimate(Geometry geom)", "class_method_signature": "Decimator.decimate(Geometry geom)", "testcase": false, "constructor": false}, {"identifier": "decimateOnEnvelope", "parameters": "(Geometry geom, LiteCoordinateSequence seq)", "modifiers": "private", "return": "boolean", "signature": "boolean decimateOnEnvelope(Geometry geom, LiteCoordinateSequence seq)", "full_signature": "private boolean decimateOnEnvelope(Geometry geom, LiteCoordinateSequence seq)", "class_method_signature": "Decimator.decimateOnEnvelope(Geometry geom, LiteCoordinateSequence seq)", "testcase": false, "constructor": false}, {"identifier": "decimateRingFully", "parameters": "(LiteCoordinateSequence seq)", "modifiers": "private", "return": "void", "signature": "void decimateRingFully(LiteCoordinateSequence seq)", "full_signature": "private void decimateRingFully(LiteCoordinateSequence seq)", "class_method_signature": "Decimator.decimateRingFully(LiteCoordinateSequence seq)", "testcase": false, "constructor": false}, {"identifier": "decimateTransformGeneralize", "parameters": "(LiteCoordinateSequence seq,\n            MathTransform transform, boolean ring, double spanx, double spany)", "modifiers": "private final", "return": "void", "signature": "void decimateTransformGeneralize(LiteCoordinateSequence seq,\n            MathTransform transform, boolean ring, double spanx, double spany)", "full_signature": "private final void decimateTransformGeneralize(LiteCoordinateSequence seq,\n            MathTransform transform, boolean ring, double spanx, double spany)", "class_method_signature": "Decimator.decimateTransformGeneralize(LiteCoordinateSequence seq,\n            MathTransform transform, boolean ring, double spanx, double spany)", "testcase": false, "constructor": false}, {"identifier": "spanBasedGeneralize", "parameters": "(int ncoords, double[] coords, double spanx, double spany)", "modifiers": "private", "return": "int", "signature": "int spanBasedGeneralize(int ncoords, double[] coords, double spanx, double spany)", "full_signature": "private int spanBasedGeneralize(int ncoords, double[] coords, double spanx, double spany)", "class_method_signature": "Decimator.spanBasedGeneralize(int ncoords, double[] coords, double spanx, double spany)", "testcase": false, "constructor": false}, {"identifier": "dpBasedGeneralize", "parameters": "(int ncoords, double[] coords, double maxDistance)", "modifiers": "private", "return": "int", "signature": "int dpBasedGeneralize(int ncoords, double[] coords, double maxDistance)", "full_signature": "private int dpBasedGeneralize(int ncoords, double[] coords, double maxDistance)", "class_method_signature": "Decimator.dpBasedGeneralize(int ncoords, double[] coords, double maxDistance)", "testcase": false, "constructor": false}, {"identifier": "dpSimplifySection", "parameters": "(int first, int last, double[] coords, double maxDistanceSquared)", "modifiers": "private", "return": "void", "signature": "void dpSimplifySection(int first, int last, double[] coords, double maxDistanceSquared)", "full_signature": "private void dpSimplifySection(int first, int last, double[] coords, double maxDistanceSquared)", "class_method_signature": "Decimator.dpSimplifySection(int first, int last, double[] coords, double maxDistanceSquared)", "testcase": false, "constructor": false}, {"identifier": "decimate", "parameters": "(Geometry g, LiteCoordinateSequence seq)", "modifiers": "private", "return": "void", "signature": "void decimate(Geometry g, LiteCoordinateSequence seq)", "full_signature": "private void decimate(Geometry g, LiteCoordinateSequence seq)", "class_method_signature": "Decimator.decimate(Geometry g, LiteCoordinateSequence seq)", "testcase": false, "constructor": false}, {"identifier": "copyCoordinate", "parameters": "(double[] coords, int dimension, int readDoubles,\n\t\t\tint currentDoubles)", "modifiers": "private", "return": "int", "signature": "int copyCoordinate(double[] coords, int dimension, int readDoubles,\n\t\t\tint currentDoubles)", "full_signature": "private int copyCoordinate(double[] coords, int dimension, int readDoubles,\n\t\t\tint currentDoubles)", "class_method_signature": "Decimator.copyCoordinate(double[] coords, int dimension, int readDoubles,\n\t\t\tint currentDoubles)", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/geometry/jts/Decimator.java"}, "focal_method": {"identifier": "decimateTransformGeneralize", "parameters": "(Geometry geometry,\n\t\t\tMathTransform transform)", "modifiers": "public final", "return": "Geometry", "body": "public final Geometry decimateTransformGeneralize(Geometry geometry,\n\t\t\tMathTransform transform) throws TransformException {\n\t\tif (geometry instanceof GeometryCollection) {\n\t\t\tGeometryCollection collection = (GeometryCollection) geometry;\n\t\t\tfinal int length = collection.getNumGeometries();\n\t\t\tboolean cloned = false;\n\t\t\tClass elementType = null;\n            Geometry[] elements = null;\n\t\t\tfor (int i = 0; i < length; i++) {\n\t\t\t\tGeometry source = collection.getGeometryN(i);\n                Geometry generalized = decimateTransformGeneralize(source,\n\t\t\t\t\t\ttransform);\n                \n                // lazily handle the case where we need to deep clone\n                if(generalized != source) {\n                    cloned = true;\n                    if(elements == null) {\n                        elements = new Geometry[collection.getNumGeometries()];\n                        for (int j = 0; j < i; j++) {\n                            Geometry element = collection.getGeometryN(j);\n                            elements[j] = element;\n                            accumulateGeometryType(elementType, element);\n                        }\n                    }\n                }\n                if(cloned) {\n                    elements[i] = generalized;\n                    elementType = accumulateGeometryType(elementType, generalized);\n                }\n\t\t\t}\n\t\t\tif(cloned) {\n\t\t\t    if(elementType == Point.class) {\n\t\t\t        Point[] points = new Point[elements.length];\n\t\t\t        System.arraycopy(elements, 0, points, 0, elements.length);\n                    return collection.getFactory().createMultiPoint(points);\n                } else if (elementType == LineString.class) {\n                    LineString[] lines = new LineString[elements.length];\n                    System.arraycopy(elements, 0, lines, 0, elements.length);\n                    return collection.getFactory().createMultiLineString(lines);\n                } else if (elementType == Polygon.class) {\n                    Polygon[] polys = new Polygon[elements.length];\n                    System.arraycopy(elements, 0, polys, 0, elements.length);\n                    return collection.getFactory().createMultiPolygon(polys);\n                } else {\n                    return collection.getFactory().createGeometryCollection(elements);\n\t\t\t    }\n\t\t\t} else {\n\t\t\t    return collection;\n\t\t\t}\n\t\t} else if (geometry instanceof Point) {\n\t\t\tLiteCoordinateSequence seq = (LiteCoordinateSequence) ((Point) geometry)\n\t\t\t\t\t.getCoordinateSequence();\n            decimateTransformGeneralize(seq, transform, false, spanx, spany);\n            return geometry;\n\t\t} else if (geometry instanceof Polygon) {\n\t\t\tPolygon polygon = (Polygon) geometry;\n            LinearRing shell = (LinearRing) decimateTransformGeneralize(polygon.getExteriorRing(),\n                    transform);\n            boolean cloned = shell != polygon.getExteriorRing();\n            final int length = polygon.getNumInteriorRing();\n            LinearRing[] holes = cloned ? new LinearRing[length] : null;\n\t\t\tfor (int i = 0; i < length; i++) {\n                LineString hole = polygon.getInteriorRingN(i);\n                LinearRing generalized = (LinearRing) decimateTransformGeneralize(hole,\n\t\t\t\t\t\ttransform);\n                cloned |= generalized != hole;\n                if (cloned) {\n                    if (holes == null) {\n                        holes = new LinearRing[length];\n                        for (int j = 0; j < i; j++) {\n                            holes[j] = (LinearRing) polygon.getInteriorRingN(j);\n                        }\n                    }\n                    holes[i] = generalized;\n                }\n            }\n\n            if (cloned) {\n                return polygon.getFactory().createPolygon(shell, holes);\n            } else {\n                return polygon;\n\t\t\t}\n\t\t} else if (geometry instanceof LineString) {\n            double spanx = this.spanx;\n            double spany = this.spany;\n\t\t\tLineString ls = (LineString) geometry;\n            if (ls instanceof CurvedGeometry<?>) {\n                CurvedGeometry<LineString> curved = (CurvedGeometry<LineString>) ls;\n                ls = curved.linearize(Math.min(Math.abs(spanx), Math.abs(spany)));\n                // do not generalize further, we already got a good representation\n                spanx = -1;\n                spany = -1;\n            }\n            LiteCoordinateSequence seq = LiteCoordinateSequenceFactory.lite(ls\n                    .getCoordinateSequence());\n            boolean loop = ls instanceof LinearRing;\n            if (!loop && seq.size() > 1) {\n                double x0 = seq.getOrdinate(0, 0);\n                double y0 = seq.getOrdinate(0, 1);\n                double x1 = seq.getOrdinate(seq.size() - 1, 0);\n                double y1 = seq.getOrdinate(seq.size() - 1, 1);\n                loop = Math.abs(x0 - x1) < EPS && Math.abs(y0 - y1) < EPS;\n            }\n            decimateTransformGeneralize(seq, transform, loop, spanx, spany);\n            return ls;\n        } else {\n            return geometry;\n\t\t}\n\t}", "signature": "Geometry decimateTransformGeneralize(Geometry geometry,\n\t\t\tMathTransform transform)", "full_signature": "public final Geometry decimateTransformGeneralize(Geometry geometry,\n\t\t\tMathTransform transform)", "class_method_signature": "Decimator.decimateTransformGeneralize(Geometry geometry,\n\t\t\tMathTransform transform)", "testcase": false, "constructor": false, "invocations": ["getNumGeometries", "getGeometryN", "decimateTransformGeneralize", "getNumGeometries", "getGeometryN", "accumulateGeometryType", "accumulateGeometryType", "arraycopy", "createMultiPoint", "getFactory", "arraycopy", "createMultiLineString", "getFactory", "arraycopy", "createMultiPolygon", "getFactory", "createGeometryCollection", "getFactory", "getCoordinateSequence", "decimateTransformGeneralize", "decimateTransformGeneralize", "getExteriorRing", "getExteriorRing", "getNumInteriorRing", "getInteriorRingN", "decimateTransformGeneralize", "getInteriorRingN", "createPolygon", "getFactory", "linearize", "min", "abs", "abs", "lite", "getCoordinateSequence", "size", "getOrdinate", "getOrdinate", "getOrdinate", "size", "getOrdinate", "size", "abs", "abs", "decimateTransformGeneralize"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}