{"test_class": {"identifier": "RetourPrefectureServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SpyBean\n    private RetourPrefectureService retourPrefectureService;", "modifier": "@SpyBean\n    private", "type": "RetourPrefectureService", "declarator": "retourPrefectureService", "var_name": "retourPrefectureService"}, {"original_string": "@MockBean\n    private ActeRepository acteRepository;", "modifier": "@MockBean\n    private", "type": "ActeRepository", "declarator": "acteRepository", "var_name": "acteRepository"}, {"original_string": "@MockBean\n    private ActeHistoryRepository acteHistoryRepository;", "modifier": "@MockBean\n    private", "type": "ActeHistoryRepository", "declarator": "acteHistoryRepository", "var_name": "acteHistoryRepository"}, {"original_string": "@MockBean\n    private LocalAuthorityRepository localAuthorityRepository;", "modifier": "@MockBean\n    private", "type": "LocalAuthorityRepository", "declarator": "localAuthorityRepository", "var_name": "localAuthorityRepository"}, {"original_string": "@MockBean\n    private ZipGeneratorUtil zipGeneratorUtil;", "modifier": "@MockBean\n    private", "type": "ZipGeneratorUtil", "declarator": "zipGeneratorUtil", "var_name": "zipGeneratorUtil"}], "file": "acte-service/src/test/java/fr/sictiam/stela/acteservice/service/RetourPrefectureServiceTest.java"}, "test_case": {"identifier": "testReceiveARActe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReceiveARActe() throws IOException, JAXBException {\n\n        given(acteRepository.findByMiatId(anyString()))\n                .willReturn(Optional.of(acte()));\n\n        Pair<ARActe, Attachment> parsedData =\n                parseClassPathResource(\"/data/006-210600235-20180522-684-AI-1-2_5279.xml\", ARActe.class);\n        retourPrefectureService.receiveARActe(parsedData.getLeft(), parsedData.getRight());\n\n        verify(acteRepository).findByMiatId(\"006-210600235-20180522-684-AI\");\n        verify(retourPrefectureService).publishActeHistory(eq(\"uuid\"), eq(StatusType.ACK_RECEIVED),\n                eq(parsedData.getRight()), eq(Optional.empty()), eq(Optional.empty()));\n    }", "signature": "void testReceiveARActe()", "full_signature": "@Test public void testReceiveARActe()", "class_method_signature": "RetourPrefectureServiceTest.testReceiveARActe()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "findByMiatId", "anyString", "of", "acte", "parseClassPathResource", "receiveARActe", "getLeft", "getRight", "findByMiatId", "verify", "publishActeHistory", "verify", "eq", "eq", "eq", "getRight", "eq", "empty", "eq", "empty"]}, "focal_class": {"identifier": "RetourPrefectureService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RetourPrefectureService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RetourPrefectureService.class)", "var_name": "LOGGER"}, {"original_string": "private final ActeRepository acteRepository;", "modifier": "private final", "type": "ActeRepository", "declarator": "acteRepository", "var_name": "acteRepository"}, {"original_string": "private final ActeHistoryRepository acteHistoryRepository;", "modifier": "private final", "type": "ActeHistoryRepository", "declarator": "acteHistoryRepository", "var_name": "acteHistoryRepository"}, {"original_string": "private final LocalAuthorityRepository localAuthorityRepository;", "modifier": "private final", "type": "LocalAuthorityRepository", "declarator": "localAuthorityRepository", "var_name": "localAuthorityRepository"}, {"original_string": "private final ApplicationEventPublisher applicationEventPublisher;", "modifier": "private final", "type": "ApplicationEventPublisher", "declarator": "applicationEventPublisher", "var_name": "applicationEventPublisher"}, {"original_string": "private final ZipGeneratorUtil zipGeneratorUtil;", "modifier": "private final", "type": "ZipGeneratorUtil", "declarator": "zipGeneratorUtil", "var_name": "zipGeneratorUtil"}], "methods": [{"identifier": "RetourPrefectureService", "parameters": "(ActeRepository acteRepository, ActeHistoryRepository acteHistoryRepository,\n                                   LocalAuthorityRepository localAuthorityRepository, ApplicationEventPublisher applicationEventPublisher, ZipGeneratorUtil zipGeneratorUtil)", "modifiers": "public", "return": "", "signature": " RetourPrefectureService(ActeRepository acteRepository, ActeHistoryRepository acteHistoryRepository,\n                                   LocalAuthorityRepository localAuthorityRepository, ApplicationEventPublisher applicationEventPublisher, ZipGeneratorUtil zipGeneratorUtil)", "full_signature": "public  RetourPrefectureService(ActeRepository acteRepository, ActeHistoryRepository acteHistoryRepository,\n                                   LocalAuthorityRepository localAuthorityRepository, ApplicationEventPublisher applicationEventPublisher, ZipGeneratorUtil zipGeneratorUtil)", "class_method_signature": "RetourPrefectureService.RetourPrefectureService(ActeRepository acteRepository, ActeHistoryRepository acteHistoryRepository,\n                                   LocalAuthorityRepository localAuthorityRepository, ApplicationEventPublisher applicationEventPublisher, ZipGeneratorUtil zipGeneratorUtil)", "testcase": false, "constructor": true}, {"identifier": "receiveARActe", "parameters": "(ARActe arActe, Attachment attachment)", "modifiers": "public", "return": "void", "signature": "void receiveARActe(ARActe arActe, Attachment attachment)", "full_signature": "public void receiveARActe(ARActe arActe, Attachment attachment)", "class_method_signature": "RetourPrefectureService.receiveARActe(ARActe arActe, Attachment attachment)", "testcase": false, "constructor": false}, {"identifier": "receiveARAnnulation", "parameters": "(ARAnnulation arAnnulation, Attachment attachment)", "modifiers": "public", "return": "void", "signature": "void receiveARAnnulation(ARAnnulation arAnnulation, Attachment attachment)", "full_signature": "public void receiveARAnnulation(ARAnnulation arAnnulation, Attachment attachment)", "class_method_signature": "RetourPrefectureService.receiveARAnnulation(ARAnnulation arAnnulation, Attachment attachment)", "testcase": false, "constructor": false}, {"identifier": "receiveAnomalieActe", "parameters": "(EnveloppeMISILLCL enveloppeMISILLCL, AnomalieActe anomalieActe, Attachment attachment)", "modifiers": "public", "return": "void", "signature": "void receiveAnomalieActe(EnveloppeMISILLCL enveloppeMISILLCL, AnomalieActe anomalieActe, Attachment attachment)", "full_signature": "public void receiveAnomalieActe(EnveloppeMISILLCL enveloppeMISILLCL, AnomalieActe anomalieActe, Attachment attachment)", "class_method_signature": "RetourPrefectureService.receiveAnomalieActe(EnveloppeMISILLCL enveloppeMISILLCL, AnomalieActe anomalieActe, Attachment attachment)", "testcase": false, "constructor": false}, {"identifier": "receiveAnomalieEnveloppe", "parameters": "(AnomalieEnveloppe anomalieEnveloppe, Attachment attachment)", "modifiers": "public", "return": "void", "signature": "void receiveAnomalieEnveloppe(AnomalieEnveloppe anomalieEnveloppe, Attachment attachment)", "full_signature": "public void receiveAnomalieEnveloppe(AnomalieEnveloppe anomalieEnveloppe, Attachment attachment)", "class_method_signature": "RetourPrefectureService.receiveAnomalieEnveloppe(AnomalieEnveloppe anomalieEnveloppe, Attachment attachment)", "testcase": false, "constructor": false}, {"identifier": "receiveCourrierSimple", "parameters": "(CourrierSimple courrierSimple, Attachment attachment)", "modifiers": "public", "return": "void", "signature": "void receiveCourrierSimple(CourrierSimple courrierSimple, Attachment attachment)", "full_signature": "public void receiveCourrierSimple(CourrierSimple courrierSimple, Attachment attachment)", "class_method_signature": "RetourPrefectureService.receiveCourrierSimple(CourrierSimple courrierSimple, Attachment attachment)", "testcase": false, "constructor": false}, {"identifier": "receiveDemandePieceComplementaire", "parameters": "(DemandePieceComplementaire demandePieceComplementaire, Attachment attachment)", "modifiers": "public", "return": "void", "signature": "void receiveDemandePieceComplementaire(DemandePieceComplementaire demandePieceComplementaire, Attachment attachment)", "full_signature": "public void receiveDemandePieceComplementaire(DemandePieceComplementaire demandePieceComplementaire, Attachment attachment)", "class_method_signature": "RetourPrefectureService.receiveDemandePieceComplementaire(DemandePieceComplementaire demandePieceComplementaire, Attachment attachment)", "testcase": false, "constructor": false}, {"identifier": "receiveLettreObservations", "parameters": "(LettreObservations lettreObservations, Attachment attachment)", "modifiers": "public", "return": "void", "signature": "void receiveLettreObservations(LettreObservations lettreObservations, Attachment attachment)", "full_signature": "public void receiveLettreObservations(LettreObservations lettreObservations, Attachment attachment)", "class_method_signature": "RetourPrefectureService.receiveLettreObservations(LettreObservations lettreObservations, Attachment attachment)", "testcase": false, "constructor": false}, {"identifier": "receiveDefere", "parameters": "(DefereTA defereTA, List<Attachment> attachments)", "modifiers": "public", "return": "void", "signature": "void receiveDefere(DefereTA defereTA, List<Attachment> attachments)", "full_signature": "public void receiveDefere(DefereTA defereTA, List<Attachment> attachments)", "class_method_signature": "RetourPrefectureService.receiveDefere(DefereTA defereTA, List<Attachment> attachments)", "testcase": false, "constructor": false}, {"identifier": "receiveARPieceComplementaire", "parameters": "(ARReponseCL arReponseCL, Attachment attachment)", "modifiers": "public", "return": "void", "signature": "void receiveARPieceComplementaire(ARReponseCL arReponseCL, Attachment attachment)", "full_signature": "public void receiveARPieceComplementaire(ARReponseCL arReponseCL, Attachment attachment)", "class_method_signature": "RetourPrefectureService.receiveARPieceComplementaire(ARReponseCL arReponseCL, Attachment attachment)", "testcase": false, "constructor": false}, {"identifier": "receiveARReponseRejetLettreObservations", "parameters": "(ARReponseCL arReponseCL, Attachment attachment)", "modifiers": "public", "return": "void", "signature": "void receiveARReponseRejetLettreObservations(ARReponseCL arReponseCL, Attachment attachment)", "full_signature": "public void receiveARReponseRejetLettreObservations(ARReponseCL arReponseCL, Attachment attachment)", "class_method_signature": "RetourPrefectureService.receiveARReponseRejetLettreObservations(ARReponseCL arReponseCL, Attachment attachment)", "testcase": false, "constructor": false}, {"identifier": "publishActeHistory", "parameters": "(String acteUuid, StatusType statusType, Attachment attachment,\n                                    Optional<String> message, Optional<Flux> flux)", "modifiers": "", "return": "void", "signature": "void publishActeHistory(String acteUuid, StatusType statusType, Attachment attachment,\n                                    Optional<String> message, Optional<Flux> flux)", "full_signature": " void publishActeHistory(String acteUuid, StatusType statusType, Attachment attachment,\n                                    Optional<String> message, Optional<Flux> flux)", "class_method_signature": "RetourPrefectureService.publishActeHistory(String acteUuid, StatusType statusType, Attachment attachment,\n                                    Optional<String> message, Optional<Flux> flux)", "testcase": false, "constructor": false}, {"identifier": "getByMiatId", "parameters": "(String miatId)", "modifiers": "private", "return": "Acte", "signature": "Acte getByMiatId(String miatId)", "full_signature": "private Acte getByMiatId(String miatId)", "class_method_signature": "RetourPrefectureService.getByMiatId(String miatId)", "testcase": false, "constructor": false}], "file": "acte-service/src/main/java/fr/sictiam/stela/acteservice/service/RetourPrefectureService.java"}, "focal_method": {"identifier": "receiveARActe", "parameters": "(ARActe arActe, Attachment attachment)", "modifiers": "public", "return": "void", "body": "public void receiveARActe(ARActe arActe, Attachment attachment) {\n        Acte acte = getByMiatId(arActe.getIDActe());\n        publishActeHistory(acte.getUuid(), StatusType.ACK_RECEIVED, attachment, Optional.empty(), Optional.empty());\n    }", "signature": "void receiveARActe(ARActe arActe, Attachment attachment)", "full_signature": "public void receiveARActe(ARActe arActe, Attachment attachment)", "class_method_signature": "RetourPrefectureService.receiveARActe(ARActe arActe, Attachment attachment)", "testcase": false, "constructor": false, "invocations": ["getByMiatId", "getIDActe", "publishActeHistory", "getUuid", "empty", "empty"]}, "repository": {"repo_id": 180337008, "url": "https://github.com/SICTIAM/stela", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 7714, "license": "licensed"}}