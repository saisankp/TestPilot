{"test_class": {"identifier": "SingleOutputValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SingleOutputValidator victim = new SingleOutputValidator();", "modifier": "private", "type": "SingleOutputValidator", "declarator": "victim = new SingleOutputValidator()", "var_name": "victim"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "sejda-model/src/test/java/org/sejda/model/validation/validator/SingleOutputValidatorTest.java"}, "test_case": {"identifier": "destinationExistsPolicyFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void destinationExistsPolicyFail() throws IOException {\n        ConstraintValidatorContext context = mock(ConstraintValidatorContext.class);\n        ConstraintViolationBuilder builder = mock(ConstraintViolationBuilder.class);\n        when(context.buildConstraintViolationWithTemplate(anyString())).thenReturn(builder);\n        SetMetadataParameters params = new SetMetadataParameters();\n        params.setOutput(new FileTaskOutput(folder.newFile()));\n        params.setExistingOutputPolicy(ExistingOutputPolicy.FAIL);\n        assertFalse(victim.isValid(params, context));\n        verify(context).buildConstraintViolationWithTemplate(contains(\"File destination already exists\"));\n    }", "signature": "void destinationExistsPolicyFail()", "full_signature": "@Test public void destinationExistsPolicyFail()", "class_method_signature": "SingleOutputValidatorTest.destinationExistsPolicyFail()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "buildConstraintViolationWithTemplate", "anyString", "setOutput", "newFile", "setExistingOutputPolicy", "assertFalse", "isValid", "buildConstraintViolationWithTemplate", "verify", "contains"]}, "focal_class": {"identifier": "SingleOutputValidator", "superclass": "", "interfaces": "implements ConstraintValidator<ValidSingleOutput, SingleOutputTaskParameters>", "fields": [], "methods": [{"identifier": "initialize", "parameters": "(ValidSingleOutput constraintAnnotation)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(ValidSingleOutput constraintAnnotation)", "full_signature": "@Override public void initialize(ValidSingleOutput constraintAnnotation)", "class_method_signature": "SingleOutputValidator.initialize(ValidSingleOutput constraintAnnotation)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(SingleOutputTaskParameters value, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(SingleOutputTaskParameters value, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(SingleOutputTaskParameters value, ConstraintValidatorContext context)", "class_method_signature": "SingleOutputValidator.isValid(SingleOutputTaskParameters value, ConstraintValidatorContext context)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/validation/validator/SingleOutputValidator.java"}, "focal_method": {"identifier": "isValid", "parameters": "(SingleOutputTaskParameters value, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isValid(SingleOutputTaskParameters value, ConstraintValidatorContext context) {\n        if (nonNull(value)) {\n            if (isNull(value.getOutput())) {\n                return false;\n            }\n            if (isNull(value.getOutput().getDestination()) || (value.getOutput().getDestination().exists()\n                    && (value.getExistingOutputPolicy() == ExistingOutputPolicy.FAIL\n                            || value.getExistingOutputPolicy() == ExistingOutputPolicy.SKIP))) {\n                context.disableDefaultConstraintViolation();\n                context.buildConstraintViolationWithTemplate(\n                        String.format(\"File destination already exists: %s.\", value.getOutput().getDestination()))\n                        .addConstraintViolation();\n                return false;\n            }\n        }\n        return true;\n    }", "signature": "boolean isValid(SingleOutputTaskParameters value, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(SingleOutputTaskParameters value, ConstraintValidatorContext context)", "class_method_signature": "SingleOutputValidator.isValid(SingleOutputTaskParameters value, ConstraintValidatorContext context)", "testcase": false, "constructor": false, "invocations": ["nonNull", "isNull", "getOutput", "isNull", "getDestination", "getOutput", "exists", "getDestination", "getOutput", "getExistingOutputPolicy", "getExistingOutputPolicy", "disableDefaultConstraintViolation", "addConstraintViolation", "buildConstraintViolationWithTemplate", "format", "getDestination", "getOutput"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}