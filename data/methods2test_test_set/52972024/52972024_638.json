{"test_class": {"identifier": "HttpClientPluginTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/HttpEndpoint-plugins/PluginHttpClient/src/test/java/info/smart_tools/smartactors/http_endpoint_plugins/http_client_plugin/HttpClientPluginTest.java"}, "test_case": {"identifier": "checkLoadExecution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkLoadExecution()\n            throws Exception {\n        Checker checker = new Checker();\n        checker.item = new BootstrapItem(\"test\");\n        IBootstrap<IBootstrapItem<String>> bootstrap = mock(IBootstrap.class);\n        List<IBootstrapItem<String>> itemList = new ArrayList<>();\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                Object[] args = invocation.getArguments();\n                checker.item = (IBootstrapItem<String>) args[0];\n                itemList.add(checker.item);\n                return null;\n            }\n        })\n                .when(bootstrap)\n                .add(any(IBootstrapItem.class));\n        IPlugin plugin = new HttpClientPlugin(bootstrap);\n        plugin.load();\n        assertEquals(itemList.size(), 1);\n        IBootstrapItem<String> item = itemList.get(0);\n        item.executeProcess();\n        reset(bootstrap);\n    }", "signature": "void checkLoadExecution()", "full_signature": "@Test public void checkLoadExecution()", "class_method_signature": "HttpClientPluginTest.checkLoadExecution()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "when", "doAnswer", "getArguments", "add", "any", "load", "assertEquals", "size", "get", "executeProcess", "reset"]}, "focal_class": {"identifier": "HttpClientPlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}, {"original_string": "private IFieldName uriFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "uriFieldName", "var_name": "uriFieldName"}, {"original_string": "private IFieldName startChainNameFieldName,\n            queueFieldName,\n            stackDepthFieldName,\n            exceptionalMessageMapId;", "modifier": "private", "type": "IFieldName", "declarator": "startChainNameFieldName", "var_name": "startChainNameFieldName"}], "methods": [{"identifier": "HttpClientPlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " HttpClientPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  HttpClientPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "HttpClientPlugin.HttpClientPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "HttpClientPlugin.load()", "testcase": false, "constructor": false}, {"identifier": "registerFieldNames", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerFieldNames()", "full_signature": "private void registerFieldNames()", "class_method_signature": "HttpClientPlugin.registerFieldNames()", "testcase": false, "constructor": false}], "file": "CoreFeatures/HttpEndpoint-plugins/PluginHttpClient/src/main/java/info/smart_tools/smartactors/http_endpoint_plugins/http_client_plugin/HttpClientPlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"CreateHttpClient\");\n            item\n//                    .after(\"IOC\")\n//                    .after(\"message_processor\")\n//                    .after(\"message_processing_sequence\")\n                    .after(\"response\")\n                    .after(\"response_content_strategy\")\n//                    .after(\"FieldNamePlugin\")\n//                    .before(\"starter\")\n                    .process(\n                            () -> {\n                                try {\n                                    registerFieldNames();\n                                    IOC.register(Keys.getOrAdd(URI.class.getCanonicalName()), new CreateNewInstanceStrategy(\n                                                    (args) -> {\n                                                        try {\n                                                            return new URI((String) args[0]);\n                                                        } catch (URISyntaxException e) {\n                                                            throw new RuntimeException(e);\n                                                        }\n                                                    }\n                                            )\n                                    );\n                                    IMessageMapper<byte[]> messageMapper = new MessageToBytesMapper();\n\n                                    IDeserializeStrategy deserializeStrategy = new HttpResponseDeserializationStrategy(messageMapper);\n\n                                    IOC.register(Keys.getOrAdd(\"httpResponseResolver\"), new SingletonStrategy(\n                                                    deserializeStrategy\n                                            )\n                                    );\n\n                                    IOC.register(Keys.getOrAdd(\"EmptyIObject\"), new CreateNewInstanceStrategy(\n                                                    (args) -> new DSObject()\n                                            )\n                                    );\n                                    IOC.register(Keys.getOrAdd(IResponseHandler.class.getCanonicalName()), new CreateNewInstanceStrategy(\n                                                    (args) -> {\n                                                        try {\n                                                            IObject configuration = IOC.resolve(Keys.getOrAdd(\"responseHandlerConfiguration\"));\n                                                            IObject request = (IObject) args[0];\n                                                            IResponseHandler responseHandler = new HttpResponseHandler(\n                                                                    (IQueue<ITask>) configuration.getValue(queueFieldName),\n                                                                    (Integer) configuration.getValue(stackDepthFieldName),\n                                                                    request.getValue(startChainNameFieldName),\n                                                                    request,\n                                                                    ScopeProvider.getCurrentScope()\n                                                            );\n                                                            return responseHandler;\n                                                        } catch (ResponseHandlerException | ResolutionException |\n                                                                ReadValueException | InvalidArgumentException |\n                                                                ScopeProviderException e) {\n                                                            throw new RuntimeException(e);\n                                                        }\n                                                    }\n                                            )\n                                    );\n                                    IRequestMaker<FullHttpRequest> requestMaker = new HttpRequestMaker();\n                                    IOC.register(Keys.getOrAdd(IRequestMaker.class.getCanonicalName()), new SingletonStrategy(\n                                                    requestMaker\n                                            )\n                                    );\n                                    IOC.register(Keys.getOrAdd(MessageToBytesMapper.class.getCanonicalName()),\n                                            new SingletonStrategy(\n                                                    messageMapper\n                                            )\n                                    );\n                                    IOC.register(Keys.getOrAdd(\"sendHttpRequest\"), new ApplyFunctionToArgumentsStrategy(\n                                                    (args) -> {\n                                                        try {\n                                                            HttpClient client = (HttpClient) args[0];\n                                                            IObject request = (IObject) args[1];\n                                                            client.sendRequest(request);\n                                                            IOC.resolve(\n                                                                    Keys.getOrAdd(\"createTimerOnRequest\"),\n                                                                    request,\n                                                                    request.getValue(exceptionalMessageMapId)\n                                                            );\n                                                            return client;\n                                                        } catch (ResolutionException | RequestSenderException | ReadValueException e) {\n                                                            throw new RuntimeException(e);\n                                                        }\n                                                    }\n                                            )\n                                    );\n\n                                    IOC.register(Keys.getOrAdd(\"getHttpClient\"), new ApplyFunctionToArgumentsStrategy(\n                                                    (args) -> {\n                                                        IObject request = (IObject) args[0];\n                                                        try {\n                                                            IResponseHandler responseHandler = IOC.resolve(\n                                                                    Keys.getOrAdd(IResponseHandler.class.getCanonicalName()),\n                                                                    request\n                                                            );\n                                                            HttpClient client =\n                                                                    new HttpClient(\n                                                                            URI.create((String) request.getValue(uriFieldName)),\n                                                                            responseHandler\n                                                                    );\n                                                            return client;\n                                                        } catch (ReadValueException | ResolutionException | RequestSenderException e) {\n                                                            throw new RuntimeException(e);\n                                                        }\n                                                    }\n                                            )\n                                    );\n                                    HttpClientInitializer.init();\n                                } catch (RegistrationException | ResolutionException | InvalidArgumentException e) {\n                                    e.printStackTrace();\n                                    throw new RuntimeException(e);\n                                }\n                            }\n                    );\n            bootstrap.add(item);\n\n        } catch (Exception e) {\n            throw new PluginException(e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "HttpClientPlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "after", "after", "registerFieldNames", "register", "getOrAdd", "getCanonicalName", "register", "getOrAdd", "register", "getOrAdd", "register", "getOrAdd", "getCanonicalName", "resolve", "getOrAdd", "getValue", "getValue", "getValue", "getCurrentScope", "register", "getOrAdd", "getCanonicalName", "register", "getOrAdd", "getCanonicalName", "register", "getOrAdd", "sendRequest", "resolve", "getOrAdd", "getValue", "register", "getOrAdd", "resolve", "getOrAdd", "getCanonicalName", "create", "getValue", "init", "printStackTrace", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}