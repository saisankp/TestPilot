{"test_class": {"identifier": "LanguageDetectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n\tpublic", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "text/nlp/src/test/java/org/openimaj/text/nlp/language/LanguageDetectorTest.java"}, "test_case": {"identifier": "testLanguageModelReadWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testLanguageModelReadWrite() throws IOException {\n\t\tfinal LanguageDetector det = new LanguageDetector();\n\t\tfinal File out = folder.newFile(\"languagemodel.binary\");\n\t\tGZIPOutputStream os = new GZIPOutputStream(new FileOutputStream(out));\n\t\tIOUtils.writeBinary(os, det.getLanguageModel());\n\t\tos.flush();\n\t\tos.close();\n\n\t\tfinal InputStream is = new FileInputStream(out);\n\t\tfinal LanguageModel readModel = IOUtils.read(new GZIPInputStream(is), LanguageModel.class);\n\t\tfinal LanguageDetector newdet = new LanguageDetector(readModel);\n\n\t\tassertTrue(readModel.equals(det.getLanguageModel()));\n\n\t\tfinal String[] hindiStrings = new String[] {\n\t\t\t\t\"\\u092F\\u0939 \\u090F\\u0915 \\u0938\\u094D\\u091F\\u094D\\u0930\\u093F\\u0902\\u0917 \\u0939\\u0948 \\u0915\\u093F \\u092E\\u0948\\u0902 \\u0939\\u093F\\u0902\\u0926\\u0940 \\u092E\\u0947\\u0902 \\u0932\\u093F\\u0916\\u0928\\u093E \\u0939\\u0948\",\n\t\t\t\t\"\\u0924\\u0947\\u0939\\u0930\\u093E\\u0928. \\u0908\\u0930\\u093E\\u0928 \\u0915\\u0947 \\u0930\\u093E\\u0937\\u094D\\u091F\\u094D\\u0930\\u092A\\u0924\\u093F \\u092E\\u0939\\u092E\\u0942\\u0926 \\u0905\\u0939\\u092E\\u0926\\u0940\\u0928\\u0947\\u091C\\u093E\\u0926 \\u0928\\u0947 \\u092C\\u0941\\u0927\\u0935\\u093E\\u0930 \\u0915\\u094B \\u0930\\u093E\\u0937\\u094D\\u091F\\u094D\\u0930 \\u0915\\u094B \\u0938\\u0902\\u092C\\u094B\\u0927\\u093F\\u0924 \\u0915\\u0930\\u0924\\u0947 \\u0939\\u0941\\u090F \\u0915\\u0939\\u093E \\u0915\\u093F \\u0908\\u0930\\u093E\\u0928 \\u092C\\u092E \\u0928\\u0939\\u0940\\u0902 \\u092C\\u0928\\u093E \\u0930\\u0939\\u093E \\u0939\\u0948\\u0964 \\u092A\\u0930\\u092E\\u093E\\u0923\\u0941 \\u0915\\u093E \\u092E\\u0924\\u0932\\u092C \\u0938\\u093F\\u0930\\u094D\\u092B \\u092C\\u092E \\u0939\\u0940 \\u0928\\u0939\\u0940\\u0902 \\u0939\\u094B\\u0924\\u093E \\u0939\\u0948\\u0964\\u0905\\u092E\\u0947\\u0930\\u093F\\u0915\\u093E \\u0914\\u0930 \\u0907\\u091C\\u0930\\u093E\\u0907\\u0932 \\u092A\\u0930 \\u0924\\u0940\\u0916\\u093E \\u092A\\u094D\\u0930\\u0939\\u093E\\u0930 \\u0915\\u0930\\u0924\\u0947 \\u0939\\u0941\\u090F \\u0905\\u0939\\u092E\\u0926\\u0940\\u0928\\u0947\\u091C\\u093E\\u0926 \\u0928\\u0947 \\u0915\\u0939\\u093E \\u0915\\u093F \\u0935\\u094B \\u0908\\u0930\\u093E\\u0928\\u0940 \\u0935\\u0948\\u091C\\u094D\\u091E\\u093E\\u0928\\u093F\\u0915\\u094B\\u0902 \\u0915\\u094B \\u0907\\u0938\\u0932\\u093F\\u090F \\u092E\\u093E\\u0930 \\u0930\\u0939\\u0947 \\u0939\\u0948\\u0902 \\u0915\\u094D\\u092F\\u094B\\u0902\\u0915\\u093F \\u0935\\u094B \\u0928\\u0939\\u0940\\u0902 \\u091A\\u093E\\u0939\\u0924\\u0947 \\u0915\\u093F \\u0915\\u094B\\u0908 \\u0914\\u0930 \\u092E\\u0941\\u0932\\u094D\\u0915 \\u0906\\u0917\\u0947 \\u092C\\u0922\\u093C\\u0947\\u0964 \\u0939\\u092E\\u093E\\u0930\\u0947 \\u0935\\u0948\\u091C\\u094D\\u091E\\u093E\\u0928\\u093F\\u0915\\u094B\\u0902 \\u0928\\u0947 \\u0907\\u0938 \\u0909\\u092A\\u0932\\u092C\\u094D\\u0927\\u093F \\u0915\\u094B \\u0939\\u093E\\u0938\\u093F\\u0932 \\u0915\\u0930\\u0928\\u0947 \\u092E\\u0947\\u0902 \\u092C\\u0939\\u0941\\u0924 \\u092E\\u0947\\u0939\\u0928\\u0924 \\u0915\\u0940 \\u0939\\u0948\\u0964\" };\n\t\t// assertLanguage(det,hindiStrings,new Locale(\"hi\"));\n\t\tassertLanguage(newdet, hindiStrings, new Locale(\"hi\"));\n\t}", "signature": "void testLanguageModelReadWrite()", "full_signature": "@Test public void testLanguageModelReadWrite()", "class_method_signature": "LanguageDetectorTest.testLanguageModelReadWrite()", "testcase": true, "constructor": false, "invocations": ["newFile", "writeBinary", "getLanguageModel", "flush", "close", "read", "assertTrue", "equals", "getLanguageModel", "assertLanguage"]}, "focal_class": {"identifier": "LanguageDetector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Gson gson;", "modifier": "private static", "type": "Gson", "declarator": "gson", "var_name": "gson"}, {"original_string": "public static final String LANGUAGE_MODEL_JSON = \"/org/openimaj/text/language/language.model.json.gz\";", "modifier": "public static final", "type": "String", "declarator": "LANGUAGE_MODEL_JSON = \"/org/openimaj/text/language/language.model.json.gz\"", "var_name": "LANGUAGE_MODEL_JSON"}, {"original_string": "public static final String LANGUAGE_MODEL_BINARY = \"/org/openimaj/text/language/language.model.binary.gz\";", "modifier": "public static final", "type": "String", "declarator": "LANGUAGE_MODEL_BINARY = \"/org/openimaj/text/language/language.model.binary.gz\"", "var_name": "LANGUAGE_MODEL_BINARY"}, {"original_string": "private LanguageModel languageModel;", "modifier": "private", "type": "LanguageModel", "declarator": "languageModel", "var_name": "languageModel"}, {"original_string": "DenseMatrix nbWorkspace = null;", "modifier": "", "type": "DenseMatrix", "declarator": "nbWorkspace = null", "var_name": "nbWorkspace"}, {"original_string": "TIntDoubleHashMap logFacCache = new TIntDoubleHashMap();", "modifier": "", "type": "TIntDoubleHashMap", "declarator": "logFacCache = new TIntDoubleHashMap()", "var_name": "logFacCache"}], "methods": [{"identifier": "LanguageDetector", "parameters": "()", "modifiers": "public", "return": "", "signature": " LanguageDetector()", "full_signature": "public  LanguageDetector()", "class_method_signature": "LanguageDetector.LanguageDetector()", "testcase": false, "constructor": true}, {"identifier": "loadFromJSON", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void loadFromJSON()", "full_signature": "@SuppressWarnings(\"unchecked\") private void loadFromJSON()", "class_method_signature": "LanguageDetector.loadFromJSON()", "testcase": false, "constructor": false}, {"identifier": "loadFromBinary", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadFromBinary()", "full_signature": "private void loadFromBinary()", "class_method_signature": "LanguageDetector.loadFromBinary()", "testcase": false, "constructor": false}, {"identifier": "LanguageDetector", "parameters": "(LanguageModel model)", "modifiers": "public", "return": "", "signature": " LanguageDetector(LanguageModel model)", "full_signature": "public  LanguageDetector(LanguageModel model)", "class_method_signature": "LanguageDetector.LanguageDetector(LanguageModel model)", "testcase": false, "constructor": true}, {"identifier": "LanguageDetector", "parameters": "(boolean fromJSON)", "modifiers": "", "return": "", "signature": " LanguageDetector(boolean fromJSON)", "full_signature": "  LanguageDetector(boolean fromJSON)", "class_method_signature": "LanguageDetector.LanguageDetector(boolean fromJSON)", "testcase": false, "constructor": true}, {"identifier": "classify", "parameters": "(String text)", "modifiers": "public", "return": "WeightedLocale", "signature": "WeightedLocale classify(String text)", "full_signature": "public WeightedLocale classify(String text)", "class_method_signature": "LanguageDetector.classify(String text)", "testcase": false, "constructor": false}, {"identifier": "naiveBayesClassify", "parameters": "(DenseMatrix fv)", "modifiers": "private", "return": "WeightedLocale", "signature": "WeightedLocale naiveBayesClassify(DenseMatrix fv)", "full_signature": "private WeightedLocale naiveBayesClassify(DenseMatrix fv)", "class_method_signature": "LanguageDetector.naiveBayesClassify(DenseMatrix fv)", "testcase": false, "constructor": false}, {"identifier": "sumLogFactorial", "parameters": "(DenseMatrix fv)", "modifiers": "private", "return": "double", "signature": "double sumLogFactorial(DenseMatrix fv)", "full_signature": "private double sumLogFactorial(DenseMatrix fv)", "class_method_signature": "LanguageDetector.sumLogFactorial(DenseMatrix fv)", "testcase": false, "constructor": false}, {"identifier": "tokenize", "parameters": "(String text)", "modifiers": "private", "return": "DenseMatrix", "signature": "DenseMatrix tokenize(String text)", "full_signature": "private DenseMatrix tokenize(String text)", "class_method_signature": "LanguageDetector.tokenize(String text)", "testcase": false, "constructor": false}, {"identifier": "getLanguageModel", "parameters": "()", "modifiers": "public", "return": "LanguageModel", "signature": "LanguageModel getLanguageModel()", "full_signature": "public LanguageModel getLanguageModel()", "class_method_signature": "LanguageDetector.getLanguageModel()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "LanguageDetector.main(String[] args)", "testcase": false, "constructor": false}], "file": "text/nlp/src/main/java/org/openimaj/text/nlp/language/LanguageDetector.java"}, "focal_method": {"identifier": "getLanguageModel", "parameters": "()", "modifiers": "public", "return": "LanguageModel", "body": "public LanguageModel getLanguageModel() {\n\t\treturn this.languageModel;\n\t}", "signature": "LanguageModel getLanguageModel()", "full_signature": "public LanguageModel getLanguageModel()", "class_method_signature": "LanguageDetector.getLanguageModel()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4114800, "url": "https://github.com/sinjax/trendminer-java", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 10, "size": 209307, "license": "licensed"}}