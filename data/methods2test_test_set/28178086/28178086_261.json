{"test_class": {"identifier": "SubMatrixTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/maths/matrices/SubMatrixTest.java"}, "test_case": {"identifier": "testColumns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testColumns() {\n    }", "signature": "void testColumns()", "full_signature": "@Test public void testColumns()", "class_method_signature": "SubMatrixTest.testColumns()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "SubMatrix", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "final double[] m_data;", "modifier": "final", "type": "double[]", "declarator": "m_data", "var_name": "m_data"}, {"original_string": "final int m_row_inc, m_col_inc;", "modifier": "final", "type": "int", "declarator": "m_row_inc", "var_name": "m_row_inc"}, {"original_string": "int m_start, m_nrows, m_ncols;", "modifier": "", "type": "int", "declarator": "m_start", "var_name": "m_start"}, {"original_string": "private static final int PROD_THRESHOLD = 6;", "modifier": "private static final", "type": "int", "declarator": "PROD_THRESHOLD = 6", "var_name": "PROD_THRESHOLD"}], "methods": [{"identifier": "SubMatrix", "parameters": "(final double[] data, final int nrows, final int ncols)", "modifiers": "public", "return": "", "signature": " SubMatrix(final double[] data, final int nrows, final int ncols)", "full_signature": "public  SubMatrix(final double[] data, final int nrows, final int ncols)", "class_method_signature": "SubMatrix.SubMatrix(final double[] data, final int nrows, final int ncols)", "testcase": false, "constructor": true}, {"identifier": "SubMatrix", "parameters": "(final double[] data, final int start, final int nrows,\n            final int ncols, final int rowinc, final int colinc)", "modifiers": "public", "return": "", "signature": " SubMatrix(final double[] data, final int start, final int nrows,\n            final int ncols, final int rowinc, final int colinc)", "full_signature": "public  SubMatrix(final double[] data, final int start, final int nrows,\n            final int ncols, final int rowinc, final int colinc)", "class_method_signature": "SubMatrix.SubMatrix(final double[] data, final int start, final int nrows,\n            final int ncols, final int rowinc, final int colinc)", "testcase": false, "constructor": true}, {"identifier": "SubMatrix", "parameters": "(final SubMatrix m)", "modifiers": "public", "return": "", "signature": " SubMatrix(final SubMatrix m)", "full_signature": "public  SubMatrix(final SubMatrix m)", "class_method_signature": "SubMatrix.SubMatrix(final SubMatrix m)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(final double val)", "modifiers": "public", "return": "void", "signature": "void add(final double val)", "full_signature": "public void add(final double val)", "class_method_signature": "SubMatrix.add(final double val)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final int row, final int col, final double val)", "modifiers": "public", "return": "void", "signature": "void add(final int row, final int col, final double val)", "full_signature": "public void add(final int row, final int col, final double val)", "class_method_signature": "SubMatrix.add(final int row, final int col, final double val)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final SubMatrix m)", "modifiers": "public", "return": "void", "signature": "void add(final SubMatrix m)", "full_signature": "public void add(final SubMatrix m)", "class_method_signature": "SubMatrix.add(final SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "addTo", "parameters": "(SubMatrix m, int i, int j)", "modifiers": "public", "return": "void", "signature": "void addTo(SubMatrix m, int i, int j)", "full_signature": "public void addTo(SubMatrix m, int i, int j)", "class_method_signature": "SubMatrix.addTo(SubMatrix m, int i, int j)", "testcase": false, "constructor": false}, {"identifier": "subTo", "parameters": "(SubMatrix m, int i, int j)", "modifiers": "public", "return": "void", "signature": "void subTo(SubMatrix m, int i, int j)", "full_signature": "public void subTo(SubMatrix m, int i, int j)", "class_method_signature": "SubMatrix.subTo(SubMatrix m, int i, int j)", "testcase": false, "constructor": false}, {"identifier": "chs", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void chs()", "full_signature": "public void chs()", "class_method_signature": "SubMatrix.chs()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final Matrix.MatrixFunction fn)", "modifiers": "public", "return": "void", "signature": "void set(final Matrix.MatrixFunction fn)", "full_signature": "public void set(final Matrix.MatrixFunction fn)", "class_method_signature": "SubMatrix.set(final Matrix.MatrixFunction fn)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final Matrix.MatrixFunction fn)", "modifiers": "public", "return": "void", "signature": "void add(final Matrix.MatrixFunction fn)", "full_signature": "public void add(final Matrix.MatrixFunction fn)", "class_method_signature": "SubMatrix.add(final Matrix.MatrixFunction fn)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final Matrix.MatrixRelativeFunction fn)", "modifiers": "public", "return": "void", "signature": "void set(final Matrix.MatrixRelativeFunction fn)", "full_signature": "public void set(final Matrix.MatrixRelativeFunction fn)", "class_method_signature": "SubMatrix.set(final Matrix.MatrixRelativeFunction fn)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final Matrix.MatrixRelativeFunction fn)", "modifiers": "public", "return": "void", "signature": "void add(final Matrix.MatrixRelativeFunction fn)", "full_signature": "public void add(final Matrix.MatrixRelativeFunction fn)", "class_method_signature": "SubMatrix.add(final Matrix.MatrixRelativeFunction fn)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "SubMatrix", "signature": "SubMatrix clone()", "full_signature": "@Override public SubMatrix clone()", "class_method_signature": "SubMatrix.clone()", "testcase": false, "constructor": false}, {"identifier": "column", "parameters": "(final int c)", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock column(final int c)", "full_signature": "public DataBlock column(final int c)", "class_method_signature": "SubMatrix.column(final int c)", "testcase": false, "constructor": false}, {"identifier": "columns", "parameters": "()", "modifiers": "public", "return": "DataBlockIterator", "signature": "DataBlockIterator columns()", "full_signature": "public DataBlockIterator columns()", "class_method_signature": "SubMatrix.columns()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(final SubMatrix m)", "modifiers": "public", "return": "void", "signature": "void copy(final SubMatrix m)", "full_signature": "public void copy(final SubMatrix m)", "class_method_signature": "SubMatrix.copy(final SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "copyRows", "parameters": "(final SubMatrix src, final boolean[] brows)", "modifiers": "public", "return": "void", "signature": "void copyRows(final SubMatrix src, final boolean[] brows)", "full_signature": "public void copyRows(final SubMatrix src, final boolean[] brows)", "class_method_signature": "SubMatrix.copyRows(final SubMatrix src, final boolean[] brows)", "testcase": false, "constructor": false}, {"identifier": "copyRows", "parameters": "(final SubMatrix src, final int[] irows)", "modifiers": "public", "return": "void", "signature": "void copyRows(final SubMatrix src, final int[] irows)", "full_signature": "public void copyRows(final SubMatrix src, final int[] irows)", "class_method_signature": "SubMatrix.copyRows(final SubMatrix src, final int[] irows)", "testcase": false, "constructor": false}, {"identifier": "copyColumns", "parameters": "(final SubMatrix src, final boolean[] bcols)", "modifiers": "public", "return": "void", "signature": "void copyColumns(final SubMatrix src, final boolean[] bcols)", "full_signature": "public void copyColumns(final SubMatrix src, final boolean[] bcols)", "class_method_signature": "SubMatrix.copyColumns(final SubMatrix src, final boolean[] bcols)", "testcase": false, "constructor": false}, {"identifier": "copyColumns", "parameters": "(final SubMatrix src, final int[] icols)", "modifiers": "public", "return": "void", "signature": "void copyColumns(final SubMatrix src, final int[] icols)", "full_signature": "public void copyColumns(final SubMatrix src, final int[] icols)", "class_method_signature": "SubMatrix.copyColumns(final SubMatrix src, final int[] icols)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(final SubMatrix src, final boolean[] brows, final boolean[] bcols)", "modifiers": "public", "return": "void", "signature": "void copy(final SubMatrix src, final boolean[] brows, final boolean[] bcols)", "full_signature": "public void copy(final SubMatrix src, final boolean[] brows, final boolean[] bcols)", "class_method_signature": "SubMatrix.copy(final SubMatrix src, final boolean[] brows, final boolean[] bcols)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(final SubMatrix src, final int[] irows, final int[] icols)", "modifiers": "public", "return": "void", "signature": "void copy(final SubMatrix src, final int[] irows, final int[] icols)", "full_signature": "public void copy(final SubMatrix src, final int[] irows, final int[] icols)", "class_method_signature": "SubMatrix.copy(final SubMatrix src, final int[] irows, final int[] icols)", "testcase": false, "constructor": false}, {"identifier": "copyTo", "parameters": "(SubMatrix m, int i, int j)", "modifiers": "public", "return": "void", "signature": "void copyTo(SubMatrix m, int i, int j)", "full_signature": "public void copyTo(SubMatrix m, int i, int j)", "class_method_signature": "SubMatrix.copyTo(SubMatrix m, int i, int j)", "testcase": false, "constructor": false}, {"identifier": "setAY", "parameters": "(final double a, final SubMatrix Y)", "modifiers": "public", "return": "void", "signature": "void setAY(final double a, final SubMatrix Y)", "full_signature": "public void setAY(final double a, final SubMatrix Y)", "class_method_signature": "SubMatrix.setAY(final double a, final SubMatrix Y)", "testcase": false, "constructor": false}, {"identifier": "addAY", "parameters": "(final double a, final SubMatrix Y)", "modifiers": "public", "return": "void", "signature": "void addAY(final double a, final SubMatrix Y)", "full_signature": "public void addAY(final double a, final SubMatrix Y)", "class_method_signature": "SubMatrix.addAY(final double a, final SubMatrix Y)", "testcase": false, "constructor": false}, {"identifier": "addXaXt", "parameters": "(double a, DataBlock x)", "modifiers": "public", "return": "void", "signature": "void addXaXt(double a, DataBlock x)", "full_signature": "public void addXaXt(double a, DataBlock x)", "class_method_signature": "SubMatrix.addXaXt(double a, DataBlock x)", "testcase": false, "constructor": false}, {"identifier": "addXaYt", "parameters": "(double a, DataBlock x, DataBlock y)", "modifiers": "public", "return": "void", "signature": "void addXaYt(double a, DataBlock x, DataBlock y)", "full_signature": "public void addXaYt(double a, DataBlock x, DataBlock y)", "class_method_signature": "SubMatrix.addXaYt(double a, DataBlock x, DataBlock y)", "testcase": false, "constructor": false}, {"identifier": "diagonal", "parameters": "()", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock diagonal()", "full_signature": "public DataBlock diagonal()", "class_method_signature": "SubMatrix.diagonal()", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(final SubMatrix ls, final SubMatrix rs)", "modifiers": "public", "return": "void", "signature": "void difference(final SubMatrix ls, final SubMatrix rs)", "full_signature": "public void difference(final SubMatrix ls, final SubMatrix rs)", "class_method_signature": "SubMatrix.difference(final SubMatrix ls, final SubMatrix rs)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(final int r0, final int r1, final int c0,\n            final int c1)", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix extract(final int r0, final int r1, final int c0,\n            final int c1)", "full_signature": "public SubMatrix extract(final int r0, final int r1, final int c0,\n            final int c1)", "class_method_signature": "SubMatrix.extract(final int r0, final int r1, final int c0,\n            final int c1)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(final int r0, final int c0, final int nrows,\n            final int ncols, final int rowinc, final int colinc)", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix extract(final int r0, final int c0, final int nrows,\n            final int ncols, final int rowinc, final int colinc)", "full_signature": "public SubMatrix extract(final int r0, final int c0, final int nrows,\n            final int ncols, final int rowinc, final int colinc)", "class_method_signature": "SubMatrix.extract(final int r0, final int c0, final int nrows,\n            final int ncols, final int rowinc, final int colinc)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final int row, final int col)", "modifiers": "public", "return": "double", "signature": "double get(final int row, final int col)", "full_signature": "public double get(final int row, final int col)", "class_method_signature": "SubMatrix.get(final int row, final int col)", "testcase": false, "constructor": false}, {"identifier": "getColumnsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getColumnsCount()", "full_signature": "public int getColumnsCount()", "class_method_signature": "SubMatrix.getColumnsCount()", "testcase": false, "constructor": false}, {"identifier": "getRowsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowsCount()", "full_signature": "public int getRowsCount()", "class_method_signature": "SubMatrix.getRowsCount()", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(final int dr, final int dc)", "modifiers": "public", "return": "void", "signature": "void move(final int dr, final int dc)", "full_signature": "public void move(final int dr, final int dc)", "class_method_signature": "SubMatrix.move(final int dr, final int dc)", "testcase": false, "constructor": false}, {"identifier": "mul", "parameters": "(final double val)", "modifiers": "public", "return": "void", "signature": "void mul(final double val)", "full_signature": "public void mul(final double val)", "class_method_signature": "SubMatrix.mul(final double val)", "testcase": false, "constructor": false}, {"identifier": "mul", "parameters": "(final int row, final int col, final double val)", "modifiers": "public", "return": "void", "signature": "void mul(final int row, final int col, final double val)", "full_signature": "public void mul(final int row, final int col, final double val)", "class_method_signature": "SubMatrix.mul(final int row, final int col, final double val)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(final SubMatrix m)", "modifiers": "public", "return": "double", "signature": "double dot(final SubMatrix m)", "full_signature": "public double dot(final SubMatrix m)", "class_method_signature": "SubMatrix.dot(final SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "product", "parameters": "(final SubMatrix m, final SubMatrix n)", "modifiers": "public", "return": "void", "signature": "void product(final SubMatrix m, final SubMatrix n)", "full_signature": "public void product(final SubMatrix m, final SubMatrix n)", "class_method_signature": "SubMatrix.product(final SubMatrix m, final SubMatrix n)", "testcase": false, "constructor": false}, {"identifier": "kronecker", "parameters": "(final SubMatrix m, final SubMatrix n)", "modifiers": "public", "return": "void", "signature": "void kronecker(final SubMatrix m, final SubMatrix n)", "full_signature": "public void kronecker(final SubMatrix m, final SubMatrix n)", "class_method_signature": "SubMatrix.kronecker(final SubMatrix m, final SubMatrix n)", "testcase": false, "constructor": false}, {"identifier": "row", "parameters": "(final int r)", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock row(final int r)", "full_signature": "public DataBlock row(final int r)", "class_method_signature": "SubMatrix.row(final int r)", "testcase": false, "constructor": false}, {"identifier": "rows", "parameters": "()", "modifiers": "public", "return": "DataBlockIterator", "signature": "DataBlockIterator rows()", "full_signature": "public DataBlockIterator rows()", "class_method_signature": "SubMatrix.rows()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final double val)", "modifiers": "public", "return": "void", "signature": "void set(final double val)", "full_signature": "public void set(final double val)", "class_method_signature": "SubMatrix.set(final double val)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final int row, final int col, final double value)", "modifiers": "public", "return": "void", "signature": "void set(final int row, final int col, final double value)", "full_signature": "public void set(final int row, final int col, final double value)", "class_method_signature": "SubMatrix.set(final int row, final int col, final double value)", "testcase": false, "constructor": false}, {"identifier": "shift", "parameters": "(final int n)", "modifiers": "public", "return": "void", "signature": "void shift(final int n)", "full_signature": "public void shift(final int n)", "class_method_signature": "SubMatrix.shift(final int n)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(final SubMatrix m)", "modifiers": "public", "return": "void", "signature": "void sub(final SubMatrix m)", "full_signature": "public void sub(final SubMatrix m)", "class_method_signature": "SubMatrix.sub(final SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "subDiagonal", "parameters": "(int pos)", "modifiers": "public", "return": "DataBlock", "signature": "DataBlock subDiagonal(int pos)", "full_signature": "public DataBlock subDiagonal(int pos)", "class_method_signature": "SubMatrix.subDiagonal(int pos)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double sum()", "full_signature": "public double sum()", "class_method_signature": "SubMatrix.sum()", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(final SubMatrix ls, final SubMatrix rs)", "modifiers": "public", "return": "void", "signature": "void sum(final SubMatrix ls, final SubMatrix rs)", "full_signature": "public void sum(final SubMatrix ls, final SubMatrix rs)", "class_method_signature": "SubMatrix.sum(final SubMatrix ls, final SubMatrix rs)", "testcase": false, "constructor": false}, {"identifier": "transpose", "parameters": "()", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix transpose()", "full_signature": "public SubMatrix transpose()", "class_method_signature": "SubMatrix.transpose()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "SubMatrix.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "(double zero)", "modifiers": "public", "return": "boolean", "signature": "boolean isZero(double zero)", "full_signature": "public boolean isZero(double zero)", "class_method_signature": "SubMatrix.isZero(double zero)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(double zero)", "modifiers": "@Deprecated public", "return": "boolean", "signature": "boolean isNull(double zero)", "full_signature": "@Deprecated public boolean isNull(double zero)", "class_method_signature": "SubMatrix.isNull(double zero)", "testcase": false, "constructor": false}, {"identifier": "isDiagonal", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDiagonal()", "full_signature": "public boolean isDiagonal()", "class_method_signature": "SubMatrix.isDiagonal()", "testcase": false, "constructor": false}, {"identifier": "isIdentity", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIdentity()", "full_signature": "public boolean isIdentity()", "class_method_signature": "SubMatrix.isIdentity()", "testcase": false, "constructor": false}, {"identifier": "isLower", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLower()", "full_signature": "public boolean isLower()", "class_method_signature": "SubMatrix.isLower()", "testcase": false, "constructor": false}, {"identifier": "isUpper", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUpper()", "full_signature": "public boolean isUpper()", "class_method_signature": "SubMatrix.isUpper()", "testcase": false, "constructor": false}, {"identifier": "isFull", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isFull()", "full_signature": "private boolean isFull()", "class_method_signature": "SubMatrix.isFull()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SubMatrix.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(String fmt)", "modifiers": "public", "return": "String", "signature": "String toString(String fmt)", "full_signature": "public String toString(String fmt)", "class_method_signature": "SubMatrix.toString(String fmt)", "testcase": false, "constructor": false}, {"identifier": "rowSum", "parameters": "()", "modifiers": "@NewObject public", "return": "DataBlock", "signature": "DataBlock rowSum()", "full_signature": "@NewObject public DataBlock rowSum()", "class_method_signature": "SubMatrix.rowSum()", "testcase": false, "constructor": false}, {"identifier": "columnSum", "parameters": "()", "modifiers": "@NewObject public", "return": "DataBlock", "signature": "DataBlock columnSum()", "full_signature": "@NewObject public DataBlock columnSum()", "class_method_signature": "SubMatrix.columnSum()", "testcase": false, "constructor": false}, {"identifier": "xmy", "parameters": "(SubMatrix x, SubMatrix y)", "modifiers": "public", "return": "void", "signature": "void xmy(SubMatrix x, SubMatrix y)", "full_signature": "public void xmy(SubMatrix x, SubMatrix y)", "class_method_signature": "SubMatrix.xmy(SubMatrix x, SubMatrix y)", "testcase": false, "constructor": false}, {"identifier": "nrm2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double nrm2()", "full_signature": "public double nrm2()", "class_method_signature": "SubMatrix.nrm2()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(int nrows, int ncols)", "modifiers": "public", "return": "void", "signature": "void next(int nrows, int ncols)", "full_signature": "public void next(int nrows, int ncols)", "class_method_signature": "SubMatrix.next(int nrows, int ncols)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void next()", "full_signature": "public void next()", "class_method_signature": "SubMatrix.next()", "testcase": false, "constructor": false}, {"identifier": "hnext", "parameters": "(int ncols)", "modifiers": "public", "return": "void", "signature": "void hnext(int ncols)", "full_signature": "public void hnext(int ncols)", "class_method_signature": "SubMatrix.hnext(int ncols)", "testcase": false, "constructor": false}, {"identifier": "hnext", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void hnext()", "full_signature": "public void hnext()", "class_method_signature": "SubMatrix.hnext()", "testcase": false, "constructor": false}, {"identifier": "vnext", "parameters": "(int nrows)", "modifiers": "public", "return": "void", "signature": "void vnext(int nrows)", "full_signature": "public void vnext(int nrows)", "class_method_signature": "SubMatrix.vnext(int nrows)", "testcase": false, "constructor": false}, {"identifier": "vnext", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void vnext()", "full_signature": "public void vnext()", "class_method_signature": "SubMatrix.vnext()", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "(int nrows, int ncols)", "modifiers": "public", "return": "void", "signature": "void previous(int nrows, int ncols)", "full_signature": "public void previous(int nrows, int ncols)", "class_method_signature": "SubMatrix.previous(int nrows, int ncols)", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void previous()", "full_signature": "public void previous()", "class_method_signature": "SubMatrix.previous()", "testcase": false, "constructor": false}, {"identifier": "hprevious", "parameters": "(int ncols)", "modifiers": "public", "return": "void", "signature": "void hprevious(int ncols)", "full_signature": "public void hprevious(int ncols)", "class_method_signature": "SubMatrix.hprevious(int ncols)", "testcase": false, "constructor": false}, {"identifier": "hprevious", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void hprevious()", "full_signature": "public void hprevious()", "class_method_signature": "SubMatrix.hprevious()", "testcase": false, "constructor": false}, {"identifier": "vprevious", "parameters": "(int nrows)", "modifiers": "public", "return": "void", "signature": "void vprevious(int nrows)", "full_signature": "public void vprevious(int nrows)", "class_method_signature": "SubMatrix.vprevious(int nrows)", "testcase": false, "constructor": false}, {"identifier": "vprevious", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void vprevious()", "full_signature": "public void vprevious()", "class_method_signature": "SubMatrix.vprevious()", "testcase": false, "constructor": false}, {"identifier": "topLeft", "parameters": "()", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix topLeft()", "full_signature": "public SubMatrix topLeft()", "class_method_signature": "SubMatrix.topLeft()", "testcase": false, "constructor": false}, {"identifier": "topLeft", "parameters": "(int nr, int nc)", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix topLeft(int nr, int nc)", "full_signature": "public SubMatrix topLeft(int nr, int nc)", "class_method_signature": "SubMatrix.topLeft(int nr, int nc)", "testcase": false, "constructor": false}, {"identifier": "top", "parameters": "(int nr)", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix top(int nr)", "full_signature": "public SubMatrix top(int nr)", "class_method_signature": "SubMatrix.top(int nr)", "testcase": false, "constructor": false}, {"identifier": "left", "parameters": "(int nc)", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix left(int nc)", "full_signature": "public SubMatrix left(int nc)", "class_method_signature": "SubMatrix.left(int nc)", "testcase": false, "constructor": false}, {"identifier": "bottomRight", "parameters": "()", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix bottomRight()", "full_signature": "public SubMatrix bottomRight()", "class_method_signature": "SubMatrix.bottomRight()", "testcase": false, "constructor": false}, {"identifier": "bottomRight", "parameters": "(int nr, int nc)", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix bottomRight(int nr, int nc)", "full_signature": "public SubMatrix bottomRight(int nr, int nc)", "class_method_signature": "SubMatrix.bottomRight(int nr, int nc)", "testcase": false, "constructor": false}, {"identifier": "bottom", "parameters": "(int nr)", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix bottom(int nr)", "full_signature": "public SubMatrix bottom(int nr)", "class_method_signature": "SubMatrix.bottom(int nr)", "testcase": false, "constructor": false}, {"identifier": "right", "parameters": "(int nc)", "modifiers": "public", "return": "SubMatrix", "signature": "SubMatrix right(int nc)", "full_signature": "public SubMatrix right(int nc)", "class_method_signature": "SubMatrix.right(int nc)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/maths/matrices/SubMatrix.java"}, "focal_method": {"identifier": "columns", "parameters": "()", "modifiers": "public", "return": "DataBlockIterator", "body": "public DataBlockIterator columns() {\n        return new DataBlockIterator(m_data, m_start, m_ncols, m_nrows,\n                m_col_inc, m_row_inc);\n    }", "signature": "DataBlockIterator columns()", "full_signature": "public DataBlockIterator columns()", "class_method_signature": "SubMatrix.columns()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}