{"test_class": {"identifier": "TsCholetteTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/benchmarking/simplets/TsCholetteTest.java"}, "test_case": {"identifier": "testPartialYears", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPartialYears() {\n        TsData x = Data.X.drop(5, 8);\n        TsData y = x.changeFrequency(TsFrequency.Yearly, TsAggregationType.Sum, true);\n        x=addNoise(x);\n        // add some noise to y\n        TsCholette cholette = new TsCholette();\n        TsData xc = cholette.process(x, y);\n        TsData yc = xc.changeFrequency(TsFrequency.Yearly, TsAggregationType.Sum, true);\n        assertTrue(y.distance(yc) < 1e-9);\n        cholette.setRho(1);\n        xc = cholette.process(x, y);\n        yc = xc.changeFrequency(TsFrequency.Yearly, TsAggregationType.Sum, true);\n        assertTrue(y.distance(yc) < 1e-9);\n//        TsDataTable table=new TsDataTable();\n//        table.add(x, xc, y, yc);\n//        System.out.println(table);\n    }", "signature": "void testPartialYears()", "full_signature": "@Test public void testPartialYears()", "class_method_signature": "TsCholetteTest.testPartialYears()", "testcase": true, "constructor": false, "invocations": ["drop", "changeFrequency", "addNoise", "process", "changeFrequency", "assertTrue", "distance", "setRho", "process", "changeFrequency", "assertTrue", "distance"]}, "focal_class": {"identifier": "TsCholette", "superclass": "extends AbstractTsBenchmarking", "interfaces": "", "fields": [{"original_string": "private BiasCorrection bias_ = BiasCorrection.None;", "modifier": "private", "type": "BiasCorrection", "declarator": "bias_ = BiasCorrection.None", "var_name": "bias_"}, {"original_string": "private double rho_ = .9, lambda_;", "modifier": "private", "type": "double", "declarator": "rho_ = .9", "var_name": "rho_"}], "methods": [{"identifier": "correctBias", "parameters": "(TsData s, TsData target)", "modifiers": "private", "return": "TsData", "signature": "TsData correctBias(TsData s, TsData target)", "full_signature": "private TsData correctBias(TsData s, TsData target)", "class_method_signature": "TsCholette.correctBias(TsData s, TsData target)", "testcase": false, "constructor": false}, {"identifier": "getRho", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRho()", "full_signature": "public double getRho()", "class_method_signature": "TsCholette.getRho()", "testcase": false, "constructor": false}, {"identifier": "getBiasCorrection", "parameters": "()", "modifiers": "public", "return": "BiasCorrection", "signature": "BiasCorrection getBiasCorrection()", "full_signature": "public BiasCorrection getBiasCorrection()", "class_method_signature": "TsCholette.getBiasCorrection()", "testcase": false, "constructor": false}, {"identifier": "setBiasCorrection", "parameters": "(BiasCorrection bias)", "modifiers": "public", "return": "void", "signature": "void setBiasCorrection(BiasCorrection bias)", "full_signature": "public void setBiasCorrection(BiasCorrection bias)", "class_method_signature": "TsCholette.setBiasCorrection(BiasCorrection bias)", "testcase": false, "constructor": false}, {"identifier": "archolette", "parameters": "(TsData s, TsData target)", "modifiers": "private", "return": "TsData", "signature": "TsData archolette(TsData s, TsData target)", "full_signature": "private TsData archolette(TsData s, TsData target)", "class_method_signature": "TsCholette.archolette(TsData s, TsData target)", "testcase": false, "constructor": false}, {"identifier": "rwcholette", "parameters": "(TsData s, TsData target)", "modifiers": "private", "return": "TsData", "signature": "TsData rwcholette(TsData s, TsData target)", "full_signature": "private TsData rwcholette(TsData s, TsData target)", "class_method_signature": "TsCholette.rwcholette(TsData s, TsData target)", "testcase": false, "constructor": false}, {"identifier": "setRho", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setRho(double value)", "full_signature": "public void setRho(double value)", "class_method_signature": "TsCholette.setRho(double value)", "testcase": false, "constructor": false}, {"identifier": "setLambda", "parameters": "(double lambda)", "modifiers": "public", "return": "void", "signature": "void setLambda(double lambda)", "full_signature": "public void setLambda(double lambda)", "class_method_signature": "TsCholette.setLambda(double lambda)", "testcase": false, "constructor": false}, {"identifier": "benchmark", "parameters": "(TsData s, TsData constraints)", "modifiers": "@Override protected", "return": "TsData", "signature": "TsData benchmark(TsData s, TsData constraints)", "full_signature": "@Override protected TsData benchmark(TsData s, TsData constraints)", "class_method_signature": "TsCholette.benchmark(TsData s, TsData constraints)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/benchmarking/simplets/TsCholette.java"}, "focal_method": {"identifier": "setRho", "parameters": "(double value)", "modifiers": "public", "return": "void", "body": "public void setRho(double value) {\n        rho_ = value;\n    }", "signature": "void setRho(double value)", "full_signature": "public void setRho(double value)", "class_method_signature": "TsCholette.setRho(double value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}