{"test_class": {"identifier": "SimpleApplicationWrapperTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private SimpleApplicationWrapper wrapper;", "modifier": "private", "type": "SimpleApplicationWrapper", "declarator": "wrapper", "var_name": "wrapper"}, {"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private String namespace = \"http://mobi.com/applications#\";", "modifier": "private", "type": "String", "declarator": "namespace = \"http://mobi.com/applications#\"", "var_name": "namespace"}], "file": "com.mobi.platform.config.impl/src/test/java/com/mobi/platform/config/impl/application/SimpleApplicationWrapperTest.java"}, "test_case": {"identifier": "validateConfigWithNoTitle", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void validateConfigWithNoTitle() {\n        // Setup:\n        Map<String, Object> props = new HashMap<>();\n        props.put(\"id\", \"id\");\n        props.put(\"title\", \"\");\n\n        wrapper.validateConfig(props);\n    }", "signature": "void validateConfigWithNoTitle()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void validateConfigWithNoTitle()", "class_method_signature": "SimpleApplicationWrapperTest.validateConfigWithNoTitle()", "testcase": true, "constructor": false, "invocations": ["put", "put", "validateConfig"]}, "focal_class": {"identifier": "SimpleApplicationWrapper", "superclass": "", "interfaces": "implements ApplicationWrapper", "fields": [{"original_string": "private static final String NAMESPACE = \"http://mobi.com/applications#\";", "modifier": "private static final", "type": "String", "declarator": "NAMESPACE = \"http://mobi.com/applications#\"", "var_name": "NAMESPACE"}, {"original_string": "protected static final String NAME = \"com.mobi.platform.config.application\";", "modifier": "protected static final", "type": "String", "declarator": "NAME = \"com.mobi.platform.config.application\"", "var_name": "NAME"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SimpleApplicationWrapper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SimpleApplicationWrapper.class)", "var_name": "LOG"}, {"original_string": "protected Repository repository;", "modifier": "protected", "type": "Repository", "declarator": "repository", "var_name": "repository"}, {"original_string": "protected ValueFactory factory;", "modifier": "protected", "type": "ValueFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "protected ModelFactory modelFactory;", "modifier": "protected", "type": "ModelFactory", "declarator": "modelFactory", "var_name": "modelFactory"}, {"original_string": "protected ApplicationFactory appFactory;", "modifier": "protected", "type": "ApplicationFactory", "declarator": "appFactory", "var_name": "appFactory"}, {"original_string": "protected String applicationId;", "modifier": "protected", "type": "String", "declarator": "applicationId", "var_name": "applicationId"}], "methods": [{"identifier": "setRepository", "parameters": "(Repository repository)", "modifiers": "@Reference(name = \"repository\") protected", "return": "void", "signature": "void setRepository(Repository repository)", "full_signature": "@Reference(name = \"repository\") protected void setRepository(Repository repository)", "class_method_signature": "SimpleApplicationWrapper.setRepository(Repository repository)", "testcase": false, "constructor": false}, {"identifier": "setFactory", "parameters": "(ValueFactory factory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setFactory(ValueFactory factory)", "full_signature": "@Reference protected void setFactory(ValueFactory factory)", "class_method_signature": "SimpleApplicationWrapper.setFactory(ValueFactory factory)", "testcase": false, "constructor": false}, {"identifier": "setModelFactory", "parameters": "(ModelFactory modelFactory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setModelFactory(ModelFactory modelFactory)", "full_signature": "@Reference protected void setModelFactory(ModelFactory modelFactory)", "class_method_signature": "SimpleApplicationWrapper.setModelFactory(ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "setAppFactory", "parameters": "(ApplicationFactory appFactory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setAppFactory(ApplicationFactory appFactory)", "full_signature": "@Reference protected void setAppFactory(ApplicationFactory appFactory)", "class_method_signature": "SimpleApplicationWrapper.setAppFactory(ApplicationFactory appFactory)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(Map<String, Object> props)", "modifiers": "@Activate protected", "return": "void", "signature": "void start(Map<String, Object> props)", "full_signature": "@Activate protected void start(Map<String, Object> props)", "class_method_signature": "SimpleApplicationWrapper.start(Map<String, Object> props)", "testcase": false, "constructor": false}, {"identifier": "modified", "parameters": "(Map<String, Object> props)", "modifiers": "@Modified protected", "return": "void", "signature": "void modified(Map<String, Object> props)", "full_signature": "@Modified protected void modified(Map<String, Object> props)", "class_method_signature": "SimpleApplicationWrapper.modified(Map<String, Object> props)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Deactivate protected", "return": "void", "signature": "void stop()", "full_signature": "@Deactivate protected void stop()", "class_method_signature": "SimpleApplicationWrapper.stop()", "testcase": false, "constructor": false}, {"identifier": "validateConfig", "parameters": "(Map<String, Object> props)", "modifiers": "@Override public", "return": "void", "signature": "void validateConfig(Map<String, Object> props)", "full_signature": "@Override public void validateConfig(Map<String, Object> props)", "class_method_signature": "SimpleApplicationWrapper.validateConfig(Map<String, Object> props)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "SimpleApplicationWrapper.getId()", "testcase": false, "constructor": false}, {"identifier": "getApplication", "parameters": "()", "modifiers": "@Override public", "return": "Application", "signature": "Application getApplication()", "full_signature": "@Override public Application getApplication()", "class_method_signature": "SimpleApplicationWrapper.getApplication()", "testcase": false, "constructor": false}], "file": "com.mobi.platform.config.impl/src/main/java/com/mobi/platform/config/impl/application/SimpleApplicationWrapper.java"}, "focal_method": {"identifier": "validateConfig", "parameters": "(Map<String, Object> props)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validateConfig(Map<String, Object> props) {\n        ApplicationConfig config = Configurable.createConfigurable(ApplicationConfig.class, props);\n\n        if (config.id().equals(\"\")) {\n            throw new IllegalArgumentException(\"Application property \\\"id\\\" cannot be empty\");\n        } else if (!config.id().matches(\"^[a-zA-Z0-9._\\\\-]+$\")) {\n            throw new IllegalArgumentException(\"Application property \\\"id\\\" is invalid\");\n        }\n        if (config.title().equals(\"\")) {\n            throw new IllegalArgumentException(\"Application property \\\"title\\\" cannot be empty\");\n        }\n    }", "signature": "void validateConfig(Map<String, Object> props)", "full_signature": "@Override public void validateConfig(Map<String, Object> props)", "class_method_signature": "SimpleApplicationWrapper.validateConfig(Map<String, Object> props)", "testcase": false, "constructor": false, "invocations": ["createConfigurable", "equals", "id", "matches", "id", "equals", "title"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}