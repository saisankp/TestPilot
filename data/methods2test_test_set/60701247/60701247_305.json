{"test_class": {"identifier": "ApkPackageTest", "superclass": "", "interfaces": "", "fields": [], "file": "android/testSrc/com/android/tools/idea/apk/debugging/ApkPackageTest.java"}, "test_case": {"identifier": "addSubpackage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void addSubpackage() {\n    ApkPackage aPackage = new ApkPackage(\"a\", null);\n    assertEquals(\"a\", aPackage.getName());\n    assertEquals(\"a\", aPackage.getFqn());\n    assertNull(aPackage.getParent());\n\n    ApkPackage bPackage = aPackage.addSubpackage(\"b\");\n    assertEquals(\"b\", bPackage.getName());\n    assertEquals(\"a.b\", bPackage.getFqn());\n    assertSame(aPackage, bPackage.getParent());\n    assertThat(aPackage.getSubpackages()).containsExactly(bPackage);\n\n    ApkPackage cPackage = bPackage.addSubpackage(\"c\");\n    assertEquals(\"c\", cPackage.getName());\n    assertEquals(\"a.b.c\", cPackage.getFqn());\n    assertSame(bPackage, cPackage.getParent());\n    assertThat(bPackage.getSubpackages()).containsExactly(cPackage);\n  }", "signature": "void addSubpackage()", "full_signature": "@Test public void addSubpackage()", "class_method_signature": "ApkPackageTest.addSubpackage()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getName", "assertEquals", "getFqn", "assertNull", "getParent", "addSubpackage", "assertEquals", "getName", "assertEquals", "getFqn", "assertSame", "getParent", "containsExactly", "assertThat", "getSubpackages", "addSubpackage", "assertEquals", "getName", "assertEquals", "getFqn", "assertSame", "getParent", "containsExactly", "assertThat", "getSubpackages"]}, "focal_class": {"identifier": "ApkPackage", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NotNull private final String myName;", "modifier": "@NotNull private final", "type": "String", "declarator": "myName", "var_name": "myName"}, {"original_string": "@NotNull private final String myFqn;", "modifier": "@NotNull private final", "type": "String", "declarator": "myFqn", "var_name": "myFqn"}, {"original_string": "@Nullable private final ApkPackage myParent;", "modifier": "@Nullable private final", "type": "ApkPackage", "declarator": "myParent", "var_name": "myParent"}, {"original_string": "@NotNull private final Map<String, ApkPackage> mySubpackagesByName = new HashMap<>();", "modifier": "@NotNull private final", "type": "Map<String, ApkPackage>", "declarator": "mySubpackagesByName = new HashMap<>()", "var_name": "mySubpackagesByName"}, {"original_string": "@NotNull private final Map<String, ApkClass> myClassesByName = new HashMap<>();", "modifier": "@NotNull private final", "type": "Map<String, ApkClass>", "declarator": "myClassesByName = new HashMap<>()", "var_name": "myClassesByName"}], "methods": [{"identifier": "ApkPackage", "parameters": "(@NotNull String name, @Nullable ApkPackage parent)", "modifiers": "public", "return": "", "signature": " ApkPackage(@NotNull String name, @Nullable ApkPackage parent)", "full_signature": "public  ApkPackage(@NotNull String name, @Nullable ApkPackage parent)", "class_method_signature": "ApkPackage.ApkPackage(@NotNull String name, @Nullable ApkPackage parent)", "testcase": false, "constructor": true}, {"identifier": "getSubpackages", "parameters": "()", "modifiers": "@NotNull public", "return": "Collection<ApkPackage>", "signature": "Collection<ApkPackage> getSubpackages()", "full_signature": "@NotNull public Collection<ApkPackage> getSubpackages()", "class_method_signature": "ApkPackage.getSubpackages()", "testcase": false, "constructor": false}, {"identifier": "findSubpackage", "parameters": "(@NotNull String name)", "modifiers": "@Nullable public", "return": "ApkPackage", "signature": "ApkPackage findSubpackage(@NotNull String name)", "full_signature": "@Nullable public ApkPackage findSubpackage(@NotNull String name)", "class_method_signature": "ApkPackage.findSubpackage(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getClasses", "parameters": "()", "modifiers": "@NotNull public", "return": "Collection<ApkClass>", "signature": "Collection<ApkClass> getClasses()", "full_signature": "@NotNull public Collection<ApkClass> getClasses()", "class_method_signature": "ApkPackage.getClasses()", "testcase": false, "constructor": false}, {"identifier": "findClass", "parameters": "(@NotNull String name)", "modifiers": "@Nullable public", "return": "ApkClass", "signature": "ApkClass findClass(@NotNull String name)", "full_signature": "@Nullable public ApkClass findClass(@NotNull String name)", "class_method_signature": "ApkPackage.findClass(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Nullable public", "return": "ApkPackage", "signature": "ApkPackage getParent()", "full_signature": "@Nullable public ApkPackage getParent()", "class_method_signature": "ApkPackage.getParent()", "testcase": false, "constructor": false}, {"identifier": "addSubpackage", "parameters": "(@NotNull String name)", "modifiers": "@NotNull public", "return": "ApkPackage", "signature": "ApkPackage addSubpackage(@NotNull String name)", "full_signature": "@NotNull public ApkPackage addSubpackage(@NotNull String name)", "class_method_signature": "ApkPackage.addSubpackage(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "addClass", "parameters": "(@NotNull String name)", "modifiers": "@NotNull public", "return": "ApkClass", "signature": "ApkClass addClass(@NotNull String name)", "full_signature": "@NotNull public ApkClass addClass(@NotNull String name)", "class_method_signature": "ApkPackage.addClass(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getName()", "full_signature": "@NotNull public String getName()", "class_method_signature": "ApkPackage.getName()", "testcase": false, "constructor": false}, {"identifier": "getFqn", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getFqn()", "full_signature": "@NotNull public String getFqn()", "class_method_signature": "ApkPackage.getFqn()", "testcase": false, "constructor": false}, {"identifier": "doSubpackagesHaveClasses", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean doSubpackagesHaveClasses()", "full_signature": "public boolean doSubpackagesHaveClasses()", "class_method_signature": "ApkPackage.doSubpackagesHaveClasses()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ApkPackage.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ApkPackage.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ApkPackage.toString()", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/apk/debugging/ApkPackage.java"}, "focal_method": {"identifier": "addSubpackage", "parameters": "(@NotNull String name)", "modifiers": "@NotNull public", "return": "ApkPackage", "body": "@NotNull\n  public ApkPackage addSubpackage(@NotNull String name) {\n    return mySubpackagesByName.computeIfAbsent(name, k -> new ApkPackage(name, this));\n  }", "signature": "ApkPackage addSubpackage(@NotNull String name)", "full_signature": "@NotNull public ApkPackage addSubpackage(@NotNull String name)", "class_method_signature": "ApkPackage.addSubpackage(@NotNull String name)", "testcase": false, "constructor": false, "invocations": ["computeIfAbsent"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}