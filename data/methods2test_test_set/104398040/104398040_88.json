{"test_class": {"identifier": "AddPropertyTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/operations/properties/AddPropertyTest.java"}, "test_case": {"identifier": "fileDoesNotExistTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fileDoesNotExistTest() {\n        AddProperty addProperty = new AddProperty(\"foo\", \"boo\").relative(\"/src/main/resources/application_zeta.properties\");\n        TOExecutionResult executionResult = addProperty.execution(transformedAppFolder, transformationContext);\n        assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR);\n        assertEquals(executionResult.getException().getClass(), TransformationOperationException.class);\n        assertEquals(executionResult.getException().getMessage(), \"Property file could not be modified\");\n        assertEquals(executionResult.getException().getCause().getClass(), FileNotFoundException.class);\n        assertEquals(executionResult.getException().getCause().getMessage(), new File(transformedAppFolder, \"/src/main/resources/application_zeta.properties\").getAbsolutePath() + \" (No such file or directory)\");\n    }", "signature": "void fileDoesNotExistTest()", "full_signature": "@Test public void fileDoesNotExistTest()", "class_method_signature": "AddPropertyTest.fileDoesNotExistTest()", "testcase": true, "constructor": false, "invocations": ["relative", "execution", "assertEquals", "getType", "assertEquals", "getClass", "getException", "assertEquals", "getMessage", "getException", "assertEquals", "getClass", "getCause", "getException", "assertEquals", "getMessage", "getCause", "getException", "getAbsolutePath"]}, "focal_class": {"identifier": "AddProperty", "superclass": "extends TransformationOperation<AddProperty>", "interfaces": "", "fields": [{"original_string": "private static final String DESCRIPTION = \"Add new property (%s = %s) to file %s\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Add new property (%s = %s) to file %s\"", "var_name": "DESCRIPTION"}, {"original_string": "private String propertyName;", "modifier": "private", "type": "String", "declarator": "propertyName", "var_name": "propertyName"}, {"original_string": "private String propertyValue;", "modifier": "private", "type": "String", "declarator": "propertyValue", "var_name": "propertyValue"}], "methods": [{"identifier": "AddProperty", "parameters": "()", "modifiers": "public", "return": "", "signature": " AddProperty()", "full_signature": "public  AddProperty()", "class_method_signature": "AddProperty.AddProperty()", "testcase": false, "constructor": true}, {"identifier": "AddProperty", "parameters": "(String propertyName, String propertyValue)", "modifiers": "public", "return": "", "signature": " AddProperty(String propertyName, String propertyValue)", "full_signature": "public  AddProperty(String propertyName, String propertyValue)", "class_method_signature": "AddProperty.AddProperty(String propertyName, String propertyValue)", "testcase": false, "constructor": true}, {"identifier": "setPropertyName", "parameters": "(String propertyName)", "modifiers": "public", "return": "AddProperty", "signature": "AddProperty setPropertyName(String propertyName)", "full_signature": "public AddProperty setPropertyName(String propertyName)", "class_method_signature": "AddProperty.setPropertyName(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "setPropertyValue", "parameters": "(String propertyValue)", "modifiers": "public", "return": "AddProperty", "signature": "AddProperty setPropertyValue(String propertyValue)", "full_signature": "public AddProperty setPropertyValue(String propertyValue)", "class_method_signature": "AddProperty.setPropertyValue(String propertyValue)", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPropertyName()", "full_signature": "public String getPropertyName()", "class_method_signature": "AddProperty.getPropertyName()", "testcase": false, "constructor": false}, {"identifier": "getPropertyValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPropertyValue()", "full_signature": "public String getPropertyValue()", "class_method_signature": "AddProperty.getPropertyValue()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "AddProperty.getDescription()", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected", "return": "TOExecutionResult", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "AddProperty.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(BufferedReader reader, BufferedWriter writer, String regex, String replacement)", "modifiers": "private", "return": "String", "signature": "String replace(BufferedReader reader, BufferedWriter writer, String regex, String replacement)", "full_signature": "private String replace(BufferedReader reader, BufferedWriter writer, String regex, String replacement)", "class_method_signature": "AddProperty.replace(BufferedReader reader, BufferedWriter writer, String regex, String replacement)", "testcase": false, "constructor": false}, {"identifier": "addProperty", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "private", "return": "TOExecutionResult", "signature": "TOExecutionResult addProperty(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "private TOExecutionResult addProperty(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "AddProperty.addProperty(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") private", "return": "TOExecutionResult", "signature": "TOExecutionResult setProperty(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") private TOExecutionResult setProperty(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "AddProperty.setProperty(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/operations/properties/AddProperty.java"}, "focal_method": {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected", "return": "TOExecutionResult", "body": "@Override\n    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\")\n    protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext) {\n        FileInputStream fileInputStream = null;\n        TOExecutionResult result = null;\n        File fileToBeChanged = getAbsoluteFile(transformedAppFolder, transformationContext);\n        try {\n            Properties properties = new Properties();\n            fileInputStream = new FileInputStream(fileToBeChanged);\n            properties.load(fileInputStream);\n            fileInputStream.close();\n\n            //Add Property\n            if(!properties.containsKey(propertyName)) {\n                result = addProperty(transformedAppFolder, transformationContext);\n            } else {\n                //Set Property\n                result = setProperty(transformedAppFolder, transformationContext);\n            }\n        } catch (IOException e) {\n            result = TOExecutionResult.error(this, new TransformationOperationException(\"Property file could not be modified\", e));\n        } finally {\n            if (fileInputStream != null) try {\n                fileInputStream.close();\n            } catch (IOException e) {\n                result.addWarning(e);\n            }\n        }\n        return result;\n    }", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "AddProperty.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false, "invocations": ["getAbsoluteFile", "load", "close", "containsKey", "addProperty", "setProperty", "error", "close", "addWarning"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}