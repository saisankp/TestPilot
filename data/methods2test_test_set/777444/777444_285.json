{"test_class": {"identifier": "LightstreamerDetectorTest", "superclass": "extends BaseDetectorTest", "interfaces": "", "fields": [{"original_string": "LightstreamerDetector detector = new LightstreamerDetector();", "modifier": "", "type": "LightstreamerDetector", "declarator": "detector = new LightstreamerDetector()", "var_name": "detector"}], "file": "agent/core/src/test/java/org/jolokia/detector/LightstreamerDetectorTest.java"}, "test_case": {"identifier": "testDetect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDetect() throws MalformedObjectNameException, AttributeNotFoundException, MBeanException, ReflectionException, InstanceNotFoundException {\n        String version = \"6.0.1\";\n        MBeanServer mockServer = createMock(MBeanServer.class);\n        ObjectName oName = new ObjectName(\"com.lightstreamer:type=Server\");\n        expect(mockServer.queryNames(new ObjectName(\"com.lightstreamer:type=Server\"), null)).\n                andReturn(new HashSet<ObjectName>(Arrays.asList(oName))).anyTimes();\n        expect(mockServer.isRegistered(oName)).andStubReturn(true);\n        expect(mockServer.getAttribute(oName,\"LSVersion\")).andStubReturn(version);\n        replay(mockServer);\n\n        ServerHandle handle = detector.detect(getMBeanServerManager(mockServer));\n        assertNotNull(handle);\n        assertEquals(handle.getVersion(),version);\n    }", "signature": "void testDetect()", "full_signature": "@Test public void testDetect()", "class_method_signature": "LightstreamerDetectorTest.testDetect()", "testcase": true, "constructor": false, "invocations": ["createMock", "anyTimes", "andReturn", "expect", "queryNames", "asList", "andStubReturn", "expect", "isRegistered", "andStubReturn", "expect", "getAttribute", "replay", "detect", "getMBeanServerManager", "assertNotNull", "assertEquals", "getVersion"]}, "focal_class": {"identifier": "LightstreamerDetector", "superclass": "extends AbstractServerDetector", "interfaces": "", "fields": [{"original_string": "private static final String[] SYSTEM_PROERTY_NAMES = new String[]{\n        \"com.lightstreamer.internal_lib_path\",\n        \"com.lightstreamer.kernel_lib_path\",\n        \"com.lightstreamer.logging_lib_path\",\n        \"com.lightstreamer.database_lib_path\"};", "modifier": "private static final", "type": "String[]", "declarator": "SYSTEM_PROERTY_NAMES = new String[]{\n        \"com.lightstreamer.internal_lib_path\",\n        \"com.lightstreamer.kernel_lib_path\",\n        \"com.lightstreamer.logging_lib_path\",\n        \"com.lightstreamer.database_lib_path\"}", "var_name": "SYSTEM_PROERTY_NAMES"}, {"original_string": "private static final int LIGHTSTREAMER_DETECT_TIMEOUT = 5 * 60 * 1000;", "modifier": "private static final", "type": "int", "declarator": "LIGHTSTREAMER_DETECT_TIMEOUT = 5 * 60 * 1000", "var_name": "LIGHTSTREAMER_DETECT_TIMEOUT"}, {"original_string": "private static final int LIGHTSTREAMER_DETECT_INTERVAL = 200;", "modifier": "private static final", "type": "int", "declarator": "LIGHTSTREAMER_DETECT_INTERVAL = 200", "var_name": "LIGHTSTREAMER_DETECT_INTERVAL"}, {"original_string": "private static final int LIGHTSTREAMER_DETECT_FINAL_DELAY = 500;", "modifier": "private static final", "type": "int", "declarator": "LIGHTSTREAMER_DETECT_FINAL_DELAY = 500", "var_name": "LIGHTSTREAMER_DETECT_FINAL_DELAY"}, {"original_string": "private static final String LIGHTSTREAMER_MBEAN_CLASS = \"com.lightstreamer.jmx.ServerMBean\";", "modifier": "private static final", "type": "String", "declarator": "LIGHTSTREAMER_MBEAN_CLASS = \"com.lightstreamer.jmx.ServerMBean\"", "var_name": "LIGHTSTREAMER_MBEAN_CLASS"}], "methods": [{"identifier": "detect", "parameters": "(MBeanServerExecutor pMBeanServerExecutor)", "modifiers": "public", "return": "ServerHandle", "signature": "ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor)", "full_signature": "public ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor)", "class_method_signature": "LightstreamerDetector.detect(MBeanServerExecutor pMBeanServerExecutor)", "testcase": false, "constructor": false}, {"identifier": "jvmAgentStartup", "parameters": "(Instrumentation instrumentation)", "modifiers": "@Override public", "return": "void", "signature": "void jvmAgentStartup(Instrumentation instrumentation)", "full_signature": "@Override public void jvmAgentStartup(Instrumentation instrumentation)", "class_method_signature": "LightstreamerDetector.jvmAgentStartup(Instrumentation instrumentation)", "testcase": false, "constructor": false}, {"identifier": "isLightStreamer", "parameters": "(Instrumentation instrumentation)", "modifiers": "protected", "return": "boolean", "signature": "boolean isLightStreamer(Instrumentation instrumentation)", "full_signature": "protected boolean isLightStreamer(Instrumentation instrumentation)", "class_method_signature": "LightstreamerDetector.isLightStreamer(Instrumentation instrumentation)", "testcase": false, "constructor": false}, {"identifier": "awaitLightstreamerMBeans", "parameters": "(Instrumentation instrumentation)", "modifiers": "private", "return": "void", "signature": "void awaitLightstreamerMBeans(Instrumentation instrumentation)", "full_signature": "private void awaitLightstreamerMBeans(Instrumentation instrumentation)", "class_method_signature": "LightstreamerDetector.awaitLightstreamerMBeans(Instrumentation instrumentation)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/detector/LightstreamerDetector.java"}, "focal_method": {"identifier": "detect", "parameters": "(MBeanServerExecutor pMBeanServerExecutor)", "modifiers": "public", "return": "ServerHandle", "body": "public ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor) {\n        String serverVersion = getSingleStringAttribute(pMBeanServerExecutor, \"com.lightstreamer:type=Server\", \"LSVersion\");\n        if (serverVersion != null) {\n            return new ServerHandle(\"LightStreamer\", \"LightStreamer\", serverVersion, null);\n        }\n        return null;\n    }", "signature": "ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor)", "full_signature": "public ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor)", "class_method_signature": "LightstreamerDetector.detect(MBeanServerExecutor pMBeanServerExecutor)", "testcase": false, "constructor": false, "invocations": ["getSingleStringAttribute"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}