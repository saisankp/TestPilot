{"test_class": {"identifier": "DefaultTemplateContainerTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-templates/src/test/java/org/drools/template/parser/DefaultTemplateContainerTest.java"}, "test_case": {"identifier": "testParseTemplate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseTemplate() {\n        InputStream is = DefaultTemplateContainerTest.class.getResourceAsStream( \"/templates/test_template_simple.drl\" );\n        DefaultTemplateContainer t = new DefaultTemplateContainer( is );\n        assertEquals( \"package This_is_a_ruleset;\\n\", t.getHeader() );\n        assertEquals( 1, t.getColumns().length );\n        assertEquals( \"name\", t.getColumns()[ 0 ].getName() );\n        Map<String, RuleTemplate> templates = t.getTemplates();\n        assertEquals( 1, templates.size() );\n        RuleTemplate template = templates.get( \"template1\" );\n        assertNotNull( template );\n        List<TemplateColumn> columns = template.getColumns();\n        assertEquals( 1, columns.size() );\n        TemplateColumn column = (TemplateColumn) columns.get( 0 );\n        assertEquals( \"name\", column.getName() );\n        String contents = template.getContents();\n        assertTrue( contents.startsWith( \"rule \\\"How cool is @{name} @{row.rowNumber}\\\"\" ) );\n        assertTrue( contents.endsWith( \"then\\nend\\n\" ) );\n    }", "signature": "void testParseTemplate()", "full_signature": "@Test public void testParseTemplate()", "class_method_signature": "DefaultTemplateContainerTest.testParseTemplate()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "assertEquals", "getHeader", "assertEquals", "getColumns", "assertEquals", "getName", "getColumns", "getTemplates", "assertEquals", "size", "get", "assertNotNull", "getColumns", "assertEquals", "size", "get", "assertEquals", "getName", "getContents", "assertTrue", "startsWith", "assertTrue", "endsWith"]}, "focal_class": {"identifier": "DefaultTemplateContainer", "superclass": "", "interfaces": "implements TemplateContainer", "fields": [{"original_string": "private String header;", "modifier": "private", "type": "String", "declarator": "header", "var_name": "header"}, {"original_string": "private Map<String, Column> columnMap = new HashMap<String, Column>();", "modifier": "private", "type": "Map<String, Column>", "declarator": "columnMap = new HashMap<String, Column>()", "var_name": "columnMap"}, {"original_string": "private List<Column> columns = new ArrayList<Column>();", "modifier": "private", "type": "List<Column>", "declarator": "columns = new ArrayList<Column>()", "var_name": "columns"}, {"original_string": "private Map<String, RuleTemplate> templates = new HashMap<String, RuleTemplate>();", "modifier": "private", "type": "Map<String, RuleTemplate>", "declarator": "templates = new HashMap<String, RuleTemplate>()", "var_name": "templates"}, {"original_string": "private boolean replaceOptionals;", "modifier": "private", "type": "boolean", "declarator": "replaceOptionals", "var_name": "replaceOptionals"}], "methods": [{"identifier": "DefaultTemplateContainer", "parameters": "(final String template)", "modifiers": "public", "return": "", "signature": " DefaultTemplateContainer(final String template)", "full_signature": "public  DefaultTemplateContainer(final String template)", "class_method_signature": "DefaultTemplateContainer.DefaultTemplateContainer(final String template)", "testcase": false, "constructor": true}, {"identifier": "DefaultTemplateContainer", "parameters": "(final InputStream templateStream)", "modifiers": "public", "return": "", "signature": " DefaultTemplateContainer(final InputStream templateStream)", "full_signature": "public  DefaultTemplateContainer(final InputStream templateStream)", "class_method_signature": "DefaultTemplateContainer.DefaultTemplateContainer(final InputStream templateStream)", "testcase": false, "constructor": true}, {"identifier": "DefaultTemplateContainer", "parameters": "(final String template, boolean replaceOptionals)", "modifiers": "public", "return": "", "signature": " DefaultTemplateContainer(final String template, boolean replaceOptionals)", "full_signature": "public  DefaultTemplateContainer(final String template, boolean replaceOptionals)", "class_method_signature": "DefaultTemplateContainer.DefaultTemplateContainer(final String template, boolean replaceOptionals)", "testcase": false, "constructor": true}, {"identifier": "DefaultTemplateContainer", "parameters": "(final InputStream templateStream, boolean replaceOptionals)", "modifiers": "public", "return": "", "signature": " DefaultTemplateContainer(final InputStream templateStream, boolean replaceOptionals)", "full_signature": "public  DefaultTemplateContainer(final InputStream templateStream, boolean replaceOptionals)", "class_method_signature": "DefaultTemplateContainer.DefaultTemplateContainer(final InputStream templateStream, boolean replaceOptionals)", "testcase": false, "constructor": true}, {"identifier": "validateTemplate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateTemplate()", "full_signature": "private void validateTemplate()", "class_method_signature": "DefaultTemplateContainer.validateTemplate()", "testcase": false, "constructor": false}, {"identifier": "parseTemplate", "parameters": "(final InputStream templateStream)", "modifiers": "private", "return": "void", "signature": "void parseTemplate(final InputStream templateStream)", "full_signature": "private void parseTemplate(final InputStream templateStream)", "class_method_signature": "DefaultTemplateContainer.parseTemplate(final InputStream templateStream)", "testcase": false, "constructor": false}, {"identifier": "removeSingleLineComment", "parameters": "(String line)", "modifiers": "private", "return": "String", "signature": "String removeSingleLineComment(String line)", "full_signature": "private String removeSingleLineComment(String line)", "class_method_signature": "DefaultTemplateContainer.removeSingleLineComment(String line)", "testcase": false, "constructor": false}, {"identifier": "addTemplate", "parameters": "(RuleTemplate template)", "modifiers": "private", "return": "void", "signature": "void addTemplate(RuleTemplate template)", "full_signature": "private void addTemplate(RuleTemplate template)", "class_method_signature": "DefaultTemplateContainer.addTemplate(RuleTemplate template)", "testcase": false, "constructor": false}, {"identifier": "getTemplates", "parameters": "()", "modifiers": "public", "return": "Map<String, RuleTemplate>", "signature": "Map<String, RuleTemplate> getTemplates()", "full_signature": "public Map<String, RuleTemplate> getTemplates()", "class_method_signature": "DefaultTemplateContainer.getTemplates()", "testcase": false, "constructor": false}, {"identifier": "addColumn", "parameters": "(Column c)", "modifiers": "private", "return": "void", "signature": "void addColumn(Column c)", "full_signature": "private void addColumn(Column c)", "class_method_signature": "DefaultTemplateContainer.addColumn(Column c)", "testcase": false, "constructor": false}, {"identifier": "getColumns", "parameters": "()", "modifiers": "public", "return": "Column[]", "signature": "Column[] getColumns()", "full_signature": "public Column[] getColumns()", "class_method_signature": "DefaultTemplateContainer.getColumns()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHeader()", "full_signature": "public String getHeader()", "class_method_signature": "DefaultTemplateContainer.getHeader()", "testcase": false, "constructor": false}, {"identifier": "closeStream", "parameters": "(final InputStream stream)", "modifiers": "private", "return": "void", "signature": "void closeStream(final InputStream stream)", "full_signature": "private void closeStream(final InputStream stream)", "class_method_signature": "DefaultTemplateContainer.closeStream(final InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "getColumn", "parameters": "(final String name)", "modifiers": "public", "return": "Column", "signature": "Column getColumn(final String name)", "full_signature": "public Column getColumn(final String name)", "class_method_signature": "DefaultTemplateContainer.getColumn(final String name)", "testcase": false, "constructor": false}], "file": "drools-templates/src/main/java/org/drools/template/parser/DefaultTemplateContainer.java"}, "focal_method": {"identifier": "parseTemplate", "parameters": "(final InputStream templateStream)", "modifiers": "private", "return": "void", "body": "private void parseTemplate(final InputStream templateStream) {\n        try {\n            final ColumnFactory cf = new ColumnFactory();\n            final BufferedReader templateReader = new BufferedReader(\n                    new InputStreamReader(templateStream, IoUtils.UTF8_CHARSET));\n            String line;\n\n            boolean inTemplate = false;\n            boolean inHeader = false;\n            boolean inContents = false;\n            boolean inMultiLineComment = false;\n\n            RuleTemplate template = null;\n            StringBuilder header = new StringBuilder();\n            StringBuilder contents = new StringBuilder();\n\n            while ((line = templateReader.readLine()) != null) {\n\n                if (inMultiLineComment) {\n                    int commentEnd = line.indexOf( \"*/\" );\n                    if (commentEnd >= 0) {\n                        line = line.substring( commentEnd+2 );\n                        inMultiLineComment = false;\n                    } else {\n                        line = \"\";\n                    }\n                } else {\n                    int commentStart = line.indexOf( \"/*\" );\n                    if (commentStart >= 0) {\n                        int commentEnd = line.indexOf( \"*/\" );\n                        if (commentEnd > commentStart) {\n                            line = line.substring( 0, commentStart ) + line.substring( commentEnd+2 );\n                        } else {\n                            line = line.substring( 0, commentStart );\n                            inMultiLineComment = true;\n                        }\n                    }\n                }\n\n                String trimmed = line.trim();\n                if (trimmed.length() > 0) {\n                    if (trimmed.startsWith(\"template header\")) {\n                        inHeader = true;\n\n                    } else if (trimmed.startsWith(\"template \")) {\n                        inTemplate = true;\n                        inHeader = false;\n                        String quotedName = trimmed.substring(8).trim();\n                        quotedName = quotedName.substring(1, quotedName.length() - 1);\n                        template = new RuleTemplate(quotedName, this, replaceOptionals );\n                        addTemplate(template);\n\n                    } else if (trimmed.startsWith(\"package \")) {\n                        if ( !inHeader ) {\n                            throw new DecisionTableParseException(\n                                    \"Missing header\");\n                        }\n                        inHeader = false;\n                        header.append(line).append(\"\\n\");\n\n                    } else if (trimmed.startsWith(\"import \")) {\n                        inHeader = false;\n                        header.append(line).append(\"\\n\");\n\n                    } else if (inHeader) {\n                        addColumn(cf.getColumn(trimmed));\n\n                    } else if (!inTemplate) {\n                        header.append(line).append(\"\\n\");\n\n                    } else if (!inContents && trimmed.startsWith(\"rule \")) {\n                        inContents = true;\n                        contents.append(line).append(\"\\n\");\n\n                    } else if (trimmed.equals(\"end template\")) {\n                        template.setContents(contents.toString());\n                        contents.setLength(0);\n                        inTemplate = false;\n                        inContents = false;\n\n                    } else if (inContents) {\n                        contents.append(removeSingleLineComment(line)).append( \"\\n\");\n\n                    } else {\n                        template.addColumn(trimmed);\n                    }\n                }\n\n            }\n            if (inTemplate) {\n                throw new DecisionTableParseException(\"Missing end template\");\n            }\n            this.header = header.toString();\n\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (templateStream != null) { closeStream(templateStream); }\n        }\n    }", "signature": "void parseTemplate(final InputStream templateStream)", "full_signature": "private void parseTemplate(final InputStream templateStream)", "class_method_signature": "DefaultTemplateContainer.parseTemplate(final InputStream templateStream)", "testcase": false, "constructor": false, "invocations": ["readLine", "indexOf", "substring", "indexOf", "indexOf", "substring", "substring", "substring", "trim", "length", "startsWith", "startsWith", "trim", "substring", "substring", "length", "addTemplate", "startsWith", "append", "append", "startsWith", "append", "append", "addColumn", "getColumn", "append", "append", "startsWith", "append", "append", "equals", "setContents", "toString", "setLength", "append", "append", "removeSingleLineComment", "addColumn", "toString", "closeStream"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}