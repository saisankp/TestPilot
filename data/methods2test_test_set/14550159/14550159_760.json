{"test_class": {"identifier": "WadlProcessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "everrest-core/src/test/java/org/everrest/core/wadl/WadlProcessorTest.java"}, "test_case": {"identifier": "testBaseWadlGenerator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBaseWadlGenerator() throws Exception {\n        ResourceDescriptor ard = new AbstractResourceDescriptor(Resource1.class);\n        WadlProcessor wadlProcessor = new WadlProcessor();\n        Application app = wadlProcessor.process(ard, new URI(\"http://localhost:8080/ws/rs\"));\n\n        JAXBContext jctx = JAXBContext.newInstance(Application.class);\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        jctx.createMarshaller().marshal(app, bout);\n        System.out.println(new String(bout.toByteArray()));\n\n        DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();\n        f.setNamespaceAware(true);\n        Document doc = f.newDocumentBuilder().parse(new ByteArrayInputStream(bout.toByteArray()));\n\n        XPath xp = XPathFactory.newInstance().newXPath();\n        xp.setNamespaceContext(new DummyNamespaceContext());\n        String str = (String)xp.evaluate(\"count(//wadl:resource)\", doc, STRING);\n        assertEquals(\"4\", str);\n        str = (String)xp.evaluate(\"count(//wadl:resource[@path='a/{b}'])\", doc, STRING);\n        assertEquals(\"1\", str);\n        str = (String)xp.evaluate(\"count(//wadl:resource[@path='{c}/{d}'])\", doc, STRING);\n        assertEquals(\"1\", str);\n        str = (String)xp.evaluate(\"count(//wadl:resource[@path='{c}/{d}/{e}'])\", doc, STRING);\n        assertEquals(\"1\", str);\n        str = (String)xp.evaluate(\"count(//wadl:resource[@path='sub/{x}'])\", doc, STRING);\n        assertEquals(\"1\", str);\n\n        // discover resource methods\n        str = (String)xp.evaluate(\"count(//wadl:resource[@path='a/{b}']/wadl:method)\", doc, STRING);\n        assertEquals(\"5\", str);\n        NodeList nl = (NodeList)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:method[@id='m1']/@name\", doc, NODESET);\n        assertEquals(1, nl.getLength());\n        boolean get = false;\n        for (int i = 0; i < nl.getLength(); i++) {\n            String t = nl.item(i).getTextContent();\n            if (t.equals(\"GET\")) {\n                get = true;\n            }\n        }\n        assertTrue(get);\n        for (int i = 0; i < nl.getLength(); i++) {\n            System.out.println(\">>>>> resource method : \" + nl.item(i).getTextContent());\n        }\n        str = (String)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:method[@id='m2']/@name\", doc, STRING);\n        assertEquals(\"POST\", str);\n        str = (String)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:method[@id='m2']/wadl:request/wadl:param[@style='header']/@name\", doc, STRING);\n        assertEquals(\"content-type\", str);\n        str = (String)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:method[@id='m3']/@name\", doc, STRING);\n        assertEquals(\"DELETE\", str);\n        str = (String)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:method[@id='m4']/@name\", doc, STRING);\n        assertEquals(\"PUT\", str);\n\n        // discover sub-resource methods\n        nl = (NodeList)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:resource[@path='{c}/{d}']/wadl:method/@name\", doc, NODESET);\n        assertEquals(1, nl.getLength());\n        boolean subget = false;\n        for (int i = 0; i < nl.getLength(); i++) {\n            String t = nl.item(i).getTextContent();\n            if (t.equals(\"GET\")) {\n                subget = true;\n            }\n        }\n        assertTrue(subget);\n        for (int i = 0; i < nl.getLength(); i++) {\n            System.out.println(\">>>>> sub-resource method : \" + nl.item(i).getTextContent());\n        }\n        str = (String)xp.evaluate(\"count(//wadl:resource[@path='a/{b}']/wadl:resource[@path='{c}/{d}/{e}']/wadl:method)\", doc, STRING);\n        assertEquals(\"1\", str);\n\n        str = (String)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:resource[@path='{c}/{d}']/wadl:param[@name='c']/@style\", doc, STRING);\n        assertEquals(\"template\", str);\n        str = (String)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:resource[@path='{c}/{d}']/wadl:param[@name='b']/@style\", doc, STRING);\n        assertEquals(\"template\", str);\n        str = (String)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:resource[@path='{c}/{d}/{e}']/wadl:param[@name='c']/@style\", doc, STRING);\n        assertEquals(\"template\", str);\n        str = (String)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:resource[@path='{c}/{d}/{e}']/wadl:param[@name='e']/@style\", doc, STRING);\n        assertEquals(\"template\", str);\n        str = (String)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:resource[@path='{c}/{d}/{e}']/wadl:method[@id='m6']/@name\", doc, STRING);\n        assertEquals(\"POST\", str);\n\n        // discover sub-resource locators\n        nl = (NodeList)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:resource[@path='sub/{x}']/wadl:method/@name\", doc, NODESET);\n        assertEquals(2, nl.getLength());\n        boolean childget = false;\n        boolean childopt = false;\n        for (int i = 0; i < nl.getLength(); i++) {\n            String t = nl.item(i).getTextContent();\n            if (t.equals(\"GET\")) {\n                childget = true;\n            }\n            if (t.equals(\"OPTIONS\")) {\n                childopt = true;\n            }\n        }\n        assertTrue(childget && childopt);\n        for (int i = 0; i < nl.getLength(); i++) {\n            System.out.println(\">>>>> child resource method : \" + nl.item(i).getTextContent());\n        }\n\n        str = (String)xp.evaluate(\"count(//wadl:resource[@path='a/{b}']/wadl:resource[@path='sub/{x}']/wadl:method)\", doc, STRING);\n        assertEquals(\"2\", str);\n        str = (String)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:resource[@path='sub/{x}']/wadl:param[@name='x']/@style\", doc, STRING);\n        assertEquals(\"template\", str);\n        str = (String)xp.evaluate(\"//wadl:resource[@path='a/{b}']/wadl:resource[@path='sub/{x}']/wadl:method[@id='m0']/wadl:response/wadl:representation/@mediaType\", doc, STRING);\n        assertEquals(\"text/plain\", str);\n    }", "signature": "void testBaseWadlGenerator()", "full_signature": "@Test public void testBaseWadlGenerator()", "class_method_signature": "WadlProcessorTest.testBaseWadlGenerator()", "testcase": true, "constructor": false, "invocations": ["process", "newInstance", "marshal", "createMarshaller", "println", "toByteArray", "newInstance", "setNamespaceAware", "parse", "newDocumentBuilder", "toByteArray", "newXPath", "newInstance", "setNamespaceContext", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "getLength", "getLength", "getTextContent", "item", "equals", "assertTrue", "getLength", "println", "getTextContent", "item", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "getLength", "getLength", "getTextContent", "item", "equals", "assertTrue", "getLength", "println", "getTextContent", "item", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "getLength", "getLength", "getTextContent", "item", "equals", "equals", "assertTrue", "getLength", "println", "getTextContent", "item", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals"]}, "focal_class": {"identifier": "WadlProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final WadlGenerator wadlGenerator;", "modifier": "private final", "type": "WadlGenerator", "declarator": "wadlGenerator", "var_name": "wadlGenerator"}], "methods": [{"identifier": "WadlProcessor", "parameters": "()", "modifiers": "public", "return": "", "signature": " WadlProcessor()", "full_signature": "public  WadlProcessor()", "class_method_signature": "WadlProcessor.WadlProcessor()", "testcase": false, "constructor": true}, {"identifier": "WadlProcessor", "parameters": "(WadlGenerator wadlGenerator)", "modifiers": "public", "return": "", "signature": " WadlProcessor(WadlGenerator wadlGenerator)", "full_signature": "public  WadlProcessor(WadlGenerator wadlGenerator)", "class_method_signature": "WadlProcessor.WadlProcessor(WadlGenerator wadlGenerator)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(ResourceDescriptor resourceDescriptor, URI baseURI)", "modifiers": "public", "return": "Application", "signature": "Application process(ResourceDescriptor resourceDescriptor, URI baseURI)", "full_signature": "public Application process(ResourceDescriptor resourceDescriptor, URI baseURI)", "class_method_signature": "WadlProcessor.process(ResourceDescriptor resourceDescriptor, URI baseURI)", "testcase": false, "constructor": false}, {"identifier": "processResource", "parameters": "(ResourceDescriptor resourceDescriptor)", "modifiers": "private", "return": "org.everrest.core.wadl.research.Resource", "signature": "org.everrest.core.wadl.research.Resource processResource(ResourceDescriptor resourceDescriptor)", "full_signature": "private org.everrest.core.wadl.research.Resource processResource(ResourceDescriptor resourceDescriptor)", "class_method_signature": "WadlProcessor.processResource(ResourceDescriptor resourceDescriptor)", "testcase": false, "constructor": false}, {"identifier": "processSubResourceMethods", "parameters": "(org.everrest.core.wadl.research.Resource wadlResource,\n                                           ResourceDescriptor resourceDescriptor)", "modifiers": "private", "return": "void", "signature": "void processSubResourceMethods(org.everrest.core.wadl.research.Resource wadlResource,\n                                           ResourceDescriptor resourceDescriptor)", "full_signature": "private void processSubResourceMethods(org.everrest.core.wadl.research.Resource wadlResource,\n                                           ResourceDescriptor resourceDescriptor)", "class_method_signature": "WadlProcessor.processSubResourceMethods(org.everrest.core.wadl.research.Resource wadlResource,\n                                           ResourceDescriptor resourceDescriptor)", "testcase": false, "constructor": false}, {"identifier": "processSubResourceLocators", "parameters": "(org.everrest.core.wadl.research.Resource wadlResource,\n                                            ResourceDescriptor resourceDescriptor)", "modifiers": "private", "return": "void", "signature": "void processSubResourceLocators(org.everrest.core.wadl.research.Resource wadlResource,\n                                            ResourceDescriptor resourceDescriptor)", "full_signature": "private void processSubResourceLocators(org.everrest.core.wadl.research.Resource wadlResource,\n                                            ResourceDescriptor resourceDescriptor)", "class_method_signature": "WadlProcessor.processSubResourceLocators(org.everrest.core.wadl.research.Resource wadlResource,\n                                            ResourceDescriptor resourceDescriptor)", "testcase": false, "constructor": false}, {"identifier": "processMethod", "parameters": "(ResourceMethodDescriptor rmd,\n                                                                 Map<String, Param> wadlResourceParams)", "modifiers": "private", "return": "org.everrest.core.wadl.research.Method", "signature": "org.everrest.core.wadl.research.Method processMethod(ResourceMethodDescriptor rmd,\n                                                                 Map<String, Param> wadlResourceParams)", "full_signature": "private org.everrest.core.wadl.research.Method processMethod(ResourceMethodDescriptor rmd,\n                                                                 Map<String, Param> wadlResourceParams)", "class_method_signature": "WadlProcessor.processMethod(ResourceMethodDescriptor rmd,\n                                                                 Map<String, Param> wadlResourceParams)", "testcase": false, "constructor": false}, {"identifier": "processRequest", "parameters": "(ResourceMethodDescriptor rmd,\n                                                                   Map<String, Param> wadlResourceParams)", "modifiers": "private", "return": "org.everrest.core.wadl.research.Request", "signature": "org.everrest.core.wadl.research.Request processRequest(ResourceMethodDescriptor rmd,\n                                                                   Map<String, Param> wadlResourceParams)", "full_signature": "private org.everrest.core.wadl.research.Request processRequest(ResourceMethodDescriptor rmd,\n                                                                   Map<String, Param> wadlResourceParams)", "class_method_signature": "WadlProcessor.processRequest(ResourceMethodDescriptor rmd,\n                                                                   Map<String, Param> wadlResourceParams)", "testcase": false, "constructor": false}, {"identifier": "processResponse", "parameters": "(ResourceMethodDescriptor rmd)", "modifiers": "private", "return": "org.everrest.core.wadl.research.Response", "signature": "org.everrest.core.wadl.research.Response processResponse(ResourceMethodDescriptor rmd)", "full_signature": "private org.everrest.core.wadl.research.Response processResponse(ResourceMethodDescriptor rmd)", "class_method_signature": "WadlProcessor.processResponse(ResourceMethodDescriptor rmd)", "testcase": false, "constructor": false}, {"identifier": "processParam", "parameters": "(Parameter methodParameter)", "modifiers": "private", "return": "Param", "signature": "Param processParam(Parameter methodParameter)", "full_signature": "private Param processParam(Parameter methodParameter)", "class_method_signature": "WadlProcessor.processParam(Parameter methodParameter)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/wadl/WadlProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(ResourceDescriptor resourceDescriptor, URI baseURI)", "modifiers": "public", "return": "Application", "body": "public Application process(ResourceDescriptor resourceDescriptor, URI baseURI) {\n        // Root component of WADL representation\n        Application wadlApp = wadlGenerator.createApplication();\n        // Container for resources\n        Resources wadlResources = wadlGenerator.createResources();\n        if (baseURI != null) {\n            wadlResources.setBase(baseURI.toString());\n        }\n\n        org.everrest.core.wadl.research.Resource wadlResource = processResource(resourceDescriptor);\n        wadlResources.getResource().add(wadlResource);\n\n        wadlApp.setResources(wadlResources);\n        return wadlApp;\n    }", "signature": "Application process(ResourceDescriptor resourceDescriptor, URI baseURI)", "full_signature": "public Application process(ResourceDescriptor resourceDescriptor, URI baseURI)", "class_method_signature": "WadlProcessor.process(ResourceDescriptor resourceDescriptor, URI baseURI)", "testcase": false, "constructor": false, "invocations": ["createApplication", "createResources", "setBase", "toString", "processResource", "add", "getResource", "setResources"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}