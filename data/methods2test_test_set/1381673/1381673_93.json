{"test_class": {"identifier": "DMNFeelExpressionEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DMNFeelExpressionEvaluator expressionEvaluator = new DMNFeelExpressionEvaluator(this.getClass().getClassLoader());", "modifier": "", "type": "DMNFeelExpressionEvaluator", "declarator": "expressionEvaluator = new DMNFeelExpressionEvaluator(this.getClass().getClassLoader())", "var_name": "expressionEvaluator"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java"}, "test_case": {"identifier": "fromObjectToExpressionTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fromObjectToExpressionTest() {\n        assertEquals(\"\\\"Test\\\"\", expressionEvaluator.fromObjectToExpression(\"Test\"));\n        assertEquals(\"false\", expressionEvaluator.fromObjectToExpression(false));\n        assertEquals(\"1\", expressionEvaluator.fromObjectToExpression(BigDecimal.valueOf(1)));\n        assertEquals(\"date( \\\"2019-05-13\\\" )\", expressionEvaluator.fromObjectToExpression(LocalDate.of(2019, 5, 13)));\n        assertEquals(\"null\", expressionEvaluator.fromObjectToExpression(null));\n    }", "signature": "void fromObjectToExpressionTest()", "full_signature": "@Test public void fromObjectToExpressionTest()", "class_method_signature": "DMNFeelExpressionEvaluatorTest.fromObjectToExpressionTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "fromObjectToExpression", "assertEquals", "fromObjectToExpression", "assertEquals", "fromObjectToExpression", "valueOf", "assertEquals", "fromObjectToExpression", "of", "assertEquals", "fromObjectToExpression"]}, "focal_class": {"identifier": "DMNFeelExpressionEvaluator", "superclass": "extends AbstractExpressionEvaluator", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader;", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "private final CodeFunction codeFunction = new CodeFunction();", "modifier": "private final", "type": "CodeFunction", "declarator": "codeFunction = new CodeFunction()", "var_name": "codeFunction"}], "methods": [{"identifier": "DMNFeelExpressionEvaluator", "parameters": "(ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " DMNFeelExpressionEvaluator(ClassLoader classLoader)", "full_signature": "public  DMNFeelExpressionEvaluator(ClassLoader classLoader)", "class_method_signature": "DMNFeelExpressionEvaluator.DMNFeelExpressionEvaluator(ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "fromObjectToExpression", "parameters": "(Object value)", "modifiers": "@Override public", "return": "String", "signature": "String fromObjectToExpression(Object value)", "full_signature": "@Override public String fromObjectToExpression(Object value)", "class_method_signature": "DMNFeelExpressionEvaluator.fromObjectToExpression(Object value)", "testcase": false, "constructor": false}, {"identifier": "newEvaluationContext", "parameters": "()", "modifiers": "protected", "return": "EvaluationContext", "signature": "EvaluationContext newEvaluationContext()", "full_signature": "protected EvaluationContext newEvaluationContext()", "class_method_signature": "DMNFeelExpressionEvaluator.newEvaluationContext()", "testcase": false, "constructor": false}, {"identifier": "newFeelEvaluator", "parameters": "(AtomicReference<FEELEvent> errorHolder)", "modifiers": "protected", "return": "FEEL", "signature": "FEEL newFeelEvaluator(AtomicReference<FEELEvent> errorHolder)", "full_signature": "protected FEEL newFeelEvaluator(AtomicReference<FEELEvent> errorHolder)", "class_method_signature": "DMNFeelExpressionEvaluator.newFeelEvaluator(AtomicReference<FEELEvent> errorHolder)", "testcase": false, "constructor": false}, {"identifier": "internalLiteralEvaluation", "parameters": "(String raw, String className)", "modifiers": "@Override protected", "return": "Object", "signature": "Object internalLiteralEvaluation(String raw, String className)", "full_signature": "@Override protected Object internalLiteralEvaluation(String raw, String className)", "class_method_signature": "DMNFeelExpressionEvaluator.internalLiteralEvaluation(String raw, String className)", "testcase": false, "constructor": false}, {"identifier": "internalUnaryEvaluation", "parameters": "(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "full_signature": "@Override protected boolean internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "class_method_signature": "DMNFeelExpressionEvaluator.internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "testcase": false, "constructor": false}, {"identifier": "executeAndVerifyErrors", "parameters": "(Function<FEEL, T> command)", "modifiers": "protected", "return": "T", "signature": "T executeAndVerifyErrors(Function<FEEL, T> command)", "full_signature": "protected T executeAndVerifyErrors(Function<FEEL, T> command)", "class_method_signature": "DMNFeelExpressionEvaluator.executeAndVerifyErrors(Function<FEEL, T> command)", "testcase": false, "constructor": false}, {"identifier": "extractFieldValue", "parameters": "(Object result, String fieldName)", "modifiers": "@Override protected", "return": "Object", "signature": "Object extractFieldValue(Object result, String fieldName)", "full_signature": "@Override protected Object extractFieldValue(Object result, String fieldName)", "class_method_signature": "DMNFeelExpressionEvaluator.extractFieldValue(Object result, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "createObject", "parameters": "(String className, List<String> genericClasses)", "modifiers": "@Override protected", "return": "Object", "signature": "Object createObject(String className, List<String> genericClasses)", "full_signature": "@Override protected Object createObject(String className, List<String> genericClasses)", "class_method_signature": "DMNFeelExpressionEvaluator.createObject(String className, List<String> genericClasses)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(Object toReturn, String fieldName, Object fieldValue)", "modifiers": "@Override protected", "return": "void", "signature": "void setField(Object toReturn, String fieldName, Object fieldValue)", "full_signature": "@Override protected void setField(Object toReturn, String fieldName, Object fieldValue)", "class_method_signature": "DMNFeelExpressionEvaluator.setField(Object toReturn, String fieldName, Object fieldValue)", "testcase": false, "constructor": false}, {"identifier": "isStructuredResult", "parameters": "(Class<?> resultClass)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isStructuredResult(Class<?> resultClass)", "full_signature": "@Override protected boolean isStructuredResult(Class<?> resultClass)", "class_method_signature": "DMNFeelExpressionEvaluator.isStructuredResult(Class<?> resultClass)", "testcase": false, "constructor": false}, {"identifier": "isStructuredInput", "parameters": "(String className)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isStructuredInput(String className)", "full_signature": "@Override protected boolean isStructuredInput(String className)", "class_method_signature": "DMNFeelExpressionEvaluator.isStructuredInput(String className)", "testcase": false, "constructor": false}, {"identifier": "getFieldClassNameAndGenerics", "parameters": "(Object element, String fieldName, String className, List<String> genericClasses)", "modifiers": "@Override protected", "return": "Map.Entry<String, List<String>>", "signature": "Map.Entry<String, List<String>> getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses)", "full_signature": "@Override protected Map.Entry<String, List<String>> getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses)", "class_method_signature": "DMNFeelExpressionEvaluator.getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluator.java"}, "focal_method": {"identifier": "fromObjectToExpression", "parameters": "(Object value)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String fromObjectToExpression(Object value) {\n        FEELFnResult<String> invoke = codeFunction.invoke(value);\n        return invoke.getOrElseThrow(feelEvent -> new IllegalArgumentException(\"This should not happen\",\n                                                                               feelEvent.getSourceException()));\n    }", "signature": "String fromObjectToExpression(Object value)", "full_signature": "@Override public String fromObjectToExpression(Object value)", "class_method_signature": "DMNFeelExpressionEvaluator.fromObjectToExpression(Object value)", "testcase": false, "constructor": false, "invocations": ["invoke", "getOrElseThrow", "getSourceException"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}