{"test_class": {"identifier": "AngleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "IDirectPosition p;", "modifier": "", "type": "IDirectPosition", "declarator": "p", "var_name": "p"}, {"original_string": "IDirectPosition p1;", "modifier": "", "type": "IDirectPosition", "declarator": "p1", "var_name": "p1"}, {"original_string": "IDirectPosition p2;", "modifier": "", "type": "IDirectPosition", "declarator": "p2", "var_name": "p2"}, {"original_string": "IDirectPosition p3;", "modifier": "", "type": "IDirectPosition", "declarator": "p3", "var_name": "p3"}, {"original_string": "IDirectPosition p4;", "modifier": "", "type": "IDirectPosition", "declarator": "p4", "var_name": "p4"}, {"original_string": "IDirectPosition p5;", "modifier": "", "type": "IDirectPosition", "declarator": "p5", "var_name": "p5"}, {"original_string": "Angle a1;", "modifier": "", "type": "Angle", "declarator": "a1", "var_name": "a1"}, {"original_string": "Angle a2;", "modifier": "", "type": "Angle", "declarator": "a2", "var_name": "a2"}, {"original_string": "Angle a3;", "modifier": "", "type": "Angle", "declarator": "a3", "var_name": "a3"}, {"original_string": "Angle a4;", "modifier": "", "type": "Angle", "declarator": "a4", "var_name": "a4"}, {"original_string": "Angle a5;", "modifier": "", "type": "Angle", "declarator": "a5", "var_name": "a5"}], "file": "geoxygene-spatial/src/test/java/fr/ign/cogit/geoxygene/contrib/geometrie/AngleTest.java"}, "test_case": {"identifier": "testAngleTroisPoints", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAngleTroisPoints() {\n        System.out.println(\"testAngleTroisPoints\");\n        a1 = Angle.angleTroisPoints(p4, p, p1);\n        System.out.println(a1.getValeur());\n        assert(Math.abs(a1.getValeur() - Math.PI) < 0.01);\n        a2 = Angle.angleTroisPoints(p4, p, p2);\n        System.out.println(a2.getValeur());\n        assert(Math.abs(a2.getValeur() - 5 * Math.PI / 4) < 0.01);\n        a3 = Angle.angleTroisPoints(p4, p, p3);\n        System.out.println(a3.getValeur());\n        assert(Math.abs(a3.getValeur() - 3 * Math.PI / 2) < 0.01);\n        a4 = Angle.angleTroisPoints(p4, p, p4);\n        System.out.println(a4.getValeur());\n        assert(Math.abs(a4.getValeur()) < 0.01);\n        a5 = Angle.angleTroisPoints(p4, p, p5);\n        System.out.println(a5.getValeur());\n        assert(Math.abs(a5.getValeur() - Math.PI / 2) < 0.01);\n    }", "signature": "void testAngleTroisPoints()", "full_signature": "@Test public void testAngleTroisPoints()", "class_method_signature": "AngleTest.testAngleTroisPoints()", "testcase": true, "constructor": false, "invocations": ["println", "angleTroisPoints", "println", "getValeur", "abs", "getValeur", "angleTroisPoints", "println", "getValeur", "abs", "getValeur", "angleTroisPoints", "println", "getValeur", "abs", "getValeur", "angleTroisPoints", "println", "getValeur", "abs", "getValeur", "angleTroisPoints", "println", "getValeur", "abs", "getValeur"]}, "focal_class": {"identifier": "Angle", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Angle angleNul = new Angle(0);", "modifier": "public static final", "type": "Angle", "declarator": "angleNul = new Angle(0)", "var_name": "angleNul"}, {"original_string": "public static final Angle anglePlat = new Angle(Math.PI);", "modifier": "public static final", "type": "Angle", "declarator": "anglePlat = new Angle(Math.PI)", "var_name": "anglePlat"}, {"original_string": "public static final Angle angleDroit = new Angle(Math.PI / 2);", "modifier": "public static final", "type": "Angle", "declarator": "angleDroit = new Angle(Math.PI / 2)", "var_name": "angleDroit"}, {"original_string": "protected double valeur = 0;", "modifier": "protected", "type": "double", "declarator": "valeur = 0", "var_name": "valeur"}], "methods": [{"identifier": "getValeur", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getValeur()", "full_signature": "public double getValeur()", "class_method_signature": "Angle.getValeur()", "testcase": false, "constructor": false}, {"identifier": "setValeur", "parameters": "(double valeur)", "modifiers": "public", "return": "void", "signature": "void setValeur(double valeur)", "full_signature": "public void setValeur(double valeur)", "class_method_signature": "Angle.setValeur(double valeur)", "testcase": false, "constructor": false}, {"identifier": "Angle", "parameters": "()", "modifiers": "public", "return": "", "signature": " Angle()", "full_signature": "public  Angle()", "class_method_signature": "Angle.Angle()", "testcase": false, "constructor": true}, {"identifier": "Angle", "parameters": "(double valeur)", "modifiers": "public", "return": "", "signature": " Angle(double valeur)", "full_signature": "public  Angle(double valeur)", "class_method_signature": "Angle.Angle(double valeur)", "testcase": false, "constructor": true}, {"identifier": "Angle", "parameters": "(IDirectPosition pt1, IDirectPosition pt2)", "modifiers": "public", "return": "", "signature": " Angle(IDirectPosition pt1, IDirectPosition pt2)", "full_signature": "public  Angle(IDirectPosition pt1, IDirectPosition pt2)", "class_method_signature": "Angle.Angle(IDirectPosition pt1, IDirectPosition pt2)", "testcase": false, "constructor": true}, {"identifier": "angleAPiPres", "parameters": "(Angle angle2pi)", "modifiers": "public static", "return": "Angle", "signature": "Angle angleAPiPres(Angle angle2pi)", "full_signature": "public static Angle angleAPiPres(Angle angle2pi)", "class_method_signature": "Angle.angleAPiPres(Angle angle2pi)", "testcase": false, "constructor": false}, {"identifier": "angleAPiPres", "parameters": "()", "modifiers": "public", "return": "Angle", "signature": "Angle angleAPiPres()", "full_signature": "public Angle angleAPiPres()", "class_method_signature": "Angle.angleAPiPres()", "testcase": false, "constructor": false}, {"identifier": "ajoute", "parameters": "(Angle a)", "modifiers": "public", "return": "void", "signature": "void ajoute(Angle a)", "full_signature": "public void ajoute(Angle a)", "class_method_signature": "Angle.ajoute(Angle a)", "testcase": false, "constructor": false}, {"identifier": "ajoute", "parameters": "(Angle a, Angle b)", "modifiers": "public static", "return": "Angle", "signature": "Angle ajoute(Angle a, Angle b)", "full_signature": "public static Angle ajoute(Angle a, Angle b)", "class_method_signature": "Angle.ajoute(Angle a, Angle b)", "testcase": false, "constructor": false}, {"identifier": "bissectrice", "parameters": "(Angle a, Angle b)", "modifiers": "public static", "return": "Angle", "signature": "Angle bissectrice(Angle a, Angle b)", "full_signature": "public static Angle bissectrice(Angle a, Angle b)", "class_method_signature": "Angle.bissectrice(Angle a, Angle b)", "testcase": false, "constructor": false}, {"identifier": "moyenne", "parameters": "(Angle a, Angle b)", "modifiers": "public static", "return": "Angle", "signature": "Angle moyenne(Angle a, Angle b)", "full_signature": "public static Angle moyenne(Angle a, Angle b)", "class_method_signature": "Angle.moyenne(Angle a, Angle b)", "testcase": false, "constructor": false}, {"identifier": "ecarttrigo", "parameters": "(Angle a, Angle b)", "modifiers": "public static", "return": "Angle", "signature": "Angle ecarttrigo(Angle a, Angle b)", "full_signature": "public static Angle ecarttrigo(Angle a, Angle b)", "class_method_signature": "Angle.ecarttrigo(Angle a, Angle b)", "testcase": false, "constructor": false}, {"identifier": "ecart", "parameters": "(Angle a, Angle b)", "modifiers": "public static", "return": "Angle", "signature": "Angle ecart(Angle a, Angle b)", "full_signature": "public static Angle ecart(Angle a, Angle b)", "class_method_signature": "Angle.ecart(Angle a, Angle b)", "testcase": false, "constructor": false}, {"identifier": "angleTroisPoints", "parameters": "(IDirectPosition pt1,\n      IDirectPosition pt2, IDirectPosition pt3)", "modifiers": "public static", "return": "Angle", "signature": "Angle angleTroisPoints(IDirectPosition pt1,\n      IDirectPosition pt2, IDirectPosition pt3)", "full_signature": "public static Angle angleTroisPoints(IDirectPosition pt1,\n      IDirectPosition pt2, IDirectPosition pt3)", "class_method_signature": "Angle.angleTroisPoints(IDirectPosition pt1,\n      IDirectPosition pt2, IDirectPosition pt3)", "testcase": false, "constructor": false}], "file": "geoxygene-spatial/src/main/java/fr/ign/cogit/geoxygene/contrib/geometrie/Angle.java"}, "focal_method": {"identifier": "angleTroisPoints", "parameters": "(IDirectPosition pt1,\n      IDirectPosition pt2, IDirectPosition pt3)", "modifiers": "public static", "return": "Angle", "body": "public static Angle angleTroisPoints(IDirectPosition pt1,\n      IDirectPosition pt2, IDirectPosition pt3) {\n    Angle angle1 = new Angle(pt2, pt1);\n    Angle angle2 = new Angle(pt2, pt3);\n    Angle angle = Angle.ecarttrigo(angle1, angle2);\n    return angle;\n  }", "signature": "Angle angleTroisPoints(IDirectPosition pt1,\n      IDirectPosition pt2, IDirectPosition pt3)", "full_signature": "public static Angle angleTroisPoints(IDirectPosition pt1,\n      IDirectPosition pt2, IDirectPosition pt3)", "class_method_signature": "Angle.angleTroisPoints(IDirectPosition pt1,\n      IDirectPosition pt2, IDirectPosition pt3)", "testcase": false, "constructor": false, "invocations": ["ecarttrigo"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}