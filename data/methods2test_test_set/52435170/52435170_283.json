{"test_class": {"identifier": "CompositeOperationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Connection connection;", "modifier": "@Mock\n    private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    private Neo4JOperation operation1;", "modifier": "@Mock\n    private", "type": "Neo4JOperation", "declarator": "operation1", "var_name": "operation1"}, {"original_string": "@Mock\n    private Neo4JOperation operation2;", "modifier": "@Mock\n    private", "type": "Neo4JOperation", "declarator": "operation2", "var_name": "operation2"}, {"original_string": "@Mock\n    private Neo4JOperation operation3;", "modifier": "@Mock\n    private", "type": "Neo4JOperation", "declarator": "operation3", "var_name": "operation3"}], "file": "neo4j/src/test/java/eu/drus/jpa/unit/neo4j/operation/CompositeOperationTest.java"}, "test_case": {"identifier": "testOperationExecution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOperationExecution() throws SQLException {\n        // GIVEN\n        final Graph<Node, Edge> graph = new DefaultDirectedGraph<>(new ClassBasedEdgeFactory<>(Edge.class));\n        final CompositeOperation operation = new CompositeOperation(operation1, operation2, operation3);\n\n        // WHEN\n        operation.execute(connection, graph);\n\n        // THEN\n        final InOrder order = inOrder(operation1, operation2, operation3);\n        order.verify(operation1).execute(eq(connection), eq(graph));\n        order.verify(operation2).execute(eq(connection), eq(graph));\n        order.verify(operation3).execute(eq(connection), eq(graph));\n    }", "signature": "void testOperationExecution()", "full_signature": "@Test public void testOperationExecution()", "class_method_signature": "CompositeOperationTest.testOperationExecution()", "testcase": true, "constructor": false, "invocations": ["execute", "inOrder", "execute", "verify", "eq", "eq", "execute", "verify", "eq", "eq", "execute", "verify", "eq", "eq"]}, "focal_class": {"identifier": "CompositeOperation", "superclass": "", "interfaces": "implements Neo4JOperation", "fields": [{"original_string": "private Neo4JOperation[] operations;", "modifier": "private", "type": "Neo4JOperation[]", "declarator": "operations", "var_name": "operations"}], "methods": [{"identifier": "CompositeOperation", "parameters": "(final Neo4JOperation... operations)", "modifiers": "public", "return": "", "signature": " CompositeOperation(final Neo4JOperation... operations)", "full_signature": "public  CompositeOperation(final Neo4JOperation... operations)", "class_method_signature": "CompositeOperation.CompositeOperation(final Neo4JOperation... operations)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(final Connection connection, final Graph<Node, Edge> graph)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final Connection connection, final Graph<Node, Edge> graph)", "full_signature": "@Override public void execute(final Connection connection, final Graph<Node, Edge> graph)", "class_method_signature": "CompositeOperation.execute(final Connection connection, final Graph<Node, Edge> graph)", "testcase": false, "constructor": false}], "file": "neo4j/src/main/java/eu/drus/jpa/unit/neo4j/operation/CompositeOperation.java"}, "focal_method": {"identifier": "execute", "parameters": "(final Connection connection, final Graph<Node, Edge> graph)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(final Connection connection, final Graph<Node, Edge> graph) throws SQLException {\n        for (final Neo4JOperation operation : operations) {\n            operation.execute(connection, graph);\n        }\n    }", "signature": "void execute(final Connection connection, final Graph<Node, Edge> graph)", "full_signature": "@Override public void execute(final Connection connection, final Graph<Node, Edge> graph)", "class_method_signature": "CompositeOperation.execute(final Connection connection, final Graph<Node, Edge> graph)", "testcase": false, "constructor": false, "invocations": ["execute"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}