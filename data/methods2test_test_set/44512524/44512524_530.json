{"test_class": {"identifier": "CountingBloomFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/membership/CountingBloomFilterTest.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdd() {\n        System.out.println(\"add\");\n        Random r = new Random();\n        CountingBloomFilter instance = new CountingBloomFilter(10000, 32, Hash.MURMUR_HASH);\n        Map<Integer, Integer> count = new HashMap<Integer, Integer>(1000);\n        \n        for (int i=0; i<1000; i++) {\n            int num = r.nextInt(10);\n            Key k = new Key(String.valueOf(num).getBytes());\n            instance.add(k);\n            \n            int c = 1;\n            if (count.containsKey(num))\n                c = c + count.get(num);\n            count.put(num, c);\n        }\n\n        System.out.println(\"Num\\tEst.\\tActual\");\n        for (int i=0; i<10; i++) {\n            Key k = new Key(String.valueOf(i).getBytes());\n            System.out.println(i + \"\\t\" + instance.estimateCount(k) + \"\\t\" + count.get(i));\n        }\n    }", "signature": "void testAdd()", "full_signature": "@Test public void testAdd()", "class_method_signature": "CountingBloomFilterTest.testAdd()", "testcase": true, "constructor": false, "invocations": ["println", "nextInt", "getBytes", "valueOf", "add", "containsKey", "get", "put", "println", "getBytes", "valueOf", "println", "estimateCount", "get"]}, "focal_class": {"identifier": "CountingBloomFilter", "superclass": "extends AbstractFilter", "interfaces": "", "fields": [{"original_string": "private long[] buckets;", "modifier": "private", "type": "long[]", "declarator": "buckets", "var_name": "buckets"}, {"original_string": "private final static long BUCKET_MAX_VALUE = 15;", "modifier": "private final static", "type": "long", "declarator": "BUCKET_MAX_VALUE = 15", "var_name": "BUCKET_MAX_VALUE"}], "methods": [{"identifier": "CountingBloomFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " CountingBloomFilter()", "full_signature": "public  CountingBloomFilter()", "class_method_signature": "CountingBloomFilter.CountingBloomFilter()", "testcase": false, "constructor": true}, {"identifier": "CountingBloomFilter", "parameters": "(int vectorSize, int nbHash, int hashType)", "modifiers": "public", "return": "", "signature": " CountingBloomFilter(int vectorSize, int nbHash, int hashType)", "full_signature": "public  CountingBloomFilter(int vectorSize, int nbHash, int hashType)", "class_method_signature": "CountingBloomFilter.CountingBloomFilter(int vectorSize, int nbHash, int hashType)", "testcase": false, "constructor": true}, {"identifier": "buckets2words", "parameters": "(int vectorSize)", "modifiers": "private static", "return": "int", "signature": "int buckets2words(int vectorSize)", "full_signature": "private static int buckets2words(int vectorSize)", "class_method_signature": "CountingBloomFilter.buckets2words(int vectorSize)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Key key)", "modifiers": "@Override public", "return": "void", "signature": "void add(Key key)", "full_signature": "@Override public void add(Key key)", "class_method_signature": "CountingBloomFilter.add(Key key)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Key key)", "modifiers": "public", "return": "void", "signature": "void delete(Key key)", "full_signature": "public void delete(Key key)", "class_method_signature": "CountingBloomFilter.delete(Key key)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(AbstractFilter filter)", "modifiers": "@Override public", "return": "void", "signature": "void and(AbstractFilter filter)", "full_signature": "@Override public void and(AbstractFilter filter)", "class_method_signature": "CountingBloomFilter.and(AbstractFilter filter)", "testcase": false, "constructor": false}, {"identifier": "membershipTest", "parameters": "(Key key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean membershipTest(Key key)", "full_signature": "@Override public boolean membershipTest(Key key)", "class_method_signature": "CountingBloomFilter.membershipTest(Key key)", "testcase": false, "constructor": false}, {"identifier": "estimateCount", "parameters": "(Key key)", "modifiers": "public", "return": "int", "signature": "int estimateCount(Key key)", "full_signature": "public int estimateCount(Key key)", "class_method_signature": "CountingBloomFilter.estimateCount(Key key)", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void not()", "full_signature": "@Override public void not()", "class_method_signature": "CountingBloomFilter.not()", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(AbstractFilter filter)", "modifiers": "@Override public", "return": "void", "signature": "void or(AbstractFilter filter)", "full_signature": "@Override public void or(AbstractFilter filter)", "class_method_signature": "CountingBloomFilter.or(AbstractFilter filter)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(AbstractFilter filter)", "modifiers": "@Override public", "return": "void", "signature": "void xor(AbstractFilter filter)", "full_signature": "@Override public void xor(AbstractFilter filter)", "class_method_signature": "CountingBloomFilter.xor(AbstractFilter filter)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CountingBloomFilter.toString()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "@Override public void write(DataOutput out)", "class_method_signature": "CountingBloomFilter.write(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "@Override public void readFields(DataInput in)", "class_method_signature": "CountingBloomFilter.readFields(DataInput in)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/membership/CountingBloomFilter.java"}, "focal_method": {"identifier": "add", "parameters": "(Key key)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void add(Key key) {\n    if(key == null) {\n      throw new NullPointerException(\"key can not be null\");\n    }\n\n    int[] h = hash.hash(key);\n    hash.clear();\n\n    for(int i = 0; i < nbHash; i++) {\n      // find the bucket\n      int wordNum = h[i] >> 4;          // div 16\n      int bucketShift = (h[i] & 0x0f) << 2;  // (mod 16) * 4\n      \n      long bucketMask = 15L << bucketShift;\n      long bucketValue = (buckets[wordNum] & bucketMask) >>> bucketShift;\n      \n      // only increment if the count in the bucket is less than BUCKET_MAX_VALUE\n      if(bucketValue < BUCKET_MAX_VALUE) {\n        // increment by 1\n        buckets[wordNum] = (buckets[wordNum] & ~bucketMask) | ((bucketValue + 1) << bucketShift);\n      }\n    }\n  }", "signature": "void add(Key key)", "full_signature": "@Override public void add(Key key)", "class_method_signature": "CountingBloomFilter.add(Key key)", "testcase": false, "constructor": false, "invocations": ["hash", "clear"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}