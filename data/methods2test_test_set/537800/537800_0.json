{"test_class": {"identifier": "ThreadDeadlockDetectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ThreadMXBean threads = mock(ThreadMXBean.class);", "modifier": "private final", "type": "ThreadMXBean", "declarator": "threads = mock(ThreadMXBean.class)", "var_name": "threads"}, {"original_string": "private final ThreadDeadlockDetector detector = new ThreadDeadlockDetector(threads);", "modifier": "private final", "type": "ThreadDeadlockDetector", "declarator": "detector = new ThreadDeadlockDetector(threads)", "var_name": "detector"}], "file": "metrics-jvm/src/test/java/com/codahale/metrics/jvm/ThreadDeadlockDetectorTest.java"}, "test_case": {"identifier": "returnsAnEmptySetIfNoThreadsAreDeadlocked", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void returnsAnEmptySetIfNoThreadsAreDeadlocked() {\n        when(threads.findDeadlockedThreads()).thenReturn(null);\n\n        assertThat(detector.getDeadlockedThreads())\n            .isEmpty();\n    }", "signature": "void returnsAnEmptySetIfNoThreadsAreDeadlocked()", "full_signature": "@Test public void returnsAnEmptySetIfNoThreadsAreDeadlocked()", "class_method_signature": "ThreadDeadlockDetectorTest.returnsAnEmptySetIfNoThreadsAreDeadlocked()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findDeadlockedThreads", "isEmpty", "assertThat", "getDeadlockedThreads"]}, "focal_class": {"identifier": "ThreadDeadlockDetector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_STACK_TRACE_DEPTH = 100;", "modifier": "private static final", "type": "int", "declarator": "MAX_STACK_TRACE_DEPTH = 100", "var_name": "MAX_STACK_TRACE_DEPTH"}, {"original_string": "private final ThreadMXBean threads;", "modifier": "private final", "type": "ThreadMXBean", "declarator": "threads", "var_name": "threads"}], "methods": [{"identifier": "ThreadDeadlockDetector", "parameters": "()", "modifiers": "public", "return": "", "signature": " ThreadDeadlockDetector()", "full_signature": "public  ThreadDeadlockDetector()", "class_method_signature": "ThreadDeadlockDetector.ThreadDeadlockDetector()", "testcase": false, "constructor": true}, {"identifier": "ThreadDeadlockDetector", "parameters": "(ThreadMXBean threads)", "modifiers": "public", "return": "", "signature": " ThreadDeadlockDetector(ThreadMXBean threads)", "full_signature": "public  ThreadDeadlockDetector(ThreadMXBean threads)", "class_method_signature": "ThreadDeadlockDetector.ThreadDeadlockDetector(ThreadMXBean threads)", "testcase": false, "constructor": true}, {"identifier": "getDeadlockedThreads", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getDeadlockedThreads()", "full_signature": "public Set<String> getDeadlockedThreads()", "class_method_signature": "ThreadDeadlockDetector.getDeadlockedThreads()", "testcase": false, "constructor": false}], "file": "metrics-jvm/src/main/java/com/codahale/metrics/jvm/ThreadDeadlockDetector.java"}, "focal_method": {"identifier": "getDeadlockedThreads", "parameters": "()", "modifiers": "public", "return": "Set<String>", "body": "public Set<String> getDeadlockedThreads() {\n        final long[] ids = threads.findDeadlockedThreads();\n        if (ids != null) {\n            final Set<String> deadlocks = new HashSet<>();\n            for (ThreadInfo info : threads.getThreadInfo(ids, MAX_STACK_TRACE_DEPTH)) {\n                final StringBuilder stackTrace = new StringBuilder();\n                for (StackTraceElement element : info.getStackTrace()) {\n                    stackTrace.append(\"\\t at \")\n                            .append(element.toString())\n                            .append(String.format(\"%n\"));\n                }\n\n                deadlocks.add(\n                        String.format(\"%s locked on %s (owned by %s):%n%s\",\n                                info.getThreadName(),\n                                info.getLockName(),\n                                info.getLockOwnerName(),\n                                stackTrace.toString()\n                        )\n                );\n            }\n            return Collections.unmodifiableSet(deadlocks);\n        }\n        return Collections.emptySet();\n    }", "signature": "Set<String> getDeadlockedThreads()", "full_signature": "public Set<String> getDeadlockedThreads()", "class_method_signature": "ThreadDeadlockDetector.getDeadlockedThreads()", "testcase": false, "constructor": false, "invocations": ["findDeadlockedThreads", "getThreadInfo", "getStackTrace", "append", "append", "append", "toString", "format", "add", "format", "getThreadName", "getLockName", "getLockOwnerName", "toString", "unmodifiableSet", "emptySet"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}