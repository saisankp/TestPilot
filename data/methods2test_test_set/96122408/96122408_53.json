{"test_class": {"identifier": "LocationDaoImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "actors/location/src/test/java/org/sunbird/location/dao/impl/LocationDaoImplTest.java"}, "test_case": {"identifier": "sortByNotAddedInCaseFilterWontHaveTypeKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void sortByNotAddedInCaseFilterWontHaveTypeKey() {\n    LocationDaoImpl dao = new LocationDaoImpl();\n    SearchDTO searchDto = createSearchDtoObj();\n    ((Map<String, Object>) searchDto.getAdditionalProperties().get(JsonKey.FILTERS))\n        .remove(JsonKey.TYPE);\n    searchDto = dao.addSortBy(searchDto);\n    Assert.assertTrue(searchDto.getSortBy().size() == 0);\n  }", "signature": "void sortByNotAddedInCaseFilterWontHaveTypeKey()", "full_signature": "@Test public void sortByNotAddedInCaseFilterWontHaveTypeKey()", "class_method_signature": "LocationDaoImplTest.sortByNotAddedInCaseFilterWontHaveTypeKey()", "testcase": true, "constructor": false, "invocations": ["createSearchDtoObj", "remove", "get", "getAdditionalProperties", "addSortBy", "assertTrue", "size", "getSortBy"]}, "focal_class": {"identifier": "LocationDaoImpl", "superclass": "", "interfaces": "implements LocationDao", "fields": [{"original_string": "private CassandraOperation cassandraOperation = ServiceFactory.getInstance();", "modifier": "private", "type": "CassandraOperation", "declarator": "cassandraOperation = ServiceFactory.getInstance()", "var_name": "cassandraOperation"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private static final String KEYSPACE_NAME = \"sunbird\";", "modifier": "private static final", "type": "String", "declarator": "KEYSPACE_NAME = \"sunbird\"", "var_name": "KEYSPACE_NAME"}, {"original_string": "private static final String LOCATION_TABLE_NAME = \"location\";", "modifier": "private static final", "type": "String", "declarator": "LOCATION_TABLE_NAME = \"location\"", "var_name": "LOCATION_TABLE_NAME"}, {"original_string": "private ElasticSearchService esUtil = EsClientFactory.getInstance(JsonKey.REST);", "modifier": "private", "type": "ElasticSearchService", "declarator": "esUtil = EsClientFactory.getInstance(JsonKey.REST)", "var_name": "esUtil"}, {"original_string": "private static final String DEFAULT_SORT_BY = \"ASC\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SORT_BY = \"ASC\"", "var_name": "DEFAULT_SORT_BY"}], "methods": [{"identifier": "create", "parameters": "(Location location)", "modifiers": "@Override public", "return": "Response", "signature": "Response create(Location location)", "full_signature": "@Override public Response create(Location location)", "class_method_signature": "LocationDaoImpl.create(Location location)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Location location)", "modifiers": "@Override public", "return": "Response", "signature": "Response update(Location location)", "full_signature": "@Override public Response update(Location location)", "class_method_signature": "LocationDaoImpl.update(Location location)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String locationId)", "modifiers": "@Override public", "return": "Response", "signature": "Response delete(String locationId)", "full_signature": "@Override public Response delete(String locationId)", "class_method_signature": "LocationDaoImpl.delete(String locationId)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(Map<String, Object> searchQueryMap)", "modifiers": "@Override public", "return": "Response", "signature": "Response search(Map<String, Object> searchQueryMap)", "full_signature": "@Override public Response search(Map<String, Object> searchQueryMap)", "class_method_signature": "LocationDaoImpl.search(Map<String, Object> searchQueryMap)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String locationId)", "modifiers": "@Override public", "return": "Response", "signature": "Response read(String locationId)", "full_signature": "@Override public Response read(String locationId)", "class_method_signature": "LocationDaoImpl.read(String locationId)", "testcase": false, "constructor": false}, {"identifier": "getRecordByProperty", "parameters": "(Map<String, Object> queryMap)", "modifiers": "@Override public", "return": "Response", "signature": "Response getRecordByProperty(Map<String, Object> queryMap)", "full_signature": "@Override public Response getRecordByProperty(Map<String, Object> queryMap)", "class_method_signature": "LocationDaoImpl.getRecordByProperty(Map<String, Object> queryMap)", "testcase": false, "constructor": false}, {"identifier": "addSortBy", "parameters": "(SearchDTO searchDtO)", "modifiers": "public", "return": "SearchDTO", "signature": "SearchDTO addSortBy(SearchDTO searchDtO)", "full_signature": "public SearchDTO addSortBy(SearchDTO searchDtO)", "class_method_signature": "LocationDaoImpl.addSortBy(SearchDTO searchDtO)", "testcase": false, "constructor": false}], "file": "actors/location/src/main/java/org/sunbird/location/dao/impl/LocationDaoImpl.java"}, "focal_method": {"identifier": "addSortBy", "parameters": "(SearchDTO searchDtO)", "modifiers": "public", "return": "SearchDTO", "body": "public SearchDTO addSortBy(SearchDTO searchDtO) {\n    if (MapUtils.isNotEmpty(searchDtO.getAdditionalProperties())\n        && searchDtO.getAdditionalProperties().containsKey(JsonKey.FILTERS)\n        && searchDtO.getAdditionalProperties().get(JsonKey.FILTERS) instanceof Map\n        && ((Map<String, Object>) searchDtO.getAdditionalProperties().get(JsonKey.FILTERS))\n            .containsKey(JsonKey.TYPE)) {\n      if (MapUtils.isEmpty(searchDtO.getSortBy())) {\n        ProjectLogger.log(\n            \"LocationDaoImpl:search:addSortBy added sort type name attribute.\",\n            LoggerEnum.INFO.name());\n        searchDtO.getSortBy().put(JsonKey.NAME, DEFAULT_SORT_BY);\n      }\n    }\n\n    return searchDtO;\n  }", "signature": "SearchDTO addSortBy(SearchDTO searchDtO)", "full_signature": "public SearchDTO addSortBy(SearchDTO searchDtO)", "class_method_signature": "LocationDaoImpl.addSortBy(SearchDTO searchDtO)", "testcase": false, "constructor": false, "invocations": ["isNotEmpty", "getAdditionalProperties", "containsKey", "getAdditionalProperties", "get", "getAdditionalProperties", "containsKey", "get", "getAdditionalProperties", "isEmpty", "getSortBy", "log", "name", "put", "getSortBy"]}, "repository": {"repo_id": 96122408, "url": "https://github.com/project-sunbird/sunbird-lms-mw", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 5, "size": 15380, "license": "licensed"}}