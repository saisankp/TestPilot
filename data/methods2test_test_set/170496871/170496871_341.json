{"test_class": {"identifier": "RandomForestClassifierTrainerTest", "superclass": "extends TrainerTest", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/tree/randomforest/RandomForestClassifierTrainerTest.java"}, "test_case": {"identifier": "testFit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFit() {\n        int sampleSize = 500;\n        Map<Integer, LabeledVector<Double>> sample = new HashMap<>();\n        for (int i = 0; i < sampleSize; i++) {\n            double x1 = i;\n            double x2 = x1 / 10.0;\n            double x3 = x2 / 10.0;\n            double x4 = x3 / 10.0;\n\n            sample.put(i, VectorUtils.of(x1, x2, x3, x4).labeled((double) i % 2));\n        }\n\n        ArrayList<FeatureMeta> meta = new ArrayList<>();\n        for (int i = 0; i < 4; i++)\n            meta.add(new FeatureMeta(\"\", i, false));\n        DatasetTrainer<ModelsComposition, Double> trainer = new RandomForestClassifierTrainer(meta)\n            .withAmountOfTrees(5)\n            .withFeaturesCountSelectionStrgy(x -> 2)\n            .withEnvironmentBuilder(TestUtils.testEnvBuilder());\n\n        ModelsComposition mdl = trainer.fit(sample, parts, new LabeledDummyVectorizer<>());\n\n        assertTrue(mdl.getPredictionsAggregator() instanceof OnMajorityPredictionsAggregator);\n        assertEquals(5, mdl.getModels().size());\n    }", "signature": "void testFit()", "full_signature": "@Test public void testFit()", "class_method_signature": "RandomForestClassifierTrainerTest.testFit()", "testcase": true, "constructor": false, "invocations": ["put", "labeled", "of", "add", "withEnvironmentBuilder", "withFeaturesCountSelectionStrgy", "withAmountOfTrees", "testEnvBuilder", "fit", "assertTrue", "getPredictionsAggregator", "assertEquals", "size", "getModels"]}, "focal_class": {"identifier": "RandomForestClassifierTrainer", "superclass": "extends RandomForestTrainer<ObjectHistogram<BootstrappedVector>, GiniHistogram, RandomForestClassifierTrainer>", "interfaces": "", "fields": [{"original_string": "private Map<Double, Integer> lblMapping = new HashMap<>();", "modifier": "private", "type": "Map<Double, Integer>", "declarator": "lblMapping = new HashMap<>()", "var_name": "lblMapping"}], "methods": [{"identifier": "RandomForestClassifierTrainer", "parameters": "(List<FeatureMeta> meta)", "modifiers": "public", "return": "", "signature": " RandomForestClassifierTrainer(List<FeatureMeta> meta)", "full_signature": "public  RandomForestClassifierTrainer(List<FeatureMeta> meta)", "class_method_signature": "RandomForestClassifierTrainer.RandomForestClassifierTrainer(List<FeatureMeta> meta)", "testcase": false, "constructor": true}, {"identifier": "instance", "parameters": "()", "modifiers": "@Override protected", "return": "RandomForestClassifierTrainer", "signature": "RandomForestClassifierTrainer instance()", "full_signature": "@Override protected RandomForestClassifierTrainer instance()", "class_method_signature": "RandomForestClassifierTrainer.instance()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Dataset<EmptyContext, BootstrappedDatasetPartition> dataset)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean init(Dataset<EmptyContext, BootstrappedDatasetPartition> dataset)", "full_signature": "@Override protected boolean init(Dataset<EmptyContext, BootstrappedDatasetPartition> dataset)", "class_method_signature": "RandomForestClassifierTrainer.init(Dataset<EmptyContext, BootstrappedDatasetPartition> dataset)", "testcase": false, "constructor": false}, {"identifier": "buildComposition", "parameters": "(List<TreeRoot> models)", "modifiers": "@Override protected", "return": "ModelsComposition", "signature": "ModelsComposition buildComposition(List<TreeRoot> models)", "full_signature": "@Override protected ModelsComposition buildComposition(List<TreeRoot> models)", "class_method_signature": "RandomForestClassifierTrainer.buildComposition(List<TreeRoot> models)", "testcase": false, "constructor": false}, {"identifier": "createImpurityHistogramsComputer", "parameters": "()", "modifiers": "@Override protected", "return": "ImpurityHistogramsComputer<GiniHistogram>", "signature": "ImpurityHistogramsComputer<GiniHistogram> createImpurityHistogramsComputer()", "full_signature": "@Override protected ImpurityHistogramsComputer<GiniHistogram> createImpurityHistogramsComputer()", "class_method_signature": "RandomForestClassifierTrainer.createImpurityHistogramsComputer()", "testcase": false, "constructor": false}, {"identifier": "createLeafStatisticsAggregator", "parameters": "()", "modifiers": "@Override protected", "return": "LeafValuesComputer<ObjectHistogram<BootstrappedVector>>", "signature": "LeafValuesComputer<ObjectHistogram<BootstrappedVector>> createLeafStatisticsAggregator()", "full_signature": "@Override protected LeafValuesComputer<ObjectHistogram<BootstrappedVector>> createLeafStatisticsAggregator()", "class_method_signature": "RandomForestClassifierTrainer.createLeafStatisticsAggregator()", "testcase": false, "constructor": false}, {"identifier": "withEnvironmentBuilder", "parameters": "(LearningEnvironmentBuilder envBuilder)", "modifiers": "@Override public", "return": "RandomForestClassifierTrainer", "signature": "RandomForestClassifierTrainer withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "full_signature": "@Override public RandomForestClassifierTrainer withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "class_method_signature": "RandomForestClassifierTrainer.withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/tree/randomforest/RandomForestClassifierTrainer.java"}, "focal_method": {"identifier": "withEnvironmentBuilder", "parameters": "(LearningEnvironmentBuilder envBuilder)", "modifiers": "@Override public", "return": "RandomForestClassifierTrainer", "body": "@Override public RandomForestClassifierTrainer withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder) {\n        return (RandomForestClassifierTrainer)super.withEnvironmentBuilder(envBuilder);\n    }", "signature": "RandomForestClassifierTrainer withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "full_signature": "@Override public RandomForestClassifierTrainer withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "class_method_signature": "RandomForestClassifierTrainer.withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "testcase": false, "constructor": false, "invocations": ["withEnvironmentBuilder"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}