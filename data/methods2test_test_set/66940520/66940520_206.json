{"test_class": {"identifier": "MapUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dhis-2/dhis-services/dhis-service-reporting/src/test/java/org/hisp/dhis/mapgeneration/MapUtilsTest.java"}, "test_case": {"identifier": "testGetWidthHeight", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetWidthHeight()\n    {\n        assertEquals( 150, getWidthHeight( 200, 300, 0, 0, 0.5 )[0] );\n        assertEquals( 300, getWidthHeight( 200, 300, 0, 0,  0.5 )[1] );\n        assertEquals( 200, getWidthHeight( 200, 300, 0, 0,  2 )[0] );\n        assertEquals( 100, getWidthHeight( 200, 300, 0, 0,  2 )[1] );\n        assertEquals( 300, getWidthHeight( 600, 300, 0, 0,  1d )[0] );\n        assertEquals( 300, getWidthHeight( 600, 300, 0, 0,  1d )[1] );\n\n        assertEquals( 200, getWidthHeight( 200, null, 0, 0,  0.5 )[0] );\n        assertEquals( 400, getWidthHeight( 200, null, 0, 0,  0.5 )[1] );\n        assertEquals( 200, getWidthHeight( 200, null, 0, 0,  2 )[0] );\n        assertEquals( 100, getWidthHeight( 200, null, 0, 0,  2 )[1] );\n\n        assertEquals( 150, getWidthHeight( null, 300, 0, 0,  0.5 )[0] );\n        assertEquals( 300, getWidthHeight( null, 300, 0, 0,  0.5 )[1] );\n        assertEquals( 600, getWidthHeight( null, 300, 0, 0,  2 )[0] );\n        assertEquals( 300, getWidthHeight( null, 300, 0, 0,  2 )[1] );\n    }", "signature": "void testGetWidthHeight()", "full_signature": "@Test public void testGetWidthHeight()", "class_method_signature": "MapUtilsTest.testGetWidthHeight()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight", "assertEquals", "getWidthHeight"]}, "focal_class": {"identifier": "MapUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String COLOR_PREFIX = \"#\";", "modifier": "private static final", "type": "String", "declarator": "COLOR_PREFIX = \"#\"", "var_name": "COLOR_PREFIX"}, {"original_string": "private static final int COLOR_RADIX = 16;", "modifier": "private static final", "type": "int", "declarator": "COLOR_RADIX = 16", "var_name": "COLOR_RADIX"}, {"original_string": "public static final int DEFAULT_MAP_WIDTH = 500;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_MAP_WIDTH = 500", "var_name": "DEFAULT_MAP_WIDTH"}, {"original_string": "public static final int TITLE_HEIGHT = 20;", "modifier": "public static final", "type": "int", "declarator": "TITLE_HEIGHT = 20", "var_name": "TITLE_HEIGHT"}], "methods": [{"identifier": "lerp", "parameters": "( int a, int b, double t )", "modifiers": "public static", "return": "int", "signature": "int lerp( int a, int b, double t )", "full_signature": "public static int lerp( int a, int b, double t )", "class_method_signature": "MapUtils.lerp( int a, int b, double t )", "testcase": false, "constructor": false}, {"identifier": "lerp", "parameters": "( double a, double b, double t )", "modifiers": "public static", "return": "double", "signature": "double lerp( double a, double b, double t )", "full_signature": "public static double lerp( double a, double b, double t )", "class_method_signature": "MapUtils.lerp( double a, double b, double t )", "testcase": false, "constructor": false}, {"identifier": "lerp", "parameters": "( Color a, Color b, double t )", "modifiers": "public static", "return": "Color", "signature": "Color lerp( Color a, Color b, double t )", "full_signature": "public static Color lerp( Color a, Color b, double t )", "class_method_signature": "MapUtils.lerp( Color a, Color b, double t )", "testcase": false, "constructor": false}, {"identifier": "createColorFromString", "parameters": "( String string )", "modifiers": "public static", "return": "Color", "signature": "Color createColorFromString( String string )", "full_signature": "public static Color createColorFromString( String string )", "class_method_signature": "MapUtils.createColorFromString( String string )", "testcase": false, "constructor": false}, {"identifier": "getNonEmptyNodes", "parameters": "( JsonNode json )", "modifiers": "public static", "return": "int", "signature": "int getNonEmptyNodes( JsonNode json )", "full_signature": "public static int getNonEmptyNodes( JsonNode json )", "class_method_signature": "MapUtils.getNonEmptyNodes( JsonNode json )", "testcase": false, "constructor": false}, {"identifier": "nodeIsNonEmpty", "parameters": "( JsonNode json )", "modifiers": "public static", "return": "boolean", "signature": "boolean nodeIsNonEmpty( JsonNode json )", "full_signature": "public static boolean nodeIsNonEmpty( JsonNode json )", "class_method_signature": "MapUtils.nodeIsNonEmpty( JsonNode json )", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "( InternalMap map, Integer maxWidth, Integer maxHeight )", "modifiers": "public static", "return": "BufferedImage", "signature": "BufferedImage render( InternalMap map, Integer maxWidth, Integer maxHeight )", "full_signature": "public static BufferedImage render( InternalMap map, Integer maxWidth, Integer maxHeight )", "class_method_signature": "MapUtils.render( InternalMap map, Integer maxWidth, Integer maxHeight )", "testcase": false, "constructor": false}, {"identifier": "renderTitle", "parameters": "( String title, Integer width )", "modifiers": "public static", "return": "BufferedImage", "signature": "BufferedImage renderTitle( String title, Integer width )", "full_signature": "public static BufferedImage renderTitle( String title, Integer width )", "class_method_signature": "MapUtils.renderTitle( String title, Integer width )", "testcase": false, "constructor": false}, {"identifier": "getWidthHeight", "parameters": "( Integer maxWidth, Integer maxHeight, int subtractWidth, int subtractHeight, double widthFactor )", "modifiers": "public static", "return": "int[]", "signature": "int[] getWidthHeight( Integer maxWidth, Integer maxHeight, int subtractWidth, int subtractHeight, double widthFactor )", "full_signature": "public static int[] getWidthHeight( Integer maxWidth, Integer maxHeight, int subtractWidth, int subtractHeight, double widthFactor )", "class_method_signature": "MapUtils.getWidthHeight( Integer maxWidth, Integer maxHeight, int subtractWidth, int subtractHeight, double widthFactor )", "testcase": false, "constructor": false}, {"identifier": "createFeatureLayerFromMapObject", "parameters": "( InternalMapObject mapObject )", "modifiers": "public static", "return": "Layer", "signature": "Layer createFeatureLayerFromMapObject( InternalMapObject mapObject )", "full_signature": "public static Layer createFeatureLayerFromMapObject( InternalMapObject mapObject )", "class_method_signature": "MapUtils.createFeatureLayerFromMapObject( InternalMapObject mapObject )", "testcase": false, "constructor": false}, {"identifier": "createErrorImage", "parameters": "( String error )", "modifiers": "public static", "return": "BufferedImage", "signature": "BufferedImage createErrorImage( String error )", "full_signature": "public static BufferedImage createErrorImage( String error )", "class_method_signature": "MapUtils.createErrorImage( String error )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-reporting/src/main/java/org/hisp/dhis/mapgeneration/MapUtils.java"}, "focal_method": {"identifier": "getWidthHeight", "parameters": "( Integer maxWidth, Integer maxHeight, int subtractWidth, int subtractHeight, double widthFactor )", "modifiers": "public static", "return": "int[]", "body": "public static int[] getWidthHeight( Integer maxWidth, Integer maxHeight, int subtractWidth, int subtractHeight, double widthFactor )\n    {\n        if ( maxWidth == null && maxHeight == null )\n        {\n            throw new IllegalArgumentException( \"At least one of width and height must be specified\" );\n        }\n        \n        if ( maxWidth == null )\n        {\n            maxHeight -= subtractHeight;\n            maxWidth = (int) Math.ceil( maxHeight * widthFactor );\n        }   \n        else if ( maxHeight == null )\n        {\n            maxWidth -= subtractWidth;\n            maxHeight = (int) Math.ceil( maxWidth / widthFactor );\n        }\n        else // Both set\n        {\n            maxWidth -= subtractWidth;\n            maxHeight -= subtractHeight;\n            \n            double maxWidthFactor = (double) maxWidth / maxHeight;\n            \n            if ( maxWidthFactor > widthFactor ) // Canvas wider than area\n            {\n                maxWidth = (int) Math.ceil( maxHeight * widthFactor );\n            }\n            else // Area wider than canvas\n            {\n                maxHeight = (int) Math.ceil( maxWidth / widthFactor );\n            }\n        }\n        \n        int[] result = { maxWidth, maxHeight };\n        \n        return result;\n    }", "signature": "int[] getWidthHeight( Integer maxWidth, Integer maxHeight, int subtractWidth, int subtractHeight, double widthFactor )", "full_signature": "public static int[] getWidthHeight( Integer maxWidth, Integer maxHeight, int subtractWidth, int subtractHeight, double widthFactor )", "class_method_signature": "MapUtils.getWidthHeight( Integer maxWidth, Integer maxHeight, int subtractWidth, int subtractHeight, double widthFactor )", "testcase": false, "constructor": false, "invocations": ["ceil", "ceil", "ceil", "ceil"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}