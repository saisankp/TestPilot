{"test_class": {"identifier": "CovalentRadiusDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/CovalentRadiusDescriptorTest.java"}, "test_case": {"identifier": "testVdWRadiusDescriptor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVdWRadiusDescriptor() throws ClassNotFoundException, CDKException, java.lang.Exception {\n        double[] testResult = {0.77};\n        IAtomicDescriptor descriptor = new CovalentRadiusDescriptor();\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"NCCN(C)(C)\");\n        double retval = ((DoubleResult) descriptor.calculate(mol.getAtom(1), mol).getValue()).doubleValue();\n\n        Assert.assertEquals(testResult[0], retval, 0.01);\n    }", "signature": "void testVdWRadiusDescriptor()", "full_signature": "@Test public void testVdWRadiusDescriptor()", "class_method_signature": "CovalentRadiusDescriptorTest.testVdWRadiusDescriptor()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "doubleValue", "getValue", "calculate", "getAtom", "assertEquals"]}, "focal_class": {"identifier": "CovalentRadiusDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "implements IAtomicDescriptor", "fields": [{"original_string": "private AtomTypeFactory     factory = null;", "modifier": "private", "type": "AtomTypeFactory", "declarator": "factory = null", "var_name": "factory"}, {"original_string": "private static ILoggingTool logger  = LoggingToolFactory.createLoggingTool(CovalentRadiusDescriptor.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger  = LoggingToolFactory.createLoggingTool(CovalentRadiusDescriptor.class)", "var_name": "logger"}], "methods": [{"identifier": "CovalentRadiusDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " CovalentRadiusDescriptor()", "full_signature": "public  CovalentRadiusDescriptor()", "class_method_signature": "CovalentRadiusDescriptor.CovalentRadiusDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "CovalentRadiusDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "CovalentRadiusDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "CovalentRadiusDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "CovalentRadiusDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "CovalentRadiusDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "CovalentRadiusDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "CovalentRadiusDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/CovalentRadiusDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer container) {\n        if (factory == null)\n            try {\n                factory = AtomTypeFactory.getInstance(\"org/openscience/cdk/config/data/jmol_atomtypes.txt\",\n                        container.getBuilder());\n            } catch (Exception exception) {\n                return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                        Double.NaN), getDescriptorNames(), exception);\n            }\n\n        double covalentradius;\n        try {\n            String symbol = atom.getSymbol();\n            IAtomType type = factory.getAtomType(symbol);\n            covalentradius = type.getCovalentRadius();\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    covalentradius), getDescriptorNames());\n        } catch (Exception exception) {\n            logger.debug(exception);\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    Double.NaN), getDescriptorNames(), exception);\n        }\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "CovalentRadiusDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["getInstance", "getBuilder", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "getSymbol", "getAtomType", "getCovalentRadius", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "debug", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}