{"test_class": {"identifier": "InterpolationVariableCollectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/util/InterpolationVariableCollectorTest.java"}, "test_case": {"identifier": "orderBottomUp", "parameters": "()", "modifiers": "@Test /** * The map numbers can go from higher to lower or from lower to higher. * After merge make sure the numbers are not skipping any. */ public", "return": "void", "body": "@Test\n    /**\n     * The map numbers can go from higher to lower or from lower to higher.\n     * After merge make sure the numbers are not skipping any.\n     */\n    public void orderBottomUp() {\n        final HashMap<InterpolationVariable, Integer> map = new HashMap<>();\n\n        map.put(new InterpolationVariable(\"var\",\n                                          DataType.TYPE_DATE,\n                                          \"Person\",\n                                          \"birthday\"), 2);\n        map.put(new InterpolationVariable(\"var\",\n                                          DataType.TYPE_DATE,\n                                          \"Person\",\n                                          \"dateOfDeath\"), 1);\n        map.put(new InterpolationVariable(\"p\",\n                                          DataType.TYPE_DATE,\n                                          \"Person\",\n                                          \"dateOfDeath\"), 0);\n\n        final Map<InterpolationVariable, Integer> result = new InterpolationVariableCollector(map).getMap();\n        assertEquals(2, result.size());\n        final Iterator<Integer> iterator = result.values().iterator();\n        assertEquals(0, (int) iterator.next());\n        assertEquals(1, (int) iterator.next());\n    }", "signature": "void orderBottomUp()", "full_signature": "@Test /** * The map numbers can go from higher to lower or from lower to higher. * After merge make sure the numbers are not skipping any. */ public void orderBottomUp()", "class_method_signature": "InterpolationVariableCollectorTest.orderBottomUp()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "getMap", "assertEquals", "size", "iterator", "values", "assertEquals", "next", "assertEquals", "next"]}, "focal_class": {"identifier": "InterpolationVariableCollector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String defaultType;", "modifier": "private final", "type": "String", "declarator": "defaultType", "var_name": "defaultType"}, {"original_string": "private final Map<Integer, InterpolationVariable> byColumn = new TreeMap<Integer, InterpolationVariable>();", "modifier": "private final", "type": "Map<Integer, InterpolationVariable>", "declarator": "byColumn = new TreeMap<Integer, InterpolationVariable>()", "var_name": "byColumn"}], "methods": [{"identifier": "InterpolationVariableCollector", "parameters": "(final Map<InterpolationVariable, Integer> map,\n                                          final String defaultType)", "modifiers": "public", "return": "", "signature": " InterpolationVariableCollector(final Map<InterpolationVariable, Integer> map,\n                                          final String defaultType)", "full_signature": "public  InterpolationVariableCollector(final Map<InterpolationVariable, Integer> map,\n                                          final String defaultType)", "class_method_signature": "InterpolationVariableCollector.InterpolationVariableCollector(final Map<InterpolationVariable, Integer> map,\n                                          final String defaultType)", "testcase": false, "constructor": true}, {"identifier": "InterpolationVariableCollector", "parameters": "(final Map<InterpolationVariable, Integer> map)", "modifiers": "public", "return": "", "signature": " InterpolationVariableCollector(final Map<InterpolationVariable, Integer> map)", "full_signature": "public  InterpolationVariableCollector(final Map<InterpolationVariable, Integer> map)", "class_method_signature": "InterpolationVariableCollector.InterpolationVariableCollector(final Map<InterpolationVariable, Integer> map)", "testcase": false, "constructor": true}, {"identifier": "removeDuplicates", "parameters": "(Map<InterpolationVariable, Integer> map)", "modifiers": "private", "return": "void", "signature": "void removeDuplicates(Map<InterpolationVariable, Integer> map)", "full_signature": "private void removeDuplicates(Map<InterpolationVariable, Integer> map)", "class_method_signature": "InterpolationVariableCollector.removeDuplicates(Map<InterpolationVariable, Integer> map)", "testcase": false, "constructor": false}, {"identifier": "isThereANeedToSetDefaultType", "parameters": "(final InterpolationVariable newVar,\n                                                final InterpolationVariable oldVar)", "modifiers": "public", "return": "boolean", "signature": "boolean isThereANeedToSetDefaultType(final InterpolationVariable newVar,\n                                                final InterpolationVariable oldVar)", "full_signature": "public boolean isThereANeedToSetDefaultType(final InterpolationVariable newVar,\n                                                final InterpolationVariable oldVar)", "class_method_signature": "InterpolationVariableCollector.isThereANeedToSetDefaultType(final InterpolationVariable newVar,\n                                                final InterpolationVariable oldVar)", "testcase": false, "constructor": false}, {"identifier": "findByVariable", "parameters": "(final Map<Integer, InterpolationVariable> result,\n                                                           final InterpolationVariable newVar)", "modifiers": "private", "return": "Optional<InterpolationVariable>", "signature": "Optional<InterpolationVariable> findByVariable(final Map<Integer, InterpolationVariable> result,\n                                                           final InterpolationVariable newVar)", "full_signature": "private Optional<InterpolationVariable> findByVariable(final Map<Integer, InterpolationVariable> result,\n                                                           final InterpolationVariable newVar)", "class_method_signature": "InterpolationVariableCollector.findByVariable(final Map<Integer, InterpolationVariable> result,\n                                                           final InterpolationVariable newVar)", "testcase": false, "constructor": false}, {"identifier": "getMap", "parameters": "()", "modifiers": "public", "return": "Map<InterpolationVariable, Integer>", "signature": "Map<InterpolationVariable, Integer> getMap()", "full_signature": "public Map<InterpolationVariable, Integer> getMap()", "class_method_signature": "InterpolationVariableCollector.getMap()", "testcase": false, "constructor": false}], "file": "drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/util/InterpolationVariableCollector.java"}, "focal_method": {"identifier": "getMap", "parameters": "()", "modifiers": "public", "return": "Map<InterpolationVariable, Integer>", "body": "public Map<InterpolationVariable, Integer> getMap() {\n        final HashMap<InterpolationVariable, Integer> result = new HashMap<InterpolationVariable, Integer>();\n\n        int index = 0;\n        for (Integer integer : byColumn.keySet()) {\n            result.put(byColumn.get(integer),\n                       index);\n            index++;\n        }\n\n        return result;\n    }", "signature": "Map<InterpolationVariable, Integer> getMap()", "full_signature": "public Map<InterpolationVariable, Integer> getMap()", "class_method_signature": "InterpolationVariableCollector.getMap()", "testcase": false, "constructor": false, "invocations": ["keySet", "put", "get"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}