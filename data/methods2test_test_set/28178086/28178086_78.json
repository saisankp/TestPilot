{"test_class": {"identifier": "FormattersTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtss/src/test/java/ec/tss/tsproviders/utils/FormattersTest.java"}, "test_case": {"identifier": "testCharsetFormatter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCharsetFormatter() {\n        Formatter<Charset> f = Formatters.charsetFormatter();\n        assertCompliance(f);\n        assertThat(f.format(StandardCharsets.UTF_8)).isEqualTo(\"UTF-8\");\n    }", "signature": "void testCharsetFormatter()", "full_signature": "@Test public void testCharsetFormatter()", "class_method_signature": "FormattersTest.testCharsetFormatter()", "testcase": true, "constructor": false, "invocations": ["charsetFormatter", "assertCompliance", "isEqualTo", "assertThat", "format"]}, "focal_class": {"identifier": "Formatters", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Formatter<File> FILE_FORMATTER = new Adapter<>(nbbrd.io.text.Formatter.onFile());", "modifier": "private static final", "type": "Formatter<File>", "declarator": "FILE_FORMATTER = new Adapter<>(nbbrd.io.text.Formatter.onFile())", "var_name": "FILE_FORMATTER"}, {"original_string": "private static final Formatter<Charset> CHARSET_FORMATTER = new Adapter<>(nbbrd.io.text.Formatter.onCharset());", "modifier": "private static final", "type": "Formatter<Charset>", "declarator": "CHARSET_FORMATTER = new Adapter<>(nbbrd.io.text.Formatter.onCharset())", "var_name": "CHARSET_FORMATTER"}, {"original_string": "private static final Formatter<double[]> DOUBLE_ARRAY_FORMATTER = new Adapter<>(nbbrd.io.text.Formatter.onDoubleArray());", "modifier": "private static final", "type": "Formatter<double[]>", "declarator": "DOUBLE_ARRAY_FORMATTER = new Adapter<>(nbbrd.io.text.Formatter.onDoubleArray())", "var_name": "DOUBLE_ARRAY_FORMATTER"}, {"original_string": "private static final Formatter<?> OBJECT_TO_STRING_FORMATTER = new Adapter<>(nbbrd.io.text.Formatter.onObjectToString());", "modifier": "private static final", "type": "Formatter<?>", "declarator": "OBJECT_TO_STRING_FORMATTER = new Adapter<>(nbbrd.io.text.Formatter.onObjectToString())", "var_name": "OBJECT_TO_STRING_FORMATTER"}, {"original_string": "private static final Formatter<String[]> STRING_ARRAY_FORMATTER = new Adapter<>(nbbrd.io.text.Formatter.onStringArray());", "modifier": "private static final", "type": "Formatter<String[]>", "declarator": "STRING_ARRAY_FORMATTER = new Adapter<>(nbbrd.io.text.Formatter.onStringArray())", "var_name": "STRING_ARRAY_FORMATTER"}], "methods": [{"identifier": "Formatters", "parameters": "()", "modifiers": "private", "return": "", "signature": " Formatters()", "full_signature": "private  Formatters()", "class_method_signature": "Formatters.Formatters()", "testcase": false, "constructor": true}, {"identifier": "formatFirstNotNull", "parameters": "(@NonNull T value, @NonNull Iterable<? extends IFormatter<T>> formatters)", "modifiers": "@Nullable public static", "return": "CharSequence", "signature": "CharSequence formatFirstNotNull(@NonNull T value, @NonNull Iterable<? extends IFormatter<T>> formatters)", "full_signature": "@Nullable public static CharSequence formatFirstNotNull(@NonNull T value, @NonNull Iterable<? extends IFormatter<T>> formatters)", "class_method_signature": "Formatters.formatFirstNotNull(@NonNull T value, @NonNull Iterable<? extends IFormatter<T>> formatters)", "testcase": false, "constructor": false}, {"identifier": "firstNotNull", "parameters": "(@NonNull IFormatter<T>... formatters)", "modifiers": "@NonNull public static", "return": "Formatter<T>", "signature": "Formatter<T> firstNotNull(@NonNull IFormatter<T>... formatters)", "full_signature": "@NonNull public static Formatter<T> firstNotNull(@NonNull IFormatter<T>... formatters)", "class_method_signature": "Formatters.firstNotNull(@NonNull IFormatter<T>... formatters)", "testcase": false, "constructor": false}, {"identifier": "firstNotNull", "parameters": "(@NonNull ImmutableList<? extends IFormatter<T>> formatters)", "modifiers": "@NonNull public static", "return": "Formatter<T>", "signature": "Formatter<T> firstNotNull(@NonNull ImmutableList<? extends IFormatter<T>> formatters)", "full_signature": "@NonNull public static Formatter<T> firstNotNull(@NonNull ImmutableList<? extends IFormatter<T>> formatters)", "class_method_signature": "Formatters.firstNotNull(@NonNull ImmutableList<? extends IFormatter<T>> formatters)", "testcase": false, "constructor": false}, {"identifier": "onJAXB", "parameters": "(@NonNull Class<T> classToBeFormatted, boolean formattedOutput)", "modifiers": "@NonNull public static", "return": "Formatter<T>", "signature": "Formatter<T> onJAXB(@NonNull Class<T> classToBeFormatted, boolean formattedOutput)", "full_signature": "@NonNull public static Formatter<T> onJAXB(@NonNull Class<T> classToBeFormatted, boolean formattedOutput)", "class_method_signature": "Formatters.onJAXB(@NonNull Class<T> classToBeFormatted, boolean formattedOutput)", "testcase": false, "constructor": false}, {"identifier": "onJAXB", "parameters": "(@NonNull JAXBContext context, boolean formattedOutput)", "modifiers": "@NonNull public static", "return": "Formatter<T>", "signature": "Formatter<T> onJAXB(@NonNull JAXBContext context, boolean formattedOutput)", "full_signature": "@NonNull public static Formatter<T> onJAXB(@NonNull JAXBContext context, boolean formattedOutput)", "class_method_signature": "Formatters.onJAXB(@NonNull JAXBContext context, boolean formattedOutput)", "testcase": false, "constructor": false}, {"identifier": "onJAXB", "parameters": "(@NonNull Marshaller marshaller)", "modifiers": "@NonNull public static", "return": "Formatter<T>", "signature": "Formatter<T> onJAXB(@NonNull Marshaller marshaller)", "full_signature": "@NonNull public static Formatter<T> onJAXB(@NonNull Marshaller marshaller)", "class_method_signature": "Formatters.onJAXB(@NonNull Marshaller marshaller)", "testcase": false, "constructor": false}, {"identifier": "onDateFormat", "parameters": "(@NonNull DateFormat dateFormat)", "modifiers": "@NonNull public static", "return": "Formatter<Date>", "signature": "Formatter<Date> onDateFormat(@NonNull DateFormat dateFormat)", "full_signature": "@NonNull public static Formatter<Date> onDateFormat(@NonNull DateFormat dateFormat)", "class_method_signature": "Formatters.onDateFormat(@NonNull DateFormat dateFormat)", "testcase": false, "constructor": false}, {"identifier": "onNumberFormat", "parameters": "(@NonNull NumberFormat numberFormat)", "modifiers": "@NonNull public static", "return": "Formatter<Number>", "signature": "Formatter<Number> onNumberFormat(@NonNull NumberFormat numberFormat)", "full_signature": "@NonNull public static Formatter<Number> onNumberFormat(@NonNull NumberFormat numberFormat)", "class_method_signature": "Formatters.onNumberFormat(@NonNull NumberFormat numberFormat)", "testcase": false, "constructor": false}, {"identifier": "onNull", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<T>", "signature": "Formatter<T> onNull()", "full_signature": "@NonNull public static Formatter<T> onNull()", "class_method_signature": "Formatters.onNull()", "testcase": false, "constructor": false}, {"identifier": "ofInstance", "parameters": "(@Nullable CharSequence instance)", "modifiers": "@NonNull @SuppressWarnings(\"null\") public static", "return": "Formatter<T>", "signature": "Formatter<T> ofInstance(@Nullable CharSequence instance)", "full_signature": "@NonNull @SuppressWarnings(\"null\") public static Formatter<T> ofInstance(@Nullable CharSequence instance)", "class_method_signature": "Formatters.ofInstance(@Nullable CharSequence instance)", "testcase": false, "constructor": false}, {"identifier": "fileFormatter", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<File>", "signature": "Formatter<File> fileFormatter()", "full_signature": "@NonNull public static Formatter<File> fileFormatter()", "class_method_signature": "Formatters.fileFormatter()", "testcase": false, "constructor": false}, {"identifier": "intFormatter", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<Integer>", "signature": "Formatter<Integer> intFormatter()", "full_signature": "@NonNull public static Formatter<Integer> intFormatter()", "class_method_signature": "Formatters.intFormatter()", "testcase": false, "constructor": false}, {"identifier": "longFormatter", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<Long>", "signature": "Formatter<Long> longFormatter()", "full_signature": "@NonNull public static Formatter<Long> longFormatter()", "class_method_signature": "Formatters.longFormatter()", "testcase": false, "constructor": false}, {"identifier": "doubleFormatter", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<Double>", "signature": "Formatter<Double> doubleFormatter()", "full_signature": "@NonNull public static Formatter<Double> doubleFormatter()", "class_method_signature": "Formatters.doubleFormatter()", "testcase": false, "constructor": false}, {"identifier": "boolFormatter", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<Boolean>", "signature": "Formatter<Boolean> boolFormatter()", "full_signature": "@NonNull public static Formatter<Boolean> boolFormatter()", "class_method_signature": "Formatters.boolFormatter()", "testcase": false, "constructor": false}, {"identifier": "charFormatter", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<Character>", "signature": "Formatter<Character> charFormatter()", "full_signature": "@NonNull public static Formatter<Character> charFormatter()", "class_method_signature": "Formatters.charFormatter()", "testcase": false, "constructor": false}, {"identifier": "charsetFormatter", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<Charset>", "signature": "Formatter<Charset> charsetFormatter()", "full_signature": "@NonNull public static Formatter<Charset> charsetFormatter()", "class_method_signature": "Formatters.charsetFormatter()", "testcase": false, "constructor": false}, {"identifier": "enumFormatter", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<T>", "signature": "Formatter<T> enumFormatter()", "full_signature": "@NonNull public static Formatter<T> enumFormatter()", "class_method_signature": "Formatters.enumFormatter()", "testcase": false, "constructor": false}, {"identifier": "stringFormatter", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<String>", "signature": "Formatter<String> stringFormatter()", "full_signature": "@NonNull public static Formatter<String> stringFormatter()", "class_method_signature": "Formatters.stringFormatter()", "testcase": false, "constructor": false}, {"identifier": "doubleArrayFormatter", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<double[]>", "signature": "Formatter<double[]> doubleArrayFormatter()", "full_signature": "@NonNull public static Formatter<double[]> doubleArrayFormatter()", "class_method_signature": "Formatters.doubleArrayFormatter()", "testcase": false, "constructor": false}, {"identifier": "stringArrayFormatter", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<String[]>", "signature": "Formatter<String[]> stringArrayFormatter()", "full_signature": "@NonNull public static Formatter<String[]> stringArrayFormatter()", "class_method_signature": "Formatters.stringArrayFormatter()", "testcase": false, "constructor": false}, {"identifier": "compose", "parameters": "(@NonNull IFormatter<X> formatter, @NonNull Function<? super Y, ? extends X> before)", "modifiers": "@NonNull @SuppressWarnings(\"null\") public static", "return": "Formatter<Y>", "signature": "Formatter<Y> compose(@NonNull IFormatter<X> formatter, @NonNull Function<? super Y, ? extends X> before)", "full_signature": "@NonNull @SuppressWarnings(\"null\") public static Formatter<Y> compose(@NonNull IFormatter<X> formatter, @NonNull Function<? super Y, ? extends X> before)", "class_method_signature": "Formatters.compose(@NonNull IFormatter<X> formatter, @NonNull Function<? super Y, ? extends X> before)", "testcase": false, "constructor": false}, {"identifier": "usingToString", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<Object>", "signature": "Formatter<Object> usingToString()", "full_signature": "@NonNull public static Formatter<Object> usingToString()", "class_method_signature": "Formatters.usingToString()", "testcase": false, "constructor": false}, {"identifier": "onJoiner", "parameters": "(@NonNull Joiner joiner)", "modifiers": "@NonNull public static", "return": "Formatter<List<String>>", "signature": "Formatter<List<String>> onJoiner(@NonNull Joiner joiner)", "full_signature": "@NonNull public static Formatter<List<String>> onJoiner(@NonNull Joiner joiner)", "class_method_signature": "Formatters.onJoiner(@NonNull Joiner joiner)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(@NonNull IFormatter<T> formatter)", "modifiers": "@NonNull public static", "return": "Formatter<T>", "signature": "Formatter<T> wrap(@NonNull IFormatter<T> formatter)", "full_signature": "@NonNull public static Formatter<T> wrap(@NonNull IFormatter<T> formatter)", "class_method_signature": "Formatters.wrap(@NonNull IFormatter<T> formatter)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/utils/Formatters.java"}, "focal_method": {"identifier": "charsetFormatter", "parameters": "()", "modifiers": "@NonNull public static", "return": "Formatter<Charset>", "body": "@NonNull\n    public static Formatter<Charset> charsetFormatter() {\n        return CHARSET_FORMATTER;\n    }", "signature": "Formatter<Charset> charsetFormatter()", "full_signature": "@NonNull public static Formatter<Charset> charsetFormatter()", "class_method_signature": "Formatters.charsetFormatter()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}