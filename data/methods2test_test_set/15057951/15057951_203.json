{"test_class": {"identifier": "CustomizableLevelIndexWalkerTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/index/CustomizableLevelIndexWalkerTest.java"}, "test_case": {"identifier": "shouldTraverseOnlyOneLevelGreedilyWhileUsingDefaultModeInRestOfLevels", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldTraverseOnlyOneLevelGreedilyWhileUsingDefaultModeInRestOfLevels() {\n        // given\n        LevelIndex<String> index = levelIndex().withLevelCount(3).build();\n        index.add(new String[]{\"*\", \"B\", \"*\"}, \"default\");\n        index.add(new String[]{\"A\", \"B\", \"C\"}, \"value\");\n        index.add(new String[]{\"A\", \"C\", \"*\"}, \"allowAllValue\");\n\n        Matcher allowAll = new MatchAllMatcher();\n\n        CustomizableLevelIndexWalker<String> crawler = new CustomizableLevelIndexWalker<String>(\n                indexTraversalOverrides().withGreediness(false, true, false).overridingMatchers(null, allowAll, null).build(),\n                new SimpleLevelLeafValuesExtractor<String>(),\n                index, \"A\", \"B\", \"C\");\n\n        // when\n        List<String> values = crawler.find();\n\n        // then\n        assertThat(values).containsOnly(\"value\", \"allowAllValue\");\n    }", "signature": "void shouldTraverseOnlyOneLevelGreedilyWhileUsingDefaultModeInRestOfLevels()", "full_signature": "@Test public void shouldTraverseOnlyOneLevelGreedilyWhileUsingDefaultModeInRestOfLevels()", "class_method_signature": "CustomizableLevelIndexWalkerTest.shouldTraverseOnlyOneLevelGreedilyWhileUsingDefaultModeInRestOfLevels()", "testcase": true, "constructor": false, "invocations": ["build", "withLevelCount", "levelIndex", "add", "add", "add", "build", "overridingMatchers", "withGreediness", "indexTraversalOverrides", "find", "containsOnly", "assertThat"]}, "focal_class": {"identifier": "CustomizableLevelIndexWalker", "superclass": "", "interfaces": "implements LevelIndexWalker<T>", "fields": [{"original_string": "private final LevelNodeInspector<T> fastNodeInspector = new FastLevelNodeInspector<T>(this);", "modifier": "private final", "type": "LevelNodeInspector<T>", "declarator": "fastNodeInspector = new FastLevelNodeInspector<T>(this)", "var_name": "fastNodeInspector"}, {"original_string": "private final LevelNodeInspector<T> greedyNodeInspector = new GreedyLevelNodeInspector<T>(this);", "modifier": "private final", "type": "LevelNodeInspector<T>", "declarator": "greedyNodeInspector = new GreedyLevelNodeInspector<T>(this)", "var_name": "greedyNodeInspector"}, {"original_string": "private final LevelIndex<T> index;", "modifier": "private final", "type": "LevelIndex<T>", "declarator": "index", "var_name": "index"}, {"original_string": "private final String[] levelValues;", "modifier": "private final", "type": "String[]", "declarator": "levelValues", "var_name": "levelValues"}, {"original_string": "private final IndexTraversalConfig overrides;", "modifier": "private final", "type": "IndexTraversalConfig", "declarator": "overrides", "var_name": "overrides"}, {"original_string": "private final LevelLeafValuesExtractor<T> levelLeafValuesExtractor;", "modifier": "private final", "type": "LevelLeafValuesExtractor<T>", "declarator": "levelLeafValuesExtractor", "var_name": "levelLeafValuesExtractor"}], "methods": [{"identifier": "CustomizableLevelIndexWalker", "parameters": "(IndexTraversalConfig overrides,\n            LevelLeafValuesExtractor<T> levelLeafValuesExtractor,\n            LevelIndex<T> index, String... levelValues)", "modifiers": "public", "return": "", "signature": " CustomizableLevelIndexWalker(IndexTraversalConfig overrides,\n            LevelLeafValuesExtractor<T> levelLeafValuesExtractor,\n            LevelIndex<T> index, String... levelValues)", "full_signature": "public  CustomizableLevelIndexWalker(IndexTraversalConfig overrides,\n            LevelLeafValuesExtractor<T> levelLeafValuesExtractor,\n            LevelIndex<T> index, String... levelValues)", "class_method_signature": "CustomizableLevelIndexWalker.CustomizableLevelIndexWalker(IndexTraversalConfig overrides,\n            LevelLeafValuesExtractor<T> levelLeafValuesExtractor,\n            LevelIndex<T> index, String... levelValues)", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "()", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> find()", "full_signature": "@Override public List<T> find()", "class_method_signature": "CustomizableLevelIndexWalker.find()", "testcase": false, "constructor": false}, {"identifier": "inspect", "parameters": "(LevelNode<T> currentNode, int depth)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<LevelNode<T>>", "signature": "List<LevelNode<T>> inspect(LevelNode<T> currentNode, int depth)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<LevelNode<T>> inspect(LevelNode<T> currentNode, int depth)", "class_method_signature": "CustomizableLevelIndexWalker.inspect(LevelNode<T> currentNode, int depth)", "testcase": false, "constructor": false}, {"identifier": "indexDepth", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int indexDepth()", "full_signature": "public int indexDepth()", "class_method_signature": "CustomizableLevelIndexWalker.indexDepth()", "testcase": false, "constructor": false}, {"identifier": "descriptorsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int descriptorsCount()", "full_signature": "public int descriptorsCount()", "class_method_signature": "CustomizableLevelIndexWalker.descriptorsCount()", "testcase": false, "constructor": false}, {"identifier": "inspectorFor", "parameters": "(int depth)", "modifiers": "private", "return": "LevelNodeInspector<T>", "signature": "LevelNodeInspector<T> inspectorFor(int depth)", "full_signature": "private LevelNodeInspector<T> inspectorFor(int depth)", "class_method_signature": "CustomizableLevelIndexWalker.inspectorFor(int depth)", "testcase": false, "constructor": false}, {"identifier": "descriptorFor", "parameters": "(int depth)", "modifiers": "public", "return": "IndexLevelDescriptor", "signature": "IndexLevelDescriptor descriptorFor(int depth)", "full_signature": "public IndexLevelDescriptor descriptorFor(int depth)", "class_method_signature": "CustomizableLevelIndexWalker.descriptorFor(int depth)", "testcase": false, "constructor": false}, {"identifier": "descriptorFor", "parameters": "(String levelName)", "modifiers": "public", "return": "IndexLevelDescriptor", "signature": "IndexLevelDescriptor descriptorFor(String levelName)", "full_signature": "public IndexLevelDescriptor descriptorFor(String levelName)", "class_method_signature": "CustomizableLevelIndexWalker.descriptorFor(String levelName)", "testcase": false, "constructor": false}, {"identifier": "matcherFor", "parameters": "(int depth)", "modifiers": "", "return": "Matcher", "signature": "Matcher matcherFor(int depth)", "full_signature": " Matcher matcherFor(int depth)", "class_method_signature": "CustomizableLevelIndexWalker.matcherFor(int depth)", "testcase": false, "constructor": false}, {"identifier": "typeFor", "parameters": "(int depth)", "modifiers": "", "return": "Type<?>", "signature": "Type<?> typeFor(int depth)", "full_signature": " Type<?> typeFor(int depth)", "class_method_signature": "CustomizableLevelIndexWalker.typeFor(int depth)", "testcase": false, "constructor": false}, {"identifier": "levelValueFor", "parameters": "(int depth)", "modifiers": "public", "return": "String", "signature": "String levelValueFor(int depth)", "full_signature": "public String levelValueFor(int depth)", "class_method_signature": "CustomizableLevelIndexWalker.levelValueFor(int depth)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/index/CustomizableLevelIndexWalker.java"}, "focal_method": {"identifier": "find", "parameters": "()", "modifiers": "@Override public", "return": "List<T>", "body": "@Override\n    public List<T> find() {\n        List<LevelNode<T>> nodes = inspect(index.getRoot(), 0);\n        return levelLeafValuesExtractor.extract(this, nodes);\n    }", "signature": "List<T> find()", "full_signature": "@Override public List<T> find()", "class_method_signature": "CustomizableLevelIndexWalker.find()", "testcase": false, "constructor": false, "invocations": ["inspect", "getRoot", "extract"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}