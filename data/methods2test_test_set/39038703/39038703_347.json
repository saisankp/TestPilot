{"test_class": {"identifier": "HandleDAOImplTest", "superclass": "extends AbstractUnitTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(HandleDAOImplTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(HandleDAOImplTest.class)", "var_name": "log"}, {"original_string": "private Item item1;", "modifier": "private", "type": "Item", "declarator": "item1", "var_name": "item1"}, {"original_string": "private Item item2;", "modifier": "private", "type": "Item", "declarator": "item2", "var_name": "item2"}, {"original_string": "private Item item3;", "modifier": "private", "type": "Item", "declarator": "item3", "var_name": "item3"}, {"original_string": "private Item item4;", "modifier": "private", "type": "Item", "declarator": "item4", "var_name": "item4"}, {"original_string": "protected EPersonService ePersonService = EPersonServiceFactory.getInstance().getEPersonService();", "modifier": "protected", "type": "EPersonService", "declarator": "ePersonService = EPersonServiceFactory.getInstance().getEPersonService()", "var_name": "ePersonService"}, {"original_string": "protected GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();", "modifier": "protected", "type": "GroupService", "declarator": "groupService = EPersonServiceFactory.getInstance().getGroupService()", "var_name": "groupService"}, {"original_string": "protected CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();", "modifier": "protected", "type": "CommunityService", "declarator": "communityService = ContentServiceFactory.getInstance().getCommunityService()", "var_name": "communityService"}, {"original_string": "protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();", "modifier": "protected", "type": "CollectionService", "declarator": "collectionService = ContentServiceFactory.getInstance().getCollectionService()", "var_name": "collectionService"}, {"original_string": "protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();", "modifier": "protected", "type": "ItemService", "declarator": "itemService = ContentServiceFactory.getInstance().getItemService()", "var_name": "itemService"}, {"original_string": "protected BitstreamService bitstreamService = ContentServiceFactory.getInstance().getBitstreamService();", "modifier": "protected", "type": "BitstreamService", "declarator": "bitstreamService = ContentServiceFactory.getInstance().getBitstreamService()", "var_name": "bitstreamService"}, {"original_string": "protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();", "modifier": "protected", "type": "WorkspaceItemService", "declarator": "workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService()", "var_name": "workspaceItemService"}, {"original_string": "protected InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();", "modifier": "protected", "type": "InstallItemService", "declarator": "installItemService = ContentServiceFactory.getInstance().getInstallItemService()", "var_name": "installItemService"}, {"original_string": "protected VersioningService versioningService = VersionServiceFactory.getInstance().getVersionService();", "modifier": "protected", "type": "VersioningService", "declarator": "versioningService = VersionServiceFactory.getInstance().getVersionService()", "var_name": "versioningService"}, {"original_string": "private HandleDAO handleDAO = new DSpace().getServiceManager().getServicesByType(HandleDAO.class).get(0);", "modifier": "private", "type": "HandleDAO", "declarator": "handleDAO = new DSpace().getServiceManager().getServicesByType(HandleDAO.class).get(0)", "var_name": "handleDAO"}, {"original_string": "private Community owningCommunity;", "modifier": "private", "type": "Community", "declarator": "owningCommunity", "var_name": "owningCommunity"}, {"original_string": "private static final String HANDLE_PREFIX = \"123456789\";", "modifier": "private static final", "type": "String", "declarator": "HANDLE_PREFIX = \"123456789\"", "var_name": "HANDLE_PREFIX"}, {"original_string": "private static final String SUFFIX_1 = \"11\";", "modifier": "private static final", "type": "String", "declarator": "SUFFIX_1 = \"11\"", "var_name": "SUFFIX_1"}, {"original_string": "private static final String SUFFIX_2 = \"11.2\";", "modifier": "private static final", "type": "String", "declarator": "SUFFIX_2 = \"11.2\"", "var_name": "SUFFIX_2"}, {"original_string": "private static final String SUFFIX_3 = \"33\";", "modifier": "private static final", "type": "String", "declarator": "SUFFIX_3 = \"33\"", "var_name": "SUFFIX_3"}, {"original_string": "private static final String SUFFIX_4 = \"44\";", "modifier": "private static final", "type": "String", "declarator": "SUFFIX_4 = \"44\"", "var_name": "SUFFIX_4"}], "file": "dspace-api/src/test/java/org/dspace/handle/dao/impl/HandleDAOImplTest.java"}, "test_case": {"identifier": "updateHandlesWithNewPrefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void updateHandlesWithNewPrefix() throws Exception {\n        context.turnOffAuthorisationSystem();\n\n        String newPrefix = \"987654321\";\n        handleDAO.updateHandlesWithNewPrefix(context, newPrefix, HANDLE_PREFIX);\n        context.commit();\n\n        assertEquals(newPrefix + \"/\" + SUFFIX_1, itemService.find(context, item1.getID()).getHandle());\n        assertEquals(newPrefix + \"/\" + SUFFIX_2, itemService.find(context, item2.getID()).getHandle());\n        assertEquals(newPrefix + \"/\" + SUFFIX_3, itemService.find(context, item3.getID()).getHandle());\n\n        //Ensure that records not matching the old prefix are not touched\n        assertEquals(\"hdl:custom-prefix/\" + SUFFIX_4, itemService.find(context, item4.getID()).getHandle());\n\n        context.restoreAuthSystemState();\n    }", "signature": "void updateHandlesWithNewPrefix()", "full_signature": "@Test public void updateHandlesWithNewPrefix()", "class_method_signature": "HandleDAOImplTest.updateHandlesWithNewPrefix()", "testcase": true, "constructor": false, "invocations": ["turnOffAuthorisationSystem", "updateHandlesWithNewPrefix", "commit", "assertEquals", "getHandle", "find", "getID", "assertEquals", "getHandle", "find", "getID", "assertEquals", "getHandle", "find", "getID", "assertEquals", "getHandle", "find", "getID", "restoreAuthSystemState"]}, "focal_class": {"identifier": "HandleDAOImpl", "superclass": "extends AbstractHibernateDAO<Handle>", "interfaces": "implements HandleDAO", "fields": [{"original_string": "private static final String HANDLE_SEQUENCE = \"handle_seq\";", "modifier": "private static final", "type": "String", "declarator": "HANDLE_SEQUENCE = \"handle_seq\"", "var_name": "HANDLE_SEQUENCE"}], "methods": [{"identifier": "HandleDAOImpl", "parameters": "()", "modifiers": "protected", "return": "", "signature": " HandleDAOImpl()", "full_signature": "protected  HandleDAOImpl()", "class_method_signature": "HandleDAOImpl.HandleDAOImpl()", "testcase": false, "constructor": true}, {"identifier": "getHandlesByDSpaceObject", "parameters": "(Context context, DSpaceObject dso)", "modifiers": "@Override public", "return": "List<Handle>", "signature": "List<Handle> getHandlesByDSpaceObject(Context context, DSpaceObject dso)", "full_signature": "@Override public List<Handle> getHandlesByDSpaceObject(Context context, DSpaceObject dso)", "class_method_signature": "HandleDAOImpl.getHandlesByDSpaceObject(Context context, DSpaceObject dso)", "testcase": false, "constructor": false}, {"identifier": "findByHandle", "parameters": "(Context context, String handle)", "modifiers": "@Override public", "return": "Handle", "signature": "Handle findByHandle(Context context, String handle)", "full_signature": "@Override public Handle findByHandle(Context context, String handle)", "class_method_signature": "HandleDAOImpl.findByHandle(Context context, String handle)", "testcase": false, "constructor": false}, {"identifier": "findByPrefix", "parameters": "(Context context, String prefix)", "modifiers": "@Override public", "return": "List<Handle>", "signature": "List<Handle> findByPrefix(Context context, String prefix)", "full_signature": "@Override public List<Handle> findByPrefix(Context context, String prefix)", "class_method_signature": "HandleDAOImpl.findByPrefix(Context context, String prefix)", "testcase": false, "constructor": false}, {"identifier": "countHandlesByPrefix", "parameters": "(Context context, String prefix)", "modifiers": "@Override public", "return": "long", "signature": "long countHandlesByPrefix(Context context, String prefix)", "full_signature": "@Override public long countHandlesByPrefix(Context context, String prefix)", "class_method_signature": "HandleDAOImpl.countHandlesByPrefix(Context context, String prefix)", "testcase": false, "constructor": false}, {"identifier": "updateHandlesWithNewPrefix", "parameters": "(Context context, String newPrefix, String oldPrefix)", "modifiers": "@Override public", "return": "int", "signature": "int updateHandlesWithNewPrefix(Context context, String newPrefix, String oldPrefix)", "full_signature": "@Override public int updateHandlesWithNewPrefix(Context context, String newPrefix, String oldPrefix)", "class_method_signature": "HandleDAOImpl.updateHandlesWithNewPrefix(Context context, String newPrefix, String oldPrefix)", "testcase": false, "constructor": false}, {"identifier": "countRows", "parameters": "(Context context)", "modifiers": "@Override public", "return": "int", "signature": "int countRows(Context context)", "full_signature": "@Override public int countRows(Context context)", "class_method_signature": "HandleDAOImpl.countRows(Context context)", "testcase": false, "constructor": false}, {"identifier": "getNextHandleSuffix", "parameters": "(Context context)", "modifiers": "@Override public", "return": "Long", "signature": "Long getNextHandleSuffix(Context context)", "full_signature": "@Override public Long getNextHandleSuffix(Context context)", "class_method_signature": "HandleDAOImpl.getNextHandleSuffix(Context context)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/handle/dao/impl/HandleDAOImpl.java"}, "focal_method": {"identifier": "updateHandlesWithNewPrefix", "parameters": "(Context context, String newPrefix, String oldPrefix)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int updateHandlesWithNewPrefix(Context context, String newPrefix, String oldPrefix) throws SQLException\n    {\n        String hql = \"UPDATE Handle set handle = concat(:newPrefix, '/', substring(handle, :oldPrefixLength + 2)) WHERE handle like concat(:oldPrefix,'%')\";\n        Query query = createQuery(context, hql);\n        query.setString(\"newPrefix\", newPrefix);\n        query.setInteger(\"oldPrefixLength\", oldPrefix.length());\n        query.setString(\"oldPrefix\", oldPrefix);\n        return query.executeUpdate();\n    }", "signature": "int updateHandlesWithNewPrefix(Context context, String newPrefix, String oldPrefix)", "full_signature": "@Override public int updateHandlesWithNewPrefix(Context context, String newPrefix, String oldPrefix)", "class_method_signature": "HandleDAOImpl.updateHandlesWithNewPrefix(Context context, String newPrefix, String oldPrefix)", "testcase": false, "constructor": false, "invocations": ["createQuery", "setString", "setInteger", "length", "setString", "executeUpdate"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}