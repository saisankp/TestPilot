{"test_class": {"identifier": "DefaultBinderConfigurationTest", "superclass": "", "interfaces": "", "fields": [], "file": "DbSetup-core/src/test/java/com/ninja_squad/dbsetup/bind/DefaultBinderConfigurationTest.java"}, "test_case": {"identifier": "shouldReturnDefaultBinderIfParameterTypeCantBeObtained", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnDefaultBinderIfParameterTypeCantBeObtained() throws SQLException {\n        ParameterMetaData mockMetaData = mock(ParameterMetaData.class);\n        when(mockMetaData.getParameterType(1)).thenThrow(new SQLException());\n        assertEquals(Binders.defaultBinder(), DefaultBinderConfiguration.INSTANCE.getBinder(mockMetaData, 1));\n    }", "signature": "void shouldReturnDefaultBinderIfParameterTypeCantBeObtained()", "full_signature": "@Test public void shouldReturnDefaultBinderIfParameterTypeCantBeObtained()", "class_method_signature": "DefaultBinderConfigurationTest.shouldReturnDefaultBinderIfParameterTypeCantBeObtained()", "testcase": true, "constructor": false, "invocations": ["mock", "thenThrow", "when", "getParameterType", "assertEquals", "defaultBinder", "getBinder"]}, "focal_class": {"identifier": "DefaultBinderConfiguration", "superclass": "", "interfaces": "implements BinderConfiguration", "fields": [{"original_string": "public static final DefaultBinderConfiguration INSTANCE = new DefaultBinderConfiguration();", "modifier": "public static final", "type": "DefaultBinderConfiguration", "declarator": "INSTANCE = new DefaultBinderConfiguration()", "var_name": "INSTANCE"}], "methods": [{"identifier": "DefaultBinderConfiguration", "parameters": "()", "modifiers": "protected", "return": "", "signature": " DefaultBinderConfiguration()", "full_signature": "protected  DefaultBinderConfiguration()", "class_method_signature": "DefaultBinderConfiguration.DefaultBinderConfiguration()", "testcase": false, "constructor": true}, {"identifier": "getBinder", "parameters": "(ParameterMetaData metadata, int param)", "modifiers": "@Override public", "return": "Binder", "signature": "Binder getBinder(ParameterMetaData metadata, int param)", "full_signature": "@Override public Binder getBinder(ParameterMetaData metadata, int param)", "class_method_signature": "DefaultBinderConfiguration.getBinder(ParameterMetaData metadata, int param)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DefaultBinderConfiguration.toString()", "testcase": false, "constructor": false}], "file": "DbSetup-core/src/main/java/com/ninja_squad/dbsetup/bind/DefaultBinderConfiguration.java"}, "focal_method": {"identifier": "getBinder", "parameters": "(ParameterMetaData metadata, int param)", "modifiers": "@Override public", "return": "Binder", "body": "@Override\n    public Binder getBinder(ParameterMetaData metadata, int param) throws SQLException {\n        if (metadata == null) {\n            return Binders.defaultBinder();\n        }\n        try {\n            int sqlType = metadata.getParameterType(param);\n            if (sqlType == Types.DATE) {\n                return Binders.dateBinder();\n            }\n            if (sqlType == Types.TIME || sqlType == Types.TIME_WITH_TIMEZONE) {\n                return Binders.timeBinder();\n            }\n            if (sqlType == Types.TIMESTAMP || sqlType == Types.TIMESTAMP_WITH_TIMEZONE) {\n                return Binders.timestampBinder();\n            }\n            if (sqlType == Types.BIGINT\n                || sqlType == Types.INTEGER\n                || sqlType == Types.SMALLINT\n                || sqlType == Types.TINYINT) {\n                return Binders.integerBinder();\n            }\n            if (sqlType == Types.DECIMAL\n                || sqlType == Types.DOUBLE\n                || sqlType == Types.FLOAT\n                || sqlType == Types.NUMERIC\n                || sqlType == Types.REAL) {\n                return Binders.decimalBinder();\n            }\n            if (sqlType == Types.VARCHAR\n                || sqlType == Types.CHAR\n                || sqlType == Types.LONGNVARCHAR\n                || sqlType == Types.LONGVARCHAR\n                || sqlType == Types.NCHAR\n                || sqlType == Types.NVARCHAR) {\n                return Binders.stringBinder();\n            }\n            return Binders.defaultBinder();\n        }\n        catch (SQLException e) {\n            // the database can't return types from parameters. Fall back to default binder.\n            return Binders.defaultBinder();\n        }\n    }", "signature": "Binder getBinder(ParameterMetaData metadata, int param)", "full_signature": "@Override public Binder getBinder(ParameterMetaData metadata, int param)", "class_method_signature": "DefaultBinderConfiguration.getBinder(ParameterMetaData metadata, int param)", "testcase": false, "constructor": false, "invocations": ["defaultBinder", "getParameterType", "dateBinder", "timeBinder", "timestampBinder", "integerBinder", "decimalBinder", "stringBinder", "defaultBinder", "defaultBinder"]}, "repository": {"repo_id": 4260851, "url": "https://github.com/Ninja-Squad/DbSetup", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 183, "size": 1379, "license": "licensed"}}