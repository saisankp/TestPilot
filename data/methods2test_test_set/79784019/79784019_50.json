{"test_class": {"identifier": "ModelValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ModelValidator validator;", "modifier": "private", "type": "ModelValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private FieldData fieldData;", "modifier": "private", "type": "FieldData", "declarator": "fieldData", "var_name": "fieldData"}], "file": "stardao-core/src/test/java/io/stardog/stardao/validation/ModelValidatorTest.java"}, "test_case": {"identifier": "testGetUpdateValidationErrors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetUpdateValidationErrors() throws Exception {\n        List<ValidationError> errors = validator.getUpdateValidationErrors(null, fieldData);\n        assertEquals(1, errors.size());\n\n        Update<TestValidateModel> update = JsonHelper.update(\"{email:'bad'}\", TestValidateModel.class);\n        errors = validator.getUpdateValidationErrors(update, fieldData);\n        assertEquals(1, errors.size());\n        assertEquals(\"must be a well-formed email address\", errors.get(0).getMessage());\n\n        // attempt to modify a non-Updatable field\n        update = JsonHelper.update(\"{type:'change'}\", TestValidateModel.class);\n        errors = validator.getUpdateValidationErrors(update, fieldData);\n        assertEquals(1, errors.size());\n        assertEquals(\"is not updatable\", errors.get(0).getMessage());\n\n        // attempt to unset a non-optional field\n        update = JsonHelper.update(\"{email:null}\", TestValidateModel.class);\n        errors = validator.getUpdateValidationErrors(update, fieldData);\n        assertEquals(1, errors.size());\n        assertEquals(\"email: is required\", errors.get(0).toString());\n    }", "signature": "void testGetUpdateValidationErrors()", "full_signature": "@Test public void testGetUpdateValidationErrors()", "class_method_signature": "ModelValidatorTest.testGetUpdateValidationErrors()", "testcase": true, "constructor": false, "invocations": ["getUpdateValidationErrors", "assertEquals", "size", "update", "getUpdateValidationErrors", "assertEquals", "size", "assertEquals", "getMessage", "get", "update", "getUpdateValidationErrors", "assertEquals", "size", "assertEquals", "getMessage", "get", "update", "getUpdateValidationErrors", "assertEquals", "size", "assertEquals", "toString", "get"]}, "focal_class": {"identifier": "ModelValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Validator validator;", "modifier": "private final", "type": "Validator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "ModelValidator", "parameters": "(Validator validator, ObjectMapper mapper)", "modifiers": "public", "return": "", "signature": " ModelValidator(Validator validator, ObjectMapper mapper)", "full_signature": "public  ModelValidator(Validator validator, ObjectMapper mapper)", "class_method_signature": "ModelValidator.ModelValidator(Validator validator, ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "getModelValidationErrors", "parameters": "(Object object, Class validationGroup)", "modifiers": "public", "return": "List<ValidationError>", "signature": "List<ValidationError> getModelValidationErrors(Object object, Class validationGroup)", "full_signature": "public List<ValidationError> getModelValidationErrors(Object object, Class validationGroup)", "class_method_signature": "ModelValidator.getModelValidationErrors(Object object, Class validationGroup)", "testcase": false, "constructor": false}, {"identifier": "getCreateValidationErrors", "parameters": "(Object create, FieldData fieldData)", "modifiers": "public", "return": "List<ValidationError>", "signature": "List<ValidationError> getCreateValidationErrors(Object create, FieldData fieldData)", "full_signature": "public List<ValidationError> getCreateValidationErrors(Object create, FieldData fieldData)", "class_method_signature": "ModelValidator.getCreateValidationErrors(Object create, FieldData fieldData)", "testcase": false, "constructor": false}, {"identifier": "getUpdateValidationErrors", "parameters": "(Update<?> update, FieldData fieldData)", "modifiers": "public", "return": "List<ValidationError>", "signature": "List<ValidationError> getUpdateValidationErrors(Update<?> update, FieldData fieldData)", "full_signature": "public List<ValidationError> getUpdateValidationErrors(Update<?> update, FieldData fieldData)", "class_method_signature": "ModelValidator.getUpdateValidationErrors(Update<?> update, FieldData fieldData)", "testcase": false, "constructor": false}, {"identifier": "validateModel", "parameters": "(Object model)", "modifiers": "public", "return": "boolean", "signature": "boolean validateModel(Object model)", "full_signature": "public boolean validateModel(Object model)", "class_method_signature": "ModelValidator.validateModel(Object model)", "testcase": false, "constructor": false}, {"identifier": "validateCreate", "parameters": "(Object create, FieldData fieldData)", "modifiers": "public", "return": "boolean", "signature": "boolean validateCreate(Object create, FieldData fieldData)", "full_signature": "public boolean validateCreate(Object create, FieldData fieldData)", "class_method_signature": "ModelValidator.validateCreate(Object create, FieldData fieldData)", "testcase": false, "constructor": false}, {"identifier": "validateUpdate", "parameters": "(Update<?> update, FieldData fieldData)", "modifiers": "public", "return": "boolean", "signature": "boolean validateUpdate(Update<?> update, FieldData fieldData)", "full_signature": "public boolean validateUpdate(Update<?> update, FieldData fieldData)", "class_method_signature": "ModelValidator.validateUpdate(Update<?> update, FieldData fieldData)", "testcase": false, "constructor": false}], "file": "stardao-core/src/main/java/io/stardog/stardao/validation/ModelValidator.java"}, "focal_method": {"identifier": "getUpdateValidationErrors", "parameters": "(Update<?> update, FieldData fieldData)", "modifiers": "public", "return": "List<ValidationError>", "body": "public List<ValidationError> getUpdateValidationErrors(Update<?> update, FieldData fieldData) {\n        if (update == null) {\n            return ImmutableList.of(ValidationError.of(\"\", \"update is null\"));\n        }\n        ImmutableList.Builder<ValidationError> errors = ImmutableList.builder();\n        Set<String> updateFields = update.getUpdateFields();\n\n        // ensure we are only touching @Updatable fields\n        for (String fieldName : updateFields) {\n            Field field = fieldData.getMap().get(fieldName);\n            if (field == null) {\n                errors.add(ValidationError.of(fieldName, \"does not exist\"));\n            } else if (!field.isUpdatable()) {\n                errors.add(ValidationError.of(fieldName, \"is not updatable\"));\n            } else if (!field.isOptional() && update.getRemoveFields().contains(fieldName)) {\n                errors.add(ValidationError.of(fieldName, \"is required\"));\n            }\n        }\n\n        // validate the model -- but ignore fields that aren't being touched\n        Set<ConstraintViolation<Object>> violations = validator.validate(update.getPartial(), Default.class);\n        Set<String> errorFields = new HashSet<>();\n        for (ConstraintViolation<?> cv : violations) {\n            String field = cv.getPropertyPath().toString();\n            if (updateFields.contains(field) && !errorFields.contains(field)) {\n                errors.add(ValidationError.of(field, cv.getMessage()));\n                errorFields.add(field);\n            }\n        }\n\n        return errors.build();\n    }", "signature": "List<ValidationError> getUpdateValidationErrors(Update<?> update, FieldData fieldData)", "full_signature": "public List<ValidationError> getUpdateValidationErrors(Update<?> update, FieldData fieldData)", "class_method_signature": "ModelValidator.getUpdateValidationErrors(Update<?> update, FieldData fieldData)", "testcase": false, "constructor": false, "invocations": ["of", "of", "builder", "getUpdateFields", "get", "getMap", "add", "of", "isUpdatable", "add", "of", "isOptional", "contains", "getRemoveFields", "add", "of", "validate", "getPartial", "toString", "getPropertyPath", "contains", "contains", "add", "of", "getMessage", "add", "build"]}, "repository": {"repo_id": 79784019, "url": "https://github.com/stardogventures/stardao", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 219, "license": "licensed"}}