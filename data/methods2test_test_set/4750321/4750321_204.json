{"test_class": {"identifier": "GeoTiffReaderTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(GeoTiffReaderTest.class.toString());", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(GeoTiffReaderTest.class.toString())", "var_name": "LOGGER"}], "file": "modules/unsupported/geotiff_new/src/test/java/org/geotools/gce/geotiff/GeoTiffReaderTest.java"}, "test_case": {"identifier": "testReader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReader() throws IllegalArgumentException, IOException,\n            NoSuchAuthorityCodeException {\n\n        final File file = TestData.file(this, \".\");\n        final File files[] = file.listFiles();\n        final int numFiles = files.length;\n        final AbstractGridFormat format = new GeoTiffFormat();\n        for (int i = 0; i < numFiles; i++) {\n            StringBuffer buffer = new StringBuffer();\n            final String path = files[i].getAbsolutePath().toLowerCase();\n            if (!path.endsWith(\"tif\") && !path.endsWith(\"tiff\"))\n                continue;\n            if (path.contains(\"ovr.tif\"))\n                continue;\n            buffer.append(files[i].getAbsolutePath()).append(\"\\n\");\n            Object o;\n            if (i % 2 == 0)\n                // testing file\n                o = files[i];\n            else\n                // testing url\n                o = files[i].toURI().toURL();\n            if (format.accepts(o)) {\n                buffer.append(\"ACCEPTED\").append(\"\\n\");\n\n                // getting a reader\n                GeoTiffReader reader = new GeoTiffReader(o, new Hints(\n                        Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER, Boolean.TRUE));\n\n                if (reader != null) {\n\n                    // reading the coverage\n                    GridCoverage2D coverage = (GridCoverage2D) reader.read(null);\n\n                    // Crs and envelope\n                    if (TestData.isInteractiveTest()) {\n                        buffer.append(\"CRS: \")\n                                .append(coverage.getCoordinateReferenceSystem2D().toWKT())\n                                .append(\"\\n\");\n                        buffer.append(\"GG: \").append(coverage.getGridGeometry().toString())\n                                .append(\"\\n\");\n                    }\n\n                    // showing it\n                    if (TestData.isInteractiveTest())\n                        coverage.show();\n                    else\n                        coverage.getRenderedImage().getData();\n\n                }\n\n            } else\n                buffer.append(\"NOT ACCEPTED\").append(\"\\n\");\n            if (TestData.isInteractiveTest())\n                LOGGER.info(buffer.toString());\n\n        }\n\n    }", "signature": "void testReader()", "full_signature": "@Test public void testReader()", "class_method_signature": "GeoTiffReaderTest.testReader()", "testcase": true, "constructor": false, "invocations": ["file", "listFiles", "toLowerCase", "getAbsolutePath", "endsWith", "endsWith", "contains", "append", "append", "getAbsolutePath", "toURL", "toURI", "accepts", "append", "append", "read", "isInteractiveTest", "append", "append", "append", "toWKT", "getCoordinateReferenceSystem2D", "append", "append", "append", "toString", "getGridGeometry", "isInteractiveTest", "show", "getData", "getRenderedImage", "append", "append", "isInteractiveTest", "info", "toString"]}, "focal_class": {"identifier": "GeoTiffReader", "superclass": "extends AbstractGridCoverage2DReader", "interfaces": "implements\n\t\tGridCoverageReader", "fields": [{"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging.getLogger(GeoTiffReader.class.toString());", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(GeoTiffReader.class.toString())", "var_name": "LOGGER"}, {"original_string": "private GeoTiffMetadata2CRSAdapter gtcs;", "modifier": "private", "type": "GeoTiffMetadata2CRSAdapter", "declarator": "gtcs", "var_name": "gtcs"}, {"original_string": "private double noData = Double.NaN;", "modifier": "private", "type": "double", "declarator": "noData = Double.NaN", "var_name": "noData"}, {"original_string": "private RasterManager rasterManager;", "modifier": "private", "type": "RasterManager", "declarator": "rasterManager", "var_name": "rasterManager"}, {"original_string": "URL sourceURL;", "modifier": "", "type": "URL", "declarator": "sourceURL", "var_name": "sourceURL"}, {"original_string": "boolean expandMe;", "modifier": "", "type": "boolean", "declarator": "expandMe", "var_name": "expandMe"}, {"original_string": "RasterLayout[] overViewLayouts;", "modifier": "", "type": "RasterLayout[]", "declarator": "overViewLayouts", "var_name": "overViewLayouts"}, {"original_string": "RasterLayout hrLayout;", "modifier": "", "type": "RasterLayout", "declarator": "hrLayout", "var_name": "hrLayout"}, {"original_string": "ImageTypeSpecifier baseImageType;", "modifier": "", "type": "ImageTypeSpecifier", "declarator": "baseImageType", "var_name": "baseImageType"}, {"original_string": "File ovrSource;", "modifier": "", "type": "File", "declarator": "ovrSource", "var_name": "ovrSource"}, {"original_string": "ImageInputStreamSpi ovrInStreamSPI = null;", "modifier": "", "type": "ImageInputStreamSpi", "declarator": "ovrInStreamSPI = null", "var_name": "ovrInStreamSPI"}, {"original_string": "int extOvrImgChoice = -1;", "modifier": "", "type": "int", "declarator": "extOvrImgChoice = -1", "var_name": "extOvrImgChoice"}], "methods": [{"identifier": "getGridCoverageCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getGridCoverageCount()", "full_signature": "@Override public int getGridCoverageCount()", "class_method_signature": "GeoTiffReader.getGridCoverageCount()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "GeoTiffReader.dispose()", "testcase": false, "constructor": false}, {"identifier": "getGridCoverageFactory", "parameters": "()", "modifiers": "", "return": "GridCoverageFactory", "signature": "GridCoverageFactory getGridCoverageFactory()", "full_signature": " GridCoverageFactory getGridCoverageFactory()", "class_method_signature": "GeoTiffReader.getGridCoverageFactory()", "testcase": false, "constructor": false}, {"identifier": "GeoTiffReader", "parameters": "(Object input)", "modifiers": "public", "return": "", "signature": " GeoTiffReader(Object input)", "full_signature": "public  GeoTiffReader(Object input)", "class_method_signature": "GeoTiffReader.GeoTiffReader(Object input)", "testcase": false, "constructor": true}, {"identifier": "GeoTiffReader", "parameters": "(Object input, Hints uHints)", "modifiers": "public", "return": "", "signature": " GeoTiffReader(Object input, Hints uHints)", "full_signature": "public  GeoTiffReader(Object input, Hints uHints)", "class_method_signature": "GeoTiffReader.GeoTiffReader(Object input, Hints uHints)", "testcase": false, "constructor": true}, {"identifier": "checkForExternalOverviews", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkForExternalOverviews()", "full_signature": "private void checkForExternalOverviews()", "class_method_signature": "GeoTiffReader.checkForExternalOverviews()", "testcase": false, "constructor": false}, {"identifier": "getHRInfo", "parameters": "(Hints hints)", "modifiers": "private", "return": "void", "signature": "void getHRInfo(Hints hints)", "full_signature": "private void getHRInfo(Hints hints)", "class_method_signature": "GeoTiffReader.getHRInfo(Hints hints)", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "()", "modifiers": "public", "return": "Format", "signature": "Format getFormat()", "full_signature": "public Format getFormat()", "class_method_signature": "GeoTiffReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(GeneralParameterValue[] params)", "modifiers": "@Override public", "return": "GridCoverage2D", "signature": "GridCoverage2D read(GeneralParameterValue[] params)", "full_signature": "@Override public GridCoverage2D read(GeneralParameterValue[] params)", "class_method_signature": "GeoTiffReader.read(GeneralParameterValue[] params)", "testcase": false, "constructor": false}, {"identifier": "createCoverage", "parameters": "(\n            PlanarImage image, MathTransform raster2Model)", "modifiers": "protected final", "return": "GridCoverage", "signature": "GridCoverage createCoverage(\n            PlanarImage image, MathTransform raster2Model)", "full_signature": "protected final GridCoverage createCoverage(\n            PlanarImage image, MathTransform raster2Model)", "class_method_signature": "GeoTiffReader.createCoverage(\n            PlanarImage image, MathTransform raster2Model)", "testcase": false, "constructor": false}, {"identifier": "getHints", "parameters": "()", "modifiers": "", "return": "Hints", "signature": "Hints getHints()", "full_signature": " Hints getHints()", "class_method_signature": "GeoTiffReader.getHints()", "testcase": false, "constructor": false}, {"identifier": "getHighestRes", "parameters": "()", "modifiers": "", "return": "double[]", "signature": "double[] getHighestRes()", "full_signature": " double[] getHighestRes()", "class_method_signature": "GeoTiffReader.getHighestRes()", "testcase": false, "constructor": false}, {"identifier": "getOverviewsResolution", "parameters": "()", "modifiers": "", "return": "double[][]", "signature": "double[][] getOverviewsResolution()", "full_signature": " double[][] getOverviewsResolution()", "class_method_signature": "GeoTiffReader.getOverviewsResolution()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfOverviews", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getNumberOfOverviews()", "full_signature": " int getNumberOfOverviews()", "class_method_signature": "GeoTiffReader.getNumberOfOverviews()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getName()", "full_signature": " String getName()", "class_method_signature": "GeoTiffReader.getName()", "testcase": false, "constructor": false}], "file": "modules/unsupported/geotiff_new/src/main/java/org/geotools/gce/geotiff/GeoTiffReader.java"}, "focal_method": {"identifier": "read", "parameters": "(GeneralParameterValue[] params)", "modifiers": "@Override public", "return": "GridCoverage2D", "body": "@Override\n    public GridCoverage2D read(GeneralParameterValue[] params)\n            throws IOException {\n\n        if (LOGGER.isLoggable(Level.FINE)) {\n            LOGGER.fine(\"Reading image from \" + sourceURL.toString() + \"\\n\"\n                    + \"Highest res \" + highestRes[0] + \" \" + highestRes[1]);\n        }\n\n        final Collection<GridCoverage2D> response = rasterManager.read(params);\n        if (response.isEmpty()) {\n            if (LOGGER.isLoggable(Level.FINE)){\n                LOGGER.fine(\"The response is empty. ==> returning a null GridCoverage\");\n            }\n            return null;\n        } else {\n            return response.iterator().next();\n        }\n    }", "signature": "GridCoverage2D read(GeneralParameterValue[] params)", "full_signature": "@Override public GridCoverage2D read(GeneralParameterValue[] params)", "class_method_signature": "GeoTiffReader.read(GeneralParameterValue[] params)", "testcase": false, "constructor": false, "invocations": ["isLoggable", "fine", "toString", "read", "isEmpty", "isLoggable", "fine", "next", "iterator"]}, "repository": {"repo_id": 4750321, "url": "https://github.com/HGitMaster/geotools-osgi", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 114107, "license": "licensed"}}