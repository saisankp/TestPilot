{"test_class": {"identifier": "IndividualTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private boolean stateChanged = false;", "modifier": "private", "type": "boolean", "declarator": "stateChanged = false", "var_name": "stateChanged"}], "file": "opt4j-core/src/test/java/org/opt4j/core/IndividualTest.java"}, "test_case": {"identifier": "getPhenotypeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getPhenotypeTest() {\n\t\tIndividual individual = new Individual();\n\t\tString p = \"phenotype\";\n\t\tindividual.setPhenotype(p);\n\t\tAssert.assertTrue(p == individual.getPhenotype());\n\t\tAssert.assertEquals(State.PHENOTYPED, individual.getState());\n\t\tAssert.assertTrue(individual.isDecoded());\n\t}", "signature": "void getPhenotypeTest()", "full_signature": "@Test public void getPhenotypeTest()", "class_method_signature": "IndividualTest.getPhenotypeTest()", "testcase": true, "constructor": false, "invocations": ["setPhenotype", "assertTrue", "getPhenotype", "assertEquals", "getState", "assertTrue", "isDecoded"]}, "focal_class": {"identifier": "Individual", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Genotype genotype;", "modifier": "protected", "type": "Genotype", "declarator": "genotype", "var_name": "genotype"}, {"original_string": "protected Object phenotype;", "modifier": "protected", "type": "Object", "declarator": "phenotype", "var_name": "phenotype"}, {"original_string": "protected Objectives objectives;", "modifier": "protected", "type": "Objectives", "declarator": "objectives", "var_name": "objectives"}, {"original_string": "protected Set<IndividualStateListener> individualStateListeners;", "modifier": "protected", "type": "Set<IndividualStateListener>", "declarator": "individualStateListeners", "var_name": "individualStateListeners"}, {"original_string": "protected State state = State.EMPTY;", "modifier": "protected", "type": "State", "declarator": "state = State.EMPTY", "var_name": "state"}], "methods": [{"identifier": "Individual", "parameters": "()", "modifiers": "@Inject protected", "return": "", "signature": " Individual()", "full_signature": "@Inject protected  Individual()", "class_method_signature": "Individual.Individual()", "testcase": false, "constructor": true}, {"identifier": "getPhenotype", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getPhenotype()", "full_signature": "public Object getPhenotype()", "class_method_signature": "Individual.getPhenotype()", "testcase": false, "constructor": false}, {"identifier": "getObjectives", "parameters": "()", "modifiers": "public", "return": "Objectives", "signature": "Objectives getObjectives()", "full_signature": "public Objectives getObjectives()", "class_method_signature": "Individual.getObjectives()", "testcase": false, "constructor": false}, {"identifier": "getGenotype", "parameters": "()", "modifiers": "public", "return": "Genotype", "signature": "Genotype getGenotype()", "full_signature": "public Genotype getGenotype()", "class_method_signature": "Individual.getGenotype()", "testcase": false, "constructor": false}, {"identifier": "setGenotype", "parameters": "(Genotype genotype)", "modifiers": "public", "return": "void", "signature": "void setGenotype(Genotype genotype)", "full_signature": "public void setGenotype(Genotype genotype)", "class_method_signature": "Individual.setGenotype(Genotype genotype)", "testcase": false, "constructor": false}, {"identifier": "setPhenotype", "parameters": "(Object phenotype)", "modifiers": "public", "return": "void", "signature": "void setPhenotype(Object phenotype)", "full_signature": "public void setPhenotype(Object phenotype)", "class_method_signature": "Individual.setPhenotype(Object phenotype)", "testcase": false, "constructor": false}, {"identifier": "setObjectives", "parameters": "(Objectives objectives)", "modifiers": "public", "return": "void", "signature": "void setObjectives(Objectives objectives)", "full_signature": "public void setObjectives(Objectives objectives)", "class_method_signature": "Individual.setObjectives(Objectives objectives)", "testcase": false, "constructor": false}, {"identifier": "isDecoded", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDecoded()", "full_signature": "public boolean isDecoded()", "class_method_signature": "Individual.isDecoded()", "testcase": false, "constructor": false}, {"identifier": "isEvaluated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEvaluated()", "full_signature": "public boolean isEvaluated()", "class_method_signature": "Individual.isEvaluated()", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(State state)", "modifiers": "public", "return": "void", "signature": "void setState(State state)", "full_signature": "public void setState(State state)", "class_method_signature": "Individual.setState(State state)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "State", "signature": "State getState()", "full_signature": "public State getState()", "class_method_signature": "Individual.getState()", "testcase": false, "constructor": false}, {"identifier": "setIndividualStatusListeners", "parameters": "(Set<IndividualStateListener> individualStateListeners)", "modifiers": "protected", "return": "void", "signature": "void setIndividualStatusListeners(Set<IndividualStateListener> individualStateListeners)", "full_signature": "protected void setIndividualStatusListeners(Set<IndividualStateListener> individualStateListeners)", "class_method_signature": "Individual.setIndividualStatusListeners(Set<IndividualStateListener> individualStateListeners)", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/Individual.java"}, "focal_method": {"identifier": "getPhenotype", "parameters": "()", "modifiers": "public", "return": "Object", "body": "public Object getPhenotype() {\n\t\treturn phenotype;\n\t}", "signature": "Object getPhenotype()", "full_signature": "public Object getPhenotype()", "class_method_signature": "Individual.getPhenotype()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}