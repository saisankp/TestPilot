{"test_class": {"identifier": "HystrixConfigurationStreamTest", "superclass": "extends CommandStreamTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public HystrixRequestContextRule ctx = new HystrixRequestContextRule();", "modifier": "@Rule\n    public", "type": "HystrixRequestContextRule", "declarator": "ctx = new HystrixRequestContextRule()", "var_name": "ctx"}, {"original_string": "HystrixConfigurationStream stream;", "modifier": "", "type": "HystrixConfigurationStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "private final static HystrixCommandGroupKey groupKey = HystrixCommandGroupKey.Factory.asKey(\"Config\");", "modifier": "private final static", "type": "HystrixCommandGroupKey", "declarator": "groupKey = HystrixCommandGroupKey.Factory.asKey(\"Config\")", "var_name": "groupKey"}, {"original_string": "private final static HystrixCommandKey commandKey = HystrixCommandKey.Factory.asKey(\"Command\");", "modifier": "private final static", "type": "HystrixCommandKey", "declarator": "commandKey = HystrixCommandKey.Factory.asKey(\"Command\")", "var_name": "commandKey"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/config/HystrixConfigurationStreamTest.java"}, "test_case": {"identifier": "testTwoSubscribersOneUnsubscribes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTwoSubscribersOneUnsubscribes() throws Exception {\n        final CountDownLatch latch1 = new CountDownLatch(1);\n        final CountDownLatch latch2 = new CountDownLatch(1);\n        final AtomicInteger payloads1 = new AtomicInteger(0);\n        final AtomicInteger payloads2 = new AtomicInteger(0);\n\n        Subscription s1 = stream\n                .observe()\n                .take(100)\n                .doOnUnsubscribe(new Action0() {\n                    @Override\n                    public void call() {\n                        latch1.countDown();\n                    }\n                })\n                .subscribe(new Subscriber<HystrixConfiguration>() {\n                    @Override\n                    public void onCompleted() {\n                        System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName() + \" : Dashboard 1 OnCompleted\");\n                        latch1.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName() + \" : Dashboard 1 OnError : \" + e);\n                        latch1.countDown();\n                    }\n\n                    @Override\n                    public void onNext(HystrixConfiguration configuration) {\n                        System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName() + \" : Dashboard 1 OnNext : \" + configuration);\n                        payloads1.incrementAndGet();\n                    }\n                });\n\n        Subscription s2 = stream\n                .observe()\n                .take(100)\n                .doOnUnsubscribe(new Action0() {\n                    @Override\n                    public void call() {\n                        latch2.countDown();\n                    }\n                })\n                .subscribe(new Subscriber<HystrixConfiguration>() {\n                    @Override\n                    public void onCompleted() {\n                        System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName() + \" : Dashboard 2 OnCompleted\");\n                        latch2.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName() + \" : Dashboard 2 OnError : \" + e);\n                        latch2.countDown();\n                    }\n\n                    @Override\n                    public void onNext(HystrixConfiguration configuration) {\n                        System.out.println(System.currentTimeMillis() + \" : \" + Thread.currentThread().getName() + \" : Dashboard 2 OnNext : \" + configuration);\n                        payloads2.incrementAndGet();\n                    }\n                });\n        //execute 1 command, then unsubscribe from first stream. then execute the rest\n        for (int i = 0; i < 50; i++) {\n            HystrixCommand<Integer> cmd = Command.from(groupKey, commandKey, HystrixEventType.SUCCESS, 50);\n            cmd.execute();\n            if (i == 1) {\n                s1.unsubscribe();\n            }\n        }\n\n        assertTrue(latch1.await(10000, TimeUnit.MILLISECONDS));\n        assertTrue(latch2.await(10000, TimeUnit.MILLISECONDS));\n        System.out.println(\"s1 got : \" + payloads1.get() + \", s2 got : \" + payloads2.get());\n        assertTrue(\"s1 got data\", payloads1.get() > 0);\n        assertTrue(\"s2 got data\", payloads2.get() > 0);\n        assertTrue(\"s1 got less data than s2\", payloads2.get() > payloads1.get());\n    }", "signature": "void testTwoSubscribersOneUnsubscribes()", "full_signature": "@Test public void testTwoSubscribersOneUnsubscribes()", "class_method_signature": "HystrixConfigurationStreamTest.testTwoSubscribersOneUnsubscribes()", "testcase": true, "constructor": false, "invocations": ["subscribe", "doOnUnsubscribe", "take", "observe", "countDown", "println", "currentTimeMillis", "getName", "currentThread", "countDown", "println", "currentTimeMillis", "getName", "currentThread", "countDown", "println", "currentTimeMillis", "getName", "currentThread", "incrementAndGet", "subscribe", "doOnUnsubscribe", "take", "observe", "countDown", "println", "currentTimeMillis", "getName", "currentThread", "countDown", "println", "currentTimeMillis", "getName", "currentThread", "countDown", "println", "currentTimeMillis", "getName", "currentThread", "incrementAndGet", "from", "execute", "unsubscribe", "assertTrue", "await", "assertTrue", "await", "println", "get", "get", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "get"]}, "focal_class": {"identifier": "HystrixConfigurationStream", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int intervalInMilliseconds;", "modifier": "private final", "type": "int", "declarator": "intervalInMilliseconds", "var_name": "intervalInMilliseconds"}, {"original_string": "private final Observable<HystrixConfiguration> allConfigurationStream;", "modifier": "private final", "type": "Observable<HystrixConfiguration>", "declarator": "allConfigurationStream", "var_name": "allConfigurationStream"}, {"original_string": "private final AtomicBoolean isSourceCurrentlySubscribed = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "isSourceCurrentlySubscribed = new AtomicBoolean(false)", "var_name": "isSourceCurrentlySubscribed"}, {"original_string": "private static final DynamicIntProperty dataEmissionIntervalInMs =\n            DynamicPropertyFactory.getInstance().getIntProperty(\"hystrix.stream.config.intervalInMilliseconds\", 5000);", "modifier": "private static final", "type": "DynamicIntProperty", "declarator": "dataEmissionIntervalInMs =\n            DynamicPropertyFactory.getInstance().getIntProperty(\"hystrix.stream.config.intervalInMilliseconds\", 5000)", "var_name": "dataEmissionIntervalInMs"}, {"original_string": "private static final Func1<Long, HystrixConfiguration> getAllConfig =\n            new Func1<Long, HystrixConfiguration>() {\n                @Override\n                public HystrixConfiguration call(Long timestamp) {\n                    return HystrixConfiguration.from(\n                            getAllCommandConfig.call(timestamp),\n                            getAllThreadPoolConfig.call(timestamp),\n                            getAllCollapserConfig.call(timestamp)\n                    );\n                }\n            };", "modifier": "private static final", "type": "Func1<Long, HystrixConfiguration>", "declarator": "getAllConfig =\n            new Func1<Long, HystrixConfiguration>() {\n                @Override\n                public HystrixConfiguration call(Long timestamp) {\n                    return HystrixConfiguration.from(\n                            getAllCommandConfig.call(timestamp),\n                            getAllThreadPoolConfig.call(timestamp),\n                            getAllCollapserConfig.call(timestamp)\n                    );\n                }\n            }", "var_name": "getAllConfig"}, {"original_string": "private static final HystrixConfigurationStream INSTANCE =\n            new HystrixConfigurationStream(dataEmissionIntervalInMs.get());", "modifier": "private static final", "type": "HystrixConfigurationStream", "declarator": "INSTANCE =\n            new HystrixConfigurationStream(dataEmissionIntervalInMs.get())", "var_name": "INSTANCE"}, {"original_string": "private static final Func1<Long, Map<HystrixCommandKey, HystrixCommandConfiguration>> getAllCommandConfig =\n            new Func1<Long, Map<HystrixCommandKey, HystrixCommandConfiguration>>() {\n                @Override\n                public Map<HystrixCommandKey, HystrixCommandConfiguration> call(Long timestamp) {\n                    Map<HystrixCommandKey, HystrixCommandConfiguration> commandConfigPerKey = new HashMap<HystrixCommandKey, HystrixCommandConfiguration>();\n                    for (HystrixCommandMetrics commandMetrics: HystrixCommandMetrics.getInstances()) {\n                        HystrixCommandKey commandKey = commandMetrics.getCommandKey();\n                        HystrixThreadPoolKey threadPoolKey = commandMetrics.getThreadPoolKey();\n                        HystrixCommandGroupKey groupKey = commandMetrics.getCommandGroup();\n                        commandConfigPerKey.put(commandKey, sampleCommandConfiguration(commandKey, threadPoolKey, groupKey, commandMetrics.getProperties()));\n                    }\n                    return commandConfigPerKey;\n                }\n            };", "modifier": "private static final", "type": "Func1<Long, Map<HystrixCommandKey, HystrixCommandConfiguration>>", "declarator": "getAllCommandConfig =\n            new Func1<Long, Map<HystrixCommandKey, HystrixCommandConfiguration>>() {\n                @Override\n                public Map<HystrixCommandKey, HystrixCommandConfiguration> call(Long timestamp) {\n                    Map<HystrixCommandKey, HystrixCommandConfiguration> commandConfigPerKey = new HashMap<HystrixCommandKey, HystrixCommandConfiguration>();\n                    for (HystrixCommandMetrics commandMetrics: HystrixCommandMetrics.getInstances()) {\n                        HystrixCommandKey commandKey = commandMetrics.getCommandKey();\n                        HystrixThreadPoolKey threadPoolKey = commandMetrics.getThreadPoolKey();\n                        HystrixCommandGroupKey groupKey = commandMetrics.getCommandGroup();\n                        commandConfigPerKey.put(commandKey, sampleCommandConfiguration(commandKey, threadPoolKey, groupKey, commandMetrics.getProperties()));\n                    }\n                    return commandConfigPerKey;\n                }\n            }", "var_name": "getAllCommandConfig"}, {"original_string": "private static final Func1<Long, Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>> getAllThreadPoolConfig =\n            new Func1<Long, Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>>() {\n                @Override\n                public Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration> call(Long timestamp) {\n                    Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration> threadPoolConfigPerKey = new HashMap<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>();\n                    for (HystrixThreadPoolMetrics threadPoolMetrics: HystrixThreadPoolMetrics.getInstances()) {\n                        HystrixThreadPoolKey threadPoolKey = threadPoolMetrics.getThreadPoolKey();\n                        threadPoolConfigPerKey.put(threadPoolKey, sampleThreadPoolConfiguration(threadPoolKey, threadPoolMetrics.getProperties()));\n                    }\n                    return threadPoolConfigPerKey;\n                }\n            };", "modifier": "private static final", "type": "Func1<Long, Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>>", "declarator": "getAllThreadPoolConfig =\n            new Func1<Long, Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>>() {\n                @Override\n                public Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration> call(Long timestamp) {\n                    Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration> threadPoolConfigPerKey = new HashMap<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>();\n                    for (HystrixThreadPoolMetrics threadPoolMetrics: HystrixThreadPoolMetrics.getInstances()) {\n                        HystrixThreadPoolKey threadPoolKey = threadPoolMetrics.getThreadPoolKey();\n                        threadPoolConfigPerKey.put(threadPoolKey, sampleThreadPoolConfiguration(threadPoolKey, threadPoolMetrics.getProperties()));\n                    }\n                    return threadPoolConfigPerKey;\n                }\n            }", "var_name": "getAllThreadPoolConfig"}, {"original_string": "private static final Func1<Long, Map<HystrixCollapserKey, HystrixCollapserConfiguration>> getAllCollapserConfig =\n            new Func1<Long, Map<HystrixCollapserKey, HystrixCollapserConfiguration>>() {\n                @Override\n                public Map<HystrixCollapserKey, HystrixCollapserConfiguration> call(Long timestamp) {\n                    Map<HystrixCollapserKey, HystrixCollapserConfiguration> collapserConfigPerKey = new HashMap<HystrixCollapserKey, HystrixCollapserConfiguration>();\n                    for (HystrixCollapserMetrics collapserMetrics: HystrixCollapserMetrics.getInstances()) {\n                        HystrixCollapserKey collapserKey = collapserMetrics.getCollapserKey();\n                        collapserConfigPerKey.put(collapserKey, sampleCollapserConfiguration(collapserKey, collapserMetrics.getProperties()));\n                    }\n                    return collapserConfigPerKey;\n                }\n            };", "modifier": "private static final", "type": "Func1<Long, Map<HystrixCollapserKey, HystrixCollapserConfiguration>>", "declarator": "getAllCollapserConfig =\n            new Func1<Long, Map<HystrixCollapserKey, HystrixCollapserConfiguration>>() {\n                @Override\n                public Map<HystrixCollapserKey, HystrixCollapserConfiguration> call(Long timestamp) {\n                    Map<HystrixCollapserKey, HystrixCollapserConfiguration> collapserConfigPerKey = new HashMap<HystrixCollapserKey, HystrixCollapserConfiguration>();\n                    for (HystrixCollapserMetrics collapserMetrics: HystrixCollapserMetrics.getInstances()) {\n                        HystrixCollapserKey collapserKey = collapserMetrics.getCollapserKey();\n                        collapserConfigPerKey.put(collapserKey, sampleCollapserConfiguration(collapserKey, collapserMetrics.getProperties()));\n                    }\n                    return collapserConfigPerKey;\n                }\n            }", "var_name": "getAllCollapserConfig"}, {"original_string": "private static final Func1<HystrixConfiguration, Map<HystrixCommandKey, HystrixCommandConfiguration>> getOnlyCommandConfig =\n            new Func1<HystrixConfiguration, Map<HystrixCommandKey, HystrixCommandConfiguration>>() {\n                @Override\n                public Map<HystrixCommandKey, HystrixCommandConfiguration> call(HystrixConfiguration hystrixConfiguration) {\n                    return hystrixConfiguration.getCommandConfig();\n                }\n            };", "modifier": "private static final", "type": "Func1<HystrixConfiguration, Map<HystrixCommandKey, HystrixCommandConfiguration>>", "declarator": "getOnlyCommandConfig =\n            new Func1<HystrixConfiguration, Map<HystrixCommandKey, HystrixCommandConfiguration>>() {\n                @Override\n                public Map<HystrixCommandKey, HystrixCommandConfiguration> call(HystrixConfiguration hystrixConfiguration) {\n                    return hystrixConfiguration.getCommandConfig();\n                }\n            }", "var_name": "getOnlyCommandConfig"}, {"original_string": "private static final Func1<HystrixConfiguration, Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>> getOnlyThreadPoolConfig =\n            new Func1<HystrixConfiguration, Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>>() {\n                @Override\n                public Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration> call(HystrixConfiguration hystrixConfiguration) {\n                    return hystrixConfiguration.getThreadPoolConfig();\n                }\n            };", "modifier": "private static final", "type": "Func1<HystrixConfiguration, Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>>", "declarator": "getOnlyThreadPoolConfig =\n            new Func1<HystrixConfiguration, Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>>() {\n                @Override\n                public Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration> call(HystrixConfiguration hystrixConfiguration) {\n                    return hystrixConfiguration.getThreadPoolConfig();\n                }\n            }", "var_name": "getOnlyThreadPoolConfig"}, {"original_string": "private static final Func1<HystrixConfiguration, Map<HystrixCollapserKey, HystrixCollapserConfiguration>> getOnlyCollapserConfig =\n            new Func1<HystrixConfiguration, Map<HystrixCollapserKey, HystrixCollapserConfiguration>>() {\n                @Override\n                public Map<HystrixCollapserKey, HystrixCollapserConfiguration> call(HystrixConfiguration hystrixConfiguration) {\n                    return hystrixConfiguration.getCollapserConfig();\n                }\n            };", "modifier": "private static final", "type": "Func1<HystrixConfiguration, Map<HystrixCollapserKey, HystrixCollapserConfiguration>>", "declarator": "getOnlyCollapserConfig =\n            new Func1<HystrixConfiguration, Map<HystrixCollapserKey, HystrixCollapserConfiguration>>() {\n                @Override\n                public Map<HystrixCollapserKey, HystrixCollapserConfiguration> call(HystrixConfiguration hystrixConfiguration) {\n                    return hystrixConfiguration.getCollapserConfig();\n                }\n            }", "var_name": "getOnlyCollapserConfig"}], "methods": [{"identifier": "HystrixConfigurationStream", "parameters": "(final int intervalInMilliseconds)", "modifiers": "@Deprecated //deprecated in 1.5.4. public", "return": "", "signature": " HystrixConfigurationStream(final int intervalInMilliseconds)", "full_signature": "@Deprecated //deprecated in 1.5.4. public  HystrixConfigurationStream(final int intervalInMilliseconds)", "class_method_signature": "HystrixConfigurationStream.HystrixConfigurationStream(final int intervalInMilliseconds)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "HystrixConfigurationStream", "signature": "HystrixConfigurationStream getInstance()", "full_signature": "public static HystrixConfigurationStream getInstance()", "class_method_signature": "HystrixConfigurationStream.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getNonSingletonInstanceOnlyUsedInUnitTests", "parameters": "(int delayInMs)", "modifiers": "static", "return": "HystrixConfigurationStream", "signature": "HystrixConfigurationStream getNonSingletonInstanceOnlyUsedInUnitTests(int delayInMs)", "full_signature": "static HystrixConfigurationStream getNonSingletonInstanceOnlyUsedInUnitTests(int delayInMs)", "class_method_signature": "HystrixConfigurationStream.getNonSingletonInstanceOnlyUsedInUnitTests(int delayInMs)", "testcase": false, "constructor": false}, {"identifier": "observe", "parameters": "()", "modifiers": "public", "return": "Observable<HystrixConfiguration>", "signature": "Observable<HystrixConfiguration> observe()", "full_signature": "public Observable<HystrixConfiguration> observe()", "class_method_signature": "HystrixConfigurationStream.observe()", "testcase": false, "constructor": false}, {"identifier": "observeCommandConfiguration", "parameters": "()", "modifiers": "public", "return": "Observable<Map<HystrixCommandKey, HystrixCommandConfiguration>>", "signature": "Observable<Map<HystrixCommandKey, HystrixCommandConfiguration>> observeCommandConfiguration()", "full_signature": "public Observable<Map<HystrixCommandKey, HystrixCommandConfiguration>> observeCommandConfiguration()", "class_method_signature": "HystrixConfigurationStream.observeCommandConfiguration()", "testcase": false, "constructor": false}, {"identifier": "observeThreadPoolConfiguration", "parameters": "()", "modifiers": "public", "return": "Observable<Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>>", "signature": "Observable<Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>> observeThreadPoolConfiguration()", "full_signature": "public Observable<Map<HystrixThreadPoolKey, HystrixThreadPoolConfiguration>> observeThreadPoolConfiguration()", "class_method_signature": "HystrixConfigurationStream.observeThreadPoolConfiguration()", "testcase": false, "constructor": false}, {"identifier": "observeCollapserConfiguration", "parameters": "()", "modifiers": "public", "return": "Observable<Map<HystrixCollapserKey, HystrixCollapserConfiguration>>", "signature": "Observable<Map<HystrixCollapserKey, HystrixCollapserConfiguration>> observeCollapserConfiguration()", "full_signature": "public Observable<Map<HystrixCollapserKey, HystrixCollapserConfiguration>> observeCollapserConfiguration()", "class_method_signature": "HystrixConfigurationStream.observeCollapserConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getIntervalInMilliseconds", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getIntervalInMilliseconds()", "full_signature": "public int getIntervalInMilliseconds()", "class_method_signature": "HystrixConfigurationStream.getIntervalInMilliseconds()", "testcase": false, "constructor": false}, {"identifier": "isSourceCurrentlySubscribed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSourceCurrentlySubscribed()", "full_signature": "public boolean isSourceCurrentlySubscribed()", "class_method_signature": "HystrixConfigurationStream.isSourceCurrentlySubscribed()", "testcase": false, "constructor": false}, {"identifier": "sampleCommandConfiguration", "parameters": "(HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey,\n                                                                          HystrixCommandGroupKey groupKey, HystrixCommandProperties commandProperties)", "modifiers": "private static", "return": "HystrixCommandConfiguration", "signature": "HystrixCommandConfiguration sampleCommandConfiguration(HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey,\n                                                                          HystrixCommandGroupKey groupKey, HystrixCommandProperties commandProperties)", "full_signature": "private static HystrixCommandConfiguration sampleCommandConfiguration(HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey,\n                                                                          HystrixCommandGroupKey groupKey, HystrixCommandProperties commandProperties)", "class_method_signature": "HystrixConfigurationStream.sampleCommandConfiguration(HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey,\n                                                                          HystrixCommandGroupKey groupKey, HystrixCommandProperties commandProperties)", "testcase": false, "constructor": false}, {"identifier": "sampleThreadPoolConfiguration", "parameters": "(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties threadPoolProperties)", "modifiers": "private static", "return": "HystrixThreadPoolConfiguration", "signature": "HystrixThreadPoolConfiguration sampleThreadPoolConfiguration(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties threadPoolProperties)", "full_signature": "private static HystrixThreadPoolConfiguration sampleThreadPoolConfiguration(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties threadPoolProperties)", "class_method_signature": "HystrixConfigurationStream.sampleThreadPoolConfiguration(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties threadPoolProperties)", "testcase": false, "constructor": false}, {"identifier": "sampleCollapserConfiguration", "parameters": "(HystrixCollapserKey collapserKey, HystrixCollapserProperties collapserProperties)", "modifiers": "private static", "return": "HystrixCollapserConfiguration", "signature": "HystrixCollapserConfiguration sampleCollapserConfiguration(HystrixCollapserKey collapserKey, HystrixCollapserProperties collapserProperties)", "full_signature": "private static HystrixCollapserConfiguration sampleCollapserConfiguration(HystrixCollapserKey collapserKey, HystrixCollapserProperties collapserProperties)", "class_method_signature": "HystrixConfigurationStream.sampleCollapserConfiguration(HystrixCollapserKey collapserKey, HystrixCollapserProperties collapserProperties)", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/config/HystrixConfigurationStream.java"}, "focal_method": {"identifier": "observe", "parameters": "()", "modifiers": "public", "return": "Observable<HystrixConfiguration>", "body": "public Observable<HystrixConfiguration> observe() {\n        return allConfigurationStream;\n    }", "signature": "Observable<HystrixConfiguration> observe()", "full_signature": "public Observable<HystrixConfiguration> observe()", "class_method_signature": "HystrixConfigurationStream.observe()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}