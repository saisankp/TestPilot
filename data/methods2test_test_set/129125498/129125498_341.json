{"test_class": {"identifier": "DetectorMappingControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DetectorMappingRepository detectorMappingRepo;", "modifier": "@Mock\n    private", "type": "DetectorMappingRepository", "declarator": "detectorMappingRepo", "var_name": "detectorMappingRepo"}, {"original_string": "private String id = \"adsvade8^szx\";", "modifier": "private", "type": "String", "declarator": "id = \"adsvade8^szx\"", "var_name": "id"}, {"original_string": "private String detectorUuid = \"aeb4d849-847a-45c0-8312-dc0fcf22b639\";", "modifier": "private", "type": "String", "declarator": "detectorUuid = \"aeb4d849-847a-45c0-8312-dc0fcf22b639\"", "var_name": "detectorUuid"}, {"original_string": "private String userVal = \"test-user\";", "modifier": "private", "type": "String", "declarator": "userVal = \"test-user\"", "var_name": "userVal"}, {"original_string": "@InjectMocks\n    private DetectorMappingController controllerUnderTest;", "modifier": "@InjectMocks\n    private", "type": "DetectorMappingController", "declarator": "controllerUnderTest", "var_name": "controllerUnderTest"}, {"original_string": "private HttpHeaders httpHeaders = new HttpHeaders();", "modifier": "private", "type": "HttpHeaders", "declarator": "httpHeaders = new HttpHeaders()", "var_name": "httpHeaders"}, {"original_string": "private Trace trace = Mockito.mock(Trace.class);", "modifier": "private", "type": "Trace", "declarator": "trace = Mockito.mock(Trace.class)", "var_name": "trace"}, {"original_string": "private Tracer noOpsTracer;", "modifier": "private", "type": "Tracer", "declarator": "noOpsTracer", "var_name": "noOpsTracer"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/web/DetectorMappingControllerTest.java"}, "test_case": {"identifier": "testFindMatchingByTags", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindMatchingByTags() {\n        val lookupTime = 60;\n        List<Map<String, String>> tagsList = new ArrayList<>();\n        MatchingDetectorsResponse mockMatchingDetectorsResponse = mockMatchingDetectorsResponse(lookupTime, detectorUuid);\n        when(detectorMappingRepo.findMatchingDetectorMappings(tagsList)).thenReturn(mockMatchingDetectorsResponse);\n        MatchingDetectorsResponse matchingDetectorsResult = controllerUnderTest.searchDetectorMapping(tagsList);\n        Assert.assertEquals(1, matchingDetectorsResult.getGroupedDetectorsBySearchIndex().size());\n        List<ConsumerDetectorMapping> consumerDetectorMappings = matchingDetectorsResult.getGroupedDetectorsBySearchIndex().get(1);\n        assertEquals(1, consumerDetectorMappings.size());\n        assertEquals(UUID.fromString(detectorUuid), consumerDetectorMappings.get(0).getUuid());\n    }", "signature": "void testFindMatchingByTags()", "full_signature": "@Test public void testFindMatchingByTags()", "class_method_signature": "DetectorMappingControllerTest.testFindMatchingByTags()", "testcase": true, "constructor": false, "invocations": ["mockMatchingDetectorsResponse", "thenReturn", "when", "findMatchingDetectorMappings", "searchDetectorMapping", "assertEquals", "size", "getGroupedDetectorsBySearchIndex", "get", "getGroupedDetectorsBySearchIndex", "assertEquals", "size", "assertEquals", "fromString", "getUuid", "get"]}, "focal_class": {"identifier": "DetectorMappingController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private DetectorMappingRepository detectorMappingRepo;", "modifier": "@Autowired\n    private", "type": "DetectorMappingRepository", "declarator": "detectorMappingRepo", "var_name": "detectorMappingRepo"}, {"original_string": "@Autowired\n    private Trace trace;", "modifier": "@Autowired\n    private", "type": "Trace", "declarator": "trace", "var_name": "trace"}], "methods": [{"identifier": "getDetectorMapping", "parameters": "(@RequestParam String id)", "modifiers": "@RequestMapping(produces = \"application/json\", method = RequestMethod.GET) public", "return": "DetectorMapping", "signature": "DetectorMapping getDetectorMapping(@RequestParam String id)", "full_signature": "@RequestMapping(produces = \"application/json\", method = RequestMethod.GET) public DetectorMapping getDetectorMapping(@RequestParam String id)", "class_method_signature": "DetectorMappingController.getDetectorMapping(@RequestParam String id)", "testcase": false, "constructor": false}, {"identifier": "createDetectorMapping", "parameters": "(@RequestBody CreateDetectorMappingRequest request, @RequestHeader HttpHeaders header)", "modifiers": "@RequestMapping(method = RequestMethod.POST) @ResponseStatus(HttpStatus.CREATED) public", "return": "String", "signature": "String createDetectorMapping(@RequestBody CreateDetectorMappingRequest request, @RequestHeader HttpHeaders header)", "full_signature": "@RequestMapping(method = RequestMethod.POST) @ResponseStatus(HttpStatus.CREATED) public String createDetectorMapping(@RequestBody CreateDetectorMappingRequest request, @RequestHeader HttpHeaders header)", "class_method_signature": "DetectorMappingController.createDetectorMapping(@RequestBody CreateDetectorMappingRequest request, @RequestHeader HttpHeaders header)", "testcase": false, "constructor": false}, {"identifier": "disableDeleteDetectorMapping", "parameters": "(@RequestParam String id)", "modifiers": "@RequestMapping(value = \"/disable\", method = RequestMethod.PUT) @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void disableDeleteDetectorMapping(@RequestParam String id)", "full_signature": "@RequestMapping(value = \"/disable\", method = RequestMethod.PUT) @ResponseStatus(HttpStatus.OK) public void disableDeleteDetectorMapping(@RequestParam String id)", "class_method_signature": "DetectorMappingController.disableDeleteDetectorMapping(@RequestParam String id)", "testcase": false, "constructor": false}, {"identifier": "deleteDetectorMapping", "parameters": "(@RequestParam String id)", "modifiers": "@RequestMapping(method = RequestMethod.DELETE) @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void deleteDetectorMapping(@RequestParam String id)", "full_signature": "@RequestMapping(method = RequestMethod.DELETE) @ResponseStatus(HttpStatus.OK) public void deleteDetectorMapping(@RequestParam String id)", "class_method_signature": "DetectorMappingController.deleteDetectorMapping(@RequestParam String id)", "testcase": false, "constructor": false}, {"identifier": "searchDetectorMapping", "parameters": "(@RequestBody SearchMappingsRequest request,\n                                                       @RequestHeader HttpHeaders httpHeaders)", "modifiers": "@RequestMapping(value = \"/search\", method = RequestMethod.POST) public", "return": "List<DetectorMapping>", "signature": "List<DetectorMapping> searchDetectorMapping(@RequestBody SearchMappingsRequest request,\n                                                       @RequestHeader HttpHeaders httpHeaders)", "full_signature": "@RequestMapping(value = \"/search\", method = RequestMethod.POST) public List<DetectorMapping> searchDetectorMapping(@RequestBody SearchMappingsRequest request,\n                                                       @RequestHeader HttpHeaders httpHeaders)", "class_method_signature": "DetectorMappingController.searchDetectorMapping(@RequestBody SearchMappingsRequest request,\n                                                       @RequestHeader HttpHeaders httpHeaders)", "testcase": false, "constructor": false}, {"identifier": "findDetectorMapping", "parameters": "(@RequestParam int timeInSecs)", "modifiers": "@RequestMapping(value = \"/lastUpdated\", method = RequestMethod.GET) public", "return": "List<DetectorMapping>", "signature": "List<DetectorMapping> findDetectorMapping(@RequestParam int timeInSecs)", "full_signature": "@RequestMapping(value = \"/lastUpdated\", method = RequestMethod.GET) public List<DetectorMapping> findDetectorMapping(@RequestParam int timeInSecs)", "class_method_signature": "DetectorMappingController.findDetectorMapping(@RequestParam int timeInSecs)", "testcase": false, "constructor": false}, {"identifier": "searchDetectorMapping", "parameters": "(@RequestBody List<Map<String, String>> tagsList)", "modifiers": "@RequestMapping(value = \"/findMatchingByTags\", method = RequestMethod.POST) public", "return": "MatchingDetectorsResponse", "signature": "MatchingDetectorsResponse searchDetectorMapping(@RequestBody List<Map<String, String>> tagsList)", "full_signature": "@RequestMapping(value = \"/findMatchingByTags\", method = RequestMethod.POST) public MatchingDetectorsResponse searchDetectorMapping(@RequestBody List<Map<String, String>> tagsList)", "class_method_signature": "DetectorMappingController.searchDetectorMapping(@RequestBody List<Map<String, String>> tagsList)", "testcase": false, "constructor": false}, {"identifier": "deleteMappingsByDetectorUUID", "parameters": "(@RequestParam UUID uuid)", "modifiers": "@RequestMapping(value = \"/deleteMappingsByDetectorUuid\", method = RequestMethod.DELETE) @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void deleteMappingsByDetectorUUID(@RequestParam UUID uuid)", "full_signature": "@RequestMapping(value = \"/deleteMappingsByDetectorUuid\", method = RequestMethod.DELETE) @ResponseStatus(HttpStatus.OK) public void deleteMappingsByDetectorUUID(@RequestParam UUID uuid)", "class_method_signature": "DetectorMappingController.deleteMappingsByDetectorUUID(@RequestParam UUID uuid)", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/web/DetectorMappingController.java"}, "focal_method": {"identifier": "searchDetectorMapping", "parameters": "(@RequestBody SearchMappingsRequest request,\n                                                       @RequestHeader HttpHeaders httpHeaders)", "modifiers": "@RequestMapping(value = \"/search\", method = RequestMethod.POST) public", "return": "List<DetectorMapping>", "body": "@RequestMapping(value = \"/search\", method = RequestMethod.POST)\n    public List<DetectorMapping> searchDetectorMapping(@RequestBody SearchMappingsRequest request,\n                                                       @RequestHeader HttpHeaders httpHeaders) {\n        SpanContext parentSpanContext = trace.extractParentSpan(httpHeaders);\n        Span span = trace.startSpan(\"mappings-search\", parentSpanContext);\n        AssertUtil.isTrue(request.getUserId() != null || request.getDetectorUuid() != null,\n                \"User id and Detector UUID can't both be null\");\n        List<DetectorMapping> resultSearchDetectorMapping = detectorMappingRepo.search(request);\n        span.finish();\n        return resultSearchDetectorMapping;\n    }", "signature": "List<DetectorMapping> searchDetectorMapping(@RequestBody SearchMappingsRequest request,\n                                                       @RequestHeader HttpHeaders httpHeaders)", "full_signature": "@RequestMapping(value = \"/search\", method = RequestMethod.POST) public List<DetectorMapping> searchDetectorMapping(@RequestBody SearchMappingsRequest request,\n                                                       @RequestHeader HttpHeaders httpHeaders)", "class_method_signature": "DetectorMappingController.searchDetectorMapping(@RequestBody SearchMappingsRequest request,\n                                                       @RequestHeader HttpHeaders httpHeaders)", "testcase": false, "constructor": false, "invocations": ["extractParentSpan", "startSpan", "isTrue", "getUserId", "getDetectorUuid", "search", "finish"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}