{"test_class": {"identifier": "ServerMessageValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServerMessageValidator serverMessageValidator;", "modifier": "private", "type": "ServerMessageValidator", "declarator": "serverMessageValidator", "var_name": "serverMessageValidator"}, {"original_string": "@Mock private Message mockMessage;", "modifier": "@Mock private", "type": "Message", "declarator": "mockMessage", "var_name": "mockMessage"}, {"original_string": "@Mock private ServerProtocol mockServerProtocol;", "modifier": "@Mock private", "type": "ServerProtocol", "declarator": "mockServerProtocol", "var_name": "mockServerProtocol"}], "file": "infrastructure/src/test/java/com/remotecraft/app/infrastructure/validation/ServerMessageValidatorTest.java"}, "test_case": {"identifier": "shouldProperlyCastMessageIntoServer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldProperlyCastMessageIntoServer() throws Exception {\n    when(mockMessage.getServer()).thenReturn(mockServerProtocol);\n\n    ServerProtocol serverProtocol = serverMessageValidator.cast(mockMessage);\n\n    assertThat(serverProtocol).isNotNull();\n    assertThat(serverProtocol).isInstanceOf(ServerProtocol.class);\n    verify(mockMessage, times(1)).getServer();\n    verifyNoMoreInteractions(mockMessage);\n  }", "signature": "void shouldProperlyCastMessageIntoServer()", "full_signature": "@Test public void shouldProperlyCastMessageIntoServer()", "class_method_signature": "ServerMessageValidatorTest.shouldProperlyCastMessageIntoServer()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getServer", "cast", "isNotNull", "assertThat", "isInstanceOf", "assertThat", "getServer", "verify", "times", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "ServerMessageValidator", "superclass": "", "interfaces": "implements MessageValidator<ServerProtocol>", "fields": [{"original_string": "private List<InvalidServerData> invalidServerData;", "modifier": "private", "type": "List<InvalidServerData>", "declarator": "invalidServerData", "var_name": "invalidServerData"}], "methods": [{"identifier": "ServerMessageValidator", "parameters": "()", "modifiers": "@Inject public", "return": "", "signature": " ServerMessageValidator()", "full_signature": "@Inject public  ServerMessageValidator()", "class_method_signature": "ServerMessageValidator.ServerMessageValidator()", "testcase": false, "constructor": true}, {"identifier": "isValid", "parameters": "(Message message)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(Message message)", "full_signature": "@Override public boolean isValid(Message message)", "class_method_signature": "ServerMessageValidator.isValid(Message message)", "testcase": false, "constructor": false}, {"identifier": "cast", "parameters": "(Message message)", "modifiers": "@Override public", "return": "ServerProtocol", "signature": "ServerProtocol cast(Message message)", "full_signature": "@Override public ServerProtocol cast(Message message)", "class_method_signature": "ServerMessageValidator.cast(Message message)", "testcase": false, "constructor": false}, {"identifier": "getInvalidServerData", "parameters": "()", "modifiers": "public", "return": "List<InvalidServerData>", "signature": "List<InvalidServerData> getInvalidServerData()", "full_signature": "public List<InvalidServerData> getInvalidServerData()", "class_method_signature": "ServerMessageValidator.getInvalidServerData()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Message message)", "modifiers": "private", "return": "List<InvalidServerData>", "signature": "List<InvalidServerData> validate(Message message)", "full_signature": "private List<InvalidServerData> validate(Message message)", "class_method_signature": "ServerMessageValidator.validate(Message message)", "testcase": false, "constructor": false}], "file": "infrastructure/src/main/java/com/remotecraft/app/infrastructure/validation/ServerMessageValidator.java"}, "focal_method": {"identifier": "cast", "parameters": "(Message message)", "modifiers": "@Override public", "return": "ServerProtocol", "body": "@Override\n  public ServerProtocol cast(Message message) {\n    return message.getServer();\n  }", "signature": "ServerProtocol cast(Message message)", "full_signature": "@Override public ServerProtocol cast(Message message)", "class_method_signature": "ServerMessageValidator.cast(Message message)", "testcase": false, "constructor": false, "invocations": ["getServer"]}, "repository": {"repo_id": 66076162, "url": "https://github.com/RemotecraftProject/RemotecraftApp", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 2502, "license": "licensed"}}