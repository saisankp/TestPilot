{"test_class": {"identifier": "FileRecordReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "datavec-api/src/test/java/org/datavec/api/records/reader/impl/FileRecordReaderTest.java"}, "test_case": {"identifier": "testReset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReset() throws Exception {\n        FileRecordReader rr = new FileRecordReader();\n        rr.initialize(new FileSplit(new ClassPathResource(\"iris.dat\").getFile()));\n\n        int nResets = 5;\n        for (int i = 0; i < nResets; i++) {\n\n            int lineCount = 0;\n            while (rr.hasNext()) {\n                List<Writable> line = rr.next();\n                assertEquals(1, line.size());\n                lineCount++;\n            }\n            assertFalse(rr.hasNext());\n            assertEquals(1, lineCount);\n            rr.reset();\n        }\n    }", "signature": "void testReset()", "full_signature": "@Test public void testReset()", "class_method_signature": "FileRecordReaderTest.testReset()", "testcase": true, "constructor": false, "invocations": ["initialize", "getFile", "hasNext", "next", "assertEquals", "size", "assertFalse", "hasNext", "assertEquals", "reset"]}, "focal_class": {"identifier": "FileRecordReader", "superclass": "extends BaseRecordReader", "interfaces": "", "fields": [{"original_string": "protected Iterator<File> iter;", "modifier": "protected", "type": "Iterator<File>", "declarator": "iter", "var_name": "iter"}, {"original_string": "protected Iterator<String> locationsIterator;", "modifier": "protected", "type": "Iterator<String>", "declarator": "locationsIterator", "var_name": "locationsIterator"}, {"original_string": "protected Configuration conf;", "modifier": "protected", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "protected File currentFile;", "modifier": "protected", "type": "File", "declarator": "currentFile", "var_name": "currentFile"}, {"original_string": "protected List<String> labels;", "modifier": "protected", "type": "List<String>", "declarator": "labels", "var_name": "labels"}, {"original_string": "protected boolean appendLabel = false;", "modifier": "protected", "type": "boolean", "declarator": "appendLabel = false", "var_name": "appendLabel"}, {"original_string": "protected InputSplit inputSplit;", "modifier": "protected", "type": "InputSplit", "declarator": "inputSplit", "var_name": "inputSplit"}], "methods": [{"identifier": "FileRecordReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " FileRecordReader()", "full_signature": "public  FileRecordReader()", "class_method_signature": "FileRecordReader.FileRecordReader()", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(InputSplit split)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(InputSplit split)", "full_signature": "@Override public void initialize(InputSplit split)", "class_method_signature": "FileRecordReader.initialize(InputSplit split)", "testcase": false, "constructor": false}, {"identifier": "doInitialize", "parameters": "(InputSplit split)", "modifiers": "protected", "return": "void", "signature": "void doInitialize(InputSplit split)", "full_signature": "protected void doInitialize(InputSplit split)", "class_method_signature": "FileRecordReader.doInitialize(InputSplit split)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(Configuration conf, InputSplit split)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(Configuration conf, InputSplit split)", "full_signature": "@Override public void initialize(Configuration conf, InputSplit split)", "class_method_signature": "FileRecordReader.initialize(Configuration conf, InputSplit split)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "List<Writable>", "signature": "List<Writable> next()", "full_signature": "@Override public List<Writable> next()", "class_method_signature": "FileRecordReader.next()", "testcase": false, "constructor": false}, {"identifier": "loadFromFile", "parameters": "(File next)", "modifiers": "private", "return": "List<Writable>", "signature": "List<Writable> loadFromFile(File next)", "full_signature": "private List<Writable> loadFromFile(File next)", "class_method_signature": "FileRecordReader.loadFromFile(File next)", "testcase": false, "constructor": false}, {"identifier": "getCurrentLabel", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCurrentLabel()", "full_signature": "public int getCurrentLabel()", "class_method_signature": "FileRecordReader.getCurrentLabel()", "testcase": false, "constructor": false}, {"identifier": "getLabels", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getLabels()", "full_signature": "public List<String> getLabels()", "class_method_signature": "FileRecordReader.getLabels()", "testcase": false, "constructor": false}, {"identifier": "setLabels", "parameters": "(List<String> labels)", "modifiers": "public", "return": "void", "signature": "void setLabels(List<String> labels)", "full_signature": "public void setLabels(List<String> labels)", "class_method_signature": "FileRecordReader.setLabels(List<String> labels)", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "@Override public boolean hasNext()", "class_method_signature": "FileRecordReader.hasNext()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FileRecordReader.close()", "testcase": false, "constructor": false}, {"identifier": "setConf", "parameters": "(Configuration conf)", "modifiers": "@Override public", "return": "void", "signature": "void setConf(Configuration conf)", "full_signature": "@Override public void setConf(Configuration conf)", "class_method_signature": "FileRecordReader.setConf(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getConf", "parameters": "()", "modifiers": "@Override public", "return": "Configuration", "signature": "Configuration getConf()", "full_signature": "@Override public Configuration getConf()", "class_method_signature": "FileRecordReader.getConf()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(int num)", "modifiers": "@Override public", "return": "List<List<Writable>>", "signature": "List<List<Writable>> next(int num)", "full_signature": "@Override public List<List<Writable>> next(int num)", "class_method_signature": "FileRecordReader.next(int num)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "FileRecordReader.reset()", "testcase": false, "constructor": false}, {"identifier": "resetSupported", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean resetSupported()", "full_signature": "@Override public boolean resetSupported()", "class_method_signature": "FileRecordReader.resetSupported()", "testcase": false, "constructor": false}, {"identifier": "record", "parameters": "(URI uri, DataInputStream dataInputStream)", "modifiers": "@Override public", "return": "List<Writable>", "signature": "List<Writable> record(URI uri, DataInputStream dataInputStream)", "full_signature": "@Override public List<Writable> record(URI uri, DataInputStream dataInputStream)", "class_method_signature": "FileRecordReader.record(URI uri, DataInputStream dataInputStream)", "testcase": false, "constructor": false}, {"identifier": "nextRecord", "parameters": "()", "modifiers": "@Override public", "return": "Record", "signature": "Record nextRecord()", "full_signature": "@Override public Record nextRecord()", "class_method_signature": "FileRecordReader.nextRecord()", "testcase": false, "constructor": false}, {"identifier": "nextFile", "parameters": "()", "modifiers": "protected", "return": "File", "signature": "File nextFile()", "full_signature": "protected File nextFile()", "class_method_signature": "FileRecordReader.nextFile()", "testcase": false, "constructor": false}, {"identifier": "advanceToNextLocation", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void advanceToNextLocation()", "full_signature": "protected void advanceToNextLocation()", "class_method_signature": "FileRecordReader.advanceToNextLocation()", "testcase": false, "constructor": false}, {"identifier": "loadFromMetaData", "parameters": "(RecordMetaData recordMetaData)", "modifiers": "@Override public", "return": "Record", "signature": "Record loadFromMetaData(RecordMetaData recordMetaData)", "full_signature": "@Override public Record loadFromMetaData(RecordMetaData recordMetaData)", "class_method_signature": "FileRecordReader.loadFromMetaData(RecordMetaData recordMetaData)", "testcase": false, "constructor": false}, {"identifier": "loadFromMetaData", "parameters": "(List<RecordMetaData> recordMetaDatas)", "modifiers": "@Override public", "return": "List<Record>", "signature": "List<Record> loadFromMetaData(List<RecordMetaData> recordMetaDatas)", "full_signature": "@Override public List<Record> loadFromMetaData(List<RecordMetaData> recordMetaDatas)", "class_method_signature": "FileRecordReader.loadFromMetaData(List<RecordMetaData> recordMetaDatas)", "testcase": false, "constructor": false}], "file": "datavec-api/src/main/java/org/datavec/api/records/reader/impl/FileRecordReader.java"}, "focal_method": {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void reset() {\n        if (inputSplit == null)\n            throw new UnsupportedOperationException(\"Cannot reset without first initializing\");\n        try {\n            doInitialize(inputSplit);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error during LineRecordReader reset\", e);\n        }\n    }", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "FileRecordReader.reset()", "testcase": false, "constructor": false, "invocations": ["doInitialize"]}, "repository": {"repo_id": 62700410, "url": "https://github.com/deeplearning4j/DataVec", "language": "Java", "is_fork": false, "fork_count": 174, "stargazer_count": 260, "size": 39842, "license": "licensed"}}