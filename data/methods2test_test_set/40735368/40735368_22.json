{"test_class": {"identifier": "IndexedFidReaderTest", "superclass": "extends FIDTestCase", "interfaces": "", "fields": [{"original_string": "private IndexedFidReader reader;", "modifier": "private", "type": "IndexedFidReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private IndexFile indexFile;", "modifier": "private", "type": "IndexFile", "declarator": "indexFile", "var_name": "indexFile"}, {"original_string": "private ShpFiles shpFiles;", "modifier": "private", "type": "ShpFiles", "declarator": "shpFiles", "var_name": "shpFiles"}], "file": "modules/plugin/shapefile/src/test/java/org/geotools/data/shapefile/fid/IndexedFidReaderTest.java"}, "test_case": {"identifier": "testGoTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGoTo() throws IOException {\n        reader.goTo(10);\n        assertEquals(shpFiles.getTypeName() + \".11\", reader.next());\n        assertTrue(reader.hasNext());\n\n        reader.goTo(15);\n        assertEquals(shpFiles.getTypeName() + \".16\", reader.next());\n        assertTrue(reader.hasNext());\n\n        reader.goTo(0);\n        assertEquals(shpFiles.getTypeName() + \".1\", reader.next());\n        assertTrue(reader.hasNext());\n\n        reader.goTo(3);\n        assertEquals(shpFiles.getTypeName() + \".4\", reader.next());\n        assertTrue(reader.hasNext());\n    }", "signature": "void testGoTo()", "full_signature": "@Test public void testGoTo()", "class_method_signature": "IndexedFidReaderTest.testGoTo()", "testcase": true, "constructor": false, "invocations": ["goTo", "assertEquals", "getTypeName", "next", "assertTrue", "hasNext", "goTo", "assertEquals", "getTypeName", "next", "assertTrue", "hasNext", "goTo", "assertEquals", "getTypeName", "next", "assertTrue", "hasNext", "goTo", "assertEquals", "getTypeName", "next", "assertTrue", "hasNext"]}, "focal_class": {"identifier": "IndexedFidReader", "superclass": "", "interfaces": "implements FIDReader, FileReader", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(\"org.geotools.data.shapefile\");", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(\"org.geotools.data.shapefile\")", "var_name": "LOGGER"}, {"original_string": "private ReadableByteChannel readChannel;", "modifier": "private", "type": "ReadableByteChannel", "declarator": "readChannel", "var_name": "readChannel"}, {"original_string": "private ByteBuffer buffer;", "modifier": "private", "type": "ByteBuffer", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private long count;", "modifier": "private", "type": "long", "declarator": "count", "var_name": "count"}, {"original_string": "private String typeName;", "modifier": "private", "type": "String", "declarator": "typeName", "var_name": "typeName"}, {"original_string": "private boolean done;", "modifier": "private", "type": "boolean", "declarator": "done", "var_name": "done"}, {"original_string": "private int removes;", "modifier": "private", "type": "int", "declarator": "removes", "var_name": "removes"}, {"original_string": "private int currentShxIndex = -1;", "modifier": "private", "type": "int", "declarator": "currentShxIndex = -1", "var_name": "currentShxIndex"}, {"original_string": "private long currentId;", "modifier": "private", "type": "long", "declarator": "currentId", "var_name": "currentId"}, {"original_string": "private StringBuilder fidBuilder;", "modifier": "private", "type": "StringBuilder", "declarator": "fidBuilder", "var_name": "fidBuilder"}, {"original_string": "private long bufferStart = Long.MIN_VALUE;", "modifier": "private", "type": "long", "declarator": "bufferStart = Long.MIN_VALUE", "var_name": "bufferStart"}, {"original_string": "StreamLogging streamLogger = new StreamLogging(\"IndexedFidReader\");", "modifier": "", "type": "StreamLogging", "declarator": "streamLogger = new StreamLogging(\"IndexedFidReader\")", "var_name": "streamLogger"}], "methods": [{"identifier": "IndexedFidReader", "parameters": "(ShpFiles shpFiles)", "modifiers": "public", "return": "", "signature": " IndexedFidReader(ShpFiles shpFiles)", "full_signature": "public  IndexedFidReader(ShpFiles shpFiles)", "class_method_signature": "IndexedFidReader.IndexedFidReader(ShpFiles shpFiles)", "testcase": false, "constructor": true}, {"identifier": "IndexedFidReader", "parameters": "( ShpFiles shpFiles, ReadableByteChannel in )", "modifiers": "public", "return": "", "signature": " IndexedFidReader( ShpFiles shpFiles, ReadableByteChannel in )", "full_signature": "public  IndexedFidReader( ShpFiles shpFiles, ReadableByteChannel in )", "class_method_signature": "IndexedFidReader.IndexedFidReader( ShpFiles shpFiles, ReadableByteChannel in )", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "( ShpFiles shpFiles, ReadableByteChannel in )", "modifiers": "private", "return": "void", "signature": "void init( ShpFiles shpFiles, ReadableByteChannel in )", "full_signature": "private void init( ShpFiles shpFiles, ReadableByteChannel in )", "class_method_signature": "IndexedFidReader.init( ShpFiles shpFiles, ReadableByteChannel in )", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "(ShpFiles shpFiles)", "modifiers": "private", "return": "void", "signature": "void getHeader(ShpFiles shpFiles)", "full_signature": "private void getHeader(ShpFiles shpFiles)", "class_method_signature": "IndexedFidReader.getHeader(ShpFiles shpFiles)", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCount()", "full_signature": "public long getCount()", "class_method_signature": "IndexedFidReader.getCount()", "testcase": false, "constructor": false}, {"identifier": "getRemoves", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRemoves()", "full_signature": "public int getRemoves()", "class_method_signature": "IndexedFidReader.getRemoves()", "testcase": false, "constructor": false}, {"identifier": "findFid", "parameters": "(String fid)", "modifiers": "public", "return": "long", "signature": "long findFid(String fid)", "full_signature": "public long findFid(String fid)", "class_method_signature": "IndexedFidReader.findFid(String fid)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(long desired, long minRec, long maxRec, long predictedRec)", "modifiers": "", "return": "long", "signature": "long search(long desired, long minRec, long maxRec, long predictedRec)", "full_signature": " long search(long desired, long minRec, long maxRec, long predictedRec)", "class_method_signature": "IndexedFidReader.search(long desired, long minRec, long maxRec, long predictedRec)", "testcase": false, "constructor": false}, {"identifier": "goTo", "parameters": "(long recno)", "modifiers": "public", "return": "void", "signature": "void goTo(long recno)", "full_signature": "public void goTo(long recno)", "class_method_signature": "IndexedFidReader.goTo(long recno)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "IndexedFidReader.close()", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "public boolean hasNext()", "class_method_signature": "IndexedFidReader.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String next()", "full_signature": "public String next()", "class_method_signature": "IndexedFidReader.next()", "testcase": false, "constructor": false}, {"identifier": "currentSHXIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int currentSHXIndex()", "full_signature": "public int currentSHXIndex()", "class_method_signature": "IndexedFidReader.currentSHXIndex()", "testcase": false, "constructor": false}, {"identifier": "getCurrentFIDIndex", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCurrentFIDIndex()", "full_signature": "public long getCurrentFIDIndex()", "class_method_signature": "IndexedFidReader.getCurrentFIDIndex()", "testcase": false, "constructor": false}, {"identifier": "id", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String id()", "full_signature": "public String id()", "class_method_signature": "IndexedFidReader.id()", "testcase": false, "constructor": false}], "file": "modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/fid/IndexedFidReader.java"}, "focal_method": {"identifier": "goTo", "parameters": "(long recno)", "modifiers": "public", "return": "void", "body": "public void goTo(long recno) throws IOException {\n        assert recno<count;\n        if (readChannel instanceof FileChannel) {\n            long newPosition = IndexedFidWriter.HEADER_SIZE\n                    + (recno * IndexedFidWriter.RECORD_SIZE);\n            if (newPosition >= bufferStart + buffer.limit()\n                    || newPosition < bufferStart) {\n                FileChannel fc = (FileChannel) readChannel;\n                fc.position(newPosition);\n                buffer.limit(buffer.capacity());\n                buffer.position(buffer.limit());\n            } else {\n                buffer.position((int) (newPosition - bufferStart));\n            }\n        } else {\n            throw new IOException(\n                    \"Read Channel is not a File Channel so this is not possible.\");\n        }\n    }", "signature": "void goTo(long recno)", "full_signature": "public void goTo(long recno)", "class_method_signature": "IndexedFidReader.goTo(long recno)", "testcase": false, "constructor": false, "invocations": ["limit", "position", "limit", "capacity", "position", "limit", "position"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}