{"test_class": {"identifier": "NamedThreadFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/NamedThreadFactoryTest.java"}, "test_case": {"identifier": "testNewThread", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewThread() throws Exception {\n        NamedThreadFactory factory = new NamedThreadFactory();\n        Thread t = factory.newThread(Mockito.mock(Runnable.class));\n        assertThat(t.getName(), allOf(containsString(\"pool-\"), containsString(\"-thread-\")));\n        assertFalse(t.isDaemon());\n        // since security manager is not installed.\n        assertSame(t.getThreadGroup(), Thread.currentThread().getThreadGroup());\n    }", "signature": "void testNewThread()", "full_signature": "@Test public void testNewThread()", "class_method_signature": "NamedThreadFactoryTest.testNewThread()", "testcase": true, "constructor": false, "invocations": ["newThread", "mock", "assertThat", "getName", "allOf", "containsString", "containsString", "assertFalse", "isDaemon", "assertSame", "getThreadGroup", "getThreadGroup", "currentThread"]}, "focal_class": {"identifier": "NamedThreadFactory", "superclass": "", "interfaces": "implements ThreadFactory", "fields": [{"original_string": "protected static final AtomicInteger POOL_SEQ = new AtomicInteger(1);", "modifier": "protected static final", "type": "AtomicInteger", "declarator": "POOL_SEQ = new AtomicInteger(1)", "var_name": "POOL_SEQ"}, {"original_string": "protected final AtomicInteger mThreadNum = new AtomicInteger(1);", "modifier": "protected final", "type": "AtomicInteger", "declarator": "mThreadNum = new AtomicInteger(1)", "var_name": "mThreadNum"}, {"original_string": "protected final String mPrefix;", "modifier": "protected final", "type": "String", "declarator": "mPrefix", "var_name": "mPrefix"}, {"original_string": "protected final boolean mDaemon;", "modifier": "protected final", "type": "boolean", "declarator": "mDaemon", "var_name": "mDaemon"}, {"original_string": "protected final ThreadGroup mGroup;", "modifier": "protected final", "type": "ThreadGroup", "declarator": "mGroup", "var_name": "mGroup"}], "methods": [{"identifier": "NamedThreadFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " NamedThreadFactory()", "full_signature": "public  NamedThreadFactory()", "class_method_signature": "NamedThreadFactory.NamedThreadFactory()", "testcase": false, "constructor": true}, {"identifier": "NamedThreadFactory", "parameters": "(String prefix)", "modifiers": "public", "return": "", "signature": " NamedThreadFactory(String prefix)", "full_signature": "public  NamedThreadFactory(String prefix)", "class_method_signature": "NamedThreadFactory.NamedThreadFactory(String prefix)", "testcase": false, "constructor": true}, {"identifier": "NamedThreadFactory", "parameters": "(String prefix, boolean daemon)", "modifiers": "public", "return": "", "signature": " NamedThreadFactory(String prefix, boolean daemon)", "full_signature": "public  NamedThreadFactory(String prefix, boolean daemon)", "class_method_signature": "NamedThreadFactory.NamedThreadFactory(String prefix, boolean daemon)", "testcase": false, "constructor": true}, {"identifier": "newThread", "parameters": "(Runnable runnable)", "modifiers": "@Override public", "return": "Thread", "signature": "Thread newThread(Runnable runnable)", "full_signature": "@Override public Thread newThread(Runnable runnable)", "class_method_signature": "NamedThreadFactory.newThread(Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "getThreadGroup", "parameters": "()", "modifiers": "public", "return": "ThreadGroup", "signature": "ThreadGroup getThreadGroup()", "full_signature": "public ThreadGroup getThreadGroup()", "class_method_signature": "NamedThreadFactory.getThreadGroup()", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/NamedThreadFactory.java"}, "focal_method": {"identifier": "newThread", "parameters": "(Runnable runnable)", "modifiers": "@Override public", "return": "Thread", "body": "@Override\n    public Thread newThread(Runnable runnable) {\n        String name = mPrefix + mThreadNum.getAndIncrement();\n        Thread ret = new Thread(mGroup, runnable, name, 0);\n        ret.setDaemon(mDaemon);\n        return ret;\n    }", "signature": "Thread newThread(Runnable runnable)", "full_signature": "@Override public Thread newThread(Runnable runnable)", "class_method_signature": "NamedThreadFactory.newThread(Runnable runnable)", "testcase": false, "constructor": false, "invocations": ["getAndIncrement", "setDaemon"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}