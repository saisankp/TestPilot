{"test_class": {"identifier": "GeoPackageReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CoordinateReferenceSystem WGS_84;", "modifier": "private final", "type": "CoordinateReferenceSystem", "declarator": "WGS_84", "var_name": "WGS_84"}], "file": "modules/unsupported/geopkg/src/test/java/org/geotools/geopkg/mosaic/GeoPackageReaderTest.java"}, "test_case": {"identifier": "testZoomlevel3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testZoomlevel3() throws IOException {\n        GeoPackageReader reader = new GeoPackageReader(getClass().getResource(\"world_lakes.gpkg\"), null);\n        \n        GeneralParameterValue[] parameters = new GeneralParameterValue[1];\n        GridGeometry2D gg = new GridGeometry2D(new GridEnvelope2D(new Rectangle(500,500)), new ReferencedEnvelope(0,45.0,-85.0,0,WGS_84));\n        parameters[0] = new Parameter<GridGeometry2D>(AbstractGridFormat.READ_GRIDGEOMETRY2D, gg);\n        GridCoverage2D gc = reader.read(\"World_Lakes\", parameters);\n        RenderedImage img = gc.getRenderedImage();\n        assertEquals(0, gc.getEnvelope().getMinimum(0),0.01);\n        assertEquals(-90, gc.getEnvelope().getMinimum(1),0.01);\n        assertEquals(67.5, gc.getEnvelope().getMaximum(0),0.01);\n        assertEquals(0, gc.getEnvelope().getMaximum(1),0.01);\n        assertEquals(768, img.getWidth());\n        assertEquals(1024, img.getHeight());\n    }", "signature": "void testZoomlevel3()", "full_signature": "@Test public void testZoomlevel3()", "class_method_signature": "GeoPackageReaderTest.testZoomlevel3()", "testcase": true, "constructor": false, "invocations": ["getResource", "getClass", "read", "getRenderedImage", "assertEquals", "getMinimum", "getEnvelope", "assertEquals", "getMinimum", "getEnvelope", "assertEquals", "getMaximum", "getEnvelope", "assertEquals", "getMaximum", "getEnvelope", "assertEquals", "getWidth", "assertEquals", "getHeight"]}, "focal_class": {"identifier": "GeoPackageReader", "superclass": "extends AbstractGridCoverage2DReader", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = Logging.getLogger(\"org.geotools.geopkg.mosaic\");", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(\"org.geotools.geopkg.mosaic\")", "var_name": "LOGGER"}, {"original_string": "protected final static int DEFAULT_TILE_SIZE = 256;", "modifier": "protected final static", "type": "int", "declarator": "DEFAULT_TILE_SIZE = 256", "var_name": "DEFAULT_TILE_SIZE"}, {"original_string": "protected final static int ZOOM_LEVEL_BASE = 2;", "modifier": "protected final static", "type": "int", "declarator": "ZOOM_LEVEL_BASE = 2", "var_name": "ZOOM_LEVEL_BASE"}, {"original_string": "protected GridCoverageFactory coverageFactory;", "modifier": "protected", "type": "GridCoverageFactory", "declarator": "coverageFactory", "var_name": "coverageFactory"}, {"original_string": "protected File sourceFile;", "modifier": "protected", "type": "File", "declarator": "sourceFile", "var_name": "sourceFile"}, {"original_string": "protected Map<String, TileEntry> tiles = new HashMap<String, TileEntry>();", "modifier": "protected", "type": "Map<String, TileEntry>", "declarator": "tiles = new HashMap<String, TileEntry>()", "var_name": "tiles"}], "methods": [{"identifier": "GeoPackageReader", "parameters": "(Object source, Hints hints)", "modifiers": "public", "return": "", "signature": " GeoPackageReader(Object source, Hints hints)", "full_signature": "public  GeoPackageReader(Object source, Hints hints)", "class_method_signature": "GeoPackageReader.GeoPackageReader(Object source, Hints hints)", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "Format", "signature": "Format getFormat()", "full_signature": "@Override public Format getFormat()", "class_method_signature": "GeoPackageReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "checkName", "parameters": "(String coverageName)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean checkName(String coverageName)", "full_signature": "@Override protected boolean checkName(String coverageName)", "class_method_signature": "GeoPackageReader.checkName(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "getOriginalEnvelope", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "GeneralEnvelope", "signature": "GeneralEnvelope getOriginalEnvelope(String coverageName)", "full_signature": "@Override public GeneralEnvelope getOriginalEnvelope(String coverageName)", "class_method_signature": "GeoPackageReader.getOriginalEnvelope(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "getHighestRes", "parameters": "(String coverageName)", "modifiers": "@Override protected", "return": "double[]", "signature": "double[] getHighestRes(String coverageName)", "full_signature": "@Override protected double[] getHighestRes(String coverageName)", "class_method_signature": "GeoPackageReader.getHighestRes(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "getOriginalGridRange", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "GridEnvelope", "signature": "GridEnvelope getOriginalGridRange(String coverageName)", "full_signature": "@Override public GridEnvelope getOriginalGridRange(String coverageName)", "class_method_signature": "GeoPackageReader.getOriginalGridRange(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "getCoordinateReferenceSystem", "parameters": "(String coverageName)", "modifiers": "@Override public", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCoordinateReferenceSystem(String coverageName)", "full_signature": "@Override public CoordinateReferenceSystem getCoordinateReferenceSystem(String coverageName)", "class_method_signature": "GeoPackageReader.getCoordinateReferenceSystem(String coverageName)", "testcase": false, "constructor": false}, {"identifier": "getGridCoverageNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getGridCoverageNames()", "full_signature": "@Override public String[] getGridCoverageNames()", "class_method_signature": "GeoPackageReader.getGridCoverageNames()", "testcase": false, "constructor": false}, {"identifier": "getGridCoverageCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getGridCoverageCount()", "full_signature": "@Override public int getGridCoverageCount()", "class_method_signature": "GeoPackageReader.getGridCoverageCount()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String coverageName, GeneralParameterValue[] parameters)", "modifiers": "@Override public", "return": "GridCoverage2D", "signature": "GridCoverage2D read(String coverageName, GeneralParameterValue[] parameters)", "full_signature": "@Override public GridCoverage2D read(String coverageName, GeneralParameterValue[] parameters)", "class_method_signature": "GeoPackageReader.read(String coverageName, GeneralParameterValue[] parameters)", "testcase": false, "constructor": false}, {"identifier": "readImage", "parameters": "(byte[] data)", "modifiers": "protected static", "return": "BufferedImage", "signature": "BufferedImage readImage(byte[] data)", "full_signature": "protected static BufferedImage readImage(byte[] data)", "class_method_signature": "GeoPackageReader.readImage(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "getStartImage", "parameters": "(BufferedImage copyFrom, int width, int height)", "modifiers": "protected", "return": "BufferedImage", "signature": "BufferedImage getStartImage(BufferedImage copyFrom, int width, int height)", "full_signature": "protected BufferedImage getStartImage(BufferedImage copyFrom, int width, int height)", "class_method_signature": "GeoPackageReader.getStartImage(BufferedImage copyFrom, int width, int height)", "testcase": false, "constructor": false}, {"identifier": "getStartImage", "parameters": "(int imageType, int width, int height)", "modifiers": "protected", "return": "BufferedImage", "signature": "BufferedImage getStartImage(int imageType, int width, int height)", "full_signature": "protected BufferedImage getStartImage(int imageType, int width, int height)", "class_method_signature": "GeoPackageReader.getStartImage(int imageType, int width, int height)", "testcase": false, "constructor": false}, {"identifier": "getStartImage", "parameters": "(int width, int height)", "modifiers": "protected", "return": "BufferedImage", "signature": "BufferedImage getStartImage(int width, int height)", "full_signature": "protected BufferedImage getStartImage(int width, int height)", "class_method_signature": "GeoPackageReader.getStartImage(int width, int height)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(GeneralParameterValue[] parameters)", "modifiers": "@Override public", "return": "GridCoverage2D", "signature": "GridCoverage2D read(GeneralParameterValue[] parameters)", "full_signature": "@Override public GridCoverage2D read(GeneralParameterValue[] parameters)", "class_method_signature": "GeoPackageReader.read(GeneralParameterValue[] parameters)", "testcase": false, "constructor": false}], "file": "modules/unsupported/geopkg/src/main/java/org/geotools/geopkg/mosaic/GeoPackageReader.java"}, "focal_method": {"identifier": "read", "parameters": "(String coverageName, GeneralParameterValue[] parameters)", "modifiers": "@Override public", "return": "GridCoverage2D", "body": "@Override\n    public GridCoverage2D read(String coverageName, GeneralParameterValue[] parameters) throws IllegalArgumentException, IOException {\n        TileEntry entry = tiles.get(coverageName);\n        BufferedImage image = null;\n        ReferencedEnvelope resultEnvelope = null;\n        GeoPackage file = new GeoPackage(sourceFile);\n        try {\n            CoordinateReferenceSystem crs = getCoordinateReferenceSystem(coverageName);\n\n            ReferencedEnvelope requestedEnvelope = null;\n            Rectangle dim = null;\n\n            if (parameters != null) {\n                for (int i = 0; i < parameters.length; i++) {\n                    final ParameterValue param = (ParameterValue) parameters[i];\n                    final ReferenceIdentifier name = param.getDescriptor().getName();\n                    if (name.equals(AbstractGridFormat.READ_GRIDGEOMETRY2D.getName())) {\n                        final GridGeometry2D gg = (GridGeometry2D) param.getValue();\n                        try {                        \n                            requestedEnvelope = ReferencedEnvelope.create(gg.getEnvelope(), gg.getCoordinateReferenceSystem()).transform(crs, true);;\n                        } catch (Exception e) {\n                            requestedEnvelope = null;\n                        }\n\n                        dim = gg.getGridRange2D().getBounds();\n                        continue;\n                    }\n                }\n            }\n\n            int leftTile, topTile, rightTile, bottomTile;\n\n            //find the closest zoom based on horizontal resolution\n            TileMatrix bestMatrix = null;\n            if (requestedEnvelope != null && dim != null) {\n                //requested res\n                double horRes = requestedEnvelope.getSpan(0) / dim.getWidth(); //proportion of total width that is being requested\n                double worldSpan = crs.getCoordinateSystem().getAxis(0).getMaximumValue() - crs.getCoordinateSystem().getAxis(0).getMinimumValue();\n\n                //loop over matrices            \n                double difference = Double.MAX_VALUE;\n                for (TileMatrix matrix : entry.getTileMatricies()) {\n                    double newRes = worldSpan / (matrix.getMatrixWidth() * matrix.getTileWidth());\n                    double newDifference = Math.abs(horRes - newRes);\n                    if (newDifference < difference) {\n                        difference = newDifference;\n                        bestMatrix = matrix;\n                    }\n                }\n            }\n            if (bestMatrix == null) {\n                bestMatrix = entry.getTileMatricies().get(0);\n            }\n\n            //take available tiles from database\n            leftTile = file.getTileBound(entry, bestMatrix.getZoomLevel(), false, false);\n            rightTile = file.getTileBound(entry, bestMatrix.getZoomLevel(), true, false);\n            bottomTile = file.getTileBound(entry, bestMatrix.getZoomLevel(), false, true);\n            topTile = file.getTileBound(entry, bestMatrix.getZoomLevel(), true, true);  \n\n            double resX = (crs.getCoordinateSystem().getAxis(0).getMaximumValue() - crs.getCoordinateSystem().getAxis(0).getMinimumValue()) / bestMatrix.getMatrixWidth();\n            double resY = (crs.getCoordinateSystem().getAxis(1).getMaximumValue() - crs.getCoordinateSystem().getAxis(1).getMinimumValue()) / bestMatrix.getMatrixHeight();\n            double offsetX = crs.getCoordinateSystem().getAxis(0).getMinimumValue();\n            double offsetY = crs.getCoordinateSystem().getAxis(1).getMinimumValue();\n\n            if (requestedEnvelope != null) { //crop tiles to requested envelope                   \n                leftTile = Math.max(leftTile, (int) Math.round(Math.floor((requestedEnvelope.getMinimum(0) - offsetX) / resX )));\n                bottomTile = Math.max(bottomTile, (int) Math.round(Math.floor((requestedEnvelope.getMinimum(1) - offsetY) / resY )));\n                rightTile = Math.max(leftTile, (int) Math.min(rightTile, Math.round(Math.floor((requestedEnvelope.getMaximum(0) - offsetX) / resX ))));\n                topTile = Math.max(bottomTile, (int) Math.min(topTile, Math.round(Math.floor((requestedEnvelope.getMaximum(1) - offsetY) / resY ))));\n            } \n\n            int width = (int) (rightTile - leftTile + 1) * DEFAULT_TILE_SIZE;\n            int height = (int) (topTile - bottomTile + 1) * DEFAULT_TILE_SIZE;\n\n            //recalculate the envelope we are actually returning\n            resultEnvelope = new ReferencedEnvelope(offsetX + leftTile * resX, offsetX + (rightTile+1) * resX, offsetY + bottomTile * resY, offsetY + (topTile+1) * resY, crs);\n\n            TileReader it;\n            it = file.reader(entry, bestMatrix.getZoomLevel(), bestMatrix.getZoomLevel(), leftTile, rightTile, bottomTile, topTile);\n\n            while (it.hasNext()) {                \n                Tile tile = it.next();\n\n                BufferedImage tileImage = readImage(tile.getData());\n\n                if (image == null) {\n                    image = getStartImage(tileImage, width, height);\n                }\n\n                //coordinates\n                int posx = (int) (tile.getColumn() - leftTile) * DEFAULT_TILE_SIZE;\n                int posy = (int) (topTile - tile.getRow()) * DEFAULT_TILE_SIZE;\n\n                image.getRaster().setRect(posx, posy, tileImage.getData() );\n            }\n\n            it.close();\n\n            if (image == null){ // no tiles ??\n                image = getStartImage(width, height);\n            }\n        }\n        finally {\n            file.close();\n        }\n        return coverageFactory.create(entry.getTableName(), image, resultEnvelope);\n    }", "signature": "GridCoverage2D read(String coverageName, GeneralParameterValue[] parameters)", "full_signature": "@Override public GridCoverage2D read(String coverageName, GeneralParameterValue[] parameters)", "class_method_signature": "GeoPackageReader.read(String coverageName, GeneralParameterValue[] parameters)", "testcase": false, "constructor": false, "invocations": ["get", "getCoordinateReferenceSystem", "getName", "getDescriptor", "equals", "getName", "getValue", "transform", "create", "getEnvelope", "getCoordinateReferenceSystem", "getBounds", "getGridRange2D", "getSpan", "getWidth", "getMaximumValue", "getAxis", "getCoordinateSystem", "getMinimumValue", "getAxis", "getCoordinateSystem", "getTileMatricies", "getMatrixWidth", "getTileWidth", "abs", "get", "getTileMatricies", "getTileBound", "getZoomLevel", "getTileBound", "getZoomLevel", "getTileBound", "getZoomLevel", "getTileBound", "getZoomLevel", "getMaximumValue", "getAxis", "getCoordinateSystem", "getMinimumValue", "getAxis", "getCoordinateSystem", "getMatrixWidth", "getMaximumValue", "getAxis", "getCoordinateSystem", "getMinimumValue", "getAxis", "getCoordinateSystem", "getMatrixHeight", "getMinimumValue", "getAxis", "getCoordinateSystem", "getMinimumValue", "getAxis", "getCoordinateSystem", "max", "round", "floor", "getMinimum", "max", "round", "floor", "getMinimum", "max", "min", "round", "floor", "getMaximum", "max", "min", "round", "floor", "getMaximum", "reader", "getZoomLevel", "getZoomLevel", "hasNext", "next", "readImage", "getData", "getStartImage", "getColumn", "getRow", "setRect", "getRaster", "getData", "close", "getStartImage", "close", "create", "getTableName"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}