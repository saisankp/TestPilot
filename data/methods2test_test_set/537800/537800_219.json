{"test_class": {"identifier": "MetricRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MetricRegistryListener listener = mock(MetricRegistryListener.class);", "modifier": "private final", "type": "MetricRegistryListener", "declarator": "listener = mock(MetricRegistryListener.class)", "var_name": "listener"}, {"original_string": "private final MetricRegistry registry = new MetricRegistry();", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = new MetricRegistry()", "var_name": "registry"}, {"original_string": "private final Gauge<String> gauge = () -> \"\";", "modifier": "private final", "type": "Gauge<String>", "declarator": "gauge = () -> \"\"", "var_name": "gauge"}, {"original_string": "private final Counter counter = mock(Counter.class);", "modifier": "private final", "type": "Counter", "declarator": "counter = mock(Counter.class)", "var_name": "counter"}, {"original_string": "private final Histogram histogram = mock(Histogram.class);", "modifier": "private final", "type": "Histogram", "declarator": "histogram = mock(Histogram.class)", "var_name": "histogram"}, {"original_string": "private final Meter meter = mock(Meter.class);", "modifier": "private final", "type": "Meter", "declarator": "meter = mock(Meter.class)", "var_name": "meter"}, {"original_string": "private final Timer timer = mock(Timer.class);", "modifier": "private final", "type": "Timer", "declarator": "timer = mock(Timer.class)", "var_name": "timer"}], "file": "metrics-core/src/test/java/com/codahale/metrics/MetricRegistryTest.java"}, "test_case": {"identifier": "elidesEmptyStringsFromNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void elidesEmptyStringsFromNames() {\n        assertThat(name(\"one\", \"\", \"three\"))\n                .isEqualTo(\"one.three\");\n    }", "signature": "void elidesEmptyStringsFromNames()", "full_signature": "@Test public void elidesEmptyStringsFromNames()", "class_method_signature": "MetricRegistryTest.elidesEmptyStringsFromNames()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "name"]}, "focal_class": {"identifier": "MetricRegistry", "superclass": "", "interfaces": "implements MetricSet", "fields": [{"original_string": "private final ConcurrentMap<String, Metric> metrics;", "modifier": "private final", "type": "ConcurrentMap<String, Metric>", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private final List<MetricRegistryListener> listeners;", "modifier": "private final", "type": "List<MetricRegistryListener>", "declarator": "listeners", "var_name": "listeners"}], "methods": [{"identifier": "name", "parameters": "(String name, String... names)", "modifiers": "public static", "return": "String", "signature": "String name(String name, String... names)", "full_signature": "public static String name(String name, String... names)", "class_method_signature": "MetricRegistry.name(String name, String... names)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "(Class<?> klass, String... names)", "modifiers": "public static", "return": "String", "signature": "String name(Class<?> klass, String... names)", "full_signature": "public static String name(Class<?> klass, String... names)", "class_method_signature": "MetricRegistry.name(Class<?> klass, String... names)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(StringBuilder builder, String part)", "modifiers": "private static", "return": "void", "signature": "void append(StringBuilder builder, String part)", "full_signature": "private static void append(StringBuilder builder, String part)", "class_method_signature": "MetricRegistry.append(StringBuilder builder, String part)", "testcase": false, "constructor": false}, {"identifier": "MetricRegistry", "parameters": "()", "modifiers": "public", "return": "", "signature": " MetricRegistry()", "full_signature": "public  MetricRegistry()", "class_method_signature": "MetricRegistry.MetricRegistry()", "testcase": false, "constructor": true}, {"identifier": "buildMap", "parameters": "()", "modifiers": "protected", "return": "ConcurrentMap<String, Metric>", "signature": "ConcurrentMap<String, Metric> buildMap()", "full_signature": "protected ConcurrentMap<String, Metric> buildMap()", "class_method_signature": "MetricRegistry.buildMap()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(String name, T metric)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T register(String name, T metric)", "full_signature": "@SuppressWarnings(\"unchecked\") public T register(String name, T metric)", "class_method_signature": "MetricRegistry.register(String name, T metric)", "testcase": false, "constructor": false}, {"identifier": "registerAll", "parameters": "(MetricSet metrics)", "modifiers": "public", "return": "void", "signature": "void registerAll(MetricSet metrics)", "full_signature": "public void registerAll(MetricSet metrics)", "class_method_signature": "MetricRegistry.registerAll(MetricSet metrics)", "testcase": false, "constructor": false}, {"identifier": "counter", "parameters": "(String name)", "modifiers": "public", "return": "Counter", "signature": "Counter counter(String name)", "full_signature": "public Counter counter(String name)", "class_method_signature": "MetricRegistry.counter(String name)", "testcase": false, "constructor": false}, {"identifier": "counter", "parameters": "(String name, final MetricSupplier<Counter> supplier)", "modifiers": "public", "return": "Counter", "signature": "Counter counter(String name, final MetricSupplier<Counter> supplier)", "full_signature": "public Counter counter(String name, final MetricSupplier<Counter> supplier)", "class_method_signature": "MetricRegistry.counter(String name, final MetricSupplier<Counter> supplier)", "testcase": false, "constructor": false}, {"identifier": "histogram", "parameters": "(String name)", "modifiers": "public", "return": "Histogram", "signature": "Histogram histogram(String name)", "full_signature": "public Histogram histogram(String name)", "class_method_signature": "MetricRegistry.histogram(String name)", "testcase": false, "constructor": false}, {"identifier": "histogram", "parameters": "(String name, final MetricSupplier<Histogram> supplier)", "modifiers": "public", "return": "Histogram", "signature": "Histogram histogram(String name, final MetricSupplier<Histogram> supplier)", "full_signature": "public Histogram histogram(String name, final MetricSupplier<Histogram> supplier)", "class_method_signature": "MetricRegistry.histogram(String name, final MetricSupplier<Histogram> supplier)", "testcase": false, "constructor": false}, {"identifier": "meter", "parameters": "(String name)", "modifiers": "public", "return": "Meter", "signature": "Meter meter(String name)", "full_signature": "public Meter meter(String name)", "class_method_signature": "MetricRegistry.meter(String name)", "testcase": false, "constructor": false}, {"identifier": "meter", "parameters": "(String name, final MetricSupplier<Meter> supplier)", "modifiers": "public", "return": "Meter", "signature": "Meter meter(String name, final MetricSupplier<Meter> supplier)", "full_signature": "public Meter meter(String name, final MetricSupplier<Meter> supplier)", "class_method_signature": "MetricRegistry.meter(String name, final MetricSupplier<Meter> supplier)", "testcase": false, "constructor": false}, {"identifier": "timer", "parameters": "(String name)", "modifiers": "public", "return": "Timer", "signature": "Timer timer(String name)", "full_signature": "public Timer timer(String name)", "class_method_signature": "MetricRegistry.timer(String name)", "testcase": false, "constructor": false}, {"identifier": "timer", "parameters": "(String name, final MetricSupplier<Timer> supplier)", "modifiers": "public", "return": "Timer", "signature": "Timer timer(String name, final MetricSupplier<Timer> supplier)", "full_signature": "public Timer timer(String name, final MetricSupplier<Timer> supplier)", "class_method_signature": "MetricRegistry.timer(String name, final MetricSupplier<Timer> supplier)", "testcase": false, "constructor": false}, {"identifier": "gauge", "parameters": "(String name, final MetricSupplier<Gauge> supplier)", "modifiers": "@SuppressWarnings(\"rawtypes\") public", "return": "Gauge", "signature": "Gauge gauge(String name, final MetricSupplier<Gauge> supplier)", "full_signature": "@SuppressWarnings(\"rawtypes\") public Gauge gauge(String name, final MetricSupplier<Gauge> supplier)", "class_method_signature": "MetricRegistry.gauge(String name, final MetricSupplier<Gauge> supplier)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean remove(String name)", "full_signature": "public boolean remove(String name)", "class_method_signature": "MetricRegistry.remove(String name)", "testcase": false, "constructor": false}, {"identifier": "removeMatching", "parameters": "(MetricFilter filter)", "modifiers": "public", "return": "void", "signature": "void removeMatching(MetricFilter filter)", "full_signature": "public void removeMatching(MetricFilter filter)", "class_method_signature": "MetricRegistry.removeMatching(MetricFilter filter)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(MetricRegistryListener listener)", "modifiers": "public", "return": "void", "signature": "void addListener(MetricRegistryListener listener)", "full_signature": "public void addListener(MetricRegistryListener listener)", "class_method_signature": "MetricRegistry.addListener(MetricRegistryListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(MetricRegistryListener listener)", "modifiers": "public", "return": "void", "signature": "void removeListener(MetricRegistryListener listener)", "full_signature": "public void removeListener(MetricRegistryListener listener)", "class_method_signature": "MetricRegistry.removeListener(MetricRegistryListener listener)", "testcase": false, "constructor": false}, {"identifier": "getNames", "parameters": "()", "modifiers": "public", "return": "SortedSet<String>", "signature": "SortedSet<String> getNames()", "full_signature": "public SortedSet<String> getNames()", "class_method_signature": "MetricRegistry.getNames()", "testcase": false, "constructor": false}, {"identifier": "getGauges", "parameters": "()", "modifiers": "@SuppressWarnings(\"rawtypes\") public", "return": "SortedMap<String, Gauge>", "signature": "SortedMap<String, Gauge> getGauges()", "full_signature": "@SuppressWarnings(\"rawtypes\") public SortedMap<String, Gauge> getGauges()", "class_method_signature": "MetricRegistry.getGauges()", "testcase": false, "constructor": false}, {"identifier": "getGauges", "parameters": "(MetricFilter filter)", "modifiers": "@SuppressWarnings(\"rawtypes\") public", "return": "SortedMap<String, Gauge>", "signature": "SortedMap<String, Gauge> getGauges(MetricFilter filter)", "full_signature": "@SuppressWarnings(\"rawtypes\") public SortedMap<String, Gauge> getGauges(MetricFilter filter)", "class_method_signature": "MetricRegistry.getGauges(MetricFilter filter)", "testcase": false, "constructor": false}, {"identifier": "getCounters", "parameters": "()", "modifiers": "public", "return": "SortedMap<String, Counter>", "signature": "SortedMap<String, Counter> getCounters()", "full_signature": "public SortedMap<String, Counter> getCounters()", "class_method_signature": "MetricRegistry.getCounters()", "testcase": false, "constructor": false}, {"identifier": "getCounters", "parameters": "(MetricFilter filter)", "modifiers": "public", "return": "SortedMap<String, Counter>", "signature": "SortedMap<String, Counter> getCounters(MetricFilter filter)", "full_signature": "public SortedMap<String, Counter> getCounters(MetricFilter filter)", "class_method_signature": "MetricRegistry.getCounters(MetricFilter filter)", "testcase": false, "constructor": false}, {"identifier": "getHistograms", "parameters": "()", "modifiers": "public", "return": "SortedMap<String, Histogram>", "signature": "SortedMap<String, Histogram> getHistograms()", "full_signature": "public SortedMap<String, Histogram> getHistograms()", "class_method_signature": "MetricRegistry.getHistograms()", "testcase": false, "constructor": false}, {"identifier": "getHistograms", "parameters": "(MetricFilter filter)", "modifiers": "public", "return": "SortedMap<String, Histogram>", "signature": "SortedMap<String, Histogram> getHistograms(MetricFilter filter)", "full_signature": "public SortedMap<String, Histogram> getHistograms(MetricFilter filter)", "class_method_signature": "MetricRegistry.getHistograms(MetricFilter filter)", "testcase": false, "constructor": false}, {"identifier": "getMeters", "parameters": "()", "modifiers": "public", "return": "SortedMap<String, Meter>", "signature": "SortedMap<String, Meter> getMeters()", "full_signature": "public SortedMap<String, Meter> getMeters()", "class_method_signature": "MetricRegistry.getMeters()", "testcase": false, "constructor": false}, {"identifier": "getMeters", "parameters": "(MetricFilter filter)", "modifiers": "public", "return": "SortedMap<String, Meter>", "signature": "SortedMap<String, Meter> getMeters(MetricFilter filter)", "full_signature": "public SortedMap<String, Meter> getMeters(MetricFilter filter)", "class_method_signature": "MetricRegistry.getMeters(MetricFilter filter)", "testcase": false, "constructor": false}, {"identifier": "getTimers", "parameters": "()", "modifiers": "public", "return": "SortedMap<String, Timer>", "signature": "SortedMap<String, Timer> getTimers()", "full_signature": "public SortedMap<String, Timer> getTimers()", "class_method_signature": "MetricRegistry.getTimers()", "testcase": false, "constructor": false}, {"identifier": "getTimers", "parameters": "(MetricFilter filter)", "modifiers": "public", "return": "SortedMap<String, Timer>", "signature": "SortedMap<String, Timer> getTimers(MetricFilter filter)", "full_signature": "public SortedMap<String, Timer> getTimers(MetricFilter filter)", "class_method_signature": "MetricRegistry.getTimers(MetricFilter filter)", "testcase": false, "constructor": false}, {"identifier": "getOrAdd", "parameters": "(String name, MetricBuilder<T> builder)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "T", "signature": "T getOrAdd(String name, MetricBuilder<T> builder)", "full_signature": "@SuppressWarnings(\"unchecked\") private T getOrAdd(String name, MetricBuilder<T> builder)", "class_method_signature": "MetricRegistry.getOrAdd(String name, MetricBuilder<T> builder)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "(Class<T> klass, MetricFilter filter)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "SortedMap<String, T>", "signature": "SortedMap<String, T> getMetrics(Class<T> klass, MetricFilter filter)", "full_signature": "@SuppressWarnings(\"unchecked\") private SortedMap<String, T> getMetrics(Class<T> klass, MetricFilter filter)", "class_method_signature": "MetricRegistry.getMetrics(Class<T> klass, MetricFilter filter)", "testcase": false, "constructor": false}, {"identifier": "onMetricAdded", "parameters": "(String name, Metric metric)", "modifiers": "private", "return": "void", "signature": "void onMetricAdded(String name, Metric metric)", "full_signature": "private void onMetricAdded(String name, Metric metric)", "class_method_signature": "MetricRegistry.onMetricAdded(String name, Metric metric)", "testcase": false, "constructor": false}, {"identifier": "notifyListenerOfAddedMetric", "parameters": "(MetricRegistryListener listener, Metric metric, String name)", "modifiers": "private", "return": "void", "signature": "void notifyListenerOfAddedMetric(MetricRegistryListener listener, Metric metric, String name)", "full_signature": "private void notifyListenerOfAddedMetric(MetricRegistryListener listener, Metric metric, String name)", "class_method_signature": "MetricRegistry.notifyListenerOfAddedMetric(MetricRegistryListener listener, Metric metric, String name)", "testcase": false, "constructor": false}, {"identifier": "onMetricRemoved", "parameters": "(String name, Metric metric)", "modifiers": "private", "return": "void", "signature": "void onMetricRemoved(String name, Metric metric)", "full_signature": "private void onMetricRemoved(String name, Metric metric)", "class_method_signature": "MetricRegistry.onMetricRemoved(String name, Metric metric)", "testcase": false, "constructor": false}, {"identifier": "notifyListenerOfRemovedMetric", "parameters": "(String name, Metric metric, MetricRegistryListener listener)", "modifiers": "private", "return": "void", "signature": "void notifyListenerOfRemovedMetric(String name, Metric metric, MetricRegistryListener listener)", "full_signature": "private void notifyListenerOfRemovedMetric(String name, Metric metric, MetricRegistryListener listener)", "class_method_signature": "MetricRegistry.notifyListenerOfRemovedMetric(String name, Metric metric, MetricRegistryListener listener)", "testcase": false, "constructor": false}, {"identifier": "registerAll", "parameters": "(String prefix, MetricSet metrics)", "modifiers": "public", "return": "void", "signature": "void registerAll(String prefix, MetricSet metrics)", "full_signature": "public void registerAll(String prefix, MetricSet metrics)", "class_method_signature": "MetricRegistry.registerAll(String prefix, MetricSet metrics)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Metric>", "signature": "Map<String, Metric> getMetrics()", "full_signature": "@Override public Map<String, Metric> getMetrics()", "class_method_signature": "MetricRegistry.getMetrics()", "testcase": false, "constructor": false}], "file": "metrics-core/src/main/java/com/codahale/metrics/MetricRegistry.java"}, "focal_method": {"identifier": "name", "parameters": "(String name, String... names)", "modifiers": "public static", "return": "String", "body": "public static String name(String name, String... names) {\n        final StringBuilder builder = new StringBuilder();\n        append(builder, name);\n        if (names != null) {\n            for (String s : names) {\n                append(builder, s);\n            }\n        }\n        return builder.toString();\n    }", "signature": "String name(String name, String... names)", "full_signature": "public static String name(String name, String... names)", "class_method_signature": "MetricRegistry.name(String name, String... names)", "testcase": false, "constructor": false, "invocations": ["append", "append", "toString"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}