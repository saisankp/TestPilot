{"test_class": {"identifier": "GeonamesGeocoderServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate GeonamesGeocoderService geocoder;", "modifier": "@Autowired\n\tprivate", "type": "GeonamesGeocoderService", "declarator": "geocoder", "var_name": "geocoder"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}], "file": "plugin/geocoder/geocoder/src/test/java/org/geomajas/plugin/geocoder/service/GeonamesGeocoderServiceTest.java"}, "test_case": {"identifier": "testGeocoder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGeocoder() {\n\t\tList<String> list = new ArrayList<String>();\n\t\tGetLocationResult[] result;\n\n\t\tlist.clear();\n\t\tlist.add(\"booischot\");\n\t\tresult = geocoder.getLocation(list, 500, null);\n\t\tAssert.assertNotNull(\"Geonames may be down\", result);\n\t\tAssert.assertEquals(1,result.length);\n\t\tAssert.assertNotNull(result[0].getCoordinate());\n\t\tAssert.assertEquals(4.7751, result[0].getCoordinate().x, .00001);\n\t\tAssert.assertEquals(51.05219, result[0].getCoordinate().y, .00001);\n\n\t\tlist.clear();\n\t\tlist.add(\"london\");\n\t\tresult = geocoder.getLocation(list, 500, null);\t\t\n\t\tAssert.assertNotNull(\"Geonames may be down\", result);\n\t\tint londonWorldCount = result.length;\n\t\tAssert.assertTrue(londonWorldCount > 1);\n\n\t\tlist.clear();\n\t\tlist.add(\"london\");\n\t\tlist.add(\"UK\");\n\t\tresult = geocoder.getLocation(list, 500, null);\n\t\tAssert.assertNotNull(\"Geonames may be down\", result);\n\t\tAssert.assertTrue(result.length > 1);\n\t\tAssert.assertTrue(result.length < londonWorldCount);\n\n\t\tlist.clear();\n\t\tlist.add(\"blablabla\");\n\t\tresult = geocoder.getLocation(list, 500, null);\n\t\tAssert.assertNotNull(\"Geonames may be down\", result);\n\t\tAssert.assertTrue(0 == result.length);\n\t}", "signature": "void testGeocoder()", "full_signature": "@Test public void testGeocoder()", "class_method_signature": "GeonamesGeocoderServiceTest.testGeocoder()", "testcase": true, "constructor": false, "invocations": ["clear", "add", "getLocation", "assertNotNull", "assertEquals", "assertNotNull", "getCoordinate", "assertEquals", "getCoordinate", "assertEquals", "getCoordinate", "clear", "add", "getLocation", "assertNotNull", "assertTrue", "clear", "add", "add", "getLocation", "assertNotNull", "assertTrue", "assertTrue", "clear", "add", "getLocation", "assertNotNull", "assertTrue"]}, "focal_class": {"identifier": "GeonamesGeocoderService", "superclass": "", "interfaces": "implements GeocoderService", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(GeonamesGeocoderService.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GeonamesGeocoderService.class)", "var_name": "log"}, {"original_string": "private static final double DELTA = 1e-20;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 1e-20", "var_name": "DELTA"}, {"original_string": "private static final String USER_AGENT = \"Geomajas GeoNames geocoder service\";", "modifier": "private static final", "type": "String", "declarator": "USER_AGENT = \"Geomajas GeoNames geocoder service\"", "var_name": "USER_AGENT"}, {"original_string": "private static final double FUZZY_VALUE = 0.8;", "modifier": "private static final", "type": "double", "declarator": "FUZZY_VALUE = 0.8", "var_name": "FUZZY_VALUE"}, {"original_string": "private static final int READ_TIMEOUT = 120000;", "modifier": "private static final", "type": "int", "declarator": "READ_TIMEOUT = 120000", "var_name": "READ_TIMEOUT"}, {"original_string": "private static final int CONNECT_TIMEOUT = 10000;", "modifier": "private static final", "type": "int", "declarator": "CONNECT_TIMEOUT = 10000", "var_name": "CONNECT_TIMEOUT"}, {"original_string": "private static final String URL_BASE = \"http://ws.geonames.org/search?\";", "modifier": "private static final", "type": "String", "declarator": "URL_BASE = \"http://ws.geonames.org/search?\"", "var_name": "URL_BASE"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate SplitCommaReverseService splitCommaReverseService;", "modifier": "@Autowired\n\tprivate", "type": "SplitCommaReverseService", "declarator": "splitCommaReverseService", "var_name": "splitCommaReverseService"}, {"original_string": "private CoordinateReferenceSystem crs;", "modifier": "private", "type": "CoordinateReferenceSystem", "declarator": "crs", "var_name": "crs"}, {"original_string": "private String name = \"GeoNames\";", "modifier": "private", "type": "String", "declarator": "name = \"GeoNames\"", "var_name": "name"}, {"original_string": "private String userName;", "modifier": "private", "type": "String", "declarator": "userName", "var_name": "userName"}, {"original_string": "private String userNameProperty;", "modifier": "private", "type": "String", "declarator": "userNameProperty", "var_name": "userNameProperty"}], "methods": [{"identifier": "initCrs", "parameters": "()", "modifiers": "@PostConstruct protected", "return": "void", "signature": "void initCrs()", "full_signature": "@PostConstruct protected void initCrs()", "class_method_signature": "GeonamesGeocoderService.initCrs()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "GeonamesGeocoderService.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "@Api public", "return": "void", "signature": "void setName(String name)", "full_signature": "@Api public void setName(String name)", "class_method_signature": "GeonamesGeocoderService.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "setUserName", "parameters": "(String userName)", "modifiers": "@Api public", "return": "void", "signature": "void setUserName(String userName)", "full_signature": "@Api public void setUserName(String userName)", "class_method_signature": "GeonamesGeocoderService.setUserName(String userName)", "testcase": false, "constructor": false}, {"identifier": "setUserNameProperty", "parameters": "(String userNameProperty)", "modifiers": "@Api public", "return": "void", "signature": "void setUserNameProperty(String userNameProperty)", "full_signature": "@Api public void setUserNameProperty(String userNameProperty)", "class_method_signature": "GeonamesGeocoderService.setUserNameProperty(String userNameProperty)", "testcase": false, "constructor": false}, {"identifier": "getCrs", "parameters": "()", "modifiers": "public", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCrs()", "full_signature": "public CoordinateReferenceSystem getCrs()", "class_method_signature": "GeonamesGeocoderService.getCrs()", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "(List<String> location, int maxAlternatives, Locale ignore)", "modifiers": "public", "return": "GetLocationResult[]", "signature": "GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale ignore)", "full_signature": "public GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale ignore)", "class_method_signature": "GeonamesGeocoderService.getLocation(List<String> location, int maxAlternatives, Locale ignore)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicates", "parameters": "(List<Toponym> toponyms)", "modifiers": "private", "return": "void", "signature": "void removeDuplicates(List<Toponym> toponyms)", "full_signature": "private void removeDuplicates(List<Toponym> toponyms)", "class_method_signature": "GeonamesGeocoderService.removeDuplicates(List<Toponym> toponyms)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(String q, int maxRows, boolean fuzzy)", "modifiers": "public", "return": "List<Toponym>", "signature": "List<Toponym> search(String q, int maxRows, boolean fuzzy)", "full_signature": "public List<Toponym> search(String q, int maxRows, boolean fuzzy)", "class_method_signature": "GeonamesGeocoderService.search(String q, int maxRows, boolean fuzzy)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(String url)", "modifiers": "private", "return": "InputStream", "signature": "InputStream connect(String url)", "full_signature": "private InputStream connect(String url)", "class_method_signature": "GeonamesGeocoderService.connect(String url)", "testcase": false, "constructor": false}, {"identifier": "getToponymFromElement", "parameters": "(Element toponymElement)", "modifiers": "private", "return": "Toponym", "signature": "Toponym getToponymFromElement(Element toponymElement)", "full_signature": "private Toponym getToponymFromElement(Element toponymElement)", "class_method_signature": "GeonamesGeocoderService.getToponymFromElement(Element toponymElement)", "testcase": false, "constructor": false}], "file": "plugin/geocoder/geocoder/src/main/java/org/geomajas/plugin/geocoder/service/GeonamesGeocoderService.java"}, "focal_method": {"identifier": "getLocation", "parameters": "(List<String> location, int maxAlternatives, Locale ignore)", "modifiers": "public", "return": "GetLocationResult[]", "body": "public GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale ignore) {\n\t\tGetLocationResult[] result;\n\t\ttry {\n\t\t\t/* code for using the geonames library, does not support fuzzy or isNameRequired\n\t\t\tToponymSearchCriteria criteria = new ToponymSearchCriteria();\n\t\t\tcriteria.setQ(splitCommaReverseService.combine(location));\n\t\t\tcriteria.setMaxRows(MAX_ROWS + 1);\n\t\t\t//criteria.setNameRequired(true);\n\t\t\t//criteria.setFuzzy(FUZZY_VALUE);\n\t\t\tGetLocationResult result = null;\n\t\t\tList<Toponym> toponyms = search(splitCommaReverseService.combine(location), MAX_ROWS + 1, false);\n\t\t\tList<Toponym> toponyms = tsr.getToponyms();\n\t\t\t*/\n\t\t\tList<Toponym> toponyms = search(splitCommaReverseService.combine(location), maxAlternatives, false);\n\t\t\tint resCount = toponyms.size();\n\t\t\t/*\n\t\t\t- original plan was to search one more than maximum and don't return results is too many as too ambiguous\n\t\t\t- but that doesn't work from straightforward queries like \"london\"\n\t\t\tif (resCount > MAX_ROWS) {\n\t\t\t\t// too many results, treat as not found\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t*/\n\n\t\t\tif (0 == resCount) {\n\t\t\t\t// try fuzzy search when no results\n\t\t\t\ttoponyms = search(splitCommaReverseService.combine(location), maxAlternatives, true);\n\t\t\t}\n\n\t\t\t// remove duplicates from the results (eg because featureClass is different)\n\t\t\tremoveDuplicates(toponyms);\n\t\t\tresCount = toponyms.size();\n\n\t\t\tresult = new GetLocationResult[resCount];\n\t\t\tfor (int i = 0; i < resCount; i++) {\n\t\t\t\tToponym toponym = toponyms.get(i);\n\t\t\t\tGetLocationResult one = new GetLocationResult();\n\t\t\t\tList<String> prefResult = new ArrayList<String>();\n\t\t\t\tprefResult.add(toponym.getCountryCode());\n\t\t\t\tprefResult.add(toponym.getName());\n\t\t\t\tone.setCanonicalStrings(prefResult);\n\t\t\t\tCoordinate coordinate = new Coordinate();\n\t\t\t\tcoordinate.x = toponym.getLongitude();\n\t\t\t\tcoordinate.y = toponym.getLatitude();\n\t\t\t\tone.setCoordinate(coordinate);\n\t\t\t\tresult[i] = one;\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (Exception ex) { // NOSONAR\n\t\t\tlog.error(\"Search failed\", ex);\n\t\t\treturn null;\n\t\t}\n\t}", "signature": "GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale ignore)", "full_signature": "public GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale ignore)", "class_method_signature": "GeonamesGeocoderService.getLocation(List<String> location, int maxAlternatives, Locale ignore)", "testcase": false, "constructor": false, "invocations": ["search", "combine", "size", "search", "combine", "removeDuplicates", "size", "get", "add", "getCountryCode", "add", "getName", "setCanonicalStrings", "getLongitude", "getLatitude", "setCoordinate", "error"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}