{"test_class": {"identifier": "PerMessageDeflateExtensionTest", "superclass": "extends AbstractExtensionTest", "interfaces": "", "fields": [], "file": "firefly-net/src/test/java/com/fireflysource/net/websocket/common/extension/compress/PerMessageDeflateExtensionTest.java"}, "test_case": {"identifier": "testOutgoingPing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOutgoingPing() throws IOException {\n        PerMessageDeflateExtension ext = new PerMessageDeflateExtension();\n        ext.setPolicy(WebSocketPolicy.newServerPolicy());\n        ExtensionConfig config = ExtensionConfig.parse(\"permessage-deflate\");\n        ext.setConfig(config);\n\n        // Setup capture of outgoing frames\n        OutgoingFramesCapture capture = new OutgoingFramesCapture();\n\n        // Wire up stack\n        ext.setNextOutgoingFrames(capture);\n\n        String payload = \"Are you there?\";\n        Frame ping = new PingFrame().setPayload(payload);\n\n        ext.outgoingFrame(ping, null);\n\n        capture.assertFrameCount(1);\n        capture.assertHasFrame(OpCode.PING, 1);\n\n        WebSocketFrame actual = capture.getFrames().getFirst();\n\n        assertEquals(OpCode.PING, actual.getOpCode());\n        assertTrue(actual.isFin());\n        assertFalse(actual.isRsv1());\n        assertFalse(actual.isRsv2());\n        assertFalse(actual.isRsv3());\n\n        ByteBuffer expected = BufferUtils.toBuffer(payload, StandardCharsets.UTF_8);\n        assertEquals(expected.remaining(), actual.getPayloadLength());\n        ByteBufferAssert.assertEquals(\"Frame.payload\", expected, actual.getPayload().slice());\n    }", "signature": "void testOutgoingPing()", "full_signature": "@Test public void testOutgoingPing()", "class_method_signature": "PerMessageDeflateExtensionTest.testOutgoingPing()", "testcase": true, "constructor": false, "invocations": ["setPolicy", "newServerPolicy", "parse", "setConfig", "setNextOutgoingFrames", "setPayload", "outgoingFrame", "assertFrameCount", "assertHasFrame", "getFirst", "getFrames", "assertEquals", "getOpCode", "assertTrue", "isFin", "assertFalse", "isRsv1", "assertFalse", "isRsv2", "assertFalse", "isRsv3", "toBuffer", "assertEquals", "remaining", "getPayloadLength", "assertEquals", "slice", "getPayload"]}, "focal_class": {"identifier": "PerMessageDeflateExtension", "superclass": "extends CompressExtension", "interfaces": "", "fields": [{"original_string": "private static LazyLogger LOG = SystemLogger.create(PerMessageDeflateExtension.class);", "modifier": "private static", "type": "LazyLogger", "declarator": "LOG = SystemLogger.create(PerMessageDeflateExtension.class)", "var_name": "LOG"}, {"original_string": "private ExtensionConfig configRequested;", "modifier": "private", "type": "ExtensionConfig", "declarator": "configRequested", "var_name": "configRequested"}, {"original_string": "private ExtensionConfig configNegotiated;", "modifier": "private", "type": "ExtensionConfig", "declarator": "configNegotiated", "var_name": "configNegotiated"}, {"original_string": "private boolean incomingContextTakeover = true;", "modifier": "private", "type": "boolean", "declarator": "incomingContextTakeover = true", "var_name": "incomingContextTakeover"}, {"original_string": "private boolean outgoingContextTakeover = true;", "modifier": "private", "type": "boolean", "declarator": "outgoingContextTakeover = true", "var_name": "outgoingContextTakeover"}, {"original_string": "private boolean incomingCompressed;", "modifier": "private", "type": "boolean", "declarator": "incomingCompressed", "var_name": "incomingCompressed"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "PerMessageDeflateExtension.getName()", "testcase": false, "constructor": false}, {"identifier": "incomingFrame", "parameters": "(Frame frame)", "modifiers": "@Override public", "return": "void", "signature": "void incomingFrame(Frame frame)", "full_signature": "@Override public void incomingFrame(Frame frame)", "class_method_signature": "PerMessageDeflateExtension.incomingFrame(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "nextIncomingFrame", "parameters": "(Frame frame)", "modifiers": "@Override protected", "return": "void", "signature": "void nextIncomingFrame(Frame frame)", "full_signature": "@Override protected void nextIncomingFrame(Frame frame)", "class_method_signature": "PerMessageDeflateExtension.nextIncomingFrame(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "nextOutgoingFrame", "parameters": "(Frame frame, Consumer<Result<Void>> result)", "modifiers": "@Override protected", "return": "void", "signature": "void nextOutgoingFrame(Frame frame, Consumer<Result<Void>> result)", "full_signature": "@Override protected void nextOutgoingFrame(Frame frame, Consumer<Result<Void>> result)", "class_method_signature": "PerMessageDeflateExtension.nextOutgoingFrame(Frame frame, Consumer<Result<Void>> result)", "testcase": false, "constructor": false}, {"identifier": "getRsvUseMode", "parameters": "()", "modifiers": "@Override", "return": "int", "signature": "int getRsvUseMode()", "full_signature": "@Override int getRsvUseMode()", "class_method_signature": "PerMessageDeflateExtension.getRsvUseMode()", "testcase": false, "constructor": false}, {"identifier": "getTailDropMode", "parameters": "()", "modifiers": "@Override", "return": "int", "signature": "int getTailDropMode()", "full_signature": "@Override int getTailDropMode()", "class_method_signature": "PerMessageDeflateExtension.getTailDropMode()", "testcase": false, "constructor": false}, {"identifier": "setConfig", "parameters": "(final ExtensionConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void setConfig(final ExtensionConfig config)", "full_signature": "@Override public void setConfig(final ExtensionConfig config)", "class_method_signature": "PerMessageDeflateExtension.setConfig(final ExtensionConfig config)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PerMessageDeflateExtension.toString()", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/websocket/common/extension/compress/PerMessageDeflateExtension.java"}, "focal_method": {"identifier": "setConfig", "parameters": "(final ExtensionConfig config)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setConfig(final ExtensionConfig config) {\n        configRequested = new ExtensionConfig(config);\n        configNegotiated = new ExtensionConfig(config.getName());\n\n        for (String key : config.getParameterKeys()) {\n            key = key.trim();\n            switch (key) {\n                case \"client_max_window_bits\":\n                case \"server_max_window_bits\": {\n                    // Don't negotiate these parameters\n                    break;\n                }\n                case \"client_no_context_takeover\": {\n                    configNegotiated.setParameter(\"client_no_context_takeover\");\n                    switch (getPolicy().getBehavior()) {\n                        case CLIENT:\n                            incomingContextTakeover = false;\n                            break;\n                        case SERVER:\n                            outgoingContextTakeover = false;\n                            break;\n                    }\n                    break;\n                }\n                case \"server_no_context_takeover\": {\n                    configNegotiated.setParameter(\"server_no_context_takeover\");\n                    switch (getPolicy().getBehavior()) {\n                        case CLIENT:\n                            outgoingContextTakeover = false;\n                            break;\n                        case SERVER:\n                            incomingContextTakeover = false;\n                            break;\n                    }\n                    break;\n                }\n                default: {\n                    throw new IllegalArgumentException();\n                }\n            }\n        }\n\n        LOG.debug(\"config: outgoingContextTakeover={}, incomingContextTakeover={} : {}\", outgoingContextTakeover, incomingContextTakeover, this);\n\n        super.setConfig(configNegotiated);\n    }", "signature": "void setConfig(final ExtensionConfig config)", "full_signature": "@Override public void setConfig(final ExtensionConfig config)", "class_method_signature": "PerMessageDeflateExtension.setConfig(final ExtensionConfig config)", "testcase": false, "constructor": false, "invocations": ["getName", "getParameterKeys", "trim", "setParameter", "getBehavior", "getPolicy", "setParameter", "getBehavior", "getPolicy", "debug", "setConfig"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}