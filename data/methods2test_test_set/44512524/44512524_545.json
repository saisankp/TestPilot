{"test_class": {"identifier": "TestHyperLogLog", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/cardinality/TestHyperLogLog.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge() throws CardinalityMergeException\n    {\n        int numToMerge = 5;\n        int bits = 16;\n        int cardinality = 1000000;\n\n        HyperLogLog[] hyperLogLogs = new HyperLogLog[numToMerge];\n        HyperLogLog baseline = new HyperLogLog(bits);\n        for (int i = 0; i < numToMerge; i++)\n        {\n            hyperLogLogs[i] = new HyperLogLog(bits);\n            for (int j = 0; j < cardinality; j++)\n            {\n                double val = Math.random();\n                hyperLogLogs[i].offer(val);\n                baseline.offer(val);\n            }\n        }\n\n\n        long expectedCardinality = numToMerge * cardinality;\n        HyperLogLog hll = hyperLogLogs[0];\n        hyperLogLogs = Arrays.asList(hyperLogLogs).subList(1, hyperLogLogs.length).toArray(new HyperLogLog[0]);\n        long mergedEstimate = hll.merge(hyperLogLogs).cardinality();\n        long baselineEstimate = baseline.cardinality();\n        double se = expectedCardinality * (1.04 / Math.sqrt(Math.pow(2, bits)));\n\n        System.out.println(\"Baseline estimate: \" + baselineEstimate);\n        System.out.println(\"Expect estimate: \" + mergedEstimate + \" is between \" + (expectedCardinality - (3 * se)) + \" and \" + (expectedCardinality + (3 * se)));\n\n        assertTrue(mergedEstimate >= expectedCardinality - (3 * se));\n        assertTrue(mergedEstimate <= expectedCardinality + (3 * se));\n        assertEquals(mergedEstimate, baselineEstimate);\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "TestHyperLogLog.testMerge()", "testcase": true, "constructor": false, "invocations": ["random", "offer", "offer", "toArray", "subList", "asList", "cardinality", "merge", "cardinality", "sqrt", "pow", "println", "println", "assertTrue", "assertTrue", "assertEquals"]}, "focal_class": {"identifier": "HyperLogLog", "superclass": "", "interfaces": "implements IRichCardinality", "fields": [{"original_string": "private final RegisterSet registerSet;", "modifier": "private final", "type": "RegisterSet", "declarator": "registerSet", "var_name": "registerSet"}, {"original_string": "private final int log2m;", "modifier": "private final", "type": "int", "declarator": "log2m", "var_name": "log2m"}, {"original_string": "private final double alphaMM;", "modifier": "private final", "type": "double", "declarator": "alphaMM", "var_name": "alphaMM"}], "methods": [{"identifier": "HyperLogLog", "parameters": "(double rsd)", "modifiers": "public", "return": "", "signature": " HyperLogLog(double rsd)", "full_signature": "public  HyperLogLog(double rsd)", "class_method_signature": "HyperLogLog.HyperLogLog(double rsd)", "testcase": false, "constructor": true}, {"identifier": "log2m", "parameters": "(double rsd)", "modifiers": "private static", "return": "int", "signature": "int log2m(double rsd)", "full_signature": "private static int log2m(double rsd)", "class_method_signature": "HyperLogLog.log2m(double rsd)", "testcase": false, "constructor": false}, {"identifier": "HyperLogLog", "parameters": "(int log2m)", "modifiers": "public", "return": "", "signature": " HyperLogLog(int log2m)", "full_signature": "public  HyperLogLog(int log2m)", "class_method_signature": "HyperLogLog.HyperLogLog(int log2m)", "testcase": false, "constructor": true}, {"identifier": "HyperLogLog", "parameters": "(int log2m, RegisterSet registerSet)", "modifiers": "public", "return": "", "signature": " HyperLogLog(int log2m, RegisterSet registerSet)", "full_signature": "public  HyperLogLog(int log2m, RegisterSet registerSet)", "class_method_signature": "HyperLogLog.HyperLogLog(int log2m, RegisterSet registerSet)", "testcase": false, "constructor": true}, {"identifier": "offerHashed", "parameters": "(long hashedValue)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offerHashed(long hashedValue)", "full_signature": "@Override public boolean offerHashed(long hashedValue)", "class_method_signature": "HyperLogLog.offerHashed(long hashedValue)", "testcase": false, "constructor": false}, {"identifier": "offerHashed", "parameters": "(int hashedValue)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offerHashed(int hashedValue)", "full_signature": "@Override public boolean offerHashed(int hashedValue)", "class_method_signature": "HyperLogLog.offerHashed(int hashedValue)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offer(Object o)", "full_signature": "@Override public boolean offer(Object o)", "class_method_signature": "HyperLogLog.offer(Object o)", "testcase": false, "constructor": false}, {"identifier": "cardinality", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long cardinality()", "full_signature": "@Override public long cardinality()", "class_method_signature": "HyperLogLog.cardinality()", "testcase": false, "constructor": false}, {"identifier": "sizeof", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int sizeof()", "full_signature": "@Override public int sizeof()", "class_method_signature": "HyperLogLog.sizeof()", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getBytes()", "full_signature": "@Override public byte[] getBytes()", "class_method_signature": "HyperLogLog.getBytes()", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(HyperLogLog other)", "modifiers": "public", "return": "void", "signature": "void addAll(HyperLogLog other)", "full_signature": "public void addAll(HyperLogLog other)", "class_method_signature": "HyperLogLog.addAll(HyperLogLog other)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(IRichCardinality... estimators)", "modifiers": "@Override public", "return": "IRichCardinality", "signature": "IRichCardinality merge(IRichCardinality... estimators)", "full_signature": "@Override public IRichCardinality merge(IRichCardinality... estimators)", "class_method_signature": "HyperLogLog.merge(IRichCardinality... estimators)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/cardinality/HyperLogLog.java"}, "focal_method": {"identifier": "merge", "parameters": "(IRichCardinality... estimators)", "modifiers": "@Override public", "return": "IRichCardinality", "body": "@Override\n    public IRichCardinality merge(IRichCardinality... estimators) throws CardinalityMergeException {\n        HyperLogLog merged = new HyperLogLog(log2m);\n        merged.addAll(this);\n\n        if (estimators == null) {\n            return merged;\n        }\n\n        for (IRichCardinality estimator : estimators) {\n            if (!(estimator instanceof HyperLogLog)) {\n                throw new HyperLogLogMergeException(\"Cannot merge estimators of different class\");\n            }\n            HyperLogLog hll = (HyperLogLog) estimator;\n            merged.addAll(hll);\n        }\n\n        return merged;\n    }", "signature": "IRichCardinality merge(IRichCardinality... estimators)", "full_signature": "@Override public IRichCardinality merge(IRichCardinality... estimators)", "class_method_signature": "HyperLogLog.merge(IRichCardinality... estimators)", "testcase": false, "constructor": false, "invocations": ["addAll", "addAll"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}