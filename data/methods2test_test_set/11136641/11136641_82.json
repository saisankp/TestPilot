{"test_class": {"identifier": "DirContextPoolableObjectFactoryTest", "superclass": "extends AbstractPoolTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/springframework/ldap/pool/factory/DirContextPoolableObjectFactoryTest.java"}, "test_case": {"identifier": "testValidateObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateObject() throws Exception {\n        when(dirContextValidatorMock\n                .validateDirContext(DirContextType.READ_ONLY, dirContextMock))\n                .thenReturn(true);\n\n        final DirContextPoolableObjectFactory objectFactory = new DirContextPoolableObjectFactory();\n        objectFactory.setDirContextValidator(dirContextValidatorMock);\n\n        final boolean valid = objectFactory.validateObject(DirContextType.READ_ONLY, dirContextMock);\n        assertThat(valid).isTrue();\n\n        //Check exception in validator\n        DirContextValidator secondDirContextValidatorMock = mock(DirContextValidator.class);\n\n        when(secondDirContextValidatorMock.validateDirContext(DirContextType.READ_ONLY, dirContextMock))\n                .thenThrow(new RuntimeException(\"Failed to validate\"));\n        objectFactory.setDirContextValidator(secondDirContextValidatorMock);\n\n        final boolean valid2 = objectFactory.validateObject(DirContextType.READ_ONLY, dirContextMock);\n        assertThat(valid2).isFalse();\n    }", "signature": "void testValidateObject()", "full_signature": "@Test public void testValidateObject()", "class_method_signature": "DirContextPoolableObjectFactoryTest.testValidateObject()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "validateDirContext", "setDirContextValidator", "validateObject", "isTrue", "assertThat", "mock", "thenThrow", "when", "validateDirContext", "setDirContextValidator", "validateObject", "isFalse", "assertThat"]}, "focal_class": {"identifier": "DirContextPoolableObjectFactory", "superclass": "extends BaseKeyedPoolableObjectFactory", "interfaces": "", "fields": [{"original_string": "protected final Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "private static final Set<Class<? extends Throwable>> DEFAULT_NONTRANSIENT_EXCEPTIONS\n            = new HashSet<Class<? extends Throwable>>(){{\n       add(CommunicationException.class);\n    }};", "modifier": "private static final", "type": "Set<Class<? extends Throwable>>", "declarator": "DEFAULT_NONTRANSIENT_EXCEPTIONS\n            = new HashSet<Class<? extends Throwable>>(){{\n       add(CommunicationException.class);\n    }}", "var_name": "DEFAULT_NONTRANSIENT_EXCEPTIONS"}, {"original_string": "private ContextSource contextSource;", "modifier": "private", "type": "ContextSource", "declarator": "contextSource", "var_name": "contextSource"}, {"original_string": "private DirContextValidator dirContextValidator;", "modifier": "private", "type": "DirContextValidator", "declarator": "dirContextValidator", "var_name": "dirContextValidator"}, {"original_string": "private Set<Class<? extends Throwable>> nonTransientExceptions = DEFAULT_NONTRANSIENT_EXCEPTIONS;", "modifier": "private", "type": "Set<Class<? extends Throwable>>", "declarator": "nonTransientExceptions = DEFAULT_NONTRANSIENT_EXCEPTIONS", "var_name": "nonTransientExceptions"}], "methods": [{"identifier": "setNonTransientExceptions", "parameters": "(Collection<Class<? extends Throwable>> nonTransientExceptions)", "modifiers": "", "return": "void", "signature": "void setNonTransientExceptions(Collection<Class<? extends Throwable>> nonTransientExceptions)", "full_signature": " void setNonTransientExceptions(Collection<Class<? extends Throwable>> nonTransientExceptions)", "class_method_signature": "DirContextPoolableObjectFactory.setNonTransientExceptions(Collection<Class<? extends Throwable>> nonTransientExceptions)", "testcase": false, "constructor": false}, {"identifier": "getContextSource", "parameters": "()", "modifiers": "public", "return": "ContextSource", "signature": "ContextSource getContextSource()", "full_signature": "public ContextSource getContextSource()", "class_method_signature": "DirContextPoolableObjectFactory.getContextSource()", "testcase": false, "constructor": false}, {"identifier": "setContextSource", "parameters": "(ContextSource contextSource)", "modifiers": "public", "return": "void", "signature": "void setContextSource(ContextSource contextSource)", "full_signature": "public void setContextSource(ContextSource contextSource)", "class_method_signature": "DirContextPoolableObjectFactory.setContextSource(ContextSource contextSource)", "testcase": false, "constructor": false}, {"identifier": "getDirContextValidator", "parameters": "()", "modifiers": "public", "return": "DirContextValidator", "signature": "DirContextValidator getDirContextValidator()", "full_signature": "public DirContextValidator getDirContextValidator()", "class_method_signature": "DirContextPoolableObjectFactory.getDirContextValidator()", "testcase": false, "constructor": false}, {"identifier": "setDirContextValidator", "parameters": "(DirContextValidator dirContextValidator)", "modifiers": "public", "return": "void", "signature": "void setDirContextValidator(DirContextValidator dirContextValidator)", "full_signature": "public void setDirContextValidator(DirContextValidator dirContextValidator)", "class_method_signature": "DirContextPoolableObjectFactory.setDirContextValidator(DirContextValidator dirContextValidator)", "testcase": false, "constructor": false}, {"identifier": "makeObject", "parameters": "(Object key)", "modifiers": "public", "return": "Object", "signature": "Object makeObject(Object key)", "full_signature": "public Object makeObject(Object key)", "class_method_signature": "DirContextPoolableObjectFactory.makeObject(Object key)", "testcase": false, "constructor": false}, {"identifier": "makeFailureAwareProxy", "parameters": "(DirContext readOnlyContext)", "modifiers": "private", "return": "Object", "signature": "Object makeFailureAwareProxy(DirContext readOnlyContext)", "full_signature": "private Object makeFailureAwareProxy(DirContext readOnlyContext)", "class_method_signature": "DirContextPoolableObjectFactory.makeFailureAwareProxy(DirContext readOnlyContext)", "testcase": false, "constructor": false}, {"identifier": "validateObject", "parameters": "(Object key, Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean validateObject(Object key, Object obj)", "full_signature": "public boolean validateObject(Object key, Object obj)", "class_method_signature": "DirContextPoolableObjectFactory.validateObject(Object key, Object obj)", "testcase": false, "constructor": false}, {"identifier": "destroyObject", "parameters": "(Object key, Object obj)", "modifiers": "public", "return": "void", "signature": "void destroyObject(Object key, Object obj)", "full_signature": "public void destroyObject(Object key, Object obj)", "class_method_signature": "DirContextPoolableObjectFactory.destroyObject(Object key, Object obj)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/pool/factory/DirContextPoolableObjectFactory.java"}, "focal_method": {"identifier": "validateObject", "parameters": "(Object key, Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean validateObject(Object key, Object obj) {\n        Assert.notNull(this.dirContextValidator,\n                \"DirContextValidator may not be null\");\n        Assert.isTrue(key instanceof DirContextType,\n                \"key must be a DirContextType\");\n        Assert.isTrue(obj instanceof DirContext,\n                \"The Object to validate must be of type '\" + DirContext.class\n                        + \"'\");\n\n        try {\n            final DirContextType contextType = (DirContextType) key;\n            final DirContext dirContext = (DirContext) obj;\n            return this.dirContextValidator.validateDirContext(contextType,\n                    dirContext);\n        } catch (Exception e) {\n            this.logger.warn(\"Failed to validate '\" + obj\n                    + \"' due to an unexpected exception.\", e);\n            return false;\n        }\n    }", "signature": "boolean validateObject(Object key, Object obj)", "full_signature": "public boolean validateObject(Object key, Object obj)", "class_method_signature": "DirContextPoolableObjectFactory.validateObject(Object key, Object obj)", "testcase": false, "constructor": false, "invocations": ["notNull", "isTrue", "isTrue", "validateDirContext", "warn"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}