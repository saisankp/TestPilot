{"test_class": {"identifier": "AccountStateTest", "superclass": "", "interfaces": "", "fields": [], "file": "elrond-core/src/test/java/network/elrond/account/AccountStateTest.java"}, "test_case": {"identifier": "testAccountStateConstructorWithCorrectNonce", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccountStateConstructorWithCorrectNonce() {\n        AccountState accountState = new AccountState(BigInteger.valueOf(1), BigInteger.valueOf(2), AccountAddress.EMPTY_ADDRESS);\n        Assert.assertTrue(accountState.getNonce().longValue() == 1);\n    }", "signature": "void testAccountStateConstructorWithCorrectNonce()", "full_signature": "@Test public void testAccountStateConstructorWithCorrectNonce()", "class_method_signature": "AccountStateTest.testAccountStateConstructorWithCorrectNonce()", "testcase": true, "constructor": false, "invocations": ["valueOf", "valueOf", "assertTrue", "longValue", "getNonce"]}, "focal_class": {"identifier": "AccountState", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(AccountState.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(AccountState.class)", "var_name": "logger"}, {"original_string": "private BigInteger nonce;", "modifier": "private", "type": "BigInteger", "declarator": "nonce", "var_name": "nonce"}, {"original_string": "private BigInteger balance;", "modifier": "private", "type": "BigInteger", "declarator": "balance", "var_name": "balance"}, {"original_string": "private final AccountAddress address;", "modifier": "private final", "type": "AccountAddress", "declarator": "address", "var_name": "address"}], "methods": [{"identifier": "AccountState", "parameters": "(AccountAddress address)", "modifiers": "public", "return": "", "signature": " AccountState(AccountAddress address)", "full_signature": "public  AccountState(AccountAddress address)", "class_method_signature": "AccountState.AccountState(AccountAddress address)", "testcase": false, "constructor": true}, {"identifier": "AccountState", "parameters": "(BigInteger nonce, BigInteger balance, AccountAddress address)", "modifiers": "public", "return": "", "signature": " AccountState(BigInteger nonce, BigInteger balance, AccountAddress address)", "full_signature": "public  AccountState(BigInteger nonce, BigInteger balance, AccountAddress address)", "class_method_signature": "AccountState.AccountState(BigInteger nonce, BigInteger balance, AccountAddress address)", "testcase": false, "constructor": true}, {"identifier": "AccountState", "parameters": "(AccountState source)", "modifiers": "public", "return": "", "signature": " AccountState(AccountState source)", "full_signature": "public  AccountState(AccountState source)", "class_method_signature": "AccountState.AccountState(AccountState source)", "testcase": false, "constructor": true}, {"identifier": "getNonce", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getNonce()", "full_signature": "public BigInteger getNonce()", "class_method_signature": "AccountState.getNonce()", "testcase": false, "constructor": false}, {"identifier": "setNonce", "parameters": "(BigInteger nonce)", "modifiers": "public", "return": "void", "signature": "void setNonce(BigInteger nonce)", "full_signature": "public void setNonce(BigInteger nonce)", "class_method_signature": "AccountState.setNonce(BigInteger nonce)", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getBalance()", "full_signature": "public BigInteger getBalance()", "class_method_signature": "AccountState.getBalance()", "testcase": false, "constructor": false}, {"identifier": "setBalance", "parameters": "(BigInteger balance)", "modifiers": "public", "return": "void", "signature": "void setBalance(BigInteger balance)", "full_signature": "public void setBalance(BigInteger balance)", "class_method_signature": "AccountState.setBalance(BigInteger balance)", "testcase": false, "constructor": false}, {"identifier": "addToBalance", "parameters": "(BigInteger value)", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger addToBalance(BigInteger value)", "full_signature": "public BigInteger addToBalance(BigInteger value)", "class_method_signature": "AccountState.addToBalance(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "()", "modifiers": "public", "return": "AccountAddress", "signature": "AccountAddress getAddress()", "full_signature": "public AccountAddress getAddress()", "class_method_signature": "AccountState.getAddress()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AccountState.toString()", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/account/AccountState.java"}, "focal_method": {"identifier": "getNonce", "parameters": "()", "modifiers": "public", "return": "BigInteger", "body": "public BigInteger getNonce() {\n        return nonce;\n    }", "signature": "BigInteger getNonce()", "full_signature": "public BigInteger getNonce()", "class_method_signature": "AccountState.getNonce()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}