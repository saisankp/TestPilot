{"test_class": {"identifier": "FilteringStateChangeListenableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final TestState state1 = new TestState(Id.create(1), true, 999);", "modifier": "private static final", "type": "TestState", "declarator": "state1 = new TestState(Id.create(1), true, 999)", "var_name": "state1"}, {"original_string": "private static final TestState extended1 = new ExtendedTestState(Id.create(2), false, 1);", "modifier": "private static final", "type": "TestState", "declarator": "extended1 = new ExtendedTestState(Id.create(2), false, 1)", "var_name": "extended1"}, {"original_string": "private static final TestState state1Updated = new TestState(state1.getId(), false, 999);", "modifier": "private static final", "type": "TestState", "declarator": "state1Updated = new TestState(state1.getId(), false, 999)", "var_name": "state1Updated"}, {"original_string": "private static final TestState extended1Updated = new ExtendedTestState(extended1.getId(), true, 1);", "modifier": "private static final", "type": "TestState", "declarator": "extended1Updated = new ExtendedTestState(extended1.getId(), true, 1)", "var_name": "extended1Updated"}, {"original_string": "private static final TestState state2 = new TestState(Id.create(10), true, 100);", "modifier": "private static final", "type": "TestState", "declarator": "state2 = new TestState(Id.create(10), true, 100)", "var_name": "state2"}, {"original_string": "private static final TestState extended2 = new ExtendedTestState(Id.create(20), false, 200);", "modifier": "private static final", "type": "TestState", "declarator": "extended2 = new ExtendedTestState(Id.create(20), false, 200)", "var_name": "extended2"}, {"original_string": "private IndexedImmutableObjectCache<TestState, TestState> cache;", "modifier": "private", "type": "IndexedImmutableObjectCache<TestState, TestState>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private boolean result;", "modifier": "private", "type": "boolean", "declarator": "result", "var_name": "result"}, {"original_string": "private TestState resultOld;", "modifier": "private", "type": "TestState", "declarator": "resultOld", "var_name": "resultOld"}, {"original_string": "private TestState resultUpdated;", "modifier": "private", "type": "TestState", "declarator": "resultUpdated", "var_name": "resultUpdated"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/indexedcache/FilteringStateChangeListenableTest.java"}, "test_case": {"identifier": "whenOnlyListeningForExtendedStates_thenStreamOnlyReturnsThemInOrder", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void whenOnlyListeningForExtendedStates_thenStreamOnlyReturnsThemInOrder() {\n        cache.add(state1);\n        cache.add(extended1);\n        cache.add(state2);\n        cache.add(extended2);\n        ImmutableList<ExtendedTestState> states = (new FilteringStateChangeListenable<>(cache, this::asExtended)).stream().collect(ImmutableList.toImmutableList());\n        assertEquals(2, states.size());\n        assertEquals(extended1, states.get(0));\n        assertEquals(extended2, states.get(1));\n    }", "signature": "void whenOnlyListeningForExtendedStates_thenStreamOnlyReturnsThemInOrder()", "full_signature": "@Test void whenOnlyListeningForExtendedStates_thenStreamOnlyReturnsThemInOrder()", "class_method_signature": "FilteringStateChangeListenableTest.whenOnlyListeningForExtendedStates_thenStreamOnlyReturnsThemInOrder()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "collect", "stream", "toImmutableList", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "FilteringStateChangeListenable", "superclass": "", "interfaces": "implements StateChangeListenable<C>", "fields": [{"original_string": "private final StateChangeListenable<T> backingListenable;", "modifier": "private final", "type": "StateChangeListenable<T>", "declarator": "backingListenable", "var_name": "backingListenable"}, {"original_string": "private final Function<? super T, C> mapAndFilter;", "modifier": "private final", "type": "Function<? super T, C>", "declarator": "mapAndFilter", "var_name": "mapAndFilter"}], "methods": [{"identifier": "FilteringStateChangeListenable", "parameters": "(StateChangeListenable<T> backingListenable, Function<? super T, C> mapAndFilter)", "modifiers": "public", "return": "", "signature": " FilteringStateChangeListenable(StateChangeListenable<T> backingListenable, Function<? super T, C> mapAndFilter)", "full_signature": "public  FilteringStateChangeListenable(StateChangeListenable<T> backingListenable, Function<? super T, C> mapAndFilter)", "class_method_signature": "FilteringStateChangeListenable.FilteringStateChangeListenable(StateChangeListenable<T> backingListenable, Function<? super T, C> mapAndFilter)", "testcase": false, "constructor": true}, {"identifier": "registerCustomIndex", "parameters": "(T index)", "modifiers": "@Override public", "return": "T", "signature": "T registerCustomIndex(T index)", "full_signature": "@Override public T registerCustomIndex(T index)", "class_method_signature": "FilteringStateChangeListenable.registerCustomIndex(T index)", "testcase": false, "constructor": false}, {"identifier": "registerStateAddedOrRemovedListener", "parameters": "(Consumer<? super C> consumer)", "modifiers": "@Override public", "return": "void", "signature": "void registerStateAddedOrRemovedListener(Consumer<? super C> consumer)", "full_signature": "@Override public void registerStateAddedOrRemovedListener(Consumer<? super C> consumer)", "class_method_signature": "FilteringStateChangeListenable.registerStateAddedOrRemovedListener(Consumer<? super C> consumer)", "testcase": false, "constructor": false}, {"identifier": "registerStateChangeListener", "parameters": "(CacheStateChangeListener<? super C> listener)", "modifiers": "@Override public", "return": "void", "signature": "void registerStateChangeListener(CacheStateChangeListener<? super C> listener)", "full_signature": "@Override public void registerStateChangeListener(CacheStateChangeListener<? super C> listener)", "class_method_signature": "FilteringStateChangeListenable.registerStateChangeListener(CacheStateChangeListener<? super C> listener)", "testcase": false, "constructor": false}, {"identifier": "registerStateAddedListener", "parameters": "(CacheStateAddedListener<? super C> listener)", "modifiers": "@Override public", "return": "void", "signature": "void registerStateAddedListener(CacheStateAddedListener<? super C> listener)", "full_signature": "@Override public void registerStateAddedListener(CacheStateAddedListener<? super C> listener)", "class_method_signature": "FilteringStateChangeListenable.registerStateAddedListener(CacheStateAddedListener<? super C> listener)", "testcase": false, "constructor": false}, {"identifier": "registerStateRemovedListener", "parameters": "(CacheStateRemovedListener<? super C> listener)", "modifiers": "@Override public", "return": "void", "signature": "void registerStateRemovedListener(CacheStateRemovedListener<? super C> listener)", "full_signature": "@Override public void registerStateRemovedListener(CacheStateRemovedListener<? super C> listener)", "class_method_signature": "FilteringStateChangeListenable.registerStateRemovedListener(CacheStateRemovedListener<? super C> listener)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<C>", "signature": "Stream<C> stream()", "full_signature": "@Override public Stream<C> stream()", "class_method_signature": "FilteringStateChangeListenable.stream()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "UnmodifiableIterator<C>", "signature": "UnmodifiableIterator<C> iterator()", "full_signature": "@Override public UnmodifiableIterator<C> iterator()", "class_method_signature": "FilteringStateChangeListenable.iterator()", "testcase": false, "constructor": false}, {"identifier": "registerAtomicStateChangeListener", "parameters": "(AtomicStateChangeListener<? super C> listener)", "modifiers": "@Override public", "return": "void", "signature": "void registerAtomicStateChangeListener(AtomicStateChangeListener<? super C> listener)", "full_signature": "@Override public void registerAtomicStateChangeListener(AtomicStateChangeListener<? super C> listener)", "class_method_signature": "FilteringStateChangeListenable.registerAtomicStateChangeListener(AtomicStateChangeListener<? super C> listener)", "testcase": false, "constructor": false}, {"identifier": "removeStateChangeListener", "parameters": "(CacheStateChangeListener<? super C> listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeStateChangeListener(CacheStateChangeListener<? super C> listener)", "full_signature": "@Override public void removeStateChangeListener(CacheStateChangeListener<? super C> listener)", "class_method_signature": "FilteringStateChangeListenable.removeStateChangeListener(CacheStateChangeListener<? super C> listener)", "testcase": false, "constructor": false}, {"identifier": "wrapChange", "parameters": "(Change<T> change)", "modifiers": "private @CheckForNull", "return": "Change<C>", "signature": "Change<C> wrapChange(Change<T> change)", "full_signature": "private @CheckForNull Change<C> wrapChange(Change<T> change)", "class_method_signature": "FilteringStateChangeListenable.wrapChange(Change<T> change)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/indexedcache/FilteringStateChangeListenable.java"}, "focal_method": {"identifier": "stream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<C>", "body": "@Override\n    public Stream<C> stream() {\n        return backingListenable.stream().map(mapAndFilter).filter(Objects::nonNull);\n    }", "signature": "Stream<C> stream()", "full_signature": "@Override public Stream<C> stream()", "class_method_signature": "FilteringStateChangeListenable.stream()", "testcase": false, "constructor": false, "invocations": ["filter", "map", "stream"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}