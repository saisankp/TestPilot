{"test_class": {"identifier": "AutomationClientAuthFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "private static final Principal principal = SimplePrincipal.of(\"CN=principal,OU=blah\");", "modifier": "private static final", "type": "Principal", "declarator": "principal = SimplePrincipal.of(\"CN=principal,OU=blah\")", "var_name": "principal"}, {"original_string": "private static final Client client =\n      new Client(0, \"principal\", null, null, null, null, null, null, null, null, true, true);", "modifier": "private static final", "type": "Client", "declarator": "client =\n      new Client(0, \"principal\", null, null, null, null, null, null, null, null, true, true)", "var_name": "client"}, {"original_string": "private static final AutomationClient automationClient = AutomationClient.of(client);", "modifier": "private static final", "type": "AutomationClient", "declarator": "automationClient = AutomationClient.of(client)", "var_name": "automationClient"}, {"original_string": "private static final int xfccDisallowedPort = 4445;", "modifier": "private static final", "type": "int", "declarator": "xfccDisallowedPort = 4445", "var_name": "xfccDisallowedPort"}, {"original_string": "@Mock ClientAuthTypeConfig clientAuthTypeConfig;", "modifier": "@Mock", "type": "ClientAuthTypeConfig", "declarator": "clientAuthTypeConfig", "var_name": "clientAuthTypeConfig"}, {"original_string": "@Mock ClientAuthConfig clientAuthConfig;", "modifier": "@Mock", "type": "ClientAuthConfig", "declarator": "clientAuthConfig", "var_name": "clientAuthConfig"}, {"original_string": "@Mock ContainerRequest request;", "modifier": "@Mock", "type": "ContainerRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock HttpServletRequest httpServletRequest;", "modifier": "@Mock", "type": "HttpServletRequest", "declarator": "httpServletRequest", "var_name": "httpServletRequest"}, {"original_string": "@Mock SecurityContext securityContext;", "modifier": "@Mock", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}, {"original_string": "@Mock ClientDAO clientDAO;", "modifier": "@Mock", "type": "ClientDAO", "declarator": "clientDAO", "var_name": "clientDAO"}, {"original_string": "AutomationClientAuthFactory factory;", "modifier": "", "type": "AutomationClientAuthFactory", "declarator": "factory", "var_name": "factory"}], "file": "server/src/test/java/keywhiz/service/providers/AutomationClientAuthFactoryTest.java"}, "test_case": {"identifier": "automationClientRejectsClientsWithoutAutomation", "parameters": "()", "modifiers": "@Test(expected = ForbiddenException.class) public", "return": "void", "body": "@Test(expected = ForbiddenException.class)\n  public void automationClientRejectsClientsWithoutAutomation() {\n    Client clientWithoutAutomation =\n        new Client(3423, \"clientWithoutAutomation\", null, null, null, null, null, null, null, null,\n            true, false\n        );\n\n    when(securityContext.getUserPrincipal()).thenReturn(\n        SimplePrincipal.of(\"CN=clientWithoutAutomation\"));\n    when(clientDAO.getClientByName(\"clientWithoutAutomation\"))\n        .thenReturn(Optional.of(clientWithoutAutomation));\n\n    factory.provide(request, httpServletRequest);\n  }", "signature": "void automationClientRejectsClientsWithoutAutomation()", "full_signature": "@Test(expected = ForbiddenException.class) public void automationClientRejectsClientsWithoutAutomation()", "class_method_signature": "AutomationClientAuthFactoryTest.automationClientRejectsClientsWithoutAutomation()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getUserPrincipal", "of", "thenReturn", "when", "getClientByName", "of", "provide"]}, "focal_class": {"identifier": "AutomationClientAuthFactory", "superclass": "extends ClientAuthFactory", "interfaces": "", "fields": [], "methods": [{"identifier": "AutomationClientAuthFactory", "parameters": "(ClientDAOFactory clientDAOFactory,\n      KeywhizConfig keywhizConfig)", "modifiers": "@Inject public", "return": "", "signature": " AutomationClientAuthFactory(ClientDAOFactory clientDAOFactory,\n      KeywhizConfig keywhizConfig)", "full_signature": "@Inject public  AutomationClientAuthFactory(ClientDAOFactory clientDAOFactory,\n      KeywhizConfig keywhizConfig)", "class_method_signature": "AutomationClientAuthFactory.AutomationClientAuthFactory(ClientDAOFactory clientDAOFactory,\n      KeywhizConfig keywhizConfig)", "testcase": false, "constructor": true}, {"identifier": "AutomationClientAuthFactory", "parameters": "(ClientDAO clientDAO,\n      ClientAuthConfig clientAuthConfig)", "modifiers": "@VisibleForTesting", "return": "", "signature": " AutomationClientAuthFactory(ClientDAO clientDAO,\n      ClientAuthConfig clientAuthConfig)", "full_signature": "@VisibleForTesting  AutomationClientAuthFactory(ClientDAO clientDAO,\n      ClientAuthConfig clientAuthConfig)", "class_method_signature": "AutomationClientAuthFactory.AutomationClientAuthFactory(ClientDAO clientDAO,\n      ClientAuthConfig clientAuthConfig)", "testcase": false, "constructor": true}, {"identifier": "provide", "parameters": "(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "modifiers": "public", "return": "AutomationClient", "signature": "AutomationClient provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "full_signature": "public AutomationClient provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "class_method_signature": "AutomationClientAuthFactory.provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false}, {"identifier": "createMissingClient", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean createMissingClient()", "full_signature": "@Override protected boolean createMissingClient()", "class_method_signature": "AutomationClientAuthFactory.createMissingClient()", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/providers/AutomationClientAuthFactory.java"}, "focal_method": {"identifier": "provide", "parameters": "(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "modifiers": "public", "return": "AutomationClient", "body": "public AutomationClient provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest) {\n    // This will throw a NotAuthorizedException if the client does not exist or cannot\n    // be extracted from the request.\n    Client client = super.provide(containerRequest, httpServletRequest);\n\n    // This method returns null if the provided client is not actually an automation client\n    return Optional.ofNullable(AutomationClient.of(client))\n        .orElseThrow(() -> new ForbiddenException(\n            format(\"Client %s not authorized as a AutomationClient\", client.getName())));\n  }", "signature": "AutomationClient provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "full_signature": "public AutomationClient provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "class_method_signature": "AutomationClientAuthFactory.provide(ContainerRequest containerRequest,\n      HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false, "invocations": ["provide", "orElseThrow", "ofNullable", "of", "format", "getName"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}