{"test_class": {"identifier": "AcHandlingTest", "superclass": "extends ProgressCheckTestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/checks/AcHandlingTest.java"}, "test_case": {"identifier": "testEmptyConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyConfig() throws Exception {\n        AcHandling.Check check = (AcHandling.Check) new AcHandling().newInstance(obj().get());\n        assertNotNull(\"check should not be null\", check);\n        Assert.assertEquals(\"default levelSet should be \" + AcHandling.DEFAULT_LEVEL_SET,\n                check.levelSet, AcHandling.DEFAULT_LEVEL_SET);\n        assertTrue(\"default allowedModes should be empty: \" + check.allowedModes,\n                check.allowedModes.isEmpty());\n    }", "signature": "void testEmptyConfig()", "full_signature": "@Test public void testEmptyConfig()", "class_method_signature": "AcHandlingTest.testEmptyConfig()", "testcase": true, "constructor": false, "invocations": ["newInstance", "get", "obj", "assertNotNull", "assertEquals", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "AcHandling", "superclass": "", "interfaces": "implements ProgressCheckFactory", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String allowedModes() {\n            return \"allowedModes\";\n        }\n\n        @Override\n        public String levelSet() {\n            return \"levelSet\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String allowedModes() {\n            return \"allowedModes\";\n        }\n\n        @Override\n        public String levelSet() {\n            return \"levelSet\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_ALLOWED_MODES = keys().allowedModes();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_ALLOWED_MODES = keys().allowedModes()", "var_name": "CONFIG_ALLOWED_MODES"}, {"original_string": "@Deprecated\n    public static final String CONFIG_LEVEL_SET = keys().levelSet();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_LEVEL_SET = keys().levelSet()", "var_name": "CONFIG_LEVEL_SET"}, {"original_string": "static final ACHandlingLevelSet DEFAULT_LEVEL_SET = ACHandlingLevelSet.NO_UNSAFE;", "modifier": "static final", "type": "ACHandlingLevelSet", "declarator": "DEFAULT_LEVEL_SET = ACHandlingLevelSet.NO_UNSAFE", "var_name": "DEFAULT_LEVEL_SET"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "public static", "return": "JsonKeys", "signature": "JsonKeys keys()", "full_signature": "public static JsonKeys keys()", "class_method_signature": "AcHandling.keys()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "AcHandling.newInstance(final JsonObject config)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/checks/AcHandling.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "body": "@Override\n    public ProgressCheck newInstance(final JsonObject config) {\n        if (hasNonNull(config, keys().allowedModes())) {\n            List<AccessControlHandling> allowedModes = mapArrayOfStrings(arrayOrEmpty(config, keys().allowedModes()),\n                    compose1(String::toUpperCase, AccessControlHandling::valueOf), true);\n            return new Check(ACHandlingLevelSet.EXPLICIT, allowedModes);\n        } else if (hasNonNull(config, keys().levelSet())) {\n            ACHandlingLevelSet levelSet = ACHandlingLevelSet.valueOf(config.getString(keys().levelSet()).toUpperCase());\n            return new Check(levelSet, Collections.emptyList());\n        } else {\n            return new Check(DEFAULT_LEVEL_SET, Collections.emptyList());\n        }\n    }", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "AcHandling.newInstance(final JsonObject config)", "testcase": false, "constructor": false, "invocations": ["hasNonNull", "allowedModes", "keys", "mapArrayOfStrings", "arrayOrEmpty", "allowedModes", "keys", "compose1", "hasNonNull", "levelSet", "keys", "valueOf", "toUpperCase", "getString", "levelSet", "keys", "emptyList", "emptyList"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}