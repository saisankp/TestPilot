{"test_class": {"identifier": "ItemTest", "superclass": "extends AbstractDSpaceObjectTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(ItemTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(ItemTest.class)", "var_name": "log"}, {"original_string": "private Item it;", "modifier": "private", "type": "Item", "declarator": "it", "var_name": "it"}, {"original_string": "private MetadataSchemaService metadataSchemaService = ContentServiceFactory.getInstance().getMetadataSchemaService();", "modifier": "private", "type": "MetadataSchemaService", "declarator": "metadataSchemaService = ContentServiceFactory.getInstance().getMetadataSchemaService()", "var_name": "metadataSchemaService"}, {"original_string": "private BitstreamFormatService bitstreamFormatService = ContentServiceFactory.getInstance().getBitstreamFormatService();", "modifier": "private", "type": "BitstreamFormatService", "declarator": "bitstreamFormatService = ContentServiceFactory.getInstance().getBitstreamFormatService()", "var_name": "bitstreamFormatService"}, {"original_string": "private MetadataFieldService metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService();", "modifier": "private", "type": "MetadataFieldService", "declarator": "metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService()", "var_name": "metadataFieldService"}, {"original_string": "private Collection collection;", "modifier": "private", "type": "Collection", "declarator": "collection", "var_name": "collection"}, {"original_string": "private Community owningCommunity;", "modifier": "private", "type": "Community", "declarator": "owningCommunity", "var_name": "owningCommunity"}], "file": "dspace-api/src/test/java/org/dspace/content/ItemTest.java"}, "test_case": {"identifier": "testGetCollections", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCollections() throws Exception\n    {\n        context.turnOffAuthorisationSystem();\n        Collection collection = collectionService.create(context, owningCommunity);\n        collectionService.setMetadataSingleValue(context, collection, MetadataSchema.DC_SCHEMA, \"title\", null, Item.ANY, \"collection B\");\n        it.addCollection(collection);\n        collection = collectionService.create(context, owningCommunity);\n        collectionService.setMetadataSingleValue(context, collection, MetadataSchema.DC_SCHEMA, \"title\", null, Item.ANY, \"collection A\");\n        it.addCollection(collection);\n        context.restoreAuthSystemState();\n        assertThat(\"testGetCollections 0\", it.getCollections(), notNullValue());\n        assertTrue(\"testGetCollections 1\", it.getCollections().size() == 3);\n        assertTrue(\"testGetCollections 2\", it.getCollections().get(1).getName().equals(\"collection A\"));\n        assertTrue(\"testGetCollections 3\", it.getCollections().get(2).getName().equals(\"collection B\"));\n    }", "signature": "void testGetCollections()", "full_signature": "@Test public void testGetCollections()", "class_method_signature": "ItemTest.testGetCollections()", "testcase": true, "constructor": false, "invocations": ["turnOffAuthorisationSystem", "create", "setMetadataSingleValue", "addCollection", "create", "setMetadataSingleValue", "addCollection", "restoreAuthSystemState", "assertThat", "getCollections", "notNullValue", "assertTrue", "size", "getCollections", "assertTrue", "equals", "getName", "get", "getCollections", "assertTrue", "equals", "getName", "get", "getCollections"]}, "focal_class": {"identifier": "Item", "superclass": "extends DSpaceObject", "interfaces": "implements DSpaceObjectLegacySupport", "fields": [{"original_string": "public static final String ANY = \"*\";", "modifier": "public static final", "type": "String", "declarator": "ANY = \"*\"", "var_name": "ANY"}, {"original_string": "@Column(name=\"item_id\", insertable = false, updatable = false)\n    private Integer legacyId;", "modifier": "@Column(name=\"item_id\", insertable = false, updatable = false)\n    private", "type": "Integer", "declarator": "legacyId", "var_name": "legacyId"}, {"original_string": "@Column(name= \"in_archive\")\n    private boolean inArchive = false;", "modifier": "@Column(name= \"in_archive\")\n    private", "type": "boolean", "declarator": "inArchive = false", "var_name": "inArchive"}, {"original_string": "@Column(name= \"discoverable\")\n    private boolean discoverable = false;", "modifier": "@Column(name= \"discoverable\")\n    private", "type": "boolean", "declarator": "discoverable = false", "var_name": "discoverable"}, {"original_string": "@Column(name= \"withdrawn\")\n    private boolean withdrawn = false;", "modifier": "@Column(name= \"withdrawn\")\n    private", "type": "boolean", "declarator": "withdrawn = false", "var_name": "withdrawn"}, {"original_string": "@Column(name= \"last_modified\", columnDefinition=\"timestamp with time zone\")\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date lastModified = new Date();", "modifier": "@Column(name= \"last_modified\", columnDefinition=\"timestamp with time zone\")\n    @Temporal(TemporalType.TIMESTAMP)\n    private", "type": "Date", "declarator": "lastModified = new Date()", "var_name": "lastModified"}, {"original_string": "@ManyToOne(fetch = FetchType.LAZY, cascade={CascadeType.PERSIST})\n    @JoinColumn(name = \"owning_collection\")\n    private Collection owningCollection;", "modifier": "@ManyToOne(fetch = FetchType.LAZY, cascade={CascadeType.PERSIST})\n    @JoinColumn(name = \"owning_collection\")\n    private", "type": "Collection", "declarator": "owningCollection", "var_name": "owningCollection"}, {"original_string": "@OneToOne(fetch = FetchType.LAZY, mappedBy = \"template\")\n    private Collection templateItemOf;", "modifier": "@OneToOne(fetch = FetchType.LAZY, mappedBy = \"template\")\n    private", "type": "Collection", "declarator": "templateItemOf", "var_name": "templateItemOf"}, {"original_string": "@ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"submitter_id\")\n    private EPerson submitter = null;", "modifier": "@ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"submitter_id\")\n    private", "type": "EPerson", "declarator": "submitter = null", "var_name": "submitter"}, {"original_string": "@ManyToMany(fetch = FetchType.LAZY, cascade={CascadeType.PERSIST})\n    @JoinTable(\n            name = \"collection2item\",\n            joinColumns = {@JoinColumn(name = \"item_id\") },\n            inverseJoinColumns = {@JoinColumn(name = \"collection_id\") }\n    )\n    private final Set<Collection> collections = new HashSet<>();", "modifier": "@ManyToMany(fetch = FetchType.LAZY, cascade={CascadeType.PERSIST})\n    @JoinTable(\n            name = \"collection2item\",\n            joinColumns = {@JoinColumn(name = \"item_id\") },\n            inverseJoinColumns = {@JoinColumn(name = \"collection_id\") }\n    )\n    private final", "type": "Set<Collection>", "declarator": "collections = new HashSet<>()", "var_name": "collections"}, {"original_string": "@ManyToMany(fetch = FetchType.LAZY, mappedBy = \"items\")\n    private final List<Bundle> bundles = new ArrayList<>();", "modifier": "@ManyToMany(fetch = FetchType.LAZY, mappedBy = \"items\")\n    private final", "type": "List<Bundle>", "declarator": "bundles = new ArrayList<>()", "var_name": "bundles"}, {"original_string": "@Transient\n    private transient ItemService itemService;", "modifier": "@Transient\n    private transient", "type": "ItemService", "declarator": "itemService", "var_name": "itemService"}], "methods": [{"identifier": "Item", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Item()", "full_signature": "protected  Item()", "class_method_signature": "Item.Item()", "testcase": false, "constructor": true}, {"identifier": "isArchived", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isArchived()", "full_signature": "public boolean isArchived()", "class_method_signature": "Item.isArchived()", "testcase": false, "constructor": false}, {"identifier": "isWithdrawn", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWithdrawn()", "full_signature": "public boolean isWithdrawn()", "class_method_signature": "Item.isWithdrawn()", "testcase": false, "constructor": false}, {"identifier": "setWithdrawn", "parameters": "(boolean withdrawn)", "modifiers": "", "return": "void", "signature": "void setWithdrawn(boolean withdrawn)", "full_signature": " void setWithdrawn(boolean withdrawn)", "class_method_signature": "Item.setWithdrawn(boolean withdrawn)", "testcase": false, "constructor": false}, {"identifier": "isDiscoverable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDiscoverable()", "full_signature": "public boolean isDiscoverable()", "class_method_signature": "Item.isDiscoverable()", "testcase": false, "constructor": false}, {"identifier": "getLastModified", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getLastModified()", "full_signature": "public Date getLastModified()", "class_method_signature": "Item.getLastModified()", "testcase": false, "constructor": false}, {"identifier": "setLastModified", "parameters": "(Date lastModified)", "modifiers": "public", "return": "void", "signature": "void setLastModified(Date lastModified)", "full_signature": "public void setLastModified(Date lastModified)", "class_method_signature": "Item.setLastModified(Date lastModified)", "testcase": false, "constructor": false}, {"identifier": "setArchived", "parameters": "(boolean isArchived)", "modifiers": "public", "return": "void", "signature": "void setArchived(boolean isArchived)", "full_signature": "public void setArchived(boolean isArchived)", "class_method_signature": "Item.setArchived(boolean isArchived)", "testcase": false, "constructor": false}, {"identifier": "setDiscoverable", "parameters": "(boolean discoverable)", "modifiers": "public", "return": "void", "signature": "void setDiscoverable(boolean discoverable)", "full_signature": "public void setDiscoverable(boolean discoverable)", "class_method_signature": "Item.setDiscoverable(boolean discoverable)", "testcase": false, "constructor": false}, {"identifier": "setOwningCollection", "parameters": "(Collection c)", "modifiers": "public", "return": "void", "signature": "void setOwningCollection(Collection c)", "full_signature": "public void setOwningCollection(Collection c)", "class_method_signature": "Item.setOwningCollection(Collection c)", "testcase": false, "constructor": false}, {"identifier": "getOwningCollection", "parameters": "()", "modifiers": "public", "return": "Collection", "signature": "Collection getOwningCollection()", "full_signature": "public Collection getOwningCollection()", "class_method_signature": "Item.getOwningCollection()", "testcase": false, "constructor": false}, {"identifier": "getSubmitter", "parameters": "()", "modifiers": "public", "return": "EPerson", "signature": "EPerson getSubmitter()", "full_signature": "public EPerson getSubmitter()", "class_method_signature": "Item.getSubmitter()", "testcase": false, "constructor": false}, {"identifier": "setSubmitter", "parameters": "(EPerson sub)", "modifiers": "public", "return": "void", "signature": "void setSubmitter(EPerson sub)", "full_signature": "public void setSubmitter(EPerson sub)", "class_method_signature": "Item.setSubmitter(EPerson sub)", "testcase": false, "constructor": false}, {"identifier": "getCollections", "parameters": "()", "modifiers": "public", "return": "List<Collection>", "signature": "List<Collection> getCollections()", "full_signature": "public List<Collection> getCollections()", "class_method_signature": "Item.getCollections()", "testcase": false, "constructor": false}, {"identifier": "addCollection", "parameters": "(Collection collection)", "modifiers": "", "return": "void", "signature": "void addCollection(Collection collection)", "full_signature": " void addCollection(Collection collection)", "class_method_signature": "Item.addCollection(Collection collection)", "testcase": false, "constructor": false}, {"identifier": "removeCollection", "parameters": "(Collection collection)", "modifiers": "", "return": "void", "signature": "void removeCollection(Collection collection)", "full_signature": " void removeCollection(Collection collection)", "class_method_signature": "Item.removeCollection(Collection collection)", "testcase": false, "constructor": false}, {"identifier": "clearCollections", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearCollections()", "full_signature": "public void clearCollections()", "class_method_signature": "Item.clearCollections()", "testcase": false, "constructor": false}, {"identifier": "getTemplateItemOf", "parameters": "()", "modifiers": "public", "return": "Collection", "signature": "Collection getTemplateItemOf()", "full_signature": "public Collection getTemplateItemOf()", "class_method_signature": "Item.getTemplateItemOf()", "testcase": false, "constructor": false}, {"identifier": "setTemplateItemOf", "parameters": "(Collection templateItemOf)", "modifiers": "", "return": "void", "signature": "void setTemplateItemOf(Collection templateItemOf)", "full_signature": " void setTemplateItemOf(Collection templateItemOf)", "class_method_signature": "Item.setTemplateItemOf(Collection templateItemOf)", "testcase": false, "constructor": false}, {"identifier": "getBundles", "parameters": "()", "modifiers": "public", "return": "List<Bundle>", "signature": "List<Bundle> getBundles()", "full_signature": "public List<Bundle> getBundles()", "class_method_signature": "Item.getBundles()", "testcase": false, "constructor": false}, {"identifier": "getBundles", "parameters": "(String name)", "modifiers": "public", "return": "List<Bundle>", "signature": "List<Bundle> getBundles(String name)", "full_signature": "public List<Bundle> getBundles(String name)", "class_method_signature": "Item.getBundles(String name)", "testcase": false, "constructor": false}, {"identifier": "addBundle", "parameters": "(Bundle bundle)", "modifiers": "", "return": "void", "signature": "void addBundle(Bundle bundle)", "full_signature": " void addBundle(Bundle bundle)", "class_method_signature": "Item.addBundle(Bundle bundle)", "testcase": false, "constructor": false}, {"identifier": "removeBundle", "parameters": "(Bundle bundle)", "modifiers": "", "return": "void", "signature": "void removeBundle(Bundle bundle)", "full_signature": " void removeBundle(Bundle bundle)", "class_method_signature": "Item.removeBundle(Bundle bundle)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Item.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Item.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getType()", "full_signature": "@Override public int getType()", "class_method_signature": "Item.getType()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "Item.getName()", "testcase": false, "constructor": false}, {"identifier": "getLegacyId", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getLegacyId()", "full_signature": "@Override public Integer getLegacyId()", "class_method_signature": "Item.getLegacyId()", "testcase": false, "constructor": false}, {"identifier": "getItemService", "parameters": "()", "modifiers": "public", "return": "ItemService", "signature": "ItemService getItemService()", "full_signature": "public ItemService getItemService()", "class_method_signature": "Item.getItemService()", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/content/Item.java"}, "focal_method": {"identifier": "getCollections", "parameters": "()", "modifiers": "public", "return": "List<Collection>", "body": "public List<Collection> getCollections()\n    {\n        // We return a copy because we do not want people to add elements to this collection directly.\n        // We return a list to maintain backwards compatibility\n        Collection[] output = collections.toArray(new Collection[]{});\n        Arrays.sort(output, new NameAscendingComparator());\n        return Arrays.asList(output);\n    }", "signature": "List<Collection> getCollections()", "full_signature": "public List<Collection> getCollections()", "class_method_signature": "Item.getCollections()", "testcase": false, "constructor": false, "invocations": ["toArray", "sort", "asList"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}