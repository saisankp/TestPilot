{"test_class": {"identifier": "MimicCreatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MimicCreator mimicCreator;", "modifier": "private", "type": "MimicCreator", "declarator": "mimicCreator", "var_name": "mimicCreator"}, {"original_string": "private CtClass src;", "modifier": "private", "type": "CtClass", "declarator": "src", "var_name": "src"}, {"original_string": "private CtClass dst;", "modifier": "private", "type": "CtClass", "declarator": "dst", "var_name": "dst"}], "file": "mimic-library/src/test/java/com/github/stephanenicolas/mimic/MimicCreatorTest.java"}, "test_case": {"identifier": "testMimicMethods_with_key", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMimicMethods_with_key() throws Exception {\n        // GIVEN\n        mimicCreator = new MimicCreator(\"bar\");\n        src.addMethod(CtNewMethod.make(\"public boolean foo() { return true;}\", src));\n        dst.addMethod(CtNewMethod.make(\"public boolean foo() { return true;}\", dst));\n\n        // WHEN\n        mimicCreator.mimicMethods(src, dst, MimicMode.BEFORE_RETURN, new MimicMethod[0]);\n\n        // THEN\n        assertHasMethod(dst.toClass(), \"_copy_bar_foo\", null);\n    }", "signature": "void testMimicMethods_with_key()", "full_signature": "@Test public void testMimicMethods_with_key()", "class_method_signature": "MimicCreatorTest.testMimicMethods_with_key()", "testcase": true, "constructor": false, "invocations": ["addMethod", "make", "addMethod", "make", "mimicMethods", "assertHasMethod", "toClass"]}, "focal_class": {"identifier": "MimicCreator", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Getter\n    private String key;", "modifier": "@Getter\n    private", "type": "String", "declarator": "key", "var_name": "key"}], "methods": [{"identifier": "MimicCreator", "parameters": "()", "modifiers": "public", "return": "", "signature": " MimicCreator()", "full_signature": "public  MimicCreator()", "class_method_signature": "MimicCreator.MimicCreator()", "testcase": false, "constructor": true}, {"identifier": "MimicCreator", "parameters": "(String key)", "modifiers": "public", "return": "", "signature": " MimicCreator(String key)", "full_signature": "public  MimicCreator(String key)", "class_method_signature": "MimicCreator.MimicCreator(String key)", "testcase": false, "constructor": true}, {"identifier": "buildMimicModeMethodMap", "parameters": "(MimicMethod[] mimicMethods)", "modifiers": "private", "return": "HashMap<String, MimicMode>", "signature": "HashMap<String, MimicMode> buildMimicModeMethodMap(MimicMethod[] mimicMethods)", "full_signature": "private HashMap<String, MimicMode> buildMimicModeMethodMap(MimicMethod[] mimicMethods)", "class_method_signature": "MimicCreator.buildMimicModeMethodMap(MimicMethod[] mimicMethods)", "testcase": false, "constructor": false}, {"identifier": "buildInsertionMethodMap", "parameters": "(MimicMethod[] mimicMethods)", "modifiers": "private", "return": "HashMap<String, String>", "signature": "HashMap<String, String> buildInsertionMethodMap(MimicMethod[] mimicMethods)", "full_signature": "private HashMap<String, String> buildInsertionMethodMap(MimicMethod[] mimicMethods)", "class_method_signature": "MimicCreator.buildInsertionMethodMap(MimicMethod[] mimicMethods)", "testcase": false, "constructor": false}, {"identifier": "createInvocation", "parameters": "(CtMethod method, String copiedMethodName)", "modifiers": "private", "return": "String", "signature": "String createInvocation(CtMethod method, String copiedMethodName)", "full_signature": "private String createInvocation(CtMethod method, String copiedMethodName)", "class_method_signature": "MimicCreator.createInvocation(CtMethod method, String copiedMethodName)", "testcase": false, "constructor": false}, {"identifier": "hasField", "parameters": "(CtClass clazz, CtField field)", "modifiers": "public", "return": "boolean", "signature": "boolean hasField(CtClass clazz, CtField field)", "full_signature": "public boolean hasField(CtClass clazz, CtField field)", "class_method_signature": "MimicCreator.hasField(CtClass clazz, CtField field)", "testcase": false, "constructor": false}, {"identifier": "hasInterface", "parameters": "(CtClass dst, CtClass interfazz)", "modifiers": "public", "return": "boolean", "signature": "boolean hasInterface(CtClass dst, CtClass interfazz)", "full_signature": "public boolean hasInterface(CtClass dst, CtClass interfazz)", "class_method_signature": "MimicCreator.hasInterface(CtClass dst, CtClass interfazz)", "testcase": false, "constructor": false}, {"identifier": "mimicClass", "parameters": "(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "modifiers": "public", "return": "void", "signature": "void mimicClass(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "full_signature": "public void mimicClass(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "class_method_signature": "MimicCreator.mimicClass(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "testcase": false, "constructor": false}, {"identifier": "mimicConstructors", "parameters": "(CtClass src, CtClass dst)", "modifiers": "public", "return": "void", "signature": "void mimicConstructors(CtClass src, CtClass dst)", "full_signature": "public void mimicConstructors(CtClass src, CtClass dst)", "class_method_signature": "MimicCreator.mimicConstructors(CtClass src, CtClass dst)", "testcase": false, "constructor": false}, {"identifier": "mimicFields", "parameters": "(CtClass src, CtClass dst)", "modifiers": "public", "return": "void", "signature": "void mimicFields(CtClass src, CtClass dst)", "full_signature": "public void mimicFields(CtClass src, CtClass dst)", "class_method_signature": "MimicCreator.mimicFields(CtClass src, CtClass dst)", "testcase": false, "constructor": false}, {"identifier": "mimicInterfaces", "parameters": "(CtClass src, CtClass dst)", "modifiers": "public", "return": "void", "signature": "void mimicInterfaces(CtClass src, CtClass dst)", "full_signature": "public void mimicInterfaces(CtClass src, CtClass dst)", "class_method_signature": "MimicCreator.mimicInterfaces(CtClass src, CtClass dst)", "testcase": false, "constructor": false}, {"identifier": "mimicMethods", "parameters": "(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "modifiers": "public", "return": "void", "signature": "void mimicMethods(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "full_signature": "public void mimicMethods(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "class_method_signature": "MimicCreator.mimicMethods(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "testcase": false, "constructor": false}, {"identifier": "findMethod", "parameters": "(CtClass dst, CtMethod insertionMethod, String insertionMethodName)", "modifiers": "private", "return": "CtMethod", "signature": "CtMethod findMethod(CtClass dst, CtMethod insertionMethod, String insertionMethodName)", "full_signature": "private CtMethod findMethod(CtClass dst, CtMethod insertionMethod, String insertionMethodName)", "class_method_signature": "MimicCreator.findMethod(CtClass dst, CtMethod insertionMethod, String insertionMethodName)", "testcase": false, "constructor": false}], "file": "mimic-library/src/main/java/com/github/stephanenicolas/mimic/MimicCreator.java"}, "focal_method": {"identifier": "mimicMethods", "parameters": "(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "modifiers": "public", "return": "void", "body": "public void mimicMethods(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods) throws MimicException, CannotCompileException, NotFoundException {\n        HashMap<String, MimicMode> mapNameToMimicMode = buildMimicModeMethodMap(mimicMethods);\n        HashMap<String, String> mapNameToInsertionMethod = buildInsertionMethodMap(mimicMethods);\n\n        for (final CtMethod method : src.getDeclaredMethods()) {\n            log.fine(\"Mimic method \" + method.getName());\n            boolean destHasSameMethod = false;\n            for (CtMethod methodInDest : dst.getDeclaredMethods()) {\n                String signature = method.getSignature() + method.getName();\n                String signatureInDest = methodInDest.getSignature() + methodInDest.getName();\n                if (signatureInDest.equals(signature)) {\n                    destHasSameMethod = true;\n                    log.fine(\"Forwarding \" + method.getName());\n                    String key = this.key == null ? \"\" : (this.key + \"_\");\n                    final String copiedMethodName = \"_copy_\" + key + method.getName();\n                    dst.addMethod(CtNewMethod.copy(method, copiedMethodName, dst, null));\n\n                    CtMethod insertionMethod = null;\n                    MimicMode mimicMode = defaultMimicMode;\n                    if (mapNameToMimicMode.containsKey(method.getName())) {\n                        mimicMode = mapNameToMimicMode.get(method.getName());\n                        String insertionMethodName = mapNameToInsertionMethod.get(method.getName());\n                        insertionMethod = findMethod(dst, insertionMethod, insertionMethodName);\n                    }\n                    log.fine(\"Mimic mode \" + mimicMode);\n                    switch (mimicMode) {\n                        case AT_BEGINNING:\n                            methodInDest.insertBefore(createInvocation(methodInDest, copiedMethodName));\n                            break;\n                        case BEFORE_RETURN:\n                            String returnString = method.getReturnType() == null ? \"\" : \"return \";\n                            methodInDest.insertAfter(returnString + createInvocation(methodInDest, copiedMethodName));\n                            break;\n                        case BEFORE:\n                        case AFTER:\n                            ReplaceExprEditor editor = new ReplaceExprEditor(copiedMethodName, method, insertionMethod, mimicMode);\n                            methodInDest.instrument(editor);\n                            if (!editor.isSuccessful()) {\n                                throw new MimicException(\"No replacement for method:\" + method.getName() + \" with insertion AFTER \" + (insertionMethod == null ? \"insertion method is null\" : insertionMethod.getName()));\n                            }\n                            break;\n                        case BEFORE_SUPER:\n                        case AFTER_SUPER:\n                        case REPLACE_SUPER:\n                            ReplaceExprEditor editor2 = new ReplaceExprEditor(copiedMethodName, method, mimicMode);\n                            methodInDest.instrument(editor2);\n                            if (!editor2.isSuccessful()) {\n                                throw new MimicException(\"No replacement for method:\" + method.getName() + \" with insertion REPLACE_SUPER \");\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            if (!destHasSameMethod) {\n                log.fine(\"Copying \" + method.getName());\n                dst.addMethod(CtNewMethod.copy(method, dst, null));\n            }\n        }\n    }", "signature": "void mimicMethods(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "full_signature": "public void mimicMethods(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "class_method_signature": "MimicCreator.mimicMethods(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods)", "testcase": false, "constructor": false, "invocations": ["buildMimicModeMethodMap", "buildInsertionMethodMap", "getDeclaredMethods", "fine", "getName", "getDeclaredMethods", "getSignature", "getName", "getSignature", "getName", "equals", "fine", "getName", "getName", "addMethod", "copy", "containsKey", "getName", "get", "getName", "get", "getName", "findMethod", "fine", "insertBefore", "createInvocation", "getReturnType", "insertAfter", "createInvocation", "instrument", "isSuccessful", "getName", "getName", "instrument", "isSuccessful", "getName", "fine", "getName", "addMethod", "copy"]}, "repository": {"repo_id": 20893448, "url": "https://github.com/stephanenicolas/mimic", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 18, "size": 673, "license": "licensed"}}