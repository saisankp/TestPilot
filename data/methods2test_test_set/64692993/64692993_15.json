{"test_class": {"identifier": "CalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Calculator mCalculator;", "modifier": "private", "type": "Calculator", "declarator": "mCalculator", "var_name": "mCalculator"}], "file": "SimpleCalc/app/src/test/java/com/example/android/SimpleCalc/CalculatorTest.java"}, "test_case": {"identifier": "powZeroSecondOps", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void powZeroSecondOps() {\n    double resultPow = mCalculator.pow(1d,0);\n    assertThat(resultPow, is(equalTo(1d)));\n  }", "signature": "void powZeroSecondOps()", "full_signature": "@Test public void powZeroSecondOps()", "class_method_signature": "CalculatorTest.powZeroSecondOps()", "testcase": true, "constructor": false, "invocations": ["pow", "assertThat", "is", "equalTo"]}, "focal_class": {"identifier": "Calculator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "add", "parameters": "(double firstOperand, double secondOperand)", "modifiers": "public", "return": "double", "signature": "double add(double firstOperand, double secondOperand)", "full_signature": "public double add(double firstOperand, double secondOperand)", "class_method_signature": "Calculator.add(double firstOperand, double secondOperand)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(double firstOperand, double secondOperand)", "modifiers": "public", "return": "double", "signature": "double sub(double firstOperand, double secondOperand)", "full_signature": "public double sub(double firstOperand, double secondOperand)", "class_method_signature": "Calculator.sub(double firstOperand, double secondOperand)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(double firstOperand, double secondOperand)", "modifiers": "public", "return": "double", "signature": "double div(double firstOperand, double secondOperand)", "full_signature": "public double div(double firstOperand, double secondOperand)", "class_method_signature": "Calculator.div(double firstOperand, double secondOperand)", "testcase": false, "constructor": false}, {"identifier": "mul", "parameters": "(double firstOperand, double secondOperand)", "modifiers": "public", "return": "double", "signature": "double mul(double firstOperand, double secondOperand)", "full_signature": "public double mul(double firstOperand, double secondOperand)", "class_method_signature": "Calculator.mul(double firstOperand, double secondOperand)", "testcase": false, "constructor": false}, {"identifier": "pow", "parameters": "(double firstOperand, double secondOperand)", "modifiers": "public", "return": "double", "signature": "double pow(double firstOperand, double secondOperand)", "full_signature": "public double pow(double firstOperand, double secondOperand)", "class_method_signature": "Calculator.pow(double firstOperand, double secondOperand)", "testcase": false, "constructor": false}], "file": "SimpleCalc/app/src/main/java/com/example/android/SimpleCalc/Calculator.java"}, "focal_method": {"identifier": "pow", "parameters": "(double firstOperand, double secondOperand)", "modifiers": "public", "return": "double", "body": "public double pow(double firstOperand, double secondOperand) {\n        //return firstOperand\n        return Math.pow(firstOperand,secondOperand);\n    }", "signature": "double pow(double firstOperand, double secondOperand)", "full_signature": "public double pow(double firstOperand, double secondOperand)", "class_method_signature": "Calculator.pow(double firstOperand, double secondOperand)", "testcase": false, "constructor": false, "invocations": ["pow"]}, "repository": {"repo_id": 64692993, "url": "https://github.com/edimaudo/Android-Projects", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 105866, "license": "licensed"}}