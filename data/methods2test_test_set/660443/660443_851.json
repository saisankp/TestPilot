{"test_class": {"identifier": "HydrogenPlacerTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "public boolean       standAlone = false;", "modifier": "public", "type": "boolean", "declarator": "standAlone = false", "var_name": "standAlone"}, {"original_string": "private ILoggingTool logger     = LoggingToolFactory.createLoggingTool(HydrogenPlacerTest.class);", "modifier": "private", "type": "ILoggingTool", "declarator": "logger     = LoggingToolFactory.createLoggingTool(HydrogenPlacerTest.class)", "var_name": "logger"}], "file": "tool/sdg/src/test/java/org/openscience/cdk/layout/HydrogenPlacerTest.java"}, "test_case": {"identifier": "testPlaceHydrogens2D", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPlaceHydrogens2D() throws Exception {\n        HydrogenPlacer hydrogenPlacer = new HydrogenPlacer();\n        IAtomContainer dichloromethane = new AtomContainer();\n        Atom carbon = new Atom(\"C\");\n        Point2d carbonPos = new Point2d(0.0, 0.0);\n        carbon.setPoint2d(carbonPos);\n        Atom h1 = new Atom(\"H\");\n        Atom h2 = new Atom(\"H\");\n        Atom cl1 = new Atom(\"Cl\");\n        Point2d cl1Pos = new Point2d(0.0, -1.0);\n        cl1.setPoint2d(cl1Pos);\n        Atom cl2 = new Atom(\"Cl\");\n        Point2d cl2Pos = new Point2d(-1.0, 0.0);\n        cl2.setPoint2d(cl2Pos);\n        dichloromethane.addAtom(carbon);\n        dichloromethane.addAtom(h1);\n        dichloromethane.addAtom(h2);\n        dichloromethane.addAtom(cl1);\n        dichloromethane.addAtom(cl2);\n        dichloromethane.addBond(new Bond(carbon, h1));\n        dichloromethane.addBond(new Bond(carbon, h2));\n        dichloromethane.addBond(new Bond(carbon, cl1));\n        dichloromethane.addBond(new Bond(carbon, cl2));\n\n        Assert.assertNull(h1.getPoint2d());\n        Assert.assertNull(h2.getPoint2d());\n\n        // generate new coords\n        hydrogenPlacer.placeHydrogens2D(dichloromethane, carbon);\n        // check that previously set coordinates are kept\n        assertEquals(carbonPos, carbon.getPoint2d(), 0.01);\n        assertEquals(cl1Pos, cl1.getPoint2d(), 0.01);\n        assertEquals(cl2Pos, cl2.getPoint2d(), 0.01);\n        Assert.assertNotNull(h1.getPoint2d());\n        Assert.assertNotNull(h2.getPoint2d());\n    }", "signature": "void testPlaceHydrogens2D()", "full_signature": "@Test public void testPlaceHydrogens2D()", "class_method_signature": "HydrogenPlacerTest.testPlaceHydrogens2D()", "testcase": true, "constructor": false, "invocations": ["setPoint2d", "setPoint2d", "setPoint2d", "addAtom", "addAtom", "addAtom", "addAtom", "addAtom", "addBond", "addBond", "addBond", "addBond", "assertNull", "getPoint2d", "assertNull", "getPoint2d", "placeHydrogens2D", "assertEquals", "getPoint2d", "assertEquals", "getPoint2d", "assertEquals", "getPoint2d", "assertNotNull", "getPoint2d", "assertNotNull", "getPoint2d"]}, "focal_class": {"identifier": "HydrogenPlacer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ILoggingTool logger = LoggingToolFactory.createLoggingTool(HydrogenPlacer.class);", "modifier": "private static final", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(HydrogenPlacer.class)", "var_name": "logger"}], "methods": [{"identifier": "placeHydrogens2D", "parameters": "(final IAtomContainer container, final double bondLength)", "modifiers": "public", "return": "void", "signature": "void placeHydrogens2D(final IAtomContainer container, final double bondLength)", "full_signature": "public void placeHydrogens2D(final IAtomContainer container, final double bondLength)", "class_method_signature": "HydrogenPlacer.placeHydrogens2D(final IAtomContainer container, final double bondLength)", "testcase": false, "constructor": false}, {"identifier": "placeHydrogens2D", "parameters": "(IAtomContainer container, IAtom atom)", "modifiers": "public", "return": "void", "signature": "void placeHydrogens2D(IAtomContainer container, IAtom atom)", "full_signature": "public void placeHydrogens2D(IAtomContainer container, IAtom atom)", "class_method_signature": "HydrogenPlacer.placeHydrogens2D(IAtomContainer container, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "placeHydrogens2D", "parameters": "(IAtomContainer container, IAtom atom, double bondLength)", "modifiers": "public", "return": "void", "signature": "void placeHydrogens2D(IAtomContainer container, IAtom atom, double bondLength)", "full_signature": "public void placeHydrogens2D(IAtomContainer container, IAtom atom, double bondLength)", "class_method_signature": "HydrogenPlacer.placeHydrogens2D(IAtomContainer container, IAtom atom, double bondLength)", "testcase": false, "constructor": false}], "file": "tool/sdg/src/main/java/org/openscience/cdk/layout/HydrogenPlacer.java"}, "focal_method": {"identifier": "placeHydrogens2D", "parameters": "(final IAtomContainer container, final double bondLength)", "modifiers": "public", "return": "void", "body": "public void placeHydrogens2D(final IAtomContainer container, final double bondLength) {\n        logger.debug(\"placing hydrogens on all atoms\");\n        for (IAtom atom : container.atoms()) {\n            // only place hydrogens for atoms which have coordinates\n            if (atom.getPoint2d() != null) {\n                placeHydrogens2D(container, atom, bondLength);\n            }\n        }\n        logger.debug(\"hydrogen placement complete\");\n    }", "signature": "void placeHydrogens2D(final IAtomContainer container, final double bondLength)", "full_signature": "public void placeHydrogens2D(final IAtomContainer container, final double bondLength)", "class_method_signature": "HydrogenPlacer.placeHydrogens2D(final IAtomContainer container, final double bondLength)", "testcase": false, "constructor": false, "invocations": ["debug", "atoms", "getPoint2d", "placeHydrogens2D", "debug"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}