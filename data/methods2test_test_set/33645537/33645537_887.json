{"test_class": {"identifier": "AODataSyncFileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AODataSyncFile aoDataSyncFile;", "modifier": "private", "type": "AODataSyncFile", "declarator": "aoDataSyncFile", "var_name": "aoDataSyncFile"}], "file": "zava/src/test/java/com/github/NoahShen/jue/file/AODataSyncFileTest.java"}, "test_case": {"identifier": "testReadData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReadData() throws Exception {\n\t\ttestWriteData();\n\t\tint bufferSize = 1024;\n\t\tfor (int i = 0; i < 6; ++i) {\n\t\t\tByteBuffer readBuffer = ByteBuffer.allocate(bufferSize);\n\t\t\taoDataSyncFile.read(readBuffer, FileHeader.HEADER_SIZE + i * bufferSize);\n\t\t\treadBuffer.flip();\n\t\t\tAssert.assertEquals((byte) i, readBuffer.get());\n\t\t}\n\t}", "signature": "void testReadData()", "full_signature": "@Test public void testReadData()", "class_method_signature": "AODataSyncFileTest.testReadData()", "testcase": true, "constructor": false, "invocations": ["testWriteData", "allocate", "read", "flip", "assertEquals", "get"]}, "focal_class": {"identifier": "AODataSyncFile", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_MAX_CACHE_CAPACITY = 64;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_MAX_CACHE_CAPACITY = 64", "var_name": "DEFAULT_MAX_CACHE_CAPACITY"}, {"original_string": "public static final int DEFAULT_BLOCK_SIZE = 64 * 1024 * 1024;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_BLOCK_SIZE = 64 * 1024 * 1024", "var_name": "DEFAULT_BLOCK_SIZE"}, {"original_string": "public static final int DEFAULT_MAX_DATA_BUFFER_SIZE = 128 * 1024 * 1024;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_MAX_DATA_BUFFER_SIZE = 128 * 1024 * 1024", "var_name": "DEFAULT_MAX_DATA_BUFFER_SIZE"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private FileChannel fileChannel;", "modifier": "private", "type": "FileChannel", "declarator": "fileChannel", "var_name": "fileChannel"}, {"original_string": "private final int blockSize;", "modifier": "private final", "type": "int", "declarator": "blockSize", "var_name": "blockSize"}, {"original_string": "private final boolean blockCache;", "modifier": "private final", "type": "boolean", "declarator": "blockCache", "var_name": "blockCache"}, {"original_string": "private int maxCacheCapacity;", "modifier": "private", "type": "int", "declarator": "maxCacheCapacity", "var_name": "maxCacheCapacity"}, {"original_string": "private ConcurrentLRUCache<Long, ByteDynamicArray> cache;", "modifier": "private", "type": "ConcurrentLRUCache<Long, ByteDynamicArray>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private int maxDataBufferSize;", "modifier": "private", "type": "int", "declarator": "maxDataBufferSize", "var_name": "maxDataBufferSize"}, {"original_string": "private ByteDynamicArray dataBufferDArray;", "modifier": "private", "type": "ByteDynamicArray", "declarator": "dataBufferDArray", "var_name": "dataBufferDArray"}, {"original_string": "private ByteDynamicArray headerBufferDArray;", "modifier": "private", "type": "ByteDynamicArray", "declarator": "headerBufferDArray", "var_name": "headerBufferDArray"}, {"original_string": "private final ReentrantReadWriteLock bufferLock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "bufferLock = new ReentrantReadWriteLock()", "var_name": "bufferLock"}, {"original_string": "private final ReadLock readBufferLock = bufferLock.readLock();", "modifier": "private final", "type": "ReadLock", "declarator": "readBufferLock = bufferLock.readLock()", "var_name": "readBufferLock"}, {"original_string": "private final WriteLock writeBufferLock = bufferLock.writeLock();", "modifier": "private final", "type": "WriteLock", "declarator": "writeBufferLock = bufferLock.writeLock()", "var_name": "writeBufferLock"}, {"original_string": "public static final int BUFFER_STRATEGY = 1;", "modifier": "public static final", "type": "int", "declarator": "BUFFER_STRATEGY = 1", "var_name": "BUFFER_STRATEGY"}, {"original_string": "public static final int ALWAYS_STRATEGY = 2;", "modifier": "public static final", "type": "int", "declarator": "ALWAYS_STRATEGY = 2", "var_name": "ALWAYS_STRATEGY"}, {"original_string": "public static final int EVERY_SEC_STRATEGY = 3;", "modifier": "public static final", "type": "int", "declarator": "EVERY_SEC_STRATEGY = 3", "var_name": "EVERY_SEC_STRATEGY"}, {"original_string": "private SyncStrategy syncStrategy;", "modifier": "private", "type": "SyncStrategy", "declarator": "syncStrategy", "var_name": "syncStrategy"}], "methods": [{"identifier": "AODataSyncFile", "parameters": "(File file, int syncStrategy)", "modifiers": "public", "return": "", "signature": " AODataSyncFile(File file, int syncStrategy)", "full_signature": "public  AODataSyncFile(File file, int syncStrategy)", "class_method_signature": "AODataSyncFile.AODataSyncFile(File file, int syncStrategy)", "testcase": false, "constructor": true}, {"identifier": "AODataSyncFile", "parameters": "(File file, int blockSize, boolean blockCache, int maxCacheCapacity, int maxDataBufferSize, int syncStrategy)", "modifiers": "public", "return": "", "signature": " AODataSyncFile(File file, int blockSize, boolean blockCache, int maxCacheCapacity, int maxDataBufferSize, int syncStrategy)", "full_signature": "public  AODataSyncFile(File file, int blockSize, boolean blockCache, int maxCacheCapacity, int maxDataBufferSize, int syncStrategy)", "class_method_signature": "AODataSyncFile.AODataSyncFile(File file, int blockSize, boolean blockCache, int maxCacheCapacity, int maxDataBufferSize, int syncStrategy)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long size()", "full_signature": "public long size()", "class_method_signature": "AODataSyncFile.size()", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getFile()", "full_signature": "public File getFile()", "class_method_signature": "AODataSyncFile.getFile()", "testcase": false, "constructor": false}, {"identifier": "getBlockSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBlockSize()", "full_signature": "public int getBlockSize()", "class_method_signature": "AODataSyncFile.getBlockSize()", "testcase": false, "constructor": false}, {"identifier": "isBlockCache", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBlockCache()", "full_signature": "public boolean isBlockCache()", "class_method_signature": "AODataSyncFile.isBlockCache()", "testcase": false, "constructor": false}, {"identifier": "getMaxCacheCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxCacheCapacity()", "full_signature": "public int getMaxCacheCapacity()", "class_method_signature": "AODataSyncFile.getMaxCacheCapacity()", "testcase": false, "constructor": false}, {"identifier": "getMaxDataBufferSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxDataBufferSize()", "full_signature": "public int getMaxDataBufferSize()", "class_method_signature": "AODataSyncFile.getMaxDataBufferSize()", "testcase": false, "constructor": false}, {"identifier": "appendData", "parameters": "(ByteBuffer newHeaderBuffer, ByteBuffer newDataBuffer)", "modifiers": "public", "return": "long", "signature": "long appendData(ByteBuffer newHeaderBuffer, ByteBuffer newDataBuffer)", "full_signature": "public long appendData(ByteBuffer newHeaderBuffer, ByteBuffer newDataBuffer)", "class_method_signature": "AODataSyncFile.appendData(ByteBuffer newHeaderBuffer, ByteBuffer newDataBuffer)", "testcase": false, "constructor": false}, {"identifier": "writeBufferToFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void writeBufferToFile()", "full_signature": "private void writeBufferToFile()", "class_method_signature": "AODataSyncFile.writeBufferToFile()", "testcase": false, "constructor": false}, {"identifier": "writeDataToBuffer", "parameters": "(ByteBuffer newHeaderBuffer, ByteBuffer newDataBuffer)", "modifiers": "private", "return": "long", "signature": "long writeDataToBuffer(ByteBuffer newHeaderBuffer, ByteBuffer newDataBuffer)", "full_signature": "private long writeDataToBuffer(ByteBuffer newHeaderBuffer, ByteBuffer newDataBuffer)", "class_method_signature": "AODataSyncFile.writeDataToBuffer(ByteBuffer newHeaderBuffer, ByteBuffer newDataBuffer)", "testcase": false, "constructor": false}, {"identifier": "clearBlockCache", "parameters": "(long pos, int size)", "modifiers": "private", "return": "void", "signature": "void clearBlockCache(long pos, int size)", "full_signature": "private void clearBlockCache(long pos, int size)", "class_method_signature": "AODataSyncFile.clearBlockCache(long pos, int size)", "testcase": false, "constructor": false}, {"identifier": "getBlockIndexes", "parameters": "(long pos, int size)", "modifiers": "private", "return": "long[]", "signature": "long[] getBlockIndexes(long pos, int size)", "full_signature": "private long[] getBlockIndexes(long pos, int size)", "class_method_signature": "AODataSyncFile.getBlockIndexes(long pos, int size)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(ByteBuffer readBuffer, long position)", "modifiers": "public", "return": "int", "signature": "int read(ByteBuffer readBuffer, long position)", "full_signature": "public int read(ByteBuffer readBuffer, long position)", "class_method_signature": "AODataSyncFile.read(ByteBuffer readBuffer, long position)", "testcase": false, "constructor": false}, {"identifier": "getBlockData", "parameters": "(long blockIndex)", "modifiers": "private", "return": "ByteDynamicArray", "signature": "ByteDynamicArray getBlockData(long blockIndex)", "full_signature": "private ByteDynamicArray getBlockData(long blockIndex)", "class_method_signature": "AODataSyncFile.getBlockData(long blockIndex)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "AODataSyncFile.close()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/github/NoahShen/jue/file/AODataSyncFile.java"}, "focal_method": {"identifier": "read", "parameters": "(ByteBuffer readBuffer, long position)", "modifiers": "public", "return": "int", "body": "public int read(ByteBuffer readBuffer, long position) throws IOException {\n\t\tif (position < FileHeader.HEADER_SIZE) {\n\t\t\tthrow new IllegalArgumentException(\"position must >= file header size:\" + FileHeader.HEADER_SIZE + \" current pos:\" + position);\n\t\t}\n\t\treadBufferLock.lock();\n\t\ttry\t{\n\t\t\t// \u6587\u4ef6\u5927\u5c0f\uff0c\u5305\u62ec\u4e4b\u524d\u5199\u5165\u7684\u7f13\u5b58\n\t\t\tlong allFileSize = size();\n\t\t\tif (allFileSize == 0) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (position >= allFileSize) {\n\t\t\t\tthrow new IllegalArgumentException(\"position must < file size[\" + allFileSize + \"]!\");\n\t\t\t}\n\t\t\t// \u6700\u5927\u8bfb\u53d6\u7684\u6570\u636e\u91cf\n\t\t\tint readSize = readBuffer.remaining();\n\t\t\t// \u8bfb\u53d6\u7684\u6570\u636e\u957f\u5ea6\n\t\t\tint count = 0;\n\t\t\t// \u83b7\u53d6\u9700\u8981\u8bfb\u53d6\u7684\u6570\u636e\u5bf9\u5e94\u7684\u6587\u4ef6\u5757\u7684\u4f4d\u7f6e\n\t\t\tlong[] blockIndexes = getBlockIndexes(position, readSize);\n\t\t\tfor (int i = 0; i < blockIndexes.length; ++i) {\n\t\t\t\tByteDynamicArray blockDataDArray = getBlockData(blockIndexes[i]);\n\t\t\t\tint readPos = 0;\n\t\t\t\tif (i == 0) {\n\t\t\t\t\t// \u79fb\u9664\u5934\u90e8\u540e\u7684\u76f8\u5bf9\u4f4d\u7f6e\n\t\t\t\t\tlong removedHeaderPos = position - FileHeader.HEADER_SIZE;\n\t\t\t\t\t// \u7b2c\u4e00\u4e2a\u6570\u636e\u5757\uff0c\u53ef\u80fd\u53ea\u8bfb\u53d6\u90e8\u5206\u6570\u636e\n\t\t\t\t\treadPos = (int) (removedHeaderPos % blockSize);\n\t\t\t\t}\n\t\t\t\tcount += blockDataDArray.read(readBuffer, readPos);\n\t\t\t}\n\t\t\treturn count;\n\t\t} finally {\n\t\t\treadBufferLock.unlock();\n\t\t}\n\t}", "signature": "int read(ByteBuffer readBuffer, long position)", "full_signature": "public int read(ByteBuffer readBuffer, long position)", "class_method_signature": "AODataSyncFile.read(ByteBuffer readBuffer, long position)", "testcase": false, "constructor": false, "invocations": ["lock", "size", "remaining", "getBlockIndexes", "getBlockData", "read", "unlock"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}