{"test_class": {"identifier": "DistinctActionTest", "superclass": "extends ActionTest", "interfaces": "", "fields": [], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/DistinctActionTest.java"}, "test_case": {"identifier": "testDistinctDesc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDistinctDesc() throws FoxtrotException {\n        DistinctRequest distinctRequest = new DistinctRequest();\n        distinctRequest.setTable(TestUtils.TEST_TABLE_NAME);\n        ResultSort resultSort = new ResultSort();\n        resultSort.setField(\"version\");\n        resultSort.setOrder(ResultSort.Order.desc);\n        distinctRequest.setNesting(Arrays.asList(resultSort));\n\n        DistinctResponse expectedResponse = new DistinctResponse();\n        expectedResponse.setHeaders(Arrays.asList(\"version\"));\n\n        List<List<String>> listResponse = new ArrayList<List<String>>();\n        listResponse.add(Arrays.asList(\"3\"));\n        listResponse.add(Arrays.asList(\"2\"));\n        listResponse.add(Arrays.asList(\"1\"));\n        expectedResponse.setResult(listResponse);\n\n        DistinctResponse distinctResponse = DistinctResponse.class.cast(getQueryExecutor().execute(distinctRequest));\n        assertNotNull(distinctResponse);\n        assertEquals(expectedResponse, distinctResponse);\n    }", "signature": "void testDistinctDesc()", "full_signature": "@Test public void testDistinctDesc()", "class_method_signature": "DistinctActionTest.testDistinctDesc()", "testcase": true, "constructor": false, "invocations": ["setTable", "setField", "setOrder", "setNesting", "asList", "setHeaders", "asList", "add", "asList", "add", "asList", "add", "asList", "setResult", "cast", "execute", "getQueryExecutor", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "DistinctAction", "superclass": "extends Action<DistinctRequest>", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DistinctAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DistinctAction.class)", "var_name": "logger"}, {"original_string": "private final ElasticsearchTuningConfig elasticsearchTuningConfig;", "modifier": "private final", "type": "ElasticsearchTuningConfig", "declarator": "elasticsearchTuningConfig", "var_name": "elasticsearchTuningConfig"}], "methods": [{"identifier": "DistinctAction", "parameters": "(DistinctRequest parameter, AnalyticsLoader analyticsLoader)", "modifiers": "public", "return": "", "signature": " DistinctAction(DistinctRequest parameter, AnalyticsLoader analyticsLoader)", "full_signature": "public  DistinctAction(DistinctRequest parameter, AnalyticsLoader analyticsLoader)", "class_method_signature": "DistinctAction.DistinctAction(DistinctRequest parameter, AnalyticsLoader analyticsLoader)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preprocess()", "full_signature": "@Override public void preprocess()", "class_method_signature": "DistinctAction.preprocess()", "testcase": false, "constructor": false}, {"identifier": "getMetricKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMetricKey()", "full_signature": "@Override public String getMetricKey()", "class_method_signature": "DistinctAction.getMetricKey()", "testcase": false, "constructor": false}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override public String getRequestCacheKey()", "class_method_signature": "DistinctAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "validateImpl", "parameters": "(DistinctRequest parameter)", "modifiers": "@Override public", "return": "void", "signature": "void validateImpl(DistinctRequest parameter)", "full_signature": "@Override public void validateImpl(DistinctRequest parameter)", "class_method_signature": "DistinctAction.validateImpl(DistinctRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(DistinctRequest request)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(DistinctRequest request)", "full_signature": "@Override public ActionResponse execute(DistinctRequest request)", "class_method_signature": "DistinctAction.execute(DistinctRequest request)", "testcase": false, "constructor": false}, {"identifier": "getRequestBuilder", "parameters": "(DistinctRequest request)", "modifiers": "@Override public", "return": "SearchRequestBuilder", "signature": "SearchRequestBuilder getRequestBuilder(DistinctRequest request)", "full_signature": "@Override public SearchRequestBuilder getRequestBuilder(DistinctRequest request)", "class_method_signature": "DistinctAction.getRequestBuilder(DistinctRequest request)", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "(org.elasticsearch.action.ActionResponse response, DistinctRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, DistinctRequest parameter)", "full_signature": "@Override public ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, DistinctRequest parameter)", "class_method_signature": "DistinctAction.getResponse(org.elasticsearch.action.ActionResponse response, DistinctRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getDistinctResponse", "parameters": "(DistinctRequest request, Aggregations aggregations)", "modifiers": "private", "return": "DistinctResponse", "signature": "DistinctResponse getDistinctResponse(DistinctRequest request, Aggregations aggregations)", "full_signature": "private DistinctResponse getDistinctResponse(DistinctRequest request, Aggregations aggregations)", "class_method_signature": "DistinctAction.getDistinctResponse(DistinctRequest request, Aggregations aggregations)", "testcase": false, "constructor": false}, {"identifier": "flatten", "parameters": "(\n            String parentKey,\n            List<String> fields,\n            List<List<String>> responseList,\n            Aggregations aggregations)", "modifiers": "private", "return": "void", "signature": "void flatten(\n            String parentKey,\n            List<String> fields,\n            List<List<String>> responseList,\n            Aggregations aggregations)", "full_signature": "private void flatten(\n            String parentKey,\n            List<String> fields,\n            List<List<String>> responseList,\n            Aggregations aggregations)", "class_method_signature": "DistinctAction.flatten(\n            String parentKey,\n            List<String> fields,\n            List<List<String>> responseList,\n            Aggregations aggregations)", "testcase": false, "constructor": false}, {"identifier": "getProperKey", "parameters": "(String parentKey, String currentKey)", "modifiers": "private", "return": "String", "signature": "String getProperKey(String parentKey, String currentKey)", "full_signature": "private String getProperKey(String parentKey, String currentKey)", "class_method_signature": "DistinctAction.getProperKey(String parentKey, String currentKey)", "testcase": false, "constructor": false}, {"identifier": "getValueList", "parameters": "(String parentKey, String currentKey)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getValueList(String parentKey, String currentKey)", "full_signature": "private List<String> getValueList(String parentKey, String currentKey)", "class_method_signature": "DistinctAction.getValueList(String parentKey, String currentKey)", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/DistinctAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(DistinctRequest request)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(DistinctRequest request) {\n        SearchRequestBuilder query;\n        try {\n            query = getConnection().getClient()\n                    .prepareSearch(ElasticsearchUtils.getIndices(request.getTable(), request))\n                    .setIndicesOptions(Utils.indicesOptions());\n            query.setQuery(new ElasticSearchQueryGenerator().genFilter(request.getFilters()))\n                    .setSize(QUERY_SIZE)\n                    .addAggregation(Utils.buildTermsAggregation(\n                            request.getNesting(), Sets.newHashSet(), elasticsearchTuningConfig.getAggregationSize()));\n        }\n        catch (Exception e) {\n            throw FoxtrotExceptions.queryCreationException(request, e);\n        }\n\n        try {\n            SearchResponse response = query.execute()\n                    .actionGet(getGetQueryTimeout());\n            return getResponse(response, getParameter());\n        }\n        catch (ElasticsearchException e) {\n            throw FoxtrotExceptions.createQueryExecutionException(request, e);\n        }\n    }", "signature": "ActionResponse execute(DistinctRequest request)", "full_signature": "@Override public ActionResponse execute(DistinctRequest request)", "class_method_signature": "DistinctAction.execute(DistinctRequest request)", "testcase": false, "constructor": false, "invocations": ["setIndicesOptions", "prepareSearch", "getClient", "getConnection", "getIndices", "getTable", "indicesOptions", "addAggregation", "setSize", "setQuery", "genFilter", "getFilters", "buildTermsAggregation", "getNesting", "newHashSet", "getAggregationSize", "queryCreationException", "actionGet", "execute", "getGetQueryTimeout", "getResponse", "getParameter", "createQueryExecutionException"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}