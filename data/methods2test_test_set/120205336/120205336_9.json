{"test_class": {"identifier": "ReductionTest", "superclass": "", "interfaces": "", "fields": [], "file": "splitmap/src/test/java/com/openkappa/splitmap/ReductionTest.java"}, "test_case": {"identifier": "testProductMomentCorrelationCoefficient", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testProductMomentCorrelationCoefficient() {\n    double[] values1 = IntStream.range(0, 10000)\n            .mapToDouble(i -> ThreadLocalRandom.current().nextDouble())\n            .toArray();\n    double[] values2 = IntStream.range(0, 10000)\n            .mapToDouble(i -> -ThreadLocalRandom.current().nextDouble())\n            .toArray();\n\n    double[] statistics = new double[6];\n    for (int i = 0; i < 10000; ++i) {\n      double sp = values1[i];\n      double sq = values2[i];\n      double spp = sp * sp;\n      double sqq = sq * sq;\n      double spq = sp * sq;\n      statistics[0] += sp;\n      statistics[1] += sq;\n      statistics[2] += spp;\n      statistics[3] += sqq;\n      statistics[4] += spq;\n      statistics[5] += 1;\n    }\n\n    double sp = statistics[0];\n    double sq = statistics[1];\n    double spp = statistics[2];\n    double sqq = statistics[3];\n    double spq = statistics[4];\n    double n = statistics[5];\n    double pmccExpected = (n * spq - sq * sp) / (Math.sqrt((n * spp - sp * sp) * (n * sqq - sq * sq)));\n\n    DoubleArrayPageWriter writer1 = new DoubleArrayPageWriter(Involutions::reverse);\n    DoubleArrayPageWriter writer2 = new DoubleArrayPageWriter(Involutions::reverse);\n    SplitMapPageWriter filterWriter = new SplitMapPageWriter(Involutions::reverse);\n\n    int key = 0;\n    int multiple = 0;\n    for (int k = 0; k < 20; ++k) {\n      for (int i = 0; i < 500; ++i) {\n        filterWriter.add(key + i);\n        writer1.add(key + i, values1[i + multiple * 500]);\n        writer2.add(key + i, values2[i + multiple * 500]);\n      }\n      ++multiple;\n      key += 1 << 16;\n    }\n\n    SplitMap filter = filterWriter.toSplitMap();\n    PrefixIndex<ChunkedDoubleArray> pi1 = writer1.toIndex();\n    PrefixIndex<ChunkedDoubleArray> pi2 = writer2.toIndex();\n    double pmcc = filter.stream()\n            .parallel()\n            .map(partition -> partition.reduce(SimpleLinearRegression.<InputModel>reducer(pi1, pi2)))\n            .collect(SimpleLinearRegression.pmcc());\n    assertEquals(pmcc, pmccExpected, 1E-5);\n  }", "signature": "void testProductMomentCorrelationCoefficient()", "full_signature": "@Test public void testProductMomentCorrelationCoefficient()", "class_method_signature": "ReductionTest.testProductMomentCorrelationCoefficient()", "testcase": true, "constructor": false, "invocations": ["toArray", "mapToDouble", "range", "nextDouble", "current", "toArray", "mapToDouble", "range", "nextDouble", "current", "sqrt", "add", "add", "add", "toSplitMap", "toIndex", "toIndex", "collect", "map", "parallel", "stream", "reduce", "reducer", "pmcc", "assertEquals"]}, "focal_class": {"identifier": "Reduction", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "sum", "parameters": "(double[] l, double[] r)", "modifiers": "public static", "return": "double[]", "signature": "double[] sum(double[] l, double[] r)", "full_signature": "public static double[] sum(double[] l, double[] r)", "class_method_signature": "Reduction.sum(double[] l, double[] r)", "testcase": false, "constructor": false}, {"identifier": "sumRightIntoLeft", "parameters": "(double[] l, double[] r)", "modifiers": "public static", "return": "double[]", "signature": "double[] sumRightIntoLeft(double[] l, double[] r)", "full_signature": "public static double[] sumRightIntoLeft(double[] l, double[] r)", "class_method_signature": "Reduction.sumRightIntoLeft(double[] l, double[] r)", "testcase": false, "constructor": false}, {"identifier": "horizontalSum", "parameters": "(double[] vector)", "modifiers": "public static", "return": "double", "signature": "double horizontalSum(double[] vector)", "full_signature": "public static double horizontalSum(double[] vector)", "class_method_signature": "Reduction.horizontalSum(double[] vector)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(double x, double y)", "modifiers": "public static", "return": "double", "signature": "double add(double x, double y)", "full_signature": "public static double add(double x, double y)", "class_method_signature": "Reduction.add(double x, double y)", "testcase": false, "constructor": false}], "file": "splitmap/src/main/java/com/openkappa/splitmap/Reduction.java"}, "focal_method": {"identifier": "add", "parameters": "(double x, double y)", "modifiers": "public static", "return": "double", "body": "public static double add(double x, double y) {\n    return x + y;\n  }", "signature": "double add(double x, double y)", "full_signature": "public static double add(double x, double y)", "class_method_signature": "Reduction.add(double x, double y)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 120205336, "url": "https://github.com/richardstartin/splitmap", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 253, "license": "licensed"}}