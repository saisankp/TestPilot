{"test_class": {"identifier": "SingleWriterMultipleReaderFileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SingleWriterMultipleReaderFile reader;", "modifier": "private", "type": "SingleWriterMultipleReaderFile", "declarator": "reader", "var_name": "reader"}, {"original_string": "private File activeFile;", "modifier": "private", "type": "File", "declarator": "activeFile", "var_name": "activeFile"}, {"original_string": "private File workFile;", "modifier": "private", "type": "File", "declarator": "workFile", "var_name": "workFile"}, {"original_string": "private FileOutputStream fos;", "modifier": "private", "type": "FileOutputStream", "declarator": "fos", "var_name": "fos"}], "file": "app/src/test/java/org/jak_linux/dns66/SingleWriterMultipleReaderFileTest.java"}, "test_case": {"identifier": "testStartWrite_success", "parameters": "()", "modifiers": "@Test @PrepareForTest({FileOutputStream.class, SingleWriterMultipleReaderFile.class}) public", "return": "void", "body": "@Test\n    @PrepareForTest({FileOutputStream.class, SingleWriterMultipleReaderFile.class})\n    public void testStartWrite_success() throws Exception {\n        when(reader.startWrite()).thenCallRealMethod();\n        when(workFile.exists()).thenReturn(false);\n        when(workFile.getPath()).thenReturn(\"/nonexisting/path/for/dns66\");\n        whenNew(FileOutputStream.class).withAnyArguments().thenReturn(fos);\n        assertSame(fos, reader.startWrite());\n    }", "signature": "void testStartWrite_success()", "full_signature": "@Test @PrepareForTest({FileOutputStream.class, SingleWriterMultipleReaderFile.class}) public void testStartWrite_success()", "class_method_signature": "SingleWriterMultipleReaderFileTest.testStartWrite_success()", "testcase": true, "constructor": false, "invocations": ["thenCallRealMethod", "when", "startWrite", "thenReturn", "when", "exists", "thenReturn", "when", "getPath", "thenReturn", "withAnyArguments", "whenNew", "assertSame", "startWrite"]}, "focal_class": {"identifier": "SingleWriterMultipleReaderFile", "superclass": "", "interfaces": "", "fields": [{"original_string": "File activeFile;", "modifier": "", "type": "File", "declarator": "activeFile", "var_name": "activeFile"}, {"original_string": "File workFile;", "modifier": "", "type": "File", "declarator": "workFile", "var_name": "workFile"}], "methods": [{"identifier": "SingleWriterMultipleReaderFile", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " SingleWriterMultipleReaderFile(File file)", "full_signature": "public  SingleWriterMultipleReaderFile(File file)", "class_method_signature": "SingleWriterMultipleReaderFile.SingleWriterMultipleReaderFile(File file)", "testcase": false, "constructor": true}, {"identifier": "openRead", "parameters": "()", "modifiers": "public", "return": "InputStream", "signature": "InputStream openRead()", "full_signature": "public InputStream openRead()", "class_method_signature": "SingleWriterMultipleReaderFile.openRead()", "testcase": false, "constructor": false}, {"identifier": "startWrite", "parameters": "()", "modifiers": "public", "return": "FileOutputStream", "signature": "FileOutputStream startWrite()", "full_signature": "public FileOutputStream startWrite()", "class_method_signature": "SingleWriterMultipleReaderFile.startWrite()", "testcase": false, "constructor": false}, {"identifier": "finishWrite", "parameters": "(FileOutputStream stream)", "modifiers": "public", "return": "void", "signature": "void finishWrite(FileOutputStream stream)", "full_signature": "public void finishWrite(FileOutputStream stream)", "class_method_signature": "SingleWriterMultipleReaderFile.finishWrite(FileOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "failWrite", "parameters": "(FileOutputStream stream)", "modifiers": "public", "return": "void", "signature": "void failWrite(FileOutputStream stream)", "full_signature": "public void failWrite(FileOutputStream stream)", "class_method_signature": "SingleWriterMultipleReaderFile.failWrite(FileOutputStream stream)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/SingleWriterMultipleReaderFile.java"}, "focal_method": {"identifier": "startWrite", "parameters": "()", "modifiers": "public", "return": "FileOutputStream", "body": "public FileOutputStream startWrite() throws IOException {\n        if (workFile.exists() && !workFile.delete())\n            throw new IOException(\"Cannot delete working file\");\n\n        return new FileOutputStream(workFile);\n    }", "signature": "FileOutputStream startWrite()", "full_signature": "public FileOutputStream startWrite()", "class_method_signature": "SingleWriterMultipleReaderFile.startWrite()", "testcase": false, "constructor": false, "invocations": ["exists", "delete"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}