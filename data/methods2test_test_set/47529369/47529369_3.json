{"test_class": {"identifier": "UserSessionLookupTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass())", "var_name": "log"}, {"original_string": "private static final String NON_EXISTENT = \"usertest\";", "modifier": "private static final", "type": "String", "declarator": "NON_EXISTENT = \"usertest\"", "var_name": "NON_EXISTENT"}, {"original_string": "private static final String USER_NAME = \"testuser\";", "modifier": "private static final", "type": "String", "declarator": "USER_NAME = \"testuser\"", "var_name": "USER_NAME"}, {"original_string": "private static final int METRICS_ITR = 100;", "modifier": "private static final", "type": "int", "declarator": "METRICS_ITR = 100", "var_name": "METRICS_ITR"}, {"original_string": "@Autowired\n  private UserSessionLookup lookup;", "modifier": "@Autowired\n  private", "type": "UserSessionLookup", "declarator": "lookup", "var_name": "lookup"}, {"original_string": "@Autowired\n  private UserSessionAssist assist;", "modifier": "@Autowired\n  private", "type": "UserSessionAssist", "declarator": "assist", "var_name": "assist"}, {"original_string": "@Autowired\n  private UserRepository userRepo;", "modifier": "@Autowired\n  private", "type": "UserRepository", "declarator": "userRepo", "var_name": "userRepo"}, {"original_string": "@Autowired\n  private UserSessionRepository userSessionRepo;", "modifier": "@Autowired\n  private", "type": "UserSessionRepository", "declarator": "userSessionRepo", "var_name": "userSessionRepo"}, {"original_string": "@Autowired\n  private MetricsHelper helper;", "modifier": "@Autowired\n  private", "type": "MetricsHelper", "declarator": "helper", "var_name": "helper"}, {"original_string": "@Autowired\n  private ObjectMapper mapper;", "modifier": "@Autowired\n  private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private Long sessionId;", "modifier": "private", "type": "Long", "declarator": "sessionId", "var_name": "sessionId"}, {"original_string": "@Autowired\n  private CacheManager cacheManager;", "modifier": "@Autowired\n  private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "private Cache cache;", "modifier": "private", "type": "Cache", "declarator": "cache", "var_name": "cache"}], "file": "GameBoot/src/test/java/com/github/mrstampy/gameboot/usersession/UserSessionLookupTest.java"}, "test_case": {"identifier": "testExceptions", "parameters": "()", "modifiers": "@Test @Transactional public", "return": "void", "body": "@Test\n  @Transactional\n  public void testExceptions() throws Exception {\n    gameBootExcpected(() -> lookup.expected(NON_EXISTENT), \"No session for username\");\n    gameBootExcpected(() -> lookup.expected((String) null), \"Null username\");\n    gameBootExcpected(() -> lookup.expected((Long) null), \"Null id\");\n    gameBootExcpected(() -> lookup.expected(Long.MAX_VALUE), \"No session for id\");\n  }", "signature": "void testExceptions()", "full_signature": "@Test @Transactional public void testExceptions()", "class_method_signature": "UserSessionLookupTest.testExceptions()", "testcase": true, "constructor": false, "invocations": ["gameBootExcpected", "expected", "gameBootExcpected", "expected", "gameBootExcpected", "expected", "gameBootExcpected", "expected"]}, "focal_class": {"identifier": "UserSessionLookup", "superclass": "", "interfaces": "implements ResponseContextCodes", "fields": [{"original_string": "private static final String CACHED_SESSION_TIMER = \"CachedSessionTimer\";", "modifier": "private static final", "type": "String", "declarator": "CACHED_SESSION_TIMER = \"CachedSessionTimer\"", "var_name": "CACHED_SESSION_TIMER"}, {"original_string": "public static final String MDC_SESSION_ID = \"sessionId\";", "modifier": "public static final", "type": "String", "declarator": "MDC_SESSION_ID = \"sessionId\"", "var_name": "MDC_SESSION_ID"}, {"original_string": "public static final String MDC_USER_ID = \"userId\";", "modifier": "public static final", "type": "String", "declarator": "MDC_USER_ID = \"userId\"", "var_name": "MDC_USER_ID"}, {"original_string": "@Autowired\n  private UserSessionAssist assist;", "modifier": "@Autowired\n  private", "type": "UserSessionAssist", "declarator": "assist", "var_name": "assist"}, {"original_string": "@Autowired\n  private ActiveSessions activeSessions;", "modifier": "@Autowired\n  private", "type": "ActiveSessions", "declarator": "activeSessions", "var_name": "activeSessions"}, {"original_string": "@Autowired\n  private MetricsHelper helper;", "modifier": "@Autowired\n  private", "type": "MetricsHelper", "declarator": "helper", "var_name": "helper"}, {"original_string": "@Autowired\n  private UserSessionRepository repository;", "modifier": "@Autowired\n  private", "type": "UserSessionRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired\n  private ResponseContextLookup lookup;", "modifier": "@Autowired\n  private", "type": "ResponseContextLookup", "declarator": "lookup", "var_name": "lookup"}], "methods": [{"identifier": "postConstruct", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void postConstruct()", "full_signature": "@PostConstruct public void postConstruct()", "class_method_signature": "UserSessionLookup.postConstruct()", "testcase": false, "constructor": false}, {"identifier": "expected", "parameters": "(String userName)", "modifiers": "public", "return": "UserSession", "signature": "UserSession expected(String userName)", "full_signature": "public UserSession expected(String userName)", "class_method_signature": "UserSessionLookup.expected(String userName)", "testcase": false, "constructor": false}, {"identifier": "expected", "parameters": "(Long id)", "modifiers": "public", "return": "UserSession", "signature": "UserSession expected(Long id)", "full_signature": "public UserSession expected(Long id)", "class_method_signature": "UserSessionLookup.expected(Long id)", "testcase": false, "constructor": false}, {"identifier": "hasSession", "parameters": "(String userName)", "modifiers": "public", "return": "boolean", "signature": "boolean hasSession(String userName)", "full_signature": "public boolean hasSession(String userName)", "class_method_signature": "UserSessionLookup.hasSession(String userName)", "testcase": false, "constructor": false}, {"identifier": "hasSession", "parameters": "(Long id)", "modifiers": "public", "return": "boolean", "signature": "boolean hasSession(Long id)", "full_signature": "public boolean hasSession(Long id)", "class_method_signature": "UserSessionLookup.hasSession(Long id)", "testcase": false, "constructor": false}, {"identifier": "clearMDC", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearMDC()", "full_signature": "public void clearMDC()", "class_method_signature": "UserSessionLookup.clearMDC()", "testcase": false, "constructor": false}, {"identifier": "sessionCheck", "parameters": "(UserSession session)", "modifiers": "private", "return": "UserSession", "signature": "UserSession sessionCheck(UserSession session)", "full_signature": "private UserSession sessionCheck(UserSession session)", "class_method_signature": "UserSessionLookup.sessionCheck(UserSession session)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(List<UserSession> sessions, Predicate<UserSession> p)", "modifiers": "private", "return": "Optional<UserSession>", "signature": "Optional<UserSession> find(List<UserSession> sessions, Predicate<UserSession> p)", "full_signature": "private Optional<UserSession> find(List<UserSession> sessions, Predicate<UserSession> p)", "class_method_signature": "UserSessionLookup.find(List<UserSession> sessions, Predicate<UserSession> p)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(int code, boolean condition, String msg)", "modifiers": "private", "return": "void", "signature": "void check(int code, boolean condition, String msg)", "full_signature": "private void check(int code, boolean condition, String msg)", "class_method_signature": "UserSessionLookup.check(int code, boolean condition, String msg)", "testcase": false, "constructor": false}], "file": "GameBoot/src/main/java/com/github/mrstampy/gameboot/usersession/UserSessionLookup.java"}, "focal_method": {"identifier": "expected", "parameters": "(String userName)", "modifiers": "public", "return": "UserSession", "body": "public UserSession expected(String userName) throws GameBootRuntimeException {\n    Optional<Context> ctx = helper.startTimer(CACHED_SESSION_TIMER);\n\n    try {\n      String noSession = \"No session for \" + userName;\n\n      check(NO_USERNAME, isEmpty(userName), \"No username specified\");\n\n      check(NO_USER_SESSION, !activeSessions.hasSession(userName), noSession);\n\n      List<UserSession> sessions = assist.activeSessions();\n\n      Optional<UserSession> o = find(sessions, us -> us.getUser().getUserName().equals(userName));\n\n      // may not yet be in the cached list\n      return o.isPresent() ? o.get() : sessionCheck(repository.findOpenSession(userName));\n    } finally {\n      helper.stopTimer(ctx);\n    }\n  }", "signature": "UserSession expected(String userName)", "full_signature": "public UserSession expected(String userName)", "class_method_signature": "UserSessionLookup.expected(String userName)", "testcase": false, "constructor": false, "invocations": ["startTimer", "check", "isEmpty", "check", "hasSession", "activeSessions", "find", "equals", "getUserName", "getUser", "isPresent", "get", "sessionCheck", "findOpenSession", "stopTimer"]}, "repository": {"repo_id": 47529369, "url": "https://github.com/mrstampy/gameboot", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 15, "size": 1118, "license": "licensed"}}