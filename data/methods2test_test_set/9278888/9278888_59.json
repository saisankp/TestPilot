{"test_class": {"identifier": "HttpSamplerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock HttpClientRequest httpClientRequest;", "modifier": "@Mock", "type": "HttpClientRequest", "declarator": "httpClientRequest", "var_name": "httpClientRequest"}, {"original_string": "@Mock HttpServerRequest httpServerRequest;", "modifier": "@Mock", "type": "HttpServerRequest", "declarator": "httpServerRequest", "var_name": "httpServerRequest"}, {"original_string": "Object request = new Object();", "modifier": "", "type": "Object", "declarator": "request = new Object()", "var_name": "request"}], "file": "instrumentation/http/src/test/java/brave/http/HttpSamplerTest.java"}, "test_case": {"identifier": "trySample_doesntSeeNullWhenUnwrappedNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void trySample_doesntSeeNullWhenUnwrappedNull() {\n    AtomicBoolean reachedAssertion = new AtomicBoolean();\n    HttpSampler sampler = new HttpSampler() {\n      @Override public <Req> Boolean trySample(HttpAdapter<Req, ?> adapter, Req req) {\n        assertThat(req).isSameAs(NULL_SENTINEL);\n        reachedAssertion.set(true);\n        return true;\n      }\n    };\n\n    assertThat(sampler.trySample(httpClientRequest)).isTrue();\n    assertThat(reachedAssertion.getAndSet(false)).isTrue();\n\n    assertThat(sampler.trySample(httpServerRequest)).isTrue();\n    assertThat(reachedAssertion.getAndSet(false)).isTrue();\n  }", "signature": "void trySample_doesntSeeNullWhenUnwrappedNull()", "full_signature": "@Test public void trySample_doesntSeeNullWhenUnwrappedNull()", "class_method_signature": "HttpSamplerTest.trySample_doesntSeeNullWhenUnwrappedNull()", "testcase": true, "constructor": false, "invocations": ["isSameAs", "assertThat", "set", "isTrue", "assertThat", "trySample", "isTrue", "assertThat", "getAndSet", "isTrue", "assertThat", "trySample", "isTrue", "assertThat", "getAndSet"]}, "focal_class": {"identifier": "HttpSampler", "superclass": "", "interfaces": "implements SamplerFunction<HttpRequest>", "fields": [{"original_string": "public static final HttpSampler TRACE_ID = new HttpSampler() {\n    @Override public Boolean trySample(HttpRequest request) {\n      return null;\n    }\n\n    @Override @Nullable public <Req> Boolean trySample(HttpAdapter<Req, ?> adapter, Req request) {\n      return null;\n    }\n\n    @Override public String toString() {\n      return \"DeferDecision\";\n    }\n  };", "modifier": "public static final", "type": "HttpSampler", "declarator": "TRACE_ID = new HttpSampler() {\n    @Override public Boolean trySample(HttpRequest request) {\n      return null;\n    }\n\n    @Override @Nullable public <Req> Boolean trySample(HttpAdapter<Req, ?> adapter, Req request) {\n      return null;\n    }\n\n    @Override public String toString() {\n      return \"DeferDecision\";\n    }\n  }", "var_name": "TRACE_ID"}, {"original_string": "public static final HttpSampler NEVER_SAMPLE = new HttpSampler() {\n    @Override public Boolean trySample(HttpRequest request) {\n      return false;\n    }\n\n    @Override public <Req> Boolean trySample(HttpAdapter<Req, ?> adapter, Req request) {\n      return false;\n    }\n\n    @Override public String toString() {\n      return \"NeverSample\";\n    }\n  };", "modifier": "public static final", "type": "HttpSampler", "declarator": "NEVER_SAMPLE = new HttpSampler() {\n    @Override public Boolean trySample(HttpRequest request) {\n      return false;\n    }\n\n    @Override public <Req> Boolean trySample(HttpAdapter<Req, ?> adapter, Req request) {\n      return false;\n    }\n\n    @Override public String toString() {\n      return \"NeverSample\";\n    }\n  }", "var_name": "NEVER_SAMPLE"}], "methods": [{"identifier": "trySample", "parameters": "(HttpRequest request)", "modifiers": "@Override @Nullable public", "return": "Boolean", "signature": "Boolean trySample(HttpRequest request)", "full_signature": "@Override @Nullable public Boolean trySample(HttpRequest request)", "class_method_signature": "HttpSampler.trySample(HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "trySample", "parameters": "(HttpAdapter<Req, ?> adapter, Req request)", "modifiers": "@Nullable public abstract", "return": "Boolean", "signature": "Boolean trySample(HttpAdapter<Req, ?> adapter, Req request)", "full_signature": "@Nullable public abstract Boolean trySample(HttpAdapter<Req, ?> adapter, Req request)", "class_method_signature": "HttpSampler.trySample(HttpAdapter<Req, ?> adapter, Req request)", "testcase": false, "constructor": false}, {"identifier": "fromHttpRequestSampler", "parameters": "(SamplerFunction<HttpRequest> sampler)", "modifiers": "static", "return": "HttpSampler", "signature": "HttpSampler fromHttpRequestSampler(SamplerFunction<HttpRequest> sampler)", "full_signature": "static HttpSampler fromHttpRequestSampler(SamplerFunction<HttpRequest> sampler)", "class_method_signature": "HttpSampler.fromHttpRequestSampler(SamplerFunction<HttpRequest> sampler)", "testcase": false, "constructor": false}, {"identifier": "toHttpRequestSampler", "parameters": "(SamplerFunction<HttpRequest> sampler)", "modifiers": "static", "return": "SamplerFunction<HttpRequest>", "signature": "SamplerFunction<HttpRequest> toHttpRequestSampler(SamplerFunction<HttpRequest> sampler)", "full_signature": "static SamplerFunction<HttpRequest> toHttpRequestSampler(SamplerFunction<HttpRequest> sampler)", "class_method_signature": "HttpSampler.toHttpRequestSampler(SamplerFunction<HttpRequest> sampler)", "testcase": false, "constructor": false}], "file": "instrumentation/http/src/main/java/brave/http/HttpSampler.java"}, "focal_method": {"identifier": "trySample", "parameters": "(HttpRequest request)", "modifiers": "@Override @Nullable public", "return": "Boolean", "body": "@Override @Nullable public Boolean trySample(HttpRequest request) {\n    if (request == null) return null;\n\n    Object unwrapped = request.unwrap();\n    if (unwrapped == null) unwrapped = NULL_SENTINEL; // Ensure adapter methods never see null\n\n    HttpAdapter<Object, Void> adapter;\n    if (request instanceof HttpClientRequest) {\n      adapter = new HttpClientAdapters.ToRequestAdapter((HttpClientRequest) request, unwrapped);\n    } else {\n      adapter = new HttpServerAdapters.ToRequestAdapter((HttpServerRequest) request, unwrapped);\n    }\n\n    return trySample(adapter, unwrapped);\n  }", "signature": "Boolean trySample(HttpRequest request)", "full_signature": "@Override @Nullable public Boolean trySample(HttpRequest request)", "class_method_signature": "HttpSampler.trySample(HttpRequest request)", "testcase": false, "constructor": false, "invocations": ["unwrap", "trySample"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}