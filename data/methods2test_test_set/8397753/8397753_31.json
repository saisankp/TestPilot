{"test_class": {"identifier": "TestCliGitLog", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "private File repoDirectory;", "modifier": "private", "type": "File", "declarator": "repoDirectory", "var_name": "repoDirectory"}, {"original_string": "private GitCommit commit;", "modifier": "private", "type": "GitCommit", "declarator": "commit", "var_name": "commit"}, {"original_string": "private GitAdd add;", "modifier": "private", "type": "GitAdd", "declarator": "add", "var_name": "add"}], "file": "javagit/src/test/java/edu/nyu/cs/javagit/client/cli/TestCliGitLog.java"}, "test_case": {"identifier": "testGitLogSha", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGitLogSha() throws IOException, JavaGitException {\n\n        CliGitLog gitLog = new CliGitLog();\n        GitLogOptions options = new GitLogOptions();\n        options.setOptFileDetails(true);\n        List<Commit> log = gitLog.log(repoDirectory, options);\n        for (int i = 0; i < log.size(); i++) {\n            if (log.get(i).getSha().length() != 40) {\n                fail(\"Failed Sha not correct\");\n            }\n        }\n    }", "signature": "void testGitLogSha()", "full_signature": "@Test public void testGitLogSha()", "class_method_signature": "TestCliGitLog.testGitLogSha()", "testcase": true, "constructor": false, "invocations": ["setOptFileDetails", "log", "size", "length", "getSha", "get", "fail"]}, "focal_class": {"identifier": "CliGitLog", "superclass": "", "interfaces": "implements IGitLog", "fields": [], "methods": [{"identifier": "log", "parameters": "(File repositoryPath, GitLogOptions options)", "modifiers": "public", "return": "List<Commit>", "signature": "List<Commit> log(File repositoryPath, GitLogOptions options)", "full_signature": "public List<Commit> log(File repositoryPath, GitLogOptions options)", "class_method_signature": "CliGitLog.log(File repositoryPath, GitLogOptions options)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(File repositoryPath)", "modifiers": "public", "return": "List<Commit>", "signature": "List<Commit> log(File repositoryPath)", "full_signature": "public List<Commit> log(File repositoryPath)", "class_method_signature": "CliGitLog.log(File repositoryPath)", "testcase": false, "constructor": false}, {"identifier": "buildCommand", "parameters": "(File repositoryPath, GitLogOptions options)", "modifiers": "private", "return": "List<String>", "signature": "List<String> buildCommand(File repositoryPath, GitLogOptions options)", "full_signature": "private List<String> buildCommand(File repositoryPath, GitLogOptions options)", "class_method_signature": "CliGitLog.buildCommand(File repositoryPath, GitLogOptions options)", "testcase": false, "constructor": false}], "file": "javagit/src/main/java/edu/nyu/cs/javagit/client/cli/CliGitLog.java"}, "focal_method": {"identifier": "log", "parameters": "(File repositoryPath, GitLogOptions options)", "modifiers": "public", "return": "List<Commit>", "body": "public List<Commit> log(File repositoryPath, GitLogOptions options)\n\tthrows JavaGitException, IOException {\n\t\tCheckUtilities.checkFileValidity(repositoryPath);\n\t\tGitLogParser parser = new GitLogParser();\n\t\tList<String> command = buildCommand(repositoryPath, options);\n\t\tGitLogResponse response =  (GitLogResponse) ProcessUtilities.runCommand(repositoryPath,\n\t\t\t\tcommand, parser);\n\t\tif (response.containsError()) {\n\t\t\tint line = response.getError(0).getLineNumber();\n\t\t\tString error = response.getError(0).error();\n\t\t\tthrow new JavaGitException(420001, \"Line \" + line + \", \" + error);\n\t\t}\n\t\treturn response.getLog();\n\t}", "signature": "List<Commit> log(File repositoryPath, GitLogOptions options)", "full_signature": "public List<Commit> log(File repositoryPath, GitLogOptions options)", "class_method_signature": "CliGitLog.log(File repositoryPath, GitLogOptions options)", "testcase": false, "constructor": false, "invocations": ["checkFileValidity", "buildCommand", "runCommand", "containsError", "getLineNumber", "getError", "error", "getError", "getLog"]}, "repository": {"repo_id": 8397753, "url": "https://github.com/bit-man/SwissArmyJavaGit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 1549, "license": "licensed"}}