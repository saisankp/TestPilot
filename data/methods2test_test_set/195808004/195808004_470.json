{"test_class": {"identifier": "TestDelegationTokenRenewer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = \n      LogFactory.getLog(TestDelegationTokenRenewer.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = \n      LogFactory.getLog(TestDelegationTokenRenewer.class)", "var_name": "LOG"}, {"original_string": "private static final Text KIND = new Text(\"HDFS_DELEGATION_TOKEN\");", "modifier": "private static final", "type": "Text", "declarator": "KIND = new Text(\"HDFS_DELEGATION_TOKEN\")", "var_name": "KIND"}, {"original_string": "private static BlockingQueue<Event> eventQueue;", "modifier": "private static", "type": "BlockingQueue<Event>", "declarator": "eventQueue", "var_name": "eventQueue"}, {"original_string": "private static volatile AtomicInteger counter;", "modifier": "private static volatile", "type": "AtomicInteger", "declarator": "counter", "var_name": "counter"}, {"original_string": "private static AsyncDispatcher dispatcher;", "modifier": "private static", "type": "AsyncDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "private static Configuration conf;", "modifier": "private static", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "DelegationTokenRenewer delegationTokenRenewer;", "modifier": "", "type": "DelegationTokenRenewer", "declarator": "delegationTokenRenewer", "var_name": "delegationTokenRenewer"}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/security/TestDelegationTokenRenewer.java"}, "test_case": {"identifier": "testAppSubmissionWithPreviousToken", "parameters": "()", "modifiers": "@Test (timeout = 30000) public", "return": "void", "body": "@Test (timeout = 30000)\n  public void testAppSubmissionWithPreviousToken() throws Exception{\n    MockRM rm = new TestSecurityMockRM(conf, null);\n    rm.start();\n    final MockNM nm1 =\n        new MockNM(\"127.0.0.1:1234\", 15120, rm.getResourceTrackerService());\n    nm1.registerNode();\n\n    // create Token1:\n    Text userText1 = new Text(\"user\");\n    DelegationTokenIdentifier dtId1 =\n        new DelegationTokenIdentifier(userText1, new Text(\"renewer1\"),\n          userText1);\n    final Token<DelegationTokenIdentifier> token1 =\n        new Token<DelegationTokenIdentifier>(dtId1.getBytes(),\n          \"password1\".getBytes(), dtId1.getKind(), new Text(\"service1\"));\n\n    Credentials credentials = new Credentials();\n    credentials.addToken(userText1, token1);\n\n    // submit app1 with a token, set cancelTokenWhenComplete to false;\n    RMApp app1 =\n        rm.submitApp(200, \"name\", \"user\", null, false, null, 2, credentials,\n          null, true, false, false, null, 0, null, false);\n    MockAM am1 = MockRM.launchAndRegisterAM(app1, rm, nm1);\n    rm.waitForState(app1.getApplicationId(), RMAppState.RUNNING);\n\n    // submit app2 with the same token, set cancelTokenWhenComplete to true;\n    RMApp app2 =\n        rm.submitApp(200, \"name\", \"user\", null, false, null, 2, credentials,\n          null, true, false, false, null, 0, null, true);\n    MockAM am2 = MockRM.launchAndRegisterAM(app2, rm, nm1);\n    rm.waitForState(app2.getApplicationId(), RMAppState.RUNNING);\n    MockRM.finishAMAndVerifyAppState(app2, rm, nm1, am2);\n    Assert.assertTrue(rm.getRMContext().getDelegationTokenRenewer()\n      .getAllTokens().containsKey(token1));\n\n    MockRM.finishAMAndVerifyAppState(app1, rm, nm1, am1);\n    // app2 completes, app1 is still running, check the token is not cancelled\n    Assert.assertFalse(Renewer.cancelled);\n  }", "signature": "void testAppSubmissionWithPreviousToken()", "full_signature": "@Test (timeout = 30000) public void testAppSubmissionWithPreviousToken()", "class_method_signature": "TestDelegationTokenRenewer.testAppSubmissionWithPreviousToken()", "testcase": true, "constructor": false, "invocations": ["start", "getResourceTrackerService", "registerNode", "getBytes", "getBytes", "getKind", "addToken", "submitApp", "launchAndRegisterAM", "waitForState", "getApplicationId", "submitApp", "launchAndRegisterAM", "waitForState", "getApplicationId", "finishAMAndVerifyAppState", "assertTrue", "containsKey", "getAllTokens", "getDelegationTokenRenewer", "getRMContext", "finishAMAndVerifyAppState", "assertFalse"]}, "focal_class": {"identifier": "DelegationTokenRenewer", "superclass": "extends AbstractService", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = \n      LogFactory.getLog(DelegationTokenRenewer.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = \n      LogFactory.getLog(DelegationTokenRenewer.class)", "var_name": "LOG"}, {"original_string": "public static final String SCHEME = \"hdfs\";", "modifier": "public static final", "type": "String", "declarator": "SCHEME = \"hdfs\"", "var_name": "SCHEME"}, {"original_string": "private Timer renewalTimer;", "modifier": "private", "type": "Timer", "declarator": "renewalTimer", "var_name": "renewalTimer"}, {"original_string": "private RMContext rmContext;", "modifier": "private", "type": "RMContext", "declarator": "rmContext", "var_name": "rmContext"}, {"original_string": "private DelegationTokenCancelThread dtCancelThread =\n    new DelegationTokenCancelThread();", "modifier": "private", "type": "DelegationTokenCancelThread", "declarator": "dtCancelThread =\n    new DelegationTokenCancelThread()", "var_name": "dtCancelThread"}, {"original_string": "private ThreadPoolExecutor renewerService;", "modifier": "private", "type": "ThreadPoolExecutor", "declarator": "renewerService", "var_name": "renewerService"}, {"original_string": "private ConcurrentMap<ApplicationId, Set<DelegationTokenToRenew>> appTokens =\n      new ConcurrentHashMap<ApplicationId, Set<DelegationTokenToRenew>>();", "modifier": "private", "type": "ConcurrentMap<ApplicationId, Set<DelegationTokenToRenew>>", "declarator": "appTokens =\n      new ConcurrentHashMap<ApplicationId, Set<DelegationTokenToRenew>>()", "var_name": "appTokens"}, {"original_string": "private ConcurrentMap<Token<?>, DelegationTokenToRenew> allTokens =\n      new ConcurrentHashMap<Token<?>, DelegationTokenToRenew>();", "modifier": "private", "type": "ConcurrentMap<Token<?>, DelegationTokenToRenew>", "declarator": "allTokens =\n      new ConcurrentHashMap<Token<?>, DelegationTokenToRenew>()", "var_name": "allTokens"}, {"original_string": "private final ConcurrentMap<ApplicationId, Long> delayedRemovalMap =\n      new ConcurrentHashMap<ApplicationId, Long>();", "modifier": "private final", "type": "ConcurrentMap<ApplicationId, Long>", "declarator": "delayedRemovalMap =\n      new ConcurrentHashMap<ApplicationId, Long>()", "var_name": "delayedRemovalMap"}, {"original_string": "private long tokenRemovalDelayMs;", "modifier": "private", "type": "long", "declarator": "tokenRemovalDelayMs", "var_name": "tokenRemovalDelayMs"}, {"original_string": "private Thread delayedRemovalThread;", "modifier": "private", "type": "Thread", "declarator": "delayedRemovalThread", "var_name": "delayedRemovalThread"}, {"original_string": "private ReadWriteLock serviceStateLock = new ReentrantReadWriteLock();", "modifier": "private", "type": "ReadWriteLock", "declarator": "serviceStateLock = new ReentrantReadWriteLock()", "var_name": "serviceStateLock"}, {"original_string": "private volatile boolean isServiceStarted;", "modifier": "private volatile", "type": "boolean", "declarator": "isServiceStarted", "var_name": "isServiceStarted"}, {"original_string": "private LinkedBlockingQueue<DelegationTokenRenewerEvent> pendingEventQueue;", "modifier": "private", "type": "LinkedBlockingQueue<DelegationTokenRenewerEvent>", "declarator": "pendingEventQueue", "var_name": "pendingEventQueue"}, {"original_string": "private boolean tokenKeepAliveEnabled;", "modifier": "private", "type": "boolean", "declarator": "tokenKeepAliveEnabled", "var_name": "tokenKeepAliveEnabled"}, {"original_string": "private boolean hasProxyUserPrivileges;", "modifier": "private", "type": "boolean", "declarator": "hasProxyUserPrivileges", "var_name": "hasProxyUserPrivileges"}, {"original_string": "private long credentialsValidTimeRemaining;", "modifier": "private", "type": "long", "declarator": "credentialsValidTimeRemaining", "var_name": "credentialsValidTimeRemaining"}, {"original_string": "public static final String RM_SYSTEM_CREDENTIALS_VALID_TIME_REMAINING =\n      YarnConfiguration.RM_PREFIX + \"system-credentials.valid-time-remaining\";", "modifier": "public static final", "type": "String", "declarator": "RM_SYSTEM_CREDENTIALS_VALID_TIME_REMAINING =\n      YarnConfiguration.RM_PREFIX + \"system-credentials.valid-time-remaining\"", "var_name": "RM_SYSTEM_CREDENTIALS_VALID_TIME_REMAINING"}, {"original_string": "public static final long DEFAULT_RM_SYSTEM_CREDENTIALS_VALID_TIME_REMAINING =\n      10800000;", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_RM_SYSTEM_CREDENTIALS_VALID_TIME_REMAINING =\n      10800000", "var_name": "DEFAULT_RM_SYSTEM_CREDENTIALS_VALID_TIME_REMAINING"}], "methods": [{"identifier": "DelegationTokenRenewer", "parameters": "()", "modifiers": "public", "return": "", "signature": " DelegationTokenRenewer()", "full_signature": "public  DelegationTokenRenewer()", "class_method_signature": "DelegationTokenRenewer.DelegationTokenRenewer()", "testcase": false, "constructor": true}, {"identifier": "serviceInit", "parameters": "(Configuration conf)", "modifiers": "@Override protected", "return": "void", "signature": "void serviceInit(Configuration conf)", "full_signature": "@Override protected void serviceInit(Configuration conf)", "class_method_signature": "DelegationTokenRenewer.serviceInit(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "createNewThreadPoolService", "parameters": "(Configuration conf)", "modifiers": "protected", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor createNewThreadPoolService(Configuration conf)", "full_signature": "protected ThreadPoolExecutor createNewThreadPoolService(Configuration conf)", "class_method_signature": "DelegationTokenRenewer.createNewThreadPoolService(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "setLocalSecretManagerAndServiceAddr", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setLocalSecretManagerAndServiceAddr()", "full_signature": "private void setLocalSecretManagerAndServiceAddr()", "class_method_signature": "DelegationTokenRenewer.setLocalSecretManagerAndServiceAddr()", "testcase": false, "constructor": false}, {"identifier": "serviceStart", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void serviceStart()", "full_signature": "@Override protected void serviceStart()", "class_method_signature": "DelegationTokenRenewer.serviceStart()", "testcase": false, "constructor": false}, {"identifier": "processDelegationTokenRenewerEvent", "parameters": "(\n      DelegationTokenRenewerEvent evt)", "modifiers": "private", "return": "void", "signature": "void processDelegationTokenRenewerEvent(\n      DelegationTokenRenewerEvent evt)", "full_signature": "private void processDelegationTokenRenewerEvent(\n      DelegationTokenRenewerEvent evt)", "class_method_signature": "DelegationTokenRenewer.processDelegationTokenRenewerEvent(\n      DelegationTokenRenewerEvent evt)", "testcase": false, "constructor": false}, {"identifier": "serviceStop", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void serviceStop()", "full_signature": "@Override protected void serviceStop()", "class_method_signature": "DelegationTokenRenewer.serviceStop()", "testcase": false, "constructor": false}, {"identifier": "getDelegationTokens", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "Set<Token<?>>", "signature": "Set<Token<?>> getDelegationTokens()", "full_signature": "@VisibleForTesting public Set<Token<?>> getDelegationTokens()", "class_method_signature": "DelegationTokenRenewer.getDelegationTokens()", "testcase": false, "constructor": false}, {"identifier": "addApplicationAsync", "parameters": "(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd, String user)", "modifiers": "public", "return": "void", "signature": "void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd, String user)", "full_signature": "public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd, String user)", "class_method_signature": "DelegationTokenRenewer.addApplicationAsync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd, String user)", "testcase": false, "constructor": false}, {"identifier": "addApplicationAsyncDuringRecovery", "parameters": "(ApplicationId applicationId,\n      Credentials ts, boolean shouldCancelAtEnd, String user)", "modifiers": "public", "return": "void", "signature": "void addApplicationAsyncDuringRecovery(ApplicationId applicationId,\n      Credentials ts, boolean shouldCancelAtEnd, String user)", "full_signature": "public void addApplicationAsyncDuringRecovery(ApplicationId applicationId,\n      Credentials ts, boolean shouldCancelAtEnd, String user)", "class_method_signature": "DelegationTokenRenewer.addApplicationAsyncDuringRecovery(ApplicationId applicationId,\n      Credentials ts, boolean shouldCancelAtEnd, String user)", "testcase": false, "constructor": false}, {"identifier": "addApplicationSync", "parameters": "(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd, String user)", "modifiers": "public", "return": "void", "signature": "void addApplicationSync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd, String user)", "full_signature": "public void addApplicationSync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd, String user)", "class_method_signature": "DelegationTokenRenewer.addApplicationSync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd, String user)", "testcase": false, "constructor": false}, {"identifier": "handleAppSubmitEvent", "parameters": "(AbstractDelegationTokenRenewerAppEvent evt)", "modifiers": "private", "return": "void", "signature": "void handleAppSubmitEvent(AbstractDelegationTokenRenewerAppEvent evt)", "full_signature": "private void handleAppSubmitEvent(AbstractDelegationTokenRenewerAppEvent evt)", "class_method_signature": "DelegationTokenRenewer.handleAppSubmitEvent(AbstractDelegationTokenRenewerAppEvent evt)", "testcase": false, "constructor": false}, {"identifier": "setTimerForTokenRenewal", "parameters": "(DelegationTokenToRenew token)", "modifiers": "@VisibleForTesting protected", "return": "void", "signature": "void setTimerForTokenRenewal(DelegationTokenToRenew token)", "full_signature": "@VisibleForTesting protected void setTimerForTokenRenewal(DelegationTokenToRenew token)", "class_method_signature": "DelegationTokenRenewer.setTimerForTokenRenewal(DelegationTokenToRenew token)", "testcase": false, "constructor": false}, {"identifier": "renewToken", "parameters": "(final DelegationTokenToRenew dttr)", "modifiers": "@VisibleForTesting protected", "return": "void", "signature": "void renewToken(final DelegationTokenToRenew dttr)", "full_signature": "@VisibleForTesting protected void renewToken(final DelegationTokenToRenew dttr)", "class_method_signature": "DelegationTokenRenewer.renewToken(final DelegationTokenToRenew dttr)", "testcase": false, "constructor": false}, {"identifier": "requestNewHdfsDelegationTokenIfNeeded", "parameters": "(\n      final DelegationTokenToRenew dttr)", "modifiers": "private", "return": "void", "signature": "void requestNewHdfsDelegationTokenIfNeeded(\n      final DelegationTokenToRenew dttr)", "full_signature": "private void requestNewHdfsDelegationTokenIfNeeded(\n      final DelegationTokenToRenew dttr)", "class_method_signature": "DelegationTokenRenewer.requestNewHdfsDelegationTokenIfNeeded(\n      final DelegationTokenToRenew dttr)", "testcase": false, "constructor": false}, {"identifier": "requestNewHdfsDelegationToken", "parameters": "(\n      Collection<ApplicationId> referringAppIds,\n      String user, boolean shouldCancelAtEnd)", "modifiers": "private", "return": "void", "signature": "void requestNewHdfsDelegationToken(\n      Collection<ApplicationId> referringAppIds,\n      String user, boolean shouldCancelAtEnd)", "full_signature": "private void requestNewHdfsDelegationToken(\n      Collection<ApplicationId> referringAppIds,\n      String user, boolean shouldCancelAtEnd)", "class_method_signature": "DelegationTokenRenewer.requestNewHdfsDelegationToken(\n      Collection<ApplicationId> referringAppIds,\n      String user, boolean shouldCancelAtEnd)", "testcase": false, "constructor": false}, {"identifier": "obtainSystemTokensForUser", "parameters": "(String user,\n      final Credentials credentials)", "modifiers": "@VisibleForTesting protected", "return": "Token<?>[]", "signature": "Token<?>[] obtainSystemTokensForUser(String user,\n      final Credentials credentials)", "full_signature": "@VisibleForTesting protected Token<?>[] obtainSystemTokensForUser(String user,\n      final Credentials credentials)", "class_method_signature": "DelegationTokenRenewer.obtainSystemTokensForUser(String user,\n      final Credentials credentials)", "testcase": false, "constructor": false}, {"identifier": "cancelToken", "parameters": "(DelegationTokenToRenew t)", "modifiers": "private", "return": "void", "signature": "void cancelToken(DelegationTokenToRenew t)", "full_signature": "private void cancelToken(DelegationTokenToRenew t)", "class_method_signature": "DelegationTokenRenewer.cancelToken(DelegationTokenToRenew t)", "testcase": false, "constructor": false}, {"identifier": "removeFailedDelegationToken", "parameters": "(DelegationTokenToRenew t)", "modifiers": "private", "return": "void", "signature": "void removeFailedDelegationToken(DelegationTokenToRenew t)", "full_signature": "private void removeFailedDelegationToken(DelegationTokenToRenew t)", "class_method_signature": "DelegationTokenRenewer.removeFailedDelegationToken(DelegationTokenToRenew t)", "testcase": false, "constructor": false}, {"identifier": "applicationFinished", "parameters": "(ApplicationId applicationId)", "modifiers": "public", "return": "void", "signature": "void applicationFinished(ApplicationId applicationId)", "full_signature": "public void applicationFinished(ApplicationId applicationId)", "class_method_signature": "DelegationTokenRenewer.applicationFinished(ApplicationId applicationId)", "testcase": false, "constructor": false}, {"identifier": "handleAppFinishEvent", "parameters": "(DelegationTokenRenewerEvent evt)", "modifiers": "private", "return": "void", "signature": "void handleAppFinishEvent(DelegationTokenRenewerEvent evt)", "full_signature": "private void handleAppFinishEvent(DelegationTokenRenewerEvent evt)", "class_method_signature": "DelegationTokenRenewer.handleAppFinishEvent(DelegationTokenRenewerEvent evt)", "testcase": false, "constructor": false}, {"identifier": "updateKeepAliveApplications", "parameters": "(List<ApplicationId> appIds)", "modifiers": "public", "return": "void", "signature": "void updateKeepAliveApplications(List<ApplicationId> appIds)", "full_signature": "public void updateKeepAliveApplications(List<ApplicationId> appIds)", "class_method_signature": "DelegationTokenRenewer.updateKeepAliveApplications(List<ApplicationId> appIds)", "testcase": false, "constructor": false}, {"identifier": "removeApplicationFromRenewal", "parameters": "(ApplicationId applicationId)", "modifiers": "private", "return": "void", "signature": "void removeApplicationFromRenewal(ApplicationId applicationId)", "full_signature": "private void removeApplicationFromRenewal(ApplicationId applicationId)", "class_method_signature": "DelegationTokenRenewer.removeApplicationFromRenewal(ApplicationId applicationId)", "testcase": false, "constructor": false}, {"identifier": "setRMContext", "parameters": "(RMContext rmContext)", "modifiers": "public", "return": "void", "signature": "void setRMContext(RMContext rmContext)", "full_signature": "public void setRMContext(RMContext rmContext)", "class_method_signature": "DelegationTokenRenewer.setRMContext(RMContext rmContext)", "testcase": false, "constructor": false}, {"identifier": "handleDTRenewerAppRecoverEvent", "parameters": "(\n      DelegationTokenRenewerAppRecoverEvent event)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void handleDTRenewerAppRecoverEvent(\n      DelegationTokenRenewerAppRecoverEvent event)", "full_signature": "@SuppressWarnings(\"unchecked\") private void handleDTRenewerAppRecoverEvent(\n      DelegationTokenRenewerAppRecoverEvent event)", "class_method_signature": "DelegationTokenRenewer.handleDTRenewerAppRecoverEvent(\n      DelegationTokenRenewerAppRecoverEvent event)", "testcase": false, "constructor": false}, {"identifier": "getAllTokens", "parameters": "()", "modifiers": "protected", "return": "ConcurrentMap<Token<?>, DelegationTokenToRenew>", "signature": "ConcurrentMap<Token<?>, DelegationTokenToRenew> getAllTokens()", "full_signature": "protected ConcurrentMap<Token<?>, DelegationTokenToRenew> getAllTokens()", "class_method_signature": "DelegationTokenRenewer.getAllTokens()", "testcase": false, "constructor": false}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java"}, "focal_method": {"identifier": "getAllTokens", "parameters": "()", "modifiers": "protected", "return": "ConcurrentMap<Token<?>, DelegationTokenToRenew>", "body": "protected ConcurrentMap<Token<?>, DelegationTokenToRenew> getAllTokens() {\n    return allTokens;\n  }", "signature": "ConcurrentMap<Token<?>, DelegationTokenToRenew> getAllTokens()", "full_signature": "protected ConcurrentMap<Token<?>, DelegationTokenToRenew> getAllTokens()", "class_method_signature": "DelegationTokenRenewer.getAllTokens()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}