{"test_class": {"identifier": "InstrumentedQueuedThreadPoolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PREFIX = \"prefix\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX = \"prefix\"", "var_name": "PREFIX"}, {"original_string": "private final MetricRegistry metricRegistry = mock(MetricRegistry.class);", "modifier": "private final", "type": "MetricRegistry", "declarator": "metricRegistry = mock(MetricRegistry.class)", "var_name": "metricRegistry"}, {"original_string": "private final InstrumentedQueuedThreadPool iqtp = new InstrumentedQueuedThreadPool(metricRegistry);", "modifier": "private final", "type": "InstrumentedQueuedThreadPool", "declarator": "iqtp = new InstrumentedQueuedThreadPool(metricRegistry)", "var_name": "iqtp"}, {"original_string": "private final ArgumentCaptor<String> metricNameCaptor = ArgumentCaptor.forClass(String.class);", "modifier": "private final", "type": "ArgumentCaptor<String>", "declarator": "metricNameCaptor = ArgumentCaptor.forClass(String.class)", "var_name": "metricNameCaptor"}], "file": "metrics-jetty9/src/test/java/com/codahale/metrics/jetty9/InstrumentedQueuedThreadPoolTest.java"}, "test_case": {"identifier": "metricsPrefixBackwardCompatible", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void metricsPrefixBackwardCompatible() throws Exception {\n        iqtp.doStart();\n\n        verify(metricRegistry, atLeastOnce()).register(metricNameCaptor.capture(), any(Metric.class));\n        String metricName = metricNameCaptor.getValue();\n        assertThat(metricName)\n                .overridingErrorMessage(\"The default metrics prefix was changed\")\n                .startsWith(QueuedThreadPool.class.getName());\n    }", "signature": "void metricsPrefixBackwardCompatible()", "full_signature": "@Test public void metricsPrefixBackwardCompatible()", "class_method_signature": "InstrumentedQueuedThreadPoolTest.metricsPrefixBackwardCompatible()", "testcase": true, "constructor": false, "invocations": ["doStart", "register", "verify", "atLeastOnce", "capture", "any", "getValue", "startsWith", "overridingErrorMessage", "assertThat", "getName"]}, "focal_class": {"identifier": "InstrumentedQueuedThreadPool", "superclass": "extends QueuedThreadPool", "interfaces": "", "fields": [{"original_string": "private final MetricRegistry metricRegistry;", "modifier": "private final", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}, {"original_string": "private String prefix;", "modifier": "private", "type": "String", "declarator": "prefix", "var_name": "prefix"}], "methods": [{"identifier": "InstrumentedQueuedThreadPool", "parameters": "(@Name(\"registry\") MetricRegistry registry)", "modifiers": "public", "return": "", "signature": " InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry)", "full_signature": "public  InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry)", "class_method_signature": "InstrumentedQueuedThreadPool.InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedQueuedThreadPool", "parameters": "(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads)", "modifiers": "public", "return": "", "signature": " InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads)", "full_signature": "public  InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads)", "class_method_signature": "InstrumentedQueuedThreadPool.InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedQueuedThreadPool", "parameters": "(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads)", "modifiers": "public", "return": "", "signature": " InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads)", "full_signature": "public  InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads)", "class_method_signature": "InstrumentedQueuedThreadPool.InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedQueuedThreadPool", "parameters": "(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads,\n                                        @Name(\"idleTimeout\") int idleTimeout)", "modifiers": "public", "return": "", "signature": " InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads,\n                                        @Name(\"idleTimeout\") int idleTimeout)", "full_signature": "public  InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads,\n                                        @Name(\"idleTimeout\") int idleTimeout)", "class_method_signature": "InstrumentedQueuedThreadPool.InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads,\n                                        @Name(\"idleTimeout\") int idleTimeout)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedQueuedThreadPool", "parameters": "(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads,\n                                        @Name(\"idleTimeout\") int idleTimeout,\n                                        @Name(\"queue\") BlockingQueue<Runnable> queue)", "modifiers": "public", "return": "", "signature": " InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads,\n                                        @Name(\"idleTimeout\") int idleTimeout,\n                                        @Name(\"queue\") BlockingQueue<Runnable> queue)", "full_signature": "public  InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads,\n                                        @Name(\"idleTimeout\") int idleTimeout,\n                                        @Name(\"queue\") BlockingQueue<Runnable> queue)", "class_method_signature": "InstrumentedQueuedThreadPool.InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads,\n                                        @Name(\"idleTimeout\") int idleTimeout,\n                                        @Name(\"queue\") BlockingQueue<Runnable> queue)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedQueuedThreadPool", "parameters": "(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads,\n                                        @Name(\"idleTimeout\") int idleTimeout,\n                                        @Name(\"queue\") BlockingQueue<Runnable> queue,\n                                        @Name(\"prefix\") String prefix)", "modifiers": "public", "return": "", "signature": " InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads,\n                                        @Name(\"idleTimeout\") int idleTimeout,\n                                        @Name(\"queue\") BlockingQueue<Runnable> queue,\n                                        @Name(\"prefix\") String prefix)", "full_signature": "public  InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads,\n                                        @Name(\"idleTimeout\") int idleTimeout,\n                                        @Name(\"queue\") BlockingQueue<Runnable> queue,\n                                        @Name(\"prefix\") String prefix)", "class_method_signature": "InstrumentedQueuedThreadPool.InstrumentedQueuedThreadPool(@Name(\"registry\") MetricRegistry registry,\n                                        @Name(\"maxThreads\") int maxThreads,\n                                        @Name(\"minThreads\") int minThreads,\n                                        @Name(\"idleTimeout\") int idleTimeout,\n                                        @Name(\"queue\") BlockingQueue<Runnable> queue,\n                                        @Name(\"prefix\") String prefix)", "testcase": false, "constructor": true}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPrefix()", "full_signature": "public String getPrefix()", "class_method_signature": "InstrumentedQueuedThreadPool.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "setPrefix", "parameters": "(String prefix)", "modifiers": "public", "return": "void", "signature": "void setPrefix(String prefix)", "full_signature": "public void setPrefix(String prefix)", "class_method_signature": "InstrumentedQueuedThreadPool.setPrefix(String prefix)", "testcase": false, "constructor": false}, {"identifier": "doStart", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doStart()", "full_signature": "@Override protected void doStart()", "class_method_signature": "InstrumentedQueuedThreadPool.doStart()", "testcase": false, "constructor": false}], "file": "metrics-jetty9/src/main/java/com/codahale/metrics/jetty9/InstrumentedQueuedThreadPool.java"}, "focal_method": {"identifier": "doStart", "parameters": "()", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void doStart() throws Exception {\n        super.doStart();\n\n        final String prefix = this.prefix == null ? name(QueuedThreadPool.class, getName()) : name(this.prefix, getName());\n\n        metricRegistry.register(name(prefix, \"utilization\"), new RatioGauge() {\n            @Override\n            protected Ratio getRatio() {\n                return Ratio.of(getThreads() - getIdleThreads(), getThreads());\n            }\n        });\n        metricRegistry.register(name(prefix, \"utilization-max\"), new RatioGauge() {\n            @Override\n            protected Ratio getRatio() {\n                return Ratio.of(getThreads() - getIdleThreads(), getMaxThreads());\n            }\n        });\n        metricRegistry.register(name(prefix, \"size\"), (Gauge<Integer>) this::getThreads);\n        metricRegistry.register(name(prefix, \"jobs\"), (Gauge<Integer>) () -> {\n            // This assumes the QueuedThreadPool is using a BlockingArrayQueue or\n            // ArrayBlockingQueue for its queue, and is therefore a constant-time operation.\n            return getQueue().size();\n        });\n        metricRegistry.register(name(prefix, \"jobs-queue-utilization\"), new RatioGauge() {\n            @Override\n            protected Ratio getRatio() {\n                BlockingQueue<Runnable> queue = getQueue();\n                return Ratio.of(queue.size(), queue.size() + queue.remainingCapacity());\n            }\n        });\n    }", "signature": "void doStart()", "full_signature": "@Override protected void doStart()", "class_method_signature": "InstrumentedQueuedThreadPool.doStart()", "testcase": false, "constructor": false, "invocations": ["doStart", "name", "getName", "name", "getName", "register", "name", "of", "getThreads", "getIdleThreads", "getThreads", "register", "name", "of", "getThreads", "getIdleThreads", "getMaxThreads", "register", "name", "register", "name", "size", "getQueue", "register", "name", "getQueue", "of", "size", "size", "remainingCapacity"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}