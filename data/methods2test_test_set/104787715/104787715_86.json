{"test_class": {"identifier": "ForkableRepoValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dockerfile-image-update/src/test/java/com/salesforce/dockerfileimageupdate/process/ForkableRepoValidatorTest.java"}, "test_case": {"identifier": "testParentIsForkDoNotForkIt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParentIsForkDoNotForkIt() {\n        DockerfileGitHubUtil dockerfileGitHubUtil = mock(DockerfileGitHubUtil.class);\n        GHRepository repo = mock(GHRepository.class);\n        ForkableRepoValidator validator = new ForkableRepoValidator(dockerfileGitHubUtil);\n\n        when(repo.isFork()).thenReturn(true);\n        ShouldForkResult shouldForkResult = validator.parentIsFork(repo);\n        assertFalse(shouldForkResult.isForkable());\n        assertEquals(shouldForkResult.getReason(), REPO_IS_FORK);\n    }", "signature": "void testParentIsForkDoNotForkIt()", "full_signature": "@Test public void testParentIsForkDoNotForkIt()", "class_method_signature": "ForkableRepoValidatorTest.testParentIsForkDoNotForkIt()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "isFork", "parentIsFork", "assertFalse", "isForkable", "assertEquals", "getReason"]}, "focal_class": {"identifier": "ForkableRepoValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ForkableRepoValidator.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ForkableRepoValidator.class)", "var_name": "log"}, {"original_string": "public static final String REPO_IS_FORK =\n            \"it's a fork already. Sending a PR to a fork is unsupported at the moment.\";", "modifier": "public static final", "type": "String", "declarator": "REPO_IS_FORK =\n            \"it's a fork already. Sending a PR to a fork is unsupported at the moment.\"", "var_name": "REPO_IS_FORK"}, {"original_string": "public static final String REPO_IS_ARCHIVED = \"it's archived.\";", "modifier": "public static final", "type": "String", "declarator": "REPO_IS_ARCHIVED = \"it's archived.\"", "var_name": "REPO_IS_ARCHIVED"}, {"original_string": "public static final String REPO_IS_OWNED_BY_THIS_USER = \"it is owned by this user.\";", "modifier": "public static final", "type": "String", "declarator": "REPO_IS_OWNED_BY_THIS_USER = \"it is owned by this user.\"", "var_name": "REPO_IS_OWNED_BY_THIS_USER"}, {"original_string": "public static final String COULD_NOT_CHECK_THIS_USER =\n            \"we could not determine fork status because we don't know the identity of the authenticated user.\";", "modifier": "public static final", "type": "String", "declarator": "COULD_NOT_CHECK_THIS_USER =\n            \"we could not determine fork status because we don't know the identity of the authenticated user.\"", "var_name": "COULD_NOT_CHECK_THIS_USER"}, {"original_string": "public static final String CONTENT_PATH_NOT_IN_DEFAULT_BRANCH_TEMPLATE =\n            \"didn't find content path %s in default branch\";", "modifier": "public static final", "type": "String", "declarator": "CONTENT_PATH_NOT_IN_DEFAULT_BRANCH_TEMPLATE =\n            \"didn't find content path %s in default branch\"", "var_name": "CONTENT_PATH_NOT_IN_DEFAULT_BRANCH_TEMPLATE"}, {"original_string": "public static final String COULD_NOT_FIND_IMAGE_TO_UPDATE_TEMPLATE =\n            \"didn't find the image '%s' which required an update in path %s\";", "modifier": "public static final", "type": "String", "declarator": "COULD_NOT_FIND_IMAGE_TO_UPDATE_TEMPLATE =\n            \"didn't find the image '%s' which required an update in path %s\"", "var_name": "COULD_NOT_FIND_IMAGE_TO_UPDATE_TEMPLATE"}, {"original_string": "private final DockerfileGitHubUtil dockerfileGitHubUtil;", "modifier": "private final", "type": "DockerfileGitHubUtil", "declarator": "dockerfileGitHubUtil", "var_name": "dockerfileGitHubUtil"}], "methods": [{"identifier": "ForkableRepoValidator", "parameters": "(DockerfileGitHubUtil dockerfileGitHubUtil)", "modifiers": "public", "return": "", "signature": " ForkableRepoValidator(DockerfileGitHubUtil dockerfileGitHubUtil)", "full_signature": "public  ForkableRepoValidator(DockerfileGitHubUtil dockerfileGitHubUtil)", "class_method_signature": "ForkableRepoValidator.ForkableRepoValidator(DockerfileGitHubUtil dockerfileGitHubUtil)", "testcase": false, "constructor": true}, {"identifier": "shouldFork", "parameters": "(GHRepository parentRepo,\n                                       GHContent searchResultContent,\n                                       GitForkBranch gitForkBranch)", "modifiers": "public", "return": "ShouldForkResult", "signature": "ShouldForkResult shouldFork(GHRepository parentRepo,\n                                       GHContent searchResultContent,\n                                       GitForkBranch gitForkBranch)", "full_signature": "public ShouldForkResult shouldFork(GHRepository parentRepo,\n                                       GHContent searchResultContent,\n                                       GitForkBranch gitForkBranch)", "class_method_signature": "ForkableRepoValidator.shouldFork(GHRepository parentRepo,\n                                       GHContent searchResultContent,\n                                       GitForkBranch gitForkBranch)", "testcase": false, "constructor": false}, {"identifier": "contentHasChangesInDefaultBranch", "parameters": "(GHRepository parentRepo,\n                                                                GHContent searchResultContent,\n                                                                GitForkBranch gitForkBranch)", "modifiers": "protected", "return": "ShouldForkResult", "signature": "ShouldForkResult contentHasChangesInDefaultBranch(GHRepository parentRepo,\n                                                                GHContent searchResultContent,\n                                                                GitForkBranch gitForkBranch)", "full_signature": "protected ShouldForkResult contentHasChangesInDefaultBranch(GHRepository parentRepo,\n                                                                GHContent searchResultContent,\n                                                                GitForkBranch gitForkBranch)", "class_method_signature": "ForkableRepoValidator.contentHasChangesInDefaultBranch(GHRepository parentRepo,\n                                                                GHContent searchResultContent,\n                                                                GitForkBranch gitForkBranch)", "testcase": false, "constructor": false}, {"identifier": "hasNoChanges", "parameters": "(GHContent content, GitForkBranch gitForkBranch)", "modifiers": "protected", "return": "boolean", "signature": "boolean hasNoChanges(GHContent content, GitForkBranch gitForkBranch)", "full_signature": "protected boolean hasNoChanges(GHContent content, GitForkBranch gitForkBranch)", "class_method_signature": "ForkableRepoValidator.hasNoChanges(GHContent content, GitForkBranch gitForkBranch)", "testcase": false, "constructor": false}, {"identifier": "thisUserIsNotOwner", "parameters": "(GHRepository parentRepo)", "modifiers": "protected", "return": "ShouldForkResult", "signature": "ShouldForkResult thisUserIsNotOwner(GHRepository parentRepo)", "full_signature": "protected ShouldForkResult thisUserIsNotOwner(GHRepository parentRepo)", "class_method_signature": "ForkableRepoValidator.thisUserIsNotOwner(GHRepository parentRepo)", "testcase": false, "constructor": false}, {"identifier": "parentIsFork", "parameters": "(GHRepository parentRepo)", "modifiers": "protected", "return": "ShouldForkResult", "signature": "ShouldForkResult parentIsFork(GHRepository parentRepo)", "full_signature": "protected ShouldForkResult parentIsFork(GHRepository parentRepo)", "class_method_signature": "ForkableRepoValidator.parentIsFork(GHRepository parentRepo)", "testcase": false, "constructor": false}, {"identifier": "parentIsArchived", "parameters": "(GHRepository parentRepo)", "modifiers": "protected", "return": "ShouldForkResult", "signature": "ShouldForkResult parentIsArchived(GHRepository parentRepo)", "full_signature": "protected ShouldForkResult parentIsArchived(GHRepository parentRepo)", "class_method_signature": "ForkableRepoValidator.parentIsArchived(GHRepository parentRepo)", "testcase": false, "constructor": false}], "file": "dockerfile-image-update/src/main/java/com/salesforce/dockerfileimageupdate/process/ForkableRepoValidator.java"}, "focal_method": {"identifier": "parentIsFork", "parameters": "(GHRepository parentRepo)", "modifiers": "protected", "return": "ShouldForkResult", "body": "protected ShouldForkResult parentIsFork(GHRepository parentRepo) {\n        return parentRepo.isFork() ? shouldNotForkResult(REPO_IS_FORK) : shouldForkResult();\n    }", "signature": "ShouldForkResult parentIsFork(GHRepository parentRepo)", "full_signature": "protected ShouldForkResult parentIsFork(GHRepository parentRepo)", "class_method_signature": "ForkableRepoValidator.parentIsFork(GHRepository parentRepo)", "testcase": false, "constructor": false, "invocations": ["isFork", "shouldNotForkResult", "shouldForkResult"]}, "repository": {"repo_id": 104787715, "url": "https://github.com/salesforce/dockerfile-image-update", "stars": 62, "created": "9/25/2017 6:38:13 PM +00:00", "updates": "2020-01-23T07:15:59+00:00", "fork": "False", "license": "licensed"}}