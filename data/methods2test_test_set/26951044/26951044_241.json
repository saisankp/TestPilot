{"test_class": {"identifier": "PropertyConverterManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ConversionContext DUMMY_CONTEXT = new ConversionContext.Builder(\n            \"someKey\", TypeLiteral.of(Object.class)).build();", "modifier": "private final", "type": "ConversionContext", "declarator": "DUMMY_CONTEXT = new ConversionContext.Builder(\n            \"someKey\", TypeLiteral.of(Object.class)).build()", "var_name": "DUMMY_CONTEXT"}], "file": "code/spi-support/src/test/java/org/apache/tamaya/spisupport/PropertyConverterManagerTest.java"}, "test_case": {"identifier": "testGetFactoryMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetFactoryMethod() throws Exception {\n        ServiceContext serviceContext = ServiceContextManager.getServiceContext(getClass().getClassLoader());\n        PropertyConverterManager manager = new PropertyConverterManager(serviceContext, false);\n        Method getFactoryMethod = PropertyConverterManager.class.getDeclaredMethod(\"getFactoryMethod\", new Class[]{Class.class, String[].class});\n        getFactoryMethod.setAccessible(true);\n\n        Method foundMethod = (Method) getFactoryMethod.invoke(manager, MyType.class, new String[]{\"instanceOf\"});\n        assertThat(foundMethod.getName()).isEqualTo(\"instanceOf\");\n        \n        Method staticOf = (Method) getFactoryMethod.invoke(manager, MyType.class, new String[]{\"of\"});\n        assertThat(staticOf.getName()).isEqualTo(\"of\");\n\n        Method notFoundMethod = (Method) getFactoryMethod.invoke(manager, MyType.class, new String[]{\"missingMethod\"});\n        assertThat(notFoundMethod).isNull();\n\n        Method wrongSignature = (Method) getFactoryMethod.invoke(manager, MyType.class, new String[]{\"getValue\"});\n        assertThat(wrongSignature).isNull();\n    }", "signature": "void testGetFactoryMethod()", "full_signature": "@Test public void testGetFactoryMethod()", "class_method_signature": "PropertyConverterManagerTest.testGetFactoryMethod()", "testcase": true, "constructor": false, "invocations": ["getServiceContext", "getClassLoader", "getClass", "getDeclaredMethod", "setAccessible", "invoke", "isEqualTo", "assertThat", "getName", "invoke", "isEqualTo", "assertThat", "getName", "invoke", "isNull", "assertThat", "invoke", "isNull", "assertThat"]}, "focal_class": {"identifier": "PropertyConverterManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(PropertyConverterManager.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(PropertyConverterManager.class.getName())", "var_name": "LOG"}, {"original_string": "private final Map<TypeLiteral<?>, List<PropertyConverter<?>>> converters = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<TypeLiteral<?>, List<PropertyConverter<?>>>", "declarator": "converters = new ConcurrentHashMap<>()", "var_name": "converters"}, {"original_string": "private final Map<TypeLiteral<?>, List<PropertyConverter<?>>> transitiveConverters = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<TypeLiteral<?>, List<PropertyConverter<?>>>", "declarator": "transitiveConverters = new ConcurrentHashMap<>()", "var_name": "transitiveConverters"}, {"original_string": "private final ReadWriteLock lock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReadWriteLock", "declarator": "lock = new ReentrantReadWriteLock()", "var_name": "lock"}, {"original_string": "private static final Comparator<Object> PRIORITY_COMPARATOR = new Comparator<Object>() {\n\n        @Override\n        public int compare(Object o1, Object o2) {\n            int prio = PriorityServiceComparator.getPriority(o1) - PriorityServiceComparator.getPriority(o2);\n            if (prio < 0) {\n                return 1;\n            } else if (prio > 0) {\n                return -1;\n            } else {\n                return o1.getClass().getSimpleName().compareTo(o2.getClass().getSimpleName());\n            }\n        }\n    };", "modifier": "private static final", "type": "Comparator<Object>", "declarator": "PRIORITY_COMPARATOR = new Comparator<Object>() {\n\n        @Override\n        public int compare(Object o1, Object o2) {\n            int prio = PriorityServiceComparator.getPriority(o1) - PriorityServiceComparator.getPriority(o2);\n            if (prio < 0) {\n                return 1;\n            } else if (prio > 0) {\n                return -1;\n            } else {\n                return o1.getClass().getSimpleName().compareTo(o2.getClass().getSimpleName());\n            }\n        }\n    }", "var_name": "PRIORITY_COMPARATOR"}, {"original_string": "private final ServiceContext serviceContext;", "modifier": "private final", "type": "ServiceContext", "declarator": "serviceContext", "var_name": "serviceContext"}], "methods": [{"identifier": "PropertyConverterManager", "parameters": "(ServiceContext serviceContext)", "modifiers": "public", "return": "", "signature": " PropertyConverterManager(ServiceContext serviceContext)", "full_signature": "public  PropertyConverterManager(ServiceContext serviceContext)", "class_method_signature": "PropertyConverterManager.PropertyConverterManager(ServiceContext serviceContext)", "testcase": false, "constructor": true}, {"identifier": "PropertyConverterManager", "parameters": "(ServiceContext serviceContext, boolean init)", "modifiers": "public", "return": "", "signature": " PropertyConverterManager(ServiceContext serviceContext, boolean init)", "full_signature": "public  PropertyConverterManager(ServiceContext serviceContext, boolean init)", "class_method_signature": "PropertyConverterManager.PropertyConverterManager(ServiceContext serviceContext, boolean init)", "testcase": false, "constructor": true}, {"identifier": "initConverters", "parameters": "()", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) protected", "return": "void", "signature": "void initConverters()", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) protected void initConverters()", "class_method_signature": "PropertyConverterManager.initConverters()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(TypeLiteral<T> targetType, PropertyConverter<T> converter)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void register(TypeLiteral<T> targetType, PropertyConverter<T> converter)", "full_signature": "@SuppressWarnings(\"unchecked\") public void register(TypeLiteral<T> targetType, PropertyConverter<T> converter)", "class_method_signature": "PropertyConverterManager.register(TypeLiteral<T> targetType, PropertyConverter<T> converter)", "testcase": false, "constructor": false}, {"identifier": "isTargetTypeSupported", "parameters": "(TypeLiteral<?> targetType)", "modifiers": "public", "return": "boolean", "signature": "boolean isTargetTypeSupported(TypeLiteral<?> targetType)", "full_signature": "public boolean isTargetTypeSupported(TypeLiteral<?> targetType)", "class_method_signature": "PropertyConverterManager.isTargetTypeSupported(TypeLiteral<?> targetType)", "testcase": false, "constructor": false}, {"identifier": "getPropertyConverters", "parameters": "()", "modifiers": "public", "return": "Map<TypeLiteral<?>, List<PropertyConverter<?>>>", "signature": "Map<TypeLiteral<?>, List<PropertyConverter<?>>> getPropertyConverters()", "full_signature": "public Map<TypeLiteral<?>, List<PropertyConverter<?>>> getPropertyConverters()", "class_method_signature": "PropertyConverterManager.getPropertyConverters()", "testcase": false, "constructor": false}, {"identifier": "getPropertyConverters", "parameters": "(TypeLiteral<T> targetType)", "modifiers": "public", "return": "List<PropertyConverter<T>>", "signature": "List<PropertyConverter<T>> getPropertyConverters(TypeLiteral<T> targetType)", "full_signature": "public List<PropertyConverter<T>> getPropertyConverters(TypeLiteral<T> targetType)", "class_method_signature": "PropertyConverterManager.getPropertyConverters(TypeLiteral<T> targetType)", "testcase": false, "constructor": false}, {"identifier": "addConvertersToList", "parameters": "(Collection<PropertyConverter<T>> converters, List<PropertyConverter<T>> converterList)", "modifiers": "private", "return": "void", "signature": "void addConvertersToList(Collection<PropertyConverter<T>> converters, List<PropertyConverter<T>> converterList)", "full_signature": "private void addConvertersToList(Collection<PropertyConverter<T>> converters, List<PropertyConverter<T>> converterList)", "class_method_signature": "PropertyConverterManager.addConvertersToList(Collection<PropertyConverter<T>> converters, List<PropertyConverter<T>> converterList)", "testcase": false, "constructor": false}, {"identifier": "mapBoxedType", "parameters": "(TypeLiteral<T> targetType)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "TypeLiteral<T>", "signature": "TypeLiteral<T> mapBoxedType(TypeLiteral<T> targetType)", "full_signature": "@SuppressWarnings(\"unchecked\") private TypeLiteral<T> mapBoxedType(TypeLiteral<T> targetType)", "class_method_signature": "PropertyConverterManager.mapBoxedType(TypeLiteral<T> targetType)", "testcase": false, "constructor": false}, {"identifier": "createDefaultPropertyConverter", "parameters": "(final TypeLiteral<T> targetType)", "modifiers": "protected", "return": "PropertyConverter<T>", "signature": "PropertyConverter<T> createDefaultPropertyConverter(final TypeLiteral<T> targetType)", "full_signature": "protected PropertyConverter<T> createDefaultPropertyConverter(final TypeLiteral<T> targetType)", "class_method_signature": "PropertyConverterManager.createDefaultPropertyConverter(final TypeLiteral<T> targetType)", "testcase": false, "constructor": false}, {"identifier": "getFactoryMethod", "parameters": "(Class<?> type, String... methodNames)", "modifiers": "private", "return": "Method", "signature": "Method getFactoryMethod(Class<?> type, String... methodNames)", "full_signature": "private Method getFactoryMethod(Class<?> type, String... methodNames)", "class_method_signature": "PropertyConverterManager.getFactoryMethod(Class<?> type, String... methodNames)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "PropertyConverterManager.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PropertyConverterManager.hashCode()", "testcase": false, "constructor": false}], "file": "code/spi-support/src/main/java/org/apache/tamaya/spisupport/PropertyConverterManager.java"}, "focal_method": {"identifier": "getFactoryMethod", "parameters": "(Class<?> type, String... methodNames)", "modifiers": "private", "return": "Method", "body": "private Method getFactoryMethod(Class<?> type, String... methodNames) {\n        Method m;\n        for (String name : methodNames) {\n            try {\n                m = type.getDeclaredMethod(name, String.class);\n                return m;\n            } catch (NoSuchMethodException | RuntimeException e) {\n                // continue, try also with CharSequence\n            }\n            try {\n                m = type.getDeclaredMethod(name, CharSequence.class);\n                return m;\n            } catch (NoSuchMethodException | RuntimeException e) {\n                LOG.finest(\"No such factory method found on type: \" + type.getName() + \", methodName: \" + name);\n            }\n        }\n        return null;\n    }", "signature": "Method getFactoryMethod(Class<?> type, String... methodNames)", "full_signature": "private Method getFactoryMethod(Class<?> type, String... methodNames)", "class_method_signature": "PropertyConverterManager.getFactoryMethod(Class<?> type, String... methodNames)", "testcase": false, "constructor": false, "invocations": ["getDeclaredMethod", "getDeclaredMethod", "finest", "getName"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}