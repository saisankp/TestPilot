{"test_class": {"identifier": "ListCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Gateway gateway;", "modifier": "private", "type": "Gateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "private ListCommand command;", "modifier": "private", "type": "ListCommand", "declarator": "command", "var_name": "command"}, {"original_string": "private BufferedWriter writer;", "modifier": "private", "type": "BufferedWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private StringWriter sWriter;", "modifier": "private", "type": "StringWriter", "declarator": "sWriter", "var_name": "sWriter"}, {"original_string": "private String target;", "modifier": "private", "type": "String", "declarator": "target", "var_name": "target"}, {"original_string": "private String target2;", "modifier": "private", "type": "String", "declarator": "target2", "var_name": "target2"}, {"original_string": "private List<String> list;", "modifier": "private", "type": "List<String>", "declarator": "list", "var_name": "list"}, {"original_string": "private List<Thread> list2;", "modifier": "private", "type": "List<Thread>", "declarator": "list2", "var_name": "list2"}], "file": "py4j-java/src/test/java/py4j/commands/ListCommandTest.java"}, "test_case": {"identifier": "testConcat", "parameters": "()", "modifiers": "@SuppressWarnings(\"rawtypes\") @Test public", "return": "void", "body": "@SuppressWarnings(\"rawtypes\")\n\t@Test\n\tpublic void testConcat() {\n\t\tString inputCommand = ListCommand.LIST_CONCAT_SUB_COMMAND_NAME + \"\\n\" + target + \"\\n\" + target2 + \"\\ne\\n\";\n\t\ttry {\n\t\t\t// concat l + l2\n\t\t\tcommand.execute(\"l\", new BufferedReader(new StringReader(inputCommand)), writer);\n\t\t\tassertEquals(\"!ylo2\\n\", sWriter.toString());\n\t\t\tList newList = (List) gateway.getObject(\"o2\");\n\t\t\tassertEquals(7, newList.size());\n\t\t\tassertEquals(4, list.size());\n\t\t\tassertEquals(3, list2.size());\n\t\t\tassertEquals(newList.get(4), list2.get(0));\n\n\t\t\t// concat l + l\n\t\t\tinputCommand = ListCommand.LIST_CONCAT_SUB_COMMAND_NAME + \"\\n\" + target + \"\\n\" + target + \"\\ne\\n\";\n\t\t\tcommand.execute(\"l\", new BufferedReader(new StringReader(inputCommand)), writer);\n\t\t\tassertEquals(\"!ylo2\\n!ylo3\\n\", sWriter.toString());\n\t\t\tnewList = (List) gateway.getObject(\"o3\");\n\t\t\tassertEquals(8, newList.size());\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail();\n\t\t}\n\t}", "signature": "void testConcat()", "full_signature": "@SuppressWarnings(\"rawtypes\") @Test public void testConcat()", "class_method_signature": "ListCommandTest.testConcat()", "testcase": true, "constructor": false, "invocations": ["execute", "assertEquals", "toString", "getObject", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "get", "execute", "assertEquals", "toString", "getObject", "assertEquals", "size", "printStackTrace", "fail"]}, "focal_class": {"identifier": "ListCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "private final Logger logger = Logger.getLogger(ListCommand.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "logger = Logger.getLogger(ListCommand.class.getName())", "var_name": "logger"}, {"original_string": "public static final String LIST_COMMAND_NAME = \"l\";", "modifier": "public static final", "type": "String", "declarator": "LIST_COMMAND_NAME = \"l\"", "var_name": "LIST_COMMAND_NAME"}, {"original_string": "public static final char LIST_SORT_SUB_COMMAND_NAME = 's';", "modifier": "public static final", "type": "char", "declarator": "LIST_SORT_SUB_COMMAND_NAME = 's'", "var_name": "LIST_SORT_SUB_COMMAND_NAME"}, {"original_string": "public static final char LIST_REVERSE_SUB_COMMAND_NAME = 'r';", "modifier": "public static final", "type": "char", "declarator": "LIST_REVERSE_SUB_COMMAND_NAME = 'r'", "var_name": "LIST_REVERSE_SUB_COMMAND_NAME"}, {"original_string": "public static final char LIST_MAX_SUB_COMMAND_NAME = 'x';", "modifier": "public static final", "type": "char", "declarator": "LIST_MAX_SUB_COMMAND_NAME = 'x'", "var_name": "LIST_MAX_SUB_COMMAND_NAME"}, {"original_string": "public static final char LIST_MIN_SUB_COMMAND_NAME = 'n';", "modifier": "public static final", "type": "char", "declarator": "LIST_MIN_SUB_COMMAND_NAME = 'n'", "var_name": "LIST_MIN_SUB_COMMAND_NAME"}, {"original_string": "public static final char LIST_SLICE_SUB_COMMAND_NAME = 'l';", "modifier": "public static final", "type": "char", "declarator": "LIST_SLICE_SUB_COMMAND_NAME = 'l'", "var_name": "LIST_SLICE_SUB_COMMAND_NAME"}, {"original_string": "public static final char LIST_CONCAT_SUB_COMMAND_NAME = 'a';", "modifier": "public static final", "type": "char", "declarator": "LIST_CONCAT_SUB_COMMAND_NAME = 'a'", "var_name": "LIST_CONCAT_SUB_COMMAND_NAME"}, {"original_string": "public static final char LIST_MULT_SUB_COMMAND_NAME = 'm';", "modifier": "public static final", "type": "char", "declarator": "LIST_MULT_SUB_COMMAND_NAME = 'm'", "var_name": "LIST_MULT_SUB_COMMAND_NAME"}, {"original_string": "public static final char LIST_IMULT_SUB_COMMAND_NAME = 'i';", "modifier": "public static final", "type": "char", "declarator": "LIST_IMULT_SUB_COMMAND_NAME = 'i'", "var_name": "LIST_IMULT_SUB_COMMAND_NAME"}, {"original_string": "public static final char LIST_COUNT_SUB_COMMAND_NAME = 'f';", "modifier": "public static final", "type": "char", "declarator": "LIST_COUNT_SUB_COMMAND_NAME = 'f'", "var_name": "LIST_COUNT_SUB_COMMAND_NAME"}, {"original_string": "public static final String RETURN_VOID = Protocol.RETURN_MESSAGE + \"\" + Protocol.SUCCESS + \"\" + Protocol.VOID\n\t\t\t+ Protocol.END_OUTPUT;", "modifier": "public static final", "type": "String", "declarator": "RETURN_VOID = Protocol.RETURN_MESSAGE + \"\" + Protocol.SUCCESS + \"\" + Protocol.VOID\n\t\t\t+ Protocol.END_OUTPUT", "var_name": "RETURN_VOID"}], "methods": [{"identifier": "ListCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " ListCommand()", "full_signature": "public  ListCommand()", "class_method_signature": "ListCommand.ListCommand()", "testcase": false, "constructor": true}, {"identifier": "call_collections_method", "parameters": "(BufferedReader reader, char listCommand)", "modifiers": "@SuppressWarnings({ \"rawtypes\" }) private", "return": "String", "signature": "String call_collections_method(BufferedReader reader, char listCommand)", "full_signature": "@SuppressWarnings({ \"rawtypes\" }) private String call_collections_method(BufferedReader reader, char listCommand)", "class_method_signature": "ListCommand.call_collections_method(BufferedReader reader, char listCommand)", "testcase": false, "constructor": false}, {"identifier": "concat_list", "parameters": "(BufferedReader reader)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private", "return": "String", "signature": "String concat_list(BufferedReader reader)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private String concat_list(BufferedReader reader)", "class_method_signature": "ListCommand.concat_list(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "count_list", "parameters": "(BufferedReader reader)", "modifiers": "@SuppressWarnings(\"rawtypes\") private", "return": "String", "signature": "String count_list(BufferedReader reader)", "full_signature": "@SuppressWarnings(\"rawtypes\") private String count_list(BufferedReader reader)", "class_method_signature": "ListCommand.count_list(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "ListCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false}, {"identifier": "imult_list", "parameters": "(BufferedReader reader)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private", "return": "String", "signature": "String imult_list(BufferedReader reader)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private String imult_list(BufferedReader reader)", "class_method_signature": "ListCommand.imult_list(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "max_list", "parameters": "(List list)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private", "return": "String", "signature": "String max_list(List list)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private String max_list(List list)", "class_method_signature": "ListCommand.max_list(List list)", "testcase": false, "constructor": false}, {"identifier": "min_list", "parameters": "(List list)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private", "return": "String", "signature": "String min_list(List list)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private String min_list(List list)", "class_method_signature": "ListCommand.min_list(List list)", "testcase": false, "constructor": false}, {"identifier": "mult_list", "parameters": "(BufferedReader reader)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private", "return": "String", "signature": "String mult_list(BufferedReader reader)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private String mult_list(BufferedReader reader)", "class_method_signature": "ListCommand.mult_list(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "reverse_list", "parameters": "(List list)", "modifiers": "@SuppressWarnings({ \"rawtypes\" }) private", "return": "String", "signature": "String reverse_list(List list)", "full_signature": "@SuppressWarnings({ \"rawtypes\" }) private String reverse_list(List list)", "class_method_signature": "ListCommand.reverse_list(List list)", "testcase": false, "constructor": false}, {"identifier": "slice_list", "parameters": "(BufferedReader reader)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private", "return": "String", "signature": "String slice_list(BufferedReader reader)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private String slice_list(BufferedReader reader)", "class_method_signature": "ListCommand.slice_list(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "sort_list", "parameters": "(List list)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private", "return": "String", "signature": "String sort_list(List list)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private String sort_list(List list)", "class_method_signature": "ListCommand.sort_list(List list)", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/commands/ListCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(String commandName, BufferedReader reader, BufferedWriter writer)\n\t\t\tthrows Py4JException, IOException {\n\t\tchar subCommand = safeReadLine(reader).charAt(0);\n\t\tString returnCommand = null;\n\t\tif (subCommand == LIST_SLICE_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = slice_list(reader);\n\t\t} else if (subCommand == LIST_CONCAT_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = concat_list(reader);\n\t\t} else if (subCommand == LIST_MULT_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = mult_list(reader);\n\t\t} else if (subCommand == LIST_IMULT_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = imult_list(reader);\n\t\t} else if (subCommand == LIST_COUNT_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = count_list(reader);\n\t\t} else {\n\t\t\treturnCommand = call_collections_method(reader, subCommand);\n\t\t}\n\n\t\tlogger.finest(\"Returning command: \" + returnCommand);\n\t\twriter.write(returnCommand);\n\t\twriter.flush();\n\t}", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "ListCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false, "invocations": ["charAt", "safeReadLine", "slice_list", "concat_list", "mult_list", "imult_list", "count_list", "call_collections_method", "finest", "write", "flush"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}