{"test_class": {"identifier": "CapsuleToyProtocolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static CapsuleToyProtocol protocol;", "modifier": "private static", "type": "CapsuleToyProtocol", "declarator": "protocol", "var_name": "protocol"}], "file": "BiliLiveLib/src/test/java/charlie/bililivelib/capsuletoy/CapsuleToyProtocolTest.java"}, "test_case": {"identifier": "aGetInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void aGetInfo() throws Exception {\n        System.out.println(protocol.getCapsuleToyInfo());\n    }", "signature": "void aGetInfo()", "full_signature": "@Test public void aGetInfo()", "class_method_signature": "CapsuleToyProtocolTest.aGetInfo()", "testcase": true, "constructor": false, "invocations": ["println", "getCapsuleToyInfo"]}, "focal_class": {"identifier": "CapsuleToyProtocol", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CAPSULE_OPEN_POST = \"/api/ajaxCapsuleOpen\";", "modifier": "private static final", "type": "String", "declarator": "CAPSULE_OPEN_POST = \"/api/ajaxCapsuleOpen\"", "var_name": "CAPSULE_OPEN_POST"}, {"original_string": "private static final String CAPSULE_INFO_GET = \"/api/ajaxCapsule\";", "modifier": "private static final", "type": "String", "declarator": "CAPSULE_INFO_GET = \"/api/ajaxCapsule\"", "var_name": "CAPSULE_INFO_GET"}, {"original_string": "private static final String EXCEPTION_KEY = \"exception.capsule_toy\";", "modifier": "private static final", "type": "String", "declarator": "EXCEPTION_KEY = \"exception.capsule_toy\"", "var_name": "EXCEPTION_KEY"}, {"original_string": "private static final int STATUS_NOT_LOGGED_IN = -101;", "modifier": "private static final", "type": "int", "declarator": "STATUS_NOT_LOGGED_IN = -101", "var_name": "STATUS_NOT_LOGGED_IN"}, {"original_string": "private static final int STATUS_SUCCESS = 0;", "modifier": "private static final", "type": "int", "declarator": "STATUS_SUCCESS = 0", "var_name": "STATUS_SUCCESS"}, {"original_string": "private static final int STATUS_NOT_ENOUGH = -500;", "modifier": "private static final", "type": "int", "declarator": "STATUS_NOT_ENOUGH = -500", "var_name": "STATUS_NOT_ENOUGH"}, {"original_string": "private static final String TOKEN_COOKIE_KEY = \"LIVE_LOGIN_DATA\";", "modifier": "private static final", "type": "String", "declarator": "TOKEN_COOKIE_KEY = \"LIVE_LOGIN_DATA\"", "var_name": "TOKEN_COOKIE_KEY"}, {"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}], "methods": [{"identifier": "CapsuleToyProtocol", "parameters": "(@NotNull Session session)", "modifiers": "public", "return": "", "signature": " CapsuleToyProtocol(@NotNull Session session)", "full_signature": "public  CapsuleToyProtocol(@NotNull Session session)", "class_method_signature": "CapsuleToyProtocol.CapsuleToyProtocol(@NotNull Session session)", "testcase": false, "constructor": true}, {"identifier": "openNormal", "parameters": "(@MagicConstant(intValues = {1, 10, 100}) int count)", "modifiers": "public", "return": "OpenCapsuleToyInfo", "signature": "OpenCapsuleToyInfo openNormal(@MagicConstant(intValues = {1, 10, 100}) int count)", "full_signature": "public OpenCapsuleToyInfo openNormal(@MagicConstant(intValues = {1, 10, 100}) int count)", "class_method_signature": "CapsuleToyProtocol.openNormal(@MagicConstant(intValues = {1, 10, 100}) int count)", "testcase": false, "constructor": false}, {"identifier": "openColorful", "parameters": "(@MagicConstant(intValues = {1, 10, 100}) int count)", "modifiers": "public", "return": "OpenCapsuleToyInfo", "signature": "OpenCapsuleToyInfo openColorful(@MagicConstant(intValues = {1, 10, 100}) int count)", "full_signature": "public OpenCapsuleToyInfo openColorful(@MagicConstant(intValues = {1, 10, 100}) int count)", "class_method_signature": "CapsuleToyProtocol.openColorful(@MagicConstant(intValues = {1, 10, 100}) int count)", "testcase": false, "constructor": false}, {"identifier": "openCapsule", "parameters": "(String type, int count, String token)", "modifiers": "private", "return": "OpenCapsuleToyInfo", "signature": "OpenCapsuleToyInfo openCapsule(String type, int count, String token)", "full_signature": "private OpenCapsuleToyInfo openCapsule(String type, int count, String token)", "class_method_signature": "CapsuleToyProtocol.openCapsule(String type, int count, String token)", "testcase": false, "constructor": false}, {"identifier": "getCapsuleToyInfo", "parameters": "()", "modifiers": "public", "return": "CapsuleToyInfo", "signature": "CapsuleToyInfo getCapsuleToyInfo()", "full_signature": "public CapsuleToyInfo getCapsuleToyInfo()", "class_method_signature": "CapsuleToyProtocol.getCapsuleToyInfo()", "testcase": false, "constructor": false}, {"identifier": "getToken", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getToken()", "full_signature": "private String getToken()", "class_method_signature": "CapsuleToyProtocol.getToken()", "testcase": false, "constructor": false}], "file": "BiliLiveLib/src/main/java/charlie/bililivelib/capsuletoy/CapsuleToyProtocol.java"}, "focal_method": {"identifier": "getCapsuleToyInfo", "parameters": "()", "modifiers": "public", "return": "CapsuleToyInfo", "body": "public CapsuleToyInfo getCapsuleToyInfo() throws BiliLiveException {\n        CapsuleToyInfo info = session.getHttpHelper().getBiliLiveJSON(\n                CAPSULE_INFO_GET, CapsuleToyInfo.class, EXCEPTION_KEY);\n        if (info.code == STATUS_NOT_LOGGED_IN) throw new NotLoggedInException();\n        return info;\n    }", "signature": "CapsuleToyInfo getCapsuleToyInfo()", "full_signature": "public CapsuleToyInfo getCapsuleToyInfo()", "class_method_signature": "CapsuleToyProtocol.getCapsuleToyInfo()", "testcase": false, "constructor": false, "invocations": ["getBiliLiveJSON", "getHttpHelper"]}, "repository": {"repo_id": 74730037, "url": "https://github.com/cqjjjzr/BiliLiveLib", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 17, "size": 535, "license": "licensed"}}