{"test_class": {"identifier": "FileSystemOperationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TARGET_ZIP_FILE = \"targetZipFile\";", "modifier": "private static final", "type": "String", "declarator": "TARGET_ZIP_FILE = \"targetZipFile\"", "var_name": "TARGET_ZIP_FILE"}, {"original_string": "private static final String TARGET_ZIP_DIR = \"targetZipDir\";", "modifier": "private static final", "type": "String", "declarator": "TARGET_ZIP_DIR = \"targetZipDir\"", "var_name": "TARGET_ZIP_DIR"}, {"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private FileUtilitiesForTests fileUtils = new FileUtilitiesForTests();", "modifier": "private", "type": "FileUtilitiesForTests", "declarator": "fileUtils = new FileUtilitiesForTests()", "var_name": "fileUtils"}, {"original_string": "private FileSystemOperations fileSystemOperations;", "modifier": "private", "type": "FileSystemOperations", "declarator": "fileSystemOperations", "var_name": "fileSystemOperations"}, {"original_string": "private Path stagingDir;", "modifier": "private", "type": "Path", "declarator": "stagingDir", "var_name": "stagingDir"}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/test/java/org/apache/submarine/server/submitter/yarnservice/FileSystemOperationsTest.java"}, "test_case": {"identifier": "testUploadToRemoteFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testUploadToRemoteFile() throws IOException {\n    File testFile = fileUtils.createFileInTempDir(\"testFile\");\n    Path path = fileSystemOperations.uploadToRemoteFile(stagingDir,\n        testFile.getAbsolutePath());\n\n    File expectedFile = new File(new File(stagingDir.toString()), \"testFile\");\n    assertEquals(expectedFile.getAbsolutePath(), path.toString());\n\n    Set<Path> uploadedFiles = fileSystemOperations.getUploadedFiles();\n    assertEquals(1, uploadedFiles.size());\n    List<Path> pathList = Lists.newArrayList(uploadedFiles);\n    Path storedPath = pathList.get(0);\n    assertEquals(path, storedPath);\n  }", "signature": "void testUploadToRemoteFile()", "full_signature": "@Test public void testUploadToRemoteFile()", "class_method_signature": "FileSystemOperationsTest.testUploadToRemoteFile()", "testcase": true, "constructor": false, "invocations": ["createFileInTempDir", "uploadToRemoteFile", "getAbsolutePath", "toString", "assertEquals", "getAbsolutePath", "toString", "getUploadedFiles", "assertEquals", "size", "newArrayList", "get", "assertEquals"]}, "focal_class": {"identifier": "FileSystemOperations", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEMP_DIR = System.getProperty(\"java.io.tmpdir\");", "modifier": "private static final", "type": "String", "declarator": "TEMP_DIR = System.getProperty(\"java.io.tmpdir\")", "var_name": "TEMP_DIR"}, {"original_string": "private static final long BYTES_IN_MB = 1024 * 1024;", "modifier": "private static final", "type": "long", "declarator": "BYTES_IN_MB = 1024 * 1024", "var_name": "BYTES_IN_MB"}, {"original_string": "private static final Logger LOG =\n      LoggerFactory.getLogger(FileSystemOperations.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n      LoggerFactory.getLogger(FileSystemOperations.class)", "var_name": "LOG"}, {"original_string": "private final SubmarineConfiguration submarineConfig;", "modifier": "private final", "type": "SubmarineConfiguration", "declarator": "submarineConfig", "var_name": "submarineConfig"}, {"original_string": "private final Configuration yarnConfig;", "modifier": "private final", "type": "Configuration", "declarator": "yarnConfig", "var_name": "yarnConfig"}, {"original_string": "private Set<Path> uploadedFiles = new HashSet<>();", "modifier": "private", "type": "Set<Path>", "declarator": "uploadedFiles = new HashSet<>()", "var_name": "uploadedFiles"}, {"original_string": "private RemoteDirectoryManager remoteDirectoryManager;", "modifier": "private", "type": "RemoteDirectoryManager", "declarator": "remoteDirectoryManager", "var_name": "remoteDirectoryManager"}], "methods": [{"identifier": "FileSystemOperations", "parameters": "(ClientContext clientContext)", "modifiers": "public", "return": "", "signature": " FileSystemOperations(ClientContext clientContext)", "full_signature": "public  FileSystemOperations(ClientContext clientContext)", "class_method_signature": "FileSystemOperations.FileSystemOperations(ClientContext clientContext)", "testcase": false, "constructor": true}, {"identifier": "downloadAndZip", "parameters": "(String remoteDir, String destFileName)", "modifiers": "public", "return": "String", "signature": "String downloadAndZip(String remoteDir, String destFileName)", "full_signature": "public String downloadAndZip(String remoteDir, String destFileName)", "class_method_signature": "FileSystemOperations.downloadAndZip(String remoteDir, String destFileName)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(String remoteDir, String zipFileName)", "modifiers": "public", "return": "String", "signature": "String download(String remoteDir, String zipFileName)", "full_signature": "public String download(String remoteDir, String zipFileName)", "class_method_signature": "FileSystemOperations.download(String remoteDir, String zipFileName)", "testcase": false, "constructor": false}, {"identifier": "downloadInternal", "parameters": "(String remoteDir, String destFileName)", "modifiers": "private", "return": "DownloadResult", "signature": "DownloadResult downloadInternal(String remoteDir, String destFileName)", "full_signature": "private DownloadResult downloadInternal(String remoteDir, String destFileName)", "class_method_signature": "FileSystemOperations.downloadInternal(String remoteDir, String destFileName)", "testcase": false, "constructor": false}, {"identifier": "getFilePathInTempDir", "parameters": "(String zipFileName)", "modifiers": "private", "return": "String", "signature": "String getFilePathInTempDir(String zipFileName)", "full_signature": "private String getFilePathInTempDir(String zipFileName)", "class_method_signature": "FileSystemOperations.getFilePathInTempDir(String zipFileName)", "testcase": false, "constructor": false}, {"identifier": "zipLocalDirectory", "parameters": "(DownloadResult downloadResult)", "modifiers": "private", "return": "String", "signature": "String zipLocalDirectory(DownloadResult downloadResult)", "full_signature": "private String zipLocalDirectory(DownloadResult downloadResult)", "class_method_signature": "FileSystemOperations.zipLocalDirectory(DownloadResult downloadResult)", "testcase": false, "constructor": false}, {"identifier": "getSuffixOfRemoteDirectory", "parameters": "(String remoteDir,\n      FileStatus status)", "modifiers": "private", "return": "String", "signature": "String getSuffixOfRemoteDirectory(String remoteDir,\n      FileStatus status)", "full_signature": "private String getSuffixOfRemoteDirectory(String remoteDir,\n      FileStatus status)", "class_method_signature": "FileSystemOperations.getSuffixOfRemoteDirectory(String remoteDir,\n      FileStatus status)", "testcase": false, "constructor": false}, {"identifier": "getSuffixOfLocalDirectory", "parameters": "(File localDir)", "modifiers": "private", "return": "String", "signature": "String getSuffixOfLocalDirectory(File localDir)", "full_signature": "private String getSuffixOfLocalDirectory(File localDir)", "class_method_signature": "FileSystemOperations.getSuffixOfLocalDirectory(File localDir)", "testcase": false, "constructor": false}, {"identifier": "getSuffixOfDirectory", "parameters": "(long modificationTime, long size)", "modifiers": "private", "return": "String", "signature": "String getSuffixOfDirectory(long modificationTime, long size)", "full_signature": "private String getSuffixOfDirectory(long modificationTime, long size)", "class_method_signature": "FileSystemOperations.getSuffixOfDirectory(long modificationTime, long size)", "testcase": false, "constructor": false}, {"identifier": "downloadRemoteFile", "parameters": "(String remoteDir, String zipDirPath)", "modifiers": "private", "return": "void", "signature": "void downloadRemoteFile(String remoteDir, String zipDirPath)", "full_signature": "private void downloadRemoteFile(String remoteDir, String zipDirPath)", "class_method_signature": "FileSystemOperations.downloadRemoteFile(String remoteDir, String zipDirPath)", "testcase": false, "constructor": false}, {"identifier": "deleteFiles", "parameters": "(String localUri)", "modifiers": "public", "return": "void", "signature": "void deleteFiles(String localUri)", "full_signature": "public void deleteFiles(String localUri)", "class_method_signature": "FileSystemOperations.deleteFiles(String localUri)", "testcase": false, "constructor": false}, {"identifier": "uploadToRemoteFileAndLocalizeToContainerWorkDir", "parameters": "(Path stagingDir,\n      String fileToUpload, String destFilename, Component comp)", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void uploadToRemoteFileAndLocalizeToContainerWorkDir(Path stagingDir,\n      String fileToUpload, String destFilename, Component comp)", "full_signature": "@VisibleForTesting public void uploadToRemoteFileAndLocalizeToContainerWorkDir(Path stagingDir,\n      String fileToUpload, String destFilename, Component comp)", "class_method_signature": "FileSystemOperations.uploadToRemoteFileAndLocalizeToContainerWorkDir(Path stagingDir,\n      String fileToUpload, String destFilename, Component comp)", "testcase": false, "constructor": false}, {"identifier": "locateRemoteFileToContainerWorkDir", "parameters": "(String destFilename,\n      Component comp, Path uploadedFilePath)", "modifiers": "private", "return": "void", "signature": "void locateRemoteFileToContainerWorkDir(String destFilename,\n      Component comp, Path uploadedFilePath)", "full_signature": "private void locateRemoteFileToContainerWorkDir(String destFilename,\n      Component comp, Path uploadedFilePath)", "class_method_signature": "FileSystemOperations.locateRemoteFileToContainerWorkDir(String destFilename,\n      Component comp, Path uploadedFilePath)", "testcase": false, "constructor": false}, {"identifier": "addFilesToComponent", "parameters": "(Component comp, ConfigFile... configFiles)", "modifiers": "private", "return": "void", "signature": "void addFilesToComponent(Component comp, ConfigFile... configFiles)", "full_signature": "private void addFilesToComponent(Component comp, ConfigFile... configFiles)", "class_method_signature": "FileSystemOperations.addFilesToComponent(Component comp, ConfigFile... configFiles)", "testcase": false, "constructor": false}, {"identifier": "uploadToRemoteFile", "parameters": "(Path stagingDir, String fileToUpload)", "modifiers": "public", "return": "Path", "signature": "Path uploadToRemoteFile(Path stagingDir, String fileToUpload)", "full_signature": "public Path uploadToRemoteFile(Path stagingDir, String fileToUpload)", "class_method_signature": "FileSystemOperations.uploadToRemoteFile(Path stagingDir, String fileToUpload)", "testcase": false, "constructor": false}, {"identifier": "validFileSize", "parameters": "(String uri)", "modifiers": "public", "return": "void", "signature": "void validFileSize(String uri)", "full_signature": "public void validFileSize(String uri)", "class_method_signature": "FileSystemOperations.validFileSize(String uri)", "testcase": false, "constructor": false}, {"identifier": "getFileSizeInBytes", "parameters": "(String uri, boolean remote)", "modifiers": "private", "return": "long", "signature": "long getFileSizeInBytes(String uri, boolean remote)", "full_signature": "private long getFileSizeInBytes(String uri, boolean remote)", "class_method_signature": "FileSystemOperations.getFileSizeInBytes(String uri, boolean remote)", "testcase": false, "constructor": false}, {"identifier": "getMaxRemoteFileSizeMB", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getMaxRemoteFileSizeMB()", "full_signature": "private long getMaxRemoteFileSizeMB()", "class_method_signature": "FileSystemOperations.getMaxRemoteFileSizeMB()", "testcase": false, "constructor": false}, {"identifier": "convertToBytes", "parameters": "(long fileSizeMB)", "modifiers": "private", "return": "long", "signature": "long convertToBytes(long fileSizeMB)", "full_signature": "private long convertToBytes(long fileSizeMB)", "class_method_signature": "FileSystemOperations.convertToBytes(long fileSizeMB)", "testcase": false, "constructor": false}, {"identifier": "setPermission", "parameters": "(Path destPath, FsPermission permission)", "modifiers": "public", "return": "void", "signature": "void setPermission(Path destPath, FsPermission permission)", "full_signature": "public void setPermission(Path destPath, FsPermission permission)", "class_method_signature": "FileSystemOperations.setPermission(Path destPath, FsPermission permission)", "testcase": false, "constructor": false}, {"identifier": "needHdfs", "parameters": "(List<String> stringsToCheck)", "modifiers": "public static", "return": "boolean", "signature": "boolean needHdfs(List<String> stringsToCheck)", "full_signature": "public static boolean needHdfs(List<String> stringsToCheck)", "class_method_signature": "FileSystemOperations.needHdfs(List<String> stringsToCheck)", "testcase": false, "constructor": false}, {"identifier": "needHdfs", "parameters": "(String content)", "modifiers": "public static", "return": "boolean", "signature": "boolean needHdfs(String content)", "full_signature": "public static boolean needHdfs(String content)", "class_method_signature": "FileSystemOperations.needHdfs(String content)", "testcase": false, "constructor": false}, {"identifier": "getUploadedFiles", "parameters": "()", "modifiers": "public", "return": "Set<Path>", "signature": "Set<Path> getUploadedFiles()", "full_signature": "public Set<Path> getUploadedFiles()", "class_method_signature": "FileSystemOperations.getUploadedFiles()", "testcase": false, "constructor": false}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/main/java/org/apache/submarine/server/submitter/yarnservice/FileSystemOperations.java"}, "focal_method": {"identifier": "uploadToRemoteFile", "parameters": "(Path stagingDir, String fileToUpload)", "modifiers": "public", "return": "Path", "body": "public Path uploadToRemoteFile(Path stagingDir, String fileToUpload) throws\n      IOException {\n    FileSystem fs = remoteDirectoryManager.getDefaultFileSystem();\n\n    // Upload to remote FS under staging area\n    File localFile = new File(fileToUpload);\n    if (!localFile.exists()) {\n      throw new FileNotFoundException(\n          \"Trying to upload file \" + localFile.getAbsolutePath()\n              + \" to remote, but could not find local file!\");\n    }\n    String filename = localFile.getName();\n\n    Path uploadedFilePath = new Path(stagingDir, filename);\n    if (!uploadedFiles.contains(uploadedFilePath)) {\n      if (SubmarineLogs.isVerbose()) {\n        LOG.info(\"Copying local file \" + fileToUpload + \" to remote \"\n            + uploadedFilePath);\n      }\n      fs.copyFromLocalFile(new Path(fileToUpload), uploadedFilePath);\n      uploadedFiles.add(uploadedFilePath);\n    }\n    return uploadedFilePath;\n  }", "signature": "Path uploadToRemoteFile(Path stagingDir, String fileToUpload)", "full_signature": "public Path uploadToRemoteFile(Path stagingDir, String fileToUpload)", "class_method_signature": "FileSystemOperations.uploadToRemoteFile(Path stagingDir, String fileToUpload)", "testcase": false, "constructor": false, "invocations": ["getDefaultFileSystem", "exists", "getAbsolutePath", "getName", "contains", "isVerbose", "info", "copyFromLocalFile", "add"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}