{"test_class": {"identifier": "DataManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataManager dataManager;", "modifier": "private", "type": "DataManager", "declarator": "dataManager", "var_name": "dataManager"}, {"original_string": "private HazelcastCacheManager cacheManager;", "modifier": "private", "type": "HazelcastCacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}], "file": "exposure-engine/common/src/test/java/com/alu/e3/data/DataManagerTest.java"}, "test_case": {"identifier": "testDataManager", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDataManager() {\n\t\tassertNotNull(\"Check that DataManager is not null\", dataManager);\n\t}", "signature": "void testDataManager()", "full_signature": "@Test public void testDataManager()", "class_method_signature": "DataManagerTest.testDataManager()", "testcase": true, "constructor": false, "invocations": ["assertNotNull"]}, "focal_class": {"identifier": "DataManager", "superclass": "", "interfaces": "implements IDataManager, IInstanceListener", "fields": [{"original_string": "private static final CategoryLogger logger = CategoryLoggerFactory.getLogger(DataManager.class, Category.DMGR);", "modifier": "private static final", "type": "CategoryLogger", "declarator": "logger = CategoryLoggerFactory.getLogger(DataManager.class, Category.DMGR)", "var_name": "logger"}, {"original_string": "private boolean isHazelCastTablesInitialized = false;", "modifier": "private", "type": "boolean", "declarator": "isHazelCastTablesInitialized = false", "var_name": "isHazelCastTablesInitialized"}, {"original_string": "private ICacheTable<String, ApiDetail> cachingTableApiDetails;", "modifier": "private", "type": "ICacheTable<String, ApiDetail>", "declarator": "cachingTableApiDetails", "var_name": "cachingTableApiDetails"}, {"original_string": "private ICacheTable<String, AuthDetail> cachingTableAuthDetails;", "modifier": "private", "type": "ICacheTable<String, AuthDetail>", "declarator": "cachingTableAuthDetails", "var_name": "cachingTableAuthDetails"}, {"original_string": "private ICacheTable<String, String> cachingTableAuthIdToAuthToken;", "modifier": "private", "type": "ICacheTable<String, String>", "declarator": "cachingTableAuthIdToAuthToken", "var_name": "cachingTableAuthIdToAuthToken"}, {"original_string": "private ICacheTable<String, KeyDetail> cachingTableKeyDetails;", "modifier": "private", "type": "ICacheTable<String, KeyDetail>", "declarator": "cachingTableKeyDetails", "var_name": "cachingTableKeyDetails"}, {"original_string": "private ICacheTable<String, CertificateDetail> cachingTableCertificateDetails;", "modifier": "private", "type": "ICacheTable<String, CertificateDetail>", "declarator": "cachingTableCertificateDetails", "var_name": "cachingTableCertificateDetails"}, {"original_string": "private ICacheTable<String, CertificateDetail> cachingTableCADetails;", "modifier": "private", "type": "ICacheTable<String, CertificateDetail>", "declarator": "cachingTableCADetails", "var_name": "cachingTableCADetails"}, {"original_string": "private Set<Integer> usedBucketIds = new HashSet<Integer>();", "modifier": "private", "type": "Set<Integer>", "declarator": "usedBucketIds = new HashSet<Integer>()", "var_name": "usedBucketIds"}, {"original_string": "private Set<String> usedEndpoints = new HashSet<String>();", "modifier": "private", "type": "Set<String>", "declarator": "usedEndpoints = new HashSet<String>()", "var_name": "usedEndpoints"}, {"original_string": "private ICacheTable<String, Api> cachingTableApi;", "modifier": "private", "type": "ICacheTable<String, Api>", "declarator": "cachingTableApi", "var_name": "cachingTableApi"}, {"original_string": "private ICacheTable<String, Auth> cachingTableAuth;", "modifier": "private", "type": "ICacheTable<String, Auth>", "declarator": "cachingTableAuth", "var_name": "cachingTableAuth"}, {"original_string": "private ICacheTable<String, String> cachingTableAuthIpAddress;", "modifier": "private", "type": "ICacheTable<String, String>", "declarator": "cachingTableAuthIpAddress", "var_name": "cachingTableAuthIpAddress"}, {"original_string": "private ICacheTable<String, Policy> cachingTablePolicy;", "modifier": "private", "type": "ICacheTable<String, Policy>", "declarator": "cachingTablePolicy", "var_name": "cachingTablePolicy"}, {"original_string": "private ICacheTable<Integer, ContextWrapper> cachingTableContext;", "modifier": "private", "type": "ICacheTable<Integer, ContextWrapper>", "declarator": "cachingTableContext", "var_name": "cachingTableContext"}, {"original_string": "private ICacheTable<String, String> cachingTableSettings;", "modifier": "private", "type": "ICacheTable<String, String>", "declarator": "cachingTableSettings", "var_name": "cachingTableSettings"}, {"original_string": "private ICacheTable<String, Key> cachingTableKey;", "modifier": "private", "type": "ICacheTable<String, Key>", "declarator": "cachingTableKey", "var_name": "cachingTableKey"}, {"original_string": "private ICacheTable<String, Certificate> cachingTableCertificate;", "modifier": "private", "type": "ICacheTable<String, Certificate>", "declarator": "cachingTableCertificate", "var_name": "cachingTableCertificate"}, {"original_string": "private ICacheTable<String, LogLevel> cachingTableLogLevel;", "modifier": "private", "type": "ICacheTable<String, LogLevel>", "declarator": "cachingTableLogLevel", "var_name": "cachingTableLogLevel"}, {"original_string": "private ICacheTable<String, Certificate> cachingTableCA;", "modifier": "private", "type": "ICacheTable<String, Certificate>", "declarator": "cachingTableCA", "var_name": "cachingTableCA"}, {"original_string": "private ICacheTable<String, SSLCRL> cachingTableCRL;", "modifier": "private", "type": "ICacheTable<String, SSLCRL>", "declarator": "cachingTableCRL", "var_name": "cachingTableCRL"}, {"original_string": "private ICacheTable<String, ApiJar> cachingTableApiJars;", "modifier": "private", "type": "ICacheTable<String, ApiJar>", "declarator": "cachingTableApiJars", "var_name": "cachingTableApiJars"}, {"original_string": "private ICacheManager cacheManager;", "modifier": "private", "type": "ICacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "private ITopologyClient topologyClient;", "modifier": "private", "type": "ITopologyClient", "declarator": "topologyClient", "var_name": "topologyClient"}, {"original_string": "protected boolean manager;", "modifier": "protected", "type": "boolean", "declarator": "manager", "var_name": "manager"}, {"original_string": "private ReentrantLock dataManagerReadyLock = new ReentrantLock();", "modifier": "private", "type": "ReentrantLock", "declarator": "dataManagerReadyLock = new ReentrantLock()", "var_name": "dataManagerReadyLock"}, {"original_string": "private Set<IDataManagerListener> listeners = new HashSet<IDataManagerListener>();", "modifier": "private", "type": "Set<IDataManagerListener>", "declarator": "listeners = new HashSet<IDataManagerListener>()", "var_name": "listeners"}, {"original_string": "private Set<IDataManagerUsedBucketIdsListener> usedBucketIdslisteners = new HashSet<IDataManagerUsedBucketIdsListener>();", "modifier": "private", "type": "Set<IDataManagerUsedBucketIdsListener>", "declarator": "usedBucketIdslisteners = new HashSet<IDataManagerUsedBucketIdsListener>()", "var_name": "usedBucketIdslisteners"}, {"original_string": "protected HandlerPool<String, MapHandler<String, ApiJar>> mapHandlerPool = new HandlerPool<String, MapHandler<String, ApiJar>>(E3Constant.HAZELCAST_HANDLER_POOL_MAX_SIZE);", "modifier": "protected", "type": "HandlerPool<String, MapHandler<String, ApiJar>>", "declarator": "mapHandlerPool = new HandlerPool<String, MapHandler<String, ApiJar>>(E3Constant.HAZELCAST_HANDLER_POOL_MAX_SIZE)", "var_name": "mapHandlerPool"}, {"original_string": "private static final int WSSE_AGE_SECONDS = 5 * 60;", "modifier": "private static final", "type": "int", "declarator": "WSSE_AGE_SECONDS = 5 * 60", "var_name": "WSSE_AGE_SECONDS"}, {"original_string": "private ExpiringSet<String> liveNonces = new ExpiringSet<String>(WSSE_AGE_SECONDS + 30);", "modifier": "private", "type": "ExpiringSet<String>", "declarator": "liveNonces = new ExpiringSet<String>(WSSE_AGE_SECONDS + 30)", "var_name": "liveNonces"}], "methods": [{"identifier": "DataManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " DataManager()", "full_signature": "public  DataManager()", "class_method_signature": "DataManager.DataManager()", "testcase": false, "constructor": true}, {"identifier": "addListener", "parameters": "(IDataManagerListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(IDataManagerListener listener)", "full_signature": "@Override public void addListener(IDataManagerListener listener)", "class_method_signature": "DataManager.addListener(IDataManagerListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(IDataManagerListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(IDataManagerListener listener)", "full_signature": "@Override public void removeListener(IDataManagerListener listener)", "class_method_signature": "DataManager.removeListener(IDataManagerListener listener)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(IDataManagerUsedBucketIdsListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(IDataManagerUsedBucketIdsListener listener)", "full_signature": "@Override public void addListener(IDataManagerUsedBucketIdsListener listener)", "class_method_signature": "DataManager.addListener(IDataManagerUsedBucketIdsListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(IDataManagerUsedBucketIdsListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(IDataManagerUsedBucketIdsListener listener)", "full_signature": "@Override public void removeListener(IDataManagerUsedBucketIdsListener listener)", "class_method_signature": "DataManager.removeListener(IDataManagerUsedBucketIdsListener listener)", "testcase": false, "constructor": false}, {"identifier": "populateBucketAndAPIIds", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateBucketAndAPIIds()", "full_signature": "private void populateBucketAndAPIIds()", "class_method_signature": "DataManager.populateBucketAndAPIIds()", "testcase": false, "constructor": false}, {"identifier": "populateUsedEndpoints", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateUsedEndpoints()", "full_signature": "private void populateUsedEndpoints()", "class_method_signature": "DataManager.populateUsedEndpoints()", "testcase": false, "constructor": false}, {"identifier": "setManager", "parameters": "(boolean manager)", "modifiers": "public", "return": "void", "signature": "void setManager(boolean manager)", "full_signature": "public void setManager(boolean manager)", "class_method_signature": "DataManager.setManager(boolean manager)", "testcase": false, "constructor": false}, {"identifier": "isManager", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isManager()", "full_signature": "private boolean isManager()", "class_method_signature": "DataManager.isManager()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "DataManager.init()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "DataManager.destroy()", "testcase": false, "constructor": false}, {"identifier": "fireDataManagerReady", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fireDataManagerReady()", "full_signature": "private void fireDataManagerReady()", "class_method_signature": "DataManager.fireDataManagerReady()", "testcase": false, "constructor": false}, {"identifier": "createDataStoreTables", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void createDataStoreTables()", "full_signature": "private synchronized void createDataStoreTables()", "class_method_signature": "DataManager.createDataStoreTables()", "testcase": false, "constructor": false}, {"identifier": "setCacheManager", "parameters": "(ICacheManager cacheManager)", "modifiers": "@Override public", "return": "void", "signature": "void setCacheManager(ICacheManager cacheManager)", "full_signature": "@Override public void setCacheManager(ICacheManager cacheManager)", "class_method_signature": "DataManager.setCacheManager(ICacheManager cacheManager)", "testcase": false, "constructor": false}, {"identifier": "reloadGateway", "parameters": "(String ip)", "modifiers": "@Override public", "return": "void", "signature": "void reloadGateway(String ip)", "full_signature": "@Override public void reloadGateway(String ip)", "class_method_signature": "DataManager.reloadGateway(String ip)", "testcase": false, "constructor": false}, {"identifier": "setTopologyClient", "parameters": "(ITopologyClient topologyClient)", "modifiers": "public", "return": "void", "signature": "void setTopologyClient(ITopologyClient topologyClient)", "full_signature": "public void setTopologyClient(ITopologyClient topologyClient)", "class_method_signature": "DataManager.setTopologyClient(ITopologyClient topologyClient)", "testcase": false, "constructor": false}, {"identifier": "getAllApiIds", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getAllApiIds()", "full_signature": "@Override public Set<String> getAllApiIds()", "class_method_signature": "DataManager.getAllApiIds()", "testcase": false, "constructor": false}, {"identifier": "isApiExist", "parameters": "(String apiId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isApiExist(String apiId)", "full_signature": "@Override public boolean isApiExist(String apiId)", "class_method_signature": "DataManager.isApiExist(String apiId)", "testcase": false, "constructor": false}, {"identifier": "addApi", "parameters": "(Api api)", "modifiers": "@Override public", "return": "void", "signature": "void addApi(Api api)", "full_signature": "@Override public void addApi(Api api)", "class_method_signature": "DataManager.addApi(Api api)", "testcase": false, "constructor": false}, {"identifier": "endpointExists", "parameters": "(String endpoint)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean endpointExists(String endpoint)", "full_signature": "@Override public boolean endpointExists(String endpoint)", "class_method_signature": "DataManager.endpointExists(String endpoint)", "testcase": false, "constructor": false}, {"identifier": "internalSaveApiDetails", "parameters": "(Api api)", "modifiers": "private", "return": "void", "signature": "void internalSaveApiDetails(Api api)", "full_signature": "private void internalSaveApiDetails(Api api)", "class_method_signature": "DataManager.internalSaveApiDetails(Api api)", "testcase": false, "constructor": false}, {"identifier": "updateApi", "parameters": "(Api api)", "modifiers": "@Override public", "return": "void", "signature": "void updateApi(Api api)", "full_signature": "@Override public void updateApi(Api api)", "class_method_signature": "DataManager.updateApi(Api api)", "testcase": false, "constructor": false}, {"identifier": "removeApi", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void removeApi(String id)", "full_signature": "@Override public void removeApi(String id)", "class_method_signature": "DataManager.removeApi(String id)", "testcase": false, "constructor": false}, {"identifier": "getApiById", "parameters": "(String id)", "modifiers": "@Override public", "return": "Api", "signature": "Api getApiById(String id)", "full_signature": "@Override public Api getApiById(String id)", "class_method_signature": "DataManager.getApiById(String id)", "testcase": false, "constructor": false}, {"identifier": "getApiById", "parameters": "(String id, boolean getFullDetails)", "modifiers": "@Override public", "return": "Api", "signature": "Api getApiById(String id, boolean getFullDetails)", "full_signature": "@Override public Api getApiById(String id, boolean getFullDetails)", "class_method_signature": "DataManager.getApiById(String id, boolean getFullDetails)", "testcase": false, "constructor": false}, {"identifier": "byteToString", "parameters": "(byte[] data)", "modifiers": "private", "return": "String", "signature": "String byteToString(byte[] data)", "full_signature": "private String byteToString(byte[] data)", "class_method_signature": "DataManager.byteToString(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "hashAuthId", "parameters": "(String auth)", "modifiers": "private", "return": "String", "signature": "String hashAuthId(String auth)", "full_signature": "private String hashAuthId(String auth)", "class_method_signature": "DataManager.hashAuthId(String auth)", "testcase": false, "constructor": false}, {"identifier": "createTokenFromAuth", "parameters": "(Auth auth)", "modifiers": "private", "return": "String", "signature": "String createTokenFromAuth(Auth auth)", "full_signature": "private String createTokenFromAuth(Auth auth)", "class_method_signature": "DataManager.createTokenFromAuth(Auth auth)", "testcase": false, "constructor": false}, {"identifier": "createTokenFromAuthKey", "parameters": "(String authKey)", "modifiers": "private", "return": "String", "signature": "String createTokenFromAuthKey(String authKey)", "full_signature": "private String createTokenFromAuthKey(String authKey)", "class_method_signature": "DataManager.createTokenFromAuthKey(String authKey)", "testcase": false, "constructor": false}, {"identifier": "createTokenFromOAuth", "parameters": "(String clientId, String clientSecret)", "modifiers": "private", "return": "String", "signature": "String createTokenFromOAuth(String clientId, String clientSecret)", "full_signature": "private String createTokenFromOAuth(String clientId, String clientSecret)", "class_method_signature": "DataManager.createTokenFromOAuth(String clientId, String clientSecret)", "testcase": false, "constructor": false}, {"identifier": "createTokenFromUserPass", "parameters": "(String username, String password)", "modifiers": "private", "return": "String", "signature": "String createTokenFromUserPass(String username, String password)", "full_signature": "private String createTokenFromUserPass(String username, String password)", "class_method_signature": "DataManager.createTokenFromUserPass(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "createWsseTokenFromUser", "parameters": "(String username)", "modifiers": "private", "return": "String", "signature": "String createWsseTokenFromUser(String username)", "full_signature": "private String createWsseTokenFromUser(String username)", "class_method_signature": "DataManager.createWsseTokenFromUser(String username)", "testcase": false, "constructor": false}, {"identifier": "getAllAuthIds", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getAllAuthIds()", "full_signature": "@Override public Set<String> getAllAuthIds()", "class_method_signature": "DataManager.getAllAuthIds()", "testcase": false, "constructor": false}, {"identifier": "addAuth", "parameters": "(Auth auth)", "modifiers": "@Override public", "return": "void", "signature": "void addAuth(Auth auth)", "full_signature": "@Override public void addAuth(Auth auth)", "class_method_signature": "DataManager.addAuth(Auth auth)", "testcase": false, "constructor": false}, {"identifier": "updateAuth", "parameters": "(Auth auth)", "modifiers": "@Override public", "return": "void", "signature": "void updateAuth(Auth auth)", "full_signature": "@Override public void updateAuth(Auth auth)", "class_method_signature": "DataManager.updateAuth(Auth auth)", "testcase": false, "constructor": false}, {"identifier": "removeAuth", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void removeAuth(String id)", "full_signature": "@Override public void removeAuth(String id)", "class_method_signature": "DataManager.removeAuth(String id)", "testcase": false, "constructor": false}, {"identifier": "getAuthById", "parameters": "(String id)", "modifiers": "@Override public", "return": "Auth", "signature": "Auth getAuthById(String id)", "full_signature": "@Override public Auth getAuthById(String id)", "class_method_signature": "DataManager.getAuthById(String id)", "testcase": false, "constructor": false}, {"identifier": "getAuthById", "parameters": "(String id, boolean getFullDetails)", "modifiers": "@Override public", "return": "Auth", "signature": "Auth getAuthById(String id, boolean getFullDetails)", "full_signature": "@Override public Auth getAuthById(String id, boolean getFullDetails)", "class_method_signature": "DataManager.getAuthById(String id, boolean getFullDetails)", "testcase": false, "constructor": false}, {"identifier": "getAuthByToken", "parameters": "(String authToken, boolean getFullDetails)", "modifiers": "private", "return": "Auth", "signature": "Auth getAuthByToken(String authToken, boolean getFullDetails)", "full_signature": "private Auth getAuthByToken(String authToken, boolean getFullDetails)", "class_method_signature": "DataManager.getAuthByToken(String authToken, boolean getFullDetails)", "testcase": false, "constructor": false}, {"identifier": "getAuthByAuthKey", "parameters": "(String authKey)", "modifiers": "@Override public", "return": "Auth", "signature": "Auth getAuthByAuthKey(String authKey)", "full_signature": "@Override public Auth getAuthByAuthKey(String authKey)", "class_method_signature": "DataManager.getAuthByAuthKey(String authKey)", "testcase": false, "constructor": false}, {"identifier": "getAuthByOAuth", "parameters": "(String clientId, String clientSecret)", "modifiers": "@Override public", "return": "Auth", "signature": "Auth getAuthByOAuth(String clientId, String clientSecret)", "full_signature": "@Override public Auth getAuthByOAuth(String clientId, String clientSecret)", "class_method_signature": "DataManager.getAuthByOAuth(String clientId, String clientSecret)", "testcase": false, "constructor": false}, {"identifier": "getAuthByUserPass", "parameters": "(String username, String password)", "modifiers": "@Override public", "return": "Auth", "signature": "Auth getAuthByUserPass(String username, String password)", "full_signature": "@Override public Auth getAuthByUserPass(String username, String password)", "class_method_signature": "DataManager.getAuthByUserPass(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "getWsseAuth", "parameters": "(String username, String password, boolean isPasswordText, String nonce, String created)", "modifiers": "@Override public", "return": "Auth", "signature": "Auth getWsseAuth(String username, String password, boolean isPasswordText, String nonce, String created)", "full_signature": "@Override public Auth getWsseAuth(String username, String password, boolean isPasswordText, String nonce, String created)", "class_method_signature": "DataManager.getWsseAuth(String username, String password, boolean isPasswordText, String nonce, String created)", "testcase": false, "constructor": false}, {"identifier": "getAuthByIP", "parameters": "(String ip)", "modifiers": "@Override public", "return": "Auth", "signature": "Auth getAuthByIP(String ip)", "full_signature": "@Override public Auth getAuthByIP(String ip)", "class_method_signature": "DataManager.getAuthByIP(String ip)", "testcase": false, "constructor": false}, {"identifier": "getAuthMatching", "parameters": "(IAuthMatcher authMatcher)", "modifiers": "@Override public", "return": "Auth", "signature": "Auth getAuthMatching(IAuthMatcher authMatcher)", "full_signature": "@Override public Auth getAuthMatching(IAuthMatcher authMatcher)", "class_method_signature": "DataManager.getAuthMatching(IAuthMatcher authMatcher)", "testcase": false, "constructor": false}, {"identifier": "getAllPolicy", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getAllPolicy()", "full_signature": "@Override public Set<String> getAllPolicy()", "class_method_signature": "DataManager.getAllPolicy()", "testcase": false, "constructor": false}, {"identifier": "addPolicy", "parameters": "(Policy policy)", "modifiers": "@Override public", "return": "void", "signature": "void addPolicy(Policy policy)", "full_signature": "@Override public void addPolicy(Policy policy)", "class_method_signature": "DataManager.addPolicy(Policy policy)", "testcase": false, "constructor": false}, {"identifier": "getPolicyContextId", "parameters": "(Auth auth, Policy policy)", "modifiers": "private", "return": "int", "signature": "int getPolicyContextId(Auth auth, Policy policy)", "full_signature": "private int getPolicyContextId(Auth auth, Policy policy)", "class_method_signature": "DataManager.getPolicyContextId(Auth auth, Policy policy)", "testcase": false, "constructor": false}, {"identifier": "updatePolicy", "parameters": "(Policy policy)", "modifiers": "@Override public", "return": "void", "signature": "void updatePolicy(Policy policy)", "full_signature": "@Override public void updatePolicy(Policy policy)", "class_method_signature": "DataManager.updatePolicy(Policy policy)", "testcase": false, "constructor": false}, {"identifier": "updatePolicy", "parameters": "(Policy policy, boolean update)", "modifiers": "private", "return": "void", "signature": "void updatePolicy(Policy policy, boolean update)", "full_signature": "private void updatePolicy(Policy policy, boolean update)", "class_method_signature": "DataManager.updatePolicy(Policy policy, boolean update)", "testcase": false, "constructor": false}, {"identifier": "removePolicy", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void removePolicy(String id)", "full_signature": "@Override public void removePolicy(String id)", "class_method_signature": "DataManager.removePolicy(String id)", "testcase": false, "constructor": false}, {"identifier": "getPolicyById", "parameters": "(String id)", "modifiers": "@Override public", "return": "Policy", "signature": "Policy getPolicyById(String id)", "full_signature": "@Override public Policy getPolicyById(String id)", "class_method_signature": "DataManager.getPolicyById(String id)", "testcase": false, "constructor": false}, {"identifier": "getPolicyById", "parameters": "(String id, boolean getFullDetails)", "modifiers": "@Override public", "return": "Policy", "signature": "Policy getPolicyById(String id, boolean getFullDetails)", "full_signature": "@Override public Policy getPolicyById(String id, boolean getFullDetails)", "class_method_signature": "DataManager.getPolicyById(String id, boolean getFullDetails)", "testcase": false, "constructor": false}, {"identifier": "createBucket", "parameters": "(String policyId, QuotaRLBucket bucket)", "modifiers": "@Override public", "return": "void", "signature": "void createBucket(String policyId, QuotaRLBucket bucket)", "full_signature": "@Override public void createBucket(String policyId, QuotaRLBucket bucket)", "class_method_signature": "DataManager.createBucket(String policyId, QuotaRLBucket bucket)", "testcase": false, "constructor": false}, {"identifier": "checkIfAuthAlreadyInPolicy", "parameters": "(String policyId, List<String> authIds, String bucketId)", "modifiers": "private", "return": "void", "signature": "void checkIfAuthAlreadyInPolicy(String policyId, List<String> authIds, String bucketId)", "full_signature": "private void checkIfAuthAlreadyInPolicy(String policyId, List<String> authIds, String bucketId)", "class_method_signature": "DataManager.checkIfAuthAlreadyInPolicy(String policyId, List<String> authIds, String bucketId)", "testcase": false, "constructor": false}, {"identifier": "addAuthsToBucket", "parameters": "(String policyId, String bucketId, QuotaRLBucket bucket)", "modifiers": "@Override public", "return": "void", "signature": "void addAuthsToBucket(String policyId, String bucketId, QuotaRLBucket bucket)", "full_signature": "@Override public void addAuthsToBucket(String policyId, String bucketId, QuotaRLBucket bucket)", "class_method_signature": "DataManager.addAuthsToBucket(String policyId, String bucketId, QuotaRLBucket bucket)", "testcase": false, "constructor": false}, {"identifier": "addAuthsToBucket", "parameters": "(List<String> policyIds, String bucketId, QuotaRLBucket authIds)", "modifiers": "@Override public", "return": "void", "signature": "void addAuthsToBucket(List<String> policyIds, String bucketId, QuotaRLBucket authIds)", "full_signature": "@Override public void addAuthsToBucket(List<String> policyIds, String bucketId, QuotaRLBucket authIds)", "class_method_signature": "DataManager.addAuthsToBucket(List<String> policyIds, String bucketId, QuotaRLBucket authIds)", "testcase": false, "constructor": false}, {"identifier": "appendAuthsToBucket", "parameters": "(List<String> policyIds, String bucketId, QuotaRLBucket authIds)", "modifiers": "@Override public", "return": "void", "signature": "void appendAuthsToBucket(List<String> policyIds, String bucketId, QuotaRLBucket authIds)", "full_signature": "@Override public void appendAuthsToBucket(List<String> policyIds, String bucketId, QuotaRLBucket authIds)", "class_method_signature": "DataManager.appendAuthsToBucket(List<String> policyIds, String bucketId, QuotaRLBucket authIds)", "testcase": false, "constructor": false}, {"identifier": "removeAuthFromBucket", "parameters": "(String policyId, String bucketId, String authId)", "modifiers": "@Override public", "return": "void", "signature": "void removeAuthFromBucket(String policyId, String bucketId, String authId)", "full_signature": "@Override public void removeAuthFromBucket(String policyId, String bucketId, String authId)", "class_method_signature": "DataManager.removeAuthFromBucket(String policyId, String bucketId, String authId)", "testcase": false, "constructor": false}, {"identifier": "removeAuthsFromBucket", "parameters": "(List<String> policyIds, String bucketId, List<String> authIds)", "modifiers": "@Override public", "return": "void", "signature": "void removeAuthsFromBucket(List<String> policyIds, String bucketId, List<String> authIds)", "full_signature": "@Override public void removeAuthsFromBucket(List<String> policyIds, String bucketId, List<String> authIds)", "class_method_signature": "DataManager.removeAuthsFromBucket(List<String> policyIds, String bucketId, List<String> authIds)", "testcase": false, "constructor": false}, {"identifier": "removeBucket", "parameters": "(String policyId, String bucketId)", "modifiers": "@Override public", "return": "void", "signature": "void removeBucket(String policyId, String bucketId)", "full_signature": "@Override public void removeBucket(String policyId, String bucketId)", "class_method_signature": "DataManager.removeBucket(String policyId, String bucketId)", "testcase": false, "constructor": false}, {"identifier": "removeBucket", "parameters": "(List<String> policyIds, String bucketId)", "modifiers": "@Override public", "return": "void", "signature": "void removeBucket(List<String> policyIds, String bucketId)", "full_signature": "@Override public void removeBucket(List<String> policyIds, String bucketId)", "class_method_signature": "DataManager.removeBucket(List<String> policyIds, String bucketId)", "testcase": false, "constructor": false}, {"identifier": "getBucketWithIdForPolicy", "parameters": "(Policy policy, String bucketId)", "modifiers": "private", "return": "QuotaRLBucket", "signature": "QuotaRLBucket getBucketWithIdForPolicy(Policy policy, String bucketId)", "full_signature": "private QuotaRLBucket getBucketWithIdForPolicy(Policy policy, String bucketId)", "class_method_signature": "DataManager.getBucketWithIdForPolicy(Policy policy, String bucketId)", "testcase": false, "constructor": false}, {"identifier": "getMatchingPolicies", "parameters": "(Api api)", "modifiers": "@Override public", "return": "List<CallDescriptor>", "signature": "List<CallDescriptor> getMatchingPolicies(Api api)", "full_signature": "@Override public List<CallDescriptor> getMatchingPolicies(Api api)", "class_method_signature": "DataManager.getMatchingPolicies(Api api)", "testcase": false, "constructor": false}, {"identifier": "getMatchingPolicies", "parameters": "(Api api, Auth auth)", "modifiers": "@Override public", "return": "List<CallDescriptor>", "signature": "List<CallDescriptor> getMatchingPolicies(Api api, Auth auth)", "full_signature": "@Override public List<CallDescriptor> getMatchingPolicies(Api api, Auth auth)", "class_method_signature": "DataManager.getMatchingPolicies(Api api, Auth auth)", "testcase": false, "constructor": false}, {"identifier": "getApiContextById", "parameters": "(Integer id)", "modifiers": "@Override public", "return": "APIContext", "signature": "APIContext getApiContextById(Integer id)", "full_signature": "@Override public APIContext getApiContextById(Integer id)", "class_method_signature": "DataManager.getApiContextById(Integer id)", "testcase": false, "constructor": false}, {"identifier": "getPolicyContextById", "parameters": "(Integer id)", "modifiers": "@Override public", "return": "Context", "signature": "Context getPolicyContextById(Integer id)", "full_signature": "@Override public Context getPolicyContextById(Integer id)", "class_method_signature": "DataManager.getPolicyContextById(Integer id)", "testcase": false, "constructor": false}, {"identifier": "fillLimitsById", "parameters": "(Integer contextId, Limit limit)", "modifiers": "@Override public", "return": "void", "signature": "void fillLimitsById(Integer contextId, Limit limit)", "full_signature": "@Override public void fillLimitsById(Integer contextId, Limit limit)", "class_method_signature": "DataManager.fillLimitsById(Integer contextId, Limit limit)", "testcase": false, "constructor": false}, {"identifier": "putSettingString", "parameters": "(String key, String value)", "modifiers": "@Override public", "return": "void", "signature": "void putSettingString(String key, String value)", "full_signature": "@Override public void putSettingString(String key, String value)", "class_method_signature": "DataManager.putSettingString(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "clearSettingString", "parameters": "(String key)", "modifiers": "@Override public", "return": "void", "signature": "void clearSettingString(String key)", "full_signature": "@Override public void clearSettingString(String key)", "class_method_signature": "DataManager.clearSettingString(String key)", "testcase": false, "constructor": false}, {"identifier": "getSettingString", "parameters": "(String key)", "modifiers": "@Override public", "return": "String", "signature": "String getSettingString(String key)", "full_signature": "@Override public String getSettingString(String key)", "class_method_signature": "DataManager.getSettingString(String key)", "testcase": false, "constructor": false}, {"identifier": "addKey", "parameters": "(Key key)", "modifiers": "@Override public", "return": "void", "signature": "void addKey(Key key)", "full_signature": "@Override public void addKey(Key key)", "class_method_signature": "DataManager.addKey(Key key)", "testcase": false, "constructor": false}, {"identifier": "getAllKeyIds", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getAllKeyIds()", "full_signature": "@Override public Set<String> getAllKeyIds()", "class_method_signature": "DataManager.getAllKeyIds()", "testcase": false, "constructor": false}, {"identifier": "getKeyById", "parameters": "(String id)", "modifiers": "@Override public", "return": "Key", "signature": "Key getKeyById(String id)", "full_signature": "@Override public Key getKeyById(String id)", "class_method_signature": "DataManager.getKeyById(String id)", "testcase": false, "constructor": false}, {"identifier": "getKeyById", "parameters": "(String id, boolean getFullDetails)", "modifiers": "@Override public", "return": "Key", "signature": "Key getKeyById(String id, boolean getFullDetails)", "full_signature": "@Override public Key getKeyById(String id, boolean getFullDetails)", "class_method_signature": "DataManager.getKeyById(String id, boolean getFullDetails)", "testcase": false, "constructor": false}, {"identifier": "updateKey", "parameters": "(Key key)", "modifiers": "@Override public", "return": "void", "signature": "void updateKey(Key key)", "full_signature": "@Override public void updateKey(Key key)", "class_method_signature": "DataManager.updateKey(Key key)", "testcase": false, "constructor": false}, {"identifier": "removeKey", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void removeKey(String id)", "full_signature": "@Override public void removeKey(String id)", "class_method_signature": "DataManager.removeKey(String id)", "testcase": false, "constructor": false}, {"identifier": "addCert", "parameters": "(Certificate cert)", "modifiers": "@Override public", "return": "void", "signature": "void addCert(Certificate cert)", "full_signature": "@Override public void addCert(Certificate cert)", "class_method_signature": "DataManager.addCert(Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "getAllCertIds", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getAllCertIds()", "full_signature": "@Override public Set<String> getAllCertIds()", "class_method_signature": "DataManager.getAllCertIds()", "testcase": false, "constructor": false}, {"identifier": "getAllCertIdsForKeyId", "parameters": "(String keyId)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getAllCertIdsForKeyId(String keyId)", "full_signature": "@Override public Set<String> getAllCertIdsForKeyId(String keyId)", "class_method_signature": "DataManager.getAllCertIdsForKeyId(String keyId)", "testcase": false, "constructor": false}, {"identifier": "getCertById", "parameters": "(String id)", "modifiers": "@Override public", "return": "Certificate", "signature": "Certificate getCertById(String id)", "full_signature": "@Override public Certificate getCertById(String id)", "class_method_signature": "DataManager.getCertById(String id)", "testcase": false, "constructor": false}, {"identifier": "getCertById", "parameters": "(String id, boolean getFullDetails)", "modifiers": "@Override public", "return": "Certificate", "signature": "Certificate getCertById(String id, boolean getFullDetails)", "full_signature": "@Override public Certificate getCertById(String id, boolean getFullDetails)", "class_method_signature": "DataManager.getCertById(String id, boolean getFullDetails)", "testcase": false, "constructor": false}, {"identifier": "updateCert", "parameters": "(Certificate cert)", "modifiers": "@Override public", "return": "void", "signature": "void updateCert(Certificate cert)", "full_signature": "@Override public void updateCert(Certificate cert)", "class_method_signature": "DataManager.updateCert(Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "removeCert", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void removeCert(String id)", "full_signature": "@Override public void removeCert(String id)", "class_method_signature": "DataManager.removeCert(String id)", "testcase": false, "constructor": false}, {"identifier": "generateKey", "parameters": "(String id)", "modifiers": "@Override public", "return": "Key", "signature": "Key generateKey(String id)", "full_signature": "@Override public Key generateKey(String id)", "class_method_signature": "DataManager.generateKey(String id)", "testcase": false, "constructor": false}, {"identifier": "getCSR", "parameters": "(String keyId)", "modifiers": "@Override public", "return": "CertificateRequest", "signature": "CertificateRequest getCSR(String keyId)", "full_signature": "@Override public CertificateRequest getCSR(String keyId)", "class_method_signature": "DataManager.getCSR(String keyId)", "testcase": false, "constructor": false}, {"identifier": "selfSignKey", "parameters": "(String keyId, CertificateRequest csr)", "modifiers": "@Override public", "return": "Certificate", "signature": "Certificate selfSignKey(String keyId, CertificateRequest csr)", "full_signature": "@Override public Certificate selfSignKey(String keyId, CertificateRequest csr)", "class_method_signature": "DataManager.selfSignKey(String keyId, CertificateRequest csr)", "testcase": false, "constructor": false}, {"identifier": "addKeyListener", "parameters": "(IEntryListener<String, Key> listener)", "modifiers": "@Override public", "return": "void", "signature": "void addKeyListener(IEntryListener<String, Key> listener)", "full_signature": "@Override public void addKeyListener(IEntryListener<String, Key> listener)", "class_method_signature": "DataManager.addKeyListener(IEntryListener<String, Key> listener)", "testcase": false, "constructor": false}, {"identifier": "removeKeyListener", "parameters": "(IEntryListener<String, Key> listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeKeyListener(IEntryListener<String, Key> listener)", "full_signature": "@Override public void removeKeyListener(IEntryListener<String, Key> listener)", "class_method_signature": "DataManager.removeKeyListener(IEntryListener<String, Key> listener)", "testcase": false, "constructor": false}, {"identifier": "setCachedLogLevel", "parameters": "(String key, LogLevel level)", "modifiers": "public", "return": "void", "signature": "void setCachedLogLevel(String key, LogLevel level)", "full_signature": "public void setCachedLogLevel(String key, LogLevel level)", "class_method_signature": "DataManager.setCachedLogLevel(String key, LogLevel level)", "testcase": false, "constructor": false}, {"identifier": "clearCachedLogLevel", "parameters": "(String key)", "modifiers": "public", "return": "void", "signature": "void clearCachedLogLevel(String key)", "full_signature": "public void clearCachedLogLevel(String key)", "class_method_signature": "DataManager.clearCachedLogLevel(String key)", "testcase": false, "constructor": false}, {"identifier": "getCachedLogLevel", "parameters": "(String key)", "modifiers": "public", "return": "LogLevel", "signature": "LogLevel getCachedLogLevel(String key)", "full_signature": "public LogLevel getCachedLogLevel(String key)", "class_method_signature": "DataManager.getCachedLogLevel(String key)", "testcase": false, "constructor": false}, {"identifier": "addLogLevelListener", "parameters": "(IEntryListener<String, LogLevel> listener)", "modifiers": "@Override public", "return": "void", "signature": "void addLogLevelListener(IEntryListener<String, LogLevel> listener)", "full_signature": "@Override public void addLogLevelListener(IEntryListener<String, LogLevel> listener)", "class_method_signature": "DataManager.addLogLevelListener(IEntryListener<String, LogLevel> listener)", "testcase": false, "constructor": false}, {"identifier": "removeLogLevelListener", "parameters": "(IEntryListener<String, LogLevel> listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeLogLevelListener(IEntryListener<String, LogLevel> listener)", "full_signature": "@Override public void removeLogLevelListener(IEntryListener<String, LogLevel> listener)", "class_method_signature": "DataManager.removeLogLevelListener(IEntryListener<String, LogLevel> listener)", "testcase": false, "constructor": false}, {"identifier": "setCachedLoggingCategory", "parameters": "(Category category, boolean enabled)", "modifiers": "public", "return": "void", "signature": "void setCachedLoggingCategory(Category category, boolean enabled)", "full_signature": "public void setCachedLoggingCategory(Category category, boolean enabled)", "class_method_signature": "DataManager.setCachedLoggingCategory(Category category, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "clearCachedLoggingCategory", "parameters": "(Category category)", "modifiers": "public", "return": "void", "signature": "void clearCachedLoggingCategory(Category category)", "full_signature": "public void clearCachedLoggingCategory(Category category)", "class_method_signature": "DataManager.clearCachedLoggingCategory(Category category)", "testcase": false, "constructor": false}, {"identifier": "getCachedLoggingCategory", "parameters": "(Category category)", "modifiers": "public", "return": "boolean", "signature": "boolean getCachedLoggingCategory(Category category)", "full_signature": "public boolean getCachedLoggingCategory(Category category)", "class_method_signature": "DataManager.getCachedLoggingCategory(Category category)", "testcase": false, "constructor": false}, {"identifier": "deployApi", "parameters": "(String apiId, byte[] jarData)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deployApi(String apiId, byte[] jarData)", "full_signature": "@Override public boolean deployApi(String apiId, byte[] jarData)", "class_method_signature": "DataManager.deployApi(String apiId, byte[] jarData)", "testcase": false, "constructor": false}, {"identifier": "getApiJar", "parameters": "(String apiId)", "modifiers": "@Override public", "return": "ApiJar", "signature": "ApiJar getApiJar(String apiId)", "full_signature": "@Override public ApiJar getApiJar(String apiId)", "class_method_signature": "DataManager.getApiJar(String apiId)", "testcase": false, "constructor": false}, {"identifier": "undeployApi", "parameters": "(String apiId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean undeployApi(String apiId)", "full_signature": "@Override public boolean undeployApi(String apiId)", "class_method_signature": "DataManager.undeployApi(String apiId)", "testcase": false, "constructor": false}, {"identifier": "addApiDeploymentListener", "parameters": "(IEntryListener<String, ApiJar> listener)", "modifiers": "@Override public", "return": "void", "signature": "void addApiDeploymentListener(IEntryListener<String, ApiJar> listener)", "full_signature": "@Override public void addApiDeploymentListener(IEntryListener<String, ApiJar> listener)", "class_method_signature": "DataManager.addApiDeploymentListener(IEntryListener<String, ApiJar> listener)", "testcase": false, "constructor": false}, {"identifier": "removeApiDeploymentListener", "parameters": "(IEntryListener<String, ApiJar> listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeApiDeploymentListener(IEntryListener<String, ApiJar> listener)", "full_signature": "@Override public void removeApiDeploymentListener(IEntryListener<String, ApiJar> listener)", "class_method_signature": "DataManager.removeApiDeploymentListener(IEntryListener<String, ApiJar> listener)", "testcase": false, "constructor": false}, {"identifier": "instanceAdded", "parameters": "(InstanceEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void instanceAdded(InstanceEvent event)", "full_signature": "@Override public void instanceAdded(InstanceEvent event)", "class_method_signature": "DataManager.instanceAdded(InstanceEvent event)", "testcase": false, "constructor": false}, {"identifier": "instanceRemoved", "parameters": "(InstanceEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void instanceRemoved(InstanceEvent event)", "full_signature": "@Override public void instanceRemoved(InstanceEvent event)", "class_method_signature": "DataManager.instanceRemoved(InstanceEvent event)", "testcase": false, "constructor": false}, {"identifier": "setLogLevel", "parameters": "(LogLevel level)", "modifiers": "@Override public", "return": "void", "signature": "void setLogLevel(LogLevel level)", "full_signature": "@Override public void setLogLevel(LogLevel level)", "class_method_signature": "DataManager.setLogLevel(LogLevel level)", "testcase": false, "constructor": false}, {"identifier": "getLogLevel", "parameters": "()", "modifiers": "@Override public", "return": "LogLevel", "signature": "LogLevel getLogLevel()", "full_signature": "@Override public LogLevel getLogLevel()", "class_method_signature": "DataManager.getLogLevel()", "testcase": false, "constructor": false}, {"identifier": "setSMXLogLevel", "parameters": "(LogLevel level)", "modifiers": "@Override public", "return": "void", "signature": "void setSMXLogLevel(LogLevel level)", "full_signature": "@Override public void setSMXLogLevel(LogLevel level)", "class_method_signature": "DataManager.setSMXLogLevel(LogLevel level)", "testcase": false, "constructor": false}, {"identifier": "getSMXLogLevel", "parameters": "()", "modifiers": "@Override public", "return": "LogLevel", "signature": "LogLevel getSMXLogLevel()", "full_signature": "@Override public LogLevel getSMXLogLevel()", "class_method_signature": "DataManager.getSMXLogLevel()", "testcase": false, "constructor": false}, {"identifier": "setSyslogLevel", "parameters": "(LogLevel level)", "modifiers": "@Override public", "return": "void", "signature": "void setSyslogLevel(LogLevel level)", "full_signature": "@Override public void setSyslogLevel(LogLevel level)", "class_method_signature": "DataManager.setSyslogLevel(LogLevel level)", "testcase": false, "constructor": false}, {"identifier": "getSyslogLevel", "parameters": "()", "modifiers": "@Override public", "return": "LogLevel", "signature": "LogLevel getSyslogLevel()", "full_signature": "@Override public LogLevel getSyslogLevel()", "class_method_signature": "DataManager.getSyslogLevel()", "testcase": false, "constructor": false}, {"identifier": "setLoggingCategory", "parameters": "(Category category, boolean enabled)", "modifiers": "@Override public", "return": "void", "signature": "void setLoggingCategory(Category category, boolean enabled)", "full_signature": "@Override public void setLoggingCategory(Category category, boolean enabled)", "class_method_signature": "DataManager.setLoggingCategory(Category category, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "getLoggingCategory", "parameters": "(Category category)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getLoggingCategory(Category category)", "full_signature": "@Override public boolean getLoggingCategory(Category category)", "class_method_signature": "DataManager.getLoggingCategory(Category category)", "testcase": false, "constructor": false}, {"identifier": "getAllCA", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getAllCA()", "full_signature": "@Override public Set<String> getAllCA()", "class_method_signature": "DataManager.getAllCA()", "testcase": false, "constructor": false}, {"identifier": "addCA", "parameters": "(Certificate cert)", "modifiers": "@Override public", "return": "void", "signature": "void addCA(Certificate cert)", "full_signature": "@Override public void addCA(Certificate cert)", "class_method_signature": "DataManager.addCA(Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "getCAById", "parameters": "(String id)", "modifiers": "@Override public", "return": "Certificate", "signature": "Certificate getCAById(String id)", "full_signature": "@Override public Certificate getCAById(String id)", "class_method_signature": "DataManager.getCAById(String id)", "testcase": false, "constructor": false}, {"identifier": "updateCA", "parameters": "(Certificate cert)", "modifiers": "@Override public", "return": "void", "signature": "void updateCA(Certificate cert)", "full_signature": "@Override public void updateCA(Certificate cert)", "class_method_signature": "DataManager.updateCA(Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "removeCA", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void removeCA(String id)", "full_signature": "@Override public void removeCA(String id)", "class_method_signature": "DataManager.removeCA(String id)", "testcase": false, "constructor": false}, {"identifier": "addCAListener", "parameters": "(IEntryListener<String, Certificate> listener)", "modifiers": "@Override public", "return": "void", "signature": "void addCAListener(IEntryListener<String, Certificate> listener)", "full_signature": "@Override public void addCAListener(IEntryListener<String, Certificate> listener)", "class_method_signature": "DataManager.addCAListener(IEntryListener<String, Certificate> listener)", "testcase": false, "constructor": false}, {"identifier": "removeCAListener", "parameters": "(IEntryListener<String, Certificate> listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeCAListener(IEntryListener<String, Certificate> listener)", "full_signature": "@Override public void removeCAListener(IEntryListener<String, Certificate> listener)", "class_method_signature": "DataManager.removeCAListener(IEntryListener<String, Certificate> listener)", "testcase": false, "constructor": false}, {"identifier": "addCRL", "parameters": "(SSLCRL clr)", "modifiers": "@Override public", "return": "void", "signature": "void addCRL(SSLCRL clr)", "full_signature": "@Override public void addCRL(SSLCRL clr)", "class_method_signature": "DataManager.addCRL(SSLCRL clr)", "testcase": false, "constructor": false}, {"identifier": "getCRLById", "parameters": "(String id)", "modifiers": "@Override public", "return": "SSLCRL", "signature": "SSLCRL getCRLById(String id)", "full_signature": "@Override public SSLCRL getCRLById(String id)", "class_method_signature": "DataManager.getCRLById(String id)", "testcase": false, "constructor": false}, {"identifier": "updateCRL", "parameters": "(SSLCRL crl)", "modifiers": "@Override public", "return": "void", "signature": "void updateCRL(SSLCRL crl)", "full_signature": "@Override public void updateCRL(SSLCRL crl)", "class_method_signature": "DataManager.updateCRL(SSLCRL crl)", "testcase": false, "constructor": false}, {"identifier": "removeCRL", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void removeCRL(String id)", "full_signature": "@Override public void removeCRL(String id)", "class_method_signature": "DataManager.removeCRL(String id)", "testcase": false, "constructor": false}, {"identifier": "getAllCRLValues", "parameters": "()", "modifiers": "@Override public", "return": "Collection<SSLCRL>", "signature": "Collection<SSLCRL> getAllCRLValues()", "full_signature": "@Override public Collection<SSLCRL> getAllCRLValues()", "class_method_signature": "DataManager.getAllCRLValues()", "testcase": false, "constructor": false}, {"identifier": "getAllCRL", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getAllCRL()", "full_signature": "@Override public Set<String> getAllCRL()", "class_method_signature": "DataManager.getAllCRL()", "testcase": false, "constructor": false}, {"identifier": "addCrlListener", "parameters": "(IEntryListener<String,SSLCRL> listener)", "modifiers": "@Override public", "return": "void", "signature": "void addCrlListener(IEntryListener<String,SSLCRL> listener)", "full_signature": "@Override public void addCrlListener(IEntryListener<String,SSLCRL> listener)", "class_method_signature": "DataManager.addCrlListener(IEntryListener<String,SSLCRL> listener)", "testcase": false, "constructor": false}, {"identifier": "removeCrlListener", "parameters": "(IEntryListener<String,SSLCRL> listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeCrlListener(IEntryListener<String,SSLCRL> listener)", "full_signature": "@Override public void removeCrlListener(IEntryListener<String,SSLCRL> listener)", "class_method_signature": "DataManager.removeCrlListener(IEntryListener<String,SSLCRL> listener)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableApiDetails", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableApiDetails(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableApiDetails(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableApiDetails(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableAuthDetails", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableAuthDetails(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableAuthDetails(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableAuthDetails(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableAuthIdToAuthToken", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableAuthIdToAuthToken(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableAuthIdToAuthToken(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableAuthIdToAuthToken(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableKeyDetails", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableKeyDetails(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableKeyDetails(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableKeyDetails(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableCertificateDetails", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableCertificateDetails(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableCertificateDetails(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableCertificateDetails(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableCADetails", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableCADetails(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableCADetails(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableCADetails(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableApi", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableApi(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableApi(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableApi(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableAuth", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableAuth(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableAuth(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableAuth(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableAuthIpAddress", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableAuthIpAddress(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableAuthIpAddress(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableAuthIpAddress(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTablePolicy", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTablePolicy(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTablePolicy(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTablePolicy(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableContext", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableContext(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableContext(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableContext(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableSettings", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableSettings(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableSettings(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableSettings(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableKey", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableKey(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableKey(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableKey(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableCertificate", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableCertificate(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableCertificate(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableCertificate(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableLogLevel", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableLogLevel(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableLogLevel(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableLogLevel(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableCA", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableCA(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableCA(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableCA(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableCRL", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableCRL(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableCRL(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableCRL(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setCachingTableApiJars", "parameters": "(ICacheTable<K, V> iCacheTable)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setCachingTableApiJars(ICacheTable<K, V> iCacheTable)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setCachingTableApiJars(ICacheTable<K, V> iCacheTable)", "class_method_signature": "DataManager.setCachingTableApiJars(ICacheTable<K, V> iCacheTable)", "testcase": false, "constructor": false}, {"identifier": "setListeners", "parameters": "(Set<IDataManagerListener> listeners)", "modifiers": "public", "return": "void", "signature": "void setListeners(Set<IDataManagerListener> listeners)", "full_signature": "public void setListeners(Set<IDataManagerListener> listeners)", "class_method_signature": "DataManager.setListeners(Set<IDataManagerListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "setUsedBucketIds", "parameters": "(Set<Integer> usedBucketIds)", "modifiers": "public", "return": "void", "signature": "void setUsedBucketIds(Set<Integer> usedBucketIds)", "full_signature": "public void setUsedBucketIds(Set<Integer> usedBucketIds)", "class_method_signature": "DataManager.setUsedBucketIds(Set<Integer> usedBucketIds)", "testcase": false, "constructor": false}, {"identifier": "addApiListener", "parameters": "(IEntryListener<String, Api> listener)", "modifiers": "@Override public", "return": "void", "signature": "void addApiListener(IEntryListener<String, Api> listener)", "full_signature": "@Override public void addApiListener(IEntryListener<String, Api> listener)", "class_method_signature": "DataManager.addApiListener(IEntryListener<String, Api> listener)", "testcase": false, "constructor": false}, {"identifier": "removeApiListener", "parameters": "(IEntryListener<String, Api> listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeApiListener(IEntryListener<String, Api> listener)", "full_signature": "@Override public void removeApiListener(IEntryListener<String, Api> listener)", "class_method_signature": "DataManager.removeApiListener(IEntryListener<String, Api> listener)", "testcase": false, "constructor": false}, {"identifier": "isIpAllowed", "parameters": "(Api api, String ip)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isIpAllowed(Api api, String ip)", "full_signature": "@Override public boolean isIpAllowed(Api api, String ip)", "class_method_signature": "DataManager.isIpAllowed(Api api, String ip)", "testcase": false, "constructor": false}, {"identifier": "addGlobalProxyListener3", "parameters": "(IEntryListener<String, String> listener)", "modifiers": "@Override public", "return": "void", "signature": "void addGlobalProxyListener3(IEntryListener<String, String> listener)", "full_signature": "@Override public void addGlobalProxyListener3(IEntryListener<String, String> listener)", "class_method_signature": "DataManager.addGlobalProxyListener3(IEntryListener<String, String> listener)", "testcase": false, "constructor": false}, {"identifier": "removeGlobalProxyListener3", "parameters": "(IEntryListener<String, String> listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeGlobalProxyListener3(IEntryListener<String, String> listener)", "full_signature": "@Override public void removeGlobalProxyListener3(IEntryListener<String, String> listener)", "class_method_signature": "DataManager.removeGlobalProxyListener3(IEntryListener<String, String> listener)", "testcase": false, "constructor": false}], "file": "exposure-engine/common/src/main/java/com/alu/e3/data/DataManager.java"}, "focal_method": {"identifier": "DataManager", "parameters": "()", "modifiers": "public", "return": "", "body": "public DataManager() {\n\n\t\t/* Create fake table objects. */\n\t\tcachingTableApiDetails = new SanityCheckCacheTable<String, ApiDetail>(\"cachingTableApiDetails\");\n\t\tcachingTableAuthDetails  = new SanityCheckCacheTable<String, AuthDetail>(\"cachingTableAuthDetails\");\n\t\tcachingTableAuthIdToAuthToken = new SanityCheckCacheTable<String, String>(\"cachingTableAuthIdToAuthToken\");\n\t\tcachingTableKeyDetails = new SanityCheckCacheTable<String, KeyDetail>(\"cachingTableKeyDetails\");\n\t\tcachingTableCertificateDetails = new SanityCheckCacheTable<String, CertificateDetail>(\"cachingTableCertificateDetails\");\n\t\tcachingTableCADetails = new SanityCheckCacheTable<String, CertificateDetail>(\"cachingTableCADetails\");\n\n\t\tcachingTableApi = new SanityCheckCacheTable<String, Api>(\"cachingTableApi\");\n\t\tcachingTableAuth = new SanityCheckCacheTable<String, Auth>(\"cachingTableAuth\");\n\t\tcachingTableAuthIpAddress = new SanityCheckCacheTable<String, String>(\"cachingTableAuthIpAddress\");\n\t\tcachingTablePolicy = new SanityCheckCacheTable<String, Policy>(\"cachingTablePolicy\");\n\t\tcachingTableContext = new SanityCheckCacheTable<Integer, ContextWrapper>(\"cachingTableContext\");\n\t\tcachingTableSettings = new SanityCheckCacheTable<String, String>(\"cachingTableSettings\");\n\t\tcachingTableKey = new SanityCheckCacheTable<String, Key>(\"cachingTableKey\");\n\t\tcachingTableCertificate = new SanityCheckCacheTable<String, Certificate>(\"cachingTableCertificate\");\n\t\tcachingTableLogLevel = new SanityCheckCacheTable<String, LogLevel>(\"cachingTableLogLevel\");\n\t\tcachingTableCA = new SanityCheckCacheTable<String, Certificate>(\"cachingTableCA\");\n\t\tcachingTableCRL = new SanityCheckCacheTable<String, SSLCRL>(\"cachingTableCRL\");\n\n\t\tcachingTableApiJars = new SanityCheckCacheTable<String, ApiJar>(\"cachingTableApiJars\");\n\t}", "signature": " DataManager()", "full_signature": "public  DataManager()", "class_method_signature": "DataManager.DataManager()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 5239065, "url": "https://github.com/apigrove/apigrove", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 118, "size": 215144, "license": "licensed"}}