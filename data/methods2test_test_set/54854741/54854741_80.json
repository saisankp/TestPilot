{"test_class": {"identifier": "HandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "services/src/test/java/com/greensopinion/finance/services/web/dispatch/HandlerTest.java"}, "test_case": {"identifier": "invokeWithParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void invokeWithParameter() throws Exception {\n\t\tHandler handler = new Handler(new TestWebService(),\n\t\t\t\tTestWebService.class.getDeclaredMethod(\"echo\", String.class));\n\t\tassertEquals(\"test it yeah!\", handler.invoke(ImmutableMap.of(\"message\", \"test it yeah!\")));\n\t}", "signature": "void invokeWithParameter()", "full_signature": "@Test public void invokeWithParameter()", "class_method_signature": "HandlerTest.invokeWithParameter()", "testcase": true, "constructor": false, "invocations": ["getDeclaredMethod", "assertEquals", "invoke", "of"]}, "focal_class": {"identifier": "Handler", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String NAME_ENTITY = \"<request-entity>\";", "modifier": "static final", "type": "String", "declarator": "NAME_ENTITY = \"<request-entity>\"", "var_name": "NAME_ENTITY"}, {"original_string": "private final Object webService;", "modifier": "private final", "type": "Object", "declarator": "webService", "var_name": "webService"}, {"original_string": "private final Method method;", "modifier": "private final", "type": "Method", "declarator": "method", "var_name": "method"}, {"original_string": "private List<String> parameterOrder;", "modifier": "private", "type": "List<String>", "declarator": "parameterOrder", "var_name": "parameterOrder"}, {"original_string": "private Map<String, Type> parameterNameToType;", "modifier": "private", "type": "Map<String, Type>", "declarator": "parameterNameToType", "var_name": "parameterNameToType"}], "methods": [{"identifier": "Handler", "parameters": "(Object webService, Method method)", "modifiers": "public", "return": "", "signature": " Handler(Object webService, Method method)", "full_signature": "public  Handler(Object webService, Method method)", "class_method_signature": "Handler.Handler(Object webService, Method method)", "testcase": false, "constructor": true}, {"identifier": "getParameterNameToType", "parameters": "()", "modifiers": "public", "return": "Map<String, Type>", "signature": "Map<String, Type> getParameterNameToType()", "full_signature": "public Map<String, Type> getParameterNameToType()", "class_method_signature": "Handler.getParameterNameToType()", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Map<String, Object> parameters)", "modifiers": "public", "return": "Object", "signature": "Object invoke(Map<String, Object> parameters)", "full_signature": "public Object invoke(Map<String, Object> parameters)", "class_method_signature": "Handler.invoke(Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "compileParameters", "parameters": "(AnnotatedType[] annotatedParameterTypes, Annotation[][] annotations)", "modifiers": "private", "return": "void", "signature": "void compileParameters(AnnotatedType[] annotatedParameterTypes, Annotation[][] annotations)", "full_signature": "private void compileParameters(AnnotatedType[] annotatedParameterTypes, Annotation[][] annotations)", "class_method_signature": "Handler.compileParameters(AnnotatedType[] annotatedParameterTypes, Annotation[][] annotations)", "testcase": false, "constructor": false}, {"identifier": "getPathParam", "parameters": "(Annotation[] annotations)", "modifiers": "private", "return": "PathParam", "signature": "PathParam getPathParam(Annotation[] annotations)", "full_signature": "private PathParam getPathParam(Annotation[] annotations)", "class_method_signature": "Handler.getPathParam(Annotation[] annotations)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/greensopinion/finance/services/web/dispatch/Handler.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Map<String, Object> parameters)", "modifiers": "public", "return": "Object", "body": "public Object invoke(Map<String, Object> parameters) throws Exception {\n\t\tObject[] params = new Object[parameterOrder.size()];\n\t\tfor (int x = 0; x < parameterOrder.size(); ++x) {\n\t\t\tString parameterName = parameterOrder.get(x);\n\t\t\tparams[x] = parameters.get(parameterName);\n\t\t}\n\t\ttry {\n\t\t\treturn method.invoke(webService, params);\n\t\t} catch (InvocationTargetException e) {\n\t\t\tthrow Throwables.propagate(e.getCause());\n\t\t}\n\t}", "signature": "Object invoke(Map<String, Object> parameters)", "full_signature": "public Object invoke(Map<String, Object> parameters)", "class_method_signature": "Handler.invoke(Map<String, Object> parameters)", "testcase": false, "constructor": false, "invocations": ["size", "size", "get", "get", "invoke", "propagate", "getCause"]}, "repository": {"repo_id": 54854741, "url": "https://github.com/greensopinion/greenbeans", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 30, "size": 1684, "license": "licensed"}}