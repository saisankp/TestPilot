{"test_class": {"identifier": "ParameterTypeFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Wfs20Factory wfs20Factory;", "modifier": "", "type": "Wfs20Factory", "declarator": "wfs20Factory", "var_name": "wfs20Factory"}, {"original_string": "FeatureTypeInfoImpl featureType;", "modifier": "", "type": "FeatureTypeInfoImpl", "declarator": "featureType", "var_name": "featureType"}, {"original_string": "StoredQueryConfiguration config;", "modifier": "", "type": "StoredQueryConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "StoredQueryDescriptionType desc;", "modifier": "", "type": "StoredQueryDescriptionType", "declarator": "desc", "var_name": "desc"}], "file": "modules/unsupported/wfs-ng/src/test/java/org/geotools/data/wfs/internal/v2_0/storedquery/ParameterTypeFactoryTest.java"}, "test_case": {"identifier": "testCQLExpressionViewParamMapping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCQLExpressionViewParamMapping() {\n\n        ParameterExpressionType param1 = wfs20Factory.createParameterExpressionType();\n        param1.setName(\"foo\");\n        desc.getParameter().add(param1);\n\n        ParameterMappingExpressionValue paramMapping = new ParameterMappingExpressionValue();\n        paramMapping.setParameterName(\"foo\");\n        paramMapping.setExpressionLanguage(\"CQL\");\n        paramMapping.setExpression(\"viewparam:mapped\");\n\n        config.getStoredQueryParameterMappings().add(paramMapping);\n\n        ParameterTypeFactory factory = new ParameterTypeFactory(config, desc, featureType);\n\n        Map<String, String> viewParams = new HashMap<String, String>();\n\n        viewParams.put(\"mapped\", \"stuff\");\n\n        List<ParameterType> params = factory.buildStoredQueryParameters(viewParams, null);\n\n        assertEquals(1, params.size());\n\n        ParameterType tmp = params.get(0);\n        assertEquals(\"foo\", tmp.getName());\n        assertEquals(\"stuff\", tmp.getValue());\n    }", "signature": "void testCQLExpressionViewParamMapping()", "full_signature": "@Test public void testCQLExpressionViewParamMapping()", "class_method_signature": "ParameterTypeFactoryTest.testCQLExpressionViewParamMapping()", "testcase": true, "constructor": false, "invocations": ["createParameterExpressionType", "setName", "add", "getParameter", "setParameterName", "setExpressionLanguage", "setExpression", "add", "getStoredQueryParameterMappings", "put", "buildStoredQueryParameters", "assertEquals", "size", "get", "assertEquals", "getName", "assertEquals", "getValue"]}, "focal_class": {"identifier": "ParameterTypeFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final StoredQueryConfiguration config;", "modifier": "private final", "type": "StoredQueryConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "private final StoredQueryDescriptionType desc;", "modifier": "private final", "type": "StoredQueryDescriptionType", "declarator": "desc", "var_name": "desc"}, {"original_string": "private final FeatureTypeInfo featureTypeInfo;", "modifier": "private final", "type": "FeatureTypeInfo", "declarator": "featureTypeInfo", "var_name": "featureTypeInfo"}], "methods": [{"identifier": "ParameterTypeFactory", "parameters": "(StoredQueryConfiguration config, StoredQueryDescriptionType desc,\n            FeatureTypeInfo featureTypeInfo)", "modifiers": "public", "return": "", "signature": " ParameterTypeFactory(StoredQueryConfiguration config, StoredQueryDescriptionType desc,\n            FeatureTypeInfo featureTypeInfo)", "full_signature": "public  ParameterTypeFactory(StoredQueryConfiguration config, StoredQueryDescriptionType desc,\n            FeatureTypeInfo featureTypeInfo)", "class_method_signature": "ParameterTypeFactory.ParameterTypeFactory(StoredQueryConfiguration config, StoredQueryDescriptionType desc,\n            FeatureTypeInfo featureTypeInfo)", "testcase": false, "constructor": true}, {"identifier": "getStoredQueryParameterMapping", "parameters": "(String parameterName)", "modifiers": "public", "return": "ParameterMapping", "signature": "ParameterMapping getStoredQueryParameterMapping(String parameterName)", "full_signature": "public ParameterMapping getStoredQueryParameterMapping(String parameterName)", "class_method_signature": "ParameterTypeFactory.getStoredQueryParameterMapping(String parameterName)", "testcase": false, "constructor": false}, {"identifier": "buildStoredQueryParameters", "parameters": "(Map<String, String> viewParams,\n            Filter filter)", "modifiers": "public", "return": "List<ParameterType>", "signature": "List<ParameterType> buildStoredQueryParameters(Map<String, String> viewParams,\n            Filter filter)", "full_signature": "public List<ParameterType> buildStoredQueryParameters(Map<String, String> viewParams,\n            Filter filter)", "class_method_signature": "ParameterTypeFactory.buildStoredQueryParameters(Map<String, String> viewParams,\n            Filter filter)", "testcase": false, "constructor": false}, {"identifier": "evaluateMapping", "parameters": "(ParameterMappingContext mappingContext, ParameterMapping mapping)", "modifiers": "protected", "return": "String", "signature": "String evaluateMapping(ParameterMappingContext mappingContext, ParameterMapping mapping)", "full_signature": "protected String evaluateMapping(ParameterMappingContext mappingContext, ParameterMapping mapping)", "class_method_signature": "ParameterTypeFactory.evaluateMapping(ParameterMappingContext mappingContext, ParameterMapping mapping)", "testcase": false, "constructor": false}], "file": "modules/unsupported/wfs-ng/src/main/java/org/geotools/data/wfs/internal/v2_0/storedquery/ParameterTypeFactory.java"}, "focal_method": {"identifier": "buildStoredQueryParameters", "parameters": "(Map<String, String> viewParams,\n            Filter filter)", "modifiers": "public", "return": "List<ParameterType>", "body": "public List<ParameterType> buildStoredQueryParameters(Map<String, String> viewParams,\n            Filter filter) {\n        final Wfs20Factory factory = Wfs20Factory.eINSTANCE;\n\n        if (filter == null) {\n            filter = Filter.INCLUDE;\n        }\n\n        ParameterMappingContext mappingContext = new ParameterMappingContext(filter, viewParams,\n                featureTypeInfo);\n\n        List<ParameterType> ret = new ArrayList<ParameterType>();\n\n        for (ParameterExpressionType parameter : desc.getParameter()) {\n            String value = null;\n\n            ParameterMapping mapping = getStoredQueryParameterMapping(parameter.getName());\n\n            // If mapping is forced, use that value over what the user provides\n            if (mapping != null && mapping.isForcible()) {\n                value = evaluateMapping(mappingContext, mapping);\n\n            } else {\n                // Use the one provided by the user\n                if (viewParams != null) {\n                    value = viewParams.get(parameter.getName());\n                }\n\n                // If no value given by the user, execute mapping\n                if (value == null && mapping != null) {\n                    value = evaluateMapping(mappingContext, mapping);\n                }\n            }\n\n            // If there is a value, add a parameter to the query\n            if (value != null) {\n                ParameterType tmp = factory.createParameterType();\n                tmp.setName(parameter.getName());\n                tmp.setValue(value);\n                ret.add(tmp);\n            }\n        }\n\n        return ret;\n    }", "signature": "List<ParameterType> buildStoredQueryParameters(Map<String, String> viewParams,\n            Filter filter)", "full_signature": "public List<ParameterType> buildStoredQueryParameters(Map<String, String> viewParams,\n            Filter filter)", "class_method_signature": "ParameterTypeFactory.buildStoredQueryParameters(Map<String, String> viewParams,\n            Filter filter)", "testcase": false, "constructor": false, "invocations": ["getParameter", "getStoredQueryParameterMapping", "getName", "isForcible", "evaluateMapping", "get", "getName", "evaluateMapping", "createParameterType", "setName", "getName", "setValue", "add"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}