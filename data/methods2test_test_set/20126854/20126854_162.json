{"test_class": {"identifier": "DeflateUncompressorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static byte[] CONTENT = new DefaultDeflateCompatibilityWindow().getCorpus();", "modifier": "private final static", "type": "byte[]", "declarator": "CONTENT = new DefaultDeflateCompatibilityWindow().getCorpus()", "var_name": "CONTENT"}, {"original_string": "private byte[] compressedContent;", "modifier": "private", "type": "byte[]", "declarator": "compressedContent", "var_name": "compressedContent"}, {"original_string": "private ByteArrayInputStream compressedContentIn;", "modifier": "private", "type": "ByteArrayInputStream", "declarator": "compressedContentIn", "var_name": "compressedContentIn"}, {"original_string": "private DeflateUncompressor uncompressor;", "modifier": "private", "type": "DeflateUncompressor", "declarator": "uncompressor", "var_name": "uncompressor"}, {"original_string": "private ByteArrayOutputStream uncompressedContentOut;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "uncompressedContentOut", "var_name": "uncompressedContentOut"}], "file": "feya/libraries/archive_diff/diff.shared/src/test/java/com/google/archivepatcher/shared/DeflateUncompressorTest.java"}, "test_case": {"identifier": "testSetOutputBufferSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetOutputBufferSize() throws IOException {\n    Assert.assertNotEquals(17, uncompressor.getOutputBufferSize()); // Ensure test is valid\n    uncompressor.setOutputBufferSize(17); // Arbitrary non-default value\n    Assert.assertEquals(17, uncompressor.getOutputBufferSize());\n    uncompressor.uncompress(compressedContentIn, uncompressedContentOut);\n    Assert.assertArrayEquals(CONTENT, uncompressedContentOut.toByteArray());\n  }", "signature": "void testSetOutputBufferSize()", "full_signature": "@Test public void testSetOutputBufferSize()", "class_method_signature": "DeflateUncompressorTest.testSetOutputBufferSize()", "testcase": true, "constructor": false, "invocations": ["assertNotEquals", "getOutputBufferSize", "setOutputBufferSize", "assertEquals", "getOutputBufferSize", "uncompress", "assertArrayEquals", "toByteArray"]}, "focal_class": {"identifier": "DeflateUncompressor", "superclass": "", "interfaces": "implements Uncompressor", "fields": [{"original_string": "private boolean nowrap = true;", "modifier": "private", "type": "boolean", "declarator": "nowrap = true", "var_name": "nowrap"}, {"original_string": "private int inputBufferSize = 32768;", "modifier": "private", "type": "int", "declarator": "inputBufferSize = 32768", "var_name": "inputBufferSize"}, {"original_string": "private int outputBufferSize = 32768;", "modifier": "private", "type": "int", "declarator": "outputBufferSize = 32768", "var_name": "outputBufferSize"}, {"original_string": "private Inflater inflater = null;", "modifier": "private", "type": "Inflater", "declarator": "inflater = null", "var_name": "inflater"}, {"original_string": "private boolean caching = false;", "modifier": "private", "type": "boolean", "declarator": "caching = false", "var_name": "caching"}], "methods": [{"identifier": "isNowrap", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNowrap()", "full_signature": "public boolean isNowrap()", "class_method_signature": "DeflateUncompressor.isNowrap()", "testcase": false, "constructor": false}, {"identifier": "getInputBufferSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInputBufferSize()", "full_signature": "public int getInputBufferSize()", "class_method_signature": "DeflateUncompressor.getInputBufferSize()", "testcase": false, "constructor": false}, {"identifier": "setInputBufferSize", "parameters": "(int inputBufferSize)", "modifiers": "public", "return": "void", "signature": "void setInputBufferSize(int inputBufferSize)", "full_signature": "public void setInputBufferSize(int inputBufferSize)", "class_method_signature": "DeflateUncompressor.setInputBufferSize(int inputBufferSize)", "testcase": false, "constructor": false}, {"identifier": "getOutputBufferSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getOutputBufferSize()", "full_signature": "public int getOutputBufferSize()", "class_method_signature": "DeflateUncompressor.getOutputBufferSize()", "testcase": false, "constructor": false}, {"identifier": "setOutputBufferSize", "parameters": "(int outputBufferSize)", "modifiers": "public", "return": "void", "signature": "void setOutputBufferSize(int outputBufferSize)", "full_signature": "public void setOutputBufferSize(int outputBufferSize)", "class_method_signature": "DeflateUncompressor.setOutputBufferSize(int outputBufferSize)", "testcase": false, "constructor": false}, {"identifier": "setNowrap", "parameters": "(boolean nowrap)", "modifiers": "public", "return": "void", "signature": "void setNowrap(boolean nowrap)", "full_signature": "public void setNowrap(boolean nowrap)", "class_method_signature": "DeflateUncompressor.setNowrap(boolean nowrap)", "testcase": false, "constructor": false}, {"identifier": "isCaching", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCaching()", "full_signature": "public boolean isCaching()", "class_method_signature": "DeflateUncompressor.isCaching()", "testcase": false, "constructor": false}, {"identifier": "setCaching", "parameters": "(boolean caching)", "modifiers": "public", "return": "void", "signature": "void setCaching(boolean caching)", "full_signature": "public void setCaching(boolean caching)", "class_method_signature": "DeflateUncompressor.setCaching(boolean caching)", "testcase": false, "constructor": false}, {"identifier": "createOrResetInflater", "parameters": "()", "modifiers": "protected", "return": "Inflater", "signature": "Inflater createOrResetInflater()", "full_signature": "protected Inflater createOrResetInflater()", "class_method_signature": "DeflateUncompressor.createOrResetInflater()", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void release()", "full_signature": "public void release()", "class_method_signature": "DeflateUncompressor.release()", "testcase": false, "constructor": false}, {"identifier": "uncompress", "parameters": "(InputStream compressedIn, OutputStream uncompressedOut)", "modifiers": "@Override public", "return": "void", "signature": "void uncompress(InputStream compressedIn, OutputStream uncompressedOut)", "full_signature": "@Override public void uncompress(InputStream compressedIn, OutputStream uncompressedOut)", "class_method_signature": "DeflateUncompressor.uncompress(InputStream compressedIn, OutputStream uncompressedOut)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.shared/src/main/java/com/google/archivepatcher/shared/DeflateUncompressor.java"}, "focal_method": {"identifier": "setOutputBufferSize", "parameters": "(int outputBufferSize)", "modifiers": "public", "return": "void", "body": "public void setOutputBufferSize(int outputBufferSize) {\n    this.outputBufferSize = outputBufferSize;\n  }", "signature": "void setOutputBufferSize(int outputBufferSize)", "full_signature": "public void setOutputBufferSize(int outputBufferSize)", "class_method_signature": "DeflateUncompressor.setOutputBufferSize(int outputBufferSize)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}