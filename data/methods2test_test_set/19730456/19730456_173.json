{"test_class": {"identifier": "TransactionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger logger = getLogger(TransactionTest.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = getLogger(TransactionTest.class)", "var_name": "logger"}, {"original_string": "String RLP_ENCODED_RAW_TX = \"e88085e8d4a510008227109413978aee95f38490e9769c39b2773ed763d9cd5f872386f26fc1000080\";", "modifier": "", "type": "String", "declarator": "RLP_ENCODED_RAW_TX = \"e88085e8d4a510008227109413978aee95f38490e9769c39b2773ed763d9cd5f872386f26fc1000080\"", "var_name": "RLP_ENCODED_RAW_TX"}, {"original_string": "String RLP_ENCODED_UNSIGNED_TX = \"eb8085e8d4a510008227109413978aee95f38490e9769c39b2773ed763d9cd5f872386f26fc1000080808080\";", "modifier": "", "type": "String", "declarator": "RLP_ENCODED_UNSIGNED_TX = \"eb8085e8d4a510008227109413978aee95f38490e9769c39b2773ed763d9cd5f872386f26fc1000080808080\"", "var_name": "RLP_ENCODED_UNSIGNED_TX"}, {"original_string": "String HASH_TX = \"328ea6d24659dec48adea1aced9a136e5ebdf40258db30d1b1d97ed2b74be34e\";", "modifier": "", "type": "String", "declarator": "HASH_TX = \"328ea6d24659dec48adea1aced9a136e5ebdf40258db30d1b1d97ed2b74be34e\"", "var_name": "HASH_TX"}, {"original_string": "String RLP_ENCODED_SIGNED_TX = \"f86b8085e8d4a510008227109413978aee95f38490e9769c39b2773ed763d9cd5f872386f26fc10000801ba0eab47c1a49bf2fe5d40e01d313900e19ca485867d462fe06e139e3a536c6d4f4a014a569d327dcda4b29f74f93c0e9729d2f49ad726e703f9cd90dbb0fbf6649f1\";", "modifier": "", "type": "String", "declarator": "RLP_ENCODED_SIGNED_TX = \"f86b8085e8d4a510008227109413978aee95f38490e9769c39b2773ed763d9cd5f872386f26fc10000801ba0eab47c1a49bf2fe5d40e01d313900e19ca485867d462fe06e139e3a536c6d4f4a014a569d327dcda4b29f74f93c0e9729d2f49ad726e703f9cd90dbb0fbf6649f1\"", "var_name": "RLP_ENCODED_SIGNED_TX"}, {"original_string": "String KEY = \"c85ef7d79691fe79573b1a7064c19c1a9819ebdbd1faaab1a8ec92344438aaf4\";", "modifier": "", "type": "String", "declarator": "KEY = \"c85ef7d79691fe79573b1a7064c19c1a9819ebdbd1faaab1a8ec92344438aaf4\"", "var_name": "KEY"}, {"original_string": "byte[] testNonce = Hex.decode(\"\");", "modifier": "", "type": "byte[]", "declarator": "testNonce = Hex.decode(\"\")", "var_name": "testNonce"}, {"original_string": "byte[] testGasPrice = BigIntegers.asUnsignedByteArray(BigInteger.valueOf(1000000000000L));", "modifier": "", "type": "byte[]", "declarator": "testGasPrice = BigIntegers.asUnsignedByteArray(BigInteger.valueOf(1000000000000L))", "var_name": "testGasPrice"}, {"original_string": "byte[] testGasLimit = BigIntegers.asUnsignedByteArray(BigInteger.valueOf(10000));", "modifier": "", "type": "byte[]", "declarator": "testGasLimit = BigIntegers.asUnsignedByteArray(BigInteger.valueOf(10000))", "var_name": "testGasLimit"}, {"original_string": "byte[] testReceiveAddress = Hex.decode(\"13978aee95f38490e9769c39b2773ed763d9cd5f\");", "modifier": "", "type": "byte[]", "declarator": "testReceiveAddress = Hex.decode(\"13978aee95f38490e9769c39b2773ed763d9cd5f\")", "var_name": "testReceiveAddress"}, {"original_string": "byte[] testValue = BigIntegers.asUnsignedByteArray(BigInteger.valueOf(10000000000000000L));", "modifier": "", "type": "byte[]", "declarator": "testValue = BigIntegers.asUnsignedByteArray(BigInteger.valueOf(10000000000000000L))", "var_name": "testValue"}, {"original_string": "byte[] testData = Hex.decode(\"\");", "modifier": "", "type": "byte[]", "declarator": "testData = Hex.decode(\"\")", "var_name": "testData"}, {"original_string": "byte[] testInit = Hex.decode(\"\");", "modifier": "", "type": "byte[]", "declarator": "testInit = Hex.decode(\"\")", "var_name": "testInit"}], "file": "ethereumj-core/src/test/java/org/ethereum/core/TransactionTest.java"}, "test_case": {"identifier": "encodeReceiptTest", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n    @Test\n    public void encodeReceiptTest() {\n\n        String data = \"f90244a0f5ff3fbd159773816a7c707a9b8cb6bb778b934a8f6466c7830ed970498f4b688301e848bdbda94cd2a3d9f938e13cd947ec05abc7fe734df8dd826c083a1a1a1\";\n\n        byte[] stateRoot = Hex.decode(\"f5ff3fbd159773816a7c707a9b8cb6bb778b934a8f6466c7830ed970498f4b68\");\n        byte[] gasUsed = Hex.decode(\"01E848\");\n        Bloom bloom = new Bloom(Hex.decoden\n        LogInfo logInfo1 = new LogInfo(\n                Hex.decode(\"cd2a3d9f938e13cd947ec05abc7fe734df8dd826\"),\n                null,\n                Hex.decode(\"a1a1a1\")\n        );\n\n        List<LogInfo> logs = new ArrayList<>();\n        logs.add(logInfo1);\n\n        // TODO calculate cumulative gas\n        TransactionReceipt receipt = new TransactionReceipt(stateRoot, gasUsed, bloom, logs);\n\n        assertEquals(data,\n                Hex.toHexString(receipt.getEncoded()));\n    }", "signature": "void encodeReceiptTest()", "full_signature": "@Ignore @Test public void encodeReceiptTest()", "class_method_signature": "TransactionTest.encodeReceiptTest()", "testcase": true, "constructor": false, "invocations": ["decode", "decode", "decode", "decode", "decode", "add", "assertEquals", "toHexString", "getEncoded"]}, "focal_class": {"identifier": "Transaction", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(Transaction.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Transaction.class)", "var_name": "logger"}, {"original_string": "private static final BigInteger DEFAULT_GAS_PRICE = new BigInteger(\"10000000000000\");", "modifier": "private static final", "type": "BigInteger", "declarator": "DEFAULT_GAS_PRICE = new BigInteger(\"10000000000000\")", "var_name": "DEFAULT_GAS_PRICE"}, {"original_string": "private static final BigInteger DEFAULT_BALANCE_GAS = new BigInteger(\"21000\");", "modifier": "private static final", "type": "BigInteger", "declarator": "DEFAULT_BALANCE_GAS = new BigInteger(\"21000\")", "var_name": "DEFAULT_BALANCE_GAS"}, {"original_string": "public static final int HASH_LENGTH = 32;", "modifier": "public static final", "type": "int", "declarator": "HASH_LENGTH = 32", "var_name": "HASH_LENGTH"}, {"original_string": "public static final int ADDRESS_LENGTH = 20;", "modifier": "public static final", "type": "int", "declarator": "ADDRESS_LENGTH = 20", "var_name": "ADDRESS_LENGTH"}, {"original_string": "private byte[] hash;", "modifier": "private", "type": "byte[]", "declarator": "hash", "var_name": "hash"}, {"original_string": "private byte[] nonce;", "modifier": "private", "type": "byte[]", "declarator": "nonce", "var_name": "nonce"}, {"original_string": "private byte[] value;", "modifier": "private", "type": "byte[]", "declarator": "value", "var_name": "value"}, {"original_string": "private byte[] receiveAddress;", "modifier": "private", "type": "byte[]", "declarator": "receiveAddress", "var_name": "receiveAddress"}, {"original_string": "private byte[] gasPrice;", "modifier": "private", "type": "byte[]", "declarator": "gasPrice", "var_name": "gasPrice"}, {"original_string": "private byte[] gasLimit;", "modifier": "private", "type": "byte[]", "declarator": "gasLimit", "var_name": "gasLimit"}, {"original_string": "private byte[] data;", "modifier": "private", "type": "byte[]", "declarator": "data", "var_name": "data"}, {"original_string": "private static final int CHAIN_ID_INC = 35;", "modifier": "private static final", "type": "int", "declarator": "CHAIN_ID_INC = 35", "var_name": "CHAIN_ID_INC"}, {"original_string": "private static final int LOWER_REAL_V = 27;", "modifier": "private static final", "type": "int", "declarator": "LOWER_REAL_V = 27", "var_name": "LOWER_REAL_V"}, {"original_string": "private Integer chainId = null;", "modifier": "private", "type": "Integer", "declarator": "chainId = null", "var_name": "chainId"}, {"original_string": "private ECDSASignature signature;", "modifier": "private", "type": "ECDSASignature", "declarator": "signature", "var_name": "signature"}, {"original_string": "protected byte[] sendAddress;", "modifier": "protected", "type": "byte[]", "declarator": "sendAddress", "var_name": "sendAddress"}, {"original_string": "protected byte[] rlpEncoded;", "modifier": "protected", "type": "byte[]", "declarator": "rlpEncoded", "var_name": "rlpEncoded"}, {"original_string": "private byte[] rawHash;", "modifier": "private", "type": "byte[]", "declarator": "rawHash", "var_name": "rawHash"}, {"original_string": "protected boolean parsed = false;", "modifier": "protected", "type": "boolean", "declarator": "parsed = false", "var_name": "parsed"}, {"original_string": "public static final MemSizeEstimator<Transaction> MemEstimator = tx ->\n            ByteArrayEstimator.estimateSize(tx.hash) +\n            ByteArrayEstimator.estimateSize(tx.nonce) +\n            ByteArrayEstimator.estimateSize(tx.value) +\n            ByteArrayEstimator.estimateSize(tx.gasPrice) +\n            ByteArrayEstimator.estimateSize(tx.gasLimit) +\n            ByteArrayEstimator.estimateSize(tx.data) +\n            ByteArrayEstimator.estimateSize(tx.sendAddress) +\n            ByteArrayEstimator.estimateSize(tx.rlpEncoded) +\n            ByteArrayEstimator.estimateSize(tx.rawHash) +\n            (tx.chainId != null ? 24 : 0) +\n            (tx.signature != null ? 208 : 0) + // approximate size of signature\n            16;", "modifier": "public static final", "type": "MemSizeEstimator<Transaction>", "declarator": "MemEstimator = tx ->\n            ByteArrayEstimator.estimateSize(tx.hash) +\n            ByteArrayEstimator.estimateSize(tx.nonce) +\n            ByteArrayEstimator.estimateSize(tx.value) +\n            ByteArrayEstimator.estimateSize(tx.gasPrice) +\n            ByteArrayEstimator.estimateSize(tx.gasLimit) +\n            ByteArrayEstimator.estimateSize(tx.data) +\n            ByteArrayEstimator.estimateSize(tx.sendAddress) +\n            ByteArrayEstimator.estimateSize(tx.rlpEncoded) +\n            ByteArrayEstimator.estimateSize(tx.rawHash) +\n            (tx.chainId != null ? 24 : 0) +\n            (tx.signature != null ? 208 : 0) + // approximate size of signature\n            16", "var_name": "MemEstimator"}], "methods": [{"identifier": "Transaction", "parameters": "(byte[] rawData)", "modifiers": "public", "return": "", "signature": " Transaction(byte[] rawData)", "full_signature": "public  Transaction(byte[] rawData)", "class_method_signature": "Transaction.Transaction(byte[] rawData)", "testcase": false, "constructor": true}, {"identifier": "Transaction", "parameters": "(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data,\n                       Integer chainId)", "modifiers": "public", "return": "", "signature": " Transaction(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data,\n                       Integer chainId)", "full_signature": "public  Transaction(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data,\n                       Integer chainId)", "class_method_signature": "Transaction.Transaction(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data,\n                       Integer chainId)", "testcase": false, "constructor": true}, {"identifier": "Transaction", "parameters": "(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data)", "modifiers": "public", "return": "", "signature": " Transaction(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data)", "full_signature": "public  Transaction(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data)", "class_method_signature": "Transaction.Transaction(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data)", "testcase": false, "constructor": true}, {"identifier": "Transaction", "parameters": "(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data,\n                       byte[] r, byte[] s, byte v, Integer chainId)", "modifiers": "public", "return": "", "signature": " Transaction(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data,\n                       byte[] r, byte[] s, byte v, Integer chainId)", "full_signature": "public  Transaction(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data,\n                       byte[] r, byte[] s, byte v, Integer chainId)", "class_method_signature": "Transaction.Transaction(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data,\n                       byte[] r, byte[] s, byte v, Integer chainId)", "testcase": false, "constructor": true}, {"identifier": "Transaction", "parameters": "(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data,\n                       byte[] r, byte[] s, byte v)", "modifiers": "public", "return": "", "signature": " Transaction(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data,\n                       byte[] r, byte[] s, byte v)", "full_signature": "public  Transaction(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data,\n                       byte[] r, byte[] s, byte v)", "class_method_signature": "Transaction.Transaction(byte[] nonce, byte[] gasPrice, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data,\n                       byte[] r, byte[] s, byte v)", "testcase": false, "constructor": true}, {"identifier": "extractChainIdFromRawSignature", "parameters": "(BigInteger bv, byte[] r, byte[] s)", "modifiers": "private", "return": "Integer", "signature": "Integer extractChainIdFromRawSignature(BigInteger bv, byte[] r, byte[] s)", "full_signature": "private Integer extractChainIdFromRawSignature(BigInteger bv, byte[] r, byte[] s)", "class_method_signature": "Transaction.extractChainIdFromRawSignature(BigInteger bv, byte[] r, byte[] s)", "testcase": false, "constructor": false}, {"identifier": "getRealV", "parameters": "(BigInteger bv)", "modifiers": "private", "return": "byte", "signature": "byte getRealV(BigInteger bv)", "full_signature": "private byte getRealV(BigInteger bv)", "class_method_signature": "Transaction.getRealV(BigInteger bv)", "testcase": false, "constructor": false}, {"identifier": "transactionCost", "parameters": "(BlockchainNetConfig config, Block block)", "modifiers": "public", "return": "long", "signature": "long transactionCost(BlockchainNetConfig config, Block block)", "full_signature": "public long transactionCost(BlockchainNetConfig config, Block block)", "class_method_signature": "Transaction.transactionCost(BlockchainNetConfig config, Block block)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void verify()", "full_signature": "public synchronized void verify()", "class_method_signature": "Transaction.verify()", "testcase": false, "constructor": false}, {"identifier": "rlpParse", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void rlpParse()", "full_signature": "public synchronized void rlpParse()", "class_method_signature": "Transaction.rlpParse()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validate()", "full_signature": "private void validate()", "class_method_signature": "Transaction.validate()", "testcase": false, "constructor": false}, {"identifier": "isParsed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isParsed()", "full_signature": "public boolean isParsed()", "class_method_signature": "Transaction.isParsed()", "testcase": false, "constructor": false}, {"identifier": "getHash", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getHash()", "full_signature": "public byte[] getHash()", "class_method_signature": "Transaction.getHash()", "testcase": false, "constructor": false}, {"identifier": "getRawHash", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getRawHash()", "full_signature": "public byte[] getRawHash()", "class_method_signature": "Transaction.getRawHash()", "testcase": false, "constructor": false}, {"identifier": "getNonce", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getNonce()", "full_signature": "public byte[] getNonce()", "class_method_signature": "Transaction.getNonce()", "testcase": false, "constructor": false}, {"identifier": "setNonce", "parameters": "(byte[] nonce)", "modifiers": "protected", "return": "void", "signature": "void setNonce(byte[] nonce)", "full_signature": "protected void setNonce(byte[] nonce)", "class_method_signature": "Transaction.setNonce(byte[] nonce)", "testcase": false, "constructor": false}, {"identifier": "isValueTx", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isValueTx()", "full_signature": "public boolean isValueTx()", "class_method_signature": "Transaction.isValueTx()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getValue()", "full_signature": "public byte[] getValue()", "class_method_signature": "Transaction.getValue()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(byte[] value)", "modifiers": "protected", "return": "void", "signature": "void setValue(byte[] value)", "full_signature": "protected void setValue(byte[] value)", "class_method_signature": "Transaction.setValue(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "getReceiveAddress", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getReceiveAddress()", "full_signature": "public byte[] getReceiveAddress()", "class_method_signature": "Transaction.getReceiveAddress()", "testcase": false, "constructor": false}, {"identifier": "setReceiveAddress", "parameters": "(byte[] receiveAddress)", "modifiers": "protected", "return": "void", "signature": "void setReceiveAddress(byte[] receiveAddress)", "full_signature": "protected void setReceiveAddress(byte[] receiveAddress)", "class_method_signature": "Transaction.setReceiveAddress(byte[] receiveAddress)", "testcase": false, "constructor": false}, {"identifier": "getGasPrice", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getGasPrice()", "full_signature": "public byte[] getGasPrice()", "class_method_signature": "Transaction.getGasPrice()", "testcase": false, "constructor": false}, {"identifier": "setGasPrice", "parameters": "(byte[] gasPrice)", "modifiers": "protected", "return": "void", "signature": "void setGasPrice(byte[] gasPrice)", "full_signature": "protected void setGasPrice(byte[] gasPrice)", "class_method_signature": "Transaction.setGasPrice(byte[] gasPrice)", "testcase": false, "constructor": false}, {"identifier": "getGasLimit", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getGasLimit()", "full_signature": "public byte[] getGasLimit()", "class_method_signature": "Transaction.getGasLimit()", "testcase": false, "constructor": false}, {"identifier": "setGasLimit", "parameters": "(byte[] gasLimit)", "modifiers": "protected", "return": "void", "signature": "void setGasLimit(byte[] gasLimit)", "full_signature": "protected void setGasLimit(byte[] gasLimit)", "class_method_signature": "Transaction.setGasLimit(byte[] gasLimit)", "testcase": false, "constructor": false}, {"identifier": "nonZeroDataBytes", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long nonZeroDataBytes()", "full_signature": "public long nonZeroDataBytes()", "class_method_signature": "Transaction.nonZeroDataBytes()", "testcase": false, "constructor": false}, {"identifier": "zeroDataBytes", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long zeroDataBytes()", "full_signature": "public long zeroDataBytes()", "class_method_signature": "Transaction.zeroDataBytes()", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getData()", "full_signature": "public byte[] getData()", "class_method_signature": "Transaction.getData()", "testcase": false, "constructor": false}, {"identifier": "setData", "parameters": "(byte[] data)", "modifiers": "protected", "return": "void", "signature": "void setData(byte[] data)", "full_signature": "protected void setData(byte[] data)", "class_method_signature": "Transaction.setData(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "getSignature", "parameters": "()", "modifiers": "public", "return": "ECDSASignature", "signature": "ECDSASignature getSignature()", "full_signature": "public ECDSASignature getSignature()", "class_method_signature": "Transaction.getSignature()", "testcase": false, "constructor": false}, {"identifier": "getContractAddress", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getContractAddress()", "full_signature": "public byte[] getContractAddress()", "class_method_signature": "Transaction.getContractAddress()", "testcase": false, "constructor": false}, {"identifier": "isContractCreation", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isContractCreation()", "full_signature": "public boolean isContractCreation()", "class_method_signature": "Transaction.isContractCreation()", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "public", "return": "ECKey", "signature": "ECKey getKey()", "full_signature": "public ECKey getKey()", "class_method_signature": "Transaction.getKey()", "testcase": false, "constructor": false}, {"identifier": "getSender", "parameters": "()", "modifiers": "public synchronized", "return": "byte[]", "signature": "byte[] getSender()", "full_signature": "public synchronized byte[] getSender()", "class_method_signature": "Transaction.getSender()", "testcase": false, "constructor": false}, {"identifier": "getChainId", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getChainId()", "full_signature": "public Integer getChainId()", "class_method_signature": "Transaction.getChainId()", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(byte[] privKeyBytes)", "modifiers": "public", "return": "void", "signature": "void sign(byte[] privKeyBytes)", "full_signature": "public void sign(byte[] privKeyBytes)", "class_method_signature": "Transaction.sign(byte[] privKeyBytes)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(ECKey key)", "modifiers": "public", "return": "void", "signature": "void sign(ECKey key)", "full_signature": "public void sign(ECKey key)", "class_method_signature": "Transaction.sign(ECKey key)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Transaction.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(int maxDataSize)", "modifiers": "public", "return": "String", "signature": "String toString(int maxDataSize)", "full_signature": "public String toString(int maxDataSize)", "class_method_signature": "Transaction.toString(int maxDataSize)", "testcase": false, "constructor": false}, {"identifier": "getEncodedRaw", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getEncodedRaw()", "full_signature": "public byte[] getEncodedRaw()", "class_method_signature": "Transaction.getEncodedRaw()", "testcase": false, "constructor": false}, {"identifier": "getEncoded", "parameters": "()", "modifiers": "public synchronized", "return": "byte[]", "signature": "byte[] getEncoded()", "full_signature": "public synchronized byte[] getEncoded()", "class_method_signature": "Transaction.getEncoded()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Transaction.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Transaction.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "createDefault", "parameters": "(String to, BigInteger amount, BigInteger nonce)", "modifiers": "public static", "return": "Transaction", "signature": "Transaction createDefault(String to, BigInteger amount, BigInteger nonce)", "full_signature": "public static Transaction createDefault(String to, BigInteger amount, BigInteger nonce)", "class_method_signature": "Transaction.createDefault(String to, BigInteger amount, BigInteger nonce)", "testcase": false, "constructor": false}, {"identifier": "createDefault", "parameters": "(String to, BigInteger amount, BigInteger nonce, Integer chainId)", "modifiers": "public static", "return": "Transaction", "signature": "Transaction createDefault(String to, BigInteger amount, BigInteger nonce, Integer chainId)", "full_signature": "public static Transaction createDefault(String to, BigInteger amount, BigInteger nonce, Integer chainId)", "class_method_signature": "Transaction.createDefault(String to, BigInteger amount, BigInteger nonce, Integer chainId)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit)", "modifiers": "public static", "return": "Transaction", "signature": "Transaction create(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit)", "full_signature": "public static Transaction create(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit)", "class_method_signature": "Transaction.create(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice,\n                                     BigInteger gasLimit, Integer chainId)", "modifiers": "public static", "return": "Transaction", "signature": "Transaction create(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice,\n                                     BigInteger gasLimit, Integer chainId)", "full_signature": "public static Transaction create(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice,\n                                     BigInteger gasLimit, Integer chainId)", "class_method_signature": "Transaction.create(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice,\n                                     BigInteger gasLimit, Integer chainId)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/core/Transaction.java"}, "focal_method": {"identifier": "getEncoded", "parameters": "()", "modifiers": "public synchronized", "return": "byte[]", "body": "public synchronized byte[] getEncoded() {\n\n        if (rlpEncoded != null) return rlpEncoded;\n\n        // parse null as 0 for nonce\n        byte[] nonce = null;\n        if (this.nonce == null || this.nonce.length == 1 && this.nonce[0] == 0) {\n            nonce = RLP.encodeElement(null);\n        } else {\n            nonce = RLP.encodeElement(this.nonce);\n        }\n        byte[] gasPrice = RLP.encodeElement(this.gasPrice);\n        byte[] gasLimit = RLP.encodeElement(this.gasLimit);\n        byte[] receiveAddress = RLP.encodeElement(this.receiveAddress);\n        byte[] value = RLP.encodeElement(this.value);\n        byte[] data = RLP.encodeElement(this.data);\n\n        byte[] v, r, s;\n\n        if (signature != null) {\n            int encodeV;\n            if (chainId == null) {\n                encodeV = signature.v;\n            } else {\n                encodeV = signature.v - LOWER_REAL_V;\n                encodeV += chainId * 2 + CHAIN_ID_INC;\n            }\n            v = RLP.encodeInt(encodeV);\n            r = RLP.encodeElement(BigIntegers.asUnsignedByteArray(signature.r));\n            s = RLP.encodeElement(BigIntegers.asUnsignedByteArray(signature.s));\n        } else {\n            // Since EIP-155 use chainId for v\n            v = chainId == null ? RLP.encodeElement(EMPTY_BYTE_ARRAY) : RLP.encodeInt(chainId);\n            r = RLP.encodeElement(EMPTY_BYTE_ARRAY);\n            s = RLP.encodeElement(EMPTY_BYTE_ARRAY);\n        }\n\n        this.rlpEncoded = RLP.encodeList(nonce, gasPrice, gasLimit,\n                receiveAddress, value, data, v, r, s);\n\n        this.hash = HashUtil.sha3(rlpEncoded);\n\n        return rlpEncoded;\n    }", "signature": "byte[] getEncoded()", "full_signature": "public synchronized byte[] getEncoded()", "class_method_signature": "Transaction.getEncoded()", "testcase": false, "constructor": false, "invocations": ["encodeElement", "encodeElement", "encodeElement", "encodeElement", "encodeElement", "encodeElement", "encodeElement", "encodeInt", "encodeElement", "asUnsignedByteArray", "encodeElement", "asUnsignedByteArray", "encodeElement", "encodeInt", "encodeElement", "encodeElement", "encodeList", "sha3"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}