{"test_class": {"identifier": "AtomicNumberDifferenceDescriptorTest", "superclass": "extends BondDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarbond/src/test/java/org/openscience/cdk/qsar/descriptors/bond/AtomicNumberDifferenceDescriptorTest.java"}, "test_case": {"identifier": "testDescriptor1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDescriptor1() throws InvalidSmilesException {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol1 = sp.parseSmiles(\"CC\");\n        double value = ((DoubleResult) descriptor.calculate(mol1.getBond(0), mol1).getValue()).doubleValue();\n        Assert.assertEquals(0, value, 0.0000);\n    }", "signature": "void testDescriptor1()", "full_signature": "@Test public void testDescriptor1()", "class_method_signature": "AtomicNumberDifferenceDescriptorTest.testDescriptor1()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "doubleValue", "getValue", "calculate", "getBond", "assertEquals"]}, "focal_class": {"identifier": "AtomicNumberDifferenceDescriptor", "superclass": "extends AbstractBondDescriptor", "interfaces": "implements IBondDescriptor", "fields": [{"original_string": "private static IsotopeFactory factory = null;", "modifier": "private static", "type": "IsotopeFactory", "declarator": "factory = null", "var_name": "factory"}, {"original_string": "private final static String[] NAMES = {\"MNDiff\"};", "modifier": "private final static", "type": "String[]", "declarator": "NAMES = {\"MNDiff\"}", "var_name": "NAMES"}], "methods": [{"identifier": "AtomicNumberDifferenceDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " AtomicNumberDifferenceDescriptor()", "full_signature": "public  AtomicNumberDifferenceDescriptor()", "class_method_signature": "AtomicNumberDifferenceDescriptor.AtomicNumberDifferenceDescriptor()", "testcase": false, "constructor": true}, {"identifier": "ensureIsotopeFactory", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureIsotopeFactory()", "full_signature": "private void ensureIsotopeFactory()", "class_method_signature": "AtomicNumberDifferenceDescriptor.ensureIsotopeFactory()", "testcase": false, "constructor": false}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "AtomicNumberDifferenceDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "AtomicNumberDifferenceDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "AtomicNumberDifferenceDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "AtomicNumberDifferenceDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IBond bond, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IBond bond, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IBond bond, IAtomContainer ac)", "class_method_signature": "AtomicNumberDifferenceDescriptor.calculate(IBond bond, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "AtomicNumberDifferenceDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "AtomicNumberDifferenceDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarbond/src/main/java/org/openscience/cdk/qsar/descriptors/bond/AtomicNumberDifferenceDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IBond bond, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IBond bond, IAtomContainer ac) {\n        ensureIsotopeFactory();\n        if (bond.getAtomCount() != 2) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    Double.NaN), NAMES, new CDKException(\"Only 2-center bonds are considered\"));\n        }\n\n        IAtom[] atoms = BondManipulator.getAtomArray(bond);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                Math.abs(factory.getElement(atoms[0].getSymbol()).getAtomicNumber()\n                                 - factory.getElement(atoms[1].getSymbol()).getAtomicNumber())), NAMES);\n    }", "signature": "DescriptorValue calculate(IBond bond, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IBond bond, IAtomContainer ac)", "class_method_signature": "AtomicNumberDifferenceDescriptor.calculate(IBond bond, IAtomContainer ac)", "testcase": false, "constructor": false, "invocations": ["ensureIsotopeFactory", "getAtomCount", "getSpecification", "getParameterNames", "getParameters", "getAtomArray", "getSpecification", "getParameterNames", "getParameters", "abs", "getAtomicNumber", "getElement", "getSymbol", "getAtomicNumber", "getElement", "getSymbol"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}