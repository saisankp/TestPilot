{"test_class": {"identifier": "LoginPresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public  MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "private LoginPresenter mPresenter;", "modifier": "private", "type": "LoginPresenter", "declarator": "mPresenter", "var_name": "mPresenter"}, {"original_string": "private LoginModel model;", "modifier": "private", "type": "LoginModel", "declarator": "model", "var_name": "model"}, {"original_string": "private LoginContract.View view;", "modifier": "private", "type": "LoginContract.View", "declarator": "view", "var_name": "view"}], "file": "demo/src/test/java/me/jessyan/mvparms/demo/mvp/presenter/login/LoginPresenterTest.java"}, "test_case": {"identifier": "loginSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public  void loginSuccess(){\n        //\u6a21\u62df\u6570\u636e\n        Mockito.when(view.getMobileStr()).thenReturn(\"13547250999\");\n        Mockito.when(view.getPassWordStr()).thenReturn(\"abc\");\n\n        //\u5b9e\u73b0loginModel login \u65b9\u6cd5\n        //\u7531\u4e8e\u4e0d\u77e5\u9053\u4e0a\u54ea\u91cc\u53bb\u627e\u4e00\u4e2a\u7a33\u5b9a\u4e14\u957f\u671f\u53ef\u7528\u7684\u767b\u5f55\u63a5\u53e3\uff0c\n        // \u6240\u4ee5\u7528\u7684\u63a5\u53e3\u662fgithub \u4e0a\u7684\u67e5\u8be2\u63a5\u53e3\uff1ahttps://api.github.com/users/drchengit\n        // \u8fd9\u91cc\u7684\u5904\u7406\u662f\u6b63\u786e\u7684\u5bc6\u7801\uff0c\u8bf7\u6c42\u5b58\u5728\u7684\u7528\u6237\u540d\uff1adrchengit  \u9519\u8bef\u7684\u5bc6\u7801\u8bf7\u6c42\u4e0d\u5b58\u5728\u7684\u7528\u6237\u540d\uff1a drchengi\n        Observable<User> observable = ArmsUtils.obtainAppComponentFromContext(\n                RuntimeEnvironment.application).repositoryManager()\n                .obtainRetrofitService(CommonService.class)\n                .getUser(\"drchengit\");\n\n        //\u6a21\u62df\u65e0\u8bba\u600e\u4e48\u8c03\u7528\uff0clogin\u90fd\u662f\u8fd4\u56de\u4e0a\u9762\u7684Observable\u5bf9\u8c61\n        Mockito.when(model.login(Mockito.anyString(),Mockito.anyString()))\n                .thenReturn(observable);\n        //\u767b\u5f55\n        mPresenter.login();\n        Mockito.verify(view).loginSuccess();\n    }", "signature": "void loginSuccess()", "full_signature": "@Test public void loginSuccess()", "class_method_signature": "LoginPresenterTest.loginSuccess()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getMobileStr", "thenReturn", "when", "getPassWordStr", "getUser", "obtainRetrofitService", "repositoryManager", "obtainAppComponentFromContext", "thenReturn", "when", "login", "anyString", "anyString", "login", "loginSuccess", "verify"]}, "focal_class": {"identifier": "LoginPresenter", "superclass": "extends BasePresenter<LoginContract.Model, LoginContract.View>", "interfaces": "", "fields": [{"original_string": "@Inject\n    RxErrorHandler mErrorHandler;", "modifier": "@Inject", "type": "RxErrorHandler", "declarator": "mErrorHandler", "var_name": "mErrorHandler"}, {"original_string": "@Inject\n    Application mApplication;", "modifier": "@Inject", "type": "Application", "declarator": "mApplication", "var_name": "mApplication"}, {"original_string": "@Inject\n    ImageLoader mImageLoader;", "modifier": "@Inject", "type": "ImageLoader", "declarator": "mImageLoader", "var_name": "mImageLoader"}, {"original_string": "@Inject\n    AppManager mAppManager;", "modifier": "@Inject", "type": "AppManager", "declarator": "mAppManager", "var_name": "mAppManager"}], "methods": [{"identifier": "login", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void login()", "full_signature": "public void login()", "class_method_signature": "LoginPresenter.login()", "testcase": false, "constructor": false}, {"identifier": "LoginPresenter", "parameters": "(LoginContract.Model model, LoginContract.View rootView)", "modifiers": "@Inject public", "return": "", "signature": " LoginPresenter(LoginContract.Model model, LoginContract.View rootView)", "full_signature": "@Inject public  LoginPresenter(LoginContract.Model model, LoginContract.View rootView)", "class_method_signature": "LoginPresenter.LoginPresenter(LoginContract.Model model, LoginContract.View rootView)", "testcase": false, "constructor": true}, {"identifier": "onDestroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onDestroy()", "full_signature": "@Override public void onDestroy()", "class_method_signature": "LoginPresenter.onDestroy()", "testcase": false, "constructor": false}], "file": "demo/src/main/java/me/jessyan/mvparms/demo/mvp/presenter/login/LoginPresenter.java"}, "focal_method": {"identifier": "login", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void login() {\n        if(mRootView.getMobileStr().length() != 11){\n            mRootView.showMessage(\"\u624b\u673a\u53f7\u7801\u4e0d\u6b63\u786e\");\n            return;\n        }\n        if(mRootView.getPassWordStr().length() < 1){\n            mRootView.showMessage(\"\u5bc6\u7801\u592a\u77ed\");\n            return;\n        }\n        //\u8c03\u7528\u767b\u5f55\u63a5\u53e3\uff0c\u6b63\u786e\u7684\u5bc6\u7801\uff1aabc  \u624b\u673a\u53f7\u53ea\u8981\u7b49\u4e8e11\u4f4d\u5224\u65ad\u8d26\u53f7\u4e3a\u6b63\u786e\n        mModel.login(mRootView.getMobileStr(),mRootView.getPassWordStr())\n                .compose(RxUtils.applySchedulers(mRootView))\n                .subscribe(new MyErrorHandleSubscriber<User>(mErrorHandler) {\n                    //\u8fd9\u4e2a\u7c7b\u662f\u6211\u81ea\u5b9a\u4e49\u7684\u4e00\u4e2a\u7c7b\uff0c\u7edf\u4e00\u62e6\u622a\u6240\u6709error \u5e76\u56de\u8c03\u7ed9\uff1a ResponseErrorListenerImpl\n                    @Override\n                    public void onNext(User user) {\n                            mRootView.loginSuccess();\n                    }\n                });\n\n    }", "signature": "void login()", "full_signature": "public void login()", "class_method_signature": "LoginPresenter.login()", "testcase": false, "constructor": false, "invocations": ["length", "getMobileStr", "showMessage", "length", "getPassWordStr", "showMessage", "subscribe", "compose", "login", "getMobileStr", "getPassWordStr", "applySchedulers", "loginSuccess"]}, "repository": {"repo_id": 201843970, "url": "https://github.com/drchengit/Robolectric_arm_mvp", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 17, "size": 707, "license": "licensed"}}