{"test_class": {"identifier": "ProjectApplicationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Project projectMock;", "modifier": "@Mock\n    private", "type": "Project", "declarator": "projectMock", "var_name": "projectMock"}, {"original_string": "@Mock\n    private Project otherProjectMock;", "modifier": "@Mock\n    private", "type": "Project", "declarator": "otherProjectMock", "var_name": "otherProjectMock"}, {"original_string": "@Mock\n    private User userMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "userMock", "var_name": "userMock"}, {"original_string": "@Mock\n    private User otherUserMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "otherUserMock", "var_name": "otherUserMock"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/application/persistence/ProjectApplicationTest.java"}, "test_case": {"identifier": "equalsReturnsFalseForDifferentComment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void equalsReturnsFalseForDifferentComment() {\n        // given\n        long applicationId = 1;\n        var userId = \"user\";\n        var comment = \"This is a comment!\";\n        var otherComment = \"This is a different comment!\";\n        var date = LocalDateTime.now();\n\n        given(userMock.getId()).willReturn(userId);\n\n        var application = new ProjectApplication(projectMock, comment, userMock, date);\n        application.id = applicationId;\n\n        var otherApplication = new ProjectApplication(projectMock, otherComment, userMock, date);\n        otherApplication.id = applicationId;\n\n        // when\n        boolean actualEquals = application.equals(otherApplication);\n\n        // then\n        assertThat(actualEquals).isFalse();\n    }", "signature": "void equalsReturnsFalseForDifferentComment()", "full_signature": "@Test public void equalsReturnsFalseForDifferentComment()", "class_method_signature": "ProjectApplicationTest.equalsReturnsFalseForDifferentComment()", "testcase": true, "constructor": false, "invocations": ["now", "willReturn", "given", "getId", "equals", "isFalse", "assertThat"]}, "focal_class": {"identifier": "ProjectApplication", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    Long id;", "modifier": "@Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)", "type": "Long", "declarator": "id", "var_name": "id"}, {"original_string": "@ManyToOne\n    @JoinColumn(\n            name = \"PROJECT_ID\",\n            nullable = false\n    )\n    Project project;", "modifier": "@ManyToOne\n    @JoinColumn(\n            name = \"PROJECT_ID\",\n            nullable = false\n    )", "type": "Project", "declarator": "project", "var_name": "project"}, {"original_string": "@ManyToOne\n    @JoinColumn(\n            name = \"USER_ID\",\n            nullable = false\n    )\n    User user;", "modifier": "@ManyToOne\n    @JoinColumn(\n            name = \"USER_ID\",\n            nullable = false\n    )", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Lob\n    @Column(\n            name = \"APPLICATION_COMMENT\",\n            length = 4096\n    )\n    String comment;", "modifier": "@Lob\n    @Column(\n            name = \"APPLICATION_COMMENT\",\n            length = 4096\n    )", "type": "String", "declarator": "comment", "var_name": "comment"}, {"original_string": "@Column(\n            name = \"APPLICATION_DATE\",\n            nullable = false\n    )\n    LocalDateTime applicationDate;", "modifier": "@Column(\n            name = \"APPLICATION_DATE\",\n            nullable = false\n    )", "type": "LocalDateTime", "declarator": "applicationDate", "var_name": "applicationDate"}], "methods": [{"identifier": "ProjectApplication", "parameters": "(Project project, String comment, User user, LocalDateTime applicationDate)", "modifiers": "public", "return": "", "signature": " ProjectApplication(Project project, String comment, User user, LocalDateTime applicationDate)", "full_signature": "public  ProjectApplication(Project project, String comment, User user, LocalDateTime applicationDate)", "class_method_signature": "ProjectApplication.ProjectApplication(Project project, String comment, User user, LocalDateTime applicationDate)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ProjectApplication.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ProjectApplication.hashCode()", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/application/persistence/ProjectApplication.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        if(this == obj) {\n            return true;\n        }\n\n        if(obj instanceof ProjectApplication) {\n            ProjectApplication other = (ProjectApplication) obj;\n\n            // only compare the user IDs because of the cyclic reference: User <-> Application\n            boolean userEquals = Objects.nonNull(this.user) && Objects.nonNull(other.user)\n                    && Objects.equals(this.user.getId(), other.user.getId());\n\n            return userEquals &&\n                    Objects.equals(this.id, other.id) &&\n                    Objects.equals(this.comment, other.comment) &&\n                    Objects.equals(this.project, other.project) &&\n                    Objects.equals(this.applicationDate, other.applicationDate);\n        }\n\n        return false;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ProjectApplication.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["nonNull", "nonNull", "equals", "getId", "getId", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}