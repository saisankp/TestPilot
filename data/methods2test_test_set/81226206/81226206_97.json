{"test_class": {"identifier": "RunnerOptionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INTELLIJ1 = \"com.intellij.rt.execution.application.AppMain cucumber.api.cli.Main --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvmSMFormatter --monochrome --name ^get users and then get first by id$ --glue com.intuit.karate /Users/pthomas3/dev/zcode/karate/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/users.feature\";", "modifier": "private static final", "type": "String", "declarator": "INTELLIJ1 = \"com.intellij.rt.execution.application.AppMain cucumber.api.cli.Main --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvmSMFormatter --monochrome --name ^get users and then get first by id$ --glue com.intuit.karate /Users/pthomas3/dev/zcode/karate/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/users.feature\"", "var_name": "INTELLIJ1"}, {"original_string": "private static final String INTELLIJ2 = \"cucumber.api.cli.Main --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvmSMFormatter --monochrome --glue com.intuit.karate /Users/pthomas3/dev/zcode/karate/karate-junit4/src/test/java/com/intuit/karate/junit4/demos\";", "modifier": "private static final", "type": "String", "declarator": "INTELLIJ2 = \"cucumber.api.cli.Main --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvmSMFormatter --monochrome --glue com.intuit.karate /Users/pthomas3/dev/zcode/karate/karate-junit4/src/test/java/com/intuit/karate/junit4/demos\"", "var_name": "INTELLIJ2"}, {"original_string": "private static final String INTELLIJ3 = \"cucumber.api.cli.Main --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvmSMFormatter --monochrome --name ^create and retrieve a cat$ --glue com.intuit.karate /Users/pthomas3/dev/zcode/karate/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/users.feature\";", "modifier": "private static final", "type": "String", "declarator": "INTELLIJ3 = \"cucumber.api.cli.Main --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvmSMFormatter --monochrome --name ^create and retrieve a cat$ --glue com.intuit.karate /Users/pthomas3/dev/zcode/karate/karate-junit4/src/test/java/com/intuit/karate/junit4/demos/users.feature\"", "var_name": "INTELLIJ3"}, {"original_string": "private static final String INTELLIJ4 = \"cucumber.api.cli.Main --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvmSMFormatter --monochrome --name \\\"^test name$\\\"\";", "modifier": "private static final", "type": "String", "declarator": "INTELLIJ4 = \"cucumber.api.cli.Main --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvmSMFormatter --monochrome --name \\\"^test name$\\\"\"", "var_name": "INTELLIJ4"}, {"original_string": "private static final String ECLIPSE1 = \"com.intuit.karate.StepDefs - cucumber.api.cli.Main /Users/pthomas3/dev/zcode/karate/karate-junit4/src/test/resources/com/intuit/karate/junit4/demos/users.feature --glue classpath: --plugin pretty --monochrome\";", "modifier": "private static final", "type": "String", "declarator": "ECLIPSE1 = \"com.intuit.karate.StepDefs - cucumber.api.cli.Main /Users/pthomas3/dev/zcode/karate/karate-junit4/src/test/resources/com/intuit/karate/junit4/demos/users.feature --glue classpath: --plugin pretty --monochrome\"", "var_name": "ECLIPSE1"}], "file": "karate-core/src/test/java/com/intuit/karate/RunnerOptionsTest.java"}, "test_case": {"identifier": "testArgs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testArgs() {\n        RunnerOptions options = RunnerOptions.parseStringArgs(new String[]{});\n        assertNull(options.features);\n        assertNull(options.tags);\n        assertNull(options.name);\n        options = RunnerOptions.parseStringArgs(new String[]{\"--name\", \"foo\"});\n        assertNull(options.features);\n        assertNull(options.tags);\n        assertEquals(\"foo\", options.name);\n        options = RunnerOptions.parseStringArgs(new String[]{\"--tags\", \"~@ignore\"});\n        assertNull(options.features);\n        assertEquals(\"~@ignore\", options.tags.get(0));\n        assertNull(options.name);\n        options = RunnerOptions.parseStringArgs(new String[]{\"--tags\", \"~@ignore\", \"foo.feature\"});\n        assertEquals(\"foo.feature\", options.features.get(0));\n        assertEquals(\"~@ignore\", options.tags.get(0));\n        assertNull(options.name);\n    }", "signature": "void testArgs()", "full_signature": "@Test public void testArgs()", "class_method_signature": "RunnerOptionsTest.testArgs()", "testcase": true, "constructor": false, "invocations": ["parseStringArgs", "assertNull", "assertNull", "assertNull", "parseStringArgs", "assertNull", "assertNull", "assertEquals", "parseStringArgs", "assertNull", "assertEquals", "get", "assertNull", "parseStringArgs", "assertEquals", "get", "assertEquals", "get", "assertNull"]}, "focal_class": {"identifier": "RunnerOptions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger logger = LoggerFactory.getLogger(RunnerOptions.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "logger = LoggerFactory.getLogger(RunnerOptions.class)", "var_name": "logger"}, {"original_string": "private static final Pattern COMMAND_NAME = Pattern.compile(\"--name \\\"?([^$\\\"]+[^ \\\"]+)\\\"?\");", "modifier": "private static final", "type": "Pattern", "declarator": "COMMAND_NAME = Pattern.compile(\"--name \\\"?([^$\\\"]+[^ \\\"]+)\\\"?\")", "var_name": "COMMAND_NAME"}, {"original_string": "@Option(names = {\"-h\", \"--help\"}, usageHelp = true, description = \"display this help message\")\n    boolean help;", "modifier": "@Option(names = {\"-h\", \"--help\"}, usageHelp = true, description = \"display this help message\")", "type": "boolean", "declarator": "help", "var_name": "help"}, {"original_string": "@Option(names = {\"-t\", \"--tags\"}, description = \"tags\")\n    List<String> tags;", "modifier": "@Option(names = {\"-t\", \"--tags\"}, description = \"tags\")", "type": "List<String>", "declarator": "tags", "var_name": "tags"}, {"original_string": "@Option(names = {\"-T\", \"--threads\"}, description = \"threads\")\n    int threads = 1;", "modifier": "@Option(names = {\"-T\", \"--threads\"}, description = \"threads\")", "type": "int", "declarator": "threads = 1", "var_name": "threads"}, {"original_string": "@Option(names = {\"-n\", \"--name\"}, description = \"name of scenario to run\")\n    String name;", "modifier": "@Option(names = {\"-n\", \"--name\"}, description = \"name of scenario to run\")", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "@Option(names = {\"-e\", \"--env\"}, description = \"value of 'karate.env'\")\n    String env;", "modifier": "@Option(names = {\"-e\", \"--env\"}, description = \"value of 'karate.env'\")", "type": "String", "declarator": "env", "var_name": "env"}, {"original_string": "@Option(names = {\"-d\", \"--debug\"}, arity = \"0..1\", defaultValue = \"-1\", fallbackValue = \"0\",\n            description = \"debug mode (optional port else dynamically chosen)\")\n    int debugPort;", "modifier": "@Option(names = {\"-d\", \"--debug\"}, arity = \"0..1\", defaultValue = \"-1\", fallbackValue = \"0\",\n            description = \"debug mode (optional port else dynamically chosen)\")", "type": "int", "declarator": "debugPort", "var_name": "debugPort"}, {"original_string": "@Parameters(description = \"one or more tests (features) or search-paths to run\")\n    List<String> features;", "modifier": "@Parameters(description = \"one or more tests (features) or search-paths to run\")", "type": "List<String>", "declarator": "features", "var_name": "features"}, {"original_string": "@Option(names = {\"-m\", \"--monochrome\"}, description = \"monochrome (not supported)\")\n    boolean monochrome;", "modifier": "@Option(names = {\"-m\", \"--monochrome\"}, description = \"monochrome (not supported)\")", "type": "boolean", "declarator": "monochrome", "var_name": "monochrome"}, {"original_string": "@Option(names = {\"-g\", \"--glue\"}, description = \"glue (not supported)\")\n    String glue;", "modifier": "@Option(names = {\"-g\", \"--glue\"}, description = \"glue (not supported)\")", "type": "String", "declarator": "glue", "var_name": "glue"}, {"original_string": "@Option(names = {\"-\", \"--plugin\"}, description = \"plugin (not supported)\")\n    List<String> plugins;", "modifier": "@Option(names = {\"-\", \"--plugin\"}, description = \"plugin (not supported)\")", "type": "List<String>", "declarator": "plugins", "var_name": "plugins"}], "methods": [{"identifier": "getTags", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getTags()", "full_signature": "public List<String> getTags()", "class_method_signature": "RunnerOptions.getTags()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "RunnerOptions.getName()", "testcase": false, "constructor": false}, {"identifier": "addFeature", "parameters": "(String feature)", "modifiers": "public", "return": "void", "signature": "void addFeature(String feature)", "full_signature": "public void addFeature(String feature)", "class_method_signature": "RunnerOptions.addFeature(String feature)", "testcase": false, "constructor": false}, {"identifier": "getFeatures", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getFeatures()", "full_signature": "public List<String> getFeatures()", "class_method_signature": "RunnerOptions.getFeatures()", "testcase": false, "constructor": false}, {"identifier": "getThreads", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getThreads()", "full_signature": "public int getThreads()", "class_method_signature": "RunnerOptions.getThreads()", "testcase": false, "constructor": false}, {"identifier": "getDebugPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDebugPort()", "full_signature": "public int getDebugPort()", "class_method_signature": "RunnerOptions.getDebugPort()", "testcase": false, "constructor": false}, {"identifier": "parseStringArgs", "parameters": "(String[] args)", "modifiers": "public static", "return": "RunnerOptions", "signature": "RunnerOptions parseStringArgs(String[] args)", "full_signature": "public static RunnerOptions parseStringArgs(String[] args)", "class_method_signature": "RunnerOptions.parseStringArgs(String[] args)", "testcase": false, "constructor": false}, {"identifier": "parseCommandLine", "parameters": "(String line)", "modifiers": "public static", "return": "RunnerOptions", "signature": "RunnerOptions parseCommandLine(String line)", "full_signature": "public static RunnerOptions parseCommandLine(String line)", "class_method_signature": "RunnerOptions.parseCommandLine(String line)", "testcase": false, "constructor": false}, {"identifier": "fromAnnotationAndSystemProperties", "parameters": "(List<String> features, List<String> tags, Class<?> clazz)", "modifiers": "public static", "return": "RunnerOptions", "signature": "RunnerOptions fromAnnotationAndSystemProperties(List<String> features, List<String> tags, Class<?> clazz)", "full_signature": "public static RunnerOptions fromAnnotationAndSystemProperties(List<String> features, List<String> tags, Class<?> clazz)", "class_method_signature": "RunnerOptions.fromAnnotationAndSystemProperties(List<String> features, List<String> tags, Class<?> clazz)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/RunnerOptions.java"}, "focal_method": {"identifier": "parseStringArgs", "parameters": "(String[] args)", "modifiers": "public static", "return": "RunnerOptions", "body": "public static RunnerOptions parseStringArgs(String[] args) {\n        RunnerOptions options = CommandLine.populateCommand(new RunnerOptions(), args);\n        List<String> featuresTemp = new ArrayList();\n        if (options.features != null) {\n            for (String s : options.features) {\n                if (s.startsWith(\"com.\") || s.startsWith(\"cucumber.\") || s.startsWith(\"org.\")) {\n                    continue;\n                }\n                featuresTemp.add(s);\n            }\n            options.features = featuresTemp.isEmpty() ? null : featuresTemp;\n        }\n        return options;\n    }", "signature": "RunnerOptions parseStringArgs(String[] args)", "full_signature": "public static RunnerOptions parseStringArgs(String[] args)", "class_method_signature": "RunnerOptions.parseStringArgs(String[] args)", "testcase": false, "constructor": false, "invocations": ["populateCommand", "startsWith", "startsWith", "startsWith", "add", "isEmpty"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}