{"test_class": {"identifier": "SofaRegistryHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "registry/registry-sofa/src/test/java/com/alipay/sofa/rpc/registry/sofa/SofaRegistryHelperTest.java"}, "test_case": {"identifier": "convertProviderToUrls", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertProviderToUrls() throws Exception {\n        ServerConfig serverConfig = new ServerConfig()\n            .setHost(\"0.0.0.0\")\n            .setPort(22000)\n            .setProtocol(\"bolt\");\n\n        ServerConfig serverConfig2 = new ServerConfig()\n            .setHost(\"127.0.0.1\")\n            .setPort(12200)\n            .setProtocol(\"tr\");\n\n        ServerConfig serverConfig3 = new ServerConfig()\n            .setHost(\"192.1.1.1\")\n            .setPort(8080)\n            .setProtocol(\"xfire\");\n        ProviderConfig<?> providerConfig = new ProviderConfig();\n        providerConfig\n            .setInterfaceId(\"com.alipay.sofa.rpc.test.TestService\")\n            .setUniqueId(\"qqqq\")\n            .setApplication(new ApplicationConfig().setAppName(\"xxxx\"))\n            .setTimeout(4444)\n            .setWeight(250)\n            .setServer(Arrays.asList(serverConfig, serverConfig2));\n\n        MethodConfig methodConfig = new MethodConfig().setName(\"echo\").setTimeout(3333);\n        MethodConfig methodConfig2 = new MethodConfig().setName(\"xx\").setTimeout(2222);\n        providerConfig.setMethods(Arrays.asList(methodConfig, methodConfig2));\n\n        String s1 = SofaRegistryHelper.convertProviderToUrls(providerConfig, serverConfig);\n        Assert.assertNotNull(s1);\n        ProviderInfo providerInfo = SofaRegistryHelper.parseProviderInfo(s1);\n        Assert.assertEquals(SystemInfo.getLocalHost(), providerInfo.getHost());\n        Assert.assertEquals(serverConfig.getPort(), providerInfo.getPort());\n        Assert.assertEquals(providerConfig.getAppName(), providerInfo.getAttr(ProviderInfoAttrs.ATTR_APP_NAME));\n        Assert.assertEquals(providerConfig.getTimeout(), providerInfo.getDynamicAttr(ProviderInfoAttrs.ATTR_TIMEOUT));\n\n        String s2 = SofaRegistryHelper.convertProviderToUrls(providerConfig, serverConfig2);\n        Assert.assertNotNull(s2);\n        ProviderInfo providerInfo2 = SofaRegistryHelper.parseProviderInfo(s2);\n        Assert.assertEquals(SystemInfo.getLocalHost(), providerInfo.getHost());\n        Assert.assertEquals(serverConfig2.getPort(), providerInfo2.getPort());\n        Assert.assertEquals(providerConfig.getAppName(), providerInfo2.getAttr(ProviderInfoAttrs.ATTR_APP_NAME));\n        Assert.assertEquals(providerConfig.getTimeout(), providerInfo2.getDynamicAttr(ProviderInfoAttrs.ATTR_TIMEOUT));\n\n        String s3 = SofaRegistryHelper.convertProviderToUrls(providerConfig, serverConfig3);\n        Assert.assertNotNull(s3);\n        ProviderInfo providerInfo3 = SofaRegistryHelper.parseProviderInfo(s3);\n        Assert.assertEquals(serverConfig3.getHost(), providerInfo3.getHost());\n        Assert.assertEquals(serverConfig3.getPort(), providerInfo3.getPort());\n        Assert.assertEquals(providerConfig.getAppName(), providerInfo3.getAttr(ProviderInfoAttrs.ATTR_APP_NAME));\n        Assert.assertEquals(providerConfig.getTimeout(), providerInfo3.getDynamicAttr(ProviderInfoAttrs.ATTR_TIMEOUT));\n    }", "signature": "void convertProviderToUrls()", "full_signature": "@Test public void convertProviderToUrls()", "class_method_signature": "SofaRegistryHelperTest.convertProviderToUrls()", "testcase": true, "constructor": false, "invocations": ["setProtocol", "setPort", "setHost", "setProtocol", "setPort", "setHost", "setProtocol", "setPort", "setHost", "setServer", "setWeight", "setTimeout", "setApplication", "setUniqueId", "setInterfaceId", "setAppName", "asList", "setTimeout", "setName", "setTimeout", "setName", "setMethods", "asList", "convertProviderToUrls", "assertNotNull", "parseProviderInfo", "assertEquals", "getLocalHost", "getHost", "assertEquals", "getPort", "getPort", "assertEquals", "getAppName", "getAttr", "assertEquals", "getTimeout", "getDynamicAttr", "convertProviderToUrls", "assertNotNull", "parseProviderInfo", "assertEquals", "getLocalHost", "getHost", "assertEquals", "getPort", "getPort", "assertEquals", "getAppName", "getAttr", "assertEquals", "getTimeout", "getDynamicAttr", "convertProviderToUrls", "assertNotNull", "parseProviderInfo", "assertEquals", "getHost", "getHost", "assertEquals", "getPort", "getPort", "assertEquals", "getAppName", "getAttr", "assertEquals", "getTimeout", "getDynamicAttr"]}, "focal_class": {"identifier": "SofaRegistryHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER                     = LoggerFactory.getLogger(SofaRegistryHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER                     = LoggerFactory.getLogger(SofaRegistryHelper.class)", "var_name": "LOGGER"}, {"original_string": "public static final String  PUBLISHER_PREFIX           = \"SofaProvider-\";", "modifier": "public static final", "type": "String", "declarator": "PUBLISHER_PREFIX           = \"SofaProvider-\"", "var_name": "PUBLISHER_PREFIX"}, {"original_string": "public static final String  SUBSCRIBER_PREFIX          = \"SofaSubscriber-\";", "modifier": "public static final", "type": "String", "declarator": "SUBSCRIBER_PREFIX          = \"SofaSubscriber-\"", "var_name": "SUBSCRIBER_PREFIX"}, {"original_string": "public static final String  SUBSCRIBER_LIST_GROUP_ID   = \"SOFA\";", "modifier": "public static final", "type": "String", "declarator": "SUBSCRIBER_LIST_GROUP_ID   = \"SOFA\"", "var_name": "SUBSCRIBER_LIST_GROUP_ID"}, {"original_string": "public static final String  SUBSCRIBER_CONFIG_GROUP_ID = \"SOFA.CONFIG\";", "modifier": "public static final", "type": "String", "declarator": "SUBSCRIBER_CONFIG_GROUP_ID = \"SOFA.CONFIG\"", "var_name": "SUBSCRIBER_CONFIG_GROUP_ID"}, {"original_string": "public static final String  PROTOCOL_TYPE_OVERRIDE     = \"override\";", "modifier": "public static final", "type": "String", "declarator": "PROTOCOL_TYPE_OVERRIDE     = \"override\"", "var_name": "PROTOCOL_TYPE_OVERRIDE"}], "methods": [{"identifier": "buildListDataId", "parameters": "(AbstractInterfaceConfig config, String protocol)", "modifiers": "public static", "return": "String", "signature": "String buildListDataId(AbstractInterfaceConfig config, String protocol)", "full_signature": "public static String buildListDataId(AbstractInterfaceConfig config, String protocol)", "class_method_signature": "SofaRegistryHelper.buildListDataId(AbstractInterfaceConfig config, String protocol)", "testcase": false, "constructor": false}, {"identifier": "convertProviderToUrls", "parameters": "(ProviderConfig providerConfig, ServerConfig server)", "modifiers": "public static", "return": "String", "signature": "String convertProviderToUrls(ProviderConfig providerConfig, ServerConfig server)", "full_signature": "public static String convertProviderToUrls(ProviderConfig providerConfig, ServerConfig server)", "class_method_signature": "SofaRegistryHelper.convertProviderToUrls(ProviderConfig providerConfig, ServerConfig server)", "testcase": false, "constructor": false}, {"identifier": "convertMap2Pair", "parameters": "(Map<String, String> map)", "modifiers": "private static", "return": "String", "signature": "String convertMap2Pair(Map<String, String> map)", "full_signature": "private static String convertMap2Pair(Map<String, String> map)", "class_method_signature": "SofaRegistryHelper.convertMap2Pair(Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "getKeyPairs", "parameters": "(String key, Object value)", "modifiers": "private static", "return": "String", "signature": "String getKeyPairs(String key, Object value)", "full_signature": "private static String getKeyPairs(String key, Object value)", "class_method_signature": "SofaRegistryHelper.getKeyPairs(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "addCommonAttrs", "parameters": "(StringBuilder sb)", "modifiers": "private static", "return": "void", "signature": "void addCommonAttrs(StringBuilder sb)", "full_signature": "private static void addCommonAttrs(StringBuilder sb)", "class_method_signature": "SofaRegistryHelper.addCommonAttrs(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "parseProviderInfos", "parameters": "(List<String> urls)", "modifiers": "public static", "return": "List<ProviderInfo>", "signature": "List<ProviderInfo> parseProviderInfos(List<String> urls)", "full_signature": "public static List<ProviderInfo> parseProviderInfos(List<String> urls)", "class_method_signature": "SofaRegistryHelper.parseProviderInfos(List<String> urls)", "testcase": false, "constructor": false}, {"identifier": "parseProviderInfo", "parameters": "(String originUrl)", "modifiers": "public static", "return": "ProviderInfo", "signature": "ProviderInfo parseProviderInfo(String originUrl)", "full_signature": "public static ProviderInfo parseProviderInfo(String originUrl)", "class_method_signature": "SofaRegistryHelper.parseProviderInfo(String originUrl)", "testcase": false, "constructor": false}, {"identifier": "parseMethodInfo", "parameters": "(Map<String, Object> methodParameters, String method, String valueStr)", "modifiers": "static", "return": "void", "signature": "void parseMethodInfo(Map<String, Object> methodParameters, String method, String valueStr)", "full_signature": "static void parseMethodInfo(Map<String, Object> methodParameters, String method, String valueStr)", "class_method_signature": "SofaRegistryHelper.parseMethodInfo(Map<String, Object> methodParameters, String method, String valueStr)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Map<String, String> map, String... keys)", "modifiers": "static", "return": "String", "signature": "String getValue(Map<String, String> map, String... keys)", "full_signature": "static String getValue(Map<String, String> map, String... keys)", "class_method_signature": "SofaRegistryHelper.getValue(Map<String, String> map, String... keys)", "testcase": false, "constructor": false}, {"identifier": "removeOldKeys", "parameters": "(Map<String, String> map, String... keys)", "modifiers": "static", "return": "void", "signature": "void removeOldKeys(Map<String, String> map, String... keys)", "full_signature": "static void removeOldKeys(Map<String, String> map, String... keys)", "class_method_signature": "SofaRegistryHelper.removeOldKeys(Map<String, String> map, String... keys)", "testcase": false, "constructor": false}], "file": "registry/registry-sofa/src/main/java/com/alipay/sofa/rpc/registry/sofa/SofaRegistryHelper.java"}, "focal_method": {"identifier": "convertProviderToUrls", "parameters": "(ProviderConfig providerConfig, ServerConfig server)", "modifiers": "public static", "return": "String", "body": "public static String convertProviderToUrls(ProviderConfig providerConfig, ServerConfig server) {\n        StringBuilder sb = new StringBuilder(200);\n        String appName = providerConfig.getAppName();\n        String host = server.getVirtualHost(); // \u865a\u62dfip\n        if (host == null) {\n            host = server.getHost();\n            if (NetUtils.isLocalHost(host) || NetUtils.isAnyHost(host)) {\n                host = SystemInfo.getLocalHost();\n            }\n        } else {\n            if (LOGGER.isWarnEnabled(appName)) {\n                LOGGER.warnWithApp(appName,\n                    \"Virtual host is specified, host will be change from {} to {} when register\",\n                    server.getHost(), host);\n            }\n        }\n        Integer port = server.getVirtualPort(); // \u865a\u62dfport\n        if (port == null) {\n            port = server.getPort();\n        } else {\n            if (LOGGER.isWarnEnabled(appName)) {\n                LOGGER.warnWithApp(appName,\n                    \"Virtual port is specified, host will be change from {} to {} when register\",\n                    server.getPort(), port);\n            }\n        }\n\n        String protocol = server.getProtocol();\n        sb.append(host).append(\":\").append(port).append(server.getContextPath());\n        //                .append(providerConfig.getInterfaceId())\n        sb.append(\"?\").append(ATTR_RPC_VERSION).append(\"=\").append(Version.RPC_VERSION);\n        sb.append(getKeyPairs(ATTR_SERIALIZATION, providerConfig.getSerialization()));\n        sb.append(getKeyPairs(ATTR_WEIGHT, providerConfig.getWeight()));\n        if (providerConfig.getTimeout() > 0) {\n            sb.append(getKeyPairs(ATTR_TIMEOUT, providerConfig.getTimeout()));\n        }\n        sb.append(getKeyPairs(ATTR_APP_NAME, appName));\n\n        //        sb.append(getKeyPairs(\"delay\", providerConfig.getDelay()))\n        //                .append(getKeyPairs(\"timeout\", providerConfig.getTimeout()))\n        //                .append(getKeyPairs(\"delay\", providerConfig.getDelay()))\n        //                .append(getKeyPairs(\"id\", providerConfig.getId()))\n        //                .append(getKeyPairs(\"dynamic\", providerConfig.isDynamic()))\n        //                .append(getKeyPairs(\"weight\", providerConfig.getWeight()))\n        //                .append(getKeyPairs(\"crossLang\", providerConfig.getParameter(\"crossLang\")))\n        //                .append(getKeyPairs(\"accepts\", server.getAccepts()));\n\n        // \u517c\u5bb9\u8001\u7cfb\u7edf\uff0c\u4ee3\u7801\u662f\u5426\u5265\u79bb\uff1f\n        if (PROTOCOL_TYPE_BOLT.equals(protocol)) {\n            sb.append(getKeyPairs(RPC_REMOTING_PROTOCOL, RemotingConstants.PROTOCOL_BOLT)); // p=1\n        } else if (PROTOCOL_TYPE_TR.equals(protocol)) {\n            sb.append(getKeyPairs(RPC_REMOTING_PROTOCOL, RemotingConstants.PROTOCOL_TR));// p=13\n        }\n        sb.append(getKeyPairs(RPC_SERVICE_VERSION, SOFA4_RPC_SERVICE_VERSION)); // v=4.0\n        sb.append(getKeyPairs(SERIALIZE_TYPE_KEY, providerConfig.getSerialization())); // _SERIALIZETYPE=xx\n        sb.append(getKeyPairs(WEIGHT_KEY, providerConfig.getWeight())); // _WEIGHT=100\n        if (providerConfig.getTimeout() > 0) {\n            sb.append(getKeyPairs(TIMEOUT, providerConfig.getTimeout())); // _TIMEOUT=3000\n        }\n        sb.append(getKeyPairs(APP_NAME, appName));\n        // sb.append(getKeyPairs(SELF_APP_NAME, appName)); //TODO self_app_name\n        // sb.append(getKeyPairs(IDLE_TIMEOUT, 27)); //TODO _IDLETIMEOUT\n        // sb.append(getKeyPairs(MAX_READ_IDLE, 30)); //TODO _MAXREADIDLETIME\n\n        if (StringUtils.isNotBlank(SystemInfo.getHostMachine())) {\n            sb.append(getKeyPairs(HOST_MACHINE_KEY, SystemInfo.getHostMachine()));\n        }\n\n        Map<String, MethodConfig> methodConfigs = providerConfig.getMethods();\n        if (CommonUtils.isNotEmpty(methodConfigs)) {\n            for (Map.Entry<String, MethodConfig> entry : methodConfigs.entrySet()) {\n                String methodName = entry.getKey();\n                MethodConfig methodConfig = entry.getValue();\n                sb.append(getKeyPairs(\".\" + methodName + \".\" + ATTR_TIMEOUT, methodConfig.getTimeout()));\n\n                // \u65b9\u6cd5\u7ea7\u914d\u7f6e\uff0c\u53ea\u80fd\u653etimeout \n                String key = \"[\" + methodName + \"]\";\n                String value = \"[\" + KEY_TIMEOUT + \"#\" + methodConfig.getTimeout() + \"]\";\n                sb.append(getKeyPairs(key, value));\n            }\n        }\n        sb.append(convertMap2Pair(providerConfig.getParameters()));\n        addCommonAttrs(sb);\n        return sb.toString();\n    }", "signature": "String convertProviderToUrls(ProviderConfig providerConfig, ServerConfig server)", "full_signature": "public static String convertProviderToUrls(ProviderConfig providerConfig, ServerConfig server)", "class_method_signature": "SofaRegistryHelper.convertProviderToUrls(ProviderConfig providerConfig, ServerConfig server)", "testcase": false, "constructor": false, "invocations": ["getAppName", "getVirtualHost", "getHost", "isLocalHost", "isAnyHost", "getLocalHost", "isWarnEnabled", "warnWithApp", "getHost", "getVirtualPort", "getPort", "isWarnEnabled", "warnWithApp", "getPort", "getProtocol", "append", "append", "append", "append", "getContextPath", "append", "append", "append", "append", "append", "getKeyPairs", "getSerialization", "append", "getKeyPairs", "getWeight", "getTimeout", "append", "getKeyPairs", "getTimeout", "append", "getKeyPairs", "equals", "append", "getKeyPairs", "equals", "append", "getKeyPairs", "append", "getKeyPairs", "append", "getKeyPairs", "getSerialization", "append", "getKeyPairs", "getWeight", "getTimeout", "append", "getKeyPairs", "getTimeout", "append", "getKeyPairs", "isNotBlank", "getHostMachine", "append", "getKeyPairs", "getHostMachine", "getMethods", "isNotEmpty", "entrySet", "getKey", "getValue", "append", "getKeyPairs", "getTimeout", "getTimeout", "append", "getKeyPairs", "append", "convertMap2Pair", "getParameters", "addCommonAttrs", "toString"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}