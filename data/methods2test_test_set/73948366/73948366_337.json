{"test_class": {"identifier": "DefaultOAuthJwtAccessTokenParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader = this.getClass().getClassLoader();", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader = this.getClass().getClassLoader()", "var_name": "classLoader"}, {"original_string": "private final KeyStore baseKeyStore = new KeyStore() {\n        @Override\n        public String getPublicKey(String domain, String service, String keyId) {\n            return null;\n        }\n    };", "modifier": "private final", "type": "KeyStore", "declarator": "baseKeyStore = new KeyStore() {\n        @Override\n        public String getPublicKey(String domain, String service, String keyId) {\n            return null;\n        }\n    }", "var_name": "baseKeyStore"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/oauth/parser/DefaultOAuthJwtAccessTokenParserTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"rawtypes\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"rawtypes\")\n    public void testParse() throws Exception {\n        // mock internal parser\n        DefaultOAuthJwtAccessTokenParser parser = new DefaultOAuthJwtAccessTokenParser(baseKeyStore, this.classLoader.getResource(\"jwt_jwks.json\").toString());\n        JwtParser jwtParserMock = Mockito.mock(JwtParser.class);\n        Field f = parser.getClass().getDeclaredField(\"parser\");\n        f.setAccessible(true);\n        f.set(parser, jwtParserMock);\n\n        // parse error\n        Mockito.when(jwtParserMock.parseClaimsJws(null)).thenThrow(new NullPointerException());\n        assertThrows(OAuthJwtAccessTokenException.class, () -> parser.parse(null));\n\n        // parse success\n        String jwtString = \"dummy-jwt-string\";\n        Jws<Claims> jws = new Jws<Claims>() {\n            public JwsHeader getHeader() { return null; }\n            public Claims getBody() { return null; }\n\n            @Override\n            public String getSignature() {\n                return \"dummy-jwt-signature\";\n            }\n        };\n        Mockito.when(jwtParserMock.parseClaimsJws(jwtString)).thenReturn(jws);\n        OAuthJwtAccessToken token = parser.parse(jwtString);\n        assertNotNull(token);\n        assertTrue(token instanceof DefaultOAuthJwtAccessToken);\n        assertEquals(token.getSignature(), \"dummy-jwt-signature\");\n    }", "signature": "void testParse()", "full_signature": "@Test @SuppressWarnings(\"rawtypes\") public void testParse()", "class_method_signature": "DefaultOAuthJwtAccessTokenParserTest.testParse()", "testcase": true, "constructor": false, "invocations": ["toString", "getResource", "mock", "getDeclaredField", "getClass", "setAccessible", "set", "thenThrow", "when", "parseClaimsJws", "assertThrows", "parse", "thenReturn", "when", "parseClaimsJws", "parse", "assertNotNull", "assertTrue", "assertEquals", "getSignature"]}, "focal_class": {"identifier": "DefaultOAuthJwtAccessTokenParser", "superclass": "", "interfaces": "implements OAuthJwtAccessTokenParser", "fields": [{"original_string": "public static final int ALLOWED_CLOCK_SKEW_SECONDS = 60;", "modifier": "public static final", "type": "int", "declarator": "ALLOWED_CLOCK_SKEW_SECONDS = 60", "var_name": "ALLOWED_CLOCK_SKEW_SECONDS"}, {"original_string": "protected JwtParser parser = null;", "modifier": "protected", "type": "JwtParser", "declarator": "parser = null", "var_name": "parser"}], "methods": [{"identifier": "DefaultOAuthJwtAccessTokenParser", "parameters": "(KeyStore keyStore, String jwksUrl)", "modifiers": "public", "return": "", "signature": " DefaultOAuthJwtAccessTokenParser(KeyStore keyStore, String jwksUrl)", "full_signature": "public  DefaultOAuthJwtAccessTokenParser(KeyStore keyStore, String jwksUrl)", "class_method_signature": "DefaultOAuthJwtAccessTokenParser.DefaultOAuthJwtAccessTokenParser(KeyStore keyStore, String jwksUrl)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String jwtString)", "modifiers": "@Override public", "return": "OAuthJwtAccessToken", "signature": "OAuthJwtAccessToken parse(String jwtString)", "full_signature": "@Override public OAuthJwtAccessToken parse(String jwtString)", "class_method_signature": "DefaultOAuthJwtAccessTokenParser.parse(String jwtString)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/parser/DefaultOAuthJwtAccessTokenParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String jwtString)", "modifiers": "@Override public", "return": "OAuthJwtAccessToken", "body": "@Override\n    public OAuthJwtAccessToken parse(String jwtString) throws OAuthJwtAccessTokenException {\n        OAuthJwtAccessToken accessToken = null;\n        try {\n            Jws<Claims> jws = this.parser.parseClaimsJws(jwtString);\n            accessToken = new DefaultOAuthJwtAccessToken(jws);\n        } catch (Exception ex) {\n            throw new OAuthJwtAccessTokenException(ex);\n        }\n        return accessToken;\n    }", "signature": "OAuthJwtAccessToken parse(String jwtString)", "full_signature": "@Override public OAuthJwtAccessToken parse(String jwtString)", "class_method_signature": "DefaultOAuthJwtAccessTokenParser.parse(String jwtString)", "testcase": false, "constructor": false, "invocations": ["parseClaimsJws"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}