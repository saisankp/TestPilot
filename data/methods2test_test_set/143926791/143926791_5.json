{"test_class": {"identifier": "QuoteServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MockMvc mockMvc;", "modifier": "", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@InjectMocks\n    @Autowired\n    QuoteService service;", "modifier": "@InjectMocks\n    @Autowired", "type": "QuoteService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n    RestTemplate restTemplate;", "modifier": "@Mock", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "quotes-service/src/test/java/io/pivotal/quotes/service/QuoteServiceTest.java"}, "test_case": {"identifier": "getQuotesOneQuote", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getQuotesOneQuote() throws Exception {\n        List<Quote> quotes = service.getQuotes(TestConfiguration.QUOTE_SYMBOL);\n        assertNotNull(\"should have 1 quotes\", quotes);\n        assertEquals(\"should have 1 quotes\", quotes.size(), 1);\n    }", "signature": "void getQuotesOneQuote()", "full_signature": "@Test public void getQuotesOneQuote()", "class_method_signature": "QuoteServiceTest.getQuotesOneQuote()", "testcase": true, "constructor": false, "invocations": ["getQuotes", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "QuoteService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Value(\"${pivotal.quotes.quote_url}\")\n\tprotected String quote_url;", "modifier": "@Value(\"${pivotal.quotes.quote_url}\")\n\tprotected", "type": "String", "declarator": "quote_url", "var_name": "quote_url"}, {"original_string": "@Value(\"${pivotal.quotes.quotes_url}\")\n\tprotected String quotes_url;", "modifier": "@Value(\"${pivotal.quotes.quotes_url}\")\n\tprotected", "type": "String", "declarator": "quotes_url", "var_name": "quotes_url"}, {"original_string": "@Value(\"${pivotal.quotes.companies_url}\")\n\tprotected String company_url;", "modifier": "@Value(\"${pivotal.quotes.companies_url}\")\n\tprotected", "type": "String", "declarator": "company_url", "var_name": "company_url"}, {"original_string": "public static final String FMT = \"json\";", "modifier": "public static final", "type": "String", "declarator": "FMT = \"json\"", "var_name": "FMT"}, {"original_string": "private RestTemplate restTemplate = new RestTemplate();", "modifier": "private", "type": "RestTemplate", "declarator": "restTemplate = new RestTemplate()", "var_name": "restTemplate"}], "methods": [{"identifier": "getQuote", "parameters": "(String symbol)", "modifiers": "@HystrixCommand(fallbackMethod = \"getQuoteFallback\") public", "return": "Quote", "signature": "Quote getQuote(String symbol)", "full_signature": "@HystrixCommand(fallbackMethod = \"getQuoteFallback\") public Quote getQuote(String symbol)", "class_method_signature": "QuoteService.getQuote(String symbol)", "testcase": false, "constructor": false}, {"identifier": "getQuoteFallback", "parameters": "(String symbol)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "Quote", "signature": "Quote getQuoteFallback(String symbol)", "full_signature": "@SuppressWarnings(\"unused\") private Quote getQuoteFallback(String symbol)", "class_method_signature": "QuoteService.getQuoteFallback(String symbol)", "testcase": false, "constructor": false}, {"identifier": "getCompanyInfo", "parameters": "(String name)", "modifiers": "@HystrixCommand(fallbackMethod = \"getCompanyInfoFallback\", commandProperties = { @HystrixProperty(name=\"execution.timeout.enabled\", value=\"false\") }) public", "return": "List<CompanyInfo>", "signature": "List<CompanyInfo> getCompanyInfo(String name)", "full_signature": "@HystrixCommand(fallbackMethod = \"getCompanyInfoFallback\", commandProperties = { @HystrixProperty(name=\"execution.timeout.enabled\", value=\"false\") }) public List<CompanyInfo> getCompanyInfo(String name)", "class_method_signature": "QuoteService.getCompanyInfo(String name)", "testcase": false, "constructor": false}, {"identifier": "getQuotes", "parameters": "(String symbols)", "modifiers": "public", "return": "List<Quote>", "signature": "List<Quote> getQuotes(String symbols)", "full_signature": "public List<Quote> getQuotes(String symbols)", "class_method_signature": "QuoteService.getQuotes(String symbols)", "testcase": false, "constructor": false}, {"identifier": "getCompanyInfoFallback", "parameters": "(String symbol)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "List<CompanyInfo>", "signature": "List<CompanyInfo> getCompanyInfoFallback(String symbol)", "full_signature": "@SuppressWarnings(\"unused\") private List<CompanyInfo> getCompanyInfoFallback(String symbol)", "class_method_signature": "QuoteService.getCompanyInfoFallback(String symbol)", "testcase": false, "constructor": false}], "file": "quotes-service/src/main/java/io/pivotal/quotes/service/QuoteService.java"}, "focal_method": {"identifier": "getQuotes", "parameters": "(String symbols)", "modifiers": "public", "return": "List<Quote>", "body": "public List<Quote> getQuotes(String symbols) {\n\t\tlog.debug(\"retrieving multiple quotes for: \" + symbols);\n\n\t\tIexBatchQuote batchQuotes = restTemplate.getForObject(quotes_url, IexBatchQuote.class, symbols);\n\n\t\tlog.debug(\"Got response: \" + batchQuotes);\n\t\tfinal List<Quote> quotes = new ArrayList<>();\n\n\t\tArrays.asList(symbols.split(\",\")).forEach(symbol -> {\n\t\t\tif(batchQuotes.containsKey(symbol)) {\n\t\t\t\tquotes.add(QuoteMapper.INSTANCE.mapFromIexQuote(batchQuotes.get(symbol).get(\"quote\")));\n\t\t\t} else {\n\t\t\t\tlog.warn(\"Quote could not be found for the following symbol: \" + symbol);\n\t\t\t\tQuote quote = new Quote();\n\t\t\t\tquote.setSymbol(symbol);\n\t\t\t\tquote.setStatus(\"FAILED\");\n\t\t\t\tquotes.add(quote);\n\t\t\t}\n\t\t});\n\n\t\treturn quotes;\n\t}", "signature": "List<Quote> getQuotes(String symbols)", "full_signature": "public List<Quote> getQuotes(String symbols)", "class_method_signature": "QuoteService.getQuotes(String symbols)", "testcase": false, "constructor": false, "invocations": ["debug", "getForObject", "debug", "forEach", "asList", "split", "containsKey", "add", "mapFromIexQuote", "get", "get", "warn", "setSymbol", "setStatus", "add"]}, "repository": {"repo_id": 143926791, "url": "https://github.com/Pivotal-Field-Engineering/pivotal-bank-demo", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 35, "size": 45556, "license": "licensed"}}