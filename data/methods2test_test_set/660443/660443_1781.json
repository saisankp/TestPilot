{"test_class": {"identifier": "InductiveAtomicHardnessDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/InductiveAtomicHardnessDescriptorTest.java"}, "test_case": {"identifier": "testInductiveAtomicHardnessDescriptor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInductiveAtomicHardnessDescriptor() throws ClassNotFoundException, CDKException,\n            java.lang.Exception {\n        double[] testResult = {1.28};\n\n        Point3d c_coord = new Point3d(1.392, 0.0, 0.0);\n        Point3d f_coord = new Point3d(0.0, 0.0, 0.0);\n        Point3d h1_coord = new Point3d(1.7439615035767404, 1.0558845107302222, 0.0);\n        Point3d h2_coord = new Point3d(1.7439615035767404, -0.5279422553651107, 0.914422809754875);\n        Point3d h3_coord = new Point3d(1.7439615035767402, -0.5279422553651113, -0.9144228097548747);\n\n        IAtomContainer mol = new AtomContainer(); // molecule is CF\n\n        Atom c = new Atom(\"C\");\n        mol.addAtom(c);\n        c.setPoint3d(c_coord);\n\n        Atom f = new Atom(\"F\");\n        mol.addAtom(f);\n        f.setPoint3d(f_coord);\n\n        Atom h1 = new Atom(\"H\");\n        mol.addAtom(h1);\n        h1.setPoint3d(h1_coord);\n\n        Atom h2 = new Atom(\"H\");\n        mol.addAtom(h2);\n        h2.setPoint3d(h2_coord);\n\n        Atom h3 = new Atom(\"H\");\n        mol.addAtom(h3);\n        h3.setPoint3d(h3_coord);\n\n        mol.addBond(0, 1, IBond.Order.SINGLE); // 1\n        mol.addBond(0, 2, IBond.Order.SINGLE); // 1\n        mol.addBond(0, 3, IBond.Order.SINGLE); // 1\n        mol.addBond(0, 4, IBond.Order.SINGLE); // 1\n\n        IAtomicDescriptor descriptor = new InductiveAtomicHardnessDescriptor();\n\n        double retval = ((DoubleResult) descriptor.calculate(mol.getAtom(0), mol).getValue()).doubleValue();\n        Assert.assertEquals(testResult[0], retval, 0.1);\n    }", "signature": "void testInductiveAtomicHardnessDescriptor()", "full_signature": "@Test public void testInductiveAtomicHardnessDescriptor()", "class_method_signature": "InductiveAtomicHardnessDescriptorTest.testInductiveAtomicHardnessDescriptor()", "testcase": true, "constructor": false, "invocations": ["addAtom", "setPoint3d", "addAtom", "setPoint3d", "addAtom", "setPoint3d", "addAtom", "setPoint3d", "addAtom", "setPoint3d", "addBond", "addBond", "addBond", "addBond", "doubleValue", "getValue", "calculate", "getAtom", "assertEquals"]}, "focal_class": {"identifier": "InductiveAtomicHardnessDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "implements IAtomicDescriptor", "fields": [{"original_string": "private static final String[] NAMES   = {\"indAtomHardnesss\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES   = {\"indAtomHardnesss\"}", "var_name": "NAMES"}, {"original_string": "private static ILoggingTool   logger  = LoggingToolFactory\n                                                  .createLoggingTool(InductiveAtomicHardnessDescriptor.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger  = LoggingToolFactory\n                                                  .createLoggingTool(InductiveAtomicHardnessDescriptor.class)", "var_name": "logger"}, {"original_string": "private AtomTypeFactory       factory = null;", "modifier": "private", "type": "AtomTypeFactory", "declarator": "factory = null", "var_name": "factory"}], "methods": [{"identifier": "InductiveAtomicHardnessDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " InductiveAtomicHardnessDescriptor()", "full_signature": "public  InductiveAtomicHardnessDescriptor()", "class_method_signature": "InductiveAtomicHardnessDescriptor.InductiveAtomicHardnessDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "InductiveAtomicHardnessDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "InductiveAtomicHardnessDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "InductiveAtomicHardnessDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "InductiveAtomicHardnessDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "InductiveAtomicHardnessDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "class_method_signature": "InductiveAtomicHardnessDescriptor.calculate(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "calculateSquareDistanceBetweenTwoAtoms", "parameters": "(IAtom atom1, IAtom atom2)", "modifiers": "private", "return": "double", "signature": "double calculateSquareDistanceBetweenTwoAtoms(IAtom atom1, IAtom atom2)", "full_signature": "private double calculateSquareDistanceBetweenTwoAtoms(IAtom atom1, IAtom atom2)", "class_method_signature": "InductiveAtomicHardnessDescriptor.calculateSquareDistanceBetweenTwoAtoms(IAtom atom1, IAtom atom2)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "InductiveAtomicHardnessDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "InductiveAtomicHardnessDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/InductiveAtomicHardnessDescriptor.java"}, "focal_method": {"identifier": "InductiveAtomicHardnessDescriptor", "parameters": "()", "modifiers": "public", "return": "", "body": "public InductiveAtomicHardnessDescriptor() throws IOException, ClassNotFoundException {}", "signature": " InductiveAtomicHardnessDescriptor()", "full_signature": "public  InductiveAtomicHardnessDescriptor()", "class_method_signature": "InductiveAtomicHardnessDescriptor.InductiveAtomicHardnessDescriptor()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}