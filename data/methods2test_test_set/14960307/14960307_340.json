{"test_class": {"identifier": "RoundRobinLoadBalancedListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RoundRobinLoadBalancedListTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RoundRobinLoadBalancedListTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/RoundRobinLoadBalancedListTest.java"}, "test_case": {"identifier": "contains", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void contains() throws Exception {\n        RoundRobinLoadBalancedList<String> list = new RoundRobinLoadBalancedList<String>();\n\n        // add two items\n        list.set(\"Item1\", 1);\n        list.set(\"Item2\", 1);\n\n        Assert.assertEquals(true, list.contains(\"Item1\"));\n        Assert.assertEquals(true, list.contains(\"Item2\"));\n        Assert.assertEquals(false, list.contains(\"Item3\"));\n    }", "signature": "void contains()", "full_signature": "@Test public void contains()", "class_method_signature": "RoundRobinLoadBalancedListTest.contains()", "testcase": true, "constructor": false, "invocations": ["set", "set", "assertEquals", "contains", "assertEquals", "contains", "assertEquals", "contains"]}, "focal_class": {"identifier": "RoundRobinLoadBalancedList", "superclass": "", "interfaces": "implements LoadBalancedList<E>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RoundRobinLoadBalancedList.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RoundRobinLoadBalancedList.class)", "var_name": "logger"}, {"original_string": "private final ArrayList<Node<E>> allItems;", "modifier": "private final", "type": "ArrayList<Node<E>>", "declarator": "allItems", "var_name": "allItems"}, {"original_string": "private final ArrayList<Node<E>> remainingItems;", "modifier": "private final", "type": "ArrayList<Node<E>>", "declarator": "remainingItems", "var_name": "remainingItems"}, {"original_string": "private int currentIndex;", "modifier": "private", "type": "int", "declarator": "currentIndex", "var_name": "currentIndex"}], "methods": [{"identifier": "RoundRobinLoadBalancedList", "parameters": "()", "modifiers": "public", "return": "", "signature": " RoundRobinLoadBalancedList()", "full_signature": "public  RoundRobinLoadBalancedList()", "class_method_signature": "RoundRobinLoadBalancedList.RoundRobinLoadBalancedList()", "testcase": false, "constructor": true}, {"identifier": "getValues", "parameters": "()", "modifiers": "@Override public", "return": "List<Node<E>>", "signature": "List<Node<E>> getValues()", "full_signature": "@Override public List<Node<E>> getValues()", "class_method_signature": "RoundRobinLoadBalancedList.getValues()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "RoundRobinLoadBalancedList.clear()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(E item)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(E item)", "full_signature": "@Override public boolean contains(E item)", "class_method_signature": "RoundRobinLoadBalancedList.contains(E item)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(E item, int weight)", "modifiers": "@Override public", "return": "void", "signature": "void set(E item, int weight)", "full_signature": "@Override public void set(E item, int weight)", "class_method_signature": "RoundRobinLoadBalancedList.set(E item, int weight)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(E item)", "modifiers": "@Override public", "return": "void", "signature": "void remove(E item)", "full_signature": "@Override public void remove(E item)", "class_method_signature": "RoundRobinLoadBalancedList.remove(E item)", "testcase": false, "constructor": false}, {"identifier": "rebuildRemainingItems", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void rebuildRemainingItems()", "full_signature": "protected void rebuildRemainingItems()", "class_method_signature": "RoundRobinLoadBalancedList.rebuildRemainingItems()", "testcase": false, "constructor": false}, {"identifier": "resetCountsAndRebuildRemainingItems", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void resetCountsAndRebuildRemainingItems()", "full_signature": "protected void resetCountsAndRebuildRemainingItems()", "class_method_signature": "RoundRobinLoadBalancedList.resetCountsAndRebuildRemainingItems()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "RoundRobinLoadBalancedList.getSize()", "testcase": false, "constructor": false}, {"identifier": "getRemainingSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRemainingSize()", "full_signature": "public int getRemainingSize()", "class_method_signature": "RoundRobinLoadBalancedList.getRemainingSize()", "testcase": false, "constructor": false}, {"identifier": "getNext", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E getNext()", "full_signature": "@Override public E getNext()", "class_method_signature": "RoundRobinLoadBalancedList.getNext()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RoundRobinLoadBalancedList.toString()", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/RoundRobinLoadBalancedList.java"}, "focal_method": {"identifier": "contains", "parameters": "(E item)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean contains(E item) {\n        Node<E> newNode = new Node<E>(item);\n        return this.allItems.contains(newNode);\n    }", "signature": "boolean contains(E item)", "full_signature": "@Override public boolean contains(E item)", "class_method_signature": "RoundRobinLoadBalancedList.contains(E item)", "testcase": false, "constructor": false, "invocations": ["contains"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}