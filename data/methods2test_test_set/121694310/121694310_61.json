{"test_class": {"identifier": "ModelsTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendse-model/src/test/java/net/sf/opendse/model/ModelsTest.java"}, "test_case": {"identifier": "copyWithLinks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void copyWithLinks() {\n\t\tApplication<Task, Dependency> app = new Application<Task, Dependency>();\n\n\t\tArchitecture<Resource, Link> arch = new Architecture<Resource, Link>();\n\t\tResource resource1 = new Resource(\"r1\");\n\t\tResource resource2 = new Resource(\"r2\");\n\t\tLink link = new Link(\"l\");\n\t\tarch.addVertex(resource1);\n\t\tarch.addVertex(resource2);\n\t\tarch.addEdge(link, resource1, resource2);\n\n\t\tMappings<Task, Resource> mappings = new Mappings<Task, Resource>();\n\n\t\tSpecification spec = new Specification(app, arch, mappings);\n\t\tSpecification spec2 = Models.copy(spec);\n\n\t\tAssert.assertEquals(2, spec2.getArchitecture().getVertexCount());\n\t\tAssert.assertTrue(spec2.getArchitecture().isNeighbor(resource1, resource2));\n\n\t}", "signature": "void copyWithLinks()", "full_signature": "@Test public void copyWithLinks()", "class_method_signature": "ModelsTest.copyWithLinks()", "testcase": true, "constructor": false, "invocations": ["addVertex", "addVertex", "addEdge", "copy", "assertEquals", "getVertexCount", "getArchitecture", "assertTrue", "isNeighbor", "getArchitecture"]}, "focal_class": {"identifier": "Models", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static IsCommunicationPredicate isCommunicationPredicate = new IsCommunicationPredicate();", "modifier": "protected static", "type": "IsCommunicationPredicate", "declarator": "isCommunicationPredicate = new IsCommunicationPredicate()", "var_name": "isCommunicationPredicate"}, {"original_string": "protected static IsProcessPredicate isProcessPredicate = new IsProcessPredicate();", "modifier": "protected static", "type": "IsProcessPredicate", "declarator": "isProcessPredicate = new IsProcessPredicate()", "var_name": "isProcessPredicate"}], "methods": [{"identifier": "filterCommunications", "parameters": "(final Iterable<Task> iterable)", "modifiers": "public static", "return": "Iterable<Task>", "signature": "Iterable<Task> filterCommunications(final Iterable<Task> iterable)", "full_signature": "public static Iterable<Task> filterCommunications(final Iterable<Task> iterable)", "class_method_signature": "Models.filterCommunications(final Iterable<Task> iterable)", "testcase": false, "constructor": false}, {"identifier": "filterProcesses", "parameters": "(final Iterable<Task> iterable)", "modifiers": "public static", "return": "Iterable<Task>", "signature": "Iterable<Task> filterProcesses(final Iterable<Task> iterable)", "full_signature": "public static Iterable<Task> filterProcesses(final Iterable<Task> iterable)", "class_method_signature": "Models.filterProcesses(final Iterable<Task> iterable)", "testcase": false, "constructor": false}, {"identifier": "isProcess", "parameters": "(Task task)", "modifiers": "public static", "return": "boolean", "signature": "boolean isProcess(Task task)", "full_signature": "public static boolean isProcess(Task task)", "class_method_signature": "Models.isProcess(Task task)", "testcase": false, "constructor": false}, {"identifier": "isCommunication", "parameters": "(Task task)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCommunication(Task task)", "full_signature": "public static boolean isCommunication(Task task)", "class_method_signature": "Models.isCommunication(Task task)", "testcase": false, "constructor": false}, {"identifier": "getOutLinks", "parameters": "(Architecture<Resource, Link> architecture, Resource r0)", "modifiers": "public static", "return": "List<DirectedLink>", "signature": "List<DirectedLink> getOutLinks(Architecture<Resource, Link> architecture, Resource r0)", "full_signature": "public static List<DirectedLink> getOutLinks(Architecture<Resource, Link> architecture, Resource r0)", "class_method_signature": "Models.getOutLinks(Architecture<Resource, Link> architecture, Resource r0)", "testcase": false, "constructor": false}, {"identifier": "getInLinks", "parameters": "(Architecture<Resource, Link> architecture, Resource r0)", "modifiers": "public static", "return": "List<DirectedLink>", "signature": "List<DirectedLink> getInLinks(Architecture<Resource, Link> architecture, Resource r0)", "full_signature": "public static List<DirectedLink> getInLinks(Architecture<Resource, Link> architecture, Resource r0)", "class_method_signature": "Models.getInLinks(Architecture<Resource, Link> architecture, Resource r0)", "testcase": false, "constructor": false}, {"identifier": "getLinks", "parameters": "(Architecture<Resource, Link> architecture)", "modifiers": "public static", "return": "List<DirectedLink>", "signature": "List<DirectedLink> getLinks(Architecture<Resource, Link> architecture)", "full_signature": "public static List<DirectedLink> getLinks(Architecture<Resource, Link> architecture)", "class_method_signature": "Models.getLinks(Architecture<Resource, Link> architecture)", "testcase": false, "constructor": false}, {"identifier": "getLinks", "parameters": "(Architecture<Resource, Link> architecture, Link link)", "modifiers": "public static", "return": "List<DirectedLink>", "signature": "List<DirectedLink> getLinks(Architecture<Resource, Link> architecture, Link link)", "full_signature": "public static List<DirectedLink> getLinks(Architecture<Resource, Link> architecture, Link link)", "class_method_signature": "Models.getLinks(Architecture<Resource, Link> architecture, Link link)", "testcase": false, "constructor": false}, {"identifier": "getElementsMap", "parameters": "(Specification specification)", "modifiers": "public static", "return": "Map<String, Element>", "signature": "Map<String, Element> getElementsMap(Specification specification)", "full_signature": "public static Map<String, Element> getElementsMap(Specification specification)", "class_method_signature": "Models.getElementsMap(Specification specification)", "testcase": false, "constructor": false}, {"identifier": "getElements", "parameters": "(Specification specification)", "modifiers": "public static", "return": "Set<Element>", "signature": "Set<Element> getElements(Specification specification)", "full_signature": "public static Set<Element> getElements(Specification specification)", "class_method_signature": "Models.getElements(Specification specification)", "testcase": false, "constructor": false}, {"identifier": "filterType", "parameters": "(final Iterable<E> iterable, final String... types)", "modifiers": "public static", "return": "Iterable<E>", "signature": "Iterable<E> filterType(final Iterable<E> iterable, final String... types)", "full_signature": "public static Iterable<E> filterType(final Iterable<E> iterable, final String... types)", "class_method_signature": "Models.filterType(final Iterable<E> iterable, final String... types)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Specification specification)", "modifiers": "public static", "return": "Specification", "signature": "Specification copy(Specification specification)", "full_signature": "public static Specification copy(Specification specification)", "class_method_signature": "Models.copy(Specification specification)", "testcase": false, "constructor": false}, {"identifier": "copyRoutings", "parameters": "(Application<Task, Dependency> sApplication,\n\t\t\tRoutings<Task, Resource, Link> sRoutings, Application<Task, Dependency> iApplication,\n\t\t\tArchitecture<Resource, Link> iArchitecture)", "modifiers": "public static", "return": "Routings<Task, Resource, Link>", "signature": "Routings<Task, Resource, Link> copyRoutings(Application<Task, Dependency> sApplication,\n\t\t\tRoutings<Task, Resource, Link> sRoutings, Application<Task, Dependency> iApplication,\n\t\t\tArchitecture<Resource, Link> iArchitecture)", "full_signature": "public static Routings<Task, Resource, Link> copyRoutings(Application<Task, Dependency> sApplication,\n\t\t\tRoutings<Task, Resource, Link> sRoutings, Application<Task, Dependency> iApplication,\n\t\t\tArchitecture<Resource, Link> iArchitecture)", "class_method_signature": "Models.copyRoutings(Application<Task, Dependency> sApplication,\n\t\t\tRoutings<Task, Resource, Link> sRoutings, Application<Task, Dependency> iApplication,\n\t\t\tArchitecture<Resource, Link> iArchitecture)", "testcase": false, "constructor": false}, {"identifier": "copyMappings", "parameters": "(Mappings<Task, Resource> sMappings,\n\t\t\tArchitecture<Resource, Link> iArchitecture, Application<Task, Dependency> iApplication)", "modifiers": "public static", "return": "Mappings<Task, Resource>", "signature": "Mappings<Task, Resource> copyMappings(Mappings<Task, Resource> sMappings,\n\t\t\tArchitecture<Resource, Link> iArchitecture, Application<Task, Dependency> iApplication)", "full_signature": "public static Mappings<Task, Resource> copyMappings(Mappings<Task, Resource> sMappings,\n\t\t\tArchitecture<Resource, Link> iArchitecture, Application<Task, Dependency> iApplication)", "class_method_signature": "Models.copyMappings(Mappings<Task, Resource> sMappings,\n\t\t\tArchitecture<Resource, Link> iArchitecture, Application<Task, Dependency> iApplication)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Application<Task, Dependency> sApplication)", "modifiers": "public static", "return": "Application<Task, Dependency>", "signature": "Application<Task, Dependency> copy(Application<Task, Dependency> sApplication)", "full_signature": "public static Application<Task, Dependency> copy(Application<Task, Dependency> sApplication)", "class_method_signature": "Models.copy(Application<Task, Dependency> sApplication)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Architecture<Resource, Link> sArchitecture)", "modifiers": "public static", "return": "Architecture<Resource, Link>", "signature": "Architecture<Resource, Link> copy(Architecture<Resource, Link> sArchitecture)", "full_signature": "public static Architecture<Resource, Link> copy(Architecture<Resource, Link> sArchitecture)", "class_method_signature": "Models.copy(Architecture<Resource, Link> sArchitecture)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Element element)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "E", "signature": "E copy(Element element)", "full_signature": "@SuppressWarnings(\"unchecked\") public static E copy(Element element)", "class_method_signature": "Models.copy(Element element)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Mapping<?, ?> mapping)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "M", "signature": "M copy(Mapping<?, ?> mapping)", "full_signature": "@SuppressWarnings(\"unchecked\") public static M copy(Mapping<?, ?> mapping)", "class_method_signature": "Models.copy(Mapping<?, ?> mapping)", "testcase": false, "constructor": false}, {"identifier": "setAttributes", "parameters": "(IAttributes e, Attributes attributes)", "modifiers": "public static", "return": "void", "signature": "void setAttributes(IAttributes e, Attributes attributes)", "full_signature": "public static void setAttributes(IAttributes e, Attributes attributes)", "class_method_signature": "Models.setAttributes(IAttributes e, Attributes attributes)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(Specification specification)", "modifiers": "public static", "return": "Specification", "signature": "Specification clone(Specification specification)", "full_signature": "public static Specification clone(Specification specification)", "class_method_signature": "Models.clone(Specification specification)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(Application<T, D> sApplication)", "modifiers": "public static", "return": "Application<T, D>", "signature": "Application<T, D> clone(Application<T, D> sApplication)", "full_signature": "public static Application<T, D> clone(Application<T, D> sApplication)", "class_method_signature": "Models.clone(Application<T, D> sApplication)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(Architecture<R, L> sArchitecture)", "modifiers": "public static", "return": "Architecture<R, L>", "signature": "Architecture<R, L> clone(Architecture<R, L> sArchitecture)", "full_signature": "public static Architecture<R, L> clone(Architecture<R, L> sArchitecture)", "class_method_signature": "Models.clone(Architecture<R, L> sArchitecture)", "testcase": false, "constructor": false}, {"identifier": "filterByResources", "parameters": "(Specification specification, Collection<Resource> resources)", "modifiers": "public static", "return": "void", "signature": "void filterByResources(Specification specification, Collection<Resource> resources)", "full_signature": "public static void filterByResources(Specification specification, Collection<Resource> resources)", "class_method_signature": "Models.filterByResources(Specification specification, Collection<Resource> resources)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Specification specification, Collection<Function<Task, Dependency>> functions)", "modifiers": "public static", "return": "void", "signature": "void filter(Specification specification, Collection<Function<Task, Dependency>> functions)", "full_signature": "public static void filter(Specification specification, Collection<Function<Task, Dependency>> functions)", "class_method_signature": "Models.filter(Specification specification, Collection<Function<Task, Dependency>> functions)", "testcase": false, "constructor": false}, {"identifier": "filterByFunctionName", "parameters": "(Specification specification, Collection<String> functions)", "modifiers": "public static", "return": "void", "signature": "void filterByFunctionName(Specification specification, Collection<String> functions)", "full_signature": "public static void filterByFunctionName(Specification specification, Collection<String> functions)", "class_method_signature": "Models.filterByFunctionName(Specification specification, Collection<String> functions)", "testcase": false, "constructor": false}, {"identifier": "filterByFunctionName", "parameters": "(Specification specification, String... functions)", "modifiers": "public static", "return": "void", "signature": "void filterByFunctionName(Specification specification, String... functions)", "full_signature": "public static void filterByFunctionName(Specification specification, String... functions)", "class_method_signature": "Models.filterByFunctionName(Specification specification, String... functions)", "testcase": false, "constructor": false}], "file": "opendse-model/src/main/java/net/sf/opendse/model/Models.java"}, "focal_method": {"identifier": "copy", "parameters": "(Specification specification)", "modifiers": "public static", "return": "Specification", "body": "public static Specification copy(Specification specification) {\n\t\tArchitecture<Resource, Link> sArchitecture = specification.getArchitecture();\n\t\tApplication<Task, Dependency> sApplication = specification.getApplication();\n\t\tMappings<Task, Resource> sMappings = specification.getMappings();\n\t\tRoutings<Task, Resource, Link> sRoutings = specification.getRoutings();\n\n\t\tArchitecture<Resource, Link> iArchitecture = copy(sArchitecture);\n\t\tApplication<Task, Dependency> iApplication = copy(sApplication);\n\t\tMappings<Task, Resource> iMappings = copyMappings(sMappings, iArchitecture, iApplication);\n\t\tRoutings<Task, Resource, Link> iRoutings = copyRoutings(sApplication, sRoutings, iApplication, iArchitecture);\n\n\t\treturn new Specification(iApplication, iArchitecture, iMappings, iRoutings);\n\t}", "signature": "Specification copy(Specification specification)", "full_signature": "public static Specification copy(Specification specification)", "class_method_signature": "Models.copy(Specification specification)", "testcase": false, "constructor": false, "invocations": ["getArchitecture", "getApplication", "getMappings", "getRoutings", "copy", "copy", "copyMappings", "copyRoutings"]}, "repository": {"repo_id": 121694310, "url": "https://github.com/felixreimann/opendse", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 7, "size": 2024, "license": "licensed"}}