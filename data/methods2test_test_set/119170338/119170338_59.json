{"test_class": {"identifier": "HpoAssociationParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HpoAssociationParser parser;", "modifier": "private", "type": "HpoAssociationParser", "declarator": "parser", "var_name": "parser"}], "file": "phenol-annotations/src/test/java/org/monarchinitiative/phenol/annotations/assoc/HpoAssociationParserTest.java"}, "test_case": {"identifier": "testGeneIdToGeneSymbol", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testGeneIdToGeneSymbol(){\n    Map<TermId, String> geneMap = parser.getGeneIdToSymbolMap();\n    assertEquals(geneMap.get(TermId.of(\"NCBIGene:2690\")),\"GHR\");\n    assertEquals(geneMap.get(TermId.of(\"NCBIGene:2200\")),\"FBN1\");\n  }", "signature": "void testGeneIdToGeneSymbol()", "full_signature": "@Test void testGeneIdToGeneSymbol()", "class_method_signature": "HpoAssociationParserTest.testGeneIdToGeneSymbol()", "testcase": true, "constructor": false, "invocations": ["getGeneIdToSymbolMap", "assertEquals", "get", "of", "assertEquals", "get", "of"]}, "focal_class": {"identifier": "HpoAssociationParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Ontology hpoOntology;", "modifier": "private final", "type": "Ontology", "declarator": "hpoOntology", "var_name": "hpoOntology"}, {"original_string": "private final File homoSapiensGeneInfoFile;", "modifier": "private final", "type": "File", "declarator": "homoSapiensGeneInfoFile", "var_name": "homoSapiensGeneInfoFile"}, {"original_string": "private final File mim2geneMedgenFile;", "modifier": "private final", "type": "File", "declarator": "mim2geneMedgenFile", "var_name": "mim2geneMedgenFile"}, {"original_string": "private final File orphaToGeneFile;", "modifier": "private final", "type": "File", "declarator": "orphaToGeneFile", "var_name": "orphaToGeneFile"}, {"original_string": "private final File phenotypeDotHpoaFile;", "modifier": "private final", "type": "File", "declarator": "phenotypeDotHpoaFile", "var_name": "phenotypeDotHpoaFile"}, {"original_string": "private Map<TermId, String> geneIdToSymbolMap;", "modifier": "private", "type": "Map<TermId, String>", "declarator": "geneIdToSymbolMap", "var_name": "geneIdToSymbolMap"}, {"original_string": "private ImmutableMultimap<TermId,TermId> diseaseToGeneMap;", "modifier": "private", "type": "ImmutableMultimap<TermId,TermId>", "declarator": "diseaseToGeneMap", "var_name": "diseaseToGeneMap"}, {"original_string": "private ImmutableMultimap<TermId,TermId> geneToDiseaseMap;", "modifier": "private", "type": "ImmutableMultimap<TermId,TermId>", "declarator": "geneToDiseaseMap", "var_name": "geneToDiseaseMap"}, {"original_string": "private ImmutableMap<TermId, DiseaseToGeneAssociation> diseaseToAssociationsMap;", "modifier": "private", "type": "ImmutableMap<TermId, DiseaseToGeneAssociation>", "declarator": "diseaseToAssociationsMap", "var_name": "diseaseToAssociationsMap"}, {"original_string": "private ImmutableList<HpoGeneAnnotation> phenotypeToGeneList;", "modifier": "private", "type": "ImmutableList<HpoGeneAnnotation>", "declarator": "phenotypeToGeneList", "var_name": "phenotypeToGeneList"}, {"original_string": "private List<DiseaseToGeneAssociation> associationList;", "modifier": "private", "type": "List<DiseaseToGeneAssociation>", "declarator": "associationList", "var_name": "associationList"}], "methods": [{"identifier": "HpoAssociationParser", "parameters": "(String geneInfoPath,\n                              String mim2geneMedgenPath,\n                              String orphaToGenePath,\n                              String phenotypeHpoaPath,\n                              Ontology hpoOntology)", "modifiers": "public", "return": "", "signature": " HpoAssociationParser(String geneInfoPath,\n                              String mim2geneMedgenPath,\n                              String orphaToGenePath,\n                              String phenotypeHpoaPath,\n                              Ontology hpoOntology)", "full_signature": "public  HpoAssociationParser(String geneInfoPath,\n                              String mim2geneMedgenPath,\n                              String orphaToGenePath,\n                              String phenotypeHpoaPath,\n                              Ontology hpoOntology)", "class_method_signature": "HpoAssociationParser.HpoAssociationParser(String geneInfoPath,\n                              String mim2geneMedgenPath,\n                              String orphaToGenePath,\n                              String phenotypeHpoaPath,\n                              Ontology hpoOntology)", "testcase": false, "constructor": true}, {"identifier": "HpoAssociationParser", "parameters": "(String geneInfoPath, String mim2geneMedgenPath, Ontology hpoOntology)", "modifiers": "public", "return": "", "signature": " HpoAssociationParser(String geneInfoPath, String mim2geneMedgenPath, Ontology hpoOntology)", "full_signature": "public  HpoAssociationParser(String geneInfoPath, String mim2geneMedgenPath, Ontology hpoOntology)", "class_method_signature": "HpoAssociationParser.HpoAssociationParser(String geneInfoPath, String mim2geneMedgenPath, Ontology hpoOntology)", "testcase": false, "constructor": true}, {"identifier": "HpoAssociationParser", "parameters": "(File geneInfoFile,\n                              File mim2geneMedgenFile,\n                              File orphaToGeneFile,\n                              File phenotypeHpoaFile,\n                              Ontology hpoOntology)", "modifiers": "public", "return": "", "signature": " HpoAssociationParser(File geneInfoFile,\n                              File mim2geneMedgenFile,\n                              File orphaToGeneFile,\n                              File phenotypeHpoaFile,\n                              Ontology hpoOntology)", "full_signature": "public  HpoAssociationParser(File geneInfoFile,\n                              File mim2geneMedgenFile,\n                              File orphaToGeneFile,\n                              File phenotypeHpoaFile,\n                              Ontology hpoOntology)", "class_method_signature": "HpoAssociationParser.HpoAssociationParser(File geneInfoFile,\n                              File mim2geneMedgenFile,\n                              File orphaToGeneFile,\n                              File phenotypeHpoaFile,\n                              Ontology hpoOntology)", "testcase": false, "constructor": true}, {"identifier": "ingestPhenotypeHpoaFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ingestPhenotypeHpoaFile()", "full_signature": "private void ingestPhenotypeHpoaFile()", "class_method_signature": "HpoAssociationParser.ingestPhenotypeHpoaFile()", "testcase": false, "constructor": false}, {"identifier": "getDiseaseToAssociationsMap", "parameters": "()", "modifiers": "public", "return": "Map<TermId,DiseaseToGeneAssociation>", "signature": "Map<TermId,DiseaseToGeneAssociation> getDiseaseToAssociationsMap()", "full_signature": "public Map<TermId,DiseaseToGeneAssociation> getDiseaseToAssociationsMap()", "class_method_signature": "HpoAssociationParser.getDiseaseToAssociationsMap()", "testcase": false, "constructor": false}, {"identifier": "getGeneIdToSymbolMap", "parameters": "()", "modifiers": "public", "return": "Map<TermId,String>", "signature": "Map<TermId,String> getGeneIdToSymbolMap()", "full_signature": "public Map<TermId,String> getGeneIdToSymbolMap()", "class_method_signature": "HpoAssociationParser.getGeneIdToSymbolMap()", "testcase": false, "constructor": false}, {"identifier": "getDiseaseToGeneIdMap", "parameters": "()", "modifiers": "public", "return": "Multimap<TermId,TermId>", "signature": "Multimap<TermId,TermId> getDiseaseToGeneIdMap()", "full_signature": "public Multimap<TermId,TermId> getDiseaseToGeneIdMap()", "class_method_signature": "HpoAssociationParser.getDiseaseToGeneIdMap()", "testcase": false, "constructor": false}, {"identifier": "getGeneToDiseaseIdMap", "parameters": "()", "modifiers": "public", "return": "Multimap<TermId,TermId>", "signature": "Multimap<TermId,TermId> getGeneToDiseaseIdMap()", "full_signature": "public Multimap<TermId,TermId> getGeneToDiseaseIdMap()", "class_method_signature": "HpoAssociationParser.getGeneToDiseaseIdMap()", "testcase": false, "constructor": false}, {"identifier": "getPhenotypeToGene", "parameters": "()", "modifiers": "public", "return": "List<HpoGeneAnnotation>", "signature": "List<HpoGeneAnnotation> getPhenotypeToGene()", "full_signature": "public List<HpoGeneAnnotation> getPhenotypeToGene()", "class_method_signature": "HpoAssociationParser.getPhenotypeToGene()", "testcase": false, "constructor": false}, {"identifier": "setTermToGene", "parameters": "(Multimap<TermId, TermId> phenotypeToDisease)", "modifiers": "public", "return": "void", "signature": "void setTermToGene(Multimap<TermId, TermId> phenotypeToDisease)", "full_signature": "public void setTermToGene(Multimap<TermId, TermId> phenotypeToDisease)", "class_method_signature": "HpoAssociationParser.setTermToGene(Multimap<TermId, TermId> phenotypeToDisease)", "testcase": false, "constructor": false}, {"identifier": "setAssociationMaps", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setAssociationMaps()", "full_signature": "private void setAssociationMaps()", "class_method_signature": "HpoAssociationParser.setAssociationMaps()", "testcase": false, "constructor": false}, {"identifier": "ingestDisease2GeneAssociations", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ingestDisease2GeneAssociations()", "full_signature": "private void ingestDisease2GeneAssociations()", "class_method_signature": "HpoAssociationParser.ingestDisease2GeneAssociations()", "testcase": false, "constructor": false}], "file": "phenol-annotations/src/main/java/org/monarchinitiative/phenol/annotations/assoc/HpoAssociationParser.java"}, "focal_method": {"identifier": "getGeneIdToSymbolMap", "parameters": "()", "modifiers": "public", "return": "Map<TermId,String>", "body": "public Map<TermId,String> getGeneIdToSymbolMap() { return this.geneIdToSymbolMap;}", "signature": "Map<TermId,String> getGeneIdToSymbolMap()", "full_signature": "public Map<TermId,String> getGeneIdToSymbolMap()", "class_method_signature": "HpoAssociationParser.getGeneIdToSymbolMap()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}