{"test_class": {"identifier": "MergeModificationTest", "superclass": "extends AbstractModificationTest", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/modification/MergeModificationTest.java"}, "test_case": {"identifier": "testApply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApply() throws Exception {\n        //TODO : Need to write a better test for this\n\n        //Write something into the datastore\n        DOMStoreReadWriteTransaction writeTransaction = store.newReadWriteTransaction();\n        MergeModification writeModification = new MergeModification(TestModel.TEST_PATH,\n                ImmutableNodes.containerNode(TestModel.TEST_QNAME));\n        writeModification.apply(writeTransaction);\n        commitTransaction(writeTransaction);\n\n        //Check if it's in the datastore\n        Optional<NormalizedNode<?,?>> data = readData(TestModel.TEST_PATH);\n        Assert.assertTrue(data.isPresent());\n\n    }", "signature": "void testApply()", "full_signature": "@Test public void testApply()", "class_method_signature": "MergeModificationTest.testApply()", "testcase": true, "constructor": false, "invocations": ["newReadWriteTransaction", "containerNode", "apply", "commitTransaction", "readData", "assertTrue", "isPresent"]}, "focal_class": {"identifier": "MergeModification", "superclass": "extends WriteModification", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "MergeModification", "parameters": "()", "modifiers": "public", "return": "", "signature": " MergeModification()", "full_signature": "public  MergeModification()", "class_method_signature": "MergeModification.MergeModification()", "testcase": false, "constructor": true}, {"identifier": "MergeModification", "parameters": "(final short version)", "modifiers": "public", "return": "", "signature": " MergeModification(final short version)", "full_signature": "public  MergeModification(final short version)", "class_method_signature": "MergeModification.MergeModification(final short version)", "testcase": false, "constructor": true}, {"identifier": "MergeModification", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "public", "return": "", "signature": " MergeModification(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "public  MergeModification(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "MergeModification.MergeModification(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": true}, {"identifier": "MergeModification", "parameters": "(final short version, final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "", "return": "", "signature": " MergeModification(final short version, final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "  MergeModification(final short version, final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "MergeModification.MergeModification(final short version, final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(final DOMStoreWriteTransaction transaction)", "modifiers": "@Override public", "return": "void", "signature": "void apply(final DOMStoreWriteTransaction transaction)", "full_signature": "@Override public void apply(final DOMStoreWriteTransaction transaction)", "class_method_signature": "MergeModification.apply(final DOMStoreWriteTransaction transaction)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final DataTreeModification transaction)", "modifiers": "@Override public", "return": "void", "signature": "void apply(final DataTreeModification transaction)", "full_signature": "@Override public void apply(final DataTreeModification transaction)", "class_method_signature": "MergeModification.apply(final DataTreeModification transaction)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "byte", "signature": "byte getType()", "full_signature": "@Override public byte getType()", "class_method_signature": "MergeModification.getType()", "testcase": false, "constructor": false}, {"identifier": "fromStream", "parameters": "(final NormalizedNodeDataInput in, final short version,\n            final ReusableStreamReceiver receiver)", "modifiers": "public static", "return": "MergeModification", "signature": "MergeModification fromStream(final NormalizedNodeDataInput in, final short version,\n            final ReusableStreamReceiver receiver)", "full_signature": "public static MergeModification fromStream(final NormalizedNodeDataInput in, final short version,\n            final ReusableStreamReceiver receiver)", "class_method_signature": "MergeModification.fromStream(final NormalizedNodeDataInput in, final short version,\n            final ReusableStreamReceiver receiver)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/modification/MergeModification.java"}, "focal_method": {"identifier": "apply", "parameters": "(final DOMStoreWriteTransaction transaction)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void apply(final DOMStoreWriteTransaction transaction) {\n        transaction.merge(getPath(), getData());\n    }", "signature": "void apply(final DOMStoreWriteTransaction transaction)", "full_signature": "@Override public void apply(final DOMStoreWriteTransaction transaction)", "class_method_signature": "MergeModification.apply(final DOMStoreWriteTransaction transaction)", "testcase": false, "constructor": false, "invocations": ["merge", "getPath", "getData"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}