{"test_class": {"identifier": "UserAuthFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock ContainerRequest request;", "modifier": "@Mock", "type": "ContainerRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock CookieAuthenticator cookieAuthenticator;", "modifier": "@Mock", "type": "CookieAuthenticator", "declarator": "cookieAuthenticator", "var_name": "cookieAuthenticator"}, {"original_string": "Map<String, Cookie> cookies;", "modifier": "", "type": "Map<String, Cookie>", "declarator": "cookies", "var_name": "cookies"}, {"original_string": "UserAuthFactory factory;", "modifier": "", "type": "UserAuthFactory", "declarator": "factory", "var_name": "factory"}], "file": "server/src/test/java/keywhiz/service/providers/UserAuthFactoryTest.java"}, "test_case": {"identifier": "invalidSessionCookie", "parameters": "()", "modifiers": "@Test(expected = NotAuthorizedException.class) public", "return": "void", "body": "@Test(expected = NotAuthorizedException.class)\n  public void invalidSessionCookie() throws Exception {\n    Cookie badSessionCookie = new Cookie(\"session\", \"bad-value\");\n    cookies.put(badSessionCookie.getName(), badSessionCookie);\n\n    when(cookieAuthenticator.authenticate(badSessionCookie)).thenReturn(Optional.empty());\n\n    factory.provide(request);\n  }", "signature": "void invalidSessionCookie()", "full_signature": "@Test(expected = NotAuthorizedException.class) public void invalidSessionCookie()", "class_method_signature": "UserAuthFactoryTest.invalidSessionCookie()", "testcase": true, "constructor": false, "invocations": ["put", "getName", "thenReturn", "when", "authenticate", "empty", "provide"]}, "focal_class": {"identifier": "UserAuthFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(UserAuthFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(UserAuthFactory.class)", "var_name": "logger"}, {"original_string": "private final Authenticator<Cookie, User> authenticator;", "modifier": "private final", "type": "Authenticator<Cookie, User>", "declarator": "authenticator", "var_name": "authenticator"}, {"original_string": "private final String sessionCookieName;", "modifier": "private final", "type": "String", "declarator": "sessionCookieName", "var_name": "sessionCookieName"}], "methods": [{"identifier": "UserAuthFactory", "parameters": "(CookieAuthenticator cookieAuthenticator,\n      @SessionCookie CookieConfig cookieConfig)", "modifiers": "@Inject public", "return": "", "signature": " UserAuthFactory(CookieAuthenticator cookieAuthenticator,\n      @SessionCookie CookieConfig cookieConfig)", "full_signature": "@Inject public  UserAuthFactory(CookieAuthenticator cookieAuthenticator,\n      @SessionCookie CookieConfig cookieConfig)", "class_method_signature": "UserAuthFactory.UserAuthFactory(CookieAuthenticator cookieAuthenticator,\n      @SessionCookie CookieConfig cookieConfig)", "testcase": false, "constructor": true}, {"identifier": "provide", "parameters": "(ContainerRequest request)", "modifiers": "public", "return": "User", "signature": "User provide(ContainerRequest request)", "full_signature": "public User provide(ContainerRequest request)", "class_method_signature": "UserAuthFactory.provide(ContainerRequest request)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/providers/UserAuthFactory.java"}, "focal_method": {"identifier": "provide", "parameters": "(ContainerRequest request)", "modifiers": "public", "return": "User", "body": "public User provide(ContainerRequest request) {\n    Cookie sessionCookie = request.getCookies().get(sessionCookieName);\n    if (sessionCookie == null) {\n      logger.warn(\"No session cookie in request.\");\n      throw new NotAuthorizedException(\"Bad session\");\n    }\n\n    try {\n      return authenticator.authenticate(sessionCookie)\n          .orElseThrow(() -> new NotAuthorizedException(\"Bad session\"));\n    } catch (AuthenticationException e) {\n      throw Throwables.propagate(e);\n    }\n  }", "signature": "User provide(ContainerRequest request)", "full_signature": "public User provide(ContainerRequest request)", "class_method_signature": "UserAuthFactory.provide(ContainerRequest request)", "testcase": false, "constructor": false, "invocations": ["get", "getCookies", "warn", "orElseThrow", "authenticate", "propagate"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}