{"test_class": {"identifier": "UserServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@MockBean\n    private UserRepository userRepository;", "modifier": "@MockBean\n    private", "type": "UserRepository", "declarator": "userRepository", "var_name": "userRepository"}, {"original_string": "private UserService userService;", "modifier": "private", "type": "UserService", "declarator": "userService", "var_name": "userService"}], "file": "Chapter02/spring-boot-2-web-app/src/test/java/com/packtpub/springboot2webapp/service/UserServiceTest.java"}, "test_case": {"identifier": "getAllCommentsForToday_HappyPath_ShouldReturn1Comment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAllCommentsForToday_HappyPath_ShouldReturn1Comment() {\n        // Given\n        User user = new User();\n        user.setUsername(\"shazin\");\n        user.setPassword(\"sha908\");\n        user.setRole(\"USER\");\n\n        when(userRepository.findByUsername(\"shazin\")).thenReturn(user);\n\n        // When\n        UserDetails actual = userService.loadUserByUsername(\"shazin\");\n\n        // Then\n        verify(userRepository, times(1)).findByUsername(\"shazin\");\n    }", "signature": "void getAllCommentsForToday_HappyPath_ShouldReturn1Comment()", "full_signature": "@Test public void getAllCommentsForToday_HappyPath_ShouldReturn1Comment()", "class_method_signature": "UserServiceTest.getAllCommentsForToday_HappyPath_ShouldReturn1Comment()", "testcase": true, "constructor": false, "invocations": ["setUsername", "setPassword", "setRole", "thenReturn", "when", "findByUsername", "loadUserByUsername", "findByUsername", "verify", "times"]}, "focal_class": {"identifier": "UserService", "superclass": "", "interfaces": "implements UserDetailsService", "fields": [{"original_string": "private final UserRepository userRepository;", "modifier": "private final", "type": "UserRepository", "declarator": "userRepository", "var_name": "userRepository"}], "methods": [{"identifier": "UserService", "parameters": "(UserRepository userRepository)", "modifiers": "public", "return": "", "signature": " UserService(UserRepository userRepository)", "full_signature": "public  UserService(UserRepository userRepository)", "class_method_signature": "UserService.UserService(UserRepository userRepository)", "testcase": false, "constructor": true}, {"identifier": "loadUserByUsername", "parameters": "(String username)", "modifiers": "@Override public", "return": "UserDetails", "signature": "UserDetails loadUserByUsername(String username)", "full_signature": "@Override public UserDetails loadUserByUsername(String username)", "class_method_signature": "UserService.loadUserByUsername(String username)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(User user)", "modifiers": "@Transactional(rollbackFor = Exception.class) public", "return": "User", "signature": "User create(User user)", "full_signature": "@Transactional(rollbackFor = Exception.class) public User create(User user)", "class_method_signature": "UserService.create(User user)", "testcase": false, "constructor": false}], "file": "Chapter02/spring-boot-2-web-app/src/main/java/com/packtpub/springboot2webapp/service/UserService.java"}, "focal_method": {"identifier": "loadUserByUsername", "parameters": "(String username)", "modifiers": "@Override public", "return": "UserDetails", "body": "@Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.findByUsername(username);\n\n        if(user == null) {\n            throw new UsernameNotFoundException(username);\n        }\n\n        return new org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(), Arrays.asList(new SimpleGrantedAuthority(user.getRole())));\n    }", "signature": "UserDetails loadUserByUsername(String username)", "full_signature": "@Override public UserDetails loadUserByUsername(String username)", "class_method_signature": "UserService.loadUserByUsername(String username)", "testcase": false, "constructor": false, "invocations": ["findByUsername", "getUsername", "getPassword", "asList", "getRole"]}, "repository": {"repo_id": 125030262, "url": "https://github.com/PacktPublishing/Spring-Boot-2.0-Projects", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 60, "size": 1848, "license": "licensed"}}