{"test_class": {"identifier": "SecurityRoleFunctionDaoHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Mock\n    private SecurityRoleFunctionDao securityRoleFunctionDao;", "modifier": "@Mock\n    private", "type": "SecurityRoleFunctionDao", "declarator": "securityRoleFunctionDao", "var_name": "securityRoleFunctionDao"}, {"original_string": "@InjectMocks\n    private SecurityRoleFunctionDaoHelper securityRoleFunctionDaoHelper = new SecurityRoleFunctionDaoHelper();", "modifier": "@InjectMocks\n    private", "type": "SecurityRoleFunctionDaoHelper", "declarator": "securityRoleFunctionDaoHelper = new SecurityRoleFunctionDaoHelper()", "var_name": "securityRoleFunctionDaoHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/SecurityRoleFunctionDaoHelperTest.java"}, "test_case": {"identifier": "testGetSecurityRoleFunctionEntitySecurityRoleFunctionNoExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSecurityRoleFunctionEntitySecurityRoleFunctionNoExists()\n    {\n        // Create a security role to function mapping key.\n        SecurityRoleFunctionKey securityRoleFunctionKey = new SecurityRoleFunctionKey(SECURITY_ROLE, SECURITY_FUNCTION);\n\n        // Mock the external calls.\n        when(securityRoleFunctionDao.getSecurityRoleFunctionByKey(securityRoleFunctionKey)).thenReturn(null);\n\n        // Specify the expected exception.\n        expectedException.expect(ObjectNotFoundException.class);\n        expectedException.expectMessage(String\n            .format(\"Security role to function mapping with \\\"%s\\\" security role name and \\\"%s\\\" security function name doesn't exist.\", SECURITY_ROLE,\n                SECURITY_FUNCTION));\n\n        // Call the method under test.\n        securityRoleFunctionDaoHelper.getSecurityRoleFunctionEntity(securityRoleFunctionKey);\n\n        // Verify the external calls.\n        verify(securityRoleFunctionDao).getSecurityRoleFunctionByKey(securityRoleFunctionKey);\n        verifyNoMoreInteractionsHelper();\n    }", "signature": "void testGetSecurityRoleFunctionEntitySecurityRoleFunctionNoExists()", "full_signature": "@Test public void testGetSecurityRoleFunctionEntitySecurityRoleFunctionNoExists()", "class_method_signature": "SecurityRoleFunctionDaoHelperTest.testGetSecurityRoleFunctionEntitySecurityRoleFunctionNoExists()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getSecurityRoleFunctionByKey", "expect", "expectMessage", "format", "getSecurityRoleFunctionEntity", "getSecurityRoleFunctionByKey", "verify", "verifyNoMoreInteractionsHelper"]}, "focal_class": {"identifier": "SecurityRoleFunctionDaoHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SecurityRoleFunctionDao securityRoleFunctionDao;", "modifier": "@Autowired\n    private", "type": "SecurityRoleFunctionDao", "declarator": "securityRoleFunctionDao", "var_name": "securityRoleFunctionDao"}], "methods": [{"identifier": "getSecurityRoleFunctionEntity", "parameters": "(SecurityRoleFunctionKey securityRoleFunctionKey)", "modifiers": "public", "return": "SecurityRoleFunctionEntity", "signature": "SecurityRoleFunctionEntity getSecurityRoleFunctionEntity(SecurityRoleFunctionKey securityRoleFunctionKey)", "full_signature": "public SecurityRoleFunctionEntity getSecurityRoleFunctionEntity(SecurityRoleFunctionKey securityRoleFunctionKey)", "class_method_signature": "SecurityRoleFunctionDaoHelper.getSecurityRoleFunctionEntity(SecurityRoleFunctionKey securityRoleFunctionKey)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/SecurityRoleFunctionDaoHelper.java"}, "focal_method": {"identifier": "getSecurityRoleFunctionEntity", "parameters": "(SecurityRoleFunctionKey securityRoleFunctionKey)", "modifiers": "public", "return": "SecurityRoleFunctionEntity", "body": "public SecurityRoleFunctionEntity getSecurityRoleFunctionEntity(SecurityRoleFunctionKey securityRoleFunctionKey)\n    {\n        SecurityRoleFunctionEntity securityRoleFunctionEntity = securityRoleFunctionDao.getSecurityRoleFunctionByKey(securityRoleFunctionKey);\n\n        if (securityRoleFunctionEntity == null)\n        {\n            throw new ObjectNotFoundException(String\n                .format(\"Security role to function mapping with \\\"%s\\\" security role name and \\\"%s\\\" security function name doesn't exist.\",\n                    securityRoleFunctionKey.getSecurityRoleName(), securityRoleFunctionKey.getSecurityFunctionName()));\n        }\n\n        return securityRoleFunctionEntity;\n    }", "signature": "SecurityRoleFunctionEntity getSecurityRoleFunctionEntity(SecurityRoleFunctionKey securityRoleFunctionKey)", "full_signature": "public SecurityRoleFunctionEntity getSecurityRoleFunctionEntity(SecurityRoleFunctionKey securityRoleFunctionKey)", "class_method_signature": "SecurityRoleFunctionDaoHelper.getSecurityRoleFunctionEntity(SecurityRoleFunctionKey securityRoleFunctionKey)", "testcase": false, "constructor": false, "invocations": ["getSecurityRoleFunctionByKey", "format", "getSecurityRoleName", "getSecurityFunctionName"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}