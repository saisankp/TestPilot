{"test_class": {"identifier": "TestBucketPath", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final TimeZone CUSTOM_TIMEZONE = new SimpleTimeZone(1, \"custom-timezone\");", "modifier": "private static final", "type": "TimeZone", "declarator": "CUSTOM_TIMEZONE = new SimpleTimeZone(1, \"custom-timezone\")", "var_name": "CUSTOM_TIMEZONE"}, {"original_string": "private Calendar cal;", "modifier": "private", "type": "Calendar", "declarator": "cal", "var_name": "cal"}, {"original_string": "private Map<String, String> headers;", "modifier": "private", "type": "Map<String, String>", "declarator": "headers", "var_name": "headers"}, {"original_string": "private Map<String, String> headersWithTimeZone;", "modifier": "private", "type": "Map<String, String>", "declarator": "headersWithTimeZone", "var_name": "headersWithTimeZone"}], "file": "flume-ng-core/src/test/java/org/apache/flume/formatter/output/TestBucketPath.java"}, "test_case": {"identifier": "testStaticEscapeStringsNoKey", "parameters": "()", "modifiers": "@Test (expected = RuntimeException.class) public", "return": "void", "body": "@Test (expected = RuntimeException.class)\n  public void testStaticEscapeStringsNoKey() {\n    Map<String, String> staticStrings;\n    staticStrings = new HashMap<>();\n\n    TimeZone utcTimeZone = TimeZone.getTimeZone(\"UTC\");\n    String filePath = \"%[abcdefg]/%[IP]/%[FQDN]\";\n    String realPath = BucketPath.escapeString(filePath, headers,\n            utcTimeZone, false, Calendar.HOUR_OF_DAY, 12, false);\n  }", "signature": "void testStaticEscapeStringsNoKey()", "full_signature": "@Test (expected = RuntimeException.class) public void testStaticEscapeStringsNoKey()", "class_method_signature": "TestBucketPath.testStaticEscapeStringsNoKey()", "testcase": true, "constructor": false, "invocations": ["getTimeZone", "escapeString"]}, "focal_class": {"identifier": "BucketPath", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TAG_REGEX = \"%(\\\\w|%)|%\\\\{([\\\\w\\\\.-]+)\\\\}|%\\\\[(\\\\w+)\\\\]\";", "modifier": "public static final", "type": "String", "declarator": "TAG_REGEX = \"%(\\\\w|%)|%\\\\{([\\\\w\\\\.-]+)\\\\}|%\\\\[(\\\\w+)\\\\]\"", "var_name": "TAG_REGEX"}, {"original_string": "public static final Pattern tagPattern = Pattern.compile(TAG_REGEX);", "modifier": "public static final", "type": "Pattern", "declarator": "tagPattern = Pattern.compile(TAG_REGEX)", "var_name": "tagPattern"}, {"original_string": "private static Clock clock = new SystemClock();", "modifier": "private static", "type": "Clock", "declarator": "clock = new SystemClock()", "var_name": "clock"}, {"original_string": "protected static final ThreadLocal<HashMap<String, SimpleDateFormat>> simpleDateFormatCache =\n      new ThreadLocal<HashMap<String, SimpleDateFormat>>() {\n\n        @Override\n        protected HashMap<String, SimpleDateFormat> initialValue() {\n          return new HashMap<String, SimpleDateFormat>();\n        }\n      };", "modifier": "protected static final", "type": "ThreadLocal<HashMap<String, SimpleDateFormat>>", "declarator": "simpleDateFormatCache =\n      new ThreadLocal<HashMap<String, SimpleDateFormat>>() {\n\n        @Override\n        protected HashMap<String, SimpleDateFormat> initialValue() {\n          return new HashMap<String, SimpleDateFormat>();\n        }\n      }", "var_name": "simpleDateFormatCache"}], "methods": [{"identifier": "containsTag", "parameters": "(String in)", "modifiers": "@VisibleForTesting @Deprecated public static", "return": "boolean", "signature": "boolean containsTag(String in)", "full_signature": "@VisibleForTesting @Deprecated public static boolean containsTag(String in)", "class_method_signature": "BucketPath.containsTag(String in)", "testcase": false, "constructor": false}, {"identifier": "expandShorthand", "parameters": "(char c)", "modifiers": "@VisibleForTesting @Deprecated public static", "return": "String", "signature": "String expandShorthand(char c)", "full_signature": "@VisibleForTesting @Deprecated public static String expandShorthand(char c)", "class_method_signature": "BucketPath.expandShorthand(char c)", "testcase": false, "constructor": false}, {"identifier": "replaceShorthand", "parameters": "(char c, Map<String, String> headers)", "modifiers": "@VisibleForTesting @Deprecated public static", "return": "String", "signature": "String replaceShorthand(char c, Map<String, String> headers)", "full_signature": "@VisibleForTesting @Deprecated public static String replaceShorthand(char c, Map<String, String> headers)", "class_method_signature": "BucketPath.replaceShorthand(char c, Map<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "replaceShorthand", "parameters": "(char c, Map<String, String> headers,\n      boolean needRounding, int unit, int roundDown)", "modifiers": "@VisibleForTesting @Deprecated public static", "return": "String", "signature": "String replaceShorthand(char c, Map<String, String> headers,\n      boolean needRounding, int unit, int roundDown)", "full_signature": "@VisibleForTesting @Deprecated public static String replaceShorthand(char c, Map<String, String> headers,\n      boolean needRounding, int unit, int roundDown)", "class_method_signature": "BucketPath.replaceShorthand(char c, Map<String, String> headers,\n      boolean needRounding, int unit, int roundDown)", "testcase": false, "constructor": false}, {"identifier": "replaceShorthand", "parameters": "(char c, Map<String, String> headers,\n      TimeZone timeZone, boolean needRounding, int unit, int roundDown,\n      boolean useLocalTimestamp)", "modifiers": "@VisibleForTesting @Deprecated public static", "return": "String", "signature": "String replaceShorthand(char c, Map<String, String> headers,\n      TimeZone timeZone, boolean needRounding, int unit, int roundDown,\n      boolean useLocalTimestamp)", "full_signature": "@VisibleForTesting @Deprecated public static String replaceShorthand(char c, Map<String, String> headers,\n      TimeZone timeZone, boolean needRounding, int unit, int roundDown,\n      boolean useLocalTimestamp)", "class_method_signature": "BucketPath.replaceShorthand(char c, Map<String, String> headers,\n      TimeZone timeZone, boolean needRounding, int unit, int roundDown,\n      boolean useLocalTimestamp)", "testcase": false, "constructor": false}, {"identifier": "getSimpleDateFormat", "parameters": "(String string)", "modifiers": "protected static", "return": "SimpleDateFormat", "signature": "SimpleDateFormat getSimpleDateFormat(String string)", "full_signature": "protected static SimpleDateFormat getSimpleDateFormat(String string)", "class_method_signature": "BucketPath.getSimpleDateFormat(String string)", "testcase": false, "constructor": false}, {"identifier": "replaceStaticString", "parameters": "(String key)", "modifiers": "@VisibleForTesting protected static", "return": "String", "signature": "String replaceStaticString(String key)", "full_signature": "@VisibleForTesting protected static String replaceStaticString(String key)", "class_method_signature": "BucketPath.replaceStaticString(String key)", "testcase": false, "constructor": false}, {"identifier": "replaceShorthand", "parameters": "(char c, Map<String, String> headers,\n      TimeZone timeZone, boolean needRounding, int unit, int roundDown,\n      boolean useLocalTimestamp, long ts)", "modifiers": "@VisibleForTesting protected static", "return": "String", "signature": "String replaceShorthand(char c, Map<String, String> headers,\n      TimeZone timeZone, boolean needRounding, int unit, int roundDown,\n      boolean useLocalTimestamp, long ts)", "full_signature": "@VisibleForTesting protected static String replaceShorthand(char c, Map<String, String> headers,\n      TimeZone timeZone, boolean needRounding, int unit, int roundDown,\n      boolean useLocalTimestamp, long ts)", "class_method_signature": "BucketPath.replaceShorthand(char c, Map<String, String> headers,\n      TimeZone timeZone, boolean needRounding, int unit, int roundDown,\n      boolean useLocalTimestamp, long ts)", "testcase": false, "constructor": false}, {"identifier": "roundDown", "parameters": "(int roundDown, int unit, long ts, TimeZone timeZone)", "modifiers": "private static", "return": "long", "signature": "long roundDown(int roundDown, int unit, long ts, TimeZone timeZone)", "full_signature": "private static long roundDown(int roundDown, int unit, long ts, TimeZone timeZone)", "class_method_signature": "BucketPath.roundDown(int roundDown, int unit, long ts, TimeZone timeZone)", "testcase": false, "constructor": false}, {"identifier": "escapeString", "parameters": "(String in, Map<String, String> headers)", "modifiers": "public static", "return": "String", "signature": "String escapeString(String in, Map<String, String> headers)", "full_signature": "public static String escapeString(String in, Map<String, String> headers)", "class_method_signature": "BucketPath.escapeString(String in, Map<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "escapeString", "parameters": "(String in, Map<String, String> headers,\n      boolean needRounding, int unit, int roundDown)", "modifiers": "public static", "return": "String", "signature": "String escapeString(String in, Map<String, String> headers,\n      boolean needRounding, int unit, int roundDown)", "full_signature": "public static String escapeString(String in, Map<String, String> headers,\n      boolean needRounding, int unit, int roundDown)", "class_method_signature": "BucketPath.escapeString(String in, Map<String, String> headers,\n      boolean needRounding, int unit, int roundDown)", "testcase": false, "constructor": false}, {"identifier": "escapeString", "parameters": "(String in, Map<String, String> headers,\n      TimeZone timeZone, boolean needRounding, int unit, int roundDown,\n      boolean useLocalTimeStamp)", "modifiers": "public static", "return": "String", "signature": "String escapeString(String in, Map<String, String> headers,\n      TimeZone timeZone, boolean needRounding, int unit, int roundDown,\n      boolean useLocalTimeStamp)", "full_signature": "public static String escapeString(String in, Map<String, String> headers,\n      TimeZone timeZone, boolean needRounding, int unit, int roundDown,\n      boolean useLocalTimeStamp)", "class_method_signature": "BucketPath.escapeString(String in, Map<String, String> headers,\n      TimeZone timeZone, boolean needRounding, int unit, int roundDown,\n      boolean useLocalTimeStamp)", "testcase": false, "constructor": false}, {"identifier": "getEscapeMapping", "parameters": "(String in,\n      Map<String, String> headers)", "modifiers": "@VisibleForTesting @Deprecated public static", "return": "Map<String, String>", "signature": "Map<String, String> getEscapeMapping(String in,\n      Map<String, String> headers)", "full_signature": "@VisibleForTesting @Deprecated public static Map<String, String> getEscapeMapping(String in,\n      Map<String, String> headers)", "class_method_signature": "BucketPath.getEscapeMapping(String in,\n      Map<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "getEscapeMapping", "parameters": "(String in,\n      Map<String, String> headers, boolean needRounding,\n      int unit, int roundDown)", "modifiers": "@VisibleForTesting @Deprecated public static", "return": "Map<String, String>", "signature": "Map<String, String> getEscapeMapping(String in,\n      Map<String, String> headers, boolean needRounding,\n      int unit, int roundDown)", "full_signature": "@VisibleForTesting @Deprecated public static Map<String, String> getEscapeMapping(String in,\n      Map<String, String> headers, boolean needRounding,\n      int unit, int roundDown)", "class_method_signature": "BucketPath.getEscapeMapping(String in,\n      Map<String, String> headers, boolean needRounding,\n      int unit, int roundDown)", "testcase": false, "constructor": false}, {"identifier": "setClock", "parameters": "(Clock clk)", "modifiers": "@VisibleForTesting public static", "return": "void", "signature": "void setClock(Clock clk)", "full_signature": "@VisibleForTesting public static void setClock(Clock clk)", "class_method_signature": "BucketPath.setClock(Clock clk)", "testcase": false, "constructor": false}, {"identifier": "getClock", "parameters": "()", "modifiers": "@VisibleForTesting public static", "return": "Clock", "signature": "Clock getClock()", "full_signature": "@VisibleForTesting public static Clock getClock()", "class_method_signature": "BucketPath.getClock()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/formatter/output/BucketPath.java"}, "focal_method": {"identifier": "escapeString", "parameters": "(String in, Map<String, String> headers)", "modifiers": "public static", "return": "String", "body": "public static String escapeString(String in, Map<String, String> headers) {\n    return escapeString(in, headers, false, 0, 0);\n  }", "signature": "String escapeString(String in, Map<String, String> headers)", "full_signature": "public static String escapeString(String in, Map<String, String> headers)", "class_method_signature": "BucketPath.escapeString(String in, Map<String, String> headers)", "testcase": false, "constructor": false, "invocations": ["escapeString"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}