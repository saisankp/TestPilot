{"test_class": {"identifier": "ModuleAutoFinderTest", "superclass": "", "interfaces": "", "fields": [], "file": "opt4j-core/src/test/java/org/opt4j/core/config/ModuleAutoFinderTest.java"}, "test_case": {"identifier": "getFilesFromClasspath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getFilesFromClasspath() {\n\t\tModuleAutoFinder moduleAutoFinder = new ModuleAutoFinder();\n\t\tSet<File> files = moduleAutoFinder.getFilesFromClasspath();\n\n\t\tAssert.assertFalse(files.isEmpty());\n\t\tfor (File file : files) {\n\t\t\tAssert.assertTrue(file.exists());\n\t\t\tAssert.assertTrue(file.getName() + \" not in classpath: \" + System.getProperty(\"java.class.path\"), System\n\t\t\t\t\t.getProperty(\"java.class.path\").contains(file.getName()));\n\t\t}\n\t}", "signature": "void getFilesFromClasspath()", "full_signature": "@Test public void getFilesFromClasspath()", "class_method_signature": "ModuleAutoFinderTest.getFilesFromClasspath()", "testcase": true, "constructor": false, "invocations": ["getFilesFromClasspath", "assertFalse", "isEmpty", "assertTrue", "exists", "assertTrue", "getName", "getProperty", "contains", "getProperty", "getName"]}, "focal_class": {"identifier": "ModuleAutoFinder", "superclass": "", "interfaces": "implements ModuleList", "fields": [{"original_string": "protected final Transformer<Class<? extends Module>, Boolean> accept;", "modifier": "protected final", "type": "Transformer<Class<? extends Module>, Boolean>", "declarator": "accept", "var_name": "accept"}, {"original_string": "protected final Transformer<Class<? extends Module>, Boolean> ignore;", "modifier": "protected final", "type": "Transformer<Class<? extends Module>, Boolean>", "declarator": "ignore", "var_name": "ignore"}, {"original_string": "protected final Set<ModuleAutoFinderListener> listeners = new CopyOnWriteArraySet<>();", "modifier": "protected final", "type": "Set<ModuleAutoFinderListener>", "declarator": "listeners = new CopyOnWriteArraySet<>()", "var_name": "listeners"}, {"original_string": "protected ClassLoader classLoader;", "modifier": "protected", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}], "methods": [{"identifier": "ModuleAutoFinder", "parameters": "()", "modifiers": "@Inject public", "return": "", "signature": " ModuleAutoFinder()", "full_signature": "@Inject public  ModuleAutoFinder()", "class_method_signature": "ModuleAutoFinder.ModuleAutoFinder()", "testcase": false, "constructor": true}, {"identifier": "ModuleAutoFinder", "parameters": "(Transformer<Class<? extends Module>, Boolean> accept,\n\t\t\tTransformer<Class<? extends Module>, Boolean> ignore)", "modifiers": "public", "return": "", "signature": " ModuleAutoFinder(Transformer<Class<? extends Module>, Boolean> accept,\n\t\t\tTransformer<Class<? extends Module>, Boolean> ignore)", "full_signature": "public  ModuleAutoFinder(Transformer<Class<? extends Module>, Boolean> accept,\n\t\t\tTransformer<Class<? extends Module>, Boolean> ignore)", "class_method_signature": "ModuleAutoFinder.ModuleAutoFinder(Transformer<Class<? extends Module>, Boolean> accept,\n\t\t\tTransformer<Class<? extends Module>, Boolean> ignore)", "testcase": false, "constructor": true}, {"identifier": "getModules", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends Module>>", "signature": "Collection<Class<? extends Module>> getModules()", "full_signature": "@Override public Collection<Class<? extends Module>> getModules()", "class_method_signature": "ModuleAutoFinder.getModules()", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "()", "modifiers": "protected", "return": "Collection<Class<? extends Module>>", "signature": "Collection<Class<? extends Module>> getAll()", "full_signature": "protected Collection<Class<? extends Module>> getAll()", "class_method_signature": "ModuleAutoFinder.getAll()", "testcase": false, "constructor": false}, {"identifier": "getFilesFromClasspath", "parameters": "()", "modifiers": "protected", "return": "Set<File>", "signature": "Set<File> getFilesFromClasspath()", "full_signature": "protected Set<File> getFilesFromClasspath()", "class_method_signature": "ModuleAutoFinder.getFilesFromClasspath()", "testcase": false, "constructor": false}, {"identifier": "isJar", "parameters": "(File file)", "modifiers": "protected", "return": "boolean", "signature": "boolean isJar(File file)", "full_signature": "protected boolean isJar(File file)", "class_method_signature": "ModuleAutoFinder.isJar(File file)", "testcase": false, "constructor": false}, {"identifier": "getAllClasses", "parameters": "(File directory)", "modifiers": "protected", "return": "List<Class<?>>", "signature": "List<Class<?>> getAllClasses(File directory)", "full_signature": "protected List<Class<?>> getAllClasses(File directory)", "class_method_signature": "ModuleAutoFinder.getAllClasses(File directory)", "testcase": false, "constructor": false}, {"identifier": "getAllClasses", "parameters": "(File root, File file)", "modifiers": "protected", "return": "List<Class<?>>", "signature": "List<Class<?>> getAllClasses(File root, File file)", "full_signature": "protected List<Class<?>> getAllClasses(File root, File file)", "class_method_signature": "ModuleAutoFinder.getAllClasses(File root, File file)", "testcase": false, "constructor": false}, {"identifier": "getAllClasses", "parameters": "(ZipFile zipFile)", "modifiers": "protected", "return": "List<Class<?>>", "signature": "List<Class<?>> getAllClasses(ZipFile zipFile)", "full_signature": "protected List<Class<?>> getAllClasses(ZipFile zipFile)", "class_method_signature": "ModuleAutoFinder.getAllClasses(ZipFile zipFile)", "testcase": false, "constructor": false}, {"identifier": "invokeOut", "parameters": "(String message)", "modifiers": "protected", "return": "void", "signature": "void invokeOut(String message)", "full_signature": "protected void invokeOut(String message)", "class_method_signature": "ModuleAutoFinder.invokeOut(String message)", "testcase": false, "constructor": false}, {"identifier": "invokeErr", "parameters": "(String message)", "modifiers": "protected", "return": "void", "signature": "void invokeErr(String message)", "full_signature": "protected void invokeErr(String message)", "class_method_signature": "ModuleAutoFinder.invokeErr(String message)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(ModuleAutoFinderListener listener)", "modifiers": "public", "return": "void", "signature": "void addListener(ModuleAutoFinderListener listener)", "full_signature": "public void addListener(ModuleAutoFinderListener listener)", "class_method_signature": "ModuleAutoFinder.addListener(ModuleAutoFinderListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(ModuleAutoFinderListener listener)", "modifiers": "public", "return": "void", "signature": "void removeListener(ModuleAutoFinderListener listener)", "full_signature": "public void removeListener(ModuleAutoFinderListener listener)", "class_method_signature": "ModuleAutoFinder.removeListener(ModuleAutoFinderListener listener)", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/config/ModuleAutoFinder.java"}, "focal_method": {"identifier": "getFilesFromClasspath", "parameters": "()", "modifiers": "protected", "return": "Set<File>", "body": "protected Set<File> getFilesFromClasspath() {\n\t\tSet<File> files = new HashSet<>();\n\t\tString paths = System.getProperty(\"java.class.path\");\n\n\t\t// split classpathes like a.jar;b.jar\n\t\t// pathSeparator is \";\" on Windows and \":\" on Linux and MAC\n\t\tStringTokenizer st = new StringTokenizer(paths, File.pathSeparator + \"\\n\");\n\n\t\twhile (st.hasMoreTokens()) {\n\t\t\tString path = st.nextToken();\n\t\t\tFile f = new File(path);\n\n\t\t\tif (f.exists()) {\n\t\t\t\ttry {\n\t\t\t\t\tf = f.getCanonicalFile();\n\t\t\t\t\tfiles.add(f);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn files;\n\t}", "signature": "Set<File> getFilesFromClasspath()", "full_signature": "protected Set<File> getFilesFromClasspath()", "class_method_signature": "ModuleAutoFinder.getFilesFromClasspath()", "testcase": false, "constructor": false, "invocations": ["getProperty", "hasMoreTokens", "nextToken", "exists", "getCanonicalFile", "add", "printStackTrace"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}