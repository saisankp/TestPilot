{"test_class": {"identifier": "BaseNotificationMessageRendererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BaseNotificationMessageRenderer<Entity> renderer;", "modifier": "private", "type": "BaseNotificationMessageRenderer<Entity>", "declarator": "renderer", "var_name": "renderer"}, {"original_string": "private static final Pair<String, String> ATTR_A = ImmutablePair.of( \"a1234567890\", \"Attribute A value\" );", "modifier": "private static final", "type": "Pair<String, String>", "declarator": "ATTR_A = ImmutablePair.of( \"a1234567890\", \"Attribute A value\" )", "var_name": "ATTR_A"}, {"original_string": "private static final Pair<String, String> ATTR_B = ImmutablePair.of( \"b1234567890\", \"Attribute B value\" );", "modifier": "private static final", "type": "Pair<String, String>", "declarator": "ATTR_B = ImmutablePair.of( \"b1234567890\", \"Attribute B value\" )", "var_name": "ATTR_B"}, {"original_string": "private static final Pair<String, String> ATTR_NULL = ImmutablePair.of( \"n1234567890\", null );", "modifier": "private static final", "type": "Pair<String, String>", "declarator": "ATTR_NULL = ImmutablePair.of( \"n1234567890\", null )", "var_name": "ATTR_NULL"}], "file": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/notification/BaseNotificationMessageRendererTest.java"}, "test_case": {"identifier": "testRenderAttributesRendersAttributes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRenderAttributesRendersAttributes()\n    {\n        Entity e = entity();\n        String templateString = format( \"A{%s} A{%s}\", ATTR_A.getKey(), ATTR_B.getKey() );\n\n        NotificationTemplate template = template( templateString );\n\n        NotificationMessage message = renderer.render( e, template );\n\n        String expected = format( \"%s %s\", ATTR_A.getValue(), ATTR_B.getValue() );\n\n        assertNotNull( message );\n        assertEquals( expected, message.getMessage() );\n    }", "signature": "void testRenderAttributesRendersAttributes()", "full_signature": "@Test public void testRenderAttributesRendersAttributes()", "class_method_signature": "BaseNotificationMessageRendererTest.testRenderAttributesRendersAttributes()", "testcase": true, "constructor": false, "invocations": ["entity", "format", "getKey", "getKey", "template", "render", "format", "getValue", "getValue", "assertNotNull", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "BaseNotificationMessageRenderer", "superclass": "", "interfaces": "implements NotificationMessageRenderer<T>", "fields": [{"original_string": "protected static final int SMS_CHAR_LIMIT = 160 * 4;", "modifier": "protected static final", "type": "int", "declarator": "SMS_CHAR_LIMIT = 160 * 4", "var_name": "SMS_CHAR_LIMIT"}, {"original_string": "protected static final int EMAIL_CHAR_LIMIT = 10000;", "modifier": "protected static final", "type": "int", "declarator": "EMAIL_CHAR_LIMIT = 10000", "var_name": "EMAIL_CHAR_LIMIT"}, {"original_string": "protected static final int SUBJECT_CHAR_LIMIT = 100;", "modifier": "protected static final", "type": "int", "declarator": "SUBJECT_CHAR_LIMIT = 100", "var_name": "SUBJECT_CHAR_LIMIT"}, {"original_string": "protected static final String CONFIDENTIAL_VALUE_REPLACEMENT = \"[CONFIDENTIAL]\";", "modifier": "protected static final", "type": "String", "declarator": "CONFIDENTIAL_VALUE_REPLACEMENT = \"[CONFIDENTIAL]\"", "var_name": "CONFIDENTIAL_VALUE_REPLACEMENT"}, {"original_string": "protected static final String MISSING_VALUE_REPLACEMENT = \"[N/A]\";", "modifier": "protected static final", "type": "String", "declarator": "MISSING_VALUE_REPLACEMENT = \"[N/A]\"", "var_name": "MISSING_VALUE_REPLACEMENT"}, {"original_string": "protected static final String VALUE_ON_ERROR = \"[SERVER ERROR]\";", "modifier": "protected static final", "type": "String", "declarator": "VALUE_ON_ERROR = \"[SERVER ERROR]\"", "var_name": "VALUE_ON_ERROR"}, {"original_string": "protected static final Pattern VARIABLE_CONTENT_PATTERN = Pattern.compile( \"^[A-Za-z0-9_]+$\" );", "modifier": "protected static final", "type": "Pattern", "declarator": "VARIABLE_CONTENT_PATTERN = Pattern.compile( \"^[A-Za-z0-9_]+$\" )", "var_name": "VARIABLE_CONTENT_PATTERN"}, {"original_string": "protected static final Pattern COMBINED_CONTENT_PATTERN = Pattern.compile( \"[A-Za-z][A-Za-z0-9]{10}\" );", "modifier": "protected static final", "type": "Pattern", "declarator": "COMBINED_CONTENT_PATTERN = Pattern.compile( \"[A-Za-z][A-Za-z0-9]{10}\" )", "var_name": "COMBINED_CONTENT_PATTERN"}, {"original_string": "private static final Pattern VARIABLE_PATTERN  = Pattern.compile( \"V\\\\{([a-z_]*)}\" );", "modifier": "private static final", "type": "Pattern", "declarator": "VARIABLE_PATTERN  = Pattern.compile( \"V\\\\{([a-z_]*)}\" )", "var_name": "VARIABLE_PATTERN"}, {"original_string": "private static final Pattern TRACKED_ENTITY_ATTRIBUTE_PATTERN = Pattern.compile( \"A\\\\{([A-Za-z][A-Za-z0-9]{10})}\" );", "modifier": "private static final", "type": "Pattern", "declarator": "TRACKED_ENTITY_ATTRIBUTE_PATTERN = Pattern.compile( \"A\\\\{([A-Za-z][A-Za-z0-9]{10})}\" )", "var_name": "TRACKED_ENTITY_ATTRIBUTE_PATTERN"}, {"original_string": "private static final Pattern DATA_ELEMENT_PATTERN = Pattern.compile( \"#\\\\{([A-Za-z][A-Za-z0-9]{10})}\" );", "modifier": "private static final", "type": "Pattern", "declarator": "DATA_ELEMENT_PATTERN = Pattern.compile( \"#\\\\{([A-Za-z][A-Za-z0-9]{10})}\" )", "var_name": "DATA_ELEMENT_PATTERN"}, {"original_string": "private ImmutableMap<ExpressionType, BiFunction<T, Set<String>, Map<String, String>>> EXPRESSION_TO_VALUE_RESOLVERS =\n        new ImmutableMap.Builder<ExpressionType, BiFunction<T, Set<String>, Map<String, String>>>()\n            .put( ExpressionType.VARIABLE, (entity, keys) -> resolveVariableValues( keys, entity ) )\n            .put( ExpressionType.TRACKED_ENTITY_ATTRIBUTE, (entity, keys) -> resolveTrackedEntityAttributeValues( keys, entity ) )\n            .put( ExpressionType.DATA_ELEMENT, ( entity, keys ) -> resolveDataElementValues( keys, entity ) )\n            .build();", "modifier": "private", "type": "ImmutableMap<ExpressionType, BiFunction<T, Set<String>, Map<String, String>>>", "declarator": "EXPRESSION_TO_VALUE_RESOLVERS =\n        new ImmutableMap.Builder<ExpressionType, BiFunction<T, Set<String>, Map<String, String>>>()\n            .put( ExpressionType.VARIABLE, (entity, keys) -> resolveVariableValues( keys, entity ) )\n            .put( ExpressionType.TRACKED_ENTITY_ATTRIBUTE, (entity, keys) -> resolveTrackedEntityAttributeValues( keys, entity ) )\n            .put( ExpressionType.DATA_ELEMENT, ( entity, keys ) -> resolveDataElementValues( keys, entity ) )\n            .build()", "var_name": "EXPRESSION_TO_VALUE_RESOLVERS"}], "methods": [{"identifier": "render", "parameters": "( T entity, NotificationTemplate template )", "modifiers": "public", "return": "NotificationMessage", "signature": "NotificationMessage render( T entity, NotificationTemplate template )", "full_signature": "public NotificationMessage render( T entity, NotificationTemplate template )", "class_method_signature": "BaseNotificationMessageRenderer.render( T entity, NotificationTemplate template )", "testcase": false, "constructor": false}, {"identifier": "isValidExpressionContent", "parameters": "( String content, ExpressionType type )", "modifiers": "protected", "return": "boolean", "signature": "boolean isValidExpressionContent( String content, ExpressionType type )", "full_signature": "protected boolean isValidExpressionContent( String content, ExpressionType type )", "class_method_signature": "BaseNotificationMessageRenderer.isValidExpressionContent( String content, ExpressionType type )", "testcase": false, "constructor": false}, {"identifier": "getVariableResolvers", "parameters": "()", "modifiers": "protected abstract", "return": "Map<TemplateVariable, Function<T, String>>", "signature": "Map<TemplateVariable, Function<T, String>> getVariableResolvers()", "full_signature": "protected abstract Map<TemplateVariable, Function<T, String>> getVariableResolvers()", "class_method_signature": "BaseNotificationMessageRenderer.getVariableResolvers()", "testcase": false, "constructor": false}, {"identifier": "resolveTrackedEntityAttributeValues", "parameters": "( Set<String> attributeKeys, T entity )", "modifiers": "protected abstract", "return": "Map<String, String>", "signature": "Map<String, String> resolveTrackedEntityAttributeValues( Set<String> attributeKeys, T entity )", "full_signature": "protected abstract Map<String, String> resolveTrackedEntityAttributeValues( Set<String> attributeKeys, T entity )", "class_method_signature": "BaseNotificationMessageRenderer.resolveTrackedEntityAttributeValues( Set<String> attributeKeys, T entity )", "testcase": false, "constructor": false}, {"identifier": "resolveDataElementValues", "parameters": "( Set<String> elementKeys, T entity )", "modifiers": "protected abstract", "return": "Map<String, String>", "signature": "Map<String, String> resolveDataElementValues( Set<String> elementKeys, T entity )", "full_signature": "protected abstract Map<String, String> resolveDataElementValues( Set<String> elementKeys, T entity )", "class_method_signature": "BaseNotificationMessageRenderer.resolveDataElementValues( Set<String> elementKeys, T entity )", "testcase": false, "constructor": false}, {"identifier": "fromVariableName", "parameters": "( String name )", "modifiers": "protected abstract", "return": "TemplateVariable", "signature": "TemplateVariable fromVariableName( String name )", "full_signature": "protected abstract TemplateVariable fromVariableName( String name )", "class_method_signature": "BaseNotificationMessageRenderer.fromVariableName( String name )", "testcase": false, "constructor": false}, {"identifier": "getSupportedExpressionTypes", "parameters": "()", "modifiers": "protected abstract", "return": "Set<ExpressionType>", "signature": "Set<ExpressionType> getSupportedExpressionTypes()", "full_signature": "protected abstract Set<ExpressionType> getSupportedExpressionTypes()", "class_method_signature": "BaseNotificationMessageRenderer.getSupportedExpressionTypes()", "testcase": false, "constructor": false}, {"identifier": "resolveValuesFromExpressions", "parameters": "( Set<String> expressions, ExpressionType type, T entity )", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> resolveValuesFromExpressions( Set<String> expressions, ExpressionType type, T entity )", "full_signature": "private Map<String, String> resolveValuesFromExpressions( Set<String> expressions, ExpressionType type, T entity )", "class_method_signature": "BaseNotificationMessageRenderer.resolveValuesFromExpressions( Set<String> expressions, ExpressionType type, T entity )", "testcase": false, "constructor": false}, {"identifier": "resolveVariableValues", "parameters": "( Set<String> variables, T entity )", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> resolveVariableValues( Set<String> variables, T entity )", "full_signature": "private Map<String, String> resolveVariableValues( Set<String> variables, T entity )", "class_method_signature": "BaseNotificationMessageRenderer.resolveVariableValues( Set<String> variables, T entity )", "testcase": false, "constructor": false}, {"identifier": "resolveValue", "parameters": "( String variableName, T entity )", "modifiers": "private", "return": "String", "signature": "String resolveValue( String variableName, T entity )", "full_signature": "private String resolveValue( String variableName, T entity )", "class_method_signature": "BaseNotificationMessageRenderer.resolveValue( String variableName, T entity )", "testcase": false, "constructor": false}, {"identifier": "createNotificationMessage", "parameters": "( NotificationTemplate template, Map<String, String> expressionToValueMap )", "modifiers": "private", "return": "NotificationMessage", "signature": "NotificationMessage createNotificationMessage( NotificationTemplate template, Map<String, String> expressionToValueMap )", "full_signature": "private NotificationMessage createNotificationMessage( NotificationTemplate template, Map<String, String> expressionToValueMap )", "class_method_signature": "BaseNotificationMessageRenderer.createNotificationMessage( NotificationTemplate template, Map<String, String> expressionToValueMap )", "testcase": false, "constructor": false}, {"identifier": "replaceExpressions", "parameters": "( String input, final Map<String, String> expressionToValueMap )", "modifiers": "private static", "return": "String", "signature": "String replaceExpressions( String input, final Map<String, String> expressionToValueMap )", "full_signature": "private static String replaceExpressions( String input, final Map<String, String> expressionToValueMap )", "class_method_signature": "BaseNotificationMessageRenderer.replaceExpressions( String input, final Map<String, String> expressionToValueMap )", "testcase": false, "constructor": false}, {"identifier": "extractExpressionsByType", "parameters": "( String template )", "modifiers": "private", "return": "Map<ExpressionType, Set<String>>", "signature": "Map<ExpressionType, Set<String>> extractExpressionsByType( String template )", "full_signature": "private Map<ExpressionType, Set<String>> extractExpressionsByType( String template )", "class_method_signature": "BaseNotificationMessageRenderer.extractExpressionsByType( String template )", "testcase": false, "constructor": false}, {"identifier": "extractExpressions", "parameters": "( String template, ExpressionType type )", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> extractExpressions( String template, ExpressionType type )", "full_signature": "private Set<String> extractExpressions( String template, ExpressionType type )", "class_method_signature": "BaseNotificationMessageRenderer.extractExpressions( String template, ExpressionType type )", "testcase": false, "constructor": false}, {"identifier": "warnOfUnrecognizedExpressions", "parameters": "( Set<String> unrecognized, ExpressionType type )", "modifiers": "private static", "return": "void", "signature": "void warnOfUnrecognizedExpressions( Set<String> unrecognized, ExpressionType type )", "full_signature": "private static void warnOfUnrecognizedExpressions( Set<String> unrecognized, ExpressionType type )", "class_method_signature": "BaseNotificationMessageRenderer.warnOfUnrecognizedExpressions( Set<String> unrecognized, ExpressionType type )", "testcase": false, "constructor": false}, {"identifier": "chop", "parameters": "( String input, int limit )", "modifiers": "protected static", "return": "String", "signature": "String chop( String input, int limit )", "full_signature": "protected static String chop( String input, int limit )", "class_method_signature": "BaseNotificationMessageRenderer.chop( String input, int limit )", "testcase": false, "constructor": false}, {"identifier": "daysUntil", "parameters": "( Date date )", "modifiers": "protected static", "return": "String", "signature": "String daysUntil( Date date )", "full_signature": "protected static String daysUntil( Date date )", "class_method_signature": "BaseNotificationMessageRenderer.daysUntil( Date date )", "testcase": false, "constructor": false}, {"identifier": "daysSince", "parameters": "( Date date )", "modifiers": "protected static", "return": "String", "signature": "String daysSince( Date date )", "full_signature": "protected static String daysSince( Date date )", "class_method_signature": "BaseNotificationMessageRenderer.daysSince( Date date )", "testcase": false, "constructor": false}, {"identifier": "formatDate", "parameters": "( Date date )", "modifiers": "protected static", "return": "String", "signature": "String formatDate( Date date )", "full_signature": "protected static String formatDate( Date date )", "class_method_signature": "BaseNotificationMessageRenderer.formatDate( Date date )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/notification/BaseNotificationMessageRenderer.java"}, "focal_method": {"identifier": "render", "parameters": "( T entity, NotificationTemplate template )", "modifiers": "public", "return": "NotificationMessage", "body": "public NotificationMessage render( T entity, NotificationTemplate template )\n    {\n        final String collatedTemplate = template.getSubjectTemplate() + \" \" + template.getMessageTemplate();\n\n        Map<String, String> expressionToValueMap =\n            extractExpressionsByType( collatedTemplate ).entrySet().stream()\n                .map( entry -> resolveValuesFromExpressions( entry.getValue(), entry.getKey(), entity ) )\n                .collect( HashMap::new, Map::putAll, Map::putAll );\n\n        return createNotificationMessage( template, expressionToValueMap );\n    }", "signature": "NotificationMessage render( T entity, NotificationTemplate template )", "full_signature": "public NotificationMessage render( T entity, NotificationTemplate template )", "class_method_signature": "BaseNotificationMessageRenderer.render( T entity, NotificationTemplate template )", "testcase": false, "constructor": false, "invocations": ["getSubjectTemplate", "getMessageTemplate", "collect", "map", "stream", "entrySet", "extractExpressionsByType", "resolveValuesFromExpressions", "getValue", "getKey", "createNotificationMessage"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}