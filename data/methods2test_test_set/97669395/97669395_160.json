{"test_class": {"identifier": "CakeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Cake cake;", "modifier": "private", "type": "Cake", "declarator": "cake", "var_name": "cake"}], "file": "recipe-java-runtime/src/test/java/ca/derekcormier/recipe/CakeTest.java"}, "test_case": {"identifier": "testKey_throwsOnNullSubkey", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testKey_throwsOnNullSubkey() {\n    Cake.key(\"foo\", null);\n  }", "signature": "void testKey_throwsOnNullSubkey()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testKey_throwsOnNullSubkey()", "class_method_signature": "CakeTest.testKey_throwsOnNullSubkey()", "testcase": true, "constructor": false, "invocations": ["key"]}, "focal_class": {"identifier": "Cake", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SEPARATOR = \".\";", "modifier": "public static final", "type": "String", "declarator": "SEPARATOR = \".\"", "var_name": "SEPARATOR"}, {"original_string": "private final Map<String, Object> entries = new HashMap<>();", "modifier": "private final", "type": "Map<String, Object>", "declarator": "entries = new HashMap<>()", "var_name": "entries"}, {"original_string": "private final LinkedList<String> prefixStack = new LinkedList<>();", "modifier": "private final", "type": "LinkedList<String>", "declarator": "prefixStack = new LinkedList<>()", "var_name": "prefixStack"}], "methods": [{"identifier": "Cake", "parameters": "()", "modifiers": "public", "return": "", "signature": " Cake()", "full_signature": "public  Cake()", "class_method_signature": "Cake.Cake()", "testcase": false, "constructor": true}, {"identifier": "Cake", "parameters": "(Cake other)", "modifiers": "public", "return": "", "signature": " Cake(Cake other)", "full_signature": "public  Cake(Cake other)", "class_method_signature": "Cake.Cake(Cake other)", "testcase": false, "constructor": true}, {"identifier": "key", "parameters": "(String... subKeys)", "modifiers": "public static", "return": "String", "signature": "String key(String... subKeys)", "full_signature": "public static String key(String... subKeys)", "class_method_signature": "Cake.key(String... subKeys)", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(String key)", "modifiers": "private static", "return": "void", "signature": "void validateKey(String key)", "full_signature": "private static void validateKey(String key)", "class_method_signature": "Cake.validateKey(String key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String... key)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T get(String... key)", "full_signature": "@SuppressWarnings(\"unchecked\") public T get(String... key)", "class_method_signature": "Cake.get(String... key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<T> clazz, String... key)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T get(Class<T> clazz, String... key)", "full_signature": "@SuppressWarnings(\"unchecked\") public T get(Class<T> clazz, String... key)", "class_method_signature": "Cake.get(Class<T> clazz, String... key)", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "(String key, Object value)", "modifiers": "public", "return": "void", "signature": "void publish(String key, Object value)", "full_signature": "public void publish(String key, Object value)", "class_method_signature": "Cake.publish(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "inNamespace", "parameters": "(String key, Runnable runnable)", "modifiers": "public", "return": "void", "signature": "void inNamespace(String key, Runnable runnable)", "full_signature": "public void inNamespace(String key, Runnable runnable)", "class_method_signature": "Cake.inNamespace(String key, Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "getPublishedKeyForValue", "parameters": "(Object value, boolean fullyQualified)", "modifiers": "public", "return": "String", "signature": "String getPublishedKeyForValue(Object value, boolean fullyQualified)", "full_signature": "public String getPublishedKeyForValue(Object value, boolean fullyQualified)", "class_method_signature": "Cake.getPublishedKeyForValue(Object value, boolean fullyQualified)", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "String", "signature": "String getNamespace()", "full_signature": "@JsonIgnore public String getNamespace()", "class_method_signature": "Cake.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "hasContext", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasContext()", "full_signature": "public boolean hasContext()", "class_method_signature": "Cake.hasContext()", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "T", "signature": "T getContext()", "full_signature": "@JsonIgnore public T getContext()", "class_method_signature": "Cake.getContext()", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "(Class<T> clazz)", "modifiers": "@JsonIgnore @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getContext(Class<T> clazz)", "full_signature": "@JsonIgnore @SuppressWarnings(\"unchecked\") public T getContext(Class<T> clazz)", "class_method_signature": "Cake.getContext(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getOrGetContext", "parameters": "(String... key)", "modifiers": "@JsonIgnore public", "return": "T", "signature": "T getOrGetContext(String... key)", "full_signature": "@JsonIgnore public T getOrGetContext(String... key)", "class_method_signature": "Cake.getOrGetContext(String... key)", "testcase": false, "constructor": false}, {"identifier": "getOrGetContext", "parameters": "(Class<T> clazz, String... key)", "modifiers": "@JsonIgnore public", "return": "T", "signature": "T getOrGetContext(Class<T> clazz, String... key)", "full_signature": "@JsonIgnore public T getOrGetContext(Class<T> clazz, String... key)", "class_method_signature": "Cake.getOrGetContext(Class<T> clazz, String... key)", "testcase": false, "constructor": false}, {"identifier": "getSubKeysAndValidateFullKey", "parameters": "(String fullKey)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getSubKeysAndValidateFullKey(String fullKey)", "full_signature": "private List<String> getSubKeysAndValidateFullKey(String fullKey)", "class_method_signature": "Cake.getSubKeysAndValidateFullKey(String fullKey)", "testcase": false, "constructor": false}, {"identifier": "getPrefixWithSeparator", "parameters": "(List<String> namespaces)", "modifiers": "private", "return": "String", "signature": "String getPrefixWithSeparator(List<String> namespaces)", "full_signature": "private String getPrefixWithSeparator(List<String> namespaces)", "class_method_signature": "Cake.getPrefixWithSeparator(List<String> namespaces)", "testcase": false, "constructor": false}, {"identifier": "getEntries", "parameters": "()", "modifiers": "@JsonAnyGetter protected", "return": "Map<String, Object>", "signature": "Map<String, Object> getEntries()", "full_signature": "@JsonAnyGetter protected Map<String, Object> getEntries()", "class_method_signature": "Cake.getEntries()", "testcase": false, "constructor": false}, {"identifier": "setEntry", "parameters": "(String key, Object value)", "modifiers": "@JsonAnySetter private", "return": "void", "signature": "void setEntry(String key, Object value)", "full_signature": "@JsonAnySetter private void setEntry(String key, Object value)", "class_method_signature": "Cake.setEntry(String key, Object value)", "testcase": false, "constructor": false}], "file": "recipe-java-runtime/src/main/java/ca/derekcormier/recipe/Cake.java"}, "focal_method": {"identifier": "key", "parameters": "(String... subKeys)", "modifiers": "public static", "return": "String", "body": "public static String key(String... subKeys) {\n    if (subKeys.length == 0) {\n      throw new IllegalArgumentException(\"cannot form cake key; no keys supplied\");\n    }\n    Arrays.asList(subKeys).forEach(Cake::validateKey);\n    return StringUtils.join(subKeys, Cake.SEPARATOR);\n  }", "signature": "String key(String... subKeys)", "full_signature": "public static String key(String... subKeys)", "class_method_signature": "Cake.key(String... subKeys)", "testcase": false, "constructor": false, "invocations": ["forEach", "asList", "join"]}, "repository": {"repo_id": 97669395, "url": "https://github.com/kormide/recipe", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 727, "license": "licensed"}}