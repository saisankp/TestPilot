{"test_class": {"identifier": "PlanParamsTest", "superclass": "", "interfaces": "", "fields": [], "file": "maven/src/test/java/net/adamcin/oakpal/maven/mojo/PlanParamsTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToString() {\n        assertFalse(\"non-empty string\", new PlanParams().toString().isEmpty());\n    }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "PlanParamsTest.testToString()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isEmpty", "toString"]}, "focal_class": {"identifier": "PlanParams", "superclass": "", "interfaces": "implements PlanBuilderParams", "fields": [{"original_string": "private List<DependencyFilter> preInstallArtifacts = Collections.emptyList();", "modifier": "private", "type": "List<DependencyFilter>", "declarator": "preInstallArtifacts = Collections.emptyList()", "var_name": "preInstallArtifacts"}, {"original_string": "private List<File> preInstallFiles = Collections.emptyList();", "modifier": "private", "type": "List<File>", "declarator": "preInstallFiles = Collections.emptyList()", "var_name": "preInstallFiles"}, {"original_string": "private List<String> cndNames = Collections.emptyList();", "modifier": "private", "type": "List<String>", "declarator": "cndNames = Collections.emptyList()", "var_name": "cndNames"}, {"original_string": "private boolean slingNodeTypes;", "modifier": "private", "type": "boolean", "declarator": "slingNodeTypes", "var_name": "slingNodeTypes"}, {"original_string": "private List<JcrNs> jcrNamespaces = Collections.emptyList();", "modifier": "private", "type": "List<JcrNs>", "declarator": "jcrNamespaces = Collections.emptyList()", "var_name": "jcrNamespaces"}, {"original_string": "private List<String> jcrPrivileges = Collections.emptyList();", "modifier": "private", "type": "List<String>", "declarator": "jcrPrivileges = Collections.emptyList()", "var_name": "jcrPrivileges"}, {"original_string": "private List<ForcedRoot> forcedRoots = Collections.emptyList();", "modifier": "private", "type": "List<ForcedRoot>", "declarator": "forcedRoots = Collections.emptyList()", "var_name": "forcedRoots"}, {"original_string": "private List<CheckSpec> checks = Collections.emptyList();", "modifier": "private", "type": "List<CheckSpec>", "declarator": "checks = Collections.emptyList()", "var_name": "checks"}, {"original_string": "private List<String> checklists = Collections.emptyList();", "modifier": "private", "type": "List<String>", "declarator": "checklists = Collections.emptyList()", "var_name": "checklists"}, {"original_string": "private boolean enablePreInstallHooks;", "modifier": "private", "type": "boolean", "declarator": "enablePreInstallHooks", "var_name": "enablePreInstallHooks"}, {"original_string": "private InstallHookPolicy installHookPolicy;", "modifier": "private", "type": "InstallHookPolicy", "declarator": "installHookPolicy", "var_name": "installHookPolicy"}, {"original_string": "private List<String> repoInits = Collections.emptyList();", "modifier": "private", "type": "List<String>", "declarator": "repoInits = Collections.emptyList()", "var_name": "repoInits"}, {"original_string": "private List<File> repoInitFiles = Collections.emptyList();", "modifier": "private", "type": "List<File>", "declarator": "repoInitFiles = Collections.emptyList()", "var_name": "repoInitFiles"}, {"original_string": "private List<String> runModes = Collections.emptyList();", "modifier": "private", "type": "List<String>", "declarator": "runModes = Collections.emptyList()", "var_name": "runModes"}], "methods": [{"identifier": "getPreInstallArtifacts", "parameters": "()", "modifiers": "@Override public", "return": "List<DependencyFilter>", "signature": "List<DependencyFilter> getPreInstallArtifacts()", "full_signature": "@Override public List<DependencyFilter> getPreInstallArtifacts()", "class_method_signature": "PlanParams.getPreInstallArtifacts()", "testcase": false, "constructor": false}, {"identifier": "setPreInstallArtifacts", "parameters": "(final List<DependencyFilter> preInstallArtifacts)", "modifiers": "public", "return": "void", "signature": "void setPreInstallArtifacts(final List<DependencyFilter> preInstallArtifacts)", "full_signature": "public void setPreInstallArtifacts(final List<DependencyFilter> preInstallArtifacts)", "class_method_signature": "PlanParams.setPreInstallArtifacts(final List<DependencyFilter> preInstallArtifacts)", "testcase": false, "constructor": false}, {"identifier": "getPreInstallFiles", "parameters": "()", "modifiers": "@Override public", "return": "List<File>", "signature": "List<File> getPreInstallFiles()", "full_signature": "@Override public List<File> getPreInstallFiles()", "class_method_signature": "PlanParams.getPreInstallFiles()", "testcase": false, "constructor": false}, {"identifier": "setPreInstallFiles", "parameters": "(final List<File> preInstallFiles)", "modifiers": "public", "return": "void", "signature": "void setPreInstallFiles(final List<File> preInstallFiles)", "full_signature": "public void setPreInstallFiles(final List<File> preInstallFiles)", "class_method_signature": "PlanParams.setPreInstallFiles(final List<File> preInstallFiles)", "testcase": false, "constructor": false}, {"identifier": "getCndNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getCndNames()", "full_signature": "@Override public List<String> getCndNames()", "class_method_signature": "PlanParams.getCndNames()", "testcase": false, "constructor": false}, {"identifier": "setCndNames", "parameters": "(final List<String> cndNames)", "modifiers": "public", "return": "void", "signature": "void setCndNames(final List<String> cndNames)", "full_signature": "public void setCndNames(final List<String> cndNames)", "class_method_signature": "PlanParams.setCndNames(final List<String> cndNames)", "testcase": false, "constructor": false}, {"identifier": "isSlingNodeTypes", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSlingNodeTypes()", "full_signature": "@Override public boolean isSlingNodeTypes()", "class_method_signature": "PlanParams.isSlingNodeTypes()", "testcase": false, "constructor": false}, {"identifier": "setSlingNodeTypes", "parameters": "(final boolean slingNodeTypes)", "modifiers": "public", "return": "void", "signature": "void setSlingNodeTypes(final boolean slingNodeTypes)", "full_signature": "public void setSlingNodeTypes(final boolean slingNodeTypes)", "class_method_signature": "PlanParams.setSlingNodeTypes(final boolean slingNodeTypes)", "testcase": false, "constructor": false}, {"identifier": "getJcrNamespaces", "parameters": "()", "modifiers": "@Override public", "return": "List<JcrNs>", "signature": "List<JcrNs> getJcrNamespaces()", "full_signature": "@Override public List<JcrNs> getJcrNamespaces()", "class_method_signature": "PlanParams.getJcrNamespaces()", "testcase": false, "constructor": false}, {"identifier": "setJcrNamespaces", "parameters": "(final List<JcrNs> jcrNamespaces)", "modifiers": "public", "return": "void", "signature": "void setJcrNamespaces(final List<JcrNs> jcrNamespaces)", "full_signature": "public void setJcrNamespaces(final List<JcrNs> jcrNamespaces)", "class_method_signature": "PlanParams.setJcrNamespaces(final List<JcrNs> jcrNamespaces)", "testcase": false, "constructor": false}, {"identifier": "getJcrPrivileges", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getJcrPrivileges()", "full_signature": "@Override public List<String> getJcrPrivileges()", "class_method_signature": "PlanParams.getJcrPrivileges()", "testcase": false, "constructor": false}, {"identifier": "setJcrPrivileges", "parameters": "(final List<String> jcrPrivileges)", "modifiers": "public", "return": "void", "signature": "void setJcrPrivileges(final List<String> jcrPrivileges)", "full_signature": "public void setJcrPrivileges(final List<String> jcrPrivileges)", "class_method_signature": "PlanParams.setJcrPrivileges(final List<String> jcrPrivileges)", "testcase": false, "constructor": false}, {"identifier": "getForcedRoots", "parameters": "()", "modifiers": "@Override public", "return": "List<ForcedRoot>", "signature": "List<ForcedRoot> getForcedRoots()", "full_signature": "@Override public List<ForcedRoot> getForcedRoots()", "class_method_signature": "PlanParams.getForcedRoots()", "testcase": false, "constructor": false}, {"identifier": "setForcedRoots", "parameters": "(final List<ForcedRoot> forcedRoots)", "modifiers": "public", "return": "void", "signature": "void setForcedRoots(final List<ForcedRoot> forcedRoots)", "full_signature": "public void setForcedRoots(final List<ForcedRoot> forcedRoots)", "class_method_signature": "PlanParams.setForcedRoots(final List<ForcedRoot> forcedRoots)", "testcase": false, "constructor": false}, {"identifier": "getChecks", "parameters": "()", "modifiers": "@Override public", "return": "List<CheckSpec>", "signature": "List<CheckSpec> getChecks()", "full_signature": "@Override public List<CheckSpec> getChecks()", "class_method_signature": "PlanParams.getChecks()", "testcase": false, "constructor": false}, {"identifier": "setChecks", "parameters": "(final List<CheckSpec> checks)", "modifiers": "public", "return": "void", "signature": "void setChecks(final List<CheckSpec> checks)", "full_signature": "public void setChecks(final List<CheckSpec> checks)", "class_method_signature": "PlanParams.setChecks(final List<CheckSpec> checks)", "testcase": false, "constructor": false}, {"identifier": "getChecklists", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getChecklists()", "full_signature": "@Override public List<String> getChecklists()", "class_method_signature": "PlanParams.getChecklists()", "testcase": false, "constructor": false}, {"identifier": "setChecklists", "parameters": "(final List<String> checklists)", "modifiers": "public", "return": "void", "signature": "void setChecklists(final List<String> checklists)", "full_signature": "public void setChecklists(final List<String> checklists)", "class_method_signature": "PlanParams.setChecklists(final List<String> checklists)", "testcase": false, "constructor": false}, {"identifier": "isEnablePreInstallHooks", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEnablePreInstallHooks()", "full_signature": "@Override public boolean isEnablePreInstallHooks()", "class_method_signature": "PlanParams.isEnablePreInstallHooks()", "testcase": false, "constructor": false}, {"identifier": "setEnablePreInstallHooks", "parameters": "(final boolean skipInstallHooks)", "modifiers": "public", "return": "void", "signature": "void setEnablePreInstallHooks(final boolean skipInstallHooks)", "full_signature": "public void setEnablePreInstallHooks(final boolean skipInstallHooks)", "class_method_signature": "PlanParams.setEnablePreInstallHooks(final boolean skipInstallHooks)", "testcase": false, "constructor": false}, {"identifier": "getInstallHookPolicy", "parameters": "()", "modifiers": "@Override public", "return": "InstallHookPolicy", "signature": "InstallHookPolicy getInstallHookPolicy()", "full_signature": "@Override public InstallHookPolicy getInstallHookPolicy()", "class_method_signature": "PlanParams.getInstallHookPolicy()", "testcase": false, "constructor": false}, {"identifier": "setInstallHookPolicy", "parameters": "(final InstallHookPolicy installHookPolicy)", "modifiers": "public", "return": "void", "signature": "void setInstallHookPolicy(final InstallHookPolicy installHookPolicy)", "full_signature": "public void setInstallHookPolicy(final InstallHookPolicy installHookPolicy)", "class_method_signature": "PlanParams.setInstallHookPolicy(final InstallHookPolicy installHookPolicy)", "testcase": false, "constructor": false}, {"identifier": "getRepoInits", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getRepoInits()", "full_signature": "@Override public List<String> getRepoInits()", "class_method_signature": "PlanParams.getRepoInits()", "testcase": false, "constructor": false}, {"identifier": "setRepoInits", "parameters": "(final List<String> repoInits)", "modifiers": "public", "return": "void", "signature": "void setRepoInits(final List<String> repoInits)", "full_signature": "public void setRepoInits(final List<String> repoInits)", "class_method_signature": "PlanParams.setRepoInits(final List<String> repoInits)", "testcase": false, "constructor": false}, {"identifier": "getRepoInitFiles", "parameters": "()", "modifiers": "@Override public", "return": "List<File>", "signature": "List<File> getRepoInitFiles()", "full_signature": "@Override public List<File> getRepoInitFiles()", "class_method_signature": "PlanParams.getRepoInitFiles()", "testcase": false, "constructor": false}, {"identifier": "setRepoInitFiles", "parameters": "(final List<File> repoInitFiles)", "modifiers": "public", "return": "void", "signature": "void setRepoInitFiles(final List<File> repoInitFiles)", "full_signature": "public void setRepoInitFiles(final List<File> repoInitFiles)", "class_method_signature": "PlanParams.setRepoInitFiles(final List<File> repoInitFiles)", "testcase": false, "constructor": false}, {"identifier": "getRunModes", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getRunModes()", "full_signature": "@Override public List<String> getRunModes()", "class_method_signature": "PlanParams.getRunModes()", "testcase": false, "constructor": false}, {"identifier": "setRunModes", "parameters": "(final List<String> runModes)", "modifiers": "public", "return": "void", "signature": "void setRunModes(final List<String> runModes)", "full_signature": "public void setRunModes(final List<String> runModes)", "class_method_signature": "PlanParams.setRunModes(final List<String> runModes)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PlanParams.toString()", "testcase": false, "constructor": false}], "file": "maven/src/main/java/net/adamcin/oakpal/maven/mojo/PlanParams.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        return \"PlanParams{\" +\n                \"preInstallArtifacts=\" + preInstallArtifacts +\n                \", preInstallFiles=\" + preInstallFiles +\n                \", cndNames=\" + cndNames +\n                \", slingNodeTypes=\" + slingNodeTypes +\n                \", jcrNamespaces=\" + jcrNamespaces +\n                \", jcrPrivileges=\" + jcrPrivileges +\n                \", forcedRoots=\" + forcedRoots +\n                \", checks=\" + checks +\n                \", checklists=\" + checklists +\n                \", enablePreInstallHooks=\" + enablePreInstallHooks +\n                \", installHookPolicy=\" + installHookPolicy +\n                \", repoInits=\" + repoInits +\n                \", repoInitFiles=\" + repoInitFiles +\n                \", runModes=\" + runModes +\n                '}';\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PlanParams.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}