{"test_class": {"identifier": "GeoUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DELTA = 0.01;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 0.01", "var_name": "DELTA"}], "file": "dhis-2/dhis-support/dhis-support-system/src/test/java/org/hisp/dhis/system/util/GeoUtilsTest.java"}, "test_case": {"identifier": "testVerifyPointIsWithinMultiPolygon", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVerifyPointIsWithinMultiPolygon()\n            throws IOException\n    {\n        String downtownOslo = TestResourceUtils.getFileContent( \"gis/brasilMultiPolygon.json\" );\n\n        Geometry g = new GeometryJSON().read( downtownOslo );\n        boolean result = GeoUtils.checkPointWithMultiPolygon( -43.96728515625, -16.699340234594537, g );\n\n        assertTrue( result );\n\n        result = GeoUtils.checkPointWithMultiPolygon( -43.681640625, -18.698285474146807, g );\n\n        assertFalse( result );\n\n    }", "signature": "void testVerifyPointIsWithinMultiPolygon()", "full_signature": "@Test public void testVerifyPointIsWithinMultiPolygon()", "class_method_signature": "GeoUtilsTest.testVerifyPointIsWithinMultiPolygon()", "testcase": true, "constructor": false, "invocations": ["getFileContent", "read", "checkPointWithMultiPolygon", "assertTrue", "checkPointWithMultiPolygon", "assertFalse"]}, "focal_class": {"identifier": "GeoUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern SVG_TEXT_PATTERN = Pattern.compile( \"text=\\\"(.*?)\\\"\", Pattern.DOTALL );", "modifier": "private static final", "type": "Pattern", "declarator": "SVG_TEXT_PATTERN = Pattern.compile( \"text=\\\"(.*?)\\\"\", Pattern.DOTALL )", "var_name": "SVG_TEXT_PATTERN"}, {"original_string": "private static final String SVG_FONT_REGEX = \"(\\\\s+)font=\\\"(.*?)\\\"\";", "modifier": "private static final", "type": "String", "declarator": "SVG_FONT_REGEX = \"(\\\\s+)font=\\\"(.*?)\\\"\"", "var_name": "SVG_FONT_REGEX"}, {"original_string": "public static final int SRID = 4326;", "modifier": "public static final", "type": "int", "declarator": "SRID = 4326", "var_name": "SRID"}], "methods": [{"identifier": "getBoxShape", "parameters": "( double longitude, double latitude, double distance )", "modifiers": "public static", "return": "double[]", "signature": "double[] getBoxShape( double longitude, double latitude, double distance )", "full_signature": "public static double[] getBoxShape( double longitude, double latitude, double distance )", "class_method_signature": "GeoUtils.getBoxShape( double longitude, double latitude, double distance )", "testcase": false, "constructor": false}, {"identifier": "getDistanceBetweenTwoPoints", "parameters": "( Point2D from, Point2D to)", "modifiers": "public static", "return": "double", "signature": "double getDistanceBetweenTwoPoints( Point2D from, Point2D to)", "full_signature": "public static double getDistanceBetweenTwoPoints( Point2D from, Point2D to)", "class_method_signature": "GeoUtils.getDistanceBetweenTwoPoints( Point2D from, Point2D to)", "testcase": false, "constructor": false}, {"identifier": "getGeoJsonPoint", "parameters": "( double longitude, double latitude )", "modifiers": "public static", "return": "Point", "signature": "Point getGeoJsonPoint( double longitude, double latitude )", "full_signature": "public static Point getGeoJsonPoint( double longitude, double latitude )", "class_method_signature": "GeoUtils.getGeoJsonPoint( double longitude, double latitude )", "testcase": false, "constructor": false}, {"identifier": "checkGeoJsonPointValid", "parameters": "( double longitude, double latitude )", "modifiers": "public static", "return": "boolean", "signature": "boolean checkGeoJsonPointValid( double longitude, double latitude )", "full_signature": "public static boolean checkGeoJsonPointValid( double longitude, double latitude )", "class_method_signature": "GeoUtils.checkGeoJsonPointValid( double longitude, double latitude )", "testcase": false, "constructor": false}, {"identifier": "checkPointWithMultiPolygon", "parameters": "( double longitude, double latitude,\n        Geometry geometry )", "modifiers": "public static", "return": "boolean", "signature": "boolean checkPointWithMultiPolygon( double longitude, double latitude,\n        Geometry geometry )", "full_signature": "public static boolean checkPointWithMultiPolygon( double longitude, double latitude,\n        Geometry geometry )", "class_method_signature": "GeoUtils.checkPointWithMultiPolygon( double longitude, double latitude,\n        Geometry geometry )", "testcase": false, "constructor": false}, {"identifier": "replaceUnsafeSvgText", "parameters": "(String svg )", "modifiers": "public static", "return": "String", "signature": "String replaceUnsafeSvgText(String svg )", "full_signature": "public static String replaceUnsafeSvgText(String svg )", "class_method_signature": "GeoUtils.replaceUnsafeSvgText(String svg )", "testcase": false, "constructor": false}, {"identifier": "replaceText", "parameters": "( String svg )", "modifiers": "private static", "return": "String", "signature": "String replaceText( String svg )", "full_signature": "private static String replaceText( String svg )", "class_method_signature": "GeoUtils.replaceText( String svg )", "testcase": false, "constructor": false}, {"identifier": "replaceInvalidPatterns", "parameters": "( String svg )", "modifiers": "private static", "return": "String", "signature": "String replaceInvalidPatterns( String svg )", "full_signature": "private static String replaceInvalidPatterns( String svg )", "class_method_signature": "GeoUtils.replaceInvalidPatterns( String svg )", "testcase": false, "constructor": false}, {"identifier": "getGeometryFromCoordinatesAndType", "parameters": "( FeatureType featureType, String coordinates )", "modifiers": "public static", "return": "Geometry", "signature": "Geometry getGeometryFromCoordinatesAndType( FeatureType featureType, String coordinates )", "full_signature": "public static Geometry getGeometryFromCoordinatesAndType( FeatureType featureType, String coordinates )", "class_method_signature": "GeoUtils.getGeometryFromCoordinatesAndType( FeatureType featureType, String coordinates )", "testcase": false, "constructor": false}, {"identifier": "getCoordinatesFromGeometry", "parameters": "( Geometry geometry )", "modifiers": "public static", "return": "String", "signature": "String getCoordinatesFromGeometry( Geometry geometry )", "full_signature": "public static String getCoordinatesFromGeometry( Geometry geometry )", "class_method_signature": "GeoUtils.getCoordinatesFromGeometry( Geometry geometry )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/GeoUtils.java"}, "focal_method": {"identifier": "checkPointWithMultiPolygon", "parameters": "( double longitude, double latitude,\n        Geometry geometry )", "modifiers": "public static", "return": "boolean", "body": "public static boolean checkPointWithMultiPolygon( double longitude, double latitude,\n        Geometry geometry )\n    {\n        try\n        {\n            boolean contains = false;\n\n            Point point = getGeoJsonPoint( longitude, latitude );\n\n            FeatureType featureType = FeatureType.getTypeFromName(geometry.getGeometryType());\n\n            if ( point != null && point.isValid() )\n            {\n                if ( featureType == FeatureType.POLYGON )\n                {\n                    Polygon polygon = (Polygon) geometry;\n                    contains = polygon.contains( point );\n                }\n                else if ( featureType == FeatureType.MULTI_POLYGON )\n                {\n                    MultiPolygon multiPolygon = (MultiPolygon) geometry;\n                    contains = multiPolygon.contains( point );\n                }\n            }\n\n            return contains;\n        }\n        catch ( Exception ex )\n        {\n            return false;\n        }\n    }", "signature": "boolean checkPointWithMultiPolygon( double longitude, double latitude,\n        Geometry geometry )", "full_signature": "public static boolean checkPointWithMultiPolygon( double longitude, double latitude,\n        Geometry geometry )", "class_method_signature": "GeoUtils.checkPointWithMultiPolygon( double longitude, double latitude,\n        Geometry geometry )", "testcase": false, "constructor": false, "invocations": ["getGeoJsonPoint", "getTypeFromName", "getGeometryType", "isValid", "contains", "contains"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}