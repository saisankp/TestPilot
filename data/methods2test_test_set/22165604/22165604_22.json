{"test_class": {"identifier": "ProvisionerTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/org/fdroid/fdroid/ProvisionerTest.java"}, "test_case": {"identifier": "extractProvisionsPlaintextObfuscated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void extractProvisionsPlaintextObfuscated() throws IOException {\n        Provisioner p = new Provisioner();\n        List<File> files = Arrays.asList(getResourceFile(\"demo_credentials_user1.fdrp\"));\n        List<Provisioner.ProvisionPlaintext> result = p.extractProvisionsPlaintext(files);\n\n        Assert.assertEquals(result.size(), 1);\n        Assert.assertEquals(\"{\\\"sigfp\\\": \\\"1111222233334444555566667777888899990000aaaabbbbccccddddeeeeffff\\\", \\\"name\\\": \\\"Example Repo\\\", \\\"password\\\": \\\"secret1\\\", \\\"url\\\": \\\"https://example.com/fdroid/repo\\\", \\\"username\\\": \\\"user1\\\"}\", result.get(0).getRepositoryProvision());\n        Assert.assertTrue(String.valueOf(result.get(0).getProvisionPath()).endsWith(\"demo_credentials_user1.fdrp\"));\n    }", "signature": "void extractProvisionsPlaintextObfuscated()", "full_signature": "@Test public void extractProvisionsPlaintextObfuscated()", "class_method_signature": "ProvisionerTest.extractProvisionsPlaintextObfuscated()", "testcase": true, "constructor": false, "invocations": ["asList", "getResourceFile", "extractProvisionsPlaintext", "assertEquals", "size", "assertEquals", "getRepositoryProvision", "get", "assertTrue", "endsWith", "valueOf", "getProvisionPath", "get"]}, "focal_class": {"identifier": "Provisioner", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TAG = \"Provisioner\";", "modifier": "public static final", "type": "String", "declarator": "TAG = \"Provisioner\"", "var_name": "TAG"}, {"original_string": "private static final String NEW_PROVISIONS_DIR = \"provisions\";", "modifier": "private static final", "type": "String", "declarator": "NEW_PROVISIONS_DIR = \"provisions\"", "var_name": "NEW_PROVISIONS_DIR"}], "methods": [{"identifier": "Provisioner", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Provisioner()", "full_signature": "protected  Provisioner()", "class_method_signature": "Provisioner.Provisioner()", "testcase": false, "constructor": true}, {"identifier": "scanAndProcess", "parameters": "(Context context)", "modifiers": "static", "return": "void", "signature": "void scanAndProcess(Context context)", "full_signature": "static void scanAndProcess(Context context)", "class_method_signature": "Provisioner.scanAndProcess(Context context)", "testcase": false, "constructor": false}, {"identifier": "findProvisionFiles", "parameters": "(Context context)", "modifiers": "private", "return": "List<File>", "signature": "List<File> findProvisionFiles(Context context)", "full_signature": "private List<File> findProvisionFiles(Context context)", "class_method_signature": "Provisioner.findProvisionFiles(Context context)", "testcase": false, "constructor": false}, {"identifier": "findProvisionFilesInDir", "parameters": "(File file)", "modifiers": "", "return": "List<File>", "signature": "List<File> findProvisionFilesInDir(File file)", "full_signature": " List<File> findProvisionFilesInDir(File file)", "class_method_signature": "Provisioner.findProvisionFilesInDir(File file)", "testcase": false, "constructor": false}, {"identifier": "rot13", "parameters": "(String text)", "modifiers": "", "return": "String", "signature": "String rot13(String text)", "full_signature": " String rot13(String text)", "class_method_signature": "Provisioner.rot13(String text)", "testcase": false, "constructor": false}, {"identifier": "deobfuscate", "parameters": "(String obfuscated)", "modifiers": "", "return": "String", "signature": "String deobfuscate(String obfuscated)", "full_signature": " String deobfuscate(String obfuscated)", "class_method_signature": "Provisioner.deobfuscate(String obfuscated)", "testcase": false, "constructor": false}, {"identifier": "extractProvisionsPlaintext", "parameters": "(List<File> files)", "modifiers": "", "return": "List<ProvisionPlaintext>", "signature": "List<ProvisionPlaintext> extractProvisionsPlaintext(List<File> files)", "full_signature": " List<ProvisionPlaintext> extractProvisionsPlaintext(List<File> files)", "class_method_signature": "Provisioner.extractProvisionsPlaintext(List<File> files)", "testcase": false, "constructor": false}, {"identifier": "parseProvisions", "parameters": "(List<ProvisionPlaintext> provisionPlaintexts)", "modifiers": "", "return": "List<Provision>", "signature": "List<Provision> parseProvisions(List<ProvisionPlaintext> provisionPlaintexts)", "full_signature": " List<Provision> parseProvisions(List<ProvisionPlaintext> provisionPlaintexts)", "class_method_signature": "Provisioner.parseProvisions(List<ProvisionPlaintext> provisionPlaintexts)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/fdroid/fdroid/Provisioner.java"}, "focal_method": {"identifier": "extractProvisionsPlaintext", "parameters": "(List<File> files)", "modifiers": "", "return": "List<ProvisionPlaintext>", "body": "List<ProvisionPlaintext> extractProvisionsPlaintext(List<File> files) {\n        List<ProvisionPlaintext> result = new ArrayList<>();\n        if (files != null) {\n            for (File file : files) {\n                ProvisionPlaintext plain = new ProvisionPlaintext();\n                plain.setProvisionPath(file.getAbsolutePath());\n                ZipInputStream in = null;\n                try {\n                    in = new ZipInputStream(new FileInputStream(file));\n                    ZipEntry zipEntry;\n                    while ((zipEntry = in.getNextEntry()) != null) { // NOPMD Avoid assignments in operands\n                        String name = zipEntry.getName();\n                        if (\"repo_provision.json\".equals(name)) {\n                            if (plain.getRepositoryProvision() != null) {\n                                throw new IOException(\"provision malformed: contains more than one repo provision file.\");\n                            }\n                            plain.setRepositoryProvision(IOUtils.toString(in, Charset.forName(\"UTF-8\")));\n                        } else if (\"repo_provision.ojson\".equals(name)) {\n                            if (plain.getRepositoryProvision() != null) {\n                                throw new IOException(\"provision malformed: contains more than one repo provision file.\");\n                            }\n                            plain.setRepositoryProvision(deobfuscate(IOUtils.toString(in, Charset.forName(\"UTF-8\"))));\n                        }\n                    }\n                } catch (FileNotFoundException e) {\n                    Utils.debugLog(TAG, String.format(\"finding provision '%s' failed\", file.getPath()), e);\n                    continue;\n                } catch (IOException e) {\n                    Utils.debugLog(TAG, String.format(\"reading provision '%s' failed\", file.getPath()), e);\n                    continue;\n                } finally {\n                    IOUtils.closeQuietly(in);\n                }\n\n                result.add(plain);\n            }\n        }\n        return result;\n    }", "signature": "List<ProvisionPlaintext> extractProvisionsPlaintext(List<File> files)", "full_signature": " List<ProvisionPlaintext> extractProvisionsPlaintext(List<File> files)", "class_method_signature": "Provisioner.extractProvisionsPlaintext(List<File> files)", "testcase": false, "constructor": false, "invocations": ["setProvisionPath", "getAbsolutePath", "getNextEntry", "getName", "equals", "getRepositoryProvision", "setRepositoryProvision", "toString", "forName", "equals", "getRepositoryProvision", "setRepositoryProvision", "deobfuscate", "toString", "forName", "debugLog", "format", "getPath", "debugLog", "format", "getPath", "closeQuietly", "add"]}, "repository": {"repo_id": 22165604, "url": "https://github.com/f-droid/fdroidclient", "stars": 331, "created": "7/23/2014 5:46:02 PM +00:00", "updates": "2020-01-25T14:27:31+00:00", "fork": "False", "license": "licensed"}}