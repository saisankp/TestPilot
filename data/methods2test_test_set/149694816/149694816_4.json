{"test_class": {"identifier": "FileTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/build/res/FileTest.java"}, "test_case": {"identifier": "shouldThrowIOException", "parameters": "()", "modifiers": "@Test(expected = IOException.class) public", "return": "void", "body": "@Test(expected = IOException.class)\n  public void shouldThrowIOException() throws IOException {\n    final Project project = new Project(randomUUID().toString(), new ProjectFile());\n    final File file = new File(project, randomUUID().toString());\n    file.open();\n  }", "signature": "void shouldThrowIOException()", "full_signature": "@Test(expected = IOException.class) public void shouldThrowIOException()", "class_method_signature": "FileTest.shouldThrowIOException()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "toString", "randomUUID", "open"]}, "focal_class": {"identifier": "File", "superclass": "extends Resource", "interfaces": "", "fields": [{"original_string": "@Getter\n  @Setter\n  protected DangerousSupplier<InputStream> contentProvider;", "modifier": "@Getter\n  @Setter\n  protected", "type": "DangerousSupplier<InputStream>", "declarator": "contentProvider", "var_name": "contentProvider"}], "methods": [{"identifier": "File", "parameters": "(final Project project, final String path)", "modifiers": "public", "return": "", "signature": " File(final Project project, final String path)", "full_signature": "public  File(final Project project, final String path)", "class_method_signature": "File.File(final Project project, final String path)", "testcase": false, "constructor": true}, {"identifier": "open", "parameters": "()", "modifiers": "public", "return": "BufferedReader", "signature": "BufferedReader open()", "full_signature": "public BufferedReader open()", "class_method_signature": "File.open()", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/build/res/File.java"}, "focal_method": {"identifier": "open", "parameters": "()", "modifiers": "public", "return": "BufferedReader", "body": "public BufferedReader open() throws IOException {\n    try {\n      return new BufferedReader(new InputStreamReader(contentProvider.get()));\n    } catch (final IOException ex) {\n      logger.error(\"Fail to open {}\", getPath());\n      throw ex;\n    } catch (final Throwable ex) {\n      throw new IllegalStateException(ex);\n    }\n  }", "signature": "BufferedReader open()", "full_signature": "public BufferedReader open()", "class_method_signature": "File.open()", "testcase": false, "constructor": false, "invocations": ["get", "error", "getPath"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}