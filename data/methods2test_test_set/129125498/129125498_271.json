{"test_class": {"identifier": "LegacyElasticsearchConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private LegacyElasticsearchConfig elasticSearchConfig;", "modifier": "@InjectMocks\n    private", "type": "LegacyElasticsearchConfig", "declarator": "elasticSearchConfig", "var_name": "elasticSearchConfig"}, {"original_string": "@Mock\n    private ElasticSearchProperties elasticSearchProperties;", "modifier": "@Mock\n    private", "type": "ElasticSearchProperties", "declarator": "elasticSearchProperties", "var_name": "elasticSearchProperties"}, {"original_string": "private ElasticSearchProperties.Config config;", "modifier": "private", "type": "ElasticSearchProperties.Config", "declarator": "config", "var_name": "config"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/elasticsearch/LegacyElasticsearchConfigTest.java"}, "test_case": {"identifier": "testBuildRestClient", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildRestClient() {\n        when(elasticSearchProperties.getConfig()).thenReturn(config);\n        when(elasticSearchProperties.getUrls()).thenReturn(\"localhost:8000\");\n        val elasticsearchRestClient = elasticSearchConfig.buildRestClient();\n        assertNotNull(elasticsearchRestClient);\n    }", "signature": "void testBuildRestClient()", "full_signature": "@Test public void testBuildRestClient()", "class_method_signature": "LegacyElasticsearchConfigTest.testBuildRestClient()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getConfig", "thenReturn", "when", "getUrls", "buildRestClient", "assertNotNull"]}, "focal_class": {"identifier": "LegacyElasticsearchConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ElasticSearchProperties elasticSearchProperties;", "modifier": "@Autowired\n    private", "type": "ElasticSearchProperties", "declarator": "elasticSearchProperties", "var_name": "elasticSearchProperties"}], "methods": [{"identifier": "buildRestClient", "parameters": "()", "modifiers": "@Bean(name = \"legacyRestHighLevelClient\", destroyMethod = \"close\") public", "return": "RestHighLevelClient", "signature": "RestHighLevelClient buildRestClient()", "full_signature": "@Bean(name = \"legacyRestHighLevelClient\", destroyMethod = \"close\") public RestHighLevelClient buildRestClient()", "class_method_signature": "LegacyElasticsearchConfig.buildRestClient()", "testcase": false, "constructor": false}, {"identifier": "buildRestClientBuilder", "parameters": "()", "modifiers": "private", "return": "RestClientBuilder", "signature": "RestClientBuilder buildRestClientBuilder()", "full_signature": "private RestClientBuilder buildRestClientBuilder()", "class_method_signature": "LegacyElasticsearchConfig.buildRestClientBuilder()", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/elasticsearch/LegacyElasticsearchConfig.java"}, "focal_method": {"identifier": "buildRestClient", "parameters": "()", "modifiers": "@Bean(name = \"legacyRestHighLevelClient\", destroyMethod = \"close\") public", "return": "RestHighLevelClient", "body": "@Bean(name = \"legacyRestHighLevelClient\", destroyMethod = \"close\")\n    public RestHighLevelClient buildRestClient() {\n        RestHighLevelClient elasticsearchClient = new RestHighLevelClient(buildRestClientBuilder());\n        return elasticsearchClient;\n    }", "signature": "RestHighLevelClient buildRestClient()", "full_signature": "@Bean(name = \"legacyRestHighLevelClient\", destroyMethod = \"close\") public RestHighLevelClient buildRestClient()", "class_method_signature": "LegacyElasticsearchConfig.buildRestClient()", "testcase": false, "constructor": false, "invocations": ["buildRestClientBuilder"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}