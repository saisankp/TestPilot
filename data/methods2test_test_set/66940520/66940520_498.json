{"test_class": {"identifier": "DefaultFieldFilterServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private SessionFactory sessionFactory;", "modifier": "@Mock\n    private", "type": "SessionFactory", "declarator": "sessionFactory", "var_name": "sessionFactory"}, {"original_string": "@Mock\n    private AclService aclService;", "modifier": "@Mock\n    private", "type": "AclService", "declarator": "aclService", "var_name": "aclService"}, {"original_string": "@Mock\n    private CurrentUserService currentUserService;", "modifier": "@Mock\n    private", "type": "CurrentUserService", "declarator": "currentUserService", "var_name": "currentUserService"}, {"original_string": "@Mock\n    private AttributeService attributeService;", "modifier": "@Mock\n    private", "type": "AttributeService", "declarator": "attributeService", "var_name": "attributeService"}, {"original_string": "private DefaultFieldFilterService service;", "modifier": "private", "type": "DefaultFieldFilterService", "declarator": "service", "var_name": "service"}, {"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}], "file": "dhis-2/dhis-services/dhis-service-node/src/test/java/org/hisp/dhis/fieldfilter/DefaultFieldFilterServiceTest.java"}, "test_case": {"identifier": "baseIdentifiableIdOnly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void baseIdentifiableIdOnly()\n    {\n        final OrganisationUnit ou1 = new OrganisationUnit();\n        ou1.setUid( \"abc1\" );\n\n        final OrganisationUnit ou2 = new OrganisationUnit();\n        ou2.setUid( \"abc2\" );\n\n        final CategoryOption option = new CategoryOption();\n        option.setUid( \"def1\" );\n        option.getOrganisationUnits().add( ou1 );\n        option.getOrganisationUnits().add( ou2 );\n\n        final FieldFilterParams params = new FieldFilterParams( Collections.singletonList( option ), Arrays.asList( \"id\", \"organisationUnits\" ) );\n        final ComplexNode node = service.toComplexNode( params );\n\n        Assert.assertEquals( \"categoryOption\", node.getName() );\n        Assert.assertTrue( getNamedNode( node.getUnorderedChildren(), \"id\" ) instanceof SimpleNode );\n        Assert.assertEquals( \"def1\", ( (SimpleNode) getNamedNode( node.getUnorderedChildren(), \"id\" ) ).getValue() );\n        Assert.assertTrue( getNamedNode( node.getUnorderedChildren(), \"organisationUnits\" ) instanceof CollectionNode );\n\n        final CollectionNode collectionNode = (CollectionNode) getNamedNode( node.getUnorderedChildren(), \"organisationUnits\" );\n        Assert.assertEquals( 2, collectionNode.getUnorderedChildren().size() );\n        final List<String> ouIds = new ArrayList<>();\n\n        Assert.assertTrue( collectionNode.getUnorderedChildren().get( 0 ) instanceof ComplexNode );\n        ComplexNode complexNode = (ComplexNode) collectionNode.getUnorderedChildren().get( 0 );\n        Assert.assertEquals( \"organisationUnit\", complexNode.getName() );\n        Assert.assertEquals( 1, complexNode.getUnorderedChildren().size() );\n        Assert.assertTrue( complexNode.getUnorderedChildren().get( 0 ) instanceof SimpleNode );\n        SimpleNode simpleNode = (SimpleNode) complexNode.getUnorderedChildren().get( 0 );\n        Assert.assertEquals( \"id\", simpleNode.getName() );\n        ouIds.add( String.valueOf( simpleNode.getValue() ) );\n\n        Assert.assertTrue( collectionNode.getUnorderedChildren().get( 1 ) instanceof ComplexNode );\n        complexNode = (ComplexNode) collectionNode.getUnorderedChildren().get( 1 );\n        Assert.assertEquals( \"organisationUnit\", complexNode.getName() );\n        Assert.assertEquals( 1, complexNode.getUnorderedChildren().size() );\n        Assert.assertTrue( complexNode.getUnorderedChildren().get( 0 ) instanceof SimpleNode );\n        simpleNode = (SimpleNode) complexNode.getUnorderedChildren().get( 0 );\n        Assert.assertEquals( \"id\", simpleNode.getName() );\n        ouIds.add( String.valueOf( simpleNode.getValue() ) );\n\n        Assert.assertThat( ouIds, Matchers.containsInAnyOrder( \"abc1\", \"abc2\" ) );\n    }", "signature": "void baseIdentifiableIdOnly()", "full_signature": "@Test public void baseIdentifiableIdOnly()", "class_method_signature": "DefaultFieldFilterServiceTest.baseIdentifiableIdOnly()", "testcase": true, "constructor": false, "invocations": ["setUid", "setUid", "setUid", "add", "getOrganisationUnits", "add", "getOrganisationUnits", "singletonList", "asList", "toComplexNode", "assertEquals", "getName", "assertTrue", "getNamedNode", "getUnorderedChildren", "assertEquals", "getValue", "getNamedNode", "getUnorderedChildren", "assertTrue", "getNamedNode", "getUnorderedChildren", "getNamedNode", "getUnorderedChildren", "assertEquals", "size", "getUnorderedChildren", "assertTrue", "get", "getUnorderedChildren", "get", "getUnorderedChildren", "assertEquals", "getName", "assertEquals", "size", "getUnorderedChildren", "assertTrue", "get", "getUnorderedChildren", "get", "getUnorderedChildren", "assertEquals", "getName", "add", "valueOf", "getValue", "assertTrue", "get", "getUnorderedChildren", "get", "getUnorderedChildren", "assertEquals", "getName", "assertEquals", "size", "getUnorderedChildren", "assertTrue", "get", "getUnorderedChildren", "get", "getUnorderedChildren", "assertEquals", "getName", "add", "valueOf", "getValue", "assertThat", "containsInAnyOrder"]}, "focal_class": {"identifier": "DefaultFieldFilterService", "superclass": "", "interfaces": "implements FieldFilterService", "fields": [{"original_string": "private final static Pattern FIELD_PATTERN = Pattern.compile( \"^(?<field>\\\\w+)\" );", "modifier": "private final static", "type": "Pattern", "declarator": "FIELD_PATTERN = Pattern.compile( \"^(?<field>\\\\w+)\" )", "var_name": "FIELD_PATTERN"}, {"original_string": "private final static Pattern TRANSFORMER_PATTERN = Pattern.compile( \"(?<type>\\\\||::|~)(?<name>\\\\w+)(?:\\\\((?<args>[\\\\w;]+)\\\\))?\" );", "modifier": "private final static", "type": "Pattern", "declarator": "TRANSFORMER_PATTERN = Pattern.compile( \"(?<type>\\\\||::|~)(?<name>\\\\w+)(?:\\\\((?<args>[\\\\w;]+)\\\\))?\" )", "var_name": "TRANSFORMER_PATTERN"}, {"original_string": "private final FieldParser fieldParser;", "modifier": "private final", "type": "FieldParser", "declarator": "fieldParser", "var_name": "fieldParser"}, {"original_string": "private final SchemaService schemaService;", "modifier": "private final", "type": "SchemaService", "declarator": "schemaService", "var_name": "schemaService"}, {"original_string": "private final AclService aclService;", "modifier": "private final", "type": "AclService", "declarator": "aclService", "var_name": "aclService"}, {"original_string": "private final CurrentUserService currentUserService;", "modifier": "private final", "type": "CurrentUserService", "declarator": "currentUserService", "var_name": "currentUserService"}, {"original_string": "private final AttributeService attributeService;", "modifier": "private final", "type": "AttributeService", "declarator": "attributeService", "var_name": "attributeService"}, {"original_string": "private final Set<NodeTransformer> nodeTransformers;", "modifier": "private final", "type": "Set<NodeTransformer>", "declarator": "nodeTransformers", "var_name": "nodeTransformers"}, {"original_string": "private ImmutableMap<String, Preset> presets = ImmutableMap.of();", "modifier": "private", "type": "ImmutableMap<String, Preset>", "declarator": "presets = ImmutableMap.of()", "var_name": "presets"}, {"original_string": "private ImmutableMap<String, NodeTransformer> transformers = ImmutableMap.of();", "modifier": "private", "type": "ImmutableMap<String, NodeTransformer>", "declarator": "transformers = ImmutableMap.of()", "var_name": "transformers"}, {"original_string": "private Property baseIdentifiableIdProperty;", "modifier": "private", "type": "Property", "declarator": "baseIdentifiableIdProperty", "var_name": "baseIdentifiableIdProperty"}, {"original_string": "private static final Cache<PropertyTransformer> TRANSFORMER_CACHE = new SimpleCacheBuilder<PropertyTransformer>()\n        .forRegion( \"propertyTransformerCache\" )\n        .expireAfterAccess( 12, TimeUnit.HOURS )\n        .withInitialCapacity( 20 )\n        .withMaximumSize( 30000 )\n        .build();", "modifier": "private static final", "type": "Cache<PropertyTransformer>", "declarator": "TRANSFORMER_CACHE = new SimpleCacheBuilder<PropertyTransformer>()\n        .forRegion( \"propertyTransformerCache\" )\n        .expireAfterAccess( 12, TimeUnit.HOURS )\n        .withInitialCapacity( 20 )\n        .withMaximumSize( 30000 )\n        .build()", "var_name": "TRANSFORMER_CACHE"}], "methods": [{"identifier": "DefaultFieldFilterService", "parameters": "(\n        FieldParser fieldParser,\n        SchemaService schemaService,\n        AclService aclService,\n        CurrentUserService currentUserService,\n        AttributeService attributeService,\n        @Autowired( required = false ) Set<NodeTransformer> nodeTransformers )", "modifiers": "public", "return": "", "signature": " DefaultFieldFilterService(\n        FieldParser fieldParser,\n        SchemaService schemaService,\n        AclService aclService,\n        CurrentUserService currentUserService,\n        AttributeService attributeService,\n        @Autowired( required = false ) Set<NodeTransformer> nodeTransformers )", "full_signature": "public  DefaultFieldFilterService(\n        FieldParser fieldParser,\n        SchemaService schemaService,\n        AclService aclService,\n        CurrentUserService currentUserService,\n        AttributeService attributeService,\n        @Autowired( required = false ) Set<NodeTransformer> nodeTransformers )", "class_method_signature": "DefaultFieldFilterService.DefaultFieldFilterService(\n        FieldParser fieldParser,\n        SchemaService schemaService,\n        AclService aclService,\n        CurrentUserService currentUserService,\n        AttributeService attributeService,\n        @Autowired( required = false ) Set<NodeTransformer> nodeTransformers )", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "DefaultFieldFilterService.init()", "testcase": false, "constructor": false}, {"identifier": "toComplexNode", "parameters": "( FieldFilterParams params )", "modifiers": "@Override public", "return": "ComplexNode", "signature": "ComplexNode toComplexNode( FieldFilterParams params )", "full_signature": "@Override public ComplexNode toComplexNode( FieldFilterParams params )", "class_method_signature": "DefaultFieldFilterService.toComplexNode( FieldFilterParams params )", "testcase": false, "constructor": false}, {"identifier": "toCollectionNode", "parameters": "( Class<?> wrapper, FieldFilterParams params )", "modifiers": "@Override public", "return": "CollectionNode", "signature": "CollectionNode toCollectionNode( Class<?> wrapper, FieldFilterParams params )", "full_signature": "@Override public CollectionNode toCollectionNode( Class<?> wrapper, FieldFilterParams params )", "class_method_signature": "DefaultFieldFilterService.toCollectionNode( Class<?> wrapper, FieldFilterParams params )", "testcase": false, "constructor": false}, {"identifier": "buildNode", "parameters": "( FieldMap fieldMap, Class<?> klass, Object object, User user, Defaults defaults )", "modifiers": "private", "return": "AbstractNode", "signature": "AbstractNode buildNode( FieldMap fieldMap, Class<?> klass, Object object, User user, Defaults defaults )", "full_signature": "private AbstractNode buildNode( FieldMap fieldMap, Class<?> klass, Object object, User user, Defaults defaults )", "class_method_signature": "DefaultFieldFilterService.buildNode( FieldMap fieldMap, Class<?> klass, Object object, User user, Defaults defaults )", "testcase": false, "constructor": false}, {"identifier": "mayExclude", "parameters": "( Class<?> klass, Defaults defaults )", "modifiers": "private", "return": "boolean", "signature": "boolean mayExclude( Class<?> klass, Defaults defaults )", "full_signature": "private boolean mayExclude( Class<?> klass, Defaults defaults )", "class_method_signature": "DefaultFieldFilterService.mayExclude( Class<?> klass, Defaults defaults )", "testcase": false, "constructor": false}, {"identifier": "shouldExclude", "parameters": "( Object object, Defaults defaults )", "modifiers": "private", "return": "boolean", "signature": "boolean shouldExclude( Object object, Defaults defaults )", "full_signature": "private boolean shouldExclude( Object object, Defaults defaults )", "class_method_signature": "DefaultFieldFilterService.shouldExclude( Object object, Defaults defaults )", "testcase": false, "constructor": false}, {"identifier": "buildNode", "parameters": "( FieldMap fieldMap, Class<?> klass, Object object, User user, String nodeName, Defaults defaults )", "modifiers": "private", "return": "AbstractNode", "signature": "AbstractNode buildNode( FieldMap fieldMap, Class<?> klass, Object object, User user, String nodeName, Defaults defaults )", "full_signature": "private AbstractNode buildNode( FieldMap fieldMap, Class<?> klass, Object object, User user, String nodeName, Defaults defaults )", "class_method_signature": "DefaultFieldFilterService.buildNode( FieldMap fieldMap, Class<?> klass, Object object, User user, String nodeName, Defaults defaults )", "testcase": false, "constructor": false}, {"identifier": "updateFields", "parameters": "( FieldMap fieldMap, Class<?> klass )", "modifiers": "private", "return": "void", "signature": "void updateFields( FieldMap fieldMap, Class<?> klass )", "full_signature": "private void updateFields( FieldMap fieldMap, Class<?> klass )", "class_method_signature": "DefaultFieldFilterService.updateFields( FieldMap fieldMap, Class<?> klass )", "testcase": false, "constructor": false}, {"identifier": "updateFields", "parameters": "( FieldMap fieldMap, Class<?> klass, boolean expandOnly )", "modifiers": "private", "return": "void", "signature": "void updateFields( FieldMap fieldMap, Class<?> klass, boolean expandOnly )", "full_signature": "private void updateFields( FieldMap fieldMap, Class<?> klass, boolean expandOnly )", "class_method_signature": "DefaultFieldFilterService.updateFields( FieldMap fieldMap, Class<?> klass, boolean expandOnly )", "testcase": false, "constructor": false}, {"identifier": "getFullFieldMap", "parameters": "( Schema schema )", "modifiers": "private", "return": "FieldMap", "signature": "FieldMap getFullFieldMap( Schema schema )", "full_signature": "private FieldMap getFullFieldMap( Schema schema )", "class_method_signature": "DefaultFieldFilterService.getFullFieldMap( Schema schema )", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "( Property currentProperty, Object object, List<String> fields )", "modifiers": "private", "return": "ComplexNode", "signature": "ComplexNode getProperties( Property currentProperty, Object object, List<String> fields )", "full_signature": "private ComplexNode getProperties( Property currentProperty, Object object, List<String> fields )", "class_method_signature": "DefaultFieldFilterService.getProperties( Property currentProperty, Object object, List<String> fields )", "testcase": false, "constructor": false}, {"identifier": "isBaseIdentifiableObjectIdOnly", "parameters": "( @Nonnull Object object, @Nonnull List<String> fields )", "modifiers": "private", "return": "boolean", "signature": "boolean isBaseIdentifiableObjectIdOnly( @Nonnull Object object, @Nonnull List<String> fields )", "full_signature": "private boolean isBaseIdentifiableObjectIdOnly( @Nonnull Object object, @Nonnull List<String> fields )", "class_method_signature": "DefaultFieldFilterService.isBaseIdentifiableObjectIdOnly( @Nonnull Object object, @Nonnull List<String> fields )", "testcase": false, "constructor": false}, {"identifier": "createBaseIdentifiableObjectIdNode", "parameters": "( @Nonnull Property currentProperty, @Nonnull Object object )", "modifiers": "private", "return": "ComplexNode", "signature": "ComplexNode createBaseIdentifiableObjectIdNode( @Nonnull Property currentProperty, @Nonnull Object object )", "full_signature": "private ComplexNode createBaseIdentifiableObjectIdNode( @Nonnull Property currentProperty, @Nonnull Object object )", "class_method_signature": "DefaultFieldFilterService.createBaseIdentifiableObjectIdNode( @Nonnull Property currentProperty, @Nonnull Object object )", "testcase": false, "constructor": false}, {"identifier": "isProperIdObject", "parameters": "( Class<?> klass )", "modifiers": "private", "return": "boolean", "signature": "boolean isProperIdObject( Class<?> klass )", "full_signature": "private boolean isProperIdObject( Class<?> klass )", "class_method_signature": "DefaultFieldFilterService.isProperIdObject( Class<?> klass )", "testcase": false, "constructor": false}, {"identifier": "handleJsonbObjectProperties", "parameters": "( Class<?> klass, Class<?> propertyClass, Object returnObject )", "modifiers": "private", "return": "Object", "signature": "Object handleJsonbObjectProperties( Class<?> klass, Class<?> propertyClass, Object returnObject )", "full_signature": "private Object handleJsonbObjectProperties( Class<?> klass, Class<?> propertyClass, Object returnObject )", "class_method_signature": "DefaultFieldFilterService.handleJsonbObjectProperties( Class<?> klass, Class<?> propertyClass, Object returnObject )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-node/src/main/java/org/hisp/dhis/fieldfilter/DefaultFieldFilterService.java"}, "focal_method": {"identifier": "toComplexNode", "parameters": "( FieldFilterParams params )", "modifiers": "@Override public", "return": "ComplexNode", "body": "@Override\n    public ComplexNode toComplexNode( FieldFilterParams params )\n    {\n        if ( params.getObjects().isEmpty() )\n        {\n            return null;\n        }\n\n        Object object = params.getObjects().get( 0 );\n        CollectionNode collectionNode = toCollectionNode( object.getClass(), params );\n\n        if ( !collectionNode.getChildren().isEmpty() )\n        {\n            return (ComplexNode) collectionNode.getChildren().get( 0 );\n        }\n\n        return null;\n    }", "signature": "ComplexNode toComplexNode( FieldFilterParams params )", "full_signature": "@Override public ComplexNode toComplexNode( FieldFilterParams params )", "class_method_signature": "DefaultFieldFilterService.toComplexNode( FieldFilterParams params )", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getObjects", "get", "getObjects", "toCollectionNode", "getClass", "isEmpty", "getChildren", "get", "getChildren"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}