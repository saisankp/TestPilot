{"test_class": {"identifier": "GeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "generator/src/test/java/org/jsonddl/generator/GeneratorTest.java"}, "test_case": {"identifier": "testReparseNormalized", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReparseNormalized() throws IOException {\n    InputStream res = getClass().getResourceAsStream(\"test-schema.js\");\n    Schema s = new Generator().parseNormalized(res);\n    assertEquals(6, s.getModels().size());\n  }", "signature": "void testReparseNormalized()", "full_signature": "@Test public void testReparseNormalized()", "class_method_signature": "GeneratorTest.testReparseNormalized()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "parseNormalized", "assertEquals", "size", "getModels"]}, "focal_class": {"identifier": "Generator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "Generator.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(InputStream schema, Options options, Dialect.Collector output)", "modifiers": "public", "return": "boolean", "signature": "boolean generate(InputStream schema, Options options, Dialect.Collector output)", "full_signature": "public boolean generate(InputStream schema, Options options, Dialect.Collector output)", "class_method_signature": "Generator.generate(InputStream schema, Options options, Dialect.Collector output)", "testcase": false, "constructor": false}, {"identifier": "parseIdiomatic", "parameters": "(Options options, InputStream schema, Dialect.Collector output)", "modifiers": "", "return": "Schema", "signature": "Schema parseIdiomatic(Options options, InputStream schema, Dialect.Collector output)", "full_signature": " Schema parseIdiomatic(Options options, InputStream schema, Dialect.Collector output)", "class_method_signature": "Generator.parseIdiomatic(Options options, InputStream schema, Dialect.Collector output)", "testcase": false, "constructor": false}, {"identifier": "parseNormalized", "parameters": "(InputStream schema)", "modifiers": "", "return": "Schema", "signature": "Schema parseNormalized(InputStream schema)", "full_signature": " Schema parseNormalized(InputStream schema)", "class_method_signature": "Generator.parseNormalized(InputStream schema)", "testcase": false, "constructor": false}, {"identifier": "castOrNull", "parameters": "(Class<T> clazz, AstNode node)", "modifiers": "private", "return": "T", "signature": "T castOrNull(Class<T> clazz, AstNode node)", "full_signature": "private T castOrNull(Class<T> clazz, AstNode node)", "class_method_signature": "Generator.castOrNull(Class<T> clazz, AstNode node)", "testcase": false, "constructor": false}, {"identifier": "extractName", "parameters": "(ObjectProperty prop)", "modifiers": "private", "return": "String", "signature": "String extractName(ObjectProperty prop)", "full_signature": "private String extractName(ObjectProperty prop)", "class_method_signature": "Generator.extractName(ObjectProperty prop)", "testcase": false, "constructor": false}, {"identifier": "extractProperty", "parameters": "(ObjectProperty prop)", "modifiers": "private", "return": "Property", "signature": "Property extractProperty(ObjectProperty prop)", "full_signature": "private Property extractProperty(ObjectProperty prop)", "class_method_signature": "Generator.extractProperty(ObjectProperty prop)", "testcase": false, "constructor": false}, {"identifier": "typeName", "parameters": "(AstNode node)", "modifiers": "private", "return": "Type", "signature": "Type typeName(AstNode node)", "full_signature": "private Type typeName(AstNode node)", "class_method_signature": "Generator.typeName(AstNode node)", "testcase": false, "constructor": false}], "file": "generator/src/main/java/org/jsonddl/generator/Generator.java"}, "focal_method": {"identifier": "parseNormalized", "parameters": "(InputStream schema)", "modifiers": "", "return": "Schema", "body": "Schema parseNormalized(InputStream schema) throws IOException {\n    @SuppressWarnings(\"unchecked\")\n    Map<String, Object> map = new Gson().fromJson(new InputStreamReader(schema, \"UTF8\"), Map.class);\n    return new Schema.Builder().from(map).build();\n  }", "signature": "Schema parseNormalized(InputStream schema)", "full_signature": " Schema parseNormalized(InputStream schema)", "class_method_signature": "Generator.parseNormalized(InputStream schema)", "testcase": false, "constructor": false, "invocations": ["fromJson", "build", "from"]}, "repository": {"repo_id": 2792886, "url": "https://github.com/bobvawter/JsonDdl", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 1306, "license": "licensed"}}