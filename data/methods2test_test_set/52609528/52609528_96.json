{"test_class": {"identifier": "RuleFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, Object> properties;", "modifier": "private", "type": "Map<String, Object>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private String routingRulesSchema;", "modifier": "private", "type": "String", "declarator": "routingRulesSchema", "var_name": "routingRulesSchema"}, {"original_string": "@org.junit.Rule\n    public ExpectedException thrown= ExpectedException.none();", "modifier": "@org.junit.Rule\n    public", "type": "ExpectedException", "declarator": "thrown= ExpectedException.none()", "var_name": "thrown"}], "file": "gateleen-routing/src/test/java/org/swisspush/gateleen/routing/RuleFactoryTest.java"}, "test_case": {"identifier": "testValidProxyOptions", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidProxyOptions(TestContext context) throws ValidationException {\n\n        String rules = \"{\\n\" +\n                \"  \\\"/gateleen/rule/1\\\": {\\n\" +\n                \"    \\\"description\\\": \\\"Test rule 1\\\",\\n\" +\n                \"    \\\"proxyOptions\\\": {\\n\" +\n                \"      \\\"type\\\": \\\"HTTP\\\",\\n\" +\n                \"      \\\"host\\\": \\\"someHost\\\",\\n\" +\n                \"      \\\"port\\\": 1234\\n\" +\n                \"    }\\n\" +\n                \"  },\\n\" +\n                \"  \\\"/gateleen/rule/2\\\": {\\n\" +\n                \"    \\\"description\\\": \\\"Test rule 2\\\",\\n\" +\n                \"    \\\"proxyOptions\\\": {\\n\" +\n                \"      \\\"type\\\": \\\"SOCKS5\\\",\\n\" +\n                \"      \\\"host\\\": \\\"someHost\\\",\\n\" +\n                \"      \\\"port\\\": 1234,\\n\" +\n                \"      \\\"username\\\": \\\"johndoe\\\",\\n\" +\n                \"      \\\"password\\\": \\\"secret\\\"\\n\" +\n                \"    }\\n\" +\n                \"  },\\n\" +\n                \"  \\\"/gateleen/rule/3\\\": {\\n\" +\n                \"    \\\"description\\\": \\\"Test rule 3\\\",\\n\" +\n                \"    \\\"proxyOptions\\\": {\\n\" +\n                \"      \\\"host\\\": \\\"someOtherHost\\\",\\n\" +\n                \"      \\\"port\\\": 5678\\n\" +\n                \"    }\\n\" +\n                \"  },\\n\" +\n                \"  \\\"/gateleen/rule/4\\\": {\\n\" +\n                \"    \\\"description\\\": \\\"Test rule 4 (without proxyOptions)\\\"\\n\" +\n                \"  }\\n\" +\n                \"}\";\n\n        List<Rule> rulesList = new RuleFactory(properties, routingRulesSchema).parseRules(Buffer.buffer(rules));\n\n        context.assertEquals(4, rulesList.size());\n\n        context.assertNotNull(rulesList.get(0).getProxyOptions());\n        context.assertEquals(ProxyType.HTTP, rulesList.get(0).getProxyOptions().getType());\n        context.assertEquals(\"someHost\", rulesList.get(0).getProxyOptions().getHost());\n        context.assertEquals(1234, rulesList.get(0).getProxyOptions().getPort());\n        context.assertNull(rulesList.get(0).getProxyOptions().getUsername());\n        context.assertNull(rulesList.get(0).getProxyOptions().getPassword());\n\n        context.assertNotNull(rulesList.get(1).getProxyOptions());\n        context.assertEquals(ProxyType.SOCKS5, rulesList.get(1).getProxyOptions().getType());\n        context.assertEquals(\"someHost\", rulesList.get(1).getProxyOptions().getHost());\n        context.assertEquals(1234, rulesList.get(1).getProxyOptions().getPort());\n        context.assertEquals(\"johndoe\", rulesList.get(1).getProxyOptions().getUsername());\n        context.assertEquals(\"secret\", rulesList.get(1).getProxyOptions().getPassword());\n\n        context.assertNotNull(rulesList.get(2).getProxyOptions());\n        context.assertEquals(ProxyType.HTTP, rulesList.get(2).getProxyOptions().getType()); // this is the default value\n        context.assertEquals(\"someOtherHost\", rulesList.get(2).getProxyOptions().getHost());\n        context.assertEquals(5678, rulesList.get(2).getProxyOptions().getPort());\n        context.assertNull(rulesList.get(2).getProxyOptions().getUsername());\n        context.assertNull(rulesList.get(2).getProxyOptions().getPassword());\n\n        context.assertNull(rulesList.get(3).getProxyOptions());\n    }", "signature": "void testValidProxyOptions(TestContext context)", "full_signature": "@Test public void testValidProxyOptions(TestContext context)", "class_method_signature": "RuleFactoryTest.testValidProxyOptions(TestContext context)", "testcase": true, "constructor": false, "invocations": ["parseRules", "buffer", "assertEquals", "size", "assertNotNull", "getProxyOptions", "get", "assertEquals", "getType", "getProxyOptions", "get", "assertEquals", "getHost", "getProxyOptions", "get", "assertEquals", "getPort", "getProxyOptions", "get", "assertNull", "getUsername", "getProxyOptions", "get", "assertNull", "getPassword", "getProxyOptions", "get", "assertNotNull", "getProxyOptions", "get", "assertEquals", "getType", "getProxyOptions", "get", "assertEquals", "getHost", "getProxyOptions", "get", "assertEquals", "getPort", "getProxyOptions", "get", "assertEquals", "getUsername", "getProxyOptions", "get", "assertEquals", "getPassword", "getProxyOptions", "get", "assertNotNull", "getProxyOptions", "get", "assertEquals", "getType", "getProxyOptions", "get", "assertEquals", "getHost", "getProxyOptions", "get", "assertEquals", "getPort", "getProxyOptions", "get", "assertNull", "getUsername", "getProxyOptions", "get", "assertNull", "getPassword", "getProxyOptions", "get", "assertNull", "getProxyOptions", "get"]}, "focal_class": {"identifier": "RuleFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(RuleFactory.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RuleFactory.class)", "var_name": "log"}, {"original_string": "private Pattern urlParsePattern = Pattern.compile(\"^(?<scheme>https?)://(?<host>[^/:]+)(:(?<port>\\\\$?[0-9]+))?(?<path>/.*)$\");", "modifier": "private", "type": "Pattern", "declarator": "urlParsePattern = Pattern.compile(\"^(?<scheme>https?)://(?<host>[^/:]+)(:(?<port>\\\\$?[0-9]+))?(?<path>/.*)$\")", "var_name": "urlParsePattern"}, {"original_string": "private final Map<String, Object> properties;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private String routingRulesSchema;", "modifier": "private", "type": "String", "declarator": "routingRulesSchema", "var_name": "routingRulesSchema"}], "methods": [{"identifier": "RuleFactory", "parameters": "(Map<String, Object> properties, String routingRulesSchema)", "modifiers": "public", "return": "", "signature": " RuleFactory(Map<String, Object> properties, String routingRulesSchema)", "full_signature": "public  RuleFactory(Map<String, Object> properties, String routingRulesSchema)", "class_method_signature": "RuleFactory.RuleFactory(Map<String, Object> properties, String routingRulesSchema)", "testcase": false, "constructor": true}, {"identifier": "parseRules", "parameters": "(Buffer buffer)", "modifiers": "public", "return": "List<Rule>", "signature": "List<Rule> parseRules(Buffer buffer)", "full_signature": "public List<Rule> parseRules(Buffer buffer)", "class_method_signature": "RuleFactory.parseRules(Buffer buffer)", "testcase": false, "constructor": false}, {"identifier": "createRules", "parameters": "(JsonObject rules)", "modifiers": "public", "return": "List<Rule>", "signature": "List<Rule> createRules(JsonObject rules)", "full_signature": "public List<Rule> createRules(JsonObject rules)", "class_method_signature": "RuleFactory.createRules(JsonObject rules)", "testcase": false, "constructor": false}, {"identifier": "setStorage", "parameters": "(Rule ruleObj, JsonObject rule, String path)", "modifiers": "private", "return": "void", "signature": "void setStorage(Rule ruleObj, JsonObject rule, String path)", "full_signature": "private void setStorage(Rule ruleObj, JsonObject rule, String path)", "class_method_signature": "RuleFactory.setStorage(Rule ruleObj, JsonObject rule, String path)", "testcase": false, "constructor": false}, {"identifier": "setTranslateStatus", "parameters": "(Rule ruleObj, JsonObject rule)", "modifiers": "private", "return": "void", "signature": "void setTranslateStatus(Rule ruleObj, JsonObject rule)", "full_signature": "private void setTranslateStatus(Rule ruleObj, JsonObject rule)", "class_method_signature": "RuleFactory.setTranslateStatus(Rule ruleObj, JsonObject rule)", "testcase": false, "constructor": false}, {"identifier": "setProxyOptions", "parameters": "(Rule ruleObj, JsonObject rule)", "modifiers": "private", "return": "void", "signature": "void setProxyOptions(Rule ruleObj, JsonObject rule)", "full_signature": "private void setProxyOptions(Rule ruleObj, JsonObject rule)", "class_method_signature": "RuleFactory.setProxyOptions(Rule ruleObj, JsonObject rule)", "testcase": false, "constructor": false}, {"identifier": "setStaticHeaders", "parameters": "(Rule ruleObj, JsonObject rule)", "modifiers": "@Deprecated private", "return": "void", "signature": "void setStaticHeaders(Rule ruleObj, JsonObject rule)", "full_signature": "@Deprecated private void setStaticHeaders(Rule ruleObj, JsonObject rule)", "class_method_signature": "RuleFactory.setStaticHeaders(Rule ruleObj, JsonObject rule)", "testcase": false, "constructor": false}, {"identifier": "prepareUrl", "parameters": "(String urlPattern, Rule ruleObj, String targetUrl, String path)", "modifiers": "private", "return": "void", "signature": "void prepareUrl(String urlPattern, Rule ruleObj, String targetUrl, String path)", "full_signature": "private void prepareUrl(String urlPattern, Rule ruleObj, String targetUrl, String path)", "class_method_signature": "RuleFactory.prepareUrl(String urlPattern, Rule ruleObj, String targetUrl, String path)", "testcase": false, "constructor": false}], "file": "gateleen-routing/src/main/java/org/swisspush/gateleen/routing/RuleFactory.java"}, "focal_method": {"identifier": "parseRules", "parameters": "(Buffer buffer)", "modifiers": "public", "return": "List<Rule>", "body": "public List<Rule> parseRules(Buffer buffer) throws ValidationException {\n        String replacedConfig;\n        try {\n            replacedConfig = StringUtils.replaceWildcardConfigs(buffer.toString(\"UTF-8\"), properties);\n        } catch (Exception e) {\n            throw new ValidationException(e);\n        }\n        ValidationResult validationResult = Validator.validateStatic(Buffer.buffer(replacedConfig), routingRulesSchema, log);\n        if (validationResult.isSuccess()) {\n            return createRules(new JsonObject(replacedConfig));\n        } else {\n            throw new ValidationException(validationResult);\n        }\n    }", "signature": "List<Rule> parseRules(Buffer buffer)", "full_signature": "public List<Rule> parseRules(Buffer buffer)", "class_method_signature": "RuleFactory.parseRules(Buffer buffer)", "testcase": false, "constructor": false, "invocations": ["replaceWildcardConfigs", "toString", "validateStatic", "buffer", "isSuccess", "createRules"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}