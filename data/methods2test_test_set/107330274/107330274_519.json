{"test_class": {"identifier": "TaskRelocationDataInjectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long REQUEST_TIMEOUT_MS = 1_000L;", "modifier": "private static final", "type": "long", "declarator": "REQUEST_TIMEOUT_MS = 1_000L", "var_name": "REQUEST_TIMEOUT_MS"}, {"original_string": "private static final long RELOCATION_TIMEOUT_MS = REQUEST_TIMEOUT_MS / 2;", "modifier": "private static final", "type": "long", "declarator": "RELOCATION_TIMEOUT_MS = REQUEST_TIMEOUT_MS / 2", "var_name": "RELOCATION_TIMEOUT_MS"}, {"original_string": "private final TestScheduler testScheduler = Schedulers.test();", "modifier": "private final", "type": "TestScheduler", "declarator": "testScheduler = Schedulers.test()", "var_name": "testScheduler"}, {"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test(testScheduler);", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test(testScheduler)", "var_name": "titusRuntime"}, {"original_string": "private static final Task TASK1 = GrpcJobManagementModelConverters.toGrpcTask(JobGenerator.oneBatchTask().toBuilder().withId(\"task1\").build(), EmptyLogStorageInfo.empty());", "modifier": "private static final", "type": "Task", "declarator": "TASK1 = GrpcJobManagementModelConverters.toGrpcTask(JobGenerator.oneBatchTask().toBuilder().withId(\"task1\").build(), EmptyLogStorageInfo.empty())", "var_name": "TASK1"}, {"original_string": "private static final Task TASK2 = GrpcJobManagementModelConverters.toGrpcTask(JobGenerator.oneBatchTask().toBuilder().withId(\"task2\").build(), EmptyLogStorageInfo.empty());", "modifier": "private static final", "type": "Task", "declarator": "TASK2 = GrpcJobManagementModelConverters.toGrpcTask(JobGenerator.oneBatchTask().toBuilder().withId(\"task2\").build(), EmptyLogStorageInfo.empty())", "var_name": "TASK2"}, {"original_string": "private final GrpcClientConfiguration grpcConfiguration = mock(GrpcClientConfiguration.class);", "modifier": "private final", "type": "GrpcClientConfiguration", "declarator": "grpcConfiguration = mock(GrpcClientConfiguration.class)", "var_name": "grpcConfiguration"}, {"original_string": "private final JobManagerConfiguration jobManagerConfiguration = mock(JobManagerConfiguration.class);", "modifier": "private final", "type": "JobManagerConfiguration", "declarator": "jobManagerConfiguration = mock(JobManagerConfiguration.class)", "var_name": "jobManagerConfiguration"}, {"original_string": "private final FeatureActivationConfiguration featureActivationConfiguration = mock(FeatureActivationConfiguration.class);", "modifier": "private final", "type": "FeatureActivationConfiguration", "declarator": "featureActivationConfiguration = mock(FeatureActivationConfiguration.class)", "var_name": "featureActivationConfiguration"}, {"original_string": "private final RelocationServiceClient relocationServiceClient = mock(RelocationServiceClient.class);", "modifier": "private final", "type": "RelocationServiceClient", "declarator": "relocationServiceClient = mock(RelocationServiceClient.class)", "var_name": "relocationServiceClient"}, {"original_string": "private final RelocationDataReplicator relocationDataReplicator = mock(RelocationDataReplicator.class);", "modifier": "private final", "type": "RelocationDataReplicator", "declarator": "relocationDataReplicator = mock(RelocationDataReplicator.class)", "var_name": "relocationDataReplicator"}, {"original_string": "private final TaskRelocationDataInjector taskRelocationDataInjector = new TaskRelocationDataInjector(\n            grpcConfiguration,\n            jobManagerConfiguration,\n            featureActivationConfiguration,\n            relocationServiceClient,\n            relocationDataReplicator,\n            testScheduler\n    );", "modifier": "private final", "type": "TaskRelocationDataInjector", "declarator": "taskRelocationDataInjector = new TaskRelocationDataInjector(\n            grpcConfiguration,\n            jobManagerConfiguration,\n            featureActivationConfiguration,\n            relocationServiceClient,\n            relocationDataReplicator,\n            testScheduler\n    )", "var_name": "taskRelocationDataInjector"}], "file": "titus-server-gateway/src/test/java/com/netflix/titus/gateway/service/v3/internal/TaskRelocationDataInjectorTest.java"}, "test_case": {"identifier": "testFindTaskWithRelocationDataFetchTimeout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindTaskWithRelocationDataFetchTimeout() {\n        when(relocationServiceClient.findTaskRelocationPlan(TASK1.getId())).thenReturn(Mono.never());\n\n        ExtTestSubscriber<Task> testSubscriber = new ExtTestSubscriber<>();\n        taskRelocationDataInjector.injectIntoTask(TASK1.getId(), Observable.just(TASK1)).subscribe(testSubscriber);\n\n        testSubscriber.assertOpen();\n        testScheduler.advanceTimeBy(RELOCATION_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n        assertThat(testSubscriber.takeNext()).isEqualTo(TASK1);\n        testSubscriber.assertOnCompleted();\n    }", "signature": "void testFindTaskWithRelocationDataFetchTimeout()", "full_signature": "@Test public void testFindTaskWithRelocationDataFetchTimeout()", "class_method_signature": "TaskRelocationDataInjectorTest.testFindTaskWithRelocationDataFetchTimeout()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findTaskRelocationPlan", "getId", "never", "subscribe", "injectIntoTask", "getId", "just", "assertOpen", "advanceTimeBy", "isEqualTo", "assertThat", "takeNext", "assertOnCompleted"]}, "focal_class": {"identifier": "TaskRelocationDataInjector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TaskRelocationDataInjector.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TaskRelocationDataInjector.class)", "var_name": "logger"}, {"original_string": "private static final long MAX_RELOCATION_DATA_STALENESS_MS = 30_000;", "modifier": "private static final", "type": "long", "declarator": "MAX_RELOCATION_DATA_STALENESS_MS = 30_000", "var_name": "MAX_RELOCATION_DATA_STALENESS_MS"}, {"original_string": "private final GrpcClientConfiguration configuration;", "modifier": "private final", "type": "GrpcClientConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final JobManagerConfiguration jobManagerConfiguration;", "modifier": "private final", "type": "JobManagerConfiguration", "declarator": "jobManagerConfiguration", "var_name": "jobManagerConfiguration"}, {"original_string": "private final FeatureActivationConfiguration featureActivationConfiguration;", "modifier": "private final", "type": "FeatureActivationConfiguration", "declarator": "featureActivationConfiguration", "var_name": "featureActivationConfiguration"}, {"original_string": "private final RelocationServiceClient relocationServiceClient;", "modifier": "private final", "type": "RelocationServiceClient", "declarator": "relocationServiceClient", "var_name": "relocationServiceClient"}, {"original_string": "private final RelocationDataReplicator relocationDataReplicator;", "modifier": "private final", "type": "RelocationDataReplicator", "declarator": "relocationDataReplicator", "var_name": "relocationDataReplicator"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}], "methods": [{"identifier": "TaskRelocationDataInjector", "parameters": "(\n            GrpcClientConfiguration configuration,\n            JobManagerConfiguration jobManagerConfiguration,\n            FeatureActivationConfiguration featureActivationConfiguration,\n            RelocationServiceClient relocationServiceClient,\n            RelocationDataReplicator relocationDataReplicator)", "modifiers": "@Inject", "return": "", "signature": " TaskRelocationDataInjector(\n            GrpcClientConfiguration configuration,\n            JobManagerConfiguration jobManagerConfiguration,\n            FeatureActivationConfiguration featureActivationConfiguration,\n            RelocationServiceClient relocationServiceClient,\n            RelocationDataReplicator relocationDataReplicator)", "full_signature": "@Inject  TaskRelocationDataInjector(\n            GrpcClientConfiguration configuration,\n            JobManagerConfiguration jobManagerConfiguration,\n            FeatureActivationConfiguration featureActivationConfiguration,\n            RelocationServiceClient relocationServiceClient,\n            RelocationDataReplicator relocationDataReplicator)", "class_method_signature": "TaskRelocationDataInjector.TaskRelocationDataInjector(\n            GrpcClientConfiguration configuration,\n            JobManagerConfiguration jobManagerConfiguration,\n            FeatureActivationConfiguration featureActivationConfiguration,\n            RelocationServiceClient relocationServiceClient,\n            RelocationDataReplicator relocationDataReplicator)", "testcase": false, "constructor": true}, {"identifier": "TaskRelocationDataInjector", "parameters": "(\n            GrpcClientConfiguration configuration,\n            JobManagerConfiguration jobManagerConfiguration,\n            FeatureActivationConfiguration featureActivationConfiguration,\n            RelocationServiceClient relocationServiceClient,\n            RelocationDataReplicator relocationDataReplicator,\n            Scheduler scheduler)", "modifiers": "@VisibleForTesting", "return": "", "signature": " TaskRelocationDataInjector(\n            GrpcClientConfiguration configuration,\n            JobManagerConfiguration jobManagerConfiguration,\n            FeatureActivationConfiguration featureActivationConfiguration,\n            RelocationServiceClient relocationServiceClient,\n            RelocationDataReplicator relocationDataReplicator,\n            Scheduler scheduler)", "full_signature": "@VisibleForTesting  TaskRelocationDataInjector(\n            GrpcClientConfiguration configuration,\n            JobManagerConfiguration jobManagerConfiguration,\n            FeatureActivationConfiguration featureActivationConfiguration,\n            RelocationServiceClient relocationServiceClient,\n            RelocationDataReplicator relocationDataReplicator,\n            Scheduler scheduler)", "class_method_signature": "TaskRelocationDataInjector.TaskRelocationDataInjector(\n            GrpcClientConfiguration configuration,\n            JobManagerConfiguration jobManagerConfiguration,\n            FeatureActivationConfiguration featureActivationConfiguration,\n            RelocationServiceClient relocationServiceClient,\n            RelocationDataReplicator relocationDataReplicator,\n            Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "injectIntoTask", "parameters": "(String taskId, Observable<Task> taskObservable)", "modifiers": "", "return": "Observable<Task>", "signature": "Observable<Task> injectIntoTask(String taskId, Observable<Task> taskObservable)", "full_signature": " Observable<Task> injectIntoTask(String taskId, Observable<Task> taskObservable)", "class_method_signature": "TaskRelocationDataInjector.injectIntoTask(String taskId, Observable<Task> taskObservable)", "testcase": false, "constructor": false}, {"identifier": "injectIntoTaskQueryResult", "parameters": "(Observable<TaskQueryResult> tasksObservable)", "modifiers": "", "return": "Observable<TaskQueryResult>", "signature": "Observable<TaskQueryResult> injectIntoTaskQueryResult(Observable<TaskQueryResult> tasksObservable)", "full_signature": " Observable<TaskQueryResult> injectIntoTaskQueryResult(Observable<TaskQueryResult> tasksObservable)", "class_method_signature": "TaskRelocationDataInjector.injectIntoTaskQueryResult(Observable<TaskQueryResult> tasksObservable)", "testcase": false, "constructor": false}, {"identifier": "shouldUseRelocationCache", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean shouldUseRelocationCache()", "full_signature": "private boolean shouldUseRelocationCache()", "class_method_signature": "TaskRelocationDataInjector.shouldUseRelocationCache()", "testcase": false, "constructor": false}, {"identifier": "getTaskRelocationTimeout", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getTaskRelocationTimeout()", "full_signature": "private long getTaskRelocationTimeout()", "class_method_signature": "TaskRelocationDataInjector.getTaskRelocationTimeout()", "testcase": false, "constructor": false}, {"identifier": "newTaskWithRelocationPlan", "parameters": "(Task task, TaskRelocationPlan relocationPlan)", "modifiers": "static", "return": "Task", "signature": "Task newTaskWithRelocationPlan(Task task, TaskRelocationPlan relocationPlan)", "full_signature": "static Task newTaskWithRelocationPlan(Task task, TaskRelocationPlan relocationPlan)", "class_method_signature": "TaskRelocationDataInjector.newTaskWithRelocationPlan(Task task, TaskRelocationPlan relocationPlan)", "testcase": false, "constructor": false}], "file": "titus-server-gateway/src/main/java/com/netflix/titus/gateway/service/v3/internal/TaskRelocationDataInjector.java"}, "focal_method": {"identifier": "injectIntoTask", "parameters": "(String taskId, Observable<Task> taskObservable)", "modifiers": "", "return": "Observable<Task>", "body": "Observable<Task> injectIntoTask(String taskId, Observable<Task> taskObservable) {\n        if (!featureActivationConfiguration.isMergingTaskMigrationPlanInGatewayEnabled()) {\n            return taskObservable;\n        }\n\n        if (shouldUseRelocationCache()) {\n            return taskObservable.map(task -> newTaskWithRelocationPlan(task, relocationDataReplicator.getCurrent().getPlans().get(taskId)));\n        }\n\n        Observable<Optional<TaskRelocationPlan>> relocationPlanResolver = ReactorExt.toObservable(relocationServiceClient.findTaskRelocationPlan(taskId))\n                .timeout(getTaskRelocationTimeout(), TimeUnit.MILLISECONDS, scheduler)\n                .doOnError(error -> logger.info(\"Could not resolve task relocation status for task: taskId={}, error={}\", taskId, ExceptionExt.toMessageChain(error)))\n                .onErrorReturn(e -> Optional.empty());\n\n        return Observable.zip(\n                taskObservable,\n                relocationPlanResolver,\n                (task, planOpt) -> planOpt.map(plan -> newTaskWithRelocationPlan(task, plan)).orElse(task)\n        );\n    }", "signature": "Observable<Task> injectIntoTask(String taskId, Observable<Task> taskObservable)", "full_signature": " Observable<Task> injectIntoTask(String taskId, Observable<Task> taskObservable)", "class_method_signature": "TaskRelocationDataInjector.injectIntoTask(String taskId, Observable<Task> taskObservable)", "testcase": false, "constructor": false, "invocations": ["isMergingTaskMigrationPlanInGatewayEnabled", "shouldUseRelocationCache", "map", "newTaskWithRelocationPlan", "get", "getPlans", "getCurrent", "onErrorReturn", "doOnError", "timeout", "toObservable", "findTaskRelocationPlan", "getTaskRelocationTimeout", "info", "toMessageChain", "empty", "zip", "orElse", "map", "newTaskWithRelocationPlan"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}