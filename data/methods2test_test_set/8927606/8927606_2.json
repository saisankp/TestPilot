{"test_class": {"identifier": "IdinSenderTest", "superclass": "extends Mockito", "interfaces": "", "fields": [{"original_string": "IdinSender sender = null;", "modifier": "", "type": "IdinSender", "declarator": "sender = null", "var_name": "sender"}], "file": "idin/src/test/java/nl/nn/adapterframework/extensions/idin/IdinSenderTest.java"}, "test_case": {"identifier": "issuersByCountry", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n\t@Test\n\tpublic void issuersByCountry() throws SenderException, TimeOutException, IOException {\n\t\tString message = \"<idin><issuersByCountry>true</issuersByCountry></idin>\";\n\t\tIPipeLineSession session = null;\n\t\tString result = sender.sendMessage(new Message(message), session).asString();\n\t\t//TODO assertEquals(\"result\", result);\n\t}", "signature": "void issuersByCountry()", "full_signature": "@Ignore @Test public void issuersByCountry()", "class_method_signature": "IdinSenderTest.issuersByCountry()", "testcase": true, "constructor": false, "invocations": ["asString", "sendMessage"]}, "focal_class": {"identifier": "IdinSender", "superclass": "extends SenderWithParametersBase", "interfaces": "implements HasPhysicalDestination", "fields": [{"original_string": "private String merchantID = null;", "modifier": "private", "type": "String", "declarator": "merchantID = null", "var_name": "merchantID"}, {"original_string": "private int merchantSubID = 0;", "modifier": "private", "type": "int", "declarator": "merchantSubID = 0", "var_name": "merchantSubID"}, {"original_string": "private String merchantReturnUrl = null;", "modifier": "private", "type": "String", "declarator": "merchantReturnUrl = null", "var_name": "merchantReturnUrl"}, {"original_string": "private String acquirerDirectoryUrl = null;", "modifier": "private", "type": "String", "declarator": "acquirerDirectoryUrl = null", "var_name": "acquirerDirectoryUrl"}, {"original_string": "private String acquirerTransactionUrl = null;", "modifier": "private", "type": "String", "declarator": "acquirerTransactionUrl = null", "var_name": "acquirerTransactionUrl"}, {"original_string": "private String acquirerStatusUrl = null;", "modifier": "private", "type": "String", "declarator": "acquirerStatusUrl = null", "var_name": "acquirerStatusUrl"}, {"original_string": "private String keyStoreLocation = null;", "modifier": "private", "type": "String", "declarator": "keyStoreLocation = null", "var_name": "keyStoreLocation"}, {"original_string": "private CredentialFactory keyStoreCredentials = null;", "modifier": "private", "type": "CredentialFactory", "declarator": "keyStoreCredentials = null", "var_name": "keyStoreCredentials"}, {"original_string": "private String merchantCertificateAlias = null;", "modifier": "private", "type": "String", "declarator": "merchantCertificateAlias = null", "var_name": "merchantCertificateAlias"}, {"original_string": "private CredentialFactory merchantCertificateCredentials = null;", "modifier": "private", "type": "CredentialFactory", "declarator": "merchantCertificateCredentials = null", "var_name": "merchantCertificateCredentials"}, {"original_string": "private String acquirerCertificateAlias = null;", "modifier": "private", "type": "String", "declarator": "acquirerCertificateAlias = null", "var_name": "acquirerCertificateAlias"}, {"original_string": "private String acquirerAlternativeCertificateAlias = null;", "modifier": "private", "type": "String", "declarator": "acquirerAlternativeCertificateAlias = null", "var_name": "acquirerAlternativeCertificateAlias"}, {"original_string": "private String SAMLCertificateAlias = null;", "modifier": "private", "type": "String", "declarator": "SAMLCertificateAlias = null", "var_name": "SAMLCertificateAlias"}, {"original_string": "private CredentialFactory SAMLCertificateCredentials = null;", "modifier": "private", "type": "CredentialFactory", "declarator": "SAMLCertificateCredentials = null", "var_name": "SAMLCertificateCredentials"}, {"original_string": "private boolean logsEnabled = false;", "modifier": "private", "type": "boolean", "declarator": "logsEnabled = false", "var_name": "logsEnabled"}, {"original_string": "private boolean serviceLogsEnabled = false;", "modifier": "private", "type": "boolean", "declarator": "serviceLogsEnabled = false", "var_name": "serviceLogsEnabled"}, {"original_string": "private String serviceLogsLocation = null;", "modifier": "private", "type": "String", "declarator": "serviceLogsLocation = null", "var_name": "serviceLogsLocation"}, {"original_string": "private String serviceLogsPattern = \"%Y-%M-%D\\\\%h%m%s.%f-%a.xml\";", "modifier": "private", "type": "String", "declarator": "serviceLogsPattern = \"%Y-%M-%D\\\\%h%m%s.%f-%a.xml\"", "var_name": "serviceLogsPattern"}, {"original_string": "private String action = \"DIRECTORY\";", "modifier": "private", "type": "String", "declarator": "action = \"DIRECTORY\"", "var_name": "action"}, {"original_string": "private List<String> actions = Arrays.asList(\"DIRECTORY\", \"RESPONSE\", \"AUTHENTICATE\");", "modifier": "private", "type": "List<String>", "declarator": "actions = Arrays.asList(\"DIRECTORY\", \"RESPONSE\", \"AUTHENTICATE\")", "var_name": "actions"}, {"original_string": "Configuration idinConfig = null;", "modifier": "", "type": "Configuration", "declarator": "idinConfig = null", "var_name": "idinConfig"}, {"original_string": "Communicator communicator = null;", "modifier": "", "type": "Communicator", "declarator": "communicator = null", "var_name": "communicator"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "IdinSender.configure()", "testcase": false, "constructor": false}, {"identifier": "getCommunicator", "parameters": "()", "modifiers": "public", "return": "Communicator", "signature": "Communicator getCommunicator()", "full_signature": "public Communicator getCommunicator()", "class_method_signature": "IdinSender.getCommunicator()", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "Message", "signature": "Message sendMessage(Message message, IPipeLineSession session)", "full_signature": "@Override public Message sendMessage(Message message, IPipeLineSession session)", "class_method_signature": "IdinSender.sendMessage(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "getPhysicalDestinationName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPhysicalDestinationName()", "full_signature": "@Override public String getPhysicalDestinationName()", "class_method_signature": "IdinSender.getPhysicalDestinationName()", "testcase": false, "constructor": false}, {"identifier": "setAction", "parameters": "(String action)", "modifiers": "public", "return": "void", "signature": "void setAction(String action)", "full_signature": "public void setAction(String action)", "class_method_signature": "IdinSender.setAction(String action)", "testcase": false, "constructor": false}, {"identifier": "getAction", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAction()", "full_signature": "public String getAction()", "class_method_signature": "IdinSender.getAction()", "testcase": false, "constructor": false}, {"identifier": "setMerchantID", "parameters": "(String merchantMerchantID)", "modifiers": "public", "return": "void", "signature": "void setMerchantID(String merchantMerchantID)", "full_signature": "public void setMerchantID(String merchantMerchantID)", "class_method_signature": "IdinSender.setMerchantID(String merchantMerchantID)", "testcase": false, "constructor": false}, {"identifier": "getMerchantID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMerchantID()", "full_signature": "public String getMerchantID()", "class_method_signature": "IdinSender.getMerchantID()", "testcase": false, "constructor": false}, {"identifier": "setMerchantSubID", "parameters": "(int merchantSubID)", "modifiers": "public", "return": "void", "signature": "void setMerchantSubID(int merchantSubID)", "full_signature": "public void setMerchantSubID(int merchantSubID)", "class_method_signature": "IdinSender.setMerchantSubID(int merchantSubID)", "testcase": false, "constructor": false}, {"identifier": "getMerchantSubID", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMerchantSubID()", "full_signature": "public int getMerchantSubID()", "class_method_signature": "IdinSender.getMerchantSubID()", "testcase": false, "constructor": false}, {"identifier": "setMerchantReturnUrl", "parameters": "(String merchantReturnUrl)", "modifiers": "public", "return": "void", "signature": "void setMerchantReturnUrl(String merchantReturnUrl)", "full_signature": "public void setMerchantReturnUrl(String merchantReturnUrl)", "class_method_signature": "IdinSender.setMerchantReturnUrl(String merchantReturnUrl)", "testcase": false, "constructor": false}, {"identifier": "getMerchantReturnUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMerchantReturnUrl()", "full_signature": "public String getMerchantReturnUrl()", "class_method_signature": "IdinSender.getMerchantReturnUrl()", "testcase": false, "constructor": false}, {"identifier": "setAcquirerDirectoryUrl", "parameters": "(String acquirerDirectoryUrl)", "modifiers": "public", "return": "void", "signature": "void setAcquirerDirectoryUrl(String acquirerDirectoryUrl)", "full_signature": "public void setAcquirerDirectoryUrl(String acquirerDirectoryUrl)", "class_method_signature": "IdinSender.setAcquirerDirectoryUrl(String acquirerDirectoryUrl)", "testcase": false, "constructor": false}, {"identifier": "getAcquirerDirectoryUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAcquirerDirectoryUrl()", "full_signature": "public String getAcquirerDirectoryUrl()", "class_method_signature": "IdinSender.getAcquirerDirectoryUrl()", "testcase": false, "constructor": false}, {"identifier": "setAcquirerTransactionUrl", "parameters": "(String acquirerTransactionUrl)", "modifiers": "public", "return": "void", "signature": "void setAcquirerTransactionUrl(String acquirerTransactionUrl)", "full_signature": "public void setAcquirerTransactionUrl(String acquirerTransactionUrl)", "class_method_signature": "IdinSender.setAcquirerTransactionUrl(String acquirerTransactionUrl)", "testcase": false, "constructor": false}, {"identifier": "getAcquirerTransactionUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAcquirerTransactionUrl()", "full_signature": "public String getAcquirerTransactionUrl()", "class_method_signature": "IdinSender.getAcquirerTransactionUrl()", "testcase": false, "constructor": false}, {"identifier": "setAcquirerStatusUrl", "parameters": "(String acquirerStatusUrl)", "modifiers": "public", "return": "void", "signature": "void setAcquirerStatusUrl(String acquirerStatusUrl)", "full_signature": "public void setAcquirerStatusUrl(String acquirerStatusUrl)", "class_method_signature": "IdinSender.setAcquirerStatusUrl(String acquirerStatusUrl)", "testcase": false, "constructor": false}, {"identifier": "getAcquirerStatusUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAcquirerStatusUrl()", "full_signature": "public String getAcquirerStatusUrl()", "class_method_signature": "IdinSender.getAcquirerStatusUrl()", "testcase": false, "constructor": false}, {"identifier": "setKeyStoreLocation", "parameters": "(String keyStoreLocation)", "modifiers": "public", "return": "void", "signature": "void setKeyStoreLocation(String keyStoreLocation)", "full_signature": "public void setKeyStoreLocation(String keyStoreLocation)", "class_method_signature": "IdinSender.setKeyStoreLocation(String keyStoreLocation)", "testcase": false, "constructor": false}, {"identifier": "getKeyStoreLocation", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getKeyStoreLocation()", "full_signature": "public String getKeyStoreLocation()", "class_method_signature": "IdinSender.getKeyStoreLocation()", "testcase": false, "constructor": false}, {"identifier": "setKeyStorePassword", "parameters": "(String keyStorePassword)", "modifiers": "public", "return": "void", "signature": "void setKeyStorePassword(String keyStorePassword)", "full_signature": "public void setKeyStorePassword(String keyStorePassword)", "class_method_signature": "IdinSender.setKeyStorePassword(String keyStorePassword)", "testcase": false, "constructor": false}, {"identifier": "setKeyStoreAuthAlias", "parameters": "(String keyStoreAuthAlias)", "modifiers": "public", "return": "void", "signature": "void setKeyStoreAuthAlias(String keyStoreAuthAlias)", "full_signature": "public void setKeyStoreAuthAlias(String keyStoreAuthAlias)", "class_method_signature": "IdinSender.setKeyStoreAuthAlias(String keyStoreAuthAlias)", "testcase": false, "constructor": false}, {"identifier": "getKeyStorePassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getKeyStorePassword()", "full_signature": "public String getKeyStorePassword()", "class_method_signature": "IdinSender.getKeyStorePassword()", "testcase": false, "constructor": false}, {"identifier": "setMerchantCertificateAlias", "parameters": "(String merchantCertificateAlias)", "modifiers": "public", "return": "void", "signature": "void setMerchantCertificateAlias(String merchantCertificateAlias)", "full_signature": "public void setMerchantCertificateAlias(String merchantCertificateAlias)", "class_method_signature": "IdinSender.setMerchantCertificateAlias(String merchantCertificateAlias)", "testcase": false, "constructor": false}, {"identifier": "getMerchantCertificateAlias", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMerchantCertificateAlias()", "full_signature": "public String getMerchantCertificateAlias()", "class_method_signature": "IdinSender.getMerchantCertificateAlias()", "testcase": false, "constructor": false}, {"identifier": "setMerchantCertificatePassword", "parameters": "(String merchantCertificatePassword)", "modifiers": "public", "return": "void", "signature": "void setMerchantCertificatePassword(String merchantCertificatePassword)", "full_signature": "public void setMerchantCertificatePassword(String merchantCertificatePassword)", "class_method_signature": "IdinSender.setMerchantCertificatePassword(String merchantCertificatePassword)", "testcase": false, "constructor": false}, {"identifier": "setMerchantCertificateAuthAlias", "parameters": "(String merchantCertificateAuthAlias)", "modifiers": "public", "return": "void", "signature": "void setMerchantCertificateAuthAlias(String merchantCertificateAuthAlias)", "full_signature": "public void setMerchantCertificateAuthAlias(String merchantCertificateAuthAlias)", "class_method_signature": "IdinSender.setMerchantCertificateAuthAlias(String merchantCertificateAuthAlias)", "testcase": false, "constructor": false}, {"identifier": "getMerchantCertificatePassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMerchantCertificatePassword()", "full_signature": "public String getMerchantCertificatePassword()", "class_method_signature": "IdinSender.getMerchantCertificatePassword()", "testcase": false, "constructor": false}, {"identifier": "setAcquirerCertificateAlias", "parameters": "(String acquirerCertificateAlias)", "modifiers": "public", "return": "void", "signature": "void setAcquirerCertificateAlias(String acquirerCertificateAlias)", "full_signature": "public void setAcquirerCertificateAlias(String acquirerCertificateAlias)", "class_method_signature": "IdinSender.setAcquirerCertificateAlias(String acquirerCertificateAlias)", "testcase": false, "constructor": false}, {"identifier": "getAcquirerCertificateAlias", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAcquirerCertificateAlias()", "full_signature": "public String getAcquirerCertificateAlias()", "class_method_signature": "IdinSender.getAcquirerCertificateAlias()", "testcase": false, "constructor": false}, {"identifier": "setAcquirerAlternativeCertificateAlias", "parameters": "(String acquirerAlternativeCertificateAlias)", "modifiers": "public", "return": "void", "signature": "void setAcquirerAlternativeCertificateAlias(String acquirerAlternativeCertificateAlias)", "full_signature": "public void setAcquirerAlternativeCertificateAlias(String acquirerAlternativeCertificateAlias)", "class_method_signature": "IdinSender.setAcquirerAlternativeCertificateAlias(String acquirerAlternativeCertificateAlias)", "testcase": false, "constructor": false}, {"identifier": "getAcquirerAlternativeCertificateAlias", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAcquirerAlternativeCertificateAlias()", "full_signature": "public String getAcquirerAlternativeCertificateAlias()", "class_method_signature": "IdinSender.getAcquirerAlternativeCertificateAlias()", "testcase": false, "constructor": false}, {"identifier": "setSAMLCertificateAlias", "parameters": "(String SAMLCertificateAlias)", "modifiers": "public", "return": "void", "signature": "void setSAMLCertificateAlias(String SAMLCertificateAlias)", "full_signature": "public void setSAMLCertificateAlias(String SAMLCertificateAlias)", "class_method_signature": "IdinSender.setSAMLCertificateAlias(String SAMLCertificateAlias)", "testcase": false, "constructor": false}, {"identifier": "getSAMLCertificateAlias", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSAMLCertificateAlias()", "full_signature": "public String getSAMLCertificateAlias()", "class_method_signature": "IdinSender.getSAMLCertificateAlias()", "testcase": false, "constructor": false}, {"identifier": "setSAMLCertificatePassword", "parameters": "(String SAMLCertificatePassword)", "modifiers": "public", "return": "void", "signature": "void setSAMLCertificatePassword(String SAMLCertificatePassword)", "full_signature": "public void setSAMLCertificatePassword(String SAMLCertificatePassword)", "class_method_signature": "IdinSender.setSAMLCertificatePassword(String SAMLCertificatePassword)", "testcase": false, "constructor": false}, {"identifier": "setSAMLCertificateAuthAlias", "parameters": "(String SAMLCertificateAuthAlias)", "modifiers": "public", "return": "void", "signature": "void setSAMLCertificateAuthAlias(String SAMLCertificateAuthAlias)", "full_signature": "public void setSAMLCertificateAuthAlias(String SAMLCertificateAuthAlias)", "class_method_signature": "IdinSender.setSAMLCertificateAuthAlias(String SAMLCertificateAuthAlias)", "testcase": false, "constructor": false}, {"identifier": "getSAMLCertificatePassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSAMLCertificatePassword()", "full_signature": "public String getSAMLCertificatePassword()", "class_method_signature": "IdinSender.getSAMLCertificatePassword()", "testcase": false, "constructor": false}, {"identifier": "setLogsEnabled", "parameters": "(boolean logsEnabled)", "modifiers": "public", "return": "void", "signature": "void setLogsEnabled(boolean logsEnabled)", "full_signature": "public void setLogsEnabled(boolean logsEnabled)", "class_method_signature": "IdinSender.setLogsEnabled(boolean logsEnabled)", "testcase": false, "constructor": false}, {"identifier": "getLogsEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getLogsEnabled()", "full_signature": "public boolean getLogsEnabled()", "class_method_signature": "IdinSender.getLogsEnabled()", "testcase": false, "constructor": false}, {"identifier": "setServiceLogsEnabled", "parameters": "(boolean serviceLogsEnabled)", "modifiers": "public", "return": "void", "signature": "void setServiceLogsEnabled(boolean serviceLogsEnabled)", "full_signature": "public void setServiceLogsEnabled(boolean serviceLogsEnabled)", "class_method_signature": "IdinSender.setServiceLogsEnabled(boolean serviceLogsEnabled)", "testcase": false, "constructor": false}, {"identifier": "getServiceLogsEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getServiceLogsEnabled()", "full_signature": "public boolean getServiceLogsEnabled()", "class_method_signature": "IdinSender.getServiceLogsEnabled()", "testcase": false, "constructor": false}, {"identifier": "setServiceLogsLocation", "parameters": "(String serviceLogsLocation)", "modifiers": "public", "return": "void", "signature": "void setServiceLogsLocation(String serviceLogsLocation)", "full_signature": "public void setServiceLogsLocation(String serviceLogsLocation)", "class_method_signature": "IdinSender.setServiceLogsLocation(String serviceLogsLocation)", "testcase": false, "constructor": false}, {"identifier": "getServiceLogsLocation", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getServiceLogsLocation()", "full_signature": "public String getServiceLogsLocation()", "class_method_signature": "IdinSender.getServiceLogsLocation()", "testcase": false, "constructor": false}, {"identifier": "setServiceLogsPattern", "parameters": "(String serviceLogsPattern)", "modifiers": "public", "return": "void", "signature": "void setServiceLogsPattern(String serviceLogsPattern)", "full_signature": "public void setServiceLogsPattern(String serviceLogsPattern)", "class_method_signature": "IdinSender.setServiceLogsPattern(String serviceLogsPattern)", "testcase": false, "constructor": false}, {"identifier": "getServiceLogsPattern", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getServiceLogsPattern()", "full_signature": "public String getServiceLogsPattern()", "class_method_signature": "IdinSender.getServiceLogsPattern()", "testcase": false, "constructor": false}], "file": "idin/src/main/java/nl/nn/adapterframework/extensions/idin/IdinSender.java"}, "focal_method": {"identifier": "sendMessage", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "Message", "body": "@Override\n\tpublic Message sendMessage(Message message, IPipeLineSession session) throws SenderException, TimeOutException {\n\n\t\tElement queryElement = null;\n\t\ttry {\n\t\t\tif (XmlUtils.isWellFormed(message.asString(), \"idin\")) {\n\t\t\t\tqueryElement = XmlUtils.buildElement(message.asString());\n\t\t\t} else {\n\t\t\t\tqueryElement = XmlUtils.buildElement(\"<idin/>\");\n\t\t\t}\n\t\t} catch (DomBuilderException | IOException e) {\n\t\t\tthrow new SenderException(e);\n\t\t}\n\n\t\tXmlBuilder result = new XmlBuilder(\"result\");\n\t\tErrorResponse error = null;\n\n\t\tif(getAction().equals(\"DIRECTORY\")) {\n\t\t\tDirectoryResponse response = getCommunicator().getDirectory();\n\n\t\t\tif(response.getIsError()) {\n\t\t\t\terror = response.getErrorResponse();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tXmlBuilder issuers = new XmlBuilder(\"issuers\");\n\n\t\t\t\tif(XmlUtils.getChildTagAsBoolean(queryElement, \"issuersByCountry\")) {\n\t\t\t\t\tfor (Entry<String, List<Issuer>> entry : response.getIssuersByCountry().entrySet()) {\n\t\t\t\t\t\tXmlBuilder countryXml = new XmlBuilder(\"country\");\n\t\t\t\t\t\tString country = entry.getKey();\n\t\t\t\t\t\tcountryXml.addAttribute(\"name\", country);\n\t\n\t\t\t\t\t\tfor(Issuer issuer : entry.getValue()) {\n\t\t\t\t\t\t\tXmlBuilder issuerXml = new XmlBuilder(\"issuer\");\n\t\t\t\t\t\t\tissuerXml.setValue(issuer.getIssuerName());\n\t\t\t\t\t\t\tissuerXml.addAttribute(\"id\", issuer.getIssuerID());\n\t\t\t\t\t\t\tcountryXml.addSubElement(issuerXml);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tissuers.addSubElement(countryXml);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor(Issuer issuer : response.getIssuers()) {\n\t\t\t\t\t\tXmlBuilder issuerXml = new XmlBuilder(\"issuer\");\n\t\t\t\t\t\tissuerXml.setValue(issuer.getIssuerName());\n\t\t\t\t\t\tissuerXml.addAttribute(\"id\", issuer.getIssuerID());\n\t\t\t\t\t\tissuerXml.addAttribute(\"country\", issuer.getIssuerCountry());\n\t\t\t\t\t\tissuers.addSubElement(issuerXml);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.addSubElement(issuers);\n\n\t\t\t\tXmlBuilder timestamp = new XmlBuilder(\"timestamp\");\n\t\t\t\tDate txDate = response.getDirectoryDateTimestamp().toGregorianCalendar().getTime();\n\t\t\t\ttimestamp.setValue(DateUtils.format(txDate, \"yyyy-MM-dd HH:mm:ss.SSS\"), false);\n\t\t\t\tresult.addSubElement(timestamp);\n\t\t\t}\n\n\t\t\tif(StringUtils.isNotEmpty(response.getRawMessage())) {\n\t\t\t\tlog.debug(response.getRawMessage());\n\t\t\t}\n\t\t}\n\t\telse if(getAction().equals(\"RESPONSE\")) {\n\t\t\tString transactionID = XmlUtils.getChildTagAsString(queryElement, \"transactionID\");\n\t\t\tif(StringUtils.isEmpty(transactionID))\n\t\t\t\tthrow new SenderException(\"no transactionID was supplied\");\n\n\t\t\tStatusRequest statusRequest = new StatusRequest();\n\t\t\tstatusRequest.setTransactionID(transactionID);\n\t\t\tStatusResponse response = getCommunicator().getResponse(statusRequest);\n\n\t\t\tif(response.getIsError()) {\n\t\t\t\terror = response.getErrorResponse();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tXmlBuilder status = new XmlBuilder(\"status\");\n\t\t\t\tstatus.setValue(response.getStatus(), false);\n\t\t\t\tresult.addSubElement(status);\n\n\t\t\t\tif(response.getStatus() == StatusResponse.Success) {\n\t\t\t\t\tSamlResponse saml = response.getSamlResponse();\n\t\t\t\t\tXmlBuilder samlXml = new XmlBuilder(\"saml\");\n\n\t\t\t\t\tXmlBuilder acquirerId = new XmlBuilder(\"acquirerId\");\n\t\t\t\t\tacquirerId.setValue(saml.getAcquirerID());\n\t\t\t\t\tsamlXml.addSubElement(acquirerId);\n\n\t\t\t\t\tXmlBuilder attributes = new XmlBuilder(\"attributes\");\n\t\t\t\t\tfor (Entry<String, String> entry : saml.getAttributes().entrySet()) {\n\t\t\t\t\t\tXmlBuilder attribute = new XmlBuilder(\"attribute\");\n\t\t\t\t\t\tattribute.addAttribute(\"name\", entry.getKey());\n\t\t\t\t\t\tattribute.setValue(entry.getValue());\n\t\t\t\t\t\tattributes.addSubElement(attribute);\n\t\t\t\t\t}\n\t\t\t\t\tsamlXml.addSubElement(attributes);\n\n\t\t\t\t\tXmlBuilder merchantReference = new XmlBuilder(\"merchantReference\");\n\t\t\t\t\tmerchantReference.setValue(saml.getMerchantReference());\n\t\t\t\t\tsamlXml.addSubElement(merchantReference);\n\n\t\t\t\t\tXmlBuilder version = new XmlBuilder(\"version\");\n\t\t\t\t\tversion.setValue(saml.getAcquirerID());\n\t\t\t\t\tsamlXml.addSubElement(version);\n\n\t\t\t\t\tresult.addSubElement(samlXml);\n\t\t\t\t}\n\n\t\t\t\tXmlBuilder transactionIdXml = new XmlBuilder(\"transactionID\");\n\t\t\t\ttransactionIdXml.setValue(response.getTransactionID(), false);\n\t\t\t\tresult.addSubElement(transactionIdXml);\n\n\t\t\t\tXmlBuilder timestamp = new XmlBuilder(\"timestamp\");\n\t\t\t\tDate txDate = response.getStatusDateTimestamp().toGregorianCalendar().getTime();\n\t\t\t\ttimestamp.setValue(DateUtils.format(txDate, \"yyyy-MM-dd HH:mm:ss.SSS\"), false);\n\t\t\t\tresult.addSubElement(timestamp);\n\t\t\t}\n\n\t\t\tif(StringUtils.isNotEmpty(response.getRawMessage())) {\n\t\t\t\tlog.debug(response.getRawMessage());\n\t\t\t}\n\t\t}\n\t\telse if(getAction().equals(\"AUTHENTICATE\")) {\n\t\t\tAuthenticationRequest authRequest = new AuthenticationRequest();\n\n\t\t\tString issuerId = XmlUtils.getChildTagAsString(queryElement, \"issuerId\");\n\t\t\tif(StringUtils.isEmpty(issuerId))\n\t\t\t\tthrow new SenderException(\"no issuerId was supplied\");\n\t\t\tauthRequest.setIssuerID(issuerId);\n\n\t\t\tString language = XmlUtils.getChildTagAsString(queryElement, \"language\");\n\t\t\tif(StringUtils.isNotEmpty(language))\n\t\t\t\tauthRequest.setLanguage(language);\n\n\t\t\tString expirationPeriod = XmlUtils.getChildTagAsString(queryElement, \"expirationPeriod\");\n\t\t\tif(StringUtils.isNotEmpty(expirationPeriod)) {\n\t\t\t\ttry {\n\t\t\t\t\tDuration duration = DatatypeFactory.newInstance().newDuration(expirationPeriod);\n\t\t\t\t\tauthRequest.setExpirationPeriod(duration);\n\t\t\t\t} catch (DatatypeConfigurationException e) {\n\t\t\t\t\tthrow new SenderException(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tString requestedServiceId = XmlUtils.getChildTagAsString(queryElement, \"requestedServiceId\");\n\t\t\tif(StringUtils.isNotEmpty(requestedServiceId)) {\n\t\t\t\tauthRequest.setRequestedServiceID(new ServiceId(requestedServiceId));\n\t\t\t}\n\n\t\t\tString merchantReference = XmlUtils.getChildTagAsString(queryElement, \"merchantReference\");\n\t\t\tif(StringUtils.isNotEmpty(requestedServiceId))\n\t\t\t\tauthRequest.setMerchantReference(merchantReference);\n\n\t\t\tAssuranceLevel assuranceLevel = AssuranceLevel.Loa3;\n\t\t\tString assurance = XmlUtils.getChildTagAsString(queryElement, \"assuranceLevel\");\n\t\t\tif(StringUtils.isNotEmpty(assurance))\n\t\t\t\tassuranceLevel = AssuranceLevel.valueOf(assurance);\n\t\t\tauthRequest.setAssuranceLevel(assuranceLevel);\n\n\n\t\t\tString entranceCode = XmlUtils.getChildTagAsString(queryElement, \"entranceCode\");\n\t\t\tif(StringUtils.isNotEmpty(entranceCode))\n\t\t\t\tauthRequest.setEntranceCode(entranceCode);\n\n\t\t\tAuthenticationResponse response = getCommunicator().newAuthenticationRequest(authRequest);\n\t\t\tif(response.getIsError()) {\n\t\t\t\terror = response.getErrorResponse();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tXmlBuilder authenticationURL = new XmlBuilder(\"authenticationURL\");\n\t\t\t\tauthenticationURL.setValue(response.getIssuerAuthenticationURL(), false);\n\t\t\t\tresult.addSubElement(authenticationURL);\n\n\t\t\t\tXmlBuilder transactionIdXml = new XmlBuilder(\"transactionID\");\n\t\t\t\ttransactionIdXml.setValue(response.getTransactionID(), false);\n\t\t\t\tresult.addSubElement(transactionIdXml);\n\n\t\t\t\tXmlBuilder creationTime = new XmlBuilder(\"creationTime\");\n\t\t\t\tDate txDate = response.getTransactionCreateDateTimestamp().toGregorianCalendar().getTime();\n\t\t\t\tcreationTime.setValue(DateUtils.format(txDate, \"yyyy-MM-dd HH:mm:ss.SSS\"), false);\n\t\t\t\tresult.addSubElement(creationTime);\n\t\t\t}\n\n\t\t\tif(StringUtils.isNotEmpty(response.getRawMessage())) {\n\t\t\t\tlog.debug(response.getRawMessage());\n\t\t\t}\n\t\t}\n\n\t\tif(error != null) {\n\t\t\tXmlBuilder errorXml = new XmlBuilder(\"error\");\n\t\t\tXmlBuilder statusCodeXml = new XmlBuilder(\"statusCode\");\n\t\t\tstatusCodeXml.setValue(error.getErrorCode());\n\t\t\terrorXml.addSubElement(statusCodeXml);\n\n\t\t\tXmlBuilder detailsXml = new XmlBuilder(\"details\");\n\t\t\tdetailsXml.setValue(error.getErrorDetails());\n\t\t\terrorXml.addSubElement(detailsXml);\n\n\t\t\tXmlBuilder messageXml = new XmlBuilder(\"message\");\n\t\t\tmessageXml.setValue(error.getErrorMessage());\n\t\t\terrorXml.addSubElement(messageXml);\n\n\t\t\tresult.addSubElement(errorXml);\n\t\t}\n\n\t\treturn new Message(result.toXML());\n\t}", "signature": "Message sendMessage(Message message, IPipeLineSession session)", "full_signature": "@Override public Message sendMessage(Message message, IPipeLineSession session)", "class_method_signature": "IdinSender.sendMessage(Message message, IPipeLineSession session)", "testcase": false, "constructor": false, "invocations": ["isWellFormed", "asString", "buildElement", "asString", "buildElement", "equals", "getAction", "getDirectory", "getCommunicator", "getIsError", "getErrorResponse", "getChildTagAsBoolean", "entrySet", "getIssuersByCountry", "getKey", "addAttribute", "getValue", "setValue", "getIssuerName", "addAttribute", "getIssuerID", "addSubElement", "addSubElement", "getIssuers", "setValue", "getIssuerName", "addAttribute", "getIssuerID", "addAttribute", "getIssuerCountry", "addSubElement", "addSubElement", "getTime", "toGregorianCalendar", "getDirectoryDateTimestamp", "setValue", "format", "addSubElement", "isNotEmpty", "getRawMessage", "debug", "getRawMessage", "equals", "getAction", "getChildTagAsString", "isEmpty", "setTransactionID", "getResponse", "getCommunicator", "getIsError", "getErrorResponse", "setValue", "getStatus", "addSubElement", "getStatus", "getSamlResponse", "setValue", "getAcquirerID", "addSubElement", "entrySet", "getAttributes", "addAttribute", "getKey", "setValue", "getValue", "addSubElement", "addSubElement", "setValue", "getMerchantReference", "addSubElement", "setValue", "getAcquirerID", "addSubElement", "addSubElement", "setValue", "getTransactionID", "addSubElement", "getTime", "toGregorianCalendar", "getStatusDateTimestamp", "setValue", "format", "addSubElement", "isNotEmpty", "getRawMessage", "debug", "getRawMessage", "equals", "getAction", "getChildTagAsString", "isEmpty", "setIssuerID", "getChildTagAsString", "isNotEmpty", "setLanguage", "getChildTagAsString", "isNotEmpty", "newDuration", "newInstance", "setExpirationPeriod", "getChildTagAsString", "isNotEmpty", "setRequestedServiceID", "getChildTagAsString", "isNotEmpty", "setMerchantReference", "getChildTagAsString", "isNotEmpty", "valueOf", "setAssuranceLevel", "getChildTagAsString", "isNotEmpty", "setEntranceCode", "newAuthenticationRequest", "getCommunicator", "getIsError", "getErrorResponse", "setValue", "getIssuerAuthenticationURL", "addSubElement", "setValue", "getTransactionID", "addSubElement", "getTime", "toGregorianCalendar", "getTransactionCreateDateTimestamp", "setValue", "format", "addSubElement", "isNotEmpty", "getRawMessage", "debug", "getRawMessage", "setValue", "getErrorCode", "addSubElement", "setValue", "getErrorDetails", "addSubElement", "setValue", "getErrorMessage", "addSubElement", "addSubElement", "toXML"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}