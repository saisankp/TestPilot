{"test_class": {"identifier": "TasksRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String TASK_TITLE = \"title\";", "modifier": "private final static", "type": "String", "declarator": "TASK_TITLE = \"title\"", "var_name": "TASK_TITLE"}, {"original_string": "private final static String TASK_TITLE2 = \"title2\";", "modifier": "private final static", "type": "String", "declarator": "TASK_TITLE2 = \"title2\"", "var_name": "TASK_TITLE2"}, {"original_string": "private final static String TASK_TITLE3 = \"title3\";", "modifier": "private final static", "type": "String", "declarator": "TASK_TITLE3 = \"title3\"", "var_name": "TASK_TITLE3"}, {"original_string": "private static List<Task> TASKS = Lists.newArrayList(new Task(\"Title1\", \"Description1\"),\n            new Task(\"Title2\", \"Description2\"));", "modifier": "private static", "type": "List<Task>", "declarator": "TASKS = Lists.newArrayList(new Task(\"Title1\", \"Description1\"),\n            new Task(\"Title2\", \"Description2\"))", "var_name": "TASKS"}, {"original_string": "private TasksRepository mTasksRepository;", "modifier": "private", "type": "TasksRepository", "declarator": "mTasksRepository", "var_name": "mTasksRepository"}, {"original_string": "private TestSubscriber<List<Task>> mTasksTestSubscriber;", "modifier": "private", "type": "TestSubscriber<List<Task>>", "declarator": "mTasksTestSubscriber", "var_name": "mTasksTestSubscriber"}, {"original_string": "@Mock\n    private TasksDataSource mTasksRemoteDataSource;", "modifier": "@Mock\n    private", "type": "TasksDataSource", "declarator": "mTasksRemoteDataSource", "var_name": "mTasksRemoteDataSource"}, {"original_string": "@Mock\n    private TasksDataSource mTasksLocalDataSource;", "modifier": "@Mock\n    private", "type": "TasksDataSource", "declarator": "mTasksLocalDataSource", "var_name": "mTasksLocalDataSource"}, {"original_string": "@Mock\n    private Context mContext;", "modifier": "@Mock\n    private", "type": "Context", "declarator": "mContext", "var_name": "mContext"}], "file": "data/src/test/java/com/example/data/source/TasksRepositoryTest.java"}, "test_case": {"identifier": "getTask_requestsSingleTaskFromLocalDataSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getTask_requestsSingleTaskFromLocalDataSource() {\n        // Given a stub completed task with title and description in the local repository\n        Task task = new Task(TASK_TITLE, \"Some Task Description\", true);\n        Optional<Task> taskOptional = Optional.of(task);\n        setTaskAvailable(mTasksLocalDataSource, taskOptional);\n        // And the task not available in the remote repository\n        setTaskNotAvailable(mTasksRemoteDataSource, taskOptional.get().getId());\n\n        // When a task is requested from the tasks repository\n        TestSubscriber<Optional<Task>> testSubscriber = new TestSubscriber<>();\n        mTasksRepository.getTask(task.getId()).subscribe(testSubscriber);\n\n        // Then the task is loaded from the database\n        Mockito.verify(mTasksLocalDataSource).getTask(Matchers.eq(task.getId()));\n        testSubscriber.assertValue(taskOptional);\n    }", "signature": "void getTask_requestsSingleTaskFromLocalDataSource()", "full_signature": "@Test public void getTask_requestsSingleTaskFromLocalDataSource()", "class_method_signature": "TasksRepositoryTest.getTask_requestsSingleTaskFromLocalDataSource()", "testcase": true, "constructor": false, "invocations": ["of", "setTaskAvailable", "setTaskNotAvailable", "getId", "get", "subscribe", "getTask", "getId", "getTask", "verify", "eq", "getId", "assertValue"]}, "focal_class": {"identifier": "TasksRepository", "superclass": "", "interfaces": "implements TasksDataSource", "fields": [{"original_string": "@Nullable\n    private static TasksRepository INSTANCE = null;", "modifier": "@Nullable\n    private static", "type": "TasksRepository", "declarator": "INSTANCE = null", "var_name": "INSTANCE"}, {"original_string": "@NonNull\n    private final TasksDataSource mTasksRemoteDataSource;", "modifier": "@NonNull\n    private final", "type": "TasksDataSource", "declarator": "mTasksRemoteDataSource", "var_name": "mTasksRemoteDataSource"}, {"original_string": "@NonNull\n    private final TasksDataSource mTasksLocalDataSource;", "modifier": "@NonNull\n    private final", "type": "TasksDataSource", "declarator": "mTasksLocalDataSource", "var_name": "mTasksLocalDataSource"}, {"original_string": "@VisibleForTesting\n    @Nullable\n    Map<String, Task> mCachedTasks;", "modifier": "@VisibleForTesting\n    @Nullable", "type": "Map<String, Task>", "declarator": "mCachedTasks", "var_name": "mCachedTasks"}, {"original_string": "@VisibleForTesting\n    boolean mCacheIsDirty = false;", "modifier": "@VisibleForTesting", "type": "boolean", "declarator": "mCacheIsDirty = false", "var_name": "mCacheIsDirty"}], "methods": [{"identifier": "TasksRepository", "parameters": "(@NonNull TasksDataSource tasksRemoteDataSource,\n                            @NonNull TasksDataSource tasksLocalDataSource)", "modifiers": "private", "return": "", "signature": " TasksRepository(@NonNull TasksDataSource tasksRemoteDataSource,\n                            @NonNull TasksDataSource tasksLocalDataSource)", "full_signature": "private  TasksRepository(@NonNull TasksDataSource tasksRemoteDataSource,\n                            @NonNull TasksDataSource tasksLocalDataSource)", "class_method_signature": "TasksRepository.TasksRepository(@NonNull TasksDataSource tasksRemoteDataSource,\n                            @NonNull TasksDataSource tasksLocalDataSource)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(@NonNull TasksDataSource tasksRemoteDataSource,\n                                              @NonNull TasksDataSource tasksLocalDataSource)", "modifiers": "public static", "return": "TasksRepository", "signature": "TasksRepository getInstance(@NonNull TasksDataSource tasksRemoteDataSource,\n                                              @NonNull TasksDataSource tasksLocalDataSource)", "full_signature": "public static TasksRepository getInstance(@NonNull TasksDataSource tasksRemoteDataSource,\n                                              @NonNull TasksDataSource tasksLocalDataSource)", "class_method_signature": "TasksRepository.getInstance(@NonNull TasksDataSource tasksRemoteDataSource,\n                                              @NonNull TasksDataSource tasksLocalDataSource)", "testcase": false, "constructor": false}, {"identifier": "destroyInstance", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void destroyInstance()", "full_signature": "public static void destroyInstance()", "class_method_signature": "TasksRepository.destroyInstance()", "testcase": false, "constructor": false}, {"identifier": "getTasks", "parameters": "()", "modifiers": "@Override public", "return": "Flowable<List<Task>>", "signature": "Flowable<List<Task>> getTasks()", "full_signature": "@Override public Flowable<List<Task>> getTasks()", "class_method_signature": "TasksRepository.getTasks()", "testcase": false, "constructor": false}, {"identifier": "getAndCacheLocalTasks", "parameters": "()", "modifiers": "private", "return": "Flowable<List<Task>>", "signature": "Flowable<List<Task>> getAndCacheLocalTasks()", "full_signature": "private Flowable<List<Task>> getAndCacheLocalTasks()", "class_method_signature": "TasksRepository.getAndCacheLocalTasks()", "testcase": false, "constructor": false}, {"identifier": "getAndSaveRemoteTasks", "parameters": "()", "modifiers": "private", "return": "Flowable<List<Task>>", "signature": "Flowable<List<Task>> getAndSaveRemoteTasks()", "full_signature": "private Flowable<List<Task>> getAndSaveRemoteTasks()", "class_method_signature": "TasksRepository.getAndSaveRemoteTasks()", "testcase": false, "constructor": false}, {"identifier": "saveTask", "parameters": "(@NonNull Task task)", "modifiers": "@Override public", "return": "void", "signature": "void saveTask(@NonNull Task task)", "full_signature": "@Override public void saveTask(@NonNull Task task)", "class_method_signature": "TasksRepository.saveTask(@NonNull Task task)", "testcase": false, "constructor": false}, {"identifier": "completeTask", "parameters": "(@NonNull Task task)", "modifiers": "@Override public", "return": "void", "signature": "void completeTask(@NonNull Task task)", "full_signature": "@Override public void completeTask(@NonNull Task task)", "class_method_signature": "TasksRepository.completeTask(@NonNull Task task)", "testcase": false, "constructor": false}, {"identifier": "completeTask", "parameters": "(@NonNull String taskId)", "modifiers": "@Override public", "return": "void", "signature": "void completeTask(@NonNull String taskId)", "full_signature": "@Override public void completeTask(@NonNull String taskId)", "class_method_signature": "TasksRepository.completeTask(@NonNull String taskId)", "testcase": false, "constructor": false}, {"identifier": "activateTask", "parameters": "(@NonNull Task task)", "modifiers": "@Override public", "return": "void", "signature": "void activateTask(@NonNull Task task)", "full_signature": "@Override public void activateTask(@NonNull Task task)", "class_method_signature": "TasksRepository.activateTask(@NonNull Task task)", "testcase": false, "constructor": false}, {"identifier": "activateTask", "parameters": "(@NonNull String taskId)", "modifiers": "@Override public", "return": "void", "signature": "void activateTask(@NonNull String taskId)", "full_signature": "@Override public void activateTask(@NonNull String taskId)", "class_method_signature": "TasksRepository.activateTask(@NonNull String taskId)", "testcase": false, "constructor": false}, {"identifier": "clearCompletedTasks", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearCompletedTasks()", "full_signature": "@Override public void clearCompletedTasks()", "class_method_signature": "TasksRepository.clearCompletedTasks()", "testcase": false, "constructor": false}, {"identifier": "getTask", "parameters": "(@NonNull final String taskId)", "modifiers": "@Override public", "return": "Flowable<Optional<Task>>", "signature": "Flowable<Optional<Task>> getTask(@NonNull final String taskId)", "full_signature": "@Override public Flowable<Optional<Task>> getTask(@NonNull final String taskId)", "class_method_signature": "TasksRepository.getTask(@NonNull final String taskId)", "testcase": false, "constructor": false}, {"identifier": "refreshTasks", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void refreshTasks()", "full_signature": "@Override public void refreshTasks()", "class_method_signature": "TasksRepository.refreshTasks()", "testcase": false, "constructor": false}, {"identifier": "deleteAllTasks", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void deleteAllTasks()", "full_signature": "@Override public void deleteAllTasks()", "class_method_signature": "TasksRepository.deleteAllTasks()", "testcase": false, "constructor": false}, {"identifier": "deleteTask", "parameters": "(@NonNull String taskId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteTask(@NonNull String taskId)", "full_signature": "@Override public void deleteTask(@NonNull String taskId)", "class_method_signature": "TasksRepository.deleteTask(@NonNull String taskId)", "testcase": false, "constructor": false}, {"identifier": "getTaskWithId", "parameters": "(@NonNull String id)", "modifiers": "@Nullable private", "return": "Task", "signature": "Task getTaskWithId(@NonNull String id)", "full_signature": "@Nullable private Task getTaskWithId(@NonNull String id)", "class_method_signature": "TasksRepository.getTaskWithId(@NonNull String id)", "testcase": false, "constructor": false}, {"identifier": "getTaskWithIdFromLocalRepository", "parameters": "(@NonNull final String taskId)", "modifiers": "@NonNull", "return": "Flowable<Optional<Task>>", "signature": "Flowable<Optional<Task>> getTaskWithIdFromLocalRepository(@NonNull final String taskId)", "full_signature": "@NonNull Flowable<Optional<Task>> getTaskWithIdFromLocalRepository(@NonNull final String taskId)", "class_method_signature": "TasksRepository.getTaskWithIdFromLocalRepository(@NonNull final String taskId)", "testcase": false, "constructor": false}], "file": "data/src/main/java/com/example/data/source/TasksRepository.java"}, "focal_method": {"identifier": "getTask", "parameters": "(@NonNull final String taskId)", "modifiers": "@Override public", "return": "Flowable<Optional<Task>>", "body": "@Override\n    public Flowable<Optional<Task>> getTask(@NonNull final String taskId) {\n        checkNotNull(taskId);\n\n        final Task cachedTask = getTaskWithId(taskId);\n\n        // Respond immediately with cache if available\n        if (cachedTask != null) {\n            return Flowable.just(Optional.of(cachedTask));\n        }\n\n        // Load from server/persisted if needed.\n\n        // Do in memory cache update to keep the app UI up to date\n        if (mCachedTasks == null) {\n            mCachedTasks = new LinkedHashMap<>();\n        }\n\n        // Is the task in the local data source? If not, query the network.\n        Flowable<Optional<Task>> localTask = getTaskWithIdFromLocalRepository(taskId);\n        Flowable<Optional<Task>> remoteTask = mTasksRemoteDataSource\n                .getTask(taskId)\n                .doOnNext(taskOptional -> {\n                    if (taskOptional.isPresent()) {\n                        Task task = taskOptional.get();\n                        mTasksLocalDataSource.saveTask(task);\n                        mCachedTasks.put(task.getId(), task);\n                    }\n                });\n\n        return Flowable.concat(localTask, remoteTask)\n                .firstElement()\n                .toFlowable();\n    }", "signature": "Flowable<Optional<Task>> getTask(@NonNull final String taskId)", "full_signature": "@Override public Flowable<Optional<Task>> getTask(@NonNull final String taskId)", "class_method_signature": "TasksRepository.getTask(@NonNull final String taskId)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "getTaskWithId", "just", "of", "getTaskWithIdFromLocalRepository", "doOnNext", "getTask", "isPresent", "get", "saveTask", "put", "getId", "toFlowable", "firstElement", "concat"]}, "repository": {"repo_id": 124624258, "url": "https://github.com/cliveleehere/multimodulegradle", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 20323, "license": "licensed"}}