{"test_class": {"identifier": "DocViewPropertyTest", "superclass": "", "interfaces": "", "fields": [], "file": "vault-core/src/test/java/org/apache/jackrabbit/vault/util/DocViewPropertyTest.java"}, "test_case": {"identifier": "testParseStringUnicode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseStringUnicode() {\n        DocViewProperty p = DocViewProperty.parse(\"foo\", \"{String}he\\\\u000fllo\");\n        assertEquals(p, false, PropertyType.STRING, \"he\\u000fllo\");\n    }", "signature": "void testParseStringUnicode()", "full_signature": "@Test public void testParseStringUnicode()", "class_method_signature": "DocViewPropertyTest.testParseStringUnicode()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals"]}, "focal_class": {"identifier": "DocViewProperty", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BINARY_REF = \"BinaryRef\";", "modifier": "private static final", "type": "String", "declarator": "BINARY_REF = \"BinaryRef\"", "var_name": "BINARY_REF"}, {"original_string": "public final String name;", "modifier": "public final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "public final String[] values;", "modifier": "public final", "type": "String[]", "declarator": "values", "var_name": "values"}, {"original_string": "public final boolean isMulti;", "modifier": "public final", "type": "boolean", "declarator": "isMulti", "var_name": "isMulti"}, {"original_string": "public final int type;", "modifier": "public final", "type": "int", "declarator": "type", "var_name": "type"}, {"original_string": "public final boolean isReferenceProperty;", "modifier": "public final", "type": "boolean", "declarator": "isReferenceProperty", "var_name": "isReferenceProperty"}, {"original_string": "private static final Set<String> UNAMBIGOUS = new HashSet<String>();", "modifier": "private static final", "type": "Set<String>", "declarator": "UNAMBIGOUS = new HashSet<String>()", "var_name": "UNAMBIGOUS"}], "methods": [{"identifier": "DocViewProperty", "parameters": "(String name, String[] values, boolean multi, int type)", "modifiers": "public", "return": "", "signature": " DocViewProperty(String name, String[] values, boolean multi, int type)", "full_signature": "public  DocViewProperty(String name, String[] values, boolean multi, int type)", "class_method_signature": "DocViewProperty.DocViewProperty(String name, String[] values, boolean multi, int type)", "testcase": false, "constructor": true}, {"identifier": "DocViewProperty", "parameters": "(String name, String[] values, boolean multi, int type, boolean isRef)", "modifiers": "public", "return": "", "signature": " DocViewProperty(String name, String[] values, boolean multi, int type, boolean isRef)", "full_signature": "public  DocViewProperty(String name, String[] values, boolean multi, int type, boolean isRef)", "class_method_signature": "DocViewProperty.DocViewProperty(String name, String[] values, boolean multi, int type, boolean isRef)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String name, String value)", "modifiers": "public static", "return": "DocViewProperty", "signature": "DocViewProperty parse(String name, String value)", "full_signature": "public static DocViewProperty parse(String name, String value)", "class_method_signature": "DocViewProperty.parse(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Property prop)", "modifiers": "public static", "return": "String", "signature": "String format(Property prop)", "full_signature": "public static String format(Property prop)", "class_method_signature": "DocViewProperty.format(Property prop)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Property prop, boolean sort, boolean useBinaryReferences)", "modifiers": "public static", "return": "String", "signature": "String format(Property prop, boolean sort, boolean useBinaryReferences)", "full_signature": "public static String format(Property prop, boolean sort, boolean useBinaryReferences)", "class_method_signature": "DocViewProperty.format(Property prop, boolean sort, boolean useBinaryReferences)", "testcase": false, "constructor": false}, {"identifier": "escape", "parameters": "(StringBuffer buf, String value, boolean isMulti)", "modifiers": "protected static", "return": "void", "signature": "void escape(StringBuffer buf, String value, boolean isMulti)", "full_signature": "protected static void escape(StringBuffer buf, String value, boolean isMulti)", "class_method_signature": "DocViewProperty.escape(StringBuffer buf, String value, boolean isMulti)", "testcase": false, "constructor": false}, {"identifier": "isAmbiguous", "parameters": "(Property prop)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAmbiguous(Property prop)", "full_signature": "public static boolean isAmbiguous(Property prop)", "class_method_signature": "DocViewProperty.isAmbiguous(Property prop)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(Node node)", "modifiers": "public", "return": "boolean", "signature": "boolean apply(Node node)", "full_signature": "public boolean apply(Node node)", "class_method_signature": "DocViewProperty.apply(Node node)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DocViewProperty.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DocViewProperty.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DocViewProperty.toString()", "testcase": false, "constructor": false}], "file": "vault-core/src/main/java/org/apache/jackrabbit/vault/util/DocViewProperty.java"}, "focal_method": {"identifier": "parse", "parameters": "(String name, String value)", "modifiers": "public static", "return": "DocViewProperty", "body": "public static DocViewProperty parse(String name, String value) {\n        boolean isMulti = false;\n        boolean isBinaryRef = false;\n        int type = PropertyType.UNDEFINED;\n        int pos = 0;\n        char state = 'b';\n        List<String> vals = null;\n        StringBuffer tmp = new StringBuffer();\n        int unicode = 0;\n        int unicodePos = 0;\n        while (pos < value.length()) {\n            char c = value.charAt(pos++);\n            switch (state) {\n                case 'b': // begin (type or array or value)\n                    if (c == '{') {\n                        state = 't';\n                    } else if (c == '[') {\n                        isMulti = true;\n                        state = 'v';\n                    } else if (c == '\\\\') {\n                        state = 'e';\n                    } else {\n                        tmp.append(c);\n                        state = 'v';\n                    }\n                    break;\n                case 'a': // array (array or value)\n                    if (c == '[') {\n                        isMulti = true;\n                        state = 'v';\n                    } else if (c == '\\\\') {\n                        state = 'e';\n                    } else {\n                        tmp.append(c);\n                        state = 'v';\n                    }\n                    break;\n                case 't':\n                    if (c == '}') {\n                        if (BINARY_REF.equals(tmp.toString())) {\n                            type = PropertyType.BINARY;\n                            isBinaryRef = true;\n                        } else {\n                            type = PropertyType.valueFromName(tmp.toString());\n                        }\n                        tmp.setLength(0);\n                        state = 'a';\n                    } else {\n                        tmp.append(c);\n                    }\n                    break;\n                case 'v': // value\n                    if (c == '\\\\') {\n                        state = 'e';\n                    } else if (c == ',' && isMulti) {\n                        if (vals == null) {\n                            vals = new LinkedList<String>();\n                        }\n                        vals.add(tmp.toString());\n                        tmp.setLength(0);\n                    } else if (c == ']' && isMulti && pos == value.length()) {\n                        if (tmp.length() > 0 || vals != null) {\n                            if (vals == null) {\n                                vals = new LinkedList<String>();\n                            }\n                            vals.add(tmp.toString());\n                            tmp.setLength(0);\n                        }\n                    } else {\n                        tmp.append(c);\n                    }\n                    break;\n                case 'e': // escaped\n                    if (c == 'u') {\n                        state = 'u';\n                        unicode = 0;\n                        unicodePos = 0;\n                    } else if (c == '0') {\n                        // special case to treat empty values. see JCR-3661\n                        state = 'v';\n                        if (vals == null) {\n                            vals = new LinkedList<String>();\n                        }\n                    } else {\n                        state = 'v';\n                        tmp.append(c);\n                    }\n                    break;\n                case 'u': // unicode escaped\n                    unicode = (unicode << 4) + Character.digit(c, 16);\n                    if (++unicodePos == 4) {\n                        tmp.appendCodePoint(unicode);\n                        state = 'v';\n                    }\n                    break;\n\n            }\n        }\n        String[] values;\n        if (isMulti) {\n            // add value if missing ']'\n            if (tmp.length() > 0) {\n                if (vals == null) {\n                    vals = new LinkedList<String>();\n                }\n                vals.add(tmp.toString());\n            }\n            if (vals == null) {\n                values = Constants.EMPTY_STRING_ARRAY;\n            } else {\n                values = vals.toArray(new String[vals.size()]);\n            }\n        } else {\n            values = new String[]{tmp.toString()};\n        }\n        return new DocViewProperty(name, values, isMulti, type, isBinaryRef);\n    }", "signature": "DocViewProperty parse(String name, String value)", "full_signature": "public static DocViewProperty parse(String name, String value)", "class_method_signature": "DocViewProperty.parse(String name, String value)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "append", "append", "equals", "toString", "valueFromName", "toString", "setLength", "append", "add", "toString", "setLength", "length", "length", "add", "toString", "setLength", "append", "append", "digit", "appendCodePoint", "length", "add", "toString", "toArray", "size", "toString"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}