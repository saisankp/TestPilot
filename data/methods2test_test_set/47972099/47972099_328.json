{"test_class": {"identifier": "IOManagerAsyncTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IOManagerAsync ioManager;", "modifier": "private", "type": "IOManagerAsync", "declarator": "ioManager", "var_name": "ioManager"}], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/io/disk/iomanager/IOManagerAsyncTest.java"}, "test_case": {"identifier": "testExceptionInCallbackWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExceptionInCallbackWrite() {\n\t\ttry {\n\t\t\tfinal AtomicBoolean handlerCalled = new AtomicBoolean();\n\t\t\t\n\t\t\tWriteRequest regularRequest = new WriteRequest() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void requestDone(IOException ioex) {\n\t\t\t\t\tsynchronized (handlerCalled) {\n\t\t\t\t\t\thandlerCalled.set(true);\n\t\t\t\t\t\thandlerCalled.notifyAll();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void write() {}\n\t\t\t};\n\t\t\t\n\t\t\tWriteRequest exceptionThrower = new WriteRequest() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void requestDone(IOException ioex) {\n\t\t\t\t\tthrow new RuntimeException();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void write() {}\n\t\t\t};\n\t\t\t\n\t\t\tRequestQueue<WriteRequest> rq = ioManager.getWriteRequestQueue(ioManager.createChannel());\n\t\t\t\n\t\t\t// queue first an exception thrower, then a regular request.\n\t\t\t// we check that the regular request gets successfully handled\n\t\t\trq.add(exceptionThrower);\n\t\t\trq.add(regularRequest);\n\t\t\t\n\t\t\tsynchronized (handlerCalled) {\n\t\t\t\twhile (!handlerCalled.get()) {\n\t\t\t\t\thandlerCalled.wait();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testExceptionInCallbackWrite()", "full_signature": "@Test public void testExceptionInCallbackWrite()", "class_method_signature": "IOManagerAsyncTest.testExceptionInCallbackWrite()", "testcase": true, "constructor": false, "invocations": ["set", "notifyAll", "getWriteRequestQueue", "createChannel", "add", "add", "get", "wait", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "IOManagerAsync", "superclass": "extends IOManager", "interfaces": "implements UncaughtExceptionHandler", "fields": [{"original_string": "private final WriterThread[] writers;", "modifier": "private final", "type": "WriterThread[]", "declarator": "writers", "var_name": "writers"}, {"original_string": "private final ReaderThread[] readers;", "modifier": "private final", "type": "ReaderThread[]", "declarator": "readers", "var_name": "readers"}, {"original_string": "private final AtomicBoolean isShutdown = new AtomicBoolean();", "modifier": "private final", "type": "AtomicBoolean", "declarator": "isShutdown = new AtomicBoolean()", "var_name": "isShutdown"}, {"original_string": "private final Thread shutdownHook;", "modifier": "private final", "type": "Thread", "declarator": "shutdownHook", "var_name": "shutdownHook"}], "methods": [{"identifier": "IOManagerAsync", "parameters": "()", "modifiers": "public", "return": "", "signature": " IOManagerAsync()", "full_signature": "public  IOManagerAsync()", "class_method_signature": "IOManagerAsync.IOManagerAsync()", "testcase": false, "constructor": true}, {"identifier": "IOManagerAsync", "parameters": "(String tempDir)", "modifiers": "public", "return": "", "signature": " IOManagerAsync(String tempDir)", "full_signature": "public  IOManagerAsync(String tempDir)", "class_method_signature": "IOManagerAsync.IOManagerAsync(String tempDir)", "testcase": false, "constructor": true}, {"identifier": "IOManagerAsync", "parameters": "(String[] tempDirs)", "modifiers": "public", "return": "", "signature": " IOManagerAsync(String[] tempDirs)", "full_signature": "public  IOManagerAsync(String[] tempDirs)", "class_method_signature": "IOManagerAsync.IOManagerAsync(String[] tempDirs)", "testcase": false, "constructor": true}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "IOManagerAsync.shutdown()", "testcase": false, "constructor": false}, {"identifier": "isProperlyShutDown", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isProperlyShutDown()", "full_signature": "@Override public boolean isProperlyShutDown()", "class_method_signature": "IOManagerAsync.isProperlyShutDown()", "testcase": false, "constructor": false}, {"identifier": "uncaughtException", "parameters": "(Thread t, Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void uncaughtException(Thread t, Throwable e)", "full_signature": "@Override public void uncaughtException(Thread t, Throwable e)", "class_method_signature": "IOManagerAsync.uncaughtException(Thread t, Throwable e)", "testcase": false, "constructor": false}, {"identifier": "createBlockChannelWriter", "parameters": "(FileIOChannel.ID channelID,\n\t\t\t\t\t\t\t\tLinkedBlockingQueue<MemorySegment> returnQueue)", "modifiers": "@Override public", "return": "BlockChannelWriter<MemorySegment>", "signature": "BlockChannelWriter<MemorySegment> createBlockChannelWriter(FileIOChannel.ID channelID,\n\t\t\t\t\t\t\t\tLinkedBlockingQueue<MemorySegment> returnQueue)", "full_signature": "@Override public BlockChannelWriter<MemorySegment> createBlockChannelWriter(FileIOChannel.ID channelID,\n\t\t\t\t\t\t\t\tLinkedBlockingQueue<MemorySegment> returnQueue)", "class_method_signature": "IOManagerAsync.createBlockChannelWriter(FileIOChannel.ID channelID,\n\t\t\t\t\t\t\t\tLinkedBlockingQueue<MemorySegment> returnQueue)", "testcase": false, "constructor": false}, {"identifier": "createBlockChannelWriter", "parameters": "(FileIOChannel.ID channelID, RequestDoneCallback<MemorySegment> callback)", "modifiers": "@Override public", "return": "BlockChannelWriterWithCallback<MemorySegment>", "signature": "BlockChannelWriterWithCallback<MemorySegment> createBlockChannelWriter(FileIOChannel.ID channelID, RequestDoneCallback<MemorySegment> callback)", "full_signature": "@Override public BlockChannelWriterWithCallback<MemorySegment> createBlockChannelWriter(FileIOChannel.ID channelID, RequestDoneCallback<MemorySegment> callback)", "class_method_signature": "IOManagerAsync.createBlockChannelWriter(FileIOChannel.ID channelID, RequestDoneCallback<MemorySegment> callback)", "testcase": false, "constructor": false}, {"identifier": "createBlockChannelReader", "parameters": "(FileIOChannel.ID channelID,\n\t\t\t\t\t\t\t\t\t\tLinkedBlockingQueue<MemorySegment> returnQueue)", "modifiers": "@Override public", "return": "BlockChannelReader<MemorySegment>", "signature": "BlockChannelReader<MemorySegment> createBlockChannelReader(FileIOChannel.ID channelID,\n\t\t\t\t\t\t\t\t\t\tLinkedBlockingQueue<MemorySegment> returnQueue)", "full_signature": "@Override public BlockChannelReader<MemorySegment> createBlockChannelReader(FileIOChannel.ID channelID,\n\t\t\t\t\t\t\t\t\t\tLinkedBlockingQueue<MemorySegment> returnQueue)", "class_method_signature": "IOManagerAsync.createBlockChannelReader(FileIOChannel.ID channelID,\n\t\t\t\t\t\t\t\t\t\tLinkedBlockingQueue<MemorySegment> returnQueue)", "testcase": false, "constructor": false}, {"identifier": "createBufferFileWriter", "parameters": "(FileIOChannel.ID channelID)", "modifiers": "@Override public", "return": "BufferFileWriter", "signature": "BufferFileWriter createBufferFileWriter(FileIOChannel.ID channelID)", "full_signature": "@Override public BufferFileWriter createBufferFileWriter(FileIOChannel.ID channelID)", "class_method_signature": "IOManagerAsync.createBufferFileWriter(FileIOChannel.ID channelID)", "testcase": false, "constructor": false}, {"identifier": "createBufferFileReader", "parameters": "(FileIOChannel.ID channelID, RequestDoneCallback<Buffer> callback)", "modifiers": "@Override public", "return": "BufferFileReader", "signature": "BufferFileReader createBufferFileReader(FileIOChannel.ID channelID, RequestDoneCallback<Buffer> callback)", "full_signature": "@Override public BufferFileReader createBufferFileReader(FileIOChannel.ID channelID, RequestDoneCallback<Buffer> callback)", "class_method_signature": "IOManagerAsync.createBufferFileReader(FileIOChannel.ID channelID, RequestDoneCallback<Buffer> callback)", "testcase": false, "constructor": false}, {"identifier": "createBufferFileSegmentReader", "parameters": "(FileIOChannel.ID channelID, RequestDoneCallback<FileSegment> callback)", "modifiers": "@Override public", "return": "BufferFileSegmentReader", "signature": "BufferFileSegmentReader createBufferFileSegmentReader(FileIOChannel.ID channelID, RequestDoneCallback<FileSegment> callback)", "full_signature": "@Override public BufferFileSegmentReader createBufferFileSegmentReader(FileIOChannel.ID channelID, RequestDoneCallback<FileSegment> callback)", "class_method_signature": "IOManagerAsync.createBufferFileSegmentReader(FileIOChannel.ID channelID, RequestDoneCallback<FileSegment> callback)", "testcase": false, "constructor": false}, {"identifier": "createBulkBlockChannelReader", "parameters": "(FileIOChannel.ID channelID,\n\t\t\tList<MemorySegment> targetSegments, int numBlocks)", "modifiers": "@Override public", "return": "BulkBlockChannelReader", "signature": "BulkBlockChannelReader createBulkBlockChannelReader(FileIOChannel.ID channelID,\n\t\t\tList<MemorySegment> targetSegments, int numBlocks)", "full_signature": "@Override public BulkBlockChannelReader createBulkBlockChannelReader(FileIOChannel.ID channelID,\n\t\t\tList<MemorySegment> targetSegments, int numBlocks)", "class_method_signature": "IOManagerAsync.createBulkBlockChannelReader(FileIOChannel.ID channelID,\n\t\t\tList<MemorySegment> targetSegments, int numBlocks)", "testcase": false, "constructor": false}, {"identifier": "getReadRequestQueue", "parameters": "(FileIOChannel.ID channelID)", "modifiers": "", "return": "RequestQueue<ReadRequest>", "signature": "RequestQueue<ReadRequest> getReadRequestQueue(FileIOChannel.ID channelID)", "full_signature": " RequestQueue<ReadRequest> getReadRequestQueue(FileIOChannel.ID channelID)", "class_method_signature": "IOManagerAsync.getReadRequestQueue(FileIOChannel.ID channelID)", "testcase": false, "constructor": false}, {"identifier": "getWriteRequestQueue", "parameters": "(FileIOChannel.ID channelID)", "modifiers": "", "return": "RequestQueue<WriteRequest>", "signature": "RequestQueue<WriteRequest> getWriteRequestQueue(FileIOChannel.ID channelID)", "full_signature": " RequestQueue<WriteRequest> getWriteRequestQueue(FileIOChannel.ID channelID)", "class_method_signature": "IOManagerAsync.getWriteRequestQueue(FileIOChannel.ID channelID)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/io/disk/iomanager/IOManagerAsync.java"}, "focal_method": {"identifier": "getWriteRequestQueue", "parameters": "(FileIOChannel.ID channelID)", "modifiers": "", "return": "RequestQueue<WriteRequest>", "body": "RequestQueue<WriteRequest> getWriteRequestQueue(FileIOChannel.ID channelID) {\n\t\treturn this.writers[channelID.getThreadNum()].requestQueue;\n\t}", "signature": "RequestQueue<WriteRequest> getWriteRequestQueue(FileIOChannel.ID channelID)", "full_signature": " RequestQueue<WriteRequest> getWriteRequestQueue(FileIOChannel.ID channelID)", "class_method_signature": "IOManagerAsync.getWriteRequestQueue(FileIOChannel.ID channelID)", "testcase": false, "constructor": false, "invocations": ["getThreadNum"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}