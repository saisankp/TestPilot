{"test_class": {"identifier": "InclusiveByteRangeTest", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-net/src/test/java/com/fireflysource/net/http/common/codec/InclusiveByteRangeTest.java"}, "test_case": {"identifier": "testHeader416RangeString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHeader416RangeString() {\n        assertEquals(\"bytes */100\", InclusiveByteRange.to416HeaderRangeString(100), \"416 Header on size 100\");\n        assertEquals(\"bytes */123456789\", InclusiveByteRange.to416HeaderRangeString(123456789), \"416 Header on size 123456789\");\n    }", "signature": "void testHeader416RangeString()", "full_signature": "@Test public void testHeader416RangeString()", "class_method_signature": "InclusiveByteRangeTest.testHeader416RangeString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "to416HeaderRangeString", "assertEquals", "to416HeaderRangeString"]}, "focal_class": {"identifier": "InclusiveByteRange", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final LazyLogger LOG = SystemLogger.create(InclusiveByteRange.class);", "modifier": "public static final", "type": "LazyLogger", "declarator": "LOG = SystemLogger.create(InclusiveByteRange.class)", "var_name": "LOG"}, {"original_string": "private long first;", "modifier": "private", "type": "long", "declarator": "first", "var_name": "first"}, {"original_string": "private long last;", "modifier": "private", "type": "long", "declarator": "last", "var_name": "last"}], "methods": [{"identifier": "InclusiveByteRange", "parameters": "(long first, long last)", "modifiers": "public", "return": "", "signature": " InclusiveByteRange(long first, long last)", "full_signature": "public  InclusiveByteRange(long first, long last)", "class_method_signature": "InclusiveByteRange.InclusiveByteRange(long first, long last)", "testcase": false, "constructor": true}, {"identifier": "getFirst", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getFirst()", "full_signature": "public long getFirst()", "class_method_signature": "InclusiveByteRange.getFirst()", "testcase": false, "constructor": false}, {"identifier": "getLast", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLast()", "full_signature": "public long getLast()", "class_method_signature": "InclusiveByteRange.getLast()", "testcase": false, "constructor": false}, {"identifier": "coalesce", "parameters": "(InclusiveByteRange r)", "modifiers": "private", "return": "void", "signature": "void coalesce(InclusiveByteRange r)", "full_signature": "private void coalesce(InclusiveByteRange r)", "class_method_signature": "InclusiveByteRange.coalesce(InclusiveByteRange r)", "testcase": false, "constructor": false}, {"identifier": "overlaps", "parameters": "(InclusiveByteRange range)", "modifiers": "private", "return": "boolean", "signature": "boolean overlaps(InclusiveByteRange range)", "full_signature": "private boolean overlaps(InclusiveByteRange range)", "class_method_signature": "InclusiveByteRange.overlaps(InclusiveByteRange range)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSize()", "full_signature": "public long getSize()", "class_method_signature": "InclusiveByteRange.getSize()", "testcase": false, "constructor": false}, {"identifier": "toHeaderRangeString", "parameters": "(long size)", "modifiers": "public", "return": "String", "signature": "String toHeaderRangeString(long size)", "full_signature": "public String toHeaderRangeString(long size)", "class_method_signature": "InclusiveByteRange.toHeaderRangeString(long size)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "InclusiveByteRange.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "InclusiveByteRange.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "InclusiveByteRange.toString()", "testcase": false, "constructor": false}, {"identifier": "satisfiableRanges", "parameters": "(List<String> headers, long size)", "modifiers": "public static", "return": "List<InclusiveByteRange>", "signature": "List<InclusiveByteRange> satisfiableRanges(List<String> headers, long size)", "full_signature": "public static List<InclusiveByteRange> satisfiableRanges(List<String> headers, long size)", "class_method_signature": "InclusiveByteRange.satisfiableRanges(List<String> headers, long size)", "testcase": false, "constructor": false}, {"identifier": "satisfiableRanges", "parameters": "(Enumeration<String> headers, long size)", "modifiers": "public static", "return": "List<InclusiveByteRange>", "signature": "List<InclusiveByteRange> satisfiableRanges(Enumeration<String> headers, long size)", "full_signature": "public static List<InclusiveByteRange> satisfiableRanges(Enumeration<String> headers, long size)", "class_method_signature": "InclusiveByteRange.satisfiableRanges(Enumeration<String> headers, long size)", "testcase": false, "constructor": false}, {"identifier": "to416HeaderRangeString", "parameters": "(long size)", "modifiers": "public static", "return": "String", "signature": "String to416HeaderRangeString(long size)", "full_signature": "public static String to416HeaderRangeString(long size)", "class_method_signature": "InclusiveByteRange.to416HeaderRangeString(long size)", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/http/common/codec/InclusiveByteRange.java"}, "focal_method": {"identifier": "to416HeaderRangeString", "parameters": "(long size)", "modifiers": "public static", "return": "String", "body": "public static String to416HeaderRangeString(long size) {\n        StringBuilder sb = new StringBuilder(40);\n        sb.append(\"bytes */\");\n        sb.append(size);\n        return sb.toString();\n    }", "signature": "String to416HeaderRangeString(long size)", "full_signature": "public static String to416HeaderRangeString(long size)", "class_method_signature": "InclusiveByteRange.to416HeaderRangeString(long size)", "testcase": false, "constructor": false, "invocations": ["append", "append", "toString"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}