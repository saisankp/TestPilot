{"test_class": {"identifier": "SpaceNewGoalTest", "superclass": "extends AbstractGoalTest", "interfaces": "", "fields": [], "file": "lang/src/test/java/org/eclipse/steady/goals/SpaceNewGoalTest.java"}, "test_case": {"identifier": "testNewSpace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNewSpace() throws GoalConfigurationException, GoalExecutionException {\n    // Mock REST services\n    this.configureBackendServiceUrl(server);\n    this.setupMockSpaceServices(testSpace);\n\n    // Set config\n    this.vulasConfiguration.setProperty(\n        CoreConfiguration.TENANT_TOKEN, testTenant.getTenantToken());\n    this.vulasConfiguration.setProperty(CoreConfiguration.SPACE_NAME, testSpace.getSpaceName());\n    this.vulasConfiguration.setProperty(\n        CoreConfiguration.SPACE_DESCR, testSpace.getSpaceDescription());\n\n    // Execute goal\n    final AbstractGoal goal = GoalFactory.create(GoalType.SPACENEW, GoalClient.CLI);\n    goal.setConfiguration(this.vulasConfiguration).executeSync();\n\n    final Space new_space = (Space) goal.getResultObject();\n    assertEquals(testSpace, new_space);\n\n    // Check the HTTP calls made\n    verifyHttp(server).times(1, method(Method.POST), uri(\"/backend\" + PathBuilder.spaces()));\n    verifyHttp(server)\n        .times(\n            0,\n            method(Method.POST),\n            uri(\"/backend\" + PathBuilder.goalExcecutions(null, testSpace, null)));\n  }", "signature": "void testNewSpace()", "full_signature": "@Test public void testNewSpace()", "class_method_signature": "SpaceNewGoalTest.testNewSpace()", "testcase": true, "constructor": false, "invocations": ["configureBackendServiceUrl", "setupMockSpaceServices", "setProperty", "getTenantToken", "setProperty", "getSpaceName", "setProperty", "getSpaceDescription", "create", "executeSync", "setConfiguration", "getResultObject", "assertEquals", "times", "verifyHttp", "method", "uri", "spaces", "times", "verifyHttp", "method", "uri", "goalExcecutions"]}, "focal_class": {"identifier": "SpaceNewGoal", "superclass": "extends AbstractSpaceGoal", "interfaces": "", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "private Space createdSpace = null;", "modifier": "private", "type": "Space", "declarator": "createdSpace = null", "var_name": "createdSpace"}], "methods": [{"identifier": "SpaceNewGoal", "parameters": "()", "modifiers": "public", "return": "", "signature": " SpaceNewGoal()", "full_signature": "public  SpaceNewGoal()", "class_method_signature": "SpaceNewGoal.SpaceNewGoal()", "testcase": false, "constructor": true}, {"identifier": "executeTasks", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void executeTasks()", "full_signature": "@Override protected void executeTasks()", "class_method_signature": "SpaceNewGoal.executeTasks()", "testcase": false, "constructor": false}, {"identifier": "getResultObject", "parameters": "()", "modifiers": "protected", "return": "Object", "signature": "Object getResultObject()", "full_signature": "protected Object getResultObject()", "class_method_signature": "SpaceNewGoal.getResultObject()", "testcase": false, "constructor": false}], "file": "lang/src/main/java/org/eclipse/steady/goals/SpaceNewGoal.java"}, "focal_method": {"identifier": "getResultObject", "parameters": "()", "modifiers": "protected", "return": "Object", "body": "protected Object getResultObject() {\n    return this.createdSpace;\n  }", "signature": "Object getResultObject()", "full_signature": "protected Object getResultObject()", "class_method_signature": "SpaceNewGoal.getResultObject()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}