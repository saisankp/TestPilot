{"test_class": {"identifier": "FieldsFromArrayTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String[] testStringArray = { \"0\", \"1\", \"2\", \"3\", \"4\" };", "modifier": "", "type": "String[]", "declarator": "testStringArray = { \"0\", \"1\", \"2\", \"3\", \"4\" }", "var_name": "testStringArray"}, {"original_string": "Integer[] testIntegerArray = { 10, 11, 12, 13, 14 };", "modifier": "", "type": "Integer[]", "declarator": "testIntegerArray = { 10, 11, 12, 13, 14 }", "var_name": "testIntegerArray"}, {"original_string": "int[] testIntArray = { 20, 21, 22, 23, 24 };", "modifier": "", "type": "int[]", "declarator": "testIntArray = { 20, 21, 22, 23, 24 }", "var_name": "testIntArray"}], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/windowing/delta/extractor/FieldsFromArrayTest.java"}, "test_case": {"identifier": "testIntegerArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIntegerArray() {\n\t\t// check single field extraction\n\t\tfor (int i = 0; i < testIntegerArray.length; i++) {\n\t\t\tInteger[] tmp = { testIntegerArray[i] };\n\t\t\tarrayEqualityCheck(tmp,\n\t\t\t\t\tnew FieldsFromArray<Integer>(Integer.class, i).extract(testIntegerArray));\n\t\t}\n\n\t\t// check reverse order\n\t\tInteger[] reverseOrder = new Integer[testIntegerArray.length];\n\t\tfor (int i = 0; i < testIntegerArray.length; i++) {\n\t\t\treverseOrder[i] = testIntegerArray[testIntegerArray.length - i - 1];\n\t\t}\n\t\tarrayEqualityCheck(reverseOrder,\n\t\t\t\tnew FieldsFromArray<Integer>(Integer.class, 4, 3, 2, 1, 0)\n\t\t\t\t\t\t.extract(testIntegerArray));\n\n\t\t// check picking fields and reorder\n\t\tInteger[] crazyOrder = { testIntegerArray[4], testIntegerArray[1], testIntegerArray[2] };\n\t\tarrayEqualityCheck(crazyOrder,\n\t\t\t\tnew FieldsFromArray<Integer>(Integer.class, 4, 1, 2).extract(testIntegerArray));\n\n\t}", "signature": "void testIntegerArray()", "full_signature": "@Test public void testIntegerArray()", "class_method_signature": "FieldsFromArrayTest.testIntegerArray()", "testcase": true, "constructor": false, "invocations": ["arrayEqualityCheck", "extract", "arrayEqualityCheck", "extract", "arrayEqualityCheck", "extract"]}, "focal_class": {"identifier": "FieldsFromArray", "superclass": "", "interfaces": "implements Extractor<Object, OUT[]>", "fields": [{"original_string": "private static final long serialVersionUID = 8075055384516397670L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 8075055384516397670L", "var_name": "serialVersionUID"}, {"original_string": "private int[] order;", "modifier": "private", "type": "int[]", "declarator": "order", "var_name": "order"}, {"original_string": "private Class<OUT> clazz;", "modifier": "private", "type": "Class<OUT>", "declarator": "clazz", "var_name": "clazz"}], "methods": [{"identifier": "FieldsFromArray", "parameters": "(Class<OUT> clazz, int... indexes)", "modifiers": "public", "return": "", "signature": " FieldsFromArray(Class<OUT> clazz, int... indexes)", "full_signature": "public  FieldsFromArray(Class<OUT> clazz, int... indexes)", "class_method_signature": "FieldsFromArray.FieldsFromArray(Class<OUT> clazz, int... indexes)", "testcase": false, "constructor": true}, {"identifier": "extract", "parameters": "(Object in)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "OUT[]", "signature": "OUT[] extract(Object in)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public OUT[] extract(Object in)", "class_method_signature": "FieldsFromArray.extract(Object in)", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/windowing/delta/extractor/FieldsFromArray.java"}, "focal_method": {"identifier": "extract", "parameters": "(Object in)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "OUT[]", "body": "@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic OUT[] extract(Object in) {\n\t\tOUT[] output = (OUT[]) Array.newInstance(clazz, order.length);\n\t\tfor (int i = 0; i < order.length; i++) {\n\t\t\toutput[i] = (OUT) Array.get(in, this.order[i]);\n\t\t}\n\t\treturn output;\n\t}", "signature": "OUT[] extract(Object in)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public OUT[] extract(Object in)", "class_method_signature": "FieldsFromArray.extract(Object in)", "testcase": false, "constructor": false, "invocations": ["newInstance", "get"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}