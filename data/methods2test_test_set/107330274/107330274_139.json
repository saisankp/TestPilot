{"test_class": {"identifier": "CollectionsExtTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/util/CollectionsExtTest.java"}, "test_case": {"identifier": "testContainsAnyKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testContainsAnyKeys() {\n        Map<String, String> map = new HashMap<>();\n        map.put(\"a\", \"1\");\n        map.put(\"b\", \"2\");\n        assertThat(CollectionsExt.containsAnyKeys(map, \"a\", \"c\")).isTrue();\n        assertThat(CollectionsExt.containsAnyKeys(map, \"c\", \"a\")).isTrue();\n        assertThat(CollectionsExt.containsAnyKeys(map, \"c\", \"d\")).isFalse();\n    }", "signature": "void testContainsAnyKeys()", "full_signature": "@Test public void testContainsAnyKeys()", "class_method_signature": "CollectionsExtTest.testContainsAnyKeys()", "testcase": true, "constructor": false, "invocations": ["put", "put", "isTrue", "assertThat", "containsAnyKeys", "isTrue", "assertThat", "containsAnyKeys", "isFalse", "assertThat", "containsAnyKeys"]}, "focal_class": {"identifier": "CollectionsExt", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "CollectionsExt", "parameters": "()", "modifiers": "private", "return": "", "signature": " CollectionsExt()", "full_signature": "private  CollectionsExt()", "class_method_signature": "CollectionsExt.CollectionsExt()", "testcase": false, "constructor": true}, {"identifier": "isNullOrEmpty", "parameters": "(Map<K, V> map)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmpty(Map<K, V> map)", "full_signature": "public static boolean isNullOrEmpty(Map<K, V> map)", "class_method_signature": "CollectionsExt.isNullOrEmpty(Map<K, V> map)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmpty", "parameters": "(Collection<T> collection)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmpty(Collection<T> collection)", "full_signature": "public static boolean isNullOrEmpty(Collection<T> collection)", "class_method_signature": "CollectionsExt.isNullOrEmpty(Collection<T> collection)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmpty", "parameters": "(T[] array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmpty(T[] array)", "full_signature": "public static boolean isNullOrEmpty(T[] array)", "class_method_signature": "CollectionsExt.isNullOrEmpty(T[] array)", "testcase": false, "constructor": false}, {"identifier": "ifNotEmpty", "parameters": "(C collection, Runnable runnable)", "modifiers": "public static", "return": "void", "signature": "void ifNotEmpty(C collection, Runnable runnable)", "full_signature": "public static void ifNotEmpty(C collection, Runnable runnable)", "class_method_signature": "CollectionsExt.ifNotEmpty(C collection, Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "applyNotEmpty", "parameters": "(C collection, Consumer<C> consumer)", "modifiers": "public static", "return": "void", "signature": "void applyNotEmpty(C collection, Consumer<C> consumer)", "full_signature": "public static void applyNotEmpty(C collection, Consumer<C> consumer)", "class_method_signature": "CollectionsExt.applyNotEmpty(C collection, Consumer<C> consumer)", "testcase": false, "constructor": false}, {"identifier": "nonNull", "parameters": "(List<T> collection)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> nonNull(List<T> collection)", "full_signature": "public static List<T> nonNull(List<T> collection)", "class_method_signature": "CollectionsExt.nonNull(List<T> collection)", "testcase": false, "constructor": false}, {"identifier": "nonNull", "parameters": "(Set<T> collection)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> nonNull(Set<T> collection)", "full_signature": "public static Set<T> nonNull(Set<T> collection)", "class_method_signature": "CollectionsExt.nonNull(Set<T> collection)", "testcase": false, "constructor": false}, {"identifier": "nonNull", "parameters": "(Map<K, V> map)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> nonNull(Map<K, V> map)", "full_signature": "public static Map<K, V> nonNull(Map<K, V> map)", "class_method_signature": "CollectionsExt.nonNull(Map<K, V> map)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "(Collection<T> collection)", "modifiers": "public static", "return": "T", "signature": "T first(Collection<T> collection)", "full_signature": "public static T first(Collection<T> collection)", "class_method_signature": "CollectionsExt.first(Collection<T> collection)", "testcase": false, "constructor": false}, {"identifier": "firstOrDefault", "parameters": "(Collection<T> collection, T defaultValue)", "modifiers": "public static", "return": "T", "signature": "T firstOrDefault(Collection<T> collection, T defaultValue)", "full_signature": "public static T firstOrDefault(Collection<T> collection, T defaultValue)", "class_method_signature": "CollectionsExt.firstOrDefault(Collection<T> collection, T defaultValue)", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "(List<T> list)", "modifiers": "public static", "return": "T", "signature": "T last(List<T> list)", "full_signature": "public static T last(List<T> list)", "class_method_signature": "CollectionsExt.last(List<T> list)", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "(Stream<T> stream)", "modifiers": "public static", "return": "T", "signature": "T last(Stream<T> stream)", "full_signature": "public static T last(Stream<T> stream)", "class_method_signature": "CollectionsExt.last(Stream<T> stream)", "testcase": false, "constructor": false}, {"identifier": "getOrDefault", "parameters": "(T[] array, int idx, T defaultValue)", "modifiers": "public static", "return": "T", "signature": "T getOrDefault(T[] array, int idx, T defaultValue)", "full_signature": "public static T getOrDefault(T[] array, int idx, T defaultValue)", "class_method_signature": "CollectionsExt.getOrDefault(T[] array, int idx, T defaultValue)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Collection<T> target, T[] source)", "modifiers": "public static", "return": "void", "signature": "void addAll(Collection<T> target, T[] source)", "full_signature": "public static void addAll(Collection<T> target, T[] source)", "class_method_signature": "CollectionsExt.addAll(Collection<T> target, T[] source)", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "(T[] source, int from)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> asList(T[] source, int from)", "full_signature": "public static List<T> asList(T[] source, int from)", "class_method_signature": "CollectionsExt.asList(T[] source, int from)", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "(T[] source, int from, int to)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> asList(T[] source, int from, int to)", "full_signature": "public static List<T> asList(T[] source, int from, int to)", "class_method_signature": "CollectionsExt.asList(T[] source, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "take", "parameters": "(Set<T> collection, int count)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> take(Set<T> collection, int count)", "full_signature": "public static Set<T> take(Set<T> collection, int count)", "class_method_signature": "CollectionsExt.take(Set<T> collection, int count)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(C source, C destination, int count)", "modifiers": "public static", "return": "C", "signature": "C copy(C source, C destination, int count)", "full_signature": "public static C copy(C source, C destination, int count)", "class_method_signature": "CollectionsExt.copy(C source, C destination, int count)", "testcase": false, "constructor": false}, {"identifier": "copyAndAdd", "parameters": "(List<T> original, T newItem)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> copyAndAdd(List<T> original, T newItem)", "full_signature": "public static List<T> copyAndAdd(List<T> original, T newItem)", "class_method_signature": "CollectionsExt.copyAndAdd(List<T> original, T newItem)", "testcase": false, "constructor": false}, {"identifier": "copyAndAddToList", "parameters": "(Collection<T> original, T newItem)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> copyAndAddToList(Collection<T> original, T newItem)", "full_signature": "public static List<T> copyAndAddToList(Collection<T> original, T newItem)", "class_method_signature": "CollectionsExt.copyAndAddToList(Collection<T> original, T newItem)", "testcase": false, "constructor": false}, {"identifier": "copyAndAdd", "parameters": "(Set<T> original, T newItem)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> copyAndAdd(Set<T> original, T newItem)", "full_signature": "public static Set<T> copyAndAdd(Set<T> original, T newItem)", "class_method_signature": "CollectionsExt.copyAndAdd(Set<T> original, T newItem)", "testcase": false, "constructor": false}, {"identifier": "copyAndAdd", "parameters": "(Map<K, V> original, K key, V value)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> copyAndAdd(Map<K, V> original, K key, V value)", "full_signature": "public static Map<K, V> copyAndAdd(Map<K, V> original, K key, V value)", "class_method_signature": "CollectionsExt.copyAndAdd(Map<K, V> original, K key, V value)", "testcase": false, "constructor": false}, {"identifier": "copyAndAdd", "parameters": "(Map<K, V> original, Map<K, V> additions)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> copyAndAdd(Map<K, V> original, Map<K, V> additions)", "full_signature": "public static Map<K, V> copyAndAdd(Map<K, V> original, Map<K, V> additions)", "class_method_signature": "CollectionsExt.copyAndAdd(Map<K, V> original, Map<K, V> additions)", "testcase": false, "constructor": false}, {"identifier": "nullableImmutableCopyOf", "parameters": "(List<T> original)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> nullableImmutableCopyOf(List<T> original)", "full_signature": "public static List<T> nullableImmutableCopyOf(List<T> original)", "class_method_signature": "CollectionsExt.nullableImmutableCopyOf(List<T> original)", "testcase": false, "constructor": false}, {"identifier": "nonNullImmutableCopyOf", "parameters": "(List<T> original)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> nonNullImmutableCopyOf(List<T> original)", "full_signature": "public static List<T> nonNullImmutableCopyOf(List<T> original)", "class_method_signature": "CollectionsExt.nonNullImmutableCopyOf(List<T> original)", "testcase": false, "constructor": false}, {"identifier": "nullableImmutableCopyOf", "parameters": "(Map<K, V> original)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> nullableImmutableCopyOf(Map<K, V> original)", "full_signature": "public static Map<K, V> nullableImmutableCopyOf(Map<K, V> original)", "class_method_signature": "CollectionsExt.nullableImmutableCopyOf(Map<K, V> original)", "testcase": false, "constructor": false}, {"identifier": "copyAndRemove", "parameters": "(List<T> original, Predicate<T> removePredicate)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> copyAndRemove(List<T> original, Predicate<T> removePredicate)", "full_signature": "public static List<T> copyAndRemove(List<T> original, Predicate<T> removePredicate)", "class_method_signature": "CollectionsExt.copyAndRemove(List<T> original, Predicate<T> removePredicate)", "testcase": false, "constructor": false}, {"identifier": "copyAndRemove", "parameters": "(Set<T> original, T toRemove)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> copyAndRemove(Set<T> original, T toRemove)", "full_signature": "public static Set<T> copyAndRemove(Set<T> original, T toRemove)", "class_method_signature": "CollectionsExt.copyAndRemove(Set<T> original, T toRemove)", "testcase": false, "constructor": false}, {"identifier": "copyAndRemove", "parameters": "(Set<T> original, Collection<T> toRemove)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> copyAndRemove(Set<T> original, Collection<T> toRemove)", "full_signature": "public static Set<T> copyAndRemove(Set<T> original, Collection<T> toRemove)", "class_method_signature": "CollectionsExt.copyAndRemove(Set<T> original, Collection<T> toRemove)", "testcase": false, "constructor": false}, {"identifier": "copyAndRemove", "parameters": "(Map<K, V> original, K... keys)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> copyAndRemove(Map<K, V> original, K... keys)", "full_signature": "public static Map<K, V> copyAndRemove(Map<K, V> original, K... keys)", "class_method_signature": "CollectionsExt.copyAndRemove(Map<K, V> original, K... keys)", "testcase": false, "constructor": false}, {"identifier": "copyAndRemove", "parameters": "(Map<K, V> original, Collection<K> keys)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> copyAndRemove(Map<K, V> original, Collection<K> keys)", "full_signature": "public static Map<K, V> copyAndRemove(Map<K, V> original, Collection<K> keys)", "class_method_signature": "CollectionsExt.copyAndRemove(Map<K, V> original, Collection<K> keys)", "testcase": false, "constructor": false}, {"identifier": "copyAndRemoveByKey", "parameters": "(Map<K, V> original, Predicate<K> keysPredicate)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> copyAndRemoveByKey(Map<K, V> original, Predicate<K> keysPredicate)", "full_signature": "public static Map<K, V> copyAndRemoveByKey(Map<K, V> original, Predicate<K> keysPredicate)", "class_method_signature": "CollectionsExt.copyAndRemoveByKey(Map<K, V> original, Predicate<K> keysPredicate)", "testcase": false, "constructor": false}, {"identifier": "copyAndRemoveByValue", "parameters": "(Map<K, V> original, Predicate<V> removePredicate)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> copyAndRemoveByValue(Map<K, V> original, Predicate<V> removePredicate)", "full_signature": "public static Map<K, V> copyAndRemoveByValue(Map<K, V> original, Predicate<V> removePredicate)", "class_method_signature": "CollectionsExt.copyAndRemoveByValue(Map<K, V> original, Predicate<V> removePredicate)", "testcase": false, "constructor": false}, {"identifier": "multiMapAddValue", "parameters": "(Map<K, List<V>> multiMap, K key, V value)", "modifiers": "public static", "return": "List<V>", "signature": "List<V> multiMapAddValue(Map<K, List<V>> multiMap, K key, V value)", "full_signature": "public static List<V> multiMapAddValue(Map<K, List<V>> multiMap, K key, V value)", "class_method_signature": "CollectionsExt.multiMapAddValue(Map<K, List<V>> multiMap, K key, V value)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(List<T>... lists)", "modifiers": "@SafeVarargs public static", "return": "List<T>", "signature": "List<T> merge(List<T>... lists)", "full_signature": "@SafeVarargs public static List<T> merge(List<T>... lists)", "class_method_signature": "CollectionsExt.merge(List<T>... lists)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Set<T>... sets)", "modifiers": "@SafeVarargs public static", "return": "Set<T>", "signature": "Set<T> merge(Set<T>... sets)", "full_signature": "@SafeVarargs public static Set<T> merge(Set<T>... sets)", "class_method_signature": "CollectionsExt.merge(Set<T>... sets)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Supplier<Set<T>> supplier, Set<T>... sets)", "modifiers": "@SafeVarargs public static", "return": "Set<T>", "signature": "Set<T> merge(Supplier<Set<T>> supplier, Set<T>... sets)", "full_signature": "@SafeVarargs public static Set<T> merge(Supplier<Set<T>> supplier, Set<T>... sets)", "class_method_signature": "CollectionsExt.merge(Supplier<Set<T>> supplier, Set<T>... sets)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Map<K, V>... maps)", "modifiers": "@SafeVarargs public static", "return": "Map<K, V>", "signature": "Map<K, V> merge(Map<K, V>... maps)", "full_signature": "@SafeVarargs public static Map<K, V> merge(Map<K, V>... maps)", "class_method_signature": "CollectionsExt.merge(Map<K, V>... maps)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Map<K, V> first, Map<K, V> second, BiFunction<V, V, V> conflictFunction)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> merge(Map<K, V> first, Map<K, V> second, BiFunction<V, V, V> conflictFunction)", "full_signature": "public static Map<K, V> merge(Map<K, V> first, Map<K, V> second, BiFunction<V, V, V> conflictFunction)", "class_method_signature": "CollectionsExt.merge(Map<K, V> first, Map<K, V> second, BiFunction<V, V, V> conflictFunction)", "testcase": false, "constructor": false}, {"identifier": "mapValues", "parameters": "(Map<K, U> source, Function<U, V> valueMapper, Supplier<Map<K, V>> mapSupplier)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> mapValues(Map<K, U> source, Function<U, V> valueMapper, Supplier<Map<K, V>> mapSupplier)", "full_signature": "public static Map<K, V> mapValues(Map<K, U> source, Function<U, V> valueMapper, Supplier<Map<K, V>> mapSupplier)", "class_method_signature": "CollectionsExt.mapValues(Map<K, U> source, Function<U, V> valueMapper, Supplier<Map<K, V>> mapSupplier)", "testcase": false, "constructor": false}, {"identifier": "mapValuesWithKeys", "parameters": "(Map<K, U> source, BiFunction<K, U, V> valueMapper, Supplier<Map<K, V>> mapSupplier)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> mapValuesWithKeys(Map<K, U> source, BiFunction<K, U, V> valueMapper, Supplier<Map<K, V>> mapSupplier)", "full_signature": "public static Map<K, V> mapValuesWithKeys(Map<K, U> source, BiFunction<K, U, V> valueMapper, Supplier<Map<K, V>> mapSupplier)", "class_method_signature": "CollectionsExt.mapValuesWithKeys(Map<K, U> source, BiFunction<K, U, V> valueMapper, Supplier<Map<K, V>> mapSupplier)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(Set<T>... sets)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> xor(Set<T>... sets)", "full_signature": "public static Set<T> xor(Set<T>... sets)", "class_method_signature": "CollectionsExt.xor(Set<T>... sets)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(List<T> items, Predicate<T> predicate)", "modifiers": "public static", "return": "Pair<List<T>, List<T>>", "signature": "Pair<List<T>, List<T>> split(List<T> items, Predicate<T> predicate)", "full_signature": "public static Pair<List<T>, List<T>> split(List<T> items, Predicate<T> predicate)", "class_method_signature": "CollectionsExt.split(List<T> items, Predicate<T> predicate)", "testcase": false, "constructor": false}, {"identifier": "transformSet", "parameters": "(Set<T> source, Function<T, R> transformer)", "modifiers": "public static", "return": "Set<R>", "signature": "Set<R> transformSet(Set<T> source, Function<T, R> transformer)", "full_signature": "public static Set<R> transformSet(Set<T> source, Function<T, R> transformer)", "class_method_signature": "CollectionsExt.transformSet(Set<T> source, Function<T, R> transformer)", "testcase": false, "constructor": false}, {"identifier": "transformValues", "parameters": "(Map<K, V> source, Function<V, R> transformer)", "modifiers": "public static", "return": "Map<K, R>", "signature": "Map<K, R> transformValues(Map<K, V> source, Function<V, R> transformer)", "full_signature": "public static Map<K, R> transformValues(Map<K, V> source, Function<V, R> transformer)", "class_method_signature": "CollectionsExt.transformValues(Map<K, V> source, Function<V, R> transformer)", "testcase": false, "constructor": false}, {"identifier": "asSet", "parameters": "(T... values)", "modifiers": "@SafeVarargs public static", "return": "Set<T>", "signature": "Set<T> asSet(T... values)", "full_signature": "@SafeVarargs public static Set<T> asSet(T... values)", "class_method_signature": "CollectionsExt.asSet(T... values)", "testcase": false, "constructor": false}, {"identifier": "asSet", "parameters": "(T[] values, int from, int to)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> asSet(T[] values, int from, int to)", "full_signature": "public static Set<T> asSet(T[] values, int from, int to)", "class_method_signature": "CollectionsExt.asSet(T[] values, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "asMap", "parameters": "(T... values)", "modifiers": "@SafeVarargs public static", "return": "Map<T, T>", "signature": "Map<T, T> asMap(T... values)", "full_signature": "@SafeVarargs public static Map<T, T> asMap(T... values)", "class_method_signature": "CollectionsExt.asMap(T... values)", "testcase": false, "constructor": false}, {"identifier": "zipToMap", "parameters": "(Collection<K> keys, Collection<V> values)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> zipToMap(Collection<K> keys, Collection<V> values)", "full_signature": "public static Map<K, V> zipToMap(Collection<K> keys, Collection<V> values)", "class_method_signature": "CollectionsExt.zipToMap(Collection<K> keys, Collection<V> values)", "testcase": false, "constructor": false}, {"identifier": "newMap", "parameters": "(Supplier<Map<K, V>> mapTypeBuilder)", "modifiers": "public static", "return": "MapBuilder<K, V>", "signature": "MapBuilder<K, V> newMap(Supplier<Map<K, V>> mapTypeBuilder)", "full_signature": "public static MapBuilder<K, V> newMap(Supplier<Map<K, V>> mapTypeBuilder)", "class_method_signature": "CollectionsExt.newMap(Supplier<Map<K, V>> mapTypeBuilder)", "testcase": false, "constructor": false}, {"identifier": "newHashMap", "parameters": "()", "modifiers": "public static", "return": "MapBuilder<K, V>", "signature": "MapBuilder<K, V> newHashMap()", "full_signature": "public static MapBuilder<K, V> newHashMap()", "class_method_signature": "CollectionsExt.newHashMap()", "testcase": false, "constructor": false}, {"identifier": "newHashMap", "parameters": "(Map<K, V> original)", "modifiers": "public static", "return": "MapBuilder<K, V>", "signature": "MapBuilder<K, V> newHashMap(Map<K, V> original)", "full_signature": "public static MapBuilder<K, V> newHashMap(Map<K, V> original)", "class_method_signature": "CollectionsExt.newHashMap(Map<K, V> original)", "testcase": false, "constructor": false}, {"identifier": "newMapFrom", "parameters": "(K[] keys, Function<K, V> valueFun)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> newMapFrom(K[] keys, Function<K, V> valueFun)", "full_signature": "public static Map<K, V> newMapFrom(K[] keys, Function<K, V> valueFun)", "class_method_signature": "CollectionsExt.newMapFrom(K[] keys, Function<K, V> valueFun)", "testcase": false, "constructor": false}, {"identifier": "toPrimitiveArray", "parameters": "(Collection<Integer> collection)", "modifiers": "public static", "return": "int[]", "signature": "int[] toPrimitiveArray(Collection<Integer> collection)", "full_signature": "public static int[] toPrimitiveArray(Collection<Integer> collection)", "class_method_signature": "CollectionsExt.toPrimitiveArray(Collection<Integer> collection)", "testcase": false, "constructor": false}, {"identifier": "toPrimitiveCharArray", "parameters": "(Collection<Character> collection)", "modifiers": "public static", "return": "char[]", "signature": "char[] toPrimitiveCharArray(Collection<Character> collection)", "full_signature": "public static char[] toPrimitiveCharArray(Collection<Character> collection)", "class_method_signature": "CollectionsExt.toPrimitiveCharArray(Collection<Character> collection)", "testcase": false, "constructor": false}, {"identifier": "toPrimitiveCharArray", "parameters": "(Character[] arrayOfChar)", "modifiers": "public static", "return": "char[]", "signature": "char[] toPrimitiveCharArray(Character[] arrayOfChar)", "full_signature": "public static char[] toPrimitiveCharArray(Character[] arrayOfChar)", "class_method_signature": "CollectionsExt.toPrimitiveCharArray(Character[] arrayOfChar)", "testcase": false, "constructor": false}, {"identifier": "toWrapperList", "parameters": "(int[] intArray)", "modifiers": "public static", "return": "List<Integer>", "signature": "List<Integer> toWrapperList(int[] intArray)", "full_signature": "public static List<Integer> toWrapperList(int[] intArray)", "class_method_signature": "CollectionsExt.toWrapperList(int[] intArray)", "testcase": false, "constructor": false}, {"identifier": "chop", "parameters": "(List<T> list, int chunkSize)", "modifiers": "public static", "return": "List<List<T>>", "signature": "List<List<T>> chop(List<T> list, int chunkSize)", "full_signature": "public static List<List<T>> chop(List<T> list, int chunkSize)", "class_method_signature": "CollectionsExt.chop(List<T> list, int chunkSize)", "testcase": false, "constructor": false}, {"identifier": "optionalOfNotEmpty", "parameters": "(C collection)", "modifiers": "public static", "return": "Optional<C>", "signature": "Optional<C> optionalOfNotEmpty(C collection)", "full_signature": "public static Optional<C> optionalOfNotEmpty(C collection)", "class_method_signature": "CollectionsExt.optionalOfNotEmpty(C collection)", "testcase": false, "constructor": false}, {"identifier": "containsKeys", "parameters": "(Map<T, ?> map, T... keys)", "modifiers": "@SafeVarargs public static", "return": "boolean", "signature": "boolean containsKeys(Map<T, ?> map, T... keys)", "full_signature": "@SafeVarargs public static boolean containsKeys(Map<T, ?> map, T... keys)", "class_method_signature": "CollectionsExt.containsKeys(Map<T, ?> map, T... keys)", "testcase": false, "constructor": false}, {"identifier": "containsAnyKeys", "parameters": "(Map<T, ?> map, T... keys)", "modifiers": "@SafeVarargs public static", "return": "boolean", "signature": "boolean containsAnyKeys(Map<T, ?> map, T... keys)", "full_signature": "@SafeVarargs public static boolean containsAnyKeys(Map<T, ?> map, T... keys)", "class_method_signature": "CollectionsExt.containsAnyKeys(Map<T, ?> map, T... keys)", "testcase": false, "constructor": false}, {"identifier": "indexBy", "parameters": "(List<T> items, Function<T, I> keyMapper)", "modifiers": "public static", "return": "Map<I, T>", "signature": "Map<I, T> indexBy(List<T> items, Function<T, I> keyMapper)", "full_signature": "public static Map<I, T> indexBy(List<T> items, Function<T, I> keyMapper)", "class_method_signature": "CollectionsExt.indexBy(List<T> items, Function<T, I> keyMapper)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(Collection<T> one, Collection<T> other, BiPredicate<T, T> equal)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> difference(Collection<T> one, Collection<T> other, BiPredicate<T, T> equal)", "full_signature": "public static Collection<T> difference(Collection<T> one, Collection<T> other, BiPredicate<T, T> equal)", "class_method_signature": "CollectionsExt.difference(Collection<T> one, Collection<T> other, BiPredicate<T, T> equal)", "testcase": false, "constructor": false}, {"identifier": "binarySearchLeftMost", "parameters": "(List<T> items, Function<T, Integer> targetComparator)", "modifiers": "public static", "return": "int", "signature": "int binarySearchLeftMost(List<T> items, Function<T, Integer> targetComparator)", "full_signature": "public static int binarySearchLeftMost(List<T> items, Function<T, Integer> targetComparator)", "class_method_signature": "CollectionsExt.binarySearchLeftMost(List<T> items, Function<T, Integer> targetComparator)", "testcase": false, "constructor": false}, {"identifier": "toLowerCaseKeys", "parameters": "(Map<String, V> entries)", "modifiers": "public static", "return": "Map<String, V>", "signature": "Map<String, V> toLowerCaseKeys(Map<String, V> entries)", "full_signature": "public static Map<String, V> toLowerCaseKeys(Map<String, V> entries)", "class_method_signature": "CollectionsExt.toLowerCaseKeys(Map<String, V> entries)", "testcase": false, "constructor": false}, {"identifier": "toLowerCaseKeys", "parameters": "(Map<String, V> entries, Supplier<Map<String, V>> mapSupplier)", "modifiers": "public static", "return": "Map<String, V>", "signature": "Map<String, V> toLowerCaseKeys(Map<String, V> entries, Supplier<Map<String, V>> mapSupplier)", "full_signature": "public static Map<String, V> toLowerCaseKeys(Map<String, V> entries, Supplier<Map<String, V>> mapSupplier)", "class_method_signature": "CollectionsExt.toLowerCaseKeys(Map<String, V> entries, Supplier<Map<String, V>> mapSupplier)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/CollectionsExt.java"}, "focal_method": {"identifier": "containsAnyKeys", "parameters": "(Map<T, ?> map, T... keys)", "modifiers": "@SafeVarargs public static", "return": "boolean", "body": "@SafeVarargs\n    public static <T> boolean containsAnyKeys(Map<T, ?> map, T... keys) {\n        if (map == null) {\n            return false;\n        }\n\n        for (T key : keys) {\n            if (map.containsKey(key)) {\n                return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean containsAnyKeys(Map<T, ?> map, T... keys)", "full_signature": "@SafeVarargs public static boolean containsAnyKeys(Map<T, ?> map, T... keys)", "class_method_signature": "CollectionsExt.containsAnyKeys(Map<T, ?> map, T... keys)", "testcase": false, "constructor": false, "invocations": ["containsKey"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}