{"test_class": {"identifier": "WorkerTest", "superclass": "", "interfaces": "", "fields": [], "file": "android/testSrc/com/android/tools/idea/run/deployment/WorkerTest.java"}, "test_case": {"identifier": "performResultFutureIsCancelled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void performResultFutureIsCancelled() {\n    // Arrange\n    Object expectedResult = new Object();\n    Worker<Object> worker = new Worker<>(expectedResult);\n\n    // Act\n    Object actualResult = worker.perform(Futures::immediateCancelledFuture);\n\n    // Assert\n    assertEquals(expectedResult, actualResult);\n  }", "signature": "void performResultFutureIsCancelled()", "full_signature": "@Test public void performResultFutureIsCancelled()", "class_method_signature": "WorkerTest.performResultFutureIsCancelled()", "testcase": true, "constructor": false, "invocations": ["perform", "assertEquals"]}, "focal_class": {"identifier": "Worker", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Nullable\n  private Future<V> myResultFuture;", "modifier": "@Nullable\n  private", "type": "Future<V>", "declarator": "myResultFuture", "var_name": "myResultFuture"}, {"original_string": "@NotNull\n  private V myResult;", "modifier": "@NotNull\n  private", "type": "V", "declarator": "myResult", "var_name": "myResult"}], "methods": [{"identifier": "Worker", "parameters": "(@NotNull V result)", "modifiers": "", "return": "", "signature": " Worker(@NotNull V result)", "full_signature": "  Worker(@NotNull V result)", "class_method_signature": "Worker.Worker(@NotNull V result)", "testcase": false, "constructor": true}, {"identifier": "perform", "parameters": "(@NotNull AsyncSupplier<V> task)", "modifiers": "@NotNull", "return": "V", "signature": "V perform(@NotNull AsyncSupplier<V> task)", "full_signature": "@NotNull V perform(@NotNull AsyncSupplier<V> task)", "class_method_signature": "Worker.perform(@NotNull AsyncSupplier<V> task)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/run/deployment/Worker.java"}, "focal_method": {"identifier": "perform", "parameters": "(@NotNull AsyncSupplier<V> task)", "modifiers": "@NotNull", "return": "V", "body": "@NotNull\n  V perform(@NotNull AsyncSupplier<V> task) {\n    if (myResultFuture == null) {\n      myResultFuture = task.get();\n    }\n\n    if (myResultFuture.isCancelled()) {\n      myResultFuture = task.get();\n      return myResult;\n    }\n\n    if (!myResultFuture.isDone()) {\n      return myResult;\n    }\n\n    try {\n      myResult = myResultFuture.get();\n      myResultFuture = task.get();\n\n      return myResult;\n    }\n    catch (InterruptedException exception) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(exception);\n    }\n    catch (ExecutionException exception) {\n      Logger.getInstance(Worker.class).warn(exception);\n      myResultFuture = task.get();\n\n      return myResult;\n    }\n  }", "signature": "V perform(@NotNull AsyncSupplier<V> task)", "full_signature": "@NotNull V perform(@NotNull AsyncSupplier<V> task)", "class_method_signature": "Worker.perform(@NotNull AsyncSupplier<V> task)", "testcase": false, "constructor": false, "invocations": ["get", "isCancelled", "get", "isDone", "get", "get", "interrupt", "currentThread", "warn", "getInstance", "get"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}