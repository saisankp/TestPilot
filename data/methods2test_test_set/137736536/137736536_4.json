{"test_class": {"identifier": "GetEidLpadWorkerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GetEidLpadWorker getIdWorker;", "modifier": "private", "type": "GetEidLpadWorker", "declarator": "getIdWorker", "var_name": "getIdWorker"}, {"original_string": "@Mock\n    private Progress mockProgress;", "modifier": "@Mock\n    private", "type": "Progress", "declarator": "mockProgress", "var_name": "mockProgress"}, {"original_string": "@Mock\n    private ApduChannel mockApduChannel;", "modifier": "@Mock\n    private", "type": "ApduChannel", "declarator": "mockApduChannel", "var_name": "mockApduChannel"}], "file": "lpad_sm-dpplus_connector/src/test/java/com/truphone/lpad/worker/GetEidLpadWorkerTest.java"}, "test_case": {"identifier": "shouldThrowRuntimeExceptionWhenEidApduIsNull", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n    public void shouldThrowRuntimeExceptionWhenEidApduIsNull() {\n        getIdWorker.run(buildStringLpadWorkerExchange(null));\n    }", "signature": "void shouldThrowRuntimeExceptionWhenEidApduIsNull()", "full_signature": "@Test(expected = RuntimeException.class) public void shouldThrowRuntimeExceptionWhenEidApduIsNull()", "class_method_signature": "GetEidLpadWorkerTest.shouldThrowRuntimeExceptionWhenEidApduIsNull()", "testcase": true, "constructor": false, "invocations": ["run", "buildStringLpadWorkerExchange"]}, "focal_class": {"identifier": "GetEidLpadWorker", "superclass": "", "interfaces": "implements LpadWorker<LpadWorkerExchange<String>, String>", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(GetEidLpadWorker.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(GetEidLpadWorker.class.getName())", "var_name": "LOG"}, {"original_string": "private final Progress progress;", "modifier": "private final", "type": "Progress", "declarator": "progress", "var_name": "progress"}, {"original_string": "private final ApduChannel apduChannel;", "modifier": "private final", "type": "ApduChannel", "declarator": "apduChannel", "var_name": "apduChannel"}], "methods": [{"identifier": "GetEidLpadWorker", "parameters": "(final Progress progress,\n                            final ApduChannel apduChannel)", "modifiers": "public", "return": "", "signature": " GetEidLpadWorker(final Progress progress,\n                            final ApduChannel apduChannel)", "full_signature": "public  GetEidLpadWorker(final Progress progress,\n                            final ApduChannel apduChannel)", "class_method_signature": "GetEidLpadWorker.GetEidLpadWorker(final Progress progress,\n                            final ApduChannel apduChannel)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "(final LpadWorkerExchange<String> lpadWorkerExchange)", "modifiers": "public", "return": "String", "signature": "String run(final LpadWorkerExchange<String> lpadWorkerExchange)", "full_signature": "public String run(final LpadWorkerExchange<String> lpadWorkerExchange)", "class_method_signature": "GetEidLpadWorker.run(final LpadWorkerExchange<String> lpadWorkerExchange)", "testcase": false, "constructor": false}, {"identifier": "convertGetEuiccData", "parameters": "(final String eidapduResponseStr,\n                                       final Progress progress)", "modifiers": "private", "return": "String", "signature": "String convertGetEuiccData(final String eidapduResponseStr,\n                                       final Progress progress)", "full_signature": "private String convertGetEuiccData(final String eidapduResponseStr,\n                                       final Progress progress)", "class_method_signature": "GetEidLpadWorker.convertGetEuiccData(final String eidapduResponseStr,\n                                       final Progress progress)", "testcase": false, "constructor": false}, {"identifier": "logDebug", "parameters": "(final String errorMessage)", "modifiers": "private", "return": "void", "signature": "void logDebug(final String errorMessage)", "full_signature": "private void logDebug(final String errorMessage)", "class_method_signature": "GetEidLpadWorker.logDebug(final String errorMessage)", "testcase": false, "constructor": false}, {"identifier": "inputValidation", "parameters": "(final boolean invalidCondition, final String errorMessage)", "modifiers": "private", "return": "void", "signature": "void inputValidation(final boolean invalidCondition, final String errorMessage)", "full_signature": "private void inputValidation(final boolean invalidCondition, final String errorMessage)", "class_method_signature": "GetEidLpadWorker.inputValidation(final boolean invalidCondition, final String errorMessage)", "testcase": false, "constructor": false}], "file": "lpad_sm-dpplus_connector/src/main/java/com/truphone/lpad/worker/GetEidLpadWorker.java"}, "focal_method": {"identifier": "run", "parameters": "(final LpadWorkerExchange<String> lpadWorkerExchange)", "modifiers": "public", "return": "String", "body": "public String run(final LpadWorkerExchange<String> lpadWorkerExchange) {\n\n        progress.setTotalSteps(3);\n        progress.stepExecuted(ProgressStep.GET_EID_RETRIEVING, \"getEID retrieving...\");\n\n        inputValidation(lpadWorkerExchange == null, \"Lpa dWorker Exchange must be provided\");\n        inputValidation(StringUtils.isBlank(lpadWorkerExchange.getBody()), \"EID APDU must be provided\");\n\n        logDebug(\"EID APDU: \" + lpadWorkerExchange);\n\n\n        String eidapduResponseStr = apduChannel.transmitAPDU(lpadWorkerExchange.getBody());\n\n        logDebug(\"Response: \" + eidapduResponseStr);\n\n        return convertGetEuiccData(eidapduResponseStr, progress);\n    }", "signature": "String run(final LpadWorkerExchange<String> lpadWorkerExchange)", "full_signature": "public String run(final LpadWorkerExchange<String> lpadWorkerExchange)", "class_method_signature": "GetEidLpadWorker.run(final LpadWorkerExchange<String> lpadWorkerExchange)", "testcase": false, "constructor": false, "invocations": ["setTotalSteps", "stepExecuted", "inputValidation", "inputValidation", "isBlank", "getBody", "logDebug", "transmitAPDU", "getBody", "logDebug", "convertGetEuiccData"]}, "repository": {"repo_id": 137736536, "url": "https://github.com/Truphone/LPAd_SM-DPPlus_Connector", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 14, "size": 175, "license": "licensed"}}