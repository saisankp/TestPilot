{"test_class": {"identifier": "HashPartitionerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HashPartitioner<Tuple2<String, Integer>> hashPartitioner;", "modifier": "private", "type": "HashPartitioner<Tuple2<String, Integer>>", "declarator": "hashPartitioner", "var_name": "hashPartitioner"}, {"original_string": "private StreamRecord<Tuple2<String, Integer>> streamRecord1 = new StreamRecord<Tuple2<String, Integer>>(new Tuple2<String, Integer>(\"test\", 0));", "modifier": "private", "type": "StreamRecord<Tuple2<String, Integer>>", "declarator": "streamRecord1 = new StreamRecord<Tuple2<String, Integer>>(new Tuple2<String, Integer>(\"test\", 0))", "var_name": "streamRecord1"}, {"original_string": "private StreamRecord<Tuple2<String, Integer>> streamRecord2 = new StreamRecord<Tuple2<String, Integer>>(new Tuple2<String, Integer>(\"test\", 42));", "modifier": "private", "type": "StreamRecord<Tuple2<String, Integer>>", "declarator": "streamRecord2 = new StreamRecord<Tuple2<String, Integer>>(new Tuple2<String, Integer>(\"test\", 42))", "var_name": "streamRecord2"}, {"original_string": "private SerializationDelegate<StreamRecord<Tuple2<String, Integer>>> sd1 = new SerializationDelegate<StreamRecord<Tuple2<String, Integer>>>(null);", "modifier": "private", "type": "SerializationDelegate<StreamRecord<Tuple2<String, Integer>>>", "declarator": "sd1 = new SerializationDelegate<StreamRecord<Tuple2<String, Integer>>>(null)", "var_name": "sd1"}, {"original_string": "private SerializationDelegate<StreamRecord<Tuple2<String, Integer>>> sd2 = new SerializationDelegate<StreamRecord<Tuple2<String, Integer>>>(null);", "modifier": "private", "type": "SerializationDelegate<StreamRecord<Tuple2<String, Integer>>>", "declarator": "sd2 = new SerializationDelegate<StreamRecord<Tuple2<String, Integer>>>(null)", "var_name": "sd2"}], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/partitioner/HashPartitionerTest.java"}, "test_case": {"identifier": "testSelectChannelsGrouping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSelectChannelsGrouping() {\n\t\tsd1.setInstance(streamRecord1);\n\t\tsd2.setInstance(streamRecord2);\n\n\t\tassertArrayEquals(hashPartitioner.selectChannels(sd1, 1),\n\t\t\t\thashPartitioner.selectChannels(sd2, 1));\n\t\tassertArrayEquals(hashPartitioner.selectChannels(sd1, 2),\n\t\t\t\thashPartitioner.selectChannels(sd2, 2));\n\t\tassertArrayEquals(hashPartitioner.selectChannels(sd1, 1024),\n\t\t\t\thashPartitioner.selectChannels(sd2, 1024));\n\t}", "signature": "void testSelectChannelsGrouping()", "full_signature": "@Test public void testSelectChannelsGrouping()", "class_method_signature": "HashPartitionerTest.testSelectChannelsGrouping()", "testcase": true, "constructor": false, "invocations": ["setInstance", "setInstance", "assertArrayEquals", "selectChannels", "selectChannels", "assertArrayEquals", "selectChannels", "selectChannels", "assertArrayEquals", "selectChannels", "selectChannels"]}, "focal_class": {"identifier": "HashPartitioner", "superclass": "extends StreamPartitioner<T>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private int[] returnArray = new int[1];", "modifier": "private", "type": "int[]", "declarator": "returnArray = new int[1]", "var_name": "returnArray"}, {"original_string": "KeySelector<T, ?> keySelector;", "modifier": "", "type": "KeySelector<T, ?>", "declarator": "keySelector", "var_name": "keySelector"}], "methods": [{"identifier": "HashPartitioner", "parameters": "(KeySelector<T, ?> keySelector)", "modifiers": "public", "return": "", "signature": " HashPartitioner(KeySelector<T, ?> keySelector)", "full_signature": "public  HashPartitioner(KeySelector<T, ?> keySelector)", "class_method_signature": "HashPartitioner.HashPartitioner(KeySelector<T, ?> keySelector)", "testcase": false, "constructor": true}, {"identifier": "selectChannels", "parameters": "(SerializationDelegate<StreamRecord<T>> record,\n\t\t\tint numberOfOutputChannels)", "modifiers": "@Override public", "return": "int[]", "signature": "int[] selectChannels(SerializationDelegate<StreamRecord<T>> record,\n\t\t\tint numberOfOutputChannels)", "full_signature": "@Override public int[] selectChannels(SerializationDelegate<StreamRecord<T>> record,\n\t\t\tint numberOfOutputChannels)", "class_method_signature": "HashPartitioner.selectChannels(SerializationDelegate<StreamRecord<T>> record,\n\t\t\tint numberOfOutputChannels)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "@Override public", "return": "StreamPartitioner<T>", "signature": "StreamPartitioner<T> copy()", "full_signature": "@Override public StreamPartitioner<T> copy()", "class_method_signature": "HashPartitioner.copy()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HashPartitioner.toString()", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/partitioner/HashPartitioner.java"}, "focal_method": {"identifier": "selectChannels", "parameters": "(SerializationDelegate<StreamRecord<T>> record,\n\t\t\tint numberOfOutputChannels)", "modifiers": "@Override public", "return": "int[]", "body": "@Override\n\tpublic int[] selectChannels(SerializationDelegate<StreamRecord<T>> record,\n\t\t\tint numberOfOutputChannels) {\n\t\tObject key;\n\t\ttry {\n\t\t\tkey = keySelector.getKey(record.getInstance().getValue());\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(\"Could not extract key from \" + record.getInstance().getValue(), e);\n\t\t}\n\t\treturnArray[0] = MathUtils.murmurHash(key.hashCode()) % numberOfOutputChannels;\n\n\t\treturn returnArray;\n\t}", "signature": "int[] selectChannels(SerializationDelegate<StreamRecord<T>> record,\n\t\t\tint numberOfOutputChannels)", "full_signature": "@Override public int[] selectChannels(SerializationDelegate<StreamRecord<T>> record,\n\t\t\tint numberOfOutputChannels)", "class_method_signature": "HashPartitioner.selectChannels(SerializationDelegate<StreamRecord<T>> record,\n\t\t\tint numberOfOutputChannels)", "testcase": false, "constructor": false, "invocations": ["getKey", "getValue", "getInstance", "getValue", "getInstance", "murmurHash", "hashCode"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}