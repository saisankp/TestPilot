{"test_class": {"identifier": "BowtiePixelGeoCodingTest", "superclass": "", "interfaces": "", "fields": [], "file": "seadas-reader/src/test/java/gov/nasa/gsfc/seadas/dataio/BowtiePixelGeoCodingTest.java"}, "test_case": {"identifier": "testTransferGeoCoding", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransferGeoCoding() throws URISyntaxException, IOException {\n        Product product = ProductIO.readProduct(new File(getClass().getResource(\"bowtiepixelgeocoding_test_product.L2_sub\").toURI()));\n        assertTrue(product.getSceneGeoCoding() instanceof BowtiePixelGeoCoding);\n\n        Product targetProduct = new Product(\"name\", \"type\", product.getSceneRasterWidth(), product.getSceneRasterHeight());\n\n        assertNull(targetProduct.getSceneGeoCoding());\n        ProductUtils.copyGeoCoding(product, targetProduct);\n\n        assertNotNull(targetProduct.getSceneGeoCoding());\n        assertTrue(targetProduct.getSceneGeoCoding() instanceof BowtiePixelGeoCoding);\n    }", "signature": "void testTransferGeoCoding()", "full_signature": "@Test public void testTransferGeoCoding()", "class_method_signature": "BowtiePixelGeoCodingTest.testTransferGeoCoding()", "testcase": true, "constructor": false, "invocations": ["readProduct", "toURI", "getResource", "getClass", "assertTrue", "getSceneGeoCoding", "getSceneRasterWidth", "getSceneRasterHeight", "assertNull", "getSceneGeoCoding", "copyGeoCoding", "assertNotNull", "getSceneGeoCoding", "assertTrue", "getSceneGeoCoding"]}, "focal_class": {"identifier": "BowtiePixelGeoCoding", "superclass": "extends AbstractBowtieGeoCoding", "interfaces": "", "fields": [{"original_string": "private Band latBand;", "modifier": "private", "type": "Band", "declarator": "latBand", "var_name": "latBand"}, {"original_string": "private Band lonBand;", "modifier": "private", "type": "Band", "declarator": "lonBand", "var_name": "lonBand"}, {"original_string": "int _scanlineHeight;", "modifier": "", "type": "int", "declarator": "_scanlineHeight", "var_name": "_scanlineHeight"}, {"original_string": "int _scanlineOffset;", "modifier": "", "type": "int", "declarator": "_scanlineOffset", "var_name": "_scanlineOffset"}], "methods": [{"identifier": "BowtiePixelGeoCoding", "parameters": "(Band latBand, Band lonBand, int scanlineHeight)", "modifiers": "public", "return": "", "signature": " BowtiePixelGeoCoding(Band latBand, Band lonBand, int scanlineHeight)", "full_signature": "public  BowtiePixelGeoCoding(Band latBand, Band lonBand, int scanlineHeight)", "class_method_signature": "BowtiePixelGeoCoding.BowtiePixelGeoCoding(Band latBand, Band lonBand, int scanlineHeight)", "testcase": false, "constructor": true}, {"identifier": "getSceneHeight", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSceneHeight()", "full_signature": "public int getSceneHeight()", "class_method_signature": "BowtiePixelGeoCoding.getSceneHeight()", "testcase": false, "constructor": false}, {"identifier": "getScanlineHeight", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getScanlineHeight()", "full_signature": "public int getScanlineHeight()", "class_method_signature": "BowtiePixelGeoCoding.getScanlineHeight()", "testcase": false, "constructor": false}, {"identifier": "getScanlineOffset", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getScanlineOffset()", "full_signature": "public int getScanlineOffset()", "class_method_signature": "BowtiePixelGeoCoding.getScanlineOffset()", "testcase": false, "constructor": false}, {"identifier": "getLatBand", "parameters": "()", "modifiers": "public", "return": "Band", "signature": "Band getLatBand()", "full_signature": "public Band getLatBand()", "class_method_signature": "BowtiePixelGeoCoding.getLatBand()", "testcase": false, "constructor": false}, {"identifier": "getLonBand", "parameters": "()", "modifiers": "public", "return": "Band", "signature": "Band getLonBand()", "full_signature": "public Band getLonBand()", "class_method_signature": "BowtiePixelGeoCoding.getLonBand()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "BowtiePixelGeoCoding.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BowtiePixelGeoCoding.hashCode()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "BowtiePixelGeoCoding.dispose()", "testcase": false, "constructor": false}, {"identifier": "calculateScanlineOffset", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void calculateScanlineOffset()", "full_signature": "private void calculateScanlineOffset()", "class_method_signature": "BowtiePixelGeoCoding.calculateScanlineOffset()", "testcase": false, "constructor": false}, {"identifier": "findStart", "parameters": "(int x)", "modifiers": "private", "return": "int", "signature": "int findStart(int x)", "full_signature": "private int findStart(int x)", "class_method_signature": "BowtiePixelGeoCoding.findStart(int x)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "BowtiePixelGeoCoding.init()", "testcase": false, "constructor": false}, {"identifier": "addStripeGeocode", "parameters": "(float[] lats, float[] lons, int y, int stripeW, int stripeH)", "modifiers": "private", "return": "void", "signature": "void addStripeGeocode(float[] lats, float[] lons, int y, int stripeW, int stripeH)", "full_signature": "private void addStripeGeocode(float[] lats, float[] lons, int y, int stripeW, int stripeH)", "class_method_signature": "BowtiePixelGeoCoding.addStripeGeocode(float[] lats, float[] lons, int y, int stripeW, int stripeH)", "testcase": false, "constructor": false}, {"identifier": "createStripeGeocode", "parameters": "(float[] lats, float[] lons, int y, int stripeW, int stripeH)", "modifiers": "private", "return": "GeoCoding", "signature": "GeoCoding createStripeGeocode(float[] lats, float[] lons, int y, int stripeW, int stripeH)", "full_signature": "private GeoCoding createStripeGeocode(float[] lats, float[] lons, int y, int stripeW, int stripeH)", "class_method_signature": "BowtiePixelGeoCoding.createStripeGeocode(float[] lats, float[] lons, int y, int stripeW, int stripeH)", "testcase": false, "constructor": false}, {"identifier": "transferGeoCoding", "parameters": "(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean transferGeoCoding(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef)", "full_signature": "@Override public boolean transferGeoCoding(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef)", "class_method_signature": "BowtiePixelGeoCoding.transferGeoCoding(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef)", "testcase": false, "constructor": false}, {"identifier": "ensureLatLonBands", "parameters": "(Scene destScene, ProductSubsetDef subsetDef)", "modifiers": "private", "return": "void", "signature": "void ensureLatLonBands(Scene destScene, ProductSubsetDef subsetDef)", "full_signature": "private void ensureLatLonBands(Scene destScene, ProductSubsetDef subsetDef)", "class_method_signature": "BowtiePixelGeoCoding.ensureLatLonBands(Scene destScene, ProductSubsetDef subsetDef)", "testcase": false, "constructor": false}], "file": "seadas-reader/src/main/java/gov/nasa/gsfc/seadas/dataio/BowtiePixelGeoCoding.java"}, "focal_method": {"identifier": "transferGeoCoding", "parameters": "(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean transferGeoCoding(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef) {\n\n        BowtiePixelGeoCoding srcGeocoding = (BowtiePixelGeoCoding)srcScene.getGeoCoding();\n        final String latBandName = srcGeocoding.latBand.getName();\n        final String lonBandName = srcGeocoding.lonBand.getName();\n\n        try {\n            ensureLatLonBands(destScene, subsetDef);\n        } catch (IOException e) {\n            return false;\n        }\n        final Band targetLatBand = destScene.getProduct().getBand(latBandName);\n        final Band targetLonBand = destScene.getProduct().getBand(lonBandName);\n        if(subsetDef != null) {\n            if(subsetDef.getSubSamplingY() != 1) {\n                destScene.setGeoCoding(GeoCodingFactory.createPixelGeoCoding(targetLatBand, targetLonBand, null, 5));\n                return true;\n            }\n        }\n\n        if (targetLatBand != null && targetLonBand != null) {\n            destScene.setGeoCoding(new BowtiePixelGeoCoding(targetLatBand, targetLonBand, srcGeocoding._scanlineHeight));\n            return true;\n        }\n        return false;\n    }", "signature": "boolean transferGeoCoding(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef)", "full_signature": "@Override public boolean transferGeoCoding(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef)", "class_method_signature": "BowtiePixelGeoCoding.transferGeoCoding(final Scene srcScene, final Scene destScene, final ProductSubsetDef subsetDef)", "testcase": false, "constructor": false, "invocations": ["getGeoCoding", "getName", "getName", "ensureLatLonBands", "getBand", "getProduct", "getBand", "getProduct", "getSubSamplingY", "setGeoCoding", "createPixelGeoCoding", "setGeoCoding"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}