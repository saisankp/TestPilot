{"test_class": {"identifier": "RaftActorRecoverySupportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RaftActorRecoverySupportTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RaftActorRecoverySupportTest.class)", "var_name": "LOG"}, {"original_string": "@Mock\n    private DataPersistenceProvider mockPersistence;", "modifier": "@Mock\n    private", "type": "DataPersistenceProvider", "declarator": "mockPersistence", "var_name": "mockPersistence"}, {"original_string": "@Mock\n    private RaftActorRecoveryCohort mockCohort;", "modifier": "@Mock\n    private", "type": "RaftActorRecoveryCohort", "declarator": "mockCohort", "var_name": "mockCohort"}, {"original_string": "@Mock\n    PersistentDataProvider mockPersistentProvider;", "modifier": "@Mock", "type": "PersistentDataProvider", "declarator": "mockPersistentProvider", "var_name": "mockPersistentProvider"}, {"original_string": "ActorRef mockActorRef;", "modifier": "", "type": "ActorRef", "declarator": "mockActorRef", "var_name": "mockActorRef"}, {"original_string": "ActorSystem mockActorSystem;", "modifier": "", "type": "ActorSystem", "declarator": "mockActorSystem", "var_name": "mockActorSystem"}, {"original_string": "private RaftActorRecoverySupport support;", "modifier": "private", "type": "RaftActorRecoverySupport", "declarator": "support", "var_name": "support"}, {"original_string": "private RaftActorContext context;", "modifier": "private", "type": "RaftActorContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final DefaultConfigParamsImpl configParams = new DefaultConfigParamsImpl();", "modifier": "private final", "type": "DefaultConfigParamsImpl", "declarator": "configParams = new DefaultConfigParamsImpl()", "var_name": "configParams"}, {"original_string": "private final String localId = \"leader\";", "modifier": "private final", "type": "String", "declarator": "localId = \"leader\"", "var_name": "localId"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/RaftActorRecoverySupportTest.java"}, "test_case": {"identifier": "testOnDeleteEntries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnDeleteEntries() {\n        ReplicatedLog replicatedLog = context.getReplicatedLog();\n        replicatedLog.append(new SimpleReplicatedLogEntry(0, 1, new MockRaftActorContext.MockPayload(\"0\")));\n        replicatedLog.append(new SimpleReplicatedLogEntry(1, 1, new MockRaftActorContext.MockPayload(\"1\")));\n        replicatedLog.append(new SimpleReplicatedLogEntry(2, 1, new MockRaftActorContext.MockPayload(\"2\")));\n\n        sendMessageToSupport(new DeleteEntries(1));\n\n        assertEquals(\"Journal log size\", 1, context.getReplicatedLog().size());\n        assertEquals(\"Last index\", 0, context.getReplicatedLog().lastIndex());\n    }", "signature": "void testOnDeleteEntries()", "full_signature": "@Test public void testOnDeleteEntries()", "class_method_signature": "RaftActorRecoverySupportTest.testOnDeleteEntries()", "testcase": true, "constructor": false, "invocations": ["getReplicatedLog", "append", "append", "append", "sendMessageToSupport", "assertEquals", "size", "getReplicatedLog", "assertEquals", "lastIndex", "getReplicatedLog"]}, "focal_class": {"identifier": "RaftActorRecoverySupport", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RaftActorContext context;", "modifier": "private final", "type": "RaftActorContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final RaftActorRecoveryCohort cohort;", "modifier": "private final", "type": "RaftActorRecoveryCohort", "declarator": "cohort", "var_name": "cohort"}, {"original_string": "private int currentRecoveryBatchCount;", "modifier": "private", "type": "int", "declarator": "currentRecoveryBatchCount", "var_name": "currentRecoveryBatchCount"}, {"original_string": "private boolean dataRecoveredWithPersistenceDisabled;", "modifier": "private", "type": "boolean", "declarator": "dataRecoveredWithPersistenceDisabled", "var_name": "dataRecoveredWithPersistenceDisabled"}, {"original_string": "private boolean anyDataRecovered;", "modifier": "private", "type": "boolean", "declarator": "anyDataRecovered", "var_name": "anyDataRecovered"}, {"original_string": "private boolean hasMigratedDataRecovered;", "modifier": "private", "type": "boolean", "declarator": "hasMigratedDataRecovered", "var_name": "hasMigratedDataRecovered"}, {"original_string": "private Stopwatch recoveryTimer;", "modifier": "private", "type": "Stopwatch", "declarator": "recoveryTimer", "var_name": "recoveryTimer"}, {"original_string": "private Stopwatch recoverySnapshotTimer;", "modifier": "private", "type": "Stopwatch", "declarator": "recoverySnapshotTimer", "var_name": "recoverySnapshotTimer"}, {"original_string": "private final Logger log;", "modifier": "private final", "type": "Logger", "declarator": "log", "var_name": "log"}], "methods": [{"identifier": "RaftActorRecoverySupport", "parameters": "(final RaftActorContext context, final RaftActorRecoveryCohort cohort)", "modifiers": "", "return": "", "signature": " RaftActorRecoverySupport(final RaftActorContext context, final RaftActorRecoveryCohort cohort)", "full_signature": "  RaftActorRecoverySupport(final RaftActorContext context, final RaftActorRecoveryCohort cohort)", "class_method_signature": "RaftActorRecoverySupport.RaftActorRecoverySupport(final RaftActorContext context, final RaftActorRecoveryCohort cohort)", "testcase": false, "constructor": true}, {"identifier": "handleRecoveryMessage", "parameters": "(final Object message, final PersistentDataProvider persistentProvider)", "modifiers": "", "return": "boolean", "signature": "boolean handleRecoveryMessage(final Object message, final PersistentDataProvider persistentProvider)", "full_signature": " boolean handleRecoveryMessage(final Object message, final PersistentDataProvider persistentProvider)", "class_method_signature": "RaftActorRecoverySupport.handleRecoveryMessage(final Object message, final PersistentDataProvider persistentProvider)", "testcase": false, "constructor": false}, {"identifier": "possiblyRestoreFromSnapshot", "parameters": "()", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void possiblyRestoreFromSnapshot()", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void possiblyRestoreFromSnapshot()", "class_method_signature": "RaftActorRecoverySupport.possiblyRestoreFromSnapshot()", "testcase": false, "constructor": false}, {"identifier": "replicatedLog", "parameters": "()", "modifiers": "private", "return": "ReplicatedLog", "signature": "ReplicatedLog replicatedLog()", "full_signature": "private ReplicatedLog replicatedLog()", "class_method_signature": "RaftActorRecoverySupport.replicatedLog()", "testcase": false, "constructor": false}, {"identifier": "initRecoveryTimers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initRecoveryTimers()", "full_signature": "private void initRecoveryTimers()", "class_method_signature": "RaftActorRecoverySupport.initRecoveryTimers()", "testcase": false, "constructor": false}, {"identifier": "onRecoveredSnapshot", "parameters": "(final SnapshotOffer offer)", "modifiers": "private", "return": "void", "signature": "void onRecoveredSnapshot(final SnapshotOffer offer)", "full_signature": "private void onRecoveredSnapshot(final SnapshotOffer offer)", "class_method_signature": "RaftActorRecoverySupport.onRecoveredSnapshot(final SnapshotOffer offer)", "testcase": false, "constructor": false}, {"identifier": "onRecoveredJournalLogEntry", "parameters": "(final ReplicatedLogEntry logEntry)", "modifiers": "private", "return": "void", "signature": "void onRecoveredJournalLogEntry(final ReplicatedLogEntry logEntry)", "full_signature": "private void onRecoveredJournalLogEntry(final ReplicatedLogEntry logEntry)", "class_method_signature": "RaftActorRecoverySupport.onRecoveredJournalLogEntry(final ReplicatedLogEntry logEntry)", "testcase": false, "constructor": false}, {"identifier": "onRecoveredApplyLogEntries", "parameters": "(final long toIndex)", "modifiers": "private", "return": "void", "signature": "void onRecoveredApplyLogEntries(final long toIndex)", "full_signature": "private void onRecoveredApplyLogEntries(final long toIndex)", "class_method_signature": "RaftActorRecoverySupport.onRecoveredApplyLogEntries(final long toIndex)", "testcase": false, "constructor": false}, {"identifier": "onDeleteEntries", "parameters": "(final DeleteEntries deleteEntries)", "modifiers": "private", "return": "void", "signature": "void onDeleteEntries(final DeleteEntries deleteEntries)", "full_signature": "private void onDeleteEntries(final DeleteEntries deleteEntries)", "class_method_signature": "RaftActorRecoverySupport.onDeleteEntries(final DeleteEntries deleteEntries)", "testcase": false, "constructor": false}, {"identifier": "batchRecoveredLogEntry", "parameters": "(final ReplicatedLogEntry logEntry)", "modifiers": "private", "return": "void", "signature": "void batchRecoveredLogEntry(final ReplicatedLogEntry logEntry)", "full_signature": "private void batchRecoveredLogEntry(final ReplicatedLogEntry logEntry)", "class_method_signature": "RaftActorRecoverySupport.batchRecoveredLogEntry(final ReplicatedLogEntry logEntry)", "testcase": false, "constructor": false}, {"identifier": "takeRecoverySnapshot", "parameters": "(final ReplicatedLogEntry logEntry)", "modifiers": "private", "return": "void", "signature": "void takeRecoverySnapshot(final ReplicatedLogEntry logEntry)", "full_signature": "private void takeRecoverySnapshot(final ReplicatedLogEntry logEntry)", "class_method_signature": "RaftActorRecoverySupport.takeRecoverySnapshot(final ReplicatedLogEntry logEntry)", "testcase": false, "constructor": false}, {"identifier": "shouldTakeRecoverySnapshot", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean shouldTakeRecoverySnapshot()", "full_signature": "private boolean shouldTakeRecoverySnapshot()", "class_method_signature": "RaftActorRecoverySupport.shouldTakeRecoverySnapshot()", "testcase": false, "constructor": false}, {"identifier": "endCurrentLogRecoveryBatch", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void endCurrentLogRecoveryBatch()", "full_signature": "private void endCurrentLogRecoveryBatch()", "class_method_signature": "RaftActorRecoverySupport.endCurrentLogRecoveryBatch()", "testcase": false, "constructor": false}, {"identifier": "onRecoveryCompletedMessage", "parameters": "(final PersistentDataProvider persistentProvider)", "modifiers": "private", "return": "void", "signature": "void onRecoveryCompletedMessage(final PersistentDataProvider persistentProvider)", "full_signature": "private void onRecoveryCompletedMessage(final PersistentDataProvider persistentProvider)", "class_method_signature": "RaftActorRecoverySupport.onRecoveryCompletedMessage(final PersistentDataProvider persistentProvider)", "testcase": false, "constructor": false}, {"identifier": "isServerConfigurationPayload", "parameters": "(final ReplicatedLogEntry repLogEntry)", "modifiers": "private static", "return": "boolean", "signature": "boolean isServerConfigurationPayload(final ReplicatedLogEntry repLogEntry)", "full_signature": "private static boolean isServerConfigurationPayload(final ReplicatedLogEntry repLogEntry)", "class_method_signature": "RaftActorRecoverySupport.isServerConfigurationPayload(final ReplicatedLogEntry repLogEntry)", "testcase": false, "constructor": false}, {"identifier": "isPersistentPayload", "parameters": "(final ReplicatedLogEntry repLogEntry)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPersistentPayload(final ReplicatedLogEntry repLogEntry)", "full_signature": "private static boolean isPersistentPayload(final ReplicatedLogEntry repLogEntry)", "class_method_signature": "RaftActorRecoverySupport.isPersistentPayload(final ReplicatedLogEntry repLogEntry)", "testcase": false, "constructor": false}, {"identifier": "isMigratedPayload", "parameters": "(final ReplicatedLogEntry repLogEntry)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMigratedPayload(final ReplicatedLogEntry repLogEntry)", "full_signature": "private static boolean isMigratedPayload(final ReplicatedLogEntry repLogEntry)", "class_method_signature": "RaftActorRecoverySupport.isMigratedPayload(final ReplicatedLogEntry repLogEntry)", "testcase": false, "constructor": false}, {"identifier": "isMigratedSerializable", "parameters": "(final Object message)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMigratedSerializable(final Object message)", "full_signature": "private static boolean isMigratedSerializable(final Object message)", "class_method_signature": "RaftActorRecoverySupport.isMigratedSerializable(final Object message)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/RaftActorRecoverySupport.java"}, "focal_method": {"identifier": "onDeleteEntries", "parameters": "(final DeleteEntries deleteEntries)", "modifiers": "private", "return": "void", "body": "private void onDeleteEntries(final DeleteEntries deleteEntries) {\n        if (context.getPersistenceProvider().isRecoveryApplicable()) {\n            replicatedLog().removeFrom(deleteEntries.getFromIndex());\n        } else {\n            dataRecoveredWithPersistenceDisabled = true;\n        }\n    }", "signature": "void onDeleteEntries(final DeleteEntries deleteEntries)", "full_signature": "private void onDeleteEntries(final DeleteEntries deleteEntries)", "class_method_signature": "RaftActorRecoverySupport.onDeleteEntries(final DeleteEntries deleteEntries)", "testcase": false, "constructor": false, "invocations": ["isRecoveryApplicable", "getPersistenceProvider", "removeFrom", "replicatedLog", "getFromIndex"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}