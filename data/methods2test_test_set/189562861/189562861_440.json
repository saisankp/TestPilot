{"test_class": {"identifier": "ServiceBeanTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/ServiceBeanTest.java"}, "test_case": {"identifier": "testGetService", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetService() {\n        TestService service = mock(TestService.class);\n        ServiceBean serviceBean = new ServiceBean(service);\n\n        Service beanService = serviceBean.getService();\n        Assert.assertThat(beanService, not(nullValue()));\n    }", "signature": "void testGetService()", "full_signature": "@Test public void testGetService()", "class_method_signature": "ServiceBeanTest.testGetService()", "testcase": true, "constructor": false, "invocations": ["mock", "getService", "assertThat", "not", "nullValue"]}, "focal_class": {"identifier": "ServiceBean", "superclass": "extends ServiceConfig<T>", "interfaces": "implements InitializingBean, DisposableBean,\n        ApplicationContextAware, ApplicationListener<ContextRefreshedEvent>, BeanNameAware,\n        ApplicationEventPublisherAware", "fields": [{"original_string": "private static final long serialVersionUID = 213195494150089726L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 213195494150089726L", "var_name": "serialVersionUID"}, {"original_string": "private final transient Service service;", "modifier": "private final transient", "type": "Service", "declarator": "service", "var_name": "service"}, {"original_string": "private transient ApplicationContext applicationContext;", "modifier": "private transient", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private transient String beanName;", "modifier": "private transient", "type": "String", "declarator": "beanName", "var_name": "beanName"}, {"original_string": "private transient boolean supportedApplicationListener;", "modifier": "private transient", "type": "boolean", "declarator": "supportedApplicationListener", "var_name": "supportedApplicationListener"}, {"original_string": "private ApplicationEventPublisher applicationEventPublisher;", "modifier": "private", "type": "ApplicationEventPublisher", "declarator": "applicationEventPublisher", "var_name": "applicationEventPublisher"}], "methods": [{"identifier": "ServiceBean", "parameters": "()", "modifiers": "public", "return": "", "signature": " ServiceBean()", "full_signature": "public  ServiceBean()", "class_method_signature": "ServiceBean.ServiceBean()", "testcase": false, "constructor": true}, {"identifier": "ServiceBean", "parameters": "(Service service)", "modifiers": "public", "return": "", "signature": " ServiceBean(Service service)", "full_signature": "public  ServiceBean(Service service)", "class_method_signature": "ServiceBean.ServiceBean(Service service)", "testcase": false, "constructor": true}, {"identifier": "setApplicationContext", "parameters": "(ApplicationContext applicationContext)", "modifiers": "@Override public", "return": "void", "signature": "void setApplicationContext(ApplicationContext applicationContext)", "full_signature": "@Override public void setApplicationContext(ApplicationContext applicationContext)", "class_method_signature": "ServiceBean.setApplicationContext(ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "setBeanName", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void setBeanName(String name)", "full_signature": "@Override public void setBeanName(String name)", "class_method_signature": "ServiceBean.setBeanName(String name)", "testcase": false, "constructor": false}, {"identifier": "getService", "parameters": "()", "modifiers": "public", "return": "Service", "signature": "Service getService()", "full_signature": "public Service getService()", "class_method_signature": "ServiceBean.getService()", "testcase": false, "constructor": false}, {"identifier": "onApplicationEvent", "parameters": "(ContextRefreshedEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onApplicationEvent(ContextRefreshedEvent event)", "full_signature": "@Override public void onApplicationEvent(ContextRefreshedEvent event)", "class_method_signature": "ServiceBean.onApplicationEvent(ContextRefreshedEvent event)", "testcase": false, "constructor": false}, {"identifier": "isDelay", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isDelay()", "full_signature": "private boolean isDelay()", "class_method_signature": "ServiceBean.isDelay()", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"deprecation\"}) public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"deprecation\"}) public void afterPropertiesSet()", "class_method_signature": "ServiceBean.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "getBeanName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBeanName()", "full_signature": "public String getBeanName()", "class_method_signature": "ServiceBean.getBeanName()", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void export()", "full_signature": "@Override public void export()", "class_method_signature": "ServiceBean.export()", "testcase": false, "constructor": false}, {"identifier": "publishExportEvent", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void publishExportEvent()", "full_signature": "private void publishExportEvent()", "class_method_signature": "ServiceBean.publishExportEvent()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "ServiceBean.destroy()", "testcase": false, "constructor": false}, {"identifier": "getServiceClass", "parameters": "(T ref)", "modifiers": "@Override protected", "return": "Class", "signature": "Class getServiceClass(T ref)", "full_signature": "@Override protected Class getServiceClass(T ref)", "class_method_signature": "ServiceBean.getServiceClass(T ref)", "testcase": false, "constructor": false}, {"identifier": "setApplicationEventPublisher", "parameters": "(ApplicationEventPublisher applicationEventPublisher)", "modifiers": "@Override public", "return": "void", "signature": "void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher)", "full_signature": "@Override public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher)", "class_method_signature": "ServiceBean.setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher)", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/ServiceBean.java"}, "focal_method": {"identifier": "getService", "parameters": "()", "modifiers": "public", "return": "Service", "body": "public Service getService() {\n        return service;\n    }", "signature": "Service getService()", "full_signature": "public Service getService()", "class_method_signature": "ServiceBean.getService()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}