{"test_class": {"identifier": "JettyServerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int RESPONSE_BUFFER_SIZE = 204800;", "modifier": "private static final", "type": "int", "declarator": "RESPONSE_BUFFER_SIZE = 204800", "var_name": "RESPONSE_BUFFER_SIZE"}, {"original_string": "private static final int REQUEST_BUFFER_SIZE = 81920;", "modifier": "private static final", "type": "int", "declarator": "REQUEST_BUFFER_SIZE = 81920", "var_name": "REQUEST_BUFFER_SIZE"}, {"original_string": "private static final String EXCPEPTION_MESSAGE = \"excpeption message\";", "modifier": "private static final", "type": "String", "declarator": "EXCPEPTION_MESSAGE = \"excpeption message\"", "var_name": "EXCPEPTION_MESSAGE"}, {"original_string": "private static final Integer PORT = 1234;", "modifier": "private static final", "type": "Integer", "declarator": "PORT = 1234", "var_name": "PORT"}, {"original_string": "@Mock\n    private Server jettyServer;", "modifier": "@Mock\n    private", "type": "Server", "declarator": "jettyServer", "var_name": "jettyServer"}, {"original_string": "@Mock\n    private HttpServlet httpServlet;", "modifier": "@Mock\n    private", "type": "HttpServlet", "declarator": "httpServlet", "var_name": "httpServlet"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock\n    private HandlerList handlerList;", "modifier": "@Mock\n    private", "type": "HandlerList", "declarator": "handlerList", "var_name": "handlerList"}, {"original_string": "@Mock\n    private ServerFactory serverFactory;", "modifier": "@Mock\n    private", "type": "ServerFactory", "declarator": "serverFactory", "var_name": "serverFactory"}, {"original_string": "@Mock\n    private WebAppConfigurationAccess configurationAccess;", "modifier": "@Mock\n    private", "type": "WebAppConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Mock\n    private PropertyDTO properties;", "modifier": "@Mock\n    private", "type": "PropertyDTO", "declarator": "properties", "var_name": "properties"}, {"original_string": "@InjectMocks\n    private JettyServer underTest;", "modifier": "@InjectMocks\n    private", "type": "JettyServer", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private ServerProperties serverProperties;", "modifier": "@Mock\n    private", "type": "ServerProperties", "declarator": "serverProperties", "var_name": "serverProperties"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/jetty/JettyServerTest.java"}, "test_case": {"identifier": "testStartShouldCallSetHandlerOnServerWhenCreateServerWasSuccessfully", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStartShouldCallSetHandlerOnServerWhenCreateServerWasSuccessfully() {\n        //GIVEN\n        given(serverFactory.createServer(serverProperties)).willReturn(jettyServer);\n        //WHEN\n        underTest.start();\n        //THEN\n        verify(jettyServer).setHandler((Handler) Mockito.anyObject());\n    }", "signature": "void testStartShouldCallSetHandlerOnServerWhenCreateServerWasSuccessfully()", "full_signature": "@Test public void testStartShouldCallSetHandlerOnServerWhenCreateServerWasSuccessfully()", "class_method_signature": "JettyServerTest.testStartShouldCallSetHandlerOnServerWhenCreateServerWasSuccessfully()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "createServer", "start", "setHandler", "verify", "anyObject"]}, "focal_class": {"identifier": "JettyServer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(JettyServer.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JettyServer.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private ServerFactory serverFactory;", "modifier": "@Autowired\n    private", "type": "ServerFactory", "declarator": "serverFactory", "var_name": "serverFactory"}, {"original_string": "@Autowired\n    private HandlerList handlerList;", "modifier": "@Autowired\n    private", "type": "HandlerList", "declarator": "handlerList", "var_name": "handlerList"}, {"original_string": "@Autowired\n    private WebAppConfigurationAccess configurationAccess;", "modifier": "@Autowired\n    private", "type": "WebAppConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "private Server server;", "modifier": "private", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private ServerProperties serverProperties;", "modifier": "private", "type": "ServerProperties", "declarator": "serverProperties", "var_name": "serverProperties"}], "methods": [{"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "JettyServer.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "JettyServer.stop()", "testcase": false, "constructor": false}, {"identifier": "stopJettyServer", "parameters": "()", "modifiers": "", "return": "void", "signature": "void stopJettyServer()", "full_signature": " void stopJettyServer()", "class_method_signature": "JettyServer.stopJettyServer()", "testcase": false, "constructor": false}, {"identifier": "startJettyServer", "parameters": "()", "modifiers": "", "return": "void", "signature": "void startJettyServer()", "full_signature": " void startJettyServer()", "class_method_signature": "JettyServer.startJettyServer()", "testcase": false, "constructor": false}, {"identifier": "initializeJettyServer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeJettyServer()", "full_signature": "private void initializeJettyServer()", "class_method_signature": "JettyServer.initializeJettyServer()", "testcase": false, "constructor": false}, {"identifier": "getServerProperties", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getServerProperties()", "full_signature": "private void getServerProperties()", "class_method_signature": "JettyServer.getServerProperties()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/jetty/JettyServer.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void start() {\n        initializeJettyServer();\n        server.setHandler(handlerList);\n        startJettyServer();\n    }", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "JettyServer.start()", "testcase": false, "constructor": false, "invocations": ["initializeJettyServer", "setHandler", "startJettyServer"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}