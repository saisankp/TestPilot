{"test_class": {"identifier": "KtlintAnalyzerTest", "superclass": "", "interfaces": "", "fields": [], "file": "code-assert/src/test/java/guru/nidi/codeassert/ktlint/KtlintAnalyzerTest.java"}, "test_case": {"identifier": "analyze", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void analyze() {\n        final KtlintResult result = new KtlintAnalyzer(AnalyzerConfig.maven(KOTLIN).test(), new KtlintCollector()\n                .just(In.classes(\"Linker\").ignore(\"no-semi\"))).analyze();\n        assertMatcher(\"\"\n                        + line(\"import-ordering\", \"Linker\", 18, \"Imports must be ordered in lexicographic order without any empty lines in-between\")\n                        + line(\"no-consecutive-blank-lines\", \"Linker\", 34, \"Needless blank line(s)\")\n                        + line(\"no-unused-imports\", \"Linker\", 18, \"Unused import\")\n                        + line(\"no-wildcard-imports\", \"Linker\", 19, \"Wildcard import\"),\n                result, hasNoKtlintIssues());\n    }", "signature": "void analyze()", "full_signature": "@Test void analyze()", "class_method_signature": "KtlintAnalyzerTest.analyze()", "testcase": true, "constructor": false, "invocations": ["analyze", "test", "maven", "just", "ignore", "classes", "assertMatcher", "line", "line", "line", "line", "hasNoKtlintIssues"]}, "focal_class": {"identifier": "KtlintAnalyzer", "superclass": "", "interfaces": "implements Analyzer<List<LocatedLintError>>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(KtlintAnalyzer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(KtlintAnalyzer.class)", "var_name": "LOG"}, {"original_string": "private static final Comparator<LocatedLintError> ERROR_COMPARATOR = Comparator\n            .comparing((LocatedLintError e) -> e.ruleId)\n            .thenComparing(e -> e.line);", "modifier": "private static final", "type": "Comparator<LocatedLintError>", "declarator": "ERROR_COMPARATOR = Comparator\n            .comparing((LocatedLintError e) -> e.ruleId)\n            .thenComparing(e -> e.line)", "var_name": "ERROR_COMPARATOR"}, {"original_string": "private final AnalyzerConfig config;", "modifier": "private final", "type": "AnalyzerConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final KtlintCollector collector;", "modifier": "private final", "type": "KtlintCollector", "declarator": "collector", "var_name": "collector"}, {"original_string": "private final List<RuleSet> ruleSets;", "modifier": "private final", "type": "List<RuleSet>", "declarator": "ruleSets", "var_name": "ruleSets"}], "methods": [{"identifier": "KtlintAnalyzer", "parameters": "(AnalyzerConfig config, KtlintCollector collector)", "modifiers": "public", "return": "", "signature": " KtlintAnalyzer(AnalyzerConfig config, KtlintCollector collector)", "full_signature": "public  KtlintAnalyzer(AnalyzerConfig config, KtlintCollector collector)", "class_method_signature": "KtlintAnalyzer.KtlintAnalyzer(AnalyzerConfig config, KtlintCollector collector)", "testcase": false, "constructor": true}, {"identifier": "KtlintAnalyzer", "parameters": "(AnalyzerConfig config, KtlintCollector collector, List<RuleSet> ruleSets)", "modifiers": "private", "return": "", "signature": " KtlintAnalyzer(AnalyzerConfig config, KtlintCollector collector, List<RuleSet> ruleSets)", "full_signature": "private  KtlintAnalyzer(AnalyzerConfig config, KtlintCollector collector, List<RuleSet> ruleSets)", "class_method_signature": "KtlintAnalyzer.KtlintAnalyzer(AnalyzerConfig config, KtlintCollector collector, List<RuleSet> ruleSets)", "testcase": false, "constructor": true}, {"identifier": "withRuleSets", "parameters": "(RuleSet... ruleSets)", "modifiers": "public", "return": "KtlintAnalyzer", "signature": "KtlintAnalyzer withRuleSets(RuleSet... ruleSets)", "full_signature": "public KtlintAnalyzer withRuleSets(RuleSet... ruleSets)", "class_method_signature": "KtlintAnalyzer.withRuleSets(RuleSet... ruleSets)", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "()", "modifiers": "public", "return": "KtlintResult", "signature": "KtlintResult analyze()", "full_signature": "public KtlintResult analyze()", "class_method_signature": "KtlintAnalyzer.analyze()", "testcase": false, "constructor": false}, {"identifier": "findRuleSets", "parameters": "()", "modifiers": "private", "return": "List<RuleSet>", "signature": "List<RuleSet> findRuleSets()", "full_signature": "private List<RuleSet> findRuleSets()", "class_method_signature": "KtlintAnalyzer.findRuleSets()", "testcase": false, "constructor": false}, {"identifier": "readFile", "parameters": "(File f)", "modifiers": "private", "return": "String", "signature": "String readFile(File f)", "full_signature": "private String readFile(File f)", "class_method_signature": "KtlintAnalyzer.readFile(File f)", "testcase": false, "constructor": false}, {"identifier": "createResult", "parameters": "(ErrorListener listener)", "modifiers": "private", "return": "KtlintResult", "signature": "KtlintResult createResult(ErrorListener listener)", "full_signature": "private KtlintResult createResult(ErrorListener listener)", "class_method_signature": "KtlintAnalyzer.createResult(ErrorListener listener)", "testcase": false, "constructor": false}], "file": "code-assert/src/main/java/guru/nidi/codeassert/ktlint/KtlintAnalyzer.java"}, "focal_method": {"identifier": "analyze", "parameters": "()", "modifiers": "public", "return": "KtlintResult", "body": "public KtlintResult analyze() {\n        final ErrorListener listener = new ErrorListener();\n        for (final File src : config.getSources(KOTLIN)) {\n            try {\n                listener.currentFile = src;\n                KtLint.INSTANCE.lint(new KtLint.Params(\n                        src.getAbsolutePath(), readFile(src), findRuleSets(),\n                        emptyMap(), listener, false, null, false));\n            } catch (IOException e) {\n                LOG.error(\"Could not read file {}\", src, e);\n            }\n        }\n        return createResult(listener);\n    }", "signature": "KtlintResult analyze()", "full_signature": "public KtlintResult analyze()", "class_method_signature": "KtlintAnalyzer.analyze()", "testcase": false, "constructor": false, "invocations": ["getSources", "lint", "getAbsolutePath", "readFile", "findRuleSets", "emptyMap", "error", "createResult"]}, "repository": {"repo_id": 48196746, "url": "https://github.com/nidi3/code-assert", "stars": 67, "created": "12/17/2015 8:30:58 PM +00:00", "updates": "2019-12-16T11:54:24+00:00", "fork": "False", "license": "licensed"}}