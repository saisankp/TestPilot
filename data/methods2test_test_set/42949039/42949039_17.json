{"test_class": {"identifier": "RegistrationDateAdapterTest", "superclass": "", "interfaces": "", "fields": [], "file": "herd-code/herd-model-api-15/src/test/java/org/finra/herd/model/api/adapters/RegistrationDateAdapterTest.java"}, "test_case": {"identifier": "unmarshalAllAllowedFormatsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void unmarshalAllAllowedFormatsTest() throws Exception\n    {\n        RegistrationDateAdapter adapter = new RegistrationDateAdapter();\n\n        // test for pattern: \"yyyy-MM-dd\"\n        XMLGregorianCalendar calendar = adapter.unmarshal(\"2020-02-02\");\n        compareCalendarWithExpectedValues(calendar, 2020, 2, 2, 0, 0, 0);\n\n        // test for pattern: \"yyyy-MM-dd'T'HH:mm\"\n        calendar = adapter.unmarshal(\"2015-12-25T00:01\");\n        compareCalendarWithExpectedValues(calendar, 2015, 12, 25, 0, 1, 0);\n\n        // test for pattern: \"yyyy-MM-dd'T'HH:mmZ\"\n        calendar = adapter.unmarshal(\"2015-12-25T00:01+04:00\");\n        compareCalendarWithExpectedValues(calendar, 2015, 12, 24, 20, 1, 0);\n\n        // test for pattern: \"yyyy-MM-dd'T'HH:mm:ss\"\n        calendar = adapter.unmarshal(\"2018-02-03T10:00:02\");\n        compareCalendarWithExpectedValues(calendar, 2018, 2, 3, 10, 0, 2);\n\n        // test for pattern: \"yyyy-MM-dd'T'HH:mm:ssZ\"\n        calendar = adapter.unmarshal(\"2018-02-03T10:00:02+04:00\");\n        compareCalendarWithExpectedValues(calendar, 2018, 2, 3, 6, 0, 2);\n\n        // test for pattern: \"yyyy-MM-dd HH:mm:ssZ\"\n        calendar = adapter.unmarshal(\"2018-02-03 10:00:02+05:30\");\n        compareCalendarWithExpectedValues(calendar, 2018, 2, 3, 4, 30, 2);\n\n        // test for pattern: \"yyyy-MM-dd HH:mm:ss\"\n        calendar = adapter.unmarshal(\"2018-03-03 00:20:02\");\n        compareCalendarWithExpectedValues(calendar, 2018, 3, 3, 0, 20, 2);\n    }", "signature": "void unmarshalAllAllowedFormatsTest()", "full_signature": "@Test public void unmarshalAllAllowedFormatsTest()", "class_method_signature": "RegistrationDateAdapterTest.unmarshalAllAllowedFormatsTest()", "testcase": true, "constructor": false, "invocations": ["unmarshal", "compareCalendarWithExpectedValues", "unmarshal", "compareCalendarWithExpectedValues", "unmarshal", "compareCalendarWithExpectedValues", "unmarshal", "compareCalendarWithExpectedValues", "unmarshal", "compareCalendarWithExpectedValues", "unmarshal", "compareCalendarWithExpectedValues", "unmarshal", "compareCalendarWithExpectedValues"]}, "focal_class": {"identifier": "RegistrationDateAdapter", "superclass": "extends XmlAdapter<String, XMLGregorianCalendar>", "interfaces": "", "fields": [], "methods": [{"identifier": "unmarshal", "parameters": "(String datetime)", "modifiers": "@Override public", "return": "XMLGregorianCalendar", "signature": "XMLGregorianCalendar unmarshal(String datetime)", "full_signature": "@Override public XMLGregorianCalendar unmarshal(String datetime)", "class_method_signature": "RegistrationDateAdapter.unmarshal(String datetime)", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(XMLGregorianCalendar xmlGregorianCalendar)", "modifiers": "@Override public", "return": "String", "signature": "String marshal(XMLGregorianCalendar xmlGregorianCalendar)", "full_signature": "@Override public String marshal(XMLGregorianCalendar xmlGregorianCalendar)", "class_method_signature": "RegistrationDateAdapter.marshal(XMLGregorianCalendar xmlGregorianCalendar)", "testcase": false, "constructor": false}], "file": "herd-code/herd-model-api-15/src/main/java/org/finra/herd/model/api/adapters/RegistrationDateAdapter.java"}, "focal_method": {"identifier": "unmarshal", "parameters": "(String datetime)", "modifiers": "@Override public", "return": "XMLGregorianCalendar", "body": "@Override\n    public XMLGregorianCalendar unmarshal(String datetime) throws Exception\n    {\n        try\n        {\n            final DateTimeParser[] parsers =\n                {\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd\").getParser(),\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm\").getParser(),\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mmZ\").getParser(),\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").getParser(),\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\").getParser(),\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss\").getParser(),\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ssZ\").getParser()\n                };\n\n            DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();\n\n            DateTime dateTime = dateTimeFormatter.withZoneUTC().parseDateTime(datetime.trim());\n\n            return DatatypeFactory.newInstance().newXMLGregorianCalendar(dateTime.toGregorianCalendar());\n        }\n        catch (IllegalArgumentException e)\n        {\n            // Since the original exception carries an error message which gives away 'too much information', we are having it\n            // swallowed and instead returning a generic error message.\n            throw new IllegalArgumentException(\"Valid date or date and time format must be used when specifying values for start/end registration dates.\");\n        }\n    }", "signature": "XMLGregorianCalendar unmarshal(String datetime)", "full_signature": "@Override public XMLGregorianCalendar unmarshal(String datetime)", "class_method_signature": "RegistrationDateAdapter.unmarshal(String datetime)", "testcase": false, "constructor": false, "invocations": ["getParser", "forPattern", "getParser", "forPattern", "getParser", "forPattern", "getParser", "forPattern", "getParser", "forPattern", "getParser", "forPattern", "getParser", "forPattern", "toFormatter", "append", "parseDateTime", "withZoneUTC", "trim", "newXMLGregorianCalendar", "newInstance", "toGregorianCalendar"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}