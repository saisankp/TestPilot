{"test_class": {"identifier": "WalletTest", "superclass": "extends TestWithWallet", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(WalletTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(WalletTest.class)", "var_name": "log"}, {"original_string": "private static final CharSequence PASSWORD1 = \"my helicopter contains eels\";", "modifier": "private static final", "type": "CharSequence", "declarator": "PASSWORD1 = \"my helicopter contains eels\"", "var_name": "PASSWORD1"}, {"original_string": "private static final CharSequence WRONG_PASSWORD = \"nothing noone nobody nowhere\";", "modifier": "private static final", "type": "CharSequence", "declarator": "WRONG_PASSWORD = \"nothing noone nobody nowhere\"", "var_name": "WRONG_PASSWORD"}, {"original_string": "private final Address OTHER_ADDRESS = LegacyAddress.fromKey(UNITTEST, new ECKey());", "modifier": "private final", "type": "Address", "declarator": "OTHER_ADDRESS = LegacyAddress.fromKey(UNITTEST, new ECKey())", "var_name": "OTHER_ADDRESS"}, {"original_string": "private static final byte[] EMPTY_SIG = {};", "modifier": "private static final", "type": "byte[]", "declarator": "EMPTY_SIG = {}", "var_name": "EMPTY_SIG"}], "file": "core/src/test/java/org/ulordj/wallet/WalletTest.java"}, "test_case": {"identifier": "isTxConsistentReturnsFalseAsExpected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isTxConsistentReturnsFalseAsExpected() {\n        Wallet wallet = new Wallet(UNITTEST);\n        TransactionOutput to = createMock(TransactionOutput.class);\n        EasyMock.expect(to.isAvailableForSpending()).andReturn(true);\n        EasyMock.expect(to.isMineOrWatched(wallet)).andReturn(true);\n        EasyMock.expect(to.getSpentBy()).andReturn(new TransactionInput(UNITTEST, null, new byte[0]));\n\n        Transaction tx = FakeTxBuilder.createFakeTxWithoutChange(UNITTEST, to);\n\n        replay(to);\n\n        boolean isConsistent = wallet.isTxConsistent(tx, false);\n        assertFalse(isConsistent);\n    }", "signature": "void isTxConsistentReturnsFalseAsExpected()", "full_signature": "@Test public void isTxConsistentReturnsFalseAsExpected()", "class_method_signature": "WalletTest.isTxConsistentReturnsFalseAsExpected()", "testcase": true, "constructor": false, "invocations": ["createMock", "andReturn", "expect", "isAvailableForSpending", "andReturn", "expect", "isMineOrWatched", "andReturn", "expect", "getSpentBy", "createFakeTxWithoutChange", "replay", "isTxConsistent", "assertFalse"]}, "focal_class": {"identifier": "Wallet", "superclass": "extends BaseTaggableObject", "interfaces": "implements NewBestBlockListener, TransactionReceivedInBlockListener, PeerFilterProvider, KeyBag, TransactionBag, ReorganizeListener", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Wallet.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Wallet.class)", "var_name": "log"}, {"original_string": "private static final int MINIMUM_BLOOM_DATA_LENGTH = 8;", "modifier": "private static final", "type": "int", "declarator": "MINIMUM_BLOOM_DATA_LENGTH = 8", "var_name": "MINIMUM_BLOOM_DATA_LENGTH"}, {"original_string": "protected final ReentrantLock lock = Threading.lock(\"wallet\");", "modifier": "protected final", "type": "ReentrantLock", "declarator": "lock = Threading.lock(\"wallet\")", "var_name": "lock"}, {"original_string": "protected final ReentrantLock keyChainGroupLock = Threading.lock(\"wallet-keychaingroup\");", "modifier": "protected final", "type": "ReentrantLock", "declarator": "keyChainGroupLock = Threading.lock(\"wallet-keychaingroup\")", "var_name": "keyChainGroupLock"}, {"original_string": "private final Map<Sha256Hash, Transaction> pending;", "modifier": "private final", "type": "Map<Sha256Hash, Transaction>", "declarator": "pending", "var_name": "pending"}, {"original_string": "private final Map<Sha256Hash, Transaction> unspent;", "modifier": "private final", "type": "Map<Sha256Hash, Transaction>", "declarator": "unspent", "var_name": "unspent"}, {"original_string": "private final Map<Sha256Hash, Transaction> spent;", "modifier": "private final", "type": "Map<Sha256Hash, Transaction>", "declarator": "spent", "var_name": "spent"}, {"original_string": "private final Map<Sha256Hash, Transaction> dead;", "modifier": "private final", "type": "Map<Sha256Hash, Transaction>", "declarator": "dead", "var_name": "dead"}, {"original_string": "protected final Map<Sha256Hash, Transaction> transactions;", "modifier": "protected final", "type": "Map<Sha256Hash, Transaction>", "declarator": "transactions", "var_name": "transactions"}, {"original_string": "protected final HashSet<TransactionOutput> myUnspents = Sets.newHashSet();", "modifier": "protected final", "type": "HashSet<TransactionOutput>", "declarator": "myUnspents = Sets.newHashSet()", "var_name": "myUnspents"}, {"original_string": "private final LinkedHashMap<Sha256Hash, Transaction> riskDropped = new LinkedHashMap<Sha256Hash, Transaction>() {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<Sha256Hash, Transaction> eldest) {\n            return size() > 1000;\n        }\n    };", "modifier": "private final", "type": "LinkedHashMap<Sha256Hash, Transaction>", "declarator": "riskDropped = new LinkedHashMap<Sha256Hash, Transaction>() {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<Sha256Hash, Transaction> eldest) {\n            return size() > 1000;\n        }\n    }", "var_name": "riskDropped"}, {"original_string": "@GuardedBy(\"keyChainGroupLock\") private KeyChainGroup keyChainGroup;", "modifier": "@GuardedBy(\"keyChainGroupLock\") private", "type": "KeyChainGroup", "declarator": "keyChainGroup", "var_name": "keyChainGroup"}, {"original_string": "@GuardedBy(\"keyChainGroupLock\") private Set<Script> watchedScripts;", "modifier": "@GuardedBy(\"keyChainGroupLock\") private", "type": "Set<Script>", "declarator": "watchedScripts", "var_name": "watchedScripts"}, {"original_string": "protected final Context context;", "modifier": "protected final", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "protected final NetworkParameters params;", "modifier": "protected final", "type": "NetworkParameters", "declarator": "params", "var_name": "params"}, {"original_string": "@Nullable private Sha256Hash lastBlockSeenHash;", "modifier": "@Nullable private", "type": "Sha256Hash", "declarator": "lastBlockSeenHash", "var_name": "lastBlockSeenHash"}, {"original_string": "private int lastBlockSeenHeight;", "modifier": "private", "type": "int", "declarator": "lastBlockSeenHeight", "var_name": "lastBlockSeenHeight"}, {"original_string": "private long lastBlockSeenTimeSecs;", "modifier": "private", "type": "long", "declarator": "lastBlockSeenTimeSecs", "var_name": "lastBlockSeenTimeSecs"}, {"original_string": "private final CopyOnWriteArrayList<ListenerRegistration<WalletChangeEventListener>> changeListeners\n        = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "CopyOnWriteArrayList<ListenerRegistration<WalletChangeEventListener>>", "declarator": "changeListeners\n        = new CopyOnWriteArrayList<>()", "var_name": "changeListeners"}, {"original_string": "private final CopyOnWriteArrayList<ListenerRegistration<WalletCoinsReceivedEventListener>> coinsReceivedListeners\n        = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "CopyOnWriteArrayList<ListenerRegistration<WalletCoinsReceivedEventListener>>", "declarator": "coinsReceivedListeners\n        = new CopyOnWriteArrayList<>()", "var_name": "coinsReceivedListeners"}, {"original_string": "private final CopyOnWriteArrayList<ListenerRegistration<WalletCoinsSentEventListener>> coinsSentListeners\n        = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "CopyOnWriteArrayList<ListenerRegistration<WalletCoinsSentEventListener>>", "declarator": "coinsSentListeners\n        = new CopyOnWriteArrayList<>()", "var_name": "coinsSentListeners"}, {"original_string": "private final CopyOnWriteArrayList<ListenerRegistration<WalletReorganizeEventListener>> reorganizeListeners\n        = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "CopyOnWriteArrayList<ListenerRegistration<WalletReorganizeEventListener>>", "declarator": "reorganizeListeners\n        = new CopyOnWriteArrayList<>()", "var_name": "reorganizeListeners"}, {"original_string": "private final CopyOnWriteArrayList<ListenerRegistration<ScriptsChangeEventListener>> scriptChangeListeners\n        = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "CopyOnWriteArrayList<ListenerRegistration<ScriptsChangeEventListener>>", "declarator": "scriptChangeListeners\n        = new CopyOnWriteArrayList<>()", "var_name": "scriptChangeListeners"}, {"original_string": "private final CopyOnWriteArrayList<ListenerRegistration<TransactionConfidenceEventListener>> transactionConfidenceListeners\n        = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "CopyOnWriteArrayList<ListenerRegistration<TransactionConfidenceEventListener>>", "declarator": "transactionConfidenceListeners\n        = new CopyOnWriteArrayList<>()", "var_name": "transactionConfidenceListeners"}, {"original_string": "private TransactionConfidence.Listener txConfidenceListener;", "modifier": "private", "type": "TransactionConfidence.Listener", "declarator": "txConfidenceListener", "var_name": "txConfidenceListener"}, {"original_string": "private HashSet<Sha256Hash> ignoreNextNewBlock;", "modifier": "private", "type": "HashSet<Sha256Hash>", "declarator": "ignoreNextNewBlock", "var_name": "ignoreNextNewBlock"}, {"original_string": "private boolean acceptRiskyTransactions;", "modifier": "private", "type": "boolean", "declarator": "acceptRiskyTransactions", "var_name": "acceptRiskyTransactions"}, {"original_string": "private RiskAnalysis.Analyzer riskAnalyzer = DefaultRiskAnalysis.FACTORY;", "modifier": "private", "type": "RiskAnalysis.Analyzer", "declarator": "riskAnalyzer = DefaultRiskAnalysis.FACTORY", "var_name": "riskAnalyzer"}, {"original_string": "private int onWalletChangedSuppressions;", "modifier": "private", "type": "int", "declarator": "onWalletChangedSuppressions", "var_name": "onWalletChangedSuppressions"}, {"original_string": "private boolean insideReorg;", "modifier": "private", "type": "boolean", "declarator": "insideReorg", "var_name": "insideReorg"}, {"original_string": "private Map<Transaction, TransactionConfidence.Listener.ChangeReason> confidenceChanged;", "modifier": "private", "type": "Map<Transaction, TransactionConfidence.Listener.ChangeReason>", "declarator": "confidenceChanged", "var_name": "confidenceChanged"}, {"original_string": "protected volatile WalletFiles vFileManager;", "modifier": "protected volatile", "type": "WalletFiles", "declarator": "vFileManager", "var_name": "vFileManager"}, {"original_string": "protected volatile TransactionBroadcaster vTransactionBroadcaster;", "modifier": "protected volatile", "type": "TransactionBroadcaster", "declarator": "vTransactionBroadcaster", "var_name": "vTransactionBroadcaster"}, {"original_string": "private volatile long vKeyRotationTimestamp;", "modifier": "private volatile", "type": "long", "declarator": "vKeyRotationTimestamp", "var_name": "vKeyRotationTimestamp"}, {"original_string": "protected CoinSelector coinSelector = new DefaultCoinSelector();", "modifier": "protected", "type": "CoinSelector", "declarator": "coinSelector = new DefaultCoinSelector()", "var_name": "coinSelector"}, {"original_string": "private int version;", "modifier": "private", "type": "int", "declarator": "version", "var_name": "version"}, {"original_string": "private String description;", "modifier": "private", "type": "String", "declarator": "description", "var_name": "description"}, {"original_string": "private final HashMap<String, WalletExtension> extensions;", "modifier": "private final", "type": "HashMap<String, WalletExtension>", "declarator": "extensions", "var_name": "extensions"}, {"original_string": "@GuardedBy(\"lock\") private volatile List<TransactionSigner> signers;", "modifier": "@GuardedBy(\"lock\") private volatile", "type": "List<TransactionSigner>", "declarator": "signers", "var_name": "signers"}, {"original_string": "@Nullable private volatile UTXOProvider vUTXOProvider;", "modifier": "@Nullable private volatile", "type": "UTXOProvider", "declarator": "vUTXOProvider", "var_name": "vUTXOProvider"}, {"original_string": "private boolean hardSaveOnNextBlock = false;", "modifier": "private", "type": "boolean", "declarator": "hardSaveOnNextBlock = false", "var_name": "hardSaveOnNextBlock"}, {"original_string": "@GuardedBy(\"lock\") private List<BalanceFutureRequest> balanceFutureRequests = Lists.newLinkedList();", "modifier": "@GuardedBy(\"lock\") private", "type": "List<BalanceFutureRequest>", "declarator": "balanceFutureRequests = Lists.newLinkedList()", "var_name": "balanceFutureRequests"}, {"original_string": "private final ArrayList<TransactionOutPoint> bloomOutPoints = Lists.newArrayList();", "modifier": "private final", "type": "ArrayList<TransactionOutPoint>", "declarator": "bloomOutPoints = Lists.newArrayList()", "var_name": "bloomOutPoints"}, {"original_string": "private final AtomicInteger bloomFilterGuard = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "bloomFilterGuard = new AtomicInteger(0)", "var_name": "bloomFilterGuard"}], "methods": [{"identifier": "Wallet", "parameters": "(NetworkParameters params)", "modifiers": "public", "return": "", "signature": " Wallet(NetworkParameters params)", "full_signature": "public  Wallet(NetworkParameters params)", "class_method_signature": "Wallet.Wallet(NetworkParameters params)", "testcase": false, "constructor": true}, {"identifier": "Wallet", "parameters": "(Context context)", "modifiers": "public", "return": "", "signature": " Wallet(Context context)", "full_signature": "public  Wallet(Context context)", "class_method_signature": "Wallet.Wallet(Context context)", "testcase": false, "constructor": true}, {"identifier": "fromSeed", "parameters": "(NetworkParameters params, DeterministicSeed seed)", "modifiers": "public static", "return": "Wallet", "signature": "Wallet fromSeed(NetworkParameters params, DeterministicSeed seed)", "full_signature": "public static Wallet fromSeed(NetworkParameters params, DeterministicSeed seed)", "class_method_signature": "Wallet.fromSeed(NetworkParameters params, DeterministicSeed seed)", "testcase": false, "constructor": false}, {"identifier": "fromSeed", "parameters": "(NetworkParameters params, DeterministicSeed seed, ImmutableList<ChildNumber> accountPath)", "modifiers": "public static", "return": "Wallet", "signature": "Wallet fromSeed(NetworkParameters params, DeterministicSeed seed, ImmutableList<ChildNumber> accountPath)", "full_signature": "public static Wallet fromSeed(NetworkParameters params, DeterministicSeed seed, ImmutableList<ChildNumber> accountPath)", "class_method_signature": "Wallet.fromSeed(NetworkParameters params, DeterministicSeed seed, ImmutableList<ChildNumber> accountPath)", "testcase": false, "constructor": false}, {"identifier": "fromWatchingKey", "parameters": "(NetworkParameters params, DeterministicKey watchKey)", "modifiers": "public static", "return": "Wallet", "signature": "Wallet fromWatchingKey(NetworkParameters params, DeterministicKey watchKey)", "full_signature": "public static Wallet fromWatchingKey(NetworkParameters params, DeterministicKey watchKey)", "class_method_signature": "Wallet.fromWatchingKey(NetworkParameters params, DeterministicKey watchKey)", "testcase": false, "constructor": false}, {"identifier": "fromWatchingKeyB58", "parameters": "(NetworkParameters params, String watchKeyB58, long creationTimeSeconds)", "modifiers": "public static", "return": "Wallet", "signature": "Wallet fromWatchingKeyB58(NetworkParameters params, String watchKeyB58, long creationTimeSeconds)", "full_signature": "public static Wallet fromWatchingKeyB58(NetworkParameters params, String watchKeyB58, long creationTimeSeconds)", "class_method_signature": "Wallet.fromWatchingKeyB58(NetworkParameters params, String watchKeyB58, long creationTimeSeconds)", "testcase": false, "constructor": false}, {"identifier": "fromSpendingKey", "parameters": "(NetworkParameters params, DeterministicKey spendKey)", "modifiers": "public static", "return": "Wallet", "signature": "Wallet fromSpendingKey(NetworkParameters params, DeterministicKey spendKey)", "full_signature": "public static Wallet fromSpendingKey(NetworkParameters params, DeterministicKey spendKey)", "class_method_signature": "Wallet.fromSpendingKey(NetworkParameters params, DeterministicKey spendKey)", "testcase": false, "constructor": false}, {"identifier": "fromSpendingKeyB58", "parameters": "(NetworkParameters params, String spendingKeyB58, long creationTimeSeconds)", "modifiers": "public static", "return": "Wallet", "signature": "Wallet fromSpendingKeyB58(NetworkParameters params, String spendingKeyB58, long creationTimeSeconds)", "full_signature": "public static Wallet fromSpendingKeyB58(NetworkParameters params, String spendingKeyB58, long creationTimeSeconds)", "class_method_signature": "Wallet.fromSpendingKeyB58(NetworkParameters params, String spendingKeyB58, long creationTimeSeconds)", "testcase": false, "constructor": false}, {"identifier": "fromMasterKey", "parameters": "(NetworkParameters params, DeterministicKey masterKey, ChildNumber accountNumber)", "modifiers": "public static", "return": "Wallet", "signature": "Wallet fromMasterKey(NetworkParameters params, DeterministicKey masterKey, ChildNumber accountNumber)", "full_signature": "public static Wallet fromMasterKey(NetworkParameters params, DeterministicKey masterKey, ChildNumber accountNumber)", "class_method_signature": "Wallet.fromMasterKey(NetworkParameters params, DeterministicKey masterKey, ChildNumber accountNumber)", "testcase": false, "constructor": false}, {"identifier": "fromKeys", "parameters": "(NetworkParameters params, List<ECKey> keys)", "modifiers": "public static", "return": "Wallet", "signature": "Wallet fromKeys(NetworkParameters params, List<ECKey> keys)", "full_signature": "public static Wallet fromKeys(NetworkParameters params, List<ECKey> keys)", "class_method_signature": "Wallet.fromKeys(NetworkParameters params, List<ECKey> keys)", "testcase": false, "constructor": false}, {"identifier": "Wallet", "parameters": "(NetworkParameters params, KeyChainGroup keyChainGroup)", "modifiers": "public", "return": "", "signature": " Wallet(NetworkParameters params, KeyChainGroup keyChainGroup)", "full_signature": "public  Wallet(NetworkParameters params, KeyChainGroup keyChainGroup)", "class_method_signature": "Wallet.Wallet(NetworkParameters params, KeyChainGroup keyChainGroup)", "testcase": false, "constructor": true}, {"identifier": "Wallet", "parameters": "(Context context, KeyChainGroup keyChainGroup)", "modifiers": "private", "return": "", "signature": " Wallet(Context context, KeyChainGroup keyChainGroup)", "full_signature": "private  Wallet(Context context, KeyChainGroup keyChainGroup)", "class_method_signature": "Wallet.Wallet(Context context, KeyChainGroup keyChainGroup)", "testcase": false, "constructor": true}, {"identifier": "createTransientState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createTransientState()", "full_signature": "private void createTransientState()", "class_method_signature": "Wallet.createTransientState()", "testcase": false, "constructor": false}, {"identifier": "getNetworkParameters", "parameters": "()", "modifiers": "public", "return": "NetworkParameters", "signature": "NetworkParameters getNetworkParameters()", "full_signature": "public NetworkParameters getNetworkParameters()", "class_method_signature": "Wallet.getNetworkParameters()", "testcase": false, "constructor": false}, {"identifier": "getActiveKeyChain", "parameters": "()", "modifiers": "public", "return": "DeterministicKeyChain", "signature": "DeterministicKeyChain getActiveKeyChain()", "full_signature": "public DeterministicKeyChain getActiveKeyChain()", "class_method_signature": "Wallet.getActiveKeyChain()", "testcase": false, "constructor": false}, {"identifier": "addTransactionSigner", "parameters": "(TransactionSigner signer)", "modifiers": "public final", "return": "void", "signature": "void addTransactionSigner(TransactionSigner signer)", "full_signature": "public final void addTransactionSigner(TransactionSigner signer)", "class_method_signature": "Wallet.addTransactionSigner(TransactionSigner signer)", "testcase": false, "constructor": false}, {"identifier": "getTransactionSigners", "parameters": "()", "modifiers": "public", "return": "List<TransactionSigner>", "signature": "List<TransactionSigner> getTransactionSigners()", "full_signature": "public List<TransactionSigner> getTransactionSigners()", "class_method_signature": "Wallet.getTransactionSigners()", "testcase": false, "constructor": false}, {"identifier": "currentKey", "parameters": "(KeyChain.KeyPurpose purpose)", "modifiers": "public", "return": "DeterministicKey", "signature": "DeterministicKey currentKey(KeyChain.KeyPurpose purpose)", "full_signature": "public DeterministicKey currentKey(KeyChain.KeyPurpose purpose)", "class_method_signature": "Wallet.currentKey(KeyChain.KeyPurpose purpose)", "testcase": false, "constructor": false}, {"identifier": "currentReceiveKey", "parameters": "()", "modifiers": "public", "return": "DeterministicKey", "signature": "DeterministicKey currentReceiveKey()", "full_signature": "public DeterministicKey currentReceiveKey()", "class_method_signature": "Wallet.currentReceiveKey()", "testcase": false, "constructor": false}, {"identifier": "currentAddress", "parameters": "(KeyChain.KeyPurpose purpose)", "modifiers": "public", "return": "Address", "signature": "Address currentAddress(KeyChain.KeyPurpose purpose)", "full_signature": "public Address currentAddress(KeyChain.KeyPurpose purpose)", "class_method_signature": "Wallet.currentAddress(KeyChain.KeyPurpose purpose)", "testcase": false, "constructor": false}, {"identifier": "currentReceiveAddress", "parameters": "()", "modifiers": "public", "return": "Address", "signature": "Address currentReceiveAddress()", "full_signature": "public Address currentReceiveAddress()", "class_method_signature": "Wallet.currentReceiveAddress()", "testcase": false, "constructor": false}, {"identifier": "freshKey", "parameters": "(KeyChain.KeyPurpose purpose)", "modifiers": "public", "return": "DeterministicKey", "signature": "DeterministicKey freshKey(KeyChain.KeyPurpose purpose)", "full_signature": "public DeterministicKey freshKey(KeyChain.KeyPurpose purpose)", "class_method_signature": "Wallet.freshKey(KeyChain.KeyPurpose purpose)", "testcase": false, "constructor": false}, {"identifier": "freshKeys", "parameters": "(KeyChain.KeyPurpose purpose, int numberOfKeys)", "modifiers": "public", "return": "List<DeterministicKey>", "signature": "List<DeterministicKey> freshKeys(KeyChain.KeyPurpose purpose, int numberOfKeys)", "full_signature": "public List<DeterministicKey> freshKeys(KeyChain.KeyPurpose purpose, int numberOfKeys)", "class_method_signature": "Wallet.freshKeys(KeyChain.KeyPurpose purpose, int numberOfKeys)", "testcase": false, "constructor": false}, {"identifier": "freshReceiveKey", "parameters": "()", "modifiers": "public", "return": "DeterministicKey", "signature": "DeterministicKey freshReceiveKey()", "full_signature": "public DeterministicKey freshReceiveKey()", "class_method_signature": "Wallet.freshReceiveKey()", "testcase": false, "constructor": false}, {"identifier": "freshAddress", "parameters": "(KeyChain.KeyPurpose purpose)", "modifiers": "public", "return": "Address", "signature": "Address freshAddress(KeyChain.KeyPurpose purpose)", "full_signature": "public Address freshAddress(KeyChain.KeyPurpose purpose)", "class_method_signature": "Wallet.freshAddress(KeyChain.KeyPurpose purpose)", "testcase": false, "constructor": false}, {"identifier": "freshReceiveAddress", "parameters": "()", "modifiers": "public", "return": "Address", "signature": "Address freshReceiveAddress()", "full_signature": "public Address freshReceiveAddress()", "class_method_signature": "Wallet.freshReceiveAddress()", "testcase": false, "constructor": false}, {"identifier": "getIssuedReceiveKeys", "parameters": "()", "modifiers": "public", "return": "List<ECKey>", "signature": "List<ECKey> getIssuedReceiveKeys()", "full_signature": "public List<ECKey> getIssuedReceiveKeys()", "class_method_signature": "Wallet.getIssuedReceiveKeys()", "testcase": false, "constructor": false}, {"identifier": "getIssuedReceiveAddresses", "parameters": "()", "modifiers": "public", "return": "List<Address>", "signature": "List<Address> getIssuedReceiveAddresses()", "full_signature": "public List<Address> getIssuedReceiveAddresses()", "class_method_signature": "Wallet.getIssuedReceiveAddresses()", "testcase": false, "constructor": false}, {"identifier": "upgradeToDeterministic", "parameters": "(@Nullable KeyParameter aesKey)", "modifiers": "public", "return": "void", "signature": "void upgradeToDeterministic(@Nullable KeyParameter aesKey)", "full_signature": "public void upgradeToDeterministic(@Nullable KeyParameter aesKey)", "class_method_signature": "Wallet.upgradeToDeterministic(@Nullable KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "isDeterministicUpgradeRequired", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDeterministicUpgradeRequired()", "full_signature": "public boolean isDeterministicUpgradeRequired()", "class_method_signature": "Wallet.isDeterministicUpgradeRequired()", "testcase": false, "constructor": false}, {"identifier": "maybeUpgradeToHD", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void maybeUpgradeToHD()", "full_signature": "private void maybeUpgradeToHD()", "class_method_signature": "Wallet.maybeUpgradeToHD()", "testcase": false, "constructor": false}, {"identifier": "maybeUpgradeToHD", "parameters": "(@Nullable KeyParameter aesKey)", "modifiers": "@GuardedBy(\"keyChainGroupLock\") private", "return": "void", "signature": "void maybeUpgradeToHD(@Nullable KeyParameter aesKey)", "full_signature": "@GuardedBy(\"keyChainGroupLock\") private void maybeUpgradeToHD(@Nullable KeyParameter aesKey)", "class_method_signature": "Wallet.maybeUpgradeToHD(@Nullable KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "getWatchedScripts", "parameters": "()", "modifiers": "public", "return": "List<Script>", "signature": "List<Script> getWatchedScripts()", "full_signature": "public List<Script> getWatchedScripts()", "class_method_signature": "Wallet.getWatchedScripts()", "testcase": false, "constructor": false}, {"identifier": "removeKey", "parameters": "(ECKey key)", "modifiers": "public", "return": "boolean", "signature": "boolean removeKey(ECKey key)", "full_signature": "public boolean removeKey(ECKey key)", "class_method_signature": "Wallet.removeKey(ECKey key)", "testcase": false, "constructor": false}, {"identifier": "getKeyChainGroupSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getKeyChainGroupSize()", "full_signature": "public int getKeyChainGroupSize()", "class_method_signature": "Wallet.getKeyChainGroupSize()", "testcase": false, "constructor": false}, {"identifier": "getKeyChainGroupCombinedKeyLookaheadEpochs", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "int", "signature": "int getKeyChainGroupCombinedKeyLookaheadEpochs()", "full_signature": "@VisibleForTesting public int getKeyChainGroupCombinedKeyLookaheadEpochs()", "class_method_signature": "Wallet.getKeyChainGroupCombinedKeyLookaheadEpochs()", "testcase": false, "constructor": false}, {"identifier": "getImportedKeys", "parameters": "()", "modifiers": "public", "return": "List<ECKey>", "signature": "List<ECKey> getImportedKeys()", "full_signature": "public List<ECKey> getImportedKeys()", "class_method_signature": "Wallet.getImportedKeys()", "testcase": false, "constructor": false}, {"identifier": "currentChangeAddress", "parameters": "()", "modifiers": "public", "return": "Address", "signature": "Address currentChangeAddress()", "full_signature": "public Address currentChangeAddress()", "class_method_signature": "Wallet.currentChangeAddress()", "testcase": false, "constructor": false}, {"identifier": "importKey", "parameters": "(ECKey key)", "modifiers": "public", "return": "boolean", "signature": "boolean importKey(ECKey key)", "full_signature": "public boolean importKey(ECKey key)", "class_method_signature": "Wallet.importKey(ECKey key)", "testcase": false, "constructor": false}, {"identifier": "importKeys", "parameters": "(final List<ECKey> keys)", "modifiers": "public", "return": "int", "signature": "int importKeys(final List<ECKey> keys)", "full_signature": "public int importKeys(final List<ECKey> keys)", "class_method_signature": "Wallet.importKeys(final List<ECKey> keys)", "testcase": false, "constructor": false}, {"identifier": "checkNoDeterministicKeys", "parameters": "(List<ECKey> keys)", "modifiers": "private", "return": "void", "signature": "void checkNoDeterministicKeys(List<ECKey> keys)", "full_signature": "private void checkNoDeterministicKeys(List<ECKey> keys)", "class_method_signature": "Wallet.checkNoDeterministicKeys(List<ECKey> keys)", "testcase": false, "constructor": false}, {"identifier": "importKeysAndEncrypt", "parameters": "(final List<ECKey> keys, CharSequence password)", "modifiers": "public", "return": "int", "signature": "int importKeysAndEncrypt(final List<ECKey> keys, CharSequence password)", "full_signature": "public int importKeysAndEncrypt(final List<ECKey> keys, CharSequence password)", "class_method_signature": "Wallet.importKeysAndEncrypt(final List<ECKey> keys, CharSequence password)", "testcase": false, "constructor": false}, {"identifier": "importKeysAndEncrypt", "parameters": "(final List<ECKey> keys, KeyParameter aesKey)", "modifiers": "public", "return": "int", "signature": "int importKeysAndEncrypt(final List<ECKey> keys, KeyParameter aesKey)", "full_signature": "public int importKeysAndEncrypt(final List<ECKey> keys, KeyParameter aesKey)", "class_method_signature": "Wallet.importKeysAndEncrypt(final List<ECKey> keys, KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "addAndActivateHDChain", "parameters": "(DeterministicKeyChain chain)", "modifiers": "public", "return": "void", "signature": "void addAndActivateHDChain(DeterministicKeyChain chain)", "full_signature": "public void addAndActivateHDChain(DeterministicKeyChain chain)", "class_method_signature": "Wallet.addAndActivateHDChain(DeterministicKeyChain chain)", "testcase": false, "constructor": false}, {"identifier": "setKeyChainGroupLookaheadSize", "parameters": "(int lookaheadSize)", "modifiers": "public", "return": "void", "signature": "void setKeyChainGroupLookaheadSize(int lookaheadSize)", "full_signature": "public void setKeyChainGroupLookaheadSize(int lookaheadSize)", "class_method_signature": "Wallet.setKeyChainGroupLookaheadSize(int lookaheadSize)", "testcase": false, "constructor": false}, {"identifier": "getKeyChainGroupLookaheadSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getKeyChainGroupLookaheadSize()", "full_signature": "public int getKeyChainGroupLookaheadSize()", "class_method_signature": "Wallet.getKeyChainGroupLookaheadSize()", "testcase": false, "constructor": false}, {"identifier": "setKeyChainGroupLookaheadThreshold", "parameters": "(int num)", "modifiers": "public", "return": "void", "signature": "void setKeyChainGroupLookaheadThreshold(int num)", "full_signature": "public void setKeyChainGroupLookaheadThreshold(int num)", "class_method_signature": "Wallet.setKeyChainGroupLookaheadThreshold(int num)", "testcase": false, "constructor": false}, {"identifier": "getKeyChainGroupLookaheadThreshold", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getKeyChainGroupLookaheadThreshold()", "full_signature": "public int getKeyChainGroupLookaheadThreshold()", "class_method_signature": "Wallet.getKeyChainGroupLookaheadThreshold()", "testcase": false, "constructor": false}, {"identifier": "getWatchingKey", "parameters": "()", "modifiers": "public", "return": "DeterministicKey", "signature": "DeterministicKey getWatchingKey()", "full_signature": "public DeterministicKey getWatchingKey()", "class_method_signature": "Wallet.getWatchingKey()", "testcase": false, "constructor": false}, {"identifier": "isWatching", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWatching()", "full_signature": "public boolean isWatching()", "class_method_signature": "Wallet.isWatching()", "testcase": false, "constructor": false}, {"identifier": "isAddressWatched", "parameters": "(Address address)", "modifiers": "public", "return": "boolean", "signature": "boolean isAddressWatched(Address address)", "full_signature": "public boolean isAddressWatched(Address address)", "class_method_signature": "Wallet.isAddressWatched(Address address)", "testcase": false, "constructor": false}, {"identifier": "addWatchedAddress", "parameters": "(final Address address)", "modifiers": "public", "return": "boolean", "signature": "boolean addWatchedAddress(final Address address)", "full_signature": "public boolean addWatchedAddress(final Address address)", "class_method_signature": "Wallet.addWatchedAddress(final Address address)", "testcase": false, "constructor": false}, {"identifier": "addWatchedAddress", "parameters": "(final Address address, long creationTime)", "modifiers": "public", "return": "boolean", "signature": "boolean addWatchedAddress(final Address address, long creationTime)", "full_signature": "public boolean addWatchedAddress(final Address address, long creationTime)", "class_method_signature": "Wallet.addWatchedAddress(final Address address, long creationTime)", "testcase": false, "constructor": false}, {"identifier": "addWatchedAddresses", "parameters": "(final List<Address> addresses, long creationTime)", "modifiers": "public", "return": "int", "signature": "int addWatchedAddresses(final List<Address> addresses, long creationTime)", "full_signature": "public int addWatchedAddresses(final List<Address> addresses, long creationTime)", "class_method_signature": "Wallet.addWatchedAddresses(final List<Address> addresses, long creationTime)", "testcase": false, "constructor": false}, {"identifier": "addWatchedScripts", "parameters": "(final List<Script> scripts)", "modifiers": "public", "return": "int", "signature": "int addWatchedScripts(final List<Script> scripts)", "full_signature": "public int addWatchedScripts(final List<Script> scripts)", "class_method_signature": "Wallet.addWatchedScripts(final List<Script> scripts)", "testcase": false, "constructor": false}, {"identifier": "removeWatchedAddress", "parameters": "(final Address address)", "modifiers": "public", "return": "boolean", "signature": "boolean removeWatchedAddress(final Address address)", "full_signature": "public boolean removeWatchedAddress(final Address address)", "class_method_signature": "Wallet.removeWatchedAddress(final Address address)", "testcase": false, "constructor": false}, {"identifier": "removeWatchedAddresses", "parameters": "(final List<Address> addresses)", "modifiers": "public", "return": "boolean", "signature": "boolean removeWatchedAddresses(final List<Address> addresses)", "full_signature": "public boolean removeWatchedAddresses(final List<Address> addresses)", "class_method_signature": "Wallet.removeWatchedAddresses(final List<Address> addresses)", "testcase": false, "constructor": false}, {"identifier": "removeWatchedScripts", "parameters": "(final List<Script> scripts)", "modifiers": "public", "return": "boolean", "signature": "boolean removeWatchedScripts(final List<Script> scripts)", "full_signature": "public boolean removeWatchedScripts(final List<Script> scripts)", "class_method_signature": "Wallet.removeWatchedScripts(final List<Script> scripts)", "testcase": false, "constructor": false}, {"identifier": "getWatchedAddresses", "parameters": "()", "modifiers": "public", "return": "List<Address>", "signature": "List<Address> getWatchedAddresses()", "full_signature": "public List<Address> getWatchedAddresses()", "class_method_signature": "Wallet.getWatchedAddresses()", "testcase": false, "constructor": false}, {"identifier": "findKeyFromPubHash", "parameters": "(byte[] pubkeyHash)", "modifiers": "@Override @Nullable public", "return": "ECKey", "signature": "ECKey findKeyFromPubHash(byte[] pubkeyHash)", "full_signature": "@Override @Nullable public ECKey findKeyFromPubHash(byte[] pubkeyHash)", "class_method_signature": "Wallet.findKeyFromPubHash(byte[] pubkeyHash)", "testcase": false, "constructor": false}, {"identifier": "hasKey", "parameters": "(ECKey key)", "modifiers": "public", "return": "boolean", "signature": "boolean hasKey(ECKey key)", "full_signature": "public boolean hasKey(ECKey key)", "class_method_signature": "Wallet.hasKey(ECKey key)", "testcase": false, "constructor": false}, {"identifier": "isPubKeyHashMine", "parameters": "(byte[] pubkeyHash)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPubKeyHashMine(byte[] pubkeyHash)", "full_signature": "@Override public boolean isPubKeyHashMine(byte[] pubkeyHash)", "class_method_signature": "Wallet.isPubKeyHashMine(byte[] pubkeyHash)", "testcase": false, "constructor": false}, {"identifier": "isWatchedScript", "parameters": "(Script script)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWatchedScript(Script script)", "full_signature": "@Override public boolean isWatchedScript(Script script)", "class_method_signature": "Wallet.isWatchedScript(Script script)", "testcase": false, "constructor": false}, {"identifier": "findKeyFromPubKey", "parameters": "(byte[] pubkey)", "modifiers": "@Override @Nullable public", "return": "ECKey", "signature": "ECKey findKeyFromPubKey(byte[] pubkey)", "full_signature": "@Override @Nullable public ECKey findKeyFromPubKey(byte[] pubkey)", "class_method_signature": "Wallet.findKeyFromPubKey(byte[] pubkey)", "testcase": false, "constructor": false}, {"identifier": "isPubKeyMine", "parameters": "(byte[] pubkey)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPubKeyMine(byte[] pubkey)", "full_signature": "@Override public boolean isPubKeyMine(byte[] pubkey)", "class_method_signature": "Wallet.isPubKeyMine(byte[] pubkey)", "testcase": false, "constructor": false}, {"identifier": "findRedeemDataFromScriptHash", "parameters": "(byte[] payToScriptHash)", "modifiers": "@Nullable @Override public", "return": "RedeemData", "signature": "RedeemData findRedeemDataFromScriptHash(byte[] payToScriptHash)", "full_signature": "@Nullable @Override public RedeemData findRedeemDataFromScriptHash(byte[] payToScriptHash)", "class_method_signature": "Wallet.findRedeemDataFromScriptHash(byte[] payToScriptHash)", "testcase": false, "constructor": false}, {"identifier": "isPayToScriptHashMine", "parameters": "(byte[] payToScriptHash)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPayToScriptHashMine(byte[] payToScriptHash)", "full_signature": "@Override public boolean isPayToScriptHashMine(byte[] payToScriptHash)", "class_method_signature": "Wallet.isPayToScriptHashMine(byte[] payToScriptHash)", "testcase": false, "constructor": false}, {"identifier": "markKeysAsUsed", "parameters": "(Transaction tx)", "modifiers": "private", "return": "void", "signature": "void markKeysAsUsed(Transaction tx)", "full_signature": "private void markKeysAsUsed(Transaction tx)", "class_method_signature": "Wallet.markKeysAsUsed(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "getKeyChainSeed", "parameters": "()", "modifiers": "public", "return": "DeterministicSeed", "signature": "DeterministicSeed getKeyChainSeed()", "full_signature": "public DeterministicSeed getKeyChainSeed()", "class_method_signature": "Wallet.getKeyChainSeed()", "testcase": false, "constructor": false}, {"identifier": "getKeyByPath", "parameters": "(List<ChildNumber> path)", "modifiers": "public", "return": "DeterministicKey", "signature": "DeterministicKey getKeyByPath(List<ChildNumber> path)", "full_signature": "public DeterministicKey getKeyByPath(List<ChildNumber> path)", "class_method_signature": "Wallet.getKeyByPath(List<ChildNumber> path)", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(CharSequence password)", "modifiers": "public", "return": "void", "signature": "void encrypt(CharSequence password)", "full_signature": "public void encrypt(CharSequence password)", "class_method_signature": "Wallet.encrypt(CharSequence password)", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(KeyCrypter keyCrypter, KeyParameter aesKey)", "modifiers": "public", "return": "void", "signature": "void encrypt(KeyCrypter keyCrypter, KeyParameter aesKey)", "full_signature": "public void encrypt(KeyCrypter keyCrypter, KeyParameter aesKey)", "class_method_signature": "Wallet.encrypt(KeyCrypter keyCrypter, KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(CharSequence password)", "modifiers": "public", "return": "void", "signature": "void decrypt(CharSequence password)", "full_signature": "public void decrypt(CharSequence password)", "class_method_signature": "Wallet.decrypt(CharSequence password)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(KeyParameter aesKey)", "modifiers": "public", "return": "void", "signature": "void decrypt(KeyParameter aesKey)", "full_signature": "public void decrypt(KeyParameter aesKey)", "class_method_signature": "Wallet.decrypt(KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "checkPassword", "parameters": "(CharSequence password)", "modifiers": "public", "return": "boolean", "signature": "boolean checkPassword(CharSequence password)", "full_signature": "public boolean checkPassword(CharSequence password)", "class_method_signature": "Wallet.checkPassword(CharSequence password)", "testcase": false, "constructor": false}, {"identifier": "checkAESKey", "parameters": "(KeyParameter aesKey)", "modifiers": "public", "return": "boolean", "signature": "boolean checkAESKey(KeyParameter aesKey)", "full_signature": "public boolean checkAESKey(KeyParameter aesKey)", "class_method_signature": "Wallet.checkAESKey(KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "getKeyCrypter", "parameters": "()", "modifiers": "@Nullable public", "return": "KeyCrypter", "signature": "KeyCrypter getKeyCrypter()", "full_signature": "@Nullable public KeyCrypter getKeyCrypter()", "class_method_signature": "Wallet.getKeyCrypter()", "testcase": false, "constructor": false}, {"identifier": "getEncryptionType", "parameters": "()", "modifiers": "public", "return": "EncryptionType", "signature": "EncryptionType getEncryptionType()", "full_signature": "public EncryptionType getEncryptionType()", "class_method_signature": "Wallet.getEncryptionType()", "testcase": false, "constructor": false}, {"identifier": "isEncrypted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEncrypted()", "full_signature": "public boolean isEncrypted()", "class_method_signature": "Wallet.isEncrypted()", "testcase": false, "constructor": false}, {"identifier": "changeEncryptionPassword", "parameters": "(CharSequence currentPassword, CharSequence newPassword)", "modifiers": "public", "return": "void", "signature": "void changeEncryptionPassword(CharSequence currentPassword, CharSequence newPassword)", "full_signature": "public void changeEncryptionPassword(CharSequence currentPassword, CharSequence newPassword)", "class_method_signature": "Wallet.changeEncryptionPassword(CharSequence currentPassword, CharSequence newPassword)", "testcase": false, "constructor": false}, {"identifier": "changeEncryptionKey", "parameters": "(KeyCrypter keyCrypter, KeyParameter currentAesKey, KeyParameter newAesKey)", "modifiers": "public", "return": "void", "signature": "void changeEncryptionKey(KeyCrypter keyCrypter, KeyParameter currentAesKey, KeyParameter newAesKey)", "full_signature": "public void changeEncryptionKey(KeyCrypter keyCrypter, KeyParameter currentAesKey, KeyParameter newAesKey)", "class_method_signature": "Wallet.changeEncryptionKey(KeyCrypter keyCrypter, KeyParameter currentAesKey, KeyParameter newAesKey)", "testcase": false, "constructor": false}, {"identifier": "serializeKeyChainGroupToProtobuf", "parameters": "()", "modifiers": "public", "return": "List<Protos.Key>", "signature": "List<Protos.Key> serializeKeyChainGroupToProtobuf()", "full_signature": "public List<Protos.Key> serializeKeyChainGroupToProtobuf()", "class_method_signature": "Wallet.serializeKeyChainGroupToProtobuf()", "testcase": false, "constructor": false}, {"identifier": "saveToFile", "parameters": "(File temp, File destFile)", "modifiers": "public", "return": "void", "signature": "void saveToFile(File temp, File destFile)", "full_signature": "public void saveToFile(File temp, File destFile)", "class_method_signature": "Wallet.saveToFile(File temp, File destFile)", "testcase": false, "constructor": false}, {"identifier": "saveToFile", "parameters": "(File f)", "modifiers": "public", "return": "void", "signature": "void saveToFile(File f)", "full_signature": "public void saveToFile(File f)", "class_method_signature": "Wallet.saveToFile(File f)", "testcase": false, "constructor": false}, {"identifier": "setAcceptRiskyTransactions", "parameters": "(boolean acceptRiskyTransactions)", "modifiers": "public", "return": "void", "signature": "void setAcceptRiskyTransactions(boolean acceptRiskyTransactions)", "full_signature": "public void setAcceptRiskyTransactions(boolean acceptRiskyTransactions)", "class_method_signature": "Wallet.setAcceptRiskyTransactions(boolean acceptRiskyTransactions)", "testcase": false, "constructor": false}, {"identifier": "isAcceptRiskyTransactions", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAcceptRiskyTransactions()", "full_signature": "public boolean isAcceptRiskyTransactions()", "class_method_signature": "Wallet.isAcceptRiskyTransactions()", "testcase": false, "constructor": false}, {"identifier": "setRiskAnalyzer", "parameters": "(RiskAnalysis.Analyzer analyzer)", "modifiers": "public", "return": "void", "signature": "void setRiskAnalyzer(RiskAnalysis.Analyzer analyzer)", "full_signature": "public void setRiskAnalyzer(RiskAnalysis.Analyzer analyzer)", "class_method_signature": "Wallet.setRiskAnalyzer(RiskAnalysis.Analyzer analyzer)", "testcase": false, "constructor": false}, {"identifier": "getRiskAnalyzer", "parameters": "()", "modifiers": "public", "return": "RiskAnalysis.Analyzer", "signature": "RiskAnalysis.Analyzer getRiskAnalyzer()", "full_signature": "public RiskAnalysis.Analyzer getRiskAnalyzer()", "class_method_signature": "Wallet.getRiskAnalyzer()", "testcase": false, "constructor": false}, {"identifier": "autosaveToFile", "parameters": "(File f, long delayTime, TimeUnit timeUnit,\n                                      @Nullable WalletFiles.Listener eventListener)", "modifiers": "public", "return": "WalletFiles", "signature": "WalletFiles autosaveToFile(File f, long delayTime, TimeUnit timeUnit,\n                                      @Nullable WalletFiles.Listener eventListener)", "full_signature": "public WalletFiles autosaveToFile(File f, long delayTime, TimeUnit timeUnit,\n                                      @Nullable WalletFiles.Listener eventListener)", "class_method_signature": "Wallet.autosaveToFile(File f, long delayTime, TimeUnit timeUnit,\n                                      @Nullable WalletFiles.Listener eventListener)", "testcase": false, "constructor": false}, {"identifier": "shutdownAutosaveAndWait", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdownAutosaveAndWait()", "full_signature": "public void shutdownAutosaveAndWait()", "class_method_signature": "Wallet.shutdownAutosaveAndWait()", "testcase": false, "constructor": false}, {"identifier": "saveLater", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void saveLater()", "full_signature": "protected void saveLater()", "class_method_signature": "Wallet.saveLater()", "testcase": false, "constructor": false}, {"identifier": "saveNow", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void saveNow()", "full_signature": "protected void saveNow()", "class_method_signature": "Wallet.saveNow()", "testcase": false, "constructor": false}, {"identifier": "saveToFileStream", "parameters": "(OutputStream f)", "modifiers": "public", "return": "void", "signature": "void saveToFileStream(OutputStream f)", "full_signature": "public void saveToFileStream(OutputStream f)", "class_method_signature": "Wallet.saveToFileStream(OutputStream f)", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "()", "modifiers": "public", "return": "NetworkParameters", "signature": "NetworkParameters getParams()", "full_signature": "public NetworkParameters getParams()", "class_method_signature": "Wallet.getParams()", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "public", "return": "Context", "signature": "Context getContext()", "full_signature": "public Context getContext()", "class_method_signature": "Wallet.getContext()", "testcase": false, "constructor": false}, {"identifier": "loadFromFile", "parameters": "(File file, @Nullable WalletExtension... walletExtensions)", "modifiers": "public static", "return": "Wallet", "signature": "Wallet loadFromFile(File file, @Nullable WalletExtension... walletExtensions)", "full_signature": "public static Wallet loadFromFile(File file, @Nullable WalletExtension... walletExtensions)", "class_method_signature": "Wallet.loadFromFile(File file, @Nullable WalletExtension... walletExtensions)", "testcase": false, "constructor": false}, {"identifier": "isConsistent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConsistent()", "full_signature": "public boolean isConsistent()", "class_method_signature": "Wallet.isConsistent()", "testcase": false, "constructor": false}, {"identifier": "isConsistentOrThrow", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void isConsistentOrThrow()", "full_signature": "public void isConsistentOrThrow()", "class_method_signature": "Wallet.isConsistentOrThrow()", "testcase": false, "constructor": false}, {"identifier": "isTxConsistent", "parameters": "(final Transaction tx, final boolean isSpent)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean isTxConsistent(final Transaction tx, final boolean isSpent)", "full_signature": "@VisibleForTesting boolean isTxConsistent(final Transaction tx, final boolean isSpent)", "class_method_signature": "Wallet.isTxConsistent(final Transaction tx, final boolean isSpent)", "testcase": false, "constructor": false}, {"identifier": "loadFromFileStream", "parameters": "(InputStream stream, @Nullable WalletExtension... walletExtensions)", "modifiers": "public static", "return": "Wallet", "signature": "Wallet loadFromFileStream(InputStream stream, @Nullable WalletExtension... walletExtensions)", "full_signature": "public static Wallet loadFromFileStream(InputStream stream, @Nullable WalletExtension... walletExtensions)", "class_method_signature": "Wallet.loadFromFileStream(InputStream stream, @Nullable WalletExtension... walletExtensions)", "testcase": false, "constructor": false}, {"identifier": "notifyTransactionIsInBlock", "parameters": "(Sha256Hash txHash, StoredBlock block,\n                                              BlockChain.NewBlockType blockType,\n                                              int relativityOffset)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean notifyTransactionIsInBlock(Sha256Hash txHash, StoredBlock block,\n                                              BlockChain.NewBlockType blockType,\n                                              int relativityOffset)", "full_signature": "@Override public boolean notifyTransactionIsInBlock(Sha256Hash txHash, StoredBlock block,\n                                              BlockChain.NewBlockType blockType,\n                                              int relativityOffset)", "class_method_signature": "Wallet.notifyTransactionIsInBlock(Sha256Hash txHash, StoredBlock block,\n                                              BlockChain.NewBlockType blockType,\n                                              int relativityOffset)", "testcase": false, "constructor": false}, {"identifier": "receivePending", "parameters": "(Transaction tx, @Nullable List<Transaction> dependencies, boolean overrideIsRelevant)", "modifiers": "public", "return": "void", "signature": "void receivePending(Transaction tx, @Nullable List<Transaction> dependencies, boolean overrideIsRelevant)", "full_signature": "public void receivePending(Transaction tx, @Nullable List<Transaction> dependencies, boolean overrideIsRelevant)", "class_method_signature": "Wallet.receivePending(Transaction tx, @Nullable List<Transaction> dependencies, boolean overrideIsRelevant)", "testcase": false, "constructor": false}, {"identifier": "isTransactionRisky", "parameters": "(Transaction tx, @Nullable List<Transaction> dependencies)", "modifiers": "public", "return": "boolean", "signature": "boolean isTransactionRisky(Transaction tx, @Nullable List<Transaction> dependencies)", "full_signature": "public boolean isTransactionRisky(Transaction tx, @Nullable List<Transaction> dependencies)", "class_method_signature": "Wallet.isTransactionRisky(Transaction tx, @Nullable List<Transaction> dependencies)", "testcase": false, "constructor": false}, {"identifier": "receivePending", "parameters": "(Transaction tx, @Nullable List<Transaction> dependencies)", "modifiers": "public", "return": "void", "signature": "void receivePending(Transaction tx, @Nullable List<Transaction> dependencies)", "full_signature": "public void receivePending(Transaction tx, @Nullable List<Transaction> dependencies)", "class_method_signature": "Wallet.receivePending(Transaction tx, @Nullable List<Transaction> dependencies)", "testcase": false, "constructor": false}, {"identifier": "isPendingTransactionRelevant", "parameters": "(Transaction tx)", "modifiers": "public", "return": "boolean", "signature": "boolean isPendingTransactionRelevant(Transaction tx)", "full_signature": "public boolean isPendingTransactionRelevant(Transaction tx)", "class_method_signature": "Wallet.isPendingTransactionRelevant(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "isTransactionRelevant", "parameters": "(Transaction tx)", "modifiers": "public", "return": "boolean", "signature": "boolean isTransactionRelevant(Transaction tx)", "full_signature": "public boolean isTransactionRelevant(Transaction tx)", "class_method_signature": "Wallet.isTransactionRelevant(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "findDoubleSpendsAgainst", "parameters": "(Transaction tx, Map<Sha256Hash, Transaction> candidates)", "modifiers": "private", "return": "Set<Transaction>", "signature": "Set<Transaction> findDoubleSpendsAgainst(Transaction tx, Map<Sha256Hash, Transaction> candidates)", "full_signature": "private Set<Transaction> findDoubleSpendsAgainst(Transaction tx, Map<Sha256Hash, Transaction> candidates)", "class_method_signature": "Wallet.findDoubleSpendsAgainst(Transaction tx, Map<Sha256Hash, Transaction> candidates)", "testcase": false, "constructor": false}, {"identifier": "addTransactionsDependingOn", "parameters": "(Set<Transaction> txSet, Set<Transaction> txPool)", "modifiers": "", "return": "void", "signature": "void addTransactionsDependingOn(Set<Transaction> txSet, Set<Transaction> txPool)", "full_signature": " void addTransactionsDependingOn(Set<Transaction> txSet, Set<Transaction> txPool)", "class_method_signature": "Wallet.addTransactionsDependingOn(Set<Transaction> txSet, Set<Transaction> txPool)", "testcase": false, "constructor": false}, {"identifier": "receiveFromBlock", "parameters": "(Transaction tx, StoredBlock block,\n                                 BlockChain.NewBlockType blockType,\n                                 int relativityOffset)", "modifiers": "@Override public", "return": "void", "signature": "void receiveFromBlock(Transaction tx, StoredBlock block,\n                                 BlockChain.NewBlockType blockType,\n                                 int relativityOffset)", "full_signature": "@Override public void receiveFromBlock(Transaction tx, StoredBlock block,\n                                 BlockChain.NewBlockType blockType,\n                                 int relativityOffset)", "class_method_signature": "Wallet.receiveFromBlock(Transaction tx, StoredBlock block,\n                                 BlockChain.NewBlockType blockType,\n                                 int relativityOffset)", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(Transaction tx, StoredBlock block, BlockChain.NewBlockType blockType,\n                         int relativityOffset)", "modifiers": "private", "return": "void", "signature": "void receive(Transaction tx, StoredBlock block, BlockChain.NewBlockType blockType,\n                         int relativityOffset)", "full_signature": "private void receive(Transaction tx, StoredBlock block, BlockChain.NewBlockType blockType,\n                         int relativityOffset)", "class_method_signature": "Wallet.receive(Transaction tx, StoredBlock block, BlockChain.NewBlockType blockType,\n                         int relativityOffset)", "testcase": false, "constructor": false}, {"identifier": "isNotSpendingTxnsInConfidenceType", "parameters": "(Transaction tx, ConfidenceType confidenceType)", "modifiers": "private", "return": "boolean", "signature": "boolean isNotSpendingTxnsInConfidenceType(Transaction tx, ConfidenceType confidenceType)", "full_signature": "private boolean isNotSpendingTxnsInConfidenceType(Transaction tx, ConfidenceType confidenceType)", "class_method_signature": "Wallet.isNotSpendingTxnsInConfidenceType(Transaction tx, ConfidenceType confidenceType)", "testcase": false, "constructor": false}, {"identifier": "sortTxnsByDependency", "parameters": "(Set<Transaction> inputSet)", "modifiers": "", "return": "List<Transaction>", "signature": "List<Transaction> sortTxnsByDependency(Set<Transaction> inputSet)", "full_signature": " List<Transaction> sortTxnsByDependency(Set<Transaction> inputSet)", "class_method_signature": "Wallet.sortTxnsByDependency(Set<Transaction> inputSet)", "testcase": false, "constructor": false}, {"identifier": "spends", "parameters": "(Transaction txA, Transaction txB)", "modifiers": "", "return": "boolean", "signature": "boolean spends(Transaction txA, Transaction txB)", "full_signature": " boolean spends(Transaction txA, Transaction txB)", "class_method_signature": "Wallet.spends(Transaction txA, Transaction txB)", "testcase": false, "constructor": false}, {"identifier": "informConfidenceListenersIfNotReorganizing", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void informConfidenceListenersIfNotReorganizing()", "full_signature": "private void informConfidenceListenersIfNotReorganizing()", "class_method_signature": "Wallet.informConfidenceListenersIfNotReorganizing()", "testcase": false, "constructor": false}, {"identifier": "notifyNewBestBlock", "parameters": "(StoredBlock block)", "modifiers": "@Override public", "return": "void", "signature": "void notifyNewBestBlock(StoredBlock block)", "full_signature": "@Override public void notifyNewBestBlock(StoredBlock block)", "class_method_signature": "Wallet.notifyNewBestBlock(StoredBlock block)", "testcase": false, "constructor": false}, {"identifier": "processTxFromBestChain", "parameters": "(Transaction tx, boolean forceAddToPool)", "modifiers": "private", "return": "void", "signature": "void processTxFromBestChain(Transaction tx, boolean forceAddToPool)", "full_signature": "private void processTxFromBestChain(Transaction tx, boolean forceAddToPool)", "class_method_signature": "Wallet.processTxFromBestChain(Transaction tx, boolean forceAddToPool)", "testcase": false, "constructor": false}, {"identifier": "updateForSpends", "parameters": "(Transaction tx, boolean fromChain)", "modifiers": "private", "return": "void", "signature": "void updateForSpends(Transaction tx, boolean fromChain)", "full_signature": "private void updateForSpends(Transaction tx, boolean fromChain)", "class_method_signature": "Wallet.updateForSpends(Transaction tx, boolean fromChain)", "testcase": false, "constructor": false}, {"identifier": "killTxns", "parameters": "(Set<Transaction> txnsToKill, @Nullable Transaction overridingTx)", "modifiers": "private", "return": "void", "signature": "void killTxns(Set<Transaction> txnsToKill, @Nullable Transaction overridingTx)", "full_signature": "private void killTxns(Set<Transaction> txnsToKill, @Nullable Transaction overridingTx)", "class_method_signature": "Wallet.killTxns(Set<Transaction> txnsToKill, @Nullable Transaction overridingTx)", "testcase": false, "constructor": false}, {"identifier": "maybeMovePool", "parameters": "(Transaction tx, String context)", "modifiers": "private", "return": "void", "signature": "void maybeMovePool(Transaction tx, String context)", "full_signature": "private void maybeMovePool(Transaction tx, String context)", "class_method_signature": "Wallet.maybeMovePool(Transaction tx, String context)", "testcase": false, "constructor": false}, {"identifier": "maybeCommitTx", "parameters": "(Transaction tx)", "modifiers": "public", "return": "boolean", "signature": "boolean maybeCommitTx(Transaction tx)", "full_signature": "public boolean maybeCommitTx(Transaction tx)", "class_method_signature": "Wallet.maybeCommitTx(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "commitTx", "parameters": "(Transaction tx)", "modifiers": "public", "return": "void", "signature": "void commitTx(Transaction tx)", "full_signature": "public void commitTx(Transaction tx)", "class_method_signature": "Wallet.commitTx(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "addChangeEventListener", "parameters": "(WalletChangeEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addChangeEventListener(WalletChangeEventListener listener)", "full_signature": "public void addChangeEventListener(WalletChangeEventListener listener)", "class_method_signature": "Wallet.addChangeEventListener(WalletChangeEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addChangeEventListener", "parameters": "(Executor executor, WalletChangeEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addChangeEventListener(Executor executor, WalletChangeEventListener listener)", "full_signature": "public void addChangeEventListener(Executor executor, WalletChangeEventListener listener)", "class_method_signature": "Wallet.addChangeEventListener(Executor executor, WalletChangeEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addCoinsReceivedEventListener", "parameters": "(WalletCoinsReceivedEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addCoinsReceivedEventListener(WalletCoinsReceivedEventListener listener)", "full_signature": "public void addCoinsReceivedEventListener(WalletCoinsReceivedEventListener listener)", "class_method_signature": "Wallet.addCoinsReceivedEventListener(WalletCoinsReceivedEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addCoinsReceivedEventListener", "parameters": "(Executor executor, WalletCoinsReceivedEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addCoinsReceivedEventListener(Executor executor, WalletCoinsReceivedEventListener listener)", "full_signature": "public void addCoinsReceivedEventListener(Executor executor, WalletCoinsReceivedEventListener listener)", "class_method_signature": "Wallet.addCoinsReceivedEventListener(Executor executor, WalletCoinsReceivedEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addCoinsSentEventListener", "parameters": "(WalletCoinsSentEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addCoinsSentEventListener(WalletCoinsSentEventListener listener)", "full_signature": "public void addCoinsSentEventListener(WalletCoinsSentEventListener listener)", "class_method_signature": "Wallet.addCoinsSentEventListener(WalletCoinsSentEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addCoinsSentEventListener", "parameters": "(Executor executor, WalletCoinsSentEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addCoinsSentEventListener(Executor executor, WalletCoinsSentEventListener listener)", "full_signature": "public void addCoinsSentEventListener(Executor executor, WalletCoinsSentEventListener listener)", "class_method_signature": "Wallet.addCoinsSentEventListener(Executor executor, WalletCoinsSentEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addKeyChainEventListener", "parameters": "(KeyChainEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addKeyChainEventListener(KeyChainEventListener listener)", "full_signature": "public void addKeyChainEventListener(KeyChainEventListener listener)", "class_method_signature": "Wallet.addKeyChainEventListener(KeyChainEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addKeyChainEventListener", "parameters": "(Executor executor, KeyChainEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addKeyChainEventListener(Executor executor, KeyChainEventListener listener)", "full_signature": "public void addKeyChainEventListener(Executor executor, KeyChainEventListener listener)", "class_method_signature": "Wallet.addKeyChainEventListener(Executor executor, KeyChainEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addReorganizeEventListener", "parameters": "(WalletReorganizeEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addReorganizeEventListener(WalletReorganizeEventListener listener)", "full_signature": "public void addReorganizeEventListener(WalletReorganizeEventListener listener)", "class_method_signature": "Wallet.addReorganizeEventListener(WalletReorganizeEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addReorganizeEventListener", "parameters": "(Executor executor, WalletReorganizeEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addReorganizeEventListener(Executor executor, WalletReorganizeEventListener listener)", "full_signature": "public void addReorganizeEventListener(Executor executor, WalletReorganizeEventListener listener)", "class_method_signature": "Wallet.addReorganizeEventListener(Executor executor, WalletReorganizeEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addScriptsChangeEventListener", "parameters": "(ScriptsChangeEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addScriptsChangeEventListener(ScriptsChangeEventListener listener)", "full_signature": "public void addScriptsChangeEventListener(ScriptsChangeEventListener listener)", "class_method_signature": "Wallet.addScriptsChangeEventListener(ScriptsChangeEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addScriptChangeEventListener", "parameters": "(Executor executor, ScriptsChangeEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addScriptChangeEventListener(Executor executor, ScriptsChangeEventListener listener)", "full_signature": "public void addScriptChangeEventListener(Executor executor, ScriptsChangeEventListener listener)", "class_method_signature": "Wallet.addScriptChangeEventListener(Executor executor, ScriptsChangeEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addTransactionConfidenceEventListener", "parameters": "(TransactionConfidenceEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addTransactionConfidenceEventListener(TransactionConfidenceEventListener listener)", "full_signature": "public void addTransactionConfidenceEventListener(TransactionConfidenceEventListener listener)", "class_method_signature": "Wallet.addTransactionConfidenceEventListener(TransactionConfidenceEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addTransactionConfidenceEventListener", "parameters": "(Executor executor, TransactionConfidenceEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addTransactionConfidenceEventListener(Executor executor, TransactionConfidenceEventListener listener)", "full_signature": "public void addTransactionConfidenceEventListener(Executor executor, TransactionConfidenceEventListener listener)", "class_method_signature": "Wallet.addTransactionConfidenceEventListener(Executor executor, TransactionConfidenceEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeChangeEventListener", "parameters": "(WalletChangeEventListener listener)", "modifiers": "public", "return": "boolean", "signature": "boolean removeChangeEventListener(WalletChangeEventListener listener)", "full_signature": "public boolean removeChangeEventListener(WalletChangeEventListener listener)", "class_method_signature": "Wallet.removeChangeEventListener(WalletChangeEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeCoinsReceivedEventListener", "parameters": "(WalletCoinsReceivedEventListener listener)", "modifiers": "public", "return": "boolean", "signature": "boolean removeCoinsReceivedEventListener(WalletCoinsReceivedEventListener listener)", "full_signature": "public boolean removeCoinsReceivedEventListener(WalletCoinsReceivedEventListener listener)", "class_method_signature": "Wallet.removeCoinsReceivedEventListener(WalletCoinsReceivedEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeCoinsSentEventListener", "parameters": "(WalletCoinsSentEventListener listener)", "modifiers": "public", "return": "boolean", "signature": "boolean removeCoinsSentEventListener(WalletCoinsSentEventListener listener)", "full_signature": "public boolean removeCoinsSentEventListener(WalletCoinsSentEventListener listener)", "class_method_signature": "Wallet.removeCoinsSentEventListener(WalletCoinsSentEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeKeyChainEventListener", "parameters": "(KeyChainEventListener listener)", "modifiers": "public", "return": "boolean", "signature": "boolean removeKeyChainEventListener(KeyChainEventListener listener)", "full_signature": "public boolean removeKeyChainEventListener(KeyChainEventListener listener)", "class_method_signature": "Wallet.removeKeyChainEventListener(KeyChainEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeReorganizeEventListener", "parameters": "(WalletReorganizeEventListener listener)", "modifiers": "public", "return": "boolean", "signature": "boolean removeReorganizeEventListener(WalletReorganizeEventListener listener)", "full_signature": "public boolean removeReorganizeEventListener(WalletReorganizeEventListener listener)", "class_method_signature": "Wallet.removeReorganizeEventListener(WalletReorganizeEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeScriptChangeEventListener", "parameters": "(ScriptsChangeEventListener listener)", "modifiers": "public", "return": "boolean", "signature": "boolean removeScriptChangeEventListener(ScriptsChangeEventListener listener)", "full_signature": "public boolean removeScriptChangeEventListener(ScriptsChangeEventListener listener)", "class_method_signature": "Wallet.removeScriptChangeEventListener(ScriptsChangeEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeTransactionConfidenceEventListener", "parameters": "(TransactionConfidenceEventListener listener)", "modifiers": "public", "return": "boolean", "signature": "boolean removeTransactionConfidenceEventListener(TransactionConfidenceEventListener listener)", "full_signature": "public boolean removeTransactionConfidenceEventListener(TransactionConfidenceEventListener listener)", "class_method_signature": "Wallet.removeTransactionConfidenceEventListener(TransactionConfidenceEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "queueOnTransactionConfidenceChanged", "parameters": "(final Transaction tx)", "modifiers": "private", "return": "void", "signature": "void queueOnTransactionConfidenceChanged(final Transaction tx)", "full_signature": "private void queueOnTransactionConfidenceChanged(final Transaction tx)", "class_method_signature": "Wallet.queueOnTransactionConfidenceChanged(final Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "maybeQueueOnWalletChanged", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void maybeQueueOnWalletChanged()", "full_signature": "protected void maybeQueueOnWalletChanged()", "class_method_signature": "Wallet.maybeQueueOnWalletChanged()", "testcase": false, "constructor": false}, {"identifier": "queueOnCoinsReceived", "parameters": "(final Transaction tx, final Coin balance, final Coin newBalance)", "modifiers": "protected", "return": "void", "signature": "void queueOnCoinsReceived(final Transaction tx, final Coin balance, final Coin newBalance)", "full_signature": "protected void queueOnCoinsReceived(final Transaction tx, final Coin balance, final Coin newBalance)", "class_method_signature": "Wallet.queueOnCoinsReceived(final Transaction tx, final Coin balance, final Coin newBalance)", "testcase": false, "constructor": false}, {"identifier": "queueOnCoinsSent", "parameters": "(final Transaction tx, final Coin prevBalance, final Coin newBalance)", "modifiers": "protected", "return": "void", "signature": "void queueOnCoinsSent(final Transaction tx, final Coin prevBalance, final Coin newBalance)", "full_signature": "protected void queueOnCoinsSent(final Transaction tx, final Coin prevBalance, final Coin newBalance)", "class_method_signature": "Wallet.queueOnCoinsSent(final Transaction tx, final Coin prevBalance, final Coin newBalance)", "testcase": false, "constructor": false}, {"identifier": "queueOnReorganize", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void queueOnReorganize()", "full_signature": "protected void queueOnReorganize()", "class_method_signature": "Wallet.queueOnReorganize()", "testcase": false, "constructor": false}, {"identifier": "queueOnScriptsChanged", "parameters": "(final List<Script> scripts, final boolean isAddingScripts)", "modifiers": "protected", "return": "void", "signature": "void queueOnScriptsChanged(final List<Script> scripts, final boolean isAddingScripts)", "full_signature": "protected void queueOnScriptsChanged(final List<Script> scripts, final boolean isAddingScripts)", "class_method_signature": "Wallet.queueOnScriptsChanged(final List<Script> scripts, final boolean isAddingScripts)", "testcase": false, "constructor": false}, {"identifier": "getTransactions", "parameters": "(boolean includeDead)", "modifiers": "public", "return": "Set<Transaction>", "signature": "Set<Transaction> getTransactions(boolean includeDead)", "full_signature": "public Set<Transaction> getTransactions(boolean includeDead)", "class_method_signature": "Wallet.getTransactions(boolean includeDead)", "testcase": false, "constructor": false}, {"identifier": "getWalletTransactions", "parameters": "()", "modifiers": "public", "return": "Iterable<WalletTransaction>", "signature": "Iterable<WalletTransaction> getWalletTransactions()", "full_signature": "public Iterable<WalletTransaction> getWalletTransactions()", "class_method_signature": "Wallet.getWalletTransactions()", "testcase": false, "constructor": false}, {"identifier": "addWalletTransactionsToSet", "parameters": "(Set<WalletTransaction> txns,\n                                                   Pool poolType, Collection<Transaction> pool)", "modifiers": "private static", "return": "void", "signature": "void addWalletTransactionsToSet(Set<WalletTransaction> txns,\n                                                   Pool poolType, Collection<Transaction> pool)", "full_signature": "private static void addWalletTransactionsToSet(Set<WalletTransaction> txns,\n                                                   Pool poolType, Collection<Transaction> pool)", "class_method_signature": "Wallet.addWalletTransactionsToSet(Set<WalletTransaction> txns,\n                                                   Pool poolType, Collection<Transaction> pool)", "testcase": false, "constructor": false}, {"identifier": "addWalletTransaction", "parameters": "(WalletTransaction wtx)", "modifiers": "public", "return": "void", "signature": "void addWalletTransaction(WalletTransaction wtx)", "full_signature": "public void addWalletTransaction(WalletTransaction wtx)", "class_method_signature": "Wallet.addWalletTransaction(WalletTransaction wtx)", "testcase": false, "constructor": false}, {"identifier": "addWalletTransaction", "parameters": "(Pool pool, Transaction tx)", "modifiers": "private", "return": "void", "signature": "void addWalletTransaction(Pool pool, Transaction tx)", "full_signature": "private void addWalletTransaction(Pool pool, Transaction tx)", "class_method_signature": "Wallet.addWalletTransaction(Pool pool, Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "getTransactionsByTime", "parameters": "()", "modifiers": "public", "return": "List<Transaction>", "signature": "List<Transaction> getTransactionsByTime()", "full_signature": "public List<Transaction> getTransactionsByTime()", "class_method_signature": "Wallet.getTransactionsByTime()", "testcase": false, "constructor": false}, {"identifier": "getRecentTransactions", "parameters": "(int numTransactions, boolean includeDead)", "modifiers": "public", "return": "List<Transaction>", "signature": "List<Transaction> getRecentTransactions(int numTransactions, boolean includeDead)", "full_signature": "public List<Transaction> getRecentTransactions(int numTransactions, boolean includeDead)", "class_method_signature": "Wallet.getRecentTransactions(int numTransactions, boolean includeDead)", "testcase": false, "constructor": false}, {"identifier": "getTransaction", "parameters": "(Sha256Hash hash)", "modifiers": "@Nullable public", "return": "Transaction", "signature": "Transaction getTransaction(Sha256Hash hash)", "full_signature": "@Nullable public Transaction getTransaction(Sha256Hash hash)", "class_method_signature": "Wallet.getTransaction(Sha256Hash hash)", "testcase": false, "constructor": false}, {"identifier": "getTransactionPool", "parameters": "(Pool pool)", "modifiers": "@Override public", "return": "Map<Sha256Hash, Transaction>", "signature": "Map<Sha256Hash, Transaction> getTransactionPool(Pool pool)", "full_signature": "@Override public Map<Sha256Hash, Transaction> getTransactionPool(Pool pool)", "class_method_signature": "Wallet.getTransactionPool(Pool pool)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "Wallet.reset()", "testcase": false, "constructor": false}, {"identifier": "clearTransactions", "parameters": "(int fromHeight)", "modifiers": "public", "return": "void", "signature": "void clearTransactions(int fromHeight)", "full_signature": "public void clearTransactions(int fromHeight)", "class_method_signature": "Wallet.clearTransactions(int fromHeight)", "testcase": false, "constructor": false}, {"identifier": "clearTransactions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clearTransactions()", "full_signature": "private void clearTransactions()", "class_method_signature": "Wallet.clearTransactions()", "testcase": false, "constructor": false}, {"identifier": "getWatchedOutputs", "parameters": "(boolean excludeImmatureCoinbases)", "modifiers": "public", "return": "List<TransactionOutput>", "signature": "List<TransactionOutput> getWatchedOutputs(boolean excludeImmatureCoinbases)", "full_signature": "public List<TransactionOutput> getWatchedOutputs(boolean excludeImmatureCoinbases)", "class_method_signature": "Wallet.getWatchedOutputs(boolean excludeImmatureCoinbases)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cleanup()", "full_signature": "public void cleanup()", "class_method_signature": "Wallet.cleanup()", "testcase": false, "constructor": false}, {"identifier": "getContainingPools", "parameters": "(Transaction tx)", "modifiers": "", "return": "EnumSet<Pool>", "signature": "EnumSet<Pool> getContainingPools(Transaction tx)", "full_signature": " EnumSet<Pool> getContainingPools(Transaction tx)", "class_method_signature": "Wallet.getContainingPools(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "getPoolSize", "parameters": "(WalletTransaction.Pool pool)", "modifiers": "@VisibleForTesting public", "return": "int", "signature": "int getPoolSize(WalletTransaction.Pool pool)", "full_signature": "@VisibleForTesting public int getPoolSize(WalletTransaction.Pool pool)", "class_method_signature": "Wallet.getPoolSize(WalletTransaction.Pool pool)", "testcase": false, "constructor": false}, {"identifier": "poolContainsTxHash", "parameters": "(final WalletTransaction.Pool pool, final Sha256Hash txHash)", "modifiers": "@VisibleForTesting public", "return": "boolean", "signature": "boolean poolContainsTxHash(final WalletTransaction.Pool pool, final Sha256Hash txHash)", "full_signature": "@VisibleForTesting public boolean poolContainsTxHash(final WalletTransaction.Pool pool, final Sha256Hash txHash)", "class_method_signature": "Wallet.poolContainsTxHash(final WalletTransaction.Pool pool, final Sha256Hash txHash)", "testcase": false, "constructor": false}, {"identifier": "getUnspents", "parameters": "()", "modifiers": "public", "return": "List<TransactionOutput>", "signature": "List<TransactionOutput> getUnspents()", "full_signature": "public List<TransactionOutput> getUnspents()", "class_method_signature": "Wallet.getUnspents()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Wallet.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(boolean includePrivateKeys, boolean includeTransactions, boolean includeExtensions,\n            @Nullable AbstractBlockChain chain)", "modifiers": "@Deprecated public", "return": "String", "signature": "String toString(boolean includePrivateKeys, boolean includeTransactions, boolean includeExtensions,\n            @Nullable AbstractBlockChain chain)", "full_signature": "@Deprecated public String toString(boolean includePrivateKeys, boolean includeTransactions, boolean includeExtensions,\n            @Nullable AbstractBlockChain chain)", "class_method_signature": "Wallet.toString(boolean includePrivateKeys, boolean includeTransactions, boolean includeExtensions,\n            @Nullable AbstractBlockChain chain)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(boolean includePrivateKeys, @Nullable KeyParameter aesKey, boolean includeTransactions,\n                           boolean includeExtensions, @Nullable AbstractBlockChain chain)", "modifiers": "public", "return": "String", "signature": "String toString(boolean includePrivateKeys, @Nullable KeyParameter aesKey, boolean includeTransactions,\n                           boolean includeExtensions, @Nullable AbstractBlockChain chain)", "full_signature": "public String toString(boolean includePrivateKeys, @Nullable KeyParameter aesKey, boolean includeTransactions,\n                           boolean includeExtensions, @Nullable AbstractBlockChain chain)", "class_method_signature": "Wallet.toString(boolean includePrivateKeys, @Nullable KeyParameter aesKey, boolean includeTransactions,\n                           boolean includeExtensions, @Nullable AbstractBlockChain chain)", "testcase": false, "constructor": false}, {"identifier": "toStringHelper", "parameters": "(StringBuilder builder, Map<Sha256Hash, Transaction> transactionMap,\n                                @Nullable AbstractBlockChain chain, @Nullable Comparator<Transaction> sortOrder)", "modifiers": "private", "return": "void", "signature": "void toStringHelper(StringBuilder builder, Map<Sha256Hash, Transaction> transactionMap,\n                                @Nullable AbstractBlockChain chain, @Nullable Comparator<Transaction> sortOrder)", "full_signature": "private void toStringHelper(StringBuilder builder, Map<Sha256Hash, Transaction> transactionMap,\n                                @Nullable AbstractBlockChain chain, @Nullable Comparator<Transaction> sortOrder)", "class_method_signature": "Wallet.toStringHelper(StringBuilder builder, Map<Sha256Hash, Transaction> transactionMap,\n                                @Nullable AbstractBlockChain chain, @Nullable Comparator<Transaction> sortOrder)", "testcase": false, "constructor": false}, {"identifier": "getPendingTransactions", "parameters": "()", "modifiers": "public", "return": "Collection<Transaction>", "signature": "Collection<Transaction> getPendingTransactions()", "full_signature": "public Collection<Transaction> getPendingTransactions()", "class_method_signature": "Wallet.getPendingTransactions()", "testcase": false, "constructor": false}, {"identifier": "getEarliestKeyCreationTime", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getEarliestKeyCreationTime()", "full_signature": "@Override public long getEarliestKeyCreationTime()", "class_method_signature": "Wallet.getEarliestKeyCreationTime()", "testcase": false, "constructor": false}, {"identifier": "getLastBlockSeenHash", "parameters": "()", "modifiers": "@Nullable public", "return": "Sha256Hash", "signature": "Sha256Hash getLastBlockSeenHash()", "full_signature": "@Nullable public Sha256Hash getLastBlockSeenHash()", "class_method_signature": "Wallet.getLastBlockSeenHash()", "testcase": false, "constructor": false}, {"identifier": "setLastBlockSeenHash", "parameters": "(@Nullable Sha256Hash lastBlockSeenHash)", "modifiers": "public", "return": "void", "signature": "void setLastBlockSeenHash(@Nullable Sha256Hash lastBlockSeenHash)", "full_signature": "public void setLastBlockSeenHash(@Nullable Sha256Hash lastBlockSeenHash)", "class_method_signature": "Wallet.setLastBlockSeenHash(@Nullable Sha256Hash lastBlockSeenHash)", "testcase": false, "constructor": false}, {"identifier": "setLastBlockSeenHeight", "parameters": "(int lastBlockSeenHeight)", "modifiers": "public", "return": "void", "signature": "void setLastBlockSeenHeight(int lastBlockSeenHeight)", "full_signature": "public void setLastBlockSeenHeight(int lastBlockSeenHeight)", "class_method_signature": "Wallet.setLastBlockSeenHeight(int lastBlockSeenHeight)", "testcase": false, "constructor": false}, {"identifier": "setLastBlockSeenTimeSecs", "parameters": "(long timeSecs)", "modifiers": "public", "return": "void", "signature": "void setLastBlockSeenTimeSecs(long timeSecs)", "full_signature": "public void setLastBlockSeenTimeSecs(long timeSecs)", "class_method_signature": "Wallet.setLastBlockSeenTimeSecs(long timeSecs)", "testcase": false, "constructor": false}, {"identifier": "getLastBlockSeenTimeSecs", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLastBlockSeenTimeSecs()", "full_signature": "public long getLastBlockSeenTimeSecs()", "class_method_signature": "Wallet.getLastBlockSeenTimeSecs()", "testcase": false, "constructor": false}, {"identifier": "getLastBlockSeenTime", "parameters": "()", "modifiers": "@Nullable public", "return": "Date", "signature": "Date getLastBlockSeenTime()", "full_signature": "@Nullable public Date getLastBlockSeenTime()", "class_method_signature": "Wallet.getLastBlockSeenTime()", "testcase": false, "constructor": false}, {"identifier": "getLastBlockSeenHeight", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLastBlockSeenHeight()", "full_signature": "public int getLastBlockSeenHeight()", "class_method_signature": "Wallet.getLastBlockSeenHeight()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getVersion()", "full_signature": "public int getVersion()", "class_method_signature": "Wallet.getVersion()", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "(int version)", "modifiers": "public", "return": "void", "signature": "void setVersion(int version)", "full_signature": "public void setVersion(int version)", "class_method_signature": "Wallet.setVersion(int version)", "testcase": false, "constructor": false}, {"identifier": "setDescription", "parameters": "(String description)", "modifiers": "public", "return": "void", "signature": "void setDescription(String description)", "full_signature": "public void setDescription(String description)", "class_method_signature": "Wallet.setDescription(String description)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDescription()", "full_signature": "public String getDescription()", "class_method_signature": "Wallet.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "()", "modifiers": "public", "return": "Coin", "signature": "Coin getBalance()", "full_signature": "public Coin getBalance()", "class_method_signature": "Wallet.getBalance()", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "(BalanceType balanceType)", "modifiers": "public", "return": "Coin", "signature": "Coin getBalance(BalanceType balanceType)", "full_signature": "public Coin getBalance(BalanceType balanceType)", "class_method_signature": "Wallet.getBalance(BalanceType balanceType)", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "(CoinSelector selector)", "modifiers": "public", "return": "Coin", "signature": "Coin getBalance(CoinSelector selector)", "full_signature": "public Coin getBalance(CoinSelector selector)", "class_method_signature": "Wallet.getBalance(CoinSelector selector)", "testcase": false, "constructor": false}, {"identifier": "getBalanceFuture", "parameters": "(final Coin value, final BalanceType type)", "modifiers": "public", "return": "ListenableFuture<Coin>", "signature": "ListenableFuture<Coin> getBalanceFuture(final Coin value, final BalanceType type)", "full_signature": "public ListenableFuture<Coin> getBalanceFuture(final Coin value, final BalanceType type)", "class_method_signature": "Wallet.getBalanceFuture(final Coin value, final BalanceType type)", "testcase": false, "constructor": false}, {"identifier": "checkBalanceFuturesLocked", "parameters": "(@Nullable Coin avail)", "modifiers": "@SuppressWarnings(\"FieldAccessNotGuarded\") private", "return": "void", "signature": "void checkBalanceFuturesLocked(@Nullable Coin avail)", "full_signature": "@SuppressWarnings(\"FieldAccessNotGuarded\") private void checkBalanceFuturesLocked(@Nullable Coin avail)", "class_method_signature": "Wallet.checkBalanceFuturesLocked(@Nullable Coin avail)", "testcase": false, "constructor": false}, {"identifier": "getTotalReceived", "parameters": "()", "modifiers": "public", "return": "Coin", "signature": "Coin getTotalReceived()", "full_signature": "public Coin getTotalReceived()", "class_method_signature": "Wallet.getTotalReceived()", "testcase": false, "constructor": false}, {"identifier": "getTotalSent", "parameters": "()", "modifiers": "public", "return": "Coin", "signature": "Coin getTotalSent()", "full_signature": "public Coin getTotalSent()", "class_method_signature": "Wallet.getTotalSent()", "testcase": false, "constructor": false}, {"identifier": "createSend", "parameters": "(Address address, Coin value)", "modifiers": "public", "return": "Transaction", "signature": "Transaction createSend(Address address, Coin value)", "full_signature": "public Transaction createSend(Address address, Coin value)", "class_method_signature": "Wallet.createSend(Address address, Coin value)", "testcase": false, "constructor": false}, {"identifier": "sendCoinsOffline", "parameters": "(SendRequest request)", "modifiers": "public", "return": "Transaction", "signature": "Transaction sendCoinsOffline(SendRequest request)", "full_signature": "public Transaction sendCoinsOffline(SendRequest request)", "class_method_signature": "Wallet.sendCoinsOffline(SendRequest request)", "testcase": false, "constructor": false}, {"identifier": "sendCoins", "parameters": "(TransactionBroadcaster broadcaster, Address to, Coin value)", "modifiers": "public", "return": "SendResult", "signature": "SendResult sendCoins(TransactionBroadcaster broadcaster, Address to, Coin value)", "full_signature": "public SendResult sendCoins(TransactionBroadcaster broadcaster, Address to, Coin value)", "class_method_signature": "Wallet.sendCoins(TransactionBroadcaster broadcaster, Address to, Coin value)", "testcase": false, "constructor": false}, {"identifier": "sendCoins", "parameters": "(TransactionBroadcaster broadcaster, SendRequest request)", "modifiers": "public", "return": "SendResult", "signature": "SendResult sendCoins(TransactionBroadcaster broadcaster, SendRequest request)", "full_signature": "public SendResult sendCoins(TransactionBroadcaster broadcaster, SendRequest request)", "class_method_signature": "Wallet.sendCoins(TransactionBroadcaster broadcaster, SendRequest request)", "testcase": false, "constructor": false}, {"identifier": "sendCoins", "parameters": "(SendRequest request)", "modifiers": "public", "return": "SendResult", "signature": "SendResult sendCoins(SendRequest request)", "full_signature": "public SendResult sendCoins(SendRequest request)", "class_method_signature": "Wallet.sendCoins(SendRequest request)", "testcase": false, "constructor": false}, {"identifier": "sendCoins", "parameters": "(Peer peer, SendRequest request)", "modifiers": "public", "return": "Transaction", "signature": "Transaction sendCoins(Peer peer, SendRequest request)", "full_signature": "public Transaction sendCoins(Peer peer, SendRequest request)", "class_method_signature": "Wallet.sendCoins(Peer peer, SendRequest request)", "testcase": false, "constructor": false}, {"identifier": "completeTx", "parameters": "(SendRequest req)", "modifiers": "public", "return": "void", "signature": "void completeTx(SendRequest req)", "full_signature": "public void completeTx(SendRequest req)", "class_method_signature": "Wallet.completeTx(SendRequest req)", "testcase": false, "constructor": false}, {"identifier": "signTransaction", "parameters": "(SendRequest req)", "modifiers": "public", "return": "void", "signature": "void signTransaction(SendRequest req)", "full_signature": "public void signTransaction(SendRequest req)", "class_method_signature": "Wallet.signTransaction(SendRequest req)", "testcase": false, "constructor": false}, {"identifier": "adjustOutputDownwardsForFee", "parameters": "(Transaction tx, CoinSelection coinSelection, Coin feePerKb,\n            boolean ensureMinRequiredFee)", "modifiers": "private", "return": "boolean", "signature": "boolean adjustOutputDownwardsForFee(Transaction tx, CoinSelection coinSelection, Coin feePerKb,\n            boolean ensureMinRequiredFee)", "full_signature": "private boolean adjustOutputDownwardsForFee(Transaction tx, CoinSelection coinSelection, Coin feePerKb,\n            boolean ensureMinRequiredFee)", "class_method_signature": "Wallet.adjustOutputDownwardsForFee(Transaction tx, CoinSelection coinSelection, Coin feePerKb,\n            boolean ensureMinRequiredFee)", "testcase": false, "constructor": false}, {"identifier": "calculateAllSpendCandidates", "parameters": "()", "modifiers": "public", "return": "List<TransactionOutput>", "signature": "List<TransactionOutput> calculateAllSpendCandidates()", "full_signature": "public List<TransactionOutput> calculateAllSpendCandidates()", "class_method_signature": "Wallet.calculateAllSpendCandidates()", "testcase": false, "constructor": false}, {"identifier": "calculateAllSpendCandidates", "parameters": "(boolean excludeImmatureCoinbases, boolean excludeUnsignable)", "modifiers": "public", "return": "List<TransactionOutput>", "signature": "List<TransactionOutput> calculateAllSpendCandidates(boolean excludeImmatureCoinbases, boolean excludeUnsignable)", "full_signature": "public List<TransactionOutput> calculateAllSpendCandidates(boolean excludeImmatureCoinbases, boolean excludeUnsignable)", "class_method_signature": "Wallet.calculateAllSpendCandidates(boolean excludeImmatureCoinbases, boolean excludeUnsignable)", "testcase": false, "constructor": false}, {"identifier": "canSignFor", "parameters": "(Script script)", "modifiers": "public", "return": "boolean", "signature": "boolean canSignFor(Script script)", "full_signature": "public boolean canSignFor(Script script)", "class_method_signature": "Wallet.canSignFor(Script script)", "testcase": false, "constructor": false}, {"identifier": "calculateAllSpendCandidatesFromUTXOProvider", "parameters": "(boolean excludeImmatureCoinbases)", "modifiers": "protected", "return": "LinkedList<TransactionOutput>", "signature": "LinkedList<TransactionOutput> calculateAllSpendCandidatesFromUTXOProvider(boolean excludeImmatureCoinbases)", "full_signature": "protected LinkedList<TransactionOutput> calculateAllSpendCandidatesFromUTXOProvider(boolean excludeImmatureCoinbases)", "class_method_signature": "Wallet.calculateAllSpendCandidatesFromUTXOProvider(boolean excludeImmatureCoinbases)", "testcase": false, "constructor": false}, {"identifier": "getStoredOutputsFromUTXOProvider", "parameters": "()", "modifiers": "protected", "return": "List<UTXO>", "signature": "List<UTXO> getStoredOutputsFromUTXOProvider()", "full_signature": "protected List<UTXO> getStoredOutputsFromUTXOProvider()", "class_method_signature": "Wallet.getStoredOutputsFromUTXOProvider()", "testcase": false, "constructor": false}, {"identifier": "getCoinSelector", "parameters": "()", "modifiers": "public", "return": "CoinSelector", "signature": "CoinSelector getCoinSelector()", "full_signature": "public CoinSelector getCoinSelector()", "class_method_signature": "Wallet.getCoinSelector()", "testcase": false, "constructor": false}, {"identifier": "setCoinSelector", "parameters": "(CoinSelector coinSelector)", "modifiers": "public", "return": "void", "signature": "void setCoinSelector(CoinSelector coinSelector)", "full_signature": "public void setCoinSelector(CoinSelector coinSelector)", "class_method_signature": "Wallet.setCoinSelector(CoinSelector coinSelector)", "testcase": false, "constructor": false}, {"identifier": "allowSpendingUnconfirmedTransactions", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void allowSpendingUnconfirmedTransactions()", "full_signature": "public void allowSpendingUnconfirmedTransactions()", "class_method_signature": "Wallet.allowSpendingUnconfirmedTransactions()", "testcase": false, "constructor": false}, {"identifier": "getUTXOProvider", "parameters": "()", "modifiers": "@Nullable public", "return": "UTXOProvider", "signature": "UTXOProvider getUTXOProvider()", "full_signature": "@Nullable public UTXOProvider getUTXOProvider()", "class_method_signature": "Wallet.getUTXOProvider()", "testcase": false, "constructor": false}, {"identifier": "setUTXOProvider", "parameters": "(@Nullable UTXOProvider provider)", "modifiers": "public", "return": "void", "signature": "void setUTXOProvider(@Nullable UTXOProvider provider)", "full_signature": "public void setUTXOProvider(@Nullable UTXOProvider provider)", "class_method_signature": "Wallet.setUTXOProvider(@Nullable UTXOProvider provider)", "testcase": false, "constructor": false}, {"identifier": "reorganize", "parameters": "(StoredBlock splitPoint, List<StoredBlock> oldBlocks, List<StoredBlock> newBlocks)", "modifiers": "@Override public", "return": "void", "signature": "void reorganize(StoredBlock splitPoint, List<StoredBlock> oldBlocks, List<StoredBlock> newBlocks)", "full_signature": "@Override public void reorganize(StoredBlock splitPoint, List<StoredBlock> oldBlocks, List<StoredBlock> newBlocks)", "class_method_signature": "Wallet.reorganize(StoredBlock splitPoint, List<StoredBlock> oldBlocks, List<StoredBlock> newBlocks)", "testcase": false, "constructor": false}, {"identifier": "subtractDepth", "parameters": "(int depthToSubtract, Collection<Transaction> transactions)", "modifiers": "private", "return": "void", "signature": "void subtractDepth(int depthToSubtract, Collection<Transaction> transactions)", "full_signature": "private void subtractDepth(int depthToSubtract, Collection<Transaction> transactions)", "class_method_signature": "Wallet.subtractDepth(int depthToSubtract, Collection<Transaction> transactions)", "testcase": false, "constructor": false}, {"identifier": "beginBloomFilterCalculation", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void beginBloomFilterCalculation()", "full_signature": "@Override public void beginBloomFilterCalculation()", "class_method_signature": "Wallet.beginBloomFilterCalculation()", "testcase": false, "constructor": false}, {"identifier": "calcBloomOutPointsLocked", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void calcBloomOutPointsLocked()", "full_signature": "private void calcBloomOutPointsLocked()", "class_method_signature": "Wallet.calcBloomOutPointsLocked()", "testcase": false, "constructor": false}, {"identifier": "endBloomFilterCalculation", "parameters": "()", "modifiers": "@Override @GuardedBy(\"keyChainGroupLock\") public", "return": "void", "signature": "void endBloomFilterCalculation()", "full_signature": "@Override @GuardedBy(\"keyChainGroupLock\") public void endBloomFilterCalculation()", "class_method_signature": "Wallet.endBloomFilterCalculation()", "testcase": false, "constructor": false}, {"identifier": "getBloomFilterElementCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getBloomFilterElementCount()", "full_signature": "@Override public int getBloomFilterElementCount()", "class_method_signature": "Wallet.getBloomFilterElementCount()", "testcase": false, "constructor": false}, {"identifier": "isRequiringUpdateAllBloomFilter", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRequiringUpdateAllBloomFilter()", "full_signature": "@Override public boolean isRequiringUpdateAllBloomFilter()", "class_method_signature": "Wallet.isRequiringUpdateAllBloomFilter()", "testcase": false, "constructor": false}, {"identifier": "getBloomFilter", "parameters": "(double falsePositiveRate)", "modifiers": "public", "return": "BloomFilter", "signature": "BloomFilter getBloomFilter(double falsePositiveRate)", "full_signature": "public BloomFilter getBloomFilter(double falsePositiveRate)", "class_method_signature": "Wallet.getBloomFilter(double falsePositiveRate)", "testcase": false, "constructor": false}, {"identifier": "getBloomFilter", "parameters": "(int size, double falsePositiveRate, long nTweak)", "modifiers": "@Override @GuardedBy(\"keyChainGroupLock\") public", "return": "BloomFilter", "signature": "BloomFilter getBloomFilter(int size, double falsePositiveRate, long nTweak)", "full_signature": "@Override @GuardedBy(\"keyChainGroupLock\") public BloomFilter getBloomFilter(int size, double falsePositiveRate, long nTweak)", "class_method_signature": "Wallet.getBloomFilter(int size, double falsePositiveRate, long nTweak)", "testcase": false, "constructor": false}, {"identifier": "isTxOutputBloomFilterable", "parameters": "(TransactionOutput out)", "modifiers": "private", "return": "boolean", "signature": "boolean isTxOutputBloomFilterable(TransactionOutput out)", "full_signature": "private boolean isTxOutputBloomFilterable(TransactionOutput out)", "class_method_signature": "Wallet.isTxOutputBloomFilterable(TransactionOutput out)", "testcase": false, "constructor": false}, {"identifier": "checkForFilterExhaustion", "parameters": "(FilteredBlock block)", "modifiers": "public", "return": "boolean", "signature": "boolean checkForFilterExhaustion(FilteredBlock block)", "full_signature": "public boolean checkForFilterExhaustion(FilteredBlock block)", "class_method_signature": "Wallet.checkForFilterExhaustion(FilteredBlock block)", "testcase": false, "constructor": false}, {"identifier": "addExtension", "parameters": "(WalletExtension extension)", "modifiers": "public", "return": "void", "signature": "void addExtension(WalletExtension extension)", "full_signature": "public void addExtension(WalletExtension extension)", "class_method_signature": "Wallet.addExtension(WalletExtension extension)", "testcase": false, "constructor": false}, {"identifier": "addOrGetExistingExtension", "parameters": "(WalletExtension extension)", "modifiers": "public", "return": "WalletExtension", "signature": "WalletExtension addOrGetExistingExtension(WalletExtension extension)", "full_signature": "public WalletExtension addOrGetExistingExtension(WalletExtension extension)", "class_method_signature": "Wallet.addOrGetExistingExtension(WalletExtension extension)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateExtension", "parameters": "(WalletExtension extension)", "modifiers": "public", "return": "void", "signature": "void addOrUpdateExtension(WalletExtension extension)", "full_signature": "public void addOrUpdateExtension(WalletExtension extension)", "class_method_signature": "Wallet.addOrUpdateExtension(WalletExtension extension)", "testcase": false, "constructor": false}, {"identifier": "getExtensions", "parameters": "()", "modifiers": "public", "return": "Map<String, WalletExtension>", "signature": "Map<String, WalletExtension> getExtensions()", "full_signature": "public Map<String, WalletExtension> getExtensions()", "class_method_signature": "Wallet.getExtensions()", "testcase": false, "constructor": false}, {"identifier": "deserializeExtension", "parameters": "(WalletExtension extension, byte[] data)", "modifiers": "public", "return": "void", "signature": "void deserializeExtension(WalletExtension extension, byte[] data)", "full_signature": "public void deserializeExtension(WalletExtension extension, byte[] data)", "class_method_signature": "Wallet.deserializeExtension(WalletExtension extension, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "setTag", "parameters": "(String tag, ByteString value)", "modifiers": "@Override public", "return": "void", "signature": "void setTag(String tag, ByteString value)", "full_signature": "@Override public void setTag(String tag, ByteString value)", "class_method_signature": "Wallet.setTag(String tag, ByteString value)", "testcase": false, "constructor": false}, {"identifier": "calculateFee", "parameters": "(SendRequest req, Coin value, List<TransactionInput> originalInputs,\n                                       boolean needAtLeastReferenceFee, List<TransactionOutput> candidates)", "modifiers": "private", "return": "FeeCalculation", "signature": "FeeCalculation calculateFee(SendRequest req, Coin value, List<TransactionInput> originalInputs,\n                                       boolean needAtLeastReferenceFee, List<TransactionOutput> candidates)", "full_signature": "private FeeCalculation calculateFee(SendRequest req, Coin value, List<TransactionInput> originalInputs,\n                                       boolean needAtLeastReferenceFee, List<TransactionOutput> candidates)", "class_method_signature": "Wallet.calculateFee(SendRequest req, Coin value, List<TransactionInput> originalInputs,\n                                       boolean needAtLeastReferenceFee, List<TransactionOutput> candidates)", "testcase": false, "constructor": false}, {"identifier": "addSuppliedInputs", "parameters": "(Transaction tx, List<TransactionInput> originalInputs)", "modifiers": "private", "return": "void", "signature": "void addSuppliedInputs(Transaction tx, List<TransactionInput> originalInputs)", "full_signature": "private void addSuppliedInputs(Transaction tx, List<TransactionInput> originalInputs)", "class_method_signature": "Wallet.addSuppliedInputs(Transaction tx, List<TransactionInput> originalInputs)", "testcase": false, "constructor": false}, {"identifier": "estimateBytesForSigning", "parameters": "(CoinSelection selection)", "modifiers": "private", "return": "int", "signature": "int estimateBytesForSigning(CoinSelection selection)", "full_signature": "private int estimateBytesForSigning(CoinSelection selection)", "class_method_signature": "Wallet.estimateBytesForSigning(CoinSelection selection)", "testcase": false, "constructor": false}, {"identifier": "setTransactionBroadcaster", "parameters": "(@Nullable org.ulordj.core.TransactionBroadcaster broadcaster)", "modifiers": "public", "return": "void", "signature": "void setTransactionBroadcaster(@Nullable org.ulordj.core.TransactionBroadcaster broadcaster)", "full_signature": "public void setTransactionBroadcaster(@Nullable org.ulordj.core.TransactionBroadcaster broadcaster)", "class_method_signature": "Wallet.setTransactionBroadcaster(@Nullable org.ulordj.core.TransactionBroadcaster broadcaster)", "testcase": false, "constructor": false}, {"identifier": "setKeyRotationTime", "parameters": "(Date time)", "modifiers": "public", "return": "void", "signature": "void setKeyRotationTime(Date time)", "full_signature": "public void setKeyRotationTime(Date time)", "class_method_signature": "Wallet.setKeyRotationTime(Date time)", "testcase": false, "constructor": false}, {"identifier": "getKeyRotationTime", "parameters": "()", "modifiers": "public @Nullable", "return": "Date", "signature": "Date getKeyRotationTime()", "full_signature": "public @Nullable Date getKeyRotationTime()", "class_method_signature": "Wallet.getKeyRotationTime()", "testcase": false, "constructor": false}, {"identifier": "setKeyRotationTime", "parameters": "(long unixTimeSeconds)", "modifiers": "public", "return": "void", "signature": "void setKeyRotationTime(long unixTimeSeconds)", "full_signature": "public void setKeyRotationTime(long unixTimeSeconds)", "class_method_signature": "Wallet.setKeyRotationTime(long unixTimeSeconds)", "testcase": false, "constructor": false}, {"identifier": "isKeyRotating", "parameters": "(ECKey key)", "modifiers": "public", "return": "boolean", "signature": "boolean isKeyRotating(ECKey key)", "full_signature": "public boolean isKeyRotating(ECKey key)", "class_method_signature": "Wallet.isKeyRotating(ECKey key)", "testcase": false, "constructor": false}, {"identifier": "doMaintenance", "parameters": "(@Nullable KeyParameter aesKey, boolean signAndSend)", "modifiers": "public", "return": "ListenableFuture<List<Transaction>>", "signature": "ListenableFuture<List<Transaction>> doMaintenance(@Nullable KeyParameter aesKey, boolean signAndSend)", "full_signature": "public ListenableFuture<List<Transaction>> doMaintenance(@Nullable KeyParameter aesKey, boolean signAndSend)", "class_method_signature": "Wallet.doMaintenance(@Nullable KeyParameter aesKey, boolean signAndSend)", "testcase": false, "constructor": false}, {"identifier": "maybeRotateKeys", "parameters": "(@Nullable KeyParameter aesKey, boolean sign)", "modifiers": "@GuardedBy(\"keyChainGroupLock\") private", "return": "List<Transaction>", "signature": "List<Transaction> maybeRotateKeys(@Nullable KeyParameter aesKey, boolean sign)", "full_signature": "@GuardedBy(\"keyChainGroupLock\") private List<Transaction> maybeRotateKeys(@Nullable KeyParameter aesKey, boolean sign)", "class_method_signature": "Wallet.maybeRotateKeys(@Nullable KeyParameter aesKey, boolean sign)", "testcase": false, "constructor": false}, {"identifier": "rekeyOneBatch", "parameters": "(long timeSecs, @Nullable KeyParameter aesKey, List<Transaction> others, boolean sign)", "modifiers": "@Nullable private", "return": "Transaction", "signature": "Transaction rekeyOneBatch(long timeSecs, @Nullable KeyParameter aesKey, List<Transaction> others, boolean sign)", "full_signature": "@Nullable private Transaction rekeyOneBatch(long timeSecs, @Nullable KeyParameter aesKey, List<Transaction> others, boolean sign)", "class_method_signature": "Wallet.rekeyOneBatch(long timeSecs, @Nullable KeyParameter aesKey, List<Transaction> others, boolean sign)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ulordj/wallet/Wallet.java"}, "focal_method": {"identifier": "isTxConsistent", "parameters": "(final Transaction tx, final boolean isSpent)", "modifiers": "@VisibleForTesting", "return": "boolean", "body": "@VisibleForTesting\n    boolean isTxConsistent(final Transaction tx, final boolean isSpent) {\n        boolean isActuallySpent = true;\n        for (TransactionOutput o : tx.getOutputs()) {\n            if (o.isAvailableForSpending()) {\n                if (o.isMineOrWatched(this)) isActuallySpent = false;\n                if (o.getSpentBy() != null) {\n                    log.error(\"isAvailableForSpending != spentBy\");\n                    return false;\n                }\n            } else {\n                if (o.getSpentBy() == null) {\n                    log.error(\"isAvailableForSpending != spentBy\");\n                    return false;\n                }\n            }\n        }\n        return isActuallySpent == isSpent;\n    }", "signature": "boolean isTxConsistent(final Transaction tx, final boolean isSpent)", "full_signature": "@VisibleForTesting boolean isTxConsistent(final Transaction tx, final boolean isSpent)", "class_method_signature": "Wallet.isTxConsistent(final Transaction tx, final boolean isSpent)", "testcase": false, "constructor": false, "invocations": ["getOutputs", "isAvailableForSpending", "isMineOrWatched", "getSpentBy", "error", "getSpentBy", "error"]}, "repository": {"repo_id": 133357466, "url": "https://github.com/UlordChain/ulordj", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 23, "size": 7129, "license": "licensed"}}