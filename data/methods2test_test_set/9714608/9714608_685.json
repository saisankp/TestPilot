{"test_class": {"identifier": "FacingAlgorithmTest", "superclass": "extends AbstractMathTestCase", "interfaces": "", "fields": [{"original_string": "private AligningKinematicAlgorithm align;", "modifier": "private", "type": "AligningKinematicAlgorithm", "declarator": "align", "var_name": "align"}, {"original_string": "private FacingAlgorithm face;", "modifier": "private", "type": "FacingAlgorithm", "declarator": "face", "var_name": "face"}], "file": "advanced/agentmotion/src/test/java/org/arakhne/afc/agentmotion/common/FacingAlgorithmTest.java"}, "test_case": {"identifier": "calculate_close", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void calculate_close() {\n\t\tassertZero(this.face.calculate(new Point2d(1, 2), new Vector2d(5, 3.1), 3, 4, new Point2d(6, 5)));\n\t}", "signature": "void calculate_close()", "full_signature": "@Test public void calculate_close()", "class_method_signature": "FacingAlgorithmTest.calculate_close()", "testcase": true, "constructor": false, "invocations": ["assertZero", "calculate"]}, "focal_class": {"identifier": "FacingAlgorithm", "superclass": "", "interfaces": "implements FacingMotionAlgorithm, Serializable, Cloneable", "fields": [{"original_string": "private static final long serialVersionUID = -8318025671219960417L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8318025671219960417L", "var_name": "serialVersionUID"}, {"original_string": "protected final AligningMotionAlgorithm aligning;", "modifier": "protected final", "type": "AligningMotionAlgorithm", "declarator": "aligning", "var_name": "aligning"}], "methods": [{"identifier": "FacingAlgorithm", "parameters": "(AligningMotionAlgorithm aligning)", "modifiers": "public", "return": "", "signature": " FacingAlgorithm(AligningMotionAlgorithm aligning)", "full_signature": "public  FacingAlgorithm(AligningMotionAlgorithm aligning)", "class_method_signature": "FacingAlgorithm.FacingAlgorithm(AligningMotionAlgorithm aligning)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Pure @Override public boolean equals(Object obj)", "class_method_signature": "FacingAlgorithm.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Pure @Override public int hashCode()", "class_method_signature": "FacingAlgorithm.hashCode()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Pure @Override public", "return": "FacingAlgorithm", "signature": "FacingAlgorithm clone()", "full_signature": "@Pure @Override public FacingAlgorithm clone()", "class_method_signature": "FacingAlgorithm.clone()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(Point2D<?, ?> position, Vector2D<?, ?> orientation, double angularSpeed, double maxAngular,\n\t\t\tPoint2D<?, ?> target)", "modifiers": "@Override public", "return": "double", "signature": "double calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double angularSpeed, double maxAngular,\n\t\t\tPoint2D<?, ?> target)", "full_signature": "@Override public double calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double angularSpeed, double maxAngular,\n\t\t\tPoint2D<?, ?> target)", "class_method_signature": "FacingAlgorithm.calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double angularSpeed, double maxAngular,\n\t\t\tPoint2D<?, ?> target)", "testcase": false, "constructor": false}], "file": "advanced/agentmotion/src/main/java/org/arakhne/afc/agentmotion/common/FacingAlgorithm.java"}, "focal_method": {"identifier": "calculate", "parameters": "(Point2D<?, ?> position, Vector2D<?, ?> orientation, double angularSpeed, double maxAngular,\n\t\t\tPoint2D<?, ?> target)", "modifiers": "@Override public", "return": "double", "body": "@Override\n\tpublic double calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double angularSpeed, double maxAngular,\n\t\t\tPoint2D<?, ?> target) {\n\t\tfinal Vector2d alignTarget = new Vector2d(\n\t\t\t\ttarget.getX() - position.getX(),\n\t\t\t\ttarget.getY() - position.getY());\n\t\treturn this.aligning.calculate(orientation, angularSpeed, maxAngular, alignTarget);\n\t}", "signature": "double calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double angularSpeed, double maxAngular,\n\t\t\tPoint2D<?, ?> target)", "full_signature": "@Override public double calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double angularSpeed, double maxAngular,\n\t\t\tPoint2D<?, ?> target)", "class_method_signature": "FacingAlgorithm.calculate(Point2D<?, ?> position, Vector2D<?, ?> orientation, double angularSpeed, double maxAngular,\n\t\t\tPoint2D<?, ?> target)", "testcase": false, "constructor": false, "invocations": ["getX", "getX", "getY", "getY", "calculate"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}