{"test_class": {"identifier": "ImmutableReceiverChainResolutionStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IKey keyStorageKey;", "modifier": "private", "type": "IKey", "declarator": "keyStorageKey", "var_name": "keyStorageKey"}, {"original_string": "private IKey fieldNameKey;", "modifier": "private", "type": "IKey", "declarator": "fieldNameKey", "var_name": "fieldNameKey"}, {"original_string": "private IKey iobjectKey;", "modifier": "private", "type": "IKey", "declarator": "iobjectKey", "var_name": "iobjectKey"}, {"original_string": "private IKey receiverIdKey;", "modifier": "private", "type": "IKey", "declarator": "receiverIdKey", "var_name": "receiverIdKey"}, {"original_string": "private IKey chainIdKey;", "modifier": "private", "type": "IKey", "declarator": "chainIdKey", "var_name": "chainIdKey"}, {"original_string": "private IChainStorage chainStorageMock;", "modifier": "private", "type": "IChainStorage", "declarator": "chainStorageMock", "var_name": "chainStorageMock"}, {"original_string": "private IRouter routerMock;", "modifier": "private", "type": "IRouter", "declarator": "routerMock", "var_name": "routerMock"}, {"original_string": "private IObject chainAndEnv;", "modifier": "private", "type": "IObject", "declarator": "chainAndEnv", "var_name": "chainAndEnv"}], "file": "CoreFeatures/MessageProcessing/ReceiverChain/src/test/java/info/smart_tools/smartactors/message_processing/receiver_chain/ImmutableReceiverChainResolutionStrategyTest.java"}, "test_case": {"identifier": "Should_wrapExceptions", "parameters": "()", "modifiers": "@Test(expected = ResolveDependencyStrategyException.class) public", "return": "void", "body": "@Test(expected = ResolveDependencyStrategyException.class)\n    public void Should_wrapExceptions()\n            throws Exception {\n        IObject description = mock(IObject.class);\n\n        when(description.getValue(any())).thenThrow(ReadValueException.class);\n\n        new ImmutableReceiverChainResolutionStrategy()\n                .resolve(\"chain\", description, chainStorageMock, routerMock);\n    }", "signature": "void Should_wrapExceptions()", "full_signature": "@Test(expected = ResolveDependencyStrategyException.class) public void Should_wrapExceptions()", "class_method_signature": "ImmutableReceiverChainResolutionStrategyTest.Should_wrapExceptions()", "testcase": true, "constructor": false, "invocations": ["mock", "thenThrow", "when", "getValue", "any", "resolve"]}, "focal_class": {"identifier": "ImmutableReceiverChainResolutionStrategy", "superclass": "", "interfaces": "implements IResolveDependencyStrategy", "fields": [{"original_string": "private static final int CHAIN_ID_ARG_INDEX = 0;", "modifier": "private static final", "type": "int", "declarator": "CHAIN_ID_ARG_INDEX = 0", "var_name": "CHAIN_ID_ARG_INDEX"}, {"original_string": "private static final int DESCRIPTION_ARG_INDEX = 1;", "modifier": "private static final", "type": "int", "declarator": "DESCRIPTION_ARG_INDEX = 1", "var_name": "DESCRIPTION_ARG_INDEX"}, {"original_string": "private static final int STORAGE_ARG_INDEX = 2;", "modifier": "private static final", "type": "int", "declarator": "STORAGE_ARG_INDEX = 2", "var_name": "STORAGE_ARG_INDEX"}, {"original_string": "private static final int ROUTER_ARG_INDEX = 3;", "modifier": "private static final", "type": "int", "declarator": "ROUTER_ARG_INDEX = 3", "var_name": "ROUTER_ARG_INDEX"}], "methods": [{"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "ImmutableReceiverChainResolutionStrategy.resolve(final Object... args)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ReceiverChain/src/main/java/info/smart_tools/smartactors/message_processing/receiver_chain/ImmutableReceiverChainResolutionStrategy.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T resolve(final Object... args) throws ResolveDependencyStrategyException {\n        try {\n            Object chainId = args[CHAIN_ID_ARG_INDEX];\n            IObject description = (IObject) args[DESCRIPTION_ARG_INDEX];\n            IChainStorage chainStorage = (IChainStorage) args[STORAGE_ARG_INDEX];\n            IRouter router = (IRouter) args[ROUTER_ARG_INDEX];\n\n            IKey fieldNameKey = Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\");\n            IKey receiverIdKey = Keys.getOrAdd(\"receiver_id_from_iobject\");\n            IKey chainIdKey = Keys.getOrAdd(\"chain_id\");\n\n            IFieldName stepsFieldName = IOC.resolve(fieldNameKey, \"steps\");\n            IFieldName exceptionalChainsFieldName = IOC.resolve(fieldNameKey, \"exceptional\");\n            IFieldName exceptionClassFieldName = IOC.resolve(fieldNameKey, \"class\");\n            IFieldName exceptionChainFieldName = IOC.resolve(fieldNameKey, \"chain\");\n            IFieldName exceptionAfterFieldName = IOC.resolve(fieldNameKey, \"after\");\n\n            List chainSteps = (List) description.getValue(stepsFieldName);\n            List exceptionalChains = (List) description.getValue(exceptionalChainsFieldName);\n\n            IMessageReceiver[] receivers = new IMessageReceiver[chainSteps.size()];\n            IObject[] arguments = new IObject[chainSteps.size()];\n\n            for (int i = 0; i < chainSteps.size(); i++) {\n                IObject step = (IObject) chainSteps.get(i);\n\n                receivers[i] = router.route(IOC.resolve(receiverIdKey, step));\n                arguments[i] = step;\n            }\n\n            LinkedHashMap<Class<? extends Throwable>, IObject> exceptionalChainsMap = new LinkedHashMap<>();\n\n            for (Object chainDesc : exceptionalChains) {\n                IObject desc = (IObject) chainDesc;\n\n                Class<?> clazz = this.getClass().getClassLoader().loadClass(String.valueOf(desc.getValue(exceptionClassFieldName)));\n                IReceiverChain chain = chainStorage.resolve(IOC.resolve(chainIdKey, desc.getValue(exceptionChainFieldName)));\n                IAction<IMessageProcessingSequence> afterExceptionAction = IOC.resolve(\n                        IOC.resolve(IOC.getKeyForKeyStorage(), \"afterExceptionAction#\" + desc.getValue(exceptionAfterFieldName))\n                );\n                IObject chainAndEnv = IOC.resolve(IOC.resolve(IOC.getKeyForKeyStorage(), \"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n                chainAndEnv.setValue(exceptionChainFieldName, chain);\n                chainAndEnv.setValue(exceptionAfterFieldName, afterExceptionAction);\n                exceptionalChainsMap.put((Class<? extends Throwable>) clazz, chainAndEnv);\n            }\n\n            return (T) new ImmutableReceiverChain(String.valueOf(chainId), description, receivers, arguments, exceptionalChainsMap);\n        } catch (ChainNotFoundException | ClassNotFoundException | ResolutionException | ReadValueException |\n                RouteNotFoundException | ChangeValueException | InvalidArgumentException e) {\n            throw new ResolveDependencyStrategyException(e);\n        }\n    }", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "ImmutableReceiverChainResolutionStrategy.resolve(final Object... args)", "testcase": false, "constructor": false, "invocations": ["getOrAdd", "getOrAdd", "getOrAdd", "resolve", "resolve", "resolve", "resolve", "resolve", "getValue", "getValue", "size", "size", "size", "get", "route", "resolve", "loadClass", "getClassLoader", "getClass", "valueOf", "getValue", "resolve", "resolve", "getValue", "resolve", "resolve", "getKeyForKeyStorage", "getValue", "resolve", "resolve", "getKeyForKeyStorage", "setValue", "setValue", "put", "valueOf"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}