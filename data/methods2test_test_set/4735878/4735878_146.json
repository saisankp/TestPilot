{"test_class": {"identifier": "CommentUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EOL = TextUtils.getEolStr();", "modifier": "private static final", "type": "String", "declarator": "EOL = TextUtils.getEolStr()", "var_name": "EOL"}, {"original_string": "private static final String LINE_ONE = \"CREATE TABLE distances AS SELECT \" +\n            \"a.the_geom, ST_Distance(a.the_geom, b.the_geom) AS distance, \" +\n            \"a.ID_GEOFLA, a.id FROM nearest_points a, chef_lieu_43 b WHERE \" +\n            \"a.ID_GEOFLA=b.ID_GEOFLA;\" + EOL;", "modifier": "private static final", "type": "String", "declarator": "LINE_ONE = \"CREATE TABLE distances AS SELECT \" +\n            \"a.the_geom, ST_Distance(a.the_geom, b.the_geom) AS distance, \" +\n            \"a.ID_GEOFLA, a.id FROM nearest_points a, chef_lieu_43 b WHERE \" +\n            \"a.ID_GEOFLA=b.ID_GEOFLA;\" + EOL", "var_name": "LINE_ONE"}, {"original_string": "private static final String LINE_TWO = \"CREATE TABLE min_distances AS SELECT \" +\n                \"MIN(distance) AS min_distance, ID_GEOFLA, MIN(id) as id FROM \" +\n                \"distances GROUP BY ID_GEOFLA;\" + EOL;", "modifier": "private static final", "type": "String", "declarator": "LINE_TWO = \"CREATE TABLE min_distances AS SELECT \" +\n                \"MIN(distance) AS min_distance, ID_GEOFLA, MIN(id) as id FROM \" +\n                \"distances GROUP BY ID_GEOFLA;\" + EOL", "var_name": "LINE_TWO"}, {"original_string": "private static final String LINE_THREE = \"CREATE TABLE mairies_proj_final \" +\n            \"AS SELECT a.* FROM nearest_points a, min_distances b WHERE a.id=b.id;\";", "modifier": "private static final", "type": "String", "declarator": "LINE_THREE = \"CREATE TABLE mairies_proj_final \" +\n            \"AS SELECT a.* FROM nearest_points a, min_distances b WHERE a.id=b.id;\"", "var_name": "LINE_THREE"}, {"original_string": "private static final String TEXT = LINE_ONE + LINE_TWO + LINE_THREE;", "modifier": "private static final", "type": "String", "declarator": "TEXT = LINE_ONE + LINE_TWO + LINE_THREE", "var_name": "TEXT"}], "file": "orbisgis-sif/src/test/java/org/orbisgis/sif/CommentUtilTest.java"}, "test_case": {"identifier": "testBlockComment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBlockComment() throws BadLocationException {\n        org.junit.Assume.assumeTrue(!GraphicsEnvironment.isHeadless());\n        RSyntaxTextArea scriptPanel = new RSyntaxTextArea();\n        scriptPanel.setText(TEXT);\n        scriptPanel.select(13, 226);\n        final String beforeSelection = scriptPanel.getText(0, scriptPanel.getSelectionStart());\n        final String selection = scriptPanel.getText(\n                scriptPanel.getSelectionStart(), scriptPanel.getSelectedText().length());\n        final String afterSelection = scriptPanel.getText(\n                scriptPanel.getSelectionEnd(),\n                scriptPanel.getDocument().getEndPosition().getOffset() -  scriptPanel.getSelectionEnd() - 1);\n        final String expectedText = beforeSelection\n                + CommentUtil.BLOCK_COMMENT_START + selection + CommentUtil.BLOCK_COMMENT_END\n                + afterSelection;\n        // Block comment the selection\n        CommentUtil.blockCommentOrUncomment(scriptPanel);\n        assertEquals(expectedText, scriptPanel.getText());\n        // Check that the commented part is selected.\n        assertEquals(13, scriptPanel.getSelectionStart());\n        assertEquals(226 + CommentUtil.BLOCK_COMMENT_START.length()\n                + CommentUtil.BLOCK_COMMENT_END.length(),\n                scriptPanel.getSelectionEnd());\n    }", "signature": "void testBlockComment()", "full_signature": "@Test public void testBlockComment()", "class_method_signature": "CommentUtilTest.testBlockComment()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "isHeadless", "setText", "select", "getText", "getSelectionStart", "getText", "getSelectionStart", "length", "getSelectedText", "getText", "getSelectionEnd", "getOffset", "getEndPosition", "getDocument", "getSelectionEnd", "blockCommentOrUncomment", "assertEquals", "getText", "assertEquals", "getSelectionStart", "assertEquals", "length", "length", "getSelectionEnd"]}, "focal_class": {"identifier": "CommentUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SQL_COMMENT_CHARACTER = \"--\";", "modifier": "public static final", "type": "String", "declarator": "SQL_COMMENT_CHARACTER = \"--\"", "var_name": "SQL_COMMENT_CHARACTER"}, {"original_string": "public static final String JAVA_COMMENT_CHARACTER = \"//\";", "modifier": "public static final", "type": "String", "declarator": "JAVA_COMMENT_CHARACTER = \"//\"", "var_name": "JAVA_COMMENT_CHARACTER"}, {"original_string": "public static final String R_COMMENT_CHARACTER = \"#\";", "modifier": "public static final", "type": "String", "declarator": "R_COMMENT_CHARACTER = \"#\"", "var_name": "R_COMMENT_CHARACTER"}, {"original_string": "public static final String BLOCK_COMMENT_START = \"/*\";", "modifier": "public static final", "type": "String", "declarator": "BLOCK_COMMENT_START = \"/*\"", "var_name": "BLOCK_COMMENT_START"}, {"original_string": "public static final String BLOCK_COMMENT_END = \"*/\";", "modifier": "public static final", "type": "String", "declarator": "BLOCK_COMMENT_END = \"*/\"", "var_name": "BLOCK_COMMENT_END"}, {"original_string": "private final static I18n I18N = I18nFactory.getI18n(CommentUtil.class);", "modifier": "private final static", "type": "I18n", "declarator": "I18N = I18nFactory.getI18n(CommentUtil.class)", "var_name": "I18N"}, {"original_string": "private final static Logger LOGGER = LoggerFactory.getLogger(CommentUtil.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CommentUtil.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "commentOrUncommentSQL", "parameters": "(JTextArea scriptPanel)", "modifiers": "public static", "return": "void", "signature": "void commentOrUncommentSQL(JTextArea scriptPanel)", "full_signature": "public static void commentOrUncommentSQL(JTextArea scriptPanel)", "class_method_signature": "CommentUtil.commentOrUncommentSQL(JTextArea scriptPanel)", "testcase": false, "constructor": false}, {"identifier": "commentOrUncommentJava", "parameters": "(JTextArea scriptPanel)", "modifiers": "public static", "return": "void", "signature": "void commentOrUncommentJava(JTextArea scriptPanel)", "full_signature": "public static void commentOrUncommentJava(JTextArea scriptPanel)", "class_method_signature": "CommentUtil.commentOrUncommentJava(JTextArea scriptPanel)", "testcase": false, "constructor": false}, {"identifier": "commentOrUncommentR", "parameters": "(JTextArea scriptPanel)", "modifiers": "public static", "return": "void", "signature": "void commentOrUncommentR(JTextArea scriptPanel)", "full_signature": "public static void commentOrUncommentR(JTextArea scriptPanel)", "class_method_signature": "CommentUtil.commentOrUncommentR(JTextArea scriptPanel)", "testcase": false, "constructor": false}, {"identifier": "commentOrUncomment", "parameters": "(JTextArea scriptPanel, String commentCharacter)", "modifiers": "private static", "return": "void", "signature": "void commentOrUncomment(JTextArea scriptPanel, String commentCharacter)", "full_signature": "private static void commentOrUncomment(JTextArea scriptPanel, String commentCharacter)", "class_method_signature": "CommentUtil.commentOrUncomment(JTextArea scriptPanel, String commentCharacter)", "testcase": false, "constructor": false}, {"identifier": "unbrokenRangeOfComments", "parameters": "(JTextArea scriptPanel, String commentCharacter)", "modifiers": "private static", "return": "boolean", "signature": "boolean unbrokenRangeOfComments(JTextArea scriptPanel, String commentCharacter)", "full_signature": "private static boolean unbrokenRangeOfComments(JTextArea scriptPanel, String commentCharacter)", "class_method_signature": "CommentUtil.unbrokenRangeOfComments(JTextArea scriptPanel, String commentCharacter)", "testcase": false, "constructor": false}, {"identifier": "blockCommentOrUncomment", "parameters": "(JTextArea scriptPanel)", "modifiers": "public static", "return": "void", "signature": "void blockCommentOrUncomment(JTextArea scriptPanel)", "full_signature": "public static void blockCommentOrUncomment(JTextArea scriptPanel)", "class_method_signature": "CommentUtil.blockCommentOrUncomment(JTextArea scriptPanel)", "testcase": false, "constructor": false}, {"identifier": "alreadyBlockCommented", "parameters": "(JTextArea scriptPanel)", "modifiers": "private static", "return": "boolean", "signature": "boolean alreadyBlockCommented(JTextArea scriptPanel)", "full_signature": "private static boolean alreadyBlockCommented(JTextArea scriptPanel)", "class_method_signature": "CommentUtil.alreadyBlockCommented(JTextArea scriptPanel)", "testcase": false, "constructor": false}, {"identifier": "blockComment", "parameters": "(JTextArea scriptPanel)", "modifiers": "private static", "return": "void", "signature": "void blockComment(JTextArea scriptPanel)", "full_signature": "private static void blockComment(JTextArea scriptPanel)", "class_method_signature": "CommentUtil.blockComment(JTextArea scriptPanel)", "testcase": false, "constructor": false}, {"identifier": "blockUncomment", "parameters": "(JTextArea scriptPanel)", "modifiers": "private static", "return": "void", "signature": "void blockUncomment(JTextArea scriptPanel)", "full_signature": "private static void blockUncomment(JTextArea scriptPanel)", "class_method_signature": "CommentUtil.blockUncomment(JTextArea scriptPanel)", "testcase": false, "constructor": false}, {"identifier": "commentSQL", "parameters": "(JTextArea scriptPanel, String commentCharacter)", "modifiers": "private static", "return": "void", "signature": "void commentSQL(JTextArea scriptPanel, String commentCharacter)", "full_signature": "private static void commentSQL(JTextArea scriptPanel, String commentCharacter)", "class_method_signature": "CommentUtil.commentSQL(JTextArea scriptPanel, String commentCharacter)", "testcase": false, "constructor": false}, {"identifier": "uncommentSQL", "parameters": "(JTextArea scriptPanel, String commentCharacter)", "modifiers": "private static", "return": "void", "signature": "void uncommentSQL(JTextArea scriptPanel, String commentCharacter)", "full_signature": "private static void uncommentSQL(JTextArea scriptPanel, String commentCharacter)", "class_method_signature": "CommentUtil.uncommentSQL(JTextArea scriptPanel, String commentCharacter)", "testcase": false, "constructor": false}], "file": "orbisgis-sif/src/main/java/org/orbisgis/sif/CommentUtil.java"}, "focal_method": {"identifier": "blockComment", "parameters": "(JTextArea scriptPanel)", "modifiers": "private static", "return": "void", "body": "private static void blockComment(JTextArea scriptPanel) {\n        // Recover the index of the start of the selection.\n        final int startOffset = scriptPanel.getSelectionStart();\n        // Comment the selection.\n        final String commentedSelection = BLOCK_COMMENT_START\n                + scriptPanel.getSelectedText() + BLOCK_COMMENT_END;\n        scriptPanel.replaceSelection(commentedSelection);\n        // Select the commented selection.\n        scriptPanel.setSelectionStart(startOffset);\n        scriptPanel.setSelectionEnd(startOffset + commentedSelection.length());\n    }", "signature": "void blockComment(JTextArea scriptPanel)", "full_signature": "private static void blockComment(JTextArea scriptPanel)", "class_method_signature": "CommentUtil.blockComment(JTextArea scriptPanel)", "testcase": false, "constructor": false, "invocations": ["getSelectionStart", "getSelectedText", "replaceSelection", "setSelectionStart", "setSelectionEnd", "length"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}