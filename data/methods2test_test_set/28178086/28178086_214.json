{"test_class": {"identifier": "TreesTest", "superclass": "", "interfaces": "", "fields": [], "file": "utilities/src/test/java/ec/tstoolkit/utilities/TreesTest.java"}, "test_case": {"identifier": "testDepthFirstIterable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDepthFirstIterable() {\n        Node n1 = new Node(\"1\");\n        Node n2 = new Node(\"2\");\n        n1.children.add(n2);\n        Node n3 = new Node(\"5\");\n        n1.children.add(n3);\n        Node n4 = new Node(\"6\");\n        n1.children.add(n4);\n        n2.children.add(new Node(\"3\"));\n        n2.children.add(new Node(\"4\"));\n\n        assertThat(Trees.depthFirstStream(n1, Node::childrenStream).map(Node::getName))\n                .containsExactly(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\n    }", "signature": "void testDepthFirstIterable()", "full_signature": "@Test public void testDepthFirstIterable()", "class_method_signature": "TreesTest.testDepthFirstIterable()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "containsExactly", "assertThat", "map", "depthFirstStream"]}, "focal_class": {"identifier": "Trees", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Trees", "parameters": "()", "modifiers": "private", "return": "", "signature": " Trees()", "full_signature": "private  Trees()", "class_method_signature": "Trees.Trees()", "testcase": false, "constructor": true}, {"identifier": "breadthFirstIterable", "parameters": "(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "modifiers": "@NonNull public static", "return": "Iterable<T>", "signature": "Iterable<T> breadthFirstIterable(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "full_signature": "@NonNull public static Iterable<T> breadthFirstIterable(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "class_method_signature": "Trees.breadthFirstIterable(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "testcase": false, "constructor": false}, {"identifier": "breadthFirstStream", "parameters": "(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "modifiers": "@NonNull public static", "return": "Stream<T>", "signature": "Stream<T> breadthFirstStream(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "full_signature": "@NonNull public static Stream<T> breadthFirstStream(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "class_method_signature": "Trees.breadthFirstStream(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "testcase": false, "constructor": false}, {"identifier": "depthFirstIterable", "parameters": "(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "modifiers": "@NonNull public static", "return": "Iterable<T>", "signature": "Iterable<T> depthFirstIterable(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "full_signature": "@NonNull public static Iterable<T> depthFirstIterable(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "class_method_signature": "Trees.depthFirstIterable(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "testcase": false, "constructor": false}, {"identifier": "depthFirstStream", "parameters": "(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "modifiers": "@NonNull public static", "return": "Stream<T>", "signature": "Stream<T> depthFirstStream(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "full_signature": "@NonNull public static Stream<T> depthFirstStream(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "class_method_signature": "Trees.depthFirstStream(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "testcase": false, "constructor": false}, {"identifier": "prettyPrint", "parameters": "(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children,\n            @NonNegative int maxLevel,\n            @NonNull Function<? super T, ? extends CharSequence> toString,\n            @NonNull Appendable appendable)", "modifiers": "public static", "return": "void", "signature": "void prettyPrint(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children,\n            @NonNegative int maxLevel,\n            @NonNull Function<? super T, ? extends CharSequence> toString,\n            @NonNull Appendable appendable)", "full_signature": "public static void prettyPrint(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children,\n            @NonNegative int maxLevel,\n            @NonNull Function<? super T, ? extends CharSequence> toString,\n            @NonNull Appendable appendable)", "class_method_signature": "Trees.prettyPrint(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children,\n            @NonNegative int maxLevel,\n            @NonNull Function<? super T, ? extends CharSequence> toString,\n            @NonNull Appendable appendable)", "testcase": false, "constructor": false}, {"identifier": "prettyPrintToString", "parameters": "(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children,\n            @NonNegative int maxLevel,\n            @NonNull Function<? super T, ? extends CharSequence> toString)", "modifiers": "@NonNull public static", "return": "String", "signature": "String prettyPrintToString(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children,\n            @NonNegative int maxLevel,\n            @NonNull Function<? super T, ? extends CharSequence> toString)", "full_signature": "@NonNull public static String prettyPrintToString(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children,\n            @NonNegative int maxLevel,\n            @NonNull Function<? super T, ? extends CharSequence> toString)", "class_method_signature": "Trees.prettyPrintToString(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children,\n            @NonNegative int maxLevel,\n            @NonNull Function<? super T, ? extends CharSequence> toString)", "testcase": false, "constructor": false}, {"identifier": "prettyPrint", "parameters": "(\n            @NonNull T item,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children,\n            @NonNegative int maxLevel,\n            @NonNull Appendable appendable,\n            @NonNull Function<? super T, ? extends CharSequence> toString,\n            @NonNull String prefix,\n            boolean last)", "modifiers": "private static", "return": "void", "signature": "void prettyPrint(\n            @NonNull T item,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children,\n            @NonNegative int maxLevel,\n            @NonNull Appendable appendable,\n            @NonNull Function<? super T, ? extends CharSequence> toString,\n            @NonNull String prefix,\n            boolean last)", "full_signature": "private static void prettyPrint(\n            @NonNull T item,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children,\n            @NonNegative int maxLevel,\n            @NonNull Appendable appendable,\n            @NonNull Function<? super T, ? extends CharSequence> toString,\n            @NonNull String prefix,\n            boolean last)", "class_method_signature": "Trees.prettyPrint(\n            @NonNull T item,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children,\n            @NonNegative int maxLevel,\n            @NonNull Appendable appendable,\n            @NonNull Function<? super T, ? extends CharSequence> toString,\n            @NonNull String prefix,\n            boolean last)", "testcase": false, "constructor": false}], "file": "utilities/src/main/java/ec/tstoolkit/utilities/Trees.java"}, "focal_method": {"identifier": "depthFirstIterable", "parameters": "(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "modifiers": "@NonNull public static", "return": "Iterable<T>", "body": "@NonNull\n    public static <T> Iterable<T> depthFirstIterable(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children) {\n        return new DepthFirstIterable(root, children);\n    }", "signature": "Iterable<T> depthFirstIterable(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "full_signature": "@NonNull public static Iterable<T> depthFirstIterable(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "class_method_signature": "Trees.depthFirstIterable(\n            @NonNull T root,\n            @NonNull Function<? super T, ? extends Stream<? extends T>> children)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}