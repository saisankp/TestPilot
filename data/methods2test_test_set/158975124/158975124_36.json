{"test_class": {"identifier": "BytesUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Random r = new Random(System.currentTimeMillis());", "modifier": "private", "type": "Random", "declarator": "r = new Random(System.currentTimeMillis())", "var_name": "r"}], "file": "tsfile/src/test/java/org/apache/iotdb/tsfile/utils/BytesUtilsTest.java"}, "test_case": {"identifier": "testConcatByteArrayList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConcatByteArrayList() {\n    List<byte[]> list = new ArrayList<byte[]>();\n    float f1 = 12.4f;\n    boolean b1 = true;\n    int i1 = 12;\n    list.add(BytesUtils.floatToBytes(f1));\n    list.add(BytesUtils.boolToBytes(b1));\n    list.add(BytesUtils.intToBytes(i1));\n    byte[] ret = BytesUtils.concatByteArrayList(list);\n    float rf1 = BytesUtils.bytesToFloat(ret, 0);\n    boolean rb1 = BytesUtils.bytesToBool(ret, 4);\n    int ri1 = BytesUtils.bytesToInt(ret, 5);\n    assertEquals(f1, rf1, TestConstant.float_min_delta);\n    assertEquals(b1, rb1);\n    assertEquals(i1, ri1);\n  }", "signature": "void testConcatByteArrayList()", "full_signature": "@Test public void testConcatByteArrayList()", "class_method_signature": "BytesUtilsTest.testConcatByteArrayList()", "testcase": true, "constructor": false, "invocations": ["add", "floatToBytes", "add", "boolToBytes", "add", "intToBytes", "concatByteArrayList", "bytesToFloat", "bytesToBool", "bytesToInt", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "BytesUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BytesUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BytesUtils.class)", "var_name": "LOG"}], "methods": [{"identifier": "BytesUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " BytesUtils()", "full_signature": "private  BytesUtils()", "class_method_signature": "BytesUtils.BytesUtils()", "testcase": false, "constructor": true}, {"identifier": "intToBytes", "parameters": "(int i)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] intToBytes(int i)", "full_signature": "public static byte[] intToBytes(int i)", "class_method_signature": "BytesUtils.intToBytes(int i)", "testcase": false, "constructor": false}, {"identifier": "intToBytes", "parameters": "(int i, byte[] desc, int offset)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] intToBytes(int i, byte[] desc, int offset)", "full_signature": "public static byte[] intToBytes(int i, byte[] desc, int offset)", "class_method_signature": "BytesUtils.intToBytes(int i, byte[] desc, int offset)", "testcase": false, "constructor": false}, {"identifier": "intToBytes", "parameters": "(int srcNum, byte[] result, int pos, int width)", "modifiers": "public static", "return": "void", "signature": "void intToBytes(int srcNum, byte[] result, int pos, int width)", "full_signature": "public static void intToBytes(int srcNum, byte[] result, int pos, int width)", "class_method_signature": "BytesUtils.intToBytes(int srcNum, byte[] result, int pos, int width)", "testcase": false, "constructor": false}, {"identifier": "intToTwoBytes", "parameters": "(int i)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] intToTwoBytes(int i)", "full_signature": "public static byte[] intToTwoBytes(int i)", "class_method_signature": "BytesUtils.intToTwoBytes(int i)", "testcase": false, "constructor": false}, {"identifier": "twoBytesToInt", "parameters": "(byte[] ret)", "modifiers": "public static", "return": "int", "signature": "int twoBytesToInt(byte[] ret)", "full_signature": "public static int twoBytesToInt(byte[] ret)", "class_method_signature": "BytesUtils.twoBytesToInt(byte[] ret)", "testcase": false, "constructor": false}, {"identifier": "bytesToInt", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "int", "signature": "int bytesToInt(byte[] bytes)", "full_signature": "public static int bytesToInt(byte[] bytes)", "class_method_signature": "BytesUtils.bytesToInt(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "bytesToInt", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "int", "signature": "int bytesToInt(byte[] bytes, int offset)", "full_signature": "public static int bytesToInt(byte[] bytes, int offset)", "class_method_signature": "BytesUtils.bytesToInt(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "bytesToInt", "parameters": "(byte[] result, int pos, int width)", "modifiers": "public static", "return": "int", "signature": "int bytesToInt(byte[] result, int pos, int width)", "full_signature": "public static int bytesToInt(byte[] result, int pos, int width)", "class_method_signature": "BytesUtils.bytesToInt(byte[] result, int pos, int width)", "testcase": false, "constructor": false}, {"identifier": "floatToBytes", "parameters": "(float x)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] floatToBytes(float x)", "full_signature": "public static byte[] floatToBytes(float x)", "class_method_signature": "BytesUtils.floatToBytes(float x)", "testcase": false, "constructor": false}, {"identifier": "floatToBytes", "parameters": "(float x, byte[] desc, int offset)", "modifiers": "public static", "return": "void", "signature": "void floatToBytes(float x, byte[] desc, int offset)", "full_signature": "public static void floatToBytes(float x, byte[] desc, int offset)", "class_method_signature": "BytesUtils.floatToBytes(float x, byte[] desc, int offset)", "testcase": false, "constructor": false}, {"identifier": "bytesToFloat", "parameters": "(byte[] b)", "modifiers": "public static", "return": "float", "signature": "float bytesToFloat(byte[] b)", "full_signature": "public static float bytesToFloat(byte[] b)", "class_method_signature": "BytesUtils.bytesToFloat(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "bytesToFloat", "parameters": "(byte[] b, int offset)", "modifiers": "public static", "return": "float", "signature": "float bytesToFloat(byte[] b, int offset)", "full_signature": "public static float bytesToFloat(byte[] b, int offset)", "class_method_signature": "BytesUtils.bytesToFloat(byte[] b, int offset)", "testcase": false, "constructor": false}, {"identifier": "doubleToBytes", "parameters": "(double data)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] doubleToBytes(double data)", "full_signature": "public static byte[] doubleToBytes(double data)", "class_method_signature": "BytesUtils.doubleToBytes(double data)", "testcase": false, "constructor": false}, {"identifier": "doubleToBytes", "parameters": "(double d, byte[] bytes, int offset)", "modifiers": "public static", "return": "void", "signature": "void doubleToBytes(double d, byte[] bytes, int offset)", "full_signature": "public static void doubleToBytes(double d, byte[] bytes, int offset)", "class_method_signature": "BytesUtils.doubleToBytes(double d, byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "bytesToDouble", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "double", "signature": "double bytesToDouble(byte[] bytes)", "full_signature": "public static double bytesToDouble(byte[] bytes)", "class_method_signature": "BytesUtils.bytesToDouble(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "bytesToDouble", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "double", "signature": "double bytesToDouble(byte[] bytes, int offset)", "full_signature": "public static double bytesToDouble(byte[] bytes, int offset)", "class_method_signature": "BytesUtils.bytesToDouble(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "boolToBytes", "parameters": "(boolean x)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] boolToBytes(boolean x)", "full_signature": "public static byte[] boolToBytes(boolean x)", "class_method_signature": "BytesUtils.boolToBytes(boolean x)", "testcase": false, "constructor": false}, {"identifier": "boolToByte", "parameters": "(boolean x)", "modifiers": "public static", "return": "byte", "signature": "byte boolToByte(boolean x)", "full_signature": "public static byte boolToByte(boolean x)", "class_method_signature": "BytesUtils.boolToByte(boolean x)", "testcase": false, "constructor": false}, {"identifier": "byteToBool", "parameters": "(byte b)", "modifiers": "public static", "return": "boolean", "signature": "boolean byteToBool(byte b)", "full_signature": "public static boolean byteToBool(byte b)", "class_method_signature": "BytesUtils.byteToBool(byte b)", "testcase": false, "constructor": false}, {"identifier": "boolToBytes", "parameters": "(boolean x, byte[] desc, int offset)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] boolToBytes(boolean x, byte[] desc, int offset)", "full_signature": "public static byte[] boolToBytes(boolean x, byte[] desc, int offset)", "class_method_signature": "BytesUtils.boolToBytes(boolean x, byte[] desc, int offset)", "testcase": false, "constructor": false}, {"identifier": "bytesToBool", "parameters": "(byte[] b)", "modifiers": "public static", "return": "boolean", "signature": "boolean bytesToBool(byte[] b)", "full_signature": "public static boolean bytesToBool(byte[] b)", "class_method_signature": "BytesUtils.bytesToBool(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "bytesToBool", "parameters": "(byte[] b, int offset)", "modifiers": "public static", "return": "boolean", "signature": "boolean bytesToBool(byte[] b, int offset)", "full_signature": "public static boolean bytesToBool(byte[] b, int offset)", "class_method_signature": "BytesUtils.bytesToBool(byte[] b, int offset)", "testcase": false, "constructor": false}, {"identifier": "longToBytes", "parameters": "(long num)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longToBytes(long num)", "full_signature": "public static byte[] longToBytes(long num)", "class_method_signature": "BytesUtils.longToBytes(long num)", "testcase": false, "constructor": false}, {"identifier": "longToBytes", "parameters": "(long num, int len)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longToBytes(long num, int len)", "full_signature": "public static byte[] longToBytes(long num, int len)", "class_method_signature": "BytesUtils.longToBytes(long num, int len)", "testcase": false, "constructor": false}, {"identifier": "longToBytes", "parameters": "(long num, byte[] desc, int offset)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longToBytes(long num, byte[] desc, int offset)", "full_signature": "public static byte[] longToBytes(long num, byte[] desc, int offset)", "class_method_signature": "BytesUtils.longToBytes(long num, byte[] desc, int offset)", "testcase": false, "constructor": false}, {"identifier": "longToBytes", "parameters": "(long srcNum, byte[] result, int pos, int width)", "modifiers": "public static", "return": "void", "signature": "void longToBytes(long srcNum, byte[] result, int pos, int width)", "full_signature": "public static void longToBytes(long srcNum, byte[] result, int pos, int width)", "class_method_signature": "BytesUtils.longToBytes(long srcNum, byte[] result, int pos, int width)", "testcase": false, "constructor": false}, {"identifier": "bytesToLong", "parameters": "(byte[] byteNum)", "modifiers": "public static", "return": "long", "signature": "long bytesToLong(byte[] byteNum)", "full_signature": "public static long bytesToLong(byte[] byteNum)", "class_method_signature": "BytesUtils.bytesToLong(byte[] byteNum)", "testcase": false, "constructor": false}, {"identifier": "bytesToLong", "parameters": "(byte[] byteNum, int len)", "modifiers": "public static", "return": "long", "signature": "long bytesToLong(byte[] byteNum, int len)", "full_signature": "public static long bytesToLong(byte[] byteNum, int len)", "class_method_signature": "BytesUtils.bytesToLong(byte[] byteNum, int len)", "testcase": false, "constructor": false}, {"identifier": "bytesToLong", "parameters": "(byte[] result, int pos, int width)", "modifiers": "public static", "return": "long", "signature": "long bytesToLong(byte[] result, int pos, int width)", "full_signature": "public static long bytesToLong(byte[] result, int pos, int width)", "class_method_signature": "BytesUtils.bytesToLong(byte[] result, int pos, int width)", "testcase": false, "constructor": false}, {"identifier": "bytesToLongFromOffset", "parameters": "(byte[] byteNum, int len, int offset)", "modifiers": "public static", "return": "long", "signature": "long bytesToLongFromOffset(byte[] byteNum, int len, int offset)", "full_signature": "public static long bytesToLongFromOffset(byte[] byteNum, int len, int offset)", "class_method_signature": "BytesUtils.bytesToLongFromOffset(byte[] byteNum, int len, int offset)", "testcase": false, "constructor": false}, {"identifier": "stringToBytes", "parameters": "(String str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] stringToBytes(String str)", "full_signature": "public static byte[] stringToBytes(String str)", "class_method_signature": "BytesUtils.stringToBytes(String str)", "testcase": false, "constructor": false}, {"identifier": "bytesToString", "parameters": "(byte[] byteStr)", "modifiers": "public static", "return": "String", "signature": "String bytesToString(byte[] byteStr)", "full_signature": "public static String bytesToString(byte[] byteStr)", "class_method_signature": "BytesUtils.bytesToString(byte[] byteStr)", "testcase": false, "constructor": false}, {"identifier": "concatByteArray", "parameters": "(byte[] a, byte[] b)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] concatByteArray(byte[] a, byte[] b)", "full_signature": "public static byte[] concatByteArray(byte[] a, byte[] b)", "class_method_signature": "BytesUtils.concatByteArray(byte[] a, byte[] b)", "testcase": false, "constructor": false}, {"identifier": "concatByteArrayList", "parameters": "(List<byte[]> list)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] concatByteArrayList(List<byte[]> list)", "full_signature": "public static byte[] concatByteArrayList(List<byte[]> list)", "class_method_signature": "BytesUtils.concatByteArrayList(List<byte[]> list)", "testcase": false, "constructor": false}, {"identifier": "subBytes", "parameters": "(byte[] src, int start, int length)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] subBytes(byte[] src, int start, int length)", "full_signature": "public static byte[] subBytes(byte[] src, int start, int length)", "class_method_signature": "BytesUtils.subBytes(byte[] src, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "getIntN", "parameters": "(int data, int offset)", "modifiers": "public static", "return": "int", "signature": "int getIntN(int data, int offset)", "full_signature": "public static int getIntN(int data, int offset)", "class_method_signature": "BytesUtils.getIntN(int data, int offset)", "testcase": false, "constructor": false}, {"identifier": "setIntN", "parameters": "(int data, int offset, int value)", "modifiers": "public static", "return": "int", "signature": "int setIntN(int data, int offset, int value)", "full_signature": "public static int setIntN(int data, int offset, int value)", "class_method_signature": "BytesUtils.setIntN(int data, int offset, int value)", "testcase": false, "constructor": false}, {"identifier": "getByteN", "parameters": "(byte data, int offset)", "modifiers": "public static", "return": "int", "signature": "int getByteN(byte data, int offset)", "full_signature": "public static int getByteN(byte data, int offset)", "class_method_signature": "BytesUtils.getByteN(byte data, int offset)", "testcase": false, "constructor": false}, {"identifier": "setByteN", "parameters": "(byte data, int offset, int value)", "modifiers": "public static", "return": "byte", "signature": "byte setByteN(byte data, int offset, int value)", "full_signature": "public static byte setByteN(byte data, int offset, int value)", "class_method_signature": "BytesUtils.setByteN(byte data, int offset, int value)", "testcase": false, "constructor": false}, {"identifier": "getLongN", "parameters": "(long data, int offset)", "modifiers": "public static", "return": "int", "signature": "int getLongN(long data, int offset)", "full_signature": "public static int getLongN(long data, int offset)", "class_method_signature": "BytesUtils.getLongN(long data, int offset)", "testcase": false, "constructor": false}, {"identifier": "setLongN", "parameters": "(long data, int offset, int value)", "modifiers": "public static", "return": "long", "signature": "long setLongN(long data, int offset, int value)", "full_signature": "public static long setLongN(long data, int offset, int value)", "class_method_signature": "BytesUtils.setLongN(long data, int offset, int value)", "testcase": false, "constructor": false}, {"identifier": "readDouble", "parameters": "(InputStream in)", "modifiers": "public static", "return": "double", "signature": "double readDouble(InputStream in)", "full_signature": "public static double readDouble(InputStream in)", "class_method_signature": "BytesUtils.readDouble(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "readFloat", "parameters": "(InputStream in)", "modifiers": "public static", "return": "float", "signature": "float readFloat(InputStream in)", "full_signature": "public static float readFloat(InputStream in)", "class_method_signature": "BytesUtils.readFloat(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "readBool", "parameters": "(InputStream in)", "modifiers": "public static", "return": "boolean", "signature": "boolean readBool(InputStream in)", "full_signature": "public static boolean readBool(InputStream in)", "class_method_signature": "BytesUtils.readBool(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "readInt", "parameters": "(InputStream in)", "modifiers": "public static", "return": "int", "signature": "int readInt(InputStream in)", "full_signature": "public static int readInt(InputStream in)", "class_method_signature": "BytesUtils.readInt(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "readLong", "parameters": "(InputStream in)", "modifiers": "public static", "return": "long", "signature": "long readLong(InputStream in)", "full_signature": "public static long readLong(InputStream in)", "class_method_signature": "BytesUtils.readLong(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "safeReadInputStreamToBytes", "parameters": "(int count, InputStream in)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] safeReadInputStreamToBytes(int count, InputStream in)", "full_signature": "public static byte[] safeReadInputStreamToBytes(int count, InputStream in)", "class_method_signature": "BytesUtils.safeReadInputStreamToBytes(int count, InputStream in)", "testcase": false, "constructor": false}, {"identifier": "shortToBytes", "parameters": "(short number)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] shortToBytes(short number)", "full_signature": "public static byte[] shortToBytes(short number)", "class_method_signature": "BytesUtils.shortToBytes(short number)", "testcase": false, "constructor": false}, {"identifier": "bytesToShort", "parameters": "(byte[] b)", "modifiers": "public static", "return": "short", "signature": "short bytesToShort(byte[] b)", "full_signature": "public static short bytesToShort(byte[] b)", "class_method_signature": "BytesUtils.bytesToShort(byte[] b)", "testcase": false, "constructor": false}], "file": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/BytesUtils.java"}, "focal_method": {"identifier": "concatByteArrayList", "parameters": "(List<byte[]> list)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] concatByteArrayList(List<byte[]> list) {\n    int size = list.size();\n    int len = 0;\n    for (byte[] cs : list) {\n      len += cs.length;\n    }\n    byte[] result = new byte[len];\n    int pos = 0;\n    for (int i = 0; i < size; i++) {\n      int l = list.get(i).length;\n      System.arraycopy(list.get(i), 0, result, pos, l);\n      pos += l;\n    }\n    return result;\n  }", "signature": "byte[] concatByteArrayList(List<byte[]> list)", "full_signature": "public static byte[] concatByteArrayList(List<byte[]> list)", "class_method_signature": "BytesUtils.concatByteArrayList(List<byte[]> list)", "testcase": false, "constructor": false, "invocations": ["size", "get", "arraycopy", "get"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}