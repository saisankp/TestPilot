{"test_class": {"identifier": "CategoryProviderTest", "superclass": "extends FDroidProviderTest", "interfaces": "", "fields": [], "file": "app/src/test/java/org/fdroid/fdroid/data/CategoryProviderTest.java"}, "test_case": {"identifier": "queryAppsInCategories", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void queryAppsInCategories() {\n        insertAppWithCategory(\"com.dog\", \"Dog\", \"Animal\");\n        insertAppWithCategory(\"com.cat\", \"Cat\", \"Animal\");\n        insertAppWithCategory(\"com.crow\", \"Crow\", \"Animal,Bird\");\n        insertAppWithCategory(\"com.chicken\", \"Chicken\", \"Animal,Bird,Food\");\n        insertAppWithCategory(\"com.bird-statue\", \"Bird Statue\", \"Bird,Mineral\");\n        insertAppWithCategory(\"com.rock\", \"Rock\", \"Mineral\");\n        insertAppWithCategory(\"com.banana\", \"Banana\", \"Food\");\n\n        assertPackagesInCategory(\"Animal\", new String[]{\n                \"com.dog\",\n                \"com.cat\",\n                \"com.crow\",\n                \"com.chicken\",\n        });\n\n        assertPackagesInCategory(\"animal\", new String[]{\n                \"com.dog\",\n                \"com.cat\",\n                \"com.crow\",\n                \"com.chicken\",\n        });\n\n        assertPackagesInCategory(\"Bird\", new String[]{\n                \"com.crow\",\n                \"com.chicken\",\n                \"com.bird-statue\",\n        });\n\n        assertPackagesInCategory(\"Food\", new String[]{\n                \"com.chicken\",\n                \"com.banana\",\n        });\n\n        assertPackagesInCategory(\"Mineral\", new String[]{\n                \"com.rock\",\n                \"com.bird-statue\",\n        });\n\n        assertNoPackagesInUri(AppProvider.getCategoryUri(\"Not a category\"));\n    }", "signature": "void queryAppsInCategories()", "full_signature": "@Test public void queryAppsInCategories()", "class_method_signature": "CategoryProviderTest.queryAppsInCategories()", "testcase": true, "constructor": false, "invocations": ["insertAppWithCategory", "insertAppWithCategory", "insertAppWithCategory", "insertAppWithCategory", "insertAppWithCategory", "insertAppWithCategory", "insertAppWithCategory", "assertPackagesInCategory", "assertPackagesInCategory", "assertPackagesInCategory", "assertPackagesInCategory", "assertPackagesInCategory", "assertNoPackagesInUri", "getCategoryUri"]}, "focal_class": {"identifier": "CategoryProvider", "superclass": "extends FDroidProvider", "interfaces": "", "fields": [{"original_string": "private static final String PROVIDER_NAME = \"CategoryProvider\";", "modifier": "private static final", "type": "String", "declarator": "PROVIDER_NAME = \"CategoryProvider\"", "var_name": "PROVIDER_NAME"}, {"original_string": "private static final UriMatcher MATCHER = new UriMatcher(-1);", "modifier": "private static final", "type": "UriMatcher", "declarator": "MATCHER = new UriMatcher(-1)", "var_name": "MATCHER"}, {"original_string": "private static final String PATH_CATEGORY_NAME = \"categoryName\";", "modifier": "private static final", "type": "String", "declarator": "PATH_CATEGORY_NAME = \"categoryName\"", "var_name": "PATH_CATEGORY_NAME"}, {"original_string": "private static final String PATH_ALL_CATEGORIES = \"all\";", "modifier": "private static final", "type": "String", "declarator": "PATH_ALL_CATEGORIES = \"all\"", "var_name": "PATH_ALL_CATEGORIES"}, {"original_string": "private static final String PATH_CATEGORY_ID = \"categoryId\";", "modifier": "private static final", "type": "String", "declarator": "PATH_CATEGORY_ID = \"categoryId\"", "var_name": "PATH_CATEGORY_ID"}], "methods": [{"identifier": "getContentUri", "parameters": "()", "modifiers": "static", "return": "Uri", "signature": "Uri getContentUri()", "full_signature": "static Uri getContentUri()", "class_method_signature": "CategoryProvider.getContentUri()", "testcase": false, "constructor": false}, {"identifier": "getAllCategories", "parameters": "()", "modifiers": "public static", "return": "Uri", "signature": "Uri getAllCategories()", "full_signature": "public static Uri getAllCategories()", "class_method_signature": "CategoryProvider.getAllCategories()", "testcase": false, "constructor": false}, {"identifier": "getCategoryUri", "parameters": "(String categoryName)", "modifiers": "public static", "return": "Uri", "signature": "Uri getCategoryUri(String categoryName)", "full_signature": "public static Uri getCategoryUri(String categoryName)", "class_method_signature": "CategoryProvider.getCategoryUri(String categoryName)", "testcase": false, "constructor": false}, {"identifier": "getCategoryIdUri", "parameters": "(long categoryId)", "modifiers": "private static", "return": "Uri", "signature": "Uri getCategoryIdUri(long categoryId)", "full_signature": "private static Uri getCategoryIdUri(long categoryId)", "class_method_signature": "CategoryProvider.getCategoryIdUri(long categoryId)", "testcase": false, "constructor": false}, {"identifier": "getTableName", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getTableName()", "full_signature": "@Override protected String getTableName()", "class_method_signature": "CategoryProvider.getTableName()", "testcase": false, "constructor": false}, {"identifier": "getProviderName", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getProviderName()", "full_signature": "@Override protected String getProviderName()", "class_method_signature": "CategoryProvider.getProviderName()", "testcase": false, "constructor": false}, {"identifier": "getAuthority", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getAuthority()", "full_signature": "public static String getAuthority()", "class_method_signature": "CategoryProvider.getAuthority()", "testcase": false, "constructor": false}, {"identifier": "getMatcher", "parameters": "()", "modifiers": "@Override protected", "return": "UriMatcher", "signature": "UriMatcher getMatcher()", "full_signature": "@Override protected UriMatcher getMatcher()", "class_method_signature": "CategoryProvider.getMatcher()", "testcase": false, "constructor": false}, {"identifier": "querySingle", "parameters": "(String categoryName)", "modifiers": "protected", "return": "QuerySelection", "signature": "QuerySelection querySingle(String categoryName)", "full_signature": "protected QuerySelection querySingle(String categoryName)", "class_method_signature": "CategoryProvider.querySingle(String categoryName)", "testcase": false, "constructor": false}, {"identifier": "queryAllInUse", "parameters": "()", "modifiers": "protected", "return": "QuerySelection", "signature": "QuerySelection queryAllInUse()", "full_signature": "protected QuerySelection queryAllInUse()", "class_method_signature": "CategoryProvider.queryAllInUse()", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(@NonNull Uri uri, String[] projection,\n                        String customSelection, String[] selectionArgs, String sortOrder)", "modifiers": "@Override public", "return": "Cursor", "signature": "Cursor query(@NonNull Uri uri, String[] projection,\n                        String customSelection, String[] selectionArgs, String sortOrder)", "full_signature": "@Override public Cursor query(@NonNull Uri uri, String[] projection,\n                        String customSelection, String[] selectionArgs, String sortOrder)", "class_method_signature": "CategoryProvider.query(@NonNull Uri uri, String[] projection,\n                        String customSelection, String[] selectionArgs, String sortOrder)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@NonNull Uri uri, String where, String[] whereArgs)", "modifiers": "@Override public", "return": "int", "signature": "int delete(@NonNull Uri uri, String where, String[] whereArgs)", "full_signature": "@Override public int delete(@NonNull Uri uri, String where, String[] whereArgs)", "class_method_signature": "CategoryProvider.delete(@NonNull Uri uri, String where, String[] whereArgs)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(@NonNull Uri uri, ContentValues values)", "modifiers": "@Override public", "return": "Uri", "signature": "Uri insert(@NonNull Uri uri, ContentValues values)", "full_signature": "@Override public Uri insert(@NonNull Uri uri, ContentValues values)", "class_method_signature": "CategoryProvider.insert(@NonNull Uri uri, ContentValues values)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs)", "modifiers": "@Override public", "return": "int", "signature": "int update(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs)", "full_signature": "@Override public int update(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs)", "class_method_signature": "CategoryProvider.update(@NonNull Uri uri, ContentValues values, String where, String[] whereArgs)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/fdroid/fdroid/data/CategoryProvider.java"}, "focal_method": {"identifier": "getCategoryUri", "parameters": "(String categoryName)", "modifiers": "public static", "return": "Uri", "body": "public static Uri getCategoryUri(String categoryName) {\n        return getContentUri()\n                .buildUpon()\n                .appendPath(PATH_CATEGORY_NAME)\n                .appendPath(categoryName)\n                .build();\n    }", "signature": "Uri getCategoryUri(String categoryName)", "full_signature": "public static Uri getCategoryUri(String categoryName)", "class_method_signature": "CategoryProvider.getCategoryUri(String categoryName)", "testcase": false, "constructor": false, "invocations": ["build", "appendPath", "appendPath", "buildUpon", "getContentUri"]}, "repository": {"repo_id": 22165604, "url": "https://github.com/f-droid/fdroidclient", "stars": 331, "created": "7/23/2014 5:46:02 PM +00:00", "updates": "2020-01-25T14:27:31+00:00", "fork": "False", "license": "licensed"}}