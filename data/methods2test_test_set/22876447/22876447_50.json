{"test_class": {"identifier": "DataRowIteratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "link-move/src/test/java/com/nhl/link/move/runtime/jdbc/DataRowIteratorTest.java"}, "test_case": {"identifier": "testCalculateHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalculateHeader() {\n\n        DataRow row = new DataRow(5);\n        row.put(\"A1\", new Object());\n        row.put(\"A2\", null);\n        row.put(\"A0\", \"aaaa\");\n\n        ResultIterator<DataRow> rows = mock(ResultIterator.class);\n        when(rows.hasNextRow()).thenReturn(true, false);\n        when(rows.nextRow()).thenReturn(row, (DataRow) null);\n\n        DataRowIterator it = new DataRowIterator(rows);\n\n        RowAttribute[] header = it.calculateHeader();\n        assertNotNull(header);\n        assertEquals(3, header.length);\n\n        assertEquals(\"A0\", header[0].getSourceName());\n        assertEquals(\"db:A0\", header[0].getTargetPath());\n\n        assertEquals(\"A1\", header[1].getSourceName());\n        assertEquals(\"db:A1\", header[1].getTargetPath());\n\n        assertEquals(\"A2\", header[2].getSourceName());\n        assertEquals(\"db:A2\", header[2].getTargetPath());\n    }", "signature": "void testCalculateHeader()", "full_signature": "@Test public void testCalculateHeader()", "class_method_signature": "DataRowIteratorTest.testCalculateHeader()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "mock", "thenReturn", "when", "hasNextRow", "thenReturn", "when", "nextRow", "calculateHeader", "assertNotNull", "assertEquals", "assertEquals", "getSourceName", "assertEquals", "getTargetPath", "assertEquals", "getSourceName", "assertEquals", "getTargetPath", "assertEquals", "getSourceName", "assertEquals", "getTargetPath"]}, "focal_class": {"identifier": "DataRowIterator", "superclass": "", "interfaces": "implements Iterator<DataRow>, AutoCloseable", "fields": [{"original_string": "private DataRow currentRow;", "modifier": "private", "type": "DataRow", "declarator": "currentRow", "var_name": "currentRow"}, {"original_string": "private final ResultIterator<DataRow> delegate;", "modifier": "private final", "type": "ResultIterator<DataRow>", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "DataRowIterator", "parameters": "(ResultIterator<DataRow> delegate)", "modifiers": "public", "return": "", "signature": " DataRowIterator(ResultIterator<DataRow> delegate)", "full_signature": "public  DataRowIterator(ResultIterator<DataRow> delegate)", "class_method_signature": "DataRowIterator.DataRowIterator(ResultIterator<DataRow> delegate)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DataRowIterator.close()", "testcase": false, "constructor": false}, {"identifier": "calculateHeader", "parameters": "()", "modifiers": "public", "return": "RowAttribute[]", "signature": "RowAttribute[] calculateHeader()", "full_signature": "public RowAttribute[] calculateHeader()", "class_method_signature": "DataRowIterator.calculateHeader()", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "@Override public boolean hasNext()", "class_method_signature": "DataRowIterator.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "DataRow", "signature": "DataRow next()", "full_signature": "@Override public DataRow next()", "class_method_signature": "DataRowIterator.next()", "testcase": false, "constructor": false}, {"identifier": "checkNextRow", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkNextRow()", "full_signature": "private void checkNextRow()", "class_method_signature": "DataRowIterator.checkNextRow()", "testcase": false, "constructor": false}], "file": "link-move/src/main/java/com/nhl/link/move/runtime/jdbc/DataRowIterator.java"}, "focal_method": {"identifier": "calculateHeader", "parameters": "()", "modifiers": "public", "return": "RowAttribute[]", "body": "public RowAttribute[] calculateHeader() {\n\n        if (currentRow == null) {\n            return new RowAttribute[0];\n        }\n\n        List<String> names = new ArrayList<>(currentRow.keySet());\n\n        // ensure predictable order on each run...\n        Collections.sort(names);\n\n        RowAttribute[] header = new RowAttribute[currentRow.size()];\n        for (int i = 0; i < header.length; i++) {\n            String name = names.get(i);\n            header[i] = new BaseRowAttribute(Object.class, name, ASTDbPath.DB_PREFIX + name, i);\n        }\n\n        return header;\n    }", "signature": "RowAttribute[] calculateHeader()", "full_signature": "public RowAttribute[] calculateHeader()", "class_method_signature": "DataRowIterator.calculateHeader()", "testcase": false, "constructor": false, "invocations": ["keySet", "sort", "size", "get"]}, "repository": {"repo_id": 22876447, "url": "https://github.com/nhl/link-move", "stars": 25, "created": "8/12/2014 12:27:10 PM +00:00", "updates": "2019-12-01T17:30:35+00:00", "fork": "False", "license": "licensed"}}