{"test_class": {"identifier": "XmlAttributeCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NODE = \"ns67:AnyID\";", "modifier": "private static final", "type": "String", "declarator": "NODE = \"ns67:AnyID\"", "var_name": "NODE"}, {"original_string": "private static final String ATTRIBUTE = \"valid\";", "modifier": "private static final", "type": "String", "declarator": "ATTRIBUTE = \"valid\"", "var_name": "ATTRIBUTE"}, {"original_string": "private static final String VALUE = \"true\";", "modifier": "private static final", "type": "String", "declarator": "VALUE = \"true\"", "var_name": "VALUE"}, {"original_string": "private static final String REQUEST = \"request\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST = \"request\"", "var_name": "REQUEST"}, {"original_string": "private static final String XML_DECLARATION = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\";", "modifier": "private static final", "type": "String", "declarator": "XML_DECLARATION = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"", "var_name": "XML_DECLARATION"}, {"original_string": "private static final String CONTENT_TYPE_HEADER = \"Content-Type\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_HEADER = \"Content-Type\"", "var_name": "CONTENT_TYPE_HEADER"}, {"original_string": "private static final String XML_CONTENT = \"application/xml\";", "modifier": "private static final", "type": "String", "declarator": "XML_CONTENT = \"application/xml\"", "var_name": "XML_CONTENT"}, {"original_string": "private static final String FASTINFOSET_CONTENT = \"application/fastinfoset\";", "modifier": "private static final", "type": "String", "declarator": "FASTINFOSET_CONTENT = \"application/fastinfoset\"", "var_name": "FASTINFOSET_CONTENT"}, {"original_string": "private ParameterList parameterList;", "modifier": "private", "type": "ParameterList", "declarator": "parameterList", "var_name": "parameterList"}, {"original_string": "@Mock\n    private WilmaHttpRequest request;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private XQueryExpressionEvaluator queryExpressionEvaluator;", "modifier": "@Mock\n    private", "type": "XQueryExpressionEvaluator", "declarator": "queryExpressionEvaluator", "var_name": "queryExpressionEvaluator"}, {"original_string": "@InjectMocks\n    private XmlAttributeChecker underTest;", "modifier": "@InjectMocks\n    private", "type": "XmlAttributeChecker", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/test/java/com/epam/wilma/stubconfig/condition/checker/xml/XmlAttributeCheckerTest.java"}, "test_case": {"identifier": "testCheckConditionWhenParameterHasMultipleEntriesShouldThrowException", "parameters": "()", "modifiers": "@Test(expectedExceptions = ConditionEvaluationFailedException.class) public", "return": "void", "body": "@Test(expectedExceptions = ConditionEvaluationFailedException.class)\n    public void testCheckConditionWhenParameterHasMultipleEntriesShouldThrowException() {\n        //GIVEN\n        parameterList.addParameter(new Parameter(NODE, \"178\"));\n        parameterList.addParameter(new Parameter(\"ns1:OTHERID\", \"3001\"));\n        //WHEN\n        underTest.checkCondition(request, parameterList);\n        //THEN exception should be thrown\n    }", "signature": "void testCheckConditionWhenParameterHasMultipleEntriesShouldThrowException()", "full_signature": "@Test(expectedExceptions = ConditionEvaluationFailedException.class) public void testCheckConditionWhenParameterHasMultipleEntriesShouldThrowException()", "class_method_signature": "XmlAttributeCheckerTest.testCheckConditionWhenParameterHasMultipleEntriesShouldThrowException()", "testcase": true, "constructor": false, "invocations": ["addParameter", "addParameter", "checkCondition"]}, "focal_class": {"identifier": "XmlAttributeChecker", "superclass": "", "interfaces": "implements ConditionChecker", "fields": [{"original_string": "private static final String FASTINFOSET_CONTENT = \"application/fastinfoset\";", "modifier": "private static final", "type": "String", "declarator": "FASTINFOSET_CONTENT = \"application/fastinfoset\"", "var_name": "FASTINFOSET_CONTENT"}, {"original_string": "private static final String XML_CONTENT = \"xml\";", "modifier": "private static final", "type": "String", "declarator": "XML_CONTENT = \"xml\"", "var_name": "XML_CONTENT"}, {"original_string": "private static final String CONTENT_TYPE_HEADER = \"Content-Type\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_HEADER = \"Content-Type\"", "var_name": "CONTENT_TYPE_HEADER"}, {"original_string": "private static final String XML_DECLARATION = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\";", "modifier": "private static final", "type": "String", "declarator": "XML_DECLARATION = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"", "var_name": "XML_DECLARATION"}, {"original_string": "@Autowired\n    private XQueryExpressionEvaluator queryExpressionEvaluator;", "modifier": "@Autowired\n    private", "type": "XQueryExpressionEvaluator", "declarator": "queryExpressionEvaluator", "var_name": "queryExpressionEvaluator"}], "methods": [{"identifier": "checkCondition", "parameters": "(final WilmaHttpRequest request, final ParameterList parameterList)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "full_signature": "@Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "class_method_signature": "XmlAttributeChecker.checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "testcase": false, "constructor": false}, {"identifier": "evaluateCondition", "parameters": "(final String xml, final String element, final String value)", "modifiers": "private", "return": "boolean", "signature": "boolean evaluateCondition(final String xml, final String element, final String value)", "full_signature": "private boolean evaluateCondition(final String xml, final String element, final String value)", "class_method_signature": "XmlAttributeChecker.evaluateCondition(final String xml, final String element, final String value)", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "(final String element)", "modifiers": "private", "return": "String", "signature": "String getNode(final String element)", "full_signature": "private String getNode(final String element)", "class_method_signature": "XmlAttributeChecker.getNode(final String element)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(final String element)", "modifiers": "private", "return": "String", "signature": "String getAttribute(final String element)", "full_signature": "private String getAttribute(final String element)", "class_method_signature": "XmlAttributeChecker.getAttribute(final String element)", "testcase": false, "constructor": false}, {"identifier": "getPartOfElement", "parameters": "(final String element, final int index)", "modifiers": "private", "return": "String", "signature": "String getPartOfElement(final String element, final int index)", "full_signature": "private String getPartOfElement(final String element, final int index)", "class_method_signature": "XmlAttributeChecker.getPartOfElement(final String element, final int index)", "testcase": false, "constructor": false}, {"identifier": "removeXmlDecTagFromXQueryResult", "parameters": "(final String xml)", "modifiers": "private", "return": "String", "signature": "String removeXmlDecTagFromXQueryResult(final String xml)", "full_signature": "private String removeXmlDecTagFromXQueryResult(final String xml)", "class_method_signature": "XmlAttributeChecker.removeXmlDecTagFromXQueryResult(final String xml)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/main/java/com/epam/wilma/stubconfig/condition/checker/xml/XmlAttributeChecker.java"}, "focal_method": {"identifier": "checkCondition", "parameters": "(final WilmaHttpRequest request, final ParameterList parameterList)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList) {\n        List<Parameter> params = parameterList.getAllParameters();\n        boolean result = false;\n        if (params.size() == 1) {\n            String contentType = request.getHeader(CONTENT_TYPE_HEADER);\n            if (contentType != null && (contentType.contains(XML_CONTENT) || FASTINFOSET_CONTENT.equals(contentType))) {\n\n                try {\n                    Parameter paramater = params.iterator().next();\n                    String element = paramater.getName();\n                    String value = paramater.getValue();\n                    result = evaluateCondition(request.getBody(), element, value);\n                } catch (SaxonApiException e) {\n                    throw new ConditionEvaluationFailedException(\"XQuery evaluation failed at request: \" + request.getWilmaMessageLoggerId(), e);\n                }\n            }\n        } else {\n            throw new ConditionEvaluationFailedException(\"Please provide exactly one parameter!\");\n        }\n        return result;\n    }", "signature": "boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "full_signature": "@Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "class_method_signature": "XmlAttributeChecker.checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "testcase": false, "constructor": false, "invocations": ["getAllParameters", "size", "getHeader", "contains", "equals", "next", "iterator", "getName", "getValue", "evaluateCondition", "getBody", "getWilmaMessageLoggerId"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}