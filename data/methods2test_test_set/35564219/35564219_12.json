{"test_class": {"identifier": "UriProviderTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [], "file": "library/src/test/java/com/climate/mirage/load/UriProviderTest.java"}, "test_case": {"identifier": "testLoads", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoads() throws IOException {\n        MirageRequest request = mock(MirageRequest.class);\n        UrlFactory factory = mock(UrlFactory.class);\n        InputStream inputStream = mock(InputStream.class);\n        when(factory.getStream(any(Uri.class))).thenReturn(inputStream);\n        when(request.urlFactory()).thenReturn(factory);\n        UriProvider provider = new UriProvider(request);\n        when(request.provider()).thenReturn(provider);\n        when(request.uri()).thenReturn(Uri.parse(\"http://www.sample.com/\"));\n\n        InputStream stream = provider.stream();\n        Assert.assertNotNull(stream);\n\n    }", "signature": "void testLoads()", "full_signature": "@Test public void testLoads()", "class_method_signature": "UriProviderTest.testLoads()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getStream", "any", "thenReturn", "when", "urlFactory", "thenReturn", "when", "provider", "thenReturn", "when", "uri", "parse", "stream", "assertNotNull"]}, "focal_class": {"identifier": "UriProvider", "superclass": "extends SavingStreamProvider", "interfaces": "", "fields": [{"original_string": "private final MirageRequest request;", "modifier": "private final", "type": "MirageRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private static final int IO_BUFFER_SIZE = 8 * 1024;", "modifier": "private static final", "type": "int", "declarator": "IO_BUFFER_SIZE = 8 * 1024", "var_name": "IO_BUFFER_SIZE"}], "methods": [{"identifier": "UriProvider", "parameters": "(MirageRequest request)", "modifiers": "public", "return": "", "signature": " UriProvider(MirageRequest request)", "full_signature": "public  UriProvider(MirageRequest request)", "class_method_signature": "UriProvider.UriProvider(MirageRequest request)", "testcase": false, "constructor": true}, {"identifier": "stream", "parameters": "()", "modifiers": "@Override protected", "return": "InputStream", "signature": "InputStream stream()", "full_signature": "@Override protected InputStream stream()", "class_method_signature": "UriProvider.stream()", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "()", "modifiers": "private", "return": "InputStream", "signature": "InputStream getInputStream()", "full_signature": "private InputStream getInputStream()", "class_method_signature": "UriProvider.getInputStream()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/climate/mirage/load/UriProvider.java"}, "focal_method": {"identifier": "stream", "parameters": "()", "modifiers": "@Override protected", "return": "InputStream", "body": "@Override\n    protected InputStream stream() throws IOException {\n        InputStream in = new BufferedInputStream(getInputStream(), IO_BUFFER_SIZE);\n        return in;\n    }", "signature": "InputStream stream()", "full_signature": "@Override protected InputStream stream()", "class_method_signature": "UriProvider.stream()", "testcase": false, "constructor": false, "invocations": ["getInputStream"]}, "repository": {"repo_id": 35564219, "url": "https://github.com/TheClimateCorporation/mirage", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 3928, "license": "licensed"}}