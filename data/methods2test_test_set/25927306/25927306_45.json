{"test_class": {"identifier": "HexTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/io/HexTest.java"}, "test_case": {"identifier": "decodeException", "parameters": "(final char[] data)", "modifiers": "@Test(groups = \"io\", dataProvider = \"invalid-decode\") public", "return": "void", "body": "@Test(groups = \"io\", dataProvider = \"invalid-decode\")\n  public void decodeException(final char[] data)\n    throws Exception\n  {\n    try {\n      Hex.decode(data);\n      Assert.fail(\"Should have thrown exception\");\n    } catch (Exception e) {\n      Assert.assertEquals(IllegalArgumentException.class, e.getClass());\n    }\n  }", "signature": "void decodeException(final char[] data)", "full_signature": "@Test(groups = \"io\", dataProvider = \"invalid-decode\") public void decodeException(final char[] data)", "class_method_signature": "HexTest.decodeException(final char[] data)", "testcase": true, "constructor": false, "invocations": ["decode", "fail", "assertEquals", "getClass"]}, "focal_class": {"identifier": "Hex", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] HEX_CHARS = {\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n  };", "modifier": "private static final", "type": "char[]", "declarator": "HEX_CHARS = {\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n  }", "var_name": "HEX_CHARS"}, {"original_string": "private static final byte[] DECODE = new byte['f' + 1];", "modifier": "private static final", "type": "byte[]", "declarator": "DECODE = new byte['f' + 1]", "var_name": "DECODE"}], "methods": [{"identifier": "Hex", "parameters": "()", "modifiers": "private", "return": "", "signature": " Hex()", "full_signature": "private  Hex()", "class_method_signature": "Hex.Hex()", "testcase": false, "constructor": true}, {"identifier": "encode", "parameters": "(final byte... value)", "modifiers": "public static", "return": "char[]", "signature": "char[] encode(final byte... value)", "full_signature": "public static char[] encode(final byte... value)", "class_method_signature": "Hex.encode(final byte... value)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(final char... value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decode(final char... value)", "full_signature": "public static byte[] decode(final char... value)", "class_method_signature": "Hex.decode(final char... value)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(final char[] hex, final int i)", "modifiers": "protected static", "return": "int", "signature": "int decode(final char[] hex, final int i)", "full_signature": "protected static int decode(final char[] hex, final int i)", "class_method_signature": "Hex.decode(final char[] hex, final int i)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/io/Hex.java"}, "focal_method": {"identifier": "decode", "parameters": "(final char... value)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] decode(final char... value)\n  {\n    if (value == null) {\n      return null;\n    }\n\n    final int l = value.length;\n    // CheckStyle:MagicNumber OFF\n    if ((l & 0x01) != 0) {\n      throw new IllegalArgumentException(\n        String.format(\"Cannot decode odd number of characters for %s\", String.valueOf(value)));\n    }\n    // CheckStyle:MagicNumber ON\n\n    final byte[] decoded = new byte[l >> 1];\n\n    // CheckStyle:MagicNumber OFF\n    for (int i = 0, j = 0; j < l; i++, j += 2) {\n      final int high = decode(value, j) << 4;\n      final int low = decode(value, j + 1);\n      decoded[i] = (byte) ((high | low) & 0xFF);\n    }\n    // CheckStyle:MagicNumber ON\n    return decoded;\n  }", "signature": "byte[] decode(final char... value)", "full_signature": "public static byte[] decode(final char... value)", "class_method_signature": "Hex.decode(final char... value)", "testcase": false, "constructor": false, "invocations": ["format", "valueOf", "decode", "decode"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}