{"test_class": {"identifier": "ImageTableTest", "superclass": "", "interfaces": "", "fields": [], "file": "providers/amazon/src/test/java/com/axemblr/provisionr/amazon/core/ImageTableTest.java"}, "test_case": {"identifier": "testZipIterators", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testZipIterators() {\n        Iterable<Map.Entry<String, String>> entries = ImageTable.zip(\n            ImmutableList.of(\"a\", \"b\"), ImmutableList.of(\"1\", \"2\"));\n\n        assertThat(entries).containsAll(ImmutableList.of(\n            Maps.immutableEntry(\"a\", \"1\"), Maps.immutableEntry(\"b\", \"2\")));\n    }", "signature": "void testZipIterators()", "full_signature": "@Test public void testZipIterators()", "class_method_signature": "ImageTableTest.testZipIterators()", "testcase": true, "constructor": false, "invocations": ["zip", "of", "of", "containsAll", "assertThat", "of", "immutableEntry", "immutableEntry"]}, "focal_class": {"identifier": "ImageTable", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Splitter COMMA = Splitter.on(\",\").trimResults();", "modifier": "private static final", "type": "Splitter", "declarator": "COMMA = Splitter.on(\",\").trimResults()", "var_name": "COMMA"}, {"original_string": "private final Table<String, String, String> table;", "modifier": "private final", "type": "Table<String, String, String>", "declarator": "table", "var_name": "table"}], "methods": [{"identifier": "fromCsvResource", "parameters": "(String resource)", "modifiers": "public static", "return": "ImageTable", "signature": "ImageTable fromCsvResource(String resource)", "full_signature": "public static ImageTable fromCsvResource(String resource)", "class_method_signature": "ImageTable.fromCsvResource(String resource)", "testcase": false, "constructor": false}, {"identifier": "combineHeadersWithLinePartsAsTableCells", "parameters": "(\n        int index, Iterable<String> headers, Iterable<String> lineParts\n    )", "modifiers": "static", "return": "Iterable<Table.Cell<String, String, String>>", "signature": "Iterable<Table.Cell<String, String, String>> combineHeadersWithLinePartsAsTableCells(\n        int index, Iterable<String> headers, Iterable<String> lineParts\n    )", "full_signature": "static Iterable<Table.Cell<String, String, String>> combineHeadersWithLinePartsAsTableCells(\n        int index, Iterable<String> headers, Iterable<String> lineParts\n    )", "class_method_signature": "ImageTable.combineHeadersWithLinePartsAsTableCells(\n        int index, Iterable<String> headers, Iterable<String> lineParts\n    )", "testcase": false, "constructor": false}, {"identifier": "zip", "parameters": "(Iterable<K> first, Iterable<V> second)", "modifiers": "static", "return": "Iterable<Map.Entry<K, V>>", "signature": "Iterable<Map.Entry<K, V>> zip(Iterable<K> first, Iterable<V> second)", "full_signature": "static Iterable<Map.Entry<K, V>> zip(Iterable<K> first, Iterable<V> second)", "class_method_signature": "ImageTable.zip(Iterable<K> first, Iterable<V> second)", "testcase": false, "constructor": false}, {"identifier": "extractHeaders", "parameters": "(List<String> lines)", "modifiers": "static", "return": "Iterable<String>", "signature": "Iterable<String> extractHeaders(List<String> lines)", "full_signature": "static Iterable<String> extractHeaders(List<String> lines)", "class_method_signature": "ImageTable.extractHeaders(List<String> lines)", "testcase": false, "constructor": false}, {"identifier": "ImageTable", "parameters": "(Table<String, String, String> table)", "modifiers": "public", "return": "", "signature": " ImageTable(Table<String, String, String> table)", "full_signature": "public  ImageTable(Table<String, String, String> table)", "class_method_signature": "ImageTable.ImageTable(Table<String, String, String> table)", "testcase": false, "constructor": true}, {"identifier": "getTable", "parameters": "()", "modifiers": "", "return": "Table<String, String, String>", "signature": "Table<String, String, String> getTable()", "full_signature": " Table<String, String, String> getTable()", "class_method_signature": "ImageTable.getTable()", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "()", "modifiers": "public", "return": "ImageTableQuery", "signature": "ImageTableQuery query()", "full_signature": "public ImageTableQuery query()", "class_method_signature": "ImageTable.query()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImageTable.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ImageTable.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImageTable.toString()", "testcase": false, "constructor": false}], "file": "providers/amazon/src/main/java/com/axemblr/provisionr/amazon/core/ImageTable.java"}, "focal_method": {"identifier": "zip", "parameters": "(Iterable<K> first, Iterable<V> second)", "modifiers": "static", "return": "Iterable<Map.Entry<K, V>>", "body": "static <K, V> Iterable<Map.Entry<K, V>> zip(Iterable<K> first, Iterable<V> second) {\n        checkArgument(Iterables.size(first) == Iterables.size(second), \"iterables don't have the same size\");\n\n        final Iterator<K> iterator = first.iterator();\n        return newArrayList(transform(second, new Function<V, Map.Entry<K, V>>() {\n            @Override\n            public Map.Entry<K, V> apply(V input) {\n                return Maps.immutableEntry(iterator.next(), input);\n            }\n        }));\n    }", "signature": "Iterable<Map.Entry<K, V>> zip(Iterable<K> first, Iterable<V> second)", "full_signature": "static Iterable<Map.Entry<K, V>> zip(Iterable<K> first, Iterable<V> second)", "class_method_signature": "ImageTable.zip(Iterable<K> first, Iterable<V> second)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "size", "size", "iterator", "newArrayList", "transform", "immutableEntry", "next"]}, "repository": {"repo_id": 6035195, "url": "https://github.com/axemblr/axemblr-provisionr", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 30, "size": 3329, "license": "licensed"}}