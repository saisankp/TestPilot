{"test_class": {"identifier": "ReflectionUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<E> reflectable = new ArrayList<>();", "modifier": "private final", "type": "List<E>", "declarator": "reflectable = new ArrayList<>()", "var_name": "reflectable"}, {"original_string": "private final Multi<Integer> multi = new Multi<>();", "modifier": "private final", "type": "Multi<Integer>", "declarator": "multi = new Multi<>()", "var_name": "multi"}], "file": "code/spi-support/src/test/java/org/apache/tamaya/spisupport/ReflectionUtilTest.java"}, "test_case": {"identifier": "testGetParametrizedType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetParametrizedType() throws Exception {\n        Field stringListField = this.getClass().getDeclaredField(\"reflectable\");\n        ParameterizedType genericListType = (ParameterizedType) stringListField.getGenericType();\n        \n        assertThat(ReflectionUtil.getParametrizedType(reflectable.getClass()).toString()).isEqualTo(genericListType.toString());\n        assertThat(ReflectionUtil.getParametrizedType(multi.getClass()).getRawType().getTypeName()).isEqualTo(First.class.getName());\n        assertThat(ReflectionUtil.getParametrizedType(Object.class)).isNull();\n    }", "signature": "void testGetParametrizedType()", "full_signature": "@Test public void testGetParametrizedType()", "class_method_signature": "ReflectionUtilTest.testGetParametrizedType()", "testcase": true, "constructor": false, "invocations": ["getDeclaredField", "getClass", "getGenericType", "isEqualTo", "assertThat", "toString", "getParametrizedType", "getClass", "toString", "isEqualTo", "assertThat", "getTypeName", "getRawType", "getParametrizedType", "getClass", "getName", "isNull", "assertThat", "getParametrizedType"]}, "focal_class": {"identifier": "ReflectionUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ReflectionUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReflectionUtil()", "full_signature": "private  ReflectionUtil()", "class_method_signature": "ReflectionUtil.ReflectionUtil()", "testcase": false, "constructor": true}, {"identifier": "getParametrizedType", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "ParameterizedType", "signature": "ParameterizedType getParametrizedType(Class<?> clazz)", "full_signature": "public static ParameterizedType getParametrizedType(Class<?> clazz)", "class_method_signature": "ReflectionUtil.getParametrizedType(Class<?> clazz)", "testcase": false, "constructor": false}], "file": "code/spi-support/src/main/java/org/apache/tamaya/spisupport/ReflectionUtil.java"}, "focal_method": {"identifier": "getParametrizedType", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "ParameterizedType", "body": "public static ParameterizedType getParametrizedType(Class<?> clazz) {\n        Type[] genericTypes = clazz.getGenericInterfaces();\n        for (Type type : genericTypes) {\n            if (type instanceof ParameterizedType) {\n                return (ParameterizedType) type;\n            }\n\n        }\n        return null;\n    }", "signature": "ParameterizedType getParametrizedType(Class<?> clazz)", "full_signature": "public static ParameterizedType getParametrizedType(Class<?> clazz)", "class_method_signature": "ReflectionUtil.getParametrizedType(Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["getGenericInterfaces"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}