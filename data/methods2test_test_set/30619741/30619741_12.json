{"test_class": {"identifier": "HttpInvokerMicroserviceProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpInvokerSilverService httpInvokerSilverService = null;", "modifier": "private", "type": "HttpInvokerSilverService", "declarator": "httpInvokerSilverService = null", "var_name": "httpInvokerSilverService"}], "file": "http-invoker-microservice-provider/src/test/java/io/silverware/microservices/providers/http/invoker/HttpInvokerMicroserviceProviderTest.java"}, "test_case": {"identifier": "testHttpInvoker", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testHttpInvoker() throws Exception {\n      final BootUtil bootUtil = new BootUtil();\n      final Map<String, Object> platformProperties = bootUtil.getContext().getProperties();\n      final Thread platform = bootUtil.getMicroservicePlatform(this.getClass().getPackage().getName(), HttpServerMicroserviceProvider.class.getPackage().getName(), CdiMicroserviceProvider.class.getPackage().getName());\n      platform.start();\n\n      while (httpInvokerSilverService == null) {\n         httpInvokerSilverService = (HttpInvokerSilverService) bootUtil.getContext().getProvider(HttpInvokerSilverService.class);\n         Thread.sleep(200);\n      }\n\n      while (bootUtil.getContext().getProperties().get(CdiSilverService.BEAN_MANAGER) == null) {\n         Thread.sleep(200);\n      }\n\n      String urlBase = \"http://\" + platformProperties.get(HttpServerSilverService.HTTP_SERVER_ADDRESS) + \":\" + platformProperties.get(HttpServerSilverService.HTTP_SERVER_PORT) + \"/\" + platformProperties.get(HttpInvokerSilverService.INVOKER_URL) + \"/\";\n\n      Assert.assertTrue(Utils.waitForHttp(urlBase, 204));\n\n      HttpURLConnection con = (HttpURLConnection) new URL(urlBase + \"query\").openConnection();\n      con.setRequestMethod(\"POST\");\n      con.setDoInput(true);\n      con.setDoOutput(true);\n      con.connect();\n\n      final MicroserviceMetaData metaData = new MicroserviceMetaData(\"sumService\", SumService.class, Collections.emptySet(), Collections.emptySet(), null, null);\n      JsonWriter jsonWriter = new JsonWriter(con.getOutputStream());\n      jsonWriter.write(metaData);\n\n      Assert.assertEquals(con.getResponseMessage(), \"OK\");\n      JsonReader jsonReader = new JsonReader(con.getInputStream());\n      final List<HttpServiceHandle> handles = (List<HttpServiceHandle>) jsonReader.readObject();\n      Assert.assertEquals(handles.size(), 1);\n\n      con.disconnect();\n\n      final HttpServiceHandle handle = handles.get(0);\n      Utils.waitForCDIProvider(bootUtil.getContext());\n      long l = (Long) handle.invoke(bootUtil.getContext(), \"sum\", new Class[] { short.class, int.class }, new Object[] { (short) 3, 4 });\n      Assert.assertEquals(l, 7L);\n\n      con = (HttpURLConnection) new URL(urlBase + \"invoke\").openConnection();\n      con.setRequestMethod(\"POST\");\n      con.setDoInput(true);\n      con.setDoOutput(true);\n      con.connect();\n\n      Invocation invocation = new Invocation(handles.get(0).getHandle(), \"sum\", new Class[] { short.class, int.class }, new Object[] { (short) 3, 4 });\n      jsonWriter = new JsonWriter(con.getOutputStream());\n      jsonWriter.write(invocation);\n      jsonReader = new JsonReader(con.getInputStream());\n      Object response = jsonReader.readObject();\n\n      Assert.assertEquals(response, 7L);\n\n      con.disconnect();\n\n      con = (HttpURLConnection) new URL(urlBase + \"invoke\").openConnection();\n      con.setRequestMethod(\"POST\");\n      con.setDoInput(true);\n      con.setDoOutput(true);\n      con.connect();\n\n      invocation = new Invocation(handles.get(0).getHandle(), \"allTypes\", new Class[] { byte.class, short.class, int.class, long.class, float.class, double.class, boolean.class, char.class }, new Object[] { Byte.MAX_VALUE, Short.MAX_VALUE, Integer.MAX_VALUE, Long.MAX_VALUE, Float.MIN_VALUE, Double.MIN_VALUE, true, 'c' });\n\n      jsonWriter = new JsonWriter(con.getOutputStream());\n      jsonWriter.write(invocation);\n      jsonReader = new JsonReader(con.getInputStream());\n      response = jsonReader.readObject();\n\n      Assert.assertEquals(response, \"9.223372036854776E18truec\");\n\n      con.disconnect();\n\n      con = (HttpURLConnection) new URL(urlBase + \"invoke\").openConnection();\n      con.setRequestMethod(\"POST\");\n      con.setDoInput(true);\n      con.setDoOutput(true);\n      con.connect();\n\n      invocation = new Invocation(handles.get(0).getHandle(), \"allTypes2\", new Class[] { Byte.class, Short.class, Integer.class, Long.class, Float.class, Double.class, Boolean.class, Character.class }, new Object[] { Byte.MAX_VALUE, Short.MAX_VALUE, Integer.MAX_VALUE, Long.MAX_VALUE, Float.MIN_VALUE, Double.MIN_VALUE, true, 'c' });\n\n      jsonWriter = new JsonWriter(con.getOutputStream());\n      jsonWriter.write(invocation);\n      jsonReader = new JsonReader(con.getInputStream());\n      response = jsonReader.readObject();\n\n      Assert.assertEquals(response, \"9.223372036854776E18truec\");\n\n      con.disconnect();\n\n      con = (HttpURLConnection) new URL(urlBase + \"invoke\").openConnection();\n      con.setRequestMethod(\"POST\");\n      con.setDoInput(true);\n      con.setDoOutput(true);\n      con.connect();\n\n      MagicBox box = new MagicBox();\n\n      invocation = new Invocation(handles.get(0).getHandle(), \"doMagic\", new Class[] { MagicBox.class }, new Object[] { box });\n\n      jsonWriter = new JsonWriter(con.getOutputStream());\n      jsonWriter.write(invocation);\n      jsonReader = new JsonReader(con.getInputStream());\n      response = jsonReader.readObject();\n\n      Assert.assertTrue(response instanceof MagicBox);\n      Assert.assertEquals((short) ((MagicBox) response).getS(), Short.MAX_VALUE);\n      Assert.assertEquals((float) ((MagicBox) response).getF(), Float.MAX_VALUE);\n\n      con.disconnect();\n\n      platform.interrupt();\n      platform.join();\n   }", "signature": "void testHttpInvoker()", "full_signature": "@Test public void testHttpInvoker()", "class_method_signature": "HttpInvokerMicroserviceProviderTest.testHttpInvoker()", "testcase": true, "constructor": false, "invocations": ["getProperties", "getContext", "getMicroservicePlatform", "getName", "getPackage", "getClass", "getName", "getPackage", "getName", "getPackage", "start", "getProvider", "getContext", "sleep", "get", "getProperties", "getContext", "sleep", "get", "get", "get", "assertTrue", "waitForHttp", "openConnection", "setRequestMethod", "setDoInput", "setDoOutput", "connect", "emptySet", "emptySet", "getOutputStream", "write", "assertEquals", "getResponseMessage", "getInputStream", "readObject", "assertEquals", "size", "disconnect", "get", "waitForCDIProvider", "getContext", "invoke", "getContext", "assertEquals", "openConnection", "setRequestMethod", "setDoInput", "setDoOutput", "connect", "getHandle", "get", "getOutputStream", "write", "getInputStream", "readObject", "assertEquals", "disconnect", "openConnection", "setRequestMethod", "setDoInput", "setDoOutput", "connect", "getHandle", "get", "getOutputStream", "write", "getInputStream", "readObject", "assertEquals", "disconnect", "openConnection", "setRequestMethod", "setDoInput", "setDoOutput", "connect", "getHandle", "get", "getOutputStream", "write", "getInputStream", "readObject", "assertEquals", "disconnect", "openConnection", "setRequestMethod", "setDoInput", "setDoOutput", "connect", "getHandle", "get", "getOutputStream", "write", "getInputStream", "readObject", "assertTrue", "assertEquals", "getS", "assertEquals", "getF", "disconnect", "interrupt", "join"]}, "focal_class": {"identifier": "HttpInvokerMicroserviceProvider", "superclass": "", "interfaces": "implements MicroserviceProvider, HttpInvokerSilverService", "fields": [{"original_string": "private static final Logger log = LogManager.getLogger(HttpInvokerMicroserviceProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LogManager.getLogger(HttpInvokerMicroserviceProvider.class)", "var_name": "log"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private HttpServerSilverService http;", "modifier": "private", "type": "HttpServerSilverService", "declarator": "http", "var_name": "http"}], "methods": [{"identifier": "initialize", "parameters": "(final Context context)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(final Context context)", "full_signature": "@Override public void initialize(final Context context)", "class_method_signature": "HttpInvokerMicroserviceProvider.initialize(final Context context)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "@Override public", "return": "Context", "signature": "Context getContext()", "full_signature": "@Override public Context getContext()", "class_method_signature": "HttpInvokerMicroserviceProvider.getContext()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "HttpInvokerMicroserviceProvider.run()", "testcase": false, "constructor": false}, {"identifier": "getServletDescriptor", "parameters": "()", "modifiers": "private", "return": "ServletDescriptor", "signature": "ServletDescriptor getServletDescriptor()", "full_signature": "private ServletDescriptor getServletDescriptor()", "class_method_signature": "HttpInvokerMicroserviceProvider.getServletDescriptor()", "testcase": false, "constructor": false}], "file": "http-invoker-microservice-provider/src/main/java/io/silverware/microservices/providers/http/invoker/HttpInvokerMicroserviceProvider.java"}, "focal_method": {"identifier": "getContext", "parameters": "()", "modifiers": "@Override public", "return": "Context", "body": "@Override\n   public Context getContext() {\n      return context;\n   }", "signature": "Context getContext()", "full_signature": "@Override public Context getContext()", "class_method_signature": "HttpInvokerMicroserviceProvider.getContext()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 30619741, "url": "https://github.com/SilverThings/SilverWare", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 21, "size": 3333, "license": "licensed"}}