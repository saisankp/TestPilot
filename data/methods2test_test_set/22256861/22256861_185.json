{"test_class": {"identifier": "SlstrLevel1ProductFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-sentinel3-reader/src/test/java/org/esa/s3tbx/dataio/s3/slstr/SlstrLevel1ProductFactoryTest.java"}, "test_case": {"identifier": "testGetResolutionInKm_invalidNameEnding", "parameters": "()", "modifiers": "@SuppressWarnings(\"ResultOfMethodCallIgnored\") @Test public", "return": "void", "body": "@SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Test\n    public void testGetResolutionInKm_invalidNameEnding() {\n        try {\n            SlstrLevel1ProductFactory.getResolutionInKm(\"heffalump\");\n            fail(\"IllegalArgumentException expected\");\n        } catch (IllegalArgumentException expected) {\n        }\n    }", "signature": "void testGetResolutionInKm_invalidNameEnding()", "full_signature": "@SuppressWarnings(\"ResultOfMethodCallIgnored\") @Test public void testGetResolutionInKm_invalidNameEnding()", "class_method_signature": "SlstrLevel1ProductFactoryTest.testGetResolutionInKm_invalidNameEnding()", "testcase": true, "constructor": false, "invocations": ["getResolutionInKm", "fail"]}, "focal_class": {"identifier": "SlstrLevel1ProductFactory", "superclass": "extends SlstrProductFactory", "interfaces": "", "fields": [{"original_string": "public final static String SLSTR_L1B_USE_PIXELGEOCODINGS = \"s3tbx.reader.slstrl1b.pixelGeoCodings\";", "modifier": "public final static", "type": "String", "declarator": "SLSTR_L1B_USE_PIXELGEOCODINGS = \"s3tbx.reader.slstrl1b.pixelGeoCodings\"", "var_name": "SLSTR_L1B_USE_PIXELGEOCODINGS"}, {"original_string": "private final static String SLSTR_L1B_PIXEL_GEOCODING_FORWARD = \"s3tbx.reader.slstrl1b.pixelGeoCodings.forward\";", "modifier": "private final static", "type": "String", "declarator": "SLSTR_L1B_PIXEL_GEOCODING_FORWARD = \"s3tbx.reader.slstrl1b.pixelGeoCodings.forward\"", "var_name": "SLSTR_L1B_PIXEL_GEOCODING_FORWARD"}, {"original_string": "private final static String SLSTR_L1B_PIXEL_GEOCODING_INVERSE = \"s3tbx.reader.slstrl1b.pixelGeoCodings.inverse\";", "modifier": "private final static", "type": "String", "declarator": "SLSTR_L1B_PIXEL_GEOCODING_INVERSE = \"s3tbx.reader.slstrl1b.pixelGeoCodings.inverse\"", "var_name": "SLSTR_L1B_PIXEL_GEOCODING_INVERSE"}, {"original_string": "public final static String SLSTR_L1B_LOAD_ORPHAN_PIXELS = \"s3tbx.reader.slstrl1b.loadOrphanPixels\";", "modifier": "public final static", "type": "String", "declarator": "SLSTR_L1B_LOAD_ORPHAN_PIXELS = \"s3tbx.reader.slstrl1b.loadOrphanPixels\"", "var_name": "SLSTR_L1B_LOAD_ORPHAN_PIXELS"}, {"original_string": "public final static String SLSTR_L1B_CUSTOM_CALIBRATION = \"s3tbx.reader.slstrl1b.applyCustomCalibration\";", "modifier": "public final static", "type": "String", "declarator": "SLSTR_L1B_CUSTOM_CALIBRATION = \"s3tbx.reader.slstrl1b.applyCustomCalibration\"", "var_name": "SLSTR_L1B_CUSTOM_CALIBRATION"}, {"original_string": "public final static String SLSTR_L1B_S3MPC_CALIBRATION = \"s3tbx.reader.slstrl1b.applyS3MPCCalibration\";", "modifier": "public final static", "type": "String", "declarator": "SLSTR_L1B_S3MPC_CALIBRATION = \"s3tbx.reader.slstrl1b.applyS3MPCCalibration\"", "var_name": "SLSTR_L1B_S3MPC_CALIBRATION"}, {"original_string": "private final static String SLSTR_L1B_CALIBRATION_PATTERN = \"s3tbx.reader.slstrl1b.ID.calibration.TYPE\";", "modifier": "private final static", "type": "String", "declarator": "SLSTR_L1B_CALIBRATION_PATTERN = \"s3tbx.reader.slstrl1b.ID.calibration.TYPE\"", "var_name": "SLSTR_L1B_CALIBRATION_PATTERN"}, {"original_string": "private final static double SLSTR_L1B_S3MPC_S5_NADIR_ADJUSTMENT_FACTOR = 1.12;", "modifier": "private final static", "type": "double", "declarator": "SLSTR_L1B_S3MPC_S5_NADIR_ADJUSTMENT_FACTOR = 1.12", "var_name": "SLSTR_L1B_S3MPC_S5_NADIR_ADJUSTMENT_FACTOR"}, {"original_string": "private final static double SLSTR_L1B_S3MPC_S6_NADIR_ADJUSTMENT_FACTOR = 1.13;", "modifier": "private final static", "type": "double", "declarator": "SLSTR_L1B_S3MPC_S6_NADIR_ADJUSTMENT_FACTOR = 1.13", "var_name": "SLSTR_L1B_S3MPC_S6_NADIR_ADJUSTMENT_FACTOR"}, {"original_string": "private final static double SLSTR_L1B_S3MPC_S5_OBLIQUE_ADJUSTMENT_FACTOR = 1.15;", "modifier": "private final static", "type": "double", "declarator": "SLSTR_L1B_S3MPC_S5_OBLIQUE_ADJUSTMENT_FACTOR = 1.15", "var_name": "SLSTR_L1B_S3MPC_S5_OBLIQUE_ADJUSTMENT_FACTOR"}, {"original_string": "private final static double SLSTR_L1B_S3MPC_S6_OBLIQUE_ADJUSTMENT_FACTOR = 1.14;", "modifier": "private final static", "type": "double", "declarator": "SLSTR_L1B_S3MPC_S6_OBLIQUE_ADJUSTMENT_FACTOR = 1.14", "var_name": "SLSTR_L1B_S3MPC_S6_OBLIQUE_ADJUSTMENT_FACTOR"}, {"original_string": "private final static String[] EXCLUDED_IDS = new String[]{\n            \"ADFData\"\n    };", "modifier": "private final static", "type": "String[]", "declarator": "EXCLUDED_IDS = new String[]{\n            \"ADFData\"\n    }", "var_name": "EXCLUDED_IDS"}, {"original_string": "private final Map<String, String> gridTypeToGridIndex;", "modifier": "private final", "type": "Map<String, String>", "declarator": "gridTypeToGridIndex", "var_name": "gridTypeToGridIndex"}, {"original_string": "private final Map<String, Double> gridIndexToTrackOffset;", "modifier": "private final", "type": "Map<String, Double>", "declarator": "gridIndexToTrackOffset", "var_name": "gridIndexToTrackOffset"}, {"original_string": "private final Map<String, Double> gridIndexToStartOffset;", "modifier": "private final", "type": "Map<String, Double>", "declarator": "gridIndexToStartOffset", "var_name": "gridIndexToStartOffset"}, {"original_string": "private Map<String, Float> nameToWavelengthMap;", "modifier": "private", "type": "Map<String, Float>", "declarator": "nameToWavelengthMap", "var_name": "nameToWavelengthMap"}, {"original_string": "private Map<String, Float> nameToBandwidthMap;", "modifier": "private", "type": "Map<String, Float>", "declarator": "nameToBandwidthMap", "var_name": "nameToBandwidthMap"}, {"original_string": "private Map<String, Integer> nameToIndexMap;", "modifier": "private", "type": "Map<String, Integer>", "declarator": "nameToIndexMap", "var_name": "nameToIndexMap"}, {"original_string": "private Map<String, GeoCoding> geoCodingMap;", "modifier": "private", "type": "Map<String, GeoCoding>", "declarator": "geoCodingMap", "var_name": "geoCodingMap"}, {"original_string": "private List<NetcdfFile> netcdfFileList;", "modifier": "private", "type": "List<NetcdfFile>", "declarator": "netcdfFileList", "var_name": "netcdfFileList"}], "methods": [{"identifier": "SlstrLevel1ProductFactory", "parameters": "(Sentinel3ProductReader productReader)", "modifiers": "public", "return": "", "signature": " SlstrLevel1ProductFactory(Sentinel3ProductReader productReader)", "full_signature": "public  SlstrLevel1ProductFactory(Sentinel3ProductReader productReader)", "class_method_signature": "SlstrLevel1ProductFactory.SlstrLevel1ProductFactory(Sentinel3ProductReader productReader)", "testcase": false, "constructor": true}, {"identifier": "getStartOffset", "parameters": "(String gridIndex)", "modifiers": "protected", "return": "Double", "signature": "Double getStartOffset(String gridIndex)", "full_signature": "protected Double getStartOffset(String gridIndex)", "class_method_signature": "SlstrLevel1ProductFactory.getStartOffset(String gridIndex)", "testcase": false, "constructor": false}, {"identifier": "getTrackOffset", "parameters": "(String gridIndex)", "modifiers": "protected", "return": "Double", "signature": "Double getTrackOffset(String gridIndex)", "full_signature": "protected Double getTrackOffset(String gridIndex)", "class_method_signature": "SlstrLevel1ProductFactory.getTrackOffset(String gridIndex)", "testcase": false, "constructor": false}, {"identifier": "getProductSpecificMetadataElementName", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getProductSpecificMetadataElementName()", "full_signature": "protected String getProductSpecificMetadataElementName()", "class_method_signature": "SlstrLevel1ProductFactory.getProductSpecificMetadataElementName()", "testcase": false, "constructor": false}, {"identifier": "processProductSpecificMetadata", "parameters": "(MetadataElement metadataElement)", "modifiers": "@Override protected", "return": "void", "signature": "void processProductSpecificMetadata(MetadataElement metadataElement)", "full_signature": "@Override protected void processProductSpecificMetadata(MetadataElement metadataElement)", "class_method_signature": "SlstrLevel1ProductFactory.processProductSpecificMetadata(MetadataElement metadataElement)", "testcase": false, "constructor": false}, {"identifier": "addProductSpecificMetadata", "parameters": "(Product targetProduct)", "modifiers": "protected", "return": "void", "signature": "void addProductSpecificMetadata(Product targetProduct)", "full_signature": "protected void addProductSpecificMetadata(Product targetProduct)", "class_method_signature": "SlstrLevel1ProductFactory.addProductSpecificMetadata(Product targetProduct)", "testcase": false, "constructor": false}, {"identifier": "configureTargetNode", "parameters": "(Band sourceBand, RasterDataNode targetNode)", "modifiers": "@Override protected", "return": "void", "signature": "void configureTargetNode(Band sourceBand, RasterDataNode targetNode)", "full_signature": "@Override protected void configureTargetNode(Band sourceBand, RasterDataNode targetNode)", "class_method_signature": "SlstrLevel1ProductFactory.configureTargetNode(Band sourceBand, RasterDataNode targetNode)", "testcase": false, "constructor": false}, {"identifier": "applyFactorAndOffset", "parameters": "(RasterDataNode targetNode)", "modifiers": "private", "return": "void", "signature": "void applyFactorAndOffset(RasterDataNode targetNode)", "full_signature": "private void applyFactorAndOffset(RasterDataNode targetNode)", "class_method_signature": "SlstrLevel1ProductFactory.applyFactorAndOffset(RasterDataNode targetNode)", "testcase": false, "constructor": false}, {"identifier": "getCalibrationOffset", "parameters": "(String sourceBandName)", "modifiers": "private", "return": "double", "signature": "double getCalibrationOffset(String sourceBandName)", "full_signature": "private double getCalibrationOffset(String sourceBandName)", "class_method_signature": "SlstrLevel1ProductFactory.getCalibrationOffset(String sourceBandName)", "testcase": false, "constructor": false}, {"identifier": "getCalibrationFactor", "parameters": "(String sourceBandName)", "modifiers": "private", "return": "double", "signature": "double getCalibrationFactor(String sourceBandName)", "full_signature": "private double getCalibrationFactor(String sourceBandName)", "class_method_signature": "SlstrLevel1ProductFactory.getCalibrationFactor(String sourceBandName)", "testcase": false, "constructor": false}, {"identifier": "getCalibrationAdjustmentFactor", "parameters": "(String sourceBandName)", "modifiers": "private", "return": "double", "signature": "double getCalibrationAdjustmentFactor(String sourceBandName)", "full_signature": "private double getCalibrationAdjustmentFactor(String sourceBandName)", "class_method_signature": "SlstrLevel1ProductFactory.getCalibrationAdjustmentFactor(String sourceBandName)", "testcase": false, "constructor": false}, {"identifier": "getS3MPCAdjustmentFactor", "parameters": "(String sourceBandName)", "modifiers": "private", "return": "double", "signature": "double getS3MPCAdjustmentFactor(String sourceBandName)", "full_signature": "private double getS3MPCAdjustmentFactor(String sourceBandName)", "class_method_signature": "SlstrLevel1ProductFactory.getS3MPCAdjustmentFactor(String sourceBandName)", "testcase": false, "constructor": false}, {"identifier": "configureDescription", "parameters": "(Band sourceBand, RasterDataNode targetNode)", "modifiers": "protected", "return": "void", "signature": "void configureDescription(Band sourceBand, RasterDataNode targetNode)", "full_signature": "protected void configureDescription(Band sourceBand, RasterDataNode targetNode)", "class_method_signature": "SlstrLevel1ProductFactory.configureDescription(Band sourceBand, RasterDataNode targetNode)", "testcase": false, "constructor": false}, {"identifier": "getFileNames", "parameters": "(Manifest manifest)", "modifiers": "@Override protected", "return": "List<String>", "signature": "List<String> getFileNames(Manifest manifest)", "full_signature": "@Override protected List<String> getFileNames(Manifest manifest)", "class_method_signature": "SlstrLevel1ProductFactory.getFileNames(Manifest manifest)", "testcase": false, "constructor": false}, {"identifier": "findMasterProduct", "parameters": "()", "modifiers": "@Override protected", "return": "Product", "signature": "Product findMasterProduct()", "full_signature": "@Override protected Product findMasterProduct()", "class_method_signature": "SlstrLevel1ProductFactory.findMasterProduct()", "testcase": false, "constructor": false}, {"identifier": "addDataNodes", "parameters": "(Product masterProduct, Product targetProduct)", "modifiers": "@Override protected", "return": "void", "signature": "void addDataNodes(Product masterProduct, Product targetProduct)", "full_signature": "@Override protected void addDataNodes(Product masterProduct, Product targetProduct)", "class_method_signature": "SlstrLevel1ProductFactory.addDataNodes(Product masterProduct, Product targetProduct)", "testcase": false, "constructor": false}, {"identifier": "addSpecialNode", "parameters": "(Product masterProduct, Band sourceBand, Product targetProduct)", "modifiers": "@Override protected", "return": "RasterDataNode", "signature": "RasterDataNode addSpecialNode(Product masterProduct, Band sourceBand, Product targetProduct)", "full_signature": "@Override protected RasterDataNode addSpecialNode(Product masterProduct, Band sourceBand, Product targetProduct)", "class_method_signature": "SlstrLevel1ProductFactory.addSpecialNode(Product masterProduct, Band sourceBand, Product targetProduct)", "testcase": false, "constructor": false}, {"identifier": "getAutoGroupingString", "parameters": "(Product[] sourceProducts)", "modifiers": "@Override protected", "return": "String", "signature": "String getAutoGroupingString(Product[] sourceProducts)", "full_signature": "@Override protected String getAutoGroupingString(Product[] sourceProducts)", "class_method_signature": "SlstrLevel1ProductFactory.getAutoGroupingString(Product[] sourceProducts)", "testcase": false, "constructor": false}, {"identifier": "setAutoGrouping", "parameters": "(Product[] sourceProducts, Product targetProduct)", "modifiers": "@Override protected", "return": "void", "signature": "void setAutoGrouping(Product[] sourceProducts, Product targetProduct)", "full_signature": "@Override protected void setAutoGrouping(Product[] sourceProducts, Product targetProduct)", "class_method_signature": "SlstrLevel1ProductFactory.setAutoGrouping(Product[] sourceProducts, Product targetProduct)", "testcase": false, "constructor": false}, {"identifier": "setSceneTransforms", "parameters": "(Product product)", "modifiers": "@Override protected", "return": "void", "signature": "void setSceneTransforms(Product product)", "full_signature": "@Override protected void setSceneTransforms(Product product)", "class_method_signature": "SlstrLevel1ProductFactory.setSceneTransforms(Product product)", "testcase": false, "constructor": false}, {"identifier": "setBandGeoCodings", "parameters": "(Product product)", "modifiers": "@Override protected", "return": "void", "signature": "void setBandGeoCodings(Product product)", "full_signature": "@Override protected void setBandGeoCodings(Product product)", "class_method_signature": "SlstrLevel1ProductFactory.setBandGeoCodings(Product product)", "testcase": false, "constructor": false}, {"identifier": "isOrphanPixelsAllowed", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isOrphanPixelsAllowed()", "full_signature": "protected boolean isOrphanPixelsAllowed()", "class_method_signature": "SlstrLevel1ProductFactory.isOrphanPixelsAllowed()", "testcase": false, "constructor": false}, {"identifier": "applyCustomCalibration", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean applyCustomCalibration()", "full_signature": "private boolean applyCustomCalibration()", "class_method_signature": "SlstrLevel1ProductFactory.applyCustomCalibration()", "testcase": false, "constructor": false}, {"identifier": "applyS3MPCCalibration", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean applyS3MPCCalibration()", "full_signature": "private boolean applyS3MPCCalibration()", "class_method_signature": "SlstrLevel1ProductFactory.applyS3MPCCalibration()", "testcase": false, "constructor": false}, {"identifier": "loadOrphanPixelBands", "parameters": "(Product targetProduct, final Product sourceProduct)", "modifiers": "protected", "return": "void", "signature": "void loadOrphanPixelBands(Product targetProduct, final Product sourceProduct)", "full_signature": "protected void loadOrphanPixelBands(Product targetProduct, final Product sourceProduct)", "class_method_signature": "SlstrLevel1ProductFactory.loadOrphanPixelBands(Product targetProduct, final Product sourceProduct)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "SlstrLevel1ProductFactory.dispose()", "testcase": false, "constructor": false}, {"identifier": "getResolutionInKm", "parameters": "(String nameEnd)", "modifiers": "static", "return": "double", "signature": "double getResolutionInKm(String nameEnd)", "full_signature": "static double getResolutionInKm(String nameEnd)", "class_method_signature": "SlstrLevel1ProductFactory.getResolutionInKm(String nameEnd)", "testcase": false, "constructor": false}, {"identifier": "setTiePointBandGeoCodings", "parameters": "(Product product)", "modifiers": "private", "return": "void", "signature": "void setTiePointBandGeoCodings(Product product)", "full_signature": "private void setTiePointBandGeoCodings(Product product)", "class_method_signature": "SlstrLevel1ProductFactory.setTiePointBandGeoCodings(Product product)", "testcase": false, "constructor": false}, {"identifier": "setTiePointBandGeoCoding", "parameters": "(Product product, Band band, String gridIndex)", "modifiers": "private", "return": "void", "signature": "void setTiePointBandGeoCoding(Product product, Band band, String gridIndex)", "full_signature": "private void setTiePointBandGeoCoding(Product product, Band band, String gridIndex)", "class_method_signature": "SlstrLevel1ProductFactory.setTiePointBandGeoCoding(Product product, Band band, String gridIndex)", "testcase": false, "constructor": false}, {"identifier": "setPixelBandGeoCodings", "parameters": "(Product product)", "modifiers": "private", "return": "void", "signature": "void setPixelBandGeoCodings(Product product)", "full_signature": "private void setPixelBandGeoCodings(Product product)", "class_method_signature": "SlstrLevel1ProductFactory.setPixelBandGeoCodings(Product product)", "testcase": false, "constructor": false}, {"identifier": "getBandGeoCoding", "parameters": "(Product product, String nameEnd)", "modifiers": "private", "return": "GeoCoding", "signature": "GeoCoding getBandGeoCoding(Product product, String nameEnd)", "full_signature": "private GeoCoding getBandGeoCoding(Product product, String nameEnd)", "class_method_signature": "SlstrLevel1ProductFactory.getBandGeoCoding(Product product, String nameEnd)", "testcase": false, "constructor": false}, {"identifier": "getGeolocationVariableNames", "parameters": "(String extension)", "modifiers": "static", "return": "String[]", "signature": "String[] getGeolocationVariableNames(String extension)", "full_signature": "static String[] getGeolocationVariableNames(String extension)", "class_method_signature": "SlstrLevel1ProductFactory.getGeolocationVariableNames(String extension)", "testcase": false, "constructor": false}, {"identifier": "getGridIndexFromMask", "parameters": "(Mask mask)", "modifiers": "private", "return": "String", "signature": "String getGridIndexFromMask(Mask mask)", "full_signature": "private String getGridIndexFromMask(Mask mask)", "class_method_signature": "SlstrLevel1ProductFactory.getGridIndexFromMask(Mask mask)", "testcase": false, "constructor": false}, {"identifier": "getDataType", "parameters": "(Variable variable)", "modifiers": "private", "return": "int", "signature": "int getDataType(Variable variable)", "full_signature": "private int getDataType(Variable variable)", "class_method_signature": "SlstrLevel1ProductFactory.getDataType(Variable variable)", "testcase": false, "constructor": false}], "file": "s3tbx-sentinel3-reader/src/main/java/org/esa/s3tbx/dataio/s3/slstr/SlstrLevel1ProductFactory.java"}, "focal_method": {"identifier": "getResolutionInKm", "parameters": "(String nameEnd)", "modifiers": "static", "return": "double", "body": "static double getResolutionInKm(String nameEnd) {\n        switch (nameEnd) {\n            case \"an\":\n            case \"ao\":\n            case \"bn\":\n            case \"bo\":\n            case \"cn\":\n            case \"co\":\n                return 0.5;\n\n            case \"fn\":\n            case \"fo\":\n            case \"in\":\n            case \"io\":\n                return 1.0;\n\n            default:\n                throw new IllegalArgumentException(\"Unsupported resolution on bands ending with: \" + nameEnd);\n        }\n    }", "signature": "double getResolutionInKm(String nameEnd)", "full_signature": "static double getResolutionInKm(String nameEnd)", "class_method_signature": "SlstrLevel1ProductFactory.getResolutionInKm(String nameEnd)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}