{"test_class": {"identifier": "TilesContextVariableResolverFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Request request;", "modifier": "private", "type": "Request", "declarator": "request", "var_name": "request"}, {"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private TilesContextVariableResolverFactory factory;", "modifier": "private", "type": "TilesContextVariableResolverFactory", "declarator": "factory", "var_name": "factory"}], "file": "tiles-mvel/src/test/java/org/apache/tiles/mvel/TilesContextVariableResolverFactoryTest.java"}, "test_case": {"identifier": "testCreateVariableResolver", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testCreateVariableResolver() {\n        Map<String, String> header = createMock(Map.class);\n        Map<String, Object> requestScope = new HashMap<String, Object>();\n        requestScope.put(\"one\", 1);\n        Map<String, Object> applicationScope = new HashMap<String, Object>();\n        applicationScope.put(\"two\", 2);\n\n        expect(request.getApplicationContext()).andReturn(applicationContext);\n        expect(applicationContext.getApplicationScope()).andReturn(applicationScope);\n        expect(request.getHeader()).andReturn(header);\n\n        replay(request, applicationContext, header);\n\n        VariableResolver resolver = factory.createVariableResolver(\"header\");\n        assertEquals(Map.class, resolver.getType());\n        assertEquals(header, resolver.getValue());\n        resolver = factory.createVariableResolver(\"applicationScope\");\n        assertEquals(applicationScope, resolver.getValue());\n        assertEquals(Map.class, resolver.getType());\n        verify(header);\n    }", "signature": "void testCreateVariableResolver()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testCreateVariableResolver()", "class_method_signature": "TilesContextVariableResolverFactoryTest.testCreateVariableResolver()", "testcase": true, "constructor": false, "invocations": ["createMock", "put", "put", "andReturn", "expect", "getApplicationContext", "andReturn", "expect", "getApplicationScope", "andReturn", "expect", "getHeader", "replay", "createVariableResolver", "assertEquals", "getType", "assertEquals", "getValue", "createVariableResolver", "assertEquals", "getValue", "assertEquals", "getType", "verify"]}, "focal_class": {"identifier": "TilesContextVariableResolverFactory", "superclass": "extends\n        ReadOnlyVariableResolverFactory", "interfaces": "", "fields": [{"original_string": "private CombinedBeanInfo requestBeanInfo = new CombinedBeanInfo(\n            Request.class, ApplicationContext.class);", "modifier": "private", "type": "CombinedBeanInfo", "declarator": "requestBeanInfo = new CombinedBeanInfo(\n            Request.class, ApplicationContext.class)", "var_name": "requestBeanInfo"}], "methods": [{"identifier": "TilesContextVariableResolverFactory", "parameters": "(TilesRequestContextHolder requestHolder)", "modifiers": "public", "return": "", "signature": " TilesContextVariableResolverFactory(TilesRequestContextHolder requestHolder)", "full_signature": "public  TilesContextVariableResolverFactory(TilesRequestContextHolder requestHolder)", "class_method_signature": "TilesContextVariableResolverFactory.TilesContextVariableResolverFactory(TilesRequestContextHolder requestHolder)", "testcase": false, "constructor": true}, {"identifier": "isTarget", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean isTarget(String name)", "full_signature": "public boolean isTarget(String name)", "class_method_signature": "TilesContextVariableResolverFactory.isTarget(String name)", "testcase": false, "constructor": false}, {"identifier": "createVariableResolver", "parameters": "(String name)", "modifiers": "@Override public", "return": "VariableResolver", "signature": "VariableResolver createVariableResolver(String name)", "full_signature": "@Override public VariableResolver createVariableResolver(String name)", "class_method_signature": "TilesContextVariableResolverFactory.createVariableResolver(String name)", "testcase": false, "constructor": false}], "file": "tiles-mvel/src/main/java/org/apache/tiles/mvel/TilesContextVariableResolverFactory.java"}, "focal_method": {"identifier": "createVariableResolver", "parameters": "(String name)", "modifiers": "@Override public", "return": "VariableResolver", "body": "@Override\n    public VariableResolver createVariableResolver(String name) {\n        VariableResolver resolver = null;\n        PropertyDescriptor descriptor = requestBeanInfo.getMappedDescriptors(Request.class).get(name);\n        if (descriptor != null) {\n            resolver = new RequestVariableResolver(name, descriptor);\n        } else {\n            descriptor = requestBeanInfo.getMappedDescriptors(ApplicationContext.class).get(name);\n            if (descriptor != null) {\n                resolver = new ApplicationVariableResolver(name, descriptor);\n            }\n        }\n        return resolver;\n    }", "signature": "VariableResolver createVariableResolver(String name)", "full_signature": "@Override public VariableResolver createVariableResolver(String name)", "class_method_signature": "TilesContextVariableResolverFactory.createVariableResolver(String name)", "testcase": false, "constructor": false, "invocations": ["get", "getMappedDescriptors", "get", "getMappedDescriptors"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}