{"test_class": {"identifier": "TestDrngImpl", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DrngImpl drng;", "modifier": "private", "type": "DrngImpl", "declarator": "drng", "var_name": "drng"}], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestDrngImpl.java"}, "test_case": {"identifier": "testNextBit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNextBit() {\n    int iterations = 1000;\n\n    int trueCount = 0;\n    int falseCount = 0;\n    for (int i = 0; i < iterations; i++) {\n      boolean currentRand = drng.nextBit();\n      if (currentRand) {\n        trueCount++;\n      } else {\n        falseCount++;\n      }\n    }\n    // Sanity check the randomness, by verifying that there are both true and false values returned\n    assertTrue(trueCount > iterations / 10);\n    assertTrue(falseCount > iterations / 10);\n  }", "signature": "void testNextBit()", "full_signature": "@Test public void testNextBit()", "class_method_signature": "TestDrngImpl.testNextBit()", "testcase": true, "constructor": false, "invocations": ["nextBit", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "DrngImpl", "superclass": "", "interfaces": "implements Drng", "fields": [{"original_string": "private static final int RANDOMBUFFER_SIZE = 16;", "modifier": "private static final", "type": "int", "declarator": "RANDOMBUFFER_SIZE = 16", "var_name": "RANDOMBUFFER_SIZE"}, {"original_string": "private Drbg drbg;", "modifier": "private", "type": "Drbg", "declarator": "drbg", "var_name": "drbg"}, {"original_string": "private byte[] randomBytes = new byte[RANDOMBUFFER_SIZE];", "modifier": "private", "type": "byte[]", "declarator": "randomBytes = new byte[RANDOMBUFFER_SIZE]", "var_name": "randomBytes"}, {"original_string": "private int bitsLeft = 0;", "modifier": "private", "type": "int", "declarator": "bitsLeft = 0", "var_name": "bitsLeft"}], "methods": [{"identifier": "DrngImpl", "parameters": "(Drbg drbg)", "modifiers": "public", "return": "", "signature": " DrngImpl(Drbg drbg)", "full_signature": "public  DrngImpl(Drbg drbg)", "class_method_signature": "DrngImpl.DrngImpl(Drbg drbg)", "testcase": false, "constructor": true}, {"identifier": "nextInt", "parameters": "(int limit)", "modifiers": "@Override public", "return": "int", "signature": "int nextInt(int limit)", "full_signature": "@Override public int nextInt(int limit)", "class_method_signature": "DrngImpl.nextInt(int limit)", "testcase": false, "constructor": false}, {"identifier": "nextLong", "parameters": "(long limit)", "modifiers": "@Override public", "return": "long", "signature": "long nextLong(long limit)", "full_signature": "@Override public long nextLong(long limit)", "class_method_signature": "DrngImpl.nextLong(long limit)", "testcase": false, "constructor": false}, {"identifier": "nextBigInteger", "parameters": "(BigInteger limit)", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger nextBigInteger(BigInteger limit)", "full_signature": "@Override public BigInteger nextBigInteger(BigInteger limit)", "class_method_signature": "DrngImpl.nextBigInteger(BigInteger limit)", "testcase": false, "constructor": false}, {"identifier": "nextBit", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean nextBit()", "full_signature": "@Override public boolean nextBit()", "class_method_signature": "DrngImpl.nextBit()", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(int bitSize)", "modifiers": "private", "return": "byte[]", "signature": "byte[] getBytes(int bitSize)", "full_signature": "private byte[] getBytes(int bitSize)", "class_method_signature": "DrngImpl.getBytes(int bitSize)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/DrngImpl.java"}, "focal_method": {"identifier": "nextBit", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean nextBit() {\n    if (bitsLeft == 0) {\n      drbg.nextBytes(randomBytes);\n      bitsLeft = RANDOMBUFFER_SIZE * Byte.SIZE;\n    }\n    int index = RANDOMBUFFER_SIZE * Byte.SIZE - bitsLeft;\n    byte currentByte = randomBytes[index / (Byte.SIZE)];\n    byte currentBit = (byte) (currentByte >> (index % (Byte.SIZE)));\n    bitsLeft--;\n    return currentBit == 0x00 ? false : true;\n  }", "signature": "boolean nextBit()", "full_signature": "@Override public boolean nextBit()", "class_method_signature": "DrngImpl.nextBit()", "testcase": false, "constructor": false, "invocations": ["nextBytes"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}