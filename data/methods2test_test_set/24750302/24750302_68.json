{"test_class": {"identifier": "DefaultNodeMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private INodeMatcherPlugin nodeMatcher;", "modifier": "private", "type": "INodeMatcherPlugin", "declarator": "nodeMatcher", "var_name": "nodeMatcher"}, {"original_string": "private NodeType computeNodeType;", "modifier": "private", "type": "NodeType", "declarator": "computeNodeType", "var_name": "computeNodeType"}, {"original_string": "private NodeTemplate computeNodeTemplate;", "modifier": "private", "type": "NodeTemplate", "declarator": "computeNodeTemplate", "var_name": "computeNodeTemplate"}, {"original_string": "private LocationResources locationResources;", "modifier": "private", "type": "LocationResources", "declarator": "locationResources", "var_name": "locationResources"}], "file": "alien4cloud-core/src/test/java/alien4cloud/deployment/matching/services/nodes/DefaultNodeMatcherTest.java"}, "test_case": {"identifier": "concrete_template_cannot_be_matched_even_if_service_is_available", "parameters": "()", "modifiers": "@Test @Ignore // we do matching even on concrete nodes public", "return": "void", "body": "@Test\n    @Ignore // we do matching even on concrete nodes\n    public void concrete_template_cannot_be_matched_even_if_service_is_available() throws Exception {\n        // Given\n        Map<String, MatchingConfiguration> emptyMatchingConfigurations = new HashMap<>();\n\n        // When\n        NodeTemplate wantedNodeTemplate = nodeTemplate(\"test.nodes.DB\");\n\n        NodeType wantedNodeType = new NodeType();\n        wantedNodeType.setAbstract(false);\n\n        List<LocationResourceTemplate> proposition = nodeMatcher.matchNode(wantedNodeTemplate, wantedNodeType, locationResources, emptyMatchingConfigurations);\n\n        // Then\n        assertThat(proposition).hasSize(0);\n    }", "signature": "void concrete_template_cannot_be_matched_even_if_service_is_available()", "full_signature": "@Test @Ignore // we do matching even on concrete nodes public void concrete_template_cannot_be_matched_even_if_service_is_available()", "class_method_signature": "DefaultNodeMatcherTest.concrete_template_cannot_be_matched_even_if_service_is_available()", "testcase": true, "constructor": false, "invocations": ["nodeTemplate", "setAbstract", "matchNode", "hasSize", "assertThat"]}, "focal_class": {"identifier": "DefaultNodeMatcher", "superclass": "extends AbstractTemplateMatcher<LocationResourceTemplate, NodeTemplate, NodeType>", "interfaces": "implements INodeMatcherPlugin", "fields": [], "methods": [{"identifier": "matchNode", "parameters": "(NodeTemplate nodeTemplate, NodeType nodeType, LocationResources locationResources,\n            Map<String, MatchingConfiguration> matchingConfigurations)", "modifiers": "public", "return": "List<LocationResourceTemplate>", "signature": "List<LocationResourceTemplate> matchNode(NodeTemplate nodeTemplate, NodeType nodeType, LocationResources locationResources,\n            Map<String, MatchingConfiguration> matchingConfigurations)", "full_signature": "public List<LocationResourceTemplate> matchNode(NodeTemplate nodeTemplate, NodeType nodeType, LocationResources locationResources,\n            Map<String, MatchingConfiguration> matchingConfigurations)", "class_method_signature": "DefaultNodeMatcher.matchNode(NodeTemplate nodeTemplate, NodeType nodeType, LocationResources locationResources,\n            Map<String, MatchingConfiguration> matchingConfigurations)", "testcase": false, "constructor": false}, {"identifier": "typeSpecificMatching", "parameters": "(NodeTemplate abstractTemplate, LocationResourceTemplate candidate, NodeType candidateType,\n            LocationResources locationResources, MatchingConfiguration matchingConfiguration)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean typeSpecificMatching(NodeTemplate abstractTemplate, LocationResourceTemplate candidate, NodeType candidateType,\n            LocationResources locationResources, MatchingConfiguration matchingConfiguration)", "full_signature": "@Override protected boolean typeSpecificMatching(NodeTemplate abstractTemplate, LocationResourceTemplate candidate, NodeType candidateType,\n            LocationResources locationResources, MatchingConfiguration matchingConfiguration)", "class_method_signature": "DefaultNodeMatcher.typeSpecificMatching(NodeTemplate abstractTemplate, LocationResourceTemplate candidate, NodeType candidateType,\n            LocationResources locationResources, MatchingConfiguration matchingConfiguration)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/alien4cloud/deployment/matching/services/nodes/DefaultNodeMatcher.java"}, "focal_method": {"identifier": "matchNode", "parameters": "(NodeTemplate nodeTemplate, NodeType nodeType, LocationResources locationResources,\n            Map<String, MatchingConfiguration> matchingConfigurations)", "modifiers": "public", "return": "List<LocationResourceTemplate>", "body": "public List<LocationResourceTemplate> matchNode(NodeTemplate nodeTemplate, NodeType nodeType, LocationResources locationResources,\n            Map<String, MatchingConfiguration> matchingConfigurations) {\n        return super.match(nodeTemplate, nodeType, locationResources.getNodeTemplates(), locationResources.getNodeTypes(), locationResources,\n                matchingConfigurations);\n    }", "signature": "List<LocationResourceTemplate> matchNode(NodeTemplate nodeTemplate, NodeType nodeType, LocationResources locationResources,\n            Map<String, MatchingConfiguration> matchingConfigurations)", "full_signature": "public List<LocationResourceTemplate> matchNode(NodeTemplate nodeTemplate, NodeType nodeType, LocationResources locationResources,\n            Map<String, MatchingConfiguration> matchingConfigurations)", "class_method_signature": "DefaultNodeMatcher.matchNode(NodeTemplate nodeTemplate, NodeType nodeType, LocationResources locationResources,\n            Map<String, MatchingConfiguration> matchingConfigurations)", "testcase": false, "constructor": false, "invocations": ["match", "getNodeTemplates", "getNodeTypes"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}