{"test_class": {"identifier": "AttributeComparatorTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "advanced/attributes/src/test/java/org/arakhne/afc/attrs/attr/AttributeComparatorTest.java"}, "test_case": {"identifier": "compare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void compare() {\n\t\tAttributeComparator comp = new AttributeComparator();\n\t\t\n\t\tfor(int i=5; i<50; ++i) {\n\t\t\tString name1 = randomString();\n\t\t\tString name2 = randomString();\n\t\t\tString msg = \"(\"+name1+\"<=>\"+name2+\")\";    //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n\t\t\tint cmpResult = name1.compareTo(name2);\n\t\t\t\n\t\t\tAttribute attr1 = new AttributeImpl(name1,1);\n\t\t\tAttribute attr2 = new AttributeImpl(name2,1);\n\t\t\tAttribute attr3 = new AttributeImpl(name1,1);\n\t\t\tAttribute attr4 = new AttributeImpl(name1,2);\n\t\t\t\n\t\t\tassertEquals(0,comp.compare(attr1, attr1), msg);\n\t\t\tassertEquals(cmpResult,comp.compare(attr1, attr2), msg);\n\t\t\tassertEquals(0,comp.compare(attr1, attr3), msg);\n\t\t\tassertStrictlyNegative(comp.compare(attr1, attr4), msg);\n\t\t\t\n\t\t\tassertEquals(-cmpResult,comp.compare(attr2, attr1), msg);\n\t\t\tassertEquals(0,comp.compare(attr2, attr2), msg);\n\t\t\tassertEquals(-cmpResult,comp.compare(attr2, attr3), msg);\n\t\t\tassertEquals(-cmpResult,comp.compare(attr2, attr4), msg);\n\n\t\t\tassertEquals(0,comp.compare(attr3, attr1), msg);\n\t\t\tassertEquals(cmpResult,comp.compare(attr3, attr2), msg);\n\t\t\tassertEquals(0,comp.compare(attr3, attr3), msg);\n\t\t\tassertStrictlyNegative(comp.compare(attr3, attr4), msg);\n\n\t\t\tassertStrictlyPositive(comp.compare(attr4, attr1), msg);\n\t\t\tassertEquals(cmpResult,comp.compare(attr4, attr2), msg);\n\t\t\tassertStrictlyPositive(comp.compare(attr4, attr3), msg);\n\t\t\tassertEquals(0,comp.compare(attr4, attr4), msg);\n\t\t}\n\t}", "signature": "void compare()", "full_signature": "@Test public void compare()", "class_method_signature": "AttributeComparatorTest.compare()", "testcase": true, "constructor": false, "invocations": ["randomString", "randomString", "compareTo", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertStrictlyNegative", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertStrictlyNegative", "compare", "assertStrictlyPositive", "compare", "assertEquals", "compare", "assertStrictlyPositive", "compare", "assertEquals", "compare"]}, "focal_class": {"identifier": "AttributeComparator", "superclass": "", "interfaces": "implements Comparator<Attribute>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -5930539797174658160L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5930539797174658160L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "compare", "parameters": "(AttributeValue arg0, AttributeValue arg1)", "modifiers": "@Pure public", "return": "int", "signature": "int compare(AttributeValue arg0, AttributeValue arg1)", "full_signature": "@Pure public int compare(AttributeValue arg0, AttributeValue arg1)", "class_method_signature": "AttributeComparator.compare(AttributeValue arg0, AttributeValue arg1)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Attribute arg0, Attribute arg1)", "modifiers": "@Pure @Override public", "return": "int", "signature": "int compare(Attribute arg0, Attribute arg1)", "full_signature": "@Pure @Override public int compare(Attribute arg0, Attribute arg1)", "class_method_signature": "AttributeComparator.compare(Attribute arg0, Attribute arg1)", "testcase": false, "constructor": false}], "file": "advanced/attributes/src/main/java/org/arakhne/afc/attrs/attr/AttributeComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(AttributeValue arg0, AttributeValue arg1)", "modifiers": "@Pure public", "return": "int", "body": "@Pure\n\tpublic int compare(AttributeValue arg0, AttributeValue arg1) {\n\t\tif ((arg0 instanceof Attribute) && (arg1 instanceof Attribute)) {\n\t\t\treturn compare((Attribute) arg0, (Attribute) arg1);\n\t\t}\n\t\treturn AttributeValueImpl.compareValues(arg0, arg1);\n\t}", "signature": "int compare(AttributeValue arg0, AttributeValue arg1)", "full_signature": "@Pure public int compare(AttributeValue arg0, AttributeValue arg1)", "class_method_signature": "AttributeComparator.compare(AttributeValue arg0, AttributeValue arg1)", "testcase": false, "constructor": false, "invocations": ["compare", "compareValues"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}