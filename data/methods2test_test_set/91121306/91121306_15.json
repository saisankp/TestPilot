{"test_class": {"identifier": "SocketInternetObservingStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int TIMEOUT_MS = 200;", "modifier": "private static final", "type": "int", "declarator": "TIMEOUT_MS = 200", "var_name": "TIMEOUT_MS"}, {"original_string": "private static final int DELAY_MS = 100;", "modifier": "private static final", "type": "int", "declarator": "DELAY_MS = 100", "var_name": "DELAY_MS"}, {"original_string": "private static final int INTERVAL_MS = 200;", "modifier": "private static final", "type": "int", "declarator": "INTERVAL_MS = 200", "var_name": "INTERVAL_MS"}, {"original_string": "private static final String INVALID_HOST = \"invalid.endpoint\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_HOST = \"invalid.endpoint\"", "var_name": "INVALID_HOST"}, {"original_string": "private MockWebServer server;", "modifier": "private", "type": "MockWebServer", "declarator": "server", "var_name": "server"}], "file": "rxnetwork/src/test/java/greyfox/rxnetwork/internal/strategy/internet/impl/SocketInternetObservingStrategyTest.java"}, "test_case": {"identifier": "shouldSubscribeCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldSubscribeCorrectly() {\n    InternetObservingStrategy sut = SocketInternetObservingStrategy.create();\n\n    sut.observe().test().assertSubscribed();\n  }", "signature": "void shouldSubscribeCorrectly()", "full_signature": "@Test public void shouldSubscribeCorrectly()", "class_method_signature": "SocketInternetObservingStrategyTest.shouldSubscribeCorrectly()", "testcase": true, "constructor": false, "invocations": ["create", "assertSubscribed", "test", "observe"]}, "focal_class": {"identifier": "SocketInternetObservingStrategy", "superclass": "extends EndpointInternetObservingStrategy", "interfaces": "", "fields": [{"original_string": "private final int port;", "modifier": "private final", "type": "int", "declarator": "port", "var_name": "port"}], "methods": [{"identifier": "SocketInternetObservingStrategy", "parameters": "(@NonNull Builder builder)", "modifiers": "@VisibleForTesting", "return": "", "signature": " SocketInternetObservingStrategy(@NonNull Builder builder)", "full_signature": "@VisibleForTesting  SocketInternetObservingStrategy(@NonNull Builder builder)", "class_method_signature": "SocketInternetObservingStrategy.SocketInternetObservingStrategy(@NonNull Builder builder)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "()", "modifiers": "@NonNull public static", "return": "SocketInternetObservingStrategy", "signature": "SocketInternetObservingStrategy create()", "full_signature": "@NonNull public static SocketInternetObservingStrategy create()", "class_method_signature": "SocketInternetObservingStrategy.create()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "@NonNull public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "@NonNull public static Builder builder()", "class_method_signature": "SocketInternetObservingStrategy.builder()", "testcase": false, "constructor": false}, {"identifier": "logger", "parameters": "()", "modifiers": "@Override", "return": "Logger", "signature": "Logger logger()", "full_signature": "@Override Logger logger()", "class_method_signature": "SocketInternetObservingStrategy.logger()", "testcase": false, "constructor": false}, {"identifier": "checkConnection", "parameters": "()", "modifiers": "@Override", "return": "boolean", "signature": "boolean checkConnection()", "full_signature": "@Override boolean checkConnection()", "class_method_signature": "SocketInternetObservingStrategy.checkConnection()", "testcase": false, "constructor": false}, {"identifier": "connectSocketTo", "parameters": "(SocketAddress socketAddress, int timeout)", "modifiers": "", "return": "Socket", "signature": "Socket connectSocketTo(SocketAddress socketAddress, int timeout)", "full_signature": " Socket connectSocketTo(SocketAddress socketAddress, int timeout)", "class_method_signature": "SocketInternetObservingStrategy.connectSocketTo(SocketAddress socketAddress, int timeout)", "testcase": false, "constructor": false}, {"identifier": "isSocketConnected", "parameters": "(Socket socket)", "modifiers": "private", "return": "boolean", "signature": "boolean isSocketConnected(Socket socket)", "full_signature": "private boolean isSocketConnected(Socket socket)", "class_method_signature": "SocketInternetObservingStrategy.isSocketConnected(Socket socket)", "testcase": false, "constructor": false}], "file": "rxnetwork/src/main/java/greyfox/rxnetwork/internal/strategy/internet/impl/SocketInternetObservingStrategy.java"}, "focal_method": {"identifier": "create", "parameters": "()", "modifiers": "@NonNull public static", "return": "SocketInternetObservingStrategy", "body": "@NonNull\n  public static SocketInternetObservingStrategy create() {\n    return builder().build();\n  }", "signature": "SocketInternetObservingStrategy create()", "full_signature": "@NonNull public static SocketInternetObservingStrategy create()", "class_method_signature": "SocketInternetObservingStrategy.create()", "testcase": false, "constructor": false, "invocations": ["build", "builder"]}, "repository": {"repo_id": 91121306, "url": "https://github.com/greyfoxit/RxNetwork", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 511, "license": "licensed"}}