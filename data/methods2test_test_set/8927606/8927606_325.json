{"test_class": {"identifier": "JsonElementContainerTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/nl/nn/adapterframework/align/content/JsonElementContainerTest.java"}, "test_case": {"identifier": "testStripLeadingZeroes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testStripLeadingZeroes() {\n\t\tfor (int i=1; i<12;i++) {\n\t\t\ttestStripLeadingZeroes(\"\"+i,\"\"+i);\n\t\t\ttestStripLeadingZeroes(\"\"+i,\"0\"+i);\n\t\t\ttestStripLeadingZeroes(\"0.0\"+i,\"0.0\"+i);\n\t\t\ttestStripLeadingZeroes(\"0.0\"+i,\"000.0\"+i);\n\t\t\ttestStripLeadingZeroes(\"-\"+i,\"-\"+i);\n\t\t\ttestStripLeadingZeroes(\"-\"+i,\"-0\"+i);\n\t\t\ttestStripLeadingZeroes(\"-0.0\"+i,\"-0.0\"+i);\n\t\t\ttestStripLeadingZeroes(\"-0.0\"+i,\"-000.0\"+i);\n\t\t}\n\t\ttestStripLeadingZeroes(\"0\",\"0\");\n\t\ttestStripLeadingZeroes(\"0\",\"00\");\n\t\ttestStripLeadingZeroes(\"0\",\"000\");\n\t}", "signature": "void testStripLeadingZeroes()", "full_signature": "@Test public void testStripLeadingZeroes()", "class_method_signature": "JsonElementContainerTest.testStripLeadingZeroes()", "testcase": true, "constructor": false, "invocations": ["testStripLeadingZeroes", "testStripLeadingZeroes", "testStripLeadingZeroes", "testStripLeadingZeroes", "testStripLeadingZeroes", "testStripLeadingZeroes", "testStripLeadingZeroes", "testStripLeadingZeroes", "testStripLeadingZeroes", "testStripLeadingZeroes", "testStripLeadingZeroes"]}, "focal_class": {"identifier": "JsonElementContainer", "superclass": "", "interfaces": "implements ElementContainer", "fields": [{"original_string": "protected Logger log = LogUtil.getLogger(this.getClass());", "modifier": "protected", "type": "Logger", "declarator": "log = LogUtil.getLogger(this.getClass())", "var_name": "log"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private boolean xmlArrayContainer;", "modifier": "private", "type": "boolean", "declarator": "xmlArrayContainer", "var_name": "xmlArrayContainer"}, {"original_string": "private boolean repeatedElement;", "modifier": "private", "type": "boolean", "declarator": "repeatedElement", "var_name": "repeatedElement"}, {"original_string": "private boolean skipArrayElementContainers;", "modifier": "private", "type": "boolean", "declarator": "skipArrayElementContainers", "var_name": "skipArrayElementContainers"}, {"original_string": "private boolean nil=false;", "modifier": "private", "type": "boolean", "declarator": "nil=false", "var_name": "nil"}, {"original_string": "private ScalarType type=ScalarType.UNKNOWN;", "modifier": "private", "type": "ScalarType", "declarator": "type=ScalarType.UNKNOWN", "var_name": "type"}, {"original_string": "private String attributePrefix;", "modifier": "private", "type": "String", "declarator": "attributePrefix", "var_name": "attributePrefix"}, {"original_string": "private String mixedContentLabel;", "modifier": "private", "type": "String", "declarator": "mixedContentLabel", "var_name": "mixedContentLabel"}, {"original_string": "public String stringContent;", "modifier": "public", "type": "String", "declarator": "stringContent", "var_name": "stringContent"}, {"original_string": "private Map<String,Object> contentMap;", "modifier": "private", "type": "Map<String,Object>", "declarator": "contentMap", "var_name": "contentMap"}, {"original_string": "private List<Object> array;", "modifier": "private", "type": "List<Object>", "declarator": "array", "var_name": "array"}, {"original_string": "public static final CharSequenceTranslator ESCAPE_JSON = new AggregateTranslator(new CharSequenceTranslator[] {\n\t\t\tnew LookupTranslator(new String[][] { { \"\\\"\", \"\\\\\\\"\" }, { \"\\\\\", \"\\\\\\\\\" } }),\n\t\t\tnew LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE())});", "modifier": "public static final", "type": "CharSequenceTranslator", "declarator": "ESCAPE_JSON = new AggregateTranslator(new CharSequenceTranslator[] {\n\t\t\tnew LookupTranslator(new String[][] { { \"\\\"\", \"\\\\\\\"\" }, { \"\\\\\", \"\\\\\\\\\" } }),\n\t\t\tnew LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE())})", "var_name": "ESCAPE_JSON"}], "methods": [{"identifier": "JsonElementContainer", "parameters": "(String name, boolean xmlArrayContainer, boolean repeatedElement, boolean skipArrayElementContainers, String attributePrefix, String mixedContentLabel, XSTypeDefinition typeDefinition)", "modifiers": "public", "return": "", "signature": " JsonElementContainer(String name, boolean xmlArrayContainer, boolean repeatedElement, boolean skipArrayElementContainers, String attributePrefix, String mixedContentLabel, XSTypeDefinition typeDefinition)", "full_signature": "public  JsonElementContainer(String name, boolean xmlArrayContainer, boolean repeatedElement, boolean skipArrayElementContainers, String attributePrefix, String mixedContentLabel, XSTypeDefinition typeDefinition)", "class_method_signature": "JsonElementContainer.JsonElementContainer(String name, boolean xmlArrayContainer, boolean repeatedElement, boolean skipArrayElementContainers, String attributePrefix, String mixedContentLabel, XSTypeDefinition typeDefinition)", "testcase": false, "constructor": true}, {"identifier": "setNull", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void setNull()", "full_signature": "@Override public void setNull()", "class_method_signature": "JsonElementContainer.setNull()", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, String value, XSSimpleTypeDefinition attTypeDefinition)", "modifiers": "@Override public", "return": "void", "signature": "void setAttribute(String name, String value, XSSimpleTypeDefinition attTypeDefinition)", "full_signature": "@Override public void setAttribute(String name, String value, XSSimpleTypeDefinition attTypeDefinition)", "class_method_signature": "JsonElementContainer.setAttribute(String name, String value, XSSimpleTypeDefinition attTypeDefinition)", "testcase": false, "constructor": false}, {"identifier": "characters", "parameters": "(char[] ch, int start, int length)", "modifiers": "@Override public", "return": "void", "signature": "void characters(char[] ch, int start, int length)", "full_signature": "@Override public void characters(char[] ch, int start, int length)", "class_method_signature": "JsonElementContainer.characters(char[] ch, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "setContent", "parameters": "(String content)", "modifiers": "public", "return": "void", "signature": "void setContent(String content)", "full_signature": "public void setContent(String content)", "class_method_signature": "JsonElementContainer.setContent(String content)", "testcase": false, "constructor": false}, {"identifier": "addContent", "parameters": "(JsonElementContainer content)", "modifiers": "public", "return": "void", "signature": "void addContent(JsonElementContainer content)", "full_signature": "public void addContent(JsonElementContainer content)", "class_method_signature": "JsonElementContainer.addContent(JsonElementContainer content)", "testcase": false, "constructor": false}, {"identifier": "stripLeadingZeroes", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String stripLeadingZeroes(String value)", "full_signature": "public static String stripLeadingZeroes(String value)", "class_method_signature": "JsonElementContainer.stripLeadingZeroes(String value)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getContent()", "full_signature": "public Object getContent()", "class_method_signature": "JsonElementContainer.getContent()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JsonElementContainer.toString()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "JsonElementContainer.getName()", "testcase": false, "constructor": false}, {"identifier": "isXmlArrayContainer", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isXmlArrayContainer()", "full_signature": "public boolean isXmlArrayContainer()", "class_method_signature": "JsonElementContainer.isXmlArrayContainer()", "testcase": false, "constructor": false}, {"identifier": "isRepeatedElement", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRepeatedElement()", "full_signature": "public boolean isRepeatedElement()", "class_method_signature": "JsonElementContainer.isRepeatedElement()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "ScalarType", "signature": "ScalarType getType()", "full_signature": "public ScalarType getType()", "class_method_signature": "JsonElementContainer.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(ScalarType type)", "modifiers": "public", "return": "void", "signature": "void setType(ScalarType type)", "full_signature": "public void setType(ScalarType type)", "class_method_signature": "JsonElementContainer.setType(ScalarType type)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/align/content/JsonElementContainer.java"}, "focal_method": {"identifier": "stripLeadingZeroes", "parameters": "(String value)", "modifiers": "public static", "return": "String", "body": "public static String stripLeadingZeroes(String value) {\n\t\tif (value.length()>1) {\t// check for leading zeroes, and remove them.\n\t\t\tboolean negative=value.charAt(0)=='-';\n\t\t\tint i=negative?1:0;\n\t\t\twhile (i<value.length()-1 && value.charAt(i)=='0' && Character.isDigit(value.charAt(i+1))) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i>(negative?1:0)) {\n\t\t\t\treturn (negative?\"-\":\"\")+value.substring(i);\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}", "signature": "String stripLeadingZeroes(String value)", "full_signature": "public static String stripLeadingZeroes(String value)", "class_method_signature": "JsonElementContainer.stripLeadingZeroes(String value)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "length", "charAt", "isDigit", "charAt", "substring"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}