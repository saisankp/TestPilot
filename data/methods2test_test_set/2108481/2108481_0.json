{"test_class": {"identifier": "CheckTokenEndpointTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CheckTokenEndpoint checkTokenEndpoint;", "modifier": "private", "type": "CheckTokenEndpoint", "declarator": "checkTokenEndpoint", "var_name": "checkTokenEndpoint"}], "file": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpointTest.java"}, "test_case": {"identifier": "checkTokenWhenTokenValidThenReturnActiveAttribute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void checkTokenWhenTokenValidThenReturnActiveAttribute() throws Exception {\n\t\tMap<String, ?> response = this.checkTokenEndpoint.checkToken(\"access-token-1234\");\n\t\tObject active = response.get(\"active\");\n\t\tassertNotNull(\"active is null\", active);\n\t\tassertEquals(\"active not true\", Boolean.TRUE, active);\n\t}", "signature": "void checkTokenWhenTokenValidThenReturnActiveAttribute()", "full_signature": "@Test public void checkTokenWhenTokenValidThenReturnActiveAttribute()", "class_method_signature": "CheckTokenEndpointTest.checkTokenWhenTokenValidThenReturnActiveAttribute()", "testcase": true, "constructor": false, "invocations": ["checkToken", "get", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "CheckTokenEndpoint", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ResourceServerTokenServices resourceServerTokenServices;", "modifier": "private", "type": "ResourceServerTokenServices", "declarator": "resourceServerTokenServices", "var_name": "resourceServerTokenServices"}, {"original_string": "private AccessTokenConverter accessTokenConverter = new DefaultAccessTokenConverter();", "modifier": "private", "type": "AccessTokenConverter", "declarator": "accessTokenConverter = new DefaultAccessTokenConverter()", "var_name": "accessTokenConverter"}, {"original_string": "protected final Log logger = LogFactory.getLog(getClass());", "modifier": "protected final", "type": "Log", "declarator": "logger = LogFactory.getLog(getClass())", "var_name": "logger"}, {"original_string": "private WebResponseExceptionTranslator<OAuth2Exception> exceptionTranslator = new DefaultWebResponseExceptionTranslator();", "modifier": "private", "type": "WebResponseExceptionTranslator<OAuth2Exception>", "declarator": "exceptionTranslator = new DefaultWebResponseExceptionTranslator()", "var_name": "exceptionTranslator"}], "methods": [{"identifier": "CheckTokenEndpoint", "parameters": "(ResourceServerTokenServices resourceServerTokenServices)", "modifiers": "public", "return": "", "signature": " CheckTokenEndpoint(ResourceServerTokenServices resourceServerTokenServices)", "full_signature": "public  CheckTokenEndpoint(ResourceServerTokenServices resourceServerTokenServices)", "class_method_signature": "CheckTokenEndpoint.CheckTokenEndpoint(ResourceServerTokenServices resourceServerTokenServices)", "testcase": false, "constructor": true}, {"identifier": "setExceptionTranslator", "parameters": "(WebResponseExceptionTranslator<OAuth2Exception> exceptionTranslator)", "modifiers": "public", "return": "void", "signature": "void setExceptionTranslator(WebResponseExceptionTranslator<OAuth2Exception> exceptionTranslator)", "full_signature": "public void setExceptionTranslator(WebResponseExceptionTranslator<OAuth2Exception> exceptionTranslator)", "class_method_signature": "CheckTokenEndpoint.setExceptionTranslator(WebResponseExceptionTranslator<OAuth2Exception> exceptionTranslator)", "testcase": false, "constructor": false}, {"identifier": "setAccessTokenConverter", "parameters": "(AccessTokenConverter accessTokenConverter)", "modifiers": "public", "return": "void", "signature": "void setAccessTokenConverter(AccessTokenConverter accessTokenConverter)", "full_signature": "public void setAccessTokenConverter(AccessTokenConverter accessTokenConverter)", "class_method_signature": "CheckTokenEndpoint.setAccessTokenConverter(AccessTokenConverter accessTokenConverter)", "testcase": false, "constructor": false}, {"identifier": "checkToken", "parameters": "(@RequestParam(\"token\") String value)", "modifiers": "@RequestMapping(value = \"/oauth/check_token\", method = RequestMethod.POST) @ResponseBody public", "return": "Map<String, ?>", "signature": "Map<String, ?> checkToken(@RequestParam(\"token\") String value)", "full_signature": "@RequestMapping(value = \"/oauth/check_token\", method = RequestMethod.POST) @ResponseBody public Map<String, ?> checkToken(@RequestParam(\"token\") String value)", "class_method_signature": "CheckTokenEndpoint.checkToken(@RequestParam(\"token\") String value)", "testcase": false, "constructor": false}, {"identifier": "handleException", "parameters": "(Exception e)", "modifiers": "@ExceptionHandler(InvalidTokenException.class) public", "return": "ResponseEntity<OAuth2Exception>", "signature": "ResponseEntity<OAuth2Exception> handleException(Exception e)", "full_signature": "@ExceptionHandler(InvalidTokenException.class) public ResponseEntity<OAuth2Exception> handleException(Exception e)", "class_method_signature": "CheckTokenEndpoint.handleException(Exception e)", "testcase": false, "constructor": false}], "file": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpoint.java"}, "focal_method": {"identifier": "checkToken", "parameters": "(@RequestParam(\"token\") String value)", "modifiers": "@RequestMapping(value = \"/oauth/check_token\", method = RequestMethod.POST) @ResponseBody public", "return": "Map<String, ?>", "body": "@RequestMapping(value = \"/oauth/check_token\", method = RequestMethod.POST)\n\t@ResponseBody\n\tpublic Map<String, ?> checkToken(@RequestParam(\"token\") String value) {\n\n\t\tOAuth2AccessToken token = resourceServerTokenServices.readAccessToken(value);\n\t\tif (token == null) {\n\t\t\tthrow new InvalidTokenException(\"Token was not recognised\");\n\t\t}\n\n\t\tif (token.isExpired()) {\n\t\t\tthrow new InvalidTokenException(\"Token has expired\");\n\t\t}\n\n\t\tOAuth2Authentication authentication = resourceServerTokenServices.loadAuthentication(token.getValue());\n\n\t\tMap<String, Object> response = (Map<String, Object>)accessTokenConverter.convertAccessToken(token, authentication);\n\n\t\t// gh-1070\n\t\tresponse.put(\"active\", true);\t// Always true if token exists and not expired\n\n\t\treturn response;\n\t}", "signature": "Map<String, ?> checkToken(@RequestParam(\"token\") String value)", "full_signature": "@RequestMapping(value = \"/oauth/check_token\", method = RequestMethod.POST) @ResponseBody public Map<String, ?> checkToken(@RequestParam(\"token\") String value)", "class_method_signature": "CheckTokenEndpoint.checkToken(@RequestParam(\"token\") String value)", "testcase": false, "constructor": false, "invocations": ["readAccessToken", "isExpired", "loadAuthentication", "getValue", "convertAccessToken", "put"]}, "repository": {"repo_id": 2108481, "url": "https://github.com/spring-projects/spring-security-oauth", "language": "Java", "is_fork": false, "fork_count": 3777, "stargazer_count": 4150, "size": 7166, "license": "licensed"}}