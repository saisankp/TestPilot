{"test_class": {"identifier": "ProcessEntityParserTest", "superclass": "extends AbstractTestBase", "interfaces": "", "fields": [{"original_string": "private final ProcessEntityParser parser = (ProcessEntityParser) EntityParserFactory.getParser(EntityType.PROCESS);", "modifier": "private final", "type": "ProcessEntityParser", "declarator": "parser = (ProcessEntityParser) EntityParserFactory.getParser(EntityType.PROCESS)", "var_name": "parser"}, {"original_string": "private String INVALID_PROCESS_XML = \"/config/process/process-invalid.xml\";", "modifier": "private", "type": "String", "declarator": "INVALID_PROCESS_XML = \"/config/process/process-invalid.xml\"", "var_name": "INVALID_PROCESS_XML"}], "file": "common/src/test/java/org/apache/ivory/entity/parser/ProcessEntityParserTest.java"}, "test_case": {"identifier": "testInvalidDependentFeedsRetentionLimit", "parameters": "()", "modifiers": "@Test(expectedExceptions = ValidationException.class) public", "return": "void", "body": "@Test(expectedExceptions = ValidationException.class)\n\tpublic void testInvalidDependentFeedsRetentionLimit() throws Exception {\n\t\tProcess process = parser\n\t\t\t\t.parseAndValidate((ProcessEntityParserTest.class\n\t\t\t\t\t\t.getResourceAsStream(PROCESS_XML)));\n\t\tprocess.getInputs().getInputs().get(0).setStart(\"today(-48,0)\");\n\t\tparser.validate(process);\n\t}", "signature": "void testInvalidDependentFeedsRetentionLimit()", "full_signature": "@Test(expectedExceptions = ValidationException.class) public void testInvalidDependentFeedsRetentionLimit()", "class_method_signature": "ProcessEntityParserTest.testInvalidDependentFeedsRetentionLimit()", "testcase": true, "constructor": false, "invocations": ["parseAndValidate", "getResourceAsStream", "setStart", "get", "getInputs", "getInputs", "validate"]}, "focal_class": {"identifier": "ProcessEntityParser", "superclass": "extends EntityParser<Process>", "interfaces": "", "fields": [], "methods": [{"identifier": "ProcessEntityParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " ProcessEntityParser()", "full_signature": "public  ProcessEntityParser()", "class_method_signature": "ProcessEntityParser.ProcessEntityParser()", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(Process process)", "modifiers": "@Override public", "return": "void", "signature": "void validate(Process process)", "full_signature": "@Override public void validate(Process process)", "class_method_signature": "ProcessEntityParser.validate(Process process)", "testcase": false, "constructor": false}, {"identifier": "validateHDFSpaths", "parameters": "(Process process, String clusterName)", "modifiers": "private", "return": "void", "signature": "void validateHDFSpaths(Process process, String clusterName)", "full_signature": "private void validateHDFSpaths(Process process, String clusterName)", "class_method_signature": "ProcessEntityParser.validateHDFSpaths(Process process, String clusterName)", "testcase": false, "constructor": false}, {"identifier": "getNameNode", "parameters": "(Cluster cluster, String clusterName)", "modifiers": "private", "return": "String", "signature": "String getNameNode(Cluster cluster, String clusterName)", "full_signature": "private String getNameNode(Cluster cluster, String clusterName)", "class_method_signature": "ProcessEntityParser.getNameNode(Cluster cluster, String clusterName)", "testcase": false, "constructor": false}, {"identifier": "validateProcessValidity", "parameters": "(Date start, Date end)", "modifiers": "private", "return": "void", "signature": "void validateProcessValidity(Date start, Date end)", "full_signature": "private void validateProcessValidity(Date start, Date end)", "class_method_signature": "ProcessEntityParser.validateProcessValidity(Date start, Date end)", "testcase": false, "constructor": false}, {"identifier": "validateDatasetName", "parameters": "(Inputs inputs, Outputs outputs)", "modifiers": "private", "return": "void", "signature": "void validateDatasetName(Inputs inputs, Outputs outputs)", "full_signature": "private void validateDatasetName(Inputs inputs, Outputs outputs)", "class_method_signature": "ProcessEntityParser.validateDatasetName(Inputs inputs, Outputs outputs)", "testcase": false, "constructor": false}, {"identifier": "validateLateInputs", "parameters": "(Process process)", "modifiers": "private", "return": "void", "signature": "void validateLateInputs(Process process)", "full_signature": "private void validateLateInputs(Process process)", "class_method_signature": "ProcessEntityParser.validateLateInputs(Process process)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/apache/ivory/entity/parser/ProcessEntityParser.java"}, "focal_method": {"identifier": "validate", "parameters": "(Process process)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(Process process) throws IvoryException {\n        if(process.getTimezone() == null)\n            process.setTimezone(TimeZone.getTimeZone(\"UTC\"));\n\n        // check if dependent entities exists\n        Set<String> clusters = new HashSet<String>();\n        for (org.apache.ivory.entity.v0.process.Cluster cluster : process.getClusters().getClusters()) {\n            String clusterName = cluster.getName();\n\t\t\tif (!clusters.add(cluster.getName())) {\n\t\t\t\tthrow new ValidationException(\"Cluster: \" + cluster.getName()\n\t\t\t\t\t\t+ \" is defined more than once for process: \"+process.getName());\n\t\t\t}\n            validateEntityExists(EntityType.CLUSTER, clusterName);\n            validateProcessValidity(cluster.getValidity().getStart(), cluster.getValidity().getEnd());\n            validateHDFSpaths(process, clusterName);\n\n            if (process.getInputs() != null) {\n                for (Input input : process.getInputs().getInputs()) {\n                    validateEntityExists(EntityType.FEED, input.getFeed());\n                    Feed feed = (Feed) ConfigurationStore.get().get(EntityType.FEED, input.getFeed());\n                    CrossEntityValidations.validateFeedDefinedForCluster(feed, clusterName);\n                    CrossEntityValidations.validateFeedRetentionPeriod(input.getStart(), feed, clusterName);\n                    CrossEntityValidations.validateInstanceRange(process, input, feed);\n                    if (input.getPartition() != null) {\n                        CrossEntityValidations.validateInputPartition(input, feed);\n                    }\n                }\n            }\n\n            if (process.getOutputs() != null) {\n                for (Output output : process.getOutputs().getOutputs()) {\n                    validateEntityExists(EntityType.FEED, output.getFeed());\n                    Feed feed = (Feed) ConfigurationStore.get().get(EntityType.FEED, output.getFeed());\n                    CrossEntityValidations.validateFeedDefinedForCluster(feed, clusterName);\n                    CrossEntityValidations.validateInstance(process, output, feed);\n                }\n            }\n        }\n        validateDatasetName(process.getInputs(), process.getOutputs());\n        validateLateInputs(process);\n    }", "signature": "void validate(Process process)", "full_signature": "@Override public void validate(Process process)", "class_method_signature": "ProcessEntityParser.validate(Process process)", "testcase": false, "constructor": false, "invocations": ["getTimezone", "setTimezone", "getTimeZone", "getClusters", "getClusters", "getName", "add", "getName", "getName", "getName", "validateEntityExists", "validateProcessValidity", "getStart", "getValidity", "getEnd", "getValidity", "validateHDFSpaths", "getInputs", "getInputs", "getInputs", "validateEntityExists", "getFeed", "get", "get", "getFeed", "validateFeedDefinedForCluster", "validateFeedRetentionPeriod", "getStart", "validateInstanceRange", "getPartition", "validateInputPartition", "getOutputs", "getOutputs", "getOutputs", "validateEntityExists", "getFeed", "get", "get", "getFeed", "validateFeedDefinedForCluster", "validateInstance", "validateDatasetName", "getInputs", "getOutputs", "validateLateInputs"]}, "repository": {"repo_id": 2836228, "url": "https://github.com/sriksun/Ivory", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 28, "size": 11708, "license": "licensed"}}