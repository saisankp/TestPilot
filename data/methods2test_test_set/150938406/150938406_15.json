{"test_class": {"identifier": "IsotonicRegTrainBatchOpTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Tuple3[] tuples = new Tuple3[] {\n\t\t\tTuple3.of(0.0, 0.3, 1.0),\n\t\t\tTuple3.of(1.0, 0.27, 1.0),\n\t\t\tTuple3.of(1.0, 0.55, 1.0),\n\t\t\tTuple3.of(1.0, 0.5, 1.0),\n\t\t\tTuple3.of(0.0, 0.2, 1.0),\n\t\t\tTuple3.of(0.0, 0.18, 1.0),\n\t\t\tTuple3.of(1.0, 0.1, 1.0),\n\t\t\tTuple3.of(0.0, 0.45, 1.0),\n\t\t\tTuple3.of(1.0, 0.9, 1.0),\n\t\t\tTuple3.of(1.0, 0.8, 1.0),\n\t\t\tTuple3.of(0.0, 0.7, 1.0),\n\t\t\tTuple3.of(1.0, 0.6, 1.0),\n\t\t\tTuple3.of(1.0, 0.35, 1.0),\n\t\t\tTuple3.of(1.0, 0.4, 1.0),\n\t\t\tTuple3.of(1.0, 0.02, 1.0)\n\t\t};", "modifier": "private", "type": "Tuple3[]", "declarator": "tuples = new Tuple3[] {\n\t\t\tTuple3.of(0.0, 0.3, 1.0),\n\t\t\tTuple3.of(1.0, 0.27, 1.0),\n\t\t\tTuple3.of(1.0, 0.55, 1.0),\n\t\t\tTuple3.of(1.0, 0.5, 1.0),\n\t\t\tTuple3.of(0.0, 0.2, 1.0),\n\t\t\tTuple3.of(0.0, 0.18, 1.0),\n\t\t\tTuple3.of(1.0, 0.1, 1.0),\n\t\t\tTuple3.of(0.0, 0.45, 1.0),\n\t\t\tTuple3.of(1.0, 0.9, 1.0),\n\t\t\tTuple3.of(1.0, 0.8, 1.0),\n\t\t\tTuple3.of(0.0, 0.7, 1.0),\n\t\t\tTuple3.of(1.0, 0.6, 1.0),\n\t\t\tTuple3.of(1.0, 0.35, 1.0),\n\t\t\tTuple3.of(1.0, 0.4, 1.0),\n\t\t\tTuple3.of(1.0, 0.02, 1.0)\n\t\t}", "var_name": "tuples"}, {"original_string": "private Tuple3[] tupleTest = new Tuple3[] {\n\t\t\tTuple3.of(1.0, 0.02, 1.0),\n\t\t\tTuple3.of(1.0, 0.4, 1.0),\n\t\t\tTuple3.of(1.0, 0.48, 1.0),\n\t\t\tTuple3.of(1.0, 0.49, 1.0),\n\t\t\tTuple3.of(1.0, 0.33, 1.0),\n\t\t\tTuple3.of(1.0, 0.75, 1.0),\n\t\t\tTuple3.of(1.0, 1.0, 1.0),\n\t\t\tTuple3.of(1.0, 1.02, 1.0),\n\t\t\tTuple3.of(1.0, 0.01, 1.0),\n\t\t\tTuple3.of(1.0, 0.0, 1.0)\n\t};", "modifier": "private", "type": "Tuple3[]", "declarator": "tupleTest = new Tuple3[] {\n\t\t\tTuple3.of(1.0, 0.02, 1.0),\n\t\t\tTuple3.of(1.0, 0.4, 1.0),\n\t\t\tTuple3.of(1.0, 0.48, 1.0),\n\t\t\tTuple3.of(1.0, 0.49, 1.0),\n\t\t\tTuple3.of(1.0, 0.33, 1.0),\n\t\t\tTuple3.of(1.0, 0.75, 1.0),\n\t\t\tTuple3.of(1.0, 1.0, 1.0),\n\t\t\tTuple3.of(1.0, 1.02, 1.0),\n\t\t\tTuple3.of(1.0, 0.01, 1.0),\n\t\t\tTuple3.of(1.0, 0.0, 1.0)\n\t}", "var_name": "tupleTest"}], "file": "core/src/test/java/com/alibaba/alink/operator/batch/regression/IsotonicRegTrainBatchOpTest.java"}, "test_case": {"identifier": "isotonicRegTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void isotonicRegTest() throws Exception {\n\t\tint length = 15;\n\t\tObject[][] inTrain=new Object[length][3];\n\t\tfor (int i=0;i<length;++i){\n\t\t\tinTrain[i][0]=tuples[i].f0;\n\t\t\tinTrain[i][1]=tuples[i].f1;\n\t\t\tinTrain[i][2]=tuples[i].f2;\n\t\t}\n\t\tObject[][] inTest=new Object[10][3];\n\t\tfor (int i=0;i<10;++i){\n\t\t\tinTest[i][0]=tupleTest[i].f0;\n\t\t\tinTest[i][1]=tupleTest[i].f1;\n\t\t\tinTest[i][2]=tupleTest[i].f2;\n\t\t}\n\t\tString[] colNames=new String[]{\"col1\",\"col2\",\"col3\"};\n\t\tMemSourceBatchOp trainData=new MemSourceBatchOp(inTrain,colNames);\n\t\tMemSourceBatchOp predictData = new MemSourceBatchOp(inTest, new String[]{\"col1\",\"col2\",\"col3\"});\n\t\tIsotonicRegTrainBatchOp model=new IsotonicRegTrainBatchOp().setLabelCol(\"col1\").setFeatureCol(\"col2\").setWeightCol(\"col3\")\n\t\t\t\t.linkFrom(trainData);\n\t\tmodel.print();\n\t\tIsotonicRegPredictBatchOp predictBatchOp = new IsotonicRegPredictBatchOp().setPredictionCol(\"predictCol\");\n\t\tpredictBatchOp.linkFrom(model,predictData).print();\n\t}", "signature": "void isotonicRegTest()", "full_signature": "@Test public void isotonicRegTest()", "class_method_signature": "IsotonicRegTrainBatchOpTest.isotonicRegTest()", "testcase": true, "constructor": false, "invocations": ["linkFrom", "setWeightCol", "setFeatureCol", "setLabelCol", "print", "setPredictionCol", "print", "linkFrom"]}, "focal_class": {"identifier": "IsotonicRegTrainBatchOp", "superclass": "extends BatchOperator<IsotonicRegTrainBatchOp>", "interfaces": "implements IsotonicRegTrainParams<IsotonicRegTrainBatchOp>", "fields": [], "methods": [{"identifier": "IsotonicRegTrainBatchOp", "parameters": "()", "modifiers": "public", "return": "", "signature": " IsotonicRegTrainBatchOp()", "full_signature": "public  IsotonicRegTrainBatchOp()", "class_method_signature": "IsotonicRegTrainBatchOp.IsotonicRegTrainBatchOp()", "testcase": false, "constructor": true}, {"identifier": "IsotonicRegTrainBatchOp", "parameters": "(Params params)", "modifiers": "public", "return": "", "signature": " IsotonicRegTrainBatchOp(Params params)", "full_signature": "public  IsotonicRegTrainBatchOp(Params params)", "class_method_signature": "IsotonicRegTrainBatchOp.IsotonicRegTrainBatchOp(Params params)", "testcase": false, "constructor": true}, {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "IsotonicRegTrainBatchOp", "signature": "IsotonicRegTrainBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public IsotonicRegTrainBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "IsotonicRegTrainBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false}, {"identifier": "initLinkedData", "parameters": "(Iterable<Tuple3<Double, Double, Double>> tuple)", "modifiers": "private static", "return": "LinkedData", "signature": "LinkedData initLinkedData(Iterable<Tuple3<Double, Double, Double>> tuple)", "full_signature": "private static LinkedData initLinkedData(Iterable<Tuple3<Double, Double, Double>> tuple)", "class_method_signature": "IsotonicRegTrainBatchOp.initLinkedData(Iterable<Tuple3<Double, Double, Double>> tuple)", "testcase": false, "constructor": false}, {"identifier": "updateLinkedData", "parameters": "(LinkedData linkedData)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] updateLinkedData(LinkedData linkedData)", "full_signature": "private static byte[] updateLinkedData(LinkedData linkedData)", "class_method_signature": "IsotonicRegTrainBatchOp.updateLinkedData(LinkedData linkedData)", "testcase": false, "constructor": false}, {"identifier": "summarizeModelData", "parameters": "(Iterable<byte[]> distributedModelData)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] summarizeModelData(Iterable<byte[]> distributedModelData)", "full_signature": "private static byte[] summarizeModelData(Iterable<byte[]> distributedModelData)", "class_method_signature": "IsotonicRegTrainBatchOp.summarizeModelData(Iterable<byte[]> distributedModelData)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/batch/regression/IsotonicRegTrainBatchOp.java"}, "focal_method": {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "IsotonicRegTrainBatchOp", "body": "@Override\n    public IsotonicRegTrainBatchOp linkFrom(BatchOperator<?>... inputs) {\n        BatchOperator<?> in = checkAndGetFirst(inputs);\n        String labelColName = this.getLabelCol();\n        String featureColName = this.getFeatureCol();\n        String weightColName = this.getWeightCol();\n        String vectorColName = this.getVectorCol();\n        boolean isotonic = this.getIsotonic();\n        int index = this.getFeatureIndex();\n        // initialize the selectedColNames.\n        String[] selectedColNames;\n        if (null == vectorColName && null != featureColName) {\n            if (weightColName == null) {\n                selectedColNames = new String[]{labelColName, featureColName};\n            } else {\n                selectedColNames = new String[]{labelColName, featureColName, weightColName};\n            }\n        } else if (null == featureColName && null != vectorColName) {\n            if (weightColName == null) {\n                selectedColNames = new String[]{labelColName, vectorColName};\n            } else {\n                selectedColNames = new String[]{labelColName, vectorColName, weightColName};\n            }\n        } else {\n            throw new IllegalArgumentException(\"Either featureColName or vectorColName is required!\");\n        }\n        //initialize the input data, the three dimensions are label, feature, weight.\n        DataSet<Tuple3<Double, Double, Double>> dataSet = in.select(selectedColNames)\n                .getDataSet()\n                .map(new MapFunction<Row, Tuple3<Double, Double, Double>>() {\n                         @Override\n                         public Tuple3<Double, Double, Double> map(Row row) {\n                             double label = ((Number) row.getField(0)).doubleValue();\n                             label = isotonic ? label : -label;\n                             double feature = null == vectorColName ? ((Number) row.getField(1)).doubleValue()\n                                     : VectorUtil.getVector(row.getField(1)).get(index);\n                             double weight = null == weightColName ? 1.0 : ((Number) row.getField(2)).doubleValue();\n                             if (weight < 0) {\n                                 throw new IllegalArgumentException(\"Weights must be non-negative!\");\n                             }\n                             return Tuple3.of(label, feature, weight);\n                         }\n                     }\n                );\n\n        DataSet<byte[]> model = dataSet\n                .filter(new FilterFunction<Tuple3<Double, Double, Double>>() {\n                    @Override\n                    public boolean filter(Tuple3<Double, Double, Double> value) {\n                        return value.f2 > 0;\n                    }\n                })\n                .rebalance()\n                .partitionByRange(1)\n                .mapPartition(new PoolAdjacentViolators());\n        DataSet<Row> res = model\n                .mapPartition(new BuildModel(isotonic, featureColName, vectorColName, index))\n                .setParallelism(1);\n        this.setOutput(res, new IsotonicRegressionConverter().getModelSchema());\n        return this;\n    }", "signature": "IsotonicRegTrainBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public IsotonicRegTrainBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "IsotonicRegTrainBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false, "invocations": ["checkAndGetFirst", "getLabelCol", "getFeatureCol", "getWeightCol", "getVectorCol", "getIsotonic", "getFeatureIndex", "map", "getDataSet", "select", "doubleValue", "getField", "doubleValue", "getField", "get", "getVector", "getField", "doubleValue", "getField", "of", "mapPartition", "partitionByRange", "rebalance", "filter", "setParallelism", "mapPartition", "setOutput", "getModelSchema"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}