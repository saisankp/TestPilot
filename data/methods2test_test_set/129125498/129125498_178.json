{"test_class": {"identifier": "ConstantThresholdDetectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UUID detectorUuid;", "modifier": "private", "type": "UUID", "declarator": "detectorUuid", "var_name": "detectorUuid"}, {"original_string": "private MetricDefinition metricDefinition;", "modifier": "private", "type": "MetricDefinition", "declarator": "metricDefinition", "var_name": "metricDefinition"}, {"original_string": "private long epochSecond;", "modifier": "private", "type": "long", "declarator": "epochSecond", "var_name": "epochSecond"}, {"original_string": "private boolean trusted;", "modifier": "private", "type": "boolean", "declarator": "trusted", "var_name": "trusted"}, {"original_string": "@Mock\n    private AnomalyThresholds thresholds;", "modifier": "@Mock\n    private", "type": "AnomalyThresholds", "declarator": "thresholds", "var_name": "thresholds"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/constant/ConstantThresholdDetectorTest.java"}, "test_case": {"identifier": "testName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testName() {\n        val detector = detector(detectorUuid, thresholds, AnomalyType.LEFT_TAILED, trusted);\n        assertNotNull(detector.getName());\n        assertEquals(\"constant-threshold\", detector.getName());\n    }", "signature": "void testName()", "full_signature": "@Test public void testName()", "class_method_signature": "ConstantThresholdDetectorTest.testName()", "testcase": true, "constructor": false, "invocations": ["detector", "assertNotNull", "getName", "assertEquals", "getName"]}, "focal_class": {"identifier": "ConstantThresholdDetector", "superclass": "extends AbstractOutlierDetector", "interfaces": "", "fields": [{"original_string": "private static final String NAME = \"constant-threshold\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"constant-threshold\"", "var_name": "NAME"}, {"original_string": "@Getter\n    private final ConstantThresholdDetectorParams params;", "modifier": "@Getter\n    private final", "type": "ConstantThresholdDetectorParams", "declarator": "params", "var_name": "params"}, {"original_string": "@Getter\n    private final boolean trusted;", "modifier": "@Getter\n    private final", "type": "boolean", "declarator": "trusted", "var_name": "trusted"}, {"original_string": "private final AnomalyClassifier classifier;", "modifier": "private final", "type": "AnomalyClassifier", "declarator": "classifier", "var_name": "classifier"}], "methods": [{"identifier": "ConstantThresholdDetector", "parameters": "(@NonNull UUID uuid, @NonNull ConstantThresholdDetectorParams params, boolean trusted)", "modifiers": "public", "return": "", "signature": " ConstantThresholdDetector(@NonNull UUID uuid, @NonNull ConstantThresholdDetectorParams params, boolean trusted)", "full_signature": "public  ConstantThresholdDetector(@NonNull UUID uuid, @NonNull ConstantThresholdDetectorParams params, boolean trusted)", "class_method_signature": "ConstantThresholdDetector.ConstantThresholdDetector(@NonNull UUID uuid, @NonNull ConstantThresholdDetectorParams params, boolean trusted)", "testcase": false, "constructor": true}, {"identifier": "detect", "parameters": "(@NonNull MetricData metricData)", "modifiers": "@Override public", "return": "DetectorResult", "signature": "DetectorResult detect(@NonNull MetricData metricData)", "full_signature": "@Override public DetectorResult detect(@NonNull MetricData metricData)", "class_method_signature": "ConstantThresholdDetector.detect(@NonNull MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ConstantThresholdDetector.getName()", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/constant/ConstantThresholdDetector.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getName() {\n        return NAME;\n    }", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ConstantThresholdDetector.getName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}