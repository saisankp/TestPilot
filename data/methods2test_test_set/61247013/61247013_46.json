{"test_class": {"identifier": "ListConditionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ArrayList<String> input;", "modifier": "", "type": "ArrayList<String>", "declarator": "input", "var_name": "input"}], "file": "lib/src/test/java/com/busybusy/dbc/conditions/ListConditionTest.java"}, "test_case": {"identifier": "hasSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void hasSize() throws Exception\n\t{\n\t\tListCondition<ArrayList<String>, String> condition = new ListCondition<>(this.input);\n\t\tcondition.hasSize(3);\n\n\t\tAssertions.assertThatThrownBy(() -> condition.hasSize(4))\n\t\t          .isInstanceOf(DbcAssertionError.class)\n\t\t          .hasCauseInstanceOf(IllegalArgumentException.class);\n\t}", "signature": "void hasSize()", "full_signature": "@Test public void hasSize()", "class_method_signature": "ListConditionTest.hasSize()", "testcase": true, "constructor": false, "invocations": ["hasSize", "hasCauseInstanceOf", "isInstanceOf", "assertThatThrownBy", "hasSize"]}, "focal_class": {"identifier": "ListCondition", "superclass": "extends BasicCondition<T, ListCondition<T, E>>", "interfaces": "implements ListChecks<T, E, ListCondition<T, E>>", "fields": [], "methods": [{"identifier": "ListCondition", "parameters": "(T subject)", "modifiers": "public", "return": "", "signature": " ListCondition(T subject)", "full_signature": "public  ListCondition(T subject)", "class_method_signature": "ListCondition.ListCondition(T subject)", "testcase": false, "constructor": true}, {"identifier": "isNotEmpty", "parameters": "()", "modifiers": "@Override public", "return": "ListCondition<T, E>", "signature": "ListCondition<T, E> isNotEmpty()", "full_signature": "@Override public ListCondition<T, E> isNotEmpty()", "class_method_signature": "ListCondition.isNotEmpty()", "testcase": false, "constructor": false}, {"identifier": "hasSize", "parameters": "(int size)", "modifiers": "@Override public", "return": "ListCondition<T, E>", "signature": "ListCondition<T, E> hasSize(int size)", "full_signature": "@Override public ListCondition<T, E> hasSize(int size)", "class_method_signature": "ListCondition.hasSize(int size)", "testcase": false, "constructor": false}, {"identifier": "hasSizeBetween", "parameters": "(int startInclusive, int endInclusive)", "modifiers": "@Override public", "return": "ListCondition<T, E>", "signature": "ListCondition<T, E> hasSizeBetween(int startInclusive, int endInclusive)", "full_signature": "@Override public ListCondition<T, E> hasSizeBetween(int startInclusive, int endInclusive)", "class_method_signature": "ListCondition.hasSizeBetween(int startInclusive, int endInclusive)", "testcase": false, "constructor": false}, {"identifier": "hasSizeGreaterThan", "parameters": "(int minSizeExclusive)", "modifiers": "@Override public", "return": "ListCondition<T, E>", "signature": "ListCondition<T, E> hasSizeGreaterThan(int minSizeExclusive)", "full_signature": "@Override public ListCondition<T, E> hasSizeGreaterThan(int minSizeExclusive)", "class_method_signature": "ListCondition.hasSizeGreaterThan(int minSizeExclusive)", "testcase": false, "constructor": false}, {"identifier": "hasSizeGreaterThanOrEqual", "parameters": "(int minSize)", "modifiers": "@Override public", "return": "ListCondition<T, E>", "signature": "ListCondition<T, E> hasSizeGreaterThanOrEqual(int minSize)", "full_signature": "@Override public ListCondition<T, E> hasSizeGreaterThanOrEqual(int minSize)", "class_method_signature": "ListCondition.hasSizeGreaterThanOrEqual(int minSize)", "testcase": false, "constructor": false}, {"identifier": "hasSizeLessThan", "parameters": "(int maxSizeExclusive)", "modifiers": "@Override public", "return": "ListCondition<T, E>", "signature": "ListCondition<T, E> hasSizeLessThan(int maxSizeExclusive)", "full_signature": "@Override public ListCondition<T, E> hasSizeLessThan(int maxSizeExclusive)", "class_method_signature": "ListCondition.hasSizeLessThan(int maxSizeExclusive)", "testcase": false, "constructor": false}, {"identifier": "hasSizeLessThanOrEqual", "parameters": "(int maxSize)", "modifiers": "@Override public", "return": "ListCondition<T, E>", "signature": "ListCondition<T, E> hasSizeLessThanOrEqual(int maxSize)", "full_signature": "@Override public ListCondition<T, E> hasSizeLessThanOrEqual(int maxSize)", "class_method_signature": "ListCondition.hasSizeLessThanOrEqual(int maxSize)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/com/busybusy/dbc/conditions/ListCondition.java"}, "focal_method": {"identifier": "hasSize", "parameters": "(int size)", "modifiers": "@Override public", "return": "ListCondition<T, E>", "body": "@Override\n\tpublic ListCondition<T, E> hasSize(int size)\n\t{\n\t\trequire(this.subject).isNotNull();\n\n\t\tif (!(this.subject.size() == size))\n\t\t{\n\t\t\tDbcAssertionError.throwNew(new IllegalArgumentException(\"Expected list size to be <\" + size + \"> but was <\" + this.subject.size() + \">\"), this.message);\n\t\t}\n\n\t\treturn result();\n\t}", "signature": "ListCondition<T, E> hasSize(int size)", "full_signature": "@Override public ListCondition<T, E> hasSize(int size)", "class_method_signature": "ListCondition.hasSize(int size)", "testcase": false, "constructor": false, "invocations": ["isNotNull", "require", "size", "throwNew", "size", "result"]}, "repository": {"repo_id": 61247013, "url": "https://github.com/busybusy/DBC-Android", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 203, "license": "licensed"}}