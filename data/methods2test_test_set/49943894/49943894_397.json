{"test_class": {"identifier": "ResourceCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DataCenterDao dataCenterDao;", "modifier": "@Mock\n    private", "type": "DataCenterDao", "declarator": "dataCenterDao", "var_name": "dataCenterDao"}, {"original_string": "@Mock\n    private AccountManager accountManager;", "modifier": "@Mock\n    private", "type": "AccountManager", "declarator": "accountManager", "var_name": "accountManager"}, {"original_string": "@Mock\n    private HostPodDao hostPodDao;", "modifier": "@Mock\n    private", "type": "HostPodDao", "declarator": "hostPodDao", "var_name": "hostPodDao"}], "file": "server/src/test/java/com/cloud/resource/ResourceCheckerTest.java"}, "test_case": {"identifier": "test_checkIfDataCenterIsUsable_whenDataCenterIsDisabledAndAccountIsRoot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_checkIfDataCenterIsUsable_whenDataCenterIsDisabledAndAccountIsRoot() throws Exception {\n        final DataCenterVO dataCenter = new DataCenterVO();\n        dataCenter.setAllocationState(Grouping.AllocationState.Disabled);\n        final AccountVO account = new AccountVO(1L);\n        when(accountManager.isRootAdmin(1L)).thenReturn(true);\n        final ResourceChecker resourceChecker = buildResourceChecker();\n\n        try {\n            resourceChecker.checkIfDataCenterIsUsable(dataCenter, account);\n        } catch (final PermissionDeniedException e) {\n            fail(\"No PermissionDeniedException should have be generated\");\n        }\n    }", "signature": "void test_checkIfDataCenterIsUsable_whenDataCenterIsDisabledAndAccountIsRoot()", "full_signature": "@Test public void test_checkIfDataCenterIsUsable_whenDataCenterIsDisabledAndAccountIsRoot()", "class_method_signature": "ResourceCheckerTest.test_checkIfDataCenterIsUsable_whenDataCenterIsDisabledAndAccountIsRoot()", "testcase": true, "constructor": false, "invocations": ["setAllocationState", "thenReturn", "when", "isRootAdmin", "buildResourceChecker", "checkIfDataCenterIsUsable", "fail"]}, "focal_class": {"identifier": "ResourceChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(ResourceManagerImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(ResourceManagerImpl.class)", "var_name": "logger"}, {"original_string": "private final DataCenterDao dataCenterDao;", "modifier": "private final", "type": "DataCenterDao", "declarator": "dataCenterDao", "var_name": "dataCenterDao"}, {"original_string": "private final AccountManager accountManager;", "modifier": "private final", "type": "AccountManager", "declarator": "accountManager", "var_name": "accountManager"}, {"original_string": "private final HostPodDao hostPodDao;", "modifier": "private final", "type": "HostPodDao", "declarator": "hostPodDao", "var_name": "hostPodDao"}], "methods": [{"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "ResourceChecker.builder()", "testcase": false, "constructor": false}, {"identifier": "ResourceChecker", "parameters": "(final Builder builder)", "modifiers": "private", "return": "", "signature": " ResourceChecker(final Builder builder)", "full_signature": "private  ResourceChecker(final Builder builder)", "class_method_signature": "ResourceChecker.ResourceChecker(final Builder builder)", "testcase": false, "constructor": true}, {"identifier": "checkIfDataCenterExists", "parameters": "(final Long dataCenterId)", "modifiers": "public", "return": "DataCenterVO", "signature": "DataCenterVO checkIfDataCenterExists(final Long dataCenterId)", "full_signature": "public DataCenterVO checkIfDataCenterExists(final Long dataCenterId)", "class_method_signature": "ResourceChecker.checkIfDataCenterExists(final Long dataCenterId)", "testcase": false, "constructor": false}, {"identifier": "checkIfDataCenterIsUsable", "parameters": "(final DataCenter dataCenter, final Account account)", "modifiers": "public", "return": "void", "signature": "void checkIfDataCenterIsUsable(final DataCenter dataCenter, final Account account)", "full_signature": "public void checkIfDataCenterIsUsable(final DataCenter dataCenter, final Account account)", "class_method_signature": "ResourceChecker.checkIfDataCenterIsUsable(final DataCenter dataCenter, final Account account)", "testcase": false, "constructor": false}, {"identifier": "checkIfPodExists", "parameters": "(final Long hostPodId)", "modifiers": "public", "return": "HostPodVO", "signature": "HostPodVO checkIfPodExists(final Long hostPodId)", "full_signature": "public HostPodVO checkIfPodExists(final Long hostPodId)", "class_method_signature": "ResourceChecker.checkIfPodExists(final Long hostPodId)", "testcase": false, "constructor": false}, {"identifier": "checkIfPodIsUsable", "parameters": "(final DataCenter dataCenter, final HostPodVO hostPod)", "modifiers": "public", "return": "void", "signature": "void checkIfPodIsUsable(final DataCenter dataCenter, final HostPodVO hostPod)", "full_signature": "public void checkIfPodIsUsable(final DataCenter dataCenter, final HostPodVO hostPod)", "class_method_signature": "ResourceChecker.checkIfPodIsUsable(final DataCenter dataCenter, final HostPodVO hostPod)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/resource/ResourceChecker.java"}, "focal_method": {"identifier": "checkIfDataCenterIsUsable", "parameters": "(final DataCenter dataCenter, final Account account)", "modifiers": "public", "return": "void", "body": "public void checkIfDataCenterIsUsable(final DataCenter dataCenter, final Account account) {\n        final long dataCenterId = dataCenter.getId();\n        logger.debug(\"Checking if data center \" + dataCenterId + \" is usable.\");\n        if (Grouping.AllocationState.Disabled == dataCenter.getAllocationState() && !accountManager.isRootAdmin(account.getId())) {\n            final PermissionDeniedException ex = new PermissionDeniedException(\"Cannot perform this operation, data center with specified id is currently disabled\");\n            ex.addProxyObject(dataCenter.getUuid(), \"dcId\");\n            throw ex;\n        }\n        logger.debug(\"Data center \" + dataCenterId + \"is usable\");\n    }", "signature": "void checkIfDataCenterIsUsable(final DataCenter dataCenter, final Account account)", "full_signature": "public void checkIfDataCenterIsUsable(final DataCenter dataCenter, final Account account)", "class_method_signature": "ResourceChecker.checkIfDataCenterIsUsable(final DataCenter dataCenter, final Account account)", "testcase": false, "constructor": false, "invocations": ["getId", "debug", "getAllocationState", "isRootAdmin", "getId", "addProxyObject", "getUuid", "debug"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}