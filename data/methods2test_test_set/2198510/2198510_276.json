{"test_class": {"identifier": "TestSyslogUtils", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-core/src/test/java/org/apache/flume/source/TestSyslogUtils.java"}, "test_case": {"identifier": "testExtractBadEvent4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExtractBadEvent4() {\n    String badData1 = \"<123123123123123123123123123123> bad bad data\\n\";\n    SyslogUtils util = new SyslogUtils(false);\n    ChannelBuffer buff = ChannelBuffers.buffer(100);\n    buff.writeBytes(badData1.getBytes());\n    Event e = util.extractEvent(buff);\n    if (e == null) {\n      throw new NullPointerException(\"Event is null\");\n    }\n    Map<String, String> headers = e.getHeaders();\n    Assert.assertEquals(\"0\", headers.get(SyslogUtils.SYSLOG_FACILITY));\n    Assert.assertEquals(\"0\", headers.get(SyslogUtils.SYSLOG_SEVERITY));\n    Assert.assertEquals(SyslogUtils.SyslogStatus.INVALID.getSyslogStatus(),\n                        headers.get(SyslogUtils.EVENT_STATUS));\n    Assert.assertEquals(badData1.trim(), new String(e.getBody()).trim());\n  }", "signature": "void testExtractBadEvent4()", "full_signature": "@Test public void testExtractBadEvent4()", "class_method_signature": "TestSyslogUtils.testExtractBadEvent4()", "testcase": true, "constructor": false, "invocations": ["buffer", "writeBytes", "getBytes", "extractEvent", "getHeaders", "assertEquals", "get", "assertEquals", "get", "assertEquals", "getSyslogStatus", "get", "assertEquals", "trim", "trim", "getBody"]}, "focal_class": {"identifier": "SyslogUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SYSLOG_TIMESTAMP_FORMAT_RFC5424_2 = \"yyyy-MM-dd'T'HH:mm:ss.SZ\";", "modifier": "public static final", "type": "String", "declarator": "SYSLOG_TIMESTAMP_FORMAT_RFC5424_2 = \"yyyy-MM-dd'T'HH:mm:ss.SZ\"", "var_name": "SYSLOG_TIMESTAMP_FORMAT_RFC5424_2"}, {"original_string": "public static final String SYSLOG_TIMESTAMP_FORMAT_RFC5424_1 = \"yyyy-MM-dd'T'HH:mm:ss.S\";", "modifier": "public static final", "type": "String", "declarator": "SYSLOG_TIMESTAMP_FORMAT_RFC5424_1 = \"yyyy-MM-dd'T'HH:mm:ss.S\"", "var_name": "SYSLOG_TIMESTAMP_FORMAT_RFC5424_1"}, {"original_string": "public static final String SYSLOG_TIMESTAMP_FORMAT_RFC5424_3 = \"yyyy-MM-dd'T'HH:mm:ssZ\";", "modifier": "public static final", "type": "String", "declarator": "SYSLOG_TIMESTAMP_FORMAT_RFC5424_3 = \"yyyy-MM-dd'T'HH:mm:ssZ\"", "var_name": "SYSLOG_TIMESTAMP_FORMAT_RFC5424_3"}, {"original_string": "public static final String SYSLOG_TIMESTAMP_FORMAT_RFC5424_4 = \"yyyy-MM-dd'T'HH:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "SYSLOG_TIMESTAMP_FORMAT_RFC5424_4 = \"yyyy-MM-dd'T'HH:mm:ss\"", "var_name": "SYSLOG_TIMESTAMP_FORMAT_RFC5424_4"}, {"original_string": "public static final String SYSLOG_TIMESTAMP_FORMAT_RFC3164_1 = \"yyyyMMM d HH:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "SYSLOG_TIMESTAMP_FORMAT_RFC3164_1 = \"yyyyMMM d HH:mm:ss\"", "var_name": "SYSLOG_TIMESTAMP_FORMAT_RFC3164_1"}, {"original_string": "public static final String SYSLOG_MSG_RFC5424_0 =\n      \"(?:\\\\<(\\\\d{1,3})\\\\>)\" + // priority\n          \"(?:(\\\\d?)\\\\s?)\" + // version\n          /* yyyy-MM-dd'T'HH:mm:ss.SZ or yyyy-MM-dd'T'HH:mm:ss.S+hh:mm or - (null stamp) */\n          \"(?:\" +\n          \"(\\\\d{4}[-]\\\\d{2}[-]\\\\d{2}[T]\\\\d{2}[:]\\\\d{2}[:]\\\\d{2}\" +\n          \"(?:\\\\.\\\\d{1,6})?(?:[+-]\\\\d{2}[:]\\\\d{2}|Z)?)|-)\" + // stamp\n          \"\\\\s\" + // separator\n          \"(?:([\\\\w][\\\\w\\\\d\\\\.@\\\\-]*)|-)\" + // host name or - (null)\n          \"\\\\s\" + // separator\n          \"(.*)$\";", "modifier": "public static final", "type": "String", "declarator": "SYSLOG_MSG_RFC5424_0 =\n      \"(?:\\\\<(\\\\d{1,3})\\\\>)\" + // priority\n          \"(?:(\\\\d?)\\\\s?)\" + // version\n          /* yyyy-MM-dd'T'HH:mm:ss.SZ or yyyy-MM-dd'T'HH:mm:ss.S+hh:mm or - (null stamp) */\n          \"(?:\" +\n          \"(\\\\d{4}[-]\\\\d{2}[-]\\\\d{2}[T]\\\\d{2}[:]\\\\d{2}[:]\\\\d{2}\" +\n          \"(?:\\\\.\\\\d{1,6})?(?:[+-]\\\\d{2}[:]\\\\d{2}|Z)?)|-)\" + // stamp\n          \"\\\\s\" + // separator\n          \"(?:([\\\\w][\\\\w\\\\d\\\\.@\\\\-]*)|-)\" + // host name or - (null)\n          \"\\\\s\" + // separator\n          \"(.*)$\"", "var_name": "SYSLOG_MSG_RFC5424_0"}, {"original_string": "public static final String SYSLOG_MSG_RFC3164_0 =\n      \"(?:\\\\<(\\\\d{1,3})\\\\>)\" +\n          \"(?:(\\\\d)?\\\\s?)\" + // version\n          // stamp MMM d HH:mm:ss, single digit date has two spaces\n          \"([A-Z][a-z][a-z]\\\\s{1,2}\\\\d{1,2}\\\\s\\\\d{2}[:]\\\\d{2}[:]\\\\d{2})\" +\n          \"\\\\s\" + // separator\n          \"([\\\\w][\\\\w\\\\d\\\\.@-]*)\" + // host\n          \"\\\\s(.*)$\";", "modifier": "public static final", "type": "String", "declarator": "SYSLOG_MSG_RFC3164_0 =\n      \"(?:\\\\<(\\\\d{1,3})\\\\>)\" +\n          \"(?:(\\\\d)?\\\\s?)\" + // version\n          // stamp MMM d HH:mm:ss, single digit date has two spaces\n          \"([A-Z][a-z][a-z]\\\\s{1,2}\\\\d{1,2}\\\\s\\\\d{2}[:]\\\\d{2}[:]\\\\d{2})\" +\n          \"\\\\s\" + // separator\n          \"([\\\\w][\\\\w\\\\d\\\\.@-]*)\" + // host\n          \"\\\\s(.*)$\"", "var_name": "SYSLOG_MSG_RFC3164_0"}, {"original_string": "public static final int SYSLOG_PRIORITY_POS = 1;", "modifier": "public static final", "type": "int", "declarator": "SYSLOG_PRIORITY_POS = 1", "var_name": "SYSLOG_PRIORITY_POS"}, {"original_string": "public static final int SYSLOG_VERSION_POS = 2;", "modifier": "public static final", "type": "int", "declarator": "SYSLOG_VERSION_POS = 2", "var_name": "SYSLOG_VERSION_POS"}, {"original_string": "public static final int SYSLOG_TIMESTAMP_POS = 3;", "modifier": "public static final", "type": "int", "declarator": "SYSLOG_TIMESTAMP_POS = 3", "var_name": "SYSLOG_TIMESTAMP_POS"}, {"original_string": "public static final int SYSLOG_HOSTNAME_POS = 4;", "modifier": "public static final", "type": "int", "declarator": "SYSLOG_HOSTNAME_POS = 4", "var_name": "SYSLOG_HOSTNAME_POS"}, {"original_string": "public static final int SYSLOG_BODY_POS = 5;", "modifier": "public static final", "type": "int", "declarator": "SYSLOG_BODY_POS = 5", "var_name": "SYSLOG_BODY_POS"}, {"original_string": "private Mode m = Mode.START;", "modifier": "private", "type": "Mode", "declarator": "m = Mode.START", "var_name": "m"}, {"original_string": "private StringBuilder prio = new StringBuilder();", "modifier": "private", "type": "StringBuilder", "declarator": "prio = new StringBuilder()", "var_name": "prio"}, {"original_string": "private ByteArrayOutputStream baos;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "baos", "var_name": "baos"}, {"original_string": "private static final Logger logger = LoggerFactory\n      .getLogger(SyslogUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n      .getLogger(SyslogUtils.class)", "var_name": "logger"}, {"original_string": "public static final String SYSLOG_FACILITY = \"Facility\";", "modifier": "public static final", "type": "String", "declarator": "SYSLOG_FACILITY = \"Facility\"", "var_name": "SYSLOG_FACILITY"}, {"original_string": "public static final String SYSLOG_SEVERITY = \"Severity\";", "modifier": "public static final", "type": "String", "declarator": "SYSLOG_SEVERITY = \"Severity\"", "var_name": "SYSLOG_SEVERITY"}, {"original_string": "public static final String SYSLOG_PRIORITY = \"Priority\";", "modifier": "public static final", "type": "String", "declarator": "SYSLOG_PRIORITY = \"Priority\"", "var_name": "SYSLOG_PRIORITY"}, {"original_string": "public static final String SYSLOG_VERSION = \"Version\";", "modifier": "public static final", "type": "String", "declarator": "SYSLOG_VERSION = \"Version\"", "var_name": "SYSLOG_VERSION"}, {"original_string": "public static final String EVENT_STATUS = \"flume.syslog.status\";", "modifier": "public static final", "type": "String", "declarator": "EVENT_STATUS = \"flume.syslog.status\"", "var_name": "EVENT_STATUS"}, {"original_string": "public static final Integer MIN_SIZE = 10;", "modifier": "public static final", "type": "Integer", "declarator": "MIN_SIZE = 10", "var_name": "MIN_SIZE"}, {"original_string": "public static final Integer DEFAULT_SIZE = 2500;", "modifier": "public static final", "type": "Integer", "declarator": "DEFAULT_SIZE = 2500", "var_name": "DEFAULT_SIZE"}, {"original_string": "private final boolean isUdp;", "modifier": "private final", "type": "boolean", "declarator": "isUdp", "var_name": "isUdp"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private boolean isBadEvent;", "modifier": "private", "type": "boolean", "declarator": "isBadEvent", "var_name": "isBadEvent"}, {"original_string": "private boolean isIncompleteEvent;", "modifier": "private", "type": "boolean", "declarator": "isIncompleteEvent", "var_name": "isIncompleteEvent"}, {"original_string": "private Integer maxSize;", "modifier": "private", "type": "Integer", "declarator": "maxSize", "var_name": "maxSize"}, {"original_string": "private Set<String> keepFields;", "modifier": "private", "type": "Set<String>", "declarator": "keepFields", "var_name": "keepFields"}, {"original_string": "private ArrayList<SyslogFormatter> formats = new ArrayList<SyslogFormatter>();", "modifier": "private", "type": "ArrayList<SyslogFormatter>", "declarator": "formats = new ArrayList<SyslogFormatter>()", "var_name": "formats"}, {"original_string": "private String priority = null;", "modifier": "private", "type": "String", "declarator": "priority = null", "var_name": "priority"}, {"original_string": "private String version = null;", "modifier": "private", "type": "String", "declarator": "version = null", "var_name": "version"}, {"original_string": "private String timeStamp = null;", "modifier": "private", "type": "String", "declarator": "timeStamp = null", "var_name": "timeStamp"}, {"original_string": "private String hostName = null;", "modifier": "private", "type": "String", "declarator": "hostName = null", "var_name": "hostName"}, {"original_string": "private String msgBody = null;", "modifier": "private", "type": "String", "declarator": "msgBody = null", "var_name": "msgBody"}, {"original_string": "private static final String[] DEFAULT_FIELDS_TO_KEEP = {\n      SyslogSourceConfigurationConstants.CONFIG_KEEP_FIELDS_PRIORITY,\n      SyslogSourceConfigurationConstants.CONFIG_KEEP_FIELDS_VERSION,\n      SyslogSourceConfigurationConstants.CONFIG_KEEP_FIELDS_TIMESTAMP,\n      SyslogSourceConfigurationConstants.CONFIG_KEEP_FIELDS_HOSTNAME\n  };", "modifier": "private static final", "type": "String[]", "declarator": "DEFAULT_FIELDS_TO_KEEP = {\n      SyslogSourceConfigurationConstants.CONFIG_KEEP_FIELDS_PRIORITY,\n      SyslogSourceConfigurationConstants.CONFIG_KEEP_FIELDS_VERSION,\n      SyslogSourceConfigurationConstants.CONFIG_KEEP_FIELDS_TIMESTAMP,\n      SyslogSourceConfigurationConstants.CONFIG_KEEP_FIELDS_HOSTNAME\n  }", "var_name": "DEFAULT_FIELDS_TO_KEEP"}, {"original_string": "public static final String KEEP_FIELDS_ALL = \"--all--\";", "modifier": "public static final", "type": "String", "declarator": "KEEP_FIELDS_ALL = \"--all--\"", "var_name": "KEEP_FIELDS_ALL"}], "methods": [{"identifier": "keepAllFields", "parameters": "(Set<String> keepFields)", "modifiers": "public static", "return": "boolean", "signature": "boolean keepAllFields(Set<String> keepFields)", "full_signature": "public static boolean keepAllFields(Set<String> keepFields)", "class_method_signature": "SyslogUtils.keepAllFields(Set<String> keepFields)", "testcase": false, "constructor": false}, {"identifier": "chooseFieldsToKeep", "parameters": "(String keepFields)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> chooseFieldsToKeep(String keepFields)", "full_signature": "public static Set<String> chooseFieldsToKeep(String keepFields)", "class_method_signature": "SyslogUtils.chooseFieldsToKeep(String keepFields)", "testcase": false, "constructor": false}, {"identifier": "addFieldsToBody", "parameters": "(Set<String> keepFields,\n                                       String body,\n                                       String priority,\n                                       String version,\n                                       String timestamp,\n                                       String hostname)", "modifiers": "public static", "return": "String", "signature": "String addFieldsToBody(Set<String> keepFields,\n                                       String body,\n                                       String priority,\n                                       String version,\n                                       String timestamp,\n                                       String hostname)", "full_signature": "public static String addFieldsToBody(Set<String> keepFields,\n                                       String body,\n                                       String priority,\n                                       String version,\n                                       String timestamp,\n                                       String hostname)", "class_method_signature": "SyslogUtils.addFieldsToBody(Set<String> keepFields,\n                                       String body,\n                                       String priority,\n                                       String version,\n                                       String timestamp,\n                                       String hostname)", "testcase": false, "constructor": false}, {"identifier": "getIP", "parameters": "(SocketAddress socketAddress)", "modifiers": "public static", "return": "String", "signature": "String getIP(SocketAddress socketAddress)", "full_signature": "public static String getIP(SocketAddress socketAddress)", "class_method_signature": "SyslogUtils.getIP(SocketAddress socketAddress)", "testcase": false, "constructor": false}, {"identifier": "getHostname", "parameters": "(SocketAddress socketAddress)", "modifiers": "public static", "return": "String", "signature": "String getHostname(SocketAddress socketAddress)", "full_signature": "public static String getHostname(SocketAddress socketAddress)", "class_method_signature": "SyslogUtils.getHostname(SocketAddress socketAddress)", "testcase": false, "constructor": false}, {"identifier": "SyslogUtils", "parameters": "()", "modifiers": "public", "return": "", "signature": " SyslogUtils()", "full_signature": "public  SyslogUtils()", "class_method_signature": "SyslogUtils.SyslogUtils()", "testcase": false, "constructor": true}, {"identifier": "SyslogUtils", "parameters": "(boolean isUdp)", "modifiers": "public", "return": "", "signature": " SyslogUtils(boolean isUdp)", "full_signature": "public  SyslogUtils(boolean isUdp)", "class_method_signature": "SyslogUtils.SyslogUtils(boolean isUdp)", "testcase": false, "constructor": true}, {"identifier": "SyslogUtils", "parameters": "(Integer defaultSize, Set<String> keepFields, boolean isUdp)", "modifiers": "public", "return": "", "signature": " SyslogUtils(Integer defaultSize, Set<String> keepFields, boolean isUdp)", "full_signature": "public  SyslogUtils(Integer defaultSize, Set<String> keepFields, boolean isUdp)", "class_method_signature": "SyslogUtils.SyslogUtils(Integer defaultSize, Set<String> keepFields, boolean isUdp)", "testcase": false, "constructor": true}, {"identifier": "SyslogUtils", "parameters": "(Integer eventSize, Set<String> keepFields, boolean isUdp, Clock clock)", "modifiers": "public", "return": "", "signature": " SyslogUtils(Integer eventSize, Set<String> keepFields, boolean isUdp, Clock clock)", "full_signature": "public  SyslogUtils(Integer eventSize, Set<String> keepFields, boolean isUdp, Clock clock)", "class_method_signature": "SyslogUtils.SyslogUtils(Integer eventSize, Set<String> keepFields, boolean isUdp, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "addFormats", "parameters": "(Map<String, String> formatProp)", "modifiers": "public", "return": "void", "signature": "void addFormats(Map<String, String> formatProp)", "full_signature": "public void addFormats(Map<String, String> formatProp)", "class_method_signature": "SyslogUtils.addFormats(Map<String, String> formatProp)", "testcase": false, "constructor": false}, {"identifier": "initHeaderFormats", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initHeaderFormats()", "full_signature": "private void initHeaderFormats()", "class_method_signature": "SyslogUtils.initHeaderFormats()", "testcase": false, "constructor": false}, {"identifier": "buildEvent", "parameters": "()", "modifiers": "", "return": "Event", "signature": "Event buildEvent()", "full_signature": " Event buildEvent()", "class_method_signature": "SyslogUtils.buildEvent()", "testcase": false, "constructor": false}, {"identifier": "formatHeaders", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void formatHeaders()", "full_signature": "private void formatHeaders()", "class_method_signature": "SyslogUtils.formatHeaders()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reset()", "full_signature": "private void reset()", "class_method_signature": "SyslogUtils.reset()", "testcase": false, "constructor": false}, {"identifier": "extractEvent", "parameters": "(ChannelBuffer in)", "modifiers": "public", "return": "Event", "signature": "Event extractEvent(ChannelBuffer in)", "full_signature": "public Event extractEvent(ChannelBuffer in)", "class_method_signature": "SyslogUtils.extractEvent(ChannelBuffer in)", "testcase": false, "constructor": false}, {"identifier": "getEventSize", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getEventSize()", "full_signature": "public Integer getEventSize()", "class_method_signature": "SyslogUtils.getEventSize()", "testcase": false, "constructor": false}, {"identifier": "setEventSize", "parameters": "(Integer eventSize)", "modifiers": "public", "return": "void", "signature": "void setEventSize(Integer eventSize)", "full_signature": "public void setEventSize(Integer eventSize)", "class_method_signature": "SyslogUtils.setEventSize(Integer eventSize)", "testcase": false, "constructor": false}, {"identifier": "setKeepFields", "parameters": "(Set<String> keepFields)", "modifiers": "public", "return": "void", "signature": "void setKeepFields(Set<String> keepFields)", "full_signature": "public void setKeepFields(Set<String> keepFields)", "class_method_signature": "SyslogUtils.setKeepFields(Set<String> keepFields)", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/source/SyslogUtils.java"}, "focal_method": {"identifier": "extractEvent", "parameters": "(ChannelBuffer in)", "modifiers": "public", "return": "Event", "body": "public Event extractEvent(ChannelBuffer in) {\n\n    /* for protocol debugging\n    ByteBuffer bb = in.toByteBuffer();\n    int remaining = bb.remaining();\n    byte[] buf = new byte[remaining];\n    bb.get(buf);\n    HexDump.dump(buf, 0, System.out, 0);\n    */\n\n    byte b = 0;\n    Event e = null;\n    boolean doneReading = false;\n\n    try {\n      while (!doneReading && in.readable()) {\n        b = in.readByte();\n        switch (m) {\n          case START:\n            if (b == '<') {\n              baos.write(b);\n              m = Mode.PRIO;\n            } else if (b == '\\n') {\n              //If the character is \\n, it was because the last event was exactly\n              //as long  as the maximum size allowed and\n              //the only remaining character was the delimiter - '\\n', or\n              //multiple delimiters were sent in a row.\n              //Just ignore it, and move forward, don't change the mode.\n              //This is a no-op, just ignore it.\n              logger.debug(\"Delimiter found while in START mode, ignoring..\");\n\n            } else {\n              isBadEvent = true;\n              baos.write(b);\n              //Bad event, just dump everything as if it is data.\n              m = Mode.DATA;\n            }\n            break;\n          case PRIO:\n            baos.write(b);\n            if (b == '>') {\n              if (prio.length() == 0) {\n                isBadEvent = true;\n              }\n              m = Mode.DATA;\n            } else {\n              char ch = (char) b;\n              prio.append(ch);\n              // Priority is max 3 digits per both RFC 3164 and 5424\n              // With this check there is basically no danger of\n              // boas.size() exceeding this.maxSize before getting to the\n              // DATA state where this is actually checked\n              if (!Character.isDigit(ch) || prio.length() > 3) {\n                isBadEvent = true;\n                //If we hit a bad priority, just write as if everything is data.\n                m = Mode.DATA;\n              }\n            }\n            break;\n          case DATA:\n            // TCP syslog entries are separated by '\\n'\n            if (b == '\\n') {\n              e = buildEvent();\n              doneReading = true;\n            } else {\n              baos.write(b);\n            }\n            if (baos.size() == this.maxSize && !doneReading) {\n              isIncompleteEvent = true;\n              e = buildEvent();\n              doneReading = true;\n            }\n            break;\n        }\n\n      }\n\n      // UDP doesn't send a newline, so just use what we received\n      if (e == null && isUdp) {\n        doneReading = true;\n        e = buildEvent();\n      }\n    } finally {\n      // no-op\n    }\n\n    return e;\n  }", "signature": "Event extractEvent(ChannelBuffer in)", "full_signature": "public Event extractEvent(ChannelBuffer in)", "class_method_signature": "SyslogUtils.extractEvent(ChannelBuffer in)", "testcase": false, "constructor": false, "invocations": ["readable", "readByte", "write", "debug", "write", "write", "length", "append", "isDigit", "length", "buildEvent", "write", "size", "buildEvent", "buildEvent"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}