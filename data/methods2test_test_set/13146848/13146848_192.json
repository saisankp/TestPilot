{"test_class": {"identifier": "AsyncNotificationStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AsyncNotificationStrategy victim = new AsyncNotificationStrategy();", "modifier": "private", "type": "AsyncNotificationStrategy", "declarator": "victim = new AsyncNotificationStrategy()", "var_name": "victim"}], "file": "sejda-core/src/test/java/org/sejda/core/notification/strategy/AsyncNotificationStrategyTest.java"}, "test_case": {"identifier": "testNotifyEvent", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"rawtypes\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"rawtypes\")\n    public void testNotifyEvent() throws InterruptedException {\n        EventListener listener = mock(EventListener.class);\n        victim.notifyListener(listener, new TaskExecutionCompletedEvent(1L, NotifiableTaskMetadata.NULL));\n        // FIXME\n        // ugly but needed to give time for the async notification\n        Thread.sleep(1000);\n        verify(listener, times(1)).onEvent(any(AbstractNotificationEvent.class));\n    }", "signature": "void testNotifyEvent()", "full_signature": "@Test @SuppressWarnings(\"rawtypes\") public void testNotifyEvent()", "class_method_signature": "AsyncNotificationStrategyTest.testNotifyEvent()", "testcase": true, "constructor": false, "invocations": ["mock", "notifyListener", "sleep", "onEvent", "verify", "times", "any"]}, "focal_class": {"identifier": "AsyncNotificationStrategy", "superclass": "", "interfaces": "implements NotificationStrategy", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AsyncNotificationStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AsyncNotificationStrategy.class)", "var_name": "LOG"}, {"original_string": "private static final ThreadLocal<ExecutorService> THREAD_LOCAL = new ThreadLocal<ExecutorService>() {\n        @Override\n        protected ExecutorService initialValue() {\n            return Executors.newSingleThreadExecutor();\n        }\n    };", "modifier": "private static final", "type": "ThreadLocal<ExecutorService>", "declarator": "THREAD_LOCAL = new ThreadLocal<ExecutorService>() {\n        @Override\n        protected ExecutorService initialValue() {\n            return Executors.newSingleThreadExecutor();\n        }\n    }", "var_name": "THREAD_LOCAL"}], "methods": [{"identifier": "notifyListener", "parameters": "(final EventListener listener, final AbstractNotificationEvent event)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "void", "signature": "void notifyListener(final EventListener listener, final AbstractNotificationEvent event)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public void notifyListener(final EventListener listener, final AbstractNotificationEvent event)", "class_method_signature": "AsyncNotificationStrategy.notifyListener(final EventListener listener, final AbstractNotificationEvent event)", "testcase": false, "constructor": false}], "file": "sejda-core/src/main/java/org/sejda/core/notification/strategy/AsyncNotificationStrategy.java"}, "focal_method": {"identifier": "notifyListener", "parameters": "(final EventListener listener, final AbstractNotificationEvent event)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "void", "body": "@Override\n    @SuppressWarnings(\"rawtypes\")\n    public void notifyListener(final EventListener listener, final AbstractNotificationEvent event) {\n        if (listener != null) {\n            THREAD_LOCAL.get().execute(new NotifyRunnable(listener, event));\n        }\n    }", "signature": "void notifyListener(final EventListener listener, final AbstractNotificationEvent event)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public void notifyListener(final EventListener listener, final AbstractNotificationEvent event)", "class_method_signature": "AsyncNotificationStrategy.notifyListener(final EventListener listener, final AbstractNotificationEvent event)", "testcase": false, "constructor": false, "invocations": ["execute", "get"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}