{"test_class": {"identifier": "OptionsAndArgsTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/client/util/OptionsAndArgsTest.java"}, "test_case": {"identifier": "defaultCommands", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void defaultCommands() {\n        OptionsAndArgs o = opts();\n        assertEquals(o.getCommand(),\"list\");\n        o = opts(\"12\");\n        assertEquals(o.getCommand(), \"toggle\");\n    }", "signature": "void defaultCommands()", "full_signature": "@Test public void defaultCommands()", "class_method_signature": "OptionsAndArgsTest.defaultCommands()", "testcase": true, "constructor": false, "invocations": ["opts", "assertEquals", "getCommand", "opts", "assertEquals", "getCommand"]}, "focal_class": {"identifier": "OptionsAndArgs", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String,String> SHORT_OPTS = new HashMap<String, String>();", "modifier": "private static final", "type": "Map<String,String>", "declarator": "SHORT_OPTS = new HashMap<String, String>()", "var_name": "SHORT_OPTS"}, {"original_string": "private static final Set<String> OPTIONS = new HashSet<String>(Arrays.asList(\n            // JVM Agent options:\n            \"host\", \"port\", \"agentContext\", \"user\", \"password\",\n            \"quiet!\", \"verbose!\", \"version!\", \"executor\", \"threadNamePrefix\", \"threadNr\",\n            \"backlog\", \"hide!\", \"protocol\",\"authMode\",\"authClass\",\n            \"authUrl\", \"authPrincipalSpec\", \"authIgnoreCerts!\",\n            //https options:\n            \"keystore\", \"keystorePassword\", \"useSslClientAuthentication!\",\n            \"secureSocketProtocol\", \"keyStoreType\", \"keyManagerAlgorithm\", \"trustManagerAlgorithm\",\n            \"caCert\", \"serverCert\", \"serverKey\", \"serverKeyAlgorithm\", \"clientPrincipal\", \"extractClientCheck\",\n            \"sslProtocol\", \"sslCipherSuite\",\n            // Jolokia options:\n            \"historyMaxEntries\", \"debug!\", \"debugMaxEntries\",\n            \"logHandlerClass\", \"dispatcherClasses\", \"maxDepth\", \"maxCollectionSize\",\n            \"maxObjects\", \"restrictorClass\", \"policyLocation\", \"mbeanQualifier\",\n            \"canonicalNaming\", \"includeStackTrace\", \"serializeException\",\n            \"discoveryEnabled\", \"discoveryAgentUrl\", \"agentId\", \"agentDescription\",\n            // Others:\n            \"config\", \"help!\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "OPTIONS = new HashSet<String>(Arrays.asList(\n            // JVM Agent options:\n            \"host\", \"port\", \"agentContext\", \"user\", \"password\",\n            \"quiet!\", \"verbose!\", \"version!\", \"executor\", \"threadNamePrefix\", \"threadNr\",\n            \"backlog\", \"hide!\", \"protocol\",\"authMode\",\"authClass\",\n            \"authUrl\", \"authPrincipalSpec\", \"authIgnoreCerts!\",\n            //https options:\n            \"keystore\", \"keystorePassword\", \"useSslClientAuthentication!\",\n            \"secureSocketProtocol\", \"keyStoreType\", \"keyManagerAlgorithm\", \"trustManagerAlgorithm\",\n            \"caCert\", \"serverCert\", \"serverKey\", \"serverKeyAlgorithm\", \"clientPrincipal\", \"extractClientCheck\",\n            \"sslProtocol\", \"sslCipherSuite\",\n            // Jolokia options:\n            \"historyMaxEntries\", \"debug!\", \"debugMaxEntries\",\n            \"logHandlerClass\", \"dispatcherClasses\", \"maxDepth\", \"maxCollectionSize\",\n            \"maxObjects\", \"restrictorClass\", \"policyLocation\", \"mbeanQualifier\",\n            \"canonicalNaming\", \"includeStackTrace\", \"serializeException\",\n            \"discoveryEnabled\", \"discoveryAgentUrl\", \"agentId\", \"agentDescription\",\n            // Others:\n            \"config\", \"help!\"))", "var_name": "OPTIONS"}, {"original_string": "private static final Set<String> LIST_OPTIONS = new HashSet<String>(Arrays.asList(\n            \"clientPrincipal\", \"sslProtocol\", \"sslCipherSuite\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "LIST_OPTIONS = new HashSet<String>(Arrays.asList(\n            \"clientPrincipal\", \"sslProtocol\", \"sslCipherSuite\"))", "var_name": "LIST_OPTIONS"}, {"original_string": "private static final Set<String> COMMANDS_REQUIRING_PID =\n            new HashSet<String>(Arrays.asList(\"start\",\"stop\",\"toggle\",\"status\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "COMMANDS_REQUIRING_PID =\n            new HashSet<String>(Arrays.asList(\"start\",\"stop\",\"toggle\",\"status\"))", "var_name": "COMMANDS_REQUIRING_PID"}, {"original_string": "private String command;", "modifier": "private", "type": "String", "declarator": "command", "var_name": "command"}, {"original_string": "private List<String> extraArgs;", "modifier": "private", "type": "List<String>", "declarator": "extraArgs", "var_name": "extraArgs"}, {"original_string": "private Map<String,String> options;", "modifier": "private", "type": "Map<String,String>", "declarator": "options", "var_name": "options"}, {"original_string": "private boolean quiet;", "modifier": "private", "type": "boolean", "declarator": "quiet", "var_name": "quiet"}, {"original_string": "private boolean verbose;", "modifier": "private", "type": "boolean", "declarator": "verbose", "var_name": "verbose"}, {"original_string": "private File jarFile;", "modifier": "private", "type": "File", "declarator": "jarFile", "var_name": "jarFile"}, {"original_string": "private static final Pattern ARGUMENT_PATTERN_WITH_EQUAL = Pattern.compile(\"([^=]+)=(.*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "ARGUMENT_PATTERN_WITH_EQUAL = Pattern.compile(\"([^=]+)=(.*)\")", "var_name": "ARGUMENT_PATTERN_WITH_EQUAL"}], "methods": [{"identifier": "OptionsAndArgs", "parameters": "(Set<String> pCommands, String ... pArgs)", "modifiers": "public", "return": "", "signature": " OptionsAndArgs(Set<String> pCommands, String ... pArgs)", "full_signature": "public  OptionsAndArgs(Set<String> pCommands, String ... pArgs)", "class_method_signature": "OptionsAndArgs.OptionsAndArgs(Set<String> pCommands, String ... pArgs)", "testcase": false, "constructor": true}, {"identifier": "toAgentArg", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toAgentArg()", "full_signature": "public String toAgentArg()", "class_method_signature": "OptionsAndArgs.toAgentArg()", "testcase": false, "constructor": false}, {"identifier": "getPid", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPid()", "full_signature": "public String getPid()", "class_method_signature": "OptionsAndArgs.getPid()", "testcase": false, "constructor": false}, {"identifier": "getProcessPattern", "parameters": "()", "modifiers": "public", "return": "Pattern", "signature": "Pattern getProcessPattern()", "full_signature": "public Pattern getProcessPattern()", "class_method_signature": "OptionsAndArgs.getProcessPattern()", "testcase": false, "constructor": false}, {"identifier": "getCommand", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCommand()", "full_signature": "public String getCommand()", "class_method_signature": "OptionsAndArgs.getCommand()", "testcase": false, "constructor": false}, {"identifier": "getExtraArgs", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getExtraArgs()", "full_signature": "public List<String> getExtraArgs()", "class_method_signature": "OptionsAndArgs.getExtraArgs()", "testcase": false, "constructor": false}, {"identifier": "isQuiet", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isQuiet()", "full_signature": "public boolean isQuiet()", "class_method_signature": "OptionsAndArgs.isQuiet()", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPort()", "full_signature": "public String getPort()", "class_method_signature": "OptionsAndArgs.getPort()", "testcase": false, "constructor": false}, {"identifier": "isVerbose", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isVerbose()", "full_signature": "public boolean isVerbose()", "class_method_signature": "OptionsAndArgs.isVerbose()", "testcase": false, "constructor": false}, {"identifier": "needsVm", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean needsVm()", "full_signature": "public boolean needsVm()", "class_method_signature": "OptionsAndArgs.needsVm()", "testcase": false, "constructor": false}, {"identifier": "getJarFilePath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getJarFilePath()", "full_signature": "public String getJarFilePath()", "class_method_signature": "OptionsAndArgs.getJarFilePath()", "testcase": false, "constructor": false}, {"identifier": "getJarFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getJarFileName()", "full_signature": "public String getJarFileName()", "class_method_signature": "OptionsAndArgs.getJarFileName()", "testcase": false, "constructor": false}, {"identifier": "lookupJarFile", "parameters": "()", "modifiers": "public static", "return": "File", "signature": "File lookupJarFile()", "full_signature": "public static File lookupJarFile()", "class_method_signature": "OptionsAndArgs.lookupJarFile()", "testcase": false, "constructor": false}, {"identifier": "parseArgument", "parameters": "(String pArg, String pNextArgument)", "modifiers": "private", "return": "ArgParsed", "signature": "ArgParsed parseArgument(String pArg, String pNextArgument)", "full_signature": "private ArgParsed parseArgument(String pArg, String pNextArgument)", "class_method_signature": "OptionsAndArgs.parseArgument(String pArg, String pNextArgument)", "testcase": false, "constructor": false}, {"identifier": "parseShortOption", "parameters": "(String pArg, String pNextArgument)", "modifiers": "private", "return": "ArgParsed", "signature": "ArgParsed parseShortOption(String pArg, String pNextArgument)", "full_signature": "private ArgParsed parseShortOption(String pArg, String pNextArgument)", "class_method_signature": "OptionsAndArgs.parseShortOption(String pArg, String pNextArgument)", "testcase": false, "constructor": false}, {"identifier": "parseLongOption", "parameters": "(String pArg, String pNextArgument)", "modifiers": "private", "return": "ArgParsed", "signature": "ArgParsed parseLongOption(String pArg, String pNextArgument)", "full_signature": "private ArgParsed parseLongOption(String pArg, String pNextArgument)", "class_method_signature": "OptionsAndArgs.parseLongOption(String pArg, String pNextArgument)", "testcase": false, "constructor": false}, {"identifier": "getNextListIndexSuffix", "parameters": "(Map<String, String> options, String key)", "modifiers": "private", "return": "String", "signature": "String getNextListIndexSuffix(Map<String, String> options, String key)", "full_signature": "private String getNextListIndexSuffix(Map<String, String> options, String key)", "class_method_signature": "OptionsAndArgs.getNextListIndexSuffix(Map<String, String> options, String key)", "testcase": false, "constructor": false}, {"identifier": "verifyOptionWithArgument", "parameters": "(String pOpt, String pValue, String pNextArgument)", "modifiers": "private", "return": "void", "signature": "void verifyOptionWithArgument(String pOpt, String pValue, String pNextArgument)", "full_signature": "private void verifyOptionWithArgument(String pOpt, String pValue, String pNextArgument)", "class_method_signature": "OptionsAndArgs.verifyOptionWithArgument(String pOpt, String pValue, String pNextArgument)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Set<String> pCommands, String ... pArgs)", "modifiers": "private", "return": "void", "signature": "void init(Set<String> pCommands, String ... pArgs)", "full_signature": "private void init(Set<String> pCommands, String ... pArgs)", "class_method_signature": "OptionsAndArgs.init(Set<String> pCommands, String ... pArgs)", "testcase": false, "constructor": false}, {"identifier": "verifyCommandAndArgs", "parameters": "(String pCommand, List<String> pArgs)", "modifiers": "private", "return": "void", "signature": "void verifyCommandAndArgs(String pCommand, List<String> pArgs)", "full_signature": "private void verifyCommandAndArgs(String pCommand, List<String> pArgs)", "class_method_signature": "OptionsAndArgs.verifyCommandAndArgs(String pCommand, List<String> pArgs)", "testcase": false, "constructor": false}, {"identifier": "checkCommandAndArgs", "parameters": "(Set<String> pCommands, String ... pArgs)", "modifiers": "private", "return": "List<String>", "signature": "List<String> checkCommandAndArgs(Set<String> pCommands, String ... pArgs)", "full_signature": "private List<String> checkCommandAndArgs(Set<String> pCommands, String ... pArgs)", "class_method_signature": "OptionsAndArgs.checkCommandAndArgs(Set<String> pCommands, String ... pArgs)", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/client/util/OptionsAndArgs.java"}, "focal_method": {"identifier": "getCommand", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getCommand() {\n        return command;\n    }", "signature": "String getCommand()", "full_signature": "public String getCommand()", "class_method_signature": "OptionsAndArgs.getCommand()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}