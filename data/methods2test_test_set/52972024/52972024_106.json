{"test_class": {"identifier": "BootstrapPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IBootstrap bootstrapMock;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrapMock", "var_name": "bootstrapMock"}, {"original_string": "private ArgumentCaptor<IBootstrapItem> itemArgumentCaptor;", "modifier": "private", "type": "ArgumentCaptor<IBootstrapItem>", "declarator": "itemArgumentCaptor", "var_name": "itemArgumentCaptor"}], "file": "CoreFeatures/FeatureLoadingSystem/BootstrapPlugin/src/test/java/info/smart_tools/smartactors/feature_loading_system/bootstrap_plugin/BootstrapPluginTest.java"}, "test_case": {"identifier": "Should_throwWhenPluginContainsInvalidMethods", "parameters": "()", "modifiers": "@Test(expected = PluginException.class) public", "return": "void", "body": "@Test(expected = PluginException.class)\n    public void Should_throwWhenPluginContainsInvalidMethods()\n            throws Exception {\n        IPlugin plugin = new BootstrapPlugin(bootstrapMock) {\n            @BootstrapPlugin.Item(\"wrongItem\")\n            public void wrongItemMethod(int x) {}\n        };\n\n        plugin.load();\n    }", "signature": "void Should_throwWhenPluginContainsInvalidMethods()", "full_signature": "@Test(expected = PluginException.class) public void Should_throwWhenPluginContainsInvalidMethods()", "class_method_signature": "BootstrapPluginTest.Should_throwWhenPluginContainsInvalidMethods()", "testcase": true, "constructor": false, "invocations": ["load"]}, "focal_class": {"identifier": "BootstrapPlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "BootstrapPlugin", "parameters": "(final IBootstrap bootstrap)", "modifiers": "protected", "return": "", "signature": " BootstrapPlugin(final IBootstrap bootstrap)", "full_signature": "protected  BootstrapPlugin(final IBootstrap bootstrap)", "class_method_signature": "BootstrapPlugin.BootstrapPlugin(final IBootstrap bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void load()", "full_signature": "@Override public final void load()", "class_method_signature": "BootstrapPlugin.load()", "testcase": false, "constructor": false}], "file": "CoreFeatures/FeatureLoadingSystem/BootstrapPlugin/src/main/java/info/smart_tools/smartactors/feature_loading_system/bootstrap_plugin/BootstrapPlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public final", "return": "void", "body": "@Override\n    public final void load() throws PluginException {\n        try {\n            for (Method method : this.getClass().getMethods()) {\n                if (null == method.getAnnotation(Item.class)) {\n                    continue;\n                }\n\n                bootstrap.add(new MethodBootstrapItem(this, method));\n            }\n        } catch (InvalidArgumentException e) {\n            throw new PluginException(e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public final void load()", "class_method_signature": "BootstrapPlugin.load()", "testcase": false, "constructor": false, "invocations": ["getMethods", "getClass", "getAnnotation", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}