{"test_class": {"identifier": "PlanningVisitFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/planner/domain/PlanningVisitFactoryTest.java"}, "test_case": {"identifier": "visit_should_have_same_id_as_location_and_default_demand", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void visit_should_have_same_id_as_location_and_default_demand() {\n        long id = 4;\n        PlanningLocation location = PlanningLocationFactory.testLocation(id);\n\n        PlanningVisit visit = PlanningVisitFactory.fromLocation(location);\n\n        assertThat(visit.getId()).isEqualTo(location.getId());\n        assertThat(visit.getLocation()).isEqualTo(location);\n        assertThat(visit.getDemand()).isEqualTo(PlanningVisitFactory.DEFAULT_VISIT_DEMAND);\n    }", "signature": "void visit_should_have_same_id_as_location_and_default_demand()", "full_signature": "@Test void visit_should_have_same_id_as_location_and_default_demand()", "class_method_signature": "PlanningVisitFactoryTest.visit_should_have_same_id_as_location_and_default_demand()", "testcase": true, "constructor": false, "invocations": ["testLocation", "fromLocation", "isEqualTo", "assertThat", "getId", "getId", "isEqualTo", "assertThat", "getLocation", "isEqualTo", "assertThat", "getDemand"]}, "focal_class": {"identifier": "PlanningVisitFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int DEFAULT_VISIT_DEMAND = 1;", "modifier": "static final", "type": "int", "declarator": "DEFAULT_VISIT_DEMAND = 1", "var_name": "DEFAULT_VISIT_DEMAND"}], "methods": [{"identifier": "PlanningVisitFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " PlanningVisitFactory()", "full_signature": "private  PlanningVisitFactory()", "class_method_signature": "PlanningVisitFactory.PlanningVisitFactory()", "testcase": false, "constructor": true}, {"identifier": "fromLocation", "parameters": "(PlanningLocation location)", "modifiers": "public static", "return": "PlanningVisit", "signature": "PlanningVisit fromLocation(PlanningLocation location)", "full_signature": "public static PlanningVisit fromLocation(PlanningLocation location)", "class_method_signature": "PlanningVisitFactory.fromLocation(PlanningLocation location)", "testcase": false, "constructor": false}, {"identifier": "fromLocation", "parameters": "(PlanningLocation location, int demand)", "modifiers": "public static", "return": "PlanningVisit", "signature": "PlanningVisit fromLocation(PlanningLocation location, int demand)", "full_signature": "public static PlanningVisit fromLocation(PlanningLocation location, int demand)", "class_method_signature": "PlanningVisitFactory.fromLocation(PlanningLocation location, int demand)", "testcase": false, "constructor": false}, {"identifier": "testVisit", "parameters": "(long id)", "modifiers": "public static", "return": "PlanningVisit", "signature": "PlanningVisit testVisit(long id)", "full_signature": "public static PlanningVisit testVisit(long id)", "class_method_signature": "PlanningVisitFactory.testVisit(long id)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/domain/PlanningVisitFactory.java"}, "focal_method": {"identifier": "fromLocation", "parameters": "(PlanningLocation location)", "modifiers": "public static", "return": "PlanningVisit", "body": "public static PlanningVisit fromLocation(PlanningLocation location) {\n        return fromLocation(location, DEFAULT_VISIT_DEMAND);\n    }", "signature": "PlanningVisit fromLocation(PlanningLocation location)", "full_signature": "public static PlanningVisit fromLocation(PlanningLocation location)", "class_method_signature": "PlanningVisitFactory.fromLocation(PlanningLocation location)", "testcase": false, "constructor": false, "invocations": ["fromLocation"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}