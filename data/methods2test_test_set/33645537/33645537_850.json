{"test_class": {"identifier": "AbstractOnSubscribeTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/observables/AbstractOnSubscribeTest.java"}, "test_case": {"identifier": "testObserveOn", "parameters": "()", "modifiers": "@Test(timeout = 10000) public", "return": "void", "body": "@Test(timeout = 10000)\n    public void testObserveOn() {\n        final int start = 1;\n        final int count = 1000;\n        AbstractOnSubscribe<Integer, Void> aos = new AbstractOnSubscribe<Integer, Void>() {\n            @Override\n            protected void next(SubscriptionState<Integer, Void> state) {\n                long calls = state.calls();\n                if (calls <= count) {\n                    state.onNext((int)calls + start);\n                    if (calls == count) {\n                        state.onCompleted();\n                    }\n                }\n            }\n        };\n\n        @SuppressWarnings(\"unchecked\")\n        Observer<Object> o = mock(Observer.class);\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>(o);\n\n        aos.toObservable().observeOn(Schedulers.newThread()).subscribe(ts);\n        \n        ts.awaitTerminalEvent();\n        \n        verify(o, never()).onError(any(Throwable.class));\n        verify(o, times(count + 1)).onNext(any(Integer.class));\n        verify(o).onCompleted();\n        \n        for (int i = 0; i < ts.getOnNextEvents().size(); i++) {\n            Object object = ts.getOnNextEvents().get(i);\n            assertEquals(i + 1, object);\n        }\n    }", "signature": "void testObserveOn()", "full_signature": "@Test(timeout = 10000) public void testObserveOn()", "class_method_signature": "AbstractOnSubscribeTest.testObserveOn()", "testcase": true, "constructor": false, "invocations": ["calls", "onNext", "onCompleted", "mock", "subscribe", "observeOn", "toObservable", "newThread", "awaitTerminalEvent", "onError", "verify", "never", "any", "onNext", "verify", "times", "any", "onCompleted", "verify", "size", "getOnNextEvents", "get", "getOnNextEvents", "assertEquals"]}, "focal_class": {"identifier": "AbstractOnSubscribe", "superclass": "", "interfaces": "implements OnSubscribe<T>", "fields": [{"original_string": "private static final Func1<Object, Object> NULL_FUNC1 = new Func1<Object, Object>() {\n        @Override\n        public Object call(Object t1) {\n            return null;\n        }\n    };", "modifier": "private static final", "type": "Func1<Object, Object>", "declarator": "NULL_FUNC1 = new Func1<Object, Object>() {\n        @Override\n        public Object call(Object t1) {\n            return null;\n        }\n    }", "var_name": "NULL_FUNC1"}], "methods": [{"identifier": "onSubscribe", "parameters": "(Subscriber<? super T> subscriber)", "modifiers": "protected", "return": "S", "signature": "S onSubscribe(Subscriber<? super T> subscriber)", "full_signature": "protected S onSubscribe(Subscriber<? super T> subscriber)", "class_method_signature": "AbstractOnSubscribe.onSubscribe(Subscriber<? super T> subscriber)", "testcase": false, "constructor": false}, {"identifier": "onTerminated", "parameters": "(S state)", "modifiers": "protected", "return": "void", "signature": "void onTerminated(S state)", "full_signature": "protected void onTerminated(S state)", "class_method_signature": "AbstractOnSubscribe.onTerminated(S state)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(SubscriptionState<T, S> state)", "modifiers": "protected abstract", "return": "void", "signature": "void next(SubscriptionState<T, S> state)", "full_signature": "protected abstract void next(SubscriptionState<T, S> state)", "class_method_signature": "AbstractOnSubscribe.next(SubscriptionState<T, S> state)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(final Subscriber<? super T> subscriber)", "modifiers": "@Override public final", "return": "void", "signature": "void call(final Subscriber<? super T> subscriber)", "full_signature": "@Override public final void call(final Subscriber<? super T> subscriber)", "class_method_signature": "AbstractOnSubscribe.call(final Subscriber<? super T> subscriber)", "testcase": false, "constructor": false}, {"identifier": "toObservable", "parameters": "()", "modifiers": "public final", "return": "Observable<T>", "signature": "Observable<T> toObservable()", "full_signature": "public final Observable<T> toObservable()", "class_method_signature": "AbstractOnSubscribe.toObservable()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Action1<SubscriptionState<T, S>> next)", "modifiers": "public static", "return": "AbstractOnSubscribe<T, S>", "signature": "AbstractOnSubscribe<T, S> create(Action1<SubscriptionState<T, S>> next)", "full_signature": "public static AbstractOnSubscribe<T, S> create(Action1<SubscriptionState<T, S>> next)", "class_method_signature": "AbstractOnSubscribe.create(Action1<SubscriptionState<T, S>> next)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe)", "modifiers": "public static", "return": "AbstractOnSubscribe<T, S>", "signature": "AbstractOnSubscribe<T, S> create(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe)", "full_signature": "public static AbstractOnSubscribe<T, S> create(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe)", "class_method_signature": "AbstractOnSubscribe.create(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe, Action1<? super S> onTerminated)", "modifiers": "public static", "return": "AbstractOnSubscribe<T, S>", "signature": "AbstractOnSubscribe<T, S> create(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe, Action1<? super S> onTerminated)", "full_signature": "public static AbstractOnSubscribe<T, S> create(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe, Action1<? super S> onTerminated)", "class_method_signature": "AbstractOnSubscribe.create(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe, Action1<? super S> onTerminated)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/observables/AbstractOnSubscribe.java"}, "focal_method": {"identifier": "toObservable", "parameters": "()", "modifiers": "public final", "return": "Observable<T>", "body": "public final Observable<T> toObservable() {\n        return Observable.create(this);\n    }", "signature": "Observable<T> toObservable()", "full_signature": "public final Observable<T> toObservable()", "class_method_signature": "AbstractOnSubscribe.toObservable()", "testcase": false, "constructor": false, "invocations": ["create"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}