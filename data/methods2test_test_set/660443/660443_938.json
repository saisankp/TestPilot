{"test_class": {"identifier": "MmffAtomTypeMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static MmffAtomTypeMatcher INSTANCE = new MmffAtomTypeMatcher();", "modifier": "static", "type": "MmffAtomTypeMatcher", "declarator": "INSTANCE = new MmffAtomTypeMatcher()", "var_name": "INSTANCE"}], "file": "tool/forcefield/src/test/java/org/openscience/cdk/forcefield/mmff/MmffAtomTypeMatcherTest.java"}, "test_case": {"identifier": "aromaticCompoundsAreRejected", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void aromaticCompoundsAreRejected() {\n        IAtomContainer container = new AtomContainer();\n        container.addAtom(new Atom(\"C\"));\n        container.getAtom(0).setImplicitHydrogenCount(4);\n        container.getAtom(0).setFlag(CDKConstants.ISAROMATIC, true);\n        INSTANCE.symbolicTypes(container);\n    }", "signature": "void aromaticCompoundsAreRejected()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void aromaticCompoundsAreRejected()", "class_method_signature": "MmffAtomTypeMatcherTest.aromaticCompoundsAreRejected()", "testcase": true, "constructor": false, "invocations": ["addAtom", "setImplicitHydrogenCount", "getAtom", "setFlag", "getAtom", "symbolicTypes"]}, "focal_class": {"identifier": "MmffAtomTypeMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MmffAromaticTypeMapping aromaticTypes = new MmffAromaticTypeMapping();", "modifier": "private final", "type": "MmffAromaticTypeMapping", "declarator": "aromaticTypes = new MmffAromaticTypeMapping()", "var_name": "aromaticTypes"}, {"original_string": "private final AtomTypePattern[]       patterns;", "modifier": "private final", "type": "AtomTypePattern[]", "declarator": "patterns", "var_name": "patterns"}, {"original_string": "private final Map<String, String>     hydrogenMap;", "modifier": "private final", "type": "Map<String, String>", "declarator": "hydrogenMap", "var_name": "hydrogenMap"}], "methods": [{"identifier": "MmffAtomTypeMatcher", "parameters": "()", "modifiers": "", "return": "", "signature": " MmffAtomTypeMatcher()", "full_signature": "  MmffAtomTypeMatcher()", "class_method_signature": "MmffAtomTypeMatcher.MmffAtomTypeMatcher()", "testcase": false, "constructor": true}, {"identifier": "symbolicTypes", "parameters": "(final IAtomContainer container)", "modifiers": "", "return": "String[]", "signature": "String[] symbolicTypes(final IAtomContainer container)", "full_signature": " String[] symbolicTypes(final IAtomContainer container)", "class_method_signature": "MmffAtomTypeMatcher.symbolicTypes(final IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "symbolicTypes", "parameters": "(final IAtomContainer container, final int[][] graph, final EdgeToBondMap bonds, final Set<IBond> mmffArom)", "modifiers": "", "return": "String[]", "signature": "String[] symbolicTypes(final IAtomContainer container, final int[][] graph, final EdgeToBondMap bonds, final Set<IBond> mmffArom)", "full_signature": " String[] symbolicTypes(final IAtomContainer container, final int[][] graph, final EdgeToBondMap bonds, final Set<IBond> mmffArom)", "class_method_signature": "MmffAtomTypeMatcher.symbolicTypes(final IAtomContainer container, final int[][] graph, final EdgeToBondMap bonds, final Set<IBond> mmffArom)", "testcase": false, "constructor": false}, {"identifier": "fixNCNTypes", "parameters": "(String[] symbs, int[][] graph)", "modifiers": "private", "return": "void", "signature": "void fixNCNTypes(String[] symbs, int[][] graph)", "full_signature": "private void fixNCNTypes(String[] symbs, int[][] graph)", "class_method_signature": "MmffAtomTypeMatcher.fixNCNTypes(String[] symbs, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "checkPreconditions", "parameters": "(IAtomContainer container)", "modifiers": "private", "return": "void", "signature": "void checkPreconditions(IAtomContainer container)", "full_signature": "private void checkPreconditions(IAtomContainer container)", "class_method_signature": "MmffAtomTypeMatcher.checkPreconditions(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "assignHydrogenTypes", "parameters": "(IAtomContainer container, String[] symbs, int[][] graph)", "modifiers": "private", "return": "void", "signature": "void assignHydrogenTypes(IAtomContainer container, String[] symbs, int[][] graph)", "full_signature": "private void assignHydrogenTypes(IAtomContainer container, String[] symbs, int[][] graph)", "class_method_signature": "MmffAtomTypeMatcher.assignHydrogenTypes(IAtomContainer container, String[] symbs, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "assignPreliminaryTypes", "parameters": "(IAtomContainer container, String[] symbs)", "modifiers": "private", "return": "void", "signature": "void assignPreliminaryTypes(IAtomContainer container, String[] symbs)", "full_signature": "private void assignPreliminaryTypes(IAtomContainer container, String[] symbs)", "class_method_signature": "MmffAtomTypeMatcher.assignPreliminaryTypes(IAtomContainer container, String[] symbs)", "testcase": false, "constructor": false}, {"identifier": "loadPatterns", "parameters": "(InputStream smaIn)", "modifiers": "static", "return": "AtomTypePattern[]", "signature": "AtomTypePattern[] loadPatterns(InputStream smaIn)", "full_signature": "static AtomTypePattern[] loadPatterns(InputStream smaIn)", "class_method_signature": "MmffAtomTypeMatcher.loadPatterns(InputStream smaIn)", "testcase": false, "constructor": false}, {"identifier": "loadHydrogenDefinitions", "parameters": "(InputStream hdefIn)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> loadHydrogenDefinitions(InputStream hdefIn)", "full_signature": "private Map<String, String> loadHydrogenDefinitions(InputStream hdefIn)", "class_method_signature": "MmffAtomTypeMatcher.loadHydrogenDefinitions(InputStream hdefIn)", "testcase": false, "constructor": false}, {"identifier": "skipLine", "parameters": "(String line)", "modifiers": "private static", "return": "boolean", "signature": "boolean skipLine(String line)", "full_signature": "private static boolean skipLine(String line)", "class_method_signature": "MmffAtomTypeMatcher.skipLine(String line)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(InputStream in)", "modifiers": "private static", "return": "void", "signature": "void close(InputStream in)", "full_signature": "private static void close(InputStream in)", "class_method_signature": "MmffAtomTypeMatcher.close(InputStream in)", "testcase": false, "constructor": false}], "file": "tool/forcefield/src/main/java/org/openscience/cdk/forcefield/mmff/MmffAtomTypeMatcher.java"}, "focal_method": {"identifier": "symbolicTypes", "parameters": "(final IAtomContainer container)", "modifiers": "", "return": "String[]", "body": "String[] symbolicTypes(final IAtomContainer container) {\n        EdgeToBondMap bonds = EdgeToBondMap.withSpaceFor(container);\n        int[][] graph = GraphUtil.toAdjList(container, bonds);\n        return symbolicTypes(container, graph, bonds, new HashSet<IBond>());\n    }", "signature": "String[] symbolicTypes(final IAtomContainer container)", "full_signature": " String[] symbolicTypes(final IAtomContainer container)", "class_method_signature": "MmffAtomTypeMatcher.symbolicTypes(final IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["withSpaceFor", "toAdjList", "symbolicTypes"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}