{"test_class": {"identifier": "MoveSplitMergeTest", "superclass": "", "interfaces": "", "fields": [], "file": "JAICore/jaicore-basic/src/test/java/ai/libs/jaicore/basic/metric/MoveSplitMergeTest.java"}, "test_case": {"identifier": "testCorrectnessForDistanceCalculation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCorrectnessForDistanceCalculation() {\n        // Input.\n        double[] timeSeries1 = { 1, 1, 1, 1, 1, 1 };\n        double[] timeSeries2 = { 1, 1, 1, 1, 1, 1 };\n        // Expectation.\n        double expectation = 0;\n\n        MoveSplitMerge msm = new MoveSplitMerge(1.0);\n        double distance = msm.distance(timeSeries1, timeSeries2);\n\n        assertEquals(expectation, distance, 0);\n    }", "signature": "void testCorrectnessForDistanceCalculation()", "full_signature": "@Test public void testCorrectnessForDistanceCalculation()", "class_method_signature": "MoveSplitMergeTest.testCorrectnessForDistanceCalculation()", "testcase": true, "constructor": false, "invocations": ["distance", "assertEquals"]}, "focal_class": {"identifier": "MoveSplitMerge", "superclass": "", "interfaces": "implements IDistanceMetric", "fields": [{"original_string": "private double c;", "modifier": "private", "type": "double", "declarator": "c", "var_name": "c"}], "methods": [{"identifier": "MoveSplitMerge", "parameters": "(double c)", "modifiers": "public", "return": "", "signature": " MoveSplitMerge(double c)", "full_signature": "public  MoveSplitMerge(double c)", "class_method_signature": "MoveSplitMerge.MoveSplitMerge(double c)", "testcase": false, "constructor": true}, {"identifier": "distance", "parameters": "(double[] a, double[] b)", "modifiers": "@Override public", "return": "double", "signature": "double distance(double[] a, double[] b)", "full_signature": "@Override public double distance(double[] a, double[] b)", "class_method_signature": "MoveSplitMerge.distance(double[] a, double[] b)", "testcase": false, "constructor": false}, {"identifier": "c", "parameters": "(double a, double aBefore, double b)", "modifiers": "private", "return": "double", "signature": "double c(double a, double aBefore, double b)", "full_signature": "private double c(double a, double aBefore, double b)", "class_method_signature": "MoveSplitMerge.c(double a, double aBefore, double b)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-basic/src/main/java/ai/libs/jaicore/basic/metric/MoveSplitMerge.java"}, "focal_method": {"identifier": "distance", "parameters": "(double[] a, double[] b)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double distance(double[] a, double[] b) {\n        int n = a.length;\n        int m = b.length;\n        double[][] cost = new double[n][m];\n\n        // Initialization.\n        cost[0][0] = Math.abs(a[0] - b[0]);\n        for (int i = 1; i < n; i++) {\n            cost[i][0] = cost[i - 1][0] + c(a[i], a[i - 1], b[0]);\n        }\n        for (int j = 1; j < m; j++) {\n            cost[0][j] = cost[0][j - 1] + c(b[j], a[0], b[j - 1]);\n        }\n\n        // Dynamic programming.\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                double costMove = cost[i - 1][j - 1] + Math.abs(a[i] - b[j]);\n                double cost2 = cost[i - 1][j] + c(a[i], a[i - 1], b[j]);\n                double cost3 = cost[i][j - 1] + c(b[j], a[i], b[j - 1]);\n                cost[i][j] = Math.min(costMove, Math.min(cost2, cost3));\n            }\n        }\n\n        return cost[n - 1][m - 1];\n    }", "signature": "double distance(double[] a, double[] b)", "full_signature": "@Override public double distance(double[] a, double[] b)", "class_method_signature": "MoveSplitMerge.distance(double[] a, double[] b)", "testcase": false, "constructor": false, "invocations": ["abs", "c", "c", "abs", "c", "c", "min", "min"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}