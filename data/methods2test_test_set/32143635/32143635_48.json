{"test_class": {"identifier": "RococoaTest", "superclass": "extends RococoaTestCase", "interfaces": "", "fields": [], "file": "rococoa/rococoa-core/src/test/java/org/rococoa/RococoaTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testCreate() {\n        NSNumber fortyTwo = NSNumber.CLASS.numberWithInt(42);\n        assertEquals(42, fortyTwo.intValue());        \n    }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "RococoaTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["numberWithInt", "assertEquals", "intValue"]}, "focal_class": {"identifier": "Rococoa", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logging = Logger.getLogger(\"org.rococoa.proxy\");", "modifier": "private static", "type": "Logger", "declarator": "logging = Logger.getLogger(\"org.rococoa.proxy\")", "var_name": "logging"}], "methods": [{"identifier": "createClass", "parameters": "(String ocClassName, Class<T> type)", "modifiers": "public static", "return": "T", "signature": "T createClass(String ocClassName, Class<T> type)", "full_signature": "public static T createClass(String ocClassName, Class<T> type)", "class_method_signature": "Rococoa.createClass(String ocClassName, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String ocClassName, Class<T> javaClass, String ocMethodName, Object... args)", "modifiers": "public static", "return": "T", "signature": "T create(String ocClassName, Class<T> javaClass, String ocMethodName, Object... args)", "full_signature": "public static T create(String ocClassName, Class<T> javaClass, String ocMethodName, Object... args)", "class_method_signature": "Rococoa.create(String ocClassName, Class<T> javaClass, String ocMethodName, Object... args)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String ocClassName, Class<T> javaClass)", "modifiers": "public static", "return": "T", "signature": "T create(String ocClassName, Class<T> javaClass)", "full_signature": "public static T create(String ocClassName, Class<T> javaClass)", "class_method_signature": "Rococoa.create(String ocClassName, Class<T> javaClass)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String ocClassName, Class<T> javaClass,\n            String ocFactoryName, \n            boolean retain,\n            Object... args)", "modifiers": "private static", "return": "T", "signature": "T create(String ocClassName, Class<T> javaClass,\n            String ocFactoryName, \n            boolean retain,\n            Object... args)", "full_signature": "private static T create(String ocClassName, Class<T> javaClass,\n            String ocFactoryName, \n            boolean retain,\n            Object... args)", "class_method_signature": "Rococoa.create(String ocClassName, Class<T> javaClass,\n            String ocFactoryName, \n            boolean retain,\n            Object... args)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(ID id, Class<T> javaClass)", "modifiers": "public static", "return": "T", "signature": "T wrap(ID id, Class<T> javaClass)", "full_signature": "public static T wrap(ID id, Class<T> javaClass)", "class_method_signature": "Rococoa.wrap(ID id, Class<T> javaClass)", "testcase": false, "constructor": false}, {"identifier": "cast", "parameters": "(ObjCObject object, Class<T> desiredType)", "modifiers": "public static", "return": "T", "signature": "T cast(ObjCObject object, Class<T> desiredType)", "full_signature": "public static T cast(ObjCObject object, Class<T> desiredType)", "class_method_signature": "Rococoa.cast(ObjCObject object, Class<T> desiredType)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(ID id, Class<T> javaClass, boolean retain)", "modifiers": "public static", "return": "T", "signature": "T wrap(ID id, Class<T> javaClass, boolean retain)", "full_signature": "public static T wrap(ID id, Class<T> javaClass, boolean retain)", "class_method_signature": "Rococoa.wrap(ID id, Class<T> javaClass, boolean retain)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(Object javaObject)", "modifiers": "@Deprecated public static", "return": "ID", "signature": "ID wrap(Object javaObject)", "full_signature": "@Deprecated public static ID wrap(Object javaObject)", "class_method_signature": "Rococoa.wrap(Object javaObject)", "testcase": false, "constructor": false}, {"identifier": "proxy", "parameters": "(Object javaObject)", "modifiers": "public static", "return": "ObjCObject", "signature": "ObjCObject proxy(Object javaObject)", "full_signature": "public static ObjCObject proxy(Object javaObject)", "class_method_signature": "Rococoa.proxy(Object javaObject)", "testcase": false, "constructor": false}, {"identifier": "proxy", "parameters": "(Object javaObject, Class<T> javaType)", "modifiers": "public static", "return": "T", "signature": "T proxy(Object javaObject, Class<T> javaType)", "full_signature": "public static T proxy(Object javaObject, Class<T> javaType)", "class_method_signature": "Rococoa.proxy(Object javaObject, Class<T> javaType)", "testcase": false, "constructor": false}, {"identifier": "createProxy", "parameters": "(final Class<T> type, ObjCObjectInvocationHandler invocationHandler)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "T", "signature": "T createProxy(final Class<T> type, ObjCObjectInvocationHandler invocationHandler)", "full_signature": "@SuppressWarnings(\"unchecked\") private static T createProxy(final Class<T> type, ObjCObjectInvocationHandler invocationHandler)", "class_method_signature": "Rococoa.createProxy(final Class<T> type, ObjCObjectInvocationHandler invocationHandler)", "testcase": false, "constructor": false}, {"identifier": "checkRetainCount", "parameters": "(ID ocInstance, int expected)", "modifiers": "private static", "return": "void", "signature": "void checkRetainCount(ID ocInstance, int expected)", "full_signature": "private static void checkRetainCount(ID ocInstance, int expected)", "class_method_signature": "Rococoa.checkRetainCount(ID ocInstance, int expected)", "testcase": false, "constructor": false}, {"identifier": "Rococoa", "parameters": "()", "modifiers": "private", "return": "", "signature": " Rococoa()", "full_signature": "private  Rococoa()", "class_method_signature": "Rococoa.Rococoa()", "testcase": false, "constructor": true}], "file": "rococoa/rococoa-core/src/main/java/org/rococoa/Rococoa.java"}, "focal_method": {"identifier": "create", "parameters": "(String ocClassName, Class<T> javaClass, String ocMethodName, Object... args)", "modifiers": "public static", "return": "T", "body": "public static <T extends ObjCObject> T create(String ocClassName, Class<T> javaClass, String ocMethodName, Object... args) {\n        boolean weOwnObject = Foundation.selectorNameMeansWeOwnReturnedObject(ocMethodName);\n        \n        // If we don't own the object we know that it has been autorelease'd\n        // But we need to own these objects, so that they are not dealloc'd when\n        // the pool is release'd. So we retain them.\n        // Objects that we own (because they were created with 'alloc' or 'new')\n        // have not been autorelease'd, so we don't retain them.\n        boolean retain = !weOwnObject;\n        return create(ocClassName, javaClass, ocMethodName, retain, args);\n    }", "signature": "T create(String ocClassName, Class<T> javaClass, String ocMethodName, Object... args)", "full_signature": "public static T create(String ocClassName, Class<T> javaClass, String ocMethodName, Object... args)", "class_method_signature": "Rococoa.create(String ocClassName, Class<T> javaClass, String ocMethodName, Object... args)", "testcase": false, "constructor": false, "invocations": ["selectorNameMeansWeOwnReturnedObject", "create"]}, "repository": {"repo_id": 32143635, "url": "https://github.com/iterate-ch/rococoa", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 17, "size": 2377, "license": "licensed"}}