{"test_class": {"identifier": "SolverManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final VehicleRoutingSolution solution = SolutionFactory.emptySolution();", "modifier": "private final", "type": "VehicleRoutingSolution", "declarator": "solution = SolutionFactory.emptySolution()", "var_name": "solution"}, {"original_string": "private final PlanningVehicle testVehicle = PlanningVehicleFactory.testVehicle(1);", "modifier": "private final", "type": "PlanningVehicle", "declarator": "testVehicle = PlanningVehicleFactory.testVehicle(1)", "var_name": "testVehicle"}, {"original_string": "private final PlanningVisit testVisit = PlanningVisitFactory.testVisit(1);", "modifier": "private final", "type": "PlanningVisit", "declarator": "testVisit = PlanningVisitFactory.testVisit(1)", "var_name": "testVisit"}, {"original_string": "@Captor\n    private ArgumentCaptor<VehicleRoutingSolution> solutionArgumentCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<VehicleRoutingSolution>", "declarator": "solutionArgumentCaptor", "var_name": "solutionArgumentCaptor"}, {"original_string": "@Mock\n    private BestSolutionChangedEvent<VehicleRoutingSolution> bestSolutionChangedEvent;", "modifier": "@Mock\n    private", "type": "BestSolutionChangedEvent<VehicleRoutingSolution>", "declarator": "bestSolutionChangedEvent", "var_name": "bestSolutionChangedEvent"}, {"original_string": "@Mock\n    private ListenableFuture<VehicleRoutingSolution> solverFuture;", "modifier": "@Mock\n    private", "type": "ListenableFuture<VehicleRoutingSolution>", "declarator": "solverFuture", "var_name": "solverFuture"}, {"original_string": "@Mock\n    private Solver<VehicleRoutingSolution> solver;", "modifier": "@Mock\n    private", "type": "Solver<VehicleRoutingSolution>", "declarator": "solver", "var_name": "solver"}, {"original_string": "@Mock\n    private AsyncListenableTaskExecutor executor;", "modifier": "@Mock\n    private", "type": "AsyncListenableTaskExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "@Mock\n    private RouteChangedEventPublisher routeChangedEventPublisher;", "modifier": "@Mock\n    private", "type": "RouteChangedEventPublisher", "declarator": "routeChangedEventPublisher", "var_name": "routeChangedEventPublisher"}, {"original_string": "@InjectMocks\n    private SolverManager solverManager;", "modifier": "@InjectMocks\n    private", "type": "SolverManager", "declarator": "solverManager", "var_name": "solverManager"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/planner/SolverManagerTest.java"}, "test_case": {"identifier": "ignore_new_best_solutions_when_unprocessed_fact_changes", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void ignore_new_best_solutions_when_unprocessed_fact_changes() {\n        // arrange\n        when(bestSolutionChangedEvent.isEveryProblemFactChangeProcessed()).thenReturn(false);\n\n        // act\n        solverManager.bestSolutionChanged(bestSolutionChangedEvent);\n\n        // assert\n        verify(bestSolutionChangedEvent, never()).getNewBestSolution();\n        verify(routeChangedEventPublisher, never()).publishSolution(any());\n    }", "signature": "void ignore_new_best_solutions_when_unprocessed_fact_changes()", "full_signature": "@Test void ignore_new_best_solutions_when_unprocessed_fact_changes()", "class_method_signature": "SolverManagerTest.ignore_new_best_solutions_when_unprocessed_fact_changes()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isEveryProblemFactChangeProcessed", "bestSolutionChanged", "getNewBestSolution", "verify", "never", "publishSolution", "verify", "never", "any"]}, "focal_class": {"identifier": "SolverManager", "superclass": "", "interfaces": "implements SolverEventListener<VehicleRoutingSolution>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SolverManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SolverManager.class)", "var_name": "logger"}, {"original_string": "private final Solver<VehicleRoutingSolution> solver;", "modifier": "private final", "type": "Solver<VehicleRoutingSolution>", "declarator": "solver", "var_name": "solver"}, {"original_string": "private final AsyncListenableTaskExecutor executor;", "modifier": "private final", "type": "AsyncListenableTaskExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private final RouteChangedEventPublisher routeChangedEventPublisher;", "modifier": "private final", "type": "RouteChangedEventPublisher", "declarator": "routeChangedEventPublisher", "var_name": "routeChangedEventPublisher"}, {"original_string": "private final ApplicationEventPublisher eventPublisher;", "modifier": "private final", "type": "ApplicationEventPublisher", "declarator": "eventPublisher", "var_name": "eventPublisher"}, {"original_string": "private ListenableFuture<VehicleRoutingSolution> solverFuture;", "modifier": "private", "type": "ListenableFuture<VehicleRoutingSolution>", "declarator": "solverFuture", "var_name": "solverFuture"}], "methods": [{"identifier": "SolverManager", "parameters": "(\n            Solver<VehicleRoutingSolution> solver,\n            AsyncListenableTaskExecutor executor,\n            RouteChangedEventPublisher routeChangedEventPublisher,\n            ApplicationEventPublisher eventPublisher)", "modifiers": "@Autowired", "return": "", "signature": " SolverManager(\n            Solver<VehicleRoutingSolution> solver,\n            AsyncListenableTaskExecutor executor,\n            RouteChangedEventPublisher routeChangedEventPublisher,\n            ApplicationEventPublisher eventPublisher)", "full_signature": "@Autowired  SolverManager(\n            Solver<VehicleRoutingSolution> solver,\n            AsyncListenableTaskExecutor executor,\n            RouteChangedEventPublisher routeChangedEventPublisher,\n            ApplicationEventPublisher eventPublisher)", "class_method_signature": "SolverManager.SolverManager(\n            Solver<VehicleRoutingSolution> solver,\n            AsyncListenableTaskExecutor executor,\n            RouteChangedEventPublisher routeChangedEventPublisher,\n            ApplicationEventPublisher eventPublisher)", "testcase": false, "constructor": true}, {"identifier": "bestSolutionChanged", "parameters": "(BestSolutionChangedEvent<VehicleRoutingSolution> bestSolutionChangedEvent)", "modifiers": "@Override public", "return": "void", "signature": "void bestSolutionChanged(BestSolutionChangedEvent<VehicleRoutingSolution> bestSolutionChangedEvent)", "full_signature": "@Override public void bestSolutionChanged(BestSolutionChangedEvent<VehicleRoutingSolution> bestSolutionChangedEvent)", "class_method_signature": "SolverManager.bestSolutionChanged(BestSolutionChangedEvent<VehicleRoutingSolution> bestSolutionChangedEvent)", "testcase": false, "constructor": false}, {"identifier": "startSolver", "parameters": "(VehicleRoutingSolution solution)", "modifiers": "", "return": "void", "signature": "void startSolver(VehicleRoutingSolution solution)", "full_signature": " void startSolver(VehicleRoutingSolution solution)", "class_method_signature": "SolverManager.startSolver(VehicleRoutingSolution solution)", "testcase": false, "constructor": false}, {"identifier": "stopSolver", "parameters": "()", "modifiers": "", "return": "void", "signature": "void stopSolver()", "full_signature": " void stopSolver()", "class_method_signature": "SolverManager.stopSolver()", "testcase": false, "constructor": false}, {"identifier": "assertSolverIsAlive", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void assertSolverIsAlive()", "full_signature": "private void assertSolverIsAlive()", "class_method_signature": "SolverManager.assertSolverIsAlive()", "testcase": false, "constructor": false}, {"identifier": "addVisit", "parameters": "(PlanningVisit visit)", "modifiers": "", "return": "void", "signature": "void addVisit(PlanningVisit visit)", "full_signature": " void addVisit(PlanningVisit visit)", "class_method_signature": "SolverManager.addVisit(PlanningVisit visit)", "testcase": false, "constructor": false}, {"identifier": "removeVisit", "parameters": "(PlanningVisit visit)", "modifiers": "", "return": "void", "signature": "void removeVisit(PlanningVisit visit)", "full_signature": " void removeVisit(PlanningVisit visit)", "class_method_signature": "SolverManager.removeVisit(PlanningVisit visit)", "testcase": false, "constructor": false}, {"identifier": "addVehicle", "parameters": "(PlanningVehicle vehicle)", "modifiers": "", "return": "void", "signature": "void addVehicle(PlanningVehicle vehicle)", "full_signature": " void addVehicle(PlanningVehicle vehicle)", "class_method_signature": "SolverManager.addVehicle(PlanningVehicle vehicle)", "testcase": false, "constructor": false}, {"identifier": "removeVehicle", "parameters": "(PlanningVehicle vehicle)", "modifiers": "", "return": "void", "signature": "void removeVehicle(PlanningVehicle vehicle)", "full_signature": " void removeVehicle(PlanningVehicle vehicle)", "class_method_signature": "SolverManager.removeVehicle(PlanningVehicle vehicle)", "testcase": false, "constructor": false}, {"identifier": "changeCapacity", "parameters": "(PlanningVehicle vehicle)", "modifiers": "", "return": "void", "signature": "void changeCapacity(PlanningVehicle vehicle)", "full_signature": " void changeCapacity(PlanningVehicle vehicle)", "class_method_signature": "SolverManager.changeCapacity(PlanningVehicle vehicle)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/SolverManager.java"}, "focal_method": {"identifier": "bestSolutionChanged", "parameters": "(BestSolutionChangedEvent<VehicleRoutingSolution> bestSolutionChangedEvent)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void bestSolutionChanged(BestSolutionChangedEvent<VehicleRoutingSolution> bestSolutionChangedEvent) {\n        // CAUTION! This runs on the solver thread. Implications:\n        // 1. The method should be as quick as possible to avoid blocking solver unnecessarily.\n        // 2. This place is a potential source of race conditions.\n        if (!bestSolutionChangedEvent.isEveryProblemFactChangeProcessed()) {\n            logger.info(\"Ignoring a new best solution that has some problem facts missing\");\n            return;\n        }\n        // TODO Race condition, if a servlet thread deletes that location in the middle of this method happening\n        //      on the solver thread. Make sure that location is still in the repository.\n        //      Maybe repair the solution OR ignore if it's inconsistent (log a WARNING).\n        routeChangedEventPublisher.publishSolution(bestSolutionChangedEvent.getNewBestSolution()); // TODO @Async\n    }", "signature": "void bestSolutionChanged(BestSolutionChangedEvent<VehicleRoutingSolution> bestSolutionChangedEvent)", "full_signature": "@Override public void bestSolutionChanged(BestSolutionChangedEvent<VehicleRoutingSolution> bestSolutionChangedEvent)", "class_method_signature": "SolverManager.bestSolutionChanged(BestSolutionChangedEvent<VehicleRoutingSolution> bestSolutionChangedEvent)", "testcase": false, "constructor": false, "invocations": ["isEveryProblemFactChangeProcessed", "info", "publishSolution", "getNewBestSolution"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}