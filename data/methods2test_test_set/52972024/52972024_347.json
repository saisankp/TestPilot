{"test_class": {"identifier": "MessageProcessingSequenceRecoveryStrategyTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IChainStorage chainStorageMock;", "modifier": "private", "type": "IChainStorage", "declarator": "chainStorageMock", "var_name": "chainStorageMock"}, {"original_string": "private IRouter routerMock;", "modifier": "private", "type": "IRouter", "declarator": "routerMock", "var_name": "routerMock"}, {"original_string": "private IResolveDependencyStrategy chainResolutionStrategyMock;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "chainResolutionStrategyMock", "var_name": "chainResolutionStrategyMock"}], "file": "CoreFeatures/MessageProcessing/MessageProcessingSequence/src/test/java/info/smart_tools/smartactors/message_processing/message_processing_sequence/dump_recovery/MessageProcessingSequenceRecoveryStrategyTest.java"}, "test_case": {"identifier": "Should_recoverSequenceFromDumpRestoringDumpedChains", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_recoverSequenceFromDumpRestoringDumpedChains()\n            throws Exception {\n        IReceiverChain chainA = mock(IReceiverChain.class), chainB = mock(IReceiverChain.class);\n\n        IObject seqDump = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"),\n                (\"{\" +\n                        \"'maxDepth':3,\" +\n                        \"'chainsStack':['a','b','a'],\" +\n                        \"'stepsStack':[1,4,2],\" +\n                        \"'chainsDump':{\" +\n                        \"   'a': {'this-is':'chain-a dump'}\" +\n                        \"}\" +\n                        \"}\").replace('\\'','\"'));\n\n        when(chainStorageMock.resolve(\"b\")).thenReturn(chainB);\n        when(chainStorageMock.resolve(\"a\")).thenThrow(ChainNotFoundException.class);\n        when(chainResolutionStrategyMock.resolve(\n                eq(\"a\"),\n                same(((IObject) seqDump\n                        .getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"chainsDump\")))\n                        .getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"a\"))),\n                any(),\n                same(routerMock)\n        )).thenReturn(chainA);\n        when(chainA.get(0)).thenReturn(mock(IMessageReceiver.class));\n        when(chainA.get(1)).thenReturn(mock(IMessageReceiver.class));\n        when(chainA.get(2)).thenReturn(mock(IMessageReceiver.class));\n        when(chainA.get(3)).thenReturn(mock(IMessageReceiver.class));\n\n        IMessageProcessingSequence sequence = new MessageProcessingSequenceRecoveryStrategy().resolve(seqDump);\n\n        assertNotNull(sequence);\n\n        assertEquals(2, sequence.getCurrentLevel());\n        assertEquals(3, sequence.getStepAtLevel(2));\n        assertEquals(4, sequence.getStepAtLevel(1));\n        assertEquals(1, sequence.getStepAtLevel(0));\n\n        try {\n            sequence.callChain(chainA);\n            fail();\n        } catch (NestedChainStackOverflowException ok) {}\n    }", "signature": "void Should_recoverSequenceFromDumpRestoringDumpedChains()", "full_signature": "@Test public void Should_recoverSequenceFromDumpRestoringDumpedChains()", "class_method_signature": "MessageProcessingSequenceRecoveryStrategyTest.Should_recoverSequenceFromDumpRestoringDumpedChains()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "resolve", "getOrAdd", "replace", "thenReturn", "when", "resolve", "thenThrow", "when", "resolve", "thenReturn", "when", "resolve", "eq", "same", "getValue", "getValue", "resolve", "getOrAdd", "resolve", "getOrAdd", "any", "same", "thenReturn", "when", "get", "mock", "thenReturn", "when", "get", "mock", "thenReturn", "when", "get", "mock", "thenReturn", "when", "get", "mock", "resolve", "assertNotNull", "assertEquals", "getCurrentLevel", "assertEquals", "getStepAtLevel", "assertEquals", "getStepAtLevel", "assertEquals", "getStepAtLevel", "callChain", "fail"]}, "focal_class": {"identifier": "MessageProcessingSequenceRecoveryStrategy", "superclass": "", "interfaces": "implements IResolveDependencyStrategy", "fields": [{"original_string": "private final IFieldName stepsStackFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "stepsStackFieldName", "var_name": "stepsStackFieldName"}, {"original_string": "private final IFieldName chainsStackFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "chainsStackFieldName", "var_name": "chainsStackFieldName"}, {"original_string": "private final IFieldName maxDepthFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "maxDepthFieldName", "var_name": "maxDepthFieldName"}, {"original_string": "private final IFieldName chainsDumpFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "chainsDumpFieldName", "var_name": "chainsDumpFieldName"}], "methods": [{"identifier": "MessageProcessingSequenceRecoveryStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " MessageProcessingSequenceRecoveryStrategy()", "full_signature": "public  MessageProcessingSequenceRecoveryStrategy()", "class_method_signature": "MessageProcessingSequenceRecoveryStrategy.MessageProcessingSequenceRecoveryStrategy()", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "MessageProcessingSequenceRecoveryStrategy.resolve(final Object... args)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/MessageProcessingSequence/src/main/java/info/smart_tools/smartactors/message_processing/message_processing_sequence/dump_recovery/MessageProcessingSequenceRecoveryStrategy.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T resolve(final Object... args) throws ResolveDependencyStrategyException {\n        try {\n            IObject dump = (IObject) args[0];\n\n            int maxDepth = ((Number) dump.getValue(maxDepthFieldName)).intValue();\n            Iterator stepStack = ((Collection) dump.getValue(stepsStackFieldName)).iterator();\n            Iterator chainsStack = ((Collection) dump.getValue(chainsStackFieldName)).iterator();\n            IObject chainsDump = (IObject) dump.getValue(chainsDumpFieldName);\n\n            IChainStorage storage = new ChainStorageDecorator(\n                    IOC.resolve(Keys.getOrAdd(IChainStorage.class.getCanonicalName())),\n                    chainsDump);\n\n            Object mainChainId = IOC.resolve(Keys.getOrAdd(\"chain_id_from_map_name\"), chainsStack.next());\n            int mainChainPos = ((Number) stepStack.next()).intValue();\n\n            IMessageProcessingSequence sequence = new MessageProcessingSequence(maxDepth, storage.resolve(mainChainId));\n            sequence.goTo(0, mainChainPos + 1);\n\n            int level = 1;\n\n            while (stepStack.hasNext()) {\n                Object chainId = IOC.resolve(Keys.getOrAdd(\"chain_id_from_map_name\"), chainsStack.next());\n                int pos = ((Number) stepStack.next()).intValue();\n\n                sequence.callChain(storage.resolve(chainId));\n                sequence.goTo(level++, pos + 1);\n            }\n\n            sequence.next();\n\n            return (T) sequence;\n        } catch (ResolutionException | ReadValueException | InvalidArgumentException | ClassCastException | ChainNotFoundException\n                | NestedChainStackOverflowException e) {\n            throw new ResolveDependencyStrategyException(e);\n        }\n    }", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "MessageProcessingSequenceRecoveryStrategy.resolve(final Object... args)", "testcase": false, "constructor": false, "invocations": ["intValue", "getValue", "iterator", "getValue", "iterator", "getValue", "getValue", "resolve", "getOrAdd", "getCanonicalName", "resolve", "getOrAdd", "next", "intValue", "next", "resolve", "goTo", "hasNext", "resolve", "getOrAdd", "next", "intValue", "next", "callChain", "resolve", "goTo", "next"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}