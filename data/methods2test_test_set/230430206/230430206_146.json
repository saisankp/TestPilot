{"test_class": {"identifier": "QuorumPeerConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java"}, "test_case": {"identifier": "testConfigureSSLAuthGetsConfiguredIfSecurePortConfigured", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConfigureSSLAuthGetsConfiguredIfSecurePortConfigured()\n            throws IOException, ConfigException {\n        String sslAuthProp = \"zookeeper.authProvider.x509\";\n        QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig();\n        Properties zkProp = getDefaultZKProperties();\n        zkProp.setProperty(\"secureClientPort\", \"12345\");\n        quorumPeerConfig.parseProperties(zkProp);\n        String expected = \"org.apache.zookeeper.server.auth.X509AuthenticationProvider\";\n        String result = System.getProperty(sslAuthProp);\n        assertEquals(expected, result); \n    }", "signature": "void testConfigureSSLAuthGetsConfiguredIfSecurePortConfigured()", "full_signature": "@Test public void testConfigureSSLAuthGetsConfiguredIfSecurePortConfigured()", "class_method_signature": "QuorumPeerConfigTest.testConfigureSSLAuthGetsConfiguredIfSecurePortConfigured()", "testcase": true, "constructor": false, "invocations": ["getDefaultZKProperties", "setProperty", "parseProperties", "getProperty", "assertEquals"]}, "focal_class": {"identifier": "QuorumPeerConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(QuorumPeerConfig.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(QuorumPeerConfig.class)", "var_name": "LOG"}, {"original_string": "private static final int UNSET_SERVERID = -1;", "modifier": "private static final", "type": "int", "declarator": "UNSET_SERVERID = -1", "var_name": "UNSET_SERVERID"}, {"original_string": "public static final String nextDynamicConfigFileSuffix = \".dynamic.next\";", "modifier": "public static final", "type": "String", "declarator": "nextDynamicConfigFileSuffix = \".dynamic.next\"", "var_name": "nextDynamicConfigFileSuffix"}, {"original_string": "private static boolean standaloneEnabled = true;", "modifier": "private static", "type": "boolean", "declarator": "standaloneEnabled = true", "var_name": "standaloneEnabled"}, {"original_string": "private static boolean reconfigEnabled = false;", "modifier": "private static", "type": "boolean", "declarator": "reconfigEnabled = false", "var_name": "reconfigEnabled"}, {"original_string": "protected InetSocketAddress clientPortAddress;", "modifier": "protected", "type": "InetSocketAddress", "declarator": "clientPortAddress", "var_name": "clientPortAddress"}, {"original_string": "protected InetSocketAddress secureClientPortAddress;", "modifier": "protected", "type": "InetSocketAddress", "declarator": "secureClientPortAddress", "var_name": "secureClientPortAddress"}, {"original_string": "protected boolean sslQuorum = false;", "modifier": "protected", "type": "boolean", "declarator": "sslQuorum = false", "var_name": "sslQuorum"}, {"original_string": "protected boolean shouldUsePortUnification = false;", "modifier": "protected", "type": "boolean", "declarator": "shouldUsePortUnification = false", "var_name": "shouldUsePortUnification"}, {"original_string": "protected boolean sslQuorumReloadCertFiles = false;", "modifier": "protected", "type": "boolean", "declarator": "sslQuorumReloadCertFiles = false", "var_name": "sslQuorumReloadCertFiles"}, {"original_string": "protected File dataDir;", "modifier": "protected", "type": "File", "declarator": "dataDir", "var_name": "dataDir"}, {"original_string": "protected File dataLogDir;", "modifier": "protected", "type": "File", "declarator": "dataLogDir", "var_name": "dataLogDir"}, {"original_string": "protected String dynamicConfigFileStr = null;", "modifier": "protected", "type": "String", "declarator": "dynamicConfigFileStr = null", "var_name": "dynamicConfigFileStr"}, {"original_string": "protected String configFileStr = null;", "modifier": "protected", "type": "String", "declarator": "configFileStr = null", "var_name": "configFileStr"}, {"original_string": "protected int tickTime = ZooKeeperServer.DEFAULT_TICK_TIME;", "modifier": "protected", "type": "int", "declarator": "tickTime = ZooKeeperServer.DEFAULT_TICK_TIME", "var_name": "tickTime"}, {"original_string": "protected int maxClientCnxns = 60;", "modifier": "protected", "type": "int", "declarator": "maxClientCnxns = 60", "var_name": "maxClientCnxns"}, {"original_string": "protected int minSessionTimeout = -1;", "modifier": "protected", "type": "int", "declarator": "minSessionTimeout = -1", "var_name": "minSessionTimeout"}, {"original_string": "protected int maxSessionTimeout = -1;", "modifier": "protected", "type": "int", "declarator": "maxSessionTimeout = -1", "var_name": "maxSessionTimeout"}, {"original_string": "protected boolean localSessionsEnabled = false;", "modifier": "protected", "type": "boolean", "declarator": "localSessionsEnabled = false", "var_name": "localSessionsEnabled"}, {"original_string": "protected boolean localSessionsUpgradingEnabled = false;", "modifier": "protected", "type": "boolean", "declarator": "localSessionsUpgradingEnabled = false", "var_name": "localSessionsUpgradingEnabled"}, {"original_string": "protected int initLimit;", "modifier": "protected", "type": "int", "declarator": "initLimit", "var_name": "initLimit"}, {"original_string": "protected int syncLimit;", "modifier": "protected", "type": "int", "declarator": "syncLimit", "var_name": "syncLimit"}, {"original_string": "protected int electionAlg = 3;", "modifier": "protected", "type": "int", "declarator": "electionAlg = 3", "var_name": "electionAlg"}, {"original_string": "protected int electionPort = 2182;", "modifier": "protected", "type": "int", "declarator": "electionPort = 2182", "var_name": "electionPort"}, {"original_string": "protected boolean quorumListenOnAllIPs = false;", "modifier": "protected", "type": "boolean", "declarator": "quorumListenOnAllIPs = false", "var_name": "quorumListenOnAllIPs"}, {"original_string": "protected long serverId = UNSET_SERVERID;", "modifier": "protected", "type": "long", "declarator": "serverId = UNSET_SERVERID", "var_name": "serverId"}, {"original_string": "protected QuorumVerifier quorumVerifier = null, lastSeenQuorumVerifier = null;", "modifier": "protected", "type": "QuorumVerifier", "declarator": "quorumVerifier = null", "var_name": "quorumVerifier"}, {"original_string": "protected int snapRetainCount = 3;", "modifier": "protected", "type": "int", "declarator": "snapRetainCount = 3", "var_name": "snapRetainCount"}, {"original_string": "protected int purgeInterval = 0;", "modifier": "protected", "type": "int", "declarator": "purgeInterval = 0", "var_name": "purgeInterval"}, {"original_string": "protected boolean syncEnabled = true;", "modifier": "protected", "type": "boolean", "declarator": "syncEnabled = true", "var_name": "syncEnabled"}, {"original_string": "protected LearnerType peerType = LearnerType.PARTICIPANT;", "modifier": "protected", "type": "LearnerType", "declarator": "peerType = LearnerType.PARTICIPANT", "var_name": "peerType"}, {"original_string": "protected boolean quorumServerRequireSasl = false;", "modifier": "protected", "type": "boolean", "declarator": "quorumServerRequireSasl = false", "var_name": "quorumServerRequireSasl"}, {"original_string": "protected boolean quorumLearnerRequireSasl = false;", "modifier": "protected", "type": "boolean", "declarator": "quorumLearnerRequireSasl = false", "var_name": "quorumLearnerRequireSasl"}, {"original_string": "protected boolean quorumEnableSasl = false;", "modifier": "protected", "type": "boolean", "declarator": "quorumEnableSasl = false", "var_name": "quorumEnableSasl"}, {"original_string": "protected String quorumServicePrincipal = QuorumAuth.QUORUM_KERBEROS_SERVICE_PRINCIPAL_DEFAULT_VALUE;", "modifier": "protected", "type": "String", "declarator": "quorumServicePrincipal = QuorumAuth.QUORUM_KERBEROS_SERVICE_PRINCIPAL_DEFAULT_VALUE", "var_name": "quorumServicePrincipal"}, {"original_string": "protected String quorumLearnerLoginContext = QuorumAuth.QUORUM_LEARNER_SASL_LOGIN_CONTEXT_DFAULT_VALUE;", "modifier": "protected", "type": "String", "declarator": "quorumLearnerLoginContext = QuorumAuth.QUORUM_LEARNER_SASL_LOGIN_CONTEXT_DFAULT_VALUE", "var_name": "quorumLearnerLoginContext"}, {"original_string": "protected String quorumServerLoginContext = QuorumAuth.QUORUM_SERVER_SASL_LOGIN_CONTEXT_DFAULT_VALUE;", "modifier": "protected", "type": "String", "declarator": "quorumServerLoginContext = QuorumAuth.QUORUM_SERVER_SASL_LOGIN_CONTEXT_DFAULT_VALUE", "var_name": "quorumServerLoginContext"}, {"original_string": "protected int quorumCnxnThreadsSize;", "modifier": "protected", "type": "int", "declarator": "quorumCnxnThreadsSize", "var_name": "quorumCnxnThreadsSize"}, {"original_string": "private final int MIN_SNAP_RETAIN_COUNT = 3;", "modifier": "private final", "type": "int", "declarator": "MIN_SNAP_RETAIN_COUNT = 3", "var_name": "MIN_SNAP_RETAIN_COUNT"}], "methods": [{"identifier": "parse", "parameters": "(String path)", "modifiers": "public", "return": "void", "signature": "void parse(String path)", "full_signature": "public void parse(String path)", "class_method_signature": "QuorumPeerConfig.parse(String path)", "testcase": false, "constructor": false}, {"identifier": "getVersionFromFilename", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String getVersionFromFilename(String filename)", "full_signature": "public static String getVersionFromFilename(String filename)", "class_method_signature": "QuorumPeerConfig.getVersionFromFilename(String filename)", "testcase": false, "constructor": false}, {"identifier": "parseProperties", "parameters": "(Properties zkProp)", "modifiers": "public", "return": "void", "signature": "void parseProperties(Properties zkProp)", "full_signature": "public void parseProperties(Properties zkProp)", "class_method_signature": "QuorumPeerConfig.parseProperties(Properties zkProp)", "testcase": false, "constructor": false}, {"identifier": "configureSSLAuth", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void configureSSLAuth()", "full_signature": "private void configureSSLAuth()", "class_method_signature": "QuorumPeerConfig.configureSSLAuth()", "testcase": false, "constructor": false}, {"identifier": "backupOldConfig", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void backupOldConfig()", "full_signature": "private void backupOldConfig()", "class_method_signature": "QuorumPeerConfig.backupOldConfig()", "testcase": false, "constructor": false}, {"identifier": "writeDynamicConfig", "parameters": "(final String dynamicConfigFilename,\n                                          final QuorumVerifier qv,\n                                          final boolean needKeepVersion)", "modifiers": "public static", "return": "void", "signature": "void writeDynamicConfig(final String dynamicConfigFilename,\n                                          final QuorumVerifier qv,\n                                          final boolean needKeepVersion)", "full_signature": "public static void writeDynamicConfig(final String dynamicConfigFilename,\n                                          final QuorumVerifier qv,\n                                          final boolean needKeepVersion)", "class_method_signature": "QuorumPeerConfig.writeDynamicConfig(final String dynamicConfigFilename,\n                                          final QuorumVerifier qv,\n                                          final boolean needKeepVersion)", "testcase": false, "constructor": false}, {"identifier": "editStaticConfig", "parameters": "(final String configFileStr,\n                                        final String dynamicFileStr,\n                                        final boolean eraseClientPortAddress)", "modifiers": "public static", "return": "void", "signature": "void editStaticConfig(final String configFileStr,\n                                        final String dynamicFileStr,\n                                        final boolean eraseClientPortAddress)", "full_signature": "public static void editStaticConfig(final String configFileStr,\n                                        final String dynamicFileStr,\n                                        final boolean eraseClientPortAddress)", "class_method_signature": "QuorumPeerConfig.editStaticConfig(final String configFileStr,\n                                        final String dynamicFileStr,\n                                        final boolean eraseClientPortAddress)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(String filename)", "modifiers": "public static", "return": "void", "signature": "void deleteFile(String filename)", "full_signature": "public static void deleteFile(String filename)", "class_method_signature": "QuorumPeerConfig.deleteFile(String filename)", "testcase": false, "constructor": false}, {"identifier": "createQuorumVerifier", "parameters": "(Properties dynamicConfigProp, boolean isHierarchical)", "modifiers": "private static", "return": "QuorumVerifier", "signature": "QuorumVerifier createQuorumVerifier(Properties dynamicConfigProp, boolean isHierarchical)", "full_signature": "private static QuorumVerifier createQuorumVerifier(Properties dynamicConfigProp, boolean isHierarchical)", "class_method_signature": "QuorumPeerConfig.createQuorumVerifier(Properties dynamicConfigProp, boolean isHierarchical)", "testcase": false, "constructor": false}, {"identifier": "setupQuorumPeerConfig", "parameters": "(Properties prop, boolean configBackwardCompatibilityMode)", "modifiers": "", "return": "void", "signature": "void setupQuorumPeerConfig(Properties prop, boolean configBackwardCompatibilityMode)", "full_signature": " void setupQuorumPeerConfig(Properties prop, boolean configBackwardCompatibilityMode)", "class_method_signature": "QuorumPeerConfig.setupQuorumPeerConfig(Properties prop, boolean configBackwardCompatibilityMode)", "testcase": false, "constructor": false}, {"identifier": "parseDynamicConfig", "parameters": "(Properties dynamicConfigProp, int eAlg, boolean warnings,\n\t   boolean configBackwardCompatibilityMode)", "modifiers": "public static", "return": "QuorumVerifier", "signature": "QuorumVerifier parseDynamicConfig(Properties dynamicConfigProp, int eAlg, boolean warnings,\n\t   boolean configBackwardCompatibilityMode)", "full_signature": "public static QuorumVerifier parseDynamicConfig(Properties dynamicConfigProp, int eAlg, boolean warnings,\n\t   boolean configBackwardCompatibilityMode)", "class_method_signature": "QuorumPeerConfig.parseDynamicConfig(Properties dynamicConfigProp, int eAlg, boolean warnings,\n\t   boolean configBackwardCompatibilityMode)", "testcase": false, "constructor": false}, {"identifier": "setupMyId", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupMyId()", "full_signature": "private void setupMyId()", "class_method_signature": "QuorumPeerConfig.setupMyId()", "testcase": false, "constructor": false}, {"identifier": "setupClientPort", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupClientPort()", "full_signature": "private void setupClientPort()", "class_method_signature": "QuorumPeerConfig.setupClientPort()", "testcase": false, "constructor": false}, {"identifier": "setupPeerType", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupPeerType()", "full_signature": "private void setupPeerType()", "class_method_signature": "QuorumPeerConfig.setupPeerType()", "testcase": false, "constructor": false}, {"identifier": "checkValidity", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkValidity()", "full_signature": "public void checkValidity()", "class_method_signature": "QuorumPeerConfig.checkValidity()", "testcase": false, "constructor": false}, {"identifier": "getClientPortAddress", "parameters": "()", "modifiers": "public", "return": "InetSocketAddress", "signature": "InetSocketAddress getClientPortAddress()", "full_signature": "public InetSocketAddress getClientPortAddress()", "class_method_signature": "QuorumPeerConfig.getClientPortAddress()", "testcase": false, "constructor": false}, {"identifier": "getSecureClientPortAddress", "parameters": "()", "modifiers": "public", "return": "InetSocketAddress", "signature": "InetSocketAddress getSecureClientPortAddress()", "full_signature": "public InetSocketAddress getSecureClientPortAddress()", "class_method_signature": "QuorumPeerConfig.getSecureClientPortAddress()", "testcase": false, "constructor": false}, {"identifier": "getDataDir", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getDataDir()", "full_signature": "public File getDataDir()", "class_method_signature": "QuorumPeerConfig.getDataDir()", "testcase": false, "constructor": false}, {"identifier": "getDataLogDir", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getDataLogDir()", "full_signature": "public File getDataLogDir()", "class_method_signature": "QuorumPeerConfig.getDataLogDir()", "testcase": false, "constructor": false}, {"identifier": "getTickTime", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTickTime()", "full_signature": "public int getTickTime()", "class_method_signature": "QuorumPeerConfig.getTickTime()", "testcase": false, "constructor": false}, {"identifier": "getMaxClientCnxns", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxClientCnxns()", "full_signature": "public int getMaxClientCnxns()", "class_method_signature": "QuorumPeerConfig.getMaxClientCnxns()", "testcase": false, "constructor": false}, {"identifier": "getMinSessionTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMinSessionTimeout()", "full_signature": "public int getMinSessionTimeout()", "class_method_signature": "QuorumPeerConfig.getMinSessionTimeout()", "testcase": false, "constructor": false}, {"identifier": "getMaxSessionTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxSessionTimeout()", "full_signature": "public int getMaxSessionTimeout()", "class_method_signature": "QuorumPeerConfig.getMaxSessionTimeout()", "testcase": false, "constructor": false}, {"identifier": "areLocalSessionsEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean areLocalSessionsEnabled()", "full_signature": "public boolean areLocalSessionsEnabled()", "class_method_signature": "QuorumPeerConfig.areLocalSessionsEnabled()", "testcase": false, "constructor": false}, {"identifier": "isLocalSessionsUpgradingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLocalSessionsUpgradingEnabled()", "full_signature": "public boolean isLocalSessionsUpgradingEnabled()", "class_method_signature": "QuorumPeerConfig.isLocalSessionsUpgradingEnabled()", "testcase": false, "constructor": false}, {"identifier": "isSslQuorum", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSslQuorum()", "full_signature": "public boolean isSslQuorum()", "class_method_signature": "QuorumPeerConfig.isSslQuorum()", "testcase": false, "constructor": false}, {"identifier": "shouldUsePortUnification", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean shouldUsePortUnification()", "full_signature": "public boolean shouldUsePortUnification()", "class_method_signature": "QuorumPeerConfig.shouldUsePortUnification()", "testcase": false, "constructor": false}, {"identifier": "getInitLimit", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInitLimit()", "full_signature": "public int getInitLimit()", "class_method_signature": "QuorumPeerConfig.getInitLimit()", "testcase": false, "constructor": false}, {"identifier": "getSyncLimit", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSyncLimit()", "full_signature": "public int getSyncLimit()", "class_method_signature": "QuorumPeerConfig.getSyncLimit()", "testcase": false, "constructor": false}, {"identifier": "getElectionAlg", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getElectionAlg()", "full_signature": "public int getElectionAlg()", "class_method_signature": "QuorumPeerConfig.getElectionAlg()", "testcase": false, "constructor": false}, {"identifier": "getElectionPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getElectionPort()", "full_signature": "public int getElectionPort()", "class_method_signature": "QuorumPeerConfig.getElectionPort()", "testcase": false, "constructor": false}, {"identifier": "getSnapRetainCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSnapRetainCount()", "full_signature": "public int getSnapRetainCount()", "class_method_signature": "QuorumPeerConfig.getSnapRetainCount()", "testcase": false, "constructor": false}, {"identifier": "getPurgeInterval", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPurgeInterval()", "full_signature": "public int getPurgeInterval()", "class_method_signature": "QuorumPeerConfig.getPurgeInterval()", "testcase": false, "constructor": false}, {"identifier": "getSyncEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getSyncEnabled()", "full_signature": "public boolean getSyncEnabled()", "class_method_signature": "QuorumPeerConfig.getSyncEnabled()", "testcase": false, "constructor": false}, {"identifier": "getQuorumVerifier", "parameters": "()", "modifiers": "public", "return": "QuorumVerifier", "signature": "QuorumVerifier getQuorumVerifier()", "full_signature": "public QuorumVerifier getQuorumVerifier()", "class_method_signature": "QuorumPeerConfig.getQuorumVerifier()", "testcase": false, "constructor": false}, {"identifier": "getLastSeenQuorumVerifier", "parameters": "()", "modifiers": "public", "return": "QuorumVerifier", "signature": "QuorumVerifier getLastSeenQuorumVerifier()", "full_signature": "public QuorumVerifier getLastSeenQuorumVerifier()", "class_method_signature": "QuorumPeerConfig.getLastSeenQuorumVerifier()", "testcase": false, "constructor": false}, {"identifier": "getServers", "parameters": "()", "modifiers": "public", "return": "Map<Long,QuorumServer>", "signature": "Map<Long,QuorumServer> getServers()", "full_signature": "public Map<Long,QuorumServer> getServers()", "class_method_signature": "QuorumPeerConfig.getServers()", "testcase": false, "constructor": false}, {"identifier": "getServerId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getServerId()", "full_signature": "public long getServerId()", "class_method_signature": "QuorumPeerConfig.getServerId()", "testcase": false, "constructor": false}, {"identifier": "isDistributed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDistributed()", "full_signature": "public boolean isDistributed()", "class_method_signature": "QuorumPeerConfig.isDistributed()", "testcase": false, "constructor": false}, {"identifier": "getPeerType", "parameters": "()", "modifiers": "public", "return": "LearnerType", "signature": "LearnerType getPeerType()", "full_signature": "public LearnerType getPeerType()", "class_method_signature": "QuorumPeerConfig.getPeerType()", "testcase": false, "constructor": false}, {"identifier": "getConfigFilename", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getConfigFilename()", "full_signature": "public String getConfigFilename()", "class_method_signature": "QuorumPeerConfig.getConfigFilename()", "testcase": false, "constructor": false}, {"identifier": "getQuorumListenOnAllIPs", "parameters": "()", "modifiers": "public", "return": "Boolean", "signature": "Boolean getQuorumListenOnAllIPs()", "full_signature": "public Boolean getQuorumListenOnAllIPs()", "class_method_signature": "QuorumPeerConfig.getQuorumListenOnAllIPs()", "testcase": false, "constructor": false}, {"identifier": "isStandaloneEnabled", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isStandaloneEnabled()", "full_signature": "public static boolean isStandaloneEnabled()", "class_method_signature": "QuorumPeerConfig.isStandaloneEnabled()", "testcase": false, "constructor": false}, {"identifier": "setStandaloneEnabled", "parameters": "(boolean enabled)", "modifiers": "public static", "return": "void", "signature": "void setStandaloneEnabled(boolean enabled)", "full_signature": "public static void setStandaloneEnabled(boolean enabled)", "class_method_signature": "QuorumPeerConfig.setStandaloneEnabled(boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "isReconfigEnabled", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isReconfigEnabled()", "full_signature": "public static boolean isReconfigEnabled()", "class_method_signature": "QuorumPeerConfig.isReconfigEnabled()", "testcase": false, "constructor": false}, {"identifier": "setReconfigEnabled", "parameters": "(boolean enabled)", "modifiers": "public static", "return": "void", "signature": "void setReconfigEnabled(boolean enabled)", "full_signature": "public static void setReconfigEnabled(boolean enabled)", "class_method_signature": "QuorumPeerConfig.setReconfigEnabled(boolean enabled)", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java"}, "focal_method": {"identifier": "parseProperties", "parameters": "(Properties zkProp)", "modifiers": "public", "return": "void", "body": "public void parseProperties(Properties zkProp)\n    throws IOException, ConfigException {\n        int clientPort = 0;\n        int secureClientPort = 0;\n        String clientPortAddress = null;\n        String secureClientPortAddress = null;\n        VerifyingFileFactory vff = new VerifyingFileFactory.Builder(LOG).warnForRelativePath().build();\n        for (Entry<Object, Object> entry : zkProp.entrySet()) {\n            String key = entry.getKey().toString().trim();\n            String value = entry.getValue().toString().trim();\n            if (key.equals(\"dataDir\")) {\n                dataDir = vff.create(value);\n            } else if (key.equals(\"dataLogDir\")) {\n                dataLogDir = vff.create(value);\n            } else if (key.equals(\"clientPort\")) {\n                clientPort = Integer.parseInt(value);\n            } else if (key.equals(\"localSessionsEnabled\")) {\n                localSessionsEnabled = Boolean.parseBoolean(value);\n            } else if (key.equals(\"localSessionsUpgradingEnabled\")) {\n                localSessionsUpgradingEnabled = Boolean.parseBoolean(value);\n            } else if (key.equals(\"clientPortAddress\")) {\n                clientPortAddress = value.trim();\n            } else if (key.equals(\"secureClientPort\")) {\n                secureClientPort = Integer.parseInt(value);\n            } else if (key.equals(\"secureClientPortAddress\")){\n                secureClientPortAddress = value.trim();\n            } else if (key.equals(\"tickTime\")) {\n                tickTime = Integer.parseInt(value);\n            } else if (key.equals(\"maxClientCnxns\")) {\n                maxClientCnxns = Integer.parseInt(value);\n            } else if (key.equals(\"minSessionTimeout\")) {\n                minSessionTimeout = Integer.parseInt(value);\n            } else if (key.equals(\"maxSessionTimeout\")) {\n                maxSessionTimeout = Integer.parseInt(value);\n            } else if (key.equals(\"initLimit\")) {\n                initLimit = Integer.parseInt(value);\n            } else if (key.equals(\"syncLimit\")) {\n                syncLimit = Integer.parseInt(value);\n            } else if (key.equals(\"electionAlg\")) {\n                electionAlg = Integer.parseInt(value);\n            } else if (key.equals(\"quorumListenOnAllIPs\")) {\n                quorumListenOnAllIPs = Boolean.parseBoolean(value);\n            } else if (key.equals(\"peerType\")) {\n                if (value.toLowerCase().equals(\"observer\")) {\n                    peerType = LearnerType.OBSERVER;\n                } else if (value.toLowerCase().equals(\"participant\")) {\n                    peerType = LearnerType.PARTICIPANT;\n                } else\n                {\n                    throw new ConfigException(\"Unrecognised peertype: \" + value);\n                }\n            } else if (key.equals( \"syncEnabled\" )) {\n                syncEnabled = Boolean.parseBoolean(value);\n            } else if (key.equals(\"dynamicConfigFile\")){\n                dynamicConfigFileStr = value;\n            } else if (key.equals(\"autopurge.snapRetainCount\")) {\n                snapRetainCount = Integer.parseInt(value);\n            } else if (key.equals(\"autopurge.purgeInterval\")) {\n                purgeInterval = Integer.parseInt(value);\n            } else if (key.equals(\"standaloneEnabled\")) {\n                if (value.toLowerCase().equals(\"true\")) {\n                    setStandaloneEnabled(true);\n                } else if (value.toLowerCase().equals(\"false\")) {\n                    setStandaloneEnabled(false);\n                } else {\n                    throw new ConfigException(\"Invalid option \" + value + \" for standalone mode. Choose 'true' or 'false.'\");\n                }\n            } else if (key.equals(\"reconfigEnabled\")) {\n                if (value.toLowerCase().equals(\"true\")) {\n                    setReconfigEnabled(true);\n                } else if (value.toLowerCase().equals(\"false\")) {\n                    setReconfigEnabled(false);\n                } else {\n                    throw new ConfigException(\"Invalid option \" + value + \" for reconfigEnabled flag. Choose 'true' or 'false.'\");\n                }\n            } else if (key.equals(\"sslQuorum\")){\n                sslQuorum = Boolean.parseBoolean(value);\n            } else if (key.equals(\"portUnification\")){\n                shouldUsePortUnification = Boolean.parseBoolean(value);\n            } else if (key.equals(\"sslQuorumReloadCertFiles\")) {\n                sslQuorumReloadCertFiles = Boolean.parseBoolean(value);\n            } else if ((key.startsWith(\"server.\") || key.startsWith(\"group\") || key.startsWith(\"weight\")) && zkProp.containsKey(\"dynamicConfigFile\")) {\n                throw new ConfigException(\"parameter: \" + key + \" must be in a separate dynamic config file\");\n            } else if (key.equals(QuorumAuth.QUORUM_SASL_AUTH_ENABLED)) {\n                quorumEnableSasl = Boolean.parseBoolean(value);\n            } else if (key.equals(QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED)) {\n                quorumServerRequireSasl = Boolean.parseBoolean(value);\n            } else if (key.equals(QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED)) {\n                quorumLearnerRequireSasl = Boolean.parseBoolean(value);\n            } else if (key.equals(QuorumAuth.QUORUM_LEARNER_SASL_LOGIN_CONTEXT)) {\n                quorumLearnerLoginContext = value;\n            } else if (key.equals(QuorumAuth.QUORUM_SERVER_SASL_LOGIN_CONTEXT)) {\n                quorumServerLoginContext = value;\n            } else if (key.equals(QuorumAuth.QUORUM_KERBEROS_SERVICE_PRINCIPAL)) {\n                quorumServicePrincipal = value;\n            } else if (key.equals(\"quorum.cnxn.threads.size\")) {\n                quorumCnxnThreadsSize = Integer.parseInt(value);\n            } else {\n                System.setProperty(\"zookeeper.\" + key, value);\n            }\n        }\n\n        if (!quorumEnableSasl && quorumServerRequireSasl) {\n            throw new IllegalArgumentException(\n                    QuorumAuth.QUORUM_SASL_AUTH_ENABLED\n                            + \" is disabled, so cannot enable \"\n                            + QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED);\n        }\n        if (!quorumEnableSasl && quorumLearnerRequireSasl) {\n            throw new IllegalArgumentException(\n                    QuorumAuth.QUORUM_SASL_AUTH_ENABLED\n                            + \" is disabled, so cannot enable \"\n                            + QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED);\n        }\n        // If quorumpeer learner is not auth enabled then self won't be able to\n        // join quorum. So this condition is ensuring that the quorumpeer learner\n        // is also auth enabled while enabling quorum server require sasl.\n        if (!quorumLearnerRequireSasl && quorumServerRequireSasl) {\n            throw new IllegalArgumentException(\n                    QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED\n                            + \" is disabled, so cannot enable \"\n                            + QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED);\n        }\n\n        // Reset to MIN_SNAP_RETAIN_COUNT if invalid (less than 3)\n        // PurgeTxnLog.purge(File, File, int) will not allow to purge less\n        // than 3.\n        if (snapRetainCount < MIN_SNAP_RETAIN_COUNT) {\n            LOG.warn(\"Invalid autopurge.snapRetainCount: \" + snapRetainCount\n                    + \". Defaulting to \" + MIN_SNAP_RETAIN_COUNT);\n            snapRetainCount = MIN_SNAP_RETAIN_COUNT;\n        }\n\n        if (dataDir == null) {\n            throw new IllegalArgumentException(\"dataDir is not set\");\n        }\n        if (dataLogDir == null) {\n            dataLogDir = dataDir;\n        }\n\n        if (clientPort == 0) {\n            LOG.info(\"clientPort is not set\");\n            if (clientPortAddress != null) {\n                throw new IllegalArgumentException(\"clientPortAddress is set but clientPort is not set\");\n            }\n        } else if (clientPortAddress != null) {\n            this.clientPortAddress = new InetSocketAddress(\n                    InetAddress.getByName(clientPortAddress), clientPort);\n            LOG.info(\"clientPortAddress is {}\", this.clientPortAddress.toString());\n        } else {\n            this.clientPortAddress = new InetSocketAddress(clientPort);\n            LOG.info(\"clientPortAddress is {}\", this.clientPortAddress.toString());\n        }\n\n        if (secureClientPort == 0) {\n            LOG.info(\"secureClientPort is not set\");\n            if (secureClientPortAddress != null) {\n                throw new IllegalArgumentException(\"secureClientPortAddress is set but secureClientPort is not set\");\n            }\n        } else if (secureClientPortAddress != null) {\n            this.secureClientPortAddress = new InetSocketAddress(\n                    InetAddress.getByName(secureClientPortAddress), secureClientPort);\n            LOG.info(\"secureClientPortAddress is {}\", this.secureClientPortAddress.toString());\n        } else {\n            this.secureClientPortAddress = new InetSocketAddress(secureClientPort);\n            LOG.info(\"secureClientPortAddress is {}\", this.secureClientPortAddress.toString());\n        }\n        if (this.secureClientPortAddress != null) {\n            configureSSLAuth();\n        }\n\n        if (tickTime == 0) {\n            throw new IllegalArgumentException(\"tickTime is not set\");\n        }\n\n        minSessionTimeout = minSessionTimeout == -1 ? tickTime * 2 : minSessionTimeout;\n        maxSessionTimeout = maxSessionTimeout == -1 ? tickTime * 20 : maxSessionTimeout;\n\n        if (minSessionTimeout > maxSessionTimeout) {\n            throw new IllegalArgumentException(\n                    \"minSessionTimeout must not be larger than maxSessionTimeout\");\n        }          \n\n        // backward compatibility - dynamic configuration in the same file as\n        // static configuration params see writeDynamicConfig()\n        if (dynamicConfigFileStr == null) {\n            setupQuorumPeerConfig(zkProp, true);\n            if (isDistributed() && isReconfigEnabled()) {\n                // we don't backup static config for standalone mode.\n                // we also don't backup if reconfig feature is disabled.\n                backupOldConfig();\n            }\n        }\n    }", "signature": "void parseProperties(Properties zkProp)", "full_signature": "public void parseProperties(Properties zkProp)", "class_method_signature": "QuorumPeerConfig.parseProperties(Properties zkProp)", "testcase": false, "constructor": false, "invocations": ["build", "warnForRelativePath", "entrySet", "trim", "toString", "getKey", "trim", "toString", "getValue", "equals", "create", "equals", "create", "equals", "parseInt", "equals", "parseBoolean", "equals", "parseBoolean", "equals", "trim", "equals", "parseInt", "equals", "trim", "equals", "parseInt", "equals", "parseInt", "equals", "parseInt", "equals", "parseInt", "equals", "parseInt", "equals", "parseInt", "equals", "parseInt", "equals", "parseBoolean", "equals", "equals", "toLowerCase", "equals", "toLowerCase", "equals", "parseBoolean", "equals", "equals", "parseInt", "equals", "parseInt", "equals", "equals", "toLowerCase", "setStandaloneEnabled", "equals", "toLowerCase", "setStandaloneEnabled", "equals", "equals", "toLowerCase", "setReconfigEnabled", "equals", "toLowerCase", "setReconfigEnabled", "equals", "parseBoolean", "equals", "parseBoolean", "equals", "parseBoolean", "startsWith", "startsWith", "startsWith", "containsKey", "equals", "parseBoolean", "equals", "parseBoolean", "equals", "parseBoolean", "equals", "equals", "equals", "equals", "parseInt", "setProperty", "warn", "info", "getByName", "info", "toString", "info", "toString", "info", "getByName", "info", "toString", "info", "toString", "configureSSLAuth", "setupQuorumPeerConfig", "isDistributed", "isReconfigEnabled", "backupOldConfig"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}