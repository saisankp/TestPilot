{"test_class": {"identifier": "NetUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/NetUtilsTest.java"}, "test_case": {"identifier": "testIsInvalidPort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsInvalidPort() throws Exception {\n        assertTrue(NetUtils.isInvalidPort(0));\n        assertTrue(NetUtils.isInvalidPort(65536));\n        assertFalse(NetUtils.isInvalidPort(1024));\n    }", "signature": "void testIsInvalidPort()", "full_signature": "@Test public void testIsInvalidPort()", "class_method_signature": "NetUtilsTest.testIsInvalidPort()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isInvalidPort", "assertTrue", "isInvalidPort", "assertFalse", "isInvalidPort"]}, "focal_class": {"identifier": "NetUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String LOCALHOST = \"127.0.0.1\";", "modifier": "public static final", "type": "String", "declarator": "LOCALHOST = \"127.0.0.1\"", "var_name": "LOCALHOST"}, {"original_string": "public static final String ANYHOST = \"0.0.0.0\";", "modifier": "public static final", "type": "String", "declarator": "ANYHOST = \"0.0.0.0\"", "var_name": "ANYHOST"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(NetUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(NetUtils.class)", "var_name": "logger"}, {"original_string": "private static final int RND_PORT_START = 30000;", "modifier": "private static final", "type": "int", "declarator": "RND_PORT_START = 30000", "var_name": "RND_PORT_START"}, {"original_string": "private static final int RND_PORT_RANGE = 10000;", "modifier": "private static final", "type": "int", "declarator": "RND_PORT_RANGE = 10000", "var_name": "RND_PORT_RANGE"}, {"original_string": "private static final Random RANDOM = new Random(System.currentTimeMillis());", "modifier": "private static final", "type": "Random", "declarator": "RANDOM = new Random(System.currentTimeMillis())", "var_name": "RANDOM"}, {"original_string": "private static final int MIN_PORT = 0;", "modifier": "private static final", "type": "int", "declarator": "MIN_PORT = 0", "var_name": "MIN_PORT"}, {"original_string": "private static final int MAX_PORT = 65535;", "modifier": "private static final", "type": "int", "declarator": "MAX_PORT = 65535", "var_name": "MAX_PORT"}, {"original_string": "private static final Pattern ADDRESS_PATTERN = Pattern.compile(\"^\\\\d{1,3}(\\\\.\\\\d{1,3}){3}\\\\:\\\\d{1,5}$\");", "modifier": "private static final", "type": "Pattern", "declarator": "ADDRESS_PATTERN = Pattern.compile(\"^\\\\d{1,3}(\\\\.\\\\d{1,3}){3}\\\\:\\\\d{1,5}$\")", "var_name": "ADDRESS_PATTERN"}, {"original_string": "private static final Pattern LOCAL_IP_PATTERN = Pattern.compile(\"127(\\\\.\\\\d{1,3}){3}$\");", "modifier": "private static final", "type": "Pattern", "declarator": "LOCAL_IP_PATTERN = Pattern.compile(\"127(\\\\.\\\\d{1,3}){3}$\")", "var_name": "LOCAL_IP_PATTERN"}, {"original_string": "private static final Pattern IP_PATTERN = Pattern.compile(\"\\\\d{1,3}(\\\\.\\\\d{1,3}){3,5}$\");", "modifier": "private static final", "type": "Pattern", "declarator": "IP_PATTERN = Pattern.compile(\"\\\\d{1,3}(\\\\.\\\\d{1,3}){3,5}$\")", "var_name": "IP_PATTERN"}, {"original_string": "private static final Map<String, String> hostNameCache = new LRUCache<String, String>(1000);", "modifier": "private static final", "type": "Map<String, String>", "declarator": "hostNameCache = new LRUCache<String, String>(1000)", "var_name": "hostNameCache"}, {"original_string": "private static volatile InetAddress LOCAL_ADDRESS = null;", "modifier": "private static volatile", "type": "InetAddress", "declarator": "LOCAL_ADDRESS = null", "var_name": "LOCAL_ADDRESS"}], "methods": [{"identifier": "getRandomPort", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getRandomPort()", "full_signature": "public static int getRandomPort()", "class_method_signature": "NetUtils.getRandomPort()", "testcase": false, "constructor": false}, {"identifier": "getAvailablePort", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getAvailablePort()", "full_signature": "public static int getAvailablePort()", "class_method_signature": "NetUtils.getAvailablePort()", "testcase": false, "constructor": false}, {"identifier": "getAvailablePort", "parameters": "(int port)", "modifiers": "public static", "return": "int", "signature": "int getAvailablePort(int port)", "full_signature": "public static int getAvailablePort(int port)", "class_method_signature": "NetUtils.getAvailablePort(int port)", "testcase": false, "constructor": false}, {"identifier": "isInvalidPort", "parameters": "(int port)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInvalidPort(int port)", "full_signature": "public static boolean isInvalidPort(int port)", "class_method_signature": "NetUtils.isInvalidPort(int port)", "testcase": false, "constructor": false}, {"identifier": "isValidAddress", "parameters": "(String address)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidAddress(String address)", "full_signature": "public static boolean isValidAddress(String address)", "class_method_signature": "NetUtils.isValidAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "isLocalHost", "parameters": "(String host)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLocalHost(String host)", "full_signature": "public static boolean isLocalHost(String host)", "class_method_signature": "NetUtils.isLocalHost(String host)", "testcase": false, "constructor": false}, {"identifier": "isAnyHost", "parameters": "(String host)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAnyHost(String host)", "full_signature": "public static boolean isAnyHost(String host)", "class_method_signature": "NetUtils.isAnyHost(String host)", "testcase": false, "constructor": false}, {"identifier": "isInvalidLocalHost", "parameters": "(String host)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInvalidLocalHost(String host)", "full_signature": "public static boolean isInvalidLocalHost(String host)", "class_method_signature": "NetUtils.isInvalidLocalHost(String host)", "testcase": false, "constructor": false}, {"identifier": "isValidLocalHost", "parameters": "(String host)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidLocalHost(String host)", "full_signature": "public static boolean isValidLocalHost(String host)", "class_method_signature": "NetUtils.isValidLocalHost(String host)", "testcase": false, "constructor": false}, {"identifier": "getLocalSocketAddress", "parameters": "(String host, int port)", "modifiers": "public static", "return": "InetSocketAddress", "signature": "InetSocketAddress getLocalSocketAddress(String host, int port)", "full_signature": "public static InetSocketAddress getLocalSocketAddress(String host, int port)", "class_method_signature": "NetUtils.getLocalSocketAddress(String host, int port)", "testcase": false, "constructor": false}, {"identifier": "isValidAddress", "parameters": "(InetAddress address)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidAddress(InetAddress address)", "full_signature": "private static boolean isValidAddress(InetAddress address)", "class_method_signature": "NetUtils.isValidAddress(InetAddress address)", "testcase": false, "constructor": false}, {"identifier": "getLocalHost", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getLocalHost()", "full_signature": "public static String getLocalHost()", "class_method_signature": "NetUtils.getLocalHost()", "testcase": false, "constructor": false}, {"identifier": "filterLocalHost", "parameters": "(String host)", "modifiers": "public static", "return": "String", "signature": "String filterLocalHost(String host)", "full_signature": "public static String filterLocalHost(String host)", "class_method_signature": "NetUtils.filterLocalHost(String host)", "testcase": false, "constructor": false}, {"identifier": "getLocalAddress", "parameters": "()", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress getLocalAddress()", "full_signature": "public static InetAddress getLocalAddress()", "class_method_signature": "NetUtils.getLocalAddress()", "testcase": false, "constructor": false}, {"identifier": "getLocalAddress0", "parameters": "()", "modifiers": "private static", "return": "InetAddress", "signature": "InetAddress getLocalAddress0()", "full_signature": "private static InetAddress getLocalAddress0()", "class_method_signature": "NetUtils.getLocalAddress0()", "testcase": false, "constructor": false}, {"identifier": "getHostName", "parameters": "(String address)", "modifiers": "public static", "return": "String", "signature": "String getHostName(String address)", "full_signature": "public static String getHostName(String address)", "class_method_signature": "NetUtils.getHostName(String address)", "testcase": false, "constructor": false}, {"identifier": "getIpByHost", "parameters": "(String hostName)", "modifiers": "public static", "return": "String", "signature": "String getIpByHost(String hostName)", "full_signature": "public static String getIpByHost(String hostName)", "class_method_signature": "NetUtils.getIpByHost(String hostName)", "testcase": false, "constructor": false}, {"identifier": "toAddressString", "parameters": "(InetSocketAddress address)", "modifiers": "public static", "return": "String", "signature": "String toAddressString(InetSocketAddress address)", "full_signature": "public static String toAddressString(InetSocketAddress address)", "class_method_signature": "NetUtils.toAddressString(InetSocketAddress address)", "testcase": false, "constructor": false}, {"identifier": "toAddress", "parameters": "(String address)", "modifiers": "public static", "return": "InetSocketAddress", "signature": "InetSocketAddress toAddress(String address)", "full_signature": "public static InetSocketAddress toAddress(String address)", "class_method_signature": "NetUtils.toAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "toURL", "parameters": "(String protocol, String host, int port, String path)", "modifiers": "public static", "return": "String", "signature": "String toURL(String protocol, String host, int port, String path)", "full_signature": "public static String toURL(String protocol, String host, int port, String path)", "class_method_signature": "NetUtils.toURL(String protocol, String host, int port, String path)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/NetUtils.java"}, "focal_method": {"identifier": "isInvalidPort", "parameters": "(int port)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isInvalidPort(int port) {\n        return port <= MIN_PORT || port > MAX_PORT;\n    }", "signature": "boolean isInvalidPort(int port)", "full_signature": "public static boolean isInvalidPort(int port)", "class_method_signature": "NetUtils.isInvalidPort(int port)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}