{"test_class": {"identifier": "ECKeyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ECKeyTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ECKeyTest.class)", "var_name": "log"}, {"original_string": "private String privString = \"3ecb44df2159c26e0f995712d4f39b6f6e499b40749b1cf1246c37f9516cb6a4\";", "modifier": "private", "type": "String", "declarator": "privString = \"3ecb44df2159c26e0f995712d4f39b6f6e499b40749b1cf1246c37f9516cb6a4\"", "var_name": "privString"}, {"original_string": "private BigInteger privateKey = new BigInteger(Hex.decode(privString));", "modifier": "private", "type": "BigInteger", "declarator": "privateKey = new BigInteger(Hex.decode(privString))", "var_name": "privateKey"}, {"original_string": "private String pubString = \"0497466f2b32bc3bb76d4741ae51cd1d8578b48d3f1e68da206d47321aec267ce78549b514e4453d74ef11b0cd5e4e4c364effddac8b51bcfc8de80682f952896f\";", "modifier": "private", "type": "String", "declarator": "pubString = \"0497466f2b32bc3bb76d4741ae51cd1d8578b48d3f1e68da206d47321aec267ce78549b514e4453d74ef11b0cd5e4e4c364effddac8b51bcfc8de80682f952896f\"", "var_name": "pubString"}, {"original_string": "private String compressedPubString = \"0397466f2b32bc3bb76d4741ae51cd1d8578b48d3f1e68da206d47321aec267ce7\";", "modifier": "private", "type": "String", "declarator": "compressedPubString = \"0397466f2b32bc3bb76d4741ae51cd1d8578b48d3f1e68da206d47321aec267ce7\"", "var_name": "compressedPubString"}, {"original_string": "private byte[] pubKey = Hex.decode(pubString);", "modifier": "private", "type": "byte[]", "declarator": "pubKey = Hex.decode(pubString)", "var_name": "pubKey"}, {"original_string": "private byte[] compressedPubKey = Hex.decode(compressedPubString);", "modifier": "private", "type": "byte[]", "declarator": "compressedPubKey = Hex.decode(compressedPubString)", "var_name": "compressedPubKey"}, {"original_string": "private String address = \"8a40bfaa73256b60764c1bf40675a99083efb075\";", "modifier": "private", "type": "String", "declarator": "address = \"8a40bfaa73256b60764c1bf40675a99083efb075\"", "var_name": "address"}, {"original_string": "private String exampleMessage = new String(\"This is an example of a signed message.\");", "modifier": "private", "type": "String", "declarator": "exampleMessage = new String(\"This is an example of a signed message.\")", "var_name": "exampleMessage"}, {"original_string": "private String sigBase64 = \"HD5AsBr4wuH6UU9tXuSJhUvgfGayfwoY0cKT03sFUjnpQsupHznd/3mCIRfLuNHlRCVGdAyHecdyM8IVZMtc1I8=\";", "modifier": "private", "type": "String", "declarator": "sigBase64 = \"HD5AsBr4wuH6UU9tXuSJhUvgfGayfwoY0cKT03sFUjnpQsupHznd/3mCIRfLuNHlRCVGdAyHecdyM8IVZMtc1I8=\"", "var_name": "sigBase64"}], "file": "ethereumj-core/src/test/java/org/ethereum/crypto/ECKeyTest.java"}, "test_case": {"identifier": "testPublicKeyFromPrivateCompressed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPublicKeyFromPrivateCompressed() {\n\t\tbyte[] pubFromPriv = ECKey.publicKeyFromPrivate(privateKey, true);\n\t\tassertArrayEquals(compressedPubKey, pubFromPriv);\n\t}", "signature": "void testPublicKeyFromPrivateCompressed()", "full_signature": "@Test public void testPublicKeyFromPrivateCompressed()", "class_method_signature": "ECKeyTest.testPublicKeyFromPrivateCompressed()", "testcase": true, "constructor": false, "invocations": ["publicKeyFromPrivate", "assertArrayEquals"]}, "focal_class": {"identifier": "ECKey", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ECKey.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ECKey.class)", "var_name": "logger"}, {"original_string": "public static final ECDomainParameters CURVE;", "modifier": "public static final", "type": "ECDomainParameters", "declarator": "CURVE", "var_name": "CURVE"}, {"original_string": "public static final BigInteger HALF_CURVE_ORDER;", "modifier": "public static final", "type": "BigInteger", "declarator": "HALF_CURVE_ORDER", "var_name": "HALF_CURVE_ORDER"}, {"original_string": "private static final SecureRandom secureRandom;", "modifier": "private static final", "type": "SecureRandom", "declarator": "secureRandom", "var_name": "secureRandom"}, {"original_string": "private static final long serialVersionUID = -728224901792295832L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -728224901792295832L", "var_name": "serialVersionUID"}, {"original_string": "private BigInteger priv;", "modifier": "private", "type": "BigInteger", "declarator": "priv", "var_name": "priv"}, {"original_string": "protected final ECPoint pub;", "modifier": "protected final", "type": "ECPoint", "declarator": "pub", "var_name": "pub"}, {"original_string": "transient private byte[] pubKeyHash;", "modifier": "transient private", "type": "byte[]", "declarator": "pubKeyHash", "var_name": "pubKeyHash"}], "methods": [{"identifier": "ECKey", "parameters": "()", "modifiers": "public", "return": "", "signature": " ECKey()", "full_signature": "public  ECKey()", "class_method_signature": "ECKey.ECKey()", "testcase": false, "constructor": true}, {"identifier": "ECKey", "parameters": "(SecureRandom secureRandom)", "modifiers": "public", "return": "", "signature": " ECKey(SecureRandom secureRandom)", "full_signature": "public  ECKey(SecureRandom secureRandom)", "class_method_signature": "ECKey.ECKey(SecureRandom secureRandom)", "testcase": false, "constructor": true}, {"identifier": "ECKey", "parameters": "(@Nullable BigInteger priv, ECPoint pub)", "modifiers": "protected", "return": "", "signature": " ECKey(@Nullable BigInteger priv, ECPoint pub)", "full_signature": "protected  ECKey(@Nullable BigInteger priv, ECPoint pub)", "class_method_signature": "ECKey.ECKey(@Nullable BigInteger priv, ECPoint pub)", "testcase": false, "constructor": true}, {"identifier": "compressPoint", "parameters": "(ECPoint uncompressed)", "modifiers": "public static", "return": "ECPoint", "signature": "ECPoint compressPoint(ECPoint uncompressed)", "full_signature": "public static ECPoint compressPoint(ECPoint uncompressed)", "class_method_signature": "ECKey.compressPoint(ECPoint uncompressed)", "testcase": false, "constructor": false}, {"identifier": "decompressPoint", "parameters": "(ECPoint compressed)", "modifiers": "public static", "return": "ECPoint", "signature": "ECPoint decompressPoint(ECPoint compressed)", "full_signature": "public static ECPoint decompressPoint(ECPoint compressed)", "class_method_signature": "ECKey.decompressPoint(ECPoint compressed)", "testcase": false, "constructor": false}, {"identifier": "fromPrivate", "parameters": "(BigInteger privKey)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromPrivate(BigInteger privKey)", "full_signature": "public static ECKey fromPrivate(BigInteger privKey)", "class_method_signature": "ECKey.fromPrivate(BigInteger privKey)", "testcase": false, "constructor": false}, {"identifier": "fromPrivate", "parameters": "(byte[] privKeyBytes)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromPrivate(byte[] privKeyBytes)", "full_signature": "public static ECKey fromPrivate(byte[] privKeyBytes)", "class_method_signature": "ECKey.fromPrivate(byte[] privKeyBytes)", "testcase": false, "constructor": false}, {"identifier": "fromPrivateAndPrecalculatedPublic", "parameters": "(BigInteger priv, ECPoint pub)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromPrivateAndPrecalculatedPublic(BigInteger priv, ECPoint pub)", "full_signature": "public static ECKey fromPrivateAndPrecalculatedPublic(BigInteger priv, ECPoint pub)", "class_method_signature": "ECKey.fromPrivateAndPrecalculatedPublic(BigInteger priv, ECPoint pub)", "testcase": false, "constructor": false}, {"identifier": "fromPrivateAndPrecalculatedPublic", "parameters": "(byte[] priv, byte[] pub)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromPrivateAndPrecalculatedPublic(byte[] priv, byte[] pub)", "full_signature": "public static ECKey fromPrivateAndPrecalculatedPublic(byte[] priv, byte[] pub)", "class_method_signature": "ECKey.fromPrivateAndPrecalculatedPublic(byte[] priv, byte[] pub)", "testcase": false, "constructor": false}, {"identifier": "fromPublicOnly", "parameters": "(ECPoint pub)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromPublicOnly(ECPoint pub)", "full_signature": "public static ECKey fromPublicOnly(ECPoint pub)", "class_method_signature": "ECKey.fromPublicOnly(ECPoint pub)", "testcase": false, "constructor": false}, {"identifier": "fromPublicOnly", "parameters": "(byte[] pub)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromPublicOnly(byte[] pub)", "full_signature": "public static ECKey fromPublicOnly(byte[] pub)", "class_method_signature": "ECKey.fromPublicOnly(byte[] pub)", "testcase": false, "constructor": false}, {"identifier": "decompress", "parameters": "()", "modifiers": "public", "return": "ECKey", "signature": "ECKey decompress()", "full_signature": "public ECKey decompress()", "class_method_signature": "ECKey.decompress()", "testcase": false, "constructor": false}, {"identifier": "isPubKeyOnly", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPubKeyOnly()", "full_signature": "public boolean isPubKeyOnly()", "class_method_signature": "ECKey.isPubKeyOnly()", "testcase": false, "constructor": false}, {"identifier": "hasPrivKey", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasPrivKey()", "full_signature": "public boolean hasPrivKey()", "class_method_signature": "ECKey.hasPrivKey()", "testcase": false, "constructor": false}, {"identifier": "publicKeyFromPrivate", "parameters": "(BigInteger privKey, boolean compressed)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] publicKeyFromPrivate(BigInteger privKey, boolean compressed)", "full_signature": "public static byte[] publicKeyFromPrivate(BigInteger privKey, boolean compressed)", "class_method_signature": "ECKey.publicKeyFromPrivate(BigInteger privKey, boolean compressed)", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getAddress()", "full_signature": "public byte[] getAddress()", "class_method_signature": "ECKey.getAddress()", "testcase": false, "constructor": false}, {"identifier": "getPubKey", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPubKey()", "full_signature": "public byte[] getPubKey()", "class_method_signature": "ECKey.getPubKey()", "testcase": false, "constructor": false}, {"identifier": "getPubKeyPoint", "parameters": "()", "modifiers": "public", "return": "ECPoint", "signature": "ECPoint getPubKeyPoint()", "full_signature": "public ECPoint getPubKeyPoint()", "class_method_signature": "ECKey.getPubKeyPoint()", "testcase": false, "constructor": false}, {"identifier": "getPrivKey", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getPrivKey()", "full_signature": "public BigInteger getPrivKey()", "class_method_signature": "ECKey.getPrivKey()", "testcase": false, "constructor": false}, {"identifier": "isCompressed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCompressed()", "full_signature": "public boolean isCompressed()", "class_method_signature": "ECKey.isCompressed()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "ECKey.toString()", "testcase": false, "constructor": false}, {"identifier": "toStringWithPrivate", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toStringWithPrivate()", "full_signature": "public String toStringWithPrivate()", "class_method_signature": "ECKey.toStringWithPrivate()", "testcase": false, "constructor": false}, {"identifier": "doSign", "parameters": "(byte[] input)", "modifiers": "public", "return": "ECDSASignature", "signature": "ECDSASignature doSign(byte[] input)", "full_signature": "public ECDSASignature doSign(byte[] input)", "class_method_signature": "ECKey.doSign(byte[] input)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(byte[] messageHash)", "modifiers": "public", "return": "ECDSASignature", "signature": "ECDSASignature sign(byte[] messageHash)", "full_signature": "public ECDSASignature sign(byte[] messageHash)", "class_method_signature": "ECKey.sign(byte[] messageHash)", "testcase": false, "constructor": false}, {"identifier": "signatureToKey", "parameters": "(byte[] messageHash, String signatureBase64)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey signatureToKey(byte[] messageHash, String signatureBase64)", "full_signature": "public static ECKey signatureToKey(byte[] messageHash, String signatureBase64)", "class_method_signature": "ECKey.signatureToKey(byte[] messageHash, String signatureBase64)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, ECDSASignature signature, byte[] pub)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(byte[] data, ECDSASignature signature, byte[] pub)", "full_signature": "public static boolean verify(byte[] data, ECDSASignature signature, byte[] pub)", "class_method_signature": "ECKey.verify(byte[] data, ECDSASignature signature, byte[] pub)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, byte[] signature, byte[] pub)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(byte[] data, byte[] signature, byte[] pub)", "full_signature": "public static boolean verify(byte[] data, byte[] signature, byte[] pub)", "class_method_signature": "ECKey.verify(byte[] data, byte[] signature, byte[] pub)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, byte[] signature)", "modifiers": "public", "return": "boolean", "signature": "boolean verify(byte[] data, byte[] signature)", "full_signature": "public boolean verify(byte[] data, byte[] signature)", "class_method_signature": "ECKey.verify(byte[] data, byte[] signature)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] sigHash, ECDSASignature signature)", "modifiers": "public", "return": "boolean", "signature": "boolean verify(byte[] sigHash, ECDSASignature signature)", "full_signature": "public boolean verify(byte[] sigHash, ECDSASignature signature)", "class_method_signature": "ECKey.verify(byte[] sigHash, ECDSASignature signature)", "testcase": false, "constructor": false}, {"identifier": "isPubKeyCanonical", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPubKeyCanonical()", "full_signature": "public boolean isPubKeyCanonical()", "class_method_signature": "ECKey.isPubKeyCanonical()", "testcase": false, "constructor": false}, {"identifier": "isPubKeyCanonical", "parameters": "(byte[] pubkey)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPubKeyCanonical(byte[] pubkey)", "full_signature": "public static boolean isPubKeyCanonical(byte[] pubkey)", "class_method_signature": "ECKey.isPubKeyCanonical(byte[] pubkey)", "testcase": false, "constructor": false}, {"identifier": "recoverFromSignature", "parameters": "(int recId, ECDSASignature sig, byte[] messageHash, boolean compressed)", "modifiers": "@Nullable public static", "return": "ECKey", "signature": "ECKey recoverFromSignature(int recId, ECDSASignature sig, byte[] messageHash, boolean compressed)", "full_signature": "@Nullable public static ECKey recoverFromSignature(int recId, ECDSASignature sig, byte[] messageHash, boolean compressed)", "class_method_signature": "ECKey.recoverFromSignature(int recId, ECDSASignature sig, byte[] messageHash, boolean compressed)", "testcase": false, "constructor": false}, {"identifier": "decompressKey", "parameters": "(BigInteger xBN, boolean yBit)", "modifiers": "private static", "return": "ECPoint", "signature": "ECPoint decompressKey(BigInteger xBN, boolean yBit)", "full_signature": "private static ECPoint decompressKey(BigInteger xBN, boolean yBit)", "class_method_signature": "ECKey.decompressKey(BigInteger xBN, boolean yBit)", "testcase": false, "constructor": false}, {"identifier": "getPrivKeyBytes", "parameters": "()", "modifiers": "@Nullable public", "return": "byte[]", "signature": "byte[] getPrivKeyBytes()", "full_signature": "@Nullable public byte[] getPrivKeyBytes()", "class_method_signature": "ECKey.getPrivKeyBytes()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ECKey.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ECKey.hashCode()", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(boolean test, String message)", "modifiers": "private static", "return": "void", "signature": "void check(boolean test, String message)", "full_signature": "private static void check(boolean test, String message)", "class_method_signature": "ECKey.check(boolean test, String message)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/crypto/ECKey.java"}, "focal_method": {"identifier": "publicKeyFromPrivate", "parameters": "(BigInteger privKey, boolean compressed)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] publicKeyFromPrivate(BigInteger privKey, boolean compressed) {\n        ECPoint point = CURVE.getG().multiply(privKey);\n        return point.getEncoded(compressed);\n    }", "signature": "byte[] publicKeyFromPrivate(BigInteger privKey, boolean compressed)", "full_signature": "public static byte[] publicKeyFromPrivate(BigInteger privKey, boolean compressed)", "class_method_signature": "ECKey.publicKeyFromPrivate(BigInteger privKey, boolean compressed)", "testcase": false, "constructor": false, "invocations": ["multiply", "getG", "getEncoded"]}, "repository": {"repo_id": 24503275, "url": "https://github.com/ethereumj/ethereumj", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 27, "size": 13884, "license": "licensed"}}