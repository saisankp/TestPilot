{"test_class": {"identifier": "InsertTextTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [{"original_string": "private URL billyURL = getClass().getResource(\"/billy.yaml\");", "modifier": "private", "type": "URL", "declarator": "billyURL = getClass().getResource(\"/billy.yaml\")", "var_name": "billyURL"}], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/operations/text/InsertTextTest.java"}, "test_case": {"identifier": "insertConcatTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void insertConcatTest() throws IOException {\n        InsertText insertText = new InsertText(billyURL).relative(\"src/main/resources/dogs.yaml\");\n        TOExecutionResult executionResult = insertText.execution(transformedAppFolder, transformationContext);\n        Assert.assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS);\n\n        assertChangedFile(\"src/main/resources/dogs.yaml\");\n        assertLineCount(\"src/main/resources/dogs.yaml\", 3);\n\n        Map<String, Dog> dogs = (Map) getObjectFromYaml(\"src/main/resources/dogs.yaml\");\n\n        Assert.assertEquals(dogs.size(), 3);\n\n        Dog dog = dogs.get(\"Billy\");\n        Assert.assertEquals(dog.getName(), \"Billy\");\n        Assert.assertEquals(dog.getBreed(), \"lab\");\n    }", "signature": "void insertConcatTest()", "full_signature": "@Test public void insertConcatTest()", "class_method_signature": "InsertTextTest.insertConcatTest()", "testcase": true, "constructor": false, "invocations": ["relative", "execution", "assertEquals", "getType", "assertChangedFile", "assertLineCount", "getObjectFromYaml", "assertEquals", "size", "get", "assertEquals", "getName", "assertEquals", "getBreed"]}, "focal_class": {"identifier": "InsertText", "superclass": "extends TransformationOperation<InsertText>", "interfaces": "", "fields": [{"original_string": "private static final String DESCRIPTION = \"Insert text from %s to %s\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Insert text from %s to %s\"", "var_name": "DESCRIPTION"}, {"original_string": "private InsertionMode insertionMode = InsertionMode.CONCAT;", "modifier": "private", "type": "InsertionMode", "declarator": "insertionMode = InsertionMode.CONCAT", "var_name": "insertionMode"}, {"original_string": "private URL textFileUrl;", "modifier": "private", "type": "URL", "declarator": "textFileUrl", "var_name": "textFileUrl"}, {"original_string": "private Integer lineNumber = null;", "modifier": "private", "type": "Integer", "declarator": "lineNumber = null", "var_name": "lineNumber"}, {"original_string": "private String regex = null;", "modifier": "private", "type": "String", "declarator": "regex = null", "var_name": "regex"}], "methods": [{"identifier": "InsertText", "parameters": "()", "modifiers": "public", "return": "", "signature": " InsertText()", "full_signature": "public  InsertText()", "class_method_signature": "InsertText.InsertText()", "testcase": false, "constructor": true}, {"identifier": "InsertText", "parameters": "(URL textFileUrl)", "modifiers": "public", "return": "", "signature": " InsertText(URL textFileUrl)", "full_signature": "public  InsertText(URL textFileUrl)", "class_method_signature": "InsertText.InsertText(URL textFileUrl)", "testcase": false, "constructor": true}, {"identifier": "InsertText", "parameters": "(URL textFileUrl, Integer lineNumber)", "modifiers": "public", "return": "", "signature": " InsertText(URL textFileUrl, Integer lineNumber)", "full_signature": "public  InsertText(URL textFileUrl, Integer lineNumber)", "class_method_signature": "InsertText.InsertText(URL textFileUrl, Integer lineNumber)", "testcase": false, "constructor": true}, {"identifier": "InsertText", "parameters": "(URL textFileUrl, String regex)", "modifiers": "public", "return": "", "signature": " InsertText(URL textFileUrl, String regex)", "full_signature": "public  InsertText(URL textFileUrl, String regex)", "class_method_signature": "InsertText.InsertText(URL textFileUrl, String regex)", "testcase": false, "constructor": true}, {"identifier": "setInsertionMode", "parameters": "(InsertionMode insertionMode)", "modifiers": "public", "return": "InsertText", "signature": "InsertText setInsertionMode(InsertionMode insertionMode)", "full_signature": "public InsertText setInsertionMode(InsertionMode insertionMode)", "class_method_signature": "InsertText.setInsertionMode(InsertionMode insertionMode)", "testcase": false, "constructor": false}, {"identifier": "setTextFileUrl", "parameters": "(URL textFileUrl)", "modifiers": "public", "return": "InsertText", "signature": "InsertText setTextFileUrl(URL textFileUrl)", "full_signature": "public InsertText setTextFileUrl(URL textFileUrl)", "class_method_signature": "InsertText.setTextFileUrl(URL textFileUrl)", "testcase": false, "constructor": false}, {"identifier": "setLineNumber", "parameters": "(Integer lineNumber)", "modifiers": "public", "return": "InsertText", "signature": "InsertText setLineNumber(Integer lineNumber)", "full_signature": "public InsertText setLineNumber(Integer lineNumber)", "class_method_signature": "InsertText.setLineNumber(Integer lineNumber)", "testcase": false, "constructor": false}, {"identifier": "setRegex", "parameters": "(String regex)", "modifiers": "public", "return": "InsertText", "signature": "InsertText setRegex(String regex)", "full_signature": "public InsertText setRegex(String regex)", "class_method_signature": "InsertText.setRegex(String regex)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "InsertText.getDescription()", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") @Override protected", "return": "TOExecutionResult", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") @Override protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "InsertText.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}, {"identifier": "insertAtSpecificLine", "parameters": "(BufferedReader readerText, BufferedReader readerOriginalFile, BufferedWriter writer, String eol)", "modifiers": "private", "return": "TOExecutionResult", "signature": "TOExecutionResult insertAtSpecificLine(BufferedReader readerText, BufferedReader readerOriginalFile, BufferedWriter writer, String eol)", "full_signature": "private TOExecutionResult insertAtSpecificLine(BufferedReader readerText, BufferedReader readerOriginalFile, BufferedWriter writer, String eol)", "class_method_signature": "InsertText.insertAtSpecificLine(BufferedReader readerText, BufferedReader readerOriginalFile, BufferedWriter writer, String eol)", "testcase": false, "constructor": false}, {"identifier": "insertAfterRegex", "parameters": "(BufferedReader readerText, BufferedReader readerOriginalFile, BufferedWriter writer, boolean firstOnly, String eol)", "modifiers": "private", "return": "TOExecutionResult", "signature": "TOExecutionResult insertAfterRegex(BufferedReader readerText, BufferedReader readerOriginalFile, BufferedWriter writer, boolean firstOnly, String eol)", "full_signature": "private TOExecutionResult insertAfterRegex(BufferedReader readerText, BufferedReader readerOriginalFile, BufferedWriter writer, boolean firstOnly, String eol)", "class_method_signature": "InsertText.insertAfterRegex(BufferedReader readerText, BufferedReader readerOriginalFile, BufferedWriter writer, boolean firstOnly, String eol)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(BufferedReader readerText, BufferedReader readerOriginalFile, BufferedWriter writer, String eol)", "modifiers": "private", "return": "TOExecutionResult", "signature": "TOExecutionResult concat(BufferedReader readerText, BufferedReader readerOriginalFile, BufferedWriter writer, String eol)", "full_signature": "private TOExecutionResult concat(BufferedReader readerText, BufferedReader readerOriginalFile, BufferedWriter writer, String eol)", "class_method_signature": "InsertText.concat(BufferedReader readerText, BufferedReader readerOriginalFile, BufferedWriter writer, String eol)", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/operations/text/InsertText.java"}, "focal_method": {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") @Override protected", "return": "TOExecutionResult", "body": "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\")\n    @Override\n    protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext) {\n        File fileToBeChanged = getAbsoluteFile(transformedAppFolder, transformationContext);\n\n        if (!fileToBeChanged.exists()) {\n            // TODO Should this be done as pre-validation?\n            FileNotFoundException ex = new FileNotFoundException(\"File to be modified has not been found\");\n            return TOExecutionResult.error(this, ex);\n        }\n\n        BufferedReader reader = null;\n        BufferedReader readerText = null;\n        BufferedWriter writer = null;\n        TOExecutionResult result = null;\n\n        try {\n            final String eol = EolHelper.findEolDefaultToOs(fileToBeChanged);\n\n            File readFile = getOrCreateReadFile(transformedAppFolder, transformationContext);\n            reader = new BufferedReader(new InputStreamReader(new FileInputStream(readFile), StandardCharsets.UTF_8));\n            readerText = new BufferedReader(new InputStreamReader(textFileUrl.openStream(), StandardCharsets.UTF_8));\n            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileToBeChanged), StandardCharsets.UTF_8));\n\n            switch (insertionMode) {\n                case LINE_NUMBER:\n                    result = insertAtSpecificLine(readerText, reader, writer, eol);\n                    break;\n                case REGEX_FIRST:\n                    result = insertAfterRegex(readerText, reader, writer, true, eol);\n                    break;\n                case REGEX_ALL:\n                    result = insertAfterRegex(readerText, reader, writer, false, eol);\n                    break;\n                default:\n                case CONCAT:\n                    result = concat(readerText, reader, writer, eol);\n                    break;\n            }\n        } catch (IOException e) {\n            result = TOExecutionResult.error(this, e);\n        } finally {\n            try {\n                if (writer != null) try {\n                    writer.close();\n                } catch (IOException e) {\n                    result.addWarning(e);\n                }\n            } finally {\n                if(reader != null) try {\n                    reader.close();\n                } catch (IOException e) {\n                    result.addWarning(e);\n                } finally {\n                    if(readerText != null) try {\n                        readerText.close();\n                    } catch (IOException e) {\n                        result.addWarning(e);\n                    }\n                }\n            }\n        }\n\n        return result;\n    }", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") @Override protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "InsertText.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false, "invocations": ["getAbsoluteFile", "exists", "error", "findEolDefaultToOs", "getOrCreateReadFile", "openStream", "insertAtSpecificLine", "insertAfterRegex", "insertAfterRegex", "concat", "error", "close", "addWarning", "close", "addWarning", "close", "addWarning"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}