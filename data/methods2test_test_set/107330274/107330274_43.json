{"test_class": {"identifier": "RateLimitedBatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestScheduler testScheduler;", "modifier": "private", "type": "TestScheduler", "declarator": "testScheduler", "var_name": "testScheduler"}, {"original_string": "private int minimumTimeInQueueMs;", "modifier": "private", "type": "int", "declarator": "minimumTimeInQueueMs", "var_name": "minimumTimeInQueueMs"}, {"original_string": "private int timeWindowBucketSizeMs;", "modifier": "private", "type": "int", "declarator": "timeWindowBucketSizeMs", "var_name": "timeWindowBucketSizeMs"}, {"original_string": "private EmissionStrategy strategy;", "modifier": "private", "type": "EmissionStrategy", "declarator": "strategy", "var_name": "strategy"}, {"original_string": "private TokenBucket tokenBucket;", "modifier": "private", "type": "TokenBucket", "declarator": "tokenBucket", "var_name": "tokenBucket"}, {"original_string": "private Random random;", "modifier": "private", "type": "Random", "declarator": "random", "var_name": "random"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/rx/batch/RateLimitedBatcherTest.java"}, "test_case": {"identifier": "onCompletedIsNotSentAfterOnError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onCompletedIsNotSentAfterOnError() {\n        final RateLimitedBatcher<BatchableOperationMock, String> batcher = buildBatcher(minimumTimeInQueueMs);\n        final Subject<BatchableOperationMock, BatchableOperationMock> updates = PublishSubject.<BatchableOperationMock>create().toSerialized();\n\n        final AssertableSubscriber<Batch<BatchableOperationMock, String>> subscriber = updates.lift(batcher).test();\n        testScheduler.triggerActions();\n        subscriber.assertNoTerminalEvent().assertNoValues();\n\n        updates.onError(new RuntimeException(\"some problem\"));\n        testScheduler.triggerActions(); // onError is forwarded right away (i.e.: don't wait for the next flush event)\n        subscriber.assertNotCompleted().assertError(RuntimeException.class);\n\n        updates.onCompleted();\n        subscriber.assertNotCompleted();\n    }", "signature": "void onCompletedIsNotSentAfterOnError()", "full_signature": "@Test public void onCompletedIsNotSentAfterOnError()", "class_method_signature": "RateLimitedBatcherTest.onCompletedIsNotSentAfterOnError()", "testcase": true, "constructor": false, "invocations": ["buildBatcher", "toSerialized", "create", "test", "lift", "triggerActions", "assertNoValues", "assertNoTerminalEvent", "onError", "triggerActions", "assertError", "assertNotCompleted", "onCompleted", "assertNotCompleted"]}, "focal_class": {"identifier": "RateLimitedBatcher", "superclass": "", "interfaces": "implements Observable.Operator<Batch<T, I>, T>", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(RateLimitedBatcher.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RateLimitedBatcher.class)", "var_name": "logger"}, {"original_string": "private static final String ACTION_FLUSH = \"flush\";", "modifier": "private static final", "type": "String", "declarator": "ACTION_FLUSH = \"flush\"", "var_name": "ACTION_FLUSH"}, {"original_string": "private static final String ACTION_COMPLETED = \"sendCompleted\";", "modifier": "private static final", "type": "String", "declarator": "ACTION_COMPLETED = \"sendCompleted\"", "var_name": "ACTION_COMPLETED"}, {"original_string": "private static final String ACTION_ERROR = \"sendError\";", "modifier": "private static final", "type": "String", "declarator": "ACTION_ERROR = \"sendError\"", "var_name": "ACTION_ERROR"}, {"original_string": "private final InstrumentedEventLoop worker;", "modifier": "private final", "type": "InstrumentedEventLoop", "declarator": "worker", "var_name": "worker"}, {"original_string": "private final TokenBucket tokenBucket;", "modifier": "private final", "type": "TokenBucket", "declarator": "tokenBucket", "var_name": "tokenBucket"}, {"original_string": "private final long initialDelayMs;", "modifier": "private final", "type": "long", "declarator": "initialDelayMs", "var_name": "initialDelayMs"}, {"original_string": "private final long maxDelayMs;", "modifier": "private final", "type": "long", "declarator": "maxDelayMs", "var_name": "maxDelayMs"}, {"original_string": "private final IndexExtractor<T, I> indexExtractor;", "modifier": "private final", "type": "IndexExtractor<T, I>", "declarator": "indexExtractor", "var_name": "indexExtractor"}, {"original_string": "private final EmissionStrategy emissionStrategy;", "modifier": "private final", "type": "EmissionStrategy", "declarator": "emissionStrategy", "var_name": "emissionStrategy"}, {"original_string": "private final String metricsRoot;", "modifier": "private final", "type": "String", "declarator": "metricsRoot", "var_name": "metricsRoot"}, {"original_string": "private final Registry registry;", "modifier": "private final", "type": "Registry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private final Counter rateLimitCounter;", "modifier": "private final", "type": "Counter", "declarator": "rateLimitCounter", "var_name": "rateLimitCounter"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "create", "parameters": "(TokenBucket tokenBucket,\n                                                                              long initialDelay,\n                                                                              long maxDelay,\n                                                                              IndexExtractor<T, I> indexExtractor,\n                                                                              EmissionStrategy emissionStrategy,\n                                                                              String metricsRoot,\n                                                                              Registry registry,\n                                                                              Scheduler scheduler)", "modifiers": "public static", "return": "RateLimitedBatcher<T, I>", "signature": "RateLimitedBatcher<T, I> create(TokenBucket tokenBucket,\n                                                                              long initialDelay,\n                                                                              long maxDelay,\n                                                                              IndexExtractor<T, I> indexExtractor,\n                                                                              EmissionStrategy emissionStrategy,\n                                                                              String metricsRoot,\n                                                                              Registry registry,\n                                                                              Scheduler scheduler)", "full_signature": "public static RateLimitedBatcher<T, I> create(TokenBucket tokenBucket,\n                                                                              long initialDelay,\n                                                                              long maxDelay,\n                                                                              IndexExtractor<T, I> indexExtractor,\n                                                                              EmissionStrategy emissionStrategy,\n                                                                              String metricsRoot,\n                                                                              Registry registry,\n                                                                              Scheduler scheduler)", "class_method_signature": "RateLimitedBatcher.create(TokenBucket tokenBucket,\n                                                                              long initialDelay,\n                                                                              long maxDelay,\n                                                                              IndexExtractor<T, I> indexExtractor,\n                                                                              EmissionStrategy emissionStrategy,\n                                                                              String metricsRoot,\n                                                                              Registry registry,\n                                                                              Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "RateLimitedBatcher", "parameters": "(TokenBucket tokenBucket,\n                               long initialDelay,\n                               long maxDelay,\n                               IndexExtractor<T, I> indexExtractor,\n                               EmissionStrategy emissionStrategy,\n                               String metricsRoot,\n                               Registry registry,\n                               Scheduler scheduler)", "modifiers": "private", "return": "", "signature": " RateLimitedBatcher(TokenBucket tokenBucket,\n                               long initialDelay,\n                               long maxDelay,\n                               IndexExtractor<T, I> indexExtractor,\n                               EmissionStrategy emissionStrategy,\n                               String metricsRoot,\n                               Registry registry,\n                               Scheduler scheduler)", "full_signature": "private  RateLimitedBatcher(TokenBucket tokenBucket,\n                               long initialDelay,\n                               long maxDelay,\n                               IndexExtractor<T, I> indexExtractor,\n                               EmissionStrategy emissionStrategy,\n                               String metricsRoot,\n                               Registry registry,\n                               Scheduler scheduler)", "class_method_signature": "RateLimitedBatcher.RateLimitedBatcher(TokenBucket tokenBucket,\n                               long initialDelay,\n                               long maxDelay,\n                               IndexExtractor<T, I> indexExtractor,\n                               EmissionStrategy emissionStrategy,\n                               String metricsRoot,\n                               Registry registry,\n                               Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "(final Subscriber<? super Batch<T, I>> downstream)", "modifiers": "@Override public", "return": "Subscriber<? super T>", "signature": "Subscriber<? super T> call(final Subscriber<? super Batch<T, I>> downstream)", "full_signature": "@Override public Subscriber<? super T> call(final Subscriber<? super Batch<T, I>> downstream)", "class_method_signature": "RateLimitedBatcher.call(final Subscriber<? super Batch<T, I>> downstream)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/rx/batch/RateLimitedBatcher.java"}, "focal_method": {"identifier": "create", "parameters": "(TokenBucket tokenBucket,\n                                                                              long initialDelay,\n                                                                              long maxDelay,\n                                                                              IndexExtractor<T, I> indexExtractor,\n                                                                              EmissionStrategy emissionStrategy,\n                                                                              String metricsRoot,\n                                                                              Registry registry,\n                                                                              Scheduler scheduler)", "modifiers": "public static", "return": "RateLimitedBatcher<T, I>", "body": "public static <T extends Batchable<?>, I> RateLimitedBatcher<T, I> create(TokenBucket tokenBucket,\n                                                                              long initialDelay,\n                                                                              long maxDelay,\n                                                                              IndexExtractor<T, I> indexExtractor,\n                                                                              EmissionStrategy emissionStrategy,\n                                                                              String metricsRoot,\n                                                                              Registry registry,\n                                                                              Scheduler scheduler) {\n        return new RateLimitedBatcher<T, I>(tokenBucket, initialDelay, maxDelay, indexExtractor, emissionStrategy, metricsRoot, registry, scheduler);\n    }", "signature": "RateLimitedBatcher<T, I> create(TokenBucket tokenBucket,\n                                                                              long initialDelay,\n                                                                              long maxDelay,\n                                                                              IndexExtractor<T, I> indexExtractor,\n                                                                              EmissionStrategy emissionStrategy,\n                                                                              String metricsRoot,\n                                                                              Registry registry,\n                                                                              Scheduler scheduler)", "full_signature": "public static RateLimitedBatcher<T, I> create(TokenBucket tokenBucket,\n                                                                              long initialDelay,\n                                                                              long maxDelay,\n                                                                              IndexExtractor<T, I> indexExtractor,\n                                                                              EmissionStrategy emissionStrategy,\n                                                                              String metricsRoot,\n                                                                              Registry registry,\n                                                                              Scheduler scheduler)", "class_method_signature": "RateLimitedBatcher.create(TokenBucket tokenBucket,\n                                                                              long initialDelay,\n                                                                              long maxDelay,\n                                                                              IndexExtractor<T, I> indexExtractor,\n                                                                              EmissionStrategy emissionStrategy,\n                                                                              String metricsRoot,\n                                                                              Registry registry,\n                                                                              Scheduler scheduler)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}