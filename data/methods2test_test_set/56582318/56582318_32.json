{"test_class": {"identifier": "FrechetTest", "superclass": "", "interfaces": "", "fields": [], "file": "geoxygene-spatial/src/test/java/fr/ign/cogit/geoxygene/distance/FrechetTest.java"}, "test_case": {"identifier": "testDiscreteFrechet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDiscreteFrechet() {\n    ILineString p = new GM_LineString(new DirectPosition(311, 747), new DirectPosition(805, 746),\n        new DirectPosition(285, 424), new DirectPosition(990, 428));\n    ILineString q = new GM_LineString(new DirectPosition(301, 629), new DirectPosition(438, 773),\n        new DirectPosition(528, 727), new DirectPosition(674, 769), new DirectPosition(829, 742),\n        new DirectPosition(282, 506), new DirectPosition(903, 401), new DirectPosition(954, 483));\n//    p = p.asLineString(2.0, 0);\n//    q = q.asLineString(2.0, 0);\n//    List<IDirectPosition> listq = new ArrayList<IDirectPosition>(q.getControlPoint());\n//    for (IDirectPosition point : p.getControlPoint()) {\n//      q = Operateurs.projectionEtInsertion(point, q);\n//    }\n//    for (IDirectPosition point : listq) {\n//      p = Operateurs.projectionEtInsertion(point, p);\n//    }\n    System.out.println(p);\n    System.out.println(q);\n    double d = Frechet.discreteFrechet(p, q);\n    System.out.println(d);\n    d = Frechet.discreteFrechetWithProjection(p, q);\n    System.out.println(d);\n    \n    p = new GM_LineString(new DirectPosition(283, 253), new DirectPosition(835, 296),\n        new DirectPosition(859, 52));\n    q = new GM_LineString(new DirectPosition(282, 264), new DirectPosition(470.35780999672346,\n        267.5949018656868), new DirectPosition(537, 186), new DirectPosition(682, 303),\n        new DirectPosition(911, 266), new DirectPosition(811, 41));\n    d = Frechet.discreteFrechet(p, q);\n    System.out.println(d);\n    d = Frechet.discreteFrechetWithProjection(p, q);\n    System.out.println(d);\n\n  }", "signature": "void testDiscreteFrechet()", "full_signature": "@Test public void testDiscreteFrechet()", "class_method_signature": "FrechetTest.testDiscreteFrechet()", "testcase": true, "constructor": false, "invocations": ["println", "println", "discreteFrechet", "println", "discreteFrechetWithProjection", "println", "discreteFrechet", "println", "discreteFrechetWithProjection", "println"]}, "focal_class": {"identifier": "Frechet", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "discreteFrechetCouplingMeasure", "parameters": "(ILineString p,\n      ILineString q, int i, int j, double[][] ca)", "modifiers": "private static", "return": "double", "signature": "double discreteFrechetCouplingMeasure(ILineString p,\n      ILineString q, int i, int j, double[][] ca)", "full_signature": "private static double discreteFrechetCouplingMeasure(ILineString p,\n      ILineString q, int i, int j, double[][] ca)", "class_method_signature": "Frechet.discreteFrechetCouplingMeasure(ILineString p,\n      ILineString q, int i, int j, double[][] ca)", "testcase": false, "constructor": false}, {"identifier": "discreteFrechet", "parameters": "(ILineString p, ILineString q)", "modifiers": "public static", "return": "double", "signature": "double discreteFrechet(ILineString p, ILineString q)", "full_signature": "public static double discreteFrechet(ILineString p, ILineString q)", "class_method_signature": "Frechet.discreteFrechet(ILineString p, ILineString q)", "testcase": false, "constructor": false}, {"identifier": "discreteFrechetWithProjection", "parameters": "(ILineString p,\n      ILineString q)", "modifiers": "public static", "return": "double", "signature": "double discreteFrechetWithProjection(ILineString p,\n      ILineString q)", "full_signature": "public static double discreteFrechetWithProjection(ILineString p,\n      ILineString q)", "class_method_signature": "Frechet.discreteFrechetWithProjection(ILineString p,\n      ILineString q)", "testcase": false, "constructor": false}, {"identifier": "partialFrechet", "parameters": "(ILineString p, ILineString q)", "modifiers": "public static", "return": "double", "signature": "double partialFrechet(ILineString p, ILineString q)", "full_signature": "public static double partialFrechet(ILineString p, ILineString q)", "class_method_signature": "Frechet.partialFrechet(ILineString p, ILineString q)", "testcase": false, "constructor": false}, {"identifier": "partialFrechetpp", "parameters": "(ILineString p, ILineString q)", "modifiers": "private static", "return": "double", "signature": "double partialFrechetpp(ILineString p, ILineString q)", "full_signature": "private static double partialFrechetpp(ILineString p, ILineString q)", "class_method_signature": "Frechet.partialFrechetpp(ILineString p, ILineString q)", "testcase": false, "constructor": false}, {"identifier": "partialFrechet", "parameters": "(final List<IDirectPosition> p,\n      final List<IDirectPosition> q)", "modifiers": "private static", "return": "double", "signature": "double partialFrechet(final List<IDirectPosition> p,\n      final List<IDirectPosition> q)", "full_signature": "private static double partialFrechet(final List<IDirectPosition> p,\n      final List<IDirectPosition> q)", "class_method_signature": "Frechet.partialFrechet(final List<IDirectPosition> p,\n      final List<IDirectPosition> q)", "testcase": false, "constructor": false}, {"identifier": "freeCellEllipse", "parameters": "(IDirectPosition p1,\n      IDirectPosition p2, IDirectPosition q1, IDirectPosition q2)", "modifiers": "public static", "return": "double[]", "signature": "double[] freeCellEllipse(IDirectPosition p1,\n      IDirectPosition p2, IDirectPosition q1, IDirectPosition q2)", "full_signature": "public static double[] freeCellEllipse(IDirectPosition p1,\n      IDirectPosition p2, IDirectPosition q1, IDirectPosition q2)", "class_method_signature": "Frechet.freeCellEllipse(IDirectPosition p1,\n      IDirectPosition p2, IDirectPosition q1, IDirectPosition q2)", "testcase": false, "constructor": false}, {"identifier": "freeSpaceDiagram", "parameters": "(IDirectPositionList p,\n      IDirectPositionList q, double sigma)", "modifiers": "public static", "return": "IPolygon[][]", "signature": "IPolygon[][] freeSpaceDiagram(IDirectPositionList p,\n      IDirectPositionList q, double sigma)", "full_signature": "public static IPolygon[][] freeSpaceDiagram(IDirectPositionList p,\n      IDirectPositionList q, double sigma)", "class_method_signature": "Frechet.freeSpaceDiagram(IDirectPositionList p,\n      IDirectPositionList q, double sigma)", "testcase": false, "constructor": false}, {"identifier": "fsdCalculation", "parameters": "(IDirectPositionList p,\n      IDirectPositionList q, double sigma)", "modifiers": "public static", "return": "double[][][][]", "signature": "double[][][][] fsdCalculation(IDirectPositionList p,\n      IDirectPositionList q, double sigma)", "full_signature": "public static double[][][][] fsdCalculation(IDirectPositionList p,\n      IDirectPositionList q, double sigma)", "class_method_signature": "Frechet.fsdCalculation(IDirectPositionList p,\n      IDirectPositionList q, double sigma)", "testcase": false, "constructor": false}, {"identifier": "boundary", "parameters": "(IDirectPosition p, IDirectPosition q1,\n      IDirectPosition q2, double r)", "modifiers": "public static", "return": "double[]", "signature": "double[] boundary(IDirectPosition p, IDirectPosition q1,\n      IDirectPosition q2, double r)", "full_signature": "public static double[] boundary(IDirectPosition p, IDirectPosition q1,\n      IDirectPosition q2, double r)", "class_method_signature": "Frechet.boundary(IDirectPosition p, IDirectPosition q1,\n      IDirectPosition q2, double r)", "testcase": false, "constructor": false}, {"identifier": "circleLineIntersect", "parameters": "(double x1, double y1,\n      double x2, double y2, double cx, double cy, double cr)", "modifiers": "public static", "return": "DirectPosition[]", "signature": "DirectPosition[] circleLineIntersect(double x1, double y1,\n      double x2, double y2, double cx, double cy, double cr)", "full_signature": "public static DirectPosition[] circleLineIntersect(double x1, double y1,\n      double x2, double y2, double cx, double cy, double cr)", "class_method_signature": "Frechet.circleLineIntersect(double x1, double y1,\n      double x2, double y2, double cx, double cy, double cr)", "testcase": false, "constructor": false}, {"identifier": "pointOnSegment", "parameters": "(double x1, double y1, double x2, double y2,\n      double x3, double y3)", "modifiers": "public static", "return": "int", "signature": "int pointOnSegment(double x1, double y1, double x2, double y2,\n      double x3, double y3)", "full_signature": "public static int pointOnSegment(double x1, double y1, double x2, double y2,\n      double x3, double y3)", "class_method_signature": "Frechet.pointOnSegment(double x1, double y1, double x2, double y2,\n      double x3, double y3)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(double x1, double y1, double x2, double y2)", "modifiers": "public static", "return": "double", "signature": "double distance(double x1, double y1, double x2, double y2)", "full_signature": "public static double distance(double x1, double y1, double x2, double y2)", "class_method_signature": "Frechet.distance(double x1, double y1, double x2, double y2)", "testcase": false, "constructor": false}], "file": "geoxygene-spatial/src/main/java/fr/ign/cogit/geoxygene/distance/Frechet.java"}, "focal_method": {"identifier": "discreteFrechet", "parameters": "(ILineString p, ILineString q)", "modifiers": "public static", "return": "double", "body": "public static double discreteFrechet(ILineString p, ILineString q) {\n    // System.out.println(\"FRECHET P = \" + p);\n    // System.out.println(\"FRECHET Q = \" + q);\n    int sizeP = p.sizeControlPoint();\n    int sizeQ = q.sizeControlPoint();\n    double[][] ca = new double[sizeP][sizeQ];\n    for (int i = 0; i < sizeP; i++) {\n      for (int j = 0; j < sizeQ; j++) {\n        ca[i][j] = -1.0;\n      }\n    }\n    double d = discreteFrechetCouplingMeasure(p, q, sizeP - 1, sizeQ - 1, ca);\n\n    return d;\n  }", "signature": "double discreteFrechet(ILineString p, ILineString q)", "full_signature": "public static double discreteFrechet(ILineString p, ILineString q)", "class_method_signature": "Frechet.discreteFrechet(ILineString p, ILineString q)", "testcase": false, "constructor": false, "invocations": ["sizeControlPoint", "sizeControlPoint", "discreteFrechetCouplingMeasure"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}