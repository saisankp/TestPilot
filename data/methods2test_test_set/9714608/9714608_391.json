{"test_class": {"identifier": "MultiAttributeCollectionTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "private MultiAttributeCollection provider;", "modifier": "private", "type": "MultiAttributeCollection", "declarator": "provider", "var_name": "provider"}, {"original_string": "private HeapAttributeCollection subprovider1;", "modifier": "private", "type": "HeapAttributeCollection", "declarator": "subprovider1", "var_name": "subprovider1"}, {"original_string": "private HeapAttributeCollection subprovider2;", "modifier": "private", "type": "HeapAttributeCollection", "declarator": "subprovider2", "var_name": "subprovider2"}, {"original_string": "private HeapAttributeCollection subprovider3;", "modifier": "private", "type": "HeapAttributeCollection", "declarator": "subprovider3", "var_name": "subprovider3"}, {"original_string": "private AttributeContainerStub subcontainer4;", "modifier": "private", "type": "AttributeContainerStub", "declarator": "subcontainer4", "var_name": "subcontainer4"}], "file": "advanced/attributes/src/test/java/org/arakhne/afc/attrs/collection/MultiAttributeCollectionTest.java"}, "test_case": {"identifier": "setAttributeAttribute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void setAttributeAttribute() throws Exception {\n\t\t//\n\t\t// Set ZZZ\n\t\t//\n\t\tassertEquals(\n\t\t\t\tnew AttributeImpl(\"ZZZ\", \"xyz\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tthis.provider.setAttribute(new AttributeImpl(\"ZZZ\", \"xyz\")));   //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(6, this.subprovider1.getAttributeCount());\n\t\tassertEquals(6, this.subprovider2.getAttributeCount());\n\t\tassertEquals(7, this.subprovider3.getAttributeCount());\n\t\tassertEquals(2, this.subcontainer4.getAttributeCount());\n\t\tassertEquals(10, this.provider.getAttributeCount());\t\t\n\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tnew AttributeImpl(\"ZZZ\", \"xyz\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"A\", true),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"B\", 1),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"C\", new URL(\"http://www.multiagent.fr\")),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"E\", new URL(\"http://www.multiagent.fr\")),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"Z1\", \"Z1\")   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t), this.subprovider1.getAllAttributes());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tnew AttributeImpl(\"ZZZ\", \"xyz\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"A\", true),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"B\", 1),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"D\", \"abc\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"E\", 1),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"Z2\", \"Z2\")   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t), this.subprovider2.getAllAttributes());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tnew AttributeImpl(\"ZZZ\", \"xyz\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"A\", false),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"B\", 1.),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"C\", new URL(\"http://www.multiagent.fr\")),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"D\", \"abc\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"E\", true),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"Z3\", \"Z3\")   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t), this.subprovider3.getAllAttributes());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tnew AttributeImpl(\"A\", true),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"Z4\", \"Z4\")   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t), this.subcontainer4.getAllAttributes());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tmakeUninitialized(\"ZZZ\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"A\", AttributeType.BOOLEAN),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"B\", AttributeType.INTEGER),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"C\", AttributeType.URL),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"D\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"E\", AttributeType.OBJECT),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"Z1\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"Z2\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"Z3\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"Z4\", AttributeType.STRING)  //$NON-NLS-1$\n\t\t), this.provider.getAllAttributes());\n\n\t\t//\n\t\t// Set B\n\t\t//\n\t\tassertEquals(\n\t\t\t\tnew AttributeImpl(\"B\", \"def\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tthis.provider.setAttribute(new AttributeImpl(\"B\", \"def\")));   //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(6, this.subprovider1.getAttributeCount());\n\t\tassertEquals(6, this.subprovider2.getAttributeCount());\n\t\tassertEquals(7, this.subprovider3.getAttributeCount());\n\t\tassertEquals(2, this.subcontainer4.getAttributeCount());\n\t\tassertEquals(10, this.provider.getAttributeCount());\t\t\n\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tnew AttributeImpl(\"ZZZ\", \"xyz\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"A\", true),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"B\", \"def\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"C\", new URL(\"http://www.multiagent.fr\")),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"E\", new URL(\"http://www.multiagent.fr\")),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"Z1\", \"Z1\")   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t), this.subprovider1.getAllAttributes());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tnew AttributeImpl(\"ZZZ\", \"xyz\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"A\", true),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"B\", \"def\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"D\", \"abc\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"E\", 1),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"Z2\", \"Z2\")   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t), this.subprovider2.getAllAttributes());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tnew AttributeImpl(\"ZZZ\", \"xyz\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"A\", false),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"B\", \"def\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"C\", new URL(\"http://www.multiagent.fr\")),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"D\", \"abc\"),   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\tnew AttributeImpl(\"E\", true),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"Z3\", \"Z3\")   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t), this.subprovider3.getAllAttributes());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tnew AttributeImpl(\"A\", true),  //$NON-NLS-1$\n\t\t\t\tnew AttributeImpl(\"Z4\", \"Z4\")   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t), this.subcontainer4.getAllAttributes());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tmakeUninitialized(\"ZZZ\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"A\", AttributeType.BOOLEAN),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"B\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"C\", AttributeType.URL),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"D\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"E\", AttributeType.OBJECT),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"Z1\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"Z2\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"Z3\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"Z4\", AttributeType.STRING)  //$NON-NLS-1$\n\t\t), this.provider.getAllAttributes());\n\t}", "signature": "void setAttributeAttribute()", "full_signature": "@Test public void setAttributeAttribute()", "class_method_signature": "MultiAttributeCollectionTest.setAttributeAttribute()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "setAttribute", "assertEquals", "getAttributeCount", "assertEquals", "getAttributeCount", "assertEquals", "getAttributeCount", "assertEquals", "getAttributeCount", "assertEquals", "getAttributeCount", "assertEpsilonEquals", "asList", "getAllAttributes", "assertEpsilonEquals", "asList", "getAllAttributes", "assertEpsilonEquals", "asList", "getAllAttributes", "assertEpsilonEquals", "asList", "getAllAttributes", "assertEpsilonEquals", "asList", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "getAllAttributes", "assertEquals", "setAttribute", "assertEquals", "getAttributeCount", "assertEquals", "getAttributeCount", "assertEquals", "getAttributeCount", "assertEquals", "getAttributeCount", "assertEquals", "getAttributeCount", "assertEpsilonEquals", "asList", "getAllAttributes", "assertEpsilonEquals", "asList", "getAllAttributes", "assertEpsilonEquals", "asList", "getAllAttributes", "assertEpsilonEquals", "asList", "getAllAttributes", "assertEpsilonEquals", "asList", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "getAllAttributes"]}, "focal_class": {"identifier": "MultiAttributeCollection", "superclass": "extends MultiAttributeProvider", "interfaces": "implements AttributeCollection", "fields": [{"original_string": "private static final long serialVersionUID = 6542692326662357040L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 6542692326662357040L", "var_name": "serialVersionUID"}, {"original_string": "AtomicBoolean runProviderEvents = new AtomicBoolean(true);", "modifier": "", "type": "AtomicBoolean", "declarator": "runProviderEvents = new AtomicBoolean(true)", "var_name": "runProviderEvents"}, {"original_string": "private Handler eventHandler = new Handler();", "modifier": "private", "type": "Handler", "declarator": "eventHandler = new Handler()", "var_name": "eventHandler"}, {"original_string": "private Collection<AttributeChangeListener> listeners;", "modifier": "private", "type": "Collection<AttributeChangeListener>", "declarator": "listeners", "var_name": "listeners"}, {"original_string": "private boolean isEventFirable = true;", "modifier": "private", "type": "boolean", "declarator": "isEventFirable = true", "var_name": "isEventFirable"}], "methods": [{"identifier": "isEventFirable", "parameters": "()", "modifiers": "@Pure @Override public synchronized", "return": "boolean", "signature": "boolean isEventFirable()", "full_signature": "@Pure @Override public synchronized boolean isEventFirable()", "class_method_signature": "MultiAttributeCollection.isEventFirable()", "testcase": false, "constructor": false}, {"identifier": "setEventFirable", "parameters": "(boolean isFirable)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void setEventFirable(boolean isFirable)", "full_signature": "@Override public synchronized void setEventFirable(boolean isFirable)", "class_method_signature": "MultiAttributeCollection.setEventFirable(boolean isFirable)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "MultiAttributeCollection", "signature": "MultiAttributeCollection clone()", "full_signature": "@Override public MultiAttributeCollection clone()", "class_method_signature": "MultiAttributeCollection.clone()", "testcase": false, "constructor": false}, {"identifier": "addAttributeContainer", "parameters": "(AttributeProvider container)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAttributeContainer(AttributeProvider container)", "full_signature": "@Override public boolean addAttributeContainer(AttributeProvider container)", "class_method_signature": "MultiAttributeCollection.addAttributeContainer(AttributeProvider container)", "testcase": false, "constructor": false}, {"identifier": "removeAttributeContainer", "parameters": "(AttributeProvider container)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAttributeContainer(AttributeProvider container)", "full_signature": "@Override public boolean removeAttributeContainer(AttributeProvider container)", "class_method_signature": "MultiAttributeCollection.removeAttributeContainer(AttributeProvider container)", "testcase": false, "constructor": false}, {"identifier": "addAttributeChangeListener", "parameters": "(AttributeChangeListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addAttributeChangeListener(AttributeChangeListener listener)", "full_signature": "@Override public void addAttributeChangeListener(AttributeChangeListener listener)", "class_method_signature": "MultiAttributeCollection.addAttributeChangeListener(AttributeChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeAttributeChangeListener", "parameters": "(AttributeChangeListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeAttributeChangeListener(AttributeChangeListener listener)", "full_signature": "@Override public void removeAttributeChangeListener(AttributeChangeListener listener)", "class_method_signature": "MultiAttributeCollection.removeAttributeChangeListener(AttributeChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "fireAttributeChange", "parameters": "(AttributeChangeEvent event)", "modifiers": "protected", "return": "void", "signature": "void fireAttributeChange(AttributeChangeEvent event)", "full_signature": "protected void fireAttributeChange(AttributeChangeEvent event)", "class_method_signature": "MultiAttributeCollection.fireAttributeChange(AttributeChangeEvent event)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "MultiAttributeCollection.flush()", "testcase": false, "constructor": false}, {"identifier": "removeAllAttributes", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAllAttributes()", "full_signature": "@Override public boolean removeAllAttributes()", "class_method_signature": "MultiAttributeCollection.removeAllAttributes()", "testcase": false, "constructor": false}, {"identifier": "removeAttribute", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAttribute(String name)", "full_signature": "@Override public boolean removeAttribute(String name)", "class_method_signature": "MultiAttributeCollection.removeAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "renameAttribute", "parameters": "(String oldname, String newname)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean renameAttribute(String oldname, String newname)", "full_signature": "@Override public boolean renameAttribute(String oldname, String newname)", "class_method_signature": "MultiAttributeCollection.renameAttribute(String oldname, String newname)", "testcase": false, "constructor": false}, {"identifier": "renameAttribute", "parameters": "(String oldname, String newname, boolean overwrite)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean renameAttribute(String oldname, String newname, boolean overwrite)", "full_signature": "@Override public boolean renameAttribute(String oldname, String newname, boolean overwrite)", "class_method_signature": "MultiAttributeCollection.renameAttribute(String oldname, String newname, boolean overwrite)", "testcase": false, "constructor": false}, {"identifier": "addAttributes", "parameters": "(AttributeProvider content)", "modifiers": "@Override public", "return": "void", "signature": "void addAttributes(AttributeProvider content)", "full_signature": "@Override public void addAttributes(AttributeProvider content)", "class_method_signature": "MultiAttributeCollection.addAttributes(AttributeProvider content)", "testcase": false, "constructor": false}, {"identifier": "addAttributes", "parameters": "(Map<String, Object> content)", "modifiers": "@Override public", "return": "void", "signature": "void addAttributes(Map<String, Object> content)", "full_signature": "@Override public void addAttributes(Map<String, Object> content)", "class_method_signature": "MultiAttributeCollection.addAttributes(Map<String, Object> content)", "testcase": false, "constructor": false}, {"identifier": "setAttributes", "parameters": "(AttributeProvider content)", "modifiers": "@Override public", "return": "void", "signature": "void setAttributes(AttributeProvider content)", "full_signature": "@Override public void setAttributes(AttributeProvider content)", "class_method_signature": "MultiAttributeCollection.setAttributes(AttributeProvider content)", "testcase": false, "constructor": false}, {"identifier": "setAttributes", "parameters": "(Map<String, Object> content)", "modifiers": "@Override public", "return": "void", "signature": "void setAttributes(Map<String, Object> content)", "full_signature": "@Override public void setAttributes(Map<String, Object> content)", "class_method_signature": "MultiAttributeCollection.setAttributes(Map<String, Object> content)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, AttributeValue value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, AttributeValue value)", "full_signature": "@Override public Attribute setAttribute(String name, AttributeValue value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, AttributeValue value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, boolean value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, boolean value)", "full_signature": "@Override public Attribute setAttribute(String name, boolean value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, boolean value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, int value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, int value)", "full_signature": "@Override public Attribute setAttribute(String name, int value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, int value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, long value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, long value)", "full_signature": "@Override public Attribute setAttribute(String name, long value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, long value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, float value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, float value)", "full_signature": "@Override public Attribute setAttribute(String name, float value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, float value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, double value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, double value)", "full_signature": "@Override public Attribute setAttribute(String name, double value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, double value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, String value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, String value)", "full_signature": "@Override public Attribute setAttribute(String name, String value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, InetAddress value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, InetAddress value)", "full_signature": "@Override public Attribute setAttribute(String name, InetAddress value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, InetAddress value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, InetSocketAddress value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, InetSocketAddress value)", "full_signature": "@Override public Attribute setAttribute(String name, InetSocketAddress value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, InetSocketAddress value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, Enum<?> value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, Enum<?> value)", "full_signature": "@Override public Attribute setAttribute(String name, Enum<?> value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, Enum<?> value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, Class<?> value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, Class<?> value)", "full_signature": "@Override public Attribute setAttribute(String name, Class<?> value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, Class<?> value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, UUID value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, UUID value)", "full_signature": "@Override public Attribute setAttribute(String name, UUID value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, UUID value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, URL value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, URL value)", "full_signature": "@Override public Attribute setAttribute(String name, URL value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, URL value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, URI value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, URI value)", "full_signature": "@Override public Attribute setAttribute(String name, URI value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, URI value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, Date value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(String name, Date value)", "full_signature": "@Override public Attribute setAttribute(String name, Date value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, Date value)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(Attribute value)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttribute(Attribute value)", "full_signature": "@Override public Attribute setAttribute(Attribute value)", "class_method_signature": "MultiAttributeCollection.setAttribute(Attribute value)", "testcase": false, "constructor": false}, {"identifier": "setAttributeType", "parameters": "(String name, AttributeType type)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute setAttributeType(String name, AttributeType type)", "full_signature": "@Override public Attribute setAttributeType(String name, AttributeType type)", "class_method_signature": "MultiAttributeCollection.setAttributeType(String name, AttributeType type)", "testcase": false, "constructor": false}, {"identifier": "caseRenameAttributeChange", "parameters": "(AttributeChangeEvent event)", "modifiers": "private", "return": "void", "signature": "void caseRenameAttributeChange(AttributeChangeEvent event)", "full_signature": "private void caseRenameAttributeChange(AttributeChangeEvent event)", "class_method_signature": "MultiAttributeCollection.caseRenameAttributeChange(AttributeChangeEvent event)", "testcase": false, "constructor": false}], "file": "advanced/attributes/src/main/java/org/arakhne/afc/attrs/collection/MultiAttributeCollection.java"}, "focal_method": {"identifier": "setAttribute", "parameters": "(String name, AttributeValue value)", "modifiers": "@Override public", "return": "Attribute", "body": "@Override\n\tpublic Attribute setAttribute(String name, AttributeValue value) throws AttributeException {\n\t\tfinal boolean b = this.runProviderEvents.getAndSet(false);\n\t\ttry {\n\t\t\tboolean changed = false;\n\t\t\tAttribute attr;\n\t\t\tfinal ManyValueAttributeValue oldValue = new ManyValueAttributeValue();\n\t\t\tfinal ManyValueAttributeValue newValue = new ManyValueAttributeValue();\n\t\t\tfor (final AttributeProvider c : containers()) {\n\t\t\t\tassign(oldValue, c.getAttribute(name));\n\t\t\t\tif (c instanceof AttributeCollection) {\n\t\t\t\t\tattr = ((AttributeCollection) c).setAttribute(name, value);\n\t\t\t\t\tassign(newValue, attr);\n\t\t\t\t\tif (attr != null) {\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tassign(newValue, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (changed) {\n\t\t\t\tfinal AttributeValue oValue = canonize(oldValue);\n\t\t\t\tfinal AttributeValue nValue = canonize(newValue);\n\t\t\t\tthis.cache.put(name, nValue);\n\t\t\t\tfinal AttributeChangeEvent event;\n\t\t\t\tif (nValue == null) {\n\t\t\t\t\tevent = new AttributeChangeEvent(this, Type.REMOVAL, name, oValue, null, null);\n\t\t\t\t} else if (oValue != null && oValue.isAssigned()) {\n\t\t\t\t\tevent = new AttributeChangeEvent(this, Type.VALUE_UPDATE, name, oValue, name, nValue);\n\t\t\t\t} else {\n\t\t\t\t\tevent = new AttributeChangeEvent(this, Type.ADDITION, null, null, name, nValue);\n\t\t\t\t}\n\t\t\t\tfireAttributeChange(event);\n\t\t\t\treturn new AttributeImpl(name, value);\n\t\t\t}\n\t\t\treturn null;\n\t\t} finally {\n\t\t\tthis.runProviderEvents.set(b);\n\t\t}\n\t}", "signature": "Attribute setAttribute(String name, AttributeValue value)", "full_signature": "@Override public Attribute setAttribute(String name, AttributeValue value)", "class_method_signature": "MultiAttributeCollection.setAttribute(String name, AttributeValue value)", "testcase": false, "constructor": false, "invocations": ["getAndSet", "containers", "assign", "getAttribute", "setAttribute", "assign", "assign", "canonize", "canonize", "put", "isAssigned", "fireAttributeChange", "set"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}