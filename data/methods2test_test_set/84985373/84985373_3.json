{"test_class": {"identifier": "Vector3Test", "superclass": "", "interfaces": "", "fields": [], "file": "common-tools/clas-physics/src/test/java/org/jlab/clas/physics/Vector3Test.java"}, "test_case": {"identifier": "testCompare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCompare() {\n\t\tVector3 v1 = new Vector3(1, 2, 3);\n\t\tVector3 v2 = new Vector3(1, 2, 3);\n\t\tassertEquals(v1.compare(v2), 0.0, 1e-6);\n\t\tassertEquals(v1.compareWeighted(v2), 0.0, 1e-6);\n\t}", "signature": "void testCompare()", "full_signature": "@Test public void testCompare()", "class_method_signature": "Vector3Test.testCompare()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compare", "assertEquals", "compareWeighted"]}, "focal_class": {"identifier": "Vector3", "superclass": "", "interfaces": "", "fields": [{"original_string": "double fX;", "modifier": "", "type": "double", "declarator": "fX", "var_name": "fX"}, {"original_string": "double fY;", "modifier": "", "type": "double", "declarator": "fY", "var_name": "fY"}, {"original_string": "double fZ;", "modifier": "", "type": "double", "declarator": "fZ", "var_name": "fZ"}], "methods": [{"identifier": "Vector3", "parameters": "(Vector3 v)", "modifiers": "public", "return": "", "signature": " Vector3(Vector3 v)", "full_signature": "public  Vector3(Vector3 v)", "class_method_signature": "Vector3.Vector3(Vector3 v)", "testcase": false, "constructor": true}, {"identifier": "Vector3", "parameters": "()", "modifiers": "public", "return": "", "signature": " Vector3()", "full_signature": "public  Vector3()", "class_method_signature": "Vector3.Vector3()", "testcase": false, "constructor": true}, {"identifier": "Vector3", "parameters": "(double x, double y, double z)", "modifiers": "public", "return": "", "signature": " Vector3(double x, double y, double z)", "full_signature": "public  Vector3(double x, double y, double z)", "class_method_signature": "Vector3.Vector3(double x, double y, double z)", "testcase": false, "constructor": true}, {"identifier": "x", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double x()", "full_signature": "public double x()", "class_method_signature": "Vector3.x()", "testcase": false, "constructor": false}, {"identifier": "y", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double y()", "full_signature": "public double y()", "class_method_signature": "Vector3.y()", "testcase": false, "constructor": false}, {"identifier": "z", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double z()", "full_signature": "public double z()", "class_method_signature": "Vector3.z()", "testcase": false, "constructor": false}, {"identifier": "setXYZ", "parameters": "(double x, double y, double z)", "modifiers": "public", "return": "void", "signature": "void setXYZ(double x, double y, double z)", "full_signature": "public void setXYZ(double x, double y, double z)", "class_method_signature": "Vector3.setXYZ(double x, double y, double z)", "testcase": false, "constructor": false}, {"identifier": "rotateX", "parameters": "(double angle)", "modifiers": "public", "return": "void", "signature": "void rotateX(double angle)", "full_signature": "public void rotateX(double angle)", "class_method_signature": "Vector3.rotateX(double angle)", "testcase": false, "constructor": false}, {"identifier": "rotateY", "parameters": "(double angle)", "modifiers": "public", "return": "void", "signature": "void rotateY(double angle)", "full_signature": "public void rotateY(double angle)", "class_method_signature": "Vector3.rotateY(double angle)", "testcase": false, "constructor": false}, {"identifier": "rotateZ", "parameters": "(double angle)", "modifiers": "public", "return": "void", "signature": "void rotateZ(double angle)", "full_signature": "public void rotateZ(double angle)", "class_method_signature": "Vector3.rotateZ(double angle)", "testcase": false, "constructor": false}, {"identifier": "setMagThetaPhi", "parameters": "(double mag, double theta , double phi)", "modifiers": "public", "return": "void", "signature": "void setMagThetaPhi(double mag, double theta , double phi)", "full_signature": "public void setMagThetaPhi(double mag, double theta , double phi)", "class_method_signature": "Vector3.setMagThetaPhi(double mag, double theta , double phi)", "testcase": false, "constructor": false}, {"identifier": "setMag", "parameters": "(double mag)", "modifiers": "public", "return": "void", "signature": "void setMag(double mag)", "full_signature": "public void setMag(double mag)", "class_method_signature": "Vector3.setMag(double mag)", "testcase": false, "constructor": false}, {"identifier": "mag2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double mag2()", "full_signature": "public double mag2()", "class_method_signature": "Vector3.mag2()", "testcase": false, "constructor": false}, {"identifier": "mag", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double mag()", "full_signature": "public double mag()", "class_method_signature": "Vector3.mag()", "testcase": false, "constructor": false}, {"identifier": "rho", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double rho()", "full_signature": "public double rho()", "class_method_signature": "Vector3.rho()", "testcase": false, "constructor": false}, {"identifier": "theta", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double theta()", "full_signature": "public double theta()", "class_method_signature": "Vector3.theta()", "testcase": false, "constructor": false}, {"identifier": "phi", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double phi()", "full_signature": "public double phi()", "class_method_signature": "Vector3.phi()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Vector3 vector)", "modifiers": "public", "return": "void", "signature": "void add(Vector3 vector)", "full_signature": "public void add(Vector3 vector)", "class_method_signature": "Vector3.add(Vector3 vector)", "testcase": false, "constructor": false}, {"identifier": "negative", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void negative()", "full_signature": "public void negative()", "class_method_signature": "Vector3.negative()", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(Vector3 vector)", "modifiers": "public", "return": "void", "signature": "void sub(Vector3 vector)", "full_signature": "public void sub(Vector3 vector)", "class_method_signature": "Vector3.sub(Vector3 vector)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Vector3 vect)", "modifiers": "public", "return": "double", "signature": "double compare(Vector3 vect)", "full_signature": "public double compare(Vector3 vect)", "class_method_signature": "Vector3.compare(Vector3 vect)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(Vector3 vect)", "modifiers": "public", "return": "double", "signature": "double dot(Vector3 vect)", "full_signature": "public double dot(Vector3 vect)", "class_method_signature": "Vector3.dot(Vector3 vect)", "testcase": false, "constructor": false}, {"identifier": "cross", "parameters": "(Vector3 vect)", "modifiers": "public", "return": "Vector3", "signature": "Vector3 cross(Vector3 vect)", "full_signature": "public Vector3 cross(Vector3 vect)", "class_method_signature": "Vector3.cross(Vector3 vect)", "testcase": false, "constructor": false}, {"identifier": "theta", "parameters": "(Vector3 vect)", "modifiers": "public", "return": "double", "signature": "double theta(Vector3 vect)", "full_signature": "public double theta(Vector3 vect)", "class_method_signature": "Vector3.theta(Vector3 vect)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Vector3 vect)", "modifiers": "public", "return": "void", "signature": "void copy(Vector3 vect)", "full_signature": "public void copy(Vector3 vect)", "class_method_signature": "Vector3.copy(Vector3 vect)", "testcase": false, "constructor": false}, {"identifier": "unit", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unit()", "full_signature": "public void unit()", "class_method_signature": "Vector3.unit()", "testcase": false, "constructor": false}, {"identifier": "compareWeighted", "parameters": "(Vector3 vect)", "modifiers": "public", "return": "double", "signature": "double compareWeighted(Vector3 vect)", "full_signature": "public double compareWeighted(Vector3 vect)", "class_method_signature": "Vector3.compareWeighted(Vector3 vect)", "testcase": false, "constructor": false}, {"identifier": "getXYZString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getXYZString()", "full_signature": "public String getXYZString()", "class_method_signature": "Vector3.getXYZString()", "testcase": false, "constructor": false}, {"identifier": "getMagThetaPhiString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMagThetaPhiString()", "full_signature": "public String getMagThetaPhiString()", "class_method_signature": "Vector3.getMagThetaPhiString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Vector3.toString()", "testcase": false, "constructor": false}], "file": "common-tools/clas-physics/src/main/java/org/jlab/clas/physics/Vector3.java"}, "focal_method": {"identifier": "compare", "parameters": "(Vector3 vect)", "modifiers": "public", "return": "double", "body": "public double compare(Vector3 vect)\n    {\n        double quality = 0.0;\n        quality += Math.abs(fX-vect.x())/Math.abs(fX);\n        quality += Math.abs(fY-vect.y())/Math.abs(fY);\n        quality += Math.abs(fZ-vect.z())/Math.abs(fZ);\n        return quality;\n    }", "signature": "double compare(Vector3 vect)", "full_signature": "public double compare(Vector3 vect)", "class_method_signature": "Vector3.compare(Vector3 vect)", "testcase": false, "constructor": false, "invocations": ["abs", "x", "abs", "abs", "y", "abs", "abs", "z", "abs"]}, "repository": {"repo_id": 84985373, "url": "https://github.com/JeffersonLab/clas12-offline-software", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 5, "size": 561666, "license": "licensed"}}