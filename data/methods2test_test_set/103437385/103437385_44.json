{"test_class": {"identifier": "MavenEmbedderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String EMPTY_SETTINGS = \"<settings xmlns=\\\"http://maven.apache.org/SETTINGS/1.0.0\\\"\\n\" +\n                                          \"      xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n                                          \"      xsi:schemaLocation=\\\"http://maven.apache.org/SETTINGS/1.0.0\\n\" +\n                                          \"                          http://maven.apache.org/xsd/settings-1.0.0.xsd\\\"/>\\n\";", "modifier": "private final", "type": "String", "declarator": "EMPTY_SETTINGS = \"<settings xmlns=\\\"http://maven.apache.org/SETTINGS/1.0.0\\\"\\n\" +\n                                          \"      xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n                                          \"      xsi:schemaLocation=\\\"http://maven.apache.org/SETTINGS/1.0.0\\n\" +\n                                          \"                          http://maven.apache.org/xsd/settings-1.0.0.xsd\\\"/>\\n\"", "var_name": "EMPTY_SETTINGS"}, {"original_string": "final ComponentProvider componentProviderMocked = mock(ComponentProvider.class);", "modifier": "final", "type": "ComponentProvider", "declarator": "componentProviderMocked = mock(ComponentProvider.class)", "var_name": "componentProviderMocked"}], "file": "kie-soup-maven-utils/kie-soup-maven-integration/src/test/java/org/appformer/maven/integration/embedder/MavenEmbedderTest.java"}, "test_case": {"identifier": "testInvalidLocalDependency", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidLocalDependency() throws MavenEmbedderException, ProjectBuildingException, ComponentLookupException, SettingsBuildingException, InvalidRepositoryException {\n        final MavenExecutionRequestPopulator mavenExecutionRequestPopulator =  mock(MavenExecutionRequestPopulator.class);\n        final Logger logger =  mock(Logger.class);\n        final RepositorySystem repositorySystem = mock(RepositorySystem.class);\n        final ArtifactRepository artifactRepository = mock(ArtifactRepository.class);\n\n        final SettingsBuilder settingsBuilder =  mock(SettingsBuilder.class);\n        final SettingsBuildingResult settingsBuildingResult = mock(SettingsBuildingResult.class);\n        final ProjectBuilder projectBuilderMock =  mock(ProjectBuilder.class);\n        final DependencyResolutionResult drr = mock(DependencyResolutionResult.class);\n        final ProjectBuildingResult projectBuildingResult =  mock(ProjectBuildingResult.class);\n        final ArtifactDescriptorException exception = mock(ArtifactDescriptorException.class);\n        final ArtifactDescriptorRequest request = new ArtifactDescriptorRequest();\n\n        final ArtifactDescriptorResult result = new ArtifactDescriptorResult(request);\n        final Artifact artifactResult = mock(Artifact .class);\n\n        final List<Exception> list = singletonList(exception);\n\n        request.setArtifact(artifactResult);\n        result.setArtifact(artifactResult);\n\n        doReturn(settingsBuilder).when(componentProviderMocked).lookup(SettingsBuilder.class);\n        doReturn(settingsBuildingResult).when(settingsBuilder).build(any(SettingsBuildingRequest.class));\n        when(settingsBuildingResult.getEffectiveSettings()).thenReturn(mock(Settings.class));\n        when(componentProviderMocked.getSystemClassLoader()).thenReturn(getClass().getClassLoader());\n\n\n        doReturn(artifactRepository).when(repositorySystem).createLocalRepository(any(File.class));\n\n        doReturn(new File(\"\").toPath().toString()).when(artifactRepository).getBasedir();\n\n        doReturn(repositorySystem).when(componentProviderMocked).lookup(RepositorySystem.class);\n\n        doReturn(projectBuilderMock).when(componentProviderMocked).lookup(ProjectBuilder.class);\n\n        doReturn(logger).when(componentProviderMocked).lookup(Logger.class);\n        doReturn(mavenExecutionRequestPopulator).when(componentProviderMocked).lookup(MavenExecutionRequestPopulator.class);\n\n        doReturn(projectBuildingResult).when(projectBuilderMock).build(any(ModelSource.class), any(ProjectBuildingRequest.class));\n        when(projectBuildingResult.getDependencyResolutionResult()).thenReturn(drr);\n        when(projectBuildingResult.getDependencyResolutionResult()).thenReturn(drr);\n        when(drr.getCollectionErrors()).thenReturn(list);\n        when(exception.getResult()).thenReturn(result);\n\n        boolean[] didExecuteTryRemoveLocalArtifact = {false};\n        final MavenRequest mavenRequest = createMavenRequest(null);\n        final MavenEmbedder embedder = new MavenEmbedderMock2( mavenRequest, null ) {\n            void tryRemoveLocalArtifact(Artifact artifact) {\n                didExecuteTryRemoveLocalArtifact[0] = true;\n                assertEquals(artifact, artifactResult);\n            }\n        };\n\n        assertThatThrownBy(() -> embedder.readProject(mock(InputStream.class)))\n                .isInstanceOf(MavenEmbedderException.class);\n\n        assertTrue(didExecuteTryRemoveLocalArtifact[0]);\n    }", "signature": "void testInvalidLocalDependency()", "full_signature": "@Test public void testInvalidLocalDependency()", "class_method_signature": "MavenEmbedderTest.testInvalidLocalDependency()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "singletonList", "setArtifact", "setArtifact", "lookup", "when", "doReturn", "build", "when", "doReturn", "any", "thenReturn", "when", "getEffectiveSettings", "mock", "thenReturn", "when", "getSystemClassLoader", "getClassLoader", "getClass", "createLocalRepository", "when", "doReturn", "any", "getBasedir", "when", "doReturn", "toString", "toPath", "lookup", "when", "doReturn", "lookup", "when", "doReturn", "lookup", "when", "doReturn", "lookup", "when", "doReturn", "build", "when", "doReturn", "any", "any", "thenReturn", "when", "getDependencyResolutionResult", "thenReturn", "when", "getDependencyResolutionResult", "thenReturn", "when", "getCollectionErrors", "thenReturn", "when", "getResult", "createMavenRequest", "assertEquals", "isInstanceOf", "assertThatThrownBy", "readProject", "mock", "assertTrue"]}, "focal_class": {"identifier": "MavenEmbedder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger log = LoggerFactory.getLogger( MavenEmbedder.class );", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "log = LoggerFactory.getLogger( MavenEmbedder.class )", "var_name": "log"}, {"original_string": "public static final File DEFAULT_GLOBAL_SETTINGS_FILE =\n            new File( System.getProperty( \"maven.home\", System.getProperty( \"user.dir\", \"\" ) ), \"conf/settings.xml\" );", "modifier": "public static final", "type": "File", "declarator": "DEFAULT_GLOBAL_SETTINGS_FILE =\n            new File( System.getProperty( \"maven.home\", System.getProperty( \"user.dir\", \"\" ) ), \"conf/settings.xml\" )", "var_name": "DEFAULT_GLOBAL_SETTINGS_FILE"}, {"original_string": "private final MavenRequest mavenRequest;", "modifier": "private final", "type": "MavenRequest", "declarator": "mavenRequest", "var_name": "mavenRequest"}, {"original_string": "private final ComponentProvider componentProvider;", "modifier": "private final", "type": "ComponentProvider", "declarator": "componentProvider", "var_name": "componentProvider"}, {"original_string": "private MavenExecutionRequest mavenExecutionRequest;", "modifier": "private", "type": "MavenExecutionRequest", "declarator": "mavenExecutionRequest", "var_name": "mavenExecutionRequest"}, {"original_string": "private MavenSession mavenSession;", "modifier": "private", "type": "MavenSession", "declarator": "mavenSession", "var_name": "mavenSession"}], "methods": [{"identifier": "MavenEmbedder", "parameters": "( MavenRequest mavenRequest )", "modifiers": "public", "return": "", "signature": " MavenEmbedder( MavenRequest mavenRequest )", "full_signature": "public  MavenEmbedder( MavenRequest mavenRequest )", "class_method_signature": "MavenEmbedder.MavenEmbedder( MavenRequest mavenRequest )", "testcase": false, "constructor": true}, {"identifier": "MavenEmbedder", "parameters": "( ClassLoader mavenClassLoader,\n                          ClassLoader parent,\n                          MavenRequest mavenRequest )", "modifiers": "public", "return": "", "signature": " MavenEmbedder( ClassLoader mavenClassLoader,\n                          ClassLoader parent,\n                          MavenRequest mavenRequest )", "full_signature": "public  MavenEmbedder( ClassLoader mavenClassLoader,\n                          ClassLoader parent,\n                          MavenRequest mavenRequest )", "class_method_signature": "MavenEmbedder.MavenEmbedder( ClassLoader mavenClassLoader,\n                          ClassLoader parent,\n                          MavenRequest mavenRequest )", "testcase": false, "constructor": true}, {"identifier": "MavenEmbedder", "parameters": "( MavenRequest mavenRequest,\n                             ComponentProvider componentProvider )", "modifiers": "protected", "return": "", "signature": " MavenEmbedder( MavenRequest mavenRequest,\n                             ComponentProvider componentProvider )", "full_signature": "protected  MavenEmbedder( MavenRequest mavenRequest,\n                             ComponentProvider componentProvider )", "class_method_signature": "MavenEmbedder.MavenEmbedder( MavenRequest mavenRequest,\n                             ComponentProvider componentProvider )", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "", "return": "void", "signature": "void init()", "full_signature": " void init()", "class_method_signature": "MavenEmbedder.init()", "testcase": false, "constructor": false}, {"identifier": "buildMavenExecutionRequest", "parameters": "( MavenRequest mavenRequest )", "modifiers": "protected", "return": "MavenExecutionRequest", "signature": "MavenExecutionRequest buildMavenExecutionRequest( MavenRequest mavenRequest )", "full_signature": "protected MavenExecutionRequest buildMavenExecutionRequest( MavenRequest mavenRequest )", "class_method_signature": "MavenEmbedder.buildMavenExecutionRequest( MavenRequest mavenRequest )", "testcase": false, "constructor": false}, {"identifier": "getMavenRepositoryConfiguration", "parameters": "()", "modifiers": "protected", "return": "MavenRepositoryConfiguration", "signature": "MavenRepositoryConfiguration getMavenRepositoryConfiguration()", "full_signature": "protected MavenRepositoryConfiguration getMavenRepositoryConfiguration()", "class_method_signature": "MavenEmbedder.getMavenRepositoryConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getEnvVars", "parameters": "()", "modifiers": "private", "return": "Properties", "signature": "Properties getEnvVars()", "full_signature": "private Properties getEnvVars()", "class_method_signature": "MavenEmbedder.getEnvVars()", "testcase": false, "constructor": false}, {"identifier": "getSettings", "parameters": "()", "modifiers": "public", "return": "Settings", "signature": "Settings getSettings()", "full_signature": "public Settings getSettings()", "class_method_signature": "MavenEmbedder.getSettings()", "testcase": false, "constructor": false}, {"identifier": "getLocalRepository", "parameters": "()", "modifiers": "public", "return": "ArtifactRepository", "signature": "ArtifactRepository getLocalRepository()", "full_signature": "public ArtifactRepository getLocalRepository()", "class_method_signature": "MavenEmbedder.getLocalRepository()", "testcase": false, "constructor": false}, {"identifier": "getLocalRepositoryPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLocalRepositoryPath()", "full_signature": "public String getLocalRepositoryPath()", "class_method_signature": "MavenEmbedder.getLocalRepositoryPath()", "testcase": false, "constructor": false}, {"identifier": "readProject", "parameters": "( final InputStream mavenProjectStream )", "modifiers": "public", "return": "MavenProject", "signature": "MavenProject readProject( final InputStream mavenProjectStream )", "full_signature": "public MavenProject readProject( final InputStream mavenProjectStream )", "class_method_signature": "MavenEmbedder.readProject( final InputStream mavenProjectStream )", "testcase": false, "constructor": false}, {"identifier": "tryRemoveLocalArtifact", "parameters": "(Artifact artifact)", "modifiers": "", "return": "void", "signature": "void tryRemoveLocalArtifact(Artifact artifact)", "full_signature": " void tryRemoveLocalArtifact(Artifact artifact)", "class_method_signature": "MavenEmbedder.tryRemoveLocalArtifact(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "readProject", "parameters": "( File mavenProject )", "modifiers": "public", "return": "MavenProject", "signature": "MavenProject readProject( File mavenProject )", "full_signature": "public MavenProject readProject( File mavenProject )", "class_method_signature": "MavenEmbedder.readProject( File mavenProject )", "testcase": false, "constructor": false}, {"identifier": "readProjects", "parameters": "( File mavenProject,\n                                            boolean recursive )", "modifiers": "public", "return": "List<MavenProject>", "signature": "List<MavenProject> readProjects( File mavenProject,\n                                            boolean recursive )", "full_signature": "public List<MavenProject> readProjects( File mavenProject,\n                                            boolean recursive )", "class_method_signature": "MavenEmbedder.readProjects( File mavenProject,\n                                            boolean recursive )", "testcase": false, "constructor": false}, {"identifier": "buildProjects", "parameters": "( File mavenProject,\n                                                      boolean recursive )", "modifiers": "public", "return": "List<ProjectBuildingResult>", "signature": "List<ProjectBuildingResult> buildProjects( File mavenProject,\n                                                      boolean recursive )", "full_signature": "public List<ProjectBuildingResult> buildProjects( File mavenProject,\n                                                      boolean recursive )", "class_method_signature": "MavenEmbedder.buildProjects( File mavenProject,\n                                                      boolean recursive )", "testcase": false, "constructor": false}, {"identifier": "getProjectBuildingRequest", "parameters": "()", "modifiers": "", "return": "ProjectBuildingRequest", "signature": "ProjectBuildingRequest getProjectBuildingRequest()", "full_signature": " ProjectBuildingRequest getProjectBuildingRequest()", "class_method_signature": "MavenEmbedder.getProjectBuildingRequest()", "testcase": false, "constructor": false}, {"identifier": "getMavenSession", "parameters": "()", "modifiers": "public", "return": "MavenSession", "signature": "MavenSession getMavenSession()", "full_signature": "public MavenSession getMavenSession()", "class_method_signature": "MavenEmbedder.getMavenSession()", "testcase": false, "constructor": false}, {"identifier": "getMavenExecutionRequest", "parameters": "()", "modifiers": "public", "return": "MavenExecutionRequest", "signature": "MavenExecutionRequest getMavenExecutionRequest()", "full_signature": "public MavenExecutionRequest getMavenExecutionRequest()", "class_method_signature": "MavenEmbedder.getMavenExecutionRequest()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dispose()", "full_signature": "public void dispose()", "class_method_signature": "MavenEmbedder.dispose()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "( final MavenRequest mavenRequest )", "modifiers": "public", "return": "MavenExecutionResult", "signature": "MavenExecutionResult execute( final MavenRequest mavenRequest )", "full_signature": "public MavenExecutionResult execute( final MavenRequest mavenRequest )", "class_method_signature": "MavenEmbedder.execute( final MavenRequest mavenRequest )", "testcase": false, "constructor": false}], "file": "kie-soup-maven-utils/kie-soup-maven-integration/src/main/java/org/appformer/maven/integration/embedder/MavenEmbedder.java"}, "focal_method": {"identifier": "readProject", "parameters": "( final InputStream mavenProjectStream )", "modifiers": "public", "return": "MavenProject", "body": "public MavenProject readProject( final InputStream mavenProjectStream ) throws ProjectBuildingException, MavenEmbedderException {\n        ModelSource modelSource = new ModelSource() {\n            @Override\n            public InputStream getInputStream() {\n                return mavenProjectStream;\n            }\n\n            @Override\n            public String getLocation() {\n                return \"\";\n            }\n        };\n\n        ClassLoader originalCl = Thread.currentThread().getContextClassLoader();\n        try {\n            org.eclipse.aether.artifact.Artifact lastArtifact = null;\n            do {\n                Thread.currentThread().setContextClassLoader(componentProvider.getSystemClassLoader());\n                ProjectBuilder projectBuilder = componentProvider.lookup(ProjectBuilder.class);\n                // BZ-1007894: Check if added dependencies are resolvable.\n                ProjectBuildingResult result = projectBuilder.build(modelSource, getProjectBuildingRequest());\n                if (result != null && result.getDependencyResolutionResult() != null && !result.getDependencyResolutionResult().getCollectionErrors().isEmpty()) {\n                    // A dependency resolution error has been produced. It can contains some error. Throw the first one to the client, so the user will fix every one sequentially.\n                    final Exception depedencyResolutionException = result.getDependencyResolutionResult().getCollectionErrors().get(0);\n                    if (depedencyResolutionException instanceof ArtifactDescriptorException) {\n                        final org.eclipse.aether.artifact.Artifact artifact = ((ArtifactDescriptorException) depedencyResolutionException).getResult().getArtifact();\n                        if (!artifact.equals(lastArtifact)) {\n                            tryRemoveLocalArtifact(artifact);\n                            lastArtifact = artifact;\n                            continue;\n                        }\n                    }\n                    if (depedencyResolutionException != null) {\n                        throw new MavenEmbedderException(depedencyResolutionException.getMessage(), depedencyResolutionException);\n                    }\n                }\n                return (result == null || result.getProject() == null ) ? null : result.getProject();\n            } while (true);\n        } catch ( ComponentLookupException e ) {\n            throw new MavenEmbedderException( e.getMessage(), e );\n        } finally {\n            Thread.currentThread().setContextClassLoader( originalCl );\n            try {\n                mavenProjectStream.close();\n            } catch ( IOException e ) {\n            }\n        }\n    }", "signature": "MavenProject readProject( final InputStream mavenProjectStream )", "full_signature": "public MavenProject readProject( final InputStream mavenProjectStream )", "class_method_signature": "MavenEmbedder.readProject( final InputStream mavenProjectStream )", "testcase": false, "constructor": false, "invocations": ["getContextClassLoader", "currentThread", "setContextClassLoader", "currentThread", "getSystemClassLoader", "lookup", "build", "getProjectBuildingRequest", "getDependencyResolutionResult", "isEmpty", "getCollectionErrors", "getDependencyResolutionResult", "get", "getCollectionErrors", "getDependencyResolutionResult", "getArtifact", "getResult", "equals", "tryRemoveLocalArtifact", "getMessage", "getProject", "getProject", "getMessage", "setContextClassLoader", "currentThread", "close"]}, "repository": {"repo_id": 103437385, "url": "https://github.com/kiegroup/kie-soup", "stars": 11, "created": "9/13/2017 6:41:37 PM +00:00", "updates": "2020-01-21T13:07:53+00:00", "fork": "False", "license": "licensed"}}