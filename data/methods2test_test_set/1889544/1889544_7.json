{"test_class": {"identifier": "TypeUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "subprojects/griffon-core/src/test/java/griffon/util/TypeUtilsTest.java"}, "test_case": {"identifier": "convertBooleans", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertBooleans() {\n        assertEquals(true, (boolean) TypeUtils.convertValue(Boolean.TYPE, Boolean.TRUE));\n        assertEquals(Boolean.TRUE, TypeUtils.convertValue(Boolean.class, Boolean.TRUE));\n    }", "signature": "void convertBooleans()", "full_signature": "@Test public void convertBooleans()", "class_method_signature": "TypeUtilsTest.convertBooleans()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "convertValue", "assertEquals", "convertValue"]}, "focal_class": {"identifier": "TypeUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ERROR_VALUE_NULL = \"Argument 'value' must not be null\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_VALUE_NULL = \"Argument 'value' must not be null\"", "var_name": "ERROR_VALUE_NULL"}], "methods": [{"identifier": "TypeUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " TypeUtils()", "full_signature": "private  TypeUtils()", "class_method_signature": "TypeUtils.TypeUtils()", "testcase": false, "constructor": true}, {"identifier": "castToBoolean", "parameters": "(@Nonnull Object value)", "modifiers": "public static", "return": "boolean", "signature": "boolean castToBoolean(@Nonnull Object value)", "full_signature": "public static boolean castToBoolean(@Nonnull Object value)", "class_method_signature": "TypeUtils.castToBoolean(@Nonnull Object value)", "testcase": false, "constructor": false}, {"identifier": "castToChar", "parameters": "(@Nonnull Object value)", "modifiers": "public static", "return": "char", "signature": "char castToChar(@Nonnull Object value)", "full_signature": "public static char castToChar(@Nonnull Object value)", "class_method_signature": "TypeUtils.castToChar(@Nonnull Object value)", "testcase": false, "constructor": false}, {"identifier": "castToByte", "parameters": "(@Nonnull Object value)", "modifiers": "public static", "return": "byte", "signature": "byte castToByte(@Nonnull Object value)", "full_signature": "public static byte castToByte(@Nonnull Object value)", "class_method_signature": "TypeUtils.castToByte(@Nonnull Object value)", "testcase": false, "constructor": false}, {"identifier": "castToShort", "parameters": "(@Nonnull Object value)", "modifiers": "public static", "return": "short", "signature": "short castToShort(@Nonnull Object value)", "full_signature": "public static short castToShort(@Nonnull Object value)", "class_method_signature": "TypeUtils.castToShort(@Nonnull Object value)", "testcase": false, "constructor": false}, {"identifier": "castToInt", "parameters": "(@Nonnull Object value)", "modifiers": "public static", "return": "int", "signature": "int castToInt(@Nonnull Object value)", "full_signature": "public static int castToInt(@Nonnull Object value)", "class_method_signature": "TypeUtils.castToInt(@Nonnull Object value)", "testcase": false, "constructor": false}, {"identifier": "castToLong", "parameters": "(@Nonnull Object value)", "modifiers": "public static", "return": "long", "signature": "long castToLong(@Nonnull Object value)", "full_signature": "public static long castToLong(@Nonnull Object value)", "class_method_signature": "TypeUtils.castToLong(@Nonnull Object value)", "testcase": false, "constructor": false}, {"identifier": "castToFloat", "parameters": "(@Nonnull Object value)", "modifiers": "public static", "return": "float", "signature": "float castToFloat(@Nonnull Object value)", "full_signature": "public static float castToFloat(@Nonnull Object value)", "class_method_signature": "TypeUtils.castToFloat(@Nonnull Object value)", "testcase": false, "constructor": false}, {"identifier": "castToDouble", "parameters": "(@Nonnull Object value)", "modifiers": "public static", "return": "double", "signature": "double castToDouble(@Nonnull Object value)", "full_signature": "public static double castToDouble(@Nonnull Object value)", "class_method_signature": "TypeUtils.castToDouble(@Nonnull Object value)", "testcase": false, "constructor": false}, {"identifier": "castToBigInteger", "parameters": "(@Nonnull Object value)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger castToBigInteger(@Nonnull Object value)", "full_signature": "public static BigInteger castToBigInteger(@Nonnull Object value)", "class_method_signature": "TypeUtils.castToBigInteger(@Nonnull Object value)", "testcase": false, "constructor": false}, {"identifier": "castToBigDecimal", "parameters": "(@Nonnull Object value)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal castToBigDecimal(@Nonnull Object value)", "full_signature": "public static BigDecimal castToBigDecimal(@Nonnull Object value)", "class_method_signature": "TypeUtils.castToBigDecimal(@Nonnull Object value)", "testcase": false, "constructor": false}, {"identifier": "castToNumber", "parameters": "(@Nonnull Object value)", "modifiers": "@Nullable public static", "return": "Number", "signature": "Number castToNumber(@Nonnull Object value)", "full_signature": "@Nullable public static Number castToNumber(@Nonnull Object value)", "class_method_signature": "TypeUtils.castToNumber(@Nonnull Object value)", "testcase": false, "constructor": false}, {"identifier": "castToBoolean", "parameters": "(@Nullable Object value, boolean defaultValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean castToBoolean(@Nullable Object value, boolean defaultValue)", "full_signature": "public static boolean castToBoolean(@Nullable Object value, boolean defaultValue)", "class_method_signature": "TypeUtils.castToBoolean(@Nullable Object value, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "castToChar", "parameters": "(@Nullable Object value, char defaultValue)", "modifiers": "public static", "return": "char", "signature": "char castToChar(@Nullable Object value, char defaultValue)", "full_signature": "public static char castToChar(@Nullable Object value, char defaultValue)", "class_method_signature": "TypeUtils.castToChar(@Nullable Object value, char defaultValue)", "testcase": false, "constructor": false}, {"identifier": "castToByte", "parameters": "(@Nullable Object value, byte defaultValue)", "modifiers": "public static", "return": "byte", "signature": "byte castToByte(@Nullable Object value, byte defaultValue)", "full_signature": "public static byte castToByte(@Nullable Object value, byte defaultValue)", "class_method_signature": "TypeUtils.castToByte(@Nullable Object value, byte defaultValue)", "testcase": false, "constructor": false}, {"identifier": "castToShort", "parameters": "(@Nullable Object value, short defaultValue)", "modifiers": "public static", "return": "short", "signature": "short castToShort(@Nullable Object value, short defaultValue)", "full_signature": "public static short castToShort(@Nullable Object value, short defaultValue)", "class_method_signature": "TypeUtils.castToShort(@Nullable Object value, short defaultValue)", "testcase": false, "constructor": false}, {"identifier": "castToInt", "parameters": "(@Nullable Object value, int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int castToInt(@Nullable Object value, int defaultValue)", "full_signature": "public static int castToInt(@Nullable Object value, int defaultValue)", "class_method_signature": "TypeUtils.castToInt(@Nullable Object value, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "castToLong", "parameters": "(@Nullable Object value, long defaultValue)", "modifiers": "public static", "return": "long", "signature": "long castToLong(@Nullable Object value, long defaultValue)", "full_signature": "public static long castToLong(@Nullable Object value, long defaultValue)", "class_method_signature": "TypeUtils.castToLong(@Nullable Object value, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "castToFloat", "parameters": "(@Nullable Object value, float defaultValue)", "modifiers": "public static", "return": "float", "signature": "float castToFloat(@Nullable Object value, float defaultValue)", "full_signature": "public static float castToFloat(@Nullable Object value, float defaultValue)", "class_method_signature": "TypeUtils.castToFloat(@Nullable Object value, float defaultValue)", "testcase": false, "constructor": false}, {"identifier": "castToDouble", "parameters": "(@Nullable Object value, double defaultValue)", "modifiers": "public static", "return": "double", "signature": "double castToDouble(@Nullable Object value, double defaultValue)", "full_signature": "public static double castToDouble(@Nullable Object value, double defaultValue)", "class_method_signature": "TypeUtils.castToDouble(@Nullable Object value, double defaultValue)", "testcase": false, "constructor": false}, {"identifier": "castToNumber", "parameters": "(@Nullable Object value, @Nullable Number defaultValue)", "modifiers": "@Nullable public static", "return": "Number", "signature": "Number castToNumber(@Nullable Object value, @Nullable Number defaultValue)", "full_signature": "@Nullable public static Number castToNumber(@Nullable Object value, @Nullable Number defaultValue)", "class_method_signature": "TypeUtils.castToNumber(@Nullable Object value, @Nullable Number defaultValue)", "testcase": false, "constructor": false}, {"identifier": "castToBigInteger", "parameters": "(@Nullable Object value, @Nullable BigInteger defaultValue)", "modifiers": "@Nullable public static", "return": "BigInteger", "signature": "BigInteger castToBigInteger(@Nullable Object value, @Nullable BigInteger defaultValue)", "full_signature": "@Nullable public static BigInteger castToBigInteger(@Nullable Object value, @Nullable BigInteger defaultValue)", "class_method_signature": "TypeUtils.castToBigInteger(@Nullable Object value, @Nullable BigInteger defaultValue)", "testcase": false, "constructor": false}, {"identifier": "castToBigDecimal", "parameters": "(@Nullable Object value, @Nullable BigDecimal defaultValue)", "modifiers": "@Nullable public static", "return": "BigDecimal", "signature": "BigDecimal castToBigDecimal(@Nullable Object value, @Nullable BigDecimal defaultValue)", "full_signature": "@Nullable public static BigDecimal castToBigDecimal(@Nullable Object value, @Nullable BigDecimal defaultValue)", "class_method_signature": "TypeUtils.castToBigDecimal(@Nullable Object value, @Nullable BigDecimal defaultValue)", "testcase": false, "constructor": false}, {"identifier": "convertValue", "parameters": "(@Nonnull Class<T> targetType, @Nonnull Object value)", "modifiers": "@Nonnull public static", "return": "T", "signature": "T convertValue(@Nonnull Class<T> targetType, @Nonnull Object value)", "full_signature": "@Nonnull public static T convertValue(@Nonnull Class<T> targetType, @Nonnull Object value)", "class_method_signature": "TypeUtils.convertValue(@Nonnull Class<T> targetType, @Nonnull Object value)", "testcase": false, "constructor": false}, {"identifier": "convertValue", "parameters": "(@Nonnull Class<T> targetType, @Nonnull Object value, @Nullable String format)", "modifiers": "@Nonnull @SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T convertValue(@Nonnull Class<T> targetType, @Nonnull Object value, @Nullable String format)", "full_signature": "@Nonnull @SuppressWarnings(\"unchecked\") public static T convertValue(@Nonnull Class<T> targetType, @Nonnull Object value, @Nullable String format)", "class_method_signature": "TypeUtils.convertValue(@Nonnull Class<T> targetType, @Nonnull Object value, @Nullable String format)", "testcase": false, "constructor": false}, {"identifier": "isBoolean", "parameters": "(@Nonnull Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBoolean(@Nonnull Class<?> type)", "full_signature": "public static boolean isBoolean(@Nonnull Class<?> type)", "class_method_signature": "TypeUtils.isBoolean(@Nonnull Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isCharacter", "parameters": "(@Nonnull Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCharacter(@Nonnull Class<?> type)", "full_signature": "public static boolean isCharacter(@Nonnull Class<?> type)", "class_method_signature": "TypeUtils.isCharacter(@Nonnull Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isByte", "parameters": "(@Nonnull Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isByte(@Nonnull Class<?> type)", "full_signature": "public static boolean isByte(@Nonnull Class<?> type)", "class_method_signature": "TypeUtils.isByte(@Nonnull Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isShort", "parameters": "(@Nonnull Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isShort(@Nonnull Class<?> type)", "full_signature": "public static boolean isShort(@Nonnull Class<?> type)", "class_method_signature": "TypeUtils.isShort(@Nonnull Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isInteger", "parameters": "(@Nonnull Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInteger(@Nonnull Class<?> type)", "full_signature": "public static boolean isInteger(@Nonnull Class<?> type)", "class_method_signature": "TypeUtils.isInteger(@Nonnull Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isLong", "parameters": "(@Nonnull Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLong(@Nonnull Class<?> type)", "full_signature": "public static boolean isLong(@Nonnull Class<?> type)", "class_method_signature": "TypeUtils.isLong(@Nonnull Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isFloat", "parameters": "(@Nonnull Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFloat(@Nonnull Class<?> type)", "full_signature": "public static boolean isFloat(@Nonnull Class<?> type)", "class_method_signature": "TypeUtils.isFloat(@Nonnull Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isDouble", "parameters": "(@Nonnull Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDouble(@Nonnull Class<?> type)", "full_signature": "public static boolean isDouble(@Nonnull Class<?> type)", "class_method_signature": "TypeUtils.isDouble(@Nonnull Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isBigInteger", "parameters": "(@Nonnull Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBigInteger(@Nonnull Class<?> type)", "full_signature": "public static boolean isBigInteger(@Nonnull Class<?> type)", "class_method_signature": "TypeUtils.isBigInteger(@Nonnull Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isBigDecimal", "parameters": "(@Nonnull Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBigDecimal(@Nonnull Class<?> type)", "full_signature": "public static boolean isBigDecimal(@Nonnull Class<?> type)", "class_method_signature": "TypeUtils.isBigDecimal(@Nonnull Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isNumber", "parameters": "(@Nonnull Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumber(@Nonnull Class<?> type)", "full_signature": "public static boolean isNumber(@Nonnull Class<?> type)", "class_method_signature": "TypeUtils.isNumber(@Nonnull Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable Object left, @Nullable Object right)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(@Nullable Object left, @Nullable Object right)", "full_signature": "public static boolean equals(@Nullable Object left, @Nullable Object right)", "class_method_signature": "TypeUtils.equals(@Nullable Object left, @Nullable Object right)", "testcase": false, "constructor": false}, {"identifier": "arrayEqual", "parameters": "(@Nullable Object left, @Nullable Object right)", "modifiers": "public static", "return": "boolean", "signature": "boolean arrayEqual(@Nullable Object left, @Nullable Object right)", "full_signature": "public static boolean arrayEqual(@Nullable Object left, @Nullable Object right)", "class_method_signature": "TypeUtils.arrayEqual(@Nullable Object left, @Nullable Object right)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(int[] left, int[] right)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(int[] left, int[] right)", "full_signature": "public static boolean equals(int[] left, int[] right)", "class_method_signature": "TypeUtils.equals(int[] left, int[] right)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object[] left, List right)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(Object[] left, List right)", "full_signature": "public static boolean equals(Object[] left, List right)", "class_method_signature": "TypeUtils.equals(Object[] left, List right)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(List left, Object[] right)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(List left, Object[] right)", "full_signature": "public static boolean equals(List left, Object[] right)", "class_method_signature": "TypeUtils.equals(List left, Object[] right)", "testcase": false, "constructor": false}, {"identifier": "doEquals", "parameters": "(Object[] left, List<?> right)", "modifiers": "private static", "return": "boolean", "signature": "boolean doEquals(Object[] left, List<?> right)", "full_signature": "private static boolean doEquals(Object[] left, List<?> right)", "class_method_signature": "TypeUtils.doEquals(Object[] left, List<?> right)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(List<T> left, List<T> right)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(List<T> left, List<T> right)", "full_signature": "public static boolean equals(List<T> left, List<T> right)", "class_method_signature": "TypeUtils.equals(List<T> left, List<T> right)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Set<T> left, Set<T> right)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(Set<T> left, Set<T> right)", "full_signature": "public static boolean equals(Set<T> left, Set<T> right)", "class_method_signature": "TypeUtils.equals(Set<T> left, Set<T> right)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Map<K, V> left, Map<K, V> right)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(Map<K, V> left, Map<K, V> right)", "full_signature": "public static boolean equals(Map<K, V> left, Map<K, V> right)", "class_method_signature": "TypeUtils.equals(Map<K, V> left, Map<K, V> right)", "testcase": false, "constructor": false}, {"identifier": "primitiveArrayToList", "parameters": "(Object array)", "modifiers": "public static", "return": "List", "signature": "List primitiveArrayToList(Object array)", "full_signature": "public static List primitiveArrayToList(Object array)", "class_method_signature": "TypeUtils.primitiveArrayToList(Object array)", "testcase": false, "constructor": false}, {"identifier": "isValidCharacterString", "parameters": "(Object value)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidCharacterString(Object value)", "full_signature": "private static boolean isValidCharacterString(Object value)", "class_method_signature": "TypeUtils.isValidCharacterString(Object value)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Object left, Object right)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "int", "signature": "int compareTo(Object left, Object right)", "full_signature": "@SuppressWarnings(\"unchecked\") public static int compareTo(Object left, Object right)", "class_method_signature": "TypeUtils.compareTo(Object left, Object right)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Character left, Number right)", "modifiers": "public static", "return": "int", "signature": "int compareTo(Character left, Number right)", "full_signature": "public static int compareTo(Character left, Number right)", "class_method_signature": "TypeUtils.compareTo(Character left, Number right)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Number left, Character right)", "modifiers": "public static", "return": "int", "signature": "int compareTo(Number left, Character right)", "full_signature": "public static int compareTo(Number left, Character right)", "class_method_signature": "TypeUtils.compareTo(Number left, Character right)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Character left, Character right)", "modifiers": "public static", "return": "int", "signature": "int compareTo(Character left, Character right)", "full_signature": "public static int compareTo(Character left, Character right)", "class_method_signature": "TypeUtils.compareTo(Character left, Character right)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Number left, Number right)", "modifiers": "public static", "return": "int", "signature": "int compareTo(Number left, Number right)", "full_signature": "public static int compareTo(Number left, Number right)", "class_method_signature": "TypeUtils.compareTo(Number left, Number right)", "testcase": false, "constructor": false}, {"identifier": "isFloatingPoint", "parameters": "(Number number)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFloatingPoint(Number number)", "full_signature": "public static boolean isFloatingPoint(Number number)", "class_method_signature": "TypeUtils.isFloatingPoint(Number number)", "testcase": false, "constructor": false}, {"identifier": "isInteger", "parameters": "(Number number)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInteger(Number number)", "full_signature": "public static boolean isInteger(Number number)", "class_method_signature": "TypeUtils.isInteger(Number number)", "testcase": false, "constructor": false}, {"identifier": "isLong", "parameters": "(Number number)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLong(Number number)", "full_signature": "public static boolean isLong(Number number)", "class_method_signature": "TypeUtils.isLong(Number number)", "testcase": false, "constructor": false}, {"identifier": "isBigDecimal", "parameters": "(Number number)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBigDecimal(Number number)", "full_signature": "public static boolean isBigDecimal(Number number)", "class_method_signature": "TypeUtils.isBigDecimal(Number number)", "testcase": false, "constructor": false}, {"identifier": "isBigInteger", "parameters": "(Number number)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBigInteger(Number number)", "full_signature": "public static boolean isBigInteger(Number number)", "class_method_signature": "TypeUtils.isBigInteger(Number number)", "testcase": false, "constructor": false}], "file": "subprojects/griffon-core/src/main/java/griffon/util/TypeUtils.java"}, "focal_method": {"identifier": "convertValue", "parameters": "(@Nonnull Class<T> targetType, @Nonnull Object value)", "modifiers": "@Nonnull public static", "return": "T", "body": "@Nonnull\n    public static <T> T convertValue(@Nonnull Class<T> targetType, @Nonnull Object value) {\n        return convertValue(targetType, value, null);\n    }", "signature": "T convertValue(@Nonnull Class<T> targetType, @Nonnull Object value)", "full_signature": "@Nonnull public static T convertValue(@Nonnull Class<T> targetType, @Nonnull Object value)", "class_method_signature": "TypeUtils.convertValue(@Nonnull Class<T> targetType, @Nonnull Object value)", "testcase": false, "constructor": false, "invocations": ["convertValue"]}, "repository": {"repo_id": 1889544, "url": "https://github.com/griffon/griffon", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 268, "size": 818435, "license": "licensed"}}