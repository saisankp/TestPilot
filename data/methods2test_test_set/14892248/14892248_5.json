{"test_class": {"identifier": "SimpleXMLParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "itext/src/test/java/com/itextpdf/text/xml/simpleparser/SimpleXMLParserTest.java"}, "test_case": {"identifier": "whitespaceHtml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void whitespaceHtml() throws IOException {\n\t\tString whitespace = \"<p>sometext\\r moretext</p>\";\n\t\tString expected = \"sometext moretext\";\n\t\tfinal StringBuilder b = new StringBuilder();\n\t\tSimpleXMLParser.parse(new SimpleXMLDocHandler() {\n\n\t\t\tpublic void text(final String str) {\n\t\t\t\tb.append(str);\n\n\t\t\t}\n\n\t\t\tpublic void startElement(final String tag, final Map<String, String> h) {\n\n\t\t\t}\n\n\t\t\tpublic void startDocument() {\n\n\t\t\t}\n\n\t\t\tpublic void endElement(final String tag) {\n\n\t\t\t}\n\n\t\t\tpublic void endDocument() {\n\n\t\t\t}\n\t\t}, null, new StringReader(whitespace), true);\n\t\tAssert.assertEquals(expected, b.toString());\n\t}", "signature": "void whitespaceHtml()", "full_signature": "@Test public void whitespaceHtml()", "class_method_signature": "SimpleXMLParserTest.whitespaceHtml()", "testcase": true, "constructor": false, "invocations": ["parse", "append", "assertEquals", "toString"]}, "focal_class": {"identifier": "SimpleXMLParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static int UNKNOWN = 0;", "modifier": "private final static", "type": "int", "declarator": "UNKNOWN = 0", "var_name": "UNKNOWN"}, {"original_string": "private final static int TEXT = 1;", "modifier": "private final static", "type": "int", "declarator": "TEXT = 1", "var_name": "TEXT"}, {"original_string": "private final static int TAG_ENCOUNTERED = 2;", "modifier": "private final static", "type": "int", "declarator": "TAG_ENCOUNTERED = 2", "var_name": "TAG_ENCOUNTERED"}, {"original_string": "private final static int EXAMIN_TAG = 3;", "modifier": "private final static", "type": "int", "declarator": "EXAMIN_TAG = 3", "var_name": "EXAMIN_TAG"}, {"original_string": "private final static int TAG_EXAMINED = 4;", "modifier": "private final static", "type": "int", "declarator": "TAG_EXAMINED = 4", "var_name": "TAG_EXAMINED"}, {"original_string": "private final static int IN_CLOSETAG = 5;", "modifier": "private final static", "type": "int", "declarator": "IN_CLOSETAG = 5", "var_name": "IN_CLOSETAG"}, {"original_string": "private final static int SINGLE_TAG = 6;", "modifier": "private final static", "type": "int", "declarator": "SINGLE_TAG = 6", "var_name": "SINGLE_TAG"}, {"original_string": "private final static int CDATA = 7;", "modifier": "private final static", "type": "int", "declarator": "CDATA = 7", "var_name": "CDATA"}, {"original_string": "private final static int COMMENT = 8;", "modifier": "private final static", "type": "int", "declarator": "COMMENT = 8", "var_name": "COMMENT"}, {"original_string": "private final static int PI = 9;", "modifier": "private final static", "type": "int", "declarator": "PI = 9", "var_name": "PI"}, {"original_string": "private final static int ENTITY = 10;", "modifier": "private final static", "type": "int", "declarator": "ENTITY = 10", "var_name": "ENTITY"}, {"original_string": "private final static int QUOTE = 11;", "modifier": "private final static", "type": "int", "declarator": "QUOTE = 11", "var_name": "QUOTE"}, {"original_string": "private final static int ATTRIBUTE_KEY = 12;", "modifier": "private final static", "type": "int", "declarator": "ATTRIBUTE_KEY = 12", "var_name": "ATTRIBUTE_KEY"}, {"original_string": "private final static int ATTRIBUTE_EQUAL = 13;", "modifier": "private final static", "type": "int", "declarator": "ATTRIBUTE_EQUAL = 13", "var_name": "ATTRIBUTE_EQUAL"}, {"original_string": "private final static int ATTRIBUTE_VALUE = 14;", "modifier": "private final static", "type": "int", "declarator": "ATTRIBUTE_VALUE = 14", "var_name": "ATTRIBUTE_VALUE"}, {"original_string": "private final Stack<Integer> stack;", "modifier": "private final", "type": "Stack<Integer>", "declarator": "stack", "var_name": "stack"}, {"original_string": "private int character = 0;", "modifier": "private", "type": "int", "declarator": "character = 0", "var_name": "character"}, {"original_string": "private int previousCharacter = -1;", "modifier": "private", "type": "int", "declarator": "previousCharacter = -1", "var_name": "previousCharacter"}, {"original_string": "private int lines = 1;", "modifier": "private", "type": "int", "declarator": "lines = 1", "var_name": "lines"}, {"original_string": "private int columns = 0;", "modifier": "private", "type": "int", "declarator": "columns = 0", "var_name": "columns"}, {"original_string": "private boolean eol = false;", "modifier": "private", "type": "boolean", "declarator": "eol = false", "var_name": "eol"}, {"original_string": "private boolean nowhite = false;", "modifier": "private", "type": "boolean", "declarator": "nowhite = false", "var_name": "nowhite"}, {"original_string": "private int state;", "modifier": "private", "type": "int", "declarator": "state", "var_name": "state"}, {"original_string": "private final boolean html;", "modifier": "private final", "type": "boolean", "declarator": "html", "var_name": "html"}, {"original_string": "private final StringBuffer text = new StringBuffer();", "modifier": "private final", "type": "StringBuffer", "declarator": "text = new StringBuffer()", "var_name": "text"}, {"original_string": "private final StringBuffer entity = new StringBuffer();", "modifier": "private final", "type": "StringBuffer", "declarator": "entity = new StringBuffer()", "var_name": "entity"}, {"original_string": "private String tag = null;", "modifier": "private", "type": "String", "declarator": "tag = null", "var_name": "tag"}, {"original_string": "private HashMap<String, String> attributes = null;", "modifier": "private", "type": "HashMap<String, String>", "declarator": "attributes = null", "var_name": "attributes"}, {"original_string": "private final  SimpleXMLDocHandler doc;", "modifier": "private final", "type": "SimpleXMLDocHandler", "declarator": "doc", "var_name": "doc"}, {"original_string": "private final  SimpleXMLDocHandlerComment comment;", "modifier": "private final", "type": "SimpleXMLDocHandlerComment", "declarator": "comment", "var_name": "comment"}, {"original_string": "private  int nested = 0;", "modifier": "private", "type": "int", "declarator": "nested = 0", "var_name": "nested"}, {"original_string": "private  int quoteCharacter = '\"';", "modifier": "private", "type": "int", "declarator": "quoteCharacter = '\"'", "var_name": "quoteCharacter"}, {"original_string": "private  String attributekey = null;", "modifier": "private", "type": "String", "declarator": "attributekey = null", "var_name": "attributekey"}, {"original_string": "private  String attributevalue = null;", "modifier": "private", "type": "String", "declarator": "attributevalue = null", "var_name": "attributevalue"}, {"original_string": "private  NewLineHandler newLineHandler;", "modifier": "private", "type": "NewLineHandler", "declarator": "newLineHandler", "var_name": "newLineHandler"}], "methods": [{"identifier": "SimpleXMLParser", "parameters": "(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final boolean html)", "modifiers": "private", "return": "", "signature": " SimpleXMLParser(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final boolean html)", "full_signature": "private  SimpleXMLParser(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final boolean html)", "class_method_signature": "SimpleXMLParser.SimpleXMLParser(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final boolean html)", "testcase": false, "constructor": true}, {"identifier": "go", "parameters": "(final Reader r)", "modifiers": "private", "return": "void", "signature": "void go(final Reader r)", "full_signature": "private void go(final Reader r)", "class_method_signature": "SimpleXMLParser.go(final Reader r)", "testcase": false, "constructor": false}, {"identifier": "restoreState", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int restoreState()", "full_signature": "private int restoreState()", "class_method_signature": "SimpleXMLParser.restoreState()", "testcase": false, "constructor": false}, {"identifier": "saveState", "parameters": "(final int s)", "modifiers": "private", "return": "void", "signature": "void saveState(final int s)", "full_signature": "private void saveState(final int s)", "class_method_signature": "SimpleXMLParser.saveState(final int s)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void flush()", "full_signature": "private void flush()", "class_method_signature": "SimpleXMLParser.flush()", "testcase": false, "constructor": false}, {"identifier": "initTag", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initTag()", "full_signature": "private void initTag()", "class_method_signature": "SimpleXMLParser.initTag()", "testcase": false, "constructor": false}, {"identifier": "doTag", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void doTag()", "full_signature": "private void doTag()", "class_method_signature": "SimpleXMLParser.doTag()", "testcase": false, "constructor": false}, {"identifier": "processTag", "parameters": "(final boolean start)", "modifiers": "private", "return": "void", "signature": "void processTag(final boolean start)", "full_signature": "private void processTag(final boolean start)", "class_method_signature": "SimpleXMLParser.processTag(final boolean start)", "testcase": false, "constructor": false}, {"identifier": "throwException", "parameters": "(final String s)", "modifiers": "private", "return": "void", "signature": "void throwException(final String s)", "full_signature": "private void throwException(final String s)", "class_method_signature": "SimpleXMLParser.throwException(final String s)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final Reader r, final boolean html)", "modifiers": "public static", "return": "void", "signature": "void parse(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final Reader r, final boolean html)", "full_signature": "public static void parse(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final Reader r, final boolean html)", "class_method_signature": "SimpleXMLParser.parse(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final Reader r, final boolean html)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final SimpleXMLDocHandler doc, final InputStream in)", "modifiers": "public static", "return": "void", "signature": "void parse(final SimpleXMLDocHandler doc, final InputStream in)", "full_signature": "public static void parse(final SimpleXMLDocHandler doc, final InputStream in)", "class_method_signature": "SimpleXMLParser.parse(final SimpleXMLDocHandler doc, final InputStream in)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredEncoding", "parameters": "(final String decl)", "modifiers": "private static", "return": "String", "signature": "String getDeclaredEncoding(final String decl)", "full_signature": "private static String getDeclaredEncoding(final String decl)", "class_method_signature": "SimpleXMLParser.getDeclaredEncoding(final String decl)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final SimpleXMLDocHandler doc,final Reader r)", "modifiers": "public static", "return": "void", "signature": "void parse(final SimpleXMLDocHandler doc,final Reader r)", "full_signature": "public static void parse(final SimpleXMLDocHandler doc,final Reader r)", "class_method_signature": "SimpleXMLParser.parse(final SimpleXMLDocHandler doc,final Reader r)", "testcase": false, "constructor": false}, {"identifier": "escapeXML", "parameters": "(final String s, final boolean onlyASCII)", "modifiers": "@Deprecated public static", "return": "String", "signature": "String escapeXML(final String s, final boolean onlyASCII)", "full_signature": "@Deprecated public static String escapeXML(final String s, final boolean onlyASCII)", "class_method_signature": "SimpleXMLParser.escapeXML(final String s, final boolean onlyASCII)", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/xml/simpleparser/SimpleXMLParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final Reader r, final boolean html)", "modifiers": "public static", "return": "void", "body": "public static void parse(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final Reader r, final boolean html) throws IOException {\n    \tSimpleXMLParser parser = new SimpleXMLParser(doc, comment, html);\n    \tparser.go(r);\n    }", "signature": "void parse(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final Reader r, final boolean html)", "full_signature": "public static void parse(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final Reader r, final boolean html)", "class_method_signature": "SimpleXMLParser.parse(final SimpleXMLDocHandler doc, final SimpleXMLDocHandlerComment comment, final Reader r, final boolean html)", "testcase": false, "constructor": false, "invocations": ["go"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}