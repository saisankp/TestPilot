{"test_class": {"identifier": "StringSourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "spring-xml/src/test/java/org/springframework/xml/transform/StringSourceTest.java"}, "test_case": {"identifier": "testStringSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testStringSource() throws TransformerException {\n\t\tTransformer transformer = TransformerFactoryUtils.newInstance().newTransformer();\n\t\tString content = \"<prefix:content xmlns:prefix='namespace'/>\";\n\t\tDOMResult result = new DOMResult();\n\t\ttransformer.transform(new StringSource(content), result);\n\t\tElement rootElement = (Element) result.getNode().getFirstChild();\n\t\tAssert.assertEquals(\"Invalid local name\", \"content\", rootElement.getLocalName());\n\t\tAssert.assertEquals(\"Invalid prefix\", \"prefix\", rootElement.getPrefix());\n\t\tAssert.assertEquals(\"Invalid namespace\", \"namespace\", rootElement.getNamespaceURI());\n\t}", "signature": "void testStringSource()", "full_signature": "@Test public void testStringSource()", "class_method_signature": "StringSourceTest.testStringSource()", "testcase": true, "constructor": false, "invocations": ["newTransformer", "newInstance", "transform", "getFirstChild", "getNode", "assertEquals", "getLocalName", "assertEquals", "getPrefix", "assertEquals", "getNamespaceURI"]}, "focal_class": {"identifier": "StringSource", "superclass": "extends StreamSource", "interfaces": "", "fields": [{"original_string": "private final String content;", "modifier": "private final", "type": "String", "declarator": "content", "var_name": "content"}], "methods": [{"identifier": "StringSource", "parameters": "(String content)", "modifiers": "public", "return": "", "signature": " StringSource(String content)", "full_signature": "public  StringSource(String content)", "class_method_signature": "StringSource.StringSource(String content)", "testcase": false, "constructor": true}, {"identifier": "getReader", "parameters": "()", "modifiers": "@Override public", "return": "Reader", "signature": "Reader getReader()", "full_signature": "@Override public Reader getReader()", "class_method_signature": "StringSource.getReader()", "testcase": false, "constructor": false}, {"identifier": "setInputStream", "parameters": "(InputStream inputStream)", "modifiers": "@Override public", "return": "void", "signature": "void setInputStream(InputStream inputStream)", "full_signature": "@Override public void setInputStream(InputStream inputStream)", "class_method_signature": "StringSource.setInputStream(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "()", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream()", "full_signature": "@Override public InputStream getInputStream()", "class_method_signature": "StringSource.getInputStream()", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(Reader reader)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(Reader reader)", "full_signature": "@Override public void setReader(Reader reader)", "class_method_signature": "StringSource.setReader(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StringSource.toString()", "testcase": false, "constructor": false}], "file": "spring-xml/src/main/java/org/springframework/xml/transform/StringSource.java"}, "focal_method": {"identifier": "StringSource", "parameters": "(String content)", "modifiers": "public", "return": "", "body": "public StringSource(String content) {\n\t\tAssert.notNull(content, \"'content' must not be null\");\n\t\tthis.content = content;\n\t}", "signature": " StringSource(String content)", "full_signature": "public  StringSource(String content)", "class_method_signature": "StringSource.StringSource(String content)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}