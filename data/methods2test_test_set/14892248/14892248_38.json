{"test_class": {"identifier": "AcroFieldsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String PDF_COMBO = \"./src/test/resources/com/itextpdf/text/pdf/AcroFieldsTest/choice_field_order.pdf\";", "modifier": "private final", "type": "String", "declarator": "PDF_COMBO = \"./src/test/resources/com/itextpdf/text/pdf/AcroFieldsTest/choice_field_order.pdf\"", "var_name": "PDF_COMBO"}, {"original_string": "private final String PDF_COMBO_EXPORT = \"./src/test/resources/com/itextpdf/text/pdf/AcroFieldsTest/choice_field_order_export.pdf\";", "modifier": "private final", "type": "String", "declarator": "PDF_COMBO_EXPORT = \"./src/test/resources/com/itextpdf/text/pdf/AcroFieldsTest/choice_field_order_export.pdf\"", "var_name": "PDF_COMBO_EXPORT"}, {"original_string": "private final String PDF_COMBO_FIELD_NAME = \"choice_field\";", "modifier": "private final", "type": "String", "declarator": "PDF_COMBO_FIELD_NAME = \"choice_field\"", "var_name": "PDF_COMBO_FIELD_NAME"}, {"original_string": "private final String[] PDF_COMBO_VALUES = {\n            \"Option 1\",\n            \"Option 2\",\n            \"Option 3\"\n    };", "modifier": "private final", "type": "String[]", "declarator": "PDF_COMBO_VALUES = {\n            \"Option 1\",\n            \"Option 2\",\n            \"Option 3\"\n    }", "var_name": "PDF_COMBO_VALUES"}, {"original_string": "private final String[] PDF_COMBO_EXPORT_VALUES = {\n            \"Export 1\",\n            \"Export 2\",\n            \"Export 3\"\n    };", "modifier": "private final", "type": "String[]", "declarator": "PDF_COMBO_EXPORT_VALUES = {\n            \"Export 1\",\n            \"Export 2\",\n            \"Export 3\"\n    }", "var_name": "PDF_COMBO_EXPORT_VALUES"}, {"original_string": "private final String sourceFolder = \"./src/test/resources/com/itextpdf/text/pdf/AcroFieldsTest/\";", "modifier": "private final", "type": "String", "declarator": "sourceFolder = \"./src/test/resources/com/itextpdf/text/pdf/AcroFieldsTest/\"", "var_name": "sourceFolder"}, {"original_string": "private String outFolder = \"./target/com/itextpdf/test/pdf/AcroFieldsTest/\";", "modifier": "private", "type": "String", "declarator": "outFolder = \"./target/com/itextpdf/test/pdf/AcroFieldsTest/\"", "var_name": "outFolder"}], "file": "itext/src/test/java/com/itextpdf/text/pdf/AcroFieldsTest.java"}, "test_case": {"identifier": "lastBytesNotCoveredTest02", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void lastBytesNotCoveredTest02() throws IOException {\n        String inPdf = sourceFolder + \"lastBytesNotCoveredTest02.pdf\";\n\n        PdfReader reader = new PdfReader(inPdf);\n        AcroFields acroFields = reader.getAcroFields();\n\n        Assert.assertFalse(acroFields.signatureCoversWholeDocument(\"Signature1\"));\n    }", "signature": "void lastBytesNotCoveredTest02()", "full_signature": "@Test public void lastBytesNotCoveredTest02()", "class_method_signature": "AcroFieldsTest.lastBytesNotCoveredTest02()", "testcase": true, "constructor": false, "invocations": ["getAcroFields", "assertFalse", "signatureCoversWholeDocument"]}, "focal_class": {"identifier": "AcroFields", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int DA_FONT = 0;", "modifier": "public static final", "type": "int", "declarator": "DA_FONT = 0", "var_name": "DA_FONT"}, {"original_string": "public static final int DA_SIZE = 1;", "modifier": "public static final", "type": "int", "declarator": "DA_SIZE = 1", "var_name": "DA_SIZE"}, {"original_string": "public static final int DA_COLOR = 2;", "modifier": "public static final", "type": "int", "declarator": "DA_COLOR = 2", "var_name": "DA_COLOR"}, {"original_string": "public static final int FIELD_TYPE_NONE = 0;", "modifier": "public static final", "type": "int", "declarator": "FIELD_TYPE_NONE = 0", "var_name": "FIELD_TYPE_NONE"}, {"original_string": "public static final int FIELD_TYPE_PUSHBUTTON = 1;", "modifier": "public static final", "type": "int", "declarator": "FIELD_TYPE_PUSHBUTTON = 1", "var_name": "FIELD_TYPE_PUSHBUTTON"}, {"original_string": "public static final int FIELD_TYPE_CHECKBOX = 2;", "modifier": "public static final", "type": "int", "declarator": "FIELD_TYPE_CHECKBOX = 2", "var_name": "FIELD_TYPE_CHECKBOX"}, {"original_string": "public static final int FIELD_TYPE_RADIOBUTTON = 3;", "modifier": "public static final", "type": "int", "declarator": "FIELD_TYPE_RADIOBUTTON = 3", "var_name": "FIELD_TYPE_RADIOBUTTON"}, {"original_string": "public static final int FIELD_TYPE_TEXT = 4;", "modifier": "public static final", "type": "int", "declarator": "FIELD_TYPE_TEXT = 4", "var_name": "FIELD_TYPE_TEXT"}, {"original_string": "public static final int FIELD_TYPE_LIST = 5;", "modifier": "public static final", "type": "int", "declarator": "FIELD_TYPE_LIST = 5", "var_name": "FIELD_TYPE_LIST"}, {"original_string": "public static final int FIELD_TYPE_COMBO = 6;", "modifier": "public static final", "type": "int", "declarator": "FIELD_TYPE_COMBO = 6", "var_name": "FIELD_TYPE_COMBO"}, {"original_string": "public static final int FIELD_TYPE_SIGNATURE = 7;", "modifier": "public static final", "type": "int", "declarator": "FIELD_TYPE_SIGNATURE = 7", "var_name": "FIELD_TYPE_SIGNATURE"}, {"original_string": "private static final HashMap<String, String[]> stdFieldFontNames = new HashMap<String, String[]>();", "modifier": "private static final", "type": "HashMap<String, String[]>", "declarator": "stdFieldFontNames = new HashMap<String, String[]>()", "var_name": "stdFieldFontNames"}, {"original_string": "private static final PdfName[] buttonRemove = {PdfName.MK, PdfName.F, PdfName.FF, PdfName.Q, PdfName.BS, PdfName.BORDER};", "modifier": "private static final", "type": "PdfName[]", "declarator": "buttonRemove = {PdfName.MK, PdfName.F, PdfName.FF, PdfName.Q, PdfName.BS, PdfName.BORDER}", "var_name": "buttonRemove"}, {"original_string": "PdfReader reader;", "modifier": "", "type": "PdfReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "PdfWriter writer;", "modifier": "", "type": "PdfWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "Map<String, Item> fields;", "modifier": "", "type": "Map<String, Item>", "declarator": "fields", "var_name": "fields"}, {"original_string": "private int topFirst;", "modifier": "private", "type": "int", "declarator": "topFirst", "var_name": "topFirst"}, {"original_string": "private HashMap<String, int[]> sigNames;", "modifier": "private", "type": "HashMap<String, int[]>", "declarator": "sigNames", "var_name": "sigNames"}, {"original_string": "private boolean append;", "modifier": "private", "type": "boolean", "declarator": "append", "var_name": "append"}, {"original_string": "private HashMap<Integer, BaseFont> extensionFonts = new HashMap<Integer, BaseFont>();", "modifier": "private", "type": "HashMap<Integer, BaseFont>", "declarator": "extensionFonts = new HashMap<Integer, BaseFont>()", "var_name": "extensionFonts"}, {"original_string": "private XfaForm xfa;", "modifier": "private", "type": "XfaForm", "declarator": "xfa", "var_name": "xfa"}, {"original_string": "private boolean lastWasString;", "modifier": "private", "type": "boolean", "declarator": "lastWasString", "var_name": "lastWasString"}, {"original_string": "private boolean generateAppearances = true;", "modifier": "private", "type": "boolean", "declarator": "generateAppearances = true", "var_name": "generateAppearances"}, {"original_string": "private HashMap<String, BaseFont> localFonts = new HashMap<String, BaseFont>();", "modifier": "private", "type": "HashMap<String, BaseFont>", "declarator": "localFonts = new HashMap<String, BaseFont>()", "var_name": "localFonts"}, {"original_string": "private float extraMarginLeft;", "modifier": "private", "type": "float", "declarator": "extraMarginLeft", "var_name": "extraMarginLeft"}, {"original_string": "private float extraMarginTop;", "modifier": "private", "type": "float", "declarator": "extraMarginTop", "var_name": "extraMarginTop"}, {"original_string": "private ArrayList<BaseFont> substitutionFonts;", "modifier": "private", "type": "ArrayList<BaseFont>", "declarator": "substitutionFonts", "var_name": "substitutionFonts"}, {"original_string": "private ArrayList<String> orderedSignatureNames;", "modifier": "private", "type": "ArrayList<String>", "declarator": "orderedSignatureNames", "var_name": "orderedSignatureNames"}, {"original_string": "private int totalRevisions;", "modifier": "private", "type": "int", "declarator": "totalRevisions", "var_name": "totalRevisions"}, {"original_string": "private Map<String, TextField> fieldCache;", "modifier": "private", "type": "Map<String, TextField>", "declarator": "fieldCache", "var_name": "fieldCache"}], "methods": [{"identifier": "splitDAelements", "parameters": "(String da)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] splitDAelements(String da)", "full_signature": "public static Object[] splitDAelements(String da)", "class_method_signature": "AcroFields.splitDAelements(String da)", "testcase": false, "constructor": false}, {"identifier": "clearSigDic", "parameters": "(PdfDictionary dic)", "modifiers": "private static", "return": "void", "signature": "void clearSigDic(PdfDictionary dic)", "full_signature": "private static void clearSigDic(PdfDictionary dic)", "class_method_signature": "AcroFields.clearSigDic(PdfDictionary dic)", "testcase": false, "constructor": false}, {"identifier": "AcroFields", "parameters": "(PdfReader reader, PdfWriter writer)", "modifiers": "", "return": "", "signature": " AcroFields(PdfReader reader, PdfWriter writer)", "full_signature": "  AcroFields(PdfReader reader, PdfWriter writer)", "class_method_signature": "AcroFields.AcroFields(PdfReader reader, PdfWriter writer)", "testcase": false, "constructor": true}, {"identifier": "fill", "parameters": "()", "modifiers": "", "return": "void", "signature": "void fill()", "full_signature": " void fill()", "class_method_signature": "AcroFields.fill()", "testcase": false, "constructor": false}, {"identifier": "getAppearanceStates", "parameters": "(String fieldName)", "modifiers": "public", "return": "String[]", "signature": "String[] getAppearanceStates(String fieldName)", "full_signature": "public String[] getAppearanceStates(String fieldName)", "class_method_signature": "AcroFields.getAppearanceStates(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getListOption", "parameters": "(String fieldName, int idx)", "modifiers": "private", "return": "String[]", "signature": "String[] getListOption(String fieldName, int idx)", "full_signature": "private String[] getListOption(String fieldName, int idx)", "class_method_signature": "AcroFields.getListOption(String fieldName, int idx)", "testcase": false, "constructor": false}, {"identifier": "getListOptionExport", "parameters": "(String fieldName)", "modifiers": "public", "return": "String[]", "signature": "String[] getListOptionExport(String fieldName)", "full_signature": "public String[] getListOptionExport(String fieldName)", "class_method_signature": "AcroFields.getListOptionExport(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getListOptionDisplay", "parameters": "(String fieldName)", "modifiers": "public", "return": "String[]", "signature": "String[] getListOptionDisplay(String fieldName)", "full_signature": "public String[] getListOptionDisplay(String fieldName)", "class_method_signature": "AcroFields.getListOptionDisplay(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "setListOption", "parameters": "(String fieldName, String[] exportValues, String[] displayValues)", "modifiers": "public", "return": "boolean", "signature": "boolean setListOption(String fieldName, String[] exportValues, String[] displayValues)", "full_signature": "public boolean setListOption(String fieldName, String[] exportValues, String[] displayValues)", "class_method_signature": "AcroFields.setListOption(String fieldName, String[] exportValues, String[] displayValues)", "testcase": false, "constructor": false}, {"identifier": "getFieldType", "parameters": "(String fieldName)", "modifiers": "public", "return": "int", "signature": "int getFieldType(String fieldName)", "full_signature": "public int getFieldType(String fieldName)", "class_method_signature": "AcroFields.getFieldType(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "exportAsFdf", "parameters": "(FdfWriter writer)", "modifiers": "public", "return": "void", "signature": "void exportAsFdf(FdfWriter writer)", "full_signature": "public void exportAsFdf(FdfWriter writer)", "class_method_signature": "AcroFields.exportAsFdf(FdfWriter writer)", "testcase": false, "constructor": false}, {"identifier": "renameField", "parameters": "(String oldName, String newName)", "modifiers": "public", "return": "boolean", "signature": "boolean renameField(String oldName, String newName)", "full_signature": "public boolean renameField(String oldName, String newName)", "class_method_signature": "AcroFields.renameField(String oldName, String newName)", "testcase": false, "constructor": false}, {"identifier": "decodeGenericDictionary", "parameters": "(PdfDictionary merged, BaseField tx)", "modifiers": "public", "return": "void", "signature": "void decodeGenericDictionary(PdfDictionary merged, BaseField tx)", "full_signature": "public void decodeGenericDictionary(PdfDictionary merged, BaseField tx)", "class_method_signature": "AcroFields.decodeGenericDictionary(PdfDictionary merged, BaseField tx)", "testcase": false, "constructor": false}, {"identifier": "getAppearance", "parameters": "(PdfDictionary merged, String values[], String fieldName)", "modifiers": "", "return": "PdfAppearance", "signature": "PdfAppearance getAppearance(PdfDictionary merged, String values[], String fieldName)", "full_signature": " PdfAppearance getAppearance(PdfDictionary merged, String values[], String fieldName)", "class_method_signature": "AcroFields.getAppearance(PdfDictionary merged, String values[], String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getAppearance", "parameters": "(PdfDictionary merged, String text, String fieldName)", "modifiers": "", "return": "PdfAppearance", "signature": "PdfAppearance getAppearance(PdfDictionary merged, String text, String fieldName)", "full_signature": " PdfAppearance getAppearance(PdfDictionary merged, String text, String fieldName)", "class_method_signature": "AcroFields.getAppearance(PdfDictionary merged, String text, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getMKColor", "parameters": "(PdfArray ar)", "modifiers": "", "return": "BaseColor", "signature": "BaseColor getMKColor(PdfArray ar)", "full_signature": " BaseColor getMKColor(PdfArray ar)", "class_method_signature": "AcroFields.getMKColor(PdfArray ar)", "testcase": false, "constructor": false}, {"identifier": "getFieldRichValue", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String getFieldRichValue(String name)", "full_signature": "public String getFieldRichValue(String name)", "class_method_signature": "AcroFields.getFieldRichValue(String name)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String getField(String name)", "full_signature": "public String getField(String name)", "class_method_signature": "AcroFields.getField(String name)", "testcase": false, "constructor": false}, {"identifier": "getListSelection", "parameters": "(String name)", "modifiers": "public", "return": "String[]", "signature": "String[] getListSelection(String name)", "full_signature": "public String[] getListSelection(String name)", "class_method_signature": "AcroFields.getListSelection(String name)", "testcase": false, "constructor": false}, {"identifier": "setFieldProperty", "parameters": "(String field, String name, Object value, int inst[])", "modifiers": "public", "return": "boolean", "signature": "boolean setFieldProperty(String field, String name, Object value, int inst[])", "full_signature": "public boolean setFieldProperty(String field, String name, Object value, int inst[])", "class_method_signature": "AcroFields.setFieldProperty(String field, String name, Object value, int inst[])", "testcase": false, "constructor": false}, {"identifier": "setFieldProperty", "parameters": "(String field, String name, int value, int inst[])", "modifiers": "public", "return": "boolean", "signature": "boolean setFieldProperty(String field, String name, int value, int inst[])", "full_signature": "public boolean setFieldProperty(String field, String name, int value, int inst[])", "class_method_signature": "AcroFields.setFieldProperty(String field, String name, int value, int inst[])", "testcase": false, "constructor": false}, {"identifier": "mergeXfaData", "parameters": "(Node n)", "modifiers": "public", "return": "void", "signature": "void mergeXfaData(Node n)", "full_signature": "public void mergeXfaData(Node n)", "class_method_signature": "AcroFields.mergeXfaData(Node n)", "testcase": false, "constructor": false}, {"identifier": "setFields", "parameters": "(FdfReader fdf)", "modifiers": "public", "return": "void", "signature": "void setFields(FdfReader fdf)", "full_signature": "public void setFields(FdfReader fdf)", "class_method_signature": "AcroFields.setFields(FdfReader fdf)", "testcase": false, "constructor": false}, {"identifier": "regenerateField", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean regenerateField(String name)", "full_signature": "public boolean regenerateField(String name)", "class_method_signature": "AcroFields.regenerateField(String name)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(String name, String value)", "modifiers": "public", "return": "boolean", "signature": "boolean setField(String name, String value)", "full_signature": "public boolean setField(String name, String value)", "class_method_signature": "AcroFields.setField(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(String name, String value, boolean saveAppearance)", "modifiers": "public", "return": "boolean", "signature": "boolean setField(String name, String value, boolean saveAppearance)", "full_signature": "public boolean setField(String name, String value, boolean saveAppearance)", "class_method_signature": "AcroFields.setField(String name, String value, boolean saveAppearance)", "testcase": false, "constructor": false}, {"identifier": "setFieldRichValue", "parameters": "(String name, String richValue)", "modifiers": "public", "return": "boolean", "signature": "boolean setFieldRichValue(String name, String richValue)", "full_signature": "public boolean setFieldRichValue(String name, String richValue)", "class_method_signature": "AcroFields.setFieldRichValue(String name, String richValue)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(String name, String value, String display)", "modifiers": "public", "return": "boolean", "signature": "boolean setField(String name, String value, String display)", "full_signature": "public boolean setField(String name, String value, String display)", "class_method_signature": "AcroFields.setField(String name, String value, String display)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(String name, String value, String display, boolean saveAppearance)", "modifiers": "public", "return": "boolean", "signature": "boolean setField(String name, String value, String display, boolean saveAppearance)", "full_signature": "public boolean setField(String name, String value, String display, boolean saveAppearance)", "class_method_signature": "AcroFields.setField(String name, String value, String display, boolean saveAppearance)", "testcase": false, "constructor": false}, {"identifier": "setListSelection", "parameters": "(String name, String[] value)", "modifiers": "public", "return": "boolean", "signature": "boolean setListSelection(String name, String[] value)", "full_signature": "public boolean setListSelection(String name, String[] value)", "class_method_signature": "AcroFields.setListSelection(String name, String[] value)", "testcase": false, "constructor": false}, {"identifier": "isInAP", "parameters": "(PdfDictionary nDic, PdfName check)", "modifiers": "", "return": "boolean", "signature": "boolean isInAP(PdfDictionary nDic, PdfName check)", "full_signature": " boolean isInAP(PdfDictionary nDic, PdfName check)", "class_method_signature": "AcroFields.isInAP(PdfDictionary nDic, PdfName check)", "testcase": false, "constructor": false}, {"identifier": "getFields", "parameters": "()", "modifiers": "public", "return": "Map<String, Item>", "signature": "Map<String, Item> getFields()", "full_signature": "public Map<String, Item> getFields()", "class_method_signature": "AcroFields.getFields()", "testcase": false, "constructor": false}, {"identifier": "setFields", "parameters": "(XfdfReader xfdf)", "modifiers": "public", "return": "void", "signature": "void setFields(XfdfReader xfdf)", "full_signature": "public void setFields(XfdfReader xfdf)", "class_method_signature": "AcroFields.setFields(XfdfReader xfdf)", "testcase": false, "constructor": false}, {"identifier": "getFieldItem", "parameters": "(String name)", "modifiers": "public", "return": "Item", "signature": "Item getFieldItem(String name)", "full_signature": "public Item getFieldItem(String name)", "class_method_signature": "AcroFields.getFieldItem(String name)", "testcase": false, "constructor": false}, {"identifier": "getTranslatedFieldName", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String getTranslatedFieldName(String name)", "full_signature": "public String getTranslatedFieldName(String name)", "class_method_signature": "AcroFields.getTranslatedFieldName(String name)", "testcase": false, "constructor": false}, {"identifier": "getFieldPositions", "parameters": "(String name)", "modifiers": "public", "return": "List<FieldPosition>", "signature": "List<FieldPosition> getFieldPositions(String name)", "full_signature": "public List<FieldPosition> getFieldPositions(String name)", "class_method_signature": "AcroFields.getFieldPositions(String name)", "testcase": false, "constructor": false}, {"identifier": "removeRefFromArray", "parameters": "(PdfArray array, PdfObject refo)", "modifiers": "private", "return": "int", "signature": "int removeRefFromArray(PdfArray array, PdfObject refo)", "full_signature": "private int removeRefFromArray(PdfArray array, PdfObject refo)", "class_method_signature": "AcroFields.removeRefFromArray(PdfArray array, PdfObject refo)", "testcase": false, "constructor": false}, {"identifier": "removeFieldsFromPage", "parameters": "(int page)", "modifiers": "public", "return": "boolean", "signature": "boolean removeFieldsFromPage(int page)", "full_signature": "public boolean removeFieldsFromPage(int page)", "class_method_signature": "AcroFields.removeFieldsFromPage(int page)", "testcase": false, "constructor": false}, {"identifier": "removeField", "parameters": "(String name, int page)", "modifiers": "public", "return": "boolean", "signature": "boolean removeField(String name, int page)", "full_signature": "public boolean removeField(String name, int page)", "class_method_signature": "AcroFields.removeField(String name, int page)", "testcase": false, "constructor": false}, {"identifier": "removeField", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean removeField(String name)", "full_signature": "public boolean removeField(String name)", "class_method_signature": "AcroFields.removeField(String name)", "testcase": false, "constructor": false}, {"identifier": "isGenerateAppearances", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGenerateAppearances()", "full_signature": "public boolean isGenerateAppearances()", "class_method_signature": "AcroFields.isGenerateAppearances()", "testcase": false, "constructor": false}, {"identifier": "setGenerateAppearances", "parameters": "(boolean generateAppearances)", "modifiers": "public", "return": "void", "signature": "void setGenerateAppearances(boolean generateAppearances)", "full_signature": "public void setGenerateAppearances(boolean generateAppearances)", "class_method_signature": "AcroFields.setGenerateAppearances(boolean generateAppearances)", "testcase": false, "constructor": false}, {"identifier": "clearSignatureField", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean clearSignatureField(String name)", "full_signature": "public boolean clearSignatureField(String name)", "class_method_signature": "AcroFields.clearSignatureField(String name)", "testcase": false, "constructor": false}, {"identifier": "getSignatureNames", "parameters": "()", "modifiers": "public", "return": "ArrayList<String>", "signature": "ArrayList<String> getSignatureNames()", "full_signature": "public ArrayList<String> getSignatureNames()", "class_method_signature": "AcroFields.getSignatureNames()", "testcase": false, "constructor": false}, {"identifier": "getBlankSignatureNames", "parameters": "()", "modifiers": "public", "return": "ArrayList<String>", "signature": "ArrayList<String> getBlankSignatureNames()", "full_signature": "public ArrayList<String> getBlankSignatureNames()", "class_method_signature": "AcroFields.getBlankSignatureNames()", "testcase": false, "constructor": false}, {"identifier": "getSignatureDictionary", "parameters": "(String name)", "modifiers": "public", "return": "PdfDictionary", "signature": "PdfDictionary getSignatureDictionary(String name)", "full_signature": "public PdfDictionary getSignatureDictionary(String name)", "class_method_signature": "AcroFields.getSignatureDictionary(String name)", "testcase": false, "constructor": false}, {"identifier": "getNormalAppearance", "parameters": "(String name)", "modifiers": "public", "return": "PdfIndirectReference", "signature": "PdfIndirectReference getNormalAppearance(String name)", "full_signature": "public PdfIndirectReference getNormalAppearance(String name)", "class_method_signature": "AcroFields.getNormalAppearance(String name)", "testcase": false, "constructor": false}, {"identifier": "signatureCoversWholeDocument", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean signatureCoversWholeDocument(String name)", "full_signature": "public boolean signatureCoversWholeDocument(String name)", "class_method_signature": "AcroFields.signatureCoversWholeDocument(String name)", "testcase": false, "constructor": false}, {"identifier": "verifySignature", "parameters": "(String name)", "modifiers": "public", "return": "PdfPKCS7", "signature": "PdfPKCS7 verifySignature(String name)", "full_signature": "public PdfPKCS7 verifySignature(String name)", "class_method_signature": "AcroFields.verifySignature(String name)", "testcase": false, "constructor": false}, {"identifier": "verifySignature", "parameters": "(String name, String provider)", "modifiers": "public", "return": "PdfPKCS7", "signature": "PdfPKCS7 verifySignature(String name, String provider)", "full_signature": "public PdfPKCS7 verifySignature(String name, String provider)", "class_method_signature": "AcroFields.verifySignature(String name, String provider)", "testcase": false, "constructor": false}, {"identifier": "updateByteRange", "parameters": "(PdfPKCS7 pkcs7, PdfDictionary v)", "modifiers": "private", "return": "void", "signature": "void updateByteRange(PdfPKCS7 pkcs7, PdfDictionary v)", "full_signature": "private void updateByteRange(PdfPKCS7 pkcs7, PdfDictionary v)", "class_method_signature": "AcroFields.updateByteRange(PdfPKCS7 pkcs7, PdfDictionary v)", "testcase": false, "constructor": false}, {"identifier": "markUsed", "parameters": "(PdfObject obj)", "modifiers": "private", "return": "void", "signature": "void markUsed(PdfObject obj)", "full_signature": "private void markUsed(PdfObject obj)", "class_method_signature": "AcroFields.markUsed(PdfObject obj)", "testcase": false, "constructor": false}, {"identifier": "getTotalRevisions", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalRevisions()", "full_signature": "public int getTotalRevisions()", "class_method_signature": "AcroFields.getTotalRevisions()", "testcase": false, "constructor": false}, {"identifier": "getRevision", "parameters": "(String field)", "modifiers": "public", "return": "int", "signature": "int getRevision(String field)", "full_signature": "public int getRevision(String field)", "class_method_signature": "AcroFields.getRevision(String field)", "testcase": false, "constructor": false}, {"identifier": "extractRevision", "parameters": "(String field)", "modifiers": "public", "return": "InputStream", "signature": "InputStream extractRevision(String field)", "full_signature": "public InputStream extractRevision(String field)", "class_method_signature": "AcroFields.extractRevision(String field)", "testcase": false, "constructor": false}, {"identifier": "getFieldCache", "parameters": "()", "modifiers": "public", "return": "Map<String, TextField>", "signature": "Map<String, TextField> getFieldCache()", "full_signature": "public Map<String, TextField> getFieldCache()", "class_method_signature": "AcroFields.getFieldCache()", "testcase": false, "constructor": false}, {"identifier": "setFieldCache", "parameters": "(Map<String, TextField> fieldCache)", "modifiers": "public", "return": "void", "signature": "void setFieldCache(Map<String, TextField> fieldCache)", "full_signature": "public void setFieldCache(Map<String, TextField> fieldCache)", "class_method_signature": "AcroFields.setFieldCache(Map<String, TextField> fieldCache)", "testcase": false, "constructor": false}, {"identifier": "setExtraMargin", "parameters": "(float extraMarginLeft, float extraMarginTop)", "modifiers": "public", "return": "void", "signature": "void setExtraMargin(float extraMarginLeft, float extraMarginTop)", "full_signature": "public void setExtraMargin(float extraMarginLeft, float extraMarginTop)", "class_method_signature": "AcroFields.setExtraMargin(float extraMarginLeft, float extraMarginTop)", "testcase": false, "constructor": false}, {"identifier": "addSubstitutionFont", "parameters": "(BaseFont font)", "modifiers": "public", "return": "void", "signature": "void addSubstitutionFont(BaseFont font)", "full_signature": "public void addSubstitutionFont(BaseFont font)", "class_method_signature": "AcroFields.addSubstitutionFont(BaseFont font)", "testcase": false, "constructor": false}, {"identifier": "getSubstitutionFonts", "parameters": "()", "modifiers": "public", "return": "ArrayList<BaseFont>", "signature": "ArrayList<BaseFont> getSubstitutionFonts()", "full_signature": "public ArrayList<BaseFont> getSubstitutionFonts()", "class_method_signature": "AcroFields.getSubstitutionFonts()", "testcase": false, "constructor": false}, {"identifier": "setSubstitutionFonts", "parameters": "(ArrayList<BaseFont> substitutionFonts)", "modifiers": "public", "return": "void", "signature": "void setSubstitutionFonts(ArrayList<BaseFont> substitutionFonts)", "full_signature": "public void setSubstitutionFonts(ArrayList<BaseFont> substitutionFonts)", "class_method_signature": "AcroFields.setSubstitutionFonts(ArrayList<BaseFont> substitutionFonts)", "testcase": false, "constructor": false}, {"identifier": "getXfa", "parameters": "()", "modifiers": "public", "return": "XfaForm", "signature": "XfaForm getXfa()", "full_signature": "public XfaForm getXfa()", "class_method_signature": "AcroFields.getXfa()", "testcase": false, "constructor": false}, {"identifier": "removeXfa", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeXfa()", "full_signature": "public void removeXfa()", "class_method_signature": "AcroFields.removeXfa()", "testcase": false, "constructor": false}, {"identifier": "getNewPushbuttonFromField", "parameters": "(String field)", "modifiers": "public", "return": "PushbuttonField", "signature": "PushbuttonField getNewPushbuttonFromField(String field)", "full_signature": "public PushbuttonField getNewPushbuttonFromField(String field)", "class_method_signature": "AcroFields.getNewPushbuttonFromField(String field)", "testcase": false, "constructor": false}, {"identifier": "getNewPushbuttonFromField", "parameters": "(String field, int order)", "modifiers": "public", "return": "PushbuttonField", "signature": "PushbuttonField getNewPushbuttonFromField(String field, int order)", "full_signature": "public PushbuttonField getNewPushbuttonFromField(String field, int order)", "class_method_signature": "AcroFields.getNewPushbuttonFromField(String field, int order)", "testcase": false, "constructor": false}, {"identifier": "replacePushbuttonField", "parameters": "(String field, PdfFormField button)", "modifiers": "public", "return": "boolean", "signature": "boolean replacePushbuttonField(String field, PdfFormField button)", "full_signature": "public boolean replacePushbuttonField(String field, PdfFormField button)", "class_method_signature": "AcroFields.replacePushbuttonField(String field, PdfFormField button)", "testcase": false, "constructor": false}, {"identifier": "replacePushbuttonField", "parameters": "(String field, PdfFormField button, int order)", "modifiers": "public", "return": "boolean", "signature": "boolean replacePushbuttonField(String field, PdfFormField button, int order)", "full_signature": "public boolean replacePushbuttonField(String field, PdfFormField button, int order)", "class_method_signature": "AcroFields.replacePushbuttonField(String field, PdfFormField button, int order)", "testcase": false, "constructor": false}, {"identifier": "doesSignatureFieldExist", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean doesSignatureFieldExist(String name)", "full_signature": "public boolean doesSignatureFieldExist(String name)", "class_method_signature": "AcroFields.doesSignatureFieldExist(String name)", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/pdf/AcroFields.java"}, "focal_method": {"identifier": "signatureCoversWholeDocument", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "body": "public boolean signatureCoversWholeDocument(String name) {\n        getSignatureNames();\n        name = getTranslatedFieldName(name);\n        if (!sigNames.containsKey(name))\n            return false;\n        try {\n            ContentsChecker signatureReader = new ContentsChecker(reader.getSafeFile());\n            return signatureReader.checkWhetherSignatureCoversWholeDocument(reader.getAcroFields().getFieldItem(name));\n        } catch (IOException e) {\n            // That's not expected because if the signature is invalid, it should have already failed\n            return false;\n        }\n    }", "signature": "boolean signatureCoversWholeDocument(String name)", "full_signature": "public boolean signatureCoversWholeDocument(String name)", "class_method_signature": "AcroFields.signatureCoversWholeDocument(String name)", "testcase": false, "constructor": false, "invocations": ["getSignatureNames", "getTranslatedFieldName", "containsKey", "getSafeFile", "checkWhetherSignatureCoversWholeDocument", "getFieldItem", "getAcroFields"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}