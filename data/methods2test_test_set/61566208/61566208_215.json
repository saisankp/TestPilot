{"test_class": {"identifier": "DhcpLeaseParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/hms-core/src/test/java/com/vmware/vrack/hms/utils/DhcpLeaseParserTest.java"}, "test_case": {"identifier": "testParseLeaseFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseLeaseFile()\n    {\n        final String dhcpLeaseFile = \"src/test/resources/test-dhcpd.lease\";\n        List<DhcpLease> dhcpLeases = DhcpLeaseParser.parseLeaseFile( dhcpLeaseFile );\n        assertNotNull( dhcpLeases );\n        assertTrue( dhcpLeases.size() > 0 );\n        assertTrue( dhcpLeases.size() == 8 );\n        DhcpLease dhcpLease = dhcpLeases.get( 0 );\n        assertNotNull( dhcpLease );\n        assertTrue( StringUtils.equals( dhcpLease.getStarts(), \"2016/06/19 09:55:11\" ) );\n        assertTrue( StringUtils.equals( dhcpLease.getEnds(), \"2016/06/20 09:55:11\" ) );\n    }", "signature": "void testParseLeaseFile()", "full_signature": "@Test public void testParseLeaseFile()", "class_method_signature": "DhcpLeaseParserTest.testParseLeaseFile()", "testcase": true, "constructor": false, "invocations": ["parseLeaseFile", "assertNotNull", "assertTrue", "size", "assertTrue", "size", "get", "assertNotNull", "assertTrue", "equals", "getStarts", "assertTrue", "equals", "getEnds"]}, "focal_class": {"identifier": "DhcpLeaseParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger( DhcpLeaseParser.class );", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( DhcpLeaseParser.class )", "var_name": "logger"}, {"original_string": "private static final String DHCP_LEASE_REGEX_PATTERN = \"lease\\\\s([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\"\n        + \"\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.\"\n        + \"([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\s\\\\{(.+?)\\\\}\";", "modifier": "private static final", "type": "String", "declarator": "DHCP_LEASE_REGEX_PATTERN = \"lease\\\\s([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\"\n        + \"\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.\"\n        + \"([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\s\\\\{(.+?)\\\\}\"", "var_name": "DHCP_LEASE_REGEX_PATTERN"}, {"original_string": "private static final String MAC_ADDRESS_REGEX_PATTERN = \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\";", "modifier": "private static final", "type": "String", "declarator": "MAC_ADDRESS_REGEX_PATTERN = \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\"", "var_name": "MAC_ADDRESS_REGEX_PATTERN"}, {"original_string": "private static final String IPV4_ADDRESS_REGEX_PATTERN =\n        \"([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.\"\n            + \"([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\";", "modifier": "private static final", "type": "String", "declarator": "IPV4_ADDRESS_REGEX_PATTERN =\n        \"([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.\"\n            + \"([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\"", "var_name": "IPV4_ADDRESS_REGEX_PATTERN"}, {"original_string": "private static final String DHCP_LEASE_DATE_PATTERN = \"^\\\\d{4}/\\\\d{2}/\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2}$\";", "modifier": "private static final", "type": "String", "declarator": "DHCP_LEASE_DATE_PATTERN = \"^\\\\d{4}/\\\\d{2}/\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2}$\"", "var_name": "DHCP_LEASE_DATE_PATTERN"}, {"original_string": "private static final SimpleDateFormat simpleDateFormat = new SimpleDateFormat( \"yyyy/MM/dd HH:mm:ss\" );", "modifier": "private static final", "type": "SimpleDateFormat", "declarator": "simpleDateFormat = new SimpleDateFormat( \"yyyy/MM/dd HH:mm:ss\" )", "var_name": "simpleDateFormat"}], "methods": [{"identifier": "DhcpLeaseParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " DhcpLeaseParser()", "full_signature": "private  DhcpLeaseParser()", "class_method_signature": "DhcpLeaseParser.DhcpLeaseParser()", "testcase": false, "constructor": true}, {"identifier": "parseLeaseFile", "parameters": "( final String dhcpLeaseFile )", "modifiers": "public static", "return": "List<DhcpLease>", "signature": "List<DhcpLease> parseLeaseFile( final String dhcpLeaseFile )", "full_signature": "public static List<DhcpLease> parseLeaseFile( final String dhcpLeaseFile )", "class_method_signature": "DhcpLeaseParser.parseLeaseFile( final String dhcpLeaseFile )", "testcase": false, "constructor": false}, {"identifier": "parseLeaseContent", "parameters": "( final String leaseContent )", "modifiers": "public static", "return": "DhcpLease", "signature": "DhcpLease parseLeaseContent( final String leaseContent )", "full_signature": "public static DhcpLease parseLeaseContent( final String leaseContent )", "class_method_signature": "DhcpLeaseParser.parseLeaseContent( final String leaseContent )", "testcase": false, "constructor": false}, {"identifier": "getLeaseDate", "parameters": "( final String[] tokens )", "modifiers": "private static", "return": "String", "signature": "String getLeaseDate( final String[] tokens )", "full_signature": "private static String getLeaseDate( final String[] tokens )", "class_method_signature": "DhcpLeaseParser.getLeaseDate( final String[] tokens )", "testcase": false, "constructor": false}, {"identifier": "isLatestLease", "parameters": "( DhcpLease existingLease, DhcpLease newLease )", "modifiers": "public static", "return": "boolean", "signature": "boolean isLatestLease( DhcpLease existingLease, DhcpLease newLease )", "full_signature": "public static boolean isLatestLease( DhcpLease existingLease, DhcpLease newLease )", "class_method_signature": "DhcpLeaseParser.isLatestLease( DhcpLease existingLease, DhcpLease newLease )", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "( final String dateString )", "modifiers": "private static", "return": "Date", "signature": "Date parseDate( final String dateString )", "full_signature": "private static Date parseDate( final String dateString )", "class_method_signature": "DhcpLeaseParser.parseDate( final String dateString )", "testcase": false, "constructor": false}], "file": "modules/hms-core/src/main/java/com/vmware/vrack/hms/utils/DhcpLeaseParser.java"}, "focal_method": {"identifier": "parseLeaseFile", "parameters": "( final String dhcpLeaseFile )", "modifiers": "public static", "return": "List<DhcpLease>", "body": "public static List<DhcpLease> parseLeaseFile( final String dhcpLeaseFile )\n    {\n\n        // check that dhcp lease file is not null or blank.\n        if ( StringUtils.isBlank( dhcpLeaseFile ) )\n        {\n            logger.warn( \"In parseLeaseFile, DHCP lease file is either null or blank.\" );\n            return null;\n        }\n\n        // check that dhcp lease file exists.\n        if ( !FileUtil.isFileExists( dhcpLeaseFile ) )\n        {\n            logger.warn( \"In parseLeaseFile, DHCP lease file '{}' does not exist.\", dhcpLeaseFile );\n            return null;\n        }\n\n        // read dhcp file contents\n        final String dhcpLeaseFileContent = FileUtil.readFileToString( dhcpLeaseFile );\n        if ( StringUtils.isBlank( dhcpLeaseFileContent ) )\n        {\n            logger.warn( \"In parseLeaseFile, DHCP lease file '{}' content is either null or blank.\" );\n            return null;\n        }\n\n        Map<String, DhcpLease> dhcpLeasesMap = new HashMap<String, DhcpLease>();\n        Pattern pattern = Pattern.compile( DHCP_LEASE_REGEX_PATTERN, Pattern.DOTALL );\n        Matcher matcher = pattern.matcher( dhcpLeaseFileContent );\n        DhcpLease dhcpLease = null;\n        String macAddress = null;\n        while ( matcher.find() )\n        {\n            dhcpLease = parseLeaseContent( matcher.group() );\n            if ( dhcpLease != null )\n            {\n                macAddress = dhcpLease.getMacAddress();\n                if ( !dhcpLeasesMap.containsKey( macAddress ) )\n                {\n                    dhcpLeasesMap.put( macAddress, dhcpLease );\n                }\n                else\n                {\n                    if ( isLatestLease( dhcpLeasesMap.get( macAddress ), dhcpLease ) )\n                    {\n                        dhcpLeasesMap.put( macAddress, dhcpLease );\n                    }\n                }\n            }\n        }\n        return new ArrayList<DhcpLease>( dhcpLeasesMap.values() );\n    }", "signature": "List<DhcpLease> parseLeaseFile( final String dhcpLeaseFile )", "full_signature": "public static List<DhcpLease> parseLeaseFile( final String dhcpLeaseFile )", "class_method_signature": "DhcpLeaseParser.parseLeaseFile( final String dhcpLeaseFile )", "testcase": false, "constructor": false, "invocations": ["isBlank", "warn", "isFileExists", "warn", "readFileToString", "isBlank", "warn", "compile", "matcher", "find", "parseLeaseContent", "group", "getMacAddress", "containsKey", "put", "isLatestLease", "get", "put", "values"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}