{"test_class": {"identifier": "XMLSignatureHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_P12_RSA = \"/eidassignertest.p12\";", "modifier": "private static final", "type": "String", "declarator": "TEST_P12_RSA = \"/eidassignertest.p12\"", "var_name": "TEST_P12_RSA"}, {"original_string": "private static final String TEST_P12_EC = \"/eidassignertest_ec.p12\";", "modifier": "private static final", "type": "String", "declarator": "TEST_P12_EC = \"/eidassignertest_ec.p12\"", "var_name": "TEST_P12_EC"}, {"original_string": "private SignableXMLObject signableXMLObject;", "modifier": "private", "type": "SignableXMLObject", "declarator": "signableXMLObject", "var_name": "signableXMLObject"}], "file": "eidas-starterkit/src/test/java/de/governikus/eumw/eidasstarterkit/XMLSignatureHandlerTest.java"}, "test_case": {"identifier": "testWhenDigestAlgoNullThenThrowIllegalArgumentException", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testWhenDigestAlgoNullThenThrowIllegalArgumentException() throws Exception\n  {\n    X509Certificate cert = Utils.readCert(XMLSignatureHandlerTest.class.getResourceAsStream(\"/EidasSignerTest_x509.cer\"));\n    PrivateKey pk = Utils.readPKCS12(XMLSignatureHandlerTest.class.getResourceAsStream(TEST_P12_RSA),\n                                     \"123456\".toCharArray())\n                         .getKey();\n    Assertions.assertNull(signableXMLObject.getSignature());\n    Assertions.assertThrows(IllegalArgumentException.class,\n                            () -> XMLSignatureHandler.addSignature(signableXMLObject,\n                                                                   pk,\n                                                                   cert,\n                                                                   XMLSignatureHandler.SigEntryType.CERTIFICATE,\n                                                                   null));\n  }", "signature": "void testWhenDigestAlgoNullThenThrowIllegalArgumentException()", "full_signature": "@Test void testWhenDigestAlgoNullThenThrowIllegalArgumentException()", "class_method_signature": "XMLSignatureHandlerTest.testWhenDigestAlgoNullThenThrowIllegalArgumentException()", "testcase": true, "constructor": false, "invocations": ["readCert", "getResourceAsStream", "getKey", "readPKCS12", "getResourceAsStream", "toCharArray", "assertNull", "getSignature", "assertThrows", "addSignature"]}, "focal_class": {"identifier": "XMLSignatureHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SHA_1_PATTERN = \"^SHA-?1\";", "modifier": "private static final", "type": "String", "declarator": "SHA_1_PATTERN = \"^SHA-?1\"", "var_name": "SHA_1_PATTERN"}, {"original_string": "private static final String SHA_256_PATTERN = \"^SHA-?256\";", "modifier": "private static final", "type": "String", "declarator": "SHA_256_PATTERN = \"^SHA-?256\"", "var_name": "SHA_256_PATTERN"}, {"original_string": "private static final String SHA_256_PSS_PATTERN = \"^SHA-?256-?PSS\";", "modifier": "private static final", "type": "String", "declarator": "SHA_256_PSS_PATTERN = \"^SHA-?256-?PSS\"", "var_name": "SHA_256_PSS_PATTERN"}, {"original_string": "private static final String SHA_384_PATTERN = \"^SHA-?384\";", "modifier": "private static final", "type": "String", "declarator": "SHA_384_PATTERN = \"^SHA-?384\"", "var_name": "SHA_384_PATTERN"}, {"original_string": "private static final String SHA_512_PATTERN = \"^SHA-?512\";", "modifier": "private static final", "type": "String", "declarator": "SHA_512_PATTERN = \"^SHA-?512\"", "var_name": "SHA_512_PATTERN"}, {"original_string": "public static final String GIVEN_DIGEST_ALGORITHM = \"Given digest algorithm \";", "modifier": "public static final", "type": "String", "declarator": "GIVEN_DIGEST_ALGORITHM = \"Given digest algorithm \"", "var_name": "GIVEN_DIGEST_ALGORITHM"}], "methods": [{"identifier": "addSignature", "parameters": "(SignableXMLObject signable,\n                                  PrivateKey key,\n                                  X509Certificate cert,\n                                  SigEntryType type,\n                                  String sigDigestAlg)", "modifiers": "static", "return": "void", "signature": "void addSignature(SignableXMLObject signable,\n                                  PrivateKey key,\n                                  X509Certificate cert,\n                                  SigEntryType type,\n                                  String sigDigestAlg)", "full_signature": "static void addSignature(SignableXMLObject signable,\n                                  PrivateKey key,\n                                  X509Certificate cert,\n                                  SigEntryType type,\n                                  String sigDigestAlg)", "class_method_signature": "XMLSignatureHandler.addSignature(SignableXMLObject signable,\n                                  PrivateKey key,\n                                  X509Certificate cert,\n                                  SigEntryType type,\n                                  String sigDigestAlg)", "testcase": false, "constructor": false}, {"identifier": "checkForDSASignatures", "parameters": "(String sigDigestAlg, Signature sig)", "modifiers": "private static", "return": "void", "signature": "void checkForDSASignatures(String sigDigestAlg, Signature sig)", "full_signature": "private static void checkForDSASignatures(String sigDigestAlg, Signature sig)", "class_method_signature": "XMLSignatureHandler.checkForDSASignatures(String sigDigestAlg, Signature sig)", "testcase": false, "constructor": false}, {"identifier": "checkForRSASignatures", "parameters": "(String sigDigestAlg, Signature sig)", "modifiers": "private static", "return": "void", "signature": "void checkForRSASignatures(String sigDigestAlg, Signature sig)", "full_signature": "private static void checkForRSASignatures(String sigDigestAlg, Signature sig)", "class_method_signature": "XMLSignatureHandler.checkForRSASignatures(String sigDigestAlg, Signature sig)", "testcase": false, "constructor": false}, {"identifier": "checkForECSignatures", "parameters": "(String sigDigestAlg, Signature sig)", "modifiers": "private static", "return": "void", "signature": "void checkForECSignatures(String sigDigestAlg, Signature sig)", "full_signature": "private static void checkForECSignatures(String sigDigestAlg, Signature sig)", "class_method_signature": "XMLSignatureHandler.checkForECSignatures(String sigDigestAlg, Signature sig)", "testcase": false, "constructor": false}, {"identifier": "addCertificate", "parameters": "(X509Certificate cert, X509Data data)", "modifiers": "private static", "return": "void", "signature": "void addCertificate(X509Certificate cert, X509Data data)", "full_signature": "private static void addCertificate(X509Certificate cert, X509Data data)", "class_method_signature": "XMLSignatureHandler.addCertificate(X509Certificate cert, X509Data data)", "testcase": false, "constructor": false}, {"identifier": "addIssuerSerial", "parameters": "(X509Certificate cert, X509Data data)", "modifiers": "private static", "return": "void", "signature": "void addIssuerSerial(X509Certificate cert, X509Data data)", "full_signature": "private static void addIssuerSerial(X509Certificate cert, X509Data data)", "class_method_signature": "XMLSignatureHandler.addIssuerSerial(X509Certificate cert, X509Data data)", "testcase": false, "constructor": false}, {"identifier": "checkSignature", "parameters": "(Signature sig, X509Certificate... trustedAnchor)", "modifiers": "static", "return": "int", "signature": "int checkSignature(Signature sig, X509Certificate... trustedAnchor)", "full_signature": "static int checkSignature(Signature sig, X509Certificate... trustedAnchor)", "class_method_signature": "XMLSignatureHandler.checkSignature(Signature sig, X509Certificate... trustedAnchor)", "testcase": false, "constructor": false}, {"identifier": "XMLSignatureHandler", "parameters": "()", "modifiers": "private", "return": "", "signature": " XMLSignatureHandler()", "full_signature": "private  XMLSignatureHandler()", "class_method_signature": "XMLSignatureHandler.XMLSignatureHandler()", "testcase": false, "constructor": true}], "file": "eidas-starterkit/src/main/java/de/governikus/eumw/eidasstarterkit/XMLSignatureHandler.java"}, "focal_method": {"identifier": "addSignature", "parameters": "(SignableXMLObject signable,\n                                  PrivateKey key,\n                                  X509Certificate cert,\n                                  SigEntryType type,\n                                  String sigDigestAlg)", "modifiers": "static", "return": "void", "body": "static void addSignature(SignableXMLObject signable,\n                                  PrivateKey key,\n                                  X509Certificate cert,\n                                  SigEntryType type,\n                                  String sigDigestAlg)\n    throws CertificateEncodingException\n  {\n    if (type == SigEntryType.NONE)\n    {\n      return;\n    }\n\n    if (sigDigestAlg == null)\n    {\n      throw new IllegalArgumentException(\"Signature Digest Algorithm must not be null.\");\n    }\n\n    Signature sig = new SignatureBuilder().buildObject();\n    BasicX509Credential credential = new BasicX509Credential(cert);\n    credential.setPrivateKey(key);\n    sig.setSigningCredential(credential);\n    String keyAlg = key.getAlgorithm();\n\n    if (\"EC\".equalsIgnoreCase(keyAlg) || \"ECDSA\".equalsIgnoreCase(keyAlg))\n    {\n      checkForECSignatures(sigDigestAlg, sig);\n    }\n    else if (\"RSA\".equalsIgnoreCase(keyAlg))\n    {\n      checkForRSASignatures(sigDigestAlg, sig);\n    }\n    else if (\"DSA\".equalsIgnoreCase(keyAlg))\n    {\n      checkForDSASignatures(sigDigestAlg, sig);\n    }\n    else\n    {\n      throw new IllegalArgumentException(\"Unsupported key algorithm \" + keyAlg\n                                         + \", use RSA, DSA, ECDSA or EC\");\n    }\n    sig.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);\n    KeyInfo keyInfo = new KeyInfoBuilder().buildObject();\n    X509Data x509Data = new X509DataBuilder().buildObject();\n    if (type == SigEntryType.CERTIFICATE)\n    {\n      addCertificate(cert, x509Data);\n    }\n    else if (type == SigEntryType.ISSUERSERIAL)\n    {\n      addIssuerSerial(cert, x509Data);\n    }\n    keyInfo.getX509Datas().add(x509Data);\n    sig.setKeyInfo(keyInfo);\n    signable.setSignature(sig);\n\n    if (\"SHA256\".equals(sigDigestAlg) || \"SHA256-PSS\".equals(sigDigestAlg))\n    {\n      ((SAMLObjectContentReference)sig.getContentReferences()\n                                      .get(0)).setDigestAlgorithm(EncryptionConstants.ALGO_ID_DIGEST_SHA256);\n    }\n  }", "signature": "void addSignature(SignableXMLObject signable,\n                                  PrivateKey key,\n                                  X509Certificate cert,\n                                  SigEntryType type,\n                                  String sigDigestAlg)", "full_signature": "static void addSignature(SignableXMLObject signable,\n                                  PrivateKey key,\n                                  X509Certificate cert,\n                                  SigEntryType type,\n                                  String sigDigestAlg)", "class_method_signature": "XMLSignatureHandler.addSignature(SignableXMLObject signable,\n                                  PrivateKey key,\n                                  X509Certificate cert,\n                                  SigEntryType type,\n                                  String sigDigestAlg)", "testcase": false, "constructor": false, "invocations": ["buildObject", "setPrivateKey", "setSigningCredential", "getAlgorithm", "equalsIgnoreCase", "equalsIgnoreCase", "checkForECSignatures", "equalsIgnoreCase", "checkForRSASignatures", "equalsIgnoreCase", "checkForDSASignatures", "setCanonicalizationAlgorithm", "buildObject", "buildObject", "addCertificate", "addIssuerSerial", "add", "getX509Datas", "setKeyInfo", "setSignature", "equals", "equals", "setDigestAlgorithm", "get", "getContentReferences"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}