{"test_class": {"identifier": "PerReceiverActorSynchronizationReceiverCreatorTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IReceiverObjectListener listenerMock;", "modifier": "private", "type": "IReceiverObjectListener", "declarator": "listenerMock", "var_name": "listenerMock"}, {"original_string": "private IReceiverObjectCreator creatorMock;", "modifier": "private", "type": "IReceiverObjectCreator", "declarator": "creatorMock", "var_name": "creatorMock"}, {"original_string": "private IMessageReceiver[] receiverMocks;", "modifier": "private", "type": "IMessageReceiver[]", "declarator": "receiverMocks", "var_name": "receiverMocks"}, {"original_string": "private IResolveDependencyStrategy actorReceiverResolutionStrategy;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "actorReceiverResolutionStrategy", "var_name": "actorReceiverResolutionStrategy"}, {"original_string": "private IObject filterConfig, objectConfig, context;", "modifier": "private", "type": "IObject", "declarator": "filterConfig", "var_name": "filterConfig"}], "file": "CoreFeatures/MessageProcessing/ObjectCreationStrategies/src/test/java/info/smart_tools/smartactors/message_processing/object_creation_strategies/PerReceiverActorSynchronizationReceiverCreatorTest.java"}, "test_case": {"identifier": "Should_throwWhenActorReceiverCreationStrategyThrows", "parameters": "()", "modifiers": "@Test(expected = ReceiverObjectListenerException.class) public", "return": "void", "body": "@Test(expected = ReceiverObjectListenerException.class)\n    public void Should_throwWhenActorReceiverCreationStrategyThrows()\n            throws Exception {\n        when(actorReceiverResolutionStrategy.resolve(same(receiverMocks[0]))).thenThrow(ResolveDependencyStrategyException.class);\n\n        IReceiverObjectCreator creator = new PerReceiverActorSynchronizationReceiverCreator(creatorMock, filterConfig, objectConfig);\n\n        creator.create(listenerMock, objectConfig, context);\n\n        ArgumentCaptor<IReceiverObjectListener> listenerCaptor = ArgumentCaptor.forClass(IReceiverObjectListener.class);\n        verify(creatorMock).create(listenerCaptor.capture(), same(objectConfig), same(context));\n\n        listenerCaptor.getValue().acceptItem(\"idx\", receiverMocks[0]);\n    }", "signature": "void Should_throwWhenActorReceiverCreationStrategyThrows()", "full_signature": "@Test(expected = ReceiverObjectListenerException.class) public void Should_throwWhenActorReceiverCreationStrategyThrows()", "class_method_signature": "PerReceiverActorSynchronizationReceiverCreatorTest.Should_throwWhenActorReceiverCreationStrategyThrows()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "resolve", "same", "create", "forClass", "create", "verify", "capture", "same", "same", "acceptItem", "getValue"]}, "focal_class": {"identifier": "PerReceiverActorSynchronizationReceiverCreator", "superclass": "extends BasicIntermediateReceiverObjectCreator", "interfaces": "", "fields": [], "methods": [{"identifier": "PerReceiverActorSynchronizationReceiverCreator", "parameters": "(IReceiverObjectCreator underlyingObjectCreator, IObject filterConfig, IObject objectConfig)", "modifiers": "public", "return": "", "signature": " PerReceiverActorSynchronizationReceiverCreator(IReceiverObjectCreator underlyingObjectCreator, IObject filterConfig, IObject objectConfig)", "full_signature": "public  PerReceiverActorSynchronizationReceiverCreator(IReceiverObjectCreator underlyingObjectCreator, IObject filterConfig, IObject objectConfig)", "class_method_signature": "PerReceiverActorSynchronizationReceiverCreator.PerReceiverActorSynchronizationReceiverCreator(IReceiverObjectCreator underlyingObjectCreator, IObject filterConfig, IObject objectConfig)", "testcase": false, "constructor": true}, {"identifier": "acceptItem", "parameters": "(Object itemId, Object item)", "modifiers": "@Override public", "return": "void", "signature": "void acceptItem(Object itemId, Object item)", "full_signature": "@Override public void acceptItem(Object itemId, Object item)", "class_method_signature": "PerReceiverActorSynchronizationReceiverCreator.acceptItem(Object itemId, Object item)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ObjectCreationStrategies/src/main/java/info/smart_tools/smartactors/message_processing/object_creation_strategies/PerReceiverActorSynchronizationReceiverCreator.java"}, "focal_method": {"identifier": "acceptItem", "parameters": "(Object itemId, Object item)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void acceptItem(Object itemId, Object item)\n            throws ReceiverObjectListenerException, InvalidReceiverPipelineException, InvalidArgumentException {\n        if (null == item) {\n            throw new InvalidArgumentException(\"Item is null.\");\n        }\n\n        IMessageReceiver receiverItem;\n\n        try {\n            receiverItem = (IMessageReceiver) item;\n        } catch (ClassCastException e) {\n            throw new InvalidReceiverPipelineException(\"Underlying item of actor synchronization receiver is not a receiver.\", e);\n        }\n\n        try {\n            IMessageReceiver synchronizedReceiver = IOC.resolve(Keys.getOrAdd(\"create actor synchronization receiver\"), receiverItem);\n            getListener().acceptItem(itemId, synchronizedReceiver);\n        } catch (ResolutionException e) {\n            throw new ReceiverObjectListenerException(e);\n        }\n    }", "signature": "void acceptItem(Object itemId, Object item)", "full_signature": "@Override public void acceptItem(Object itemId, Object item)", "class_method_signature": "PerReceiverActorSynchronizationReceiverCreator.acceptItem(Object itemId, Object item)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "acceptItem", "getListener"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}