{"test_class": {"identifier": "LocalTransactionContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private OperationLimiter limiter;", "modifier": "@Mock\n    private", "type": "OperationLimiter", "declarator": "limiter", "var_name": "limiter"}, {"original_string": "@Mock\n    private DOMStoreReadWriteTransaction readWriteTransaction;", "modifier": "@Mock\n    private", "type": "DOMStoreReadWriteTransaction", "declarator": "readWriteTransaction", "var_name": "readWriteTransaction"}, {"original_string": "@Mock\n    private LocalTransactionReadySupport mockReadySupport;", "modifier": "@Mock\n    private", "type": "LocalTransactionReadySupport", "declarator": "mockReadySupport", "var_name": "mockReadySupport"}, {"original_string": "private LocalTransactionContext localTransactionContext;", "modifier": "private", "type": "LocalTransactionContext", "declarator": "localTransactionContext", "var_name": "localTransactionContext"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/LocalTransactionContextTest.java"}, "test_case": {"identifier": "testReadyWithMergeError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadyWithMergeError() {\n        YangInstanceIdentifier yangInstanceIdentifier = YangInstanceIdentifier.empty();\n        NormalizedNode<?, ?> normalizedNode = mock(NormalizedNode.class);\n        RuntimeException error = new RuntimeException(\"mock\");\n        doThrow(error).when(readWriteTransaction).merge(yangInstanceIdentifier, normalizedNode);\n\n        localTransactionContext.executeMerge(yangInstanceIdentifier, normalizedNode, null);\n        localTransactionContext.executeMerge(yangInstanceIdentifier, normalizedNode, null);\n\n        verify(readWriteTransaction).merge(yangInstanceIdentifier, normalizedNode);\n\n        doReadyWithExpectedError(error);\n    }", "signature": "void testReadyWithMergeError()", "full_signature": "@Test public void testReadyWithMergeError()", "class_method_signature": "LocalTransactionContextTest.testReadyWithMergeError()", "testcase": true, "constructor": false, "invocations": ["empty", "mock", "merge", "when", "doThrow", "executeMerge", "executeMerge", "merge", "verify", "doReadyWithExpectedError"]}, "focal_class": {"identifier": "LocalTransactionContext", "superclass": "extends AbstractTransactionContext", "interfaces": "", "fields": [{"original_string": "private final DOMStoreTransaction txDelegate;", "modifier": "private final", "type": "DOMStoreTransaction", "declarator": "txDelegate", "var_name": "txDelegate"}, {"original_string": "private final LocalTransactionReadySupport readySupport;", "modifier": "private final", "type": "LocalTransactionReadySupport", "declarator": "readySupport", "var_name": "readySupport"}, {"original_string": "private Exception operationError;", "modifier": "private", "type": "Exception", "declarator": "operationError", "var_name": "operationError"}], "methods": [{"identifier": "LocalTransactionContext", "parameters": "(final DOMStoreTransaction txDelegate, final TransactionIdentifier identifier,\n            final LocalTransactionReadySupport readySupport)", "modifiers": "", "return": "", "signature": " LocalTransactionContext(final DOMStoreTransaction txDelegate, final TransactionIdentifier identifier,\n            final LocalTransactionReadySupport readySupport)", "full_signature": "  LocalTransactionContext(final DOMStoreTransaction txDelegate, final TransactionIdentifier identifier,\n            final LocalTransactionReadySupport readySupport)", "class_method_signature": "LocalTransactionContext.LocalTransactionContext(final DOMStoreTransaction txDelegate, final TransactionIdentifier identifier,\n            final LocalTransactionReadySupport readySupport)", "testcase": false, "constructor": true}, {"identifier": "getWriteDelegate", "parameters": "()", "modifiers": "protected abstract", "return": "DOMStoreWriteTransaction", "signature": "DOMStoreWriteTransaction getWriteDelegate()", "full_signature": "protected abstract DOMStoreWriteTransaction getWriteDelegate()", "class_method_signature": "LocalTransactionContext.getWriteDelegate()", "testcase": false, "constructor": false}, {"identifier": "getReadDelegate", "parameters": "()", "modifiers": "protected abstract", "return": "DOMStoreReadTransaction", "signature": "DOMStoreReadTransaction getReadDelegate()", "full_signature": "protected abstract DOMStoreReadTransaction getReadDelegate()", "class_method_signature": "LocalTransactionContext.getReadDelegate()", "testcase": false, "constructor": false}, {"identifier": "executeModification", "parameters": "(Consumer<DOMStoreWriteTransaction> consumer)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void executeModification(Consumer<DOMStoreWriteTransaction> consumer)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void executeModification(Consumer<DOMStoreWriteTransaction> consumer)", "class_method_signature": "LocalTransactionContext.executeModification(Consumer<DOMStoreWriteTransaction> consumer)", "testcase": false, "constructor": false}, {"identifier": "executeDelete", "parameters": "(final YangInstanceIdentifier path, final Boolean havePermit)", "modifiers": "@Override public", "return": "void", "signature": "void executeDelete(final YangInstanceIdentifier path, final Boolean havePermit)", "full_signature": "@Override public void executeDelete(final YangInstanceIdentifier path, final Boolean havePermit)", "class_method_signature": "LocalTransactionContext.executeDelete(final YangInstanceIdentifier path, final Boolean havePermit)", "testcase": false, "constructor": false}, {"identifier": "executeMerge", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit)", "modifiers": "@Override public", "return": "void", "signature": "void executeMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit)", "full_signature": "@Override public void executeMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit)", "class_method_signature": "LocalTransactionContext.executeMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit)", "testcase": false, "constructor": false}, {"identifier": "executeWrite", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit)", "modifiers": "@Override public", "return": "void", "signature": "void executeWrite(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit)", "full_signature": "@Override public void executeWrite(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit)", "class_method_signature": "LocalTransactionContext.executeWrite(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit)", "testcase": false, "constructor": false}, {"identifier": "executeRead", "parameters": "(final AbstractRead<T> readCmd, final SettableFuture<T> proxyFuture,\n            final Boolean havePermit)", "modifiers": "@Override public", "return": "void", "signature": "void executeRead(final AbstractRead<T> readCmd, final SettableFuture<T> proxyFuture,\n            final Boolean havePermit)", "full_signature": "@Override public void executeRead(final AbstractRead<T> readCmd, final SettableFuture<T> proxyFuture,\n            final Boolean havePermit)", "class_method_signature": "LocalTransactionContext.executeRead(final AbstractRead<T> readCmd, final SettableFuture<T> proxyFuture,\n            final Boolean havePermit)", "testcase": false, "constructor": false}, {"identifier": "ready", "parameters": "()", "modifiers": "private", "return": "LocalThreePhaseCommitCohort", "signature": "LocalThreePhaseCommitCohort ready()", "full_signature": "private LocalThreePhaseCommitCohort ready()", "class_method_signature": "LocalTransactionContext.ready()", "testcase": false, "constructor": false}, {"identifier": "readyTransaction", "parameters": "(final Boolean havePermit,\n            final Optional<SortedSet<String>> participatingShardNames)", "modifiers": "@Override public", "return": "Future<ActorSelection>", "signature": "Future<ActorSelection> readyTransaction(final Boolean havePermit,\n            final Optional<SortedSet<String>> participatingShardNames)", "full_signature": "@Override public Future<ActorSelection> readyTransaction(final Boolean havePermit,\n            final Optional<SortedSet<String>> participatingShardNames)", "class_method_signature": "LocalTransactionContext.readyTransaction(final Boolean havePermit,\n            final Optional<SortedSet<String>> participatingShardNames)", "testcase": false, "constructor": false}, {"identifier": "directCommit", "parameters": "(final Boolean havePermit)", "modifiers": "@Override public", "return": "Future<Object>", "signature": "Future<Object> directCommit(final Boolean havePermit)", "full_signature": "@Override public Future<Object> directCommit(final Boolean havePermit)", "class_method_signature": "LocalTransactionContext.directCommit(final Boolean havePermit)", "testcase": false, "constructor": false}, {"identifier": "closeTransaction", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void closeTransaction()", "full_signature": "@Override public void closeTransaction()", "class_method_signature": "LocalTransactionContext.closeTransaction()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/LocalTransactionContext.java"}, "focal_method": {"identifier": "executeMerge", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void executeMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit) {\n        executeModification(transaction -> transaction.merge(path, data));\n    }", "signature": "void executeMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit)", "full_signature": "@Override public void executeMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit)", "class_method_signature": "LocalTransactionContext.executeMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data,\n            final Boolean havePermit)", "testcase": false, "constructor": false, "invocations": ["executeModification", "merge"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}