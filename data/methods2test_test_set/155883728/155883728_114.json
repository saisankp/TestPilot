{"test_class": {"identifier": "WebsterChecklistTargetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final File testOutDir = new File(\"target/test-out/WebsterChecklistTargetTest\");", "modifier": "final", "type": "File", "declarator": "testOutDir = new File(\"target/test-out/WebsterChecklistTargetTest\")", "var_name": "testOutDir"}], "file": "webster/src/test/java/net/adamcin/oakpal/webster/targets/WebsterChecklistTargetTest.java"}, "test_case": {"identifier": "testFromJson_scopePaths", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromJson_scopePaths() throws Exception {\n        final File targetFile = new File(testOutDir, \"testFromJson_scopePaths.json\");\n        if (targetFile.exists()) {\n            targetFile.delete();\n        }\n        OakMachine.Builder emptyOak = TestUtil.fromPlan(obj().get());\n        WebsterChecklistTarget target = WebsterChecklistTarget.fromJson(targetFile, obj().get());\n        emptyOak.build().initAndInspect(target::perform);\n\n        final List<JcrNs> nsList = Arrays.asList(JcrNs.create(OakMachine.NS_PREFIX_OAKPAL, OakMachine.NS_URI_OAKPAL));\n        OakMachine.Builder twoRootsOak = TestUtil.fromPlan(obj()\n                .key(\"forcedRoots\", arr()\n                        .val(new ForcedRoot().withPath(\"/foo1\"))\n                        .val(new ForcedRoot().withPath(\"/foo2\"))\n                )\n                .get());\n        WebsterChecklistTarget twoRootsTarget = WebsterChecklistTarget.fromJson(targetFile, obj()\n                //.key(\"jcrNamespaces\", nsList)\n                .key(\"selectors\", arr()\n                        .val(key(\"type\", \"path\").key(\"args\", arr(\"/foo1\", \"/foo2\"))))\n                .key(\"scopePaths\", arr(new Rule(RuleType.INCLUDE, Pattern.compile(\"/foo2\"))))\n                .key(\"nodeTypeFilters\", arr(new Rule(RuleType.EXCLUDE, Pattern.compile(OakMachine.NS_PREFIX_OAKPAL + \":.*\"))))\n                .get());\n        twoRootsOak.build().adminInitAndInspect(twoRootsTarget::perform);\n        assertJsonFile(targetFile, json -> {\n            final Checklist checklist = Checklist.fromJson(\"testFromJson\", null, json);\n            assertEquals(\"expect 1 roots\", 1, checklist.getForcedRoots().size());\n            assertEquals(\"expect root path\", \"/foo2\", checklist.getForcedRoots().get(0).getPath());\n            assertNull(\"expect root null primaryType\", checklist.getForcedRoots().get(0).getPrimaryType());\n        });\n\n        OakMachine.Builder twoTypedRootsOak = TestUtil.fromPlan(obj()\n                .key(\"forcedRoots\", arr()\n                        .val(new ForcedRoot().withPath(\"/foo1\").withPrimaryType(\"nt:folder\"))\n                        .val(new ForcedRoot().withPath(\"/foo2\").withPrimaryType(\"nt:folder\"))\n                )\n                .get());\n        WebsterChecklistTarget twoTypedRootsTarget = WebsterChecklistTarget.fromJson(targetFile, obj()\n                .key(\"jcrNamespaces\", nsList)\n                .key(\"selectors\", arr()\n                        .val(key(\"type\", \"path\").key(\"args\", arr(\"/foo1\", \"/foo2\"))))\n                .key(\"scopePaths\", arr(new Rule(RuleType.INCLUDE, Pattern.compile(\"/foo1\"))))\n                .key(\"nodeTypeFilters\", arr(new Rule(RuleType.EXCLUDE, Pattern.compile(\"oakpaltmp:.*\"))))\n                .key(\"updatePolicy\", \"replace\")\n                .get());\n        twoTypedRootsOak.build().adminInitAndInspect(twoTypedRootsTarget::perform);\n        assertJsonFile(targetFile, json -> {\n            final Checklist checklist = Checklist.fromJson(\"testFromJson\", null, json);\n            assertEquals(\"expect 1 roots\", 2, checklist.getForcedRoots().size());\n            assertEquals(\"expect root path\", \"/foo1\", checklist.getForcedRoots().get(0).getPath());\n            assertEquals(\"expect root primaryType of nt:folder\", \"nt:folder\",\n                    checklist.getForcedRoots().get(0).getPrimaryType());\n        });\n\n    }", "signature": "void testFromJson_scopePaths()", "full_signature": "@Test public void testFromJson_scopePaths()", "class_method_signature": "WebsterChecklistTargetTest.testFromJson_scopePaths()", "testcase": true, "constructor": false, "invocations": ["exists", "delete", "fromPlan", "get", "obj", "fromJson", "get", "obj", "initAndInspect", "build", "asList", "create", "fromPlan", "get", "key", "obj", "val", "val", "arr", "withPath", "withPath", "fromJson", "get", "key", "key", "key", "obj", "val", "arr", "key", "key", "arr", "arr", "compile", "arr", "compile", "adminInitAndInspect", "build", "assertJsonFile", "fromJson", "assertEquals", "size", "getForcedRoots", "assertEquals", "getPath", "get", "getForcedRoots", "assertNull", "getPrimaryType", "get", "getForcedRoots", "fromPlan", "get", "key", "obj", "val", "val", "arr", "withPrimaryType", "withPath", "withPrimaryType", "withPath", "fromJson", "get", "key", "key", "key", "key", "key", "obj", "val", "arr", "key", "key", "arr", "arr", "compile", "arr", "compile", "adminInitAndInspect", "build", "assertJsonFile", "fromJson", "assertEquals", "size", "getForcedRoots", "assertEquals", "getPath", "get", "getForcedRoots", "assertEquals", "getPrimaryType", "get", "getForcedRoots"]}, "focal_class": {"identifier": "WebsterChecklistTarget", "superclass": "", "interfaces": "implements WebsterTarget", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(WebsterChecklistTarget.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(WebsterChecklistTarget.class)", "var_name": "LOGGER"}, {"original_string": "static final String KEY_TYPE = \"type\";", "modifier": "static final", "type": "String", "declarator": "KEY_TYPE = \"type\"", "var_name": "KEY_TYPE"}, {"original_string": "static final String KEY_ARGS = \"args\";", "modifier": "static final", "type": "String", "declarator": "KEY_ARGS = \"args\"", "var_name": "KEY_ARGS"}, {"original_string": "static final String COMPACT_KEY_BY_NODETYPES = \"selectNodeTypes\";", "modifier": "static final", "type": "String", "declarator": "COMPACT_KEY_BY_NODETYPES = \"selectNodeTypes\"", "var_name": "COMPACT_KEY_BY_NODETYPES"}, {"original_string": "static final String COMPACT_KEY_BY_PATHS = \"selectPaths\";", "modifier": "static final", "type": "String", "declarator": "COMPACT_KEY_BY_PATHS = \"selectPaths\"", "var_name": "COMPACT_KEY_BY_PATHS"}, {"original_string": "static final String COMPACT_KEY_BY_QUERY = \"selectQuery\";", "modifier": "static final", "type": "String", "declarator": "COMPACT_KEY_BY_QUERY = \"selectQuery\"", "var_name": "COMPACT_KEY_BY_QUERY"}, {"original_string": "static final String KEY_SELECTORS = \"selectors\";", "modifier": "static final", "type": "String", "declarator": "KEY_SELECTORS = \"selectors\"", "var_name": "KEY_SELECTORS"}, {"original_string": "static final String KEY_SCOPE_PATHS = \"scopePaths\";", "modifier": "static final", "type": "String", "declarator": "KEY_SCOPE_PATHS = \"scopePaths\"", "var_name": "KEY_SCOPE_PATHS"}, {"original_string": "static final String KEY_NODE_TYPE_FILTERS = \"nodeTypeFilters\";", "modifier": "static final", "type": "String", "declarator": "KEY_NODE_TYPE_FILTERS = \"nodeTypeFilters\"", "var_name": "KEY_NODE_TYPE_FILTERS"}, {"original_string": "static final String KEY_JCR_NAMESPACES = \"jcrNamespaces\";", "modifier": "static final", "type": "String", "declarator": "KEY_JCR_NAMESPACES = \"jcrNamespaces\"", "var_name": "KEY_JCR_NAMESPACES"}, {"original_string": "static final String KEY_UPDATE_POLICY = \"updatePolicy\";", "modifier": "static final", "type": "String", "declarator": "KEY_UPDATE_POLICY = \"updatePolicy\"", "var_name": "KEY_UPDATE_POLICY"}, {"original_string": "static final String KEY_EXPORT_NODETYPES = \"exportNodeTypes\";", "modifier": "static final", "type": "String", "declarator": "KEY_EXPORT_NODETYPES = \"exportNodeTypes\"", "var_name": "KEY_EXPORT_NODETYPES"}, {"original_string": "private final File checklist;", "modifier": "private final", "type": "File", "declarator": "checklist", "var_name": "checklist"}, {"original_string": "private final ChecklistExporter exporter;", "modifier": "private final", "type": "ChecklistExporter", "declarator": "exporter", "var_name": "exporter"}, {"original_string": "private final ChecklistExporter.ForcedRootUpdatePolicy updatePolicy;", "modifier": "private final", "type": "ChecklistExporter.ForcedRootUpdatePolicy", "declarator": "updatePolicy", "var_name": "updatePolicy"}], "methods": [{"identifier": "selectorFromJson", "parameters": "(final JsonObject json)", "modifiers": "static", "return": "Selector", "signature": "Selector selectorFromJson(final JsonObject json)", "full_signature": "static Selector selectorFromJson(final JsonObject json)", "class_method_signature": "WebsterChecklistTarget.selectorFromJson(final JsonObject json)", "testcase": false, "constructor": false}, {"identifier": "selectorsFromConfigCompactForm", "parameters": "(final JsonObject json)", "modifiers": "static", "return": "List<Selector>", "signature": "List<Selector> selectorsFromConfigCompactForm(final JsonObject json)", "full_signature": "static List<Selector> selectorsFromConfigCompactForm(final JsonObject json)", "class_method_signature": "WebsterChecklistTarget.selectorsFromConfigCompactForm(final JsonObject json)", "testcase": false, "constructor": false}, {"identifier": "WebsterChecklistTarget", "parameters": "(final File checklist,\n                                   final ChecklistExporter exporter,\n                                   final ChecklistExporter.ForcedRootUpdatePolicy updatePolicy)", "modifiers": "private", "return": "", "signature": " WebsterChecklistTarget(final File checklist,\n                                   final ChecklistExporter exporter,\n                                   final ChecklistExporter.ForcedRootUpdatePolicy updatePolicy)", "full_signature": "private  WebsterChecklistTarget(final File checklist,\n                                   final ChecklistExporter exporter,\n                                   final ChecklistExporter.ForcedRootUpdatePolicy updatePolicy)", "class_method_signature": "WebsterChecklistTarget.WebsterChecklistTarget(final File checklist,\n                                   final ChecklistExporter exporter,\n                                   final ChecklistExporter.ForcedRootUpdatePolicy updatePolicy)", "testcase": false, "constructor": true}, {"identifier": "perform", "parameters": "(final Session session)", "modifiers": "@Override public", "return": "void", "signature": "void perform(final Session session)", "full_signature": "@Override public void perform(final Session session)", "class_method_signature": "WebsterChecklistTarget.perform(final Session session)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final File target, final JsonObject config)", "modifiers": "static", "return": "WebsterChecklistTarget", "signature": "WebsterChecklistTarget fromJson(final File target, final JsonObject config)", "full_signature": "static WebsterChecklistTarget fromJson(final File target, final JsonObject config)", "class_method_signature": "WebsterChecklistTarget.fromJson(final File target, final JsonObject config)", "testcase": false, "constructor": false}], "file": "webster/src/main/java/net/adamcin/oakpal/webster/targets/WebsterChecklistTarget.java"}, "focal_method": {"identifier": "fromJson", "parameters": "(final File target, final JsonObject config)", "modifiers": "static", "return": "WebsterChecklistTarget", "body": "static WebsterChecklistTarget fromJson(final File target, final JsonObject config) {\n        LOGGER.debug(\"[fromJson] fromJson: {}\", config.toString());\n        ChecklistExporter.Builder exporter = new ChecklistExporter.Builder();\n        WebsterChecklistTarget.selectorsFromConfigCompactForm(config)\n                .forEach(selector -> selector.selectOnExporter(exporter));\n        if (config.containsKey(KEY_SELECTORS)) {\n            JsonArray ops = config.getJsonArray(KEY_SELECTORS);\n            List<Selector> selectors = JavaxJson.mapArrayOfObjects(ops, WebsterChecklistTarget::selectorFromJson);\n            selectors.forEach(selector -> selector.selectOnExporter(exporter));\n        }\n        if (config.containsKey(KEY_SCOPE_PATHS)) {\n            List<Rule> scopePaths = Rules.fromJsonArray(config.getJsonArray(KEY_SCOPE_PATHS));\n            exporter.withScopePaths(scopePaths);\n        }\n        if (config.containsKey(KEY_NODE_TYPE_FILTERS)) {\n            List<Rule> nodeTypeFilters = Rules.fromJsonArray(config.getJsonArray(KEY_NODE_TYPE_FILTERS));\n            exporter.withNodeTypeFilters(nodeTypeFilters);\n        }\n        if (config.containsKey(KEY_JCR_NAMESPACES)) {\n            List<JcrNs> jcrNsList = JavaxJson.mapArrayOfObjects(config.getJsonArray(KEY_JCR_NAMESPACES),\n                    JcrNs::fromJson);\n            exporter.withJcrNamespaces(jcrNsList);\n        }\n        if (config.containsKey(KEY_EXPORT_NODETYPES)) {\n            List<String> ntList = JavaxJson.mapArrayOfStrings(config.getJsonArray(KEY_EXPORT_NODETYPES));\n            exporter.withExportNodeTypes(ntList);\n        }\n        ChecklistExporter.ForcedRootUpdatePolicy updatePolicy = null;\n        if (config.containsKey(KEY_UPDATE_POLICY)) {\n            updatePolicy = ChecklistExporter.ForcedRootUpdatePolicy.byName(config.getString(KEY_UPDATE_POLICY));\n        }\n        return new WebsterChecklistTarget(target, exporter.build(), updatePolicy);\n    }", "signature": "WebsterChecklistTarget fromJson(final File target, final JsonObject config)", "full_signature": "static WebsterChecklistTarget fromJson(final File target, final JsonObject config)", "class_method_signature": "WebsterChecklistTarget.fromJson(final File target, final JsonObject config)", "testcase": false, "constructor": false, "invocations": ["debug", "toString", "forEach", "selectorsFromConfigCompactForm", "selectOnExporter", "containsKey", "getJsonArray", "mapArrayOfObjects", "forEach", "selectOnExporter", "containsKey", "fromJsonArray", "getJsonArray", "withScopePaths", "containsKey", "fromJsonArray", "getJsonArray", "withNodeTypeFilters", "containsKey", "mapArrayOfObjects", "getJsonArray", "withJcrNamespaces", "containsKey", "mapArrayOfStrings", "getJsonArray", "withExportNodeTypes", "containsKey", "byName", "getString", "build"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}