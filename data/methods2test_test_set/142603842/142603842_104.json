{"test_class": {"identifier": "ErrorListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Captor\n    private ArgumentCaptor<ErrorMessage> argumentCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<ErrorMessage>", "declarator": "argumentCaptor", "var_name": "argumentCaptor"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/service/error/ErrorListenerTest.java"}, "test_case": {"identifier": "should_pass_error_message_to_consumer", "parameters": "(@Mock ErrorMessageConsumer errorMessageConsumer)", "modifiers": "@Test", "return": "void", "body": "@Test\n    void should_pass_error_message_to_consumer(@Mock ErrorMessageConsumer errorMessageConsumer) {\n        // arrange\n        String text = \"error\";\n        ErrorListener errorListener = new ErrorListener(errorMessageConsumer);\n        // act\n        errorListener.onApplicationEvent(new ErrorEvent(this, text));\n        // assert\n        verify(errorMessageConsumer).consumeMessage(argumentCaptor.capture());\n        ErrorMessage capturedMessage = argumentCaptor.getValue();\n        assertThat(capturedMessage.text).isEqualTo(text);\n        assertThat(capturedMessage.id).isNotNull();\n    }", "signature": "void should_pass_error_message_to_consumer(@Mock ErrorMessageConsumer errorMessageConsumer)", "full_signature": "@Test void should_pass_error_message_to_consumer(@Mock ErrorMessageConsumer errorMessageConsumer)", "class_method_signature": "ErrorListenerTest.should_pass_error_message_to_consumer(@Mock ErrorMessageConsumer errorMessageConsumer)", "testcase": true, "constructor": false, "invocations": ["onApplicationEvent", "consumeMessage", "verify", "capture", "getValue", "isEqualTo", "assertThat", "isNotNull", "assertThat"]}, "focal_class": {"identifier": "ErrorListener", "superclass": "", "interfaces": "implements ApplicationListener<ErrorEvent>", "fields": [{"original_string": "private final ErrorMessageConsumer errorMessageConsumer;", "modifier": "private final", "type": "ErrorMessageConsumer", "declarator": "errorMessageConsumer", "var_name": "errorMessageConsumer"}], "methods": [{"identifier": "ErrorListener", "parameters": "(ErrorMessageConsumer errorMessageConsumer)", "modifiers": "public", "return": "", "signature": " ErrorListener(ErrorMessageConsumer errorMessageConsumer)", "full_signature": "public  ErrorListener(ErrorMessageConsumer errorMessageConsumer)", "class_method_signature": "ErrorListener.ErrorListener(ErrorMessageConsumer errorMessageConsumer)", "testcase": false, "constructor": true}, {"identifier": "onApplicationEvent", "parameters": "(ErrorEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onApplicationEvent(ErrorEvent event)", "full_signature": "@Override public void onApplicationEvent(ErrorEvent event)", "class_method_signature": "ErrorListener.onApplicationEvent(ErrorEvent event)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/service/error/ErrorListener.java"}, "focal_method": {"identifier": "onApplicationEvent", "parameters": "(ErrorEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onApplicationEvent(ErrorEvent event) {\n        errorMessageConsumer.consumeMessage(ErrorMessage.of(UUID.randomUUID().toString(), event.message));\n    }", "signature": "void onApplicationEvent(ErrorEvent event)", "full_signature": "@Override public void onApplicationEvent(ErrorEvent event)", "class_method_signature": "ErrorListener.onApplicationEvent(ErrorEvent event)", "testcase": false, "constructor": false, "invocations": ["consumeMessage", "of", "toString", "randomUUID"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}