{"test_class": {"identifier": "SquareRootTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final float DELTA = 0.1f;", "modifier": "private static final", "type": "float", "declarator": "DELTA = 0.1f", "var_name": "DELTA"}, {"original_string": "private SquareRoot squareRoot;", "modifier": "private", "type": "SquareRoot", "declarator": "squareRoot", "var_name": "squareRoot"}], "file": "algs/src/test/java/com/github/pedrovgs/problem4/SquareRootTest.java"}, "test_case": {"identifier": "shouldCalculateNonPerfectSquaresRecursive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldCalculateNonPerfectSquaresRecursive() {\n    float result = squareRoot.calculateSquareRootRecursive(7);\n\n    assertEquals(2.64575f, result, DELTA);\n  }", "signature": "void shouldCalculateNonPerfectSquaresRecursive()", "full_signature": "@Test public void shouldCalculateNonPerfectSquaresRecursive()", "class_method_signature": "SquareRootTest.shouldCalculateNonPerfectSquaresRecursive()", "testcase": true, "constructor": false, "invocations": ["calculateSquareRootRecursive", "assertEquals"]}, "focal_class": {"identifier": "SquareRoot", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DELTA = 0.1;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 0.1", "var_name": "DELTA"}], "methods": [{"identifier": "calculateSquareRootIterative", "parameters": "(int number)", "modifiers": "public", "return": "float", "signature": "float calculateSquareRootIterative(int number)", "full_signature": "public float calculateSquareRootIterative(int number)", "class_method_signature": "SquareRoot.calculateSquareRootIterative(int number)", "testcase": false, "constructor": false}, {"identifier": "calculateSquareRootRecursive", "parameters": "(int number)", "modifiers": "public", "return": "float", "signature": "float calculateSquareRootRecursive(int number)", "full_signature": "public float calculateSquareRootRecursive(int number)", "class_method_signature": "SquareRoot.calculateSquareRootRecursive(int number)", "testcase": false, "constructor": false}, {"identifier": "sqrtRecursiveInner", "parameters": "(float n, float low, float high)", "modifiers": "private static", "return": "float", "signature": "float sqrtRecursiveInner(float n, float low, float high)", "full_signature": "private static float sqrtRecursiveInner(float n, float low, float high)", "class_method_signature": "SquareRoot.sqrtRecursiveInner(float n, float low, float high)", "testcase": false, "constructor": false}, {"identifier": "isGoodResultForSqrt", "parameters": "(float number, float result)", "modifiers": "private static", "return": "boolean", "signature": "boolean isGoodResultForSqrt(float number, float result)", "full_signature": "private static boolean isGoodResultForSqrt(float number, float result)", "class_method_signature": "SquareRoot.isGoodResultForSqrt(float number, float result)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem4/SquareRoot.java"}, "focal_method": {"identifier": "calculateSquareRootRecursive", "parameters": "(int number)", "modifiers": "public", "return": "float", "body": "public float calculateSquareRootRecursive(int number) {\n    return sqrtRecursiveInner(number, 0, number);\n  }", "signature": "float calculateSquareRootRecursive(int number)", "full_signature": "public float calculateSquareRootRecursive(int number)", "class_method_signature": "SquareRoot.calculateSquareRootRecursive(int number)", "testcase": false, "constructor": false, "invocations": ["sqrtRecursiveInner"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}