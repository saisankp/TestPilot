{"test_class": {"identifier": "ConcurrentEvictionListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  CacheTask<Object, Object> cacheTask;", "modifier": "@Mock", "type": "CacheTask<Object, Object>", "declarator": "cacheTask", "var_name": "cacheTask"}, {"original_string": "@Mock\n  BlockingQueue<CacheTask<Object, Object>> cacheTasks;", "modifier": "@Mock", "type": "BlockingQueue<CacheTask<Object, Object>>", "declarator": "cacheTasks", "var_name": "cacheTasks"}, {"original_string": "ConcurrentEvictionListener<Object, Object> asyncEvictionListener;", "modifier": "", "type": "ConcurrentEvictionListener<Object, Object>", "declarator": "asyncEvictionListener", "var_name": "asyncEvictionListener"}], "file": "imcache-core/src/test/java/com/cetsoft/imcache/cache/async/ConcurrentEvictionListenerTest.java"}, "test_case": {"identifier": "init", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void init() throws InterruptedException {\n    doNothing().when(asyncEvictionListener).drainQueue();\n    asyncEvictionListener.init(1000, 3);\n    Thread.sleep(5);\n    verify(asyncEvictionListener, atLeast(1)).drainQueue();\n  }", "signature": "void init()", "full_signature": "@Test public void init()", "class_method_signature": "ConcurrentEvictionListenerTest.init()", "testcase": true, "constructor": false, "invocations": ["drainQueue", "when", "doNothing", "init", "sleep", "drainQueue", "verify", "atLeast"]}, "focal_class": {"identifier": "ConcurrentEvictionListener", "superclass": "extends QueuingEvictionListener<K, V>", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_CONCURRENCY_LEVEL = 3;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_CONCURRENCY_LEVEL = 3", "var_name": "DEFAULT_CONCURRENCY_LEVEL"}, {"original_string": "private static final AtomicInteger NO_OF_EVICTION_DRAINERS = new AtomicInteger();", "modifier": "private static final", "type": "AtomicInteger", "declarator": "NO_OF_EVICTION_DRAINERS = new AtomicInteger()", "var_name": "NO_OF_EVICTION_DRAINERS"}], "methods": [{"identifier": "ConcurrentEvictionListener", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConcurrentEvictionListener()", "full_signature": "public  ConcurrentEvictionListener()", "class_method_signature": "ConcurrentEvictionListener.ConcurrentEvictionListener()", "testcase": false, "constructor": true}, {"identifier": "ConcurrentEvictionListener", "parameters": "(final int batchSize, final int queueSize,\n      final int concurrencyLevel)", "modifiers": "public", "return": "", "signature": " ConcurrentEvictionListener(final int batchSize, final int queueSize,\n      final int concurrencyLevel)", "full_signature": "public  ConcurrentEvictionListener(final int batchSize, final int queueSize,\n      final int concurrencyLevel)", "class_method_signature": "ConcurrentEvictionListener.ConcurrentEvictionListener(final int batchSize, final int queueSize,\n      final int concurrencyLevel)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(int queueSize, int concurrencyLevel)", "modifiers": "protected", "return": "void", "signature": "void init(int queueSize, int concurrencyLevel)", "full_signature": "protected void init(int queueSize, int concurrencyLevel)", "class_method_signature": "ConcurrentEvictionListener.init(int queueSize, int concurrencyLevel)", "testcase": false, "constructor": false}], "file": "imcache-core/src/main/java/com/cetsoft/imcache/cache/async/ConcurrentEvictionListener.java"}, "focal_method": {"identifier": "init", "parameters": "(int queueSize, int concurrencyLevel)", "modifiers": "protected", "return": "void", "body": "protected void init(int queueSize, int concurrencyLevel) {\n    cacheTasks = new ArrayBlockingQueue<>(queueSize);\n    final ExecutorService drainerService = Executors.newFixedThreadPool(concurrencyLevel,\n        runnable -> ThreadUtils\n            .createDaemonThread(runnable, \"imcache:concurrentAsyncEvictionDrainer(thread=\"\n                + NO_OF_EVICTION_DRAINERS.incrementAndGet() + \")\"));\n    // Creates runnables to drain cache task queue constantly.\n    for (int i = 0; i < concurrencyLevel; i++) {\n      drainerService.execute(() -> {\n        while (true) {\n          drainQueue();\n        }\n      });\n    }\n  }", "signature": "void init(int queueSize, int concurrencyLevel)", "full_signature": "protected void init(int queueSize, int concurrencyLevel)", "class_method_signature": "ConcurrentEvictionListener.init(int queueSize, int concurrencyLevel)", "testcase": false, "constructor": false, "invocations": ["newFixedThreadPool", "createDaemonThread", "incrementAndGet", "execute", "drainQueue"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}