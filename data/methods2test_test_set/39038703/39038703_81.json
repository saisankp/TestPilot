{"test_class": {"identifier": "PasswordHashTest", "superclass": "extends AbstractDSpaceTest", "interfaces": "", "fields": [], "file": "dspace-api/src/test/java/org/dspace/eperson/PasswordHashTest.java"}, "test_case": {"identifier": "testMatches", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMatches()\n            throws NoSuchAlgorithmException\n    {\n        System.out.println(\"matches\");\n        final String secret = \"Clark Kent is Superman\";\n\n        // Test old 1-trip MD5 hash\n        MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n        PasswordHash hash = new PasswordHash(null, null, digest.digest(secret.getBytes()));\n        boolean result = hash.matches(secret);\n        assertTrue(\"Old unsalted 1-trip MD5 hash\", result);\n\n        // 3-argument form:  see constructor tests\n    }", "signature": "void testMatches()", "full_signature": "@Test public void testMatches()", "class_method_signature": "PasswordHashTest.testMatches()", "testcase": true, "constructor": false, "invocations": ["println", "getInstance", "digest", "getBytes", "matches", "assertTrue"]}, "focal_class": {"identifier": "PasswordHash", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(PasswordHash.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PasswordHash.class)", "var_name": "log"}, {"original_string": "private static final ConfigurationService config\n            = DSpaceServicesFactory.getInstance().getConfigurationService();", "modifier": "private static final", "type": "ConfigurationService", "declarator": "config\n            = DSpaceServicesFactory.getInstance().getConfigurationService()", "var_name": "config"}, {"original_string": "private static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "private static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}, {"original_string": "private static final String DEFAULT_DIGEST_ALGORITHM = \"SHA-512\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_DIGEST_ALGORITHM = \"SHA-512\"", "var_name": "DEFAULT_DIGEST_ALGORITHM"}, {"original_string": "private static final String ALGORITHM_PROPERTY = \"authentication-password.digestAlgorithm\";", "modifier": "private static final", "type": "String", "declarator": "ALGORITHM_PROPERTY = \"authentication-password.digestAlgorithm\"", "var_name": "ALGORITHM_PROPERTY"}, {"original_string": "private static final int SALT_BYTES = 128/8;", "modifier": "private static final", "type": "int", "declarator": "SALT_BYTES = 128/8", "var_name": "SALT_BYTES"}, {"original_string": "private static final int HASH_ROUNDS = 1024;", "modifier": "private static final", "type": "int", "declarator": "HASH_ROUNDS = 1024", "var_name": "HASH_ROUNDS"}, {"original_string": "private static final int SEED_BYTES = 64;", "modifier": "private static final", "type": "int", "declarator": "SEED_BYTES = 64", "var_name": "SEED_BYTES"}, {"original_string": "private static final int RESEED_INTERVAL = 100;", "modifier": "private static final", "type": "int", "declarator": "RESEED_INTERVAL = 100", "var_name": "RESEED_INTERVAL"}, {"original_string": "private static SecureRandom rng = null;", "modifier": "private static", "type": "SecureRandom", "declarator": "rng = null", "var_name": "rng"}, {"original_string": "private static int rngUses;", "modifier": "private static", "type": "int", "declarator": "rngUses", "var_name": "rngUses"}, {"original_string": "private String algorithm;", "modifier": "private", "type": "String", "declarator": "algorithm", "var_name": "algorithm"}, {"original_string": "private byte[] salt;", "modifier": "private", "type": "byte[]", "declarator": "salt", "var_name": "salt"}, {"original_string": "private byte[] hash;", "modifier": "private", "type": "byte[]", "declarator": "hash", "var_name": "hash"}], "methods": [{"identifier": "PasswordHash", "parameters": "()", "modifiers": "private", "return": "", "signature": " PasswordHash()", "full_signature": "private  PasswordHash()", "class_method_signature": "PasswordHash.PasswordHash()", "testcase": false, "constructor": true}, {"identifier": "PasswordHash", "parameters": "(String algorithm, byte[] salt, byte[] hash)", "modifiers": "public", "return": "", "signature": " PasswordHash(String algorithm, byte[] salt, byte[] hash)", "full_signature": "public  PasswordHash(String algorithm, byte[] salt, byte[] hash)", "class_method_signature": "PasswordHash.PasswordHash(String algorithm, byte[] salt, byte[] hash)", "testcase": false, "constructor": true}, {"identifier": "PasswordHash", "parameters": "(String algorithm, String salt, String hash)", "modifiers": "public", "return": "", "signature": " PasswordHash(String algorithm, String salt, String hash)", "full_signature": "public  PasswordHash(String algorithm, String salt, String hash)", "class_method_signature": "PasswordHash.PasswordHash(String algorithm, String salt, String hash)", "testcase": false, "constructor": true}, {"identifier": "PasswordHash", "parameters": "(String password)", "modifiers": "public", "return": "", "signature": " PasswordHash(String password)", "full_signature": "public  PasswordHash(String password)", "class_method_signature": "PasswordHash.PasswordHash(String password)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(String secret)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(String secret)", "full_signature": "public boolean matches(String secret)", "class_method_signature": "PasswordHash.matches(String secret)", "testcase": false, "constructor": false}, {"identifier": "getHash", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getHash()", "full_signature": "public byte[] getHash()", "class_method_signature": "PasswordHash.getHash()", "testcase": false, "constructor": false}, {"identifier": "getHashString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHashString()", "full_signature": "public String getHashString()", "class_method_signature": "PasswordHash.getHashString()", "testcase": false, "constructor": false}, {"identifier": "getSalt", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getSalt()", "full_signature": "public byte[] getSalt()", "class_method_signature": "PasswordHash.getSalt()", "testcase": false, "constructor": false}, {"identifier": "getSaltString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSaltString()", "full_signature": "public String getSaltString()", "class_method_signature": "PasswordHash.getSaltString()", "testcase": false, "constructor": false}, {"identifier": "getAlgorithm", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAlgorithm()", "full_signature": "public String getAlgorithm()", "class_method_signature": "PasswordHash.getAlgorithm()", "testcase": false, "constructor": false}, {"identifier": "getDefaultAlgorithm", "parameters": "()", "modifiers": "static public", "return": "String", "signature": "String getDefaultAlgorithm()", "full_signature": "static public String getDefaultAlgorithm()", "class_method_signature": "PasswordHash.getDefaultAlgorithm()", "testcase": false, "constructor": false}, {"identifier": "generateSalt", "parameters": "()", "modifiers": "private synchronized", "return": "byte[]", "signature": "byte[] generateSalt()", "full_signature": "private synchronized byte[] generateSalt()", "class_method_signature": "PasswordHash.generateSalt()", "testcase": false, "constructor": false}, {"identifier": "digest", "parameters": "(byte[] salt, String algorithm, String secret)", "modifiers": "private", "return": "byte[]", "signature": "byte[] digest(byte[] salt, String algorithm, String secret)", "full_signature": "private byte[] digest(byte[] salt, String algorithm, String secret)", "class_method_signature": "PasswordHash.digest(byte[] salt, String algorithm, String secret)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/eperson/PasswordHash.java"}, "focal_method": {"identifier": "matches", "parameters": "(String secret)", "modifiers": "public", "return": "boolean", "body": "public boolean matches(String secret)\n    {\n        byte[] candidate;\n        try {\n            candidate = digest(salt, algorithm, secret);\n        } catch (NoSuchAlgorithmException e) {\n            log.error(e.getMessage());\n            return false;\n        }\n        return Arrays.equals(candidate, hash);\n    }", "signature": "boolean matches(String secret)", "full_signature": "public boolean matches(String secret)", "class_method_signature": "PasswordHash.matches(String secret)", "testcase": false, "constructor": false, "invocations": ["digest", "error", "getMessage", "equals"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}