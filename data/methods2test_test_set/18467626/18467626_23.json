{"test_class": {"identifier": "CPLCUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "library/src/test/java/com/github/devnied/emvnfccard/utils/CPLCUtilsTest.java"}, "test_case": {"identifier": "testPrependedCPLC", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPrependedCPLC(){\n\t\t// prepended with CPLC tag\n\t\tCPLC cplc = CPLCUtils.parse(BytesUtils.fromString(\"9F 7F 2A 47 90 50 40 47 91 81 02 31 00 83 58 00 11 68 91 45 81 48 12 83 65 00 00 00 00 01 2F 31 30 31 31 36 38 00 00 00 00 00 00 00 00 90 00\"));\t\t\n\t\tAssertions.assertThat(cplc).isNotNull();\n\t\tAssertions.assertThat(cplc.getIcFabricator()).isEqualTo(0x4790);\n\t\tAssertions.assertThat(cplc.getIcType()).isEqualTo(0x5040);\n\t\tAssertions.assertThat(cplc.getOs()).isEqualTo(0x4791);\n\t\tAssertions.assertThat(cplc.getOsReleaseLevel()).isEqualTo(0x3100);\n\t\tAssertions.assertThat(cplc.getIcSerialNumber()).isEqualTo(0x00116891);\n\t\tAssertions.assertThat(cplc.getIcBatchId()).isEqualTo(0x4581);\n\t\tAssertions.assertThat(cplc.getIcModuleFabricator()).isEqualTo(0x4812);\n\t\tAssertions.assertThat(cplc.getIccManufacturer()).isEqualTo(0x0000);\n\t\tAssertions.assertThat(cplc.getIcEmbeddingDate()).isNull();\n\t\tAssertions.assertThat(cplc.getPrepersoId()).isEqualTo(0x012F);\n\t\tAssertions.assertThat(cplc.getPrepersoEquipment()).isEqualTo(0x31313638);\n\t\tAssertions.assertThat(cplc.getPersoId()).isEqualTo(0x0000);\n\t\tAssertions.assertThat(cplc.getPersoEquipment()).isEqualTo(0x0000);\n\t}", "signature": "void testPrependedCPLC()", "full_signature": "@Test public void testPrependedCPLC()", "class_method_signature": "CPLCUtilsTest.testPrependedCPLC()", "testcase": true, "constructor": false, "invocations": ["parse", "fromString", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getIcFabricator", "isEqualTo", "assertThat", "getIcType", "isEqualTo", "assertThat", "getOs", "isEqualTo", "assertThat", "getOsReleaseLevel", "isEqualTo", "assertThat", "getIcSerialNumber", "isEqualTo", "assertThat", "getIcBatchId", "isEqualTo", "assertThat", "getIcModuleFabricator", "isEqualTo", "assertThat", "getIccManufacturer", "isNull", "assertThat", "getIcEmbeddingDate", "isEqualTo", "assertThat", "getPrepersoId", "isEqualTo", "assertThat", "getPrepersoEquipment", "isEqualTo", "assertThat", "getPersoId", "isEqualTo", "assertThat", "getPersoEquipment"]}, "focal_class": {"identifier": "CPLCUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CPLCUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CPLCUtils.class)", "var_name": "LOGGER"}, {"original_string": "private static final ITag CPLC_TAG = new TagImpl(\"9f7f\", TagValueTypeEnum.BINARY, \"Card Production Life Cycle Data\", \"\");", "modifier": "private static final", "type": "ITag", "declarator": "CPLC_TAG = new TagImpl(\"9f7f\", TagValueTypeEnum.BINARY, \"Card Production Life Cycle Data\", \"\")", "var_name": "CPLC_TAG"}], "methods": [{"identifier": "parse", "parameters": "(byte[] raw)", "modifiers": "public static", "return": "CPLC", "signature": "CPLC parse(byte[] raw)", "full_signature": "public static CPLC parse(byte[] raw)", "class_method_signature": "CPLCUtils.parse(byte[] raw)", "testcase": false, "constructor": false}, {"identifier": "CPLCUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " CPLCUtils()", "full_signature": "private  CPLCUtils()", "class_method_signature": "CPLCUtils.CPLCUtils()", "testcase": false, "constructor": true}], "file": "library/src/main/java/com/github/devnied/emvnfccard/utils/CPLCUtils.java"}, "focal_method": {"identifier": "parse", "parameters": "(byte[] raw)", "modifiers": "public static", "return": "CPLC", "body": "public static CPLC parse(byte[] raw) {\n\t\tCPLC ret = null;\n\t\tif (raw != null) {\n\t\t\tbyte[] cplc = null;\n\t\t\t// try to interpret as raw data (not TLV)\n\t\t\tif (raw.length == CPLC.SIZE + 2) {\n\t\t\t\tcplc = raw;\n\t\t\t}\n\t\t\t// or maybe it's prepended with CPLC tag:\n\t\t\telse if (raw.length == CPLC.SIZE + 5) {\n\t\t\t\tcplc = TlvUtil.getValue(raw, CPLC_TAG);\n\t\t\t} else {\n\t\t\t\tLOGGER.error(\"CPLC data not valid\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tret = new CPLC();\n\t\t\tret.parse(cplc,null);\n\t\t}\n\t\treturn ret;\n\t}", "signature": "CPLC parse(byte[] raw)", "full_signature": "public static CPLC parse(byte[] raw)", "class_method_signature": "CPLCUtils.parse(byte[] raw)", "testcase": false, "constructor": false, "invocations": ["getValue", "error", "parse"]}, "repository": {"repo_id": 18467626, "url": "https://github.com/devnied/EMV-NFC-Paycard-Enrollment", "language": "Java", "is_fork": false, "fork_count": 425, "stargazer_count": 934, "size": 4233, "license": "licensed"}}