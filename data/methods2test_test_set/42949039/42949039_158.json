{"test_class": {"identifier": "NamespaceSecurityAdviceTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private NamespaceSecurityAdvice namespaceSecurityAdvice;", "modifier": "@Autowired\n    private", "type": "NamespaceSecurityAdvice", "declarator": "namespaceSecurityAdvice", "var_name": "namespaceSecurityAdvice"}, {"original_string": "@Autowired\n    @Qualifier(value = \"businessObjectDefinitionServiceImpl\")\n    private BusinessObjectDefinitionService businessObjectDefinitionServiceImpl;", "modifier": "@Autowired\n    @Qualifier(value = \"businessObjectDefinitionServiceImpl\")\n    private", "type": "BusinessObjectDefinitionService", "declarator": "businessObjectDefinitionServiceImpl", "var_name": "businessObjectDefinitionServiceImpl"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/advice/NamespaceSecurityAdviceTest.java"}, "test_case": {"identifier": "checkPermissionAssertAccessDeniedWhenMultipleAnnotationsAndUserHasOneWrongPermission", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkPermissionAssertAccessDeniedWhenMultipleAnnotationsAndUserHasOneWrongPermission() throws Exception\n    {\n        // Mock a join point of the method call\n        // mockMethodMultipleAnnotations(\"foo\", \"bar\");\n        JoinPoint joinPoint = mock(JoinPoint.class);\n        MethodSignature methodSignature = mock(MethodSignature.class);\n        Method method = NamespaceSecurityAdviceTest.class.getDeclaredMethod(\"mockMethodMultipleAnnotations\", String.class, String.class);\n        when(methodSignature.getParameterNames()).thenReturn(new String[] {\"namespace1\", \"namespace2\"});\n        when(methodSignature.getMethod()).thenReturn(method);\n        when(joinPoint.getSignature()).thenReturn(methodSignature);\n        when(joinPoint.getArgs()).thenReturn(new Object[] {\"foo\", \"bar\"});\n\n        String userId = \"userId\";\n        ApplicationUser applicationUser = new ApplicationUser(getClass());\n        applicationUser.setUserId(userId);\n        applicationUser.setNamespaceAuthorizations(new HashSet<>());\n        applicationUser.getNamespaceAuthorizations().add(new NamespaceAuthorization(\"foo\", Arrays.asList(NamespacePermissionEnum.READ)));\n        SecurityContextHolder.getContext().setAuthentication(\n            new TestingAuthenticationToken(new SecurityUserWrapper(userId, \"\", false, false, false, false, Arrays.asList(), applicationUser), null));\n\n        try\n        {\n            namespaceSecurityAdvice.checkPermission(joinPoint);\n            fail();\n        }\n        catch (Exception e)\n        {\n            assertEquals(AccessDeniedException.class, e.getClass());\n            assertEquals(String.format(\"User \\\"%s\\\" does not have \\\"[WRITE]\\\" permission(s) to the namespace \\\"bar\\\"\", userId), e.getMessage());\n        }\n    }", "signature": "void checkPermissionAssertAccessDeniedWhenMultipleAnnotationsAndUserHasOneWrongPermission()", "full_signature": "@Test public void checkPermissionAssertAccessDeniedWhenMultipleAnnotationsAndUserHasOneWrongPermission()", "class_method_signature": "NamespaceSecurityAdviceTest.checkPermissionAssertAccessDeniedWhenMultipleAnnotationsAndUserHasOneWrongPermission()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "getDeclaredMethod", "thenReturn", "when", "getParameterNames", "thenReturn", "when", "getMethod", "thenReturn", "when", "getSignature", "thenReturn", "when", "getArgs", "getClass", "setUserId", "setNamespaceAuthorizations", "add", "getNamespaceAuthorizations", "asList", "setAuthentication", "getContext", "asList", "checkPermission", "fail", "assertEquals", "getClass", "assertEquals", "format", "getMessage"]}, "focal_class": {"identifier": "NamespaceSecurityAdvice", "superclass": "extends AbstractServiceAdvice", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SpelExpressionHelper spelExpressionHelper;", "modifier": "@Autowired\n    private", "type": "SpelExpressionHelper", "declarator": "spelExpressionHelper", "var_name": "spelExpressionHelper"}, {"original_string": "@Autowired\n    private NamespaceSecurityHelper namespaceSecurityHelper;", "modifier": "@Autowired\n    private", "type": "NamespaceSecurityHelper", "declarator": "namespaceSecurityHelper", "var_name": "namespaceSecurityHelper"}], "methods": [{"identifier": "checkPermission", "parameters": "(JoinPoint joinPoint)", "modifiers": "@Before(\"serviceMethods()\") public", "return": "void", "signature": "void checkPermission(JoinPoint joinPoint)", "full_signature": "@Before(\"serviceMethods()\") public void checkPermission(JoinPoint joinPoint)", "class_method_signature": "NamespaceSecurityAdvice.checkPermission(JoinPoint joinPoint)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/advice/NamespaceSecurityAdvice.java"}, "focal_method": {"identifier": "checkPermission", "parameters": "(JoinPoint joinPoint)", "modifiers": "@Before(\"serviceMethods()\") public", "return": "void", "body": "@Before(\"serviceMethods()\")\n    public void checkPermission(JoinPoint joinPoint)\n    {\n\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Method method = methodSignature.getMethod();\n\n        List<NamespacePermission> namespacePermissions = new ArrayList<>();\n        if (method.isAnnotationPresent(NamespacePermissions.class))\n        {\n            namespacePermissions.addAll(Arrays.asList(method.getAnnotation(NamespacePermissions.class).value()));\n        }\n        else if (method.isAnnotationPresent(NamespacePermission.class))\n        {\n            namespacePermissions.add(method.getAnnotation(NamespacePermission.class));\n        }\n\n        if (!namespacePermissions.isEmpty())\n        {\n            String[] parameterNames = methodSignature.getParameterNames();\n            Object[] args = joinPoint.getArgs();\n\n            Map<String, Object> variables = new HashMap<>();\n            for (int i = 0; i < parameterNames.length; i++)\n            {\n                variables.put(parameterNames[i], args[i]);\n            }\n\n            List<AccessDeniedException> accessDeniedExceptions = new ArrayList<>();\n            for (NamespacePermission namespacePermission : namespacePermissions)\n            {\n                for (String field : namespacePermission.fields())\n                {\n                    try\n                    {\n                        namespaceSecurityHelper.checkPermission(spelExpressionHelper.evaluate(field, Object.class, variables), namespacePermission\n                            .permissions());\n                    }\n                    catch (AccessDeniedException accessDeniedException)\n                    {\n                        accessDeniedExceptions.add(accessDeniedException);\n                    }\n                }\n            }\n            if (!accessDeniedExceptions.isEmpty())\n            {\n                throw namespaceSecurityHelper.getAccessDeniedException(accessDeniedExceptions);\n            }\n        }\n    }", "signature": "void checkPermission(JoinPoint joinPoint)", "full_signature": "@Before(\"serviceMethods()\") public void checkPermission(JoinPoint joinPoint)", "class_method_signature": "NamespaceSecurityAdvice.checkPermission(JoinPoint joinPoint)", "testcase": false, "constructor": false, "invocations": ["getSignature", "getMethod", "isAnnotationPresent", "addAll", "asList", "value", "getAnnotation", "isAnnotationPresent", "add", "getAnnotation", "isEmpty", "getParameterNames", "getArgs", "put", "fields", "checkPermission", "evaluate", "permissions", "add", "isEmpty", "getAccessDeniedException"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}