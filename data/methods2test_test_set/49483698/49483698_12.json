{"test_class": {"identifier": "StringsTest", "superclass": "", "interfaces": "", "fields": [], "file": "jhelper/src/test/java/com/hwangjr/jhelper/StringsTest.java"}, "test_case": {"identifier": "testIfAllHasTextExceptionIAE", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testIfAllHasTextExceptionIAE() {\n        allHasText();\n    }", "signature": "void testIfAllHasTextExceptionIAE()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testIfAllHasTextExceptionIAE()", "class_method_signature": "StringsTest.testIfAllHasTextExceptionIAE()", "testcase": true, "constructor": false, "invocations": ["allHasText"]}, "focal_class": {"identifier": "Strings", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String EMPTY_STRING = \"\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY_STRING = \"\"", "var_name": "EMPTY_STRING"}, {"original_string": "public static final String[] EMPTY_STRING_ARRAY = new String[0];", "modifier": "public static final", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = new String[0]", "var_name": "EMPTY_STRING_ARRAY"}, {"original_string": "private static final int PAD_LIMIT = 8192;", "modifier": "private static final", "type": "int", "declarator": "PAD_LIMIT = 8192", "var_name": "PAD_LIMIT"}, {"original_string": "private static final Pattern MULTI_SPACE = Pattern.compile(\" +\");", "modifier": "private static final", "type": "Pattern", "declarator": "MULTI_SPACE = Pattern.compile(\" +\")", "var_name": "MULTI_SPACE"}, {"original_string": "private static final Pattern WHITE_SPACE_EXCEPT_SPACE = Pattern.compile(\"[\\\\t\\\\n\\\\x0B\\\\f\\\\r]\");", "modifier": "private static final", "type": "Pattern", "declarator": "WHITE_SPACE_EXCEPT_SPACE = Pattern.compile(\"[\\\\t\\\\n\\\\x0B\\\\f\\\\r]\")", "var_name": "WHITE_SPACE_EXCEPT_SPACE"}, {"original_string": "private static final Pattern WHITE_SPACE = Pattern.compile(\"\\\\s\");", "modifier": "private static final", "type": "Pattern", "declarator": "WHITE_SPACE = Pattern.compile(\"\\\\s\")", "var_name": "WHITE_SPACE"}], "methods": [{"identifier": "Strings", "parameters": "()", "modifiers": "private", "return": "", "signature": " Strings()", "full_signature": "private  Strings()", "class_method_signature": "Strings.Strings()", "testcase": false, "constructor": true}, {"identifier": "isNullOrEmpty", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmpty(String str)", "full_signature": "public static boolean isNullOrEmpty(String str)", "class_method_signature": "Strings.isNullOrEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "hasText", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasText(String s)", "full_signature": "public static boolean hasText(String s)", "class_method_signature": "Strings.hasText(String s)", "testcase": false, "constructor": false}, {"identifier": "allHasText", "parameters": "(String... strings)", "modifiers": "public static", "return": "boolean", "signature": "boolean allHasText(String... strings)", "full_signature": "public static boolean allHasText(String... strings)", "class_method_signature": "Strings.allHasText(String... strings)", "testcase": false, "constructor": false}, {"identifier": "checkVarargString", "parameters": "(String... strings)", "modifiers": "private static", "return": "void", "signature": "void checkVarargString(String... strings)", "full_signature": "private static void checkVarargString(String... strings)", "class_method_signature": "Strings.checkVarargString(String... strings)", "testcase": false, "constructor": false}, {"identifier": "allNullOrEmpty", "parameters": "(String... strings)", "modifiers": "public static", "return": "boolean", "signature": "boolean allNullOrEmpty(String... strings)", "full_signature": "public static boolean allNullOrEmpty(String... strings)", "class_method_signature": "Strings.allNullOrEmpty(String... strings)", "testcase": false, "constructor": false}, {"identifier": "leftTrim", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String leftTrim(String s)", "full_signature": "public static String leftTrim(String s)", "class_method_signature": "Strings.leftTrim(String s)", "testcase": false, "constructor": false}, {"identifier": "rightTrim", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String rightTrim(String str)", "full_signature": "public static String rightTrim(String str)", "class_method_signature": "Strings.rightTrim(String str)", "testcase": false, "constructor": false}, {"identifier": "containsNone", "parameters": "(String str, String invalidCharsStr)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsNone(String str, String invalidCharsStr)", "full_signature": "public static boolean containsNone(String str, String invalidCharsStr)", "class_method_signature": "Strings.containsNone(String str, String invalidCharsStr)", "testcase": false, "constructor": false}, {"identifier": "containsOnly", "parameters": "(String str, String allowedChars)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsOnly(String str, String allowedChars)", "full_signature": "public static boolean containsOnly(String str, String allowedChars)", "class_method_signature": "Strings.containsOnly(String str, String allowedChars)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(char c, int count)", "modifiers": "public static", "return": "String", "signature": "String repeat(char c, int count)", "full_signature": "public static String repeat(char c, int count)", "class_method_signature": "Strings.repeat(char c, int count)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(String str, int count)", "modifiers": "public static", "return": "String", "signature": "String repeat(String str, int count)", "full_signature": "public static String repeat(String str, int count)", "class_method_signature": "Strings.repeat(String str, int count)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String reverse(String str)", "full_signature": "public static String reverse(String str)", "class_method_signature": "Strings.reverse(String str)", "testcase": false, "constructor": false}, {"identifier": "insertFromLeft", "parameters": "(String str, int interval, String stringToInsert)", "modifiers": "public static", "return": "String", "signature": "String insertFromLeft(String str, int interval, String stringToInsert)", "full_signature": "public static String insertFromLeft(String str, int interval, String stringToInsert)", "class_method_signature": "Strings.insertFromLeft(String str, int interval, String stringToInsert)", "testcase": false, "constructor": false}, {"identifier": "insertFromRight", "parameters": "(String str, int interval, String stringToInsert)", "modifiers": "public static", "return": "String", "signature": "String insertFromRight(String str, int interval, String stringToInsert)", "full_signature": "public static String insertFromRight(String str, int interval, String stringToInsert)", "class_method_signature": "Strings.insertFromRight(String str, int interval, String stringToInsert)", "testcase": false, "constructor": false}, {"identifier": "rightPad", "parameters": "(String str, int size)", "modifiers": "public static", "return": "String", "signature": "String rightPad(String str, int size)", "full_signature": "public static String rightPad(String str, int size)", "class_method_signature": "Strings.rightPad(String str, int size)", "testcase": false, "constructor": false}, {"identifier": "rightPad", "parameters": "(String str, int size, char padChar)", "modifiers": "public static", "return": "String", "signature": "String rightPad(String str, int size, char padChar)", "full_signature": "public static String rightPad(String str, int size, char padChar)", "class_method_signature": "Strings.rightPad(String str, int size, char padChar)", "testcase": false, "constructor": false}, {"identifier": "rightPad", "parameters": "(String str, int size, String padStr)", "modifiers": "public static", "return": "String", "signature": "String rightPad(String str, int size, String padStr)", "full_signature": "public static String rightPad(String str, int size, String padStr)", "class_method_signature": "Strings.rightPad(String str, int size, String padStr)", "testcase": false, "constructor": false}, {"identifier": "leftPad", "parameters": "(String str, int size)", "modifiers": "public static", "return": "String", "signature": "String leftPad(String str, int size)", "full_signature": "public static String leftPad(String str, int size)", "class_method_signature": "Strings.leftPad(String str, int size)", "testcase": false, "constructor": false}, {"identifier": "leftPad", "parameters": "(String str, int size, char padChar)", "modifiers": "public static", "return": "String", "signature": "String leftPad(String str, int size, char padChar)", "full_signature": "public static String leftPad(String str, int size, char padChar)", "class_method_signature": "Strings.leftPad(String str, int size, char padChar)", "testcase": false, "constructor": false}, {"identifier": "subStringUntilFirst", "parameters": "(String str, String s)", "modifiers": "public static", "return": "String", "signature": "String subStringUntilFirst(String str, String s)", "full_signature": "public static String subStringUntilFirst(String str, String s)", "class_method_signature": "Strings.subStringUntilFirst(String str, String s)", "testcase": false, "constructor": false}, {"identifier": "subStringUntilLast", "parameters": "(String str, String s)", "modifiers": "public static", "return": "String", "signature": "String subStringUntilLast(String str, String s)", "full_signature": "public static String subStringUntilLast(String str, String s)", "class_method_signature": "Strings.subStringUntilLast(String str, String s)", "testcase": false, "constructor": false}, {"identifier": "subStringAfterFirst", "parameters": "(String str, String s)", "modifiers": "public static", "return": "String", "signature": "String subStringAfterFirst(String str, String s)", "full_signature": "public static String subStringAfterFirst(String str, String s)", "class_method_signature": "Strings.subStringAfterFirst(String str, String s)", "testcase": false, "constructor": false}, {"identifier": "subStringAfterLast", "parameters": "(String str, String s)", "modifiers": "public static", "return": "String", "signature": "String subStringAfterLast(String str, String s)", "full_signature": "public static String subStringAfterLast(String str, String s)", "class_method_signature": "Strings.subStringAfterLast(String str, String s)", "testcase": false, "constructor": false}, {"identifier": "leftPad", "parameters": "(String str, int size, String padStr)", "modifiers": "public static", "return": "String", "signature": "String leftPad(String str, int size, String padStr)", "full_signature": "public static String leftPad(String str, int size, String padStr)", "class_method_signature": "Strings.leftPad(String str, int size, String padStr)", "testcase": false, "constructor": false}, {"identifier": "whiteSpacesToSingleSpace", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String whiteSpacesToSingleSpace(String str)", "full_signature": "public static String whiteSpacesToSingleSpace(String str)", "class_method_signature": "Strings.whiteSpacesToSingleSpace(String str)", "testcase": false, "constructor": false}, {"identifier": "eliminateWhiteSpaces", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String eliminateWhiteSpaces(String str)", "full_signature": "public static String eliminateWhiteSpaces(String str)", "class_method_signature": "Strings.eliminateWhiteSpaces(String str)", "testcase": false, "constructor": false}, {"identifier": "concatWithString", "parameters": "(String str, Collection<?> collection)", "modifiers": "public static", "return": "String", "signature": "String concatWithString(String str, Collection<?> collection)", "full_signature": "public static String concatWithString(String str, Collection<?> collection)", "class_method_signature": "Strings.concatWithString(String str, Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "concatWithString", "parameters": "(String str, Object... objects)", "modifiers": "public static", "return": "String", "signature": "String concatWithString(String str, Object... objects)", "full_signature": "public static String concatWithString(String str, Object... objects)", "class_method_signature": "Strings.concatWithString(String str, Object... objects)", "testcase": false, "constructor": false}, {"identifier": "separateGrams", "parameters": "(String word, int gramSize)", "modifiers": "public static", "return": "String[]", "signature": "String[] separateGrams(String word, int gramSize)", "full_signature": "public static String[] separateGrams(String word, int gramSize)", "class_method_signature": "Strings.separateGrams(String word, int gramSize)", "testcase": false, "constructor": false}], "file": "jhelper/src/main/java/com/hwangjr/jhelper/Strings.java"}, "focal_method": {"identifier": "allHasText", "parameters": "(String... strings)", "modifiers": "public static", "return": "boolean", "body": "public static boolean allHasText(String... strings) {\n        checkVarargString(strings);\n        for (String s : strings) {\n            if (!hasText(s)) return false;\n        }\n        return true;\n    }", "signature": "boolean allHasText(String... strings)", "full_signature": "public static boolean allHasText(String... strings)", "class_method_signature": "Strings.allHasText(String... strings)", "testcase": false, "constructor": false, "invocations": ["checkVarargString", "hasText"]}, "repository": {"repo_id": 49483698, "url": "https://github.com/AndroidKnife/RecordHelper", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 10, "size": 185, "license": "licensed"}}