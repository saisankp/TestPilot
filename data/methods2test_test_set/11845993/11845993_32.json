{"test_class": {"identifier": "ElasticsearchSpanReporterTest", "superclass": "extends AbstractElasticsearchSpanReporterTest", "interfaces": "", "fields": [{"original_string": "private ElasticsearchSpanReporter reporter;", "modifier": "private", "type": "ElasticsearchSpanReporter", "declarator": "reporter", "var_name": "reporter"}], "file": "stagemonitor-tracing-elasticsearch/src/test/java/org/stagemonitor/tracing/elasticsearch/ElasticsearchSpanReporterTest.java"}, "test_case": {"identifier": "testReportSpanDontReport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReportSpanDontReport() throws Exception {\n\t\tfinal SpanContextInformation info = reportSpanWithCallTree(1, \"Regular Foo\");\n\n\t\tAssert.assertTrue(reporter.isActive(info));\n\t\tassertEquals(0, tags.get(Tags.SAMPLING_PRIORITY.getKey()));\n\t}", "signature": "void testReportSpanDontReport()", "full_signature": "@Test public void testReportSpanDontReport()", "class_method_signature": "ElasticsearchSpanReporterTest.testReportSpanDontReport()", "testcase": true, "constructor": false, "invocations": ["reportSpanWithCallTree", "assertTrue", "isActive", "assertEquals", "get", "getKey"]}, "focal_class": {"identifier": "ElasticsearchSpanReporter", "superclass": "extends SpanReporter", "interfaces": "", "fields": [{"original_string": "static final MetricName spansDroppedMetricName = name(\"elasticsearch_spans_dropped\").build();", "modifier": "static final", "type": "MetricName", "declarator": "spansDroppedMetricName = name(\"elasticsearch_spans_dropped\").build()", "var_name": "spansDroppedMetricName"}, {"original_string": "static final MetricName bulkSizeMetricName = name(\"elasticsearch_spans_bulk_size\").build();", "modifier": "static final", "type": "MetricName", "declarator": "bulkSizeMetricName = name(\"elasticsearch_spans_bulk_size\").build()", "var_name": "bulkSizeMetricName"}, {"original_string": "static final String ES_SPAN_LOGGER = \"ElasticsearchSpanReporter\";", "modifier": "static final", "type": "String", "declarator": "ES_SPAN_LOGGER = \"ElasticsearchSpanReporter\"", "var_name": "ES_SPAN_LOGGER"}, {"original_string": "static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}, {"original_string": "private static final byte[] indexHeader = \"{\\\"index\\\":{}}\\n\".getBytes(UTF_8);", "modifier": "private static final", "type": "byte[]", "declarator": "indexHeader = \"{\\\"index\\\":{}}\\n\".getBytes(UTF_8)", "var_name": "indexHeader"}, {"original_string": "private static final String SPANS_TYPE = \"spans\";", "modifier": "private static final", "type": "String", "declarator": "SPANS_TYPE = \"spans\"", "var_name": "SPANS_TYPE"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(ElasticsearchSpanReporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ElasticsearchSpanReporter.class)", "var_name": "logger"}, {"original_string": "private final Logger spanLogger;", "modifier": "private final", "type": "Logger", "declarator": "spanLogger", "var_name": "spanLogger"}, {"original_string": "private SpanFlushingRunnable spanFlushingRunnable;", "modifier": "private", "type": "SpanFlushingRunnable", "declarator": "spanFlushingRunnable", "var_name": "spanFlushingRunnable"}, {"original_string": "private ElasticsearchTracingPlugin elasticsearchTracingPlugin;", "modifier": "private", "type": "ElasticsearchTracingPlugin", "declarator": "elasticsearchTracingPlugin", "var_name": "elasticsearchTracingPlugin"}, {"original_string": "private ElasticsearchClient elasticsearchClient;", "modifier": "private", "type": "ElasticsearchClient", "declarator": "elasticsearchClient", "var_name": "elasticsearchClient"}, {"original_string": "private BlockingQueue<OutputStreamHandler> bulkQueue;", "modifier": "private", "type": "BlockingQueue<OutputStreamHandler>", "declarator": "bulkQueue", "var_name": "bulkQueue"}, {"original_string": "private TracingPlugin tracingPlugin;", "modifier": "private", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}, {"original_string": "private Metric2Registry metricRegistry;", "modifier": "private", "type": "Metric2Registry", "declarator": "metricRegistry", "var_name": "metricRegistry"}, {"original_string": "private ScheduledThreadPoolExecutor scheduler;", "modifier": "private", "type": "ScheduledThreadPoolExecutor", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private ElasticsearchUpdateSpanReporter updateReporter;", "modifier": "private", "type": "ElasticsearchUpdateSpanReporter", "declarator": "updateReporter", "var_name": "updateReporter"}], "methods": [{"identifier": "ElasticsearchSpanReporter", "parameters": "()", "modifiers": "public", "return": "", "signature": " ElasticsearchSpanReporter()", "full_signature": "public  ElasticsearchSpanReporter()", "class_method_signature": "ElasticsearchSpanReporter.ElasticsearchSpanReporter()", "testcase": false, "constructor": true}, {"identifier": "ElasticsearchSpanReporter", "parameters": "(Logger spanLogger)", "modifiers": "", "return": "", "signature": " ElasticsearchSpanReporter(Logger spanLogger)", "full_signature": "  ElasticsearchSpanReporter(Logger spanLogger)", "class_method_signature": "ElasticsearchSpanReporter.ElasticsearchSpanReporter(Logger spanLogger)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(ConfigurationRegistry configuration)", "modifiers": "@Override public", "return": "void", "signature": "void init(ConfigurationRegistry configuration)", "full_signature": "@Override public void init(ConfigurationRegistry configuration)", "class_method_signature": "ElasticsearchSpanReporter.init(ConfigurationRegistry configuration)", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "(SpanContextInformation spanContext, final SpanWrapper spanWrapper)", "modifiers": "@Override public", "return": "void", "signature": "void report(SpanContextInformation spanContext, final SpanWrapper spanWrapper)", "full_signature": "@Override public void report(SpanContextInformation spanContext, final SpanWrapper spanWrapper)", "class_method_signature": "ElasticsearchSpanReporter.report(SpanContextInformation spanContext, final SpanWrapper spanWrapper)", "testcase": false, "constructor": false}, {"identifier": "scheduleSendBulk", "parameters": "(OutputStreamHandler bulkBytes)", "modifiers": "", "return": "void", "signature": "void scheduleSendBulk(OutputStreamHandler bulkBytes)", "full_signature": " void scheduleSendBulk(OutputStreamHandler bulkBytes)", "class_method_signature": "ElasticsearchSpanReporter.scheduleSendBulk(OutputStreamHandler bulkBytes)", "testcase": false, "constructor": false}, {"identifier": "scheduleFlushIfBulkQueueExceedsMaxBatchSize", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void scheduleFlushIfBulkQueueExceedsMaxBatchSize()", "full_signature": "private void scheduleFlushIfBulkQueueExceedsMaxBatchSize()", "class_method_signature": "ElasticsearchSpanReporter.scheduleFlushIfBulkQueueExceedsMaxBatchSize()", "testcase": false, "constructor": false}, {"identifier": "getTodaysIndexName", "parameters": "()", "modifiers": "static", "return": "String", "signature": "String getTodaysIndexName()", "full_signature": "static String getTodaysIndexName()", "class_method_signature": "ElasticsearchSpanReporter.getTodaysIndexName()", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "(SpanContextInformation spanContext)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isActive(SpanContextInformation spanContext)", "full_signature": "@Override public boolean isActive(SpanContextInformation spanContext)", "class_method_signature": "ElasticsearchSpanReporter.isActive(SpanContextInformation spanContext)", "testcase": false, "constructor": false}, {"identifier": "updateSpan", "parameters": "(B3HeaderFormat.B3Identifiers spanIdentifiers, B3HeaderFormat.B3Identifiers newSpanIdentifiers, Map<String, Object> tagsToUpdate)", "modifiers": "@Override public", "return": "void", "signature": "void updateSpan(B3HeaderFormat.B3Identifiers spanIdentifiers, B3HeaderFormat.B3Identifiers newSpanIdentifiers, Map<String, Object> tagsToUpdate)", "full_signature": "@Override public void updateSpan(B3HeaderFormat.B3Identifiers spanIdentifiers, B3HeaderFormat.B3Identifiers newSpanIdentifiers, Map<String, Object> tagsToUpdate)", "class_method_signature": "ElasticsearchSpanReporter.updateSpan(B3HeaderFormat.B3Identifiers spanIdentifiers, B3HeaderFormat.B3Identifiers newSpanIdentifiers, Map<String, Object> tagsToUpdate)", "testcase": false, "constructor": false}, {"identifier": "getUpdateReporter", "parameters": "()", "modifiers": "", "return": "ElasticsearchUpdateSpanReporter", "signature": "ElasticsearchUpdateSpanReporter getUpdateReporter()", "full_signature": " ElasticsearchUpdateSpanReporter getUpdateReporter()", "class_method_signature": "ElasticsearchSpanReporter.getUpdateReporter()", "testcase": false, "constructor": false}], "file": "stagemonitor-tracing-elasticsearch/src/main/java/org/stagemonitor/tracing/elasticsearch/ElasticsearchSpanReporter.java"}, "focal_method": {"identifier": "isActive", "parameters": "(SpanContextInformation spanContext)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean isActive(SpanContextInformation spanContext) {\n\t\tfinal boolean logOnly = elasticsearchTracingPlugin.isOnlyLogElasticsearchSpanReports();\n\t\treturn elasticsearchClient.isElasticsearchAvailable() || logOnly;\n\t}", "signature": "boolean isActive(SpanContextInformation spanContext)", "full_signature": "@Override public boolean isActive(SpanContextInformation spanContext)", "class_method_signature": "ElasticsearchSpanReporter.isActive(SpanContextInformation spanContext)", "testcase": false, "constructor": false, "invocations": ["isOnlyLogElasticsearchSpanReports", "isElasticsearchAvailable"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}