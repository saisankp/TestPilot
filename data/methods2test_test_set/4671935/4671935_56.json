{"test_class": {"identifier": "ConvertTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/util/ConvertTest.java"}, "test_case": {"identifier": "convertGlide2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertGlide2() {\n        assertEquals(\"2.0\", Convert.glide2(20, -10, 1, false));\n        assertEquals(\"2.0 : 1\", Convert.glide2(20, -10, 1, true));\n        assertEquals(\"+2.0 : 1\", Convert.glide2(20, 10, 1, true));\n\n        // Special cases\n        assertEquals(\"\", Convert.glide2(20, 0, 1, true));\n        assertEquals(\"\", Convert.glide2(0, 10, 1, true));\n        assertEquals(\"\", Convert.glide2(0.1, 0.1, 1, true));\n        assertEquals(\"\", Convert.glide2(0, 0, 1, true));\n    }", "signature": "void convertGlide2()", "full_signature": "@Test public void convertGlide2()", "class_method_signature": "ConvertTest.convertGlide2()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "glide2", "assertEquals", "glide2", "assertEquals", "glide2", "assertEquals", "glide2", "assertEquals", "glide2", "assertEquals", "glide2", "assertEquals", "glide2"]}, "focal_class": {"identifier": "Convert", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static boolean metric = metricDefault();", "modifier": "public static", "type": "boolean", "declarator": "metric = metricDefault()", "var_name": "metric"}, {"original_string": "public static final double FT = 0.3048;", "modifier": "public static final", "type": "double", "declarator": "FT = 0.3048", "var_name": "FT"}, {"original_string": "public static final double MPH = 0.44704;", "modifier": "public static final", "type": "double", "declarator": "MPH = 0.44704", "var_name": "MPH"}, {"original_string": "public static final double KPH = 0.277778;", "modifier": "public static final", "type": "double", "declarator": "KPH = 0.277778", "var_name": "KPH"}, {"original_string": "private static final double MILE = 1609.34;", "modifier": "private static final", "type": "double", "declarator": "MILE = 1609.34", "var_name": "MILE"}, {"original_string": "public static final float MPHf = 0.44704f;", "modifier": "public static final", "type": "float", "declarator": "MPHf = 0.44704f", "var_name": "MPHf"}, {"original_string": "public static final float KPHf = 0.277778f;", "modifier": "public static final", "type": "float", "declarator": "KPHf = 0.277778f", "var_name": "KPHf"}, {"original_string": "public static final String GLIDE_STATIONARY = \"Stationary\";", "modifier": "public static final", "type": "String", "declarator": "GLIDE_STATIONARY = \"Stationary\"", "var_name": "GLIDE_STATIONARY"}, {"original_string": "public static final String GLIDE_LEVEL = \"Level\";", "modifier": "public static final", "type": "String", "declarator": "GLIDE_LEVEL = \"Level\"", "var_name": "GLIDE_LEVEL"}, {"original_string": "public static final String GLIDE_VERTICAL = \"Vertical\";", "modifier": "public static final", "type": "String", "declarator": "GLIDE_VERTICAL = \"Vertical\"", "var_name": "GLIDE_VERTICAL"}], "methods": [{"identifier": "kts2mps", "parameters": "(double knots)", "modifiers": "public static", "return": "double", "signature": "double kts2mps(double knots)", "full_signature": "public static double kts2mps(double knots)", "class_method_signature": "Convert.kts2mps(double knots)", "testcase": false, "constructor": false}, {"identifier": "altitude", "parameters": "(double m)", "modifiers": "@NonNull public static", "return": "String", "signature": "String altitude(double m)", "full_signature": "@NonNull public static String altitude(double m)", "class_method_signature": "Convert.altitude(double m)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(double m)", "modifiers": "@NonNull public static", "return": "String", "signature": "String distance(double m)", "full_signature": "@NonNull public static String distance(double m)", "class_method_signature": "Convert.distance(double m)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(double m, int precision, boolean units)", "modifiers": "@NonNull public static", "return": "String", "signature": "String distance(double m, int precision, boolean units)", "full_signature": "@NonNull public static String distance(double m, int precision, boolean units)", "class_method_signature": "Convert.distance(double m, int precision, boolean units)", "testcase": false, "constructor": false}, {"identifier": "distance2", "parameters": "(double m, int precision)", "modifiers": "@NonNull public static", "return": "String", "signature": "String distance2(double m, int precision)", "full_signature": "@NonNull public static String distance2(double m, int precision)", "class_method_signature": "Convert.distance2(double m, int precision)", "testcase": false, "constructor": false}, {"identifier": "distance3", "parameters": "(double m)", "modifiers": "@NonNull public static", "return": "String", "signature": "String distance3(double m)", "full_signature": "@NonNull public static String distance3(double m)", "class_method_signature": "Convert.distance3(double m)", "testcase": false, "constructor": false}, {"identifier": "speed", "parameters": "(double mps)", "modifiers": "@NonNull public static", "return": "String", "signature": "String speed(double mps)", "full_signature": "@NonNull public static String speed(double mps)", "class_method_signature": "Convert.speed(double mps)", "testcase": false, "constructor": false}, {"identifier": "speed", "parameters": "(double mps, int precision, boolean units)", "modifiers": "@NonNull public static", "return": "String", "signature": "String speed(double mps, int precision, boolean units)", "full_signature": "@NonNull public static String speed(double mps, int precision, boolean units)", "class_method_signature": "Convert.speed(double mps, int precision, boolean units)", "testcase": false, "constructor": false}, {"identifier": "glide", "parameters": "(double glideRatio, int precision, boolean units)", "modifiers": "@NonNull public static", "return": "String", "signature": "String glide(double glideRatio, int precision, boolean units)", "full_signature": "@NonNull public static String glide(double glideRatio, int precision, boolean units)", "class_method_signature": "Convert.glide(double glideRatio, int precision, boolean units)", "testcase": false, "constructor": false}, {"identifier": "glide", "parameters": "(double groundSpeed, double climb, int precision, boolean units)", "modifiers": "@NonNull public static", "return": "String", "signature": "String glide(double groundSpeed, double climb, int precision, boolean units)", "full_signature": "@NonNull public static String glide(double groundSpeed, double climb, int precision, boolean units)", "class_method_signature": "Convert.glide(double groundSpeed, double climb, int precision, boolean units)", "testcase": false, "constructor": false}, {"identifier": "glide2", "parameters": "(double groundSpeed, double climb, int precision, boolean units)", "modifiers": "@NonNull public static", "return": "String", "signature": "String glide2(double groundSpeed, double climb, int precision, boolean units)", "full_signature": "@NonNull public static String glide2(double groundSpeed, double climb, int precision, boolean units)", "class_method_signature": "Convert.glide2(double groundSpeed, double climb, int precision, boolean units)", "testcase": false, "constructor": false}, {"identifier": "pressure", "parameters": "(double hPa)", "modifiers": "@NonNull public static", "return": "String", "signature": "String pressure(double hPa)", "full_signature": "@NonNull public static String pressure(double hPa)", "class_method_signature": "Convert.pressure(double hPa)", "testcase": false, "constructor": false}, {"identifier": "angle", "parameters": "(double degrees)", "modifiers": "@NonNull public static", "return": "String", "signature": "String angle(double degrees)", "full_signature": "@NonNull public static String angle(double degrees)", "class_method_signature": "Convert.angle(double degrees)", "testcase": false, "constructor": false}, {"identifier": "angle2", "parameters": "(double degrees)", "modifiers": "@NonNull public static", "return": "String", "signature": "String angle2(double degrees)", "full_signature": "@NonNull public static String angle2(double degrees)", "class_method_signature": "Convert.angle2(double degrees)", "testcase": false, "constructor": false}, {"identifier": "bearing2", "parameters": "(double degrees)", "modifiers": "@NonNull public static", "return": "String", "signature": "String bearing2(double degrees)", "full_signature": "@NonNull public static String bearing2(double degrees)", "class_method_signature": "Convert.bearing2(double degrees)", "testcase": false, "constructor": false}, {"identifier": "metricDefault", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean metricDefault()", "full_signature": "private static boolean metricDefault()", "class_method_signature": "Convert.metricDefault()", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/util/Convert.java"}, "focal_method": {"identifier": "glide2", "parameters": "(double groundSpeed, double climb, int precision, boolean units)", "modifiers": "@NonNull public static", "return": "String", "body": "@NonNull\n    public static String glide2(double groundSpeed, double climb, int precision, boolean units) {\n        final double glideRatio = -groundSpeed / climb;\n        if (Double.isNaN(glideRatio)) {\n            return \"\";\n        } else if (groundSpeed + Math.abs(climb) < 0.5) { // ~1 mph\n            return \"\"; // Stationary\n        } else if (Double.isInfinite(glideRatio) || Math.abs(glideRatio) > 30) {\n            return \"\"; // Level\n        } else if (groundSpeed < 0.5 && Math.abs(climb) > 0.5) {\n            return \"\"; // Vertical\n        } else {\n            final String value;\n            if (glideRatio < 0) {\n                value = String.format(\"+%.\" + precision + \"f\", -glideRatio);\n            } else {\n                value = String.format(\"%.\" + precision + \"f\", glideRatio);\n            }\n            if (units) {\n                return value + \" : 1\";\n            } else {\n                return value;\n            }\n        }\n    }", "signature": "String glide2(double groundSpeed, double climb, int precision, boolean units)", "full_signature": "@NonNull public static String glide2(double groundSpeed, double climb, int precision, boolean units)", "class_method_signature": "Convert.glide2(double groundSpeed, double climb, int precision, boolean units)", "testcase": false, "constructor": false, "invocations": ["isNaN", "abs", "isInfinite", "abs", "abs", "format", "format"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}