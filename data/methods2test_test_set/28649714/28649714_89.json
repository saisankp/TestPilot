{"test_class": {"identifier": "TraditionalHandicapTimeScoringInteractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TraditionalHandicapTimeScoringInteractor interactor;", "modifier": "private", "type": "TraditionalHandicapTimeScoringInteractor", "declarator": "interactor", "var_name": "interactor"}, {"original_string": "@Mock\n    ScoredRun scoredRun;", "modifier": "@Mock", "type": "ScoredRun", "declarator": "scoredRun", "var_name": "scoredRun"}, {"original_string": "@Mock\n    Run run;", "modifier": "@Mock", "type": "Run", "declarator": "run", "var_name": "run"}, {"original_string": "@Mock\n    Registration registration;", "modifier": "@Mock", "type": "Registration", "declarator": "registration", "var_name": "registration"}, {"original_string": "@Mock\n    HandicapGroup handicapGroup;", "modifier": "@Mock", "type": "HandicapGroup", "declarator": "handicapGroup", "var_name": "handicapGroup"}, {"original_string": "@Mock\n    CompetitionGroup competitionGroup;", "modifier": "@Mock", "type": "CompetitionGroup", "declarator": "competitionGroup", "var_name": "competitionGroup"}], "file": "service/src/test/java/org/coner/core/domain/interactor/TraditionalHandicapTimeScoringInteractorTest.java"}, "test_case": {"identifier": "itShouldSetHandicapTimeForConedRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void itShouldSetHandicapTimeForConedRun() {\n        BigDecimal rawTimeScored = BigDecimal.valueOf(106000, 3);\n        when(scoredRun.getRawTimeScored()).thenReturn(rawTimeScored);\n        BigDecimal expected = BigDecimal.valueOf(92856, 3);\n\n        interactor.score(scoredRun);\n\n        verify(scoredRun).setHandicapTimeScored(eq(expected));\n    }", "signature": "void itShouldSetHandicapTimeForConedRun()", "full_signature": "@Test public void itShouldSetHandicapTimeForConedRun()", "class_method_signature": "TraditionalHandicapTimeScoringInteractorTest.itShouldSetHandicapTimeForConedRun()", "testcase": true, "constructor": false, "invocations": ["valueOf", "thenReturn", "when", "getRawTimeScored", "valueOf", "score", "setHandicapTimeScored", "verify", "eq"]}, "focal_class": {"identifier": "TraditionalHandicapTimeScoringInteractor", "superclass": "", "interfaces": "implements HandicapTimeScoringInteractor", "fields": [], "methods": [{"identifier": "score", "parameters": "(ScoredRun scoredRun)", "modifiers": "@Override public", "return": "void", "signature": "void score(ScoredRun scoredRun)", "full_signature": "@Override public void score(ScoredRun scoredRun)", "class_method_signature": "TraditionalHandicapTimeScoringInteractor.score(ScoredRun scoredRun)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/domain/interactor/TraditionalHandicapTimeScoringInteractor.java"}, "focal_method": {"identifier": "score", "parameters": "(ScoredRun scoredRun)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void score(ScoredRun scoredRun) {\n        BigDecimal rawTimeScored = scoredRun.getRawTimeScored();\n        Preconditions.checkNotNull(rawTimeScored, \"depends on raw time scored\");\n        Run run = scoredRun.getRun();\n        BigDecimal handicapGroupFactor = run.getRegistration().getHandicapGroup().getFactor();\n        BigDecimal competitionGroupFactor = run.getRegistration().getCompetitionGroup().getFactor();\n        BigDecimal handicapTimeScored = rawTimeScored.multiply(handicapGroupFactor)\n                .multiply(competitionGroupFactor)\n                .setScale(3, RoundingMode.HALF_UP);\n        scoredRun.setHandicapTimeScored(handicapTimeScored);\n    }", "signature": "void score(ScoredRun scoredRun)", "full_signature": "@Override public void score(ScoredRun scoredRun)", "class_method_signature": "TraditionalHandicapTimeScoringInteractor.score(ScoredRun scoredRun)", "testcase": false, "constructor": false, "invocations": ["getRawTimeScored", "checkNotNull", "getRun", "getFactor", "getHandicapGroup", "getRegistration", "getFactor", "getCompetitionGroup", "getRegistration", "setScale", "multiply", "multiply", "setHandicapTimeScored"]}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}