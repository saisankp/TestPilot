{"test_class": {"identifier": "SplitHistoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SplitHistory history;", "modifier": "private", "type": "SplitHistory", "declarator": "history", "var_name": "history"}, {"original_string": "private SplitHistory[] historySplit;", "modifier": "private", "type": "SplitHistory[]", "declarator": "historySplit", "var_name": "historySplit"}], "file": "commons/flow/src/test/java/org/openehealth/ipf/commons/flow/history/SplitHistoryTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEquals() {\n\t\tSplitHistory history1 = SplitHistory.parse(\"[(0/1)]\");\n\t\tSplitHistory history2 = SplitHistory.parse(\"[(0/1),(1/3)]\");\n\t\tassertFalse(history1.equals(history2));\n\t\tassertTrue(history1.equals(history1));\n\t\tassertFalse(history1.equals(history1.toString()));\n\t\tassertFalse(history1.equals(null));\n\t\tassertTrue(history1.equals(new SplitHistory()));\n\t}", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "SplitHistoryTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["parse", "parse", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "toString", "assertFalse", "equals", "assertTrue", "equals"]}, "focal_class": {"identifier": "SplitHistory", "superclass": "", "interfaces": "implements Comparable<SplitHistory>, Serializable", "fields": [{"original_string": "public static final SplitHistory ROOT = new SplitHistory();", "modifier": "public static final", "type": "SplitHistory", "declarator": "ROOT = new SplitHistory()", "var_name": "ROOT"}, {"original_string": "private static final String PATH_OPEN = \"[\";", "modifier": "private static final", "type": "String", "declarator": "PATH_OPEN = \"[\"", "var_name": "PATH_OPEN"}, {"original_string": "private static final String PATH_CLOSE = \"]\";", "modifier": "private static final", "type": "String", "declarator": "PATH_CLOSE = \"]\"", "var_name": "PATH_CLOSE"}, {"original_string": "private static final String PATH_SEP = \",\";", "modifier": "private static final", "type": "String", "declarator": "PATH_SEP = \",\"", "var_name": "PATH_SEP"}, {"original_string": "private static final String PATTERN = \"^\\\\\" + PATH_OPEN + \".*\\\\\" + PATH_CLOSE + \"$\";", "modifier": "private static final", "type": "String", "declarator": "PATTERN = \"^\\\\\" + PATH_OPEN + \".*\\\\\" + PATH_CLOSE + \"$\"", "var_name": "PATTERN"}, {"original_string": "private final List<SplitHistoryEntry> entries;", "modifier": "private final", "type": "List<SplitHistoryEntry>", "declarator": "entries", "var_name": "entries"}], "methods": [{"identifier": "SplitHistory", "parameters": "()", "modifiers": "public", "return": "", "signature": " SplitHistory()", "full_signature": "public  SplitHistory()", "class_method_signature": "SplitHistory.SplitHistory()", "testcase": false, "constructor": true}, {"identifier": "SplitHistory", "parameters": "(int initialCapacity)", "modifiers": "public", "return": "", "signature": " SplitHistory(int initialCapacity)", "full_signature": "public  SplitHistory(int initialCapacity)", "class_method_signature": "SplitHistory.SplitHistory(int initialCapacity)", "testcase": false, "constructor": true}, {"identifier": "SplitHistory", "parameters": "(boolean addRoot)", "modifiers": "private", "return": "", "signature": " SplitHistory(boolean addRoot)", "full_signature": "private  SplitHistory(boolean addRoot)", "class_method_signature": "SplitHistory.SplitHistory(boolean addRoot)", "testcase": false, "constructor": true}, {"identifier": "SplitHistory", "parameters": "(int initialCapacity, boolean addRoot)", "modifiers": "private", "return": "", "signature": " SplitHistory(int initialCapacity, boolean addRoot)", "full_signature": "private  SplitHistory(int initialCapacity, boolean addRoot)", "class_method_signature": "SplitHistory.SplitHistory(int initialCapacity, boolean addRoot)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "SplitHistory.size()", "testcase": false, "constructor": false}, {"identifier": "entries", "parameters": "()", "modifiers": "public", "return": "List<SplitHistoryEntry>", "signature": "List<SplitHistoryEntry> entries()", "full_signature": "public List<SplitHistoryEntry> entries()", "class_method_signature": "SplitHistory.entries()", "testcase": false, "constructor": false}, {"identifier": "indexPath", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] indexPath()", "full_signature": "public int[] indexPath()", "class_method_signature": "SplitHistory.indexPath()", "testcase": false, "constructor": false}, {"identifier": "indexPathString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String indexPathString()", "full_signature": "public String indexPathString()", "class_method_signature": "SplitHistory.indexPathString()", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(int num)", "modifiers": "public", "return": "SplitHistory[]", "signature": "SplitHistory[] split(int num)", "full_signature": "public SplitHistory[] split(int num)", "class_method_signature": "SplitHistory.split(int num)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(int index, boolean last)", "modifiers": "public", "return": "SplitHistory", "signature": "SplitHistory split(int index, boolean last)", "full_signature": "public SplitHistory split(int index, boolean last)", "class_method_signature": "SplitHistory.split(int index, boolean last)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(SplitHistory history)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(SplitHistory history)", "full_signature": "@Override public int compareTo(SplitHistory history)", "class_method_signature": "SplitHistory.compareTo(SplitHistory history)", "testcase": false, "constructor": false}, {"identifier": "isPredecessor", "parameters": "(SplitHistory history)", "modifiers": "public", "return": "boolean", "signature": "boolean isPredecessor(SplitHistory history)", "full_signature": "public boolean isPredecessor(SplitHistory history)", "class_method_signature": "SplitHistory.isPredecessor(SplitHistory history)", "testcase": false, "constructor": false}, {"identifier": "isSuccessor", "parameters": "(SplitHistory history)", "modifiers": "public", "return": "boolean", "signature": "boolean isSuccessor(SplitHistory history)", "full_signature": "public boolean isSuccessor(SplitHistory history)", "class_method_signature": "SplitHistory.isSuccessor(SplitHistory history)", "testcase": false, "constructor": false}, {"identifier": "isFirstUpTo", "parameters": "(int level)", "modifiers": "public", "return": "boolean", "signature": "boolean isFirstUpTo(int level)", "full_signature": "public boolean isFirstUpTo(int level)", "class_method_signature": "SplitHistory.isFirstUpTo(int level)", "testcase": false, "constructor": false}, {"identifier": "isLastUpTo", "parameters": "(int level)", "modifiers": "public", "return": "boolean", "signature": "boolean isLastUpTo(int level)", "full_signature": "public boolean isLastUpTo(int level)", "class_method_signature": "SplitHistory.isLastUpTo(int level)", "testcase": false, "constructor": false}, {"identifier": "isFirst", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFirst()", "full_signature": "public boolean isFirst()", "class_method_signature": "SplitHistory.isFirst()", "testcase": false, "constructor": false}, {"identifier": "isLast", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLast()", "full_signature": "public boolean isLast()", "class_method_signature": "SplitHistory.isLast()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SplitHistory.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SplitHistory.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SplitHistory.toString()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String history)", "modifiers": "public static", "return": "SplitHistory", "signature": "SplitHistory parse(String history)", "full_signature": "public static SplitHistory parse(String history)", "class_method_signature": "SplitHistory.parse(String history)", "testcase": false, "constructor": false}, {"identifier": "validateRoot", "parameters": "(SplitHistoryEntry node)", "modifiers": "private static", "return": "void", "signature": "void validateRoot(SplitHistoryEntry node)", "full_signature": "private static void validateRoot(SplitHistoryEntry node)", "class_method_signature": "SplitHistory.validateRoot(SplitHistoryEntry node)", "testcase": false, "constructor": false}], "file": "commons/flow/src/main/java/org/openehealth/ipf/commons/flow/history/SplitHistory.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof SplitHistory)) {\n            return false;\n        }\n        SplitHistory p = (SplitHistory)obj;\n        return entries.equals(p.entries);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SplitHistory.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}