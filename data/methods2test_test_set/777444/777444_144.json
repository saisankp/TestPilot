{"test_class": {"identifier": "MBeanServerHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JmxRequest request;", "modifier": "private", "type": "JmxRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private MBeanServerHandler handler;", "modifier": "private", "type": "MBeanServerHandler", "declarator": "handler", "var_name": "handler"}], "file": "agent/core/src/test/java/org/jolokia/backend/MBeanServerHandlerTest.java"}, "test_case": {"identifier": "dispatchRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dispatchRequest() throws MalformedObjectNameException, InstanceNotFoundException, ReflectionException, AttributeNotFoundException, MBeanException, IOException, NotChangedException {\n        JsonRequestHandler reqHandler = createMock(JsonRequestHandler.class);\n\n        Object result = new Object();\n\n        expect(reqHandler.handleAllServersAtOnce(request)).andReturn(false);\n        expect(reqHandler.handleRequest(EasyMock.<MBeanServerConnection>anyObject(), eq(request))).andReturn(result);\n        replay(reqHandler);\n        assertEquals(handler.dispatchRequest(reqHandler, request),result);\n    }", "signature": "void dispatchRequest()", "full_signature": "@Test public void dispatchRequest()", "class_method_signature": "MBeanServerHandlerTest.dispatchRequest()", "testcase": true, "constructor": false, "invocations": ["createMock", "andReturn", "expect", "handleAllServersAtOnce", "andReturn", "expect", "handleRequest", "anyObject", "eq", "replay", "assertEquals", "dispatchRequest"]}, "focal_class": {"identifier": "MBeanServerHandler", "superclass": "", "interfaces": "implements MBeanServerHandlerMBean, MBeanRegistration", "fields": [{"original_string": "private MBeanServerExecutorLocal mBeanServerManager;", "modifier": "private", "type": "MBeanServerExecutorLocal", "declarator": "mBeanServerManager", "var_name": "mBeanServerManager"}, {"original_string": "private String qualifier;", "modifier": "private", "type": "String", "declarator": "qualifier", "var_name": "qualifier"}, {"original_string": "private ServerHandle serverHandle;", "modifier": "private", "type": "ServerHandle", "declarator": "serverHandle", "var_name": "serverHandle"}, {"original_string": "private final List<MBeanHandle> mBeanHandles = new ArrayList<MBeanHandle>();", "modifier": "private final", "type": "List<MBeanHandle>", "declarator": "mBeanHandles = new ArrayList<MBeanHandle>()", "var_name": "mBeanHandles"}], "methods": [{"identifier": "MBeanServerHandler", "parameters": "(Configuration pConfig, LogHandler pLogHandler)", "modifiers": "public", "return": "", "signature": " MBeanServerHandler(Configuration pConfig, LogHandler pLogHandler)", "full_signature": "public  MBeanServerHandler(Configuration pConfig, LogHandler pLogHandler)", "class_method_signature": "MBeanServerHandler.MBeanServerHandler(Configuration pConfig, LogHandler pLogHandler)", "testcase": false, "constructor": true}, {"identifier": "initPlugins", "parameters": "(Configuration pConfig, LogHandler pLogHandler)", "modifiers": "private", "return": "void", "signature": "void initPlugins(Configuration pConfig, LogHandler pLogHandler)", "full_signature": "private void initPlugins(Configuration pConfig, LogHandler pLogHandler)", "class_method_signature": "MBeanServerHandler.initPlugins(Configuration pConfig, LogHandler pLogHandler)", "testcase": false, "constructor": false}, {"identifier": "getPluginOptions", "parameters": "(Configuration pConfig, LogHandler pLogHandler)", "modifiers": "private", "return": "Map", "signature": "Map getPluginOptions(Configuration pConfig, LogHandler pLogHandler)", "full_signature": "private Map getPluginOptions(Configuration pConfig, LogHandler pLogHandler)", "class_method_signature": "MBeanServerHandler.getPluginOptions(Configuration pConfig, LogHandler pLogHandler)", "testcase": false, "constructor": false}, {"identifier": "createMBeanPluginContext", "parameters": "()", "modifiers": "private", "return": "MBeanPluginContext", "signature": "MBeanPluginContext createMBeanPluginContext()", "full_signature": "private MBeanPluginContext createMBeanPluginContext()", "class_method_signature": "MBeanServerHandler.createMBeanPluginContext()", "testcase": false, "constructor": false}, {"identifier": "initServerHandle", "parameters": "(Configuration pConfig, LogHandler pLogHandler, List<ServerDetector> pDetectors)", "modifiers": "private", "return": "void", "signature": "void initServerHandle(Configuration pConfig, LogHandler pLogHandler, List<ServerDetector> pDetectors)", "full_signature": "private void initServerHandle(Configuration pConfig, LogHandler pLogHandler, List<ServerDetector> pDetectors)", "class_method_signature": "MBeanServerHandler.initServerHandle(Configuration pConfig, LogHandler pLogHandler, List<ServerDetector> pDetectors)", "testcase": false, "constructor": false}, {"identifier": "dispatchRequest", "parameters": "(JsonRequestHandler pRequestHandler, JmxRequest pJmxReq)", "modifiers": "public", "return": "Object", "signature": "Object dispatchRequest(JsonRequestHandler pRequestHandler, JmxRequest pJmxReq)", "full_signature": "public Object dispatchRequest(JsonRequestHandler pRequestHandler, JmxRequest pJmxReq)", "class_method_signature": "MBeanServerHandler.dispatchRequest(JsonRequestHandler pRequestHandler, JmxRequest pJmxReq)", "testcase": false, "constructor": false}, {"identifier": "registerMBean", "parameters": "(Object pMBean,String ... pOptionalName)", "modifiers": "public final", "return": "ObjectName", "signature": "ObjectName registerMBean(Object pMBean,String ... pOptionalName)", "full_signature": "public final ObjectName registerMBean(Object pMBean,String ... pOptionalName)", "class_method_signature": "MBeanServerHandler.registerMBean(Object pMBean,String ... pOptionalName)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void destroy()", "full_signature": "public final void destroy()", "class_method_signature": "MBeanServerHandler.destroy()", "testcase": false, "constructor": false}, {"identifier": "getMBeanServerManager", "parameters": "()", "modifiers": "public", "return": "MBeanServerExecutorLocal", "signature": "MBeanServerExecutorLocal getMBeanServerManager()", "full_signature": "public MBeanServerExecutorLocal getMBeanServerManager()", "class_method_signature": "MBeanServerHandler.getMBeanServerManager()", "testcase": false, "constructor": false}, {"identifier": "getServerHandle", "parameters": "()", "modifiers": "public", "return": "ServerHandle", "signature": "ServerHandle getServerHandle()", "full_signature": "public ServerHandle getServerHandle()", "class_method_signature": "MBeanServerHandler.getServerHandle()", "testcase": false, "constructor": false}, {"identifier": "initMBean", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initMBean()", "full_signature": "private void initMBean()", "class_method_signature": "MBeanServerHandler.initMBean()", "testcase": false, "constructor": false}, {"identifier": "lookupDetectors", "parameters": "()", "modifiers": "public static", "return": "List<ServerDetector>", "signature": "List<ServerDetector> lookupDetectors()", "full_signature": "public static List<ServerDetector> lookupDetectors()", "class_method_signature": "MBeanServerHandler.lookupDetectors()", "testcase": false, "constructor": false}, {"identifier": "lookupMBeanPlugins", "parameters": "()", "modifiers": "private", "return": "List<MBeanPlugin>", "signature": "List<MBeanPlugin> lookupMBeanPlugins()", "full_signature": "private List<MBeanPlugin> lookupMBeanPlugins()", "class_method_signature": "MBeanServerHandler.lookupMBeanPlugins()", "testcase": false, "constructor": false}, {"identifier": "detectServers", "parameters": "(List<ServerDetector> pDetectors, LogHandler pLogHandler)", "modifiers": "private", "return": "ServerHandle", "signature": "ServerHandle detectServers(List<ServerDetector> pDetectors, LogHandler pLogHandler)", "full_signature": "private ServerHandle detectServers(List<ServerDetector> pDetectors, LogHandler pLogHandler)", "class_method_signature": "MBeanServerHandler.detectServers(List<ServerDetector> pDetectors, LogHandler pLogHandler)", "testcase": false, "constructor": false}, {"identifier": "mBeanServersInfo", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String mBeanServersInfo()", "full_signature": "public String mBeanServersInfo()", "class_method_signature": "MBeanServerHandler.mBeanServersInfo()", "testcase": false, "constructor": false}, {"identifier": "preRegister", "parameters": "(MBeanServer server, ObjectName name)", "modifiers": "public", "return": "ObjectName", "signature": "ObjectName preRegister(MBeanServer server, ObjectName name)", "full_signature": "public ObjectName preRegister(MBeanServer server, ObjectName name)", "class_method_signature": "MBeanServerHandler.preRegister(MBeanServer server, ObjectName name)", "testcase": false, "constructor": false}, {"identifier": "getObjectName", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getObjectName()", "full_signature": "public final String getObjectName()", "class_method_signature": "MBeanServerHandler.getObjectName()", "testcase": false, "constructor": false}, {"identifier": "postRegister", "parameters": "(Boolean registrationDone)", "modifiers": "public", "return": "void", "signature": "void postRegister(Boolean registrationDone)", "full_signature": "public void postRegister(Boolean registrationDone)", "class_method_signature": "MBeanServerHandler.postRegister(Boolean registrationDone)", "testcase": false, "constructor": false}, {"identifier": "preDeregister", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void preDeregister()", "full_signature": "public void preDeregister()", "class_method_signature": "MBeanServerHandler.preDeregister()", "testcase": false, "constructor": false}, {"identifier": "postDeregister", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void postDeregister()", "full_signature": "public void postDeregister()", "class_method_signature": "MBeanServerHandler.postDeregister()", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/backend/MBeanServerHandler.java"}, "focal_method": {"identifier": "dispatchRequest", "parameters": "(JsonRequestHandler pRequestHandler, JmxRequest pJmxReq)", "modifiers": "public", "return": "Object", "body": "public Object dispatchRequest(JsonRequestHandler pRequestHandler, JmxRequest pJmxReq)\n            throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException, NotChangedException {\n        serverHandle.preDispatch(mBeanServerManager,pJmxReq);\n        if (pRequestHandler.handleAllServersAtOnce(pJmxReq)) {\n            try {\n                return pRequestHandler.handleRequest(mBeanServerManager,pJmxReq);\n            } catch (IOException e) {\n                throw new IllegalStateException(\"Internal: IOException \" + e + \". Shouldn't happen.\",e);\n            }\n        } else {\n            return mBeanServerManager.handleRequest(pRequestHandler, pJmxReq);\n        }\n    }", "signature": "Object dispatchRequest(JsonRequestHandler pRequestHandler, JmxRequest pJmxReq)", "full_signature": "public Object dispatchRequest(JsonRequestHandler pRequestHandler, JmxRequest pJmxReq)", "class_method_signature": "MBeanServerHandler.dispatchRequest(JsonRequestHandler pRequestHandler, JmxRequest pJmxReq)", "testcase": false, "constructor": false, "invocations": ["preDispatch", "handleAllServersAtOnce", "handleRequest", "handleRequest"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}