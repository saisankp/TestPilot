{"test_class": {"identifier": "HibernateQueryTranslatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HibernatePropertyResolver resolver = new MockHibernatePropertyResolver();", "modifier": "private final", "type": "HibernatePropertyResolver", "declarator": "resolver = new MockHibernatePropertyResolver()", "var_name": "resolver"}, {"original_string": "private final BoxMaker boxMaker = new SimpleBoxMaker();", "modifier": "private final", "type": "BoxMaker", "declarator": "boxMaker = new SimpleBoxMaker()", "var_name": "boxMaker"}, {"original_string": "private final ContainsExpressionHandler<Criterion> containsExpressionHandler = new ContainsExpressionNonHandler<Criterion>();", "modifier": "private final", "type": "ContainsExpressionHandler<Criterion>", "declarator": "containsExpressionHandler = new ContainsExpressionNonHandler<Criterion>()", "var_name": "containsExpressionHandler"}, {"original_string": "private final HibernateQueryTranslator translator = new HibernateQueryTranslator(resolver, boxMaker, containsExpressionHandler);", "modifier": "private final", "type": "HibernateQueryTranslator", "declarator": "translator = new HibernateQueryTranslator(resolver, boxMaker, containsExpressionHandler)", "var_name": "translator"}, {"original_string": "private final String property = \"propertyName\";", "modifier": "private final", "type": "String", "declarator": "property = \"propertyName\"", "var_name": "property"}, {"original_string": "private final String value = \"test property value\";", "modifier": "private final", "type": "String", "declarator": "value = \"test property value\"", "var_name": "value"}, {"original_string": "private final Integer from = 1;", "modifier": "private final", "type": "Integer", "declarator": "from = 1", "var_name": "from"}, {"original_string": "private final Integer to = 10;", "modifier": "private final", "type": "Integer", "declarator": "to = 10", "var_name": "to"}, {"original_string": "private final String[] values = { \"test\", \"value\", \"array\" };", "modifier": "private final", "type": "String[]", "declarator": "values = { \"test\", \"value\", \"array\" }", "var_name": "values"}, {"original_string": "private final Box<Integer> box = new Box<Integer>(new Point<Integer>(0, 0),\n            new Point<Integer>(1, 1));", "modifier": "private final", "type": "Box<Integer>", "declarator": "box = new Box<Integer>(new Point<Integer>(0, 0),\n            new Point<Integer>(1, 1))", "var_name": "box"}], "file": "seeking-hibernate/src/test/java/com/eharmony/matching/seeking/translator/hibernate/HibernateQueryTranslatorTest.java"}, "test_case": {"identifier": "ordering_desc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ordering_desc() {\n        assertEquivalent(Order.desc(property),\n                translator.order(property, Ordering.Order.DESCENDING).get().get(0));\n    }", "signature": "void ordering_desc()", "full_signature": "@Test public void ordering_desc()", "class_method_signature": "HibernateQueryTranslatorTest.ordering_desc()", "testcase": true, "constructor": false, "invocations": ["assertEquivalent", "desc", "get", "get", "order"]}, "focal_class": {"identifier": "HibernateQueryTranslator", "superclass": "extends\n        AbstractHibernateQueryTranslator<Criterion, Orders, Projection>", "interfaces": "implements QueryTranslator<Criterion, Orders, Projection>", "fields": [], "methods": [{"identifier": "HibernateQueryTranslator", "parameters": "(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker,\n            ContainsExpressionHandler<Criterion> containsExpressionHandler)", "modifiers": "public", "return": "", "signature": " HibernateQueryTranslator(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker,\n            ContainsExpressionHandler<Criterion> containsExpressionHandler)", "full_signature": "public  HibernateQueryTranslator(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker,\n            ContainsExpressionHandler<Criterion> containsExpressionHandler)", "class_method_signature": "HibernateQueryTranslator.HibernateQueryTranslator(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker,\n            ContainsExpressionHandler<Criterion> containsExpressionHandler)", "testcase": false, "constructor": true}, {"identifier": "HibernateQueryTranslator", "parameters": "(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker)", "modifiers": "public", "return": "", "signature": " HibernateQueryTranslator(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker)", "full_signature": "public  HibernateQueryTranslator(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker)", "class_method_signature": "HibernateQueryTranslator.HibernateQueryTranslator(HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker)", "testcase": false, "constructor": true}, {"identifier": "HibernateQueryTranslator", "parameters": "(HibernatePropertyResolver propertyResolver)", "modifiers": "public", "return": "", "signature": " HibernateQueryTranslator(HibernatePropertyResolver propertyResolver)", "full_signature": "public  HibernateQueryTranslator(HibernatePropertyResolver propertyResolver)", "class_method_signature": "HibernateQueryTranslator.HibernateQueryTranslator(HibernatePropertyResolver propertyResolver)", "testcase": false, "constructor": true}, {"identifier": "translate", "parameters": "(NativeExpression e, Class<T> entityClass)", "modifiers": "@Override protected", "return": "Criterion", "signature": "Criterion translate(NativeExpression e, Class<T> entityClass)", "full_signature": "@Override protected Criterion translate(NativeExpression e, Class<T> entityClass)", "class_method_signature": "HibernateQueryTranslator.translate(NativeExpression e, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "eq", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion eq(String fieldName, Object value)", "full_signature": "@Override public Criterion eq(String fieldName, Object value)", "class_method_signature": "HibernateQueryTranslator.eq(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "ne", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion ne(String fieldName, Object value)", "full_signature": "@Override public Criterion ne(String fieldName, Object value)", "class_method_signature": "HibernateQueryTranslator.ne(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "lt", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion lt(String fieldName, Object value)", "full_signature": "@Override public Criterion lt(String fieldName, Object value)", "class_method_signature": "HibernateQueryTranslator.lt(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "lte", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion lte(String fieldName, Object value)", "full_signature": "@Override public Criterion lte(String fieldName, Object value)", "class_method_signature": "HibernateQueryTranslator.lte(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "gt", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion gt(String fieldName, Object value)", "full_signature": "@Override public Criterion gt(String fieldName, Object value)", "class_method_signature": "HibernateQueryTranslator.gt(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "gte", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion gte(String fieldName, Object value)", "full_signature": "@Override public Criterion gte(String fieldName, Object value)", "class_method_signature": "HibernateQueryTranslator.gte(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "(String fieldName, Object from, Object to)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion between(String fieldName, Object from, Object to)", "full_signature": "@Override public Criterion between(String fieldName, Object from, Object to)", "class_method_signature": "HibernateQueryTranslator.between(String fieldName, Object from, Object to)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(String fieldName, Object[] values)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion in(String fieldName, Object[] values)", "full_signature": "@Override public Criterion in(String fieldName, Object[] values)", "class_method_signature": "HibernateQueryTranslator.in(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "notIn", "parameters": "(String fieldName, Object[] values)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion notIn(String fieldName, Object[] values)", "full_signature": "@Override public Criterion notIn(String fieldName, Object[] values)", "class_method_signature": "HibernateQueryTranslator.notIn(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion isNull(String fieldName)", "full_signature": "@Override public Criterion isNull(String fieldName)", "class_method_signature": "HibernateQueryTranslator.isNull(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notNull", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion notNull(String fieldName)", "full_signature": "@Override public Criterion notNull(String fieldName)", "class_method_signature": "HibernateQueryTranslator.notNull(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion isEmpty(String fieldName)", "full_signature": "@Override public Criterion isEmpty(String fieldName)", "class_method_signature": "HibernateQueryTranslator.isEmpty(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion notEmpty(String fieldName)", "full_signature": "@Override public Criterion notEmpty(String fieldName)", "class_method_signature": "HibernateQueryTranslator.notEmpty(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "within", "parameters": "(\n            String xFieldName, String yFieldName, Box<N> box)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion within(\n            String xFieldName, String yFieldName, Box<N> box)", "full_signature": "@Override public Criterion within(\n            String xFieldName, String yFieldName, Box<N> box)", "class_method_signature": "HibernateQueryTranslator.within(\n            String xFieldName, String yFieldName, Box<N> box)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(Criterion... subqueries)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion and(Criterion... subqueries)", "full_signature": "@Override public Criterion and(Criterion... subqueries)", "class_method_signature": "HibernateQueryTranslator.and(Criterion... subqueries)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(Criterion... subqueries)", "modifiers": "@Override public", "return": "Criterion", "signature": "Criterion or(Criterion... subqueries)", "full_signature": "@Override public Criterion or(Criterion... subqueries)", "class_method_signature": "HibernateQueryTranslator.or(Criterion... subqueries)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(String fieldName, Ordering.Order o)", "modifiers": "@Override public", "return": "Orders", "signature": "Orders order(String fieldName, Ordering.Order o)", "full_signature": "@Override public Orders order(String fieldName, Ordering.Order o)", "class_method_signature": "HibernateQueryTranslator.order(String fieldName, Ordering.Order o)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(Orders... orders)", "modifiers": "@Override public", "return": "Orders", "signature": "Orders order(Orders... orders)", "full_signature": "@Override public Orders order(Orders... orders)", "class_method_signature": "HibernateQueryTranslator.order(Orders... orders)", "testcase": false, "constructor": false}, {"identifier": "translateProjection", "parameters": "(Query<T, R> query)", "modifiers": "@Override public", "return": "Projection", "signature": "Projection translateProjection(Query<T, R> query)", "full_signature": "@Override public Projection translateProjection(Query<T, R> query)", "class_method_signature": "HibernateQueryTranslator.translateProjection(Query<T, R> query)", "testcase": false, "constructor": false}], "file": "seeking-hibernate/src/main/java/com/eharmony/matching/seeking/translator/hibernate/HibernateQueryTranslator.java"}, "focal_method": {"identifier": "order", "parameters": "(String fieldName, Ordering.Order o)", "modifiers": "@Override public", "return": "Orders", "body": "@Override\n    public Orders order(String fieldName, Ordering.Order o) {\n        return new Orders(Ordering.Order.ASCENDING.equals(o)\n                ? Order.asc(fieldName) : Order.desc(fieldName));\n    }", "signature": "Orders order(String fieldName, Ordering.Order o)", "full_signature": "@Override public Orders order(String fieldName, Ordering.Order o)", "class_method_signature": "HibernateQueryTranslator.order(String fieldName, Ordering.Order o)", "testcase": false, "constructor": false, "invocations": ["equals", "asc", "desc"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}