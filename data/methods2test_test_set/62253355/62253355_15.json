{"test_class": {"identifier": "BalanaPDPTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private BalanaPDP pdp;", "modifier": "private", "type": "BalanaPDP", "declarator": "pdp", "var_name": "pdp"}, {"original_string": "private BalanaPRP prp;", "modifier": "private", "type": "BalanaPRP", "declarator": "prp", "var_name": "prp"}, {"original_string": "private IRI policy1 = VALUE_FACTORY.createIRI(\"http://mobi.com/policies/policy1\");", "modifier": "private", "type": "IRI", "declarator": "policy1 = VALUE_FACTORY.createIRI(\"http://mobi.com/policies/policy1\")", "var_name": "policy1"}, {"original_string": "private IRI policy2 = VALUE_FACTORY.createIRI(\"http://mobi.com/policies/policy2\");", "modifier": "private", "type": "IRI", "declarator": "policy2 = VALUE_FACTORY.createIRI(\"http://mobi.com/policies/policy2\")", "var_name": "policy2"}, {"original_string": "private IRI policy3 = VALUE_FACTORY.createIRI(\"http://mobi.com/policies/policy3\");", "modifier": "private", "type": "IRI", "declarator": "policy3 = VALUE_FACTORY.createIRI(\"http://mobi.com/policies/policy3\")", "var_name": "policy3"}, {"original_string": "private IRI userX = VALUE_FACTORY.createIRI(\"http://mobi.com/users/UserX\");", "modifier": "private", "type": "IRI", "declarator": "userX = VALUE_FACTORY.createIRI(\"http://mobi.com/users/UserX\")", "var_name": "userX"}, {"original_string": "private IRI resource = VALUE_FACTORY.createIRI(\"http://mobi.com/catalog-local\");", "modifier": "private", "type": "IRI", "declarator": "resource = VALUE_FACTORY.createIRI(\"http://mobi.com/catalog-local\")", "var_name": "resource"}, {"original_string": "private IRI createAction = VALUE_FACTORY.createIRI(\"http://mobi.com/ontologies/policy#Create\");", "modifier": "private", "type": "IRI", "declarator": "createAction = VALUE_FACTORY.createIRI(\"http://mobi.com/ontologies/policy#Create\")", "var_name": "createAction"}, {"original_string": "private Literal actionType = VALUE_FACTORY.createLiteral(\"http://mobi.com/ontologies/ontology-editor#OntologyRecord\");", "modifier": "private", "type": "Literal", "declarator": "actionType = VALUE_FACTORY.createLiteral(\"http://mobi.com/ontologies/ontology-editor#OntologyRecord\")", "var_name": "actionType"}, {"original_string": "private JAXBContext jaxbContext;", "modifier": "private", "type": "JAXBContext", "declarator": "jaxbContext", "var_name": "jaxbContext"}, {"original_string": "@Mock\n    private PIP pip;", "modifier": "@Mock\n    private", "type": "PIP", "declarator": "pip", "var_name": "pip"}, {"original_string": "@Mock\n    private PolicyCache policyCache;", "modifier": "@Mock\n    private", "type": "PolicyCache", "declarator": "policyCache", "var_name": "policyCache"}, {"original_string": "@Mock\n    private XACMLPolicyManager policyManager;", "modifier": "@Mock\n    private", "type": "XACMLPolicyManager", "declarator": "policyManager", "var_name": "policyManager"}, {"original_string": "@Mock\n    private Cache<String, Policy> cache;", "modifier": "@Mock\n    private", "type": "Cache<String, Policy>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private List<Cache.Entry<String, Policy>> entries;", "modifier": "private", "type": "List<Cache.Entry<String, Policy>>", "declarator": "entries", "var_name": "entries"}], "file": "com.mobi.security.policy.impl.xacml/src/test/java/com/mobi/security/policy/impl/xacml/BalanaPDPTest.java"}, "test_case": {"identifier": "missingAttributeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void missingAttributeTest() throws Exception {\n        // Setup:\n        loadPolicy(policy2);\n        BalanaRequest.Builder builder = new BalanaRequest.Builder(userX, resource, createAction, OffsetDateTime.now(), VALUE_FACTORY, jaxbContext);\n        builder.addActionAttr(Resource.type_IRI, actionType);\n\n        Response result = pdp.evaluate(builder.build());\n        assertEquals(Decision.DENY, result.getDecision());\n        assertEquals(Status.OK, result.getStatus());\n        assertTrue(result.getPolicyIds().contains(policy2));\n    }", "signature": "void missingAttributeTest()", "full_signature": "@Test public void missingAttributeTest()", "class_method_signature": "BalanaPDPTest.missingAttributeTest()", "testcase": true, "constructor": false, "invocations": ["loadPolicy", "now", "addActionAttr", "evaluate", "build", "assertEquals", "getDecision", "assertEquals", "getStatus", "assertTrue", "contains", "getPolicyIds"]}, "focal_class": {"identifier": "BalanaPDP", "superclass": "", "interfaces": "implements PDP", "fields": [{"original_string": "private Set<PIP> pips = new HashSet<>();", "modifier": "private", "type": "Set<PIP>", "declarator": "pips = new HashSet<>()", "var_name": "pips"}, {"original_string": "private BalanaPRP balanaPRP;", "modifier": "private", "type": "BalanaPRP", "declarator": "balanaPRP", "var_name": "balanaPRP"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private Balana balana;", "modifier": "private", "type": "Balana", "declarator": "balana", "var_name": "balana"}, {"original_string": "protected JAXBContext jaxbContext;", "modifier": "protected", "type": "JAXBContext", "declarator": "jaxbContext", "var_name": "jaxbContext"}], "methods": [{"identifier": "setUp", "parameters": "()", "modifiers": "@Activate public", "return": "void", "signature": "void setUp()", "full_signature": "@Activate public void setUp()", "class_method_signature": "BalanaPDP.setUp()", "testcase": false, "constructor": false}, {"identifier": "addPIP", "parameters": "(PIP pip)", "modifiers": "@Reference(type = '*', dynamic = true)", "return": "void", "signature": "void addPIP(PIP pip)", "full_signature": "@Reference(type = '*', dynamic = true) void addPIP(PIP pip)", "class_method_signature": "BalanaPDP.addPIP(PIP pip)", "testcase": false, "constructor": false}, {"identifier": "removePIP", "parameters": "(PIP pip)", "modifiers": "", "return": "void", "signature": "void removePIP(PIP pip)", "full_signature": " void removePIP(PIP pip)", "class_method_signature": "BalanaPDP.removePIP(PIP pip)", "testcase": false, "constructor": false}, {"identifier": "setBalanaPRP", "parameters": "(BalanaPRP balanaPRP)", "modifiers": "@Reference", "return": "void", "signature": "void setBalanaPRP(BalanaPRP balanaPRP)", "full_signature": "@Reference void setBalanaPRP(BalanaPRP balanaPRP)", "class_method_signature": "BalanaPDP.setBalanaPRP(BalanaPRP balanaPRP)", "testcase": false, "constructor": false}, {"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference void setVf(ValueFactory vf)", "class_method_signature": "BalanaPDP.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "createRequest", "parameters": "(IRI subjectId, Map<String, Literal> subjectAttrs, IRI resourceId,\n                                 Map<String, Literal> resourceAttrs, IRI actionId, Map<String, Literal> actionAttrs)", "modifiers": "@Override public", "return": "Request", "signature": "Request createRequest(IRI subjectId, Map<String, Literal> subjectAttrs, IRI resourceId,\n                                 Map<String, Literal> resourceAttrs, IRI actionId, Map<String, Literal> actionAttrs)", "full_signature": "@Override public Request createRequest(IRI subjectId, Map<String, Literal> subjectAttrs, IRI resourceId,\n                                 Map<String, Literal> resourceAttrs, IRI actionId, Map<String, Literal> actionAttrs)", "class_method_signature": "BalanaPDP.createRequest(IRI subjectId, Map<String, Literal> subjectAttrs, IRI resourceId,\n                                 Map<String, Literal> resourceAttrs, IRI actionId, Map<String, Literal> actionAttrs)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Request request)", "modifiers": "@Override public", "return": "Response", "signature": "Response evaluate(Request request)", "full_signature": "@Override public Response evaluate(Request request)", "class_method_signature": "BalanaPDP.evaluate(Request request)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Request request, IRI policyAlgorithm)", "modifiers": "@Override public", "return": "Response", "signature": "Response evaluate(Request request, IRI policyAlgorithm)", "full_signature": "@Override public Response evaluate(Request request, IRI policyAlgorithm)", "class_method_signature": "BalanaPDP.evaluate(Request request, IRI policyAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "getPDP", "parameters": "(IRI policyAlgorithm)", "modifiers": "private", "return": "org.wso2.balana.PDP", "signature": "org.wso2.balana.PDP getPDP(IRI policyAlgorithm)", "full_signature": "private org.wso2.balana.PDP getPDP(IRI policyAlgorithm)", "class_method_signature": "BalanaPDP.getPDP(IRI policyAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "getRequest", "parameters": "(Request request)", "modifiers": "private", "return": "BalanaRequest", "signature": "BalanaRequest getRequest(Request request)", "full_signature": "private BalanaRequest getRequest(Request request)", "class_method_signature": "BalanaPDP.getRequest(Request request)", "testcase": false, "constructor": false}, {"identifier": "getAlgorithm", "parameters": "(IRI policyAlgorithm)", "modifiers": "private", "return": "PolicyCombiningAlgorithm", "signature": "PolicyCombiningAlgorithm getAlgorithm(IRI policyAlgorithm)", "full_signature": "private PolicyCombiningAlgorithm getAlgorithm(IRI policyAlgorithm)", "class_method_signature": "BalanaPDP.getAlgorithm(IRI policyAlgorithm)", "testcase": false, "constructor": false}], "file": "com.mobi.security.policy.impl.xacml/src/main/java/com/mobi/security/policy/impl/xacml/BalanaPDP.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Request request)", "modifiers": "@Override public", "return": "Response", "body": "@Override\n    public Response evaluate(Request request) {\n        return evaluate(request, vf.createIRI(POLICY_DENY_OVERRIDES));\n    }", "signature": "Response evaluate(Request request)", "full_signature": "@Override public Response evaluate(Request request)", "class_method_signature": "BalanaPDP.evaluate(Request request)", "testcase": false, "constructor": false, "invocations": ["evaluate", "createIRI"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}