{"test_class": {"identifier": "CSVDataStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CSVDataStore csvDataStore;", "modifier": "private", "type": "CSVDataStore", "declarator": "csvDataStore", "var_name": "csvDataStore"}], "file": "modules/unsupported/csv/src/test/java/org/geotools/data/csv/CSVDataStoreTest.java"}, "test_case": {"identifier": "testOffset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n     public void testOffset() throws FileNotFoundException, IOException {\n         Query query = new Query(Query.ALL);\n         query.setStartIndex(3);\n         SimpleFeatureSource rows = csvDataStore.getFeatureSource();\n         SimpleFeatureCollection matches = rows.getFeatures(query);\n         List<String> offsetCities = Arrays.asList(\"Ottawa\", \"Minneapolis\", \"Lausanne\", \"Victoria\", \"Cape Town\", \"Sydney\");\n         int count = 0;\n         SimpleFeatureIterator iter = matches.features();\n         while(iter.hasNext()) {\n             SimpleFeature f = iter.next();\n             assertTrue(offsetCities.contains(f.getAttribute(\"CITY\")));\n             count++;\n         }\n         iter.close();\n         assertEquals(6, count);\n         assertEquals(6, matches.size());\n         assertEquals(6, rows.getCount(query));\n    \n    \n     }", "signature": "void testOffset()", "full_signature": "@Test public void testOffset()", "class_method_signature": "CSVDataStoreTest.testOffset()", "testcase": true, "constructor": false, "invocations": ["setStartIndex", "getFeatureSource", "getFeatures", "asList", "features", "hasNext", "next", "assertTrue", "contains", "getAttribute", "close", "assertEquals", "assertEquals", "size", "assertEquals", "getCount"]}, "focal_class": {"identifier": "CSVDataStore", "superclass": "extends ContentDataStore", "interfaces": "implements FileDataStore", "fields": [{"original_string": "private final CSVStrategy csvStrategy;", "modifier": "private final", "type": "CSVStrategy", "declarator": "csvStrategy", "var_name": "csvStrategy"}, {"original_string": "private final CSVFileState csvFileState;", "modifier": "private final", "type": "CSVFileState", "declarator": "csvFileState", "var_name": "csvFileState"}], "methods": [{"identifier": "CSVDataStore", "parameters": "(CSVFileState csvFileState, CSVStrategy csvStrategy)", "modifiers": "public", "return": "", "signature": " CSVDataStore(CSVFileState csvFileState, CSVStrategy csvStrategy)", "full_signature": "public  CSVDataStore(CSVFileState csvFileState, CSVStrategy csvStrategy)", "class_method_signature": "CSVDataStore.CSVDataStore(CSVFileState csvFileState, CSVStrategy csvStrategy)", "testcase": false, "constructor": true}, {"identifier": "getTypeName", "parameters": "()", "modifiers": "public", "return": "Name", "signature": "Name getTypeName()", "full_signature": "public Name getTypeName()", "class_method_signature": "CSVDataStore.getTypeName()", "testcase": false, "constructor": false}, {"identifier": "createTypeNames", "parameters": "()", "modifiers": "@Override protected", "return": "List<Name>", "signature": "List<Name> createTypeNames()", "full_signature": "@Override protected List<Name> createTypeNames()", "class_method_signature": "CSVDataStore.createTypeNames()", "testcase": false, "constructor": false}, {"identifier": "createFeatureSource", "parameters": "(ContentEntry entry)", "modifiers": "@Override protected", "return": "ContentFeatureSource", "signature": "ContentFeatureSource createFeatureSource(ContentEntry entry)", "full_signature": "@Override protected ContentFeatureSource createFeatureSource(ContentEntry entry)", "class_method_signature": "CSVDataStore.createFeatureSource(ContentEntry entry)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "()", "modifiers": "@Override public", "return": "SimpleFeatureType", "signature": "SimpleFeatureType getSchema()", "full_signature": "@Override public SimpleFeatureType getSchema()", "class_method_signature": "CSVDataStore.getSchema()", "testcase": false, "constructor": false}, {"identifier": "updateSchema", "parameters": "(SimpleFeatureType featureType)", "modifiers": "@Override public", "return": "void", "signature": "void updateSchema(SimpleFeatureType featureType)", "full_signature": "@Override public void updateSchema(SimpleFeatureType featureType)", "class_method_signature": "CSVDataStore.updateSchema(SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "getFeatureSource", "parameters": "()", "modifiers": "@Override public", "return": "SimpleFeatureSource", "signature": "SimpleFeatureSource getFeatureSource()", "full_signature": "@Override public SimpleFeatureSource getFeatureSource()", "class_method_signature": "CSVDataStore.getFeatureSource()", "testcase": false, "constructor": false}, {"identifier": "getFeatureReader", "parameters": "()", "modifiers": "@Override public", "return": "FeatureReader<SimpleFeatureType, SimpleFeature>", "signature": "FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader()", "full_signature": "@Override public FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader()", "class_method_signature": "CSVDataStore.getFeatureReader()", "testcase": false, "constructor": false}, {"identifier": "getFeatureWriter", "parameters": "(Filter filter,\n            Transaction transaction)", "modifiers": "@Override public", "return": "FeatureWriter<SimpleFeatureType, SimpleFeature>", "signature": "FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriter(Filter filter,\n            Transaction transaction)", "full_signature": "@Override public FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriter(Filter filter,\n            Transaction transaction)", "class_method_signature": "CSVDataStore.getFeatureWriter(Filter filter,\n            Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getFeatureWriter", "parameters": "(Transaction transaction)", "modifiers": "@Override public", "return": "FeatureWriter<SimpleFeatureType, SimpleFeature>", "signature": "FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriter(Transaction transaction)", "full_signature": "@Override public FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriter(Transaction transaction)", "class_method_signature": "CSVDataStore.getFeatureWriter(Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getFeatureWriterAppend", "parameters": "(\n            Transaction transaction)", "modifiers": "@Override public", "return": "FeatureWriter<SimpleFeatureType, SimpleFeature>", "signature": "FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriterAppend(\n            Transaction transaction)", "full_signature": "@Override public FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriterAppend(\n            Transaction transaction)", "class_method_signature": "CSVDataStore.getFeatureWriterAppend(\n            Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getCSVStrategy", "parameters": "()", "modifiers": "public", "return": "CSVStrategy", "signature": "CSVStrategy getCSVStrategy()", "full_signature": "public CSVStrategy getCSVStrategy()", "class_method_signature": "CSVDataStore.getCSVStrategy()", "testcase": false, "constructor": false}, {"identifier": "createSchema", "parameters": "(SimpleFeatureType featureType)", "modifiers": "@Override public", "return": "void", "signature": "void createSchema(SimpleFeatureType featureType)", "full_signature": "@Override public void createSchema(SimpleFeatureType featureType)", "class_method_signature": "CSVDataStore.createSchema(SimpleFeatureType featureType)", "testcase": false, "constructor": false}], "file": "modules/unsupported/csv/src/main/java/org/geotools/data/csv/CSVDataStore.java"}, "focal_method": {"identifier": "getFeatureSource", "parameters": "()", "modifiers": "@Override public", "return": "SimpleFeatureSource", "body": "@Override\n    public SimpleFeatureSource getFeatureSource() throws IOException {\n        return new CSVFeatureSource(this);\n    }", "signature": "SimpleFeatureSource getFeatureSource()", "full_signature": "@Override public SimpleFeatureSource getFeatureSource()", "class_method_signature": "CSVDataStore.getFeatureSource()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}