{"test_class": {"identifier": "PrefixedPatternDefinitionResolverTest", "superclass": "", "interfaces": "", "fields": [], "file": "tiles-core/src/test/java/org/apache/tiles/definition/pattern/PrefixedPatternDefinitionResolverTest.java"}, "test_case": {"identifier": "testAddDefinitionsAsPatternMatchers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddDefinitionsAsPatternMatchers() {\n        DefinitionPatternMatcherFactory factory1 = createMock(DefinitionPatternMatcherFactory.class);\n        DefinitionPatternMatcherFactory factory2 = createMock(DefinitionPatternMatcherFactory.class);\n        DefinitionPatternMatcher matcher1 = createMock(DefinitionPatternMatcher.class);\n        DefinitionPatternMatcher matcher2 = createMock(DefinitionPatternMatcher.class);\n        Definition definition1 = new Definition(\"DF1:definition1\", (Attribute) null, null);\n        Definition definition2 = new Definition(\"DF2:definition2\", (Attribute) null, null);\n        Definition definition3 = new Definition(\"noLanguageHere\", (Attribute) null, null);\n\n        expect(factory1.createDefinitionPatternMatcher(\"definition1\", definition1)).andReturn(matcher1);\n        expect(factory2.createDefinitionPatternMatcher(\"definition2\", definition2)).andReturn(matcher2);\n\n        replay(factory1, factory2, matcher1, matcher2);\n\n        PrefixedPatternDefinitionResolver<Integer> resolver = new PrefixedPatternDefinitionResolver<Integer>();\n        resolver.registerDefinitionPatternMatcherFactory(\"DF1\", factory1);\n        resolver.registerDefinitionPatternMatcherFactory(\"DF2\", factory2);\n        List<DefinitionPatternMatcher> matchers = new ArrayList<DefinitionPatternMatcher>();\n        Map<String, Definition> definitions = new LinkedHashMap<String, Definition>();\n        definitions.put(\"DF1:definition1\", definition1);\n        definitions.put(\"DF2:definition2\", definition2);\n        definitions.put(\"noLanguageHere\", definition3);\n\n        resolver.addDefinitionsAsPatternMatchers(matchers, definitions);\n\n        assertEquals(2, matchers.size());\n        assertEquals(matcher1, matchers.get(0));\n        assertEquals(matcher2, matchers.get(1));\n\n        verify(factory1, factory2, matcher1, matcher2);\n    }", "signature": "void testAddDefinitionsAsPatternMatchers()", "full_signature": "@Test public void testAddDefinitionsAsPatternMatchers()", "class_method_signature": "PrefixedPatternDefinitionResolverTest.testAddDefinitionsAsPatternMatchers()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "createMock", "andReturn", "expect", "createDefinitionPatternMatcher", "andReturn", "expect", "createDefinitionPatternMatcher", "replay", "registerDefinitionPatternMatcherFactory", "registerDefinitionPatternMatcherFactory", "put", "put", "put", "addDefinitionsAsPatternMatchers", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "verify"]}, "focal_class": {"identifier": "PrefixedPatternDefinitionResolver", "superclass": "extends\n        AbstractPatternDefinitionResolver<T>", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private Map<String, DefinitionPatternMatcherFactory> language2matcherFactory;", "modifier": "private", "type": "Map<String, DefinitionPatternMatcherFactory>", "declarator": "language2matcherFactory", "var_name": "language2matcherFactory"}], "methods": [{"identifier": "PrefixedPatternDefinitionResolver", "parameters": "()", "modifiers": "public", "return": "", "signature": " PrefixedPatternDefinitionResolver()", "full_signature": "public  PrefixedPatternDefinitionResolver()", "class_method_signature": "PrefixedPatternDefinitionResolver.PrefixedPatternDefinitionResolver()", "testcase": false, "constructor": true}, {"identifier": "registerDefinitionPatternMatcherFactory", "parameters": "(String language,\n            DefinitionPatternMatcherFactory factory)", "modifiers": "public", "return": "void", "signature": "void registerDefinitionPatternMatcherFactory(String language,\n            DefinitionPatternMatcherFactory factory)", "full_signature": "public void registerDefinitionPatternMatcherFactory(String language,\n            DefinitionPatternMatcherFactory factory)", "class_method_signature": "PrefixedPatternDefinitionResolver.registerDefinitionPatternMatcherFactory(String language,\n            DefinitionPatternMatcherFactory factory)", "testcase": false, "constructor": false}, {"identifier": "addDefinitionsAsPatternMatchers", "parameters": "(\n            List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "modifiers": "@Override protected", "return": "Map<String, Definition>", "signature": "Map<String, Definition> addDefinitionsAsPatternMatchers(\n            List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "full_signature": "@Override protected Map<String, Definition> addDefinitionsAsPatternMatchers(\n            List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "class_method_signature": "PrefixedPatternDefinitionResolver.addDefinitionsAsPatternMatchers(\n            List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "testcase": false, "constructor": false}], "file": "tiles-core/src/main/java/org/apache/tiles/definition/pattern/PrefixedPatternDefinitionResolver.java"}, "focal_method": {"identifier": "addDefinitionsAsPatternMatchers", "parameters": "(\n            List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "modifiers": "@Override protected", "return": "Map<String, Definition>", "body": "@Override\n    protected Map<String, Definition> addDefinitionsAsPatternMatchers(\n            List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap) {\n        Set<String> excludedKeys = new LinkedHashSet<String>();\n        for (Map.Entry<String, Definition> entry : defsMap.entrySet()) {\n            String key = entry.getKey();\n            Expression expression = Expression\n                    .createExpressionFromDescribedExpression(key);\n            if (expression.getLanguage() != null) {\n                DefinitionPatternMatcherFactory factory = language2matcherFactory\n                        .get(expression.getLanguage());\n                if (factory != null) {\n                    DefinitionPatternMatcher matcher = factory\n                            .createDefinitionPatternMatcher(expression\n                                    .getExpression(), new Definition(entry\n                                    .getValue()));\n                    matchers.add(matcher);\n                } else {\n                    logger.warn(\"Cannot find a DefinitionPatternMatcherFactory for expression '{}'\",\n                            key);\n                }\n            } else {\n                excludedKeys.add(key);\n            }\n        }\n        return PatternUtil.createExtractedMap(defsMap, excludedKeys);\n    }", "signature": "Map<String, Definition> addDefinitionsAsPatternMatchers(\n            List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "full_signature": "@Override protected Map<String, Definition> addDefinitionsAsPatternMatchers(\n            List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "class_method_signature": "PrefixedPatternDefinitionResolver.addDefinitionsAsPatternMatchers(\n            List<DefinitionPatternMatcher> matchers,\n            Map<String, Definition> defsMap)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "createExpressionFromDescribedExpression", "getLanguage", "get", "getLanguage", "createDefinitionPatternMatcher", "getExpression", "getValue", "add", "warn", "add", "createExtractedMap"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}