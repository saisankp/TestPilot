{"test_class": {"identifier": "FPGAttributeSetTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/edu/stanford/futuredata/macrobase/analysis/summary/fpg/result/FPGAttributeSetTest.java"}, "test_case": {"identifier": "testSimple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSimple() throws Exception {\n        Map<String, String> v1 = new HashMap<>();\n        v1.put(\"c1\", \"val1\");\n        v1.put(\"c2\", \"val2\");\n\n        Map<String, String> v2 = new HashMap<>();\n        v2.put(\"c2\", \"val2\");\n\n        FPGAttributeSet a1 = new FPGAttributeSet(\n                .2, 10.0, 21.2, v1\n        );\n        FPGAttributeSet a2 = new FPGAttributeSet(\n                .7, 30.0, 25.0, v2\n        );\n\n        assertTrue(a1.contains(a2));\n    }", "signature": "void testSimple()", "full_signature": "@Test public void testSimple()", "class_method_signature": "FPGAttributeSetTest.testSimple()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "assertTrue", "contains"]}, "focal_class": {"identifier": "FPGAttributeSet", "superclass": "", "interfaces": "implements Comparable<FPGAttributeSet>", "fields": [{"original_string": "private double support;", "modifier": "private", "type": "double", "declarator": "support", "var_name": "support"}, {"original_string": "private long numRecords;", "modifier": "private", "type": "long", "declarator": "numRecords", "var_name": "numRecords"}, {"original_string": "private double ratioToInliers;", "modifier": "private", "type": "double", "declarator": "ratioToInliers", "var_name": "ratioToInliers"}, {"original_string": "private Map<String, String> items = new HashMap<>();", "modifier": "private", "type": "Map<String, String>", "declarator": "items = new HashMap<>()", "var_name": "items"}], "methods": [{"identifier": "FPGAttributeSet", "parameters": "(FPGItemsetResult its, AttributeEncoder encoder)", "modifiers": "public", "return": "", "signature": " FPGAttributeSet(FPGItemsetResult its, AttributeEncoder encoder)", "full_signature": "public  FPGAttributeSet(FPGItemsetResult its, AttributeEncoder encoder)", "class_method_signature": "FPGAttributeSet.FPGAttributeSet(FPGItemsetResult its, AttributeEncoder encoder)", "testcase": false, "constructor": true}, {"identifier": "FPGAttributeSet", "parameters": "(double support,\n                           double numRecords,\n                           double ratioToInliers,\n                           Map<String, String> items)", "modifiers": "public", "return": "", "signature": " FPGAttributeSet(double support,\n                           double numRecords,\n                           double ratioToInliers,\n                           Map<String, String> items)", "full_signature": "public  FPGAttributeSet(double support,\n                           double numRecords,\n                           double ratioToInliers,\n                           Map<String, String> items)", "class_method_signature": "FPGAttributeSet.FPGAttributeSet(double support,\n                           double numRecords,\n                           double ratioToInliers,\n                           Map<String, String> items)", "testcase": false, "constructor": true}, {"identifier": "contains", "parameters": "(FPGAttributeSet other)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(FPGAttributeSet other)", "full_signature": "public boolean contains(FPGAttributeSet other)", "class_method_signature": "FPGAttributeSet.contains(FPGAttributeSet other)", "testcase": false, "constructor": false}, {"identifier": "prettyPrint", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String prettyPrint()", "full_signature": "public String prettyPrint()", "class_method_signature": "FPGAttributeSet.prettyPrint()", "testcase": false, "constructor": false}, {"identifier": "getSupport", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSupport()", "full_signature": "public double getSupport()", "class_method_signature": "FPGAttributeSet.getSupport()", "testcase": false, "constructor": false}, {"identifier": "getNumRecords", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getNumRecords()", "full_signature": "public double getNumRecords()", "class_method_signature": "FPGAttributeSet.getNumRecords()", "testcase": false, "constructor": false}, {"identifier": "getRatioToInliers", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRatioToInliers()", "full_signature": "public double getRatioToInliers()", "class_method_signature": "FPGAttributeSet.getRatioToInliers()", "testcase": false, "constructor": false}, {"identifier": "setRatioToInliers", "parameters": "(double ratio)", "modifiers": "public", "return": "void", "signature": "void setRatioToInliers(double ratio)", "full_signature": "public void setRatioToInliers(double ratio)", "class_method_signature": "FPGAttributeSet.setRatioToInliers(double ratio)", "testcase": false, "constructor": false}, {"identifier": "getItems", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getItems()", "full_signature": "public Map<String, String> getItems()", "class_method_signature": "FPGAttributeSet.getItems()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FPGAttributeSet.toString()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(FPGAttributeSet o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(FPGAttributeSet o)", "full_signature": "@Override public int compareTo(FPGAttributeSet o)", "class_method_signature": "FPGAttributeSet.compareTo(FPGAttributeSet o)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/edu/stanford/futuredata/macrobase/analysis/summary/fpg/result/FPGAttributeSet.java"}, "focal_method": {"identifier": "contains", "parameters": "(FPGAttributeSet other)", "modifiers": "public", "return": "boolean", "body": "public boolean contains(FPGAttributeSet other) {\n        Map<String, String> otherItems = other.items;\n        for (Map.Entry<String, String> oEntry : otherItems.entrySet()) {\n            String colName = oEntry.getKey();\n            String colValue = oEntry.getValue();\n            boolean match = false;\n            if (items.containsKey(colName) && items.get(colName).equals(colValue)) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }", "signature": "boolean contains(FPGAttributeSet other)", "full_signature": "public boolean contains(FPGAttributeSet other)", "class_method_signature": "FPGAttributeSet.contains(FPGAttributeSet other)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getValue", "containsKey", "equals", "get"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}