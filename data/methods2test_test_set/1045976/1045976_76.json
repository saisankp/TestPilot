{"test_class": {"identifier": "ExceptionCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Gateway gateway;", "modifier": "private", "type": "Gateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "private ExceptionCommand command;", "modifier": "private", "type": "ExceptionCommand", "declarator": "command", "var_name": "command"}, {"original_string": "private BufferedWriter writer;", "modifier": "private", "type": "BufferedWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private StringWriter sWriter;", "modifier": "private", "type": "StringWriter", "declarator": "sWriter", "var_name": "sWriter"}], "file": "py4j-java/src/test/java/py4j/commands/ExceptionCommandTest.java"}, "test_case": {"identifier": "testException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testException() {\n\t\tString id = null;\n\t\ttry {\n\t\t\tthrow new RuntimeException(\"Hello World\");\n\t\t} catch (Exception e) {\n\t\t\tid = \"r\" + gateway.putNewObject(e);\n\t\t}\n\n\t\tString inputCommand = id + \"\\ne\\n\";\n\t\ttry {\n\t\t\tcommand.execute(\"p\", new BufferedReader(new StringReader(inputCommand)), writer);\n\t\t\tSystem.out.println(\"DEBUG!!!\" + sWriter.toString());\n\t\t\tassertTrue(sWriter.toString().startsWith(\"!ysjava.lang.RuntimeException: Hello World\"));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail();\n\t\t}\n\t}", "signature": "void testException()", "full_signature": "@Test public void testException()", "class_method_signature": "ExceptionCommandTest.testException()", "testcase": true, "constructor": false, "invocations": ["putNewObject", "execute", "println", "toString", "assertTrue", "startsWith", "toString", "printStackTrace", "fail"]}, "focal_class": {"identifier": "ExceptionCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "private final Logger logger = Logger.getLogger(ExceptionCommand.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "logger = Logger.getLogger(ExceptionCommand.class.getName())", "var_name": "logger"}, {"original_string": "public final static String EXCEPTION_COMMAND_NAME = \"p\";", "modifier": "public final static", "type": "String", "declarator": "EXCEPTION_COMMAND_NAME = \"p\"", "var_name": "EXCEPTION_COMMAND_NAME"}], "methods": [{"identifier": "ExceptionCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " ExceptionCommand()", "full_signature": "public  ExceptionCommand()", "class_method_signature": "ExceptionCommand.ExceptionCommand()", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "ExceptionCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/commands/ExceptionCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(String commandName, BufferedReader reader, BufferedWriter writer)\n\t\t\tthrows Py4JException, IOException {\n\t\tString returnCommand = null;\n\t\tThrowable exception = (Throwable) Protocol.getObject(reader.readLine(), this.gateway);\n\t\t// EOQ\n\t\treader.readLine();\n\n\t\tString stackTrace = Protocol.getThrowableAsString(exception);\n\t\tReturnObject rObject = ReturnObject.getPrimitiveReturnObject(stackTrace);\n\t\treturnCommand = Protocol.getOutputCommand(rObject);\n\n\t\tlogger.finest(\"Returning command: \" + returnCommand);\n\t\twriter.write(returnCommand);\n\t\twriter.flush();\n\t}", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "ExceptionCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false, "invocations": ["getObject", "readLine", "readLine", "getThrowableAsString", "getPrimitiveReturnObject", "getOutputCommand", "finest", "write", "flush"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}