{"test_class": {"identifier": "OpenNLPParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final OpenNLPParser parser = new OpenNLPParser();", "modifier": "private static final", "type": "OpenNLPParser", "declarator": "parser = new OpenNLPParser()", "var_name": "parser"}], "file": "dialog/src/test/java/roboy/linguistics/sentenceanalysis/OpenNLPParserTest.java"}, "test_case": {"identifier": "testHowAdjective", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n\t@Test\n\tpublic void testHowAdjective() {\n\t\tInterpretation interpretation = new Interpretation(\"How high is Mount Everest ?\");\n\t\tinterpretation = parser.analyze(interpretation);\n\t\tMap<SemanticRole, String> pas = interpretation.getPas();\n\t\tassertEquals(\"is\", pas.get(SemanticRole.PREDICATE));\n\t\tassertEquals(\"Mount Everest\", pas.get(SemanticRole.PATIENT));\n\t\tassertEquals(\"How\", pas.get(SemanticRole.MANNER));\n\t\tassertEquals(\"high\", pas.get(SemanticRole.AGENT)); // bad parser\n\t\t\n\t\tinterpretation = new Interpretation(\"How many people live in Berlin ?\");\n\t\tinterpretation = parser.analyze(interpretation);\n\t\tpas = interpretation.getPas();\n\t\tassertEquals(\"live\", pas.get(SemanticRole.PREDICATE));\n\t\tassertEquals(\"in Berlin\", pas.get(SemanticRole.LOCATION));\n\t\tassertEquals(\"How many people\", pas.get(SemanticRole.AGENT)); // bad parser\n\t}", "signature": "void testHowAdjective()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testHowAdjective()", "class_method_signature": "OpenNLPParserTest.testHowAdjective()", "testcase": true, "constructor": false, "invocations": ["analyze", "getPas", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "analyze", "getPas", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "OpenNLPParser", "superclass": "", "interfaces": "implements Analyzer", "fields": [{"original_string": "private Parser parser;", "modifier": "private", "type": "Parser", "declarator": "parser", "var_name": "parser"}], "methods": [{"identifier": "OpenNLPParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " OpenNLPParser()", "full_signature": "public  OpenNLPParser()", "class_method_signature": "OpenNLPParser.OpenNLPParser()", "testcase": false, "constructor": true}, {"identifier": "analyze", "parameters": "(Interpretation interpretation)", "modifiers": "@Override public", "return": "Interpretation", "signature": "Interpretation analyze(Interpretation interpretation)", "full_signature": "@Override public Interpretation analyze(Interpretation interpretation)", "class_method_signature": "OpenNLPParser.analyze(Interpretation interpretation)", "testcase": false, "constructor": false}, {"identifier": "extractPAS", "parameters": "(Interpretation interpretation, Parse parse)", "modifiers": "private", "return": "Interpretation", "signature": "Interpretation extractPAS(Interpretation interpretation, Parse parse)", "full_signature": "private Interpretation extractPAS(Interpretation interpretation, Parse parse)", "class_method_signature": "OpenNLPParser.extractPAS(Interpretation interpretation, Parse parse)", "testcase": false, "constructor": false}, {"identifier": "top", "parameters": "(Parse parse, Map<SemanticRole, String> result)", "modifiers": "private", "return": "Map<SemanticRole, String>", "signature": "Map<SemanticRole, String> top(Parse parse, Map<SemanticRole, String> result)", "full_signature": "private Map<SemanticRole, String> top(Parse parse, Map<SemanticRole, String> result)", "class_method_signature": "OpenNLPParser.top(Parse parse, Map<SemanticRole, String> result)", "testcase": false, "constructor": false}, {"identifier": "sbar", "parameters": "(Parse parse, Map<SemanticRole, String> result)", "modifiers": "private", "return": "Map<SemanticRole, String>", "signature": "Map<SemanticRole, String> sbar(Parse parse, Map<SemanticRole, String> result)", "full_signature": "private Map<SemanticRole, String> sbar(Parse parse, Map<SemanticRole, String> result)", "class_method_signature": "OpenNLPParser.sbar(Parse parse, Map<SemanticRole, String> result)", "testcase": false, "constructor": false}, {"identifier": "vp", "parameters": "(Parse parse, Map<SemanticRole, String> result)", "modifiers": "private", "return": "Map<SemanticRole, String>", "signature": "Map<SemanticRole, String> vp(Parse parse, Map<SemanticRole, String> result)", "full_signature": "private Map<SemanticRole, String> vp(Parse parse, Map<SemanticRole, String> result)", "class_method_signature": "OpenNLPParser.vp(Parse parse, Map<SemanticRole, String> result)", "testcase": false, "constructor": false}, {"identifier": "parseToString", "parameters": "(Parse parse, int offset)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder parseToString(Parse parse, int offset)", "full_signature": "public StringBuilder parseToString(Parse parse, int offset)", "class_method_signature": "OpenNLPParser.parseToString(Parse parse, int offset)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "OpenNLPParser.main(String[] args)", "testcase": false, "constructor": false}], "file": "dialog/src/main/java/roboy/linguistics/sentenceanalysis/OpenNLPParser.java"}, "focal_method": {"identifier": "analyze", "parameters": "(Interpretation interpretation)", "modifiers": "@Override public", "return": "Interpretation", "body": "@Override\n\tpublic Interpretation analyze(Interpretation interpretation) {\n\t\tString sentence = interpretation.getSentence();\n\t\tif (sentence != null) {\n\t\t\tsentence = sentence.trim();\n\t\t\tif (!sentence.endsWith(\".\")\n\t\t\t\t\t&& !sentence.endsWith(\"?\")\n\t\t\t\t\t&& !sentence.endsWith(\"!\")) {\n\t\t\t\tsentence = sentence + \" .\";\n\t\t\t}\n\t\t\tif (sentence.length() > 0 && Character.isLowerCase(sentence.charAt(0))) {\n\t\t\t\tsentence = Character.toUpperCase(sentence.charAt(0)) + sentence.substring(1, sentence.length());\n\t\t\t}\n\t\t\tParse parse = ParserTool.parseLine(sentence, parser, 1)[0];\n\t\t\tinterpretation = extractPAS(interpretation, parse);\n\t\t}\n\t\treturn interpretation;\n\t}", "signature": "Interpretation analyze(Interpretation interpretation)", "full_signature": "@Override public Interpretation analyze(Interpretation interpretation)", "class_method_signature": "OpenNLPParser.analyze(Interpretation interpretation)", "testcase": false, "constructor": false, "invocations": ["getSentence", "trim", "endsWith", "endsWith", "endsWith", "length", "isLowerCase", "charAt", "toUpperCase", "charAt", "substring", "length", "parseLine", "extractPAS"]}, "repository": {"repo_id": 61996222, "url": "https://github.com/Roboy/roboy_dialog", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 96226, "license": "licensed"}}