{"test_class": {"identifier": "DirectReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String[] inputArray;", "modifier": "private", "type": "String[]", "declarator": "inputArray", "var_name": "inputArray"}, {"original_string": "private BatchOperator input;", "modifier": "private", "type": "BatchOperator", "declarator": "input", "var_name": "input"}], "file": "core/src/test/java/com/alibaba/alink/common/io/directreader/DirectReaderTest.java"}, "test_case": {"identifier": "testDirectRead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDirectRead() {\n\t\tSet<String> inputSet = new HashSet<>(Arrays.asList(inputArray));\n\n\t\tList<Row> collected = DirectReader.directRead(input);\n\n\t\tAssert.assertEquals(inputSet.size(), collected.size());\n\t\tfor (Row r : collected) {\n\t\t\tAssert.assertTrue(inputSet.contains(r.getField(0)));\n\t\t}\n\t}", "signature": "void testDirectRead()", "full_signature": "@Test public void testDirectRead()", "class_method_signature": "DirectReaderTest.testDirectRead()", "testcase": true, "constructor": false, "invocations": ["asList", "directRead", "assertEquals", "size", "size", "assertTrue", "contains", "getField"]}, "focal_class": {"identifier": "DirectReader", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private final static String DIRECT_READER_PREFIX = \"direct.reader\";", "modifier": "private final static", "type": "String", "declarator": "DIRECT_READER_PREFIX = \"direct.reader\"", "var_name": "DIRECT_READER_PREFIX"}, {"original_string": "private final static String DIRECT_READER_CONFIG_FILE_PATH = \"direct_reader.properties\";", "modifier": "private final static", "type": "String", "declarator": "DIRECT_READER_CONFIG_FILE_PATH = \"direct_reader.properties\"", "var_name": "DIRECT_READER_CONFIG_FILE_PATH"}, {"original_string": "private final static ParamInfo <String> POLICY_KEY = ParamInfoFactory\n\t\t.createParamInfo(\"policy\", String.class)\n\t\t.setDescription(\"policy of direct reader\")\n\t\t.setRequired()\n\t\t.build();", "modifier": "private final static", "type": "ParamInfo <String>", "declarator": "POLICY_KEY = ParamInfoFactory\n\t\t.createParamInfo(\"policy\", String.class)\n\t\t.setDescription(\"policy of direct reader\")\n\t\t.setRequired()\n\t\t.build()", "var_name": "POLICY_KEY"}], "methods": [{"identifier": "collect", "parameters": "(BatchOperator<?> model)", "modifiers": "public static", "return": "DataBridge", "signature": "DataBridge collect(BatchOperator<?> model)", "full_signature": "public static DataBridge collect(BatchOperator<?> model)", "class_method_signature": "DirectReader.collect(BatchOperator<?> model)", "testcase": false, "constructor": false}, {"identifier": "directRead", "parameters": "(BatchOperator batchOperator)", "modifiers": "public static", "return": "List <Row>", "signature": "List <Row> directRead(BatchOperator batchOperator)", "full_signature": "public static List <Row> directRead(BatchOperator batchOperator)", "class_method_signature": "DirectReader.directRead(BatchOperator batchOperator)", "testcase": false, "constructor": false}, {"identifier": "directRead", "parameters": "(DataBridge dataBridge)", "modifiers": "public static", "return": "List<Row>", "signature": "List<Row> directRead(DataBridge dataBridge)", "full_signature": "public static List<Row> directRead(DataBridge dataBridge)", "class_method_signature": "DirectReader.directRead(DataBridge dataBridge)", "testcase": false, "constructor": false}, {"identifier": "directRead", "parameters": "(DataBridge dataBridge, FilterFunction <Row> filter)", "modifiers": "public static", "return": "List <Row>", "signature": "List <Row> directRead(DataBridge dataBridge, FilterFunction <Row> filter)", "full_signature": "public static List <Row> directRead(DataBridge dataBridge, FilterFunction <Row> filter)", "class_method_signature": "DirectReader.directRead(DataBridge dataBridge, FilterFunction <Row> filter)", "testcase": false, "constructor": false}, {"identifier": "filterProperties", "parameters": "(Properties properties)", "modifiers": "private static", "return": "Properties", "signature": "Properties filterProperties(Properties properties)", "full_signature": "private static Properties filterProperties(Properties properties)", "class_method_signature": "DirectReader.filterProperties(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "properties2Params", "parameters": "(Properties properties)", "modifiers": "private static", "return": "Params", "signature": "Params properties2Params(Properties properties)", "full_signature": "private static Params properties2Params(Properties properties)", "class_method_signature": "DirectReader.properties2Params(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "readProperties", "parameters": "()", "modifiers": "private static", "return": "Params", "signature": "Params readProperties()", "full_signature": "private static Params readProperties()", "class_method_signature": "DirectReader.readProperties()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/io/directreader/DirectReader.java"}, "focal_method": {"identifier": "directRead", "parameters": "(BatchOperator batchOperator)", "modifiers": "public static", "return": "List <Row>", "body": "public static List <Row> directRead(BatchOperator batchOperator) {\n\t\treturn directRead(collect(batchOperator));\n\t}", "signature": "List <Row> directRead(BatchOperator batchOperator)", "full_signature": "public static List <Row> directRead(BatchOperator batchOperator)", "class_method_signature": "DirectReader.directRead(BatchOperator batchOperator)", "testcase": false, "constructor": false, "invocations": ["directRead", "collect"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}