{"test_class": {"identifier": "InstanceCertManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/InstanceCertManagerTest.java"}, "test_case": {"identifier": "testEmptySSHRecordStoreClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptySSHRecordStoreClass() {\n\n        System.setProperty(ZTSConsts.ZTS_PROP_SSH_RECORD_STORE_FACTORY_CLASS, \"\");\n        InstanceCertManager manager = new InstanceCertManager(null, null, null, true);\n\n        // no exceptions here since with empty factory class\n        // we're not going to process any ssh certs\n\n        assertNull(manager.generateSSHCertificates(null, null));\n        System.clearProperty(ZTSConsts.ZTS_PROP_SSH_RECORD_STORE_FACTORY_CLASS);\n    }", "signature": "void testEmptySSHRecordStoreClass()", "full_signature": "@Test public void testEmptySSHRecordStoreClass()", "class_method_signature": "InstanceCertManagerTest.testEmptySSHRecordStoreClass()", "testcase": true, "constructor": false, "invocations": ["setProperty", "assertNull", "generateSSHCertificates", "clearProperty"]}, "focal_class": {"identifier": "InstanceCertManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(InstanceCertManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(InstanceCertManager.class)", "var_name": "LOGGER"}, {"original_string": "private static final String CA_TYPE_X509 = \"x509\";", "modifier": "private static final", "type": "String", "declarator": "CA_TYPE_X509 = \"x509\"", "var_name": "CA_TYPE_X509"}, {"original_string": "private Authorizer authorizer;", "modifier": "private", "type": "Authorizer", "declarator": "authorizer", "var_name": "authorizer"}, {"original_string": "private CertSigner certSigner;", "modifier": "private", "type": "CertSigner", "declarator": "certSigner", "var_name": "certSigner"}, {"original_string": "private SSHSigner sshSigner;", "modifier": "private", "type": "SSHSigner", "declarator": "sshSigner", "var_name": "sshSigner"}, {"original_string": "private HostnameResolver hostnameResolver;", "modifier": "private", "type": "HostnameResolver", "declarator": "hostnameResolver", "var_name": "hostnameResolver"}, {"original_string": "private CertRecordStore certStore = null;", "modifier": "private", "type": "CertRecordStore", "declarator": "certStore = null", "var_name": "certStore"}, {"original_string": "private SSHRecordStore sshStore = null;", "modifier": "private", "type": "SSHRecordStore", "declarator": "sshStore = null", "var_name": "sshStore"}, {"original_string": "private ScheduledExecutorService certScheduledExecutor;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "certScheduledExecutor", "var_name": "certScheduledExecutor"}, {"original_string": "private ScheduledExecutorService sshScheduledExecutor;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "sshScheduledExecutor", "var_name": "sshScheduledExecutor"}, {"original_string": "private List<IPBlock> certRefreshIPBlocks;", "modifier": "private", "type": "List<IPBlock>", "declarator": "certRefreshIPBlocks", "var_name": "certRefreshIPBlocks"}, {"original_string": "private Map<String, List<IPBlock>> instanceCertIPBlocks;", "modifier": "private", "type": "Map<String, List<IPBlock>>", "declarator": "instanceCertIPBlocks", "var_name": "instanceCertIPBlocks"}, {"original_string": "private String caX509CertificateSigner = null;", "modifier": "private", "type": "String", "declarator": "caX509CertificateSigner = null", "var_name": "caX509CertificateSigner"}, {"original_string": "private String sshUserCertificateSigner = null;", "modifier": "private", "type": "String", "declarator": "sshUserCertificateSigner = null", "var_name": "sshUserCertificateSigner"}, {"original_string": "private String sshHostCertificateSigner = null;", "modifier": "private", "type": "String", "declarator": "sshHostCertificateSigner = null", "var_name": "sshHostCertificateSigner"}, {"original_string": "private boolean responseSendSSHSignerCerts;", "modifier": "private", "type": "boolean", "declarator": "responseSendSSHSignerCerts", "var_name": "responseSendSSHSignerCerts"}, {"original_string": "private boolean responseSendX509SignerCerts;", "modifier": "private", "type": "boolean", "declarator": "responseSendX509SignerCerts", "var_name": "responseSendX509SignerCerts"}, {"original_string": "private ObjectMapper jsonMapper;", "modifier": "private", "type": "ObjectMapper", "declarator": "jsonMapper", "var_name": "jsonMapper"}, {"original_string": "private Map<String, CertificateAuthorityBundle> certAuthorityBundles = null;", "modifier": "private", "type": "Map<String, CertificateAuthorityBundle>", "declarator": "certAuthorityBundles = null", "var_name": "certAuthorityBundles"}], "methods": [{"identifier": "InstanceCertManager", "parameters": "(final PrivateKeyStore keyStore, Authorizer authorizer, HostnameResolver hostnameResolver,\n            boolean readOnlyMode)", "modifiers": "public", "return": "", "signature": " InstanceCertManager(final PrivateKeyStore keyStore, Authorizer authorizer, HostnameResolver hostnameResolver,\n            boolean readOnlyMode)", "full_signature": "public  InstanceCertManager(final PrivateKeyStore keyStore, Authorizer authorizer, HostnameResolver hostnameResolver,\n            boolean readOnlyMode)", "class_method_signature": "InstanceCertManager.InstanceCertManager(final PrivateKeyStore keyStore, Authorizer authorizer, HostnameResolver hostnameResolver,\n            boolean readOnlyMode)", "testcase": false, "constructor": true}, {"identifier": "shutdown", "parameters": "()", "modifiers": "", "return": "void", "signature": "void shutdown()", "full_signature": " void shutdown()", "class_method_signature": "InstanceCertManager.shutdown()", "testcase": false, "constructor": false}, {"identifier": "loadCertificateAuthorityBundles", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean loadCertificateAuthorityBundles()", "full_signature": "private boolean loadCertificateAuthorityBundles()", "class_method_signature": "InstanceCertManager.loadCertificateAuthorityBundles()", "testcase": false, "constructor": false}, {"identifier": "processCertificateAuthorityBundle", "parameters": "(CertBundle bundle)", "modifiers": "private", "return": "boolean", "signature": "boolean processCertificateAuthorityBundle(CertBundle bundle)", "full_signature": "private boolean processCertificateAuthorityBundle(CertBundle bundle)", "class_method_signature": "InstanceCertManager.processCertificateAuthorityBundle(CertBundle bundle)", "testcase": false, "constructor": false}, {"identifier": "extractX509CertificateBundle", "parameters": "(final String filename)", "modifiers": "", "return": "String", "signature": "String extractX509CertificateBundle(final String filename)", "full_signature": " String extractX509CertificateBundle(final String filename)", "class_method_signature": "InstanceCertManager.extractX509CertificateBundle(final String filename)", "testcase": false, "constructor": false}, {"identifier": "loadAllowedInstanceCertIPAddresses", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean loadAllowedInstanceCertIPAddresses()", "full_signature": "private boolean loadAllowedInstanceCertIPAddresses()", "class_method_signature": "InstanceCertManager.loadAllowedInstanceCertIPAddresses()", "testcase": false, "constructor": false}, {"identifier": "loadCertSigner", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadCertSigner()", "full_signature": "private void loadCertSigner()", "class_method_signature": "InstanceCertManager.loadCertSigner()", "testcase": false, "constructor": false}, {"identifier": "loadSSHSigner", "parameters": "(Authorizer authorizer)", "modifiers": "private", "return": "void", "signature": "void loadSSHSigner(Authorizer authorizer)", "full_signature": "private void loadSSHSigner(Authorizer authorizer)", "class_method_signature": "InstanceCertManager.loadSSHSigner(Authorizer authorizer)", "testcase": false, "constructor": false}, {"identifier": "setSSHSigner", "parameters": "(SSHSigner sshSigner)", "modifiers": "", "return": "void", "signature": "void setSSHSigner(SSHSigner sshSigner)", "full_signature": " void setSSHSigner(SSHSigner sshSigner)", "class_method_signature": "InstanceCertManager.setSSHSigner(SSHSigner sshSigner)", "testcase": false, "constructor": false}, {"identifier": "setCertSigner", "parameters": "(CertSigner certSigner)", "modifiers": "", "return": "void", "signature": "void setCertSigner(CertSigner certSigner)", "full_signature": " void setCertSigner(CertSigner certSigner)", "class_method_signature": "InstanceCertManager.setCertSigner(CertSigner certSigner)", "testcase": false, "constructor": false}, {"identifier": "getFilePath", "parameters": "(File file)", "modifiers": "", "return": "Path", "signature": "Path getFilePath(File file)", "full_signature": " Path getFilePath(File file)", "class_method_signature": "InstanceCertManager.getFilePath(File file)", "testcase": false, "constructor": false}, {"identifier": "readFileContents", "parameters": "(final String filename)", "modifiers": "", "return": "byte[]", "signature": "byte[] readFileContents(final String filename)", "full_signature": " byte[] readFileContents(final String filename)", "class_method_signature": "InstanceCertManager.readFileContents(final String filename)", "testcase": false, "constructor": false}, {"identifier": "loadCertificateBundle", "parameters": "(final String propertyName)", "modifiers": "", "return": "String", "signature": "String loadCertificateBundle(final String propertyName)", "full_signature": " String loadCertificateBundle(final String propertyName)", "class_method_signature": "InstanceCertManager.loadCertificateBundle(final String propertyName)", "testcase": false, "constructor": false}, {"identifier": "loadAllowedIPAddresses", "parameters": "(List<IPBlock> ipBlocks, final String ipAddressFileName)", "modifiers": "", "return": "boolean", "signature": "boolean loadAllowedIPAddresses(List<IPBlock> ipBlocks, final String ipAddressFileName)", "full_signature": " boolean loadAllowedIPAddresses(List<IPBlock> ipBlocks, final String ipAddressFileName)", "class_method_signature": "InstanceCertManager.loadAllowedIPAddresses(List<IPBlock> ipBlocks, final String ipAddressFileName)", "testcase": false, "constructor": false}, {"identifier": "loadCertificateObjectStore", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "private", "return": "void", "signature": "void loadCertificateObjectStore(PrivateKeyStore keyStore)", "full_signature": "private void loadCertificateObjectStore(PrivateKeyStore keyStore)", "class_method_signature": "InstanceCertManager.loadCertificateObjectStore(PrivateKeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "loadSSHObjectStore", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "private", "return": "void", "signature": "void loadSSHObjectStore(PrivateKeyStore keyStore)", "full_signature": "private void loadSSHObjectStore(PrivateKeyStore keyStore)", "class_method_signature": "InstanceCertManager.loadSSHObjectStore(PrivateKeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "setCertStore", "parameters": "(CertRecordStore certStore)", "modifiers": "public", "return": "void", "signature": "void setCertStore(CertRecordStore certStore)", "full_signature": "public void setCertStore(CertRecordStore certStore)", "class_method_signature": "InstanceCertManager.setCertStore(CertRecordStore certStore)", "testcase": false, "constructor": false}, {"identifier": "setSSHStore", "parameters": "(SSHRecordStore sshStore)", "modifiers": "public", "return": "void", "signature": "void setSSHStore(SSHRecordStore sshStore)", "full_signature": "public void setSSHStore(SSHRecordStore sshStore)", "class_method_signature": "InstanceCertManager.setSSHStore(SSHRecordStore sshStore)", "testcase": false, "constructor": false}, {"identifier": "getCertificateAuthorityBundle", "parameters": "(final String name)", "modifiers": "public", "return": "CertificateAuthorityBundle", "signature": "CertificateAuthorityBundle getCertificateAuthorityBundle(final String name)", "full_signature": "public CertificateAuthorityBundle getCertificateAuthorityBundle(final String name)", "class_method_signature": "InstanceCertManager.getCertificateAuthorityBundle(final String name)", "testcase": false, "constructor": false}, {"identifier": "getUnrefreshedCertsNotifications", "parameters": "(String serverHostName, String provider)", "modifiers": "public", "return": "List<X509CertRecord>", "signature": "List<X509CertRecord> getUnrefreshedCertsNotifications(String serverHostName, String provider)", "full_signature": "public List<X509CertRecord> getUnrefreshedCertsNotifications(String serverHostName, String provider)", "class_method_signature": "InstanceCertManager.getUnrefreshedCertsNotifications(String serverHostName, String provider)", "testcase": false, "constructor": false}, {"identifier": "getX509CertRecord", "parameters": "(final String provider, X509Certificate cert)", "modifiers": "public", "return": "X509CertRecord", "signature": "X509CertRecord getX509CertRecord(final String provider, X509Certificate cert)", "full_signature": "public X509CertRecord getX509CertRecord(final String provider, X509Certificate cert)", "class_method_signature": "InstanceCertManager.getX509CertRecord(final String provider, X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "getX509CertRecord", "parameters": "(final String provider, final String instanceId,\n            final String service)", "modifiers": "public", "return": "X509CertRecord", "signature": "X509CertRecord getX509CertRecord(final String provider, final String instanceId,\n            final String service)", "full_signature": "public X509CertRecord getX509CertRecord(final String provider, final String instanceId,\n            final String service)", "class_method_signature": "InstanceCertManager.getX509CertRecord(final String provider, final String instanceId,\n            final String service)", "testcase": false, "constructor": false}, {"identifier": "updateX509CertRecord", "parameters": "(X509CertRecord certRecord)", "modifiers": "public", "return": "boolean", "signature": "boolean updateX509CertRecord(X509CertRecord certRecord)", "full_signature": "public boolean updateX509CertRecord(X509CertRecord certRecord)", "class_method_signature": "InstanceCertManager.updateX509CertRecord(X509CertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "deleteX509CertRecord", "parameters": "(final String provider, final String instanceId,\n            final String service)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteX509CertRecord(final String provider, final String instanceId,\n            final String service)", "full_signature": "public boolean deleteX509CertRecord(final String provider, final String instanceId,\n            final String service)", "class_method_signature": "InstanceCertManager.deleteX509CertRecord(final String provider, final String instanceId,\n            final String service)", "testcase": false, "constructor": false}, {"identifier": "insertX509CertRecord", "parameters": "(X509CertRecord certRecord)", "modifiers": "public", "return": "boolean", "signature": "boolean insertX509CertRecord(X509CertRecord certRecord)", "full_signature": "public boolean insertX509CertRecord(X509CertRecord certRecord)", "class_method_signature": "InstanceCertManager.insertX509CertRecord(X509CertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "generateX509Certificate", "parameters": "(final String csr, final String keyUsage, int expiryTime)", "modifiers": "public", "return": "String", "signature": "String generateX509Certificate(final String csr, final String keyUsage, int expiryTime)", "full_signature": "public String generateX509Certificate(final String csr, final String keyUsage, int expiryTime)", "class_method_signature": "InstanceCertManager.generateX509Certificate(final String csr, final String keyUsage, int expiryTime)", "testcase": false, "constructor": false}, {"identifier": "getCACertificate", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCACertificate()", "full_signature": "public String getCACertificate()", "class_method_signature": "InstanceCertManager.getCACertificate()", "testcase": false, "constructor": false}, {"identifier": "generateIdentity", "parameters": "(String csr, String cn, String keyUsage,\n            int expiryTime)", "modifiers": "public", "return": "InstanceIdentity", "signature": "InstanceIdentity generateIdentity(String csr, String cn, String keyUsage,\n            int expiryTime)", "full_signature": "public InstanceIdentity generateIdentity(String csr, String cn, String keyUsage,\n            int expiryTime)", "class_method_signature": "InstanceCertManager.generateIdentity(String csr, String cn, String keyUsage,\n            int expiryTime)", "testcase": false, "constructor": false}, {"identifier": "updateX509CertificateSigner", "parameters": "()", "modifiers": "", "return": "void", "signature": "void updateX509CertificateSigner()", "full_signature": " void updateX509CertificateSigner()", "class_method_signature": "InstanceCertManager.updateX509CertificateSigner()", "testcase": false, "constructor": false}, {"identifier": "getX509CertificateSigner", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getX509CertificateSigner()", "full_signature": "public String getX509CertificateSigner()", "class_method_signature": "InstanceCertManager.getX509CertificateSigner()", "testcase": false, "constructor": false}, {"identifier": "resetX509CertificateSigner", "parameters": "()", "modifiers": "", "return": "void", "signature": "void resetX509CertificateSigner()", "full_signature": " void resetX509CertificateSigner()", "class_method_signature": "InstanceCertManager.resetX509CertificateSigner()", "testcase": false, "constructor": false}, {"identifier": "generateSSHCertificates", "parameters": "(Principal principal, SSHCertRequest certRequest)", "modifiers": "public", "return": "SSHCertificates", "signature": "SSHCertificates generateSSHCertificates(Principal principal, SSHCertRequest certRequest)", "full_signature": "public SSHCertificates generateSSHCertificates(Principal principal, SSHCertRequest certRequest)", "class_method_signature": "InstanceCertManager.generateSSHCertificates(Principal principal, SSHCertRequest certRequest)", "testcase": false, "constructor": false}, {"identifier": "parseSshHostCsr", "parameters": "(final String csr)", "modifiers": "", "return": "SshHostCsr", "signature": "SshHostCsr parseSshHostCsr(final String csr)", "full_signature": " SshHostCsr parseSshHostCsr(final String csr)", "class_method_signature": "InstanceCertManager.parseSshHostCsr(final String csr)", "testcase": false, "constructor": false}, {"identifier": "updateSSHHostPrincipals", "parameters": "(SshHostCsr sshHostCsr, SSHCertRecord sshCertRecord)", "modifiers": "", "return": "void", "signature": "void updateSSHHostPrincipals(SshHostCsr sshHostCsr, SSHCertRecord sshCertRecord)", "full_signature": " void updateSSHHostPrincipals(SshHostCsr sshHostCsr, SSHCertRecord sshCertRecord)", "class_method_signature": "InstanceCertManager.updateSSHHostPrincipals(SshHostCsr sshHostCsr, SSHCertRecord sshCertRecord)", "testcase": false, "constructor": false}, {"identifier": "generateSSHIdentity", "parameters": "(Principal principal, InstanceIdentity identity, final String hostname,\n            final String csr, SSHCertRecord sshCertRecord, final String certType)", "modifiers": "public", "return": "boolean", "signature": "boolean generateSSHIdentity(Principal principal, InstanceIdentity identity, final String hostname,\n            final String csr, SSHCertRecord sshCertRecord, final String certType)", "full_signature": "public boolean generateSSHIdentity(Principal principal, InstanceIdentity identity, final String hostname,\n            final String csr, SSHCertRecord sshCertRecord, final String certType)", "class_method_signature": "InstanceCertManager.generateSSHIdentity(Principal principal, InstanceIdentity identity, final String hostname,\n            final String csr, SSHCertRecord sshCertRecord, final String certType)", "testcase": false, "constructor": false}, {"identifier": "updateSSHHostCertificateSigner", "parameters": "()", "modifiers": "", "return": "void", "signature": "void updateSSHHostCertificateSigner()", "full_signature": " void updateSSHHostCertificateSigner()", "class_method_signature": "InstanceCertManager.updateSSHHostCertificateSigner()", "testcase": false, "constructor": false}, {"identifier": "updateSSHUserCertificateSigner", "parameters": "()", "modifiers": "", "return": "void", "signature": "void updateSSHUserCertificateSigner()", "full_signature": " void updateSSHUserCertificateSigner()", "class_method_signature": "InstanceCertManager.updateSSHUserCertificateSigner()", "testcase": false, "constructor": false}, {"identifier": "getSSHCertificateSigner", "parameters": "(String sshReqType)", "modifiers": "", "return": "String", "signature": "String getSSHCertificateSigner(String sshReqType)", "full_signature": " String getSSHCertificateSigner(String sshReqType)", "class_method_signature": "InstanceCertManager.getSSHCertificateSigner(String sshReqType)", "testcase": false, "constructor": false}, {"identifier": "authorizeLaunch", "parameters": "(Principal providerService, String domain, String service,\n            StringBuilder errorMsg)", "modifiers": "public", "return": "boolean", "signature": "boolean authorizeLaunch(Principal providerService, String domain, String service,\n            StringBuilder errorMsg)", "full_signature": "public boolean authorizeLaunch(Principal providerService, String domain, String service,\n            StringBuilder errorMsg)", "class_method_signature": "InstanceCertManager.authorizeLaunch(Principal providerService, String domain, String service,\n            StringBuilder errorMsg)", "testcase": false, "constructor": false}, {"identifier": "verifyCertRefreshIPAddress", "parameters": "(final String ipAddress)", "modifiers": "public", "return": "boolean", "signature": "boolean verifyCertRefreshIPAddress(final String ipAddress)", "full_signature": "public boolean verifyCertRefreshIPAddress(final String ipAddress)", "class_method_signature": "InstanceCertManager.verifyCertRefreshIPAddress(final String ipAddress)", "testcase": false, "constructor": false}, {"identifier": "verifyInstanceCertIPAddress", "parameters": "(final String provider, final String ipAddress)", "modifiers": "public", "return": "boolean", "signature": "boolean verifyInstanceCertIPAddress(final String provider, final String ipAddress)", "full_signature": "public boolean verifyInstanceCertIPAddress(final String provider, final String ipAddress)", "class_method_signature": "InstanceCertManager.verifyInstanceCertIPAddress(final String provider, final String ipAddress)", "testcase": false, "constructor": false}, {"identifier": "validPrincipals", "parameters": "(final String hostname, SSHCertRecord sshCertRecord, SshHostCsr sshHostCsr)", "modifiers": "public", "return": "boolean", "signature": "boolean validPrincipals(final String hostname, SSHCertRecord sshCertRecord, SshHostCsr sshHostCsr)", "full_signature": "public boolean validPrincipals(final String hostname, SSHCertRecord sshCertRecord, SshHostCsr sshHostCsr)", "class_method_signature": "InstanceCertManager.validPrincipals(final String hostname, SSHCertRecord sshCertRecord, SshHostCsr sshHostCsr)", "testcase": false, "constructor": false}, {"identifier": "verifyIPAddressAccess", "parameters": "(final String ipAddress, final List<IPBlock> ipBlocks)", "modifiers": "private", "return": "boolean", "signature": "boolean verifyIPAddressAccess(final String ipAddress, final List<IPBlock> ipBlocks)", "full_signature": "private boolean verifyIPAddressAccess(final String ipAddress, final List<IPBlock> ipBlocks)", "class_method_signature": "InstanceCertManager.verifyIPAddressAccess(final String ipAddress, final List<IPBlock> ipBlocks)", "testcase": false, "constructor": false}, {"identifier": "logX509Cert", "parameters": "(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "modifiers": "public", "return": "void", "signature": "void logX509Cert(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "full_signature": "public void logX509Cert(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "class_method_signature": "InstanceCertManager.logX509Cert(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "getSSHCertRecord", "parameters": "(final String instanceId, final String service)", "modifiers": "public", "return": "SSHCertRecord", "signature": "SSHCertRecord getSSHCertRecord(final String instanceId, final String service)", "full_signature": "public SSHCertRecord getSSHCertRecord(final String instanceId, final String service)", "class_method_signature": "InstanceCertManager.getSSHCertRecord(final String instanceId, final String service)", "testcase": false, "constructor": false}, {"identifier": "updateSSHCertRecord", "parameters": "(SSHCertRecord certRecord, boolean refresh)", "modifiers": "public", "return": "boolean", "signature": "boolean updateSSHCertRecord(SSHCertRecord certRecord, boolean refresh)", "full_signature": "public boolean updateSSHCertRecord(SSHCertRecord certRecord, boolean refresh)", "class_method_signature": "InstanceCertManager.updateSSHCertRecord(SSHCertRecord certRecord, boolean refresh)", "testcase": false, "constructor": false}, {"identifier": "enableCertStoreNotifications", "parameters": "(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName)", "modifiers": "public", "return": "boolean", "signature": "boolean enableCertStoreNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName)", "full_signature": "public boolean enableCertStoreNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName)", "class_method_signature": "InstanceCertManager.enableCertStoreNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName)", "testcase": false, "constructor": false}, {"identifier": "enableSSHStoreNotifications", "parameters": "(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName)", "modifiers": "public", "return": "boolean", "signature": "boolean enableSSHStoreNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName)", "full_signature": "public boolean enableSSHStoreNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName)", "class_method_signature": "InstanceCertManager.enableSSHStoreNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java"}, "focal_method": {"identifier": "generateSSHCertificates", "parameters": "(Principal principal, SSHCertRequest certRequest)", "modifiers": "public", "return": "SSHCertificates", "body": "public SSHCertificates generateSSHCertificates(Principal principal, SSHCertRequest certRequest) {\n\n        if (sshSigner == null) {\n            LOGGER.error(\"SSH Signer is not available\");\n            return null;\n        }\n\n        // if this is a host certificate we're going to fetch our\n        // ssh certificate record\n\n        SSHCertRecord sshCertRecord = null;\n        SSHCertRequestMeta meta = certRequest.getCertRequestMeta();\n        if (ZTSConsts.ZTS_SSH_HOST.equals(meta.getCertType())) {\n            sshCertRecord = getSSHCertRecord(meta.getInstanceId(), meta.getAthenzService());\n        }\n\n        // ssh signer is responsible for all authorization checks and processing\n        // of this request. the signer already was given the authorizer object\n        // that it can use for those checks.\n\n        return sshSigner.generateCertificate(principal, certRequest, sshCertRecord, null);\n    }", "signature": "SSHCertificates generateSSHCertificates(Principal principal, SSHCertRequest certRequest)", "full_signature": "public SSHCertificates generateSSHCertificates(Principal principal, SSHCertRequest certRequest)", "class_method_signature": "InstanceCertManager.generateSSHCertificates(Principal principal, SSHCertRequest certRequest)", "testcase": false, "constructor": false, "invocations": ["error", "getCertRequestMeta", "equals", "getCertType", "getSSHCertRecord", "getInstanceId", "getAthenzService", "generateCertificate"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}