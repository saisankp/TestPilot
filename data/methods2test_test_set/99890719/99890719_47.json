{"test_class": {"identifier": "MissingCatchNoViolationPredicateTest", "superclass": "", "interfaces": "", "fields": [], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/MissingCatchNoViolationPredicateTest.java"}, "test_case": {"identifier": "missingCatchNoViolation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void missingCatchNoViolation() {\n        TestAUGBuilder pattern = buildAUG().withActionNodes(\"mayFail()\", \"<catch>\").withDataNode(\"SomeException\")\n                .withEdge(\"mayFail()\", THROW, \"SomeException\")\n                .withEdge(\"SomeException\", PARAMETER, \"<catch>\");\n        TestAUGBuilder target = buildAUG().withActionNodes(\"mayFail()\");\n        TestOverlapBuilder overlap = buildOverlap(pattern, target).withNodes(\"mayFail()\");\n\n        Optional<Boolean> decision = new MissingCatchNoViolationPredicate().apply(overlap.build());\n\n        assertThat(decision, is(Optional.of(false)));\n    }", "signature": "void missingCatchNoViolation()", "full_signature": "@Test public void missingCatchNoViolation()", "class_method_signature": "MissingCatchNoViolationPredicateTest.missingCatchNoViolation()", "testcase": true, "constructor": false, "invocations": ["withEdge", "withEdge", "withDataNode", "withActionNodes", "buildAUG", "withActionNodes", "buildAUG", "withNodes", "buildOverlap", "apply", "build", "assertThat", "is", "of"]}, "focal_class": {"identifier": "MissingCatchNoViolationPredicate", "superclass": "", "interfaces": "implements ViolationPredicate", "fields": [], "methods": [{"identifier": "apply", "parameters": "(Overlap overlap)", "modifiers": "@Override public", "return": "Optional<Boolean>", "signature": "Optional<Boolean> apply(Overlap overlap)", "full_signature": "@Override public Optional<Boolean> apply(Overlap overlap)", "class_method_signature": "MissingCatchNoViolationPredicate.apply(Overlap overlap)", "testcase": false, "constructor": false}, {"identifier": "isMissingCatchOnly", "parameters": "(Overlap overlap)", "modifiers": "private", "return": "boolean", "signature": "boolean isMissingCatchOnly(Overlap overlap)", "full_signature": "private boolean isMissingCatchOnly(Overlap overlap)", "class_method_signature": "MissingCatchNoViolationPredicate.isMissingCatchOnly(Overlap overlap)", "testcase": false, "constructor": false}, {"identifier": "isMissingThrowOnly", "parameters": "(Overlap overlap)", "modifiers": "private", "return": "boolean", "signature": "boolean isMissingThrowOnly(Overlap overlap)", "full_signature": "private boolean isMissingThrowOnly(Overlap overlap)", "class_method_signature": "MissingCatchNoViolationPredicate.isMissingThrowOnly(Overlap overlap)", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/MissingCatchNoViolationPredicate.java"}, "focal_method": {"identifier": "apply", "parameters": "(Overlap overlap)", "modifiers": "@Override public", "return": "Optional<Boolean>", "body": "@Override\n    public Optional<Boolean> apply(Overlap overlap) {\n        return isMissingCatchOnly(overlap) || isMissingThrowOnly(overlap) ? Optional.of(false) : Optional.empty();\n    }", "signature": "Optional<Boolean> apply(Overlap overlap)", "full_signature": "@Override public Optional<Boolean> apply(Overlap overlap)", "class_method_signature": "MissingCatchNoViolationPredicate.apply(Overlap overlap)", "testcase": false, "constructor": false, "invocations": ["isMissingCatchOnly", "isMissingThrowOnly", "of", "empty"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}