{"test_class": {"identifier": "TrendActionTest", "superclass": "extends ActionTest", "interfaces": "", "fields": [], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/TrendActionTest.java"}, "test_case": {"identifier": "testTrendActionWithFieldWithValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTrendActionWithFieldWithValues() throws FoxtrotException, JsonProcessingException {\n        TrendRequest trendRequest = new TrendRequest();\n        trendRequest.setTable(TestUtils.TEST_TABLE_NAME);\n        BetweenFilter betweenFilter = new BetweenFilter();\n        betweenFilter.setFrom(1L);\n        betweenFilter.setTo(System.currentTimeMillis());\n        betweenFilter.setTemporal(true);\n        betweenFilter.setField(\"_timestamp\");\n        trendRequest.setField(\"os\");\n        trendRequest.setFilters(Lists.<Filter>newArrayList(betweenFilter));\n        trendRequest.setValues(Arrays.asList(\"android\"));\n\n        TrendResponse expectedResponse = new TrendResponse();\n        Map<String, List<TrendResponse.Count>> trends = Maps.newHashMap();\n\n        List<TrendResponse.Count> counts = Lists.newArrayList();\n        counts.add(new TrendResponse.Count(1397586600000L, 6));\n        counts.add(new TrendResponse.Count(1398623400000L, 1));\n        trends.put(\"android\", counts);\n\n        expectedResponse.setTrends(trends);\n\n        TrendResponse actualResponse = TrendResponse.class.cast(getQueryExecutor().execute(trendRequest));\n        filterNonZeroCounts(actualResponse.getTrends()\n                                    .get(\"android\"));\n        assertEquals(expectedResponse, actualResponse);\n    }", "signature": "void testTrendActionWithFieldWithValues()", "full_signature": "@Test public void testTrendActionWithFieldWithValues()", "class_method_signature": "TrendActionTest.testTrendActionWithFieldWithValues()", "testcase": true, "constructor": false, "invocations": ["setTable", "setFrom", "setTo", "currentTimeMillis", "setTemporal", "setField", "setField", "setFilters", "newArrayList", "setValues", "asList", "newHashMap", "newArrayList", "add", "add", "put", "setTrends", "cast", "execute", "getQueryExecutor", "filterNonZeroCounts", "get", "getTrends", "assertEquals"]}, "focal_class": {"identifier": "TrendAction", "superclass": "extends Action<TrendRequest>", "interfaces": "", "fields": [{"original_string": "private final ElasticsearchTuningConfig elasticsearchTuningConfig;", "modifier": "private final", "type": "ElasticsearchTuningConfig", "declarator": "elasticsearchTuningConfig", "var_name": "elasticsearchTuningConfig"}], "methods": [{"identifier": "TrendAction", "parameters": "(TrendRequest parameter, AnalyticsLoader analyticsLoader)", "modifiers": "public", "return": "", "signature": " TrendAction(TrendRequest parameter, AnalyticsLoader analyticsLoader)", "full_signature": "public  TrendAction(TrendRequest parameter, AnalyticsLoader analyticsLoader)", "class_method_signature": "TrendAction.TrendAction(TrendRequest parameter, AnalyticsLoader analyticsLoader)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preprocess()", "full_signature": "@Override public void preprocess()", "class_method_signature": "TrendAction.preprocess()", "testcase": false, "constructor": false}, {"identifier": "getMetricKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMetricKey()", "full_signature": "@Override public String getMetricKey()", "class_method_signature": "TrendAction.getMetricKey()", "testcase": false, "constructor": false}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override public String getRequestCacheKey()", "class_method_signature": "TrendAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "validateImpl", "parameters": "(TrendRequest parameter)", "modifiers": "@Override public", "return": "void", "signature": "void validateImpl(TrendRequest parameter)", "full_signature": "@Override public void validateImpl(TrendRequest parameter)", "class_method_signature": "TrendAction.validateImpl(TrendRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(TrendRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(TrendRequest parameter)", "full_signature": "@Override public ActionResponse execute(TrendRequest parameter)", "class_method_signature": "TrendAction.execute(TrendRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getRequestBuilder", "parameters": "(TrendRequest parameter)", "modifiers": "@Override public", "return": "SearchRequestBuilder", "signature": "SearchRequestBuilder getRequestBuilder(TrendRequest parameter)", "full_signature": "@Override public SearchRequestBuilder getRequestBuilder(TrendRequest parameter)", "class_method_signature": "TrendAction.getRequestBuilder(TrendRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "(org.elasticsearch.action.ActionResponse response, TrendRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, TrendRequest parameter)", "full_signature": "@Override public ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, TrendRequest parameter)", "class_method_signature": "TrendAction.getResponse(org.elasticsearch.action.ActionResponse response, TrendRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getDefaultTimeSpan", "parameters": "()", "modifiers": "@Override protected", "return": "Filter", "signature": "Filter getDefaultTimeSpan()", "full_signature": "@Override protected Filter getDefaultTimeSpan()", "class_method_signature": "TrendAction.getDefaultTimeSpan()", "testcase": false, "constructor": false}, {"identifier": "buildAggregation", "parameters": "(TrendRequest request)", "modifiers": "private", "return": "AbstractAggregationBuilder", "signature": "AbstractAggregationBuilder buildAggregation(TrendRequest request)", "full_signature": "private AbstractAggregationBuilder buildAggregation(TrendRequest request)", "class_method_signature": "TrendAction.buildAggregation(TrendRequest request)", "testcase": false, "constructor": false}, {"identifier": "buildResponse", "parameters": "(TrendRequest request, Aggregations aggregations)", "modifiers": "private", "return": "TrendResponse", "signature": "TrendResponse buildResponse(TrendRequest request, Aggregations aggregations)", "full_signature": "private TrendResponse buildResponse(TrendRequest request, Aggregations aggregations)", "class_method_signature": "TrendAction.buildResponse(TrendRequest request, Aggregations aggregations)", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/TrendAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(TrendRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(TrendRequest parameter) {\n        SearchRequestBuilder searchRequestBuilder = getRequestBuilder(parameter);\n        try {\n            SearchResponse searchResponse = searchRequestBuilder.execute()\n                    .actionGet(getGetQueryTimeout());\n            return getResponse(searchResponse, parameter);\n        } catch (ElasticsearchException e) {\n            throw FoxtrotExceptions.createQueryExecutionException(parameter, e);\n        }\n    }", "signature": "ActionResponse execute(TrendRequest parameter)", "full_signature": "@Override public ActionResponse execute(TrendRequest parameter)", "class_method_signature": "TrendAction.execute(TrendRequest parameter)", "testcase": false, "constructor": false, "invocations": ["getRequestBuilder", "actionGet", "execute", "getGetQueryTimeout", "getResponse", "createQueryExecutionException"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}