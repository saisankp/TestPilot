{"test_class": {"identifier": "GitRenameTest", "superclass": "", "interfaces": "", "fields": [], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/model/GitRenameTest.java"}, "test_case": {"identifier": "parseWrongEntry", "parameters": "()", "modifiers": "@Test(expected = Exception.class) public", "return": "void", "body": "@Test(expected = Exception.class)\n    public void parseWrongEntry() throws Exception {\n        String line = \"Diff a/b/c/d/{z.txt => c.txt} (100%)\";\n\n        GitRename.parseRenamed(line);\n    }", "signature": "void parseWrongEntry()", "full_signature": "@Test(expected = Exception.class) public void parseWrongEntry()", "class_method_signature": "GitRenameTest.parseWrongEntry()", "testcase": true, "constructor": false, "invocations": ["parseRenamed"]}, "focal_class": {"identifier": "GitRename", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final String oldFile;", "modifier": "public final", "type": "String", "declarator": "oldFile", "var_name": "oldFile"}, {"original_string": "public final String newFile;", "modifier": "public final", "type": "String", "declarator": "newFile", "var_name": "newFile"}, {"original_string": "public final int similarity;", "modifier": "public final", "type": "int", "declarator": "similarity", "var_name": "similarity"}, {"original_string": "private static final Pattern RENAME_WITH_BRACKETS = Pattern.compile(\"^rename\\\\s([^{]*)\\\\{(.*)\\\\s=>\\\\s([^}]*)\\\\}(.*)\\\\s\\\\((\\\\d+)%\\\\)$\");", "modifier": "private static final", "type": "Pattern", "declarator": "RENAME_WITH_BRACKETS = Pattern.compile(\"^rename\\\\s([^{]*)\\\\{(.*)\\\\s=>\\\\s([^}]*)\\\\}(.*)\\\\s\\\\((\\\\d+)%\\\\)$\")", "var_name": "RENAME_WITH_BRACKETS"}, {"original_string": "private static final Pattern RENAME_WITHOUT_BRACKETS = Pattern.compile(\"^rename\\\\s(.*)\\\\s=>\\\\s(.*)\\\\s\\\\((\\\\d+)%\\\\)$\");", "modifier": "private static final", "type": "Pattern", "declarator": "RENAME_WITHOUT_BRACKETS = Pattern.compile(\"^rename\\\\s(.*)\\\\s=>\\\\s(.*)\\\\s\\\\((\\\\d+)%\\\\)$\")", "var_name": "RENAME_WITHOUT_BRACKETS"}], "methods": [{"identifier": "GitRename", "parameters": "(String oldFile, String newFile, int similarity)", "modifiers": "public", "return": "", "signature": " GitRename(String oldFile, String newFile, int similarity)", "full_signature": "public  GitRename(String oldFile, String newFile, int similarity)", "class_method_signature": "GitRename.GitRename(String oldFile, String newFile, int similarity)", "testcase": false, "constructor": true}, {"identifier": "parseRenamed", "parameters": "(String line)", "modifiers": "public static", "return": "GitRename", "signature": "GitRename parseRenamed(String line)", "full_signature": "public static GitRename parseRenamed(String line)", "class_method_signature": "GitRename.parseRenamed(String line)", "testcase": false, "constructor": false}, {"identifier": "parseWithoutBraces", "parameters": "(String line)", "modifiers": "private static", "return": "GitRename", "signature": "GitRename parseWithoutBraces(String line)", "full_signature": "private static GitRename parseWithoutBraces(String line)", "class_method_signature": "GitRename.parseWithoutBraces(String line)", "testcase": false, "constructor": false}, {"identifier": "parseWithBraces", "parameters": "(String line)", "modifiers": "private static", "return": "GitRename", "signature": "GitRename parseWithBraces(String line)", "full_signature": "private static GitRename parseWithBraces(String line)", "class_method_signature": "GitRename.parseWithBraces(String line)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "GitRename.toString()", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/model/GitRename.java"}, "focal_method": {"identifier": "parseRenamed", "parameters": "(String line)", "modifiers": "public static", "return": "GitRename", "body": "public static GitRename parseRenamed(String line) throws Exception {\n        line = line.trim();\n        if (line.startsWith(\"rename\")) {\n            GitRename rename;\n            if (line.contains(\"{\")) {\n                rename = parseWithBraces(line);\n                if (rename != null) {\n                    return rename;\n                }\n            } else {\n                rename = parseWithoutBraces(line);\n                if (rename != null) {\n                    return rename;\n                }\n            }\n        }\n        throw new Exception(\"Unable to parse line: \" + line);\n    }", "signature": "GitRename parseRenamed(String line)", "full_signature": "public static GitRename parseRenamed(String line)", "class_method_signature": "GitRename.parseRenamed(String line)", "testcase": false, "constructor": false, "invocations": ["trim", "startsWith", "contains", "parseWithBraces", "parseWithoutBraces"]}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}