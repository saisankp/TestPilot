{"test_class": {"identifier": "StoragePolicyProcessorHelperServiceImplTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private BusinessObjectDataDaoHelper businessObjectDataDaoHelper;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataDaoHelper", "declarator": "businessObjectDataDaoHelper", "var_name": "businessObjectDataDaoHelper"}, {"original_string": "@Mock\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Mock\n    private ConfigurationHelper configurationHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Mock\n    private JsonHelper jsonHelper;", "modifier": "@Mock\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Mock\n    private S3KeyPrefixHelper s3KeyPrefixHelper;", "modifier": "@Mock\n    private", "type": "S3KeyPrefixHelper", "declarator": "s3KeyPrefixHelper", "var_name": "s3KeyPrefixHelper"}, {"original_string": "@Mock\n    private S3Service s3Service;", "modifier": "@Mock\n    private", "type": "S3Service", "declarator": "s3Service", "var_name": "s3Service"}, {"original_string": "@Mock\n    private StorageFileHelper storageFileHelper;", "modifier": "@Mock\n    private", "type": "StorageFileHelper", "declarator": "storageFileHelper", "var_name": "storageFileHelper"}, {"original_string": "@Mock\n    private StorageHelper storageHelper;", "modifier": "@Mock\n    private", "type": "StorageHelper", "declarator": "storageHelper", "var_name": "storageHelper"}, {"original_string": "@Mock\n    private StoragePolicyDaoHelper storagePolicyDaoHelper;", "modifier": "@Mock\n    private", "type": "StoragePolicyDaoHelper", "declarator": "storagePolicyDaoHelper", "var_name": "storagePolicyDaoHelper"}, {"original_string": "@Mock\n    private StoragePolicyHelper storagePolicyHelper;", "modifier": "@Mock\n    private", "type": "StoragePolicyHelper", "declarator": "storagePolicyHelper", "var_name": "storagePolicyHelper"}, {"original_string": "@InjectMocks\n    private StoragePolicyProcessorHelperServiceImpl storagePolicyProcessorHelperServiceImpl;", "modifier": "@InjectMocks\n    private", "type": "StoragePolicyProcessorHelperServiceImpl", "declarator": "storagePolicyProcessorHelperServiceImpl", "var_name": "storagePolicyProcessorHelperServiceImpl"}, {"original_string": "@Mock\n    private StorageUnitDao storageUnitDao;", "modifier": "@Mock\n    private", "type": "StorageUnitDao", "declarator": "storageUnitDao", "var_name": "storageUnitDao"}, {"original_string": "@Mock\n    private StorageUnitDaoHelper storageUnitDaoHelper;", "modifier": "@Mock\n    private", "type": "StorageUnitDaoHelper", "declarator": "storageUnitDaoHelper", "var_name": "storageUnitDaoHelper"}, {"original_string": "@Mock\n    private StorageUnitHelper storageUnitHelper;", "modifier": "@Mock\n    private", "type": "StorageUnitHelper", "declarator": "storageUnitHelper", "var_name": "storageUnitHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/impl/StoragePolicyProcessorHelperServiceImplTest.java"}, "test_case": {"identifier": "testInitiateStoragePolicyTransitionImpl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitiateStoragePolicyTransitionImpl()\n    {\n        // Create an empty storage policy transition parameters DTO.\n        StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto = new StoragePolicyTransitionParamsDto();\n\n        // Create a business object data key.\n        BusinessObjectDataKey businessObjectDataKey =\n            new BusinessObjectDataKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE,\n                NO_SUBPARTITION_VALUES, DATA_VERSION);\n\n        // Create a business object format entity.\n        BusinessObjectFormatEntity businessObjectFormatEntity = new BusinessObjectFormatEntity();\n\n        // Create a business object data status entity.\n        BusinessObjectDataStatusEntity businessObjectDataStatusEntity = new BusinessObjectDataStatusEntity();\n        businessObjectDataStatusEntity.setCode(BusinessObjectDataStatusEntity.VALID);\n\n        // Create a business object data entity.\n        BusinessObjectDataEntity businessObjectDataEntity = new BusinessObjectDataEntity();\n        businessObjectDataEntity.setBusinessObjectFormat(businessObjectFormatEntity);\n        businessObjectDataEntity.setStatus(businessObjectDataStatusEntity);\n\n        // Create a storage policy key.\n        StoragePolicyKey storagePolicyKey = new StoragePolicyKey(STORAGE_POLICY_NAMESPACE_CD, STORAGE_POLICY_NAME);\n\n        // Create a storage platform entity.\n        StoragePlatformEntity storagePlatformEntity = new StoragePlatformEntity();\n        storagePlatformEntity.setName(StoragePlatformEntity.S3);\n\n        // Create a storage entity.\n        StorageEntity storageEntity = new StorageEntity();\n        storageEntity.setStoragePlatform(storagePlatformEntity);\n        storageEntity.setName(STORAGE_NAME);\n\n        // Create a storage policy entity.\n        StoragePolicyTransitionTypeEntity storagePolicyTransitionTypeEntity = new StoragePolicyTransitionTypeEntity();\n        storagePolicyTransitionTypeEntity.setCode(StoragePolicyTransitionTypeEntity.GLACIER);\n\n        // Create a storage policy entity.\n        StoragePolicyEntity storagePolicyEntity = new StoragePolicyEntity();\n        storagePolicyEntity.setStorage(storageEntity);\n        storagePolicyEntity.setStoragePolicyTransitionType(storagePolicyTransitionTypeEntity);\n\n        // Create a list of storage file entities.\n        List<StorageFileEntity> storageFileEntities = Arrays.asList(new StorageFileEntity());\n\n        // Create a storage unit status entity.\n        StorageUnitStatusEntity storageUnitStatusEntity = new StorageUnitStatusEntity();\n        storageUnitStatusEntity.setCode(StorageUnitStatusEntity.ENABLED);\n\n        // Create a storage unit entity.\n        StorageUnitEntity storageUnitEntity = new StorageUnitEntity();\n        storageUnitEntity.setStorage(storageEntity);\n        storageUnitEntity.setBusinessObjectData(businessObjectDataEntity);\n        storageUnitEntity.setStorageFiles(storageFileEntities);\n        storageUnitEntity.setStatus(storageUnitStatusEntity);\n\n        // Create a list of storage files.\n        List<StorageFile> storageFiles = Arrays.asList(new StorageFile(S3_KEY, FILE_SIZE_1_KB, ROW_COUNT_1000));\n\n        // Mock the external calls.\n        when(businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey)).thenReturn(businessObjectDataEntity);\n        when(storagePolicyDaoHelper.getStoragePolicyEntityByKeyAndVersion(storagePolicyKey, STORAGE_POLICY_VERSION)).thenReturn(storagePolicyEntity);\n        when(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_PATH_PREFIX)).thenReturn(S3_ATTRIBUTE_NAME_VALIDATE_PATH_PREFIX);\n        when(storageHelper.getBooleanStorageAttributeValueByName(S3_ATTRIBUTE_NAME_VALIDATE_PATH_PREFIX, storageEntity, false, true)).thenReturn(true);\n        when(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_FILE_EXISTENCE))\n            .thenReturn(S3_ATTRIBUTE_NAME_VALIDATE_FILE_EXISTENCE);\n        when(storageHelper.getBooleanStorageAttributeValueByName(S3_ATTRIBUTE_NAME_VALIDATE_FILE_EXISTENCE, storageEntity, false, true)).thenReturn(true);\n        when(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME)).thenReturn(S3_ATTRIBUTE_NAME_BUCKET_NAME);\n        when(storageHelper.getStorageAttributeValueByName(S3_ATTRIBUTE_NAME_BUCKET_NAME, storageEntity, true)).thenReturn(S3_BUCKET_NAME);\n        when(configurationHelper.getRequiredProperty(ConfigurationValue.S3_ARCHIVE_TO_GLACIER_TAG_KEY)).thenReturn(S3_OBJECT_TAG_KEY);\n        when(configurationHelper.getRequiredProperty(ConfigurationValue.S3_ARCHIVE_TO_GLACIER_TAG_VALUE)).thenReturn(S3_OBJECT_TAG_VALUE);\n        when(configurationHelper.getRequiredProperty(ConfigurationValue.S3_ARCHIVE_TO_GLACIER_ROLE_ARN)).thenReturn(S3_OBJECT_TAGGER_ROLE_ARN);\n        when(configurationHelper.getRequiredProperty(ConfigurationValue.S3_ARCHIVE_TO_GLACIER_ROLE_SESSION_NAME))\n            .thenReturn(S3_OBJECT_TAGGER_ROLE_SESSION_NAME);\n        when(storageUnitDaoHelper.getStorageUnitEntity(STORAGE_NAME, businessObjectDataEntity)).thenReturn(storageUnitEntity);\n        when(s3KeyPrefixHelper.buildS3KeyPrefix(storageEntity, businessObjectFormatEntity, businessObjectDataKey)).thenReturn(S3_KEY_PREFIX);\n        when(storageFileHelper.getAndValidateStorageFiles(storageUnitEntity, S3_KEY_PREFIX, STORAGE_NAME, businessObjectDataKey))\n            .thenReturn(storageFiles);\n        doAnswer(new Answer<Void>()\n        {\n            public Void answer(InvocationOnMock invocation)\n            {\n                // Get the new storage unit status.\n                String storageUnitStatus = (String) invocation.getArguments()[1];\n\n                // Create a storage unit status entity for the new storage unit status.\n                StorageUnitStatusEntity storageUnitStatusEntity = new StorageUnitStatusEntity();\n                storageUnitStatusEntity.setCode(storageUnitStatus);\n\n                // Update the storage unit with the new status.\n                StorageUnitEntity storageUnitEntity = (StorageUnitEntity) invocation.getArguments()[0];\n                storageUnitEntity.setStatus(storageUnitStatusEntity);\n\n                return null;\n            }\n        }).when(storageUnitDaoHelper).updateStorageUnitStatus(storageUnitEntity, StorageUnitStatusEntity.ARCHIVING, StorageUnitStatusEntity.ARCHIVING);\n        when(configurationHelper.getProperty(ConfigurationValue.S3_ENDPOINT)).thenReturn(S3_ENDPOINT);\n\n        // Call the method under test.\n        storagePolicyProcessorHelperServiceImpl.initiateStoragePolicyTransitionImpl(storagePolicyTransitionParamsDto,\n            new StoragePolicySelection(businessObjectDataKey, storagePolicyKey, STORAGE_POLICY_VERSION));\n\n        // Verify the external calls.\n        verify(businessObjectDataHelper).validateBusinessObjectDataKey(businessObjectDataKey, true, true);\n        verify(storagePolicyHelper).validateStoragePolicyKey(storagePolicyKey);\n        verify(businessObjectDataDaoHelper).getBusinessObjectDataEntity(businessObjectDataKey);\n        verify(businessObjectDataHelper, times(2)).businessObjectDataKeyToString(businessObjectDataKey);\n        verify(storagePolicyDaoHelper).getStoragePolicyEntityByKeyAndVersion(storagePolicyKey, STORAGE_POLICY_VERSION);\n        verify(storagePolicyHelper, times(2)).storagePolicyKeyAndVersionToString(storagePolicyKey, STORAGE_POLICY_VERSION);\n        verify(configurationHelper).getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_PATH_PREFIX);\n        verify(storageHelper).getBooleanStorageAttributeValueByName(S3_ATTRIBUTE_NAME_VALIDATE_PATH_PREFIX, storageEntity, false, true);\n        verify(configurationHelper).getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_FILE_EXISTENCE);\n        verify(storageHelper).getBooleanStorageAttributeValueByName(S3_ATTRIBUTE_NAME_VALIDATE_FILE_EXISTENCE, storageEntity, false, true);\n        verify(configurationHelper).getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME);\n        verify(storageHelper).getStorageAttributeValueByName(S3_ATTRIBUTE_NAME_BUCKET_NAME, storageEntity, true);\n        verify(configurationHelper).getRequiredProperty(ConfigurationValue.S3_ARCHIVE_TO_GLACIER_TAG_KEY);\n        verify(configurationHelper).getRequiredProperty(ConfigurationValue.S3_ARCHIVE_TO_GLACIER_TAG_VALUE);\n        verify(configurationHelper).getRequiredProperty(ConfigurationValue.S3_ARCHIVE_TO_GLACIER_ROLE_ARN);\n        verify(configurationHelper).getRequiredProperty(ConfigurationValue.S3_ARCHIVE_TO_GLACIER_ROLE_SESSION_NAME);\n        verify(storageUnitDaoHelper).getStorageUnitEntity(STORAGE_NAME, businessObjectDataEntity);\n        verify(s3KeyPrefixHelper).buildS3KeyPrefix(storageEntity, businessObjectFormatEntity, businessObjectDataKey);\n        verify(storageFileHelper).getAndValidateStorageFiles(storageUnitEntity, S3_KEY_PREFIX, STORAGE_NAME, businessObjectDataKey);\n        verify(storageUnitDaoHelper)\n            .validateNoExplicitlyRegisteredSubPartitionInStorageForBusinessObjectData(storageEntity, businessObjectFormatEntity, businessObjectDataKey,\n                S3_KEY_PREFIX);\n        verify(storageUnitDaoHelper).updateStorageUnitStatus(storageUnitEntity, StorageUnitStatusEntity.ARCHIVING, StorageUnitStatusEntity.ARCHIVING);\n        verify(configurationHelper).getProperty(ConfigurationValue.S3_ENDPOINT);\n        verifyNoMoreInteractionsHelper();\n\n        // Validate the results.\n        assertEquals(new StoragePolicyTransitionParamsDto(businessObjectDataKey, STORAGE_NAME, S3_ENDPOINT, S3_BUCKET_NAME, S3_KEY_PREFIX,\n            StorageUnitStatusEntity.ARCHIVING, StorageUnitStatusEntity.ENABLED, storageFiles, S3_OBJECT_TAG_KEY, S3_OBJECT_TAG_VALUE, S3_OBJECT_TAGGER_ROLE_ARN,\n            S3_OBJECT_TAGGER_ROLE_SESSION_NAME), storagePolicyTransitionParamsDto);\n    }", "signature": "void testInitiateStoragePolicyTransitionImpl()", "full_signature": "@Test public void testInitiateStoragePolicyTransitionImpl()", "class_method_signature": "StoragePolicyProcessorHelperServiceImplTest.testInitiateStoragePolicyTransitionImpl()", "testcase": true, "constructor": false, "invocations": ["setCode", "setBusinessObjectFormat", "setStatus", "setName", "setStoragePlatform", "setName", "setCode", "setStorage", "setStoragePolicyTransitionType", "asList", "setCode", "setStorage", "setBusinessObjectData", "setStorageFiles", "setStatus", "asList", "thenReturn", "when", "getBusinessObjectDataEntity", "thenReturn", "when", "getStoragePolicyEntityByKeyAndVersion", "thenReturn", "when", "getProperty", "thenReturn", "when", "getBooleanStorageAttributeValueByName", "thenReturn", "when", "getProperty", "thenReturn", "when", "getBooleanStorageAttributeValueByName", "thenReturn", "when", "getProperty", "thenReturn", "when", "getStorageAttributeValueByName", "thenReturn", "when", "getRequiredProperty", "thenReturn", "when", "getRequiredProperty", "thenReturn", "when", "getRequiredProperty", "thenReturn", "when", "getRequiredProperty", "thenReturn", "when", "getStorageUnitEntity", "thenReturn", "when", "buildS3KeyPrefix", "thenReturn", "when", "getAndValidateStorageFiles", "updateStorageUnitStatus", "when", "doAnswer", "getArguments", "setCode", "getArguments", "setStatus", "thenReturn", "when", "getProperty", "initiateStoragePolicyTransitionImpl", "validateBusinessObjectDataKey", "verify", "validateStoragePolicyKey", "verify", "getBusinessObjectDataEntity", "verify", "businessObjectDataKeyToString", "verify", "times", "getStoragePolicyEntityByKeyAndVersion", "verify", "storagePolicyKeyAndVersionToString", "verify", "times", "getProperty", "verify", "getBooleanStorageAttributeValueByName", "verify", "getProperty", "verify", "getBooleanStorageAttributeValueByName", "verify", "getProperty", "verify", "getStorageAttributeValueByName", "verify", "getRequiredProperty", "verify", "getRequiredProperty", "verify", "getRequiredProperty", "verify", "getRequiredProperty", "verify", "getStorageUnitEntity", "verify", "buildS3KeyPrefix", "verify", "getAndValidateStorageFiles", "verify", "validateNoExplicitlyRegisteredSubPartitionInStorageForBusinessObjectData", "verify", "updateStorageUnitStatus", "verify", "getProperty", "verify", "verifyNoMoreInteractionsHelper", "assertEquals"]}, "focal_class": {"identifier": "StoragePolicyProcessorHelperServiceImpl", "superclass": "", "interfaces": "implements StoragePolicyProcessorHelperService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(StoragePolicyProcessorHelperServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(StoragePolicyProcessorHelperServiceImpl.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private BusinessObjectDataDaoHelper businessObjectDataDaoHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataDaoHelper", "declarator": "businessObjectDataDaoHelper", "var_name": "businessObjectDataDaoHelper"}, {"original_string": "@Autowired\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    private S3KeyPrefixHelper s3KeyPrefixHelper;", "modifier": "@Autowired\n    private", "type": "S3KeyPrefixHelper", "declarator": "s3KeyPrefixHelper", "var_name": "s3KeyPrefixHelper"}, {"original_string": "@Autowired\n    private S3Service s3Service;", "modifier": "@Autowired\n    private", "type": "S3Service", "declarator": "s3Service", "var_name": "s3Service"}, {"original_string": "@Autowired\n    private StorageFileHelper storageFileHelper;", "modifier": "@Autowired\n    private", "type": "StorageFileHelper", "declarator": "storageFileHelper", "var_name": "storageFileHelper"}, {"original_string": "@Autowired\n    private StorageHelper storageHelper;", "modifier": "@Autowired\n    private", "type": "StorageHelper", "declarator": "storageHelper", "var_name": "storageHelper"}, {"original_string": "@Autowired\n    private StoragePolicyDaoHelper storagePolicyDaoHelper;", "modifier": "@Autowired\n    private", "type": "StoragePolicyDaoHelper", "declarator": "storagePolicyDaoHelper", "var_name": "storagePolicyDaoHelper"}, {"original_string": "@Autowired\n    private StoragePolicyHelper storagePolicyHelper;", "modifier": "@Autowired\n    private", "type": "StoragePolicyHelper", "declarator": "storagePolicyHelper", "var_name": "storagePolicyHelper"}, {"original_string": "@Autowired\n    private StorageUnitDao storageUnitDao;", "modifier": "@Autowired\n    private", "type": "StorageUnitDao", "declarator": "storageUnitDao", "var_name": "storageUnitDao"}, {"original_string": "@Autowired\n    private StorageUnitDaoHelper storageUnitDaoHelper;", "modifier": "@Autowired\n    private", "type": "StorageUnitDaoHelper", "declarator": "storageUnitDaoHelper", "var_name": "storageUnitDaoHelper"}, {"original_string": "@Autowired\n    private StorageUnitHelper storageUnitHelper;", "modifier": "@Autowired\n    private", "type": "StorageUnitHelper", "declarator": "storageUnitHelper", "var_name": "storageUnitHelper"}], "methods": [{"identifier": "initiateStoragePolicyTransition", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "modifiers": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "signature": "void initiateStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "full_signature": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void initiateStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.initiateStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "testcase": false, "constructor": false}, {"identifier": "initiateStoragePolicyTransitionImpl", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "modifiers": "protected", "return": "void", "signature": "void initiateStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "full_signature": "protected void initiateStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.initiateStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "testcase": false, "constructor": false}, {"identifier": "validateStoragePolicySelection", "parameters": "(StoragePolicySelection storagePolicySelection)", "modifiers": "private", "return": "void", "signature": "void validateStoragePolicySelection(StoragePolicySelection storagePolicySelection)", "full_signature": "private void validateStoragePolicySelection(StoragePolicySelection storagePolicySelection)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.validateStoragePolicySelection(StoragePolicySelection storagePolicySelection)", "testcase": false, "constructor": false}, {"identifier": "validateBusinessObjectData", "parameters": "(BusinessObjectDataEntity businessObjectDataEntity, BusinessObjectDataKey businessObjectDataKey)", "modifiers": "private", "return": "void", "signature": "void validateBusinessObjectData(BusinessObjectDataEntity businessObjectDataEntity, BusinessObjectDataKey businessObjectDataKey)", "full_signature": "private void validateBusinessObjectData(BusinessObjectDataEntity businessObjectDataEntity, BusinessObjectDataKey businessObjectDataKey)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.validateBusinessObjectData(BusinessObjectDataEntity businessObjectDataEntity, BusinessObjectDataKey businessObjectDataKey)", "testcase": false, "constructor": false}, {"identifier": "validateStorage", "parameters": "(StorageEntity storageEntity, StoragePolicyKey storagePolicyKey, Integer storagePolicyVersion)", "modifiers": "private", "return": "void", "signature": "void validateStorage(StorageEntity storageEntity, StoragePolicyKey storagePolicyKey, Integer storagePolicyVersion)", "full_signature": "private void validateStorage(StorageEntity storageEntity, StoragePolicyKey storagePolicyKey, Integer storagePolicyVersion)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.validateStorage(StorageEntity storageEntity, StoragePolicyKey storagePolicyKey, Integer storagePolicyVersion)", "testcase": false, "constructor": false}, {"identifier": "validateStorageUnit", "parameters": "(StorageUnitEntity storageUnitEntity, String storageName, BusinessObjectDataKey businessObjectDataKey)", "modifiers": "private", "return": "void", "signature": "void validateStorageUnit(StorageUnitEntity storageUnitEntity, String storageName, BusinessObjectDataKey businessObjectDataKey)", "full_signature": "private void validateStorageUnit(StorageUnitEntity storageUnitEntity, String storageName, BusinessObjectDataKey businessObjectDataKey)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.validateStorageUnit(StorageUnitEntity storageUnitEntity, String storageName, BusinessObjectDataKey businessObjectDataKey)", "testcase": false, "constructor": false}, {"identifier": "executeStoragePolicyTransition", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "@Override @Transactional(propagation = Propagation.NOT_SUPPORTED) public", "return": "void", "signature": "void executeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "@Override @Transactional(propagation = Propagation.NOT_SUPPORTED) public void executeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.executeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false}, {"identifier": "executeStoragePolicyTransitionImpl", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "protected", "return": "void", "signature": "void executeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "protected void executeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.executeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false}, {"identifier": "completeStoragePolicyTransition", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "signature": "void completeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void completeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.completeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false}, {"identifier": "completeStoragePolicyTransitionImpl", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "protected", "return": "void", "signature": "void completeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "protected void completeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.completeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false}, {"identifier": "updateStoragePolicyTransitionFailedAttemptsIgnoreException", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "@Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "signature": "void updateStoragePolicyTransitionFailedAttemptsIgnoreException(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "@Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void updateStoragePolicyTransitionFailedAttemptsIgnoreException(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.updateStoragePolicyTransitionFailedAttemptsIgnoreException(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false}, {"identifier": "updateStoragePolicyTransitionFailedAttemptsIgnoreExceptionImpl", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "protected", "return": "void", "signature": "void updateStoragePolicyTransitionFailedAttemptsIgnoreExceptionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "protected void updateStoragePolicyTransitionFailedAttemptsIgnoreExceptionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.updateStoragePolicyTransitionFailedAttemptsIgnoreExceptionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/impl/StoragePolicyProcessorHelperServiceImpl.java"}, "focal_method": {"identifier": "initiateStoragePolicyTransitionImpl", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "modifiers": "protected", "return": "void", "body": "protected void initiateStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)\n    {\n        // Validate and trim the storage policy selection message content.\n        validateStoragePolicySelection(storagePolicySelection);\n\n        // Get the business object data and storage policy keys from the storage policy selection message.\n        BusinessObjectDataKey businessObjectDataKey = storagePolicySelection.getBusinessObjectDataKey();\n        StoragePolicyKey storagePolicyKey = storagePolicySelection.getStoragePolicyKey();\n        Integer storagePolicyVersion = storagePolicySelection.getStoragePolicyVersion();\n\n        // Retrieve the business object data entity and ensure it exists.\n        BusinessObjectDataEntity businessObjectDataEntity = businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey);\n\n        // Retrieve the storage policy and ensure it exists.\n        StoragePolicyEntity storagePolicyEntity = storagePolicyDaoHelper.getStoragePolicyEntityByKeyAndVersion(storagePolicyKey, storagePolicyVersion);\n\n        // Get the storage name.\n        String storageName = storagePolicyEntity.getStorage().getName();\n\n        // Initialize the storage policy transition parameters DTO by setting business object data key and storage name.\n        storagePolicyTransitionParamsDto.setBusinessObjectDataKey(businessObjectDataKey);\n        storagePolicyTransitionParamsDto.setStorageName(storageName);\n\n        // Validate the business object data.\n        validateBusinessObjectData(businessObjectDataEntity, businessObjectDataKey);\n\n        // Validate the storage.\n        validateStorage(storagePolicyEntity.getStorage(), storagePolicyKey, storagePolicyVersion);\n\n        // Validate that storage policy filter storage has S3 bucket name configured.\n        // Please note that since S3 bucket name attribute value is required we pass a \"true\" flag.\n        String s3BucketName = storageHelper\n            .getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME), storagePolicyEntity.getStorage(),\n                true);\n\n        // Validate that storage policy transition type is GLACIER.\n        Assert.isTrue(StoragePolicyTransitionTypeEntity.GLACIER.equals(storagePolicyEntity.getStoragePolicyTransitionType().getCode()), String\n            .format(\"Storage policy transition type \\\"%s\\\" is not supported. Storage policy: {%s}\",\n                storagePolicyEntity.getStoragePolicyTransitionType().getCode(),\n                storagePolicyHelper.storagePolicyKeyAndVersionToString(storagePolicyKey, storagePolicyVersion)));\n\n        // Get the S3 object tag key to be used to tag the objects for archiving.\n        String s3ObjectTagKey = configurationHelper.getRequiredProperty(ConfigurationValue.S3_ARCHIVE_TO_GLACIER_TAG_KEY);\n\n        // Get the S3 object tag value to be used to tag S3 objects for archiving to Glacier.\n        String s3ObjectTagValue = configurationHelper.getRequiredProperty(ConfigurationValue.S3_ARCHIVE_TO_GLACIER_TAG_VALUE);\n\n        // Get the ARN of the role to assume to tag S3 objects for archiving to Glacier.\n        String s3ObjectTaggerRoleArn = configurationHelper.getRequiredProperty(ConfigurationValue.S3_ARCHIVE_TO_GLACIER_ROLE_ARN);\n\n        // Get the session identifier for the assumed role to be used to tag S3 objects for archiving to Glacier.\n        String s3ObjectTaggerRoleSessionName = configurationHelper.getRequiredProperty(ConfigurationValue.S3_ARCHIVE_TO_GLACIER_ROLE_SESSION_NAME);\n\n        // Retrieve the storage unit and ensure it exists.\n        StorageUnitEntity storageUnitEntity = storageUnitDaoHelper.getStorageUnitEntity(storageName, businessObjectDataEntity);\n\n        // Validate the storage unit.\n        validateStorageUnit(storageUnitEntity, storageName, businessObjectDataKey);\n\n        // Get S3 key prefix for this business object data.\n        String s3KeyPrefix = s3KeyPrefixHelper\n            .buildS3KeyPrefix(storagePolicyEntity.getStorage(), storageUnitEntity.getBusinessObjectData().getBusinessObjectFormat(), businessObjectDataKey);\n\n        // Retrieve and validate storage files registered with the storage unit.\n        List<StorageFile> storageFiles = storageFileHelper.getAndValidateStorageFiles(storageUnitEntity, s3KeyPrefix, storageName, businessObjectDataKey);\n\n        // Validate that this storage does not have any other registered storage files that\n        // start with the S3 key prefix, but belong to other business object data instances.\n        storageUnitDaoHelper.validateNoExplicitlyRegisteredSubPartitionInStorageForBusinessObjectData(storageUnitEntity.getStorage(),\n            businessObjectDataEntity.getBusinessObjectFormat(), businessObjectDataKey, s3KeyPrefix);\n\n        // Update the storage unit status.\n        String reason = StorageUnitStatusEntity.ARCHIVING;\n        String oldStorageUnitStatus = storageUnitEntity.getStatus().getCode();\n        storageUnitDaoHelper.updateStorageUnitStatus(storageUnitEntity, StorageUnitStatusEntity.ARCHIVING, reason);\n\n        // Update the policy transition parameters DTO.\n        storagePolicyTransitionParamsDto.setS3Endpoint(configurationHelper.getProperty(ConfigurationValue.S3_ENDPOINT));\n        storagePolicyTransitionParamsDto.setS3BucketName(s3BucketName);\n        storagePolicyTransitionParamsDto.setS3KeyPrefix(s3KeyPrefix);\n        storagePolicyTransitionParamsDto.setNewStorageUnitStatus(storageUnitEntity.getStatus().getCode());\n        storagePolicyTransitionParamsDto.setOldStorageUnitStatus(oldStorageUnitStatus);\n        storagePolicyTransitionParamsDto.setStorageFiles(storageFiles);\n        storagePolicyTransitionParamsDto.setS3ObjectTagKey(s3ObjectTagKey);\n        storagePolicyTransitionParamsDto.setS3ObjectTagValue(s3ObjectTagValue);\n        storagePolicyTransitionParamsDto.setS3ObjectTaggerRoleArn(s3ObjectTaggerRoleArn);\n        storagePolicyTransitionParamsDto.setS3ObjectTaggerRoleSessionName(s3ObjectTaggerRoleSessionName);\n    }", "signature": "void initiateStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "full_signature": "protected void initiateStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.initiateStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "testcase": false, "constructor": false, "invocations": ["validateStoragePolicySelection", "getBusinessObjectDataKey", "getStoragePolicyKey", "getStoragePolicyVersion", "getBusinessObjectDataEntity", "getStoragePolicyEntityByKeyAndVersion", "getName", "getStorage", "setBusinessObjectDataKey", "setStorageName", "validateBusinessObjectData", "validateStorage", "getStorage", "getStorageAttributeValueByName", "getProperty", "getStorage", "isTrue", "equals", "getCode", "getStoragePolicyTransitionType", "format", "getCode", "getStoragePolicyTransitionType", "storagePolicyKeyAndVersionToString", "getRequiredProperty", "getRequiredProperty", "getRequiredProperty", "getRequiredProperty", "getStorageUnitEntity", "validateStorageUnit", "buildS3KeyPrefix", "getStorage", "getBusinessObjectFormat", "getBusinessObjectData", "getAndValidateStorageFiles", "validateNoExplicitlyRegisteredSubPartitionInStorageForBusinessObjectData", "getStorage", "getBusinessObjectFormat", "getCode", "getStatus", "updateStorageUnitStatus", "setS3Endpoint", "getProperty", "setS3BucketName", "setS3KeyPrefix", "setNewStorageUnitStatus", "getCode", "getStatus", "setOldStorageUnitStatus", "setStorageFiles", "setS3ObjectTagKey", "setS3ObjectTagValue", "setS3ObjectTaggerRoleArn", "setS3ObjectTaggerRoleSessionName"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}