{"test_class": {"identifier": "PartitionWorkerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte[] SERIALIZED_JOB_DATA = {0, 0, 0, 0};", "modifier": "private static final", "type": "byte[]", "declarator": "SERIALIZED_JOB_DATA = {0, 0, 0, 0}", "var_name": "SERIALIZED_JOB_DATA"}, {"original_string": "@Mock private AsyncSqsClient asyncClient;", "modifier": "@Mock private", "type": "AsyncSqsClient", "declarator": "asyncClient", "var_name": "asyncClient"}, {"original_string": "private TokenManager tokenManager;", "modifier": "private", "type": "TokenManager", "declarator": "tokenManager", "var_name": "tokenManager"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private JobSpecTransformer transformer;", "modifier": "private", "type": "JobSpecTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "private PartitionWorker worker;", "modifier": "private", "type": "PartitionWorker", "declarator": "worker", "var_name": "worker"}, {"original_string": "private String validToken;", "modifier": "private", "type": "String", "declarator": "validToken", "var_name": "validToken"}, {"original_string": "@Mock private ScheduleManager scheduleManager;", "modifier": "@Mock private", "type": "ScheduleManager", "declarator": "scheduleManager", "var_name": "scheduleManager"}], "file": "dynein/src/test/java/com/airbnb/dynein/scheduler/worker/PartitionWorkerTest.java"}, "test_case": {"identifier": "testDispatch_DeleteFromTableFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDispatch_DeleteFromTableFail() throws Exception {\n    DyneinJobSpec jobSpec = getTestJobSpec(validToken, \"test6\");\n    Schedule schedule = getSchedule(jobSpec, false);\n    CompletableFuture<Void> response = new CompletableFuture<>();\n    Exception exception = new Exception();\n    response.completeExceptionally(exception);\n    when(asyncClient.add(schedule.getJobSpec(), \"test6\"))\n        .thenReturn(CompletableFuture.completedFuture(null));\n    when(scheduleManager.deleteDispatchedJob(schedule)).thenReturn(response);\n\n    CompletableFuture<Void> ret = worker.dispatchToDestination(schedule);\n\n    ret.get(1000, TimeUnit.MILLISECONDS);\n\n    verify(asyncClient, times(1)).add(schedule.getJobSpec(), \"test6\");\n    verify(scheduleManager, times(1)).deleteDispatchedJob(schedule);\n    verifyNoMoreInteractions(scheduleManager, asyncClient);\n  }", "signature": "void testDispatch_DeleteFromTableFail()", "full_signature": "@Test public void testDispatch_DeleteFromTableFail()", "class_method_signature": "PartitionWorkerTest.testDispatch_DeleteFromTableFail()", "testcase": true, "constructor": false, "invocations": ["getTestJobSpec", "getSchedule", "completeExceptionally", "thenReturn", "when", "add", "getJobSpec", "completedFuture", "thenReturn", "when", "deleteDispatchedJob", "dispatchToDestination", "get", "add", "verify", "times", "getJobSpec", "deleteDispatchedJob", "verify", "times", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "PartitionWorker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long EXECUTOR_TIMEOUT_SECONDS = 5;", "modifier": "private static final", "type": "long", "declarator": "EXECUTOR_TIMEOUT_SECONDS = 5", "var_name": "EXECUTOR_TIMEOUT_SECONDS"}, {"original_string": "private final int index;", "modifier": "private final", "type": "int", "declarator": "index", "var_name": "index"}, {"original_string": "@Named(Constants.SQS_PRODUCER)\n  private final AsyncSqsClient asyncSqsClient;", "modifier": "@Named(Constants.SQS_PRODUCER)\n  private final", "type": "AsyncSqsClient", "declarator": "asyncSqsClient", "var_name": "asyncSqsClient"}, {"original_string": "private final EventBus eventBus;", "modifier": "private final", "type": "EventBus", "declarator": "eventBus", "var_name": "eventBus"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final ScheduleManager scheduleManager;", "modifier": "private final", "type": "ScheduleManager", "declarator": "scheduleManager", "var_name": "scheduleManager"}, {"original_string": "private final JobSpecTransformer jobSpecTransformer;", "modifier": "private final", "type": "JobSpecTransformer", "declarator": "jobSpecTransformer", "var_name": "jobSpecTransformer"}, {"original_string": "private final WorkersConfiguration workersConfiguration;", "modifier": "private final", "type": "WorkersConfiguration", "declarator": "workersConfiguration", "var_name": "workersConfiguration"}, {"original_string": "private final Metrics metrics;", "modifier": "private final", "type": "Metrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private ScheduledExecutorService executorService = null;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "executorService = null", "var_name": "executorService"}, {"original_string": "private ConcurrentHashMap<Integer, Long> scanTimes = null;", "modifier": "private", "type": "ConcurrentHashMap<Integer, Long>", "declarator": "scanTimes = null", "var_name": "scanTimes"}], "methods": [{"identifier": "dispatchToDestination", "parameters": "(Schedule schedule)", "modifiers": "", "return": "CompletableFuture<Void>", "signature": "CompletableFuture<Void> dispatchToDestination(Schedule schedule)", "full_signature": " CompletableFuture<Void> dispatchToDestination(Schedule schedule)", "class_method_signature": "PartitionWorker.dispatchToDestination(Schedule schedule)", "testcase": false, "constructor": false}, {"identifier": "dispatchOverdue", "parameters": "(String partition)", "modifiers": "", "return": "CompletableFuture<Boolean>", "signature": "CompletableFuture<Boolean> dispatchOverdue(String partition)", "full_signature": " CompletableFuture<Boolean> dispatchOverdue(String partition)", "class_method_signature": "PartitionWorker.dispatchOverdue(String partition)", "testcase": false, "constructor": false}, {"identifier": "scanGroup", "parameters": "(List<Integer> partitions)", "modifiers": "private", "return": "void", "signature": "void scanGroup(List<Integer> partitions)", "full_signature": "private void scanGroup(List<Integer> partitions)", "class_method_signature": "PartitionWorker.scanGroup(List<Integer> partitions)", "testcase": false, "constructor": false}, {"identifier": "recoverStuckJobs", "parameters": "(List<Integer> partitions, long lookAheadMs)", "modifiers": "", "return": "CompletableFuture<Void>", "signature": "CompletableFuture<Void> recoverStuckJobs(List<Integer> partitions, long lookAheadMs)", "full_signature": " CompletableFuture<Void> recoverStuckJobs(List<Integer> partitions, long lookAheadMs)", "class_method_signature": "PartitionWorker.recoverStuckJobs(List<Integer> partitions, long lookAheadMs)", "testcase": false, "constructor": false}, {"identifier": "recoverStuckJobs", "parameters": "(List<Integer> partitions)", "modifiers": "", "return": "CompletableFuture<Void>", "signature": "CompletableFuture<Void> recoverStuckJobs(List<Integer> partitions)", "full_signature": " CompletableFuture<Void> recoverStuckJobs(List<Integer> partitions)", "class_method_signature": "PartitionWorker.recoverStuckJobs(List<Integer> partitions)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(List<Integer> partitions)", "modifiers": "", "return": "void", "signature": "void start(List<Integer> partitions)", "full_signature": " void start(List<Integer> partitions)", "class_method_signature": "PartitionWorker.start(List<Integer> partitions)", "testcase": false, "constructor": false}, {"identifier": "shutdownExecutor", "parameters": "()", "modifiers": "", "return": "void", "signature": "void shutdownExecutor()", "full_signature": " void shutdownExecutor()", "class_method_signature": "PartitionWorker.shutdownExecutor()", "testcase": false, "constructor": false}, {"identifier": "startExecutor", "parameters": "()", "modifiers": "", "return": "void", "signature": "void startExecutor()", "full_signature": " void startExecutor()", "class_method_signature": "PartitionWorker.startExecutor()", "testcase": false, "constructor": false}], "file": "dynein/src/main/java/com/airbnb/dynein/scheduler/worker/PartitionWorker.java"}, "focal_method": {"identifier": "dispatchToDestination", "parameters": "(Schedule schedule)", "modifiers": "", "return": "CompletableFuture<Void>", "body": "CompletableFuture<Void> dispatchToDestination(Schedule schedule) {\n    Stopwatch stopwatch = Stopwatch.createStarted();\n    CompletableFuture<Void> ret = new CompletableFuture<>();\n    DyneinJobSpec jobSpec = jobSpecTransformer.deserializeJobSpec(schedule.getJobSpec());\n\n    asyncSqsClient\n        .add(schedule.getJobSpec(), jobSpec.getQueueName())\n        .whenCompleteAsync(\n            (it, ex) -> {\n              if (ex != null) {\n                log.error(\n                    \"Error dispatching job {} to destination queue {}\",\n                    jobSpec.getJobToken(),\n                    jobSpec.getQueueName(),\n                    ex);\n                metrics.dispatchJobError(ex, jobSpec.getQueueName());\n                scheduleManager\n                    .updateStatus(\n                        schedule, Schedule.JobStatus.ACQUIRED, Schedule.JobStatus.SCHEDULED)\n                    .whenComplete((response, exception) -> ret.completeExceptionally(ex));\n              } else {\n                log.info(\n                    \"Dispatched job {} to destination queue {}\",\n                    jobSpec.getJobToken(),\n                    jobSpec.getQueueName());\n                long time = stopwatch.elapsed(TimeUnit.NANOSECONDS);\n                metrics.dispatchScheduledJob(time, jobSpec, schedule.getShardId());\n                scheduleManager\n                    .deleteDispatchedJob(schedule)\n                    .whenComplete((response, exception) -> ret.complete(null));\n              }\n            },\n            executorService);\n\n    return ret;\n  }", "signature": "CompletableFuture<Void> dispatchToDestination(Schedule schedule)", "full_signature": " CompletableFuture<Void> dispatchToDestination(Schedule schedule)", "class_method_signature": "PartitionWorker.dispatchToDestination(Schedule schedule)", "testcase": false, "constructor": false, "invocations": ["createStarted", "deserializeJobSpec", "getJobSpec", "whenCompleteAsync", "add", "getJobSpec", "getQueueName", "error", "getJobToken", "getQueueName", "dispatchJobError", "getQueueName", "whenComplete", "updateStatus", "completeExceptionally", "info", "getJobToken", "getQueueName", "elapsed", "dispatchScheduledJob", "getShardId", "whenComplete", "deleteDispatchedJob", "complete"]}, "repository": {"repo_id": 208320365, "url": "https://github.com/airbnb/dynein", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 247, "size": 71, "license": "licensed"}}