{"test_class": {"identifier": "Jackson2HelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "handlebars-jackson2/src/test/java/com/github/jknack/handlebars/Jackson2HelperTest.java"}, "test_case": {"identifier": "toJSONViewInclusive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void toJSONViewInclusive() throws IOException {\n    Handlebars handlebars = new Handlebars();\n\n    handlebars.registerHelper(\"@json\", Jackson2Helper.INSTANCE);\n\n    Template template =\n        handlebars\n            .compileInline(\"{{@json this view=\\\"com.github.jknack.handlebars.Blog$Views$Public\\\"}}\");\n\n    CharSequence result = template.apply(new Blog(\"First Post\", \"...\"));\n\n    assertEquals(\"{\\\"title\\\":\\\"First Post\\\",\\\"body\\\":\\\"...\\\",\\\"comments\\\":[]}\",\n        result);\n  }", "signature": "void toJSONViewInclusive()", "full_signature": "@Test public void toJSONViewInclusive()", "class_method_signature": "Jackson2HelperTest.toJSONViewInclusive()", "testcase": true, "constructor": false, "invocations": ["registerHelper", "compileInline", "apply", "assertEquals"]}, "focal_class": {"identifier": "Jackson2Helper", "superclass": "", "interfaces": "implements Helper<Object>", "fields": [{"original_string": "public static final Helper<Object> INSTANCE = new Jackson2Helper();", "modifier": "public static final", "type": "Helper<Object>", "declarator": "INSTANCE = new Jackson2Helper()", "var_name": "INSTANCE"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private final Map<String, Class<?>> alias = new HashMap<String, Class<?>>();", "modifier": "private final", "type": "Map<String, Class<?>>", "declarator": "alias = new HashMap<String, Class<?>>()", "var_name": "alias"}], "methods": [{"identifier": "Jackson2Helper", "parameters": "(final ObjectMapper objectMapper)", "modifiers": "public", "return": "", "signature": " Jackson2Helper(final ObjectMapper objectMapper)", "full_signature": "public  Jackson2Helper(final ObjectMapper objectMapper)", "class_method_signature": "Jackson2Helper.Jackson2Helper(final ObjectMapper objectMapper)", "testcase": false, "constructor": true}, {"identifier": "Jackson2Helper", "parameters": "()", "modifiers": "private", "return": "", "signature": " Jackson2Helper()", "full_signature": "private  Jackson2Helper()", "class_method_signature": "Jackson2Helper.Jackson2Helper()", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(final Object context, final Options options)", "modifiers": "@Override public", "return": "Object", "signature": "Object apply(final Object context, final Options options)", "full_signature": "@Override public Object apply(final Object context, final Options options)", "class_method_signature": "Jackson2Helper.apply(final Object context, final Options options)", "testcase": false, "constructor": false}, {"identifier": "viewAlias", "parameters": "(final String alias,\n      final Class<?> viewClass)", "modifiers": "public", "return": "Jackson2Helper", "signature": "Jackson2Helper viewAlias(final String alias,\n      final Class<?> viewClass)", "full_signature": "public Jackson2Helper viewAlias(final String alias,\n      final Class<?> viewClass)", "class_method_signature": "Jackson2Helper.viewAlias(final String alias,\n      final Class<?> viewClass)", "testcase": false, "constructor": false}], "file": "handlebars-jackson2/src/main/java/com/github/jknack/handlebars/Jackson2Helper.java"}, "focal_method": {"identifier": "apply", "parameters": "(final Object context, final Options options)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object apply(final Object context, final Options options)\n      throws IOException {\n    if (context == null) {\n      return options.hash(\"default\", \"\");\n    }\n    String viewName = options.hash(\"view\", \"\");\n    JsonGenerator generator = null;\n    try {\n      final ObjectWriter writer;\n      // do we need to use a view?\n      if (!Handlebars.Utils.isEmpty(viewName)) {\n        Class<?> viewClass = alias.get(viewName);\n        if (viewClass == null) {\n          viewClass = getClass().getClassLoader().loadClass(viewName);\n        }\n        writer = mapper.writerWithView(viewClass);\n      } else {\n        writer = mapper.writer();\n      }\n      JsonFactory jsonFactory = mapper.getFactory();\n\n      SegmentedStringWriter output = new SegmentedStringWriter(jsonFactory._getBufferRecycler());\n\n      // creates a json generator.\n      generator = jsonFactory.createJsonGenerator(output);\n\n      Boolean escapeHtml = options.hash(\"escapeHTML\", Boolean.FALSE);\n      // do we need to escape html?\n      if (escapeHtml) {\n        generator.setCharacterEscapes(new HtmlEscapes());\n      }\n\n      Boolean pretty = options.hash(\"pretty\", Boolean.FALSE);\n\n      // write the JSON output.\n      if (pretty) {\n        writer.withDefaultPrettyPrinter().writeValue(generator, context);\n      } else {\n        writer.writeValue(generator, context);\n      }\n\n      generator.close();\n\n      return new Handlebars.SafeString(output.getAndClear());\n    } catch (ClassNotFoundException ex) {\n      throw new IllegalArgumentException(viewName, ex);\n    } finally {\n      if (generator != null && !generator.isClosed()) {\n        generator.close();\n      }\n    }\n  }", "signature": "Object apply(final Object context, final Options options)", "full_signature": "@Override public Object apply(final Object context, final Options options)", "class_method_signature": "Jackson2Helper.apply(final Object context, final Options options)", "testcase": false, "constructor": false, "invocations": ["hash", "hash", "isEmpty", "get", "loadClass", "getClassLoader", "getClass", "writerWithView", "writer", "getFactory", "_getBufferRecycler", "createJsonGenerator", "hash", "setCharacterEscapes", "hash", "writeValue", "withDefaultPrettyPrinter", "writeValue", "close", "getAndClear", "isClosed", "close"]}, "repository": {"repo_id": 4459604, "url": "https://github.com/jknack/handlebars.java", "stars": 1107, "created": "5/27/2012 3:22:22 AM +00:00", "updates": "2020-01-24T06:58:31+00:00", "fork": "False", "license": "licensed"}}