{"test_class": {"identifier": "SoftwareSmartcardTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int pin = 1234;", "modifier": "private static final", "type": "int", "declarator": "pin = 1234", "var_name": "pin"}, {"original_string": "private static int puk = 12345678;", "modifier": "private static", "type": "int", "declarator": "puk = 12345678", "var_name": "puk"}, {"original_string": "private static BigInteger challenge;", "modifier": "private static", "type": "BigInteger", "declarator": "challenge", "var_name": "challenge"}, {"original_string": "private static final URI deviceURI = URI.create(\"ImbaDeviceNo42\");", "modifier": "private static final", "type": "URI", "declarator": "deviceURI = URI.create(\"ImbaDeviceNo42\")", "var_name": "deviceURI"}, {"original_string": "private static final Random rand = new Random(42);", "modifier": "private static final", "type": "Random", "declarator": "rand = new Random(42)", "var_name": "rand"}, {"original_string": "private static final CredentialSerializer serializer = new CredentialSerializerGzipXml();", "modifier": "private static final", "type": "CredentialSerializer", "declarator": "serializer = new CredentialSerializerGzipXml()", "var_name": "serializer"}], "file": "Code/core-abce/abce-components/src/test/java/eu/abc4trust/smartcard/SoftwareSmartcardTest.java"}, "test_case": {"identifier": "testStoreCredential", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStoreCredential(){\n    \tSoftwareSmartcard s = setupSmartcard();\n    \t\n    \tRandom r = new Random(1234);\n    \t\n    \tURI longURI1 = URI.create(new BigInteger(2048*3, r).toString());\n    \tURI longURI2 = URI.create(new BigInteger(2048*2, r).toString());\n    \tURI longURI3 = URI.create(new BigInteger(2048*2, r).toString());\n    \tSystem.out.println(\"credUID: \" + longURI3);\n    \t\n    \tbyte[] loongByteArr = new byte[2048*2+256];\n    \t\n    \tCredential cred = new Credential();\n    \tCryptoParams cryptoParam = new CryptoParams();\n    \t\n    \tCredentialDescription credDesc = new CredentialDescription();\n    \tcredDesc.setImageReference(ImagePathBuilder.TEST_IMAGE_JPG);\n        credDesc.setIssuerParametersUID(longURI2);\n        credDesc.setCredentialSpecificationUID(longURI2);\n    \tcredDesc.setCredentialUID(longURI3);\n    \tcred.setCredentialDescription(credDesc);\n    \tcred.setCryptoParams(cryptoParam);\n    \tURI credentialId =  URI.create(\"credUri\");\n    \ts.storeCredential(pin, credentialId, cred, serializer);\n    \t\n    \tCredential credPrime = s.getCredential(pin, credentialId, serializer);\n    \tCredentialDescription credDescriptionPrime = credPrime.getCredentialDescription();\n    \tSystem.out.println(\"from read credential - credUID: \"+credDescriptionPrime.getCredentialUID().toString());\n    \tassertEquals(credDesc.getCredentialUID(), credDescriptionPrime.getCredentialUID());\n    \t\n    \tbyte[] origCredSerialized = serializer.serializeCredential(cred);\n    \tbyte[] newCredSerialized = serializer.serializeCredential(credPrime);\n    \tSystem.out.println(\"orig: \" + origCredSerialized.length+\", new: \" + newCredSerialized.length);\n    \tassertTrue(Arrays.equals(origCredSerialized, newCredSerialized));\n    \t\n    \t\n    \t//Now test pseudonym storage\n    \tPseudonymWithMetadata pseudonym = new PseudonymWithMetadata();\n    \tPseudonym pseu = new Pseudonym();\n    \tpseu.setExclusive(true);\n    \tURI pseudonymUID = URI.create(\"pseudonymUri\");\n    \tpseu.setPseudonymUID(pseudonymUID);\n    \tpseu.setPseudonymValue(loongByteArr);\n    \tpseu.setScope(\"testScope\");\n    \tpseu.setSecretReference(deviceURI);\n    \tpseudonym.setPseudonym(pseu);    \t\n    \tpseudonym.setCryptoParams(cryptoParam);\n    \t    \t\n    \tCardStorage cardStorage = new CardStorage();\n    \tcardStorage.addSmartcard(s, pin);    \t\n    \tPseudonymSerializer pseudonymSerializer = new PseudonymSerializerGzipXml(cardStorage);\n    \tSystem.out.println(\"After this line\");\n    \ts.storePseudonym(pin, pseudonymUID, pseudonym, pseudonymSerializer);\n    \t\n    \tPseudonymWithMetadata pseudonymPrime = s.getPseudonym(pin, pseu.getPseudonymUID(), pseudonymSerializer);\n\n    \tbyte[] first = pseudonymSerializer.serializePseudonym(pseudonym);\n    \tbyte[] second = pseudonymSerializer.serializePseudonym(pseudonymPrime);\n    \tassertTrue(Arrays.equals(first, second));\n    }", "signature": "void testStoreCredential()", "full_signature": "@Test public void testStoreCredential()", "class_method_signature": "SoftwareSmartcardTest.testStoreCredential()", "testcase": true, "constructor": false, "invocations": ["setupSmartcard", "create", "toString", "create", "toString", "create", "toString", "println", "setImageReference", "setIssuerParametersUID", "setCredentialSpecificationUID", "setCredentialUID", "setCredentialDescription", "setCryptoParams", "create", "storeCredential", "getCredential", "getCredentialDescription", "println", "toString", "getCredentialUID", "assertEquals", "getCredentialUID", "getCredentialUID", "serializeCredential", "serializeCredential", "println", "assertTrue", "equals", "setExclusive", "create", "setPseudonymUID", "setPseudonymValue", "setScope", "setSecretReference", "setPseudonym", "setCryptoParams", "addSmartcard", "println", "storePseudonym", "getPseudonym", "getPseudonymUID", "serializePseudonym", "serializePseudonym", "assertTrue", "equals"]}, "focal_class": {"identifier": "SoftwareSmartcard", "superclass": "", "interfaces": "implements Smartcard, Serializable", "fields": [{"original_string": "static Logger log = Logger.getLogger(SoftwareSmartcard.class.getName());", "modifier": "static", "type": "Logger", "declarator": "log = Logger.getLogger(SoftwareSmartcard.class.getName())", "var_name": "log"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final int MAX_CREDENTIALS = 8;", "modifier": "private static final", "type": "int", "declarator": "MAX_CREDENTIALS = 8", "var_name": "MAX_CREDENTIALS"}, {"original_string": "private static final int MAX_ISSUERS = 6;", "modifier": "private static final", "type": "int", "declarator": "MAX_ISSUERS = 6", "var_name": "MAX_ISSUERS"}, {"original_string": "private static final int MAX_BLOBS = 50;", "modifier": "private static final", "type": "int", "declarator": "MAX_BLOBS = 50", "var_name": "MAX_BLOBS"}, {"original_string": "private static final int MAX_URI_LEN_BYTES = 64;", "modifier": "private static final", "type": "int", "declarator": "MAX_URI_LEN_BYTES = 64", "var_name": "MAX_URI_LEN_BYTES"}, {"original_string": "private static final int MAX_BLOB_LEN_BYTES = 512;", "modifier": "private static final", "type": "int", "declarator": "MAX_BLOB_LEN_BYTES = 512", "var_name": "MAX_BLOB_LEN_BYTES"}, {"original_string": "private static final int MAX_PIN_TRIALS = 3;", "modifier": "private static final", "type": "int", "declarator": "MAX_PIN_TRIALS = 3", "var_name": "MAX_PIN_TRIALS"}, {"original_string": "private static final int MAX_PUK_TRIALS = 10;", "modifier": "private static final", "type": "int", "declarator": "MAX_PUK_TRIALS = 10", "var_name": "MAX_PUK_TRIALS"}, {"original_string": "private static final String URI_ENCODING = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "URI_ENCODING = \"UTF-8\"", "var_name": "URI_ENCODING"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private static final String MAC_ALGORITHM = \"HmacSHA256\";", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "String", "declarator": "MAC_ALGORITHM = \"HmacSHA256\"", "var_name": "MAC_ALGORITHM"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private static final int BACKUP_COURSE_TOKEN = 3;", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "int", "declarator": "BACKUP_COURSE_TOKEN = 3", "var_name": "BACKUP_COURSE_TOKEN"}, {"original_string": "static transient private Random rand = new SecureRandom();", "modifier": "static transient private", "type": "Random", "declarator": "rand = new SecureRandom()", "var_name": "rand"}, {"original_string": "private boolean factoryInit;", "modifier": "private", "type": "boolean", "declarator": "factoryInit", "var_name": "factoryInit"}, {"original_string": "private int pin;", "modifier": "private", "type": "int", "declarator": "pin", "var_name": "pin"}, {"original_string": "private int puk;", "modifier": "private", "type": "int", "declarator": "puk", "var_name": "puk"}, {"original_string": "private int pinTrialsLeft;", "modifier": "private", "type": "int", "declarator": "pinTrialsLeft", "var_name": "pinTrialsLeft"}, {"original_string": "private int pukTrialsLeft;", "modifier": "private", "type": "int", "declarator": "pukTrialsLeft", "var_name": "pukTrialsLeft"}, {"original_string": "private final Map<URI, SmartcardBlob> blobstore;", "modifier": "private final", "type": "Map<URI, SmartcardBlob>", "declarator": "blobstore", "var_name": "blobstore"}, {"original_string": "private SystemParameters params;", "modifier": "private", "type": "SystemParameters", "declarator": "params", "var_name": "params"}, {"original_string": "private BigInteger deviceSecret;", "modifier": "private", "type": "BigInteger", "declarator": "deviceSecret", "var_name": "deviceSecret"}, {"original_string": "private byte[] currentNonce;", "modifier": "private", "type": "byte[]", "declarator": "currentNonce", "var_name": "currentNonce"}, {"original_string": "private RSAVerificationKey schoolKey;", "modifier": "private", "type": "RSAVerificationKey", "declarator": "schoolKey", "var_name": "schoolKey"}, {"original_string": "private final Map<URI, TrustedIssuerParameters> issuerParameters;", "modifier": "private final", "type": "Map<URI, TrustedIssuerParameters>", "declarator": "issuerParameters", "var_name": "issuerParameters"}, {"original_string": "private final Map<URI, Integer> issuerIDs;", "modifier": "private final", "type": "Map<URI, Integer>", "declarator": "issuerIDs", "var_name": "issuerIDs"}, {"original_string": "private final Map<Integer, URI> issuerUris;", "modifier": "private final", "type": "Map<Integer, URI>", "declarator": "issuerUris", "var_name": "issuerUris"}, {"original_string": "private final Map<URI, CredentialOnSmartcard> credentials;", "modifier": "private final", "type": "Map<URI, CredentialOnSmartcard>", "declarator": "credentials", "var_name": "credentials"}, {"original_string": "private final Map<Integer, RSAVerificationKey> courseKeys;", "modifier": "private final", "type": "Map<Integer, RSAVerificationKey>", "declarator": "courseKeys", "var_name": "courseKeys"}, {"original_string": "private short deviceID;", "modifier": "private", "type": "short", "declarator": "deviceID", "var_name": "deviceID"}, {"original_string": "private final byte[] macKey = new byte[16];", "modifier": "private final", "type": "byte[]", "declarator": "macKey = new byte[16]", "var_name": "macKey"}, {"original_string": "private transient ZkProofState zkProofState;", "modifier": "private transient", "type": "ZkProofState", "declarator": "zkProofState", "var_name": "zkProofState"}], "methods": [{"identifier": "SoftwareSmartcard", "parameters": "()", "modifiers": "public", "return": "", "signature": " SoftwareSmartcard()", "full_signature": "public  SoftwareSmartcard()", "class_method_signature": "SoftwareSmartcard.SoftwareSmartcard()", "testcase": false, "constructor": true}, {"identifier": "SoftwareSmartcard", "parameters": "(Random random)", "modifiers": "public", "return": "", "signature": " SoftwareSmartcard(Random random)", "full_signature": "public  SoftwareSmartcard(Random random)", "class_method_signature": "SoftwareSmartcard.SoftwareSmartcard(Random random)", "testcase": false, "constructor": true}, {"identifier": "getIssuerIDFromUri", "parameters": "(URI parametersUri)", "modifiers": "private", "return": "int", "signature": "int getIssuerIDFromUri(URI parametersUri)", "full_signature": "private int getIssuerIDFromUri(URI parametersUri)", "class_method_signature": "SoftwareSmartcard.getIssuerIDFromUri(URI parametersUri)", "testcase": false, "constructor": false}, {"identifier": "getIssuerUriFromID", "parameters": "(int ID)", "modifiers": "private", "return": "URI", "signature": "URI getIssuerUriFromID(int ID)", "full_signature": "private URI getIssuerUriFromID(int ID)", "class_method_signature": "SoftwareSmartcard.getIssuerUriFromID(int ID)", "testcase": false, "constructor": false}, {"identifier": "validatePassword", "parameters": "(String password)", "modifiers": "private", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode validatePassword(String password)", "full_signature": "private SmartcardStatusCode validatePassword(String password)", "class_method_signature": "SoftwareSmartcard.validatePassword(String password)", "testcase": false, "constructor": false}, {"identifier": "authenticateWithPin", "parameters": "(int pin)", "modifiers": "private", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode authenticateWithPin(int pin)", "full_signature": "private SmartcardStatusCode authenticateWithPin(int pin)", "class_method_signature": "SoftwareSmartcard.authenticateWithPin(int pin)", "testcase": false, "constructor": false}, {"identifier": "authenticateWithPuk", "parameters": "(int puk)", "modifiers": "private", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode authenticateWithPuk(int puk)", "full_signature": "private SmartcardStatusCode authenticateWithPuk(int puk)", "class_method_signature": "SoftwareSmartcard.authenticateWithPuk(int puk)", "testcase": false, "constructor": false}, {"identifier": "authenticateWithSignature", "parameters": "(RSAKeyPair secretKey,\n            RSAVerificationKey publicKey, ByteArrayOutputStream toSign)", "modifiers": "private", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode authenticateWithSignature(RSAKeyPair secretKey,\n            RSAVerificationKey publicKey, ByteArrayOutputStream toSign)", "full_signature": "private SmartcardStatusCode authenticateWithSignature(RSAKeyPair secretKey,\n            RSAVerificationKey publicKey, ByteArrayOutputStream toSign)", "class_method_signature": "SoftwareSmartcard.authenticateWithSignature(RSAKeyPair secretKey,\n            RSAVerificationKey publicKey, ByteArrayOutputStream toSign)", "testcase": false, "constructor": false}, {"identifier": "changePin", "parameters": "(int pin, int newPin)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode changePin(int pin, int newPin)", "full_signature": "@Override public SmartcardStatusCode changePin(int pin, int newPin)", "class_method_signature": "SoftwareSmartcard.changePin(int pin, int newPin)", "testcase": false, "constructor": false}, {"identifier": "deleteBlob", "parameters": "(int pin, URI uri)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode deleteBlob(int pin, URI uri)", "full_signature": "@Override public SmartcardStatusCode deleteBlob(int pin, URI uri)", "class_method_signature": "SoftwareSmartcard.deleteBlob(int pin, URI uri)", "testcase": false, "constructor": false}, {"identifier": "deleteCredential", "parameters": "(int pin, URI credentialUri)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode deleteCredential(int pin, URI credentialUri)", "full_signature": "@Override public SmartcardStatusCode deleteCredential(int pin, URI credentialUri)", "class_method_signature": "SoftwareSmartcard.deleteCredential(int pin, URI credentialUri)", "testcase": false, "constructor": false}, {"identifier": "removeCredentialUri", "parameters": "(int pin, URI uri)", "modifiers": "@Override public", "return": "void", "signature": "void removeCredentialUri(int pin, URI uri)", "full_signature": "@Override public void removeCredentialUri(int pin, URI uri)", "class_method_signature": "SoftwareSmartcard.removeCredentialUri(int pin, URI uri)", "testcase": false, "constructor": false}, {"identifier": "getBlob", "parameters": "(int pin, URI uri)", "modifiers": "@Override public", "return": "SmartcardBlob", "signature": "SmartcardBlob getBlob(int pin, URI uri)", "full_signature": "@Override public SmartcardBlob getBlob(int pin, URI uri)", "class_method_signature": "SoftwareSmartcard.getBlob(int pin, URI uri)", "testcase": false, "constructor": false}, {"identifier": "getBlobs", "parameters": "(int pin)", "modifiers": "@Override public", "return": "Map<URI, SmartcardBlob>", "signature": "Map<URI, SmartcardBlob> getBlobs(int pin)", "full_signature": "@Override public Map<URI, SmartcardBlob> getBlobs(int pin)", "class_method_signature": "SoftwareSmartcard.getBlobs(int pin)", "testcase": false, "constructor": false}, {"identifier": "getBlobUris", "parameters": "(int pin)", "modifiers": "@Override public", "return": "Set<URI>", "signature": "Set<URI> getBlobUris(int pin)", "full_signature": "@Override public Set<URI> getBlobUris(int pin)", "class_method_signature": "SoftwareSmartcard.getBlobUris(int pin)", "testcase": false, "constructor": false}, {"identifier": "getCourse", "parameters": "(int pin, URI issuerUri)", "modifiers": "@Override public", "return": "Course", "signature": "Course getCourse(int pin, URI issuerUri)", "full_signature": "@Override public Course getCourse(int pin, URI issuerUri)", "class_method_signature": "SoftwareSmartcard.getCourse(int pin, URI issuerUri)", "testcase": false, "constructor": false}, {"identifier": "getNewNonceForSignature", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getNewNonceForSignature()", "full_signature": "@Override public byte[] getNewNonceForSignature()", "class_method_signature": "SoftwareSmartcard.getNewNonceForSignature()", "testcase": false, "constructor": false}, {"identifier": "incrementCourseCounter", "parameters": "(int pin, RSAKeyPair key,\n            URI issuerUri, int lectureId)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode incrementCourseCounter(int pin, RSAKeyPair key,\n            URI issuerUri, int lectureId)", "full_signature": "@Override public SmartcardStatusCode incrementCourseCounter(int pin, RSAKeyPair key,\n            URI issuerUri, int lectureId)", "class_method_signature": "SoftwareSmartcard.incrementCourseCounter(int pin, RSAKeyPair key,\n            URI issuerUri, int lectureId)", "testcase": false, "constructor": false}, {"identifier": "listCourses", "parameters": "(int pin)", "modifiers": "@Override public", "return": "Set<Course>", "signature": "Set<Course> listCourses(int pin)", "full_signature": "@Override public Set<Course> listCourses(int pin)", "class_method_signature": "SoftwareSmartcard.listCourses(int pin)", "testcase": false, "constructor": false}, {"identifier": "pinTrialsLeft", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int pinTrialsLeft()", "full_signature": "@Override public int pinTrialsLeft()", "class_method_signature": "SoftwareSmartcard.pinTrialsLeft()", "testcase": false, "constructor": false}, {"identifier": "pukTrialsLeft", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int pukTrialsLeft()", "full_signature": "@Override public int pukTrialsLeft()", "class_method_signature": "SoftwareSmartcard.pukTrialsLeft()", "testcase": false, "constructor": false}, {"identifier": "resetPinWithPuk", "parameters": "(int puk, int newPin)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode resetPinWithPuk(int puk, int newPin)", "full_signature": "@Override public SmartcardStatusCode resetPinWithPuk(int puk, int newPin)", "class_method_signature": "SoftwareSmartcard.resetPinWithPuk(int puk, int newPin)", "testcase": false, "constructor": false}, {"identifier": "smartcardPresent", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean smartcardPresent()", "full_signature": "@Override public boolean smartcardPresent()", "class_method_signature": "SoftwareSmartcard.smartcardPresent()", "testcase": false, "constructor": false}, {"identifier": "storeBlob", "parameters": "(int pin, URI uri, SmartcardBlob blob)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode storeBlob(int pin, URI uri, SmartcardBlob blob)", "full_signature": "@Override public SmartcardStatusCode storeBlob(int pin, URI uri, SmartcardBlob blob)", "class_method_signature": "SoftwareSmartcard.storeBlob(int pin, URI uri, SmartcardBlob blob)", "testcase": false, "constructor": false}, {"identifier": "wasInit", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean wasInit()", "full_signature": "@Override public boolean wasInit()", "class_method_signature": "SoftwareSmartcard.wasInit()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(int newPin, SystemParameters sysParams,\n            RSAKeyPair rootKey, short deviceID)", "modifiers": "@Override public", "return": "int", "signature": "int init(int newPin, SystemParameters sysParams,\n            RSAKeyPair rootKey, short deviceID)", "full_signature": "@Override public int init(int newPin, SystemParameters sysParams,\n            RSAKeyPair rootKey, short deviceID)", "class_method_signature": "SoftwareSmartcard.init(int newPin, SystemParameters sysParams,\n            RSAKeyPair rootKey, short deviceID)", "testcase": false, "constructor": false}, {"identifier": "uriLengthOk", "parameters": "(URI uri)", "modifiers": "private", "return": "boolean", "signature": "boolean uriLengthOk(URI uri)", "full_signature": "private boolean uriLengthOk(URI uri)", "class_method_signature": "SoftwareSmartcard.uriLengthOk(URI uri)", "testcase": false, "constructor": false}, {"identifier": "getDeviceURI", "parameters": "(int pin)", "modifiers": "@Override public", "return": "URI", "signature": "URI getDeviceURI(int pin)", "full_signature": "@Override public URI getDeviceURI(int pin)", "class_method_signature": "SoftwareSmartcard.getDeviceURI(int pin)", "testcase": false, "constructor": false}, {"identifier": "getDeviceID", "parameters": "(int pin)", "modifiers": "@Override public", "return": "short", "signature": "short getDeviceID(int pin)", "full_signature": "@Override public short getDeviceID(int pin)", "class_method_signature": "SoftwareSmartcard.getDeviceID(int pin)", "testcase": false, "constructor": false}, {"identifier": "readAuthenticationKey", "parameters": "(int pin, int keyID)", "modifiers": "@Override public", "return": "RSAVerificationKey", "signature": "RSAVerificationKey readAuthenticationKey(int pin, int keyID)", "full_signature": "@Override public RSAVerificationKey readAuthenticationKey(int pin, int keyID)", "class_method_signature": "SoftwareSmartcard.readAuthenticationKey(int pin, int keyID)", "testcase": false, "constructor": false}, {"identifier": "getSystemParameters", "parameters": "(int pin)", "modifiers": "@Override public", "return": "SystemParameters", "signature": "SystemParameters getSystemParameters(int pin)", "full_signature": "@Override public SystemParameters getSystemParameters(int pin)", "class_method_signature": "SoftwareSmartcard.getSystemParameters(int pin)", "testcase": false, "constructor": false}, {"identifier": "computeScopeExclusivePseudonym", "parameters": "(int pin, URI scope)", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger computeScopeExclusivePseudonym(int pin, URI scope)", "full_signature": "@Override public BigInteger computeScopeExclusivePseudonym(int pin, URI scope)", "class_method_signature": "SoftwareSmartcard.computeScopeExclusivePseudonym(int pin, URI scope)", "testcase": false, "constructor": false}, {"identifier": "computeDevicePublicKey", "parameters": "(int pin)", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger computeDevicePublicKey(int pin)", "full_signature": "@Override public BigInteger computeDevicePublicKey(int pin)", "class_method_signature": "SoftwareSmartcard.computeDevicePublicKey(int pin)", "testcase": false, "constructor": false}, {"identifier": "prepareZkProof", "parameters": "(int pin, Set<URI> credentialIds,\n            Set<URI> scopeExclusivePseudonyms, boolean includeDevicePublicKeyProof)", "modifiers": "@Override public", "return": "ZkProofCommitment", "signature": "ZkProofCommitment prepareZkProof(int pin, Set<URI> credentialIds,\n            Set<URI> scopeExclusivePseudonyms, boolean includeDevicePublicKeyProof)", "full_signature": "@Override public ZkProofCommitment prepareZkProof(int pin, Set<URI> credentialIds,\n            Set<URI> scopeExclusivePseudonyms, boolean includeDevicePublicKeyProof)", "class_method_signature": "SoftwareSmartcard.prepareZkProof(int pin, Set<URI> credentialIds,\n            Set<URI> scopeExclusivePseudonyms, boolean includeDevicePublicKeyProof)", "testcase": false, "constructor": false}, {"identifier": "finalizeZkProof", "parameters": "(int pin, BigInteger challenge, Set<URI> credentialIds,\n            Set<URI> scopeExclusivePseudonyms)", "modifiers": "@Override public", "return": "ZkProofResponse", "signature": "ZkProofResponse finalizeZkProof(int pin, BigInteger challenge, Set<URI> credentialIds,\n            Set<URI> scopeExclusivePseudonyms)", "full_signature": "@Override public ZkProofResponse finalizeZkProof(int pin, BigInteger challenge, Set<URI> credentialIds,\n            Set<URI> scopeExclusivePseudonyms)", "class_method_signature": "SoftwareSmartcard.finalizeZkProof(int pin, BigInteger challenge, Set<URI> credentialIds,\n            Set<URI> scopeExclusivePseudonyms)", "testcase": false, "constructor": false}, {"identifier": "backupAttendanceData", "parameters": "(int pin, String password)", "modifiers": "@Override public", "return": "SmartcardBackup", "signature": "SmartcardBackup backupAttendanceData(int pin, String password)", "full_signature": "@Override public SmartcardBackup backupAttendanceData(int pin, String password)", "class_method_signature": "SoftwareSmartcard.backupAttendanceData(int pin, String password)", "testcase": false, "constructor": false}, {"identifier": "pinToByteArr", "parameters": "(int pin)", "modifiers": "private", "return": "byte[]", "signature": "byte[] pinToByteArr(int pin)", "full_signature": "private byte[] pinToByteArr(int pin)", "class_method_signature": "SoftwareSmartcard.pinToByteArr(int pin)", "testcase": false, "constructor": false}, {"identifier": "restoreAttendanceData", "parameters": "(int pin, String password,\n            SmartcardBackup backup)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode restoreAttendanceData(int pin, String password,\n            SmartcardBackup backup)", "full_signature": "@Override public SmartcardStatusCode restoreAttendanceData(int pin, String password,\n            SmartcardBackup backup)", "class_method_signature": "SoftwareSmartcard.restoreAttendanceData(int pin, String password,\n            SmartcardBackup backup)", "testcase": false, "constructor": false}, {"identifier": "pukToByteArr", "parameters": "(int puk)", "modifiers": "private", "return": "byte[]", "signature": "byte[] pukToByteArr(int puk)", "full_signature": "private byte[] pukToByteArr(int puk)", "class_method_signature": "SoftwareSmartcard.pukToByteArr(int puk)", "testcase": false, "constructor": false}, {"identifier": "computeCredentialFragment", "parameters": "(int pin, URI credentialUri)", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger computeCredentialFragment(int pin, URI credentialUri)", "full_signature": "@Override public BigInteger computeCredentialFragment(int pin, URI credentialUri)", "class_method_signature": "SoftwareSmartcard.computeCredentialFragment(int pin, URI credentialUri)", "testcase": false, "constructor": false}, {"identifier": "getZkProofSpec", "parameters": "(int pin, Set<URI> courseIds,\n            Set<URI> scopeExclusivePseudonyms, boolean includeDevicePublicKeyProof)", "modifiers": "private", "return": "ZkProofSpecification", "signature": "ZkProofSpecification getZkProofSpec(int pin, Set<URI> courseIds,\n            Set<URI> scopeExclusivePseudonyms, boolean includeDevicePublicKeyProof)", "full_signature": "private ZkProofSpecification getZkProofSpec(int pin, Set<URI> courseIds,\n            Set<URI> scopeExclusivePseudonyms, boolean includeDevicePublicKeyProof)", "class_method_signature": "SoftwareSmartcard.getZkProofSpec(int pin, Set<URI> courseIds,\n            Set<URI> scopeExclusivePseudonyms, boolean includeDevicePublicKeyProof)", "testcase": false, "constructor": false}, {"identifier": "getZkProofWitness", "parameters": "(Set<URI> credentialUris,\n            boolean includeDevicePublicKeyProof)", "modifiers": "private", "return": "ZkProofWitness", "signature": "ZkProofWitness getZkProofWitness(Set<URI> credentialUris,\n            boolean includeDevicePublicKeyProof)", "full_signature": "private ZkProofWitness getZkProofWitness(Set<URI> credentialUris,\n            boolean includeDevicePublicKeyProof)", "class_method_signature": "SoftwareSmartcard.getZkProofWitness(Set<URI> credentialUris,\n            boolean includeDevicePublicKeyProof)", "testcase": false, "constructor": false}, {"identifier": "listCredentialsUris", "parameters": "(int pin)", "modifiers": "@Override public", "return": "Set<URI>", "signature": "Set<URI> listCredentialsUris(int pin)", "full_signature": "@Override public Set<URI> listCredentialsUris(int pin)", "class_method_signature": "SoftwareSmartcard.listCredentialsUris(int pin)", "testcase": false, "constructor": false}, {"identifier": "getIssuerParametersOfCredential", "parameters": "(int pin, URI credentialUri)", "modifiers": "@Override public", "return": "TrustedIssuerParameters", "signature": "TrustedIssuerParameters getIssuerParametersOfCredential(int pin, URI credentialUri)", "full_signature": "@Override public TrustedIssuerParameters getIssuerParametersOfCredential(int pin, URI credentialUri)", "class_method_signature": "SoftwareSmartcard.getIssuerParametersOfCredential(int pin, URI credentialUri)", "testcase": false, "constructor": false}, {"identifier": "storeCredential", "parameters": "(int pin, URI credentialId, Credential cred, CredentialSerializer serializer)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode storeCredential(int pin, URI credentialId, Credential cred, CredentialSerializer serializer)", "full_signature": "@Override public SmartcardStatusCode storeCredential(int pin, URI credentialId, Credential cred, CredentialSerializer serializer)", "class_method_signature": "SoftwareSmartcard.storeCredential(int pin, URI credentialId, Credential cred, CredentialSerializer serializer)", "testcase": false, "constructor": false}, {"identifier": "storePseudonym", "parameters": "(int pin, URI pseudonymId, PseudonymWithMetadata pseudo, PseudonymSerializer serializer)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode storePseudonym(int pin, URI pseudonymId, PseudonymWithMetadata pseudo, PseudonymSerializer serializer)", "full_signature": "@Override public SmartcardStatusCode storePseudonym(int pin, URI pseudonymId, PseudonymWithMetadata pseudo, PseudonymSerializer serializer)", "class_method_signature": "SoftwareSmartcard.storePseudonym(int pin, URI pseudonymId, PseudonymWithMetadata pseudo, PseudonymSerializer serializer)", "testcase": false, "constructor": false}, {"identifier": "getPseudonym", "parameters": "(int pin, URI pseudonymId, PseudonymSerializer serializer)", "modifiers": "@Override public", "return": "PseudonymWithMetadata", "signature": "PseudonymWithMetadata getPseudonym(int pin, URI pseudonymId, PseudonymSerializer serializer)", "full_signature": "@Override public PseudonymWithMetadata getPseudonym(int pin, URI pseudonymId, PseudonymSerializer serializer)", "class_method_signature": "SoftwareSmartcard.getPseudonym(int pin, URI pseudonymId, PseudonymSerializer serializer)", "testcase": false, "constructor": false}, {"identifier": "getPseudonym", "parameters": "(int pin, URI pseudonymId, int nextPseuBlobUriId,\n            ByteArrayOutputStream accumulatedPseuBytes, PseudonymSerializer serializer)", "modifiers": "private", "return": "PseudonymWithMetadata", "signature": "PseudonymWithMetadata getPseudonym(int pin, URI pseudonymId, int nextPseuBlobUriId,\n            ByteArrayOutputStream accumulatedPseuBytes, PseudonymSerializer serializer)", "full_signature": "private PseudonymWithMetadata getPseudonym(int pin, URI pseudonymId, int nextPseuBlobUriId,\n            ByteArrayOutputStream accumulatedPseuBytes, PseudonymSerializer serializer)", "class_method_signature": "SoftwareSmartcard.getPseudonym(int pin, URI pseudonymId, int nextPseuBlobUriId,\n            ByteArrayOutputStream accumulatedPseuBytes, PseudonymSerializer serializer)", "testcase": false, "constructor": false}, {"identifier": "deletePseudonym", "parameters": "(int pin, URI pseudonymUri)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode deletePseudonym(int pin, URI pseudonymUri)", "full_signature": "@Override public SmartcardStatusCode deletePseudonym(int pin, URI pseudonymUri)", "class_method_signature": "SoftwareSmartcard.deletePseudonym(int pin, URI pseudonymUri)", "testcase": false, "constructor": false}, {"identifier": "getCredential", "parameters": "(int pin, URI credentialId, CredentialSerializer serializer)", "modifiers": "@Override public", "return": "Credential", "signature": "Credential getCredential(int pin, URI credentialId, CredentialSerializer serializer)", "full_signature": "@Override public Credential getCredential(int pin, URI credentialId, CredentialSerializer serializer)", "class_method_signature": "SoftwareSmartcard.getCredential(int pin, URI credentialId, CredentialSerializer serializer)", "testcase": false, "constructor": false}, {"identifier": "getCredential", "parameters": "(int pin, URI credentialId, int nextCredBlobUriId,\n            ByteArrayOutputStream accumulatedCredBytes, CredentialSerializer serializer)", "modifiers": "private", "return": "Credential", "signature": "Credential getCredential(int pin, URI credentialId, int nextCredBlobUriId,\n            ByteArrayOutputStream accumulatedCredBytes, CredentialSerializer serializer)", "full_signature": "private Credential getCredential(int pin, URI credentialId, int nextCredBlobUriId,\n            ByteArrayOutputStream accumulatedCredBytes, CredentialSerializer serializer)", "class_method_signature": "SoftwareSmartcard.getCredential(int pin, URI credentialId, int nextCredBlobUriId,\n            ByteArrayOutputStream accumulatedCredBytes, CredentialSerializer serializer)", "testcase": false, "constructor": false}, {"identifier": "allocateCredential", "parameters": "(int pin, URI credentialUri, URI issuerParameters)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode allocateCredential(int pin, URI credentialUri, URI issuerParameters)", "full_signature": "@Override public SmartcardStatusCode allocateCredential(int pin, URI credentialUri, URI issuerParameters)", "class_method_signature": "SoftwareSmartcard.allocateCredential(int pin, URI credentialUri, URI issuerParameters)", "testcase": false, "constructor": false}, {"identifier": "addIssuerParametersWithAttendanceCheck", "parameters": "(RSAKeyPair rootKey,\n            URI parametersUri, int keyIDForCounter, SmartcardParameters credBases,\n            RSAVerificationKey courseKey, int minimumAttendance)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode addIssuerParametersWithAttendanceCheck(RSAKeyPair rootKey,\n            URI parametersUri, int keyIDForCounter, SmartcardParameters credBases,\n            RSAVerificationKey courseKey, int minimumAttendance)", "full_signature": "@Override public SmartcardStatusCode addIssuerParametersWithAttendanceCheck(RSAKeyPair rootKey,\n            URI parametersUri, int keyIDForCounter, SmartcardParameters credBases,\n            RSAVerificationKey courseKey, int minimumAttendance)", "class_method_signature": "SoftwareSmartcard.addIssuerParametersWithAttendanceCheck(RSAKeyPair rootKey,\n            URI parametersUri, int keyIDForCounter, SmartcardParameters credBases,\n            RSAVerificationKey courseKey, int minimumAttendance)", "testcase": false, "constructor": false}, {"identifier": "addIssuerParameters", "parameters": "(RSAKeyPair rootKey,\n            URI parametersUri, SmartcardParameters credBases)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode addIssuerParameters(RSAKeyPair rootKey,\n            URI parametersUri, SmartcardParameters credBases)", "full_signature": "@Override public SmartcardStatusCode addIssuerParameters(RSAKeyPair rootKey,\n            URI parametersUri, SmartcardParameters credBases)", "class_method_signature": "SoftwareSmartcard.addIssuerParameters(RSAKeyPair rootKey,\n            URI parametersUri, SmartcardParameters credBases)", "testcase": false, "constructor": false}, {"identifier": "getIssuerParameters", "parameters": "(int pin, URI paramsUri)", "modifiers": "@Override public", "return": "TrustedIssuerParameters", "signature": "TrustedIssuerParameters getIssuerParameters(int pin, URI paramsUri)", "full_signature": "@Override public TrustedIssuerParameters getIssuerParameters(int pin, URI paramsUri)", "class_method_signature": "SoftwareSmartcard.getIssuerParameters(int pin, URI paramsUri)", "testcase": false, "constructor": false}, {"identifier": "getIssuerParametersList", "parameters": "(int pin)", "modifiers": "@Override public", "return": "Set<TrustedIssuerParameters>", "signature": "Set<TrustedIssuerParameters> getIssuerParametersList(int pin)", "full_signature": "@Override public Set<TrustedIssuerParameters> getIssuerParametersList(int pin)", "class_method_signature": "SoftwareSmartcard.getIssuerParametersList(int pin)", "testcase": false, "constructor": false}, {"identifier": "deleteIssuer", "parameters": "(int pin, URI paramUri, RSAKeyPair rootKey)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "signature": "SmartcardStatusCode deleteIssuer(int pin, URI paramUri, RSAKeyPair rootKey)", "full_signature": "@Override public SmartcardStatusCode deleteIssuer(int pin, URI paramUri, RSAKeyPair rootKey)", "class_method_signature": "SoftwareSmartcard.deleteIssuer(int pin, URI paramUri, RSAKeyPair rootKey)", "testcase": false, "constructor": false}, {"identifier": "credentialExists", "parameters": "(int pin, URI credentialUri)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean credentialExists(int pin, URI credentialUri)", "full_signature": "@Override public boolean credentialExists(int pin, URI credentialUri)", "class_method_signature": "SoftwareSmartcard.credentialExists(int pin, URI credentialUri)", "testcase": false, "constructor": false}, {"identifier": "getCounterValue", "parameters": "(int pin, URI issuerId)", "modifiers": "@Override public", "return": "int", "signature": "int getCounterValue(int pin, URI issuerId)", "full_signature": "@Override public int getCounterValue(int pin, URI issuerId)", "class_method_signature": "SoftwareSmartcard.getCounterValue(int pin, URI issuerId)", "testcase": false, "constructor": false}, {"identifier": "getHashOfDeviceSecret", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHashOfDeviceSecret()", "full_signature": "public String getHashOfDeviceSecret()", "class_method_signature": "SoftwareSmartcard.getHashOfDeviceSecret()", "testcase": false, "constructor": false}, {"identifier": "getHashOfSystemParameters", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHashOfSystemParameters()", "full_signature": "public String getHashOfSystemParameters()", "class_method_signature": "SoftwareSmartcard.getHashOfSystemParameters()", "testcase": false, "constructor": false}, {"identifier": "getHashOfIssuerParameters", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHashOfIssuerParameters()", "full_signature": "public String getHashOfIssuerParameters()", "class_method_signature": "SoftwareSmartcard.getHashOfIssuerParameters()", "testcase": false, "constructor": false}, {"identifier": "getHashOfCredentialKeys", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHashOfCredentialKeys()", "full_signature": "public String getHashOfCredentialKeys()", "class_method_signature": "SoftwareSmartcard.getHashOfCredentialKeys()", "testcase": false, "constructor": false}, {"identifier": "updateDigest", "parameters": "(MessageDigest md, Serializable cos)", "modifiers": "private", "return": "void", "signature": "void updateDigest(MessageDigest md, Serializable cos)", "full_signature": "private void updateDigest(MessageDigest md, Serializable cos)", "class_method_signature": "SoftwareSmartcard.updateDigest(MessageDigest md, Serializable cos)", "testcase": false, "constructor": false}], "file": "Code/core-abce/abce-components/src/main/java/eu/abc4trust/smartcard/SoftwareSmartcard.java"}, "focal_method": {"identifier": "storeCredential", "parameters": "(int pin, URI credentialId, Credential cred, CredentialSerializer serializer)", "modifiers": "@Override public", "return": "SmartcardStatusCode", "body": "@Override\n    public SmartcardStatusCode storeCredential(int pin, URI credentialId, Credential cred, CredentialSerializer serializer){\n        byte[] credBytes = serializer.serializeCredential(cred);\n        log.fine(\"CredBytes length: \" + credBytes.length);\n        int nextCredBlobUri = 1;\n        SmartcardStatusCode returnCode = SmartcardStatusCode.OK;\n\n        int bytesLeft = credBytes.length;\n        int i = 0;\n        boolean done = false;\n        while(!done){\n            SmartcardBlob blob = new SmartcardBlob();\n            if(bytesLeft > MAX_BLOB_LEN_BYTES){\n                blob.blob = new byte[MAX_BLOB_LEN_BYTES];\n                bytesLeft -= MAX_BLOB_LEN_BYTES;\n                System.arraycopy(credBytes, i*MAX_BLOB_LEN_BYTES, blob.blob, 0, MAX_BLOB_LEN_BYTES);\n            }else{\n                blob.blob = new byte[bytesLeft];\n                System.arraycopy(credBytes, i*MAX_BLOB_LEN_BYTES, blob.blob, 0, bytesLeft);\n                done = true; //We know we are done as we put the last bytes in the blob.\n            }\n            URI credUri = URI.create(credentialId.toASCIIString()+\"_\"+nextCredBlobUri++);\n            log.fine(\"storing a blob of size: \" + blob.blob.length + \" with uri: \" + credUri.toASCIIString());\n            returnCode = this.storeBlob(pin, credUri, blob);\n            log.fine(\"Return from storeBlob: \" + returnCode);\n            if(returnCode != SmartcardStatusCode.OK){\n                return returnCode;\n            }\n            i++;\n        }\n        return returnCode;\n    }", "signature": "SmartcardStatusCode storeCredential(int pin, URI credentialId, Credential cred, CredentialSerializer serializer)", "full_signature": "@Override public SmartcardStatusCode storeCredential(int pin, URI credentialId, Credential cred, CredentialSerializer serializer)", "class_method_signature": "SoftwareSmartcard.storeCredential(int pin, URI credentialId, Credential cred, CredentialSerializer serializer)", "testcase": false, "constructor": false, "invocations": ["serializeCredential", "fine", "arraycopy", "arraycopy", "create", "toASCIIString", "fine", "toASCIIString", "storeBlob", "fine"]}, "repository": {"repo_id": 7687890, "url": "https://github.com/p2abcengine/p2abcengine", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 71, "size": 11790, "license": "licensed"}}