{"test_class": {"identifier": "DataConverterTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private DataConverter underTest;", "modifier": "@InjectMocks\n    private", "type": "DataConverter", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private DataProvider dataProvider;", "modifier": "@Mock\n    private", "type": "DataProvider", "declarator": "dataProvider", "var_name": "dataProvider"}, {"original_string": "@Mock\n    private ObjectArrayConverter objectArrayConverter;", "modifier": "@Mock\n    private", "type": "ObjectArrayConverter", "declarator": "objectArrayConverter", "var_name": "objectArrayConverter"}, {"original_string": "@Mock\n    private SingleArgConverter singleArgConverter;", "modifier": "@Mock\n    private", "type": "SingleArgConverter", "declarator": "singleArgConverter", "var_name": "singleArgConverter"}, {"original_string": "@Mock\n    private StringConverter stringConverter;", "modifier": "@Mock\n    private", "type": "StringConverter", "declarator": "stringConverter", "var_name": "stringConverter"}], "file": "junit4/src/test/java/com/tngtech/java/junit/dataprovider/internal/DataConverterTest.java"}, "test_case": {"identifier": "testCanConvertShouldReturnTrueIfTypeIsSubListSubListObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCanConvertShouldReturnTrueIfTypeIsSubListSubListObject() {\n        // Given:\n        Type type = getMethod(\"methodReturningSubListOfSubListOfObject\").getGenericReturnType();\n\n        // When:\n        boolean result = underTest.canConvert(type);\n\n        // Then:\n        assertThat(result).isTrue();\n    }", "signature": "void testCanConvertShouldReturnTrueIfTypeIsSubListSubListObject()", "full_signature": "@Test public void testCanConvertShouldReturnTrueIfTypeIsSubListSubListObject()", "class_method_signature": "DataConverterTest.testCanConvertShouldReturnTrueIfTypeIsSubListSubListObject()", "testcase": true, "constructor": false, "invocations": ["getGenericReturnType", "getMethod", "canConvert", "isTrue", "assertThat"]}, "focal_class": {"identifier": "DataConverter", "superclass": "extends com.tngtech.junit.dataprovider.convert.DataConverter", "interfaces": "", "fields": [{"original_string": "private ObjectArrayConverter objectArrayConverter;", "modifier": "private", "type": "ObjectArrayConverter", "declarator": "objectArrayConverter", "var_name": "objectArrayConverter"}, {"original_string": "private SingleArgConverter singleArgConverter;", "modifier": "private", "type": "SingleArgConverter", "declarator": "singleArgConverter", "var_name": "singleArgConverter"}, {"original_string": "private StringConverter stringConverter;", "modifier": "private", "type": "StringConverter", "declarator": "stringConverter", "var_name": "stringConverter"}], "methods": [{"identifier": "DataConverter", "parameters": "()", "modifiers": "public", "return": "", "signature": " DataConverter()", "full_signature": "public  DataConverter()", "class_method_signature": "DataConverter.DataConverter()", "testcase": false, "constructor": true}, {"identifier": "canConvert", "parameters": "(Type type)", "modifiers": "public", "return": "boolean", "signature": "boolean canConvert(Type type)", "full_signature": "public boolean canConvert(Type type)", "class_method_signature": "DataConverter.canConvert(Type type)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider)", "modifiers": "public", "return": "List<Object[]>", "signature": "List<Object[]> convert(Object data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider)", "full_signature": "public List<Object[]> convert(Object data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider)", "class_method_signature": "DataConverter.convert(Object data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider)", "testcase": false, "constructor": false}, {"identifier": "canConvertIterableOf", "parameters": "(ParameterizedType parameterizedType)", "modifiers": "private", "return": "boolean", "signature": "boolean canConvertIterableOf(ParameterizedType parameterizedType)", "full_signature": "private boolean canConvertIterableOf(ParameterizedType parameterizedType)", "class_method_signature": "DataConverter.canConvertIterableOf(ParameterizedType parameterizedType)", "testcase": false, "constructor": false}, {"identifier": "setObjectArrayConverter", "parameters": "(ObjectArrayConverter objectArrayConverter)", "modifiers": "public", "return": "void", "signature": "void setObjectArrayConverter(ObjectArrayConverter objectArrayConverter)", "full_signature": "public void setObjectArrayConverter(ObjectArrayConverter objectArrayConverter)", "class_method_signature": "DataConverter.setObjectArrayConverter(ObjectArrayConverter objectArrayConverter)", "testcase": false, "constructor": false}, {"identifier": "setSingleArgConverter", "parameters": "(SingleArgConverter singleArgConverter)", "modifiers": "public", "return": "void", "signature": "void setSingleArgConverter(SingleArgConverter singleArgConverter)", "full_signature": "public void setSingleArgConverter(SingleArgConverter singleArgConverter)", "class_method_signature": "DataConverter.setSingleArgConverter(SingleArgConverter singleArgConverter)", "testcase": false, "constructor": false}, {"identifier": "setStringConverter", "parameters": "(StringConverter stringConverter)", "modifiers": "public", "return": "void", "signature": "void setStringConverter(StringConverter stringConverter)", "full_signature": "public void setStringConverter(StringConverter stringConverter)", "class_method_signature": "DataConverter.setStringConverter(StringConverter stringConverter)", "testcase": false, "constructor": false}], "file": "junit4/src/main/java/com/tngtech/java/junit/dataprovider/internal/DataConverter.java"}, "focal_method": {"identifier": "canConvert", "parameters": "(Type type)", "modifiers": "public", "return": "boolean", "body": "public boolean canConvert(Type type) {\n        if (type instanceof Class) {\n            return Object[][].class.equals(type) || Object[].class.equals(type) || String[].class.equals(type);\n        }\n\n        if (type instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) type;\n\n            Type rawType = parameterizedType.getRawType();\n            if (Iterable.class.isAssignableFrom((Class<?>) rawType)) {\n                return canConvertIterableOf(parameterizedType);\n            }\n        }\n        return false;\n    }", "signature": "boolean canConvert(Type type)", "full_signature": "public boolean canConvert(Type type)", "class_method_signature": "DataConverter.canConvert(Type type)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "getRawType", "isAssignableFrom", "canConvertIterableOf"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}