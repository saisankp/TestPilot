{"test_class": {"identifier": "S3ManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PATH = \"path/\";", "modifier": "private static final", "type": "String", "declarator": "PATH = \"path/\"", "var_name": "PATH"}, {"original_string": "private static final String RANDOM_KEY = \"key\";", "modifier": "private static final", "type": "String", "declarator": "RANDOM_KEY = \"key\"", "var_name": "RANDOM_KEY"}, {"original_string": "private static final String FILE_NAME = \"img.jpg\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = \"img.jpg\"", "var_name": "FILE_NAME"}, {"original_string": "private static final String FULL_KEY_PATH = PATH + RANDOM_KEY + FILE_NAME;", "modifier": "private static final", "type": "String", "declarator": "FULL_KEY_PATH = PATH + RANDOM_KEY + FILE_NAME", "var_name": "FULL_KEY_PATH"}, {"original_string": "private static final String URL = \"https://www.smartreceipts.co/download\";", "modifier": "private static final", "type": "String", "declarator": "URL = \"https://www.smartreceipts.co/download\"", "var_name": "URL"}, {"original_string": "S3Manager s3Manager;", "modifier": "", "type": "S3Manager", "declarator": "s3Manager", "var_name": "s3Manager"}, {"original_string": "@Mock\n    S3ClientFactory s3ClientFactory;", "modifier": "@Mock", "type": "S3ClientFactory", "declarator": "s3ClientFactory", "var_name": "s3ClientFactory"}, {"original_string": "@Mock\n    AmazonS3Client amazonS3Client;", "modifier": "@Mock", "type": "AmazonS3Client", "declarator": "amazonS3Client", "var_name": "amazonS3Client"}, {"original_string": "@Mock\n    S3KeyGeneratorFactory keyGeneratorFactory;", "modifier": "@Mock", "type": "S3KeyGeneratorFactory", "declarator": "keyGeneratorFactory", "var_name": "keyGeneratorFactory"}, {"original_string": "@Mock\n    S3KeyGenerator keyGenerator;", "modifier": "@Mock", "type": "S3KeyGenerator", "declarator": "keyGenerator", "var_name": "keyGenerator"}, {"original_string": "@Captor\n    ArgumentCaptor<String> keyCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<String>", "declarator": "keyCaptor", "var_name": "keyCaptor"}, {"original_string": "File file = new File(FILE_NAME);", "modifier": "", "type": "File", "declarator": "file = new File(FILE_NAME)", "var_name": "file"}], "file": "aws/src/test/java/co/smartreceipts/aws/s3/S3ManagerTest.java"}, "test_case": {"identifier": "uploadSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void uploadSuccess() {\n        TestObserver<String> testObserver = s3Manager.upload(file, PATH).test();\n\n        verify(amazonS3Client).putObject(\"smartreceipts\", FULL_KEY_PATH, file);\n        testObserver.assertValue(URL);\n        testObserver.assertComplete();\n        testObserver.assertNoErrors();\n    }", "signature": "void uploadSuccess()", "full_signature": "@Test public void uploadSuccess()", "class_method_signature": "S3ManagerTest.uploadSuccess()", "testcase": true, "constructor": false, "invocations": ["test", "upload", "putObject", "verify", "assertValue", "assertComplete", "assertNoErrors"]}, "focal_class": {"identifier": "S3Manager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BUCKET = \"smartreceipts\";", "modifier": "private static final", "type": "String", "declarator": "BUCKET = \"smartreceipts\"", "var_name": "BUCKET"}, {"original_string": "private final S3ClientFactory s3ClientFactory;", "modifier": "private final", "type": "S3ClientFactory", "declarator": "s3ClientFactory", "var_name": "s3ClientFactory"}, {"original_string": "private final S3KeyGeneratorFactory s3KeyGeneratorFactory;", "modifier": "private final", "type": "S3KeyGeneratorFactory", "declarator": "s3KeyGeneratorFactory", "var_name": "s3KeyGeneratorFactory"}], "methods": [{"identifier": "S3Manager", "parameters": "(CognitoManager cognitoManager)", "modifiers": "@Inject public", "return": "", "signature": " S3Manager(CognitoManager cognitoManager)", "full_signature": "@Inject public  S3Manager(CognitoManager cognitoManager)", "class_method_signature": "S3Manager.S3Manager(CognitoManager cognitoManager)", "testcase": false, "constructor": true}, {"identifier": "S3Manager", "parameters": "(@NonNull S3ClientFactory s3ClientFactory, @NonNull S3KeyGeneratorFactory s3KeyGeneratorFactory)", "modifiers": "@VisibleForTesting", "return": "", "signature": " S3Manager(@NonNull S3ClientFactory s3ClientFactory, @NonNull S3KeyGeneratorFactory s3KeyGeneratorFactory)", "full_signature": "@VisibleForTesting  S3Manager(@NonNull S3ClientFactory s3ClientFactory, @NonNull S3KeyGeneratorFactory s3KeyGeneratorFactory)", "class_method_signature": "S3Manager.S3Manager(@NonNull S3ClientFactory s3ClientFactory, @NonNull S3KeyGeneratorFactory s3KeyGeneratorFactory)", "testcase": false, "constructor": true}, {"identifier": "upload", "parameters": "(@NonNull final File file, @NonNull final String subDirectoryPath)", "modifiers": "@NonNull public", "return": "Observable<String>", "signature": "Observable<String> upload(@NonNull final File file, @NonNull final String subDirectoryPath)", "full_signature": "@NonNull public Observable<String> upload(@NonNull final File file, @NonNull final String subDirectoryPath)", "class_method_signature": "S3Manager.upload(@NonNull final File file, @NonNull final String subDirectoryPath)", "testcase": false, "constructor": false}], "file": "aws/src/main/java/co/smartreceipts/aws/s3/S3Manager.java"}, "focal_method": {"identifier": "upload", "parameters": "(@NonNull final File file, @NonNull final String subDirectoryPath)", "modifiers": "@NonNull public", "return": "Observable<String>", "body": "@NonNull\n    public Observable<String> upload(@NonNull final File file, @NonNull final String subDirectoryPath) {\n        return s3ClientFactory.getAmazonS3()\n                .flatMap(amazonS3 -> {\n                    if (amazonS3.isPresent()) {\n                        return s3KeyGeneratorFactory.get()\n                                .flatMap(s3KeyGenerator -> Observable.fromCallable(() -> {\n                                    final String key = subDirectoryPath + s3KeyGenerator.getS3Key() + file.getName();\n                                    amazonS3.get().putObject(BUCKET, key, file);\n                                    try {\n                                        return amazonS3.get().getResourceUrl(BUCKET, key);\n                                    } catch (Exception e) {\n                                        throw new IOException(\"Caught Amazon S3 exception\", e);\n                                    }\n                                }));\n                    } else {\n                        return Observable.error(new Exception(\"Failed to initialize the S3 client\"));\n                    }\n                });\n    }", "signature": "Observable<String> upload(@NonNull final File file, @NonNull final String subDirectoryPath)", "full_signature": "@NonNull public Observable<String> upload(@NonNull final File file, @NonNull final String subDirectoryPath)", "class_method_signature": "S3Manager.upload(@NonNull final File file, @NonNull final String subDirectoryPath)", "testcase": false, "constructor": false, "invocations": ["flatMap", "getAmazonS3", "isPresent", "flatMap", "get", "fromCallable", "getS3Key", "getName", "putObject", "get", "getResourceUrl", "get", "error"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}