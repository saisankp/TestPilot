{"test_class": {"identifier": "ConcatClosingInputStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "libraries/lib-datahandler/src/test/java/org/eclipse/sw360/datahandler/common/ConcatClosingInputStreamTest.java"}, "test_case": {"identifier": "testReadIsEmptyForEmptyIterator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadIsEmptyForEmptyIterator() throws Exception {\n\n        ImmutableList<InputStream> inputStreams = ImmutableList.of();\n\n        ConcatClosingInputStream concatClosingInputStream = new ConcatClosingInputStream(inputStreams.iterator());\n\n        assertThat(concatClosingInputStream.read(), is(-1));\n        assertThat(concatClosingInputStream.read(), is(-1));\n        assertThat(concatClosingInputStream.read(), is(-1));\n    }", "signature": "void testReadIsEmptyForEmptyIterator()", "full_signature": "@Test public void testReadIsEmptyForEmptyIterator()", "class_method_signature": "ConcatClosingInputStreamTest.testReadIsEmptyForEmptyIterator()", "testcase": true, "constructor": false, "invocations": ["of", "iterator", "assertThat", "read", "is", "assertThat", "read", "is", "assertThat", "read", "is"]}, "focal_class": {"identifier": "ConcatClosingInputStream", "superclass": "extends InputStream", "interfaces": "", "fields": [{"original_string": "private final Iterator<InputStream> streams;", "modifier": "private final", "type": "Iterator<InputStream>", "declarator": "streams", "var_name": "streams"}, {"original_string": "private boolean closed = false;", "modifier": "private", "type": "boolean", "declarator": "closed = false", "var_name": "closed"}, {"original_string": "private InputStream current;", "modifier": "private", "type": "InputStream", "declarator": "current", "var_name": "current"}], "methods": [{"identifier": "ConcatClosingInputStream", "parameters": "(Iterator<InputStream> streams)", "modifiers": "public", "return": "", "signature": " ConcatClosingInputStream(Iterator<InputStream> streams)", "full_signature": "public  ConcatClosingInputStream(Iterator<InputStream> streams)", "class_method_signature": "ConcatClosingInputStream.ConcatClosingInputStream(Iterator<InputStream> streams)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "ConcatClosingInputStream.read()", "testcase": false, "constructor": false}, {"identifier": "safeCloseAndThrow", "parameters": "(IOException e)", "modifiers": "private", "return": "int", "signature": "int safeCloseAndThrow(IOException e)", "full_signature": "private int safeCloseAndThrow(IOException e)", "class_method_signature": "ConcatClosingInputStream.safeCloseAndThrow(IOException e)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ConcatClosingInputStream.close()", "testcase": false, "constructor": false}, {"identifier": "asSuppressedOf", "parameters": "(IOException ioException, IOException exception)", "modifiers": "private", "return": "IOException", "signature": "IOException asSuppressedOf(IOException ioException, IOException exception)", "full_signature": "private IOException asSuppressedOf(IOException ioException, IOException exception)", "class_method_signature": "ConcatClosingInputStream.asSuppressedOf(IOException ioException, IOException exception)", "testcase": false, "constructor": false}, {"identifier": "tryClose", "parameters": "(InputStream stream)", "modifiers": "private", "return": "IOException", "signature": "IOException tryClose(InputStream stream)", "full_signature": "private IOException tryClose(InputStream stream)", "class_method_signature": "ConcatClosingInputStream.tryClose(InputStream stream)", "testcase": false, "constructor": false}], "file": "libraries/lib-datahandler/src/main/java/org/eclipse/sw360/datahandler/common/ConcatClosingInputStream.java"}, "focal_method": {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int read() throws IOException {\n        if (closed)\n            return -1;\n\n        if (current == null) {\n            return safeCloseAndThrow(new IOException(\"cannot read from null Stream\"));\n        }\n\n        int read;\n        try {\n            read = current.read();\n        } catch (IOException e) {\n            return safeCloseAndThrow(e);\n        }\n\n        if (read >= 0)\n            return read;\n\n        else {\n            try {\n                current.close();\n            } catch (IOException e) {\n                return safeCloseAndThrow(e);\n            }\n            if (streams.hasNext()) {\n                current = streams.next();\n                return read();\n            } else {\n                closed = true;\n                return -1;\n            }\n        }\n    }", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "ConcatClosingInputStream.read()", "testcase": false, "constructor": false, "invocations": ["safeCloseAndThrow", "read", "safeCloseAndThrow", "close", "safeCloseAndThrow", "hasNext", "next", "read"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}