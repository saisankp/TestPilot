{"test_class": {"identifier": "ReaperApplicationConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Validator validator = Validation\n      .byProvider(HibernateValidator.class)\n      .configure()\n      .buildValidatorFactory()\n      .getValidator();", "modifier": "private final", "type": "Validator", "declarator": "validator = Validation\n      .byProvider(HibernateValidator.class)\n      .configure()\n      .buildValidatorFactory()\n      .getValidator()", "var_name": "validator"}, {"original_string": "private final ReaperApplicationConfiguration config = new ReaperApplicationConfiguration();", "modifier": "private final", "type": "ReaperApplicationConfiguration", "declarator": "config = new ReaperApplicationConfiguration()", "var_name": "config"}], "file": "src/server/src/test/java/io/cassandrareaper/ReaperApplicationConfigurationTest.java"}, "test_case": {"identifier": "testRepairIntensity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRepairIntensity() {\n    config.setRepairIntensity(-0.1);\n    assertThat(validator.validate(config)).hasSize(1);\n\n    config.setRepairIntensity(0);\n    assertThat(validator.validate(config)).hasSize(1);\n\n    config.setRepairIntensity(1);\n    assertThat(validator.validate(config)).hasSize(0);\n  }", "signature": "void testRepairIntensity()", "full_signature": "@Test public void testRepairIntensity()", "class_method_signature": "ReaperApplicationConfigurationTest.testRepairIntensity()", "testcase": true, "constructor": false, "invocations": ["setRepairIntensity", "hasSize", "assertThat", "validate", "setRepairIntensity", "hasSize", "assertThat", "validate", "setRepairIntensity", "hasSize", "assertThat", "validate"]}, "focal_class": {"identifier": "ReaperApplicationConfiguration", "superclass": "extends Configuration", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_SEGMENT_COUNT_PER_NODE = 64;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_SEGMENT_COUNT_PER_NODE = 64", "var_name": "DEFAULT_SEGMENT_COUNT_PER_NODE"}, {"original_string": "private static final Integer DEFAULT_MAX_PENDING_COMPACTIONS = 20;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_MAX_PENDING_COMPACTIONS = 20", "var_name": "DEFAULT_MAX_PENDING_COMPACTIONS"}, {"original_string": "@JsonProperty\n  private Integer maxPendingCompactions;", "modifier": "@JsonProperty\n  private", "type": "Integer", "declarator": "maxPendingCompactions", "var_name": "maxPendingCompactions"}, {"original_string": "@Deprecated\n  @JsonProperty\n  private Integer segmentCount;", "modifier": "@Deprecated\n  @JsonProperty\n  private", "type": "Integer", "declarator": "segmentCount", "var_name": "segmentCount"}, {"original_string": "@JsonProperty private Integer segmentCountPerNode;", "modifier": "@JsonProperty private", "type": "Integer", "declarator": "segmentCountPerNode", "var_name": "segmentCountPerNode"}, {"original_string": "@JsonProperty\n  @NotNull\n  private RepairParallelism repairParallelism;", "modifier": "@JsonProperty\n  @NotNull\n  private", "type": "RepairParallelism", "declarator": "repairParallelism", "var_name": "repairParallelism"}, {"original_string": "@JsonProperty\n  @NotNull\n  @DecimalMin(value = \"0\", inclusive = false)\n  @Max(1)\n  private Double repairIntensity;", "modifier": "@JsonProperty\n  @NotNull\n  @DecimalMin(value = \"0\", inclusive = false)\n  @Max(1)\n  private", "type": "Double", "declarator": "repairIntensity", "var_name": "repairIntensity"}, {"original_string": "@JsonProperty\n  @NotNull\n  @DefaultValue(\"false\")\n  private Boolean incrementalRepair;", "modifier": "@JsonProperty\n  @NotNull\n  @DefaultValue(\"false\")\n  private", "type": "Boolean", "declarator": "incrementalRepair", "var_name": "incrementalRepair"}, {"original_string": "@JsonProperty\n  private Boolean blacklistTwcsTables;", "modifier": "@JsonProperty\n  private", "type": "Boolean", "declarator": "blacklistTwcsTables", "var_name": "blacklistTwcsTables"}, {"original_string": "@DefaultValue(\"7\")\n  private Integer scheduleDaysBetween;", "modifier": "@DefaultValue(\"7\")\n  private", "type": "Integer", "declarator": "scheduleDaysBetween", "var_name": "scheduleDaysBetween"}, {"original_string": "@JsonProperty\n  @DefaultValue(\"false\")\n  private Boolean useAddressTranslator;", "modifier": "@JsonProperty\n  @DefaultValue(\"false\")\n  private", "type": "Boolean", "declarator": "useAddressTranslator", "var_name": "useAddressTranslator"}, {"original_string": "@Valid\n  private Optional<AddressTranslatorFactory> jmxAddressTranslator = Optional.empty();", "modifier": "@Valid\n  private", "type": "Optional<AddressTranslatorFactory>", "declarator": "jmxAddressTranslator = Optional.empty()", "var_name": "jmxAddressTranslator"}, {"original_string": "@JsonProperty\n  @NotNull\n  private Integer repairRunThreadCount;", "modifier": "@JsonProperty\n  @NotNull\n  private", "type": "Integer", "declarator": "repairRunThreadCount", "var_name": "repairRunThreadCount"}, {"original_string": "@JsonProperty\n  @NotNull\n  private Integer hangingRepairTimeoutMins;", "modifier": "@JsonProperty\n  @NotNull\n  private", "type": "Integer", "declarator": "hangingRepairTimeoutMins", "var_name": "hangingRepairTimeoutMins"}, {"original_string": "@NotEmpty\n  private String storageType;", "modifier": "@NotEmpty\n  private", "type": "String", "declarator": "storageType", "var_name": "storageType"}, {"original_string": "private String enableCrossOrigin;", "modifier": "private", "type": "String", "declarator": "enableCrossOrigin", "var_name": "enableCrossOrigin"}, {"original_string": "@JsonProperty\n  private Map<String, Integer> jmxPorts;", "modifier": "@JsonProperty\n  private", "type": "Map<String, Integer>", "declarator": "jmxPorts", "var_name": "jmxPorts"}, {"original_string": "@JsonProperty\n  private Jmxmp jmxmp = new Jmxmp();", "modifier": "@JsonProperty\n  private", "type": "Jmxmp", "declarator": "jmxmp = new Jmxmp()", "var_name": "jmxmp"}, {"original_string": "@JsonProperty\n  private Map<String, JmxCredentials> jmxCredentials;", "modifier": "@JsonProperty\n  private", "type": "Map<String, JmxCredentials>", "declarator": "jmxCredentials", "var_name": "jmxCredentials"}, {"original_string": "@JsonProperty\n  private JmxCredentials jmxAuth;", "modifier": "@JsonProperty\n  private", "type": "JmxCredentials", "declarator": "jmxAuth", "var_name": "jmxAuth"}, {"original_string": "@JsonProperty\n  private AutoSchedulingConfiguration autoScheduling;", "modifier": "@JsonProperty\n  private", "type": "AutoSchedulingConfiguration", "declarator": "autoScheduling", "var_name": "autoScheduling"}, {"original_string": "@JsonProperty\n  @DefaultValue(\"true\")\n  private Boolean enableDynamicSeedList;", "modifier": "@JsonProperty\n  @DefaultValue(\"true\")\n  private", "type": "Boolean", "declarator": "enableDynamicSeedList", "var_name": "enableDynamicSeedList"}, {"original_string": "@JsonProperty\n  private Integer repairManagerSchedulingIntervalSeconds;", "modifier": "@JsonProperty\n  private", "type": "Integer", "declarator": "repairManagerSchedulingIntervalSeconds", "var_name": "repairManagerSchedulingIntervalSeconds"}, {"original_string": "@JsonProperty\n  @DefaultValue(\"false\")\n  private Boolean activateQueryLogger;", "modifier": "@JsonProperty\n  @DefaultValue(\"false\")\n  private", "type": "Boolean", "declarator": "activateQueryLogger", "var_name": "activateQueryLogger"}, {"original_string": "@JsonProperty\n  @DefaultValue(\"5\")\n  private Integer jmxConnectionTimeoutInSeconds;", "modifier": "@JsonProperty\n  @DefaultValue(\"5\")\n  private", "type": "Integer", "declarator": "jmxConnectionTimeoutInSeconds", "var_name": "jmxConnectionTimeoutInSeconds"}, {"original_string": "@JsonProperty\n  @DefaultValue(\"7\")\n  private Integer clusterTimeoutInDays;", "modifier": "@JsonProperty\n  @DefaultValue(\"7\")\n  private", "type": "Integer", "declarator": "clusterTimeoutInDays", "var_name": "clusterTimeoutInDays"}, {"original_string": "@JsonProperty\n  private DatacenterAvailability datacenterAvailability;", "modifier": "@JsonProperty\n  private", "type": "DatacenterAvailability", "declarator": "datacenterAvailability", "var_name": "datacenterAvailability"}, {"original_string": "@JsonProperty private AccessControlConfiguration accessControl;", "modifier": "@JsonProperty private", "type": "AccessControlConfiguration", "declarator": "accessControl", "var_name": "accessControl"}, {"original_string": "@JsonProperty\n  private Integer repairThreadCount;", "modifier": "@JsonProperty\n  private", "type": "Integer", "declarator": "repairThreadCount", "var_name": "repairThreadCount"}, {"original_string": "@Nullable\n  @JsonProperty\n  private Integer purgeRecordsAfterInDays;", "modifier": "@Nullable\n  @JsonProperty\n  private", "type": "Integer", "declarator": "purgeRecordsAfterInDays", "var_name": "purgeRecordsAfterInDays"}, {"original_string": "@Nullable\n  @JsonProperty\n  private Integer numberOfRunsToKeepPerUnit;", "modifier": "@Nullable\n  @JsonProperty\n  private", "type": "Integer", "declarator": "numberOfRunsToKeepPerUnit", "var_name": "numberOfRunsToKeepPerUnit"}, {"original_string": "private CassandraFactory cassandra = new CassandraFactory();", "modifier": "private", "type": "CassandraFactory", "declarator": "cassandra = new CassandraFactory()", "var_name": "cassandra"}, {"original_string": "@Deprecated\n  @JsonProperty\n  private DataSourceFactory database;", "modifier": "@Deprecated\n  @JsonProperty\n  private", "type": "DataSourceFactory", "declarator": "database", "var_name": "database"}, {"original_string": "private DataSourceFactory relationalDb = new DataSourceFactory();", "modifier": "private", "type": "DataSourceFactory", "declarator": "relationalDb = new DataSourceFactory()", "var_name": "relationalDb"}, {"original_string": "@JsonProperty\n  private Optional<String> enforcedLocalNode = Optional.empty();", "modifier": "@JsonProperty\n  private", "type": "Optional<String>", "declarator": "enforcedLocalNode = Optional.empty()", "var_name": "enforcedLocalNode"}, {"original_string": "@JsonProperty\n  private Optional<String> enforcedLocalClusterName = Optional.empty();", "modifier": "@JsonProperty\n  private", "type": "Optional<String>", "declarator": "enforcedLocalClusterName = Optional.empty()", "var_name": "enforcedLocalClusterName"}, {"original_string": "@JsonProperty\n  private Optional<String> enforcedLocalDatacenter = Optional.empty();", "modifier": "@JsonProperty\n  private", "type": "Optional<String>", "declarator": "enforcedLocalDatacenter = Optional.empty()", "var_name": "enforcedLocalDatacenter"}, {"original_string": "@JsonProperty\n  @DefaultValue(\"true\")\n  private Boolean enableConcurrentMigrations;", "modifier": "@JsonProperty\n  @DefaultValue(\"true\")\n  private", "type": "Boolean", "declarator": "enableConcurrentMigrations", "var_name": "enableConcurrentMigrations"}, {"original_string": "private HttpClientConfiguration httpClient = new HttpClientConfiguration();", "modifier": "private", "type": "HttpClientConfiguration", "declarator": "httpClient = new HttpClientConfiguration()", "var_name": "httpClient"}, {"original_string": "@JsonProperty\n  @Nullable\n  private CryptographFactory cryptograph;", "modifier": "@JsonProperty\n  @Nullable\n  private", "type": "CryptographFactory", "declarator": "cryptograph", "var_name": "cryptograph"}], "methods": [{"identifier": "getJmxmp", "parameters": "()", "modifiers": "public", "return": "Jmxmp", "signature": "Jmxmp getJmxmp()", "full_signature": "public Jmxmp getJmxmp()", "class_method_signature": "ReaperApplicationConfiguration.getJmxmp()", "testcase": false, "constructor": false}, {"identifier": "setJmxmp", "parameters": "(Jmxmp jmxmp)", "modifiers": "public", "return": "void", "signature": "void setJmxmp(Jmxmp jmxmp)", "full_signature": "public void setJmxmp(Jmxmp jmxmp)", "class_method_signature": "ReaperApplicationConfiguration.setJmxmp(Jmxmp jmxmp)", "testcase": false, "constructor": false}, {"identifier": "getSegmentCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSegmentCount()", "full_signature": "public int getSegmentCount()", "class_method_signature": "ReaperApplicationConfiguration.getSegmentCount()", "testcase": false, "constructor": false}, {"identifier": "setSegmentCount", "parameters": "(int segmentCount)", "modifiers": "public", "return": "void", "signature": "void setSegmentCount(int segmentCount)", "full_signature": "public void setSegmentCount(int segmentCount)", "class_method_signature": "ReaperApplicationConfiguration.setSegmentCount(int segmentCount)", "testcase": false, "constructor": false}, {"identifier": "getSegmentCountPerNode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSegmentCountPerNode()", "full_signature": "public int getSegmentCountPerNode()", "class_method_signature": "ReaperApplicationConfiguration.getSegmentCountPerNode()", "testcase": false, "constructor": false}, {"identifier": "setSegmentCountPerNode", "parameters": "(int segmentCountPerNode)", "modifiers": "public", "return": "void", "signature": "void setSegmentCountPerNode(int segmentCountPerNode)", "full_signature": "public void setSegmentCountPerNode(int segmentCountPerNode)", "class_method_signature": "ReaperApplicationConfiguration.setSegmentCountPerNode(int segmentCountPerNode)", "testcase": false, "constructor": false}, {"identifier": "getMaxPendingCompactions", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxPendingCompactions()", "full_signature": "public int getMaxPendingCompactions()", "class_method_signature": "ReaperApplicationConfiguration.getMaxPendingCompactions()", "testcase": false, "constructor": false}, {"identifier": "setMaxPendingCompactions", "parameters": "(int maxPendingCompactions)", "modifiers": "public", "return": "void", "signature": "void setMaxPendingCompactions(int maxPendingCompactions)", "full_signature": "public void setMaxPendingCompactions(int maxPendingCompactions)", "class_method_signature": "ReaperApplicationConfiguration.setMaxPendingCompactions(int maxPendingCompactions)", "testcase": false, "constructor": false}, {"identifier": "getRepairParallelism", "parameters": "()", "modifiers": "public", "return": "RepairParallelism", "signature": "RepairParallelism getRepairParallelism()", "full_signature": "public RepairParallelism getRepairParallelism()", "class_method_signature": "ReaperApplicationConfiguration.getRepairParallelism()", "testcase": false, "constructor": false}, {"identifier": "setRepairParallelism", "parameters": "(RepairParallelism repairParallelism)", "modifiers": "public", "return": "void", "signature": "void setRepairParallelism(RepairParallelism repairParallelism)", "full_signature": "public void setRepairParallelism(RepairParallelism repairParallelism)", "class_method_signature": "ReaperApplicationConfiguration.setRepairParallelism(RepairParallelism repairParallelism)", "testcase": false, "constructor": false}, {"identifier": "getRepairIntensity", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRepairIntensity()", "full_signature": "public double getRepairIntensity()", "class_method_signature": "ReaperApplicationConfiguration.getRepairIntensity()", "testcase": false, "constructor": false}, {"identifier": "setRepairIntensity", "parameters": "(double repairIntensity)", "modifiers": "public", "return": "void", "signature": "void setRepairIntensity(double repairIntensity)", "full_signature": "public void setRepairIntensity(double repairIntensity)", "class_method_signature": "ReaperApplicationConfiguration.setRepairIntensity(double repairIntensity)", "testcase": false, "constructor": false}, {"identifier": "getIncrementalRepair", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getIncrementalRepair()", "full_signature": "public boolean getIncrementalRepair()", "class_method_signature": "ReaperApplicationConfiguration.getIncrementalRepair()", "testcase": false, "constructor": false}, {"identifier": "setIncrementalRepair", "parameters": "(boolean incrementalRepair)", "modifiers": "public", "return": "void", "signature": "void setIncrementalRepair(boolean incrementalRepair)", "full_signature": "public void setIncrementalRepair(boolean incrementalRepair)", "class_method_signature": "ReaperApplicationConfiguration.setIncrementalRepair(boolean incrementalRepair)", "testcase": false, "constructor": false}, {"identifier": "getBlacklistTwcsTables", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getBlacklistTwcsTables()", "full_signature": "public boolean getBlacklistTwcsTables()", "class_method_signature": "ReaperApplicationConfiguration.getBlacklistTwcsTables()", "testcase": false, "constructor": false}, {"identifier": "setBlacklistTwcsTables", "parameters": "(boolean blacklistTwcsTables)", "modifiers": "public", "return": "void", "signature": "void setBlacklistTwcsTables(boolean blacklistTwcsTables)", "full_signature": "public void setBlacklistTwcsTables(boolean blacklistTwcsTables)", "class_method_signature": "ReaperApplicationConfiguration.setBlacklistTwcsTables(boolean blacklistTwcsTables)", "testcase": false, "constructor": false}, {"identifier": "getScheduleDaysBetween", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getScheduleDaysBetween()", "full_signature": "public Integer getScheduleDaysBetween()", "class_method_signature": "ReaperApplicationConfiguration.getScheduleDaysBetween()", "testcase": false, "constructor": false}, {"identifier": "setScheduleDaysBetween", "parameters": "(int scheduleDaysBetween)", "modifiers": "public", "return": "void", "signature": "void setScheduleDaysBetween(int scheduleDaysBetween)", "full_signature": "public void setScheduleDaysBetween(int scheduleDaysBetween)", "class_method_signature": "ReaperApplicationConfiguration.setScheduleDaysBetween(int scheduleDaysBetween)", "testcase": false, "constructor": false}, {"identifier": "getRepairRunThreadCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRepairRunThreadCount()", "full_signature": "public int getRepairRunThreadCount()", "class_method_signature": "ReaperApplicationConfiguration.getRepairRunThreadCount()", "testcase": false, "constructor": false}, {"identifier": "setRepairRunThreadCount", "parameters": "(int repairRunThreadCount)", "modifiers": "public", "return": "void", "signature": "void setRepairRunThreadCount(int repairRunThreadCount)", "full_signature": "public void setRepairRunThreadCount(int repairRunThreadCount)", "class_method_signature": "ReaperApplicationConfiguration.setRepairRunThreadCount(int repairRunThreadCount)", "testcase": false, "constructor": false}, {"identifier": "getStorageType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStorageType()", "full_signature": "public String getStorageType()", "class_method_signature": "ReaperApplicationConfiguration.getStorageType()", "testcase": false, "constructor": false}, {"identifier": "setEnableCrossOrigin", "parameters": "(String enableCrossOrigin)", "modifiers": "public", "return": "void", "signature": "void setEnableCrossOrigin(String enableCrossOrigin)", "full_signature": "public void setEnableCrossOrigin(String enableCrossOrigin)", "class_method_signature": "ReaperApplicationConfiguration.setEnableCrossOrigin(String enableCrossOrigin)", "testcase": false, "constructor": false}, {"identifier": "getEnableCrossOrigin", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEnableCrossOrigin()", "full_signature": "public String getEnableCrossOrigin()", "class_method_signature": "ReaperApplicationConfiguration.getEnableCrossOrigin()", "testcase": false, "constructor": false}, {"identifier": "isEnableCrossOrigin", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEnableCrossOrigin()", "full_signature": "public boolean isEnableCrossOrigin()", "class_method_signature": "ReaperApplicationConfiguration.isEnableCrossOrigin()", "testcase": false, "constructor": false}, {"identifier": "setStorageType", "parameters": "(String storageType)", "modifiers": "public", "return": "void", "signature": "void setStorageType(String storageType)", "full_signature": "public void setStorageType(String storageType)", "class_method_signature": "ReaperApplicationConfiguration.setStorageType(String storageType)", "testcase": false, "constructor": false}, {"identifier": "getDataSourceFactory", "parameters": "()", "modifiers": "public", "return": "DataSourceFactory", "signature": "DataSourceFactory getDataSourceFactory()", "full_signature": "public DataSourceFactory getDataSourceFactory()", "class_method_signature": "ReaperApplicationConfiguration.getDataSourceFactory()", "testcase": false, "constructor": false}, {"identifier": "getH2DataSourceFactory", "parameters": "()", "modifiers": "@JsonProperty(\"h2\") public", "return": "DataSourceFactory", "signature": "DataSourceFactory getH2DataSourceFactory()", "full_signature": "@JsonProperty(\"h2\") public DataSourceFactory getH2DataSourceFactory()", "class_method_signature": "ReaperApplicationConfiguration.getH2DataSourceFactory()", "testcase": false, "constructor": false}, {"identifier": "setH2DataSourceFactory", "parameters": "(DataSourceFactory h2)", "modifiers": "@JsonProperty(\"h2\") public", "return": "void", "signature": "void setH2DataSourceFactory(DataSourceFactory h2)", "full_signature": "@JsonProperty(\"h2\") public void setH2DataSourceFactory(DataSourceFactory h2)", "class_method_signature": "ReaperApplicationConfiguration.setH2DataSourceFactory(DataSourceFactory h2)", "testcase": false, "constructor": false}, {"identifier": "getPostgresDataSourceFactory", "parameters": "()", "modifiers": "@JsonProperty(\"postgres\") public", "return": "DataSourceFactory", "signature": "DataSourceFactory getPostgresDataSourceFactory()", "full_signature": "@JsonProperty(\"postgres\") public DataSourceFactory getPostgresDataSourceFactory()", "class_method_signature": "ReaperApplicationConfiguration.getPostgresDataSourceFactory()", "testcase": false, "constructor": false}, {"identifier": "setPostgresDataSourceFactory", "parameters": "(DataSourceFactory postgres)", "modifiers": "@JsonProperty(\"postgres\") public", "return": "void", "signature": "void setPostgresDataSourceFactory(DataSourceFactory postgres)", "full_signature": "@JsonProperty(\"postgres\") public void setPostgresDataSourceFactory(DataSourceFactory postgres)", "class_method_signature": "ReaperApplicationConfiguration.setPostgresDataSourceFactory(DataSourceFactory postgres)", "testcase": false, "constructor": false}, {"identifier": "getRepairManagerSchedulingIntervalSeconds", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRepairManagerSchedulingIntervalSeconds()", "full_signature": "public int getRepairManagerSchedulingIntervalSeconds()", "class_method_signature": "ReaperApplicationConfiguration.getRepairManagerSchedulingIntervalSeconds()", "testcase": false, "constructor": false}, {"identifier": "setRepairManagerSchedulingIntervalSeconds", "parameters": "(int repairManagerSchedulingIntervalSeconds)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setRepairManagerSchedulingIntervalSeconds(int repairManagerSchedulingIntervalSeconds)", "full_signature": "@JsonProperty public void setRepairManagerSchedulingIntervalSeconds(int repairManagerSchedulingIntervalSeconds)", "class_method_signature": "ReaperApplicationConfiguration.setRepairManagerSchedulingIntervalSeconds(int repairManagerSchedulingIntervalSeconds)", "testcase": false, "constructor": false}, {"identifier": "getJmxPorts", "parameters": "()", "modifiers": "public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getJmxPorts()", "full_signature": "public Map<String, Integer> getJmxPorts()", "class_method_signature": "ReaperApplicationConfiguration.getJmxPorts()", "testcase": false, "constructor": false}, {"identifier": "setJmxPorts", "parameters": "(Map<String, Integer> jmxPorts)", "modifiers": "public", "return": "void", "signature": "void setJmxPorts(Map<String, Integer> jmxPorts)", "full_signature": "public void setJmxPorts(Map<String, Integer> jmxPorts)", "class_method_signature": "ReaperApplicationConfiguration.setJmxPorts(Map<String, Integer> jmxPorts)", "testcase": false, "constructor": false}, {"identifier": "getJmxAuth", "parameters": "()", "modifiers": "public", "return": "JmxCredentials", "signature": "JmxCredentials getJmxAuth()", "full_signature": "public JmxCredentials getJmxAuth()", "class_method_signature": "ReaperApplicationConfiguration.getJmxAuth()", "testcase": false, "constructor": false}, {"identifier": "setJmxAuth", "parameters": "(JmxCredentials jmxAuth)", "modifiers": "public", "return": "void", "signature": "void setJmxAuth(JmxCredentials jmxAuth)", "full_signature": "public void setJmxAuth(JmxCredentials jmxAuth)", "class_method_signature": "ReaperApplicationConfiguration.setJmxAuth(JmxCredentials jmxAuth)", "testcase": false, "constructor": false}, {"identifier": "getJmxCredentials", "parameters": "()", "modifiers": "public", "return": "Map<String, JmxCredentials>", "signature": "Map<String, JmxCredentials> getJmxCredentials()", "full_signature": "public Map<String, JmxCredentials> getJmxCredentials()", "class_method_signature": "ReaperApplicationConfiguration.getJmxCredentials()", "testcase": false, "constructor": false}, {"identifier": "setJmxCredentials", "parameters": "(Map<String, JmxCredentials> jmxCredentials)", "modifiers": "public", "return": "void", "signature": "void setJmxCredentials(Map<String, JmxCredentials> jmxCredentials)", "full_signature": "public void setJmxCredentials(Map<String, JmxCredentials> jmxCredentials)", "class_method_signature": "ReaperApplicationConfiguration.setJmxCredentials(Map<String, JmxCredentials> jmxCredentials)", "testcase": false, "constructor": false}, {"identifier": "hasAutoSchedulingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasAutoSchedulingEnabled()", "full_signature": "public boolean hasAutoSchedulingEnabled()", "class_method_signature": "ReaperApplicationConfiguration.hasAutoSchedulingEnabled()", "testcase": false, "constructor": false}, {"identifier": "getAutoScheduling", "parameters": "()", "modifiers": "public", "return": "AutoSchedulingConfiguration", "signature": "AutoSchedulingConfiguration getAutoScheduling()", "full_signature": "public AutoSchedulingConfiguration getAutoScheduling()", "class_method_signature": "ReaperApplicationConfiguration.getAutoScheduling()", "testcase": false, "constructor": false}, {"identifier": "setAutoScheduling", "parameters": "(AutoSchedulingConfiguration autoRepairScheduling)", "modifiers": "public", "return": "void", "signature": "void setAutoScheduling(AutoSchedulingConfiguration autoRepairScheduling)", "full_signature": "public void setAutoScheduling(AutoSchedulingConfiguration autoRepairScheduling)", "class_method_signature": "ReaperApplicationConfiguration.setAutoScheduling(AutoSchedulingConfiguration autoRepairScheduling)", "testcase": false, "constructor": false}, {"identifier": "setEnableDynamicSeedList", "parameters": "(boolean enableDynamicSeedList)", "modifiers": "public", "return": "void", "signature": "void setEnableDynamicSeedList(boolean enableDynamicSeedList)", "full_signature": "public void setEnableDynamicSeedList(boolean enableDynamicSeedList)", "class_method_signature": "ReaperApplicationConfiguration.setEnableDynamicSeedList(boolean enableDynamicSeedList)", "testcase": false, "constructor": false}, {"identifier": "getEnableDynamicSeedList", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getEnableDynamicSeedList()", "full_signature": "public boolean getEnableDynamicSeedList()", "class_method_signature": "ReaperApplicationConfiguration.getEnableDynamicSeedList()", "testcase": false, "constructor": false}, {"identifier": "setActivateQueryLogger", "parameters": "(boolean activateQueryLogger)", "modifiers": "public", "return": "void", "signature": "void setActivateQueryLogger(boolean activateQueryLogger)", "full_signature": "public void setActivateQueryLogger(boolean activateQueryLogger)", "class_method_signature": "ReaperApplicationConfiguration.setActivateQueryLogger(boolean activateQueryLogger)", "testcase": false, "constructor": false}, {"identifier": "getActivateQueryLogger", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getActivateQueryLogger()", "full_signature": "public boolean getActivateQueryLogger()", "class_method_signature": "ReaperApplicationConfiguration.getActivateQueryLogger()", "testcase": false, "constructor": false}, {"identifier": "setUseAddressTranslator", "parameters": "(boolean useAddressTranslator)", "modifiers": "public", "return": "void", "signature": "void setUseAddressTranslator(boolean useAddressTranslator)", "full_signature": "public void setUseAddressTranslator(boolean useAddressTranslator)", "class_method_signature": "ReaperApplicationConfiguration.setUseAddressTranslator(boolean useAddressTranslator)", "testcase": false, "constructor": false}, {"identifier": "useAddressTranslator", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean useAddressTranslator()", "full_signature": "public boolean useAddressTranslator()", "class_method_signature": "ReaperApplicationConfiguration.useAddressTranslator()", "testcase": false, "constructor": false}, {"identifier": "getCassandraFactory", "parameters": "()", "modifiers": "@JsonProperty(\"cassandra\") public", "return": "CassandraFactory", "signature": "CassandraFactory getCassandraFactory()", "full_signature": "@JsonProperty(\"cassandra\") public CassandraFactory getCassandraFactory()", "class_method_signature": "ReaperApplicationConfiguration.getCassandraFactory()", "testcase": false, "constructor": false}, {"identifier": "setCassandraFactory", "parameters": "(CassandraFactory cassandra)", "modifiers": "@JsonProperty(\"cassandra\") public", "return": "void", "signature": "void setCassandraFactory(CassandraFactory cassandra)", "full_signature": "@JsonProperty(\"cassandra\") public void setCassandraFactory(CassandraFactory cassandra)", "class_method_signature": "ReaperApplicationConfiguration.setCassandraFactory(CassandraFactory cassandra)", "testcase": false, "constructor": false}, {"identifier": "getHangingRepairTimeoutMins", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getHangingRepairTimeoutMins()", "full_signature": "public int getHangingRepairTimeoutMins()", "class_method_signature": "ReaperApplicationConfiguration.getHangingRepairTimeoutMins()", "testcase": false, "constructor": false}, {"identifier": "setJmxConnectionTimeoutInSeconds", "parameters": "(int jmxConnectionTimeoutInSeconds)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setJmxConnectionTimeoutInSeconds(int jmxConnectionTimeoutInSeconds)", "full_signature": "@JsonProperty public void setJmxConnectionTimeoutInSeconds(int jmxConnectionTimeoutInSeconds)", "class_method_signature": "ReaperApplicationConfiguration.setJmxConnectionTimeoutInSeconds(int jmxConnectionTimeoutInSeconds)", "testcase": false, "constructor": false}, {"identifier": "getJmxConnectionTimeoutInSeconds", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getJmxConnectionTimeoutInSeconds()", "full_signature": "public int getJmxConnectionTimeoutInSeconds()", "class_method_signature": "ReaperApplicationConfiguration.getJmxConnectionTimeoutInSeconds()", "testcase": false, "constructor": false}, {"identifier": "setClusterTimeoutInDays", "parameters": "(int clusterTimeoutInDays)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setClusterTimeoutInDays(int clusterTimeoutInDays)", "full_signature": "@JsonProperty public void setClusterTimeoutInDays(int clusterTimeoutInDays)", "class_method_signature": "ReaperApplicationConfiguration.setClusterTimeoutInDays(int clusterTimeoutInDays)", "testcase": false, "constructor": false}, {"identifier": "getClusterTimeoutInDays", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getClusterTimeoutInDays()", "full_signature": "public int getClusterTimeoutInDays()", "class_method_signature": "ReaperApplicationConfiguration.getClusterTimeoutInDays()", "testcase": false, "constructor": false}, {"identifier": "setHangingRepairTimeoutMins", "parameters": "(int hangingRepairTimeoutMins)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setHangingRepairTimeoutMins(int hangingRepairTimeoutMins)", "full_signature": "@JsonProperty public void setHangingRepairTimeoutMins(int hangingRepairTimeoutMins)", "class_method_signature": "ReaperApplicationConfiguration.setHangingRepairTimeoutMins(int hangingRepairTimeoutMins)", "testcase": false, "constructor": false}, {"identifier": "getDatacenterAvailability", "parameters": "()", "modifiers": "public", "return": "DatacenterAvailability", "signature": "DatacenterAvailability getDatacenterAvailability()", "full_signature": "public DatacenterAvailability getDatacenterAvailability()", "class_method_signature": "ReaperApplicationConfiguration.getDatacenterAvailability()", "testcase": false, "constructor": false}, {"identifier": "setDatacenterAvailability", "parameters": "(DatacenterAvailability datacenterAvailability)", "modifiers": "@JsonProperty(\"datacenterAvailability\") public", "return": "void", "signature": "void setDatacenterAvailability(DatacenterAvailability datacenterAvailability)", "full_signature": "@JsonProperty(\"datacenterAvailability\") public void setDatacenterAvailability(DatacenterAvailability datacenterAvailability)", "class_method_signature": "ReaperApplicationConfiguration.setDatacenterAvailability(DatacenterAvailability datacenterAvailability)", "testcase": false, "constructor": false}, {"identifier": "getAccessControl", "parameters": "()", "modifiers": "public", "return": "AccessControlConfiguration", "signature": "AccessControlConfiguration getAccessControl()", "full_signature": "public AccessControlConfiguration getAccessControl()", "class_method_signature": "ReaperApplicationConfiguration.getAccessControl()", "testcase": false, "constructor": false}, {"identifier": "setAccessControl", "parameters": "(AccessControlConfiguration accessControl)", "modifiers": "public", "return": "void", "signature": "void setAccessControl(AccessControlConfiguration accessControl)", "full_signature": "public void setAccessControl(AccessControlConfiguration accessControl)", "class_method_signature": "ReaperApplicationConfiguration.setAccessControl(AccessControlConfiguration accessControl)", "testcase": false, "constructor": false}, {"identifier": "isAccessControlEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAccessControlEnabled()", "full_signature": "public boolean isAccessControlEnabled()", "class_method_signature": "ReaperApplicationConfiguration.isAccessControlEnabled()", "testcase": false, "constructor": false}, {"identifier": "getRepairThreadCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRepairThreadCount()", "full_signature": "public int getRepairThreadCount()", "class_method_signature": "ReaperApplicationConfiguration.getRepairThreadCount()", "testcase": false, "constructor": false}, {"identifier": "getPurgeRecordsAfterInDays", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getPurgeRecordsAfterInDays()", "full_signature": "public Integer getPurgeRecordsAfterInDays()", "class_method_signature": "ReaperApplicationConfiguration.getPurgeRecordsAfterInDays()", "testcase": false, "constructor": false}, {"identifier": "setPurgeRecordsAfterInDays", "parameters": "(Integer purgeRecordsAfterInDays)", "modifiers": "@JsonProperty(\"purgeRecordsAfterInDays\") public", "return": "void", "signature": "void setPurgeRecordsAfterInDays(Integer purgeRecordsAfterInDays)", "full_signature": "@JsonProperty(\"purgeRecordsAfterInDays\") public void setPurgeRecordsAfterInDays(Integer purgeRecordsAfterInDays)", "class_method_signature": "ReaperApplicationConfiguration.setPurgeRecordsAfterInDays(Integer purgeRecordsAfterInDays)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfRunsToKeepPerUnit", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getNumberOfRunsToKeepPerUnit()", "full_signature": "public Integer getNumberOfRunsToKeepPerUnit()", "class_method_signature": "ReaperApplicationConfiguration.getNumberOfRunsToKeepPerUnit()", "testcase": false, "constructor": false}, {"identifier": "setNumberOfRunsToKeepPerUnit", "parameters": "(Integer numberOfRunsToKeepPerUnit)", "modifiers": "@JsonProperty(\"numberOfRunsToKeepPerUnit\") public", "return": "void", "signature": "void setNumberOfRunsToKeepPerUnit(Integer numberOfRunsToKeepPerUnit)", "full_signature": "@JsonProperty(\"numberOfRunsToKeepPerUnit\") public void setNumberOfRunsToKeepPerUnit(Integer numberOfRunsToKeepPerUnit)", "class_method_signature": "ReaperApplicationConfiguration.setNumberOfRunsToKeepPerUnit(Integer numberOfRunsToKeepPerUnit)", "testcase": false, "constructor": false}, {"identifier": "isInSidecarMode", "parameters": "()", "modifiers": "public", "return": "Boolean", "signature": "Boolean isInSidecarMode()", "full_signature": "public Boolean isInSidecarMode()", "class_method_signature": "ReaperApplicationConfiguration.isInSidecarMode()", "testcase": false, "constructor": false}, {"identifier": "getEnforcedLocalNode", "parameters": "()", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getEnforcedLocalNode()", "full_signature": "public Optional<String> getEnforcedLocalNode()", "class_method_signature": "ReaperApplicationConfiguration.getEnforcedLocalNode()", "testcase": false, "constructor": false}, {"identifier": "getEnforcedLocalClusterName", "parameters": "()", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getEnforcedLocalClusterName()", "full_signature": "public Optional<String> getEnforcedLocalClusterName()", "class_method_signature": "ReaperApplicationConfiguration.getEnforcedLocalClusterName()", "testcase": false, "constructor": false}, {"identifier": "getEnforcedLocalDatacenter", "parameters": "()", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getEnforcedLocalDatacenter()", "full_signature": "public Optional<String> getEnforcedLocalDatacenter()", "class_method_signature": "ReaperApplicationConfiguration.getEnforcedLocalDatacenter()", "testcase": false, "constructor": false}, {"identifier": "setEnforcedLocalNode", "parameters": "(Optional<String> enforcedLocalNode)", "modifiers": "public", "return": "void", "signature": "void setEnforcedLocalNode(Optional<String> enforcedLocalNode)", "full_signature": "public void setEnforcedLocalNode(Optional<String> enforcedLocalNode)", "class_method_signature": "ReaperApplicationConfiguration.setEnforcedLocalNode(Optional<String> enforcedLocalNode)", "testcase": false, "constructor": false}, {"identifier": "setEnforcedLocalClusterName", "parameters": "(Optional<String> enforcedLocalClusterName)", "modifiers": "public", "return": "void", "signature": "void setEnforcedLocalClusterName(Optional<String> enforcedLocalClusterName)", "full_signature": "public void setEnforcedLocalClusterName(Optional<String> enforcedLocalClusterName)", "class_method_signature": "ReaperApplicationConfiguration.setEnforcedLocalClusterName(Optional<String> enforcedLocalClusterName)", "testcase": false, "constructor": false}, {"identifier": "setEnforcedLocalDatacenter", "parameters": "(Optional<String> enforcedLocalDatacenter)", "modifiers": "public", "return": "void", "signature": "void setEnforcedLocalDatacenter(Optional<String> enforcedLocalDatacenter)", "full_signature": "public void setEnforcedLocalDatacenter(Optional<String> enforcedLocalDatacenter)", "class_method_signature": "ReaperApplicationConfiguration.setEnforcedLocalDatacenter(Optional<String> enforcedLocalDatacenter)", "testcase": false, "constructor": false}, {"identifier": "getEnableConcurrentMigrations", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getEnableConcurrentMigrations()", "full_signature": "public boolean getEnableConcurrentMigrations()", "class_method_signature": "ReaperApplicationConfiguration.getEnableConcurrentMigrations()", "testcase": false, "constructor": false}, {"identifier": "setEnableConcurrentMigrations", "parameters": "(boolean enableConcurrentMigrations)", "modifiers": "public", "return": "void", "signature": "void setEnableConcurrentMigrations(boolean enableConcurrentMigrations)", "full_signature": "public void setEnableConcurrentMigrations(boolean enableConcurrentMigrations)", "class_method_signature": "ReaperApplicationConfiguration.setEnableConcurrentMigrations(boolean enableConcurrentMigrations)", "testcase": false, "constructor": false}, {"identifier": "getHttpClientConfiguration", "parameters": "()", "modifiers": "public", "return": "HttpClientConfiguration", "signature": "HttpClientConfiguration getHttpClientConfiguration()", "full_signature": "public HttpClientConfiguration getHttpClientConfiguration()", "class_method_signature": "ReaperApplicationConfiguration.getHttpClientConfiguration()", "testcase": false, "constructor": false}, {"identifier": "setHttpClientConfiguration", "parameters": "(HttpClientConfiguration httpClient)", "modifiers": "public", "return": "void", "signature": "void setHttpClientConfiguration(HttpClientConfiguration httpClient)", "full_signature": "public void setHttpClientConfiguration(HttpClientConfiguration httpClient)", "class_method_signature": "ReaperApplicationConfiguration.setHttpClientConfiguration(HttpClientConfiguration httpClient)", "testcase": false, "constructor": false}, {"identifier": "getJmxAddressTranslator", "parameters": "()", "modifiers": "@JsonProperty public", "return": "Optional<AddressTranslatorFactory>", "signature": "Optional<AddressTranslatorFactory> getJmxAddressTranslator()", "full_signature": "@JsonProperty public Optional<AddressTranslatorFactory> getJmxAddressTranslator()", "class_method_signature": "ReaperApplicationConfiguration.getJmxAddressTranslator()", "testcase": false, "constructor": false}, {"identifier": "setJmxAddressTranslator", "parameters": "(Optional<AddressTranslatorFactory> jmxAddressTranslator)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setJmxAddressTranslator(Optional<AddressTranslatorFactory> jmxAddressTranslator)", "full_signature": "@JsonProperty public void setJmxAddressTranslator(Optional<AddressTranslatorFactory> jmxAddressTranslator)", "class_method_signature": "ReaperApplicationConfiguration.setJmxAddressTranslator(Optional<AddressTranslatorFactory> jmxAddressTranslator)", "testcase": false, "constructor": false}, {"identifier": "getCryptograph", "parameters": "()", "modifiers": "@Nullable public", "return": "CryptographFactory", "signature": "CryptographFactory getCryptograph()", "full_signature": "@Nullable public CryptographFactory getCryptograph()", "class_method_signature": "ReaperApplicationConfiguration.getCryptograph()", "testcase": false, "constructor": false}, {"identifier": "setCryptograph", "parameters": "(@Nullable CryptographFactory cryptograph)", "modifiers": "public", "return": "void", "signature": "void setCryptograph(@Nullable CryptographFactory cryptograph)", "full_signature": "public void setCryptograph(@Nullable CryptographFactory cryptograph)", "class_method_signature": "ReaperApplicationConfiguration.setCryptograph(@Nullable CryptographFactory cryptograph)", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/ReaperApplicationConfiguration.java"}, "focal_method": {"identifier": "setRepairIntensity", "parameters": "(double repairIntensity)", "modifiers": "public", "return": "void", "body": "public void setRepairIntensity(double repairIntensity) {\n    this.repairIntensity = repairIntensity;\n  }", "signature": "void setRepairIntensity(double repairIntensity)", "full_signature": "public void setRepairIntensity(double repairIntensity)", "class_method_signature": "ReaperApplicationConfiguration.setRepairIntensity(double repairIntensity)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}