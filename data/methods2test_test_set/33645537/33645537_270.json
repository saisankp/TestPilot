{"test_class": {"identifier": "AsteriskRegularExpressionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AsteriskRegularExpression asteriskRegularExpression;", "modifier": "private", "type": "AsteriskRegularExpression", "declarator": "asteriskRegularExpression", "var_name": "asteriskRegularExpression"}], "file": "algs/src/test/java/com/github/pedrovgs/problem35/AsteriskRegularExpressionTest.java"}, "test_case": {"identifier": "shouldReturnAnEmptyArrayIfTheArrayIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnAnEmptyArrayIfTheArrayIsEmpty() {\n    String pattern = \"p*d\";\n    String[] words = { };\n\n    String[] result = asteriskRegularExpression.evaluate(words, pattern);\n\n    assertEquals(0, result.length);\n  }", "signature": "void shouldReturnAnEmptyArrayIfTheArrayIsEmpty()", "full_signature": "@Test public void shouldReturnAnEmptyArrayIfTheArrayIsEmpty()", "class_method_signature": "AsteriskRegularExpressionTest.shouldReturnAnEmptyArrayIfTheArrayIsEmpty()", "testcase": true, "constructor": false, "invocations": ["evaluate", "assertEquals"]}, "focal_class": {"identifier": "AsteriskRegularExpression", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "evaluate", "parameters": "(String[] words, String pattern)", "modifiers": "public", "return": "String[]", "signature": "String[] evaluate(String[] words, String pattern)", "full_signature": "public String[] evaluate(String[] words, String pattern)", "class_method_signature": "AsteriskRegularExpression.evaluate(String[] words, String pattern)", "testcase": false, "constructor": false}, {"identifier": "matchAsteriskRegularExpression", "parameters": "(String word, String pattern)", "modifiers": "private static", "return": "boolean", "signature": "boolean matchAsteriskRegularExpression(String word, String pattern)", "full_signature": "private static boolean matchAsteriskRegularExpression(String word, String pattern)", "class_method_signature": "AsteriskRegularExpression.matchAsteriskRegularExpression(String word, String pattern)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem35/AsteriskRegularExpression.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(String[] words, String pattern)", "modifiers": "public", "return": "String[]", "body": "public String[] evaluate(String[] words, String pattern) {\n    if (words == null || pattern == null) {\n      throw new IllegalArgumentException(\"You can't use null instances as input.\");\n    }\n\n    List<String> result = new LinkedList<String>();\n    for (String word : words) {\n      if (matchAsteriskRegularExpression(word, pattern)) {\n        result.add(word);\n      }\n    }\n    return result.toArray(new String[result.size()]);\n  }", "signature": "String[] evaluate(String[] words, String pattern)", "full_signature": "public String[] evaluate(String[] words, String pattern)", "class_method_signature": "AsteriskRegularExpression.evaluate(String[] words, String pattern)", "testcase": false, "constructor": false, "invocations": ["matchAsteriskRegularExpression", "add", "toArray", "size"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}