{"test_class": {"identifier": "OverloadResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MUL_NAME = \"*\";", "modifier": "private static final", "type": "String", "declarator": "MUL_NAME = \"*\"", "var_name": "MUL_NAME"}, {"original_string": "private final static TClass TINT = new TestClassBase(\"int\", UnderlyingType.INT_32);", "modifier": "private final static", "type": "TClass", "declarator": "TINT = new TestClassBase(\"int\", UnderlyingType.INT_32)", "var_name": "TINT"}, {"original_string": "private final static TClass TBIGINT = new TestClassBase(\"bigint\", UnderlyingType.INT_64);", "modifier": "private final static", "type": "TClass", "declarator": "TBIGINT = new TestClassBase(\"bigint\", UnderlyingType.INT_64)", "var_name": "TBIGINT"}, {"original_string": "private final static TClass TDATE = new TestClassBase(\"date\",  UnderlyingType.DOUBLE);", "modifier": "private final static", "type": "TClass", "declarator": "TDATE = new TestClassBase(\"date\",  UnderlyingType.DOUBLE)", "var_name": "TDATE"}, {"original_string": "private final static TClass TVARCHAR = new TestClassBase(\"varchar\",  UnderlyingType.BYTES);", "modifier": "private final static", "type": "TClass", "declarator": "TVARCHAR = new TestClassBase(\"varchar\",  UnderlyingType.BYTES)", "var_name": "TVARCHAR"}, {"original_string": "private final static TestCastBase C_INT_BIGINT = new TestCastBase(TINT, TBIGINT, true);", "modifier": "private final static", "type": "TestCastBase", "declarator": "C_INT_BIGINT = new TestCastBase(TINT, TBIGINT, true)", "var_name": "C_INT_BIGINT"}, {"original_string": "private final static TestCastBase C_BIGINT_INT = new TestCastBase(TBIGINT, TINT, false);", "modifier": "private final static", "type": "TestCastBase", "declarator": "C_BIGINT_INT = new TestCastBase(TBIGINT, TINT, false)", "var_name": "C_BIGINT_INT"}, {"original_string": "private final static TestMulBase MUL_INTS = new TestMulBase(TINT);", "modifier": "private final static", "type": "TestMulBase", "declarator": "MUL_INTS = new TestMulBase(TINT)", "var_name": "MUL_INTS"}, {"original_string": "private final static TestMulBase MUL_BIGINTS = new TestMulBase(TBIGINT);", "modifier": "private final static", "type": "TestMulBase", "declarator": "MUL_BIGINTS = new TestMulBase(TBIGINT)", "var_name": "MUL_BIGINTS"}, {"original_string": "private final static TestMulBase MUL_DATE_INT = new TestMulBase(TDATE, TINT, TDATE);", "modifier": "private final static", "type": "TestMulBase", "declarator": "MUL_DATE_INT = new TestMulBase(TDATE, TINT, TDATE)", "var_name": "MUL_DATE_INT"}, {"original_string": "private TypesRegistryService registry;", "modifier": "private", "type": "TypesRegistryService", "declarator": "registry", "var_name": "registry"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/types/service/OverloadResolverTest.java"}, "test_case": {"identifier": "onePosAndRemainingWithPickingSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onePosAndRemainingWithPickingSet() {\n        final String NAME = \"coalesce\";\n        TestGetBase coalesce = new TestGetBase(NAME, TVARCHAR);\n        coalesce.builder().pickingVararg(null, 0);\n        new Initializer().overloads(coalesce).init();\n\n        try {\n            OverloadResolver.OverloadResult result = registry.getScalarsResolver().get(NAME, prepVals());\n            fail(\"WrongArity expected but got: \" + result);\n        } catch(WrongExpressionArityException e) {\n            // Expected\n        }\n\n        checkResolved(NAME + \"(INT)\", coalesce, NAME, prepVals(TINT));\n        new Initializer().overloads(coalesce).casts(C_INT_BIGINT).types(TDATE).init();\n        checkResolved(NAME+\"(null,INT,BIGINT)\", coalesce, NAME, prepVals(null, TINT, TBIGINT));\n        try {\n            checkResolved(NAME+\"(null,DATE,INT)\", coalesce, NAME, prepVals(null, TDATE, TINT));\n            fail(\"expected overload exception\");\n        } catch (NoSuchCastException e) {\n            // There is no common type between date and int\n        }\n    }", "signature": "void onePosAndRemainingWithPickingSet()", "full_signature": "@Test public void onePosAndRemainingWithPickingSet()", "class_method_signature": "OverloadResolverTest.onePosAndRemainingWithPickingSet()", "testcase": true, "constructor": false, "invocations": ["pickingVararg", "builder", "init", "overloads", "get", "getScalarsResolver", "prepVals", "fail", "checkResolved", "prepVals", "init", "types", "casts", "overloads", "checkResolved", "prepVals", "checkResolved", "prepVals", "fail"]}, "focal_class": {"identifier": "OverloadResolver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ResolvablesRegistry<V> overloadsRegistry;", "modifier": "private final", "type": "ResolvablesRegistry<V>", "declarator": "overloadsRegistry", "var_name": "overloadsRegistry"}, {"original_string": "private final TCastResolver castsResolver;", "modifier": "private final", "type": "TCastResolver", "declarator": "castsResolver", "var_name": "castsResolver"}], "methods": [{"identifier": "OverloadResolver", "parameters": "(ResolvablesRegistry<V> overloadsRegistry, TCastResolver castsResolver)", "modifiers": "public", "return": "", "signature": " OverloadResolver(ResolvablesRegistry<V> overloadsRegistry, TCastResolver castsResolver)", "full_signature": "public  OverloadResolver(ResolvablesRegistry<V> overloadsRegistry, TCastResolver castsResolver)", "class_method_signature": "OverloadResolver.OverloadResolver(ResolvablesRegistry<V> overloadsRegistry, TCastResolver castsResolver)", "testcase": false, "constructor": true}, {"identifier": "isDefined", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean isDefined(String name)", "full_signature": "public boolean isDefined(String name)", "class_method_signature": "OverloadResolver.isDefined(String name)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String name, List<? extends TPreptimeValue> inputs)", "modifiers": "public", "return": "OverloadResult<V>", "signature": "OverloadResult<V> get(String name, List<? extends TPreptimeValue> inputs)", "full_signature": "public OverloadResult<V> get(String name, List<? extends TPreptimeValue> inputs)", "class_method_signature": "OverloadResolver.get(String name, List<? extends TPreptimeValue> inputs)", "testcase": false, "constructor": false}, {"identifier": "inputBasedResolution", "parameters": "(\n            String name, List<? extends TPreptimeValue> inputs,\n            Iterable<? extends ScalarsGroup<V>> scalarGroupsByPriority)", "modifiers": "private", "return": "OverloadResult<V>", "signature": "OverloadResult<V> inputBasedResolution(\n            String name, List<? extends TPreptimeValue> inputs,\n            Iterable<? extends ScalarsGroup<V>> scalarGroupsByPriority)", "full_signature": "private OverloadResult<V> inputBasedResolution(\n            String name, List<? extends TPreptimeValue> inputs,\n            Iterable<? extends ScalarsGroup<V>> scalarGroupsByPriority)", "class_method_signature": "OverloadResolver.inputBasedResolution(\n            String name, List<? extends TPreptimeValue> inputs,\n            Iterable<? extends ScalarsGroup<V>> scalarGroupsByPriority)", "testcase": false, "constructor": false}, {"identifier": "getRegistry", "parameters": "()", "modifiers": "", "return": "ResolvablesRegistry<V>", "signature": "ResolvablesRegistry<V> getRegistry()", "full_signature": " ResolvablesRegistry<V> getRegistry()", "class_method_signature": "OverloadResolver.getRegistry()", "testcase": false, "constructor": false}, {"identifier": "typeNameList", "parameters": "(List<? extends TPreptimeValue> inputs)", "modifiers": "private static", "return": "String", "signature": "String typeNameList(List<? extends TPreptimeValue> inputs)", "full_signature": "private static String typeNameList(List<? extends TPreptimeValue> inputs)", "class_method_signature": "OverloadResolver.typeNameList(List<? extends TPreptimeValue> inputs)", "testcase": false, "constructor": false}, {"identifier": "isCandidate", "parameters": "(V overload,\n                                List<? extends TPreptimeValue> inputs,\n                                ScalarsGroup<V> scalarGroups,\n                                boolean hasNext)", "modifiers": "private", "return": "boolean", "signature": "boolean isCandidate(V overload,\n                                List<? extends TPreptimeValue> inputs,\n                                ScalarsGroup<V> scalarGroups,\n                                boolean hasNext)", "full_signature": "private boolean isCandidate(V overload,\n                                List<? extends TPreptimeValue> inputs,\n                                ScalarsGroup<V> scalarGroups,\n                                boolean hasNext)", "class_method_signature": "OverloadResolver.isCandidate(V overload,\n                                List<? extends TPreptimeValue> inputs,\n                                ScalarsGroup<V> scalarGroups,\n                                boolean hasNext)", "testcase": false, "constructor": false}, {"identifier": "buildResult", "parameters": "(V overload, List<? extends TPreptimeValue> inputs)", "modifiers": "private", "return": "OverloadResult<V>", "signature": "OverloadResult<V> buildResult(V overload, List<? extends TPreptimeValue> inputs)", "full_signature": "private OverloadResult<V> buildResult(V overload, List<? extends TPreptimeValue> inputs)", "class_method_signature": "OverloadResolver.buildResult(V overload, List<? extends TPreptimeValue> inputs)", "testcase": false, "constructor": false}, {"identifier": "reduceToMinimalCastGroups", "parameters": "(List<V> candidates)", "modifiers": "private", "return": "List<List<V>>", "signature": "List<List<V>> reduceToMinimalCastGroups(List<V> candidates)", "full_signature": "private List<List<V>> reduceToMinimalCastGroups(List<V> candidates)", "class_method_signature": "OverloadResolver.reduceToMinimalCastGroups(List<V> candidates)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/types/service/OverloadResolver.java"}, "focal_method": {"identifier": "get", "parameters": "(String name, List<? extends TPreptimeValue> inputs)", "modifiers": "public", "return": "OverloadResult<V>", "body": "public OverloadResult<V> get(String name, List<? extends TPreptimeValue> inputs)\n    {\n        Iterable<? extends ScalarsGroup<V>> scalarsGroup = overloadsRegistry.get(name);\n        if (scalarsGroup == null) {\n            throw new NoSuchFunctionException(name);\n        }\n        return inputBasedResolution(name, inputs, scalarsGroup);\n    }", "signature": "OverloadResult<V> get(String name, List<? extends TPreptimeValue> inputs)", "full_signature": "public OverloadResult<V> get(String name, List<? extends TPreptimeValue> inputs)", "class_method_signature": "OverloadResolver.get(String name, List<? extends TPreptimeValue> inputs)", "testcase": false, "constructor": false, "invocations": ["get", "inputBasedResolution"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}