{"test_class": {"identifier": "CSVReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/tableio/csv/CSVReaderTest.java"}, "test_case": {"identifier": "testFileFinishedIsCalled", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testFileFinishedIsCalled() {\n        TestTableReader tableReader = new TestTableReader();\n        new CSVReader().read(new File(\"src/test/test.csv\"), tableReader);\n\n        Assertions.assertTrue(tableReader.hasFileFinishedBeenCalled());\n    }", "signature": "void testFileFinishedIsCalled()", "full_signature": "@Test void testFileFinishedIsCalled()", "class_method_signature": "CSVReaderTest.testFileFinishedIsCalled()", "testcase": true, "constructor": false, "invocations": ["read", "assertTrue", "hasFileFinishedBeenCalled"]}, "focal_class": {"identifier": "CSVReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CSVReader.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CSVReader.class)", "var_name": "logger"}, {"original_string": "public static final String COLUMN_DELIMITER = \",\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_DELIMITER = \",\"", "var_name": "COLUMN_DELIMITER"}], "methods": [{"identifier": "read", "parameters": "(BufferedReader reader, TableReader lineConsumer)", "modifiers": "public", "return": "void", "signature": "void read(BufferedReader reader, TableReader lineConsumer)", "full_signature": "public void read(BufferedReader reader, TableReader lineConsumer)", "class_method_signature": "CSVReader.read(BufferedReader reader, TableReader lineConsumer)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(File file, TableReader lineConsumer)", "modifiers": "public", "return": "void", "signature": "void read(File file, TableReader lineConsumer)", "full_signature": "public void read(File file, TableReader lineConsumer)", "class_method_signature": "CSVReader.read(File file, TableReader lineConsumer)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/tableio/csv/CSVReader.java"}, "focal_method": {"identifier": "read", "parameters": "(BufferedReader reader, TableReader lineConsumer)", "modifiers": "public", "return": "void", "body": "public void read(BufferedReader reader, TableReader lineConsumer) {\n        try {\n            String line = reader.readLine();\n            if (line == null) {\n                return;\n            }\n            ImmutableList<String> header = Arrays.stream(line.split(COLUMN_DELIMITER, -1))\n                    .collect(ImmutableList.toImmutableList());\n            int headerLength = header.size();\n            lineConsumer.consumeHeader(header);\n            line = reader.readLine();\n            while (line != null) {\n                if (!line.isEmpty()) {\n                    String[] splitLine = line.split(COLUMN_DELIMITER, -1);\n                    Preconditions.checkState(splitLine.length == headerLength,\n                            String.format(\"Line incompatible with header.%n Line: %s%n Header: %s\", Arrays.toString(splitLine), header));\n                    ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();\n                    for (int i = 0; i < headerLength; i++) {\n                        builder.put(header.get(i), splitLine[i]);\n                    }\n                    lineConsumer.consumeLine(builder.build());\n                }\n                line = reader.readLine();\n            }\n            lineConsumer.fileFinished();\n            reader.close();\n        } catch (IOException e) {\n            logger.error(\"Failed to read file\", e);\n        }\n    }", "signature": "void read(BufferedReader reader, TableReader lineConsumer)", "full_signature": "public void read(BufferedReader reader, TableReader lineConsumer)", "class_method_signature": "CSVReader.read(BufferedReader reader, TableReader lineConsumer)", "testcase": false, "constructor": false, "invocations": ["readLine", "collect", "stream", "split", "toImmutableList", "size", "consumeHeader", "readLine", "isEmpty", "split", "checkState", "format", "toString", "builder", "put", "get", "consumeLine", "build", "readLine", "fileFinished", "close", "error"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}