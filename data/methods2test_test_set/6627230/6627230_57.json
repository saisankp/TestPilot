{"test_class": {"identifier": "TablesTokenResolverTest", "superclass": "extends AbstractTokenResolverTest", "interfaces": "", "fields": [], "file": "dal-jdbc/src/test/java/org/unidal/dal/jdbc/query/token/resolver/TablesTokenResolverTest.java"}, "test_case": {"identifier": "testSelectTwoTables", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testSelectTwoTables() throws Exception {\n      QueryDef query = new QueryDef(\"test\", UserEntity.class, QueryType.SELECT, \"<TABLES/>\");\n      Readset<?> readset = UserEntity.READSET_FULL_WITH_HOME_ADDRESS_FULL;\n      User user = new User();\n      QueryContext ctx = getSelectContext(query, user, readset);\n\n      m_queryResolver.resolve(ctx);\n      Assert.assertEquals(\"`user` u, user_address hua\", ctx.getSqlStatement());\n      Assert.assertEquals(true, ctx.isTableResolved());\n   }", "signature": "void testSelectTwoTables()", "full_signature": "@Test public void testSelectTwoTables()", "class_method_signature": "TablesTokenResolverTest.testSelectTwoTables()", "testcase": true, "constructor": false, "invocations": ["getSelectContext", "resolve", "assertEquals", "getSqlStatement", "assertEquals", "isTableResolved"]}, "focal_class": {"identifier": "TablesTokenResolver", "superclass": "", "interfaces": "implements TokenResolver", "fields": [{"original_string": "@Inject\n   private TableProviderManager m_manager;", "modifier": "@Inject\n   private", "type": "TableProviderManager", "declarator": "m_manager", "var_name": "m_manager"}, {"original_string": "@Inject\n   private QueryNaming m_naming;", "modifier": "@Inject\n   private", "type": "QueryNaming", "declarator": "m_naming", "var_name": "m_naming"}], "methods": [{"identifier": "getPhysicalName", "parameters": "(QueryContext ctx, String logicalName)", "modifiers": "private", "return": "String", "signature": "String getPhysicalName(QueryContext ctx, String logicalName)", "full_signature": "private String getPhysicalName(QueryContext ctx, String logicalName)", "class_method_signature": "TablesTokenResolver.getPhysicalName(QueryContext ctx, String logicalName)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "TablesTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false}], "file": "dal-jdbc/src/main/java/org/unidal/dal/jdbc/query/token/resolver/TablesTokenResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "body": "public String resolve(Token token, QueryContext ctx) {\n      if (token.getType() != TokenType.TABLES) {\n         throw new DalRuntimeException(\"Internal error: only TABLES token is supported by \" + getClass());\n      }\n\n      switch (ctx.getQuery().getType()) {\n      case SELECT:\n         EntityInfo entityInfo = ctx.getEntityInfo();\n         SubObjects subobject = entityInfo.getSubobjects(ctx.getReadset());\n         StringBuilder sb = new StringBuilder(256);\n         String table = getPhysicalName(ctx, entityInfo.getLogicalName());\n\n         sb.append(m_naming.getTable(table, entityInfo.getAlias()));\n\n         if (subobject != null) {\n            String[] names = subobject.value();\n            Set<String> done = new HashSet<String>();\n\n            done.add(entityInfo.getLogicalName());\n\n            for (String name : names) {\n               if (name != null && name.length() > 0) {\n                  // only include a table once\n                  if (done.contains(name)) {\n                     continue;\n                  } else {\n                     done.add(name);\n                  }\n\n                  Relation relation = entityInfo.getRelation(name);\n\n                  sb.append(\", \");\n\n                  sb.append(m_naming.getTable(getPhysicalName(ctx, relation.logicalName()), relation.alias()));\n               }\n            }\n         }\n\n         ctx.setTableResolved(true);\n         return sb.toString();\n      case INSERT:\n         throw new DalRuntimeException(\"TABLES token does not support query type: \" + ctx.getQuery().getType());\n      case UPDATE:\n         throw new DalRuntimeException(\"TABLES token does not support query type: \" + ctx.getQuery().getType());\n      case DELETE:\n         throw new DalRuntimeException(\"TABLES token does not support query type: \" + ctx.getQuery().getType());\n      default:\n         throw new DalRuntimeException(\"TABLES token does not support query type: \" + ctx.getQuery().getType());\n      }\n   }", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "TablesTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false, "invocations": ["getType", "getClass", "getType", "getQuery", "getEntityInfo", "getSubobjects", "getReadset", "getPhysicalName", "getLogicalName", "append", "getTable", "getAlias", "value", "add", "getLogicalName", "length", "contains", "add", "getRelation", "append", "append", "getTable", "getPhysicalName", "logicalName", "alias", "setTableResolved", "toString", "getType", "getQuery", "getType", "getQuery", "getType", "getQuery", "getType", "getQuery"]}, "repository": {"repo_id": 6627230, "url": "https://github.com/unidal/frameworks", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 100, "size": 3009, "license": "licensed"}}