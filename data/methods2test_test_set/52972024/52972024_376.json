{"test_class": {"identifier": "OnceSchedulingStrategyTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private ISchedulerEntry entry;", "modifier": "private", "type": "ISchedulerEntry", "declarator": "entry", "var_name": "entry"}, {"original_string": "private IFieldName time;", "modifier": "private", "type": "IFieldName", "declarator": "time", "var_name": "time"}, {"original_string": "private IFieldName save;", "modifier": "private", "type": "IFieldName", "declarator": "save", "var_name": "save"}, {"original_string": "private IFieldName ntl;", "modifier": "private", "type": "IFieldName", "declarator": "ntl", "var_name": "ntl"}], "file": "CoreFeatures/Scheduler/SchedulingStrategies/src/test/java/info/smart_tools/smartactors/scheduler/strategies/OnceSchedulingStrategyTest.java"}, "test_case": {"identifier": "Should_initializeEntryAndSaveIfNecessary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_initializeEntryAndSaveIfNecessary()\n            throws Exception {\n        ISchedulingStrategy strategy = new OnceSchedulingStrategy();\n\n        strategy.init(entry, IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"),\n                \"{'time':'1989-09-11T00:00:05','save':true,'neverTooLate':true}\".replace('\\'','\"')));\n\n        verify(entry).save();\n        verify(entry).scheduleNext(LocalDateTime.parse(\"1989-09-11T00:00:05\").atZone(ZoneOffset.UTC).toInstant().toEpochMilli());\n\n        assertEquals(\"1989-09-11T00:00:05\", entry.getState().getValue(time));\n        assertEquals(true, entry.getState().getValue(ntl));\n        assertNull(entry.getState().getValue(save));\n    }", "signature": "void Should_initializeEntryAndSaveIfNecessary()", "full_signature": "@Test public void Should_initializeEntryAndSaveIfNecessary()", "class_method_signature": "OnceSchedulingStrategyTest.Should_initializeEntryAndSaveIfNecessary()", "testcase": true, "constructor": false, "invocations": ["init", "resolve", "getOrAdd", "replace", "save", "verify", "scheduleNext", "verify", "toEpochMilli", "toInstant", "atZone", "parse", "assertEquals", "getValue", "getState", "assertEquals", "getValue", "getState", "assertNull", "getValue", "getState"]}, "focal_class": {"identifier": "OnceSchedulingStrategy", "superclass": "", "interfaces": "implements ISchedulingStrategy", "fields": [{"original_string": "private final IFieldName timeFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "timeFieldName", "var_name": "timeFieldName"}, {"original_string": "private final IFieldName saveFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "saveFieldName", "var_name": "saveFieldName"}, {"original_string": "private final IFieldName neverTooLateFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "neverTooLateFieldName", "var_name": "neverTooLateFieldName"}, {"original_string": "private final IFieldName pausedExecutionFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "pausedExecutionFieldName", "var_name": "pausedExecutionFieldName"}], "methods": [{"identifier": "datetimeToMillis", "parameters": "(final LocalDateTime localDateTime)", "modifiers": "private", "return": "long", "signature": "long datetimeToMillis(final LocalDateTime localDateTime)", "full_signature": "private long datetimeToMillis(final LocalDateTime localDateTime)", "class_method_signature": "OnceSchedulingStrategy.datetimeToMillis(final LocalDateTime localDateTime)", "testcase": false, "constructor": false}, {"identifier": "OnceSchedulingStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " OnceSchedulingStrategy()", "full_signature": "public  OnceSchedulingStrategy()", "class_method_signature": "OnceSchedulingStrategy.OnceSchedulingStrategy()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final ISchedulerEntry entry, final IObject args)", "modifiers": "@Override public", "return": "void", "signature": "void init(final ISchedulerEntry entry, final IObject args)", "full_signature": "@Override public void init(final ISchedulerEntry entry, final IObject args)", "class_method_signature": "OnceSchedulingStrategy.init(final ISchedulerEntry entry, final IObject args)", "testcase": false, "constructor": false}, {"identifier": "postProcess", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void postProcess(final ISchedulerEntry entry)", "full_signature": "@Override public void postProcess(final ISchedulerEntry entry)", "class_method_signature": "OnceSchedulingStrategy.postProcess(final ISchedulerEntry entry)", "testcase": false, "constructor": false}, {"identifier": "restore", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void restore(final ISchedulerEntry entry)", "full_signature": "@Override public void restore(final ISchedulerEntry entry)", "class_method_signature": "OnceSchedulingStrategy.restore(final ISchedulerEntry entry)", "testcase": false, "constructor": false}, {"identifier": "processException", "parameters": "(final ISchedulerEntry entry, final Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void processException(final ISchedulerEntry entry, final Throwable e)", "full_signature": "@Override public void processException(final ISchedulerEntry entry, final Throwable e)", "class_method_signature": "OnceSchedulingStrategy.processException(final ISchedulerEntry entry, final Throwable e)", "testcase": false, "constructor": false}, {"identifier": "notifyPaused", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void notifyPaused(final ISchedulerEntry entry)", "full_signature": "@Override public void notifyPaused(final ISchedulerEntry entry)", "class_method_signature": "OnceSchedulingStrategy.notifyPaused(final ISchedulerEntry entry)", "testcase": false, "constructor": false}, {"identifier": "notifyUnPaused", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void notifyUnPaused(final ISchedulerEntry entry)", "full_signature": "@Override public void notifyUnPaused(final ISchedulerEntry entry)", "class_method_signature": "OnceSchedulingStrategy.notifyUnPaused(final ISchedulerEntry entry)", "testcase": false, "constructor": false}, {"identifier": "processPausedExecution", "parameters": "(final ISchedulerEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void processPausedExecution(final ISchedulerEntry entry)", "full_signature": "@Override public void processPausedExecution(final ISchedulerEntry entry)", "class_method_signature": "OnceSchedulingStrategy.processPausedExecution(final ISchedulerEntry entry)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Scheduler/SchedulingStrategies/src/main/java/info/smart_tools/smartactors/scheduler/strategies/OnceSchedulingStrategy.java"}, "focal_method": {"identifier": "init", "parameters": "(final ISchedulerEntry entry, final IObject args)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void init(final ISchedulerEntry entry, final IObject args) throws SchedulingStrategyExecutionException {\n        try {\n            LocalDateTime time = LocalDateTime.parse((String) args.getValue(timeFieldName));\n            Boolean save = (Boolean) args.getValue(saveFieldName);\n\n            entry.getState().setValue(timeFieldName, time.toString());\n\n            if (save) {\n                Boolean ntl = (Boolean) args.getValue(neverTooLateFieldName);\n\n                entry.getState().setValue(neverTooLateFieldName, ntl);\n                entry.save();\n            }\n\n            entry.scheduleNext(datetimeToMillis(time));\n        } catch (ReadValueException | InvalidArgumentException | EntryStorageAccessException | ChangeValueException\n                | EntryScheduleException e) {\n            throw new SchedulingStrategyExecutionException(\"Error occurred initializing entry.\", e);\n        }\n    }", "signature": "void init(final ISchedulerEntry entry, final IObject args)", "full_signature": "@Override public void init(final ISchedulerEntry entry, final IObject args)", "class_method_signature": "OnceSchedulingStrategy.init(final ISchedulerEntry entry, final IObject args)", "testcase": false, "constructor": false, "invocations": ["parse", "getValue", "getValue", "setValue", "getState", "toString", "getValue", "setValue", "getState", "save", "scheduleNext", "datetimeToMillis"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}