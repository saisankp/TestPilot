{"test_class": {"identifier": "TestVSensorLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static StorageManager sm = null;", "modifier": "private static", "type": "StorageManager", "declarator": "sm = null", "var_name": "sm"}, {"original_string": "private AddressBean[] addressing= new AddressBean[] {new AddressBean(\"mock-test\")};", "modifier": "private", "type": "AddressBean[]", "declarator": "addressing= new AddressBean[] {new AddressBean(\"mock-test\")}", "var_name": "addressing"}], "file": "modules/x-gsn/src/main/java/org/openiot/gsn/TestVSensorLoader.java"}, "test_case": {"identifier": "testStopLoading", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testStopLoading() throws IOException {\n\t\tVSensorConfig  sensorConfig = new VSensorConfig();\n\t\tsensorConfig.setName(\"test\");\n\t\tFile someFile = File.createTempFile(\"bla\", \".xml\");\n\t\tsensorConfig.setMainClass(\"org.openiot.gsn.vsensor.BridgeVirtualSensor\");\n\t\tsensorConfig.setFileName(someFile.getAbsolutePath());\n\t\tVirtualSensor pool = new VirtualSensor(sensorConfig);\n\t\tInputStream is = new InputStream();\n\t\tis.setInputStreamName(\"t1\");\n\t\tis.setQuery(\"select * from my-stream1\");\n\t\tStreamSource \tss1 = new StreamSource().setAlias(\"my-stream1\").setAddressing(new AddressBean[] {new AddressBean(\"mock-test\")}).setSqlQuery(\"select * from wrapper\").setRawHistorySize(\"2\").setInputStream(is);\t\t\n\t\tss1.setSamplingRate(1);\n\t\tassertTrue(ss1.validate());\n\t\tis.setSources(ss1);\n\t\tassertTrue(is.validate());\n\t\tsensorConfig.setInputStreams(is);\n\t\tassertTrue(sensorConfig.validate());\n\t\t\n\t}", "signature": "void testStopLoading()", "full_signature": "@Test public void testStopLoading()", "class_method_signature": "TestVSensorLoader.testStopLoading()", "testcase": true, "constructor": false, "invocations": ["setName", "createTempFile", "setMainClass", "setFileName", "getAbsolutePath", "setInputStreamName", "setQuery", "setInputStream", "setRawHistorySize", "setSqlQuery", "setAddressing", "setAlias", "setSamplingRate", "assertTrue", "validate", "setSources", "assertTrue", "validate", "setInputStreams", "assertTrue", "validate"]}, "focal_class": {"identifier": "VSensorLoader", "superclass": "extends Thread", "interfaces": "", "fields": [{"original_string": "public static final String                                     VSENSOR_POOL                        = \"VSENSOR-POOL\";", "modifier": "public static final", "type": "String", "declarator": "VSENSOR_POOL                        = \"VSENSOR-POOL\"", "var_name": "VSENSOR_POOL"}, {"original_string": "public static final String                                     STREAM_SOURCE                       = \"STREAM-SOURCE\";", "modifier": "public static final", "type": "String", "declarator": "STREAM_SOURCE                       = \"STREAM-SOURCE\"", "var_name": "STREAM_SOURCE"}, {"original_string": "public static final String                                     INPUT_STREAM                        = \"INPUT-STREAM\";", "modifier": "public static final", "type": "String", "declarator": "INPUT_STREAM                        = \"INPUT-STREAM\"", "var_name": "INPUT_STREAM"}, {"original_string": "private static transient Logger                                logger                              = LoggerFactory.getLogger ( VSensorLoader.class );", "modifier": "private static transient", "type": "Logger", "declarator": "logger                              = LoggerFactory.getLogger ( VSensorLoader.class )", "var_name": "logger"}, {"original_string": "private  final List < AbstractWrapper > activeWrappers                   = new ArrayList< AbstractWrapper >( );", "modifier": "private  final", "type": "List < AbstractWrapper >", "declarator": "activeWrappers                   = new ArrayList< AbstractWrapper >( )", "var_name": "activeWrappers"}, {"original_string": "private String                                                 pluginsDir;", "modifier": "private", "type": "String", "declarator": "pluginsDir", "var_name": "pluginsDir"}, {"original_string": "private boolean                                                isActive                              = true;", "modifier": "private", "type": "boolean", "declarator": "isActive                              = true", "var_name": "isActive"}, {"original_string": "private static int                                             VSENSOR_LOADER_THREAD_COUNTER       = 0;", "modifier": "private static", "type": "int", "declarator": "VSENSOR_LOADER_THREAD_COUNTER       = 0", "var_name": "VSENSOR_LOADER_THREAD_COUNTER"}, {"original_string": "private static VSensorLoader singleton = null;", "modifier": "private static", "type": "VSensorLoader", "declarator": "singleton = null", "var_name": "singleton"}, {"original_string": "private ArrayList<VSensorStateChangeListener> changeListeners = new ArrayList<VSensorStateChangeListener>();", "modifier": "private", "type": "ArrayList<VSensorStateChangeListener>", "declarator": "changeListeners = new ArrayList<VSensorStateChangeListener>()", "var_name": "changeListeners"}], "methods": [{"identifier": "addVSensorStateChangeListener", "parameters": "(VSensorStateChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void addVSensorStateChangeListener(VSensorStateChangeListener listener)", "full_signature": "public void addVSensorStateChangeListener(VSensorStateChangeListener listener)", "class_method_signature": "VSensorLoader.addVSensorStateChangeListener(VSensorStateChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeVSensorStateChangeListener", "parameters": "(VSensorStateChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void removeVSensorStateChangeListener(VSensorStateChangeListener listener)", "full_signature": "public void removeVSensorStateChangeListener(VSensorStateChangeListener listener)", "class_method_signature": "VSensorLoader.removeVSensorStateChangeListener(VSensorStateChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "fireVSensorLoading", "parameters": "(VSensorConfig config)", "modifiers": "public", "return": "boolean", "signature": "boolean fireVSensorLoading(VSensorConfig config)", "full_signature": "public boolean fireVSensorLoading(VSensorConfig config)", "class_method_signature": "VSensorLoader.fireVSensorLoading(VSensorConfig config)", "testcase": false, "constructor": false}, {"identifier": "fireVSensorUnLoading", "parameters": "(VSensorConfig config)", "modifiers": "public", "return": "boolean", "signature": "boolean fireVSensorUnLoading(VSensorConfig config)", "full_signature": "public boolean fireVSensorUnLoading(VSensorConfig config)", "class_method_signature": "VSensorLoader.fireVSensorUnLoading(VSensorConfig config)", "testcase": false, "constructor": false}, {"identifier": "VSensorLoader", "parameters": "()", "modifiers": "public", "return": "", "signature": " VSensorLoader()", "full_signature": "public  VSensorLoader()", "class_method_signature": "VSensorLoader.VSensorLoader()", "testcase": false, "constructor": true}, {"identifier": "VSensorLoader", "parameters": "( String pluginsPath )", "modifiers": "public", "return": "", "signature": " VSensorLoader( String pluginsPath )", "full_signature": "public  VSensorLoader( String pluginsPath )", "class_method_signature": "VSensorLoader.VSensorLoader( String pluginsPath )", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(String path)", "modifiers": "public static", "return": "VSensorLoader", "signature": "VSensorLoader getInstance(String path)", "full_signature": "public static VSensorLoader getInstance(String path)", "class_method_signature": "VSensorLoader.getInstance(String path)", "testcase": false, "constructor": false}, {"identifier": "startLoading", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startLoading()", "full_signature": "public void startLoading()", "class_method_signature": "VSensorLoader.startLoading()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "( )", "modifiers": "public", "return": "void", "signature": "void run( )", "full_signature": "public void run( )", "class_method_signature": "VSensorLoader.run( )", "testcase": false, "constructor": false}, {"identifier": "loadVirtualSensor", "parameters": "(String vsConfigurationFileContent, String fileName)", "modifiers": "public", "return": "void", "signature": "void loadVirtualSensor(String vsConfigurationFileContent, String fileName)", "full_signature": "public void loadVirtualSensor(String vsConfigurationFileContent, String fileName)", "class_method_signature": "VSensorLoader.loadVirtualSensor(String vsConfigurationFileContent, String fileName)", "testcase": false, "constructor": false}, {"identifier": "buildVSensorConfig", "parameters": "(String fileContent)", "modifiers": "private", "return": "VSensorConfig", "signature": "VSensorConfig buildVSensorConfig(String fileContent)", "full_signature": "private VSensorConfig buildVSensorConfig(String fileContent)", "class_method_signature": "VSensorLoader.buildVSensorConfig(String fileContent)", "testcase": false, "constructor": false}, {"identifier": "getVSConfigurationFilePath", "parameters": "(String fileName)", "modifiers": "public static", "return": "String", "signature": "String getVSConfigurationFilePath(String fileName)", "full_signature": "public static String getVSConfigurationFilePath(String fileName)", "class_method_signature": "VSensorLoader.getVSConfigurationFilePath(String fileName)", "testcase": false, "constructor": false}, {"identifier": "loadPlugin", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void loadPlugin()", "full_signature": "public synchronized void loadPlugin()", "class_method_signature": "VSensorLoader.loadPlugin()", "testcase": false, "constructor": false}, {"identifier": "loadPlugin", "parameters": "(String fileFilterName)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean loadPlugin(String fileFilterName)", "full_signature": "public synchronized boolean loadPlugin(String fileFilterName)", "class_method_signature": "VSensorLoader.loadPlugin(String fileFilterName)", "testcase": false, "constructor": false}, {"identifier": "loadPlugin", "parameters": "(VSensorConfig vs)", "modifiers": "private synchronized", "return": "boolean", "signature": "boolean loadPlugin(VSensorConfig vs)", "full_signature": "private synchronized boolean loadPlugin(VSensorConfig vs)", "class_method_signature": "VSensorLoader.loadPlugin(VSensorConfig vs)", "testcase": false, "constructor": false}, {"identifier": "removeVirtualSensor", "parameters": "(VSensorConfig configFile)", "modifiers": "private", "return": "void", "signature": "void removeVirtualSensor(VSensorConfig configFile)", "full_signature": "private void removeVirtualSensor(VSensorConfig configFile)", "class_method_signature": "VSensorLoader.removeVirtualSensor(VSensorConfig configFile)", "testcase": false, "constructor": false}, {"identifier": "isVirtualSensorValid", "parameters": "(VSensorConfig configuration)", "modifiers": "public", "return": "boolean", "signature": "boolean isVirtualSensorValid(VSensorConfig configuration)", "full_signature": "public boolean isVirtualSensorValid(VSensorConfig configuration)", "class_method_signature": "VSensorLoader.isVirtualSensorValid(VSensorConfig configuration)", "testcase": false, "constructor": false}, {"identifier": "isValidJavaIdentifier", "parameters": "(final String name)", "modifiers": "static protected", "return": "boolean", "signature": "boolean isValidJavaIdentifier(final String name)", "full_signature": "static protected boolean isValidJavaIdentifier(final String name)", "class_method_signature": "VSensorLoader.isValidJavaIdentifier(final String name)", "testcase": false, "constructor": false}, {"identifier": "removeAllVSResources", "parameters": "( VirtualSensor pool )", "modifiers": "public", "return": "void", "signature": "void removeAllVSResources( VirtualSensor pool )", "full_signature": "public void removeAllVSResources( VirtualSensor pool )", "class_method_signature": "VSensorLoader.removeAllVSResources( VirtualSensor pool )", "testcase": false, "constructor": false}, {"identifier": "releaseStreamSource", "parameters": "(StreamSource streamSource)", "modifiers": "public", "return": "void", "signature": "void releaseStreamSource(StreamSource streamSource)", "full_signature": "public void releaseStreamSource(StreamSource streamSource)", "class_method_signature": "VSensorLoader.releaseStreamSource(StreamSource streamSource)", "testcase": false, "constructor": false}, {"identifier": "getUpdateStatus", "parameters": "(String virtualSensorsPath)", "modifiers": "public static", "return": "Modifications", "signature": "Modifications getUpdateStatus(String virtualSensorsPath)", "full_signature": "public static Modifications getUpdateStatus(String virtualSensorsPath)", "class_method_signature": "VSensorLoader.getUpdateStatus(String virtualSensorsPath)", "testcase": false, "constructor": false}, {"identifier": "getUpdateStatus", "parameters": "(String virtualSensorsPath, String filterFileName)", "modifiers": "public static", "return": "Modifications", "signature": "Modifications getUpdateStatus(String virtualSensorsPath, String filterFileName)", "full_signature": "public static Modifications getUpdateStatus(String virtualSensorsPath, String filterFileName)", "class_method_signature": "VSensorLoader.getUpdateStatus(String virtualSensorsPath, String filterFileName)", "testcase": false, "constructor": false}, {"identifier": "createInputStreams", "parameters": "( VirtualSensor pool )", "modifiers": "public", "return": "boolean", "signature": "boolean createInputStreams( VirtualSensor pool )", "full_signature": "public boolean createInputStreams( VirtualSensor pool )", "class_method_signature": "VSensorLoader.createInputStreams( VirtualSensor pool )", "testcase": false, "constructor": false}, {"identifier": "findWrapper", "parameters": "(AddressBean addressBean)", "modifiers": "public", "return": "AbstractWrapper", "signature": "AbstractWrapper findWrapper(AddressBean addressBean)", "full_signature": "public AbstractWrapper findWrapper(AddressBean addressBean)", "class_method_signature": "VSensorLoader.findWrapper(AddressBean addressBean)", "testcase": false, "constructor": false}, {"identifier": "prepareStreamSource", "parameters": "( VSensorConfig vsensorConfig,InputStream inputStream , StreamSource streamSource  )", "modifiers": "public", "return": "boolean", "signature": "boolean prepareStreamSource( VSensorConfig vsensorConfig,InputStream inputStream , StreamSource streamSource  )", "full_signature": "public boolean prepareStreamSource( VSensorConfig vsensorConfig,InputStream inputStream , StreamSource streamSource  )", "class_method_signature": "VSensorLoader.prepareStreamSource( VSensorConfig vsensorConfig,InputStream inputStream , StreamSource streamSource  )", "testcase": false, "constructor": false}, {"identifier": "prepareStreamSource", "parameters": "( StreamSource streamSource ,DataField[] outputformat, AbstractWrapper wrapper )", "modifiers": "public", "return": "boolean", "signature": "boolean prepareStreamSource( StreamSource streamSource ,DataField[] outputformat, AbstractWrapper wrapper )", "full_signature": "public boolean prepareStreamSource( StreamSource streamSource ,DataField[] outputformat, AbstractWrapper wrapper )", "class_method_signature": "VSensorLoader.prepareStreamSource( StreamSource streamSource ,DataField[] outputformat, AbstractWrapper wrapper )", "testcase": false, "constructor": false}, {"identifier": "stopLoading", "parameters": "( )", "modifiers": "public", "return": "void", "signature": "void stopLoading( )", "full_signature": "public void stopLoading( )", "class_method_signature": "VSensorLoader.stopLoading( )", "testcase": false, "constructor": false}], "file": "modules/x-gsn/src/main/java/org/openiot/gsn/VSensorLoader.java"}, "focal_method": {"identifier": "stopLoading", "parameters": "( )", "modifiers": "public", "return": "void", "body": "public void stopLoading ( ) {\n        this.isActive = false;\n        this.interrupt ( );\n        for ( String configFile : Mappings.getAllKnownFileName ( ) ) {\n            VirtualSensor sensorInstance = Mappings.getVSensorInstanceByFileName ( configFile );\n            removeAllVSResources ( sensorInstance );\n            logger.warn ( \"Removing the resources associated with : \" + sensorInstance.getConfig ( ).getFileName ( ) + \" [done].\" );\n        }\n        try {\n            Main.getWindowStorage().shutdown( );\n            Iterator<VSensorConfig> iter = Mappings.getAllVSensorConfigs();\n            while (iter.hasNext()) {\n                Main.getStorage(iter.next()).shutdown();\n            }\n        } catch ( SQLException e ) {\n            logger.error(e.getMessage(),e);\n        }finally {\n            System.exit(0);\n        }\n    }", "signature": "void stopLoading( )", "full_signature": "public void stopLoading( )", "class_method_signature": "VSensorLoader.stopLoading( )", "testcase": false, "constructor": false, "invocations": ["interrupt", "getAllKnownFileName", "getVSensorInstanceByFileName", "removeAllVSResources", "warn", "getFileName", "getConfig", "shutdown", "getWindowStorage", "getAllVSensorConfigs", "hasNext", "shutdown", "getStorage", "next", "error", "getMessage", "exit"]}, "repository": {"repo_id": 9221446, "url": "https://github.com/OpenIotOrg/openiot", "language": "Java", "is_fork": false, "fork_count": 201, "stargazer_count": 417, "size": 101270, "license": "licensed"}}