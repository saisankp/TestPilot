{"test_class": {"identifier": "AccessLogFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Filter accessLogFilter = new AccessLogFilter();", "modifier": "", "type": "Filter", "declarator": "accessLogFilter = new AccessLogFilter()", "var_name": "accessLogFilter"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/AccessLogFilterTest.java"}, "test_case": {"identifier": "testInvokeException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvokeException() {\n        Invoker<AccessLogFilterTest> invoker = new MyInvoker<AccessLogFilterTest>(null);\n        Invocation invocation = new MockInvocation();\n        LogUtil.start();\n        accessLogFilter.invoke(invoker, invocation);\n        assertEquals(1, LogUtil.findMessage(\"Exception in AccessLogFilter of service\"));\n        LogUtil.stop();\n    }", "signature": "void testInvokeException()", "full_signature": "@Test public void testInvokeException()", "class_method_signature": "AccessLogFilterTest.testInvokeException()", "testcase": true, "constructor": false, "invocations": ["start", "invoke", "assertEquals", "findMessage", "stop"]}, "focal_class": {"identifier": "AccessLogFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AccessLogFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AccessLogFilter.class)", "var_name": "logger"}, {"original_string": "private static final String LOG_KEY = \"dubbo.accesslog\";", "modifier": "private static final", "type": "String", "declarator": "LOG_KEY = \"dubbo.accesslog\"", "var_name": "LOG_KEY"}, {"original_string": "private static final int LOG_MAX_BUFFER = 5000;", "modifier": "private static final", "type": "int", "declarator": "LOG_MAX_BUFFER = 5000", "var_name": "LOG_MAX_BUFFER"}, {"original_string": "private static final long LOG_OUTPUT_INTERVAL = 5000;", "modifier": "private static final", "type": "long", "declarator": "LOG_OUTPUT_INTERVAL = 5000", "var_name": "LOG_OUTPUT_INTERVAL"}, {"original_string": "private static final String FILE_DATE_FORMAT = \"yyyyMMdd\";", "modifier": "private static final", "type": "String", "declarator": "FILE_DATE_FORMAT = \"yyyyMMdd\"", "var_name": "FILE_DATE_FORMAT"}, {"original_string": "private static final DateFormat FILE_NAME_FORMATTER = new SimpleDateFormat(FILE_DATE_FORMAT);", "modifier": "private static final", "type": "DateFormat", "declarator": "FILE_NAME_FORMATTER = new SimpleDateFormat(FILE_DATE_FORMAT)", "var_name": "FILE_NAME_FORMATTER"}, {"original_string": "private static final Map<String, Set<AccessLogData>> LOG_ENTRIES = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "Map<String, Set<AccessLogData>>", "declarator": "LOG_ENTRIES = new ConcurrentHashMap<>()", "var_name": "LOG_ENTRIES"}, {"original_string": "private static final ScheduledExecutorService LOG_SCHEDULED = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"Dubbo-Access-Log\", true));", "modifier": "private static final", "type": "ScheduledExecutorService", "declarator": "LOG_SCHEDULED = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"Dubbo-Access-Log\", true))", "var_name": "LOG_SCHEDULED"}], "methods": [{"identifier": "AccessLogFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " AccessLogFilter()", "full_signature": "public  AccessLogFilter()", "class_method_signature": "AccessLogFilter.AccessLogFilter()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation inv)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation inv)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation inv)", "class_method_signature": "AccessLogFilter.invoke(Invoker<?> invoker, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(String accessLog, AccessLogData accessLogData)", "modifiers": "private", "return": "void", "signature": "void log(String accessLog, AccessLogData accessLogData)", "full_signature": "private void log(String accessLog, AccessLogData accessLogData)", "class_method_signature": "AccessLogFilter.log(String accessLog, AccessLogData accessLogData)", "testcase": false, "constructor": false}, {"identifier": "writeLogSetToFile", "parameters": "(String accessLog, Set<AccessLogData> logSet)", "modifiers": "private", "return": "void", "signature": "void writeLogSetToFile(String accessLog, Set<AccessLogData> logSet)", "full_signature": "private void writeLogSetToFile(String accessLog, Set<AccessLogData> logSet)", "class_method_signature": "AccessLogFilter.writeLogSetToFile(String accessLog, Set<AccessLogData> logSet)", "testcase": false, "constructor": false}, {"identifier": "writeLogToFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void writeLogToFile()", "full_signature": "private void writeLogToFile()", "class_method_signature": "AccessLogFilter.writeLogToFile()", "testcase": false, "constructor": false}, {"identifier": "processWithAccessKeyLogger", "parameters": "(Set<AccessLogData> logSet, File file)", "modifiers": "private", "return": "void", "signature": "void processWithAccessKeyLogger(Set<AccessLogData> logSet, File file)", "full_signature": "private void processWithAccessKeyLogger(Set<AccessLogData> logSet, File file)", "class_method_signature": "AccessLogFilter.processWithAccessKeyLogger(Set<AccessLogData> logSet, File file)", "testcase": false, "constructor": false}, {"identifier": "buildAccessLogData", "parameters": "(Invoker<?> invoker, Invocation inv)", "modifiers": "private", "return": "AccessLogData", "signature": "AccessLogData buildAccessLogData(Invoker<?> invoker, Invocation inv)", "full_signature": "private AccessLogData buildAccessLogData(Invoker<?> invoker, Invocation inv)", "class_method_signature": "AccessLogFilter.buildAccessLogData(Invoker<?> invoker, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "processWithServiceLogger", "parameters": "(Set<AccessLogData> logSet)", "modifiers": "private", "return": "void", "signature": "void processWithServiceLogger(Set<AccessLogData> logSet)", "full_signature": "private void processWithServiceLogger(Set<AccessLogData> logSet)", "class_method_signature": "AccessLogFilter.processWithServiceLogger(Set<AccessLogData> logSet)", "testcase": false, "constructor": false}, {"identifier": "createIfLogDirAbsent", "parameters": "(File file)", "modifiers": "private", "return": "void", "signature": "void createIfLogDirAbsent(File file)", "full_signature": "private void createIfLogDirAbsent(File file)", "class_method_signature": "AccessLogFilter.createIfLogDirAbsent(File file)", "testcase": false, "constructor": false}, {"identifier": "renameFile", "parameters": "(File file)", "modifiers": "private", "return": "void", "signature": "void renameFile(File file)", "full_signature": "private void renameFile(File file)", "class_method_signature": "AccessLogFilter.renameFile(File file)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/AccessLogFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation inv)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {\n        try {\n            String accessLogKey = invoker.getUrl().getParameter(ACCESS_LOG_KEY);\n            if (ConfigUtils.isNotEmpty(accessLogKey)) {\n                AccessLogData logData = buildAccessLogData(invoker, inv);\n                log(accessLogKey, logData);\n            }\n        } catch (Throwable t) {\n            logger.warn(\"Exception in AccessLogFilter of service(\" + invoker + \" -> \" + inv + \")\", t);\n        }\n        return invoker.invoke(inv);\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation inv)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation inv)", "class_method_signature": "AccessLogFilter.invoke(Invoker<?> invoker, Invocation inv)", "testcase": false, "constructor": false, "invocations": ["getParameter", "getUrl", "isNotEmpty", "buildAccessLogData", "log", "warn", "invoke"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}