{"test_class": {"identifier": "FetchDataUseCaseTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_DATA = \"testData\";", "modifier": "private static final", "type": "String", "declarator": "TEST_DATA = \"testData\"", "var_name": "TEST_DATA"}, {"original_string": "private ThreadPostersTestDouble mThreadPostersTestDouble;", "modifier": "private", "type": "ThreadPostersTestDouble", "declarator": "mThreadPostersTestDouble", "var_name": "mThreadPostersTestDouble"}, {"original_string": "private FakeDataFetcher mFakeDataFetcherMock;", "modifier": "private", "type": "FakeDataFetcher", "declarator": "mFakeDataFetcherMock", "var_name": "mFakeDataFetcherMock"}, {"original_string": "private FetchDataUseCase.Listener mListener1;", "modifier": "private", "type": "FetchDataUseCase.Listener", "declarator": "mListener1", "var_name": "mListener1"}, {"original_string": "private FetchDataUseCase.Listener mListener2;", "modifier": "private", "type": "FetchDataUseCase.Listener", "declarator": "mListener2", "var_name": "mListener2"}, {"original_string": "private FetchDataUseCase SUT;", "modifier": "private", "type": "FetchDataUseCase", "declarator": "SUT", "var_name": "SUT"}], "file": "sample/src/test/java/com/techyourchance/threadposters/FetchDataUseCaseTest.java"}, "test_case": {"identifier": "fetchData_successNoListeners_completesWithoutErrors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fetchData_successNoListeners_completesWithoutErrors() throws Exception {\n        // Arrange\n        success();\n        // Act\n        SUT.fetchData();\n        // Assert\n\n        // needs to be called before assertions in order for all threads to complete and\n        // all side effects to be present\n        mThreadPostersTestDouble.join();\n\n        assertThat(true, is(true));\n    }", "signature": "void fetchData_successNoListeners_completesWithoutErrors()", "full_signature": "@Test public void fetchData_successNoListeners_completesWithoutErrors()", "class_method_signature": "FetchDataUseCaseTest.fetchData_successNoListeners_completesWithoutErrors()", "testcase": true, "constructor": false, "invocations": ["success", "fetchData", "join", "assertThat", "is"]}, "focal_class": {"identifier": "FetchDataUseCase", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FakeDataFetcher mFakeDataFetcher;", "modifier": "private final", "type": "FakeDataFetcher", "declarator": "mFakeDataFetcher", "var_name": "mFakeDataFetcher"}, {"original_string": "private final BackgroundThreadPoster mBackgroundThreadPoster;", "modifier": "private final", "type": "BackgroundThreadPoster", "declarator": "mBackgroundThreadPoster", "var_name": "mBackgroundThreadPoster"}, {"original_string": "private final UiThreadPoster mUiThreadPoster;", "modifier": "private final", "type": "UiThreadPoster", "declarator": "mUiThreadPoster", "var_name": "mUiThreadPoster"}, {"original_string": "private final Set<Listener> mListeners = Collections.newSetFromMap(\n            new ConcurrentHashMap<Listener, Boolean>());", "modifier": "private final", "type": "Set<Listener>", "declarator": "mListeners = Collections.newSetFromMap(\n            new ConcurrentHashMap<Listener, Boolean>())", "var_name": "mListeners"}], "methods": [{"identifier": "FetchDataUseCase", "parameters": "(FakeDataFetcher fakeDataFetcher,\n                            BackgroundThreadPoster backgroundThreadPoster,\n                            UiThreadPoster uiThreadPoster)", "modifiers": "public", "return": "", "signature": " FetchDataUseCase(FakeDataFetcher fakeDataFetcher,\n                            BackgroundThreadPoster backgroundThreadPoster,\n                            UiThreadPoster uiThreadPoster)", "full_signature": "public  FetchDataUseCase(FakeDataFetcher fakeDataFetcher,\n                            BackgroundThreadPoster backgroundThreadPoster,\n                            UiThreadPoster uiThreadPoster)", "class_method_signature": "FetchDataUseCase.FetchDataUseCase(FakeDataFetcher fakeDataFetcher,\n                            BackgroundThreadPoster backgroundThreadPoster,\n                            UiThreadPoster uiThreadPoster)", "testcase": false, "constructor": true}, {"identifier": "registerListener", "parameters": "(Listener listener)", "modifiers": "public", "return": "void", "signature": "void registerListener(Listener listener)", "full_signature": "public void registerListener(Listener listener)", "class_method_signature": "FetchDataUseCase.registerListener(Listener listener)", "testcase": false, "constructor": false}, {"identifier": "unregisterListener", "parameters": "(Listener listener)", "modifiers": "public", "return": "void", "signature": "void unregisterListener(Listener listener)", "full_signature": "public void unregisterListener(Listener listener)", "class_method_signature": "FetchDataUseCase.unregisterListener(Listener listener)", "testcase": false, "constructor": false}, {"identifier": "fetchData", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void fetchData()", "full_signature": "public void fetchData()", "class_method_signature": "FetchDataUseCase.fetchData()", "testcase": false, "constructor": false}, {"identifier": "fetchDataSync", "parameters": "()", "modifiers": "@WorkerThread private", "return": "void", "signature": "void fetchDataSync()", "full_signature": "@WorkerThread private void fetchDataSync()", "class_method_signature": "FetchDataUseCase.fetchDataSync()", "testcase": false, "constructor": false}, {"identifier": "notifyFailure", "parameters": "()", "modifiers": "@UiThread private", "return": "void", "signature": "void notifyFailure()", "full_signature": "@UiThread private void notifyFailure()", "class_method_signature": "FetchDataUseCase.notifyFailure()", "testcase": false, "constructor": false}, {"identifier": "notifySuccess", "parameters": "(String data)", "modifiers": "@UiThread private", "return": "void", "signature": "void notifySuccess(String data)", "full_signature": "@UiThread private void notifySuccess(String data)", "class_method_signature": "FetchDataUseCase.notifySuccess(String data)", "testcase": false, "constructor": false}], "file": "sample/src/main/java/com/techyourchance/threadposters/FetchDataUseCase.java"}, "focal_method": {"identifier": "fetchData", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void fetchData() {\n        // offload work to background thread\n        mBackgroundThreadPoster.post(new Runnable() {\n            @Override\n            public void run() {\n                fetchDataSync();\n            }\n        });\n    }", "signature": "void fetchData()", "full_signature": "public void fetchData()", "class_method_signature": "FetchDataUseCase.fetchData()", "testcase": false, "constructor": false, "invocations": ["post", "fetchDataSync"]}, "repository": {"repo_id": 104691408, "url": "https://github.com/techyourchance/thread-poster", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 74, "size": 189, "license": "licensed"}}