{"test_class": {"identifier": "JsonParameterMetadataSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JsonParameterMetadataSerializer serializer;", "modifier": "private", "type": "JsonParameterMetadataSerializer", "declarator": "serializer", "var_name": "serializer"}], "file": "smartparam-serializer/src/test/java/org/smartparam/serializer/metadata/JsonParameterMetadataSerializerTest.java"}, "test_case": {"identifier": "shouldSerializeParameterMetadataWithoutEntriesToJSON", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSerializeParameterMetadataWithoutEntriesToJSON() {\n        // given\n        Level[] levels = new Level[]{\n            level().withName(\"level1\").build(),\n            level().withName(\"level2\").build()\n        };\n        ParameterEntry[] entries = new ParameterEntry[]{\n            parameterEntry().withLevels(\"1\").build()\n        };\n        Parameter parameter = parameter().withName(\"parameter\").withInputLevels(3)\n                .withLevels(levels).withEntries(entries)\n                .build();\n        StringWriter output = new StringWriter();\n\n        // when\n        serializer.serialize(parameter, output);\n        output.flush();\n\n        // then\n        assertThat(output.toString()).isNotEmpty().contains(\"levels\").contains(\"parameter\")\n                .doesNotContain(\"entries\");\n    }", "signature": "void shouldSerializeParameterMetadataWithoutEntriesToJSON()", "full_signature": "@Test public void shouldSerializeParameterMetadataWithoutEntriesToJSON()", "class_method_signature": "JsonParameterMetadataSerializerTest.shouldSerializeParameterMetadataWithoutEntriesToJSON()", "testcase": true, "constructor": false, "invocations": ["build", "withName", "level", "build", "withName", "level", "build", "withLevels", "parameterEntry", "build", "withEntries", "withLevels", "withInputLevels", "withName", "parameter", "serialize", "flush", "doesNotContain", "contains", "contains", "isNotEmpty", "assertThat", "toString"]}, "focal_class": {"identifier": "JsonParameterMetadataSerializer", "superclass": "", "interfaces": "implements ParameterMetadataSerializer", "fields": [{"original_string": "private static final String[] IGNORED_PROPERTIES = new String[]{\"entries\"};", "modifier": "private static final", "type": "String[]", "declarator": "IGNORED_PROPERTIES = new String[]{\"entries\"}", "var_name": "IGNORED_PROPERTIES"}, {"original_string": "private final Gson gson;", "modifier": "private final", "type": "Gson", "declarator": "gson", "var_name": "gson"}], "methods": [{"identifier": "JsonParameterMetadataSerializer", "parameters": "()", "modifiers": "public", "return": "", "signature": " JsonParameterMetadataSerializer()", "full_signature": "public  JsonParameterMetadataSerializer()", "class_method_signature": "JsonParameterMetadataSerializer.JsonParameterMetadataSerializer()", "testcase": false, "constructor": true}, {"identifier": "serialize", "parameters": "(Parameter parameter, Writer writer)", "modifiers": "@Override public", "return": "void", "signature": "void serialize(Parameter parameter, Writer writer)", "full_signature": "@Override public void serialize(Parameter parameter, Writer writer)", "class_method_signature": "JsonParameterMetadataSerializer.serialize(Parameter parameter, Writer writer)", "testcase": false, "constructor": false}], "file": "smartparam-serializer/src/main/java/org/smartparam/serializer/metadata/JsonParameterMetadataSerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(Parameter parameter, Writer writer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void serialize(Parameter parameter, Writer writer) {\n        gson.toJson(new DeserializedParameter(parameter), writer);\n    }", "signature": "void serialize(Parameter parameter, Writer writer)", "full_signature": "@Override public void serialize(Parameter parameter, Writer writer)", "class_method_signature": "JsonParameterMetadataSerializer.serialize(Parameter parameter, Writer writer)", "testcase": false, "constructor": false, "invocations": ["toJson"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}