{"test_class": {"identifier": "MultiThreadedActorsTest", "superclass": "extends ActorsContract<MultiThreadedActors>", "interfaces": "", "fields": [{"original_string": "private final ExecutorService executor = Executors.newCachedThreadPool();", "modifier": "private final", "type": "ExecutorService", "declarator": "executor = Executors.newCachedThreadPool()", "var_name": "executor"}], "file": "jumi-actors/src/test/java/fi/jumi/actors/MultiThreadedActorsTest.java"}, "test_case": {"identifier": "actor_threads_are_backed_by_real_threads", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void actor_threads_are_backed_by_real_threads() throws InterruptedException {\n        SpyDummyListener rawActor = new SpyDummyListener();\n\n        ActorThread actorThread = actors.startActorThread();\n        ActorRef<DummyListener> actorRef = actorThread.bindActor(DummyListener.class, rawActor);\n        actorRef.tell().onSomething(\"event\");\n        awaitEvents(1);\n\n        assertThat(rawActor.thread, is(notNullValue()));\n        assertThat(rawActor.thread, is(not(Thread.currentThread())));\n    }", "signature": "void actor_threads_are_backed_by_real_threads()", "full_signature": "@Test public void actor_threads_are_backed_by_real_threads()", "class_method_signature": "MultiThreadedActorsTest.actor_threads_are_backed_by_real_threads()", "testcase": true, "constructor": false, "invocations": ["startActorThread", "bindActor", "onSomething", "tell", "awaitEvents", "assertThat", "is", "notNullValue", "assertThat", "is", "not", "currentThread"]}, "focal_class": {"identifier": "MultiThreadedActors", "superclass": "extends Actors", "interfaces": "", "fields": [{"original_string": "private final Executor executor;", "modifier": "private final", "type": "Executor", "declarator": "executor", "var_name": "executor"}], "methods": [{"identifier": "MultiThreadedActors", "parameters": "(Executor executor, EventizerProvider eventizerProvider, FailureHandler failureHandler, MessageListener messageListener)", "modifiers": "public", "return": "", "signature": " MultiThreadedActors(Executor executor, EventizerProvider eventizerProvider, FailureHandler failureHandler, MessageListener messageListener)", "full_signature": "public  MultiThreadedActors(Executor executor, EventizerProvider eventizerProvider, FailureHandler failureHandler, MessageListener messageListener)", "class_method_signature": "MultiThreadedActors.MultiThreadedActors(Executor executor, EventizerProvider eventizerProvider, FailureHandler failureHandler, MessageListener messageListener)", "testcase": false, "constructor": true}, {"identifier": "startActorThread", "parameters": "(MessageProcessor actorThread)", "modifiers": "@Override", "return": "void", "signature": "void startActorThread(MessageProcessor actorThread)", "full_signature": "@Override void startActorThread(MessageProcessor actorThread)", "class_method_signature": "MultiThreadedActors.startActorThread(MessageProcessor actorThread)", "testcase": false, "constructor": false}], "file": "jumi-actors/src/main/java/fi/jumi/actors/MultiThreadedActors.java"}, "focal_method": {"identifier": "startActorThread", "parameters": "(MessageProcessor actorThread)", "modifiers": "@Override", "return": "void", "body": "@Override\n    void startActorThread(MessageProcessor actorThread) {\n        executor.execute(new BlockingActorProcessor(actorThread));\n    }", "signature": "void startActorThread(MessageProcessor actorThread)", "full_signature": "@Override void startActorThread(MessageProcessor actorThread)", "class_method_signature": "MultiThreadedActors.startActorThread(MessageProcessor actorThread)", "testcase": false, "constructor": false, "invocations": ["execute"]}, "repository": {"repo_id": 6426667, "url": "https://github.com/luontola/jumi-actors", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 78, "size": 2989, "license": "licensed"}}