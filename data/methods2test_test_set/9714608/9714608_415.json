{"test_class": {"identifier": "MultiAttributeProviderTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "private MultiAttributeProvider container;", "modifier": "private", "type": "MultiAttributeProvider", "declarator": "container", "var_name": "container"}, {"original_string": "private HeapAttributeCollection subcontainer1;", "modifier": "private", "type": "HeapAttributeCollection", "declarator": "subcontainer1", "var_name": "subcontainer1"}, {"original_string": "private HeapAttributeCollection subcontainer2;", "modifier": "private", "type": "HeapAttributeCollection", "declarator": "subcontainer2", "var_name": "subcontainer2"}, {"original_string": "private HeapAttributeCollection subcontainer3;", "modifier": "private", "type": "HeapAttributeCollection", "declarator": "subcontainer3", "var_name": "subcontainer3"}], "file": "advanced/attributes/src/test/java/org/arakhne/afc/attrs/collection/MultiAttributeProviderTest.java"}, "test_case": {"identifier": "testGetAllAttributesByType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetAllAttributesByType() {\n\t\tMap<AttributeType,Collection<Attribute>> attrsbytype = this.container.getAllAttributesByType();\n\t\tassertNotNull(attrsbytype);\n\t\tassertEquals(5, attrsbytype.size());\n\t\t\n\t\tCollection<Attribute> attrs;\n\t\t\n\t\tattrs = attrsbytype.get(AttributeType.BOOLEAN);\n\t\tassertNotNull(attrs);\n\t\tassertEquals(1, attrs.size());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tmakeUninitialized(\"A\", AttributeType.BOOLEAN)  //$NON-NLS-1$\n\t\t), attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.DATE);\n\t\tassertNull(attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.INTEGER);\n\t\tassertNotNull(attrs);\n\t\tassertEquals(1, attrs.size());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tnew AttributeImpl(\"B\", 1)  //$NON-NLS-1$\n\t\t), attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.OBJECT);\n\t\tassertNotNull(attrs);\n\t\tassertEquals(1, attrs.size());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tmakeUninitialized(\"E\", AttributeType.OBJECT)  //$NON-NLS-1$\n\t\t), attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.POINT);\n\t\tassertNull(attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.POINT3D);\n\t\tassertNull(attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.POLYLINE);\n\t\tassertNull(attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.POLYLINE3D);\n\t\tassertNull(attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.REAL);\n\t\tassertNull(attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.STRING);\n\t\tassertNotNull(attrs);\n\t\tassertEquals(4, attrs.size());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tmakeUninitialized(\"D\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"Z1\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"Z2\", AttributeType.STRING),  //$NON-NLS-1$\n\t\t\t\tmakeUninitialized(\"Z3\", AttributeType.STRING)  //$NON-NLS-1$\n\t\t), attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.TIMESTAMP);\n\t\tassertNull(attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.URI);\n\t\tassertNull(attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.URL);\n\t\tassertNotNull(attrs);\n\t\tassertEquals(1, attrs.size());\n\t\tassertEpsilonEquals(Arrays.asList(\n\t\t\t\tmakeUninitialized(\"C\", AttributeType.URL)  //$NON-NLS-1$\n\t\t), attrs);\n\n\t\tattrs = attrsbytype.get(AttributeType.UUID);\n\t\tassertNull(attrs);\n\t}", "signature": "void testGetAllAttributesByType()", "full_signature": "@Test public void testGetAllAttributesByType()", "class_method_signature": "MultiAttributeProviderTest.testGetAllAttributesByType()", "testcase": true, "constructor": false, "invocations": ["getAllAttributesByType", "assertNotNull", "assertEquals", "size", "get", "assertNotNull", "assertEquals", "size", "assertEpsilonEquals", "asList", "makeUninitialized", "get", "assertNull", "get", "assertNotNull", "assertEquals", "size", "assertEpsilonEquals", "asList", "get", "assertNotNull", "assertEquals", "size", "assertEpsilonEquals", "asList", "makeUninitialized", "get", "assertNull", "get", "assertNull", "get", "assertNull", "get", "assertNull", "get", "assertNull", "get", "assertNotNull", "assertEquals", "size", "assertEpsilonEquals", "asList", "makeUninitialized", "makeUninitialized", "makeUninitialized", "makeUninitialized", "get", "assertNull", "get", "assertNull", "get", "assertNotNull", "assertEquals", "size", "assertEpsilonEquals", "asList", "makeUninitialized", "get", "assertNull"]}, "focal_class": {"identifier": "MultiAttributeProvider", "superclass": "extends AbstractAttributeProvider", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -2673023673767450220L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2673023673767450220L", "var_name": "serialVersionUID"}, {"original_string": "transient Map<String, AttributeValue> cache = new SoftValueTreeMap<>();", "modifier": "transient", "type": "Map<String, AttributeValue>", "declarator": "cache = new SoftValueTreeMap<>()", "var_name": "cache"}, {"original_string": "Set<String> names;", "modifier": "", "type": "Set<String>", "declarator": "names", "var_name": "names"}, {"original_string": "private Collection<AttributeProvider> containers = new ArrayList<>();", "modifier": "private", "type": "Collection<AttributeProvider>", "declarator": "containers = new ArrayList<>()", "var_name": "containers"}], "methods": [{"identifier": "toMap", "parameters": "(Map<String, Object> mapToFill)", "modifiers": "@Override public", "return": "void", "signature": "void toMap(Map<String, Object> mapToFill)", "full_signature": "@Override public void toMap(Map<String, Object> mapToFill)", "class_method_signature": "MultiAttributeProvider.toMap(Map<String, Object> mapToFill)", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(String name)", "modifiers": "private", "return": "Attribute", "signature": "Attribute extract(String name)", "full_signature": "private Attribute extract(String name)", "class_method_signature": "MultiAttributeProvider.extract(String name)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(ManyValueAttributeValue v1, AttributeValue v2)", "modifiers": "static", "return": "void", "signature": "void assign(ManyValueAttributeValue v1, AttributeValue v2)", "full_signature": "static void assign(ManyValueAttributeValue v1, AttributeValue v2)", "class_method_signature": "MultiAttributeProvider.assign(ManyValueAttributeValue v1, AttributeValue v2)", "testcase": false, "constructor": false}, {"identifier": "canonize", "parameters": "(ManyValueAttributeValue v)", "modifiers": "static", "return": "AttributeValue", "signature": "AttributeValue canonize(ManyValueAttributeValue v)", "full_signature": "static AttributeValue canonize(ManyValueAttributeValue v)", "class_method_signature": "MultiAttributeProvider.canonize(ManyValueAttributeValue v)", "testcase": false, "constructor": false}, {"identifier": "containers", "parameters": "()", "modifiers": "@Pure protected", "return": "Collection<AttributeProvider>", "signature": "Collection<AttributeProvider> containers()", "full_signature": "@Pure protected Collection<AttributeProvider> containers()", "class_method_signature": "MultiAttributeProvider.containers()", "testcase": false, "constructor": false}, {"identifier": "addAttributeContainer", "parameters": "(AttributeProvider container)", "modifiers": "public", "return": "boolean", "signature": "boolean addAttributeContainer(AttributeProvider container)", "full_signature": "public boolean addAttributeContainer(AttributeProvider container)", "class_method_signature": "MultiAttributeProvider.addAttributeContainer(AttributeProvider container)", "testcase": false, "constructor": false}, {"identifier": "removeAttributeContainer", "parameters": "(AttributeProvider container)", "modifiers": "public", "return": "boolean", "signature": "boolean removeAttributeContainer(AttributeProvider container)", "full_signature": "public boolean removeAttributeContainer(AttributeProvider container)", "class_method_signature": "MultiAttributeProvider.removeAttributeContainer(AttributeProvider container)", "testcase": false, "constructor": false}, {"identifier": "getAttributeContainerCount", "parameters": "()", "modifiers": "@Pure public", "return": "int", "signature": "int getAttributeContainerCount()", "full_signature": "@Pure public int getAttributeContainerCount()", "class_method_signature": "MultiAttributeProvider.getAttributeContainerCount()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Pure @Override public", "return": "MultiAttributeProvider", "signature": "MultiAttributeProvider clone()", "full_signature": "@Pure @Override public MultiAttributeProvider clone()", "class_method_signature": "MultiAttributeProvider.clone()", "testcase": false, "constructor": false}, {"identifier": "freeMemory", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void freeMemory()", "full_signature": "@Override public void freeMemory()", "class_method_signature": "MultiAttributeProvider.freeMemory()", "testcase": false, "constructor": false}, {"identifier": "getAllAttributes", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Collection<Attribute>", "signature": "Collection<Attribute> getAllAttributes()", "full_signature": "@Pure @Override public Collection<Attribute> getAllAttributes()", "class_method_signature": "MultiAttributeProvider.getAllAttributes()", "testcase": false, "constructor": false}, {"identifier": "getAllAttributesByType", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Map<AttributeType, Collection<Attribute>>", "signature": "Map<AttributeType, Collection<Attribute>> getAllAttributesByType()", "full_signature": "@Pure @Override public Map<AttributeType, Collection<Attribute>> getAllAttributesByType()", "class_method_signature": "MultiAttributeProvider.getAllAttributesByType()", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "AttributeValue", "signature": "AttributeValue getAttribute(String name)", "full_signature": "@Pure @Override public AttributeValue getAttribute(String name)", "class_method_signature": "MultiAttributeProvider.getAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name, AttributeValue defaultValue)", "modifiers": "@Pure @Override public", "return": "AttributeValue", "signature": "AttributeValue getAttribute(String name, AttributeValue defaultValue)", "full_signature": "@Pure @Override public AttributeValue getAttribute(String name, AttributeValue defaultValue)", "class_method_signature": "MultiAttributeProvider.getAttribute(String name, AttributeValue defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAttributeCount", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int getAttributeCount()", "full_signature": "@Pure @Override public int getAttributeCount()", "class_method_signature": "MultiAttributeProvider.getAttributeCount()", "testcase": false, "constructor": false}, {"identifier": "getAllAttributeNames", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Collection<String>", "signature": "Collection<String> getAllAttributeNames()", "full_signature": "@Pure @Override public Collection<String> getAllAttributeNames()", "class_method_signature": "MultiAttributeProvider.getAllAttributeNames()", "testcase": false, "constructor": false}, {"identifier": "getAttributeObject", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "Attribute", "signature": "Attribute getAttributeObject(String name)", "full_signature": "@Pure @Override public Attribute getAttributeObject(String name)", "class_method_signature": "MultiAttributeProvider.getAttributeObject(String name)", "testcase": false, "constructor": false}, {"identifier": "hasAttribute", "parameters": "(String name)", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean hasAttribute(String name)", "full_signature": "@Pure @Override public boolean hasAttribute(String name)", "class_method_signature": "MultiAttributeProvider.hasAttribute(String name)", "testcase": false, "constructor": false}], "file": "advanced/attributes/src/main/java/org/arakhne/afc/attrs/collection/MultiAttributeProvider.java"}, "focal_method": {"identifier": "getAllAttributesByType", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Map<AttributeType, Collection<Attribute>>", "body": "@Pure\n\t@Override\n\tpublic Map<AttributeType, Collection<Attribute>> getAllAttributesByType() {\n\t\tfinal Map<AttributeType, Collection<Attribute>> map = new TreeMap<>();\n\t\tAttribute newAttr;\n\t\tfor (final String name : getAllAttributeNames()) {\n\t\t\tif (name != null) {\n\t\t\t\tnewAttr = extract(name);\n\t\t\t\tif (newAttr != null) {\n\t\t\t\t\tCollection<Attribute> list = map.get(newAttr.getType());\n\t\t\t\t\tif (list == null) {\n\t\t\t\t\t\tlist = new ArrayList<>();\n\t\t\t\t\t\tmap.put(newAttr.getType(), list);\n\t\t\t\t\t}\n\t\t\t\t\tlist.add(newAttr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn map;\n\t}", "signature": "Map<AttributeType, Collection<Attribute>> getAllAttributesByType()", "full_signature": "@Pure @Override public Map<AttributeType, Collection<Attribute>> getAllAttributesByType()", "class_method_signature": "MultiAttributeProvider.getAllAttributesByType()", "testcase": false, "constructor": false, "invocations": ["getAllAttributeNames", "extract", "get", "getType", "put", "getType", "add"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}