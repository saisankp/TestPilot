{"test_class": {"identifier": "EventSourceTopicTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "EventSourceTopic eventSourceTopic;", "modifier": "", "type": "EventSourceTopic", "declarator": "eventSourceTopic", "var_name": "eventSourceTopic"}, {"original_string": "DataBroker dataBrokerMock;", "modifier": "", "type": "DataBroker", "declarator": "dataBrokerMock", "var_name": "dataBrokerMock"}, {"original_string": "EventSourceService eventSourceServiceMock;", "modifier": "", "type": "EventSourceService", "declarator": "eventSourceServiceMock", "var_name": "eventSourceServiceMock"}, {"original_string": "EventSourceTopology eventSourceTopologyMock;", "modifier": "", "type": "EventSourceTopology", "declarator": "eventSourceTopologyMock", "var_name": "eventSourceTopologyMock"}], "file": "opendaylight/md-sal/messagebus-impl/src/test/java/org/opendaylight/controller/messagebus/app/impl/EventSourceTopicTest.java"}, "test_case": {"identifier": "getTopicIdTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getTopicIdTest() {\n        assertNotNull(\"Topic has not been created correctly.\", eventSourceTopic.getTopicId());\n    }", "signature": "void getTopicIdTest()", "full_signature": "@Test public void getTopicIdTest()", "class_method_signature": "EventSourceTopicTest.getTopicIdTest()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getTopicId"]}, "focal_class": {"identifier": "EventSourceTopic", "superclass": "", "interfaces": "implements DataTreeChangeListener<Node>, AutoCloseable", "fields": [{"original_string": "private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(EventSourceTopic.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOG = LoggerFactory.getLogger(EventSourceTopic.class)", "var_name": "LOG"}, {"original_string": "private final NotificationPattern notificationPattern;", "modifier": "private final", "type": "NotificationPattern", "declarator": "notificationPattern", "var_name": "notificationPattern"}, {"original_string": "private final EventSourceService sourceService;", "modifier": "private final", "type": "EventSourceService", "declarator": "sourceService", "var_name": "sourceService"}, {"original_string": "private final Pattern nodeIdPattern;", "modifier": "private final", "type": "Pattern", "declarator": "nodeIdPattern", "var_name": "nodeIdPattern"}, {"original_string": "private final TopicId topicId;", "modifier": "private final", "type": "TopicId", "declarator": "topicId", "var_name": "topicId"}, {"original_string": "private ListenerRegistration<?> listenerRegistration;", "modifier": "private", "type": "ListenerRegistration<?>", "declarator": "listenerRegistration", "var_name": "listenerRegistration"}, {"original_string": "private final CopyOnWriteArraySet<InstanceIdentifier<?>> joinedEventSources = new CopyOnWriteArraySet<>();", "modifier": "private final", "type": "CopyOnWriteArraySet<InstanceIdentifier<?>>", "declarator": "joinedEventSources = new CopyOnWriteArraySet<>()", "var_name": "joinedEventSources"}], "methods": [{"identifier": "create", "parameters": "(final NotificationPattern notificationPattern,\n            final String nodeIdRegexPattern, final EventSourceTopology eventSourceTopology)", "modifiers": "public static", "return": "EventSourceTopic", "signature": "EventSourceTopic create(final NotificationPattern notificationPattern,\n            final String nodeIdRegexPattern, final EventSourceTopology eventSourceTopology)", "full_signature": "public static EventSourceTopic create(final NotificationPattern notificationPattern,\n            final String nodeIdRegexPattern, final EventSourceTopology eventSourceTopology)", "class_method_signature": "EventSourceTopic.create(final NotificationPattern notificationPattern,\n            final String nodeIdRegexPattern, final EventSourceTopology eventSourceTopology)", "testcase": false, "constructor": false}, {"identifier": "EventSourceTopic", "parameters": "(final NotificationPattern notificationPattern, final String nodeIdRegexPattern,\n            final EventSourceService sourceService)", "modifiers": "private", "return": "", "signature": " EventSourceTopic(final NotificationPattern notificationPattern, final String nodeIdRegexPattern,\n            final EventSourceService sourceService)", "full_signature": "private  EventSourceTopic(final NotificationPattern notificationPattern, final String nodeIdRegexPattern,\n            final EventSourceService sourceService)", "class_method_signature": "EventSourceTopic.EventSourceTopic(final NotificationPattern notificationPattern, final String nodeIdRegexPattern,\n            final EventSourceService sourceService)", "testcase": false, "constructor": true}, {"identifier": "getTopicId", "parameters": "()", "modifiers": "public", "return": "TopicId", "signature": "TopicId getTopicId()", "full_signature": "public TopicId getTopicId()", "class_method_signature": "EventSourceTopic.getTopicId()", "testcase": false, "constructor": false}, {"identifier": "onDataTreeChanged", "parameters": "(final Collection<DataTreeModification<Node>> changes)", "modifiers": "@Override public", "return": "void", "signature": "void onDataTreeChanged(final Collection<DataTreeModification<Node>> changes)", "full_signature": "@Override public void onDataTreeChanged(final Collection<DataTreeModification<Node>> changes)", "class_method_signature": "EventSourceTopic.onDataTreeChanged(final Collection<DataTreeModification<Node>> changes)", "testcase": false, "constructor": false}, {"identifier": "notifyNode", "parameters": "(final InstanceIdentifier<?> nodeId)", "modifiers": "public", "return": "void", "signature": "void notifyNode(final InstanceIdentifier<?> nodeId)", "full_signature": "public void notifyNode(final InstanceIdentifier<?> nodeId)", "class_method_signature": "EventSourceTopic.notifyNode(final InstanceIdentifier<?> nodeId)", "testcase": false, "constructor": false}, {"identifier": "notifyExistingNodes", "parameters": "(final EventSourceTopology eventSourceTopology)", "modifiers": "private", "return": "void", "signature": "void notifyExistingNodes(final EventSourceTopology eventSourceTopology)", "full_signature": "private void notifyExistingNodes(final EventSourceTopology eventSourceTopology)", "class_method_signature": "EventSourceTopic.notifyExistingNodes(final EventSourceTopology eventSourceTopology)", "testcase": false, "constructor": false}, {"identifier": "getJoinTopicInputArgument", "parameters": "(final InstanceIdentifier<?> path)", "modifiers": "private", "return": "JoinTopicInput", "signature": "JoinTopicInput getJoinTopicInputArgument(final InstanceIdentifier<?> path)", "full_signature": "private JoinTopicInput getJoinTopicInputArgument(final InstanceIdentifier<?> path)", "class_method_signature": "EventSourceTopic.getJoinTopicInputArgument(final InstanceIdentifier<?> path)", "testcase": false, "constructor": false}, {"identifier": "getNodeIdRegexPattern", "parameters": "()", "modifiers": "public", "return": "Pattern", "signature": "Pattern getNodeIdRegexPattern()", "full_signature": "public Pattern getNodeIdRegexPattern()", "class_method_signature": "EventSourceTopic.getNodeIdRegexPattern()", "testcase": false, "constructor": false}, {"identifier": "getDisJoinTopicInputArgument", "parameters": "(final InstanceIdentifier<?> eventSourceNodeId)", "modifiers": "private", "return": "DisJoinTopicInput", "signature": "DisJoinTopicInput getDisJoinTopicInputArgument(final InstanceIdentifier<?> eventSourceNodeId)", "full_signature": "private DisJoinTopicInput getDisJoinTopicInputArgument(final InstanceIdentifier<?> eventSourceNodeId)", "class_method_signature": "EventSourceTopic.getDisJoinTopicInputArgument(final InstanceIdentifier<?> eventSourceNodeId)", "testcase": false, "constructor": false}, {"identifier": "registerListner", "parameters": "(final EventSourceTopology eventSourceTopology)", "modifiers": "private", "return": "void", "signature": "void registerListner(final EventSourceTopology eventSourceTopology)", "full_signature": "private void registerListner(final EventSourceTopology eventSourceTopology)", "class_method_signature": "EventSourceTopic.registerListner(final EventSourceTopology eventSourceTopology)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "EventSourceTopic.close()", "testcase": false, "constructor": false}, {"identifier": "getUUIDIdent", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String getUUIDIdent()", "full_signature": "private static String getUUIDIdent()", "class_method_signature": "EventSourceTopic.getUUIDIdent()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/messagebus-impl/src/main/java/org/opendaylight/controller/messagebus/app/impl/EventSourceTopic.java"}, "focal_method": {"identifier": "getTopicId", "parameters": "()", "modifiers": "public", "return": "TopicId", "body": "public TopicId getTopicId() {\n        return topicId;\n    }", "signature": "TopicId getTopicId()", "full_signature": "public TopicId getTopicId()", "class_method_signature": "EventSourceTopic.getTopicId()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}