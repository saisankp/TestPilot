{"test_class": {"identifier": "PortfolioControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MockMvc mockMvc;", "modifier": "", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@InjectMocks\n\tPortfolioController controller;", "modifier": "@InjectMocks", "type": "PortfolioController", "declarator": "controller", "var_name": "controller"}, {"original_string": "@Mock\n\tPortfolioService service;", "modifier": "@Mock", "type": "PortfolioService", "declarator": "service", "var_name": "service"}], "file": "portfolio-service/src/test/java/io/pivotal/portfolio/controller/PortfolioControllerTest.java"}, "test_case": {"identifier": "addOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void addOrder() throws Exception {\n\t\twhen(service.addOrder(ServiceTestConfiguration.order()))\n\t\t.thenReturn(ServiceTestConfiguration.order2());\n\nmockMvc.perform(\n\t\tpost(\"/portfolio\")\n\t\t.contentType(MediaType.APPLICATION_JSON)\n\t\t\t\t.content(\n\t\t\t\t\t\tconvertObjectToJson(ServiceTestConfiguration.order())))\n\t\t\t\t\t\t.andExpect(status().isCreated()).andDo(print());\n\n\t}", "signature": "void addOrder()", "full_signature": "@Test public void addOrder()", "class_method_signature": "PortfolioControllerTest.addOrder()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "addOrder", "order", "order2", "andDo", "andExpect", "perform", "content", "contentType", "post", "convertObjectToJson", "order", "isCreated", "status", "print"]}, "focal_class": {"identifier": "PortfolioController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n\t\t\t.getLogger(PortfolioController.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n\t\t\t.getLogger(PortfolioController.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tprivate PortfolioService service;", "modifier": "@Autowired\n\tprivate", "type": "PortfolioService", "declarator": "service", "var_name": "service"}], "methods": [{"identifier": "getPortfolio", "parameters": "(@PathVariable(\"id\") final String userId)", "modifiers": "@RequestMapping(value = \"/portfolio/{id}\", method = RequestMethod.GET) public", "return": "ResponseEntity<Portfolio>", "signature": "ResponseEntity<Portfolio> getPortfolio(@PathVariable(\"id\") final String userId)", "full_signature": "@RequestMapping(value = \"/portfolio/{id}\", method = RequestMethod.GET) public ResponseEntity<Portfolio> getPortfolio(@PathVariable(\"id\") final String userId)", "class_method_signature": "PortfolioController.getPortfolio(@PathVariable(\"id\") final String userId)", "testcase": false, "constructor": false}, {"identifier": "getNoCacheHeaders", "parameters": "()", "modifiers": "private", "return": "HttpHeaders", "signature": "HttpHeaders getNoCacheHeaders()", "full_signature": "private HttpHeaders getNoCacheHeaders()", "class_method_signature": "PortfolioController.getNoCacheHeaders()", "testcase": false, "constructor": false}, {"identifier": "addOrder", "parameters": "(@RequestBody final Order order)", "modifiers": "@RequestMapping(value = \"/portfolio\", method = RequestMethod.POST) public", "return": "ResponseEntity<Order>", "signature": "ResponseEntity<Order> addOrder(@RequestBody final Order order)", "full_signature": "@RequestMapping(value = \"/portfolio\", method = RequestMethod.POST) public ResponseEntity<Order> addOrder(@RequestBody final Order order)", "class_method_signature": "PortfolioController.addOrder(@RequestBody final Order order)", "testcase": false, "constructor": false}], "file": "portfolio-service/src/main/java/io/pivotal/portfolio/controller/PortfolioController.java"}, "focal_method": {"identifier": "addOrder", "parameters": "(@RequestBody final Order order)", "modifiers": "@RequestMapping(value = \"/portfolio\", method = RequestMethod.POST) public", "return": "ResponseEntity<Order>", "body": "@RequestMapping(value = \"/portfolio\", method = RequestMethod.POST)\n\tpublic ResponseEntity<Order> addOrder(@RequestBody final Order order) {\n\t\tlogger.debug(\"Adding Order: \" + order);\n\t\t\n\t\t//TODO: can do a test to ensure userId == order.getUserId();\n\t\t\n\t\tOrder savedOrder = service.addOrder(order);\n\n\t\tlogger.debug(\"Order added: \" + savedOrder);\n\t\tif (savedOrder != null && savedOrder.getOrderId() != null) {\n\t\t\treturn new ResponseEntity<Order>(savedOrder, getNoCacheHeaders(), HttpStatus.CREATED);\n\t\t} else {\n\t\t\tlogger.warn(\"Order not saved: \" + order);\n\t\t\treturn new ResponseEntity<Order>(savedOrder, getNoCacheHeaders(), HttpStatus.INTERNAL_SERVER_ERROR);\n\t\t}\n\t}", "signature": "ResponseEntity<Order> addOrder(@RequestBody final Order order)", "full_signature": "@RequestMapping(value = \"/portfolio\", method = RequestMethod.POST) public ResponseEntity<Order> addOrder(@RequestBody final Order order)", "class_method_signature": "PortfolioController.addOrder(@RequestBody final Order order)", "testcase": false, "constructor": false, "invocations": ["debug", "addOrder", "debug", "getOrderId", "getNoCacheHeaders", "warn", "getNoCacheHeaders"]}, "repository": {"repo_id": 143926791, "url": "https://github.com/Pivotal-Field-Engineering/pivotal-bank-demo", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 35, "size": 45556, "license": "licensed"}}