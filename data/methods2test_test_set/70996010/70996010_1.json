{"test_class": {"identifier": "FileHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Context mockContext;", "modifier": "", "type": "Context", "declarator": "mockContext", "var_name": "mockContext"}, {"original_string": "AssetManager mockAssets;", "modifier": "", "type": "AssetManager", "declarator": "mockAssets", "var_name": "mockAssets"}, {"original_string": "int testResult;", "modifier": "", "type": "int", "declarator": "testResult", "var_name": "testResult"}], "file": "app/src/test/java/org/jak_linux/dns66/FileHelperTest.java"}, "test_case": {"identifier": "testGetItemFile_encodingError", "parameters": "()", "modifiers": "@Test @Ignore(\"The exception throwing does not work\") public", "return": "void", "body": "@Test\n    @Ignore(\"The exception throwing does not work\")\n    public void testGetItemFile_encodingError() throws Exception {\n        File file = new File(\"/dir/\");\n        when(mockContext.getExternalFilesDir(null)).thenReturn(file);\n\n        Configuration.Item item = new Configuration.Item();\n        // Test encoding fails\n        item.location = \"https://example.com/\";\n        assertEquals(new File(\"/dir/https%3A%2F%2Fexample.com%2F\"), FileHelper.getItemFile(mockContext, item));\n\n        // TODO: The following PowerMockito code prints the exception, but does not fail\n        mockStatic(java.net.URLEncoder.class);\n        when(java.net.URLEncoder.encode(anyString(), anyString())).thenThrow(new UnsupportedEncodingException(\"foo\"));\n        assertNull(FileHelper.getItemFile(mockContext, item));\n    }", "signature": "void testGetItemFile_encodingError()", "full_signature": "@Test @Ignore(\"The exception throwing does not work\") public void testGetItemFile_encodingError()", "class_method_signature": "FileHelperTest.testGetItemFile_encodingError()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getExternalFilesDir", "assertEquals", "getItemFile", "mockStatic", "thenThrow", "when", "encode", "anyString", "anyString", "assertNull", "getItemFile"]}, "focal_class": {"identifier": "FileHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "openRead", "parameters": "(Context context, String filename)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream openRead(Context context, String filename)", "full_signature": "public static InputStream openRead(Context context, String filename)", "class_method_signature": "FileHelper.openRead(Context context, String filename)", "testcase": false, "constructor": false}, {"identifier": "openWrite", "parameters": "(Context context, String filename)", "modifiers": "public static", "return": "OutputStream", "signature": "OutputStream openWrite(Context context, String filename)", "full_signature": "public static OutputStream openWrite(Context context, String filename)", "class_method_signature": "FileHelper.openWrite(Context context, String filename)", "testcase": false, "constructor": false}, {"identifier": "readConfigFile", "parameters": "(Context context, String name, boolean defaultsOnly)", "modifiers": "private static", "return": "Configuration", "signature": "Configuration readConfigFile(Context context, String name, boolean defaultsOnly)", "full_signature": "private static Configuration readConfigFile(Context context, String name, boolean defaultsOnly)", "class_method_signature": "FileHelper.readConfigFile(Context context, String name, boolean defaultsOnly)", "testcase": false, "constructor": false}, {"identifier": "loadCurrentSettings", "parameters": "(Context context)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration loadCurrentSettings(Context context)", "full_signature": "public static Configuration loadCurrentSettings(Context context)", "class_method_signature": "FileHelper.loadCurrentSettings(Context context)", "testcase": false, "constructor": false}, {"identifier": "loadPreviousSettings", "parameters": "(Context context)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration loadPreviousSettings(Context context)", "full_signature": "public static Configuration loadPreviousSettings(Context context)", "class_method_signature": "FileHelper.loadPreviousSettings(Context context)", "testcase": false, "constructor": false}, {"identifier": "loadDefaultSettings", "parameters": "(Context context)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration loadDefaultSettings(Context context)", "full_signature": "public static Configuration loadDefaultSettings(Context context)", "class_method_signature": "FileHelper.loadDefaultSettings(Context context)", "testcase": false, "constructor": false}, {"identifier": "writeSettings", "parameters": "(Context context, Configuration config)", "modifiers": "public static", "return": "void", "signature": "void writeSettings(Context context, Configuration config)", "full_signature": "public static void writeSettings(Context context, Configuration config)", "class_method_signature": "FileHelper.writeSettings(Context context, Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getItemFile", "parameters": "(Context context, Configuration.Item item)", "modifiers": "public static", "return": "File", "signature": "File getItemFile(Context context, Configuration.Item item)", "full_signature": "public static File getItemFile(Context context, Configuration.Item item)", "class_method_signature": "FileHelper.getItemFile(Context context, Configuration.Item item)", "testcase": false, "constructor": false}, {"identifier": "openItemFile", "parameters": "(Context context, Configuration.Item item)", "modifiers": "public static", "return": "InputStreamReader", "signature": "InputStreamReader openItemFile(Context context, Configuration.Item item)", "full_signature": "public static InputStreamReader openItemFile(Context context, Configuration.Item item)", "class_method_signature": "FileHelper.openItemFile(Context context, Configuration.Item item)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(StructPollfd[] fds, int timeout)", "modifiers": "public static", "return": "int", "signature": "int poll(StructPollfd[] fds, int timeout)", "full_signature": "public static int poll(StructPollfd[] fds, int timeout)", "class_method_signature": "FileHelper.poll(StructPollfd[] fds, int timeout)", "testcase": false, "constructor": false}, {"identifier": "closeOrWarn", "parameters": "(FileDescriptor fd, String tag, String message)", "modifiers": "public static", "return": "FileDescriptor", "signature": "FileDescriptor closeOrWarn(FileDescriptor fd, String tag, String message)", "full_signature": "public static FileDescriptor closeOrWarn(FileDescriptor fd, String tag, String message)", "class_method_signature": "FileHelper.closeOrWarn(FileDescriptor fd, String tag, String message)", "testcase": false, "constructor": false}, {"identifier": "closeOrWarn", "parameters": "(T fd, String tag, String message)", "modifiers": "public static", "return": "T", "signature": "T closeOrWarn(T fd, String tag, String message)", "full_signature": "public static T closeOrWarn(T fd, String tag, String message)", "class_method_signature": "FileHelper.closeOrWarn(T fd, String tag, String message)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/FileHelper.java"}, "focal_method": {"identifier": "getItemFile", "parameters": "(Context context, Configuration.Item item)", "modifiers": "public static", "return": "File", "body": "public static File getItemFile(Context context, Configuration.Item item) {\n        if (item.isDownloadable()) {\n            try {\n                return new File(context.getExternalFilesDir(null), java.net.URLEncoder.encode(item.location, \"UTF-8\"));\n            } catch (UnsupportedEncodingException e) {\n                e.printStackTrace();\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }", "signature": "File getItemFile(Context context, Configuration.Item item)", "full_signature": "public static File getItemFile(Context context, Configuration.Item item)", "class_method_signature": "FileHelper.getItemFile(Context context, Configuration.Item item)", "testcase": false, "constructor": false, "invocations": ["isDownloadable", "getExternalFilesDir", "encode", "printStackTrace"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}