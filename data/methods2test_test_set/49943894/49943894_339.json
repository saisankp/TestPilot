{"test_class": {"identifier": "RouterDeploymentDefinitionTest", "superclass": "extends RouterDeploymentDefinitionTestBase", "interfaces": "", "fields": [{"original_string": "@Mock\n    protected NetworkVO mockNw;", "modifier": "@Mock\n    protected", "type": "NetworkVO", "declarator": "mockNw", "var_name": "mockNw"}, {"original_string": "protected RouterDeploymentDefinition deployment;", "modifier": "protected", "type": "RouterDeploymentDefinition", "declarator": "deployment", "var_name": "deployment"}], "file": "server/src/test/java/org/cloud/network/router/deployment/RouterDeploymentDefinitionTest.java"}, "test_case": {"identifier": "testListByDataCenterIdVMTypeAndStates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testListByDataCenterIdVMTypeAndStates() {\n        // Prepare\n        final VMInstanceVO vmInstanceVO = mock(VMInstanceVO.class);\n        final SearchBuilder<VMInstanceVO> vmInstanceSearch = mock(SearchBuilder.class);\n        when(mockVmDao.createSearchBuilder()).thenReturn(vmInstanceSearch);\n        when(vmInstanceSearch.entity()).thenReturn(vmInstanceVO);\n        when(vmInstanceVO.getType()).thenReturn(VirtualMachine.Type.Instance);\n        when(vmInstanceVO.getState()).thenReturn(VirtualMachine.State.Stopped);\n        when(vmInstanceVO.getPodIdToDeployIn()).thenReturn(POD_ID1);\n\n        final SearchBuilder<HostPodVO> podIdSearch = mock(SearchBuilder.class);\n        when(mockPodDao.createSearchBuilder()).thenReturn(podIdSearch);\n        final SearchCriteria<HostPodVO> sc = mock(SearchCriteria.class);\n        final HostPodVO hostPodVO = mock(HostPodVO.class);\n        when(podIdSearch.entity()).thenReturn(hostPodVO);\n        when(hostPodVO.getId()).thenReturn(POD_ID1);\n        when(hostPodVO.getDataCenterId()).thenReturn(DATA_CENTER_ID);\n        when(podIdSearch.create()).thenReturn(sc);\n\n        final List<HostPodVO> expectedPods = mock(List.class);\n        when(mockPodDao.search(sc, null)).thenReturn(expectedPods);\n\n        // Execute\n        final List<HostPodVO> pods = deployment.listByDataCenterIdVMTypeAndStates(DATA_CENTER_ID,\n                VirtualMachine.Type.User,\n                VirtualMachine.State.Starting,\n                VirtualMachine.State.Running);\n\n        // Assert\n        assertNotNull(pods);\n        assertEquals(expectedPods, pods);\n        verify(sc, times(1)).setParameters(\"dc\", DATA_CENTER_ID);\n        verify(sc, times(1)).setJoinParameters(\"vmInstanceSearch\", \"type\", VirtualMachine.Type.User);\n        verify(sc, times(1)).setJoinParameters(\"vmInstanceSearch\", \"states\",\n                VirtualMachine.State.Starting, VirtualMachine.State.Running);\n        verify(mockPodDao, times(1)).search(sc, null);\n    }", "signature": "void testListByDataCenterIdVMTypeAndStates()", "full_signature": "@Test public void testListByDataCenterIdVMTypeAndStates()", "class_method_signature": "RouterDeploymentDefinitionTest.testListByDataCenterIdVMTypeAndStates()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "createSearchBuilder", "thenReturn", "when", "entity", "thenReturn", "when", "getType", "thenReturn", "when", "getState", "thenReturn", "when", "getPodIdToDeployIn", "mock", "thenReturn", "when", "createSearchBuilder", "mock", "mock", "thenReturn", "when", "entity", "thenReturn", "when", "getId", "thenReturn", "when", "getDataCenterId", "thenReturn", "when", "create", "mock", "thenReturn", "when", "search", "listByDataCenterIdVMTypeAndStates", "assertNotNull", "assertEquals", "setParameters", "verify", "times", "setJoinParameters", "verify", "times", "setJoinParameters", "verify", "times", "search", "verify", "times"]}, "focal_class": {"identifier": "RouterDeploymentDefinition", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RouterDeploymentDefinition.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RouterDeploymentDefinition.class)", "var_name": "logger"}, {"original_string": "protected static final int LIMIT_NUMBER_OF_ROUTERS = 5;", "modifier": "protected static final", "type": "int", "declarator": "LIMIT_NUMBER_OF_ROUTERS = 5", "var_name": "LIMIT_NUMBER_OF_ROUTERS"}, {"original_string": "protected static final int MAX_NUMBER_OF_ROUTERS = 2;", "modifier": "protected static final", "type": "int", "declarator": "MAX_NUMBER_OF_ROUTERS = 2", "var_name": "MAX_NUMBER_OF_ROUTERS"}, {"original_string": "protected NetworkDao networkDao;", "modifier": "protected", "type": "NetworkDao", "declarator": "networkDao", "var_name": "networkDao"}, {"original_string": "protected DomainRouterDao routerDao;", "modifier": "protected", "type": "DomainRouterDao", "declarator": "routerDao", "var_name": "routerDao"}, {"original_string": "protected PhysicalNetworkServiceProviderDao physicalProviderDao;", "modifier": "protected", "type": "PhysicalNetworkServiceProviderDao", "declarator": "physicalProviderDao", "var_name": "physicalProviderDao"}, {"original_string": "protected NetworkModel networkModel;", "modifier": "protected", "type": "NetworkModel", "declarator": "networkModel", "var_name": "networkModel"}, {"original_string": "protected VirtualRouterProviderDao vrProviderDao;", "modifier": "protected", "type": "VirtualRouterProviderDao", "declarator": "vrProviderDao", "var_name": "vrProviderDao"}, {"original_string": "protected NetworkOfferingDao networkOfferingDao;", "modifier": "protected", "type": "NetworkOfferingDao", "declarator": "networkOfferingDao", "var_name": "networkOfferingDao"}, {"original_string": "protected ServiceOfferingDao serviceOfferingDao;", "modifier": "protected", "type": "ServiceOfferingDao", "declarator": "serviceOfferingDao", "var_name": "serviceOfferingDao"}, {"original_string": "protected IpAddressManager ipAddrMgr;", "modifier": "protected", "type": "IpAddressManager", "declarator": "ipAddrMgr", "var_name": "ipAddrMgr"}, {"original_string": "protected VMInstanceDao vmDao;", "modifier": "protected", "type": "VMInstanceDao", "declarator": "vmDao", "var_name": "vmDao"}, {"original_string": "protected HostPodDao podDao;", "modifier": "protected", "type": "HostPodDao", "declarator": "podDao", "var_name": "podDao"}, {"original_string": "protected AccountManager accountMgr;", "modifier": "protected", "type": "AccountManager", "declarator": "accountMgr", "var_name": "accountMgr"}, {"original_string": "protected NetworkOrchestrationService networkMgr;", "modifier": "protected", "type": "NetworkOrchestrationService", "declarator": "networkMgr", "var_name": "networkMgr"}, {"original_string": "protected NicDao nicDao;", "modifier": "protected", "type": "NicDao", "declarator": "nicDao", "var_name": "nicDao"}, {"original_string": "protected UserIpv6AddressDao ipv6Dao;", "modifier": "protected", "type": "UserIpv6AddressDao", "declarator": "ipv6Dao", "var_name": "ipv6Dao"}, {"original_string": "protected IPAddressDao ipAddressDao;", "modifier": "protected", "type": "IPAddressDao", "declarator": "ipAddressDao", "var_name": "ipAddressDao"}, {"original_string": "protected VirtualRouterProvider vrProvider;", "modifier": "protected", "type": "VirtualRouterProvider", "declarator": "vrProvider", "var_name": "vrProvider"}, {"original_string": "protected NetworkHelper nwHelper;", "modifier": "protected", "type": "NetworkHelper", "declarator": "nwHelper", "var_name": "nwHelper"}, {"original_string": "protected Network guestNetwork;", "modifier": "protected", "type": "Network", "declarator": "guestNetwork", "var_name": "guestNetwork"}, {"original_string": "protected DeployDestination dest;", "modifier": "protected", "type": "DeployDestination", "declarator": "dest", "var_name": "dest"}, {"original_string": "protected Account owner;", "modifier": "protected", "type": "Account", "declarator": "owner", "var_name": "owner"}, {"original_string": "protected Map<Param, Object> params;", "modifier": "protected", "type": "Map<Param, Object>", "declarator": "params", "var_name": "params"}, {"original_string": "protected DeploymentPlan plan;", "modifier": "protected", "type": "DeploymentPlan", "declarator": "plan", "var_name": "plan"}, {"original_string": "protected List<DomainRouterVO> routers = new ArrayList<>();", "modifier": "protected", "type": "List<DomainRouterVO>", "declarator": "routers = new ArrayList<>()", "var_name": "routers"}, {"original_string": "protected Long serviceOfferingId;", "modifier": "protected", "type": "Long", "declarator": "serviceOfferingId", "var_name": "serviceOfferingId"}, {"original_string": "protected Long tableLockId;", "modifier": "protected", "type": "Long", "declarator": "tableLockId", "var_name": "tableLockId"}, {"original_string": "protected boolean isPublicNetwork;", "modifier": "protected", "type": "boolean", "declarator": "isPublicNetwork", "var_name": "isPublicNetwork"}, {"original_string": "protected PublicIp sourceNatIp;", "modifier": "protected", "type": "PublicIp", "declarator": "sourceNatIp", "var_name": "sourceNatIp"}], "methods": [{"identifier": "RouterDeploymentDefinition", "parameters": "(final Network guestNetwork, final DeployDestination dest,\n                                         final Account owner, final Map<Param, Object> params)", "modifiers": "protected", "return": "", "signature": " RouterDeploymentDefinition(final Network guestNetwork, final DeployDestination dest,\n                                         final Account owner, final Map<Param, Object> params)", "full_signature": "protected  RouterDeploymentDefinition(final Network guestNetwork, final DeployDestination dest,\n                                         final Account owner, final Map<Param, Object> params)", "class_method_signature": "RouterDeploymentDefinition.RouterDeploymentDefinition(final Network guestNetwork, final DeployDestination dest,\n                                         final Account owner, final Map<Param, Object> params)", "testcase": false, "constructor": true}, {"identifier": "getServiceOfferingId", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getServiceOfferingId()", "full_signature": "public Long getServiceOfferingId()", "class_method_signature": "RouterDeploymentDefinition.getServiceOfferingId()", "testcase": false, "constructor": false}, {"identifier": "getVpc", "parameters": "()", "modifiers": "public", "return": "Vpc", "signature": "Vpc getVpc()", "full_signature": "public Vpc getVpc()", "class_method_signature": "RouterDeploymentDefinition.getVpc()", "testcase": false, "constructor": false}, {"identifier": "getGuestNetwork", "parameters": "()", "modifiers": "public", "return": "Network", "signature": "Network getGuestNetwork()", "full_signature": "public Network getGuestNetwork()", "class_method_signature": "RouterDeploymentDefinition.getGuestNetwork()", "testcase": false, "constructor": false}, {"identifier": "getDest", "parameters": "()", "modifiers": "public", "return": "DeployDestination", "signature": "DeployDestination getDest()", "full_signature": "public DeployDestination getDest()", "class_method_signature": "RouterDeploymentDefinition.getDest()", "testcase": false, "constructor": false}, {"identifier": "getOwner", "parameters": "()", "modifiers": "public", "return": "Account", "signature": "Account getOwner()", "full_signature": "public Account getOwner()", "class_method_signature": "RouterDeploymentDefinition.getOwner()", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "()", "modifiers": "public", "return": "Map<Param, Object>", "signature": "Map<Param, Object> getParams()", "full_signature": "public Map<Param, Object> getParams()", "class_method_signature": "RouterDeploymentDefinition.getParams()", "testcase": false, "constructor": false}, {"identifier": "isRedundant", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRedundant()", "full_signature": "public boolean isRedundant()", "class_method_signature": "RouterDeploymentDefinition.isRedundant()", "testcase": false, "constructor": false}, {"identifier": "getPlan", "parameters": "()", "modifiers": "public", "return": "DeploymentPlan", "signature": "DeploymentPlan getPlan()", "full_signature": "public DeploymentPlan getPlan()", "class_method_signature": "RouterDeploymentDefinition.getPlan()", "testcase": false, "constructor": false}, {"identifier": "isVpcRouter", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isVpcRouter()", "full_signature": "public boolean isVpcRouter()", "class_method_signature": "RouterDeploymentDefinition.isVpcRouter()", "testcase": false, "constructor": false}, {"identifier": "getPod", "parameters": "()", "modifiers": "public", "return": "Pod", "signature": "Pod getPod()", "full_signature": "public Pod getPod()", "class_method_signature": "RouterDeploymentDefinition.getPod()", "testcase": false, "constructor": false}, {"identifier": "getPodId", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getPodId()", "full_signature": "public Long getPodId()", "class_method_signature": "RouterDeploymentDefinition.getPodId()", "testcase": false, "constructor": false}, {"identifier": "getRouters", "parameters": "()", "modifiers": "public", "return": "List<DomainRouterVO>", "signature": "List<DomainRouterVO> getRouters()", "full_signature": "public List<DomainRouterVO> getRouters()", "class_method_signature": "RouterDeploymentDefinition.getRouters()", "testcase": false, "constructor": false}, {"identifier": "getVirtualProvider", "parameters": "()", "modifiers": "public", "return": "VirtualRouterProvider", "signature": "VirtualRouterProvider getVirtualProvider()", "full_signature": "public VirtualRouterProvider getVirtualProvider()", "class_method_signature": "RouterDeploymentDefinition.getVirtualProvider()", "testcase": false, "constructor": false}, {"identifier": "isBasic", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBasic()", "full_signature": "public boolean isBasic()", "class_method_signature": "RouterDeploymentDefinition.isBasic()", "testcase": false, "constructor": false}, {"identifier": "isPublicNetwork", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPublicNetwork()", "full_signature": "public boolean isPublicNetwork()", "class_method_signature": "RouterDeploymentDefinition.isPublicNetwork()", "testcase": false, "constructor": false}, {"identifier": "getSourceNatIP", "parameters": "()", "modifiers": "public", "return": "PublicIp", "signature": "PublicIp getSourceNatIP()", "full_signature": "public PublicIp getSourceNatIP()", "class_method_signature": "RouterDeploymentDefinition.getSourceNatIP()", "testcase": false, "constructor": false}, {"identifier": "needsPublicNic", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean needsPublicNic()", "full_signature": "public boolean needsPublicNic()", "class_method_signature": "RouterDeploymentDefinition.needsPublicNic()", "testcase": false, "constructor": false}, {"identifier": "hasSourceNatService", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasSourceNatService()", "full_signature": "public boolean hasSourceNatService()", "class_method_signature": "RouterDeploymentDefinition.hasSourceNatService()", "testcase": false, "constructor": false}, {"identifier": "generateDeploymentPlan", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void generateDeploymentPlan()", "full_signature": "protected void generateDeploymentPlan()", "class_method_signature": "RouterDeploymentDefinition.generateDeploymentPlan()", "testcase": false, "constructor": false}, {"identifier": "deployVirtualRouter", "parameters": "()", "modifiers": "public", "return": "List<DomainRouterVO>", "signature": "List<DomainRouterVO> deployVirtualRouter()", "full_signature": "public List<DomainRouterVO> deployVirtualRouter()", "class_method_signature": "RouterDeploymentDefinition.deployVirtualRouter()", "testcase": false, "constructor": false}, {"identifier": "isRouterDeployed", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isRouterDeployed()", "full_signature": "private boolean isRouterDeployed()", "class_method_signature": "RouterDeploymentDefinition.isRouterDeployed()", "testcase": false, "constructor": false}, {"identifier": "findOrDeployVirtualRouter", "parameters": "()", "modifiers": "@DB protected", "return": "void", "signature": "void findOrDeployVirtualRouter()", "full_signature": "@DB protected void findOrDeployVirtualRouter()", "class_method_signature": "RouterDeploymentDefinition.findOrDeployVirtualRouter()", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void lock()", "full_signature": "protected void lock()", "class_method_signature": "RouterDeploymentDefinition.lock()", "testcase": false, "constructor": false}, {"identifier": "unlock", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void unlock()", "full_signature": "protected void unlock()", "class_method_signature": "RouterDeploymentDefinition.unlock()", "testcase": false, "constructor": false}, {"identifier": "checkPreconditions", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkPreconditions()", "full_signature": "protected void checkPreconditions()", "class_method_signature": "RouterDeploymentDefinition.checkPreconditions()", "testcase": false, "constructor": false}, {"identifier": "findDestinations", "parameters": "()", "modifiers": "protected", "return": "List<DeployDestination>", "signature": "List<DeployDestination> findDestinations()", "full_signature": "protected List<DeployDestination> findDestinations()", "class_method_signature": "RouterDeploymentDefinition.findDestinations()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfRoutersToDeploy", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getNumberOfRoutersToDeploy()", "full_signature": "protected int getNumberOfRoutersToDeploy()", "class_method_signature": "RouterDeploymentDefinition.getNumberOfRoutersToDeploy()", "testcase": false, "constructor": false}, {"identifier": "setupAccountOwner", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void setupAccountOwner()", "full_signature": "protected void setupAccountOwner()", "class_method_signature": "RouterDeploymentDefinition.setupAccountOwner()", "testcase": false, "constructor": false}, {"identifier": "prepareDeployment", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean prepareDeployment()", "full_signature": "protected boolean prepareDeployment()", "class_method_signature": "RouterDeploymentDefinition.prepareDeployment()", "testcase": false, "constructor": false}, {"identifier": "executeDeployment", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void executeDeployment()", "full_signature": "protected void executeDeployment()", "class_method_signature": "RouterDeploymentDefinition.executeDeployment()", "testcase": false, "constructor": false}, {"identifier": "findSourceNatIP", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void findSourceNatIP()", "full_signature": "protected void findSourceNatIP()", "class_method_signature": "RouterDeploymentDefinition.findSourceNatIP()", "testcase": false, "constructor": false}, {"identifier": "findDefaultServiceOfferingId", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void findDefaultServiceOfferingId()", "full_signature": "protected void findDefaultServiceOfferingId()", "class_method_signature": "RouterDeploymentDefinition.findDefaultServiceOfferingId()", "testcase": false, "constructor": false}, {"identifier": "findServiceOfferingId", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void findServiceOfferingId()", "full_signature": "protected void findServiceOfferingId()", "class_method_signature": "RouterDeploymentDefinition.findServiceOfferingId()", "testcase": false, "constructor": false}, {"identifier": "findVirtualProvider", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void findVirtualProvider()", "full_signature": "protected void findVirtualProvider()", "class_method_signature": "RouterDeploymentDefinition.findVirtualProvider()", "testcase": false, "constructor": false}, {"identifier": "deployAllVirtualRouters", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void deployAllVirtualRouters()", "full_signature": "protected void deployAllVirtualRouters()", "class_method_signature": "RouterDeploymentDefinition.deployAllVirtualRouters()", "testcase": false, "constructor": false}, {"identifier": "listByDataCenterIdVMTypeAndStates", "parameters": "(final long id, final VirtualMachine.Type type, final VirtualMachine.State... states)", "modifiers": "protected", "return": "List<HostPodVO>", "signature": "List<HostPodVO> listByDataCenterIdVMTypeAndStates(final long id, final VirtualMachine.Type type, final VirtualMachine.State... states)", "full_signature": "protected List<HostPodVO> listByDataCenterIdVMTypeAndStates(final long id, final VirtualMachine.Type type, final VirtualMachine.State... states)", "class_method_signature": "RouterDeploymentDefinition.listByDataCenterIdVMTypeAndStates(final long id, final VirtualMachine.Type type, final VirtualMachine.State... states)", "testcase": false, "constructor": false}, {"identifier": "planDeploymentRouters", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void planDeploymentRouters()", "full_signature": "protected void planDeploymentRouters()", "class_method_signature": "RouterDeploymentDefinition.planDeploymentRouters()", "testcase": false, "constructor": false}, {"identifier": "routersNeedReset", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean routersNeedReset()", "full_signature": "protected boolean routersNeedReset()", "class_method_signature": "RouterDeploymentDefinition.routersNeedReset()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/cloud/network/router/deployment/RouterDeploymentDefinition.java"}, "focal_method": {"identifier": "listByDataCenterIdVMTypeAndStates", "parameters": "(final long id, final VirtualMachine.Type type, final VirtualMachine.State... states)", "modifiers": "protected", "return": "List<HostPodVO>", "body": "protected List<HostPodVO> listByDataCenterIdVMTypeAndStates(final long id, final VirtualMachine.Type type, final VirtualMachine.State... states) {\n        final SearchBuilder<VMInstanceVO> vmInstanceSearch = vmDao.createSearchBuilder();\n        vmInstanceSearch.and(\"type\", vmInstanceSearch.entity().getType(), SearchCriteria.Op.EQ);\n        vmInstanceSearch.and(\"states\", vmInstanceSearch.entity().getState(), SearchCriteria.Op.IN);\n\n        final SearchBuilder<HostPodVO> podIdSearch = podDao.createSearchBuilder();\n        podIdSearch.and(\"dc\", podIdSearch.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n        podIdSearch.select(null, SearchCriteria.Func.DISTINCT, podIdSearch.entity().getId());\n        podIdSearch.join(\"vmInstanceSearch\", vmInstanceSearch, podIdSearch.entity().getId(), vmInstanceSearch.entity().getPodIdToDeployIn(), JoinBuilder.JoinType.INNER);\n        podIdSearch.done();\n\n        final SearchCriteria<HostPodVO> sc = podIdSearch.create();\n        sc.setParameters(\"dc\", id);\n        sc.setJoinParameters(\"vmInstanceSearch\", \"type\", type);\n        sc.setJoinParameters(\"vmInstanceSearch\", \"states\", (Object[]) states);\n        return podDao.search(sc, null);\n    }", "signature": "List<HostPodVO> listByDataCenterIdVMTypeAndStates(final long id, final VirtualMachine.Type type, final VirtualMachine.State... states)", "full_signature": "protected List<HostPodVO> listByDataCenterIdVMTypeAndStates(final long id, final VirtualMachine.Type type, final VirtualMachine.State... states)", "class_method_signature": "RouterDeploymentDefinition.listByDataCenterIdVMTypeAndStates(final long id, final VirtualMachine.Type type, final VirtualMachine.State... states)", "testcase": false, "constructor": false, "invocations": ["createSearchBuilder", "and", "getType", "entity", "and", "getState", "entity", "createSearchBuilder", "and", "getDataCenterId", "entity", "select", "getId", "entity", "join", "getId", "entity", "getPodIdToDeployIn", "entity", "done", "create", "setParameters", "setJoinParameters", "setJoinParameters", "search"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}