{"test_class": {"identifier": "MatchersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public final ExpectedException exception = ExpectedException.none();", "modifier": "@Rule public final", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "core/src/test/java/feast/core/validators/MatchersTest.java"}, "test_case": {"identifier": "checkLowerSnakeCaseShouldThrowIllegalArgumentExceptionWithFieldForInvalidString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void checkLowerSnakeCaseShouldThrowIllegalArgumentExceptionWithFieldForInvalidString() {\n    exception.expect(IllegalArgumentException.class);\n    exception.expectMessage(\n        Strings.lenientFormat(\n            \"invalid value for %s resource, %s: %s\",\n            \"feature\",\n            \"Invalid_feature name\",\n            \"argument must be in lower snake case, and cannot include any special characters.\"));\n    String in = \"Invalid_feature name\";\n    checkLowerSnakeCase(in, \"feature\");\n  }", "signature": "void checkLowerSnakeCaseShouldThrowIllegalArgumentExceptionWithFieldForInvalidString()", "full_signature": "@Test public void checkLowerSnakeCaseShouldThrowIllegalArgumentExceptionWithFieldForInvalidString()", "class_method_signature": "MatchersTest.checkLowerSnakeCaseShouldThrowIllegalArgumentExceptionWithFieldForInvalidString()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "lenientFormat", "checkLowerSnakeCase"]}, "focal_class": {"identifier": "Matchers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Pattern BIGQUERY_TABLE_REF_REGEX =\n      Pattern.compile(\"[a-zA-Z0-9-]+[:]+[a-zA-Z0-9]+[.]+[a-zA-Z0-9_]*\");", "modifier": "private static", "type": "Pattern", "declarator": "BIGQUERY_TABLE_REF_REGEX =\n      Pattern.compile(\"[a-zA-Z0-9-]+[:]+[a-zA-Z0-9]+[.]+[a-zA-Z0-9_]*\")", "var_name": "BIGQUERY_TABLE_REF_REGEX"}, {"original_string": "private static Pattern UPPER_SNAKE_CASE_REGEX = Pattern.compile(\"^[A-Z0-9]+(_[A-Z0-9]+)*$\");", "modifier": "private static", "type": "Pattern", "declarator": "UPPER_SNAKE_CASE_REGEX = Pattern.compile(\"^[A-Z0-9]+(_[A-Z0-9]+)*$\")", "var_name": "UPPER_SNAKE_CASE_REGEX"}, {"original_string": "private static Pattern LOWER_SNAKE_CASE_REGEX = Pattern.compile(\"^[a-z0-9]+(_[a-z0-9]+)*$\");", "modifier": "private static", "type": "Pattern", "declarator": "LOWER_SNAKE_CASE_REGEX = Pattern.compile(\"^[a-z0-9]+(_[a-z0-9]+)*$\")", "var_name": "LOWER_SNAKE_CASE_REGEX"}, {"original_string": "private static Pattern VALID_CHARACTERS_REGEX = Pattern.compile(\"^[a-zA-Z_][a-zA-Z0-9_]*$\");", "modifier": "private static", "type": "Pattern", "declarator": "VALID_CHARACTERS_REGEX = Pattern.compile(\"^[a-zA-Z_][a-zA-Z0-9_]*$\")", "var_name": "VALID_CHARACTERS_REGEX"}, {"original_string": "private static Pattern VALID_CHARACTERS_REGEX_WITH_ASTERISK_WILDCARD =\n      Pattern.compile(\"^[a-zA-Z0-9\\\\-_*]*$\");", "modifier": "private static", "type": "Pattern", "declarator": "VALID_CHARACTERS_REGEX_WITH_ASTERISK_WILDCARD =\n      Pattern.compile(\"^[a-zA-Z0-9\\\\-_*]*$\")", "var_name": "VALID_CHARACTERS_REGEX_WITH_ASTERISK_WILDCARD"}, {"original_string": "private static String ERROR_MESSAGE_TEMPLATE = \"invalid value for %s resource, %s: %s\";", "modifier": "private static", "type": "String", "declarator": "ERROR_MESSAGE_TEMPLATE = \"invalid value for %s resource, %s: %s\"", "var_name": "ERROR_MESSAGE_TEMPLATE"}], "methods": [{"identifier": "checkUpperSnakeCase", "parameters": "(String input, String resource)", "modifiers": "public static", "return": "void", "signature": "void checkUpperSnakeCase(String input, String resource)", "full_signature": "public static void checkUpperSnakeCase(String input, String resource)", "class_method_signature": "Matchers.checkUpperSnakeCase(String input, String resource)", "testcase": false, "constructor": false}, {"identifier": "checkLowerSnakeCase", "parameters": "(String input, String resource)", "modifiers": "public static", "return": "void", "signature": "void checkLowerSnakeCase(String input, String resource)", "full_signature": "public static void checkLowerSnakeCase(String input, String resource)", "class_method_signature": "Matchers.checkLowerSnakeCase(String input, String resource)", "testcase": false, "constructor": false}, {"identifier": "checkValidCharacters", "parameters": "(String input, String resource)", "modifiers": "public static", "return": "void", "signature": "void checkValidCharacters(String input, String resource)", "full_signature": "public static void checkValidCharacters(String input, String resource)", "class_method_signature": "Matchers.checkValidCharacters(String input, String resource)", "testcase": false, "constructor": false}, {"identifier": "checkValidCharactersAllowAsterisk", "parameters": "(String input, String resource)", "modifiers": "public static", "return": "void", "signature": "void checkValidCharactersAllowAsterisk(String input, String resource)", "full_signature": "public static void checkValidCharactersAllowAsterisk(String input, String resource)", "class_method_signature": "Matchers.checkValidCharactersAllowAsterisk(String input, String resource)", "testcase": false, "constructor": false}, {"identifier": "checkValidBigQueryTableRef", "parameters": "(String input, String resource)", "modifiers": "public static", "return": "void", "signature": "void checkValidBigQueryTableRef(String input, String resource)", "full_signature": "public static void checkValidBigQueryTableRef(String input, String resource)", "class_method_signature": "Matchers.checkValidBigQueryTableRef(String input, String resource)", "testcase": false, "constructor": false}, {"identifier": "hasDuplicates", "parameters": "(Collection<String> strings)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasDuplicates(Collection<String> strings)", "full_signature": "public static boolean hasDuplicates(Collection<String> strings)", "class_method_signature": "Matchers.hasDuplicates(Collection<String> strings)", "testcase": false, "constructor": false}], "file": "core/src/main/java/feast/core/validators/Matchers.java"}, "focal_method": {"identifier": "checkLowerSnakeCase", "parameters": "(String input, String resource)", "modifiers": "public static", "return": "void", "body": "public static void checkLowerSnakeCase(String input, String resource)\n      throws IllegalArgumentException {\n    if (!LOWER_SNAKE_CASE_REGEX.matcher(input).matches()) {\n      throw new IllegalArgumentException(\n          String.format(\n              ERROR_MESSAGE_TEMPLATE,\n              resource,\n              input,\n              \"argument must be in lower snake case, and cannot include any special characters.\"));\n    }\n  }", "signature": "void checkLowerSnakeCase(String input, String resource)", "full_signature": "public static void checkLowerSnakeCase(String input, String resource)", "class_method_signature": "Matchers.checkLowerSnakeCase(String input, String resource)", "testcase": false, "constructor": false, "invocations": ["matches", "matcher", "format"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}