{"test_class": {"identifier": "MyPresentationPolicyAlternativesTest", "superclass": "", "interfaces": "", "fields": [], "file": "Code/core-abce/abce-components/src/test/java-ibm-only/eu/abc4trust/util/MyPresentationPolicyAlternativesTest.java"}, "test_case": {"identifier": "testFindOrThrow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFindOrThrow() throws Exception {\n    PresentationPolicyAlternatives ppa =\n        (PresentationPolicyAlternatives) XmlUtils.getObjectFromXML(getClass().getResourceAsStream(\n            \"/eu/abc4trust/sampleXml/presentationPolicies/presentationPolicyAlternativesHotel.xml\"), true);\n    MyPresentationPolicyAlternatives myppa = new MyPresentationPolicyAlternatives(ppa);\n    \n    URI policyUri1 = new URI(\"http://www.sweetdreamsuites.com/policies/booking/standard\");\n    MyPresentationPolicy res = myppa.findOrThrow(policyUri1);\n    assertEquals(policyUri1, res.getPolicyUri());\n    \n    URI policyUri2 = new URI(\"blabla\");\n    try {\n      myppa.findOrThrow(policyUri2);\n      fail(\"Expected TokenVerificationException\");\n    } catch(TokenVerificationException ex) {\n      // expected\n      assertTrue(ex.getMessage().contains(\"Cannot find\"));\n    }\n  }", "signature": "void testFindOrThrow()", "full_signature": "@Test public void testFindOrThrow()", "class_method_signature": "MyPresentationPolicyAlternativesTest.testFindOrThrow()", "testcase": true, "constructor": false, "invocations": ["getObjectFromXML", "getResourceAsStream", "getClass", "findOrThrow", "assertEquals", "getPolicyUri", "findOrThrow", "fail", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "MyPresentationPolicyAlternatives", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PresentationPolicyAlternatives policyAlternatives;", "modifier": "private final", "type": "PresentationPolicyAlternatives", "declarator": "policyAlternatives", "var_name": "policyAlternatives"}], "methods": [{"identifier": "MyPresentationPolicyAlternatives", "parameters": "(PresentationPolicyAlternatives ppa)", "modifiers": "public", "return": "", "signature": " MyPresentationPolicyAlternatives(PresentationPolicyAlternatives ppa)", "full_signature": "public  MyPresentationPolicyAlternatives(PresentationPolicyAlternatives ppa)", "class_method_signature": "MyPresentationPolicyAlternatives.MyPresentationPolicyAlternatives(PresentationPolicyAlternatives ppa)", "testcase": false, "constructor": true}, {"identifier": "findOrThrow", "parameters": "(URI policyUri)", "modifiers": "public", "return": "MyPresentationPolicy", "signature": "MyPresentationPolicy findOrThrow(URI policyUri)", "full_signature": "public MyPresentationPolicy findOrThrow(URI policyUri)", "class_method_signature": "MyPresentationPolicyAlternatives.findOrThrow(URI policyUri)", "testcase": false, "constructor": false}], "file": "Code/core-abce/abce-components/src/main/java-ibm-only/eu/abc4trust/util/MyPresentationPolicyAlternatives.java"}, "focal_method": {"identifier": "findOrThrow", "parameters": "(URI policyUri)", "modifiers": "public", "return": "MyPresentationPolicy", "body": "public MyPresentationPolicy findOrThrow(URI policyUri) throws TokenVerificationException {\n    for(PresentationPolicy pp: policyAlternatives.getPresentationPolicy()) {\n      if (pp.getPolicyUID().equals(policyUri)) {\n        return new MyPresentationPolicy(pp);\n      }\n    }\n    String errorMessage = \"Cannot find presentation policy with URI '\" + policyUri + \"' among the alternatives\";\n    TokenVerificationException ex = new TokenVerificationException();\n    ex.errorMessages.add(errorMessage);\n    throw ex;\n  }", "signature": "MyPresentationPolicy findOrThrow(URI policyUri)", "full_signature": "public MyPresentationPolicy findOrThrow(URI policyUri)", "class_method_signature": "MyPresentationPolicyAlternatives.findOrThrow(URI policyUri)", "testcase": false, "constructor": false, "invocations": ["getPresentationPolicy", "equals", "getPolicyUID", "add"]}, "repository": {"repo_id": 7687890, "url": "https://github.com/p2abcengine/p2abcengine", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 71, "size": 11790, "license": "licensed"}}