{"test_class": {"identifier": "GraphiteSanitizeTest", "superclass": "", "interfaces": "", "fields": [], "file": "metrics-graphite/src/test/java/com/codahale/metrics/graphite/GraphiteSanitizeTest.java"}, "test_case": {"identifier": "sanitizeGraphiteValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sanitizeGraphiteValues() {\n        SoftAssertions softly = new SoftAssertions();\n\n        softly.assertThat(GraphiteSanitize.sanitize(\"Foo Bar\")).isEqualTo(\"Foo-Bar\");\n        softly.assertThat(GraphiteSanitize.sanitize(\" Foo Bar \")).isEqualTo(\"Foo-Bar\");\n        softly.assertThat(GraphiteSanitize.sanitize(\" Foo Bar\")).isEqualTo(\"Foo-Bar\");\n        softly.assertThat(GraphiteSanitize.sanitize(\"Foo Bar \")).isEqualTo(\"Foo-Bar\");\n        softly.assertThat(GraphiteSanitize.sanitize(\"  Foo Bar  \")).isEqualTo(\"Foo-Bar\");\n        softly.assertThat(GraphiteSanitize.sanitize(\"Foo@Bar\")).isEqualTo(\"Foo@Bar\");\n        softly.assertThat(GraphiteSanitize.sanitize(\"Fo\u00f3 Bar\")).isEqualTo(\"Fo\u00f3-Bar\");\n        softly.assertThat(GraphiteSanitize.sanitize(\"||\u00f3/.\")).isEqualTo(\"||\u00f3/.\");\n        softly.assertThat(GraphiteSanitize.sanitize(\"${Foo:Bar:baz}\")).isEqualTo(\"${Foo:Bar:baz}\");\n        softly.assertThat(GraphiteSanitize.sanitize(\"St. Foo's of Bar\")).isEqualTo(\"St.-Foo's-of-Bar\");\n        softly.assertThat(GraphiteSanitize.sanitize(\"(Foo and (Bar and (Baz)))\")).isEqualTo(\"(Foo-and-(Bar-and-(Baz)))\");\n        softly.assertThat(GraphiteSanitize.sanitize(\"Foo.bar.baz\")).isEqualTo(\"Foo.bar.baz\");\n        softly.assertThat(GraphiteSanitize.sanitize(\"FooBar\")).isEqualTo(\"FooBar\");\n\n        softly.assertAll();\n    }", "signature": "void sanitizeGraphiteValues()", "full_signature": "@Test public void sanitizeGraphiteValues()", "class_method_signature": "GraphiteSanitizeTest.sanitizeGraphiteValues()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "sEqualTo(", "assertThat", "sanitize", "sEqualTo(", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "assertAll"]}, "focal_class": {"identifier": "GraphiteSanitize", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern WHITESPACE = Pattern.compile(\"[\\\\s]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "WHITESPACE = Pattern.compile(\"[\\\\s]+\")", "var_name": "WHITESPACE"}, {"original_string": "private static final String DASH = \"-\";", "modifier": "private static final", "type": "String", "declarator": "DASH = \"-\"", "var_name": "DASH"}], "methods": [{"identifier": "sanitize", "parameters": "(String string)", "modifiers": "static", "return": "String", "signature": "String sanitize(String string)", "full_signature": "static String sanitize(String string)", "class_method_signature": "GraphiteSanitize.sanitize(String string)", "testcase": false, "constructor": false}], "file": "metrics-graphite/src/main/java/com/codahale/metrics/graphite/GraphiteSanitize.java"}, "focal_method": {"identifier": "sanitize", "parameters": "(String string)", "modifiers": "static", "return": "String", "body": "static String sanitize(String string) {\n        return WHITESPACE.matcher(string.trim()).replaceAll(DASH);\n    }", "signature": "String sanitize(String string)", "full_signature": "static String sanitize(String string)", "class_method_signature": "GraphiteSanitize.sanitize(String string)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "matcher", "trim"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}