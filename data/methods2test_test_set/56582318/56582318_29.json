{"test_class": {"identifier": "Vector2DTest", "superclass": "", "interfaces": "", "fields": [], "file": "geoxygene-spatial/src/test/java/fr/ign/cogit/geoxygene/util/algo/geomstructure/Vector2DTest.java"}, "test_case": {"identifier": "testIsColinear", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIsColinear() {\n    IDirectPosition p1 = new DirectPosition(0.0, 0.0);\n    IDirectPosition p2 = new DirectPosition(0.0, 10.0);\n    IDirectPosition p3 = new DirectPosition(10.0, 0.0);\n    IDirectPosition p4 = new DirectPosition(0.0, 5.0);\n    IDirectPosition p5 = new DirectPosition(5.0, 0.0);\n\n    Vector2D vect1 = new Vector2D(p1, p2);\n    Vector2D vect2 = new Vector2D(p1, p3);\n    Vector2D vect3 = new Vector2D(p1, p4);\n    Vector2D vect4 = new Vector2D(p1, p5);\n    Vector2D vect5 = new Vector2D(p5, p1);\n    Assert.assertTrue(vect1.isColinear(vect3));\n    Assert.assertTrue(vect2.isColinear(vect4));\n    Assert.assertTrue(vect5.isColinear(vect2));\n  }", "signature": "void testIsColinear()", "full_signature": "@Test public void testIsColinear()", "class_method_signature": "Vector2DTest.testIsColinear()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isColinear", "assertTrue", "isColinear", "assertTrue", "isColinear"]}, "focal_class": {"identifier": "Vector2D", "superclass": "extends Vecteur", "interfaces": "", "fields": [], "methods": [{"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Vector2D.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Vector2D.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Vector2D.toString()", "testcase": false, "constructor": false}, {"identifier": "Vector2D", "parameters": "(double x, double y)", "modifiers": "public", "return": "", "signature": " Vector2D(double x, double y)", "full_signature": "public  Vector2D(double x, double y)", "class_method_signature": "Vector2D.Vector2D(double x, double y)", "testcase": false, "constructor": true}, {"identifier": "Vector2D", "parameters": "()", "modifiers": "public", "return": "", "signature": " Vector2D()", "full_signature": "public  Vector2D()", "class_method_signature": "Vector2D.Vector2D()", "testcase": false, "constructor": true}, {"identifier": "Vector2D", "parameters": "(IDirectPosition dp1, IDirectPosition dp2)", "modifiers": "public", "return": "", "signature": " Vector2D(IDirectPosition dp1, IDirectPosition dp2)", "full_signature": "public  Vector2D(IDirectPosition dp1, IDirectPosition dp2)", "class_method_signature": "Vector2D.Vector2D(IDirectPosition dp1, IDirectPosition dp2)", "testcase": false, "constructor": true}, {"identifier": "Vector2D", "parameters": "(IDirectPosition dp1)", "modifiers": "public", "return": "", "signature": " Vector2D(IDirectPosition dp1)", "full_signature": "public  Vector2D(IDirectPosition dp1)", "class_method_signature": "Vector2D.Vector2D(IDirectPosition dp1)", "testcase": false, "constructor": true}, {"identifier": "Vector2D", "parameters": "(Angle angle, double norm)", "modifiers": "public", "return": "", "signature": " Vector2D(Angle angle, double norm)", "full_signature": "public  Vector2D(Angle angle, double norm)", "class_method_signature": "Vector2D.Vector2D(Angle angle, double norm)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Vector2D v)", "modifiers": "public", "return": "Vector2D", "signature": "Vector2D add(Vector2D v)", "full_signature": "public Vector2D add(Vector2D v)", "class_method_signature": "Vector2D.add(Vector2D v)", "testcase": false, "constructor": false}, {"identifier": "ajoute", "parameters": "(Vecteur v1)", "modifiers": "@Override public", "return": "Vecteur", "signature": "Vecteur ajoute(Vecteur v1)", "full_signature": "@Override public Vecteur ajoute(Vecteur v1)", "class_method_signature": "Vector2D.ajoute(Vecteur v1)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "Vector2D", "signature": "Vector2D copy()", "full_signature": "public Vector2D copy()", "class_method_signature": "Vector2D.copy()", "testcase": false, "constructor": false}, {"identifier": "scalarMultiplication", "parameters": "(double lambda)", "modifiers": "public", "return": "void", "signature": "void scalarMultiplication(double lambda)", "full_signature": "public void scalarMultiplication(double lambda)", "class_method_signature": "Vector2D.scalarMultiplication(double lambda)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(ILineString l)", "modifiers": "@Override public", "return": "ILineString", "signature": "ILineString translate(ILineString l)", "full_signature": "@Override public ILineString translate(ILineString l)", "class_method_signature": "Vector2D.translate(ILineString l)", "testcase": false, "constructor": false}, {"identifier": "vectorAngle", "parameters": "(Vector2D v)", "modifiers": "public", "return": "double", "signature": "double vectorAngle(Vector2D v)", "full_signature": "public double vectorAngle(Vector2D v)", "class_method_signature": "Vector2D.vectorAngle(Vector2D v)", "testcase": false, "constructor": false}, {"identifier": "vectorAngle0ToPi", "parameters": "(Vector2D v)", "modifiers": "public", "return": "double", "signature": "double vectorAngle0ToPi(Vector2D v)", "full_signature": "public double vectorAngle0ToPi(Vector2D v)", "class_method_signature": "Vector2D.vectorAngle0ToPi(Vector2D v)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNull()", "full_signature": "public boolean isNull()", "class_method_signature": "Vector2D.isNull()", "testcase": false, "constructor": false}, {"identifier": "changeNorm", "parameters": "(double newNorm)", "modifiers": "public", "return": "Vector2D", "signature": "Vector2D changeNorm(double newNorm)", "full_signature": "public Vector2D changeNorm(double newNorm)", "class_method_signature": "Vector2D.changeNorm(double newNorm)", "testcase": false, "constructor": false}, {"identifier": "rotate", "parameters": "(double angle)", "modifiers": "public", "return": "Vector2D", "signature": "Vector2D rotate(double angle)", "full_signature": "public Vector2D rotate(double angle)", "class_method_signature": "Vector2D.rotate(double angle)", "testcase": false, "constructor": false}, {"identifier": "opposite", "parameters": "()", "modifiers": "public", "return": "Vector2D", "signature": "Vector2D opposite()", "full_signature": "public Vector2D opposite()", "class_method_signature": "Vector2D.opposite()", "testcase": false, "constructor": false}, {"identifier": "toGeom", "parameters": "(IDirectPosition point)", "modifiers": "public", "return": "ILineSegment", "signature": "ILineSegment toGeom(IDirectPosition point)", "full_signature": "public ILineSegment toGeom(IDirectPosition point)", "class_method_signature": "Vector2D.toGeom(IDirectPosition point)", "testcase": false, "constructor": false}, {"identifier": "isColinear", "parameters": "(Vector2D vect)", "modifiers": "public", "return": "boolean", "signature": "boolean isColinear(Vector2D vect)", "full_signature": "public boolean isColinear(Vector2D vect)", "class_method_signature": "Vector2D.isColinear(Vector2D vect)", "testcase": false, "constructor": false}, {"identifier": "isColinear", "parameters": "(Vector2D vect, double tolerance)", "modifiers": "public", "return": "boolean", "signature": "boolean isColinear(Vector2D vect, double tolerance)", "full_signature": "public boolean isColinear(Vector2D vect, double tolerance)", "class_method_signature": "Vector2D.isColinear(Vector2D vect, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "project", "parameters": "(double direction)", "modifiers": "public", "return": "Vector2D", "signature": "Vector2D project(double direction)", "full_signature": "public Vector2D project(double direction)", "class_method_signature": "Vector2D.project(double direction)", "testcase": false, "constructor": false}], "file": "geoxygene-spatial/src/main/java/fr/ign/cogit/geoxygene/util/algo/geomstructure/Vector2D.java"}, "focal_method": {"identifier": "isColinear", "parameters": "(Vector2D vect)", "modifiers": "public", "return": "boolean", "body": "public boolean isColinear(Vector2D vect) {\n    if (vect.getX() * this.getY() == vect.getY() * this.getX())\n      return true;\n    return false;\n  }", "signature": "boolean isColinear(Vector2D vect)", "full_signature": "public boolean isColinear(Vector2D vect)", "class_method_signature": "Vector2D.isColinear(Vector2D vect)", "testcase": false, "constructor": false, "invocations": ["getX", "getY", "getY", "getX"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}