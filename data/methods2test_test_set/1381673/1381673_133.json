{"test_class": {"identifier": "FactMappingTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-scenario-simulation/drools-scenario-simulation-api/src/test/java/org/drools/scenariosimulation/api/model/FactMappingTest.java"}, "test_case": {"identifier": "getExpressionElementsWithoutClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getExpressionElementsWithoutClass() {\n        FactMapping original = new FactMapping(\"FACT_ALIAS\", new FactIdentifier(\"FI_TEST\", \"com.test.Foo\"), new ExpressionIdentifier(\"EI_TEST\", FactMappingType.GIVEN));\n        assertThatThrownBy(original::getExpressionElementsWithoutClass)\n                .isInstanceOf(IllegalStateException.class)\n                .hasMessage(\"ExpressionElements malformed\");\n        assertEquals(0, original.getExpressionElements().size());\n        original.addExpressionElement(\"STEP\", String.class.getCanonicalName());\n\n        assertEquals(0, original.getExpressionElementsWithoutClass().size());\n        assertEquals(1, original.getExpressionElements().size());\n    }", "signature": "void getExpressionElementsWithoutClass()", "full_signature": "@Test public void getExpressionElementsWithoutClass()", "class_method_signature": "FactMappingTest.getExpressionElementsWithoutClass()", "testcase": true, "constructor": false, "invocations": ["hasMessage", "isInstanceOf", "assertThatThrownBy", "assertEquals", "size", "getExpressionElements", "addExpressionElement", "getCanonicalName", "assertEquals", "size", "getExpressionElementsWithoutClass", "assertEquals", "size", "getExpressionElements"]}, "focal_class": {"identifier": "FactMapping", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<ExpressionElement> expressionElements = new LinkedList<>();", "modifier": "private", "type": "List<ExpressionElement>", "declarator": "expressionElements = new LinkedList<>()", "var_name": "expressionElements"}, {"original_string": "private ExpressionIdentifier expressionIdentifier;", "modifier": "private", "type": "ExpressionIdentifier", "declarator": "expressionIdentifier", "var_name": "expressionIdentifier"}, {"original_string": "private FactIdentifier factIdentifier;", "modifier": "private", "type": "FactIdentifier", "declarator": "factIdentifier", "var_name": "factIdentifier"}, {"original_string": "private String className;", "modifier": "private", "type": "String", "declarator": "className", "var_name": "className"}, {"original_string": "private String factAlias;", "modifier": "private", "type": "String", "declarator": "factAlias", "var_name": "factAlias"}, {"original_string": "private String expressionAlias;", "modifier": "private", "type": "String", "declarator": "expressionAlias", "var_name": "expressionAlias"}, {"original_string": "private List<String> genericTypes;", "modifier": "private", "type": "List<String>", "declarator": "genericTypes", "var_name": "genericTypes"}, {"original_string": "private FactMappingValueType factMappingValueType = FactMappingValueType.NOT_EXPRESSION;", "modifier": "private", "type": "FactMappingValueType", "declarator": "factMappingValueType = FactMappingValueType.NOT_EXPRESSION", "var_name": "factMappingValueType"}, {"original_string": "private Double columnWidth;", "modifier": "private", "type": "Double", "declarator": "columnWidth", "var_name": "columnWidth"}], "methods": [{"identifier": "FactMapping", "parameters": "()", "modifiers": "public", "return": "", "signature": " FactMapping()", "full_signature": "public  FactMapping()", "class_method_signature": "FactMapping.FactMapping()", "testcase": false, "constructor": true}, {"identifier": "FactMapping", "parameters": "(FactIdentifier factIdentifier, ExpressionIdentifier expressionIdentifier)", "modifiers": "public", "return": "", "signature": " FactMapping(FactIdentifier factIdentifier, ExpressionIdentifier expressionIdentifier)", "full_signature": "public  FactMapping(FactIdentifier factIdentifier, ExpressionIdentifier expressionIdentifier)", "class_method_signature": "FactMapping.FactMapping(FactIdentifier factIdentifier, ExpressionIdentifier expressionIdentifier)", "testcase": false, "constructor": true}, {"identifier": "FactMapping", "parameters": "(String factAlias, FactIdentifier factIdentifier, ExpressionIdentifier expressionIdentifier)", "modifiers": "public", "return": "", "signature": " FactMapping(String factAlias, FactIdentifier factIdentifier, ExpressionIdentifier expressionIdentifier)", "full_signature": "public  FactMapping(String factAlias, FactIdentifier factIdentifier, ExpressionIdentifier expressionIdentifier)", "class_method_signature": "FactMapping.FactMapping(String factAlias, FactIdentifier factIdentifier, ExpressionIdentifier expressionIdentifier)", "testcase": false, "constructor": true}, {"identifier": "FactMapping", "parameters": "(FactMapping original)", "modifiers": "private", "return": "", "signature": " FactMapping(FactMapping original)", "full_signature": "private  FactMapping(FactMapping original)", "class_method_signature": "FactMapping.FactMapping(FactMapping original)", "testcase": false, "constructor": true}, {"identifier": "getFullExpression", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFullExpression()", "full_signature": "public String getFullExpression()", "class_method_signature": "FactMapping.getFullExpression()", "testcase": false, "constructor": false}, {"identifier": "getExpressionElementsWithoutClass", "parameters": "()", "modifiers": "public", "return": "List<ExpressionElement>", "signature": "List<ExpressionElement> getExpressionElementsWithoutClass()", "full_signature": "public List<ExpressionElement> getExpressionElementsWithoutClass()", "class_method_signature": "FactMapping.getExpressionElementsWithoutClass()", "testcase": false, "constructor": false}, {"identifier": "getExpressionElements", "parameters": "()", "modifiers": "public", "return": "List<ExpressionElement>", "signature": "List<ExpressionElement> getExpressionElements()", "full_signature": "public List<ExpressionElement> getExpressionElements()", "class_method_signature": "FactMapping.getExpressionElements()", "testcase": false, "constructor": false}, {"identifier": "addExpressionElement", "parameters": "(String stepName, String className)", "modifiers": "public", "return": "void", "signature": "void addExpressionElement(String stepName, String className)", "full_signature": "public void addExpressionElement(String stepName, String className)", "class_method_signature": "FactMapping.addExpressionElement(String stepName, String className)", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClassName()", "full_signature": "public String getClassName()", "class_method_signature": "FactMapping.getClassName()", "testcase": false, "constructor": false}, {"identifier": "getExpressionIdentifier", "parameters": "()", "modifiers": "public", "return": "ExpressionIdentifier", "signature": "ExpressionIdentifier getExpressionIdentifier()", "full_signature": "public ExpressionIdentifier getExpressionIdentifier()", "class_method_signature": "FactMapping.getExpressionIdentifier()", "testcase": false, "constructor": false}, {"identifier": "getFactIdentifier", "parameters": "()", "modifiers": "public", "return": "FactIdentifier", "signature": "FactIdentifier getFactIdentifier()", "full_signature": "public FactIdentifier getFactIdentifier()", "class_method_signature": "FactMapping.getFactIdentifier()", "testcase": false, "constructor": false}, {"identifier": "getFactAlias", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFactAlias()", "full_signature": "public String getFactAlias()", "class_method_signature": "FactMapping.getFactAlias()", "testcase": false, "constructor": false}, {"identifier": "setFactAlias", "parameters": "(String factAlias)", "modifiers": "public", "return": "void", "signature": "void setFactAlias(String factAlias)", "full_signature": "public void setFactAlias(String factAlias)", "class_method_signature": "FactMapping.setFactAlias(String factAlias)", "testcase": false, "constructor": false}, {"identifier": "getExpressionAlias", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExpressionAlias()", "full_signature": "public String getExpressionAlias()", "class_method_signature": "FactMapping.getExpressionAlias()", "testcase": false, "constructor": false}, {"identifier": "setExpressionAlias", "parameters": "(String expressionAlias)", "modifiers": "public", "return": "void", "signature": "void setExpressionAlias(String expressionAlias)", "full_signature": "public void setExpressionAlias(String expressionAlias)", "class_method_signature": "FactMapping.setExpressionAlias(String expressionAlias)", "testcase": false, "constructor": false}, {"identifier": "getGenericTypes", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getGenericTypes()", "full_signature": "public List<String> getGenericTypes()", "class_method_signature": "FactMapping.getGenericTypes()", "testcase": false, "constructor": false}, {"identifier": "setGenericTypes", "parameters": "(List<String> genericTypes)", "modifiers": "public", "return": "void", "signature": "void setGenericTypes(List<String> genericTypes)", "full_signature": "public void setGenericTypes(List<String> genericTypes)", "class_method_signature": "FactMapping.setGenericTypes(List<String> genericTypes)", "testcase": false, "constructor": false}, {"identifier": "cloneFactMapping", "parameters": "()", "modifiers": "public", "return": "FactMapping", "signature": "FactMapping cloneFactMapping()", "full_signature": "public FactMapping cloneFactMapping()", "class_method_signature": "FactMapping.cloneFactMapping()", "testcase": false, "constructor": false}, {"identifier": "getPlaceHolder", "parameters": "(FactMappingType factMappingType)", "modifiers": "public static", "return": "String", "signature": "String getPlaceHolder(FactMappingType factMappingType)", "full_signature": "public static String getPlaceHolder(FactMappingType factMappingType)", "class_method_signature": "FactMapping.getPlaceHolder(FactMappingType factMappingType)", "testcase": false, "constructor": false}, {"identifier": "getPlaceHolder", "parameters": "(FactMappingType factMappingType, int index)", "modifiers": "public static", "return": "String", "signature": "String getPlaceHolder(FactMappingType factMappingType, int index)", "full_signature": "public static String getPlaceHolder(FactMappingType factMappingType, int index)", "class_method_signature": "FactMapping.getPlaceHolder(FactMappingType factMappingType, int index)", "testcase": false, "constructor": false}, {"identifier": "getFactMappingValueType", "parameters": "()", "modifiers": "public", "return": "FactMappingValueType", "signature": "FactMappingValueType getFactMappingValueType()", "full_signature": "public FactMappingValueType getFactMappingValueType()", "class_method_signature": "FactMapping.getFactMappingValueType()", "testcase": false, "constructor": false}, {"identifier": "setFactMappingValueType", "parameters": "(FactMappingValueType factMappingValueType)", "modifiers": "public", "return": "void", "signature": "void setFactMappingValueType(FactMappingValueType factMappingValueType)", "full_signature": "public void setFactMappingValueType(FactMappingValueType factMappingValueType)", "class_method_signature": "FactMapping.setFactMappingValueType(FactMappingValueType factMappingValueType)", "testcase": false, "constructor": false}, {"identifier": "getInstancePlaceHolder", "parameters": "(int index)", "modifiers": "public static", "return": "String", "signature": "String getInstancePlaceHolder(int index)", "full_signature": "public static String getInstancePlaceHolder(int index)", "class_method_signature": "FactMapping.getInstancePlaceHolder(int index)", "testcase": false, "constructor": false}, {"identifier": "getPropertyPlaceHolder", "parameters": "(int index)", "modifiers": "public static", "return": "String", "signature": "String getPropertyPlaceHolder(int index)", "full_signature": "public static String getPropertyPlaceHolder(int index)", "class_method_signature": "FactMapping.getPropertyPlaceHolder(int index)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "FactMapping.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "FactMapping.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getColumnWidth", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getColumnWidth()", "full_signature": "public Double getColumnWidth()", "class_method_signature": "FactMapping.getColumnWidth()", "testcase": false, "constructor": false}, {"identifier": "setColumnWidth", "parameters": "(Double columnWidth)", "modifiers": "public", "return": "void", "signature": "void setColumnWidth(Double columnWidth)", "full_signature": "public void setColumnWidth(Double columnWidth)", "class_method_signature": "FactMapping.setColumnWidth(Double columnWidth)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/FactMapping.java"}, "focal_method": {"identifier": "getExpressionElementsWithoutClass", "parameters": "()", "modifiers": "public", "return": "List<ExpressionElement>", "body": "public List<ExpressionElement> getExpressionElementsWithoutClass() {\n        if (expressionElements.isEmpty()) {\n            throw new IllegalStateException(\"ExpressionElements malformed\");\n        }\n        return expressionElements.subList(1, expressionElements.size());\n    }", "signature": "List<ExpressionElement> getExpressionElementsWithoutClass()", "full_signature": "public List<ExpressionElement> getExpressionElementsWithoutClass()", "class_method_signature": "FactMapping.getExpressionElementsWithoutClass()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "subList", "size"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}