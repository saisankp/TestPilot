{"test_class": {"identifier": "AnomalyToMetricMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AnomalyToMetricMapper mapperUnderTest;", "modifier": "private", "type": "AnomalyToMetricMapper", "declarator": "mapperUnderTest", "var_name": "mapperUnderTest"}, {"original_string": "private MappedMetricData anomalyWithStringMetricKey;", "modifier": "private", "type": "MappedMetricData", "declarator": "anomalyWithStringMetricKey", "var_name": "anomalyWithStringMetricKey"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/AnomalyToMetricMapperTest.java"}, "test_case": {"identifier": "testToMetricDataMapsNullToNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToMetricDataMapsNullToNull() {\n        assertNull(mapperUnderTest.toMetricData(null));\n    }", "signature": "void testToMetricDataMapsNullToNull()", "full_signature": "@Test public void testToMetricDataMapsNullToNull()", "class_method_signature": "AnomalyToMetricMapperTest.testToMetricDataMapsNullToNull()", "testcase": true, "constructor": false, "invocations": ["assertNull", "toMetricData"]}, "focal_class": {"identifier": "AnomalyToMetricMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static String AA_DETECTOR_UUID = \"aa_detector_uuid\";", "modifier": "public static", "type": "String", "declarator": "AA_DETECTOR_UUID = \"aa_detector_uuid\"", "var_name": "AA_DETECTOR_UUID"}, {"original_string": "public static String AA_ANOMALY_LEVEL = \"aa_anomaly_level\";", "modifier": "public static", "type": "String", "declarator": "AA_ANOMALY_LEVEL = \"aa_anomaly_level\"", "var_name": "AA_ANOMALY_LEVEL"}], "methods": [{"identifier": "toMetricData", "parameters": "(MappedMetricData anomaly)", "modifiers": "public", "return": "MetricData", "signature": "MetricData toMetricData(MappedMetricData anomaly)", "full_signature": "public MetricData toMetricData(MappedMetricData anomaly)", "class_method_signature": "AnomalyToMetricMapper.toMetricData(MappedMetricData anomaly)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/AnomalyToMetricMapper.java"}, "focal_method": {"identifier": "toMetricData", "parameters": "(MappedMetricData anomaly)", "modifiers": "public", "return": "MetricData", "body": "public MetricData toMetricData(MappedMetricData anomaly) {\n        if (anomaly == null) {\n            return null;\n        }\n\n        val metricData = anomaly.getMetricData();\n        val metricDef = metricData.getMetricDefinition();\n        val tags = metricDef.getTags();\n        val kvTags = tags.getKv();\n\n        // Reverting back to returning null instead of generating an exception. We get to define the transform we want\n        // here, and I don't see an advantage to generating an exception when the proper transform at the Kafka level\n        // is to transform it into a null too. It reduces the burden on the client. [WLW]\n        if (kvTags.containsKey(AA_DETECTOR_UUID) || kvTags.containsKey(AA_ANOMALY_LEVEL)) {\n            return null;\n        }\n\n        val detectorUuid = anomaly.getDetectorUuid();\n        val outlierResult = (OutlierDetectorResult) anomaly.getAnomalyResult();\n        val outlierLevel = outlierResult.getAnomalyLevel();\n\n        AssertUtil.notNull(detectorUuid, \"detectorUuid can't be null\");\n        AssertUtil.notNull(outlierLevel, \"anomalyLevel can't be null\");\n\n        val newKVTags = new HashMap<>(kvTags);\n        newKVTags.put(AA_DETECTOR_UUID, detectorUuid.toString());\n        newKVTags.put(AA_ANOMALY_LEVEL, outlierLevel.toString());\n\n        val newKey = metricDef.getKey();\n        val newTags = new TagCollection(newKVTags, Collections.EMPTY_SET);\n        val newMeta = new TagCollection(Collections.EMPTY_MAP);\n        val newMetricDef = new MetricDefinition(newKey, newTags, newMeta);\n        val value = metricData.getValue();\n        val timestamp = metricData.getTimestamp();\n\n        return new MetricData(newMetricDef, value, timestamp);\n    }", "signature": "MetricData toMetricData(MappedMetricData anomaly)", "full_signature": "public MetricData toMetricData(MappedMetricData anomaly)", "class_method_signature": "AnomalyToMetricMapper.toMetricData(MappedMetricData anomaly)", "testcase": false, "constructor": false, "invocations": ["getMetricData", "getMetricDefinition", "getTags", "getKv", "containsKey", "containsKey", "getDetectorUuid", "getAnomalyResult", "getAnomalyLevel", "notNull", "notNull", "put", "toString", "put", "toString", "getKey", "getValue", "getTimestamp"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}