{"test_class": {"identifier": "XslResponseGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final byte[] requestXml = new byte[1];", "modifier": "private final", "type": "byte[]", "declarator": "requestXml = new byte[1]", "var_name": "requestXml"}, {"original_string": "private final byte[] xsl = new byte[2];", "modifier": "private final", "type": "byte[]", "declarator": "xsl = new byte[2]", "var_name": "xsl"}, {"original_string": "private final byte[] templateXml = new byte[3];", "modifier": "private final", "type": "byte[]", "declarator": "templateXml = new byte[3]", "var_name": "templateXml"}, {"original_string": "@Mock\n    private XslTransformer transformer;", "modifier": "@Mock\n    private", "type": "XslTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Mock\n    private ByteArrayInputStreamFactory inputStreamFactory;", "modifier": "@Mock\n    private", "type": "ByteArrayInputStreamFactory", "declarator": "inputStreamFactory", "var_name": "inputStreamFactory"}, {"original_string": "@Mock\n    private ByteArrayInputStream requestInputStream;", "modifier": "@Mock\n    private", "type": "ByteArrayInputStream", "declarator": "requestInputStream", "var_name": "requestInputStream"}, {"original_string": "@Mock\n    private ByteArrayInputStream xslInputStream;", "modifier": "@Mock\n    private", "type": "ByteArrayInputStream", "declarator": "xslInputStream", "var_name": "xslInputStream"}, {"original_string": "@Mock\n    private ByteArrayInputStream templateInputStream;", "modifier": "@Mock\n    private", "type": "ByteArrayInputStream", "declarator": "templateInputStream", "var_name": "templateInputStream"}, {"original_string": "@InjectMocks\n    private XslResponseGenerator underTest;", "modifier": "@InjectMocks\n    private", "type": "XslResponseGenerator", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/stub/response/formatter/xsl/XslResponseGeneratorTest.java"}, "test_case": {"identifier": "testGenerateResponseWhenSAXExceptionDuringTransformShouldThrowException", "parameters": "()", "modifiers": "@Test(expectedExceptions = ResponseFormattingFailedException.class) public", "return": "void", "body": "@Test(expectedExceptions = ResponseFormattingFailedException.class)\n    public void testGenerateResponseWhenSAXExceptionDuringTransformShouldThrowException() throws SaxonApiException, SAXException {\n        //GIVEN\n        given(transformer.transform(xslInputStream, requestInputStream, templateInputStream)).willThrow(new SAXException());\n        //WHEN\n        underTest.generateResponse(requestXml, xsl, templateXml);\n        //THEN it should throw excpetion\n    }", "signature": "void testGenerateResponseWhenSAXExceptionDuringTransformShouldThrowException()", "full_signature": "@Test(expectedExceptions = ResponseFormattingFailedException.class) public void testGenerateResponseWhenSAXExceptionDuringTransformShouldThrowException()", "class_method_signature": "XslResponseGeneratorTest.testGenerateResponseWhenSAXExceptionDuringTransformShouldThrowException()", "testcase": true, "constructor": false, "invocations": ["willThrow", "given", "transform", "generateResponse"]}, "focal_class": {"identifier": "XslResponseGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private XslTransformer transformer;", "modifier": "@Autowired\n    private", "type": "XslTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Autowired\n    private ByteArrayInputStreamFactory inputStreamFactory;", "modifier": "@Autowired\n    private", "type": "ByteArrayInputStreamFactory", "declarator": "inputStreamFactory", "var_name": "inputStreamFactory"}], "methods": [{"identifier": "generateResponse", "parameters": "(final byte[] requestXml, final byte[] xsl, final byte[] template)", "modifiers": "public", "return": "byte[]", "signature": "byte[] generateResponse(final byte[] requestXml, final byte[] xsl, final byte[] template)", "full_signature": "public byte[] generateResponse(final byte[] requestXml, final byte[] xsl, final byte[] template)", "class_method_signature": "XslResponseGenerator.generateResponse(final byte[] requestXml, final byte[] xsl, final byte[] template)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/stub/response/formatter/xsl/XslResponseGenerator.java"}, "focal_method": {"identifier": "generateResponse", "parameters": "(final byte[] requestXml, final byte[] xsl, final byte[] template)", "modifiers": "public", "return": "byte[]", "body": "public byte[] generateResponse(final byte[] requestXml, final byte[] xsl, final byte[] template) {\n        byte[] result = null;\n        InputStream requestInputStream = inputStreamFactory.createByteArrayInputStream(requestXml);\n        InputStream xslInputStream = inputStreamFactory.createByteArrayInputStream(xsl);\n        InputStream templateInputStream = inputStreamFactory.createByteArrayInputStream(template);\n        try {\n            result = transformer.transform(xslInputStream, requestInputStream, templateInputStream);\n        } catch (Exception e) {\n            throw new ResponseFormattingFailedException(\"Template formatting failed with xslt:\" + xsl, e);\n        }\n        return result;\n    }", "signature": "byte[] generateResponse(final byte[] requestXml, final byte[] xsl, final byte[] template)", "full_signature": "public byte[] generateResponse(final byte[] requestXml, final byte[] xsl, final byte[] template)", "class_method_signature": "XslResponseGenerator.generateResponse(final byte[] requestXml, final byte[] xsl, final byte[] template)", "testcase": false, "constructor": false, "invocations": ["createByteArrayInputStream", "createByteArrayInputStream", "createByteArrayInputStream", "transform"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}