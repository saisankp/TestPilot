{"test_class": {"identifier": "GaugesServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private HttpRequest request;", "modifier": "@Mock\n    private", "type": "HttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private GaugesService service;", "modifier": "private", "type": "GaugesService", "declarator": "service", "var_name": "service"}], "file": "app/src/test/java/com/github/mobile/gauges/core/GaugesServiceTest.java"}, "test_case": {"identifier": "getGaugesEmptyResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getGaugesEmptyResponse() throws IOException {\n        doReturn(createReader(\"\")).when(request).bufferedReader();\n        List<Gauge> gauges = service.getGauges();\n        assertNotNull(gauges);\n        assertTrue(gauges.isEmpty());\n    }", "signature": "void getGaugesEmptyResponse()", "full_signature": "@Test public void getGaugesEmptyResponse()", "class_method_signature": "GaugesServiceTest.getGaugesEmptyResponse()", "testcase": true, "constructor": false, "invocations": ["bufferedReader", "when", "doReturn", "createReader", "getGauges", "assertNotNull", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "GaugesService", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Gson GSON = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\")\n            .setFieldNamingPolicy(LOWER_CASE_WITH_UNDERSCORES).create();", "modifier": "public static final", "type": "Gson", "declarator": "GSON = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\")\n            .setFieldNamingPolicy(LOWER_CASE_WITH_UNDERSCORES).create()", "var_name": "GSON"}, {"original_string": "private static final int TIMEOUT = 30 * 1000;", "modifier": "private static final", "type": "int", "declarator": "TIMEOUT = 30 * 1000", "var_name": "TIMEOUT"}, {"original_string": "private final String apiKey;", "modifier": "private final", "type": "String", "declarator": "apiKey", "var_name": "apiKey"}, {"original_string": "private final String username;", "modifier": "private final", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private final String password;", "modifier": "private final", "type": "String", "declarator": "password", "var_name": "password"}], "methods": [{"identifier": "GaugesService", "parameters": "(final String username, final String password)", "modifiers": "public", "return": "", "signature": " GaugesService(final String username, final String password)", "full_signature": "public  GaugesService(final String username, final String password)", "class_method_signature": "GaugesService.GaugesService(final String username, final String password)", "testcase": false, "constructor": true}, {"identifier": "GaugesService", "parameters": "(final String apiKey)", "modifiers": "public", "return": "", "signature": " GaugesService(final String apiKey)", "full_signature": "public  GaugesService(final String apiKey)", "class_method_signature": "GaugesService.GaugesService(final String apiKey)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(HttpRequest request)", "modifiers": "protected", "return": "HttpRequest", "signature": "HttpRequest execute(HttpRequest request)", "full_signature": "protected HttpRequest execute(HttpRequest request)", "class_method_signature": "GaugesService.execute(HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(final HttpRequest request)", "modifiers": "private", "return": "HttpRequest", "signature": "HttpRequest configure(final HttpRequest request)", "full_signature": "private HttpRequest configure(final HttpRequest request)", "class_method_signature": "GaugesService.configure(final HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "addCredentialsTo", "parameters": "(HttpRequest request)", "modifiers": "private", "return": "HttpRequest", "signature": "HttpRequest addCredentialsTo(HttpRequest request)", "full_signature": "private HttpRequest addCredentialsTo(HttpRequest request)", "class_method_signature": "GaugesService.addCredentialsTo(HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(HttpRequest request, Class<V> target)", "modifiers": "private", "return": "V", "signature": "V fromJson(HttpRequest request, Class<V> target)", "full_signature": "private V fromJson(HttpRequest request, Class<V> target)", "class_method_signature": "GaugesService.fromJson(HttpRequest request, Class<V> target)", "testcase": false, "constructor": false}, {"identifier": "getGauges", "parameters": "()", "modifiers": "public", "return": "List<Gauge>", "signature": "List<Gauge> getGauges()", "full_signature": "public List<Gauge> getGauges()", "class_method_signature": "GaugesService.getGauges()", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(String gaugeId)", "modifiers": "public", "return": "List<PageContent>", "signature": "List<PageContent> getContent(String gaugeId)", "full_signature": "public List<PageContent> getContent(String gaugeId)", "class_method_signature": "GaugesService.getContent(String gaugeId)", "testcase": false, "constructor": false}, {"identifier": "getReferrers", "parameters": "(String gaugeId)", "modifiers": "public", "return": "List<Referrer>", "signature": "List<Referrer> getReferrers(String gaugeId)", "full_signature": "public List<Referrer> getReferrers(String gaugeId)", "class_method_signature": "GaugesService.getReferrers(String gaugeId)", "testcase": false, "constructor": false}, {"identifier": "createClient", "parameters": "(String description)", "modifiers": "public", "return": "Client", "signature": "Client createClient(String description)", "full_signature": "public Client createClient(String description)", "class_method_signature": "GaugesService.createClient(String description)", "testcase": false, "constructor": false}, {"identifier": "getClient", "parameters": "(String description)", "modifiers": "public", "return": "Client", "signature": "Client getClient(String description)", "full_signature": "public Client getClient(String description)", "class_method_signature": "GaugesService.getClient(String description)", "testcase": false, "constructor": false}, {"identifier": "getGauge", "parameters": "(String gaugeId)", "modifiers": "public", "return": "Gauge", "signature": "Gauge getGauge(String gaugeId)", "full_signature": "public Gauge getGauge(String gaugeId)", "class_method_signature": "GaugesService.getGauge(String gaugeId)", "testcase": false, "constructor": false}, {"identifier": "getPusherAuth", "parameters": "(final String socketId, final String channelName)", "modifiers": "public", "return": "String", "signature": "String getPusherAuth(final String socketId, final String channelName)", "full_signature": "public String getPusherAuth(final String socketId, final String channelName)", "class_method_signature": "GaugesService.getPusherAuth(final String socketId, final String channelName)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/github/mobile/gauges/core/GaugesService.java"}, "focal_method": {"identifier": "getGauges", "parameters": "()", "modifiers": "public", "return": "List<Gauge>", "body": "public List<Gauge> getGauges() throws IOException {\n        try {\n            HttpRequest request = execute(HttpRequest.get(URL_EMBEDDED));\n            GaugesWrapper response = fromJson(request, GaugesWrapper.class);\n            if (response != null && response.gauges != null)\n                return response.gauges;\n            return Collections.emptyList();\n        } catch (HttpRequestException e) {\n            throw e.getCause();\n        }\n    }", "signature": "List<Gauge> getGauges()", "full_signature": "public List<Gauge> getGauges()", "class_method_signature": "GaugesService.getGauges()", "testcase": false, "constructor": false, "invocations": ["execute", "get", "fromJson", "emptyList", "getCause"]}, "repository": {"repo_id": 3223269, "url": "https://github.com/gaugesapp/gauges-android", "language": "Java", "is_fork": false, "fork_count": 226, "stargazer_count": 715, "size": 2079, "license": "licensed"}}