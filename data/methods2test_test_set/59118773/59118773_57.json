{"test_class": {"identifier": "CountPlansTendersAwardsControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CountPlansTendersAwardsController countPlansTendersAwardsController;", "modifier": "@Autowired\n    private", "type": "CountPlansTendersAwardsController", "declarator": "countPlansTendersAwardsController", "var_name": "countPlansTendersAwardsController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/CountPlansTendersAwardsControllerTest.java"}, "test_case": {"identifier": "countTendersByYear", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void countTendersByYear() throws Exception {\n        final List<Document> countTendersByYear = countPlansTendersAwardsController\n                .countTendersByYear(new YearFilterPagingRequest());\n\n        final Document first = countTendersByYear.get(0);\n        int year = (int) first.get(CountPlansTendersAwardsController.Keys.YEAR);\n        int count = (int) first.get(CountPlansTendersAwardsController.Keys.COUNT);\n        Assert.assertEquals(2014, year);\n        Assert.assertEquals(1, count);\n\n        final Document second = countTendersByYear.get(1);\n        year = (int) second.get(CountPlansTendersAwardsController.Keys.YEAR);\n        count = (int) second.get(CountPlansTendersAwardsController.Keys.COUNT);\n        Assert.assertEquals(2015, year);\n        Assert.assertEquals(2, count);\n    }", "signature": "void countTendersByYear()", "full_signature": "@Test public void countTendersByYear()", "class_method_signature": "CountPlansTendersAwardsControllerTest.countTendersByYear()", "testcase": true, "constructor": false, "invocations": ["countTendersByYear", "get", "get", "get", "assertEquals", "assertEquals", "get", "get", "get", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "CountPlansTendersAwardsController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "countTendersByYear", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Count the tenders and group the results by year. The year is calculated from \" + \"tender.tenderPeriod.startDate.\") @RequestMapping(value = \"/api/countTendersByYear\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> countTendersByYear(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Count the tenders and group the results by year. The year is calculated from \" + \"tender.tenderPeriod.startDate.\") @RequestMapping(value = \"/api/countTendersByYear\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> countTendersByYear(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "CountPlansTendersAwardsController.countTendersByYear(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "countAwardsByYear", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Count the awards and group the results by year. \" + \"The year is calculated from the awards.date field.\") @RequestMapping(value = \"/api/countAwardsByYear\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> countAwardsByYear(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Count the awards and group the results by year. \" + \"The year is calculated from the awards.date field.\") @RequestMapping(value = \"/api/countAwardsByYear\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> countAwardsByYear(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "CountPlansTendersAwardsController.countAwardsByYear(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/CountPlansTendersAwardsController.java"}, "focal_method": {"identifier": "countTendersByYear", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Count the tenders and group the results by year. The year is calculated from \" + \"tender.tenderPeriod.startDate.\") @RequestMapping(value = \"/api/countTendersByYear\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"Count the tenders and group the results by year. The year is calculated from \"\n            + \"tender.tenderPeriod.startDate.\")\n    @RequestMapping(value = \"/api/countTendersByYear\",\n            method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\")\n    public List<Document> countTendersByYear(@ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n        DBObject project = new BasicDBObject();\n        addYearlyMonthlyProjection(filter, project, ref(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE));\n\n        Aggregation agg = Aggregation.newAggregation(match(\n                where(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE).exists(true).\n                        andOperator(getYearDefaultFilterCriteria(filter,\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE\n                        ))),\n                new CustomOperation(new Document(\"$project\", project)),\n                group(getYearlyMonthlyGroupingFields(filter)).count().as(Keys.COUNT),\n                transformYearlyGrouping(filter).andInclude(Keys.COUNT),\n                getSortByYearMonth(filter),\n                skip(filter.getSkip()), limit(filter.getPageSize())\n        );\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> countTendersByYear(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Count the tenders and group the results by year. The year is calculated from \" + \"tender.tenderPeriod.startDate.\") @RequestMapping(value = \"/api/countTendersByYear\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> countTendersByYear(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "CountPlansTendersAwardsController.countTendersByYear(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["addYearlyMonthlyProjection", "ref", "newAggregation", "match", "andOperator", "exists", "where", "getYearDefaultFilterCriteria", "as", "count", "group", "getYearlyMonthlyGroupingFields", "andInclude", "transformYearlyGrouping", "getSortByYearMonth", "skip", "getSkip", "limit", "getPageSize", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}