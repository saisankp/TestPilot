{"test_class": {"identifier": "RollbackActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ApiDate NOW = ApiDate.now();", "modifier": "private static final", "type": "ApiDate", "declarator": "NOW = ApiDate.now()", "var_name": "NOW"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock KeywhizClient keywhizClient;", "modifier": "@Mock", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "RollbackActionConfig rollbackActionConfig;", "modifier": "", "type": "RollbackActionConfig", "declarator": "rollbackActionConfig", "var_name": "rollbackActionConfig"}, {"original_string": "RollbackAction rollbackAction;", "modifier": "", "type": "RollbackAction", "declarator": "rollbackAction", "var_name": "rollbackAction"}, {"original_string": "Secret secret = new Secret(0, \"secret\", null, () -> \"c2VjcmV0MQ==\", \"checksum\", NOW, null, NOW, null, null, null,\n      ImmutableMap.of(), 0, 1L, NOW, null);", "modifier": "", "type": "Secret", "declarator": "secret = new Secret(0, \"secret\", null, () -> \"c2VjcmV0MQ==\", \"checksum\", NOW, null, NOW, null, null, null,\n      ImmutableMap.of(), 0, 1L, NOW, null)", "var_name": "secret"}, {"original_string": "SanitizedSecret sanitizedSecret = SanitizedSecret.fromSecret(secret);", "modifier": "", "type": "SanitizedSecret", "declarator": "sanitizedSecret = SanitizedSecret.fromSecret(secret)", "var_name": "sanitizedSecret"}, {"original_string": "ByteArrayInputStream yes;", "modifier": "", "type": "ByteArrayInputStream", "declarator": "yes", "var_name": "yes"}, {"original_string": "ByteArrayInputStream no;", "modifier": "", "type": "ByteArrayInputStream", "declarator": "no", "var_name": "no"}], "file": "cli/src/test/java/keywhiz/cli/commands/RollbackActionTest.java"}, "test_case": {"identifier": "rollbackThrowsIfIllegalIdInput", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n  public void rollbackThrowsIfIllegalIdInput() throws Exception {\n    rollbackAction.inputStream = yes;\n    rollbackActionConfig.name = secret.getDisplayName();\n    rollbackActionConfig.id = 1L;\n\n    when(keywhizClient.getSanitizedSecretByName(secret.getName())).thenReturn(sanitizedSecret);\n    when(keywhizClient.rollbackSecret(secret.getDisplayName(), 1L)).thenThrow(new IllegalStateException());\n\n    rollbackAction.run();\n  }", "signature": "void rollbackThrowsIfIllegalIdInput()", "full_signature": "@Test(expected = IllegalStateException.class) public void rollbackThrowsIfIllegalIdInput()", "class_method_signature": "RollbackActionTest.rollbackThrowsIfIllegalIdInput()", "testcase": true, "constructor": false, "invocations": ["getDisplayName", "thenReturn", "when", "getSanitizedSecretByName", "getName", "thenThrow", "when", "rollbackSecret", "getDisplayName", "run"]}, "focal_class": {"identifier": "RollbackAction", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RollbackAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RollbackAction.class)", "var_name": "logger"}, {"original_string": "private final RollbackActionConfig rollbackActionConfig;", "modifier": "private final", "type": "RollbackActionConfig", "declarator": "rollbackActionConfig", "var_name": "rollbackActionConfig"}, {"original_string": "private final KeywhizClient keywhizClient;", "modifier": "private final", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "@VisibleForTesting\n  InputStream inputStream = System.in;", "modifier": "@VisibleForTesting", "type": "InputStream", "declarator": "inputStream = System.in", "var_name": "inputStream"}], "methods": [{"identifier": "RollbackAction", "parameters": "(RollbackActionConfig rollbackActionConfig, KeywhizClient client)", "modifiers": "public", "return": "", "signature": " RollbackAction(RollbackActionConfig rollbackActionConfig, KeywhizClient client)", "full_signature": "public  RollbackAction(RollbackActionConfig rollbackActionConfig, KeywhizClient client)", "class_method_signature": "RollbackAction.RollbackAction(RollbackActionConfig rollbackActionConfig, KeywhizClient client)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "RollbackAction.run()", "testcase": false, "constructor": false}], "file": "cli/src/main/java/keywhiz/cli/commands/RollbackAction.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override public void run() {\n    try {\n      if (rollbackActionConfig.name == null || !validName(rollbackActionConfig.name)) {\n        throw new IllegalArgumentException(\n            format(\"Invalid name, must match %s\", VALID_NAME_PATTERN));\n      }\n\n      if (rollbackActionConfig.id == null) {\n        throw new IllegalArgumentException(\n            \"Version ID must be specified for rollback.  List the secret's versions to view IDs.\");\n      }\n\n      SanitizedSecret sanitizedSecret =\n          keywhizClient.getSanitizedSecretByName(rollbackActionConfig.name);\n\n      // Get user confirmation for the rollback\n      BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, UTF_8));\n      while (true) {\n        System.out.println(\n            format(\"Please confirm rollback of secret '%s' to version with ID %d: Y/N\",\n                sanitizedSecret.name(), rollbackActionConfig.id));\n        String line = reader.readLine();\n\n        if (line == null /* EOF */ || line.toUpperCase().startsWith(\"N\")) {\n          return;\n        } else if (line.toUpperCase().startsWith(\"Y\")) {\n          logger.info(\"Rolling back secret '{}' to version {}\", sanitizedSecret.name(),\n              rollbackActionConfig.id);\n          keywhizClient.rollbackSecret(sanitizedSecret.name(), rollbackActionConfig.id);\n          return;\n        } // else loop again\n      }\n    } catch (NotFoundException e) {\n      throw new AssertionError(\"Secret does not exist: \" + rollbackActionConfig.name);\n    } catch (IOException e) {\n      throw new AssertionError(String.format(\n          \"Error executing rollback; check whether ID %d is a valid version ID for secret %s by listing the secret's versions%nError: %s\",\n          rollbackActionConfig.id, rollbackActionConfig.name, e.getMessage()));\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "RollbackAction.run()", "testcase": false, "constructor": false, "invocations": ["validName", "format", "getSanitizedSecretByName", "println", "format", "name", "readLine", "startsWith", "toUpperCase", "startsWith", "toUpperCase", "info", "name", "rollbackSecret", "name", "format", "getMessage", "propagate"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}