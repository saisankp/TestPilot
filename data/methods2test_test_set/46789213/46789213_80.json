{"test_class": {"identifier": "DummyArithmeticBuilderFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProtocolBuilderNumeric builder;", "modifier": "private", "type": "ProtocolBuilderNumeric", "declarator": "builder", "var_name": "builder"}, {"original_string": "private BasicNumericContext context;", "modifier": "private", "type": "BasicNumericContext", "declarator": "context", "var_name": "context"}, {"original_string": "private DummyArithmeticNativeProtocol<SInt> result;", "modifier": "private", "type": "DummyArithmeticNativeProtocol<SInt>", "declarator": "result", "var_name": "result"}, {"original_string": "private BigInteger rolledBit;", "modifier": "private", "type": "BigInteger", "declarator": "rolledBit", "var_name": "rolledBit"}, {"original_string": "private FieldElement fieldElement;", "modifier": "private", "type": "FieldElement", "declarator": "fieldElement", "var_name": "fieldElement"}], "file": "core/src/test/java/dk/alexandra/fresco/suite/dummy/arithmetic/DummyArithmeticBuilderFactoryTest.java"}, "test_case": {"identifier": "createNumericRandomElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void createNumericRandomElement() {\n    BuilderFactoryNumeric dummy = new DummyArithmeticBuilderFactory(context);\n    Numeric numeric = dummy.createNumeric(builder);\n    numeric.randomBit();\n    Assert.assertNotNull(result);\n    Assert.assertEquals(\n        result.evaluate(0, mock(DummyArithmeticResourcePool.class), mock(Network.class)),\n        EvaluationStatus.IS_DONE);\n    Assert.assertTrue(rolledBit.intValue() >= 0);\n    Assert.assertTrue(rolledBit.intValue() < 2);\n\n    Assert.assertTrue(result.out().toString().contains(\"Mock for FieldElement\"));\n  }", "signature": "void createNumericRandomElement()", "full_signature": "@Test public void createNumericRandomElement()", "class_method_signature": "DummyArithmeticBuilderFactoryTest.createNumericRandomElement()", "testcase": true, "constructor": false, "invocations": ["createNumeric", "randomBit", "assertNotNull", "assertEquals", "evaluate", "mock", "mock", "assertTrue", "intValue", "assertTrue", "intValue", "assertTrue", "contains", "toString", "out"]}, "focal_class": {"identifier": "DummyArithmeticBuilderFactory", "superclass": "", "interfaces": "implements BuilderFactoryNumeric", "fields": [{"original_string": "private BasicNumericContext basicNumericContext;", "modifier": "private", "type": "BasicNumericContext", "declarator": "basicNumericContext", "var_name": "basicNumericContext"}, {"original_string": "private Random rand;", "modifier": "private", "type": "Random", "declarator": "rand", "var_name": "rand"}], "methods": [{"identifier": "DummyArithmeticBuilderFactory", "parameters": "(BasicNumericContext basicNumericContext)", "modifiers": "public", "return": "", "signature": " DummyArithmeticBuilderFactory(BasicNumericContext basicNumericContext)", "full_signature": "public  DummyArithmeticBuilderFactory(BasicNumericContext basicNumericContext)", "class_method_signature": "DummyArithmeticBuilderFactory.DummyArithmeticBuilderFactory(BasicNumericContext basicNumericContext)", "testcase": false, "constructor": true}, {"identifier": "getBasicNumericContext", "parameters": "()", "modifiers": "@Override public", "return": "BasicNumericContext", "signature": "BasicNumericContext getBasicNumericContext()", "full_signature": "@Override public BasicNumericContext getBasicNumericContext()", "class_method_signature": "DummyArithmeticBuilderFactory.getBasicNumericContext()", "testcase": false, "constructor": false}, {"identifier": "createNumeric", "parameters": "(ProtocolBuilderNumeric builder)", "modifiers": "@Override public", "return": "Numeric", "signature": "Numeric createNumeric(ProtocolBuilderNumeric builder)", "full_signature": "@Override public Numeric createNumeric(ProtocolBuilderNumeric builder)", "class_method_signature": "DummyArithmeticBuilderFactory.createNumeric(ProtocolBuilderNumeric builder)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/suite/dummy/arithmetic/DummyArithmeticBuilderFactory.java"}, "focal_method": {"identifier": "createNumeric", "parameters": "(ProtocolBuilderNumeric builder)", "modifiers": "@Override public", "return": "Numeric", "body": "@Override\n  public Numeric createNumeric(ProtocolBuilderNumeric builder) {\n    return new Numeric() {\n\n      private DummyArithmeticSInt createSIntFromConstant(BigInteger b) {\n        return new DummyArithmeticSInt(basicNumericContext.getFieldDefinition().createElement(b));\n      }\n\n      @Override\n      public DRes<SInt> sub(DRes<SInt> a, BigInteger b) {\n        DummyArithmeticNativeProtocol<SInt> c =\n            new DummyArithmeticSubtractProtocol(a, () -> createSIntFromConstant(b));\n        return builder.append(c);\n      }\n\n      @Override\n      public DRes<SInt> sub(BigInteger a, DRes<SInt> b) {\n        DummyArithmeticSubtractProtocol c =\n            new DummyArithmeticSubtractProtocol(() -> createSIntFromConstant(a), b);\n        return builder.append(c);\n      }\n\n      @Override\n      public DRes<SInt> sub(DRes<SInt> a, DRes<SInt> b) {\n        DummyArithmeticSubtractProtocol c = new DummyArithmeticSubtractProtocol(a, b);\n        return builder.append(c);\n      }\n\n      @Override\n      public DRes<SInt> randomElement() {\n        DummyArithmeticNativeProtocol<SInt> c = new DummyArithmeticNativeProtocol<SInt>() {\n\n          DummyArithmeticSInt elm;\n\n          @Override\n          public EvaluationStatus evaluate(int round, DummyArithmeticResourcePool resourcePool,\n              Network network) {\n            BigInteger r;\n            BigInteger modulus = basicNumericContext.getModulus();\n            do {\n              r = new BigInteger(modulus.bitLength() + 1, rand);\n            } while (r.compareTo(modulus) >= 0);\n            elm = createSIntFromConstant(r);\n            return EvaluationStatus.IS_DONE;\n          }\n\n          @Override\n          public SInt out() {\n            return elm;\n          }\n        };\n        return builder.append(c);\n      }\n\n      @Override\n      public DRes<SInt> randomBit() {\n        DummyArithmeticNativeProtocol<SInt> c = new DummyArithmeticNativeProtocol<SInt>() {\n\n          DummyArithmeticSInt bit;\n\n          @Override\n          public EvaluationStatus evaluate(int round, DummyArithmeticResourcePool resourcePool,\n              Network network) {\n            bit = createSIntFromConstant(BigInteger.valueOf(rand.nextInt(2)));\n            return EvaluationStatus.IS_DONE;\n          }\n\n          @Override\n          public SInt out() {\n            return bit;\n          }\n        };\n        return builder.append(c);\n      }\n\n      @Override\n      public DRes<BigInteger> open(DRes<SInt> secretShare) {\n        DummyArithmeticOpenToAllProtocol c = new DummyArithmeticOpenToAllProtocol(secretShare);\n        return builder.append(c);\n      }\n\n      @Override\n      public DRes<BigInteger> open(DRes<SInt> secretShare, int outputParty) {\n        DummyArithmeticOpenProtocol c = new DummyArithmeticOpenProtocol(secretShare, outputParty);\n        return builder.append(c);\n      }\n\n      @Override\n      public DRes<SInt> mult(BigInteger a, DRes<SInt> b) {\n        DummyArithmeticMultProtocol c =\n            new DummyArithmeticMultProtocol(() -> createSIntFromConstant(a), b);\n        return builder.append(c);\n      }\n\n      @Override\n      public DRes<SInt> mult(DRes<SInt> a, DRes<SInt> b) {\n        DummyArithmeticMultProtocol c = new DummyArithmeticMultProtocol(a, b);\n        return builder.append(c);\n      }\n\n      @Override\n      public DRes<SInt> known(BigInteger value) {\n        DummyArithmeticNativeProtocol<SInt> c = new DummyArithmeticNativeProtocol<SInt>() {\n\n          DummyArithmeticSInt val;\n\n          @Override\n          public EvaluationStatus evaluate(int round, DummyArithmeticResourcePool resourcePool,\n              Network network) {\n            val = createSIntFromConstant(value);\n            return EvaluationStatus.IS_DONE;\n          }\n\n          @Override\n          public SInt out() {\n            return val;\n          }\n        };\n        return builder.append(c);\n      }\n\n      @Override\n      public DRes<SInt> input(BigInteger value, int inputParty) {\n        FieldElement open =\n            value != null ? basicNumericContext.getFieldDefinition().createElement(value) : null;\n        DummyArithmeticCloseProtocol c = new DummyArithmeticCloseProtocol(open, inputParty);\n        return builder.append(c);\n      }\n\n      @Override\n      public DRes<SInt> add(BigInteger a, DRes<SInt> b) {\n        DummyArithmeticAddProtocol c =\n            new DummyArithmeticAddProtocol(() -> createSIntFromConstant(a), b);\n        return builder.append(c);\n      }\n\n      @Override\n      public DRes<SInt> add(DRes<SInt> a, DRes<SInt> b) {\n        DummyArithmeticAddProtocol c = new DummyArithmeticAddProtocol(a, b);\n        return builder.append(c);\n      }\n    };\n  }", "signature": "Numeric createNumeric(ProtocolBuilderNumeric builder)", "full_signature": "@Override public Numeric createNumeric(ProtocolBuilderNumeric builder)", "class_method_signature": "DummyArithmeticBuilderFactory.createNumeric(ProtocolBuilderNumeric builder)", "testcase": false, "constructor": false, "invocations": ["createElement", "getFieldDefinition", "createSIntFromConstant", "append", "createSIntFromConstant", "append", "append", "getModulus", "bitLength", "compareTo", "createSIntFromConstant", "append", "createSIntFromConstant", "valueOf", "nextInt", "append", "append", "append", "createSIntFromConstant", "append", "append", "createSIntFromConstant", "append", "createElement", "getFieldDefinition", "append", "createSIntFromConstant", "append", "append"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}