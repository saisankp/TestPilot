{"test_class": {"identifier": "CassStoreHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long STARTUP_TIMEOUT = 60_000L;", "modifier": "private static final", "type": "long", "declarator": "STARTUP_TIMEOUT = 60_000L", "var_name": "STARTUP_TIMEOUT"}, {"original_string": "private static final String CONFIGURATION_FILE_NAME = \"relocated-cassandra.yaml\";", "modifier": "private static final", "type": "String", "declarator": "CONFIGURATION_FILE_NAME = \"relocated-cassandra.yaml\"", "var_name": "CONFIGURATION_FILE_NAME"}, {"original_string": "@Rule\n    public CassandraCQLUnit cassandraCQLUnit = new CassandraCQLUnit(\n            new ClassPathCQLDataSet(\"tables.cql\", \"titus_integration_tests\"),\n            CONFIGURATION_FILE_NAME,\n            STARTUP_TIMEOUT\n    );", "modifier": "@Rule\n    public", "type": "CassandraCQLUnit", "declarator": "cassandraCQLUnit = new CassandraCQLUnit(\n            new ClassPathCQLDataSet(\"tables.cql\", \"titus_integration_tests\"),\n            CONFIGURATION_FILE_NAME,\n            STARTUP_TIMEOUT\n    )", "var_name": "cassandraCQLUnit"}], "file": "titus-ext/cassandra/src/test/java/com/netflix/titus/ext/cassandra/store/CassStoreHelperTest.java"}, "test_case": {"identifier": "paginatedResultSetCanBeFetchedAsync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void paginatedResultSetCanBeFetchedAsync() {\n        int numberOfRecords = 500;\n        int numberOfPages = 10;\n        Session session = cassandraCQLUnit.getSession();\n        PreparedStatement insertStmt = session.prepare(insertInto(\"app_scale_jobs\").values(\n                Arrays.asList(\"job_id\", \"ref_id\"),\n                Arrays.asList(bindMarker(), bindMarker())\n        ));\n\n        for (int i = 0; i < numberOfRecords; i++) {\n            ResultSet resultSet = session.execute(insertStmt.bind(\"job-\" + i, UUID.randomUUID()));\n            assertThat(resultSet.wasApplied()).isTrue();\n        }\n\n        PreparedStatement loadStmt = session.prepare(select(\"job_id\", \"ref_id\").from(\"app_scale_jobs\"));\n        Observable<ResultSet> results = new CassStoreHelper(session, Schedulers.io()).execute(loadStmt.bind()\n                // force pagination, and pages to be fetched on demand as the ResultSet is iterated on\n                .setFetchSize(numberOfRecords / numberOfPages));\n\n        results.doOnNext(rows -> rows.forEach(row ->\n                assertThat(row.getString(0)).startsWith(\"job-\"))\n        ).toCompletable().await(1, TimeUnit.MINUTES);\n    }", "signature": "void paginatedResultSetCanBeFetchedAsync()", "full_signature": "@Test public void paginatedResultSetCanBeFetchedAsync()", "class_method_signature": "CassStoreHelperTest.paginatedResultSetCanBeFetchedAsync()", "testcase": true, "constructor": false, "invocations": ["getSession", "prepare", "values", "insertInto", "asList", "asList", "bindMarker", "bindMarker", "execute", "bind", "randomUUID", "isTrue", "assertThat", "wasApplied", "prepare", "from", "select", "execute", "io", "setFetchSize", "bind", "await", "toCompletable", "doOnNext", "forEach", "startsWith", "assertThat", "getString"]}, "focal_class": {"identifier": "CassStoreHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Session session;", "modifier": "private final", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}], "methods": [{"identifier": "CassStoreHelper", "parameters": "(Session session, Scheduler scheduler)", "modifiers": "public", "return": "", "signature": " CassStoreHelper(Session session, Scheduler scheduler)", "full_signature": "public  CassStoreHelper(Session session, Scheduler scheduler)", "class_method_signature": "CassStoreHelper.CassStoreHelper(Session session, Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Statement statement)", "modifiers": "public", "return": "Observable<ResultSet>", "signature": "Observable<ResultSet> execute(Statement statement)", "full_signature": "public Observable<ResultSet> execute(Statement statement)", "class_method_signature": "CassStoreHelper.execute(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "buildResultSetObservable", "parameters": "(Supplier<ResultSetFuture> resultSetFutureSupplier)", "modifiers": "private", "return": "Observable<ResultSet>", "signature": "Observable<ResultSet> buildResultSetObservable(Supplier<ResultSetFuture> resultSetFutureSupplier)", "full_signature": "private Observable<ResultSet> buildResultSetObservable(Supplier<ResultSetFuture> resultSetFutureSupplier)", "class_method_signature": "CassStoreHelper.buildResultSetObservable(Supplier<ResultSetFuture> resultSetFutureSupplier)", "testcase": false, "constructor": false}], "file": "titus-ext/cassandra/src/main/java/com/netflix/titus/ext/cassandra/store/CassStoreHelper.java"}, "focal_method": {"identifier": "execute", "parameters": "(Statement statement)", "modifiers": "public", "return": "Observable<ResultSet>", "body": "public Observable<ResultSet> execute(Statement statement) {\n        return buildResultSetObservable(() -> session.executeAsync(statement));\n    }", "signature": "Observable<ResultSet> execute(Statement statement)", "full_signature": "public Observable<ResultSet> execute(Statement statement)", "class_method_signature": "CassStoreHelper.execute(Statement statement)", "testcase": false, "constructor": false, "invocations": ["buildResultSetObservable", "executeAsync"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}