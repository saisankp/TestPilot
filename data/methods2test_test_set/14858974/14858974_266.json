{"test_class": {"identifier": "GraphsHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestingRepositoryHandler repoHandler;", "modifier": "private", "type": "TestingRepositoryHandler", "declarator": "repoHandler", "var_name": "repoHandler"}, {"original_string": "private GraphsHandler graphHandler;", "modifier": "private", "type": "GraphsHandler", "declarator": "graphHandler", "var_name": "graphHandler"}, {"original_string": "private FiltersHolder filters;", "modifier": "private", "type": "FiltersHolder", "declarator": "filters", "var_name": "filters"}], "file": "server/src/test/java/org/axway/grapes/server/core/GraphsHandlerTest.java"}, "test_case": {"identifier": "getTreeOfModuleWithOneArtifactWithoutDependency", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getTreeOfModuleWithOneArtifactWithoutDependency(){\n        repoHandler.loadTestCase(new TC01_ModuleWithOneArtifactWithoutDependency());\n\n        final String moduleId = DbModule.generateID(TC01_ModuleWithOneArtifactWithoutDependency.MODULE_NAME, TC01_ModuleWithOneArtifactWithoutDependency.MODULE_VERSION);\n        TreeNode tree = graphHandler.getModuleTree(moduleId);\n\n        assertNotNull(tree);\n        assertEquals(TC01_ModuleWithOneArtifactWithoutDependency.MODULE_NAME, tree.getName());\n        assertEquals(0, tree.getChildren().size());\n    }", "signature": "void getTreeOfModuleWithOneArtifactWithoutDependency()", "full_signature": "@Test public void getTreeOfModuleWithOneArtifactWithoutDependency()", "class_method_signature": "GraphsHandlerTest.getTreeOfModuleWithOneArtifactWithoutDependency()", "testcase": true, "constructor": false, "invocations": ["loadTestCase", "generateID", "getModuleTree", "assertNotNull", "assertEquals", "getName", "assertEquals", "size", "getChildren"]}, "focal_class": {"identifier": "GraphsHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(GraphsHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(GraphsHandler.class)", "var_name": "LOG"}, {"original_string": "private final RepositoryHandler repoHandler;", "modifier": "private final", "type": "RepositoryHandler", "declarator": "repoHandler", "var_name": "repoHandler"}, {"original_string": "private final FiltersHolder filters;", "modifier": "private final", "type": "FiltersHolder", "declarator": "filters", "var_name": "filters"}], "methods": [{"identifier": "GraphsHandler", "parameters": "(final RepositoryHandler repoHandler, final FiltersHolder filters)", "modifiers": "public", "return": "", "signature": " GraphsHandler(final RepositoryHandler repoHandler, final FiltersHolder filters)", "full_signature": "public  GraphsHandler(final RepositoryHandler repoHandler, final FiltersHolder filters)", "class_method_signature": "GraphsHandler.GraphsHandler(final RepositoryHandler repoHandler, final FiltersHolder filters)", "testcase": false, "constructor": true}, {"identifier": "getModuleGraph", "parameters": "(final String moduleId)", "modifiers": "public", "return": "AbstractGraph", "signature": "AbstractGraph getModuleGraph(final String moduleId)", "full_signature": "public AbstractGraph getModuleGraph(final String moduleId)", "class_method_signature": "GraphsHandler.getModuleGraph(final String moduleId)", "testcase": false, "constructor": false}, {"identifier": "addModuleToGraph", "parameters": "(final DbModule module, final AbstractGraph graph, final int depth)", "modifiers": "private", "return": "void", "signature": "void addModuleToGraph(final DbModule module, final AbstractGraph graph, final int depth)", "full_signature": "private void addModuleToGraph(final DbModule module, final AbstractGraph graph, final int depth)", "class_method_signature": "GraphsHandler.addModuleToGraph(final DbModule module, final AbstractGraph graph, final int depth)", "testcase": false, "constructor": false}, {"identifier": "addDependencyToGraph", "parameters": "(final DbDependency dependency, final AbstractGraph graph, final int depth, final String parentId)", "modifiers": "private", "return": "void", "signature": "void addDependencyToGraph(final DbDependency dependency, final AbstractGraph graph, final int depth, final String parentId)", "full_signature": "private void addDependencyToGraph(final DbDependency dependency, final AbstractGraph graph, final int depth, final String parentId)", "class_method_signature": "GraphsHandler.addDependencyToGraph(final DbDependency dependency, final AbstractGraph graph, final int depth, final String parentId)", "testcase": false, "constructor": false}, {"identifier": "getModuleTree", "parameters": "(final String moduleId)", "modifiers": "public", "return": "TreeNode", "signature": "TreeNode getModuleTree(final String moduleId)", "full_signature": "public TreeNode getModuleTree(final String moduleId)", "class_method_signature": "GraphsHandler.getModuleTree(final String moduleId)", "testcase": false, "constructor": false}, {"identifier": "addModuleToTree", "parameters": "(final DbModule module, final TreeNode tree)", "modifiers": "private", "return": "void", "signature": "void addModuleToTree(final DbModule module, final TreeNode tree)", "full_signature": "private void addModuleToTree(final DbModule module, final TreeNode tree)", "class_method_signature": "GraphsHandler.addModuleToTree(final DbModule module, final TreeNode tree)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/core/GraphsHandler.java"}, "focal_method": {"identifier": "getModuleTree", "parameters": "(final String moduleId)", "modifiers": "public", "return": "TreeNode", "body": "public TreeNode getModuleTree(final String moduleId) {\n        final ModuleHandler moduleHandler = new ModuleHandler(repoHandler);\n        final DbModule module = moduleHandler.getModule(moduleId);\n\n        final TreeNode tree = new TreeNode();\n        tree.setName(module.getName());\n\n        // Add submodules\n        for (final DbModule submodule : module.getSubmodules()) {\n            addModuleToTree(submodule, tree);\n        }\n\n        return tree;\n    }", "signature": "TreeNode getModuleTree(final String moduleId)", "full_signature": "public TreeNode getModuleTree(final String moduleId)", "class_method_signature": "GraphsHandler.getModuleTree(final String moduleId)", "testcase": false, "constructor": false, "invocations": ["getModule", "setName", "getName", "getSubmodules", "addModuleToTree"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}