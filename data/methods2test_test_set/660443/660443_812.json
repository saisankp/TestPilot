{"test_class": {"identifier": "SMSDNormalizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/normalize/SMSDNormalizerTest.java"}, "test_case": {"identifier": "testRemoveHydrogensAndPreserveAtomID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveHydrogensAndPreserveAtomID() throws InvalidSmilesException {\n        String rawMolSmiles = \"[H]POOSC(Br)C(Cl)C(F)I\";\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer atomContainer = sp.parseSmiles(rawMolSmiles);\n        IAtom beforeAtom = null;\n        IAtom afterAtom = null;\n        for (IAtom a : atomContainer.atoms()) {\n            if (a.getSymbol().equalsIgnoreCase(\"P\")) {\n                beforeAtom = a;\n                a.setID(\"TEST\");\n                break;\n            }\n        }\n        IAtomContainer result = SMSDNormalizer.removeHydrogensAndPreserveAtomID(atomContainer);\n\n        for (IAtom a : result.atoms()) {\n            if (a.getSymbol().equalsIgnoreCase(\"P\")) {\n                afterAtom = a;\n                break;\n            }\n        }\n\n        assertEquals(afterAtom.getID(), beforeAtom.getID());\n    }", "signature": "void testRemoveHydrogensAndPreserveAtomID()", "full_signature": "@Test public void testRemoveHydrogensAndPreserveAtomID()", "class_method_signature": "SMSDNormalizerTest.testRemoveHydrogensAndPreserveAtomID()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "atoms", "equalsIgnoreCase", "getSymbol", "setID", "removeHydrogensAndPreserveAtomID", "atoms", "equalsIgnoreCase", "getSymbol", "assertEquals", "getID", "getID"]}, "focal_class": {"identifier": "SMSDNormalizer", "superclass": "extends AtomContainerManipulator", "interfaces": "", "fields": [], "methods": [{"identifier": "makeDeepCopy", "parameters": "(IAtomContainer container)", "modifiers": "public static", "return": "IAtomContainer", "signature": "IAtomContainer makeDeepCopy(IAtomContainer container)", "full_signature": "public static IAtomContainer makeDeepCopy(IAtomContainer container)", "class_method_signature": "SMSDNormalizer.makeDeepCopy(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "aromatizeMolecule", "parameters": "(IAtomContainer mol)", "modifiers": "public static", "return": "void", "signature": "void aromatizeMolecule(IAtomContainer mol)", "full_signature": "public static void aromatizeMolecule(IAtomContainer mol)", "class_method_signature": "SMSDNormalizer.aromatizeMolecule(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getExplicitHydrogenCount", "parameters": "(IAtomContainer atomContainer, IAtom atom)", "modifiers": "public static", "return": "int", "signature": "int getExplicitHydrogenCount(IAtomContainer atomContainer, IAtom atom)", "full_signature": "public static int getExplicitHydrogenCount(IAtomContainer atomContainer, IAtom atom)", "class_method_signature": "SMSDNormalizer.getExplicitHydrogenCount(IAtomContainer atomContainer, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getImplicitHydrogenCount", "parameters": "(IAtomContainer atomContainer, IAtom atom)", "modifiers": "public static", "return": "int", "signature": "int getImplicitHydrogenCount(IAtomContainer atomContainer, IAtom atom)", "full_signature": "public static int getImplicitHydrogenCount(IAtomContainer atomContainer, IAtom atom)", "class_method_signature": "SMSDNormalizer.getImplicitHydrogenCount(IAtomContainer atomContainer, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getHydrogenCount", "parameters": "(IAtomContainer atomContainer, IAtom atom)", "modifiers": "public static", "return": "int", "signature": "int getHydrogenCount(IAtomContainer atomContainer, IAtom atom)", "full_signature": "public static int getHydrogenCount(IAtomContainer atomContainer, IAtom atom)", "class_method_signature": "SMSDNormalizer.getHydrogenCount(IAtomContainer atomContainer, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "removeHydrogensAndPreserveAtomID", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public static", "return": "IAtomContainer", "signature": "IAtomContainer removeHydrogensAndPreserveAtomID(IAtomContainer atomContainer)", "full_signature": "public static IAtomContainer removeHydrogensAndPreserveAtomID(IAtomContainer atomContainer)", "class_method_signature": "SMSDNormalizer.removeHydrogensAndPreserveAtomID(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "convertExplicitToImplicitHydrogens", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public static", "return": "IAtomContainer", "signature": "IAtomContainer convertExplicitToImplicitHydrogens(IAtomContainer atomContainer)", "full_signature": "public static IAtomContainer convertExplicitToImplicitHydrogens(IAtomContainer atomContainer)", "class_method_signature": "SMSDNormalizer.convertExplicitToImplicitHydrogens(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "percieveAtomTypesAndConfigureAtoms", "parameters": "(IAtomContainer container)", "modifiers": "public static", "return": "void", "signature": "void percieveAtomTypesAndConfigureAtoms(IAtomContainer container)", "full_signature": "public static void percieveAtomTypesAndConfigureAtoms(IAtomContainer container)", "class_method_signature": "SMSDNormalizer.percieveAtomTypesAndConfigureAtoms(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "copyAtoms", "parameters": "(IAtomContainer container, IAtomContainer newAtomContainer)", "modifiers": "private static", "return": "IAtom[]", "signature": "IAtom[] copyAtoms(IAtomContainer container, IAtomContainer newAtomContainer)", "full_signature": "private static IAtom[] copyAtoms(IAtomContainer container, IAtomContainer newAtomContainer)", "class_method_signature": "SMSDNormalizer.copyAtoms(IAtomContainer container, IAtomContainer newAtomContainer)", "testcase": false, "constructor": false}, {"identifier": "copyBonds", "parameters": "(IAtom[] atoms, IAtomContainer container, IAtomContainer newAtomContainer)", "modifiers": "private static", "return": "void", "signature": "void copyBonds(IAtom[] atoms, IAtomContainer container, IAtomContainer newAtomContainer)", "full_signature": "private static void copyBonds(IAtom[] atoms, IAtomContainer container, IAtomContainer newAtomContainer)", "class_method_signature": "SMSDNormalizer.copyBonds(IAtom[] atoms, IAtomContainer container, IAtomContainer newAtomContainer)", "testcase": false, "constructor": false}, {"identifier": "reComputeHydrogens", "parameters": "(IAtomContainer mol, IAtomContainer atomContainer,\n            List<IAtom> remove, Map<IAtom, IAtom> map)", "modifiers": "private static", "return": "IAtomContainer", "signature": "IAtomContainer reComputeHydrogens(IAtomContainer mol, IAtomContainer atomContainer,\n            List<IAtom> remove, Map<IAtom, IAtom> map)", "full_signature": "private static IAtomContainer reComputeHydrogens(IAtomContainer mol, IAtomContainer atomContainer,\n            List<IAtom> remove, Map<IAtom, IAtom> map)", "class_method_signature": "SMSDNormalizer.reComputeHydrogens(IAtomContainer mol, IAtomContainer atomContainer,\n            List<IAtom> remove, Map<IAtom, IAtom> map)", "testcase": false, "constructor": false}, {"identifier": "cloneAndMarkNonHBonds", "parameters": "(IAtomContainer mol, IAtomContainer atomContainer,\n            List<IAtom> remove, Map<IAtom, IAtom> map)", "modifiers": "private static", "return": "IAtomContainer", "signature": "IAtomContainer cloneAndMarkNonHBonds(IAtomContainer mol, IAtomContainer atomContainer,\n            List<IAtom> remove, Map<IAtom, IAtom> map)", "full_signature": "private static IAtomContainer cloneAndMarkNonHBonds(IAtomContainer mol, IAtomContainer atomContainer,\n            List<IAtom> remove, Map<IAtom, IAtom> map)", "class_method_signature": "SMSDNormalizer.cloneAndMarkNonHBonds(IAtomContainer mol, IAtomContainer atomContainer,\n            List<IAtom> remove, Map<IAtom, IAtom> map)", "testcase": false, "constructor": false}, {"identifier": "set2D", "parameters": "(IAtomContainer container, int index, IAtom[] atoms)", "modifiers": "private static", "return": "void", "signature": "void set2D(IAtomContainer container, int index, IAtom[] atoms)", "full_signature": "private static void set2D(IAtomContainer container, int index, IAtom[] atoms)", "class_method_signature": "SMSDNormalizer.set2D(IAtomContainer container, int index, IAtom[] atoms)", "testcase": false, "constructor": false}, {"identifier": "set3D", "parameters": "(IAtomContainer container, int index, IAtom[] atoms)", "modifiers": "private static", "return": "void", "signature": "void set3D(IAtomContainer container, int index, IAtom[] atoms)", "full_signature": "private static void set3D(IAtomContainer container, int index, IAtom[] atoms)", "class_method_signature": "SMSDNormalizer.set3D(IAtomContainer container, int index, IAtom[] atoms)", "testcase": false, "constructor": false}, {"identifier": "setFractionalPoint3d", "parameters": "(IAtomContainer container, int index, IAtom[] atoms)", "modifiers": "private static", "return": "void", "signature": "void setFractionalPoint3d(IAtomContainer container, int index, IAtom[] atoms)", "full_signature": "private static void setFractionalPoint3d(IAtomContainer container, int index, IAtom[] atoms)", "class_method_signature": "SMSDNormalizer.setFractionalPoint3d(IAtomContainer container, int index, IAtom[] atoms)", "testcase": false, "constructor": false}, {"identifier": "setID", "parameters": "(IAtomContainer container, int index, IAtom[] atoms)", "modifiers": "private static", "return": "void", "signature": "void setID(IAtomContainer container, int index, IAtom[] atoms)", "full_signature": "private static void setID(IAtomContainer container, int index, IAtom[] atoms)", "class_method_signature": "SMSDNormalizer.setID(IAtomContainer container, int index, IAtom[] atoms)", "testcase": false, "constructor": false}, {"identifier": "setHydrogenCount", "parameters": "(IAtomContainer container, int index, IAtom[] atoms)", "modifiers": "private static", "return": "void", "signature": "void setHydrogenCount(IAtomContainer container, int index, IAtom[] atoms)", "full_signature": "private static void setHydrogenCount(IAtomContainer container, int index, IAtom[] atoms)", "class_method_signature": "SMSDNormalizer.setHydrogenCount(IAtomContainer container, int index, IAtom[] atoms)", "testcase": false, "constructor": false}, {"identifier": "setCharge", "parameters": "(IAtomContainer container, int index, IAtom[] atoms)", "modifiers": "private static", "return": "void", "signature": "void setCharge(IAtomContainer container, int index, IAtom[] atoms)", "full_signature": "private static void setCharge(IAtomContainer container, int index, IAtom[] atoms)", "class_method_signature": "SMSDNormalizer.setCharge(IAtomContainer container, int index, IAtom[] atoms)", "testcase": false, "constructor": false}, {"identifier": "setStereoParity", "parameters": "(IAtomContainer container, int index, IAtom[] atoms)", "modifiers": "private static", "return": "void", "signature": "void setStereoParity(IAtomContainer container, int index, IAtom[] atoms)", "full_signature": "private static void setStereoParity(IAtomContainer container, int index, IAtom[] atoms)", "class_method_signature": "SMSDNormalizer.setStereoParity(IAtomContainer container, int index, IAtom[] atoms)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/normalize/SMSDNormalizer.java"}, "focal_method": {"identifier": "removeHydrogensAndPreserveAtomID", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public static", "return": "IAtomContainer", "body": "public static IAtomContainer removeHydrogensAndPreserveAtomID(IAtomContainer atomContainer) {\n        Map<IAtom, IAtom> map = new HashMap<IAtom, IAtom>(); // maps original atoms to clones.\n        List<IAtom> remove = new ArrayList<IAtom>(); // lists removed Hs.\n        IAtomContainer mol = null;\n        if (atomContainer.getBondCount() > 0) {\n            // Clone atoms except those to be removed.\n            mol = atomContainer.getBuilder().newInstance(IAtomContainer.class);\n            int count = atomContainer.getAtomCount();\n            for (int i = 0; i < count; i++) {\n                // Clone/remove this atom?\n                IAtom atom = atomContainer.getAtom(i);\n                if (!atom.getSymbol().equals(\"H\")) {\n                    IAtom clonedAtom = null;\n                    try {\n                        clonedAtom = (IAtom) atom.clone();\n                    } catch (CloneNotSupportedException e) {\n                        // TODO Auto-generated catch block\n                        e.printStackTrace();\n                    }\n                    //added by Asad to preserve the Atom ID for atom mapping without Hydrogen\n                    clonedAtom.setID(atom.getID());\n                    clonedAtom.setFlags(atom.getFlags());\n                    int countH = 0;\n                    if (atom.getImplicitHydrogenCount() != null) {\n                        countH = atom.getImplicitHydrogenCount();\n                    }\n                    clonedAtom.setImplicitHydrogenCount(countH);\n                    mol.addAtom(clonedAtom);\n                    map.put(atom, clonedAtom);\n\n                } else {\n                    remove.add(atom); // maintain list of removed H.\n                }\n            }\n            //            Clone bonds except those involving removed atoms.\n            mol = cloneAndMarkNonHBonds(mol, atomContainer, remove, map);\n            //            Recompute hydrogen counts of neighbours of removed Hydrogens.\n            mol = reComputeHydrogens(mol, atomContainer, remove, map);\n\n        } else {\n            mol = atomContainer.getBuilder().newInstance(IAtomContainer.class, atomContainer);\n            mol.addProperties(atomContainer.getProperties());\n            mol.setFlags(atomContainer.getFlags());\n            if (atomContainer.getID() != null) {\n                mol.setID(atomContainer.getID());\n            }\n            if (atomContainer.getAtom(0).getSymbol().equalsIgnoreCase(\"H\")) {\n                System.err.println(\"WARNING: single hydrogen atom removal not supported!\");\n            }\n\n        }\n\n        return mol;\n    }", "signature": "IAtomContainer removeHydrogensAndPreserveAtomID(IAtomContainer atomContainer)", "full_signature": "public static IAtomContainer removeHydrogensAndPreserveAtomID(IAtomContainer atomContainer)", "class_method_signature": "SMSDNormalizer.removeHydrogensAndPreserveAtomID(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["getBondCount", "newInstance", "getBuilder", "getAtomCount", "getAtom", "equals", "getSymbol", "clone", "printStackTrace", "setID", "getID", "setFlags", "getFlags", "getImplicitHydrogenCount", "getImplicitHydrogenCount", "setImplicitHydrogenCount", "addAtom", "put", "add", "cloneAndMarkNonHBonds", "reComputeHydrogens", "newInstance", "getBuilder", "addProperties", "getProperties", "setFlags", "getFlags", "getID", "setID", "getID", "equalsIgnoreCase", "getSymbol", "getAtom", "println"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}