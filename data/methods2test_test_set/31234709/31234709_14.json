{"test_class": {"identifier": "SshjClientTest", "superclass": "", "interfaces": "", "fields": [], "file": "sdk/src/test/java/com/centurylink/cloud/sdk/server/services/dsl/domain/remote/SshjClientTest.java"}, "test_case": {"identifier": "testGetCommandsFromScript", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCommandsFromScript() throws Exception {\n        assertEquals(new SshjClient(null, null, null)\n                .getCommandsFromScript(\"classpath:ssh-client/classpath-test-ssh.txt\"),\n            Arrays.asList(\"ping -c google.com\", \"echo hello\"));\n    }", "signature": "void testGetCommandsFromScript()", "full_signature": "@Test public void testGetCommandsFromScript()", "class_method_signature": "SshjClientTest.testGetCommandsFromScript()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getCommandsFromScript", "asList"]}, "focal_class": {"identifier": "SshjClient", "superclass": "", "interfaces": "implements SshClient", "fields": [{"original_string": "public static final int CONNECTION_TIMEOUT = 15;", "modifier": "public static final", "type": "int", "declarator": "CONNECTION_TIMEOUT = 15", "var_name": "CONNECTION_TIMEOUT"}, {"original_string": "private final SSHClient ssh;", "modifier": "private final", "type": "SSHClient", "declarator": "ssh", "var_name": "ssh"}, {"original_string": "private final ServerCredentials credentials;", "modifier": "private final", "type": "ServerCredentials", "declarator": "credentials", "var_name": "credentials"}, {"original_string": "private final String host;", "modifier": "private final", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private List<String> commandList = new ArrayList<>();", "modifier": "private", "type": "List<String>", "declarator": "commandList = new ArrayList<>()", "var_name": "commandList"}], "methods": [{"identifier": "SshjClient", "parameters": "(SSHClient sshClient, String host, ServerCredentials credentials)", "modifiers": "", "return": "", "signature": " SshjClient(SSHClient sshClient, String host, ServerCredentials credentials)", "full_signature": "  SshjClient(SSHClient sshClient, String host, ServerCredentials credentials)", "class_method_signature": "SshjClient.SshjClient(SSHClient sshClient, String host, ServerCredentials credentials)", "testcase": false, "constructor": true}, {"identifier": "SshjClient", "parameters": "(String host, ServerCredentials credentials)", "modifiers": "private", "return": "", "signature": " SshjClient(String host, ServerCredentials credentials)", "full_signature": "private  SshjClient(String host, ServerCredentials credentials)", "class_method_signature": "SshjClient.SshjClient(String host, ServerCredentials credentials)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "(String command)", "modifiers": "@Override public", "return": "SshjClient", "signature": "SshjClient run(String command)", "full_signature": "@Override public SshjClient run(String command)", "class_method_signature": "SshjClient.run(String command)", "testcase": false, "constructor": false}, {"identifier": "runScript", "parameters": "(String pathToFile)", "modifiers": "@Override public", "return": "SshClient", "signature": "SshClient runScript(String pathToFile)", "full_signature": "@Override public SshClient runScript(String pathToFile)", "class_method_signature": "SshjClient.runScript(String pathToFile)", "testcase": false, "constructor": false}, {"identifier": "withTimeout", "parameters": "(Duration timeout, SshConnectFunc func)", "modifiers": "private", "return": "void", "signature": "void withTimeout(Duration timeout, SshConnectFunc func)", "full_signature": "private void withTimeout(Duration timeout, SshConnectFunc func)", "class_method_signature": "SshjClient.withTimeout(Duration timeout, SshConnectFunc func)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "OperationFuture<ShellResponse>", "signature": "OperationFuture<ShellResponse> execute()", "full_signature": "@Override public OperationFuture<ShellResponse> execute()", "class_method_signature": "SshjClient.execute()", "testcase": false, "constructor": false}, {"identifier": "execCommand", "parameters": "(Session session, String command)", "modifiers": "", "return": "ShellResponse", "signature": "ShellResponse execCommand(Session session, String command)", "full_signature": " ShellResponse execCommand(Session session, String command)", "class_method_signature": "SshjClient.execCommand(Session session, String command)", "testcase": false, "constructor": false}, {"identifier": "exitStatus", "parameters": "(Session.Command cmd)", "modifiers": "private", "return": "Integer", "signature": "Integer exitStatus(Session.Command cmd)", "full_signature": "private Integer exitStatus(Session.Command cmd)", "class_method_signature": "SshjClient.exitStatus(Session.Command cmd)", "testcase": false, "constructor": false}, {"identifier": "getCommandsFromScript", "parameters": "(String pathToFile)", "modifiers": "", "return": "List<String>", "signature": "List<String> getCommandsFromScript(String pathToFile)", "full_signature": " List<String> getCommandsFromScript(String pathToFile)", "class_method_signature": "SshjClient.getCommandsFromScript(String pathToFile)", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getHost()", "full_signature": " String getHost()", "class_method_signature": "SshjClient.getHost()", "testcase": false, "constructor": false}, {"identifier": "getSsh", "parameters": "()", "modifiers": "", "return": "SSHClient", "signature": "SSHClient getSsh()", "full_signature": " SSHClient getSsh()", "class_method_signature": "SshjClient.getSsh()", "testcase": false, "constructor": false}], "file": "sdk/src/main/java/com/centurylink/cloud/sdk/server/services/dsl/domain/remote/SshjClient.java"}, "focal_method": {"identifier": "getCommandsFromScript", "parameters": "(String pathToFile)", "modifiers": "", "return": "List<String>", "body": "List<String> getCommandsFromScript(String pathToFile) throws Exception {\n        checkArgument(!Strings.isNullOrEmpty(pathToFile), \"Path to file must NOT be Null or Empty\");\n\n        Path path = pathToFile.startsWith(\"classpath\") ?\n            Paths.get(getClass().getClassLoader().getResource(pathToFile.split(\":\")[1]).toURI())\n            : Paths.get(pathToFile);\n\n        try (BufferedReader br = Files.newBufferedReader(path)) {\n            return br.lines().collect(Collectors.toList());\n        }\n    }", "signature": "List<String> getCommandsFromScript(String pathToFile)", "full_signature": " List<String> getCommandsFromScript(String pathToFile)", "class_method_signature": "SshjClient.getCommandsFromScript(String pathToFile)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "isNullOrEmpty", "startsWith", "get", "toURI", "getResource", "getClassLoader", "getClass", "split", "get", "newBufferedReader", "collect", "lines", "toList"]}, "repository": {"repo_id": 31234709, "url": "https://github.com/CenturyLinkCloud/clc-java-sdk", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 5036, "license": "licensed"}}