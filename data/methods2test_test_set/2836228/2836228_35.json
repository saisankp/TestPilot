{"test_class": {"identifier": "FeedHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/org/apache/ivory/entity/FeedHelperTest.java"}, "test_case": {"identifier": "testPartitionExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPartitionExpression() {\n        Assert.assertEquals(FeedHelper.normalizePartitionExpression(\" /a// \", \"  /b// \"), \"a/b\");\n        Assert.assertEquals(FeedHelper.normalizePartitionExpression(null, \"  /b// \"), \"b\");\n        Assert.assertEquals(FeedHelper.normalizePartitionExpression(null, null), \"\");\n    }", "signature": "void testPartitionExpression()", "full_signature": "@Test public void testPartitionExpression()", "class_method_signature": "FeedHelperTest.testPartitionExpression()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "normalizePartitionExpression", "assertEquals", "normalizePartitionExpression", "assertEquals", "normalizePartitionExpression"]}, "focal_class": {"identifier": "FeedHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getCluster", "parameters": "(Feed feed, String clusterName)", "modifiers": "public static", "return": "Cluster", "signature": "Cluster getCluster(Feed feed, String clusterName)", "full_signature": "public static Cluster getCluster(Feed feed, String clusterName)", "class_method_signature": "FeedHelper.getCluster(Feed feed, String clusterName)", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "(Feed feed, LocationType type,\n\t\t\tString clusterName)", "modifiers": "public static", "return": "Location", "signature": "Location getLocation(Feed feed, LocationType type,\n\t\t\tString clusterName)", "full_signature": "public static Location getLocation(Feed feed, LocationType type,\n\t\t\tString clusterName)", "class_method_signature": "FeedHelper.getLocation(Feed feed, LocationType type,\n\t\t\tString clusterName)", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "(Feed feed, LocationType type)", "modifiers": "public static", "return": "Location", "signature": "Location getLocation(Feed feed, LocationType type)", "full_signature": "public static Location getLocation(Feed feed, LocationType type)", "class_method_signature": "FeedHelper.getLocation(Feed feed, LocationType type)", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "(Locations locations, LocationType type)", "modifiers": "public static", "return": "Location", "signature": "Location getLocation(Locations locations, LocationType type)", "full_signature": "public static Location getLocation(Locations locations, LocationType type)", "class_method_signature": "FeedHelper.getLocation(Locations locations, LocationType type)", "testcase": false, "constructor": false}, {"identifier": "normalizePartitionExpression", "parameters": "(String part1, String part2)", "modifiers": "public static", "return": "String", "signature": "String normalizePartitionExpression(String part1, String part2)", "full_signature": "public static String normalizePartitionExpression(String part1, String part2)", "class_method_signature": "FeedHelper.normalizePartitionExpression(String part1, String part2)", "testcase": false, "constructor": false}, {"identifier": "normalizePartitionExpression", "parameters": "(String partition)", "modifiers": "public static", "return": "String", "signature": "String normalizePartitionExpression(String partition)", "full_signature": "public static String normalizePartitionExpression(String partition)", "class_method_signature": "FeedHelper.normalizePartitionExpression(String partition)", "testcase": false, "constructor": false}, {"identifier": "loadClusterProperties", "parameters": "(org.apache.ivory.entity.v0.cluster.Cluster cluster)", "modifiers": "private static", "return": "Properties", "signature": "Properties loadClusterProperties(org.apache.ivory.entity.v0.cluster.Cluster cluster)", "full_signature": "private static Properties loadClusterProperties(org.apache.ivory.entity.v0.cluster.Cluster cluster)", "class_method_signature": "FeedHelper.loadClusterProperties(org.apache.ivory.entity.v0.cluster.Cluster cluster)", "testcase": false, "constructor": false}, {"identifier": "evaluateClusterExp", "parameters": "(org.apache.ivory.entity.v0.cluster.Cluster clusterEntity, String exp)", "modifiers": "public static", "return": "String", "signature": "String evaluateClusterExp(org.apache.ivory.entity.v0.cluster.Cluster clusterEntity, String exp)", "full_signature": "public static String evaluateClusterExp(org.apache.ivory.entity.v0.cluster.Cluster clusterEntity, String exp)", "class_method_signature": "FeedHelper.evaluateClusterExp(org.apache.ivory.entity.v0.cluster.Cluster clusterEntity, String exp)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/apache/ivory/entity/FeedHelper.java"}, "focal_method": {"identifier": "normalizePartitionExpression", "parameters": "(String part1, String part2)", "modifiers": "public static", "return": "String", "body": "public static String normalizePartitionExpression(String part1, String part2) {\n        String partExp = StringUtils.stripToEmpty(part1) + \"/\" + StringUtils.stripToEmpty(part2);\n        partExp = partExp.replaceAll(\"//+\", \"/\");\n        partExp = StringUtils.stripStart(partExp, \"/\");\n        partExp = StringUtils.stripEnd(partExp, \"/\");\n        return partExp;\n    }", "signature": "String normalizePartitionExpression(String part1, String part2)", "full_signature": "public static String normalizePartitionExpression(String part1, String part2)", "class_method_signature": "FeedHelper.normalizePartitionExpression(String part1, String part2)", "testcase": false, "constructor": false, "invocations": ["stripToEmpty", "stripToEmpty", "replaceAll", "stripStart", "stripEnd"]}, "repository": {"repo_id": 2836228, "url": "https://github.com/sriksun/Ivory", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 28, "size": 11708, "license": "licensed"}}