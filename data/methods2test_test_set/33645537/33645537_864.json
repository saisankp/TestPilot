{"test_class": {"identifier": "IntervalTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/com/github/geophile/erdo/util/IntervalTest.java"}, "test_case": {"identifier": "testMapOfDisjointIntervals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMapOfDisjointIntervals()\n    {\n        for (int intervalSize = 1; intervalSize <= 5; intervalSize++) {\n            List<Interval> control = new ArrayList<Interval>();\n            SortedMap<Interval, Interval> map = new TreeMap<Interval, Interval>();\n            for (int i = 0; i < 100; i++) {\n                Interval interval = interval(i * intervalSize, (i + 1) * intervalSize - 1);\n                control.add(interval);\n                map.put(interval, interval);\n            }\n            Assert.assertEquals(control.size(), map.size());\n            Iterator<Interval> controlScan = control.iterator();\n            Iterator<Interval> mapScan = map.keySet().iterator();\n            while (controlScan.hasNext() && mapScan.hasNext()) {\n                Interval controlInterval = controlScan.next();\n                Interval mapInterval = mapScan.next();\n                Assert.assertEquals(controlInterval, mapInterval);\n                mapInterval = map.get(controlInterval);\n                Assert.assertEquals(controlInterval, mapInterval);\n            }\n            Assert.assertTrue(!controlScan.hasNext());\n            Assert.assertTrue(!mapScan.hasNext());\n        }\n    }", "signature": "void testMapOfDisjointIntervals()", "full_signature": "@Test public void testMapOfDisjointIntervals()", "class_method_signature": "IntervalTest.testMapOfDisjointIntervals()", "testcase": true, "constructor": false, "invocations": ["interval", "add", "put", "assertEquals", "size", "size", "iterator", "iterator", "keySet", "hasNext", "hasNext", "next", "next", "assertEquals", "get", "assertEquals", "assertTrue", "hasNext", "assertTrue", "hasNext"]}, "focal_class": {"identifier": "Interval", "superclass": "", "interfaces": "implements Comparable<Interval>", "fields": [{"original_string": "private final long min;", "modifier": "private final", "type": "long", "declarator": "min", "var_name": "min"}, {"original_string": "private final long max;", "modifier": "private final", "type": "long", "declarator": "max", "var_name": "max"}], "methods": [{"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Interval.toString()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Interval that)", "modifiers": "public", "return": "int", "signature": "int compareTo(Interval that)", "full_signature": "public int compareTo(Interval that)", "class_method_signature": "Interval.compareTo(Interval that)", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long min()", "full_signature": "public long min()", "class_method_signature": "Interval.min()", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long max()", "full_signature": "public long max()", "class_method_signature": "Interval.max()", "testcase": false, "constructor": false}, {"identifier": "Interval", "parameters": "(long x)", "modifiers": "public", "return": "", "signature": " Interval(long x)", "full_signature": "public  Interval(long x)", "class_method_signature": "Interval.Interval(long x)", "testcase": false, "constructor": true}, {"identifier": "Interval", "parameters": "(long min, long max)", "modifiers": "public", "return": "", "signature": " Interval(long min, long max)", "full_signature": "public  Interval(long min, long max)", "class_method_signature": "Interval.Interval(long min, long max)", "testcase": false, "constructor": true}], "file": "zava/src/main/java/com/github/geophile/erdo/util/Interval.java"}, "focal_method": {"identifier": "Interval", "parameters": "(long x)", "modifiers": "public", "return": "", "body": "public Interval(long x)\n    {\n        this(x, x);\n    }", "signature": " Interval(long x)", "full_signature": "public  Interval(long x)", "class_method_signature": "Interval.Interval(long x)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}