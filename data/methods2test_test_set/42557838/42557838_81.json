{"test_class": {"identifier": "ControllerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ServerConfigFactory serverConfigFactory;", "modifier": "private static", "type": "ServerConfigFactory", "declarator": "serverConfigFactory", "var_name": "serverConfigFactory"}, {"original_string": "private static ServerSocketFactory serverSocketFactory;", "modifier": "private static", "type": "ServerSocketFactory", "declarator": "serverSocketFactory", "var_name": "serverSocketFactory"}, {"original_string": "private static ServerConfig serverConfig;", "modifier": "private static", "type": "ServerConfig", "declarator": "serverConfig", "var_name": "serverConfig"}, {"original_string": "private static ServerGui serverGui;", "modifier": "private static", "type": "ServerGui", "declarator": "serverGui", "var_name": "serverGui"}], "file": "http/src/test/java/ro/polak/http/controller/impl/ControllerImplTest.java"}, "test_case": {"identifier": "shouldThrowExceptionOnIllegalStop", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void shouldThrowExceptionOnIllegalStop() {\n        ControllerImpl controllerImpl = new ControllerImpl(serverConfigFactory, serverSocketFactory,\n                serverGui);\n\n        controllerImpl.stop();\n    }", "signature": "void shouldThrowExceptionOnIllegalStop()", "full_signature": "@Test(expected = IllegalStateException.class) public void shouldThrowExceptionOnIllegalStop()", "class_method_signature": "ControllerImplTest.shouldThrowExceptionOnIllegalStop()", "testcase": true, "constructor": false, "invocations": ["stop"]}, "focal_class": {"identifier": "ControllerImpl", "superclass": "", "interfaces": "implements Controller", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(ControllerImpl.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(ControllerImpl.class.getName())", "var_name": "LOGGER"}, {"original_string": "private final ServerGui gui;", "modifier": "private final", "type": "ServerGui", "declarator": "gui", "var_name": "gui"}, {"original_string": "private final ServerConfigFactory serverConfigFactory;", "modifier": "private final", "type": "ServerConfigFactory", "declarator": "serverConfigFactory", "var_name": "serverConfigFactory"}, {"original_string": "private final ServerSocketFactory serverSocketFactory;", "modifier": "private final", "type": "ServerSocketFactory", "declarator": "serverSocketFactory", "var_name": "serverSocketFactory"}, {"original_string": "private WebServer webServer;", "modifier": "private", "type": "WebServer", "declarator": "webServer", "var_name": "webServer"}], "methods": [{"identifier": "ControllerImpl", "parameters": "(final ServerConfigFactory serverConfigFactory,\n                          final ServerSocketFactory serverSocketFactory,\n                          final ServerGui gui)", "modifiers": "public", "return": "", "signature": " ControllerImpl(final ServerConfigFactory serverConfigFactory,\n                          final ServerSocketFactory serverSocketFactory,\n                          final ServerGui gui)", "full_signature": "public  ControllerImpl(final ServerConfigFactory serverConfigFactory,\n                          final ServerSocketFactory serverSocketFactory,\n                          final ServerGui gui)", "class_method_signature": "ControllerImpl.ControllerImpl(final ServerConfigFactory serverConfigFactory,\n                          final ServerSocketFactory serverSocketFactory,\n                          final ServerGui gui)", "testcase": false, "constructor": true}, {"identifier": "getWebServer", "parameters": "()", "modifiers": "@Override public", "return": "WebServer", "signature": "WebServer getWebServer()", "full_signature": "@Override public WebServer getWebServer()", "class_method_signature": "ControllerImpl.getWebServer()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "ControllerImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "ControllerImpl.stop()", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/controller/impl/ControllerImpl.java"}, "focal_method": {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void stop() throws IllegalStateException {\n        if (webServer == null) {\n            throw new IllegalStateException(\"Webserver not started!\");\n        }\n\n        webServer.stopServer();\n        webServer = null;\n        gui.stop();\n    }", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "ControllerImpl.stop()", "testcase": false, "constructor": false, "invocations": ["stopServer", "stop"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}