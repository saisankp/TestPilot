{"test_class": {"identifier": "TestDistCp", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(TestDistCp.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(TestDistCp.class)", "var_name": "LOG"}, {"original_string": "private static List<Path> pathList = new ArrayList<Path>();", "modifier": "private static", "type": "List<Path>", "declarator": "pathList = new ArrayList<Path>()", "var_name": "pathList"}, {"original_string": "private static final int FILE_SIZE = 1024;", "modifier": "private static final", "type": "int", "declarator": "FILE_SIZE = 1024", "var_name": "FILE_SIZE"}, {"original_string": "private static Configuration configuration;", "modifier": "private static", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private static MiniDFSCluster cluster;", "modifier": "private static", "type": "MiniDFSCluster", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "private static MiniMRCluster mrCluster;", "modifier": "private static", "type": "MiniMRCluster", "declarator": "mrCluster", "var_name": "mrCluster"}, {"original_string": "private static final String SOURCE_PATH = \"/tmp/source\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE_PATH = \"/tmp/source\"", "var_name": "SOURCE_PATH"}, {"original_string": "private static final String TARGET_PATH = \"/tmp/target\";", "modifier": "private static final", "type": "String", "declarator": "TARGET_PATH = \"/tmp/target\"", "var_name": "TARGET_PATH"}, {"original_string": "private static final Path counterOutputPath = new Path(\"counters\");", "modifier": "private static final", "type": "Path", "declarator": "counterOutputPath = new Path(\"counters\")", "var_name": "counterOutputPath"}], "file": "conduit-distcp/src/test/java/com/inmobi/conduit/distcp/tools/TestDistCp.java"}, "test_case": {"identifier": "testDynamicDistCp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDynamicDistCp() throws Exception {\n    try {\n      clearState();\n      Path sourcePath = new Path(SOURCE_PATH)\n              .makeQualified(cluster.getFileSystem());\n      List<Path> sources = new ArrayList<Path>();\n      sources.add(sourcePath);\n\n      Path targetPath = new Path(TARGET_PATH)\n              .makeQualified(cluster.getFileSystem());\n      DistCpOptions options = new DistCpOptions(sources, targetPath);\n      options.setCopyStrategy(\"dynamic\");\n      options.setOutPutDirectory(counterOutputPath);\n\n      options.setAtomicCommit(true);\n      options.setAtomicWorkPath(new Path(\"/work\"));\n      options.setBlocking(false);\n      Job job = new DistCp(configuration, options).execute();\n      Path workDir = CopyOutputFormat.getWorkingDirectory(job);\n      Path finalDir = CopyOutputFormat.getCommitDirectory(job);\n\n      while (!job.isComplete()) {\n        if (cluster.getFileSystem().exists(workDir)) {\n          break;\n        }\n      }\n      job.waitForCompletion(true);\n      Assert.assertFalse(cluster.getFileSystem().exists(workDir));\n      Assert.assertTrue(cluster.getFileSystem().exists(finalDir));\n\n      verifyResults();\n    }\n    catch (Exception e) {\n      LOG.error(\"Exception encountered\", e);\n      Assert.fail(\"Unexpected exception: \" + e.getMessage());\n    }\n  }", "signature": "void testDynamicDistCp()", "full_signature": "@Test public void testDynamicDistCp()", "class_method_signature": "TestDistCp.testDynamicDistCp()", "testcase": true, "constructor": false, "invocations": ["clearState", "makeQualified", "getFileSystem", "add", "makeQualified", "getFileSystem", "setCopyStrategy", "setOutPutDirectory", "setAtomicCommit", "setAtomicWorkPath", "setBlocking", "execute", "getWorkingDirectory", "getCommitDirectory", "isComplete", "exists", "getFileSystem", "waitForCompletion", "assertFalse", "exists", "getFileSystem", "assertTrue", "exists", "getFileSystem", "verifyResults", "error", "fail", "getMessage"]}, "focal_class": {"identifier": "DistCp", "superclass": "extends Configured", "interfaces": "implements Tool", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(DistCp.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(DistCp.class)", "var_name": "LOG"}, {"original_string": "protected DistCpOptions inputOptions;", "modifier": "protected", "type": "DistCpOptions", "declarator": "inputOptions", "var_name": "inputOptions"}, {"original_string": "protected Path metaFolder;", "modifier": "protected", "type": "Path", "declarator": "metaFolder", "var_name": "metaFolder"}, {"original_string": "private static final String PREFIX = \"_distcp\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX = \"_distcp\"", "var_name": "PREFIX"}, {"original_string": "private static final String WIP_PREFIX = \"._WIP_\";", "modifier": "private static final", "type": "String", "declarator": "WIP_PREFIX = \"._WIP_\"", "var_name": "WIP_PREFIX"}, {"original_string": "private static final String DISTCP_DEFAULT_XML = \"distcp-default.xml\";", "modifier": "private static final", "type": "String", "declarator": "DISTCP_DEFAULT_XML = \"distcp-default.xml\"", "var_name": "DISTCP_DEFAULT_XML"}, {"original_string": "public static final Random rand = new Random();", "modifier": "public static final", "type": "Random", "declarator": "rand = new Random()", "var_name": "rand"}, {"original_string": "private boolean submitted;", "modifier": "private", "type": "boolean", "declarator": "submitted", "var_name": "submitted"}, {"original_string": "private FileSystem jobFS;", "modifier": "private", "type": "FileSystem", "declarator": "jobFS", "var_name": "jobFS"}, {"original_string": "private long jobExecutionTimeInNanos;", "modifier": "private", "type": "long", "declarator": "jobExecutionTimeInNanos", "var_name": "jobExecutionTimeInNanos"}], "methods": [{"identifier": "DistCp", "parameters": "(Configuration configuration, DistCpOptions inputOptions)", "modifiers": "public", "return": "", "signature": " DistCp(Configuration configuration, DistCpOptions inputOptions)", "full_signature": "public  DistCp(Configuration configuration, DistCpOptions inputOptions)", "class_method_signature": "DistCp.DistCp(Configuration configuration, DistCpOptions inputOptions)", "testcase": false, "constructor": true}, {"identifier": "DistCp", "parameters": "()", "modifiers": "private", "return": "", "signature": " DistCp()", "full_signature": "private  DistCp()", "class_method_signature": "DistCp.DistCp()", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "(String[] argv)", "modifiers": "public", "return": "int", "signature": "int run(String[] argv)", "full_signature": "public int run(String[] argv)", "class_method_signature": "DistCp.run(String[] argv)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "Job", "signature": "Job execute()", "full_signature": "public Job execute()", "class_method_signature": "DistCp.execute()", "testcase": false, "constructor": false}, {"identifier": "getJobTimeInNanos", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getJobTimeInNanos()", "full_signature": "public long getJobTimeInNanos()", "class_method_signature": "DistCp.getJobTimeInNanos()", "testcase": false, "constructor": false}, {"identifier": "updateJobTimeInNanos", "parameters": "(long jobStartTime)", "modifiers": "private", "return": "void", "signature": "void updateJobTimeInNanos(long jobStartTime)", "full_signature": "private void updateJobTimeInNanos(long jobStartTime)", "class_method_signature": "DistCp.updateJobTimeInNanos(long jobStartTime)", "testcase": false, "constructor": false}, {"identifier": "createJob", "parameters": "()", "modifiers": "protected", "return": "Job", "signature": "Job createJob()", "full_signature": "protected Job createJob()", "class_method_signature": "DistCp.createJob()", "testcase": false, "constructor": false}, {"identifier": "getJobID", "parameters": "(Job job)", "modifiers": "private", "return": "String", "signature": "String getJobID(Job job)", "full_signature": "private String getJobID(Job job)", "class_method_signature": "DistCp.getJobID(Job job)", "testcase": false, "constructor": false}, {"identifier": "setupSSLConfig", "parameters": "(Configuration configuration)", "modifiers": "private", "return": "void", "signature": "void setupSSLConfig(Configuration configuration)", "full_signature": "private void setupSSLConfig(Configuration configuration)", "class_method_signature": "DistCp.setupSSLConfig(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "addSSLFilesToDistCache", "parameters": "(Configuration configuration,\n                                      Path sslConfigPath)", "modifiers": "private", "return": "void", "signature": "void addSSLFilesToDistCache(Configuration configuration,\n                                      Path sslConfigPath)", "full_signature": "private void addSSLFilesToDistCache(Configuration configuration,\n                                      Path sslConfigPath)", "class_method_signature": "DistCp.addSSLFilesToDistCache(Configuration configuration,\n                                      Path sslConfigPath)", "testcase": false, "constructor": false}, {"identifier": "getLocalStorePath", "parameters": "(Configuration sslConf, String storeKey)", "modifiers": "private", "return": "Path", "signature": "Path getLocalStorePath(Configuration sslConf, String storeKey)", "full_signature": "private Path getLocalStorePath(Configuration sslConf, String storeKey)", "class_method_signature": "DistCp.getLocalStorePath(Configuration sslConf, String storeKey)", "testcase": false, "constructor": false}, {"identifier": "configureOutputFormat", "parameters": "(Job job)", "modifiers": "private", "return": "void", "signature": "void configureOutputFormat(Job job)", "full_signature": "private void configureOutputFormat(Job job)", "class_method_signature": "DistCp.configureOutputFormat(Job job)", "testcase": false, "constructor": false}, {"identifier": "createInputFileListing", "parameters": "(Job job)", "modifiers": "protected", "return": "Path", "signature": "Path createInputFileListing(Job job)", "full_signature": "protected Path createInputFileListing(Job job)", "class_method_signature": "DistCp.createInputFileListing(Job job)", "testcase": false, "constructor": false}, {"identifier": "getFileListingPath", "parameters": "()", "modifiers": "protected", "return": "Path", "signature": "Path getFileListingPath()", "full_signature": "protected Path getFileListingPath()", "class_method_signature": "DistCp.getFileListingPath()", "testcase": false, "constructor": false}, {"identifier": "createMetaFolderPath", "parameters": "()", "modifiers": "private", "return": "Path", "signature": "Path createMetaFolderPath()", "full_signature": "private Path createMetaFolderPath()", "class_method_signature": "DistCp.createMetaFolderPath()", "testcase": false, "constructor": false}, {"identifier": "getStagingPath", "parameters": "(Configuration configuration)", "modifiers": "private", "return": "Path", "signature": "Path getStagingPath(Configuration configuration)", "full_signature": "private Path getStagingPath(Configuration configuration)", "class_method_signature": "DistCp.getStagingPath(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String argv[])", "modifiers": "public static", "return": "void", "signature": "void main(String argv[])", "full_signature": "public static void main(String argv[])", "class_method_signature": "DistCp.main(String argv[])", "testcase": false, "constructor": false}, {"identifier": "getDefaultConf", "parameters": "()", "modifiers": "private static", "return": "Configuration", "signature": "Configuration getDefaultConf()", "full_signature": "private static Configuration getDefaultConf()", "class_method_signature": "DistCp.getDefaultConf()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void cleanup()", "full_signature": "private synchronized void cleanup()", "class_method_signature": "DistCp.cleanup()", "testcase": false, "constructor": false}, {"identifier": "isSubmitted", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isSubmitted()", "full_signature": "private boolean isSubmitted()", "class_method_signature": "DistCp.isSubmitted()", "testcase": false, "constructor": false}], "file": "conduit-distcp/src/main/java/com/inmobi/conduit/distcp/tools/DistCp.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "Job", "body": "public Job execute() throws Exception {\n    assert inputOptions != null;\n    assert getConf() != null;\n\n    Job job = null;\n    try {\n      metaFolder = createMetaFolderPath();\n      jobFS = metaFolder.getFileSystem(getConf());\n\n      job = createJob();\n      createInputFileListing(job);\n\n      job.submit();\n      submitted = true;\n    } finally {\n      if (!submitted) {\n        cleanup();\n      }\n    }\n\n    String jobID = getJobID(job);\n    job.getConfiguration().set(DistCpConstants.CONF_LABEL_DISTCP_JOB_ID, jobID);\n\n    LOG.info(\"DistCp job-id: \" + jobID);\n    LOG.info(\"DistCp job may be tracked at: \" + job.getTrackingURL());\n    LOG.info(\"To cancel, run the following command:\\thadoop job -kill \" + jobID);\n\n    long jobStartTime = System.nanoTime();\n    if (inputOptions.shouldBlock() && !job.waitForCompletion(true)) {\n      updateJobTimeInNanos(jobStartTime);\n      throw new IOException(\"DistCp failure: Job \" + jobID + \" has failed. \");\n    }\n    updateJobTimeInNanos(jobStartTime);\n    return job;\n  }", "signature": "Job execute()", "full_signature": "public Job execute()", "class_method_signature": "DistCp.execute()", "testcase": false, "constructor": false, "invocations": ["getConf", "createMetaFolderPath", "getFileSystem", "getConf", "createJob", "createInputFileListing", "submit", "cleanup", "getJobID", "set", "getConfiguration", "info", "info", "getTrackingURL", "info", "nanoTime", "shouldBlock", "waitForCompletion", "updateJobTimeInNanos", "updateJobTimeInNanos"]}, "repository": {"repo_id": 7218024, "url": "https://github.com/InMobi/conduit", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 49400, "license": "licensed"}}