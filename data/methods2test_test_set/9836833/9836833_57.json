{"test_class": {"identifier": "RestxSpecLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "restx-core/src/test/java/restx/specs/RestxSpecLoaderTest.java"}, "test_case": {"identifier": "should_load_spec", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_load_spec() throws Exception {\n        RestxSpec spec = new RestxSpecLoader(Factory.getInstance()).load(\"cases/test/test.spec.yaml\");\n\n        assertThat(spec.getTitle()).isEqualTo(\"should say hello\");\n        assertThat(spec.getGiven()).hasSize(2);\n\n        assertThat(spec.getGiven().get(0)).isInstanceOf(GivenTime.class);\n        assertThat(((GivenTime) spec.getGiven().get(0)).getTime().getMillis())\n                .isEqualTo(DateTime.parse(\"2013-03-31T14:33:18.272+02:00\").getMillis());\n\n        assertThat(spec.getGiven().get(1)).isInstanceOf(GivenUUIDGenerator.class);\n        assertThat(((GivenUUIDGenerator) spec.getGiven().get(1)).getPlaybackUUIDs()).containsExactly(\"123456\");\n\n        assertThat(spec.getWhens()).extracting(\"method\", \"path\").containsExactly(Tuple.tuple(\"GET\", \"message/xavier\"));\n        assertThat(spec.getWhens()).extracting(\"then\").extracting(\"expectedCode\", \"expected\")\n                .containsExactly(Tuple.tuple(200, \"{\\\"message\\\":\\\"hello xavier, it's 14:33:18\\\"}\"));\n    }", "signature": "void should_load_spec()", "full_signature": "@Test public void should_load_spec()", "class_method_signature": "RestxSpecLoaderTest.should_load_spec()", "testcase": true, "constructor": false, "invocations": ["load", "getInstance", "isEqualTo", "assertThat", "getTitle", "hasSize", "assertThat", "getGiven", "isInstanceOf", "assertThat", "get", "getGiven", "isEqualTo", "assertThat", "getMillis", "getTime", "get", "getGiven", "getMillis", "parse", "isInstanceOf", "assertThat", "get", "getGiven", "containsExactly", "assertThat", "getPlaybackUUIDs", "get", "getGiven", "containsExactly", "extracting", "assertThat", "getWhens", "tuple", "containsExactly", "extracting", "extracting", "assertThat", "getWhens", "tuple"]}, "focal_class": {"identifier": "RestxSpecLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RestxSpecLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RestxSpecLoader.class)", "var_name": "logger"}, {"original_string": "private final Set<NamedComponent<GivenLoader>> givenLoaders;", "modifier": "private final", "type": "Set<NamedComponent<GivenLoader>>", "declarator": "givenLoaders", "var_name": "givenLoaders"}, {"original_string": "private final Set<NamedComponent<WhenHeaderLoader>> whenHeaderLoaders;", "modifier": "private final", "type": "Set<NamedComponent<WhenHeaderLoader>>", "declarator": "whenHeaderLoaders", "var_name": "whenHeaderLoaders"}, {"original_string": "private final String names;", "modifier": "private final", "type": "String", "declarator": "names", "var_name": "names"}], "methods": [{"identifier": "RestxSpecLoader", "parameters": "(Factory factory)", "modifiers": "@Inject public", "return": "", "signature": " RestxSpecLoader(Factory factory)", "full_signature": "@Inject public  RestxSpecLoader(Factory factory)", "class_method_signature": "RestxSpecLoader.RestxSpecLoader(Factory factory)", "testcase": false, "constructor": true}, {"identifier": "RestxSpecLoader", "parameters": "(Set<NamedComponent<GivenLoader>> givenLoaders,\n                           Set<NamedComponent<WhenHeaderLoader>> whenHeaderLoaders)", "modifiers": "public", "return": "", "signature": " RestxSpecLoader(Set<NamedComponent<GivenLoader>> givenLoaders,\n                           Set<NamedComponent<WhenHeaderLoader>> whenHeaderLoaders)", "full_signature": "public  RestxSpecLoader(Set<NamedComponent<GivenLoader>> givenLoaders,\n                           Set<NamedComponent<WhenHeaderLoader>> whenHeaderLoaders)", "class_method_signature": "RestxSpecLoader.RestxSpecLoader(Set<NamedComponent<GivenLoader>> givenLoaders,\n                           Set<NamedComponent<WhenHeaderLoader>> whenHeaderLoaders)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "(String resource)", "modifiers": "public", "return": "RestxSpec", "signature": "RestxSpec load(String resource)", "full_signature": "public RestxSpec load(String resource)", "class_method_signature": "RestxSpecLoader.load(String resource)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(String path, CharSource charSource)", "modifiers": "public", "return": "RestxSpec", "signature": "RestxSpec load(String path, CharSource charSource)", "full_signature": "public RestxSpec load(String path, CharSource charSource)", "class_method_signature": "RestxSpecLoader.load(String path, CharSource charSource)", "testcase": false, "constructor": false}, {"identifier": "resolveFromBody", "parameters": "(String body)", "modifiers": "private", "return": "Optional<WhenHeaderLoader>", "signature": "Optional<WhenHeaderLoader> resolveFromBody(String body)", "full_signature": "private Optional<WhenHeaderLoader> resolveFromBody(String body)", "class_method_signature": "RestxSpecLoader.resolveFromBody(String body)", "testcase": false, "constructor": false}, {"identifier": "loadGivens", "parameters": "(Map testCase)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "List<Given>", "signature": "List<Given> loadGivens(Map testCase)", "full_signature": "@SuppressWarnings(\"unchecked\") private List<Given> loadGivens(Map testCase)", "class_method_signature": "RestxSpecLoader.loadGivens(Map testCase)", "testcase": false, "constructor": false}, {"identifier": "findLoader", "parameters": "(Map given, String type)", "modifiers": "private", "return": "GivenLoader", "signature": "GivenLoader findLoader(Map given, String type)", "full_signature": "private GivenLoader findLoader(Map given, String type)", "class_method_signature": "RestxSpecLoader.findLoader(Map given, String type)", "testcase": false, "constructor": false}], "file": "restx-core/src/main/java/restx/specs/RestxSpecLoader.java"}, "focal_method": {"identifier": "load", "parameters": "(String resource)", "modifiers": "public", "return": "RestxSpec", "body": "public RestxSpec load(String resource) throws IOException {\n        return load(resource, Resources.asCharSource(\n                MoreResources.getResource(resource, true),\n                Charsets.UTF_8));\n    }", "signature": "RestxSpec load(String resource)", "full_signature": "public RestxSpec load(String resource)", "class_method_signature": "RestxSpecLoader.load(String resource)", "testcase": false, "constructor": false, "invocations": ["load", "asCharSource", "getResource"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}