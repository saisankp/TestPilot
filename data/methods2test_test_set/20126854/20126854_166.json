{"test_class": {"identifier": "PartiallyUncompressingPipeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ByteArrayOutputStream outBuffer;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "outBuffer", "var_name": "outBuffer"}, {"original_string": "private PartiallyUncompressingPipe stream;", "modifier": "private", "type": "PartiallyUncompressingPipe", "declarator": "stream", "var_name": "stream"}], "file": "feya/libraries/archive_diff/diff.shared/src/test/java/com/google/archivepatcher/shared/PartiallyUncompressingPipeTest.java"}, "test_case": {"identifier": "testWriteAll_Compressed_NoWrapFalse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWriteAll_Compressed_NoWrapFalse() throws IOException {\n    UnitTestZipEntry entry = UnitTestZipArchive.makeUnitTestZipEntry(\"/foo\", 6, \"frobozz\", null);\n\n    // Make a compressor with nowrap set to *false* (unusual) and pump the uncompressed entry\n    // content through it.\n    DeflateCompressor compressor = new DeflateCompressor();\n    compressor.setNowrap(false);\n    ByteArrayOutputStream compressBuffer = new ByteArrayOutputStream();\n    compressor.compress(\n        new ByteArrayInputStream(entry.getUncompressedBinaryContent()), compressBuffer);\n\n    // Now use the compressed data as input to the PartiallyUncompressingPipe.\n    stream.pipe(new ByteArrayInputStream(compressBuffer.toByteArray()), Mode.UNCOMPRESS_WRAPPED);\n    Assert.assertArrayEquals(entry.getUncompressedBinaryContent(), outBuffer.toByteArray());\n  }", "signature": "void testWriteAll_Compressed_NoWrapFalse()", "full_signature": "@Test public void testWriteAll_Compressed_NoWrapFalse()", "class_method_signature": "PartiallyUncompressingPipeTest.testWriteAll_Compressed_NoWrapFalse()", "testcase": true, "constructor": false, "invocations": ["makeUnitTestZipEntry", "setNowrap", "compress", "getUncompressedBinaryContent", "pipe", "toByteArray", "assertArrayEquals", "getUncompressedBinaryContent", "toByteArray"]}, "focal_class": {"identifier": "PartiallyUncompressingPipe", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private final DeflateUncompressor uncompressor;", "modifier": "private final", "type": "DeflateUncompressor", "declarator": "uncompressor", "var_name": "uncompressor"}, {"original_string": "private final CountingOutputStream out;", "modifier": "private final", "type": "CountingOutputStream", "declarator": "out", "var_name": "out"}, {"original_string": "private final byte[] copyBuffer;", "modifier": "private final", "type": "byte[]", "declarator": "copyBuffer", "var_name": "copyBuffer"}], "methods": [{"identifier": "PartiallyUncompressingPipe", "parameters": "(OutputStream out, int copyBufferSize)", "modifiers": "public", "return": "", "signature": " PartiallyUncompressingPipe(OutputStream out, int copyBufferSize)", "full_signature": "public  PartiallyUncompressingPipe(OutputStream out, int copyBufferSize)", "class_method_signature": "PartiallyUncompressingPipe.PartiallyUncompressingPipe(OutputStream out, int copyBufferSize)", "testcase": false, "constructor": true}, {"identifier": "pipe", "parameters": "(InputStream in, Mode mode)", "modifiers": "public", "return": "long", "signature": "long pipe(InputStream in, Mode mode)", "full_signature": "public long pipe(InputStream in, Mode mode)", "class_method_signature": "PartiallyUncompressingPipe.pipe(InputStream in, Mode mode)", "testcase": false, "constructor": false}, {"identifier": "getNumBytesWritten", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNumBytesWritten()", "full_signature": "public long getNumBytesWritten()", "class_method_signature": "PartiallyUncompressingPipe.getNumBytesWritten()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PartiallyUncompressingPipe.close()", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.shared/src/main/java/com/google/archivepatcher/shared/PartiallyUncompressingPipe.java"}, "focal_method": {"identifier": "pipe", "parameters": "(InputStream in, Mode mode)", "modifiers": "public", "return": "long", "body": "public long pipe(InputStream in, Mode mode) throws IOException {\n    long bytesWrittenBefore = out.getNumBytesWritten();\n    if (mode == Mode.COPY) {\n      int numRead = 0;\n      while ((numRead = in.read(copyBuffer)) >= 0) {\n        out.write(copyBuffer, 0, numRead);\n      }\n    } else {\n      uncompressor.setNowrap(mode == Mode.UNCOMPRESS_NOWRAP);\n      uncompressor.uncompress(in, out);\n    }\n    out.flush();\n    return out.getNumBytesWritten() - bytesWrittenBefore;\n  }", "signature": "long pipe(InputStream in, Mode mode)", "full_signature": "public long pipe(InputStream in, Mode mode)", "class_method_signature": "PartiallyUncompressingPipe.pipe(InputStream in, Mode mode)", "testcase": false, "constructor": false, "invocations": ["getNumBytesWritten", "read", "write", "setNowrap", "uncompress", "flush", "getNumBytesWritten"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}