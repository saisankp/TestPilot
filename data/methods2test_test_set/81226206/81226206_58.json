{"test_class": {"identifier": "MatchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MatchTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MatchTest.class)", "var_name": "logger"}], "file": "karate-core/src/test/java/com/intuit/karate/MatchTest.java"}, "test_case": {"identifier": "testJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJson() {\n        new Match(\"{ a: 'foo', b: 1 }\").equals(\"{ b: 1, a: 'foo' }\");\n        new Match(\"[{ a: 'foo', b: 1 }, { a: 'bar', b: 2 }]\").equals(\"[{ b: 1, a: 'foo' }, { b: 2, a: 'bar' }]\");\n    }", "signature": "void testJson()", "full_signature": "@Test public void testJson()", "class_method_signature": "MatchTest.testJson()", "testcase": true, "constructor": false, "invocations": ["equals", "equals"]}, "focal_class": {"identifier": "Match", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final ScenarioContext context;", "modifier": "protected final", "type": "ScenarioContext", "declarator": "context", "var_name": "context"}, {"original_string": "private ScriptValue prevValue = ScriptValue.NULL;", "modifier": "private", "type": "ScriptValue", "declarator": "prevValue = ScriptValue.NULL", "var_name": "prevValue"}], "methods": [{"identifier": "forHttp", "parameters": "(LogAppender appender)", "modifiers": "public static", "return": "Match", "signature": "Match forHttp(LogAppender appender)", "full_signature": "public static Match forHttp(LogAppender appender)", "class_method_signature": "Match.forHttp(LogAppender appender)", "testcase": false, "constructor": false}, {"identifier": "forHttp", "parameters": "(ScenarioContext context)", "modifiers": "public static", "return": "Match", "signature": "Match forHttp(ScenarioContext context)", "full_signature": "public static Match forHttp(ScenarioContext context)", "class_method_signature": "Match.forHttp(ScenarioContext context)", "testcase": false, "constructor": false}, {"identifier": "Match", "parameters": "(String exp)", "modifiers": "public", "return": "", "signature": " Match(String exp)", "full_signature": "public  Match(String exp)", "class_method_signature": "Match.Match(String exp)", "testcase": false, "constructor": true}, {"identifier": "Match", "parameters": "()", "modifiers": "public", "return": "", "signature": " Match()", "full_signature": "public  Match()", "class_method_signature": "Match.Match()", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Match.clear()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Object o)", "modifiers": "public static", "return": "Match", "signature": "Match init(Object o)", "full_signature": "public static Match init(Object o)", "class_method_signature": "Match.init(Object o)", "testcase": false, "constructor": false}, {"identifier": "Match", "parameters": "(ScenarioContext context)", "modifiers": "private", "return": "", "signature": " Match(ScenarioContext context)", "full_signature": "private  Match(ScenarioContext context)", "class_method_signature": "Match.Match(ScenarioContext context)", "testcase": false, "constructor": true}, {"identifier": "Match", "parameters": "(LogAppender appender, String exp)", "modifiers": "private", "return": "", "signature": " Match(LogAppender appender, String exp)", "full_signature": "private  Match(LogAppender appender, String exp)", "class_method_signature": "Match.Match(LogAppender appender, String exp)", "testcase": false, "constructor": true}, {"identifier": "handleFailure", "parameters": "(AssertionResult ar)", "modifiers": "private", "return": "void", "signature": "void handleFailure(AssertionResult ar)", "full_signature": "private void handleFailure(AssertionResult ar)", "class_method_signature": "Match.handleFailure(AssertionResult ar)", "testcase": false, "constructor": false}, {"identifier": "text", "parameters": "(String name, String exp)", "modifiers": "public", "return": "Match", "signature": "Match text(String name, String exp)", "full_signature": "public Match text(String name, String exp)", "class_method_signature": "Match.text(String name, String exp)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(Map<String, Object> map)", "modifiers": "public", "return": "Match", "signature": "Match putAll(Map<String, Object> map)", "full_signature": "public Match putAll(Map<String, Object> map)", "class_method_signature": "Match.putAll(Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "eval", "parameters": "(String exp)", "modifiers": "public", "return": "Match", "signature": "Match eval(String exp)", "full_signature": "public Match eval(String exp)", "class_method_signature": "Match.eval(String exp)", "testcase": false, "constructor": false}, {"identifier": "def", "parameters": "(String name, String exp)", "modifiers": "public", "return": "Match", "signature": "Match def(String name, String exp)", "full_signature": "public Match def(String name, String exp)", "class_method_signature": "Match.def(String name, String exp)", "testcase": false, "constructor": false}, {"identifier": "def", "parameters": "(String name, Object o)", "modifiers": "public", "return": "Match", "signature": "Match def(String name, Object o)", "full_signature": "public Match def(String name, Object o)", "class_method_signature": "Match.def(String name, Object o)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "public", "return": "Match", "signature": "Match get(String key)", "full_signature": "public Match get(String key)", "class_method_signature": "Match.get(String key)", "testcase": false, "constructor": false}, {"identifier": "jsonPath", "parameters": "(String exp)", "modifiers": "public", "return": "Match", "signature": "Match jsonPath(String exp)", "full_signature": "public Match jsonPath(String exp)", "class_method_signature": "Match.jsonPath(String exp)", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "()", "modifiers": "public", "return": "ScriptValue", "signature": "ScriptValue value()", "full_signature": "public ScriptValue value()", "class_method_signature": "Match.value()", "testcase": false, "constructor": false}, {"identifier": "isBooleanTrue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBooleanTrue()", "full_signature": "public boolean isBooleanTrue()", "class_method_signature": "Match.isBooleanTrue()", "testcase": false, "constructor": false}, {"identifier": "asString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String asString()", "full_signature": "public String asString()", "class_method_signature": "Match.asString()", "testcase": false, "constructor": false}, {"identifier": "asInt", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int asInt()", "full_signature": "public int asInt()", "class_method_signature": "Match.asInt()", "testcase": false, "constructor": false}, {"identifier": "asType", "parameters": "(Class<T> clazz)", "modifiers": "public", "return": "T", "signature": "T asType(Class<T> clazz)", "full_signature": "public T asType(Class<T> clazz)", "class_method_signature": "Match.asType(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "asMap", "parameters": "(String exp)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> asMap(String exp)", "full_signature": "public Map<String, Object> asMap(String exp)", "class_method_signature": "Match.asMap(String exp)", "testcase": false, "constructor": false}, {"identifier": "asMap", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> asMap()", "full_signature": "public Map<String, Object> asMap()", "class_method_signature": "Match.asMap()", "testcase": false, "constructor": false}, {"identifier": "asJson", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String asJson()", "full_signature": "public String asJson()", "class_method_signature": "Match.asJson()", "testcase": false, "constructor": false}, {"identifier": "allAsMap", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> allAsMap()", "full_signature": "public Map<String, Object> allAsMap()", "class_method_signature": "Match.allAsMap()", "testcase": false, "constructor": false}, {"identifier": "vars", "parameters": "()", "modifiers": "public", "return": "ScriptValueMap", "signature": "ScriptValueMap vars()", "full_signature": "public ScriptValueMap vars()", "class_method_signature": "Match.vars()", "testcase": false, "constructor": false}, {"identifier": "allAsJson", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String allAsJson()", "full_signature": "public String allAsJson()", "class_method_signature": "Match.allAsJson()", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "(String exp)", "modifiers": "public", "return": "List<Object>", "signature": "List<Object> asList(String exp)", "full_signature": "public List<Object> asList(String exp)", "class_method_signature": "Match.asList(String exp)", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List asList()", "full_signature": "public List asList()", "class_method_signature": "Match.asList()", "testcase": false, "constructor": false}, {"identifier": "equalsText", "parameters": "(String exp)", "modifiers": "public", "return": "Match", "signature": "Match equalsText(String exp)", "full_signature": "public Match equalsText(String exp)", "class_method_signature": "Match.equalsText(String exp)", "testcase": false, "constructor": false}, {"identifier": "quote", "parameters": "(String exp)", "modifiers": "public static", "return": "String", "signature": "String quote(String exp)", "full_signature": "public static String quote(String exp)", "class_method_signature": "Match.quote(String exp)", "testcase": false, "constructor": false}, {"identifier": "matchText", "parameters": "(String exp, MatchType matchType)", "modifiers": "public", "return": "Match", "signature": "Match matchText(String exp, MatchType matchType)", "full_signature": "public Match matchText(String exp, MatchType matchType)", "class_method_signature": "Match.matchText(String exp, MatchType matchType)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(String exp, MatchType matchType)", "modifiers": "private", "return": "Match", "signature": "Match match(String exp, MatchType matchType)", "full_signature": "private Match match(String exp, MatchType matchType)", "class_method_signature": "Match.match(String exp, MatchType matchType)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(String exp)", "modifiers": "public", "return": "Match", "signature": "Match equals(String exp)", "full_signature": "public Match equals(String exp)", "class_method_signature": "Match.equals(String exp)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String exp)", "modifiers": "public", "return": "Match", "signature": "Match contains(String exp)", "full_signature": "public Match contains(String exp)", "class_method_signature": "Match.contains(String exp)", "testcase": false, "constructor": false}, {"identifier": "equalsObject", "parameters": "(Object o)", "modifiers": "public", "return": "Match", "signature": "Match equalsObject(Object o)", "full_signature": "public Match equalsObject(Object o)", "class_method_signature": "Match.equalsObject(Object o)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "public", "return": "Match", "signature": "Match contains(Object o)", "full_signature": "public Match contains(Object o)", "class_method_signature": "Match.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(Object o, MatchType matchType)", "modifiers": "private", "return": "Match", "signature": "Match match(Object o, MatchType matchType)", "full_signature": "private Match match(Object o, MatchType matchType)", "class_method_signature": "Match.match(Object o, MatchType matchType)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o, String exp)", "modifiers": "public static", "return": "Match", "signature": "Match equals(Object o, String exp)", "full_signature": "public static Match equals(Object o, String exp)", "class_method_signature": "Match.equals(Object o, String exp)", "testcase": false, "constructor": false}, {"identifier": "equalsText", "parameters": "(Object o, String exp)", "modifiers": "public static", "return": "Match", "signature": "Match equalsText(Object o, String exp)", "full_signature": "public static Match equalsText(Object o, String exp)", "class_method_signature": "Match.equalsText(Object o, String exp)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o, String exp)", "modifiers": "public static", "return": "Match", "signature": "Match contains(Object o, String exp)", "full_signature": "public static Match contains(Object o, String exp)", "class_method_signature": "Match.contains(Object o, String exp)", "testcase": false, "constructor": false}, {"identifier": "containsText", "parameters": "(Object o, String exp)", "modifiers": "public static", "return": "Match", "signature": "Match containsText(Object o, String exp)", "full_signature": "public static Match containsText(Object o, String exp)", "class_method_signature": "Match.containsText(Object o, String exp)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(Object o, String exp, MatchType matchType)", "modifiers": "private static", "return": "Match", "signature": "Match match(Object o, String exp, MatchType matchType)", "full_signature": "private static Match match(Object o, String exp, MatchType matchType)", "class_method_signature": "Match.match(Object o, String exp, MatchType matchType)", "testcase": false, "constructor": false}, {"identifier": "matchText", "parameters": "(Object o, String exp, MatchType matchType)", "modifiers": "private static", "return": "Match", "signature": "Match matchText(Object o, String exp, MatchType matchType)", "full_signature": "private static Match matchText(Object o, String exp, MatchType matchType)", "class_method_signature": "Match.matchText(Object o, String exp, MatchType matchType)", "testcase": false, "constructor": false}, {"identifier": "config", "parameters": "(String key, String value)", "modifiers": "public", "return": "Match", "signature": "Match config(String key, String value)", "full_signature": "public Match config(String key, String value)", "class_method_signature": "Match.config(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "config", "parameters": "(Map<String, Object> config)", "modifiers": "public", "return": "Match", "signature": "Match config(Map<String, Object> config)", "full_signature": "public Match config(Map<String, Object> config)", "class_method_signature": "Match.config(Map<String, Object> config)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/Match.java"}, "focal_method": {"identifier": "equals", "parameters": "(String exp)", "modifiers": "public", "return": "Match", "body": "public Match equals(String exp) {\n        return match(exp, MatchType.EQUALS);\n    }", "signature": "Match equals(String exp)", "full_signature": "public Match equals(String exp)", "class_method_signature": "Match.equals(String exp)", "testcase": false, "constructor": false, "invocations": ["match"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}