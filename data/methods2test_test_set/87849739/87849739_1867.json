{"test_class": {"identifier": "AcknowledgementAdapterTest", "superclass": "", "interfaces": "implements ProtocolAdapterTest", "fields": [{"original_string": "private static final AcknowledgementLabel KNOWN_CUSTOM_LABEL = AcknowledgementLabel.of(\"my-custom-ack\");", "modifier": "private static final", "type": "AcknowledgementLabel", "declarator": "KNOWN_CUSTOM_LABEL = AcknowledgementLabel.of(\"my-custom-ack\")", "var_name": "KNOWN_CUSTOM_LABEL"}, {"original_string": "private static TopicPath topicPathMyCustomAck;", "modifier": "private static", "type": "TopicPath", "declarator": "topicPathMyCustomAck", "var_name": "topicPathMyCustomAck"}, {"original_string": "private AcknowledgementAdapter underTest;", "modifier": "private", "type": "AcknowledgementAdapter", "declarator": "underTest", "var_name": "underTest"}], "file": "protocol-adapter/src/test/java/org/eclipse/ditto/protocoladapter/acknowledgements/AcknowledgementAdapterTest.java"}, "test_case": {"identifier": "acknowledgementToAdaptable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void acknowledgementToAdaptable() {\n        final DittoHeaders dittoHeaders = DittoHeaders.newBuilder().randomCorrelationId().build();\n        final JsonValue customAckPayload = JsonObject.newBuilder().set(\"foo\", \"bar\").build();\n        final HttpStatusCode status = HttpStatusCode.BAD_REQUEST;\n\n        final Acknowledgement acknowledgement = ThingAcknowledgementFactory.newAcknowledgement(KNOWN_CUSTOM_LABEL,\n                TestConstants.THING_ID,\n                status,\n                dittoHeaders,\n                customAckPayload);\n\n        final Adaptable expected = Adaptable.newBuilder(topicPathMyCustomAck)\n                .withPayload(Payload.newBuilder(JsonPointer.empty())\n                        .withValue(customAckPayload)\n                        .withStatus(status)\n                        .build())\n                .withHeaders(dittoHeaders)\n                .build();\n\n        final Adaptable actual = underTest.toAdaptable(acknowledgement);\n\n        assertWithExternalHeadersThat(actual).isEqualTo(expected);\n    }", "signature": "void acknowledgementToAdaptable()", "full_signature": "@Test public void acknowledgementToAdaptable()", "class_method_signature": "AcknowledgementAdapterTest.acknowledgementToAdaptable()", "testcase": true, "constructor": false, "invocations": ["build", "randomCorrelationId", "newBuilder", "build", "set", "newBuilder", "newAcknowledgement", "build", "withHeaders", "withPayload", "newBuilder", "build", "withStatus", "withValue", "newBuilder", "empty", "toAdaptable", "isEqualTo", "assertWithExternalHeadersThat"]}, "focal_class": {"identifier": "AcknowledgementAdapter", "superclass": "", "interfaces": "implements Adapter<Acknowledgement>", "fields": [{"original_string": "private final HeaderTranslator headerTranslator;", "modifier": "private final", "type": "HeaderTranslator", "declarator": "headerTranslator", "var_name": "headerTranslator"}], "methods": [{"identifier": "AcknowledgementAdapter", "parameters": "(final HeaderTranslator headerTranslator)", "modifiers": "private", "return": "", "signature": " AcknowledgementAdapter(final HeaderTranslator headerTranslator)", "full_signature": "private  AcknowledgementAdapter(final HeaderTranslator headerTranslator)", "class_method_signature": "AcknowledgementAdapter.AcknowledgementAdapter(final HeaderTranslator headerTranslator)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(final HeaderTranslator headerTranslator)", "modifiers": "static", "return": "AcknowledgementAdapter", "signature": "AcknowledgementAdapter getInstance(final HeaderTranslator headerTranslator)", "full_signature": "static AcknowledgementAdapter getInstance(final HeaderTranslator headerTranslator)", "class_method_signature": "AcknowledgementAdapter.getInstance(final HeaderTranslator headerTranslator)", "testcase": false, "constructor": false}, {"identifier": "getTopicPathBuilder", "parameters": "(final TopicPath.Channel channel,\n            final EntityIdWithType entityId)", "modifiers": "static", "return": "AcknowledgementTopicPathBuilder", "signature": "AcknowledgementTopicPathBuilder getTopicPathBuilder(final TopicPath.Channel channel,\n            final EntityIdWithType entityId)", "full_signature": "static AcknowledgementTopicPathBuilder getTopicPathBuilder(final TopicPath.Channel channel,\n            final EntityIdWithType entityId)", "class_method_signature": "AcknowledgementAdapter.getTopicPathBuilder(final TopicPath.Channel channel,\n            final EntityIdWithType entityId)", "testcase": false, "constructor": false}, {"identifier": "fromAdaptable", "parameters": "(final Adaptable adaptable)", "modifiers": "@Override public", "return": "Acknowledgement", "signature": "Acknowledgement fromAdaptable(final Adaptable adaptable)", "full_signature": "@Override public Acknowledgement fromAdaptable(final Adaptable adaptable)", "class_method_signature": "AcknowledgementAdapter.fromAdaptable(final Adaptable adaptable)", "testcase": false, "constructor": false}, {"identifier": "getThingId", "parameters": "(final Adaptable adaptable)", "modifiers": "private static", "return": "ThingId", "signature": "ThingId getThingId(final Adaptable adaptable)", "full_signature": "private static ThingId getThingId(final Adaptable adaptable)", "class_method_signature": "AcknowledgementAdapter.getThingId(final Adaptable adaptable)", "testcase": false, "constructor": false}, {"identifier": "getStatusCodeOrThrow", "parameters": "(final Adaptable adaptable)", "modifiers": "private static", "return": "HttpStatusCode", "signature": "HttpStatusCode getStatusCodeOrThrow(final Adaptable adaptable)", "full_signature": "private static HttpStatusCode getStatusCodeOrThrow(final Adaptable adaptable)", "class_method_signature": "AcknowledgementAdapter.getStatusCodeOrThrow(final Adaptable adaptable)", "testcase": false, "constructor": false}, {"identifier": "getAcknowledgementLabel", "parameters": "(final Adaptable adaptable)", "modifiers": "private static", "return": "AcknowledgementLabel", "signature": "AcknowledgementLabel getAcknowledgementLabel(final Adaptable adaptable)", "full_signature": "private static AcknowledgementLabel getAcknowledgementLabel(final Adaptable adaptable)", "class_method_signature": "AcknowledgementAdapter.getAcknowledgementLabel(final Adaptable adaptable)", "testcase": false, "constructor": false}, {"identifier": "getPayloadValueOrNull", "parameters": "(final Adaptable adaptable)", "modifiers": "@Nullable private static", "return": "JsonValue", "signature": "JsonValue getPayloadValueOrNull(final Adaptable adaptable)", "full_signature": "@Nullable private static JsonValue getPayloadValueOrNull(final Adaptable adaptable)", "class_method_signature": "AcknowledgementAdapter.getPayloadValueOrNull(final Adaptable adaptable)", "testcase": false, "constructor": false}, {"identifier": "toAdaptable", "parameters": "(final Acknowledgement acknowledgement, final TopicPath.Channel channel)", "modifiers": "@Override public", "return": "Adaptable", "signature": "Adaptable toAdaptable(final Acknowledgement acknowledgement, final TopicPath.Channel channel)", "full_signature": "@Override public Adaptable toAdaptable(final Acknowledgement acknowledgement, final TopicPath.Channel channel)", "class_method_signature": "AcknowledgementAdapter.toAdaptable(final Acknowledgement acknowledgement, final TopicPath.Channel channel)", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "()", "modifiers": "@Override public", "return": "Set<TopicPath.Group>", "signature": "Set<TopicPath.Group> getGroups()", "full_signature": "@Override public Set<TopicPath.Group> getGroups()", "class_method_signature": "AcknowledgementAdapter.getGroups()", "testcase": false, "constructor": false}, {"identifier": "getChannels", "parameters": "()", "modifiers": "@Override public", "return": "Set<TopicPath.Channel>", "signature": "Set<TopicPath.Channel> getChannels()", "full_signature": "@Override public Set<TopicPath.Channel> getChannels()", "class_method_signature": "AcknowledgementAdapter.getChannels()", "testcase": false, "constructor": false}, {"identifier": "getCriteria", "parameters": "()", "modifiers": "@Override public", "return": "Set<TopicPath.Criterion>", "signature": "Set<TopicPath.Criterion> getCriteria()", "full_signature": "@Override public Set<TopicPath.Criterion> getCriteria()", "class_method_signature": "AcknowledgementAdapter.getCriteria()", "testcase": false, "constructor": false}, {"identifier": "getActions", "parameters": "()", "modifiers": "@Override public", "return": "Set<TopicPath.Action>", "signature": "Set<TopicPath.Action> getActions()", "full_signature": "@Override public Set<TopicPath.Action> getActions()", "class_method_signature": "AcknowledgementAdapter.getActions()", "testcase": false, "constructor": false}, {"identifier": "isForResponses", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isForResponses()", "full_signature": "@Override public boolean isForResponses()", "class_method_signature": "AcknowledgementAdapter.isForResponses()", "testcase": false, "constructor": false}, {"identifier": "requiresSubject", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean requiresSubject()", "full_signature": "@Override public boolean requiresSubject()", "class_method_signature": "AcknowledgementAdapter.requiresSubject()", "testcase": false, "constructor": false}, {"identifier": "getTopicPath", "parameters": "(final Acknowledgement acknowledgement, final TopicPath.Channel channel)", "modifiers": "private static", "return": "TopicPath", "signature": "TopicPath getTopicPath(final Acknowledgement acknowledgement, final TopicPath.Channel channel)", "full_signature": "private static TopicPath getTopicPath(final Acknowledgement acknowledgement, final TopicPath.Channel channel)", "class_method_signature": "AcknowledgementAdapter.getTopicPath(final Acknowledgement acknowledgement, final TopicPath.Channel channel)", "testcase": false, "constructor": false}, {"identifier": "getPayload", "parameters": "(final Acknowledgement acknowledgement)", "modifiers": "private static", "return": "Payload", "signature": "Payload getPayload(final Acknowledgement acknowledgement)", "full_signature": "private static Payload getPayload(final Acknowledgement acknowledgement)", "class_method_signature": "AcknowledgementAdapter.getPayload(final Acknowledgement acknowledgement)", "testcase": false, "constructor": false}, {"identifier": "getExternalHeaders", "parameters": "(final DittoHeaders acknowledgementHeaders)", "modifiers": "private", "return": "DittoHeaders", "signature": "DittoHeaders getExternalHeaders(final DittoHeaders acknowledgementHeaders)", "full_signature": "private DittoHeaders getExternalHeaders(final DittoHeaders acknowledgementHeaders)", "class_method_signature": "AcknowledgementAdapter.getExternalHeaders(final DittoHeaders acknowledgementHeaders)", "testcase": false, "constructor": false}], "file": "protocol-adapter/src/main/java/org/eclipse/ditto/protocoladapter/acknowledgements/AcknowledgementAdapter.java"}, "focal_method": {"identifier": "toAdaptable", "parameters": "(final Acknowledgement acknowledgement, final TopicPath.Channel channel)", "modifiers": "@Override public", "return": "Adaptable", "body": "@Override\n    public Adaptable toAdaptable(final Acknowledgement acknowledgement, final TopicPath.Channel channel) {\n        if (DittoAcknowledgementLabel.contains(acknowledgement.getLabel())) {\n            throw new DittoAcknowledgementLabelExternalUseForbiddenException(acknowledgement.getLabel());\n        }\n        return Adaptable.newBuilder(getTopicPath(acknowledgement, channel))\n                .withPayload(getPayload(acknowledgement))\n                .withHeaders(getExternalHeaders(acknowledgement.getDittoHeaders()))\n                .build();\n    }", "signature": "Adaptable toAdaptable(final Acknowledgement acknowledgement, final TopicPath.Channel channel)", "full_signature": "@Override public Adaptable toAdaptable(final Acknowledgement acknowledgement, final TopicPath.Channel channel)", "class_method_signature": "AcknowledgementAdapter.toAdaptable(final Acknowledgement acknowledgement, final TopicPath.Channel channel)", "testcase": false, "constructor": false, "invocations": ["contains", "getLabel", "getLabel", "build", "withHeaders", "withPayload", "newBuilder", "getTopicPath", "getPayload", "getExternalHeaders", "getDittoHeaders"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}