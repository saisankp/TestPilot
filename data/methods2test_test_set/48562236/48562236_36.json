{"test_class": {"identifier": "StplTemplateTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/st/stpl/StplTemplateTest.java"}, "test_case": {"identifier": "testSimpleStplTemplate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSimpleStplTemplate(){\n\t\tassertEquals(\"test\", render(\"test\",new HashMap<String,Object>()));\n\t\tassertEquals(\"test\", render(\"$var$\",New.<String,Object>hashMap(\"var\", \"test\")));\n\t\tassertEquals(\"test1\", render(\"$var$1\",New.<String,Object>hashMap(\"var\", \"test\")));\n\t\tassertEquals(\"test1\", render(\"$var$1{?$var1$}\",New.<String,Object>hashMap(\"var\", \"test\")));\n\t\tassertEquals(\"test1test2\", render(\"$var$1{?$var1$}\",New.<String,Object>hashMap(\"var\", \"test\",\"var1\",\"test2\")));\n\t}", "signature": "void testSimpleStplTemplate()", "full_signature": "@Test public void testSimpleStplTemplate()", "class_method_signature": "StplTemplateTest.testSimpleStplTemplate()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "render", "assertEquals", "render", "hashMap", "assertEquals", "render", "hashMap", "assertEquals", "render", "hashMap", "assertEquals", "render", "hashMap"]}, "focal_class": {"identifier": "StplTemplate", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String     text;", "modifier": "private final", "type": "String", "declarator": "text", "var_name": "text"}, {"original_string": "private final StplNode[] nodes;", "modifier": "private final", "type": "StplNode[]", "declarator": "nodes", "var_name": "nodes"}], "methods": [{"identifier": "parse", "parameters": "(String text)", "modifiers": "public static", "return": "StplTemplate", "signature": "StplTemplate parse(String text)", "full_signature": "public static StplTemplate parse(String text)", "class_method_signature": "StplTemplate.parse(String text)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(String template,Map<String, Object> params)", "modifiers": "public static", "return": "String", "signature": "String render(String template,Map<String, Object> params)", "full_signature": "public static String render(String template,Map<String, Object> params)", "class_method_signature": "StplTemplate.render(String template,Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(String template,Params params)", "modifiers": "public static", "return": "String", "signature": "String render(String template,Params params)", "full_signature": "public static String render(String template,Params params)", "class_method_signature": "StplTemplate.render(String template,Params params)", "testcase": false, "constructor": false}, {"identifier": "StplTemplate", "parameters": "(final String text,final StplNode[] nodes)", "modifiers": "", "return": "", "signature": " StplTemplate(final String text,final StplNode[] nodes)", "full_signature": "  StplTemplate(final String text,final StplNode[] nodes)", "class_method_signature": "StplTemplate.StplTemplate(final String text,final StplNode[] nodes)", "testcase": false, "constructor": true}, {"identifier": "getText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getText()", "full_signature": "public String getText()", "class_method_signature": "StplTemplate.getText()", "testcase": false, "constructor": false}, {"identifier": "getNodes", "parameters": "()", "modifiers": "protected", "return": "StplNode[]", "signature": "StplNode[] getNodes()", "full_signature": "protected StplNode[] getNodes()", "class_method_signature": "StplTemplate.getNodes()", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(Params params)", "modifiers": "public", "return": "String", "signature": "String render(Params params)", "full_signature": "public String render(Params params)", "class_method_signature": "StplTemplate.render(Params params)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(Map<String, Object> params)", "modifiers": "public", "return": "String", "signature": "String render(Map<String, Object> params)", "full_signature": "public String render(Map<String, Object> params)", "class_method_signature": "StplTemplate.render(Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(StringBuilder out,Params params)", "modifiers": "public", "return": "void", "signature": "void render(StringBuilder out,Params params)", "full_signature": "public void render(StringBuilder out,Params params)", "class_method_signature": "StplTemplate.render(StringBuilder out,Params params)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(StringBuilder out,Map<String, Object> params)", "modifiers": "public", "return": "void", "signature": "void render(StringBuilder out,Map<String, Object> params)", "full_signature": "public void render(StringBuilder out,Map<String, Object> params)", "class_method_signature": "StplTemplate.render(StringBuilder out,Map<String, Object> params)", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/st/stpl/StplTemplate.java"}, "focal_method": {"identifier": "render", "parameters": "(String template,Map<String, Object> params)", "modifiers": "public static", "return": "String", "body": "public static String render(String template,Map<String, Object> params){\n\t\treturn parse(template).render(params);\n\t}", "signature": "String render(String template,Map<String, Object> params)", "full_signature": "public static String render(String template,Map<String, Object> params)", "class_method_signature": "StplTemplate.render(String template,Map<String, Object> params)", "testcase": false, "constructor": false, "invocations": ["render", "parse"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}