{"test_class": {"identifier": "BurgAlgorithmTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/data/BurgAlgorithmTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() {\n        ArimaModelBuilder builder = new ArimaModelBuilder();\n        int n = 240, m = 10;\n        for (int i = 0; i < m; ++i) {\n            double[] x = builder.generate(builder.createModel(Polynomial.of(new double[]{1, -.7, .5}), Polynomial.ONE, 1), n);\n            BurgAlgorithm burg = new BurgAlgorithm();\n            //Peaks peaks=new Peaks(new TsData(TsFrequency.Monthly, 1980, 0, x, true), 240, false);\n            assertTrue(burg.solve(new ReadDataBlock(x), 30));\n        }\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "BurgAlgorithmTest.test()", "testcase": true, "constructor": false, "invocations": ["generate", "createModel", "of", "assertTrue", "solve"]}, "focal_class": {"identifier": "BurgAlgorithm", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double[] x;", "modifier": "private", "type": "double[]", "declarator": "x", "var_name": "x"}, {"original_string": "private double[] a;", "modifier": "private", "type": "double[]", "declarator": "a", "var_name": "a"}], "methods": [{"identifier": "solve", "parameters": "(IReadDataBlock x, int m)", "modifiers": "public", "return": "boolean", "signature": "boolean solve(IReadDataBlock x, int m)", "full_signature": "public boolean solve(IReadDataBlock x, int m)", "class_method_signature": "BurgAlgorithm.solve(IReadDataBlock x, int m)", "testcase": false, "constructor": false}, {"identifier": "getCoefficients", "parameters": "()", "modifiers": "public", "return": "IReadDataBlock", "signature": "IReadDataBlock getCoefficients()", "full_signature": "public IReadDataBlock getCoefficients()", "class_method_signature": "BurgAlgorithm.getCoefficients()", "testcase": false, "constructor": false}, {"identifier": "residuals", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] residuals()", "full_signature": "public double[] residuals()", "class_method_signature": "BurgAlgorithm.residuals()", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(int m)", "modifiers": "private", "return": "boolean", "signature": "boolean calc(int m)", "full_signature": "private boolean calc(int m)", "class_method_signature": "BurgAlgorithm.calc(int m)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/data/BurgAlgorithm.java"}, "focal_method": {"identifier": "solve", "parameters": "(IReadDataBlock x, int m)", "modifiers": "public", "return": "boolean", "body": "public boolean solve(IReadDataBlock x, int m) {\n        this.x = new double[x.getLength()];\n        x.copyTo(this.x, 0);\n        return calc(m);\n    }", "signature": "boolean solve(IReadDataBlock x, int m)", "full_signature": "public boolean solve(IReadDataBlock x, int m)", "class_method_signature": "BurgAlgorithm.solve(IReadDataBlock x, int m)", "testcase": false, "constructor": false, "invocations": ["getLength", "copyTo", "calc"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}