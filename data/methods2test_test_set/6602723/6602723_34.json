{"test_class": {"identifier": "TestWebMBeanServerAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MBeanServer mockMbeanServer;", "modifier": "private", "type": "MBeanServer", "declarator": "mockMbeanServer", "var_name": "mockMbeanServer"}, {"original_string": "private WebMBeanServerAdapter webMBeanServerAdapter;", "modifier": "private", "type": "WebMBeanServerAdapter", "declarator": "webMBeanServerAdapter", "var_name": "webMBeanServerAdapter"}, {"original_string": "private MBeanStringSanitizer mockSanitizer;", "modifier": "private", "type": "MBeanStringSanitizer", "declarator": "mockSanitizer", "var_name": "mockSanitizer"}], "file": "jrugged-spring/src/test/java/org/fishwife/jrugged/spring/jmx/TestWebMBeanServerAdapter.java"}, "test_case": {"identifier": "testGetMBeanNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMBeanNames() throws Exception {\n        String name1 = \"com.test:type=objectName,value=1\";\n        String name2 = \"com.test:type=objectName,value=2\";\n        ObjectName objectName1 = new ObjectName(name1);\n        ObjectInstance object1 = createMock(ObjectInstance.class);\n        expect(object1.getObjectName()).andReturn(objectName1);\n\n        ObjectName objectName2 = new ObjectName(name2);\n        ObjectInstance object2 = createMock(ObjectInstance.class);\n        expect(object2.getObjectName()).andReturn(objectName2);\n\n        Set<ObjectInstance> objectInstanceList = new HashSet<ObjectInstance>();\n        objectInstanceList.add(object1);\n        objectInstanceList.add(object2);\n        expect(mockMbeanServer.queryMBeans(null, null)).andReturn(objectInstanceList);\n        expect(mockSanitizer.escapeValue(name1)).andReturn(name1);\n        expect(mockSanitizer.escapeValue(name2)).andReturn(name2);\n\n        replay(mockMbeanServer, mockSanitizer, object1, object2);\n\n        Set<String> resultSet = webMBeanServerAdapter.getMBeanNames();\n\n        assertEquals(2, resultSet.size());\n        assertTrue(resultSet.contains(name1));\n        assertTrue(resultSet.contains(name2));\n        verify(mockMbeanServer, mockSanitizer, object1, object2);\n    }", "signature": "void testGetMBeanNames()", "full_signature": "@Test public void testGetMBeanNames()", "class_method_signature": "TestWebMBeanServerAdapter.testGetMBeanNames()", "testcase": true, "constructor": false, "invocations": ["createMock", "andReturn", "expect", "getObjectName", "createMock", "andReturn", "expect", "getObjectName", "add", "add", "andReturn", "expect", "queryMBeans", "andReturn", "expect", "escapeValue", "andReturn", "expect", "escapeValue", "replay", "getMBeanNames", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "verify"]}, "focal_class": {"identifier": "WebMBeanServerAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MBeanServer mBeanServer;", "modifier": "private", "type": "MBeanServer", "declarator": "mBeanServer", "var_name": "mBeanServer"}, {"original_string": "private MBeanStringSanitizer sanitizer;", "modifier": "private", "type": "MBeanStringSanitizer", "declarator": "sanitizer", "var_name": "sanitizer"}], "methods": [{"identifier": "WebMBeanServerAdapter", "parameters": "(MBeanServer mBeanServer)", "modifiers": "public", "return": "", "signature": " WebMBeanServerAdapter(MBeanServer mBeanServer)", "full_signature": "public  WebMBeanServerAdapter(MBeanServer mBeanServer)", "class_method_signature": "WebMBeanServerAdapter.WebMBeanServerAdapter(MBeanServer mBeanServer)", "testcase": false, "constructor": true}, {"identifier": "getMBeanNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getMBeanNames()", "full_signature": "public Set<String> getMBeanNames()", "class_method_signature": "WebMBeanServerAdapter.getMBeanNames()", "testcase": false, "constructor": false}, {"identifier": "createWebMBeanAdapter", "parameters": "(String mBeanName, String encoding)", "modifiers": "public", "return": "WebMBeanAdapter", "signature": "WebMBeanAdapter createWebMBeanAdapter(String mBeanName, String encoding)", "full_signature": "public WebMBeanAdapter createWebMBeanAdapter(String mBeanName, String encoding)", "class_method_signature": "WebMBeanServerAdapter.createWebMBeanAdapter(String mBeanName, String encoding)", "testcase": false, "constructor": false}, {"identifier": "createMBeanStringSanitizer", "parameters": "()", "modifiers": "", "return": "MBeanStringSanitizer", "signature": "MBeanStringSanitizer createMBeanStringSanitizer()", "full_signature": " MBeanStringSanitizer createMBeanStringSanitizer()", "class_method_signature": "WebMBeanServerAdapter.createMBeanStringSanitizer()", "testcase": false, "constructor": false}], "file": "jrugged-spring/src/main/java/org/fishwife/jrugged/spring/jmx/WebMBeanServerAdapter.java"}, "focal_method": {"identifier": "getMBeanNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "body": "public Set<String> getMBeanNames() {\n        Set<String> nameSet = new TreeSet<String>();\n        for (ObjectInstance instance : mBeanServer.queryMBeans(null, null)) {\n            nameSet.add(sanitizer.escapeValue(instance.getObjectName().getCanonicalName()));\n        }\n        return nameSet;\n    }", "signature": "Set<String> getMBeanNames()", "full_signature": "public Set<String> getMBeanNames()", "class_method_signature": "WebMBeanServerAdapter.getMBeanNames()", "testcase": false, "constructor": false, "invocations": ["queryMBeans", "add", "escapeValue", "getCanonicalName", "getObjectName"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}