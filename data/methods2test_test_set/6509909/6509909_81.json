{"test_class": {"identifier": "HaikuTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INPUT_ONE = \"happy purple frog/eating bugs in the marshes/get indigestion\";", "modifier": "private static final", "type": "String", "declarator": "INPUT_ONE = \"happy purple frog/eating bugs in the marshes/get indigestion\"", "var_name": "INPUT_ONE"}, {"original_string": "private static final String INPUT_TWO = \"computer programs/the bugs try to eat my code/i will not let them\";", "modifier": "private static final", "type": "String", "declarator": "INPUT_TWO = \"computer programs/the bugs try to eat my code/i will not let them\"", "var_name": "INPUT_TWO"}], "file": "haikuReview/20140213-xavi-someone/src/test/java/HaikuTest.java"}, "test_case": {"identifier": "test_that_it_breaks_up_into_3_lines", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_that_it_breaks_up_into_3_lines() {\n        Haiku haiku = new Haiku(INPUT_ONE);\n        List<Haiku.Line> lines = haiku.asLines();\n        assertThat(lines.size()).isEqualTo(3);\n    }", "signature": "void test_that_it_breaks_up_into_3_lines()", "full_signature": "@Test public void test_that_it_breaks_up_into_3_lines()", "class_method_signature": "HaikuTest.test_that_it_breaks_up_into_3_lines()", "testcase": true, "constructor": false, "invocations": ["asLines", "isEqualTo", "assertThat", "size"]}, "focal_class": {"identifier": "Haiku", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String haiku;", "modifier": "private final", "type": "String", "declarator": "haiku", "var_name": "haiku"}, {"original_string": "private Pattern linesPattern = Pattern.compile(\"/\");", "modifier": "private", "type": "Pattern", "declarator": "linesPattern = Pattern.compile(\"/\")", "var_name": "linesPattern"}], "methods": [{"identifier": "Haiku", "parameters": "(String haiku)", "modifiers": "public", "return": "", "signature": " Haiku(String haiku)", "full_signature": "public  Haiku(String haiku)", "class_method_signature": "Haiku.Haiku(String haiku)", "testcase": false, "constructor": true}, {"identifier": "isValidLineCount", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isValidLineCount()", "full_signature": " boolean isValidLineCount()", "class_method_signature": "Haiku.isValidLineCount()", "testcase": false, "constructor": false}, {"identifier": "asLines", "parameters": "()", "modifiers": "public", "return": "List<Line>", "signature": "List<Line> asLines()", "full_signature": "public List<Line> asLines()", "class_method_signature": "Haiku.asLines()", "testcase": false, "constructor": false}], "file": "haikuReview/20140213-xavi-someone/src/main/java/Haiku.java"}, "focal_method": {"identifier": "asLines", "parameters": "()", "modifiers": "public", "return": "List<Line>", "body": "public List<Line> asLines() {\n        String[] split = linesPattern.split(haiku);\n        List<String> strings = Arrays.asList(split);\n        if (!isValidLineCount()) throw new RuntimeException(\"A haiku yoyo, it should be 3 lines only, try again carrot\");\n\n        List<Line> lines = new ArrayList<Line>();\n        for (String s : strings) {\n            lines.add(new Line(s));\n        }\n\n        return lines;\n    }", "signature": "List<Line> asLines()", "full_signature": "public List<Line> asLines()", "class_method_signature": "Haiku.asLines()", "testcase": false, "constructor": false, "invocations": ["split", "asList", "isValidLineCount", "add"]}, "repository": {"repo_id": 6509909, "url": "https://github.com/novoda/dojos", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 72, "size": 12987, "license": "licensed"}}