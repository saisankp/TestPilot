{"test_class": {"identifier": "DynamicBrokersReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DynamicBrokersReader dynamicBrokersReader;", "modifier": "private", "type": "DynamicBrokersReader", "declarator": "dynamicBrokersReader", "var_name": "dynamicBrokersReader"}, {"original_string": "private String masterPath = \"/brokers\";", "modifier": "private", "type": "String", "declarator": "masterPath = \"/brokers\"", "var_name": "masterPath"}, {"original_string": "private String topic = \"testing\";", "modifier": "private", "type": "String", "declarator": "topic = \"testing\"", "var_name": "topic"}, {"original_string": "private CuratorFramework zookeeper;", "modifier": "private", "type": "CuratorFramework", "declarator": "zookeeper", "var_name": "zookeeper"}, {"original_string": "private TestingServer server;", "modifier": "private", "type": "TestingServer", "declarator": "server", "var_name": "server"}], "file": "storm/storm-app/src/test/java/storm/kafka/DynamicBrokersReaderTest.java"}, "test_case": {"identifier": "testMultiplePartitionsOnSameHost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultiplePartitionsOnSameHost() throws Exception {\n        String host = \"localhost\";\n        int port = 9092;\n        int partition = 0;\n        int secondPartition = partition + 1;\n        addPartition(partition, 0, host, port);\n        addPartition(secondPartition, 0, host, port);\n\n        GlobalPartitionInformation brokerInfo = dynamicBrokersReader.getBrokerInfo();\n        assertEquals(2, brokerInfo.getOrderedPartitions().size());\n\n        assertEquals(port, brokerInfo.getBrokerFor(partition).port);\n        assertEquals(host, brokerInfo.getBrokerFor(partition).host);\n\n        assertEquals(port, brokerInfo.getBrokerFor(secondPartition).port);\n        assertEquals(host, brokerInfo.getBrokerFor(secondPartition).host);\n    }", "signature": "void testMultiplePartitionsOnSameHost()", "full_signature": "@Test public void testMultiplePartitionsOnSameHost()", "class_method_signature": "DynamicBrokersReaderTest.testMultiplePartitionsOnSameHost()", "testcase": true, "constructor": false, "invocations": ["addPartition", "addPartition", "getBrokerInfo", "assertEquals", "size", "getOrderedPartitions", "assertEquals", "getBrokerFor", "assertEquals", "getBrokerFor", "assertEquals", "getBrokerFor", "assertEquals", "getBrokerFor"]}, "focal_class": {"identifier": "DynamicBrokersReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = LoggerFactory.getLogger(DynamicBrokersReader.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DynamicBrokersReader.class)", "var_name": "LOG"}, {"original_string": "private CuratorFramework _curator;", "modifier": "private", "type": "CuratorFramework", "declarator": "_curator", "var_name": "_curator"}, {"original_string": "private String _zkPath;", "modifier": "private", "type": "String", "declarator": "_zkPath", "var_name": "_zkPath"}, {"original_string": "private String _topic;", "modifier": "private", "type": "String", "declarator": "_topic", "var_name": "_topic"}], "methods": [{"identifier": "DynamicBrokersReader", "parameters": "(Map conf, String zkStr, String zkPath, String topic)", "modifiers": "public", "return": "", "signature": " DynamicBrokersReader(Map conf, String zkStr, String zkPath, String topic)", "full_signature": "public  DynamicBrokersReader(Map conf, String zkStr, String zkPath, String topic)", "class_method_signature": "DynamicBrokersReader.DynamicBrokersReader(Map conf, String zkStr, String zkPath, String topic)", "testcase": false, "constructor": true}, {"identifier": "getBrokerInfo", "parameters": "()", "modifiers": "public", "return": "GlobalPartitionInformation", "signature": "GlobalPartitionInformation getBrokerInfo()", "full_signature": "public GlobalPartitionInformation getBrokerInfo()", "class_method_signature": "DynamicBrokersReader.getBrokerInfo()", "testcase": false, "constructor": false}, {"identifier": "getNumPartitions", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getNumPartitions()", "full_signature": "private int getNumPartitions()", "class_method_signature": "DynamicBrokersReader.getNumPartitions()", "testcase": false, "constructor": false}, {"identifier": "partitionPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String partitionPath()", "full_signature": "public String partitionPath()", "class_method_signature": "DynamicBrokersReader.partitionPath()", "testcase": false, "constructor": false}, {"identifier": "brokerPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String brokerPath()", "full_signature": "public String brokerPath()", "class_method_signature": "DynamicBrokersReader.brokerPath()", "testcase": false, "constructor": false}, {"identifier": "getLeaderFor", "parameters": "(long partition)", "modifiers": "private", "return": "int", "signature": "int getLeaderFor(long partition)", "full_signature": "private int getLeaderFor(long partition)", "class_method_signature": "DynamicBrokersReader.getLeaderFor(long partition)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "DynamicBrokersReader.close()", "testcase": false, "constructor": false}, {"identifier": "getBrokerHost", "parameters": "(byte[] contents)", "modifiers": "private", "return": "Broker", "signature": "Broker getBrokerHost(byte[] contents)", "full_signature": "private Broker getBrokerHost(byte[] contents)", "class_method_signature": "DynamicBrokersReader.getBrokerHost(byte[] contents)", "testcase": false, "constructor": false}], "file": "storm/storm-app/src/main/java/storm/kafka/DynamicBrokersReader.java"}, "focal_method": {"identifier": "getBrokerInfo", "parameters": "()", "modifiers": "public", "return": "GlobalPartitionInformation", "body": "public GlobalPartitionInformation getBrokerInfo() throws SocketTimeoutException {\n      GlobalPartitionInformation globalPartitionInformation = new GlobalPartitionInformation();\n        try {\n            int numPartitionsForTopic = getNumPartitions();\n            String brokerInfoPath = brokerPath();\n            for (int partition = 0; partition < numPartitionsForTopic; partition++) {\n                //\u83b7\u53d6\u6bcf\u4e2a\u5206\u533a\u7684leader\u8282\u70b9\u7684\u7f16\u53f7\n                int leader = getLeaderFor(partition);\n                //\u5728zk\u4e0a\u7684leader\u8282\u70b9\n                String path = brokerInfoPath + \"/\" + leader;\n                try {\n                    //leader\u8282\u70b9\u7684\u6570\u636e\n                    byte[] brokerData = _curator.getData().forPath(path);\n                    //\u91cd\u6784Broker\u5bf9\u8c61, \u5373\u901a\u8fc7\u914d\u7f6e\u5728ZK\u4e0a\u7684\u914d\u7f6e\u4fe1\u606f(ZK\u4f5c\u4e3a\u6ce8\u518c\u4e2d\u5fc3), \u83b7\u53d6Kafka\u96c6\u7fa4\u7684Brokers\u5217\u8868\n                    Broker hp = getBrokerHost(brokerData);\n                    //\u6bcf\u4e2a\u5206\u533a, Broker\n                    globalPartitionInformation.addPartition(partition, hp);\n                } catch (org.apache.zookeeper.KeeperException.NoNodeException e) {\n                    LOG.error(\"Node {} does not exist \", path);\n                }\n            }\n        } catch (SocketTimeoutException e) {\n\t\t\t\t\tthrow e;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        LOG.info(\"Read partition info from zookeeper: \" + globalPartitionInformation);\n        return globalPartitionInformation;\n    }", "signature": "GlobalPartitionInformation getBrokerInfo()", "full_signature": "public GlobalPartitionInformation getBrokerInfo()", "class_method_signature": "DynamicBrokersReader.getBrokerInfo()", "testcase": false, "constructor": false, "invocations": ["getNumPartitions", "brokerPath", "getLeaderFor", "forPath", "getData", "getBrokerHost", "addPartition", "error", "info"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}