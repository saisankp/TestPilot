{"test_class": {"identifier": "FileBasedStubConfigReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DESCRIPTOR_PATH = \"config\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTOR_PATH = \"config\"", "var_name": "DESCRIPTOR_PATH"}, {"original_string": "private static final String DESCRIPTOR_PATTERN = \"*_stubConfig.json\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTOR_PATTERN = \"*_stubConfig.json\"", "var_name": "DESCRIPTOR_PATTERN"}, {"original_string": "private static final String DESCRIPTOR_CACHE_PATH = \"config/cache\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTOR_CACHE_PATH = \"config/cache\"", "var_name": "DESCRIPTOR_CACHE_PATH"}, {"original_string": "@Mock\n    private StubDescriptorReader stubDescriptorReader;", "modifier": "@Mock\n    private", "type": "StubDescriptorReader", "declarator": "stubDescriptorReader", "var_name": "stubDescriptorReader"}, {"original_string": "@Mock\n    private EngineConfigurationAccess configurationAccess;", "modifier": "@Mock\n    private", "type": "EngineConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Mock\n    private PropertyDTO properties;", "modifier": "@Mock\n    private", "type": "PropertyDTO", "declarator": "properties", "var_name": "properties"}, {"original_string": "@Mock\n    private StubConfigSchemaParser stubConfigSchemaParser;", "modifier": "@Mock\n    private", "type": "StubConfigSchemaParser", "declarator": "stubConfigSchemaParser", "var_name": "stubConfigSchemaParser"}, {"original_string": "@Mock\n    private StubConfigSchema stubConfigSchema;", "modifier": "@Mock\n    private", "type": "StubConfigSchema", "declarator": "stubConfigSchema", "var_name": "stubConfigSchema"}, {"original_string": "@Mock\n    private StubConfigPathProvider cachePathProvider;", "modifier": "@Mock\n    private", "type": "StubConfigPathProvider", "declarator": "cachePathProvider", "var_name": "cachePathProvider"}, {"original_string": "private List<String> filePaths;", "modifier": "private", "type": "List<String>", "declarator": "filePaths", "var_name": "filePaths"}, {"original_string": "@Mock\n    private Schema schema;", "modifier": "@Mock\n    private", "type": "Schema", "declarator": "schema", "var_name": "schema"}, {"original_string": "@InjectMocks\n    private FileBasedStubConfigReader underTest;", "modifier": "@InjectMocks\n    private", "type": "FileBasedStubConfigReader", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-engine/src/test/java/com/epam/wilma/engine/initializer/FileBasedStubConfigReaderTest.java"}, "test_case": {"identifier": "testReadStubConfigurationShouldUseTheCachedConfigurations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadStubConfigurationShouldUseTheCachedConfigurations() {\n        //GIVEN\n        List<String> paths = new ArrayList<>();\n        paths.add(\"test\");\n        given(cachePathProvider.getConfigPathsFromCache(DESCRIPTOR_CACHE_PATH)).willReturn(paths);\n        //WHEN\n        underTest.readStubConfiguration();\n        //THEN\n        verify(stubDescriptorReader).loadSpecificStubDescriptors(paths);\n    }", "signature": "void testReadStubConfigurationShouldUseTheCachedConfigurations()", "full_signature": "@Test public void testReadStubConfigurationShouldUseTheCachedConfigurations()", "class_method_signature": "FileBasedStubConfigReaderTest.testReadStubConfigurationShouldUseTheCachedConfigurations()", "testcase": true, "constructor": false, "invocations": ["add", "willReturn", "given", "getConfigPathsFromCache", "readStubConfiguration", "loadSpecificStubDescriptors", "verify"]}, "focal_class": {"identifier": "FileBasedStubConfigReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String jsonDescriptorsSourceFolderPath;", "modifier": "private", "type": "String", "declarator": "jsonDescriptorsSourceFolderPath", "var_name": "jsonDescriptorsSourceFolderPath"}, {"original_string": "private String jsonDescriptorsPattern;", "modifier": "private", "type": "String", "declarator": "jsonDescriptorsPattern", "var_name": "jsonDescriptorsPattern"}, {"original_string": "private String jsonDescriptorsCachePath;", "modifier": "private", "type": "String", "declarator": "jsonDescriptorsCachePath", "var_name": "jsonDescriptorsCachePath"}, {"original_string": "@Autowired\n    private StubDescriptorReader stubDescriptorReader;", "modifier": "@Autowired\n    private", "type": "StubDescriptorReader", "declarator": "stubDescriptorReader", "var_name": "stubDescriptorReader"}, {"original_string": "@Autowired\n    private EngineConfigurationAccess configurationAccess;", "modifier": "@Autowired\n    private", "type": "EngineConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Autowired\n    private StubConfigPathProvider cachePathProvider;", "modifier": "@Autowired\n    private", "type": "StubConfigPathProvider", "declarator": "cachePathProvider", "var_name": "cachePathProvider"}, {"original_string": "@Autowired\n    private StubConfigSchemaParser stubConfigSchemaParser;", "modifier": "@Autowired\n    private", "type": "StubConfigSchemaParser", "declarator": "stubConfigSchemaParser", "var_name": "stubConfigSchemaParser"}, {"original_string": "@Autowired\n    private StubConfigSchema stubConfigSchema;", "modifier": "@Autowired\n    private", "type": "StubConfigSchema", "declarator": "stubConfigSchema", "var_name": "stubConfigSchema"}], "methods": [{"identifier": "readStubConfiguration", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void readStubConfiguration()", "full_signature": "public void readStubConfiguration()", "class_method_signature": "FileBasedStubConfigReader.readStubConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getJsonDescriptorPath", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getJsonDescriptorPath()", "full_signature": "private void getJsonDescriptorPath()", "class_method_signature": "FileBasedStubConfigReader.getJsonDescriptorPath()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-engine/src/main/java/com/epam/wilma/engine/initializer/FileBasedStubConfigReader.java"}, "focal_method": {"identifier": "readStubConfiguration", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void readStubConfiguration() {\n        getJsonDescriptorPath();\n        stubConfigSchema.setSchema(stubConfigSchemaParser.parseSchema());\n        List<String> stubConfigPaths = cachePathProvider.getConfigPathsFromCache(jsonDescriptorsCachePath);\n        if (!stubConfigPaths.isEmpty()) {\n            stubDescriptorReader.loadSpecificStubDescriptors(stubConfigPaths);\n        } else {\n            stubConfigPaths = cachePathProvider.getConfigPathsFromSpecificFolder(jsonDescriptorsSourceFolderPath, jsonDescriptorsPattern);\n            stubDescriptorReader.loadSpecificStubDescriptors(stubConfigPaths);\n        }\n    }", "signature": "void readStubConfiguration()", "full_signature": "public void readStubConfiguration()", "class_method_signature": "FileBasedStubConfigReader.readStubConfiguration()", "testcase": false, "constructor": false, "invocations": ["getJsonDescriptorPath", "setSchema", "parseSchema", "getConfigPathsFromCache", "isEmpty", "loadSpecificStubDescriptors", "getConfigPathsFromSpecificFolder", "loadSpecificStubDescriptors"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}