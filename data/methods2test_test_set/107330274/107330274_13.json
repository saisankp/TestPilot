{"test_class": {"identifier": "CombinationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<int[]> COMBINATIONS_2x2 = asList(new int[]{0, 0}, new int[]{0, 1}, new int[]{1, 0}, new int[]{1, 1});", "modifier": "private static final", "type": "List<int[]>", "declarator": "COMBINATIONS_2x2 = asList(new int[]{0, 0}, new int[]{0, 1}, new int[]{1, 0}, new int[]{1, 1})", "var_name": "COMBINATIONS_2x2"}, {"original_string": "private static final List<int[]> COMBINATIONS_3x3 = asList(\n            new int[]{0, 0}, new int[]{0, 1}, new int[]{0, 2},\n            new int[]{1, 0}, new int[]{1, 1}, new int[]{1, 2},\n            new int[]{2, 0}, new int[]{2, 1}, new int[]{2, 2}\n    );", "modifier": "private static final", "type": "List<int[]>", "declarator": "COMBINATIONS_3x3 = asList(\n            new int[]{0, 0}, new int[]{0, 1}, new int[]{0, 2},\n            new int[]{1, 0}, new int[]{1, 1}, new int[]{1, 2},\n            new int[]{2, 0}, new int[]{2, 1}, new int[]{2, 2}\n    )", "var_name": "COMBINATIONS_3x3"}], "file": "titus-common/src/test/java/com/netflix/titus/common/data/generator/internal/CombinationsTest.java"}, "test_case": {"identifier": "testResize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResize() throws Exception {\n        Combinations combinations = Combinations.newInstance(2)\n                .resize(asList(2, 2))\n                .resize(asList(3, 3));\n\n        List<int[]> tuples = take(combinations, 9);\n        assertThat(tuples.get(0)).isIn(COMBINATIONS_2x2);\n        assertThat(tuples.get(1)).isIn(COMBINATIONS_2x2);\n        assertThat(tuples).containsAll(COMBINATIONS_3x3);\n    }", "signature": "void testResize()", "full_signature": "@Test public void testResize()", "class_method_signature": "CombinationsTest.testResize()", "testcase": true, "constructor": false, "invocations": ["resize", "resize", "newInstance", "asList", "asList", "take", "isIn", "assertThat", "get", "isIn", "assertThat", "get", "containsAll", "assertThat"]}, "focal_class": {"identifier": "Combinations", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int[][] EMPTY_TUPLES = new int[0][];", "modifier": "private static final", "type": "int[][]", "declarator": "EMPTY_TUPLES = new int[0][]", "var_name": "EMPTY_TUPLES"}, {"original_string": "private final List<Integer> seqSizes;", "modifier": "private final", "type": "List<Integer>", "declarator": "seqSizes", "var_name": "seqSizes"}, {"original_string": "private final int[][] tuples;", "modifier": "private final", "type": "int[][]", "declarator": "tuples", "var_name": "tuples"}], "methods": [{"identifier": "Combinations", "parameters": "(int tupleSize)", "modifiers": "private", "return": "", "signature": " Combinations(int tupleSize)", "full_signature": "private  Combinations(int tupleSize)", "class_method_signature": "Combinations.Combinations(int tupleSize)", "testcase": false, "constructor": true}, {"identifier": "Combinations", "parameters": "(Combinations previous, List<Integer> newSeqSizes)", "modifiers": "private", "return": "", "signature": " Combinations(Combinations previous, List<Integer> newSeqSizes)", "full_signature": "private  Combinations(Combinations previous, List<Integer> newSeqSizes)", "class_method_signature": "Combinations.Combinations(Combinations previous, List<Integer> newSeqSizes)", "testcase": false, "constructor": true}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "Combinations.getSize()", "testcase": false, "constructor": false}, {"identifier": "combinationAt", "parameters": "(int pos)", "modifiers": "public", "return": "int[]", "signature": "int[] combinationAt(int pos)", "full_signature": "public int[] combinationAt(int pos)", "class_method_signature": "Combinations.combinationAt(int pos)", "testcase": false, "constructor": false}, {"identifier": "resize", "parameters": "(List<Integer> newSeqSizes)", "modifiers": "public", "return": "Combinations", "signature": "Combinations resize(List<Integer> newSeqSizes)", "full_signature": "public Combinations resize(List<Integer> newSeqSizes)", "class_method_signature": "Combinations.resize(List<Integer> newSeqSizes)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(int tupleSize)", "modifiers": "public static", "return": "Combinations", "signature": "Combinations newInstance(int tupleSize)", "full_signature": "public static Combinations newInstance(int tupleSize)", "class_method_signature": "Combinations.newInstance(int tupleSize)", "testcase": false, "constructor": false}, {"identifier": "createListFilledWithZeros", "parameters": "(int size)", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> createListFilledWithZeros(int size)", "full_signature": "private List<Integer> createListFilledWithZeros(int size)", "class_method_signature": "Combinations.createListFilledWithZeros(int size)", "testcase": false, "constructor": false}, {"identifier": "copyTuple", "parameters": "(int[] source, int[][] output, int outputPos)", "modifiers": "private static", "return": "void", "signature": "void copyTuple(int[] source, int[][] output, int outputPos)", "full_signature": "private static void copyTuple(int[] source, int[][] output, int outputPos)", "class_method_signature": "Combinations.copyTuple(int[] source, int[][] output, int outputPos)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(int[][] source, int[][] output)", "modifiers": "private static", "return": "void", "signature": "void copy(int[][] source, int[][] output)", "full_signature": "private static void copy(int[][] source, int[][] output)", "class_method_signature": "Combinations.copy(int[][] source, int[][] output)", "testcase": false, "constructor": false}, {"identifier": "fill", "parameters": "(int[] currentTuple,\n                            List<Integer> oldSeqSizes,\n                            List<Integer> newSeqSizes,\n                            int seqIdx,\n                            int[][] output,\n                            int outputPos,\n                            boolean hasNewItem)", "modifiers": "private static", "return": "int", "signature": "int fill(int[] currentTuple,\n                            List<Integer> oldSeqSizes,\n                            List<Integer> newSeqSizes,\n                            int seqIdx,\n                            int[][] output,\n                            int outputPos,\n                            boolean hasNewItem)", "full_signature": "private static int fill(int[] currentTuple,\n                            List<Integer> oldSeqSizes,\n                            List<Integer> newSeqSizes,\n                            int seqIdx,\n                            int[][] output,\n                            int outputPos,\n                            boolean hasNewItem)", "class_method_signature": "Combinations.fill(int[] currentTuple,\n                            List<Integer> oldSeqSizes,\n                            List<Integer> newSeqSizes,\n                            int seqIdx,\n                            int[][] output,\n                            int outputPos,\n                            boolean hasNewItem)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/data/generator/internal/Combinations.java"}, "focal_method": {"identifier": "resize", "parameters": "(List<Integer> newSeqSizes)", "modifiers": "public", "return": "Combinations", "body": "public Combinations resize(List<Integer> newSeqSizes) {\n        Preconditions.checkArgument(newSeqSizes.size() == seqSizes.size());\n        for (int i = 0; i < newSeqSizes.size(); i++) {\n            Preconditions.checkArgument(newSeqSizes.get(i) >= seqSizes.get(i));\n        }\n        return new Combinations(this, newSeqSizes);\n    }", "signature": "Combinations resize(List<Integer> newSeqSizes)", "full_signature": "public Combinations resize(List<Integer> newSeqSizes)", "class_method_signature": "Combinations.resize(List<Integer> newSeqSizes)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "size", "size", "size", "checkArgument", "get", "get"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}