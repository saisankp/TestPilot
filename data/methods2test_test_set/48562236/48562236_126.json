{"test_class": {"identifier": "FormElementTest", "superclass": "", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/jsoup/nodes/FormElementTest.java"}, "test_case": {"identifier": "createsFormData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void createsFormData() {\n        String html = \"<form><input name='one' value='two'><select name='three'><option value='not'>\" +\n                \"<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea></form>\";\n        Document doc = Jsoup.parse(html);\n        FormElement form = (FormElement) doc.select(\"form\").first();\n        List<Connection.KeyVal> data = form.formData();\n\n        assertEquals(4, data.size());\n        assertEquals(\"one=two\", data.get(0).toString());\n        assertEquals(\"three=four\", data.get(1).toString());\n        assertEquals(\"three=five\", data.get(2).toString());\n        assertEquals(\"six=seven\", data.get(3).toString());\n    }", "signature": "void createsFormData()", "full_signature": "@Test public void createsFormData()", "class_method_signature": "FormElementTest.createsFormData()", "testcase": true, "constructor": false, "invocations": ["parse", "first", "select", "formData", "assertEquals", "size", "assertEquals", "toString", "get", "assertEquals", "toString", "get", "assertEquals", "toString", "get", "assertEquals", "toString", "get"]}, "focal_class": {"identifier": "FormElement", "superclass": "extends Element", "interfaces": "", "fields": [{"original_string": "private final Elements elements = new Elements();", "modifier": "private final", "type": "Elements", "declarator": "elements = new Elements()", "var_name": "elements"}], "methods": [{"identifier": "FormElement", "parameters": "(Tag tag, String baseUri, Attributes attributes)", "modifiers": "public", "return": "", "signature": " FormElement(Tag tag, String baseUri, Attributes attributes)", "full_signature": "public  FormElement(Tag tag, String baseUri, Attributes attributes)", "class_method_signature": "FormElement.FormElement(Tag tag, String baseUri, Attributes attributes)", "testcase": false, "constructor": true}, {"identifier": "elements", "parameters": "()", "modifiers": "public", "return": "Elements", "signature": "Elements elements()", "full_signature": "public Elements elements()", "class_method_signature": "FormElement.elements()", "testcase": false, "constructor": false}, {"identifier": "addElement", "parameters": "(Element element)", "modifiers": "public", "return": "FormElement", "signature": "FormElement addElement(Element element)", "full_signature": "public FormElement addElement(Element element)", "class_method_signature": "FormElement.addElement(Element element)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "()", "modifiers": "public", "return": "Connection", "signature": "Connection submit()", "full_signature": "public Connection submit()", "class_method_signature": "FormElement.submit()", "testcase": false, "constructor": false}, {"identifier": "formData", "parameters": "()", "modifiers": "public", "return": "List<Connection.KeyVal>", "signature": "List<Connection.KeyVal> formData()", "full_signature": "public List<Connection.KeyVal> formData()", "class_method_signature": "FormElement.formData()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "FormElement.equals(Object o)", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/jsoup/nodes/FormElement.java"}, "focal_method": {"identifier": "formData", "parameters": "()", "modifiers": "public", "return": "List<Connection.KeyVal>", "body": "public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }", "signature": "List<Connection.KeyVal> formData()", "full_signature": "public List<Connection.KeyVal> formData()", "class_method_signature": "FormElement.formData()", "testcase": false, "constructor": false, "invocations": ["isFormSubmittable", "tag", "attr", "length", "equals", "tagName", "select", "add", "create", "val", "add", "create", "val"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}