{"test_class": {"identifier": "QueuingConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QueuingConnection<String> connection;", "modifier": "private", "type": "QueuingConnection<String>", "declarator": "connection", "var_name": "connection"}, {"original_string": "private RecordingConnection<String> delegate;", "modifier": "private", "type": "RecordingConnection<String>", "declarator": "delegate", "var_name": "delegate"}], "file": "mobius-core/src/test/java/com/spotify/mobius/QueuingConnectionTest.java"}, "test_case": {"identifier": "shouldNotAllowDuplicateDelegates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldNotAllowDuplicateDelegates() throws Exception {\n    connection.setDelegate(delegate);\n\n    assertThatThrownBy(() -> connection.setDelegate(new RecordingConnection<>()))\n        .isInstanceOf(IllegalStateException.class);\n  }", "signature": "void shouldNotAllowDuplicateDelegates()", "full_signature": "@Test public void shouldNotAllowDuplicateDelegates()", "class_method_signature": "QueuingConnectionTest.shouldNotAllowDuplicateDelegates()", "testcase": true, "constructor": false, "invocations": ["setDelegate", "isInstanceOf", "assertThatThrownBy", "setDelegate"]}, "focal_class": {"identifier": "QueuingConnection", "superclass": "", "interfaces": "implements Connection<I>", "fields": [{"original_string": "private final List<I> queue = new ArrayList<>();", "modifier": "private final", "type": "List<I>", "declarator": "queue = new ArrayList<>()", "var_name": "queue"}, {"original_string": "private Connection<I> delegate;", "modifier": "private", "type": "Connection<I>", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private boolean disposed = false;", "modifier": "private", "type": "boolean", "declarator": "disposed = false", "var_name": "disposed"}], "methods": [{"identifier": "setDelegate", "parameters": "(Connection<I> delegate)", "modifiers": "synchronized", "return": "void", "signature": "void setDelegate(Connection<I> delegate)", "full_signature": "synchronized void setDelegate(Connection<I> delegate)", "class_method_signature": "QueuingConnection.setDelegate(Connection<I> delegate)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(I value)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void accept(I value)", "full_signature": "@Override public synchronized void accept(I value)", "class_method_signature": "QueuingConnection.accept(I value)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void dispose()", "full_signature": "@Override public synchronized void dispose()", "class_method_signature": "QueuingConnection.dispose()", "testcase": false, "constructor": false}], "file": "mobius-core/src/main/java/com/spotify/mobius/QueuingConnection.java"}, "focal_method": {"identifier": "setDelegate", "parameters": "(Connection<I> delegate)", "modifiers": "synchronized", "return": "void", "body": "synchronized void setDelegate(Connection<I> delegate) {\n    if (this.delegate != null) {\n      throw new IllegalStateException(\"Attempt at setting delegate twice\");\n    }\n\n    this.delegate = checkNotNull(delegate);\n\n    if (disposed) {\n      return;\n    }\n\n    for (I item : queue) {\n      delegate.accept(item);\n    }\n\n    queue.clear();\n  }", "signature": "void setDelegate(Connection<I> delegate)", "full_signature": "synchronized void setDelegate(Connection<I> delegate)", "class_method_signature": "QueuingConnection.setDelegate(Connection<I> delegate)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "accept", "clear"]}, "repository": {"repo_id": 118132535, "url": "https://github.com/spotify/mobius", "stars": 663, "created": "1/19/2018 2:07:51 PM +00:00", "updates": "2020-01-27T22:05:43+00:00", "fork": "False", "license": "licensed"}}