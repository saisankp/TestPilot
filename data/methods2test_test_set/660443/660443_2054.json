{"test_class": {"identifier": "CMLModuleStackTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "storage/io/src/test/java/org/openscience/cdk/io/cml/CMLModuleStackTest.java"}, "test_case": {"identifier": "testPop", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPop() {\n        CMLModuleStack stack = new CMLModuleStack();\n        ICMLModule first = new CMLCoreModule((IChemFile) null);\n        ICMLModule second = new CMLCoreModule((IChemFile) null);\n        ICMLModule third = new CMLCoreModule((IChemFile) null);\n        stack.push(first);\n        stack.push(second);\n        stack.push(third);\n        Assert.assertEquals(third, stack.pop());\n        Assert.assertEquals(second, stack.pop());\n        Assert.assertEquals(first, stack.pop());\n        try {\n            Assert.assertEquals(\"doesNotExist\", stack.pop());\n            Assert.fail(\"Should have received an ArrayIndexOutOfBoundsException\");\n        } catch (Exception exception) {\n            // OK, should happen\n        }\n    }", "signature": "void testPop()", "full_signature": "@Test public void testPop()", "class_method_signature": "CMLModuleStackTest.testPop()", "testcase": true, "constructor": false, "invocations": ["push", "push", "push", "assertEquals", "pop", "assertEquals", "pop", "assertEquals", "pop", "assertEquals", "pop", "fail"]}, "focal_class": {"identifier": "CMLModuleStack", "superclass": "", "interfaces": "", "fields": [{"original_string": "ICMLModule[] stack = new ICMLModule[64];", "modifier": "", "type": "ICMLModule[]", "declarator": "stack = new ICMLModule[64]", "var_name": "stack"}, {"original_string": "int          sp    = 0;", "modifier": "", "type": "int", "declarator": "sp    = 0", "var_name": "sp"}], "methods": [{"identifier": "push", "parameters": "(ICMLModule item)", "modifiers": "public", "return": "void", "signature": "void push(ICMLModule item)", "full_signature": "public void push(ICMLModule item)", "class_method_signature": "CMLModuleStack.push(ICMLModule item)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int length()", "full_signature": "public int length()", "class_method_signature": "CMLModuleStack.length()", "testcase": false, "constructor": false}, {"identifier": "pop", "parameters": "()", "modifiers": "public", "return": "ICMLModule", "signature": "ICMLModule pop()", "full_signature": "public ICMLModule pop()", "class_method_signature": "CMLModuleStack.pop()", "testcase": false, "constructor": false}, {"identifier": "current", "parameters": "()", "modifiers": "public", "return": "ICMLModule", "signature": "ICMLModule current()", "full_signature": "public ICMLModule current()", "class_method_signature": "CMLModuleStack.current()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CMLModuleStack.toString()", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "(ICMLModule lastElement)", "modifiers": "public", "return": "boolean", "signature": "boolean endsWith(ICMLModule lastElement)", "full_signature": "public boolean endsWith(ICMLModule lastElement)", "class_method_signature": "CMLModuleStack.endsWith(ICMLModule lastElement)", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "(ICMLModule oneButLast, ICMLModule lastElement)", "modifiers": "public", "return": "boolean", "signature": "boolean endsWith(ICMLModule oneButLast, ICMLModule lastElement)", "full_signature": "public boolean endsWith(ICMLModule oneButLast, ICMLModule lastElement)", "class_method_signature": "CMLModuleStack.endsWith(ICMLModule oneButLast, ICMLModule lastElement)", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "(ICMLModule twoButLast, ICMLModule oneButLast, ICMLModule lastElement)", "modifiers": "public", "return": "boolean", "signature": "boolean endsWith(ICMLModule twoButLast, ICMLModule oneButLast, ICMLModule lastElement)", "full_signature": "public boolean endsWith(ICMLModule twoButLast, ICMLModule oneButLast, ICMLModule lastElement)", "class_method_signature": "CMLModuleStack.endsWith(ICMLModule twoButLast, ICMLModule oneButLast, ICMLModule lastElement)", "testcase": false, "constructor": false}], "file": "storage/io/src/main/java/org/openscience/cdk/io/cml/CMLModuleStack.java"}, "focal_method": {"identifier": "pop", "parameters": "()", "modifiers": "public", "return": "ICMLModule", "body": "public ICMLModule pop() {\n        return stack[--sp];\n    }", "signature": "ICMLModule pop()", "full_signature": "public ICMLModule pop()", "class_method_signature": "CMLModuleStack.pop()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}