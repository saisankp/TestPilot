{"test_class": {"identifier": "RedisBasedLockTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Vertx vertx;", "modifier": "private static", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private Jedis jedis;", "modifier": "private", "type": "Jedis", "declarator": "jedis", "var_name": "jedis"}, {"original_string": "private static RedisBasedLock redisBasedLock;", "modifier": "private static", "type": "RedisBasedLock", "declarator": "redisBasedLock", "var_name": "redisBasedLock"}, {"original_string": "String lock_1 = \"lock_1\";", "modifier": "", "type": "String", "declarator": "lock_1 = \"lock_1\"", "var_name": "lock_1"}, {"original_string": "String token_1 = \"token_1\";", "modifier": "", "type": "String", "declarator": "token_1 = \"token_1\"", "var_name": "token_1"}, {"original_string": "@org.junit.Rule\n    public Timeout rule = Timeout.seconds(5);", "modifier": "@org.junit.Rule\n    public", "type": "Timeout", "declarator": "rule = Timeout.seconds(5)", "var_name": "rule"}], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/lock/impl/RedisBasedLockTest.java"}, "test_case": {"identifier": "testReleaseNonExistingLock", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReleaseNonExistingLock(TestContext context){\n        Async async = context.async();\n        context.assertFalse(jedis.exists(lockKey(lock_1)));\n        redisBasedLock.releaseLock(lock_1, token_1).setHandler(event -> {\n            context.assertTrue(event.succeeded());\n            context.assertFalse(event.result());\n            context.assertFalse(jedis.exists(lockKey(lock_1)));\n            async.complete();\n        });\n    }", "signature": "void testReleaseNonExistingLock(TestContext context)", "full_signature": "@Test public void testReleaseNonExistingLock(TestContext context)", "class_method_signature": "RedisBasedLockTest.testReleaseNonExistingLock(TestContext context)", "testcase": true, "constructor": false, "invocations": ["async", "assertFalse", "exists", "lockKey", "setHandler", "releaseLock", "assertTrue", "succeeded", "assertFalse", "result", "assertFalse", "exists", "lockKey", "complete"]}, "focal_class": {"identifier": "RedisBasedLock", "superclass": "", "interfaces": "implements Lock", "fields": [{"original_string": "private RedisClient redisClient;", "modifier": "private", "type": "RedisClient", "declarator": "redisClient", "var_name": "redisClient"}, {"original_string": "private Logger log = LoggerFactory.getLogger(RedisBasedLock.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RedisBasedLock.class)", "var_name": "log"}, {"original_string": "public static final String STORAGE_PREFIX = \"gateleen.core-lock:\";", "modifier": "public static final", "type": "String", "declarator": "STORAGE_PREFIX = \"gateleen.core-lock:\"", "var_name": "STORAGE_PREFIX"}, {"original_string": "private LuaScriptState releaseLockLuaScriptState;", "modifier": "private", "type": "LuaScriptState", "declarator": "releaseLockLuaScriptState", "var_name": "releaseLockLuaScriptState"}], "methods": [{"identifier": "RedisBasedLock", "parameters": "(RedisClient redisClient)", "modifiers": "public", "return": "", "signature": " RedisBasedLock(RedisClient redisClient)", "full_signature": "public  RedisBasedLock(RedisClient redisClient)", "class_method_signature": "RedisBasedLock.RedisBasedLock(RedisClient redisClient)", "testcase": false, "constructor": true}, {"identifier": "acquireLock", "parameters": "(String lock, String token, long lockExpiryMs)", "modifiers": "@Override public", "return": "Future<Boolean>", "signature": "Future<Boolean> acquireLock(String lock, String token, long lockExpiryMs)", "full_signature": "@Override public Future<Boolean> acquireLock(String lock, String token, long lockExpiryMs)", "class_method_signature": "RedisBasedLock.acquireLock(String lock, String token, long lockExpiryMs)", "testcase": false, "constructor": false}, {"identifier": "releaseLock", "parameters": "(String lock, String token)", "modifiers": "@Override public", "return": "Future<Boolean>", "signature": "Future<Boolean> releaseLock(String lock, String token)", "full_signature": "@Override public Future<Boolean> releaseLock(String lock, String token)", "class_method_signature": "RedisBasedLock.releaseLock(String lock, String token)", "testcase": false, "constructor": false}, {"identifier": "buildLockKey", "parameters": "(String lock)", "modifiers": "private", "return": "String", "signature": "String buildLockKey(String lock)", "full_signature": "private String buildLockKey(String lock)", "class_method_signature": "RedisBasedLock.buildLockKey(String lock)", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/lock/impl/RedisBasedLock.java"}, "focal_method": {"identifier": "releaseLock", "parameters": "(String lock, String token)", "modifiers": "@Override public", "return": "Future<Boolean>", "body": "@Override\n    public Future<Boolean> releaseLock(String lock, String token) {\n        Future<Boolean> future = Future.future();\n        List<String> keys = Collections.singletonList(buildLockKey(lock));\n        List<String> arguments = Collections.singletonList(token);\n        ReleaseLockRedisCommand cmd = new ReleaseLockRedisCommand(releaseLockLuaScriptState,\n                keys, arguments, redisClient, log, future);\n        cmd.exec(0);\n        return future;\n    }", "signature": "Future<Boolean> releaseLock(String lock, String token)", "full_signature": "@Override public Future<Boolean> releaseLock(String lock, String token)", "class_method_signature": "RedisBasedLock.releaseLock(String lock, String token)", "testcase": false, "constructor": false, "invocations": ["future", "singletonList", "buildLockKey", "singletonList", "exec"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}