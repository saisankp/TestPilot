{"test_class": {"identifier": "HBaseDataStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte[] COLUMN_FAMILY = Bytes.toBytes(\"d\");", "modifier": "private static final", "type": "byte[]", "declarator": "COLUMN_FAMILY = Bytes.toBytes(\"d\")", "var_name": "COLUMN_FAMILY"}, {"original_string": "private static final byte[] DATA_FIELD_NAME = Bytes.toBytes(\"data\");", "modifier": "private static final", "type": "byte[]", "declarator": "DATA_FIELD_NAME = Bytes.toBytes(\"data\")", "var_name": "DATA_FIELD_NAME"}, {"original_string": "private static final Table TEST_APP = Table.builder()\n            .name(TEST_TABLE_NAME)\n            .ttl(7)\n            .build();", "modifier": "private static final", "type": "Table", "declarator": "TEST_APP = Table.builder()\n            .name(TEST_TABLE_NAME)\n            .ttl(7)\n            .build()", "var_name": "TEST_APP"}, {"original_string": "private HBaseDataStore hbaseDataStore;", "modifier": "private", "type": "HBaseDataStore", "declarator": "hbaseDataStore", "var_name": "hbaseDataStore"}, {"original_string": "private org.apache.hadoop.hbase.client.Table tableInterface;", "modifier": "private", "type": "org.apache.hadoop.hbase.client.Table", "declarator": "tableInterface", "var_name": "tableInterface"}, {"original_string": "private HbaseTableConnection hbaseTableConnection;", "modifier": "private", "type": "HbaseTableConnection", "declarator": "hbaseTableConnection", "var_name": "hbaseTableConnection"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/datastore/impl/hbase/HBaseDataStoreTest.java"}, "test_case": {"identifier": "testGetBulkMissingDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetBulkMissingDocument() throws Exception {\n        List<String> ids = new Vector<String>();\n        for(int i = 0; i < 10; i++) {\n            ids.add(UUID.randomUUID()\n                            .toString());\n        }\n        try {\n            hbaseDataStore.getAll(TEST_APP, ids);\n            fail();\n        } catch (FoxtrotException ex) {\n            assertEquals(ErrorCode.DOCUMENT_NOT_FOUND, ex.getCode());\n        }\n    }", "signature": "void testGetBulkMissingDocument()", "full_signature": "@Test public void testGetBulkMissingDocument()", "class_method_signature": "HBaseDataStoreTest.testGetBulkMissingDocument()", "testcase": true, "constructor": false, "invocations": ["add", "toString", "randomUUID", "getAll", "fail", "assertEquals", "getCode"]}, "focal_class": {"identifier": "HBaseDataStore", "superclass": "", "interfaces": "implements DataStore", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HBaseDataStore.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HBaseDataStore.class.getSimpleName())", "var_name": "logger"}, {"original_string": "private static final byte[] COLUMN_FAMILY = Bytes.toBytes(\"d\");", "modifier": "private static final", "type": "byte[]", "declarator": "COLUMN_FAMILY = Bytes.toBytes(\"d\")", "var_name": "COLUMN_FAMILY"}, {"original_string": "private static final byte[] DOCUMENT_FIELD_NAME = Bytes.toBytes(\"data\");", "modifier": "private static final", "type": "byte[]", "declarator": "DOCUMENT_FIELD_NAME = Bytes.toBytes(\"data\")", "var_name": "DOCUMENT_FIELD_NAME"}, {"original_string": "private static final byte[] DOCUMENT_META_FIELD_NAME = Bytes.toBytes(\"metadata\");", "modifier": "private static final", "type": "byte[]", "declarator": "DOCUMENT_META_FIELD_NAME = Bytes.toBytes(\"metadata\")", "var_name": "DOCUMENT_META_FIELD_NAME"}, {"original_string": "private static final byte[] TIMESTAMP_FIELD_NAME = Bytes.toBytes(\"timestamp\");", "modifier": "private static final", "type": "byte[]", "declarator": "TIMESTAMP_FIELD_NAME = Bytes.toBytes(\"timestamp\")", "var_name": "TIMESTAMP_FIELD_NAME"}, {"original_string": "private static final byte[] DATE_FIELD_NAME = Bytes.toBytes(\"date\");", "modifier": "private static final", "type": "byte[]", "declarator": "DATE_FIELD_NAME = Bytes.toBytes(\"date\")", "var_name": "DATE_FIELD_NAME"}, {"original_string": "private final HbaseTableConnection tableWrapper;", "modifier": "private final", "type": "HbaseTableConnection", "declarator": "tableWrapper", "var_name": "tableWrapper"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private final DocumentTranslator translator;", "modifier": "private final", "type": "DocumentTranslator", "declarator": "translator", "var_name": "translator"}], "methods": [{"identifier": "HBaseDataStore", "parameters": "(HbaseTableConnection tableWrapper, ObjectMapper mapper, DocumentTranslator translator)", "modifiers": "@Inject public", "return": "", "signature": " HBaseDataStore(HbaseTableConnection tableWrapper, ObjectMapper mapper, DocumentTranslator translator)", "full_signature": "@Inject public  HBaseDataStore(HbaseTableConnection tableWrapper, ObjectMapper mapper, DocumentTranslator translator)", "class_method_signature": "HBaseDataStore.HBaseDataStore(HbaseTableConnection tableWrapper, ObjectMapper mapper, DocumentTranslator translator)", "testcase": false, "constructor": true}, {"identifier": "initializeTable", "parameters": "(Table table, boolean forceTableCreate)", "modifiers": "@Override @Timed public", "return": "void", "signature": "void initializeTable(Table table, boolean forceTableCreate)", "full_signature": "@Override @Timed public void initializeTable(Table table, boolean forceTableCreate)", "class_method_signature": "HBaseDataStore.initializeTable(Table table, boolean forceTableCreate)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(final Table table, Document document)", "modifiers": "@Override @Timed public", "return": "Document", "signature": "Document save(final Table table, Document document)", "full_signature": "@Override @Timed public Document save(final Table table, Document document)", "class_method_signature": "HBaseDataStore.save(final Table table, Document document)", "testcase": false, "constructor": false}, {"identifier": "saveAll", "parameters": "(final Table table, List<Document> documents)", "modifiers": "@Override @Timed public", "return": "List<Document>", "signature": "List<Document> saveAll(final Table table, List<Document> documents)", "full_signature": "@Override @Timed public List<Document> saveAll(final Table table, List<Document> documents)", "class_method_signature": "HBaseDataStore.saveAll(final Table table, List<Document> documents)", "testcase": false, "constructor": false}, {"identifier": "isValidDocument", "parameters": "(Document document, List<String> errorMessages, int index)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidDocument(Document document, List<String> errorMessages, int index)", "full_signature": "private boolean isValidDocument(Document document, List<String> errorMessages, int index)", "class_method_signature": "HBaseDataStore.isValidDocument(Document document, List<String> errorMessages, int index)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final Table table, String id)", "modifiers": "@Override @Timed public", "return": "Document", "signature": "Document get(final Table table, String id)", "full_signature": "@Override @Timed public Document get(final Table table, String id)", "class_method_signature": "HBaseDataStore.get(final Table table, String id)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "(final Table table, List<String> ids)", "modifiers": "@Override @Timed public", "return": "List<Document>", "signature": "List<Document> getAll(final Table table, List<String> ids)", "full_signature": "@Override @Timed public List<Document> getAll(final Table table, List<String> ids)", "class_method_signature": "HBaseDataStore.getAll(final Table table, List<String> ids)", "testcase": false, "constructor": false}, {"identifier": "getPutForDocument", "parameters": "(Document document)", "modifiers": "@VisibleForTesting public", "return": "Put", "signature": "Put getPutForDocument(Document document)", "full_signature": "@VisibleForTesting public Put getPutForDocument(Document document)", "class_method_signature": "HBaseDataStore.getPutForDocument(Document document)", "testcase": false, "constructor": false}, {"identifier": "updateTable", "parameters": "(final Table table)", "modifiers": "@Override @Timed public", "return": "void", "signature": "void updateTable(final Table table)", "full_signature": "@Override @Timed public void updateTable(final Table table)", "class_method_signature": "HBaseDataStore.updateTable(final Table table)", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/datastore/impl/hbase/HBaseDataStore.java"}, "focal_method": {"identifier": "getAll", "parameters": "(final Table table, List<String> ids)", "modifiers": "@Override @Timed public", "return": "List<Document>", "body": "@Override\n    @Timed\n    public List<Document> getAll(final Table table, List<String> ids) {\n        if(CollectionUtils.isEmpty(ids)) {\n            throw FoxtrotExceptions.createBadRequestException(table.getName(), \"Empty ID List\");\n        }\n        try (org.apache.hadoop.hbase.client.Table hTable = tableWrapper.getTable(table)) {\n            List<Get> gets = new ArrayList<>(ids.size());\n            for(String id : ids) {\n                Get get = new Get(Bytes.toBytes(translator.rawStorageIdFromDocumentId(table, id))).addColumn(COLUMN_FAMILY,\n                                                                                                             DOCUMENT_FIELD_NAME\n                                                                                                            )\n                        .addColumn(COLUMN_FAMILY, DOCUMENT_META_FIELD_NAME)\n                        .addColumn(COLUMN_FAMILY, TIMESTAMP_FIELD_NAME)\n                        .setMaxVersions(1);\n                gets.add(get);\n            }\n            Result[] getResults = hTable.get(gets);\n            List<String> missingIds = new ArrayList<>();\n            List<Document> results = new ArrayList<>(ids.size());\n            for(int index = 0; index < getResults.length; index++) {\n                Result getResult = getResults[index];\n                if(!getResult.isEmpty()) {\n                    byte[] data = getResult.getValue(COLUMN_FAMILY, DOCUMENT_FIELD_NAME);\n                    byte[] metadata = getResult.getValue(COLUMN_FAMILY, DOCUMENT_META_FIELD_NAME);\n                    byte[] timestamp = getResult.getValue(COLUMN_FAMILY, TIMESTAMP_FIELD_NAME);\n                    long time = Bytes.toLong(timestamp);\n                    DocumentMetadata documentMetadata = (null != metadata) ? mapper.readValue(metadata, DocumentMetadata.class) : null;\n                    final String docId = (null == metadata) ? Bytes.toString(getResult.getRow())\n                            .split(\":\")[0] : documentMetadata.getRawStorageId();\n                    results.add(translator.translateBack(new Document(docId, time, documentMetadata, mapper.readTree(data))));\n                } else {\n                    missingIds.add(ids.get(index));\n                }\n            }\n            if (!missingIds.isEmpty()) {\n                logger.error(\"ID's missing in HBase - {}\", missingIds);\n                throw FoxtrotExceptions.createMissingDocumentsException(table, missingIds);\n            }\n            return results;\n        } catch (JsonProcessingException e) {\n            throw FoxtrotExceptions.createBadRequestException(table, e);\n        } catch (IOException e) {\n            throw FoxtrotExceptions.createConnectionException(table, e);\n        }\n    }", "signature": "List<Document> getAll(final Table table, List<String> ids)", "full_signature": "@Override @Timed public List<Document> getAll(final Table table, List<String> ids)", "class_method_signature": "HBaseDataStore.getAll(final Table table, List<String> ids)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "createBadRequestException", "getName", "getTable", "size", "setMaxVersions", "addColumn", "addColumn", "addColumn", "toBytes", "rawStorageIdFromDocumentId", "add", "get", "size", "isEmpty", "getValue", "getValue", "getValue", "toLong", "readValue", "split", "toString", "getRow", "getRawStorageId", "add", "translateBack", "readTree", "add", "get", "isEmpty", "error", "createMissingDocumentsException", "createBadRequestException", "createConnectionException"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}