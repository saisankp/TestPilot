{"test_class": {"identifier": "ContextTest", "superclass": "", "interfaces": "", "fields": [], "file": "contrib/src/test/java/macrobase/analysis/contextualoutlier/ContextTest.java"}, "test_case": {"identifier": "contextTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void contextTest() {\n        ContextualDatum d1 = new ContextualDatum(Arrays.asList(1),1.0);\n        ContextualDatum d2 = new ContextualDatum(Arrays.asList(2),2.0);\n        ContextualDatum d3 = new ContextualDatum(Arrays.asList(3),3.0);\n        ContextualDatum d4 = new ContextualDatum(Arrays.asList(4),4.0);\n        ContextualDatum d5 = new ContextualDatum(Arrays.asList(5),5.0);\n        List<ContextualDatum> data = new ArrayList<>();\n        data.add(d1);\n        data.add(d2);\n        data.add(d3);\n        data.add(d4);\n        data.add(d5);\n        \n        HashSet<ContextualDatum> sample = new HashSet<>();\n        sample.add(d1);\n        sample.add(d3);\n        sample.add(d5);\n        \n        Context globalContext = new Context(sample, false, false, 0.05);\n        \n        Interval interval0 = new IntervalDiscrete(0, \"C0\", 0);\n        Interval interval1 = new IntervalDiscrete(0, \"C0\", 1);\n        Interval interval2 = new IntervalDiscrete(0, \"C0\", 2);\n        Interval interval3 = new IntervalDouble(1, \"C1\", 0, 6);\n        Context c0 = new Context(0,interval0,globalContext);\n        Context c1 = new Context(0,interval1,globalContext);\n        Context c2 = new Context(0,interval2,globalContext);\n        Context c3 = new Context(0,interval3,globalContext);\n\n        Context c03 = c0.join(c3, data, 0);\n        assertEquals(c03.getParents().contains(c0),true);\n        assertEquals(c03.getParents().contains(c3),true);\n        \n        Context c13 = c1.join(c3, data, 0);\n        assertEquals(c13.getParents().contains(c1),true);\n        assertEquals(c03.getParents().contains(c3),true);\n        \n        Context c03_13 = c03.join(c13, data, 0);\n        assertEquals(c03_13,null);\n        \n        Context c03_3 = c03.join(c3, data, 0);\n        assertEquals(c03_3,null);\n\n    }", "signature": "void contextTest()", "full_signature": "@Test public void contextTest()", "class_method_signature": "ContextTest.contextTest()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "asList", "asList", "asList", "add", "add", "add", "add", "add", "add", "add", "add", "join", "assertEquals", "contains", "getParents", "assertEquals", "contains", "getParents", "join", "assertEquals", "contains", "getParents", "assertEquals", "contains", "getParents", "join", "assertEquals", "join", "assertEquals"]}, "focal_class": {"identifier": "Context", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Context.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Context.class)", "var_name": "log"}, {"original_string": "private List<Integer> dimensions = new ArrayList<Integer>();", "modifier": "private", "type": "List<Integer>", "declarator": "dimensions = new ArrayList<Integer>()", "var_name": "dimensions"}, {"original_string": "private List<Interval> intervals = new ArrayList<Interval>();", "modifier": "private", "type": "List<Interval>", "declarator": "intervals = new ArrayList<Interval>()", "var_name": "intervals"}, {"original_string": "private int size = -1;", "modifier": "private", "type": "int", "declarator": "size = -1", "var_name": "size"}, {"original_string": "private List<Context> parents = new ArrayList<Context>();", "modifier": "private", "type": "List<Context>", "declarator": "parents = new ArrayList<Context>()", "var_name": "parents"}, {"original_string": "private HashSet<Context> oneDimensionalAncestors = new HashSet<Context>();", "modifier": "private", "type": "HashSet<Context>", "declarator": "oneDimensionalAncestors = new HashSet<Context>()", "var_name": "oneDimensionalAncestors"}, {"original_string": "private BatchTrainScore detector;", "modifier": "private", "type": "BatchTrainScore", "declarator": "detector", "var_name": "detector"}, {"original_string": "private HashSet<ContextualDatum> sample = new HashSet<ContextualDatum>();", "modifier": "private", "type": "HashSet<ContextualDatum>", "declarator": "sample = new HashSet<ContextualDatum>()", "var_name": "sample"}, {"original_string": "private HashSet<ContextualDatum> globalSample = new HashSet<ContextualDatum>();", "modifier": "private", "type": "HashSet<ContextualDatum>", "declarator": "globalSample = new HashSet<ContextualDatum>()", "var_name": "globalSample"}, {"original_string": "private boolean densityPruning;", "modifier": "private", "type": "boolean", "declarator": "densityPruning", "var_name": "densityPruning"}, {"original_string": "private boolean dependencyPruning;", "modifier": "private", "type": "boolean", "declarator": "dependencyPruning", "var_name": "dependencyPruning"}, {"original_string": "private double alpha;", "modifier": "private", "type": "double", "declarator": "alpha", "var_name": "alpha"}], "methods": [{"identifier": "Context", "parameters": "(HashSet<ContextualDatum> sample, boolean densityPruning, boolean dependencyPruning, double alpha)", "modifiers": "public", "return": "", "signature": " Context(HashSet<ContextualDatum> sample, boolean densityPruning, boolean dependencyPruning, double alpha)", "full_signature": "public  Context(HashSet<ContextualDatum> sample, boolean densityPruning, boolean dependencyPruning, double alpha)", "class_method_signature": "Context.Context(HashSet<ContextualDatum> sample, boolean densityPruning, boolean dependencyPruning, double alpha)", "testcase": false, "constructor": true}, {"identifier": "Context", "parameters": "(int dimension, Interval interval, Context parent)", "modifiers": "public", "return": "", "signature": " Context(int dimension, Interval interval, Context parent)", "full_signature": "public  Context(int dimension, Interval interval, Context parent)", "class_method_signature": "Context.Context(int dimension, Interval interval, Context parent)", "testcase": false, "constructor": true}, {"identifier": "Context", "parameters": "(List<Integer> dimensions, List<Interval> intervals, Context parent1, Context parent2)", "modifiers": "public", "return": "", "signature": " Context(List<Integer> dimensions, List<Interval> intervals, Context parent1, Context parent2)", "full_signature": "public  Context(List<Integer> dimensions, List<Interval> intervals, Context parent1, Context parent2)", "class_method_signature": "Context.Context(List<Integer> dimensions, List<Interval> intervals, Context parent1, Context parent2)", "testcase": false, "constructor": true}, {"identifier": "getContextualBitSet", "parameters": "(List<ContextualDatum> data, Map<Context, BitSet> context2BitSet)", "modifiers": "public", "return": "BitSet", "signature": "BitSet getContextualBitSet(List<ContextualDatum> data, Map<Context, BitSet> context2BitSet)", "full_signature": "public BitSet getContextualBitSet(List<ContextualDatum> data, Map<Context, BitSet> context2BitSet)", "class_method_signature": "Context.getContextualBitSet(List<ContextualDatum> data, Map<Context, BitSet> context2BitSet)", "testcase": false, "constructor": false}, {"identifier": "containDatum", "parameters": "(ContextualDatum datum)", "modifiers": "public", "return": "boolean", "signature": "boolean containDatum(ContextualDatum datum)", "full_signature": "public boolean containDatum(ContextualDatum datum)", "class_method_signature": "Context.containDatum(ContextualDatum datum)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Context other, List<ContextualDatum> data, double tau)", "modifiers": "public", "return": "Context", "signature": "Context join(Context other, List<ContextualDatum> data, double tau)", "full_signature": "public Context join(Context other, List<ContextualDatum> data, double tau)", "class_method_signature": "Context.join(Context other, List<ContextualDatum> data, double tau)", "testcase": false, "constructor": false}, {"identifier": "densityPruning", "parameters": "(Context c, double minDensity)", "modifiers": "private", "return": "boolean", "signature": "boolean densityPruning(Context c, double minDensity)", "full_signature": "private boolean densityPruning(Context c, double minDensity)", "class_method_signature": "Context.densityPruning(Context c, double minDensity)", "testcase": false, "constructor": false}, {"identifier": "dependencyPruning", "parameters": "(Context c)", "modifiers": "private", "return": "boolean", "signature": "boolean dependencyPruning(Context c)", "full_signature": "private boolean dependencyPruning(Context c)", "class_method_signature": "Context.dependencyPruning(Context c)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(DatumEncoder encoder)", "modifiers": "public", "return": "String", "signature": "String print(DatumEncoder encoder)", "full_signature": "public String print(DatumEncoder encoder)", "class_method_signature": "Context.print(DatumEncoder encoder)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Context.toString()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "Context.getSize()", "testcase": false, "constructor": false}, {"identifier": "setSize", "parameters": "(int size)", "modifiers": "public", "return": "void", "signature": "void setSize(int size)", "full_signature": "public void setSize(int size)", "class_method_signature": "Context.setSize(int size)", "testcase": false, "constructor": false}, {"identifier": "getSample", "parameters": "()", "modifiers": "public", "return": "HashSet<ContextualDatum>", "signature": "HashSet<ContextualDatum> getSample()", "full_signature": "public HashSet<ContextualDatum> getSample()", "class_method_signature": "Context.getSample()", "testcase": false, "constructor": false}, {"identifier": "getIntervals", "parameters": "()", "modifiers": "public", "return": "List<Interval>", "signature": "List<Interval> getIntervals()", "full_signature": "public List<Interval> getIntervals()", "class_method_signature": "Context.getIntervals()", "testcase": false, "constructor": false}, {"identifier": "getParents", "parameters": "()", "modifiers": "public", "return": "List<Context>", "signature": "List<Context> getParents()", "full_signature": "public List<Context> getParents()", "class_method_signature": "Context.getParents()", "testcase": false, "constructor": false}, {"identifier": "getDetector", "parameters": "()", "modifiers": "public", "return": "BatchTrainScore", "signature": "BatchTrainScore getDetector()", "full_signature": "public BatchTrainScore getDetector()", "class_method_signature": "Context.getDetector()", "testcase": false, "constructor": false}, {"identifier": "setDetector", "parameters": "(BatchTrainScore detector)", "modifiers": "public", "return": "void", "signature": "void setDetector(BatchTrainScore detector)", "full_signature": "public void setDetector(BatchTrainScore detector)", "class_method_signature": "Context.setDetector(BatchTrainScore detector)", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/contextualoutlier/Context.java"}, "focal_method": {"identifier": "Context", "parameters": "(HashSet<ContextualDatum> sample, boolean densityPruning, boolean dependencyPruning, double alpha)", "modifiers": "public", "return": "", "body": "public Context(HashSet<ContextualDatum> sample, boolean densityPruning, boolean dependencyPruning, double alpha) {\n        this.sample = sample;\n        this.globalSample = sample;\n        this.densityPruning = densityPruning;\n        this.dependencyPruning = dependencyPruning;\n        this.alpha = alpha;\n    }", "signature": " Context(HashSet<ContextualDatum> sample, boolean densityPruning, boolean dependencyPruning, double alpha)", "full_signature": "public  Context(HashSet<ContextualDatum> sample, boolean densityPruning, boolean dependencyPruning, double alpha)", "class_method_signature": "Context.Context(HashSet<ContextualDatum> sample, boolean densityPruning, boolean dependencyPruning, double alpha)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}