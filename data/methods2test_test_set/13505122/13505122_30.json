{"test_class": {"identifier": "LocalFileStreamSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BASE_DIR = \"localfsTest\";", "modifier": "private static final", "type": "String", "declarator": "BASE_DIR = \"localfsTest\"", "var_name": "BASE_DIR"}, {"original_string": "private static final int NUM_FILES_IN_DIR = 4;", "modifier": "private static final", "type": "int", "declarator": "NUM_FILES_IN_DIR = 4", "var_name": "NUM_FILES_IN_DIR"}, {"original_string": "private static final int NUM_NOISE_FILES_IN_DIR = 2;", "modifier": "private static final", "type": "int", "declarator": "NUM_NOISE_FILES_IN_DIR = 2", "var_name": "NUM_NOISE_FILES_IN_DIR"}, {"original_string": "private LocalFileStreamSource streamSource;", "modifier": "private", "type": "LocalFileStreamSource", "declarator": "streamSource", "var_name": "streamSource"}], "file": "samoa-api/src/test/java/com/yahoo/labs/samoa/streams/fs/LocalFileStreamSourceTest.java"}, "test_case": {"identifier": "testGetNextInputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetNextInputStream() {\n\t\t// write input files & noise files\n\t\twriteSimpleFiles(BASE_DIR,\"txt\",NUM_FILES_IN_DIR);\n\t\t\t\t\t\n\t\t// init with path to input dir\n\t\tstreamSource.init(BASE_DIR, \"txt\");\n\t\t\t\t\n\t\t// call getNextInputStream & assertions\n\t\tSet<String> contents = new HashSet<String>();\n\t\tfor (int i=1; i<=NUM_FILES_IN_DIR; i++) {\n\t\t\tcontents.add(Integer.toString(i));\n\t\t}\n\t\tfor (int i=0; i< NUM_FILES_IN_DIR; i++) {\n\t\t\tInputStream inStream = streamSource.getNextInputStream();\n\t\t\tassertNotNull(\"Unexpected end of input stream list.\",inStream);\n\t\t\t\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(inStream));\n\t\t\tString inputRead = null;\n\t\t\ttry {\n\t\t\t\tinputRead = rd.readLine();\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tfail(\"Fail reading from stream at index:\"+i + ioe.getMessage());\n\t\t\t}\n\t\t\tassertTrue(\"File content is incorrect.\",contents.contains(inputRead));\n\t\t\tIterator<String> it = contents.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tif (it.next().equals(inputRead)) {\n\t\t\t\t\tit.remove();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// assert that another call to getNextInputStream will return null\n\t\tassertNull(\"Call getNextInputStream after the last file did not return null.\",streamSource.getNextInputStream());\n\t}", "signature": "void testGetNextInputStream()", "full_signature": "@Test public void testGetNextInputStream()", "class_method_signature": "LocalFileStreamSourceTest.testGetNextInputStream()", "testcase": true, "constructor": false, "invocations": ["writeSimpleFiles", "init", "add", "toString", "getNextInputStream", "assertNotNull", "readLine", "fail", "getMessage", "assertTrue", "contains", "iterator", "hasNext", "equals", "next", "remove", "assertNull", "getNextInputStream"]}, "focal_class": {"identifier": "LocalFileStreamSource", "superclass": "", "interfaces": "implements FileStreamSource", "fields": [{"original_string": "private static final long serialVersionUID = 3986511547525870698L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 3986511547525870698L", "var_name": "serialVersionUID"}, {"original_string": "private transient InputStream fileStream;", "modifier": "private transient", "type": "InputStream", "declarator": "fileStream", "var_name": "fileStream"}, {"original_string": "private List<String> filePaths;", "modifier": "private", "type": "List<String>", "declarator": "filePaths", "var_name": "filePaths"}, {"original_string": "private int currentIndex;", "modifier": "private", "type": "int", "declarator": "currentIndex", "var_name": "currentIndex"}], "methods": [{"identifier": "LocalFileStreamSource", "parameters": "()", "modifiers": "public", "return": "", "signature": " LocalFileStreamSource()", "full_signature": "public  LocalFileStreamSource()", "class_method_signature": "LocalFileStreamSource.LocalFileStreamSource()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(String path, String ext)", "modifiers": "public", "return": "void", "signature": "void init(String path, String ext)", "full_signature": "public void init(String path, String ext)", "class_method_signature": "LocalFileStreamSource.init(String path, String ext)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "LocalFileStreamSource.reset()", "testcase": false, "constructor": false}, {"identifier": "closeFileStream", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeFileStream()", "full_signature": "private void closeFileStream()", "class_method_signature": "LocalFileStreamSource.closeFileStream()", "testcase": false, "constructor": false}, {"identifier": "getNextInputStream", "parameters": "()", "modifiers": "public", "return": "InputStream", "signature": "InputStream getNextInputStream()", "full_signature": "public InputStream getNextInputStream()", "class_method_signature": "LocalFileStreamSource.getNextInputStream()", "testcase": false, "constructor": false}, {"identifier": "getCurrentInputStream", "parameters": "()", "modifiers": "public", "return": "InputStream", "signature": "InputStream getCurrentInputStream()", "full_signature": "public InputStream getCurrentInputStream()", "class_method_signature": "LocalFileStreamSource.getCurrentInputStream()", "testcase": false, "constructor": false}, {"identifier": "getFilePathListSize", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getFilePathListSize()", "full_signature": "protected int getFilePathListSize()", "class_method_signature": "LocalFileStreamSource.getFilePathListSize()", "testcase": false, "constructor": false}, {"identifier": "getFilePathAt", "parameters": "(int index)", "modifiers": "protected", "return": "String", "signature": "String getFilePathAt(int index)", "full_signature": "protected String getFilePathAt(int index)", "class_method_signature": "LocalFileStreamSource.getFilePathAt(int index)", "testcase": false, "constructor": false}], "file": "samoa-api/src/main/java/com/yahoo/labs/samoa/streams/fs/LocalFileStreamSource.java"}, "focal_method": {"identifier": "getNextInputStream", "parameters": "()", "modifiers": "public", "return": "InputStream", "body": "public InputStream getNextInputStream() {\n\t\tthis.closeFileStream();\n\t\t\n\t\tif (this.currentIndex >= (this.filePaths.size()-1)) return null;\n\t\t\n\t\tthis.currentIndex++;\n\t\tString filePath = this.filePaths.get(currentIndex);\n\t\t\n\t\tFile file = new File(filePath);\n        try {\n        \tfileStream = new FileInputStream(file);\n        }\n        catch(IOException ioe) {\n            this.closeFileStream();\n            throw new RuntimeException(\"Failed opening file:\"+filePath,ioe);\n        }\n        \n        return fileStream;\n\t}", "signature": "InputStream getNextInputStream()", "full_signature": "public InputStream getNextInputStream()", "class_method_signature": "LocalFileStreamSource.getNextInputStream()", "testcase": false, "constructor": false, "invocations": ["closeFileStream", "size", "get", "closeFileStream"]}, "repository": {"repo_id": 13505122, "url": "https://github.com/YahooArchive/samoa", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 424, "size": 6642, "license": "licensed"}}