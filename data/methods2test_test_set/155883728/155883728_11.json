{"test_class": {"identifier": "OpearPackageMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File testOutBaseDir = new File(\"target/test-out/OpearPackageMojoTest\");", "modifier": "private final", "type": "File", "declarator": "testOutBaseDir = new File(\"target/test-out/OpearPackageMojoTest\")", "var_name": "testOutBaseDir"}, {"original_string": "private final File srcDir = new File(\"src/test/resources/OpearPackageMojoTest\");", "modifier": "private final", "type": "File", "declarator": "srcDir = new File(\"src/test/resources/OpearPackageMojoTest\")", "var_name": "srcDir"}], "file": "maven/src/test/java/net/adamcin/oakpal/maven/mojo/OpearPackageMojoTest.java"}, "test_case": {"identifier": "testGetEmbeddedLibraries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetEmbeddedLibraries() {\n        final File testOutDir = new File(testOutBaseDir, \"testGetEmbeddedLibraries\");\n        final OpearPackageMojo mojo = newMojo();\n        final MavenProject project = mock(MavenProject.class);\n        mojo.project = project;\n        final MavenSession session = mock(MavenSession.class);\n        mojo.session = session;\n        final MavenExecutionRequest executionRequest = mock(MavenExecutionRequest.class);\n        when(session.getRequest()).thenReturn(executionRequest);\n        final RepositorySystem repositorySystem = mock(RepositorySystem.class);\n        mojo.repositorySystem = repositorySystem;\n\n        final String expectVersion = \"0.31415926535898\";\n        final Dependency oakpalCoreDep = new DependencyFilter()\n                .withGroupId(OAKPAL_GROUP_ID)\n                .withArtifactId(OAKPAL_CORE_ARTIFACT_ID)\n                .withVersion(expectVersion)\n                .toDependency();\n        final File oakpalDepFile = new File(testOutDir, \"oakpal-core.jar\");\n        final Artifact oakpalArt = mock(Artifact.class);\n        when(oakpalArt.getGroupId()).thenReturn(OAKPAL_GROUP_ID);\n        when(oakpalArt.getArtifactId()).thenReturn(OAKPAL_CORE_ARTIFACT_ID);\n        when(oakpalArt.getScope()).thenReturn(\"compile\");\n        when(oakpalArt.getFile()).thenReturn(oakpalDepFile);\n\n        final Dependency importDep = new DependencyFilter().toDependency(\"import\");\n        final File importDepFile = new File(testOutDir, \"import-scope.jar\");\n        final Artifact importArt = mock(Artifact.class);\n        when(importArt.getGroupId()).thenReturn(OAKPAL_GROUP_ID);\n        when(importArt.getArtifactId()).thenReturn(\"import-scope\");\n        when(importArt.getScope()).thenReturn(\"import\");\n        when(importArt.getFile()).thenReturn(importDepFile);\n\n        final Dependency providedDep = new DependencyFilter().toDependency(\"provided\");\n        final File providedDepFile = new File(testOutDir, \"provided-scope.jar\");\n        final Artifact providedArt = mock(Artifact.class);\n        when(providedArt.getGroupId()).thenReturn(OAKPAL_GROUP_ID);\n        when(providedArt.getArtifactId()).thenReturn(\"provided-scope\");\n        when(providedArt.getScope()).thenReturn(\"provided\");\n        when(providedArt.getFile()).thenReturn(providedDepFile);\n\n        final Dependency testDep = new DependencyFilter().toDependency(\"test\");\n        final File testDepFile = new File(testOutDir, \"test-scope.jar\");\n        final Artifact testArt = mock(Artifact.class);\n        when(testArt.getGroupId()).thenReturn(OAKPAL_GROUP_ID);\n        when(testArt.getArtifactId()).thenReturn(\"test-scope\");\n        when(testArt.getScope()).thenReturn(\"test\");\n        when(testArt.getFile()).thenReturn(testDepFile);\n\n        final Dependency compileDep = new DependencyFilter().toDependency(\"compile\");\n        final File compileDepFile = new File(testOutDir, \"compile-scope.jar\");\n        final Artifact compileArt = mock(Artifact.class);\n        when(compileArt.getGroupId()).thenReturn(OAKPAL_GROUP_ID);\n        when(compileArt.getArtifactId()).thenReturn(\"compile-scope\");\n        when(compileArt.getScope()).thenReturn(\"compile\");\n        when(compileArt.getFile()).thenReturn(compileDepFile);\n\n        final Dependency runtimeDep = new DependencyFilter().toDependency(\"runtime\");\n        final File runtimeDepFile = new File(testOutDir, \"runtime-scope.jar\");\n        final Artifact runtimeArt = mock(Artifact.class);\n        when(runtimeArt.getGroupId()).thenReturn(OAKPAL_GROUP_ID);\n        when(runtimeArt.getArtifactId()).thenReturn(\"runtime-scope\");\n        when(runtimeArt.getScope()).thenReturn(\"runtime\");\n        when(runtimeArt.getFile()).thenReturn(runtimeDepFile);\n\n        final List<Dependency> projectDependencies =\n                Arrays.asList(oakpalCoreDep, importDep, providedDep, testDep, importDep,\n                        compileDep, runtimeDep);\n        when(project.getDependencies()).thenReturn(projectDependencies);\n\n        doAnswer(call -> {\n            final Dependency input = call.getArgument(0, Dependency.class);\n            if (input == oakpalCoreDep) {\n                return oakpalArt;\n            } else if (input == importDep) {\n                return importArt;\n            } else if (input == providedDep) {\n                return providedArt;\n            } else if (input == testDep) {\n                return testArt;\n            } else if (input == compileDep) {\n                return compileArt;\n            } else if (input == runtimeDep) {\n                return runtimeArt;\n            } else {\n                return null;\n            }\n        }).when(repositorySystem).createDependencyArtifact(any(Dependency.class));\n\n        doAnswer(call -> {\n            final ArtifactResolutionRequest request = call.getArgument(0, ArtifactResolutionRequest.class);\n            final ArtifactResolutionResult result = mock(ArtifactResolutionResult.class);\n            when(result.getArtifacts()).thenReturn(Collections.singleton(request.getArtifact()));\n            return result;\n        }).when(repositorySystem).resolve(any(ArtifactResolutionRequest.class));\n\n        final List<File> actualLibraries = mojo.getEmbeddedLibraries();\n        assertFalse(\"not empty: \" + actualLibraries, actualLibraries.isEmpty());\n        assertEquals(\"expect files\", Arrays.asList(compileDepFile, runtimeDepFile), actualLibraries);\n\n    }", "signature": "void testGetEmbeddedLibraries()", "full_signature": "@Test public void testGetEmbeddedLibraries()", "class_method_signature": "OpearPackageMojoTest.testGetEmbeddedLibraries()", "testcase": true, "constructor": false, "invocations": ["newMojo", "mock", "mock", "mock", "thenReturn", "when", "getRequest", "mock", "toDependency", "withVersion", "withArtifactId", "withGroupId", "mock", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getScope", "thenReturn", "when", "getFile", "toDependency", "mock", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getScope", "thenReturn", "when", "getFile", "toDependency", "mock", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getScope", "thenReturn", "when", "getFile", "toDependency", "mock", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getScope", "thenReturn", "when", "getFile", "toDependency", "mock", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getScope", "thenReturn", "when", "getFile", "toDependency", "mock", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getScope", "thenReturn", "when", "getFile", "asList", "thenReturn", "when", "getDependencies", "createDependencyArtifact", "when", "doAnswer", "getArgument", "any", "resolve", "when", "doAnswer", "getArgument", "mock", "thenReturn", "when", "getArtifacts", "singleton", "getArtifact", "any", "getEmbeddedLibraries", "assertFalse", "isEmpty", "assertEquals", "asList"]}, "focal_class": {"identifier": "OpearPackageMojo", "superclass": "extends AbstractCommonMojo", "interfaces": "", "fields": [{"original_string": "public static final String OPEAR = \"opear\";", "modifier": "public static final", "type": "String", "declarator": "OPEAR = \"opear\"", "var_name": "OPEAR"}, {"original_string": "static final String OAKPAL_GROUP_ID = \"net.adamcin.oakpal\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_GROUP_ID = \"net.adamcin.oakpal\"", "var_name": "OAKPAL_GROUP_ID"}, {"original_string": "static final String OAKPAL_API_ARTIFACT_ID = \"oakpal-api\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_API_ARTIFACT_ID = \"oakpal-api\"", "var_name": "OAKPAL_API_ARTIFACT_ID"}, {"original_string": "static final String OAKPAL_CORE_ARTIFACT_ID = \"oakpal-core\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_CORE_ARTIFACT_ID = \"oakpal-core\"", "var_name": "OAKPAL_CORE_ARTIFACT_ID"}, {"original_string": "private static final Predicate<Artifact> TEST_IS_OAKPAL_API =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_API_ARTIFACT_ID::equals));", "modifier": "private static final", "type": "Predicate<Artifact>", "declarator": "TEST_IS_OAKPAL_API =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_API_ARTIFACT_ID::equals))", "var_name": "TEST_IS_OAKPAL_API"}, {"original_string": "private static final Predicate<Artifact> TEST_IS_OAKPAL_CORE =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_CORE_ARTIFACT_ID::equals));", "modifier": "private static final", "type": "Predicate<Artifact>", "declarator": "TEST_IS_OAKPAL_CORE =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_CORE_ARTIFACT_ID::equals))", "var_name": "TEST_IS_OAKPAL_CORE"}, {"original_string": "@Component\n    ArtifactHandlerManager artifactHandlerManager;", "modifier": "@Component", "type": "ArtifactHandlerManager", "declarator": "artifactHandlerManager", "var_name": "artifactHandlerManager"}, {"original_string": "@Parameter(defaultValue = \"${project.build.finalName}\", required = true)\n    String finalName;", "modifier": "@Parameter(defaultValue = \"${project.build.finalName}\", required = true)", "type": "String", "declarator": "finalName", "var_name": "finalName"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)\n    File planFile;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)", "type": "File", "declarator": "planFile", "var_name": "planFile"}, {"original_string": "@Parameter\n    List<File> additionalPlans = new ArrayList<>();", "modifier": "@Parameter", "type": "List<File>", "declarator": "additionalPlans = new ArrayList<>()", "var_name": "additionalPlans"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}\", required = true)\n    File outputDirectory;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}\", required = true)", "type": "File", "declarator": "outputDirectory", "var_name": "outputDirectory"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "OpearPackageMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "attachArtifact", "parameters": "(final @NotNull File finalFile)", "modifiers": "", "return": "Artifact", "signature": "Artifact attachArtifact(final @NotNull File finalFile)", "full_signature": " Artifact attachArtifact(final @NotNull File finalFile)", "class_method_signature": "OpearPackageMojo.attachArtifact(final @NotNull File finalFile)", "testcase": false, "constructor": false}, {"identifier": "getOwnVersion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getOwnVersion()", "full_signature": " String getOwnVersion()", "class_method_signature": "OpearPackageMojo.getOwnVersion()", "testcase": false, "constructor": false}, {"identifier": "getBundleSymbolicName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getBundleSymbolicName()", "full_signature": " String getBundleSymbolicName()", "class_method_signature": "OpearPackageMojo.getBundleSymbolicName()", "testcase": false, "constructor": false}, {"identifier": "getOakpalCoreVersion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getOakpalCoreVersion()", "full_signature": " String getOakpalCoreVersion()", "class_method_signature": "OpearPackageMojo.getOakpalCoreVersion()", "testcase": false, "constructor": false}, {"identifier": "getEmbeddedLibraries", "parameters": "()", "modifiers": "", "return": "List<File>", "signature": "List<File> getEmbeddedLibraries()", "full_signature": " List<File> getEmbeddedLibraries()", "class_method_signature": "OpearPackageMojo.getEmbeddedLibraries()", "testcase": false, "constructor": false}, {"identifier": "assembleOpear", "parameters": "()", "modifiers": "", "return": "File", "signature": "File assembleOpear()", "full_signature": " File assembleOpear()", "class_method_signature": "OpearPackageMojo.assembleOpear()", "testcase": false, "constructor": false}, {"identifier": "mapDestFileNames", "parameters": "(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "modifiers": "static", "return": "Map<String, T>", "signature": "Map<String, T> mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "full_signature": "static Map<String, T> mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "class_method_signature": "OpearPackageMojo.mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "testcase": false, "constructor": false}, {"identifier": "shrinkWrapPlans", "parameters": "(final @NotNull File toDir)", "modifiers": "", "return": "Result<List<String>>", "signature": "Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "full_signature": " Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "class_method_signature": "OpearPackageMojo.shrinkWrapPlans(final @NotNull File toDir)", "testcase": false, "constructor": false}, {"identifier": "rewritePlan", "parameters": "(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "modifiers": "static", "return": "OakpalPlan", "signature": "OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "full_signature": "static OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "class_method_signature": "OpearPackageMojo.rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "testcase": false, "constructor": false}, {"identifier": "copyPlans", "parameters": "(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "modifiers": "static", "return": "Result<Map<String, OakpalPlan>>", "signature": "Result<Map<String, OakpalPlan>> copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "full_signature": "static Result<Map<String, OakpalPlan>> copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "class_method_signature": "OpearPackageMojo.copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "testcase": false, "constructor": false}, {"identifier": "copyUrlStreams", "parameters": "(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "modifiers": "static", "return": "Result<Map<URL, String>>", "signature": "Result<Map<URL, String>> copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "full_signature": "static Result<Map<URL, String>> copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "class_method_signature": "OpearPackageMojo.copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "testcase": false, "constructor": false}], "file": "maven/src/main/java/net/adamcin/oakpal/maven/mojo/OpearPackageMojo.java"}, "focal_method": {"identifier": "getEmbeddedLibraries", "parameters": "()", "modifiers": "", "return": "List<File>", "body": "List<File> getEmbeddedLibraries() {\n        final Set<String> NOT_EMBEDDABLE = new HashSet<>(\n                Arrays.asList(Artifact.SCOPE_IMPORT, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_TEST));\n\n        final Set<File> embeddable = resolveArtifacts(project.getDependencies().stream()\n                .filter(composeTest1(Dependency::getScope, inSet(NOT_EMBEDDABLE).negate()))\n                .collect(Collectors.toList()), true).stream()\n                .filter(TEST_IS_OAKPAL_CORE.negate().and(TEST_IS_OAKPAL_API.negate()))\n                .map(Artifact::getFile)\n                .collect(Collectors.toCollection(LinkedHashSet::new));\n\n        resolveArtifacts(project.getDependencies().stream()\n                .filter(new DependencyFilter().withGroupId(OAKPAL_GROUP_ID).withArtifactId(OAKPAL_CORE_ARTIFACT_ID))\n                .collect(Collectors.toList()), true).stream().map(Artifact::getFile).forEachOrdered(embeddable::remove);\n\n        resolveArtifacts(project.getDependencies().stream()\n                .filter(new DependencyFilter().withGroupId(OAKPAL_GROUP_ID).withArtifactId(OAKPAL_API_ARTIFACT_ID))\n                .collect(Collectors.toList()), true).stream().map(Artifact::getFile).forEachOrdered(embeddable::remove);\n\n        return new ArrayList<>(embeddable);\n    }", "signature": "List<File> getEmbeddedLibraries()", "full_signature": " List<File> getEmbeddedLibraries()", "class_method_signature": "OpearPackageMojo.getEmbeddedLibraries()", "testcase": false, "constructor": false, "invocations": ["asList", "collect", "map", "filter", "stream", "resolveArtifacts", "collect", "filter", "stream", "getDependencies", "composeTest1", "negate", "inSet", "toList", "and", "negate", "negate", "toCollection", "forEachOrdered", "map", "stream", "resolveArtifacts", "collect", "filter", "stream", "getDependencies", "withArtifactId", "withGroupId", "toList", "forEachOrdered", "map", "stream", "resolveArtifacts", "collect", "filter", "stream", "getDependencies", "withArtifactId", "withGroupId", "toList"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}