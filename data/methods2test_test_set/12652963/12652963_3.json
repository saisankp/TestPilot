{"test_class": {"identifier": "TestTimeStampDissector", "superclass": "", "interfaces": "", "fields": [], "file": "httpdlog/httpdlog-parser/src/test/java/nl/basjes/parse/httpdlog/dissectors/TestTimeStampDissector.java"}, "test_case": {"identifier": "testTimeStampDissector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTimeStampDissector() {\n        DissectorTester.create()\n            .withDissector(new TimeStampDissector())\n            .withInput(\"31/Dec/2012:23:00:44 -0700\")\n\n            .expect(\"TIME.EPOCH:epoch\",             \"1357020044000\")\n            .expect(\"TIME.EPOCH:epoch\",             1357020044000L)\n            .expect(\"TIME.YEAR:year\",               \"2012\")\n            .expect(\"TIME.YEAR:year\",               2012L)\n            .expect(\"TIME.MONTH:month\",             \"12\")\n            .expect(\"TIME.MONTH:month\",             12L)\n            .expect(\"TIME.MONTHNAME:monthname\",     \"December\")\n            .expect(\"TIME.DAY:day\",                 \"31\")\n            .expect(\"TIME.DAY:day\",                 31L)\n            .expect(\"TIME.HOUR:hour\",               \"23\")\n            .expect(\"TIME.HOUR:hour\",               23L)\n            .expect(\"TIME.MINUTE:minute\",           \"0\")\n            .expect(\"TIME.MINUTE:minute\",           0L)\n            .expect(\"TIME.SECOND:second\",           \"44\")\n            .expect(\"TIME.SECOND:second\",           44L)\n            .expect(\"TIME.DATE:date\",               \"2012-12-31\")\n            .expect(\"TIME.TIME:time\",               \"23:00:44\")\n            .expect(\"TIME.ZONE:timezone\",           \"-07:00\")\n            .expect(\"TIME.YEAR:year_utc\",           \"2013\")\n            .expect(\"TIME.YEAR:year_utc\",           2013L)\n            .expect(\"TIME.MONTH:month_utc\",         \"1\")\n            .expect(\"TIME.MONTH:month_utc\",         1L)\n            .expect(\"TIME.MONTHNAME:monthname_utc\", \"January\")\n            .expect(\"TIME.DAY:day_utc\",             \"1\")\n            .expect(\"TIME.DAY:day_utc\",             1L)\n            .expect(\"TIME.HOUR:hour_utc\",           \"6\")\n            .expect(\"TIME.HOUR:hour_utc\",           6L)\n            .expect(\"TIME.MINUTE:minute_utc\",       \"0\")\n            .expect(\"TIME.MINUTE:minute_utc\",       0L)\n            .expect(\"TIME.SECOND:second_utc\",       \"44\")\n            .expect(\"TIME.SECOND:second_utc\",       44L)\n            .expect(\"TIME.DATE:date_utc\",           \"2013-01-01\")\n            .expect(\"TIME.TIME:time_utc\",           \"06:00:44\")\n\n            .checkExpectations();\n    }", "signature": "void testTimeStampDissector()", "full_signature": "@Test public void testTimeStampDissector()", "class_method_signature": "TestTimeStampDissector.testTimeStampDissector()", "testcase": true, "constructor": false, "invocations": ["checkExpectations", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "expect", "withInput", "withDissector", "create"]}, "focal_class": {"identifier": "TimeStampDissector", "superclass": "extends Dissector", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_APACHE_DATE_TIME_PATTERN = \"dd/MMM/yyyy:HH:mm:ss ZZ\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_APACHE_DATE_TIME_PATTERN = \"dd/MMM/yyyy:HH:mm:ss ZZ\"", "var_name": "DEFAULT_APACHE_DATE_TIME_PATTERN"}, {"original_string": "private transient DateTimeFormatter formatter;", "modifier": "private transient", "type": "DateTimeFormatter", "declarator": "formatter", "var_name": "formatter"}, {"original_string": "private String dateTimePattern;", "modifier": "private", "type": "String", "declarator": "dateTimePattern", "var_name": "dateTimePattern"}, {"original_string": "private Locale locale = Locale.UK;", "modifier": "private", "type": "Locale", "declarator": "locale = Locale.UK", "var_name": "locale"}, {"original_string": "private String inputType = \"TIME.STAMP\";", "modifier": "private", "type": "String", "declarator": "inputType = \"TIME.STAMP\"", "var_name": "inputType"}, {"original_string": "private boolean wantAnyAsParsed       = false;", "modifier": "private", "type": "boolean", "declarator": "wantAnyAsParsed       = false", "var_name": "wantAnyAsParsed"}, {"original_string": "private boolean wantAnyUTC            = false;", "modifier": "private", "type": "boolean", "declarator": "wantAnyUTC            = false", "var_name": "wantAnyUTC"}, {"original_string": "private boolean wantAnyTZIndependent  = false;", "modifier": "private", "type": "boolean", "declarator": "wantAnyTZIndependent  = false", "var_name": "wantAnyTZIndependent"}, {"original_string": "private boolean wantDay               = false;", "modifier": "private", "type": "boolean", "declarator": "wantDay               = false", "var_name": "wantDay"}, {"original_string": "private boolean wantMonthname         = false;", "modifier": "private", "type": "boolean", "declarator": "wantMonthname         = false", "var_name": "wantMonthname"}, {"original_string": "private boolean wantMonth             = false;", "modifier": "private", "type": "boolean", "declarator": "wantMonth             = false", "var_name": "wantMonth"}, {"original_string": "private boolean wantWeekOfWeekYear    = false;", "modifier": "private", "type": "boolean", "declarator": "wantWeekOfWeekYear    = false", "var_name": "wantWeekOfWeekYear"}, {"original_string": "private boolean wantWeekYear          = false;", "modifier": "private", "type": "boolean", "declarator": "wantWeekYear          = false", "var_name": "wantWeekYear"}, {"original_string": "private boolean wantYear              = false;", "modifier": "private", "type": "boolean", "declarator": "wantYear              = false", "var_name": "wantYear"}, {"original_string": "private boolean wantHour              = false;", "modifier": "private", "type": "boolean", "declarator": "wantHour              = false", "var_name": "wantHour"}, {"original_string": "private boolean wantMinute            = false;", "modifier": "private", "type": "boolean", "declarator": "wantMinute            = false", "var_name": "wantMinute"}, {"original_string": "private boolean wantSecond            = false;", "modifier": "private", "type": "boolean", "declarator": "wantSecond            = false", "var_name": "wantSecond"}, {"original_string": "private boolean wantMillisecond       = false;", "modifier": "private", "type": "boolean", "declarator": "wantMillisecond       = false", "var_name": "wantMillisecond"}, {"original_string": "private boolean wantMicrosecond       = false;", "modifier": "private", "type": "boolean", "declarator": "wantMicrosecond       = false", "var_name": "wantMicrosecond"}, {"original_string": "private boolean wantNanosecond        = false;", "modifier": "private", "type": "boolean", "declarator": "wantNanosecond        = false", "var_name": "wantNanosecond"}, {"original_string": "private boolean wantDate              = false;", "modifier": "private", "type": "boolean", "declarator": "wantDate              = false", "var_name": "wantDate"}, {"original_string": "private boolean wantTime              = false;", "modifier": "private", "type": "boolean", "declarator": "wantTime              = false", "var_name": "wantTime"}, {"original_string": "private boolean wantTimezone          = false;", "modifier": "private", "type": "boolean", "declarator": "wantTimezone          = false", "var_name": "wantTimezone"}, {"original_string": "private boolean wantEpoch             = false;", "modifier": "private", "type": "boolean", "declarator": "wantEpoch             = false", "var_name": "wantEpoch"}, {"original_string": "private boolean wantDayUTC            = false;", "modifier": "private", "type": "boolean", "declarator": "wantDayUTC            = false", "var_name": "wantDayUTC"}, {"original_string": "private boolean wantMonthnameUTC      = false;", "modifier": "private", "type": "boolean", "declarator": "wantMonthnameUTC      = false", "var_name": "wantMonthnameUTC"}, {"original_string": "private boolean wantMonthUTC          = false;", "modifier": "private", "type": "boolean", "declarator": "wantMonthUTC          = false", "var_name": "wantMonthUTC"}, {"original_string": "private boolean wantWeekOfWeekYearUTC = false;", "modifier": "private", "type": "boolean", "declarator": "wantWeekOfWeekYearUTC = false", "var_name": "wantWeekOfWeekYearUTC"}, {"original_string": "private boolean wantWeekYearUTC       = false;", "modifier": "private", "type": "boolean", "declarator": "wantWeekYearUTC       = false", "var_name": "wantWeekYearUTC"}, {"original_string": "private boolean wantYearUTC           = false;", "modifier": "private", "type": "boolean", "declarator": "wantYearUTC           = false", "var_name": "wantYearUTC"}, {"original_string": "private boolean wantHourUTC           = false;", "modifier": "private", "type": "boolean", "declarator": "wantHourUTC           = false", "var_name": "wantHourUTC"}, {"original_string": "private boolean wantMinuteUTC         = false;", "modifier": "private", "type": "boolean", "declarator": "wantMinuteUTC         = false", "var_name": "wantMinuteUTC"}, {"original_string": "private boolean wantSecondUTC         = false;", "modifier": "private", "type": "boolean", "declarator": "wantSecondUTC         = false", "var_name": "wantSecondUTC"}, {"original_string": "private boolean wantMillisecondUTC    = false;", "modifier": "private", "type": "boolean", "declarator": "wantMillisecondUTC    = false", "var_name": "wantMillisecondUTC"}, {"original_string": "private boolean wantMicrosecondUTC    = false;", "modifier": "private", "type": "boolean", "declarator": "wantMicrosecondUTC    = false", "var_name": "wantMicrosecondUTC"}, {"original_string": "private boolean wantNanosecondUTC     = false;", "modifier": "private", "type": "boolean", "declarator": "wantNanosecondUTC     = false", "var_name": "wantNanosecondUTC"}, {"original_string": "private boolean wantDateUTC           = false;", "modifier": "private", "type": "boolean", "declarator": "wantDateUTC           = false", "var_name": "wantDateUTC"}, {"original_string": "private boolean wantTimeUTC           = false;", "modifier": "private", "type": "boolean", "declarator": "wantTimeUTC           = false", "var_name": "wantTimeUTC"}, {"original_string": "private static final DateTimeFormatter ISO_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "ISO_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")", "var_name": "ISO_DATE_FORMATTER"}, {"original_string": "private static final DateTimeFormatter ISO_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"HH:mm:ss\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "ISO_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"HH:mm:ss\")", "var_name": "ISO_TIME_FORMATTER"}], "methods": [{"identifier": "TimeStampDissector", "parameters": "()", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public", "return": "", "signature": " TimeStampDissector()", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public  TimeStampDissector()", "class_method_signature": "TimeStampDissector.TimeStampDissector()", "testcase": false, "constructor": true}, {"identifier": "TimeStampDissector", "parameters": "(String newDateTimePattern)", "modifiers": "public", "return": "", "signature": " TimeStampDissector(String newDateTimePattern)", "full_signature": "public  TimeStampDissector(String newDateTimePattern)", "class_method_signature": "TimeStampDissector.TimeStampDissector(String newDateTimePattern)", "testcase": false, "constructor": true}, {"identifier": "TimeStampDissector", "parameters": "(String inputType, String newDateTimePattern)", "modifiers": "public", "return": "", "signature": " TimeStampDissector(String inputType, String newDateTimePattern)", "full_signature": "public  TimeStampDissector(String inputType, String newDateTimePattern)", "class_method_signature": "TimeStampDissector.TimeStampDissector(String inputType, String newDateTimePattern)", "testcase": false, "constructor": true}, {"identifier": "setLocale", "parameters": "(Locale newLocale)", "modifiers": "public", "return": "TimeStampDissector", "signature": "TimeStampDissector setLocale(Locale newLocale)", "full_signature": "public TimeStampDissector setLocale(Locale newLocale)", "class_method_signature": "TimeStampDissector.setLocale(Locale newLocale)", "testcase": false, "constructor": false}, {"identifier": "getLocale", "parameters": "()", "modifiers": "public", "return": "Locale", "signature": "Locale getLocale()", "full_signature": "public Locale getLocale()", "class_method_signature": "TimeStampDissector.getLocale()", "testcase": false, "constructor": false}, {"identifier": "initializeFromSettingsParameter", "parameters": "(String settings)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean initializeFromSettingsParameter(String settings)", "full_signature": "@Override public boolean initializeFromSettingsParameter(String settings)", "class_method_signature": "TimeStampDissector.initializeFromSettingsParameter(String settings)", "testcase": false, "constructor": false}, {"identifier": "setDateTimePattern", "parameters": "(String nDateTimePattern)", "modifiers": "public", "return": "void", "signature": "void setDateTimePattern(String nDateTimePattern)", "full_signature": "public void setDateTimePattern(String nDateTimePattern)", "class_method_signature": "TimeStampDissector.setDateTimePattern(String nDateTimePattern)", "testcase": false, "constructor": false}, {"identifier": "setFormatter", "parameters": "(DateTimeFormatter newFormatter)", "modifiers": "protected", "return": "void", "signature": "void setFormatter(DateTimeFormatter newFormatter)", "full_signature": "protected void setFormatter(DateTimeFormatter newFormatter)", "class_method_signature": "TimeStampDissector.setFormatter(DateTimeFormatter newFormatter)", "testcase": false, "constructor": false}, {"identifier": "getFormatter", "parameters": "()", "modifiers": "protected", "return": "DateTimeFormatter", "signature": "DateTimeFormatter getFormatter()", "full_signature": "protected DateTimeFormatter getFormatter()", "class_method_signature": "TimeStampDissector.getFormatter()", "testcase": false, "constructor": false}, {"identifier": "initializeNewInstance", "parameters": "(Dissector newInstance)", "modifiers": "@Override protected", "return": "void", "signature": "void initializeNewInstance(Dissector newInstance)", "full_signature": "@Override protected void initializeNewInstance(Dissector newInstance)", "class_method_signature": "TimeStampDissector.initializeNewInstance(Dissector newInstance)", "testcase": false, "constructor": false}, {"identifier": "getInputType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getInputType()", "full_signature": "@Override public String getInputType()", "class_method_signature": "TimeStampDissector.getInputType()", "testcase": false, "constructor": false}, {"identifier": "setInputType", "parameters": "(String nInputType)", "modifiers": "@Override public final", "return": "void", "signature": "void setInputType(String nInputType)", "full_signature": "@Override public final void setInputType(String nInputType)", "class_method_signature": "TimeStampDissector.setInputType(String nInputType)", "testcase": false, "constructor": false}, {"identifier": "getPossibleOutput", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getPossibleOutput()", "full_signature": "@Override public List<String> getPossibleOutput()", "class_method_signature": "TimeStampDissector.getPossibleOutput()", "testcase": false, "constructor": false}, {"identifier": "prepareForDissect", "parameters": "(final String inputname, final String outputname)", "modifiers": "@Override public", "return": "EnumSet<Casts>", "signature": "EnumSet<Casts> prepareForDissect(final String inputname, final String outputname)", "full_signature": "@Override public EnumSet<Casts> prepareForDissect(final String inputname, final String outputname)", "class_method_signature": "TimeStampDissector.prepareForDissect(final String inputname, final String outputname)", "testcase": false, "constructor": false}, {"identifier": "prepareForRun", "parameters": "()", "modifiers": "@SuppressWarnings(\"ConstantConditions\") @Override public", "return": "void", "signature": "void prepareForRun()", "full_signature": "@SuppressWarnings(\"ConstantConditions\") @Override public void prepareForRun()", "class_method_signature": "TimeStampDissector.prepareForRun()", "testcase": false, "constructor": false}, {"identifier": "dissect", "parameters": "(final Parsable<?> parsable, final String inputname)", "modifiers": "@Override public", "return": "void", "signature": "void dissect(final Parsable<?> parsable, final String inputname)", "full_signature": "@Override public void dissect(final Parsable<?> parsable, final String inputname)", "class_method_signature": "TimeStampDissector.dissect(final Parsable<?> parsable, final String inputname)", "testcase": false, "constructor": false}, {"identifier": "dissect", "parameters": "(ParsedField field, final Parsable<?> parsable, final String inputname)", "modifiers": "protected", "return": "void", "signature": "void dissect(ParsedField field, final Parsable<?> parsable, final String inputname)", "full_signature": "protected void dissect(ParsedField field, final Parsable<?> parsable, final String inputname)", "class_method_signature": "TimeStampDissector.dissect(ParsedField field, final Parsable<?> parsable, final String inputname)", "testcase": false, "constructor": false}], "file": "httpdlog/httpdlog-parser/src/main/java/nl/basjes/parse/httpdlog/dissectors/TimeStampDissector.java"}, "focal_method": {"identifier": "TimeStampDissector", "parameters": "()", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public", "return": "", "body": "@SuppressWarnings(\"UnusedDeclaration\")\n    public TimeStampDissector() {\n        this(DEFAULT_APACHE_DATE_TIME_PATTERN);\n    }", "signature": " TimeStampDissector()", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public  TimeStampDissector()", "class_method_signature": "TimeStampDissector.TimeStampDissector()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 12652963, "url": "https://github.com/nielsbasjes/logparser", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 94, "size": 2121, "license": "licensed"}}