{"test_class": {"identifier": "AuthCodeGrantControllerTest", "superclass": "", "interfaces": "implements RequestPath", "fields": [{"original_string": "private static final long CLIENT_ID = 2882303761517520186L;", "modifier": "private static final", "type": "long", "declarator": "CLIENT_ID = 2882303761517520186L", "var_name": "CLIENT_ID"}, {"original_string": "private static final String REDIRECT_URI = \"http://www.zhenchao.com\";", "modifier": "private static final", "type": "String", "declarator": "REDIRECT_URI = \"http://www.zhenchao.com\"", "var_name": "REDIRECT_URI"}, {"original_string": "private static final String SCOPE = \"1 2 4\";", "modifier": "private static final", "type": "String", "declarator": "SCOPE = \"1 2 4\"", "var_name": "SCOPE"}, {"original_string": "private static final String ALL_SCOPE = \"1 2 4 5\";", "modifier": "private static final", "type": "String", "declarator": "ALL_SCOPE = \"1 2 4 5\"", "var_name": "ALL_SCOPE"}, {"original_string": "private Response resp4Login;", "modifier": "private", "type": "Response", "declarator": "resp4Login", "var_name": "resp4Login"}], "file": "oauth-protocol/src/test/java/org/zhenchao/oauth/controller/AuthCodeGrantControllerTest.java"}, "test_case": {"identifier": "authorizeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void authorizeTest() throws Exception {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"response_type\", ResponseType.AUTHORIZATION_CODE.getType());\n        params.put(\"client_id\", CLIENT_ID);\n        params.put(\"redirect_uri\", REDIRECT_URI);\n        Response response = RestAssured.with().params(params).cookies(resp4Login.cookies()).get(PATH_OAUTH_AUTHORIZE_CODE);\n        Assert.assertEquals(200, response.getStatusCode());\n        // System.out.println(response.asString());\n        response = MockUserOperationUtils.authorizationCodeUserAuthorize(response, resp4Login.cookies(), ALL_SCOPE, StringUtils.EMPTY);\n        System.out.println(response.asString());\n        Assert.assertEquals(302, response.getStatusCode());\n        String redirectUrl = response.getHeader(\"Location\");\n        System.out.println(redirectUrl);\n        response = RestAssured.with().redirects().follow(false).cookies(resp4Login.getCookies()).cookies(response.cookies()).get(redirectUrl);\n        System.out.println(response.getHeader(\"Location\"));\n        Map<String, String> results = ResultUtils.getLocationUrlParamsValue(response);\n        Assert.assertNotNull(results.get(\"code\"));\n    }", "signature": "void authorizeTest()", "full_signature": "@Test public void authorizeTest()", "class_method_signature": "AuthCodeGrantControllerTest.authorizeTest()", "testcase": true, "constructor": false, "invocations": ["put", "getType", "put", "put", "get", "cookies", "params", "with", "cookies", "assertEquals", "getStatusCode", "authorizationCodeUserAuthorize", "cookies", "println", "asString", "assertEquals", "getStatusCode", "getHeader", "println", "get", "cookies", "cookies", "follow", "redirects", "with", "getCookies", "cookies", "println", "getHeader", "getLocationUrlParamsValue", "assertNotNull", "get"]}, "focal_class": {"identifier": "AuthCodeGrantController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AuthCodeGrantController.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AuthCodeGrantController.class)", "var_name": "log"}, {"original_string": "@Resource\n    private AuthorizeRelationService authorizeRelationService;", "modifier": "@Resource\n    private", "type": "AuthorizeRelationService", "declarator": "authorizeRelationService", "var_name": "authorizeRelationService"}, {"original_string": "@Resource\n    private ScopeService scopeService;", "modifier": "@Resource\n    private", "type": "ScopeService", "declarator": "scopeService", "var_name": "scopeService"}], "methods": [{"identifier": "authorize", "parameters": "(HttpServletRequest request, HttpServletResponse response, HttpSession session,\n                                  @RequestParam(\"response_type\") String responseType,\n                                  @RequestParam(\"client_id\") long clientId,\n                                  @RequestParam(\"redirect_uri\") String redirectUri,\n                                  @RequestParam(name = \"scope\", required = false) String scope,\n                                  @RequestParam(name = \"state\", required = false) String state,\n                                  @RequestParam(name = \"skip_confirm\", required = false, defaultValue = \"false\") boolean skipConfirm,\n                                  @RequestParam(name = \"force_login\", required = false, defaultValue = \"false\") boolean forceLogin)", "modifiers": "@RequestMapping(path = RequestPath.PATH_OAUTH_AUTHORIZE_CODE, method = {GET, POST}) public", "return": "ModelAndView", "signature": "ModelAndView authorize(HttpServletRequest request, HttpServletResponse response, HttpSession session,\n                                  @RequestParam(\"response_type\") String responseType,\n                                  @RequestParam(\"client_id\") long clientId,\n                                  @RequestParam(\"redirect_uri\") String redirectUri,\n                                  @RequestParam(name = \"scope\", required = false) String scope,\n                                  @RequestParam(name = \"state\", required = false) String state,\n                                  @RequestParam(name = \"skip_confirm\", required = false, defaultValue = \"false\") boolean skipConfirm,\n                                  @RequestParam(name = \"force_login\", required = false, defaultValue = \"false\") boolean forceLogin)", "full_signature": "@RequestMapping(path = RequestPath.PATH_OAUTH_AUTHORIZE_CODE, method = {GET, POST}) public ModelAndView authorize(HttpServletRequest request, HttpServletResponse response, HttpSession session,\n                                  @RequestParam(\"response_type\") String responseType,\n                                  @RequestParam(\"client_id\") long clientId,\n                                  @RequestParam(\"redirect_uri\") String redirectUri,\n                                  @RequestParam(name = \"scope\", required = false) String scope,\n                                  @RequestParam(name = \"state\", required = false) String state,\n                                  @RequestParam(name = \"skip_confirm\", required = false, defaultValue = \"false\") boolean skipConfirm,\n                                  @RequestParam(name = \"force_login\", required = false, defaultValue = \"false\") boolean forceLogin)", "class_method_signature": "AuthCodeGrantController.authorize(HttpServletRequest request, HttpServletResponse response, HttpSession session,\n                                  @RequestParam(\"response_type\") String responseType,\n                                  @RequestParam(\"client_id\") long clientId,\n                                  @RequestParam(\"redirect_uri\") String redirectUri,\n                                  @RequestParam(name = \"scope\", required = false) String scope,\n                                  @RequestParam(name = \"state\", required = false) String state,\n                                  @RequestParam(name = \"skip_confirm\", required = false, defaultValue = \"false\") boolean skipConfirm,\n                                  @RequestParam(name = \"force_login\", required = false, defaultValue = \"false\") boolean forceLogin)", "testcase": false, "constructor": false}, {"identifier": "issueToken", "parameters": "(HttpServletResponse response,\n                                   @RequestParam(\"grant_type\") String grantType,\n                                   @RequestParam(\"code\") String code,\n                                   @RequestParam(\"redirect_uri\") String redirectUri,\n                                   @RequestParam(\"client_id\") long clientId,\n                                   @RequestParam(name = \"client_secret\", required = false) String clientSecret,\n                                   @RequestParam(name = \"token_type\", required = false) String tokenType,\n                                   @RequestParam(name = \"issue_refresh_token\", required = false, defaultValue = \"true\") boolean refresh)", "modifiers": "@RequestMapping(path = RequestPath.PATH_OAUTH_AUTHORIZE_TOKEN, method = {GET, POST}) public", "return": "ModelAndView", "signature": "ModelAndView issueToken(HttpServletResponse response,\n                                   @RequestParam(\"grant_type\") String grantType,\n                                   @RequestParam(\"code\") String code,\n                                   @RequestParam(\"redirect_uri\") String redirectUri,\n                                   @RequestParam(\"client_id\") long clientId,\n                                   @RequestParam(name = \"client_secret\", required = false) String clientSecret,\n                                   @RequestParam(name = \"token_type\", required = false) String tokenType,\n                                   @RequestParam(name = \"issue_refresh_token\", required = false, defaultValue = \"true\") boolean refresh)", "full_signature": "@RequestMapping(path = RequestPath.PATH_OAUTH_AUTHORIZE_TOKEN, method = {GET, POST}) public ModelAndView issueToken(HttpServletResponse response,\n                                   @RequestParam(\"grant_type\") String grantType,\n                                   @RequestParam(\"code\") String code,\n                                   @RequestParam(\"redirect_uri\") String redirectUri,\n                                   @RequestParam(\"client_id\") long clientId,\n                                   @RequestParam(name = \"client_secret\", required = false) String clientSecret,\n                                   @RequestParam(name = \"token_type\", required = false) String tokenType,\n                                   @RequestParam(name = \"issue_refresh_token\", required = false, defaultValue = \"true\") boolean refresh)", "class_method_signature": "AuthCodeGrantController.issueToken(HttpServletResponse response,\n                                   @RequestParam(\"grant_type\") String grantType,\n                                   @RequestParam(\"code\") String code,\n                                   @RequestParam(\"redirect_uri\") String redirectUri,\n                                   @RequestParam(\"client_id\") long clientId,\n                                   @RequestParam(name = \"client_secret\", required = false) String clientSecret,\n                                   @RequestParam(name = \"token_type\", required = false) String tokenType,\n                                   @RequestParam(name = \"issue_refresh_token\", required = false, defaultValue = \"true\") boolean refresh)", "testcase": false, "constructor": false}], "file": "oauth-protocol/src/main/java/org/zhenchao/oauth/controller/AuthCodeGrantController.java"}, "focal_method": {"identifier": "authorize", "parameters": "(HttpServletRequest request, HttpServletResponse response, HttpSession session,\n                                  @RequestParam(\"response_type\") String responseType,\n                                  @RequestParam(\"client_id\") long clientId,\n                                  @RequestParam(\"redirect_uri\") String redirectUri,\n                                  @RequestParam(name = \"scope\", required = false) String scope,\n                                  @RequestParam(name = \"state\", required = false) String state,\n                                  @RequestParam(name = \"skip_confirm\", required = false, defaultValue = \"false\") boolean skipConfirm,\n                                  @RequestParam(name = \"force_login\", required = false, defaultValue = \"false\") boolean forceLogin)", "modifiers": "@RequestMapping(path = RequestPath.PATH_OAUTH_AUTHORIZE_CODE, method = {GET, POST}) public", "return": "ModelAndView", "body": "@RequestMapping(path = RequestPath.PATH_OAUTH_AUTHORIZE_CODE, method = {GET, POST})\n    public ModelAndView authorize(HttpServletRequest request, HttpServletResponse response, HttpSession session,\n                                  @RequestParam(\"response_type\") String responseType,\n                                  @RequestParam(\"client_id\") long clientId,\n                                  @RequestParam(\"redirect_uri\") String redirectUri,\n                                  @RequestParam(name = \"scope\", required = false) String scope,\n                                  @RequestParam(name = \"state\", required = false) String state,\n                                  @RequestParam(name = \"skip_confirm\", required = false, defaultValue = \"false\") boolean skipConfirm,\n                                  @RequestParam(name = \"force_login\", required = false, defaultValue = \"false\") boolean forceLogin)\n            throws VerificationException {\n\n        log.info(\"Request authorize code, appId[{}]\", clientId);\n        ModelAndView mav = new ModelAndView();\n\n        // \u8bf7\u6c42\u53c2\u6570\u5c01\u88c5\u4e0e\u6821\u9a8c\n        AuthorizeRequestParams requestParams = new AuthorizeRequestParams(responseType, clientId, redirectUri, scope, state);\n        ErrorCode validateResult = requestParams.validate();\n        if (!ErrorCode.NO_ERROR.equals(validateResult)) {\n            // \u8bf7\u6c42\u53c2\u6570\u6709\u8bef\n            log.error(\"Request authorize params error, appId[{}], errorCode[{}], params[{}]\", clientId, validateResult, requestParams);\n            if (ErrorCode.INVALID_CLIENT.equals(validateResult) || ErrorCode.INVALID_REDIRECT_URI.equals(validateResult)) {\n                /*\n                 * If the request fails due to a missing, invalid, or mismatching redirection URI,\n                 * or if the client identifier is missing or invalid, the authorization server SHOULD inform the resource owner of the\n                 * error and MUST NOT automatically redirect the user-agent to the invalid redirection URI.\n                 */\n                return JsonView.render(new ResultInfo(validateResult, state), response, false);\n            }\n            return ResponseUtils.buildErrorResponse(redirectUri, validateResult, state);\n        }\n\n        AppInfo appInfo = requestParams.getAppInfo();\n        UserInfo user = SessionUtils.getUser(session, CookieUtils.get(request, COOKIE_KEY_USER_LOGIN_SIGN));\n        if (null == user || forceLogin) {\n            // \u7528\u6237\u672a\u767b\u5f55\u6216\u9700\u8981\u5f3a\u5236\u767b\u5f55\uff0c\u8df3\u8f6c\u5230\u767b\u5f55\u9875\u9762\n            return ResponseUtils.buildLoginResponse(request, appInfo);\n        }\n        requestParams.setUserInfo(user);\n\n        // \u83b7\u53d6\u7528\u6237\u4e0eAPP\u4e4b\u95f4\u7684\u6388\u6743\u5173\u7cfb\u8bb0\u5f55\n        Optional<AuthorizeRelation> relation =\n                authorizeRelationService.getAuthorizeRelation(user.getId(), requestParams.getClientId(), requestParams.getScope());\n\n        if (relation.isPresent() && skipConfirm) {\n            // \u7528\u6237\u5df2\u6388\u6743\u8be5APP\uff0c\u4e0b\u53d1\u6388\u6743\u7801\n            log.info(\"User had authorized and issue auth code, appId[{}], userId[{}], scope[{}]\", clientId, user.getId(), requestParams.getScope());\n            AuthorizationCode code = new AuthorizationCode(\n                    requestParams.getAppInfo(), user.getId(), relation.get().getScope(), requestParams.getRedirectUri());\n            String key = code.getValue();\n            if (StringUtils.isBlank(key)) {\n                log.error(\"Generate auth code error, appId[{}], userId[{}], scope[{}]\", clientId, user.getId(), requestParams.getScope());\n                return ResponseUtils.buildErrorResponse(redirectUri, ErrorCode.AUTHORIZATION_CODE_GENERATE_ERROR, state);\n            }\n            UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(requestParams.getRedirectUri());\n            builder.queryParam(\"code\", key);\n            if (StringUtils.isNotEmpty(state)) {\n                builder.queryParam(\"state\", state);\n            }\n            // cache auth code\n            AuthCodeCacheHandler.getInstance().put(key, code);\n            mav.setViewName(\"redirect:\" + builder.toUriString());\n            return mav;\n        }\n\n        // \u7528\u6237\u672a\u6388\u6743\u8be5APP\uff0c\u8df3\u8f6c\u5230\u6388\u6743\u9875\u9762\n        log.info(\"User not authorized and goto authorize page, appId[{}], userId[{}], relationExist[{}], skipConfirm[{}]\",\n                clientId, user.getId(), relation.isPresent(), skipConfirm);\n        List<Scope> scopes = scopeService.getScopes(requestParams.getScope());\n        return ResponseUtils.buildAuthorizeResponse(request, scopes, user, appInfo, state);\n    }", "signature": "ModelAndView authorize(HttpServletRequest request, HttpServletResponse response, HttpSession session,\n                                  @RequestParam(\"response_type\") String responseType,\n                                  @RequestParam(\"client_id\") long clientId,\n                                  @RequestParam(\"redirect_uri\") String redirectUri,\n                                  @RequestParam(name = \"scope\", required = false) String scope,\n                                  @RequestParam(name = \"state\", required = false) String state,\n                                  @RequestParam(name = \"skip_confirm\", required = false, defaultValue = \"false\") boolean skipConfirm,\n                                  @RequestParam(name = \"force_login\", required = false, defaultValue = \"false\") boolean forceLogin)", "full_signature": "@RequestMapping(path = RequestPath.PATH_OAUTH_AUTHORIZE_CODE, method = {GET, POST}) public ModelAndView authorize(HttpServletRequest request, HttpServletResponse response, HttpSession session,\n                                  @RequestParam(\"response_type\") String responseType,\n                                  @RequestParam(\"client_id\") long clientId,\n                                  @RequestParam(\"redirect_uri\") String redirectUri,\n                                  @RequestParam(name = \"scope\", required = false) String scope,\n                                  @RequestParam(name = \"state\", required = false) String state,\n                                  @RequestParam(name = \"skip_confirm\", required = false, defaultValue = \"false\") boolean skipConfirm,\n                                  @RequestParam(name = \"force_login\", required = false, defaultValue = \"false\") boolean forceLogin)", "class_method_signature": "AuthCodeGrantController.authorize(HttpServletRequest request, HttpServletResponse response, HttpSession session,\n                                  @RequestParam(\"response_type\") String responseType,\n                                  @RequestParam(\"client_id\") long clientId,\n                                  @RequestParam(\"redirect_uri\") String redirectUri,\n                                  @RequestParam(name = \"scope\", required = false) String scope,\n                                  @RequestParam(name = \"state\", required = false) String state,\n                                  @RequestParam(name = \"skip_confirm\", required = false, defaultValue = \"false\") boolean skipConfirm,\n                                  @RequestParam(name = \"force_login\", required = false, defaultValue = \"false\") boolean forceLogin)", "testcase": false, "constructor": false, "invocations": ["info", "validate", "equals", "error", "equals", "equals", "render", "buildErrorResponse", "getAppInfo", "getUser", "get", "buildLoginResponse", "setUserInfo", "getAuthorizeRelation", "getId", "getClientId", "getScope", "isPresent", "info", "getId", "getScope", "getAppInfo", "getId", "getScope", "get", "getRedirectUri", "getValue", "isBlank", "error", "getId", "getScope", "buildErrorResponse", "fromHttpUrl", "getRedirectUri", "queryParam", "isNotEmpty", "queryParam", "put", "getInstance", "setViewName", "toUriString", "info", "getId", "isPresent", "getScopes", "getScope", "buildAuthorizeResponse"]}, "repository": {"repo_id": 76773649, "url": "https://github.com/plotor/oauth4j", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 13, "size": 3513, "license": "licensed"}}