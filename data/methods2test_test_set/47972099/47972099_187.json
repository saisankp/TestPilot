{"test_class": {"identifier": "RandomSamplerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static int SOURCE_SIZE = 10000;", "modifier": "private final static", "type": "int", "declarator": "SOURCE_SIZE = 10000", "var_name": "SOURCE_SIZE"}, {"original_string": "private static KolmogorovSmirnovTest ksTest;", "modifier": "private static", "type": "KolmogorovSmirnovTest", "declarator": "ksTest", "var_name": "ksTest"}, {"original_string": "private static List<Double> source;", "modifier": "private static", "type": "List<Double>", "declarator": "source", "var_name": "source"}, {"original_string": "private final static int DEFFAULT_PARTITION_NUMBER=10;", "modifier": "private final static", "type": "int", "declarator": "DEFFAULT_PARTITION_NUMBER=10", "var_name": "DEFFAULT_PARTITION_NUMBER"}, {"original_string": "private List<Double>[] sourcePartitions = new List[DEFFAULT_PARTITION_NUMBER];", "modifier": "private", "type": "List<Double>[]", "declarator": "sourcePartitions = new List[DEFFAULT_PARTITION_NUMBER]", "var_name": "sourcePartitions"}], "file": "flink-java/src/test/java/org/apache/flink/api/java/sampling/RandomSamplerTest.java"}, "test_case": {"identifier": "testReservoirSamplerSampledSize2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReservoirSamplerSampledSize2() {\n\t\tRandomSampler<Double> sampler = new ReservoirSamplerWithoutReplacement<Double>(20000);\n\t\tIterator<Double> sampled = sampler.sample(source.iterator());\n\t\tassertTrue(\"ReservoirSamplerWithoutReplacement sampled output size should not beyond the source size.\", getSize(sampled) == SOURCE_SIZE);\n\t}", "signature": "void testReservoirSamplerSampledSize2()", "full_signature": "@Test public void testReservoirSamplerSampledSize2()", "class_method_signature": "RandomSamplerTest.testReservoirSamplerSampledSize2()", "testcase": true, "constructor": false, "invocations": ["sample", "iterator", "assertTrue", "getSize"]}, "focal_class": {"identifier": "RandomSampler", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final static double EPSILON = 1e-5;", "modifier": "protected final static", "type": "double", "declarator": "EPSILON = 1e-5", "var_name": "EPSILON"}, {"original_string": "protected final Iterator<T> EMPTY_ITERABLE = new SampledIterator<T>() {\n\t\t@Override\n\t\tpublic boolean hasNext() {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic T next() {\n\t\t\treturn null;\n\t\t}\n\t};", "modifier": "protected final", "type": "Iterator<T>", "declarator": "EMPTY_ITERABLE = new SampledIterator<T>() {\n\t\t@Override\n\t\tpublic boolean hasNext() {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic T next() {\n\t\t\treturn null;\n\t\t}\n\t}", "var_name": "EMPTY_ITERABLE"}], "methods": [{"identifier": "sample", "parameters": "(Iterator<T> input)", "modifiers": "public abstract", "return": "Iterator<T>", "signature": "Iterator<T> sample(Iterator<T> input)", "full_signature": "public abstract Iterator<T> sample(Iterator<T> input)", "class_method_signature": "RandomSampler.sample(Iterator<T> input)", "testcase": false, "constructor": false}], "file": "flink-java/src/main/java/org/apache/flink/api/java/sampling/RandomSampler.java"}, "focal_method": {"identifier": "sample", "parameters": "(Iterator<T> input)", "modifiers": "public abstract", "return": "Iterator<T>", "body": "public abstract Iterator<T> sample(Iterator<T> input);", "signature": "Iterator<T> sample(Iterator<T> input)", "full_signature": "public abstract Iterator<T> sample(Iterator<T> input)", "class_method_signature": "RandomSampler.sample(Iterator<T> input)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}