{"test_class": {"identifier": "TestKinectRecognizer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger\n            .getLogger(TestKinectRecognizer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger\n            .getLogger(TestKinectRecognizer.class)", "var_name": "LOGGER"}], "file": "org.jvoicexml.implementation.kinect/src/test/java/org/jvoicexml/implementation/kinect/TestKinectRecognizer.java"}, "test_case": {"identifier": "testStartRecognition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStartRecognition() throws Exception {\n        final KinectSpokenInput input = new KinectSpokenInput();\n        final MockSpokenInputListener listener = new MockSpokenInputListener();\n        input.addListener(listener);\n        final KinectRecognizer recognizer = new KinectRecognizer(input);\n        recognizer.allocate();\n        recognizer.startRecognition();\n        LOGGER.info(\"Say 'FORWARD'!\");\n        listener.waitSize(1, 10000);\n        final SpokenInputEvent event = listener.get(0);\n        final InputEvent inputEvent = (InputEvent) event;\n        final KinectRecognitionResult result = (KinectRecognitionResult) inputEvent\n                .getInputResult();\n        Assert.assertEquals(\"FORWARD\", result.getUtterance());\n    }", "signature": "void testStartRecognition()", "full_signature": "@Test public void testStartRecognition()", "class_method_signature": "TestKinectRecognizer.testStartRecognition()", "testcase": true, "constructor": false, "invocations": ["addListener", "allocate", "startRecognition", "info", "waitSize", "get", "getInputResult", "assertEquals", "getUtterance"]}, "focal_class": {"identifier": "KinectRecognizer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger\n            .getLogger(KinectRecognizer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger\n            .getLogger(KinectRecognizer.class)", "var_name": "LOGGER"}, {"original_string": "private long handle;", "modifier": "private", "type": "long", "declarator": "handle", "var_name": "handle"}, {"original_string": "private KinectRecognitionThread recognitionThread;", "modifier": "private", "type": "KinectRecognitionThread", "declarator": "recognitionThread", "var_name": "recognitionThread"}, {"original_string": "private boolean isRecognizing;", "modifier": "private", "type": "boolean", "declarator": "isRecognizing", "var_name": "isRecognizing"}, {"original_string": "private final KinectSpokenInput input;", "modifier": "private final", "type": "KinectSpokenInput", "declarator": "input", "var_name": "input"}], "methods": [{"identifier": "KinectRecognizer", "parameters": "(final KinectSpokenInput spokenInput)", "modifiers": "public", "return": "", "signature": " KinectRecognizer(final KinectSpokenInput spokenInput)", "full_signature": "public  KinectRecognizer(final KinectSpokenInput spokenInput)", "class_method_signature": "KinectRecognizer.KinectRecognizer(final KinectSpokenInput spokenInput)", "testcase": false, "constructor": true}, {"identifier": "allocate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void allocate()", "full_signature": "public void allocate()", "class_method_signature": "KinectRecognizer.allocate()", "testcase": false, "constructor": false}, {"identifier": "kinectAllocate", "parameters": "()", "modifiers": "private native", "return": "long", "signature": "long kinectAllocate()", "full_signature": "private native long kinectAllocate()", "class_method_signature": "KinectRecognizer.kinectAllocate()", "testcase": false, "constructor": false}, {"identifier": "isAllocated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllocated()", "full_signature": "public boolean isAllocated()", "class_method_signature": "KinectRecognizer.isAllocated()", "testcase": false, "constructor": false}, {"identifier": "startRecognition", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startRecognition()", "full_signature": "public void startRecognition()", "class_method_signature": "KinectRecognizer.startRecognition()", "testcase": false, "constructor": false}, {"identifier": "recognize", "parameters": "()", "modifiers": "", "return": "RecognitionResult", "signature": "RecognitionResult recognize()", "full_signature": " RecognitionResult recognize()", "class_method_signature": "KinectRecognizer.recognize()", "testcase": false, "constructor": false}, {"identifier": "kinectRecognizeSpeech", "parameters": "(long handle)", "modifiers": "private native", "return": "RecognitionResult", "signature": "RecognitionResult kinectRecognizeSpeech(long handle)", "full_signature": "private native RecognitionResult kinectRecognizeSpeech(long handle)", "class_method_signature": "KinectRecognizer.kinectRecognizeSpeech(long handle)", "testcase": false, "constructor": false}, {"identifier": "reportResult", "parameters": "(final RecognitionResult result)", "modifiers": "", "return": "void", "signature": "void reportResult(final RecognitionResult result)", "full_signature": " void reportResult(final RecognitionResult result)", "class_method_signature": "KinectRecognizer.reportResult(final RecognitionResult result)", "testcase": false, "constructor": false}, {"identifier": "parseSml", "parameters": "(final String sml)", "modifiers": "private", "return": "SmlInterpretationExtractor", "signature": "SmlInterpretationExtractor parseSml(final String sml)", "full_signature": "private SmlInterpretationExtractor parseSml(final String sml)", "class_method_signature": "KinectRecognizer.parseSml(final String sml)", "testcase": false, "constructor": false}, {"identifier": "reportResult", "parameters": "(final KinectRecognizerException e)", "modifiers": "", "return": "void", "signature": "void reportResult(final KinectRecognizerException e)", "full_signature": " void reportResult(final KinectRecognizerException e)", "class_method_signature": "KinectRecognizer.reportResult(final KinectRecognizerException e)", "testcase": false, "constructor": false}, {"identifier": "isRecognizing", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRecognizing()", "full_signature": "public boolean isRecognizing()", "class_method_signature": "KinectRecognizer.isRecognizing()", "testcase": false, "constructor": false}, {"identifier": "stopRecognition", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopRecognition()", "full_signature": "public void stopRecognition()", "class_method_signature": "KinectRecognizer.stopRecognition()", "testcase": false, "constructor": false}, {"identifier": "kinectStopRecognition", "parameters": "(long handle)", "modifiers": "private native", "return": "void", "signature": "void kinectStopRecognition(long handle)", "full_signature": "private native void kinectStopRecognition(long handle)", "class_method_signature": "KinectRecognizer.kinectStopRecognition(long handle)", "testcase": false, "constructor": false}, {"identifier": "deallocate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deallocate()", "full_signature": "public void deallocate()", "class_method_signature": "KinectRecognizer.deallocate()", "testcase": false, "constructor": false}, {"identifier": "kinectDeallocate", "parameters": "(long handle)", "modifiers": "private native", "return": "void", "signature": "void kinectDeallocate(long handle)", "full_signature": "private native void kinectDeallocate(long handle)", "class_method_signature": "KinectRecognizer.kinectDeallocate(long handle)", "testcase": false, "constructor": false}, {"identifier": "finalize", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void finalize()", "full_signature": "@Override protected void finalize()", "class_method_signature": "KinectRecognizer.finalize()", "testcase": false, "constructor": false}], "file": "org.jvoicexml.implementation.kinect/src/main/java/org/jvoicexml/implementation/kinect/KinectRecognizer.java"}, "focal_method": {"identifier": "startRecognition", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void startRecognition() {\n        recognitionThread = new KinectRecognitionThread(this);\n        recognitionThread.start();\n        isRecognizing = true;\n    }", "signature": "void startRecognition()", "full_signature": "public void startRecognition()", "class_method_signature": "KinectRecognizer.startRecognition()", "testcase": false, "constructor": false, "invocations": ["start"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}