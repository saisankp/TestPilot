{"test_class": {"identifier": "ProjectServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n\tProjectServiceImpl projectService;", "modifier": "@InjectMocks", "type": "ProjectServiceImpl", "declarator": "projectService", "var_name": "projectService"}, {"original_string": "@Mock\n\tProjectRepository projectRepository;", "modifier": "@Mock", "type": "ProjectRepository", "declarator": "projectRepository", "var_name": "projectRepository"}, {"original_string": "private final String ORGANIZATION1 = \"organization1\";", "modifier": "private final", "type": "String", "declarator": "ORGANIZATION1 = \"organization1\"", "var_name": "ORGANIZATION1"}, {"original_string": "private final String LANGUAGE1 = \"JAVA\";", "modifier": "private final", "type": "String", "declarator": "LANGUAGE1 = \"JAVA\"", "var_name": "LANGUAGE1"}], "file": "catwatch-backend/src/test/java/org/zalando/catwatch/backend/service/ProjectServiceImplTest.java"}, "test_case": {"identifier": "findMostRecentProjectsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void findMostRecentProjectsTest() throws Exception {\n\n\t\t// given\n\t\tDate snapshotDate = new Date(System.currentTimeMillis());\n\t\tProject p = new ProjectBuilder().snapshotDate(snapshotDate).gitHubProjectId(1).organizationName(ORGANIZATION1)\n\t\t\t\t.starsCount(1).commitsCount(2).contributorsCount(1).score(20).forksCount(0).create();\n\t\twhen(projectRepository.findProjects(ORGANIZATION1, snapshotDate, empty(), empty()))\n\t\t\t\t.thenReturn(singletonList(p));\n\t\twhen(projectRepository.findProjects(ORGANIZATION1, empty(), empty())).thenReturn(singletonList(p));\n\t\t// when\n\t\tList<Project> projectList = (List<Project>) projectService.findProjects(ORGANIZATION1, empty(), empty(),\n\t\t\t\tOptional.of(snapshotDate), empty(), empty(), empty(), empty());\n\n\t\t// then\n\t\tassertThat(projectList, hasSize(1));\n\t\tassertThat(projectList.get(0), equalTo(p));\n\n\t}", "signature": "void findMostRecentProjectsTest()", "full_signature": "@Test public void findMostRecentProjectsTest()", "class_method_signature": "ProjectServiceImplTest.findMostRecentProjectsTest()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "create", "forksCount", "score", "contributorsCount", "commitsCount", "starsCount", "organizationName", "gitHubProjectId", "snapshotDate", "thenReturn", "when", "findProjects", "empty", "empty", "singletonList", "thenReturn", "when", "findProjects", "empty", "empty", "singletonList", "findProjects", "empty", "empty", "of", "empty", "empty", "empty", "empty", "assertThat", "hasSize", "assertThat", "get", "equalTo"]}, "focal_class": {"identifier": "ProjectServiceImpl", "superclass": "", "interfaces": "implements ProjectService", "fields": [{"original_string": "private static final String SORT_ORDER_DESC = \"-\";", "modifier": "private static final", "type": "String", "declarator": "SORT_ORDER_DESC = \"-\"", "var_name": "SORT_ORDER_DESC"}, {"original_string": "private static final Integer DEFAULT_LIMIT = 5;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_LIMIT = 5", "var_name": "DEFAULT_LIMIT"}, {"original_string": "private static final Integer DEFAULT_OFFSET = 0;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_OFFSET = 0", "var_name": "DEFAULT_OFFSET"}, {"original_string": "private final ProjectRepository projectRepository;", "modifier": "private final", "type": "ProjectRepository", "declarator": "projectRepository", "var_name": "projectRepository"}, {"original_string": "private final Environment env;", "modifier": "private final", "type": "Environment", "declarator": "env", "var_name": "env"}], "methods": [{"identifier": "ProjectServiceImpl", "parameters": "(ProjectRepository projectRepository, Environment env)", "modifiers": "@Autowired public", "return": "", "signature": " ProjectServiceImpl(ProjectRepository projectRepository, Environment env)", "full_signature": "@Autowired public  ProjectServiceImpl(ProjectRepository projectRepository, Environment env)", "class_method_signature": "ProjectServiceImpl.ProjectServiceImpl(ProjectRepository projectRepository, Environment env)", "testcase": false, "constructor": true}, {"identifier": "findProjects", "parameters": "(final String organizations, final Optional<Integer> limit,\n                                          final Optional<Integer> offset, final Optional<Date> startDate, final Optional<Date> endDate,\n                                          final Optional<String> sortBy, final Optional<String> query, final Optional<String> language)", "modifiers": "@Override public", "return": "Iterable<Project>", "signature": "Iterable<Project> findProjects(final String organizations, final Optional<Integer> limit,\n                                          final Optional<Integer> offset, final Optional<Date> startDate, final Optional<Date> endDate,\n                                          final Optional<String> sortBy, final Optional<String> query, final Optional<String> language)", "full_signature": "@Override public Iterable<Project> findProjects(final String organizations, final Optional<Integer> limit,\n                                          final Optional<Integer> offset, final Optional<Date> startDate, final Optional<Date> endDate,\n                                          final Optional<String> sortBy, final Optional<String> query, final Optional<String> language)", "class_method_signature": "ProjectServiceImpl.findProjects(final String organizations, final Optional<Integer> limit,\n                                          final Optional<Integer> offset, final Optional<Date> startDate, final Optional<Date> endDate,\n                                          final Optional<String> sortBy, final Optional<String> query, final Optional<String> language)", "testcase": false, "constructor": false}, {"identifier": "getMergedProjectList", "parameters": "(final List<Project> projectsStart, final List<Project> projectsEnd)", "modifiers": "private", "return": "List<Project>", "signature": "List<Project> getMergedProjectList(final List<Project> projectsStart, final List<Project> projectsEnd)", "full_signature": "private List<Project> getMergedProjectList(final List<Project> projectsStart, final List<Project> projectsEnd)", "class_method_signature": "ProjectServiceImpl.getMergedProjectList(final List<Project> projectsStart, final List<Project> projectsEnd)", "testcase": false, "constructor": false}, {"identifier": "getSortedResultList", "parameters": "(final List<Project> projectList, final Optional<String> sortBy)", "modifiers": "private", "return": "List<Project>", "signature": "List<Project> getSortedResultList(final List<Project> projectList, final Optional<String> sortBy)", "full_signature": "private List<Project> getSortedResultList(final List<Project> projectList, final Optional<String> sortBy)", "class_method_signature": "ProjectServiceImpl.getSortedResultList(final List<Project> projectList, final Optional<String> sortBy)", "testcase": false, "constructor": false}, {"identifier": "createMergedProject", "parameters": "(final Project startProject, final Project endProject)", "modifiers": "private", "return": "Project", "signature": "Project createMergedProject(final Project startProject, final Project endProject)", "full_signature": "private Project createMergedProject(final Project startProject, final Project endProject)", "class_method_signature": "ProjectServiceImpl.createMergedProject(final Project startProject, final Project endProject)", "testcase": false, "constructor": false}, {"identifier": "convertProjectsToMap", "parameters": "(final List<Project> projects)", "modifiers": "private", "return": "Map<Long, Project>", "signature": "Map<Long, Project> convertProjectsToMap(final List<Project> projects)", "full_signature": "private Map<Long, Project> convertProjectsToMap(final List<Project> projects)", "class_method_signature": "ProjectServiceImpl.convertProjectsToMap(final List<Project> projects)", "testcase": false, "constructor": false}, {"identifier": "getOrganizations", "parameters": "(String organizations)", "modifiers": "private", "return": "Iterable<String>", "signature": "Iterable<String> getOrganizations(String organizations)", "full_signature": "private Iterable<String> getOrganizations(String organizations)", "class_method_signature": "ProjectServiceImpl.getOrganizations(String organizations)", "testcase": false, "constructor": false}, {"identifier": "getOrganizationConfig", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getOrganizationConfig()", "full_signature": "private String getOrganizationConfig()", "class_method_signature": "ProjectServiceImpl.getOrganizationConfig()", "testcase": false, "constructor": false}, {"identifier": "isSortOrderAscending", "parameters": "(final Optional<String> sortBy)", "modifiers": "private", "return": "boolean", "signature": "boolean isSortOrderAscending(final Optional<String> sortBy)", "full_signature": "private boolean isSortOrderAscending(final Optional<String> sortBy)", "class_method_signature": "ProjectServiceImpl.isSortOrderAscending(final Optional<String> sortBy)", "testcase": false, "constructor": false}, {"identifier": "getProjectSortComparator", "parameters": "(final Optional<String> sortBy, final boolean sortOrderAscending)", "modifiers": "private", "return": "Comparator<Project>", "signature": "Comparator<Project> getProjectSortComparator(final Optional<String> sortBy, final boolean sortOrderAscending)", "full_signature": "private Comparator<Project> getProjectSortComparator(final Optional<String> sortBy, final boolean sortOrderAscending)", "class_method_signature": "ProjectServiceImpl.getProjectSortComparator(final Optional<String> sortBy, final boolean sortOrderAscending)", "testcase": false, "constructor": false}], "file": "catwatch-backend/src/main/java/org/zalando/catwatch/backend/service/ProjectServiceImpl.java"}, "focal_method": {"identifier": "findProjects", "parameters": "(final String organizations, final Optional<Integer> limit,\n                                          final Optional<Integer> offset, final Optional<Date> startDate, final Optional<Date> endDate,\n                                          final Optional<String> sortBy, final Optional<String> query, final Optional<String> language)", "modifiers": "@Override public", "return": "Iterable<Project>", "body": "@Override\n    public Iterable<Project> findProjects(final String organizations, final Optional<Integer> limit,\n                                          final Optional<Integer> offset, final Optional<Date> startDate, final Optional<Date> endDate,\n                                          final Optional<String> sortBy, final Optional<String> query, final Optional<String> language) {\n\n        List<Project> resultList = new ArrayList<>();\n        for (String organization : getOrganizations(organizations)) {\n            if (startDate.isPresent() && endDate.isPresent()) {\n                List<Project> startProjects = projectRepository.findProjects(organization, startDate.get(), query,language);\n                List<Project> endProjects = projectRepository.findProjects(organization, endDate.get(), query, language);\n                resultList.addAll(getMergedProjectList(startProjects, endProjects));\n            } else if (startDate.isPresent() && !endDate.isPresent()) {\n                List<Project> startProjects = projectRepository.findProjects(organization, startDate.get(), query,language);\n                List<Project> endProjects = projectRepository.findProjects(organization, query,language);\n                resultList.addAll(getMergedProjectList(startProjects, endProjects));\n            } else if (!startDate.isPresent() && endDate.isPresent()) {\n                List<Project> projects = projectRepository.findProjects(organization, endDate.get(), query, language);\n                resultList.addAll(projects);\n            } else {\n                List<Project> projects = projectRepository.findProjects(organization, query, language);\n                resultList.addAll(projects);\n            }\n        }\n\n        resultList = getSortedResultList(resultList, sortBy);\n\n        Integer limitVal = limit.orElse(DEFAULT_LIMIT);\n        Integer offsetVal = offset.orElse(DEFAULT_OFFSET);\n\n        return resultList.stream().skip(offsetVal).limit(limitVal).collect(Collectors.toList());\n    }", "signature": "Iterable<Project> findProjects(final String organizations, final Optional<Integer> limit,\n                                          final Optional<Integer> offset, final Optional<Date> startDate, final Optional<Date> endDate,\n                                          final Optional<String> sortBy, final Optional<String> query, final Optional<String> language)", "full_signature": "@Override public Iterable<Project> findProjects(final String organizations, final Optional<Integer> limit,\n                                          final Optional<Integer> offset, final Optional<Date> startDate, final Optional<Date> endDate,\n                                          final Optional<String> sortBy, final Optional<String> query, final Optional<String> language)", "class_method_signature": "ProjectServiceImpl.findProjects(final String organizations, final Optional<Integer> limit,\n                                          final Optional<Integer> offset, final Optional<Date> startDate, final Optional<Date> endDate,\n                                          final Optional<String> sortBy, final Optional<String> query, final Optional<String> language)", "testcase": false, "constructor": false, "invocations": ["getOrganizations", "isPresent", "isPresent", "findProjects", "get", "findProjects", "get", "addAll", "getMergedProjectList", "isPresent", "isPresent", "findProjects", "get", "findProjects", "addAll", "getMergedProjectList", "isPresent", "isPresent", "findProjects", "get", "addAll", "findProjects", "addAll", "getSortedResultList", "orElse", "orElse", "collect", "limit", "skip", "stream", "toList"]}, "repository": {"repo_id": 35957836, "url": "https://github.com/zalando-incubator/catwatch", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 55, "size": 1999, "license": "licensed"}}