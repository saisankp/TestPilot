{"test_class": {"identifier": "RateLimitProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    protected CamelContext camelContext;", "modifier": "@Autowired\n    protected", "type": "CamelContext", "declarator": "camelContext", "var_name": "camelContext"}, {"original_string": "@EndpointInject(uri = \"mock:checkAuth\")\n    protected MockEndpoint checkAuth;", "modifier": "@EndpointInject(uri = \"mock:checkAuth\")\n    protected", "type": "MockEndpoint", "declarator": "checkAuth", "var_name": "checkAuth"}, {"original_string": "@EndpointInject(uri = \"mock:checkRate\")\n    protected MockEndpoint checkRate;", "modifier": "@EndpointInject(uri = \"mock:checkRate\")\n    protected", "type": "MockEndpoint", "declarator": "checkRate", "var_name": "checkRate"}, {"original_string": "@EndpointInject(uri = \"mock:testMessage\")\n    protected MockEndpoint testMessage;", "modifier": "@EndpointInject(uri = \"mock:testMessage\")\n    protected", "type": "MockEndpoint", "declarator": "testMessage", "var_name": "testMessage"}, {"original_string": "@EndpointInject(uri = \"mock:handleException\")\n    protected MockEndpoint handleException;", "modifier": "@EndpointInject(uri = \"mock:handleException\")\n    protected", "type": "MockEndpoint", "declarator": "handleException", "var_name": "handleException"}, {"original_string": "@Produce(uri = \"direct:test\")\n    protected ProducerTemplate producerTemplate;", "modifier": "@Produce(uri = \"direct:test\")\n    protected", "type": "ProducerTemplate", "declarator": "producerTemplate", "var_name": "producerTemplate"}], "file": "exposure-engine/gateway-rate-limits-manager/src/test/java/com/alu/e3/rate/camel/RateLimitProcessorTest.java"}, "test_case": {"identifier": "testRateKO", "parameters": "()", "modifiers": "@Test @DirtiesContext public", "return": "void", "body": "@Test\n\t@DirtiesContext\n\tpublic void testRateKO() throws Exception {\n\t\tAuthIdentity authIdentity = new AuthIdentity();\n\t\tAuth auth = new Auth();\n\t\tauth.setId(\"ko\");\n\t\tauthIdentity.setAuth(auth);\n\n\t\tAuthProcessorMock authProcessor =  new AuthProcessorMock(authIdentity);\n\n\t\tcheckAuth.whenAnyExchangeReceived(authProcessor);\n\n\t\tRateLimitProcessor rateProcessor = new RateLimitProcessor();\n\t\trateProcessor.setGatewayRateMger(new IGatewayRateManager() {\n\n\t\t\t@Override\n\t\t\tpublic LimitCheckResult isAllowed(AuthIdentity authIdentity, boolean isTDREnabled) {\n\t\t\t\tLimitCheckResult result = new LimitCheckResult();\n\t\t\t\tresult.setActionType(ActionType.REJECT);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t});\n\n\t\tcheckRate.whenAnyExchangeReceived(rateProcessor);\n\n\t\ttestMessage.setExpectedMessageCount(0);\n\t\ttestMessage.allMessages().body().isNull();\n\n\t\thandleException.setExpectedMessageCount(1);\n\t\thandleException.message(0).property(\"CamelExceptionCaught\").equals(\"com.alu.e3.rate.RatePolicyRuntimeException: Rate limit exceeded\");\n\n\t\tproducerTemplate.requestBody(String.class);\n\n\t\ttestMessage.assertIsSatisfied();\t\n\t}", "signature": "void testRateKO()", "full_signature": "@Test @DirtiesContext public void testRateKO()", "class_method_signature": "RateLimitProcessorTest.testRateKO()", "testcase": true, "constructor": false, "invocations": ["setId", "setAuth", "whenAnyExchangeReceived", "setGatewayRateMger", "setActionType", "whenAnyExchangeReceived", "setExpectedMessageCount", "isNull", "body", "allMessages", "setExpectedMessageCount", "equals", "property", "message", "requestBody", "assertIsSatisfied"]}, "focal_class": {"identifier": "RateLimitProcessor", "superclass": "", "interfaces": "implements Processor", "fields": [{"original_string": "protected IGatewayRateManager rateManager;", "modifier": "protected", "type": "IGatewayRateManager", "declarator": "rateManager", "var_name": "rateManager"}, {"original_string": "private final static Logger log = LoggerFactory.getLogger(RateLimitProcessor.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RateLimitProcessor.class)", "var_name": "log"}], "methods": [{"identifier": "getGtwRateMger", "parameters": "()", "modifiers": "public", "return": "IGatewayRateManager", "signature": "IGatewayRateManager getGtwRateMger()", "full_signature": "public IGatewayRateManager getGtwRateMger()", "class_method_signature": "RateLimitProcessor.getGtwRateMger()", "testcase": false, "constructor": false}, {"identifier": "setGatewayRateMger", "parameters": "(IGatewayRateManager gtwRateMger)", "modifiers": "public", "return": "void", "signature": "void setGatewayRateMger(IGatewayRateManager gtwRateMger)", "full_signature": "public void setGatewayRateMger(IGatewayRateManager gtwRateMger)", "class_method_signature": "RateLimitProcessor.setGatewayRateMger(IGatewayRateManager gtwRateMger)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Exchange exchange)", "modifiers": "@Override public", "return": "void", "signature": "void process(Exchange exchange)", "full_signature": "@Override public void process(Exchange exchange)", "class_method_signature": "RateLimitProcessor.process(Exchange exchange)", "testcase": false, "constructor": false}], "file": "exposure-engine/gateway-rate-limits-manager/src/main/java/com/alu/e3/rate/camel/RateLimitProcessor.java"}, "focal_method": {"identifier": "setGatewayRateMger", "parameters": "(IGatewayRateManager gtwRateMger)", "modifiers": "public", "return": "void", "body": "public void setGatewayRateMger(IGatewayRateManager gtwRateMger) {\n\t\tif(log.isDebugEnabled()) {\n\t\t\tlog.debug(\"GatewayRateManager set in RateLimit processor\");\n\t\t}\n\t\tthis.rateManager = gtwRateMger;\n\t}", "signature": "void setGatewayRateMger(IGatewayRateManager gtwRateMger)", "full_signature": "public void setGatewayRateMger(IGatewayRateManager gtwRateMger)", "class_method_signature": "RateLimitProcessor.setGatewayRateMger(IGatewayRateManager gtwRateMger)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug"]}, "repository": {"repo_id": 5239065, "url": "https://github.com/apigrove/apigrove", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 118, "size": 215144, "license": "licensed"}}