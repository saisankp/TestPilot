{"test_class": {"identifier": "DriverInjectionTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/driverspecificationandinjection/DriverInjectionTest.java"}, "test_case": {"identifier": "injectDriver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void injectDriver() throws Exception {\n        setRevisionTo(\"d8ee55deecf37f5052d27807df691a7b70ec50f2\");\n        ServiceTemplateId id = new ServiceTemplateId(\"http://winery.opentosca.org/test/servicetemplates/ponyuniverse/daspecifier\", \"DASpecificationTest\", false);\n        TTopologyTemplate topologyTemplate = this.repository.getElement(id).getTopologyTemplate();\n\n        TTopologyTemplate tTopologyTemplate = DriverInjection.injectDriver(topologyTemplate);\n\n        TNodeTemplate nodeTemplateWithAbstractDA = tTopologyTemplate.getNodeTemplate(\"shetland_pony\");\n        List<TDeploymentArtifact> deploymentArtifacts = nodeTemplateWithAbstractDA.getDeploymentArtifacts().getDeploymentArtifact();\n        List<String> deploymentArtifactNames = new ArrayList<>();\n        deploymentArtifacts.stream().forEach(da -> deploymentArtifactNames.add(da.getName()));\n\n        TRelationshipTemplate relationshipTemplate = tTopologyTemplate.getRelationshipTemplate(\"con_71\");\n\n        assertEquals(2, deploymentArtifacts.size());\n        assertTrue(deploymentArtifactNames.contains(\"WesternEquipment_Pony\"));\n        assertTrue(deploymentArtifactNames.contains(\"DressageEquipment_Pony\"));\n        assertEquals(\"org.test.dressagedriver\", ModelUtilities.getPropertiesKV(relationshipTemplate).get(\"Driver\"));\n    }", "signature": "void injectDriver()", "full_signature": "@Test public void injectDriver()", "class_method_signature": "DriverInjectionTest.injectDriver()", "testcase": true, "constructor": false, "invocations": ["setRevisionTo", "getTopologyTemplate", "getElement", "injectDriver", "getNodeTemplate", "getDeploymentArtifact", "getDeploymentArtifacts", "forEach", "stream", "add", "getName", "getRelationshipTemplate", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertEquals", "get", "getPropertiesKV"]}, "focal_class": {"identifier": "DriverInjection", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "injectDriver", "parameters": "(TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "TTopologyTemplate", "signature": "TTopologyTemplate injectDriver(TTopologyTemplate topologyTemplate)", "full_signature": "public static TTopologyTemplate injectDriver(TTopologyTemplate topologyTemplate)", "class_method_signature": "DriverInjection.injectDriver(TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "setDriverProperty", "parameters": "(TRelationshipTemplate relationshipTemplate, TDeploymentArtifact driverDeploymentArtifact)", "modifiers": "public static", "return": "void", "signature": "void setDriverProperty(TRelationshipTemplate relationshipTemplate, TDeploymentArtifact driverDeploymentArtifact)", "full_signature": "public static void setDriverProperty(TRelationshipTemplate relationshipTemplate, TDeploymentArtifact driverDeploymentArtifact)", "class_method_signature": "DriverInjection.setDriverProperty(TRelationshipTemplate relationshipTemplate, TDeploymentArtifact driverDeploymentArtifact)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/driverspecificationandinjection/DriverInjection.java"}, "focal_method": {"identifier": "injectDriver", "parameters": "(TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "TTopologyTemplate", "body": "public static TTopologyTemplate injectDriver(TTopologyTemplate topologyTemplate) throws Exception {\n\n        List<TNodeTemplate> nodeTemplatesWithAbstractDA = DASpecification.getNodeTemplatesWithAbstractDAs(topologyTemplate);\n\n        for (TNodeTemplate nodeTemplateWithAbstractDA : nodeTemplatesWithAbstractDA) {\n            List<TDeploymentArtifact> abstractDAsAttachedToNodeTemplate = nodeTemplateWithAbstractDA.getDeploymentArtifacts().getDeploymentArtifact().stream()\n                .filter(da -> DASpecification.getArtifactTypeOfDA(da).getAbstract() == TBoolean.YES)\n                .collect(Collectors.toList());\n            for (TDeploymentArtifact abstractDA : abstractDAsAttachedToNodeTemplate) {\n                Map<TRelationshipTemplate, TNodeTemplate> nodeTemplatesWithConcreteDA = DASpecification.getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(nodeTemplateWithAbstractDA, abstractDA, topologyTemplate);\n\n                if (nodeTemplatesWithConcreteDA != null) {\n                    for (TRelationshipTemplate relationshipTemplate : nodeTemplatesWithConcreteDA.keySet()) {\n                        TDeploymentArtifact concreteDeploymentArtifact = DASpecification.getSuitableConcreteDA(abstractDA, nodeTemplatesWithConcreteDA.get(relationshipTemplate));\n                        nodeTemplateWithAbstractDA.getDeploymentArtifacts().getDeploymentArtifact().add(concreteDeploymentArtifact);\n                        setDriverProperty(relationshipTemplate, concreteDeploymentArtifact);\n                    }\n                    //concrete DAs from the delivering Node Template must not be deleted. They are uploaded by the OpenTOSCA Container but not used.\n                    nodeTemplateWithAbstractDA.getDeploymentArtifacts().getDeploymentArtifact().remove(abstractDA);\n                } else {\n                    throw new WineryRepositoryException(\"No concrete DA found for the abstract DA\");\n                }\n            }\n        }\n        return topologyTemplate;\n    }", "signature": "TTopologyTemplate injectDriver(TTopologyTemplate topologyTemplate)", "full_signature": "public static TTopologyTemplate injectDriver(TTopologyTemplate topologyTemplate)", "class_method_signature": "DriverInjection.injectDriver(TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false, "invocations": ["getNodeTemplatesWithAbstractDAs", "collect", "filter", "stream", "getDeploymentArtifact", "getDeploymentArtifacts", "getAbstract", "getArtifactTypeOfDA", "toList", "getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode", "keySet", "getSuitableConcreteDA", "get", "add", "getDeploymentArtifact", "getDeploymentArtifacts", "setDriverProperty", "remove", "getDeploymentArtifact", "getDeploymentArtifacts"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}