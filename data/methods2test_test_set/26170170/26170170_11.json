{"test_class": {"identifier": "ReservationBodyReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "booking/src/test/java/org/koenighotze/jee7hotel/booking/business/json/ReservationBodyReaderTest.java"}, "test_case": {"identifier": "a_json_reservation_can_be_read", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void a_json_reservation_can_be_read() throws IOException {\n        String json = \"{\\\"guestId\\\":\\\"9999\\\",\\\"reservationNumber\\\":\\\"abc-123\\\",\\\"checkinDate\\\":\\\"2013-01-01\\\",\\\"checkoutDate\\\":\\\"2013-02-01\\\",\\\"assignedRoomId\\\":\\\"999\\\",\\\"reservationStatus\\\":\\\"CLOSED\\\",\\\"costsInEuro\\\":242.23}\";\n\n        Reservation reservation = new ReservationBodyReader(new ReservationCostCalculator()).readFrom(Reservation.class, null, null, null, null, new ByteArrayInputStream(json.getBytes()));\n        assertThat(reservation).isNotNull();\n        assertThat(reservation.getGuest()).isEqualTo(\"9999\");\n        assertThat(reservation.getReservationNumber()).isEqualTo(\"abc-123\");\n        assertThat(reservation.getCostsInEuro()).isEqualTo(new BigDecimal(\"242.23\"));\n        assertThat(reservation.getReservationStatus()).isEqualTo(OPEN);\n        assertThat(reservation.getCheckinDate()).isEqualTo(of(2013, 1, 1));\n        assertThat(reservation.getCheckoutDate()).isEqualTo(of(2013, 2, 1));\n        assertThat(reservation.getAssignedRoom()).isEqualTo(\"999\");\n    }", "signature": "void a_json_reservation_can_be_read()", "full_signature": "@Test public void a_json_reservation_can_be_read()", "class_method_signature": "ReservationBodyReaderTest.a_json_reservation_can_be_read()", "testcase": true, "constructor": false, "invocations": ["readFrom", "getBytes", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getGuest", "isEqualTo", "assertThat", "getReservationNumber", "isEqualTo", "assertThat", "getCostsInEuro", "isEqualTo", "assertThat", "getReservationStatus", "isEqualTo", "assertThat", "getCheckinDate", "of", "isEqualTo", "assertThat", "getCheckoutDate", "of", "isEqualTo", "assertThat", "getAssignedRoom"]}, "focal_class": {"identifier": "ReservationBodyReader", "superclass": "", "interfaces": "implements MessageBodyReader<Reservation>", "fields": [{"original_string": "private ReservationCostCalculator reservationCostCalculator;", "modifier": "private", "type": "ReservationCostCalculator", "declarator": "reservationCostCalculator", "var_name": "reservationCostCalculator"}], "methods": [{"identifier": "ReservationBodyReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReservationBodyReader()", "full_signature": "public  ReservationBodyReader()", "class_method_signature": "ReservationBodyReader.ReservationBodyReader()", "testcase": false, "constructor": true}, {"identifier": "ReservationBodyReader", "parameters": "(ReservationCostCalculator reservationCostCalculator)", "modifiers": "@Inject public", "return": "", "signature": " ReservationBodyReader(ReservationCostCalculator reservationCostCalculator)", "full_signature": "@Inject public  ReservationBodyReader(ReservationCostCalculator reservationCostCalculator)", "class_method_signature": "ReservationBodyReader.ReservationBodyReader(ReservationCostCalculator reservationCostCalculator)", "testcase": false, "constructor": true}, {"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "ReservationBodyReader.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Class<Reservation> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "modifiers": "@Override public", "return": "Reservation", "signature": "Reservation readFrom(Class<Reservation> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "full_signature": "@Override public Reservation readFrom(Class<Reservation> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "class_method_signature": "ReservationBodyReader.readFrom(Class<Reservation> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "testcase": false, "constructor": false}], "file": "booking/src/main/java/org/koenighotze/jee7hotel/booking/business/json/ReservationBodyReader.java"}, "focal_method": {"identifier": "readFrom", "parameters": "(Class<Reservation> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "modifiers": "@Override public", "return": "Reservation", "body": "@Override\n    public Reservation readFrom(Class<Reservation> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream) throws IOException, WebApplicationException {\n        JsonReader reader = Json.createReader(entityStream);\n\n        JsonObject jsonObject = reader.readObject();\n\n        DateTimeFormatter formatter = ofPattern(\"yyyy-MM-dd\");\n        LocalDate checkin = parse(requireNonNull(jsonObject.getString(CHECKINDATE.fieldName())), formatter);\n        LocalDate checkout = parse(requireNonNull(jsonObject.getString(CHECKOUTDATE.fieldName())), formatter);\n\n        BigDecimal cost = null;\n        if (null == jsonObject.getJsonNumber(COSTSINEURO.fieldName())) {\n            cost = reservationCostCalculator.calculateRateFor(STANDARD, checkin, checkout);\n        } else {\n            cost = jsonObject.getJsonNumber(COSTSINEURO.fieldName()).bigDecimalValue();\n        }\n\n        return new Reservation(requireNonNull(jsonObject.getString(GUESTID.fieldName())),\n                jsonObject.getString(RESERVATIONNUMBER.fieldName(), \"\"),\n                requireNonNull(jsonObject.getString(ASSIGNEDROOMID.fieldName())),\n                checkin,\n                checkout,\n                cost);\n    }", "signature": "Reservation readFrom(Class<Reservation> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "full_signature": "@Override public Reservation readFrom(Class<Reservation> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "class_method_signature": "ReservationBodyReader.readFrom(Class<Reservation> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "testcase": false, "constructor": false, "invocations": ["createReader", "readObject", "ofPattern", "parse", "requireNonNull", "getString", "fieldName", "parse", "requireNonNull", "getString", "fieldName", "getJsonNumber", "fieldName", "calculateRateFor", "bigDecimalValue", "getJsonNumber", "fieldName", "requireNonNull", "getString", "fieldName", "getString", "fieldName", "requireNonNull", "getString", "fieldName"]}, "repository": {"repo_id": 26170170, "url": "https://github.com/koenighotze/Hotel-Reservation-Tool", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 1659, "license": "licensed"}}