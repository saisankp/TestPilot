{"test_class": {"identifier": "SolarFluxCorrectionFactorCalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int endJan = 31;", "modifier": "private final", "type": "int", "declarator": "endJan = 31", "var_name": "endJan"}, {"original_string": "private final int endFeb = endJan + 28;", "modifier": "private final", "type": "int", "declarator": "endFeb = endJan + 28", "var_name": "endFeb"}, {"original_string": "private final int endMar = endFeb + 31;", "modifier": "private final", "type": "int", "declarator": "endMar = endFeb + 31", "var_name": "endMar"}, {"original_string": "private final int endApr = endMar + 30;", "modifier": "private final", "type": "int", "declarator": "endApr = endMar + 30", "var_name": "endApr"}, {"original_string": "private final int endMay = endApr + 31;", "modifier": "private final", "type": "int", "declarator": "endMay = endApr + 31", "var_name": "endMay"}, {"original_string": "private final int endJun = endMay + 30;", "modifier": "private final", "type": "int", "declarator": "endJun = endMay + 30", "var_name": "endJun"}, {"original_string": "private final int endJul = endJun + 31;", "modifier": "private final", "type": "int", "declarator": "endJul = endJun + 31", "var_name": "endJul"}, {"original_string": "private final int endAug = endJul + 31;", "modifier": "private final", "type": "int", "declarator": "endAug = endJul + 31", "var_name": "endAug"}, {"original_string": "private final int endSep = endAug + 30;", "modifier": "private final", "type": "int", "declarator": "endSep = endAug + 30", "var_name": "endSep"}, {"original_string": "private final int endOct = endSep + 31;", "modifier": "private final", "type": "int", "declarator": "endOct = endSep + 31", "var_name": "endOct"}, {"original_string": "private final int endNov = endOct + 30;", "modifier": "private final", "type": "int", "declarator": "endNov = endOct + 30", "var_name": "endNov"}, {"original_string": "private ProductData.UTC time1;", "modifier": "private", "type": "ProductData.UTC", "declarator": "time1", "var_name": "time1"}, {"original_string": "private ProductData.UTC time2;", "modifier": "private", "type": "ProductData.UTC", "declarator": "time2", "var_name": "time2"}], "file": "s3tbx-c2rcc/src/test/java/org/esa/s3tbx/c2rcc/util/SolarFluxCorrectionFactorCalculatorTest.java"}, "test_case": {"identifier": "testSolFluxCorrFactor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSolFluxCorrFactor() {\n        assertEquals(1.0351, SolarFluxCorrectionFactorCalculator.computeFactorFor(time1, time2), 1e-4);\n    }", "signature": "void testSolFluxCorrFactor()", "full_signature": "@Test public void testSolFluxCorrFactor()", "class_method_signature": "SolarFluxCorrectionFactorCalculatorTest.testSolFluxCorrFactor()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "computeFactorFor"]}, "focal_class": {"identifier": "SolarFluxCorrectionFactorCalculator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Calendar cal = GregorianCalendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ENGLISH);", "modifier": "private final static", "type": "Calendar", "declarator": "cal = GregorianCalendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ENGLISH)", "var_name": "cal"}], "methods": [{"identifier": "computeFactorFor", "parameters": "(ProductData.UTC startTime, ProductData.UTC endTime)", "modifiers": "public static", "return": "double", "signature": "double computeFactorFor(ProductData.UTC startTime, ProductData.UTC endTime)", "full_signature": "public static double computeFactorFor(ProductData.UTC startTime, ProductData.UTC endTime)", "class_method_signature": "SolarFluxCorrectionFactorCalculator.computeFactorFor(ProductData.UTC startTime, ProductData.UTC endTime)", "testcase": false, "constructor": false}, {"identifier": "computeFactorFor", "parameters": "(ProductData.UTC time)", "modifiers": "public static", "return": "double", "signature": "double computeFactorFor(ProductData.UTC time)", "full_signature": "public static double computeFactorFor(ProductData.UTC time)", "class_method_signature": "SolarFluxCorrectionFactorCalculator.computeFactorFor(ProductData.UTC time)", "testcase": false, "constructor": false}, {"identifier": "getCenterUTC", "parameters": "(ProductData.UTC start, ProductData.UTC end)", "modifiers": "public static", "return": "ProductData.UTC", "signature": "ProductData.UTC getCenterUTC(ProductData.UTC start, ProductData.UTC end)", "full_signature": "public static ProductData.UTC getCenterUTC(ProductData.UTC start, ProductData.UTC end)", "class_method_signature": "SolarFluxCorrectionFactorCalculator.getCenterUTC(ProductData.UTC start, ProductData.UTC end)", "testcase": false, "constructor": false}, {"identifier": "getDayCorrectionFactorFor", "parameters": "(int day, int year)", "modifiers": "static", "return": "double", "signature": "double getDayCorrectionFactorFor(int day, int year)", "full_signature": "static double getDayCorrectionFactorFor(int day, int year)", "class_method_signature": "SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(int day, int year)", "testcase": false, "constructor": false}, {"identifier": "getNumDaysInTheYear", "parameters": "(int year)", "modifiers": "public static synchronized", "return": "int", "signature": "int getNumDaysInTheYear(int year)", "full_signature": "public static synchronized int getNumDaysInTheYear(int year)", "class_method_signature": "SolarFluxCorrectionFactorCalculator.getNumDaysInTheYear(int year)", "testcase": false, "constructor": false}], "file": "s3tbx-c2rcc/src/main/java/org/esa/s3tbx/c2rcc/util/SolarFluxCorrectionFactorCalculator.java"}, "focal_method": {"identifier": "computeFactorFor", "parameters": "(ProductData.UTC startTime, ProductData.UTC endTime)", "modifiers": "public static", "return": "double", "body": "public static double computeFactorFor(ProductData.UTC startTime, ProductData.UTC endTime) {\n        final ProductData.UTC centerUTC = getCenterUTC(startTime, endTime);\n        return computeFactorFor(centerUTC);\n    }", "signature": "double computeFactorFor(ProductData.UTC startTime, ProductData.UTC endTime)", "full_signature": "public static double computeFactorFor(ProductData.UTC startTime, ProductData.UTC endTime)", "class_method_signature": "SolarFluxCorrectionFactorCalculator.computeFactorFor(ProductData.UTC startTime, ProductData.UTC endTime)", "testcase": false, "constructor": false, "invocations": ["getCenterUTC", "computeFactorFor"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}