{"test_class": {"identifier": "FormProviderServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    TaskService taskService;", "modifier": "@Mock", "type": "TaskService", "declarator": "taskService", "var_name": "taskService"}, {"original_string": "@Mock\n    RuntimeDataService dataService;", "modifier": "@Mock", "type": "RuntimeDataService", "declarator": "dataService", "var_name": "dataService"}, {"original_string": "@Mock\n    FormProvider formProvider;", "modifier": "@Mock", "type": "FormProvider", "declarator": "formProvider", "var_name": "formProvider"}, {"original_string": "@Mock\n    IdentityProvider identityProvider;", "modifier": "@Mock", "type": "IdentityProvider", "declarator": "identityProvider", "var_name": "identityProvider"}, {"original_string": "@Mock\n    DefinitionService bpmn2Service;", "modifier": "@Mock", "type": "DefinitionService", "declarator": "bpmn2Service", "var_name": "bpmn2Service"}, {"original_string": "@InjectMocks\n    FormProviderServiceImpl formProviderService;", "modifier": "@InjectMocks", "type": "FormProviderServiceImpl", "declarator": "formProviderService", "var_name": "formProviderService"}], "file": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/form/FormProviderServiceImplTest.java"}, "test_case": {"identifier": "testGetFormDisplayTaskWithoutProcess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetFormDisplayTaskWithoutProcess() {\n        long taskId = 1;\n        final TaskImpl task = new TaskImpl();\n        task.setId(taskId);\n        task.setName(\"TaskName\");\n        task.setTaskData(new TaskDataImpl());\n        when(taskService.execute(any(GetUserTaskCommand.class))).thenReturn(task);\n\n        final String form = formProviderService.getFormDisplayTask(1);\n\n        assertEquals(\"\", form);\n        verify(dataService, never()).getProcessesByDeploymentIdProcessId(anyString(), anyString());\n        verify(formProvider).render(eq(task.getName()), eq(task), isNull(ProcessDefinition.class), anyMap());\n    }", "signature": "void testGetFormDisplayTaskWithoutProcess()", "full_signature": "@Test public void testGetFormDisplayTaskWithoutProcess()", "class_method_signature": "FormProviderServiceImplTest.testGetFormDisplayTaskWithoutProcess()", "testcase": true, "constructor": false, "invocations": ["setId", "setName", "setTaskData", "thenReturn", "when", "execute", "any", "getFormDisplayTask", "assertEquals", "getProcessesByDeploymentIdProcessId", "verify", "never", "anyString", "anyString", "render", "verify", "eq", "getName", "eq", "isNull", "anyMap"]}, "focal_class": {"identifier": "FormProviderServiceImpl", "superclass": "", "interfaces": "implements FormProviderService", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(FormProviderServiceImpl.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FormProviderServiceImpl.class)", "var_name": "logger"}, {"original_string": "private TaskService taskService;", "modifier": "private", "type": "TaskService", "declarator": "taskService", "var_name": "taskService"}, {"original_string": "private DefinitionService bpmn2Service;", "modifier": "private", "type": "DefinitionService", "declarator": "bpmn2Service", "var_name": "bpmn2Service"}, {"original_string": "private RuntimeDataService dataService;", "modifier": "private", "type": "RuntimeDataService", "declarator": "dataService", "var_name": "dataService"}, {"original_string": "private DeploymentService deploymentService;", "modifier": "private", "type": "DeploymentService", "declarator": "deploymentService", "var_name": "deploymentService"}, {"original_string": "private IdentityProvider identityProvider;", "modifier": "private", "type": "IdentityProvider", "declarator": "identityProvider", "var_name": "identityProvider"}, {"original_string": "private Set<FormProvider> providers;", "modifier": "private", "type": "Set<FormProvider>", "declarator": "providers", "var_name": "providers"}], "methods": [{"identifier": "setTaskService", "parameters": "(TaskService taskService)", "modifiers": "public", "return": "void", "signature": "void setTaskService(TaskService taskService)", "full_signature": "public void setTaskService(TaskService taskService)", "class_method_signature": "FormProviderServiceImpl.setTaskService(TaskService taskService)", "testcase": false, "constructor": false}, {"identifier": "setBpmn2Service", "parameters": "(DefinitionService bpmn2Service)", "modifiers": "public", "return": "void", "signature": "void setBpmn2Service(DefinitionService bpmn2Service)", "full_signature": "public void setBpmn2Service(DefinitionService bpmn2Service)", "class_method_signature": "FormProviderServiceImpl.setBpmn2Service(DefinitionService bpmn2Service)", "testcase": false, "constructor": false}, {"identifier": "setDataService", "parameters": "(RuntimeDataService dataService)", "modifiers": "public", "return": "void", "signature": "void setDataService(RuntimeDataService dataService)", "full_signature": "public void setDataService(RuntimeDataService dataService)", "class_method_signature": "FormProviderServiceImpl.setDataService(RuntimeDataService dataService)", "testcase": false, "constructor": false}, {"identifier": "setDeploymentService", "parameters": "(DeploymentService deploymentService)", "modifiers": "public", "return": "void", "signature": "void setDeploymentService(DeploymentService deploymentService)", "full_signature": "public void setDeploymentService(DeploymentService deploymentService)", "class_method_signature": "FormProviderServiceImpl.setDeploymentService(DeploymentService deploymentService)", "testcase": false, "constructor": false}, {"identifier": "setProviders", "parameters": "(Set<FormProvider> providers)", "modifiers": "public", "return": "void", "signature": "void setProviders(Set<FormProvider> providers)", "full_signature": "public void setProviders(Set<FormProvider> providers)", "class_method_signature": "FormProviderServiceImpl.setProviders(Set<FormProvider> providers)", "testcase": false, "constructor": false}, {"identifier": "setIdentityProvider", "parameters": "(IdentityProvider identityProvider)", "modifiers": "public", "return": "void", "signature": "void setIdentityProvider(IdentityProvider identityProvider)", "full_signature": "public void setIdentityProvider(IdentityProvider identityProvider)", "class_method_signature": "FormProviderServiceImpl.setIdentityProvider(IdentityProvider identityProvider)", "testcase": false, "constructor": false}, {"identifier": "getFormDisplayProcess", "parameters": "(String deploymentId, String processId)", "modifiers": "@Override public", "return": "String", "signature": "String getFormDisplayProcess(String deploymentId, String processId)", "full_signature": "@Override public String getFormDisplayProcess(String deploymentId, String processId)", "class_method_signature": "FormProviderServiceImpl.getFormDisplayProcess(String deploymentId, String processId)", "testcase": false, "constructor": false}, {"identifier": "getFormDisplayTask", "parameters": "(long taskId)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "String", "signature": "String getFormDisplayTask(long taskId)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public String getFormDisplayTask(long taskId)", "class_method_signature": "FormProviderServiceImpl.getFormDisplayTask(long taskId)", "testcase": false, "constructor": false}, {"identifier": "getMarshallerContext", "parameters": "(String deploymentId, String processId)", "modifiers": "protected", "return": "ContentMarshallerContext", "signature": "ContentMarshallerContext getMarshallerContext(String deploymentId, String processId)", "full_signature": "protected ContentMarshallerContext getMarshallerContext(String deploymentId, String processId)", "class_method_signature": "FormProviderServiceImpl.getMarshallerContext(String deploymentId, String processId)", "testcase": false, "constructor": false}, {"identifier": "getMarshallerContext", "parameters": "(Task task)", "modifiers": "protected", "return": "ContentMarshallerContext", "signature": "ContentMarshallerContext getMarshallerContext(Task task)", "full_signature": "protected ContentMarshallerContext getMarshallerContext(Task task)", "class_method_signature": "FormProviderServiceImpl.getMarshallerContext(Task task)", "testcase": false, "constructor": false}], "file": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/form/FormProviderServiceImpl.java"}, "focal_method": {"identifier": "getFormDisplayTask", "parameters": "(long taskId)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "String", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public String getFormDisplayTask(long taskId) {\n        Task task = taskService.execute(new GetUserTaskCommand(identityProvider.getName(), taskId));\n        if (task == null) {\n            return \"\";\n        }\n        String name = task.getName();\n        final String deploymentId = task.getTaskData().getDeploymentId();\n        final String processId = task.getTaskData().getProcessId();\n        ProcessDefinition processDesc = null;\n        if(deploymentId != null && processId != null) {\n            processDesc = dataService.getProcessesByDeploymentIdProcessId(deploymentId, processId);\n        }\n        Map<String, Object> renderContext = new HashMap<String, Object>();\n\n        ContentMarshallerContext marshallerContext = getMarshallerContext(task);\n        // read task variables\n        Object input = null;\n        long inputContentId = task.getTaskData().getDocumentContentId();\n        if (inputContentId != -1) {\n            Content content = taskService.getContentById(inputContentId);\n            input = ContentMarshallerHelper.unmarshall(content.getContent(), marshallerContext.getEnvironment(), marshallerContext.getClassloader());\n        }\n        if (input == null) {\n            input = new HashMap<String, Object>();\n        }\n\n        Object output = null;\n        long outputContentId = task.getTaskData().getOutputContentId();\n        if (outputContentId != -1) {\n            Content content = taskService.getContentById(outputContentId);\n            output = ContentMarshallerHelper.unmarshall(content.getContent(), marshallerContext.getEnvironment(), marshallerContext.getClassloader());\n        }\n        if (output == null) {\n            output = new HashMap<String, Object>();\n        }\n\n        // prepare task variables for rendering\n        Map<String, Object> finalOutput = new HashMap<String, Object>();\n\n        if (processId != null && !processId.equals(\"\")) {\n            // If task has an associated process let's merge the outputs\n            Map<String, String> taskOutputMappings = bpmn2Service.getTaskOutputMappings(deploymentId, processId, task.getName());\n            if (taskOutputMappings == null) {\n                taskOutputMappings = new HashMap<String, String>();\n            }\n\n            // I need to replace the value that comes from the\n            //process mappings with the value that can be stored in the output Content\n            for (String key : taskOutputMappings.keySet()) {\n                Object value = ((Map<String, Object>) output).get(key);\n                if (value == null) {\n                    value = \"\";\n                }\n                finalOutput.put(key, value);\n            }\n\n        } else if (output instanceof Map && !((Map)output).isEmpty()) {\n            // If the task doesn't belongs to any project BUT it has outputs let's add them directly to the rendering context.\n            finalOutput.putAll( (Map<String, Object>) output );\n        }\n\n        // merge template with process variables\n        renderContext.put(\"task\", task);\n        renderContext.put(\"marshallerContext\", marshallerContext);\n\n        // add all inputs as direct entries\n        if (input instanceof Map) {\n            renderContext.put(\"inputs\", input);\n            for (Map.Entry<String, Object> inputVar : ((Map<String, Object>) input).entrySet()) {\n                renderContext.put(inputVar.getKey(), inputVar.getValue());\n            }\n        } else {\n            renderContext.put(\"input\", input);\n        }\n\n        // add all outputs as direct entries\n        renderContext.put(\"outputs\", finalOutput);\n        for (Map.Entry<String, Object> outputVar : ((Map<String, Object>) finalOutput).entrySet()) {\n            renderContext.put(outputVar.getKey(), outputVar.getValue());\n        }\n\n        // find form\n        for (FormProvider provider : providers) {\n            String template = provider.render(name, task, processDesc, renderContext);\n            if (!StringUtils.isEmpty(template)) {\n                return template;\n            }\n        }\n\n        logger.warn(\"Unable to find form to render for task '{}' on process '{}'\", name, processDesc == null ? \"\" : processDesc.getName());\n        return \"\";\n    }", "signature": "String getFormDisplayTask(long taskId)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public String getFormDisplayTask(long taskId)", "class_method_signature": "FormProviderServiceImpl.getFormDisplayTask(long taskId)", "testcase": false, "constructor": false, "invocations": ["execute", "getName", "getName", "getDeploymentId", "getTaskData", "getProcessId", "getTaskData", "getProcessesByDeploymentIdProcessId", "getMarshallerContext", "getDocumentContentId", "getTaskData", "getContentById", "unmarshall", "getContent", "getEnvironment", "getClassloader", "getOutputContentId", "getTaskData", "getContentById", "unmarshall", "getContent", "getEnvironment", "getClassloader", "equals", "getTaskOutputMappings", "getName", "keySet", "get", "put", "isEmpty", "putAll", "put", "put", "put", "entrySet", "put", "getKey", "getValue", "put", "put", "entrySet", "put", "getKey", "getValue", "render", "isEmpty", "warn", "getName"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}