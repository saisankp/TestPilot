{"test_class": {"identifier": "MultiRuntimeExceptionTest", "superclass": "", "interfaces": "", "fields": [], "file": "culvert-main/src/test/java/com/bah/culvert/util/MultiRuntimeExceptionTest.java"}, "test_case": {"identifier": "testEmptyMultiRuntimeException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEmptyMultiRuntimeException() {\n    List<Throwable> list = new ArrayList<Throwable>();\n    Assert.assertNotNull(MultiRuntimeException.get(null));\n    Assert.assertNotNull(MultiRuntimeException.get(list));\n  }", "signature": "void testEmptyMultiRuntimeException()", "full_signature": "@Test public void testEmptyMultiRuntimeException()", "class_method_signature": "MultiRuntimeExceptionTest.testEmptyMultiRuntimeException()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "get", "assertNotNull", "get"]}, "focal_class": {"identifier": "MultiRuntimeException", "superclass": "extends RuntimeException", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "MultiRuntimeException", "parameters": "(String message, Throwable firstSource)", "modifiers": "private", "return": "", "signature": " MultiRuntimeException(String message, Throwable firstSource)", "full_signature": "private  MultiRuntimeException(String message, Throwable firstSource)", "class_method_signature": "MultiRuntimeException.MultiRuntimeException(String message, Throwable firstSource)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(Collection<Throwable> sources)", "modifiers": "public static", "return": "MultiRuntimeException", "signature": "MultiRuntimeException get(Collection<Throwable> sources)", "full_signature": "public static MultiRuntimeException get(Collection<Throwable> sources)", "class_method_signature": "MultiRuntimeException.get(Collection<Throwable> sources)", "testcase": false, "constructor": false}], "file": "culvert-main/src/main/java/com/bah/culvert/util/MultiRuntimeException.java"}, "focal_method": {"identifier": "get", "parameters": "(Collection<Throwable> sources)", "modifiers": "public static", "return": "MultiRuntimeException", "body": "public static MultiRuntimeException get(Collection<Throwable> sources) {\n    if (sources == null || sources.size() == 0) {\n      return new MultiRuntimeException(\n          \"MultiRuntimeException thrown with no sources!\",\n          new RuntimeException());\n    }\n    StringBuilder msgBuilder = new StringBuilder();\n    msgBuilder\n        .append(\"Multiple remote exceptions thrown. Stack trace to first included, rest in message below.\\n\");\n    int traceNum = 1;\n    for (Throwable t : sources) {\n      if (traceNum > 1) {\n        msgBuilder.append(String.format(\"Exception %d\\n\", traceNum));\n        msgBuilder.append(t.getClass().getName());\n        msgBuilder.append(\"\\n\");\n        msgBuilder.append(t.getMessage());\n        msgBuilder.append(\"\\n\");\n        for (StackTraceElement element : t.getStackTrace()) {\n          msgBuilder.append(String.format(\"\\t%s:%d %s\\n\",\n              element.getClassName(), element.getLineNumber(),\n              element.getMethodName()));\n        }\n      }\n      traceNum++;\n    }\n    return new MultiRuntimeException(msgBuilder.toString(), sources.iterator()\n        .next());\n  }", "signature": "MultiRuntimeException get(Collection<Throwable> sources)", "full_signature": "public static MultiRuntimeException get(Collection<Throwable> sources)", "class_method_signature": "MultiRuntimeException.get(Collection<Throwable> sources)", "testcase": false, "constructor": false, "invocations": ["size", "append", "append", "format", "append", "getName", "getClass", "append", "append", "getMessage", "append", "getStackTrace", "append", "format", "getClassName", "getLineNumber", "getMethodName", "toString", "next", "iterator"]}, "repository": {"repo_id": 1973010, "url": "https://github.com/booz-allen-hamilton/culvert", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 373, "license": "licensed"}}