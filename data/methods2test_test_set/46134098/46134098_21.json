{"test_class": {"identifier": "YMLResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File INPUT_FILE = new File(\"src/test/resource/resfilter/yml/input.yml\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE = new File(\"src/test/resource/resfilter/yml/input.yml\")", "var_name": "INPUT_FILE"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private static final File EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/yml/write-output.yml\");", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "File", "declarator": "EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/yml/write-output.yml\")", "var_name": "EXPECTED_WRITE_FILE"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private static final File EXPECTED_MERGE_FILE = new File(\"src/test/resource/resfilter/yml/merge-output.yml\");", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "File", "declarator": "EXPECTED_MERGE_FILE = new File(\"src/test/resource/resfilter/yml/merge-output.yml\")", "var_name": "EXPECTED_MERGE_FILE"}, {"original_string": "private static Collection<ResourceString> EXPECTED_INPUT_RES_LIST;", "modifier": "private static", "type": "Collection<ResourceString>", "declarator": "EXPECTED_INPUT_RES_LIST", "var_name": "EXPECTED_INPUT_RES_LIST"}, {"original_string": "private static LanguageBundle WRITE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "WRITE_BUNDLE", "var_name": "WRITE_BUNDLE"}, {"original_string": "private static final YMLResource res = new YMLResource();", "modifier": "private static final", "type": "YMLResource", "declarator": "res = new YMLResource()", "var_name": "res"}], "file": "gp-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/impl/YMLResourceTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() throws IOException, ResourceFilterException {\n        assertTrue(\"The input test file <\" + INPUT_FILE + \"> does not exist.\", INPUT_FILE.exists());\n\n        try (InputStream is = new FileInputStream(INPUT_FILE)) {\n            @SuppressWarnings(\"unused\")\n            LanguageBundle bundle =  res.parse(is, null);\n            // TODO: Not ready yet\n            // assertEquals(\"ResourceStrings did not match.\", EXPECTED_INPUT_RES_LIST, bundle.getResourceStrings());\n        }\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "YMLResourceTest.testParse()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "exists", "parse"]}, "focal_class": {"identifier": "YMLResource", "superclass": "extends ResourceFilter", "interfaces": "", "fields": [], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "YMLResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "flattenMap", "parameters": "(String prefix, Map<String, Object> map, Map<String, String> resource,\n            char separator)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Map<String, String>", "signature": "Map<String, String> flattenMap(String prefix, Map<String, Object> map, Map<String, String> resource,\n            char separator)", "full_signature": "@SuppressWarnings(\"unchecked\") private Map<String, String> flattenMap(String prefix, Map<String, Object> map, Map<String, String> resource,\n            char separator)", "class_method_signature": "YMLResource.flattenMap(String prefix, Map<String, Object> map, Map<String, String> resource,\n            char separator)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "YMLResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "writeFile", "parameters": "(OutputStream writer, Map<String, Object> map, int depth)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void writeFile(OutputStream writer, Map<String, Object> map, int depth)", "full_signature": "@SuppressWarnings(\"unchecked\") private void writeFile(OutputStream writer, Map<String, Object> map, int depth)", "class_method_signature": "YMLResource.writeFile(OutputStream writer, Map<String, Object> map, int depth)", "testcase": false, "constructor": false}], "file": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/YMLResource.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "body": "@Override\n    public LanguageBundle parse(InputStream inStream, FilterOptions options)\n            throws IOException, ResourceFilterException {\n\n        char separator = '.';\n\n        YAMLFactory yf = new YAMLFactory();\n        ObjectMapper mapper = new ObjectMapper(yf);\n        Map<String, Object> YAML_map = new LinkedHashMap<String, Object>();\n\n        // Reads contents of YAML file and converts it to a hashmap\n        YAML_map = mapper.readValue(inStream, new TypeReference<LinkedHashMap<String, Object>>() {\n        });\n\n        Map<String, String> resultMap = flattenMap(\"\", YAML_map, new LinkedHashMap<String, String>(), separator);\n\n        LanguageBundleBuilder bb = new LanguageBundleBuilder(true);\n        for (Entry<String, String> entry : resultMap.entrySet()) {\n            bb.addResourceString(entry.getKey(), entry.getValue());\n        }\n        return bb.build();\n    }", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "YMLResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["readValue", "flattenMap", "entrySet", "addResourceString", "getKey", "getValue", "build"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}