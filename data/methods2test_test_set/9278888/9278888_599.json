{"test_class": {"identifier": "EntrySplitterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "EntrySplitter entrySplitter = EntrySplitter.newBuilder().shouldThrow(true).build();", "modifier": "", "type": "EntrySplitter", "declarator": "entrySplitter = EntrySplitter.newBuilder().shouldThrow(true).build()", "var_name": "entrySplitter"}, {"original_string": "Map<String, String> map = new LinkedHashMap<>();", "modifier": "", "type": "Map<String, String>", "declarator": "map = new LinkedHashMap<>()", "var_name": "map"}, {"original_string": "Handler<Map<String, String>> parseIntoMap =\n      (target, input, beginKey, endKey, beginValue, endValue) -> {\n        String key = input.substring(beginKey, endKey);\n        String value = input.substring(beginValue, endValue);\n        target.put(key, value);\n        return true;\n      };", "modifier": "", "type": "Handler<Map<String, String>>", "declarator": "parseIntoMap =\n      (target, input, beginKey, endKey, beginValue, endValue) -> {\n        String key = input.substring(beginKey, endKey);\n        String value = input.substring(beginValue, endValue);\n        target.put(key, value);\n        return true;\n      }", "var_name": "parseIntoMap"}], "file": "brave/src/test/java/brave/internal/codec/EntrySplitterTest.java"}, "test_case": {"identifier": "toleratesButIgnores_empty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void toleratesButIgnores_empty() {\n    entrySplitter.parse(parseIntoMap, map, \"\");\n\n    assertThat(map.isEmpty());\n  }", "signature": "void toleratesButIgnores_empty()", "full_signature": "@Test public void toleratesButIgnores_empty()", "class_method_signature": "EntrySplitterTest.toleratesButIgnores_empty()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "isEmpty"]}, "focal_class": {"identifier": "EntrySplitter", "superclass": "", "interfaces": "", "fields": [{"original_string": "final char keyValueSeparator, entrySeparator;", "modifier": "final", "type": "char", "declarator": "keyValueSeparator", "var_name": "keyValueSeparator"}, {"original_string": "int maxEntries;", "modifier": "", "type": "int", "declarator": "maxEntries", "var_name": "maxEntries"}, {"original_string": "final boolean trimOWSAroundEntrySeparator, trimOWSAroundKeyValueSeparator;", "modifier": "final", "type": "boolean", "declarator": "trimOWSAroundEntrySeparator", "var_name": "trimOWSAroundEntrySeparator"}, {"original_string": "final boolean keyValueSeparatorRequired, shouldThrow;", "modifier": "final", "type": "boolean", "declarator": "keyValueSeparatorRequired", "var_name": "keyValueSeparatorRequired"}, {"original_string": "final String missingKey, missingKeyValueSeparator, overMaxEntries;", "modifier": "final", "type": "String", "declarator": "missingKey", "var_name": "missingKey"}], "methods": [{"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "EntrySplitter.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "EntrySplitter", "parameters": "(Builder builder)", "modifiers": "", "return": "", "signature": " EntrySplitter(Builder builder)", "full_signature": "  EntrySplitter(Builder builder)", "class_method_signature": "EntrySplitter.EntrySplitter(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(Handler<T> handler, T target, String input)", "modifiers": "public", "return": "boolean", "signature": "boolean parse(Handler<T> handler, T target, String input)", "full_signature": "public boolean parse(Handler<T> handler, T target, String input)", "class_method_signature": "EntrySplitter.parse(Handler<T> handler, T target, String input)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(\n      Handler<T> handler, T target, String input, int beginIndex, int endIndex)", "modifiers": "public", "return": "boolean", "signature": "boolean parse(\n      Handler<T> handler, T target, String input, int beginIndex, int endIndex)", "full_signature": "public boolean parse(\n      Handler<T> handler, T target, String input, int beginIndex, int endIndex)", "class_method_signature": "EntrySplitter.parse(\n      Handler<T> handler, T target, String input, int beginIndex, int endIndex)", "testcase": false, "constructor": false}, {"identifier": "rewindOWS", "parameters": "(String input, int beginIndex, int endIndex)", "modifiers": "static", "return": "int", "signature": "int rewindOWS(String input, int beginIndex, int endIndex)", "full_signature": "static int rewindOWS(String input, int beginIndex, int endIndex)", "class_method_signature": "EntrySplitter.rewindOWS(String input, int beginIndex, int endIndex)", "testcase": false, "constructor": false}, {"identifier": "isOWS", "parameters": "(char c)", "modifiers": "static", "return": "boolean", "signature": "boolean isOWS(char c)", "full_signature": "static boolean isOWS(char c)", "class_method_signature": "EntrySplitter.isOWS(char c)", "testcase": false, "constructor": false}, {"identifier": "logOrThrow", "parameters": "(String msg, boolean shouldThrow)", "modifiers": "static", "return": "boolean", "signature": "boolean logOrThrow(String msg, boolean shouldThrow)", "full_signature": "static boolean logOrThrow(String msg, boolean shouldThrow)", "class_method_signature": "EntrySplitter.logOrThrow(String msg, boolean shouldThrow)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/internal/codec/EntrySplitter.java"}, "focal_method": {"identifier": "parse", "parameters": "(Handler<T> handler, T target, String input)", "modifiers": "public", "return": "boolean", "body": "public <T> boolean parse(Handler<T> handler, T target, String input) {\n    if (input == null) throw new NullPointerException(\"input == null\");\n    return parse(handler, target, input, 0, input.length());\n  }", "signature": "boolean parse(Handler<T> handler, T target, String input)", "full_signature": "public boolean parse(Handler<T> handler, T target, String input)", "class_method_signature": "EntrySplitter.parse(Handler<T> handler, T target, String input)", "testcase": false, "constructor": false, "invocations": ["parse", "length"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}