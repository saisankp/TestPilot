{"test_class": {"identifier": "DeviceAndSnapshotComboBoxActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final AndroidProjectRule myRule = AndroidProjectRule.inMemory();", "modifier": "@Rule\n  public final", "type": "AndroidProjectRule", "declarator": "myRule = AndroidProjectRule.inMemory()", "var_name": "myRule"}, {"original_string": "private AsyncDevicesGetter myDevicesGetter;", "modifier": "private", "type": "AsyncDevicesGetter", "declarator": "myDevicesGetter", "var_name": "myDevicesGetter"}, {"original_string": "private Clock myClock;", "modifier": "private", "type": "Clock", "declarator": "myClock", "var_name": "myClock"}, {"original_string": "private Project myProject;", "modifier": "private", "type": "Project", "declarator": "myProject", "var_name": "myProject"}, {"original_string": "private Presentation myPresentation;", "modifier": "private", "type": "Presentation", "declarator": "myPresentation", "var_name": "myPresentation"}, {"original_string": "private AnActionEvent myEvent;", "modifier": "private", "type": "AnActionEvent", "declarator": "myEvent", "var_name": "myEvent"}, {"original_string": "private DataContext myContext;", "modifier": "private", "type": "DataContext", "declarator": "myContext", "var_name": "myContext"}], "file": "android/testSrc/com/android/tools/idea/run/deployment/DeviceAndSnapshotComboBoxActionTest.java"}, "test_case": {"identifier": "updateDevicesGetterReturnsDifferentLists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void updateDevicesGetterReturnsDifferentLists() {\n    // Arrange\n    Device device = new PhysicalDevice.Builder()\n      .setName(\"Unknown Device\")\n      .setKey(new Key(\"cd020375-1ce4-45dc-a5be-b45e5765c6f2\"))\n      .setAndroidDevice(Mockito.mock(AndroidDevice.class))\n      .build();\n\n    Mockito.when(myDevicesGetter.get())\n      .thenReturn(Collections.emptyList())\n      .thenReturn(Collections.singletonList(device));\n\n    AnAction action = new DeviceAndSnapshotComboBoxAction(() -> false, project -> myDevicesGetter, project -> null, myClock);\n\n    // Act\n    action.update(myEvent);\n  }", "signature": "void updateDevicesGetterReturnsDifferentLists()", "full_signature": "@Test public void updateDevicesGetterReturnsDifferentLists()", "class_method_signature": "DeviceAndSnapshotComboBoxActionTest.updateDevicesGetterReturnsDifferentLists()", "testcase": true, "constructor": false, "invocations": ["build", "setAndroidDevice", "setKey", "setName", "mock", "thenReturn", "thenReturn", "when", "get", "emptyList", "singletonList", "update"]}, "focal_class": {"identifier": "DeviceAndSnapshotComboBoxAction", "superclass": "extends ComboBoxAction", "interfaces": "", "fields": [{"original_string": "@VisibleForTesting\n  static final String SELECTED_DEVICE = \"DeviceAndSnapshotComboBoxAction.selectedDevice\";", "modifier": "@VisibleForTesting\n  static final", "type": "String", "declarator": "SELECTED_DEVICE = \"DeviceAndSnapshotComboBoxAction.selectedDevice\"", "var_name": "SELECTED_DEVICE"}, {"original_string": "private static final String SELECTION_TIME = \"DeviceAndSnapshotComboBoxAction.selectionTime\";", "modifier": "private static final", "type": "String", "declarator": "SELECTION_TIME = \"DeviceAndSnapshotComboBoxAction.selectionTime\"", "var_name": "SELECTION_TIME"}, {"original_string": "public static final com.intellij.openapi.util.Key<Boolean> DEPLOYS_TO_LOCAL_DEVICE =\n    com.intellij.openapi.util.Key.create(\"DeviceAndSnapshotComboBoxAction.deploysToLocalDevice\");", "modifier": "public static final", "type": "com.intellij.openapi.util.Key<Boolean>", "declarator": "DEPLOYS_TO_LOCAL_DEVICE =\n    com.intellij.openapi.util.Key.create(\"DeviceAndSnapshotComboBoxAction.deploysToLocalDevice\")", "var_name": "DEPLOYS_TO_LOCAL_DEVICE"}, {"original_string": "private final Supplier<Boolean> mySelectDeviceSnapshotComboBoxSnapshotsEnabled;", "modifier": "private final", "type": "Supplier<Boolean>", "declarator": "mySelectDeviceSnapshotComboBoxSnapshotsEnabled", "var_name": "mySelectDeviceSnapshotComboBoxSnapshotsEnabled"}, {"original_string": "private final Function<Project, AsyncDevicesGetter> myDevicesGetterGetter;", "modifier": "private final", "type": "Function<Project, AsyncDevicesGetter>", "declarator": "myDevicesGetterGetter", "var_name": "myDevicesGetterGetter"}, {"original_string": "@NotNull\n  private final Function<Project, PropertiesComponent> myGetProperties;", "modifier": "@NotNull\n  private final", "type": "Function<Project, PropertiesComponent>", "declarator": "myGetProperties", "var_name": "myGetProperties"}, {"original_string": "private final AnAction myRunOnMultipleDevicesAction;", "modifier": "private final", "type": "AnAction", "declarator": "myRunOnMultipleDevicesAction", "var_name": "myRunOnMultipleDevicesAction"}, {"original_string": "private final AnAction myOpenAvdManagerAction;", "modifier": "private final", "type": "AnAction", "declarator": "myOpenAvdManagerAction", "var_name": "myOpenAvdManagerAction"}, {"original_string": "private final Clock myClock;", "modifier": "private final", "type": "Clock", "declarator": "myClock", "var_name": "myClock"}], "methods": [{"identifier": "DeviceAndSnapshotComboBoxAction", "parameters": "()", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "", "signature": " DeviceAndSnapshotComboBoxAction()", "full_signature": "@SuppressWarnings(\"unused\") private  DeviceAndSnapshotComboBoxAction()", "class_method_signature": "DeviceAndSnapshotComboBoxAction.DeviceAndSnapshotComboBoxAction()", "testcase": false, "constructor": true}, {"identifier": "DeviceAndSnapshotComboBoxAction", "parameters": "(@NotNull Supplier<Boolean> selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                                         @NotNull Function<Project, AsyncDevicesGetter> devicesGetterGetter,\n                                         @NotNull Function<Project, PropertiesComponent> getProperties,\n                                         @NotNull Clock clock)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " DeviceAndSnapshotComboBoxAction(@NotNull Supplier<Boolean> selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                                         @NotNull Function<Project, AsyncDevicesGetter> devicesGetterGetter,\n                                         @NotNull Function<Project, PropertiesComponent> getProperties,\n                                         @NotNull Clock clock)", "full_signature": "@VisibleForTesting public  DeviceAndSnapshotComboBoxAction(@NotNull Supplier<Boolean> selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                                         @NotNull Function<Project, AsyncDevicesGetter> devicesGetterGetter,\n                                         @NotNull Function<Project, PropertiesComponent> getProperties,\n                                         @NotNull Clock clock)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.DeviceAndSnapshotComboBoxAction(@NotNull Supplier<Boolean> selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                                         @NotNull Function<Project, AsyncDevicesGetter> devicesGetterGetter,\n                                         @NotNull Function<Project, PropertiesComponent> getProperties,\n                                         @NotNull Clock clock)", "testcase": false, "constructor": true}, {"identifier": "areSnapshotsEnabled", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean areSnapshotsEnabled()", "full_signature": " boolean areSnapshotsEnabled()", "class_method_signature": "DeviceAndSnapshotComboBoxAction.areSnapshotsEnabled()", "testcase": false, "constructor": false}, {"identifier": "getRunOnMultipleDevicesAction", "parameters": "()", "modifiers": "@NotNull @VisibleForTesting final", "return": "AnAction", "signature": "AnAction getRunOnMultipleDevicesAction()", "full_signature": "@NotNull @VisibleForTesting final AnAction getRunOnMultipleDevicesAction()", "class_method_signature": "DeviceAndSnapshotComboBoxAction.getRunOnMultipleDevicesAction()", "testcase": false, "constructor": false}, {"identifier": "getOpenAvdManagerAction", "parameters": "()", "modifiers": "@NotNull @VisibleForTesting final", "return": "AnAction", "signature": "AnAction getOpenAvdManagerAction()", "full_signature": "@NotNull @VisibleForTesting final AnAction getOpenAvdManagerAction()", "class_method_signature": "DeviceAndSnapshotComboBoxAction.getOpenAvdManagerAction()", "testcase": false, "constructor": false}, {"identifier": "getDevices", "parameters": "(@NotNull Project project)", "modifiers": "@NotNull", "return": "List<Device>", "signature": "List<Device> getDevices(@NotNull Project project)", "full_signature": "@NotNull List<Device> getDevices(@NotNull Project project)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.getDevices(@NotNull Project project)", "testcase": false, "constructor": false}, {"identifier": "getSelectedDevice", "parameters": "(@NotNull Project project)", "modifiers": "@Nullable final", "return": "Device", "signature": "Device getSelectedDevice(@NotNull Project project)", "full_signature": "@Nullable final Device getSelectedDevice(@NotNull Project project)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.getSelectedDevice(@NotNull Project project)", "testcase": false, "constructor": false}, {"identifier": "getSelectedDevice", "parameters": "(@NotNull Project project, @NotNull List<Device> devices)", "modifiers": "@Nullable private", "return": "Device", "signature": "Device getSelectedDevice(@NotNull Project project, @NotNull List<Device> devices)", "full_signature": "@Nullable private Device getSelectedDevice(@NotNull Project project, @NotNull List<Device> devices)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.getSelectedDevice(@NotNull Project project, @NotNull List<Device> devices)", "testcase": false, "constructor": false}, {"identifier": "getSelectionTime", "parameters": "(@NotNull Device device, @NotNull PropertiesComponent properties)", "modifiers": "@NotNull private static", "return": "Instant", "signature": "Instant getSelectionTime(@NotNull Device device, @NotNull PropertiesComponent properties)", "full_signature": "@NotNull private static Instant getSelectionTime(@NotNull Device device, @NotNull PropertiesComponent properties)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.getSelectionTime(@NotNull Device device, @NotNull PropertiesComponent properties)", "testcase": false, "constructor": false}, {"identifier": "setSelectedDevice", "parameters": "(@NotNull Project project, @Nullable Device selectedDevice)", "modifiers": "final", "return": "void", "signature": "void setSelectedDevice(@NotNull Project project, @Nullable Device selectedDevice)", "full_signature": "final void setSelectedDevice(@NotNull Project project, @Nullable Device selectedDevice)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.setSelectedDevice(@NotNull Project project, @Nullable Device selectedDevice)", "testcase": false, "constructor": false}, {"identifier": "createCustomComponent", "parameters": "(@NotNull Presentation presentation, @NotNull String place)", "modifiers": "@NotNull @Override public final", "return": "JComponent", "signature": "JComponent createCustomComponent(@NotNull Presentation presentation, @NotNull String place)", "full_signature": "@NotNull @Override public final JComponent createCustomComponent(@NotNull Presentation presentation, @NotNull String place)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.createCustomComponent(@NotNull Presentation presentation, @NotNull String place)", "testcase": false, "constructor": false}, {"identifier": "createComboBoxButton", "parameters": "(@NotNull Presentation presentation)", "modifiers": "@NotNull @Override protected final", "return": "ComboBoxButton", "signature": "ComboBoxButton createComboBoxButton(@NotNull Presentation presentation)", "full_signature": "@NotNull @Override protected final ComboBoxButton createComboBoxButton(@NotNull Presentation presentation)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.createComboBoxButton(@NotNull Presentation presentation)", "testcase": false, "constructor": false}, {"identifier": "shouldShowDisabledActions", "parameters": "()", "modifiers": "@Override protected final", "return": "boolean", "signature": "boolean shouldShowDisabledActions()", "full_signature": "@Override protected final boolean shouldShowDisabledActions()", "class_method_signature": "DeviceAndSnapshotComboBoxAction.shouldShowDisabledActions()", "testcase": false, "constructor": false}, {"identifier": "createPopupActionGroup", "parameters": "(@NotNull JComponent button)", "modifiers": "@NotNull @Override protected final", "return": "DefaultActionGroup", "signature": "DefaultActionGroup createPopupActionGroup(@NotNull JComponent button)", "full_signature": "@NotNull @Override protected final DefaultActionGroup createPopupActionGroup(@NotNull JComponent button)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.createPopupActionGroup(@NotNull JComponent button)", "testcase": false, "constructor": false}, {"identifier": "createPopupActionGroup", "parameters": "(@NotNull JComponent button, @NotNull DataContext context)", "modifiers": "@NotNull @Override protected final", "return": "DefaultActionGroup", "signature": "DefaultActionGroup createPopupActionGroup(@NotNull JComponent button, @NotNull DataContext context)", "full_signature": "@NotNull @Override protected final DefaultActionGroup createPopupActionGroup(@NotNull JComponent button, @NotNull DataContext context)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.createPopupActionGroup(@NotNull JComponent button, @NotNull DataContext context)", "testcase": false, "constructor": false}, {"identifier": "newSelectDeviceActions", "parameters": "(@NotNull Project project)", "modifiers": "@NotNull private", "return": "Collection<AnAction>", "signature": "Collection<AnAction> newSelectDeviceActions(@NotNull Project project)", "full_signature": "@NotNull private Collection<AnAction> newSelectDeviceActions(@NotNull Project project)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.newSelectDeviceActions(@NotNull Project project)", "testcase": false, "constructor": false}, {"identifier": "newSelectDeviceActionsIncludeSnapshots", "parameters": "(@NotNull Project project)", "modifiers": "@NotNull private", "return": "Collection<AnAction>", "signature": "Collection<AnAction> newSelectDeviceActionsIncludeSnapshots(@NotNull Project project)", "full_signature": "@NotNull private Collection<AnAction> newSelectDeviceActionsIncludeSnapshots(@NotNull Project project)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.newSelectDeviceActionsIncludeSnapshots(@NotNull Project project)", "testcase": false, "constructor": false}, {"identifier": "getDeviceKeyToDeviceMultimap", "parameters": "(@NotNull Project project)", "modifiers": "@NotNull private", "return": "ListMultimap<String, Device>", "signature": "ListMultimap<String, Device> getDeviceKeyToDeviceMultimap(@NotNull Project project)", "full_signature": "@NotNull private ListMultimap<String, Device> getDeviceKeyToDeviceMultimap(@NotNull Project project)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.getDeviceKeyToDeviceMultimap(@NotNull Project project)", "testcase": false, "constructor": false}, {"identifier": "buildListMultimap", "parameters": "(int expectedKeyCount)", "modifiers": "@NotNull private static", "return": "ListMultimap<String, Device>", "signature": "ListMultimap<String, Device> buildListMultimap(int expectedKeyCount)", "full_signature": "@NotNull private static ListMultimap<String, Device> buildListMultimap(int expectedKeyCount)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.buildListMultimap(int expectedKeyCount)", "testcase": false, "constructor": false}, {"identifier": "newAction", "parameters": "(@NotNull List<Device> devices, @NotNull Project project)", "modifiers": "@NotNull private", "return": "AnAction", "signature": "AnAction newAction(@NotNull List<Device> devices, @NotNull Project project)", "full_signature": "@NotNull private AnAction newAction(@NotNull List<Device> devices, @NotNull Project project)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.newAction(@NotNull List<Device> devices, @NotNull Project project)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@NotNull AnActionEvent event)", "modifiers": "@Override public final", "return": "void", "signature": "void update(@NotNull AnActionEvent event)", "full_signature": "@Override public final void update(@NotNull AnActionEvent event)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.update(@NotNull AnActionEvent event)", "testcase": false, "constructor": false}, {"identifier": "updatePresentation", "parameters": "(@NotNull Presentation presentation, @Nullable RunnerAndConfigurationSettings settings)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void updatePresentation(@NotNull Presentation presentation, @Nullable RunnerAndConfigurationSettings settings)", "full_signature": "@VisibleForTesting static void updatePresentation(@NotNull Presentation presentation, @Nullable RunnerAndConfigurationSettings settings)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.updatePresentation(@NotNull Presentation presentation, @Nullable RunnerAndConfigurationSettings settings)", "testcase": false, "constructor": false}, {"identifier": "getText", "parameters": "(@NotNull Device device, @NotNull Collection<Device> devices, boolean snapshotsEnabled)", "modifiers": "@NotNull @VisibleForTesting static", "return": "String", "signature": "String getText(@NotNull Device device, @NotNull Collection<Device> devices, boolean snapshotsEnabled)", "full_signature": "@NotNull @VisibleForTesting static String getText(@NotNull Device device, @NotNull Collection<Device> devices, boolean snapshotsEnabled)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.getText(@NotNull Device device, @NotNull Collection<Device> devices, boolean snapshotsEnabled)", "testcase": false, "constructor": false}, {"identifier": "updateExecutionTargetManager", "parameters": "(@NotNull Project project, @Nullable Device device)", "modifiers": "private static", "return": "void", "signature": "void updateExecutionTargetManager(@NotNull Project project, @Nullable Device device)", "full_signature": "private static void updateExecutionTargetManager(@NotNull Project project, @Nullable Device device)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.updateExecutionTargetManager(@NotNull Project project, @Nullable Device device)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/run/deployment/DeviceAndSnapshotComboBoxAction.java"}, "focal_method": {"identifier": "update", "parameters": "(@NotNull AnActionEvent event)", "modifiers": "@Override public final", "return": "void", "body": "@Override\n  public final void update(@NotNull AnActionEvent event) {\n    Presentation presentation = event.getPresentation();\n    Project project = event.getProject();\n\n    if (project == null) {\n      presentation.setVisible(false);\n      return;\n    }\n\n    if (!AndroidUtils.hasAndroidFacets(project)) {\n      presentation.setVisible(false);\n      return;\n    }\n\n    updatePresentation(presentation, RunManager.getInstance(project).getSelectedConfiguration());\n\n    List<Device> devices = getDevices(project);\n    Device device = getSelectedDevice(project, devices);\n\n    if (event.getPlace().equals(ActionPlaces.MAIN_MENU)) {\n      presentation.setIcon(null);\n      presentation.setText(\"Select Device...\");\n    }\n    else if (devices.isEmpty()) {\n      presentation.setIcon(null);\n      presentation.setText(\"No Devices\");\n    }\n    else {\n      assert device != null;\n\n      presentation.setIcon(device.getIcon());\n      presentation.setText(getText(device, devices, mySelectDeviceSnapshotComboBoxSnapshotsEnabled.get()), false);\n    }\n\n    updateExecutionTargetManager(project, device);\n  }", "signature": "void update(@NotNull AnActionEvent event)", "full_signature": "@Override public final void update(@NotNull AnActionEvent event)", "class_method_signature": "DeviceAndSnapshotComboBoxAction.update(@NotNull AnActionEvent event)", "testcase": false, "constructor": false, "invocations": ["getPresentation", "getProject", "setVisible", "hasAndroidFacets", "setVisible", "updatePresentation", "getSelectedConfiguration", "getInstance", "getDevices", "getSelectedDevice", "equals", "getPlace", "setIcon", "setText", "isEmpty", "setIcon", "setText", "setIcon", "getIcon", "setText", "getText", "get", "updateExecutionTargetManager"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}