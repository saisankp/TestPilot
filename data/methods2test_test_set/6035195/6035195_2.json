{"test_class": {"identifier": "DefaultProviderConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "providers/amazon/src/test/java/com/axemblr/provisionr/amazon/config/DefaultProviderConfigTest.java"}, "test_case": {"identifier": "testProviderIsAbsentIfCredentialsAreEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProviderIsAbsentIfCredentialsAreEmpty() {\n        DefaultProviderConfig config = new DefaultProviderConfig(\"\", \"\", \"us-east-1\", \"\");\n        assertThat(config.createProvider().isPresent()).isFalse();\n    }", "signature": "void testProviderIsAbsentIfCredentialsAreEmpty()", "full_signature": "@Test public void testProviderIsAbsentIfCredentialsAreEmpty()", "class_method_signature": "DefaultProviderConfigTest.testProviderIsAbsentIfCredentialsAreEmpty()", "testcase": true, "constructor": false, "invocations": ["isFalse", "assertThat", "isPresent", "createProvider"]}, "focal_class": {"identifier": "DefaultProviderConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String accessKey;", "modifier": "private final", "type": "String", "declarator": "accessKey", "var_name": "accessKey"}, {"original_string": "private final String secretKey;", "modifier": "private final", "type": "String", "declarator": "secretKey", "var_name": "secretKey"}, {"original_string": "private final String region;", "modifier": "private final", "type": "String", "declarator": "region", "var_name": "region"}, {"original_string": "private final String endpoint;", "modifier": "private final", "type": "String", "declarator": "endpoint", "var_name": "endpoint"}], "methods": [{"identifier": "DefaultProviderConfig", "parameters": "(String accessKey, String secretKey, String region, String endpoint)", "modifiers": "public", "return": "", "signature": " DefaultProviderConfig(String accessKey, String secretKey, String region, String endpoint)", "full_signature": "public  DefaultProviderConfig(String accessKey, String secretKey, String region, String endpoint)", "class_method_signature": "DefaultProviderConfig.DefaultProviderConfig(String accessKey, String secretKey, String region, String endpoint)", "testcase": false, "constructor": true}, {"identifier": "createProvider", "parameters": "()", "modifiers": "public", "return": "Optional<Provider>", "signature": "Optional<Provider> createProvider()", "full_signature": "public Optional<Provider> createProvider()", "class_method_signature": "DefaultProviderConfig.createProvider()", "testcase": false, "constructor": false}], "file": "providers/amazon/src/main/java/com/axemblr/provisionr/amazon/config/DefaultProviderConfig.java"}, "focal_method": {"identifier": "createProvider", "parameters": "()", "modifiers": "public", "return": "Optional<Provider>", "body": "public Optional<Provider> createProvider() {\n        if (accessKey.isEmpty() || secretKey.isEmpty()) {\n            return Optional.absent();\n        }\n        final ProviderBuilder builder = Provider.builder()\n            .id(AmazonProvisionr.ID)\n            .accessKey(accessKey)\n            .secretKey(secretKey);\n\n        if (!region.isEmpty()) {\n            builder.option(\"region\", region);\n        }\n\n        if (endpoint.isEmpty()) {\n            builder.endpoint(Optional.<String>absent());\n        } else {\n            builder.endpoint(endpoint);\n        }\n\n        return Optional.of(builder.createProvider());\n    }", "signature": "Optional<Provider> createProvider()", "full_signature": "public Optional<Provider> createProvider()", "class_method_signature": "DefaultProviderConfig.createProvider()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "absent", "secretKey", "accessKey", "id", "builder", "isEmpty", "option", "isEmpty", "endpoint", "absent", "endpoint", "of", "createProvider"]}, "repository": {"repo_id": 6035195, "url": "https://github.com/axemblr/axemblr-provisionr", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 30, "size": 3329, "license": "licensed"}}