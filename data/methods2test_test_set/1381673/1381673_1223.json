{"test_class": {"identifier": "KiePMMLDescrLhsFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PACKAGE_NAME = \"package\";", "modifier": "private static final", "type": "String", "declarator": "PACKAGE_NAME = \"package\"", "var_name": "PACKAGE_NAME"}, {"original_string": "private static final String CURRENT_RULE = \"currentRule\";", "modifier": "private static final", "type": "String", "declarator": "CURRENT_RULE = \"currentRule\"", "var_name": "CURRENT_RULE"}, {"original_string": "private CEDescrBuilder<RuleDescrBuilder, AndDescr> lhsBuilder;", "modifier": "private", "type": "CEDescrBuilder<RuleDescrBuilder, AndDescr>", "declarator": "lhsBuilder", "var_name": "lhsBuilder"}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrLhsFactoryTest.java"}, "test_case": {"identifier": "declareConstraintsXor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void declareConstraintsXor() {\n        String temperatureField = \"TEMPERATURE\";\n        final List<KiePMMLFieldOperatorValue> xorConstraints = Arrays\n                .asList(new KiePMMLFieldOperatorValue(temperatureField, BOOLEAN_OPERATOR.OR, Collections.singletonList(new KiePMMLOperatorValue(OPERATOR.LESS_THAN, 35)), null),\n                        new KiePMMLFieldOperatorValue(temperatureField, BOOLEAN_OPERATOR.OR, Collections.singletonList(new KiePMMLOperatorValue(OPERATOR.GREATER_THAN, 85)), null));\n        KiePMMLDescrLhsFactory.factory(lhsBuilder).declareConstraintsXor(xorConstraints);\n        assertNotNull(lhsBuilder.getDescr());\n        assertNotNull(lhsBuilder.getDescr().getDescrs());\n        assertEquals(1, lhsBuilder.getDescr().getDescrs().size());\n        assertTrue(lhsBuilder.getDescr().getDescrs().get(0) instanceof AndDescr);\n        AndDescr rootAndDescr = (AndDescr) lhsBuilder.getDescr().getDescrs().get(0);\n        assertEquals(2, rootAndDescr.getDescrs().size());\n        assertTrue(rootAndDescr.getDescrs().get(0) instanceof NotDescr);\n        assertTrue(rootAndDescr.getDescrs().get(1) instanceof ExistsDescr);\n        // \"Not\" construct\n        NotDescr notDescr = (NotDescr) rootAndDescr.getDescrs().get(0);\n        assertEquals(1, notDescr.getDescrs().size());\n        assertTrue(notDescr.getDescrs().get(0) instanceof AndDescr);\n        AndDescr notAndDescr = (AndDescr) notDescr.getDescrs().get(0);\n        assertTrue(notAndDescr.getDescrs().get(0) instanceof PatternDescr);\n        assertTrue(notAndDescr.getDescrs().get(1) instanceof PatternDescr);\n        PatternDescr patternDescr = (PatternDescr) notAndDescr.getDescrs().get(0);\n        assertEquals(temperatureField, patternDescr.getObjectType());\n        assertNull(patternDescr.getIdentifier());\n        assertTrue(patternDescr.getConstraint() instanceof AndDescr);\n        AndDescr andDescr = (AndDescr) patternDescr.getConstraint();\n        assertEquals(1, andDescr.getDescrs().size());\n        assertTrue(andDescr.getDescrs().get(0) instanceof ExprConstraintDescr);\n        ExprConstraintDescr exprConstraintDescr = (ExprConstraintDescr) andDescr.getDescrs().get(0);\n        assertFalse(exprConstraintDescr.isNegated());\n        assertEquals(ExprConstraintDescr.Type.NAMED, exprConstraintDescr.getType());\n        String expected = \"value < 35\";\n        assertEquals(expected, exprConstraintDescr.getExpression());\n        patternDescr = (PatternDescr) notAndDescr.getDescrs().get(1);\n        assertEquals(temperatureField, patternDescr.getObjectType());\n        assertNull(patternDescr.getIdentifier());\n        assertTrue(patternDescr.getConstraint() instanceof AndDescr);\n        andDescr = (AndDescr) patternDescr.getConstraint();\n        assertEquals(1, andDescr.getDescrs().size());\n        assertTrue(andDescr.getDescrs().get(0) instanceof ExprConstraintDescr);\n        exprConstraintDescr = (ExprConstraintDescr) andDescr.getDescrs().get(0);\n        assertFalse(exprConstraintDescr.isNegated());\n        assertEquals(ExprConstraintDescr.Type.NAMED, exprConstraintDescr.getType());\n        expected = \"value > 85\";\n        assertEquals(expected, exprConstraintDescr.getExpression());\n        // \"Exists\" construct\n        ExistsDescr existsDescr = (ExistsDescr) rootAndDescr.getDescrs().get(1);\n        assertEquals(1, existsDescr.getDescrs().size());\n        assertTrue(existsDescr.getDescrs().get(0) instanceof OrDescr);\n        OrDescr existsOrDescr = (OrDescr) existsDescr.getDescrs().get(0);\n        assertEquals(2, existsOrDescr.getDescrs().size());\n        assertTrue(existsOrDescr.getDescrs().get(0) instanceof PatternDescr);\n        assertTrue(existsOrDescr.getDescrs().get(1) instanceof OrDescr);\n        patternDescr = (PatternDescr) existsOrDescr.getDescrs().get(0);\n        assertEquals(temperatureField, patternDescr.getObjectType());\n        assertNull(patternDescr.getIdentifier());\n        assertTrue(patternDescr.getConstraint() instanceof AndDescr);\n        andDescr = (AndDescr) patternDescr.getConstraint();\n        assertEquals(1, andDescr.getDescrs().size());\n        assertTrue(andDescr.getDescrs().get(0) instanceof ExprConstraintDescr);\n        exprConstraintDescr = (ExprConstraintDescr) andDescr.getDescrs().get(0);\n        assertFalse(exprConstraintDescr.isNegated());\n        assertEquals(ExprConstraintDescr.Type.NAMED, exprConstraintDescr.getType());\n        expected = \"value < 35\";\n        assertEquals(expected, exprConstraintDescr.getExpression());\n        OrDescr nestedOrDescr = (OrDescr) existsOrDescr.getDescrs().get(1);\n        assertEquals(1, nestedOrDescr.getDescrs().size());\n        assertTrue(nestedOrDescr.getDescrs().get(0) instanceof PatternDescr);\n        patternDescr = (PatternDescr) nestedOrDescr.getDescrs().get(0);\n        assertEquals(temperatureField, patternDescr.getObjectType());\n        assertNull(patternDescr.getIdentifier());\n        assertTrue(patternDescr.getConstraint() instanceof AndDescr);\n        andDescr = (AndDescr) patternDescr.getConstraint();\n        assertEquals(1, andDescr.getDescrs().size());\n        assertTrue(andDescr.getDescrs().get(0) instanceof ExprConstraintDescr);\n        exprConstraintDescr = (ExprConstraintDescr) andDescr.getDescrs().get(0);\n        assertFalse(exprConstraintDescr.isNegated());\n        assertEquals(ExprConstraintDescr.Type.NAMED, exprConstraintDescr.getType());\n        expected = \"value > 85\";\n        assertEquals(expected, exprConstraintDescr.getExpression());\n    }", "signature": "void declareConstraintsXor()", "full_signature": "@Test public void declareConstraintsXor()", "class_method_signature": "KiePMMLDescrLhsFactoryTest.declareConstraintsXor()", "testcase": true, "constructor": false, "invocations": ["asList", "singletonList", "singletonList", "declareConstraintsXor", "factory", "assertNotNull", "getDescr", "assertNotNull", "getDescrs", "getDescr", "assertEquals", "size", "getDescrs", "getDescr", "assertTrue", "get", "getDescrs", "getDescr", "get", "getDescrs", "getDescr", "assertEquals", "size", "getDescrs", "assertTrue", "get", "getDescrs", "assertTrue", "get", "getDescrs", "get", "getDescrs", "assertEquals", "size", "getDescrs", "assertTrue", "get", "getDescrs", "get", "getDescrs", "assertTrue", "get", "getDescrs", "assertTrue", "get", "getDescrs", "get", "getDescrs", "assertEquals", "getObjectType", "assertNull", "getIdentifier", "assertTrue", "getConstraint", "getConstraint", "assertEquals", "size", "getDescrs", "assertTrue", "get", "getDescrs", "get", "getDescrs", "assertFalse", "isNegated", "assertEquals", "getType", "assertEquals", "getExpression", "get", "getDescrs", "assertEquals", "getObjectType", "assertNull", "getIdentifier", "assertTrue", "getConstraint", "getConstraint", "assertEquals", "size", "getDescrs", "assertTrue", "get", "getDescrs", "get", "getDescrs", "assertFalse", "isNegated", "assertEquals", "getType", "assertEquals", "getExpression", "get", "getDescrs", "assertEquals", "size", "getDescrs", "assertTrue", "get", "getDescrs", "get", "getDescrs", "assertEquals", "size", "getDescrs", "assertTrue", "get", "getDescrs", "assertTrue", "get", "getDescrs", "get", "getDescrs", "assertEquals", "getObjectType", "assertNull", "getIdentifier", "assertTrue", "getConstraint", "getConstraint", "assertEquals", "size", "getDescrs", "assertTrue", "get", "getDescrs", "get", "getDescrs", "assertFalse", "isNegated", "assertEquals", "getType", "assertEquals", "getExpression", "get", "getDescrs", "assertEquals", "size", "getDescrs", "assertTrue", "get", "getDescrs", "get", "getDescrs", "assertEquals", "getObjectType", "assertNull", "getIdentifier", "assertTrue", "getConstraint", "getConstraint", "assertEquals", "size", "getDescrs", "assertTrue", "get", "getDescrs", "get", "getDescrs", "assertFalse", "isNegated", "assertEquals", "getType", "assertEquals", "getExpression"]}, "focal_class": {"identifier": "KiePMMLDescrLhsFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String INPUT_FIELD = \"$inputField\";", "modifier": "static final", "type": "String", "declarator": "INPUT_FIELD = \"$inputField\"", "var_name": "INPUT_FIELD"}, {"original_string": "static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";", "modifier": "static final", "type": "String", "declarator": "INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\"", "var_name": "INPUT_FIELD_CONDITIONAL"}, {"original_string": "static final String VALUE_PATTERN = \"value %s %s\";", "modifier": "static final", "type": "String", "declarator": "VALUE_PATTERN = \"value %s %s\"", "var_name": "VALUE_PATTERN"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName())", "var_name": "logger"}, {"original_string": "final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;", "modifier": "final", "type": "CEDescrBuilder<RuleDescrBuilder, AndDescr>", "declarator": "builder", "var_name": "builder"}], "methods": [{"identifier": "KiePMMLDescrLhsFactory", "parameters": "(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "modifiers": "private", "return": "", "signature": " KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "full_signature": "private  KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "class_method_signature": "KiePMMLDescrLhsFactory.KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "testcase": false, "constructor": true}, {"identifier": "factory", "parameters": "(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "modifiers": "public static", "return": "KiePMMLDescrLhsFactory", "signature": "KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "full_signature": "public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "class_method_signature": "KiePMMLDescrLhsFactory.factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "testcase": false, "constructor": false}, {"identifier": "declareLhs", "parameters": "(final KiePMMLDroolsRule rule)", "modifiers": "public", "return": "void", "signature": "void declareLhs(final KiePMMLDroolsRule rule)", "full_signature": "public void declareLhs(final KiePMMLDroolsRule rule)", "class_method_signature": "KiePMMLDescrLhsFactory.declareLhs(final KiePMMLDroolsRule rule)", "testcase": false, "constructor": false}, {"identifier": "declareConstraintsAndOr", "parameters": "(final List<KiePMMLFieldOperatorValue> orConstraints, final CEDescrBuilder<?, ?> andOrBuilder)", "modifiers": "protected", "return": "void", "signature": "void declareConstraintsAndOr(final List<KiePMMLFieldOperatorValue> orConstraints, final CEDescrBuilder<?, ?> andOrBuilder)", "full_signature": "protected void declareConstraintsAndOr(final List<KiePMMLFieldOperatorValue> orConstraints, final CEDescrBuilder<?, ?> andOrBuilder)", "class_method_signature": "KiePMMLDescrLhsFactory.declareConstraintsAndOr(final List<KiePMMLFieldOperatorValue> orConstraints, final CEDescrBuilder<?, ?> andOrBuilder)", "testcase": false, "constructor": false}, {"identifier": "declareConstraintsXor", "parameters": "(final List<KiePMMLFieldOperatorValue> xorConstraints)", "modifiers": "protected", "return": "void", "signature": "void declareConstraintsXor(final List<KiePMMLFieldOperatorValue> xorConstraints)", "full_signature": "protected void declareConstraintsXor(final List<KiePMMLFieldOperatorValue> xorConstraints)", "class_method_signature": "KiePMMLDescrLhsFactory.declareConstraintsXor(final List<KiePMMLFieldOperatorValue> xorConstraints)", "testcase": false, "constructor": false}, {"identifier": "declareNotConstraints", "parameters": "(final List<KiePMMLFieldOperatorValue> notConstraints)", "modifiers": "protected", "return": "void", "signature": "void declareNotConstraints(final List<KiePMMLFieldOperatorValue> notConstraints)", "full_signature": "protected void declareNotConstraints(final List<KiePMMLFieldOperatorValue> notConstraints)", "class_method_signature": "KiePMMLDescrLhsFactory.declareNotConstraints(final List<KiePMMLFieldOperatorValue> notConstraints)", "testcase": false, "constructor": false}, {"identifier": "commonDeclarePatternWithConstraint", "parameters": "(final CEDescrBuilder<?, ?> descrBuilder, final String patternType, final String constraintString)", "modifiers": "protected", "return": "void", "signature": "void commonDeclarePatternWithConstraint(final CEDescrBuilder<?, ?> descrBuilder, final String patternType, final String constraintString)", "full_signature": "protected void commonDeclarePatternWithConstraint(final CEDescrBuilder<?, ?> descrBuilder, final String patternType, final String constraintString)", "class_method_signature": "KiePMMLDescrLhsFactory.commonDeclarePatternWithConstraint(final CEDescrBuilder<?, ?> descrBuilder, final String patternType, final String constraintString)", "testcase": false, "constructor": false}, {"identifier": "declareConstraintIn", "parameters": "(final String patternType, final List<Object> values)", "modifiers": "protected", "return": "void", "signature": "void declareConstraintIn(final String patternType, final List<Object> values)", "full_signature": "protected void declareConstraintIn(final String patternType, final List<Object> values)", "class_method_signature": "KiePMMLDescrLhsFactory.declareConstraintIn(final String patternType, final List<Object> values)", "testcase": false, "constructor": false}, {"identifier": "declareConstraintNotIn", "parameters": "(final String patternType, final List<Object> values)", "modifiers": "protected", "return": "void", "signature": "void declareConstraintNotIn(final String patternType, final List<Object> values)", "full_signature": "protected void declareConstraintNotIn(final String patternType, final List<Object> values)", "class_method_signature": "KiePMMLDescrLhsFactory.declareConstraintNotIn(final String patternType, final List<Object> values)", "testcase": false, "constructor": false}, {"identifier": "declareIfBreak", "parameters": "(String ifBreakField, String ifBreakOperator, Object ifBreakValue)", "modifiers": "protected", "return": "void", "signature": "void declareIfBreak(String ifBreakField, String ifBreakOperator, Object ifBreakValue)", "full_signature": "protected void declareIfBreak(String ifBreakField, String ifBreakOperator, Object ifBreakValue)", "class_method_signature": "KiePMMLDescrLhsFactory.declareIfBreak(String ifBreakField, String ifBreakOperator, Object ifBreakValue)", "testcase": false, "constructor": false}, {"identifier": "getInNotInConstraint", "parameters": "(final List<Object> values)", "modifiers": "protected", "return": "String", "signature": "String getInNotInConstraint(final List<Object> values)", "full_signature": "protected String getInNotInConstraint(final List<Object> values)", "class_method_signature": "KiePMMLDescrLhsFactory.getInNotInConstraint(final List<Object> values)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrLhsFactory.java"}, "focal_method": {"identifier": "declareConstraintsXor", "parameters": "(final List<KiePMMLFieldOperatorValue> xorConstraints)", "modifiers": "protected", "return": "void", "body": "protected void declareConstraintsXor(final List<KiePMMLFieldOperatorValue> xorConstraints) {\n        if (xorConstraints.size() != 2) {\n            throw new KiePMMLException(\"Expecting two fields for XOR constraints, retrieved \" + xorConstraints.size());\n        }\n        final String[] keys = new String[xorConstraints.size()];\n        final String[] values = new String[xorConstraints.size()];\n        for (int i = 0; i < keys.length; i++) {\n            keys[i] = xorConstraints.get(i).getName();\n            values[i] = xorConstraints.get(i).getConstraintsAsString();\n        }\n        final CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr> andBuilder = builder.and();\n        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder = andBuilder.not().and();\n        commonDeclarePatternWithConstraint(notBuilder, keys[0], values[0]);\n        commonDeclarePatternWithConstraint(notBuilder, keys[1], values[1]);\n        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, ExistsDescr>, OrDescr> existsBuilder = andBuilder.exists().or();\n        commonDeclarePatternWithConstraint(existsBuilder, keys[0], values[0]);\n        commonDeclarePatternWithConstraint(existsBuilder.or(), keys[1], values[1]);\n    }", "signature": "void declareConstraintsXor(final List<KiePMMLFieldOperatorValue> xorConstraints)", "full_signature": "protected void declareConstraintsXor(final List<KiePMMLFieldOperatorValue> xorConstraints)", "class_method_signature": "KiePMMLDescrLhsFactory.declareConstraintsXor(final List<KiePMMLFieldOperatorValue> xorConstraints)", "testcase": false, "constructor": false, "invocations": ["size", "size", "size", "size", "getName", "get", "getConstraintsAsString", "get", "and", "and", "not", "commonDeclarePatternWithConstraint", "commonDeclarePatternWithConstraint", "or", "exists", "commonDeclarePatternWithConstraint", "commonDeclarePatternWithConstraint", "or"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}