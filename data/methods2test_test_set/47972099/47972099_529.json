{"test_class": {"identifier": "LossyCountingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(LossyCountingTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(LossyCountingTest.class)", "var_name": "LOG"}, {"original_string": "static final double fraction = 0.01;", "modifier": "static final", "type": "double", "declarator": "fraction = 0.01", "var_name": "fraction"}, {"original_string": "static final double error = 0.005;", "modifier": "static final", "type": "double", "declarator": "error = 0.005", "var_name": "error"}, {"original_string": "static final Random r = new Random();", "modifier": "static final", "type": "Random", "declarator": "r = new Random()", "var_name": "r"}, {"original_string": "static final int cardinality = 1000000;", "modifier": "static final", "type": "int", "declarator": "cardinality = 1000000", "var_name": "cardinality"}, {"original_string": "static final int maxScale = 100000;", "modifier": "static final", "type": "int", "declarator": "maxScale = 100000", "var_name": "maxScale"}], "file": "flink-contrib/flink-operator-stats/src/test/java/org/apache/flink/contrib/operatorstatistics/heavyhitters/LossyCountingTest.java"}, "test_case": {"identifier": "merge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void merge() throws HeavyHitterMergeException {\n\t\tint numToMerge = 5;\n\t\tLossyCounting merged = new LossyCounting(fraction,error);\n\t\tLossyCounting[] sketches = new LossyCounting[numToMerge];\n\n\t\tlong[] actualFreq = new long[maxScale];\n\t\tlong totalCardinality = 0;\n\n\t\tfor (int i = 0; i < numToMerge; i++) {\n\t\t\tsketches[i] = new LossyCounting(fraction,error);\n\t\t\tfor (int j = 0; j < cardinality; j++) {\n\t\t\t\tint val;\n\t\t\t\tif (r.nextDouble()<0.1){\n\t\t\t\t\tval = r.nextInt(10);\n\t\t\t\t}else{\n\t\t\t\t\tval = r.nextInt(maxScale);\n\t\t\t\t}\n\t\t\t\tsketches[i].addObject(val);\n\t\t\t\tactualFreq[val]++;\n\t\t\t\ttotalCardinality++;\n\t\t\t}\n\t\t\tmerged.merge(sketches[i]);\n\t\t}\n\n\t\tSystem.out.println(\"\\nMERGED\\n\" + merged.toString());\n\n\t\tMap<Object,Long> mergedHeavyHitters = merged.getHeavyHitters();\n\t\tlong frequency = (long)(totalCardinality*fraction);\n\t\tlong minFrequency = (long)(totalCardinality*(fraction-error));\n\n\t\tSystem.out.println(\"Frequency Threshold:\" + frequency);\n\t\tSystem.out.println(\"False positive Threshold:\" + minFrequency);\n\t\tSystem.out.println(\"Frequency of 14:\" + actualFreq[14]);\n\n\t\tSystem.out.println(\"Real frequent items: \");\n\n\t\tfor (int i = 0; i < actualFreq.length; ++i) {\n\t\t\tif (actualFreq[i]>=frequency) {\n\t\t\t\tSystem.out.println(i+\": \"+actualFreq[i]);\n\t\t\t\tassertTrue(\"All items with freq. > s.n will be found. Item \" + i + \". Real freq. \" + actualFreq[i]+\" Expected freq.\"+ frequency, mergedHeavyHitters.containsKey(i));\n\t\t\t}\n\t\t\tif (mergedHeavyHitters.containsKey(i)){\n\t\t\t\tassertTrue(\"no item with freq. < (s-e).n will be found. Item \" + i + \". Real freq. \" + actualFreq[i]+\" Min freq.\"+ minFrequency, actualFreq[i]>=minFrequency);\n\t\t\t\tassertTrue(\"the estimated freq. underestimates the true freq. by < e.n. Real freq. \" + actualFreq[i] + \" Lower bound \"+mergedHeavyHitters.get(i),\n\t\t\t\t\t\tMath.abs(mergedHeavyHitters.get(i)-actualFreq[i]) < error*cardinality);\n\t\t\t}\n\t\t}\n\n\t}", "signature": "void merge()", "full_signature": "@Test public void merge()", "class_method_signature": "LossyCountingTest.merge()", "testcase": true, "constructor": false, "invocations": ["nextDouble", "nextInt", "nextInt", "addObject", "merge", "println", "toString", "getHeavyHitters", "println", "println", "println", "println", "println", "assertTrue", "containsKey", "containsKey", "assertTrue", "assertTrue", "get", "abs", "get"]}, "focal_class": {"identifier": "LossyCounting", "superclass": "", "interfaces": "implements HeavyHitter, Serializable", "fields": [{"original_string": "private double fraction;", "modifier": "private", "type": "double", "declarator": "fraction", "var_name": "fraction"}, {"original_string": "private double error;", "modifier": "private", "type": "double", "declarator": "error", "var_name": "error"}, {"original_string": "private long cardinality;", "modifier": "private", "type": "long", "declarator": "cardinality", "var_name": "cardinality"}, {"original_string": "private Map<Object,Counter> heavyHitters;", "modifier": "private", "type": "Map<Object,Counter>", "declarator": "heavyHitters", "var_name": "heavyHitters"}, {"original_string": "private long bucket;", "modifier": "private", "type": "long", "declarator": "bucket", "var_name": "bucket"}], "methods": [{"identifier": "LossyCounting", "parameters": "(double fraction, double error)", "modifiers": "public", "return": "", "signature": " LossyCounting(double fraction, double error)", "full_signature": "public  LossyCounting(double fraction, double error)", "class_method_signature": "LossyCounting.LossyCounting(double fraction, double error)", "testcase": false, "constructor": true}, {"identifier": "addObject", "parameters": "(Object o)", "modifiers": "@Override public", "return": "void", "signature": "void addObject(Object o)", "full_signature": "@Override public void addObject(Object o)", "class_method_signature": "LossyCounting.addObject(Object o)", "testcase": false, "constructor": false}, {"identifier": "updateHeavyHitters", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateHeavyHitters()", "full_signature": "public void updateHeavyHitters()", "class_method_signature": "LossyCounting.updateHeavyHitters()", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(HeavyHitter toMerge)", "modifiers": "public", "return": "void", "signature": "void merge(HeavyHitter toMerge)", "full_signature": "public void merge(HeavyHitter toMerge)", "class_method_signature": "LossyCounting.merge(HeavyHitter toMerge)", "testcase": false, "constructor": false}, {"identifier": "getHeavyHitters", "parameters": "()", "modifiers": "@Override public", "return": "HashMap<Object,Long>", "signature": "HashMap<Object,Long> getHeavyHitters()", "full_signature": "@Override public HashMap<Object,Long> getHeavyHitters()", "class_method_signature": "LossyCounting.getHeavyHitters()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LossyCounting.toString()", "testcase": false, "constructor": false}], "file": "flink-contrib/flink-operator-stats/src/main/java/org/apache/flink/contrib/operatorstatistics/heavyhitters/LossyCounting.java"}, "focal_method": {"identifier": "merge", "parameters": "(HeavyHitter toMerge)", "modifiers": "public", "return": "void", "body": "public void merge(HeavyHitter toMerge) throws HeavyHitterMergeException {\n\t\ttry{\n\t\t\tLossyCounting lsToMerge = (LossyCounting)toMerge;\n\t\t\tif (this.fraction!=lsToMerge.fraction){\n\t\t\t\tthrow new HeavyHitterMergeException(\"Both heavy hitter structures must be identical\");\n\t\t\t}\n\t\t\tthis.cardinality+=lsToMerge.cardinality;\n\t\t\tthis.bucket = (long)Math.floor(cardinality*error);\n\t\t\tfor (Map.Entry<Object, Counter> entry : lsToMerge.heavyHitters.entrySet()){\n\t\t\t\tCounter counter = this.heavyHitters.get(entry.getKey());\n\t\t\t\tif (counter==null){\n\t\t\t\t\tthis.heavyHitters.put(entry.getKey(),entry.getValue());\n\t\t\t\t}else{\n\t\t\t\t\tCounter mergingCounter = entry.getValue();\n\t\t\t\t\tthis.heavyHitters.put(entry.getKey(),\n\t\t\t\t\t\t\tnew Counter(mergingCounter.lowerBound+counter.lowerBound, mergingCounter.frequencyError +counter.frequencyError));\n\t\t\t\t}\n\t\t\t}\n\t\t\tupdateHeavyHitters();\n\t\t}catch (ClassCastException ex){\n\t\t\tthrow new HeavyHitterMergeException(\"Both heavy hitter structures must be identical\");\n\t\t}\n\t}", "signature": "void merge(HeavyHitter toMerge)", "full_signature": "public void merge(HeavyHitter toMerge)", "class_method_signature": "LossyCounting.merge(HeavyHitter toMerge)", "testcase": false, "constructor": false, "invocations": ["floor", "entrySet", "get", "getKey", "put", "getKey", "getValue", "getValue", "put", "getKey", "updateHeavyHitters"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}