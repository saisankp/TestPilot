{"test_class": {"identifier": "ModuleUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons/src/test/java/org/axway/grapes/commons/utils/ModuleUtilsTest.java"}, "test_case": {"identifier": "testGetAllTheArtifactsOfAModuleThatHasSubModules", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAllTheArtifactsOfAModuleThatHasSubModules(){\n        final Module module = DataModelFactory.createModule(\"module1\", \"1.0.0-SNAPSHOT\");\n        final Module subModule = DataModelFactory.createModule(\"module11\", \"1.0.0-SNAPSHOT\");\n        final Module subSubModule = DataModelFactory.createModule(\"module111\", \"1.0.0-SNAPSHOT\");\n        module.addSubmodule(subModule);\n        subModule.addSubmodule(subSubModule);\n\n        final Artifact artifact1 = DataModelFactory.createArtifact(\"com.my.company\", \"artifact1\", \"1.0.0-SNAPSHOT\", null, \"jar\", \"jar\");\n        module.addArtifact(artifact1);\n\n        final Artifact artifact2 = DataModelFactory.createArtifact(\"com.my.company\", \"artifact2\", \"1.0.0-SNAPSHOT\", null, \"jar\", \"jar\");\n        subModule.addArtifact(artifact2);\n\n        final Artifact artifact3 = DataModelFactory.createArtifact(\"com.my.company\", \"artifact3\", \"1.0.0-SNAPSHOT\", null, \"jar\", \"jar\");\n        subSubModule.addArtifact(artifact3);\n\n        final List<Artifact> artifacts = ModuleUtils.getAllArtifacts(module);\n        assertEquals(3, artifacts.size());\n        assertTrue(artifacts.contains(artifact1));\n        assertTrue(artifacts.contains(artifact2));\n        assertTrue(artifacts.contains(artifact3));\n\n    }", "signature": "void testGetAllTheArtifactsOfAModuleThatHasSubModules()", "full_signature": "@Test public void testGetAllTheArtifactsOfAModuleThatHasSubModules()", "class_method_signature": "ModuleUtilsTest.testGetAllTheArtifactsOfAModuleThatHasSubModules()", "testcase": true, "constructor": false, "invocations": ["createModule", "createModule", "createModule", "addSubmodule", "addSubmodule", "createArtifact", "addArtifact", "createArtifact", "addArtifact", "createArtifact", "addArtifact", "getAllArtifacts", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "ModuleUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ModuleUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ModuleUtils()", "full_signature": "private  ModuleUtils()", "class_method_signature": "ModuleUtils.ModuleUtils()", "testcase": false, "constructor": true}, {"identifier": "getAllArtifacts", "parameters": "(final Module module)", "modifiers": "public static", "return": "List<Artifact>", "signature": "List<Artifact> getAllArtifacts(final Module module)", "full_signature": "public static List<Artifact> getAllArtifacts(final Module module)", "class_method_signature": "ModuleUtils.getAllArtifacts(final Module module)", "testcase": false, "constructor": false}, {"identifier": "getAllDependencies", "parameters": "(final Module module)", "modifiers": "public static", "return": "List<Dependency>", "signature": "List<Dependency> getAllDependencies(final Module module)", "full_signature": "public static List<Dependency> getAllDependencies(final Module module)", "class_method_signature": "ModuleUtils.getAllDependencies(final Module module)", "testcase": false, "constructor": false}, {"identifier": "getAllDependencies", "parameters": "(final Module module, final List<String> producedArtifacts)", "modifiers": "public static", "return": "Set<Dependency>", "signature": "Set<Dependency> getAllDependencies(final Module module, final List<String> producedArtifacts)", "full_signature": "public static Set<Dependency> getAllDependencies(final Module module, final List<String> producedArtifacts)", "class_method_signature": "ModuleUtils.getAllDependencies(final Module module, final List<String> producedArtifacts)", "testcase": false, "constructor": false}, {"identifier": "getCorporateDependencies", "parameters": "(final Module module, final List<String> corporateFilters)", "modifiers": "public static", "return": "List<Dependency>", "signature": "List<Dependency> getCorporateDependencies(final Module module, final List<String> corporateFilters)", "full_signature": "public static List<Dependency> getCorporateDependencies(final Module module, final List<String> corporateFilters)", "class_method_signature": "ModuleUtils.getCorporateDependencies(final Module module, final List<String> corporateFilters)", "testcase": false, "constructor": false}, {"identifier": "getThirdPartyLibraries", "parameters": "(final Module module, final List<String> corporateFilters)", "modifiers": "public static", "return": "List<Dependency>", "signature": "List<Dependency> getThirdPartyLibraries(final Module module, final List<String> corporateFilters)", "full_signature": "public static List<Dependency> getThirdPartyLibraries(final Module module, final List<String> corporateFilters)", "class_method_signature": "ModuleUtils.getThirdPartyLibraries(final Module module, final List<String> corporateFilters)", "testcase": false, "constructor": false}, {"identifier": "generateCorporatePattern", "parameters": "(final List<String> corporateFilters)", "modifiers": "private static", "return": "Pattern", "signature": "Pattern generateCorporatePattern(final List<String> corporateFilters)", "full_signature": "private static Pattern generateCorporatePattern(final List<String> corporateFilters)", "class_method_signature": "ModuleUtils.generateCorporatePattern(final List<String> corporateFilters)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/org/axway/grapes/commons/utils/ModuleUtils.java"}, "focal_method": {"identifier": "getAllArtifacts", "parameters": "(final Module module)", "modifiers": "public static", "return": "List<Artifact>", "body": "public static List<Artifact> getAllArtifacts(final Module module){\n        final List<Artifact> artifacts = new ArrayList<Artifact>();\n\n        for(final Module subModule: module.getSubmodules()){\n            artifacts.addAll(getAllArtifacts(subModule));\n        }\n\n        artifacts.addAll(module.getArtifacts());\n\n        return artifacts;\n    }", "signature": "List<Artifact> getAllArtifacts(final Module module)", "full_signature": "public static List<Artifact> getAllArtifacts(final Module module)", "class_method_signature": "ModuleUtils.getAllArtifacts(final Module module)", "testcase": false, "constructor": false, "invocations": ["getSubmodules", "addAll", "getAllArtifacts", "addAll", "getArtifacts"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}