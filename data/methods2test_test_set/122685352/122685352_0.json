{"test_class": {"identifier": "PostViewModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern urlPattern = Pattern.compile(\n            \"(?:^|[\\\\W])(((ht|f)tp(s?):\\\\/\\\\/|www\\\\.)\"\n                    + \"(([\\\\w\\\\-]+\\\\.){1,}?([\\\\w\\\\-.~]+\\\\/?)*\"\n                    + \"[\\\\p{Alnum}.,%_=?&#\\\\-+()\\\\[\\\\]\\\\*$~@!:/{};']*))\",\n            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);", "modifier": "private static final", "type": "Pattern", "declarator": "urlPattern = Pattern.compile(\n            \"(?:^|[\\\\W])(((ht|f)tp(s?):\\\\/\\\\/|www\\\\.)\"\n                    + \"(([\\\\w\\\\-]+\\\\.){1,}?([\\\\w\\\\-.~]+\\\\/?)*\"\n                    + \"[\\\\p{Alnum}.,%_=?&#\\\\-+()\\\\[\\\\]\\\\*$~@!:/{};']*))\",\n            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL)", "var_name": "urlPattern"}], "file": "app/src/test/java/eu/stuifzand/micropub/PostViewModelTest.java"}, "test_case": {"identifier": "postStatusNotSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void postStatusNotSet() {\n        PostViewModel postModel = new PostViewModel();\n        Post post = postModel.getPost();\n        assertFalse(post.hasPostStatus());\n    }", "signature": "void postStatusNotSet()", "full_signature": "@Test public void postStatusNotSet()", "class_method_signature": "PostViewModelTest.postStatusNotSet()", "testcase": true, "constructor": false, "invocations": ["getPost", "assertFalse", "hasPostStatus"]}, "focal_class": {"identifier": "PostViewModel", "superclass": "extends ViewModel", "interfaces": "", "fields": [{"original_string": "private static final Pattern urlPattern = Pattern.compile(\n            \"(?:^|[\\\\W])(((ht|f)tp(s?):\\\\/\\\\/|www\\\\.)\"\n                    + \"(([\\\\w\\\\-]+\\\\.){1,}?([\\\\w\\\\-.~]+\\\\/?)*\"\n                    + \"[\\\\p{Alnum}.,%_=?&#\\\\-+()\\\\[\\\\]\\\\*$~@!:/{};']*))\",\n            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);", "modifier": "private static final", "type": "Pattern", "declarator": "urlPattern = Pattern.compile(\n            \"(?:^|[\\\\W])(((ht|f)tp(s?):\\\\/\\\\/|www\\\\.)\"\n                    + \"(([\\\\w\\\\-]+\\\\.){1,}?([\\\\w\\\\-.~]+\\\\/?)*\"\n                    + \"[\\\\p{Alnum}.,%_=?&#\\\\-+()\\\\[\\\\]\\\\*$~@!:/{};']*))\",\n            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL)", "var_name": "urlPattern"}, {"original_string": "public final ObservableField<String> name = new ObservableField<>();", "modifier": "public final", "type": "ObservableField<String>", "declarator": "name = new ObservableField<>()", "var_name": "name"}, {"original_string": "public final ObservableField<String> content = new ObservableField<>();", "modifier": "public final", "type": "ObservableField<String>", "declarator": "content = new ObservableField<>()", "var_name": "content"}, {"original_string": "public final ObservableField<String> category = new ObservableField<>();", "modifier": "public final", "type": "ObservableField<String>", "declarator": "category = new ObservableField<>()", "var_name": "category"}, {"original_string": "public final ObservableField<String> inReplyTo = new ObservableField<>();", "modifier": "public final", "type": "ObservableField<String>", "declarator": "inReplyTo = new ObservableField<>()", "var_name": "inReplyTo"}, {"original_string": "public final ObservableField<String> photo = new ObservableField<>();", "modifier": "public final", "type": "ObservableField<String>", "declarator": "photo = new ObservableField<>()", "var_name": "photo"}, {"original_string": "public final ObservableField<String> likeOf = new ObservableField<>();", "modifier": "public final", "type": "ObservableField<String>", "declarator": "likeOf = new ObservableField<>()", "var_name": "likeOf"}, {"original_string": "public final ObservableField<String> bookmarkOf = new ObservableField<>();", "modifier": "public final", "type": "ObservableField<String>", "declarator": "bookmarkOf = new ObservableField<>()", "var_name": "bookmarkOf"}, {"original_string": "public final ObservableField<String> postStatus = new ObservableField<>();", "modifier": "public final", "type": "ObservableField<String>", "declarator": "postStatus = new ObservableField<>()", "var_name": "postStatus"}, {"original_string": "public final ObservableField<String> visibility = new ObservableField<>();", "modifier": "public final", "type": "ObservableField<String>", "declarator": "visibility = new ObservableField<>()", "var_name": "visibility"}, {"original_string": "public final ObservableInt checkedVisibility = new ObservableInt();", "modifier": "public final", "type": "ObservableInt", "declarator": "checkedVisibility = new ObservableInt()", "var_name": "checkedVisibility"}], "methods": [{"identifier": "PostViewModel", "parameters": "()", "modifiers": "public", "return": "", "signature": " PostViewModel()", "full_signature": "public  PostViewModel()", "class_method_signature": "PostViewModel.PostViewModel()", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "PostViewModel.clear()", "testcase": false, "constructor": false}, {"identifier": "findReplyTo", "parameters": "(String urlOrNote)", "modifiers": "public", "return": "void", "signature": "void findReplyTo(String urlOrNote)", "full_signature": "public void findReplyTo(String urlOrNote)", "class_method_signature": "PostViewModel.findReplyTo(String urlOrNote)", "testcase": false, "constructor": false}, {"identifier": "findLikeOf", "parameters": "(String urlOrNote)", "modifiers": "public", "return": "void", "signature": "void findLikeOf(String urlOrNote)", "full_signature": "public void findLikeOf(String urlOrNote)", "class_method_signature": "PostViewModel.findLikeOf(String urlOrNote)", "testcase": false, "constructor": false}, {"identifier": "findBookmarkOf", "parameters": "(String urlOrNote)", "modifiers": "public", "return": "void", "signature": "void findBookmarkOf(String urlOrNote)", "full_signature": "public void findBookmarkOf(String urlOrNote)", "class_method_signature": "PostViewModel.findBookmarkOf(String urlOrNote)", "testcase": false, "constructor": false}, {"identifier": "setPhoto", "parameters": "(String url)", "modifiers": "public", "return": "void", "signature": "void setPhoto(String url)", "full_signature": "public void setPhoto(String url)", "class_method_signature": "PostViewModel.setPhoto(String url)", "testcase": false, "constructor": false}, {"identifier": "getPost", "parameters": "()", "modifiers": "public", "return": "Post", "signature": "Post getPost()", "full_signature": "public Post getPost()", "class_method_signature": "PostViewModel.getPost()", "testcase": false, "constructor": false}, {"identifier": "setVisibility", "parameters": "(View view, Boolean value)", "modifiers": "@BindingAdapter(\"android:visibility\") public static", "return": "void", "signature": "void setVisibility(View view, Boolean value)", "full_signature": "@BindingAdapter(\"android:visibility\") public static void setVisibility(View view, Boolean value)", "class_method_signature": "PostViewModel.setVisibility(View view, Boolean value)", "testcase": false, "constructor": false}], "file": "app/src/main/java/eu/stuifzand/micropub/PostViewModel.java"}, "focal_method": {"identifier": "getPost", "parameters": "()", "modifiers": "public", "return": "Post", "body": "public Post getPost() {\n        Post post = new Post(name.get(), content.get(), category.get(), HttpUrl.parse(inReplyTo.get()));\n        if (!this.photo.get().equals(\"\")) {\n            post.setPhoto(this.photo.get());\n        }\n        if (!this.likeOf.get().equals(\"\")) {\n            post.setLikeOf(HttpUrl.parse(likeOf.get()));\n        }\n        if (!this.bookmarkOf.get().equals(\"\")) {\n            post.setBookmarkOf(HttpUrl.parse(bookmarkOf.get()));\n        }\n        if (!this.postStatus.get().equals(\"\")) {\n            post.setPostStatus((postStatus.get()));\n        }\n\n        int id = this.checkedVisibility.get();\n        switch (id) {\n            case R.id.radioButtonPublic:\n                this.visibility.set(\"public\");\n                break;\n\n            case R.id.radioButtonUnlisted:\n                this.visibility.set(\"unlisted\");\n                break;\n\n            case R.id.radioButtonProtected:\n                this.visibility.set(\"protected\");\n                break;\n\n            case R.id.radioButtonPrivate:\n                this.visibility.set(\"private\");\n                break;\n        }\n\n        if (!this.visibility.get().equals(\"\")) {\n            post.setVisibility((visibility.get()));\n        }\n        return post;\n    }", "signature": "Post getPost()", "full_signature": "public Post getPost()", "class_method_signature": "PostViewModel.getPost()", "testcase": false, "constructor": false, "invocations": ["get", "get", "get", "parse", "get", "equals", "get", "setPhoto", "get", "equals", "get", "setLikeOf", "parse", "get", "equals", "get", "setBookmarkOf", "parse", "get", "equals", "get", "setPostStatus", "get", "get", "set", "set", "set", "set", "equals", "get", "setVisibility", "get"]}, "repository": {"repo_id": 122685352, "url": "https://github.com/pstuifzand/micropub-android", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 430, "license": "licensed"}}