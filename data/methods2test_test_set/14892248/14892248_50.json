{"test_class": {"identifier": "PdfEncryptionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DEST_FOLDER = \"./target/com/itextpdf/test/pdf/PdfEncryptionTest/\";", "modifier": "public static final", "type": "String", "declarator": "DEST_FOLDER = \"./target/com/itextpdf/test/pdf/PdfEncryptionTest/\"", "var_name": "DEST_FOLDER"}, {"original_string": "public static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/text/pdf/PdfEncryptionTest/\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/text/pdf/PdfEncryptionTest/\"", "var_name": "SOURCE_FOLDER"}, {"original_string": "public static byte[] ownerPassword = \"ownerPassword\".getBytes();", "modifier": "public static", "type": "byte[]", "declarator": "ownerPassword = \"ownerPassword\".getBytes()", "var_name": "ownerPassword"}], "file": "itext/src/test/java/com/itextpdf/text/pdf/PdfEncryptionTest.java"}, "test_case": {"identifier": "computeUserPasswordAES256", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void computeUserPasswordAES256() throws Exception {\n        String encryptedPdf = SOURCE_FOLDER + \"cmp_AES256Encrypted.pdf\";\n        PdfReader reader = new PdfReader(encryptedPdf, ownerPassword);\n        byte[] password = reader.computeUserPassword();\n        reader.close();\n\n        assertNull(password);\n    }", "signature": "void computeUserPasswordAES256()", "full_signature": "@Test public void computeUserPasswordAES256()", "class_method_signature": "PdfEncryptionTest.computeUserPasswordAES256()", "testcase": true, "constructor": false, "invocations": ["computeUserPassword", "close", "assertNull"]}, "focal_class": {"identifier": "PdfEncryption", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int STANDARD_ENCRYPTION_40 = 2;", "modifier": "public static final", "type": "int", "declarator": "STANDARD_ENCRYPTION_40 = 2", "var_name": "STANDARD_ENCRYPTION_40"}, {"original_string": "public static final int STANDARD_ENCRYPTION_128 = 3;", "modifier": "public static final", "type": "int", "declarator": "STANDARD_ENCRYPTION_128 = 3", "var_name": "STANDARD_ENCRYPTION_128"}, {"original_string": "public static final int AES_128 = 4;", "modifier": "public static final", "type": "int", "declarator": "AES_128 = 4", "var_name": "AES_128"}, {"original_string": "public static final int AES_256 = 5;", "modifier": "public static final", "type": "int", "declarator": "AES_256 = 5", "var_name": "AES_256"}, {"original_string": "private static final byte[] pad = { (byte) 0x28, (byte) 0xBF, (byte) 0x4E,\n\t\t\t(byte) 0x5E, (byte) 0x4E, (byte) 0x75, (byte) 0x8A, (byte) 0x41,\n\t\t\t(byte) 0x64, (byte) 0x00, (byte) 0x4E, (byte) 0x56, (byte) 0xFF,\n\t\t\t(byte) 0xFA, (byte) 0x01, (byte) 0x08, (byte) 0x2E, (byte) 0x2E,\n\t\t\t(byte) 0x00, (byte) 0xB6, (byte) 0xD0, (byte) 0x68, (byte) 0x3E,\n\t\t\t(byte) 0x80, (byte) 0x2F, (byte) 0x0C, (byte) 0xA9, (byte) 0xFE,\n\t\t\t(byte) 0x64, (byte) 0x53, (byte) 0x69, (byte) 0x7A };", "modifier": "private static final", "type": "byte[]", "declarator": "pad = { (byte) 0x28, (byte) 0xBF, (byte) 0x4E,\n\t\t\t(byte) 0x5E, (byte) 0x4E, (byte) 0x75, (byte) 0x8A, (byte) 0x41,\n\t\t\t(byte) 0x64, (byte) 0x00, (byte) 0x4E, (byte) 0x56, (byte) 0xFF,\n\t\t\t(byte) 0xFA, (byte) 0x01, (byte) 0x08, (byte) 0x2E, (byte) 0x2E,\n\t\t\t(byte) 0x00, (byte) 0xB6, (byte) 0xD0, (byte) 0x68, (byte) 0x3E,\n\t\t\t(byte) 0x80, (byte) 0x2F, (byte) 0x0C, (byte) 0xA9, (byte) 0xFE,\n\t\t\t(byte) 0x64, (byte) 0x53, (byte) 0x69, (byte) 0x7A }", "var_name": "pad"}, {"original_string": "private static final byte[] salt = { (byte) 0x73, (byte) 0x41, (byte) 0x6c,\n\t\t\t(byte) 0x54 };", "modifier": "private static final", "type": "byte[]", "declarator": "salt = { (byte) 0x73, (byte) 0x41, (byte) 0x6c,\n\t\t\t(byte) 0x54 }", "var_name": "salt"}, {"original_string": "private static final byte[] metadataPad = { (byte) 255, (byte) 255,\n\t\t\t(byte) 255, (byte) 255 };", "modifier": "private static final", "type": "byte[]", "declarator": "metadataPad = { (byte) 255, (byte) 255,\n\t\t\t(byte) 255, (byte) 255 }", "var_name": "metadataPad"}, {"original_string": "byte key[];", "modifier": "", "type": "byte", "declarator": "key[]", "var_name": "key"}, {"original_string": "int keySize;", "modifier": "", "type": "int", "declarator": "keySize", "var_name": "keySize"}, {"original_string": "byte mkey[] = new byte[0];", "modifier": "", "type": "byte", "declarator": "mkey[] = new byte[0]", "var_name": "mkey"}, {"original_string": "byte ownerKey[] = new byte[32];", "modifier": "", "type": "byte", "declarator": "ownerKey[] = new byte[32]", "var_name": "ownerKey"}, {"original_string": "byte userKey[] = new byte[32];", "modifier": "", "type": "byte", "declarator": "userKey[] = new byte[32]", "var_name": "userKey"}, {"original_string": "byte[] oeKey;", "modifier": "", "type": "byte[]", "declarator": "oeKey", "var_name": "oeKey"}, {"original_string": "byte[] ueKey;", "modifier": "", "type": "byte[]", "declarator": "ueKey", "var_name": "ueKey"}, {"original_string": "byte[] perms;", "modifier": "", "type": "byte[]", "declarator": "perms", "var_name": "perms"}, {"original_string": "long permissions;", "modifier": "", "type": "long", "declarator": "permissions", "var_name": "permissions"}, {"original_string": "byte documentID[];", "modifier": "", "type": "byte", "declarator": "documentID[]", "var_name": "documentID"}, {"original_string": "private int revision;", "modifier": "private", "type": "int", "declarator": "revision", "var_name": "revision"}, {"original_string": "private int keyLength;", "modifier": "private", "type": "int", "declarator": "keyLength", "var_name": "keyLength"}, {"original_string": "protected PdfPublicKeySecurityHandler publicKeyHandler = null;", "modifier": "protected", "type": "PdfPublicKeySecurityHandler", "declarator": "publicKeyHandler = null", "var_name": "publicKeyHandler"}, {"original_string": "byte extra[] = new byte[5];", "modifier": "", "type": "byte", "declarator": "extra[] = new byte[5]", "var_name": "extra"}, {"original_string": "MessageDigest md5;", "modifier": "", "type": "MessageDigest", "declarator": "md5", "var_name": "md5"}, {"original_string": "private ARCFOUREncryption arcfour = new ARCFOUREncryption();", "modifier": "private", "type": "ARCFOUREncryption", "declarator": "arcfour = new ARCFOUREncryption()", "var_name": "arcfour"}, {"original_string": "private boolean encryptMetadata;", "modifier": "private", "type": "boolean", "declarator": "encryptMetadata", "var_name": "encryptMetadata"}, {"original_string": "static long seq = System.currentTimeMillis();", "modifier": "static", "type": "long", "declarator": "seq = System.currentTimeMillis()", "var_name": "seq"}, {"original_string": "private boolean embeddedFilesOnly;", "modifier": "private", "type": "boolean", "declarator": "embeddedFilesOnly", "var_name": "embeddedFilesOnly"}, {"original_string": "private int cryptoMode;", "modifier": "private", "type": "int", "declarator": "cryptoMode", "var_name": "cryptoMode"}, {"original_string": "private static final int VALIDATION_SALT_OFFSET = 32;", "modifier": "private static final", "type": "int", "declarator": "VALIDATION_SALT_OFFSET = 32", "var_name": "VALIDATION_SALT_OFFSET"}, {"original_string": "private static final int KEY_SALT_OFFSET = 40;", "modifier": "private static final", "type": "int", "declarator": "KEY_SALT_OFFSET = 40", "var_name": "KEY_SALT_OFFSET"}, {"original_string": "private static final int SALT_LENGHT = 8;", "modifier": "private static final", "type": "int", "declarator": "SALT_LENGHT = 8", "var_name": "SALT_LENGHT"}, {"original_string": "private static final int OU_LENGHT = 48;", "modifier": "private static final", "type": "int", "declarator": "OU_LENGHT = 48", "var_name": "OU_LENGHT"}], "methods": [{"identifier": "PdfEncryption", "parameters": "()", "modifiers": "public", "return": "", "signature": " PdfEncryption()", "full_signature": "public  PdfEncryption()", "class_method_signature": "PdfEncryption.PdfEncryption()", "testcase": false, "constructor": true}, {"identifier": "PdfEncryption", "parameters": "(PdfEncryption enc)", "modifiers": "public", "return": "", "signature": " PdfEncryption(PdfEncryption enc)", "full_signature": "public  PdfEncryption(PdfEncryption enc)", "class_method_signature": "PdfEncryption.PdfEncryption(PdfEncryption enc)", "testcase": false, "constructor": true}, {"identifier": "setCryptoMode", "parameters": "(int mode, int kl)", "modifiers": "public", "return": "void", "signature": "void setCryptoMode(int mode, int kl)", "full_signature": "public void setCryptoMode(int mode, int kl)", "class_method_signature": "PdfEncryption.setCryptoMode(int mode, int kl)", "testcase": false, "constructor": false}, {"identifier": "getCryptoMode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCryptoMode()", "full_signature": "public int getCryptoMode()", "class_method_signature": "PdfEncryption.getCryptoMode()", "testcase": false, "constructor": false}, {"identifier": "isMetadataEncrypted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMetadataEncrypted()", "full_signature": "public boolean isMetadataEncrypted()", "class_method_signature": "PdfEncryption.isMetadataEncrypted()", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getPermissions()", "full_signature": "public long getPermissions()", "class_method_signature": "PdfEncryption.getPermissions()", "testcase": false, "constructor": false}, {"identifier": "isEmbeddedFilesOnly", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmbeddedFilesOnly()", "full_signature": "public boolean isEmbeddedFilesOnly()", "class_method_signature": "PdfEncryption.isEmbeddedFilesOnly()", "testcase": false, "constructor": false}, {"identifier": "padPassword", "parameters": "(byte userPassword[])", "modifiers": "private", "return": "byte[]", "signature": "byte[] padPassword(byte userPassword[])", "full_signature": "private byte[] padPassword(byte userPassword[])", "class_method_signature": "PdfEncryption.padPassword(byte userPassword[])", "testcase": false, "constructor": false}, {"identifier": "computeOwnerKey", "parameters": "(byte userPad[], byte ownerPad[])", "modifiers": "private", "return": "byte[]", "signature": "byte[] computeOwnerKey(byte userPad[], byte ownerPad[])", "full_signature": "private byte[] computeOwnerKey(byte userPad[], byte ownerPad[])", "class_method_signature": "PdfEncryption.computeOwnerKey(byte userPad[], byte ownerPad[])", "testcase": false, "constructor": false}, {"identifier": "setupGlobalEncryptionKey", "parameters": "(byte[] documentID, byte userPad[],\n\t\t\tbyte ownerKey[], long permissions)", "modifiers": "private", "return": "void", "signature": "void setupGlobalEncryptionKey(byte[] documentID, byte userPad[],\n\t\t\tbyte ownerKey[], long permissions)", "full_signature": "private void setupGlobalEncryptionKey(byte[] documentID, byte userPad[],\n\t\t\tbyte ownerKey[], long permissions)", "class_method_signature": "PdfEncryption.setupGlobalEncryptionKey(byte[] documentID, byte userPad[],\n\t\t\tbyte ownerKey[], long permissions)", "testcase": false, "constructor": false}, {"identifier": "setupUserKey", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupUserKey()", "full_signature": "private void setupUserKey()", "class_method_signature": "PdfEncryption.setupUserKey()", "testcase": false, "constructor": false}, {"identifier": "setupAllKeys", "parameters": "(byte userPassword[], byte ownerPassword[],\n\t\t\tint permissions)", "modifiers": "public", "return": "void", "signature": "void setupAllKeys(byte userPassword[], byte ownerPassword[],\n\t\t\tint permissions)", "full_signature": "public void setupAllKeys(byte userPassword[], byte ownerPassword[],\n\t\t\tint permissions)", "class_method_signature": "PdfEncryption.setupAllKeys(byte userPassword[], byte ownerPassword[],\n\t\t\tint permissions)", "testcase": false, "constructor": false}, {"identifier": "readKey", "parameters": "(PdfDictionary enc, byte[] password)", "modifiers": "public", "return": "boolean", "signature": "boolean readKey(PdfDictionary enc, byte[] password)", "full_signature": "public boolean readKey(PdfDictionary enc, byte[] password)", "class_method_signature": "PdfEncryption.readKey(PdfDictionary enc, byte[] password)", "testcase": false, "constructor": false}, {"identifier": "compareArray", "parameters": "(byte[] a, byte[] b, int len)", "modifiers": "private static", "return": "boolean", "signature": "boolean compareArray(byte[] a, byte[] b, int len)", "full_signature": "private static boolean compareArray(byte[] a, byte[] b, int len)", "class_method_signature": "PdfEncryption.compareArray(byte[] a, byte[] b, int len)", "testcase": false, "constructor": false}, {"identifier": "createDocumentId", "parameters": "()", "modifiers": "public static", "return": "byte[]", "signature": "byte[] createDocumentId()", "full_signature": "public static byte[] createDocumentId()", "class_method_signature": "PdfEncryption.createDocumentId()", "testcase": false, "constructor": false}, {"identifier": "setupByUserPassword", "parameters": "(byte[] documentID, byte userPassword[],\n\t\t\tbyte ownerKey[], long permissions)", "modifiers": "public", "return": "void", "signature": "void setupByUserPassword(byte[] documentID, byte userPassword[],\n\t\t\tbyte ownerKey[], long permissions)", "full_signature": "public void setupByUserPassword(byte[] documentID, byte userPassword[],\n\t\t\tbyte ownerKey[], long permissions)", "class_method_signature": "PdfEncryption.setupByUserPassword(byte[] documentID, byte userPassword[],\n\t\t\tbyte ownerKey[], long permissions)", "testcase": false, "constructor": false}, {"identifier": "setupByUserPad", "parameters": "(byte[] documentID, byte userPad[],\n\t\t\tbyte ownerKey[], long permissions)", "modifiers": "private", "return": "void", "signature": "void setupByUserPad(byte[] documentID, byte userPad[],\n\t\t\tbyte ownerKey[], long permissions)", "full_signature": "private void setupByUserPad(byte[] documentID, byte userPad[],\n\t\t\tbyte ownerKey[], long permissions)", "class_method_signature": "PdfEncryption.setupByUserPad(byte[] documentID, byte userPad[],\n\t\t\tbyte ownerKey[], long permissions)", "testcase": false, "constructor": false}, {"identifier": "setupByOwnerPassword", "parameters": "(byte[] documentID, byte ownerPassword[],\n\t\t\tbyte userKey[], byte ownerKey[], long permissions)", "modifiers": "public", "return": "void", "signature": "void setupByOwnerPassword(byte[] documentID, byte ownerPassword[],\n\t\t\tbyte userKey[], byte ownerKey[], long permissions)", "full_signature": "public void setupByOwnerPassword(byte[] documentID, byte ownerPassword[],\n\t\t\tbyte userKey[], byte ownerKey[], long permissions)", "class_method_signature": "PdfEncryption.setupByOwnerPassword(byte[] documentID, byte ownerPassword[],\n\t\t\tbyte userKey[], byte ownerKey[], long permissions)", "testcase": false, "constructor": false}, {"identifier": "setupByOwnerPad", "parameters": "(byte[] documentID, byte ownerPad[],\n\t\t\tbyte userKey[], byte ownerKey[], long permissions)", "modifiers": "private", "return": "void", "signature": "void setupByOwnerPad(byte[] documentID, byte ownerPad[],\n\t\t\tbyte userKey[], byte ownerKey[], long permissions)", "full_signature": "private void setupByOwnerPad(byte[] documentID, byte ownerPad[],\n\t\t\tbyte userKey[], byte ownerKey[], long permissions)", "class_method_signature": "PdfEncryption.setupByOwnerPad(byte[] documentID, byte ownerPad[],\n\t\t\tbyte userKey[], byte ownerKey[], long permissions)", "testcase": false, "constructor": false}, {"identifier": "setKey", "parameters": "(byte[] key)", "modifiers": "public", "return": "void", "signature": "void setKey(byte[] key)", "full_signature": "public void setKey(byte[] key)", "class_method_signature": "PdfEncryption.setKey(byte[] key)", "testcase": false, "constructor": false}, {"identifier": "setupByEncryptionKey", "parameters": "(byte[] key, int keylength)", "modifiers": "public", "return": "void", "signature": "void setupByEncryptionKey(byte[] key, int keylength)", "full_signature": "public void setupByEncryptionKey(byte[] key, int keylength)", "class_method_signature": "PdfEncryption.setupByEncryptionKey(byte[] key, int keylength)", "testcase": false, "constructor": false}, {"identifier": "setHashKey", "parameters": "(int number, int generation)", "modifiers": "public", "return": "void", "signature": "void setHashKey(int number, int generation)", "full_signature": "public void setHashKey(int number, int generation)", "class_method_signature": "PdfEncryption.setHashKey(int number, int generation)", "testcase": false, "constructor": false}, {"identifier": "createInfoId", "parameters": "(byte id[], boolean modified)", "modifiers": "public static", "return": "PdfObject", "signature": "PdfObject createInfoId(byte id[], boolean modified)", "full_signature": "public static PdfObject createInfoId(byte id[], boolean modified)", "class_method_signature": "PdfEncryption.createInfoId(byte id[], boolean modified)", "testcase": false, "constructor": false}, {"identifier": "getEncryptionDictionary", "parameters": "()", "modifiers": "public", "return": "PdfDictionary", "signature": "PdfDictionary getEncryptionDictionary()", "full_signature": "public PdfDictionary getEncryptionDictionary()", "class_method_signature": "PdfEncryption.getEncryptionDictionary()", "testcase": false, "constructor": false}, {"identifier": "getFileID", "parameters": "(boolean modified)", "modifiers": "public", "return": "PdfObject", "signature": "PdfObject getFileID(boolean modified)", "full_signature": "public PdfObject getFileID(boolean modified)", "class_method_signature": "PdfEncryption.getFileID(boolean modified)", "testcase": false, "constructor": false}, {"identifier": "getEncryptionStream", "parameters": "(OutputStream os)", "modifiers": "public", "return": "OutputStreamEncryption", "signature": "OutputStreamEncryption getEncryptionStream(OutputStream os)", "full_signature": "public OutputStreamEncryption getEncryptionStream(OutputStream os)", "class_method_signature": "PdfEncryption.getEncryptionStream(OutputStream os)", "testcase": false, "constructor": false}, {"identifier": "calculateStreamSize", "parameters": "(int n)", "modifiers": "public", "return": "int", "signature": "int calculateStreamSize(int n)", "full_signature": "public int calculateStreamSize(int n)", "class_method_signature": "PdfEncryption.calculateStreamSize(int n)", "testcase": false, "constructor": false}, {"identifier": "encryptByteArray", "parameters": "(byte[] b)", "modifiers": "public", "return": "byte[]", "signature": "byte[] encryptByteArray(byte[] b)", "full_signature": "public byte[] encryptByteArray(byte[] b)", "class_method_signature": "PdfEncryption.encryptByteArray(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "getDecryptor", "parameters": "()", "modifiers": "public", "return": "StandardDecryption", "signature": "StandardDecryption getDecryptor()", "full_signature": "public StandardDecryption getDecryptor()", "class_method_signature": "PdfEncryption.getDecryptor()", "testcase": false, "constructor": false}, {"identifier": "decryptByteArray", "parameters": "(byte[] b)", "modifiers": "public", "return": "byte[]", "signature": "byte[] decryptByteArray(byte[] b)", "full_signature": "public byte[] decryptByteArray(byte[] b)", "class_method_signature": "PdfEncryption.decryptByteArray(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "addRecipient", "parameters": "(Certificate cert, int permission)", "modifiers": "public", "return": "void", "signature": "void addRecipient(Certificate cert, int permission)", "full_signature": "public void addRecipient(Certificate cert, int permission)", "class_method_signature": "PdfEncryption.addRecipient(Certificate cert, int permission)", "testcase": false, "constructor": false}, {"identifier": "computeUserPassword", "parameters": "(byte[] ownerPassword)", "modifiers": "public", "return": "byte[]", "signature": "byte[] computeUserPassword(byte[] ownerPassword)", "full_signature": "public byte[] computeUserPassword(byte[] ownerPassword)", "class_method_signature": "PdfEncryption.computeUserPassword(byte[] ownerPassword)", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/pdf/PdfEncryption.java"}, "focal_method": {"identifier": "computeUserPassword", "parameters": "(byte[] ownerPassword)", "modifiers": "public", "return": "byte[]", "body": "public byte[] computeUserPassword(byte[] ownerPassword) {\n        byte[] userPad = null;\n        if (publicKeyHandler.getRecipientsSize() == 0 &&\n                STANDARD_ENCRYPTION_40 <= revision && revision <= AES_128) {\n            userPad = computeOwnerKey(ownerKey, padPassword(ownerPassword));\n            for (int i = 0; i < userPad.length; i++) {\n                boolean match = true;\n                for (int j = 0; j < userPad.length - i; j++) {\n                    if (userPad[i + j] != pad[j]) {\n                        match = false;\n                        break;\n                    }\n                }\n                if (!match) continue;\n                byte[] userPassword = new byte[i];\n                System.arraycopy(userPad, 0, userPassword, 0, i);\n                return userPassword;\n            }\n        }\n\t\treturn userPad;\n\t}", "signature": "byte[] computeUserPassword(byte[] ownerPassword)", "full_signature": "public byte[] computeUserPassword(byte[] ownerPassword)", "class_method_signature": "PdfEncryption.computeUserPassword(byte[] ownerPassword)", "testcase": false, "constructor": false, "invocations": ["getRecipientsSize", "computeOwnerKey", "padPassword", "arraycopy"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}