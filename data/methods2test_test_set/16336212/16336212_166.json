{"test_class": {"identifier": "AdminJsonServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockMailService mailService;", "modifier": "private", "type": "MockMailService", "declarator": "mailService", "var_name": "mailService"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private AdminJsonService adminJsonService;", "modifier": "private", "type": "AdminJsonService", "declarator": "adminJsonService", "var_name": "adminJsonService"}], "file": "ui/src/test/java/org/glowroot/ui/AdminJsonServiceTest.java"}, "test_case": {"identifier": "testWithoutDefaults", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithoutDefaults() throws Exception {\n        // given\n        SmtpConfigDto configDto = ImmutableSmtpConfigDto.builder()\n                .host(\"localhost\")\n                .username(\"\")\n                .passwordExists(false)\n                .fromEmailAddress(\"from@example.org\")\n                .fromDisplayName(\"From Example\")\n                .version(\"1234\")\n                .testEmailRecipient(\"to@example.org\")\n                .build();\n        // when\n        adminJsonService.sendTestEmail(configDto);\n        // then\n        Message message = mailService.getMessage();\n        assertThat(message.getFrom()[0].toString()).isEqualTo(\"From Example <from@example.org>\");\n        assertThat(message.getRecipients(Message.RecipientType.TO)[0].toString())\n                .isEqualTo(\"to@example.org\");\n        assertThat(message.getSubject()).isEqualTo(\"[Glowroot] Test email\");\n        assertThat(message.getContent()).isEqualTo(\"\");\n    }", "signature": "void testWithoutDefaults()", "full_signature": "@Test public void testWithoutDefaults()", "class_method_signature": "AdminJsonServiceTest.testWithoutDefaults()", "testcase": true, "constructor": false, "invocations": ["build", "testEmailRecipient", "version", "fromDisplayName", "fromEmailAddress", "passwordExists", "username", "host", "builder", "sendTestEmail", "getMessage", "isEqualTo", "assertThat", "toString", "getFrom", "isEqualTo", "assertThat", "toString", "getRecipients", "isEqualTo", "assertThat", "getSubject", "isEqualTo", "assertThat", "getContent"]}, "focal_class": {"identifier": "AdminJsonService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ConfigJsonService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ConfigJsonService.class)", "var_name": "logger"}, {"original_string": "private static final ObjectMapper mapper = ObjectMappers.create();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = ObjectMappers.create()", "var_name": "mapper"}, {"original_string": "private static final Ordering<H2Table> orderingByBytesDesc = new Ordering<H2Table>() {\n        @Override\n        public int compare(H2Table left, H2Table right) {\n            return Longs.compare(right.bytes(), left.bytes());\n        }\n    };", "modifier": "private static final", "type": "Ordering<H2Table>", "declarator": "orderingByBytesDesc = new Ordering<H2Table>() {\n        @Override\n        public int compare(H2Table left, H2Table right) {\n            return Longs.compare(right.bytes(), left.bytes());\n        }\n    }", "var_name": "orderingByBytesDesc"}, {"original_string": "private final boolean central;", "modifier": "private final", "type": "boolean", "declarator": "central", "var_name": "central"}, {"original_string": "private final boolean offlineViewer;", "modifier": "private final", "type": "boolean", "declarator": "offlineViewer", "var_name": "offlineViewer"}, {"original_string": "private final boolean webPortReadOnly;", "modifier": "private final", "type": "boolean", "declarator": "webPortReadOnly", "var_name": "webPortReadOnly"}, {"original_string": "private final List<File> confDirs;", "modifier": "private final", "type": "List<File>", "declarator": "confDirs", "var_name": "confDirs"}, {"original_string": "private final ConfigRepository configRepository;", "modifier": "private final", "type": "ConfigRepository", "declarator": "configRepository", "var_name": "configRepository"}, {"original_string": "private final RepoAdmin repoAdmin;", "modifier": "private final", "type": "RepoAdmin", "declarator": "repoAdmin", "var_name": "repoAdmin"}, {"original_string": "private final LiveAggregateRepository liveAggregateRepository;", "modifier": "private final", "type": "LiveAggregateRepository", "declarator": "liveAggregateRepository", "var_name": "liveAggregateRepository"}, {"original_string": "private final MailService mailService;", "modifier": "private final", "type": "MailService", "declarator": "mailService", "var_name": "mailService"}, {"original_string": "private final HttpClient httpClient;", "modifier": "private final", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private volatile @MonotonicNonNull HttpServer httpServer;", "modifier": "private volatile @MonotonicNonNull", "type": "HttpServer", "declarator": "httpServer", "var_name": "httpServer"}], "methods": [{"identifier": "AdminJsonService", "parameters": "(boolean central, boolean offlineViewer, boolean webPortReadOnly,\n            List<File> confDirs, ConfigRepository configRepository,\n            RepoAdmin repoAdmin, LiveAggregateRepository liveAggregateRepository,\n            MailService mailService, HttpClient httpClient)", "modifiers": "", "return": "", "signature": " AdminJsonService(boolean central, boolean offlineViewer, boolean webPortReadOnly,\n            List<File> confDirs, ConfigRepository configRepository,\n            RepoAdmin repoAdmin, LiveAggregateRepository liveAggregateRepository,\n            MailService mailService, HttpClient httpClient)", "full_signature": "  AdminJsonService(boolean central, boolean offlineViewer, boolean webPortReadOnly,\n            List<File> confDirs, ConfigRepository configRepository,\n            RepoAdmin repoAdmin, LiveAggregateRepository liveAggregateRepository,\n            MailService mailService, HttpClient httpClient)", "class_method_signature": "AdminJsonService.AdminJsonService(boolean central, boolean offlineViewer, boolean webPortReadOnly,\n            List<File> confDirs, ConfigRepository configRepository,\n            RepoAdmin repoAdmin, LiveAggregateRepository liveAggregateRepository,\n            MailService mailService, HttpClient httpClient)", "testcase": false, "constructor": true}, {"identifier": "setHttpServer", "parameters": "(HttpServer httpServer)", "modifiers": "", "return": "void", "signature": "void setHttpServer(HttpServer httpServer)", "full_signature": " void setHttpServer(HttpServer httpServer)", "class_method_signature": "AdminJsonService.setHttpServer(HttpServer httpServer)", "testcase": false, "constructor": false}, {"identifier": "changePassword", "parameters": "(@BindRequest ChangePassword changePassword,\n            @BindAuthentication Authentication authentication)", "modifiers": "@POST(path = \"/backend/change-password\", permission = \"\")", "return": "String", "signature": "String changePassword(@BindRequest ChangePassword changePassword,\n            @BindAuthentication Authentication authentication)", "full_signature": "@POST(path = \"/backend/change-password\", permission = \"\") String changePassword(@BindRequest ChangePassword changePassword,\n            @BindAuthentication Authentication authentication)", "class_method_signature": "AdminJsonService.changePassword(@BindRequest ChangePassword changePassword,\n            @BindAuthentication Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "getGeneralConfig", "parameters": "()", "modifiers": "@GET(path = \"/backend/admin/general\", permission = \"admin:view:general\")", "return": "String", "signature": "String getGeneralConfig()", "full_signature": "@GET(path = \"/backend/admin/general\", permission = \"admin:view:general\") String getGeneralConfig()", "class_method_signature": "AdminJsonService.getGeneralConfig()", "testcase": false, "constructor": false}, {"identifier": "getWebConfig", "parameters": "()", "modifiers": "@GET(path = \"/backend/admin/web\", permission = \"admin:view:web\")", "return": "String", "signature": "String getWebConfig()", "full_signature": "@GET(path = \"/backend/admin/web\", permission = \"admin:view:web\") String getWebConfig()", "class_method_signature": "AdminJsonService.getWebConfig()", "testcase": false, "constructor": false}, {"identifier": "getStorageConfig", "parameters": "()", "modifiers": "@GET(path = \"/backend/admin/storage\", permission = \"admin:view:storage\")", "return": "String", "signature": "String getStorageConfig()", "full_signature": "@GET(path = \"/backend/admin/storage\", permission = \"admin:view:storage\") String getStorageConfig()", "class_method_signature": "AdminJsonService.getStorageConfig()", "testcase": false, "constructor": false}, {"identifier": "getSmtpConfig", "parameters": "()", "modifiers": "@GET(path = \"/backend/admin/smtp\", permission = \"admin:view:smtp\")", "return": "String", "signature": "String getSmtpConfig()", "full_signature": "@GET(path = \"/backend/admin/smtp\", permission = \"admin:view:smtp\") String getSmtpConfig()", "class_method_signature": "AdminJsonService.getSmtpConfig()", "testcase": false, "constructor": false}, {"identifier": "getHttpProxyConfig", "parameters": "()", "modifiers": "@GET(path = \"/backend/admin/http-proxy\", permission = \"admin:view:httpProxy\")", "return": "String", "signature": "String getHttpProxyConfig()", "full_signature": "@GET(path = \"/backend/admin/http-proxy\", permission = \"admin:view:httpProxy\") String getHttpProxyConfig()", "class_method_signature": "AdminJsonService.getHttpProxyConfig()", "testcase": false, "constructor": false}, {"identifier": "getLdapConfig", "parameters": "()", "modifiers": "@GET(path = \"/backend/admin/ldap\", permission = \"admin:view:ldap\")", "return": "String", "signature": "String getLdapConfig()", "full_signature": "@GET(path = \"/backend/admin/ldap\", permission = \"admin:view:ldap\") String getLdapConfig()", "class_method_signature": "AdminJsonService.getLdapConfig()", "testcase": false, "constructor": false}, {"identifier": "getPagerDutyConfig", "parameters": "()", "modifiers": "@GET(path = \"/backend/admin/pager-duty\", permission = \"admin:view:pagerDuty\")", "return": "String", "signature": "String getPagerDutyConfig()", "full_signature": "@GET(path = \"/backend/admin/pager-duty\", permission = \"admin:view:pagerDuty\") String getPagerDutyConfig()", "class_method_signature": "AdminJsonService.getPagerDutyConfig()", "testcase": false, "constructor": false}, {"identifier": "getSlackConfig", "parameters": "()", "modifiers": "@GET(path = \"/backend/admin/slack\", permission = \"admin:view:slack\")", "return": "String", "signature": "String getSlackConfig()", "full_signature": "@GET(path = \"/backend/admin/slack\", permission = \"admin:view:slack\") String getSlackConfig()", "class_method_signature": "AdminJsonService.getSlackConfig()", "testcase": false, "constructor": false}, {"identifier": "getHealthchecksIoConfig", "parameters": "()", "modifiers": "@GET(path = \"/backend/admin/healthchecks-io\", permission = \"admin:view:healthchecksIo\")", "return": "String", "signature": "String getHealthchecksIoConfig()", "full_signature": "@GET(path = \"/backend/admin/healthchecks-io\", permission = \"admin:view:healthchecksIo\") String getHealthchecksIoConfig()", "class_method_signature": "AdminJsonService.getHealthchecksIoConfig()", "testcase": false, "constructor": false}, {"identifier": "getAllAdmin", "parameters": "()", "modifiers": "@GET(path = \"/backend/admin/json\", permission = \"admin:view\")", "return": "String", "signature": "String getAllAdmin()", "full_signature": "@GET(path = \"/backend/admin/json\", permission = \"admin:view\") String getAllAdmin()", "class_method_signature": "AdminJsonService.getAllAdmin()", "testcase": false, "constructor": false}, {"identifier": "updateGeneralConfig", "parameters": "(@BindRequest String content)", "modifiers": "@POST(path = \"/backend/admin/general\", permission = \"admin:edit:general\")", "return": "String", "signature": "String updateGeneralConfig(@BindRequest String content)", "full_signature": "@POST(path = \"/backend/admin/general\", permission = \"admin:edit:general\") String updateGeneralConfig(@BindRequest String content)", "class_method_signature": "AdminJsonService.updateGeneralConfig(@BindRequest String content)", "testcase": false, "constructor": false}, {"identifier": "updateWebConfig", "parameters": "(@BindRequest String content)", "modifiers": "@POST(path = \"/backend/admin/web\", permission = \"admin:edit:web\")", "return": "Object", "signature": "Object updateWebConfig(@BindRequest String content)", "full_signature": "@POST(path = \"/backend/admin/web\", permission = \"admin:edit:web\") Object updateWebConfig(@BindRequest String content)", "class_method_signature": "AdminJsonService.updateWebConfig(@BindRequest String content)", "testcase": false, "constructor": false}, {"identifier": "updateStorageConfig", "parameters": "(@BindRequest String content)", "modifiers": "@POST(path = \"/backend/admin/storage\", permission = \"admin:edit:storage\")", "return": "String", "signature": "String updateStorageConfig(@BindRequest String content)", "full_signature": "@POST(path = \"/backend/admin/storage\", permission = \"admin:edit:storage\") String updateStorageConfig(@BindRequest String content)", "class_method_signature": "AdminJsonService.updateStorageConfig(@BindRequest String content)", "testcase": false, "constructor": false}, {"identifier": "updateSmtpConfig", "parameters": "(@BindRequest SmtpConfigDto configDto)", "modifiers": "@POST(path = \"/backend/admin/smtp\", permission = \"admin:edit:smtp\")", "return": "String", "signature": "String updateSmtpConfig(@BindRequest SmtpConfigDto configDto)", "full_signature": "@POST(path = \"/backend/admin/smtp\", permission = \"admin:edit:smtp\") String updateSmtpConfig(@BindRequest SmtpConfigDto configDto)", "class_method_signature": "AdminJsonService.updateSmtpConfig(@BindRequest SmtpConfigDto configDto)", "testcase": false, "constructor": false}, {"identifier": "updateHttpProxyConfig", "parameters": "(@BindRequest HttpProxyConfigDto configDto)", "modifiers": "@POST(path = \"/backend/admin/http-proxy\", permission = \"admin:edit:httpProxy\")", "return": "String", "signature": "String updateHttpProxyConfig(@BindRequest HttpProxyConfigDto configDto)", "full_signature": "@POST(path = \"/backend/admin/http-proxy\", permission = \"admin:edit:httpProxy\") String updateHttpProxyConfig(@BindRequest HttpProxyConfigDto configDto)", "class_method_signature": "AdminJsonService.updateHttpProxyConfig(@BindRequest HttpProxyConfigDto configDto)", "testcase": false, "constructor": false}, {"identifier": "updateLdapConfig", "parameters": "(@BindRequest LdapConfigDto configDto)", "modifiers": "@POST(path = \"/backend/admin/ldap\", permission = \"admin:edit:ldap\")", "return": "String", "signature": "String updateLdapConfig(@BindRequest LdapConfigDto configDto)", "full_signature": "@POST(path = \"/backend/admin/ldap\", permission = \"admin:edit:ldap\") String updateLdapConfig(@BindRequest LdapConfigDto configDto)", "class_method_signature": "AdminJsonService.updateLdapConfig(@BindRequest LdapConfigDto configDto)", "testcase": false, "constructor": false}, {"identifier": "updatePagerDutyConfig", "parameters": "(@BindRequest PagerDutyConfigDto configDto)", "modifiers": "@POST(path = \"/backend/admin/pager-duty\", permission = \"admin:edit:pagerDuty\")", "return": "String", "signature": "String updatePagerDutyConfig(@BindRequest PagerDutyConfigDto configDto)", "full_signature": "@POST(path = \"/backend/admin/pager-duty\", permission = \"admin:edit:pagerDuty\") String updatePagerDutyConfig(@BindRequest PagerDutyConfigDto configDto)", "class_method_signature": "AdminJsonService.updatePagerDutyConfig(@BindRequest PagerDutyConfigDto configDto)", "testcase": false, "constructor": false}, {"identifier": "updateSlackConfig", "parameters": "(@BindRequest SlackConfigDto configDto)", "modifiers": "@POST(path = \"/backend/admin/slack\", permission = \"admin:edit:slack\")", "return": "String", "signature": "String updateSlackConfig(@BindRequest SlackConfigDto configDto)", "full_signature": "@POST(path = \"/backend/admin/slack\", permission = \"admin:edit:slack\") String updateSlackConfig(@BindRequest SlackConfigDto configDto)", "class_method_signature": "AdminJsonService.updateSlackConfig(@BindRequest SlackConfigDto configDto)", "testcase": false, "constructor": false}, {"identifier": "updateHealthchecksIoConfig", "parameters": "(@BindRequest HealthchecksIoConfigDto configDto)", "modifiers": "@POST(path = \"/backend/admin/healthchecks-io\", permission = \"admin:edit:healthchecksIo\")", "return": "String", "signature": "String updateHealthchecksIoConfig(@BindRequest HealthchecksIoConfigDto configDto)", "full_signature": "@POST(path = \"/backend/admin/healthchecks-io\", permission = \"admin:edit:healthchecksIo\") String updateHealthchecksIoConfig(@BindRequest HealthchecksIoConfigDto configDto)", "class_method_signature": "AdminJsonService.updateHealthchecksIoConfig(@BindRequest HealthchecksIoConfigDto configDto)", "testcase": false, "constructor": false}, {"identifier": "updateAllAdmin", "parameters": "(@BindRequest String content)", "modifiers": "@POST(path = \"/backend/admin/json\", permission = \"admin:edit\")", "return": "String", "signature": "String updateAllAdmin(@BindRequest String content)", "full_signature": "@POST(path = \"/backend/admin/json\", permission = \"admin:edit\") String updateAllAdmin(@BindRequest String content)", "class_method_signature": "AdminJsonService.updateAllAdmin(@BindRequest String content)", "testcase": false, "constructor": false}, {"identifier": "sendTestEmail", "parameters": "(@BindRequest SmtpConfigDto configDto)", "modifiers": "@POST(path = \"/backend/admin/send-test-email\", permission = \"admin:edit:smtp\")", "return": "String", "signature": "String sendTestEmail(@BindRequest SmtpConfigDto configDto)", "full_signature": "@POST(path = \"/backend/admin/send-test-email\", permission = \"admin:edit:smtp\") String sendTestEmail(@BindRequest SmtpConfigDto configDto)", "class_method_signature": "AdminJsonService.sendTestEmail(@BindRequest SmtpConfigDto configDto)", "testcase": false, "constructor": false}, {"identifier": "testHttpProxy", "parameters": "(@BindRequest HttpProxyConfigDto configDto)", "modifiers": "@POST(path = \"/backend/admin/test-http-proxy\", permission = \"admin:edit:httpProxy\")", "return": "String", "signature": "String testHttpProxy(@BindRequest HttpProxyConfigDto configDto)", "full_signature": "@POST(path = \"/backend/admin/test-http-proxy\", permission = \"admin:edit:httpProxy\") String testHttpProxy(@BindRequest HttpProxyConfigDto configDto)", "class_method_signature": "AdminJsonService.testHttpProxy(@BindRequest HttpProxyConfigDto configDto)", "testcase": false, "constructor": false}, {"identifier": "testLdap", "parameters": "(@BindRequest LdapConfigDto configDto)", "modifiers": "@POST(path = \"/backend/admin/test-ldap\", permission = \"admin:edit:ldap\")", "return": "String", "signature": "String testLdap(@BindRequest LdapConfigDto configDto)", "full_signature": "@POST(path = \"/backend/admin/test-ldap\", permission = \"admin:edit:ldap\") String testLdap(@BindRequest LdapConfigDto configDto)", "class_method_signature": "AdminJsonService.testLdap(@BindRequest LdapConfigDto configDto)", "testcase": false, "constructor": false}, {"identifier": "defragH2Data", "parameters": "(@BindAuthentication Authentication authentication)", "modifiers": "@POST(path = \"/backend/admin/defrag-h2-data\", permission = \"\")", "return": "void", "signature": "void defragH2Data(@BindAuthentication Authentication authentication)", "full_signature": "@POST(path = \"/backend/admin/defrag-h2-data\", permission = \"\") void defragH2Data(@BindAuthentication Authentication authentication)", "class_method_signature": "AdminJsonService.defragH2Data(@BindAuthentication Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "compactH2Data", "parameters": "(@BindAuthentication Authentication authentication)", "modifiers": "@POST(path = \"/backend/admin/compact-h2-data\", permission = \"\")", "return": "void", "signature": "void compactH2Data(@BindAuthentication Authentication authentication)", "full_signature": "@POST(path = \"/backend/admin/compact-h2-data\", permission = \"\") void compactH2Data(@BindAuthentication Authentication authentication)", "class_method_signature": "AdminJsonService.compactH2Data(@BindAuthentication Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "analyzeH2DiskSpace", "parameters": "(@BindAuthentication Authentication authentication)", "modifiers": "@POST(path = \"/backend/admin/analyze-h2-disk-space\", permission = \"\")", "return": "String", "signature": "String analyzeH2DiskSpace(@BindAuthentication Authentication authentication)", "full_signature": "@POST(path = \"/backend/admin/analyze-h2-disk-space\", permission = \"\") String analyzeH2DiskSpace(@BindAuthentication Authentication authentication)", "class_method_signature": "AdminJsonService.analyzeH2DiskSpace(@BindAuthentication Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "analyzeTraceCounts", "parameters": "(@BindAuthentication Authentication authentication)", "modifiers": "@POST(path = \"/backend/admin/analyze-trace-counts\", permission = \"\")", "return": "String", "signature": "String analyzeTraceCounts(@BindAuthentication Authentication authentication)", "full_signature": "@POST(path = \"/backend/admin/analyze-trace-counts\", permission = \"\") String analyzeTraceCounts(@BindAuthentication Authentication authentication)", "class_method_signature": "AdminJsonService.analyzeTraceCounts(@BindAuthentication Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "deleteAllData", "parameters": "()", "modifiers": "@POST(path = \"/backend/admin/delete-all-stored-data\", permission = \"admin:edit:storage\")", "return": "void", "signature": "void deleteAllData()", "full_signature": "@POST(path = \"/backend/admin/delete-all-stored-data\", permission = \"admin:edit:storage\") void deleteAllData()", "class_method_signature": "AdminJsonService.deleteAllData()", "testcase": false, "constructor": false}, {"identifier": "updateCassandraTwcsWindowSizes", "parameters": "()", "modifiers": "@POST(path = \"/backend/admin/update-cassandra-twcs-window-sizes\", permission = \"admin:edit:storage\")", "return": "String", "signature": "String updateCassandraTwcsWindowSizes()", "full_signature": "@POST(path = \"/backend/admin/update-cassandra-twcs-window-sizes\", permission = \"admin:edit:storage\") String updateCassandraTwcsWindowSizes()", "class_method_signature": "AdminJsonService.updateCassandraTwcsWindowSizes()", "testcase": false, "constructor": false}, {"identifier": "getCassandraWriteTotals", "parameters": "(@BindRequest CassandraWriteTotalsRequest request)", "modifiers": "@GET(path = \"/backend/admin/cassandra-write-totals\", permission = \"admin:view:storage\")", "return": "String", "signature": "String getCassandraWriteTotals(@BindRequest CassandraWriteTotalsRequest request)", "full_signature": "@GET(path = \"/backend/admin/cassandra-write-totals\", permission = \"admin:view:storage\") String getCassandraWriteTotals(@BindRequest CassandraWriteTotalsRequest request)", "class_method_signature": "AdminJsonService.getCassandraWriteTotals(@BindRequest CassandraWriteTotalsRequest request)", "testcase": false, "constructor": false}, {"identifier": "getConfFile", "parameters": "(String fileName)", "modifiers": "private @Nullable", "return": "File", "signature": "File getConfFile(String fileName)", "full_signature": "private @Nullable File getConfFile(String fileName)", "class_method_signature": "AdminJsonService.getConfFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "onSuccessfulEmbeddedWebUpdate", "parameters": "(EmbeddedWebConfig config)", "modifiers": "@RequiresNonNull(\"httpServer\") private", "return": "CommonResponse", "signature": "CommonResponse onSuccessfulEmbeddedWebUpdate(EmbeddedWebConfig config)", "full_signature": "@RequiresNonNull(\"httpServer\") private CommonResponse onSuccessfulEmbeddedWebUpdate(EmbeddedWebConfig config)", "class_method_signature": "AdminJsonService.onSuccessfulEmbeddedWebUpdate(EmbeddedWebConfig config)", "testcase": false, "constructor": false}, {"identifier": "getEmbeddedAdminGeneralConfig", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getEmbeddedAdminGeneralConfig()", "full_signature": "private String getEmbeddedAdminGeneralConfig()", "class_method_signature": "AdminJsonService.getEmbeddedAdminGeneralConfig()", "testcase": false, "constructor": false}, {"identifier": "getCentralAdminGeneralConfig", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getCentralAdminGeneralConfig()", "full_signature": "private String getCentralAdminGeneralConfig()", "class_method_signature": "AdminJsonService.getCentralAdminGeneralConfig()", "testcase": false, "constructor": false}, {"identifier": "getEmbeddedWebConfig", "parameters": "(boolean portChangeFailed)", "modifiers": "private", "return": "String", "signature": "String getEmbeddedWebConfig(boolean portChangeFailed)", "full_signature": "private String getEmbeddedWebConfig(boolean portChangeFailed)", "class_method_signature": "AdminJsonService.getEmbeddedWebConfig(boolean portChangeFailed)", "testcase": false, "constructor": false}, {"identifier": "getCentralWebConfig", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getCentralWebConfig()", "full_signature": "private String getCentralWebConfig()", "class_method_signature": "AdminJsonService.getCentralWebConfig()", "testcase": false, "constructor": false}, {"identifier": "createErrorResponse", "parameters": "(Exception exception)", "modifiers": "private static", "return": "String", "signature": "String createErrorResponse(Exception exception)", "full_signature": "private static String createErrorResponse(Exception exception)", "class_method_signature": "AdminJsonService.createErrorResponse(Exception exception)", "testcase": false, "constructor": false}, {"identifier": "createErrorResponse", "parameters": "(@Nullable String message)", "modifiers": "private static", "return": "String", "signature": "String createErrorResponse(@Nullable String message)", "full_signature": "private static String createErrorResponse(@Nullable String message)", "class_method_signature": "AdminJsonService.createErrorResponse(@Nullable String message)", "testcase": false, "constructor": false}], "file": "ui/src/main/java/org/glowroot/ui/AdminJsonService.java"}, "focal_method": {"identifier": "sendTestEmail", "parameters": "(@BindRequest SmtpConfigDto configDto)", "modifiers": "@POST(path = \"/backend/admin/send-test-email\", permission = \"admin:edit:smtp\")", "return": "String", "body": "@POST(path = \"/backend/admin/send-test-email\", permission = \"admin:edit:smtp\")\n    String sendTestEmail(@BindRequest SmtpConfigDto configDto) throws IOException {\n        // capturing newPlainPassword separately so that newPassword doesn't go through\n        // encryption/decryption which has possibility of throwing\n        // org.glowroot.common.repo.util.LazySecretKey.SymmetricEncryptionKeyMissingException\n        SmtpConfigDto configDtoWithoutNewPassword;\n        String passwordOverride;\n        String newPassword = configDto.newPassword();\n        if (newPassword.isEmpty()) {\n            configDtoWithoutNewPassword = configDto;\n            passwordOverride = null;\n        } else {\n            configDtoWithoutNewPassword = ImmutableSmtpConfigDto.builder()\n                    .copyFrom(configDto)\n                    .newPassword(\"\")\n                    .build();\n            passwordOverride = newPassword;\n        }\n        String testEmailRecipient = configDtoWithoutNewPassword.testEmailRecipient();\n        checkNotNull(testEmailRecipient);\n        List<String> emailAddresses =\n                Splitter.on(',').trimResults().splitToList(testEmailRecipient);\n        try {\n            String centralDisplay;\n            String agentDisplay;\n            if (central) {\n                centralDisplay =\n                        configRepository.getCentralAdminGeneralConfig().centralDisplayName();\n                agentDisplay = \"\";\n            } else {\n                centralDisplay = \"\";\n                agentDisplay = configRepository.getEmbeddedAdminGeneralConfig()\n                        .agentDisplayNameOrDefault();\n            }\n            String subject = \"Test email\";\n            AlertingService.sendEmail(centralDisplay, agentDisplay, subject, emailAddresses, \"\",\n                    configDtoWithoutNewPassword.convert(configRepository), passwordOverride,\n                    configRepository.getLazySecretKey(), mailService);\n        } catch (Exception e) {\n            logger.debug(e.getMessage(), e);\n            return createErrorResponse(e);\n        }\n        return \"{}\";\n    }", "signature": "String sendTestEmail(@BindRequest SmtpConfigDto configDto)", "full_signature": "@POST(path = \"/backend/admin/send-test-email\", permission = \"admin:edit:smtp\") String sendTestEmail(@BindRequest SmtpConfigDto configDto)", "class_method_signature": "AdminJsonService.sendTestEmail(@BindRequest SmtpConfigDto configDto)", "testcase": false, "constructor": false, "invocations": ["newPassword", "isEmpty", "build", "newPassword", "copyFrom", "builder", "testEmailRecipient", "checkNotNull", "splitToList", "trimResults", "on", "centralDisplayName", "getCentralAdminGeneralConfig", "agentDisplayNameOrDefault", "getEmbeddedAdminGeneralConfig", "sendEmail", "convert", "getLazySecretKey", "debug", "getMessage", "createErrorResponse"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}