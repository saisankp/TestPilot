{"test_class": {"identifier": "TestWaksmanUtils", "superclass": "", "interfaces": "", "fields": [], "file": "lib/common/src/test/java/dk/alexandra/fresco/lib/common/collections/permute/TestWaksmanUtils.java"}, "test_case": {"identifier": "testIs2Pow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIs2Pow(){\n    WaksmanUtils util = new WaksmanUtils();\n    assertFalse(util.isPow2(-2));\n    assertFalse(util.isPow2(14));\n    assertFalse(util.isPow2(5));\n    assertTrue(util.isPow2(4));\n    assertTrue(util.isPow2(8));\n    assertFalse(util.isPow2(-8));\n  }", "signature": "void testIs2Pow()", "full_signature": "@Test public void testIs2Pow()", "class_method_signature": "TestWaksmanUtils.testIs2Pow()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isPow2", "assertFalse", "isPow2", "assertFalse", "isPow2", "assertTrue", "isPow2", "assertTrue", "isPow2", "assertFalse", "isPow2"]}, "focal_class": {"identifier": "WaksmanUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "log2", "parameters": "(int n)", "modifiers": "private", "return": "int", "signature": "int log2(int n)", "full_signature": "private int log2(int n)", "class_method_signature": "WaksmanUtils.log2(int n)", "testcase": false, "constructor": false}, {"identifier": "nextUnsetSwapperIdx", "parameters": "(int[] swappers)", "modifiers": "private", "return": "int", "signature": "int nextUnsetSwapperIdx(int[] swappers)", "full_signature": "private int nextUnsetSwapperIdx(int[] swappers)", "class_method_signature": "WaksmanUtils.nextUnsetSwapperIdx(int[] swappers)", "testcase": false, "constructor": false}, {"identifier": "swapperIdxOf", "parameters": "(int elIdx)", "modifiers": "private", "return": "int", "signature": "int swapperIdxOf(int elIdx)", "full_signature": "private int swapperIdxOf(int elIdx)", "class_method_signature": "WaksmanUtils.swapperIdxOf(int elIdx)", "testcase": false, "constructor": false}, {"identifier": "topElIndexOf", "parameters": "(int swIdx)", "modifiers": "private", "return": "int", "signature": "int topElIndexOf(int swIdx)", "full_signature": "private int topElIndexOf(int swIdx)", "class_method_signature": "WaksmanUtils.topElIndexOf(int swIdx)", "testcase": false, "constructor": false}, {"identifier": "even", "parameters": "(int n)", "modifiers": "private", "return": "boolean", "signature": "boolean even(int n)", "full_signature": "private boolean even(int n)", "class_method_signature": "WaksmanUtils.even(int n)", "testcase": false, "constructor": false}, {"identifier": "isTopEl", "parameters": "(int elIdx)", "modifiers": "private", "return": "boolean", "signature": "boolean isTopEl(int elIdx)", "full_signature": "private boolean isTopEl(int elIdx)", "class_method_signature": "WaksmanUtils.isTopEl(int elIdx)", "testcase": false, "constructor": false}, {"identifier": "neighElIdxOf", "parameters": "(int elIdx)", "modifiers": "private", "return": "int", "signature": "int neighElIdxOf(int elIdx)", "full_signature": "private int neighElIdxOf(int elIdx)", "class_method_signature": "WaksmanUtils.neighElIdxOf(int elIdx)", "testcase": false, "constructor": false}, {"identifier": "hasNextUnsetSwapper", "parameters": "(int[] rowO)", "modifiers": "private", "return": "boolean", "signature": "boolean hasNextUnsetSwapper(int[] rowO)", "full_signature": "private boolean hasNextUnsetSwapper(int[] rowO)", "class_method_signature": "WaksmanUtils.hasNextUnsetSwapper(int[] rowO)", "testcase": false, "constructor": false}, {"identifier": "routeFromOutputToInput", "parameters": "(int rowOElIdx, int[] invPerm, int[] topPerm, int[] rowI)", "modifiers": "private", "return": "int", "signature": "int routeFromOutputToInput(int rowOElIdx, int[] invPerm, int[] topPerm, int[] rowI)", "full_signature": "private int routeFromOutputToInput(int rowOElIdx, int[] invPerm, int[] topPerm, int[] rowI)", "class_method_signature": "WaksmanUtils.routeFromOutputToInput(int rowOElIdx, int[] invPerm, int[] topPerm, int[] rowI)", "testcase": false, "constructor": false}, {"identifier": "routeFromInputToOutput", "parameters": "(int rowIElIdx, int[] perm, int[] bottomPerm, int[] rowO)", "modifiers": "private", "return": "int", "signature": "int routeFromInputToOutput(int rowIElIdx, int[] perm, int[] bottomPerm, int[] rowO)", "full_signature": "private int routeFromInputToOutput(int rowIElIdx, int[] perm, int[] bottomPerm, int[] rowO)", "class_method_signature": "WaksmanUtils.routeFromInputToOutput(int rowIElIdx, int[] perm, int[] bottomPerm, int[] rowO)", "testcase": false, "constructor": false}, {"identifier": "route", "parameters": "(int fromElIdx, int[] perm, int[] subPerm, int[] swappers,\n      boolean outputToInput)", "modifiers": "private", "return": "int", "signature": "int route(int fromElIdx, int[] perm, int[] subPerm, int[] swappers,\n      boolean outputToInput)", "full_signature": "private int route(int fromElIdx, int[] perm, int[] subPerm, int[] swappers,\n      boolean outputToInput)", "class_method_signature": "WaksmanUtils.route(int fromElIdx, int[] perm, int[] subPerm, int[] swappers,\n      boolean outputToInput)", "testcase": false, "constructor": false}, {"identifier": "setControlBits", "parameters": "(int[] perm, int[][] controlBits, int rowIdx, int colIdx)", "modifiers": "private", "return": "void", "signature": "void setControlBits(int[] perm, int[][] controlBits, int rowIdx, int colIdx)", "full_signature": "private void setControlBits(int[] perm, int[][] controlBits, int rowIdx, int colIdx)", "class_method_signature": "WaksmanUtils.setControlBits(int[] perm, int[][] controlBits, int rowIdx, int colIdx)", "testcase": false, "constructor": false}, {"identifier": "getNumRowsRequired", "parameters": "(int n)", "modifiers": "public", "return": "int", "signature": "int getNumRowsRequired(int n)", "full_signature": "public int getNumRowsRequired(int n)", "class_method_signature": "WaksmanUtils.getNumRowsRequired(int n)", "testcase": false, "constructor": false}, {"identifier": "getNumColsRequired", "parameters": "(int n)", "modifiers": "public", "return": "int", "signature": "int getNumColsRequired(int n)", "full_signature": "public int getNumColsRequired(int n)", "class_method_signature": "WaksmanUtils.getNumColsRequired(int n)", "testcase": false, "constructor": false}, {"identifier": "isPow2", "parameters": "(int n)", "modifiers": "public", "return": "boolean", "signature": "boolean isPow2(int n)", "full_signature": "public boolean isPow2(int n)", "class_method_signature": "WaksmanUtils.isPow2(int n)", "testcase": false, "constructor": false}, {"identifier": "invert", "parameters": "(int[] p)", "modifiers": "public", "return": "int[]", "signature": "int[] invert(int[] p)", "full_signature": "public int[] invert(int[] p)", "class_method_signature": "WaksmanUtils.invert(int[] p)", "testcase": false, "constructor": false}, {"identifier": "setControlBits", "parameters": "(int[] perm)", "modifiers": "public", "return": "Matrix<BigInteger>", "signature": "Matrix<BigInteger> setControlBits(int[] perm)", "full_signature": "public Matrix<BigInteger> setControlBits(int[] perm)", "class_method_signature": "WaksmanUtils.setControlBits(int[] perm)", "testcase": false, "constructor": false}], "file": "lib/common/src/main/java/dk/alexandra/fresco/lib/common/collections/permute/WaksmanUtils.java"}, "focal_method": {"identifier": "isPow2", "parameters": "(int n)", "modifiers": "public", "return": "boolean", "body": "public boolean isPow2(int n) {\n    return n >= 0 && ((n & (n - 1)) == 0);\n  }", "signature": "boolean isPow2(int n)", "full_signature": "public boolean isPow2(int n)", "class_method_signature": "WaksmanUtils.isPow2(int n)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}