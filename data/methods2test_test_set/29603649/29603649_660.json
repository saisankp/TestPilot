{"test_class": {"identifier": "ExternalClassInitializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CLASS = \"PACKAGE.EXTERNAL_CLASS_NAME\";", "modifier": "private static final", "type": "String", "declarator": "CLASS = \"PACKAGE.EXTERNAL_CLASS_NAME\"", "var_name": "CLASS"}, {"original_string": "private static final String SIMPLE_CLASS_NAME = \"EXTERNAL_CLASS_NAME\";", "modifier": "private static final", "type": "String", "declarator": "SIMPLE_CLASS_NAME = \"EXTERNAL_CLASS_NAME\"", "var_name": "SIMPLE_CLASS_NAME"}, {"original_string": "private static final String PATH = \"PATH_OF_THE_CLASS\";", "modifier": "private static final", "type": "String", "declarator": "PATH = \"PATH_OF_THE_CLASS\"", "var_name": "PATH"}, {"original_string": "@Mock\n    private ClassPathExtender classPathExtender;", "modifier": "@Mock\n    private", "type": "ClassPathExtender", "declarator": "classPathExtender", "var_name": "classPathExtender"}, {"original_string": "@Mock\n    private ClassFactory classFactory;", "modifier": "@Mock\n    private", "type": "ClassFactory", "declarator": "classFactory", "var_name": "classFactory"}, {"original_string": "@Mock\n    private BeanRegistryService beanRegistryService;", "modifier": "@Mock\n    private", "type": "BeanRegistryService", "declarator": "beanRegistryService", "var_name": "beanRegistryService"}, {"original_string": "@Mock\n    private ClassNameMapper classNameMapper;", "modifier": "@Mock\n    private", "type": "ClassNameMapper", "declarator": "classNameMapper", "var_name": "classNameMapper"}, {"original_string": "@Mock\n    private ClassValidator classValidator;", "modifier": "@Mock\n    private", "type": "ClassValidator", "declarator": "classValidator", "var_name": "classValidator"}, {"original_string": "@Mock\n    private ClassInstantiator classInstantiator;", "modifier": "@Mock\n    private", "type": "ClassInstantiator", "declarator": "classInstantiator", "var_name": "classInstantiator"}, {"original_string": "@InjectMocks\n    private ExternalClassInitializer underTest;", "modifier": "@InjectMocks\n    private", "type": "ExternalClassInitializer", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/initializer/support/ExternalClassInitializerTest.java"}, "test_case": {"identifier": "testLoadExternalClassShouldBeRegisteredToApplicationContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadExternalClassShouldBeRegisteredToApplicationContext() throws ClassNotFoundException {\n        //GIVEN\n        given(beanRegistryService.getBean(SIMPLE_CLASS_NAME, TemplateGenerator.class)).willThrow(new NoSuchBeanDefinitionException(\"\"));\n        given(classFactory.getClassToLoad(CLASS)).willReturn(Object.class);\n        ignoreInterfaceTypeValidation();\n        //WHEN\n        underTest.loadExternalClass(SIMPLE_CLASS_NAME, PATH, TemplateGenerator.class);\n        //THEN\n        verify(beanRegistryService).register(eq(SIMPLE_CLASS_NAME), any(Object.class));\n        verify(classNameMapper).get(SIMPLE_CLASS_NAME);\n    }", "signature": "void testLoadExternalClassShouldBeRegisteredToApplicationContext()", "full_signature": "@Test public void testLoadExternalClassShouldBeRegisteredToApplicationContext()", "class_method_signature": "ExternalClassInitializerTest.testLoadExternalClassShouldBeRegisteredToApplicationContext()", "testcase": true, "constructor": false, "invocations": ["willThrow", "given", "getBean", "willReturn", "given", "getClassToLoad", "ignoreInterfaceTypeValidation", "loadExternalClass", "register", "verify", "eq", "any", "get", "verify"]}, "focal_class": {"identifier": "ExternalClassInitializer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ExternalClassInitializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ExternalClassInitializer.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private ClassPathExtender classPathExtender;", "modifier": "@Autowired\n    private", "type": "ClassPathExtender", "declarator": "classPathExtender", "var_name": "classPathExtender"}, {"original_string": "@Autowired\n    private ClassFactory classFactory;", "modifier": "@Autowired\n    private", "type": "ClassFactory", "declarator": "classFactory", "var_name": "classFactory"}, {"original_string": "@Autowired\n    private BeanRegistryService beanRegistryService;", "modifier": "@Autowired\n    private", "type": "BeanRegistryService", "declarator": "beanRegistryService", "var_name": "beanRegistryService"}, {"original_string": "@Autowired\n    private ClassNameMapper classNameMapper;", "modifier": "@Autowired\n    private", "type": "ClassNameMapper", "declarator": "classNameMapper", "var_name": "classNameMapper"}, {"original_string": "@Autowired\n    private ClassValidator externalClassValidator;", "modifier": "@Autowired\n    private", "type": "ClassValidator", "declarator": "externalClassValidator", "var_name": "externalClassValidator"}, {"original_string": "@Autowired\n    private ClassInstantiator classInstantiator;", "modifier": "@Autowired\n    private", "type": "ClassInstantiator", "declarator": "classInstantiator", "var_name": "classInstantiator"}], "methods": [{"identifier": "loadExternalClass", "parameters": "(final String externalClassName, final String classPath, final Class<T> interfaceToCast)", "modifiers": "public", "return": "T", "signature": "T loadExternalClass(final String externalClassName, final String classPath, final Class<T> interfaceToCast)", "full_signature": "public T loadExternalClass(final String externalClassName, final String classPath, final Class<T> interfaceToCast)", "class_method_signature": "ExternalClassInitializer.loadExternalClass(final String externalClassName, final String classPath, final Class<T> interfaceToCast)", "testcase": false, "constructor": false}, {"identifier": "initializeBean", "parameters": "(final String externalClassName, final String classPath, final Class<T> interfaceToCast, final String className)", "modifiers": "private", "return": "T", "signature": "T initializeBean(final String externalClassName, final String classPath, final Class<T> interfaceToCast, final String className)", "full_signature": "private T initializeBean(final String externalClassName, final String classPath, final Class<T> interfaceToCast, final String className)", "class_method_signature": "ExternalClassInitializer.initializeBean(final String externalClassName, final String classPath, final Class<T> interfaceToCast, final String className)", "testcase": false, "constructor": false}, {"identifier": "instantiateExternalClass", "parameters": "(final String externalClassName, final String classPath, final Class<T> interfaceToCast)", "modifiers": "private", "return": "T", "signature": "T instantiateExternalClass(final String externalClassName, final String classPath, final Class<T> interfaceToCast)", "full_signature": "private T instantiateExternalClass(final String externalClassName, final String classPath, final Class<T> interfaceToCast)", "class_method_signature": "ExternalClassInitializer.instantiateExternalClass(final String externalClassName, final String classPath, final Class<T> interfaceToCast)", "testcase": false, "constructor": false}, {"identifier": "findBean", "parameters": "(final Class<T> interfaceToCast, final String className)", "modifiers": "private", "return": "T", "signature": "T findBean(final Class<T> interfaceToCast, final String className)", "full_signature": "private T findBean(final Class<T> interfaceToCast, final String className)", "class_method_signature": "ExternalClassInitializer.findBean(final Class<T> interfaceToCast, final String className)", "testcase": false, "constructor": false}, {"identifier": "getSimpleName", "parameters": "(final String externalClassName)", "modifiers": "private", "return": "String", "signature": "String getSimpleName(final String externalClassName)", "full_signature": "private String getSimpleName(final String externalClassName)", "class_method_signature": "ExternalClassInitializer.getSimpleName(final String externalClassName)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/initializer/support/ExternalClassInitializer.java"}, "focal_method": {"identifier": "loadExternalClass", "parameters": "(final String externalClassName, final String classPath, final Class<T> interfaceToCast)", "modifiers": "public", "return": "T", "body": "public <T> T loadExternalClass(final String externalClassName, final String classPath, final Class<T> interfaceToCast) {\n        String simpleName = getSimpleName(externalClassName);\n        T result;\n        try {\n            result = findBean(interfaceToCast, simpleName);\n        } catch (BeansException ex) {\n            LOGGER.debug(String.format(\"Finding class with name '%s' of type '%s' as a bean failed\", simpleName, interfaceToCast), ex);\n            String fullClassName = classNameMapper.get(externalClassName);\n            result = initializeBean(fullClassName, classPath, interfaceToCast, simpleName);\n        }\n        return result;\n    }", "signature": "T loadExternalClass(final String externalClassName, final String classPath, final Class<T> interfaceToCast)", "full_signature": "public T loadExternalClass(final String externalClassName, final String classPath, final Class<T> interfaceToCast)", "class_method_signature": "ExternalClassInitializer.loadExternalClass(final String externalClassName, final String classPath, final Class<T> interfaceToCast)", "testcase": false, "constructor": false, "invocations": ["getSimpleName", "findBean", "debug", "format", "get", "initializeBean"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}