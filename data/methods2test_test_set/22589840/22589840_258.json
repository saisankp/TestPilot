{"test_class": {"identifier": "LecturerMappingByPersonalNumberTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PERSONAL_NUMBER_ONE = \"012345\";", "modifier": "private static final", "type": "String", "declarator": "PERSONAL_NUMBER_ONE = \"012345\"", "var_name": "PERSONAL_NUMBER_ONE"}, {"original_string": "LecturerMappingByPersonalNumber lecturerMappingByPersonalNumberTestObject;", "modifier": "", "type": "LecturerMappingByPersonalNumber", "declarator": "lecturerMappingByPersonalNumberTestObject", "var_name": "lecturerMappingByPersonalNumberTestObject"}, {"original_string": "BaseSecurity baseSecurityMock;", "modifier": "", "type": "BaseSecurity", "declarator": "baseSecurityMock", "var_name": "baseSecurityMock"}, {"original_string": "private Lecturer lecturerMock;", "modifier": "private", "type": "Lecturer", "declarator": "lecturerMock", "var_name": "lecturerMock"}, {"original_string": "private Identity identityMockOne;", "modifier": "private", "type": "Identity", "declarator": "identityMockOne", "var_name": "identityMockOne"}, {"original_string": "private Identity identityMockTwo;", "modifier": "private", "type": "Identity", "declarator": "identityMockTwo", "var_name": "identityMockTwo"}], "file": "olat7.8/src/test/java/org/olat/lms/core/course/campus/impl/mapper/LecturerMappingByPersonalNumberTest.java"}, "test_case": {"identifier": "tryToMap_foundNoMapping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tryToMap_foundNoMapping() {\n        List<Identity> emptyResults = new ArrayList<Identity>();\n        when(\n                baseSecurityMock.getVisibleIdentitiesByPowerSearch(anyString(), anyMap(), anyBoolean(), any(SecurityGroup[].class),\n                        any(PermissionOnResourceable[].class), any(String[].class), any(Date.class), any(Date.class))).thenReturn(emptyResults);\n\n        Identity mappedIdentity = lecturerMappingByPersonalNumberTestObject.tryToMap(lecturerMock.getPersonalNr());\n        assertNull(\"Must return null, when no mapping exists\", mappedIdentity);\n    }", "signature": "void tryToMap_foundNoMapping()", "full_signature": "@Test public void tryToMap_foundNoMapping()", "class_method_signature": "LecturerMappingByPersonalNumberTest.tryToMap_foundNoMapping()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getVisibleIdentitiesByPowerSearch", "anyString", "anyMap", "anyBoolean", "any", "any", "any", "any", "any", "tryToMap", "getPersonalNr", "assertNull"]}, "focal_class": {"identifier": "LecturerMappingByPersonalNumber", "superclass": "extends AbstractMappingByInstitutionalIdentifier", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}], "methods": [{"identifier": "tryToMap", "parameters": "(Long personalNr)", "modifiers": "public", "return": "Identity", "signature": "Identity tryToMap(Long personalNr)", "full_signature": "public Identity tryToMap(Long personalNr)", "class_method_signature": "LecturerMappingByPersonalNumber.tryToMap(Long personalNr)", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/lms/core/course/campus/impl/mapper/LecturerMappingByPersonalNumber.java"}, "focal_method": {"identifier": "tryToMap", "parameters": "(Long personalNr)", "modifiers": "public", "return": "Identity", "body": "public Identity tryToMap(Long personalNr) {\n        // append '%' because personal-number starts with 0 e.g. 012345\n        Identity mappedIdentity = tryToMap(UserConstants.INSTITUTIONAL_EMPLOYEE_NUMBER, \"%\" + personalNr.toString());\n        if (mappedIdentity != null) {\n            String personalNumber = mappedIdentity.getUser().getRawUserProperty(UserConstants.INSTITUTIONAL_EMPLOYEE_NUMBER);\n            try {\n                Long personalNumberAsLong = Long.valueOf(personalNumber);\n                if (personalNumberAsLong.equals(personalNr)) {\n                    return mappedIdentity;\n                }\n                log.warn(\"User-Property as Long (\" + personalNumberAsLong + \") has not the same value as lecturer personal-number=\" + personalNr);\n            } catch (NumberFormatException ex) {\n                log.warn(\"Could not convert personal-number to Long\");\n            }\n        }\n        return null;\n\n    }", "signature": "Identity tryToMap(Long personalNr)", "full_signature": "public Identity tryToMap(Long personalNr)", "class_method_signature": "LecturerMappingByPersonalNumber.tryToMap(Long personalNr)", "testcase": false, "constructor": false, "invocations": ["tryToMap", "toString", "getRawUserProperty", "getUser", "valueOf", "equals", "warn", "warn"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}