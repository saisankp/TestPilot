{"test_class": {"identifier": "JEtcdClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "JEtcdClient client;", "modifier": "", "type": "JEtcdClient", "declarator": "client", "var_name": "client"}], "file": "dubbo-remoting/dubbo-remoting-etcd3/src/test/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClientTest.java"}, "test_case": {"identifier": "test_watch_when_modify", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_watch_when_modify() {\n        String path = \"/dubbo/config/jetcd-client-unit-test/configurators\";\n        String endpoint = \"http://127.0.0.1:2379\";\n        CountDownLatch latch = new CountDownLatch(1);\n        ByteSequence key = ByteSequence.from(path, UTF_8);\n\n        Watch.Listener listener = Watch.listener(response -> {\n            for (WatchEvent event : response.getEvents()) {\n                Assertions.assertEquals(\"PUT\", event.getEventType().toString());\n                Assertions.assertEquals(path, event.getKeyValue().getKey().toString(UTF_8));\n                Assertions.assertEquals(\"Hello\", event.getKeyValue().getValue().toString(UTF_8));\n                latch.countDown();\n            }\n\n        });\n\n        try (Client client = Client.builder().endpoints(endpoint).build();\n             Watch watch = client.getWatchClient();\n             Watch.Watcher watcher = watch.watch(key, listener)) {\n            // try to modify the key\n            client.getKVClient().put(ByteSequence.from(path, UTF_8), ByteSequence.from(\"Hello\", UTF_8));\n            latch.await();\n        } catch (Exception e) {\n            Assertions.fail(e.getMessage());\n        }\n    }", "signature": "void test_watch_when_modify()", "full_signature": "@Test public void test_watch_when_modify()", "class_method_signature": "JEtcdClientTest.test_watch_when_modify()", "testcase": true, "constructor": false, "invocations": ["from", "listener", "getEvents", "assertEquals", "toString", "getEventType", "assertEquals", "toString", "getKey", "getKeyValue", "assertEquals", "toString", "getValue", "getKeyValue", "countDown", "build", "endpoints", "builder", "getWatchClient", "watch", "put", "getKVClient", "from", "from", "await", "fail", "getMessage"]}, "focal_class": {"identifier": "JEtcdClient", "superclass": "extends AbstractEtcdClient<JEtcdClient.EtcdWatcher>", "interfaces": "", "fields": [{"original_string": "private JEtcdClientWrapper clientWrapper;", "modifier": "private", "type": "JEtcdClientWrapper", "declarator": "clientWrapper", "var_name": "clientWrapper"}, {"original_string": "private ScheduledExecutorService reconnectSchedule;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "reconnectSchedule", "var_name": "reconnectSchedule"}, {"original_string": "private ExecutorService notifyExecutor;", "modifier": "private", "type": "ExecutorService", "declarator": "notifyExecutor", "var_name": "notifyExecutor"}, {"original_string": "private int delayPeriod;", "modifier": "private", "type": "int", "declarator": "delayPeriod", "var_name": "delayPeriod"}, {"original_string": "private Logger logger = LoggerFactory.getLogger(JEtcdClient.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JEtcdClient.class)", "var_name": "logger"}], "methods": [{"identifier": "JEtcdClient", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " JEtcdClient(URL url)", "full_signature": "public  JEtcdClient(URL url)", "class_method_signature": "JEtcdClient.JEtcdClient(URL url)", "testcase": false, "constructor": true}, {"identifier": "doCreatePersistent", "parameters": "(String path)", "modifiers": "@Override public", "return": "void", "signature": "void doCreatePersistent(String path)", "full_signature": "@Override public void doCreatePersistent(String path)", "class_method_signature": "JEtcdClient.doCreatePersistent(String path)", "testcase": false, "constructor": false}, {"identifier": "doCreateEphemeral", "parameters": "(String path)", "modifiers": "@Override public", "return": "long", "signature": "long doCreateEphemeral(String path)", "full_signature": "@Override public long doCreateEphemeral(String path)", "class_method_signature": "JEtcdClient.doCreateEphemeral(String path)", "testcase": false, "constructor": false}, {"identifier": "checkExists", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkExists(String path)", "full_signature": "@Override public boolean checkExists(String path)", "class_method_signature": "JEtcdClient.checkExists(String path)", "testcase": false, "constructor": false}, {"identifier": "createChildWatcherListener", "parameters": "(String path, ChildListener listener)", "modifiers": "@Override public", "return": "EtcdWatcher", "signature": "EtcdWatcher createChildWatcherListener(String path, ChildListener listener)", "full_signature": "@Override public EtcdWatcher createChildWatcherListener(String path, ChildListener listener)", "class_method_signature": "JEtcdClient.createChildWatcherListener(String path, ChildListener listener)", "testcase": false, "constructor": false}, {"identifier": "addChildWatcherListener", "parameters": "(String path, EtcdWatcher etcdWatcher)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> addChildWatcherListener(String path, EtcdWatcher etcdWatcher)", "full_signature": "@Override public List<String> addChildWatcherListener(String path, EtcdWatcher etcdWatcher)", "class_method_signature": "JEtcdClient.addChildWatcherListener(String path, EtcdWatcher etcdWatcher)", "testcase": false, "constructor": false}, {"identifier": "removeChildWatcherListener", "parameters": "(String path, EtcdWatcher etcdWatcher)", "modifiers": "@Override public", "return": "void", "signature": "void removeChildWatcherListener(String path, EtcdWatcher etcdWatcher)", "full_signature": "@Override public void removeChildWatcherListener(String path, EtcdWatcher etcdWatcher)", "class_method_signature": "JEtcdClient.removeChildWatcherListener(String path, EtcdWatcher etcdWatcher)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "(String path)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getChildren(String path)", "full_signature": "@Override public List<String> getChildren(String path)", "class_method_signature": "JEtcdClient.getChildren(String path)", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "JEtcdClient.isConnected()", "testcase": false, "constructor": false}, {"identifier": "createLease", "parameters": "(long second)", "modifiers": "@Override public", "return": "long", "signature": "long createLease(long second)", "full_signature": "@Override public long createLease(long second)", "class_method_signature": "JEtcdClient.createLease(long second)", "testcase": false, "constructor": false}, {"identifier": "createLease", "parameters": "(long ttl, long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "long", "signature": "long createLease(long ttl, long timeout, TimeUnit unit)", "full_signature": "@Override public long createLease(long ttl, long timeout, TimeUnit unit)", "class_method_signature": "JEtcdClient.createLease(long ttl, long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String path)", "modifiers": "@Override public", "return": "void", "signature": "void delete(String path)", "full_signature": "@Override public void delete(String path)", "class_method_signature": "JEtcdClient.delete(String path)", "testcase": false, "constructor": false}, {"identifier": "revokeLease", "parameters": "(long lease)", "modifiers": "@Override public", "return": "void", "signature": "void revokeLease(long lease)", "full_signature": "@Override public void revokeLease(long lease)", "class_method_signature": "JEtcdClient.revokeLease(long lease)", "testcase": false, "constructor": false}, {"identifier": "doClose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void doClose()", "full_signature": "@Override public void doClose()", "class_method_signature": "JEtcdClient.doClose()", "testcase": false, "constructor": false}, {"identifier": "getKVValue", "parameters": "(String key)", "modifiers": "@Override public", "return": "String", "signature": "String getKVValue(String key)", "full_signature": "@Override public String getKVValue(String key)", "class_method_signature": "JEtcdClient.getKVValue(String key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, String value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean put(String key, String value)", "full_signature": "@Override public boolean put(String key, String value)", "class_method_signature": "JEtcdClient.put(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "putEphemeral", "parameters": "(String key, String value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean putEphemeral(String key, String value)", "full_signature": "@Override public boolean putEphemeral(String key, String value)", "class_method_signature": "JEtcdClient.putEphemeral(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "getChannel", "parameters": "()", "modifiers": "public", "return": "ManagedChannel", "signature": "ManagedChannel getChannel()", "full_signature": "public ManagedChannel getChannel()", "class_method_signature": "JEtcdClient.getChannel()", "testcase": false, "constructor": false}], "file": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java"}, "focal_method": {"identifier": "put", "parameters": "(String key, String value)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean put(String key, String value) {\n        return clientWrapper.put(key, value);\n    }", "signature": "boolean put(String key, String value)", "full_signature": "@Override public boolean put(String key, String value)", "class_method_signature": "JEtcdClient.put(String key, String value)", "testcase": false, "constructor": false, "invocations": ["put"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}