{"test_class": {"identifier": "FileDocumentFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static File SEARCH_TEST_FOLDER = new File(System.getProperty(\"java.io.tmpdir\"), \"SearchTestFolder\");", "modifier": "private static", "type": "File", "declarator": "SEARCH_TEST_FOLDER = new File(System.getProperty(\"java.io.tmpdir\"), \"SearchTestFolder\")", "var_name": "SEARCH_TEST_FOLDER"}, {"original_string": "private static FileDocumentFactory fileDocumentFactory;", "modifier": "private static", "type": "FileDocumentFactory", "declarator": "fileDocumentFactory", "var_name": "fileDocumentFactory"}, {"original_string": "private static OLATResourceable olatResourcable;", "modifier": "private static", "type": "OLATResourceable", "declarator": "olatResourcable", "var_name": "olatResourcable"}], "file": "olat7.8/src/test/java/org/olat/lms/search/document/file/FileDocumentFactoryTest.java"}, "test_case": {"identifier": "testIsFileSupported", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsFileSupported() {\n        assertTrue(\"html must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.html\"))));\n        assertTrue(\"htm must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.htm\"))));\n        assertTrue(\"HTML must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.HTML\"))));\n        assertTrue(\"HTM must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.HTM\"))));\n        assertTrue(\"HTM must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.xhtml\"))));\n        assertTrue(\"HTM must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.XHTML\"))));\n\n        assertTrue(\"pdf must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.pdf\"))));\n        assertTrue(\"PDF must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.PDF\"))));\n\n        assertTrue(\"DOC must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.DOC\"))));\n        assertTrue(\"doc must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.doc\"))));\n\n        assertTrue(\"TXT must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.TXT\"))));\n        assertTrue(\"txt must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.txt\"))));\n        assertTrue(\"txt must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.readme\"))));\n        assertTrue(\"txt must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.README\"))));\n        assertTrue(\"txt must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.csv\"))));\n        assertTrue(\"txt must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.CSV\"))));\n        assertTrue(\"XML must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.XML\"))));\n        assertTrue(\"xml must be supported\", fileDocumentFactory.isFileSupported(new LocalFileImpl(new File(\"test.xml\"))));\n    }", "signature": "void testIsFileSupported()", "full_signature": "@Test public void testIsFileSupported()", "class_method_signature": "FileDocumentFactoryTest.testIsFileSupported()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported", "assertTrue", "isFileSupported"]}, "focal_class": {"identifier": "FileDocumentFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "private static boolean pptFileEnabled;", "modifier": "private static", "type": "boolean", "declarator": "pptFileEnabled", "var_name": "pptFileEnabled"}, {"original_string": "private static boolean excelFileEnabled;", "modifier": "private static", "type": "boolean", "declarator": "excelFileEnabled", "var_name": "excelFileEnabled"}, {"original_string": "private final static String PDF_SUFFIX = \"pdf\";", "modifier": "private final static", "type": "String", "declarator": "PDF_SUFFIX = \"pdf\"", "var_name": "PDF_SUFFIX"}, {"original_string": "private final static String EXCEL_SUFFIX = \"xls\";", "modifier": "private final static", "type": "String", "declarator": "EXCEL_SUFFIX = \"xls\"", "var_name": "EXCEL_SUFFIX"}, {"original_string": "private final static String WORD_SUFFIX = \"doc\";", "modifier": "private final static", "type": "String", "declarator": "WORD_SUFFIX = \"doc\"", "var_name": "WORD_SUFFIX"}, {"original_string": "private final static String POWERPOINT_SUFFIX = \"ppt\";", "modifier": "private final static", "type": "String", "declarator": "POWERPOINT_SUFFIX = \"ppt\"", "var_name": "POWERPOINT_SUFFIX"}, {"original_string": "private final static String EXCEL_X_SUFFIX = \"xlsx\";", "modifier": "private final static", "type": "String", "declarator": "EXCEL_X_SUFFIX = \"xlsx\"", "var_name": "EXCEL_X_SUFFIX"}, {"original_string": "private final static String WORD_X_SUFFIX = \"docx\";", "modifier": "private final static", "type": "String", "declarator": "WORD_X_SUFFIX = \"docx\"", "var_name": "WORD_X_SUFFIX"}, {"original_string": "private final static String POWERPOINT_X_SUFFIX = \"pptx\";", "modifier": "private final static", "type": "String", "declarator": "POWERPOINT_X_SUFFIX = \"pptx\"", "var_name": "POWERPOINT_X_SUFFIX"}, {"original_string": "private final static String OD_TEXT_SUFFIX = \"odt\";", "modifier": "private final static", "type": "String", "declarator": "OD_TEXT_SUFFIX = \"odt\"", "var_name": "OD_TEXT_SUFFIX"}, {"original_string": "private final static String OD_SPREADSHEET_SUFFIX = \"ods\";", "modifier": "private final static", "type": "String", "declarator": "OD_SPREADSHEET_SUFFIX = \"ods\"", "var_name": "OD_SPREADSHEET_SUFFIX"}, {"original_string": "private final static String OD_PRESENTATION_SUFFIX = \"odp\";", "modifier": "private final static", "type": "String", "declarator": "OD_PRESENTATION_SUFFIX = \"odp\"", "var_name": "OD_PRESENTATION_SUFFIX"}, {"original_string": "private final static String OD_FORMULA_SUFFIX = \"odf\";", "modifier": "private final static", "type": "String", "declarator": "OD_FORMULA_SUFFIX = \"odf\"", "var_name": "OD_FORMULA_SUFFIX"}, {"original_string": "private final static String OD_GRAPHIC_SUFFIX = \"odg\";", "modifier": "private final static", "type": "String", "declarator": "OD_GRAPHIC_SUFFIX = \"odg\"", "var_name": "OD_GRAPHIC_SUFFIX"}, {"original_string": "private final static String HTML_SUFFIX = \"htm html xhtml\";", "modifier": "private final static", "type": "String", "declarator": "HTML_SUFFIX = \"htm html xhtml\"", "var_name": "HTML_SUFFIX"}, {"original_string": "private final static String XML_SUFFIX = \"xml\";", "modifier": "private final static", "type": "String", "declarator": "XML_SUFFIX = \"xml\"", "var_name": "XML_SUFFIX"}, {"original_string": "private final static String TEXT_SUFFIX = \"txt tex readme csv\";", "modifier": "private final static", "type": "String", "declarator": "TEXT_SUFFIX = \"txt tex readme csv\"", "var_name": "TEXT_SUFFIX"}, {"original_string": "private static final String IMS_MANIFEST_FILE = \"imsmanifest.xml\";", "modifier": "private static final", "type": "String", "declarator": "IMS_MANIFEST_FILE = \"imsmanifest.xml\"", "var_name": "IMS_MANIFEST_FILE"}, {"original_string": "private static List<String> checkFileSizeSuffixes;", "modifier": "private static", "type": "List<String>", "declarator": "checkFileSizeSuffixes", "var_name": "checkFileSizeSuffixes"}, {"original_string": "private static long maxFileSize;", "modifier": "private static", "type": "long", "declarator": "maxFileSize", "var_name": "maxFileSize"}, {"original_string": "private final List<String> fileBlackList;", "modifier": "private final", "type": "List<String>", "declarator": "fileBlackList", "var_name": "fileBlackList"}, {"original_string": "private static MimeTypeProvider mimeTypeProvider;", "modifier": "private static", "type": "MimeTypeProvider", "declarator": "mimeTypeProvider", "var_name": "mimeTypeProvider"}, {"original_string": "private int excludedFileSizeCount = 0;", "modifier": "private", "type": "int", "declarator": "excludedFileSizeCount = 0", "var_name": "excludedFileSizeCount"}], "methods": [{"identifier": "FileDocumentFactory", "parameters": "(final SearchModule searchModule, MimeTypeProvider mimeTypeProvider)", "modifiers": "", "return": "", "signature": " FileDocumentFactory(final SearchModule searchModule, MimeTypeProvider mimeTypeProvider)", "full_signature": "  FileDocumentFactory(final SearchModule searchModule, MimeTypeProvider mimeTypeProvider)", "class_method_signature": "FileDocumentFactory.FileDocumentFactory(final SearchModule searchModule, MimeTypeProvider mimeTypeProvider)", "testcase": false, "constructor": true}, {"identifier": "FileDocumentFactory", "parameters": "(final SearchModule searchModule)", "modifiers": "public", "return": "", "signature": " FileDocumentFactory(final SearchModule searchModule)", "full_signature": "public  FileDocumentFactory(final SearchModule searchModule)", "class_method_signature": "FileDocumentFactory.FileDocumentFactory(final SearchModule searchModule)", "testcase": false, "constructor": true}, {"identifier": "createDocument", "parameters": "(final SearchResourceContext leafResourceContext, final VFSLeaf leaf)", "modifiers": "public static", "return": "Document", "signature": "Document createDocument(final SearchResourceContext leafResourceContext, final VFSLeaf leaf)", "full_signature": "public static Document createDocument(final SearchResourceContext leafResourceContext, final VFSLeaf leaf)", "class_method_signature": "FileDocumentFactory.createDocument(final SearchResourceContext leafResourceContext, final VFSLeaf leaf)", "testcase": false, "constructor": false}, {"identifier": "getSuffix", "parameters": "(final String fileName)", "modifiers": "private static", "return": "String", "signature": "String getSuffix(final String fileName)", "full_signature": "private static String getSuffix(final String fileName)", "class_method_signature": "FileDocumentFactory.getSuffix(final String fileName)", "testcase": false, "constructor": false}, {"identifier": "isFileSupported", "parameters": "(final VFSLeaf leaf)", "modifiers": "public", "return": "boolean", "signature": "boolean isFileSupported(final VFSLeaf leaf)", "full_signature": "public boolean isFileSupported(final VFSLeaf leaf)", "class_method_signature": "FileDocumentFactory.isFileSupported(final VFSLeaf leaf)", "testcase": false, "constructor": false}, {"identifier": "getExcludedFileSizeCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExcludedFileSizeCount()", "full_signature": "public int getExcludedFileSizeCount()", "class_method_signature": "FileDocumentFactory.getExcludedFileSizeCount()", "testcase": false, "constructor": false}, {"identifier": "resetExcludedFileSizeCount", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetExcludedFileSizeCount()", "full_signature": "public void resetExcludedFileSizeCount()", "class_method_signature": "FileDocumentFactory.resetExcludedFileSizeCount()", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/lms/search/document/file/FileDocumentFactory.java"}, "focal_method": {"identifier": "isFileSupported", "parameters": "(final VFSLeaf leaf)", "modifiers": "public", "return": "boolean", "body": "public boolean isFileSupported(final VFSLeaf leaf) {\n        final String fileName = leaf.getName();\n        if (fileName != null && fileName.startsWith(\".\")) {\n            // don't index all mac os x hidden files\n            return false;\n        }\n\n        String suffix;\n        try {\n            suffix = getSuffix(fileName);\n        } catch (final DocumentNotImplementedException e) {\n            return false;\n        }\n\n        // 1. Check if file is not on fileBlackList\n        if (fileBlackList.contains(fileName)) {\n            // File name is on blacklist\n            return false;\n        }\n        // 2. Check for certain file-type the file size\n        if (checkFileSizeSuffixes.contains(suffix)) {\n            if ((maxFileSize != 0) && (leaf.getSize() > maxFileSize)) {\n                log.info(\"File too big, exlude from search index. filename=\" + fileName);\n                excludedFileSizeCount++;\n                return false;\n            }\n        }\n        /*\n         * 3. Check if suffix is supported if (supportedSuffixes.indexOf(suffix) >= 0) { return true; }\n         */\n        // index all files (index metadatas)\n        return true;\n    }", "signature": "boolean isFileSupported(final VFSLeaf leaf)", "full_signature": "public boolean isFileSupported(final VFSLeaf leaf)", "class_method_signature": "FileDocumentFactory.isFileSupported(final VFSLeaf leaf)", "testcase": false, "constructor": false, "invocations": ["getName", "startsWith", "getSuffix", "contains", "contains", "getSize", "info"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}