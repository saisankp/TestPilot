{"test_class": {"identifier": "GuidanceManeuverDataTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [{"original_string": "private static final int ICON_ID = 1;", "modifier": "private static final", "type": "int", "declarator": "ICON_ID = 1", "var_name": "ICON_ID"}, {"original_string": "private static final Long DISTANCE = 1L;", "modifier": "private static final", "type": "Long", "declarator": "DISTANCE = 1L", "var_name": "DISTANCE"}, {"original_string": "private static final String INFO1 = \"Info1\";", "modifier": "private static final", "type": "String", "declarator": "INFO1 = \"Info1\"", "var_name": "INFO1"}, {"original_string": "private static final String INFO2 = \"Info2\";", "modifier": "private static final", "type": "String", "declarator": "INFO2 = \"Info2\"", "var_name": "INFO2"}, {"original_string": "private static final Bitmap NEXT_ROAD_ICON = Bitmap.createBitmap(10, 10, Bitmap.Config.ARGB_8888);", "modifier": "private static final", "type": "Bitmap", "declarator": "NEXT_ROAD_ICON = Bitmap.createBitmap(10, 10, Bitmap.Config.ARGB_8888)", "var_name": "NEXT_ROAD_ICON"}, {"original_string": "private GuidanceManeuverData mManeuverData;", "modifier": "private", "type": "GuidanceManeuverData", "declarator": "mManeuverData", "var_name": "mManeuverData"}, {"original_string": "private GuidanceManeuverData mManeuverDataWithNextRoadIcon;", "modifier": "private", "type": "GuidanceManeuverData", "declarator": "mManeuverDataWithNextRoadIcon", "var_name": "mManeuverDataWithNextRoadIcon"}], "file": "MSDKUIKit/MSDKUILib/src/test/java/com/here/msdkui/guidance/GuidanceManeuverDataTest.java"}, "test_case": {"identifier": "testEquality", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquality() {\n        GuidanceManeuverData data = new GuidanceManeuverData(ICON_ID, DISTANCE, INFO1, INFO2);\n        assertThat(mManeuverData, is(data));\n        GuidanceManeuverData data1 = new GuidanceManeuverData(0, DISTANCE, INFO1, INFO2);\n        assertThat(mManeuverData, is(not(data1)));\n        assertThat(null, is(not(mManeuverData)));\n        assertThat(mManeuverData.hashCode(), is(data.hashCode()));\n        GuidanceManeuverData data2 = new GuidanceManeuverData(ICON_ID, DISTANCE, INFO1, INFO2, NEXT_ROAD_ICON);\n        assertThat(data2, is(mManeuverDataWithNextRoadIcon));\n        assertThat(mManeuverDataWithNextRoadIcon.hashCode(), is(data2.hashCode()));\n    }", "signature": "void testEquality()", "full_signature": "@Test public void testEquality()", "class_method_signature": "GuidanceManeuverDataTest.testEquality()", "testcase": true, "constructor": false, "invocations": ["assertThat", "is", "assertThat", "is", "not", "assertThat", "is", "not", "assertThat", "hashCode", "is", "hashCode", "assertThat", "is", "assertThat", "hashCode", "is", "hashCode"]}, "focal_class": {"identifier": "GuidanceManeuverData", "superclass": "", "interfaces": "implements Parcelable", "fields": [{"original_string": "public static final Creator<GuidanceManeuverData> CREATOR = new Creator<GuidanceManeuverData>() {\n        @Override\n        public GuidanceManeuverData createFromParcel(Parcel in) {\n            return new GuidanceManeuverData(in);\n        }\n\n        @Override\n        public GuidanceManeuverData[] newArray(int size) {\n            return new GuidanceManeuverData[size];\n        }\n    };", "modifier": "public static final", "type": "Creator<GuidanceManeuverData>", "declarator": "CREATOR = new Creator<GuidanceManeuverData>() {\n        @Override\n        public GuidanceManeuverData createFromParcel(Parcel in) {\n            return new GuidanceManeuverData(in);\n        }\n\n        @Override\n        public GuidanceManeuverData[] newArray(int size) {\n            return new GuidanceManeuverData[size];\n        }\n    }", "var_name": "CREATOR"}, {"original_string": "private final int mIconId;", "modifier": "private final", "type": "int", "declarator": "mIconId", "var_name": "mIconId"}, {"original_string": "private final Long mDistance;", "modifier": "private final", "type": "Long", "declarator": "mDistance", "var_name": "mDistance"}, {"original_string": "private final String mInfo1;", "modifier": "private final", "type": "String", "declarator": "mInfo1", "var_name": "mInfo1"}, {"original_string": "private final String mInfo2;", "modifier": "private final", "type": "String", "declarator": "mInfo2", "var_name": "mInfo2"}, {"original_string": "private final Bitmap mNextRoadIcon;", "modifier": "private final", "type": "Bitmap", "declarator": "mNextRoadIcon", "var_name": "mNextRoadIcon"}], "methods": [{"identifier": "GuidanceManeuverData", "parameters": "(int iconId, Long distance, String info1, String info2)", "modifiers": "public", "return": "", "signature": " GuidanceManeuverData(int iconId, Long distance, String info1, String info2)", "full_signature": "public  GuidanceManeuverData(int iconId, Long distance, String info1, String info2)", "class_method_signature": "GuidanceManeuverData.GuidanceManeuverData(int iconId, Long distance, String info1, String info2)", "testcase": false, "constructor": true}, {"identifier": "GuidanceManeuverData", "parameters": "(int iconId, Long distance, String info1, String info2, Bitmap nextRoadIcon)", "modifiers": "public", "return": "", "signature": " GuidanceManeuverData(int iconId, Long distance, String info1, String info2, Bitmap nextRoadIcon)", "full_signature": "public  GuidanceManeuverData(int iconId, Long distance, String info1, String info2, Bitmap nextRoadIcon)", "class_method_signature": "GuidanceManeuverData.GuidanceManeuverData(int iconId, Long distance, String info1, String info2, Bitmap nextRoadIcon)", "testcase": false, "constructor": true}, {"identifier": "GuidanceManeuverData", "parameters": "(Parcel in)", "modifiers": "", "return": "", "signature": " GuidanceManeuverData(Parcel in)", "full_signature": "  GuidanceManeuverData(Parcel in)", "class_method_signature": "GuidanceManeuverData.GuidanceManeuverData(Parcel in)", "testcase": false, "constructor": true}, {"identifier": "writeToParcel", "parameters": "(Parcel dest, int flags)", "modifiers": "@Override public", "return": "void", "signature": "void writeToParcel(Parcel dest, int flags)", "full_signature": "@Override public void writeToParcel(Parcel dest, int flags)", "class_method_signature": "GuidanceManeuverData.writeToParcel(Parcel dest, int flags)", "testcase": false, "constructor": false}, {"identifier": "describeContents", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int describeContents()", "full_signature": "@Override public int describeContents()", "class_method_signature": "GuidanceManeuverData.describeContents()", "testcase": false, "constructor": false}, {"identifier": "getIconId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getIconId()", "full_signature": "public int getIconId()", "class_method_signature": "GuidanceManeuverData.getIconId()", "testcase": false, "constructor": false}, {"identifier": "getInfo1", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInfo1()", "full_signature": "public String getInfo1()", "class_method_signature": "GuidanceManeuverData.getInfo1()", "testcase": false, "constructor": false}, {"identifier": "getInfo2", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInfo2()", "full_signature": "public String getInfo2()", "class_method_signature": "GuidanceManeuverData.getInfo2()", "testcase": false, "constructor": false}, {"identifier": "getDistance", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getDistance()", "full_signature": "public Long getDistance()", "class_method_signature": "GuidanceManeuverData.getDistance()", "testcase": false, "constructor": false}, {"identifier": "getNextRoadIcon", "parameters": "()", "modifiers": "public", "return": "Bitmap", "signature": "Bitmap getNextRoadIcon()", "full_signature": "public Bitmap getNextRoadIcon()", "class_method_signature": "GuidanceManeuverData.getNextRoadIcon()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "GuidanceManeuverData.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "GuidanceManeuverData.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj1)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj1)", "full_signature": "@Override public boolean equals(Object obj1)", "class_method_signature": "GuidanceManeuverData.equals(Object obj1)", "testcase": false, "constructor": false}, {"identifier": "areEqual", "parameters": "(Object first, Object second)", "modifiers": "private", "return": "boolean", "signature": "boolean areEqual(Object first, Object second)", "full_signature": "private boolean areEqual(Object first, Object second)", "class_method_signature": "GuidanceManeuverData.areEqual(Object first, Object second)", "testcase": false, "constructor": false}], "file": "MSDKUIKit/MSDKUILib/src/main/java/com/here/msdkui/guidance/GuidanceManeuverData.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        return (((this.mIconId * 31 +\n                (int) (this.mDistance ^ this.mDistance >>> 32)) * 31 +\n                (this.mInfo1 == null ? 0 : this.mInfo1.hashCode())) * 31 +\n                (this.mInfo2 == null ? 0 : this.mInfo2.hashCode())) * 31 +\n                (this.mNextRoadIcon == null ? 0 : this.mNextRoadIcon.hashCode()) * 31;\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "GuidanceManeuverData.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode", "hashCode", "hashCode"]}, "repository": {"repo_id": 141680627, "url": "https://github.com/heremaps/msdkui-android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 35, "size": 5559, "license": "licensed"}}