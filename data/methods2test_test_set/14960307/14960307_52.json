{"test_class": {"identifier": "GsmUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GsmUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GsmUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-gsm/src/test/java/com/cloudhopper/commons/gsm/GsmUtilTest.java"}, "test_case": {"identifier": "getShortMessageUserData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getShortMessageUserData() {\n        Assert.assertNull(GsmUtil.getShortMessageUserData(null));\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"\"), GsmUtil.getShortMessageUserData(HexUtil.toByteArray(\"\")));\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"02\"), GsmUtil.getShortMessageUserData(HexUtil.toByteArray(\"0002\")));\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"\"), GsmUtil.getShortMessageUserData(HexUtil.toByteArray(\"0102\")));\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"0304050607\"), GsmUtil.getShortMessageUserData(HexUtil.toByteArray(\"01020304050607\")));\n        // make sure \"signed\" byte of user data header works\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"08\"), GsmUtil.getShortMessageUserData(HexUtil.toByteArray(\"80000102030405060708090001020304050607080900010203040506070809000102030405060708090001020304050607080900010203040506070809000102030405060708090001020304050607080900010203040506070809000102030405060708090001020304050607080900010203040506070809000102030405060708\")));\n        try {\n            // UDH length exceeds payload\n            Assert.assertArrayEquals(HexUtil.toByteArray(\"01\"), GsmUtil.getShortMessageUserData(HexUtil.toByteArray(\"01\")));\n            Assert.fail();\n        } catch (IllegalArgumentException e) {\n            // correct behavior\n        }\n    }", "signature": "void getShortMessageUserData()", "full_signature": "@Test public void getShortMessageUserData()", "class_method_signature": "GsmUtilTest.getShortMessageUserData()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getShortMessageUserData", "assertArrayEquals", "toByteArray", "getShortMessageUserData", "toByteArray", "assertArrayEquals", "toByteArray", "getShortMessageUserData", "toByteArray", "assertArrayEquals", "toByteArray", "getShortMessageUserData", "toByteArray", "assertArrayEquals", "toByteArray", "getShortMessageUserData", "toByteArray", "assertArrayEquals", "toByteArray", "getShortMessageUserData", "toByteArray", "assertArrayEquals", "toByteArray", "getShortMessageUserData", "toByteArray", "fail"]}, "focal_class": {"identifier": "GsmUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toBcd", "parameters": "(String address)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toBcd(String address)", "full_signature": "public static byte[] toBcd(String address)", "class_method_signature": "GsmUtil.toBcd(String address)", "testcase": false, "constructor": false}, {"identifier": "toSubmitInfo", "parameters": "(boolean replyPath, boolean udhIndicator,\n            boolean deliveryReceipt, int validityPeriodFormat, boolean rejectDuplicates)", "modifiers": "public static", "return": "byte", "signature": "byte toSubmitInfo(boolean replyPath, boolean udhIndicator,\n            boolean deliveryReceipt, int validityPeriodFormat, boolean rejectDuplicates)", "full_signature": "public static byte toSubmitInfo(boolean replyPath, boolean udhIndicator,\n            boolean deliveryReceipt, int validityPeriodFormat, boolean rejectDuplicates)", "class_method_signature": "GsmUtil.toSubmitInfo(boolean replyPath, boolean udhIndicator,\n            boolean deliveryReceipt, int validityPeriodFormat, boolean rejectDuplicates)", "testcase": false, "constructor": false}, {"identifier": "removeUserDataHeader", "parameters": "(byte[] shortMessage)", "modifiers": "static public", "return": "byte[]", "signature": "byte[] removeUserDataHeader(byte[] shortMessage)", "full_signature": "static public byte[] removeUserDataHeader(byte[] shortMessage)", "class_method_signature": "GsmUtil.removeUserDataHeader(byte[] shortMessage)", "testcase": false, "constructor": false}, {"identifier": "getShortMessageUserData", "parameters": "(byte[] shortMessage)", "modifiers": "static public", "return": "byte[]", "signature": "byte[] getShortMessageUserData(byte[] shortMessage)", "full_signature": "static public byte[] getShortMessageUserData(byte[] shortMessage)", "class_method_signature": "GsmUtil.getShortMessageUserData(byte[] shortMessage)", "testcase": false, "constructor": false}, {"identifier": "getShortMessageUserDataHeader", "parameters": "(byte[] shortMessage)", "modifiers": "static public", "return": "byte[]", "signature": "byte[] getShortMessageUserDataHeader(byte[] shortMessage)", "full_signature": "static public byte[] getShortMessageUserDataHeader(byte[] shortMessage)", "class_method_signature": "GsmUtil.getShortMessageUserDataHeader(byte[] shortMessage)", "testcase": false, "constructor": false}, {"identifier": "createConcatenatedBinaryShortMessages", "parameters": "(byte[] binaryShortMessage, byte referenceNum)", "modifiers": "static public", "return": "byte[][]", "signature": "byte[][] createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum)", "full_signature": "static public byte[][] createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum)", "class_method_signature": "GsmUtil.createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum)", "testcase": false, "constructor": false}], "file": "ch-commons-gsm/src/main/java/com/cloudhopper/commons/gsm/GsmUtil.java"}, "focal_method": {"identifier": "getShortMessageUserData", "parameters": "(byte[] shortMessage)", "modifiers": "static public", "return": "byte[]", "body": "static public byte[] getShortMessageUserData(byte[] shortMessage) throws IllegalArgumentException {\n        if (shortMessage == null) {\n            return null;\n        }\n\n        if (shortMessage.length == 0) {\n            return shortMessage;\n        }\n\n        // the entire length of UDH is the first byte + the length\n        int userDataHeaderLength = ByteUtil.decodeUnsigned(shortMessage[0]) + 1;\n\n        // is there enough data?\n        if (userDataHeaderLength > shortMessage.length) {\n            throw new IllegalArgumentException(\"User data header length exceeds short message length [shortMessageLength=\" + shortMessage.length + \", userDataHeaderLength=\" + userDataHeaderLength + \"]\");\n        }\n\n        // create a new message with the header removed\n        int newShortMessageLength = shortMessage.length - userDataHeaderLength;\n        byte[] newShortMessage = new byte[newShortMessageLength];\n\n        System.arraycopy(shortMessage, userDataHeaderLength, newShortMessage, 0, newShortMessageLength);\n\n        return newShortMessage;\n    }", "signature": "byte[] getShortMessageUserData(byte[] shortMessage)", "full_signature": "static public byte[] getShortMessageUserData(byte[] shortMessage)", "class_method_signature": "GsmUtil.getShortMessageUserData(byte[] shortMessage)", "testcase": false, "constructor": false, "invocations": ["decodeUnsigned", "arraycopy"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}