{"test_class": {"identifier": "FieldNormalizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FieldNormalizer<FruitNameContainer> fieldNormalizer;", "modifier": "private", "type": "FieldNormalizer<FruitNameContainer>", "declarator": "fieldNormalizer", "var_name": "fieldNormalizer"}, {"original_string": "@Mock\n    private RootTermDistanceCalculator firstDistanceCalculatorMock;", "modifier": "@Mock\n    private", "type": "RootTermDistanceCalculator", "declarator": "firstDistanceCalculatorMock", "var_name": "firstDistanceCalculatorMock"}, {"original_string": "@Mock\n    private RootTermDistanceCalculator secondDistanceCalculatorMock;", "modifier": "@Mock\n    private", "type": "RootTermDistanceCalculator", "declarator": "secondDistanceCalculatorMock", "var_name": "secondDistanceCalculatorMock"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/normalizer/FieldNormalizerTest.java"}, "test_case": {"identifier": "normalizeNormalizesLobOfAllContainers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void normalizeNormalizesLobOfAllContainers() {\n        // given\n        var firstContainerName = \"red thing\";\n        var normalizedFirstContainerName = \"Tomato\";\n        var firstContainer = new FruitNameContainer(firstContainerName);\n        var normalizedFirstContainer = new FruitNameContainer(normalizedFirstContainerName);\n\n        var secondContainerName = \"green thing\";\n        var normalizedSecondContainerName = \"Apple\";\n        var secondContainer = new FruitNameContainer(secondContainerName);\n        var normalizedSecondContainer = new FruitNameContainer(normalizedSecondContainerName);\n\n        var givenContainers = List.of(firstContainer, secondContainer);\n        var expectedNormalizedContainers = List.of(normalizedFirstContainer, normalizedSecondContainer);\n\n        given(firstDistanceCalculatorMock.getOriginalRootTerm()).willReturn(normalizedFirstContainerName);\n        given(firstDistanceCalculatorMock.calculateMinimalDistance(any())).willReturn(100);\n        given(firstDistanceCalculatorMock.calculateMinimalDistance(firstContainerName)).willReturn(0);\n\n        given(secondDistanceCalculatorMock.getOriginalRootTerm()).willReturn(normalizedSecondContainerName);\n        given(secondDistanceCalculatorMock.calculateMinimalDistance(any())).willReturn(100);\n        given(secondDistanceCalculatorMock.calculateMinimalDistance(secondContainerName)).willReturn(0);\n\n        // when\n        var actualNormalizedContainers = fieldNormalizer.normalize(givenContainers);\n\n        // then\n        assertThat(actualNormalizedContainers).containsExactlyInAnyOrderElementsOf(expectedNormalizedContainers);\n    }", "signature": "void normalizeNormalizesLobOfAllContainers()", "full_signature": "@Test public void normalizeNormalizesLobOfAllContainers()", "class_method_signature": "FieldNormalizerTest.normalizeNormalizesLobOfAllContainers()", "testcase": true, "constructor": false, "invocations": ["of", "of", "willReturn", "given", "getOriginalRootTerm", "willReturn", "given", "calculateMinimalDistance", "any", "willReturn", "given", "calculateMinimalDistance", "willReturn", "given", "getOriginalRootTerm", "willReturn", "given", "calculateMinimalDistance", "any", "willReturn", "given", "calculateMinimalDistance", "normalize", "containsExactlyInAnyOrderElementsOf", "assertThat"]}, "focal_class": {"identifier": "FieldNormalizer", "superclass": "", "interfaces": "implements Normalizer<T>", "fields": [{"original_string": "private final Set<RootTermDistanceCalculator> fieldDistanceCalculators;", "modifier": "private final", "type": "Set<RootTermDistanceCalculator>", "declarator": "fieldDistanceCalculators", "var_name": "fieldDistanceCalculators"}], "methods": [{"identifier": "FieldNormalizer", "parameters": "(Set<RootTermDistanceCalculator> fieldDistanceCalculators)", "modifiers": "protected", "return": "", "signature": " FieldNormalizer(Set<RootTermDistanceCalculator> fieldDistanceCalculators)", "full_signature": "protected  FieldNormalizer(Set<RootTermDistanceCalculator> fieldDistanceCalculators)", "class_method_signature": "FieldNormalizer.FieldNormalizer(Set<RootTermDistanceCalculator> fieldDistanceCalculators)", "testcase": false, "constructor": true}, {"identifier": "normalize", "parameters": "(List<T> objectsToNormalize)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> normalize(List<T> objectsToNormalize)", "full_signature": "@Override public List<T> normalize(List<T> objectsToNormalize)", "class_method_signature": "FieldNormalizer.normalize(List<T> objectsToNormalize)", "testcase": false, "constructor": false}, {"identifier": "getDistinctFieldValues", "parameters": "(List<T> objectsToNormalize)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getDistinctFieldValues(List<T> objectsToNormalize)", "full_signature": "private Set<String> getDistinctFieldValues(List<T> objectsToNormalize)", "class_method_signature": "FieldNormalizer.getDistinctFieldValues(List<T> objectsToNormalize)", "testcase": false, "constructor": false}, {"identifier": "getFieldValue", "parameters": "(T fieldContainingObject)", "modifiers": "abstract", "return": "String", "signature": "String getFieldValue(T fieldContainingObject)", "full_signature": "abstract String getFieldValue(T fieldContainingObject)", "class_method_signature": "FieldNormalizer.getFieldValue(T fieldContainingObject)", "testcase": false, "constructor": false}, {"identifier": "setNormalizedFieldValue", "parameters": "(T fieldContainingObject, String normalizedValue)", "modifiers": "abstract", "return": "T", "signature": "T setNormalizedFieldValue(T fieldContainingObject, String normalizedValue)", "full_signature": "abstract T setNormalizedFieldValue(T fieldContainingObject, String normalizedValue)", "class_method_signature": "FieldNormalizer.setNormalizedFieldValue(T fieldContainingObject, String normalizedValue)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/normalizer/FieldNormalizer.java"}, "focal_method": {"identifier": "normalize", "parameters": "(List<T> objectsToNormalize)", "modifiers": "@Override public", "return": "List<T>", "body": "@Override\n    public List<T> normalize(List<T> objectsToNormalize) {\n        var distinctValues = getDistinctFieldValues(objectsToNormalize);\n\n        var normalizedLobMap = distinctValues.stream()\n                .collect(Collectors.toMap(\n                        Function.identity(),\n                        distinctValue -> RootTermDistanceCalculator.nearestRootTerm(fieldDistanceCalculators, distinctValue, 7)\n                ));\n\n        return objectsToNormalize.parallelStream()\n                .map(objToNormalize -> {\n                    var currentLob = getFieldValue(objToNormalize);\n\n                    if(currentLob != null) {\n                        var normalizedLob = normalizedLobMap.get(currentLob);\n\n                        return setNormalizedFieldValue(objToNormalize, normalizedLob);\n                    }\n\n                    return objToNormalize;\n                })\n        .collect(Collectors.toList());\n    }", "signature": "List<T> normalize(List<T> objectsToNormalize)", "full_signature": "@Override public List<T> normalize(List<T> objectsToNormalize)", "class_method_signature": "FieldNormalizer.normalize(List<T> objectsToNormalize)", "testcase": false, "constructor": false, "invocations": ["getDistinctFieldValues", "collect", "stream", "toMap", "identity", "nearestRootTerm", "collect", "map", "parallelStream", "getFieldValue", "get", "setNormalizedFieldValue", "toList"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}