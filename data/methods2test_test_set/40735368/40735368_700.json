{"test_class": {"identifier": "MetaBufferEstimatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/library/render/src/test/java/org/geotools/renderer/lite/MetaBufferEstimatorTest.java"}, "test_case": {"identifier": "testDynamicSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDynamicSize() throws Exception {\n        Style style = RendererBaseTest.loadStyle(this, \"externalGraphicDynamicSize.sld\");\n        MetaBufferEstimator estimator = new MetaBufferEstimator();\n        style.accept(estimator);\n        assertFalse(estimator.isEstimateAccurate());\n    }", "signature": "void testDynamicSize()", "full_signature": "@Test public void testDynamicSize()", "class_method_signature": "MetaBufferEstimatorTest.testDynamicSize()", "testcase": true, "constructor": false, "invocations": ["loadStyle", "accept", "assertFalse", "isEstimateAccurate"]}, "focal_class": {"identifier": "MetaBufferEstimator", "superclass": "extends FilterAttributeExtractor", "interfaces": "implements StyleVisitor", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging.getLogger(\"org.geotools.rendering\");", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(\"org.geotools.rendering\")", "var_name": "LOGGER"}, {"original_string": "FilterAttributeExtractor attributeExtractor = new FilterAttributeExtractor();", "modifier": "", "type": "FilterAttributeExtractor", "declarator": "attributeExtractor = new FilterAttributeExtractor()", "var_name": "attributeExtractor"}, {"original_string": "boolean estimateAccurate = true;", "modifier": "", "type": "boolean", "declarator": "estimateAccurate = true", "var_name": "estimateAccurate"}, {"original_string": "int buffer = 0;", "modifier": "", "type": "int", "declarator": "buffer = 0", "var_name": "buffer"}], "methods": [{"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "MetaBufferEstimator.reset()", "testcase": false, "constructor": false}, {"identifier": "getBuffer", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBuffer()", "full_signature": "public int getBuffer()", "class_method_signature": "MetaBufferEstimator.getBuffer()", "testcase": false, "constructor": false}, {"identifier": "isEstimateAccurate", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEstimateAccurate()", "full_signature": "public boolean isEstimateAccurate()", "class_method_signature": "MetaBufferEstimator.isEstimateAccurate()", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Style style)", "modifiers": "public", "return": "void", "signature": "void visit(Style style)", "full_signature": "public void visit(Style style)", "class_method_signature": "MetaBufferEstimator.visit(Style style)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Rule rule)", "modifiers": "public", "return": "void", "signature": "void visit(Rule rule)", "full_signature": "public void visit(Rule rule)", "class_method_signature": "MetaBufferEstimator.visit(Rule rule)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(FeatureTypeStyle fts)", "modifiers": "public", "return": "void", "signature": "void visit(FeatureTypeStyle fts)", "full_signature": "public void visit(FeatureTypeStyle fts)", "class_method_signature": "MetaBufferEstimator.visit(FeatureTypeStyle fts)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Fill fill)", "modifiers": "public", "return": "void", "signature": "void visit(Fill fill)", "full_signature": "public void visit(Fill fill)", "class_method_signature": "MetaBufferEstimator.visit(Fill fill)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Stroke stroke)", "modifiers": "public", "return": "void", "signature": "void visit(Stroke stroke)", "full_signature": "public void visit(Stroke stroke)", "class_method_signature": "MetaBufferEstimator.visit(Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(Expression exp)", "modifiers": "protected", "return": "boolean", "signature": "boolean isNull(Expression exp)", "full_signature": "protected boolean isNull(Expression exp)", "class_method_signature": "MetaBufferEstimator.isNull(Expression exp)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Symbolizer sym)", "modifiers": "public", "return": "void", "signature": "void visit(Symbolizer sym)", "full_signature": "public void visit(Symbolizer sym)", "class_method_signature": "MetaBufferEstimator.visit(Symbolizer sym)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(RasterSymbolizer rs)", "modifiers": "public", "return": "void", "signature": "void visit(RasterSymbolizer rs)", "full_signature": "public void visit(RasterSymbolizer rs)", "class_method_signature": "MetaBufferEstimator.visit(RasterSymbolizer rs)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PointSymbolizer ps)", "modifiers": "public", "return": "void", "signature": "void visit(PointSymbolizer ps)", "full_signature": "public void visit(PointSymbolizer ps)", "class_method_signature": "MetaBufferEstimator.visit(PointSymbolizer ps)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(LineSymbolizer line)", "modifiers": "public", "return": "void", "signature": "void visit(LineSymbolizer line)", "full_signature": "public void visit(LineSymbolizer line)", "class_method_signature": "MetaBufferEstimator.visit(LineSymbolizer line)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PolygonSymbolizer poly)", "modifiers": "public", "return": "void", "signature": "void visit(PolygonSymbolizer poly)", "full_signature": "public void visit(PolygonSymbolizer poly)", "class_method_signature": "MetaBufferEstimator.visit(PolygonSymbolizer poly)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(TextSymbolizer text)", "modifiers": "public", "return": "void", "signature": "void visit(TextSymbolizer text)", "full_signature": "public void visit(TextSymbolizer text)", "class_method_signature": "MetaBufferEstimator.visit(TextSymbolizer text)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Graphic gr)", "modifiers": "public", "return": "void", "signature": "void visit(Graphic gr)", "full_signature": "public void visit(Graphic gr)", "class_method_signature": "MetaBufferEstimator.visit(Graphic gr)", "testcase": false, "constructor": false}, {"identifier": "evaluateWidth", "parameters": "(Expression width)", "modifiers": "private", "return": "void", "signature": "void evaluateWidth(Expression width)", "full_signature": "private void evaluateWidth(Expression width)", "class_method_signature": "MetaBufferEstimator.evaluateWidth(Expression width)", "testcase": false, "constructor": false}, {"identifier": "getPositiveValue", "parameters": "(Expression ex)", "modifiers": "private", "return": "int", "signature": "int getPositiveValue(Expression ex)", "full_signature": "private int getPositiveValue(Expression ex)", "class_method_signature": "MetaBufferEstimator.getPositiveValue(Expression ex)", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "(Expression ex)", "modifiers": "private", "return": "double", "signature": "double getDouble(Expression ex)", "full_signature": "private double getDouble(Expression ex)", "class_method_signature": "MetaBufferEstimator.getDouble(Expression ex)", "testcase": false, "constructor": false}, {"identifier": "isConstant", "parameters": "(Expression ex)", "modifiers": "private", "return": "boolean", "signature": "boolean isConstant(Expression ex)", "full_signature": "private boolean isConstant(Expression ex)", "class_method_signature": "MetaBufferEstimator.isConstant(Expression ex)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Mark mark)", "modifiers": "public", "return": "void", "signature": "void visit(Mark mark)", "full_signature": "public void visit(Mark mark)", "class_method_signature": "MetaBufferEstimator.visit(Mark mark)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(ExternalGraphic exgr)", "modifiers": "public", "return": "void", "signature": "void visit(ExternalGraphic exgr)", "full_signature": "public void visit(ExternalGraphic exgr)", "class_method_signature": "MetaBufferEstimator.visit(ExternalGraphic exgr)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PointPlacement pp)", "modifiers": "public", "return": "void", "signature": "void visit(PointPlacement pp)", "full_signature": "public void visit(PointPlacement pp)", "class_method_signature": "MetaBufferEstimator.visit(PointPlacement pp)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(AnchorPoint ap)", "modifiers": "public", "return": "void", "signature": "void visit(AnchorPoint ap)", "full_signature": "public void visit(AnchorPoint ap)", "class_method_signature": "MetaBufferEstimator.visit(AnchorPoint ap)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Displacement dis)", "modifiers": "public", "return": "void", "signature": "void visit(Displacement dis)", "full_signature": "public void visit(Displacement dis)", "class_method_signature": "MetaBufferEstimator.visit(Displacement dis)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(LinePlacement lp)", "modifiers": "public", "return": "void", "signature": "void visit(LinePlacement lp)", "full_signature": "public void visit(LinePlacement lp)", "class_method_signature": "MetaBufferEstimator.visit(LinePlacement lp)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Halo halo)", "modifiers": "public", "return": "void", "signature": "void visit(Halo halo)", "full_signature": "public void visit(Halo halo)", "class_method_signature": "MetaBufferEstimator.visit(Halo halo)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(StyledLayerDescriptor sld)", "modifiers": "public", "return": "void", "signature": "void visit(StyledLayerDescriptor sld)", "full_signature": "public void visit(StyledLayerDescriptor sld)", "class_method_signature": "MetaBufferEstimator.visit(StyledLayerDescriptor sld)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(NamedLayer layer)", "modifiers": "public", "return": "void", "signature": "void visit(NamedLayer layer)", "full_signature": "public void visit(NamedLayer layer)", "class_method_signature": "MetaBufferEstimator.visit(NamedLayer layer)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(UserLayer layer)", "modifiers": "public", "return": "void", "signature": "void visit(UserLayer layer)", "full_signature": "public void visit(UserLayer layer)", "class_method_signature": "MetaBufferEstimator.visit(UserLayer layer)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(FeatureTypeConstraint ftc)", "modifiers": "public", "return": "void", "signature": "void visit(FeatureTypeConstraint ftc)", "full_signature": "public void visit(FeatureTypeConstraint ftc)", "class_method_signature": "MetaBufferEstimator.visit(FeatureTypeConstraint ftc)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(ColorMap map)", "modifiers": "public", "return": "void", "signature": "void visit(ColorMap map)", "full_signature": "public void visit(ColorMap map)", "class_method_signature": "MetaBufferEstimator.visit(ColorMap map)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(ColorMapEntry entry)", "modifiers": "public", "return": "void", "signature": "void visit(ColorMapEntry entry)", "full_signature": "public void visit(ColorMapEntry entry)", "class_method_signature": "MetaBufferEstimator.visit(ColorMapEntry entry)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(ContrastEnhancement contrastEnhancement)", "modifiers": "public", "return": "void", "signature": "void visit(ContrastEnhancement contrastEnhancement)", "full_signature": "public void visit(ContrastEnhancement contrastEnhancement)", "class_method_signature": "MetaBufferEstimator.visit(ContrastEnhancement contrastEnhancement)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(ImageOutline outline)", "modifiers": "public", "return": "void", "signature": "void visit(ImageOutline outline)", "full_signature": "public void visit(ImageOutline outline)", "class_method_signature": "MetaBufferEstimator.visit(ImageOutline outline)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(ChannelSelection cs)", "modifiers": "public", "return": "void", "signature": "void visit(ChannelSelection cs)", "full_signature": "public void visit(ChannelSelection cs)", "class_method_signature": "MetaBufferEstimator.visit(ChannelSelection cs)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(OverlapBehavior ob)", "modifiers": "public", "return": "void", "signature": "void visit(OverlapBehavior ob)", "full_signature": "public void visit(OverlapBehavior ob)", "class_method_signature": "MetaBufferEstimator.visit(OverlapBehavior ob)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(SelectedChannelType sct)", "modifiers": "public", "return": "void", "signature": "void visit(SelectedChannelType sct)", "full_signature": "public void visit(SelectedChannelType sct)", "class_method_signature": "MetaBufferEstimator.visit(SelectedChannelType sct)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(ShadedRelief sr)", "modifiers": "public", "return": "void", "signature": "void visit(ShadedRelief sr)", "full_signature": "public void visit(ShadedRelief sr)", "class_method_signature": "MetaBufferEstimator.visit(ShadedRelief sr)", "testcase": false, "constructor": false}], "file": "modules/library/render/src/main/java/org/geotools/renderer/lite/MetaBufferEstimator.java"}, "focal_method": {"identifier": "isEstimateAccurate", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isEstimateAccurate() {\n        return estimateAccurate;\n    }", "signature": "boolean isEstimateAccurate()", "full_signature": "public boolean isEstimateAccurate()", "class_method_signature": "MetaBufferEstimator.isEstimateAccurate()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}