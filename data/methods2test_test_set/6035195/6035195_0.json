{"test_class": {"identifier": "SetupAdminAccessTest", "superclass": "", "interfaces": "", "fields": [], "file": "providers/amazon/src/test/java/com/axemblr/provisionr/amazon/activities/SetupAdminAccessTest.java"}, "test_case": {"identifier": "testCreatePuppetScript", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreatePuppetScript() throws Exception {\n        Pool pool = mock(Pool.class);\n\n        final AdminAccess adminAccess = AdminAccess.builder()\n            .privateKey(TestConstants.PRIVATE_KEY)\n            .publicKey(TestConstants.PUBLIC_KEY)\n            .username(System.getProperty(\"user.name\"))\n            .createAdminAccess();\n\n        when(pool.getAdminAccess()).thenReturn(adminAccess);\n\n        PuppetActivity activity = new SetupAdminAccess();\n        String content = activity.createPuppetScript(pool, null);\n\n        final String username = adminAccess.getUsername();\n\n        assertThat(content).contains(username)\n            .contains(adminAccess.getPublicKey().split(\" \")[1])\n            .contains(String.format(\"user { \\\"%s\\\":\", username))\n            .contains(String.format(\"file { \\\"/home/%s/.ssh\\\":\", username));\n    }", "signature": "void testCreatePuppetScript()", "full_signature": "@Test public void testCreatePuppetScript()", "class_method_signature": "SetupAdminAccessTest.testCreatePuppetScript()", "testcase": true, "constructor": false, "invocations": ["mock", "createAdminAccess", "username", "publicKey", "privateKey", "builder", "getProperty", "thenReturn", "when", "getAdminAccess", "createPuppetScript", "getUsername", "contains", "contains", "contains", "contains", "assertThat", "split", "getPublicKey", "format", "format"]}, "focal_class": {"identifier": "SetupAdminAccess", "superclass": "extends PuppetActivity", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_UBUNTU_AMI_USER = \"ubuntu\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_UBUNTU_AMI_USER = \"ubuntu\"", "var_name": "DEFAULT_UBUNTU_AMI_USER"}, {"original_string": "public static final String ADMIN_ACCESS_TEMPLATE = \"/com/axemblr/provisionr/amazon/puppet/adminaccess.pp.mustache\";", "modifier": "public static final", "type": "String", "declarator": "ADMIN_ACCESS_TEMPLATE = \"/com/axemblr/provisionr/amazon/puppet/adminaccess.pp.mustache\"", "var_name": "ADMIN_ACCESS_TEMPLATE"}, {"original_string": "public static final String SSHD_CONFIG_TEMPLATE = \"/com/axemblr/provisionr/amazon/puppet/sshd_config.mustache\";", "modifier": "public static final", "type": "String", "declarator": "SSHD_CONFIG_TEMPLATE = \"/com/axemblr/provisionr/amazon/puppet/sshd_config.mustache\"", "var_name": "SSHD_CONFIG_TEMPLATE"}, {"original_string": "public static final String SUDOERS_TEMPLATE = \"/com/axemblr/provisionr/amazon/puppet/sudoers\";", "modifier": "public static final", "type": "String", "declarator": "SUDOERS_TEMPLATE = \"/com/axemblr/provisionr/amazon/puppet/sudoers\"", "var_name": "SUDOERS_TEMPLATE"}], "methods": [{"identifier": "SetupAdminAccess", "parameters": "()", "modifiers": "public", "return": "", "signature": " SetupAdminAccess()", "full_signature": "public  SetupAdminAccess()", "class_method_signature": "SetupAdminAccess.SetupAdminAccess()", "testcase": false, "constructor": true}, {"identifier": "overrideAdminAccess", "parameters": "(Pool pool)", "modifiers": "@Override public", "return": "AdminAccess", "signature": "AdminAccess overrideAdminAccess(Pool pool)", "full_signature": "@Override public AdminAccess overrideAdminAccess(Pool pool)", "class_method_signature": "SetupAdminAccess.overrideAdminAccess(Pool pool)", "testcase": false, "constructor": false}, {"identifier": "createPuppetScript", "parameters": "(Pool pool, Machine machine)", "modifiers": "@Override public", "return": "String", "signature": "String createPuppetScript(Pool pool, Machine machine)", "full_signature": "@Override public String createPuppetScript(Pool pool, Machine machine)", "class_method_signature": "SetupAdminAccess.createPuppetScript(Pool pool, Machine machine)", "testcase": false, "constructor": false}, {"identifier": "getRawSshKey", "parameters": "(Pool pool)", "modifiers": "private", "return": "String", "signature": "String getRawSshKey(Pool pool)", "full_signature": "private String getRawSshKey(Pool pool)", "class_method_signature": "SetupAdminAccess.getRawSshKey(Pool pool)", "testcase": false, "constructor": false}, {"identifier": "createAdditionalFiles", "parameters": "(Pool pool, Machine machine)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> createAdditionalFiles(Pool pool, Machine machine)", "full_signature": "@Override public Map<String, String> createAdditionalFiles(Pool pool, Machine machine)", "class_method_signature": "SetupAdminAccess.createAdditionalFiles(Pool pool, Machine machine)", "testcase": false, "constructor": false}], "file": "providers/amazon/src/main/java/com/axemblr/provisionr/amazon/activities/SetupAdminAccess.java"}, "focal_method": {"identifier": "createPuppetScript", "parameters": "(Pool pool, Machine machine)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String createPuppetScript(Pool pool, Machine machine) throws Exception {\n        return Mustache.toString(getClass(), ADMIN_ACCESS_TEMPLATE,\n            ImmutableMap.of(\n                \"user\", pool.getAdminAccess().getUsername(),\n                \"publicKey\", getRawSshKey(pool))\n        );\n    }", "signature": "String createPuppetScript(Pool pool, Machine machine)", "full_signature": "@Override public String createPuppetScript(Pool pool, Machine machine)", "class_method_signature": "SetupAdminAccess.createPuppetScript(Pool pool, Machine machine)", "testcase": false, "constructor": false, "invocations": ["toString", "getClass", "of", "getUsername", "getAdminAccess", "getRawSshKey"]}, "repository": {"repo_id": 6035195, "url": "https://github.com/axemblr/axemblr-provisionr", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 30, "size": 3329, "license": "licensed"}}