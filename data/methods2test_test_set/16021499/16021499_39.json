{"test_class": {"identifier": "CompressionUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Random RAND = new Random();", "modifier": "private static final", "type": "Random", "declarator": "RAND = new Random()", "var_name": "RAND"}, {"original_string": "private static final String COMPRESSIBLE_MIME_TYPE = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "COMPRESSIBLE_MIME_TYPE = \"text/plain\"", "var_name": "COMPRESSIBLE_MIME_TYPE"}, {"original_string": "private static final String INCOMPRESSIBLE_MIME_TYPE = \"image/png\";", "modifier": "private static final", "type": "String", "declarator": "INCOMPRESSIBLE_MIME_TYPE = \"image/png\"", "var_name": "INCOMPRESSIBLE_MIME_TYPE"}, {"original_string": "private static final String UNKNOWN_MIME_TYPE = \"unkown/unknown\";", "modifier": "private static final", "type": "String", "declarator": "UNKNOWN_MIME_TYPE = \"unkown/unknown\"", "var_name": "UNKNOWN_MIME_TYPE"}], "file": "vault-core/src/test/java/org/apache/jackrabbit/vault/fs/impl/io/CompressionUtilTest.java"}, "test_case": {"identifier": "testCompressibilityEstimation", "parameters": "()", "modifiers": "@Test @Ignore(\"Because it does not always succeed due to usage of random bytes\") public", "return": "void", "body": "@Test\n    @Ignore(\"Because it does not always succeed due to usage of random bytes\")\n    public void testCompressibilityEstimation()\n            throws IOException, RepositoryException {\n        assertTrue(seemsCompressible(newArtifact(incompressibleData(50*1024), null)) < 0);\n        assertTrue(seemsCompressible(newArtifact(compressibleData(50*1024), null)) > 0);\n    }", "signature": "void testCompressibilityEstimation()", "full_signature": "@Test @Ignore(\"Because it does not always succeed due to usage of random bytes\") public void testCompressibilityEstimation()", "class_method_signature": "CompressionUtilTest.testCompressibilityEstimation()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "seemsCompressible", "newArtifact", "incompressibleData", "assertTrue", "seemsCompressible", "newArtifact", "compressibleData"]}, "focal_class": {"identifier": "CompressionUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(CompressionUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CompressionUtil.class)", "var_name": "log"}, {"original_string": "public static final boolean ENV_SUPPORTS_COMPRESSION_LEVEL_CHANGE = checkEnvironmentSupportsCompressionSwitch();", "modifier": "public static final", "type": "boolean", "declarator": "ENV_SUPPORTS_COMPRESSION_LEVEL_CHANGE = checkEnvironmentSupportsCompressionSwitch()", "var_name": "ENV_SUPPORTS_COMPRESSION_LEVEL_CHANGE"}, {"original_string": "private static final long MIN_AUTO_DETECTION_LENGTH = 115 * 1024;", "modifier": "private static final", "type": "long", "declarator": "MIN_AUTO_DETECTION_LENGTH = 115 * 1024", "var_name": "MIN_AUTO_DETECTION_LENGTH"}, {"original_string": "private static final int SAMPLE_LENGTH = 256;", "modifier": "private static final", "type": "int", "declarator": "SAMPLE_LENGTH = 256", "var_name": "SAMPLE_LENGTH"}, {"original_string": "private static final Set<String> INCOMPRESSIBLE_MIME_TYPES = new HashSet<String>(Arrays.asList(\n            \"image/gif\",\n            \"image/jpeg\",\n            \"image/png\",\n            \"multipart/x-gzip\",\n            \"video/mp4\",\n            \"application/gzip\",\n            \"application/java-archive\",\n            \"application/mp4\",\n            \"application/x-7z-compressed\",\n            \"application/x-compressed\",\n            \"application/x-gzip\",\n            \"application/x-rar-compressed\",\n            \"application/zip\",\n            \"application/zlib\",\n            \"audio/mpeg\"\n    ));", "modifier": "private static final", "type": "Set<String>", "declarator": "INCOMPRESSIBLE_MIME_TYPES = new HashSet<String>(Arrays.asList(\n            \"image/gif\",\n            \"image/jpeg\",\n            \"image/png\",\n            \"multipart/x-gzip\",\n            \"video/mp4\",\n            \"application/gzip\",\n            \"application/java-archive\",\n            \"application/mp4\",\n            \"application/x-7z-compressed\",\n            \"application/x-compressed\",\n            \"application/x-gzip\",\n            \"application/x-rar-compressed\",\n            \"application/zip\",\n            \"application/zlib\",\n            \"audio/mpeg\"\n    ))", "var_name": "INCOMPRESSIBLE_MIME_TYPES"}, {"original_string": "private static final Set<String> COMPRESSIBLE_MIME_TYPES = new HashSet<String>(Arrays.asList(\n            \"application/xml\",\n            \"application/java\",\n            \"application/json\",\n            \"application/javascript\",\n            \"application/ecmascript\"\n    ));", "modifier": "private static final", "type": "Set<String>", "declarator": "COMPRESSIBLE_MIME_TYPES = new HashSet<String>(Arrays.asList(\n            \"application/xml\",\n            \"application/java\",\n            \"application/json\",\n            \"application/javascript\",\n            \"application/ecmascript\"\n    ))", "var_name": "COMPRESSIBLE_MIME_TYPES"}], "methods": [{"identifier": "isCompressible", "parameters": "(@NotNull Artifact artifact)", "modifiers": "public static", "return": "int", "signature": "int isCompressible(@NotNull Artifact artifact)", "full_signature": "public static int isCompressible(@NotNull Artifact artifact)", "class_method_signature": "CompressionUtil.isCompressible(@NotNull Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "isCompressibleContentType", "parameters": "(@NotNull String mimeType)", "modifiers": "static", "return": "boolean", "signature": "boolean isCompressibleContentType(@NotNull String mimeType)", "full_signature": "static boolean isCompressibleContentType(@NotNull String mimeType)", "class_method_signature": "CompressionUtil.isCompressibleContentType(@NotNull String mimeType)", "testcase": false, "constructor": false}, {"identifier": "isIncompressibleContentType", "parameters": "(@NotNull String mimeType)", "modifiers": "static", "return": "boolean", "signature": "boolean isIncompressibleContentType(@NotNull String mimeType)", "full_signature": "static boolean isIncompressibleContentType(@NotNull String mimeType)", "class_method_signature": "CompressionUtil.isIncompressibleContentType(@NotNull String mimeType)", "testcase": false, "constructor": false}, {"identifier": "seemsCompressible", "parameters": "(@NotNull Artifact artifact)", "modifiers": "static", "return": "int", "signature": "int seemsCompressible(@NotNull Artifact artifact)", "full_signature": "static int seemsCompressible(@NotNull Artifact artifact)", "class_method_signature": "CompressionUtil.seemsCompressible(@NotNull Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "isCompressible", "parameters": "(byte[] data, int len)", "modifiers": "private static", "return": "boolean", "signature": "boolean isCompressible(byte[] data, int len)", "full_signature": "private static boolean isCompressible(byte[] data, int len)", "class_method_signature": "CompressionUtil.isCompressible(byte[] data, int len)", "testcase": false, "constructor": false}, {"identifier": "checkEnvironmentSupportsCompressionSwitch", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean checkEnvironmentSupportsCompressionSwitch()", "full_signature": "private static boolean checkEnvironmentSupportsCompressionSwitch()", "class_method_signature": "CompressionUtil.checkEnvironmentSupportsCompressionSwitch()", "testcase": false, "constructor": false}], "file": "vault-core/src/main/java/org/apache/jackrabbit/vault/fs/impl/io/CompressionUtil.java"}, "focal_method": {"identifier": "seemsCompressible", "parameters": "(@NotNull Artifact artifact)", "modifiers": "static", "return": "int", "body": "static int seemsCompressible(@NotNull Artifact artifact) {\n        try (InputStream stream = artifact.getInputStream()) {\n            byte[] sample = IOUtils.toByteArray(stream, SAMPLE_LENGTH);\n            return isCompressible(sample, SAMPLE_LENGTH) ? 1 : -1;\n        } catch (RepositoryException | IOException e) {\n            log.warn(e.getMessage(), e);\n        }\n        return 0;\n    }", "signature": "int seemsCompressible(@NotNull Artifact artifact)", "full_signature": "static int seemsCompressible(@NotNull Artifact artifact)", "class_method_signature": "CompressionUtil.seemsCompressible(@NotNull Artifact artifact)", "testcase": false, "constructor": false, "invocations": ["getInputStream", "toByteArray", "isCompressible", "warn", "getMessage"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}