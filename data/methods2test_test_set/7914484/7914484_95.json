{"test_class": {"identifier": "SoapActionSmartEndpointInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EndpointInterceptor delegate;", "modifier": "private", "type": "EndpointInterceptor", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private String soapAction;", "modifier": "private", "type": "String", "declarator": "soapAction", "var_name": "soapAction"}, {"original_string": "private MessageContext messageContext;", "modifier": "private", "type": "MessageContext", "declarator": "messageContext", "var_name": "messageContext"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/soap/server/endpoint/interceptor/SoapActionSmartEndpointInterceptorTest.java"}, "test_case": {"identifier": "shouldInterceptNonMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldInterceptNonMatch() throws Exception {\n\t\tSoapActionSmartEndpointInterceptor interceptor = new SoapActionSmartEndpointInterceptor(delegate,\n\t\t\t\t\"http://springframework.org/other\");\n\n\t\tboolean result = interceptor.shouldIntercept(messageContext, null);\n\t\tassertFalse(\"Interceptor should apply\", result);\n\t}", "signature": "void shouldInterceptNonMatch()", "full_signature": "@Test public void shouldInterceptNonMatch()", "class_method_signature": "SoapActionSmartEndpointInterceptorTest.shouldInterceptNonMatch()", "testcase": true, "constructor": false, "invocations": ["shouldIntercept", "assertFalse"]}, "focal_class": {"identifier": "SoapActionSmartEndpointInterceptor", "superclass": "extends DelegatingSmartSoapEndpointInterceptor", "interfaces": "", "fields": [{"original_string": "private final String soapAction;", "modifier": "private final", "type": "String", "declarator": "soapAction", "var_name": "soapAction"}], "methods": [{"identifier": "SoapActionSmartEndpointInterceptor", "parameters": "(EndpointInterceptor delegate, String soapAction)", "modifiers": "public", "return": "", "signature": " SoapActionSmartEndpointInterceptor(EndpointInterceptor delegate, String soapAction)", "full_signature": "public  SoapActionSmartEndpointInterceptor(EndpointInterceptor delegate, String soapAction)", "class_method_signature": "SoapActionSmartEndpointInterceptor.SoapActionSmartEndpointInterceptor(EndpointInterceptor delegate, String soapAction)", "testcase": false, "constructor": true}, {"identifier": "shouldIntercept", "parameters": "(WebServiceMessage request, Object endpoint)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean shouldIntercept(WebServiceMessage request, Object endpoint)", "full_signature": "@Override protected boolean shouldIntercept(WebServiceMessage request, Object endpoint)", "class_method_signature": "SoapActionSmartEndpointInterceptor.shouldIntercept(WebServiceMessage request, Object endpoint)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/soap/server/endpoint/interceptor/SoapActionSmartEndpointInterceptor.java"}, "focal_method": {"identifier": "shouldIntercept", "parameters": "(WebServiceMessage request, Object endpoint)", "modifiers": "@Override protected", "return": "boolean", "body": "@Override\n\tprotected boolean shouldIntercept(WebServiceMessage request, Object endpoint) {\n\t\tif (request instanceof SoapMessage) {\n\t\t\tString soapAction = ((SoapMessage) request).getSoapAction();\n\t\t\tif (StringUtils.hasLength(soapAction) && soapAction.charAt(0) == '\"'\n\t\t\t\t\t&& soapAction.charAt(soapAction.length() - 1) == '\"') {\n\t\t\t\tsoapAction = soapAction.substring(1, soapAction.length() - 1);\n\t\t\t}\n\t\t\treturn this.soapAction.equals(soapAction);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}", "signature": "boolean shouldIntercept(WebServiceMessage request, Object endpoint)", "full_signature": "@Override protected boolean shouldIntercept(WebServiceMessage request, Object endpoint)", "class_method_signature": "SoapActionSmartEndpointInterceptor.shouldIntercept(WebServiceMessage request, Object endpoint)", "testcase": false, "constructor": false, "invocations": ["getSoapAction", "hasLength", "charAt", "charAt", "length", "substring", "length", "equals"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}