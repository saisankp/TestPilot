{"test_class": {"identifier": "StereoMatchTest", "superclass": "", "interfaces": "", "fields": [], "file": "base/isomorphism/src/test/java/org/openscience/cdk/isomorphism/StereoMatchTest.java"}, "test_case": {"identifier": "tetrahedral_match_swap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tetrahedral_match_swap() {\n        IAtomContainer query = dimethylpropane();\n        IAtomContainer target = dimethylpropane();\n        query.addStereoElement(new TetrahedralChirality(query.getAtom(0), new IAtom[]{query.getAtom(1),\n                query.getAtom(2), query.getAtom(3), query.getAtom(4)}, ITetrahedralChirality.Stereo.CLOCKWISE));\n        target.addStereoElement(new TetrahedralChirality(target.getAtom(0), new IAtom[]{target.getAtom(1),\n                target.getAtom(2), target.getAtom(3), target.getAtom(4)}, ITetrahedralChirality.Stereo.ANTI_CLOCKWISE));\n        assertTrue(new StereoMatch(query, target).apply(new int[]{0, 1, 3, 2, 4}));\n    }", "signature": "void tetrahedral_match_swap()", "full_signature": "@Test public void tetrahedral_match_swap()", "class_method_signature": "StereoMatchTest.tetrahedral_match_swap()", "testcase": true, "constructor": false, "invocations": ["dimethylpropane", "dimethylpropane", "addStereoElement", "getAtom", "getAtom", "getAtom", "getAtom", "getAtom", "addStereoElement", "getAtom", "getAtom", "getAtom", "getAtom", "getAtom", "assertTrue", "apply"]}, "focal_class": {"identifier": "StereoMatch", "superclass": "", "interfaces": "implements Predicate<int[]>", "fields": [{"original_string": "private final IAtomContainer query, target;", "modifier": "private final", "type": "IAtomContainer", "declarator": "query", "var_name": "query"}, {"original_string": "private final Map<IAtom, Integer> queryMap, targetMap;", "modifier": "private final", "type": "Map<IAtom, Integer>", "declarator": "queryMap", "var_name": "queryMap"}, {"original_string": "private final IStereoElement[]    queryElements, targetElements;", "modifier": "private final", "type": "IStereoElement[]", "declarator": "queryElements", "var_name": "queryElements"}, {"original_string": "private final Type[]              queryTypes, targetTypes;", "modifier": "private final", "type": "Type[]", "declarator": "queryTypes", "var_name": "queryTypes"}, {"original_string": "private final int[]               queryStereoIndices, targetStereoIndices;", "modifier": "private final", "type": "int[]", "declarator": "queryStereoIndices", "var_name": "queryStereoIndices"}], "methods": [{"identifier": "StereoMatch", "parameters": "(IAtomContainer query, IAtomContainer target)", "modifiers": "", "return": "", "signature": " StereoMatch(IAtomContainer query, IAtomContainer target)", "full_signature": "  StereoMatch(IAtomContainer query, IAtomContainer target)", "class_method_signature": "StereoMatch.StereoMatch(IAtomContainer query, IAtomContainer target)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(final int[] mapping)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean apply(final int[] mapping)", "full_signature": "@Override public boolean apply(final int[] mapping)", "class_method_signature": "StereoMatch.apply(final int[] mapping)", "testcase": false, "constructor": false}, {"identifier": "checkTetrahedral", "parameters": "(int u, int[] mapping)", "modifiers": "private", "return": "boolean", "signature": "boolean checkTetrahedral(int u, int[] mapping)", "full_signature": "private boolean checkTetrahedral(int u, int[] mapping)", "class_method_signature": "StereoMatch.checkTetrahedral(int u, int[] mapping)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(int u, int v, int[] us, int[] mapping)", "modifiers": "private", "return": "int[]", "signature": "int[] map(int u, int v, int[] us, int[] mapping)", "full_signature": "private int[] map(int u, int v, int[] us, int[] mapping)", "class_method_signature": "StereoMatch.map(int u, int v, int[] us, int[] mapping)", "testcase": false, "constructor": false}, {"identifier": "checkGeometric", "parameters": "(int u1, int u2, int[] mapping)", "modifiers": "private", "return": "boolean", "signature": "boolean checkGeometric(int u1, int u2, int[] mapping)", "full_signature": "private boolean checkGeometric(int u1, int u2, int[] mapping)", "class_method_signature": "StereoMatch.checkGeometric(int u1, int u2, int[] mapping)", "testcase": false, "constructor": false}, {"identifier": "neighbors", "parameters": "(ITetrahedralChirality element, Map<IAtom, Integer> map)", "modifiers": "private", "return": "int[]", "signature": "int[] neighbors(ITetrahedralChirality element, Map<IAtom, Integer> map)", "full_signature": "private int[] neighbors(ITetrahedralChirality element, Map<IAtom, Integer> map)", "class_method_signature": "StereoMatch.neighbors(ITetrahedralChirality element, Map<IAtom, Integer> map)", "testcase": false, "constructor": false}, {"identifier": "findHydrogen", "parameters": "(final IAtom[] atoms)", "modifiers": "private", "return": "IAtom", "signature": "IAtom findHydrogen(final IAtom[] atoms)", "full_signature": "private IAtom findHydrogen(final IAtom[] atoms)", "class_method_signature": "StereoMatch.findHydrogen(final IAtom[] atoms)", "testcase": false, "constructor": false}, {"identifier": "permutationParity", "parameters": "(int[] vs)", "modifiers": "private", "return": "int", "signature": "int permutationParity(int[] vs)", "full_signature": "private int permutationParity(int[] vs)", "class_method_signature": "StereoMatch.permutationParity(int[] vs)", "testcase": false, "constructor": false}, {"identifier": "otherIndex", "parameters": "(int i)", "modifiers": "private", "return": "int", "signature": "int otherIndex(int i)", "full_signature": "private int otherIndex(int i)", "class_method_signature": "StereoMatch.otherIndex(int i)", "testcase": false, "constructor": false}, {"identifier": "indexAtoms", "parameters": "(IAtomContainer container)", "modifiers": "private static", "return": "Map<IAtom, Integer>", "signature": "Map<IAtom, Integer> indexAtoms(IAtomContainer container)", "full_signature": "private static Map<IAtom, Integer> indexAtoms(IAtomContainer container)", "class_method_signature": "StereoMatch.indexAtoms(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "indexElements", "parameters": "(Map<IAtom, Integer> map, IStereoElement[] elements, Type[] types,\n            IAtomContainer container)", "modifiers": "private static", "return": "int[]", "signature": "int[] indexElements(Map<IAtom, Integer> map, IStereoElement[] elements, Type[] types,\n            IAtomContainer container)", "full_signature": "private static int[] indexElements(Map<IAtom, Integer> map, IStereoElement[] elements, Type[] types,\n            IAtomContainer container)", "class_method_signature": "StereoMatch.indexElements(Map<IAtom, Integer> map, IStereoElement[] elements, Type[] types,\n            IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "parity", "parameters": "(ITetrahedralChirality.Stereo stereo)", "modifiers": "private", "return": "int", "signature": "int parity(ITetrahedralChirality.Stereo stereo)", "full_signature": "private int parity(ITetrahedralChirality.Stereo stereo)", "class_method_signature": "StereoMatch.parity(ITetrahedralChirality.Stereo stereo)", "testcase": false, "constructor": false}, {"identifier": "parity", "parameters": "(Conformation conformation)", "modifiers": "private", "return": "int", "signature": "int parity(Conformation conformation)", "full_signature": "private int parity(Conformation conformation)", "class_method_signature": "StereoMatch.parity(Conformation conformation)", "testcase": false, "constructor": false}], "file": "base/isomorphism/src/main/java/org/openscience/cdk/isomorphism/StereoMatch.java"}, "focal_method": {"identifier": "apply", "parameters": "(final int[] mapping)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean apply(final int[] mapping) {\n\n        // n.b. not true for unspecified queries e.g. [C@?H](*)(*)*\n        if (queryStereoIndices.length > targetStereoIndices.length) return false;\n\n        for (final int u : queryStereoIndices) {\n            switch (queryTypes[u]) {\n                case Tetrahedral:\n                    if (!checkTetrahedral(u, mapping)) return false;\n                    break;\n                case Geometric:\n                    if (!checkGeometric(u, otherIndex(u), mapping)) return false;\n                    break;\n            }\n        }\n        return true;\n    }", "signature": "boolean apply(final int[] mapping)", "full_signature": "@Override public boolean apply(final int[] mapping)", "class_method_signature": "StereoMatch.apply(final int[] mapping)", "testcase": false, "constructor": false, "invocations": ["checkTetrahedral", "checkGeometric", "otherIndex"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}