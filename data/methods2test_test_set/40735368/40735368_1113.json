{"test_class": {"identifier": "PropertyExistsFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final FilterFactory ff = CommonFactoryFinder.getFilterFactory(null);", "modifier": "private static final", "type": "FilterFactory", "declarator": "ff = CommonFactoryFinder.getFilterFactory(null)", "var_name": "ff"}, {"original_string": "PropertyExistsFunction f;", "modifier": "", "type": "PropertyExistsFunction", "declarator": "f", "var_name": "f"}], "file": "modules/library/cql/src/test/java/org/geotools/filter/function/PropertyExistsFunctionTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        FilterFactory ff = CommonFactoryFinder.getFilterFactory(null);\n        PropertyExistsFunction actual = new PropertyExistsFunction();\n        f.setParameters(list(ff.property(\"testPropName\")));\n        actual.setParameters(list(ff\n                .property(\"testPropName\")));\n        Assert.assertEquals(f, actual);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "PropertyExistsFunctionTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["getFilterFactory", "setParameters", "list", "property", "setParameters", "list", "property", "assertEquals"]}, "focal_class": {"identifier": "PropertyExistsFunction", "superclass": "extends FunctionExpressionImpl", "interfaces": "", "fields": [{"original_string": "public static FunctionName NAME = new FunctionNameImpl(\"PropertyExists\",\n            parameter(\"exists\", Boolean.class),\n            parameter(\"propertyName\", Object.class));", "modifier": "public static", "type": "FunctionName", "declarator": "NAME = new FunctionNameImpl(\"PropertyExists\",\n            parameter(\"exists\", Boolean.class),\n            parameter(\"propertyName\", Object.class))", "var_name": "NAME"}], "methods": [{"identifier": "PropertyExistsFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " PropertyExistsFunction()", "full_signature": "public  PropertyExistsFunction()", "class_method_signature": "PropertyExistsFunction.PropertyExistsFunction()", "testcase": false, "constructor": true}, {"identifier": "getPropertyName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getPropertyName()", "full_signature": "private String getPropertyName()", "class_method_signature": "PropertyExistsFunction.getPropertyName()", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "(Expression expr)", "modifiers": "private", "return": "String", "signature": "String getPropertyName(Expression expr)", "full_signature": "private String getPropertyName(Expression expr)", "class_method_signature": "PropertyExistsFunction.getPropertyName(Expression expr)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(SimpleFeature feature)", "modifiers": "public", "return": "Object", "signature": "Object evaluate(SimpleFeature feature)", "full_signature": "public Object evaluate(SimpleFeature feature)", "class_method_signature": "PropertyExistsFunction.evaluate(SimpleFeature feature)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Object bean)", "modifiers": "public", "return": "Object", "signature": "Object evaluate(Object bean)", "full_signature": "public Object evaluate(Object bean)", "class_method_signature": "PropertyExistsFunction.evaluate(Object bean)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "PropertyExistsFunction.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "PropertyExistsFunction.equals(Object obj)", "testcase": false, "constructor": false}], "file": "modules/library/cql/src/main/java/org/geotools/filter/function/PropertyExistsFunction.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n\n        if (obj == this)\n            return true;\n        if (!(obj instanceof PropertyExistsFunction)) {\n\n            return false;\n        }\n        PropertyExistsFunction other = (PropertyExistsFunction) obj;\n\n        if (other.getParameters().size() != this.getParameters().size())\n            return false;\n        if (other.getParameters().size() > 0) {\n            final String propName = getPropertyName();\n\n            Expression otherPropNameExpr = (Expression) other.getParameters()\n                    .get(0);\n            final String otherPropName = getPropertyName(otherPropNameExpr);\n\n            return Utilities.equals(propName, otherPropName);\n        } else {\n            return true;\n        }\n    }", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "PropertyExistsFunction.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["size", "getParameters", "size", "getParameters", "size", "getParameters", "getPropertyName", "get", "getParameters", "getPropertyName", "equals"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}