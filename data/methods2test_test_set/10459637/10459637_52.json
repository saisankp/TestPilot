{"test_class": {"identifier": "ControllerTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [{"original_string": "private Controller controller;", "modifier": "private", "type": "Controller", "declarator": "controller", "var_name": "controller"}, {"original_string": "private MockThreadPoolService tp;", "modifier": "private", "type": "MockThreadPoolService", "declarator": "tp", "var_name": "tp"}], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/core/internal/ControllerTest.java"}, "test_case": {"identifier": "testRemoveActiveSwitch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveActiveSwitch() {\n        IOFSwitch sw = EasyMock.createNiceMock(IOFSwitch.class);\n        boolean exceptionThrown = false;\n        expect(sw.getId()).andReturn(1L).anyTimes();\n        replay(sw);\n        getController().activeSwitches.put(sw.getId(), sw);\n        try {\n            getController().getSwitches().remove(1L);\n        } catch (UnsupportedOperationException e) {\n            exceptionThrown = true;\n        }\n        assertTrue(exceptionThrown);\n        verify(sw);\n    }", "signature": "void testRemoveActiveSwitch()", "full_signature": "@Test public void testRemoveActiveSwitch()", "class_method_signature": "ControllerTest.testRemoveActiveSwitch()", "testcase": true, "constructor": false, "invocations": ["createNiceMock", "anyTimes", "andReturn", "expect", "getId", "replay", "put", "getController", "getId", "remove", "getSwitches", "getController", "assertTrue", "verify"]}, "focal_class": {"identifier": "Controller", "superclass": "", "interfaces": "implements IFloodlightProviderService, \n            IStorageSourceListener", "fields": [{"original_string": "protected static Logger log = LoggerFactory.getLogger(Controller.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Controller.class)", "var_name": "log"}, {"original_string": "private static final String ERROR_DATABASE = \n            \"The controller could not communicate with the system database.\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_DATABASE = \n            \"The controller could not communicate with the system database.\"", "var_name": "ERROR_DATABASE"}, {"original_string": "protected BasicFactory factory;", "modifier": "protected", "type": "BasicFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "protected ConcurrentMap<OFType,\n                            ListenerDispatcher<OFType,IOFMessageListener>> \n                                messageListeners;", "modifier": "protected", "type": "ConcurrentMap<OFType,\n                            ListenerDispatcher<OFType,IOFMessageListener>>", "declarator": "messageListeners", "var_name": "messageListeners"}, {"original_string": "protected ConcurrentHashMap<Long, IOFSwitch> activeSwitches;", "modifier": "protected", "type": "ConcurrentHashMap<Long, IOFSwitch>", "declarator": "activeSwitches", "var_name": "activeSwitches"}, {"original_string": "protected HashSet<OFSwitchImpl> connectedSwitches;", "modifier": "protected", "type": "HashSet<OFSwitchImpl>", "declarator": "connectedSwitches", "var_name": "connectedSwitches"}, {"original_string": "protected HashMap<String, String> controllerNodeIPsCache;", "modifier": "protected", "type": "HashMap<String, String>", "declarator": "controllerNodeIPsCache", "var_name": "controllerNodeIPsCache"}, {"original_string": "protected Set<IOFSwitchListener> switchListeners;", "modifier": "protected", "type": "Set<IOFSwitchListener>", "declarator": "switchListeners", "var_name": "switchListeners"}, {"original_string": "protected Set<IHAListener> haListeners;", "modifier": "protected", "type": "Set<IHAListener>", "declarator": "haListeners", "var_name": "haListeners"}, {"original_string": "protected Map<String, List<IInfoProvider>> providerMap;", "modifier": "protected", "type": "Map<String, List<IInfoProvider>>", "declarator": "providerMap", "var_name": "providerMap"}, {"original_string": "protected BlockingQueue<IUpdate> updates;", "modifier": "protected", "type": "BlockingQueue<IUpdate>", "declarator": "updates", "var_name": "updates"}, {"original_string": "protected IRestApiService restApi;", "modifier": "protected", "type": "IRestApiService", "declarator": "restApi", "var_name": "restApi"}, {"original_string": "protected ICounterStoreService counterStore = null;", "modifier": "protected", "type": "ICounterStoreService", "declarator": "counterStore = null", "var_name": "counterStore"}, {"original_string": "protected IStorageSourceService storageSource;", "modifier": "protected", "type": "IStorageSourceService", "declarator": "storageSource", "var_name": "storageSource"}, {"original_string": "protected IPktInProcessingTimeService pktinProcTime;", "modifier": "protected", "type": "IPktInProcessingTimeService", "declarator": "pktinProcTime", "var_name": "pktinProcTime"}, {"original_string": "protected IThreadPoolService threadPool;", "modifier": "protected", "type": "IThreadPoolService", "declarator": "threadPool", "var_name": "threadPool"}, {"original_string": "protected int openFlowPort = 6633;", "modifier": "protected", "type": "int", "declarator": "openFlowPort = 6633", "var_name": "openFlowPort"}, {"original_string": "protected int workerThreads = 0;", "modifier": "protected", "type": "int", "declarator": "workerThreads = 0", "var_name": "workerThreads"}, {"original_string": "protected String controllerId = \"localhost\";", "modifier": "protected", "type": "String", "declarator": "controllerId = \"localhost\"", "var_name": "controllerId"}, {"original_string": "protected Role role;", "modifier": "protected", "type": "Role", "declarator": "role", "var_name": "role"}, {"original_string": "protected RoleChanger roleChanger;", "modifier": "protected", "type": "RoleChanger", "declarator": "roleChanger", "var_name": "roleChanger"}, {"original_string": "protected long systemStartTime;", "modifier": "protected", "type": "long", "declarator": "systemStartTime", "var_name": "systemStartTime"}, {"original_string": "protected boolean alwaysClearFlowsOnSwAdd = false;", "modifier": "protected", "type": "boolean", "declarator": "alwaysClearFlowsOnSwAdd = false", "var_name": "alwaysClearFlowsOnSwAdd"}, {"original_string": "protected static final String CONTROLLER_TABLE_NAME = \"controller_controller\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_TABLE_NAME = \"controller_controller\"", "var_name": "CONTROLLER_TABLE_NAME"}, {"original_string": "protected static final String CONTROLLER_ID = \"id\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_ID = \"id\"", "var_name": "CONTROLLER_ID"}, {"original_string": "protected static final String SWITCH_TABLE_NAME = \"controller_switch\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_TABLE_NAME = \"controller_switch\"", "var_name": "SWITCH_TABLE_NAME"}, {"original_string": "protected static final String SWITCH_DATAPATH_ID = \"dpid\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_DATAPATH_ID = \"dpid\"", "var_name": "SWITCH_DATAPATH_ID"}, {"original_string": "protected static final String SWITCH_SOCKET_ADDRESS = \"socket_address\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_SOCKET_ADDRESS = \"socket_address\"", "var_name": "SWITCH_SOCKET_ADDRESS"}, {"original_string": "protected static final String SWITCH_IP = \"ip\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_IP = \"ip\"", "var_name": "SWITCH_IP"}, {"original_string": "protected static final String SWITCH_CONTROLLER_ID = \"controller_id\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_CONTROLLER_ID = \"controller_id\"", "var_name": "SWITCH_CONTROLLER_ID"}, {"original_string": "protected static final String SWITCH_ACTIVE = \"active\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_ACTIVE = \"active\"", "var_name": "SWITCH_ACTIVE"}, {"original_string": "protected static final String SWITCH_CONNECTED_SINCE = \"connected_since\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_CONNECTED_SINCE = \"connected_since\"", "var_name": "SWITCH_CONNECTED_SINCE"}, {"original_string": "protected static final String SWITCH_CAPABILITIES = \"capabilities\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_CAPABILITIES = \"capabilities\"", "var_name": "SWITCH_CAPABILITIES"}, {"original_string": "protected static final String SWITCH_BUFFERS = \"buffers\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_BUFFERS = \"buffers\"", "var_name": "SWITCH_BUFFERS"}, {"original_string": "protected static final String SWITCH_TABLES = \"tables\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_TABLES = \"tables\"", "var_name": "SWITCH_TABLES"}, {"original_string": "protected static final String SWITCH_ACTIONS = \"actions\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_ACTIONS = \"actions\"", "var_name": "SWITCH_ACTIONS"}, {"original_string": "protected static final String SWITCH_CONFIG_TABLE_NAME = \"controller_switchconfig\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_CONFIG_TABLE_NAME = \"controller_switchconfig\"", "var_name": "SWITCH_CONFIG_TABLE_NAME"}, {"original_string": "protected static final String SWITCH_CONFIG_CORE_SWITCH = \"core_switch\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_CONFIG_CORE_SWITCH = \"core_switch\"", "var_name": "SWITCH_CONFIG_CORE_SWITCH"}, {"original_string": "protected static final String PORT_TABLE_NAME = \"controller_port\";", "modifier": "protected static final", "type": "String", "declarator": "PORT_TABLE_NAME = \"controller_port\"", "var_name": "PORT_TABLE_NAME"}, {"original_string": "protected static final String PORT_ID = \"id\";", "modifier": "protected static final", "type": "String", "declarator": "PORT_ID = \"id\"", "var_name": "PORT_ID"}, {"original_string": "protected static final String PORT_SWITCH = \"switch_id\";", "modifier": "protected static final", "type": "String", "declarator": "PORT_SWITCH = \"switch_id\"", "var_name": "PORT_SWITCH"}, {"original_string": "protected static final String PORT_NUMBER = \"number\";", "modifier": "protected static final", "type": "String", "declarator": "PORT_NUMBER = \"number\"", "var_name": "PORT_NUMBER"}, {"original_string": "protected static final String PORT_HARDWARE_ADDRESS = \"hardware_address\";", "modifier": "protected static final", "type": "String", "declarator": "PORT_HARDWARE_ADDRESS = \"hardware_address\"", "var_name": "PORT_HARDWARE_ADDRESS"}, {"original_string": "protected static final String PORT_NAME = \"name\";", "modifier": "protected static final", "type": "String", "declarator": "PORT_NAME = \"name\"", "var_name": "PORT_NAME"}, {"original_string": "protected static final String PORT_CONFIG = \"config\";", "modifier": "protected static final", "type": "String", "declarator": "PORT_CONFIG = \"config\"", "var_name": "PORT_CONFIG"}, {"original_string": "protected static final String PORT_STATE = \"state\";", "modifier": "protected static final", "type": "String", "declarator": "PORT_STATE = \"state\"", "var_name": "PORT_STATE"}, {"original_string": "protected static final String PORT_CURRENT_FEATURES = \"current_features\";", "modifier": "protected static final", "type": "String", "declarator": "PORT_CURRENT_FEATURES = \"current_features\"", "var_name": "PORT_CURRENT_FEATURES"}, {"original_string": "protected static final String PORT_ADVERTISED_FEATURES = \"advertised_features\";", "modifier": "protected static final", "type": "String", "declarator": "PORT_ADVERTISED_FEATURES = \"advertised_features\"", "var_name": "PORT_ADVERTISED_FEATURES"}, {"original_string": "protected static final String PORT_SUPPORTED_FEATURES = \"supported_features\";", "modifier": "protected static final", "type": "String", "declarator": "PORT_SUPPORTED_FEATURES = \"supported_features\"", "var_name": "PORT_SUPPORTED_FEATURES"}, {"original_string": "protected static final String PORT_PEER_FEATURES = \"peer_features\";", "modifier": "protected static final", "type": "String", "declarator": "PORT_PEER_FEATURES = \"peer_features\"", "var_name": "PORT_PEER_FEATURES"}, {"original_string": "protected static final String CONTROLLER_INTERFACE_TABLE_NAME = \"controller_controllerinterface\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_INTERFACE_TABLE_NAME = \"controller_controllerinterface\"", "var_name": "CONTROLLER_INTERFACE_TABLE_NAME"}, {"original_string": "protected static final String CONTROLLER_INTERFACE_ID = \"id\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_INTERFACE_ID = \"id\"", "var_name": "CONTROLLER_INTERFACE_ID"}, {"original_string": "protected static final String CONTROLLER_INTERFACE_CONTROLLER_ID = \"controller_id\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_INTERFACE_CONTROLLER_ID = \"controller_id\"", "var_name": "CONTROLLER_INTERFACE_CONTROLLER_ID"}, {"original_string": "protected static final String CONTROLLER_INTERFACE_TYPE = \"type\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_INTERFACE_TYPE = \"type\"", "var_name": "CONTROLLER_INTERFACE_TYPE"}, {"original_string": "protected static final String CONTROLLER_INTERFACE_NUMBER = \"number\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_INTERFACE_NUMBER = \"number\"", "var_name": "CONTROLLER_INTERFACE_NUMBER"}, {"original_string": "protected static final String CONTROLLER_INTERFACE_DISCOVERED_IP = \"discovered_ip\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_INTERFACE_DISCOVERED_IP = \"discovered_ip\"", "var_name": "CONTROLLER_INTERFACE_DISCOVERED_IP"}, {"original_string": "protected static final int SEND_BUFFER_SIZE = 4 * 1024 * 1024;", "modifier": "protected static final", "type": "int", "declarator": "SEND_BUFFER_SIZE = 4 * 1024 * 1024", "var_name": "SEND_BUFFER_SIZE"}, {"original_string": "protected static final int BATCH_MAX_SIZE = 100;", "modifier": "protected static final", "type": "int", "declarator": "BATCH_MAX_SIZE = 100", "var_name": "BATCH_MAX_SIZE"}, {"original_string": "protected static final boolean ALWAYS_DECODE_ETH = true;", "modifier": "protected static final", "type": "boolean", "declarator": "ALWAYS_DECODE_ETH = true", "var_name": "ALWAYS_DECODE_ETH"}, {"original_string": "protected static final ThreadLocal<Stack<FloodlightContext>> flcontext_cache =\n        new ThreadLocal <Stack<FloodlightContext>> () {\n            @Override\n            protected Stack<FloodlightContext> initialValue() {\n                return new Stack<FloodlightContext>();\n            }\n        };", "modifier": "protected static final", "type": "ThreadLocal<Stack<FloodlightContext>>", "declarator": "flcontext_cache =\n        new ThreadLocal <Stack<FloodlightContext>> () {\n            @Override\n            protected Stack<FloodlightContext> initialValue() {\n                return new Stack<FloodlightContext>();\n            }\n        }", "var_name": "flcontext_cache"}], "methods": [{"identifier": "setStorageSourceService", "parameters": "(IStorageSourceService storageSource)", "modifiers": "public", "return": "void", "signature": "void setStorageSourceService(IStorageSourceService storageSource)", "full_signature": "public void setStorageSourceService(IStorageSourceService storageSource)", "class_method_signature": "Controller.setStorageSourceService(IStorageSourceService storageSource)", "testcase": false, "constructor": false}, {"identifier": "setCounterStore", "parameters": "(ICounterStoreService counterStore)", "modifiers": "public", "return": "void", "signature": "void setCounterStore(ICounterStoreService counterStore)", "full_signature": "public void setCounterStore(ICounterStoreService counterStore)", "class_method_signature": "Controller.setCounterStore(ICounterStoreService counterStore)", "testcase": false, "constructor": false}, {"identifier": "setPktInProcessingService", "parameters": "(IPktInProcessingTimeService pits)", "modifiers": "public", "return": "void", "signature": "void setPktInProcessingService(IPktInProcessingTimeService pits)", "full_signature": "public void setPktInProcessingService(IPktInProcessingTimeService pits)", "class_method_signature": "Controller.setPktInProcessingService(IPktInProcessingTimeService pits)", "testcase": false, "constructor": false}, {"identifier": "setRestApiService", "parameters": "(IRestApiService restApi)", "modifiers": "public", "return": "void", "signature": "void setRestApiService(IRestApiService restApi)", "full_signature": "public void setRestApiService(IRestApiService restApi)", "class_method_signature": "Controller.setRestApiService(IRestApiService restApi)", "testcase": false, "constructor": false}, {"identifier": "setThreadPoolService", "parameters": "(IThreadPoolService tp)", "modifiers": "public", "return": "void", "signature": "void setThreadPoolService(IThreadPoolService tp)", "full_signature": "public void setThreadPoolService(IThreadPoolService tp)", "class_method_signature": "Controller.setThreadPoolService(IThreadPoolService tp)", "testcase": false, "constructor": false}, {"identifier": "getRole", "parameters": "()", "modifiers": "@Override public", "return": "Role", "signature": "Role getRole()", "full_signature": "@Override public Role getRole()", "class_method_signature": "Controller.getRole()", "testcase": false, "constructor": false}, {"identifier": "setRole", "parameters": "(Role role)", "modifiers": "@Override public", "return": "void", "signature": "void setRole(Role role)", "full_signature": "@Override public void setRole(Role role)", "class_method_signature": "Controller.setRole(Role role)", "testcase": false, "constructor": false}, {"identifier": "getChannelHandler", "parameters": "(OFChannelState state)", "modifiers": "protected", "return": "ChannelUpstreamHandler", "signature": "ChannelUpstreamHandler getChannelHandler(OFChannelState state)", "full_signature": "protected ChannelUpstreamHandler getChannelHandler(OFChannelState state)", "class_method_signature": "Controller.getChannelHandler(OFChannelState state)", "testcase": false, "constructor": false}, {"identifier": "handlePortStatusMessage", "parameters": "(IOFSwitch sw,\n                                           OFPortStatus m,\n                                           boolean updateStorage)", "modifiers": "protected", "return": "void", "signature": "void handlePortStatusMessage(IOFSwitch sw,\n                                           OFPortStatus m,\n                                           boolean updateStorage)", "full_signature": "protected void handlePortStatusMessage(IOFSwitch sw,\n                                           OFPortStatus m,\n                                           boolean updateStorage)", "class_method_signature": "Controller.handlePortStatusMessage(IOFSwitch sw,\n                                           OFPortStatus m,\n                                           boolean updateStorage)", "testcase": false, "constructor": false}, {"identifier": "flcontext_alloc", "parameters": "()", "modifiers": "protected static", "return": "FloodlightContext", "signature": "FloodlightContext flcontext_alloc()", "full_signature": "protected static FloodlightContext flcontext_alloc()", "class_method_signature": "Controller.flcontext_alloc()", "testcase": false, "constructor": false}, {"identifier": "flcontext_free", "parameters": "(FloodlightContext flcontext)", "modifiers": "protected", "return": "void", "signature": "void flcontext_free(FloodlightContext flcontext)", "full_signature": "protected void flcontext_free(FloodlightContext flcontext)", "class_method_signature": "Controller.flcontext_free(FloodlightContext flcontext)", "testcase": false, "constructor": false}, {"identifier": "handleMessage", "parameters": "(IOFSwitch sw, OFMessage m,\n                                 FloodlightContext bContext)", "modifiers": "@LogMessageDocs({ @LogMessageDoc(level=\"ERROR\", message=\"Ignoring PacketIn (Xid = {xid}) because the data\" + \" field is empty.\", explanation=\"The switch sent an improperly-formatted PacketIn\" + \" message\", recommendation=LogMessageDoc.CHECK_SWITCH), @LogMessageDoc(level=\"WARN\", message=\"Unhandled OF Message: {} from {}\", explanation=\"The switch sent a message not handled by \" + \"the controller\") }) protected", "return": "void", "signature": "void handleMessage(IOFSwitch sw, OFMessage m,\n                                 FloodlightContext bContext)", "full_signature": "@LogMessageDocs({ @LogMessageDoc(level=\"ERROR\", message=\"Ignoring PacketIn (Xid = {xid}) because the data\" + \" field is empty.\", explanation=\"The switch sent an improperly-formatted PacketIn\" + \" message\", recommendation=LogMessageDoc.CHECK_SWITCH), @LogMessageDoc(level=\"WARN\", message=\"Unhandled OF Message: {} from {}\", explanation=\"The switch sent a message not handled by \" + \"the controller\") }) protected void handleMessage(IOFSwitch sw, OFMessage m,\n                                 FloodlightContext bContext)", "class_method_signature": "Controller.handleMessage(IOFSwitch sw, OFMessage m,\n                                 FloodlightContext bContext)", "testcase": false, "constructor": false}, {"identifier": "logError", "parameters": "(IOFSwitch sw, OFError error)", "modifiers": "@LogMessageDoc(level=\"ERROR\", message=\"Error {error type} {error code} from {switch}\", explanation=\"The switch responded with an unexpected error\" + \"to an OpenFlow message from the controller\", recommendation=\"This could indicate improper network operation. \" + \"If the problem persists restarting the switch and \" + \"controller may help.\" ) protected", "return": "void", "signature": "void logError(IOFSwitch sw, OFError error)", "full_signature": "@LogMessageDoc(level=\"ERROR\", message=\"Error {error type} {error code} from {switch}\", explanation=\"The switch responded with an unexpected error\" + \"to an OpenFlow message from the controller\", recommendation=\"This could indicate improper network operation. \" + \"If the problem persists restarting the switch and \" + \"controller may help.\" ) protected void logError(IOFSwitch sw, OFError error)", "class_method_signature": "Controller.logError(IOFSwitch sw, OFError error)", "testcase": false, "constructor": false}, {"identifier": "addSwitch", "parameters": "(IOFSwitch sw)", "modifiers": "@LogMessageDoc(level=\"ERROR\", message=\"New switch added {switch} for already-added switch {switch}\", explanation=\"A switch with the same DPID as another switch \" + \"connected to the controller. This can be caused by \" + \"multiple switches configured with the same DPID, or \" + \"by a switch reconnected very quickly after \" + \"disconnecting.\", recommendation=\"If this happens repeatedly, it is likely there \" + \"are switches with duplicate DPIDs on the network. \" + \"Reconfigure the appropriate switches. If it happens \" + \"very rarely, then it is likely this is a transient \" + \"network problem that can be ignored.\" ) protected", "return": "void", "signature": "void addSwitch(IOFSwitch sw)", "full_signature": "@LogMessageDoc(level=\"ERROR\", message=\"New switch added {switch} for already-added switch {switch}\", explanation=\"A switch with the same DPID as another switch \" + \"connected to the controller. This can be caused by \" + \"multiple switches configured with the same DPID, or \" + \"by a switch reconnected very quickly after \" + \"disconnecting.\", recommendation=\"If this happens repeatedly, it is likely there \" + \"are switches with duplicate DPIDs on the network. \" + \"Reconfigure the appropriate switches. If it happens \" + \"very rarely, then it is likely this is a transient \" + \"network problem that can be ignored.\" ) protected void addSwitch(IOFSwitch sw)", "class_method_signature": "Controller.addSwitch(IOFSwitch sw)", "testcase": false, "constructor": false}, {"identifier": "removeSwitch", "parameters": "(IOFSwitch sw)", "modifiers": "protected", "return": "void", "signature": "void removeSwitch(IOFSwitch sw)", "full_signature": "protected void removeSwitch(IOFSwitch sw)", "class_method_signature": "Controller.removeSwitch(IOFSwitch sw)", "testcase": false, "constructor": false}, {"identifier": "addOFMessageListener", "parameters": "(OFType type, \n                                                  IOFMessageListener listener)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void addOFMessageListener(OFType type, \n                                                  IOFMessageListener listener)", "full_signature": "@Override public synchronized void addOFMessageListener(OFType type, \n                                                  IOFMessageListener listener)", "class_method_signature": "Controller.addOFMessageListener(OFType type, \n                                                  IOFMessageListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeOFMessageListener", "parameters": "(OFType type,\n                                                     IOFMessageListener listener)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void removeOFMessageListener(OFType type,\n                                                     IOFMessageListener listener)", "full_signature": "@Override public synchronized void removeOFMessageListener(OFType type,\n                                                     IOFMessageListener listener)", "class_method_signature": "Controller.removeOFMessageListener(OFType type,\n                                                     IOFMessageListener listener)", "testcase": false, "constructor": false}, {"identifier": "logListeners", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void logListeners()", "full_signature": "private void logListeners()", "class_method_signature": "Controller.logListeners()", "testcase": false, "constructor": false}, {"identifier": "removeOFMessageListeners", "parameters": "(OFType type)", "modifiers": "public", "return": "void", "signature": "void removeOFMessageListeners(OFType type)", "full_signature": "public void removeOFMessageListeners(OFType type)", "class_method_signature": "Controller.removeOFMessageListeners(OFType type)", "testcase": false, "constructor": false}, {"identifier": "getSwitches", "parameters": "()", "modifiers": "@Override public", "return": "Map<Long, IOFSwitch>", "signature": "Map<Long, IOFSwitch> getSwitches()", "full_signature": "@Override public Map<Long, IOFSwitch> getSwitches()", "class_method_signature": "Controller.getSwitches()", "testcase": false, "constructor": false}, {"identifier": "addOFSwitchListener", "parameters": "(IOFSwitchListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addOFSwitchListener(IOFSwitchListener listener)", "full_signature": "@Override public void addOFSwitchListener(IOFSwitchListener listener)", "class_method_signature": "Controller.addOFSwitchListener(IOFSwitchListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeOFSwitchListener", "parameters": "(IOFSwitchListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeOFSwitchListener(IOFSwitchListener listener)", "full_signature": "@Override public void removeOFSwitchListener(IOFSwitchListener listener)", "class_method_signature": "Controller.removeOFSwitchListener(IOFSwitchListener listener)", "testcase": false, "constructor": false}, {"identifier": "getListeners", "parameters": "()", "modifiers": "@Override public", "return": "Map<OFType, List<IOFMessageListener>>", "signature": "Map<OFType, List<IOFMessageListener>> getListeners()", "full_signature": "@Override public Map<OFType, List<IOFMessageListener>> getListeners()", "class_method_signature": "Controller.getListeners()", "testcase": false, "constructor": false}, {"identifier": "injectOfMessage", "parameters": "(IOFSwitch sw, OFMessage msg,\n                                   FloodlightContext bc)", "modifiers": "@Override @LogMessageDocs({ @LogMessageDoc(message=\"Failed to inject OFMessage {message} onto \" + \"a null switch\", explanation=\"Failed to process a message because the switch \" + \" is no longer connected.\"), @LogMessageDoc(level=\"ERROR\", message=\"Error reinjecting OFMessage on switch {switch}\", explanation=\"An I/O error occured while attempting to \" + \"process an OpenFlow message\", recommendation=LogMessageDoc.CHECK_SWITCH) }) public", "return": "boolean", "signature": "boolean injectOfMessage(IOFSwitch sw, OFMessage msg,\n                                   FloodlightContext bc)", "full_signature": "@Override @LogMessageDocs({ @LogMessageDoc(message=\"Failed to inject OFMessage {message} onto \" + \"a null switch\", explanation=\"Failed to process a message because the switch \" + \" is no longer connected.\"), @LogMessageDoc(level=\"ERROR\", message=\"Error reinjecting OFMessage on switch {switch}\", explanation=\"An I/O error occured while attempting to \" + \"process an OpenFlow message\", recommendation=LogMessageDoc.CHECK_SWITCH) }) public boolean injectOfMessage(IOFSwitch sw, OFMessage msg,\n                                   FloodlightContext bc)", "class_method_signature": "Controller.injectOfMessage(IOFSwitch sw, OFMessage msg,\n                                   FloodlightContext bc)", "testcase": false, "constructor": false}, {"identifier": "terminate", "parameters": "()", "modifiers": "@Override @LogMessageDoc(message=\"Calling System.exit\", explanation=\"The controller is terminating\") public synchronized", "return": "void", "signature": "void terminate()", "full_signature": "@Override @LogMessageDoc(message=\"Calling System.exit\", explanation=\"The controller is terminating\") public synchronized void terminate()", "class_method_signature": "Controller.terminate()", "testcase": false, "constructor": false}, {"identifier": "injectOfMessage", "parameters": "(IOFSwitch sw, OFMessage msg)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean injectOfMessage(IOFSwitch sw, OFMessage msg)", "full_signature": "@Override public boolean injectOfMessage(IOFSwitch sw, OFMessage msg)", "class_method_signature": "Controller.injectOfMessage(IOFSwitch sw, OFMessage msg)", "testcase": false, "constructor": false}, {"identifier": "handleOutgoingMessage", "parameters": "(IOFSwitch sw, OFMessage m,\n                                      FloodlightContext bc)", "modifiers": "@Override public", "return": "void", "signature": "void handleOutgoingMessage(IOFSwitch sw, OFMessage m,\n                                      FloodlightContext bc)", "full_signature": "@Override public void handleOutgoingMessage(IOFSwitch sw, OFMessage m,\n                                      FloodlightContext bc)", "class_method_signature": "Controller.handleOutgoingMessage(IOFSwitch sw, OFMessage m,\n                                      FloodlightContext bc)", "testcase": false, "constructor": false}, {"identifier": "getOFMessageFactory", "parameters": "()", "modifiers": "@Override public", "return": "BasicFactory", "signature": "BasicFactory getOFMessageFactory()", "full_signature": "@Override public BasicFactory getOFMessageFactory()", "class_method_signature": "Controller.getOFMessageFactory()", "testcase": false, "constructor": false}, {"identifier": "getControllerId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getControllerId()", "full_signature": "@Override public String getControllerId()", "class_method_signature": "Controller.getControllerId()", "testcase": false, "constructor": false}, {"identifier": "updateAllInactiveSwitchInfo", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void updateAllInactiveSwitchInfo()", "full_signature": "protected void updateAllInactiveSwitchInfo()", "class_method_signature": "Controller.updateAllInactiveSwitchInfo()", "testcase": false, "constructor": false}, {"identifier": "updateControllerInfo", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void updateControllerInfo()", "full_signature": "protected void updateControllerInfo()", "class_method_signature": "Controller.updateControllerInfo()", "testcase": false, "constructor": false}, {"identifier": "updateActiveSwitchInfo", "parameters": "(IOFSwitch sw)", "modifiers": "protected", "return": "void", "signature": "void updateActiveSwitchInfo(IOFSwitch sw)", "full_signature": "protected void updateActiveSwitchInfo(IOFSwitch sw)", "class_method_signature": "Controller.updateActiveSwitchInfo(IOFSwitch sw)", "testcase": false, "constructor": false}, {"identifier": "updateInactiveSwitchInfo", "parameters": "(IOFSwitch sw)", "modifiers": "protected", "return": "void", "signature": "void updateInactiveSwitchInfo(IOFSwitch sw)", "full_signature": "protected void updateInactiveSwitchInfo(IOFSwitch sw)", "class_method_signature": "Controller.updateInactiveSwitchInfo(IOFSwitch sw)", "testcase": false, "constructor": false}, {"identifier": "updatePortInfo", "parameters": "(IOFSwitch sw, OFPhysicalPort port)", "modifiers": "protected", "return": "void", "signature": "void updatePortInfo(IOFSwitch sw, OFPhysicalPort port)", "full_signature": "protected void updatePortInfo(IOFSwitch sw, OFPhysicalPort port)", "class_method_signature": "Controller.updatePortInfo(IOFSwitch sw, OFPhysicalPort port)", "testcase": false, "constructor": false}, {"identifier": "readSwitchPortStateFromStorage", "parameters": "(OFSwitchImpl sw)", "modifiers": "protected", "return": "void", "signature": "void readSwitchPortStateFromStorage(OFSwitchImpl sw)", "full_signature": "protected void readSwitchPortStateFromStorage(OFSwitchImpl sw)", "class_method_signature": "Controller.readSwitchPortStateFromStorage(OFSwitchImpl sw)", "testcase": false, "constructor": false}, {"identifier": "removePortInfo", "parameters": "(IOFSwitch sw, short portNumber)", "modifiers": "protected", "return": "void", "signature": "void removePortInfo(IOFSwitch sw, short portNumber)", "full_signature": "protected void removePortInfo(IOFSwitch sw, short portNumber)", "class_method_signature": "Controller.removePortInfo(IOFSwitch sw, short portNumber)", "testcase": false, "constructor": false}, {"identifier": "getInitialRole", "parameters": "(Map<String, String> configParams)", "modifiers": "@LogMessageDocs({ @LogMessageDoc(message=\"Controller role set to {role}\", explanation=\"Setting the initial HA role to \"), @LogMessageDoc(level=\"ERROR\", message=\"Invalid current role value: {role}\", explanation=\"An invalid HA role value was read from the \" + \"properties file\", recommendation=LogMessageDoc.CHECK_CONTROLLER) }) protected", "return": "Role", "signature": "Role getInitialRole(Map<String, String> configParams)", "full_signature": "@LogMessageDocs({ @LogMessageDoc(message=\"Controller role set to {role}\", explanation=\"Setting the initial HA role to \"), @LogMessageDoc(level=\"ERROR\", message=\"Invalid current role value: {role}\", explanation=\"An invalid HA role value was read from the \" + \"properties file\", recommendation=LogMessageDoc.CHECK_CONTROLLER) }) protected Role getInitialRole(Map<String, String> configParams)", "class_method_signature": "Controller.getInitialRole(Map<String, String> configParams)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@LogMessageDocs({ @LogMessageDoc(message=\"Listening for switch connections on {address}\", explanation=\"The controller is ready and listening for new\" + \" switch connections\"), @LogMessageDoc(message=\"Storage exception in controller \" + \"updates loop; terminating process\", explanation=ERROR_DATABASE, recommendation=LogMessageDoc.CHECK_CONTROLLER), @LogMessageDoc(level=\"ERROR\", message=\"Exception in controller updates loop\", explanation=\"Failed to dispatch controller event\", recommendation=LogMessageDoc.GENERIC_ACTION) }) public", "return": "void", "signature": "void run()", "full_signature": "@LogMessageDocs({ @LogMessageDoc(message=\"Listening for switch connections on {address}\", explanation=\"The controller is ready and listening for new\" + \" switch connections\"), @LogMessageDoc(message=\"Storage exception in controller \" + \"updates loop; terminating process\", explanation=ERROR_DATABASE, recommendation=LogMessageDoc.CHECK_CONTROLLER), @LogMessageDoc(level=\"ERROR\", message=\"Exception in controller updates loop\", explanation=\"Failed to dispatch controller event\", recommendation=LogMessageDoc.GENERIC_ACTION) }) public void run()", "class_method_signature": "Controller.run()", "testcase": false, "constructor": false}, {"identifier": "createServerBootStrap", "parameters": "()", "modifiers": "private", "return": "ServerBootstrap", "signature": "ServerBootstrap createServerBootStrap()", "full_signature": "private ServerBootstrap createServerBootStrap()", "class_method_signature": "Controller.createServerBootStrap()", "testcase": false, "constructor": false}, {"identifier": "setConfigParams", "parameters": "(Map<String, String> configParams)", "modifiers": "public", "return": "void", "signature": "void setConfigParams(Map<String, String> configParams)", "full_signature": "public void setConfigParams(Map<String, String> configParams)", "class_method_signature": "Controller.setConfigParams(Map<String, String> configParams)", "testcase": false, "constructor": false}, {"identifier": "initVendorMessages", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initVendorMessages()", "full_signature": "private void initVendorMessages()", "class_method_signature": "Controller.initVendorMessages()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Map<String, String> configParams)", "modifiers": "public", "return": "void", "signature": "void init(Map<String, String> configParams)", "full_signature": "public void init(Map<String, String> configParams)", "class_method_signature": "Controller.init(Map<String, String> configParams)", "testcase": false, "constructor": false}, {"identifier": "startupComponents", "parameters": "()", "modifiers": "@LogMessageDoc(message=\"Waiting for storage source\", explanation=\"The system database is not yet ready\", recommendation=\"If this message persists, this indicates \" + \"that the system database has failed to start. \" + LogMessageDoc.CHECK_CONTROLLER) public", "return": "void", "signature": "void startupComponents()", "full_signature": "@LogMessageDoc(message=\"Waiting for storage source\", explanation=\"The system database is not yet ready\", recommendation=\"If this message persists, this indicates \" + \"that the system database has failed to start. \" + LogMessageDoc.CHECK_CONTROLLER) public void startupComponents()", "class_method_signature": "Controller.startupComponents()", "testcase": false, "constructor": false}, {"identifier": "addInfoProvider", "parameters": "(String type, IInfoProvider provider)", "modifiers": "@Override public", "return": "void", "signature": "void addInfoProvider(String type, IInfoProvider provider)", "full_signature": "@Override public void addInfoProvider(String type, IInfoProvider provider)", "class_method_signature": "Controller.addInfoProvider(String type, IInfoProvider provider)", "testcase": false, "constructor": false}, {"identifier": "removeInfoProvider", "parameters": "(String type, IInfoProvider provider)", "modifiers": "@Override public", "return": "void", "signature": "void removeInfoProvider(String type, IInfoProvider provider)", "full_signature": "@Override public void removeInfoProvider(String type, IInfoProvider provider)", "class_method_signature": "Controller.removeInfoProvider(String type, IInfoProvider provider)", "testcase": false, "constructor": false}, {"identifier": "getControllerInfo", "parameters": "(String type)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getControllerInfo(String type)", "full_signature": "public Map<String, Object> getControllerInfo(String type)", "class_method_signature": "Controller.getControllerInfo(String type)", "testcase": false, "constructor": false}, {"identifier": "addHAListener", "parameters": "(IHAListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addHAListener(IHAListener listener)", "full_signature": "@Override public void addHAListener(IHAListener listener)", "class_method_signature": "Controller.addHAListener(IHAListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeHAListener", "parameters": "(IHAListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeHAListener(IHAListener listener)", "full_signature": "@Override public void removeHAListener(IHAListener listener)", "class_method_signature": "Controller.removeHAListener(IHAListener listener)", "testcase": false, "constructor": false}, {"identifier": "handleControllerNodeIPChanges", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "void", "signature": "void handleControllerNodeIPChanges()", "full_signature": "@SuppressWarnings(\"unchecked\") protected void handleControllerNodeIPChanges()", "class_method_signature": "Controller.handleControllerNodeIPChanges()", "testcase": false, "constructor": false}, {"identifier": "getControllerNodeIPs", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getControllerNodeIPs()", "full_signature": "@Override public Map<String, String> getControllerNodeIPs()", "class_method_signature": "Controller.getControllerNodeIPs()", "testcase": false, "constructor": false}, {"identifier": "rowsModified", "parameters": "(String tableName, Set<Object> rowKeys)", "modifiers": "@Override public", "return": "void", "signature": "void rowsModified(String tableName, Set<Object> rowKeys)", "full_signature": "@Override public void rowsModified(String tableName, Set<Object> rowKeys)", "class_method_signature": "Controller.rowsModified(String tableName, Set<Object> rowKeys)", "testcase": false, "constructor": false}, {"identifier": "rowsDeleted", "parameters": "(String tableName, Set<Object> rowKeys)", "modifiers": "@Override public", "return": "void", "signature": "void rowsDeleted(String tableName, Set<Object> rowKeys)", "full_signature": "@Override public void rowsDeleted(String tableName, Set<Object> rowKeys)", "class_method_signature": "Controller.rowsDeleted(String tableName, Set<Object> rowKeys)", "testcase": false, "constructor": false}, {"identifier": "getSystemStartTime", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getSystemStartTime()", "full_signature": "@Override public long getSystemStartTime()", "class_method_signature": "Controller.getSystemStartTime()", "testcase": false, "constructor": false}, {"identifier": "setAlwaysClearFlowsOnSwAdd", "parameters": "(boolean value)", "modifiers": "@Override public", "return": "void", "signature": "void setAlwaysClearFlowsOnSwAdd(boolean value)", "full_signature": "@Override public void setAlwaysClearFlowsOnSwAdd(boolean value)", "class_method_signature": "Controller.setAlwaysClearFlowsOnSwAdd(boolean value)", "testcase": false, "constructor": false}, {"identifier": "getAlwaysClearFlowsOnSwAdd", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getAlwaysClearFlowsOnSwAdd()", "full_signature": "public boolean getAlwaysClearFlowsOnSwAdd()", "class_method_signature": "Controller.getAlwaysClearFlowsOnSwAdd()", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/core/internal/Controller.java"}, "focal_method": {"identifier": "getSwitches", "parameters": "()", "modifiers": "@Override public", "return": "Map<Long, IOFSwitch>", "body": "@Override\n    public Map<Long, IOFSwitch> getSwitches() {\n        return Collections.unmodifiableMap(this.activeSwitches);\n    }", "signature": "Map<Long, IOFSwitch> getSwitches()", "full_signature": "@Override public Map<Long, IOFSwitch> getSwitches()", "class_method_signature": "Controller.getSwitches()", "testcase": false, "constructor": false, "invocations": ["unmodifiableMap"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}