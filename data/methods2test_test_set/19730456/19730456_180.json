{"test_class": {"identifier": "ProofOfWorkRuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProofOfWorkRule rule = new ProofOfWorkRule();", "modifier": "private", "type": "ProofOfWorkRule", "declarator": "rule = new ProofOfWorkRule()", "var_name": "rule"}], "file": "ethereumj-core/src/test/java/org/ethereum/validator/ProofOfWorkRuleTest.java"}, "test_case": {"identifier": "test_3", "parameters": "()", "modifiers": "@Ignore @Test // stress test public", "return": "void", "body": "@Ignore\n    @Test // stress test\n    public void test_3() {\n        int iterCnt = 1_000_000;\n\n        byte[] rlp = Hex.decode(\"f9021af90215a0809870664d9a43cf1827aa515de6374e2fad1bf64290a9f261dd49c525d6a0efa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794f927a40c8b7f6e07c5af7fa2155b4864a4112b13a010c8ec4f62ecea600c616443bcf527d97e5b1c5bb4a9769c496d1bf32636c95da056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421ba1c28ae5e82bf958302472c808455c4e47b99476574682f76312e302e312f6c696e75782f676f312e342e32a0788ac534cb2f6a226a01535e29b11a96602d447aed972463b5cbcc7dd5d633f288e2ff1b6435006517c0c0\");\n        Block b = new Block(rlp);\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < iterCnt; i++)\n            rule.validate(b.getHeader());\n\n        long total = System.currentTimeMillis() - start;\n\n        System.out.println(String.format(\"Time: total = %d ms, per block = %.2f ms\", total, (double) total / iterCnt));\n    }", "signature": "void test_3()", "full_signature": "@Ignore @Test // stress test public void test_3()", "class_method_signature": "ProofOfWorkRuleTest.test_3()", "testcase": true, "constructor": false, "invocations": ["decode", "currentTimeMillis", "validate", "getHeader", "currentTimeMillis", "println", "format"]}, "focal_class": {"identifier": "ProofOfWorkRule", "superclass": "extends BlockHeaderRule", "interfaces": "", "fields": [], "methods": [{"identifier": "validate", "parameters": "(BlockHeader header)", "modifiers": "@Override public", "return": "ValidationResult", "signature": "ValidationResult validate(BlockHeader header)", "full_signature": "@Override public ValidationResult validate(BlockHeader header)", "class_method_signature": "ProofOfWorkRule.validate(BlockHeader header)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/validator/ProofOfWorkRule.java"}, "focal_method": {"identifier": "validate", "parameters": "(BlockHeader header)", "modifiers": "@Override public", "return": "ValidationResult", "body": "@Override\n    public ValidationResult validate(BlockHeader header) {\n        byte[] proof = header.calcPowValue();\n        byte[] boundary = header.getPowBoundary();\n\n        if (!header.isGenesis() && FastByteComparisons.compareTo(proof, 0, 32, boundary, 0, 32) > 0) {\n            return fault(String.format(\"#%d: proofValue > header.getPowBoundary()\", header.getNumber()));\n        }\n\n        return Success;\n    }", "signature": "ValidationResult validate(BlockHeader header)", "full_signature": "@Override public ValidationResult validate(BlockHeader header)", "class_method_signature": "ProofOfWorkRule.validate(BlockHeader header)", "testcase": false, "constructor": false, "invocations": ["calcPowValue", "getPowBoundary", "isGenesis", "compareTo", "fault", "format", "getNumber"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}