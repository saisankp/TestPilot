{"test_class": {"identifier": "BaseFileSystemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n\tpublic", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "core/src/test/java/com/alibaba/alink/common/io/filesystem/BaseFileSystemTest.java"}, "test_case": {"identifier": "of", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void of() {\n\t\tAssert.assertTrue(BaseFileSystem.of(new Params().set(HasIoName.IO_NAME, \"local\")) instanceof LocalFileSystem);\n\t}", "signature": "void of()", "full_signature": "@Test public void of()", "class_method_signature": "BaseFileSystemTest.of()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "of", "set"]}, "focal_class": {"identifier": "BaseFileSystem", "superclass": "extends FileSystem", "interfaces": "implements WithParams<T>, Serializable", "fields": [{"original_string": "protected Params params;", "modifier": "protected", "type": "Params", "declarator": "params", "var_name": "params"}], "methods": [{"identifier": "BaseFileSystem", "parameters": "(Params params)", "modifiers": "protected", "return": "", "signature": " BaseFileSystem(Params params)", "full_signature": "protected  BaseFileSystem(Params params)", "class_method_signature": "BaseFileSystem.BaseFileSystem(Params params)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(Params params)", "modifiers": "public static", "return": "BaseFileSystem", "signature": "BaseFileSystem of(Params params)", "full_signature": "public static BaseFileSystem of(Params params)", "class_method_signature": "BaseFileSystem.of(Params params)", "testcase": false, "constructor": false}, {"identifier": "isFileSystem", "parameters": "(Params params)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileSystem(Params params)", "full_signature": "public static boolean isFileSystem(Params params)", "class_method_signature": "BaseFileSystem.isFileSystem(Params params)", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "()", "modifiers": "@Override public", "return": "Params", "signature": "Params getParams()", "full_signature": "@Override public Params getParams()", "class_method_signature": "BaseFileSystem.getParams()", "testcase": false, "constructor": false}, {"identifier": "getFileStatus", "parameters": "(String f)", "modifiers": "public", "return": "FileStatus", "signature": "FileStatus getFileStatus(String f)", "full_signature": "public FileStatus getFileStatus(String f)", "class_method_signature": "BaseFileSystem.getFileStatus(String f)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(String f, int bufferSize)", "modifiers": "public", "return": "FSDataInputStream", "signature": "FSDataInputStream open(String f, int bufferSize)", "full_signature": "public FSDataInputStream open(String f, int bufferSize)", "class_method_signature": "BaseFileSystem.open(String f, int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(String f)", "modifiers": "public", "return": "FSDataInputStream", "signature": "FSDataInputStream open(String f)", "full_signature": "public FSDataInputStream open(String f)", "class_method_signature": "BaseFileSystem.open(String f)", "testcase": false, "constructor": false}, {"identifier": "listStatus", "parameters": "(String f)", "modifiers": "public", "return": "FileStatus[]", "signature": "FileStatus[] listStatus(String f)", "full_signature": "public FileStatus[] listStatus(String f)", "class_method_signature": "BaseFileSystem.listStatus(String f)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String f)", "modifiers": "public", "return": "boolean", "signature": "boolean exists(String f)", "full_signature": "public boolean exists(String f)", "class_method_signature": "BaseFileSystem.exists(String f)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String f, boolean recursive)", "modifiers": "public", "return": "boolean", "signature": "boolean delete(String f, boolean recursive)", "full_signature": "public boolean delete(String f, boolean recursive)", "class_method_signature": "BaseFileSystem.delete(String f, boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "mkdirs", "parameters": "(String f)", "modifiers": "public", "return": "boolean", "signature": "boolean mkdirs(String f)", "full_signature": "public boolean mkdirs(String f)", "class_method_signature": "BaseFileSystem.mkdirs(String f)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(\n\t\tString f,\n\t\tboolean overwrite,\n\t\tint bufferSize,\n\t\tshort replication,\n\t\tlong blockSize)", "modifiers": "@Deprecated public", "return": "FSDataOutputStream", "signature": "FSDataOutputStream create(\n\t\tString f,\n\t\tboolean overwrite,\n\t\tint bufferSize,\n\t\tshort replication,\n\t\tlong blockSize)", "full_signature": "@Deprecated public FSDataOutputStream create(\n\t\tString f,\n\t\tboolean overwrite,\n\t\tint bufferSize,\n\t\tshort replication,\n\t\tlong blockSize)", "class_method_signature": "BaseFileSystem.create(\n\t\tString f,\n\t\tboolean overwrite,\n\t\tint bufferSize,\n\t\tshort replication,\n\t\tlong blockSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String f, boolean overwrite)", "modifiers": "@Deprecated public", "return": "FSDataOutputStream", "signature": "FSDataOutputStream create(String f, boolean overwrite)", "full_signature": "@Deprecated public FSDataOutputStream create(String f, boolean overwrite)", "class_method_signature": "BaseFileSystem.create(String f, boolean overwrite)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String f, WriteMode overwriteMode)", "modifiers": "public", "return": "FSDataOutputStream", "signature": "FSDataOutputStream create(String f, WriteMode overwriteMode)", "full_signature": "public FSDataOutputStream create(String f, WriteMode overwriteMode)", "class_method_signature": "BaseFileSystem.create(String f, WriteMode overwriteMode)", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(String src, String dst)", "modifiers": "public", "return": "boolean", "signature": "boolean rename(String src, String dst)", "full_signature": "public boolean rename(String src, String dst)", "class_method_signature": "BaseFileSystem.rename(String src, String dst)", "testcase": false, "constructor": false}, {"identifier": "initOutPathLocalFS", "parameters": "(String outPath, WriteMode writeMode, boolean createDirectory)", "modifiers": "public", "return": "boolean", "signature": "boolean initOutPathLocalFS(String outPath, WriteMode writeMode, boolean createDirectory)", "full_signature": "public boolean initOutPathLocalFS(String outPath, WriteMode writeMode, boolean createDirectory)", "class_method_signature": "BaseFileSystem.initOutPathLocalFS(String outPath, WriteMode writeMode, boolean createDirectory)", "testcase": false, "constructor": false}, {"identifier": "initOutPathDistFS", "parameters": "(String outPath, WriteMode writeMode, boolean createDirectory)", "modifiers": "public", "return": "boolean", "signature": "boolean initOutPathDistFS(String outPath, WriteMode writeMode, boolean createDirectory)", "full_signature": "public boolean initOutPathDistFS(String outPath, WriteMode writeMode, boolean createDirectory)", "class_method_signature": "BaseFileSystem.initOutPathDistFS(String outPath, WriteMode writeMode, boolean createDirectory)", "testcase": false, "constructor": false}, {"identifier": "listFiles", "parameters": "(String f)", "modifiers": "public", "return": "List<String>", "signature": "List<String> listFiles(String f)", "full_signature": "public List<String> listFiles(String f)", "class_method_signature": "BaseFileSystem.listFiles(String f)", "testcase": false, "constructor": false}, {"identifier": "listDirectories", "parameters": "(String f)", "modifiers": "public", "return": "List<String>", "signature": "List<String> listDirectories(String f)", "full_signature": "public List<String> listDirectories(String f)", "class_method_signature": "BaseFileSystem.listDirectories(String f)", "testcase": false, "constructor": false}, {"identifier": "listFiles", "parameters": "(Path f)", "modifiers": "public", "return": "List<Path>", "signature": "List<Path> listFiles(Path f)", "full_signature": "public List<Path> listFiles(Path f)", "class_method_signature": "BaseFileSystem.listFiles(Path f)", "testcase": false, "constructor": false}, {"identifier": "listDirectories", "parameters": "(Path f)", "modifiers": "public", "return": "List<Path>", "signature": "List<Path> listDirectories(Path f)", "full_signature": "public List<Path> listDirectories(Path f)", "class_method_signature": "BaseFileSystem.listDirectories(Path f)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getSchema()", "full_signature": "public abstract String getSchema()", "class_method_signature": "BaseFileSystem.getSchema()", "testcase": false, "constructor": false}, {"identifier": "getWorkingDirectory", "parameters": "()", "modifiers": "@Override public", "return": "Path", "signature": "Path getWorkingDirectory()", "full_signature": "@Override public Path getWorkingDirectory()", "class_method_signature": "BaseFileSystem.getWorkingDirectory()", "testcase": false, "constructor": false}, {"identifier": "getHomeDirectory", "parameters": "()", "modifiers": "@Override public", "return": "Path", "signature": "Path getHomeDirectory()", "full_signature": "@Override public Path getHomeDirectory()", "class_method_signature": "BaseFileSystem.getHomeDirectory()", "testcase": false, "constructor": false}, {"identifier": "getUri", "parameters": "()", "modifiers": "@Override public", "return": "URI", "signature": "URI getUri()", "full_signature": "@Override public URI getUri()", "class_method_signature": "BaseFileSystem.getUri()", "testcase": false, "constructor": false}, {"identifier": "getFileStatus", "parameters": "(Path f)", "modifiers": "@Override public", "return": "FileStatus", "signature": "FileStatus getFileStatus(Path f)", "full_signature": "@Override public FileStatus getFileStatus(Path f)", "class_method_signature": "BaseFileSystem.getFileStatus(Path f)", "testcase": false, "constructor": false}, {"identifier": "getFileBlockLocations", "parameters": "(FileStatus file, long start, long len)", "modifiers": "@Override public", "return": "BlockLocation[]", "signature": "BlockLocation[] getFileBlockLocations(FileStatus file, long start, long len)", "full_signature": "@Override public BlockLocation[] getFileBlockLocations(FileStatus file, long start, long len)", "class_method_signature": "BaseFileSystem.getFileBlockLocations(FileStatus file, long start, long len)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(Path f, int bufferSize)", "modifiers": "@Override public", "return": "FSDataInputStream", "signature": "FSDataInputStream open(Path f, int bufferSize)", "full_signature": "@Override public FSDataInputStream open(Path f, int bufferSize)", "class_method_signature": "BaseFileSystem.open(Path f, int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(Path f)", "modifiers": "@Override public", "return": "FSDataInputStream", "signature": "FSDataInputStream open(Path f)", "full_signature": "@Override public FSDataInputStream open(Path f)", "class_method_signature": "BaseFileSystem.open(Path f)", "testcase": false, "constructor": false}, {"identifier": "listStatus", "parameters": "(Path f)", "modifiers": "@Override public", "return": "FileStatus[]", "signature": "FileStatus[] listStatus(Path f)", "full_signature": "@Override public FileStatus[] listStatus(Path f)", "class_method_signature": "BaseFileSystem.listStatus(Path f)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Path f, boolean recursive)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean delete(Path f, boolean recursive)", "full_signature": "@Override public boolean delete(Path f, boolean recursive)", "class_method_signature": "BaseFileSystem.delete(Path f, boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "mkdirs", "parameters": "(Path f)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean mkdirs(Path f)", "full_signature": "@Override public boolean mkdirs(Path f)", "class_method_signature": "BaseFileSystem.mkdirs(Path f)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Path f, WriteMode overwriteMode)", "modifiers": "@Override public", "return": "FSDataOutputStream", "signature": "FSDataOutputStream create(Path f, WriteMode overwriteMode)", "full_signature": "@Override public FSDataOutputStream create(Path f, WriteMode overwriteMode)", "class_method_signature": "BaseFileSystem.create(Path f, WriteMode overwriteMode)", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(Path src, Path dst)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean rename(Path src, Path dst)", "full_signature": "@Override public boolean rename(Path src, Path dst)", "class_method_signature": "BaseFileSystem.rename(Path src, Path dst)", "testcase": false, "constructor": false}, {"identifier": "isDistributedFS", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDistributedFS()", "full_signature": "@Override public boolean isDistributedFS()", "class_method_signature": "BaseFileSystem.isDistributedFS()", "testcase": false, "constructor": false}, {"identifier": "getKind", "parameters": "()", "modifiers": "@Override public", "return": "FileSystemKind", "signature": "FileSystemKind getKind()", "full_signature": "@Override public FileSystemKind getKind()", "class_method_signature": "BaseFileSystem.getKind()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "()", "modifiers": "protected", "return": "FileSystem", "signature": "FileSystem load()", "full_signature": "protected FileSystem load()", "class_method_signature": "BaseFileSystem.load()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Path path)", "modifiers": "protected abstract", "return": "FileSystem", "signature": "FileSystem load(Path path)", "full_signature": "protected abstract FileSystem load(Path path)", "class_method_signature": "BaseFileSystem.load(Path path)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/io/filesystem/BaseFileSystem.java"}, "focal_method": {"identifier": "of", "parameters": "(Params params)", "modifiers": "public static", "return": "BaseFileSystem", "body": "public static BaseFileSystem of(Params params) {\n\t\tif (BaseFileSystem.isFileSystem(params)) {\n\t\t\ttry {\n\t\t\t\treturn AnnotationUtils.createFileSystem(params.get(HasIoName.IO_NAME), params);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"NOT a FileSystem parameter.\");\n\t\t}\n\t}", "signature": "BaseFileSystem of(Params params)", "full_signature": "public static BaseFileSystem of(Params params)", "class_method_signature": "BaseFileSystem.of(Params params)", "testcase": false, "constructor": false, "invocations": ["isFileSystem", "createFileSystem", "get"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}