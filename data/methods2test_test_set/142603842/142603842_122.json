{"test_class": {"identifier": "RoutingPlanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Distance distance = Distance.ofMillis(1);", "modifier": "private final", "type": "Distance", "declarator": "distance = Distance.ofMillis(1)", "var_name": "distance"}, {"original_string": "private final Vehicle vehicle = VehicleFactory.testVehicle(1);", "modifier": "private final", "type": "Vehicle", "declarator": "vehicle = VehicleFactory.testVehicle(1)", "var_name": "vehicle"}, {"original_string": "private final List<Vehicle> vehicles = singletonList(vehicle);", "modifier": "private final", "type": "List<Vehicle>", "declarator": "vehicles = singletonList(vehicle)", "var_name": "vehicles"}, {"original_string": "private final Location depot = new Location(1, Coordinates.valueOf(5, 5));", "modifier": "private final", "type": "Location", "declarator": "depot = new Location(1, Coordinates.valueOf(5, 5))", "var_name": "depot"}, {"original_string": "private final Location visit = new Location(2, Coordinates.valueOf(3, 3));", "modifier": "private final", "type": "Location", "declarator": "visit = new Location(2, Coordinates.valueOf(3, 3))", "var_name": "visit"}, {"original_string": "private final RouteWithTrack emptyRoute = new RouteWithTrack(new Route(vehicle, depot, emptyList()), emptyList());", "modifier": "private final", "type": "RouteWithTrack", "declarator": "emptyRoute = new RouteWithTrack(new Route(vehicle, depot, emptyList()), emptyList())", "var_name": "emptyRoute"}, {"original_string": "private final List<List<Coordinates>> nonEmptyTrack = singletonList(singletonList(Coordinates.valueOf(5, 5)));", "modifier": "private final", "type": "List<List<Coordinates>>", "declarator": "nonEmptyTrack = singletonList(singletonList(Coordinates.valueOf(5, 5)))", "var_name": "nonEmptyTrack"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/domain/RoutingPlanTest.java"}, "test_case": {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void isEmpty() {\n        assertThat(RoutingPlan.empty().isEmpty()).isTrue();\n        assertThat(new RoutingPlan(Distance.ZERO, emptyList(), depot, emptyList(), emptyList()).isEmpty()).isFalse();\n        assertThat(new RoutingPlan(Distance.ZERO, vehicles, null, emptyList(), emptyList()).isEmpty()).isFalse();\n        assertThat(new RoutingPlan(Distance.ZERO, vehicles, depot, emptyList(), singletonList(emptyRoute)).isEmpty())\n                .isFalse();\n    }", "signature": "void isEmpty()", "full_signature": "@Test void isEmpty()", "class_method_signature": "RoutingPlanTest.isEmpty()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "isEmpty", "empty", "isFalse", "assertThat", "isEmpty", "emptyList", "emptyList", "emptyList", "isFalse", "assertThat", "isEmpty", "emptyList", "emptyList", "isFalse", "assertThat", "isEmpty", "emptyList", "singletonList"]}, "focal_class": {"identifier": "RoutingPlan", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RoutingPlan.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RoutingPlan.class)", "var_name": "logger"}, {"original_string": "private final Distance distance;", "modifier": "private final", "type": "Distance", "declarator": "distance", "var_name": "distance"}, {"original_string": "private final List<Vehicle> vehicles;", "modifier": "private final", "type": "List<Vehicle>", "declarator": "vehicles", "var_name": "vehicles"}, {"original_string": "private final Location depot;", "modifier": "private final", "type": "Location", "declarator": "depot", "var_name": "depot"}, {"original_string": "private final List<Location> visits;", "modifier": "private final", "type": "List<Location>", "declarator": "visits", "var_name": "visits"}, {"original_string": "private final List<RouteWithTrack> routes;", "modifier": "private final", "type": "List<RouteWithTrack>", "declarator": "routes", "var_name": "routes"}], "methods": [{"identifier": "RoutingPlan", "parameters": "(\n            Distance distance,\n            List<Vehicle> vehicles,\n            Location depot,\n            List<Location> visits,\n            List<RouteWithTrack> routes)", "modifiers": "public", "return": "", "signature": " RoutingPlan(\n            Distance distance,\n            List<Vehicle> vehicles,\n            Location depot,\n            List<Location> visits,\n            List<RouteWithTrack> routes)", "full_signature": "public  RoutingPlan(\n            Distance distance,\n            List<Vehicle> vehicles,\n            Location depot,\n            List<Location> visits,\n            List<RouteWithTrack> routes)", "class_method_signature": "RoutingPlan.RoutingPlan(\n            Distance distance,\n            List<Vehicle> vehicles,\n            Location depot,\n            List<Location> visits,\n            List<RouteWithTrack> routes)", "testcase": false, "constructor": true}, {"identifier": "haveDifferentVehicles", "parameters": "(List<Vehicle> vehicles, List<RouteWithTrack> routes)", "modifiers": "private static", "return": "boolean", "signature": "boolean haveDifferentVehicles(List<Vehicle> vehicles, List<RouteWithTrack> routes)", "full_signature": "private static boolean haveDifferentVehicles(List<Vehicle> vehicles, List<RouteWithTrack> routes)", "class_method_signature": "RoutingPlan.haveDifferentVehicles(List<Vehicle> vehicles, List<RouteWithTrack> routes)", "testcase": false, "constructor": false}, {"identifier": "describeVehiclesRoutesInconsistency", "parameters": "(\n            String cause,\n            List<Vehicle> vehicles,\n            List<? extends Route> routes)", "modifiers": "private static", "return": "String", "signature": "String describeVehiclesRoutesInconsistency(\n            String cause,\n            List<Vehicle> vehicles,\n            List<? extends Route> routes)", "full_signature": "private static String describeVehiclesRoutesInconsistency(\n            String cause,\n            List<Vehicle> vehicles,\n            List<? extends Route> routes)", "class_method_signature": "RoutingPlan.describeVehiclesRoutesInconsistency(\n            String cause,\n            List<Vehicle> vehicles,\n            List<? extends Route> routes)", "testcase": false, "constructor": false}, {"identifier": "empty", "parameters": "()", "modifiers": "public static", "return": "RoutingPlan", "signature": "RoutingPlan empty()", "full_signature": "public static RoutingPlan empty()", "class_method_signature": "RoutingPlan.empty()", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "()", "modifiers": "public", "return": "Distance", "signature": "Distance distance()", "full_signature": "public Distance distance()", "class_method_signature": "RoutingPlan.distance()", "testcase": false, "constructor": false}, {"identifier": "vehicles", "parameters": "()", "modifiers": "public", "return": "List<Vehicle>", "signature": "List<Vehicle> vehicles()", "full_signature": "public List<Vehicle> vehicles()", "class_method_signature": "RoutingPlan.vehicles()", "testcase": false, "constructor": false}, {"identifier": "routes", "parameters": "()", "modifiers": "public", "return": "List<RouteWithTrack>", "signature": "List<RouteWithTrack> routes()", "full_signature": "public List<RouteWithTrack> routes()", "class_method_signature": "RoutingPlan.routes()", "testcase": false, "constructor": false}, {"identifier": "visits", "parameters": "()", "modifiers": "public", "return": "List<Location>", "signature": "List<Location> visits()", "full_signature": "public List<Location> visits()", "class_method_signature": "RoutingPlan.visits()", "testcase": false, "constructor": false}, {"identifier": "depot", "parameters": "()", "modifiers": "public", "return": "Optional<Location>", "signature": "Optional<Location> depot()", "full_signature": "public Optional<Location> depot()", "class_method_signature": "RoutingPlan.depot()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "RoutingPlan.isEmpty()", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/domain/RoutingPlan.java"}, "focal_method": {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isEmpty() {\n        // No need to check routes. No depot => no routes.\n        return depot == null && vehicles.isEmpty();\n    }", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "RoutingPlan.isEmpty()", "testcase": false, "constructor": false, "invocations": ["isEmpty"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}