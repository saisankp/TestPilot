{"test_class": {"identifier": "ObservablePublishTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/observable/ObservablePublishTest.java"}, "test_case": {"identifier": "preNextConnect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void preNextConnect() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n\n            final ConnectableObservable<Integer> co = Observable.<Integer>empty().publish();\n\n            co.connect();\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    co.test();\n                }\n            };\n\n            TestHelper.race(r1, r1);\n        }\n    }", "signature": "void preNextConnect()", "full_signature": "@Test public void preNextConnect()", "class_method_signature": "ObservablePublishTest.preNextConnect()", "testcase": true, "constructor": false, "invocations": ["publish", "empty", "connect", "test", "race"]}, "focal_class": {"identifier": "ObservablePublish", "superclass": "extends ConnectableObservable<T>", "interfaces": "implements HasUpstreamObservableSource<T>", "fields": [{"original_string": "final ObservableSource<T> source;", "modifier": "final", "type": "ObservableSource<T>", "declarator": "source", "var_name": "source"}, {"original_string": "final AtomicReference<PublishObserver<T>> current;", "modifier": "final", "type": "AtomicReference<PublishObserver<T>>", "declarator": "current", "var_name": "current"}, {"original_string": "final ObservableSource<T> onSubscribe;", "modifier": "final", "type": "ObservableSource<T>", "declarator": "onSubscribe", "var_name": "onSubscribe"}], "methods": [{"identifier": "create", "parameters": "(ObservableSource<T> source)", "modifiers": "public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> create(ObservableSource<T> source)", "full_signature": "public static ConnectableObservable<T> create(ObservableSource<T> source)", "class_method_signature": "ObservablePublish.create(ObservableSource<T> source)", "testcase": false, "constructor": false}, {"identifier": "ObservablePublish", "parameters": "(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                              final AtomicReference<PublishObserver<T>> current)", "modifiers": "private", "return": "", "signature": " ObservablePublish(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                              final AtomicReference<PublishObserver<T>> current)", "full_signature": "private  ObservablePublish(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                              final AtomicReference<PublishObserver<T>> current)", "class_method_signature": "ObservablePublish.ObservablePublish(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                              final AtomicReference<PublishObserver<T>> current)", "testcase": false, "constructor": true}, {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "ObservableSource<T>", "signature": "ObservableSource<T> source()", "full_signature": "@Override public ObservableSource<T> source()", "class_method_signature": "ObservablePublish.source()", "testcase": false, "constructor": false}, {"identifier": "subscribeActual", "parameters": "(Observer<? super T> observer)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Observer<? super T> observer)", "full_signature": "@Override protected void subscribeActual(Observer<? super T> observer)", "class_method_signature": "ObservablePublish.subscribeActual(Observer<? super T> observer)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(Consumer<? super Disposable> connection)", "modifiers": "@Override public", "return": "void", "signature": "void connect(Consumer<? super Disposable> connection)", "full_signature": "@Override public void connect(Consumer<? super Disposable> connection)", "class_method_signature": "ObservablePublish.connect(Consumer<? super Disposable> connection)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservablePublish.java"}, "focal_method": {"identifier": "connect", "parameters": "(Consumer<? super Disposable> connection)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void connect(Consumer<? super Disposable> connection) {\n        boolean doConnect;\n        PublishObserver<T> ps;\n        // we loop because concurrent connect/disconnect and termination may change the state\n        for (;;) {\n            // retrieve the current subscriber-to-source instance\n            ps = current.get();\n            // if there is none yet or the current has been disposed\n            if (ps == null || ps.isDisposed()) {\n                // create a new subscriber-to-source\n                PublishObserver<T> u = new PublishObserver<T>(current);\n                // try setting it as the current subscriber-to-source\n                if (!current.compareAndSet(ps, u)) {\n                    // did not work, perhaps a new subscriber arrived\n                    // and created a new subscriber-to-source as well, retry\n                    continue;\n                }\n                ps = u;\n            }\n            // if connect() was called concurrently, only one of them should actually\n            // connect to the source\n            doConnect = !ps.shouldConnect.get() && ps.shouldConnect.compareAndSet(false, true);\n            break; // NOPMD\n        }\n        /*\n         * Notify the callback that we have a (new) connection which it can dispose\n         * but since ps is unique to a connection, multiple calls to connect() will return the\n         * same Disposable and even if there was a connect-disconnect-connect pair, the older\n         * references won't disconnect the newer connection.\n         * Synchronous source consumers have the opportunity to disconnect via dispose on the\n         * Disposable as subscribe() may never return in its own.\n         *\n         * Note however, that asynchronously disconnecting a running source might leave\n         * child observers without any terminal event; PublishSubject does not have this\n         * issue because the dispose() was always triggered by the child observers\n         * themselves.\n         */\n        try {\n            connection.accept(ps);\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            throw ExceptionHelper.wrapOrThrow(ex);\n        }\n        if (doConnect) {\n            source.subscribe(ps);\n        }\n    }", "signature": "void connect(Consumer<? super Disposable> connection)", "full_signature": "@Override public void connect(Consumer<? super Disposable> connection)", "class_method_signature": "ObservablePublish.connect(Consumer<? super Disposable> connection)", "testcase": false, "constructor": false, "invocations": ["get", "isDisposed", "compareAndSet", "get", "compareAndSet", "accept", "throwIfFatal", "wrapOrThrow", "subscribe"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}