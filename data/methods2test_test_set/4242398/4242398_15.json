{"test_class": {"identifier": "TransactionScopeKeyLockerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TransactionScopeKeyLocker keyLocker;", "modifier": "", "type": "TransactionScopeKeyLocker", "declarator": "keyLocker", "var_name": "keyLocker"}, {"original_string": "long transactionID;", "modifier": "", "type": "long", "declarator": "transactionID", "var_name": "transactionID"}], "file": "core/src/test/java/com/turbospaces/spaces/tx/TransactionScopeKeyLockerTest.java"}, "test_case": {"identifier": "cantGetLockForTheSameKeyFromParallelTransaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cantGetLockForTheSameKeyFromParallelTransaction() {\n        keyLocker.writeLock( \"abc\", transactionID, 0, true );\n        assertThat( keyLocker.writeLock( \"abc\", transactionID + 1, 1, true ), is( nullValue() ) );\n        assertThat( keyLocker.writeLock( \"abc\", transactionID + 2, 0, true ), is( nullValue() ) );\n    }", "signature": "void cantGetLockForTheSameKeyFromParallelTransaction()", "full_signature": "@Test public void cantGetLockForTheSameKeyFromParallelTransaction()", "class_method_signature": "TransactionScopeKeyLockerTest.cantGetLockForTheSameKeyFromParallelTransaction()", "testcase": true, "constructor": false, "invocations": ["writeLock", "assertThat", "writeLock", "is", "nullValue", "assertThat", "writeLock", "is", "nullValue"]}, "focal_class": {"identifier": "TransactionScopeKeyLocker", "superclass": "", "interfaces": "implements KeyLocker", "fields": [{"original_string": "private final Map<Object, LockMonitor> writeLocks = new HashMap<Object, LockMonitor>();", "modifier": "private final", "type": "Map<Object, LockMonitor>", "declarator": "writeLocks = new HashMap<Object, LockMonitor>()", "var_name": "writeLocks"}], "methods": [{"identifier": "writeLock", "parameters": "(final Object key,\n                                 final long transactionId,\n                                 final long timeout,\n                                 final boolean strict)", "modifiers": "@Override public", "return": "LockMonitor", "signature": "LockMonitor writeLock(final Object key,\n                                 final long transactionId,\n                                 final long timeout,\n                                 final boolean strict)", "full_signature": "@Override public LockMonitor writeLock(final Object key,\n                                 final long transactionId,\n                                 final long timeout,\n                                 final boolean strict)", "class_method_signature": "TransactionScopeKeyLocker.writeLock(final Object key,\n                                 final long transactionId,\n                                 final long timeout,\n                                 final boolean strict)", "testcase": false, "constructor": false}, {"identifier": "writeUnlock", "parameters": "(final EntryKeyLockQuard keyGuard,\n                            final long transactionId)", "modifiers": "@Override public", "return": "void", "signature": "void writeUnlock(final EntryKeyLockQuard keyGuard,\n                            final long transactionId)", "full_signature": "@Override public void writeUnlock(final EntryKeyLockQuard keyGuard,\n                            final long transactionId)", "class_method_signature": "TransactionScopeKeyLocker.writeUnlock(final EntryKeyLockQuard keyGuard,\n                            final long transactionId)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/turbospaces/spaces/tx/TransactionScopeKeyLocker.java"}, "focal_method": {"identifier": "writeLock", "parameters": "(final Object key,\n                                 final long transactionId,\n                                 final long timeout,\n                                 final boolean strict)", "modifiers": "@Override public", "return": "LockMonitor", "body": "@Override\n    public LockMonitor writeLock(final Object key,\n                                 final long transactionId,\n                                 final long timeout,\n                                 final boolean strict) {\n        final Map<Object, LockMonitor> locks = writeLocks;\n        LockMonitor monitor = null;\n\n        synchronized ( locks ) {\n            monitor = locks.get( key );\n            if ( monitor == null ) {\n                monitor = new LockMonitor( new TransactionModificationLock( strict ), key );\n                locks.put( key, monitor );\n            }\n            monitor.acquires++;\n        }\n\n        try {\n            boolean locked = timeout == Long.MAX_VALUE ? monitor.lock.lock( transactionId ) : monitor.lock.tryLock(\n                    transactionId,\n                    timeout,\n                    TimeUnit.MILLISECONDS );\n            return locked ? monitor : null;\n        }\n        catch ( InterruptedException e ) {\n            Thread.currentThread().interrupt();\n            throw new SpaceException( Thread.currentThread().toString() + \" has been interrupted\", e );\n        }\n    }", "signature": "LockMonitor writeLock(final Object key,\n                                 final long transactionId,\n                                 final long timeout,\n                                 final boolean strict)", "full_signature": "@Override public LockMonitor writeLock(final Object key,\n                                 final long transactionId,\n                                 final long timeout,\n                                 final boolean strict)", "class_method_signature": "TransactionScopeKeyLocker.writeLock(final Object key,\n                                 final long transactionId,\n                                 final long timeout,\n                                 final boolean strict)", "testcase": false, "constructor": false, "invocations": ["get", "put", "lock", "tryLock", "interrupt", "currentThread", "toString", "currentThread"]}, "repository": {"repo_id": 4242398, "url": "https://github.com/turbospaces/turbospaces", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 915, "license": "licensed"}}