{"test_class": {"identifier": "DoubleOperationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DoubleOperations ops = new DoubleOperations();", "modifier": "private", "type": "DoubleOperations", "declarator": "ops = new DoubleOperations()", "var_name": "ops"}], "file": "modeshape-common/src/test/java/org/modeshape/common/math/DoubleOperationsTest.java"}, "test_case": {"identifier": "shouldKeepSignificantFigures", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldKeepSignificantFigures() {\n        assertEquals(12.012d, ops.keepSignificantFigures(12.0123456, 5), 0.0001d);\n        assertEquals(12.013d, ops.keepSignificantFigures(12.0125456, 5), 0.0001d);\n        assertEquals(12.01d, ops.keepSignificantFigures(12.0123456, 4), 0.0001d);\n        assertEquals(12.0d, ops.keepSignificantFigures(12.0123456, 3), 0.0001d);\n        assertEquals(12.0d, ops.keepSignificantFigures(12.0123456, 2), 0.0001d);\n        assertEquals(10.0d, ops.keepSignificantFigures(12.0123456, 1), 0.0001d);\n        assertEquals(1300.0d, ops.keepSignificantFigures(1320.0d, 2), 0.001d);\n    }", "signature": "void shouldKeepSignificantFigures()", "full_signature": "@Test public void shouldKeepSignificantFigures()", "class_method_signature": "DoubleOperationsTest.shouldKeepSignificantFigures()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "keepSignificantFigures", "assertEquals", "keepSignificantFigures", "assertEquals", "keepSignificantFigures", "assertEquals", "keepSignificantFigures", "assertEquals", "keepSignificantFigures", "assertEquals", "keepSignificantFigures", "assertEquals", "keepSignificantFigures"]}, "focal_class": {"identifier": "DoubleOperations", "superclass": "", "interfaces": "implements MathOperations<Double>, Comparator<Double>", "fields": [], "methods": [{"identifier": "getOperandClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<Double>", "signature": "Class<Double> getOperandClass()", "full_signature": "@Override public Class<Double> getOperandClass()", "class_method_signature": "DoubleOperations.getOperandClass()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( Double value1,\n                       Double value2 )", "modifiers": "@Override public", "return": "Double", "signature": "Double add( Double value1,\n                       Double value2 )", "full_signature": "@Override public Double add( Double value1,\n                       Double value2 )", "class_method_signature": "DoubleOperations.add( Double value1,\n                       Double value2 )", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "( Double value1,\n                            Double value2 )", "modifiers": "@Override public", "return": "Double", "signature": "Double subtract( Double value1,\n                            Double value2 )", "full_signature": "@Override public Double subtract( Double value1,\n                            Double value2 )", "class_method_signature": "DoubleOperations.subtract( Double value1,\n                            Double value2 )", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "( Double value1,\n                            Double value2 )", "modifiers": "@Override public", "return": "Double", "signature": "Double multiply( Double value1,\n                            Double value2 )", "full_signature": "@Override public Double multiply( Double value1,\n                            Double value2 )", "class_method_signature": "DoubleOperations.multiply( Double value1,\n                            Double value2 )", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "( Double value1,\n                          Double value2 )", "modifiers": "@Override public", "return": "double", "signature": "double divide( Double value1,\n                          Double value2 )", "full_signature": "@Override public double divide( Double value1,\n                          Double value2 )", "class_method_signature": "DoubleOperations.divide( Double value1,\n                          Double value2 )", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "( Double value )", "modifiers": "@Override public", "return": "Double", "signature": "Double negate( Double value )", "full_signature": "@Override public Double negate( Double value )", "class_method_signature": "DoubleOperations.negate( Double value )", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "( Double value )", "modifiers": "@Override public", "return": "Double", "signature": "Double increment( Double value )", "full_signature": "@Override public Double increment( Double value )", "class_method_signature": "DoubleOperations.increment( Double value )", "testcase": false, "constructor": false}, {"identifier": "maximum", "parameters": "( Double value1,\n                           Double value2 )", "modifiers": "@Override public", "return": "Double", "signature": "Double maximum( Double value1,\n                           Double value2 )", "full_signature": "@Override public Double maximum( Double value1,\n                           Double value2 )", "class_method_signature": "DoubleOperations.maximum( Double value1,\n                           Double value2 )", "testcase": false, "constructor": false}, {"identifier": "minimum", "parameters": "( Double value1,\n                           Double value2 )", "modifiers": "@Override public", "return": "Double", "signature": "Double minimum( Double value1,\n                           Double value2 )", "full_signature": "@Override public Double minimum( Double value1,\n                           Double value2 )", "class_method_signature": "DoubleOperations.minimum( Double value1,\n                           Double value2 )", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "( Double value1,\n                        Double value2 )", "modifiers": "@Override public", "return": "int", "signature": "int compare( Double value1,\n                        Double value2 )", "full_signature": "@Override public int compare( Double value1,\n                        Double value2 )", "class_method_signature": "DoubleOperations.compare( Double value1,\n                        Double value2 )", "testcase": false, "constructor": false}, {"identifier": "asBigDecimal", "parameters": "( Double value )", "modifiers": "@Override public", "return": "BigDecimal", "signature": "BigDecimal asBigDecimal( Double value )", "full_signature": "@Override public BigDecimal asBigDecimal( Double value )", "class_method_signature": "DoubleOperations.asBigDecimal( Double value )", "testcase": false, "constructor": false}, {"identifier": "fromBigDecimal", "parameters": "( BigDecimal value )", "modifiers": "@Override public", "return": "Double", "signature": "Double fromBigDecimal( BigDecimal value )", "full_signature": "@Override public Double fromBigDecimal( BigDecimal value )", "class_method_signature": "DoubleOperations.fromBigDecimal( BigDecimal value )", "testcase": false, "constructor": false}, {"identifier": "createZeroValue", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double createZeroValue()", "full_signature": "@Override public Double createZeroValue()", "class_method_signature": "DoubleOperations.createZeroValue()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( int value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( int value )", "full_signature": "@Override public Double create( int value )", "class_method_signature": "DoubleOperations.create( int value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( long value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( long value )", "full_signature": "@Override public Double create( long value )", "class_method_signature": "DoubleOperations.create( long value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( double value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( double value )", "full_signature": "@Override public Double create( double value )", "class_method_signature": "DoubleOperations.create( double value )", "testcase": false, "constructor": false}, {"identifier": "sqrt", "parameters": "( Double value )", "modifiers": "@Override public", "return": "double", "signature": "double sqrt( Double value )", "full_signature": "@Override public double sqrt( Double value )", "class_method_signature": "DoubleOperations.sqrt( Double value )", "testcase": false, "constructor": false}, {"identifier": "getComparator", "parameters": "()", "modifiers": "@Override public", "return": "Comparator<Double>", "signature": "Comparator<Double> getComparator()", "full_signature": "@Override public Comparator<Double> getComparator()", "class_method_signature": "DoubleOperations.getComparator()", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "( Double minimum,\n                          Double maximum,\n                          Random rng )", "modifiers": "@Override public", "return": "Double", "signature": "Double random( Double minimum,\n                          Double maximum,\n                          Random rng )", "full_signature": "@Override public Double random( Double minimum,\n                          Double maximum,\n                          Random rng )", "class_method_signature": "DoubleOperations.random( Double minimum,\n                          Double maximum,\n                          Random rng )", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "( Double value )", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue( Double value )", "full_signature": "@Override public double doubleValue( Double value )", "class_method_signature": "DoubleOperations.doubleValue( Double value )", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "( Double value )", "modifiers": "@Override public", "return": "float", "signature": "float floatValue( Double value )", "full_signature": "@Override public float floatValue( Double value )", "class_method_signature": "DoubleOperations.floatValue( Double value )", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "( Double value )", "modifiers": "@Override public", "return": "int", "signature": "int intValue( Double value )", "full_signature": "@Override public int intValue( Double value )", "class_method_signature": "DoubleOperations.intValue( Double value )", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "( Double value )", "modifiers": "@Override public", "return": "long", "signature": "long longValue( Double value )", "full_signature": "@Override public long longValue( Double value )", "class_method_signature": "DoubleOperations.longValue( Double value )", "testcase": false, "constructor": false}, {"identifier": "shortValue", "parameters": "( Double value )", "modifiers": "@Override public", "return": "short", "signature": "short shortValue( Double value )", "full_signature": "@Override public short shortValue( Double value )", "class_method_signature": "DoubleOperations.shortValue( Double value )", "testcase": false, "constructor": false}, {"identifier": "getExponentInScientificNotation", "parameters": "( Double value )", "modifiers": "@Override public", "return": "int", "signature": "int getExponentInScientificNotation( Double value )", "full_signature": "@Override public int getExponentInScientificNotation( Double value )", "class_method_signature": "DoubleOperations.getExponentInScientificNotation( Double value )", "testcase": false, "constructor": false}, {"identifier": "roundUp", "parameters": "( Double value,\n                           int decimalShift )", "modifiers": "@Override public", "return": "Double", "signature": "Double roundUp( Double value,\n                           int decimalShift )", "full_signature": "@Override public Double roundUp( Double value,\n                           int decimalShift )", "class_method_signature": "DoubleOperations.roundUp( Double value,\n                           int decimalShift )", "testcase": false, "constructor": false}, {"identifier": "roundDown", "parameters": "( Double value,\n                             int decimalShift )", "modifiers": "@Override public", "return": "Double", "signature": "Double roundDown( Double value,\n                             int decimalShift )", "full_signature": "@Override public Double roundDown( Double value,\n                             int decimalShift )", "class_method_signature": "DoubleOperations.roundDown( Double value,\n                             int decimalShift )", "testcase": false, "constructor": false}, {"identifier": "keepSignificantFigures", "parameters": "( Double value,\n                                          int numSigFigs )", "modifiers": "@Override public", "return": "Double", "signature": "Double keepSignificantFigures( Double value,\n                                          int numSigFigs )", "full_signature": "@Override public Double keepSignificantFigures( Double value,\n                                          int numSigFigs )", "class_method_signature": "DoubleOperations.keepSignificantFigures( Double value,\n                                          int numSigFigs )", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/math/DoubleOperations.java"}, "focal_method": {"identifier": "keepSignificantFigures", "parameters": "( Double value,\n                                          int numSigFigs )", "modifiers": "@Override public", "return": "Double", "body": "@Override\n    public Double keepSignificantFigures( Double value,\n                                          int numSigFigs ) {\n        if (numSigFigs < 0) return value;\n        if (numSigFigs == 0) return 0.0d;\n        int currentExp = getExponentInScientificNotation(value);\n        int decimalShift = -currentExp + numSigFigs - 1;\n        return roundUp(value, decimalShift);\n    }", "signature": "Double keepSignificantFigures( Double value,\n                                          int numSigFigs )", "full_signature": "@Override public Double keepSignificantFigures( Double value,\n                                          int numSigFigs )", "class_method_signature": "DoubleOperations.keepSignificantFigures( Double value,\n                                          int numSigFigs )", "testcase": false, "constructor": false, "invocations": ["getExponentInScientificNotation", "roundUp"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}