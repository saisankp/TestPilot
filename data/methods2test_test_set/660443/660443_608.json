{"test_class": {"identifier": "MoleculeSanityCheckTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/smsd/tools/MoleculeSanityCheckTest.java"}, "test_case": {"identifier": "testFixAromaticity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFixAromaticity() throws InvalidSmilesException {\n        String rawMolSmiles = \"C1=CC2=C(C=C1)C=CC=C2\";\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(rawMolSmiles);\n        MoleculeSanityCheck.checkAndCleanMolecule(mol);\n        int count = 0;\n        for (IBond b : mol.bonds()) {\n            if (b.getFlag(CDKConstants.ISAROMATIC) && b.getOrder().equals(IBond.Order.DOUBLE)) {\n                count++;\n            }\n        }\n        assertEquals(5, count);\n    }", "signature": "void testFixAromaticity()", "full_signature": "@Test public void testFixAromaticity()", "class_method_signature": "MoleculeSanityCheckTest.testFixAromaticity()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "checkAndCleanMolecule", "bonds", "getFlag", "equals", "getOrder", "assertEquals"]}, "focal_class": {"identifier": "MoleculeSanityCheck", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "checkAndCleanMolecule", "parameters": "(IAtomContainer molecule)", "modifiers": "public static", "return": "IAtomContainer", "signature": "IAtomContainer checkAndCleanMolecule(IAtomContainer molecule)", "full_signature": "public static IAtomContainer checkAndCleanMolecule(IAtomContainer molecule)", "class_method_signature": "MoleculeSanityCheck.checkAndCleanMolecule(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(IAtomContainer mol)", "modifiers": "public static", "return": "void", "signature": "void configure(IAtomContainer mol)", "full_signature": "public static void configure(IAtomContainer mol)", "class_method_signature": "MoleculeSanityCheck.configure(IAtomContainer mol)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smsd/tools/MoleculeSanityCheck.java"}, "focal_method": {"identifier": "checkAndCleanMolecule", "parameters": "(IAtomContainer molecule)", "modifiers": "public static", "return": "IAtomContainer", "body": "public static IAtomContainer checkAndCleanMolecule(IAtomContainer molecule) {\n        boolean isMarkush = false;\n        for (IAtom atom : molecule.atoms()) {\n            if (atom.getSymbol().equals(\"R\")) {\n                isMarkush = true;\n                break;\n            }\n        }\n\n        if (isMarkush) {\n            System.err.println(\"Skipping Markush structure for sanity check\");\n        }\n\n        // Check for salts and such\n        if (!ConnectivityChecker.isConnected(molecule)) {\n            // lets see if we have just two parts if so, we assume its a salt and just work\n            // on the larger part. Ideally we should have a check to ensure that the smaller\n            //  part is a metal/halogen etc.\n            IAtomContainerSet fragments = ConnectivityChecker.partitionIntoMolecules(molecule);\n            if (fragments.getAtomContainerCount() > 2) {\n                System.err.println(\"More than 2 components. Skipped\");\n            } else {\n                IAtomContainer frag1 = fragments.getAtomContainer(0);\n                IAtomContainer frag2 = fragments.getAtomContainer(1);\n                if (frag1.getAtomCount() > frag2.getAtomCount()) {\n                    molecule = frag1;\n                } else {\n                    molecule = frag2;\n                }\n            }\n        }\n        configure(molecule);\n        return molecule;\n    }", "signature": "IAtomContainer checkAndCleanMolecule(IAtomContainer molecule)", "full_signature": "public static IAtomContainer checkAndCleanMolecule(IAtomContainer molecule)", "class_method_signature": "MoleculeSanityCheck.checkAndCleanMolecule(IAtomContainer molecule)", "testcase": false, "constructor": false, "invocations": ["atoms", "equals", "getSymbol", "println", "isConnected", "partitionIntoMolecules", "getAtomContainerCount", "println", "getAtomContainer", "getAtomContainer", "getAtomCount", "getAtomCount", "configure"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}