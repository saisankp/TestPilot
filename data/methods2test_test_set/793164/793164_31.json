{"test_class": {"identifier": "DurationTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons/core/src/test/java/org/openehealth/ipf/commons/core/datetime/DurationTest.java"}, "test_case": {"identifier": "testParseFail3", "parameters": "()", "modifiers": "@Test(expected=DurationFormatException.class) public", "return": "void", "body": "@Test(expected=DurationFormatException.class)\n    public void testParseFail3() {\n        Duration.parse(\"s0\");\n    }", "signature": "void testParseFail3()", "full_signature": "@Test(expected=DurationFormatException.class) public void testParseFail3()", "class_method_signature": "DurationTest.testParseFail3()", "testcase": true, "constructor": false, "invocations": ["parse"]}, "focal_class": {"identifier": "Duration", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EMPTY = \"\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY = \"\"", "var_name": "EMPTY"}, {"original_string": "private static final Pattern PATTERN = Pattern.compile(\"^[0-9]+[smhd]?$\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN = Pattern.compile(\"^[0-9]+[smhd]?$\")", "var_name": "PATTERN"}, {"original_string": "private static final Pattern PATTERN_UNIT = Pattern.compile(\"[smhd]\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_UNIT = Pattern.compile(\"[smhd]\")", "var_name": "PATTERN_UNIT"}, {"original_string": "private static final Pattern PATTERN_NUMBER = Pattern.compile(\"[0-9]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_NUMBER = Pattern.compile(\"[0-9]+\")", "var_name": "PATTERN_NUMBER"}, {"original_string": "private static final String SECOND = \"s\";", "modifier": "private static final", "type": "String", "declarator": "SECOND = \"s\"", "var_name": "SECOND"}, {"original_string": "private static final String MINUTE = \"m\";", "modifier": "private static final", "type": "String", "declarator": "MINUTE = \"m\"", "var_name": "MINUTE"}, {"original_string": "private static final String HOUR = \"h\";", "modifier": "private static final", "type": "String", "declarator": "HOUR = \"h\"", "var_name": "HOUR"}, {"original_string": "private static final String DAY = \"d\";", "modifier": "private static final", "type": "String", "declarator": "DAY = \"d\"", "var_name": "DAY"}, {"original_string": "private final long milliseconds;", "modifier": "private final", "type": "long", "declarator": "milliseconds", "var_name": "milliseconds"}], "methods": [{"identifier": "Duration", "parameters": "(long milliseconds)", "modifiers": "public", "return": "", "signature": " Duration(long milliseconds)", "full_signature": "public  Duration(long milliseconds)", "class_method_signature": "Duration.Duration(long milliseconds)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getValue()", "full_signature": "public long getValue()", "class_method_signature": "Duration.getValue()", "testcase": false, "constructor": false}, {"identifier": "since", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date since()", "full_signature": "public Date since()", "class_method_signature": "Duration.since()", "testcase": false, "constructor": false}, {"identifier": "since", "parameters": "(Date date)", "modifiers": "public", "return": "Date", "signature": "Date since(Date date)", "full_signature": "public Date since(Date date)", "class_method_signature": "Duration.since(Date date)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String duration)", "modifiers": "public static", "return": "Duration", "signature": "Duration parse(String duration)", "full_signature": "public static Duration parse(String duration)", "class_method_signature": "Duration.parse(String duration)", "testcase": false, "constructor": false}], "file": "commons/core/src/main/java/org/openehealth/ipf/commons/core/datetime/Duration.java"}, "focal_method": {"identifier": "parse", "parameters": "(String duration)", "modifiers": "public static", "return": "Duration", "body": "public static Duration parse(String duration) {\n        String d = duration.trim();\n        if (!PATTERN.matcher(d).matches()) {\n            throw new DurationFormatException(\n                    \"Duration string \" + duration + \" doesn't match pattern \" + PATTERN);\n        }\n        String u = PATTERN_NUMBER.matcher(d).replaceFirst(EMPTY);\n        long v = Long.parseLong(PATTERN_UNIT.matcher(d).replaceFirst(EMPTY));\n        if (u.length() == 0) {\n            // v already in units of milliseconds\n        } else if (u.equals(SECOND)) {\n            v = v * 1000L;\n        } else if (u.equals(MINUTE)) {\n            v = v * 1000L * 60L;\n        } else if (u.equals(HOUR)) {\n            v = v * 1000L * 60L * 60L;\n        } else if (u.equals(DAY)) {\n            v = v * 1000L * 60L * 60L * 24L;\n        } \n        return new Duration(v);\n    }", "signature": "Duration parse(String duration)", "full_signature": "public static Duration parse(String duration)", "class_method_signature": "Duration.parse(String duration)", "testcase": false, "constructor": false, "invocations": ["trim", "matches", "matcher", "replaceFirst", "matcher", "parseLong", "replaceFirst", "matcher", "length", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}