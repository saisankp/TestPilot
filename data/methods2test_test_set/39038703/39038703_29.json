{"test_class": {"identifier": "TestSpringServiceManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static String SPRING_TEST_CONFIG_FILE = \"spring/spring-test-services.xml\";", "modifier": "public static", "type": "String", "declarator": "SPRING_TEST_CONFIG_FILE = \"spring/spring-test-services.xml\"", "var_name": "SPRING_TEST_CONFIG_FILE"}, {"original_string": "SpringServiceManager ssm;", "modifier": "", "type": "SpringServiceManager", "declarator": "ssm", "var_name": "ssm"}, {"original_string": "DSpaceConfigurationService configurationService;", "modifier": "", "type": "DSpaceConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}], "file": "dspace-services/src/test/java/org/dspace/servicemanager/spring/TestSpringServiceManager.java"}, "test_case": {"identifier": "testStartupWithConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStartupWithConfig() {\n        // testing we can start this up a real config\n        ssm.startup();\n    }", "signature": "void testStartupWithConfig()", "full_signature": "@Test public void testStartupWithConfig()", "class_method_signature": "TestSpringServiceManager.testStartupWithConfig()", "testcase": true, "constructor": false, "invocations": ["startup"]}, "focal_class": {"identifier": "SpringServiceManager", "superclass": "", "interfaces": "implements ServiceManagerSystem", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(SpringServiceManager.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SpringServiceManager.class)", "var_name": "log"}, {"original_string": "private ClassPathXmlApplicationContext applicationContext;", "modifier": "private", "type": "ClassPathXmlApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private final ServiceManagerSystem parent;", "modifier": "private final", "type": "ServiceManagerSystem", "declarator": "parent", "var_name": "parent"}, {"original_string": "private final DSpaceConfigurationService configurationService;", "modifier": "private final", "type": "DSpaceConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "private boolean testMode = false;", "modifier": "private", "type": "boolean", "declarator": "testMode = false", "var_name": "testMode"}, {"original_string": "private boolean developmentMode = false;", "modifier": "private", "type": "boolean", "declarator": "developmentMode = false", "var_name": "developmentMode"}, {"original_string": "private String[] configPaths = null;", "modifier": "private", "type": "String[]", "declarator": "configPaths = null", "var_name": "configPaths"}, {"original_string": "public static final String configPath = \"spring/spring-dspace-applicationContext.xml\";", "modifier": "public static final", "type": "String", "declarator": "configPath = \"spring/spring-dspace-applicationContext.xml\"", "var_name": "configPath"}, {"original_string": "public static final String coreResourcePath = \"classpath*:spring/spring-dspace-core-services.xml\";", "modifier": "public static final", "type": "String", "declarator": "coreResourcePath = \"classpath*:spring/spring-dspace-core-services.xml\"", "var_name": "coreResourcePath"}, {"original_string": "public static final String addonResourcePath = \"classpath*:spring/spring-dspace-addon-*-services.xml\";", "modifier": "public static final", "type": "String", "declarator": "addonResourcePath = \"classpath*:spring/spring-dspace-addon-*-services.xml\"", "var_name": "addonResourcePath"}], "methods": [{"identifier": "getApplicationContext", "parameters": "()", "modifiers": "public", "return": "ClassPathXmlApplicationContext", "signature": "ClassPathXmlApplicationContext getApplicationContext()", "full_signature": "public ClassPathXmlApplicationContext getApplicationContext()", "class_method_signature": "SpringServiceManager.getApplicationContext()", "testcase": false, "constructor": false}, {"identifier": "getBeanFactory", "parameters": "()", "modifiers": "public", "return": "ListableBeanFactory", "signature": "ListableBeanFactory getBeanFactory()", "full_signature": "public ListableBeanFactory getBeanFactory()", "class_method_signature": "SpringServiceManager.getBeanFactory()", "testcase": false, "constructor": false}, {"identifier": "SpringServiceManager", "parameters": "(ServiceManagerSystem parent, DSpaceConfigurationService configurationService, boolean testMode, boolean developmentMode, String... configPaths)", "modifiers": "public", "return": "", "signature": " SpringServiceManager(ServiceManagerSystem parent, DSpaceConfigurationService configurationService, boolean testMode, boolean developmentMode, String... configPaths)", "full_signature": "public  SpringServiceManager(ServiceManagerSystem parent, DSpaceConfigurationService configurationService, boolean testMode, boolean developmentMode, String... configPaths)", "class_method_signature": "SpringServiceManager.SpringServiceManager(ServiceManagerSystem parent, DSpaceConfigurationService configurationService, boolean testMode, boolean developmentMode, String... configPaths)", "testcase": false, "constructor": true}, {"identifier": "getServiceByName", "parameters": "(String name, Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T getServiceByName(String name, Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T getServiceByName(String name, Class<T> type)", "class_method_signature": "SpringServiceManager.getServiceByName(String name, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getServicesByType", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "List<T>", "signature": "List<T> getServicesByType(Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public List<T> getServicesByType(Class<T> type)", "class_method_signature": "SpringServiceManager.getServicesByType(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "SpringServiceManager.shutdown()", "testcase": false, "constructor": false}, {"identifier": "startup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startup()", "full_signature": "@Override public void startup()", "class_method_signature": "SpringServiceManager.startup()", "testcase": false, "constructor": false}, {"identifier": "registerServiceClass", "parameters": "(String name, Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T registerServiceClass(String name, Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T registerServiceClass(String name, Class<T> type)", "class_method_signature": "SpringServiceManager.registerServiceClass(String name, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "registerService", "parameters": "(String name, Object service)", "modifiers": "@Override public", "return": "void", "signature": "void registerService(String name, Object service)", "full_signature": "@Override public void registerService(String name, Object service)", "class_method_signature": "SpringServiceManager.registerService(String name, Object service)", "testcase": false, "constructor": false}, {"identifier": "registerServiceNoAutowire", "parameters": "(String name, Object service)", "modifiers": "@Override public", "return": "void", "signature": "void registerServiceNoAutowire(String name, Object service)", "full_signature": "@Override public void registerServiceNoAutowire(String name, Object service)", "class_method_signature": "SpringServiceManager.registerServiceNoAutowire(String name, Object service)", "testcase": false, "constructor": false}, {"identifier": "registerBean", "parameters": "(String name, Object service)", "modifiers": "private", "return": "void", "signature": "void registerBean(String name, Object service)", "full_signature": "private void registerBean(String name, Object service)", "class_method_signature": "SpringServiceManager.registerBean(String name, Object service)", "testcase": false, "constructor": false}, {"identifier": "unregisterService", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterService(String name)", "full_signature": "@Override public void unregisterService(String name)", "class_method_signature": "SpringServiceManager.unregisterService(String name)", "testcase": false, "constructor": false}, {"identifier": "getServicesNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getServicesNames()", "full_signature": "@Override public List<String> getServicesNames()", "class_method_signature": "SpringServiceManager.getServicesNames()", "testcase": false, "constructor": false}, {"identifier": "isServiceExists", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isServiceExists(String name)", "full_signature": "@Override public boolean isServiceExists(String name)", "class_method_signature": "SpringServiceManager.isServiceExists(String name)", "testcase": false, "constructor": false}, {"identifier": "getServices", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getServices()", "full_signature": "@Override public Map<String, Object> getServices()", "class_method_signature": "SpringServiceManager.getServices()", "testcase": false, "constructor": false}, {"identifier": "pushConfig", "parameters": "(Map<String, Object> settings)", "modifiers": "@Override public", "return": "void", "signature": "void pushConfig(Map<String, Object> settings)", "full_signature": "@Override public void pushConfig(Map<String, Object> settings)", "class_method_signature": "SpringServiceManager.pushConfig(Map<String, Object> settings)", "testcase": false, "constructor": false}], "file": "dspace-services/src/main/java/org/dspace/servicemanager/spring/SpringServiceManager.java"}, "focal_method": {"identifier": "startup", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void startup() {\n        long startTime = System.currentTimeMillis();\n        // get all spring config paths\n        ArrayList<String> pathList = new ArrayList<String>();\n        pathList.add(configPath);\n        pathList.add(addonResourcePath);\n        if (testMode) {\n            log.warn(\"TEST Spring Service Manager running in test mode, no core beans will be started\");\n        } else {\n            // only load the core beans when not testing the service manager\n            pathList.add(coreResourcePath);\n        }\n        if (configPaths != null) {\n            pathList.addAll(Arrays.asList(configPaths));\n        }\n        if(testMode){\n            log.warn(\"TEST Spring Service Manager running in test mode, no dspace home spring files will be loaded\");\n        } else {\n            //Retrieve all our spring file locations depending on the deployed module\n            String[] springLoaderClassNames = configurationService.getArrayProperty(\"spring.springloader.modules\");\n            if(springLoaderClassNames != null){\n                for(String springLoaderClassName : springLoaderClassNames){\n                    try {\n                        Class<SpringLoader> springLoaderClass = (Class<SpringLoader>) Class.forName(springLoaderClassName.trim());\n                        String[] resourcePaths = springLoaderClass.getConstructor().newInstance().getResourcePaths(configurationService);\n                        if(resourcePaths != null){\n                            pathList.addAll(Arrays.asList(resourcePaths));\n                        }\n                    } catch (ClassNotFoundException e) {\n                        //Ignore this exception, if we get one this just means that this module isn't loaded\n                    } catch (Exception e) {\n                        log.error(\"Error while retrieving spring resource paths for module: \" + springLoaderClassName, e);\n                    }\n                }\n            }\n        }\n        String[] allPaths = pathList.toArray(new String[pathList.size()]);\n        applicationContext = new ClassPathXmlApplicationContext(allPaths, false);\n        // Make sure that the spring files from the config directoy can override the spring files from our jars\n        applicationContext.setAllowBeanDefinitionOverriding(true);\n        applicationContext.setAllowCircularReferences(true);\n        //applicationContext.registerShutdownHook(); // this interferes with the kernel shutdown hook\n        // add the config interceptors (partially done in the xml)\n        applicationContext.addBeanFactoryPostProcessor( new DSpaceBeanFactoryPostProcessor(parent, configurationService, testMode) );\n        applicationContext.refresh();\n        if (developmentMode) {\n            log.warn(\"Spring Service Manager is running in developmentMode, services will be loaded on demand only\");\n            // TODO find a way to set this sucker to super duper lazy mode? it is currently not actually doing it\n        } else {\n            applicationContext.getBeanFactory().preInstantiateSingletons();\n            applicationContext.getBeanFactory().freezeConfiguration();\n        }\n        long totalTime = System.currentTimeMillis() - startTime;\n        log.info(\"Spring Service Manager started up in \"+totalTime+\" ms with \"+applicationContext.getBeanDefinitionCount()+\" services...\");\n    }", "signature": "void startup()", "full_signature": "@Override public void startup()", "class_method_signature": "SpringServiceManager.startup()", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "add", "add", "warn", "add", "addAll", "asList", "warn", "getArrayProperty", "forName", "trim", "getResourcePaths", "newInstance", "getConstructor", "addAll", "asList", "error", "toArray", "size", "setAllowBeanDefinitionOverriding", "setAllowCircularReferences", "addBeanFactoryPostProcessor", "refresh", "warn", "preInstantiateSingletons", "getBeanFactory", "freezeConfiguration", "getBeanFactory", "currentTimeMillis", "info", "getBeanDefinitionCount"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}