{"test_class": {"identifier": "JarWriterTest", "superclass": "", "interfaces": "implements JarEntryWriter", "fields": [{"original_string": "private int countCallbacks = 0;", "modifier": "private", "type": "int", "declarator": "countCallbacks = 0", "var_name": "countCallbacks"}], "file": "lang-java/src/test/java/org/eclipse/steady/java/JarWriterTest.java"}, "test_case": {"identifier": "testRewrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRewrite() {\n    try {\n      // Create a JarWriter and do some settings\n      final JarWriter jw = new JarWriter(Paths.get(\"./src/test/resources/examples.jar\"));\n      jw.addManifestEntry(\"Test\", \"JUnit test entry\");\n      jw.setClassifier(StringUtil.getRandonString(6));\n      jw.addFile(\"\", Paths.get(\"./src/test/resources/Callgraph.class\"), true);\n      jw.addFile(\"WEB-INF/lib\", Paths.get(\"./src/test/resources/examples.jar\"), true);\n\n      assertEquals(\"F22A5E25F37455867B5C2CF476BAC25189AC2B28\", jw.getSHA1());\n\n      // Callback for .class files and rewrite\n      jw.register(\".*.class$\", this);\n      final Path rewritten = jw.rewrite(Paths.get(\"./target\"));\n\n      // Callbacks for 6 class files\n      assertEquals(6, this.countCallbacks);\n\n      // Create a new JarWriter and check whether is recognized as rewritten (the original SHA1 is\n      // taken from the manifest)\n      final JarWriter jw2 = new JarWriter(rewritten);\n      assertTrue(jw2.isRewrittenByVulas());\n      assertEquals(\"F22A5E25F37455867B5C2CF476BAC25189AC2B28\", jw2.getSHA1());\n    } catch (Exception e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }", "signature": "void testRewrite()", "full_signature": "@Test public void testRewrite()", "class_method_signature": "JarWriterTest.testRewrite()", "testcase": true, "constructor": false, "invocations": ["get", "addManifestEntry", "setClassifier", "getRandonString", "addFile", "get", "addFile", "get", "assertEquals", "getSHA1", "register", "rewrite", "get", "assertEquals", "assertTrue", "isRewrittenByVulas", "assertEquals", "getSHA1", "printStackTrace", "assertTrue"]}, "focal_class": {"identifier": "JarWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "public final SimpleDateFormat dateFormat = new SimpleDateFormat(\"d MMM yyyy HH:mm:ss\");", "modifier": "public final", "type": "SimpleDateFormat", "declarator": "dateFormat = new SimpleDateFormat(\"d MMM yyyy HH:mm:ss\")", "var_name": "dateFormat"}, {"original_string": "public static final String MANIFEST_ENTRY_VULAS_MODIF = \"VULAS-modifiedAt\";", "modifier": "public static final", "type": "String", "declarator": "MANIFEST_ENTRY_VULAS_MODIF = \"VULAS-modifiedAt\"", "var_name": "MANIFEST_ENTRY_VULAS_MODIF"}, {"original_string": "public static final String MANIFEST_ENTRY_ORIG_SHA1 = \"VULAS-originalSHA1\";", "modifier": "public static final", "type": "String", "declarator": "MANIFEST_ENTRY_ORIG_SHA1 = \"VULAS-originalSHA1\"", "var_name": "MANIFEST_ENTRY_ORIG_SHA1"}, {"original_string": "protected static final char[] hexArray = \"0123456789ABCDEF\".toCharArray();", "modifier": "protected static final", "type": "char[]", "declarator": "hexArray = \"0123456789ABCDEF\".toCharArray()", "var_name": "hexArray"}, {"original_string": "private JarFile originalJar = null;", "modifier": "private", "type": "JarFile", "declarator": "originalJar = null", "var_name": "originalJar"}, {"original_string": "private long originalFileSize = 0;", "modifier": "private", "type": "long", "declarator": "originalFileSize = 0", "var_name": "originalFileSize"}, {"original_string": "private Manifest originalManifest = null;", "modifier": "private", "type": "Manifest", "declarator": "originalManifest = null", "var_name": "originalManifest"}, {"original_string": "private String sha1 = null;", "modifier": "private", "type": "String", "declarator": "sha1 = null", "var_name": "sha1"}, {"original_string": "private Set<String> mfEntriesToSkip = new HashSet<String>();", "modifier": "private", "type": "Set<String>", "declarator": "mfEntriesToSkip = new HashSet<String>()", "var_name": "mfEntriesToSkip"}, {"original_string": "private Map<String, String> mfEntriesToAdd = new HashMap<String, String>();", "modifier": "private", "type": "Map<String, String>", "declarator": "mfEntriesToAdd = new HashMap<String, String>()", "var_name": "mfEntriesToAdd"}, {"original_string": "private String classifier = null;", "modifier": "private", "type": "String", "declarator": "classifier = null", "var_name": "classifier"}, {"original_string": "private Map<Pattern, JarEntryWriter> callbacks = new HashMap<Pattern, JarEntryWriter>();", "modifier": "private", "type": "Map<Pattern, JarEntryWriter>", "declarator": "callbacks = new HashMap<Pattern, JarEntryWriter>()", "var_name": "callbacks"}, {"original_string": "private File rewrittenFile = null;", "modifier": "private", "type": "File", "declarator": "rewrittenFile = null", "var_name": "rewrittenFile"}, {"original_string": "private Map<String, Path> additionalFiles = new HashMap<String, Path>();", "modifier": "private", "type": "Map<String, Path>", "declarator": "additionalFiles = new HashMap<String, Path>()", "var_name": "additionalFiles"}], "methods": [{"identifier": "JarWriter", "parameters": "(Path _jar)", "modifiers": "public", "return": "", "signature": " JarWriter(Path _jar)", "full_signature": "public  JarWriter(Path _jar)", "class_method_signature": "JarWriter.JarWriter(Path _jar)", "testcase": false, "constructor": true}, {"identifier": "getFileSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getFileSize()", "full_signature": "public long getFileSize()", "class_method_signature": "JarWriter.getFileSize()", "testcase": false, "constructor": false}, {"identifier": "getInstrumentedFileSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getInstrumentedFileSize()", "full_signature": "public long getInstrumentedFileSize()", "class_method_signature": "JarWriter.getInstrumentedFileSize()", "testcase": false, "constructor": false}, {"identifier": "getOriginalManifest", "parameters": "()", "modifiers": "public", "return": "Manifest", "signature": "Manifest getOriginalManifest()", "full_signature": "public Manifest getOriginalManifest()", "class_method_signature": "JarWriter.getOriginalManifest()", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(Path _todir)", "modifiers": "public", "return": "Path", "signature": "Path extract(Path _todir)", "full_signature": "public Path extract(Path _todir)", "class_method_signature": "JarWriter.extract(Path _todir)", "testcase": false, "constructor": false}, {"identifier": "getSHA1", "parameters": "()", "modifiers": "public synchronized", "return": "String", "signature": "String getSHA1()", "full_signature": "public synchronized String getSHA1()", "class_method_signature": "JarWriter.getSHA1()", "testcase": false, "constructor": false}, {"identifier": "skipManifestEntry", "parameters": "(String _entry)", "modifiers": "public", "return": "void", "signature": "void skipManifestEntry(String _entry)", "full_signature": "public void skipManifestEntry(String _entry)", "class_method_signature": "JarWriter.skipManifestEntry(String _entry)", "testcase": false, "constructor": false}, {"identifier": "addManifestEntry", "parameters": "(String _key, String _val)", "modifiers": "public", "return": "void", "signature": "void addManifestEntry(String _key, String _val)", "full_signature": "public void addManifestEntry(String _key, String _val)", "class_method_signature": "JarWriter.addManifestEntry(String _key, String _val)", "testcase": false, "constructor": false}, {"identifier": "hasManifestEntry", "parameters": "(String _key)", "modifiers": "public", "return": "boolean", "signature": "boolean hasManifestEntry(String _key)", "full_signature": "public boolean hasManifestEntry(String _key)", "class_method_signature": "JarWriter.hasManifestEntry(String _key)", "testcase": false, "constructor": false}, {"identifier": "isRewrittenByVulas", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRewrittenByVulas()", "full_signature": "public boolean isRewrittenByVulas()", "class_method_signature": "JarWriter.isRewrittenByVulas()", "testcase": false, "constructor": false}, {"identifier": "setClassifier", "parameters": "(String _string)", "modifiers": "public", "return": "void", "signature": "void setClassifier(String _string)", "full_signature": "public void setClassifier(String _string)", "class_method_signature": "JarWriter.setClassifier(String _string)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(String _regex, JarEntryWriter _writer)", "modifiers": "public", "return": "void", "signature": "void register(String _regex, JarEntryWriter _writer)", "full_signature": "public void register(String _regex, JarEntryWriter _writer)", "class_method_signature": "JarWriter.register(String _regex, JarEntryWriter _writer)", "testcase": false, "constructor": false}, {"identifier": "createModifiedManifest", "parameters": "()", "modifiers": "private", "return": "Manifest", "signature": "Manifest createModifiedManifest()", "full_signature": "private Manifest createModifiedManifest()", "class_method_signature": "JarWriter.createModifiedManifest()", "testcase": false, "constructor": false}, {"identifier": "getOriginalJarFileName", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getOriginalJarFileName()", "full_signature": "public Path getOriginalJarFileName()", "class_method_signature": "JarWriter.getOriginalJarFileName()", "testcase": false, "constructor": false}, {"identifier": "getRewriteJarFileName", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getRewriteJarFileName()", "full_signature": "public Path getRewriteJarFileName()", "class_method_signature": "JarWriter.getRewriteJarFileName()", "testcase": false, "constructor": false}, {"identifier": "addFiles", "parameters": "(String _target_dir, Set<Path> _paths, boolean _overwrite)", "modifiers": "public", "return": "void", "signature": "void addFiles(String _target_dir, Set<Path> _paths, boolean _overwrite)", "full_signature": "public void addFiles(String _target_dir, Set<Path> _paths, boolean _overwrite)", "class_method_signature": "JarWriter.addFiles(String _target_dir, Set<Path> _paths, boolean _overwrite)", "testcase": false, "constructor": false}, {"identifier": "addFile", "parameters": "(String _target_dir, Path _path, boolean _overwrite)", "modifiers": "public", "return": "void", "signature": "void addFile(String _target_dir, Path _path, boolean _overwrite)", "full_signature": "public void addFile(String _target_dir, Path _path, boolean _overwrite)", "class_method_signature": "JarWriter.addFile(String _target_dir, Path _path, boolean _overwrite)", "testcase": false, "constructor": false}, {"identifier": "hasEntry", "parameters": "(String _entry_name)", "modifiers": "public", "return": "boolean", "signature": "boolean hasEntry(String _entry_name)", "full_signature": "public boolean hasEntry(String _entry_name)", "class_method_signature": "JarWriter.hasEntry(String _entry_name)", "testcase": false, "constructor": false}, {"identifier": "getRewrittenJarFile", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getRewrittenJarFile()", "full_signature": "public File getRewrittenJarFile()", "class_method_signature": "JarWriter.getRewrittenJarFile()", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(Path _todir)", "modifiers": "public", "return": "Path", "signature": "Path rewrite(Path _todir)", "full_signature": "public Path rewrite(Path _todir)", "class_method_signature": "JarWriter.rewrite(Path _todir)", "testcase": false, "constructor": false}, {"identifier": "appendToClasspath", "parameters": "(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess)", "modifiers": "public static final", "return": "void", "signature": "void appendToClasspath(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess)", "full_signature": "public static final void appendToClasspath(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess)", "class_method_signature": "JarWriter.appendToClasspath(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess)", "testcase": false, "constructor": false}, {"identifier": "appendToClasspath", "parameters": "(\n      Set<Path> _classpath, Path _to_append, boolean _preprocess)", "modifiers": "public static final", "return": "Path", "signature": "Path appendToClasspath(\n      Set<Path> _classpath, Path _to_append, boolean _preprocess)", "full_signature": "public static final Path appendToClasspath(\n      Set<Path> _classpath, Path _to_append, boolean _preprocess)", "class_method_signature": "JarWriter.appendToClasspath(\n      Set<Path> _classpath, Path _to_append, boolean _preprocess)", "testcase": false, "constructor": false}], "file": "lang-java/src/main/java/org/eclipse/steady/java/JarWriter.java"}, "focal_method": {"identifier": "rewrite", "parameters": "(Path _todir)", "modifiers": "public", "return": "Path", "body": "public Path rewrite(Path _todir) throws JarAnalysisException {\n    // Target dir\n    Path dir = _todir;\n\n    // Callback logic\n    Matcher matcher = null;\n\n    // Loop all entries of the old JAR\n    JarEntry old_entry = null, new_entry = null;\n\n    try {\n      if (dir == null) dir = java.nio.file.Files.createTempDirectory(\"rewritten_jar_\");\n      this.rewrittenFile =\n          Paths.get(dir.toString(), this.getRewriteJarFileName().toString()).toFile();\n\n      if (this.rewrittenFile.exists()) {\n        JarWriter.log.info(\n            \"The target [\" + this.rewrittenFile + \"] already exists, skip rewriting\");\n      } else {\n        final FileOutputStream fos = new FileOutputStream(this.rewrittenFile);\n        final JarOutputStream jos = new JarOutputStream(fos, this.createModifiedManifest());\n        InputStream is = null;\n        byte[] bytes = new byte[1024];\n        int bytes_read = 0;\n\n        final Enumeration<JarEntry> en = this.originalJar.entries();\n        String class_name = null;\n        JavaId jid = null;\n        Set<JavaId> jids = new HashSet<JavaId>();\n\n        // Remember all JAR entries written to the new JAR, so that we do not create duplicate\n        // entries\n        // Example of a duplicate entry: Location.class in xmlbeans-2.6.0.jar\n        Set<String> written_jar_entries = new HashSet<String>();\n\n        while (en.hasMoreElements()) {\n          old_entry = en.nextElement();\n\n          // The input stream used for writing the entries\n          is = null;\n\n          // Check whether we already write an entry with this name\n          if (written_jar_entries.contains(old_entry.getName())) continue;\n\n          // Ignore the original manifest (we built a new one with certain vulas-specific\n          // attributes)\n          if (old_entry.getName().equals(\"META-INF/MANIFEST.MF\")) continue;\n\n          // Ignore signature related files (->\n          // http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html#Signed_JAR_File)\n          if (old_entry.getName().startsWith(\"META-INF/\")\n              && (old_entry.getName().toLowerCase().endsWith(\".sf\")\n                  || old_entry.getName().toLowerCase().endsWith(\".dsa\")\n                  || old_entry.getName().toLowerCase().endsWith(\".rsa\"))) continue;\n\n          // Loop registered JarEntryWriters to see if any matches (take the input stream from the\n          // first match)\n          for (Map.Entry<Pattern, JarEntryWriter> e : this.callbacks.entrySet()) {\n            matcher = e.getKey().matcher(old_entry.getName());\n            if (matcher.matches()) {\n              is = e.getValue().getInputStream(e.getKey().toString(), old_entry);\n            }\n          }\n\n          // If null, take the original file\n          if (is == null) is = this.originalJar.getInputStream(old_entry);\n\n          // Debug information regarding specific attributes\n          if (old_entry.getAttributes() != null)\n            JarWriter.log.debug(\n                this.toString() + \": Entry [\" + old_entry.getName() + \"] has specific attributes\");\n\n          // Write the entry to the modified JAR\n          new_entry = new JarEntry(old_entry.getName());\n          jos.putNextEntry(new_entry);\n          while ((bytes_read = is.read(bytes)) != -1) jos.write(bytes, 0, bytes_read);\n\n          // is.close();\n          jos.closeEntry();\n\n          // Remember we wrote it\n          written_jar_entries.add(new_entry.getName());\n        }\n\n        // Add additional files\n        for (Map.Entry<String, Path> e : this.additionalFiles.entrySet()) {\n          if (e.getValue().toFile().exists()) {\n            new_entry = new JarEntry(e.getKey());\n            jos.putNextEntry(new_entry);\n            is = new FileInputStream(e.getValue().toFile());\n            while ((bytes_read = is.read(bytes)) != -1) jos.write(bytes, 0, bytes_read);\n            is.close();\n            jos.closeEntry();\n          }\n        }\n\n        jos.flush();\n        jos.close();\n        this.originalJar.close();\n\n        //\n        old_entry = null;\n        JarWriter.log.info(\n            \"[\" + this.originalJar.getName() + \"] rewritten to [\" + this.rewrittenFile + \"]\");\n      }\n    } catch (Exception ioe) {\n      if (old_entry != null)\n        throw new JarAnalysisException(\n            \"Error while writing JAR entry [\"\n                + old_entry.getName()\n                + \"] to modified JAR [\"\n                + this.rewrittenFile\n                + \"]: \"\n                + ioe.getMessage(),\n            ioe);\n      else\n        throw new JarAnalysisException(\n            \"Error while writing modified JAR: \" + ioe.getMessage(), ioe);\n    }\n    return this.rewrittenFile.toPath();\n  }", "signature": "Path rewrite(Path _todir)", "full_signature": "public Path rewrite(Path _todir)", "class_method_signature": "JarWriter.rewrite(Path _todir)", "testcase": false, "constructor": false, "invocations": ["createTempDirectory", "toFile", "get", "toString", "toString", "getRewriteJarFileName", "exists", "info", "createModifiedManifest", "entries", "hasMoreElements", "nextElement", "contains", "getName", "equals", "getName", "startsWith", "getName", "endsWith", "toLowerCase", "getName", "endsWith", "toLowerCase", "getName", "endsWith", "toLowerCase", "getName", "entrySet", "matcher", "getKey", "getName", "matches", "getInputStream", "getValue", "toString", "getKey", "getInputStream", "getAttributes", "debug", "toString", "getName", "getName", "putNextEntry", "read", "write", "closeEntry", "add", "getName", "entrySet", "exists", "toFile", "getValue", "getKey", "putNextEntry", "toFile", "getValue", "read", "write", "close", "closeEntry", "flush", "close", "close", "info", "getName", "getName", "getMessage", "getMessage", "toPath"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}