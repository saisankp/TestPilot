{"test_class": {"identifier": "JsonXsltPipeTest", "superclass": "extends PipeTestBase<JsonXsltPipe>", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate IPipeLineSession session;", "modifier": "@Mock\n\tprivate", "type": "IPipeLineSession", "declarator": "session", "var_name": "session"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/JsonXsltPipeTest.java"}, "test_case": {"identifier": "xmlOut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void xmlOut() throws ConfigurationException, PipeStartException, IOException, PipeRunException {\n\t\tpipe.setStyleSheetName(\"/Xslt3/orgchart.xslt\");\n\t\tpipe.setJsonResult(false);\n\t\tpipe.configure();\n\t\tpipe.start();\n\t\tString input=TestFileUtils.getTestFile(\"/Xslt3/employees.json\");\n\t\tlog.debug(\"inputfile [\"+input+\"]\");\n\t\tString expectedXml=TestFileUtils.getTestFile(\"/Xslt3/orgchart.xml\");\n\t\tPipeRunResult prr = doPipe(pipe, input,session);\n\t\tString xmlOut=prr.getResult().asString();\n\t\tassertEquals(expectedXml,xmlOut);\n\t}", "signature": "void xmlOut()", "full_signature": "@Test public void xmlOut()", "class_method_signature": "JsonXsltPipeTest.xmlOut()", "testcase": true, "constructor": false, "invocations": ["setStyleSheetName", "setJsonResult", "configure", "start", "getTestFile", "debug", "getTestFile", "doPipe", "asString", "getResult", "assertEquals"]}, "focal_class": {"identifier": "JsonXsltPipe", "superclass": "extends XsltPipe", "interfaces": "", "fields": [{"original_string": "private final String JSONXSLTSENDER = \"nl.nn.adapterframework.senders.JsonXsltSender\";", "modifier": "private final", "type": "String", "declarator": "JSONXSLTSENDER = \"nl.nn.adapterframework.senders.JsonXsltSender\"", "var_name": "JSONXSLTSENDER"}], "methods": [{"identifier": "createXsltSender", "parameters": "()", "modifiers": "@Override protected", "return": "XsltSender", "signature": "XsltSender createXsltSender()", "full_signature": "@Override protected XsltSender createXsltSender()", "class_method_signature": "JsonXsltPipe.createXsltSender()", "testcase": false, "constructor": false}, {"identifier": "setJsonResult", "parameters": "(boolean jsonResult)", "modifiers": "@IbisDocRef({\"1\", JSONXSLTSENDER}) public", "return": "void", "signature": "void setJsonResult(boolean jsonResult)", "full_signature": "@IbisDocRef({\"1\", JSONXSLTSENDER}) public void setJsonResult(boolean jsonResult)", "class_method_signature": "JsonXsltPipe.setJsonResult(boolean jsonResult)", "testcase": false, "constructor": false}, {"identifier": "setNamespaceDefs", "parameters": "(String namespaceDefs)", "modifiers": "@Override @IbisDocRef({\"2\", JSONXSLTSENDER}) public", "return": "void", "signature": "void setNamespaceDefs(String namespaceDefs)", "full_signature": "@Override @IbisDocRef({\"2\", JSONXSLTSENDER}) public void setNamespaceDefs(String namespaceDefs)", "class_method_signature": "JsonXsltPipe.setNamespaceDefs(String namespaceDefs)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/JsonXsltPipe.java"}, "focal_method": {"identifier": "setJsonResult", "parameters": "(boolean jsonResult)", "modifiers": "@IbisDocRef({\"1\", JSONXSLTSENDER}) public", "return": "void", "body": "@IbisDocRef({\"1\", JSONXSLTSENDER})\n\tpublic void setJsonResult(boolean jsonResult) {\n\t\t((JsonXsltSender)getSender()).setJsonResult(jsonResult);\n\t}", "signature": "void setJsonResult(boolean jsonResult)", "full_signature": "@IbisDocRef({\"1\", JSONXSLTSENDER}) public void setJsonResult(boolean jsonResult)", "class_method_signature": "JsonXsltPipe.setJsonResult(boolean jsonResult)", "testcase": false, "constructor": false, "invocations": ["setJsonResult", "getSender"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}