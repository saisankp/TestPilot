{"test_class": {"identifier": "AmdJsResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File INPUT_FILE = new File(\"src/test/resource/resfilter/amdjs/input.js\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE = new File(\"src/test/resource/resfilter/amdjs/input.js\")", "var_name": "INPUT_FILE"}, {"original_string": "private static final File EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/amdjs/write-output.js\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/amdjs/write-output.js\")", "var_name": "EXPECTED_WRITE_FILE"}, {"original_string": "private static final File MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-input-1.js\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-input-1.js\")", "var_name": "MERGE_INPUT_1_FILE"}, {"original_string": "private static final File MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-input-2.js\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-input-2.js\")", "var_name": "MERGE_INPUT_2_FILE"}, {"original_string": "private static final File MERGE_INPUT_3_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-input-3.js\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_3_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-input-3.js\")", "var_name": "MERGE_INPUT_3_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-output-1.js\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-output-1.js\")", "var_name": "EXPECTED_MERGE_1_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-output-2.js\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-output-2.js\")", "var_name": "EXPECTED_MERGE_2_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_3_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-output-3.js\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_3_FILE = new File(\"src/test/resource/resfilter/amdjs/merge-output-3.js\")", "var_name": "EXPECTED_MERGE_3_FILE"}, {"original_string": "private static final Collection<ResourceString> EXPECTED_INPUT_RES_LIST;", "modifier": "private static final", "type": "Collection<ResourceString>", "declarator": "EXPECTED_INPUT_RES_LIST", "var_name": "EXPECTED_INPUT_RES_LIST"}, {"original_string": "private static LanguageBundle WRITE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "WRITE_BUNDLE", "var_name": "WRITE_BUNDLE"}, {"original_string": "private static LanguageBundle MERGE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "MERGE_BUNDLE", "var_name": "MERGE_BUNDLE"}, {"original_string": "private static final AmdJsResource res = new AmdJsResource();", "modifier": "private static final", "type": "AmdJsResource", "declarator": "res = new AmdJsResource()", "var_name": "res"}], "file": "gp-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/impl/AmdJsResourceTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() throws IOException, ResourceFilterException {\n        assertTrue(\"The input test file <\" + INPUT_FILE + \"> does not exist.\", INPUT_FILE.exists());\n\n        try (InputStream is = new FileInputStream(INPUT_FILE)) {\n            LanguageBundle bundle = res.parse(is, null);\n            List<ResourceString> resStrList = new ArrayList<>(bundle.getResourceStrings());\n            Collections.sort(resStrList, new ResourceStringComparator());\n            assertEquals(\"ResourceStrings did not match.\", EXPECTED_INPUT_RES_LIST, resStrList);\n        }\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "AmdJsResourceTest.testParse()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "exists", "parse", "getResourceStrings", "sort", "assertEquals"]}, "focal_class": {"identifier": "AmdJsResource", "superclass": "extends ResourceFilter", "interfaces": "", "fields": [], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "AmdJsResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "AmdJsResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "AmdJsResource.merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "escapeString", "parameters": "(String str, Character quoteChar)", "modifiers": "static", "return": "String", "signature": "String escapeString(String str, Character quoteChar)", "full_signature": "static String escapeString(String str, Character quoteChar)", "class_method_signature": "AmdJsResource.escapeString(String str, Character quoteChar)", "testcase": false, "constructor": false}], "file": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/AmdJsResource.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "body": "@Override\n    public LanguageBundle parse(InputStream inStream, FilterOptions options)\n            throws IOException, ResourceFilterException {\n        LanguageBundleBuilder bb = new LanguageBundleBuilder(true);\n\n        // TODO: Rhino parse(Reader, String, int) only throws IOException on IO\n        // error thrown\n        // by Reader. We need to use ErrorReporter used in the Parser\n        // constructor,\n        // and check the reporter after parse method to detect JavaScript syntax\n        // problems.\n        try (InputStreamReader reader = new InputStreamReader(new BomInputStream(inStream), \"UTF-8\")) {\n            AstRoot root = new Parser().parse(reader, null, 1);\n            KeyValueVisitor visitor = new KeyValueVisitor();\n            root.visitAll(visitor);\n            LinkedHashMap<String, ValueData> resultMap = visitor.elements;\n            for (Entry<String, ValueData> entry : resultMap.entrySet()) {\n                bb.addResourceString(entry.getKey(), entry.getValue().getValue());\n            }\n        }\n\n        return bb.build();\n    }", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "AmdJsResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["parse", "visitAll", "entrySet", "addResourceString", "getKey", "getValue", "getValue", "build"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}