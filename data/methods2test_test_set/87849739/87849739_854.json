{"test_class": {"identifier": "ImmutablePlaceholderResolverTest", "superclass": "", "interfaces": "", "fields": [], "file": "model/placeholders/src/test/java/org/eclipse/ditto/model/placeholders/ImmutablePlaceholderResolverTest.java"}, "test_case": {"identifier": "testPlaceholderResolvementBasedOnTopic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPlaceholderResolvementBasedOnTopic() {\n        final String fullPath = \"org.eclipse.ditto/foo23/things/twin/commands/modify\";\n        final TopicPath topic = ProtocolFactory.newTopicPath(fullPath);\n\n        final ImmutablePlaceholderResolver<TopicPath> underTest = new ImmutablePlaceholderResolver<>(\n                PlaceholderFactory.newTopicPathPlaceholder(), topic);\n\n        assertThat(underTest.resolve(\"full\"))\n                .contains(fullPath);\n        assertThat(underTest.resolve(\"namespace\"))\n                .contains(\"org.eclipse.ditto\");\n        assertThat(underTest.resolve(\"entityId\"))\n                .contains(\"foo23\");\n        assertThat(underTest.resolve(\"group\"))\n                .contains(\"things\");\n        assertThat(underTest.resolve(\"channel\"))\n                .contains(\"twin\");\n        assertThat(underTest.resolve(\"criterion\"))\n                .contains(\"commands\");\n        assertThat(underTest.resolve(\"action\"))\n                .contains(\"modify\");\n    }", "signature": "void testPlaceholderResolvementBasedOnTopic()", "full_signature": "@Test public void testPlaceholderResolvementBasedOnTopic()", "class_method_signature": "ImmutablePlaceholderResolverTest.testPlaceholderResolvementBasedOnTopic()", "testcase": true, "constructor": false, "invocations": ["newTopicPath", "newTopicPathPlaceholder", "contains", "assertThat", "resolve", "contains", "assertThat", "resolve", "contains", "assertThat", "resolve", "contains", "assertThat", "resolve", "contains", "assertThat", "resolve", "contains", "assertThat", "resolve", "contains", "assertThat", "resolve"]}, "focal_class": {"identifier": "ImmutablePlaceholderResolver", "superclass": "", "interfaces": "implements PlaceholderResolver<T>", "fields": [{"original_string": "private final Placeholder<T> placeholder;", "modifier": "private final", "type": "Placeholder<T>", "declarator": "placeholder", "var_name": "placeholder"}, {"original_string": "@Nullable private final T placeholderSource;", "modifier": "@Nullable private final", "type": "T", "declarator": "placeholderSource", "var_name": "placeholderSource"}], "methods": [{"identifier": "ImmutablePlaceholderResolver", "parameters": "(final Placeholder<T> placeholder, @Nullable final T placeholderSource)", "modifiers": "", "return": "", "signature": " ImmutablePlaceholderResolver(final Placeholder<T> placeholder, @Nullable final T placeholderSource)", "full_signature": "  ImmutablePlaceholderResolver(final Placeholder<T> placeholder, @Nullable final T placeholderSource)", "class_method_signature": "ImmutablePlaceholderResolver.ImmutablePlaceholderResolver(final Placeholder<T> placeholder, @Nullable final T placeholderSource)", "testcase": false, "constructor": true}, {"identifier": "getPlaceholderSource", "parameters": "()", "modifiers": "@Override public", "return": "Optional<T>", "signature": "Optional<T> getPlaceholderSource()", "full_signature": "@Override public Optional<T> getPlaceholderSource()", "class_method_signature": "ImmutablePlaceholderResolver.getPlaceholderSource()", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final T placeholderSource, final String name)", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> resolve(final T placeholderSource, final String name)", "full_signature": "@Override public Optional<String> resolve(final T placeholderSource, final String name)", "class_method_signature": "ImmutablePlaceholderResolver.resolve(final T placeholderSource, final String name)", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPrefix()", "full_signature": "@Override public String getPrefix()", "class_method_signature": "ImmutablePlaceholderResolver.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "getSupportedNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getSupportedNames()", "full_signature": "@Override public List<String> getSupportedNames()", "class_method_signature": "ImmutablePlaceholderResolver.getSupportedNames()", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(final String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(final String name)", "full_signature": "@Override public boolean supports(final String name)", "class_method_signature": "ImmutablePlaceholderResolver.supports(final String name)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "ImmutablePlaceholderResolver.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutablePlaceholderResolver.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutablePlaceholderResolver.toString()", "testcase": false, "constructor": false}], "file": "model/placeholders/src/main/java/org/eclipse/ditto/model/placeholders/ImmutablePlaceholderResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final T placeholderSource, final String name)", "modifiers": "@Override public", "return": "Optional<String>", "body": "@Override\n    public Optional<String> resolve(final T placeholderSource, final String name) {\n        return placeholder.resolve(placeholderSource, name);\n    }", "signature": "Optional<String> resolve(final T placeholderSource, final String name)", "full_signature": "@Override public Optional<String> resolve(final T placeholderSource, final String name)", "class_method_signature": "ImmutablePlaceholderResolver.resolve(final T placeholderSource, final String name)", "testcase": false, "constructor": false, "invocations": ["resolve"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}