{"test_class": {"identifier": "TetrahedralElementEncoderFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/stereo/TetrahedralElementEncoderFactoryTest.java"}, "test_case": {"identifier": "createImplicitH_back", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createImplicitH_back() throws Exception {\n\n        IAtomContainer container = mock(IAtomContainer.class);\n\n        IAtom c1 = mock(IAtom.class);\n        IAtom o2 = mock(IAtom.class);\n        IAtom n3 = mock(IAtom.class);\n        IAtom c4 = mock(IAtom.class);\n\n        when(container.getAtom(0)).thenReturn(c1);\n        when(container.getAtom(1)).thenReturn(o2);\n        when(container.getAtom(2)).thenReturn(n3);\n        when(container.getAtom(3)).thenReturn(c4);\n\n        when(container.atoms()).thenReturn(Arrays.asList(c1, o2, n3, c4));\n\n        ITetrahedralChirality tc = mock(ITetrahedralChirality.class);\n        when(tc.getChiralAtom()).thenReturn(c1);\n        when(tc.getLigands()).thenReturn(new IAtom[]{o2, n3, c4, c1 // <-- represents implicit H\n                });\n        when(tc.getStereo()).thenReturn(ITetrahedralChirality.Stereo.CLOCKWISE);\n        when(container.stereoElements()).thenReturn(Collections.<IStereoElement> singleton(tc));\n\n        StereoEncoder encoder = new TetrahedralElementEncoderFactory().create(container, new int[0][0]); // graph not used\n\n        assertThat(getGeometricParity(encoder).parity(), is(-1)); // clockwise (we didn't have to move the implied H)\n    }", "signature": "void createImplicitH_back()", "full_signature": "@Test public void createImplicitH_back()", "class_method_signature": "TetrahedralElementEncoderFactoryTest.createImplicitH_back()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "atoms", "asList", "mock", "thenReturn", "when", "getChiralAtom", "thenReturn", "when", "getLigands", "thenReturn", "when", "getStereo", "thenReturn", "when", "stereoElements", "singleton", "create", "assertThat", "parity", "getGeometricParity", "is"]}, "focal_class": {"identifier": "TetrahedralElementEncoderFactory", "superclass": "", "interfaces": "implements StereoEncoderFactory", "fields": [], "methods": [{"identifier": "create", "parameters": "(IAtomContainer container, int[][] graph)", "modifiers": "@Override public", "return": "StereoEncoder", "signature": "StereoEncoder create(IAtomContainer container, int[][] graph)", "full_signature": "@Override public StereoEncoder create(IAtomContainer container, int[][] graph)", "class_method_signature": "TetrahedralElementEncoderFactory.create(IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "encoder", "parameters": "(ITetrahedralChirality tc, Map<IAtom, Integer> atomToIndex)", "modifiers": "private static", "return": "GeometryEncoder", "signature": "GeometryEncoder encoder(ITetrahedralChirality tc, Map<IAtom, Integer> atomToIndex)", "full_signature": "private static GeometryEncoder encoder(ITetrahedralChirality tc, Map<IAtom, Integer> atomToIndex)", "class_method_signature": "TetrahedralElementEncoderFactory.encoder(ITetrahedralChirality tc, Map<IAtom, Integer> atomToIndex)", "testcase": false, "constructor": false}, {"identifier": "indexMap", "parameters": "(Map<IAtom, Integer> map, IAtomContainer container)", "modifiers": "private static", "return": "Map<IAtom, Integer>", "signature": "Map<IAtom, Integer> indexMap(Map<IAtom, Integer> map, IAtomContainer container)", "full_signature": "private static Map<IAtom, Integer> indexMap(Map<IAtom, Integer> map, IAtomContainer container)", "class_method_signature": "TetrahedralElementEncoderFactory.indexMap(Map<IAtom, Integer> map, IAtomContainer container)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/stereo/TetrahedralElementEncoderFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(IAtomContainer container, int[][] graph)", "modifiers": "@Override public", "return": "StereoEncoder", "body": "@Override\n    public StereoEncoder create(IAtomContainer container, int[][] graph) {\n\n        // index atoms for quick lookup - wish we didn't have to do this\n        // but the it's better than calling getAtomNumber every time - we use\n        // a lazy creation so it's only created if there was a need for it\n        Map<IAtom, Integer> atomToIndex = null;\n\n        List<StereoEncoder> encoders = new ArrayList<StereoEncoder>();\n\n        // for each tetrahedral element - create a new encoder\n        for (IStereoElement se : container.stereoElements()) {\n            if (se instanceof ITetrahedralChirality) {\n                encoders.add(encoder((ITetrahedralChirality) se, atomToIndex = indexMap(atomToIndex, container)));\n            }\n        }\n\n        return encoders.isEmpty() ? StereoEncoder.EMPTY : new MultiStereoEncoder(encoders);\n    }", "signature": "StereoEncoder create(IAtomContainer container, int[][] graph)", "full_signature": "@Override public StereoEncoder create(IAtomContainer container, int[][] graph)", "class_method_signature": "TetrahedralElementEncoderFactory.create(IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false, "invocations": ["stereoElements", "add", "encoder", "indexMap", "isEmpty"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}