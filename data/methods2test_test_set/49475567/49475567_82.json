{"test_class": {"identifier": "FieldTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ByteBuffer buffer;", "modifier": "private", "type": "ByteBuffer", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private Field field;", "modifier": "private", "type": "Field", "declarator": "field", "var_name": "field"}], "file": "geoclient-core/src/test/java/gov/nyc/doitt/gis/geoclient/function/FieldTest.java"}, "test_case": {"identifier": "testGetBytes_null", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetBytes_null()\n    {\n        byte[] actualBytes = field.getBytes(null);\n        assertEquals(\"    \", new String(actualBytes));\n    }", "signature": "void testGetBytes_null()", "full_signature": "@Test public void testGetBytes_null()", "class_method_signature": "FieldTest.testGetBytes_null()", "testcase": true, "constructor": false, "invocations": ["getBytes", "assertEquals"]}, "focal_class": {"identifier": "Field", "superclass": "", "interfaces": "implements Comparable<Field>", "fields": [{"original_string": "public final static Comparator<Field> DEFAULT_SORT = new Field.StartLengthComparator();", "modifier": "public final static", "type": "Comparator<Field>", "declarator": "DEFAULT_SORT = new Field.StartLengthComparator()", "var_name": "DEFAULT_SORT"}, {"original_string": "public final static Comparator<Field> NAME_SORT = new Field.NameStartLengthComparator();", "modifier": "public final static", "type": "Comparator<Field>", "declarator": "NAME_SORT = new Field.NameStartLengthComparator()", "var_name": "NAME_SORT"}, {"original_string": "private final static Logger log = LoggerFactory.getLogger(Field.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Field.class)", "var_name": "log"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final Integer start;", "modifier": "private final", "type": "Integer", "declarator": "start", "var_name": "start"}, {"original_string": "private final Integer length;", "modifier": "private final", "type": "Integer", "declarator": "length", "var_name": "length"}, {"original_string": "private final boolean composite;", "modifier": "private final", "type": "boolean", "declarator": "composite", "var_name": "composite"}, {"original_string": "private final boolean input;", "modifier": "private final", "type": "boolean", "declarator": "input", "var_name": "input"}, {"original_string": "private final String alias;", "modifier": "private final", "type": "String", "declarator": "alias", "var_name": "alias"}, {"original_string": "private final boolean whitespaceSignificant;", "modifier": "private final", "type": "boolean", "declarator": "whitespaceSignificant", "var_name": "whitespaceSignificant"}], "methods": [{"identifier": "Field", "parameters": "(String id, Integer start, Integer length)", "modifiers": "public", "return": "", "signature": " Field(String id, Integer start, Integer length)", "full_signature": "public  Field(String id, Integer start, Integer length)", "class_method_signature": "Field.Field(String id, Integer start, Integer length)", "testcase": false, "constructor": true}, {"identifier": "Field", "parameters": "(String id, Integer start, Integer length, boolean composite)", "modifiers": "public", "return": "", "signature": " Field(String id, Integer start, Integer length, boolean composite)", "full_signature": "public  Field(String id, Integer start, Integer length, boolean composite)", "class_method_signature": "Field.Field(String id, Integer start, Integer length, boolean composite)", "testcase": false, "constructor": true}, {"identifier": "Field", "parameters": "(String id, Integer start, Integer length, boolean composite, boolean input, String alias)", "modifiers": "public", "return": "", "signature": " Field(String id, Integer start, Integer length, boolean composite, boolean input, String alias)", "full_signature": "public  Field(String id, Integer start, Integer length, boolean composite, boolean input, String alias)", "class_method_signature": "Field.Field(String id, Integer start, Integer length, boolean composite, boolean input, String alias)", "testcase": false, "constructor": true}, {"identifier": "Field", "parameters": "(String id, Integer start, Integer length, boolean composite, boolean input, String alias,\n            boolean whitespace)", "modifiers": "public", "return": "", "signature": " Field(String id, Integer start, Integer length, boolean composite, boolean input, String alias,\n            boolean whitespace)", "full_signature": "public  Field(String id, Integer start, Integer length, boolean composite, boolean input, String alias,\n            boolean whitespace)", "class_method_signature": "Field.Field(String id, Integer start, Integer length, boolean composite, boolean input, String alias,\n            boolean whitespace)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(ByteBuffer buffer)", "modifiers": "public", "return": "void", "signature": "void write(ByteBuffer buffer)", "full_signature": "public void write(ByteBuffer buffer)", "class_method_signature": "Field.write(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Object value, ByteBuffer buffer)", "modifiers": "public", "return": "void", "signature": "void write(Object value, ByteBuffer buffer)", "full_signature": "public void write(Object value, ByteBuffer buffer)", "class_method_signature": "Field.write(Object value, ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(ByteBuffer buffer)", "modifiers": "public", "return": "String", "signature": "String read(ByteBuffer buffer)", "full_signature": "public String read(ByteBuffer buffer)", "class_method_signature": "Field.read(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "isComposite", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isComposite()", "full_signature": "public boolean isComposite()", "class_method_signature": "Field.isComposite()", "testcase": false, "constructor": false}, {"identifier": "getAlias", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAlias()", "full_signature": "public String getAlias()", "class_method_signature": "Field.getAlias()", "testcase": false, "constructor": false}, {"identifier": "isAliased", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAliased()", "full_signature": "public boolean isAliased()", "class_method_signature": "Field.isAliased()", "testcase": false, "constructor": false}, {"identifier": "isInput", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInput()", "full_signature": "public boolean isInput()", "class_method_signature": "Field.isInput()", "testcase": false, "constructor": false}, {"identifier": "isWhitespaceSignificant", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWhitespaceSignificant()", "full_signature": "public boolean isWhitespaceSignificant()", "class_method_signature": "Field.isWhitespaceSignificant()", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(Object value)", "modifiers": "protected", "return": "byte[]", "signature": "byte[] getBytes(Object value)", "full_signature": "protected byte[] getBytes(Object value)", "class_method_signature": "Field.getBytes(Object value)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Field o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Field o)", "full_signature": "@Override public int compareTo(Field o)", "class_method_signature": "Field.compareTo(Field o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Field.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Field.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getLength()", "full_signature": "public Integer getLength()", "class_method_signature": "Field.getLength()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "Field.getId()", "testcase": false, "constructor": false}, {"identifier": "getStart", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getStart()", "full_signature": "public Integer getStart()", "class_method_signature": "Field.getStart()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Field.toString()", "testcase": false, "constructor": false}], "file": "geoclient-core/src/main/java/gov/nyc/doitt/gis/geoclient/function/Field.java"}, "focal_method": {"identifier": "getBytes", "parameters": "(Object value)", "modifiers": "protected", "return": "byte[]", "body": "protected byte[] getBytes(Object value)\n    {\n        // Allocate result array\n        byte[] bytes = new byte[this.length];\n        // Fill with blanks\n        Arrays.fill(bytes, (byte) ' ');\n        // Set value or null\n        String stringValue = value == null ? null : value.toString();\n        if (stringValue != null && !stringValue.equals(\"\"))\n        {\n            // Value is not null and not the empty string: copy over values to\n            // result\n            byte[] valueBytes = value.toString().getBytes();\n            // Make sure not to copy more bytes than exist in the dest array\n            int numberToCopy = valueBytes.length > this.length ? this.length : valueBytes.length;\n            // Copy to result\n            System.arraycopy(valueBytes, 0, bytes, 0, numberToCopy);\n        }\n        return bytes;\n    }", "signature": "byte[] getBytes(Object value)", "full_signature": "protected byte[] getBytes(Object value)", "class_method_signature": "Field.getBytes(Object value)", "testcase": false, "constructor": false, "invocations": ["fill", "toString", "equals", "getBytes", "toString", "arraycopy"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}