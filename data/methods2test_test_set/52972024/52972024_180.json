{"test_class": {"identifier": "FeaturesCreatorActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IStrategyContainer container = new StrategyContainer();", "modifier": "private", "type": "IStrategyContainer", "declarator": "container = new StrategyContainer()", "var_name": "container"}], "file": "CoreFeatures/FeatureManagement/FeatureCreatorActor/src/test/java/info/smart_tools/smartactors/feature_management/feature_creator_actor/FeaturesCreatorActorTest.java"}, "test_case": {"identifier": "checkCreationFeatureByMessageMethodBasedOnZipFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkCreationFeatureByMessageMethodBasedOnZipFile()\n            throws Exception {\n        List<IObject> repositoryStorage = new ArrayList<>();\n        IOC.register(Keys.getOrAdd(\"feature-repositories\"), new SingletonStrategy(repositoryStorage));\n\n        FeaturesCreatorActor actor = new FeaturesCreatorActor();\n        CreateFeaturesWrapper wrapper = mock(CreateFeaturesWrapper.class);\n        IObject json = new DSObject(\n                \"{\\\"features\\\": [{\\\"name\\\":\\\"test-feature\\\",\\\"version\\\":null,\\\"group\\\":null}]}\"\n        );\n        ((List<IObject>) json.getValue(new FieldName(\"features\"))).get(0).setValue(new FieldName(\"featureLocation\"), new Path(\"target/test-classes/test-feature-0.0.1-archive.zip\"));\n        when(wrapper.getFeaturesDescription()).thenReturn(\n                (List<IObject>) json.getValue(new FieldName(\"features\"))\n        );\n        Collection<IFeature> features = new HashSet<>();\n        doAnswer(invocationOnMock -> {\n            try {\n                ((Collection<IFeature>)invocationOnMock.getArguments()[0]).forEach((f) -> {\n                    features.add(f);\n                });\n            } catch (Throwable e) {\n                throw new RuntimeException(e);\n            }\n            return null;\n        }).when(wrapper).setFeatures(any());\n        actor.createFeaturesByMessage(wrapper);\n        assertEquals(features.size(), 1);\n        assertEquals(((IFeature) features.toArray()[0]).getName(), \"test-feature\");\n        assertEquals(((IFeature) features.toArray()[0]).getGroupId(), null);\n        assertEquals(((IFeature) features.toArray()[0]).getVersion(), null);\n        assertEquals(((IFeature) features.toArray()[0]).getFeatureLocation(), new Path(\"target/test-classes/test-feature-0.0.1-archive.zip\"));\n    }", "signature": "void checkCreationFeatureByMessageMethodBasedOnZipFile()", "full_signature": "@Test public void checkCreationFeatureByMessageMethodBasedOnZipFile()", "class_method_signature": "FeaturesCreatorActorTest.checkCreationFeatureByMessageMethodBasedOnZipFile()", "testcase": true, "constructor": false, "invocations": ["register", "getOrAdd", "mock", "setValue", "get", "getValue", "thenReturn", "when", "getFeaturesDescription", "getValue", "setFeatures", "when", "doAnswer", "forEach", "getArguments", "add", "any", "createFeaturesByMessage", "assertEquals", "size", "assertEquals", "getName", "toArray", "assertEquals", "getGroupId", "toArray", "assertEquals", "getVersion", "toArray", "assertEquals", "getFeatureLocation", "toArray"]}, "focal_class": {"identifier": "FeaturesCreatorActor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IFieldName nameFN;", "modifier": "private final", "type": "IFieldName", "declarator": "nameFN", "var_name": "nameFN"}, {"original_string": "private final IFieldName groupFN;", "modifier": "private final", "type": "IFieldName", "declarator": "groupFN", "var_name": "groupFN"}, {"original_string": "private final IFieldName versionFN;", "modifier": "private final", "type": "IFieldName", "declarator": "versionFN", "var_name": "versionFN"}, {"original_string": "private final IFieldName featureLocationFN;", "modifier": "private final", "type": "IFieldName", "declarator": "featureLocationFN", "var_name": "featureLocationFN"}, {"original_string": "private final IFieldName featuresFN;", "modifier": "private final", "type": "IFieldName", "declarator": "featuresFN", "var_name": "featuresFN"}, {"original_string": "private final IFieldName repositoriesFN;", "modifier": "private final", "type": "IFieldName", "declarator": "repositoriesFN", "var_name": "repositoriesFN"}], "methods": [{"identifier": "FeaturesCreatorActor", "parameters": "()", "modifiers": "public", "return": "", "signature": " FeaturesCreatorActor()", "full_signature": "public  FeaturesCreatorActor()", "class_method_signature": "FeaturesCreatorActor.FeaturesCreatorActor()", "testcase": false, "constructor": true}, {"identifier": "createMessageByFile", "parameters": "(final CreateMessageWrapper wrapper)", "modifiers": "public", "return": "void", "signature": "void createMessageByFile(final CreateMessageWrapper wrapper)", "full_signature": "public void createMessageByFile(final CreateMessageWrapper wrapper)", "class_method_signature": "FeaturesCreatorActor.createMessageByFile(final CreateMessageWrapper wrapper)", "testcase": false, "constructor": false}, {"identifier": "createFeaturesByMessage", "parameters": "(final CreateFeaturesWrapper wrapper)", "modifiers": "public", "return": "void", "signature": "void createFeaturesByMessage(final CreateFeaturesWrapper wrapper)", "full_signature": "public void createFeaturesByMessage(final CreateFeaturesWrapper wrapper)", "class_method_signature": "FeaturesCreatorActor.createFeaturesByMessage(final CreateFeaturesWrapper wrapper)", "testcase": false, "constructor": false}, {"identifier": "createJsonFeatureDescriptionByZip", "parameters": "(final File file, final String observedDirectory)", "modifiers": "private", "return": "List<IObject>", "signature": "List<IObject> createJsonFeatureDescriptionByZip(final File file, final String observedDirectory)", "full_signature": "private List<IObject> createJsonFeatureDescriptionByZip(final File file, final String observedDirectory)", "class_method_signature": "FeaturesCreatorActor.createJsonFeatureDescriptionByZip(final File file, final String observedDirectory)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "(final File file, final IFieldName fieldName)", "modifiers": "private", "return": "List<IObject>", "signature": "List<IObject> getDescription(final File file, final IFieldName fieldName)", "full_signature": "private List<IObject> getDescription(final File file, final IFieldName fieldName)", "class_method_signature": "FeaturesCreatorActor.getDescription(final File file, final IFieldName fieldName)", "testcase": false, "constructor": false}], "file": "CoreFeatures/FeatureManagement/FeatureCreatorActor/src/main/java/info/smart_tools/smartactors/feature_management/feature_creator_actor/FeaturesCreatorActor.java"}, "focal_method": {"identifier": "createFeaturesByMessage", "parameters": "(final CreateFeaturesWrapper wrapper)", "modifiers": "public", "return": "void", "body": "public void createFeaturesByMessage(final CreateFeaturesWrapper wrapper)\n            throws FeatureCreationException {\n        try {\n            Map<String, IFeature> features = new HashMap<>();\n            List<IObject> repositories = wrapper.getRepositoriesDescription();\n            List<IObject> repositoryStorage = IOC.resolve(Keys.getOrAdd(\"feature-repositories\"));\n\n            if (null != repositories) {\n                for (IObject repository : repositories) {\n                    repositoryStorage.add(repository);\n                }\n            }\n            List<IObject> featuresFromJson = wrapper.getFeaturesDescription();\n            if (null != featuresFromJson) {\n                for (IObject feature : featuresFromJson) {\n                    String name = (String) feature.getValue(this.nameFN);\n                    if (null != feature.getValue(this.groupFN)) {\n                        features.put(name, new Feature(\n                                        name,\n                                        (String) feature.getValue(this.groupFN),\n                                        (String) feature.getValue(this.versionFN),\n                                        //(IPath) feature.getValue(this.featureLocationFN)\n                                        new Path(wrapper.getFeatureDirectory())\n                                )\n                        );\n                    } else {\n                        features.put(name, new Feature(\n                                        name,\n                                        null,\n                                        (IPath) feature.getValue(this.featureLocationFN)\n                                        //new Path(wrapper.getFeatureDirectory())\n                                )\n                        );\n                    }\n                }\n            }\n\n            wrapper.setFeatures(features.values());\n        } catch (ResolutionException | ChangeValueException | ReadValueException | InvalidArgumentException e) {\n            throw new FeatureCreationException(e);\n        }\n    }", "signature": "void createFeaturesByMessage(final CreateFeaturesWrapper wrapper)", "full_signature": "public void createFeaturesByMessage(final CreateFeaturesWrapper wrapper)", "class_method_signature": "FeaturesCreatorActor.createFeaturesByMessage(final CreateFeaturesWrapper wrapper)", "testcase": false, "constructor": false, "invocations": ["getRepositoriesDescription", "resolve", "getOrAdd", "add", "getFeaturesDescription", "getValue", "getValue", "put", "getValue", "getValue", "getFeatureDirectory", "put", "getValue", "setFeatures", "values"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}