{"test_class": {"identifier": "AmqpConsumerActorTest", "superclass": "extends AbstractConsumerActorTest<JmsMessage>", "interfaces": "", "fields": [{"original_string": "private static final Connection CONNECTION = TestConstants.createConnectionWithAcknowledgements();", "modifier": "private static final", "type": "Connection", "declarator": "CONNECTION = TestConstants.createConnectionWithAcknowledgements()", "var_name": "CONNECTION"}, {"original_string": "private static final ConnectionId CONNECTION_ID = CONNECTION.getId();", "modifier": "private static final", "type": "ConnectionId", "declarator": "CONNECTION_ID = CONNECTION.getId()", "var_name": "CONNECTION_ID"}, {"original_string": "private final ConcurrentMap<JmsAcknowledgeCallback, Integer> ackStates = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<JmsAcknowledgeCallback, Integer>", "declarator": "ackStates = new ConcurrentHashMap<>()", "var_name": "ackStates"}, {"original_string": "private final BlockingQueue<Integer> jmsAcks = new LinkedBlockingQueue<>();", "modifier": "private final", "type": "BlockingQueue<Integer>", "declarator": "jmsAcks = new LinkedBlockingQueue<>()", "var_name": "jmsAcks"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/amqp/AmqpConsumerActorTest.java"}, "test_case": {"identifier": "jmsMessageWithNullPropertyAndNullContentTypeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void jmsMessageWithNullPropertyAndNullContentTypeTest() throws JMSException {\n        new TestKit(actorSystem) {{\n\n            final ActorRef testActor = getTestActor();\n            final ActorRef processor = setupActor(testActor, null);\n\n            final Source source = Mockito.mock(Source.class);\n            Mockito.when(source.getAuthorizationContext())\n                    .thenReturn(TestConstants.Authorization.AUTHORIZATION_CONTEXT);\n            Mockito.when(source.getHeaderMapping())\n                    .thenReturn(Optional.of(ConnectivityModelFactory.newHeaderMapping(\n                            Collections.singletonMap(\"correlation-id\", \"{{ header:correlation-id }}\")\n                    )));\n            final ActorRef underTest = actorSystem.actorOf(\n                    AmqpConsumerActor.props(CONNECTION_ID,\n                            consumerData(\"foo123\", Mockito.mock(MessageConsumer.class), source), processor,\n                            getRef()));\n\n            final String correlationId = \"cor-\";\n            final String plainPayload =\n                    \"{ \\\"topic\\\": \\\"org.eclipse.ditto.test/testThing/things/twin/commands/modify\\\",\" +\n                            \" \\\"headers\\\":{\\\"device_id\\\":\\\"org.eclipse.ditto.test:testThing\\\"},\" +\n                            \" \\\"path\\\": \\\"/features/point/properties/x\\\", \\\"value\\\": 42 }\";\n\n            final AmqpJmsTextMessageFacade messageFacade = new AmqpJmsTextMessageFacade();\n            messageFacade.setApplicationProperty(\"JMSXDeliveryCount\", null);\n            messageFacade.setText(plainPayload);\n            messageFacade.setContentType(null);\n            messageFacade.setCorrelationId(correlationId);\n            final JmsMessage jmsMessage = messageFacade.asJmsMessage();\n            underTest.tell(jmsMessage, null);\n\n            final Command<?> command = expectMsgClass(Command.class);\n            assertThat(command.getType()).isEqualTo(ModifyFeatureProperty.TYPE);\n            assertThat(command.getDittoHeaders().getCorrelationId()).contains(correlationId);\n            assertThat(command.getDittoHeaders().getContentType()).isEmpty();\n            assertThat(command.getDittoHeaders().get(\"JMSXDeliveryCount\")).isNull();\n            assertThat(((ModifyFeatureProperty) command).getPropertyPointer()).isEqualTo(JsonPointer.of(\"/x\"));\n            assertThat(((ModifyFeatureProperty) command).getPropertyValue()).isEqualTo(JsonValue.of(42));\n        }};\n    }", "signature": "void jmsMessageWithNullPropertyAndNullContentTypeTest()", "full_signature": "@Test public void jmsMessageWithNullPropertyAndNullContentTypeTest()", "class_method_signature": "AmqpConsumerActorTest.jmsMessageWithNullPropertyAndNullContentTypeTest()", "testcase": true, "constructor": false, "invocations": ["getTestActor", "setupActor", "mock", "thenReturn", "when", "getAuthorizationContext", "thenReturn", "when", "getHeaderMapping", "of", "newHeaderMapping", "singletonMap", "actorOf", "props", "consumerData", "mock", "getRef", "setApplicationProperty", "setText", "setContentType", "setCorrelationId", "asJmsMessage", "tell", "expectMsgClass", "isEqualTo", "assertThat", "getType", "contains", "assertThat", "getCorrelationId", "getDittoHeaders", "isEmpty", "assertThat", "getContentType", "getDittoHeaders", "isNull", "assertThat", "get", "getDittoHeaders", "isEqualTo", "assertThat", "getPropertyPointer", "of", "isEqualTo", "assertThat", "getPropertyValue", "of"]}, "focal_class": {"identifier": "AmqpConsumerActor", "superclass": "extends BaseConsumerActor", "interfaces": "implements MessageListener, MessageRateLimiterBehavior<String>", "fields": [{"original_string": "static final String ACTOR_NAME_PREFIX = \"amqpConsumerActor-\";", "modifier": "static final", "type": "String", "declarator": "ACTOR_NAME_PREFIX = \"amqpConsumerActor-\"", "var_name": "ACTOR_NAME_PREFIX"}, {"original_string": "private final DittoDiagnosticLoggingAdapter log = DittoLoggerFactory.getDiagnosticLoggingAdapter(this);", "modifier": "private final", "type": "DittoDiagnosticLoggingAdapter", "declarator": "log = DittoLoggerFactory.getDiagnosticLoggingAdapter(this)", "var_name": "log"}, {"original_string": "private final EnforcementFilterFactory<Map<String, String>, CharSequence> headerEnforcementFilterFactory;", "modifier": "private final", "type": "EnforcementFilterFactory<Map<String, String>, CharSequence>", "declarator": "headerEnforcementFilterFactory", "var_name": "headerEnforcementFilterFactory"}, {"original_string": "private final MessageRateLimiter<String> messageRateLimiter;", "modifier": "private final", "type": "MessageRateLimiter<String>", "declarator": "messageRateLimiter", "var_name": "messageRateLimiter"}, {"original_string": "private final ActorRef jmsActor;", "modifier": "private final", "type": "ActorRef", "declarator": "jmsActor", "var_name": "jmsActor"}, {"original_string": "private final Duration jmsActorAskTimeout;", "modifier": "private final", "type": "Duration", "declarator": "jmsActorAskTimeout", "var_name": "jmsActorAskTimeout"}, {"original_string": "private ConsumerData consumerData;", "modifier": "private", "type": "ConsumerData", "declarator": "consumerData", "var_name": "consumerData"}, {"original_string": "@Nullable\n    private MessageConsumer messageConsumer;", "modifier": "@Nullable\n    private", "type": "MessageConsumer", "declarator": "messageConsumer", "var_name": "messageConsumer"}], "methods": [{"identifier": "AmqpConsumerActor", "parameters": "(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "", "signature": " AmqpConsumerActor(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor)", "full_signature": "@SuppressWarnings(\"unused\") private  AmqpConsumerActor(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor)", "class_method_signature": "AmqpConsumerActor.AmqpConsumerActor(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor)", "testcase": false, "constructor": true}, {"identifier": "props", "parameters": "(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor)", "modifiers": "static", "return": "Props", "signature": "Props props(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor)", "full_signature": "static Props props(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor)", "class_method_signature": "AmqpConsumerActor.props(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor)", "testcase": false, "constructor": false}, {"identifier": "createReceive", "parameters": "()", "modifiers": "@Override public", "return": "Receive", "signature": "Receive createReceive()", "full_signature": "@Override public Receive createReceive()", "class_method_signature": "AmqpConsumerActor.createReceive()", "testcase": false, "constructor": false}, {"identifier": "preStart", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preStart()", "full_signature": "@Override public void preStart()", "class_method_signature": "AmqpConsumerActor.preStart()", "testcase": false, "constructor": false}, {"identifier": "postStop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void postStop()", "full_signature": "@Override public void postStop()", "class_method_signature": "AmqpConsumerActor.postStop()", "testcase": false, "constructor": false}, {"identifier": "onMessage", "parameters": "(final Message message)", "modifiers": "@Override public", "return": "void", "signature": "void onMessage(final Message message)", "full_signature": "@Override public void onMessage(final Message message)", "class_method_signature": "AmqpConsumerActor.onMessage(final Message message)", "testcase": false, "constructor": false}, {"identifier": "stopMessageConsumer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopMessageConsumer()", "full_signature": "private void stopMessageConsumer()", "class_method_signature": "AmqpConsumerActor.stopMessageConsumer()", "testcase": false, "constructor": false}, {"identifier": "startMessageConsumer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startMessageConsumer()", "full_signature": "private void startMessageConsumer()", "class_method_signature": "AmqpConsumerActor.startMessageConsumer()", "testcase": false, "constructor": false}, {"identifier": "stopMessageConsumerDueToRateLimit", "parameters": "(final String reason)", "modifiers": "@Override public", "return": "void", "signature": "void stopMessageConsumerDueToRateLimit(final String reason)", "full_signature": "@Override public void stopMessageConsumerDueToRateLimit(final String reason)", "class_method_signature": "AmqpConsumerActor.stopMessageConsumerDueToRateLimit(final String reason)", "testcase": false, "constructor": false}, {"identifier": "startMessageConsumerDueToRateLimit", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startMessageConsumerDueToRateLimit()", "full_signature": "@Override public void startMessageConsumerDueToRateLimit()", "class_method_signature": "AmqpConsumerActor.startMessageConsumerDueToRateLimit()", "testcase": false, "constructor": false}, {"identifier": "getMessageRateLimiter", "parameters": "()", "modifiers": "@Override public", "return": "MessageRateLimiter<String>", "signature": "MessageRateLimiter<String> getMessageRateLimiter()", "full_signature": "@Override public MessageRateLimiter<String> getMessageRateLimiter()", "class_method_signature": "AmqpConsumerActor.getMessageRateLimiter()", "testcase": false, "constructor": false}, {"identifier": "initMessageConsumer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initMessageConsumer()", "full_signature": "private void initMessageConsumer()", "class_method_signature": "AmqpConsumerActor.initMessageConsumer()", "testcase": false, "constructor": false}, {"identifier": "destroyMessageConsumer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void destroyMessageConsumer()", "full_signature": "private void destroyMessageConsumer()", "class_method_signature": "AmqpConsumerActor.destroyMessageConsumer()", "testcase": false, "constructor": false}, {"identifier": "matchesOwnConsumer", "parameters": "(final ConsumerClosedStatusReport event)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesOwnConsumer(final ConsumerClosedStatusReport event)", "full_signature": "private boolean matchesOwnConsumer(final ConsumerClosedStatusReport event)", "class_method_signature": "AmqpConsumerActor.matchesOwnConsumer(final ConsumerClosedStatusReport event)", "testcase": false, "constructor": false}, {"identifier": "handleConsumerClosed", "parameters": "(final ConsumerClosedStatusReport event)", "modifiers": "private", "return": "void", "signature": "void handleConsumerClosed(final ConsumerClosedStatusReport event)", "full_signature": "private void handleConsumerClosed(final ConsumerClosedStatusReport event)", "class_method_signature": "AmqpConsumerActor.handleConsumerClosed(final ConsumerClosedStatusReport event)", "testcase": false, "constructor": false}, {"identifier": "messageConsumerCreated", "parameters": "(final CreateMessageConsumerResponse response)", "modifiers": "private", "return": "void", "signature": "void messageConsumerCreated(final CreateMessageConsumerResponse response)", "full_signature": "private void messageConsumerCreated(final CreateMessageConsumerResponse response)", "class_method_signature": "AmqpConsumerActor.messageConsumerCreated(final CreateMessageConsumerResponse response)", "testcase": false, "constructor": false}, {"identifier": "messageConsumerFailed", "parameters": "(final Status.Failure failure)", "modifiers": "private", "return": "void", "signature": "void messageConsumerFailed(final Status.Failure failure)", "full_signature": "private void messageConsumerFailed(final Status.Failure failure)", "class_method_signature": "AmqpConsumerActor.messageConsumerFailed(final Status.Failure failure)", "testcase": false, "constructor": false}, {"identifier": "handleJmsMessage", "parameters": "(final JmsMessage message)", "modifiers": "private", "return": "void", "signature": "void handleJmsMessage(final JmsMessage message)", "full_signature": "private void handleJmsMessage(final JmsMessage message)", "class_method_signature": "AmqpConsumerActor.handleJmsMessage(final JmsMessage message)", "testcase": false, "constructor": false}, {"identifier": "acknowledge", "parameters": "(final JmsMessage message, final boolean isSuccess, final boolean redeliver,\n            final Map<String, String> externalMessageHeaders)", "modifiers": "private", "return": "void", "signature": "void acknowledge(final JmsMessage message, final boolean isSuccess, final boolean redeliver,\n            final Map<String, String> externalMessageHeaders)", "full_signature": "private void acknowledge(final JmsMessage message, final boolean isSuccess, final boolean redeliver,\n            final Map<String, String> externalMessageHeaders)", "class_method_signature": "AmqpConsumerActor.acknowledge(final JmsMessage message, final boolean isSuccess, final boolean redeliver,\n            final Map<String, String> externalMessageHeaders)", "testcase": false, "constructor": false}, {"identifier": "extractPayloadFromMessage", "parameters": "(final JmsMessage message,\n            final ExternalMessageBuilder builder, @Nullable final String correlationId)", "modifiers": "private", "return": "ExternalMessageBuilder", "signature": "ExternalMessageBuilder extractPayloadFromMessage(final JmsMessage message,\n            final ExternalMessageBuilder builder, @Nullable final String correlationId)", "full_signature": "private ExternalMessageBuilder extractPayloadFromMessage(final JmsMessage message,\n            final ExternalMessageBuilder builder, @Nullable final String correlationId)", "class_method_signature": "AmqpConsumerActor.extractPayloadFromMessage(final JmsMessage message,\n            final ExternalMessageBuilder builder, @Nullable final String correlationId)", "testcase": false, "constructor": false}, {"identifier": "extractHeadersMapFromJmsMessage", "parameters": "(final JmsMessage message)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> extractHeadersMapFromJmsMessage(final JmsMessage message)", "full_signature": "private Map<String, String> extractHeadersMapFromJmsMessage(final JmsMessage message)", "class_method_signature": "AmqpConsumerActor.extractHeadersMapFromJmsMessage(final JmsMessage message)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "()", "modifiers": "@Override public", "return": "DittoDiagnosticLoggingAdapter", "signature": "DittoDiagnosticLoggingAdapter log()", "full_signature": "@Override public DittoDiagnosticLoggingAdapter log()", "class_method_signature": "AmqpConsumerActor.log()", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/amqp/AmqpConsumerActor.java"}, "focal_method": {"identifier": "props", "parameters": "(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor)", "modifiers": "static", "return": "Props", "body": "static Props props(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor) {\n\n        return Props.create(AmqpConsumerActor.class, connectionId, consumerData, messageMappingProcessor, jmsActor);\n    }", "signature": "Props props(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor)", "full_signature": "static Props props(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor)", "class_method_signature": "AmqpConsumerActor.props(final ConnectionId connectionId, final ConsumerData consumerData,\n            final ActorRef messageMappingProcessor, final ActorRef jmsActor)", "testcase": false, "constructor": false, "invocations": ["create"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}