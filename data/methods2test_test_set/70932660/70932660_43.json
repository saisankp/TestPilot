{"test_class": {"identifier": "NvaConfigurationTest", "superclass": "", "interfaces": "", "fields": [], "file": "nvadaemon-azure/src/test/java/com/microsoft/azure/practices/nvadaemon/config/NvaConfigurationTest.java"}, "test_case": {"identifier": "test_validate_invalid_probe_network_interfaces", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void test_validate_invalid_probe_network_interfaces() {\n        AzureClient azureClient = mock(AzureClient.class);\n        List<NamedResourceId> networkInterfaces = new ArrayList<>();\n        networkInterfaces.add(new NamedResourceId(\"nic1\", \"nic1-id\"));\n        NvaConfiguration nvaConfiguration = new NvaConfiguration(\"probe-network-interface\",\n            1234, networkInterfaces);\n        when(azureClient.checkExistenceById(anyString()))\n            .thenReturn(true);\n        when(azureClient.getNetworkInterfaceById(anyString()))\n            .thenReturn(null);\n        Assertions.assertThrows(ConfigurationException.class,\n            () -> nvaConfiguration.validate(azureClient));\n    }", "signature": "void test_validate_invalid_probe_network_interfaces()", "full_signature": "@Test void test_validate_invalid_probe_network_interfaces()", "class_method_signature": "NvaConfigurationTest.test_validate_invalid_probe_network_interfaces()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "thenReturn", "when", "checkExistenceById", "anyString", "thenReturn", "when", "getNetworkInterfaceById", "anyString", "assertThrows", "validate"]}, "focal_class": {"identifier": "NvaConfiguration", "superclass": "", "interfaces": "implements ConfigurationValidation", "fields": [{"original_string": "private String probeNetworkInterface;", "modifier": "private", "type": "String", "declarator": "probeNetworkInterface", "var_name": "probeNetworkInterface"}, {"original_string": "private int probePort;", "modifier": "private", "type": "int", "declarator": "probePort", "var_name": "probePort"}, {"original_string": "private List<NamedResourceId> networkInterfaces = new ArrayList<>();", "modifier": "private", "type": "List<NamedResourceId>", "declarator": "networkInterfaces = new ArrayList<>()", "var_name": "networkInterfaces"}, {"original_string": "@JsonIgnore\n    private SocketAddress probeSocketAddress;", "modifier": "@JsonIgnore\n    private", "type": "SocketAddress", "declarator": "probeSocketAddress", "var_name": "probeSocketAddress"}], "methods": [{"identifier": "NvaConfiguration", "parameters": "(@JsonProperty(\"probeNetworkInterface\")String probeNetworkInterface,\n                            @JsonProperty(\"probePort\")Integer probePort,\n                            @JsonProperty(\"networkInterfaces\")List<NamedResourceId> networkInterfaces)", "modifiers": "@JsonCreator public", "return": "", "signature": " NvaConfiguration(@JsonProperty(\"probeNetworkInterface\")String probeNetworkInterface,\n                            @JsonProperty(\"probePort\")Integer probePort,\n                            @JsonProperty(\"networkInterfaces\")List<NamedResourceId> networkInterfaces)", "full_signature": "@JsonCreator public  NvaConfiguration(@JsonProperty(\"probeNetworkInterface\")String probeNetworkInterface,\n                            @JsonProperty(\"probePort\")Integer probePort,\n                            @JsonProperty(\"networkInterfaces\")List<NamedResourceId> networkInterfaces)", "class_method_signature": "NvaConfiguration.NvaConfiguration(@JsonProperty(\"probeNetworkInterface\")String probeNetworkInterface,\n                            @JsonProperty(\"probePort\")Integer probePort,\n                            @JsonProperty(\"networkInterfaces\")List<NamedResourceId> networkInterfaces)", "testcase": false, "constructor": true}, {"identifier": "getProbeSocketAddress", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "SocketAddress", "signature": "SocketAddress getProbeSocketAddress()", "full_signature": "@JsonIgnore public SocketAddress getProbeSocketAddress()", "class_method_signature": "NvaConfiguration.getProbeSocketAddress()", "testcase": false, "constructor": false}, {"identifier": "getNetworkInterfaces", "parameters": "()", "modifiers": "public", "return": "List<NamedResourceId>", "signature": "List<NamedResourceId> getNetworkInterfaces()", "full_signature": "public List<NamedResourceId> getNetworkInterfaces()", "class_method_signature": "NvaConfiguration.getNetworkInterfaces()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(AzureClient azureClient)", "modifiers": "public", "return": "void", "signature": "void validate(AzureClient azureClient)", "full_signature": "public void validate(AzureClient azureClient)", "class_method_signature": "NvaConfiguration.validate(AzureClient azureClient)", "testcase": false, "constructor": false}], "file": "nvadaemon-azure/src/main/java/com/microsoft/azure/practices/nvadaemon/config/NvaConfiguration.java"}, "focal_method": {"identifier": "validate", "parameters": "(AzureClient azureClient)", "modifiers": "public", "return": "void", "body": "public void validate(AzureClient azureClient) throws ConfigurationException {\n        Preconditions.checkNotNull(azureClient, \"azureClient cannot be null\");\n\n        List<String> invalidNetworkInterfaces = this.networkInterfaces.stream()\n            .map(r -> r.getId())\n            .filter(id -> !azureClient.checkExistenceById(id))\n            .collect(Collectors.toList());\n        if (invalidNetworkInterfaces.size() > 0) {\n            throw new ConfigurationException(\"Invalid network interface(s): \" +\n                invalidNetworkInterfaces.stream().collect(Collectors.joining(\", \")));\n        }\n\n        // Get the probe network interface and save the private ip\n        NetworkInterface probeNetworkInterface =\n            azureClient.getNetworkInterfaceById(this.probeNetworkInterface);\n        if (probeNetworkInterface == null) {\n            throw new ConfigurationException(\"probeNetworkInterface '\" +\n                this.probeNetworkInterface + \"' does not exist\");\n        }\n\n        this.probeSocketAddress = new InetSocketAddress(probeNetworkInterface.primaryPrivateIp(),\n            this.probePort);\n    }", "signature": "void validate(AzureClient azureClient)", "full_signature": "public void validate(AzureClient azureClient)", "class_method_signature": "NvaConfiguration.validate(AzureClient azureClient)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "collect", "filter", "map", "stream", "getId", "checkExistenceById", "toList", "size", "collect", "stream", "joining", "getNetworkInterfaceById", "primaryPrivateIp"]}, "repository": {"repo_id": 70932660, "url": "https://github.com/mspnp/ha-nva", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 27, "size": 38331, "license": "licensed"}}