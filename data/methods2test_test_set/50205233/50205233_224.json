{"test_class": {"identifier": "ConversionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "debezium-core/src/test/java/io/debezium/time/ConversionsTest.java"}, "test_case": {"identifier": "shouldReturnSameLocalTimeInstanceWhenConvertingToLocalTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnSameLocalTimeInstanceWhenConvertingToLocalTime() {\n        LocalTime now = LocalTime.now();\n        assertThat(Conversions.toLocalTime(now)).isSameAs(now);\n    }", "signature": "void shouldReturnSameLocalTimeInstanceWhenConvertingToLocalTime()", "full_signature": "@Test public void shouldReturnSameLocalTimeInstanceWhenConvertingToLocalTime()", "class_method_signature": "ConversionsTest.shouldReturnSameLocalTimeInstanceWhenConvertingToLocalTime()", "testcase": true, "constructor": false, "invocations": ["now", "isSameAs", "assertThat", "toLocalTime"]}, "focal_class": {"identifier": "Conversions", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final long MILLISECONDS_PER_SECOND = TimeUnit.SECONDS.toMillis(1);", "modifier": "static final", "type": "long", "declarator": "MILLISECONDS_PER_SECOND = TimeUnit.SECONDS.toMillis(1)", "var_name": "MILLISECONDS_PER_SECOND"}, {"original_string": "static final long MICROSECONDS_PER_SECOND = TimeUnit.SECONDS.toMicros(1);", "modifier": "static final", "type": "long", "declarator": "MICROSECONDS_PER_SECOND = TimeUnit.SECONDS.toMicros(1)", "var_name": "MICROSECONDS_PER_SECOND"}, {"original_string": "static final long MICROSECONDS_PER_MILLISECOND = TimeUnit.MILLISECONDS.toMicros(1);", "modifier": "static final", "type": "long", "declarator": "MICROSECONDS_PER_MILLISECOND = TimeUnit.MILLISECONDS.toMicros(1)", "var_name": "MICROSECONDS_PER_MILLISECOND"}, {"original_string": "static final long NANOSECONDS_PER_MILLISECOND = TimeUnit.MILLISECONDS.toNanos(1);", "modifier": "static final", "type": "long", "declarator": "NANOSECONDS_PER_MILLISECOND = TimeUnit.MILLISECONDS.toNanos(1)", "var_name": "NANOSECONDS_PER_MILLISECOND"}, {"original_string": "static final long NANOSECONDS_PER_MICROSECOND = TimeUnit.MICROSECONDS.toNanos(1);", "modifier": "static final", "type": "long", "declarator": "NANOSECONDS_PER_MICROSECOND = TimeUnit.MICROSECONDS.toNanos(1)", "var_name": "NANOSECONDS_PER_MICROSECOND"}, {"original_string": "static final long NANOSECONDS_PER_SECOND = TimeUnit.SECONDS.toNanos(1);", "modifier": "static final", "type": "long", "declarator": "NANOSECONDS_PER_SECOND = TimeUnit.SECONDS.toNanos(1)", "var_name": "NANOSECONDS_PER_SECOND"}, {"original_string": "static final long NANOSECONDS_PER_DAY = TimeUnit.DAYS.toNanos(1);", "modifier": "static final", "type": "long", "declarator": "NANOSECONDS_PER_DAY = TimeUnit.DAYS.toNanos(1)", "var_name": "NANOSECONDS_PER_DAY"}, {"original_string": "static final long SECONDS_PER_DAY = TimeUnit.DAYS.toSeconds(1);", "modifier": "static final", "type": "long", "declarator": "SECONDS_PER_DAY = TimeUnit.DAYS.toSeconds(1)", "var_name": "SECONDS_PER_DAY"}, {"original_string": "static final long MICROSECONDS_PER_DAY = TimeUnit.DAYS.toMicros(1);", "modifier": "static final", "type": "long", "declarator": "MICROSECONDS_PER_DAY = TimeUnit.DAYS.toMicros(1)", "var_name": "MICROSECONDS_PER_DAY"}, {"original_string": "static final LocalDate EPOCH = LocalDate.ofEpochDay(0);", "modifier": "static final", "type": "LocalDate", "declarator": "EPOCH = LocalDate.ofEpochDay(0)", "var_name": "EPOCH"}], "methods": [{"identifier": "Conversions", "parameters": "()", "modifiers": "private", "return": "", "signature": " Conversions()", "full_signature": "private  Conversions()", "class_method_signature": "Conversions.Conversions()", "testcase": false, "constructor": true}, {"identifier": "toLocalDate", "parameters": "(Object obj)", "modifiers": "@SuppressWarnings(\"deprecation\") protected static", "return": "LocalDate", "signature": "LocalDate toLocalDate(Object obj)", "full_signature": "@SuppressWarnings(\"deprecation\") protected static LocalDate toLocalDate(Object obj)", "class_method_signature": "Conversions.toLocalDate(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toLocalTime", "parameters": "(Object obj)", "modifiers": "@SuppressWarnings(\"deprecation\") protected static", "return": "LocalTime", "signature": "LocalTime toLocalTime(Object obj)", "full_signature": "@SuppressWarnings(\"deprecation\") protected static LocalTime toLocalTime(Object obj)", "class_method_signature": "Conversions.toLocalTime(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toLocalDateTime", "parameters": "(Object obj)", "modifiers": "@SuppressWarnings(\"deprecation\") protected static", "return": "LocalDateTime", "signature": "LocalDateTime toLocalDateTime(Object obj)", "full_signature": "@SuppressWarnings(\"deprecation\") protected static LocalDateTime toLocalDateTime(Object obj)", "class_method_signature": "Conversions.toLocalDateTime(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toEpochMicros", "parameters": "(Instant instant)", "modifiers": "public static", "return": "long", "signature": "long toEpochMicros(Instant instant)", "full_signature": "public static long toEpochMicros(Instant instant)", "class_method_signature": "Conversions.toEpochMicros(Instant instant)", "testcase": false, "constructor": false}, {"identifier": "toInstantFromMicros", "parameters": "(long microsSinceEpoch)", "modifiers": "public static", "return": "Instant", "signature": "Instant toInstantFromMicros(long microsSinceEpoch)", "full_signature": "public static Instant toInstantFromMicros(long microsSinceEpoch)", "class_method_signature": "Conversions.toInstantFromMicros(long microsSinceEpoch)", "testcase": false, "constructor": false}], "file": "debezium-core/src/main/java/io/debezium/time/Conversions.java"}, "focal_method": {"identifier": "toLocalTime", "parameters": "(Object obj)", "modifiers": "@SuppressWarnings(\"deprecation\") protected static", "return": "LocalTime", "body": "@SuppressWarnings(\"deprecation\")\n    protected static LocalTime toLocalTime(Object obj) {\n        if (obj == null) {\n            return null;\n        }\n        if (obj instanceof LocalTime) {\n            return (LocalTime) obj;\n        }\n        if (obj instanceof LocalDateTime) {\n            return ((LocalDateTime) obj).toLocalTime();\n        }\n        if (obj instanceof java.sql.Date) {\n            throw new IllegalArgumentException(\"Unable to convert to LocalDate from a java.sql.Date value '\" + obj + \"'\");\n        }\n        if (obj instanceof java.sql.Time) {\n            java.sql.Time time = (java.sql.Time) obj;\n            long millis = (int) (time.getTime() % Conversions.MILLISECONDS_PER_SECOND);\n            int nanosOfSecond = (int) (millis * Conversions.NANOSECONDS_PER_MILLISECOND);\n            return LocalTime.of(time.getHours(),\n                    time.getMinutes(),\n                    time.getSeconds(),\n                    nanosOfSecond);\n        }\n        if (obj instanceof java.sql.Timestamp) {\n            java.sql.Timestamp timestamp = (java.sql.Timestamp) obj;\n            return LocalTime.of(timestamp.getHours(),\n                    timestamp.getMinutes(),\n                    timestamp.getSeconds(),\n                    timestamp.getNanos());\n        }\n        if (obj instanceof java.util.Date) {\n            java.util.Date date = (java.util.Date) obj;\n            long millis = (int) (date.getTime() % Conversions.MILLISECONDS_PER_SECOND);\n            int nanosOfSecond = (int) (millis * Conversions.NANOSECONDS_PER_MILLISECOND);\n            return LocalTime.of(date.getHours(),\n                    date.getMinutes(),\n                    date.getSeconds(),\n                    nanosOfSecond);\n        }\n        if (obj instanceof Duration) {\n            Long value = ((Duration) obj).toNanos();\n            if (value >= 0 && value <= NANOSECONDS_PER_DAY) {\n                return LocalTime.ofNanoOfDay(value);\n            }\n            else {\n                throw new IllegalArgumentException(\"Time values must use number of milliseconds greater than 0 and less than 86400000000000\");\n            }\n        }\n        throw new IllegalArgumentException(\"Unable to convert to LocalTime from unexpected value '\" + obj + \"' of type \" + obj.getClass().getName());\n    }", "signature": "LocalTime toLocalTime(Object obj)", "full_signature": "@SuppressWarnings(\"deprecation\") protected static LocalTime toLocalTime(Object obj)", "class_method_signature": "Conversions.toLocalTime(Object obj)", "testcase": false, "constructor": false, "invocations": ["toLocalTime", "getTime", "of", "getHours", "getMinutes", "getSeconds", "of", "getHours", "getMinutes", "getSeconds", "getNanos", "getTime", "of", "getHours", "getMinutes", "getSeconds", "toNanos", "ofNanoOfDay", "getName", "getClass"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}