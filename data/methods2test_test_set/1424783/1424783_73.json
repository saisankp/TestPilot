{"test_class": {"identifier": "LineAndPointRendererTest", "superclass": "extends AndroidplotTest", "interfaces": "", "fields": [{"original_string": "private XYPlot xyPlot;", "modifier": "private", "type": "XYPlot", "declarator": "xyPlot", "var_name": "xyPlot"}, {"original_string": "@Mock\n    Canvas canvas;", "modifier": "@Mock", "type": "Canvas", "declarator": "canvas", "var_name": "canvas"}, {"original_string": "RectF plotArea = new RectF(0, 0, 100, 100);", "modifier": "", "type": "RectF", "declarator": "plotArea = new RectF(0, 0, 100, 100)", "var_name": "plotArea"}], "file": "androidplot-core/src/test/java/com/androidplot/xy/LineAndPointRendererTest.java"}, "test_case": {"identifier": "testDrawSeries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDrawSeries() throws Exception {\n\n        // 100x100 plot space:\n        plotArea = new RectF(0, 0, 99, 99);\n        FastLineAndPointRenderer.Formatter formatter =\n                new FastLineAndPointRenderer.Formatter(Color.RED, Color.RED, null);\n\n        // create a series composed of 3 \"segments\"; series portions separated by null values:\n        XYSeries series = new SimpleXYSeries(\n                SimpleXYSeries.ArrayFormat.Y_VALS_ONLY, \"some data\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n        LineAndPointRenderer renderer = Mockito.spy(new LineAndPointRenderer(xyPlot));\n\n        xyPlot.addSeries(series, formatter);\n\n        xyPlot.calculateMinMaxVals();\n        renderer.drawSeries(canvas, plotArea, series, formatter);\n\n        PointF[] expectedPoints = new PointF[] {\n                new PointF(0, 99),\n                new PointF(11, 88),\n                new PointF(22, 77),\n                new PointF(33, 66),\n                new PointF(44, 55),\n                new PointF(55, 44),\n                new PointF(66, 33),\n                new PointF(77, 22),\n                new PointF(88, 11),\n                new PointF(99, 0)\n        };\n        ArgumentCaptor<List> capturedPoints= ArgumentCaptor.forClass(List.class);\n\n        verify(renderer, times(1)).renderPoints(\n                eq(canvas),\n                eq(plotArea),\n                eq(series),\n                eq(0),\n                eq(expectedPoints.length),\n                capturedPoints.capture(),\n                eq(formatter));\n\n        List<PointF> pList = capturedPoints.getValue();\n\n        // {0, 1}\n        assertEquals(expectedPoints[0].x, pList.get(0).x);\n        assertEquals(expectedPoints[0].y, pList.get(0).y);\n\n        // {1, 2}\n        assertEquals(expectedPoints[1].x, pList.get(1).x);\n        assertEquals(expectedPoints[1].y, pList.get(1).y);\n\n        // {2, 3}\n        assertEquals(expectedPoints[2].x, pList.get(2).x);\n        assertEquals(expectedPoints[2].y, pList.get(2).y);\n\n        // {3, 4}\n        assertEquals(expectedPoints[3].x, pList.get(3).x);\n        assertEquals(expectedPoints[3].y, pList.get(3).y);\n\n        // {4, 5}\n        assertEquals(expectedPoints[4].x, pList.get(4).x);\n        assertEquals(expectedPoints[4].y, pList.get(4).y);\n\n        // {5, 6}\n        assertEquals(expectedPoints[5].x, pList.get(5).x);\n        assertEquals(expectedPoints[5].y, pList.get(5).y);\n\n        // {6, 7}\n        assertEquals(expectedPoints[6].x, pList.get(6).x);\n        assertEquals(expectedPoints[6].y, pList.get(6).y);\n\n        // {7, 8}\n        assertEquals(expectedPoints[7].x, pList.get(7).x);\n        assertEquals(expectedPoints[7].y, pList.get(7).y);\n\n        // {8, 9}\n        assertEquals(expectedPoints[8].x, pList.get(8).x);\n        assertEquals(expectedPoints[8].y, pList.get(8).y);\n\n        // {9, 10}\n        assertEquals(expectedPoints[9].x, pList.get(9).x);\n        assertEquals(expectedPoints[9].y, pList.get(9).y);\n    }", "signature": "void testDrawSeries()", "full_signature": "@Test public void testDrawSeries()", "class_method_signature": "LineAndPointRendererTest.testDrawSeries()", "testcase": true, "constructor": false, "invocations": ["spy", "addSeries", "calculateMinMaxVals", "drawSeries", "forClass", "renderPoints", "verify", "times", "eq", "eq", "eq", "eq", "eq", "capture", "eq", "getValue", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "LineAndPointRenderer", "superclass": "extends XYSeriesRenderer<XYSeries, FormatterType>", "interfaces": "", "fields": [{"original_string": "protected static final int ZERO = 0;", "modifier": "protected static final", "type": "int", "declarator": "ZERO = 0", "var_name": "ZERO"}, {"original_string": "protected static final int ONE = 1;", "modifier": "protected static final", "type": "int", "declarator": "ONE = 1", "var_name": "ONE"}, {"original_string": "private final Path path = new Path();", "modifier": "private final", "type": "Path", "declarator": "path = new Path()", "var_name": "path"}, {"original_string": "protected final ConcurrentHashMap<XYSeries, ArrayList<PointF>> pointsCaches\n            = new ConcurrentHashMap<>(2, 0.75f, 2);", "modifier": "protected final", "type": "ConcurrentHashMap<XYSeries, ArrayList<PointF>>", "declarator": "pointsCaches\n            = new ConcurrentHashMap<>(2, 0.75f, 2)", "var_name": "pointsCaches"}], "methods": [{"identifier": "LineAndPointRenderer", "parameters": "(XYPlot plot)", "modifiers": "public", "return": "", "signature": " LineAndPointRenderer(XYPlot plot)", "full_signature": "public  LineAndPointRenderer(XYPlot plot)", "class_method_signature": "LineAndPointRenderer.LineAndPointRenderer(XYPlot plot)", "testcase": false, "constructor": true}, {"identifier": "onRender", "parameters": "(Canvas canvas, RectF plotArea, XYSeries series, FormatterType formatter, RenderStack stack)", "modifiers": "@Override public", "return": "void", "signature": "void onRender(Canvas canvas, RectF plotArea, XYSeries series, FormatterType formatter, RenderStack stack)", "full_signature": "@Override public void onRender(Canvas canvas, RectF plotArea, XYSeries series, FormatterType formatter, RenderStack stack)", "class_method_signature": "LineAndPointRenderer.onRender(Canvas canvas, RectF plotArea, XYSeries series, FormatterType formatter, RenderStack stack)", "testcase": false, "constructor": false}, {"identifier": "doDrawLegendIcon", "parameters": "(Canvas canvas, RectF rect, LineAndPointFormatter formatter)", "modifiers": "@Override public", "return": "void", "signature": "void doDrawLegendIcon(Canvas canvas, RectF rect, LineAndPointFormatter formatter)", "full_signature": "@Override public void doDrawLegendIcon(Canvas canvas, RectF rect, LineAndPointFormatter formatter)", "class_method_signature": "LineAndPointRenderer.doDrawLegendIcon(Canvas canvas, RectF rect, LineAndPointFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "appendToPath", "parameters": "(Path path, PointF thisPoint, PointF lastPoint)", "modifiers": "protected", "return": "void", "signature": "void appendToPath(Path path, PointF thisPoint, PointF lastPoint)", "full_signature": "protected void appendToPath(Path path, PointF thisPoint, PointF lastPoint)", "class_method_signature": "LineAndPointRenderer.appendToPath(Path path, PointF thisPoint, PointF lastPoint)", "testcase": false, "constructor": false}, {"identifier": "getPointsCache", "parameters": "(XYSeries series)", "modifiers": "protected", "return": "ArrayList<PointF>", "signature": "ArrayList<PointF> getPointsCache(XYSeries series)", "full_signature": "protected ArrayList<PointF> getPointsCache(XYSeries series)", "class_method_signature": "LineAndPointRenderer.getPointsCache(XYSeries series)", "testcase": false, "constructor": false}, {"identifier": "cullPointsCache", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void cullPointsCache()", "full_signature": "protected void cullPointsCache()", "class_method_signature": "LineAndPointRenderer.cullPointsCache()", "testcase": false, "constructor": false}, {"identifier": "drawSeries", "parameters": "(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter)", "modifiers": "protected", "return": "void", "signature": "void drawSeries(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter)", "full_signature": "protected void drawSeries(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter)", "class_method_signature": "LineAndPointRenderer.drawSeries(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "getInterpolator", "parameters": "(InterpolationParams params)", "modifiers": "protected", "return": "Interpolator", "signature": "Interpolator getInterpolator(InterpolationParams params)", "full_signature": "protected Interpolator getInterpolator(InterpolationParams params)", "class_method_signature": "LineAndPointRenderer.getInterpolator(InterpolationParams params)", "testcase": false, "constructor": false}, {"identifier": "convertPoint", "parameters": "(XYCoords coord, RectF plotArea)", "modifiers": "protected", "return": "PointF", "signature": "PointF convertPoint(XYCoords coord, RectF plotArea)", "full_signature": "protected PointF convertPoint(XYCoords coord, RectF plotArea)", "class_method_signature": "LineAndPointRenderer.convertPoint(XYCoords coord, RectF plotArea)", "testcase": false, "constructor": false}, {"identifier": "renderPoints", "parameters": "(Canvas canvas, RectF plotArea, XYSeries series, int iStart, int iEnd, List<PointF> points,\n                                LineAndPointFormatter formatter)", "modifiers": "protected", "return": "void", "signature": "void renderPoints(Canvas canvas, RectF plotArea, XYSeries series, int iStart, int iEnd, List<PointF> points,\n                                LineAndPointFormatter formatter)", "full_signature": "protected void renderPoints(Canvas canvas, RectF plotArea, XYSeries series, int iStart, int iEnd, List<PointF> points,\n                                LineAndPointFormatter formatter)", "class_method_signature": "LineAndPointRenderer.renderPoints(Canvas canvas, RectF plotArea, XYSeries series, int iStart, int iEnd, List<PointF> points,\n                                LineAndPointFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "renderPath", "parameters": "(Canvas canvas, RectF plotArea, Path path, PointF firstPoint, PointF lastPoint, LineAndPointFormatter formatter)", "modifiers": "protected", "return": "void", "signature": "void renderPath(Canvas canvas, RectF plotArea, Path path, PointF firstPoint, PointF lastPoint, LineAndPointFormatter formatter)", "full_signature": "protected void renderPath(Canvas canvas, RectF plotArea, Path path, PointF firstPoint, PointF lastPoint, LineAndPointFormatter formatter)", "class_method_signature": "LineAndPointRenderer.renderPath(Canvas canvas, RectF plotArea, Path path, PointF firstPoint, PointF lastPoint, LineAndPointFormatter formatter)", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/xy/LineAndPointRenderer.java"}, "focal_method": {"identifier": "drawSeries", "parameters": "(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter)", "modifiers": "protected", "return": "void", "body": "protected void drawSeries(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter) {\n        PointF thisPoint;\n        PointF lastPoint = null;\n        PointF firstPoint = null;\n        path.reset();\n        final List<PointF> points = getPointsCache(series);\n\n        int iStart = 0;\n        int iEnd = series.size();\n        if(SeriesUtils.getXYOrder(series) == OrderedXYSeries.XOrder.ASCENDING) {\n            final Region iBounds = SeriesUtils.iBounds(series, getPlot().getBounds());\n            iStart = iBounds.getMin().intValue();\n            if(iStart > 0) {\n                iStart--;\n            }\n            iEnd = iBounds.getMax().intValue() + 1;\n            if(iEnd < series.size() - 1) {\n                iEnd++;\n            }\n        }\n        for (int i = iStart; i < iEnd; i++) {\n            final Number y = series.getY(i);\n            final Number x = series.getX(i);\n            PointF iPoint = points.get(i);\n\n            if (y != null && x != null) {\n                if(iPoint == null) {\n                    iPoint = new PointF();\n                    points.set(i, iPoint);\n                }\n                thisPoint = iPoint;\n                getPlot().getBounds().transformScreen(thisPoint, x, y, plotArea);\n            } else {\n                thisPoint = null;\n                iPoint = null;\n                points.set(i, iPoint);\n            }\n\n            // don't need to do any of this if the line isnt going to be drawn:\n            if(formatter.hasLinePaint() && formatter.getInterpolationParams() == null) {\n                if (thisPoint != null) {\n\n                    // record the first point of the new Path\n                    if (firstPoint == null) {\n                        path.reset();\n                        firstPoint = thisPoint;\n\n                        // create our first point at the bottom/x position so filling will look good:\n                        path.moveTo(firstPoint.x, firstPoint.y);\n                    }\n\n                    if (lastPoint != null) {\n                        appendToPath(path, thisPoint, lastPoint);\n                    }\n\n                    lastPoint = thisPoint;\n                } else {\n                    if (lastPoint != null) {\n                        renderPath(canvas, plotArea, path, firstPoint, lastPoint, formatter);\n                    }\n                    firstPoint = null;\n                    lastPoint = null;\n                }\n            }\n        }\n\n        if(formatter.hasLinePaint()) {\n            if(formatter.getInterpolationParams() != null) {\n                List<XYCoords> interpolatedPoints = getInterpolator(\n                        formatter.getInterpolationParams()).interpolate(series,\n                        formatter.getInterpolationParams());\n                firstPoint = convertPoint(interpolatedPoints.get(ZERO), plotArea);\n                lastPoint = convertPoint(interpolatedPoints.get(interpolatedPoints.size()-ONE), plotArea);\n                path.reset();\n                path.moveTo(firstPoint.x, firstPoint.y);\n                for(int i = 1; i < interpolatedPoints.size(); i++) {\n                    thisPoint = convertPoint(interpolatedPoints.get(i), plotArea);\n                    path.lineTo(thisPoint.x, thisPoint.y);\n                }\n            }\n\n            if(firstPoint != null) {\n                renderPath(canvas, plotArea, path, firstPoint, lastPoint, formatter);\n            }\n        }\n        renderPoints(canvas, plotArea, series, iStart, iEnd, points, formatter);\n    }", "signature": "void drawSeries(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter)", "full_signature": "protected void drawSeries(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter)", "class_method_signature": "LineAndPointRenderer.drawSeries(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter)", "testcase": false, "constructor": false, "invocations": ["reset", "getPointsCache", "size", "getXYOrder", "iBounds", "getBounds", "getPlot", "intValue", "getMin", "intValue", "getMax", "size", "getY", "getX", "get", "set", "transformScreen", "getBounds", "getPlot", "set", "hasLinePaint", "getInterpolationParams", "reset", "moveTo", "appendToPath", "renderPath", "hasLinePaint", "getInterpolationParams", "interpolate", "getInterpolator", "getInterpolationParams", "getInterpolationParams", "convertPoint", "get", "convertPoint", "get", "size", "reset", "moveTo", "size", "convertPoint", "get", "lineTo", "renderPath", "renderPoints"]}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}