{"test_class": {"identifier": "HealthCheckRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ScheduledExecutorService executorService = mock(ScheduledExecutorService.class);", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "executorService = mock(ScheduledExecutorService.class)", "var_name": "executorService"}, {"original_string": "private final HealthCheckRegistry registry = new HealthCheckRegistry(executorService);", "modifier": "private final", "type": "HealthCheckRegistry", "declarator": "registry = new HealthCheckRegistry(executorService)", "var_name": "registry"}, {"original_string": "private final HealthCheckRegistryListener listener = mock(HealthCheckRegistryListener.class);", "modifier": "private final", "type": "HealthCheckRegistryListener", "declarator": "listener = mock(HealthCheckRegistryListener.class)", "var_name": "listener"}, {"original_string": "private final HealthCheck hc1 = mock(HealthCheck.class);", "modifier": "private final", "type": "HealthCheck", "declarator": "hc1 = mock(HealthCheck.class)", "var_name": "hc1"}, {"original_string": "private final HealthCheck hc2 = mock(HealthCheck.class);", "modifier": "private final", "type": "HealthCheck", "declarator": "hc2 = mock(HealthCheck.class)", "var_name": "hc2"}, {"original_string": "private final HealthCheck.Result r1 = mock(HealthCheck.Result.class);", "modifier": "private final", "type": "HealthCheck.Result", "declarator": "r1 = mock(HealthCheck.Result.class)", "var_name": "r1"}, {"original_string": "private final HealthCheck.Result r2 = mock(HealthCheck.Result.class);", "modifier": "private final", "type": "HealthCheck.Result", "declarator": "r2 = mock(HealthCheck.Result.class)", "var_name": "r2"}, {"original_string": "private final HealthCheck.Result ar = mock(HealthCheck.Result.class);", "modifier": "private final", "type": "HealthCheck.Result", "declarator": "ar = mock(HealthCheck.Result.class)", "var_name": "ar"}, {"original_string": "private final HealthCheck ahc = new TestAsyncHealthCheck(ar);", "modifier": "private final", "type": "HealthCheck", "declarator": "ahc = new TestAsyncHealthCheck(ar)", "var_name": "ahc"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    private final ScheduledFuture af = mock(ScheduledFuture.class);", "modifier": "@SuppressWarnings(\"rawtypes\")\n    private final", "type": "ScheduledFuture", "declarator": "af = mock(ScheduledFuture.class)", "var_name": "af"}], "file": "metrics-healthchecks/src/test/java/com/codahale/metrics/health/HealthCheckRegistryTest.java"}, "test_case": {"identifier": "doesNotRunNonexistentHealthChecks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doesNotRunNonexistentHealthChecks()  {\n        try {\n            registry.runHealthCheck(\"what\");\n            failBecauseExceptionWasNotThrown(NoSuchElementException.class);\n        } catch (NoSuchElementException e) {\n            assertThat(e.getMessage())\n                .isEqualTo(\"No health check named what exists\");\n        }\n\n    }", "signature": "void doesNotRunNonexistentHealthChecks()", "full_signature": "@Test public void doesNotRunNonexistentHealthChecks()", "class_method_signature": "HealthCheckRegistryTest.doesNotRunNonexistentHealthChecks()", "testcase": true, "constructor": false, "invocations": ["runHealthCheck", "failBecauseExceptionWasNotThrown", "isEqualTo", "assertThat", "getMessage"]}, "focal_class": {"identifier": "HealthCheckRegistry", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HealthCheckRegistry.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HealthCheckRegistry.class)", "var_name": "LOGGER"}, {"original_string": "private static final int ASYNC_EXECUTOR_POOL_SIZE = 2;", "modifier": "private static final", "type": "int", "declarator": "ASYNC_EXECUTOR_POOL_SIZE = 2", "var_name": "ASYNC_EXECUTOR_POOL_SIZE"}, {"original_string": "private final ConcurrentMap<String, HealthCheck> healthChecks;", "modifier": "private final", "type": "ConcurrentMap<String, HealthCheck>", "declarator": "healthChecks", "var_name": "healthChecks"}, {"original_string": "private final List<HealthCheckRegistryListener> listeners;", "modifier": "private final", "type": "List<HealthCheckRegistryListener>", "declarator": "listeners", "var_name": "listeners"}, {"original_string": "private final ScheduledExecutorService asyncExecutorService;", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "asyncExecutorService", "var_name": "asyncExecutorService"}, {"original_string": "private final Object lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}], "methods": [{"identifier": "HealthCheckRegistry", "parameters": "()", "modifiers": "public", "return": "", "signature": " HealthCheckRegistry()", "full_signature": "public  HealthCheckRegistry()", "class_method_signature": "HealthCheckRegistry.HealthCheckRegistry()", "testcase": false, "constructor": true}, {"identifier": "HealthCheckRegistry", "parameters": "(int asyncExecutorPoolSize)", "modifiers": "public", "return": "", "signature": " HealthCheckRegistry(int asyncExecutorPoolSize)", "full_signature": "public  HealthCheckRegistry(int asyncExecutorPoolSize)", "class_method_signature": "HealthCheckRegistry.HealthCheckRegistry(int asyncExecutorPoolSize)", "testcase": false, "constructor": true}, {"identifier": "HealthCheckRegistry", "parameters": "(ScheduledExecutorService asyncExecutorService)", "modifiers": "public", "return": "", "signature": " HealthCheckRegistry(ScheduledExecutorService asyncExecutorService)", "full_signature": "public  HealthCheckRegistry(ScheduledExecutorService asyncExecutorService)", "class_method_signature": "HealthCheckRegistry.HealthCheckRegistry(ScheduledExecutorService asyncExecutorService)", "testcase": false, "constructor": true}, {"identifier": "addListener", "parameters": "(HealthCheckRegistryListener listener)", "modifiers": "public", "return": "void", "signature": "void addListener(HealthCheckRegistryListener listener)", "full_signature": "public void addListener(HealthCheckRegistryListener listener)", "class_method_signature": "HealthCheckRegistry.addListener(HealthCheckRegistryListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(HealthCheckRegistryListener listener)", "modifiers": "public", "return": "void", "signature": "void removeListener(HealthCheckRegistryListener listener)", "full_signature": "public void removeListener(HealthCheckRegistryListener listener)", "class_method_signature": "HealthCheckRegistry.removeListener(HealthCheckRegistryListener listener)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(String name, HealthCheck healthCheck)", "modifiers": "public", "return": "void", "signature": "void register(String name, HealthCheck healthCheck)", "full_signature": "public void register(String name, HealthCheck healthCheck)", "class_method_signature": "HealthCheckRegistry.register(String name, HealthCheck healthCheck)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void unregister(String name)", "full_signature": "public void unregister(String name)", "class_method_signature": "HealthCheckRegistry.unregister(String name)", "testcase": false, "constructor": false}, {"identifier": "getNames", "parameters": "()", "modifiers": "public", "return": "SortedSet<String>", "signature": "SortedSet<String> getNames()", "full_signature": "public SortedSet<String> getNames()", "class_method_signature": "HealthCheckRegistry.getNames()", "testcase": false, "constructor": false}, {"identifier": "getHealthCheck", "parameters": "(String name)", "modifiers": "public", "return": "HealthCheck", "signature": "HealthCheck getHealthCheck(String name)", "full_signature": "public HealthCheck getHealthCheck(String name)", "class_method_signature": "HealthCheckRegistry.getHealthCheck(String name)", "testcase": false, "constructor": false}, {"identifier": "runHealthCheck", "parameters": "(String name)", "modifiers": "public", "return": "HealthCheck.Result", "signature": "HealthCheck.Result runHealthCheck(String name)", "full_signature": "public HealthCheck.Result runHealthCheck(String name)", "class_method_signature": "HealthCheckRegistry.runHealthCheck(String name)", "testcase": false, "constructor": false}, {"identifier": "runHealthChecks", "parameters": "()", "modifiers": "public", "return": "SortedMap<String, HealthCheck.Result>", "signature": "SortedMap<String, HealthCheck.Result> runHealthChecks()", "full_signature": "public SortedMap<String, HealthCheck.Result> runHealthChecks()", "class_method_signature": "HealthCheckRegistry.runHealthChecks()", "testcase": false, "constructor": false}, {"identifier": "runHealthChecks", "parameters": "(HealthCheckFilter filter)", "modifiers": "public", "return": "SortedMap<String, HealthCheck.Result>", "signature": "SortedMap<String, HealthCheck.Result> runHealthChecks(HealthCheckFilter filter)", "full_signature": "public SortedMap<String, HealthCheck.Result> runHealthChecks(HealthCheckFilter filter)", "class_method_signature": "HealthCheckRegistry.runHealthChecks(HealthCheckFilter filter)", "testcase": false, "constructor": false}, {"identifier": "runHealthChecks", "parameters": "(ExecutorService executor)", "modifiers": "public", "return": "SortedMap<String, HealthCheck.Result>", "signature": "SortedMap<String, HealthCheck.Result> runHealthChecks(ExecutorService executor)", "full_signature": "public SortedMap<String, HealthCheck.Result> runHealthChecks(ExecutorService executor)", "class_method_signature": "HealthCheckRegistry.runHealthChecks(ExecutorService executor)", "testcase": false, "constructor": false}, {"identifier": "runHealthChecks", "parameters": "(ExecutorService executor, HealthCheckFilter filter)", "modifiers": "public", "return": "SortedMap<String, HealthCheck.Result>", "signature": "SortedMap<String, HealthCheck.Result> runHealthChecks(ExecutorService executor, HealthCheckFilter filter)", "full_signature": "public SortedMap<String, HealthCheck.Result> runHealthChecks(ExecutorService executor, HealthCheckFilter filter)", "class_method_signature": "HealthCheckRegistry.runHealthChecks(ExecutorService executor, HealthCheckFilter filter)", "testcase": false, "constructor": false}, {"identifier": "onHealthCheckAdded", "parameters": "(String name, HealthCheck healthCheck)", "modifiers": "private", "return": "void", "signature": "void onHealthCheckAdded(String name, HealthCheck healthCheck)", "full_signature": "private void onHealthCheckAdded(String name, HealthCheck healthCheck)", "class_method_signature": "HealthCheckRegistry.onHealthCheckAdded(String name, HealthCheck healthCheck)", "testcase": false, "constructor": false}, {"identifier": "onHealthCheckRemoved", "parameters": "(String name, HealthCheck healthCheck)", "modifiers": "private", "return": "void", "signature": "void onHealthCheckRemoved(String name, HealthCheck healthCheck)", "full_signature": "private void onHealthCheckRemoved(String name, HealthCheck healthCheck)", "class_method_signature": "HealthCheckRegistry.onHealthCheckRemoved(String name, HealthCheck healthCheck)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "HealthCheckRegistry.shutdown()", "testcase": false, "constructor": false}, {"identifier": "createExecutorService", "parameters": "(int corePoolSize)", "modifiers": "private static", "return": "ScheduledExecutorService", "signature": "ScheduledExecutorService createExecutorService(int corePoolSize)", "full_signature": "private static ScheduledExecutorService createExecutorService(int corePoolSize)", "class_method_signature": "HealthCheckRegistry.createExecutorService(int corePoolSize)", "testcase": false, "constructor": false}], "file": "metrics-healthchecks/src/main/java/com/codahale/metrics/health/HealthCheckRegistry.java"}, "focal_method": {"identifier": "runHealthCheck", "parameters": "(String name)", "modifiers": "public", "return": "HealthCheck.Result", "body": "public HealthCheck.Result runHealthCheck(String name) throws NoSuchElementException {\n        final HealthCheck healthCheck = healthChecks.get(name);\n        if (healthCheck == null) {\n            throw new NoSuchElementException(\"No health check named \" + name + \" exists\");\n        }\n        return healthCheck.execute();\n    }", "signature": "HealthCheck.Result runHealthCheck(String name)", "full_signature": "public HealthCheck.Result runHealthCheck(String name)", "class_method_signature": "HealthCheckRegistry.runHealthCheck(String name)", "testcase": false, "constructor": false, "invocations": ["get", "execute"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}