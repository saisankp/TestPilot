{"test_class": {"identifier": "UriUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils/src/test/java/com/cloud/utils/UriUtilsTest.java"}, "test_case": {"identifier": "getUpdateUri", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getUpdateUri() {\n        // no password param, no request for encryption\n        Assert.assertEquals(\"http://localhost/foo/bar?param=true\", UriUtils\n                .getUpdateUri(\"http://localhost/foo/bar?param=true\", false));\n        // there is password param but still no request for encryption, should\n        // be unchanged\n        Assert.assertEquals(\"http://localhost/foo/bar?password=1234\", UriUtils\n                .getUpdateUri(\"http://localhost/foo/bar?password=1234\", false));\n        // if there is password param and encryption is requested then it may or\n        // may not be changed depending on how the EncrytionUtils is setup, but\n        // at least it needs to start with the same url\n        Assert.assertTrue(UriUtils.getUpdateUri(\n                \"http://localhost/foo/bar?password=1234\", true).startsWith(\n                \"http://localhost/foo/bar\"));\n\n        //just to see if it is still ok with multiple parameters\n        Assert.assertEquals(\"http://localhost/foo/bar?param1=true&param2=12345\", UriUtils\n                .getUpdateUri(\"http://localhost/foo/bar?param1=true&param2=12345\", false));\n\n        //XXX: Interesting cases not covered:\n        // * port is ignored and left out from the return value\n    }", "signature": "void getUpdateUri()", "full_signature": "@Test public void getUpdateUri()", "class_method_signature": "UriUtilsTest.getUpdateUri()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getUpdateUri", "assertEquals", "getUpdateUri", "assertTrue", "startsWith", "getUpdateUri", "assertEquals", "getUpdateUri"]}, "focal_class": {"identifier": "UriUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(UriUtils.class.getName());", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(UriUtils.class.getName())", "var_name": "s_logger"}], "methods": [{"identifier": "formNfsUri", "parameters": "(String host, String path)", "modifiers": "public static", "return": "String", "signature": "String formNfsUri(String host, String path)", "full_signature": "public static String formNfsUri(String host, String path)", "class_method_signature": "UriUtils.formNfsUri(String host, String path)", "testcase": false, "constructor": false}, {"identifier": "formIscsiUri", "parameters": "(String host, String iqn, Integer lun)", "modifiers": "public static", "return": "String", "signature": "String formIscsiUri(String host, String iqn, Integer lun)", "full_signature": "public static String formIscsiUri(String host, String iqn, Integer lun)", "class_method_signature": "UriUtils.formIscsiUri(String host, String iqn, Integer lun)", "testcase": false, "constructor": false}, {"identifier": "formFileUri", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String formFileUri(String path)", "full_signature": "public static String formFileUri(String path)", "class_method_signature": "UriUtils.formFileUri(String path)", "testcase": false, "constructor": false}, {"identifier": "encodeURIComponent", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String encodeURIComponent(String url)", "full_signature": "public static String encodeURIComponent(String url)", "class_method_signature": "UriUtils.encodeURIComponent(String url)", "testcase": false, "constructor": false}, {"identifier": "getCifsUriParametersProblems", "parameters": "(URI uri)", "modifiers": "public static", "return": "String", "signature": "String getCifsUriParametersProblems(URI uri)", "full_signature": "public static String getCifsUriParametersProblems(URI uri)", "class_method_signature": "UriUtils.getCifsUriParametersProblems(URI uri)", "testcase": false, "constructor": false}, {"identifier": "hostAndPathPresent", "parameters": "(URI uri)", "modifiers": "public static", "return": "boolean", "signature": "boolean hostAndPathPresent(URI uri)", "full_signature": "public static boolean hostAndPathPresent(URI uri)", "class_method_signature": "UriUtils.hostAndPathPresent(URI uri)", "testcase": false, "constructor": false}, {"identifier": "cifsCredentialsPresent", "parameters": "(URI uri)", "modifiers": "public static", "return": "boolean", "signature": "boolean cifsCredentialsPresent(URI uri)", "full_signature": "public static boolean cifsCredentialsPresent(URI uri)", "class_method_signature": "UriUtils.cifsCredentialsPresent(URI uri)", "testcase": false, "constructor": false}, {"identifier": "getUpdateUri", "parameters": "(String url, boolean encrypt)", "modifiers": "public static", "return": "String", "signature": "String getUpdateUri(String url, boolean encrypt)", "full_signature": "public static String getUpdateUri(String url, boolean encrypt)", "class_method_signature": "UriUtils.getUpdateUri(String url, boolean encrypt)", "testcase": false, "constructor": false}, {"identifier": "getUserDetails", "parameters": "(String query)", "modifiers": "private static", "return": "List<NameValuePair>", "signature": "List<NameValuePair> getUserDetails(String query)", "full_signature": "private static List<NameValuePair> getUserDetails(String query)", "class_method_signature": "UriUtils.getUserDetails(String query)", "testcase": false, "constructor": false}, {"identifier": "getRemoteSize", "parameters": "(String url)", "modifiers": "public static", "return": "Long", "signature": "Long getRemoteSize(String url)", "full_signature": "public static Long getRemoteSize(String url)", "class_method_signature": "UriUtils.getRemoteSize(String url)", "testcase": false, "constructor": false}, {"identifier": "validateUrl", "parameters": "(String url)", "modifiers": "public static", "return": "Pair<String, Integer>", "signature": "Pair<String, Integer> validateUrl(String url)", "full_signature": "public static Pair<String, Integer> validateUrl(String url)", "class_method_signature": "UriUtils.validateUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "validateUrl", "parameters": "(String format, String url)", "modifiers": "public static", "return": "Pair<String, Integer>", "signature": "Pair<String, Integer> validateUrl(String format, String url)", "full_signature": "public static Pair<String, Integer> validateUrl(String format, String url)", "class_method_signature": "UriUtils.validateUrl(String format, String url)", "testcase": false, "constructor": false}, {"identifier": "checkUrlExistence", "parameters": "(String url)", "modifiers": "public static", "return": "void", "signature": "void checkUrlExistence(String url)", "full_signature": "public static void checkUrlExistence(String url)", "class_method_signature": "UriUtils.checkUrlExistence(String url)", "testcase": false, "constructor": false}, {"identifier": "checkFormat", "parameters": "(String format, String uripath)", "modifiers": "private static", "return": "void", "signature": "void checkFormat(String format, String uripath)", "full_signature": "private static void checkFormat(String format, String uripath)", "class_method_signature": "UriUtils.checkFormat(String format, String uripath)", "testcase": false, "constructor": false}, {"identifier": "getInputStreamFromUrl", "parameters": "(String url, String user, String password)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getInputStreamFromUrl(String url, String user, String password)", "full_signature": "public static InputStream getInputStreamFromUrl(String url, String user, String password)", "class_method_signature": "UriUtils.getInputStreamFromUrl(String url, String user, String password)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/com/cloud/utils/UriUtils.java"}, "focal_method": {"identifier": "getUpdateUri", "parameters": "(String url, boolean encrypt)", "modifiers": "public static", "return": "String", "body": "public static String getUpdateUri(String url, boolean encrypt) {\n        String updatedPath = null;\n        try {\n            String query = URIUtil.getQuery(url);\n            URIBuilder builder = new URIBuilder(url);\n            builder.removeQuery();\n\n            StringBuilder updatedQuery = new StringBuilder();\n            List<NameValuePair> queryParams = getUserDetails(query);\n            ListIterator<NameValuePair> iterator = queryParams.listIterator();\n            while (iterator.hasNext()) {\n                NameValuePair param = iterator.next();\n                String value = null;\n                if (\"password\".equalsIgnoreCase(param.getName()) &&\n                        param.getValue() != null) {\n                    value = encrypt ? DBEncryptionUtil.encrypt(param.getValue()) : DBEncryptionUtil.decrypt(param.getValue());\n                } else {\n                    value = param.getValue();\n                }\n\n                if (updatedQuery.length() == 0) {\n                    updatedQuery.append(param.getName()).append('=')\n                            .append(value);\n                } else {\n                    updatedQuery.append('&').append(param.getName())\n                            .append('=').append(value);\n                }\n            }\n\n            String schemeAndHost = \"\";\n            URI newUri = builder.build();\n            if (newUri.getScheme() != null) {\n                schemeAndHost = newUri.getScheme() + \"://\" + newUri.getHost();\n            }\n\n            updatedPath = schemeAndHost + newUri.getPath() + \"?\" + updatedQuery;\n        } catch (URISyntaxException e) {\n            throw new CloudRuntimeException(\"Couldn't generate an updated uri. \" + e.getMessage());\n        }\n\n        return updatedPath;\n    }", "signature": "String getUpdateUri(String url, boolean encrypt)", "full_signature": "public static String getUpdateUri(String url, boolean encrypt)", "class_method_signature": "UriUtils.getUpdateUri(String url, boolean encrypt)", "testcase": false, "constructor": false, "invocations": ["getQuery", "removeQuery", "getUserDetails", "listIterator", "hasNext", "next", "equalsIgnoreCase", "getName", "getValue", "encrypt", "getValue", "decrypt", "getValue", "getValue", "length", "append", "append", "append", "getName", "append", "append", "append", "append", "getName", "build", "getScheme", "getScheme", "getHost", "getPath", "getMessage"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}