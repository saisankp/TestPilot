{"test_class": {"identifier": "CountryParserTest", "superclass": "extends AbstractSpecTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CountryParserTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CountryParserTest.class)", "var_name": "LOGGER"}, {"original_string": "private CountryParser parser;", "modifier": "private", "type": "CountryParser", "declarator": "parser", "var_name": "parser"}], "file": "geoclient-parser/src/test/java/gov/nyc/doitt/gis/geoclient/parser/regex/CountryParserTest.java"}, "test_case": {"identifier": "testParseSuccessChangesCurrentChunk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseSuccessChangesCurrentChunk() {\n        String originalText = \"280 Riverside Dr NY NY 10025 U.S.A.\";\n        ParseContext context = new ParseContext(new Input(\"junit-test\", originalText));\n        Chunk initialChunk = context.getCurrent();\n        assertThat(initialChunk.getType()).isEqualTo(ChunkType.ORIGINAL_INPUT);\n        parser.parse(context);\n        assertThat(context.isParsed()).isFalse().as(\"ParseContext.isParsed should be\");\n        assertThat(initialChunk.getType()).isEqualTo(ChunkType.COUNTY).as(\"Chunk.Type of initial Chunk:\");\n        assertThat(initialChunk.contains(new Token(TokenType.COUNTRY, \"U.S.A.\", 29, 35))).isTrue()\n                .as(\"Initial Chunk contains:\");\n        assertThat(initialChunk.tokenCount()).isEqualTo(1).as(\"Initial Chunk token count:\");\n        Chunk actualChunk = context.getCurrent();\n        assertThat(actualChunk.getType()).isEqualTo(ChunkType.SUBSTRING);\n        assertThat(actualChunk.getText()).isEqualTo(\"280 Riverside Dr NY NY 10025\");\n    }", "signature": "void testParseSuccessChangesCurrentChunk()", "full_signature": "@Test public void testParseSuccessChangesCurrentChunk()", "class_method_signature": "CountryParserTest.testParseSuccessChangesCurrentChunk()", "testcase": true, "constructor": false, "invocations": ["getCurrent", "isEqualTo", "assertThat", "getType", "parse", "as", "isFalse", "assertThat", "isParsed", "as", "isEqualTo", "assertThat", "getType", "as", "isTrue", "assertThat", "contains", "as", "isEqualTo", "assertThat", "tokenCount", "getCurrent", "isEqualTo", "assertThat", "getType", "isEqualTo", "assertThat", "getText"]}, "focal_class": {"identifier": "CountryParser", "superclass": "extends AbstractRegexParser", "interfaces": "", "fields": [{"original_string": "private static final Pattern COUNTRY = Pattern.compile(\"(?:.*)\\\\b(U\\\\.?S\\\\.?A\\\\.?|U\\\\.?S\\\\.?|(?:(?<!UNITED STATES OF )AMERICA)|UNITED STATES OF AMERICA|UNITED STATES)\\\\s*$\",Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "COUNTRY = Pattern.compile(\"(?:.*)\\\\b(U\\\\.?S\\\\.?A\\\\.?|U\\\\.?S\\\\.?|(?:(?<!UNITED STATES OF )AMERICA)|UNITED STATES OF AMERICA|UNITED STATES)\\\\s*$\",Pattern.CASE_INSENSITIVE)", "var_name": "COUNTRY"}], "methods": [{"identifier": "parse", "parameters": "(ParseContext parseContext)", "modifiers": "@Override public", "return": "void", "signature": "void parse(ParseContext parseContext)", "full_signature": "@Override public void parse(ParseContext parseContext)", "class_method_signature": "CountryParser.parse(ParseContext parseContext)", "testcase": false, "constructor": false}], "file": "geoclient-parser/src/main/java/gov/nyc/doitt/gis/geoclient/parser/regex/CountryParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(ParseContext parseContext)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void parse(ParseContext parseContext)\n    {\n        Chunk currentChunk = parseContext.getCurrent();\n        Matcher matcher = COUNTRY.matcher(currentChunk.getText());\n        if(!matcher.matches())\n        {\n            patternNotMatched(parseContext, COUNTRY);\n            return;\n        }\n\n        MatchBuilder builder = new MatchBuilder()\n            .add(matcher)\n            .add(MatchType.END_OF_INPUT)\n            .add(parseContext)\n            .add(COUNTRY, 1, TokenType.COUNTRY);\n\n        handleMatch(builder.build(), ChunkType.COUNTY);\n    }", "signature": "void parse(ParseContext parseContext)", "full_signature": "@Override public void parse(ParseContext parseContext)", "class_method_signature": "CountryParser.parse(ParseContext parseContext)", "testcase": false, "constructor": false, "invocations": ["getCurrent", "matcher", "getText", "matches", "patternNotMatched", "add", "add", "add", "add", "handleMatch", "build"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}