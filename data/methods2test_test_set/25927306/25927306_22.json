{"test_class": {"identifier": "SecurityIdentifierTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/ad/SecurityIdentifierTest.java"}, "test_case": {"identifier": "testToString", "parameters": "(final String sidString, final byte[] sid)", "modifiers": "@Test(groups = \"ad\", dataProvider = \"sids\") public", "return": "void", "body": "@Test(groups = \"ad\", dataProvider = \"sids\")\n  public void testToString(final String sidString, final byte[] sid)\n    throws Exception\n  {\n    Assert.assertEquals(sidString, SecurityIdentifier.toString(sid));\n  }", "signature": "void testToString(final String sidString, final byte[] sid)", "full_signature": "@Test(groups = \"ad\", dataProvider = \"sids\") public void testToString(final String sidString, final byte[] sid)", "class_method_signature": "SecurityIdentifierTest.testToString(final String sidString, final byte[] sid)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString"]}, "focal_class": {"identifier": "SecurityIdentifier", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SecurityIdentifier", "parameters": "()", "modifiers": "private", "return": "", "signature": " SecurityIdentifier()", "full_signature": "private  SecurityIdentifier()", "class_method_signature": "SecurityIdentifier.SecurityIdentifier()", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "(final byte[] sid)", "modifiers": "public static", "return": "String", "signature": "String toString(final byte[] sid)", "full_signature": "public static String toString(final byte[] sid)", "class_method_signature": "SecurityIdentifier.toString(final byte[] sid)", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(final String sid)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toBytes(final String sid)", "full_signature": "public static byte[] toBytes(final String sid)", "class_method_signature": "SecurityIdentifier.toBytes(final String sid)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(final ByteBuffer buffer, final boolean bigEndian)", "modifiers": "private static", "return": "long", "signature": "long getLong(final ByteBuffer buffer, final boolean bigEndian)", "full_signature": "private static long getLong(final ByteBuffer buffer, final boolean bigEndian)", "class_method_signature": "SecurityIdentifier.getLong(final ByteBuffer buffer, final boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "putLong", "parameters": "(final ByteBuffer buffer, final long value, final boolean bigEndian)", "modifiers": "private static", "return": "void", "signature": "void putLong(final ByteBuffer buffer, final long value, final boolean bigEndian)", "full_signature": "private static void putLong(final ByteBuffer buffer, final long value, final boolean bigEndian)", "class_method_signature": "SecurityIdentifier.putLong(final ByteBuffer buffer, final long value, final boolean bigEndian)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/ad/SecurityIdentifier.java"}, "focal_method": {"identifier": "toString", "parameters": "(final byte[] sid)", "modifiers": "public static", "return": "String", "body": "public static String toString(final byte[] sid)\n  {\n    // CheckStyle:MagicNumber OFF\n\n    // format of SID: S-R-X-Y1-Y2...-Yn\n    // S: static 'S', indicating string\n    // R: revision\n    // X: authority\n    // Yn: sub-authority\n\n    // create a byte buffer for reading the sid\n    final ByteBuffer sidBuffer = ByteBuffer.wrap(sid);\n\n    // string identifier\n    final StringBuilder sb = new StringBuilder(\"S\");\n\n    // byte[0] is the revision\n    sb.append(\"-\").append(sidBuffer.get() & 0xFF);\n\n    // byte[1] is the count of sub-authorities\n    final int countSubAuth = sidBuffer.get() & 0xFF;\n\n    // byte[2] - byte[7] is the authority (48 bits)\n    sidBuffer.limit(8);\n    sb.append(\"-\").append(getLong(sidBuffer, true));\n\n    // byte[8] - ? is the sub-authorities,\n    // (32 bits per authority, little endian)\n    for (int i = 0; i < countSubAuth; i++) {\n      // values are unsigned, so get 4 bytes as a long\n      sidBuffer.limit(sidBuffer.position() + 4);\n      sb.append(\"-\").append(getLong(sidBuffer, false));\n    }\n\n    return sb.toString();\n    // CheckStyle:MagicNumber ON\n  }", "signature": "String toString(final byte[] sid)", "full_signature": "public static String toString(final byte[] sid)", "class_method_signature": "SecurityIdentifier.toString(final byte[] sid)", "testcase": false, "constructor": false, "invocations": ["wrap", "append", "append", "get", "get", "limit", "append", "append", "getLong", "limit", "position", "append", "append", "getLong", "toString"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}