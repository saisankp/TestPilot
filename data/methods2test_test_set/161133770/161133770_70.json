{"test_class": {"identifier": "RedisBackedJobServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Integer REDIS_PORT = 51235;", "modifier": "private static", "type": "Integer", "declarator": "REDIS_PORT = 51235", "var_name": "REDIS_PORT"}, {"original_string": "private RedisServer redis;", "modifier": "private", "type": "RedisServer", "declarator": "redis", "var_name": "redis"}], "file": "serving/src/test/java/feast/serving/service/RedisBackedJobServiceTest.java"}, "test_case": {"identifier": "shouldRecoverIfRedisConnectionIsLost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldRecoverIfRedisConnectionIsLost() {\n    RedisClient client = RedisClient.create(RedisURI.create(\"localhost\", REDIS_PORT));\n    RedisBackedJobService jobService =\n        new RedisBackedJobService(client.connect(new ByteArrayCodec()));\n    jobService.get(\"does not exist\");\n    redis.stop();\n    try {\n      jobService.get(\"does not exist\");\n    } catch (Exception e) {\n      // pass, this should fail, and return a broken connection to the pool\n    }\n    redis.start();\n    jobService.get(\"does not exist\");\n    client.shutdown();\n  }", "signature": "void shouldRecoverIfRedisConnectionIsLost()", "full_signature": "@Test public void shouldRecoverIfRedisConnectionIsLost()", "class_method_signature": "RedisBackedJobServiceTest.shouldRecoverIfRedisConnectionIsLost()", "testcase": true, "constructor": false, "invocations": ["create", "create", "connect", "get", "stop", "get", "start", "get", "shutdown"]}, "focal_class": {"identifier": "RedisBackedJobService", "superclass": "", "interfaces": "implements JobService", "fields": [{"original_string": "private static final Logger log = org.slf4j.LoggerFactory.getLogger(RedisBackedJobService.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = org.slf4j.LoggerFactory.getLogger(RedisBackedJobService.class)", "var_name": "log"}, {"original_string": "private final RedisCommands<byte[], byte[]> syncCommand;", "modifier": "private final", "type": "RedisCommands<byte[], byte[]>", "declarator": "syncCommand", "var_name": "syncCommand"}, {"original_string": "private final int defaultExpirySeconds = (int) Duration.standardDays(1).getStandardSeconds();", "modifier": "private final", "type": "int", "declarator": "defaultExpirySeconds = (int) Duration.standardDays(1).getStandardSeconds()", "var_name": "defaultExpirySeconds"}], "methods": [{"identifier": "RedisBackedJobService", "parameters": "(FeastProperties.JobStoreProperties jobStoreProperties)", "modifiers": "public", "return": "", "signature": " RedisBackedJobService(FeastProperties.JobStoreProperties jobStoreProperties)", "full_signature": "public  RedisBackedJobService(FeastProperties.JobStoreProperties jobStoreProperties)", "class_method_signature": "RedisBackedJobService.RedisBackedJobService(FeastProperties.JobStoreProperties jobStoreProperties)", "testcase": false, "constructor": true}, {"identifier": "RedisBackedJobService", "parameters": "(StatefulRedisConnection<byte[], byte[]> connection)", "modifiers": "public", "return": "", "signature": " RedisBackedJobService(StatefulRedisConnection<byte[], byte[]> connection)", "full_signature": "public  RedisBackedJobService(StatefulRedisConnection<byte[], byte[]> connection)", "class_method_signature": "RedisBackedJobService.RedisBackedJobService(StatefulRedisConnection<byte[], byte[]> connection)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(String id)", "modifiers": "@Override public", "return": "Optional<Job>", "signature": "Optional<Job> get(String id)", "full_signature": "@Override public Optional<Job> get(String id)", "class_method_signature": "RedisBackedJobService.get(String id)", "testcase": false, "constructor": false}, {"identifier": "upsert", "parameters": "(Job job)", "modifiers": "@Override public", "return": "void", "signature": "void upsert(Job job)", "full_signature": "@Override public void upsert(Job job)", "class_method_signature": "RedisBackedJobService.upsert(Job job)", "testcase": false, "constructor": false}], "file": "serving/src/main/java/feast/serving/service/RedisBackedJobService.java"}, "focal_method": {"identifier": "get", "parameters": "(String id)", "modifiers": "@Override public", "return": "Optional<Job>", "body": "@Override\n  public Optional<Job> get(String id) {\n    Job job = null;\n    try {\n      String json = new String(syncCommand.get(id.getBytes()));\n      if (json.isEmpty()) {\n        return Optional.empty();\n      }\n      Builder builder = Job.newBuilder();\n      JsonFormat.parser().merge(json, builder);\n      job = builder.build();\n    } catch (Exception e) {\n      log.error(String.format(\"Failed to parse JSON for Feast job: %s\", e.getMessage()));\n    }\n    return Optional.ofNullable(job);\n  }", "signature": "Optional<Job> get(String id)", "full_signature": "@Override public Optional<Job> get(String id)", "class_method_signature": "RedisBackedJobService.get(String id)", "testcase": false, "constructor": false, "invocations": ["get", "getBytes", "isEmpty", "empty", "newBuilder", "merge", "parser", "build", "error", "format", "getMessage", "ofNullable"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}