{"test_class": {"identifier": "TimeWaitLoggerTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/log/TimeWaitLoggerTest.java"}, "test_case": {"identifier": "testTimeWait", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTimeWait() throws InterruptedException {\n        TimeWaitLogger timeWaitLogger = new TimeWaitLogger(1000);\n        AtomicLong atomicLong = new AtomicLong();\n        new Thread(()->{\n            while (true){\n                timeWaitLogger.logWithRunnable(atomicLong::incrementAndGet);\n            }\n        }).start();\n        Thread.sleep(1500);\n        Assert.assertEquals(2L,atomicLong.get());\n    }", "signature": "void testTimeWait()", "full_signature": "@Test public void testTimeWait()", "class_method_signature": "TimeWaitLoggerTest.testTimeWait()", "testcase": true, "constructor": false, "invocations": ["start", "logWithRunnable", "sleep", "assertEquals", "get"]}, "focal_class": {"identifier": "TimeWaitLogger", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final long    waitTime;", "modifier": "private final", "type": "long", "declarator": "waitTime", "var_name": "waitTime"}, {"original_string": "private volatile long lastLogTime;", "modifier": "private volatile", "type": "long", "declarator": "lastLogTime", "var_name": "lastLogTime"}, {"original_string": "private final boolean disabled;", "modifier": "private final", "type": "boolean", "declarator": "disabled", "var_name": "disabled"}], "methods": [{"identifier": "TimeWaitLogger", "parameters": "(long waitTimeMills)", "modifiers": "public", "return": "", "signature": " TimeWaitLogger(long waitTimeMills)", "full_signature": "public  TimeWaitLogger(long waitTimeMills)", "class_method_signature": "TimeWaitLogger.TimeWaitLogger(long waitTimeMills)", "testcase": false, "constructor": true}, {"identifier": "logWithRunnable", "parameters": "(Runnable runnable)", "modifiers": "public", "return": "void", "signature": "void logWithRunnable(Runnable runnable)", "full_signature": "public void logWithRunnable(Runnable runnable)", "class_method_signature": "TimeWaitLogger.logWithRunnable(Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "logWithConsumer", "parameters": "(Consumer<T> consumer, T t)", "modifiers": "public", "return": "void", "signature": "void logWithConsumer(Consumer<T> consumer, T t)", "full_signature": "public void logWithConsumer(Consumer<T> consumer, T t)", "class_method_signature": "TimeWaitLogger.logWithConsumer(Consumer<T> consumer, T t)", "testcase": false, "constructor": false}, {"identifier": "logWithBiConsume", "parameters": "(BiConsumer<T, R> biConsumer, T r, R executor)", "modifiers": "public", "return": "void", "signature": "void logWithBiConsume(BiConsumer<T, R> biConsumer, T r, R executor)", "full_signature": "public void logWithBiConsume(BiConsumer<T, R> biConsumer, T r, R executor)", "class_method_signature": "TimeWaitLogger.logWithBiConsume(BiConsumer<T, R> biConsumer, T r, R executor)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/log/TimeWaitLogger.java"}, "focal_method": {"identifier": "logWithRunnable", "parameters": "(Runnable runnable)", "modifiers": "public", "return": "void", "body": "public void logWithRunnable(Runnable runnable) {\n        long currentTimeMillis = System.currentTimeMillis();\n        if (disabled) {\n            runnable.run();\n        } else if (currentTimeMillis > lastLogTime + waitTime) {\n            lastLogTime = currentTimeMillis;\n            runnable.run();\n        }\n\n    }", "signature": "void logWithRunnable(Runnable runnable)", "full_signature": "public void logWithRunnable(Runnable runnable)", "class_method_signature": "TimeWaitLogger.logWithRunnable(Runnable runnable)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "run", "run"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}