{"test_class": {"identifier": "AdvancedParameterParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "tddl-rule/src/test/java/com/taobao/tddl/rule/utils/AdvancedParameterParserTest.java"}, "test_case": {"identifier": "test_", "parameters": "", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_\u8303\u56f4() {\n        String param = \"id,1_number,0_1024|1m_1g\";\n        AdvancedParameter result = AdvancedParameterParser.getAdvancedParamByParamTokenNew(param, false);\n        testResult(result,\n            AtomIncreaseType.NUMBER,\n            new AdvancedParameter.Range[] { getRange(0, 1024), getRange(1 * 1000000, 1 * 1000000000) },\n            1);\n\n        param = \"id,0_1024|1m_1g\";\n        result = AdvancedParameterParser.getAdvancedParamByParamTokenNew(param, false);\n        testResult(result,\n            AtomIncreaseType.NUMBER,\n            new AdvancedParameter.Range[] { getRange(0, 1024), getRange(1 * 1000000, 1 * 1000000000) },\n            1);\n    }", "signature": "void test_", "full_signature": "@Test public void test_", "class_method_signature": "AdvancedParameterParserTest.test_", "testcase": true, "constructor": false, "invocations": ["getAdvancedParamByParamTokenNew", "testResult", "getRange", "getRange", "getAdvancedParamByParamTokenNew", "testResult", "getRange", "getRange"]}, "focal_class": {"identifier": "AdvancedParameterParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PARAM_SEGMENT_SPLITOR           = \",\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_SEGMENT_SPLITOR           = \",\"", "var_name": "PARAM_SEGMENT_SPLITOR"}, {"original_string": "public static final char   NEED_APPEAR_SYMBOL              = '?';", "modifier": "public static final", "type": "char", "declarator": "NEED_APPEAR_SYMBOL              = '?'", "var_name": "NEED_APPEAR_SYMBOL"}, {"original_string": "public static final String INCREASE_TYPE_SPLITOR           = \"_\";", "modifier": "public static final", "type": "String", "declarator": "INCREASE_TYPE_SPLITOR           = \"_\"", "var_name": "INCREASE_TYPE_SPLITOR"}, {"original_string": "public static final String RANGE_SEGMENT_SPLITOR           = \"|\";", "modifier": "public static final", "type": "String", "declarator": "RANGE_SEGMENT_SPLITOR           = \"|\"", "var_name": "RANGE_SEGMENT_SPLITOR"}, {"original_string": "public static final String RANGE_SEGMENT_START_END_SPLITOR = \"_\";", "modifier": "public static final", "type": "String", "declarator": "RANGE_SEGMENT_START_END_SPLITOR = \"_\"", "var_name": "RANGE_SEGMENT_START_END_SPLITOR"}], "methods": [{"identifier": "getAdvancedParamByParamTokenNew", "parameters": "(String paramToken, boolean completeConfig)", "modifiers": "public static", "return": "AdvancedParameter", "signature": "AdvancedParameter getAdvancedParamByParamTokenNew(String paramToken, boolean completeConfig)", "full_signature": "public static AdvancedParameter getAdvancedParamByParamTokenNew(String paramToken, boolean completeConfig)", "class_method_signature": "AdvancedParameterParser.getAdvancedParamByParamTokenNew(String paramToken, boolean completeConfig)", "testcase": false, "constructor": false}, {"identifier": "parseKeyPart", "parameters": "(String keyPart, boolean[] needAppear)", "modifiers": "private static", "return": "String", "signature": "String parseKeyPart(String keyPart, boolean[] needAppear)", "full_signature": "private static String parseKeyPart(String keyPart, boolean[] needAppear)", "class_method_signature": "AdvancedParameterParser.parseKeyPart(String keyPart, boolean[] needAppear)", "testcase": false, "constructor": false}, {"identifier": "getIncreaseType", "parameters": "(String paramTokenStr)", "modifiers": "private static", "return": "AtomIncreaseType", "signature": "AtomIncreaseType getIncreaseType(String paramTokenStr)", "full_signature": "private static AtomIncreaseType getIncreaseType(String paramTokenStr)", "class_method_signature": "AdvancedParameterParser.getIncreaseType(String paramTokenStr)", "testcase": false, "constructor": false}, {"identifier": "getAtomicIncreaseValue", "parameters": "(String paramTokenStr, AtomIncreaseType type)", "modifiers": "private static", "return": "Comparable<?>", "signature": "Comparable<?> getAtomicIncreaseValue(String paramTokenStr, AtomIncreaseType type)", "full_signature": "private static Comparable<?> getAtomicIncreaseValue(String paramTokenStr, AtomIncreaseType type)", "class_method_signature": "AdvancedParameterParser.getAtomicIncreaseValue(String paramTokenStr, AtomIncreaseType type)", "testcase": false, "constructor": false}, {"identifier": "parseRangeArray", "parameters": "(String paramTokenStr)", "modifiers": "private static", "return": "Range[]", "signature": "Range[] parseRangeArray(String paramTokenStr)", "full_signature": "private static Range[] parseRangeArray(String paramTokenStr)", "class_method_signature": "AdvancedParameterParser.parseRangeArray(String paramTokenStr)", "testcase": false, "constructor": false}, {"identifier": "fromReadableInt", "parameters": "(String readableInt)", "modifiers": "private static", "return": "int", "signature": "int fromReadableInt(String readableInt)", "full_signature": "private static int fromReadableInt(String readableInt)", "class_method_signature": "AdvancedParameterParser.fromReadableInt(String readableInt)", "testcase": false, "constructor": false}, {"identifier": "getCumulativeTimes", "parameters": "(Range ro)", "modifiers": "private static", "return": "Integer", "signature": "Integer getCumulativeTimes(Range ro)", "full_signature": "private static Integer getCumulativeTimes(Range ro)", "class_method_signature": "AdvancedParameterParser.getCumulativeTimes(Range ro)", "testcase": false, "constructor": false}], "file": "tddl-rule/src/main/java/com/taobao/tddl/rule/utils/AdvancedParameterParser.java"}, "focal_method": {"identifier": "getAdvancedParamByParamTokenNew", "parameters": "(String paramToken, boolean completeConfig)", "modifiers": "public static", "return": "AdvancedParameter", "body": "public static AdvancedParameter getAdvancedParamByParamTokenNew(String paramToken, boolean completeConfig) {\n        String key;\n        boolean[] needAppear = new boolean[1];\n\n        AtomIncreaseType atomicIncreateType = null;\n        Comparable<?> atomicIncreateValue = null;\n\n        Range[] rangeObjectArray = null;\n        Integer cumulativeTimes = null;\n\n        String[] paramTokens = TStringUtil.split(paramToken, PARAM_SEGMENT_SPLITOR);\n        switch (paramTokens.length) {\n            case 1:\n                if (completeConfig) {\n                    throw new IllegalArgumentException(\"\u89c4\u5219\u5fc5\u987b\u914d\u7f6e\u5b8c\u5168\uff0c\u683c\u5f0f\u5982\u4e0b:#id,1_number,1024#\");\n                }\n                key = parseKeyPart(paramTokens[0], needAppear);\n                break;\n            case 2:\n                // \u82e5\u53ea\u6709\u4e24\u4e2a\uff0c\u81ea\u589e\u7c7b\u578b\u9ed8\u8ba4\u4e3anumber\uff0c\u81ea\u589e\u503c\u9ed8\u8ba4\u4e3a1\uff1b \u5176\u4ed6\u540ccase 3\n                key = parseKeyPart(paramTokens[0], needAppear);\n\n                atomicIncreateType = AtomIncreaseType.NUMBER;\n                atomicIncreateValue = 1;\n\n                try {\n                    rangeObjectArray = parseRangeArray(paramTokens[1]);\n                    cumulativeTimes = getCumulativeTimes(rangeObjectArray[0]);\n                } catch (NumberFormatException e) {\n                    throw new IllegalArgumentException(\"\u8f93\u5165\u7684\u53c2\u6570\u4e0d\u4e3aInteger\u7c7b\u578b,\u53c2\u6570\u4e3a:\" + paramToken, e);\n                } catch (Exception e) {\n                    throw new IllegalArgumentException(e);\n                }\n\n                break;\n            case 3:\n                key = parseKeyPart(paramTokens[0], needAppear);\n                try {\n\n                    atomicIncreateType = getIncreaseType(paramTokens[1]);\n                    atomicIncreateValue = getAtomicIncreaseValue(paramTokens[1], atomicIncreateType);\n                    rangeObjectArray = parseRangeArray(paramTokens[2]);\n                    // \u957f\u5ea6\u4e3a\u4e09\u5fc5\u5b9a\u6709\u8303\u56f4\u5b9a\u4e49\uff0c\u5426\u5219\u76f4\u63a5\u629b\u9519\n                    // \u5982\u679c\u8303\u56f4\u6709\u591a\u6bb5(\"|\"\u5206\u5272)\uff0c\u90a3\u4e48\u4ee5\u7b2c\u4e00\u6bb5\u7684\u8de8\u5ea6\u4e3a\u6807\u51c6\n                    cumulativeTimes = getCumulativeTimes(rangeObjectArray[0]);\n                } catch (NumberFormatException e) {\n                    throw new IllegalArgumentException(\"\u8f93\u5165\u7684\u53c2\u6570\u4e0d\u4e3aInteger\u7c7b\u578b,\u53c2\u6570\u4e3a:\" + paramToken, e);\n                } catch (Exception e) {\n                    throw new IllegalArgumentException(e);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"\u9519\u8bef\u7684\u53c2\u6570\u4e2a\u6570\uff0c\u5fc5\u987b\u4e3a1\u4e2a\u6216\u80053\u4e2a\uff0c3\u4e2a\u7684\u65f6\u5019\u4e3a\u5141\u8bb8\u4f7f\u7528\" + \"\u679a\u4e3e\u65f6\u7684\u6570\u636e\");\n        }\n\n        return new AdvancedParameter(key,\n            atomicIncreateValue,\n            cumulativeTimes,\n            needAppear[0],\n            atomicIncreateType,\n            rangeObjectArray);\n    }", "signature": "AdvancedParameter getAdvancedParamByParamTokenNew(String paramToken, boolean completeConfig)", "full_signature": "public static AdvancedParameter getAdvancedParamByParamTokenNew(String paramToken, boolean completeConfig)", "class_method_signature": "AdvancedParameterParser.getAdvancedParamByParamTokenNew(String paramToken, boolean completeConfig)", "testcase": false, "constructor": false, "invocations": ["split", "parseKeyPart", "parseKeyPart", "parseRangeArray", "getCumulativeTimes", "parseKeyPart", "getIncreaseType", "getAtomicIncreaseValue", "parseRangeArray", "getCumulativeTimes"]}, "repository": {"repo_id": 16945217, "url": "https://github.com/cpsing/tddl", "language": "Java", "is_fork": false, "fork_count": 126, "stargazer_count": 31, "size": 3247, "license": "licensed"}}