{"test_class": {"identifier": "EncryCredentialToPrincipalResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EncryCredentialToPrincipalResolver resolver;", "modifier": "private", "type": "EncryCredentialToPrincipalResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "ki4so-core/src/test/java/com/github/ebnew/ki4so/core/authentication/resolvers/EncryCredentialToPrincipalResolverTest.java"}, "test_case": {"identifier": "testResolvePrincipal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolvePrincipal() {\n        //\u6d4b\u8bd5null\u60c5\u51b5\u3002\n        assertNull(this.resolver.resolvePrincipal(null));\n\n        //\u6d4b\u8bd5\u4e0d\u53ea\u662f\u7684\u7528\u6237\u51ed\u636e\u5bf9\u8c61\u3002\n        Credential credential = Mockito.mock(Credential.class);\n        assertNull(this.resolver.resolvePrincipal(credential));\n\n        //\u6d4b\u8bd5\u6b63\u5e38\u60c5\u51b5\u3002\n        String userId = \"test\";\n        EncryCredential encryCredential = new EncryCredential(\"ddd\");\n        Map<String, Object> param = new HashMap<String, Object>();\n        encryCredential.setParameters(param);\n        EncryCredentialInfo encryCredentialInfo = new EncryCredentialInfo();\n        encryCredentialInfo.setUserId(userId);\n        encryCredential.setEncryCredentialInfo(encryCredentialInfo);\n        Principal principal = this.resolver.resolvePrincipal(encryCredential);\n        assertNotNull(principal);\n        assertEquals(userId, principal.getId());\n        assertEquals(param, principal.getAttributes());\n    }", "signature": "void testResolvePrincipal()", "full_signature": "@Test public void testResolvePrincipal()", "class_method_signature": "EncryCredentialToPrincipalResolverTest.testResolvePrincipal()", "testcase": true, "constructor": false, "invocations": ["assertNull", "resolvePrincipal", "mock", "assertNull", "resolvePrincipal", "setParameters", "setUserId", "setEncryCredentialInfo", "resolvePrincipal", "assertNotNull", "assertEquals", "getId", "assertEquals", "getAttributes"]}, "focal_class": {"identifier": "EncryCredentialToPrincipalResolver", "superclass": "", "interfaces": "implements CredentialToPrincipalResolver", "fields": [{"original_string": "private static final Class<EncryCredential> DEFAULT_CLASS = EncryCredential.class;", "modifier": "private static final", "type": "Class<EncryCredential>", "declarator": "DEFAULT_CLASS = EncryCredential.class", "var_name": "DEFAULT_CLASS"}, {"original_string": "private Class<?> classToSupport = DEFAULT_CLASS;", "modifier": "private", "type": "Class<?>", "declarator": "classToSupport = DEFAULT_CLASS", "var_name": "classToSupport"}, {"original_string": "private boolean supportSubClasses = true;", "modifier": "private", "type": "boolean", "declarator": "supportSubClasses = true", "var_name": "supportSubClasses"}], "methods": [{"identifier": "setSupportSubClasses", "parameters": "(boolean supportSubClasses)", "modifiers": "public", "return": "void", "signature": "void setSupportSubClasses(boolean supportSubClasses)", "full_signature": "public void setSupportSubClasses(boolean supportSubClasses)", "class_method_signature": "EncryCredentialToPrincipalResolver.setSupportSubClasses(boolean supportSubClasses)", "testcase": false, "constructor": false}, {"identifier": "resolvePrincipal", "parameters": "(Credential credential)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal resolvePrincipal(Credential credential)", "full_signature": "@Override public Principal resolvePrincipal(Credential credential)", "class_method_signature": "EncryCredentialToPrincipalResolver.resolvePrincipal(Credential credential)", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(Credential credential)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(Credential credential)", "full_signature": "@Override public boolean supports(Credential credential)", "class_method_signature": "EncryCredentialToPrincipalResolver.supports(Credential credential)", "testcase": false, "constructor": false}], "file": "ki4so-core/src/main/java/com/github/ebnew/ki4so/core/authentication/resolvers/EncryCredentialToPrincipalResolver.java"}, "focal_method": {"identifier": "resolvePrincipal", "parameters": "(Credential credential)", "modifiers": "@Override public", "return": "Principal", "body": "@Override\n    public Principal resolvePrincipal(Credential credential) {\n        //\u82e5\u7c7b\u578b\u5339\u914d\uff0c\u5219\u8fdb\u884c\u8f6c\u6362\u3002\n        if (credential != null && this.supports(credential)) {\n            EncryCredential encryCredential = (EncryCredential) credential;\n            DefaultUserPrincipal principal = new DefaultUserPrincipal();\n            //\u89e3\u6790\u52a0\u5bc6\u540e\u51ed\u636e\u4fe1\u606f\u3002\n            EncryCredentialInfo encryCredentialInfo = encryCredential.getEncryCredentialInfo();\n            //\u8bbe\u7f6e\u7528\u6237\u540d\u4e3a\u552f\u4e00\u6807\u8bc6\u3002\n            if (encryCredentialInfo != null) {\n                principal.setId(encryCredentialInfo.getUserId());\n                //\u8bbe\u7f6e\u53c2\u6570\u8868\u4e3a\u7528\u6237\u5c5e\u6027\u3002\n                principal.setAttributes(encryCredential.getParameters());\n            }\n            return principal;\n        }\n        return null;\n    }", "signature": "Principal resolvePrincipal(Credential credential)", "full_signature": "@Override public Principal resolvePrincipal(Credential credential)", "class_method_signature": "EncryCredentialToPrincipalResolver.resolvePrincipal(Credential credential)", "testcase": false, "constructor": false, "invocations": ["supports", "getEncryCredentialInfo", "setId", "getUserId", "setAttributes", "getParameters"]}, "repository": {"repo_id": 9836604, "url": "https://github.com/ebnew/ki4so", "language": "Java", "is_fork": false, "fork_count": 84, "stargazer_count": 100, "size": 4421, "license": "licensed"}}