{"test_class": {"identifier": "MmffAromaticTypeMappingTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/forcefield/src/test/java/org/openscience/cdk/forcefield/mmff/MmffAromaticTypeMappingTest.java"}, "test_case": {"identifier": "updateCStarToCB", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void updateCStarToCB() {\n        int[] cycle = new int[]{2, 4, 3, 1, 0, 5, 2};\n        String[] symbs = new String[10];\n        Arrays.fill(symbs, \"\");\n        symbs[cycle[1]] = \"C=C\";\n        symbs[cycle[2]] = \"C=N\";\n        MmffAromaticTypeMapping.updateAromaticTypesInSixMemberRing(cycle, symbs);\n        assertThat(symbs[cycle[1]], is(\"CB\"));\n        assertThat(symbs[cycle[2]], is(\"CB\"));\n    }", "signature": "void updateCStarToCB()", "full_signature": "@Test public void updateCStarToCB()", "class_method_signature": "MmffAromaticTypeMappingTest.updateCStarToCB()", "testcase": true, "constructor": false, "invocations": ["fill", "updateAromaticTypesInSixMemberRing", "assertThat", "is", "assertThat", "is"]}, "focal_class": {"identifier": "MmffAromaticTypeMapping", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<String, String> hetroTypes = ImmutableMap.<String, String>builder().put(\"S\", STHI)\n                                                               .put(\"-O-\", OFUR).put(\"OC=C\", OFUR).put(\"OC=N\", OFUR)\n                                                               .put(NCN_PLUS, NIM_PLUS).put(NGD_PLUS, NIM_PLUS)\n                                                               .put(\"NM\", N5M).put(\"NC=C\", NPYL).put(\"NC=N\", NPYL).put(\"NN=N\", NPYL)\n                                                               .put(\"NC=O\", NPYL).put(\"NC=S\", NPYL).put(\"NSO2\", NPYL)\n                                                               .put(\"NR\", NPYL).build();", "modifier": "private final", "type": "Map<String, String>", "declarator": "hetroTypes = ImmutableMap.<String, String>builder().put(\"S\", STHI)\n                                                               .put(\"-O-\", OFUR).put(\"OC=C\", OFUR).put(\"OC=N\", OFUR)\n                                                               .put(NCN_PLUS, NIM_PLUS).put(NGD_PLUS, NIM_PLUS)\n                                                               .put(\"NM\", N5M).put(\"NC=C\", NPYL).put(\"NC=N\", NPYL).put(\"NN=N\", NPYL)\n                                                               .put(\"NC=O\", NPYL).put(\"NC=S\", NPYL).put(\"NSO2\", NPYL)\n                                                               .put(\"NR\", NPYL).build()", "var_name": "hetroTypes"}, {"original_string": "private final Map<String, String> alphaTypes = ImmutableMap.<String, String> builder().put(\"CNN+\", CIM_PLUS)\n                                                         .put(\"CGD+\", CIM_PLUS).put(\"C=C\", C5A).put(\"C=N\", C5A)\n                                                         .put(\"CGD\", C5A).put(\"CB\", C5A).put(C5B, C5).put(\"N2OX\", N5AX)\n                                                         .put(NCN_PLUS, NIM_PLUS).put(NGD_PLUS, NIM_PLUS)\n                                                         .put(\"N+=C\", N5A_PLUS).put(\"N+=N\", N5A_PLUS)\n                                                         .put(\"NPD+\", N5A_PLUS).put(\"N=C\", N5A).put(\"N=N\", N5A).build();", "modifier": "private final", "type": "Map<String, String>", "declarator": "alphaTypes = ImmutableMap.<String, String> builder().put(\"CNN+\", CIM_PLUS)\n                                                         .put(\"CGD+\", CIM_PLUS).put(\"C=C\", C5A).put(\"C=N\", C5A)\n                                                         .put(\"CGD\", C5A).put(\"CB\", C5A).put(C5B, C5).put(\"N2OX\", N5AX)\n                                                         .put(NCN_PLUS, NIM_PLUS).put(NGD_PLUS, NIM_PLUS)\n                                                         .put(\"N+=C\", N5A_PLUS).put(\"N+=N\", N5A_PLUS)\n                                                         .put(\"NPD+\", N5A_PLUS).put(\"N=C\", N5A).put(\"N=N\", N5A).build()", "var_name": "alphaTypes"}, {"original_string": "private final Map<String, String> betaTypes  = ImmutableMap.<String, String> builder().put(\"CNN+\", CIM_PLUS)\n                                                         .put(\"CGD+\", CIM_PLUS).put(\"C=C\", C5B).put(\"C=N\", C5B)\n                                                         .put(\"CGD\", C5B).put(\"CB\", C5B).put(C5A, C5).put(\"N2OX\", N5BX)\n                                                         .put(NCN_PLUS, NIM_PLUS).put(NGD_PLUS, NIM_PLUS)\n                                                         .put(\"N+=C\", N5B_PLUS).put(\"N+=N\", N5B_PLUS)\n                                                         .put(\"NPD+\", N5B_PLUS).put(\"N=C\", N5B).put(\"N=N\", N5B).build();", "modifier": "private final", "type": "Map<String, String>", "declarator": "betaTypes  = ImmutableMap.<String, String> builder().put(\"CNN+\", CIM_PLUS)\n                                                         .put(\"CGD+\", CIM_PLUS).put(\"C=C\", C5B).put(\"C=N\", C5B)\n                                                         .put(\"CGD\", C5B).put(\"CB\", C5B).put(C5A, C5).put(\"N2OX\", N5BX)\n                                                         .put(NCN_PLUS, NIM_PLUS).put(NGD_PLUS, NIM_PLUS)\n                                                         .put(\"N+=C\", N5B_PLUS).put(\"N+=N\", N5B_PLUS)\n                                                         .put(\"NPD+\", N5B_PLUS).put(\"N=C\", N5B).put(\"N=N\", N5B).build()", "var_name": "betaTypes"}, {"original_string": "@SuppressWarnings(\"PMD.ShortVariable\")\n    // C5 is intended\n    private static final String       C5         = \"C5\";", "modifier": "@SuppressWarnings(\"PMD.ShortVariable\")\n    // C5 is intended\n    private static final", "type": "String", "declarator": "C5         = \"C5\"", "var_name": "C5"}, {"original_string": "private static final String       C5A        = \"C5A\";", "modifier": "private static final", "type": "String", "declarator": "C5A        = \"C5A\"", "var_name": "C5A"}, {"original_string": "private static final String       C5B        = \"C5B\";", "modifier": "private static final", "type": "String", "declarator": "C5B        = \"C5B\"", "var_name": "C5B"}, {"original_string": "private static final String       N5A        = \"N5A\";", "modifier": "private static final", "type": "String", "declarator": "N5A        = \"N5A\"", "var_name": "N5A"}, {"original_string": "private static final String       N5B        = \"N5B\";", "modifier": "private static final", "type": "String", "declarator": "N5B        = \"N5B\"", "var_name": "N5B"}, {"original_string": "private static final String       NPYL       = \"NPYL\";", "modifier": "private static final", "type": "String", "declarator": "NPYL       = \"NPYL\"", "var_name": "NPYL"}, {"original_string": "private static final String       NCN_PLUS   = \"NCN+\";", "modifier": "private static final", "type": "String", "declarator": "NCN_PLUS   = \"NCN+\"", "var_name": "NCN_PLUS"}, {"original_string": "private static final String       NGD_PLUS   = \"NGD+\";", "modifier": "private static final", "type": "String", "declarator": "NGD_PLUS   = \"NGD+\"", "var_name": "NGD_PLUS"}, {"original_string": "private static final String       NIM_PLUS   = \"NIM+\";", "modifier": "private static final", "type": "String", "declarator": "NIM_PLUS   = \"NIM+\"", "var_name": "NIM_PLUS"}, {"original_string": "private static final String       N5A_PLUS   = \"N5A+\";", "modifier": "private static final", "type": "String", "declarator": "N5A_PLUS   = \"N5A+\"", "var_name": "N5A_PLUS"}, {"original_string": "private static final String       N5B_PLUS   = \"N5B+\";", "modifier": "private static final", "type": "String", "declarator": "N5B_PLUS   = \"N5B+\"", "var_name": "N5B_PLUS"}, {"original_string": "private static final String       N5M        = \"N5M\";", "modifier": "private static final", "type": "String", "declarator": "N5M        = \"N5M\"", "var_name": "N5M"}, {"original_string": "private static final String       N5AX       = \"N5AX\";", "modifier": "private static final", "type": "String", "declarator": "N5AX       = \"N5AX\"", "var_name": "N5AX"}, {"original_string": "private static final String       N5BX       = \"N5BX\";", "modifier": "private static final", "type": "String", "declarator": "N5BX       = \"N5BX\"", "var_name": "N5BX"}, {"original_string": "private static final String       CIM_PLUS   = \"CIM+\";", "modifier": "private static final", "type": "String", "declarator": "CIM_PLUS   = \"CIM+\"", "var_name": "CIM_PLUS"}, {"original_string": "private static final String       OFUR       = \"OFUR\";", "modifier": "private static final", "type": "String", "declarator": "OFUR       = \"OFUR\"", "var_name": "OFUR"}, {"original_string": "private static final String       STHI       = \"STHI\";", "modifier": "private static final", "type": "String", "declarator": "STHI       = \"STHI\"", "var_name": "STHI"}], "methods": [{"identifier": "MmffAromaticTypeMapping", "parameters": "()", "modifiers": "", "return": "", "signature": " MmffAromaticTypeMapping()", "full_signature": "  MmffAromaticTypeMapping()", "class_method_signature": "MmffAromaticTypeMapping.MmffAromaticTypeMapping()", "testcase": false, "constructor": true}, {"identifier": "assign", "parameters": "(IAtomContainer container, String[] symbs, EdgeToBondMap bonds, int[][] graph, Set<IBond> mmffArom)", "modifiers": "", "return": "void", "signature": "void assign(IAtomContainer container, String[] symbs, EdgeToBondMap bonds, int[][] graph, Set<IBond> mmffArom)", "full_signature": " void assign(IAtomContainer container, String[] symbs, EdgeToBondMap bonds, int[][] graph, Set<IBond> mmffArom)", "class_method_signature": "MmffAromaticTypeMapping.assign(IAtomContainer container, String[] symbs, EdgeToBondMap bonds, int[][] graph, Set<IBond> mmffArom)", "testcase": false, "constructor": false}, {"identifier": "findAromaticRings", "parameters": "(int[][] cycles, int[] contribution, int[] dbs)", "modifiers": "private static", "return": "int[][]", "signature": "int[][] findAromaticRings(int[][] cycles, int[] contribution, int[] dbs)", "full_signature": "private static int[][] findAromaticRings(int[][] cycles, int[] contribution, int[] dbs)", "class_method_signature": "MmffAromaticTypeMapping.findAromaticRings(int[][] cycles, int[] contribution, int[] dbs)", "testcase": false, "constructor": false}, {"identifier": "isAromaticRing", "parameters": "(int[] cycle, int[] contribution, int[] dbs, boolean[] aromatic)", "modifiers": "static", "return": "boolean", "signature": "boolean isAromaticRing(int[] cycle, int[] contribution, int[] dbs, boolean[] aromatic)", "full_signature": "static boolean isAromaticRing(int[] cycle, int[] contribution, int[] dbs, boolean[] aromatic)", "class_method_signature": "MmffAromaticTypeMapping.isAromaticRing(int[] cycle, int[] contribution, int[] dbs, boolean[] aromatic)", "testcase": false, "constructor": false}, {"identifier": "updateAromaticTypesInSixMemberRing", "parameters": "(int[] cycle, String[] symbs)", "modifiers": "static", "return": "void", "signature": "void updateAromaticTypesInSixMemberRing(int[] cycle, String[] symbs)", "full_signature": "static void updateAromaticTypesInSixMemberRing(int[] cycle, String[] symbs)", "class_method_signature": "MmffAromaticTypeMapping.updateAromaticTypesInSixMemberRing(int[] cycle, String[] symbs)", "testcase": false, "constructor": false}, {"identifier": "updateAromaticTypesInFiveMemberRing", "parameters": "(int[] cycle, String[] symbs)", "modifiers": "private", "return": "void", "signature": "void updateAromaticTypesInFiveMemberRing(int[] cycle, String[] symbs)", "full_signature": "private void updateAromaticTypesInFiveMemberRing(int[] cycle, String[] symbs)", "class_method_signature": "MmffAromaticTypeMapping.updateAromaticTypesInFiveMemberRing(int[] cycle, String[] symbs)", "testcase": false, "constructor": false}, {"identifier": "getAlphaAromaticType", "parameters": "(String symb, boolean imidazolium, boolean anion)", "modifiers": "private", "return": "String", "signature": "String getAlphaAromaticType(String symb, boolean imidazolium, boolean anion)", "full_signature": "private String getAlphaAromaticType(String symb, boolean imidazolium, boolean anion)", "class_method_signature": "MmffAromaticTypeMapping.getAlphaAromaticType(String symb, boolean imidazolium, boolean anion)", "testcase": false, "constructor": false}, {"identifier": "getBetaAromaticType", "parameters": "(String symb, boolean imidazolium, boolean anion)", "modifiers": "private", "return": "String", "signature": "String getBetaAromaticType(String symb, boolean imidazolium, boolean anion)", "full_signature": "private String getBetaAromaticType(String symb, boolean imidazolium, boolean anion)", "class_method_signature": "MmffAromaticTypeMapping.getBetaAromaticType(String symb, boolean imidazolium, boolean anion)", "testcase": false, "constructor": false}, {"identifier": "getAromaticType", "parameters": "(Map<String, String> map, char suffix, String symb, boolean imidazolium, boolean anion)", "modifiers": "static", "return": "String", "signature": "String getAromaticType(Map<String, String> map, char suffix, String symb, boolean imidazolium, boolean anion)", "full_signature": "static String getAromaticType(Map<String, String> map, char suffix, String symb, boolean imidazolium, boolean anion)", "class_method_signature": "MmffAromaticTypeMapping.getAromaticType(Map<String, String> map, char suffix, String symb, boolean imidazolium, boolean anion)", "testcase": false, "constructor": false}, {"identifier": "indexOfHetro", "parameters": "(int[] cycle, int[] contribution)", "modifiers": "static", "return": "int", "signature": "int indexOfHetro(int[] cycle, int[] contribution)", "full_signature": "static int indexOfHetro(int[] cycle, int[] contribution)", "class_method_signature": "MmffAromaticTypeMapping.indexOfHetro(int[] cycle, int[] contribution)", "testcase": false, "constructor": false}, {"identifier": "normaliseCycle", "parameters": "(int[] cycle, int[] contribution)", "modifiers": "static", "return": "boolean", "signature": "boolean normaliseCycle(int[] cycle, int[] contribution)", "full_signature": "static boolean normaliseCycle(int[] cycle, int[] contribution)", "class_method_signature": "MmffAromaticTypeMapping.normaliseCycle(int[] cycle, int[] contribution)", "testcase": false, "constructor": false}, {"identifier": "contribution", "parameters": "(int elem, int x, int v)", "modifiers": "@SuppressWarnings(\"PMD.CyclomaticComplexity\") // high complexity but clean static", "return": "int", "signature": "int contribution(int elem, int x, int v)", "full_signature": "@SuppressWarnings(\"PMD.CyclomaticComplexity\") // high complexity but clean static int contribution(int elem, int x, int v)", "class_method_signature": "MmffAromaticTypeMapping.contribution(int elem, int x, int v)", "testcase": false, "constructor": false}, {"identifier": "cyclesOfSizeFiveOrSix", "parameters": "(IAtomContainer container, int[][] graph)", "modifiers": "static", "return": "int[][]", "signature": "int[][] cyclesOfSizeFiveOrSix(IAtomContainer container, int[][] graph)", "full_signature": "static int[][] cyclesOfSizeFiveOrSix(IAtomContainer container, int[][] graph)", "class_method_signature": "MmffAromaticTypeMapping.cyclesOfSizeFiveOrSix(IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "setupContributionAndDoubleBonds", "parameters": "(IAtomContainer molecule, EdgeToBondMap bonds, int[][] graph,\n            int[] contribution, int[] dbs)", "modifiers": "private static", "return": "void", "signature": "void setupContributionAndDoubleBonds(IAtomContainer molecule, EdgeToBondMap bonds, int[][] graph,\n            int[] contribution, int[] dbs)", "full_signature": "private static void setupContributionAndDoubleBonds(IAtomContainer molecule, EdgeToBondMap bonds, int[][] graph,\n            int[] contribution, int[] dbs)", "class_method_signature": "MmffAromaticTypeMapping.setupContributionAndDoubleBonds(IAtomContainer molecule, EdgeToBondMap bonds, int[][] graph,\n            int[] contribution, int[] dbs)", "testcase": false, "constructor": false}], "file": "tool/forcefield/src/main/java/org/openscience/cdk/forcefield/mmff/MmffAromaticTypeMapping.java"}, "focal_method": {"identifier": "updateAromaticTypesInSixMemberRing", "parameters": "(int[] cycle, String[] symbs)", "modifiers": "static", "return": "void", "body": "static void updateAromaticTypesInSixMemberRing(int[] cycle, String[] symbs) {\n        for (final int v : cycle) {\n            if (NCN_PLUS.equals(symbs[v]) || \"N+=C\".equals(symbs[v]) || \"N=+C\".equals(symbs[v]))\n                symbs[v] = \"NPD+\";\n            else if (\"N2OX\".equals(symbs[v]))\n                symbs[v] = \"NPOX\";\n            else if (\"N=C\".equals(symbs[v]) || \"N=N\".equals(symbs[v]))\n                symbs[v] = \"NPYD\";\n            else if (symbs[v].startsWith(\"C\")) symbs[v] = \"CB\";\n        }\n    }", "signature": "void updateAromaticTypesInSixMemberRing(int[] cycle, String[] symbs)", "full_signature": "static void updateAromaticTypesInSixMemberRing(int[] cycle, String[] symbs)", "class_method_signature": "MmffAromaticTypeMapping.updateAromaticTypesInSixMemberRing(int[] cycle, String[] symbs)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "equals", "equals", "equals", "startsWith"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}