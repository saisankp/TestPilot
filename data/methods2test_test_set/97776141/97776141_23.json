{"test_class": {"identifier": "SystemConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private CorsRegistry mockCorsRegistry;", "modifier": "@Mock\n    private", "type": "CorsRegistry", "declarator": "mockCorsRegistry", "var_name": "mockCorsRegistry"}, {"original_string": "@Mock\n    private CorsRegistration mockCorsRegistration;", "modifier": "@Mock\n    private", "type": "CorsRegistration", "declarator": "mockCorsRegistration", "var_name": "mockCorsRegistration"}, {"original_string": "private SystemConfig systemConfig;", "modifier": "private", "type": "SystemConfig", "declarator": "systemConfig", "var_name": "systemConfig"}], "file": "application/confagrid-webapp/src/test/java/com/aleggeup/confagrid/config/SystemConfigTest.java"}, "test_case": {"identifier": "testCorsRegistration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCorsRegistration() {\n        Mockito.when(mockCorsRegistration.allowedOrigins(SystemConfig.CORS_ALLOWED_ORIGINS))\n            .thenReturn(mockCorsRegistration);\n        Mockito.when(mockCorsRegistry.addMapping(SystemConfig.CORS_MAPPING)).thenReturn(mockCorsRegistration);\n        Mockito\n            .when(mockCorsRegistration\n                .allowedMethods(RequestMethod.GET.name(), RequestMethod.POST.name(), RequestMethod.PUT.name()))\n            .thenReturn(mockCorsRegistration);\n        Mockito.when(mockCorsRegistration.allowedHeaders(\"*\")).thenReturn(mockCorsRegistration);\n        Mockito.when(mockCorsRegistration.exposedHeaders(JwtFilter.HEADER_CLAIMS, JwtFilter.HEADER_CLAIMS_SUBJECT))\n            .thenReturn(mockCorsRegistration);\n\n        final WebMvcConfigurer configurer = systemConfig.corsConfigurer();\n        configurer.addCorsMappings(mockCorsRegistry);\n\n        Mockito.verify(mockCorsRegistry).addMapping(SystemConfig.CORS_MAPPING);\n        Mockito.verify(mockCorsRegistration).allowedOrigins(SystemConfig.CORS_ALLOWED_ORIGINS);\n        Mockito.verify(mockCorsRegistration)\n            .allowedMethods(RequestMethod.GET.name(), RequestMethod.POST.name(), RequestMethod.PUT.name());\n        Mockito.verify(mockCorsRegistration).allowedHeaders(\"*\");\n        Mockito.verify(mockCorsRegistration).exposedHeaders(JwtFilter.HEADER_CLAIMS, JwtFilter.HEADER_CLAIMS_SUBJECT);\n    }", "signature": "void testCorsRegistration()", "full_signature": "@Test public void testCorsRegistration()", "class_method_signature": "SystemConfigTest.testCorsRegistration()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "allowedOrigins", "thenReturn", "when", "addMapping", "thenReturn", "when", "allowedMethods", "name", "name", "name", "thenReturn", "when", "allowedHeaders", "thenReturn", "when", "exposedHeaders", "corsConfigurer", "addCorsMappings", "addMapping", "verify", "allowedOrigins", "verify", "allowedMethods", "verify", "name", "name", "name", "allowedHeaders", "verify", "exposedHeaders", "verify"]}, "focal_class": {"identifier": "SystemConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String CORS_MAPPING = \"/**\";", "modifier": "protected static final", "type": "String", "declarator": "CORS_MAPPING = \"/**\"", "var_name": "CORS_MAPPING"}, {"original_string": "protected static final String CORS_ALLOWED_ORIGINS = \"http://localhost:4200\";", "modifier": "protected static final", "type": "String", "declarator": "CORS_ALLOWED_ORIGINS = \"http://localhost:4200\"", "var_name": "CORS_ALLOWED_ORIGINS"}], "methods": [{"identifier": "corsConfigurer", "parameters": "()", "modifiers": "@Bean public", "return": "WebMvcConfigurer", "signature": "WebMvcConfigurer corsConfigurer()", "full_signature": "@Bean public WebMvcConfigurer corsConfigurer()", "class_method_signature": "SystemConfig.corsConfigurer()", "testcase": false, "constructor": false}], "file": "application/confagrid-webapp/src/main/java/com/aleggeup/confagrid/config/SystemConfig.java"}, "focal_method": {"identifier": "corsConfigurer", "parameters": "()", "modifiers": "@Bean public", "return": "WebMvcConfigurer", "body": "@Bean\n    public WebMvcConfigurer corsConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override\n            public void addCorsMappings(final CorsRegistry registry) {\n                registry.addMapping(CORS_MAPPING)\n                    .allowedOrigins(CORS_ALLOWED_ORIGINS)\n                    .allowedMethods(RequestMethod.GET.name(), RequestMethod.POST.name(), RequestMethod.PUT.name())\n                    .allowedHeaders(\"*\")\n                    .exposedHeaders(JwtFilter.HEADER_CLAIMS, JwtFilter.HEADER_CLAIMS_SUBJECT);\n            }\n        };\n    }", "signature": "WebMvcConfigurer corsConfigurer()", "full_signature": "@Bean public WebMvcConfigurer corsConfigurer()", "class_method_signature": "SystemConfig.corsConfigurer()", "testcase": false, "constructor": false, "invocations": ["exposedHeaders", "allowedHeaders", "allowedMethods", "allowedOrigins", "addMapping", "name", "name", "name"]}, "repository": {"repo_id": 97776141, "url": "https://github.com/ALeggeUp/confagrid", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 22043, "license": "licensed"}}