{"test_class": {"identifier": "FMFDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/FMFDescriptorTest.java"}, "test_case": {"identifier": "testPirenperone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPirenperone() throws CDKException {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"Fc1ccc(cc1)C(=O)C4CCN(CCC\\\\3=C(\\\\N=C2\\\\C=C/C=C\\\\N2C/3=O)C)CC4\");\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        Aromaticity.cdkLegacy().apply(mol);\n        DoubleResult result = (DoubleResult) descriptor.calculate(mol).getValue();\n        Assert.assertEquals(0.862, result.doubleValue(), 0.001);\n    }", "signature": "void testPirenperone()", "full_signature": "@Test public void testPirenperone()", "class_method_signature": "FMFDescriptorTest.testPirenperone()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "getValue", "calculate", "assertEquals", "doubleValue"]}, "focal_class": {"identifier": "FMFDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [], "methods": [{"identifier": "FMFDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " FMFDescriptor()", "full_signature": "public  FMFDescriptor()", "class_method_signature": "FMFDescriptor.FMFDescriptor()", "testcase": false, "constructor": true}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "FMFDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "FMFDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "FMFDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "FMFDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "FMFDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "FMFDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "FMFDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "FMFDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/FMFDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n\n        container = clone(container); // don't mod original\n\n        MurckoFragmenter fragmenter = new MurckoFragmenter(true, 3);\n        DoubleResult result;\n        try {\n            fragmenter.generateFragments(container);\n            IAtomContainer[] framework = fragmenter.getFrameworksAsContainers();\n            IAtomContainer[] ringSystems = fragmenter.getRingSystemsAsContainers();\n            if (framework.length == 1) {\n                result = new DoubleResult(framework[0].getAtomCount() / (double) container.getAtomCount());\n            } else if (framework.length == 0 && ringSystems.length == 1) {\n                result = new DoubleResult(ringSystems[0].getAtomCount() / (double) container.getAtomCount());\n            } else\n                result = new DoubleResult(0.0);\n        } catch (CDKException e) {\n            result = new DoubleResult(Double.NaN);\n        }\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), result,\n                getDescriptorNames());\n\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "FMFDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["clone", "generateFragments", "getFrameworksAsContainers", "getRingSystemsAsContainers", "getAtomCount", "getAtomCount", "getAtomCount", "getAtomCount", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}