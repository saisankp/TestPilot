{"test_class": {"identifier": "FilesystemTrackerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IPathFilter pathFilterMock;", "modifier": "private", "type": "IPathFilter", "declarator": "pathFilterMock", "var_name": "pathFilterMock"}, {"original_string": "private ListeningTaskFactory taskFactoryMock;", "modifier": "private", "type": "ListeningTaskFactory", "declarator": "taskFactoryMock", "var_name": "taskFactoryMock"}, {"original_string": "private Runnable runnableMock;", "modifier": "private", "type": "Runnable", "declarator": "runnableMock", "var_name": "runnableMock"}, {"original_string": "private IPath directoryMock;", "modifier": "private", "type": "IPath", "declarator": "directoryMock", "var_name": "directoryMock"}, {"original_string": "private Path directoryPathMock;", "modifier": "private", "type": "Path", "declarator": "directoryPathMock", "var_name": "directoryPathMock"}, {"original_string": "private FileSystem fileSystemMock;", "modifier": "private", "type": "FileSystem", "declarator": "fileSystemMock", "var_name": "fileSystemMock"}, {"original_string": "private FileSystemProvider fileSystemProviderMock;", "modifier": "private", "type": "FileSystemProvider", "declarator": "fileSystemProviderMock", "var_name": "fileSystemProviderMock"}, {"original_string": "private BasicFileAttributes directoryPathAttributesMock;", "modifier": "private", "type": "BasicFileAttributes", "declarator": "directoryPathAttributesMock", "var_name": "directoryPathAttributesMock"}], "file": "CoreFeatures/FeatureLoadingSystem/FilesystemTracker/src/test/java/info/smart_tools/smartactors/feature_loading_system/filesystem_tracker/FilesystemTrackerTest.java"}, "test_case": {"identifier": "Should_throw_When_startCalledTwice", "parameters": "()", "modifiers": "@Test(expected = FilesystemTrackerStartupException.class) public", "return": "void", "body": "@Test(expected = FilesystemTrackerStartupException.class)\n    public void Should_throw_When_startCalledTwice()\n            throws Exception {\n        FilesystemTracker tracker = new FilesystemTracker(pathFilterMock, taskFactoryMock, fileSystemMock);\n\n        try {\n            tracker.start(directoryMock);\n\n            verify(runnableMock, timeout(1000)).run();\n        } catch (FilesystemTrackerStartupException e) {\n            fail();\n        }\n\n        tracker.start(directoryMock);\n    }", "signature": "void Should_throw_When_startCalledTwice()", "full_signature": "@Test(expected = FilesystemTrackerStartupException.class) public void Should_throw_When_startCalledTwice()", "class_method_signature": "FilesystemTrackerTest.Should_throw_When_startCalledTwice()", "testcase": true, "constructor": false, "invocations": ["start", "run", "verify", "timeout", "fail", "start"]}, "focal_class": {"identifier": "FilesystemTracker", "superclass": "", "interfaces": "implements IFilesystemTracker", "fields": [{"original_string": "private Thread watchThread;", "modifier": "private", "type": "Thread", "declarator": "watchThread", "var_name": "watchThread"}, {"original_string": "private Set<IAction<IPath>> handlers = new CopyOnWriteArraySet<>();", "modifier": "private", "type": "Set<IAction<IPath>>", "declarator": "handlers = new CopyOnWriteArraySet<>()", "var_name": "handlers"}, {"original_string": "private Set<IAction<Throwable>> errorHandlers = new CopyOnWriteArraySet<>();", "modifier": "private", "type": "Set<IAction<Throwable>>", "declarator": "errorHandlers = new CopyOnWriteArraySet<>()", "var_name": "errorHandlers"}, {"original_string": "private final Set<IPath> knownFiles = new HashSet<>();", "modifier": "private final", "type": "Set<IPath>", "declarator": "knownFiles = new HashSet<>()", "var_name": "knownFiles"}, {"original_string": "private final Object knownFilesLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "knownFilesLock = new Object()", "var_name": "knownFilesLock"}, {"original_string": "private boolean started = false;", "modifier": "private", "type": "boolean", "declarator": "started = false", "var_name": "started"}, {"original_string": "private FileSystem fileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}, {"original_string": "private IPathFilter filter;", "modifier": "private", "type": "IPathFilter", "declarator": "filter", "var_name": "filter"}, {"original_string": "private ListeningTaskFactory taskFactory;", "modifier": "private", "type": "ListeningTaskFactory", "declarator": "taskFactory", "var_name": "taskFactory"}], "methods": [{"identifier": "FilesystemTracker", "parameters": "(final IPathFilter filter, final ListeningTaskFactory taskFactory)", "modifiers": "public", "return": "", "signature": " FilesystemTracker(final IPathFilter filter, final ListeningTaskFactory taskFactory)", "full_signature": "public  FilesystemTracker(final IPathFilter filter, final ListeningTaskFactory taskFactory)", "class_method_signature": "FilesystemTracker.FilesystemTracker(final IPathFilter filter, final ListeningTaskFactory taskFactory)", "testcase": false, "constructor": true}, {"identifier": "FilesystemTracker", "parameters": "(final IPathFilter filter, final ListeningTaskFactory taskFactory, final FileSystem fileSystem)", "modifiers": "", "return": "", "signature": " FilesystemTracker(final IPathFilter filter, final ListeningTaskFactory taskFactory, final FileSystem fileSystem)", "full_signature": "  FilesystemTracker(final IPathFilter filter, final ListeningTaskFactory taskFactory, final FileSystem fileSystem)", "class_method_signature": "FilesystemTracker.FilesystemTracker(final IPathFilter filter, final ListeningTaskFactory taskFactory, final FileSystem fileSystem)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "(final IPath directory)", "modifiers": "@Override public", "return": "void", "signature": "void start(final IPath directory)", "full_signature": "@Override public void start(final IPath directory)", "class_method_signature": "FilesystemTracker.start(final IPath directory)", "testcase": false, "constructor": false}, {"identifier": "addFileHandler", "parameters": "(final IAction<IPath> handler)", "modifiers": "@Override public", "return": "void", "signature": "void addFileHandler(final IAction<IPath> handler)", "full_signature": "@Override public void addFileHandler(final IAction<IPath> handler)", "class_method_signature": "FilesystemTracker.addFileHandler(final IAction<IPath> handler)", "testcase": false, "constructor": false}, {"identifier": "removeFileHandler", "parameters": "(final IAction<IPath> handler)", "modifiers": "@Override public", "return": "void", "signature": "void removeFileHandler(final IAction<IPath> handler)", "full_signature": "@Override public void removeFileHandler(final IAction<IPath> handler)", "class_method_signature": "FilesystemTracker.removeFileHandler(final IAction<IPath> handler)", "testcase": false, "constructor": false}, {"identifier": "addErrorHandler", "parameters": "(final IAction<Throwable> handler)", "modifiers": "@Override public", "return": "void", "signature": "void addErrorHandler(final IAction<Throwable> handler)", "full_signature": "@Override public void addErrorHandler(final IAction<Throwable> handler)", "class_method_signature": "FilesystemTracker.addErrorHandler(final IAction<Throwable> handler)", "testcase": false, "constructor": false}, {"identifier": "invokeAllHandlers", "parameters": "(final IPath file)", "modifiers": "private", "return": "void", "signature": "void invokeAllHandlers(final IPath file)", "full_signature": "private void invokeAllHandlers(final IPath file)", "class_method_signature": "FilesystemTracker.invokeAllHandlers(final IPath file)", "testcase": false, "constructor": false}, {"identifier": "invokeHandler", "parameters": "(final IAction<IPath> handler, final IPath file)", "modifiers": "private", "return": "void", "signature": "void invokeHandler(final IAction<IPath> handler, final IPath file)", "full_signature": "private void invokeHandler(final IAction<IPath> handler, final IPath file)", "class_method_signature": "FilesystemTracker.invokeHandler(final IAction<IPath> handler, final IPath file)", "testcase": false, "constructor": false}, {"identifier": "invokeErrorHandlers", "parameters": "(final Throwable error)", "modifiers": "private", "return": "void", "signature": "void invokeErrorHandlers(final Throwable error)", "full_signature": "private void invokeErrorHandlers(final Throwable error)", "class_method_signature": "FilesystemTracker.invokeErrorHandlers(final Throwable error)", "testcase": false, "constructor": false}], "file": "CoreFeatures/FeatureLoadingSystem/FilesystemTracker/src/main/java/info/smart_tools/smartactors/feature_loading_system/filesystem_tracker/FilesystemTracker.java"}, "focal_method": {"identifier": "start", "parameters": "(final IPath directory)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void start(final IPath directory)\n            throws FilesystemTrackerStartupException, InvalidArgumentException {\n        if (started) {\n            throw new FilesystemTrackerStartupException(\"Filesystem tracker is already started.\");\n        }\n\n        if (!Files.isDirectory(fileSystem.getPath(directory.getPath()))) {\n            throw new InvalidArgumentException(\"Given file is not a directory.\");\n        }\n\n        knownFiles.clear();\n\n        try {\n            Runnable listeningTask = taskFactory.createRunnable(directory, new FileCreationHandler());\n            watchThread = new Thread(listeningTask);\n\n            watchThread.setDaemon(true);\n            watchThread.start();\n\n            started = true;\n        } catch (IOException e) {\n            throw new FilesystemTrackerStartupException(\"Could not start filesystem tracker.\", e);\n        }\n    }", "signature": "void start(final IPath directory)", "full_signature": "@Override public void start(final IPath directory)", "class_method_signature": "FilesystemTracker.start(final IPath directory)", "testcase": false, "constructor": false, "invocations": ["isDirectory", "getPath", "getPath", "clear", "createRunnable", "setDaemon", "start"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}