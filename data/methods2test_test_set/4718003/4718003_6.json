{"test_class": {"identifier": "BaseFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "gsf-legacy/src/test/java/com/fatwire/gst/foundation/controller/action/support/BaseFactoryTest.java"}, "test_case": {"identifier": "testGetObject_bar_ctor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetObject_bar_ctor() {\n        MockICS ics = new MockICS();\n\n        BaseFactory bf = new FooFactory(ics, new FooBarFactory(ics));\n        Bar foo = bf.getObject(\"foo\", Bar.class);\n        Assert.assertNotNull(foo);\n    }", "signature": "void testGetObject_bar_ctor()", "full_signature": "@Test public void testGetObject_bar_ctor()", "class_method_signature": "BaseFactoryTest.testGetObject_bar_ctor()", "testcase": true, "constructor": false, "invocations": ["getObject", "assertNotNull"]}, "focal_class": {"identifier": "BaseFactory", "superclass": "", "interfaces": "implements Factory", "fields": [{"original_string": "protected static final Logger LOG = LoggerFactory.getLogger(\"tools.gsf.legacy.controller.action.support.BaseFactory\");", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(\"tools.gsf.legacy.controller.action.support.BaseFactory\")", "var_name": "LOG"}, {"original_string": "protected final ICS ics;", "modifier": "protected final", "type": "ICS", "declarator": "ics", "var_name": "ics"}, {"original_string": "private final Map<String, Object> objectCache = new HashMap<>();", "modifier": "private final", "type": "Map<String, Object>", "declarator": "objectCache = new HashMap<>()", "var_name": "objectCache"}, {"original_string": "private Factory[] roots = new Factory[0];", "modifier": "private", "type": "Factory[]", "declarator": "roots = new Factory[0]", "var_name": "roots"}], "methods": [{"identifier": "BaseFactory", "parameters": "(ICS ics)", "modifiers": "public", "return": "", "signature": " BaseFactory(ICS ics)", "full_signature": "public  BaseFactory(ICS ics)", "class_method_signature": "BaseFactory.BaseFactory(ICS ics)", "testcase": false, "constructor": true}, {"identifier": "BaseFactory", "parameters": "(ICS ics, Factory... roots)", "modifiers": "public", "return": "", "signature": " BaseFactory(ICS ics, Factory... roots)", "full_signature": "public  BaseFactory(ICS ics, Factory... roots)", "class_method_signature": "BaseFactory.BaseFactory(ICS ics, Factory... roots)", "testcase": false, "constructor": true}, {"identifier": "getObject", "parameters": "(final String name, final Class<T> fieldType)", "modifiers": "@Override public final", "return": "T", "signature": "T getObject(final String name, final Class<T> fieldType)", "full_signature": "@Override public final T getObject(final String name, final Class<T> fieldType)", "class_method_signature": "BaseFactory.getObject(final String name, final Class<T> fieldType)", "testcase": false, "constructor": false}, {"identifier": "locate", "parameters": "(final String askedName, final Class<T> c)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "T", "signature": "T locate(final String askedName, final Class<T> c)", "full_signature": "@SuppressWarnings(\"unchecked\") protected T locate(final String askedName, final Class<T> c)", "class_method_signature": "BaseFactory.locate(final String askedName, final Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "locateInCache", "parameters": "(Class<T> c, String name)", "modifiers": "private", "return": "Object", "signature": "Object locateInCache(Class<T> c, String name)", "full_signature": "private Object locateInCache(Class<T> c, String name)", "class_method_signature": "BaseFactory.locateInCache(Class<T> c, String name)", "testcase": false, "constructor": false}, {"identifier": "factoryClasses", "parameters": "(ICS ics)", "modifiers": "protected", "return": "Class<?>[]", "signature": "Class<?>[] factoryClasses(ICS ics)", "full_signature": "protected Class<?>[] factoryClasses(ICS ics)", "class_method_signature": "BaseFactory.factoryClasses(ICS ics)", "testcase": false, "constructor": false}, {"identifier": "namedAnnotationStrategy", "parameters": "(String name, Class<T> c)", "modifiers": "protected", "return": "T", "signature": "T namedAnnotationStrategy(String name, Class<T> c)", "full_signature": "protected T namedAnnotationStrategy(String name, Class<T> c)", "class_method_signature": "BaseFactory.namedAnnotationStrategy(String name, Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "unnamedAnnotationStrategy", "parameters": "(String name, Class<T> c)", "modifiers": "protected", "return": "T", "signature": "T unnamedAnnotationStrategy(String name, Class<T> c)", "full_signature": "protected T unnamedAnnotationStrategy(String name, Class<T> c)", "class_method_signature": "BaseFactory.unnamedAnnotationStrategy(String name, Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "reflectionStrategy", "parameters": "(String name, Class<T> c)", "modifiers": "protected", "return": "T", "signature": "T reflectionStrategy(String name, Class<T> c)", "full_signature": "protected T reflectionStrategy(String name, Class<T> c)", "class_method_signature": "BaseFactory.reflectionStrategy(String name, Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "createFromMethod", "parameters": "(String name, Class<T> c, Method m)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "T", "signature": "T createFromMethod(String name, Class<T> c, Method m)", "full_signature": "@SuppressWarnings(\"unchecked\") protected T createFromMethod(String name, Class<T> c, Method m)", "class_method_signature": "BaseFactory.createFromMethod(String name, Class<T> c, Method m)", "testcase": false, "constructor": false}, {"identifier": "invokeCreateMethod", "parameters": "(Method m, Object from, String name, Object... arguments)", "modifiers": "protected", "return": "Object", "signature": "Object invokeCreateMethod(Method m, Object from, String name, Object... arguments)", "full_signature": "protected Object invokeCreateMethod(Method m, Object from, String name, Object... arguments)", "class_method_signature": "BaseFactory.invokeCreateMethod(Method m, Object from, String name, Object... arguments)", "testcase": false, "constructor": false}, {"identifier": "shouldCache", "parameters": "(Method m)", "modifiers": "protected", "return": "boolean", "signature": "boolean shouldCache(Method m)", "full_signature": "protected boolean shouldCache(Method m)", "class_method_signature": "BaseFactory.shouldCache(Method m)", "testcase": false, "constructor": false}, {"identifier": "throwRuntimeException", "parameters": "(InvocationTargetException e)", "modifiers": "protected", "return": "void", "signature": "void throwRuntimeException(InvocationTargetException e)", "full_signature": "protected void throwRuntimeException(InvocationTargetException e)", "class_method_signature": "BaseFactory.throwRuntimeException(InvocationTargetException e)", "testcase": false, "constructor": false}, {"identifier": "ctorStrategy", "parameters": "(final String name, final Class<T> c)", "modifiers": "protected", "return": "T", "signature": "T ctorStrategy(final String name, final Class<T> c)", "full_signature": "protected T ctorStrategy(final String name, final Class<T> c)", "class_method_signature": "BaseFactory.ctorStrategy(final String name, final Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "createICS", "parameters": "(final ICS ics)", "modifiers": "@ServiceProducer(cache = false) public", "return": "ICS", "signature": "ICS createICS(final ICS ics)", "full_signature": "@ServiceProducer(cache = false) public ICS createICS(final ICS ics)", "class_method_signature": "BaseFactory.createICS(final ICS ics)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BaseFactory.toString()", "testcase": false, "constructor": false}], "file": "gsf-legacy/src/main/java/com/fatwire/gst/foundation/controller/action/support/BaseFactory.java"}, "focal_method": {"identifier": "getObject", "parameters": "(final String name, final Class<T> fieldType)", "modifiers": "@Override public final", "return": "T", "body": "@Override\n    public final <T> T getObject(final String name, final Class<T> fieldType) {\n\n        T o;\n        try {\n            o = locate(name, fieldType);\n            if (o == null) {\n                for (Factory root : roots) {\n                    o = root.getObject(name, fieldType);\n                    if (o != null)\n                        return o;\n                }\n                // only try ctor at the root level, otherwise it will be invoked on each BaseFactory\n                if (roots.length == 0)\n                    o = ctorStrategy(name, fieldType);\n            }\n        } catch (InvocationTargetException e) {\n            throw new RuntimeException(e.getTargetException());\n        }\n        return o;\n    }", "signature": "T getObject(final String name, final Class<T> fieldType)", "full_signature": "@Override public final T getObject(final String name, final Class<T> fieldType)", "class_method_signature": "BaseFactory.getObject(final String name, final Class<T> fieldType)", "testcase": false, "constructor": false, "invocations": ["locate", "getObject", "ctorStrategy", "getTargetException"]}, "repository": {"repo_id": 4718003, "url": "https://github.com/dolfdijkstra/gst-foundation", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 13, "size": 149761, "license": "licensed"}}