{"test_class": {"identifier": "StructGenMatcherTest", "superclass": "extends AbstractAtomTypeTest", "interfaces": "", "fields": [{"original_string": "private final static String          ATOMTYPE_LIST = \"structgen_atomtypes.owl\";", "modifier": "private final static", "type": "String", "declarator": "ATOMTYPE_LIST = \"structgen_atomtypes.owl\"", "var_name": "ATOMTYPE_LIST"}, {"original_string": "private final static AtomTypeFactory factory       = AtomTypeFactory.getInstance(\"org/openscience/cdk/config/data/\"\n                                                               + ATOMTYPE_LIST, SilentChemObjectBuilder.getInstance());", "modifier": "private final static", "type": "AtomTypeFactory", "declarator": "factory       = AtomTypeFactory.getInstance(\"org/openscience/cdk/config/data/\"\n                                                               + ATOMTYPE_LIST, SilentChemObjectBuilder.getInstance())", "var_name": "factory"}, {"original_string": "private static Map<String, Integer> testedAtomTypes = new HashMap<String, Integer>();", "modifier": "private static", "type": "Map<String, Integer>", "declarator": "testedAtomTypes = new HashMap<String, Integer>()", "var_name": "testedAtomTypes"}], "file": "tool/structgen/src/test/java/org/openscience/cdk/atomtype/StructGenMatcherTest.java"}, "test_case": {"identifier": "testLithium", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLithium() throws Exception {\n        IAtomContainer mol = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class);\n        IAtom atom1 = DefaultChemObjectBuilder.getInstance().newInstance(IAtom.class, \"Li\");\n        IAtom atom2 = DefaultChemObjectBuilder.getInstance().newInstance(IAtom.class, \"F\");\n        IBond bond = DefaultChemObjectBuilder.getInstance().newInstance(IBond.class, atom1, atom2);\n        mol.addAtom(atom1);\n        mol.addAtom(atom2);\n        mol.addBond(bond);\n\n        StructGenMatcher matcher = new StructGenMatcher();\n        IAtomType matched = matcher.findMatchingAtomType(mol, mol.getAtom(0));\n        assertAtomType(testedAtomTypes, \"Li1\", matched);\n\n        matched = matcher.findMatchingAtomType(mol, mol.getAtom(1));\n        assertAtomType(testedAtomTypes, \"F1\", matched);\n    }", "signature": "void testLithium()", "full_signature": "@Test public void testLithium()", "class_method_signature": "StructGenMatcherTest.testLithium()", "testcase": true, "constructor": false, "invocations": ["newInstance", "getInstance", "newInstance", "getInstance", "newInstance", "getInstance", "newInstance", "getInstance", "addAtom", "addAtom", "addBond", "findMatchingAtomType", "getAtom", "assertAtomType", "findMatchingAtomType", "getAtom", "assertAtomType"]}, "focal_class": {"identifier": "StructGenMatcher", "superclass": "", "interfaces": "implements IAtomTypeMatcher", "fields": [{"original_string": "private static AtomTypeFactory factory = null;", "modifier": "private static", "type": "AtomTypeFactory", "declarator": "factory = null", "var_name": "factory"}, {"original_string": "private static ILoggingTool    logger  = LoggingToolFactory.createLoggingTool(StructGenMatcher.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger  = LoggingToolFactory.createLoggingTool(StructGenMatcher.class)", "var_name": "logger"}], "methods": [{"identifier": "StructGenMatcher", "parameters": "()", "modifiers": "public", "return": "", "signature": " StructGenMatcher()", "full_signature": "public  StructGenMatcher()", "class_method_signature": "StructGenMatcher.StructGenMatcher()", "testcase": false, "constructor": true}, {"identifier": "findMatchingAtomTypes", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "IAtomType[]", "signature": "IAtomType[] findMatchingAtomTypes(IAtomContainer atomContainer)", "full_signature": "@Override public IAtomType[] findMatchingAtomTypes(IAtomContainer atomContainer)", "class_method_signature": "StructGenMatcher.findMatchingAtomTypes(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "findMatchingAtomType", "parameters": "(IAtomContainer atomContainer, IAtom atom)", "modifiers": "@Override public", "return": "IAtomType", "signature": "IAtomType findMatchingAtomType(IAtomContainer atomContainer, IAtom atom)", "full_signature": "@Override public IAtomType findMatchingAtomType(IAtomContainer atomContainer, IAtom atom)", "class_method_signature": "StructGenMatcher.findMatchingAtomType(IAtomContainer atomContainer, IAtom atom)", "testcase": false, "constructor": false}], "file": "tool/structgen/src/main/java/org/openscience/cdk/atomtype/StructGenMatcher.java"}, "focal_method": {"identifier": "findMatchingAtomType", "parameters": "(IAtomContainer atomContainer, IAtom atom)", "modifiers": "@Override public", "return": "IAtomType", "body": "@Override\n    public IAtomType findMatchingAtomType(IAtomContainer atomContainer, IAtom atom) throws CDKException {\n        if (factory == null) {\n            try {\n                factory = AtomTypeFactory.getInstance(\"org/openscience/cdk/config/data/structgen_atomtypes.xml\",\n                        atom.getBuilder());\n            } catch (Exception ex1) {\n                logger.error(ex1.getMessage());\n                logger.debug(ex1);\n                throw new CDKException(\"Could not instantiate the AtomType list!\", ex1);\n            }\n        }\n\n        double bondOrderSum = atomContainer.getBondOrderSum(atom);\n        IBond.Order maxBondOrder = atomContainer.getMaximumBondOrder(atom);\n        int charge = atom.getFormalCharge();\n        int hcount = atom.getImplicitHydrogenCount() == null ? 0 : atom.getImplicitHydrogenCount();\n\n        IAtomType[] types = factory.getAtomTypes(atom.getSymbol());\n        for (IAtomType type : types) {\n            logger.debug(\"   ... matching atom \", atom, \" vs \", type);\n            if (bondOrderSum - charge + hcount == type.getBondOrderSum()\n                    && !BondManipulator.isHigherOrder(maxBondOrder, type.getMaxBondOrder())) {\n                return type;\n            }\n        }\n        logger.debug(\"    No Match\");\n\n        return null;\n    }", "signature": "IAtomType findMatchingAtomType(IAtomContainer atomContainer, IAtom atom)", "full_signature": "@Override public IAtomType findMatchingAtomType(IAtomContainer atomContainer, IAtom atom)", "class_method_signature": "StructGenMatcher.findMatchingAtomType(IAtomContainer atomContainer, IAtom atom)", "testcase": false, "constructor": false, "invocations": ["getInstance", "getBuilder", "error", "getMessage", "debug", "getBondOrderSum", "getMaximumBondOrder", "getFormalCharge", "getImplicitHydrogenCount", "getImplicitHydrogenCount", "getAtomTypes", "getSymbol", "debug", "getBondOrderSum", "isHigherOrder", "getMaxBondOrder", "debug"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}