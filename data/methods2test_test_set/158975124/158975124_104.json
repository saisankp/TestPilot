{"test_class": {"identifier": "TypeInferenceUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/apache/iotdb/db/utils/TypeInferenceUtilsTest.java"}, "test_case": {"identifier": "isNumberTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void isNumberTest() {\n    String[] values = {\"123\", \"123.123\", \"-123.123\", \"+123.123\", \".123\", String.valueOf(Integer.MAX_VALUE),\n        String.valueOf(Integer.MIN_VALUE), String.valueOf(Double.MAX_VALUE), String.valueOf(Double.MIN_VALUE),\n        \"abc\", \"123.\", \"123a\", TsFileConstant.PATH_SEPARATOR, \"123.1.23\"};\n    boolean[] results = {true, true, true, true, true, true,\n        true, true, true,\n        false, true, false, false, false};\n\n    for (int i = 0; i < values.length; i++) {\n      assertEquals(TypeInferenceUtils.isNumber(values[i]), results[i]);\n    }\n  }", "signature": "void isNumberTest()", "full_signature": "@Test public void isNumberTest()", "class_method_signature": "TypeInferenceUtilsTest.isNumberTest()", "testcase": true, "constructor": false, "invocations": ["valueOf", "valueOf", "valueOf", "valueOf", "assertEquals", "isNumber"]}, "focal_class": {"identifier": "TypeInferenceUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TSDataType booleanStringInferType = IoTDBDescriptor.getInstance().getConfig().getBooleanStringInferType();", "modifier": "private static", "type": "TSDataType", "declarator": "booleanStringInferType = IoTDBDescriptor.getInstance().getConfig().getBooleanStringInferType()", "var_name": "booleanStringInferType"}, {"original_string": "private static TSDataType integerStringInferType = IoTDBDescriptor.getInstance().getConfig().getIntegerStringInferType();", "modifier": "private static", "type": "TSDataType", "declarator": "integerStringInferType = IoTDBDescriptor.getInstance().getConfig().getIntegerStringInferType()", "var_name": "integerStringInferType"}, {"original_string": "private static TSDataType floatingStringInferType = IoTDBDescriptor.getInstance().getConfig().getFloatingStringInferType();", "modifier": "private static", "type": "TSDataType", "declarator": "floatingStringInferType = IoTDBDescriptor.getInstance().getConfig().getFloatingStringInferType()", "var_name": "floatingStringInferType"}, {"original_string": "private static TSDataType nanStringInferType = IoTDBDescriptor.getInstance().getConfig().getNanStringInferType();", "modifier": "private static", "type": "TSDataType", "declarator": "nanStringInferType = IoTDBDescriptor.getInstance().getConfig().getNanStringInferType()", "var_name": "nanStringInferType"}], "methods": [{"identifier": "TypeInferenceUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " TypeInferenceUtils()", "full_signature": "private  TypeInferenceUtils()", "class_method_signature": "TypeInferenceUtils.TypeInferenceUtils()", "testcase": false, "constructor": true}, {"identifier": "isNumber", "parameters": "(String s)", "modifiers": "static", "return": "boolean", "signature": "boolean isNumber(String s)", "full_signature": "static boolean isNumber(String s)", "class_method_signature": "TypeInferenceUtils.isNumber(String s)", "testcase": false, "constructor": false}, {"identifier": "isBoolean", "parameters": "(String s)", "modifiers": "private static", "return": "boolean", "signature": "boolean isBoolean(String s)", "full_signature": "private static boolean isBoolean(String s)", "class_method_signature": "TypeInferenceUtils.isBoolean(String s)", "testcase": false, "constructor": false}, {"identifier": "getPredictedDataType", "parameters": "(Object value, boolean inferType)", "modifiers": "public static", "return": "TSDataType", "signature": "TSDataType getPredictedDataType(Object value, boolean inferType)", "full_signature": "public static TSDataType getPredictedDataType(Object value, boolean inferType)", "class_method_signature": "TypeInferenceUtils.getPredictedDataType(Object value, boolean inferType)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/utils/TypeInferenceUtils.java"}, "focal_method": {"identifier": "isNumber", "parameters": "(String s)", "modifiers": "static", "return": "boolean", "body": "static boolean isNumber(String s) {\n    try {\n      Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n      return false;\n    }\n    return true;\n  }", "signature": "boolean isNumber(String s)", "full_signature": "static boolean isNumber(String s)", "class_method_signature": "TypeInferenceUtils.isNumber(String s)", "testcase": false, "constructor": false, "invocations": ["parseDouble"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}