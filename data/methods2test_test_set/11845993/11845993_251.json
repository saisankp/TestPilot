{"test_class": {"identifier": "CorePluginTest", "superclass": "", "interfaces": "", "fields": [], "file": "stagemonitor-core/src/test/java/org/stagemonitor/core/CorePluginTest.java"}, "test_case": {"identifier": "testNoElasticsearchUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNoElasticsearchUrl() throws Exception {\n\t\tCorePlugin corePlugin = ConfigurationRegistry.builder()\n\t\t\t\t.addOptionProvider(new CorePlugin())\n\t\t\t\t.addConfigSource(new SimpleSource(\"test\"))\n\t\t\t\t.build()\n\t\t\t\t.getConfig(CorePlugin.class);\n\n\t\tassertNull(corePlugin.getElasticsearchUrl());\n\t}", "signature": "void testNoElasticsearchUrl()", "full_signature": "@Test public void testNoElasticsearchUrl()", "class_method_signature": "CorePluginTest.testNoElasticsearchUrl()", "testcase": true, "constructor": false, "invocations": ["getConfig", "build", "addConfigSource", "addOptionProvider", "builder", "assertNull", "getElasticsearchUrl"]}, "focal_class": {"identifier": "CorePlugin", "superclass": "extends StagemonitorPlugin", "interfaces": "", "fields": [{"original_string": "private static final String CORE_PLUGIN_NAME = \"Core\";", "modifier": "private static final", "type": "String", "declarator": "CORE_PLUGIN_NAME = \"Core\"", "var_name": "CORE_PLUGIN_NAME"}, {"original_string": "public static final String POOLS_QUEUE_CAPACITY_LIMIT_KEY = \"stagemonitor.threadPools.queueCapacityLimit\";", "modifier": "public static final", "type": "String", "declarator": "POOLS_QUEUE_CAPACITY_LIMIT_KEY = \"stagemonitor.threadPools.queueCapacityLimit\"", "var_name": "POOLS_QUEUE_CAPACITY_LIMIT_KEY"}, {"original_string": "private static final String ELASTICSEARCH = \"elasticsearch\";", "modifier": "private static final", "type": "String", "declarator": "ELASTICSEARCH = \"elasticsearch\"", "var_name": "ELASTICSEARCH"}, {"original_string": "private static final String METRICS_STORE = \"metrics-store\";", "modifier": "private static final", "type": "String", "declarator": "METRICS_STORE = \"metrics-store\"", "var_name": "METRICS_STORE"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(CorePlugin.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CorePlugin.class)", "var_name": "logger"}, {"original_string": "private final ConfigurationOption<Boolean> stagemonitorActive = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.active\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Activate stagemonitor\")\n\t\t\t.description(\"If set to `false` stagemonitor will be completely deactivated.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(true);", "modifier": "private final", "type": "ConfigurationOption<Boolean>", "declarator": "stagemonitorActive = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.active\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Activate stagemonitor\")\n\t\t\t.description(\"If set to `false` stagemonitor will be completely deactivated.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(true)", "var_name": "stagemonitorActive"}, {"original_string": "private final ConfigurationOption<Boolean> internalMonitoring = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.internal.monitoring\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Internal monitoring\")\n\t\t\t.description(\"If active, stagemonitor will collect internal performance data\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(false);", "modifier": "private final", "type": "ConfigurationOption<Boolean>", "declarator": "internalMonitoring = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.internal.monitoring\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Internal monitoring\")\n\t\t\t.description(\"If active, stagemonitor will collect internal performance data\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(false)", "var_name": "internalMonitoring"}, {"original_string": "private final ConfigurationOption<Integer> reportingIntervalConsole = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.interval.console\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Reporting interval console\")\n\t\t\t.description(\"The amount of time between console reports (in seconds). \" +\n\t\t\t\t\t\"To deactivate console reports, set this to a value below 1.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(0);", "modifier": "private final", "type": "ConfigurationOption<Integer>", "declarator": "reportingIntervalConsole = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.interval.console\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Reporting interval console\")\n\t\t\t.description(\"The amount of time between console reports (in seconds). \" +\n\t\t\t\t\t\"To deactivate console reports, set this to a value below 1.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(0)", "var_name": "reportingIntervalConsole"}, {"original_string": "private final ConfigurationOption<Boolean> reportingJmx = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.reporting.jmx\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Expose MBeans\")\n\t\t\t.description(\"Whether or not to expose all metrics as MBeans.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(false);", "modifier": "private final", "type": "ConfigurationOption<Boolean>", "declarator": "reportingJmx = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.reporting.jmx\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Expose MBeans\")\n\t\t\t.description(\"Whether or not to expose all metrics as MBeans.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(false)", "var_name": "reportingJmx"}, {"original_string": "private final ConfigurationOption<Integer> reportingIntervalGraphite = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.interval.graphite\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Reporting interval graphite\")\n\t\t\t.description(\"The amount of time between the metrics are reported to graphite (in seconds).\\n\" +\n\t\t\t\t\t\"To deactivate graphite reporting, set this to a value below 1, or don't provide \" +\n\t\t\t\t\t\"stagemonitor.reporting.graphite.hostName.\")\n\t\t\t.tags(METRICS_STORE, \"graphite\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(60);", "modifier": "private final", "type": "ConfigurationOption<Integer>", "declarator": "reportingIntervalGraphite = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.interval.graphite\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Reporting interval graphite\")\n\t\t\t.description(\"The amount of time between the metrics are reported to graphite (in seconds).\\n\" +\n\t\t\t\t\t\"To deactivate graphite reporting, set this to a value below 1, or don't provide \" +\n\t\t\t\t\t\"stagemonitor.reporting.graphite.hostName.\")\n\t\t\t.tags(METRICS_STORE, \"graphite\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(60)", "var_name": "reportingIntervalGraphite"}, {"original_string": "private final ConfigurationOption<String> graphiteHostName = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.reporting.graphite.hostName\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Graphite host name\")\n\t\t\t.description(\"The name of the host where graphite is running. This setting is mandatory, if you want \" +\n\t\t\t\t\t\"to use the grafana dashboards.\")\n\t\t\t.tags(METRICS_STORE, \"graphite\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.build();", "modifier": "private final", "type": "ConfigurationOption<String>", "declarator": "graphiteHostName = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.reporting.graphite.hostName\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Graphite host name\")\n\t\t\t.description(\"The name of the host where graphite is running. This setting is mandatory, if you want \" +\n\t\t\t\t\t\"to use the grafana dashboards.\")\n\t\t\t.tags(METRICS_STORE, \"graphite\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.build()", "var_name": "graphiteHostName"}, {"original_string": "private final ConfigurationOption<Integer> graphitePort = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.graphite.port\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Carbon port\")\n\t\t\t.description(\"The port where carbon is listening.\")\n\t\t\t.tags(METRICS_STORE, \"graphite\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(2003);", "modifier": "private final", "type": "ConfigurationOption<Integer>", "declarator": "graphitePort = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.graphite.port\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Carbon port\")\n\t\t\t.description(\"The port where carbon is listening.\")\n\t\t\t.tags(METRICS_STORE, \"graphite\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(2003)", "var_name": "graphitePort"}, {"original_string": "private final ConfigurationOption<URL> influxDbUrl = ConfigurationOption.urlOption()\n\t\t\t.key(\"stagemonitor.reporting.influxdb.url\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"InfluxDB URL\")\n\t\t\t.description(\"The URL of your InfluxDB installation.\")\n\t\t\t.tags(METRICS_STORE, \"influx-db\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.build();", "modifier": "private final", "type": "ConfigurationOption<URL>", "declarator": "influxDbUrl = ConfigurationOption.urlOption()\n\t\t\t.key(\"stagemonitor.reporting.influxdb.url\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"InfluxDB URL\")\n\t\t\t.description(\"The URL of your InfluxDB installation.\")\n\t\t\t.tags(METRICS_STORE, \"influx-db\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.build()", "var_name": "influxDbUrl"}, {"original_string": "private final ConfigurationOption<String> influxDbDb = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.reporting.influxdb.db\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"InfluxDB database\")\n\t\t\t.description(\"The target database\")\n\t\t\t.tags(METRICS_STORE, \"influx-db\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(\"stagemonitor\");", "modifier": "private final", "type": "ConfigurationOption<String>", "declarator": "influxDbDb = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.reporting.influxdb.db\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"InfluxDB database\")\n\t\t\t.description(\"The target database\")\n\t\t\t.tags(METRICS_STORE, \"influx-db\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(\"stagemonitor\")", "var_name": "influxDbDb"}, {"original_string": "private final ConfigurationOption<Integer> reportingIntervalInfluxDb = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.interval.influxdb\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Reporting interval InfluxDb\")\n\t\t\t.description(\"The amount of time between the metrics are reported to InfluxDB (in seconds).\")\n\t\t\t.tags(METRICS_STORE, \"influx-db\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(60);", "modifier": "private final", "type": "ConfigurationOption<Integer>", "declarator": "reportingIntervalInfluxDb = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.interval.influxdb\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Reporting interval InfluxDb\")\n\t\t\t.description(\"The amount of time between the metrics are reported to InfluxDB (in seconds).\")\n\t\t\t.tags(METRICS_STORE, \"influx-db\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(60)", "var_name": "reportingIntervalInfluxDb"}, {"original_string": "private final ConfigurationOption<Integer> reportingIntervalElasticsearch = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.interval.elasticsearch\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Reporting interval Elasticsearch\")\n\t\t\t.description(\"The amount of time between the metrics are reported to Elasticsearch (in seconds).\")\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(60);", "modifier": "private final", "type": "ConfigurationOption<Integer>", "declarator": "reportingIntervalElasticsearch = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.interval.elasticsearch\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Reporting interval Elasticsearch\")\n\t\t\t.description(\"The amount of time between the metrics are reported to Elasticsearch (in seconds).\")\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(60)", "var_name": "reportingIntervalElasticsearch"}, {"original_string": "private final ConfigurationOption<Boolean> onlyLogElasticsearchMetricReports = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.onlyLogElasticsearchMetricReports\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Only log Elasticsearch metric reports\")\n\t\t\t.description(String.format(\"If set to true, the metrics won't be reported to elasticsearch but instead logged in bulk format. \" +\n\t\t\t\t\t\"The name of the logger is %s. That way you can redirect the reporting to a separate log file and use logstash or a \" +\n\t\t\t\t\t\"different external process to send the metrics to elasticsearch.\", ElasticsearchReporter.ES_METRICS_LOGGER))\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(false);", "modifier": "private final", "type": "ConfigurationOption<Boolean>", "declarator": "onlyLogElasticsearchMetricReports = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.onlyLogElasticsearchMetricReports\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Only log Elasticsearch metric reports\")\n\t\t\t.description(String.format(\"If set to true, the metrics won't be reported to elasticsearch but instead logged in bulk format. \" +\n\t\t\t\t\t\"The name of the logger is %s. That way you can redirect the reporting to a separate log file and use logstash or a \" +\n\t\t\t\t\t\"different external process to send the metrics to elasticsearch.\", ElasticsearchReporter.ES_METRICS_LOGGER))\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(false)", "var_name": "onlyLogElasticsearchMetricReports"}, {"original_string": "private final ConfigurationOption<Integer> deleteElasticsearchMetricsAfterDays = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.deleteMetricsAfterDays\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Delete ES metrics after (days)\")\n\t\t\t.description(\"The number of days after the metrics stored in elasticsearch should be deleted. Set below 1 to deactivate.\")\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(-1);", "modifier": "private final", "type": "ConfigurationOption<Integer>", "declarator": "deleteElasticsearchMetricsAfterDays = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.deleteMetricsAfterDays\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Delete ES metrics after (days)\")\n\t\t\t.description(\"The number of days after the metrics stored in elasticsearch should be deleted. Set below 1 to deactivate.\")\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(-1)", "var_name": "deleteElasticsearchMetricsAfterDays"}, {"original_string": "private final ConfigurationOption<Integer> moveToColdNodesAfterDays = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.hotColdArchitecture.moveToColdNodesAfterDays\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.hotColdArchitecture.moveToColdNodesAfterDays\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Activate Hot-Cold Architecture\")\n\t\t\t.description(\"Setting this to a value > 1 activates the hot-cold architecture described in https://www.elastic.co/blog/hot-warm-architecture \" +\n\t\t\t\t\t\"where new data that is more frequently queried and updated is stored on beefy nodes (SSDs, more RAM and CPU). \" +\n\t\t\t\t\t\"When the indexes reach a certain age, they are allocated on cold nodes. For this to work, you have to tag your \" +\n\t\t\t\t\t\"beefy nodes with node.box_type: hot (either in elasticsearch.yml or start the node using ./bin/elasticsearch --node.box_type hot)\" +\n\t\t\t\t\t\"and your historical nodes with node.box_type: cold.\")\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(-1);", "modifier": "private final", "type": "ConfigurationOption<Integer>", "declarator": "moveToColdNodesAfterDays = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.hotColdArchitecture.moveToColdNodesAfterDays\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.hotColdArchitecture.moveToColdNodesAfterDays\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Activate Hot-Cold Architecture\")\n\t\t\t.description(\"Setting this to a value > 1 activates the hot-cold architecture described in https://www.elastic.co/blog/hot-warm-architecture \" +\n\t\t\t\t\t\"where new data that is more frequently queried and updated is stored on beefy nodes (SSDs, more RAM and CPU). \" +\n\t\t\t\t\t\"When the indexes reach a certain age, they are allocated on cold nodes. For this to work, you have to tag your \" +\n\t\t\t\t\t\"beefy nodes with node.box_type: hot (either in elasticsearch.yml or start the node using ./bin/elasticsearch --node.box_type hot)\" +\n\t\t\t\t\t\"and your historical nodes with node.box_type: cold.\")\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(-1)", "var_name": "moveToColdNodesAfterDays"}, {"original_string": "private final ConfigurationOption<Integer> numberOfReplicas = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.numberOfReplicas\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.numberOfReplicas\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Number of ES Replicas\")\n\t\t\t.description(\"Sets the number of replicas of the Elasticsearch index templates.\")\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(0);", "modifier": "private final", "type": "ConfigurationOption<Integer>", "declarator": "numberOfReplicas = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.numberOfReplicas\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.numberOfReplicas\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Number of ES Replicas\")\n\t\t\t.description(\"Sets the number of replicas of the Elasticsearch index templates.\")\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(0)", "var_name": "numberOfReplicas"}, {"original_string": "private final ConfigurationOption<Integer> numberOfShards = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.numberOfShards\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.numberOfShards\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Number of ES Shards\")\n\t\t\t.description(\"Sets the number of shards of the Elasticsearch index templates.\")\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(1);", "modifier": "private final", "type": "ConfigurationOption<Integer>", "declarator": "numberOfShards = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.numberOfShards\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.numberOfShards\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Number of ES Shards\")\n\t\t\t.description(\"Sets the number of shards of the Elasticsearch index templates.\")\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(1)", "var_name": "numberOfShards"}, {"original_string": "private final ConfigurationOption<String> applicationName = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.applicationName\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Application name\")\n\t\t\t.description(\"The name of the application.\\n\" +\n\t\t\t\t\t\"It is highly recommended to set this to a short and descriptive name of you application. \" +\n\t\t\t\t\t\"The dashboards provide a filter for the application name.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(\"important\")\n\t\t\t.buildWithDefault(\"My Application\");", "modifier": "private final", "type": "ConfigurationOption<String>", "declarator": "applicationName = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.applicationName\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Application name\")\n\t\t\t.description(\"The name of the application.\\n\" +\n\t\t\t\t\t\"It is highly recommended to set this to a short and descriptive name of you application. \" +\n\t\t\t\t\t\"The dashboards provide a filter for the application name.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(\"important\")\n\t\t\t.buildWithDefault(\"My Application\")", "var_name": "applicationName"}, {"original_string": "private final ConfigurationOption<String> instanceName = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.instanceName\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Instance name\")\n\t\t\t.description(\"The instance name.\\n\" +\n\t\t\t\t\t\"The instance or stage of your application. For example prod, test, test1, dev. \" +\n\t\t\t\t\t\"It's important to set this to a useful value because the dashboards provide filters for the instance.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(\"important\")\n\t\t\t.buildWithDefault(\"My Instance\");", "modifier": "private final", "type": "ConfigurationOption<String>", "declarator": "instanceName = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.instanceName\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Instance name\")\n\t\t\t.description(\"The instance name.\\n\" +\n\t\t\t\t\t\"The instance or stage of your application. For example prod, test, test1, dev. \" +\n\t\t\t\t\t\"It's important to set this to a useful value because the dashboards provide filters for the instance.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(\"important\")\n\t\t\t.buildWithDefault(\"My Instance\")", "var_name": "instanceName"}, {"original_string": "private final ConfigurationOption<String> hostName = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.hostName\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Host name\")\n\t\t\t.description(\"The host name.\\n\" +\n\t\t\t\t\t\"If this property is not set, the host name will default to resolving the host name for localhost, \" +\n\t\t\t\t\t\"if this fails it will be loaded from the environment, either from COMPUTERNAME, HOSTNAME or HOST. \" +\n\t\t\t\t\t\"The dashboards provide a filter for the host name.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(getNameOfLocalHost());", "modifier": "private final", "type": "ConfigurationOption<String>", "declarator": "hostName = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.hostName\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Host name\")\n\t\t\t.description(\"The host name.\\n\" +\n\t\t\t\t\t\"If this property is not set, the host name will default to resolving the host name for localhost, \" +\n\t\t\t\t\t\"if this fails it will be loaded from the environment, either from COMPUTERNAME, HOSTNAME or HOST. \" +\n\t\t\t\t\t\"The dashboards provide a filter for the host name.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(getNameOfLocalHost())", "var_name": "hostName"}, {"original_string": "private final ConfigurationOption<List<URL>> elasticsearchUrls = ConfigurationOption.urlsOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.url\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.url\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Elasticsearch URL\")\n\t\t\t.description(\"A comma separated list of the Elasticsearch URLs that store spans and metrics. \" +\n\t\t\t\t\t\"If your ES cluster is secured with basic authentication, you can use urls like https://user:password@example.com. \" +\n\t\t\t\t\t\"The authentication information must be in application/x-www-form-urlencoded format. \" +\n\t\t\t\t\t\"You can also specify default credentials (in plain text) with stagemonitor.reporting.elasticsearch.username and stagemonitor.reporting.elasticsearch.password.\"\n\t\t\t)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(ELASTICSEARCH)\n\t\t\t.buildWithDefault(Collections.<URL>emptyList());", "modifier": "private final", "type": "ConfigurationOption<List<URL>>", "declarator": "elasticsearchUrls = ConfigurationOption.urlsOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.url\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.url\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Elasticsearch URL\")\n\t\t\t.description(\"A comma separated list of the Elasticsearch URLs that store spans and metrics. \" +\n\t\t\t\t\t\"If your ES cluster is secured with basic authentication, you can use urls like https://user:password@example.com. \" +\n\t\t\t\t\t\"The authentication information must be in application/x-www-form-urlencoded format. \" +\n\t\t\t\t\t\"You can also specify default credentials (in plain text) with stagemonitor.reporting.elasticsearch.username and stagemonitor.reporting.elasticsearch.password.\"\n\t\t\t)\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(ELASTICSEARCH)\n\t\t\t.buildWithDefault(Collections.<URL>emptyList())", "var_name": "elasticsearchUrls"}, {"original_string": "private final ConfigurationOption<String> elasticsearchDefaultUsername = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.username\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Elasticsearch Username\")\n\t\t\t.description(\"The default username for all Elasticsearch URLs defined by stagemonitor.reporting.elasticsearch.url in plain text format.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(ELASTICSEARCH)\n\t\t\t.buildWithDefault(\"\");", "modifier": "private final", "type": "ConfigurationOption<String>", "declarator": "elasticsearchDefaultUsername = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.username\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Elasticsearch Username\")\n\t\t\t.description(\"The default username for all Elasticsearch URLs defined by stagemonitor.reporting.elasticsearch.url in plain text format.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(ELASTICSEARCH)\n\t\t\t.buildWithDefault(\"\")", "var_name": "elasticsearchDefaultUsername"}, {"original_string": "private final ConfigurationOption<String> elasticsearchDefaultPassword = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.password\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Elasticsearch Password\")\n\t\t\t.description(\"The default password for all Elasticsearch URLs defined by stagemonitor.reporting.elasticsearch.url in plain text format.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(ELASTICSEARCH)\n\t\t\t.sensitive()\n\t\t\t.buildWithDefault(\"\");", "modifier": "private final", "type": "ConfigurationOption<String>", "declarator": "elasticsearchDefaultPassword = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.password\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Elasticsearch Password\")\n\t\t\t.description(\"The default password for all Elasticsearch URLs defined by stagemonitor.reporting.elasticsearch.url in plain text format.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(ELASTICSEARCH)\n\t\t\t.sensitive()\n\t\t\t.buildWithDefault(\"\")", "var_name": "elasticsearchDefaultPassword"}, {"original_string": "private final ConfigurationOption<Collection<String>> elasticsearchConfigurationSourceProfiles = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.configuration.elasticsearch.configurationSourceProfiles\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.configurationSourceProfiles\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Elasticsearch configuration source profiles\")\n\t\t\t.description(\"Set configuration profiles of configuration stored in elasticsearch as a centralized configuration source \" +\n\t\t\t\t\t\"that can be shared between multiple server instances. Set the profiles appropriate to the current \" +\n\t\t\t\t\t\"environment e.g. `common,prod`, `local`, `test`, ...\" +\n\t\t\t\t\t\"When you provide multiple profiles, the later ones have precedence over the first ones. \" +\n\t\t\t\t\t\"The configuration will be stored under \" +\n\t\t\t\t\t\"`{stagemonitor.reporting.elasticsearch.url}/stagemonitor-configuration/configuration/{configurationSourceProfile}`.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<String>emptyList());", "modifier": "private final", "type": "ConfigurationOption<Collection<String>>", "declarator": "elasticsearchConfigurationSourceProfiles = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.configuration.elasticsearch.configurationSourceProfiles\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.configurationSourceProfiles\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Elasticsearch configuration source profiles\")\n\t\t\t.description(\"Set configuration profiles of configuration stored in elasticsearch as a centralized configuration source \" +\n\t\t\t\t\t\"that can be shared between multiple server instances. Set the profiles appropriate to the current \" +\n\t\t\t\t\t\"environment e.g. `common,prod`, `local`, `test`, ...\" +\n\t\t\t\t\t\"When you provide multiple profiles, the later ones have precedence over the first ones. \" +\n\t\t\t\t\t\"The configuration will be stored under \" +\n\t\t\t\t\t\"`{stagemonitor.reporting.elasticsearch.url}/stagemonitor-configuration/configuration/{configurationSourceProfile}`.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<String>emptyList())", "var_name": "elasticsearchConfigurationSourceProfiles"}, {"original_string": "private final ConfigurationOption<Boolean> deactivateStagemonitorIfEsConfigSourceIsDown = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.configuration.elasticsearch.deactivateStagemonitorIfEsIsDown\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.configurationSource.deactivateStagemonitorIfEsIsDown\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Deactivate stagemonitor if elasticsearch configuration source is down\")\n\t\t\t.description(\"Set to true if stagemonitor should be deactivated if \" +\n\t\t\t\t\t\"stagemonitor.configuration.elasticsearch.configurationSourceProfiles is set but elasticsearch can't be reached \" +\n\t\t\t\t\t\"under stagemonitor.reporting.elasticsearch.url. Defaults to true to prevent starting stagemonitor with \" +\n\t\t\t\t\t\"wrong configuration.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(true);", "modifier": "private final", "type": "ConfigurationOption<Boolean>", "declarator": "deactivateStagemonitorIfEsConfigSourceIsDown = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.configuration.elasticsearch.deactivateStagemonitorIfEsIsDown\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.configurationSource.deactivateStagemonitorIfEsIsDown\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Deactivate stagemonitor if elasticsearch configuration source is down\")\n\t\t\t.description(\"Set to true if stagemonitor should be deactivated if \" +\n\t\t\t\t\t\"stagemonitor.configuration.elasticsearch.configurationSourceProfiles is set but elasticsearch can't be reached \" +\n\t\t\t\t\t\"under stagemonitor.reporting.elasticsearch.url. Defaults to true to prevent starting stagemonitor with \" +\n\t\t\t\t\t\"wrong configuration.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(true)", "var_name": "deactivateStagemonitorIfEsConfigSourceIsDown"}, {"original_string": "private final ConfigurationOption<Collection<MetricName>> excludedMetrics = ConfigurationOption\n\t\t\t.builder(new SetValueConverter<MetricName>(new MetricNameValueConverter()), Collection.class)\n\t\t\t.key(\"stagemonitor.metrics.excluded.pattern\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Excluded metric names\")\n\t\t\t.description(\"A comma separated list of metric names that should not be collected.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<MetricName>emptyList());", "modifier": "private final", "type": "ConfigurationOption<Collection<MetricName>>", "declarator": "excludedMetrics = ConfigurationOption\n\t\t\t.builder(new SetValueConverter<MetricName>(new MetricNameValueConverter()), Collection.class)\n\t\t\t.key(\"stagemonitor.metrics.excluded.pattern\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Excluded metric names\")\n\t\t\t.description(\"A comma separated list of metric names that should not be collected.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<MetricName>emptyList())", "var_name": "excludedMetrics"}, {"original_string": "private final ConfigurationOption<Collection<String>> disabledPlugins = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.plugins.disabled\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Disabled plugins\")\n\t\t\t.description(\"A comma separated list of plugin names (the simple class name) that should not be active.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<String>emptyList());", "modifier": "private final", "type": "ConfigurationOption<Collection<String>>", "declarator": "disabledPlugins = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.plugins.disabled\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Disabled plugins\")\n\t\t\t.description(\"A comma separated list of plugin names (the simple class name) that should not be active.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<String>emptyList())", "var_name": "disabledPlugins"}, {"original_string": "private final ConfigurationOption<Integer> reloadConfigurationInterval = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.configuration.reload.interval\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Configuration reload interval\")\n\t\t\t.description(\"The interval in seconds a reload of all configuration sources is performed. \" +\n\t\t\t\t\t\"Set to a value below `1` to deactivate periodic reloading the configuration.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(60);", "modifier": "private final", "type": "ConfigurationOption<Integer>", "declarator": "reloadConfigurationInterval = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.configuration.reload.interval\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Configuration reload interval\")\n\t\t\t.description(\"The interval in seconds a reload of all configuration sources is performed. \" +\n\t\t\t\t\t\"Set to a value below `1` to deactivate periodic reloading the configuration.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(60)", "var_name": "reloadConfigurationInterval"}, {"original_string": "private final ConfigurationOption<Collection<String>> excludePackages = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.instrument.exclude\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Excluded packages\")\n\t\t\t.description(\"Exclude packages and their sub-packages from the instrumentation (for example the profiler).\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<String>emptySet());", "modifier": "private final", "type": "ConfigurationOption<Collection<String>>", "declarator": "excludePackages = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.instrument.exclude\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Excluded packages\")\n\t\t\t.description(\"Exclude packages and their sub-packages from the instrumentation (for example the profiler).\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<String>emptySet())", "var_name": "excludePackages"}, {"original_string": "private final ConfigurationOption<Collection<String>> excludeContaining = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.instrument.excludeContaining\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Exclude containing\")\n\t\t\t.description(\"Exclude classes from the instrumentation (for example from profiling) that contain one of the \" +\n\t\t\t\t\t\"following strings as part of their class name.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(SetValueConverter.immutableSet(\"$JaxbAccessor\", \"$$\", \"CGLIB\", \"EnhancerBy\", \"$Proxy\"));", "modifier": "private final", "type": "ConfigurationOption<Collection<String>>", "declarator": "excludeContaining = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.instrument.excludeContaining\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Exclude containing\")\n\t\t\t.description(\"Exclude classes from the instrumentation (for example from profiling) that contain one of the \" +\n\t\t\t\t\t\"following strings as part of their class name.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(SetValueConverter.immutableSet(\"$JaxbAccessor\", \"$$\", \"CGLIB\", \"EnhancerBy\", \"$Proxy\"))", "var_name": "excludeContaining"}, {"original_string": "private final ConfigurationOption<Collection<String>> includePackages = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.instrument.include\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Included packages\")\n\t\t\t.description(\"The packages that should be included for instrumentation. \" +\n\t\t\t\t\t\"All subpackages of the listed packages are included automatically. \" +\n\t\t\t\t\t\"This property is required if you want to use the profiler, the @MonitorRequests annotation, the \" +\n\t\t\t\t\t\"com.codahale.metrics.annotation.* annotations or similar features. \" +\n\t\t\t\t\t\"You can exclude subpackages of a included package via `stagemonitor.instrument.exclude`. \" +\n\t\t\t\t\t\"Example: `org.somecompany.package, com.someothercompany`\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<String>emptySet());", "modifier": "private final", "type": "ConfigurationOption<Collection<String>>", "declarator": "includePackages = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.instrument.include\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Included packages\")\n\t\t\t.description(\"The packages that should be included for instrumentation. \" +\n\t\t\t\t\t\"All subpackages of the listed packages are included automatically. \" +\n\t\t\t\t\t\"This property is required if you want to use the profiler, the @MonitorRequests annotation, the \" +\n\t\t\t\t\t\"com.codahale.metrics.annotation.* annotations or similar features. \" +\n\t\t\t\t\t\"You can exclude subpackages of a included package via `stagemonitor.instrument.exclude`. \" +\n\t\t\t\t\t\"Example: `org.somecompany.package, com.someothercompany`\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<String>emptySet())", "var_name": "includePackages"}, {"original_string": "private final ConfigurationOption<Boolean> attachAgentAtRuntime = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.instrument.runtimeAttach\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Attach agent at runtime\")\n\t\t\t.description(\"Attaches the agent via the Attach API at runtime and retransforms all currently loaded classes.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(true);", "modifier": "private final", "type": "ConfigurationOption<Boolean>", "declarator": "attachAgentAtRuntime = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.instrument.runtimeAttach\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Attach agent at runtime\")\n\t\t\t.description(\"Attaches the agent via the Attach API at runtime and retransforms all currently loaded classes.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(true)", "var_name": "attachAgentAtRuntime"}, {"original_string": "private final ConfigurationOption<Collection<String>> exportClassesWithName = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.instrument.exportGeneratedClassesWithName\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Export generated classes with name\")\n\t\t\t.description(\"A list of the fully qualified class names which should be exported to the file system after they have been \" +\n\t\t\t\t\t\"modified by Byte Buddy. This option is useful to debug problems inside the generated class. \" +\n\t\t\t\t\t\"Classes are exported to a temporary directory. The logs contain the information where the files \" +\n\t\t\t\t\t\"are stored.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<String>emptySet());", "modifier": "private final", "type": "ConfigurationOption<Collection<String>>", "declarator": "exportClassesWithName = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.instrument.exportGeneratedClassesWithName\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Export generated classes with name\")\n\t\t\t.description(\"A list of the fully qualified class names which should be exported to the file system after they have been \" +\n\t\t\t\t\t\"modified by Byte Buddy. This option is useful to debug problems inside the generated class. \" +\n\t\t\t\t\t\"Classes are exported to a temporary directory. The logs contain the information where the files \" +\n\t\t\t\t\t\"are stored.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<String>emptySet())", "var_name": "exportClassesWithName"}, {"original_string": "private final ConfigurationOption<Boolean> debugInstrumentation = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.instrument.debug\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Debug instrumentation\")\n\t\t\t.description(\"Set to true to log additional information and warnings during the instrumentation process.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(false);", "modifier": "private final", "type": "ConfigurationOption<Boolean>", "declarator": "debugInstrumentation = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.instrument.debug\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Debug instrumentation\")\n\t\t\t.description(\"Set to true to log additional information and warnings during the instrumentation process.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(false)", "var_name": "debugInstrumentation"}, {"original_string": "private final ConfigurationOption<Collection<String>> excludedInstrumenters = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.instrument.excludedInstrumenter\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Excluded Instrumenters\")\n\t\t\t.description(\"A list of the simple class names of StagemonitorByteBuddyTransformers that should not be applied\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<String>emptySet());", "modifier": "private final", "type": "ConfigurationOption<Collection<String>>", "declarator": "excludedInstrumenters = ConfigurationOption.stringsOption()\n\t\t\t.key(\"stagemonitor.instrument.excludedInstrumenter\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Excluded Instrumenters\")\n\t\t\t.description(\"A list of the simple class names of StagemonitorByteBuddyTransformers that should not be applied\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<String>emptySet())", "var_name": "excludedInstrumenters"}, {"original_string": "private final ConfigurationOption<String> grafanaUrl = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.grafana.url\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Grafana URL\")\n\t\t\t.description(\"The URL of your Grafana 2.0 installation\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(\"grafana\")\n\t\t\t.build();", "modifier": "private final", "type": "ConfigurationOption<String>", "declarator": "grafanaUrl = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.grafana.url\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Grafana URL\")\n\t\t\t.description(\"The URL of your Grafana 2.0 installation\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(\"grafana\")\n\t\t\t.build()", "var_name": "grafanaUrl"}, {"original_string": "private final ConfigurationOption<String> grafanaApiKey = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.grafana.apiKey\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Grafana API Key\")\n\t\t\t.description(\"The API Key of your Grafana 2.0 installation. \" +\n\t\t\t\t\t\"See http://docs.grafana.org/reference/http_api/#create-api-token how to create a key. \" +\n\t\t\t\t\t\"The key has to have the admin role. This is necessary so that stagemonitor can automatically add \" +\n\t\t\t\t\t\"datasources and dashboards to Grafana.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(\"grafana\")\n\t\t\t.sensitive()\n\t\t\t.build();", "modifier": "private final", "type": "ConfigurationOption<String>", "declarator": "grafanaApiKey = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.grafana.apiKey\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Grafana API Key\")\n\t\t\t.description(\"The API Key of your Grafana 2.0 installation. \" +\n\t\t\t\t\t\"See http://docs.grafana.org/reference/http_api/#create-api-token how to create a key. \" +\n\t\t\t\t\t\"The key has to have the admin role. This is necessary so that stagemonitor can automatically add \" +\n\t\t\t\t\t\"datasources and dashboards to Grafana.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(\"grafana\")\n\t\t\t.sensitive()\n\t\t\t.build()", "var_name": "grafanaApiKey"}, {"original_string": "private final ConfigurationOption<Integer> threadPoolQueueCapacityLimit = ConfigurationOption.integerOption()\n\t\t\t.key(POOLS_QUEUE_CAPACITY_LIMIT_KEY)\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Thread Pool Queue Capacity Limit\")\n\t\t\t.description(\"Sets a limit to the number of pending tasks in the ExecutorServices stagemonitor uses. \" +\n\t\t\t\t\t\"These are thread pools that are used for example to report spans to elasticsearch. \" +\n\t\t\t\t\t\"If elasticsearch is unreachable or your application encounters a spike in incoming requests this limit could be reached. \" +\n\t\t\t\t\t\"It is used to prevent the queue from growing indefinitely. \")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(\"advanced\")\n\t\t\t.buildWithDefault(1000);", "modifier": "private final", "type": "ConfigurationOption<Integer>", "declarator": "threadPoolQueueCapacityLimit = ConfigurationOption.integerOption()\n\t\t\t.key(POOLS_QUEUE_CAPACITY_LIMIT_KEY)\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Thread Pool Queue Capacity Limit\")\n\t\t\t.description(\"Sets a limit to the number of pending tasks in the ExecutorServices stagemonitor uses. \" +\n\t\t\t\t\t\"These are thread pools that are used for example to report spans to elasticsearch. \" +\n\t\t\t\t\t\"If elasticsearch is unreachable or your application encounters a spike in incoming requests this limit could be reached. \" +\n\t\t\t\t\t\"It is used to prevent the queue from growing indefinitely. \")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(\"advanced\")\n\t\t\t.buildWithDefault(1000)", "var_name": "threadPoolQueueCapacityLimit"}, {"original_string": "private final ConfigurationOption<String> metricsIndexTemplate = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.metricsIndexTemplate\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"ES Metrics Index Template\")\n\t\t\t.description(\"The classpath location of the index template that is used for the stagemonitor-metrics-* indices. \" +\n\t\t\t\t\t\"By specifying the location to your own template, you can fully customize the index template.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.buildWithDefault(\"stagemonitor-elasticsearch-metrics-index-template.json\");", "modifier": "private final", "type": "ConfigurationOption<String>", "declarator": "metricsIndexTemplate = ConfigurationOption.stringOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.metricsIndexTemplate\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"ES Metrics Index Template\")\n\t\t\t.description(\"The classpath location of the index template that is used for the stagemonitor-metrics-* indices. \" +\n\t\t\t\t\t\"By specifying the location to your own template, you can fully customize the index template.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(METRICS_STORE, ELASTICSEARCH)\n\t\t\t.buildWithDefault(\"stagemonitor-elasticsearch-metrics-index-template.json\")", "var_name": "metricsIndexTemplate"}, {"original_string": "private final ConfigurationOption<Integer> elasticsearchAvailabilityCheckPeriodSec = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.availabilityCheckPeriodSec\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.availabilityCheckPeriodSec\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Elasticsearch availability check period (sec)\")\n\t\t\t.description(\"When set to a value > 0 stagemonitor periodically checks if Elasticsearch is available. \" +\n\t\t\t\t\t\"When not available, stagemonitor won't try send documents to Elasticsearch which would \" +\n\t\t\t\t\t\"fail anyway. This reduces heap usage as the documents won't be queued up. \" +\n\t\t\t\t\t\"It also avoids the logging of warnings when the queue is filled up to the limit (see '\" + POOLS_QUEUE_CAPACITY_LIMIT_KEY + \"')\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(\"elasticsearch\", \"advanced\")\n\t\t\t.buildWithDefault(5);", "modifier": "private final", "type": "ConfigurationOption<Integer>", "declarator": "elasticsearchAvailabilityCheckPeriodSec = ConfigurationOption.integerOption()\n\t\t\t.key(\"stagemonitor.reporting.elasticsearch.availabilityCheckPeriodSec\")\n\t\t\t.aliasKeys(\"stagemonitor.elasticsearch.availabilityCheckPeriodSec\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Elasticsearch availability check period (sec)\")\n\t\t\t.description(\"When set to a value > 0 stagemonitor periodically checks if Elasticsearch is available. \" +\n\t\t\t\t\t\"When not available, stagemonitor won't try send documents to Elasticsearch which would \" +\n\t\t\t\t\t\"fail anyway. This reduces heap usage as the documents won't be queued up. \" +\n\t\t\t\t\t\"It also avoids the logging of warnings when the queue is filled up to the limit (see '\" + POOLS_QUEUE_CAPACITY_LIMIT_KEY + \"')\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.tags(\"elasticsearch\", \"advanced\")\n\t\t\t.buildWithDefault(5)", "var_name": "elasticsearchAvailabilityCheckPeriodSec"}, {"original_string": "private final ConfigurationOption<List<URL>> remotePropertiesConfigUrls = ConfigurationOption.urlsOption()\n\t\t\t.key(\"stagemonitor.configuration.remoteproperties.urls\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"URLs of the remote properties\")\n\t\t\t.description(\"Must be http or https URLs. This can be a single URL or a list of config URLs. \" +\n\t\t\t\t\t\"The end point should provide a list of properties in a simple line oriented format with key/value pairs. \" +\n\t\t\t\t\t\"For more information on the format, see java.util.Properties.load(java.io.Reader)). \" +\n\t\t\t\t\t\"For example of a configuration URL for the petclinic application with the default profile from a\" +\n\t\t\t\t\t\"Spring Cloud Config server would look like: https://config.server/petclinic-default.properties\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<URL>emptyList());", "modifier": "private final", "type": "ConfigurationOption<List<URL>>", "declarator": "remotePropertiesConfigUrls = ConfigurationOption.urlsOption()\n\t\t\t.key(\"stagemonitor.configuration.remoteproperties.urls\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"URLs of the remote properties\")\n\t\t\t.description(\"Must be http or https URLs. This can be a single URL or a list of config URLs. \" +\n\t\t\t\t\t\"The end point should provide a list of properties in a simple line oriented format with key/value pairs. \" +\n\t\t\t\t\t\"For more information on the format, see java.util.Properties.load(java.io.Reader)). \" +\n\t\t\t\t\t\"For example of a configuration URL for the petclinic application with the default profile from a\" +\n\t\t\t\t\t\"Spring Cloud Config server would look like: https://config.server/petclinic-default.properties\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(Collections.<URL>emptyList())", "var_name": "remotePropertiesConfigUrls"}, {"original_string": "private final ConfigurationOption<Boolean> deactivateStagemonitorIfRemotePropertyServerIsDown = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.configuration.remoteproperties.deactivateStagemonitorIfRemotePropertyServerIsDown\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Deactivate stagemonitor if the remote properties configuration server is down or can't be reached\")\n\t\t\t.description(\"Set to true if stagemonitor should be deactivated if the config url specified \" +\n\t\t\t\t\t\"under stagemonitor.reporting.remoteproperties.urls is unavailable. Defaults to true to prevent starting stagemonitor with \" +\n\t\t\t\t\t\"wrong configuration.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(true);", "modifier": "private final", "type": "ConfigurationOption<Boolean>", "declarator": "deactivateStagemonitorIfRemotePropertyServerIsDown = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.configuration.remoteproperties.deactivateStagemonitorIfRemotePropertyServerIsDown\")\n\t\t\t.dynamic(false)\n\t\t\t.label(\"Deactivate stagemonitor if the remote properties configuration server is down or can't be reached\")\n\t\t\t.description(\"Set to true if stagemonitor should be deactivated if the config url specified \" +\n\t\t\t\t\t\"under stagemonitor.reporting.remoteproperties.urls is unavailable. Defaults to true to prevent starting stagemonitor with \" +\n\t\t\t\t\t\"wrong configuration.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(true)", "var_name": "deactivateStagemonitorIfRemotePropertyServerIsDown"}, {"original_string": "private final ConfigurationOption<Boolean> initializeElasticsearch = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.elasticsearch.init\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Initialize Elasticsearch indices and Kibana dashboards\")\n\t\t\t.description(\"Set to true if stagemonitor should initialize the required indices and Dashboards. \" +\n\t\t\t\t\t\"If you don't want to grant the stagemonitor X-Pack Security user the permission to create \" +\n\t\t\t\t\t\"indices and to access the .kibana index, set this to false and use the init tool \" +\n\t\t\t\t\t\"https://github.com/stagemonitor/stagemonitor-elasticsearch-init.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(true);", "modifier": "private final", "type": "ConfigurationOption<Boolean>", "declarator": "initializeElasticsearch = ConfigurationOption.booleanOption()\n\t\t\t.key(\"stagemonitor.elasticsearch.init\")\n\t\t\t.dynamic(true)\n\t\t\t.label(\"Initialize Elasticsearch indices and Kibana dashboards\")\n\t\t\t.description(\"Set to true if stagemonitor should initialize the required indices and Dashboards. \" +\n\t\t\t\t\t\"If you don't want to grant the stagemonitor X-Pack Security user the permission to create \" +\n\t\t\t\t\t\"indices and to access the .kibana index, set this to false and use the init tool \" +\n\t\t\t\t\t\"https://github.com/stagemonitor/stagemonitor-elasticsearch-init.\")\n\t\t\t.configurationCategory(CORE_PLUGIN_NAME)\n\t\t\t.buildWithDefault(true)", "var_name": "initializeElasticsearch"}, {"original_string": "private List<Closeable> reporters = new CopyOnWriteArrayList<Closeable>();", "modifier": "private", "type": "List<Closeable>", "declarator": "reporters = new CopyOnWriteArrayList<Closeable>()", "var_name": "reporters"}, {"original_string": "private ElasticsearchClient elasticsearchClient;", "modifier": "private", "type": "ElasticsearchClient", "declarator": "elasticsearchClient", "var_name": "elasticsearchClient"}, {"original_string": "private GrafanaClient grafanaClient;", "modifier": "private", "type": "GrafanaClient", "declarator": "grafanaClient", "var_name": "grafanaClient"}, {"original_string": "private IndexSelector indexSelector = new IndexSelector(new Clock.UserTimeClock());", "modifier": "private", "type": "IndexSelector", "declarator": "indexSelector = new IndexSelector(new Clock.UserTimeClock())", "var_name": "indexSelector"}, {"original_string": "private Metric2Registry metricRegistry;", "modifier": "private", "type": "Metric2Registry", "declarator": "metricRegistry", "var_name": "metricRegistry"}, {"original_string": "private AtomicInteger accessesToElasticsearchUrl = new AtomicInteger();", "modifier": "private", "type": "AtomicInteger", "declarator": "accessesToElasticsearchUrl = new AtomicInteger()", "var_name": "accessesToElasticsearchUrl"}, {"original_string": "private HealthCheckRegistry healthCheckRegistry;", "modifier": "private", "type": "HealthCheckRegistry", "declarator": "healthCheckRegistry", "var_name": "healthCheckRegistry"}], "methods": [{"identifier": "CorePlugin", "parameters": "()", "modifiers": "public", "return": "", "signature": " CorePlugin()", "full_signature": "public  CorePlugin()", "class_method_signature": "CorePlugin.CorePlugin()", "testcase": false, "constructor": true}, {"identifier": "CorePlugin", "parameters": "(ElasticsearchClient elasticsearchClient)", "modifiers": "public", "return": "", "signature": " CorePlugin(ElasticsearchClient elasticsearchClient)", "full_signature": "public  CorePlugin(ElasticsearchClient elasticsearchClient)", "class_method_signature": "CorePlugin.CorePlugin(ElasticsearchClient elasticsearchClient)", "testcase": false, "constructor": true}, {"identifier": "initializePlugin", "parameters": "(InitArguments initArguments)", "modifiers": "@Override public", "return": "void", "signature": "void initializePlugin(InitArguments initArguments)", "full_signature": "@Override public void initializePlugin(InitArguments initArguments)", "class_method_signature": "CorePlugin.initializePlugin(InitArguments initArguments)", "testcase": false, "constructor": false}, {"identifier": "dependsOn", "parameters": "()", "modifiers": "@Override public", "return": "List<Class<? extends StagemonitorPlugin>>", "signature": "List<Class<? extends StagemonitorPlugin>> dependsOn()", "full_signature": "@Override public List<Class<? extends StagemonitorPlugin>> dependsOn()", "class_method_signature": "CorePlugin.dependsOn()", "testcase": false, "constructor": false}, {"identifier": "registerReporters", "parameters": "(Metric2Registry metric2Registry, ConfigurationRegistry configuration, MeasurementSession measurementSession)", "modifiers": "", "return": "void", "signature": "void registerReporters(Metric2Registry metric2Registry, ConfigurationRegistry configuration, MeasurementSession measurementSession)", "full_signature": " void registerReporters(Metric2Registry metric2Registry, ConfigurationRegistry configuration, MeasurementSession measurementSession)", "class_method_signature": "CorePlugin.registerReporters(Metric2Registry metric2Registry, ConfigurationRegistry configuration, MeasurementSession measurementSession)", "testcase": false, "constructor": false}, {"identifier": "reportToGraphite", "parameters": "(MetricRegistry metricRegistry, long reportingInterval, MeasurementSession measurementSession)", "modifiers": "private", "return": "void", "signature": "void reportToGraphite(MetricRegistry metricRegistry, long reportingInterval, MeasurementSession measurementSession)", "full_signature": "private void reportToGraphite(MetricRegistry metricRegistry, long reportingInterval, MeasurementSession measurementSession)", "class_method_signature": "CorePlugin.reportToGraphite(MetricRegistry metricRegistry, long reportingInterval, MeasurementSession measurementSession)", "testcase": false, "constructor": false}, {"identifier": "reportToInfluxDb", "parameters": "(Metric2Registry metricRegistry, int reportingInterval,\n\t\t\t\t\t\t\t\t  MeasurementSession measurementSession)", "modifiers": "private", "return": "void", "signature": "void reportToInfluxDb(Metric2Registry metricRegistry, int reportingInterval,\n\t\t\t\t\t\t\t\t  MeasurementSession measurementSession)", "full_signature": "private void reportToInfluxDb(Metric2Registry metricRegistry, int reportingInterval,\n\t\t\t\t\t\t\t\t  MeasurementSession measurementSession)", "class_method_signature": "CorePlugin.reportToInfluxDb(Metric2Registry metricRegistry, int reportingInterval,\n\t\t\t\t\t\t\t\t  MeasurementSession measurementSession)", "testcase": false, "constructor": false}, {"identifier": "getGraphitePrefix", "parameters": "(MeasurementSession measurementSession)", "modifiers": "private", "return": "String", "signature": "String getGraphitePrefix(MeasurementSession measurementSession)", "full_signature": "private String getGraphitePrefix(MeasurementSession measurementSession)", "class_method_signature": "CorePlugin.getGraphitePrefix(MeasurementSession measurementSession)", "testcase": false, "constructor": false}, {"identifier": "reportToConsole", "parameters": "(Metric2Registry metric2Registry, long reportingInterval, Metric2Filter filter)", "modifiers": "private", "return": "void", "signature": "void reportToConsole(Metric2Registry metric2Registry, long reportingInterval, Metric2Filter filter)", "full_signature": "private void reportToConsole(Metric2Registry metric2Registry, long reportingInterval, Metric2Filter filter)", "class_method_signature": "CorePlugin.reportToConsole(Metric2Registry metric2Registry, long reportingInterval, Metric2Filter filter)", "testcase": false, "constructor": false}, {"identifier": "reportToJMX", "parameters": "(MetricRegistry metricRegistry)", "modifiers": "private", "return": "void", "signature": "void reportToJMX(MetricRegistry metricRegistry)", "full_signature": "private void reportToJMX(MetricRegistry metricRegistry)", "class_method_signature": "CorePlugin.reportToJMX(MetricRegistry metricRegistry)", "testcase": false, "constructor": false}, {"identifier": "onShutDown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onShutDown()", "full_signature": "@Override public void onShutDown()", "class_method_signature": "CorePlugin.onShutDown()", "testcase": false, "constructor": false}, {"identifier": "getMeasurementSession", "parameters": "()", "modifiers": "public", "return": "MeasurementSession", "signature": "MeasurementSession getMeasurementSession()", "full_signature": "public MeasurementSession getMeasurementSession()", "class_method_signature": "CorePlugin.getMeasurementSession()", "testcase": false, "constructor": false}, {"identifier": "getMetricRegistry", "parameters": "()", "modifiers": "public", "return": "Metric2Registry", "signature": "Metric2Registry getMetricRegistry()", "full_signature": "public Metric2Registry getMetricRegistry()", "class_method_signature": "CorePlugin.getMetricRegistry()", "testcase": false, "constructor": false}, {"identifier": "getElasticsearchClient", "parameters": "()", "modifiers": "public", "return": "ElasticsearchClient", "signature": "ElasticsearchClient getElasticsearchClient()", "full_signature": "public ElasticsearchClient getElasticsearchClient()", "class_method_signature": "CorePlugin.getElasticsearchClient()", "testcase": false, "constructor": false}, {"identifier": "initElasticsearchAvailabilityObservers", "parameters": "(ConfigurationRegistry configurationRegistry)", "modifiers": "private static", "return": "List<ElasticsearchAvailabilityObserver>", "signature": "List<ElasticsearchAvailabilityObserver> initElasticsearchAvailabilityObservers(ConfigurationRegistry configurationRegistry)", "full_signature": "private static List<ElasticsearchAvailabilityObserver> initElasticsearchAvailabilityObservers(ConfigurationRegistry configurationRegistry)", "class_method_signature": "CorePlugin.initElasticsearchAvailabilityObservers(ConfigurationRegistry configurationRegistry)", "testcase": false, "constructor": false}, {"identifier": "getGrafanaClient", "parameters": "()", "modifiers": "public", "return": "GrafanaClient", "signature": "GrafanaClient getGrafanaClient()", "full_signature": "public GrafanaClient getGrafanaClient()", "class_method_signature": "CorePlugin.getGrafanaClient()", "testcase": false, "constructor": false}, {"identifier": "setElasticsearchClient", "parameters": "(ElasticsearchClient elasticsearchClient)", "modifiers": "public", "return": "void", "signature": "void setElasticsearchClient(ElasticsearchClient elasticsearchClient)", "full_signature": "public void setElasticsearchClient(ElasticsearchClient elasticsearchClient)", "class_method_signature": "CorePlugin.setElasticsearchClient(ElasticsearchClient elasticsearchClient)", "testcase": false, "constructor": false}, {"identifier": "getNameOfLocalHost", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getNameOfLocalHost()", "full_signature": "public static String getNameOfLocalHost()", "class_method_signature": "CorePlugin.getNameOfLocalHost()", "testcase": false, "constructor": false}, {"identifier": "getHostNameFromEnv", "parameters": "()", "modifiers": "static", "return": "String", "signature": "String getHostNameFromEnv()", "full_signature": "static String getHostNameFromEnv()", "class_method_signature": "CorePlugin.getHostNameFromEnv()", "testcase": false, "constructor": false}, {"identifier": "isStagemonitorActive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStagemonitorActive()", "full_signature": "public boolean isStagemonitorActive()", "class_method_signature": "CorePlugin.isStagemonitorActive()", "testcase": false, "constructor": false}, {"identifier": "isInternalMonitoringActive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInternalMonitoringActive()", "full_signature": "public boolean isInternalMonitoringActive()", "class_method_signature": "CorePlugin.isInternalMonitoringActive()", "testcase": false, "constructor": false}, {"identifier": "getConsoleReportingInterval", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getConsoleReportingInterval()", "full_signature": "public long getConsoleReportingInterval()", "class_method_signature": "CorePlugin.getConsoleReportingInterval()", "testcase": false, "constructor": false}, {"identifier": "isReportToJMX", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReportToJMX()", "full_signature": "public boolean isReportToJMX()", "class_method_signature": "CorePlugin.isReportToJMX()", "testcase": false, "constructor": false}, {"identifier": "getGraphiteReportingInterval", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getGraphiteReportingInterval()", "full_signature": "public int getGraphiteReportingInterval()", "class_method_signature": "CorePlugin.getGraphiteReportingInterval()", "testcase": false, "constructor": false}, {"identifier": "getGraphiteHostName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getGraphiteHostName()", "full_signature": "public String getGraphiteHostName()", "class_method_signature": "CorePlugin.getGraphiteHostName()", "testcase": false, "constructor": false}, {"identifier": "getGraphitePort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getGraphitePort()", "full_signature": "public int getGraphitePort()", "class_method_signature": "CorePlugin.getGraphitePort()", "testcase": false, "constructor": false}, {"identifier": "getApplicationName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getApplicationName()", "full_signature": "public String getApplicationName()", "class_method_signature": "CorePlugin.getApplicationName()", "testcase": false, "constructor": false}, {"identifier": "getInstanceName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInstanceName()", "full_signature": "public String getInstanceName()", "class_method_signature": "CorePlugin.getInstanceName()", "testcase": false, "constructor": false}, {"identifier": "getHostName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHostName()", "full_signature": "public String getHostName()", "class_method_signature": "CorePlugin.getHostName()", "testcase": false, "constructor": false}, {"identifier": "getElasticsearchUrl", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getElasticsearchUrl()", "full_signature": "public URL getElasticsearchUrl()", "class_method_signature": "CorePlugin.getElasticsearchUrl()", "testcase": false, "constructor": false}, {"identifier": "getElasticsearchUrls", "parameters": "()", "modifiers": "public", "return": "Collection<URL>", "signature": "Collection<URL> getElasticsearchUrls()", "full_signature": "public Collection<URL> getElasticsearchUrls()", "class_method_signature": "CorePlugin.getElasticsearchUrls()", "testcase": false, "constructor": false}, {"identifier": "getElasticsearchUrlsWithoutAuthenticationInformation", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getElasticsearchUrlsWithoutAuthenticationInformation()", "full_signature": "public String getElasticsearchUrlsWithoutAuthenticationInformation()", "class_method_signature": "CorePlugin.getElasticsearchUrlsWithoutAuthenticationInformation()", "testcase": false, "constructor": false}, {"identifier": "getElasticsearchConfigurationSourceProfiles", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getElasticsearchConfigurationSourceProfiles()", "full_signature": "public Collection<String> getElasticsearchConfigurationSourceProfiles()", "class_method_signature": "CorePlugin.getElasticsearchConfigurationSourceProfiles()", "testcase": false, "constructor": false}, {"identifier": "isDeactivateStagemonitorIfEsConfigSourceIsDown", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDeactivateStagemonitorIfEsConfigSourceIsDown()", "full_signature": "public boolean isDeactivateStagemonitorIfEsConfigSourceIsDown()", "class_method_signature": "CorePlugin.isDeactivateStagemonitorIfEsConfigSourceIsDown()", "testcase": false, "constructor": false}, {"identifier": "getExcludedMetricsPatterns", "parameters": "()", "modifiers": "public", "return": "Collection<MetricName>", "signature": "Collection<MetricName> getExcludedMetricsPatterns()", "full_signature": "public Collection<MetricName> getExcludedMetricsPatterns()", "class_method_signature": "CorePlugin.getExcludedMetricsPatterns()", "testcase": false, "constructor": false}, {"identifier": "getDisabledPlugins", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getDisabledPlugins()", "full_signature": "public Collection<String> getDisabledPlugins()", "class_method_signature": "CorePlugin.getDisabledPlugins()", "testcase": false, "constructor": false}, {"identifier": "getReloadConfigurationInterval", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getReloadConfigurationInterval()", "full_signature": "public Integer getReloadConfigurationInterval()", "class_method_signature": "CorePlugin.getReloadConfigurationInterval()", "testcase": false, "constructor": false}, {"identifier": "getExcludeContaining", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getExcludeContaining()", "full_signature": "public Collection<String> getExcludeContaining()", "class_method_signature": "CorePlugin.getExcludeContaining()", "testcase": false, "constructor": false}, {"identifier": "getIncludePackages", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getIncludePackages()", "full_signature": "public Collection<String> getIncludePackages()", "class_method_signature": "CorePlugin.getIncludePackages()", "testcase": false, "constructor": false}, {"identifier": "getExcludePackages", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getExcludePackages()", "full_signature": "public Collection<String> getExcludePackages()", "class_method_signature": "CorePlugin.getExcludePackages()", "testcase": false, "constructor": false}, {"identifier": "isAttachAgentAtRuntime", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAttachAgentAtRuntime()", "full_signature": "public boolean isAttachAgentAtRuntime()", "class_method_signature": "CorePlugin.isAttachAgentAtRuntime()", "testcase": false, "constructor": false}, {"identifier": "getExcludedInstrumenters", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getExcludedInstrumenters()", "full_signature": "public Collection<String> getExcludedInstrumenters()", "class_method_signature": "CorePlugin.getExcludedInstrumenters()", "testcase": false, "constructor": false}, {"identifier": "getInfluxDbUrl", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getInfluxDbUrl()", "full_signature": "public URL getInfluxDbUrl()", "class_method_signature": "CorePlugin.getInfluxDbUrl()", "testcase": false, "constructor": false}, {"identifier": "getInfluxDbDb", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInfluxDbDb()", "full_signature": "public String getInfluxDbDb()", "class_method_signature": "CorePlugin.getInfluxDbDb()", "testcase": false, "constructor": false}, {"identifier": "isReportToElasticsearch", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReportToElasticsearch()", "full_signature": "public boolean isReportToElasticsearch()", "class_method_signature": "CorePlugin.isReportToElasticsearch()", "testcase": false, "constructor": false}, {"identifier": "isReportToGraphite", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReportToGraphite()", "full_signature": "public boolean isReportToGraphite()", "class_method_signature": "CorePlugin.isReportToGraphite()", "testcase": false, "constructor": false}, {"identifier": "getGrafanaUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getGrafanaUrl()", "full_signature": "public String getGrafanaUrl()", "class_method_signature": "CorePlugin.getGrafanaUrl()", "testcase": false, "constructor": false}, {"identifier": "getGrafanaApiKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getGrafanaApiKey()", "full_signature": "public String getGrafanaApiKey()", "class_method_signature": "CorePlugin.getGrafanaApiKey()", "testcase": false, "constructor": false}, {"identifier": "getThreadPoolQueueCapacityLimit", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getThreadPoolQueueCapacityLimit()", "full_signature": "public int getThreadPoolQueueCapacityLimit()", "class_method_signature": "CorePlugin.getThreadPoolQueueCapacityLimit()", "testcase": false, "constructor": false}, {"identifier": "getIndexSelector", "parameters": "()", "modifiers": "public", "return": "IndexSelector", "signature": "IndexSelector getIndexSelector()", "full_signature": "public IndexSelector getIndexSelector()", "class_method_signature": "CorePlugin.getIndexSelector()", "testcase": false, "constructor": false}, {"identifier": "getElasticsearchReportingInterval", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getElasticsearchReportingInterval()", "full_signature": "public int getElasticsearchReportingInterval()", "class_method_signature": "CorePlugin.getElasticsearchReportingInterval()", "testcase": false, "constructor": false}, {"identifier": "getMoveToColdNodesAfterDays", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getMoveToColdNodesAfterDays()", "full_signature": "public Integer getMoveToColdNodesAfterDays()", "class_method_signature": "CorePlugin.getMoveToColdNodesAfterDays()", "testcase": false, "constructor": false}, {"identifier": "isOnlyLogElasticsearchMetricReports", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOnlyLogElasticsearchMetricReports()", "full_signature": "public boolean isOnlyLogElasticsearchMetricReports()", "class_method_signature": "CorePlugin.isOnlyLogElasticsearchMetricReports()", "testcase": false, "constructor": false}, {"identifier": "isDebugInstrumentation", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDebugInstrumentation()", "full_signature": "public boolean isDebugInstrumentation()", "class_method_signature": "CorePlugin.isDebugInstrumentation()", "testcase": false, "constructor": false}, {"identifier": "getExportClassesWithName", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getExportClassesWithName()", "full_signature": "public Collection<String> getExportClassesWithName()", "class_method_signature": "CorePlugin.getExportClassesWithName()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfReplicas", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getNumberOfReplicas()", "full_signature": "public Integer getNumberOfReplicas()", "class_method_signature": "CorePlugin.getNumberOfReplicas()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfShards", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getNumberOfShards()", "full_signature": "public Integer getNumberOfShards()", "class_method_signature": "CorePlugin.getNumberOfShards()", "testcase": false, "constructor": false}, {"identifier": "closeOnShutdown", "parameters": "(Closeable closeable)", "modifiers": "public", "return": "void", "signature": "void closeOnShutdown(Closeable closeable)", "full_signature": "public void closeOnShutdown(Closeable closeable)", "class_method_signature": "CorePlugin.closeOnShutdown(Closeable closeable)", "testcase": false, "constructor": false}, {"identifier": "getReporters", "parameters": "()", "modifiers": "", "return": "List<Closeable>", "signature": "List<Closeable> getReporters()", "full_signature": " List<Closeable> getReporters()", "class_method_signature": "CorePlugin.getReporters()", "testcase": false, "constructor": false}, {"identifier": "getRemotePropertiesConfigUrls", "parameters": "()", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> getRemotePropertiesConfigUrls()", "full_signature": "public List<URL> getRemotePropertiesConfigUrls()", "class_method_signature": "CorePlugin.getRemotePropertiesConfigUrls()", "testcase": false, "constructor": false}, {"identifier": "isDeactivateStagemonitorIfRemotePropertyServerIsDown", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDeactivateStagemonitorIfRemotePropertyServerIsDown()", "full_signature": "public boolean isDeactivateStagemonitorIfRemotePropertyServerIsDown()", "class_method_signature": "CorePlugin.isDeactivateStagemonitorIfRemotePropertyServerIsDown()", "testcase": false, "constructor": false}, {"identifier": "getDeleteElasticsearchMetricsAfterDays", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDeleteElasticsearchMetricsAfterDays()", "full_signature": "public int getDeleteElasticsearchMetricsAfterDays()", "class_method_signature": "CorePlugin.getDeleteElasticsearchMetricsAfterDays()", "testcase": false, "constructor": false}, {"identifier": "getMetricsIndexTemplate", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMetricsIndexTemplate()", "full_signature": "public String getMetricsIndexTemplate()", "class_method_signature": "CorePlugin.getMetricsIndexTemplate()", "testcase": false, "constructor": false}, {"identifier": "isMetricsIndexTemplateDefaultValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMetricsIndexTemplateDefaultValue()", "full_signature": "public boolean isMetricsIndexTemplateDefaultValue()", "class_method_signature": "CorePlugin.isMetricsIndexTemplateDefaultValue()", "testcase": false, "constructor": false}, {"identifier": "isInitializeElasticsearch", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInitializeElasticsearch()", "full_signature": "public boolean isInitializeElasticsearch()", "class_method_signature": "CorePlugin.isInitializeElasticsearch()", "testcase": false, "constructor": false}, {"identifier": "getHealthCheckRegistry", "parameters": "()", "modifiers": "public", "return": "HealthCheckRegistry", "signature": "HealthCheckRegistry getHealthCheckRegistry()", "full_signature": "public HealthCheckRegistry getHealthCheckRegistry()", "class_method_signature": "CorePlugin.getHealthCheckRegistry()", "testcase": false, "constructor": false}], "file": "stagemonitor-core/src/main/java/org/stagemonitor/core/CorePlugin.java"}, "focal_method": {"identifier": "getElasticsearchUrl", "parameters": "()", "modifiers": "public", "return": "URL", "body": "public URL getElasticsearchUrl() {\n\t\tfinal List<URL> urls = elasticsearchUrls.getValue();\n\t\tif (urls.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tfinal int index = accessesToElasticsearchUrl.getAndIncrement() % urls.size();\n\t\tURL elasticsearchURL = urls.get(index);\n\n\t\tfinal String defaultUsernameValue = elasticsearchDefaultUsername.getValue();\n\t\tfinal String defaultPasswordValue = elasticsearchDefaultPassword.getValue();\n\n\t\tif (elasticsearchURL.getUserInfo() == null\n\t\t\t\t&& ! defaultUsernameValue.isEmpty()\n\t\t\t\t&& ! defaultPasswordValue.isEmpty()) {\n\n\t\t\ttry {\n\t\t\t\tString username = URLEncoder.encode(defaultUsernameValue, \"UTF-8\");\n\t\t\t\tString password = URLEncoder.encode(defaultPasswordValue, \"UTF-8\");\n\t\t\t\tStringBuilder stringBuilder = new StringBuilder();\n\t\t\t\tstringBuilder\n\t\t\t\t\t\t.append(elasticsearchURL.getProtocol())\n\t\t\t\t\t\t.append(\"://\")\n\t\t\t\t\t\t.append(username)\n\t\t\t\t\t\t.append(\":\")\n\t\t\t\t\t\t.append(password)\n\t\t\t\t\t\t.append(\"@\")\n\t\t\t\t\t\t.append(elasticsearchURL.getHost())\n\t\t\t\t\t\t.append(\":\")\n\t\t\t\t\t\t.append(elasticsearchURL.getPort())\n\t\t\t\t\t\t.append(elasticsearchURL.getPath());\n\t\t\t\treturn new URL(stringBuilder.toString());\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(e.getMessage(), e);\n\t\t\t}\n\t\t}\n\n\t\treturn elasticsearchURL;\n\t}", "signature": "URL getElasticsearchUrl()", "full_signature": "public URL getElasticsearchUrl()", "class_method_signature": "CorePlugin.getElasticsearchUrl()", "testcase": false, "constructor": false, "invocations": ["getValue", "isEmpty", "getAndIncrement", "size", "get", "getValue", "getValue", "getUserInfo", "isEmpty", "isEmpty", "encode", "encode", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "getProtocol", "getHost", "getPort", "getPath", "toString", "error", "getMessage"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}