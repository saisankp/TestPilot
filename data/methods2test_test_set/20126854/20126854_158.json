{"test_class": {"identifier": "RandomAccessFileOutputStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RandomAccessFileOutputStream stream = null;", "modifier": "private", "type": "RandomAccessFileOutputStream", "declarator": "stream = null", "var_name": "stream"}, {"original_string": "private byte[] testData = null;", "modifier": "private", "type": "byte[]", "declarator": "testData = null", "var_name": "testData"}, {"original_string": "private File tempFile = null;", "modifier": "private", "type": "File", "declarator": "tempFile = null", "var_name": "tempFile"}], "file": "feya/libraries/archive_diff/diff.shared/src/test/java/com/google/archivepatcher/shared/RandomAccessFileOutputStreamTest.java"}, "test_case": {"identifier": "testWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWrite() throws IOException {\n    stream = new RandomAccessFileOutputStream(tempFile, 1L);\n    stream.write(7);\n    stream.flush();\n    stream.close();\n    FileInputStream in = null;\n    try {\n      in = new FileInputStream(tempFile);\n      Assert.assertEquals(7, in.read());\n    } finally {\n      try {\n        in.close();\n      } catch (Exception ignored) {\n        // Nothing\n      }\n    }\n  }", "signature": "void testWrite()", "full_signature": "@Test public void testWrite()", "class_method_signature": "RandomAccessFileOutputStreamTest.testWrite()", "testcase": true, "constructor": false, "invocations": ["write", "flush", "close", "assertEquals", "read", "close"]}, "focal_class": {"identifier": "RandomAccessFileOutputStream", "superclass": "extends OutputStream", "interfaces": "", "fields": [{"original_string": "private final RandomAccessFile raf;", "modifier": "private final", "type": "RandomAccessFile", "declarator": "raf", "var_name": "raf"}], "methods": [{"identifier": "RandomAccessFileOutputStream", "parameters": "(File outputFile, long expectedSize)", "modifiers": "public", "return": "", "signature": " RandomAccessFileOutputStream(File outputFile, long expectedSize)", "full_signature": "public  RandomAccessFileOutputStream(File outputFile, long expectedSize)", "class_method_signature": "RandomAccessFileOutputStream.RandomAccessFileOutputStream(File outputFile, long expectedSize)", "testcase": false, "constructor": true}, {"identifier": "getRandomAccessFile", "parameters": "(File file)", "modifiers": "protected", "return": "RandomAccessFile", "signature": "RandomAccessFile getRandomAccessFile(File file)", "full_signature": "protected RandomAccessFile getRandomAccessFile(File file)", "class_method_signature": "RandomAccessFileOutputStream.getRandomAccessFile(File file)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(int b)", "modifiers": "@Override public", "return": "void", "signature": "void write(int b)", "full_signature": "@Override public void write(int b)", "class_method_signature": "RandomAccessFileOutputStream.write(int b)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] b)", "modifiers": "@Override public", "return": "void", "signature": "void write(byte[] b)", "full_signature": "@Override public void write(byte[] b)", "class_method_signature": "RandomAccessFileOutputStream.write(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] b, int off, int len)", "modifiers": "@Override public", "return": "void", "signature": "void write(byte[] b, int off, int len)", "full_signature": "@Override public void write(byte[] b, int off, int len)", "class_method_signature": "RandomAccessFileOutputStream.write(byte[] b, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "RandomAccessFileOutputStream.flush()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RandomAccessFileOutputStream.close()", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.shared/src/main/java/com/google/archivepatcher/shared/RandomAccessFileOutputStream.java"}, "focal_method": {"identifier": "write", "parameters": "(int b)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void write(int b) throws IOException {\n    raf.write(b);\n  }", "signature": "void write(int b)", "full_signature": "@Override public void write(int b)", "class_method_signature": "RandomAccessFileOutputStream.write(int b)", "testcase": false, "constructor": false, "invocations": ["write"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}