{"test_class": {"identifier": "LonePairDiffTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "misc/diff/src/test/java/org/openscience/cdk/tools/diff/LonePairDiffTest.java"}, "test_case": {"identifier": "testDifference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDifference() {\n        IAtom carbon = mock(IAtom.class);\n        IAtom oxygen = mock(IAtom.class);\n\n        when(carbon.getSymbol()).thenReturn(\"C\");\n        when(oxygen.getSymbol()).thenReturn(\"O\");\n\n        ILonePair bond1 = mock(ILonePair.class);\n        ILonePair bond2 = mock(ILonePair.class);\n\n        when(bond1.getAtom()).thenReturn(carbon);\n        when(bond2.getAtom()).thenReturn(oxygen);\n\n        IDifference difference = LonePairDiff.difference(bond1, bond2);\n        Assert.assertNotNull(difference);\n    }", "signature": "void testDifference()", "full_signature": "@Test public void testDifference()", "class_method_signature": "LonePairDiffTest.testDifference()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getSymbol", "thenReturn", "when", "getSymbol", "mock", "mock", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "difference", "assertNotNull"]}, "focal_class": {"identifier": "LonePairDiff", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "LonePairDiff", "parameters": "()", "modifiers": "private", "return": "", "signature": " LonePairDiff()", "full_signature": "private  LonePairDiff()", "class_method_signature": "LonePairDiff.LonePairDiff()", "testcase": false, "constructor": true}, {"identifier": "diff", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "String", "signature": "String diff(IChemObject first, IChemObject second)", "full_signature": "public static String diff(IChemObject first, IChemObject second)", "class_method_signature": "LonePairDiff.diff(IChemObject first, IChemObject second)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "IDifference", "signature": "IDifference difference(IChemObject first, IChemObject second)", "full_signature": "public static IDifference difference(IChemObject first, IChemObject second)", "class_method_signature": "LonePairDiff.difference(IChemObject first, IChemObject second)", "testcase": false, "constructor": false}], "file": "misc/diff/src/main/java/org/openscience/cdk/tools/diff/LonePairDiff.java"}, "focal_method": {"identifier": "difference", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "IDifference", "body": "public static IDifference difference(IChemObject first, IChemObject second) {\n        if (!(first instanceof ILonePair && second instanceof ILonePair)) {\n            return null;\n        }\n        ILonePair firstB = (ILonePair) first;\n        ILonePair secondB = (ILonePair) second;\n        IDifferenceList totalDiff = new ChemObjectDifference(\"LonePairDiff\");\n        totalDiff.addChild(AtomDiff.difference(firstB.getAtom(), secondB.getAtom()));\n        totalDiff.addChild(ElectronContainerDiff.difference(first, second));\n        if (totalDiff.childCount() > 0) {\n            return totalDiff;\n        } else {\n            return null;\n        }\n    }", "signature": "IDifference difference(IChemObject first, IChemObject second)", "full_signature": "public static IDifference difference(IChemObject first, IChemObject second)", "class_method_signature": "LonePairDiff.difference(IChemObject first, IChemObject second)", "testcase": false, "constructor": false, "invocations": ["addChild", "difference", "getAtom", "getAtom", "addChild", "difference", "childCount"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}