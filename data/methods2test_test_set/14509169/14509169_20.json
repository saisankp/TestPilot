{"test_class": {"identifier": "SortTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/tdunning/math/stats/SortTest.java"}, "test_case": {"identifier": "testRandomized", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRandomized() {\n        Random rand = new Random();\n\n        for (int k = 0; k < 100; k++) {\n            int[] order = new int[30];\n            double[] values = new double[30];\n            for (int i = 0; i < 30; i++) {\n                values[i] = rand.nextDouble();\n            }\n\n            Sort.sort(order, values);\n            checkOrder(order, values);\n        }\n    }", "signature": "void testRandomized()", "full_signature": "@Test public void testRandomized()", "class_method_signature": "SortTest.testRandomized()", "testcase": true, "constructor": false, "invocations": ["nextDouble", "sort", "checkOrder"]}, "focal_class": {"identifier": "Sort", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Random prng = new Random();", "modifier": "private static final", "type": "Random", "declarator": "prng = new Random()", "var_name": "prng"}], "methods": [{"identifier": "sort", "parameters": "(int[] order, double[] values)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "void", "signature": "void sort(int[] order, double[] values)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static void sort(int[] order, double[] values)", "class_method_signature": "Sort.sort(int[] order, double[] values)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(int[] order, double[] values, int n)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "void", "signature": "void sort(int[] order, double[] values, int n)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static void sort(int[] order, double[] values, int n)", "class_method_signature": "Sort.sort(int[] order, double[] values, int n)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(int[] order, double[] values, int start, int n)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "void", "signature": "void sort(int[] order, double[] values, int start, int n)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static void sort(int[] order, double[] values, int start, int n)", "class_method_signature": "Sort.sort(int[] order, double[] values, int start, int n)", "testcase": false, "constructor": false}, {"identifier": "quickSort", "parameters": "(int[] order, double[] values, int start, int end, int limit)", "modifiers": "private static", "return": "void", "signature": "void quickSort(int[] order, double[] values, int start, int end, int limit)", "full_signature": "private static void quickSort(int[] order, double[] values, int start, int end, int limit)", "class_method_signature": "Sort.quickSort(int[] order, double[] values, int start, int end, int limit)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(double[] key, double[] ... values)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "void", "signature": "void sort(double[] key, double[] ... values)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static void sort(double[] key, double[] ... values)", "class_method_signature": "Sort.sort(double[] key, double[] ... values)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(double[] key, int start, int n, double[]... values)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "void", "signature": "void sort(double[] key, int start, int n, double[]... values)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static void sort(double[] key, int start, int n, double[]... values)", "class_method_signature": "Sort.sort(double[] key, int start, int n, double[]... values)", "testcase": false, "constructor": false}, {"identifier": "quickSort", "parameters": "(double[] key, double[][] values, int start, int end, int limit)", "modifiers": "private static", "return": "void", "signature": "void quickSort(double[] key, double[][] values, int start, int end, int limit)", "full_signature": "private static void quickSort(double[] key, double[][] values, int start, int end, int limit)", "class_method_signature": "Sort.quickSort(double[] key, double[][] values, int start, int end, int limit)", "testcase": false, "constructor": false}, {"identifier": "insertionSort", "parameters": "(double[] key, double[][] values, int start, int end, int limit)", "modifiers": "@SuppressWarnings(\"SameParameterValue\") private static", "return": "void", "signature": "void insertionSort(double[] key, double[][] values, int start, int end, int limit)", "full_signature": "@SuppressWarnings(\"SameParameterValue\") private static void insertionSort(double[] key, double[][] values, int start, int end, int limit)", "class_method_signature": "Sort.insertionSort(double[] key, double[][] values, int start, int end, int limit)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(int[] order, int i, int j)", "modifiers": "private static", "return": "void", "signature": "void swap(int[] order, int i, int j)", "full_signature": "private static void swap(int[] order, int i, int j)", "class_method_signature": "Sort.swap(int[] order, int i, int j)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(int i, int j, double[] key, double[]...values)", "modifiers": "private static", "return": "void", "signature": "void swap(int i, int j, double[] key, double[]...values)", "full_signature": "private static void swap(int i, int j, double[] key, double[]...values)", "class_method_signature": "Sort.swap(int i, int j, double[] key, double[]...values)", "testcase": false, "constructor": false}, {"identifier": "checkPartition", "parameters": "(int[] order, double[] values, double pivotValue, int start, int low, int high, int end)", "modifiers": "@SuppressWarnings(\"UnusedDeclaration\") public static", "return": "void", "signature": "void checkPartition(int[] order, double[] values, double pivotValue, int start, int low, int high, int end)", "full_signature": "@SuppressWarnings(\"UnusedDeclaration\") public static void checkPartition(int[] order, double[] values, double pivotValue, int start, int low, int high, int end)", "class_method_signature": "Sort.checkPartition(int[] order, double[] values, double pivotValue, int start, int low, int high, int end)", "testcase": false, "constructor": false}, {"identifier": "insertionSort", "parameters": "(int[] order, double[] values, int start, int n, int limit)", "modifiers": "@SuppressWarnings(\"SameParameterValue\") private static", "return": "void", "signature": "void insertionSort(int[] order, double[] values, int start, int n, int limit)", "full_signature": "@SuppressWarnings(\"SameParameterValue\") private static void insertionSort(int[] order, double[] values, int start, int n, int limit)", "class_method_signature": "Sort.insertionSort(int[] order, double[] values, int start, int n, int limit)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(int[] order)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "void", "signature": "void reverse(int[] order)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static void reverse(int[] order)", "class_method_signature": "Sort.reverse(int[] order)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(int[] order, int offset, int length)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "void", "signature": "void reverse(int[] order, int offset, int length)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static void reverse(int[] order, int offset, int length)", "class_method_signature": "Sort.reverse(int[] order, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(double[] order, int offset, int length)", "modifiers": "@SuppressWarnings({\"WeakerAccess\", \"SameParameterValue\"}) public static", "return": "void", "signature": "void reverse(double[] order, int offset, int length)", "full_signature": "@SuppressWarnings({\"WeakerAccess\", \"SameParameterValue\"}) public static void reverse(double[] order, int offset, int length)", "class_method_signature": "Sort.reverse(double[] order, int offset, int length)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tdunning/math/stats/Sort.java"}, "focal_method": {"identifier": "sort", "parameters": "(int[] order, double[] values)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "void", "body": "@SuppressWarnings(\"WeakerAccess\")\n    public static void sort(int[] order, double[] values) {\n        sort(order, values, 0, values.length);\n    }", "signature": "void sort(int[] order, double[] values)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static void sort(int[] order, double[] values)", "class_method_signature": "Sort.sort(int[] order, double[] values)", "testcase": false, "constructor": false, "invocations": ["sort"]}, "repository": {"repo_id": 14509169, "url": "https://github.com/tdunning/t-digest", "language": "Java", "is_fork": false, "fork_count": 170, "stargazer_count": 1212, "size": 41644, "license": "licensed"}}