{"test_class": {"identifier": "SimpleGenotypeRepresentationFactoryTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected ObjectiveFunction function;", "modifier": "protected", "type": "ObjectiveFunction", "declarator": "function", "var_name": "function"}, {"original_string": "protected SimpleGenotypeRepresentationFactory factory;", "modifier": "protected", "type": "SimpleGenotypeRepresentationFactory", "declarator": "factory", "var_name": "factory"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/factories/representation/SimpleGenotypeRepresentationFactoryTest.java"}, "test_case": {"identifier": "testSetFunction2", "parameters": "()", "modifiers": "@Test // tests fixed precision public", "return": "void", "body": "@Test\n    // tests fixed precision\n    public void testSetFunction2() throws Exception {\n        this.factory.setEncodingType(EncodingType.FixedPrecision);\n        this.factory.setFixedPrecision(1.0);\n        this.factory.setFixedLength(16); // dummy on purpose\n        this.factory.setFunction(this.function);\n        SimpleBinaryGenomeDescriptor descriptor = this.factory.descriptor;\n\n        assertEquals(function.getDimension(), descriptor.getNumVariables());\n        Assert.assertArrayEquals(function.getMinimum(), descriptor.getVariablesLowerBounds(), 0.0);\n        Assert.assertArrayEquals(new int[]{4, 37, 339}, descriptor.getVariablesLengths());\n        Assert.assertArrayEquals(new double[]{1, 1, 1}, descriptor.getVariablesPrecisions(), 0.00000000001);\n    }", "signature": "void testSetFunction2()", "full_signature": "@Test // tests fixed precision public void testSetFunction2()", "class_method_signature": "SimpleGenotypeRepresentationFactoryTest.testSetFunction2()", "testcase": true, "constructor": false, "invocations": ["setEncodingType", "setFixedPrecision", "setFixedLength", "setFunction", "assertEquals", "getDimension", "getNumVariables", "assertArrayEquals", "getMinimum", "getVariablesLowerBounds", "assertArrayEquals", "getVariablesLengths", "assertArrayEquals", "getVariablesPrecisions"]}, "focal_class": {"identifier": "SimpleGenotypeRepresentationFactory", "superclass": "extends AbstractGenotypeRepresentationFactory", "interfaces": "", "fields": [{"original_string": "@Property(name = \"Genotype coding type\")\n    protected CodeType codeType = CodeType.BinaryCode;", "modifier": "@Property(name = \"Genotype coding type\")\n    protected", "type": "CodeType", "declarator": "codeType = CodeType.BinaryCode", "var_name": "codeType"}, {"original_string": "protected ObjectiveFunction function;", "modifier": "protected", "type": "ObjectiveFunction", "declarator": "function", "var_name": "function"}, {"original_string": "protected SimpleBinaryGenomeDescriptor descriptor = new SimpleBinaryGenomeDescriptor();", "modifier": "protected", "type": "SimpleBinaryGenomeDescriptor", "declarator": "descriptor = new SimpleBinaryGenomeDescriptor()", "var_name": "descriptor"}, {"original_string": "protected static double LN2 = Math.log(2);", "modifier": "protected static", "type": "double", "declarator": "LN2 = Math.log(2)", "var_name": "LN2"}], "methods": [{"identifier": "SimpleGenotypeRepresentationFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleGenotypeRepresentationFactory()", "full_signature": "public  SimpleGenotypeRepresentationFactory()", "class_method_signature": "SimpleGenotypeRepresentationFactory.SimpleGenotypeRepresentationFactory()", "testcase": false, "constructor": true}, {"identifier": "createRepresentation", "parameters": "(double[] position)", "modifiers": "public", "return": "Representation", "signature": "Representation createRepresentation(double[] position)", "full_signature": "public Representation createRepresentation(double[] position)", "class_method_signature": "SimpleGenotypeRepresentationFactory.createRepresentation(double[] position)", "testcase": false, "constructor": false}, {"identifier": "createBinaryRepresentation", "parameters": "()", "modifiers": "protected", "return": "GenotypeRepresentation", "signature": "GenotypeRepresentation createBinaryRepresentation()", "full_signature": "protected GenotypeRepresentation createBinaryRepresentation()", "class_method_signature": "SimpleGenotypeRepresentationFactory.createBinaryRepresentation()", "testcase": false, "constructor": false}, {"identifier": "createGrayCodeRepresentation", "parameters": "()", "modifiers": "protected", "return": "GenotypeRepresentation", "signature": "GenotypeRepresentation createGrayCodeRepresentation()", "full_signature": "protected GenotypeRepresentation createGrayCodeRepresentation()", "class_method_signature": "SimpleGenotypeRepresentationFactory.createGrayCodeRepresentation()", "testcase": false, "constructor": false}, {"identifier": "setFunction", "parameters": "(ObjectiveFunction function)", "modifiers": "public", "return": "void", "signature": "void setFunction(ObjectiveFunction function)", "full_signature": "public void setFunction(ObjectiveFunction function)", "class_method_signature": "SimpleGenotypeRepresentationFactory.setFunction(ObjectiveFunction function)", "testcase": false, "constructor": false}, {"identifier": "processFixedLengthEncoding", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void processFixedLengthEncoding()", "full_signature": "protected void processFixedLengthEncoding()", "class_method_signature": "SimpleGenotypeRepresentationFactory.processFixedLengthEncoding()", "testcase": false, "constructor": false}, {"identifier": "processFixedPrecisionEncoding", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void processFixedPrecisionEncoding()", "full_signature": "protected void processFixedPrecisionEncoding()", "class_method_signature": "SimpleGenotypeRepresentationFactory.processFixedPrecisionEncoding()", "testcase": false, "constructor": false}, {"identifier": "getRepresentationType", "parameters": "()", "modifiers": "public", "return": "Class<? extends Representation>", "signature": "Class<? extends Representation> getRepresentationType()", "full_signature": "public Class<? extends Representation> getRepresentationType()", "class_method_signature": "SimpleGenotypeRepresentationFactory.getRepresentationType()", "testcase": false, "constructor": false}, {"identifier": "getCodeType", "parameters": "()", "modifiers": "public", "return": "CodeType", "signature": "CodeType getCodeType()", "full_signature": "public CodeType getCodeType()", "class_method_signature": "SimpleGenotypeRepresentationFactory.getCodeType()", "testcase": false, "constructor": false}, {"identifier": "setCodeType", "parameters": "(CodeType codeType)", "modifiers": "public", "return": "void", "signature": "void setCodeType(CodeType codeType)", "full_signature": "public void setCodeType(CodeType codeType)", "class_method_signature": "SimpleGenotypeRepresentationFactory.setCodeType(CodeType codeType)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/factories/representation/SimpleGenotypeRepresentationFactory.java"}, "focal_method": {"identifier": "setFunction", "parameters": "(ObjectiveFunction function)", "modifiers": "public", "return": "void", "body": "public void setFunction(ObjectiveFunction function) {\n        this.function = function;\n        this.descriptor.setNumVariables(function.getDimension());\n        this.descriptor.setVariablesLowerBounds(function.getMinimum());\n        // initialize empty data\n        this.descriptor.setVariablesLengths(new int[function.getDimension()]);\n        this.descriptor.setVariablesPrecisions(new double[function.getDimension()]);\n        switch (this.encodingType){\n            case FixedLength:\n                processFixedLengthEncoding();\n                break;\n            case FixedPrecision:\n                processFixedPrecisionEncoding();\n                break;\n        }\n    }", "signature": "void setFunction(ObjectiveFunction function)", "full_signature": "public void setFunction(ObjectiveFunction function)", "class_method_signature": "SimpleGenotypeRepresentationFactory.setFunction(ObjectiveFunction function)", "testcase": false, "constructor": false, "invocations": ["setNumVariables", "getDimension", "setVariablesLowerBounds", "getMinimum", "setVariablesLengths", "getDimension", "setVariablesPrecisions", "getDimension", "processFixedLengthEncoding", "processFixedPrecisionEncoding"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}