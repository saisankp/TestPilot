{"test_class": {"identifier": "ItemComparatorTest", "superclass": "extends AbstractUnitTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(ItemComparatorTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(ItemComparatorTest.class)", "var_name": "log"}, {"original_string": "protected CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();", "modifier": "protected", "type": "CommunityService", "declarator": "communityService = ContentServiceFactory.getInstance().getCommunityService()", "var_name": "communityService"}, {"original_string": "protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();", "modifier": "protected", "type": "CollectionService", "declarator": "collectionService = ContentServiceFactory.getInstance().getCollectionService()", "var_name": "collectionService"}, {"original_string": "private ItemService itemService = ContentServiceFactory.getInstance().getItemService();", "modifier": "private", "type": "ItemService", "declarator": "itemService = ContentServiceFactory.getInstance().getItemService()", "var_name": "itemService"}, {"original_string": "protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();", "modifier": "protected", "type": "WorkspaceItemService", "declarator": "workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService()", "var_name": "workspaceItemService"}, {"original_string": "protected InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();", "modifier": "protected", "type": "InstallItemService", "declarator": "installItemService = ContentServiceFactory.getInstance().getInstallItemService()", "var_name": "installItemService"}, {"original_string": "protected MetadataSchemaService metadataSchemaService = ContentServiceFactory.getInstance().getMetadataSchemaService();", "modifier": "protected", "type": "MetadataSchemaService", "declarator": "metadataSchemaService = ContentServiceFactory.getInstance().getMetadataSchemaService()", "var_name": "metadataSchemaService"}, {"original_string": "protected MetadataFieldService metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService();", "modifier": "protected", "type": "MetadataFieldService", "declarator": "metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService()", "var_name": "metadataFieldService"}, {"original_string": "private MetadataValueService metadataValueService = ContentServiceFactory.getInstance().getMetadataValueService();", "modifier": "private", "type": "MetadataValueService", "declarator": "metadataValueService = ContentServiceFactory.getInstance().getMetadataValueService()", "var_name": "metadataValueService"}, {"original_string": "private Item one;", "modifier": "private", "type": "Item", "declarator": "one", "var_name": "one"}, {"original_string": "private Item two;", "modifier": "private", "type": "Item", "declarator": "two", "var_name": "two"}, {"original_string": "private Collection collection;", "modifier": "private", "type": "Collection", "declarator": "collection", "var_name": "collection"}, {"original_string": "private Community owningCommunity;", "modifier": "private", "type": "Community", "declarator": "owningCommunity", "var_name": "owningCommunity"}, {"original_string": "private MetadataField metadataField;", "modifier": "private", "type": "MetadataField", "declarator": "metadataField", "var_name": "metadataField"}], "file": "dspace-api/src/test/java/org/dspace/content/ItemComparatorTest.java"}, "test_case": {"identifier": "testCompare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompare() throws SQLException {\n        int result = 0;\n        ItemComparator ic = null;\n\n        //one of the tiems has no value\n        ic = new ItemComparator(\"test\", \"one\", Item.ANY, true);\n        result = ic.compare(one, two);\n        assertTrue(\"testCompare 0\",result == 0);\n\n        ic = new ItemComparator(\"test\", \"one\", Item.ANY, true);\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        result = ic.compare(one, two);\n        assertTrue(\"testCompare 1\",result >= 1);\n        itemService.clearMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY);\n        \n        ic = new ItemComparator(\"test\", \"one\", Item.ANY, true);\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"1\");        \n        result = ic.compare(one, two);\n        assertTrue(\"testCompare 2\",result <= -1);\n        itemService.clearMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY);\n        \n        //value in both items\n        ic = new ItemComparator(\"test\", \"one\", Item.ANY, true);\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"2\");\n        result = ic.compare(one, two);\n        assertTrue(\"testCompare 3\",result <= -1);\n        itemService.clearMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY);\n        itemService.clearMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY);\n        \n        ic = new ItemComparator(\"test\", \"one\", Item.ANY, true);\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        result = ic.compare(one, two);\n        assertTrue(\"testCompare 4\",result == 0);\n        itemService.clearMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY);\n        itemService.clearMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY);\n        \n        ic = new ItemComparator(\"test\", \"one\", Item.ANY, true);\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"2\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        result = ic.compare(one, two);\n        assertTrue(\"testCompare 5\",result >= 1);\n        itemService.clearMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY);\n        itemService.clearMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY);\n\n        //multiple values (min, max)\n        ic = new ItemComparator(\"test\", \"one\", Item.ANY, true);\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"0\");\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"2\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"3\");\n        result = ic.compare(one, two);\n        assertTrue(\"testCompare 3\",result <= -1);\n        itemService.clearMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY);\n        itemService.clearMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY);\n\n        ic = new ItemComparator(\"test\", \"one\", Item.ANY, true);\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"0\");\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"-1\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        result = ic.compare(one, two);\n        assertTrue(\"testCompare 4\",result == 0);\n        itemService.clearMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY);\n        itemService.clearMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY);\n\n        ic = new ItemComparator(\"test\", \"one\", Item.ANY, true);\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"2\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"-1\");\n        result = ic.compare(one, two);\n        assertTrue(\"testCompare 5\",result >= 1);\n        itemService.clearMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY);\n        itemService.clearMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY);\n\n        ic = new ItemComparator(\"test\", \"one\", Item.ANY, false);\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"2\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"2\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"3\");\n        result = ic.compare(one, two);\n        assertTrue(\"testCompare 3\",result <= -1);\n        itemService.clearMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY);\n        itemService.clearMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY);\n\n        ic = new ItemComparator(\"test\", \"one\", Item.ANY, false);\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"2\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"5\");\n        result = ic.compare(one, two);\n        assertTrue(\"testCompare 4\",result == 0);\n        itemService.clearMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY);\n        itemService.clearMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY);\n\n        ic = new ItemComparator(\"test\", \"one\", Item.ANY, false);\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"2\");\n        itemService.addMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY, \"3\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"1\");\n        itemService.addMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY, \"4\");\n        result = ic.compare(one, two);\n        assertTrue(\"testCompare 5\",result >= 1);\n        itemService.clearMetadata(context, one, \"dc\", \"test\", \"one\", Item.ANY);\n        itemService.clearMetadata(context, two, \"dc\", \"test\", \"one\", Item.ANY);\n    }", "signature": "void testCompare()", "full_signature": "@Test public void testCompare()", "class_method_signature": "ItemComparatorTest.testCompare()", "testcase": true, "constructor": false, "invocations": ["compare", "assertTrue", "addMetadata", "compare", "assertTrue", "clearMetadata", "addMetadata", "compare", "assertTrue", "clearMetadata", "addMetadata", "addMetadata", "compare", "assertTrue", "clearMetadata", "clearMetadata", "addMetadata", "addMetadata", "compare", "assertTrue", "clearMetadata", "clearMetadata", "addMetadata", "addMetadata", "compare", "assertTrue", "clearMetadata", "clearMetadata", "addMetadata", "addMetadata", "addMetadata", "addMetadata", "compare", "assertTrue", "clearMetadata", "clearMetadata", "addMetadata", "addMetadata", "addMetadata", "addMetadata", "compare", "assertTrue", "clearMetadata", "clearMetadata", "addMetadata", "addMetadata", "addMetadata", "addMetadata", "compare", "assertTrue", "clearMetadata", "clearMetadata", "addMetadata", "addMetadata", "addMetadata", "addMetadata", "compare", "assertTrue", "clearMetadata", "clearMetadata", "addMetadata", "addMetadata", "addMetadata", "addMetadata", "compare", "assertTrue", "clearMetadata", "clearMetadata", "addMetadata", "addMetadata", "addMetadata", "addMetadata", "compare", "assertTrue", "clearMetadata", "clearMetadata"]}, "focal_class": {"identifier": "ItemComparator", "superclass": "", "interfaces": "implements Comparator, Serializable", "fields": [{"original_string": "protected String element;", "modifier": "protected", "type": "String", "declarator": "element", "var_name": "element"}, {"original_string": "protected String qualifier;", "modifier": "protected", "type": "String", "declarator": "qualifier", "var_name": "qualifier"}, {"original_string": "protected String language;", "modifier": "protected", "type": "String", "declarator": "language", "var_name": "language"}, {"original_string": "protected boolean max;", "modifier": "protected", "type": "boolean", "declarator": "max", "var_name": "max"}, {"original_string": "protected transient ItemService itemService\n            = ContentServiceFactory.getInstance().getItemService();", "modifier": "protected transient", "type": "ItemService", "declarator": "itemService\n            = ContentServiceFactory.getInstance().getItemService()", "var_name": "itemService"}], "methods": [{"identifier": "ItemComparator", "parameters": "(String element, String qualifier, String language,\n            boolean max)", "modifiers": "public", "return": "", "signature": " ItemComparator(String element, String qualifier, String language,\n            boolean max)", "full_signature": "public  ItemComparator(String element, String qualifier, String language,\n            boolean max)", "class_method_signature": "ItemComparator.ItemComparator(String element, String qualifier, String language,\n            boolean max)", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(Object first, Object second)", "modifiers": "@Override public", "return": "int", "signature": "int compare(Object first, Object second)", "full_signature": "@Override public int compare(Object first, Object second)", "class_method_signature": "ItemComparator.compare(Object first, Object second)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ItemComparator.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ItemComparator.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equalsWithNull", "parameters": "(String first, String second)", "modifiers": "protected", "return": "boolean", "signature": "boolean equalsWithNull(String first, String second)", "full_signature": "protected boolean equalsWithNull(String first, String second)", "class_method_signature": "ItemComparator.equalsWithNull(String first, String second)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Item item)", "modifiers": "protected", "return": "String", "signature": "String getValue(Item item)", "full_signature": "protected String getValue(Item item)", "class_method_signature": "ItemComparator.getValue(Item item)", "testcase": false, "constructor": false}, {"identifier": "normalizeTitle", "parameters": "(MetadataValue value)", "modifiers": "protected", "return": "String", "signature": "String normalizeTitle(MetadataValue value)", "full_signature": "protected String normalizeTitle(MetadataValue value)", "class_method_signature": "ItemComparator.normalizeTitle(MetadataValue value)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/content/ItemComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(Object first, Object second)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compare(Object first, Object second)\n    {\n        if ((!(first instanceof Item)) || (!(second instanceof Item)))\n        {\n            throw new IllegalArgumentException(\"Arguments must be Items\");\n        }\n\n        // Retrieve a chosen value from the array for comparison\n        String firstValue = getValue((Item) first);\n        String secondValue = getValue((Item) second);\n\n        if (firstValue == null && secondValue == null)\n        {\n            return 0;\n        }\n\n        if (firstValue == null)\n        {\n            return -1;\n        }\n\n        if (secondValue == null)\n        {\n            return 1;\n        }\n\n        // See the javadoc for java.lang.String for an explanation\n        // of the return value.\n        return firstValue.compareTo(secondValue);\n    }", "signature": "int compare(Object first, Object second)", "full_signature": "@Override public int compare(Object first, Object second)", "class_method_signature": "ItemComparator.compare(Object first, Object second)", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue", "compareTo"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}