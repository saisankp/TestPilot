{"test_class": {"identifier": "MetaUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/apache/iotdb/db/metadata/MetaUtilsTest.java"}, "test_case": {"identifier": "testSplitPathToNodes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSplitPathToNodes() throws IllegalPathException {\n    assertEquals(Arrays.asList(\"root\", \"sg\", \"d1\", \"s1\").toArray(),\n        MetaUtils.splitPathToDetachedPath(\"root.sg.d1.s1\"));\n\n    assertEquals(Arrays.asList(\"root\", \"sg\", \"d1\", \"\\\"s.1\\\"\").toArray(),\n        MetaUtils.splitPathToDetachedPath(\"root.sg.d1.\\\"s.1\\\"\"));\n\n    assertEquals(Arrays.asList(\"root\", \"sg\", \"d1\", \"\\\"s\\\\\\\".1\\\"\").toArray(),\n        MetaUtils.splitPathToDetachedPath(\"root.sg.d1.\\\"s\\\\\\\".1\\\"\"));\n\n    assertEquals(Arrays.asList(\"root\", \"\\\"s g\\\"\", \"d1\", \"\\\"s.1\\\"\").toArray(),\n        MetaUtils.splitPathToDetachedPath(\"root.\\\"s g\\\".d1.\\\"s.1\\\"\"));\n\n    assertEquals(Arrays.asList(\"root\", \"\\\"s g\\\"\", \"\\\"d_.1\\\"\", \"\\\"s.1.1\\\"\").toArray(),\n        MetaUtils.splitPathToDetachedPath(\"root.\\\"s g\\\".\\\"d_.1\\\".\\\"s.1.1\\\"\"));\n\n    assertEquals(Arrays.asList(\"root\", \"1\").toArray(), MetaUtils.splitPathToDetachedPath(\"root.1\"));\n\n    assertEquals(Arrays.asList(\"root\", \"sg\", \"d1\", \"s\", \"1\").toArray(),\n        MetaUtils.splitPathToDetachedPath(\"root.sg.d1.s.1\"));\n\n    try {\n      MetaUtils.splitPathToDetachedPath(\"root.sg.\\\"d.1\\\"\\\"s.1\\\"\");\n    } catch (IllegalPathException e) {\n      Assert.assertTrue(e.getMessage().contains(\"Illegal path: \"));\n    }\n\n    try {\n      MetaUtils.splitPathToDetachedPath(\"root.sg.d1.\\'s1\\'\");\n    } catch (IllegalPathException e) {\n      Assert.assertTrue(e.getMessage().contains(\"Illegal path with single quote: \"));\n    }\n  }", "signature": "void testSplitPathToNodes()", "full_signature": "@Test public void testSplitPathToNodes()", "class_method_signature": "MetaUtilsTest.testSplitPathToNodes()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toArray", "asList", "splitPathToDetachedPath", "assertEquals", "toArray", "asList", "splitPathToDetachedPath", "assertEquals", "toArray", "asList", "splitPathToDetachedPath", "assertEquals", "toArray", "asList", "splitPathToDetachedPath", "assertEquals", "toArray", "asList", "splitPathToDetachedPath", "assertEquals", "toArray", "asList", "splitPathToDetachedPath", "assertEquals", "toArray", "asList", "splitPathToDetachedPath", "splitPathToDetachedPath", "assertTrue", "contains", "getMessage", "splitPathToDetachedPath", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "MetaUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "MetaUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " MetaUtils()", "full_signature": "private  MetaUtils()", "class_method_signature": "MetaUtils.MetaUtils()", "testcase": false, "constructor": true}, {"identifier": "getNodeRegByIdx", "parameters": "(int idx, String[] nodes)", "modifiers": "static", "return": "String", "signature": "String getNodeRegByIdx(int idx, String[] nodes)", "full_signature": "static String getNodeRegByIdx(int idx, String[] nodes)", "class_method_signature": "MetaUtils.getNodeRegByIdx(int idx, String[] nodes)", "testcase": false, "constructor": false}, {"identifier": "splitPathToDetachedPath", "parameters": "(String path)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitPathToDetachedPath(String path)", "full_signature": "public static String[] splitPathToDetachedPath(String path)", "class_method_signature": "MetaUtils.splitPathToDetachedPath(String path)", "testcase": false, "constructor": false}, {"identifier": "getStorageGroupPathByLevel", "parameters": "(PartialPath path, int level)", "modifiers": "static", "return": "PartialPath", "signature": "PartialPath getStorageGroupPathByLevel(PartialPath path, int level)", "full_signature": "static PartialPath getStorageGroupPathByLevel(PartialPath path, int level)", "class_method_signature": "MetaUtils.getStorageGroupPathByLevel(PartialPath path, int level)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/metadata/MetaUtils.java"}, "focal_method": {"identifier": "splitPathToDetachedPath", "parameters": "(String path)", "modifiers": "public static", "return": "String[]", "body": "public static String[] splitPathToDetachedPath(String path) throws IllegalPathException {\n    List<String> nodes = new ArrayList<>();\n    int startIndex = 0;\n    for (int i = 0; i < path.length(); i++) {\n      if (path.charAt(i) == IoTDBConstant.PATH_SEPARATOR) {\n        nodes.add(path.substring(startIndex, i));\n        startIndex = i + 1;\n      } else if (path.charAt(i) == '\"') {\n        int endIndex = path.indexOf('\"', i + 1);\n        // if a double quotes with escape character\n        while (endIndex != -1 && path.charAt(endIndex - 1) == '\\\\') {\n          endIndex = path.indexOf('\"', endIndex + 1);\n        }\n        if (endIndex != -1 && (endIndex == path.length() - 1 || path.charAt(endIndex + 1) == '.')) {\n          nodes.add(path.substring(startIndex, endIndex + 1));\n          i = endIndex + 1;\n          startIndex = endIndex + 2;\n        } else {\n          throw new IllegalPathException(\"Illegal path: \" + path);\n        }\n      } else if (path.charAt(i) == '\\'') {\n        throw new IllegalPathException(\"Illegal path with single quote: \" + path);\n      }\n    }\n    if (startIndex <= path.length() - 1) {\n      nodes.add(path.substring(startIndex));\n    }\n    return nodes.toArray(new String[0]);\n  }", "signature": "String[] splitPathToDetachedPath(String path)", "full_signature": "public static String[] splitPathToDetachedPath(String path)", "class_method_signature": "MetaUtils.splitPathToDetachedPath(String path)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "add", "substring", "charAt", "indexOf", "charAt", "indexOf", "length", "charAt", "add", "substring", "charAt", "length", "add", "substring", "toArray"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}