{"test_class": {"identifier": "JeuTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Jeu testDuJeu;", "modifier": "private", "type": "Jeu", "declarator": "testDuJeu", "var_name": "testDuJeu"}], "file": "moteur/src/test/java/moteur/JeuTest.java"}, "test_case": {"identifier": "testJouerAction", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testJouerAction() {\n        testDuJeu.distributionCarte();\n\n        Action ja = new Action(PoserCarte, 0, 2);\n\n        int prevSize = testDuJeu.getJoueurs().get(0).getDeckMain().size();\n        assertNotEquals(null, testDuJeu.jouerAction(ja));\n        int afterSize = testDuJeu.getJoueurs().get(0).getDeckMain().size();\n        assertEquals(afterSize, prevSize - 1);\n\n        ja = new Action(DefausserCarte, 1, 0);\n\n        assertNotEquals(null, testDuJeu.jouerAction(ja));\n\n        prevSize = testDuJeu.getJoueurs().get(1).getDeckMain().size();\n        int prevPiece = testDuJeu.getJoueurs().get(1).getPiece();\n        assertNotEquals(null, testDuJeu.jouerAction(ja));\n        afterSize = testDuJeu.getJoueurs().get(1).getDeckMain().size();\n        int afterPiece = testDuJeu.getJoueurs().get(1).getPiece();\n        assertEquals(afterSize, prevSize - 1);\n        assertEquals(prevPiece + 3, afterPiece);\n    }", "signature": "void testJouerAction()", "full_signature": "@Test public final void testJouerAction()", "class_method_signature": "JeuTest.testJouerAction()", "testcase": true, "constructor": false, "invocations": ["distributionCarte", "size", "getDeckMain", "get", "getJoueurs", "assertNotEquals", "jouerAction", "size", "getDeckMain", "get", "getJoueurs", "assertEquals", "assertNotEquals", "jouerAction", "size", "getDeckMain", "get", "getJoueurs", "getPiece", "get", "getJoueurs", "assertNotEquals", "jouerAction", "size", "getDeckMain", "get", "getJoueurs", "getPiece", "get", "getJoueurs", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "Jeu", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ArrayList<Joueur> mesJoueurs;", "modifier": "private", "type": "ArrayList<Joueur>", "declarator": "mesJoueurs", "var_name": "mesJoueurs"}, {"original_string": "private final ArrayList<ArrayList<Carte>> tabDeck = new ArrayList<ArrayList<Carte>>(3);", "modifier": "private final", "type": "ArrayList<ArrayList<Carte>>", "declarator": "tabDeck = new ArrayList<ArrayList<Carte>>(3)", "var_name": "tabDeck"}, {"original_string": "private int age = 1, tour = 1;", "modifier": "private", "type": "int", "declarator": "age = 1", "var_name": "age"}], "methods": [{"identifier": "Jeu", "parameters": "(int nbJoueurs)", "modifiers": "public", "return": "", "signature": " Jeu(int nbJoueurs)", "full_signature": "public  Jeu(int nbJoueurs)", "class_method_signature": "Jeu.Jeu(int nbJoueurs)", "testcase": false, "constructor": true}, {"identifier": "getTour", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getTour()", "full_signature": "public final int getTour()", "class_method_signature": "Jeu.getTour()", "testcase": false, "constructor": false}, {"identifier": "getAge", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getAge()", "full_signature": "public final int getAge()", "class_method_signature": "Jeu.getAge()", "testcase": false, "constructor": false}, {"identifier": "getDecks", "parameters": "()", "modifiers": "public final", "return": "ArrayList<ArrayList<Carte>>", "signature": "ArrayList<ArrayList<Carte>> getDecks()", "full_signature": "public final ArrayList<ArrayList<Carte>> getDecks()", "class_method_signature": "Jeu.getDecks()", "testcase": false, "constructor": false}, {"identifier": "getTailleDeck", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getTailleDeck()", "full_signature": "public final int getTailleDeck()", "class_method_signature": "Jeu.getTailleDeck()", "testcase": false, "constructor": false}, {"identifier": "getDeckPrincipal", "parameters": "()", "modifiers": "public final", "return": "ArrayList<Carte>", "signature": "ArrayList<Carte> getDeckPrincipal()", "full_signature": "public final ArrayList<Carte> getDeckPrincipal()", "class_method_signature": "Jeu.getDeckPrincipal()", "testcase": false, "constructor": false}, {"identifier": "getJoueurs", "parameters": "()", "modifiers": "public final", "return": "ArrayList<Joueur>", "signature": "ArrayList<Joueur> getJoueurs()", "full_signature": "public final ArrayList<Joueur> getJoueurs()", "class_method_signature": "Jeu.getJoueurs()", "testcase": false, "constructor": false}, {"identifier": "tourSuivant", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void tourSuivant()", "full_signature": "public final void tourSuivant()", "class_method_signature": "Jeu.tourSuivant()", "testcase": false, "constructor": false}, {"identifier": "initCartes", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void initCartes()", "full_signature": "public final void initCartes()", "class_method_signature": "Jeu.initCartes()", "testcase": false, "constructor": false}, {"identifier": "roulementCarte", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void roulementCarte()", "full_signature": "public final void roulementCarte()", "class_method_signature": "Jeu.roulementCarte()", "testcase": false, "constructor": false}, {"identifier": "distributionCarte", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void distributionCarte()", "full_signature": "public final void distributionCarte()", "class_method_signature": "Jeu.distributionCarte()", "testcase": false, "constructor": false}, {"identifier": "distributionPlateau", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void distributionPlateau()", "full_signature": "public final void distributionPlateau()", "class_method_signature": "Jeu.distributionPlateau()", "testcase": false, "constructor": false}, {"identifier": "jouerAction", "parameters": "(Action ja)", "modifiers": "public final", "return": "String", "signature": "String jouerAction(Action ja)", "full_signature": "public final String jouerAction(Action ja)", "class_method_signature": "Jeu.jouerAction(Action ja)", "testcase": false, "constructor": false}, {"identifier": "finAge", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean finAge()", "full_signature": "public final boolean finAge()", "class_method_signature": "Jeu.finAge()", "testcase": false, "constructor": false}, {"identifier": "compareConfiltsJoueur", "parameters": "(Joueur j1, Joueur j2)", "modifiers": "private final", "return": "void", "signature": "void compareConfiltsJoueur(Joueur j1, Joueur j2)", "full_signature": "private final void compareConfiltsJoueur(Joueur j1, Joueur j2)", "class_method_signature": "Jeu.compareConfiltsJoueur(Joueur j1, Joueur j2)", "testcase": false, "constructor": false}, {"identifier": "ageSuivant", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void ageSuivant()", "full_signature": "public final void ageSuivant()", "class_method_signature": "Jeu.ageSuivant()", "testcase": false, "constructor": false}, {"identifier": "finJeu", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean finJeu()", "full_signature": "public final boolean finJeu()", "class_method_signature": "Jeu.finJeu()", "testcase": false, "constructor": false}, {"identifier": "getClassement", "parameters": "()", "modifiers": "public final", "return": "ArrayList<int[]>", "signature": "ArrayList<int[]> getClassement()", "full_signature": "public final ArrayList<int[]> getClassement()", "class_method_signature": "Jeu.getClassement()", "testcase": false, "constructor": false}, {"identifier": "getVisionsJeu", "parameters": "()", "modifiers": "public final", "return": "ArrayList<VisionJeu>", "signature": "ArrayList<VisionJeu> getVisionsJeu()", "full_signature": "public final ArrayList<VisionJeu> getVisionsJeu()", "class_method_signature": "Jeu.getVisionsJeu()", "testcase": false, "constructor": false}], "file": "moteur/src/main/java/moteur/Jeu.java"}, "focal_method": {"identifier": "jouerAction", "parameters": "(Action ja)", "modifiers": "public final", "return": "String", "body": "public final String jouerAction(Action ja) {\n        Joueur j = mesJoueurs.get(ja.getIdJoueur());\n        Carte c = j.getDeckMain().get(ja.getNumeroCarte());\n        StringBuilder desc = new StringBuilder();\n        boolean gratuit = false;\n        Carte carteGratuite = c;\n        for (int k = 0; k < (j.getDeckPlateau().size() - 1); k++) {\n            if (j.getDeckPlateau().get(k).getBatimentSuivant() == c.getNom()) {\n                carteGratuite = j.getDeckPlateau().get(k);\n                gratuit = true;\n            }\n        }\n        switch (ja.getType()) {\n\n        case DefausserCarte:\n            c = j.defausserCarte(ja.getNumeroCarte());\n            desc.append(\"Le joueur \" + ja.getIdJoueur() + \" a d\u00e9fauss\u00e9 la carte \" + Couleur.consoleColor(c.getCouleur()) + c.getNom());\n            tabDeck.get(this.age - 1).add(c);\n            break;\n\n        case AcheterRessource:\n            if (!gratuit) {\n                int idJoueurAPayer = (ja.getIdJoueur() + ja.getNumVoisin()) % mesJoueurs.size();\n\n                if (idJoueurAPayer < 0)\n                    idJoueurAPayer = mesJoueurs.size() - 1;\n\n                int montantPaiement = 2;\n                EffetCommercial ec = c.getEffetCommercial();\n                if (ec != null && ((ec == ACHAT_MATIERE_DROITE && ja.getNumVoisin() == 1) || (ec == ACHAT_MATIERE_GAUCHE && ja.getNumVoisin() == -1) || (ec == ACHAT_PREMIERE))) {\n                    montantPaiement = 1;\n                    desc.append(\"Gr\u00e2ce \u00e0 un effet commercial, le joueur \" + ja.getIdJoueur() + \" a achet\u00e9 des ressources \u00e0 co\u00fbt r\u00e9duits \");\n                } else {\n                    desc.append(\"Le joueur \" + ja.getIdJoueur() + \" a achet\u00e9 des ressources\");\n                }\n                desc.append(\" au joueur \" + idJoueurAPayer + \"\\n\");\n                mesJoueurs.get(idJoueurAPayer).recevoirPaiement(j.payer(montantPaiement));\n            }\n\n        case PoserCarte:\n            c = j.poserCarte(ja.getNumeroCarte());\n            desc.append(\"Le joueur \" + ja.getIdJoueur() + \" a pos\u00e9 la carte \" + Couleur.consoleColor(c.getCouleur()) + c.getNom());\n            if (gratuit) {\n                desc.append(WHITE + \" gratuitement gr\u00e2ce \u00e0 la carte \");\n                desc.append(Couleur.consoleColor(carteGratuite.getCouleur()) + carteGratuite.getNom());\n            } else {\n                ArrayList<Ressource> cr = c.getCoutRessources();\n                if (cr.size() > 0) {\n                    desc.append(WHITE + \" qui co\u00fbte \");\n                    HashMap<Ressource, Integer> hr = new HashMap<Ressource, Integer>();\n\n                    for (Ressource r : cr)\n                        hr.put(r, hr.get(r) == null ? 1 : hr.get(r) + 1);\n\n                    for (Ressource r : hr.keySet())\n                        desc.append(hr.get(r) + \" de \" + r.toString() + \", \");\n\n                    desc.setLength(desc.length() - 2);\n                }\n\n                EffetCommercial ec = c.getEffetCommercial();\n                int pieceBonus = 0;\n                if (ec != null) {\n                    desc.append(\"\\n Gr\u00e2ce \u00e0 un effet commercial, le joueur re\u00e7oit \");\n                    switch (ec) {\n                    case BONUS_OR:\n                        j.recevoirPaiement(5);\n                        desc.append(\"5 pi\u00e8ces d'or\\n\");\n                        break;\n\n                    case OR_CARTE_MARRON:\n                        for (Carte cj : j.getDeckPlateau())\n                            if (cj.getCouleur() == MARRON)\n                                pieceBonus++;\n\n                        for (Carte cj : mesJoueurs.get((ja.getIdJoueur() + 1) % mesJoueurs.size()).getDeckPlateau())\n                            if (cj.getCouleur() == MARRON)\n                                pieceBonus++;\n\n                        for (Carte cj : mesJoueurs.get(ja.getIdJoueur() - 1 < 0 ? mesJoueurs.size() - 1 : ja.getIdJoueur() - 1).getDeckPlateau())\n                            if (cj.getCouleur() == MARRON)\n                                pieceBonus++;\n\n                        j.recevoirPaiement(pieceBonus);\n                        desc.append(\"1 pi\u00e8ce d'or par carte marron dans son deck et celui de ses voisins direct pour un total de +\" + pieceBonus + \"\\n\");\n                        break;\n\n                    case OR_CARTE_GRIS:\n                        for (Carte cj : j.getDeckPlateau())\n                            if (cj.getCouleur() == GRIS)\n                                pieceBonus += 2;\n\n                        for (Carte cj : mesJoueurs.get((ja.getIdJoueur() + 1) % mesJoueurs.size()).getDeckPlateau())\n                            if (cj.getCouleur() == GRIS)\n                                pieceBonus += 2;\n\n                        for (Carte cj : mesJoueurs.get(ja.getIdJoueur() - 1 < 0 ? mesJoueurs.size() - 1 : ja.getIdJoueur() - 1).getDeckPlateau())\n                            if (cj.getCouleur() == GRIS)\n                                pieceBonus += 2;\n\n                        j.recevoirPaiement(pieceBonus);\n                        desc.append(\"2 pi\u00e8ces d'or par carte grise dans son deck et celui de ses voisins direct pour un total de +\" + pieceBonus + \"\\n\");\n                        break;\n\n                    case BONUS_ETAPE_MERVEILLE:\n                        for (Etape e : j.getPlateau().getEtapes())\n                            if (e.getEtat())\n                                pieceBonus += 3;\n\n                        j.recevoirPaiement(pieceBonus);\n                        desc.append(\"3 pi\u00e8ces d'or par \u00e9tapes construite de sa merveille pour un total de +\" + pieceBonus + \"\\n\");\n                        break;\n\n                    case BONUS_CARTE_MARRON:\n                        for (Carte cj : j.getDeckPlateau())\n                            if (cj.getCouleur() == MARRON)\n                                pieceBonus++;\n\n                        j.recevoirPaiement(pieceBonus);\n                        desc.append(\"1 pi\u00e8ce d'or par carte marron dans son deck pour un total de +\" + pieceBonus + \"\\n\");\n                        break;\n\n                    case BONUS_CARTE_GRIS:\n                        for (Carte cj : j.getDeckPlateau())\n                            if (cj.getCouleur() == GRIS)\n                                pieceBonus += 2;\n\n                        j.recevoirPaiement(pieceBonus);\n                        desc.append(\"2 pi\u00e8ce d'or par carte grise dans son deck pour un total de +\" + pieceBonus + \"\\n\");\n                        break;\n\n                    case BONUS_CARTE_JAUNE:\n                        for (Carte cj : j.getDeckPlateau())\n                            if (cj.getCouleur() == JAUNE)\n                                pieceBonus++;\n\n                        j.recevoirPaiement(pieceBonus);\n                        desc.append(\"1 pi\u00e8ce d'or par carte jaune dans son deck pour un total de +\" + pieceBonus + \"\\n\");\n                        break;\n\n                    default:\n                        // les autres cartes n'ont pas d'effet lorsqu'on la pose\n                        break;\n                    }\n                }\n            }\n            break;\n\n        case ConstruireMerveille:\n            if (age >= 2) {\n                if (j.getPlateau().getEtape(age - 1).getEtat() == true)\n                    j.getPlateau().getEtape(age).construire();\n            } else\n                j.getPlateau().getEtape(age).construire();\n            int etape = j.construireEtape(age, ja.getNumeroCarte());\n            desc.append(\"Le joueur \" + ja.getIdJoueur() + \" a construit l'\u00e9tape \" + etape + \" de sa merveille \" + j.getPlateau().getNom());\n            break;\n        }\n        return desc.toString();\n    }", "signature": "String jouerAction(Action ja)", "full_signature": "public final String jouerAction(Action ja)", "class_method_signature": "Jeu.jouerAction(Action ja)", "testcase": false, "constructor": false, "invocations": ["get", "getIdJoueur", "get", "getDeckMain", "getNumeroCarte", "size", "getDeckPlateau", "getBatimentSuivant", "get", "getDeckPlateau", "getNom", "get", "getDeckPlateau", "getType", "defausserCarte", "getNumeroCarte", "append", "getIdJoueur", "nsoleColor(c", "tCouleur()", "tNom()", "add", "get", "getIdJoueur", "getNumVoisin", "size", "size", "getEffetCommercial", "getNumVoisin", "getNumVoisin", "append", "tIdJoueur()", "append", "getIdJoueur", "append", "recevoirPaiement", "get", "payer", "poserCarte", "getNumeroCarte", "append", "getIdJoueur", "onsoleColor(", "etCouleur(", "etNom(", "append", "append", "consoleColor", "getCouleur", "getNom", "getCoutRessources", "size", "append", "put", "get", "get", "keySet", "append", "get", "toString", "setLength", "length", "getEffetCommercial", "append", "recevoirPaiement", "append", "getDeckPlateau", "getCouleur", "getDeckPlateau", "get", "getIdJoueur", "size", "getCouleur", "getDeckPlateau", "get", "getIdJoueur", "size", "getIdJoueur", "getCouleur", "recevoirPaiement", "append", "getDeckPlateau", "getCouleur", "getDeckPlateau", "get", "getIdJoueur", "size", "getCouleur", "getDeckPlateau", "get", "getIdJoueur", "size", "getIdJoueur", "getCouleur", "recevoirPaiement", "append", "getEtapes", "getPlateau", "getEtat", "recevoirPaiement", "append", "getDeckPlateau", "getCouleur", "recevoirPaiement", "append", "getDeckPlateau", "getCouleur", "recevoirPaiement", "append", "getDeckPlateau", "getCouleur", "recevoirPaiement", "append", "getEtat", "getEtape", "getPlateau", "construire", "getEtape", "getPlateau", "construire", "getEtape", "getPlateau", "construireEtape", "getNumeroCarte", "append", "getIdJoueur", "etNom(", "etPlateau(", "toString"]}, "repository": {"repo_id": 169146883, "url": "https://github.com/RemiFELIN/7Wonders_By_Miagestics", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 9826, "license": "licensed"}}