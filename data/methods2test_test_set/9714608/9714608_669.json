{"test_class": {"identifier": "XMLRoadUtilTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "advanced/gis/gisroadinputoutput/src/test/java/org/arakhne/afc/gis/road/io/XMLRoadUtilTest.java"}, "test_case": {"identifier": "writeRoadSegmentRoadSegmentXMLBuilderXMLResources", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void writeRoadSegmentRoadSegmentXMLBuilderXMLResources() throws Exception {\n\t\tPathBuilder pathBuilder = new SimplePathBuilder();\n\t\tXMLResources res = new XMLResources(pathBuilder);\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tDocument doc = builder.newDocument();\n\t\tXMLBuilder xmlBuilder = new XMLBuilder() {\n\t\t\t@Override\n\t\t\tpublic Document getDocument() throws DOMException {\n\t\t\t\treturn doc;\n\t\t\t}\n\t\t};\n\t\tRoadPolyline road = new RoadPolyline();\n\t\troad.addGroup(1, 2);\n\t\troad.addPoint(3, 4);\n\t\troad.addPoint(5, 6);\n\t\troad.addGroup(-1, 2);\n\t\troad.addPoint(-3, 4);\n\t\troad.addPoint(-5, -6);\n\t\troad.setName(\"myroad\"); //$NON-NLS-1$\n\t\troad.setColor(0xFFFF0011);\n\t\troad.setAttribute(\"myattr\", \"thevalue\"); //$NON-NLS-1$ //$NON-NLS-2$\n\n\t\tElement element = XMLRoadUtil.writeRoadSegment(road, xmlBuilder, res);\n\n\t\tdoc.appendChild(element);\n\t\tString actual;\n\t\ttry (StringWriter sw = new StringWriter()) {\n\t\t\tXMLUtil.writeXML(doc, sw);\n\t\t\tsw.close();\n\t\t\tactual = sw.toString();\n\t\t}\n\t\tassertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\" //$NON-NLS-1$\n\t\t\t\t+ \"<road geoId=\\\"0ee8691041f80b41e4957e89239b4ff7#-5;-6;5;6\\\" id=\\\"\" //$NON-NLS-1$\n\t\t\t\t+ road.getUUID().toString() + \"\\\" name=\\\"myroad\\\" wide=\\\"true\\\" width=\\\"6.6\\\">\" //$NON-NLS-1$\n\t\t\t\t+ \"<points><point x=\\\"1.0\\\" y=\\\"2.0\\\"/><point x=\\\"3.0\\\" y=\\\"4.0\\\"/>\" //$NON-NLS-1$\n\t\t\t\t+ \"<point x=\\\"5.0\\\" y=\\\"6.0\\\"/><point x=\\\"-1.0\\\" y=\\\"2.0\\\"/>\" //$NON-NLS-1$\n\t\t\t\t+ \"<point x=\\\"-3.0\\\" y=\\\"4.0\\\"/><point x=\\\"-5.0\\\" y=\\\"-6.0\\\"/>\" //$NON-NLS-1$\n\t\t\t\t+ \"</points><groups><group firstPointIndex=\\\"0\\\" lastPointIndex=\\\"2\\\"/>\" //$NON-NLS-1$\n\t\t\t\t+ \"<group firstPointIndex=\\\"3\\\" lastPointIndex=\\\"5\\\"/></groups>\" //$NON-NLS-1$\n\t\t\t\t+ \"<attributes><attribute name=\\\"myattr\\\" type=\\\"STRING\\\" value=\\\"thevalue\\\"/>\" //$NON-NLS-1$\n\t\t\t\t+ \"<attribute name=\\\"nom_rue_d\\\" type=\\\"STRING\\\" value=\\\"myroad\\\"/></attributes></road>\", actual); //$NON-NLS-1$\n\t}", "signature": "void writeRoadSegmentRoadSegmentXMLBuilderXMLResources()", "full_signature": "@Test public void writeRoadSegmentRoadSegmentXMLBuilderXMLResources()", "class_method_signature": "XMLRoadUtilTest.writeRoadSegmentRoadSegmentXMLBuilderXMLResources()", "testcase": true, "constructor": false, "invocations": ["newInstance", "newDocumentBuilder", "newDocument", "addGroup", "addPoint", "addPoint", "addGroup", "addPoint", "addPoint", "setName", "setColor", "setAttribute", "writeRoadSegment", "appendChild", "writeXML", "close", "toString", "assertEquals", "toString", "getUUID"]}, "focal_class": {"identifier": "XMLRoadUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String NODE_ROAD = \"road\";", "modifier": "public static final", "type": "String", "declarator": "NODE_ROAD = \"road\"", "var_name": "NODE_ROAD"}, {"original_string": "public static final String ATTR_HEIGHT = \"height\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_HEIGHT = \"height\"", "var_name": "ATTR_HEIGHT"}], "methods": [{"identifier": "XMLRoadUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " XMLRoadUtil()", "full_signature": "private  XMLRoadUtil()", "class_method_signature": "XMLRoadUtil.XMLRoadUtil()", "testcase": false, "constructor": true}, {"identifier": "writeRoadPolyline", "parameters": "(RoadPolyline primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "Element", "signature": "Element writeRoadPolyline(RoadPolyline primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "full_signature": "public static Element writeRoadPolyline(RoadPolyline primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLRoadUtil.writeRoadPolyline(RoadPolyline primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readRoadPolyline", "parameters": "(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "RoadPolyline", "signature": "RoadPolyline readRoadPolyline(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "full_signature": "public static RoadPolyline readRoadPolyline(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLRoadUtil.readRoadPolyline(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "writeRoadSegment", "parameters": "(RoadSegment primitive, XMLBuilder builder, XMLResources resources)", "modifiers": "public static", "return": "Element", "signature": "Element writeRoadSegment(RoadSegment primitive, XMLBuilder builder, XMLResources resources)", "full_signature": "public static Element writeRoadSegment(RoadSegment primitive, XMLBuilder builder, XMLResources resources)", "class_method_signature": "XMLRoadUtil.writeRoadSegment(RoadSegment primitive, XMLBuilder builder, XMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readRoadSegment", "parameters": "(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "RoadSegment", "signature": "RoadSegment readRoadSegment(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "full_signature": "public static RoadSegment readRoadSegment(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLRoadUtil.readRoadSegment(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "writeRoadNetwork", "parameters": "(Element xmlNode, RoadNetwork primitive, URL geometryURL,\n\t\t\tMapMetricProjection mapProjection, URL attributeURL, XMLBuilder builder,\n\t\t\tPathBuilder pathBuilder, XMLResources resources)", "modifiers": "public static", "return": "void", "signature": "void writeRoadNetwork(Element xmlNode, RoadNetwork primitive, URL geometryURL,\n\t\t\tMapMetricProjection mapProjection, URL attributeURL, XMLBuilder builder,\n\t\t\tPathBuilder pathBuilder, XMLResources resources)", "full_signature": "public static void writeRoadNetwork(Element xmlNode, RoadNetwork primitive, URL geometryURL,\n\t\t\tMapMetricProjection mapProjection, URL attributeURL, XMLBuilder builder,\n\t\t\tPathBuilder pathBuilder, XMLResources resources)", "class_method_signature": "XMLRoadUtil.writeRoadNetwork(Element xmlNode, RoadNetwork primitive, URL geometryURL,\n\t\t\tMapMetricProjection mapProjection, URL attributeURL, XMLBuilder builder,\n\t\t\tPathBuilder pathBuilder, XMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readRoadNetwork", "parameters": "(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "void", "signature": "void readRoadNetwork(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "full_signature": "public static void readRoadNetwork(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLRoadUtil.readRoadNetwork(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readRoadNetwork", "parameters": "(Element xmlNode, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "StandardRoadNetwork", "signature": "StandardRoadNetwork readRoadNetwork(Element xmlNode, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "full_signature": "public static StandardRoadNetwork readRoadNetwork(Element xmlNode, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLRoadUtil.readRoadNetwork(Element xmlNode, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}], "file": "advanced/gis/gisroadinputoutput/src/main/java/org/arakhne/afc/gis/road/io/XMLRoadUtil.java"}, "focal_method": {"identifier": "writeRoadSegment", "parameters": "(RoadSegment primitive, XMLBuilder builder, XMLResources resources)", "modifiers": "public static", "return": "Element", "body": "public static Element writeRoadSegment(RoadSegment primitive, XMLBuilder builder, XMLResources resources) throws IOException {\n\t\tif (primitive instanceof RoadPolyline) {\n\t\t\treturn writeRoadPolyline((RoadPolyline) primitive, builder, resources);\n\t\t}\n\t\tthrow new IOException(\"unsupported type of primitive: \" + primitive); //$NON-NLS-1$\n\t}", "signature": "Element writeRoadSegment(RoadSegment primitive, XMLBuilder builder, XMLResources resources)", "full_signature": "public static Element writeRoadSegment(RoadSegment primitive, XMLBuilder builder, XMLResources resources)", "class_method_signature": "XMLRoadUtil.writeRoadSegment(RoadSegment primitive, XMLBuilder builder, XMLResources resources)", "testcase": false, "constructor": false, "invocations": ["writeRoadPolyline"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}