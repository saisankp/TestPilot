{"test_class": {"identifier": "SW360MetaDataReceiverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SW360MetaDataReceiver metaDataReceiver;", "modifier": "private", "type": "SW360MetaDataReceiver", "declarator": "metaDataReceiver", "var_name": "metaDataReceiver"}, {"original_string": "private SW360Connection connection = mock(SW360Connection.class);", "modifier": "private", "type": "SW360Connection", "declarator": "connection = mock(SW360Connection.class)", "var_name": "connection"}, {"original_string": "private SW360LicenseClientAdapter licenseClientAdapter = mock(SW360LicenseClientAdapter.class);", "modifier": "private", "type": "SW360LicenseClientAdapter", "declarator": "licenseClientAdapter = mock(SW360LicenseClientAdapter.class)", "var_name": "licenseClientAdapter"}, {"original_string": "private SW360ReleaseClientAdapter releaseClientAdapter = mock(SW360ReleaseClientAdapter.class);", "modifier": "private", "type": "SW360ReleaseClientAdapter", "declarator": "releaseClientAdapter = mock(SW360ReleaseClientAdapter.class)", "var_name": "releaseClientAdapter"}, {"original_string": "private SW360ComponentClientAdapter componentClientAdapter = mock(SW360ComponentClientAdapter.class);", "modifier": "private", "type": "SW360ComponentClientAdapter", "declarator": "componentClientAdapter = mock(SW360ComponentClientAdapter.class)", "var_name": "componentClientAdapter"}], "file": "modules/sw360/sw360-workflow/src/test/java/org/eclipse/sw360/antenna/sw360/SW360MetaDataReceiverTest.java"}, "test_case": {"identifier": "testFindReleaseForArtifactNotPresentComponent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindReleaseForArtifactNotPresentComponent() {\n        final String version = \"version\";\n        final Artifact artifact = new Artifact()\n                .addFact(new ArtifactCoordinates(new Coordinate(\"name\", version)));\n        final String componentName = ArtifactToComponentUtils.createComponentName(artifact);\n        when(componentClientAdapter.getComponentByName(componentName))\n                .thenReturn(Optional.empty());\n        setUp();\n        final Optional<SW360Release> releaseForArtifact = metaDataReceiver.findReleaseForArtifact(artifact);\n\n        assertThat(releaseForArtifact).isNotPresent();\n        verify(componentClientAdapter, times(1)).getComponentByName(componentName);\n        verify(releaseClientAdapter, never()).getReleaseByVersion(any(), any());\n    }", "signature": "void testFindReleaseForArtifactNotPresentComponent()", "full_signature": "@Test public void testFindReleaseForArtifactNotPresentComponent()", "class_method_signature": "SW360MetaDataReceiverTest.testFindReleaseForArtifactNotPresentComponent()", "testcase": true, "constructor": false, "invocations": ["addFact", "createComponentName", "thenReturn", "when", "getComponentByName", "empty", "setUp", "findReleaseForArtifact", "isNotPresent", "assertThat", "getComponentByName", "verify", "times", "getReleaseByVersion", "verify", "never", "any", "any"]}, "focal_class": {"identifier": "SW360MetaDataReceiver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SW360MetaDataReceiver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SW360MetaDataReceiver.class)", "var_name": "LOGGER"}, {"original_string": "private SW360ComponentClientAdapter componentClientAdapter;", "modifier": "private", "type": "SW360ComponentClientAdapter", "declarator": "componentClientAdapter", "var_name": "componentClientAdapter"}, {"original_string": "private SW360ReleaseClientAdapter releaseClientAdapter;", "modifier": "private", "type": "SW360ReleaseClientAdapter", "declarator": "releaseClientAdapter", "var_name": "releaseClientAdapter"}, {"original_string": "private SW360LicenseClientAdapter licenseClientAdapter;", "modifier": "private", "type": "SW360LicenseClientAdapter", "declarator": "licenseClientAdapter", "var_name": "licenseClientAdapter"}], "methods": [{"identifier": "SW360MetaDataReceiver", "parameters": "(SW360Connection sw360ConnectionConfiguration)", "modifiers": "public", "return": "", "signature": " SW360MetaDataReceiver(SW360Connection sw360ConnectionConfiguration)", "full_signature": "public  SW360MetaDataReceiver(SW360Connection sw360ConnectionConfiguration)", "class_method_signature": "SW360MetaDataReceiver.SW360MetaDataReceiver(SW360Connection sw360ConnectionConfiguration)", "testcase": false, "constructor": true}, {"identifier": "findReleaseForArtifact", "parameters": "(Artifact artifact)", "modifiers": "public", "return": "Optional<SW360Release>", "signature": "Optional<SW360Release> findReleaseForArtifact(Artifact artifact)", "full_signature": "public Optional<SW360Release> findReleaseForArtifact(Artifact artifact)", "class_method_signature": "SW360MetaDataReceiver.findReleaseForArtifact(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "getLicenseDetails", "parameters": "(SW360SparseLicense sparseLicense)", "modifiers": "public", "return": "Optional<SW360License>", "signature": "Optional<SW360License> getLicenseDetails(SW360SparseLicense sparseLicense)", "full_signature": "public Optional<SW360License> getLicenseDetails(SW360SparseLicense sparseLicense)", "class_method_signature": "SW360MetaDataReceiver.getLicenseDetails(SW360SparseLicense sparseLicense)", "testcase": false, "constructor": false}, {"identifier": "downloadAttachment", "parameters": "(SW360Release release, SW360SparseAttachment attachment, Path downloadPath)", "modifiers": "public", "return": "Optional<Path>", "signature": "Optional<Path> downloadAttachment(SW360Release release, SW360SparseAttachment attachment, Path downloadPath)", "full_signature": "public Optional<Path> downloadAttachment(SW360Release release, SW360SparseAttachment attachment, Path downloadPath)", "class_method_signature": "SW360MetaDataReceiver.downloadAttachment(SW360Release release, SW360SparseAttachment attachment, Path downloadPath)", "testcase": false, "constructor": false}, {"identifier": "getComponentByArtifact", "parameters": "(Artifact artifact)", "modifiers": "private", "return": "Optional<SW360Component>", "signature": "Optional<SW360Component> getComponentByArtifact(Artifact artifact)", "full_signature": "private Optional<SW360Component> getComponentByArtifact(Artifact artifact)", "class_method_signature": "SW360MetaDataReceiver.getComponentByArtifact(Artifact artifact)", "testcase": false, "constructor": false}], "file": "modules/sw360/sw360-workflow/src/main/java/org/eclipse/sw360/antenna/sw360/SW360MetaDataReceiver.java"}, "focal_method": {"identifier": "findReleaseForArtifact", "parameters": "(Artifact artifact)", "modifiers": "public", "return": "Optional<SW360Release>", "body": "public Optional<SW360Release> findReleaseForArtifact(Artifact artifact) {\n        Optional<SW360Component> component = getComponentByArtifact(artifact);\n        if (component.isPresent()) {\n\n            String releaseVersionOfArtifact = ArtifactToReleaseUtils.createSW360ReleaseVersion(artifact);\n            return releaseClientAdapter.getReleaseByVersion(component.get(), releaseVersionOfArtifact);\n        }\n        return Optional.empty();\n    }", "signature": "Optional<SW360Release> findReleaseForArtifact(Artifact artifact)", "full_signature": "public Optional<SW360Release> findReleaseForArtifact(Artifact artifact)", "class_method_signature": "SW360MetaDataReceiver.findReleaseForArtifact(Artifact artifact)", "testcase": false, "constructor": false, "invocations": ["getComponentByArtifact", "isPresent", "createSW360ReleaseVersion", "getReleaseByVersion", "get", "empty"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}