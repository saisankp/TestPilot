{"test_class": {"identifier": "NTv2TransformTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_GRID = \"BALR2009.gsb\";", "modifier": "private static final", "type": "String", "declarator": "TEST_GRID = \"BALR2009.gsb\"", "var_name": "TEST_GRID"}, {"original_string": "private static final String INEXISTENT_GRID = \"this_NTv2_grid_does_not_exist\";", "modifier": "private static final", "type": "String", "declarator": "INEXISTENT_GRID = \"this_NTv2_grid_does_not_exist\"", "var_name": "INEXISTENT_GRID"}, {"original_string": "private static final double[] TEST_POINT_SRC = {3.084896111, 39.592654167};", "modifier": "private static final", "type": "double[]", "declarator": "TEST_POINT_SRC = {3.084896111, 39.592654167}", "var_name": "TEST_POINT_SRC"}, {"original_string": "private static final double[] TEST_POINT_DST = {3.083801819, 39.5914804};", "modifier": "private static final", "type": "double[]", "declarator": "TEST_POINT_DST = {3.083801819, 39.5914804}", "var_name": "TEST_POINT_DST"}, {"original_string": "private static final double TOLERANCE = 18E-7;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 18E-7", "var_name": "TOLERANCE"}, {"original_string": "private NTv2Transform transform;", "modifier": "private", "type": "NTv2Transform", "declarator": "transform", "var_name": "transform"}], "file": "modules/library/referencing/src/test/java/org/geotools/referencing/operation/transform/NTv2TransformTest.java"}, "test_case": {"identifier": "testInverseTransformTranslated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInverseTransformTranslated() throws TransformException {\n        double[] src = new double[4];\n        double[] dst = new double[4];\n        src[2] = TEST_POINT_DST[0];\n        src[3] = TEST_POINT_DST[1];\n        \n        transform.inverseTransform(src, 2, dst, 2, 1);\n        assertEquals(0, dst[0], TOLERANCE);\n        assertEquals(0, dst[1], TOLERANCE);\n        assertEquals(dst[2], TEST_POINT_SRC[0], TOLERANCE);\n        assertEquals(dst[3], TEST_POINT_SRC[1], TOLERANCE);\n    }", "signature": "void testInverseTransformTranslated()", "full_signature": "@Test public void testInverseTransformTranslated()", "class_method_signature": "NTv2TransformTest.testInverseTransformTranslated()", "testcase": true, "constructor": false, "invocations": ["inverseTransform", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "NTv2Transform", "superclass": "extends AbstractMathTransform", "interfaces": "implements MathTransform2D, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -3082112044314062512L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3082112044314062512L", "var_name": "serialVersionUID"}, {"original_string": "protected static final Logger LOGGER = Logging.getLogger(\"org.geotools.referencing\");", "modifier": "protected static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(\"org.geotools.referencing\")", "var_name": "LOGGER"}, {"original_string": "private URI grid = null;", "modifier": "private", "type": "URI", "declarator": "grid = null", "var_name": "grid"}, {"original_string": "private URL gridLocation = null;", "modifier": "private", "type": "URL", "declarator": "gridLocation = null", "var_name": "gridLocation"}, {"original_string": "private GridShiftFile gridShift;", "modifier": "private", "type": "GridShiftFile", "declarator": "gridShift", "var_name": "gridShift"}, {"original_string": "private static NTv2GridShiftFactory FACTORY = new NTv2GridShiftFactory();", "modifier": "private static", "type": "NTv2GridShiftFactory", "declarator": "FACTORY = new NTv2GridShiftFactory()", "var_name": "FACTORY"}, {"original_string": "private transient MathTransform2D inverse;", "modifier": "private transient", "type": "MathTransform2D", "declarator": "inverse", "var_name": "inverse"}], "methods": [{"identifier": "NTv2Transform", "parameters": "(URI file)", "modifiers": "public", "return": "", "signature": " NTv2Transform(URI file)", "full_signature": "public  NTv2Transform(URI file)", "class_method_signature": "NTv2Transform.NTv2Transform(URI file)", "testcase": false, "constructor": true}, {"identifier": "locateGrid", "parameters": "(String grid)", "modifiers": "", "return": "URL", "signature": "URL locateGrid(String grid)", "full_signature": " URL locateGrid(String grid)", "class_method_signature": "NTv2Transform.locateGrid(String grid)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "NTv2Transform.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object object)", "full_signature": "@Override public boolean equals(final Object object)", "class_method_signature": "NTv2Transform.equals(final Object object)", "testcase": false, "constructor": false}, {"identifier": "inverse", "parameters": "()", "modifiers": "@Override public synchronized", "return": "MathTransform2D", "signature": "MathTransform2D inverse()", "full_signature": "@Override public synchronized MathTransform2D inverse()", "class_method_signature": "NTv2Transform.inverse()", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts)", "modifiers": "@Override public", "return": "void", "signature": "void transform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts)", "full_signature": "@Override public void transform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts)", "class_method_signature": "NTv2Transform.transform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts)", "testcase": false, "constructor": false}, {"identifier": "inverseTransform", "parameters": "(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts)", "modifiers": "public", "return": "void", "signature": "void inverseTransform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts)", "full_signature": "public void inverseTransform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts)", "class_method_signature": "NTv2Transform.inverseTransform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts)", "testcase": false, "constructor": false}, {"identifier": "bidirectionalTransform", "parameters": "(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts, boolean forward)", "modifiers": "private", "return": "void", "signature": "void bidirectionalTransform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts, boolean forward)", "full_signature": "private void bidirectionalTransform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts, boolean forward)", "class_method_signature": "NTv2Transform.bidirectionalTransform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts, boolean forward)", "testcase": false, "constructor": false}, {"identifier": "getSourceDimensions", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSourceDimensions()", "full_signature": "@Override public int getSourceDimensions()", "class_method_signature": "NTv2Transform.getSourceDimensions()", "testcase": false, "constructor": false}, {"identifier": "getTargetDimensions", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getTargetDimensions()", "full_signature": "@Override public int getTargetDimensions()", "class_method_signature": "NTv2Transform.getTargetDimensions()", "testcase": false, "constructor": false}, {"identifier": "getParameterValues", "parameters": "()", "modifiers": "@Override public", "return": "ParameterValueGroup", "signature": "ParameterValueGroup getParameterValues()", "full_signature": "@Override public ParameterValueGroup getParameterValues()", "class_method_signature": "NTv2Transform.getParameterValues()", "testcase": false, "constructor": false}], "file": "modules/library/referencing/src/main/java/org/geotools/referencing/operation/transform/NTv2Transform.java"}, "focal_method": {"identifier": "inverseTransform", "parameters": "(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts)", "modifiers": "public", "return": "void", "body": "public void inverseTransform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts) throws TransformException {\n        bidirectionalTransform(srcPts,srcOff, dstPts, dstOff, numPts, false);\n    }", "signature": "void inverseTransform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts)", "full_signature": "public void inverseTransform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts)", "class_method_signature": "NTv2Transform.inverseTransform(double[] srcPts, int srcOff, double[] dstPts,\n            int dstOff, int numPts)", "testcase": false, "constructor": false, "invocations": ["bidirectionalTransform"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}