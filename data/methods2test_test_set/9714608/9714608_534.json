{"test_class": {"identifier": "RoadPolylineTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private static final int TEST_COUNT = 50;", "modifier": "private static final", "type": "int", "declarator": "TEST_COUNT = 50", "var_name": "TEST_COUNT"}, {"original_string": "private static final double SHIFTING_RANGE = 50.;", "modifier": "private static final", "type": "double", "declarator": "SHIFTING_RANGE = 50.", "var_name": "SHIFTING_RANGE"}, {"original_string": "private RoadSegmentStub testedSegment;", "modifier": "private", "type": "RoadSegmentStub", "declarator": "testedSegment", "var_name": "testedSegment"}, {"original_string": "private RoadSegmentStub firstNeighbour;", "modifier": "private", "type": "RoadSegmentStub", "declarator": "firstNeighbour", "var_name": "firstNeighbour"}, {"original_string": "private RoadSegmentStub secondNeighbour;", "modifier": "private", "type": "RoadSegmentStub", "declarator": "secondNeighbour", "var_name": "secondNeighbour"}, {"original_string": "private RoadSegmentStub loopSegment;", "modifier": "private", "type": "RoadSegmentStub", "declarator": "loopSegment", "var_name": "loopSegment"}, {"original_string": "private RoadSegmentStub thirdNeighbour;", "modifier": "private", "type": "RoadSegmentStub", "declarator": "thirdNeighbour", "var_name": "thirdNeighbour"}, {"original_string": "private RoadConnectionStub connection1;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "connection1", "var_name": "connection1"}, {"original_string": "private RoadConnectionStub connection2;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "connection2", "var_name": "connection2"}, {"original_string": "private RoadConnectionStub culDeSac1;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "culDeSac1", "var_name": "culDeSac1"}, {"original_string": "private RoadConnectionStub culDeSac2;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "culDeSac2", "var_name": "culDeSac2"}, {"original_string": "private RoadConnectionStub culDeSac3;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "culDeSac3", "var_name": "culDeSac3"}, {"original_string": "private RoadConnectionStub connection3;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "connection3", "var_name": "connection3"}], "file": "advanced/gis/gisroad/src/test/java/org/arakhne/afc/gis/road/RoadPolylineTest.java"}, "test_case": {"identifier": "testGetDistanceToEnd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetDistanceToEnd() {\n    \tassertEpsilonEquals(this.testedSegment.getOriginalLength(),this.testedSegment.getDistanceToEnd(0));\n    \tassertEpsilonEquals(this.firstNeighbour.getOriginalLength(),this.firstNeighbour.getDistanceToEnd(0));\n    \tassertEpsilonEquals(this.secondNeighbour.getOriginalLength(),this.secondNeighbour.getDistanceToEnd(0));\n\n    \tassertEpsilonEquals(this.loopSegment.getOriginalLength(),this.loopSegment.getDistanceToEnd(0));\n    \tassertEpsilonEquals(this.thirdNeighbour.getOriginalLength(),this.thirdNeighbour.getDistanceToEnd(0));\n\n    \t//\n\n    \tassertEpsilonEquals(0.,this.testedSegment.getDistanceToEnd(1));\n    \tassertEpsilonEquals(0.,this.firstNeighbour.getDistanceToEnd(1));\n    \tassertEpsilonEquals(0.,this.secondNeighbour.getDistanceToEnd(1));\n\n    \tassertEpsilonEquals(0.,this.loopSegment.getDistanceToEnd(1));\n    \tassertEpsilonEquals(0.,this.thirdNeighbour.getDistanceToEnd(1));\n\n    \t//\n\n    \tRandom rnd = new Random();\n    \tdouble ratio;\n    \tfor(int i=0; i<TEST_COUNT; ++i) {\n    \t\tratio = rnd.nextDouble();\n\n    \t\tassertEpsilonEquals(this.testedSegment.getOriginalEndDistance(ratio),this.testedSegment.getDistanceToEnd(ratio));\n    \t\tassertEpsilonEquals(this.firstNeighbour.getOriginalEndDistance(ratio),this.firstNeighbour.getDistanceToEnd(ratio));\n    \t\tassertEpsilonEquals(this.secondNeighbour.getOriginalEndDistance(ratio),this.secondNeighbour.getDistanceToEnd(ratio));\n\n    \t\tassertEpsilonEquals(this.loopSegment.getOriginalEndDistance(ratio),this.loopSegment.getDistanceToEnd(ratio));\n    \t\tassertEpsilonEquals(this.thirdNeighbour.getOriginalEndDistance(ratio),this.thirdNeighbour.getDistanceToEnd(ratio));\n    \t}\n\t}", "signature": "void testGetDistanceToEnd()", "full_signature": "@Test public void testGetDistanceToEnd()", "class_method_signature": "RoadPolylineTest.testGetDistanceToEnd()", "testcase": true, "constructor": false, "invocations": ["assertEpsilonEquals", "getOriginalLength", "getDistanceToEnd", "assertEpsilonEquals", "getOriginalLength", "getDistanceToEnd", "assertEpsilonEquals", "getOriginalLength", "getDistanceToEnd", "assertEpsilonEquals", "getOriginalLength", "getDistanceToEnd", "assertEpsilonEquals", "getOriginalLength", "getDistanceToEnd", "assertEpsilonEquals", "getDistanceToEnd", "assertEpsilonEquals", "getDistanceToEnd", "assertEpsilonEquals", "getDistanceToEnd", "assertEpsilonEquals", "getDistanceToEnd", "assertEpsilonEquals", "getDistanceToEnd", "nextDouble", "assertEpsilonEquals", "getOriginalEndDistance", "getDistanceToEnd", "assertEpsilonEquals", "getOriginalEndDistance", "getDistanceToEnd", "assertEpsilonEquals", "getOriginalEndDistance", "getDistanceToEnd", "assertEpsilonEquals", "getOriginalEndDistance", "getDistanceToEnd", "assertEpsilonEquals", "getOriginalEndDistance", "getDistanceToEnd"]}, "focal_class": {"identifier": "RoadPolyline", "superclass": "extends MapPolyline", "interfaces": "implements RoadSegment", "fields": [{"original_string": "private static final long serialVersionUID = -2881502228274578187L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2881502228274578187L", "var_name": "serialVersionUID"}, {"original_string": "private static final Validator DEFAULT_VALIDATOR = new Validator();", "modifier": "private static final", "type": "Validator", "declarator": "DEFAULT_VALIDATOR = new Validator()", "var_name": "DEFAULT_VALIDATOR"}, {"original_string": "private StandardRoadConnection firstConnection;", "modifier": "private", "type": "StandardRoadConnection", "declarator": "firstConnection", "var_name": "firstConnection"}, {"original_string": "private StandardRoadConnection lastConnection;", "modifier": "private", "type": "StandardRoadConnection", "declarator": "lastConnection", "var_name": "lastConnection"}, {"original_string": "private WeakReference<StandardRoadNetwork> roadNetwork;", "modifier": "private", "type": "WeakReference<StandardRoadNetwork>", "declarator": "roadNetwork", "var_name": "roadNetwork"}, {"original_string": "private transient Map<String, List<Object>> userData;", "modifier": "private transient", "type": "Map<String, List<Object>>", "declarator": "userData", "var_name": "userData"}, {"original_string": "private RoadType roadType;", "modifier": "private", "type": "RoadType", "declarator": "roadType", "var_name": "roadType"}, {"original_string": "private double width = Double.NaN;", "modifier": "private", "type": "double", "declarator": "width = Double.NaN", "var_name": "width"}], "methods": [{"identifier": "RoadPolyline", "parameters": "()", "modifiers": "public", "return": "", "signature": " RoadPolyline()", "full_signature": "public  RoadPolyline()", "class_method_signature": "RoadPolyline.RoadPolyline()", "testcase": false, "constructor": true}, {"identifier": "RoadPolyline", "parameters": "(AttributeCollection attributeProvider)", "modifiers": "public", "return": "", "signature": " RoadPolyline(AttributeCollection attributeProvider)", "full_signature": "public  RoadPolyline(AttributeCollection attributeProvider)", "class_method_signature": "RoadPolyline.RoadPolyline(AttributeCollection attributeProvider)", "testcase": false, "constructor": true}, {"identifier": "RoadPolyline", "parameters": "(UUID id)", "modifiers": "public", "return": "", "signature": " RoadPolyline(UUID id)", "full_signature": "public  RoadPolyline(UUID id)", "class_method_signature": "RoadPolyline.RoadPolyline(UUID id)", "testcase": false, "constructor": true}, {"identifier": "RoadPolyline", "parameters": "(UUID id, AttributeCollection attributeProvider)", "modifiers": "public", "return": "", "signature": " RoadPolyline(UUID id, AttributeCollection attributeProvider)", "full_signature": "public  RoadPolyline(UUID id, AttributeCollection attributeProvider)", "class_method_signature": "RoadPolyline.RoadPolyline(UUID id, AttributeCollection attributeProvider)", "testcase": false, "constructor": true}, {"identifier": "toJson", "parameters": "(JsonBuffer buffer)", "modifiers": "@Override @Pure public", "return": "void", "signature": "void toJson(JsonBuffer buffer)", "full_signature": "@Override @Pure public void toJson(JsonBuffer buffer)", "class_method_signature": "RoadPolyline.toJson(JsonBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override @Pure public", "return": "RoadPolyline", "signature": "RoadPolyline clone()", "full_signature": "@Override @Pure public RoadPolyline clone()", "class_method_signature": "RoadPolyline.clone()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object element)", "modifiers": "@Override @SuppressWarnings({\"checkstyle:equalshashcode\", \"unlikely-arg-type\"}) @Pure public", "return": "boolean", "signature": "boolean equals(Object element)", "full_signature": "@Override @SuppressWarnings({\"checkstyle:equalshashcode\", \"unlikely-arg-type\"}) @Pure public boolean equals(Object element)", "class_method_signature": "RoadPolyline.equals(Object element)", "testcase": false, "constructor": false}, {"identifier": "getPointFusionValidator", "parameters": "()", "modifiers": "@Override @Pure public", "return": "PointFusionValidator", "signature": "PointFusionValidator getPointFusionValidator()", "full_signature": "@Override @Pure public PointFusionValidator getPointFusionValidator()", "class_method_signature": "RoadPolyline.getPointFusionValidator()", "testcase": false, "constructor": false}, {"identifier": "getRoadNetwork", "parameters": "()", "modifiers": "@Override @Pure public", "return": "StandardRoadNetwork", "signature": "StandardRoadNetwork getRoadNetwork()", "full_signature": "@Override @Pure public StandardRoadNetwork getRoadNetwork()", "class_method_signature": "RoadPolyline.getRoadNetwork()", "testcase": false, "constructor": false}, {"identifier": "setRoadNetwork", "parameters": "(StandardRoadNetwork network)", "modifiers": "", "return": "void", "signature": "void setRoadNetwork(StandardRoadNetwork network)", "full_signature": " void setRoadNetwork(StandardRoadNetwork network)", "class_method_signature": "RoadPolyline.setRoadNetwork(StandardRoadNetwork network)", "testcase": false, "constructor": false}, {"identifier": "getOtherSidePoint", "parameters": "(RoadConnection ref_point)", "modifiers": "@Pure @Override public", "return": "RoadConnection", "signature": "RoadConnection getOtherSidePoint(RoadConnection ref_point)", "full_signature": "@Pure @Override public RoadConnection getOtherSidePoint(RoadConnection ref_point)", "class_method_signature": "RoadPolyline.getOtherSidePoint(RoadConnection ref_point)", "testcase": false, "constructor": false}, {"identifier": "getBeginPoint", "parameters": "()", "modifiers": "@Pure @Override public", "return": "RoadConnection", "signature": "RoadConnection getBeginPoint()", "full_signature": "@Pure @Override public RoadConnection getBeginPoint()", "class_method_signature": "RoadPolyline.getBeginPoint()", "testcase": false, "constructor": false}, {"identifier": "getBeginPoint", "parameters": "(Class<CT> connectionClass)", "modifiers": "@Pure", "return": "CT", "signature": "CT getBeginPoint(Class<CT> connectionClass)", "full_signature": "@Pure CT getBeginPoint(Class<CT> connectionClass)", "class_method_signature": "RoadPolyline.getBeginPoint(Class<CT> connectionClass)", "testcase": false, "constructor": false}, {"identifier": "getEndPoint", "parameters": "()", "modifiers": "@Pure @Override public", "return": "RoadConnection", "signature": "RoadConnection getEndPoint()", "full_signature": "@Pure @Override public RoadConnection getEndPoint()", "class_method_signature": "RoadPolyline.getEndPoint()", "testcase": false, "constructor": false}, {"identifier": "getEndPoint", "parameters": "(Class<CT> connectionClass)", "modifiers": "@Pure", "return": "CT", "signature": "CT getEndPoint(Class<CT> connectionClass)", "full_signature": "@Pure CT getEndPoint(Class<CT> connectionClass)", "class_method_signature": "RoadPolyline.getEndPoint(Class<CT> connectionClass)", "testcase": false, "constructor": false}, {"identifier": "getNearestPoint", "parameters": "(Class<CT> connectionClass, double x, double y)", "modifiers": "@Pure", "return": "CT", "signature": "CT getNearestPoint(Class<CT> connectionClass, double x, double y)", "full_signature": "@Pure CT getNearestPoint(Class<CT> connectionClass, double x, double y)", "class_method_signature": "RoadPolyline.getNearestPoint(Class<CT> connectionClass, double x, double y)", "testcase": false, "constructor": false}, {"identifier": "getNearestPoint", "parameters": "(Class<CT> connectionClass, double x, double y,\n\t\t\tOutputParameter<Double> distance)", "modifiers": "@Pure", "return": "CT", "signature": "CT getNearestPoint(Class<CT> connectionClass, double x, double y,\n\t\t\tOutputParameter<Double> distance)", "full_signature": "@Pure CT getNearestPoint(Class<CT> connectionClass, double x, double y,\n\t\t\tOutputParameter<Double> distance)", "class_method_signature": "RoadPolyline.getNearestPoint(Class<CT> connectionClass, double x, double y,\n\t\t\tOutputParameter<Double> distance)", "testcase": false, "constructor": false}, {"identifier": "getAntepenulvianPoint", "parameters": "()", "modifiers": "@Override @Pure public", "return": "Point2d", "signature": "Point2d getAntepenulvianPoint()", "full_signature": "@Override @Pure public Point2d getAntepenulvianPoint()", "class_method_signature": "RoadPolyline.getAntepenulvianPoint()", "testcase": false, "constructor": false}, {"identifier": "getFirstPoint", "parameters": "()", "modifiers": "@Override @Pure public", "return": "Point2d", "signature": "Point2d getFirstPoint()", "full_signature": "@Override @Pure public Point2d getFirstPoint()", "class_method_signature": "RoadPolyline.getFirstPoint()", "testcase": false, "constructor": false}, {"identifier": "getLastPoint", "parameters": "()", "modifiers": "@Override @Pure public", "return": "Point2d", "signature": "Point2d getLastPoint()", "full_signature": "@Override @Pure public Point2d getLastPoint()", "class_method_signature": "RoadPolyline.getLastPoint()", "testcase": false, "constructor": false}, {"identifier": "invert", "parameters": "()", "modifiers": "@Override public", "return": "RoadPolyline", "signature": "RoadPolyline invert()", "full_signature": "@Override public RoadPolyline invert()", "class_method_signature": "RoadPolyline.invert()", "testcase": false, "constructor": false}, {"identifier": "invertPointsIn", "parameters": "(int groupIndex)", "modifiers": "@Override public", "return": "RoadPolyline", "signature": "RoadPolyline invertPointsIn(int groupIndex)", "full_signature": "@Override public RoadPolyline invertPointsIn(int groupIndex)", "class_method_signature": "RoadPolyline.invertPointsIn(int groupIndex)", "testcase": false, "constructor": false}, {"identifier": "isConnectedTo", "parameters": "(RoadSegment otherSegment)", "modifiers": "@Override @Pure public", "return": "boolean", "signature": "boolean isConnectedTo(RoadSegment otherSegment)", "full_signature": "@Override @Pure public boolean isConnectedTo(RoadSegment otherSegment)", "class_method_signature": "RoadPolyline.isConnectedTo(RoadSegment otherSegment)", "testcase": false, "constructor": false}, {"identifier": "isTraversableFrom", "parameters": "(RoadConnection point)", "modifiers": "@Override @Pure public", "return": "boolean", "signature": "boolean isTraversableFrom(RoadConnection point)", "full_signature": "@Override @Pure public boolean isTraversableFrom(RoadConnection point)", "class_method_signature": "RoadPolyline.isTraversableFrom(RoadConnection point)", "testcase": false, "constructor": false}, {"identifier": "getTrafficDirection", "parameters": "()", "modifiers": "@Override @Pure public", "return": "TrafficDirection", "signature": "TrafficDirection getTrafficDirection()", "full_signature": "@Override @Pure public TrafficDirection getTrafficDirection()", "class_method_signature": "RoadPolyline.getTrafficDirection()", "testcase": false, "constructor": false}, {"identifier": "setTrafficDirection", "parameters": "(TrafficDirection direction)", "modifiers": "@Override public", "return": "void", "signature": "void setTrafficDirection(TrafficDirection direction)", "full_signature": "@Override public void setTrafficDirection(TrafficDirection direction)", "class_method_signature": "RoadPolyline.setTrafficDirection(TrafficDirection direction)", "testcase": false, "constructor": false}, {"identifier": "getRoadType", "parameters": "()", "modifiers": "@Override @Pure public", "return": "RoadType", "signature": "RoadType getRoadType()", "full_signature": "@Override @Pure public RoadType getRoadType()", "class_method_signature": "RoadPolyline.getRoadType()", "testcase": false, "constructor": false}, {"identifier": "setRoadType", "parameters": "(RoadType type)", "modifiers": "@Override public", "return": "void", "signature": "void setRoadType(RoadType type)", "full_signature": "@Override public void setRoadType(RoadType type)", "class_method_signature": "RoadPolyline.setRoadType(RoadType type)", "testcase": false, "constructor": false}, {"identifier": "getRoadNumber", "parameters": "()", "modifiers": "@Override @Pure public", "return": "String", "signature": "String getRoadNumber()", "full_signature": "@Override @Pure public String getRoadNumber()", "class_method_signature": "RoadPolyline.getRoadNumber()", "testcase": false, "constructor": false}, {"identifier": "setRoadNumber", "parameters": "(String number)", "modifiers": "@Override public", "return": "void", "signature": "void setRoadNumber(String number)", "full_signature": "@Override public void setRoadNumber(String number)", "class_method_signature": "RoadPolyline.setRoadNumber(String number)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override @Pure public", "return": "String", "signature": "String getName()", "full_signature": "@Override @Pure public String getName()", "class_method_signature": "RoadPolyline.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void setName(String name)", "full_signature": "@Override public void setName(String name)", "class_method_signature": "RoadPolyline.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getSharedConnectionWith", "parameters": "(RoadSegment otherSegment)", "modifiers": "@Override @Pure public", "return": "RoadConnection", "signature": "RoadConnection getSharedConnectionWith(RoadSegment otherSegment)", "full_signature": "@Override @Pure public RoadConnection getSharedConnectionWith(RoadSegment otherSegment)", "class_method_signature": "RoadPolyline.getSharedConnectionWith(RoadSegment otherSegment)", "testcase": false, "constructor": false}, {"identifier": "getDistanceFromStart", "parameters": "(double ratio)", "modifiers": "@Override @Pure public", "return": "double", "signature": "double getDistanceFromStart(double ratio)", "full_signature": "@Override @Pure public double getDistanceFromStart(double ratio)", "class_method_signature": "RoadPolyline.getDistanceFromStart(double ratio)", "testcase": false, "constructor": false}, {"identifier": "getDistanceToEnd", "parameters": "(double ratio)", "modifiers": "@Override @Pure public", "return": "double", "signature": "double getDistanceToEnd(double ratio)", "full_signature": "@Override @Pure public double getDistanceToEnd(double ratio)", "class_method_signature": "RoadPolyline.getDistanceToEnd(double ratio)", "testcase": false, "constructor": false}, {"identifier": "getTangentAt", "parameters": "(double positionOnSegment)", "modifiers": "@Override @Pure public", "return": "Vector2d", "signature": "Vector2d getTangentAt(double positionOnSegment)", "full_signature": "@Override @Pure public Vector2d getTangentAt(double positionOnSegment)", "class_method_signature": "RoadPolyline.getTangentAt(double positionOnSegment)", "testcase": false, "constructor": false}, {"identifier": "projectsOnPlane", "parameters": "(double positionOnSegment, Point2D<?, ?> position,\n\t\t\tVector2D<?, ?> tangent)", "modifiers": "@Override public", "return": "void", "signature": "void projectsOnPlane(double positionOnSegment, Point2D<?, ?> position,\n\t\t\tVector2D<?, ?> tangent)", "full_signature": "@Override public void projectsOnPlane(double positionOnSegment, Point2D<?, ?> position,\n\t\t\tVector2D<?, ?> tangent)", "class_method_signature": "RoadPolyline.projectsOnPlane(double positionOnSegment, Point2D<?, ?> position,\n\t\t\tVector2D<?, ?> tangent)", "testcase": false, "constructor": false}, {"identifier": "projectsOnPlane", "parameters": "(double positionOnSegment, double shiftDistance,\n\t\t\tPoint2D<?, ?> position, Vector2D<?, ?> tangent)", "modifiers": "@Override public", "return": "void", "signature": "void projectsOnPlane(double positionOnSegment, double shiftDistance,\n\t\t\tPoint2D<?, ?> position, Vector2D<?, ?> tangent)", "full_signature": "@Override public void projectsOnPlane(double positionOnSegment, double shiftDistance,\n\t\t\tPoint2D<?, ?> position, Vector2D<?, ?> tangent)", "class_method_signature": "RoadPolyline.projectsOnPlane(double positionOnSegment, double shiftDistance,\n\t\t\tPoint2D<?, ?> position, Vector2D<?, ?> tangent)", "testcase": false, "constructor": false}, {"identifier": "getGeoLocationForLocationRatio", "parameters": "(double ratio)", "modifiers": "@Override @Pure public final", "return": "Point2d", "signature": "Point2d getGeoLocationForLocationRatio(double ratio)", "full_signature": "@Override @Pure public final Point2d getGeoLocationForLocationRatio(double ratio)", "class_method_signature": "RoadPolyline.getGeoLocationForLocationRatio(double ratio)", "testcase": false, "constructor": false}, {"identifier": "getGeoLocationForLocationRatio", "parameters": "(double ratio, double shifting)", "modifiers": "@Override @Pure public final", "return": "Point2d", "signature": "Point2d getGeoLocationForLocationRatio(double ratio, double shifting)", "full_signature": "@Override @Pure public final Point2d getGeoLocationForLocationRatio(double ratio, double shifting)", "class_method_signature": "RoadPolyline.getGeoLocationForLocationRatio(double ratio, double shifting)", "testcase": false, "constructor": false}, {"identifier": "getGeoLocationForLocationRatio", "parameters": "(double ratio, Point2D<?, ?> geoLocation)", "modifiers": "@Override @Pure public final", "return": "void", "signature": "void getGeoLocationForLocationRatio(double ratio, Point2D<?, ?> geoLocation)", "full_signature": "@Override @Pure public final void getGeoLocationForLocationRatio(double ratio, Point2D<?, ?> geoLocation)", "class_method_signature": "RoadPolyline.getGeoLocationForLocationRatio(double ratio, Point2D<?, ?> geoLocation)", "testcase": false, "constructor": false}, {"identifier": "getGeoLocationForLocationRatio", "parameters": "(double ratio, double shifting,\n\t\t\tPoint2D<?, ?> geoLocation)", "modifiers": "@Override @Pure public final", "return": "void", "signature": "void getGeoLocationForLocationRatio(double ratio, double shifting,\n\t\t\tPoint2D<?, ?> geoLocation)", "full_signature": "@Override @Pure public final void getGeoLocationForLocationRatio(double ratio, double shifting,\n\t\t\tPoint2D<?, ?> geoLocation)", "class_method_signature": "RoadPolyline.getGeoLocationForLocationRatio(double ratio, double shifting,\n\t\t\tPoint2D<?, ?> geoLocation)", "testcase": false, "constructor": false}, {"identifier": "getGeoLocationForLocationRatio", "parameters": "(double ratio, double shifting,\n\t\t\tVector2D<?, ?> tangent)", "modifiers": "@Override @Pure public final", "return": "Point2d", "signature": "Point2d getGeoLocationForLocationRatio(double ratio, double shifting,\n\t\t\tVector2D<?, ?> tangent)", "full_signature": "@Override @Pure public final Point2d getGeoLocationForLocationRatio(double ratio, double shifting,\n\t\t\tVector2D<?, ?> tangent)", "class_method_signature": "RoadPolyline.getGeoLocationForLocationRatio(double ratio, double shifting,\n\t\t\tVector2D<?, ?> tangent)", "testcase": false, "constructor": false}, {"identifier": "getGeoLocationForLocationRatio", "parameters": "(double ratio, double shifting,\n\t\t\tPoint2D<?, ?> output, Vector2D<?, ?> tangent)", "modifiers": "@Override @Pure public final", "return": "void", "signature": "void getGeoLocationForLocationRatio(double ratio, double shifting,\n\t\t\tPoint2D<?, ?> output, Vector2D<?, ?> tangent)", "full_signature": "@Override @Pure public final void getGeoLocationForLocationRatio(double ratio, double shifting,\n\t\t\tPoint2D<?, ?> output, Vector2D<?, ?> tangent)", "class_method_signature": "RoadPolyline.getGeoLocationForLocationRatio(double ratio, double shifting,\n\t\t\tPoint2D<?, ?> output, Vector2D<?, ?> tangent)", "testcase": false, "constructor": false}, {"identifier": "getGeoLocationForDistance", "parameters": "(double desired_distance)", "modifiers": "@Override @Pure public final", "return": "Point2d", "signature": "Point2d getGeoLocationForDistance(double desired_distance)", "full_signature": "@Override @Pure public final Point2d getGeoLocationForDistance(double desired_distance)", "class_method_signature": "RoadPolyline.getGeoLocationForDistance(double desired_distance)", "testcase": false, "constructor": false}, {"identifier": "getGeoLocationForDistance", "parameters": "(double desired_distance, double shifting)", "modifiers": "@Override @Pure public final", "return": "Point2d", "signature": "Point2d getGeoLocationForDistance(double desired_distance, double shifting)", "full_signature": "@Override @Pure public final Point2d getGeoLocationForDistance(double desired_distance, double shifting)", "class_method_signature": "RoadPolyline.getGeoLocationForDistance(double desired_distance, double shifting)", "testcase": false, "constructor": false}, {"identifier": "getGeoLocationForDistance", "parameters": "(double desired_distance, double shifting,\n\t\t\tVector2D<?, ?> tangent)", "modifiers": "@Override @Pure public", "return": "Point2d", "signature": "Point2d getGeoLocationForDistance(double desired_distance, double shifting,\n\t\t\tVector2D<?, ?> tangent)", "full_signature": "@Override @Pure public Point2d getGeoLocationForDistance(double desired_distance, double shifting,\n\t\t\tVector2D<?, ?> tangent)", "class_method_signature": "RoadPolyline.getGeoLocationForDistance(double desired_distance, double shifting,\n\t\t\tVector2D<?, ?> tangent)", "testcase": false, "constructor": false}, {"identifier": "getGeoLocationForDistance", "parameters": "(double desired_distance, Point2D<?, ?> geoLocation)", "modifiers": "@Override @Pure public final", "return": "void", "signature": "void getGeoLocationForDistance(double desired_distance, Point2D<?, ?> geoLocation)", "full_signature": "@Override @Pure public final void getGeoLocationForDistance(double desired_distance, Point2D<?, ?> geoLocation)", "class_method_signature": "RoadPolyline.getGeoLocationForDistance(double desired_distance, Point2D<?, ?> geoLocation)", "testcase": false, "constructor": false}, {"identifier": "getGeoLocationForDistance", "parameters": "(double desired_distance, double shifting,\n\t\t\tPoint2D<?, ?> geoLocation)", "modifiers": "@Override @Pure public final", "return": "void", "signature": "void getGeoLocationForDistance(double desired_distance, double shifting,\n\t\t\tPoint2D<?, ?> geoLocation)", "full_signature": "@Override @Pure public final void getGeoLocationForDistance(double desired_distance, double shifting,\n\t\t\tPoint2D<?, ?> geoLocation)", "class_method_signature": "RoadPolyline.getGeoLocationForDistance(double desired_distance, double shifting,\n\t\t\tPoint2D<?, ?> geoLocation)", "testcase": false, "constructor": false}, {"identifier": "getGeoLocationForDistance", "parameters": "(double desired_distance, double shifting,\n\t\t\tPoint2D<?, ?> geoLocation, Vector2D<?, ?> tangent)", "modifiers": "@Override @Pure public", "return": "void", "signature": "void getGeoLocationForDistance(double desired_distance, double shifting,\n\t\t\tPoint2D<?, ?> geoLocation, Vector2D<?, ?> tangent)", "full_signature": "@Override @Pure public void getGeoLocationForDistance(double desired_distance, double shifting,\n\t\t\tPoint2D<?, ?> geoLocation, Vector2D<?, ?> tangent)", "class_method_signature": "RoadPolyline.getGeoLocationForDistance(double desired_distance, double shifting,\n\t\t\tPoint2D<?, ?> geoLocation, Vector2D<?, ?> tangent)", "testcase": false, "constructor": false}, {"identifier": "setStartPoint", "parameters": "(StandardRoadConnection desiredConnection)", "modifiers": "", "return": "void", "signature": "void setStartPoint(StandardRoadConnection desiredConnection)", "full_signature": " void setStartPoint(StandardRoadConnection desiredConnection)", "class_method_signature": "RoadPolyline.setStartPoint(StandardRoadConnection desiredConnection)", "testcase": false, "constructor": false}, {"identifier": "setEndPoint", "parameters": "(StandardRoadConnection desiredConnection)", "modifiers": "", "return": "void", "signature": "void setEndPoint(StandardRoadConnection desiredConnection)", "full_signature": " void setEndPoint(StandardRoadConnection desiredConnection)", "class_method_signature": "RoadPolyline.setEndPoint(StandardRoadConnection desiredConnection)", "testcase": false, "constructor": false}, {"identifier": "getSegmentChain", "parameters": "()", "modifiers": "@Override @Pure public", "return": "List<RoadSegment>", "signature": "List<RoadSegment> getSegmentChain()", "full_signature": "@Override @Pure public List<RoadSegment> getSegmentChain()", "class_method_signature": "RoadPolyline.getSegmentChain()", "testcase": false, "constructor": false}, {"identifier": "getSegmentChain", "parameters": "(boolean forward_search, boolean backward_search)", "modifiers": "@Override @Pure public", "return": "List<RoadSegment>", "signature": "List<RoadSegment> getSegmentChain(boolean forward_search, boolean backward_search)", "full_signature": "@Override @Pure public List<RoadSegment> getSegmentChain(boolean forward_search, boolean backward_search)", "class_method_signature": "RoadPolyline.getSegmentChain(boolean forward_search, boolean backward_search)", "testcase": false, "constructor": false}, {"identifier": "depthIterator", "parameters": "(\n\t\t\tdouble depth, double position_from_starting_point,\n\t\t\tRoadConnection starting_point, boolean allowManyReplies,\n\t\t\tboolean assumeOrientedSegments,\n\t\t\tDynamicDepthUpdater<RoadSegment, RoadConnection> dynamicDepthUpdate)", "modifiers": "@Override @Pure public", "return": "GraphIterator<RoadSegment, RoadConnection>", "signature": "GraphIterator<RoadSegment, RoadConnection> depthIterator(\n\t\t\tdouble depth, double position_from_starting_point,\n\t\t\tRoadConnection starting_point, boolean allowManyReplies,\n\t\t\tboolean assumeOrientedSegments,\n\t\t\tDynamicDepthUpdater<RoadSegment, RoadConnection> dynamicDepthUpdate)", "full_signature": "@Override @Pure public GraphIterator<RoadSegment, RoadConnection> depthIterator(\n\t\t\tdouble depth, double position_from_starting_point,\n\t\t\tRoadConnection starting_point, boolean allowManyReplies,\n\t\t\tboolean assumeOrientedSegments,\n\t\t\tDynamicDepthUpdater<RoadSegment, RoadConnection> dynamicDepthUpdate)", "class_method_signature": "RoadPolyline.depthIterator(\n\t\t\tdouble depth, double position_from_starting_point,\n\t\t\tRoadConnection starting_point, boolean allowManyReplies,\n\t\t\tboolean assumeOrientedSegments,\n\t\t\tDynamicDepthUpdater<RoadSegment, RoadConnection> dynamicDepthUpdate)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "(\n\t\t\tRoadConnection starting_point, boolean allowManyReplies,\n\t\t\tboolean assumeOrientedSegments)", "modifiers": "@Override @Pure public", "return": "GraphIterator<RoadSegment, RoadConnection>", "signature": "GraphIterator<RoadSegment, RoadConnection> iterator(\n\t\t\tRoadConnection starting_point, boolean allowManyReplies,\n\t\t\tboolean assumeOrientedSegments)", "full_signature": "@Override @Pure public GraphIterator<RoadSegment, RoadConnection> iterator(\n\t\t\tRoadConnection starting_point, boolean allowManyReplies,\n\t\t\tboolean assumeOrientedSegments)", "class_method_signature": "RoadPolyline.iterator(\n\t\t\tRoadConnection starting_point, boolean allowManyReplies,\n\t\t\tboolean assumeOrientedSegments)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override @Pure public", "return": "GraphIterator<RoadSegment, RoadConnection>", "signature": "GraphIterator<RoadSegment, RoadConnection> iterator()", "full_signature": "@Override @Pure public GraphIterator<RoadSegment, RoadConnection> iterator()", "class_method_signature": "RoadPolyline.iterator()", "testcase": false, "constructor": false}, {"identifier": "isFirstPointConnectedTo", "parameters": "(Segment1D<?, ?> segment)", "modifiers": "@Override @Pure public", "return": "boolean", "signature": "boolean isFirstPointConnectedTo(Segment1D<?, ?> segment)", "full_signature": "@Override @Pure public boolean isFirstPointConnectedTo(Segment1D<?, ?> segment)", "class_method_signature": "RoadPolyline.isFirstPointConnectedTo(Segment1D<?, ?> segment)", "testcase": false, "constructor": false}, {"identifier": "isLastPointConnectedTo", "parameters": "(Segment1D<?, ?> segment)", "modifiers": "@Override @Pure public", "return": "boolean", "signature": "boolean isLastPointConnectedTo(Segment1D<?, ?> segment)", "full_signature": "@Override @Pure public boolean isLastPointConnectedTo(Segment1D<?, ?> segment)", "class_method_signature": "RoadPolyline.isLastPointConnectedTo(Segment1D<?, ?> segment)", "testcase": false, "constructor": false}, {"identifier": "addUserData", "parameters": "(String id, Object data)", "modifiers": "@Override public", "return": "void", "signature": "void addUserData(String id, Object data)", "full_signature": "@Override public void addUserData(String id, Object data)", "class_method_signature": "RoadPolyline.addUserData(String id, Object data)", "testcase": false, "constructor": false}, {"identifier": "setUserData", "parameters": "(String id, Object data)", "modifiers": "@Override public", "return": "void", "signature": "void setUserData(String id, Object data)", "full_signature": "@Override public void setUserData(String id, Object data)", "class_method_signature": "RoadPolyline.setUserData(String id, Object data)", "testcase": false, "constructor": false}, {"identifier": "removeUserData", "parameters": "(String id, Object data)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeUserData(String id, Object data)", "full_signature": "@Override public boolean removeUserData(String id, Object data)", "class_method_signature": "RoadPolyline.removeUserData(String id, Object data)", "testcase": false, "constructor": false}, {"identifier": "clearUserData", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void clearUserData(String id)", "full_signature": "@Override public void clearUserData(String id)", "class_method_signature": "RoadPolyline.clearUserData(String id)", "testcase": false, "constructor": false}, {"identifier": "clearUserData", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearUserData()", "full_signature": "@Override public void clearUserData()", "class_method_signature": "RoadPolyline.clearUserData()", "testcase": false, "constructor": false}, {"identifier": "getUserData", "parameters": "(String id)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") @Pure public", "return": "T", "signature": "T getUserData(String id)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") @Pure public T getUserData(String id)", "class_method_signature": "RoadPolyline.getUserData(String id)", "testcase": false, "constructor": false}, {"identifier": "getUserDataCollection", "parameters": "(String id)", "modifiers": "@Override @Pure @SuppressWarnings(\"unchecked\") public", "return": "Collection<? extends T>", "signature": "Collection<? extends T> getUserDataCollection(String id)", "full_signature": "@Override @Pure @SuppressWarnings(\"unchecked\") public Collection<? extends T> getUserDataCollection(String id)", "class_method_signature": "RoadPolyline.getUserDataCollection(String id)", "testcase": false, "constructor": false}, {"identifier": "hasUserData", "parameters": "(String id)", "modifiers": "@Override @Pure public", "return": "boolean", "signature": "boolean hasUserData(String id)", "full_signature": "@Override @Pure public boolean hasUserData(String id)", "class_method_signature": "RoadPolyline.hasUserData(String id)", "testcase": false, "constructor": false}, {"identifier": "containsUserData", "parameters": "(String id, Object data)", "modifiers": "@Override @Pure public", "return": "boolean", "signature": "boolean containsUserData(String id, Object data)", "full_signature": "@Override @Pure public boolean containsUserData(String id, Object data)", "class_method_signature": "RoadPolyline.containsUserData(String id, Object data)", "testcase": false, "constructor": false}, {"identifier": "getLaneCount", "parameters": "()", "modifiers": "@Override @Pure public", "return": "int", "signature": "int getLaneCount()", "full_signature": "@Override @Pure public int getLaneCount()", "class_method_signature": "RoadPolyline.getLaneCount()", "testcase": false, "constructor": false}, {"identifier": "getWidth", "parameters": "()", "modifiers": "@Override @Pure public", "return": "double", "signature": "double getWidth()", "full_signature": "@Override @Pure public double getWidth()", "class_method_signature": "RoadPolyline.getWidth()", "testcase": false, "constructor": false}, {"identifier": "setWidth", "parameters": "(double width)", "modifiers": "@Override public", "return": "void", "signature": "void setWidth(double width)", "full_signature": "@Override public void setWidth(double width)", "class_method_signature": "RoadPolyline.setWidth(double width)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(Point2D<?, ?> point)", "modifiers": "@Override @Pure public final", "return": "double", "signature": "double distance(Point2D<?, ?> point)", "full_signature": "@Override @Pure public final double distance(Point2D<?, ?> point)", "class_method_signature": "RoadPolyline.distance(Point2D<?, ?> point)", "testcase": false, "constructor": false}, {"identifier": "getLaneSize", "parameters": "(int laneIndex)", "modifiers": "@Override @Pure public", "return": "double", "signature": "double getLaneSize(int laneIndex)", "full_signature": "@Override @Pure public double getLaneSize(int laneIndex)", "class_method_signature": "RoadPolyline.getLaneSize(int laneIndex)", "testcase": false, "constructor": false}, {"identifier": "getLaneCenter", "parameters": "(int laneIndex)", "modifiers": "@Override @Pure public", "return": "double", "signature": "double getLaneCenter(int laneIndex)", "full_signature": "@Override @Pure public double getLaneCenter(int laneIndex)", "class_method_signature": "RoadPolyline.getLaneCenter(int laneIndex)", "testcase": false, "constructor": false}, {"identifier": "getRoadBorderDistance", "parameters": "()", "modifiers": "@Override @Pure public", "return": "double", "signature": "double getRoadBorderDistance()", "full_signature": "@Override @Pure public double getRoadBorderDistance()", "class_method_signature": "RoadPolyline.getRoadBorderDistance()", "testcase": false, "constructor": false}, {"identifier": "getLaneDirection", "parameters": "(int laneIndex)", "modifiers": "@Override @Pure public", "return": "Direction1D", "signature": "Direction1D getLaneDirection(int laneIndex)", "full_signature": "@Override @Pure public Direction1D getLaneDirection(int laneIndex)", "class_method_signature": "RoadPolyline.getLaneDirection(int laneIndex)", "testcase": false, "constructor": false}, {"identifier": "getWrappedRoadSegment", "parameters": "()", "modifiers": "@Override @Pure public", "return": "RoadSegment", "signature": "RoadSegment getWrappedRoadSegment()", "full_signature": "@Override @Pure public RoadSegment getWrappedRoadSegment()", "class_method_signature": "RoadPolyline.getWrappedRoadSegment()", "testcase": false, "constructor": false}, {"identifier": "toSegment1D", "parameters": "()", "modifiers": "@Override @Pure protected final", "return": "Segment1D<?, ?>", "signature": "Segment1D<?, ?> toSegment1D()", "full_signature": "@Override @Pure protected final Segment1D<?, ?> toSegment1D()", "class_method_signature": "RoadPolyline.toSegment1D()", "testcase": false, "constructor": false}], "file": "advanced/gis/gisroad/src/main/java/org/arakhne/afc/gis/road/RoadPolyline.java"}, "focal_method": {"identifier": "getDistanceToEnd", "parameters": "(double ratio)", "modifiers": "@Override @Pure public", "return": "double", "body": "@Override\n\t@Pure\n\tpublic double getDistanceToEnd(double ratio) {\n\t\tif (ratio > 1) {\n\t\t\treturn 0.;\n\t\t}\n\t\tfinal double segmentLength = getLength();\n\t\tif (ratio < 0) {\n\t\t\treturn segmentLength;\n\t\t}\n\t\treturn segmentLength - (ratio * segmentLength);\n\t}", "signature": "double getDistanceToEnd(double ratio)", "full_signature": "@Override @Pure public double getDistanceToEnd(double ratio)", "class_method_signature": "RoadPolyline.getDistanceToEnd(double ratio)", "testcase": false, "constructor": false, "invocations": ["getLength"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}