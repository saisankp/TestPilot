{"test_class": {"identifier": "ElectronegativityTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder      builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "tool/charges/src/test/java/org/openscience/cdk/charges/ElectronegativityTest.java"}, "test_case": {"identifier": "testCalculateSigmaElectronegativity_IAtomContainer_IAtom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalculateSigmaElectronegativity_IAtomContainer_IAtom() throws Exception {\n        double[] testResult = {11.308338, 8.7184094, 7.5289848, 7.5289848, 7.5289848};\n        Electronegativity pe = new Electronegativity();\n\n        IAtomContainer molecule = builder.newInstance(IAtomContainer.class);\n        molecule.addAtom(new Atom(\"F\"));\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.addBond(0, 1, IBond.Order.SINGLE);\n\n        addExplicitHydrogens(molecule);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        lpcheck.saturate(molecule);\n\n        for (int i = 0; i < molecule.getAtomCount(); i++)\n            Assert.assertEquals(testResult[i], pe.calculateSigmaElectronegativity(molecule, molecule.getAtom(i)), 0.001);\n\n    }", "signature": "void testCalculateSigmaElectronegativity_IAtomContainer_IAtom()", "full_signature": "@Test public void testCalculateSigmaElectronegativity_IAtomContainer_IAtom()", "class_method_signature": "ElectronegativityTest.testCalculateSigmaElectronegativity_IAtomContainer_IAtom()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "addAtom", "addBond", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "saturate", "getAtomCount", "assertEquals", "calculateSigmaElectronegativity", "getAtom"]}, "focal_class": {"identifier": "Electronegativity", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GasteigerMarsiliPartialCharges peoe  = null;", "modifier": "private", "type": "GasteigerMarsiliPartialCharges", "declarator": "peoe  = null", "var_name": "peoe"}, {"original_string": "private int                            maxI  = 6;", "modifier": "private", "type": "int", "declarator": "maxI  = 6", "var_name": "maxI"}, {"original_string": "private int                            maxRS = 50;", "modifier": "private", "type": "int", "declarator": "maxRS = 50", "var_name": "maxRS"}, {"original_string": "private IAtomContainer                 molSigma;", "modifier": "private", "type": "IAtomContainer", "declarator": "molSigma", "var_name": "molSigma"}, {"original_string": "private IAtomContainer                 acOldS;", "modifier": "private", "type": "IAtomContainer", "declarator": "acOldS", "var_name": "acOldS"}, {"original_string": "private double[]                       marsiliFactors;", "modifier": "private", "type": "double[]", "declarator": "marsiliFactors", "var_name": "marsiliFactors"}, {"original_string": "private final ILoggingTool logger = LoggingToolFactory.createLoggingTool(Electronegativity.class);", "modifier": "private final", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(Electronegativity.class)", "var_name": "logger"}], "methods": [{"identifier": "Electronegativity", "parameters": "()", "modifiers": "public", "return": "", "signature": " Electronegativity()", "full_signature": "public  Electronegativity()", "class_method_signature": "Electronegativity.Electronegativity()", "testcase": false, "constructor": true}, {"identifier": "Electronegativity", "parameters": "(int maxIterations, int maxResonStruc)", "modifiers": "public", "return": "", "signature": " Electronegativity(int maxIterations, int maxResonStruc)", "full_signature": "public  Electronegativity(int maxIterations, int maxResonStruc)", "class_method_signature": "Electronegativity.Electronegativity(int maxIterations, int maxResonStruc)", "testcase": false, "constructor": true}, {"identifier": "calculateSigmaElectronegativity", "parameters": "(IAtomContainer ac, IAtom atom)", "modifiers": "public", "return": "double", "signature": "double calculateSigmaElectronegativity(IAtomContainer ac, IAtom atom)", "full_signature": "public double calculateSigmaElectronegativity(IAtomContainer ac, IAtom atom)", "class_method_signature": "Electronegativity.calculateSigmaElectronegativity(IAtomContainer ac, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "calculateSigmaElectronegativity", "parameters": "(IAtomContainer ac, IAtom atom, int maxIterations, int maxResonStruc)", "modifiers": "public", "return": "double", "signature": "double calculateSigmaElectronegativity(IAtomContainer ac, IAtom atom, int maxIterations, int maxResonStruc)", "full_signature": "public double calculateSigmaElectronegativity(IAtomContainer ac, IAtom atom, int maxIterations, int maxResonStruc)", "class_method_signature": "Electronegativity.calculateSigmaElectronegativity(IAtomContainer ac, IAtom atom, int maxIterations, int maxResonStruc)", "testcase": false, "constructor": false}, {"identifier": "setMaxIterations", "parameters": "(int maxIterations)", "modifiers": "public", "return": "void", "signature": "void setMaxIterations(int maxIterations)", "full_signature": "public void setMaxIterations(int maxIterations)", "class_method_signature": "Electronegativity.setMaxIterations(int maxIterations)", "testcase": false, "constructor": false}, {"identifier": "setMaxResonStruc", "parameters": "(int maxResonStruc)", "modifiers": "public", "return": "void", "signature": "void setMaxResonStruc(int maxResonStruc)", "full_signature": "public void setMaxResonStruc(int maxResonStruc)", "class_method_signature": "Electronegativity.setMaxResonStruc(int maxResonStruc)", "testcase": false, "constructor": false}, {"identifier": "getMaxIterations", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxIterations()", "full_signature": "public int getMaxIterations()", "class_method_signature": "Electronegativity.getMaxIterations()", "testcase": false, "constructor": false}, {"identifier": "getMaxResonStruc", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxResonStruc()", "full_signature": "public int getMaxResonStruc()", "class_method_signature": "Electronegativity.getMaxResonStruc()", "testcase": false, "constructor": false}], "file": "tool/charges/src/main/java/org/openscience/cdk/charges/Electronegativity.java"}, "focal_method": {"identifier": "calculateSigmaElectronegativity", "parameters": "(IAtomContainer ac, IAtom atom)", "modifiers": "public", "return": "double", "body": "public double calculateSigmaElectronegativity(IAtomContainer ac, IAtom atom) {\n\n        return calculateSigmaElectronegativity(ac, atom, maxI, maxRS);\n    }", "signature": "double calculateSigmaElectronegativity(IAtomContainer ac, IAtom atom)", "full_signature": "public double calculateSigmaElectronegativity(IAtomContainer ac, IAtom atom)", "class_method_signature": "Electronegativity.calculateSigmaElectronegativity(IAtomContainer ac, IAtom atom)", "testcase": false, "constructor": false, "invocations": ["calculateSigmaElectronegativity"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}