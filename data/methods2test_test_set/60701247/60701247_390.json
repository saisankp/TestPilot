{"test_class": {"identifier": "PersistentSHA256ChecksumsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String DISTRIBUTION = \"https://services.gradle.org/distributions/gradle-5.6.2-bin.zip\";", "modifier": "private static", "type": "String", "declarator": "DISTRIBUTION = \"https://services.gradle.org/distributions/gradle-5.6.2-bin.zip\"", "var_name": "DISTRIBUTION"}, {"original_string": "private static String SHA256 = \"0986244820e4a35d32d91df2ec4b768b5ba5d6c8246753794f85159f9963ec12\";", "modifier": "private static", "type": "String", "declarator": "SHA256 = \"0986244820e4a35d32d91df2ec4b768b5ba5d6c8246753794f85159f9963ec12\"", "var_name": "SHA256"}], "file": "android/testSrc/com/android/tools/idea/gradle/util/PersistentSHA256ChecksumsTest.java"}, "test_case": {"identifier": "testChecksumStored", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testChecksumStored() {\n    String DISTRIBUTION_OTHER = \"https://services.gradle.org/distributions/gradle-5.6.3-bin.zip\";\n    String SHA256_OTHER = \"NOT_VALID_SHA256\";\n\n    PersistentSHA256Checksums checksums = new PersistentSHA256Checksums();\n    // Should be empty initially\n    assertThat(checksums.myStoredChecksums == null || checksums.myStoredChecksums.isEmpty()).isTrue();\n    verifyStored(checksums, false);\n    // Add a different entry to the one that is looked for\n    checksums.storeChecksum(DISTRIBUTION_OTHER, SHA256);\n    assertThat(checksums.myStoredChecksums).hasSize(1);\n    verifyStored(checksums, false);\n    // Add the same entry but with different SHA256\n    checksums.storeChecksum(DISTRIBUTION, SHA256_OTHER);\n    assertThat(checksums.myStoredChecksums).hasSize(2);\n    verifyStored(checksums, false);\n    // Replace existing entry with the expected SHA256\n    checksums.storeChecksum(DISTRIBUTION, SHA256);\n    assertThat(checksums.myStoredChecksums).hasSize(2);\n    verifyStored(checksums, true);\n  }", "signature": "void testChecksumStored()", "full_signature": "@Test public void testChecksumStored()", "class_method_signature": "PersistentSHA256ChecksumsTest.testChecksumStored()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "isEmpty", "verifyStored", "storeChecksum", "hasSize", "assertThat", "verifyStored", "storeChecksum", "hasSize", "assertThat", "verifyStored", "storeChecksum", "hasSize", "assertThat", "verifyStored"]}, "focal_class": {"identifier": "PersistentSHA256Checksums", "superclass": "", "interfaces": "implements PersistentStateComponent<PersistentSHA256Checksums>", "fields": [{"original_string": "public HashMap<String, String> myStoredChecksums;", "modifier": "public", "type": "HashMap<String, String>", "declarator": "myStoredChecksums", "var_name": "myStoredChecksums"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "PersistentSHA256Checksums", "signature": "PersistentSHA256Checksums getInstance()", "full_signature": "public static PersistentSHA256Checksums getInstance()", "class_method_signature": "PersistentSHA256Checksums.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "@Override public", "return": "PersistentSHA256Checksums", "signature": "PersistentSHA256Checksums getState()", "full_signature": "@Override public PersistentSHA256Checksums getState()", "class_method_signature": "PersistentSHA256Checksums.getState()", "testcase": false, "constructor": false}, {"identifier": "loadState", "parameters": "(@NotNull PersistentSHA256Checksums state)", "modifiers": "@Override public", "return": "void", "signature": "void loadState(@NotNull PersistentSHA256Checksums state)", "full_signature": "@Override public void loadState(@NotNull PersistentSHA256Checksums state)", "class_method_signature": "PersistentSHA256Checksums.loadState(@NotNull PersistentSHA256Checksums state)", "testcase": false, "constructor": false}, {"identifier": "isChecksumStored", "parameters": "(@Nullable String distribution, @Nullable String checksum)", "modifiers": "public", "return": "boolean", "signature": "boolean isChecksumStored(@Nullable String distribution, @Nullable String checksum)", "full_signature": "public boolean isChecksumStored(@Nullable String distribution, @Nullable String checksum)", "class_method_signature": "PersistentSHA256Checksums.isChecksumStored(@Nullable String distribution, @Nullable String checksum)", "testcase": false, "constructor": false}, {"identifier": "storeChecksum", "parameters": "(@NotNull String distribution, @NotNull String checksum)", "modifiers": "public", "return": "void", "signature": "void storeChecksum(@NotNull String distribution, @NotNull String checksum)", "full_signature": "public void storeChecksum(@NotNull String distribution, @NotNull String checksum)", "class_method_signature": "PersistentSHA256Checksums.storeChecksum(@NotNull String distribution, @NotNull String checksum)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/gradle/util/PersistentSHA256Checksums.java"}, "focal_method": {"identifier": "storeChecksum", "parameters": "(@NotNull String distribution, @NotNull String checksum)", "modifiers": "public", "return": "void", "body": "public void storeChecksum(@NotNull String distribution, @NotNull String checksum) {\n    if (myStoredChecksums == null) {\n      myStoredChecksums = new HashMap<>();\n    }\n    myStoredChecksums.put(distribution, checksum);\n  }", "signature": "void storeChecksum(@NotNull String distribution, @NotNull String checksum)", "full_signature": "public void storeChecksum(@NotNull String distribution, @NotNull String checksum)", "class_method_signature": "PersistentSHA256Checksums.storeChecksum(@NotNull String distribution, @NotNull String checksum)", "testcase": false, "constructor": false, "invocations": ["put"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}