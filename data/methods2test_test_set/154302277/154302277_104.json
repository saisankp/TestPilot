{"test_class": {"identifier": "DeviceNetworkAddressCleanupServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEVICE_IDENTIFICATION = \"test-device\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_IDENTIFICATION = \"test-device\"", "var_name": "DEVICE_IDENTIFICATION"}, {"original_string": "private static final String LOCALHOST = \"127.0.0.1\";", "modifier": "private static final", "type": "String", "declarator": "LOCALHOST = \"127.0.0.1\"", "var_name": "LOCALHOST"}, {"original_string": "private static final String IP_ADDRESS = \"192.168.0.13\";", "modifier": "private static final", "type": "String", "declarator": "IP_ADDRESS = \"192.168.0.13\"", "var_name": "IP_ADDRESS"}, {"original_string": "private DeviceRepository deviceRepository;", "modifier": "private", "type": "DeviceRepository", "declarator": "deviceRepository", "var_name": "deviceRepository"}, {"original_string": "private DeviceNetworkAddressCleanupService deviceNetworkAddressCleanupService;", "modifier": "private", "type": "DeviceNetworkAddressCleanupService", "declarator": "deviceNetworkAddressCleanupService", "var_name": "deviceNetworkAddressCleanupService"}, {"original_string": "private String host;", "modifier": "private", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private InetAddress inetAddress;", "modifier": "private", "type": "InetAddress", "declarator": "inetAddress", "var_name": "inetAddress"}], "file": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/DeviceNetworkAddressCleanupServiceTest.java"}, "test_case": {"identifier": "devicesAreCleanedWhenTheNetworkAddressIsNotAllowedToHaveDuplicates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void devicesAreCleanedWhenTheNetworkAddressIsNotAllowedToHaveDuplicates() throws Exception {\n        this.withConfigurationNotAllowingDuplicates();\n        this.withHostAndInetAddress(IP_ADDRESS);\n        this.theNetworkAddressIsUsedBy(this.inetAddress, \"device1\", \"device2\");\n\n        this.deviceNetworkAddressCleanupService.clearDuplicateAddresses(DEVICE_IDENTIFICATION, this.host);\n\n        verify(this.deviceRepository, times(1)).findByNetworkAddress(this.inetAddress);\n        final ArgumentCaptor<Device> deviceCaptor = ArgumentCaptor.forClass(Device.class);\n        verify(this.deviceRepository, times(2)).save(deviceCaptor.capture());\n        final List<Device> savedDevices = deviceCaptor.getAllValues();\n        this.deviceIsSavedWithCleanedNetworkAddress(\"device1\", savedDevices);\n        this.deviceIsSavedWithCleanedNetworkAddress(\"device2\", savedDevices);\n    }", "signature": "void devicesAreCleanedWhenTheNetworkAddressIsNotAllowedToHaveDuplicates()", "full_signature": "@Test public void devicesAreCleanedWhenTheNetworkAddressIsNotAllowedToHaveDuplicates()", "class_method_signature": "DeviceNetworkAddressCleanupServiceTest.devicesAreCleanedWhenTheNetworkAddressIsNotAllowedToHaveDuplicates()", "testcase": true, "constructor": false, "invocations": ["withConfigurationNotAllowingDuplicates", "withHostAndInetAddress", "theNetworkAddressIsUsedBy", "clearDuplicateAddresses", "findByNetworkAddress", "verify", "times", "forClass", "save", "verify", "times", "capture", "getAllValues", "deviceIsSavedWithCleanedNetworkAddress", "deviceIsSavedWithCleanedNetworkAddress"]}, "focal_class": {"identifier": "DeviceNetworkAddressCleanupService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DeviceNetworkAddressCleanupService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DeviceNetworkAddressCleanupService.class)", "var_name": "LOGGER"}, {"original_string": "private static final InetAddress LOCALHOST = getLocalHost();", "modifier": "private static final", "type": "InetAddress", "declarator": "LOCALHOST = getLocalHost()", "var_name": "LOCALHOST"}, {"original_string": "private final boolean allowMultipleDevicesPerNetworkAddress;", "modifier": "private final", "type": "boolean", "declarator": "allowMultipleDevicesPerNetworkAddress", "var_name": "allowMultipleDevicesPerNetworkAddress"}, {"original_string": "private final List<String> ipRangesAllowingMultipleDevicesPerAddress;", "modifier": "private final", "type": "List<String>", "declarator": "ipRangesAllowingMultipleDevicesPerAddress", "var_name": "ipRangesAllowingMultipleDevicesPerAddress"}, {"original_string": "private final Predicate<InetAddress> duplicatesAllowedByConfiguration;", "modifier": "private final", "type": "Predicate<InetAddress>", "declarator": "duplicatesAllowedByConfiguration", "var_name": "duplicatesAllowedByConfiguration"}, {"original_string": "private final DeviceRepository deviceRepository;", "modifier": "private final", "type": "DeviceRepository", "declarator": "deviceRepository", "var_name": "deviceRepository"}], "methods": [{"identifier": "DeviceNetworkAddressCleanupService", "parameters": "(final DeviceRepository deviceRepository,\n            @Value(\"${device.network.address.cleanup.never}\") final boolean allowMultipleDevicesPerNetworkAddress,\n            @Value(\"#{'${device.network.address.cleanup.duplicates.allowed}'.split(',')}\") final List<String> ipRangesAllowingMultipleDevicesPerAddress)", "modifiers": "@Autowired public", "return": "", "signature": " DeviceNetworkAddressCleanupService(final DeviceRepository deviceRepository,\n            @Value(\"${device.network.address.cleanup.never}\") final boolean allowMultipleDevicesPerNetworkAddress,\n            @Value(\"#{'${device.network.address.cleanup.duplicates.allowed}'.split(',')}\") final List<String> ipRangesAllowingMultipleDevicesPerAddress)", "full_signature": "@Autowired public  DeviceNetworkAddressCleanupService(final DeviceRepository deviceRepository,\n            @Value(\"${device.network.address.cleanup.never}\") final boolean allowMultipleDevicesPerNetworkAddress,\n            @Value(\"#{'${device.network.address.cleanup.duplicates.allowed}'.split(',')}\") final List<String> ipRangesAllowingMultipleDevicesPerAddress)", "class_method_signature": "DeviceNetworkAddressCleanupService.DeviceNetworkAddressCleanupService(final DeviceRepository deviceRepository,\n            @Value(\"${device.network.address.cleanup.never}\") final boolean allowMultipleDevicesPerNetworkAddress,\n            @Value(\"#{'${device.network.address.cleanup.duplicates.allowed}'.split(',')}\") final List<String> ipRangesAllowingMultipleDevicesPerAddress)", "testcase": false, "constructor": true}, {"identifier": "getLocalHost", "parameters": "()", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress getLocalHost()", "full_signature": "public static InetAddress getLocalHost()", "class_method_signature": "DeviceNetworkAddressCleanupService.getLocalHost()", "testcase": false, "constructor": false}, {"identifier": "duplicatesAllowed", "parameters": "(final List<String> configuredRanges)", "modifiers": "private", "return": "Predicate<InetAddress>", "signature": "Predicate<InetAddress> duplicatesAllowed(final List<String> configuredRanges)", "full_signature": "private Predicate<InetAddress> duplicatesAllowed(final List<String> configuredRanges)", "class_method_signature": "DeviceNetworkAddressCleanupService.duplicatesAllowed(final List<String> configuredRanges)", "testcase": false, "constructor": false}, {"identifier": "asBigInteger", "parameters": "(final InetAddress inetAddress)", "modifiers": "private", "return": "BigInteger", "signature": "BigInteger asBigInteger(final InetAddress inetAddress)", "full_signature": "private BigInteger asBigInteger(final InetAddress inetAddress)", "class_method_signature": "DeviceNetworkAddressCleanupService.asBigInteger(final InetAddress inetAddress)", "testcase": false, "constructor": false}, {"identifier": "asInetAddress", "parameters": "(final String host)", "modifiers": "private", "return": "InetAddress", "signature": "InetAddress asInetAddress(final String host)", "full_signature": "private InetAddress asInetAddress(final String host)", "class_method_signature": "DeviceNetworkAddressCleanupService.asInetAddress(final String host)", "testcase": false, "constructor": false}, {"identifier": "rangePredicate", "parameters": "(final String configuredRange)", "modifiers": "private", "return": "Predicate<BigInteger>", "signature": "Predicate<BigInteger> rangePredicate(final String configuredRange)", "full_signature": "private Predicate<BigInteger> rangePredicate(final String configuredRange)", "class_method_signature": "DeviceNetworkAddressCleanupService.rangePredicate(final String configuredRange)", "testcase": false, "constructor": false}, {"identifier": "fromTo", "parameters": "(final String configuredRange)", "modifiers": "private", "return": "String[]", "signature": "String[] fromTo(final String configuredRange)", "full_signature": "private String[] fromTo(final String configuredRange)", "class_method_signature": "DeviceNetworkAddressCleanupService.fromTo(final String configuredRange)", "testcase": false, "constructor": false}, {"identifier": "clearDuplicateAddresses", "parameters": "(final String deviceIdentification, final String host)", "modifiers": "public", "return": "void", "signature": "void clearDuplicateAddresses(final String deviceIdentification, final String host)", "full_signature": "public void clearDuplicateAddresses(final String deviceIdentification, final String host)", "class_method_signature": "DeviceNetworkAddressCleanupService.clearDuplicateAddresses(final String deviceIdentification, final String host)", "testcase": false, "constructor": false}, {"identifier": "clearDuplicateAddresses", "parameters": "(final String deviceIdentification, final InetAddress inetAddress)", "modifiers": "public", "return": "void", "signature": "void clearDuplicateAddresses(final String deviceIdentification, final InetAddress inetAddress)", "full_signature": "public void clearDuplicateAddresses(final String deviceIdentification, final InetAddress inetAddress)", "class_method_signature": "DeviceNetworkAddressCleanupService.clearDuplicateAddresses(final String deviceIdentification, final InetAddress inetAddress)", "testcase": false, "constructor": false}, {"identifier": "allowDuplicateEntries", "parameters": "(final InetAddress inetAddress)", "modifiers": "public", "return": "boolean", "signature": "boolean allowDuplicateEntries(final InetAddress inetAddress)", "full_signature": "public boolean allowDuplicateEntries(final InetAddress inetAddress)", "class_method_signature": "DeviceNetworkAddressCleanupService.allowDuplicateEntries(final InetAddress inetAddress)", "testcase": false, "constructor": false}, {"identifier": "clearAddressForDevice", "parameters": "(final String exceptForThisIdentification)", "modifiers": "private", "return": "Predicate<Device>", "signature": "Predicate<Device> clearAddressForDevice(final String exceptForThisIdentification)", "full_signature": "private Predicate<Device> clearAddressForDevice(final String exceptForThisIdentification)", "class_method_signature": "DeviceNetworkAddressCleanupService.clearAddressForDevice(final String exceptForThisIdentification)", "testcase": false, "constructor": false}, {"identifier": "clearNetworkAddress", "parameters": "(final Device device)", "modifiers": "private", "return": "void", "signature": "void clearNetworkAddress(final Device device)", "full_signature": "private void clearNetworkAddress(final Device device)", "class_method_signature": "DeviceNetworkAddressCleanupService.clearNetworkAddress(final Device device)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-core/src/main/java/org/opensmartgridplatform/core/application/services/DeviceNetworkAddressCleanupService.java"}, "focal_method": {"identifier": "clearDuplicateAddresses", "parameters": "(final String deviceIdentification, final String host)", "modifiers": "public", "return": "void", "body": "public void clearDuplicateAddresses(final String deviceIdentification, final String host)\n            throws UnknownHostException {\n\n        this.clearDuplicateAddresses(deviceIdentification, InetAddress.getByName(host));\n    }", "signature": "void clearDuplicateAddresses(final String deviceIdentification, final String host)", "full_signature": "public void clearDuplicateAddresses(final String deviceIdentification, final String host)", "class_method_signature": "DeviceNetworkAddressCleanupService.clearDuplicateAddresses(final String deviceIdentification, final String host)", "testcase": false, "constructor": false, "invocations": ["clearDuplicateAddresses", "getByName"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}