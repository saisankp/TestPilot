{"test_class": {"identifier": "StreamUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/de/slackspace/openkeepass/util/StreamUtilsTest.java"}, "test_case": {"identifier": "shouldNotCrashOnNullStreamInput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotCrashOnNullStreamInput() throws IOException {\n        int read = StreamUtils.read(null, new byte[3]);\n        Assert.assertEquals(-1, read);\n    }", "signature": "void shouldNotCrashOnNullStreamInput()", "full_signature": "@Test public void shouldNotCrashOnNullStreamInput()", "class_method_signature": "StreamUtilsTest.shouldNotCrashOnNullStreamInput()", "testcase": true, "constructor": false, "invocations": ["read", "assertEquals"]}, "focal_class": {"identifier": "StreamUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int BUFFER_SIZE = 4096;", "modifier": "private static final", "type": "int", "declarator": "BUFFER_SIZE = 4096", "var_name": "BUFFER_SIZE"}, {"original_string": "private static final int EOF = -1;", "modifier": "private static final", "type": "int", "declarator": "EOF = -1", "var_name": "EOF"}], "methods": [{"identifier": "StreamUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " StreamUtils()", "full_signature": "private  StreamUtils()", "class_method_signature": "StreamUtils.StreamUtils()", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(InputStream input, byte[] buffer)", "modifiers": "public static", "return": "int", "signature": "int read(InputStream input, byte[] buffer)", "full_signature": "public static int read(InputStream input, byte[] buffer)", "class_method_signature": "StreamUtils.read(InputStream input, byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(InputStream input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(InputStream input)", "full_signature": "public static byte[] toByteArray(InputStream input)", "class_method_signature": "StreamUtils.toByteArray(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "copyLarge", "parameters": "(InputStream input, OutputStream output, byte[] buffer)", "modifiers": "private static", "return": "long", "signature": "long copyLarge(InputStream input, OutputStream output, byte[] buffer)", "full_signature": "private static long copyLarge(InputStream input, OutputStream output, byte[] buffer)", "class_method_signature": "StreamUtils.copyLarge(InputStream input, OutputStream output, byte[] buffer)", "testcase": false, "constructor": false}], "file": "src/de/slackspace/openkeepass/util/StreamUtils.java"}, "focal_method": {"identifier": "read", "parameters": "(InputStream input, byte[] buffer)", "modifiers": "public static", "return": "int", "body": "public static int read(InputStream input, byte[] buffer) throws IOException {\n        if(input == null || buffer == null) {\n            return -1;\n        }\n\n        int remaining = buffer.length;\n        while (remaining > 0) {\n            int location = buffer.length - remaining;\n            int count = input.read(buffer, 0 + location, remaining);\n            if (EOF == count) { // EOF\n                break;\n            }\n            remaining -= count;\n        }\n        return buffer.length - remaining;\n    }", "signature": "int read(InputStream input, byte[] buffer)", "full_signature": "public static int read(InputStream input, byte[] buffer)", "class_method_signature": "StreamUtils.read(InputStream input, byte[] buffer)", "testcase": false, "constructor": false, "invocations": ["read"]}, "repository": {"repo_id": 102137829, "url": "https://github.com/privacyint/ThornSec", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 10, "size": 20604, "license": "licensed"}}