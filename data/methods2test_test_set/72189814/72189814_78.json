{"test_class": {"identifier": "HaloTest", "superclass": "extends HaloRobolectricTest", "interfaces": "", "fields": [{"original_string": "private CallbackFlag mCallbackFlag;", "modifier": "private", "type": "CallbackFlag", "declarator": "mCallbackFlag", "var_name": "mCallbackFlag"}], "file": "sdk/halo-sdk/src/test/java/com/mobgen/halo/android/sdk/api/HaloTest.java"}, "test_case": {"identifier": "thatIntegrateInstallationListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void thatIntegrateInstallationListener() throws InterruptedException {\n        HaloMock.create().ready(givenAReadyListenerFlagged(mCallbackFlag));\n        TestUtils.flushMainThread();\n        assertThat(mCallbackFlag.timesExecuted()).isGreaterThan(0);\n    }", "signature": "void thatIntegrateInstallationListener()", "full_signature": "@Test public void thatIntegrateInstallationListener()", "class_method_signature": "HaloTest.thatIntegrateInstallationListener()", "testcase": true, "constructor": false, "invocations": ["ready", "create", "givenAReadyListenerFlagged", "flushMainThread", "isGreaterThan", "assertThat", "timesExecuted"]}, "focal_class": {"identifier": "Halo", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Halo sHalo;", "modifier": "private static", "type": "Halo", "declarator": "sHalo", "var_name": "sHalo"}, {"original_string": "private HaloFramework mFramework;", "modifier": "private", "type": "HaloFramework", "declarator": "mFramework", "var_name": "mFramework"}, {"original_string": "private HaloCore mCore;", "modifier": "private", "type": "HaloCore", "declarator": "mCore", "var_name": "mCore"}, {"original_string": "private ReadyChecker mReadyChecker;", "modifier": "private", "type": "ReadyChecker", "declarator": "mReadyChecker", "var_name": "mReadyChecker"}], "methods": [{"identifier": "Halo", "parameters": "(@NonNull HaloConfig.Builder configurationBuilder,\n         @NonNull HaloSessionManager sessionManager,\n         @Nullable Credentials credentials,\n         @Nullable List<TagCollector> tagCollectors,\n         @Nullable StartupProcess[] processes)", "modifiers": "", "return": "", "signature": " Halo(@NonNull HaloConfig.Builder configurationBuilder,\n         @NonNull HaloSessionManager sessionManager,\n         @Nullable Credentials credentials,\n         @Nullable List<TagCollector> tagCollectors,\n         @Nullable StartupProcess[] processes)", "full_signature": "  Halo(@NonNull HaloConfig.Builder configurationBuilder,\n         @NonNull HaloSessionManager sessionManager,\n         @Nullable Credentials credentials,\n         @Nullable List<TagCollector> tagCollectors,\n         @Nullable StartupProcess[] processes)", "class_method_signature": "Halo.Halo(@NonNull HaloConfig.Builder configurationBuilder,\n         @NonNull HaloSessionManager sessionManager,\n         @Nullable Credentials credentials,\n         @Nullable List<TagCollector> tagCollectors,\n         @Nullable StartupProcess[] processes)", "testcase": false, "constructor": true}, {"identifier": "printHaloFootPrint", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void printHaloFootPrint()", "full_signature": "private void printHaloFootPrint()", "class_method_signature": "Halo.printHaloFootPrint()", "testcase": false, "constructor": false}, {"identifier": "ensureExists", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void ensureExists()", "full_signature": "private static void ensureExists()", "class_method_signature": "Halo.ensureExists()", "testcase": false, "constructor": false}, {"identifier": "uninstall", "parameters": "()", "modifiers": "@Keep @Api(1.3) public", "return": "void", "signature": "void uninstall()", "full_signature": "@Keep @Api(1.3) public void uninstall()", "class_method_signature": "Halo.uninstall()", "testcase": false, "constructor": false}, {"identifier": "instance", "parameters": "()", "modifiers": "@Keep @Api(1.0) @NonNull public static", "return": "Halo", "signature": "Halo instance()", "full_signature": "@Keep @Api(1.0) @NonNull public static Halo instance()", "class_method_signature": "Halo.instance()", "testcase": false, "constructor": false}, {"identifier": "core", "parameters": "()", "modifiers": "@Keep @Api(1.3) @NonNull public static", "return": "HaloCore", "signature": "HaloCore core()", "full_signature": "@Keep @Api(1.3) @NonNull public static HaloCore core()", "class_method_signature": "Halo.core()", "testcase": false, "constructor": false}, {"identifier": "isInitialized", "parameters": "()", "modifiers": "@Keep @Api(1.0) public static", "return": "boolean", "signature": "boolean isInitialized()", "full_signature": "@Keep @Api(1.0) public static boolean isInitialized()", "class_method_signature": "Halo.isInitialized()", "testcase": false, "constructor": false}, {"identifier": "installer", "parameters": "(@NonNull Context context)", "modifiers": "@Keep @Api(1.0) @NonNull public static", "return": "Installer", "signature": "Installer installer(@NonNull Context context)", "full_signature": "@Keep @Api(1.0) @NonNull public static Installer installer(@NonNull Context context)", "class_method_signature": "Halo.installer(@NonNull Context context)", "testcase": false, "constructor": false}, {"identifier": "ready", "parameters": "(@NonNull final HaloReadyListener listener)", "modifiers": "@Keep @Api(2.0) public", "return": "void", "signature": "void ready(@NonNull final HaloReadyListener listener)", "full_signature": "@Keep @Api(2.0) public void ready(@NonNull final HaloReadyListener listener)", "class_method_signature": "Halo.ready(@NonNull final HaloReadyListener listener)", "testcase": false, "constructor": false}, {"identifier": "context", "parameters": "()", "modifiers": "@Keep @Api(1.0) @NonNull public", "return": "Context", "signature": "Context context()", "full_signature": "@Keep @Api(1.0) @NonNull public Context context()", "class_method_signature": "Halo.context()", "testcase": false, "constructor": false}, {"identifier": "framework", "parameters": "()", "modifiers": "@Keep @NonNull @Api(1.1) public", "return": "HaloFramework", "signature": "HaloFramework framework()", "full_signature": "@Keep @NonNull @Api(1.1) public HaloFramework framework()", "class_method_signature": "Halo.framework()", "testcase": false, "constructor": false}, {"identifier": "getCore", "parameters": "()", "modifiers": "@Keep @Api(1.0) @NonNull public", "return": "HaloCore", "signature": "HaloCore getCore()", "full_signature": "@Keep @Api(1.0) @NonNull public HaloCore getCore()", "class_method_signature": "Halo.getCore()", "testcase": false, "constructor": false}, {"identifier": "manager", "parameters": "()", "modifiers": "@Keep @Api(2.0) @NonNull public", "return": "HaloManagerApi", "signature": "HaloManagerApi manager()", "full_signature": "@Keep @Api(2.0) @NonNull public HaloManagerApi manager()", "class_method_signature": "Halo.manager()", "testcase": false, "constructor": false}], "file": "sdk/halo-sdk/src/main/java/com/mobgen/halo/android/sdk/api/Halo.java"}, "focal_method": {"identifier": "ready", "parameters": "(@NonNull final HaloReadyListener listener)", "modifiers": "@Keep @Api(2.0) public", "return": "void", "body": "@Keep\n    @Api(2.0)\n    public void ready(@NonNull final HaloReadyListener listener) {\n        ensureExists();\n        try {\n            mReadyChecker.checkReady(listener);\n        } catch (InterruptedException e) {\n            Halog.e(getClass(), \"A thread has been interrupted abruptly\", e);\n            listener.onHaloReady();\n        }\n    }", "signature": "void ready(@NonNull final HaloReadyListener listener)", "full_signature": "@Keep @Api(2.0) public void ready(@NonNull final HaloReadyListener listener)", "class_method_signature": "Halo.ready(@NonNull final HaloReadyListener listener)", "testcase": false, "constructor": false, "invocations": ["ensureExists", "checkReady", "e", "getClass", "onHaloReady"]}, "repository": {"repo_id": 72189814, "url": "https://github.com/mobgen/halo-android", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 3343, "license": "licensed"}}