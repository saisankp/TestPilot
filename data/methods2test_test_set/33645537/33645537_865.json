{"test_class": {"identifier": "CacheEntryListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int THREADS = 10;", "modifier": "private static final", "type": "int", "declarator": "THREADS = 10", "var_name": "THREADS"}, {"original_string": "private static final int N = 10;", "modifier": "private static final", "type": "int", "declarator": "N = 10", "var_name": "N"}, {"original_string": "private static final int OPS = 100000;", "modifier": "private static final", "type": "int", "declarator": "OPS = 100000", "var_name": "OPS"}, {"original_string": "private static CacheEntryList.Observer OBSERVER =\n        new CacheEntryList.Observer<Id, Item>()\n        {\n            @Override\n            public void adding(Item item)\n            {\n            }\n\n            @Override\n            public void evicting(Item victim)\n            {\n                int n = random.nextInt(N) + 1;\n                Item nextVictim = victim;\n                for (int i = 0; i < n; i++) {\n                    nextVictim = nextVictim.next();\n                }\n                if (nextVictim == victim) {\n                    nextVictim = nextVictim.next();\n                }\n                nextVictim.okToEvict(true);\n            }\n\n            private final Random random = new Random();\n        };", "modifier": "private static", "type": "CacheEntryList.Observer", "declarator": "OBSERVER =\n        new CacheEntryList.Observer<Id, Item>()\n        {\n            @Override\n            public void adding(Item item)\n            {\n            }\n\n            @Override\n            public void evicting(Item victim)\n            {\n                int n = random.nextInt(N) + 1;\n                Item nextVictim = victim;\n                for (int i = 0; i < n; i++) {\n                    nextVictim = nextVictim.next();\n                }\n                if (nextVictim == victim) {\n                    nextVictim = nextVictim.next();\n                }\n                nextVictim.okToEvict(true);\n            }\n\n            private final Random random = new Random();\n        }", "var_name": "OBSERVER"}, {"original_string": "private final CacheEntryList<Id, Item> clock = new CacheEntryList<Id, Item>(OBSERVER);", "modifier": "private final", "type": "CacheEntryList<Id, Item>", "declarator": "clock = new CacheEntryList<Id, Item>(OBSERVER)", "var_name": "clock"}], "file": "zava/src/test/java/com/github/geophile/erdo/immutableitemcache/CacheEntryListTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws InterruptedException\n    {\n        for (int i = 0; i < N; i++) {\n            Item item = new Item(new Id(i));\n            item.okToEvict(i == 0);\n            clock.addItem(item);\n        }\n        TestThread[] threads = new TestThread[THREADS];\n        for (int t = 0; t < THREADS; t++) {\n            threads[t] = new TestThread();\n        }\n        for (TestThread thread : threads) {\n            thread.start();\n        }\n        for (TestThread thread : threads) {\n            thread.join();\n        }\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "CacheEntryListTest.test()", "testcase": true, "constructor": false, "invocations": ["okToEvict", "addItem", "start", "join"]}, "focal_class": {"identifier": "CacheEntryList", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(CacheEntryList.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(CacheEntryList.class.getName())", "var_name": "LOG"}, {"original_string": "private final Observer<ID, ITEM> observer;", "modifier": "private final", "type": "Observer<ID, ITEM>", "declarator": "observer", "var_name": "observer"}, {"original_string": "private volatile int size = 0;", "modifier": "private volatile", "type": "int", "declarator": "size = 0", "var_name": "size"}, {"original_string": "private volatile ITEM clockHand;", "modifier": "private volatile", "type": "ITEM", "declarator": "clockHand", "var_name": "clockHand"}, {"original_string": "private volatile ITEM previous;", "modifier": "private volatile", "type": "ITEM", "declarator": "previous", "var_name": "previous"}], "methods": [{"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "CacheEntryList.size()", "testcase": false, "constructor": false}, {"identifier": "addItem", "parameters": "(ITEM item)", "modifiers": "public", "return": "void", "signature": "void addItem(ITEM item)", "full_signature": "public void addItem(ITEM item)", "class_method_signature": "CacheEntryList.addItem(ITEM item)", "testcase": false, "constructor": false}, {"identifier": "takeItemToEvict", "parameters": "()", "modifiers": "public", "return": "ITEM", "signature": "ITEM takeItemToEvict()", "full_signature": "public ITEM takeItemToEvict()", "class_method_signature": "CacheEntryList.takeItemToEvict()", "testcase": false, "constructor": false}, {"identifier": "CacheEntryList", "parameters": "(Observer<ID, ITEM> observer)", "modifiers": "public", "return": "", "signature": " CacheEntryList(Observer<ID, ITEM> observer)", "full_signature": "public  CacheEntryList(Observer<ID, ITEM> observer)", "class_method_signature": "CacheEntryList.CacheEntryList(Observer<ID, ITEM> observer)", "testcase": false, "constructor": true}, {"identifier": "referenceCountDistribution", "parameters": "()", "modifiers": "public", "return": "Map<Integer, Integer>", "signature": "Map<Integer, Integer> referenceCountDistribution()", "full_signature": "public Map<Integer, Integer> referenceCountDistribution()", "class_method_signature": "CacheEntryList.referenceCountDistribution()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clear()", "full_signature": " void clear()", "class_method_signature": "CacheEntryList.clear()", "testcase": false, "constructor": false}, {"identifier": "logReferenceCounts", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void logReferenceCounts()", "full_signature": "private void logReferenceCounts()", "class_method_signature": "CacheEntryList.logReferenceCounts()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/github/geophile/erdo/immutableitemcache/CacheEntryList.java"}, "focal_method": {"identifier": "addItem", "parameters": "(ITEM item)", "modifiers": "public", "return": "void", "body": "public void addItem(ITEM item)\n    {\n        assert item != null;\n        assert !item.placeholder();\n        observer.adding(item);\n        item.recentAccess(true);\n        // In a non-empty list, the new item goes behind clockHand. Since it's newest, it's probably\n        // best to consider it for eviction last.\n        switch (size) {\n            case 0:\n                assert clockHand == null;\n                assert previous == null;\n                clockHand = item;\n                item.next(clockHand);\n                break;\n            case 1:\n                assert clockHand != null;\n                assert previous == null;\n                clockHand.next(item);\n                item.next(clockHand);\n                previous = item;\n                break;\n            default:\n                assert clockHand != null;\n                assert previous != null;\n                item.next(clockHand);\n                previous.next(item);\n                previous = item;\n                break;\n        }\n        size++;\n    }", "signature": "void addItem(ITEM item)", "full_signature": "public void addItem(ITEM item)", "class_method_signature": "CacheEntryList.addItem(ITEM item)", "testcase": false, "constructor": false, "invocations": ["placeholder", "adding", "recentAccess", "next", "next", "next", "next", "next"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}