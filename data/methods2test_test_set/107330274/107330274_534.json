{"test_class": {"identifier": "JooqTaskRelocationResultStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.internal();", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.internal()", "var_name": "titusRuntime"}, {"original_string": "@Rule\n    public final JooqResource jooqResource = new JooqResource();", "modifier": "@Rule\n    public final", "type": "JooqResource", "declarator": "jooqResource = new JooqResource()", "var_name": "jooqResource"}, {"original_string": "private JooqTaskRelocationResultStore store;", "modifier": "private", "type": "JooqTaskRelocationResultStore", "declarator": "store", "var_name": "store"}], "file": "titus-ext/jooq/src/test/java/com/netflix/titus/ext/jooq/relocation/JooqTaskRelocationResultStoreTest.java"}, "test_case": {"identifier": "testStoringLargeAmountOfStatuses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStoringLargeAmountOfStatuses() {\n        List<TaskRelocationStatus> statusList = newRelocationStatuses(10_000);\n\n        // Create\n        Map<String, Optional<Throwable>> result = store.createTaskRelocationStatuses(statusList).block();\n        assertThat(result).hasSize(statusList.size());\n        long failures = result.values().stream().filter(Optional::isPresent).count();\n        assertThat(failures).isZero();\n    }", "signature": "void testStoringLargeAmountOfStatuses()", "full_signature": "@Test public void testStoringLargeAmountOfStatuses()", "class_method_signature": "JooqTaskRelocationResultStoreTest.testStoringLargeAmountOfStatuses()", "testcase": true, "constructor": false, "invocations": ["newRelocationStatuses", "block", "createTaskRelocationStatuses", "hasSize", "assertThat", "size", "count", "filter", "stream", "values", "isZero", "assertThat"]}, "focal_class": {"identifier": "JooqTaskRelocationResultStore", "superclass": "", "interfaces": "implements TaskRelocationResultStore", "fields": [{"original_string": "private static final int MAX_TEXT_LENGTH = 2048;", "modifier": "private static final", "type": "int", "declarator": "MAX_TEXT_LENGTH = 2048", "var_name": "MAX_TEXT_LENGTH"}, {"original_string": "private final DSLContext dslContext;", "modifier": "private final", "type": "DSLContext", "declarator": "dslContext", "var_name": "dslContext"}, {"original_string": "private final Cache<String, TaskRelocationStatus> statusesByTaskId;", "modifier": "private final", "type": "Cache<String, TaskRelocationStatus>", "declarator": "statusesByTaskId", "var_name": "statusesByTaskId"}], "methods": [{"identifier": "JooqTaskRelocationResultStore", "parameters": "(DSLContext dslContext, TitusRuntime titusRuntime)", "modifiers": "@Inject public", "return": "", "signature": " JooqTaskRelocationResultStore(DSLContext dslContext, TitusRuntime titusRuntime)", "full_signature": "@Inject public  JooqTaskRelocationResultStore(DSLContext dslContext, TitusRuntime titusRuntime)", "class_method_signature": "JooqTaskRelocationResultStore.JooqTaskRelocationResultStore(DSLContext dslContext, TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "createSchemaIfNotExist", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createSchemaIfNotExist()", "full_signature": "private void createSchemaIfNotExist()", "class_method_signature": "JooqTaskRelocationResultStore.createSchemaIfNotExist()", "testcase": false, "constructor": false}, {"identifier": "createTaskRelocationStatuses", "parameters": "(List<TaskRelocationStatus> taskRelocationStatuses)", "modifiers": "@Override public", "return": "Mono<Map<String, Optional<Throwable>>>", "signature": "Mono<Map<String, Optional<Throwable>>> createTaskRelocationStatuses(List<TaskRelocationStatus> taskRelocationStatuses)", "full_signature": "@Override public Mono<Map<String, Optional<Throwable>>> createTaskRelocationStatuses(List<TaskRelocationStatus> taskRelocationStatuses)", "class_method_signature": "JooqTaskRelocationResultStore.createTaskRelocationStatuses(List<TaskRelocationStatus> taskRelocationStatuses)", "testcase": false, "constructor": false}, {"identifier": "getTaskRelocationStatusList", "parameters": "(String taskId)", "modifiers": "@Override public", "return": "Mono<List<TaskRelocationStatus>>", "signature": "Mono<List<TaskRelocationStatus>> getTaskRelocationStatusList(String taskId)", "full_signature": "@Override public Mono<List<TaskRelocationStatus>> getTaskRelocationStatusList(String taskId)", "class_method_signature": "JooqTaskRelocationResultStore.getTaskRelocationStatusList(String taskId)", "testcase": false, "constructor": false}, {"identifier": "findNotCached", "parameters": "(List<TaskRelocationStatus> taskRelocationStatuses)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> findNotCached(List<TaskRelocationStatus> taskRelocationStatuses)", "full_signature": "private Set<String> findNotCached(List<TaskRelocationStatus> taskRelocationStatuses)", "class_method_signature": "JooqTaskRelocationResultStore.findNotCached(List<TaskRelocationStatus> taskRelocationStatuses)", "testcase": false, "constructor": false}, {"identifier": "loadToCache", "parameters": "(Set<String> notCached, Configuration configuration)", "modifiers": "private", "return": "void", "signature": "void loadToCache(Set<String> notCached, Configuration configuration)", "full_signature": "private void loadToCache(Set<String> notCached, Configuration configuration)", "class_method_signature": "JooqTaskRelocationResultStore.loadToCache(Set<String> notCached, Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "newCreateOrUpdateQuery", "parameters": "(TaskRelocationStatus relocationStatus)", "modifiers": "private", "return": "StoreQuery<JRelocationStatusRecord>", "signature": "StoreQuery<JRelocationStatusRecord> newCreateOrUpdateQuery(TaskRelocationStatus relocationStatus)", "full_signature": "private StoreQuery<JRelocationStatusRecord> newCreateOrUpdateQuery(TaskRelocationStatus relocationStatus)", "class_method_signature": "JooqTaskRelocationResultStore.newCreateOrUpdateQuery(TaskRelocationStatus relocationStatus)", "testcase": false, "constructor": false}, {"identifier": "toLengthLimitedVarchar", "parameters": "(String text)", "modifiers": "private", "return": "String", "signature": "String toLengthLimitedVarchar(String text)", "full_signature": "private String toLengthLimitedVarchar(String text)", "class_method_signature": "JooqTaskRelocationResultStore.toLengthLimitedVarchar(String text)", "testcase": false, "constructor": false}], "file": "titus-ext/jooq/src/main/java/com/netflix/titus/ext/jooq/relocation/JooqTaskRelocationResultStore.java"}, "focal_method": {"identifier": "createTaskRelocationStatuses", "parameters": "(List<TaskRelocationStatus> taskRelocationStatuses)", "modifiers": "@Override public", "return": "Mono<Map<String, Optional<Throwable>>>", "body": "@Override\n    public Mono<Map<String, Optional<Throwable>>> createTaskRelocationStatuses(List<TaskRelocationStatus> taskRelocationStatuses) {\n        return Mono.defer(() -> {\n            CompletionStage<int[]> asyncAction = JooqUtils.executeAsync(() -> {\n                        loadToCache(findNotCached(taskRelocationStatuses), dslContext.configuration());\n\n                        List<StoreQuery<JRelocationStatusRecord>> queries = taskRelocationStatuses.stream()\n                                .map(this::newCreateOrUpdateQuery)\n                                .collect(Collectors.toList());\n\n                        return dslContext\n                                .batch(queries)\n                                .execute();\n                    }, dslContext);\n\n            MonoProcessor<Map<String, Optional<Throwable>>> callerProcessor = MonoProcessor.create();\n            asyncAction.handle((result, error) -> {\n                Map<String, Optional<Throwable>> resultMap = new HashMap<>();\n                if (error == null) {\n                    taskRelocationStatuses.forEach(p -> {\n                        resultMap.put(p.getTaskId(), Optional.empty());\n                        statusesByTaskId.put(p.getTaskId(), p);\n                    });\n\n                    callerProcessor.onNext(resultMap);\n                } else {\n                    callerProcessor.onError(error);\n                }\n                return null;\n            });\n\n            return callerProcessor;\n        });\n    }", "signature": "Mono<Map<String, Optional<Throwable>>> createTaskRelocationStatuses(List<TaskRelocationStatus> taskRelocationStatuses)", "full_signature": "@Override public Mono<Map<String, Optional<Throwable>>> createTaskRelocationStatuses(List<TaskRelocationStatus> taskRelocationStatuses)", "class_method_signature": "JooqTaskRelocationResultStore.createTaskRelocationStatuses(List<TaskRelocationStatus> taskRelocationStatuses)", "testcase": false, "constructor": false, "invocations": ["defer", "executeAsync", "loadToCache", "findNotCached", "configuration", "collect", "map", "stream", "toList", "execute", "batch", "create", "handle", "forEach", "put", "getTaskId", "empty", "put", "getTaskId", "onNext", "onError"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}