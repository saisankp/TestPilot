{"test_class": {"identifier": "RCUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}], "file": "restcomm.android.sdk/src/test/java/org/restcomm/android/sdk/util/RCUtilsTest.java"}, "test_case": {"identifier": "validateSignalingParams_Invalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validateSignalingParams_Invalid() {\n        HashMap<String, Object> settingParams = new HashMap<String, Object>();\n\n        //push settings\n        //SIGNALING_USERNAME missing\n        try {\n            getFilledHashMapWithValidPush(settingParams);\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_USERNAME);\n        }\n\n        //SIGNALING_USERNAME \"\"\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledHashMapWithValidPush(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.SIGNALING_USERNAME, \"\");\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_USERNAME);\n        }\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE wrong provided\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledHashMapWithValidPush(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.SIGNALING_USERNAME, \"username\");\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE, 10);\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_ICE_SERVER_DISCOVERY_TYPE);\n        }\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE CUSTOM media ice not provided\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledHashMapWithValidPush(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.SIGNALING_USERNAME, \"username\");\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE, RCDevice.MediaIceServersDiscoveryType.ICE_SERVERS_CUSTOM);\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_CUSTOM_DISCOVERY_NO_ICE_SERVERS);\n        }\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE CUSTOM empty media ice provided\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledHashMapWithValidPush(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.SIGNALING_USERNAME, \"username\");\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE, RCDevice.MediaIceServersDiscoveryType.ICE_SERVERS_CUSTOM);\n            List<Map<String, String>> listMediaIceServers = new ArrayList<>();\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS, listMediaIceServers);\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_CUSTOM_DISCOVERY_NO_ICE_SERVERS);\n        }\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE CUSTOM  media ice provided with no ice server url\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledHashMapWithValidPush(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.SIGNALING_USERNAME, \"username\");\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE, RCDevice.MediaIceServersDiscoveryType.ICE_SERVERS_CUSTOM);\n            List<Map<String, String>> listMediaIceServers = new ArrayList<>();\n            Map<String, String> value = new HashMap<>();\n            value.put(\"\", \"\");\n            listMediaIceServers.add(value);\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS, listMediaIceServers);\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_CUSTOM_DISCOVERY);\n        }\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE CUSTOM  MEDIA_ICE_URL provided\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledWithMediaParams(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_URL, \"media_ice_url\");\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_CUSTOM_DISCOVERY);\n        }\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE CUSTOM   MEDIA_ICE_USERNAME provided\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledWithMediaParams(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_USERNAME, \"media_ice_username\");\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_CUSTOM_DISCOVERY);\n        }\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE CUSTOM   MEDIA_ICE_PASSWORD provided\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledWithMediaParams(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_PASSWORD, \"media_ice_password\");\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_CUSTOM_DISCOVERY);\n        }\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE CUSTOM   MEDIA_ICE_DOMAIN provided\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledWithMediaParams(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_DOMAIN, \"media_ice_domain\");\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_CUSTOM_DISCOVERY);\n        }\n\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE NOT CUSTOM not custom discovery\n        try {\n            settingParams = new HashMap<String, Object>();\n            getFilledHashMapWithValidPush(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.SIGNALING_USERNAME, \"username\");\n            List<Map<String, String>> listMediaIceServers = new ArrayList<>();\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS, listMediaIceServers);\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE, RCDevice.MediaIceServersDiscoveryType.ICE_SERVERS_CONFIGURATION_URL_XIRSYS_V3);\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_ICE_SERVERS_NOT_CUSTOM_DISCOVERY);\n        }\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE NOT CUSTOM missinf ice url\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledHashMapWithValidPush(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.SIGNALING_USERNAME, \"username\");\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE, RCDevice.MediaIceServersDiscoveryType.ICE_SERVERS_CONFIGURATION_URL_XIRSYS_V3);\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_ICE_URL);\n        }\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE NOT CUSTOM missing ice username\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledHashMapWithValidPush(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.SIGNALING_USERNAME, \"username\");\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE, RCDevice.MediaIceServersDiscoveryType.ICE_SERVERS_CONFIGURATION_URL_XIRSYS_V3);\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_URL, \"media_ice_url\");\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_ICE_USERNAME);\n        }\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE NOT CUSTOM missing ice password\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledHashMapWithValidPush(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.SIGNALING_USERNAME, \"username\");\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE, RCDevice.MediaIceServersDiscoveryType.ICE_SERVERS_CONFIGURATION_URL_XIRSYS_V3);\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_URL, \"media_ice_url\");\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_USERNAME, \"media_ice_username\");\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_ICE_PASSWORD);\n        }\n\n        //MEDIA_ICE_SERVERS_DISCOVERY_TYPE NOT CUSTOM missing ice domain\n        try {\n            settingParams = new HashMap<String, Object>();\n            settingParams = getFilledHashMapWithValidPush(settingParams);\n            settingParams.put(RCDevice.ParameterKeys.SIGNALING_USERNAME, \"username\");\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE, RCDevice.MediaIceServersDiscoveryType.ICE_SERVERS_CONFIGURATION_URL_XIRSYS_V3);\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_URL, \"media_ice_url\");\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_USERNAME, \"media_ice_username\");\n            settingParams.put(RCDevice.ParameterKeys.MEDIA_ICE_PASSWORD, \"media_ice_password\");\n            RCUtils.validateSettingsParms(settingParams);\n        } catch (RCException ex) {\n            assertThat(ex.errorCode).isEqualTo(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_ICE_DOMAIN);\n        }\n    }", "signature": "void validateSignalingParams_Invalid()", "full_signature": "@Test public void validateSignalingParams_Invalid()", "class_method_signature": "RCUtilsTest.validateSignalingParams_Invalid()", "testcase": true, "constructor": false, "invocations": ["getFilledHashMapWithValidPush", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledHashMapWithValidPush", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledHashMapWithValidPush", "put", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledHashMapWithValidPush", "put", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledHashMapWithValidPush", "put", "put", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledHashMapWithValidPush", "put", "put", "put", "add", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledWithMediaParams", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledWithMediaParams", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledWithMediaParams", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledWithMediaParams", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledHashMapWithValidPush", "put", "put", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledHashMapWithValidPush", "put", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledHashMapWithValidPush", "put", "put", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledHashMapWithValidPush", "put", "put", "put", "put", "validateSettingsParms", "isEqualTo", "assertThat", "getFilledHashMapWithValidPush", "put", "put", "put", "put", "put", "validateSettingsParms", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "RCUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"RCUtils\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"RCUtils\"", "var_name": "TAG"}], "methods": [{"identifier": "validateDeviceParms", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "public static", "return": "void", "signature": "void validateDeviceParms(HashMap<String, Object> parameters)", "full_signature": "public static void validateDeviceParms(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validateDeviceParms(HashMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "validateSettingsParms", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "signature": "void validateSettingsParms(HashMap<String, Object> parameters)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void validateSettingsParms(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validateSettingsParms(HashMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "validateConnectionParms", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "public static", "return": "void", "signature": "void validateConnectionParms(HashMap<String, Object> parameters)", "full_signature": "public static void validateConnectionParms(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validateConnectionParms(HashMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "validatePushSettings", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "static", "return": "void", "signature": "void validatePushSettings(HashMap<String, Object> parameters)", "full_signature": "static void validatePushSettings(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validatePushSettings(HashMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "shouldRegisterForPush", "parameters": "(HashMap<String, Object> parameters, StorageManagerInterface storageManagerInterface)", "modifiers": "public static", "return": "boolean", "signature": "boolean shouldRegisterForPush(HashMap<String, Object> parameters, StorageManagerInterface storageManagerInterface)", "full_signature": "public static boolean shouldRegisterForPush(HashMap<String, Object> parameters, StorageManagerInterface storageManagerInterface)", "class_method_signature": "RCUtils.shouldRegisterForPush(HashMap<String, Object> parameters, StorageManagerInterface storageManagerInterface)", "testcase": false, "constructor": false}], "file": "restcomm.android.sdk/src/main/java/org/restcomm/android/sdk/util/RCUtils.java"}, "focal_method": {"identifier": "validateSettingsParms", "parameters": "(HashMap<String, Object> parameters)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    public static void validateSettingsParms(HashMap<String, Object> parameters) throws RCException\n    {\n        validatePushSettings(parameters);\n      /*\n      if (parameters.containsKey(RCDevice.ParameterKeys.MEDIA_TURN_ENABLED) &&\n            ((Boolean)parameters.get(RCDevice.ParameterKeys.MEDIA_TURN_ENABLED))) {\n       */\n\n        if (!parameters.containsKey(RCDevice.ParameterKeys.SIGNALING_USERNAME) ||\n                parameters.get(RCDevice.ParameterKeys.SIGNALING_USERNAME).equals(\"\")) {\n            throw new RCException(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_USERNAME);\n            //return new ErrorStruct(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_USERNAME);\n        }\n\n        if (!parameters.containsKey(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE)) {\n            // discovery type not provided\n            parameters.put(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE, RCDevice.MediaIceServersDiscoveryType.ICE_SERVERS_CONFIGURATION_URL_XIRSYS_V2);\n        }\n        else {\n            // discovery type provided\n            RCDevice.MediaIceServersDiscoveryType iceServersDiscoveryType;\n            if (parameters.get(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE) instanceof Enum){\n                iceServersDiscoveryType = (RCDevice.MediaIceServersDiscoveryType)parameters.get(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE);\n            } else {\n                int discoveryType = (int)parameters.get(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS_DISCOVERY_TYPE);\n                if (discoveryType >= RCDevice.MediaIceServersDiscoveryType.values().length || discoveryType < 0){\n                    throw new RCException(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_ICE_SERVER_DISCOVERY_TYPE);\n                }else {\n                    iceServersDiscoveryType = RCDevice.MediaIceServersDiscoveryType.values()[discoveryType];\n                }\n            }\n\n            if (iceServersDiscoveryType == RCDevice.MediaIceServersDiscoveryType.ICE_SERVERS_CUSTOM) {\n                // custom (i.e. no configuration url used)\n                if (!parameters.containsKey(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS) || parameters.get(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS) == null ||\n                        ((List<Map<String,String>>) parameters.get(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS)).size() == 0) {\n                    throw new RCException(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_CUSTOM_DISCOVERY_NO_ICE_SERVERS);\n                }\n\n                List<Map<String, String>> iceServers = (List<Map<String, String>>)parameters.get(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS);\n                for (Map<String, String> iceServer : iceServers) {\n                    if (!iceServer.containsKey(RCConnection.IceServersKeys.ICE_SERVER_URL) ||\n                            iceServer.get(RCConnection.IceServersKeys.ICE_SERVER_URL).equals(\"\")) {\n                        throw new RCException(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_CUSTOM_DISCOVERY);\n                    }\n                }\n\n                if (parameters.containsKey(RCDevice.ParameterKeys.MEDIA_ICE_URL) ||\n                        parameters.containsKey(RCDevice.ParameterKeys.MEDIA_ICE_USERNAME) ||\n                        parameters.containsKey(RCDevice.ParameterKeys.MEDIA_ICE_PASSWORD) ||\n                        parameters.containsKey(RCDevice.ParameterKeys.MEDIA_ICE_DOMAIN)) {\n                    throw new RCException(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_CUSTOM_DISCOVERY);\n                }\n            }\n            else {\n                // not custom; media ice servers shouldn't be provided\n                if (parameters.containsKey(RCDevice.ParameterKeys.MEDIA_ICE_SERVERS)) {\n                    throw new RCException(RCClient.ErrorCodes.ERROR_DEVICE_INVALID_ICE_SERVERS_NOT_CUSTOM_DISCOVERY);\n                }\n\n                // all those fields are mandatory when configuration URL is used\n                if (!parameters.containsKey(RCDevice.ParameterKeys.MEDIA_ICE_URL) ||\n                        parameters.get(RCDevice.ParameterKeys.MEDIA_ICE_URL).equals(\"\")) {\n                    throw new RCException(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_ICE_URL);\n                }\n                if (!parameters.containsKey(RCDevice.ParameterKeys.MEDIA_ICE_USERNAME) ||\n                        parameters.get(RCDevice.ParameterKeys.MEDIA_ICE_USERNAME).equals(\"\")) {\n                    throw new RCException(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_ICE_USERNAME);\n                }\n                if (!parameters.containsKey(RCDevice.ParameterKeys.MEDIA_ICE_PASSWORD) ||\n                        parameters.get(RCDevice.ParameterKeys.MEDIA_ICE_PASSWORD).equals(\"\")) {\n                    throw new RCException(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_ICE_PASSWORD);\n                }\n                if (!parameters.containsKey(RCDevice.ParameterKeys.MEDIA_ICE_DOMAIN) ||\n                        parameters.get(RCDevice.ParameterKeys.MEDIA_ICE_DOMAIN).equals(\"\")) {\n                    throw new RCException(RCClient.ErrorCodes.ERROR_DEVICE_MISSING_ICE_DOMAIN);\n                }\n            }\n        }\n    }", "signature": "void validateSettingsParms(HashMap<String, Object> parameters)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void validateSettingsParms(HashMap<String, Object> parameters)", "class_method_signature": "RCUtils.validateSettingsParms(HashMap<String, Object> parameters)", "testcase": false, "constructor": false, "invocations": ["validatePushSettings", "containsKey", "equals", "get", "containsKey", "put", "get", "get", "get", "values", "values", "containsKey", "get", "size", "get", "get", "containsKey", "equals", "get", "containsKey", "containsKey", "containsKey", "containsKey", "containsKey", "containsKey", "equals", "get", "containsKey", "equals", "get", "containsKey", "equals", "get", "containsKey", "equals", "get"]}, "repository": {"repo_id": 23749387, "url": "https://github.com/RestComm/restcomm-android-sdk", "language": "Java", "is_fork": false, "fork_count": 102, "stargazer_count": 129, "size": 28987, "license": "licensed"}}