{"test_class": {"identifier": "ElasticsearchQueryStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockElasticsearchServer elasticsearchServer;", "modifier": "private", "type": "MockElasticsearchServer", "declarator": "elasticsearchServer", "var_name": "elasticsearchServer"}, {"original_string": "private DataStore dataStore;", "modifier": "private", "type": "DataStore", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "private ElasticsearchQueryStore queryStore;", "modifier": "private", "type": "ElasticsearchQueryStore", "declarator": "queryStore", "var_name": "queryStore"}, {"original_string": "private ObjectMapper mapper;", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "file": "real-time/foxtrot/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/impl/ElasticsearchQueryStoreTest.java"}, "test_case": {"identifier": "testGetFieldMappings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetFieldMappings() throws QueryStoreException, InterruptedException {\n        queryStore.save(TestUtils.TEST_TABLE_NAME, TestUtils.getMappingDocuments(mapper));\n        Thread.sleep(500);\n\n        Set<FieldTypeMapping> mappings = new HashSet<FieldTypeMapping>();\n        mappings.add(new FieldTypeMapping(\"word\", FieldType.STRING));\n        mappings.add(new FieldTypeMapping(\"data.data\", FieldType.STRING));\n        mappings.add(new FieldTypeMapping(\"header.hello\", FieldType.STRING));\n        mappings.add(new FieldTypeMapping(\"head.hello\", FieldType.LONG));\n\n        TableFieldMapping tableFieldMapping = new TableFieldMapping(TestUtils.TEST_TABLE_NAME, mappings);\n        TableFieldMapping responseMapping = queryStore.getFieldMappings(TestUtils.TEST_TABLE_NAME);\n\n        assertEquals(tableFieldMapping.getTable(), responseMapping.getTable());\n        assertTrue(tableFieldMapping.getMappings().equals(responseMapping.getMappings()));\n    }", "signature": "void testGetFieldMappings()", "full_signature": "@Test public void testGetFieldMappings()", "class_method_signature": "ElasticsearchQueryStoreTest.testGetFieldMappings()", "testcase": true, "constructor": false, "invocations": ["save", "getMappingDocuments", "sleep", "add", "add", "add", "add", "getFieldMappings", "assertEquals", "getTable", "getTable", "assertTrue", "equals", "getMappings", "getMappings"]}, "focal_class": {"identifier": "ElasticsearchQueryStore", "superclass": "", "interfaces": "implements QueryStore", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ElasticsearchQueryStore.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ElasticsearchQueryStore.class.getSimpleName())", "var_name": "logger"}, {"original_string": "private final TableMetadataManager tableMetadataManager;", "modifier": "private final", "type": "TableMetadataManager", "declarator": "tableMetadataManager", "var_name": "tableMetadataManager"}, {"original_string": "private final ElasticsearchConnection connection;", "modifier": "private final", "type": "ElasticsearchConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private final DataStore dataStore;", "modifier": "private final", "type": "DataStore", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "ElasticsearchQueryStore", "parameters": "(TableMetadataManager tableMetadataManager,\n                                   ElasticsearchConnection connection,\n                                   DataStore dataStore)", "modifiers": "public", "return": "", "signature": " ElasticsearchQueryStore(TableMetadataManager tableMetadataManager,\n                                   ElasticsearchConnection connection,\n                                   DataStore dataStore)", "full_signature": "public  ElasticsearchQueryStore(TableMetadataManager tableMetadataManager,\n                                   ElasticsearchConnection connection,\n                                   DataStore dataStore)", "class_method_signature": "ElasticsearchQueryStore.ElasticsearchQueryStore(TableMetadataManager tableMetadataManager,\n                                   ElasticsearchConnection connection,\n                                   DataStore dataStore)", "testcase": false, "constructor": true}, {"identifier": "save", "parameters": "(String table, Document document)", "modifiers": "@Override public", "return": "void", "signature": "void save(String table, Document document)", "full_signature": "@Override public void save(String table, Document document)", "class_method_signature": "ElasticsearchQueryStore.save(String table, Document document)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(String table, List<Document> documents)", "modifiers": "@Override public", "return": "void", "signature": "void save(String table, List<Document> documents)", "full_signature": "@Override public void save(String table, List<Document> documents)", "class_method_signature": "ElasticsearchQueryStore.save(String table, List<Document> documents)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String table, String id)", "modifiers": "@Override public", "return": "Document", "signature": "Document get(String table, String id)", "full_signature": "@Override public Document get(String table, String id)", "class_method_signature": "ElasticsearchQueryStore.get(String table, String id)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String table, List<String> ids)", "modifiers": "@Override public", "return": "List<Document>", "signature": "List<Document> get(String table, List<String> ids)", "full_signature": "@Override public List<Document> get(String table, List<String> ids)", "class_method_signature": "ElasticsearchQueryStore.get(String table, List<String> ids)", "testcase": false, "constructor": false}, {"identifier": "getFieldMappings", "parameters": "(String table)", "modifiers": "@Override public", "return": "TableFieldMapping", "signature": "TableFieldMapping getFieldMappings(String table)", "full_signature": "@Override public TableFieldMapping getFieldMappings(String table)", "class_method_signature": "ElasticsearchQueryStore.getFieldMappings(String table)", "testcase": false, "constructor": false}, {"identifier": "cleanupAll", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanupAll()", "full_signature": "@Override public void cleanupAll()", "class_method_signature": "ElasticsearchQueryStore.cleanupAll()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(final String table)", "modifiers": "@Override public", "return": "void", "signature": "void cleanup(final String table)", "full_signature": "@Override public void cleanup(final String table)", "class_method_signature": "ElasticsearchQueryStore.cleanup(final String table)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(Set<String> tables)", "modifiers": "@Override public", "return": "void", "signature": "void cleanup(Set<String> tables)", "full_signature": "@Override public void cleanup(Set<String> tables)", "class_method_signature": "ElasticsearchQueryStore.cleanup(Set<String> tables)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/impl/ElasticsearchQueryStore.java"}, "focal_method": {"identifier": "getFieldMappings", "parameters": "(String table)", "modifiers": "@Override public", "return": "TableFieldMapping", "body": "@Override\n    public TableFieldMapping getFieldMappings(String table) throws QueryStoreException {\n        table = ElasticsearchUtils.getValidTableName(table);\n        try {\n            if (!tableMetadataManager.exists(table)) {\n                throw new QueryStoreException(QueryStoreException.ErrorCode.NO_SUCH_TABLE,\n                        \"No table exists with the name: \" + table);\n            }\n\n            ElasticsearchMappingParser mappingParser = new ElasticsearchMappingParser(mapper);\n            Set<FieldTypeMapping> mappings = new HashSet<FieldTypeMapping>();\n            GetMappingsResponse mappingsResponse = connection.getClient().admin()\n                    .indices().prepareGetMappings(ElasticsearchUtils.getIndices(table)).execute().actionGet();\n\n            for (ObjectCursor<String> index : mappingsResponse.getMappings().keys()) {\n                MappingMetaData mappingData = mappingsResponse.mappings().get(index.value).get(ElasticsearchUtils.TYPE_NAME);\n                mappings.addAll(mappingParser.getFieldMappings(mappingData));\n            }\n            return new TableFieldMapping(table, mappings);\n        } catch (QueryStoreException ex) {\n            throw ex;\n        } catch (Exception ex) {\n            throw new QueryStoreException(QueryStoreException.ErrorCode.METADATA_FETCH_ERROR,\n                    ex.getMessage(), ex);\n        }\n    }", "signature": "TableFieldMapping getFieldMappings(String table)", "full_signature": "@Override public TableFieldMapping getFieldMappings(String table)", "class_method_signature": "ElasticsearchQueryStore.getFieldMappings(String table)", "testcase": false, "constructor": false, "invocations": ["getValidTableName", "exists", "actionGet", "execute", "prepareGetMappings", "indices", "admin", "getClient", "getIndices", "keys", "getMappings", "get", "get", "mappings", "addAll", "getFieldMappings", "getMessage"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}