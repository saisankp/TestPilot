{"test_class": {"identifier": "TransformProcessTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DataStore bugs;", "modifier": "", "type": "DataStore", "declarator": "bugs", "var_name": "bugs"}], "file": "modules/unsupported/process-feature/src/test/java/org/geotools/process/vector/TransformProcessTest.java"}, "test_case": {"identifier": "testDefinitionListDelimiterLF", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDefinitionListDelimiterLF() throws Exception {\n        String definition = \"the_geom=the_geom;\\n cat=cat+1;\";\n        List<Definition> def = TransformProcess.toDefinition( definition );\n\n        assertEquals( 2, def.size() );\n        \n        assertEquals( \"the_geom\", def.get(0).name );\n        assertTrue( def.get(0).expression instanceof PropertyName );\n        assertEquals( \"cat\", def.get(1).name );\n    }", "signature": "void testDefinitionListDelimiterLF()", "full_signature": "@Test public void testDefinitionListDelimiterLF()", "class_method_signature": "TransformProcessTest.testDefinitionListDelimiterLF()", "testcase": true, "constructor": false, "invocations": ["toDefinition", "assertEquals", "size", "assertEquals", "get", "assertTrue", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "TransformProcess", "superclass": "", "interfaces": "implements VectorProcess", "fields": [{"original_string": "private static final String DEF_DELIMITER = \";\";", "modifier": "private static final", "type": "String", "declarator": "DEF_DELIMITER = \";\"", "var_name": "DEF_DELIMITER"}], "methods": [{"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)", "modifiers": "@DescribeResult(name = \"result\", description = \"Transformed feature collection\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)", "full_signature": "@DescribeResult(name = \"result\", description = \"Transformed feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)", "class_method_signature": "TransformProcess.execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)", "testcase": false, "constructor": false}, {"identifier": "executeList", "parameters": "(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"List of Definitions for the output feature attributes\") List<Definition> transform)", "modifiers": "@DescribeResult(name = \"result\", description = \"Transformed feature collection\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection executeList(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"List of Definitions for the output feature attributes\") List<Definition> transform)", "full_signature": "@DescribeResult(name = \"result\", description = \"Transformed feature collection\") public SimpleFeatureCollection executeList(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"List of Definitions for the output feature attributes\") List<Definition> transform)", "class_method_signature": "TransformProcess.executeList(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"List of Definitions for the output feature attributes\") List<Definition> transform)", "testcase": false, "constructor": false}, {"identifier": "toDefinition", "parameters": "(String definition)", "modifiers": "public static", "return": "List<Definition>", "signature": "List<Definition> toDefinition(String definition)", "full_signature": "public static List<Definition> toDefinition(String definition)", "class_method_signature": "TransformProcess.toDefinition(String definition)", "testcase": false, "constructor": false}, {"identifier": "splitDefinitions", "parameters": "(String defList)", "modifiers": "private static", "return": "String[]", "signature": "String[] splitDefinitions(String defList)", "full_signature": "private static String[] splitDefinitions(String defList)", "class_method_signature": "TransformProcess.splitDefinitions(String defList)", "testcase": false, "constructor": false}, {"identifier": "toReShapeFeatureType", "parameters": "(SimpleFeatureCollection delegate,\n            List<Definition> definitionList)", "modifiers": "public static", "return": "SimpleFeatureType", "signature": "SimpleFeatureType toReShapeFeatureType(SimpleFeatureCollection delegate,\n            List<Definition> definitionList)", "full_signature": "public static SimpleFeatureType toReShapeFeatureType(SimpleFeatureCollection delegate,\n            List<Definition> definitionList)", "class_method_signature": "TransformProcess.toReShapeFeatureType(SimpleFeatureCollection delegate,\n            List<Definition> definitionList)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-feature/src/main/java/org/geotools/process/vector/TransformProcess.java"}, "focal_method": {"identifier": "toDefinition", "parameters": "(String definition)", "modifiers": "public static", "return": "List<Definition>", "body": "public static List<Definition> toDefinition(String definition) {\n        List<Definition> list = new ArrayList<Definition>();\n        HashSet<String> check = new HashSet<String>();\n\n        // clean up cross platform differences of line feed\n        String[] defs = splitDefinitions(definition);\n\n        for (String line : defs) {\n            int mark = line.indexOf(\"=\");\n            if (mark != -1) {\n                String name = line.substring(0, mark).trim();\n                String expressionDefinition = line.substring(mark + 1).trim();\n\n                if (check.contains(name)) {\n                    throw new IllegalArgumentException(\"Attribute \" + name\n                            + \" defined more than once\");\n                }\n                Expression expression;\n                try {\n                    expression = ECQL.toExpression(expressionDefinition);\n                } catch (CQLException e) {\n                    throw new IllegalArgumentException(\"Unable to parse expression \" + name + \"=\"\n                            + expressionDefinition + \" \" + e, e);\n                }\n                Definition def = new Definition();\n                def.name = name;\n                def.expression = expression;\n                list.add(def);\n                check.add(name); // to catch duplicates!\n            }\n        }\n        return list;\n    }", "signature": "List<Definition> toDefinition(String definition)", "full_signature": "public static List<Definition> toDefinition(String definition)", "class_method_signature": "TransformProcess.toDefinition(String definition)", "testcase": false, "constructor": false, "invocations": ["splitDefinitions", "indexOf", "trim", "substring", "trim", "substring", "contains", "toExpression", "add", "add"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}