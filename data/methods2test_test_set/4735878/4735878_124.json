{"test_class": {"identifier": "Recode2ColorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Recode2Color recode;", "modifier": "protected", "type": "Recode2Color", "declarator": "recode", "var_name": "recode"}, {"original_string": "String key1;", "modifier": "", "type": "String", "declarator": "key1", "var_name": "key1"}, {"original_string": "String key2;", "modifier": "", "type": "String", "declarator": "key2", "var_name": "key2"}, {"original_string": "String key3;", "modifier": "", "type": "String", "declarator": "key3", "var_name": "key3"}, {"original_string": "String key4;", "modifier": "", "type": "String", "declarator": "key4", "var_name": "key4"}, {"original_string": "String key5;", "modifier": "", "type": "String", "declarator": "key5", "var_name": "key5"}, {"original_string": "ColorParameter c1;", "modifier": "", "type": "ColorParameter", "declarator": "c1", "var_name": "c1"}, {"original_string": "ColorLiteral c2;", "modifier": "", "type": "ColorLiteral", "declarator": "c2", "var_name": "c2"}, {"original_string": "ColorLiteral c3;", "modifier": "", "type": "ColorLiteral", "declarator": "c3", "var_name": "c3"}, {"original_string": "ColorLiteral c4;", "modifier": "", "type": "ColorLiteral", "declarator": "c4", "var_name": "c4"}, {"original_string": "ColorLiteral c5;", "modifier": "", "type": "ColorLiteral", "declarator": "c5", "var_name": "c5"}, {"original_string": "ColorLiteral fb;", "modifier": "", "type": "ColorLiteral", "declarator": "fb", "var_name": "fb"}, {"original_string": "StringParameter lookup;", "modifier": "", "type": "StringParameter", "declarator": "lookup", "var_name": "lookup"}], "file": "bundles/core-map/src/test/java/org/orbisgis/coremap/renderer/se/parameter/color/Recode2ColorTest.java"}, "test_case": {"identifier": "testGetParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetParameter(){\n        try {\n            testAddMapItems();\n            recode.setLookupValue(new StringLiteral(\"k1\"));\n\n            assertTrue(recode.getColor(null, -1) == c1.getColor(null, -1));\n            recode.setLookupValue(new StringLiteral(\"k2\"));\n            assertTrue(recode.getColor(null, -1) == c2.getColor(null, -1));\n            recode.setLookupValue(new StringLiteral(\"k3\"));\n            assertTrue(recode.getColor(null, -1) == c3.getColor(null, -1));\n        } catch (ParameterException ex) {\n            Logger.getLogger(Recode2ColorTest.class.getName()).log(Level.SEVERE, null, ex);\n            assertTrue(false);\n        }\n    }", "signature": "void testGetParameter()", "full_signature": "@Test public void testGetParameter()", "class_method_signature": "Recode2ColorTest.testGetParameter()", "testcase": true, "constructor": false, "invocations": ["testAddMapItems", "setLookupValue", "assertTrue", "getColor", "getColor", "setLookupValue", "assertTrue", "getColor", "getColor", "setLookupValue", "assertTrue", "getColor", "getColor", "log", "getLogger", "getName", "assertTrue"]}, "focal_class": {"identifier": "Recode2Color", "superclass": "extends Recode<ColorParameter, ColorLiteral>", "interfaces": "implements ColorParameter", "fields": [], "methods": [{"identifier": "Recode2Color", "parameters": "(ColorLiteral fallback, StringParameter lookupValue)", "modifiers": "public", "return": "", "signature": " Recode2Color(ColorLiteral fallback, StringParameter lookupValue)", "full_signature": "public  Recode2Color(ColorLiteral fallback, StringParameter lookupValue)", "class_method_signature": "Recode2Color.Recode2Color(ColorLiteral fallback, StringParameter lookupValue)", "testcase": false, "constructor": true}, {"identifier": "Recode2Color", "parameters": "(JAXBElement<RecodeType> expr)", "modifiers": "public", "return": "", "signature": " Recode2Color(JAXBElement<RecodeType> expr)", "full_signature": "public  Recode2Color(JAXBElement<RecodeType> expr)", "class_method_signature": "Recode2Color.Recode2Color(JAXBElement<RecodeType> expr)", "testcase": false, "constructor": true}, {"identifier": "getColor", "parameters": "(ResultSet rs, long fid)", "modifiers": "@Override public", "return": "Color", "signature": "Color getColor(ResultSet rs, long fid)", "full_signature": "@Override public Color getColor(ResultSet rs, long fid)", "class_method_signature": "Recode2Color.getColor(ResultSet rs, long fid)", "testcase": false, "constructor": false}, {"identifier": "getColor", "parameters": "(Map<String,Object> map)", "modifiers": "@Override public", "return": "Color", "signature": "Color getColor(Map<String,Object> map)", "full_signature": "@Override public Color getColor(Map<String,Object> map)", "class_method_signature": "Recode2Color.getColor(Map<String,Object> map)", "testcase": false, "constructor": false}], "file": "bundles/core-map/src/main/java/org/orbisgis/coremap/renderer/se/parameter/color/Recode2Color.java"}, "focal_method": {"identifier": "getColor", "parameters": "(ResultSet rs, long fid)", "modifiers": "@Override public", "return": "Color", "body": "@Override\n        public Color getColor(ResultSet rs, long fid) throws ParameterException {\n                //If we can't retrieve any information in sds, getParameter will provide a \n                //default value, so we won't obtain any error.\n                return getParameter(rs, fid).getColor(rs, fid);\n        }", "signature": "Color getColor(ResultSet rs, long fid)", "full_signature": "@Override public Color getColor(ResultSet rs, long fid)", "class_method_signature": "Recode2Color.getColor(ResultSet rs, long fid)", "testcase": false, "constructor": false, "invocations": ["getColor", "getParameter"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}