{"test_class": {"identifier": "DependencyHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/axway/grapes/server/core/DependencyHandlerTest.java"}, "test_case": {"identifier": "getModuleDependenciesWithADepth", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getModuleDependenciesWithADepth(){\n        final DbModule module1 = new DbModule();\n        module1.setName(\"module1\");\n        module1.setVersion(\"1.0.0\");\n\n        final DbArtifact dependency1 = new DbArtifact();\n        dependency1.setGroupId(\"org.axway.grapes.test.module2\");\n        dependency1.setArtifactId(\"dependency1\");\n        dependency1.setVersion(\"1.1.0\");\n        module1.addDependency(dependency1.getGavc(), Scope.COMPILE);\n\n        final DbModule module2 = new DbModule();\n        module2.setName(\"module2\");\n        module2.setVersion(\"1.1.0\");\n\n        final DbArtifact dependency2 = new DbArtifact();\n        dependency2.setGroupId(\"org.axway.grapes.test.module3\");\n        dependency2.setArtifactId(\"dependency2\");\n        dependency2.setVersion(\"2.1.0\");\n        module2.addDependency(dependency2.getGavc(), Scope.COMPILE);\n\n        final DbModule module3 = new DbModule();\n        module3.setName(\"module3\");\n        module3.setVersion(\"2.1.0\");\n\n        final DbArtifact dependency3 = new DbArtifact();\n        dependency3.setGroupId(\"org.axway.grapes.test\");\n        dependency3.setArtifactId(\"dependency3\");\n        dependency3.setVersion(\"123\");\n        module3.addDependency(dependency3.getGavc(), Scope.COMPILE);\n\n        final RepositoryHandler repositoryHandler = mock(RepositoryHandler.class);\n        when(repositoryHandler.getModule(module1.getId())).thenReturn(module1);\n        when(repositoryHandler.getModule(module2.getId())).thenReturn(module2);\n        when(repositoryHandler.getModule(module3.getId())).thenReturn(module3);\n        when(repositoryHandler.getArtifact(dependency1.getGavc())).thenReturn(dependency1);\n        when(repositoryHandler.getArtifact(dependency2.getGavc())).thenReturn(dependency2);\n        when(repositoryHandler.getArtifact(dependency3.getGavc())).thenReturn(dependency3);\n        when(repositoryHandler.getRootModuleOf(dependency1.getGavc())).thenReturn(module2);\n        when(repositoryHandler.getRootModuleOf(dependency2.getGavc())).thenReturn(module3);\n\n\n        final FiltersHolder filters = new FiltersHolder();\n        filters.getScopeHandler().setScopeComp(true);\n        filters.getScopeHandler().setScopePro(true);\n        filters.getScopeHandler().setScopeRun(true);\n        filters.getScopeHandler().setScopeTest(true);\n        filters.getDecorator().setShowThirdparty(true);\n        filters.getDepthHandler().setDepth(1);\n\n        final DependencyHandler dependencyHandler = new DependencyHandler(repositoryHandler);\n\n        List<Dependency> dependencies = dependencyHandler.getModuleDependencies(module1.getId(), filters);\n        assertEquals(1, dependencies.size());\n\n        filters.getDepthHandler().setDepth(2);\n        dependencies = dependencyHandler.getModuleDependencies(module1.getId(), filters);\n        assertEquals(2, dependencies.size());\n\n        filters.getDepthHandler().setDepth(3);\n        dependencies = dependencyHandler.getModuleDependencies(module1.getId(), filters);\n        assertEquals(3, dependencies.size());\n    }", "signature": "void getModuleDependenciesWithADepth()", "full_signature": "@Test public void getModuleDependenciesWithADepth()", "class_method_signature": "DependencyHandlerTest.getModuleDependenciesWithADepth()", "testcase": true, "constructor": false, "invocations": ["setName", "setVersion", "setGroupId", "setArtifactId", "setVersion", "addDependency", "getGavc", "setName", "setVersion", "setGroupId", "setArtifactId", "setVersion", "addDependency", "getGavc", "setName", "setVersion", "setGroupId", "setArtifactId", "setVersion", "addDependency", "getGavc", "mock", "thenReturn", "when", "getModule", "getId", "thenReturn", "when", "getModule", "getId", "thenReturn", "when", "getModule", "getId", "thenReturn", "when", "getArtifact", "getGavc", "thenReturn", "when", "getArtifact", "getGavc", "thenReturn", "when", "getArtifact", "getGavc", "thenReturn", "when", "getRootModuleOf", "getGavc", "thenReturn", "when", "getRootModuleOf", "getGavc", "setScopeComp", "getScopeHandler", "setScopePro", "getScopeHandler", "setScopeRun", "getScopeHandler", "setScopeTest", "getScopeHandler", "setShowThirdparty", "getDecorator", "setDepth", "getDepthHandler", "getModuleDependencies", "getId", "assertEquals", "size", "setDepth", "getDepthHandler", "getModuleDependencies", "getId", "assertEquals", "size", "setDepth", "getDepthHandler", "getModuleDependencies", "getId", "assertEquals", "size"]}, "focal_class": {"identifier": "DependencyHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DependencyHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DependencyHandler.class)", "var_name": "LOG"}, {"original_string": "private final RepositoryHandler repositoryHandler;", "modifier": "private final", "type": "RepositoryHandler", "declarator": "repositoryHandler", "var_name": "repositoryHandler"}, {"original_string": "private final ModelMapper modelMapper;", "modifier": "private final", "type": "ModelMapper", "declarator": "modelMapper", "var_name": "modelMapper"}, {"original_string": "private final ModuleHandler moduleHandler;", "modifier": "private final", "type": "ModuleHandler", "declarator": "moduleHandler", "var_name": "moduleHandler"}], "methods": [{"identifier": "DependencyHandler", "parameters": "(final RepositoryHandler repositoryHandler)", "modifiers": "public", "return": "", "signature": " DependencyHandler(final RepositoryHandler repositoryHandler)", "full_signature": "public  DependencyHandler(final RepositoryHandler repositoryHandler)", "class_method_signature": "DependencyHandler.DependencyHandler(final RepositoryHandler repositoryHandler)", "testcase": false, "constructor": true}, {"identifier": "getModuleDependencies", "parameters": "(final String moduleId, final FiltersHolder filters)", "modifiers": "public", "return": "List<Dependency>", "signature": "List<Dependency> getModuleDependencies(final String moduleId, final FiltersHolder filters)", "full_signature": "public List<Dependency> getModuleDependencies(final String moduleId, final FiltersHolder filters)", "class_method_signature": "DependencyHandler.getModuleDependencies(final String moduleId, final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "getModuleDependencies", "parameters": "(final DbModule module, final FiltersHolder filters, final int depth, final List<String> doneModuleIds)", "modifiers": "private", "return": "List<Dependency>", "signature": "List<Dependency> getModuleDependencies(final DbModule module, final FiltersHolder filters, final int depth, final List<String> doneModuleIds)", "full_signature": "private List<Dependency> getModuleDependencies(final DbModule module, final FiltersHolder filters, final int depth, final List<String> doneModuleIds)", "class_method_signature": "DependencyHandler.getModuleDependencies(final DbModule module, final FiltersHolder filters, final int depth, final List<String> doneModuleIds)", "testcase": false, "constructor": false}, {"identifier": "getDependencyReport", "parameters": "(final String moduleId, final FiltersHolder filters)", "modifiers": "public", "return": "DependencyReport", "signature": "DependencyReport getDependencyReport(final String moduleId, final FiltersHolder filters)", "full_signature": "public DependencyReport getDependencyReport(final String moduleId, final FiltersHolder filters)", "class_method_signature": "DependencyHandler.getDependencyReport(final String moduleId, final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "addModuleToReport", "parameters": "(final DependencyReport report, final DbModule module, final FiltersHolder filters, final List<String> done, final int depth)", "modifiers": "private", "return": "void", "signature": "void addModuleToReport(final DependencyReport report, final DbModule module, final FiltersHolder filters, final List<String> done, final int depth)", "full_signature": "private void addModuleToReport(final DependencyReport report, final DbModule module, final FiltersHolder filters, final List<String> done, final int depth)", "class_method_signature": "DependencyHandler.addModuleToReport(final DependencyReport report, final DbModule module, final FiltersHolder filters, final List<String> done, final int depth)", "testcase": false, "constructor": false}, {"identifier": "addDependenciesToReport", "parameters": "(final DependencyReport report, final DbDependency dbDependency, final FiltersHolder filters, final List<String> done, final int depth)", "modifiers": "private", "return": "void", "signature": "void addDependenciesToReport(final DependencyReport report, final DbDependency dbDependency, final FiltersHolder filters, final List<String> done, final int depth)", "full_signature": "private void addDependenciesToReport(final DependencyReport report, final DbDependency dbDependency, final FiltersHolder filters, final List<String> done, final int depth)", "class_method_signature": "DependencyHandler.addDependenciesToReport(final DependencyReport report, final DbDependency dbDependency, final FiltersHolder filters, final List<String> done, final int depth)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/core/DependencyHandler.java"}, "focal_method": {"identifier": "getModuleDependencies", "parameters": "(final String moduleId, final FiltersHolder filters)", "modifiers": "public", "return": "List<Dependency>", "body": "public List<Dependency> getModuleDependencies(final String moduleId, final FiltersHolder filters){\n        final DbModule module = moduleHandler.getModule(moduleId);\n        final DbOrganization organization = moduleHandler.getOrganization(module);\n        filters.setCorporateFilter(new CorporateFilter(organization));\n\n        return getModuleDependencies(module, filters, 1, new ArrayList<String>());\n    }", "signature": "List<Dependency> getModuleDependencies(final String moduleId, final FiltersHolder filters)", "full_signature": "public List<Dependency> getModuleDependencies(final String moduleId, final FiltersHolder filters)", "class_method_signature": "DependencyHandler.getModuleDependencies(final String moduleId, final FiltersHolder filters)", "testcase": false, "constructor": false, "invocations": ["getModule", "getOrganization", "setCorporateFilter", "getModuleDependencies"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}