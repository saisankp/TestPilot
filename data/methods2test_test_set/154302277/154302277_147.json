{"test_class": {"identifier": "BundleServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private BundleService bundleService;", "modifier": "@InjectMocks\n    private", "type": "BundleService", "declarator": "bundleService", "var_name": "bundleService"}, {"original_string": "private final ActionDtoBuilder builder = new ActionDtoBuilder();", "modifier": "private final", "type": "ActionDtoBuilder", "declarator": "builder = new ActionDtoBuilder()", "var_name": "builder"}, {"original_string": "@Spy\n    private final CommandExecutorMapStub bundleCommandExecutorMap = new CommandExecutorMapStub();", "modifier": "@Spy\n    private final", "type": "CommandExecutorMapStub", "declarator": "bundleCommandExecutorMap = new CommandExecutorMapStub()", "var_name": "bundleCommandExecutorMap"}, {"original_string": "private final List<FaultResponseParameterDto> parameters = new ArrayList<>();", "modifier": "private final", "type": "List<FaultResponseParameterDto>", "declarator": "parameters = new ArrayList<>()", "var_name": "parameters"}, {"original_string": "private final ComponentType defaultComponent = ComponentType.PROTOCOL_DLMS;", "modifier": "private final", "type": "ComponentType", "declarator": "defaultComponent = ComponentType.PROTOCOL_DLMS", "var_name": "defaultComponent"}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/BundleServiceTest.java"}, "test_case": {"identifier": "testConnectionException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConnectionException() throws ProtocolAdapterException {\n        final List<ActionDto> actionDtoList = this.makeActions();\n        final BundleMessagesRequestDto dto = new BundleMessagesRequestDto(actionDtoList);\n\n        // Set the point where to throw the ConnectionException\n        this.getStub(FindEventsRequestDto.class)\n                .failWithRuntimeException(new ConnectionException(\"Connection Exception thrown!\"));\n\n        try {\n            // Execute all the actions\n            this.callExecutors(dto);\n            fail(\"A ConnectionException should be thrown\");\n        } catch (final ConnectionException connectionException) {\n            // The execution is stopped. The number of responses is equal to the\n            // actions performed before the point the exception is thrown. See\n            // also the order of the ArrayList in method 'makeActions'.\n            assertThat(dto.getAllResponses().size()).isEqualTo(8);\n        }\n\n        // Reset the point where the exception was thrown.\n        this.getStub(FindEventsRequestDto.class).failWithRuntimeException(null);\n\n        try {\n            // Execute the remaining actions\n            this.callExecutors(dto);\n            assertThat(actionDtoList.size()).isEqualTo(dto.getAllResponses().size());\n        } catch (final ConnectionException connectionException) {\n            fail(\"A ConnectionException should not have been thrown.\");\n        }\n\n    }", "signature": "void testConnectionException()", "full_signature": "@Test public void testConnectionException()", "class_method_signature": "BundleServiceTest.testConnectionException()", "testcase": true, "constructor": false, "invocations": ["makeActions", "failWithRuntimeException", "getStub", "callExecutors", "fail", "isEqualTo", "assertThat", "size", "getAllResponses", "failWithRuntimeException", "getStub", "callExecutors", "isEqualTo", "assertThat", "size", "size", "getAllResponses", "fail"]}, "focal_class": {"identifier": "BundleService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BundleService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BundleService.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private CommandExecutorMap bundleCommandExecutorMap;", "modifier": "@Autowired\n    private", "type": "CommandExecutorMap", "declarator": "bundleCommandExecutorMap", "var_name": "bundleCommandExecutorMap"}], "methods": [{"identifier": "callExecutors", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final BundleMessagesRequestDto bundleMessagesRequest)", "modifiers": "public", "return": "BundleMessagesRequestDto", "signature": "BundleMessagesRequestDto callExecutors(final DlmsConnectionManager conn, final DlmsDevice device,\n            final BundleMessagesRequestDto bundleMessagesRequest)", "full_signature": "public BundleMessagesRequestDto callExecutors(final DlmsConnectionManager conn, final DlmsDevice device,\n            final BundleMessagesRequestDto bundleMessagesRequest)", "class_method_signature": "BundleService.callExecutors(final DlmsConnectionManager conn, final DlmsDevice device,\n            final BundleMessagesRequestDto bundleMessagesRequest)", "testcase": false, "constructor": false}, {"identifier": "addFaultResponse", "parameters": "(final ActionDto actionDto, final Exception exception, final String defaultMessage,\n            final DlmsDevice device)", "modifiers": "private", "return": "void", "signature": "void addFaultResponse(final ActionDto actionDto, final Exception exception, final String defaultMessage,\n            final DlmsDevice device)", "full_signature": "private void addFaultResponse(final ActionDto actionDto, final Exception exception, final String defaultMessage,\n            final DlmsDevice device)", "class_method_signature": "BundleService.addFaultResponse(final ActionDto actionDto, final Exception exception, final String defaultMessage,\n            final DlmsDevice device)", "testcase": false, "constructor": false}, {"identifier": "faultResponseForException", "parameters": "(final Exception exception,\n            final List<FaultResponseParameterDto> parameters, final String defaultMessage)", "modifiers": "protected", "return": "FaultResponseDto", "signature": "FaultResponseDto faultResponseForException(final Exception exception,\n            final List<FaultResponseParameterDto> parameters, final String defaultMessage)", "full_signature": "protected FaultResponseDto faultResponseForException(final Exception exception,\n            final List<FaultResponseParameterDto> parameters, final String defaultMessage)", "class_method_signature": "BundleService.faultResponseForException(final Exception exception,\n            final List<FaultResponseParameterDto> parameters, final String defaultMessage)", "testcase": false, "constructor": false}, {"identifier": "faultResponseParametersForList", "parameters": "(\n            final List<FaultResponseParameterDto> parameterList)", "modifiers": "private", "return": "FaultResponseParametersDto", "signature": "FaultResponseParametersDto faultResponseParametersForList(\n            final List<FaultResponseParameterDto> parameterList)", "full_signature": "private FaultResponseParametersDto faultResponseParametersForList(\n            final List<FaultResponseParameterDto> parameterList)", "class_method_signature": "BundleService.faultResponseParametersForList(\n            final List<FaultResponseParameterDto> parameterList)", "testcase": false, "constructor": false}, {"identifier": "faultResponseForFunctionalOrTechnicalException", "parameters": "(final OsgpException exception,\n            final FaultResponseParametersDto faultResponseParameters, final String defaultMessage)", "modifiers": "private", "return": "FaultResponseDto", "signature": "FaultResponseDto faultResponseForFunctionalOrTechnicalException(final OsgpException exception,\n            final FaultResponseParametersDto faultResponseParameters, final String defaultMessage)", "full_signature": "private FaultResponseDto faultResponseForFunctionalOrTechnicalException(final OsgpException exception,\n            final FaultResponseParametersDto faultResponseParameters, final String defaultMessage)", "class_method_signature": "BundleService.faultResponseForFunctionalOrTechnicalException(final OsgpException exception,\n            final FaultResponseParametersDto faultResponseParameters, final String defaultMessage)", "testcase": false, "constructor": false}, {"identifier": "checkIfExecutorExists", "parameters": "(final Class<? extends ActionRequestDto> actionRequestClass,\n            final CommandExecutor<?, ?> executor)", "modifiers": "private", "return": "void", "signature": "void checkIfExecutorExists(final Class<? extends ActionRequestDto> actionRequestClass,\n            final CommandExecutor<?, ?> executor)", "full_signature": "private void checkIfExecutorExists(final Class<? extends ActionRequestDto> actionRequestClass,\n            final CommandExecutor<?, ?> executor)", "class_method_signature": "BundleService.checkIfExecutorExists(final Class<? extends ActionRequestDto> actionRequestClass,\n            final CommandExecutor<?, ?> executor)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/BundleService.java"}, "focal_method": {"identifier": "callExecutors", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final BundleMessagesRequestDto bundleMessagesRequest)", "modifiers": "public", "return": "BundleMessagesRequestDto", "body": "public BundleMessagesRequestDto callExecutors(final DlmsConnectionManager conn, final DlmsDevice device,\n            final BundleMessagesRequestDto bundleMessagesRequest) {\n\n        final List<ActionDto> actionList = bundleMessagesRequest.getActionList();\n        for (final ActionDto actionDto : actionList) {\n\n            // Only execute the request when there is no response available yet.\n            // Because it could be a retry.\n            if (actionDto.getResponse() == null) {\n\n                final Class<? extends ActionRequestDto> actionRequestClass = actionDto.getRequest().getClass();\n\n                final CommandExecutor<?, ?> executor = this.bundleCommandExecutorMap\n                        .getCommandExecutor(actionRequestClass);\n\n                final String executorName = executor == null ? \"null\" : executor.getClass().getSimpleName();\n\n                try {\n\n                    this.checkIfExecutorExists(actionRequestClass, executor);\n\n                    LOGGER.debug(\"**************************************************\");\n                    LOGGER.info(\"Calling executor in bundle {}\", executorName);\n                    LOGGER.debug(\"**************************************************\");\n                    actionDto.setResponse(executor.executeBundleAction(conn, device, actionDto.getRequest()));\n                } catch (final ConnectionException connectionException) {\n                    LOGGER.warn(\"A connection exception occurred while executing {}\", executorName,\n                            connectionException);\n\n                    final List<ActionDto> remainingActionDtoList = actionList\n                            .subList(actionList.indexOf(actionDto), actionList.size());\n\n                    for (final ActionDto remainingActionDto : remainingActionDtoList) {\n                        LOGGER.debug(\"Skipping: {}\", remainingActionDto.getRequest().getClass().getSimpleName());\n                    }\n\n                    actionDto.setResponse(null);\n                    throw connectionException;\n                } catch (final Exception exception) {\n\n                    LOGGER.error(\"Error while executing bundle action for {} with {}\", actionRequestClass.getName(),\n                            executorName, exception);\n                    final String responseMessage = executor == null ? \"Unable to handle request\" :\n                            \"Error handling request with \" + executorName;\n\n                    this.addFaultResponse(actionDto, exception, responseMessage, device);\n                }\n            }\n        }\n\n        return bundleMessagesRequest;\n    }", "signature": "BundleMessagesRequestDto callExecutors(final DlmsConnectionManager conn, final DlmsDevice device,\n            final BundleMessagesRequestDto bundleMessagesRequest)", "full_signature": "public BundleMessagesRequestDto callExecutors(final DlmsConnectionManager conn, final DlmsDevice device,\n            final BundleMessagesRequestDto bundleMessagesRequest)", "class_method_signature": "BundleService.callExecutors(final DlmsConnectionManager conn, final DlmsDevice device,\n            final BundleMessagesRequestDto bundleMessagesRequest)", "testcase": false, "constructor": false, "invocations": ["getActionList", "getResponse", "getClass", "getRequest", "getCommandExecutor", "getSimpleName", "getClass", "checkIfExecutorExists", "debug", "info", "debug", "setResponse", "executeBundleAction", "getRequest", "warn", "subList", "indexOf", "size", "debug", "getSimpleName", "getClass", "getRequest", "setResponse", "error", "getName", "addFaultResponse"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}