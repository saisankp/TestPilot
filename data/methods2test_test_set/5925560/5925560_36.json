{"test_class": {"identifier": "AbstractForwardSequentialListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Integer> list;", "modifier": "private", "type": "List<Integer>", "declarator": "list", "var_name": "list"}], "file": "dexlib2/src/test/java/org/jf/util/AbstractForwardSequentialListTest.java"}, "test_case": {"identifier": "testNegativeIndex", "parameters": "()", "modifiers": "@Test(expected = IndexOutOfBoundsException.class) public", "return": "void", "body": "@Test(expected = IndexOutOfBoundsException.class)\n    public void testNegativeIndex() {\n        list.listIterator(-1);\n    }", "signature": "void testNegativeIndex()", "full_signature": "@Test(expected = IndexOutOfBoundsException.class) public void testNegativeIndex()", "class_method_signature": "AbstractForwardSequentialListTest.testNegativeIndex()", "testcase": true, "constructor": false, "invocations": ["listIterator"]}, "focal_class": {"identifier": "AbstractForwardSequentialList", "superclass": "extends AbstractSequentialList<T>", "interfaces": "", "fields": [], "methods": [{"identifier": "iterator", "parameters": "(int index)", "modifiers": "@Nonnull private", "return": "Iterator<T>", "signature": "Iterator<T> iterator(int index)", "full_signature": "@Nonnull private Iterator<T> iterator(int index)", "class_method_signature": "AbstractForwardSequentialList.iterator(int index)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override @Nonnull public abstract", "return": "Iterator<T>", "signature": "Iterator<T> iterator()", "full_signature": "@Override @Nonnull public abstract Iterator<T> iterator()", "class_method_signature": "AbstractForwardSequentialList.iterator()", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "(final int initialIndex)", "modifiers": "@Override @Nonnull public", "return": "ListIterator<T>", "signature": "ListIterator<T> listIterator(final int initialIndex)", "full_signature": "@Override @Nonnull public ListIterator<T> listIterator(final int initialIndex)", "class_method_signature": "AbstractForwardSequentialList.listIterator(final int initialIndex)", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "()", "modifiers": "@Override @Nonnull public", "return": "ListIterator<T>", "signature": "ListIterator<T> listIterator()", "full_signature": "@Override @Nonnull public ListIterator<T> listIterator()", "class_method_signature": "AbstractForwardSequentialList.listIterator()", "testcase": false, "constructor": false}], "file": "dexlib2/src/main/java/org/jf/util/AbstractForwardSequentialList.java"}, "focal_method": {"identifier": "listIterator", "parameters": "(final int initialIndex)", "modifiers": "@Override @Nonnull public", "return": "ListIterator<T>", "body": "@Override @Nonnull public ListIterator<T> listIterator(final int initialIndex) {\n\n        final Iterator<T> initialIterator;\n        try {\n            initialIterator = iterator(initialIndex);\n        } catch (NoSuchElementException ex) {\n            throw new IndexOutOfBoundsException();\n        }\n\n        return new AbstractListIterator<T>() {\n            private int index = initialIndex - 1;\n            @Nullable private Iterator<T> forwardIterator = initialIterator;\n\n            @Nonnull\n            private Iterator<T> getForwardIterator() {\n                if (forwardIterator == null) {\n                    try {\n                        forwardIterator = iterator(index+1);\n                    } catch (IndexOutOfBoundsException ex) {\n                        throw new NoSuchElementException();\n                    }\n                }\n                return forwardIterator;\n            }\n\n            @Override public boolean hasNext() {\n                return getForwardIterator().hasNext();\n            }\n\n            @Override public boolean hasPrevious() {\n                return index >= 0;\n            }\n\n            @Override public T next() {\n                T ret = getForwardIterator().next();\n                index++;\n                return ret;\n            }\n\n            @Override public int nextIndex() {\n                return index+1;\n            }\n\n            @Override public T previous() {\n                forwardIterator = null;\n                try {\n                    return iterator(index--).next();\n                } catch (IndexOutOfBoundsException ex) {\n                    throw new NoSuchElementException();\n                }\n            }\n\n            @Override public int previousIndex() {\n                return index;\n            }\n        };\n    }", "signature": "ListIterator<T> listIterator(final int initialIndex)", "full_signature": "@Override @Nonnull public ListIterator<T> listIterator(final int initialIndex)", "class_method_signature": "AbstractForwardSequentialList.listIterator(final int initialIndex)", "testcase": false, "constructor": false, "invocations": ["iterator", "iterator", "hasNext", "getForwardIterator", "next", "getForwardIterator", "next", "iterator"]}, "repository": {"repo_id": 5925560, "url": "https://github.com/JesusFreke/smali", "language": "Java", "is_fork": false, "fork_count": 875, "stargazer_count": 4465, "size": 9375, "license": "licensed"}}