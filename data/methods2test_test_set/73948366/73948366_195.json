{"test_class": {"identifier": "StringUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/util/StringUtilsTest.java"}, "test_case": {"identifier": "testContainsControlCharacter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testContainsControlCharacter() {\n        assertFalse(StringUtils.containsControlCharacter(\"abcd\"));\n        assertFalse(StringUtils.containsControlCharacter(\"abc td\"));\n        assertFalse(StringUtils.containsControlCharacter(\"abc2345423540908d\"));\n        assertFalse(StringUtils.containsControlCharacter(\"abcd!@#$#@%$$^%&%*()_+==\"));\n        assertFalse(StringUtils.containsControlCharacter(\"abc\\\\][\\\\|}{|}d\"));\n        assertFalse(StringUtils.containsControlCharacter(\"abc\\\":\\\":\\\";;';';;d\"));\n        assertFalse(StringUtils.containsControlCharacter(\"ab,./<>?cd\"));\n        assertFalse(StringUtils.containsControlCharacter(\"abcd`~!@#$%^&*()_+-=\"));\n        \n        assertTrue(StringUtils.containsControlCharacter(\"abc\\t\"));\n        assertTrue(StringUtils.containsControlCharacter(\"abc\\n\"));\n        assertTrue(StringUtils.containsControlCharacter(\"abc\\b\"));\n        assertTrue(StringUtils.containsControlCharacter(\"abc\\r\"));\n        assertTrue(StringUtils.containsControlCharacter(\"abc\\t\\r\\b\\t\\n\"));\n    }", "signature": "void testContainsControlCharacter()", "full_signature": "@Test public void testContainsControlCharacter()", "class_method_signature": "StringUtilsTest.testContainsControlCharacter()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "containsControlCharacter", "assertFalse", "containsControlCharacter", "assertFalse", "containsControlCharacter", "assertFalse", "containsControlCharacter", "assertFalse", "containsControlCharacter", "assertFalse", "containsControlCharacter", "assertFalse", "containsControlCharacter", "assertFalse", "containsControlCharacter", "assertTrue", "containsControlCharacter", "assertTrue", "containsControlCharacter", "assertTrue", "containsControlCharacter", "assertTrue", "containsControlCharacter", "assertTrue", "containsControlCharacter"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isRegexMetaCharacter", "parameters": "(char regexChar)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRegexMetaCharacter(char regexChar)", "full_signature": "public static boolean isRegexMetaCharacter(char regexChar)", "class_method_signature": "StringUtils.isRegexMetaCharacter(char regexChar)", "testcase": false, "constructor": false}, {"identifier": "containsMatchCharacter", "parameters": "(String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsMatchCharacter(String name)", "full_signature": "public static boolean containsMatchCharacter(String name)", "class_method_signature": "StringUtils.containsMatchCharacter(String name)", "testcase": false, "constructor": false}, {"identifier": "patternFromGlob", "parameters": "(String glob)", "modifiers": "public static", "return": "String", "signature": "String patternFromGlob(String glob)", "full_signature": "public static String patternFromGlob(String glob)", "class_method_signature": "StringUtils.patternFromGlob(String glob)", "testcase": false, "constructor": false}, {"identifier": "containsControlCharacter", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsControlCharacter(String value)", "full_signature": "public static boolean containsControlCharacter(String value)", "class_method_signature": "StringUtils.containsControlCharacter(String value)", "testcase": false, "constructor": false}, {"identifier": "requestUriMatch", "parameters": "(String uri, Set<String> uriSet,\n            List<Pattern> uriList)", "modifiers": "public static", "return": "boolean", "signature": "boolean requestUriMatch(String uri, Set<String> uriSet,\n            List<Pattern> uriList)", "full_signature": "public static boolean requestUriMatch(String uri, Set<String> uriSet,\n            List<Pattern> uriList)", "class_method_signature": "StringUtils.requestUriMatch(String uri, Set<String> uriSet,\n            List<Pattern> uriList)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/StringUtils.java"}, "focal_method": {"identifier": "containsControlCharacter", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "body": "public static boolean containsControlCharacter(String value) {\n        \n        // we're going to check if the string contains\n        // any characters in the '00' through '1F' range\n        // so anything smaller than a space\n        \n        int length = value.length();\n        for (int i = 0; i < length; i++) {\n            if (value.charAt(i) < ' ') {\n                return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean containsControlCharacter(String value)", "full_signature": "public static boolean containsControlCharacter(String value)", "class_method_signature": "StringUtils.containsControlCharacter(String value)", "testcase": false, "constructor": false, "invocations": ["length", "charAt"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}