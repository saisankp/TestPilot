{"test_class": {"identifier": "AnagramsTest", "superclass": "", "interfaces": "", "fields": [], "file": "anagrams/20160304-paul-michal/src/test/java/AnagramsTest.java"}, "test_case": {"identifier": "testReverseInput3CharAnagram", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReverseInput3CharAnagram() throws Exception {\n\n        Anagrams anagrams = new Anagrams();\n\n        assertThat(anagrams.anagram(\"bir\")).contains(\"rib\");\n    }", "signature": "void testReverseInput3CharAnagram()", "full_signature": "@Test public void testReverseInput3CharAnagram()", "class_method_signature": "AnagramsTest.testReverseInput3CharAnagram()", "testcase": true, "constructor": false, "invocations": ["contains", "assertThat", "anagram"]}, "focal_class": {"identifier": "Anagrams", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "anagram", "parameters": "(String input)", "modifiers": "public", "return": "List<String>", "signature": "List<String> anagram(String input)", "full_signature": "public List<String> anagram(String input)", "class_method_signature": "Anagrams.anagram(String input)", "testcase": false, "constructor": false}, {"identifier": "getReverse", "parameters": "(char[] chars)", "modifiers": "private", "return": "String", "signature": "String getReverse(char[] chars)", "full_signature": "private String getReverse(char[] chars)", "class_method_signature": "Anagrams.getReverse(char[] chars)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(char[] chars, int i)", "modifiers": "private", "return": "char", "signature": "char reverse(char[] chars, int i)", "full_signature": "private char reverse(char[] chars, int i)", "class_method_signature": "Anagrams.reverse(char[] chars, int i)", "testcase": false, "constructor": false}, {"identifier": "getTwoIsStart", "parameters": "(char[] chars)", "modifiers": "private", "return": "String", "signature": "String getTwoIsStart(char[] chars)", "full_signature": "private String getTwoIsStart(char[] chars)", "class_method_signature": "Anagrams.getTwoIsStart(char[] chars)", "testcase": false, "constructor": false}, {"identifier": "twoIsStart", "parameters": "(char[] chars, int i)", "modifiers": "private", "return": "char", "signature": "char twoIsStart(char[] chars, int i)", "full_signature": "private char twoIsStart(char[] chars, int i)", "class_method_signature": "Anagrams.twoIsStart(char[] chars, int i)", "testcase": false, "constructor": false}], "file": "anagrams/20160304-paul-michal/src/main/java/Anagrams.java"}, "focal_method": {"identifier": "anagram", "parameters": "(String input)", "modifiers": "public", "return": "List<String>", "body": "public List<String> anagram(String input) {\n        final List<String> anagrams = new ArrayList<String>();\n\n        char[] chars = input.toCharArray();\n\n        String reverse = getReverse(chars);\n        anagrams.add(reverse);\n\n        String twoIsStart = getTwoIsStart(chars);\n        anagrams.add(twoIsStart);\n\n        return anagrams;\n    }", "signature": "List<String> anagram(String input)", "full_signature": "public List<String> anagram(String input)", "class_method_signature": "Anagrams.anagram(String input)", "testcase": false, "constructor": false, "invocations": ["toCharArray", "getReverse", "add", "getTwoIsStart", "add"]}, "repository": {"repo_id": 6509909, "url": "https://github.com/novoda/dojos", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 72, "size": 12987, "license": "licensed"}}