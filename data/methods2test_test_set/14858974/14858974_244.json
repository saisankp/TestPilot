{"test_class": {"identifier": "MongodbHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String collectionName;", "modifier": "private", "type": "String", "declarator": "collectionName", "var_name": "collectionName"}, {"original_string": "private Class<T> tClass;", "modifier": "private", "type": "Class<T>", "declarator": "tClass", "var_name": "tClass"}, {"original_string": "private T tInstance;", "modifier": "private", "type": "T", "declarator": "tInstance", "var_name": "tInstance"}, {"original_string": "private BiConsumer<MongodbHandler, MongoCollection> actAssert;", "modifier": "private", "type": "BiConsumer<MongodbHandler, MongoCollection>", "declarator": "actAssert", "var_name": "actAssert"}], "file": "server/src/test/java/org/axway/grapes/server/db/mongo/MongodbHandlerTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws UnknownHostException {\n        MongodbHandler sut = new MongodbHandler(mock(DataBaseConfig.class), mock(DB.class));\n\n        final Supplier<Jongo> jongoSupplier = prepareJongoSupplier(collectionName, tClass, tInstance);\n        sut.setJongoSupplier(jongoSupplier);\n\n        actAssert.accept(sut, jongoSupplier.get().getCollection(collectionName));\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "MongodbHandlerTest.test()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "prepareJongoSupplier", "setJongoSupplier", "accept", "getCollection", "get"]}, "focal_class": {"identifier": "MongodbHandler", "superclass": "", "interfaces": "implements RepositoryHandler", "fields": [{"original_string": "private LoadingCache<String, DbCredential> credentialCache;", "modifier": "private", "type": "LoadingCache<String, DbCredential>", "declarator": "credentialCache", "var_name": "credentialCache"}, {"original_string": "private final DB db;", "modifier": "private final", "type": "DB", "declarator": "db", "var_name": "db"}, {"original_string": "private static final String SET_PATTERN = \"{ $set: { \\\"%s\\\": #}} \";", "modifier": "private static final", "type": "String", "declarator": "SET_PATTERN = \"{ $set: { \\\"%s\\\": #}} \"", "var_name": "SET_PATTERN"}, {"original_string": "private static final String SET_PATTERN_DOUBLE = \"{ $set: { \\\"%s\\\": #, \\\"%s\\\": #}} \";", "modifier": "private static final", "type": "String", "declarator": "SET_PATTERN_DOUBLE = \"{ $set: { \\\"%s\\\": #, \\\"%s\\\": #}} \"", "var_name": "SET_PATTERN_DOUBLE"}, {"original_string": "private Supplier<Jongo> jongoSupplier;", "modifier": "private", "type": "Supplier<Jongo>", "declarator": "jongoSupplier", "var_name": "jongoSupplier"}, {"original_string": "private static final long COUNT_THRESHOLD = 3000;", "modifier": "private static final", "type": "long", "declarator": "COUNT_THRESHOLD = 3000", "var_name": "COUNT_THRESHOLD"}, {"original_string": "private static final String SEARCH_COUNT_EXCEEDED = \"TOO_MANY_RESULTS\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_COUNT_EXCEEDED = \"TOO_MANY_RESULTS\"", "var_name": "SEARCH_COUNT_EXCEEDED"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(MongodbHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(MongodbHandler.class)", "var_name": "LOG"}], "methods": [{"identifier": "MongodbHandler", "parameters": "(final DataBaseConfig config, final DB theDb)", "modifiers": "public", "return": "", "signature": " MongodbHandler(final DataBaseConfig config, final DB theDb)", "full_signature": "public  MongodbHandler(final DataBaseConfig config, final DB theDb)", "class_method_signature": "MongodbHandler.MongodbHandler(final DataBaseConfig config, final DB theDb)", "testcase": false, "constructor": true}, {"identifier": "setJongoSupplier", "parameters": "(final Supplier<Jongo> s)", "modifiers": "public", "return": "void", "signature": "void setJongoSupplier(final Supplier<Jongo> s)", "full_signature": "public void setJongoSupplier(final Supplier<Jongo> s)", "class_method_signature": "MongodbHandler.setJongoSupplier(final Supplier<Jongo> s)", "testcase": false, "constructor": false}, {"identifier": "getJongoDataStore", "parameters": "()", "modifiers": "private", "return": "Jongo", "signature": "Jongo getJongoDataStore()", "full_signature": "private Jongo getJongoDataStore()", "class_method_signature": "MongodbHandler.getJongoDataStore()", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(final DbCredential credential)", "modifiers": "@Override public", "return": "void", "signature": "void store(final DbCredential credential)", "full_signature": "@Override public void store(final DbCredential credential)", "class_method_signature": "MongodbHandler.store(final DbCredential credential)", "testcase": false, "constructor": false}, {"identifier": "addUserRole", "parameters": "(final String user, final AvailableRoles role)", "modifiers": "@Override public", "return": "void", "signature": "void addUserRole(final String user, final AvailableRoles role)", "full_signature": "@Override public void addUserRole(final String user, final AvailableRoles role)", "class_method_signature": "MongodbHandler.addUserRole(final String user, final AvailableRoles role)", "testcase": false, "constructor": false}, {"identifier": "removeUserRole", "parameters": "(final String user, final AvailableRoles role)", "modifiers": "@Override public", "return": "void", "signature": "void removeUserRole(final String user, final AvailableRoles role)", "full_signature": "@Override public void removeUserRole(final String user, final AvailableRoles role)", "class_method_signature": "MongodbHandler.removeUserRole(final String user, final AvailableRoles role)", "testcase": false, "constructor": false}, {"identifier": "getCredential", "parameters": "(final String user)", "modifiers": "@Override public", "return": "DbCredential", "signature": "DbCredential getCredential(final String user)", "full_signature": "@Override public DbCredential getCredential(final String user)", "class_method_signature": "MongodbHandler.getCredential(final String user)", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(final DbLicense license)", "modifiers": "@Override public", "return": "void", "signature": "void store(final DbLicense license)", "full_signature": "@Override public void store(final DbLicense license)", "class_method_signature": "MongodbHandler.store(final DbLicense license)", "testcase": false, "constructor": false}, {"identifier": "getLicenseNames", "parameters": "(final FiltersHolder filters)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getLicenseNames(final FiltersHolder filters)", "full_signature": "@Override public List<String> getLicenseNames(final FiltersHolder filters)", "class_method_signature": "MongodbHandler.getLicenseNames(final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "getAllLicenses", "parameters": "()", "modifiers": "@Override public", "return": "List<DbLicense>", "signature": "List<DbLicense> getAllLicenses()", "full_signature": "@Override public List<DbLicense> getAllLicenses()", "class_method_signature": "MongodbHandler.getAllLicenses()", "testcase": false, "constructor": false}, {"identifier": "getLicense", "parameters": "(final String name)", "modifiers": "@Override public", "return": "DbLicense", "signature": "DbLicense getLicense(final String name)", "full_signature": "@Override public DbLicense getLicense(final String name)", "class_method_signature": "MongodbHandler.getLicense(final String name)", "testcase": false, "constructor": false}, {"identifier": "deleteLicense", "parameters": "(final String name)", "modifiers": "@Override public", "return": "void", "signature": "void deleteLicense(final String name)", "full_signature": "@Override public void deleteLicense(final String name)", "class_method_signature": "MongodbHandler.deleteLicense(final String name)", "testcase": false, "constructor": false}, {"identifier": "getArtifacts", "parameters": "(final FiltersHolder filters)", "modifiers": "@Override public", "return": "List<DbArtifact>", "signature": "List<DbArtifact> getArtifacts(final FiltersHolder filters)", "full_signature": "@Override public List<DbArtifact> getArtifacts(final FiltersHolder filters)", "class_method_signature": "MongodbHandler.getArtifacts(final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "addLicenseToArtifact", "parameters": "(final DbArtifact artifact, final String licenseId)", "modifiers": "@Override public", "return": "void", "signature": "void addLicenseToArtifact(final DbArtifact artifact, final String licenseId)", "full_signature": "@Override public void addLicenseToArtifact(final DbArtifact artifact, final String licenseId)", "class_method_signature": "MongodbHandler.addLicenseToArtifact(final DbArtifact artifact, final String licenseId)", "testcase": false, "constructor": false}, {"identifier": "removeLicenseFromArtifact", "parameters": "(final DbArtifact artifact,\n                                          final String licenseId,\n                                          final LicenseMatcher licenseMatcher)", "modifiers": "@Override public", "return": "void", "signature": "void removeLicenseFromArtifact(final DbArtifact artifact,\n                                          final String licenseId,\n                                          final LicenseMatcher licenseMatcher)", "full_signature": "@Override public void removeLicenseFromArtifact(final DbArtifact artifact,\n                                          final String licenseId,\n                                          final LicenseMatcher licenseMatcher)", "class_method_signature": "MongodbHandler.removeLicenseFromArtifact(final DbArtifact artifact,\n                                          final String licenseId,\n                                          final LicenseMatcher licenseMatcher)", "testcase": false, "constructor": false}, {"identifier": "approveLicense", "parameters": "(final DbLicense license, final Boolean approved)", "modifiers": "@Override public", "return": "void", "signature": "void approveLicense(final DbLicense license, final Boolean approved)", "full_signature": "@Override public void approveLicense(final DbLicense license, final Boolean approved)", "class_method_signature": "MongodbHandler.approveLicense(final DbLicense license, final Boolean approved)", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(final DbArtifact artifact)", "modifiers": "@Override public", "return": "void", "signature": "void store(final DbArtifact artifact)", "full_signature": "@Override public void store(final DbArtifact artifact)", "class_method_signature": "MongodbHandler.store(final DbArtifact artifact)", "testcase": false, "constructor": false}, {"identifier": "getGavcs", "parameters": "(final FiltersHolder filters)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getGavcs(final FiltersHolder filters)", "full_signature": "@Override public List<String> getGavcs(final FiltersHolder filters)", "class_method_signature": "MongodbHandler.getGavcs(final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "getGroupIds", "parameters": "(final FiltersHolder filters)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getGroupIds(final FiltersHolder filters)", "full_signature": "@Override public List<String> getGroupIds(final FiltersHolder filters)", "class_method_signature": "MongodbHandler.getGroupIds(final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "getArtifactVersions", "parameters": "(final DbArtifact artifact)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getArtifactVersions(final DbArtifact artifact)", "full_signature": "@Override public List<String> getArtifactVersions(final DbArtifact artifact)", "class_method_signature": "MongodbHandler.getArtifactVersions(final DbArtifact artifact)", "testcase": false, "constructor": false}, {"identifier": "getArtifact", "parameters": "(final String gavc)", "modifiers": "@Override public", "return": "DbArtifact", "signature": "DbArtifact getArtifact(final String gavc)", "full_signature": "@Override public DbArtifact getArtifact(final String gavc)", "class_method_signature": "MongodbHandler.getArtifact(final String gavc)", "testcase": false, "constructor": false}, {"identifier": "getArtifactUsingSHA256", "parameters": "(final String sha256)", "modifiers": "@Override public", "return": "DbArtifact", "signature": "DbArtifact getArtifactUsingSHA256(final String sha256)", "full_signature": "@Override public DbArtifact getArtifactUsingSHA256(final String sha256)", "class_method_signature": "MongodbHandler.getArtifactUsingSHA256(final String sha256)", "testcase": false, "constructor": false}, {"identifier": "deleteArtifact", "parameters": "(final String gavc)", "modifiers": "@Override public", "return": "void", "signature": "void deleteArtifact(final String gavc)", "full_signature": "@Override public void deleteArtifact(final String gavc)", "class_method_signature": "MongodbHandler.deleteArtifact(final String gavc)", "testcase": false, "constructor": false}, {"identifier": "updateDoNotUse", "parameters": "(final DbArtifact artifact, final Boolean doNotUse)", "modifiers": "@Override public", "return": "void", "signature": "void updateDoNotUse(final DbArtifact artifact, final Boolean doNotUse)", "full_signature": "@Override public void updateDoNotUse(final DbArtifact artifact, final Boolean doNotUse)", "class_method_signature": "MongodbHandler.updateDoNotUse(final DbArtifact artifact, final Boolean doNotUse)", "testcase": false, "constructor": false}, {"identifier": "updateDownloadUrl", "parameters": "(final DbArtifact artifact, final String downLoadUrl)", "modifiers": "@Override public", "return": "void", "signature": "void updateDownloadUrl(final DbArtifact artifact, final String downLoadUrl)", "full_signature": "@Override public void updateDownloadUrl(final DbArtifact artifact, final String downLoadUrl)", "class_method_signature": "MongodbHandler.updateDownloadUrl(final DbArtifact artifact, final String downLoadUrl)", "testcase": false, "constructor": false}, {"identifier": "updateProvider", "parameters": "(final DbArtifact artifact, final String provider)", "modifiers": "@Override public", "return": "void", "signature": "void updateProvider(final DbArtifact artifact, final String provider)", "full_signature": "@Override public void updateProvider(final DbArtifact artifact, final String provider)", "class_method_signature": "MongodbHandler.updateProvider(final DbArtifact artifact, final String provider)", "testcase": false, "constructor": false}, {"identifier": "getAncestors", "parameters": "(final DbArtifact artifact, final FiltersHolder filters)", "modifiers": "@Override public", "return": "List<DbModule>", "signature": "List<DbModule> getAncestors(final DbArtifact artifact, final FiltersHolder filters)", "full_signature": "@Override public List<DbModule> getAncestors(final DbArtifact artifact, final FiltersHolder filters)", "class_method_signature": "MongodbHandler.getAncestors(final DbArtifact artifact, final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(final DbModule module)", "modifiers": "@Override public", "return": "void", "signature": "void store(final DbModule module)", "full_signature": "@Override public void store(final DbModule module)", "class_method_signature": "MongodbHandler.store(final DbModule module)", "testcase": false, "constructor": false}, {"identifier": "getModuleNames", "parameters": "(final FiltersHolder filters)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getModuleNames(final FiltersHolder filters)", "full_signature": "@Override public List<String> getModuleNames(final FiltersHolder filters)", "class_method_signature": "MongodbHandler.getModuleNames(final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "getModuleVersions", "parameters": "(final String name, final FiltersHolder filters)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getModuleVersions(final String name, final FiltersHolder filters)", "full_signature": "@Override public List<String> getModuleVersions(final String name, final FiltersHolder filters)", "class_method_signature": "MongodbHandler.getModuleVersions(final String name, final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "getModule", "parameters": "(final String moduleId)", "modifiers": "@Override public", "return": "DbModule", "signature": "DbModule getModule(final String moduleId)", "full_signature": "@Override public DbModule getModule(final String moduleId)", "class_method_signature": "MongodbHandler.getModule(final String moduleId)", "testcase": false, "constructor": false}, {"identifier": "getModules", "parameters": "(final FiltersHolder filters)", "modifiers": "@Override public", "return": "List<DbModule>", "signature": "List<DbModule> getModules(final FiltersHolder filters)", "full_signature": "@Override public List<DbModule> getModules(final FiltersHolder filters)", "class_method_signature": "MongodbHandler.getModules(final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "deleteModule", "parameters": "(final String moduleId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteModule(final String moduleId)", "full_signature": "@Override public void deleteModule(final String moduleId)", "class_method_signature": "MongodbHandler.deleteModule(final String moduleId)", "testcase": false, "constructor": false}, {"identifier": "promoteModule", "parameters": "(final DbModule module)", "modifiers": "@Override public", "return": "void", "signature": "void promoteModule(final DbModule module)", "full_signature": "@Override public void promoteModule(final DbModule module)", "class_method_signature": "MongodbHandler.promoteModule(final DbModule module)", "testcase": false, "constructor": false}, {"identifier": "getRootModuleOf", "parameters": "(final String gavc)", "modifiers": "@Override public", "return": "DbModule", "signature": "DbModule getRootModuleOf(final String gavc)", "full_signature": "@Override public DbModule getRootModuleOf(final String gavc)", "class_method_signature": "MongodbHandler.getRootModuleOf(final String gavc)", "testcase": false, "constructor": false}, {"identifier": "getModuleOf", "parameters": "(final String gavc)", "modifiers": "@Override public", "return": "DbModule", "signature": "DbModule getModuleOf(final String gavc)", "full_signature": "@Override public DbModule getModuleOf(final String gavc)", "class_method_signature": "MongodbHandler.getModuleOf(final String gavc)", "testcase": false, "constructor": false}, {"identifier": "getOrganizationNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getOrganizationNames()", "full_signature": "@Override public List<String> getOrganizationNames()", "class_method_signature": "MongodbHandler.getOrganizationNames()", "testcase": false, "constructor": false}, {"identifier": "getOrganization", "parameters": "(String name)", "modifiers": "@Override public", "return": "DbOrganization", "signature": "DbOrganization getOrganization(String name)", "full_signature": "@Override public DbOrganization getOrganization(String name)", "class_method_signature": "MongodbHandler.getOrganization(String name)", "testcase": false, "constructor": false}, {"identifier": "deleteOrganization", "parameters": "(String organizationId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteOrganization(String organizationId)", "full_signature": "@Override public void deleteOrganization(String organizationId)", "class_method_signature": "MongodbHandler.deleteOrganization(String organizationId)", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(DbOrganization organization)", "modifiers": "@Override public", "return": "void", "signature": "void store(DbOrganization organization)", "full_signature": "@Override public void store(DbOrganization organization)", "class_method_signature": "MongodbHandler.store(DbOrganization organization)", "testcase": false, "constructor": false}, {"identifier": "addModulesOrganization", "parameters": "(final String corporateGidPrefix, final DbOrganization organization)", "modifiers": "@Override public", "return": "void", "signature": "void addModulesOrganization(final String corporateGidPrefix, final DbOrganization organization)", "full_signature": "@Override public void addModulesOrganization(final String corporateGidPrefix, final DbOrganization organization)", "class_method_signature": "MongodbHandler.addModulesOrganization(final String corporateGidPrefix, final DbOrganization organization)", "testcase": false, "constructor": false}, {"identifier": "removeModulesOrganization", "parameters": "(final String corporateGidPrefix, final DbOrganization organization)", "modifiers": "@Override public", "return": "void", "signature": "void removeModulesOrganization(final String corporateGidPrefix, final DbOrganization organization)", "full_signature": "@Override public void removeModulesOrganization(final String corporateGidPrefix, final DbOrganization organization)", "class_method_signature": "MongodbHandler.removeModulesOrganization(final String corporateGidPrefix, final DbOrganization organization)", "testcase": false, "constructor": false}, {"identifier": "removeModulesOrganization", "parameters": "(final DbOrganization organization)", "modifiers": "@Override public", "return": "void", "signature": "void removeModulesOrganization(final DbOrganization organization)", "full_signature": "@Override public void removeModulesOrganization(final DbOrganization organization)", "class_method_signature": "MongodbHandler.removeModulesOrganization(final DbOrganization organization)", "testcase": false, "constructor": false}, {"identifier": "getAllOrganizations", "parameters": "()", "modifiers": "@Override public", "return": "List<DbOrganization>", "signature": "List<DbOrganization> getAllOrganizations()", "full_signature": "@Override public List<DbOrganization> getAllOrganizations()", "class_method_signature": "MongodbHandler.getAllOrganizations()", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(final DbProduct dbProduct)", "modifiers": "@Override public", "return": "void", "signature": "void store(final DbProduct dbProduct)", "full_signature": "@Override public void store(final DbProduct dbProduct)", "class_method_signature": "MongodbHandler.store(final DbProduct dbProduct)", "testcase": false, "constructor": false}, {"identifier": "getProduct", "parameters": "(final String name)", "modifiers": "@Override public", "return": "DbProduct", "signature": "DbProduct getProduct(final String name)", "full_signature": "@Override public DbProduct getProduct(final String name)", "class_method_signature": "MongodbHandler.getProduct(final String name)", "testcase": false, "constructor": false}, {"identifier": "getProductNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getProductNames()", "full_signature": "@Override public List<String> getProductNames()", "class_method_signature": "MongodbHandler.getProductNames()", "testcase": false, "constructor": false}, {"identifier": "deleteProduct", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void deleteProduct(String name)", "full_signature": "@Override public void deleteProduct(String name)", "class_method_signature": "MongodbHandler.deleteProduct(String name)", "testcase": false, "constructor": false}, {"identifier": "getOneByQuery", "parameters": "(final String collection,\n                                         final String query,\n                                         final Class<T> c)", "modifiers": "@Override public", "return": "Optional<T>", "signature": "Optional<T> getOneByQuery(final String collection,\n                                         final String query,\n                                         final Class<T> c)", "full_signature": "@Override public Optional<T> getOneByQuery(final String collection,\n                                         final String query,\n                                         final Class<T> c)", "class_method_signature": "MongodbHandler.getOneByQuery(final String collection,\n                                         final String query,\n                                         final Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "getListByQuery", "parameters": "(final String collection,\n                                      final String query,\n                                      final Class<T> c)", "modifiers": "public", "return": "List<T>", "signature": "List<T> getListByQuery(final String collection,\n                                      final String query,\n                                      final Class<T> c)", "full_signature": "public List<T> getListByQuery(final String collection,\n                                      final String query,\n                                      final Class<T> c)", "class_method_signature": "MongodbHandler.getListByQuery(final String collection,\n                                      final String query,\n                                      final Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "consumeByQuery", "parameters": "(final String collectionName,\n                                   final String query,\n                                   final Class<T> c,\n                                   final Consumer<T> consumer)", "modifiers": "@Override public", "return": "void", "signature": "void consumeByQuery(final String collectionName,\n                                   final String query,\n                                   final Class<T> c,\n                                   final Consumer<T> consumer)", "full_signature": "@Override public void consumeByQuery(final String collectionName,\n                                   final String query,\n                                   final Class<T> c,\n                                   final Consumer<T> consumer)", "class_method_signature": "MongodbHandler.consumeByQuery(final String collectionName,\n                                   final String query,\n                                   final Class<T> c,\n                                   final Consumer<T> consumer)", "testcase": false, "constructor": false}, {"identifier": "getResultCount", "parameters": "(final String collectionName, final String query)", "modifiers": "public", "return": "long", "signature": "long getResultCount(final String collectionName, final String query)", "full_signature": "public long getResultCount(final String collectionName, final String query)", "class_method_signature": "MongodbHandler.getResultCount(final String collectionName, final String query)", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(DbComment comment)", "modifiers": "@Override public", "return": "void", "signature": "void store(DbComment comment)", "full_signature": "@Override public void store(DbComment comment)", "class_method_signature": "MongodbHandler.store(DbComment comment)", "testcase": false, "constructor": false}, {"identifier": "getComments", "parameters": "(String entityId, String entityType)", "modifiers": "@Override public", "return": "List<DbComment>", "signature": "List<DbComment> getComments(String entityId, String entityType)", "full_signature": "@Override public List<DbComment> getComments(String entityId, String entityType)", "class_method_signature": "MongodbHandler.getComments(String entityId, String entityType)", "testcase": false, "constructor": false}, {"identifier": "getLatestComment", "parameters": "(String entityId, String entityType)", "modifiers": "@Override public", "return": "DbComment", "signature": "DbComment getLatestComment(String entityId, String entityType)", "full_signature": "@Override public DbComment getLatestComment(String entityId, String entityType)", "class_method_signature": "MongodbHandler.getLatestComment(String entityId, String entityType)", "testcase": false, "constructor": false}, {"identifier": "getSearchResult", "parameters": "(String searchParam, FiltersHolder filter)", "modifiers": "@Override public", "return": "DbSearch", "signature": "DbSearch getSearchResult(String searchParam, FiltersHolder filter)", "full_signature": "@Override public DbSearch getSearchResult(String searchParam, FiltersHolder filter)", "class_method_signature": "MongodbHandler.getSearchResult(String searchParam, FiltersHolder filter)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/db/mongo/MongodbHandler.java"}, "focal_method": {"identifier": "setJongoSupplier", "parameters": "(final Supplier<Jongo> s)", "modifiers": "public", "return": "void", "body": "public void setJongoSupplier(final Supplier<Jongo> s) {\n        this.jongoSupplier = s;\n    }", "signature": "void setJongoSupplier(final Supplier<Jongo> s)", "full_signature": "public void setJongoSupplier(final Supplier<Jongo> s)", "class_method_signature": "MongodbHandler.setJongoSupplier(final Supplier<Jongo> s)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}