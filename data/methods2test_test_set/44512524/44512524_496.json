{"test_class": {"identifier": "CountMinSketchAltTest", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/frequency/CountMinSketchAltTest.java"}, "test_case": {"identifier": "testMergeEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeEmpty() throws CMSMergeException\n    {\n        assertNull(CountMinSketchAlt.merge());\n    }", "signature": "void testMergeEmpty()", "full_signature": "@Test public void testMergeEmpty()", "class_method_signature": "CountMinSketchAltTest.testMergeEmpty()", "testcase": true, "constructor": false, "invocations": ["assertNull", "merge"]}, "focal_class": {"identifier": "CountMinSketchAlt", "superclass": "", "interfaces": "implements ISimpleFrequency<Object>", "fields": [{"original_string": "public static final long PRIME_MODULUS = (1L << 31) - 1;", "modifier": "public static final", "type": "long", "declarator": "PRIME_MODULUS = (1L << 31) - 1", "var_name": "PRIME_MODULUS"}, {"original_string": "private int depth;", "modifier": "private", "type": "int", "declarator": "depth", "var_name": "depth"}, {"original_string": "private int width;", "modifier": "private", "type": "int", "declarator": "width", "var_name": "width"}, {"original_string": "private long[][] table;", "modifier": "private", "type": "long[][]", "declarator": "table", "var_name": "table"}, {"original_string": "private long[] hashA;", "modifier": "private", "type": "long[]", "declarator": "hashA", "var_name": "hashA"}, {"original_string": "private long size;", "modifier": "private", "type": "long", "declarator": "size", "var_name": "size"}, {"original_string": "private double eps;", "modifier": "private", "type": "double", "declarator": "eps", "var_name": "eps"}, {"original_string": "private double confidence;", "modifier": "private", "type": "double", "declarator": "confidence", "var_name": "confidence"}], "methods": [{"identifier": "CountMinSketchAlt", "parameters": "()", "modifiers": "private", "return": "", "signature": " CountMinSketchAlt()", "full_signature": "private  CountMinSketchAlt()", "class_method_signature": "CountMinSketchAlt.CountMinSketchAlt()", "testcase": false, "constructor": true}, {"identifier": "CountMinSketchAlt", "parameters": "(int depth, int width, int seed)", "modifiers": "public", "return": "", "signature": " CountMinSketchAlt(int depth, int width, int seed)", "full_signature": "public  CountMinSketchAlt(int depth, int width, int seed)", "class_method_signature": "CountMinSketchAlt.CountMinSketchAlt(int depth, int width, int seed)", "testcase": false, "constructor": true}, {"identifier": "CountMinSketchAlt", "parameters": "(double epsOfTotalCount, double confidence, int seed)", "modifiers": "public", "return": "", "signature": " CountMinSketchAlt(double epsOfTotalCount, double confidence, int seed)", "full_signature": "public  CountMinSketchAlt(double epsOfTotalCount, double confidence, int seed)", "class_method_signature": "CountMinSketchAlt.CountMinSketchAlt(double epsOfTotalCount, double confidence, int seed)", "testcase": false, "constructor": true}, {"identifier": "CountMinSketchAlt", "parameters": "(int depth, int width, int size, long[] hashA, long[][] table)", "modifiers": "private", "return": "", "signature": " CountMinSketchAlt(int depth, int width, int size, long[] hashA, long[][] table)", "full_signature": "private  CountMinSketchAlt(int depth, int width, int size, long[] hashA, long[][] table)", "class_method_signature": "CountMinSketchAlt.CountMinSketchAlt(int depth, int width, int size, long[] hashA, long[][] table)", "testcase": false, "constructor": true}, {"identifier": "initTablesWith", "parameters": "(int depth, int width, int seed)", "modifiers": "private", "return": "void", "signature": "void initTablesWith(int depth, int width, int seed)", "full_signature": "private void initTablesWith(int depth, int width, int seed)", "class_method_signature": "CountMinSketchAlt.initTablesWith(int depth, int width, int seed)", "testcase": false, "constructor": false}, {"identifier": "getRelativeError", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRelativeError()", "full_signature": "public double getRelativeError()", "class_method_signature": "CountMinSketchAlt.getRelativeError()", "testcase": false, "constructor": false}, {"identifier": "getConfidence", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getConfidence()", "full_signature": "public double getConfidence()", "class_method_signature": "CountMinSketchAlt.getConfidence()", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(long item, int i)", "modifiers": "private", "return": "int", "signature": "int hash(long item, int i)", "full_signature": "private int hash(long item, int i)", "class_method_signature": "CountMinSketchAlt.hash(long item, int i)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Object item)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Object item)", "full_signature": "@Override public boolean add(Object item)", "class_method_signature": "CountMinSketchAlt.add(Object item)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Object item, long count)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Object item, long count)", "full_signature": "@Override public boolean add(Object item, long count)", "class_method_signature": "CountMinSketchAlt.add(Object item, long count)", "testcase": false, "constructor": false}, {"identifier": "estimateCount", "parameters": "(Object item)", "modifiers": "@Override public", "return": "long", "signature": "long estimateCount(Object item)", "full_signature": "@Override public long estimateCount(Object item)", "class_method_signature": "CountMinSketchAlt.estimateCount(Object item)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long size()", "full_signature": "@Override public long size()", "class_method_signature": "CountMinSketchAlt.size()", "testcase": false, "constructor": false}, {"identifier": "addLong", "parameters": "(long item, long count)", "modifiers": "private", "return": "void", "signature": "void addLong(long item, long count)", "full_signature": "private void addLong(long item, long count)", "class_method_signature": "CountMinSketchAlt.addLong(long item, long count)", "testcase": false, "constructor": false}, {"identifier": "estimateCountLong", "parameters": "(long item)", "modifiers": "private", "return": "long", "signature": "long estimateCountLong(long item)", "full_signature": "private long estimateCountLong(long item)", "class_method_signature": "CountMinSketchAlt.estimateCountLong(long item)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(CountMinSketchAlt... estimators)", "modifiers": "public static", "return": "CountMinSketchAlt", "signature": "CountMinSketchAlt merge(CountMinSketchAlt... estimators)", "full_signature": "public static CountMinSketchAlt merge(CountMinSketchAlt... estimators)", "class_method_signature": "CountMinSketchAlt.merge(CountMinSketchAlt... estimators)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(CountMinSketchAlt sketch)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] serialize(CountMinSketchAlt sketch)", "full_signature": "public static byte[] serialize(CountMinSketchAlt sketch)", "class_method_signature": "CountMinSketchAlt.serialize(CountMinSketchAlt sketch)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] data)", "modifiers": "public static", "return": "CountMinSketchAlt", "signature": "CountMinSketchAlt deserialize(byte[] data)", "full_signature": "public static CountMinSketchAlt deserialize(byte[] data)", "class_method_signature": "CountMinSketchAlt.deserialize(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object item)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(Object item)", "full_signature": "public boolean contains(Object item)", "class_method_signature": "CountMinSketchAlt.contains(Object item)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/frequency/CountMinSketchAlt.java"}, "focal_method": {"identifier": "merge", "parameters": "(CountMinSketchAlt... estimators)", "modifiers": "public static", "return": "CountMinSketchAlt", "body": "public static CountMinSketchAlt merge(CountMinSketchAlt... estimators) throws CMSMergeException {\n        CountMinSketchAlt merged = null;\n        if (estimators != null && estimators.length > 0) {\n            int depth = estimators[0].depth;\n            int width = estimators[0].width;\n            long[] hashA = Arrays.copyOf(estimators[0].hashA, estimators[0].hashA.length);\n\n            long[][] table = new long[depth][width];\n            int size = 0;\n\n            for (CountMinSketchAlt estimator : estimators) {\n                if (estimator.depth != depth) {\n                    throw new CMSMergeException(\"Cannot merge estimators of different depth\");\n                }\n                if (estimator.width != width) {\n                    throw new CMSMergeException(\"Cannot merge estimators of different width\");\n                }\n                if (!Arrays.equals(estimator.hashA, hashA)) {\n                    throw new CMSMergeException(\"Cannot merge estimators of different seed\");\n                }\n\n                for (int i = 0; i < table.length; i++) {\n                    for (int j = 0; j < table[i].length; j++) {\n                        table[i][j] += estimator.table[i][j];\n                    }\n                }\n                size += estimator.size;\n            }\n\n            merged = new CountMinSketchAlt(depth, width, size, hashA, table);\n        }\n\n        return merged;\n    }", "signature": "CountMinSketchAlt merge(CountMinSketchAlt... estimators)", "full_signature": "public static CountMinSketchAlt merge(CountMinSketchAlt... estimators)", "class_method_signature": "CountMinSketchAlt.merge(CountMinSketchAlt... estimators)", "testcase": false, "constructor": false, "invocations": ["copyOf", "equals"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}