{"test_class": {"identifier": "ItemStateConverterImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ItemStateConverterImpl itemStateConverter;", "modifier": "private", "type": "ItemStateConverterImpl", "declarator": "itemStateConverter", "var_name": "itemStateConverter"}], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/internal/items/ItemStateConverterImplTest.java"}, "test_case": {"identifier": "numberItemWitDimensionShouldConvertToItemStateDescriptionUnit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void numberItemWitDimensionShouldConvertToItemStateDescriptionUnit() {\n        NumberItem item = mock(NumberItem.class);\n        StateDescription stateDescription = mock(StateDescription.class);\n        when(item.getStateDescription()).thenReturn(stateDescription);\n        doReturn(Temperature.class).when(item).getDimension();\n        when(stateDescription.getPattern()).thenReturn(\"%.1f K\");\n\n        State originalState = new QuantityType<>(\"12.34 \u00b0C\");\n        State convertedState = itemStateConverter.convertToAcceptedState(originalState, item);\n\n        assertThat(convertedState, is(new QuantityType<>(\"285.49 K\")));\n    }", "signature": "void numberItemWitDimensionShouldConvertToItemStateDescriptionUnit()", "full_signature": "@Test public void numberItemWitDimensionShouldConvertToItemStateDescriptionUnit()", "class_method_signature": "ItemStateConverterImplTest.numberItemWitDimensionShouldConvertToItemStateDescriptionUnit()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getStateDescription", "getDimension", "when", "doReturn", "thenReturn", "when", "getPattern", "convertToAcceptedState", "assertThat", "is"]}, "focal_class": {"identifier": "ItemStateConverterImpl", "superclass": "", "interfaces": "implements ItemStateConverter", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(ItemStateConverterImpl.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ItemStateConverterImpl.class)", "var_name": "logger"}, {"original_string": "private final UnitProvider unitProvider;", "modifier": "private final", "type": "UnitProvider", "declarator": "unitProvider", "var_name": "unitProvider"}], "methods": [{"identifier": "ItemStateConverterImpl", "parameters": "(final @Reference UnitProvider unitProvider)", "modifiers": "@Activate public", "return": "", "signature": " ItemStateConverterImpl(final @Reference UnitProvider unitProvider)", "full_signature": "@Activate public  ItemStateConverterImpl(final @Reference UnitProvider unitProvider)", "class_method_signature": "ItemStateConverterImpl.ItemStateConverterImpl(final @Reference UnitProvider unitProvider)", "testcase": false, "constructor": true}, {"identifier": "convertToAcceptedState", "parameters": "(@Nullable State state, @Nullable Item item)", "modifiers": "@Override public", "return": "State", "signature": "State convertToAcceptedState(@Nullable State state, @Nullable Item item)", "full_signature": "@Override public State convertToAcceptedState(@Nullable State state, @Nullable Item item)", "class_method_signature": "ItemStateConverterImpl.convertToAcceptedState(@Nullable State state, @Nullable Item item)", "testcase": false, "constructor": false}, {"identifier": "convertOrUndef", "parameters": "(QuantityType<?> quantityState, Unit<?> targetUnit)", "modifiers": "private", "return": "State", "signature": "State convertOrUndef(QuantityType<?> quantityState, Unit<?> targetUnit)", "full_signature": "private State convertOrUndef(QuantityType<?> quantityState, Unit<?> targetUnit)", "class_method_signature": "ItemStateConverterImpl.convertOrUndef(QuantityType<?> quantityState, Unit<?> targetUnit)", "testcase": false, "constructor": false}, {"identifier": "parseItemUnit", "parameters": "(NumberItem numberItem)", "modifiers": "private @Nullable", "return": "Unit<?>", "signature": "Unit<?> parseItemUnit(NumberItem numberItem)", "full_signature": "private @Nullable Unit<?> parseItemUnit(NumberItem numberItem)", "class_method_signature": "ItemStateConverterImpl.parseItemUnit(NumberItem numberItem)", "testcase": false, "constructor": false}, {"identifier": "isAccepted", "parameters": "(Item item, State state)", "modifiers": "private", "return": "boolean", "signature": "boolean isAccepted(Item item, State state)", "full_signature": "private boolean isAccepted(Item item, State state)", "class_method_signature": "ItemStateConverterImpl.isAccepted(Item item, State state)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemStateConverterImpl.java"}, "focal_method": {"identifier": "convertToAcceptedState", "parameters": "(@Nullable State state, @Nullable Item item)", "modifiers": "@Override public", "return": "State", "body": "@Override\n    public State convertToAcceptedState(@Nullable State state, @Nullable Item item) {\n        if (state == null) {\n            logger.error(\"A conversion of null was requested:\",\n                    new IllegalArgumentException(\"State must not be null.\"));\n            return UnDefType.NULL;\n        }\n\n        if (item != null && !isAccepted(item, state)) {\n            for (Class<? extends State> acceptedType : item.getAcceptedDataTypes()) {\n                State convertedState = state.as(acceptedType);\n                if (convertedState != null) {\n                    logger.debug(\"Converting {} '{}' to {} '{}' for item '{}'\", state.getClass().getSimpleName(), state,\n                            convertedState.getClass().getSimpleName(), convertedState, item.getName());\n                    return convertedState;\n                }\n            }\n        }\n\n        if (item instanceof NumberItem && state instanceof QuantityType) {\n            NumberItem numberItem = (NumberItem) item;\n            if (numberItem.getDimension() != null) {\n                QuantityType<?> quantityState = (QuantityType<?>) state;\n\n                // in case the item does define a unit it takes precedence over all other conversions:\n                Unit<?> itemUnit = parseItemUnit(numberItem);\n                if (itemUnit != null) {\n                    if (!itemUnit.equals(quantityState.getUnit())) {\n                        return convertOrUndef(quantityState, itemUnit);\n                    }\n\n                    return quantityState;\n                }\n\n                Class<? extends Quantity<?>> dimension = numberItem.getDimension();\n                @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n                // explicit cast to Class<? extends Quantity> as JDK compiler complains\n                Unit<? extends Quantity<?>> conversionUnit = unitProvider\n                        .getUnit((Class<? extends Quantity>) dimension);\n                if (conversionUnit != null\n                        && UnitUtils.isDifferentMeasurementSystem(conversionUnit, quantityState.getUnit())) {\n                    return convertOrUndef(quantityState, conversionUnit);\n                }\n\n                return state;\n            } else {\n                State convertedState = state.as(DecimalType.class);\n                if (convertedState != null) {\n                    // convertedState is always returned because the state is an instance\n                    // of QuantityType which never returns null for as(DecimalType.class)\n                    return convertedState;\n                }\n            }\n        }\n\n        return state;\n    }", "signature": "State convertToAcceptedState(@Nullable State state, @Nullable Item item)", "full_signature": "@Override public State convertToAcceptedState(@Nullable State state, @Nullable Item item)", "class_method_signature": "ItemStateConverterImpl.convertToAcceptedState(@Nullable State state, @Nullable Item item)", "testcase": false, "constructor": false, "invocations": ["error", "isAccepted", "getAcceptedDataTypes", "as", "debug", "getSimpleName", "getClass", "getSimpleName", "getClass", "getName", "getDimension", "parseItemUnit", "equals", "getUnit", "convertOrUndef", "getDimension", "getUnit", "isDifferentMeasurementSystem", "getUnit", "convertOrUndef", "as"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}