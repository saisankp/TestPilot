{"test_class": {"identifier": "DomainRoleMembersFetcherCommonTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/server_common/src/test/java/com/yahoo/athenz/common/server/notification/DomainRoleMembersFetcherCommonTest.java"}, "test_case": {"identifier": "testGetDomainRoleMembers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDomainRoleMembers() {\n        DomainRoleMembersFetcherCommon fetcherCommon = new DomainRoleMembersFetcherCommon(USER_DOMAIN_PREFIX);\n\n        long currentTimeInMillis = System.currentTimeMillis();\n        Timestamp futureTimeStamp =  Timestamp.fromMillis(currentTimeInMillis + 100000);\n        Timestamp pastTimeStamp =  Timestamp.fromMillis(currentTimeInMillis - 100000);\n\n        Role role1 = new Role();\n        role1.setName(\"role1\");\n        RoleMember roleMember1 = new RoleMember().setMemberName(\"user.unexpiredUser\").setExpiration(futureTimeStamp);\n        RoleMember roleMember2 = new RoleMember().setMemberName(\"user.expiredUser\").setExpiration(pastTimeStamp);\n        RoleMember roleMember3 = new RoleMember().setMemberName(\"user.noExpiration\");\n        RoleMember roleMember4 = new RoleMember().setMemberName(\"notProperUsername\");\n        List<RoleMember> role1MemberList = new ArrayList<>(Arrays.asList(roleMember1, roleMember2, roleMember3, roleMember4));\n        role1.setRoleMembers(role1MemberList);\n\n        Role role2 = new Role();\n        role2.setName(\"role2\");\n\n        Role role3 = new Role();\n\n        List<Role> rolesList = new ArrayList<>();\n        rolesList.add(role1);\n        rolesList.add(role2);\n        rolesList.add(role3);\n\n        Set<String> receivedMembers = fetcherCommon.getDomainRoleMembers(\"role1\", rolesList);\n        assertEquals(2, receivedMembers.size());\n        assertTrue(receivedMembers.contains(\"user.unexpiredUser\"));\n        assertTrue(receivedMembers.contains(\"user.noExpiration\"));\n\n        receivedMembers = fetcherCommon.getDomainRoleMembers(\"role2\", rolesList);\n        assertEquals(new HashSet<>(), receivedMembers);\n\n        receivedMembers = fetcherCommon.getDomainRoleMembers(\"roleDoesntExist\", rolesList);\n        assertEquals(new HashSet<>(), receivedMembers);\n    }", "signature": "void testGetDomainRoleMembers()", "full_signature": "@Test public void testGetDomainRoleMembers()", "class_method_signature": "DomainRoleMembersFetcherCommonTest.testGetDomainRoleMembers()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "fromMillis", "fromMillis", "setName", "setExpiration", "setMemberName", "setExpiration", "setMemberName", "setMemberName", "setMemberName", "asList", "setRoleMembers", "setName", "add", "add", "add", "getDomainRoleMembers", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "getDomainRoleMembers", "assertEquals", "getDomainRoleMembers", "assertEquals"]}, "focal_class": {"identifier": "DomainRoleMembersFetcherCommon", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String userDomainPrefix;", "modifier": "private final", "type": "String", "declarator": "userDomainPrefix", "var_name": "userDomainPrefix"}], "methods": [{"identifier": "DomainRoleMembersFetcherCommon", "parameters": "(String userDomainPrefix)", "modifiers": "public", "return": "", "signature": " DomainRoleMembersFetcherCommon(String userDomainPrefix)", "full_signature": "public  DomainRoleMembersFetcherCommon(String userDomainPrefix)", "class_method_signature": "DomainRoleMembersFetcherCommon.DomainRoleMembersFetcherCommon(String userDomainPrefix)", "testcase": false, "constructor": true}, {"identifier": "getDomainRoleMembers", "parameters": "(String roleName, List<Role> roles)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getDomainRoleMembers(String roleName, List<Role> roles)", "full_signature": "public Set<String> getDomainRoleMembers(String roleName, List<Role> roles)", "class_method_signature": "DomainRoleMembersFetcherCommon.getDomainRoleMembers(String roleName, List<Role> roles)", "testcase": false, "constructor": false}, {"identifier": "isUnexpiredUser", "parameters": "(RoleMember roleMember)", "modifiers": "private", "return": "boolean", "signature": "boolean isUnexpiredUser(RoleMember roleMember)", "full_signature": "private boolean isUnexpiredUser(RoleMember roleMember)", "class_method_signature": "DomainRoleMembersFetcherCommon.isUnexpiredUser(RoleMember roleMember)", "testcase": false, "constructor": false}], "file": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/notification/DomainRoleMembersFetcherCommon.java"}, "focal_method": {"identifier": "getDomainRoleMembers", "parameters": "(String roleName, List<Role> roles)", "modifiers": "public", "return": "Set<String>", "body": "public Set<String> getDomainRoleMembers(String roleName, List<Role> roles) {\n        if (roles == null) {\n            return new HashSet<>();\n        }\n\n        for (Role role : roles) {\n            if (role.getName() == null) {\n                continue;\n            }\n\n            if (role.getName().equals(roleName)) {\n                if (role.getRoleMembers() == null) {\n                    return new HashSet<>();\n                }\n\n                return role.getRoleMembers().stream()\n                        .filter(this::isUnexpiredUser)\n                        .map(RoleMember::getMemberName).collect(Collectors.toSet());\n            }\n        }\n\n        return new HashSet<>();\n    }", "signature": "Set<String> getDomainRoleMembers(String roleName, List<Role> roles)", "full_signature": "public Set<String> getDomainRoleMembers(String roleName, List<Role> roles)", "class_method_signature": "DomainRoleMembersFetcherCommon.getDomainRoleMembers(String roleName, List<Role> roles)", "testcase": false, "constructor": false, "invocations": ["getName", "equals", "getName", "getRoleMembers", "collect", "map", "filter", "stream", "getRoleMembers", "toSet"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}