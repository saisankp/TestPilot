{"test_class": {"identifier": "ProfileFromMailFromServiceSensorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProfileFromMailFromServiceSensor profileFromMailFromService;", "modifier": "private", "type": "ProfileFromMailFromServiceSensor", "declarator": "profileFromMailFromService", "var_name": "profileFromMailFromService"}], "file": "eu.alert-project.iccs.stardom.core/eu.alert-project.iccs.stardom.analyzers/eu.alert-project.iccs.stardom.analyzers.mailing/src/test/java/eu/alertproject/iccs/stardom/analyzers/mailing/internal/ProfileFromMailFromServiceSensorTest.java"}, "test_case": {"identifier": "getMailString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getMailString(){\n\n\n        Profile profileQuote = profileFromMailFromService.generate(\n                \"Nistor Andrei <coder.tux@gmail.com>\"\n        );\n        Assert.assertEquals(profileQuote.getName(),\"Nistor\");\n        Assert.assertEquals(profileQuote.getLastname(),\"Andrei\");\n        Assert.assertEquals(profileQuote.getEmail(),\"coder.tux@gmail.com\");\n\n\n        Profile withQuotes = profileFromMailFromService.generate(\n                \"\\\"Mario Bensi\\\" <nef@ipsquad.net>\"\n        );\n        Assert.assertEquals(withQuotes.getName(),\"Mario\");\n        Assert.assertEquals(withQuotes.getLastname(),\"Bensi\");\n        Assert.assertEquals(withQuotes.getEmail(),\"nef@ipsquad.net\");\n\n\n        Profile withUtf = profileFromMailFromService.generate(\n                \"Sebastian =?ISO-8859-1?Q?K=FCgler?= <sebas@kde.org>\"\n        );\n        Assert.assertEquals(withUtf.getName(),\"Sebastian\");\n        Assert.assertEquals(withUtf.getLastname(),\"=?ISO-8859-1?Q?K=FCgler?=\");\n        Assert.assertEquals(withUtf.getEmail(),\"sebas@kde.org\");\n\n        Profile withUtf2 = profileFromMailFromService.generate(\n                                        \"J\u00e9r\u00e9mie Doucy<jdoucy@gmail.com>\"\n        );\n        Assert.assertEquals(withUtf2.getName(),\"J\u00e9r\u00e9mie\");\n        Assert.assertEquals(withUtf2.getLastname(),\"Doucy\");\n        Assert.assertEquals(withUtf2.getEmail(),\"jdoucy@gmail.com\");\n\n        Profile withUtf3= profileFromMailFromService.generate(\n                                        \"J\u00e9r\u00f4me Leclaire<jerome.leclaire@orange.com>\"\n        );\n        Assert.assertEquals(withUtf3.getName(),\"J\u00e9r\u00f4me\");\n        Assert.assertEquals(withUtf3.getLastname(),\"Leclaire\");\n        Assert.assertEquals(withUtf3.getEmail(),\"jerome.leclaire@orange.com\");\n\n\n        Profile withDot = profileFromMailFromService.generate(\n                \"\\\"Aaron J. Seigo\\\" <aseigo@kde.org>\"\n        );\n        Assert.assertEquals(withDot.getName(),\"Aaron\");\n        Assert.assertEquals(withDot.getLastname(),\"J. Seigo\");\n        Assert.assertEquals(withDot.getEmail(),\"aseigo@kde.org\");\n\n\n        Profile withUTFNullResult = profileFromMailFromService.generate(\n                \"=?UTF-8?B?UmFmYcWCIE1pxYJlY2tp?= <zajec5@gmail.com>\"\n        );\n        Assert.assertNull(withUTFNullResult);\n\n\n        Profile profileUnderscore = profileFromMailFromService.generate(\n                \"houda_dd<houda.doumi@gmail.com>\"\n        );\n        Assert.assertEquals(profileUnderscore.getName(),\"houda_dd\");\n        Assert.assertEquals(profileUnderscore.getLastname(),\"\");\n        Assert.assertEquals(profileUnderscore.getEmail(),\"houda.doumi@gmail.com\");\n\n\n\n\n    }", "signature": "void getMailString()", "full_signature": "@Test public void getMailString()", "class_method_signature": "ProfileFromMailFromServiceSensorTest.getMailString()", "testcase": true, "constructor": false, "invocations": ["generate", "assertEquals", "getName", "assertEquals", "getLastname", "assertEquals", "getEmail", "generate", "assertEquals", "getName", "assertEquals", "getLastname", "assertEquals", "getEmail", "generate", "assertEquals", "getName", "assertEquals", "getLastname", "assertEquals", "getEmail", "generate", "assertEquals", "getName", "assertEquals", "getLastname", "assertEquals", "getEmail", "generate", "assertEquals", "getName", "assertEquals", "getLastname", "assertEquals", "getEmail", "generate", "assertEquals", "getName", "assertEquals", "getLastname", "assertEquals", "getEmail", "generate", "assertNull", "generate", "assertEquals", "getName", "assertEquals", "getLastname", "assertEquals", "getEmail"]}, "focal_class": {"identifier": "ProfileFromMailFromServiceSensor", "superclass": "", "interfaces": "implements ProfileFromMailFromService", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(ProfileFromMailFromServiceSensor.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ProfileFromMailFromServiceSensor.class)", "var_name": "logger"}], "methods": [{"identifier": "generate", "parameters": "(String mailFrom)", "modifiers": "@Override public", "return": "Profile", "signature": "Profile generate(String mailFrom)", "full_signature": "@Override public Profile generate(String mailFrom)", "class_method_signature": "ProfileFromMailFromServiceSensor.generate(String mailFrom)", "testcase": false, "constructor": false}], "file": "eu.alert-project.iccs.stardom.core/eu.alert-project.iccs.stardom.analyzers/eu.alert-project.iccs.stardom.analyzers.mailing/src/main/java/eu/alertproject/iccs/stardom/analyzers/mailing/internal/ProfileFromMailFromServiceSensor.java"}, "focal_method": {"identifier": "generate", "parameters": "(String mailFrom)", "modifiers": "@Override public", "return": "Profile", "body": "@Override\n    public Profile generate(String mailFrom){\n\n        String[] regexes = new String[]{\n          \"\\\"?([\\\\p{L}\\\\?-_]+)\\\\s?([\\\\p{L}\\\\?\\\\.\\\\d=\\\\\\\\ _-]+)?\\\"?\\\\s*<(.*)>\", //  Alex Fiestas <afiestas@kde.org>\n          \"([\\\\p{L}\\\\.\\\\?-_]+) at ([\\\\p{L}\\\\?\\\\.\\\\d=\\\\-_]+) (\\\\((.*( .*)?)\\\\))?\"\n        };\n\n        String regex = null;\n\n        for(String reg:regexes){\n\n            if(mailFrom.matches(reg)){\n                regex = reg;\n                break;\n            }\n        }\n\n        if(regex == null){\n            logger.error(\"Could not find a suitable regular expression for {} \",mailFrom);\n            return null;\n        }\n\n        logger.debug(\"Found a match for {} \",mailFrom);\n\n        /*\n        We are making the following assumptions that we have\n            1.) Email format Name Lastname <email>\n            2.) Names are composed of a single word, the rest is the last name\n\n            Alex Fiestas <afiestas@kde.org>\n         */\n        Pattern p = Pattern.compile(regex);\n\n        int i = ArrayUtils.indexOf(regexes, regex);\n        Profile profile = new Profile();\n\n        Matcher matcher = p.matcher(mailFrom);\n        matcher.matches();\n\n        switch (i){\n            case 0:   //  Alex Fiestas <afiestas@kde.org>\n\n                if(matcher.groupCount() <= 2){\n                    //single name\n                    profile.setName(matcher.group(1).trim());\n                    profile.setEmail(matcher.group(2).trim());\n                    profile.setUsername(matcher.group(2).trim());\n                }else if( matcher.groupCount()>2){\n                    profile.setName(matcher.group(1).trim());\n                    profile.setLastname(StringUtils.trimToEmpty(matcher.group(2)));\n                    profile.setEmail(matcher.group(3).trim());\n                    profile.setUsername(matcher.group(3).trim());\n                }\n                break;\n            case 1:    //  afiestas at kde com\n                profile.setEmail(matcher.group(1).trim()+\" \"+matcher.group(2).trim());\n                profile.setName(StringUtils.substringBefore(matcher.group(4).trim(),\" \"));\n                profile.setLastname(StringUtils.defaultIfEmpty(StringUtils.substringAfter(matcher.group(4).trim(),\" \").trim(),\"\"));\n                break;\n        }\n        return profile;\n\n    }", "signature": "Profile generate(String mailFrom)", "full_signature": "@Override public Profile generate(String mailFrom)", "class_method_signature": "ProfileFromMailFromServiceSensor.generate(String mailFrom)", "testcase": false, "constructor": false, "invocations": ["matches", "error", "debug", "compile", "indexOf", "matcher", "matches", "groupCount", "setName", "trim", "group", "setEmail", "trim", "group", "setUsername", "trim", "group", "groupCount", "setName", "trim", "group", "setLastname", "trimToEmpty", "group", "setEmail", "trim", "group", "setUsername", "trim", "group", "setEmail", "trim", "group", "trim", "group", "setName", "substringBefore", "trim", "group", "setLastname", "defaultIfEmpty", "trim", "substringAfter", "trim", "group"]}, "repository": {"repo_id": 1603277, "url": "https://github.com/iccs/STARDOM", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 39514, "license": "licensed"}}