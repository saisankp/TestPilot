{"test_class": {"identifier": "MutableCharArrayTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/carrot2/util/MutableCharArrayTest.java"}, "test_case": {"identifier": "testReset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReset() {\n    final MutableCharArray seq = new MutableCharArray(\"Dawid Weiss\");\n    assertEquals(seq.toString(), \"Dawid Weiss\");\n\n    seq.reset(\"Abcdef\");\n    assertEquals(seq.toString(), \"Abcdef\");\n\n    seq.reset(\"Dawid Weiss\".toCharArray(), 1, 3);\n    assertEquals(seq, new MutableCharArray(\"awi\"));\n\n    seq.reset(\"abc\");\n    int h1 = seq.hashCode();\n    seq.reset(\"def\");\n    int h2 = seq.hashCode();\n    assertTrue(h1 != h2);\n  }", "signature": "void testReset()", "full_signature": "@Test public void testReset()", "class_method_signature": "MutableCharArrayTest.testReset()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "reset", "assertEquals", "toString", "reset", "toCharArray", "assertEquals", "reset", "hashCode", "reset", "hashCode", "assertTrue"]}, "focal_class": {"identifier": "MutableCharArray", "superclass": "", "interfaces": "implements CharSequence, Cloneable", "fields": [{"original_string": "private static final char[] EMPTY = new char[0];", "modifier": "private static final", "type": "char[]", "declarator": "EMPTY = new char[0]", "var_name": "EMPTY"}, {"original_string": "private char[] buffer;", "modifier": "private", "type": "char[]", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private int length;", "modifier": "private", "type": "int", "declarator": "length", "var_name": "length"}, {"original_string": "private int start;", "modifier": "private", "type": "int", "declarator": "start", "var_name": "start"}, {"original_string": "private int hash;", "modifier": "private", "type": "int", "declarator": "hash", "var_name": "hash"}], "methods": [{"identifier": "MutableCharArray", "parameters": "()", "modifiers": "public", "return": "", "signature": " MutableCharArray()", "full_signature": "public  MutableCharArray()", "class_method_signature": "MutableCharArray.MutableCharArray()", "testcase": false, "constructor": true}, {"identifier": "MutableCharArray", "parameters": "(CharSequence seq)", "modifiers": "public", "return": "", "signature": " MutableCharArray(CharSequence seq)", "full_signature": "public  MutableCharArray(CharSequence seq)", "class_method_signature": "MutableCharArray.MutableCharArray(CharSequence seq)", "testcase": false, "constructor": true}, {"identifier": "MutableCharArray", "parameters": "(char[] buffer)", "modifiers": "public", "return": "", "signature": " MutableCharArray(char[] buffer)", "full_signature": "public  MutableCharArray(char[] buffer)", "class_method_signature": "MutableCharArray.MutableCharArray(char[] buffer)", "testcase": false, "constructor": true}, {"identifier": "MutableCharArray", "parameters": "(char[] buffer, int start, int length)", "modifiers": "public", "return": "", "signature": " MutableCharArray(char[] buffer, int start, int length)", "full_signature": "public  MutableCharArray(char[] buffer, int start, int length)", "class_method_signature": "MutableCharArray.MutableCharArray(char[] buffer, int start, int length)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "(CharSequence seq)", "modifiers": "public", "return": "void", "signature": "void reset(CharSequence seq)", "full_signature": "public void reset(CharSequence seq)", "class_method_signature": "MutableCharArray.reset(CharSequence seq)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(char[] buffer)", "modifiers": "public", "return": "void", "signature": "void reset(char[] buffer)", "full_signature": "public void reset(char[] buffer)", "class_method_signature": "MutableCharArray.reset(char[] buffer)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(char[] buffer, int start, int length)", "modifiers": "public", "return": "void", "signature": "void reset(char[] buffer, int start, int length)", "full_signature": "public void reset(char[] buffer, int start, int length)", "class_method_signature": "MutableCharArray.reset(char[] buffer, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "getBuffer", "parameters": "()", "modifiers": "public", "return": "char[]", "signature": "char[] getBuffer()", "full_signature": "public char[] getBuffer()", "class_method_signature": "MutableCharArray.getBuffer()", "testcase": false, "constructor": false}, {"identifier": "getStart", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStart()", "full_signature": "public int getStart()", "class_method_signature": "MutableCharArray.getStart()", "testcase": false, "constructor": false}, {"identifier": "charAt", "parameters": "(final int index)", "modifiers": "public final", "return": "char", "signature": "char charAt(final int index)", "full_signature": "public final char charAt(final int index)", "class_method_signature": "MutableCharArray.charAt(final int index)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int length()", "full_signature": "public int length()", "class_method_signature": "MutableCharArray.length()", "testcase": false, "constructor": false}, {"identifier": "subSequence", "parameters": "(int start, int end)", "modifiers": "public", "return": "MutableCharArray", "signature": "MutableCharArray subSequence(int start, int end)", "full_signature": "public MutableCharArray subSequence(int start, int end)", "class_method_signature": "MutableCharArray.subSequence(int start, int end)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MutableCharArray.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MutableCharArray.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "MutableCharArray.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "(final char[] buffer, int start, int length)", "modifiers": "public static final", "return": "int", "signature": "int hashCode(final char[] buffer, int start, int length)", "full_signature": "public static final int hashCode(final char[] buffer, int start, int length)", "class_method_signature": "MutableCharArray.hashCode(final char[] buffer, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "MutableCharArray", "signature": "MutableCharArray clone()", "full_signature": "public MutableCharArray clone()", "class_method_signature": "MutableCharArray.clone()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "public", "return": "char[]", "signature": "char[] toArray()", "full_signature": "public char[] toArray()", "class_method_signature": "MutableCharArray.toArray()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/carrot2/util/MutableCharArray.java"}, "focal_method": {"identifier": "reset", "parameters": "(CharSequence seq)", "modifiers": "public", "return": "void", "body": "public void reset(CharSequence seq) {\n    if (buffer == null || buffer.length < seq.length()) {\n      buffer = new char[seq.length()];\n    }\n    this.length = seq.length();\n    this.start = 0;\n\n    for (int i = 0; i < length; i++) {\n      buffer[i] = seq.charAt(i);\n    }\n\n    this.hash = hashCode(buffer, start, length);\n  }", "signature": "void reset(CharSequence seq)", "full_signature": "public void reset(CharSequence seq)", "class_method_signature": "MutableCharArray.reset(CharSequence seq)", "testcase": false, "constructor": false, "invocations": ["length", "length", "length", "charAt", "hashCode"]}, "repository": {"repo_id": 2424377, "url": "https://github.com/carrot2/carrot2", "stars": 393, "created": "9/20/2011 6:19:05 PM +00:00", "updates": "2020-01-24T20:43:38+00:00", "fork": "False", "license": "licensed"}}