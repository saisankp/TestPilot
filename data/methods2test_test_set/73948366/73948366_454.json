{"test_class": {"identifier": "InstanceAWSProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/instance_provider/src/test/java/com/yahoo/athenz/instance/provider/impl/InstanceAWSProviderTest.java"}, "test_case": {"identifier": "testConfirmInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConfirmInstance() {\n        \n        System.setProperty(InstanceAWSProvider.AWS_PROP_DNS_SUFFIX, \"athenz.cloud\");\n        MockInstanceAWSProvider provider = new MockInstanceAWSProvider();\n        System.setProperty(InstanceAWSProvider.AWS_PROP_PUBLIC_CERT, \"src/test/resources/aws_public.cert\");\n        \n        provider.initialize(\"provider\", \"com.yahoo.athenz.instance.provider.impl.InstanceAWSProvider\", null, null);\n        \n        String bootTime = Timestamp.fromMillis(System.currentTimeMillis() - 100).toString();\n        InstanceConfirmation confirmation = new InstanceConfirmation()\n                .setAttestationData(\"{\\\"document\\\": \\\"{\\\\\\\"accountId\\\\\\\": \\\\\\\"1234\\\\\\\",\\\\\\\"pendingTime\\\\\\\": \\\\\\\"\"\n                        + bootTime + \"\\\\\\\",\\\\\\\"region\\\\\\\": \\\\\\\"us-west-2\\\\\\\",\\\\\\\"instanceId\\\\\\\": \\\\\\\"i-1234\\\\\\\",\"\n                        + \"\\\\\\\"privateIp\\\\\\\": \\\\\\\"10.10.10.11\\\\\\\"}\\\",\"\n                        + \"\\\"signature\\\": \\\"signature\\\",\\\"role\\\": \\\"athenz.service\\\"}\")\n                .setDomain(\"athenz\").setProvider(\"athenz.aws.us-west-2\").setService(\"service\");\n        HashMap<String, String> attributes = new HashMap<>();\n        attributes.put(\"cloudAccount\", \"1234\");\n        attributes.put(\"sanDNS\", \"service.athenz.athenz.cloud,i-1234.instanceid.athenz.athenz.cloud\");\n        confirmation.setAttributes(attributes);\n        \n        InstanceConfirmation result = provider.confirmInstance(confirmation);\n        assertEquals(result.getDomain(), \"athenz\");\n        Map<String, String> attrs = result.getAttributes();\n        assertNotNull(attrs);\n        assertEquals(attrs.get(\"certSSH\"), \"true\");\n        assertEquals(attrs.get(\"instancePrivateIp\"), \"10.10.10.11\");\n        assertNull(attrs.get(\"certExpiryTime\"));\n        System.clearProperty(InstanceAWSProvider.AWS_PROP_DNS_SUFFIX);\n    }", "signature": "void testConfirmInstance()", "full_signature": "@Test public void testConfirmInstance()", "class_method_signature": "InstanceAWSProviderTest.testConfirmInstance()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "initialize", "toString", "fromMillis", "currentTimeMillis", "setService", "setProvider", "setDomain", "setAttestationData", "put", "put", "setAttributes", "confirmInstance", "assertEquals", "getDomain", "getAttributes", "assertNotNull", "assertEquals", "get", "assertEquals", "get", "assertNull", "get", "clearProperty"]}, "focal_class": {"identifier": "InstanceAWSProvider", "superclass": "", "interfaces": "implements InstanceProvider", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(InstanceAWSProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(InstanceAWSProvider.class)", "var_name": "LOGGER"}, {"original_string": "static final String ATTR_ACCOUNT_ID   = \"accountId\";", "modifier": "static final", "type": "String", "declarator": "ATTR_ACCOUNT_ID   = \"accountId\"", "var_name": "ATTR_ACCOUNT_ID"}, {"original_string": "static final String ATTR_REGION       = \"region\";", "modifier": "static final", "type": "String", "declarator": "ATTR_REGION       = \"region\"", "var_name": "ATTR_REGION"}, {"original_string": "static final String ATTR_PENDING_TIME = \"pendingTime\";", "modifier": "static final", "type": "String", "declarator": "ATTR_PENDING_TIME = \"pendingTime\"", "var_name": "ATTR_PENDING_TIME"}, {"original_string": "static final String ATTR_INSTANCE_ID  = \"instanceId\";", "modifier": "static final", "type": "String", "declarator": "ATTR_INSTANCE_ID  = \"instanceId\"", "var_name": "ATTR_INSTANCE_ID"}, {"original_string": "static final String ATTR_PRIVATE_IP   = \"privateIp\";", "modifier": "static final", "type": "String", "declarator": "ATTR_PRIVATE_IP   = \"privateIp\"", "var_name": "ATTR_PRIVATE_IP"}, {"original_string": "static final String ZTS_INSTANCE_AWS_ACCOUNT  = \"cloudAccount\";", "modifier": "static final", "type": "String", "declarator": "ZTS_INSTANCE_AWS_ACCOUNT  = \"cloudAccount\"", "var_name": "ZTS_INSTANCE_AWS_ACCOUNT"}, {"original_string": "static final String AWS_PROP_PUBLIC_CERT      = \"athenz.zts.aws_public_cert\";", "modifier": "static final", "type": "String", "declarator": "AWS_PROP_PUBLIC_CERT      = \"athenz.zts.aws_public_cert\"", "var_name": "AWS_PROP_PUBLIC_CERT"}, {"original_string": "static final String AWS_PROP_BOOT_TIME_OFFSET = \"athenz.zts.aws_boot_time_offset\";", "modifier": "static final", "type": "String", "declarator": "AWS_PROP_BOOT_TIME_OFFSET = \"athenz.zts.aws_boot_time_offset\"", "var_name": "AWS_PROP_BOOT_TIME_OFFSET"}, {"original_string": "static final String AWS_PROP_DNS_SUFFIX       = \"athenz.zts.aws_dns_suffix\";", "modifier": "static final", "type": "String", "declarator": "AWS_PROP_DNS_SUFFIX       = \"athenz.zts.aws_dns_suffix\"", "var_name": "AWS_PROP_DNS_SUFFIX"}, {"original_string": "static final String AWS_PROP_REGION_NAME      = \"athenz.zts.aws_region_name\";", "modifier": "static final", "type": "String", "declarator": "AWS_PROP_REGION_NAME      = \"athenz.zts.aws_region_name\"", "var_name": "AWS_PROP_REGION_NAME"}, {"original_string": "static final String AWS_PROP_CERT_VALIDITY_STS_ONLY = \"athenz.zts.aws_cert_validity_sts_only\";", "modifier": "static final", "type": "String", "declarator": "AWS_PROP_CERT_VALIDITY_STS_ONLY = \"athenz.zts.aws_cert_validity_sts_only\"", "var_name": "AWS_PROP_CERT_VALIDITY_STS_ONLY"}, {"original_string": "PublicKey awsPublicKey = null;", "modifier": "", "type": "PublicKey", "declarator": "awsPublicKey = null", "var_name": "awsPublicKey"}, {"original_string": "long bootTimeOffset;", "modifier": "", "type": "long", "declarator": "bootTimeOffset", "var_name": "bootTimeOffset"}, {"original_string": "long certValidityTime;", "modifier": "", "type": "long", "declarator": "certValidityTime", "var_name": "certValidityTime"}, {"original_string": "boolean supportRefresh = false;", "modifier": "", "type": "boolean", "declarator": "supportRefresh = false", "var_name": "supportRefresh"}, {"original_string": "String awsRegion;", "modifier": "", "type": "String", "declarator": "awsRegion", "var_name": "awsRegion"}, {"original_string": "String dnsSuffix = null;", "modifier": "", "type": "String", "declarator": "dnsSuffix = null", "var_name": "dnsSuffix"}], "methods": [{"identifier": "getProviderScheme", "parameters": "()", "modifiers": "@Override public", "return": "Scheme", "signature": "Scheme getProviderScheme()", "full_signature": "@Override public Scheme getProviderScheme()", "class_method_signature": "InstanceAWSProvider.getProviderScheme()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore)", "full_signature": "@Override public void initialize(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore)", "class_method_signature": "InstanceAWSProvider.initialize(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String message)", "modifiers": "public", "return": "ResourceException", "signature": "ResourceException error(String message)", "full_signature": "public ResourceException error(String message)", "class_method_signature": "InstanceAWSProvider.error(String message)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(int errorCode, String message)", "modifiers": "public", "return": "ResourceException", "signature": "ResourceException error(int errorCode, String message)", "full_signature": "public ResourceException error(int errorCode, String message)", "class_method_signature": "InstanceAWSProvider.error(int errorCode, String message)", "testcase": false, "constructor": false}, {"identifier": "validateAWSAccount", "parameters": "(final String awsAccount, final String docAccount, StringBuilder errMsg)", "modifiers": "", "return": "boolean", "signature": "boolean validateAWSAccount(final String awsAccount, final String docAccount, StringBuilder errMsg)", "full_signature": " boolean validateAWSAccount(final String awsAccount, final String docAccount, StringBuilder errMsg)", "class_method_signature": "InstanceAWSProvider.validateAWSAccount(final String awsAccount, final String docAccount, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "validateAWSProvider", "parameters": "(final String provider, final String region, StringBuilder errMsg)", "modifiers": "", "return": "boolean", "signature": "boolean validateAWSProvider(final String provider, final String region, StringBuilder errMsg)", "full_signature": " boolean validateAWSProvider(final String provider, final String region, StringBuilder errMsg)", "class_method_signature": "InstanceAWSProvider.validateAWSProvider(final String provider, final String region, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "validateAWSInstanceId", "parameters": "(final String reqInstanceId, final String docInstanceId,\n            StringBuilder errMsg)", "modifiers": "", "return": "boolean", "signature": "boolean validateAWSInstanceId(final String reqInstanceId, final String docInstanceId,\n            StringBuilder errMsg)", "full_signature": " boolean validateAWSInstanceId(final String reqInstanceId, final String docInstanceId,\n            StringBuilder errMsg)", "class_method_signature": "InstanceAWSProvider.validateAWSInstanceId(final String reqInstanceId, final String docInstanceId,\n            StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "validateAWSSignature", "parameters": "(final String document, final String signature, StringBuilder errMsg)", "modifiers": "", "return": "boolean", "signature": "boolean validateAWSSignature(final String document, final String signature, StringBuilder errMsg)", "full_signature": " boolean validateAWSSignature(final String document, final String signature, StringBuilder errMsg)", "class_method_signature": "InstanceAWSProvider.validateAWSSignature(final String document, final String signature, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "validateAWSDocument", "parameters": "(final String provider, AWSAttestationData info,\n            final String awsAccount, final String instanceId, boolean checkTime,\n            StringBuilder privateIp, StringBuilder errMsg)", "modifiers": "", "return": "boolean", "signature": "boolean validateAWSDocument(final String provider, AWSAttestationData info,\n            final String awsAccount, final String instanceId, boolean checkTime,\n            StringBuilder privateIp, StringBuilder errMsg)", "full_signature": " boolean validateAWSDocument(final String provider, AWSAttestationData info,\n            final String awsAccount, final String instanceId, boolean checkTime,\n            StringBuilder privateIp, StringBuilder errMsg)", "class_method_signature": "InstanceAWSProvider.validateAWSDocument(final String provider, AWSAttestationData info,\n            final String awsAccount, final String instanceId, boolean checkTime,\n            StringBuilder privateIp, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "getInstanceId", "parameters": "(AWSAttestationData info, Struct instanceDocument)", "modifiers": "", "return": "String", "signature": "String getInstanceId(AWSAttestationData info, Struct instanceDocument)", "full_signature": " String getInstanceId(AWSAttestationData info, Struct instanceDocument)", "class_method_signature": "InstanceAWSProvider.getInstanceId(AWSAttestationData info, Struct instanceDocument)", "testcase": false, "constructor": false}, {"identifier": "validateInstanceBootTime", "parameters": "(Struct instanceDocument, StringBuilder errMsg)", "modifiers": "private", "return": "boolean", "signature": "boolean validateInstanceBootTime(Struct instanceDocument, StringBuilder errMsg)", "full_signature": "private boolean validateInstanceBootTime(Struct instanceDocument, StringBuilder errMsg)", "class_method_signature": "InstanceAWSProvider.validateInstanceBootTime(Struct instanceDocument, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "confirmInstance", "parameters": "(InstanceConfirmation confirmation)", "modifiers": "@Override public", "return": "InstanceConfirmation", "signature": "InstanceConfirmation confirmInstance(InstanceConfirmation confirmation)", "full_signature": "@Override public InstanceConfirmation confirmInstance(InstanceConfirmation confirmation)", "class_method_signature": "InstanceAWSProvider.confirmInstance(InstanceConfirmation confirmation)", "testcase": false, "constructor": false}, {"identifier": "refreshInstance", "parameters": "(InstanceConfirmation confirmation)", "modifiers": "@Override public", "return": "InstanceConfirmation", "signature": "InstanceConfirmation refreshInstance(InstanceConfirmation confirmation)", "full_signature": "@Override public InstanceConfirmation refreshInstance(InstanceConfirmation confirmation)", "class_method_signature": "InstanceAWSProvider.refreshInstance(InstanceConfirmation confirmation)", "testcase": false, "constructor": false}, {"identifier": "setConfirmationAttributes", "parameters": "(InstanceConfirmation confirmation, boolean instanceDocumentCreds,\n                                   final String privateIp)", "modifiers": "", "return": "void", "signature": "void setConfirmationAttributes(InstanceConfirmation confirmation, boolean instanceDocumentCreds,\n                                   final String privateIp)", "full_signature": " void setConfirmationAttributes(InstanceConfirmation confirmation, boolean instanceDocumentCreds,\n                                   final String privateIp)", "class_method_signature": "InstanceAWSProvider.setConfirmationAttributes(InstanceConfirmation confirmation, boolean instanceDocumentCreds,\n                                   final String privateIp)", "testcase": false, "constructor": false}, {"identifier": "getInstanceClient", "parameters": "(AWSAttestationData info)", "modifiers": "", "return": "AWSSecurityTokenService", "signature": "AWSSecurityTokenService getInstanceClient(AWSAttestationData info)", "full_signature": " AWSSecurityTokenService getInstanceClient(AWSAttestationData info)", "class_method_signature": "InstanceAWSProvider.getInstanceClient(AWSAttestationData info)", "testcase": false, "constructor": false}, {"identifier": "verifyInstanceIdentity", "parameters": "(AWSAttestationData info, final String awsAccount)", "modifiers": "", "return": "boolean", "signature": "boolean verifyInstanceIdentity(AWSAttestationData info, final String awsAccount)", "full_signature": " boolean verifyInstanceIdentity(AWSAttestationData info, final String awsAccount)", "class_method_signature": "InstanceAWSProvider.verifyInstanceIdentity(AWSAttestationData info, final String awsAccount)", "testcase": false, "constructor": false}], "file": "libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/impl/InstanceAWSProvider.java"}, "focal_method": {"identifier": "confirmInstance", "parameters": "(InstanceConfirmation confirmation)", "modifiers": "@Override public", "return": "InstanceConfirmation", "body": "@Override\n    public InstanceConfirmation confirmInstance(InstanceConfirmation confirmation) {\n        \n        AWSAttestationData info = JSON.fromString(confirmation.getAttestationData(),\n                AWSAttestationData.class);\n        \n        final Map<String, String> instanceAttributes = confirmation.getAttributes();\n        final String instanceDomain = confirmation.getDomain();\n        final String instanceService = confirmation.getService();\n        \n        // before doing anything else we want to make sure our\n        // object has an associated aws account id\n        \n        final String awsAccount = InstanceUtils.getInstanceProperty(instanceAttributes, ZTS_INSTANCE_AWS_ACCOUNT);\n        if (awsAccount == null) {\n            throw error(\"Unable to extract AWS Account id\");\n        }\n        \n        // validate that the domain/service given in the confirmation\n        // request match the attestation data\n        \n        final String serviceName = instanceDomain + \".\" + instanceService;\n        if (!serviceName.equals(info.getRole())) {\n            throw error(\"Service name mismatch: \" + info.getRole() + \" vs. \" + serviceName);\n        }\n        \n        // validate the certificate host names\n        \n        StringBuilder instanceId = new StringBuilder(256);\n        if (!InstanceUtils.validateCertRequestSanDnsNames(instanceAttributes, instanceDomain,\n                instanceService, dnsSuffix, instanceId)) {\n            throw error(\"Unable to validate certificate request hostnames\");\n        }\n        \n        // validate our document against given signature if one is provided\n        // if there is no instance document then we're going to ask ZTS not\n        // to issue SSH host certificates and request a certificate for\n        // a default of 7 days only\n\n        boolean instanceDocumentCreds = info.getDocument() != null;\n        StringBuilder privateIp = new StringBuilder(64);\n        if (instanceDocumentCreds) {\n            StringBuilder errMsg = new StringBuilder(256);\n            if (!validateAWSDocument(confirmation.getProvider(), info, awsAccount,\n                    instanceId.toString(), true, privateIp, errMsg)) {\n                LOGGER.error(\"validateAWSDocument: {}\", errMsg.toString());\n                throw error(\"Unable to validate AWS document: \" + errMsg.toString());\n            }\n        }\n            \n        // set the attributes to be returned to the ZTS server\n\n        setConfirmationAttributes(confirmation, instanceDocumentCreds, privateIp.toString());\n\n        // verify that the temporary credentials specified in the request\n        // can be used to assume the given role thus verifying the\n        // instance identity\n        \n        if (!verifyInstanceIdentity(info, awsAccount)) {\n            throw error(\"Unable to verify instance identity credentials\");\n        }\n        \n        return confirmation;\n    }", "signature": "InstanceConfirmation confirmInstance(InstanceConfirmation confirmation)", "full_signature": "@Override public InstanceConfirmation confirmInstance(InstanceConfirmation confirmation)", "class_method_signature": "InstanceAWSProvider.confirmInstance(InstanceConfirmation confirmation)", "testcase": false, "constructor": false, "invocations": ["fromString", "getAttestationData", "getAttributes", "getDomain", "getService", "getInstanceProperty", "error", "equals", "getRole", "error", "getRole", "validateCertRequestSanDnsNames", "error", "getDocument", "validateAWSDocument", "getProvider", "toString", "error", "toString", "error", "toString", "setConfirmationAttributes", "toString", "verifyInstanceIdentity", "error"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}