{"test_class": {"identifier": "ComponentUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String componentId;", "modifier": "private", "type": "String", "declarator": "componentId", "var_name": "componentId"}, {"original_string": "private Component component;", "modifier": "private", "type": "Component", "declarator": "component", "var_name": "component"}], "file": "rice-framework/krad-web-framework/src/test/java/org/kuali/rice/krad/uif/util/ComponentUtilsTest.java"}, "test_case": {"identifier": "testCopyUsingCloningWithDataFieldSucceeds", "parameters": "()", "modifiers": "@Test /** * test {@link ComponentUtils#copyUsingCloning} using a DataField object */ public", "return": "void", "body": "@Test\n    /**\n     * test {@link ComponentUtils#copyUsingCloning} using a DataField object\n     */\n    public void testCopyUsingCloningWithDataFieldSucceeds() {\n        DataField dataFieldOriginal = initializeDataField();\n\n        DataField dataFieldCopy = CopyUtils.copy(dataFieldOriginal);\n        assertTrue(ComponentCopyPropertiesMatch(dataFieldOriginal, dataFieldCopy));\n    }", "signature": "void testCopyUsingCloningWithDataFieldSucceeds()", "full_signature": "@Test /** * test {@link ComponentUtils#copyUsingCloning} using a DataField object */ public void testCopyUsingCloningWithDataFieldSucceeds()", "class_method_signature": "ComponentUtilsTest.testCopyUsingCloningWithDataFieldSucceeds()", "testcase": true, "constructor": false, "invocations": ["initializeDataField", "copy", "assertTrue", "ComponentCopyPropertiesMatch"]}, "focal_class": {"identifier": "ComponentUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(ComponentUtils.class);", "modifier": "private static final", "type": "org.apache.log4j.Logger", "declarator": "LOG = org.apache.log4j.Logger.getLogger(ComponentUtils.class)", "var_name": "LOG"}], "methods": [{"identifier": "ComponentUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ComponentUtils()", "full_signature": "private  ComponentUtils()", "class_method_signature": "ComponentUtils.ComponentUtils()", "testcase": false, "constructor": true}, {"identifier": "copy", "parameters": "(T component)", "modifiers": "public static", "return": "T", "signature": "T copy(T component)", "full_signature": "public static T copy(T component)", "class_method_signature": "ComponentUtils.copy(T component)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(T component, String idSuffix)", "modifiers": "public static", "return": "T", "signature": "T copy(T component, String idSuffix)", "full_signature": "public static T copy(T component, String idSuffix)", "class_method_signature": "ComponentUtils.copy(T component, String idSuffix)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(List<T> components)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> copy(List<T> components)", "full_signature": "public static List<T> copy(List<T> components)", "class_method_signature": "ComponentUtils.copy(List<T> components)", "testcase": false, "constructor": false}, {"identifier": "bindAndIdFieldList", "parameters": "(List<T> fields, String addBindingPrefix, String idSuffix)", "modifiers": "public static", "return": "void", "signature": "void bindAndIdFieldList(List<T> fields, String addBindingPrefix, String idSuffix)", "full_signature": "public static void bindAndIdFieldList(List<T> fields, String addBindingPrefix, String idSuffix)", "class_method_signature": "ComponentUtils.bindAndIdFieldList(List<T> fields, String addBindingPrefix, String idSuffix)", "testcase": false, "constructor": false}, {"identifier": "copyComponent", "parameters": "(T component, String addBindingPrefix, String idSuffix)", "modifiers": "public static", "return": "T", "signature": "T copyComponent(T component, String addBindingPrefix, String idSuffix)", "full_signature": "public static T copyComponent(T component, String addBindingPrefix, String idSuffix)", "class_method_signature": "ComponentUtils.copyComponent(T component, String addBindingPrefix, String idSuffix)", "testcase": false, "constructor": false}, {"identifier": "copyComponentList", "parameters": "(List<T> components, String idSuffix)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> copyComponentList(List<T> components, String idSuffix)", "full_signature": "public static List<T> copyComponentList(List<T> components, String idSuffix)", "class_method_signature": "ComponentUtils.copyComponentList(List<T> components, String idSuffix)", "testcase": false, "constructor": false}, {"identifier": "getComponentsOfType", "parameters": "(List<? extends Component> items,\n            Class<T> componentType)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> getComponentsOfType(List<? extends Component> items,\n            Class<T> componentType)", "full_signature": "public static List<T> getComponentsOfType(List<? extends Component> items,\n            Class<T> componentType)", "class_method_signature": "ComponentUtils.getComponentsOfType(List<? extends Component> items,\n            Class<T> componentType)", "testcase": false, "constructor": false}, {"identifier": "getNestedContainerComponents", "parameters": "(Container container,\n            Class<T> componentType)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> getNestedContainerComponents(Container container,\n            Class<T> componentType)", "full_signature": "public static List<T> getNestedContainerComponents(Container container,\n            Class<T> componentType)", "class_method_signature": "ComponentUtils.getNestedContainerComponents(Container container,\n            Class<T> componentType)", "testcase": false, "constructor": false}, {"identifier": "getNestedNonCollectionComponents", "parameters": "(List<Component> items,\n            Class<T> componentType)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> getNestedNonCollectionComponents(List<Component> items,\n            Class<T> componentType)", "full_signature": "public static List<T> getNestedNonCollectionComponents(List<Component> items,\n            Class<T> componentType)", "class_method_signature": "ComponentUtils.getNestedNonCollectionComponents(List<Component> items,\n            Class<T> componentType)", "testcase": false, "constructor": false}, {"identifier": "getNestedNonCollectionComponents", "parameters": "(Container container,\n            Class<T> componentType)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> getNestedNonCollectionComponents(Container container,\n            Class<T> componentType)", "full_signature": "public static List<T> getNestedNonCollectionComponents(Container container,\n            Class<T> componentType)", "class_method_signature": "ComponentUtils.getNestedNonCollectionComponents(Container container,\n            Class<T> componentType)", "testcase": false, "constructor": false}, {"identifier": "getAllNestedComponents", "parameters": "(Component component)", "modifiers": "public static", "return": "List<Component>", "signature": "List<Component> getAllNestedComponents(Component component)", "full_signature": "public static List<Component> getAllNestedComponents(Component component)", "class_method_signature": "ComponentUtils.getAllNestedComponents(Component component)", "testcase": false, "constructor": false}, {"identifier": "findComponentInList", "parameters": "(List<Component> components, String componentId)", "modifiers": "public static", "return": "Component", "signature": "Component findComponentInList(List<Component> components, String componentId)", "full_signature": "public static Component findComponentInList(List<Component> components, String componentId)", "class_method_signature": "ComponentUtils.findComponentInList(List<Component> components, String componentId)", "testcase": false, "constructor": false}, {"identifier": "prefixBindingPath", "parameters": "(List<? extends Component> components, String addBindingPrefix)", "modifiers": "public static", "return": "void", "signature": "void prefixBindingPath(List<? extends Component> components, String addBindingPrefix)", "full_signature": "public static void prefixBindingPath(List<? extends Component> components, String addBindingPrefix)", "class_method_signature": "ComponentUtils.prefixBindingPath(List<? extends Component> components, String addBindingPrefix)", "testcase": false, "constructor": false}, {"identifier": "prefixBindingPath", "parameters": "(Component component, String addBindingPrefix)", "modifiers": "public static", "return": "void", "signature": "void prefixBindingPath(Component component, String addBindingPrefix)", "full_signature": "public static void prefixBindingPath(Component component, String addBindingPrefix)", "class_method_signature": "ComponentUtils.prefixBindingPath(Component component, String addBindingPrefix)", "testcase": false, "constructor": false}, {"identifier": "prefixBindingPath", "parameters": "(DataBinding field, String addBindingPrefix)", "modifiers": "public static", "return": "void", "signature": "void prefixBindingPath(DataBinding field, String addBindingPrefix)", "full_signature": "public static void prefixBindingPath(DataBinding field, String addBindingPrefix)", "class_method_signature": "ComponentUtils.prefixBindingPath(DataBinding field, String addBindingPrefix)", "testcase": false, "constructor": false}, {"identifier": "prefixBindingPathNested", "parameters": "(Component component, String addBindingPrefix)", "modifiers": "public static", "return": "void", "signature": "void prefixBindingPathNested(Component component, String addBindingPrefix)", "full_signature": "public static void prefixBindingPathNested(Component component, String addBindingPrefix)", "class_method_signature": "ComponentUtils.prefixBindingPathNested(Component component, String addBindingPrefix)", "testcase": false, "constructor": false}, {"identifier": "updateIdsWithSuffixNested", "parameters": "(List<? extends Component> components, String idSuffix)", "modifiers": "public static", "return": "void", "signature": "void updateIdsWithSuffixNested(List<? extends Component> components, String idSuffix)", "full_signature": "public static void updateIdsWithSuffixNested(List<? extends Component> components, String idSuffix)", "class_method_signature": "ComponentUtils.updateIdsWithSuffixNested(List<? extends Component> components, String idSuffix)", "testcase": false, "constructor": false}, {"identifier": "updateIdsWithSuffixNested", "parameters": "(Component component, String idSuffix)", "modifiers": "public static", "return": "void", "signature": "void updateIdsWithSuffixNested(Component component, String idSuffix)", "full_signature": "public static void updateIdsWithSuffixNested(Component component, String idSuffix)", "class_method_signature": "ComponentUtils.updateIdsWithSuffixNested(Component component, String idSuffix)", "testcase": false, "constructor": false}, {"identifier": "updateIdWithSuffix", "parameters": "(LifecycleElement element, String idSuffix)", "modifiers": "public static", "return": "void", "signature": "void updateIdWithSuffix(LifecycleElement element, String idSuffix)", "full_signature": "public static void updateIdWithSuffix(LifecycleElement element, String idSuffix)", "class_method_signature": "ComponentUtils.updateIdWithSuffix(LifecycleElement element, String idSuffix)", "testcase": false, "constructor": false}, {"identifier": "updateChildIdsWithSuffixNested", "parameters": "(Component component, String idSuffix)", "modifiers": "public static", "return": "void", "signature": "void updateChildIdsWithSuffixNested(Component component, String idSuffix)", "full_signature": "public static void updateChildIdsWithSuffixNested(Component component, String idSuffix)", "class_method_signature": "ComponentUtils.updateChildIdsWithSuffixNested(Component component, String idSuffix)", "testcase": false, "constructor": false}, {"identifier": "generateId", "parameters": "(LifecycleElement element, int seed)", "modifiers": "public static", "return": "int", "signature": "int generateId(LifecycleElement element, int seed)", "full_signature": "public static int generateId(LifecycleElement element, int seed)", "class_method_signature": "ComponentUtils.generateId(LifecycleElement element, int seed)", "testcase": false, "constructor": false}, {"identifier": "clearAndAssignIds", "parameters": "(List<? extends Component> components)", "modifiers": "public static", "return": "void", "signature": "void clearAndAssignIds(List<? extends Component> components)", "full_signature": "public static void clearAndAssignIds(List<? extends Component> components)", "class_method_signature": "ComponentUtils.clearAndAssignIds(List<? extends Component> components)", "testcase": false, "constructor": false}, {"identifier": "setComponentsPropertyDeep", "parameters": "(List<T> components, String propertyPath,\n            Object propertyValue)", "modifiers": "public static", "return": "void", "signature": "void setComponentsPropertyDeep(List<T> components, String propertyPath,\n            Object propertyValue)", "full_signature": "public static void setComponentsPropertyDeep(List<T> components, String propertyPath,\n            Object propertyValue)", "class_method_signature": "ComponentUtils.setComponentsPropertyDeep(List<T> components, String propertyPath,\n            Object propertyValue)", "testcase": false, "constructor": false}, {"identifier": "setComponentPropertyDeep", "parameters": "(Component component, String propertyPath, Object propertyValue)", "modifiers": "public static", "return": "void", "signature": "void setComponentPropertyDeep(Component component, String propertyPath, Object propertyValue)", "full_signature": "public static void setComponentPropertyDeep(Component component, String propertyPath, Object propertyValue)", "class_method_signature": "ComponentUtils.setComponentPropertyDeep(Component component, String propertyPath, Object propertyValue)", "testcase": false, "constructor": false}, {"identifier": "setComponentPropertyFinal", "parameters": "(Component component, String propertyName, Object propertyValue)", "modifiers": "public static", "return": "void", "signature": "void setComponentPropertyFinal(Component component, String propertyName, Object propertyValue)", "full_signature": "public static void setComponentPropertyFinal(Component component, String propertyName, Object propertyValue)", "class_method_signature": "ComponentUtils.setComponentPropertyFinal(Component component, String propertyName, Object propertyValue)", "testcase": false, "constructor": false}, {"identifier": "canBeRefreshed", "parameters": "(Component component)", "modifiers": "public static", "return": "boolean", "signature": "boolean canBeRefreshed(Component component)", "full_signature": "public static boolean canBeRefreshed(Component component)", "class_method_signature": "ComponentUtils.canBeRefreshed(Component component)", "testcase": false, "constructor": false}, {"identifier": "pushObjectToContext", "parameters": "(Collection<? extends LifecycleElement> elements, String contextName,\n            Object contextValue)", "modifiers": "public static", "return": "void", "signature": "void pushObjectToContext(Collection<? extends LifecycleElement> elements, String contextName,\n            Object contextValue)", "full_signature": "public static void pushObjectToContext(Collection<? extends LifecycleElement> elements, String contextName,\n            Object contextValue)", "class_method_signature": "ComponentUtils.pushObjectToContext(Collection<? extends LifecycleElement> elements, String contextName,\n            Object contextValue)", "testcase": false, "constructor": false}, {"identifier": "pushObjectToContext", "parameters": "(Component component, String contextName, Object contextValue)", "modifiers": "public static", "return": "void", "signature": "void pushObjectToContext(Component component, String contextName, Object contextValue)", "full_signature": "public static void pushObjectToContext(Component component, String contextName, Object contextValue)", "class_method_signature": "ComponentUtils.pushObjectToContext(Component component, String contextName, Object contextValue)", "testcase": false, "constructor": false}, {"identifier": "pushAllToContext", "parameters": "(List<? extends Component> components, Map<String, Object> sourceContext)", "modifiers": "public static", "return": "void", "signature": "void pushAllToContext(List<? extends Component> components, Map<String, Object> sourceContext)", "full_signature": "public static void pushAllToContext(List<? extends Component> components, Map<String, Object> sourceContext)", "class_method_signature": "ComponentUtils.pushAllToContext(List<? extends Component> components, Map<String, Object> sourceContext)", "testcase": false, "constructor": false}, {"identifier": "pushAllToContext", "parameters": "(Component component, Map<String, Object> sourceContext)", "modifiers": "public static", "return": "void", "signature": "void pushAllToContext(Component component, Map<String, Object> sourceContext)", "full_signature": "public static void pushAllToContext(Component component, Map<String, Object> sourceContext)", "class_method_signature": "ComponentUtils.pushAllToContext(Component component, Map<String, Object> sourceContext)", "testcase": false, "constructor": false}, {"identifier": "updateContextsForLine", "parameters": "(List<? extends Component> components, CollectionGroup collectionGroup,\n            Object collectionLine, int lineIndex, String lineSuffix)", "modifiers": "public static", "return": "void", "signature": "void updateContextsForLine(List<? extends Component> components, CollectionGroup collectionGroup,\n            Object collectionLine, int lineIndex, String lineSuffix)", "full_signature": "public static void updateContextsForLine(List<? extends Component> components, CollectionGroup collectionGroup,\n            Object collectionLine, int lineIndex, String lineSuffix)", "class_method_signature": "ComponentUtils.updateContextsForLine(List<? extends Component> components, CollectionGroup collectionGroup,\n            Object collectionLine, int lineIndex, String lineSuffix)", "testcase": false, "constructor": false}, {"identifier": "updateContextForLine", "parameters": "(Component component, CollectionGroup collectionGroup, Object collectionLine,\n            int lineIndex, String lineSuffix)", "modifiers": "public static", "return": "void", "signature": "void updateContextForLine(Component component, CollectionGroup collectionGroup, Object collectionLine,\n            int lineIndex, String lineSuffix)", "full_signature": "public static void updateContextForLine(Component component, CollectionGroup collectionGroup, Object collectionLine,\n            int lineIndex, String lineSuffix)", "class_method_signature": "ComponentUtils.updateContextForLine(Component component, CollectionGroup collectionGroup, Object collectionLine,\n            int lineIndex, String lineSuffix)", "testcase": false, "constructor": false}, {"identifier": "cleanContextDeap", "parameters": "(LifecycleElement lifecycleElement)", "modifiers": "public static", "return": "void", "signature": "void cleanContextDeap(LifecycleElement lifecycleElement)", "full_signature": "public static void cleanContextDeap(LifecycleElement lifecycleElement)", "class_method_signature": "ComponentUtils.cleanContextDeap(LifecycleElement lifecycleElement)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(List<T> items, int defaultOrderSequence)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> sort(List<T> items, int defaultOrderSequence)", "full_signature": "public static List<T> sort(List<T> items, int defaultOrderSequence)", "class_method_signature": "ComponentUtils.sort(List<T> items, int defaultOrderSequence)", "testcase": false, "constructor": false}, {"identifier": "getAllInputFieldsWithinContainer", "parameters": "(Container container)", "modifiers": "public static", "return": "List<InputField>", "signature": "List<InputField> getAllInputFieldsWithinContainer(Container container)", "full_signature": "public static List<InputField> getAllInputFieldsWithinContainer(Container container)", "class_method_signature": "ComponentUtils.getAllInputFieldsWithinContainer(Container container)", "testcase": false, "constructor": false}, {"identifier": "containsPropertyExpression", "parameters": "(Component component, String propertyName,\n            boolean collectionMatch)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsPropertyExpression(Component component, String propertyName,\n            boolean collectionMatch)", "full_signature": "public static boolean containsPropertyExpression(Component component, String propertyName,\n            boolean collectionMatch)", "class_method_signature": "ComponentUtils.containsPropertyExpression(Component component, String propertyName,\n            boolean collectionMatch)", "testcase": false, "constructor": false}, {"identifier": "adjustNestedLevelsForTableCollections", "parameters": "(Container container, int currentLevel)", "modifiers": "public static", "return": "void", "signature": "void adjustNestedLevelsForTableCollections(Container container, int currentLevel)", "full_signature": "public static void adjustNestedLevelsForTableCollections(Container container, int currentLevel)", "class_method_signature": "ComponentUtils.adjustNestedLevelsForTableCollections(Container container, int currentLevel)", "testcase": false, "constructor": false}], "file": "rice-framework/krad-web-framework/src/main/java/org/kuali/rice/krad/uif/util/ComponentUtils.java"}, "focal_method": {"identifier": "copy", "parameters": "(T component)", "modifiers": "public static", "return": "T", "body": "public static <T extends Component> T copy(T component) {\n        return copy(component, null);\n    }", "signature": "T copy(T component)", "full_signature": "public static T copy(T component)", "class_method_signature": "ComponentUtils.copy(T component)", "testcase": false, "constructor": false, "invocations": ["copy"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}