{"test_class": {"identifier": "TestHttpSchemeStrategy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SESSION_ID = \"SESSION_ID\";", "modifier": "private static final", "type": "String", "declarator": "SESSION_ID = \"SESSION_ID\"", "var_name": "SESSION_ID"}, {"original_string": "private static final String BASE_URL = \"http://example.com:8080\";", "modifier": "private static final", "type": "String", "declarator": "BASE_URL = \"http://example.com:8080\"", "var_name": "BASE_URL"}, {"original_string": "private static final long TIMEOUT = 0;", "modifier": "private static final", "type": "long", "declarator": "TIMEOUT = 0", "var_name": "TIMEOUT"}, {"original_string": "@Mock private SessionStorage<HttpClientBuilder> sessionStorage;", "modifier": "@Mock private", "type": "SessionStorage<HttpClientBuilder>", "declarator": "sessionStorage", "var_name": "sessionStorage"}, {"original_string": "@Mock private HttpClientBuilder httpClientBuilder;", "modifier": "@Mock private", "type": "HttpClientBuilder", "declarator": "httpClientBuilder", "var_name": "httpClientBuilder"}, {"original_string": "@Mock private CloseableHttpClient httpClient;", "modifier": "@Mock private", "type": "CloseableHttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "@Captor private ArgumentCaptor<HttpUriRequest> httpRequestCaptor;", "modifier": "@Captor private", "type": "ArgumentCaptor<HttpUriRequest>", "declarator": "httpRequestCaptor", "var_name": "httpRequestCaptor"}, {"original_string": "private final HttpSchemeStrategy strategy = new HttpSchemeStrategy();", "modifier": "private final", "type": "HttpSchemeStrategy", "declarator": "strategy = new HttpSchemeStrategy()", "var_name": "strategy"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/documentserver/schemestrategy/TestHttpSchemeStrategy.java"}, "test_case": {"identifier": "testBadFetch", "parameters": "()", "modifiers": "@Test(expected = BadFetchError.class) public", "return": "void", "body": "@Test(expected = BadFetchError.class)\n    public void testBadFetch() throws Exception, BadFetchError {\n\n        when(httpClient.execute(any())).thenThrow(new IOException(\"Simulated HTTP IOException\"));\n\n        final URI uri = new URI(BASE_URL + \"?session=id\");\n        final Collection<KeyValuePair> parameters = Arrays.asList(\n                new KeyValuePair(\"firstName\", \"Horst\"),\n                new KeyValuePair(\"lastName\", \"Buchholz\")\n        );\n        strategy.getInputStream(SESSION_ID, uri, RequestMethod.GET, TIMEOUT, parameters);\n    }", "signature": "void testBadFetch()", "full_signature": "@Test(expected = BadFetchError.class) public void testBadFetch()", "class_method_signature": "TestHttpSchemeStrategy.testBadFetch()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "execute", "any", "asList", "getInputStream"]}, "focal_class": {"identifier": "HttpSchemeStrategy", "superclass": "", "interfaces": "implements SchemeStrategy", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(HttpSchemeStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(HttpSchemeStrategy.class)", "var_name": "LOGGER"}, {"original_string": "public static final String HTTP_SCHEME_NAME = \"http\";", "modifier": "public static final", "type": "String", "declarator": "HTTP_SCHEME_NAME = \"http\"", "var_name": "HTTP_SCHEME_NAME"}, {"original_string": "protected static SessionStorage<HttpClientBuilder> SESSION_STORAGE;", "modifier": "protected static", "type": "SessionStorage<HttpClientBuilder>", "declarator": "SESSION_STORAGE", "var_name": "SESSION_STORAGE"}, {"original_string": "private String scheme;", "modifier": "private", "type": "String", "declarator": "scheme", "var_name": "scheme"}, {"original_string": "private int defaultFetchTimeout;", "modifier": "private", "type": "int", "declarator": "defaultFetchTimeout", "var_name": "defaultFetchTimeout"}], "methods": [{"identifier": "HttpSchemeStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " HttpSchemeStrategy()", "full_signature": "public  HttpSchemeStrategy()", "class_method_signature": "HttpSchemeStrategy.HttpSchemeStrategy()", "testcase": false, "constructor": true}, {"identifier": "setScheme", "parameters": "(final String value)", "modifiers": "public", "return": "void", "signature": "void setScheme(final String value)", "full_signature": "public void setScheme(final String value)", "class_method_signature": "HttpSchemeStrategy.setScheme(final String value)", "testcase": false, "constructor": false}, {"identifier": "getScheme", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getScheme()", "full_signature": "@Override public String getScheme()", "class_method_signature": "HttpSchemeStrategy.getScheme()", "testcase": false, "constructor": false}, {"identifier": "setFetchTimeout", "parameters": "(final int timeout)", "modifiers": "public", "return": "void", "signature": "void setFetchTimeout(final int timeout)", "full_signature": "public void setFetchTimeout(final int timeout)", "class_method_signature": "HttpSchemeStrategy.setFetchTimeout(final int timeout)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "full_signature": "@Override public InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "class_method_signature": "HttpSchemeStrategy.getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "testcase": false, "constructor": false}, {"identifier": "setTimeout", "parameters": "(final long timeout)", "modifiers": "private", "return": "RequestConfig", "signature": "RequestConfig setTimeout(final long timeout)", "full_signature": "private RequestConfig setTimeout(final long timeout)", "class_method_signature": "HttpSchemeStrategy.setTimeout(final long timeout)", "testcase": false, "constructor": false}, {"identifier": "addParameters", "parameters": "(final Collection<KeyValuePair> parameters,\n            final URI uri)", "modifiers": "private", "return": "URI", "signature": "URI addParameters(final Collection<KeyValuePair> parameters,\n            final URI uri)", "full_signature": "private URI addParameters(final Collection<KeyValuePair> parameters,\n            final URI uri)", "class_method_signature": "HttpSchemeStrategy.addParameters(final Collection<KeyValuePair> parameters,\n            final URI uri)", "testcase": false, "constructor": false}, {"identifier": "attachFiles", "parameters": "(final HttpUriRequest request,\n            final Collection<KeyValuePair> parameters)", "modifiers": "private", "return": "void", "signature": "void attachFiles(final HttpUriRequest request,\n            final Collection<KeyValuePair> parameters)", "full_signature": "private void attachFiles(final HttpUriRequest request,\n            final Collection<KeyValuePair> parameters)", "class_method_signature": "HttpSchemeStrategy.attachFiles(final HttpUriRequest request,\n            final Collection<KeyValuePair> parameters)", "testcase": false, "constructor": false}, {"identifier": "sessionClosed", "parameters": "(final String sessionId)", "modifiers": "@Override public", "return": "void", "signature": "void sessionClosed(final String sessionId)", "full_signature": "@Override public void sessionClosed(final String sessionId)", "class_method_signature": "HttpSchemeStrategy.sessionClosed(final String sessionId)", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/documentserver/schemestrategy/HttpSchemeStrategy.java"}, "focal_method": {"identifier": "getInputStream", "parameters": "(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters) throws BadFetchError {\n        final HttpClientBuilder builder = SESSION_STORAGE\n                .getSessionIdentifier(sessionId);\n        final RequestConfig config = setTimeout(timeout);\n        try (CloseableHttpClient client = builder\n                .setDefaultRequestConfig(config).build()) {\n            final String fragmentLessUriString = StringUtils.substringBeforeLast(uri.toString(), \"#\");\n            final URI fragmentLessUri = new URI(fragmentLessUriString);\n            final URI requestUri = addParameters(parameters, fragmentLessUri);\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"connecting to '\" + requestUri + \"'...\");\n            }\n            final HttpUriRequest request;\n            if (method == RequestMethod.GET) {\n                request = new HttpGet(requestUri);\n            } else {\n                request = new HttpPost(requestUri);\n            }\n            attachFiles(request, parameters);\n            final HttpResponse response = client.execute(request);\n            final StatusLine statusLine = response.getStatusLine();\n            final int status = statusLine.getStatusCode();\n            if (status != HttpStatus.SC_OK) {\n                final String reasonPhrase = statusLine.getReasonPhrase();\n                LOGGER.error(\"error accessing '\" + uri + \"': \" + reasonPhrase\n                        + \" (HTTP error code \" + status + \")\");\n                return null;\n            }\n            final HttpEntity entity = response.getEntity();\n            final InputStream input = entity.getContent();\n            final ReadBuffer buffer = new ReadBuffer();\n            buffer.read(input);\n            return buffer.getInputStream();\n        } catch (IOException | URISyntaxException | ParseException\n                | SemanticError e) {\n            throw new BadFetchError(e.getMessage(), e);\n        }\n    }", "signature": "InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "full_signature": "@Override public InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "class_method_signature": "HttpSchemeStrategy.getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "testcase": false, "constructor": false, "invocations": ["getSessionIdentifier", "setTimeout", "build", "setDefaultRequestConfig", "substringBeforeLast", "toString", "addParameters", "isDebugEnabled", "debug", "attachFiles", "execute", "getStatusLine", "getStatusCode", "getReasonPhrase", "error", "getEntity", "getContent", "read", "getInputStream", "getMessage"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}