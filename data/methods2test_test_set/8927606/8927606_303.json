{"test_class": {"identifier": "WsdlXmlValidatorTest", "superclass": "extends Mockito", "interfaces": "", "fields": [{"original_string": "private static final String SIMPLE                = ValidatorTestBase.BASE_DIR_VALIDATION+\"/Wsdl/SimpleWsdl/simple.wsdl\";", "modifier": "private static final", "type": "String", "declarator": "SIMPLE                = ValidatorTestBase.BASE_DIR_VALIDATION+\"/Wsdl/SimpleWsdl/simple.wsdl\"", "var_name": "SIMPLE"}, {"original_string": "private static final String SIMPLE_WITH_INCLUDE   = ValidatorTestBase.BASE_DIR_VALIDATION+\"/Wsdl/SimpleWsdl/simple_withinclude.wsdl\";", "modifier": "private static final", "type": "String", "declarator": "SIMPLE_WITH_INCLUDE   = ValidatorTestBase.BASE_DIR_VALIDATION+\"/Wsdl/SimpleWsdl/simple_withinclude.wsdl\"", "var_name": "SIMPLE_WITH_INCLUDE"}, {"original_string": "private static final String SIMPLE_WITH_REFERENCE = ValidatorTestBase.BASE_DIR_VALIDATION+\"/Wsdl/SimpleWsdl/simple_withreference.wsdl\";", "modifier": "private static final", "type": "String", "declarator": "SIMPLE_WITH_REFERENCE = ValidatorTestBase.BASE_DIR_VALIDATION+\"/Wsdl/SimpleWsdl/simple_withreference.wsdl\"", "var_name": "SIMPLE_WITH_REFERENCE"}, {"original_string": "private static final String TIBCO                 = ValidatorTestBase.BASE_DIR_VALIDATION+\"/Tibco/wsdl/BankingCustomer_01_GetPartyBasicDataBanking_01_concrete1.wsdl\";", "modifier": "private static final", "type": "String", "declarator": "TIBCO                 = ValidatorTestBase.BASE_DIR_VALIDATION+\"/Tibco/wsdl/BankingCustomer_01_GetPartyBasicDataBanking_01_concrete1.wsdl\"", "var_name": "TIBCO"}, {"original_string": "private static final String DOUBLE_BODY           = ValidatorTestBase.BASE_DIR_VALIDATION+\"/Wsdl/GetPolicyDetails/GetPolicyDetailsDoubleBody.wsdl\";", "modifier": "private static final", "type": "String", "declarator": "DOUBLE_BODY           = ValidatorTestBase.BASE_DIR_VALIDATION+\"/Wsdl/GetPolicyDetails/GetPolicyDetailsDoubleBody.wsdl\"", "var_name": "DOUBLE_BODY"}, {"original_string": "private static final String BASIC                 = ValidatorTestBase.BASE_DIR_VALIDATION+\"/Wsdl/GetPolicyDetails/GetPolicyDetails.wsdl\";", "modifier": "private static final", "type": "String", "declarator": "BASIC                 = ValidatorTestBase.BASE_DIR_VALIDATION+\"/Wsdl/GetPolicyDetails/GetPolicyDetails.wsdl\"", "var_name": "BASIC"}, {"original_string": "private IPipeLineSession session = mock(IPipeLineSession.class);", "modifier": "private", "type": "IPipeLineSession", "declarator": "session = mock(IPipeLineSession.class)", "var_name": "session"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/WsdlXmlValidatorTest.java"}, "test_case": {"identifier": "warnSchemaLocationAlreadyDefaultValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void warnSchemaLocationAlreadyDefaultValue() throws IOException, PipeRunException, SAXException, WSDLException, ConfigurationException, XmlValidatorException {\n\t\t// Mock a configuration with an adapter in it\n\t\tIbisManager ibisManager = spy(new DefaultIbisManager());\n\t\tibisManager.setIbisContext(spy(new IbisContext()));\n\t\tConfiguration configuration = new Configuration(new DummyAdapterService());\n\t\tconfiguration.setName(\"dummyConfiguration\");\n\t\tconfiguration.setVersion(\"1\");\n\t\tconfiguration.setIbisManager(ibisManager);\n\t\tConfigurationWarnings.getInstance().setActiveConfiguration(configuration);\n\n\t\tIAdapter adapter = spy(new Adapter());\n\t\tadapter.setName(\"dummy\");\n\t\tPipeLine pl = new PipeLine();\n\t\tpl.setFirstPipe(\"dummy\");\n\n\t\tWsdlXmlValidator val = new WsdlXmlValidator();\n\t\tval.setName(\"dummy\");\n\t\tval.setWsdl(BASIC);\n\t\tval.setSoapHeader(\"MessageHeader\");\n\t\tval.setSoapBody(\"GetPolicyDetails_Request\");\n\t\tval.setAddNamespaceToSchema(true);\n\t\tval.setSchemaLocation(\"http://ibissource.org/XSD/LifeRetailCB/PolicyJuice/1/GetPolicyDetails/1 schema2 http://ibissource.org/XSD/Generic/MessageHeader/2 schema1 \");\n\t\tval.setThrowException(true);\n\t\tval.registerForward(new PipeForward(\"success\", null));\n\n\t\tpl.addPipe(val);\n\t\tPipeLineExit ple = new PipeLineExit();\n\t\tple.setPath(\"success\");\n\t\tple.setState(\"success\");\n\t\tpl.registerPipeLineExit(ple);\n\t\tadapter.registerPipeLine(pl);\n\n\t\tadapter.setConfiguration(configuration);\n\t\tconfiguration.registerAdapter(adapter);\n\n\t\tassertEquals(1, configuration.getConfigurationWarnings().size());\n\t\tassertEquals(\"WsdlXmlValidator [dummy] attribute [schemaLocation] for wsdl [/Validation/Wsdl/GetPolicyDetails/GetPolicyDetails.wsdl] already has a default value [http://ibissource.org/XSD/Generic/MessageHeader/2 schema1 http://ibissource.org/XSD/LifeRetailCB/PolicyJuice/1/GetPolicyDetails/1 schema2]\", configuration.getConfigurationWarnings().getFirst());\n\t\tConfigurationWarnings.getInstance().setActiveConfiguration(null);\n\t}", "signature": "void warnSchemaLocationAlreadyDefaultValue()", "full_signature": "@Test public void warnSchemaLocationAlreadyDefaultValue()", "class_method_signature": "WsdlXmlValidatorTest.warnSchemaLocationAlreadyDefaultValue()", "testcase": true, "constructor": false, "invocations": ["spy", "setIbisContext", "spy", "setName", "setVersion", "setIbisManager", "setActiveConfiguration", "getInstance", "spy", "setName", "setFirstPipe", "setName", "setWsdl", "setSoapHeader", "setSoapBody", "setAddNamespaceToSchema", "setSchemaLocation", "setThrowException", "registerForward", "addPipe", "setPath", "setState", "registerPipeLineExit", "registerPipeLine", "setConfiguration", "registerAdapter", "assertEquals", "size", "getConfigurationWarnings", "assertEquals", "getFirst", "getConfigurationWarnings", "setActiveConfiguration", "getInstance"]}, "focal_class": {"identifier": "WsdlXmlValidator", "superclass": "extends SoapValidator", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LogUtil.getLogger(WsdlXmlValidator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogUtil.getLogger(WsdlXmlValidator.class)", "var_name": "LOG"}, {"original_string": "private String soapBodyNamespace = \"\";", "modifier": "private", "type": "String", "declarator": "soapBodyNamespace = \"\"", "var_name": "soapBodyNamespace"}, {"original_string": "private static final WSDLFactory FACTORY;", "modifier": "private static final", "type": "WSDLFactory", "declarator": "FACTORY", "var_name": "FACTORY"}, {"original_string": "public static final String RESOURCE_INTERNAL_REFERENCE_PREFIX = \"schema\";", "modifier": "public static final", "type": "String", "declarator": "RESOURCE_INTERNAL_REFERENCE_PREFIX = \"schema\"", "var_name": "RESOURCE_INTERNAL_REFERENCE_PREFIX"}, {"original_string": "private String wsdl;", "modifier": "private", "type": "String", "declarator": "wsdl", "var_name": "wsdl"}, {"original_string": "private Definition definition;", "modifier": "private", "type": "Definition", "declarator": "definition", "var_name": "definition"}, {"original_string": "private String schemaLocationToAdd;", "modifier": "private", "type": "String", "declarator": "schemaLocationToAdd", "var_name": "schemaLocationToAdd"}], "methods": [{"identifier": "setWsdl", "parameters": "(String wsdl)", "modifiers": "@IbisDoc({\"the wsdl to read the xsd's from\", \" \"}) public", "return": "void", "signature": "void setWsdl(String wsdl)", "full_signature": "@IbisDoc({\"the wsdl to read the xsd's from\", \" \"}) public void setWsdl(String wsdl)", "class_method_signature": "WsdlXmlValidator.setWsdl(String wsdl)", "testcase": false, "constructor": false}, {"identifier": "getWsdl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getWsdl()", "full_signature": "public String getWsdl()", "class_method_signature": "WsdlXmlValidator.getWsdl()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "WsdlXmlValidator.configure()", "testcase": false, "constructor": false}, {"identifier": "getFormattedSchemaLocation", "parameters": "(String schemaLocation)", "modifiers": "private static", "return": "String", "signature": "String getFormattedSchemaLocation(String schemaLocation)", "full_signature": "private static String getFormattedSchemaLocation(String schemaLocation)", "class_method_signature": "WsdlXmlValidator.getFormattedSchemaLocation(String schemaLocation)", "testcase": false, "constructor": false}, {"identifier": "checkSchemaSpecified", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void checkSchemaSpecified()", "full_signature": "@Override protected void checkSchemaSpecified()", "class_method_signature": "WsdlXmlValidator.checkSchemaSpecified()", "testcase": false, "constructor": false}, {"identifier": "addNamespaces", "parameters": "(Schema schema, Map<String, String> namespaces)", "modifiers": "protected static", "return": "void", "signature": "void addNamespaces(Schema schema, Map<String, String> namespaces)", "full_signature": "protected static void addNamespaces(Schema schema, Map<String, String> namespaces)", "class_method_signature": "WsdlXmlValidator.addNamespaces(Schema schema, Map<String, String> namespaces)", "testcase": false, "constructor": false}, {"identifier": "getSchemasId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSchemasId()", "full_signature": "@Override public String getSchemasId()", "class_method_signature": "WsdlXmlValidator.getSchemasId()", "testcase": false, "constructor": false}, {"identifier": "getXsds", "parameters": "()", "modifiers": "@Override public", "return": "Set<XSD>", "signature": "Set<XSD> getXsds()", "full_signature": "@Override public Set<XSD> getXsds()", "class_method_signature": "WsdlXmlValidator.getXsds()", "testcase": false, "constructor": false}, {"identifier": "toExtendedString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toExtendedString()", "full_signature": "public String toExtendedString()", "class_method_signature": "WsdlXmlValidator.toExtendedString()", "testcase": false, "constructor": false}, {"identifier": "setSchemaLocationToAdd", "parameters": "(String schemaLocationToAdd)", "modifiers": "@IbisDoc({\"1\", \"pairs of uri references which will be added to the wsdl\", \" \"}) public", "return": "void", "signature": "void setSchemaLocationToAdd(String schemaLocationToAdd)", "full_signature": "@IbisDoc({\"1\", \"pairs of uri references which will be added to the wsdl\", \" \"}) public void setSchemaLocationToAdd(String schemaLocationToAdd)", "class_method_signature": "WsdlXmlValidator.setSchemaLocationToAdd(String schemaLocationToAdd)", "testcase": false, "constructor": false}, {"identifier": "getSchemaLocationToAdd", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSchemaLocationToAdd()", "full_signature": "public String getSchemaLocationToAdd()", "class_method_signature": "WsdlXmlValidator.getSchemaLocationToAdd()", "testcase": false, "constructor": false}, {"identifier": "setSoapBodyNamespace", "parameters": "(String soapBodyNamespace)", "modifiers": "@IbisDoc({\"2\", \"creates <code>schemalocation</code> attribute based on the wsdl and replaces the namespace of the soap body element\", \" \" }) public", "return": "void", "signature": "void setSoapBodyNamespace(String soapBodyNamespace)", "full_signature": "@IbisDoc({\"2\", \"creates <code>schemalocation</code> attribute based on the wsdl and replaces the namespace of the soap body element\", \" \" }) public void setSoapBodyNamespace(String soapBodyNamespace)", "class_method_signature": "WsdlXmlValidator.setSoapBodyNamespace(String soapBodyNamespace)", "testcase": false, "constructor": false}, {"identifier": "getSoapBodyNamespace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSoapBodyNamespace()", "full_signature": "public String getSoapBodyNamespace()", "class_method_signature": "WsdlXmlValidator.getSoapBodyNamespace()", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/WsdlXmlValidator.java"}, "focal_method": {"identifier": "setWsdl", "parameters": "(String wsdl)", "modifiers": "@IbisDoc({\"the wsdl to read the xsd's from\", \" \"}) public", "return": "void", "body": "@IbisDoc({\"the wsdl to read the xsd's from\", \" \"})\n\tpublic void setWsdl(String wsdl) throws ConfigurationException {\n\t\tthis.wsdl = wsdl;\n\t\tWSDLReader reader  = FACTORY.newWSDLReader();\n\t\treader.setFeature(\"javax.wsdl.verbose\", false);\n\t\treader.setFeature(\"javax.wsdl.importDocuments\", true);\n\t\tClassLoaderWSDLLocator wsdlLocator = new ClassLoaderWSDLLocator(getConfigurationClassLoader(), wsdl);\n\t\tURL url = wsdlLocator.getUrl();\n\t\tif (wsdlLocator.getUrl() == null) {\n\t\t\tthrow new ConfigurationException(\"Could not find WSDL: \" + wsdl);\n\t\t}\n\t\ttry {\n\t\t\tdefinition = reader.readWSDL(wsdlLocator);\n\t\t} catch (WSDLException e) {\n\t\t\tthrow new ConfigurationException(\"WSDLException reading WSDL or import from url: \" + url, e);\n\t\t}\n\t\tif (wsdlLocator.getIOException() != null) {\n\t\t\tthrow new ConfigurationException(\"IOException reading WSDL or import from url: \" + url,\n\t\t\t\t\twsdlLocator.getIOException());\n\t\t}\n\t}", "signature": "void setWsdl(String wsdl)", "full_signature": "@IbisDoc({\"the wsdl to read the xsd's from\", \" \"}) public void setWsdl(String wsdl)", "class_method_signature": "WsdlXmlValidator.setWsdl(String wsdl)", "testcase": false, "constructor": false, "invocations": ["newWSDLReader", "setFeature", "setFeature", "getConfigurationClassLoader", "getUrl", "getUrl", "readWSDL", "getIOException", "getIOException"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}