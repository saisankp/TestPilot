{"test_class": {"identifier": "DateTimeUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DateTimeUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DateTimeUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/DateTimeUtilTest.java"}, "test_case": {"identifier": "floorToHalfHour", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void floorToHalfHour() throws Exception {\n        // create a reference datetime\n        DateTime dt0 = new DateTime(2009,6,24,23,29,30,789,DateTimeZone.UTC);\n\n        Assert.assertNull(DateTimeUtil.floorToHalfHour(null));\n        \n        // floor to nearest half hour\n        DateTime dt1 = DateTimeUtil.floorToHalfHour(dt0);\n\n        Assert.assertEquals(2009, dt1.getYear());\n        Assert.assertEquals(6, dt1.getMonthOfYear());\n        Assert.assertEquals(24, dt1.getDayOfMonth());\n        Assert.assertEquals(23, dt1.getHourOfDay());\n        Assert.assertEquals(0, dt1.getMinuteOfHour());\n        Assert.assertEquals(0, dt1.getSecondOfMinute());\n        Assert.assertEquals(0, dt1.getMillisOfSecond());\n        Assert.assertEquals(DateTimeZone.UTC, dt1.getZone());\n\n        DateTime dt3 = DateTimeUtil.floorToHalfHour(new DateTime(2009,6,24,10,0,0,0));\n        Assert.assertEquals(new DateTime(2009,6,24,10,0,0,0), dt3);\n\n        dt3 = DateTimeUtil.floorToHalfHour(new DateTime(2009,6,24,10,1,23,456));\n        Assert.assertEquals(new DateTime(2009,6,24,10,0,0,0), dt3);\n\n        dt3 = DateTimeUtil.floorToHalfHour(new DateTime(2009,6,24,10,30,12,56));\n        Assert.assertEquals(new DateTime(2009,6,24,10,30,0,0), dt3);\n\n        dt3 = DateTimeUtil.floorToHalfHour(new DateTime(2009,6,24,10,59,59,999));\n        Assert.assertEquals(new DateTime(2009,6,24,10,30,0,0), dt3);\n\n        dt3 = DateTimeUtil.floorToHalfHour(new DateTime(2009,6,24,10,55,59,999));\n        Assert.assertEquals(new DateTime(2009,6,24,10,30,0,0), dt3);\n\n        dt3 = DateTimeUtil.floorToHalfHour(new DateTime(2009,6,24,10,46,59,999));\n        Assert.assertEquals(new DateTime(2009,6,24,10,30,0,0), dt3);\n    }", "signature": "void floorToHalfHour()", "full_signature": "@Test public void floorToHalfHour()", "class_method_signature": "DateTimeUtilTest.floorToHalfHour()", "testcase": true, "constructor": false, "invocations": ["assertNull", "floorToHalfHour", "floorToHalfHour", "assertEquals", "getYear", "assertEquals", "getMonthOfYear", "assertEquals", "getDayOfMonth", "assertEquals", "getHourOfDay", "assertEquals", "getMinuteOfHour", "assertEquals", "getSecondOfMinute", "assertEquals", "getMillisOfSecond", "assertEquals", "getZone", "floorToHalfHour", "assertEquals", "floorToHalfHour", "assertEquals", "floorToHalfHour", "assertEquals", "floorToHalfHour", "assertEquals", "floorToHalfHour", "assertEquals", "floorToHalfHour", "assertEquals"]}, "focal_class": {"identifier": "DateTimeUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toDateTime", "parameters": "(Timestamp value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime toDateTime(Timestamp value)", "full_signature": "public static DateTime toDateTime(Timestamp value)", "class_method_signature": "DateTimeUtil.toDateTime(Timestamp value)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime copy(DateTime value)", "full_signature": "public static DateTime copy(DateTime value)", "class_method_signature": "DateTimeUtil.copy(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "toTimestamp", "parameters": "(DateTime dt)", "modifiers": "public static", "return": "Timestamp", "signature": "Timestamp toTimestamp(DateTime dt)", "full_signature": "public static Timestamp toTimestamp(DateTime dt)", "class_method_signature": "DateTimeUtil.toTimestamp(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "now", "parameters": "()", "modifiers": "public static", "return": "DateTime", "signature": "DateTime now()", "full_signature": "public static DateTime now()", "class_method_signature": "DateTimeUtil.now()", "testcase": false, "constructor": false}, {"identifier": "parseEmbedded", "parameters": "(String string0)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime parseEmbedded(String string0)", "full_signature": "public static DateTime parseEmbedded(String string0)", "class_method_signature": "DateTimeUtil.parseEmbedded(String string0)", "testcase": false, "constructor": false}, {"identifier": "parseEmbedded", "parameters": "(String string0, String pattern, DateTimeZone zone)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime parseEmbedded(String string0, String pattern, DateTimeZone zone)", "full_signature": "public static DateTime parseEmbedded(String string0, String pattern, DateTimeZone zone)", "class_method_signature": "DateTimeUtil.parseEmbedded(String string0, String pattern, DateTimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "floorToYear", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToYear(DateTime value)", "full_signature": "public static DateTime floorToYear(DateTime value)", "class_method_signature": "DateTimeUtil.floorToYear(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToMonth", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToMonth(DateTime value)", "full_signature": "public static DateTime floorToMonth(DateTime value)", "class_method_signature": "DateTimeUtil.floorToMonth(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToDay", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToDay(DateTime value)", "full_signature": "public static DateTime floorToDay(DateTime value)", "class_method_signature": "DateTimeUtil.floorToDay(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToHour", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToHour(DateTime value)", "full_signature": "public static DateTime floorToHour(DateTime value)", "class_method_signature": "DateTimeUtil.floorToHour(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToHalfHour", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToHalfHour(DateTime value)", "full_signature": "public static DateTime floorToHalfHour(DateTime value)", "class_method_signature": "DateTimeUtil.floorToHalfHour(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToQuarterHour", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToQuarterHour(DateTime value)", "full_signature": "public static DateTime floorToQuarterHour(DateTime value)", "class_method_signature": "DateTimeUtil.floorToQuarterHour(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToTenMinutes", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToTenMinutes(DateTime value)", "full_signature": "public static DateTime floorToTenMinutes(DateTime value)", "class_method_signature": "DateTimeUtil.floorToTenMinutes(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToFiveMinutes", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToFiveMinutes(DateTime value)", "full_signature": "public static DateTime floorToFiveMinutes(DateTime value)", "class_method_signature": "DateTimeUtil.floorToFiveMinutes(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToMinutePeriod", "parameters": "(DateTime value, int periodInMinutes)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToMinutePeriod(DateTime value, int periodInMinutes)", "full_signature": "public static DateTime floorToMinutePeriod(DateTime value, int periodInMinutes)", "class_method_signature": "DateTimeUtil.floorToMinutePeriod(DateTime value, int periodInMinutes)", "testcase": false, "constructor": false}, {"identifier": "floorToMinute", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToMinute(DateTime value)", "full_signature": "public static DateTime floorToMinute(DateTime value)", "class_method_signature": "DateTimeUtil.floorToMinute(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToSecond", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToSecond(DateTime value)", "full_signature": "public static DateTime floorToSecond(DateTime value)", "class_method_signature": "DateTimeUtil.floorToSecond(DateTime value)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/DateTimeUtil.java"}, "focal_method": {"identifier": "floorToHalfHour", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "body": "public static DateTime floorToHalfHour(DateTime value) {\n        return floorToMinutePeriod(value, 30);\n    }", "signature": "DateTime floorToHalfHour(DateTime value)", "full_signature": "public static DateTime floorToHalfHour(DateTime value)", "class_method_signature": "DateTimeUtil.floorToHalfHour(DateTime value)", "testcase": false, "constructor": false, "invocations": ["floorToMinutePeriod"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}