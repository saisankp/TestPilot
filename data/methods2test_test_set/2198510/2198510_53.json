{"test_class": {"identifier": "TestHttpSink", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Integer DEFAULT_REQUEST_TIMEOUT = 5000;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_REQUEST_TIMEOUT = 5000", "var_name": "DEFAULT_REQUEST_TIMEOUT"}, {"original_string": "private static final Integer DEFAULT_CONNECT_TIMEOUT = 5000;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_CONNECT_TIMEOUT = 5000", "var_name": "DEFAULT_CONNECT_TIMEOUT"}, {"original_string": "private static final String DEFAULT_ACCEPT_HEADER = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ACCEPT_HEADER = \"text/plain\"", "var_name": "DEFAULT_ACCEPT_HEADER"}, {"original_string": "private static final String DEFAULT_CONTENT_TYPE_HEADER = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CONTENT_TYPE_HEADER = \"text/plain\"", "var_name": "DEFAULT_CONTENT_TYPE_HEADER"}, {"original_string": "@Mock\n  private SinkCounter sinkCounter;", "modifier": "@Mock\n  private", "type": "SinkCounter", "declarator": "sinkCounter", "var_name": "sinkCounter"}, {"original_string": "@Mock\n  private Context configContext;", "modifier": "@Mock\n  private", "type": "Context", "declarator": "configContext", "var_name": "configContext"}, {"original_string": "@Mock\n  private Channel channel;", "modifier": "@Mock\n  private", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "@Mock\n  private Transaction transaction;", "modifier": "@Mock\n  private", "type": "Transaction", "declarator": "transaction", "var_name": "transaction"}, {"original_string": "@Mock\n  private Event event;", "modifier": "@Mock\n  private", "type": "Event", "declarator": "event", "var_name": "event"}, {"original_string": "@Mock\n  private HttpURLConnection httpURLConnection;", "modifier": "@Mock\n  private", "type": "HttpURLConnection", "declarator": "httpURLConnection", "var_name": "httpURLConnection"}, {"original_string": "@Mock\n  private OutputStream outputStream;", "modifier": "@Mock\n  private", "type": "OutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "@Mock\n  private InputStream inputStream;", "modifier": "@Mock\n  private", "type": "InputStream", "declarator": "inputStream", "var_name": "inputStream"}], "file": "flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSink.java"}, "test_case": {"identifier": "ensureDefaultRequestTimeoutCorrect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void ensureDefaultRequestTimeoutCorrect() {\n    whenDefaultStringConfig();\n    when(configContext.getInteger(\"requestTimeout\", DEFAULT_REQUEST_TIMEOUT)).thenReturn(1000);\n    when(configContext.getInteger(eq(\"connectTimeout\"), Mockito.anyInt())).thenReturn(1000);\n    new HttpSink().configure(configContext);\n    verify(configContext).getInteger(\"requestTimeout\", DEFAULT_REQUEST_TIMEOUT);\n  }", "signature": "void ensureDefaultRequestTimeoutCorrect()", "full_signature": "@Test public void ensureDefaultRequestTimeoutCorrect()", "class_method_signature": "TestHttpSink.ensureDefaultRequestTimeoutCorrect()", "testcase": true, "constructor": false, "invocations": ["whenDefaultStringConfig", "thenReturn", "when", "getInteger", "thenReturn", "when", "getInteger", "eq", "anyInt", "configure", "getInteger", "verify"]}, "focal_class": {"identifier": "HttpSink", "superclass": "extends AbstractSink", "interfaces": "implements Configurable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(HttpSink.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(HttpSink.class)", "var_name": "LOG"}, {"original_string": "private static final int HTTP_STATUS_CONTINUE = 100;", "modifier": "private static final", "type": "int", "declarator": "HTTP_STATUS_CONTINUE = 100", "var_name": "HTTP_STATUS_CONTINUE"}, {"original_string": "private static final int DEFAULT_CONNECT_TIMEOUT = 5000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_CONNECT_TIMEOUT = 5000", "var_name": "DEFAULT_CONNECT_TIMEOUT"}, {"original_string": "private static final int DEFAULT_REQUEST_TIMEOUT = 5000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_REQUEST_TIMEOUT = 5000", "var_name": "DEFAULT_REQUEST_TIMEOUT"}, {"original_string": "private static final String DEFAULT_CONTENT_TYPE = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CONTENT_TYPE = \"text/plain\"", "var_name": "DEFAULT_CONTENT_TYPE"}, {"original_string": "private static final String DEFAULT_ACCEPT_HEADER = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ACCEPT_HEADER = \"text/plain\"", "var_name": "DEFAULT_ACCEPT_HEADER"}, {"original_string": "private URL endpointUrl;", "modifier": "private", "type": "URL", "declarator": "endpointUrl", "var_name": "endpointUrl"}, {"original_string": "private SinkCounter sinkCounter;", "modifier": "private", "type": "SinkCounter", "declarator": "sinkCounter", "var_name": "sinkCounter"}, {"original_string": "private int connectTimeout = DEFAULT_CONNECT_TIMEOUT;", "modifier": "private", "type": "int", "declarator": "connectTimeout = DEFAULT_CONNECT_TIMEOUT", "var_name": "connectTimeout"}, {"original_string": "private int requestTimeout = DEFAULT_REQUEST_TIMEOUT;", "modifier": "private", "type": "int", "declarator": "requestTimeout = DEFAULT_REQUEST_TIMEOUT", "var_name": "requestTimeout"}, {"original_string": "private String contentTypeHeader = DEFAULT_CONTENT_TYPE;", "modifier": "private", "type": "String", "declarator": "contentTypeHeader = DEFAULT_CONTENT_TYPE", "var_name": "contentTypeHeader"}, {"original_string": "private String acceptHeader = DEFAULT_ACCEPT_HEADER;", "modifier": "private", "type": "String", "declarator": "acceptHeader = DEFAULT_ACCEPT_HEADER", "var_name": "acceptHeader"}, {"original_string": "private boolean defaultBackoff;", "modifier": "private", "type": "boolean", "declarator": "defaultBackoff", "var_name": "defaultBackoff"}, {"original_string": "private boolean defaultRollback;", "modifier": "private", "type": "boolean", "declarator": "defaultRollback", "var_name": "defaultRollback"}, {"original_string": "private boolean defaultIncrementMetrics;", "modifier": "private", "type": "boolean", "declarator": "defaultIncrementMetrics", "var_name": "defaultIncrementMetrics"}, {"original_string": "private HashMap<String, Boolean> backoffOverrides = new HashMap<>();", "modifier": "private", "type": "HashMap<String, Boolean>", "declarator": "backoffOverrides = new HashMap<>()", "var_name": "backoffOverrides"}, {"original_string": "private HashMap<String, Boolean> rollbackOverrides = new HashMap<>();", "modifier": "private", "type": "HashMap<String, Boolean>", "declarator": "rollbackOverrides = new HashMap<>()", "var_name": "rollbackOverrides"}, {"original_string": "private HashMap<String, Boolean> incrementMetricsOverrides = new HashMap<>();", "modifier": "private", "type": "HashMap<String, Boolean>", "declarator": "incrementMetricsOverrides = new HashMap<>()", "var_name": "incrementMetricsOverrides"}, {"original_string": "private ConnectionBuilder connectionBuilder;", "modifier": "private", "type": "ConnectionBuilder", "declarator": "connectionBuilder", "var_name": "connectionBuilder"}], "methods": [{"identifier": "configure", "parameters": "(final Context context)", "modifiers": "@Override public final", "return": "void", "signature": "void configure(final Context context)", "full_signature": "@Override public final void configure(final Context context)", "class_method_signature": "HttpSink.configure(final Context context)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void start()", "full_signature": "@Override public final void start()", "class_method_signature": "HttpSink.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void stop()", "full_signature": "@Override public final void stop()", "class_method_signature": "HttpSink.stop()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "()", "modifiers": "@Override public final", "return": "Status", "signature": "Status process()", "full_signature": "@Override public final Status process()", "class_method_signature": "HttpSink.process()", "testcase": false, "constructor": false}, {"identifier": "parseConfigOverrides", "parameters": "(final String propertyName,\n                                    final Context context,\n                                    final Map<String, Boolean> override)", "modifiers": "private", "return": "void", "signature": "void parseConfigOverrides(final String propertyName,\n                                    final Context context,\n                                    final Map<String, Boolean> override)", "full_signature": "private void parseConfigOverrides(final String propertyName,\n                                    final Context context,\n                                    final Map<String, Boolean> override)", "class_method_signature": "HttpSink.parseConfigOverrides(final String propertyName,\n                                    final Context context,\n                                    final Map<String, Boolean> override)", "testcase": false, "constructor": false}, {"identifier": "findOverrideValue", "parameters": "(final String statusCode,\n                                    final HashMap<String, Boolean> overrides,\n                                    final boolean defaultValue)", "modifiers": "private", "return": "boolean", "signature": "boolean findOverrideValue(final String statusCode,\n                                    final HashMap<String, Boolean> overrides,\n                                    final boolean defaultValue)", "full_signature": "private boolean findOverrideValue(final String statusCode,\n                                    final HashMap<String, Boolean> overrides,\n                                    final boolean defaultValue)", "class_method_signature": "HttpSink.findOverrideValue(final String statusCode,\n                                    final HashMap<String, Boolean> overrides,\n                                    final boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "setConnectionBuilder", "parameters": "(final ConnectionBuilder builder)", "modifiers": "final", "return": "void", "signature": "void setConnectionBuilder(final ConnectionBuilder builder)", "full_signature": "final void setConnectionBuilder(final ConnectionBuilder builder)", "class_method_signature": "HttpSink.setConnectionBuilder(final ConnectionBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "setSinkCounter", "parameters": "(final SinkCounter newSinkCounter)", "modifiers": "final", "return": "void", "signature": "void setSinkCounter(final SinkCounter newSinkCounter)", "full_signature": "final void setSinkCounter(final SinkCounter newSinkCounter)", "class_method_signature": "HttpSink.setSinkCounter(final SinkCounter newSinkCounter)", "testcase": false, "constructor": false}], "file": "flume-ng-sinks/flume-http-sink/src/main/java/org/apache/flume/sink/http/HttpSink.java"}, "focal_method": {"identifier": "configure", "parameters": "(final Context context)", "modifiers": "@Override public final", "return": "void", "body": "@Override\n  public final void configure(final Context context) {\n    String configuredEndpoint = context.getString(\"endpoint\", \"\");\n    LOG.info(\"Read endpoint URL from configuration : \" + configuredEndpoint);\n\n    try {\n      endpointUrl = new URL(configuredEndpoint);\n    } catch (MalformedURLException e) {\n      throw new IllegalArgumentException(\"Endpoint URL invalid\", e);\n    }\n\n    connectTimeout = context.getInteger(\"connectTimeout\",\n        DEFAULT_CONNECT_TIMEOUT);\n\n    if (connectTimeout <= 0) {\n      throw new IllegalArgumentException(\n          \"Connect timeout must be a non-zero and positive\");\n    }\n    LOG.info(\"Using connect timeout : \" + connectTimeout);\n\n    requestTimeout = context.getInteger(\"requestTimeout\",\n        DEFAULT_REQUEST_TIMEOUT);\n\n    if (requestTimeout <= 0) {\n      throw new IllegalArgumentException(\n          \"Request timeout must be a non-zero and positive\");\n    }\n    LOG.info(\"Using request timeout : \" + requestTimeout);\n\n    acceptHeader = context.getString(\"acceptHeader\", DEFAULT_ACCEPT_HEADER);\n    LOG.info(\"Using Accept header value : \" + acceptHeader);\n\n    contentTypeHeader = context.getString(\"contentTypeHeader\",\n        DEFAULT_CONTENT_TYPE);\n    LOG.info(\"Using Content-Type header value : \" + contentTypeHeader);\n\n    defaultBackoff = context.getBoolean(\"defaultBackoff\", true);\n    LOG.info(\"Channel backoff by default is \" + defaultBackoff);\n\n    defaultRollback = context.getBoolean(\"defaultRollback\", true);\n    LOG.info(\"Transaction rollback by default is \" + defaultRollback);\n\n    defaultIncrementMetrics = context.getBoolean(\"defaultIncrementMetrics\",\n        false);\n    LOG.info(\"Incrementing metrics by default is \" + defaultIncrementMetrics);\n\n    parseConfigOverrides(\"backoff\", context, backoffOverrides);\n    parseConfigOverrides(\"rollback\", context, rollbackOverrides);\n    parseConfigOverrides(\"incrementMetrics\", context,\n        incrementMetricsOverrides);\n\n    if (this.sinkCounter == null) {\n      this.sinkCounter = new SinkCounter(this.getName());\n    }\n\n    connectionBuilder = new ConnectionBuilder();\n  }", "signature": "void configure(final Context context)", "full_signature": "@Override public final void configure(final Context context)", "class_method_signature": "HttpSink.configure(final Context context)", "testcase": false, "constructor": false, "invocations": ["getString", "info", "getInteger", "info", "getInteger", "info", "getString", "info", "getString", "info", "getBoolean", "info", "getBoolean", "info", "getBoolean", "info", "parseConfigOverrides", "parseConfigOverrides", "parseConfigOverrides", "getName"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}