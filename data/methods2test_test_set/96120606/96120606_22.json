{"test_class": {"identifier": "WebActionControllerAdviceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String sessionid = \"test-sessionId\";", "modifier": "private", "type": "String", "declarator": "sessionid = \"test-sessionId\"", "var_name": "sessionid"}, {"original_string": "@InjectMocks\n\tprivate WebActionControllerAdvice testee;", "modifier": "@InjectMocks\n\tprivate", "type": "WebActionControllerAdvice", "declarator": "testee", "var_name": "testee"}, {"original_string": "@Mock\n\tprivate CommandTransactionInterceptor interceptor;", "modifier": "@Mock\n\tprivate", "type": "CommandTransactionInterceptor", "declarator": "interceptor", "var_name": "interceptor"}], "file": "nimbus-core/src/test/java/com/antheminc/oss/nimbus/channel/web/WebActionControllerAdviceTest.java"}, "test_case": {"identifier": "testBeforeBodyWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBeforeBodyWrite() {\n\t\tfinal Object body = new Object();\n\t\tfinal MethodParameter returnType = Mockito.mock(MethodParameter.class);\n\t\tfinal MediaType selectedContentType = MediaType.ALL; \n\t\tfinal Class<? extends HttpMessageConverter<?>> selectedConverterType = null;\n\t\tfinal ServerHttpRequest req = new ServletServerHttpRequest(new MockHttpServletRequest());\n\t\tfinal ServerHttpResponse res = new ServletServerHttpResponse(new MockHttpServletResponse());\n\t\t\n\t\tfinal MultiExecuteOutput expected = new MultiExecuteOutput(sessionid);\n\t\t\n\t\tMockito.when(this.interceptor.handleResponse(body)).thenReturn(expected);\n\t\tfinal Object actual = this.testee.beforeBodyWrite(body, returnType, selectedContentType, selectedConverterType, req, res);\n\t\tMockito.verify(this.interceptor, Mockito.times(1)).handleResponse(body);\n\t\t\n\t\tAssert.assertEquals(expected, actual);\n\t}", "signature": "void testBeforeBodyWrite()", "full_signature": "@Test public void testBeforeBodyWrite()", "class_method_signature": "WebActionControllerAdviceTest.testBeforeBodyWrite()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "handleResponse", "beforeBodyWrite", "handleResponse", "verify", "times", "assertEquals"]}, "focal_class": {"identifier": "WebActionControllerAdvice", "superclass": "", "interfaces": "implements ResponseBodyAdvice<Object>", "fields": [{"original_string": "private JustLogit logit = new JustLogit(this.getClass());", "modifier": "private", "type": "JustLogit", "declarator": "logit = new JustLogit(this.getClass())", "var_name": "logit"}, {"original_string": "private static final String RESPONSE_INTERCEPTOR_BEAN_PREFIX = \"httpresponsebodyinterceptor.\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE_INTERCEPTOR_BEAN_PREFIX = \"httpresponsebodyinterceptor.\"", "var_name": "RESPONSE_INTERCEPTOR_BEAN_PREFIX"}, {"original_string": "@Value(\"${nimbus.error.metricLoggingEnabled:true}\")\n\tprivate boolean metricLoggingEnabled;", "modifier": "@Value(\"${nimbus.error.metricLoggingEnabled:true}\")\n\tprivate", "type": "boolean", "declarator": "metricLoggingEnabled", "var_name": "metricLoggingEnabled"}, {"original_string": "@Getter @Setter\n\tprivate Map<Class<?>,String> exceptions;", "modifier": "@Getter @Setter\n\tprivate", "type": "Map<Class<?>,String>", "declarator": "exceptions", "var_name": "exceptions"}, {"original_string": "@Value(\"${nimbus.error.genericMsg:System Error ERR.UNIQUEID}\")\n\tprivate String genericMsg;", "modifier": "@Value(\"${nimbus.error.genericMsg:System Error ERR.UNIQUEID}\")\n\tprivate", "type": "String", "declarator": "genericMsg", "var_name": "genericMsg"}, {"original_string": "@Autowired CommandTransactionInterceptor defaultInterceptor;", "modifier": "@Autowired", "type": "CommandTransactionInterceptor", "declarator": "defaultInterceptor", "var_name": "defaultInterceptor"}, {"original_string": "@Autowired BeanResolverStrategy beanResolver;", "modifier": "@Autowired", "type": "BeanResolverStrategy", "declarator": "beanResolver", "var_name": "beanResolver"}], "methods": [{"identifier": "supports", "parameters": "(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType)", "full_signature": "@Override public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType)", "class_method_signature": "WebActionControllerAdvice.supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType)", "testcase": false, "constructor": false}, {"identifier": "beforeBodyWrite", "parameters": "(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "signature": "Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)", "class_method_signature": "WebActionControllerAdvice.beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)", "testcase": false, "constructor": false}, {"identifier": "exception", "parameters": "(Throwable pEx)", "modifiers": "@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR) @ExceptionHandler(Throwable.class) @ResponseBody public", "return": "MultiExecuteOutput", "signature": "MultiExecuteOutput exception(Throwable pEx)", "full_signature": "@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR) @ExceptionHandler(Throwable.class) @ResponseBody public MultiExecuteOutput exception(Throwable pEx)", "class_method_signature": "WebActionControllerAdvice.exception(Throwable pEx)", "testcase": false, "constructor": false}, {"identifier": "logError", "parameters": "(ExecuteError execError, Throwable pEx)", "modifiers": "private", "return": "void", "signature": "void logError(ExecuteError execError, Throwable pEx)", "full_signature": "private void logError(ExecuteError execError, Throwable pEx)", "class_method_signature": "WebActionControllerAdvice.logError(ExecuteError execError, Throwable pEx)", "testcase": false, "constructor": false}, {"identifier": "exception", "parameters": "(MethodArgumentNotValidException vEx)", "modifiers": "@ResponseStatus(value = HttpStatus.UNPROCESSABLE_ENTITY) @ExceptionHandler(MethodArgumentNotValidException.class) @ResponseBody public", "return": "MultiExecuteOutput", "signature": "MultiExecuteOutput exception(MethodArgumentNotValidException vEx)", "full_signature": "@ResponseStatus(value = HttpStatus.UNPROCESSABLE_ENTITY) @ExceptionHandler(MethodArgumentNotValidException.class) @ResponseBody public MultiExecuteOutput exception(MethodArgumentNotValidException vEx)", "class_method_signature": "WebActionControllerAdvice.exception(MethodArgumentNotValidException vEx)", "testcase": false, "constructor": false}, {"identifier": "constructMessage", "parameters": "(ExecuteError err)", "modifiers": "private", "return": "String", "signature": "String constructMessage(ExecuteError err)", "full_signature": "private String constructMessage(ExecuteError err)", "class_method_signature": "WebActionControllerAdvice.constructMessage(ExecuteError err)", "testcase": false, "constructor": false}, {"identifier": "constructMessage", "parameters": "(String configMsg, ExecuteError err)", "modifiers": "private", "return": "String", "signature": "String constructMessage(String configMsg, ExecuteError err)", "full_signature": "private String constructMessage(String configMsg, ExecuteError err)", "class_method_signature": "WebActionControllerAdvice.constructMessage(String configMsg, ExecuteError err)", "testcase": false, "constructor": false}, {"identifier": "constructExecError", "parameters": "(Throwable pEx)", "modifiers": "private", "return": "ExecuteError", "signature": "ExecuteError constructExecError(Throwable pEx)", "full_signature": "private ExecuteError constructExecError(Throwable pEx)", "class_method_signature": "WebActionControllerAdvice.constructExecError(Throwable pEx)", "testcase": false, "constructor": false}], "file": "nimbus-core/src/main/java/com/antheminc/oss/nimbus/channel/web/WebActionControllerAdvice.java"}, "focal_method": {"identifier": "beforeBodyWrite", "parameters": "(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "body": "@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response) {\n\t\t\n\t\tlogit.debug(()->\"Processed response from \"+WebActionController.class+\": \"\n\t\t\t\t\t+ \"\\n\"+ body);\n\t\t\n\t\tMultiExecuteOutput multiOutput = defaultInterceptor.handleResponse(body);\n\t\t\n\t\tString responseBodyHeader = request.getHeaders().getFirst(Constants.HTTP_RESPONSEBODY_INTERCEPTOR_HEADER.code);\n\t\t\n\t\tif(StringUtils.isBlank(responseBodyHeader))\n\t\t\treturn multiOutput;\n\t\t\n\t\tResponseInterceptor<MultiExecuteOutput> interceptor = beanResolver.find(ResponseInterceptor.class, RESPONSE_INTERCEPTOR_BEAN_PREFIX+responseBodyHeader);\n\t\t\n\t\tif(interceptor == null)\n\t\t\treturn multiOutput;\n\t\t\n\t\tinterceptor.intercept(multiOutput);\n\t\t\n\t\treturn multiOutput;\n\t}", "signature": "Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)", "class_method_signature": "WebActionControllerAdvice.beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, \n\t\t\tClass<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)", "testcase": false, "constructor": false, "invocations": ["debug", "handleResponse", "getFirst", "getHeaders", "isBlank", "find", "intercept"]}, "repository": {"repo_id": 96120606, "url": "https://github.com/openanthem/nimbus-core", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 9, "size": 55787, "license": "licensed"}}