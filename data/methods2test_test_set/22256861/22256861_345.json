{"test_class": {"identifier": "ModisFileReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-modis-reader/src/test/java/org/esa/s3tbx/dataio/modis/ModisFileReaderTest.java"}, "test_case": {"identifier": "testHasInvalidScaleAndOffset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHasInvalidScaleAndOffset() {\n        assertFalse(ModisFileReader.hasInvalidScaleAndOffset(new float[4], new float[4], 3));\n    }", "signature": "void testHasInvalidScaleAndOffset()", "full_signature": "@Test public void testHasInvalidScaleAndOffset()", "class_method_signature": "ModisFileReaderTest.testHasInvalidScaleAndOffset()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "hasInvalidScaleAndOffset"]}, "focal_class": {"identifier": "ModisFileReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger;", "modifier": "private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private HashMap<Band, ModisBandReader> bandReaderMap;", "modifier": "private", "type": "HashMap<Band, ModisBandReader>", "declarator": "bandReaderMap", "var_name": "bandReaderMap"}, {"original_string": "private ModisProductDb prodDb;", "modifier": "private", "type": "ModisProductDb", "declarator": "prodDb", "var_name": "prodDb"}, {"original_string": "private NetcdfFile qcFile;", "modifier": "private", "type": "NetcdfFile", "declarator": "qcFile", "var_name": "qcFile"}], "methods": [{"identifier": "ModisFileReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " ModisFileReader()", "full_signature": "public  ModisFileReader()", "class_method_signature": "ModisFileReader.ModisFileReader()", "testcase": false, "constructor": true}, {"identifier": "addRastersAndGeoCoding", "parameters": "(final Product product, ModisGlobalAttributes globalAttribs, NetCDFVariables netCDFVariables)", "modifiers": "public", "return": "void", "signature": "void addRastersAndGeoCoding(final Product product, ModisGlobalAttributes globalAttribs, NetCDFVariables netCDFVariables)", "full_signature": "public void addRastersAndGeoCoding(final Product product, ModisGlobalAttributes globalAttribs, NetCDFVariables netCDFVariables)", "class_method_signature": "ModisFileReader.addRastersAndGeoCoding(final Product product, ModisGlobalAttributes globalAttribs, NetCDFVariables netCDFVariables)", "testcase": false, "constructor": false}, {"identifier": "getBandReader", "parameters": "(final Band band)", "modifiers": "public", "return": "ModisBandReader", "signature": "ModisBandReader getBandReader(final Band band)", "full_signature": "public ModisBandReader getBandReader(final Band band)", "class_method_signature": "ModisFileReader.getBandReader(final Band band)", "testcase": false, "constructor": false}, {"identifier": "isEosGridType", "parameters": "(ModisGlobalAttributes globalAttribs)", "modifiers": "static", "return": "boolean", "signature": "boolean isEosGridType(ModisGlobalAttributes globalAttribs)", "full_signature": "static boolean isEosGridType(ModisGlobalAttributes globalAttribs)", "class_method_signature": "ModisFileReader.isEosGridType(ModisGlobalAttributes globalAttribs)", "testcase": false, "constructor": false}, {"identifier": "getNamedIntAttribute", "parameters": "(Variable variable, String name)", "modifiers": "private static", "return": "int[]", "signature": "int[] getNamedIntAttribute(Variable variable, String name)", "full_signature": "private static int[] getNamedIntAttribute(Variable variable, String name)", "class_method_signature": "ModisFileReader.getNamedIntAttribute(Variable variable, String name)", "testcase": false, "constructor": false}, {"identifier": "getNamedFloatAttribute", "parameters": "(NetCDFAttributes attributes, String name)", "modifiers": "private static", "return": "float[]", "signature": "float[] getNamedFloatAttribute(NetCDFAttributes attributes, String name)", "full_signature": "private static float[] getNamedFloatAttribute(NetCDFAttributes attributes, String name)", "class_method_signature": "ModisFileReader.getNamedFloatAttribute(NetCDFAttributes attributes, String name)", "testcase": false, "constructor": false}, {"identifier": "addBandsToProduct", "parameters": "(NetCDFVariables netCDFVariables, final String type, final Product product)", "modifiers": "private", "return": "void", "signature": "void addBandsToProduct(NetCDFVariables netCDFVariables, final String type, final Product product)", "full_signature": "private void addBandsToProduct(NetCDFVariables netCDFVariables, final String type, final Product product)", "class_method_signature": "ModisFileReader.addBandsToProduct(NetCDFVariables netCDFVariables, final String type, final Product product)", "testcase": false, "constructor": false}, {"identifier": "invert", "parameters": "(float[] scales)", "modifiers": "static", "return": "void", "signature": "void invert(float[] scales)", "full_signature": "static void invert(float[] scales)", "class_method_signature": "ModisFileReader.invert(float[] scales)", "testcase": false, "constructor": false}, {"identifier": "getTypeString", "parameters": "(String type, Product product)", "modifiers": "static", "return": "String", "signature": "String getTypeString(String type, Product product)", "full_signature": "static String getTypeString(String type, Product product)", "class_method_signature": "ModisFileReader.getTypeString(String type, Product product)", "testcase": false, "constructor": false}, {"identifier": "hasInvalidScaleAndOffset", "parameters": "(float[] scales, float[] offsets, int readerIdx)", "modifiers": "static", "return": "boolean", "signature": "boolean hasInvalidScaleAndOffset(float[] scales, float[] offsets, int readerIdx)", "full_signature": "static boolean hasInvalidScaleAndOffset(float[] scales, float[] offsets, int readerIdx)", "class_method_signature": "ModisFileReader.hasInvalidScaleAndOffset(float[] scales, float[] offsets, int readerIdx)", "testcase": false, "constructor": false}, {"identifier": "setValidRangeAndFillValue", "parameters": "(Variable variable, ModisBandReader reader, Band band)", "modifiers": "private static", "return": "void", "signature": "void setValidRangeAndFillValue(Variable variable, ModisBandReader reader, Band band)", "full_signature": "private static void setValidRangeAndFillValue(Variable variable, ModisBandReader reader, Band band)", "class_method_signature": "ModisFileReader.setValidRangeAndFillValue(Variable variable, ModisBandReader reader, Band band)", "testcase": false, "constructor": false}, {"identifier": "setBandDescription", "parameters": "(Variable variable, ModisBandDescription bandDesc, Band band)", "modifiers": "private static", "return": "void", "signature": "void setBandDescription(Variable variable, ModisBandDescription bandDesc, Band band)", "full_signature": "private static void setBandDescription(Variable variable, ModisBandDescription bandDesc, Band band)", "class_method_signature": "ModisFileReader.setBandDescription(Variable variable, ModisBandDescription bandDesc, Band band)", "testcase": false, "constructor": false}, {"identifier": "setBandPhysicalUnit", "parameters": "(Variable variable, ModisBandDescription bandDesc, Band band)", "modifiers": "private static", "return": "void", "signature": "void setBandPhysicalUnit(Variable variable, ModisBandDescription bandDesc, Band band)", "full_signature": "private static void setBandPhysicalUnit(Variable variable, ModisBandDescription bandDesc, Band band)", "class_method_signature": "ModisFileReader.setBandPhysicalUnit(Variable variable, ModisBandDescription bandDesc, Band band)", "testcase": false, "constructor": false}, {"identifier": "setBandSpectralInformation", "parameters": "(ModisBandDescription bandDesc, String bandNameExt, Band band)", "modifiers": "static", "return": "void", "signature": "void setBandSpectralInformation(ModisBandDescription bandDesc, String bandNameExt, Band band)", "full_signature": "static void setBandSpectralInformation(ModisBandDescription bandDesc, String bandNameExt, Band band)", "class_method_signature": "ModisFileReader.setBandSpectralInformation(ModisBandDescription bandDesc, String bandNameExt, Band band)", "testcase": false, "constructor": false}, {"identifier": "addModisTiePointGeoCoding", "parameters": "(Product product, NetCDFVariables netCDFVariables)", "modifiers": "private", "return": "void", "signature": "void addModisTiePointGeoCoding(Product product, NetCDFVariables netCDFVariables)", "full_signature": "private void addModisTiePointGeoCoding(Product product, NetCDFVariables netCDFVariables)", "class_method_signature": "ModisFileReader.addModisTiePointGeoCoding(Product product, NetCDFVariables netCDFVariables)", "testcase": false, "constructor": false}, {"identifier": "addTiePointGrids", "parameters": "(NetCDFVariables netCDFVariables, String productType, Product prod, ModisGlobalAttributes globalAttribs)", "modifiers": "private", "return": "void", "signature": "void addTiePointGrids(NetCDFVariables netCDFVariables, String productType, Product prod, ModisGlobalAttributes globalAttribs)", "full_signature": "private void addTiePointGrids(NetCDFVariables netCDFVariables, String productType, Product prod, ModisGlobalAttributes globalAttribs)", "class_method_signature": "ModisFileReader.addTiePointGrids(NetCDFVariables netCDFVariables, String productType, Product prod, ModisGlobalAttributes globalAttribs)", "testcase": false, "constructor": false}, {"identifier": "readNamedTiePointGrid", "parameters": "(Variable variable, NetCDFAttributes netCDFAttributes, String prodType, String name,\n                                               ModisGlobalAttributes globalAttribs)", "modifiers": "private", "return": "TiePointGrid", "signature": "TiePointGrid readNamedTiePointGrid(Variable variable, NetCDFAttributes netCDFAttributes, String prodType, String name,\n                                               ModisGlobalAttributes globalAttribs)", "full_signature": "private TiePointGrid readNamedTiePointGrid(Variable variable, NetCDFAttributes netCDFAttributes, String prodType, String name,\n                                               ModisGlobalAttributes globalAttribs)", "class_method_signature": "ModisFileReader.readNamedTiePointGrid(Variable variable, NetCDFAttributes netCDFAttributes, String prodType, String name,\n                                               ModisGlobalAttributes globalAttribs)", "testcase": false, "constructor": false}, {"identifier": "scaleArray", "parameters": "(int dataType, float[] buffer, float scale, float offset)", "modifiers": "private static", "return": "float[]", "signature": "float[] scaleArray(int dataType, float[] buffer, float scale, float offset)", "full_signature": "private static float[] scaleArray(int dataType, float[] buffer, float scale, float offset)", "class_method_signature": "ModisFileReader.scaleArray(int dataType, float[] buffer, float scale, float offset)", "testcase": false, "constructor": false}, {"identifier": "loadExternalQCFile", "parameters": "(Product product, ModisProductDescription prodDesc, NetCDFVariables netCDFVariables)", "modifiers": "private", "return": "String[]", "signature": "String[] loadExternalQCFile(Product product, ModisProductDescription prodDesc, NetCDFVariables netCDFVariables)", "full_signature": "private String[] loadExternalQCFile(Product product, ModisProductDescription prodDesc, NetCDFVariables netCDFVariables)", "class_method_signature": "ModisFileReader.loadExternalQCFile(Product product, ModisProductDescription prodDesc, NetCDFVariables netCDFVariables)", "testcase": false, "constructor": false}, {"identifier": "assembleQCFile", "parameters": "(Product product, ModisProductDescription desc)", "modifiers": "private static", "return": "FileContainer", "signature": "FileContainer assembleQCFile(Product product, ModisProductDescription desc)", "full_signature": "private static FileContainer assembleQCFile(Product product, ModisProductDescription desc)", "class_method_signature": "ModisFileReader.assembleQCFile(Product product, ModisProductDescription desc)", "testcase": false, "constructor": false}, {"identifier": "getQcFileNamePart", "parameters": "(File productFile, String qcProductType)", "modifiers": "private static", "return": "String", "signature": "String getQcFileNamePart(File productFile, String qcProductType)", "full_signature": "private static String getQcFileNamePart(File productFile, String qcProductType)", "class_method_signature": "ModisFileReader.getQcFileNamePart(File productFile, String qcProductType)", "testcase": false, "constructor": false}, {"identifier": "getQcFileType", "parameters": "(Product product, ModisProductDescription desc)", "modifiers": "private static", "return": "String", "signature": "String getQcFileType(Product product, ModisProductDescription desc)", "full_signature": "private static String getQcFileType(Product product, ModisProductDescription desc)", "class_method_signature": "ModisFileReader.getQcFileType(Product product, ModisProductDescription desc)", "testcase": false, "constructor": false}, {"identifier": "getBandNameExtensions", "parameters": "(final String bandNameAttribName, final String productType, NetCDFAttributes attributes, NetCDFVariables netCDFVariables)", "modifiers": "private", "return": "String", "signature": "String getBandNameExtensions(final String bandNameAttribName, final String productType, NetCDFAttributes attributes, NetCDFVariables netCDFVariables)", "full_signature": "private String getBandNameExtensions(final String bandNameAttribName, final String productType, NetCDFAttributes attributes, NetCDFVariables netCDFVariables)", "class_method_signature": "ModisFileReader.getBandNameExtensions(final String bandNameAttribName, final String productType, NetCDFAttributes attributes, NetCDFVariables netCDFVariables)", "testcase": false, "constructor": false}, {"identifier": "createRangeFromArray", "parameters": "(int[] rangeArray)", "modifiers": "static", "return": "Range", "signature": "Range createRangeFromArray(int[] rangeArray)", "full_signature": "static Range createRangeFromArray(int[] rangeArray)", "class_method_signature": "ModisFileReader.createRangeFromArray(int[] rangeArray)", "testcase": false, "constructor": false}, {"identifier": "addMapGeocoding", "parameters": "(final Product product, final ModisGlobalAttributes globalAttribs)", "modifiers": "private", "return": "void", "signature": "void addMapGeocoding(final Product product, final ModisGlobalAttributes globalAttribs)", "full_signature": "private void addMapGeocoding(final Product product, final ModisGlobalAttributes globalAttribs)", "class_method_signature": "ModisFileReader.addMapGeocoding(final Product product, final ModisGlobalAttributes globalAttribs)", "testcase": false, "constructor": false}, {"identifier": "isImappFormat", "parameters": "(NetCDFVariables netCDFQCVariables)", "modifiers": "private", "return": "boolean", "signature": "boolean isImappFormat(NetCDFVariables netCDFQCVariables)", "full_signature": "private boolean isImappFormat(NetCDFVariables netCDFQCVariables)", "class_method_signature": "ModisFileReader.isImappFormat(NetCDFVariables netCDFQCVariables)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ModisFileReader.close()", "testcase": false, "constructor": false}], "file": "s3tbx-modis-reader/src/main/java/org/esa/s3tbx/dataio/modis/ModisFileReader.java"}, "focal_method": {"identifier": "hasInvalidScaleAndOffset", "parameters": "(float[] scales, float[] offsets, int readerIdx)", "modifiers": "static", "return": "boolean", "body": "static boolean hasInvalidScaleAndOffset(float[] scales, float[] offsets, int readerIdx) {\n        return scales.length <= readerIdx || offsets.length <= readerIdx;\n    }", "signature": "boolean hasInvalidScaleAndOffset(float[] scales, float[] offsets, int readerIdx)", "full_signature": "static boolean hasInvalidScaleAndOffset(float[] scales, float[] offsets, int readerIdx)", "class_method_signature": "ModisFileReader.hasInvalidScaleAndOffset(float[] scales, float[] offsets, int readerIdx)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}