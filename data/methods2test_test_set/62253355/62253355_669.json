{"test_class": {"identifier": "MobiOntologyFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MobiOntologyFactory factory;", "modifier": "private", "type": "MobiOntologyFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private ValueFactory vf = SimpleValueFactory.getInstance();", "modifier": "private", "type": "ValueFactory", "declarator": "vf = SimpleValueFactory.getInstance()", "var_name": "vf"}, {"original_string": "private ModelFactory mf = LinkedHashModelFactory.getInstance();", "modifier": "private", "type": "ModelFactory", "declarator": "mf = LinkedHashModelFactory.getInstance()", "var_name": "mf"}, {"original_string": "private com.mobi.rdf.api.IRI matIRI = vf.createIRI(\"https://test.com/ontology\");", "modifier": "private", "type": "com.mobi.rdf.api.IRI", "declarator": "matIRI = vf.createIRI(\"https://test.com/ontology\")", "var_name": "matIRI"}, {"original_string": "private IRI owlIRI = IRI.create(\"https://test.com/ontology\");", "modifier": "private", "type": "IRI", "declarator": "owlIRI = IRI.create(\"https://test.com/ontology\")", "var_name": "owlIRI"}, {"original_string": "private IRI owlProtocolIRI = IRI.create(MobiOntologyIRIMapper.protocol + \"//test.com/ontology\");", "modifier": "private", "type": "IRI", "declarator": "owlProtocolIRI = IRI.create(MobiOntologyIRIMapper.protocol + \"//test.com/ontology\")", "var_name": "owlProtocolIRI"}, {"original_string": "private OWLOntologyDocumentSource source = new IRIDocumentSource(owlIRI);", "modifier": "private", "type": "OWLOntologyDocumentSource", "declarator": "source = new IRIDocumentSource(owlIRI)", "var_name": "source"}, {"original_string": "private OWLOntologyDocumentSource protocolSource = new IRIDocumentSource(owlProtocolIRI);", "modifier": "private", "type": "OWLOntologyDocumentSource", "declarator": "protocolSource = new IRIDocumentSource(owlProtocolIRI)", "var_name": "protocolSource"}, {"original_string": "@Mock\n    private OntologyManager ontologyManager;", "modifier": "@Mock\n    private", "type": "OntologyManager", "declarator": "ontologyManager", "var_name": "ontologyManager"}, {"original_string": "@Mock\n    private OWLOntologyManager owlOntologyManager;", "modifier": "@Mock\n    private", "type": "OWLOntologyManager", "declarator": "owlOntologyManager", "var_name": "owlOntologyManager"}, {"original_string": "@Mock\n    private OWLOntologyFactory ontologyFactory;", "modifier": "@Mock\n    private", "type": "OWLOntologyFactory", "declarator": "ontologyFactory", "var_name": "ontologyFactory"}, {"original_string": "@Mock\n    private Ontology ontology;", "modifier": "@Mock\n    private", "type": "Ontology", "declarator": "ontology", "var_name": "ontology"}, {"original_string": "@Mock\n    private OWLOntology owlOntology;", "modifier": "@Mock\n    private", "type": "OWLOntology", "declarator": "owlOntology", "var_name": "owlOntology"}, {"original_string": "@Mock\n    private OWLOntologyFactory.OWLOntologyCreationHandler handler;", "modifier": "@Mock\n    private", "type": "OWLOntologyFactory.OWLOntologyCreationHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "@Mock\n    private OWLOntologyLoaderConfiguration configuration;", "modifier": "@Mock\n    private", "type": "OWLOntologyLoaderConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "@Mock\n    private OWLImportsDeclaration importsDeclaration;", "modifier": "@Mock\n    private", "type": "OWLImportsDeclaration", "declarator": "importsDeclaration", "var_name": "importsDeclaration"}, {"original_string": "@Mock\n    private OntologyId ontologyId;", "modifier": "@Mock\n    private", "type": "OntologyId", "declarator": "ontologyId", "var_name": "ontologyId"}, {"original_string": "@Mock\n    private SesameTransformer sesameTransformer;", "modifier": "@Mock\n    private", "type": "SesameTransformer", "declarator": "sesameTransformer", "var_name": "sesameTransformer"}, {"original_string": "@Mock\n    private OntologyConfigurator ontologyConfigurator;", "modifier": "@Mock\n    private", "type": "OntologyConfigurator", "declarator": "ontologyConfigurator", "var_name": "ontologyConfigurator"}, {"original_string": "@Mock\n    private OWLOntologyWriterConfiguration owlOntologyWriterConfiguration;", "modifier": "@Mock\n    private", "type": "OWLOntologyWriterConfiguration", "declarator": "owlOntologyWriterConfiguration", "var_name": "owlOntologyWriterConfiguration"}, {"original_string": "@Mock\n    private OWLOntologyID owlOntologyID;", "modifier": "@Mock\n    private", "type": "OWLOntologyID", "declarator": "owlOntologyID", "var_name": "owlOntologyID"}], "file": "com.mobi.ontology.impl.owlapi/src/test/java/com/mobi/ontology/impl/owlapi/MobiOntologyFactoryTest.java"}, "test_case": {"identifier": "loadOWLOntologyTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void loadOWLOntologyTest() throws Exception {\n        assertEquals(owlOntology, factory.loadOWLOntology(owlOntologyManager, protocolSource, handler, configuration));\n        verify(ontologyManager).getOntologyModel(matIRI);\n        verify(handler).setOntologyFormat(any(OWLOntology.class), any(OWLDocumentFormat.class));\n        verify(owlOntologyManager).removeOntology(any(OWLOntology.class));\n        verify(ontologyFactory, times(2)).createOWLOntology(eq(owlOntologyManager), any(OWLOntologyID.class), eq(owlProtocolIRI), eq(handler));\n    }", "signature": "void loadOWLOntologyTest()", "full_signature": "@Test public void loadOWLOntologyTest()", "class_method_signature": "MobiOntologyFactoryTest.loadOWLOntologyTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "loadOWLOntology", "getOntologyModel", "verify", "setOntologyFormat", "verify", "any", "any", "removeOntology", "verify", "any", "createOWLOntology", "verify", "times", "eq", "any", "eq", "eq"]}, "focal_class": {"identifier": "MobiOntologyFactory", "superclass": "", "interfaces": "implements OWLOntologyFactory", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(MobiOntologyFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(MobiOntologyFactory.class)", "var_name": "LOG"}, {"original_string": "private OntologyManager ontologyManager;", "modifier": "private", "type": "OntologyManager", "declarator": "ontologyManager", "var_name": "ontologyManager"}, {"original_string": "private OWLOntologyFactory ontologyFactory;", "modifier": "private", "type": "OWLOntologyFactory", "declarator": "ontologyFactory", "var_name": "ontologyFactory"}, {"original_string": "private SesameTransformer sesameTransformer;", "modifier": "private", "type": "SesameTransformer", "declarator": "sesameTransformer", "var_name": "sesameTransformer"}], "methods": [{"identifier": "MobiOntologyFactory", "parameters": "(OntologyManager ontologyManager, OWLOntologyFactory factory,\n                               SesameTransformer sesameTransformer)", "modifiers": "public", "return": "", "signature": " MobiOntologyFactory(OntologyManager ontologyManager, OWLOntologyFactory factory,\n                               SesameTransformer sesameTransformer)", "full_signature": "public  MobiOntologyFactory(OntologyManager ontologyManager, OWLOntologyFactory factory,\n                               SesameTransformer sesameTransformer)", "class_method_signature": "MobiOntologyFactory.MobiOntologyFactory(OntologyManager ontologyManager, OWLOntologyFactory factory,\n                               SesameTransformer sesameTransformer)", "testcase": false, "constructor": true}, {"identifier": "canCreateFromDocumentIRI", "parameters": "(IRI documentIRI)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canCreateFromDocumentIRI(IRI documentIRI)", "full_signature": "@Override public boolean canCreateFromDocumentIRI(IRI documentIRI)", "class_method_signature": "MobiOntologyFactory.canCreateFromDocumentIRI(IRI documentIRI)", "testcase": false, "constructor": false}, {"identifier": "canAttemptLoading", "parameters": "(OWLOntologyDocumentSource source)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canAttemptLoading(OWLOntologyDocumentSource source)", "full_signature": "@Override public boolean canAttemptLoading(OWLOntologyDocumentSource source)", "class_method_signature": "MobiOntologyFactory.canAttemptLoading(OWLOntologyDocumentSource source)", "testcase": false, "constructor": false}, {"identifier": "createOWLOntology", "parameters": "(OWLOntologyManager manager, OWLOntologyID ontologyID, IRI documentIRI,\n                                         OWLOntologyCreationHandler handler)", "modifiers": "@Override public", "return": "OWLOntology", "signature": "OWLOntology createOWLOntology(OWLOntologyManager manager, OWLOntologyID ontologyID, IRI documentIRI,\n                                         OWLOntologyCreationHandler handler)", "full_signature": "@Override public OWLOntology createOWLOntology(OWLOntologyManager manager, OWLOntologyID ontologyID, IRI documentIRI,\n                                         OWLOntologyCreationHandler handler)", "class_method_signature": "MobiOntologyFactory.createOWLOntology(OWLOntologyManager manager, OWLOntologyID ontologyID, IRI documentIRI,\n                                         OWLOntologyCreationHandler handler)", "testcase": false, "constructor": false}, {"identifier": "loadOWLOntology", "parameters": "(OWLOntologyManager manager, OWLOntologyDocumentSource source,\n                                       OWLOntologyCreationHandler handler, OWLOntologyLoaderConfiguration config)", "modifiers": "@Override public", "return": "OWLOntology", "signature": "OWLOntology loadOWLOntology(OWLOntologyManager manager, OWLOntologyDocumentSource source,\n                                       OWLOntologyCreationHandler handler, OWLOntologyLoaderConfiguration config)", "full_signature": "@Override public OWLOntology loadOWLOntology(OWLOntologyManager manager, OWLOntologyDocumentSource source,\n                                       OWLOntologyCreationHandler handler, OWLOntologyLoaderConfiguration config)", "class_method_signature": "MobiOntologyFactory.loadOWLOntology(OWLOntologyManager manager, OWLOntologyDocumentSource source,\n                                       OWLOntologyCreationHandler handler, OWLOntologyLoaderConfiguration config)", "testcase": false, "constructor": false}], "file": "com.mobi.ontology.impl.owlapi/src/main/java/com/mobi/ontology/impl/owlapi/MobiOntologyFactory.java"}, "focal_method": {"identifier": "loadOWLOntology", "parameters": "(OWLOntologyManager manager, OWLOntologyDocumentSource source,\n                                       OWLOntologyCreationHandler handler, OWLOntologyLoaderConfiguration config)", "modifiers": "@Override public", "return": "OWLOntology", "body": "@Override\n    public OWLOntology loadOWLOntology(OWLOntologyManager manager, OWLOntologyDocumentSource source,\n                                       OWLOntologyCreationHandler handler, OWLOntologyLoaderConfiguration config)\n            throws OWLOntologyCreationException {\n        LOG.trace(\"Enter loadOWLOntology()\");\n        long start = System.currentTimeMillis();\n        OWLOntology existingOntology = null;\n        IRI documentIRI = source.getDocumentIRI();\n        if (manager.contains(documentIRI)) {\n            existingOntology = manager.getOntology(documentIRI);\n        }\n        OWLOntologyID ontologyID = new OWLOntologyID();\n        OWLOntology ont = createOWLOntology(manager, ontologyID, documentIRI, handler);\n        if (existingOntology == null && !ont.isEmpty()) {\n            // Junk from a previous parse. We should clear the ont\n            LOG.trace(\"Clearing extraneous ontology\");\n            manager.removeOntology(ont);\n            ont = createOWLOntology(manager, ontologyID, documentIRI, handler);\n        }\n        IRI recordId = IRI.create(documentIRI.getIRIString().replace(MobiOntologyIRIMapper.protocol,\n                MobiOntologyIRIMapper.standardProtocol));\n        Model ontologyModel = ontologyManager.getOntologyModel(SimpleOntologyValues.mobiIRI(recordId));\n        RioParserImpl parser = new RioParserImpl(new RioRDFXMLDocumentFormatFactory());\n        org.eclipse.rdf4j.model.Model sesameModel = sesameTransformer.sesameModel(ontologyModel);\n        OWLDocumentFormat format = parser.parse(new RioMemoryTripleSource(sesameModel), ont, config);\n        handler.setOntologyFormat(ont, format);\n        LOG.debug(\"Loaded imported Ontology: {}\", ont.getOntologyID().toString());\n        LOG.trace(\"Exit loadOWLOntology() {} ms\", System.currentTimeMillis() - start);\n        return ont;\n    }", "signature": "OWLOntology loadOWLOntology(OWLOntologyManager manager, OWLOntologyDocumentSource source,\n                                       OWLOntologyCreationHandler handler, OWLOntologyLoaderConfiguration config)", "full_signature": "@Override public OWLOntology loadOWLOntology(OWLOntologyManager manager, OWLOntologyDocumentSource source,\n                                       OWLOntologyCreationHandler handler, OWLOntologyLoaderConfiguration config)", "class_method_signature": "MobiOntologyFactory.loadOWLOntology(OWLOntologyManager manager, OWLOntologyDocumentSource source,\n                                       OWLOntologyCreationHandler handler, OWLOntologyLoaderConfiguration config)", "testcase": false, "constructor": false, "invocations": ["trace", "currentTimeMillis", "getDocumentIRI", "contains", "getOntology", "createOWLOntology", "isEmpty", "trace", "removeOntology", "createOWLOntology", "create", "replace", "getIRIString", "getOntologyModel", "mobiIRI", "sesameModel", "parse", "setOntologyFormat", "debug", "toString", "getOntologyID", "trace", "currentTimeMillis"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}