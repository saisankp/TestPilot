{"test_class": {"identifier": "BasePrintWorkerTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib/src/test/java/com/nhl/dflib/print/BasePrintWorkerTest.java"}, "test_case": {"identifier": "testTruncate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTruncate() {\n        assertEquals(\"..\", BasePrintWorker.truncate(\"abc\", 1));\n        assertEquals(\"..\", BasePrintWorker.truncate(\"abc\", 2));\n        assertEquals(\"abc\", BasePrintWorker.truncate(\"abc\", 3));\n        assertEquals(\"a..\", BasePrintWorker.truncate(\"abcd\", 3));\n        assertEquals(\"abc\", BasePrintWorker.truncate(\"abc\", 4));\n        assertEquals(\"abcd\", BasePrintWorker.truncate(\"abcd\", 4));\n        assertEquals(\"a..e\", BasePrintWorker.truncate(\"abcde\", 4));\n        assertEquals(\"a..f\", BasePrintWorker.truncate(\"abcdef\", 4));\n        assertEquals(\"ab..g\", BasePrintWorker.truncate(\"abcdefg\", 5));\n        assertEquals(\"ab..h\", BasePrintWorker.truncate(\"abcdefgh\", 5));\n    }", "signature": "void testTruncate()", "full_signature": "@Test public void testTruncate()", "class_method_signature": "BasePrintWorkerTest.testTruncate()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "truncate", "assertEquals", "truncate", "assertEquals", "truncate", "assertEquals", "truncate", "assertEquals", "truncate", "assertEquals", "truncate", "assertEquals", "truncate", "assertEquals", "truncate", "assertEquals", "truncate", "assertEquals", "truncate"]}, "focal_class": {"identifier": "BasePrintWorker", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected StringBuilder out;", "modifier": "protected", "type": "StringBuilder", "declarator": "out", "var_name": "out"}, {"original_string": "protected int maxDisplayColumnWidth;", "modifier": "protected", "type": "int", "declarator": "maxDisplayColumnWidth", "var_name": "maxDisplayColumnWidth"}, {"original_string": "protected int maxDisplayRows;", "modifier": "protected", "type": "int", "declarator": "maxDisplayRows", "var_name": "maxDisplayRows"}], "methods": [{"identifier": "BasePrintWorker", "parameters": "(StringBuilder out, int maxDisplayRows, int maxDisplayColumnWidth)", "modifiers": "public", "return": "", "signature": " BasePrintWorker(StringBuilder out, int maxDisplayRows, int maxDisplayColumnWidth)", "full_signature": "public  BasePrintWorker(StringBuilder out, int maxDisplayRows, int maxDisplayColumnWidth)", "class_method_signature": "BasePrintWorker.BasePrintWorker(StringBuilder out, int maxDisplayRows, int maxDisplayColumnWidth)", "testcase": false, "constructor": true}, {"identifier": "truncate", "parameters": "(String string, int width)", "modifiers": "protected static", "return": "String", "signature": "String truncate(String string, int width)", "full_signature": "protected static String truncate(String string, int width)", "class_method_signature": "BasePrintWorker.truncate(String string, int width)", "testcase": false, "constructor": false}, {"identifier": "columnFormat", "parameters": "(int width, Class<?> valueType)", "modifiers": "protected", "return": "String", "signature": "String columnFormat(int width, Class<?> valueType)", "full_signature": "protected String columnFormat(int width, Class<?> valueType)", "class_method_signature": "BasePrintWorker.columnFormat(int width, Class<?> valueType)", "testcase": false, "constructor": false}, {"identifier": "appendFixedWidth", "parameters": "(String value, int width, String columnFormat)", "modifiers": "protected", "return": "StringBuilder", "signature": "StringBuilder appendFixedWidth(String value, int width, String columnFormat)", "full_signature": "protected StringBuilder appendFixedWidth(String value, int width, String columnFormat)", "class_method_signature": "BasePrintWorker.appendFixedWidth(String value, int width, String columnFormat)", "testcase": false, "constructor": false}, {"identifier": "appendNewLine", "parameters": "()", "modifiers": "protected", "return": "StringBuilder", "signature": "StringBuilder appendNewLine()", "full_signature": "protected StringBuilder appendNewLine()", "class_method_signature": "BasePrintWorker.appendNewLine()", "testcase": false, "constructor": false}, {"identifier": "appendTruncate", "parameters": "(String value)", "modifiers": "protected", "return": "StringBuilder", "signature": "StringBuilder appendTruncate(String value)", "full_signature": "protected StringBuilder appendTruncate(String value)", "class_method_signature": "BasePrintWorker.appendTruncate(String value)", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/print/BasePrintWorker.java"}, "focal_method": {"identifier": "truncate", "parameters": "(String string, int width)", "modifiers": "protected static", "return": "String", "body": "protected static String truncate(String string, int width) {\n\n        int len = string.length();\n        if (len <= width) {\n            return string;\n        }\n\n        if (width <= 2) {\n            return \"..\";\n        }\n\n        int offset = width / 2 - 1;\n        int startOffset = offset + width % 2;\n        int endOffset = len - offset;\n\n        return string.substring(0, startOffset) + \"..\" + string.substring(endOffset);\n    }", "signature": "String truncate(String string, int width)", "full_signature": "protected static String truncate(String string, int width)", "class_method_signature": "BasePrintWorker.truncate(String string, int width)", "testcase": false, "constructor": false, "invocations": ["length", "substring", "substring"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}