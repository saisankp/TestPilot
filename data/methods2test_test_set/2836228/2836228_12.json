{"test_class": {"identifier": "EntityUtilTest", "superclass": "extends AbstractTestBase", "interfaces": "", "fields": [{"original_string": "private static TimeZone tz = TimeZone.getTimeZone(\"UTC\");", "modifier": "private static", "type": "TimeZone", "declarator": "tz = TimeZone.getTimeZone(\"UTC\")", "var_name": "tz"}], "file": "common/src/test/java/org/apache/ivory/entity/EntityUtilTest.java"}, "test_case": {"identifier": "testGetNextStartTime3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetNextStartTime3() throws Exception {\n        Date now = getDate(\"2010-05-02 04:45 UTC\");\n        Date start = getDate(\"1980-02-01 03:00 UTC\");\n        Date newStart = getDate(\"2010-05-07 03:00 UTC\");\n\n        Frequency frequency = new Frequency(\"days(7)\");\n        Assert.assertEquals(newStart, EntityUtil.getNextStartTime(start,\n                frequency, tz, now));\n    }", "signature": "void testGetNextStartTime3()", "full_signature": "@Test public void testGetNextStartTime3()", "class_method_signature": "EntityUtilTest.testGetNextStartTime3()", "testcase": true, "constructor": false, "invocations": ["getDate", "getDate", "getDate", "assertEquals", "getNextStartTime"]}, "focal_class": {"identifier": "EntityUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long MINUTE_IN_MS = 60000L;", "modifier": "private static final", "type": "long", "declarator": "MINUTE_IN_MS = 60000L", "var_name": "MINUTE_IN_MS"}, {"original_string": "private static final long HOUR_IN_MS = 3600000L;", "modifier": "private static final", "type": "long", "declarator": "HOUR_IN_MS = 3600000L", "var_name": "HOUR_IN_MS"}, {"original_string": "private static final long DAY_IN_MS = 86400000L;", "modifier": "private static final", "type": "long", "declarator": "DAY_IN_MS = 86400000L", "var_name": "DAY_IN_MS"}, {"original_string": "private static final long MONTH_IN_MS = 2592000000L;", "modifier": "private static final", "type": "long", "declarator": "MONTH_IN_MS = 2592000000L", "var_name": "MONTH_IN_MS"}], "methods": [{"identifier": "getEntity", "parameters": "(EntityType type, String entityName)", "modifiers": "public static", "return": "T", "signature": "T getEntity(EntityType type, String entityName)", "full_signature": "public static T getEntity(EntityType type, String entityName)", "class_method_signature": "EntityUtil.getEntity(EntityType type, String entityName)", "testcase": false, "constructor": false}, {"identifier": "getEntity", "parameters": "(String type, String entityName)", "modifiers": "public static", "return": "T", "signature": "T getEntity(String type, String entityName)", "full_signature": "public static T getEntity(String type, String entityName)", "class_method_signature": "EntityUtil.getEntity(String type, String entityName)", "testcase": false, "constructor": false}, {"identifier": "getTimeZone", "parameters": "(String tzId)", "modifiers": "public static", "return": "TimeZone", "signature": "TimeZone getTimeZone(String tzId)", "full_signature": "public static TimeZone getTimeZone(String tzId)", "class_method_signature": "EntityUtil.getTimeZone(String tzId)", "testcase": false, "constructor": false}, {"identifier": "getEndTime", "parameters": "(Entity entity, String cluster)", "modifiers": "public static", "return": "Date", "signature": "Date getEndTime(Entity entity, String cluster)", "full_signature": "public static Date getEndTime(Entity entity, String cluster)", "class_method_signature": "EntityUtil.getEndTime(Entity entity, String cluster)", "testcase": false, "constructor": false}, {"identifier": "parseDateUTC", "parameters": "(String dateStr)", "modifiers": "public static", "return": "Date", "signature": "Date parseDateUTC(String dateStr)", "full_signature": "public static Date parseDateUTC(String dateStr)", "class_method_signature": "EntityUtil.parseDateUTC(String dateStr)", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "(Entity entity, String cluster)", "modifiers": "public static", "return": "Date", "signature": "Date getStartTime(Entity entity, String cluster)", "full_signature": "public static Date getStartTime(Entity entity, String cluster)", "class_method_signature": "EntityUtil.getStartTime(Entity entity, String cluster)", "testcase": false, "constructor": false}, {"identifier": "getEndTime", "parameters": "(Process process, String cluster)", "modifiers": "public static", "return": "Date", "signature": "Date getEndTime(Process process, String cluster)", "full_signature": "public static Date getEndTime(Process process, String cluster)", "class_method_signature": "EntityUtil.getEndTime(Process process, String cluster)", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "(Process process, String cluster)", "modifiers": "public static", "return": "Date", "signature": "Date getStartTime(Process process, String cluster)", "full_signature": "public static Date getStartTime(Process process, String cluster)", "class_method_signature": "EntityUtil.getStartTime(Process process, String cluster)", "testcase": false, "constructor": false}, {"identifier": "getEndTime", "parameters": "(Feed feed, String cluster)", "modifiers": "public static", "return": "Date", "signature": "Date getEndTime(Feed feed, String cluster)", "full_signature": "public static Date getEndTime(Feed feed, String cluster)", "class_method_signature": "EntityUtil.getEndTime(Feed feed, String cluster)", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "(Feed feed, String cluster)", "modifiers": "public static", "return": "Date", "signature": "Date getStartTime(Feed feed, String cluster)", "full_signature": "public static Date getStartTime(Feed feed, String cluster)", "class_method_signature": "EntityUtil.getStartTime(Feed feed, String cluster)", "testcase": false, "constructor": false}, {"identifier": "getParallel", "parameters": "(Entity entity)", "modifiers": "public static", "return": "int", "signature": "int getParallel(Entity entity)", "full_signature": "public static int getParallel(Entity entity)", "class_method_signature": "EntityUtil.getParallel(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "setStartDate", "parameters": "(Entity entity, String cluster, Date startDate)", "modifiers": "public static", "return": "void", "signature": "void setStartDate(Entity entity, String cluster, Date startDate)", "full_signature": "public static void setStartDate(Entity entity, String cluster, Date startDate)", "class_method_signature": "EntityUtil.setStartDate(Entity entity, String cluster, Date startDate)", "testcase": false, "constructor": false}, {"identifier": "setEndTime", "parameters": "(Entity entity, String cluster, Date endDate)", "modifiers": "public static", "return": "void", "signature": "void setEndTime(Entity entity, String cluster, Date endDate)", "full_signature": "public static void setEndTime(Entity entity, String cluster, Date endDate)", "class_method_signature": "EntityUtil.setEndTime(Entity entity, String cluster, Date endDate)", "testcase": false, "constructor": false}, {"identifier": "setParallel", "parameters": "(Entity entity, int parallel)", "modifiers": "public static", "return": "void", "signature": "void setParallel(Entity entity, int parallel)", "full_signature": "public static void setParallel(Entity entity, int parallel)", "class_method_signature": "EntityUtil.setParallel(Entity entity, int parallel)", "testcase": false, "constructor": false}, {"identifier": "getParallel", "parameters": "(Process process)", "modifiers": "public static", "return": "int", "signature": "int getParallel(Process process)", "full_signature": "public static int getParallel(Process process)", "class_method_signature": "EntityUtil.getParallel(Process process)", "testcase": false, "constructor": false}, {"identifier": "setStartDate", "parameters": "(Process process, String cluster, Date startDate)", "modifiers": "public static", "return": "void", "signature": "void setStartDate(Process process, String cluster, Date startDate)", "full_signature": "public static void setStartDate(Process process, String cluster, Date startDate)", "class_method_signature": "EntityUtil.setStartDate(Process process, String cluster, Date startDate)", "testcase": false, "constructor": false}, {"identifier": "setParallel", "parameters": "(Process process, int parallel)", "modifiers": "public static", "return": "void", "signature": "void setParallel(Process process, int parallel)", "full_signature": "public static void setParallel(Process process, int parallel)", "class_method_signature": "EntityUtil.setParallel(Process process, int parallel)", "testcase": false, "constructor": false}, {"identifier": "setEndTime", "parameters": "(Process process, String cluster, Date endDate)", "modifiers": "public static", "return": "void", "signature": "void setEndTime(Process process, String cluster, Date endDate)", "full_signature": "public static void setEndTime(Process process, String cluster, Date endDate)", "class_method_signature": "EntityUtil.setEndTime(Process process, String cluster, Date endDate)", "testcase": false, "constructor": false}, {"identifier": "getParallel", "parameters": "(Feed feed)", "modifiers": "public static", "return": "int", "signature": "int getParallel(Feed feed)", "full_signature": "public static int getParallel(Feed feed)", "class_method_signature": "EntityUtil.getParallel(Feed feed)", "testcase": false, "constructor": false}, {"identifier": "setStartDate", "parameters": "(Feed feed, String cluster, Date startDate)", "modifiers": "public static", "return": "void", "signature": "void setStartDate(Feed feed, String cluster, Date startDate)", "full_signature": "public static void setStartDate(Feed feed, String cluster, Date startDate)", "class_method_signature": "EntityUtil.setStartDate(Feed feed, String cluster, Date startDate)", "testcase": false, "constructor": false}, {"identifier": "setEndTime", "parameters": "(Feed feed, String cluster, Date endDate)", "modifiers": "public static", "return": "void", "signature": "void setEndTime(Feed feed, String cluster, Date endDate)", "full_signature": "public static void setEndTime(Feed feed, String cluster, Date endDate)", "class_method_signature": "EntityUtil.setEndTime(Feed feed, String cluster, Date endDate)", "testcase": false, "constructor": false}, {"identifier": "setParallel", "parameters": "(Feed feed, int parallel)", "modifiers": "public static", "return": "void", "signature": "void setParallel(Feed feed, int parallel)", "full_signature": "public static void setParallel(Feed feed, int parallel)", "class_method_signature": "EntityUtil.setParallel(Feed feed, int parallel)", "testcase": false, "constructor": false}, {"identifier": "getFrequency", "parameters": "(Entity entity)", "modifiers": "public static", "return": "Frequency", "signature": "Frequency getFrequency(Entity entity)", "full_signature": "public static Frequency getFrequency(Entity entity)", "class_method_signature": "EntityUtil.getFrequency(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getFrequency", "parameters": "(Process process)", "modifiers": "public static", "return": "Frequency", "signature": "Frequency getFrequency(Process process)", "full_signature": "public static Frequency getFrequency(Process process)", "class_method_signature": "EntityUtil.getFrequency(Process process)", "testcase": false, "constructor": false}, {"identifier": "getFrequency", "parameters": "(Feed feed)", "modifiers": "public static", "return": "Frequency", "signature": "Frequency getFrequency(Feed feed)", "full_signature": "public static Frequency getFrequency(Feed feed)", "class_method_signature": "EntityUtil.getFrequency(Feed feed)", "testcase": false, "constructor": false}, {"identifier": "getTimeZone", "parameters": "(Entity entity)", "modifiers": "public static", "return": "TimeZone", "signature": "TimeZone getTimeZone(Entity entity)", "full_signature": "public static TimeZone getTimeZone(Entity entity)", "class_method_signature": "EntityUtil.getTimeZone(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getTimeZone", "parameters": "(Process process)", "modifiers": "public static", "return": "TimeZone", "signature": "TimeZone getTimeZone(Process process)", "full_signature": "public static TimeZone getTimeZone(Process process)", "class_method_signature": "EntityUtil.getTimeZone(Process process)", "testcase": false, "constructor": false}, {"identifier": "getTimeZone", "parameters": "(Feed feed)", "modifiers": "public static", "return": "TimeZone", "signature": "TimeZone getTimeZone(Feed feed)", "full_signature": "public static TimeZone getTimeZone(Feed feed)", "class_method_signature": "EntityUtil.getTimeZone(Feed feed)", "testcase": false, "constructor": false}, {"identifier": "getNextStartTime", "parameters": "(Date startTime, Frequency frequency, TimeZone timezone, Date now)", "modifiers": "public static", "return": "Date", "signature": "Date getNextStartTime(Date startTime, Frequency frequency, TimeZone timezone, Date now)", "full_signature": "public static Date getNextStartTime(Date startTime, Frequency frequency, TimeZone timezone, Date now)", "class_method_signature": "EntityUtil.getNextStartTime(Date startTime, Frequency frequency, TimeZone timezone, Date now)", "testcase": false, "constructor": false}, {"identifier": "getInstanceSequence", "parameters": "(Date startTime, Frequency frequency, TimeZone tz, Date instanceTime)", "modifiers": "public static", "return": "int", "signature": "int getInstanceSequence(Date startTime, Frequency frequency, TimeZone tz, Date instanceTime)", "full_signature": "public static int getInstanceSequence(Date startTime, Frequency frequency, TimeZone tz, Date instanceTime)", "class_method_signature": "EntityUtil.getInstanceSequence(Date startTime, Frequency frequency, TimeZone tz, Date instanceTime)", "testcase": false, "constructor": false}, {"identifier": "md5", "parameters": "(Entity entity)", "modifiers": "public static", "return": "String", "signature": "String md5(Entity entity)", "full_signature": "public static String md5(Entity entity)", "class_method_signature": "EntityUtil.md5(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Entity lhs, Entity rhs)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(Entity lhs, Entity rhs)", "full_signature": "public static boolean equals(Entity lhs, Entity rhs)", "class_method_signature": "EntityUtil.equals(Entity lhs, Entity rhs)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Entity lhs, Entity rhs, String[] filterProps)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(Entity lhs, Entity rhs, String[] filterProps)", "full_signature": "public static boolean equals(Entity lhs, Entity rhs, String[] filterProps)", "class_method_signature": "EntityUtil.equals(Entity lhs, Entity rhs, String[] filterProps)", "testcase": false, "constructor": false}, {"identifier": "stringOf", "parameters": "(Entity entity)", "modifiers": "public static", "return": "String", "signature": "String stringOf(Entity entity)", "full_signature": "public static String stringOf(Entity entity)", "class_method_signature": "EntityUtil.stringOf(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "stringOf", "parameters": "(Entity entity, String[] filterProps)", "modifiers": "private static", "return": "String", "signature": "String stringOf(Entity entity, String[] filterProps)", "full_signature": "private static String stringOf(Entity entity, String[] filterProps)", "class_method_signature": "EntityUtil.stringOf(Entity entity, String[] filterProps)", "testcase": false, "constructor": false}, {"identifier": "mapToProperties", "parameters": "(Object obj, String name, Map<String, String> propMap, String[] filterProps)", "modifiers": "@SuppressWarnings(\"rawtypes\") private static", "return": "void", "signature": "void mapToProperties(Object obj, String name, Map<String, String> propMap, String[] filterProps)", "full_signature": "@SuppressWarnings(\"rawtypes\") private static void mapToProperties(Object obj, String name, Map<String, String> propMap, String[] filterProps)", "class_method_signature": "EntityUtil.mapToProperties(Object obj, String name, Map<String, String> propMap, String[] filterProps)", "testcase": false, "constructor": false}, {"identifier": "getStagingPath", "parameters": "(Entity entity)", "modifiers": "public static", "return": "String", "signature": "String getStagingPath(Entity entity)", "full_signature": "public static String getStagingPath(Entity entity)", "class_method_signature": "EntityUtil.getStagingPath(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getWorkflowName", "parameters": "(Tag tag, List<String> suffixes,\n\t\t\tEntity entity)", "modifiers": "public static", "return": "WorkflowName", "signature": "WorkflowName getWorkflowName(Tag tag, List<String> suffixes,\n\t\t\tEntity entity)", "full_signature": "public static WorkflowName getWorkflowName(Tag tag, List<String> suffixes,\n\t\t\tEntity entity)", "class_method_signature": "EntityUtil.getWorkflowName(Tag tag, List<String> suffixes,\n\t\t\tEntity entity)", "testcase": false, "constructor": false}, {"identifier": "getWorkflowName", "parameters": "(Tag tag, Entity entity)", "modifiers": "public static", "return": "WorkflowName", "signature": "WorkflowName getWorkflowName(Tag tag, Entity entity)", "full_signature": "public static WorkflowName getWorkflowName(Tag tag, Entity entity)", "class_method_signature": "EntityUtil.getWorkflowName(Tag tag, Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getWorkflowName", "parameters": "(Entity entity)", "modifiers": "public static", "return": "WorkflowName", "signature": "WorkflowName getWorkflowName(Entity entity)", "full_signature": "public static WorkflowName getWorkflowName(Entity entity)", "class_method_signature": "EntityUtil.getWorkflowName(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getWorkflowNameSuffix", "parameters": "(String workflowName,\n\t\t\tEntity entity)", "modifiers": "public static", "return": "String", "signature": "String getWorkflowNameSuffix(String workflowName,\n\t\t\tEntity entity)", "full_signature": "public static String getWorkflowNameSuffix(String workflowName,\n\t\t\tEntity entity)", "class_method_signature": "EntityUtil.getWorkflowNameSuffix(String workflowName,\n\t\t\tEntity entity)", "testcase": false, "constructor": false}, {"identifier": "getWorkflowNameTag", "parameters": "(String workflowName, Entity entity)", "modifiers": "public static", "return": "Tag", "signature": "Tag getWorkflowNameTag(String workflowName, Entity entity)", "full_signature": "public static Tag getWorkflowNameTag(String workflowName, Entity entity)", "class_method_signature": "EntityUtil.getWorkflowNameTag(String workflowName, Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getClusterView", "parameters": "(T entity, String clusterName)", "modifiers": "public static", "return": "T", "signature": "T getClusterView(T entity, String clusterName)", "full_signature": "public static T getClusterView(T entity, String clusterName)", "class_method_signature": "EntityUtil.getClusterView(T entity, String clusterName)", "testcase": false, "constructor": false}, {"identifier": "getClustersDefined", "parameters": "(Entity entity)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getClustersDefined(Entity entity)", "full_signature": "public static Set<String> getClustersDefined(Entity entity)", "class_method_signature": "EntityUtil.getClustersDefined(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getClustersDefinedInColos", "parameters": "(Entity entity)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getClustersDefinedInColos(Entity entity)", "full_signature": "public static Set<String> getClustersDefinedInColos(Entity entity)", "class_method_signature": "EntityUtil.getClustersDefinedInColos(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getStagingPath", "parameters": "(\n\t\t\torg.apache.ivory.entity.v0.cluster.Cluster cluster, Entity entity)", "modifiers": "public static", "return": "Path", "signature": "Path getStagingPath(\n\t\t\torg.apache.ivory.entity.v0.cluster.Cluster cluster, Entity entity)", "full_signature": "public static Path getStagingPath(\n\t\t\torg.apache.ivory.entity.v0.cluster.Cluster cluster, Entity entity)", "class_method_signature": "EntityUtil.getStagingPath(\n\t\t\torg.apache.ivory.entity.v0.cluster.Cluster cluster, Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getRetry", "parameters": "(Entity entity)", "modifiers": "public static", "return": "Retry", "signature": "Retry getRetry(Entity entity)", "full_signature": "public static Retry getRetry(Entity entity)", "class_method_signature": "EntityUtil.getRetry(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getLateProcess", "parameters": "(Entity entity)", "modifiers": "public static", "return": "LateProcess", "signature": "LateProcess getLateProcess(Entity entity)", "full_signature": "public static LateProcess getLateProcess(Entity entity)", "class_method_signature": "EntityUtil.getLateProcess(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getLogPath", "parameters": "(\n\t\t\torg.apache.ivory.entity.v0.cluster.Cluster cluster, Entity entity)", "modifiers": "public static", "return": "Path", "signature": "Path getLogPath(\n\t\t\torg.apache.ivory.entity.v0.cluster.Cluster cluster, Entity entity)", "full_signature": "public static Path getLogPath(\n\t\t\torg.apache.ivory.entity.v0.cluster.Cluster cluster, Entity entity)", "class_method_signature": "EntityUtil.getLogPath(\n\t\t\torg.apache.ivory.entity.v0.cluster.Cluster cluster, Entity entity)", "testcase": false, "constructor": false}, {"identifier": "UTCtoURIDate", "parameters": "(String utc)", "modifiers": "public static", "return": "String", "signature": "String UTCtoURIDate(String utc)", "full_signature": "public static String UTCtoURIDate(String utc)", "class_method_signature": "EntityUtil.UTCtoURIDate(String utc)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/apache/ivory/entity/EntityUtil.java"}, "focal_method": {"identifier": "getNextStartTime", "parameters": "(Date startTime, Frequency frequency, TimeZone timezone, Date now)", "modifiers": "public static", "return": "Date", "body": "public static Date getNextStartTime(Date startTime, Frequency frequency, TimeZone timezone, Date now) {\n\t\tif (startTime.after(now))\n\t\t\treturn startTime;\n\n\t\tCalendar startCal = Calendar.getInstance(timezone);\n\t\tstartCal.setTime(startTime);\n\n\t\tint count = 0;\n\t\tswitch (frequency.getTimeUnit()) {\n\t\tcase months:\n\t\t\tcount = (int) ((now.getTime() - startTime.getTime()) / MONTH_IN_MS);\n\t\t\tbreak;\n\t\tcase days:\n\t\t\tcount = (int) ((now.getTime() - startTime.getTime()) / DAY_IN_MS);\n\t\t\tbreak;\n\t\tcase hours:\n\t\t\tcount = (int) ((now.getTime() - startTime.getTime()) / HOUR_IN_MS);\n\t\t\tbreak;\n\t\tcase minutes:\n\t\t\tcount = (int) ((now.getTime() - startTime.getTime()) / MINUTE_IN_MS);\n\t\t\tbreak;\n\t\tdefault:\n\t\t}\n\n\t\tif (count > 2) {\n\t\t\tstartCal.add(frequency.getTimeUnit().getCalendarUnit(), ((count - 2) / frequency.getFrequency()) * frequency.getFrequency());\n\t\t}\n\t\twhile (startCal.getTime().before(now)) {\n\t\t\tstartCal.add(frequency.getTimeUnit().getCalendarUnit(), frequency.getFrequency());\n\t\t}\n\t\treturn startCal.getTime();\n\t}", "signature": "Date getNextStartTime(Date startTime, Frequency frequency, TimeZone timezone, Date now)", "full_signature": "public static Date getNextStartTime(Date startTime, Frequency frequency, TimeZone timezone, Date now)", "class_method_signature": "EntityUtil.getNextStartTime(Date startTime, Frequency frequency, TimeZone timezone, Date now)", "testcase": false, "constructor": false, "invocations": ["after", "getInstance", "setTime", "getTimeUnit", "getTime", "getTime", "getTime", "getTime", "getTime", "getTime", "getTime", "getTime", "add", "getCalendarUnit", "getTimeUnit", "getFrequency", "getFrequency", "before", "getTime", "add", "getCalendarUnit", "getTimeUnit", "getFrequency", "getTime"]}, "repository": {"repo_id": 2836228, "url": "https://github.com/sriksun/Ivory", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 28, "size": 11708, "license": "licensed"}}