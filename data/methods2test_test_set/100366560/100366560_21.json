{"test_class": {"identifier": "PrimitiveTypeUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "beanmother-core/src/test/java/io/beanmother/core/util/PrimitiveTypeUtilsTest.java"}, "test_case": {"identifier": "testConvertWrapperListToPrimitiveArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertWrapperListToPrimitiveArray() {\n        List<Integer> integerList = new ArrayList<>();\n        integerList.add(1);\n        Object reuslt = PrimitiveTypeUtils.toWrapperListToPrimitiveArray(integerList, new int[]{}.getClass());\n        assertTrue(reuslt.getClass().isArray());\n        assertTrue(reuslt.getClass().getComponentType().isPrimitive());\n\n        List<Long> longList = new ArrayList<>();\n        longList.add(1l);\n        reuslt = PrimitiveTypeUtils.toWrapperListToPrimitiveArray(longList, new long[]{}.getClass());\n        assertTrue(reuslt.getClass().isArray());\n        assertTrue(reuslt.getClass().getComponentType().isPrimitive());\n\n        List<Character> characterList = new ArrayList<>();\n        characterList.add('a');\n        reuslt = PrimitiveTypeUtils.toWrapperListToPrimitiveArray(characterList, new char[]{}.getClass());\n        assertTrue(reuslt.getClass().isArray());\n        assertTrue(reuslt.getClass().getComponentType().isPrimitive());\n\n        List<Boolean> booleanList = new ArrayList<>();\n        booleanList.add(true);\n        reuslt = PrimitiveTypeUtils.toWrapperListToPrimitiveArray(booleanList, new boolean[]{}.getClass());\n        assertTrue(reuslt.getClass().isArray());\n        assertTrue(reuslt.getClass().getComponentType().isPrimitive());\n\n        List<Float> floatList = new ArrayList<>();\n        floatList.add(1.0f);\n        reuslt = PrimitiveTypeUtils.toWrapperListToPrimitiveArray(floatList, new float[]{}.getClass());\n        assertTrue(reuslt.getClass().isArray());\n        assertTrue(reuslt.getClass().getComponentType().isPrimitive());\n\n        List<Double> doubleList = new ArrayList<>();\n        doubleList.add(1.0d);\n        reuslt = PrimitiveTypeUtils.toWrapperListToPrimitiveArray(doubleList, new double[]{}.getClass());\n        assertTrue(reuslt.getClass().isArray());\n        assertTrue(reuslt.getClass().getComponentType().isPrimitive());\n    }", "signature": "void testConvertWrapperListToPrimitiveArray()", "full_signature": "@Test public void testConvertWrapperListToPrimitiveArray()", "class_method_signature": "PrimitiveTypeUtilsTest.testConvertWrapperListToPrimitiveArray()", "testcase": true, "constructor": false, "invocations": ["add", "toWrapperListToPrimitiveArray", "getClass", "assertTrue", "isArray", "getClass", "assertTrue", "isPrimitive", "getComponentType", "getClass", "add", "toWrapperListToPrimitiveArray", "getClass", "assertTrue", "isArray", "getClass", "assertTrue", "isPrimitive", "getComponentType", "getClass", "add", "toWrapperListToPrimitiveArray", "getClass", "assertTrue", "isArray", "getClass", "assertTrue", "isPrimitive", "getComponentType", "getClass", "add", "toWrapperListToPrimitiveArray", "getClass", "assertTrue", "isArray", "getClass", "assertTrue", "isPrimitive", "getComponentType", "getClass", "add", "toWrapperListToPrimitiveArray", "getClass", "assertTrue", "isArray", "getClass", "assertTrue", "isPrimitive", "getComponentType", "getClass", "add", "toWrapperListToPrimitiveArray", "getClass", "assertTrue", "isArray", "getClass", "assertTrue", "isPrimitive", "getComponentType", "getClass"]}, "focal_class": {"identifier": "PrimitiveTypeUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toWrapper", "parameters": "(final TypeToken<?> primitiveTypeToken)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> toWrapper(final TypeToken<?> primitiveTypeToken)", "full_signature": "public static Class<?> toWrapper(final TypeToken<?> primitiveTypeToken)", "class_method_signature": "PrimitiveTypeUtils.toWrapper(final TypeToken<?> primitiveTypeToken)", "testcase": false, "constructor": false}, {"identifier": "toWrapperTypeToken", "parameters": "(final TypeToken<?> primitiveTypeToken)", "modifiers": "public static", "return": "TypeToken<?>", "signature": "TypeToken<?> toWrapperTypeToken(final TypeToken<?> primitiveTypeToken)", "full_signature": "public static TypeToken<?> toWrapperTypeToken(final TypeToken<?> primitiveTypeToken)", "class_method_signature": "PrimitiveTypeUtils.toWrapperTypeToken(final TypeToken<?> primitiveTypeToken)", "testcase": false, "constructor": false}, {"identifier": "toWrapper", "parameters": "(final Class<?> primitiveType)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> toWrapper(final Class<?> primitiveType)", "full_signature": "public static Class<?> toWrapper(final Class<?> primitiveType)", "class_method_signature": "PrimitiveTypeUtils.toWrapper(final Class<?> primitiveType)", "testcase": false, "constructor": false}, {"identifier": "toWrapperListToPrimitiveArray", "parameters": "(final List wrapperList, Class<?> primitiveType)", "modifiers": "public static", "return": "Object", "signature": "Object toWrapperListToPrimitiveArray(final List wrapperList, Class<?> primitiveType)", "full_signature": "public static Object toWrapperListToPrimitiveArray(final List wrapperList, Class<?> primitiveType)", "class_method_signature": "PrimitiveTypeUtils.toWrapperListToPrimitiveArray(final List wrapperList, Class<?> primitiveType)", "testcase": false, "constructor": false}], "file": "beanmother-core/src/main/java/io/beanmother/core/util/PrimitiveTypeUtils.java"}, "focal_method": {"identifier": "toWrapperListToPrimitiveArray", "parameters": "(final List wrapperList, Class<?> primitiveType)", "modifiers": "public static", "return": "Object", "body": "public static Object toWrapperListToPrimitiveArray(final List wrapperList, Class<?> primitiveType) {\n        if (primitiveType.isArray()) {\n            primitiveType = primitiveType.getComponentType();\n        }\n\n        if (boolean.class.equals(primitiveType)) {\n            return Booleans.toArray(wrapperList);\n        } else if (float.class.equals(primitiveType)) {\n            return Floats.toArray(wrapperList);\n        } else if (long.class.equals(primitiveType)) {\n            return Longs.toArray(wrapperList);\n        } else if (int.class.equals(primitiveType)) {\n            return Ints.toArray(wrapperList);\n        } else if (short.class.equals(primitiveType)) {\n            return Shorts.toArray(wrapperList);\n        } else if (byte.class.equals(primitiveType)) {\n            return Bytes.toArray(wrapperList);\n        } else if (double.class.equals(primitiveType)) {\n            return Doubles.toArray(wrapperList);\n        } else if (char.class.equals(primitiveType)) {\n            return Chars.toArray(wrapperList);\n        } else {\n            throw new IllegalArgumentException(primitiveType.getName() + \" is not a supported primitive type\");\n        }\n    }", "signature": "Object toWrapperListToPrimitiveArray(final List wrapperList, Class<?> primitiveType)", "full_signature": "public static Object toWrapperListToPrimitiveArray(final List wrapperList, Class<?> primitiveType)", "class_method_signature": "PrimitiveTypeUtils.toWrapperListToPrimitiveArray(final List wrapperList, Class<?> primitiveType)", "testcase": false, "constructor": false, "invocations": ["isArray", "getComponentType", "equals", "toArray", "equals", "toArray", "equals", "toArray", "equals", "toArray", "equals", "toArray", "equals", "toArray", "equals", "toArray", "equals", "toArray", "getName"]}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}