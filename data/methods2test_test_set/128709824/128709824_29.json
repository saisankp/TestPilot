{"test_class": {"identifier": "MulticastRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final ServerConfig SERVER_CONFIG = new ServerConfig()\n            .setProtocol(\"bolt\") // \u8bbe\u7f6e\u4e00\u4e2a\u534f\u8bae\uff0c\u9ed8\u8ba4bolt\n            .setPort(12200) // \u8bbe\u7f6e\u4e00\u4e2a\u7aef\u53e3\uff0c\u9ed8\u8ba412200\n            .setDaemon(false);", "modifier": "public static final", "type": "ServerConfig", "declarator": "SERVER_CONFIG = new ServerConfig()\n            .setProtocol(\"bolt\") // \u8bbe\u7f6e\u4e00\u4e2a\u534f\u8bae\uff0c\u9ed8\u8ba4bolt\n            .setPort(12200) // \u8bbe\u7f6e\u4e00\u4e2a\u7aef\u53e3\uff0c\u9ed8\u8ba412200\n            .setDaemon(false)", "var_name": "SERVER_CONFIG"}, {"original_string": "public static final ProviderConfig PROVIDER_CONFIG = new ProviderConfig<>()\n            .setInterfaceId(HelloService.class.getName())\n            .setServer(SERVER_CONFIG);", "modifier": "public static final", "type": "ProviderConfig", "declarator": "PROVIDER_CONFIG = new ProviderConfig<>()\n            .setInterfaceId(HelloService.class.getName())\n            .setServer(SERVER_CONFIG)", "var_name": "PROVIDER_CONFIG"}, {"original_string": "public static final ConsumerConfig CONSUMER_CONFIG = new ConsumerConfig<>()\n            .setInterfaceId(HelloService.class.getName())\n            .setProtocol(\"bolt\");", "modifier": "public static final", "type": "ConsumerConfig", "declarator": "CONSUMER_CONFIG = new ConsumerConfig<>()\n            .setInterfaceId(HelloService.class.getName())\n            .setProtocol(\"bolt\")", "var_name": "CONSUMER_CONFIG"}], "file": "registry/registry-multicast/src/test/java/com/alipay/sofa/rpc/registry/multicast/MulticastRegistryTest.java"}, "test_case": {"identifier": "testInit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInit() throws NoSuchFieldException, IllegalAccessException {\n        RegistryConfig registryConfig = new RegistryConfig()\n            .setProtocol(\"multicast\")\n            .setAddress(\"224.5.6.7:6666\");\n        MulticastRegistry multicastRegistry = new MulticastRegistry(registryConfig);\n        multicastRegistry.init();\n\n        Assert.assertEquals(\"224.5.6.7\", getAddress(multicastRegistry));\n        Assert.assertEquals(6666, getPort(multicastRegistry));\n    }", "signature": "void testInit()", "full_signature": "@Test public void testInit()", "class_method_signature": "MulticastRegistryTest.testInit()", "testcase": true, "constructor": false, "invocations": ["setAddress", "setProtocol", "init", "assertEquals", "getAddress", "assertEquals", "getPort"]}, "focal_class": {"identifier": "MulticastRegistry", "superclass": "extends Registry", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = LoggerFactory.getLogger(MulticastRegistry.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MulticastRegistry.class)", "var_name": "LOGGER"}, {"original_string": "private static final int DEFAULT_MULTICAST_PORT = 1234;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MULTICAST_PORT = 1234", "var_name": "DEFAULT_MULTICAST_PORT"}, {"original_string": "private static final String EXT_NAME = \"multicast\";", "modifier": "private static final", "type": "String", "declarator": "EXT_NAME = \"multicast\"", "var_name": "EXT_NAME"}, {"original_string": "private static final String SPACE = \" \";", "modifier": "private static final", "type": "String", "declarator": "SPACE = \" \"", "var_name": "SPACE"}, {"original_string": "private static final String REGISTER = \"register\";", "modifier": "private static final", "type": "String", "declarator": "REGISTER = \"register\"", "var_name": "REGISTER"}, {"original_string": "private static final String UNREGISTER = \"unregister\";", "modifier": "private static final", "type": "String", "declarator": "UNREGISTER = \"unregister\"", "var_name": "UNREGISTER"}, {"original_string": "private static final String SUBSCRIBE = \"subscribe\";", "modifier": "private static final", "type": "String", "declarator": "SUBSCRIBE = \"subscribe\"", "var_name": "SUBSCRIBE"}, {"original_string": "private static final String UNSUBSCRIBE = \"unsubscribe\";", "modifier": "private static final", "type": "String", "declarator": "UNSUBSCRIBE = \"unsubscribe\"", "var_name": "UNSUBSCRIBE"}, {"original_string": "private static final String CLEAN_PERIOD = \"cleanPeriod\";", "modifier": "private static final", "type": "String", "declarator": "CLEAN_PERIOD = \"cleanPeriod\"", "var_name": "CLEAN_PERIOD"}, {"original_string": "private static final String CLEAN = \"clean\";", "modifier": "private static final", "type": "String", "declarator": "CLEAN = \"clean\"", "var_name": "CLEAN"}, {"original_string": "private InetAddress multicastAddress;", "modifier": "private", "type": "InetAddress", "declarator": "multicastAddress", "var_name": "multicastAddress"}, {"original_string": "private MulticastSocket multicastSocket;", "modifier": "private", "type": "MulticastSocket", "declarator": "multicastSocket", "var_name": "multicastSocket"}, {"original_string": "private int multicastPort;", "modifier": "private", "type": "int", "declarator": "multicastPort", "var_name": "multicastPort"}, {"original_string": "protected Map<String, ProviderGroup> allProviderCache = new ConcurrentHashMap<>();", "modifier": "protected", "type": "Map<String, ProviderGroup>", "declarator": "allProviderCache = new ConcurrentHashMap<>()", "var_name": "allProviderCache"}, {"original_string": "protected Map<String, List<ConsumerConfig>> notifyListeners = new ConcurrentHashMap<>();", "modifier": "protected", "type": "Map<String, List<ConsumerConfig>>", "declarator": "notifyListeners = new ConcurrentHashMap<>()", "var_name": "notifyListeners"}, {"original_string": "protected Map<String, ProviderGroup> registeredCache = new ConcurrentHashMap<>();", "modifier": "protected", "type": "Map<String, ProviderGroup>", "declarator": "registeredCache = new ConcurrentHashMap<>()", "var_name": "registeredCache"}, {"original_string": "private ScheduledExecutorService cleanExecutor = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"SofaMulticastRegistryCleanTimer\", true));", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "cleanExecutor = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"SofaMulticastRegistryCleanTimer\", true))", "var_name": "cleanExecutor"}, {"original_string": "private ScheduledFuture<?> cleanFuture;", "modifier": "private", "type": "ScheduledFuture<?>", "declarator": "cleanFuture", "var_name": "cleanFuture"}, {"original_string": "private int cleanPeriod = 60 * 1000;", "modifier": "private", "type": "int", "declarator": "cleanPeriod = 60 * 1000", "var_name": "cleanPeriod"}], "methods": [{"identifier": "MulticastRegistry", "parameters": "(RegistryConfig registryConfig)", "modifiers": "protected", "return": "", "signature": " MulticastRegistry(RegistryConfig registryConfig)", "full_signature": "protected  MulticastRegistry(RegistryConfig registryConfig)", "class_method_signature": "MulticastRegistry.MulticastRegistry(RegistryConfig registryConfig)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "MulticastRegistry.start()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(ProviderConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void register(ProviderConfig config)", "full_signature": "@Override public void register(ProviderConfig config)", "class_method_signature": "MulticastRegistry.register(ProviderConfig config)", "testcase": false, "constructor": false}, {"identifier": "unRegister", "parameters": "(ProviderConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void unRegister(ProviderConfig config)", "full_signature": "@Override public void unRegister(ProviderConfig config)", "class_method_signature": "MulticastRegistry.unRegister(ProviderConfig config)", "testcase": false, "constructor": false}, {"identifier": "batchUnRegister", "parameters": "(List<ProviderConfig> configs)", "modifiers": "@Override public", "return": "void", "signature": "void batchUnRegister(List<ProviderConfig> configs)", "full_signature": "@Override public void batchUnRegister(List<ProviderConfig> configs)", "class_method_signature": "MulticastRegistry.batchUnRegister(List<ProviderConfig> configs)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(ConsumerConfig config)", "modifiers": "@Override public", "return": "List<ProviderGroup>", "signature": "List<ProviderGroup> subscribe(ConsumerConfig config)", "full_signature": "@Override public List<ProviderGroup> subscribe(ConsumerConfig config)", "class_method_signature": "MulticastRegistry.subscribe(ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "unSubscribe", "parameters": "(ConsumerConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void unSubscribe(ConsumerConfig config)", "full_signature": "@Override public void unSubscribe(ConsumerConfig config)", "class_method_signature": "MulticastRegistry.unSubscribe(ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "batchUnSubscribe", "parameters": "(List<ConsumerConfig> configs)", "modifiers": "@Override public", "return": "void", "signature": "void batchUnSubscribe(List<ConsumerConfig> configs)", "full_signature": "@Override public void batchUnSubscribe(List<ConsumerConfig> configs)", "class_method_signature": "MulticastRegistry.batchUnSubscribe(List<ConsumerConfig> configs)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "MulticastRegistry.destroy()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "MulticastRegistry.init()", "testcase": false, "constructor": false}, {"identifier": "clean", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clean()", "full_signature": "private void clean()", "class_method_signature": "MulticastRegistry.clean()", "testcase": false, "constructor": false}, {"identifier": "isExpired", "parameters": "(ProviderInfo providerInfo)", "modifiers": "private", "return": "boolean", "signature": "boolean isExpired(ProviderInfo providerInfo)", "full_signature": "private boolean isExpired(ProviderInfo providerInfo)", "class_method_signature": "MulticastRegistry.isExpired(ProviderInfo providerInfo)", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(String msg, InetSocketAddress remoteAddress)", "modifiers": "private", "return": "void", "signature": "void receive(String msg, InetSocketAddress remoteAddress)", "full_signature": "private void receive(String msg, InetSocketAddress remoteAddress)", "class_method_signature": "MulticastRegistry.receive(String msg, InetSocketAddress remoteAddress)", "testcase": false, "constructor": false}, {"identifier": "receiveRegister", "parameters": "(String serviceName, String providerInfoUrl)", "modifiers": "private", "return": "void", "signature": "void receiveRegister(String serviceName, String providerInfoUrl)", "full_signature": "private void receiveRegister(String serviceName, String providerInfoUrl)", "class_method_signature": "MulticastRegistry.receiveRegister(String serviceName, String providerInfoUrl)", "testcase": false, "constructor": false}, {"identifier": "receiveUnregistered", "parameters": "(String serviceName, String providerInfoUrl)", "modifiers": "private", "return": "void", "signature": "void receiveUnregistered(String serviceName, String providerInfoUrl)", "full_signature": "private void receiveUnregistered(String serviceName, String providerInfoUrl)", "class_method_signature": "MulticastRegistry.receiveUnregistered(String serviceName, String providerInfoUrl)", "testcase": false, "constructor": false}, {"identifier": "removeFromCache", "parameters": "(String serviceName, ProviderInfo providerInfo, Map<String, ProviderGroup> cache)", "modifiers": "private", "return": "ProviderGroup", "signature": "ProviderGroup removeFromCache(String serviceName, ProviderInfo providerInfo, Map<String, ProviderGroup> cache)", "full_signature": "private ProviderGroup removeFromCache(String serviceName, ProviderInfo providerInfo, Map<String, ProviderGroup> cache)", "class_method_signature": "MulticastRegistry.removeFromCache(String serviceName, ProviderInfo providerInfo, Map<String, ProviderGroup> cache)", "testcase": false, "constructor": false}, {"identifier": "multicast", "parameters": "(String msg)", "modifiers": "private", "return": "void", "signature": "void multicast(String msg)", "full_signature": "private void multicast(String msg)", "class_method_signature": "MulticastRegistry.multicast(String msg)", "testcase": false, "constructor": false}, {"identifier": "doRegister", "parameters": "(String appName, String serviceName, ProviderInfo providerInfo)", "modifiers": "private", "return": "void", "signature": "void doRegister(String appName, String serviceName, ProviderInfo providerInfo)", "full_signature": "private void doRegister(String appName, String serviceName, ProviderInfo providerInfo)", "class_method_signature": "MulticastRegistry.doRegister(String appName, String serviceName, ProviderInfo providerInfo)", "testcase": false, "constructor": false}, {"identifier": "addToCache", "parameters": "(String serviceName, ProviderInfo providerInfo, Map<String, ProviderGroup> cache)", "modifiers": "private", "return": "ProviderGroup", "signature": "ProviderGroup addToCache(String serviceName, ProviderInfo providerInfo, Map<String, ProviderGroup> cache)", "full_signature": "private ProviderGroup addToCache(String serviceName, ProviderInfo providerInfo, Map<String, ProviderGroup> cache)", "class_method_signature": "MulticastRegistry.addToCache(String serviceName, ProviderInfo providerInfo, Map<String, ProviderGroup> cache)", "testcase": false, "constructor": false}, {"identifier": "doUnRegister", "parameters": "(String serviceName, ProviderInfo providerInfo)", "modifiers": "private", "return": "void", "signature": "void doUnRegister(String serviceName, ProviderInfo providerInfo)", "full_signature": "private void doUnRegister(String serviceName, ProviderInfo providerInfo)", "class_method_signature": "MulticastRegistry.doUnRegister(String serviceName, ProviderInfo providerInfo)", "testcase": false, "constructor": false}, {"identifier": "notifyConsumerListeners", "parameters": "(String serviceName, ProviderGroup providerGroup)", "modifiers": "private", "return": "void", "signature": "void notifyConsumerListeners(String serviceName, ProviderGroup providerGroup)", "full_signature": "private void notifyConsumerListeners(String serviceName, ProviderGroup providerGroup)", "class_method_signature": "MulticastRegistry.notifyConsumerListeners(String serviceName, ProviderGroup providerGroup)", "testcase": false, "constructor": false}, {"identifier": "getAllProviderCache", "parameters": "()", "modifiers": "public", "return": "Map<String, ProviderGroup>", "signature": "Map<String, ProviderGroup> getAllProviderCache()", "full_signature": "public Map<String, ProviderGroup> getAllProviderCache()", "class_method_signature": "MulticastRegistry.getAllProviderCache()", "testcase": false, "constructor": false}], "file": "registry/registry-multicast/src/main/java/com/alipay/sofa/rpc/registry/multicast/MulticastRegistry.java"}, "focal_method": {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void init() {\n        if (multicastSocket != null) {\n            return;\n        }\n\n        String addressInput = registryConfig.getAddress();\n        if (StringUtils.isEmpty(addressInput)) {\n            throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_EMPTY_ADDRESS, EXT_NAME));\n        }\n\n        try {\n            if (!addressInput.startsWith(EXT_NAME)) {\n                addressInput = EXT_NAME + \"://\" + addressInput;\n            }\n            URI url = new URI(addressInput);\n            multicastPort = url.getPort();\n            if (multicastPort <= 0) {\n                multicastPort = DEFAULT_MULTICAST_PORT;\n            }\n            multicastAddress = InetAddress.getByName(url.getHost());\n            MulticastRegistryHelper.checkMulticastAddress(multicastAddress);\n            multicastSocket = new MulticastSocket(multicastPort);\n            NetUtils.joinMulticastGroup(multicastSocket, multicastAddress);\n            Thread thread = new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    byte[] buf = new byte[2048];\n                    DatagramPacket recv = new DatagramPacket(buf, buf.length);\n                    while (!multicastSocket.isClosed()) {\n                        try {\n                            multicastSocket.receive(recv);\n                            String msg = new String(recv.getData()).trim();\n                            int i = msg.indexOf('\\n');\n                            if (i > 0) {\n                                msg = msg.substring(0, i).trim();\n                            }\n                            MulticastRegistry.this.receive(msg, (InetSocketAddress) recv.getSocketAddress());\n                            Arrays.fill(buf, (byte) 0);\n                        } catch (Throwable e) {\n                            if (!multicastSocket.isClosed()) {\n                                LOGGER.error(e.getMessage(), e);\n                            }\n                        }\n                    }\n                }\n            }, \"SofaMulticastRegistryReceiver\");\n            thread.setDaemon(true);\n            thread.start();\n        } catch (Exception e) {\n            throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_REGISTRY_INIT, EXT_NAME), e);\n        }\n\n\n        String cleanPeriodStr = registryConfig.getParameter(CLEAN_PERIOD);\n        if (StringUtils.isNotBlank(cleanPeriodStr)) {\n            this.cleanPeriod = Integer.parseInt(cleanPeriodStr);\n        }\n        if (!Boolean.FALSE.toString().equalsIgnoreCase(registryConfig.getParameter(CLEAN))) {\n            this.cleanFuture = cleanExecutor.scheduleWithFixedDelay(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        clean(); // Remove the expired\n                    } catch (Throwable t) { // Defensive fault tolerance\n                        LOGGER.error(\"Unexpected exception occur at clean expired provider, cause: \" + t.getMessage(), t);\n                    }\n                }\n            }, cleanPeriod, cleanPeriod, TimeUnit.MILLISECONDS);\n        } else {\n            this.cleanFuture = null;\n        }\n    }", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "MulticastRegistry.init()", "testcase": false, "constructor": false, "invocations": ["getAddress", "isEmpty", "getLog", "startsWith", "getPort", "getByName", "getHost", "checkMulticastAddress", "joinMulticastGroup", "isClosed", "receive", "trim", "getData", "indexOf", "trim", "substring", "receive", "getSocketAddress", "fill", "isClosed", "error", "getMessage", "setDaemon", "start", "getLog", "getParameter", "isNotBlank", "parseInt", "equalsIgnoreCase", "toString", "getParameter", "scheduleWithFixedDelay", "clean", "error", "getMessage"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}