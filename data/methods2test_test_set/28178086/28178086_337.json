{"test_class": {"identifier": "WindowFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AutoCovarianceFunction fn;", "modifier": "private", "type": "AutoCovarianceFunction", "declarator": "fn", "var_name": "fn"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/data/WindowFunctionTest.java"}, "test_case": {"identifier": "testParzenMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    \n    public void testParzenMethod() {\n        for (int len = 1; len < 12; ++len) {\n//            System.out.println(new WindowFunction(WindowType.Parzen, len).compute(i -> fn.get(Math.abs(i))));\n            new WindowFunction(WindowType.Parzen, len).compute(i -> fn.get(Math.abs(i)));\n        }\n    }", "signature": "void testParzenMethod()", "full_signature": "@Test public void testParzenMethod()", "class_method_signature": "WindowFunctionTest.testParzenMethod()", "testcase": true, "constructor": false, "invocations": ["compute", "get", "abs"]}, "focal_class": {"identifier": "WindowFunction", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final double[] window;", "modifier": "private final", "type": "double[]", "declarator": "window", "var_name": "window"}], "methods": [{"identifier": "WindowFunction", "parameters": "(WindowType type, int len)", "modifiers": "public", "return": "", "signature": " WindowFunction(WindowType type, int len)", "full_signature": "public  WindowFunction(WindowType type, int len)", "class_method_signature": "WindowFunction.WindowFunction(WindowType type, int len)", "testcase": false, "constructor": true}, {"identifier": "computeSymmetric", "parameters": "(IntToDoubleFunction fn)", "modifiers": "public", "return": "double", "signature": "double computeSymmetric(IntToDoubleFunction fn)", "full_signature": "public double computeSymmetric(IntToDoubleFunction fn)", "class_method_signature": "WindowFunction.computeSymmetric(IntToDoubleFunction fn)", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "(IntToDoubleFunction fn)", "modifiers": "public", "return": "double", "signature": "double compute(IntToDoubleFunction fn)", "full_signature": "public double compute(IntToDoubleFunction fn)", "class_method_signature": "WindowFunction.compute(IntToDoubleFunction fn)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/data/WindowFunction.java"}, "focal_method": {"identifier": "compute", "parameters": "(IntToDoubleFunction fn)", "modifiers": "public", "return": "double", "body": "public double compute(IntToDoubleFunction fn){\n        double v=fn.applyAsDouble(0)*window[0];\n        for (int i=1; i<window.length; ++i){\n            v+=window[i]*fn.applyAsDouble(i);\n            v+=window[i]*fn.applyAsDouble(-i);\n        }\n        return v;\n    }", "signature": "double compute(IntToDoubleFunction fn)", "full_signature": "public double compute(IntToDoubleFunction fn)", "class_method_signature": "WindowFunction.compute(IntToDoubleFunction fn)", "testcase": false, "constructor": false, "invocations": ["applyAsDouble", "applyAsDouble", "applyAsDouble"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}