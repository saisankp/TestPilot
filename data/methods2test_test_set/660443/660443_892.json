{"test_class": {"identifier": "InChITautomerGeneratorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private SmilesParser           smilesParser;", "modifier": "private", "type": "SmilesParser", "declarator": "smilesParser", "var_name": "smilesParser"}, {"original_string": "private InChITautomerGenerator tautomerGenerator = new InChITautomerGenerator();", "modifier": "private", "type": "InChITautomerGenerator", "declarator": "tautomerGenerator = new InChITautomerGenerator()", "var_name": "tautomerGenerator"}], "file": "tool/tautomer/src/test/java/org/openscience/cdk/tautomers/InChITautomerGeneratorTest.java"}, "test_case": {"identifier": "test_withJniInchi", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_withJniInchi() throws Exception {\n        String mdlInput = // same as NC1=CC(N)=NC(O)=N1\n        \"\\n\" + \"  Mrv0541 02151109592D\\n\" + \"\\n\" + \"  9  9  0  0  0  0            999 V2000\\n\"\n                + \"    2.1434   -0.4125    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\\n\"\n                + \"    1.4289   -0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\\n\"\n                + \"    0.7145   -0.4125    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\\n\"\n                + \"    0.0000   -0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\\n\"\n                + \"   -0.7145   -0.4125    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\\n\"\n                + \"    0.0000    0.8250    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\\n\"\n                + \"    0.7145    1.2375    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\\n\"\n                + \"    0.7145    2.0625    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\\n\"\n                + \"    1.4289    0.8250    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\\n\" + \"  1  2  1  0  0  0  0\\n\"\n                + \"  2  3  2  0  0  0  0\\n\" + \"  3  4  1  0  0  0  0\\n\" + \"  4  5  1  0  0  0  0\\n\"\n                + \"  4  6  2  0  0  0  0\\n\" + \"  6  7  1  0  0  0  0\\n\" + \"  7  8  1  0  0  0  0\\n\"\n                + \"  7  9  2  0  0  0  0\\n\" + \"  2  9  1  0  0  0  0\\n\" + \"M  END\\n\";\n\n        MDLV2000Reader reader = new MDLV2000Reader(new StringReader(mdlInput));\n        IAtomContainer molecule = reader.read(new AtomContainer());\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        CDKHydrogenAdder hAdder = CDKHydrogenAdder.getInstance(molecule.getBuilder());\n        hAdder.addImplicitHydrogens(molecule);\n\n        List<IAtomContainer> tautomers = tautomerGenerator.getTautomers(molecule); // InChI will be calculated\n        Assert.assertEquals(5, tautomers.size());\n    }", "signature": "void test_withJniInchi()", "full_signature": "@Test public void test_withJniInchi()", "class_method_signature": "InChITautomerGeneratorTest.test_withJniInchi()", "testcase": true, "constructor": false, "invocations": ["read", "percieveAtomTypesAndConfigureAtoms", "getInstance", "getBuilder", "addImplicitHydrogens", "getTautomers", "assertEquals", "size"]}, "focal_class": {"identifier": "InChITautomerGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static ILoggingTool LOGGER = LoggingToolFactory.createLoggingTool(InChITautomerGenerator.class);", "modifier": "private final static", "type": "ILoggingTool", "declarator": "LOGGER = LoggingToolFactory.createLoggingTool(InChITautomerGenerator.class)", "var_name": "LOGGER"}, {"original_string": "private static final SmilesGenerator CANSMI = new SmilesGenerator(SmiFlavor.Canonical);", "modifier": "private static final", "type": "SmilesGenerator", "declarator": "CANSMI = new SmilesGenerator(SmiFlavor.Canonical)", "var_name": "CANSMI"}, {"original_string": "public static final int KETO_ENOL      = 0x1;", "modifier": "public static final", "type": "int", "declarator": "KETO_ENOL      = 0x1", "var_name": "KETO_ENOL"}, {"original_string": "public static final int ONE_FIVE_SHIFT = 0x2;", "modifier": "public static final", "type": "int", "declarator": "ONE_FIVE_SHIFT = 0x2", "var_name": "ONE_FIVE_SHIFT"}, {"original_string": "private final int flags;", "modifier": "private final", "type": "int", "declarator": "flags", "var_name": "flags"}], "methods": [{"identifier": "InChITautomerGenerator", "parameters": "(int flags)", "modifiers": "public", "return": "", "signature": " InChITautomerGenerator(int flags)", "full_signature": "public  InChITautomerGenerator(int flags)", "class_method_signature": "InChITautomerGenerator.InChITautomerGenerator(int flags)", "testcase": false, "constructor": true}, {"identifier": "InChITautomerGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " InChITautomerGenerator()", "full_signature": "public  InChITautomerGenerator()", "class_method_signature": "InChITautomerGenerator.InChITautomerGenerator()", "testcase": false, "constructor": true}, {"identifier": "getTautomers", "parameters": "(IAtomContainer mol)", "modifiers": "public", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> getTautomers(IAtomContainer mol)", "full_signature": "public List<IAtomContainer> getTautomers(IAtomContainer mol)", "class_method_signature": "InChITautomerGenerator.getTautomers(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getTautomers", "parameters": "(IAtomContainer mol, String inchi)", "modifiers": "@Deprecated public", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> getTautomers(IAtomContainer mol, String inchi)", "full_signature": "@Deprecated public List<IAtomContainer> getTautomers(IAtomContainer mol, String inchi)", "class_method_signature": "InChITautomerGenerator.getTautomers(IAtomContainer mol, String inchi)", "testcase": false, "constructor": false}, {"identifier": "getTautomers", "parameters": "(IAtomContainer mol, String inchi, long[] amap)", "modifiers": "private", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> getTautomers(IAtomContainer mol, String inchi, long[] amap)", "full_signature": "private List<IAtomContainer> getTautomers(IAtomContainer mol, String inchi, long[] amap)", "class_method_signature": "InChITautomerGenerator.getTautomers(IAtomContainer mol, String inchi, long[] amap)", "testcase": false, "constructor": false}, {"identifier": "getElementsByPosition", "parameters": "(String inputInchi, IAtomContainer inputMolecule)", "modifiers": "private", "return": "Map<Integer, IAtom>", "signature": "Map<Integer, IAtom> getElementsByPosition(String inputInchi, IAtomContainer inputMolecule)", "full_signature": "private Map<Integer, IAtom> getElementsByPosition(String inputInchi, IAtomContainer inputMolecule)", "class_method_signature": "InChITautomerGenerator.getElementsByPosition(String inputInchi, IAtomContainer inputMolecule)", "testcase": false, "constructor": false}, {"identifier": "connectAtoms", "parameters": "(String inputInchi, IAtomContainer inputMolecule,\n            Map<Integer, IAtom> inchiAtomsByPosition)", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer connectAtoms(String inputInchi, IAtomContainer inputMolecule,\n            Map<Integer, IAtom> inchiAtomsByPosition)", "full_signature": "private IAtomContainer connectAtoms(String inputInchi, IAtomContainer inputMolecule,\n            Map<Integer, IAtom> inchiAtomsByPosition)", "class_method_signature": "InChITautomerGenerator.connectAtoms(String inputInchi, IAtomContainer inputMolecule,\n            Map<Integer, IAtom> inchiAtomsByPosition)", "testcase": false, "constructor": false}, {"identifier": "mapInputMoleculeToInchiMolgraph", "parameters": "(IAtomContainer inchiMolGraph, IAtomContainer mol)", "modifiers": "private", "return": "void", "signature": "void mapInputMoleculeToInchiMolgraph(IAtomContainer inchiMolGraph, IAtomContainer mol)", "full_signature": "private void mapInputMoleculeToInchiMolgraph(IAtomContainer inchiMolGraph, IAtomContainer mol)", "class_method_signature": "InChITautomerGenerator.mapInputMoleculeToInchiMolgraph(IAtomContainer inchiMolGraph, IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "parseMobileHydrogens", "parameters": "(List<Integer> mobHydrAttachPositions, String inputInchi)", "modifiers": "private", "return": "int", "signature": "int parseMobileHydrogens(List<Integer> mobHydrAttachPositions, String inputInchi)", "full_signature": "private int parseMobileHydrogens(List<Integer> mobHydrAttachPositions, String inputInchi)", "class_method_signature": "InChITautomerGenerator.parseMobileHydrogens(List<Integer> mobHydrAttachPositions, String inputInchi)", "testcase": false, "constructor": false}, {"identifier": "constructTautomers", "parameters": "(IAtomContainer inputMolecule, List<Integer> mobHydrAttachPositions,\n            int totalMobHydrCount)", "modifiers": "private", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> constructTautomers(IAtomContainer inputMolecule, List<Integer> mobHydrAttachPositions,\n            int totalMobHydrCount)", "full_signature": "private List<IAtomContainer> constructTautomers(IAtomContainer inputMolecule, List<Integer> mobHydrAttachPositions,\n            int totalMobHydrCount)", "class_method_signature": "InChITautomerGenerator.constructTautomers(IAtomContainer inputMolecule, List<Integer> mobHydrAttachPositions,\n            int totalMobHydrCount)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicates", "parameters": "(List<IAtomContainer> tautomers)", "modifiers": "private", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> removeDuplicates(List<IAtomContainer> tautomers)", "full_signature": "private List<IAtomContainer> removeDuplicates(List<IAtomContainer> tautomers)", "class_method_signature": "InChITautomerGenerator.removeDuplicates(List<IAtomContainer> tautomers)", "testcase": false, "constructor": false}, {"identifier": "combineHydrogenPositions", "parameters": "(List<Integer> taken, List<List<Integer>> combinations,\n            IAtomContainer skeleton, int totalMobHydrCount, List<Integer> mobHydrAttachPositions)", "modifiers": "private", "return": "void", "signature": "void combineHydrogenPositions(List<Integer> taken, List<List<Integer>> combinations,\n            IAtomContainer skeleton, int totalMobHydrCount, List<Integer> mobHydrAttachPositions)", "full_signature": "private void combineHydrogenPositions(List<Integer> taken, List<List<Integer>> combinations,\n            IAtomContainer skeleton, int totalMobHydrCount, List<Integer> mobHydrAttachPositions)", "class_method_signature": "InChITautomerGenerator.combineHydrogenPositions(List<Integer> taken, List<List<Integer>> combinations,\n            IAtomContainer skeleton, int totalMobHydrCount, List<Integer> mobHydrAttachPositions)", "testcase": false, "constructor": false}, {"identifier": "findAtomByPosition", "parameters": "(IAtomContainer container, int position)", "modifiers": "private", "return": "IAtom", "signature": "IAtom findAtomByPosition(IAtomContainer container, int position)", "full_signature": "private IAtom findAtomByPosition(IAtomContainer container, int position)", "class_method_signature": "InChITautomerGenerator.findAtomByPosition(IAtomContainer container, int position)", "testcase": false, "constructor": false}, {"identifier": "tryDoubleBondCombinations", "parameters": "(IAtomContainer container, int dblBondsAdded, int bondOffSet,\n            int doubleBondMax, List<IAtom> atomsInNeedOfFix)", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> tryDoubleBondCombinations(IAtomContainer container, int dblBondsAdded, int bondOffSet,\n            int doubleBondMax, List<IAtom> atomsInNeedOfFix)", "full_signature": "private List<Integer> tryDoubleBondCombinations(IAtomContainer container, int dblBondsAdded, int bondOffSet,\n            int doubleBondMax, List<IAtom> atomsInNeedOfFix)", "class_method_signature": "InChITautomerGenerator.tryDoubleBondCombinations(IAtomContainer container, int dblBondsAdded, int bondOffSet,\n            int doubleBondMax, List<IAtom> atomsInNeedOfFix)", "testcase": false, "constructor": false}, {"identifier": "getConnectivity", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "private", "return": "int", "signature": "int getConnectivity(IAtom atom, IAtomContainer container)", "full_signature": "private int getConnectivity(IAtom atom, IAtomContainer container)", "class_method_signature": "InChITautomerGenerator.getConnectivity(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false}], "file": "tool/tautomer/src/main/java/org/openscience/cdk/tautomers/InChITautomerGenerator.java"}, "focal_method": {"identifier": "getTautomers", "parameters": "(IAtomContainer mol)", "modifiers": "public", "return": "List<IAtomContainer>", "body": "public List<IAtomContainer> getTautomers(IAtomContainer mol) throws CDKException, CloneNotSupportedException {\n\n        String opt = \"\";\n        if ((flags & KETO_ENOL) != 0)\n            opt += \" -KET\";\n        if ((flags & ONE_FIVE_SHIFT) != 0)\n            opt += \" -15T\";\n\n        InChIGenerator gen   = InChIGeneratorFactory.getInstance().getInChIGenerator(mol, opt);\n        String         inchi = gen.getInchi();\n        String         aux   = gen.getAuxInfo();\n\n        long[] amap = new long[mol.getAtomCount()];\n        InChINumbersTools.parseAuxInfo(aux, amap);\n\n        if (inchi == null)\n            throw new CDKException(InChIGenerator.class\n                    + \" failed to create an InChI for the provided molecule, InChI -> null.\");\n        return getTautomers(mol, inchi, amap);\n    }", "signature": "List<IAtomContainer> getTautomers(IAtomContainer mol)", "full_signature": "public List<IAtomContainer> getTautomers(IAtomContainer mol)", "class_method_signature": "InChITautomerGenerator.getTautomers(IAtomContainer mol)", "testcase": false, "constructor": false, "invocations": ["getInChIGenerator", "getInstance", "getInchi", "getAuxInfo", "getAtomCount", "parseAuxInfo", "getTautomers"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}