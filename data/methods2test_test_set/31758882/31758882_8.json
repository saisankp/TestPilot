{"test_class": {"identifier": "ActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int size = 1000;", "modifier": "private final", "type": "int", "declarator": "size = 1000", "var_name": "size"}], "file": "src/main/java/com/zqh/actor/ActorTest.java"}, "test_case": {"identifier": "testCounter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCounter() throws InterruptedException {\n        System.out.println(\"start time \" + System.currentTimeMillis());\n\n        CountDownLatch latch = new CountDownLatch(1);\n        final CountActor[] countActors = new CountActor[size];\n        SumActor sumActor = new SumActor(size, latch);\n\n        for (int i = 0; i < size; i++) {\n            countActors[i] = new CountActor(sumActor);\n            final int k = i;\n            new Thread(() -> {\n                for (int j = 0; j < 1000; j++) {\n                    countActors[k].addMessage((long) j);\n                }\n                countActors[k].addMessage((long) -1);\n            }).start();\n        }\n        latch.await();\n    }", "signature": "void testCounter()", "full_signature": "@Test public void testCounter()", "class_method_signature": "ActorTest.testCounter()", "testcase": true, "constructor": false, "invocations": ["println", "currentTimeMillis", "start", "addMessage", "addMessage", "await"]}, "focal_class": {"identifier": "Actor", "superclass": "", "interfaces": "implements IActor", "fields": [{"original_string": "private ConcurrentLinkedQueue<E> queue;", "modifier": "private", "type": "ConcurrentLinkedQueue<E>", "declarator": "queue", "var_name": "queue"}, {"original_string": "private ActorStatus status;", "modifier": "private", "type": "ActorStatus", "declarator": "status", "var_name": "status"}, {"original_string": "private boolean ended;", "modifier": "private", "type": "boolean", "declarator": "ended", "var_name": "ended"}], "methods": [{"identifier": "messageCount", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long messageCount()", "full_signature": "@Override public long messageCount()", "class_method_signature": "Actor.messageCount()", "testcase": false, "constructor": false}, {"identifier": "Actor", "parameters": "()", "modifiers": "public", "return": "", "signature": " Actor()", "full_signature": "public  Actor()", "class_method_signature": "Actor.Actor()", "testcase": false, "constructor": true}, {"identifier": "isEnded", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEnded()", "full_signature": "@Override public boolean isEnded()", "class_method_signature": "Actor.isEnded()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "Actor.stop()", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "@Override public", "return": "AtomicInteger", "signature": "AtomicInteger getStatus()", "full_signature": "@Override public AtomicInteger getStatus()", "class_method_signature": "Actor.getStatus()", "testcase": false, "constructor": false}, {"identifier": "doWork", "parameters": "(E message)", "modifiers": "public abstract", "return": "void", "signature": "void doWork(E message)", "full_signature": "public abstract void doWork(E message)", "class_method_signature": "Actor.doWork(E message)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "Actor.execute()", "testcase": false, "constructor": false}, {"identifier": "addMessage", "parameters": "(E message)", "modifiers": "public", "return": "void", "signature": "void addMessage(E message)", "full_signature": "public void addMessage(E message)", "class_method_signature": "Actor.addMessage(E message)", "testcase": false, "constructor": false}], "file": "src/main/java/com/zqh/actor/Actor.java"}, "focal_method": {"identifier": "addMessage", "parameters": "(E message)", "modifiers": "public", "return": "void", "body": "public void addMessage(E message) {\n        queue.offer(message);\n        GateKeeper.readyToExecute(this);\n    }", "signature": "void addMessage(E message)", "full_signature": "public void addMessage(E message)", "class_method_signature": "Actor.addMessage(E message)", "testcase": false, "constructor": false, "invocations": ["offer", "readyToExecute"]}, "repository": {"repo_id": 31758882, "url": "https://github.com/zqhxuyuan/zava", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 10325, "license": "licensed"}}