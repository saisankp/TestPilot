{"test_class": {"identifier": "UserRegistrationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UserRegistration testee;", "modifier": "private", "type": "UserRegistration", "declarator": "testee", "var_name": "testee"}, {"original_string": "private Database mockDatabase;", "modifier": "private", "type": "Database", "declarator": "mockDatabase", "var_name": "mockDatabase"}, {"original_string": "private EmailSender mockEmailSender;", "modifier": "private", "type": "EmailSender", "declarator": "mockEmailSender", "var_name": "mockEmailSender"}], "file": "app/src/test/java/io/caster/mockito/UserRegistrationTest.java"}, "test_case": {"identifier": "shouldAddNewUserToDatabaseUsingAnyMatcherCasted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAddNewUserToDatabaseUsingAnyMatcherCasted() throws UserAlreadyRegisteredException, IOException {\n        String emailAddress = \"foo@example.com\";\n        when(mockDatabase.hasUser(emailAddress)).thenReturn(false);\n\n        when(mockEmailSender\n                .sendRegistrationEmail((RegistrationEmail) any()))\n                .thenReturn(true);\n\n        testee.registerNewUser(emailAddress);\n        Mockito.verify(mockDatabase).addUser(emailAddress);\n    }", "signature": "void shouldAddNewUserToDatabaseUsingAnyMatcherCasted()", "full_signature": "@Test public void shouldAddNewUserToDatabaseUsingAnyMatcherCasted()", "class_method_signature": "UserRegistrationTest.shouldAddNewUserToDatabaseUsingAnyMatcherCasted()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "hasUser", "thenReturn", "when", "sendRegistrationEmail", "any", "registerNewUser", "addUser", "verify"]}, "focal_class": {"identifier": "UserRegistration", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Database database;", "modifier": "private", "type": "Database", "declarator": "database", "var_name": "database"}, {"original_string": "private EmailSender emailSender;", "modifier": "private", "type": "EmailSender", "declarator": "emailSender", "var_name": "emailSender"}], "methods": [{"identifier": "UserRegistration", "parameters": "(Database database, EmailSender emailSender)", "modifiers": "public", "return": "", "signature": " UserRegistration(Database database, EmailSender emailSender)", "full_signature": "public  UserRegistration(Database database, EmailSender emailSender)", "class_method_signature": "UserRegistration.UserRegistration(Database database, EmailSender emailSender)", "testcase": false, "constructor": true}, {"identifier": "registerNewUser", "parameters": "(String emailAddress)", "modifiers": "public", "return": "void", "signature": "void registerNewUser(String emailAddress)", "full_signature": "public void registerNewUser(String emailAddress)", "class_method_signature": "UserRegistration.registerNewUser(String emailAddress)", "testcase": false, "constructor": false}, {"identifier": "deleteUser", "parameters": "(String emailAddress)", "modifiers": "public", "return": "void", "signature": "void deleteUser(String emailAddress)", "full_signature": "public void deleteUser(String emailAddress)", "class_method_signature": "UserRegistration.deleteUser(String emailAddress)", "testcase": false, "constructor": false}], "file": "app/src/main/java/io/caster/mockito/UserRegistration.java"}, "focal_method": {"identifier": "registerNewUser", "parameters": "(String emailAddress)", "modifiers": "public", "return": "void", "body": "public void registerNewUser(String emailAddress) throws UserAlreadyRegisteredException, EmailFailedException {\n        if (database.hasUser(emailAddress)) {\n            throw new UserAlreadyRegisteredException();\n        }\n\n        if(!emailSender.sendRegistrationEmail(new RegistrationEmail(emailAddress))) {\n            throw new EmailFailedException();\n        }\n        database.addUser(emailAddress);\n    }", "signature": "void registerNewUser(String emailAddress)", "full_signature": "public void registerNewUser(String emailAddress)", "class_method_signature": "UserRegistration.registerNewUser(String emailAddress)", "testcase": false, "constructor": false, "invocations": ["hasUser", "sendRegistrationEmail", "addUser"]}, "repository": {"repo_id": 69711339, "url": "https://github.com/CDRussell/Mockito", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 14, "size": 132, "license": "licensed"}}