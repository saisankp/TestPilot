{"test_class": {"identifier": "AbstractColumnTest", "superclass": "", "interfaces": "implements SegmentConstants", "fields": [{"original_string": "public JDBCType type = getColumnType();", "modifier": "public", "type": "JDBCType", "declarator": "type = getColumnType()", "var_name": "type"}, {"original_string": "public static final JDBCType type2 = JDBCType.BIGINT;", "modifier": "public static final", "type": "JDBCType", "declarator": "type2 = JDBCType.BIGINT", "var_name": "type2"}, {"original_string": "private static final Object value = new Integer(10);", "modifier": "private static final", "type": "Object", "declarator": "value = new Integer(10)", "var_name": "value"}, {"original_string": "private static final Object nullValue = null;", "modifier": "private static final", "type": "Object", "declarator": "nullValue = null", "var_name": "nullValue"}, {"original_string": "private static final List<Object> nullValues = new ArrayList<>();", "modifier": "private static final", "type": "List<Object>", "declarator": "nullValues = new ArrayList<>()", "var_name": "nullValues"}, {"original_string": "private static final List<Object> values = Arrays.asList(1, 2, 3);", "modifier": "private static final", "type": "List<Object>", "declarator": "values = Arrays.asList(1, 2, 3)", "var_name": "values"}, {"original_string": "private static final BuilderContext bc = new DefaultBuilderContext();", "modifier": "private static final", "type": "BuilderContext", "declarator": "bc = new DefaultBuilderContext()", "var_name": "bc"}], "file": "das-client/src/test/java/com/ppdai/das/client/sqlbuilder/AbstractColumnTest.java"}, "test_case": {"identifier": "testIn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIn() {\n        AbstractColumn c = column();\n        assertEquals(getReferName() + \" IN ( ? )\", c.in(values).build(bc));\n        assertParam(c.in(values));\n        assertParam(c.in(Parameter.inParameter(getColumnName(), type, values)));\n        assertFail(c.in(nullValues));\n        assertExp(c.in(var(\"var\")), \"var\", type);\n        assertExp(c.in(inVar(\"var\", type)), \"var\", type);\n        \n        try {\n            c.in(inVar(\"var\", type2));\n            fail();\n        }catch (Exception e) {}\n\n        assertExp(c.in(VAR), \"VAR\", type);\n    }", "signature": "void testIn()", "full_signature": "@Test public void testIn()", "class_method_signature": "AbstractColumnTest.testIn()", "testcase": true, "constructor": false, "invocations": ["column", "assertEquals", "getReferName", "build", "in", "assertParam", "in", "assertParam", "in", "inParameter", "getColumnName", "assertFail", "in", "assertExp", "in", "var", "assertExp", "in", "inVar", "in", "inVar", "fail", "assertExp", "in"]}, "focal_class": {"identifier": "AbstractColumn", "superclass": "", "interfaces": "implements Segment", "fields": [{"original_string": "public static final String PERIOD = \".\";", "modifier": "public static final", "type": "String", "declarator": "PERIOD = \".\"", "var_name": "PERIOD"}, {"original_string": "public static final String AS = \" AS \";", "modifier": "public static final", "type": "String", "declarator": "AS = \" AS \"", "var_name": "AS"}, {"original_string": "private String columnName;", "modifier": "private", "type": "String", "declarator": "columnName", "var_name": "columnName"}, {"original_string": "private JDBCType type;", "modifier": "private", "type": "JDBCType", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "AbstractColumn", "parameters": "(String name, JDBCType type)", "modifiers": "public", "return": "", "signature": " AbstractColumn(String name, JDBCType type)", "full_signature": "public  AbstractColumn(String name, JDBCType type)", "class_method_signature": "AbstractColumn.AbstractColumn(String name, JDBCType type)", "testcase": false, "constructor": true}, {"identifier": "getTableName", "parameters": "(BuilderContext helper)", "modifiers": "public abstract", "return": "String", "signature": "String getTableName(BuilderContext helper)", "full_signature": "public abstract String getTableName(BuilderContext helper)", "class_method_signature": "AbstractColumn.getTableName(BuilderContext helper)", "testcase": false, "constructor": false}, {"identifier": "getAlias", "parameters": "()", "modifiers": "protected abstract", "return": "Optional<String>", "signature": "Optional<String> getAlias()", "full_signature": "protected abstract Optional<String> getAlias()", "class_method_signature": "AbstractColumn.getAlias()", "testcase": false, "constructor": false}, {"identifier": "getColumnName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getColumnName()", "full_signature": "public String getColumnName()", "class_method_signature": "AbstractColumn.getColumnName()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "JDBCType", "signature": "JDBCType getType()", "full_signature": "public JDBCType getType()", "class_method_signature": "AbstractColumn.getType()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(BuilderContext helper)", "modifiers": "@Override public", "return": "String", "signature": "String build(BuilderContext helper)", "full_signature": "@Override public String build(BuilderContext helper)", "class_method_signature": "AbstractColumn.build(BuilderContext helper)", "testcase": false, "constructor": false}, {"identifier": "getReference", "parameters": "(BuilderContext helper)", "modifiers": "public", "return": "String", "signature": "String getReference(BuilderContext helper)", "full_signature": "public String getReference(BuilderContext helper)", "class_method_signature": "AbstractColumn.getReference(BuilderContext helper)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractColumn.toString()", "testcase": false, "constructor": false}, {"identifier": "asc", "parameters": "()", "modifiers": "public", "return": "ColumnOrder", "signature": "ColumnOrder asc()", "full_signature": "public ColumnOrder asc()", "class_method_signature": "AbstractColumn.asc()", "testcase": false, "constructor": false}, {"identifier": "desc", "parameters": "()", "modifiers": "public", "return": "ColumnOrder", "signature": "ColumnOrder desc()", "full_signature": "public ColumnOrder desc()", "class_method_signature": "AbstractColumn.desc()", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Object value)", "modifiers": "public", "return": "Parameter", "signature": "Parameter of(Object value)", "full_signature": "public Parameter of(Object value)", "class_method_signature": "AbstractColumn.of(Object value)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(List<?> values)", "modifiers": "public", "return": "Parameter", "signature": "Parameter of(List<?> values)", "full_signature": "public Parameter of(List<?> values)", "class_method_signature": "AbstractColumn.of(List<?> values)", "testcase": false, "constructor": false}, {"identifier": "var", "parameters": "()", "modifiers": "public", "return": "ParameterDefinition", "signature": "ParameterDefinition var()", "full_signature": "public ParameterDefinition var()", "class_method_signature": "AbstractColumn.var()", "testcase": false, "constructor": false}, {"identifier": "inVar", "parameters": "()", "modifiers": "public", "return": "ParameterDefinition", "signature": "ParameterDefinition inVar()", "full_signature": "public ParameterDefinition inVar()", "class_method_signature": "AbstractColumn.inVar()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(OperatorEnum operator, Object value)", "modifiers": "private", "return": "ColumnExpression", "signature": "ColumnExpression create(OperatorEnum operator, Object value)", "full_signature": "private ColumnExpression create(OperatorEnum operator, Object value)", "class_method_signature": "AbstractColumn.create(OperatorEnum operator, Object value)", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression equal(Object value)", "full_signature": "public ColumnExpression equal(Object value)", "class_method_signature": "AbstractColumn.equal(Object value)", "testcase": false, "constructor": false}, {"identifier": "notEqual", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression notEqual(Object value)", "full_signature": "public ColumnExpression notEqual(Object value)", "class_method_signature": "AbstractColumn.notEqual(Object value)", "testcase": false, "constructor": false}, {"identifier": "greaterThan", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression greaterThan(Object value)", "full_signature": "public ColumnExpression greaterThan(Object value)", "class_method_signature": "AbstractColumn.greaterThan(Object value)", "testcase": false, "constructor": false}, {"identifier": "greaterThanOrEqual", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression greaterThanOrEqual(Object value)", "full_signature": "public ColumnExpression greaterThanOrEqual(Object value)", "class_method_signature": "AbstractColumn.greaterThanOrEqual(Object value)", "testcase": false, "constructor": false}, {"identifier": "lessThan", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression lessThan(Object value)", "full_signature": "public ColumnExpression lessThan(Object value)", "class_method_signature": "AbstractColumn.lessThan(Object value)", "testcase": false, "constructor": false}, {"identifier": "lessThanOrEqual", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression lessThanOrEqual(Object value)", "full_signature": "public ColumnExpression lessThanOrEqual(Object value)", "class_method_signature": "AbstractColumn.lessThanOrEqual(Object value)", "testcase": false, "constructor": false}, {"identifier": "eq", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression eq(Object value)", "full_signature": "public ColumnExpression eq(Object value)", "class_method_signature": "AbstractColumn.eq(Object value)", "testcase": false, "constructor": false}, {"identifier": "neq", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression neq(Object value)", "full_signature": "public ColumnExpression neq(Object value)", "class_method_signature": "AbstractColumn.neq(Object value)", "testcase": false, "constructor": false}, {"identifier": "gt", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression gt(Object value)", "full_signature": "public ColumnExpression gt(Object value)", "class_method_signature": "AbstractColumn.gt(Object value)", "testcase": false, "constructor": false}, {"identifier": "gteq", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression gteq(Object value)", "full_signature": "public ColumnExpression gteq(Object value)", "class_method_signature": "AbstractColumn.gteq(Object value)", "testcase": false, "constructor": false}, {"identifier": "lt", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression lt(Object value)", "full_signature": "public ColumnExpression lt(Object value)", "class_method_signature": "AbstractColumn.lt(Object value)", "testcase": false, "constructor": false}, {"identifier": "lteq", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression lteq(Object value)", "full_signature": "public ColumnExpression lteq(Object value)", "class_method_signature": "AbstractColumn.lteq(Object value)", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "(Object firstValue, Object secondValue)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression between(Object firstValue, Object secondValue)", "full_signature": "public ColumnExpression between(Object firstValue, Object secondValue)", "class_method_signature": "AbstractColumn.between(Object firstValue, Object secondValue)", "testcase": false, "constructor": false}, {"identifier": "notBetween", "parameters": "(Object firstValue, Object secondValue)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression notBetween(Object firstValue, Object secondValue)", "full_signature": "public ColumnExpression notBetween(Object firstValue, Object secondValue)", "class_method_signature": "AbstractColumn.notBetween(Object firstValue, Object secondValue)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(List<?> values)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression in(List<?> values)", "full_signature": "public ColumnExpression in(List<?> values)", "class_method_signature": "AbstractColumn.in(List<?> values)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(T... values)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression in(T... values)", "full_signature": "public ColumnExpression in(T... values)", "class_method_signature": "AbstractColumn.in(T... values)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(ParameterDefinition def)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression in(ParameterDefinition def)", "full_signature": "public ColumnExpression in(ParameterDefinition def)", "class_method_signature": "AbstractColumn.in(ParameterDefinition def)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(ParameterDefinition.Builder builder)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression in(ParameterDefinition.Builder builder)", "full_signature": "public ColumnExpression in(ParameterDefinition.Builder builder)", "class_method_signature": "AbstractColumn.in(ParameterDefinition.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(Parameter inParameter)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression in(Parameter inParameter)", "full_signature": "public ColumnExpression in(Parameter inParameter)", "class_method_signature": "AbstractColumn.in(Parameter inParameter)", "testcase": false, "constructor": false}, {"identifier": "notIn", "parameters": "(List<?> values)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression notIn(List<?> values)", "full_signature": "public ColumnExpression notIn(List<?> values)", "class_method_signature": "AbstractColumn.notIn(List<?> values)", "testcase": false, "constructor": false}, {"identifier": "notIn", "parameters": "(ParameterDefinition def)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression notIn(ParameterDefinition def)", "full_signature": "public ColumnExpression notIn(ParameterDefinition def)", "class_method_signature": "AbstractColumn.notIn(ParameterDefinition def)", "testcase": false, "constructor": false}, {"identifier": "notIn", "parameters": "(ParameterDefinition.Builder builder)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression notIn(ParameterDefinition.Builder builder)", "full_signature": "public ColumnExpression notIn(ParameterDefinition.Builder builder)", "class_method_signature": "AbstractColumn.notIn(ParameterDefinition.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "notIn", "parameters": "(Parameter inParameter)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression notIn(Parameter inParameter)", "full_signature": "public ColumnExpression notIn(Parameter inParameter)", "class_method_signature": "AbstractColumn.notIn(Parameter inParameter)", "testcase": false, "constructor": false}, {"identifier": "like", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression like(Object value)", "full_signature": "public ColumnExpression like(Object value)", "class_method_signature": "AbstractColumn.like(Object value)", "testcase": false, "constructor": false}, {"identifier": "notLike", "parameters": "(Object value)", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression notLike(Object value)", "full_signature": "public ColumnExpression notLike(Object value)", "class_method_signature": "AbstractColumn.notLike(Object value)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "()", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression isNull()", "full_signature": "public ColumnExpression isNull()", "class_method_signature": "AbstractColumn.isNull()", "testcase": false, "constructor": false}, {"identifier": "isNotNull", "parameters": "()", "modifiers": "public", "return": "ColumnExpression", "signature": "ColumnExpression isNotNull()", "full_signature": "public ColumnExpression isNotNull()", "class_method_signature": "AbstractColumn.isNotNull()", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/client/sqlbuilder/AbstractColumn.java"}, "focal_method": {"identifier": "in", "parameters": "(List<?> values)", "modifiers": "public", "return": "ColumnExpression", "body": "public ColumnExpression in(List<?> values) {\n        return InExpression.in(this, values);\n    }", "signature": "ColumnExpression in(List<?> values)", "full_signature": "public ColumnExpression in(List<?> values)", "class_method_signature": "AbstractColumn.in(List<?> values)", "testcase": false, "constructor": false, "invocations": ["in"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}