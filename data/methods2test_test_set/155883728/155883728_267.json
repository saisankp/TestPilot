{"test_class": {"identifier": "AdhocOpearTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/opear/AdhocOpearTest.java"}, "test_case": {"identifier": "testFromPlanFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromPlanFile() {\n        final File planFile = new File(\"src/test/resources/OpearFileTest/folders_on_classpath/plan.json\");\n        Result<AdhocOpear> opearResult = AdhocOpear.fromPlanFile(planFile, null);\n\n        assertFalse(\"opear should not be a failure\", opearResult.isFailure());\n        AdhocOpear opear = opearResult.getOrDefault(null);\n        assertNotNull(\"opear is not null\", opear);\n\n        assertEquals(\"expect planFile is referenced by default plan url\",\n                planFile.getAbsolutePath(),\n                Fun.tryOrOptional0(() -> new File(opear.getDefaultPlan().toURI()).getAbsolutePath()).get().orElse(\"\"));\n\n        assertEquals(\"expect planFile is referenced by specific plan referenced by empty plan name\",\n                planFile.getAbsolutePath(), opear.getSpecificPlan(\"\")\n                        .flatMap(Fun.result1(URL::toURI))\n                        .map(Fun.compose1(File::new, File::getAbsolutePath)).getOrDefault(\"\"));\n\n        final ClassLoader parent = getClass().getClassLoader();\n        final ClassLoader planCl = opear.getPlanClassLoader(parent);\n        assertNotSame(\"not same classloader\", parent, planCl);\n        assertSame(\"expect same parent\", parent, planCl.getParent());\n\n        assertTrue(\"expect instance of URLClassLoader\", planCl instanceof URLClassLoader);\n        final URL firstUrl = ((URLClassLoader) planCl).getURLs()[0];\n\n        assertEquals(\"expect planFile parent is referenced by first url\",\n                planFile.getParentFile().getAbsolutePath(),\n                Fun.tryOrOptional0(() -> new File(firstUrl.toURI()).getAbsolutePath()).get().orElse(\"\"));\n    }", "signature": "void testFromPlanFile()", "full_signature": "@Test public void testFromPlanFile()", "class_method_signature": "AdhocOpearTest.testFromPlanFile()", "testcase": true, "constructor": false, "invocations": ["fromPlanFile", "assertFalse", "isFailure", "getOrDefault", "assertNotNull", "assertEquals", "getAbsolutePath", "orElse", "get", "tryOrOptional0", "getAbsolutePath", "toURI", "getDefaultPlan", "assertEquals", "getAbsolutePath", "getOrDefault", "map", "flatMap", "getSpecificPlan", "result1", "compose1", "getClassLoader", "getClass", "getPlanClassLoader", "assertNotSame", "assertSame", "getParent", "assertTrue", "getURLs", "assertEquals", "getAbsolutePath", "getParentFile", "orElse", "get", "tryOrOptional0", "getAbsolutePath", "toURI"]}, "focal_class": {"identifier": "AdhocOpear", "superclass": "", "interfaces": "implements Opear", "fields": [{"original_string": "private final URL planFileUrl;", "modifier": "private final", "type": "URL", "declarator": "planFileUrl", "var_name": "planFileUrl"}, {"original_string": "private final URL baseUrl;", "modifier": "private final", "type": "URL", "declarator": "baseUrl", "var_name": "baseUrl"}], "methods": [{"identifier": "AdhocOpear", "parameters": "(final @NotNull URL planFileUrl, final @NotNull URL baseUrl)", "modifiers": "public", "return": "", "signature": " AdhocOpear(final @NotNull URL planFileUrl, final @NotNull URL baseUrl)", "full_signature": "public  AdhocOpear(final @NotNull URL planFileUrl, final @NotNull URL baseUrl)", "class_method_signature": "AdhocOpear.AdhocOpear(final @NotNull URL planFileUrl, final @NotNull URL baseUrl)", "testcase": false, "constructor": true}, {"identifier": "getDefaultPlan", "parameters": "()", "modifiers": "@Override public", "return": "URL", "signature": "URL getDefaultPlan()", "full_signature": "@Override public URL getDefaultPlan()", "class_method_signature": "AdhocOpear.getDefaultPlan()", "testcase": false, "constructor": false}, {"identifier": "getSpecificPlan", "parameters": "(final @NotNull String planName)", "modifiers": "@Override public", "return": "Result<URL>", "signature": "Result<URL> getSpecificPlan(final @NotNull String planName)", "full_signature": "@Override public Result<URL> getSpecificPlan(final @NotNull String planName)", "class_method_signature": "AdhocOpear.getSpecificPlan(final @NotNull String planName)", "testcase": false, "constructor": false}, {"identifier": "getPlanClassLoader", "parameters": "(final @NotNull ClassLoader parent)", "modifiers": "@Override public", "return": "ClassLoader", "signature": "ClassLoader getPlanClassLoader(final @NotNull ClassLoader parent)", "full_signature": "@Override public ClassLoader getPlanClassLoader(final @NotNull ClassLoader parent)", "class_method_signature": "AdhocOpear.getPlanClassLoader(final @NotNull ClassLoader parent)", "testcase": false, "constructor": false}, {"identifier": "fromPlanFile", "parameters": "(final @NotNull File planFile, final @Nullable File baseDir)", "modifiers": "public static", "return": "Result<AdhocOpear>", "signature": "Result<AdhocOpear> fromPlanFile(final @NotNull File planFile, final @Nullable File baseDir)", "full_signature": "public static Result<AdhocOpear> fromPlanFile(final @NotNull File planFile, final @Nullable File baseDir)", "class_method_signature": "AdhocOpear.fromPlanFile(final @NotNull File planFile, final @Nullable File baseDir)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/opear/AdhocOpear.java"}, "focal_method": {"identifier": "fromPlanFile", "parameters": "(final @NotNull File planFile, final @Nullable File baseDir)", "modifiers": "public static", "return": "Result<AdhocOpear>", "body": "public static Result<AdhocOpear> fromPlanFile(final @NotNull File planFile, final @Nullable File baseDir) {\n        final Function<File, Result<URL>> fnFileUrl = compose1(File::toURI, result1(URI::toURL));\n        final Result<URL> planFileUrlResult = fnFileUrl.apply(planFile);\n        return planFileUrlResult\n                .flatMap(planFileUrl -> fnFileUrl.apply(Optional.ofNullable(baseDir).orElse(planFile.getParentFile()))\n                        .flatMap(baseUrl ->\n                                OakpalPlan.fromJson(planFileUrl).map(plan ->\n                                        new AdhocOpear(planFileUrl, baseUrl))));\n    }", "signature": "Result<AdhocOpear> fromPlanFile(final @NotNull File planFile, final @Nullable File baseDir)", "full_signature": "public static Result<AdhocOpear> fromPlanFile(final @NotNull File planFile, final @Nullable File baseDir)", "class_method_signature": "AdhocOpear.fromPlanFile(final @NotNull File planFile, final @Nullable File baseDir)", "testcase": false, "constructor": false, "invocations": ["compose1", "result1", "apply", "flatMap", "flatMap", "apply", "orElse", "ofNullable", "getParentFile", "map", "fromJson"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}