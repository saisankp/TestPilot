{"test_class": {"identifier": "TestRequestDefaultHeaders", "superclass": "", "interfaces": "", "fields": [], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/client/protocol/TestRequestDefaultHeaders.java"}, "test_case": {"identifier": "testNoDefaultHeadersForConnectRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoDefaultHeadersForConnectRequest() throws Exception {\n        HttpRequest request = new BasicHttpRequest(\"CONNECT\", \"www.somedomain.com\");\n        List<Header> defheaders = new ArrayList<Header>();\n        defheaders.add(new BasicHeader(\"custom\", \"stuff\"));\n        request.getParams().setParameter(AllClientPNames.DEFAULT_HEADERS, defheaders);\n        HttpContext context = new BasicHttpContext();\n\n        HttpRequestInterceptor interceptor = new RequestDefaultHeaders();\n        interceptor.process(request, context);\n        Header header1 = request.getFirstHeader(\"custom\");\n        Assert.assertNull(header1);\n    }", "signature": "void testNoDefaultHeadersForConnectRequest()", "full_signature": "@Test public void testNoDefaultHeadersForConnectRequest()", "class_method_signature": "TestRequestDefaultHeaders.testNoDefaultHeadersForConnectRequest()", "testcase": true, "constructor": false, "invocations": ["add", "setParameter", "getParams", "process", "getFirstHeader", "assertNull"]}, "focal_class": {"identifier": "RequestDefaultHeaders", "superclass": "", "interfaces": "implements HttpRequestInterceptor", "fields": [], "methods": [{"identifier": "RequestDefaultHeaders", "parameters": "()", "modifiers": "public", "return": "", "signature": " RequestDefaultHeaders()", "full_signature": "public  RequestDefaultHeaders()", "class_method_signature": "RequestDefaultHeaders.RequestDefaultHeaders()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(final HttpRequest request, final HttpContext context)", "modifiers": "public", "return": "void", "signature": "void process(final HttpRequest request, final HttpContext context)", "full_signature": "public void process(final HttpRequest request, final HttpContext context)", "class_method_signature": "RequestDefaultHeaders.process(final HttpRequest request, final HttpContext context)", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/protocol/RequestDefaultHeaders.java"}, "focal_method": {"identifier": "process", "parameters": "(final HttpRequest request, final HttpContext context)", "modifiers": "public", "return": "void", "body": "public void process(final HttpRequest request, final HttpContext context)\n            throws HttpException, IOException {\n        if (request == null) {\n            throw new IllegalArgumentException(\"HTTP request may not be null\");\n        }\n\n        String method = request.getRequestLine().getMethod();\n        if (method.equalsIgnoreCase(\"CONNECT\")) {\n            return;\n        }\n\n        // Add default headers\n        @SuppressWarnings(\"unchecked\")\n        Collection<Header> defHeaders = (Collection<Header>) request.getParams().getParameter(\n                ClientPNames.DEFAULT_HEADERS);\n\n        if (defHeaders != null) {\n            for (Header defHeader : defHeaders) {\n                request.addHeader(defHeader);\n            }\n        }\n    }", "signature": "void process(final HttpRequest request, final HttpContext context)", "full_signature": "public void process(final HttpRequest request, final HttpContext context)", "class_method_signature": "RequestDefaultHeaders.process(final HttpRequest request, final HttpContext context)", "testcase": false, "constructor": false, "invocations": ["getMethod", "getRequestLine", "equalsIgnoreCase", "getParameter", "getParams", "addHeader"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}