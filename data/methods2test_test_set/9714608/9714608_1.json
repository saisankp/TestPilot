{"test_class": {"identifier": "TriangularStochasticLawTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/maths/mathstochastic/src/test/java/org/arakhne/afc/math/stochastic/TriangularStochasticLawTest.java"}, "test_case": {"identifier": "random", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void random() {\n\t\tassertInlineParameterUsage(TriangularStochasticLaw.class, \"random\", double.class, double.class, double.class); //$NON-NLS-1$\n\t}", "signature": "void random()", "full_signature": "@Test public void random()", "class_method_signature": "TriangularStochasticLawTest.random()", "testcase": true, "constructor": false, "invocations": ["assertInlineParameterUsage"]}, "focal_class": {"identifier": "TriangularStochasticLaw", "superclass": "extends StochasticLaw", "interfaces": "", "fields": [{"original_string": "private static final String MINX_NAME = \"minX\";", "modifier": "private static final", "type": "String", "declarator": "MINX_NAME = \"minX\"", "var_name": "MINX_NAME"}, {"original_string": "private static final String MAXX_NAME = \"maxX\";", "modifier": "private static final", "type": "String", "declarator": "MAXX_NAME = \"maxX\"", "var_name": "MAXX_NAME"}, {"original_string": "private static final String MODE_NAME = \"mode\";", "modifier": "private static final", "type": "String", "declarator": "MODE_NAME = \"mode\"", "var_name": "MODE_NAME"}, {"original_string": "private final double minX;", "modifier": "private final", "type": "double", "declarator": "minX", "var_name": "minX"}, {"original_string": "private final double mode;", "modifier": "private final", "type": "double", "declarator": "mode", "var_name": "mode"}, {"original_string": "private final double maxX;", "modifier": "private final", "type": "double", "declarator": "maxX", "var_name": "maxX"}, {"original_string": "private final double dxmode;", "modifier": "private final", "type": "double", "declarator": "dxmode", "var_name": "dxmode"}, {"original_string": "private final double delta1;", "modifier": "private final", "type": "double", "declarator": "delta1", "var_name": "delta1"}, {"original_string": "private final double delta2;", "modifier": "private final", "type": "double", "declarator": "delta2", "var_name": "delta2"}], "methods": [{"identifier": "TriangularStochasticLaw", "parameters": "(Map<String, String> parameters)", "modifiers": "public", "return": "", "signature": " TriangularStochasticLaw(Map<String, String> parameters)", "full_signature": "public  TriangularStochasticLaw(Map<String, String> parameters)", "class_method_signature": "TriangularStochasticLaw.TriangularStochasticLaw(Map<String, String> parameters)", "testcase": false, "constructor": true}, {"identifier": "TriangularStochasticLaw", "parameters": "(double minX1, double mode, double maxX1)", "modifiers": "public", "return": "", "signature": " TriangularStochasticLaw(double minX1, double mode, double maxX1)", "full_signature": "public  TriangularStochasticLaw(double minX1, double mode, double maxX1)", "class_method_signature": "TriangularStochasticLaw.TriangularStochasticLaw(double minX1, double mode, double maxX1)", "testcase": false, "constructor": true}, {"identifier": "random", "parameters": "(double minX, double mode, double maxX)", "modifiers": "@Pure @Inline(value = \"StochasticGenerator.generateRandomValue(new TriangularStochasticLaw(($1), ($2), ($3)))\", imported = {StochasticGenerator.class, TriangularStochasticLaw.class}) public static", "return": "double", "signature": "double random(double minX, double mode, double maxX)", "full_signature": "@Pure @Inline(value = \"StochasticGenerator.generateRandomValue(new TriangularStochasticLaw(($1), ($2), ($3)))\", imported = {StochasticGenerator.class, TriangularStochasticLaw.class}) public static double random(double minX, double mode, double maxX)", "class_method_signature": "TriangularStochasticLaw.random(double minX, double mode, double maxX)", "testcase": false, "constructor": false}, {"identifier": "f", "parameters": "(double x)", "modifiers": "@Pure @Override public", "return": "double", "signature": "double f(double x)", "full_signature": "@Pure @Override public double f(double x)", "class_method_signature": "TriangularStochasticLaw.f(double x)", "testcase": false, "constructor": false}, {"identifier": "getRange", "parameters": "()", "modifiers": "@Pure @Override public", "return": "MathFunctionRange[]", "signature": "MathFunctionRange[] getRange()", "full_signature": "@Pure @Override public MathFunctionRange[] getRange()", "class_method_signature": "TriangularStochasticLaw.getRange()", "testcase": false, "constructor": false}, {"identifier": "inverseF", "parameters": "(double u)", "modifiers": "@Pure @Override public", "return": "double", "signature": "double inverseF(double u)", "full_signature": "@Pure @Override public double inverseF(double u)", "class_method_signature": "TriangularStochasticLaw.inverseF(double u)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(JsonBuffer buffer)", "modifiers": "@Pure @Override public", "return": "void", "signature": "void toJson(JsonBuffer buffer)", "full_signature": "@Pure @Override public void toJson(JsonBuffer buffer)", "class_method_signature": "TriangularStochasticLaw.toJson(JsonBuffer buffer)", "testcase": false, "constructor": false}], "file": "core/maths/mathstochastic/src/main/java/org/arakhne/afc/math/stochastic/TriangularStochasticLaw.java"}, "focal_method": {"identifier": "random", "parameters": "(double minX, double mode, double maxX)", "modifiers": "@Pure @Inline(value = \"StochasticGenerator.generateRandomValue(new TriangularStochasticLaw(($1), ($2), ($3)))\", imported = {StochasticGenerator.class, TriangularStochasticLaw.class}) public static", "return": "double", "body": "@Pure\n\t@Inline(value = \"StochasticGenerator.generateRandomValue(new TriangularStochasticLaw(($1), ($2), ($3)))\",\n\t\timported = {StochasticGenerator.class, TriangularStochasticLaw.class})\n\tpublic static double random(double minX, double mode, double maxX) throws MathException {\n\t\treturn StochasticGenerator.generateRandomValue(new TriangularStochasticLaw(minX, mode, maxX));\n\t}", "signature": "double random(double minX, double mode, double maxX)", "full_signature": "@Pure @Inline(value = \"StochasticGenerator.generateRandomValue(new TriangularStochasticLaw(($1), ($2), ($3)))\", imported = {StochasticGenerator.class, TriangularStochasticLaw.class}) public static double random(double minX, double mode, double maxX)", "class_method_signature": "TriangularStochasticLaw.random(double minX, double mode, double maxX)", "testcase": false, "constructor": false, "invocations": ["generateRandomValue"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}