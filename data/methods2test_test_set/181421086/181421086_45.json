{"test_class": {"identifier": "HubTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [{"original_string": "protected OFPacketIn packetIn;", "modifier": "protected", "type": "OFPacketIn", "declarator": "packetIn", "var_name": "packetIn"}, {"original_string": "protected IPacket testPacket;", "modifier": "protected", "type": "IPacket", "declarator": "testPacket", "var_name": "testPacket"}, {"original_string": "protected byte[] testPacketSerialized;", "modifier": "protected", "type": "byte[]", "declarator": "testPacketSerialized", "var_name": "testPacketSerialized"}, {"original_string": "private MockFloodlightProvider mockFloodlightProvider;", "modifier": "private", "type": "MockFloodlightProvider", "declarator": "mockFloodlightProvider", "var_name": "mockFloodlightProvider"}, {"original_string": "private Hub hub;", "modifier": "private", "type": "Hub", "declarator": "hub", "var_name": "hub"}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/test/java/net/floodlightcontroller/hub/HubTest.java"}, "test_case": {"identifier": "testFloodBufferId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFloodBufferId() throws Exception {\n        MockFloodlightProvider mockFloodlightProvider = getMockFloodlightProvider();\n        this.packetIn = this.packetIn.createBuilder()\n        \t\t.setBufferId(OFBufferId.of(10))\n        \t\t.setXid(1)\n        \t\t.build();\n\n        OFActionOutput ao = OFFactories.getFactory(OFVersion.OF_13).actions().buildOutput().setPort(OFPort.FLOOD).build();\n    \tList<OFAction> al = new ArrayList<OFAction>();\n    \tal.add(ao);\n        // build our expected flooded packetOut\n        OFPacketOut po = OFFactories.getFactory(OFVersion.OF_13).buildPacketOut()\n        \t.setActions(al)\n            .setXid(1)\n            .setBufferId(OFBufferId.of(10))\n            .setInPort(OFPort.of(1))\n            .build();\n\n        // Mock up our expected behavior\n        IOFSwitch mockSwitch = createMock(IOFSwitch.class);\n        EasyMock.expect(mockSwitch.getOFFactory()).andReturn(OFFactories.getFactory(OFVersion.OF_13)).anyTimes();\n        Capture<OFPacketOut> wc1 = new Capture<OFPacketOut>(CaptureType.ALL);\n        mockSwitch.write(capture(wc1));\n\n        // Start recording the replay on the mocks\n        replay(mockSwitch);\n        // Get the listener and trigger the packet in\n        IOFMessageListener listener = mockFloodlightProvider.getListeners().get(\n                OFType.PACKET_IN).get(0);\n        listener.receive(mockSwitch, this.packetIn,\n                         parseAndAnnotate(this.packetIn));\n\n        // Verify the replay matched our expectations\n        verify(mockSwitch);\n        \n        assertTrue(wc1.hasCaptured());\n        OFMessage m = wc1.getValue();\n        assertEquals(po, m);\n    }", "signature": "void testFloodBufferId()", "full_signature": "@Test public void testFloodBufferId()", "class_method_signature": "HubTest.testFloodBufferId()", "testcase": true, "constructor": false, "invocations": ["getMockFloodlightProvider", "build", "setXid", "setBufferId", "createBuilder", "of", "build", "setPort", "buildOutput", "actions", "getFactory", "add", "build", "setInPort", "setBufferId", "setXid", "setActions", "buildPacketOut", "getFactory", "of", "of", "createMock", "anyTimes", "andReturn", "expect", "getOFFactory", "getFactory", "write", "capture", "replay", "get", "get", "getListeners", "receive", "parseAndAnnotate", "verify", "assertTrue", "hasCaptured", "getValue", "assertEquals"]}, "focal_class": {"identifier": "Hub", "superclass": "", "interfaces": "implements IFloodlightModule, IOFMessageListener", "fields": [{"original_string": "private IFloodlightProviderService floodlightProvider;", "modifier": "private", "type": "IFloodlightProviderService", "declarator": "floodlightProvider", "var_name": "floodlightProvider"}], "methods": [{"identifier": "setFloodlightProvider", "parameters": "(IFloodlightProviderService floodlightProvider)", "modifiers": "public", "return": "void", "signature": "void setFloodlightProvider(IFloodlightProviderService floodlightProvider)", "full_signature": "public void setFloodlightProvider(IFloodlightProviderService floodlightProvider)", "class_method_signature": "Hub.setFloodlightProvider(IFloodlightProviderService floodlightProvider)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "Hub.getName()", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "modifiers": "public", "return": "Command", "signature": "Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "full_signature": "public Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "class_method_signature": "Hub.receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "createHubFlowMod", "parameters": "(IOFSwitch sw, OFMessage msg)", "modifiers": "private", "return": "OFMessage", "signature": "OFMessage createHubFlowMod(IOFSwitch sw, OFMessage msg)", "full_signature": "private OFMessage createHubFlowMod(IOFSwitch sw, OFMessage msg)", "class_method_signature": "Hub.createHubFlowMod(IOFSwitch sw, OFMessage msg)", "testcase": false, "constructor": false}, {"identifier": "createHubPacketOut", "parameters": "(IOFSwitch sw, OFMessage msg)", "modifiers": "private", "return": "OFMessage", "signature": "OFMessage createHubPacketOut(IOFSwitch sw, OFMessage msg)", "full_signature": "private OFMessage createHubPacketOut(IOFSwitch sw, OFMessage msg)", "class_method_signature": "Hub.createHubPacketOut(IOFSwitch sw, OFMessage msg)", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPrereq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPrereq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPrereq(OFType type, String name)", "class_method_signature": "Hub.isCallbackOrderingPrereq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPostreq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPostreq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPostreq(OFType type, String name)", "class_method_signature": "Hub.isCallbackOrderingPostreq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "getModuleServices", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleServices()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleServices()", "class_method_signature": "Hub.getModuleServices()", "testcase": false, "constructor": false}, {"identifier": "getServiceImpls", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends IFloodlightService>, IFloodlightService>", "signature": "Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "full_signature": "@Override public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "class_method_signature": "Hub.getServiceImpls()", "testcase": false, "constructor": false}, {"identifier": "getModuleDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "class_method_signature": "Hub.getModuleDependencies()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(FloodlightModuleContext context)", "full_signature": "@Override public void init(FloodlightModuleContext context)", "class_method_signature": "Hub.init(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "startUp", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void startUp(FloodlightModuleContext context)", "full_signature": "@Override public void startUp(FloodlightModuleContext context)", "class_method_signature": "Hub.startUp(FloodlightModuleContext context)", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/main/java/net/floodlightcontroller/hub/Hub.java"}, "focal_method": {"identifier": "receive", "parameters": "(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "modifiers": "public", "return": "Command", "body": "public Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx) {\n    \tOFMessage outMessage;\n    \tHubType ht = HubType.USE_PACKET_OUT;\n    \tswitch (ht) {\n    \tcase USE_FLOW_MOD:\n            outMessage = createHubFlowMod(sw, msg);\n            break;\n        default:\n    \tcase USE_PACKET_OUT:\n            outMessage = createHubPacketOut(sw, msg);\n            break;\n    \t}\n        sw.write(outMessage);\n\n        return Command.CONTINUE;\n    }", "signature": "Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "full_signature": "public Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "class_method_signature": "Hub.receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "testcase": false, "constructor": false, "invocations": ["createHubFlowMod", "createHubPacketOut", "write"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}