{"test_class": {"identifier": "MessageComponentTest", "superclass": "", "interfaces": "", "fields": [], "file": "quickfixj-core/src/test/java/quickfix/MessageComponentTest.java"}, "test_case": {"identifier": "shouldNotCopyCustomTagsFromComponent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotCopyCustomTagsFromComponent() throws FieldNotFound {\n        Instrument instrument1 = new Instrument();\n        instrument1.set(new Symbol(\"EURUSD\"));\n        instrument1.set(new Product(Product.CURRENCY));\n        instrument1.set(new SecurityType(SecurityType.FOREIGN_EXCHANGE_CONTRACT));\n        instrument1.setString(12345, \"ABC\");\n        instrument1.setInt(54321, 0xCAFE);\n\n        assertEquals(\"EURUSD\", instrument1.getSymbol().getValue());\n        assertEquals(Product.CURRENCY, instrument1.getProduct().getValue());\n        assertEquals(SecurityType.FOREIGN_EXCHANGE_CONTRACT, instrument1.getSecurityType().getValue());\n        assertEquals(\"ABC\", instrument1.getString(12345));\n        assertEquals(0xCAFE, instrument1.getInt(54321));\n\n        Instrument instrument2 = new Instrument();\n        instrument2.copyFrom(instrument1);\n\n        assertEquals(\"EURUSD\", instrument2.getSymbol().getValue());\n        assertEquals(Product.CURRENCY, instrument2.getProduct().getValue());\n        assertEquals(SecurityType.FOREIGN_EXCHANGE_CONTRACT, instrument2.getSecurityType().getValue());\n\n        assertFalse(instrument2.isSetField(12345));\n        assertFalse(instrument2.isSetField(54321));\n    }", "signature": "void shouldNotCopyCustomTagsFromComponent()", "full_signature": "@Test public void shouldNotCopyCustomTagsFromComponent()", "class_method_signature": "MessageComponentTest.shouldNotCopyCustomTagsFromComponent()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "setString", "setInt", "assertEquals", "getValue", "getSymbol", "assertEquals", "getValue", "getProduct", "assertEquals", "getValue", "getSecurityType", "assertEquals", "getString", "assertEquals", "getInt", "copyFrom", "assertEquals", "getValue", "getSymbol", "assertEquals", "getValue", "getProduct", "assertEquals", "getValue", "getSecurityType", "assertFalse", "isSetField", "assertFalse", "isSetField"]}, "focal_class": {"identifier": "MessageComponent", "superclass": "extends FieldMap", "interfaces": "", "fields": [], "methods": [{"identifier": "getFields", "parameters": "()", "modifiers": "protected abstract", "return": "int[]", "signature": "int[] getFields()", "full_signature": "protected abstract int[] getFields()", "class_method_signature": "MessageComponent.getFields()", "testcase": false, "constructor": false}, {"identifier": "getGroupFields", "parameters": "()", "modifiers": "protected abstract", "return": "int[]", "signature": "int[] getGroupFields()", "full_signature": "protected abstract int[] getGroupFields()", "class_method_signature": "MessageComponent.getGroupFields()", "testcase": false, "constructor": false}, {"identifier": "MessageComponent", "parameters": "()", "modifiers": "protected", "return": "", "signature": " MessageComponent()", "full_signature": "protected  MessageComponent()", "class_method_signature": "MessageComponent.MessageComponent()", "testcase": false, "constructor": true}, {"identifier": "MessageComponent", "parameters": "(int[] fieldOrder)", "modifiers": "protected", "return": "", "signature": " MessageComponent(int[] fieldOrder)", "full_signature": "protected  MessageComponent(int[] fieldOrder)", "class_method_signature": "MessageComponent.MessageComponent(int[] fieldOrder)", "testcase": false, "constructor": true}, {"identifier": "copyFrom", "parameters": "(FieldMap fields)", "modifiers": "public", "return": "void", "signature": "void copyFrom(FieldMap fields)", "full_signature": "public void copyFrom(FieldMap fields)", "class_method_signature": "MessageComponent.copyFrom(FieldMap fields)", "testcase": false, "constructor": false}, {"identifier": "copyTo", "parameters": "(FieldMap fields)", "modifiers": "public", "return": "void", "signature": "void copyTo(FieldMap fields)", "full_signature": "public void copyTo(FieldMap fields)", "class_method_signature": "MessageComponent.copyTo(FieldMap fields)", "testcase": false, "constructor": false}], "file": "quickfixj-core/src/main/java/quickfix/MessageComponent.java"}, "focal_method": {"identifier": "copyFrom", "parameters": "(FieldMap fields)", "modifiers": "public", "return": "void", "body": "public void copyFrom(FieldMap fields) {\n        try {\n            for (int componentField : getFields()) {\n                if (fields.isSetField(componentField)) {\n                    setField(componentField, fields.getField(componentField));\n                }\n            }\n            for (int groupField : getGroupFields()) {\n                if (fields.isSetField(groupField)) {\n                    setField(groupField, fields.getField(groupField));\n                    setGroups(groupField, fields.getGroups(groupField));\n                }\n            }\n        } catch (FieldNotFound e) {\n            // should not happen\n        }\n    }", "signature": "void copyFrom(FieldMap fields)", "full_signature": "public void copyFrom(FieldMap fields)", "class_method_signature": "MessageComponent.copyFrom(FieldMap fields)", "testcase": false, "constructor": false, "invocations": ["getFields", "isSetField", "setField", "getField", "getGroupFields", "isSetField", "setField", "getField", "setGroups", "getGroups"]}, "repository": {"repo_id": 19937094, "url": "https://github.com/quickfix-j/quickfixj", "stars": 538, "created": "5/19/2014 10:04:08 AM +00:00", "updates": "2020-01-26T01:21:15+00:00", "fork": "False", "license": "licensed"}}