{"test_class": {"identifier": "DebugSingleElectronTest", "superclass": "extends AbstractSingleElectronTest", "interfaces": "", "fields": [], "file": "base/datadebug/src/test/java/org/openscience/cdk/debug/DebugSingleElectronTest.java"}, "test_case": {"identifier": "testDebugSingleElectron", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDebugSingleElectron() {\n        ISingleElectron radical = new DebugSingleElectron();\n        Assert.assertNull(radical.getAtom());\n        Assert.assertEquals(1, radical.getElectronCount().intValue());\n    }", "signature": "void testDebugSingleElectron()", "full_signature": "@Test public void testDebugSingleElectron()", "class_method_signature": "DebugSingleElectronTest.testDebugSingleElectron()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getAtom", "assertEquals", "intValue", "getElectronCount"]}, "focal_class": {"identifier": "DebugSingleElectron", "superclass": "extends SingleElectron", "interfaces": "implements ISingleElectron", "fields": [{"original_string": "private static final long serialVersionUID = -2895377834940311825L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2895377834940311825L", "var_name": "serialVersionUID"}, {"original_string": "ILoggingTool              logger           = LoggingToolFactory.createLoggingTool(DebugSingleElectron.class);", "modifier": "", "type": "ILoggingTool", "declarator": "logger           = LoggingToolFactory.createLoggingTool(DebugSingleElectron.class)", "var_name": "logger"}], "methods": [{"identifier": "DebugSingleElectron", "parameters": "()", "modifiers": "public", "return": "", "signature": " DebugSingleElectron()", "full_signature": "public  DebugSingleElectron()", "class_method_signature": "DebugSingleElectron.DebugSingleElectron()", "testcase": false, "constructor": true}, {"identifier": "DebugSingleElectron", "parameters": "(IAtom atom)", "modifiers": "public", "return": "", "signature": " DebugSingleElectron(IAtom atom)", "full_signature": "public  DebugSingleElectron(IAtom atom)", "class_method_signature": "DebugSingleElectron.DebugSingleElectron(IAtom atom)", "testcase": false, "constructor": true}, {"identifier": "getElectronCount", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getElectronCount()", "full_signature": "@Override public Integer getElectronCount()", "class_method_signature": "DebugSingleElectron.getElectronCount()", "testcase": false, "constructor": false}, {"identifier": "setElectronCount", "parameters": "(Integer electronCount)", "modifiers": "@Override public", "return": "void", "signature": "void setElectronCount(Integer electronCount)", "full_signature": "@Override public void setElectronCount(Integer electronCount)", "class_method_signature": "DebugSingleElectron.setElectronCount(Integer electronCount)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(IChemObjectListener col)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(IChemObjectListener col)", "full_signature": "@Override public void addListener(IChemObjectListener col)", "class_method_signature": "DebugSingleElectron.addListener(IChemObjectListener col)", "testcase": false, "constructor": false}, {"identifier": "getListenerCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getListenerCount()", "full_signature": "@Override public int getListenerCount()", "class_method_signature": "DebugSingleElectron.getListenerCount()", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(IChemObjectListener col)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(IChemObjectListener col)", "full_signature": "@Override public void removeListener(IChemObjectListener col)", "class_method_signature": "DebugSingleElectron.removeListener(IChemObjectListener col)", "testcase": false, "constructor": false}, {"identifier": "notifyChanged", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void notifyChanged()", "full_signature": "@Override public void notifyChanged()", "class_method_signature": "DebugSingleElectron.notifyChanged()", "testcase": false, "constructor": false}, {"identifier": "notifyChanged", "parameters": "(IChemObjectChangeEvent evt)", "modifiers": "@Override public", "return": "void", "signature": "void notifyChanged(IChemObjectChangeEvent evt)", "full_signature": "@Override public void notifyChanged(IChemObjectChangeEvent evt)", "class_method_signature": "DebugSingleElectron.notifyChanged(IChemObjectChangeEvent evt)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(Object description, Object property)", "modifiers": "@Override public", "return": "void", "signature": "void setProperty(Object description, Object property)", "full_signature": "@Override public void setProperty(Object description, Object property)", "class_method_signature": "DebugSingleElectron.setProperty(Object description, Object property)", "testcase": false, "constructor": false}, {"identifier": "removeProperty", "parameters": "(Object description)", "modifiers": "@Override public", "return": "void", "signature": "void removeProperty(Object description)", "full_signature": "@Override public void removeProperty(Object description)", "class_method_signature": "DebugSingleElectron.removeProperty(Object description)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(Object description)", "modifiers": "@Override public", "return": "T", "signature": "T getProperty(Object description)", "full_signature": "@Override public T getProperty(Object description)", "class_method_signature": "DebugSingleElectron.getProperty(Object description)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "@Override public", "return": "Map<Object, Object>", "signature": "Map<Object, Object> getProperties()", "full_signature": "@Override public Map<Object, Object> getProperties()", "class_method_signature": "DebugSingleElectron.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getID()", "full_signature": "@Override public String getID()", "class_method_signature": "DebugSingleElectron.getID()", "testcase": false, "constructor": false}, {"identifier": "setID", "parameters": "(String identifier)", "modifiers": "@Override public", "return": "void", "signature": "void setID(String identifier)", "full_signature": "@Override public void setID(String identifier)", "class_method_signature": "DebugSingleElectron.setID(String identifier)", "testcase": false, "constructor": false}, {"identifier": "setFlag", "parameters": "(int flagType, boolean flagValue)", "modifiers": "@Override public", "return": "void", "signature": "void setFlag(int flagType, boolean flagValue)", "full_signature": "@Override public void setFlag(int flagType, boolean flagValue)", "class_method_signature": "DebugSingleElectron.setFlag(int flagType, boolean flagValue)", "testcase": false, "constructor": false}, {"identifier": "getFlag", "parameters": "(int flagType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getFlag(int flagType)", "full_signature": "@Override public boolean getFlag(int flagType)", "class_method_signature": "DebugSingleElectron.getFlag(int flagType)", "testcase": false, "constructor": false}, {"identifier": "addProperties", "parameters": "(Map<Object, Object> properties)", "modifiers": "@Override public", "return": "void", "signature": "void addProperties(Map<Object, Object> properties)", "full_signature": "@Override public void addProperties(Map<Object, Object> properties)", "class_method_signature": "DebugSingleElectron.addProperties(Map<Object, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "setFlags", "parameters": "(boolean[] flagsNew)", "modifiers": "@Override public", "return": "void", "signature": "void setFlags(boolean[] flagsNew)", "full_signature": "@Override public void setFlags(boolean[] flagsNew)", "class_method_signature": "DebugSingleElectron.setFlags(boolean[] flagsNew)", "testcase": false, "constructor": false}, {"identifier": "getFlags", "parameters": "()", "modifiers": "@Override public", "return": "boolean[]", "signature": "boolean[] getFlags()", "full_signature": "@Override public boolean[] getFlags()", "class_method_signature": "DebugSingleElectron.getFlags()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "DebugSingleElectron.clone()", "testcase": false, "constructor": false}, {"identifier": "getBuilder", "parameters": "()", "modifiers": "@Override public", "return": "IChemObjectBuilder", "signature": "IChemObjectBuilder getBuilder()", "full_signature": "@Override public IChemObjectBuilder getBuilder()", "class_method_signature": "DebugSingleElectron.getBuilder()", "testcase": false, "constructor": false}, {"identifier": "getAtom", "parameters": "()", "modifiers": "@Override public", "return": "IAtom", "signature": "IAtom getAtom()", "full_signature": "@Override public IAtom getAtom()", "class_method_signature": "DebugSingleElectron.getAtom()", "testcase": false, "constructor": false}, {"identifier": "setAtom", "parameters": "(IAtom atom)", "modifiers": "@Override public", "return": "void", "signature": "void setAtom(IAtom atom)", "full_signature": "@Override public void setAtom(IAtom atom)", "class_method_signature": "DebugSingleElectron.setAtom(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(IAtom atom)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(IAtom atom)", "full_signature": "@Override public boolean contains(IAtom atom)", "class_method_signature": "DebugSingleElectron.contains(IAtom atom)", "testcase": false, "constructor": false}], "file": "base/datadebug/src/main/java/org/openscience/cdk/debug/DebugSingleElectron.java"}, "focal_method": {"identifier": "DebugSingleElectron", "parameters": "()", "modifiers": "public", "return": "", "body": "public DebugSingleElectron() {\n        super();\n    }", "signature": " DebugSingleElectron()", "full_signature": "public  DebugSingleElectron()", "class_method_signature": "DebugSingleElectron.DebugSingleElectron()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}