{"test_class": {"identifier": "KafkaOperationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(KafkaOperationsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KafkaOperationsTest.class)", "var_name": "logger"}, {"original_string": "@ClassRule\n    public static SharedKafkaTestResource sharedKafkaTestResource = new SharedKafkaTestResource();", "modifier": "@ClassRule\n    public static", "type": "SharedKafkaTestResource", "declarator": "sharedKafkaTestResource = new SharedKafkaTestResource()", "var_name": "sharedKafkaTestResource"}, {"original_string": "private final KafkaAdminFactory kafkaAdminFactory = new KafkaAdminFactory(\n        new KafkaClientConfigUtil(\n            \"./uploads\",\n            \"TestPrefix\"\n        )\n    );", "modifier": "private final", "type": "KafkaAdminFactory", "declarator": "kafkaAdminFactory = new KafkaAdminFactory(\n        new KafkaClientConfigUtil(\n            \"./uploads\",\n            \"TestPrefix\"\n        )\n    )", "var_name": "kafkaAdminFactory"}, {"original_string": "private static KafkaOperations kafkaOperations = null;", "modifier": "private static", "type": "KafkaOperations", "declarator": "kafkaOperations = null", "var_name": "kafkaOperations"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/kafka/KafkaOperationsTest.java"}, "test_case": {"identifier": "testListConsumers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testListConsumers() {\n        // First need to create a topic.\n        final String topicName = \"AnotherTestTopic-\" + System.currentTimeMillis();\n\n        // Create topic\n        sharedKafkaTestResource\n            .getKafkaTestUtils()\n            .createTopic(topicName, 1, (short) 1);\n\n        // Publish data into the topic\n        sharedKafkaTestResource\n            .getKafkaTestUtils()\n            .produceRecords(10, topicName, 0);\n\n        final String consumerId1 = \"ConsumerA\";\n        final String consumerId2 = \"ConsumerB\";\n        final String consumerPrefix = \"TestConsumer\";\n\n        consumeFromTopicAndClose(topicName, consumerId1, consumerPrefix);\n        consumeFromTopicAndClose(topicName, consumerId2, consumerPrefix);\n\n\n        // Ask for list of consumers.\n        final List<ConsumerGroupIdentifier> consumerIds = kafkaOperations.listConsumers();\n\n        // We should have two\n        assertTrue(\"Should have at least 2 consumers listed\", consumerIds.size() >= 2);\n\n        // Results may contain other consumer groups, look for ours.\n        boolean foundGroup1 = false;\n        boolean foundGroup2 = false;\n        for (final ConsumerGroupIdentifier foundConsumerGroupIds : consumerIds) {\n            if (foundConsumerGroupIds.getId().equals(consumerPrefix + \"-\" + consumerId1)) {\n                foundGroup1 = true;\n            } else if (foundConsumerGroupIds.getId().equals(consumerPrefix + \"-\" + consumerId2)) {\n                foundGroup2 = true;\n            }\n        }\n        assertTrue(\"Found consumer group 1\", foundGroup1);\n        assertTrue(\"Found consumer group 2\", foundGroup2);\n    }", "signature": "void testListConsumers()", "full_signature": "@Test public void testListConsumers()", "class_method_signature": "KafkaOperationsTest.testListConsumers()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "createTopic", "getKafkaTestUtils", "produceRecords", "getKafkaTestUtils", "consumeFromTopicAndClose", "consumeFromTopicAndClose", "listConsumers", "assertTrue", "size", "equals", "getId", "equals", "getId", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "KafkaOperations", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private final AdminClient adminClient;", "modifier": "private final", "type": "AdminClient", "declarator": "adminClient", "var_name": "adminClient"}, {"original_string": "private final KafkaConsumer<String, String> consumerClient;", "modifier": "private final", "type": "KafkaConsumer<String, String>", "declarator": "consumerClient", "var_name": "consumerClient"}], "methods": [{"identifier": "KafkaOperations", "parameters": "(final AdminClient adminClient, final KafkaConsumer<String, String> consumerClient)", "modifiers": "public", "return": "", "signature": " KafkaOperations(final AdminClient adminClient, final KafkaConsumer<String, String> consumerClient)", "full_signature": "public  KafkaOperations(final AdminClient adminClient, final KafkaConsumer<String, String> consumerClient)", "class_method_signature": "KafkaOperations.KafkaOperations(final AdminClient adminClient, final KafkaConsumer<String, String> consumerClient)", "testcase": false, "constructor": true}, {"identifier": "getAvailableTopics", "parameters": "()", "modifiers": "public", "return": "TopicList", "signature": "TopicList getAvailableTopics()", "full_signature": "public TopicList getAvailableTopics()", "class_method_signature": "KafkaOperations.getAvailableTopics()", "testcase": false, "constructor": false}, {"identifier": "getClusterNodes", "parameters": "()", "modifiers": "public", "return": "NodeList", "signature": "NodeList getClusterNodes()", "full_signature": "public NodeList getClusterNodes()", "class_method_signature": "KafkaOperations.getClusterNodes()", "testcase": false, "constructor": false}, {"identifier": "getTopicDetails", "parameters": "(final Collection<String> topics)", "modifiers": "public", "return": "Map<String, TopicDetails>", "signature": "Map<String, TopicDetails> getTopicDetails(final Collection<String> topics)", "full_signature": "public Map<String, TopicDetails> getTopicDetails(final Collection<String> topics)", "class_method_signature": "KafkaOperations.getTopicDetails(final Collection<String> topics)", "testcase": false, "constructor": false}, {"identifier": "getTopicDetails", "parameters": "(final String topic)", "modifiers": "public", "return": "TopicDetails", "signature": "TopicDetails getTopicDetails(final String topic)", "full_signature": "public TopicDetails getTopicDetails(final String topic)", "class_method_signature": "KafkaOperations.getTopicDetails(final String topic)", "testcase": false, "constructor": false}, {"identifier": "getTopicConfig", "parameters": "(final String topic)", "modifiers": "public", "return": "TopicConfig", "signature": "TopicConfig getTopicConfig(final String topic)", "full_signature": "public TopicConfig getTopicConfig(final String topic)", "class_method_signature": "KafkaOperations.getTopicConfig(final String topic)", "testcase": false, "constructor": false}, {"identifier": "getBrokerConfig", "parameters": "(final String brokerId)", "modifiers": "public", "return": "BrokerConfig", "signature": "BrokerConfig getBrokerConfig(final String brokerId)", "full_signature": "public BrokerConfig getBrokerConfig(final String brokerId)", "class_method_signature": "KafkaOperations.getBrokerConfig(final String brokerId)", "testcase": false, "constructor": false}, {"identifier": "createTopic", "parameters": "(final CreateTopic createTopic)", "modifiers": "public", "return": "boolean", "signature": "boolean createTopic(final CreateTopic createTopic)", "full_signature": "public boolean createTopic(final CreateTopic createTopic)", "class_method_signature": "KafkaOperations.createTopic(final CreateTopic createTopic)", "testcase": false, "constructor": false}, {"identifier": "alterTopicConfig", "parameters": "(final String topic, final Map<String, String> configItems)", "modifiers": "public", "return": "TopicConfig", "signature": "TopicConfig alterTopicConfig(final String topic, final Map<String, String> configItems)", "full_signature": "public TopicConfig alterTopicConfig(final String topic, final Map<String, String> configItems)", "class_method_signature": "KafkaOperations.alterTopicConfig(final String topic, final Map<String, String> configItems)", "testcase": false, "constructor": false}, {"identifier": "removeTopic", "parameters": "(final String topic)", "modifiers": "public", "return": "boolean", "signature": "boolean removeTopic(final String topic)", "full_signature": "public boolean removeTopic(final String topic)", "class_method_signature": "KafkaOperations.removeTopic(final String topic)", "testcase": false, "constructor": false}, {"identifier": "listConsumers", "parameters": "()", "modifiers": "public", "return": "List<ConsumerGroupIdentifier>", "signature": "List<ConsumerGroupIdentifier> listConsumers()", "full_signature": "public List<ConsumerGroupIdentifier> listConsumers()", "class_method_signature": "KafkaOperations.listConsumers()", "testcase": false, "constructor": false}, {"identifier": "removeConsumerGroup", "parameters": "(final String id)", "modifiers": "public", "return": "boolean", "signature": "boolean removeConsumerGroup(final String id)", "full_signature": "public boolean removeConsumerGroup(final String id)", "class_method_signature": "KafkaOperations.removeConsumerGroup(final String id)", "testcase": false, "constructor": false}, {"identifier": "getConsumerGroupDetails", "parameters": "(final String consumerGroupId)", "modifiers": "public", "return": "ConsumerGroupDetails", "signature": "ConsumerGroupDetails getConsumerGroupDetails(final String consumerGroupId)", "full_signature": "public ConsumerGroupDetails getConsumerGroupDetails(final String consumerGroupId)", "class_method_signature": "KafkaOperations.getConsumerGroupDetails(final String consumerGroupId)", "testcase": false, "constructor": false}, {"identifier": "getConsumerGroupDetails", "parameters": "(final List<String> consumerGroupIds)", "modifiers": "public", "return": "List<ConsumerGroupDetails>", "signature": "List<ConsumerGroupDetails> getConsumerGroupDetails(final List<String> consumerGroupIds)", "full_signature": "public List<ConsumerGroupDetails> getConsumerGroupDetails(final List<String> consumerGroupIds)", "class_method_signature": "KafkaOperations.getConsumerGroupDetails(final List<String> consumerGroupIds)", "testcase": false, "constructor": false}, {"identifier": "getConsumerGroupOffsets", "parameters": "(final String consumerGroupId)", "modifiers": "public", "return": "ConsumerGroupOffsets", "signature": "ConsumerGroupOffsets getConsumerGroupOffsets(final String consumerGroupId)", "full_signature": "public ConsumerGroupOffsets getConsumerGroupOffsets(final String consumerGroupId)", "class_method_signature": "KafkaOperations.getConsumerGroupOffsets(final String consumerGroupId)", "testcase": false, "constructor": false}, {"identifier": "getConsumerGroupOffsetsWithTailOffsets", "parameters": "(final String consumerGroupId)", "modifiers": "public", "return": "ConsumerGroupOffsetsWithTailPositions", "signature": "ConsumerGroupOffsetsWithTailPositions getConsumerGroupOffsetsWithTailOffsets(final String consumerGroupId)", "full_signature": "public ConsumerGroupOffsetsWithTailPositions getConsumerGroupOffsetsWithTailOffsets(final String consumerGroupId)", "class_method_signature": "KafkaOperations.getConsumerGroupOffsetsWithTailOffsets(final String consumerGroupId)", "testcase": false, "constructor": false}, {"identifier": "getTailOffsets", "parameters": "(final String topic)", "modifiers": "public", "return": "TailOffsets", "signature": "TailOffsets getTailOffsets(final String topic)", "full_signature": "public TailOffsets getTailOffsets(final String topic)", "class_method_signature": "KafkaOperations.getTailOffsets(final String topic)", "testcase": false, "constructor": false}, {"identifier": "getTailOffsets", "parameters": "(final String topic, final Collection<Integer> partitions)", "modifiers": "public", "return": "TailOffsets", "signature": "TailOffsets getTailOffsets(final String topic, final Collection<Integer> partitions)", "full_signature": "public TailOffsets getTailOffsets(final String topic, final Collection<Integer> partitions)", "class_method_signature": "KafkaOperations.getTailOffsets(final String topic, final Collection<Integer> partitions)", "testcase": false, "constructor": false}, {"identifier": "describeResource", "parameters": "(final ConfigResource configResource)", "modifiers": "private", "return": "List<ConfigItem>", "signature": "List<ConfigItem> describeResource(final ConfigResource configResource)", "full_signature": "private List<ConfigItem> describeResource(final ConfigResource configResource)", "class_method_signature": "KafkaOperations.describeResource(final ConfigResource configResource)", "testcase": false, "constructor": false}, {"identifier": "handleExecutionException", "parameters": "(final ExecutionException executionException)", "modifiers": "private", "return": "RuntimeException", "signature": "RuntimeException handleExecutionException(final ExecutionException executionException)", "full_signature": "private RuntimeException handleExecutionException(final ExecutionException executionException)", "class_method_signature": "KafkaOperations.handleExecutionException(final ExecutionException executionException)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "KafkaOperations.close()", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/kafka/KafkaOperations.java"}, "focal_method": {"identifier": "listConsumers", "parameters": "()", "modifiers": "public", "return": "List<ConsumerGroupIdentifier>", "body": "public List<ConsumerGroupIdentifier> listConsumers() {\n        // Make request\n        final ListConsumerGroupsResult results = adminClient.listConsumerGroups();\n\n        // Generate return list.\n        final List<ConsumerGroupIdentifier> consumerIds = new ArrayList<>();\n\n        try {\n            // Iterate over results\n            results\n                .all()\n                .get()\n                .forEach((result) ->  {\n                    consumerIds.add(\n                        new ConsumerGroupIdentifier(result.groupId(), result.isSimpleConsumerGroup())\n                    );\n                });\n\n            // Sort them by consumer Id.\n            consumerIds.sort(Comparator.comparing(ConsumerGroupIdentifier::getId));\n\n            // return immutable list.\n            return Collections.unmodifiableList(consumerIds);\n        } catch (final ExecutionException e) {\n            throw handleExecutionException(e);\n        } catch (final InterruptedException e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }", "signature": "List<ConsumerGroupIdentifier> listConsumers()", "full_signature": "public List<ConsumerGroupIdentifier> listConsumers()", "class_method_signature": "KafkaOperations.listConsumers()", "testcase": false, "constructor": false, "invocations": ["listConsumerGroups", "forEach", "get", "all", "add", "groupId", "isSimpleConsumerGroup", "sort", "comparing", "unmodifiableList", "handleExecutionException", "getMessage"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}