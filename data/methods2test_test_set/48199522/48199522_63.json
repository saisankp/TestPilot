{"test_class": {"identifier": "MultivariateTDistributionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MultivariateTDistributionTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MultivariateTDistributionTest.class)", "var_name": "log"}], "file": "contrib/src/test/java/macrobase/analysis/stats/distribution/MultivariateTDistributionTest.java"}, "test_case": {"identifier": "univariateMeanTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void univariateMeanTest() {\n        // Test that the probability at mean is roughly 1 / sqrt(2 * variance * PI)\n        double[][] meanCovN = {\n                {0, 1, 100},\n                {0, 1, 1000},\n                {0, 1, 10000},\n                {0, 1, 10001},\n                {0, 1, 100001},\n                {0, 1, 1000100},\n                {0, 1, 10001003},\n                {0, 2, 1000100},\n                {0, 3, 10001003},\n                {1.3, 3, 10001003},\n                {1.3, 3.2, 10001003},\n                {5.3, 8.2, 10001004},\n        };\n\n        MultivariateTDistribution multiT;\n        RealVector v = new ArrayRealVector(1);\n        for (double[] mCN : meanCovN) {\n            v.setEntry(0, mCN[0]);\n            double var = mCN[1];\n            multiT = new MultivariateTDistribution(\n                    v,\n                    MatrixUtils.createRealIdentityMatrix(1).scalarMultiply(var),\n                    (int) mCN[2]);\n            assertEquals(1. / Math.sqrt(2 * var * Math.PI), multiT.density(v), 1e-3);\n        }\n    }", "signature": "void univariateMeanTest()", "full_signature": "@Test public void univariateMeanTest()", "class_method_signature": "MultivariateTDistributionTest.univariateMeanTest()", "testcase": true, "constructor": false, "invocations": ["setEntry", "scalarMultiply", "createRealIdentityMatrix", "assertEquals", "sqrt", "density"]}, "focal_class": {"identifier": "MultivariateTDistribution", "superclass": "", "interfaces": "implements MultivariateDistribution", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MultivariateTDistribution.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MultivariateTDistribution.class)", "var_name": "log"}, {"original_string": "private RealVector mean;", "modifier": "private", "type": "RealVector", "declarator": "mean", "var_name": "mean"}, {"original_string": "private RealMatrix precisionMatrix;", "modifier": "private", "type": "RealMatrix", "declarator": "precisionMatrix", "var_name": "precisionMatrix"}, {"original_string": "private double dof;", "modifier": "private", "type": "double", "declarator": "dof", "var_name": "dof"}, {"original_string": "private int D;", "modifier": "private", "type": "int", "declarator": "D", "var_name": "D"}, {"original_string": "private double multiplier;", "modifier": "private", "type": "double", "declarator": "multiplier", "var_name": "multiplier"}], "methods": [{"identifier": "MultivariateTDistribution", "parameters": "(RealVector mean, RealMatrix covarianceMatrix, double degreesOfFreedom)", "modifiers": "public", "return": "", "signature": " MultivariateTDistribution(RealVector mean, RealMatrix covarianceMatrix, double degreesOfFreedom)", "full_signature": "public  MultivariateTDistribution(RealVector mean, RealMatrix covarianceMatrix, double degreesOfFreedom)", "class_method_signature": "MultivariateTDistribution.MultivariateTDistribution(RealVector mean, RealMatrix covarianceMatrix, double degreesOfFreedom)", "testcase": false, "constructor": true}, {"identifier": "density", "parameters": "(RealVector vector)", "modifiers": "public", "return": "double", "signature": "double density(RealVector vector)", "full_signature": "public double density(RealVector vector)", "class_method_signature": "MultivariateTDistribution.density(RealVector vector)", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/stats/distribution/MultivariateTDistribution.java"}, "focal_method": {"identifier": "density", "parameters": "(RealVector vector)", "modifiers": "public", "return": "double", "body": "public double density(RealVector vector) {\n        if (dof == 0) {\n            return 0;\n        }\n        RealVector _diff = vector.subtract(mean);\n        double prob = 1. / dof * _diff.dotProduct(precisionMatrix.operate(_diff));\n        return multiplier * Math.pow(1 + prob, -(dof + D) / 2);\n    }", "signature": "double density(RealVector vector)", "full_signature": "public double density(RealVector vector)", "class_method_signature": "MultivariateTDistribution.density(RealVector vector)", "testcase": false, "constructor": false, "invocations": ["subtract", "dotProduct", "operate", "pow"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}