{"test_class": {"identifier": "MarshallingStubUtilsTest", "superclass": "extends BaseVariantTest", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = LoggerFactory.getLogger(MarshallingStubUtilsTest.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(MarshallingStubUtilsTest.class)", "var_name": "LOG"}], "file": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/internal/utils/MarshallingStubUtilsTest.java"}, "test_case": {"identifier": "testComparablePeriod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComparablePeriod() {\n        final DMNRuntime runtime = createRuntime(\"comparablePeriod.dmn\", this.getClass());\n        final DMNModel dmnModel = runtime.getModel(\"https://kiegroup.org/dmn/_CB283B9C-8581-447E-8625-4D1186F0B3A6\", \"A1B0FA02-D1C4-4386-AF36-0280AA45A7B7\");\n        assertThat(dmnModel, notNullValue());\n\n        final DMNContext context = runtime.newContext();\n\n        final DMNResult evaluateAll = evaluateModel(runtime, dmnModel, context);\n        LOG.debug(\"{}\", evaluateAll);\n        assertThat(DMNRuntimeUtil.formatMessages(evaluateAll.getMessages()), evaluateAll.hasErrors(), is(false));\n        assertThat(evaluateAll.getDecisionResultByName(\"Decision-1\").getResult(), is(ComparablePeriod.parse(\"P3Y\")));\n\n        final Object serialized = MarshallingStubUtils.stubDMNResult(evaluateAll.getContext().getAll(), Object::toString);\n        LOG.debug(\"{}\", serialized);\n        assertThat(serialized, instanceOf(Map.class));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> asMap = (Map<String, Object>) serialized;\n        assertThat(asMap.get(\"BKM\"), instanceOf(String.class));\n        assertThat(asMap.get(\"Decision-1\"), instanceOf(java.time.Period.class));\n        assertThat(asMap.get(\"Decision-1\"), is(java.time.Period.parse(\"P3Y\")));\n    }", "signature": "void testComparablePeriod()", "full_signature": "@Test public void testComparablePeriod()", "class_method_signature": "MarshallingStubUtilsTest.testComparablePeriod()", "testcase": true, "constructor": false, "invocations": ["createRuntime", "getClass", "getModel", "assertThat", "notNullValue", "newContext", "evaluateModel", "debug", "assertThat", "formatMessages", "getMessages", "hasErrors", "is", "assertThat", "getResult", "getDecisionResultByName", "is", "parse", "stubDMNResult", "getAll", "getContext", "debug", "assertThat", "instanceOf", "assertThat", "get", "instanceOf", "assertThat", "get", "instanceOf", "assertThat", "get", "is", "parse"]}, "focal_class": {"identifier": "MarshallingStubUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "stubDMNResult", "parameters": "(Object result, Function<Object, Object> stubbingWrapper)", "modifiers": "public static", "return": "Object", "signature": "Object stubDMNResult(Object result, Function<Object, Object> stubbingWrapper)", "full_signature": "public static Object stubDMNResult(Object result, Function<Object, Object> stubbingWrapper)", "class_method_signature": "MarshallingStubUtils.stubDMNResult(Object result, Function<Object, Object> stubbingWrapper)", "testcase": false, "constructor": false}, {"identifier": "MarshallingStubUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " MarshallingStubUtils()", "full_signature": "private  MarshallingStubUtils()", "class_method_signature": "MarshallingStubUtils.MarshallingStubUtils()", "testcase": false, "constructor": true}], "file": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/internal/utils/MarshallingStubUtils.java"}, "focal_method": {"identifier": "stubDMNResult", "parameters": "(Object result, Function<Object, Object> stubbingWrapper)", "modifiers": "public static", "return": "Object", "body": "public static Object stubDMNResult(Object result, Function<Object, Object> stubbingWrapper) {\n        if (result instanceof DMNContext) {\n            Map<String, Object> stubbedContextValues = new HashMap<>();\n            for (Entry<String, Object> kv : ((DMNContext) result).getAll().entrySet()) {\n                stubbedContextValues.put(kv.getKey(), stubDMNResult(kv.getValue(), stubbingWrapper));\n            }\n            return MapBackedDMNContext.of(stubbedContextValues);\n        } else if (result instanceof Map<?, ?>) {\n            Map<Object, Object> stubbedValues = new HashMap<>();\n            for (Entry<?, ?> kv : ((Map<?, ?>) result).entrySet()) {\n                stubbedValues.put(kv.getKey(), stubDMNResult(kv.getValue(), stubbingWrapper));\n            }\n            return stubbedValues;\n        } else if (result instanceof List<?>) {\n            List<?> stubbedValues = ((List<?>) result).stream().map(r -> stubDMNResult(r, stubbingWrapper)).collect(Collectors.toList());\n            return stubbedValues;\n        } else if (result instanceof Set<?>) {\n            Set<?> stubbedValues = ((Set<?>) result).stream().map(r -> stubDMNResult(r, stubbingWrapper)).collect(Collectors.toSet());\n            return stubbedValues;\n        } else if (result instanceof ComparablePeriod) {\n            return ((ComparablePeriod) result).asPeriod();\n        } else if (result != null && result.getClass().getPackage().getName().startsWith(\"org.kie.dmn\")) {\n            return stubbingWrapper.apply(result);\n        }\n        return result;\n    }", "signature": "Object stubDMNResult(Object result, Function<Object, Object> stubbingWrapper)", "full_signature": "public static Object stubDMNResult(Object result, Function<Object, Object> stubbingWrapper)", "class_method_signature": "MarshallingStubUtils.stubDMNResult(Object result, Function<Object, Object> stubbingWrapper)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getAll", "put", "getKey", "stubDMNResult", "getValue", "of", "entrySet", "put", "getKey", "stubDMNResult", "getValue", "collect", "map", "stream", "stubDMNResult", "toList", "collect", "map", "stream", "stubDMNResult", "toSet", "asPeriod", "startsWith", "getName", "getPackage", "getClass", "apply"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}