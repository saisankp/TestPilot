{"test_class": {"identifier": "NamespacedEntityIdWithTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final EntityType ENTITY_TYPE_PLUMBUS = EntityType.of(\"plumbus\");", "modifier": "private static final", "type": "EntityType", "declarator": "ENTITY_TYPE_PLUMBUS = EntityType.of(\"plumbus\")", "var_name": "ENTITY_TYPE_PLUMBUS"}, {"original_string": "private static final EntityType ENTITY_TYPE_GRUMBO = EntityType.of(\"grumbo\");", "modifier": "private static final", "type": "EntityType", "declarator": "ENTITY_TYPE_GRUMBO = EntityType.of(\"grumbo\")", "var_name": "ENTITY_TYPE_GRUMBO"}, {"original_string": "@Parameterized.Parameter\n    public CompatibilityCheckParameter parameter;", "modifier": "@Parameterized.Parameter\n    public", "type": "CompatibilityCheckParameter", "declarator": "parameter", "var_name": "parameter"}], "file": "model/base/src/test/java/org/eclipse/ditto/model/base/entity/id/NamespacedEntityIdWithTypeTest.java"}, "test_case": {"identifier": "isCompatibleOrThrowBehavesCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isCompatibleOrThrowBehavesCorrectly() {\n        if (parameter.shouldBeCompatible) {\n            assertThat(parameter.blue.isCompatibleOrThrow(parameter.green)).isTrue();\n        } else {\n            assertThatIllegalArgumentException()\n                    .isThrownBy(() -> parameter.blue.isCompatibleOrThrow(parameter.green))\n                    .withMessage(\"The entity ID <%s> is not compatible with <%s>!\", parameter.green, parameter.blue)\n                    .withNoCause();\n        }\n    }", "signature": "void isCompatibleOrThrowBehavesCorrectly()", "full_signature": "@Test public void isCompatibleOrThrowBehavesCorrectly()", "class_method_signature": "NamespacedEntityIdWithTypeTest.isCompatibleOrThrowBehavesCorrectly()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "isCompatibleOrThrow", "withNoCause", "withMessage", "isThrownBy", "assertThatIllegalArgumentException", "isCompatibleOrThrow"]}, "focal_class": {"identifier": "NamespacedEntityIdWithType", "superclass": "extends EntityIdWithType", "interfaces": "implements NamespacedEntityId", "fields": [{"original_string": "private final NamespacedEntityId namespacedEntityId;", "modifier": "private final", "type": "NamespacedEntityId", "declarator": "namespacedEntityId", "var_name": "namespacedEntityId"}], "methods": [{"identifier": "NamespacedEntityIdWithType", "parameters": "(final NamespacedEntityId namespacedEntityId)", "modifiers": "protected", "return": "", "signature": " NamespacedEntityIdWithType(final NamespacedEntityId namespacedEntityId)", "full_signature": "protected  NamespacedEntityIdWithType(final NamespacedEntityId namespacedEntityId)", "class_method_signature": "NamespacedEntityIdWithType.NamespacedEntityIdWithType(final NamespacedEntityId namespacedEntityId)", "testcase": false, "constructor": true}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getNamespace()", "full_signature": "@Override public String getNamespace()", "class_method_signature": "NamespacedEntityIdWithType.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "NamespacedEntityIdWithType.getName()", "testcase": false, "constructor": false}, {"identifier": "isCompatibleOrThrow", "parameters": "(@Nullable final EntityIdWithType otherEntityId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId)", "full_signature": "@Override public boolean isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId)", "class_method_signature": "NamespacedEntityIdWithType.isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId)", "testcase": false, "constructor": false}, {"identifier": "isNamespaceAndNameCompatible", "parameters": "(final NamespacedEntityId otherEntityId)", "modifiers": "private", "return": "boolean", "signature": "boolean isNamespaceAndNameCompatible(final NamespacedEntityId otherEntityId)", "full_signature": "private boolean isNamespaceAndNameCompatible(final NamespacedEntityId otherEntityId)", "class_method_signature": "NamespacedEntityIdWithType.isNamespaceAndNameCompatible(final NamespacedEntityId otherEntityId)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object o)", "full_signature": "@Override public boolean equals(@Nullable final Object o)", "class_method_signature": "NamespacedEntityIdWithType.equals(@Nullable final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "NamespacedEntityIdWithType.hashCode()", "testcase": false, "constructor": false}], "file": "model/base/src/main/java/org/eclipse/ditto/model/base/entity/id/NamespacedEntityIdWithType.java"}, "focal_method": {"identifier": "isCompatibleOrThrow", "parameters": "(@Nullable final EntityIdWithType otherEntityId)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId) {\n        final boolean result;\n        if (null == otherEntityId) {\n            result = false;\n        } else if (equals(otherEntityId)) {\n            result = true;\n        } else if (!Objects.equals(getEntityType(), otherEntityId.getEntityType())) {\n            result = false;\n        } else if (otherEntityId instanceof NamespacedEntityIdWithType) {\n            result = isNamespaceAndNameCompatible((NamespacedEntityId) otherEntityId);\n        } else {\n            result = false;\n        }\n        if (!result) {\n            throw getIllegalArgumentExceptionForDifferentEntityIds(otherEntityId);\n        }\n        return result;\n    }", "signature": "boolean isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId)", "full_signature": "@Override public boolean isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId)", "class_method_signature": "NamespacedEntityIdWithType.isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "getEntityType", "getEntityType", "isNamespaceAndNameCompatible", "getIllegalArgumentExceptionForDifferentEntityIds"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}