{"test_class": {"identifier": "PdfPageLabelsTest", "superclass": "", "interfaces": "", "fields": [], "file": "itext/src/test/java/com/itextpdf/text/pdf/PdfPageLabelsTest.java"}, "test_case": {"identifier": "testGetPageLabels", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPageLabels() throws Exception {\n        File testFile = TestResourceUtils.getResourceAsTempFile(this, \"test-prefix-reset.pdf\");\n        String[] expectedPageLabels = new String[] {\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"1\", \"2\", \"3\", \"4\", \"5\", \"G1\", \"G2\", \"G3\", \"G4\", \"G5\", \"6\", \"7\", \"8\", \"9\", \"10\"};\n\n        PdfReader reader = new PdfReader(testFile.getAbsolutePath());\n\n        String[] pageLabels = PdfPageLabels.getPageLabels(reader);\n\n        Assert.assertNotNull(pageLabels);\n        Assert.assertEquals(expectedPageLabels.length, pageLabels.length);\n\n        for (int page = 0; page < pageLabels.length; page++) {\n            Assert.assertEquals(expectedPageLabels[page], pageLabels[page]);\n        }\n\n        reader.close();\n    }", "signature": "void testGetPageLabels()", "full_signature": "@Test public void testGetPageLabels()", "class_method_signature": "PdfPageLabelsTest.testGetPageLabels()", "testcase": true, "constructor": false, "invocations": ["getResourceAsTempFile", "getAbsolutePath", "getPageLabels", "assertNotNull", "assertEquals", "assertEquals", "close"]}, "focal_class": {"identifier": "PdfPageLabels", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int DECIMAL_ARABIC_NUMERALS = 0;", "modifier": "public static final", "type": "int", "declarator": "DECIMAL_ARABIC_NUMERALS = 0", "var_name": "DECIMAL_ARABIC_NUMERALS"}, {"original_string": "public static final int UPPERCASE_ROMAN_NUMERALS = 1;", "modifier": "public static final", "type": "int", "declarator": "UPPERCASE_ROMAN_NUMERALS = 1", "var_name": "UPPERCASE_ROMAN_NUMERALS"}, {"original_string": "public static final int LOWERCASE_ROMAN_NUMERALS = 2;", "modifier": "public static final", "type": "int", "declarator": "LOWERCASE_ROMAN_NUMERALS = 2", "var_name": "LOWERCASE_ROMAN_NUMERALS"}, {"original_string": "public static final int UPPERCASE_LETTERS = 3;", "modifier": "public static final", "type": "int", "declarator": "UPPERCASE_LETTERS = 3", "var_name": "UPPERCASE_LETTERS"}, {"original_string": "public static final int LOWERCASE_LETTERS = 4;", "modifier": "public static final", "type": "int", "declarator": "LOWERCASE_LETTERS = 4", "var_name": "LOWERCASE_LETTERS"}, {"original_string": "public static final int EMPTY = 5;", "modifier": "public static final", "type": "int", "declarator": "EMPTY = 5", "var_name": "EMPTY"}, {"original_string": "static PdfName numberingStyle[] = new PdfName[]{PdfName.D, PdfName.R,\n                new PdfName(\"r\"), PdfName.A, new PdfName(\"a\")};", "modifier": "static", "type": "PdfName", "declarator": "numberingStyle[] = new PdfName[]{PdfName.D, PdfName.R,\n                new PdfName(\"r\"), PdfName.A, new PdfName(\"a\")}", "var_name": "numberingStyle"}, {"original_string": "private HashMap<Integer, PdfDictionary> map;", "modifier": "private", "type": "HashMap<Integer, PdfDictionary>", "declarator": "map", "var_name": "map"}], "methods": [{"identifier": "PdfPageLabels", "parameters": "()", "modifiers": "public", "return": "", "signature": " PdfPageLabels()", "full_signature": "public  PdfPageLabels()", "class_method_signature": "PdfPageLabels.PdfPageLabels()", "testcase": false, "constructor": true}, {"identifier": "addPageLabel", "parameters": "(int page, int numberStyle, String text, int firstPage)", "modifiers": "public", "return": "void", "signature": "void addPageLabel(int page, int numberStyle, String text, int firstPage)", "full_signature": "public void addPageLabel(int page, int numberStyle, String text, int firstPage)", "class_method_signature": "PdfPageLabels.addPageLabel(int page, int numberStyle, String text, int firstPage)", "testcase": false, "constructor": false}, {"identifier": "addPageLabel", "parameters": "(int page, int numberStyle, String text, int firstPage, boolean includeFirstPage)", "modifiers": "public", "return": "void", "signature": "void addPageLabel(int page, int numberStyle, String text, int firstPage, boolean includeFirstPage)", "full_signature": "public void addPageLabel(int page, int numberStyle, String text, int firstPage, boolean includeFirstPage)", "class_method_signature": "PdfPageLabels.addPageLabel(int page, int numberStyle, String text, int firstPage, boolean includeFirstPage)", "testcase": false, "constructor": false}, {"identifier": "addPageLabel", "parameters": "(int page, int numberStyle, String text)", "modifiers": "public", "return": "void", "signature": "void addPageLabel(int page, int numberStyle, String text)", "full_signature": "public void addPageLabel(int page, int numberStyle, String text)", "class_method_signature": "PdfPageLabels.addPageLabel(int page, int numberStyle, String text)", "testcase": false, "constructor": false}, {"identifier": "addPageLabel", "parameters": "(int page, int numberStyle)", "modifiers": "public", "return": "void", "signature": "void addPageLabel(int page, int numberStyle)", "full_signature": "public void addPageLabel(int page, int numberStyle)", "class_method_signature": "PdfPageLabels.addPageLabel(int page, int numberStyle)", "testcase": false, "constructor": false}, {"identifier": "addPageLabel", "parameters": "(PdfPageLabelFormat format)", "modifiers": "public", "return": "void", "signature": "void addPageLabel(PdfPageLabelFormat format)", "full_signature": "public void addPageLabel(PdfPageLabelFormat format)", "class_method_signature": "PdfPageLabels.addPageLabel(PdfPageLabelFormat format)", "testcase": false, "constructor": false}, {"identifier": "removePageLabel", "parameters": "(int page)", "modifiers": "public", "return": "void", "signature": "void removePageLabel(int page)", "full_signature": "public void removePageLabel(int page)", "class_method_signature": "PdfPageLabels.removePageLabel(int page)", "testcase": false, "constructor": false}, {"identifier": "getDictionary", "parameters": "(PdfWriter writer)", "modifiers": "public", "return": "PdfDictionary", "signature": "PdfDictionary getDictionary(PdfWriter writer)", "full_signature": "public PdfDictionary getDictionary(PdfWriter writer)", "class_method_signature": "PdfPageLabels.getDictionary(PdfWriter writer)", "testcase": false, "constructor": false}, {"identifier": "getPageLabels", "parameters": "(PdfReader reader)", "modifiers": "public static", "return": "String[]", "signature": "String[] getPageLabels(PdfReader reader)", "full_signature": "public static String[] getPageLabels(PdfReader reader)", "class_method_signature": "PdfPageLabels.getPageLabels(PdfReader reader)", "testcase": false, "constructor": false}, {"identifier": "getPageLabelFormats", "parameters": "(PdfReader reader)", "modifiers": "public static", "return": "PdfPageLabelFormat[]", "signature": "PdfPageLabelFormat[] getPageLabelFormats(PdfReader reader)", "full_signature": "public static PdfPageLabelFormat[] getPageLabelFormats(PdfReader reader)", "class_method_signature": "PdfPageLabels.getPageLabelFormats(PdfReader reader)", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/pdf/PdfPageLabels.java"}, "focal_method": {"identifier": "getPageLabels", "parameters": "(PdfReader reader)", "modifiers": "public static", "return": "String[]", "body": "public static String[] getPageLabels(PdfReader reader) {\n        int n = reader.getNumberOfPages();\n\n        PdfDictionary dict = reader.getCatalog();\n        PdfDictionary labels = (PdfDictionary)PdfReader.getPdfObjectRelease(dict.get(PdfName.PAGELABELS));\n\n        if (labels == null)\n            return null;\n\n        String[] labelstrings = new String[n];\n\n        HashMap<Integer, PdfObject> numberTree = PdfNumberTree.readTree(labels);\n\n        int pagecount = 1;\n        Integer current;\n        String prefix = \"\";\n        char type = 'D';\n        for (int i = 0; i < n; i++) {\n            current = Integer.valueOf(i);\n            if (numberTree.containsKey(current)) {\n                PdfDictionary d = (PdfDictionary)PdfReader.getPdfObjectRelease(numberTree.get(current));\n                if (d.contains(PdfName.ST)) {\n                    pagecount = ((PdfNumber)d.get(PdfName.ST)).intValue();\n                }\n                else {\n                    pagecount = 1;\n                }\n                if (d.contains(PdfName.P)) {\n                    prefix = ((PdfString)d.get(PdfName.P)).toUnicodeString();\n                }\n                else {\n                    prefix = \"\";\n                }\n                if (d.contains(PdfName.S)) {\n                    type = ((PdfName)d.get(PdfName.S)).toString().charAt(1);\n                }\n                else {\n                    type = 'e';\n                }\n            }\n            switch(type) {\n                default:\n                    labelstrings[i] = prefix + pagecount;\n                    break;\n                case 'R':\n                    labelstrings[i] = prefix + RomanNumberFactory.getUpperCaseString(pagecount);\n                    break;\n                case 'r':\n                    labelstrings[i] = prefix + RomanNumberFactory.getLowerCaseString(pagecount);\n                    break;\n                case 'A':\n                    labelstrings[i] = prefix + RomanAlphabetFactory.getUpperCaseString(pagecount);\n                    break;\n                case 'a':\n                    labelstrings[i] = prefix + RomanAlphabetFactory.getLowerCaseString(pagecount);\n                    break;\n                case 'e':\n                    labelstrings[i] = prefix;\n                    break;\n            }\n            pagecount++;\n        }\n        return labelstrings;\n    }", "signature": "String[] getPageLabels(PdfReader reader)", "full_signature": "public static String[] getPageLabels(PdfReader reader)", "class_method_signature": "PdfPageLabels.getPageLabels(PdfReader reader)", "testcase": false, "constructor": false, "invocations": ["getNumberOfPages", "getCatalog", "getPdfObjectRelease", "get", "readTree", "valueOf", "containsKey", "getPdfObjectRelease", "get", "contains", "intValue", "get", "contains", "toUnicodeString", "get", "contains", "charAt", "toString", "get", "getUpperCaseString", "getLowerCaseString", "getUpperCaseString", "getLowerCaseString"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}