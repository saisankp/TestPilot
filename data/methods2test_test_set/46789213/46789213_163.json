{"test_class": {"identifier": "TestByteArrayHelper", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestByteArrayHelper.java"}, "test_case": {"identifier": "testIllegalXorList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIllegalXorList() {\n    List<byte[]> list1 = new ArrayList<>();\n    List<byte[]> list2 = new ArrayList<>();\n    list1.add(new byte[12]);\n    list1.add(new byte[15]);\n    list2.add(new byte[12]);\n    list2.add(new byte[15]);\n    list2.add(new byte[1]);\n    boolean thrown = false;\n    try {\n      ByteArrayHelper.xor(list1, list2);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"The vectors are not of equal length\", e.getMessage());\n      thrown = true;\n    }\n    assertEquals(thrown, true);\n\n    thrown = false;\n    list1.add(new byte[2]);\n    try {\n      ByteArrayHelper.xor(list1, list2);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"The byte arrays are not of equal length\", e.getMessage());\n      thrown = true;\n    }\n    assertEquals(thrown, true);\n  }", "signature": "void testIllegalXorList()", "full_signature": "@Test public void testIllegalXorList()", "class_method_signature": "TestByteArrayHelper.testIllegalXorList()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "xor", "assertEquals", "getMessage", "assertEquals", "add", "xor", "assertEquals", "getMessage", "assertEquals"]}, "focal_class": {"identifier": "ByteArrayHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ByteArrayHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " ByteArrayHelper()", "full_signature": "private  ByteArrayHelper()", "class_method_signature": "ByteArrayHelper.ByteArrayHelper()", "testcase": false, "constructor": true}, {"identifier": "getBit", "parameters": "(byte[] input, int index)", "modifiers": "public static", "return": "boolean", "signature": "boolean getBit(byte[] input, int index)", "full_signature": "public static boolean getBit(byte[] input, int index)", "class_method_signature": "ByteArrayHelper.getBit(byte[] input, int index)", "testcase": false, "constructor": false}, {"identifier": "setBit", "parameters": "(byte[] input, int index, boolean choice)", "modifiers": "public static", "return": "void", "signature": "void setBit(byte[] input, int index, boolean choice)", "full_signature": "public static void setBit(byte[] input, int index, boolean choice)", "class_method_signature": "ByteArrayHelper.setBit(byte[] input, int index, boolean choice)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(List<byte[]> vector1, List<byte[]> vector2)", "modifiers": "public static", "return": "void", "signature": "void xor(List<byte[]> vector1, List<byte[]> vector2)", "full_signature": "public static void xor(List<byte[]> vector1, List<byte[]> vector2)", "class_method_signature": "ByteArrayHelper.xor(List<byte[]> vector1, List<byte[]> vector2)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(byte[] arr1, byte[] arr2)", "modifiers": "public static", "return": "void", "signature": "void xor(byte[] arr1, byte[] arr2)", "full_signature": "public static void xor(byte[] arr1, byte[] arr2)", "class_method_signature": "ByteArrayHelper.xor(byte[] arr1, byte[] arr2)", "testcase": false, "constructor": false}, {"identifier": "shiftArray", "parameters": "(byte[] input, byte[] output, int positions)", "modifiers": "public static", "return": "void", "signature": "void shiftArray(byte[] input, byte[] output, int positions)", "full_signature": "public static void shiftArray(byte[] input, byte[] output, int positions)", "class_method_signature": "ByteArrayHelper.shiftArray(byte[] input, byte[] output, int positions)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/ByteArrayHelper.java"}, "focal_method": {"identifier": "xor", "parameters": "(List<byte[]> vector1, List<byte[]> vector2)", "modifiers": "public static", "return": "void", "body": "public static void xor(List<byte[]> vector1, List<byte[]> vector2) {\n    if (vector1.size() != vector2.size()) {\n      throw new IllegalArgumentException(\"The vectors are not of equal length\");\n    }\n    for (int i = 0; i < vector1.size(); i++) {\n      xor(vector1.get(i), vector2.get(i));\n    }\n  }", "signature": "void xor(List<byte[]> vector1, List<byte[]> vector2)", "full_signature": "public static void xor(List<byte[]> vector1, List<byte[]> vector2)", "class_method_signature": "ByteArrayHelper.xor(List<byte[]> vector1, List<byte[]> vector2)", "testcase": false, "constructor": false, "invocations": ["size", "size", "size", "xor", "get", "get"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}