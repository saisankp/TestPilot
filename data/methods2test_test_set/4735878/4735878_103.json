{"test_class": {"identifier": "RotateTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/core-map/src/test/java/org/orbisgis/coremap/renderer/se/transform/RotateTest.java"}, "test_case": {"identifier": "testRotateToAffine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRotateToAffine() throws ParameterException {\n            Rotate r = new Rotate(new RealLiteral(45), new RealLiteral(8), new RealLiteral(7));\n            AffineTransform af = r.getAffineTransform(null, Uom.PX, new MapTransform(), 0.0, 0.0);\n            assertTrue((af.getType() & AffineTransform.TYPE_GENERAL_ROTATION) != 0);\n            assertFalse((af.getType() & AffineTransform.TYPE_FLIP) != 0);\n    }", "signature": "void testRotateToAffine()", "full_signature": "@Test public void testRotateToAffine()", "class_method_signature": "RotateTest.testRotateToAffine()", "testcase": true, "constructor": false, "invocations": ["getAffineTransform", "assertTrue", "getType", "assertFalse", "getType"]}, "focal_class": {"identifier": "Rotate", "superclass": "extends AbstractSymbolizerNode", "interfaces": "implements Transformation", "fields": [{"original_string": "private RealParameter x;", "modifier": "private", "type": "RealParameter", "declarator": "x", "var_name": "x"}, {"original_string": "private RealParameter y;", "modifier": "private", "type": "RealParameter", "declarator": "y", "var_name": "y"}, {"original_string": "private RealParameter rotation;", "modifier": "private", "type": "RealParameter", "declarator": "rotation", "var_name": "rotation"}], "methods": [{"identifier": "Rotate", "parameters": "(RealParameter rotation)", "modifiers": "public", "return": "", "signature": " Rotate(RealParameter rotation)", "full_signature": "public  Rotate(RealParameter rotation)", "class_method_signature": "Rotate.Rotate(RealParameter rotation)", "testcase": false, "constructor": true}, {"identifier": "Rotate", "parameters": "(RealParameter rotation, RealParameter ox, RealParameter oy)", "modifiers": "public", "return": "", "signature": " Rotate(RealParameter rotation, RealParameter ox, RealParameter oy)", "full_signature": "public  Rotate(RealParameter rotation, RealParameter ox, RealParameter oy)", "class_method_signature": "Rotate.Rotate(RealParameter rotation, RealParameter ox, RealParameter oy)", "testcase": false, "constructor": true}, {"identifier": "Rotate", "parameters": "(RotateType r)", "modifiers": "", "return": "", "signature": " Rotate(RotateType r)", "full_signature": "  Rotate(RotateType r)", "class_method_signature": "Rotate.Rotate(RotateType r)", "testcase": false, "constructor": true}, {"identifier": "getRotation", "parameters": "()", "modifiers": "public", "return": "RealParameter", "signature": "RealParameter getRotation()", "full_signature": "public RealParameter getRotation()", "class_method_signature": "Rotate.getRotation()", "testcase": false, "constructor": false}, {"identifier": "setRotation", "parameters": "(RealParameter rotation)", "modifiers": "public", "return": "void", "signature": "void setRotation(RealParameter rotation)", "full_signature": "public void setRotation(RealParameter rotation)", "class_method_signature": "Rotate.setRotation(RealParameter rotation)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "()", "modifiers": "public", "return": "RealParameter", "signature": "RealParameter getX()", "full_signature": "public RealParameter getX()", "class_method_signature": "Rotate.getX()", "testcase": false, "constructor": false}, {"identifier": "setX", "parameters": "(RealParameter x)", "modifiers": "public", "return": "void", "signature": "void setX(RealParameter x)", "full_signature": "public void setX(RealParameter x)", "class_method_signature": "Rotate.setX(RealParameter x)", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "()", "modifiers": "public", "return": "RealParameter", "signature": "RealParameter getY()", "full_signature": "public RealParameter getY()", "class_method_signature": "Rotate.getY()", "testcase": false, "constructor": false}, {"identifier": "setY", "parameters": "(RealParameter y)", "modifiers": "public", "return": "void", "signature": "void setY(RealParameter y)", "full_signature": "public void setY(RealParameter y)", "class_method_signature": "Rotate.setY(RealParameter y)", "testcase": false, "constructor": false}, {"identifier": "allowedForGeometries", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean allowedForGeometries()", "full_signature": "@Override public boolean allowedForGeometries()", "class_method_signature": "Rotate.allowedForGeometries()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "@Override public", "return": "List<SymbolizerNode>", "signature": "List<SymbolizerNode> getChildren()", "full_signature": "@Override public List<SymbolizerNode> getChildren()", "class_method_signature": "Rotate.getChildren()", "testcase": false, "constructor": false}, {"identifier": "getAffineTransform", "parameters": "(Map<String,Object> map, Uom uom,\n                        MapTransform mt, Double width, Double height)", "modifiers": "@Override public", "return": "AffineTransform", "signature": "AffineTransform getAffineTransform(Map<String,Object> map, Uom uom,\n                        MapTransform mt, Double width, Double height)", "full_signature": "@Override public AffineTransform getAffineTransform(Map<String,Object> map, Uom uom,\n                        MapTransform mt, Double width, Double height)", "class_method_signature": "Rotate.getAffineTransform(Map<String,Object> map, Uom uom,\n                        MapTransform mt, Double width, Double height)", "testcase": false, "constructor": false}, {"identifier": "getJAXBElement", "parameters": "()", "modifiers": "@Override public", "return": "JAXBElement<?>", "signature": "JAXBElement<?> getJAXBElement()", "full_signature": "@Override public JAXBElement<?> getJAXBElement()", "class_method_signature": "Rotate.getJAXBElement()", "testcase": false, "constructor": false}, {"identifier": "getJAXBType", "parameters": "()", "modifiers": "@Override public", "return": "RotateType", "signature": "RotateType getJAXBType()", "full_signature": "@Override public RotateType getJAXBType()", "class_method_signature": "Rotate.getJAXBType()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Rotate.toString()", "testcase": false, "constructor": false}], "file": "bundles/core-map/src/main/java/org/orbisgis/coremap/renderer/se/transform/Rotate.java"}, "focal_method": {"identifier": "getAffineTransform", "parameters": "(Map<String,Object> map, Uom uom,\n                        MapTransform mt, Double width, Double height)", "modifiers": "@Override public", "return": "AffineTransform", "body": "@Override\n        public AffineTransform getAffineTransform(Map<String,Object> map, Uom uom,\n                        MapTransform mt, Double width, Double height) throws ParameterException {\n                double ox = 0.0;\n                if (x != null) {\n                        ox = Uom.toPixel(x.getValue(map), uom, mt.getDpi(), mt.getScaleDenominator(), width);\n                }\n\n                double oy = 0.0;\n                if (y != null) {\n                        oy = Uom.toPixel(y.getValue(map), uom, mt.getDpi(), mt.getScaleDenominator(), height);\n                }\n\n                double theta = 0.0;\n                if (rotation != null) {\n                        theta = rotation.getValue(map) * Math.PI / 180.0; // convert to rad\n                }\n                return AffineTransform.getRotateInstance(theta, ox, oy);\n        }", "signature": "AffineTransform getAffineTransform(Map<String,Object> map, Uom uom,\n                        MapTransform mt, Double width, Double height)", "full_signature": "@Override public AffineTransform getAffineTransform(Map<String,Object> map, Uom uom,\n                        MapTransform mt, Double width, Double height)", "class_method_signature": "Rotate.getAffineTransform(Map<String,Object> map, Uom uom,\n                        MapTransform mt, Double width, Double height)", "testcase": false, "constructor": false, "invocations": ["toPixel", "getValue", "getDpi", "getScaleDenominator", "toPixel", "getValue", "getDpi", "getScaleDenominator", "getValue", "getRotateInstance"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}