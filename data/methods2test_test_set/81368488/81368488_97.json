{"test_class": {"identifier": "ConfigurationSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String sep = File.separator;", "modifier": "private final", "type": "String", "declarator": "sep = File.separator", "var_name": "sep"}, {"original_string": "private final String localDataFolder =\n        System.getProperty(\"user.dir\") + sep\n            + \"src\" + sep\n            + \"test\" + sep\n            + \"resources\" + sep;", "modifier": "private final", "type": "String", "declarator": "localDataFolder =\n        System.getProperty(\"user.dir\") + sep\n            + \"src\" + sep\n            + \"test\" + sep\n            + \"resources\" + sep", "var_name": "localDataFolder"}, {"original_string": "private final File resourcesFolder = new File(localDataFolder);", "modifier": "private final", "type": "File", "declarator": "resourcesFolder = new File(localDataFolder)", "var_name": "resourcesFolder"}], "file": "gazeplay-commons/src/test/java/net/gazeplay/commons/configuration/ConfigurationSourceTest.java"}, "test_case": {"identifier": "givenPropertiesFileNotFound_shouldCreateDefaultProperties", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void givenPropertiesFileNotFound_shouldCreateDefaultProperties() {\n        Configuration result = ConfigurationSource.createFromPropertiesResource(new File(localDataFolder, \"wrong.properties\"));\n\n        assertEquals(500, result.getFixationLength());\n    }", "signature": "void givenPropertiesFileNotFound_shouldCreateDefaultProperties()", "full_signature": "@Test void givenPropertiesFileNotFound_shouldCreateDefaultProperties()", "class_method_signature": "ConfigurationSourceTest.givenPropertiesFileNotFound_shouldCreateDefaultProperties()", "testcase": true, "constructor": false, "invocations": ["createFromPropertiesResource", "assertEquals", "getFixationLength"]}, "focal_class": {"identifier": "ConfigurationSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File defaultProfileConfigFile = new File(GazePlayDirectories.getGazePlayFolder(), \"GazePlay.properties\");", "modifier": "private static final", "type": "File", "declarator": "defaultProfileConfigFile = new File(GazePlayDirectories.getGazePlayFolder(), \"GazePlay.properties\")", "var_name": "defaultProfileConfigFile"}], "methods": [{"identifier": "getSpecificProfileConfigPath", "parameters": "(final String profileId)", "modifiers": "private static", "return": "File", "signature": "File getSpecificProfileConfigPath(final String profileId)", "full_signature": "private static File getSpecificProfileConfigPath(final String profileId)", "class_method_signature": "ConfigurationSource.getSpecificProfileConfigPath(final String profileId)", "testcase": false, "constructor": false}, {"identifier": "createFromDefaultProfile", "parameters": "()", "modifiers": "public static", "return": "Configuration", "signature": "Configuration createFromDefaultProfile()", "full_signature": "public static Configuration createFromDefaultProfile()", "class_method_signature": "ConfigurationSource.createFromDefaultProfile()", "testcase": false, "constructor": false}, {"identifier": "createFromProfile", "parameters": "(final String profileId)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration createFromProfile(final String profileId)", "full_signature": "public static Configuration createFromProfile(final String profileId)", "class_method_signature": "ConfigurationSource.createFromProfile(final String profileId)", "testcase": false, "constructor": false}, {"identifier": "createFromPropertiesResource", "parameters": "(final File propertiesFile)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration createFromPropertiesResource(final File propertiesFile)", "full_signature": "public static Configuration createFromPropertiesResource(final File propertiesFile)", "class_method_signature": "ConfigurationSource.createFromPropertiesResource(final File propertiesFile)", "testcase": false, "constructor": false}, {"identifier": "loadProperties", "parameters": "(final File propertiesFile)", "modifiers": "private static", "return": "Properties", "signature": "Properties loadProperties(final File propertiesFile)", "full_signature": "private static Properties loadProperties(final File propertiesFile)", "class_method_signature": "ConfigurationSource.loadProperties(final File propertiesFile)", "testcase": false, "constructor": false}], "file": "gazeplay-commons/src/main/java/net/gazeplay/commons/configuration/ConfigurationSource.java"}, "focal_method": {"identifier": "createFromPropertiesResource", "parameters": "(final File propertiesFile)", "modifiers": "public static", "return": "Configuration", "body": "public static Configuration createFromPropertiesResource(final File propertiesFile) {\n        Properties properties;\n\n        try {\n            log.info(\"Loading Properties from : {}\", propertiesFile);\n            properties = loadProperties(propertiesFile);\n            log.info(\"Properties loaded : {}\", properties);\n        } catch (final IOException e) {\n            log.error(\"Failure while loading Properties file {}\", propertiesFile, e);\n            properties = new Properties();\n        }\n\n        final ApplicationConfig applicationConfig = ConfigFactory.create(ApplicationConfig.class, properties);\n        return new Configuration(propertiesFile, applicationConfig);\n    }", "signature": "Configuration createFromPropertiesResource(final File propertiesFile)", "full_signature": "public static Configuration createFromPropertiesResource(final File propertiesFile)", "class_method_signature": "ConfigurationSource.createFromPropertiesResource(final File propertiesFile)", "testcase": false, "constructor": false, "invocations": ["info", "loadProperties", "info", "error", "create"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}