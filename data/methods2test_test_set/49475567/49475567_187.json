{"test_class": {"identifier": "DefaultExactMatchPolicyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Fixtures fix;", "modifier": "private", "type": "Fixtures", "declarator": "fix", "var_name": "fix"}, {"original_string": "private DefaultExactMatchPolicy policy;", "modifier": "private", "type": "DefaultExactMatchPolicy", "declarator": "policy", "var_name": "policy"}], "file": "geoclient-service/src/test/java/gov/nyc/doitt/gis/geoclient/service/search/policy/DefaultExactMatchPolicyTest.java"}, "test_case": {"identifier": "testFindExactMatch_choosesFirstSuccessResultOfTheRightLevel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindExactMatch_choosesFirstSuccessResultOfTheRightLevel() {\n        Search searchOne = new Search(fix.requestLevelOne, fix.responseSuccess);\n        fix.searchResult.add(searchOne);\n        assertThat(policy.findExactMatch(fix.searchResult)).isNull();\n        Search searchZero = new Search(fix.requestLevelZero, fix.responseSuccess);\n        fix.searchResult.add(searchZero);\n        assertThat(policy.findExactMatch(fix.searchResult)).isEqualTo(searchZero);\n    }", "signature": "void testFindExactMatch_choosesFirstSuccessResultOfTheRightLevel()", "full_signature": "@Test public void testFindExactMatch_choosesFirstSuccessResultOfTheRightLevel()", "class_method_signature": "DefaultExactMatchPolicyTest.testFindExactMatch_choosesFirstSuccessResultOfTheRightLevel()", "testcase": true, "constructor": false, "invocations": ["add", "isNull", "assertThat", "findExactMatch", "add", "isEqualTo", "assertThat", "findExactMatch"]}, "focal_class": {"identifier": "DefaultExactMatchPolicy", "superclass": "extends AbstractPolicy", "interfaces": "implements ExactMatchPolicy", "fields": [{"original_string": "public static final int DEFAULT_EXACT_MATCH_MAX_LEVEL = 0;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_EXACT_MATCH_MAX_LEVEL = 0", "var_name": "DEFAULT_EXACT_MATCH_MAX_LEVEL"}, {"original_string": "public static final boolean DEFAULT_EXACT_MATCH_FOR_SINGLE_SUCCESS = false;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_EXACT_MATCH_FOR_SINGLE_SUCCESS = false", "var_name": "DEFAULT_EXACT_MATCH_FOR_SINGLE_SUCCESS"}, {"original_string": "private int exactMatchMaxLevel = DEFAULT_EXACT_MATCH_MAX_LEVEL;", "modifier": "private", "type": "int", "declarator": "exactMatchMaxLevel = DEFAULT_EXACT_MATCH_MAX_LEVEL", "var_name": "exactMatchMaxLevel"}, {"original_string": "private boolean exactMatchForSingleSuccess = DEFAULT_EXACT_MATCH_FOR_SINGLE_SUCCESS;", "modifier": "private", "type": "boolean", "declarator": "exactMatchForSingleSuccess = DEFAULT_EXACT_MATCH_FOR_SINGLE_SUCCESS", "var_name": "exactMatchForSingleSuccess"}], "methods": [{"identifier": "getExactMatchMaxLevel", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExactMatchMaxLevel()", "full_signature": "public int getExactMatchMaxLevel()", "class_method_signature": "DefaultExactMatchPolicy.getExactMatchMaxLevel()", "testcase": false, "constructor": false}, {"identifier": "setExactMatchMaxLevel", "parameters": "(int exactMatchThreshold)", "modifiers": "public", "return": "void", "signature": "void setExactMatchMaxLevel(int exactMatchThreshold)", "full_signature": "public void setExactMatchMaxLevel(int exactMatchThreshold)", "class_method_signature": "DefaultExactMatchPolicy.setExactMatchMaxLevel(int exactMatchThreshold)", "testcase": false, "constructor": false}, {"identifier": "isExactMatchForSingleSuccess", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExactMatchForSingleSuccess()", "full_signature": "public boolean isExactMatchForSingleSuccess()", "class_method_signature": "DefaultExactMatchPolicy.isExactMatchForSingleSuccess()", "testcase": false, "constructor": false}, {"identifier": "setExactMatchForSingleSuccess", "parameters": "(boolean exactMatchForSingleSuccess)", "modifiers": "public", "return": "void", "signature": "void setExactMatchForSingleSuccess(boolean exactMatchForSingleSuccess)", "full_signature": "public void setExactMatchForSingleSuccess(boolean exactMatchForSingleSuccess)", "class_method_signature": "DefaultExactMatchPolicy.setExactMatchForSingleSuccess(boolean exactMatchForSingleSuccess)", "testcase": false, "constructor": false}, {"identifier": "findExactMatch", "parameters": "(SearchResult searchResult)", "modifiers": "@Override public", "return": "Search", "signature": "Search findExactMatch(SearchResult searchResult)", "full_signature": "@Override public Search findExactMatch(SearchResult searchResult)", "class_method_signature": "DefaultExactMatchPolicy.findExactMatch(SearchResult searchResult)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "DefaultExactMatchPolicy.getDescription()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DefaultExactMatchPolicy.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DefaultExactMatchPolicy.equals(Object obj)", "testcase": false, "constructor": false}], "file": "geoclient-service/src/main/java/gov/nyc/doitt/gis/geoclient/service/search/policy/DefaultExactMatchPolicy.java"}, "focal_method": {"identifier": "findExactMatch", "parameters": "(SearchResult searchResult)", "modifiers": "@Override public", "return": "Search", "body": "@Override\n    public Search findExactMatch(SearchResult searchResult)\n    {\n        if(this.isExactMatchForSingleSuccess() && searchResult.successCount() == 1)\n        {\n            List<Search> searches = searchResult.getSearches();\n            for (Search search : searches)\n            {\n                if(!search.isRejected())\n                {\n                    return search;\n                }\n            }\n        }\n        List<Search> searches = searchResult.successfulSearchesEqualOrLessThan(exactMatchMaxLevel);\n        if(!searches.isEmpty())\n        {\n            // Choose the first one\n            return searches.get(0);\n        }\n        return null;\n    }", "signature": "Search findExactMatch(SearchResult searchResult)", "full_signature": "@Override public Search findExactMatch(SearchResult searchResult)", "class_method_signature": "DefaultExactMatchPolicy.findExactMatch(SearchResult searchResult)", "testcase": false, "constructor": false, "invocations": ["isExactMatchForSingleSuccess", "successCount", "getSearches", "isRejected", "successfulSearchesEqualOrLessThan", "isEmpty", "get"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}