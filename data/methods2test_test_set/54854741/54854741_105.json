{"test_class": {"identifier": "TransactionsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CategorizerService categorizerService = mock(CategorizerService.class);", "modifier": "private final", "type": "CategorizerService", "declarator": "categorizerService = mock(CategorizerService.class)", "var_name": "categorizerService"}, {"original_string": "private final TransactionsPersistenceService persistenceService = mock(TransactionsPersistenceService.class);", "modifier": "private final", "type": "TransactionsPersistenceService", "declarator": "persistenceService = mock(TransactionsPersistenceService.class)", "var_name": "persistenceService"}, {"original_string": "private final EntityEventSupport eventSupport = new EntityEventSupport();", "modifier": "private final", "type": "EntityEventSupport", "declarator": "eventSupport = new EntityEventSupport()", "var_name": "eventSupport"}, {"original_string": "private final TransactionsService service = new TransactionsService(persistenceService, categorizerService,\n\t\t\teventSupport);", "modifier": "private final", "type": "TransactionsService", "declarator": "service = new TransactionsService(persistenceService, categorizerService,\n\t\t\teventSupport)", "var_name": "service"}, {"original_string": "private Transactions transactions;", "modifier": "private", "type": "Transactions", "declarator": "transactions", "var_name": "transactions"}], "file": "services/src/test/java/com/greensopinion/finance/services/domain/TransactionsServiceTest.java"}, "test_case": {"identifier": "categoriesUpdated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void categoriesUpdated() {\n\t\tTransactions transactions = service.retrieve();\n\t\teventSupport.updated(new Categories());\n\n\t\tTransactions transactions2 = new Transactions(\n\t\t\t\tImmutableList.of(MockTransaction.create(\"2015-01-01\", \"a desc\", 123)));\n\t\tdoReturn(transactions2).when(persistenceService).load();\n\n\t\tTransactions transactions3 = service.retrieve();\n\t\tassertNotSame(transactions, transactions3);\n\t\tverify(persistenceService, times(2)).load();\n\t}", "signature": "void categoriesUpdated()", "full_signature": "@Test public void categoriesUpdated()", "class_method_signature": "TransactionsServiceTest.categoriesUpdated()", "testcase": true, "constructor": false, "invocations": ["retrieve", "updated", "of", "create", "load", "when", "doReturn", "retrieve", "assertNotSame", "load", "verify", "times"]}, "focal_class": {"identifier": "TransactionsService", "superclass": "extends ConfigurationService<Transactions>", "interfaces": "", "fields": [{"original_string": "private final CategorizerService categorizerService;", "modifier": "private final", "type": "CategorizerService", "declarator": "categorizerService", "var_name": "categorizerService"}], "methods": [{"identifier": "TransactionsService", "parameters": "(TransactionsPersistenceService persistenceService, CategorizerService categorizerService,\n\t\t\tEntityEventSupport eventSupport)", "modifiers": "@Inject", "return": "", "signature": " TransactionsService(TransactionsPersistenceService persistenceService, CategorizerService categorizerService,\n\t\t\tEntityEventSupport eventSupport)", "full_signature": "@Inject  TransactionsService(TransactionsPersistenceService persistenceService, CategorizerService categorizerService,\n\t\t\tEntityEventSupport eventSupport)", "class_method_signature": "TransactionsService.TransactionsService(TransactionsPersistenceService persistenceService, CategorizerService categorizerService,\n\t\t\tEntityEventSupport eventSupport)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override protected", "return": "Transactions", "signature": "Transactions load()", "full_signature": "@Override protected Transactions load()", "class_method_signature": "TransactionsService.load()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Transactions value)", "modifiers": "@Override public", "return": "void", "signature": "void update(Transactions value)", "full_signature": "@Override public void update(Transactions value)", "class_method_signature": "TransactionsService.update(Transactions value)", "testcase": false, "constructor": false}, {"identifier": "applyCategories", "parameters": "(Transactions transactions)", "modifiers": "private", "return": "Transactions", "signature": "Transactions applyCategories(Transactions transactions)", "full_signature": "private Transactions applyCategories(Transactions transactions)", "class_method_signature": "TransactionsService.applyCategories(Transactions transactions)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/greensopinion/finance/services/domain/TransactionsService.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override protected", "return": "Transactions", "body": "@Override\n\tprotected Transactions load() {\n\t\treturn applyCategories(super.load());\n\t}", "signature": "Transactions load()", "full_signature": "@Override protected Transactions load()", "class_method_signature": "TransactionsService.load()", "testcase": false, "constructor": false, "invocations": ["applyCategories", "load"]}, "repository": {"repo_id": 54854741, "url": "https://github.com/greensopinion/greenbeans", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 30, "size": 1684, "license": "licensed"}}