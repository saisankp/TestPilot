{"test_class": {"identifier": "GraphsInteractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LABEL_1 = \"label 1\";", "modifier": "private static final", "type": "String", "declarator": "LABEL_1 = \"label 1\"", "var_name": "LABEL_1"}, {"original_string": "private static final String LABEL_2 = \"label 2\";", "modifier": "private static final", "type": "String", "declarator": "LABEL_2 = \"label 2\"", "var_name": "LABEL_2"}, {"original_string": "private static final String LABEL_3 = \"label 3\";", "modifier": "private static final", "type": "String", "declarator": "LABEL_3 = \"label 3\"", "var_name": "LABEL_3"}, {"original_string": "private static final String LABEL_4 = \"label 4\";", "modifier": "private static final", "type": "String", "declarator": "LABEL_4 = \"label 4\"", "var_name": "LABEL_4"}, {"original_string": "private static final String LABEL_5 = \"label 5\";", "modifier": "private static final", "type": "String", "declarator": "LABEL_5 = \"label 5\"", "var_name": "LABEL_5"}, {"original_string": "private static final String LABEL_6 = \"label 6\";", "modifier": "private static final", "type": "String", "declarator": "LABEL_6 = \"label 6\"", "var_name": "LABEL_6"}, {"original_string": "private static final String LABEL_7 = \"label 7\";", "modifier": "private static final", "type": "String", "declarator": "LABEL_7 = \"label 7\"", "var_name": "LABEL_7"}, {"original_string": "private static final String LABEL_8 = \"label 8\";", "modifier": "private static final", "type": "String", "declarator": "LABEL_8 = \"label 8\"", "var_name": "LABEL_8"}, {"original_string": "GraphsInteractor interactor;", "modifier": "", "type": "GraphsInteractor", "declarator": "interactor", "var_name": "interactor"}, {"original_string": "@Mock\n    GroupingController groupingController;", "modifier": "@Mock", "type": "GroupingController", "declarator": "groupingController", "var_name": "groupingController"}, {"original_string": "@Mock\n    Context context;", "modifier": "@Mock", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    Trip trip;", "modifier": "@Mock", "type": "Trip", "declarator": "trip", "var_name": "trip"}, {"original_string": "private List<LabeledGraphEntry> entries;", "modifier": "private", "type": "List<LabeledGraphEntry>", "declarator": "entries", "var_name": "entries"}], "file": "app/src/test/java/co/smartreceipts/android/graphs/GraphsInteractorTest.java"}, "test_case": {"identifier": "fillEmptyDaysWithZero", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fillEmptyDaysWithZero() {\n        float someValue = 5;\n        List<Entry> entries = new ArrayList<>(Arrays.asList(\n                new Entry(2, someValue),\n                new Entry(5, someValue),\n                new Entry(7, someValue)\n\n        ));\n\n        when(groupingController.getSummationByDateAsGraphEntries(trip)).thenReturn(Single.just(entries));\n\n        List<Entry> expectedEntries = new ArrayList<>(Arrays.asList(\n                new Entry(2, someValue),\n                new Entry(3, 0),\n                new Entry(4, 0),\n                new Entry(5, someValue),\n                new Entry(6, 0),\n                new Entry(7, someValue)\n        ));\n\n        GraphUiIndicator graphUiIndicator = interactor.getSummationByDate(trip).blockingGet();\n\n        List<? extends BaseEntry> resultEntries = graphUiIndicator.getEntries();\n\n        for (int i = 0; i < resultEntries.size(); i++) {\n            Entry e1 = (Entry) resultEntries.get(i);\n            Entry e2 = expectedEntries.get(i);\n\n            assertTrue(e1.getX() == e2.getX() && e1.getY() == e2.getY());\n        }\n\n        assertEquals(expectedEntries.size(), resultEntries.size());\n        assertEquals(GraphUiIndicator.GraphType.SummationByDate, graphUiIndicator.getGraphType());\n    }", "signature": "void fillEmptyDaysWithZero()", "full_signature": "@Test public void fillEmptyDaysWithZero()", "class_method_signature": "GraphsInteractorTest.fillEmptyDaysWithZero()", "testcase": true, "constructor": false, "invocations": ["asList", "thenReturn", "when", "getSummationByDateAsGraphEntries", "just", "asList", "blockingGet", "getSummationByDate", "getEntries", "size", "get", "get", "assertTrue", "getX", "getX", "getY", "getY", "assertEquals", "size", "size", "assertEquals", "getGraphType"]}, "focal_class": {"identifier": "GraphsInteractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static int PAYMENT_METHODS_MAX_COUNT = 4;", "modifier": "public final static", "type": "int", "declarator": "PAYMENT_METHODS_MAX_COUNT = 4", "var_name": "PAYMENT_METHODS_MAX_COUNT"}, {"original_string": "private final GroupingController groupingController;", "modifier": "private final", "type": "GroupingController", "declarator": "groupingController", "var_name": "groupingController"}, {"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "GraphsInteractor", "parameters": "(Context context, GroupingController groupingController)", "modifiers": "@Inject public", "return": "", "signature": " GraphsInteractor(Context context, GroupingController groupingController)", "full_signature": "@Inject public  GraphsInteractor(Context context, GroupingController groupingController)", "class_method_signature": "GraphsInteractor.GraphsInteractor(Context context, GroupingController groupingController)", "testcase": false, "constructor": true}, {"identifier": "getSummationByCategories", "parameters": "(Trip trip)", "modifiers": "public", "return": "Maybe<GraphUiIndicator>", "signature": "Maybe<GraphUiIndicator> getSummationByCategories(Trip trip)", "full_signature": "public Maybe<GraphUiIndicator> getSummationByCategories(Trip trip)", "class_method_signature": "GraphsInteractor.getSummationByCategories(Trip trip)", "testcase": false, "constructor": false}, {"identifier": "getSummationByReimbursement", "parameters": "(Trip trip)", "modifiers": "public", "return": "Maybe<GraphUiIndicator>", "signature": "Maybe<GraphUiIndicator> getSummationByReimbursement(Trip trip)", "full_signature": "public Maybe<GraphUiIndicator> getSummationByReimbursement(Trip trip)", "class_method_signature": "GraphsInteractor.getSummationByReimbursement(Trip trip)", "testcase": false, "constructor": false}, {"identifier": "getSummationByPaymentMethod", "parameters": "(Trip trip)", "modifiers": "public", "return": "Maybe<GraphUiIndicator>", "signature": "Maybe<GraphUiIndicator> getSummationByPaymentMethod(Trip trip)", "full_signature": "public Maybe<GraphUiIndicator> getSummationByPaymentMethod(Trip trip)", "class_method_signature": "GraphsInteractor.getSummationByPaymentMethod(Trip trip)", "testcase": false, "constructor": false}, {"identifier": "getSummationByDate", "parameters": "(Trip trip)", "modifiers": "public", "return": "Maybe<GraphUiIndicator>", "signature": "Maybe<GraphUiIndicator> getSummationByDate(Trip trip)", "full_signature": "public Maybe<GraphUiIndicator> getSummationByDate(Trip trip)", "class_method_signature": "GraphsInteractor.getSummationByDate(Trip trip)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/graphs/GraphsInteractor.java"}, "focal_method": {"identifier": "getSummationByDate", "parameters": "(Trip trip)", "modifiers": "public", "return": "Maybe<GraphUiIndicator>", "body": "public Maybe<GraphUiIndicator> getSummationByDate(Trip trip) {\n        return groupingController.getSummationByDateAsGraphEntries(trip)\n                .filter(graphEntries -> !graphEntries.isEmpty())\n                .map(entries -> { // hack to fill days without receipts with 0\n                    List<Entry> result = new ArrayList<>(entries);\n                    List<Integer> filledDaysNumbers = new ArrayList<>();\n\n                    int firstDay = (int) entries.get(0).getX();\n                    int lastDay = (int) entries.get(entries.size() - 1).getX();\n\n                    for (Entry entry : entries) {\n                        filledDaysNumbers.add((int) entry.getX());\n                    }\n\n                    for (int i = firstDay; i < lastDay; i++) {\n                        if (!filledDaysNumbers.contains(i)) {\n                            result.add(new Entry(i, 0));\n                        }\n                    }\n\n                    Collections.sort(result, (o1, o2) -> Float.compare(o1.getX(), o2.getX()));\n\n                    return result;\n                })\n                .map(GraphUiIndicator::summationByDate)\n                .observeOn(AndroidSchedulers.mainThread());\n    }", "signature": "Maybe<GraphUiIndicator> getSummationByDate(Trip trip)", "full_signature": "public Maybe<GraphUiIndicator> getSummationByDate(Trip trip)", "class_method_signature": "GraphsInteractor.getSummationByDate(Trip trip)", "testcase": false, "constructor": false, "invocations": ["observeOn", "map", "map", "filter", "getSummationByDateAsGraphEntries", "isEmpty", "getX", "get", "getX", "get", "size", "add", "getX", "contains", "add", "sort", "compare", "getX", "getX", "mainThread"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}