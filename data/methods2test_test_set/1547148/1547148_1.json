{"test_class": {"identifier": "CategorySummaryOperatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "example-directio-hive/src/test/java/com/example/operator/CategorySummaryOperatorTest.java"}, "test_case": {"identifier": "selectAvailableItem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void selectAvailableItem() {\n        List<ItemInfo> candidates = new ArrayList<ItemInfo>();\n        candidates.add(item(\"A\", 1, 10));\n        candidates.add(item(\"B\", 11, 20));\n        candidates.add(item(\"C\", 21, 30));\n\n        CategorySummaryOperator operator = new CategorySummaryOperatorImpl();\n        ItemInfo item1 = operator.selectAvailableItem(candidates, sales(1));\n        ItemInfo item5 = operator.selectAvailableItem(candidates, sales(5));\n        ItemInfo item10 = operator.selectAvailableItem(candidates, sales(10));\n        ItemInfo item15 = operator.selectAvailableItem(candidates, sales(11));\n        ItemInfo item20 = operator.selectAvailableItem(candidates, sales(20));\n        ItemInfo item30 = operator.selectAvailableItem(candidates, sales(30));\n        ItemInfo item31 = operator.selectAvailableItem(candidates, sales(31));\n\n        assertThat(item1.getCategoryCodeAsString(), is(\"A\"));\n        assertThat(item5.getCategoryCodeAsString(), is(\"A\"));\n        assertThat(item10.getCategoryCodeAsString(), is(\"A\"));\n        assertThat(item15.getCategoryCodeAsString(), is(\"B\"));\n        assertThat(item20.getCategoryCodeAsString(), is(\"B\"));\n        assertThat(item30.getCategoryCodeAsString(), is(\"C\"));\n        assertThat(item31, is(nullValue()));\n    }", "signature": "void selectAvailableItem()", "full_signature": "@Test public void selectAvailableItem()", "class_method_signature": "CategorySummaryOperatorTest.selectAvailableItem()", "testcase": true, "constructor": false, "invocations": ["add", "item", "add", "item", "add", "item", "selectAvailableItem", "sales", "selectAvailableItem", "sales", "selectAvailableItem", "sales", "selectAvailableItem", "sales", "selectAvailableItem", "sales", "selectAvailableItem", "sales", "selectAvailableItem", "sales", "assertThat", "getCategoryCodeAsString", "is", "assertThat", "getCategoryCodeAsString", "is", "assertThat", "getCategoryCodeAsString", "is", "assertThat", "getCategoryCodeAsString", "is", "assertThat", "getCategoryCodeAsString", "is", "assertThat", "getCategoryCodeAsString", "is", "assertThat", "is", "nullValue"]}, "focal_class": {"identifier": "CategorySummaryOperator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Date dateBuffer = new Date();", "modifier": "private final", "type": "Date", "declarator": "dateBuffer = new Date()", "var_name": "dateBuffer"}], "methods": [{"identifier": "checkStore", "parameters": "(\n            @Key(group = \"store_code\") StoreInfo info,\n            @Key(group = \"store_code\") SalesDetail sales)", "modifiers": "@MasterCheck public abstract", "return": "boolean", "signature": "boolean checkStore(\n            @Key(group = \"store_code\") StoreInfo info,\n            @Key(group = \"store_code\") SalesDetail sales)", "full_signature": "@MasterCheck public abstract boolean checkStore(\n            @Key(group = \"store_code\") StoreInfo info,\n            @Key(group = \"store_code\") SalesDetail sales)", "class_method_signature": "CategorySummaryOperator.checkStore(\n            @Key(group = \"store_code\") StoreInfo info,\n            @Key(group = \"store_code\") SalesDetail sales)", "testcase": false, "constructor": false}, {"identifier": "joinItemInfo", "parameters": "(ItemInfo info, SalesDetail sales)", "modifiers": "@MasterJoin(selection = \"selectAvailableItem\") public abstract", "return": "JoinedSalesInfo", "signature": "JoinedSalesInfo joinItemInfo(ItemInfo info, SalesDetail sales)", "full_signature": "@MasterJoin(selection = \"selectAvailableItem\") public abstract JoinedSalesInfo joinItemInfo(ItemInfo info, SalesDetail sales)", "class_method_signature": "CategorySummaryOperator.joinItemInfo(ItemInfo info, SalesDetail sales)", "testcase": false, "constructor": false}, {"identifier": "selectAvailableItem", "parameters": "(List<ItemInfo> candidates, SalesDetail sales)", "modifiers": "@MasterSelection public", "return": "ItemInfo", "signature": "ItemInfo selectAvailableItem(List<ItemInfo> candidates, SalesDetail sales)", "full_signature": "@MasterSelection public ItemInfo selectAvailableItem(List<ItemInfo> candidates, SalesDetail sales)", "class_method_signature": "CategorySummaryOperator.selectAvailableItem(List<ItemInfo> candidates, SalesDetail sales)", "testcase": false, "constructor": false}, {"identifier": "summarizeByCategory", "parameters": "(JoinedSalesInfo info)", "modifiers": "@Summarize public abstract", "return": "CategorySummary", "signature": "CategorySummary summarizeByCategory(JoinedSalesInfo info)", "full_signature": "@Summarize public abstract CategorySummary summarizeByCategory(JoinedSalesInfo info)", "class_method_signature": "CategorySummaryOperator.summarizeByCategory(JoinedSalesInfo info)", "testcase": false, "constructor": false}, {"identifier": "setErrorMessage", "parameters": "(ErrorRecord record, String message)", "modifiers": "@Update public", "return": "void", "signature": "void setErrorMessage(ErrorRecord record, String message)", "full_signature": "@Update public void setErrorMessage(ErrorRecord record, String message)", "class_method_signature": "CategorySummaryOperator.setErrorMessage(ErrorRecord record, String message)", "testcase": false, "constructor": false}], "file": "example-directio-hive/src/main/java/com/example/operator/CategorySummaryOperator.java"}, "focal_method": {"identifier": "selectAvailableItem", "parameters": "(List<ItemInfo> candidates, SalesDetail sales)", "modifiers": "@MasterSelection public", "return": "ItemInfo", "body": "@MasterSelection\n    public ItemInfo selectAvailableItem(List<ItemInfo> candidates, SalesDetail sales) {\n        DateTime dateTime = sales.getSalesDateTime();\n        dateBuffer.setElapsedDays(DateUtil.getDayFromDate(\n                dateTime.getYear(), dateTime.getMonth(), dateTime.getDay()));\n        for (ItemInfo item : candidates) {\n            if (item.getBeginDate().compareTo(dateBuffer) <= 0\n                    && dateBuffer.compareTo(item.getEndDate()) <= 0) {\n                return item;\n            }\n        }\n        return null;\n    }", "signature": "ItemInfo selectAvailableItem(List<ItemInfo> candidates, SalesDetail sales)", "full_signature": "@MasterSelection public ItemInfo selectAvailableItem(List<ItemInfo> candidates, SalesDetail sales)", "class_method_signature": "CategorySummaryOperator.selectAvailableItem(List<ItemInfo> candidates, SalesDetail sales)", "testcase": false, "constructor": false, "invocations": ["getSalesDateTime", "setElapsedDays", "getDayFromDate", "getYear", "getMonth", "getDay", "compareTo", "getBeginDate", "compareTo", "getEndDate"]}, "repository": {"repo_id": 1547148, "url": "https://github.com/asakusafw/asakusafw-examples", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 25, "size": 1520, "license": "licensed"}}