{"test_class": {"identifier": "ReadCounterFromCacheAdviceTest", "superclass": "extends AbstractCounterTest<ReadCounterFromCacheAdvice>", "interfaces": "", "fields": [{"original_string": "private static final int EXPIRATION = 100;", "modifier": "private static final", "type": "int", "declarator": "EXPIRATION = 100", "var_name": "EXPIRATION"}, {"original_string": "private final Object expectedValue;", "modifier": "private final", "type": "Object", "declarator": "expectedValue", "var_name": "expectedValue"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/aop/counter/ReadCounterFromCacheAdviceTest.java"}, "test_case": {"identifier": "invalidReadCounter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalidReadCounter() throws Throwable {\n        Assume.assumeThat(isValid, CoreMatchers.is(false));\n\n        when(pjp.proceed()).thenReturn(expectedValue);\n\n        assertEquals(expectedValue, advice.readCounter(pjp));\n\n        verify(cache, never()).getCounter(anyString());\n        verify(cache, never()).get(anyString(), any(SerializationType.class));\n        verify(cache, never()).incr(anyString(), anyInt(), anyLong(), anyInt());\n        verify(pjp).proceed();\n    }", "signature": "void invalidReadCounter()", "full_signature": "@Test public void invalidReadCounter()", "class_method_signature": "ReadCounterFromCacheAdviceTest.invalidReadCounter()", "testcase": true, "constructor": false, "invocations": ["assumeThat", "is", "thenReturn", "when", "proceed", "assertEquals", "readCounter", "getCounter", "verify", "never", "anyString", "get", "verify", "never", "anyString", "any", "incr", "verify", "never", "anyString", "anyInt", "anyLong", "anyInt", "proceed", "verify"]}, "focal_class": {"identifier": "ReadCounterFromCacheAdvice", "superclass": "extends CounterInCacheBase", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ReadCounterFromCacheAdvice.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ReadCounterFromCacheAdvice.class)", "var_name": "LOG"}], "methods": [{"identifier": "readSingleCounter", "parameters": "()", "modifiers": "@Pointcut(\"@annotation(com.google.code.ssm.api.counter.ReadCounterFromCache)\") public", "return": "void", "signature": "void readSingleCounter()", "full_signature": "@Pointcut(\"@annotation(com.google.code.ssm.api.counter.ReadCounterFromCache)\") public void readSingleCounter()", "class_method_signature": "ReadCounterFromCacheAdvice.readSingleCounter()", "testcase": false, "constructor": false}, {"identifier": "readCounter", "parameters": "(final ProceedingJoinPoint pjp)", "modifiers": "@Around(\"readSingleCounter()\") public", "return": "Object", "signature": "Object readCounter(final ProceedingJoinPoint pjp)", "full_signature": "@Around(\"readSingleCounter()\") public Object readCounter(final ProceedingJoinPoint pjp)", "class_method_signature": "ReadCounterFromCacheAdvice.readCounter(final ProceedingJoinPoint pjp)", "testcase": false, "constructor": false}, {"identifier": "verifyMethodSignature", "parameters": "(final Method methodToCache)", "modifiers": "protected", "return": "void", "signature": "void verifyMethodSignature(final Method methodToCache)", "full_signature": "protected void verifyMethodSignature(final Method methodToCache)", "class_method_signature": "ReadCounterFromCacheAdvice.verifyMethodSignature(final Method methodToCache)", "testcase": false, "constructor": false}, {"identifier": "convertResult", "parameters": "(final Method method, final long result)", "modifiers": "protected", "return": "Number", "signature": "Number convertResult(final Method method, final long result)", "full_signature": "protected Number convertResult(final Method method, final long result)", "class_method_signature": "ReadCounterFromCacheAdvice.convertResult(final Method method, final long result)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "@Override protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "@Override protected Logger getLogger()", "class_method_signature": "ReadCounterFromCacheAdvice.getLogger()", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/aop/counter/ReadCounterFromCacheAdvice.java"}, "focal_method": {"identifier": "readCounter", "parameters": "(final ProceedingJoinPoint pjp)", "modifiers": "@Around(\"readSingleCounter()\") public", "return": "Object", "body": "@Around(\"readSingleCounter()\")\n    public Object readCounter(final ProceedingJoinPoint pjp) throws Throwable {\n        if (isDisabled()) {\n            getLogger().info(\"Cache disabled\");\n            return pjp.proceed();\n        }\n\n        // This is injected caching. If anything goes wrong in the caching, LOG\n        // the crap outta it, but do not let it surface up past the AOP injection itself.\n        // It will be invoked only if underlying method completes successfully.\n        String cacheKey = null;\n        ReadCounterFromCache annotation;\n        AnnotationData data;\n        try {\n            Method methodToCache = getCacheBase().getMethodToCache(pjp, ReadCounterFromCache.class);\n            verifyMethodSignature(methodToCache);\n            annotation = methodToCache.getAnnotation(ReadCounterFromCache.class);\n            data = AnnotationDataBuilder.buildAnnotationData(annotation, ReadCounterFromCache.class, methodToCache);\n            cacheKey = getCacheBase().getCacheKeyBuilder().getCacheKey(data, pjp.getArgs(), methodToCache.toString());\n            Long result = getCacheBase().getCache(data).getCounter(cacheKey);\n\n            if (result != null) {\n                getLogger().debug(\"Cache hit.\");\n                return convertResult(methodToCache, result);\n            }\n        } catch (Exception ex) {\n            warn(ex, \"Caching on method %s and key [%s] aborted due to an error.\", pjp.toShortString(), cacheKey);\n            return pjp.proceed();\n        }\n\n        final Object result = pjp.proceed();\n\n        // This is injected caching. If anything goes wrong in the caching, LOG\n        // the crap outta it, but do not let it surface up past the AOP injection itself.\n        try {\n            if (checkData(result, pjp)) {\n                long value = ((Number) result).longValue();\n                // tricky way to update counter\n                getCacheBase().getCache(data).incr(cacheKey, 0, value, annotation.expiration());\n            }\n        } catch (Exception ex) {\n            warn(ex, \"Caching on method %s and key [%s] aborted due to an error.\", pjp.toShortString(), cacheKey);\n        }\n        return result;\n    }", "signature": "Object readCounter(final ProceedingJoinPoint pjp)", "full_signature": "@Around(\"readSingleCounter()\") public Object readCounter(final ProceedingJoinPoint pjp)", "class_method_signature": "ReadCounterFromCacheAdvice.readCounter(final ProceedingJoinPoint pjp)", "testcase": false, "constructor": false, "invocations": ["isDisabled", "info", "getLogger", "proceed", "getMethodToCache", "getCacheBase", "verifyMethodSignature", "getAnnotation", "buildAnnotationData", "getCacheKey", "getCacheKeyBuilder", "getCacheBase", "getArgs", "toString", "getCounter", "getCache", "getCacheBase", "debug", "getLogger", "convertResult", "warn", "toShortString", "proceed", "proceed", "checkData", "longValue", "incr", "getCache", "getCacheBase", "expiration", "warn", "toShortString"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}