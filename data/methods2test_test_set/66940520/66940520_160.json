{"test_class": {"identifier": "TrackedEntityInstanceSupplierTest", "superclass": "extends AbstractSupplierTest<TrackedEntityInstance>", "interfaces": "", "fields": [{"original_string": "private TrackedEntityInstanceSupplier subject;", "modifier": "private", "type": "TrackedEntityInstanceSupplier", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Mock\n    private AclService aclService;", "modifier": "@Mock\n    private", "type": "AclService", "declarator": "aclService", "var_name": "aclService"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/TrackedEntityInstanceSupplierTest.java"}, "test_case": {"identifier": "handleNullEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void handleNullEvents()\n    {\n        assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), null ) );\n    }", "signature": "void handleNullEvents()", "full_signature": "@Test public void handleNullEvents()", "class_method_signature": "TrackedEntityInstanceSupplierTest.handleNullEvents()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "get", "getDefaultImportOptions"]}, "focal_class": {"identifier": "TrackedEntityInstanceSupplier", "superclass": "extends AbstractSupplier<Map<String, Pair<TrackedEntityInstance, Boolean>>>", "interfaces": "", "fields": [{"original_string": "private final AclService aclService;", "modifier": "private final", "type": "AclService", "declarator": "aclService", "var_name": "aclService"}], "methods": [{"identifier": "TrackedEntityInstanceSupplier", "parameters": "( NamedParameterJdbcTemplate jdbcTemplate,\n        AclService aclService )", "modifiers": "public", "return": "", "signature": " TrackedEntityInstanceSupplier( NamedParameterJdbcTemplate jdbcTemplate,\n        AclService aclService )", "full_signature": "public  TrackedEntityInstanceSupplier( NamedParameterJdbcTemplate jdbcTemplate,\n        AclService aclService )", "class_method_signature": "TrackedEntityInstanceSupplier.TrackedEntityInstanceSupplier( NamedParameterJdbcTemplate jdbcTemplate,\n        AclService aclService )", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "( ImportOptions importOptions, List<Event> events )", "modifiers": "@Override public", "return": "Map<String, Pair<TrackedEntityInstance, Boolean>>", "signature": "Map<String, Pair<TrackedEntityInstance, Boolean>> get( ImportOptions importOptions, List<Event> events )", "full_signature": "@Override public Map<String, Pair<TrackedEntityInstance, Boolean>> get( ImportOptions importOptions, List<Event> events )", "class_method_signature": "TrackedEntityInstanceSupplier.get( ImportOptions importOptions, List<Event> events )", "testcase": false, "constructor": false}, {"identifier": "getTrackedEntityInstances", "parameters": "( Set<String> teiUids,\n        Multimap<String, String> teiToEvent )", "modifiers": "private", "return": "Map<String, TrackedEntityInstance>", "signature": "Map<String, TrackedEntityInstance> getTrackedEntityInstances( Set<String> teiUids,\n        Multimap<String, String> teiToEvent )", "full_signature": "private Map<String, TrackedEntityInstance> getTrackedEntityInstances( Set<String> teiUids,\n        Multimap<String, String> teiToEvent )", "class_method_signature": "TrackedEntityInstanceSupplier.getTrackedEntityInstances( Set<String> teiUids,\n        Multimap<String, String> teiToEvent )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/TrackedEntityInstanceSupplier.java"}, "focal_method": {"identifier": "get", "parameters": "( ImportOptions importOptions, List<Event> events )", "modifiers": "@Override public", "return": "Map<String, Pair<TrackedEntityInstance, Boolean>>", "body": "@Override\n    public Map<String, Pair<TrackedEntityInstance, Boolean>> get( ImportOptions importOptions, List<Event> events )\n    {\n\n        if ( events == null )\n        {\n            return new HashMap<>();\n        }\n        // @formatter:off\n        // Collect all the org unit uids to pass as SQL query argument\n        Set<String> teiUids = events.stream()\n                .filter( e -> e.getTrackedEntityInstance() != null )\n                .map( Event::getTrackedEntityInstance ).collect( Collectors.toSet() );\n        // @formatter:on\n\n        if ( isEmpty( teiUids ) )\n        {\n            return new HashMap<>();\n        }\n\n        // Create a map: tei uid -> List [event uid]\n        Multimap<String, String> teiToEvent = HashMultimap.create();\n        for ( Event event : events )\n        {\n            teiToEvent.put( event.getTrackedEntityInstance(), event.getUid() );\n        }\n\n        //\n        // Get all TEI associated to the events\n        //\n        Map<String, TrackedEntityInstance> teiMap = getTrackedEntityInstances( teiUids, teiToEvent );\n\n        Map<String, Pair<TrackedEntityInstance, Boolean>> result = new HashMap<>();\n\n        //\n        // Return a map containing a Pair where key is the Tei and value is the boolean, can the TEI be updated\n        // by current user\n        //\n        for ( String event : teiMap.keySet() )\n        {\n            TrackedEntityInstance tei = teiMap.get( event );\n            result.put( event,\n                Pair.of( tei, !importOptions.isSkipLastUpdated() ? aclService.canUpdate( importOptions.getUser(), tei )\n                    : null ) );\n\n        }\n\n        return result;\n    }", "signature": "Map<String, Pair<TrackedEntityInstance, Boolean>> get( ImportOptions importOptions, List<Event> events )", "full_signature": "@Override public Map<String, Pair<TrackedEntityInstance, Boolean>> get( ImportOptions importOptions, List<Event> events )", "class_method_signature": "TrackedEntityInstanceSupplier.get( ImportOptions importOptions, List<Event> events )", "testcase": false, "constructor": false, "invocations": ["collect", "map", "filter", "stream", "getTrackedEntityInstance", "toSet", "isEmpty", "create", "put", "getTrackedEntityInstance", "getUid", "getTrackedEntityInstances", "keySet", "get", "put", "of", "isSkipLastUpdated", "canUpdate", "getUser"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}