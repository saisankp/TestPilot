{"test_class": {"identifier": "ReportTest", "superclass": "extends AbstractGoalTest", "interfaces": "", "fields": [], "file": "lang/src/test/java/org/eclipse/steady/report/ReportTest.java"}, "test_case": {"identifier": "testReport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReport() {\n    try {\n      // Mock REST services\n      this.configureBackendServiceUrl(server);\n      this.setupMockServices(this.testApp);\n\n      // Exemptions\n      vulasConfiguration.setProperty(\n          ExemptionBug.CFG_PREFIX + \".CVE-2014-0050.reason\",\n          \"The vulnerable library with digest 6F1EBC is no problem because ...\");\n      vulasConfiguration.setProperty(\n          ExemptionBug.CFG_PREFIX + \".CVE-2014-0050.libraries\",\n          \"6F1EBC6CE20AD8B3D4825CEB2E625E5C432A0E10\");\n\n      vulasConfiguration.setProperty(\n          ExemptionBug.CFG_PREFIX + \".CVE-2013-2186.reason\",\n          \"Vulnerability CVE-2013-2186 is no problem because ...\");\n      vulasConfiguration.setProperty(ExemptionBug.CFG_PREFIX + \".CVE-2013-2186.libraries\", \"*\");\n\n      vulasConfiguration.setProperty(\n          ExemptionBug.CFG_PREFIX + \".CVE-2019-1234.reason\",\n          \"Vulnerability CVE-2019-1234 is no problem because ...\");\n\n      vulasConfiguration.setProperty(ExemptionScope.CFG, \"teST, provIDED\");\n      vulasConfiguration.setProperty(ExemptionUnassessed.CFG, \"knOWN\");\n\n      final Configuration cfg = vulasConfiguration.getConfiguration();\n\n      final GoalContext goal_context = new GoalContext();\n      goal_context.setVulasConfiguration(vulasConfiguration);\n      goal_context.setTenant(this.testTenant);\n      goal_context.setSpace(this.testSpace);\n      goal_context.setApplication(this.testApp);\n\n      final Report report = new Report(goal_context, this.testApp, null);\n\n      // Set all kinds of exceptions\n      report.setExceptionThreshold(\n          cfg.getString(CoreConfiguration.REP_EXC_THRESHOLD, Report.THRESHOLD_ACT_EXE));\n\n      // Exemptions\n      report.setExemptions(ExemptionSet.createFromConfiguration(cfg));\n\n      // Fetch the vulns\n      report.fetchAppVulnerabilities();\n\n      // Loop over vulnerabilities\n      report.processVulnerabilities();\n\n      final Path report_dir = Paths.get(\"./target/vulas/report\");\n      if (!report_dir.toFile().exists()) report_dir.toFile().mkdirs();\n\n      report.writeResult(report_dir);\n\n      // Check that files exist\n      assertTrue(FileUtil.isAccessibleFile(report_dir.resolve(Report.REPORT_FILE_HTML)));\n      assertTrue(FileUtil.isAccessibleFile(report_dir.resolve(Report.REPORT_FILE_XML)));\n      assertTrue(FileUtil.isAccessibleFile(report_dir.resolve(Report.REPORT_FILE_JSON)));\n\n      // Validate Html\n      final Tidy tidy = new Tidy();\n      tidy.parse(\n          new ByteArrayInputStream(\n              FileUtil.readInputStream(\n                  new FileInputStream(\n                      new File(\"./target/vulas/report/\" + Report.REPORT_FILE_HTML)))),\n          new FileOutputStream(new File(\"./target/jtidy-html.txt\")));\n\n      // Allow no errors\n      assertEquals(0, tidy.getParseErrors());\n\n      // Allow just the following 3 warnings (interestingly, a missing </table> will only result in\n      // additional warnings)\n      // line 361 column 41 - Warning: <td> attribute \"width\" has invalid value \"25%\"\n      // line 381 column 41 - Warning: <td> attribute \"width\" has invalid value \"75%\"\n      // line 1 column 1 - Warning: html doctype doesn't match content\n      assertEquals(3, tidy.getParseWarnings());\n\n      // Check the HTTP calls made\n      String path = \"/backend\" + PathBuilder.appVulnDeps(this.testApp, true, false, true);\n      path = path.substring(0, path.indexOf('?'));\n      verifyHttp(server)\n          .times(\n              1,\n              method(Method.GET),\n              uri(path),\n              parameter(\"includeHistorical\", \"true\"),\n              parameter(\"includeAffected\", \"false\"),\n              parameter(\"includeAffectedUnconfirmed\", \"true\"));\n      verifyHttp(server)\n          .times(\n              1,\n              method(Method.GET),\n              uri(path),\n              parameter(\"includeHistorical\", \"false\"),\n              parameter(\"includeAffected\", \"true\"),\n              parameter(\"includeAffectedUnconfirmed\", \"true\"));\n    } catch (Exception e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }", "signature": "void testReport()", "full_signature": "@Test public void testReport()", "class_method_signature": "ReportTest.testReport()", "testcase": true, "constructor": false, "invocations": ["configureBackendServiceUrl", "setupMockServices", "setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "getConfiguration", "setVulasConfiguration", "setTenant", "setSpace", "setApplication", "setExceptionThreshold", "getString", "setExemptions", "createFromConfiguration", "fetchAppVulnerabilities", "processVulnerabilities", "get", "exists", "toFile", "mkdirs", "toFile", "writeResult", "assertTrue", "isAccessibleFile", "resolve", "assertTrue", "isAccessibleFile", "resolve", "assertTrue", "isAccessibleFile", "resolve", "parse", "readInputStream", "assertEquals", "getParseErrors", "assertEquals", "getParseWarnings", "appVulnDeps", "substring", "indexOf", "times", "verifyHttp", "method", "uri", "parameter", "parameter", "parameter", "times", "verifyHttp", "method", "uri", "parameter", "parameter", "parameter", "printStackTrace", "assertTrue"]}, "focal_class": {"identifier": "Report", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "private final SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd.MM.yyy HH:mm Z\");", "modifier": "private final", "type": "SimpleDateFormat", "declarator": "dateFormat = new SimpleDateFormat(\"dd.MM.yyy HH:mm Z\")", "var_name": "dateFormat"}, {"original_string": "public static final String THRESHOLD_NONE = \"noException\";", "modifier": "public static final", "type": "String", "declarator": "THRESHOLD_NONE = \"noException\"", "var_name": "THRESHOLD_NONE"}, {"original_string": "public static final String THRESHOLD_DEP_ON = \"dependsOn\";", "modifier": "public static final", "type": "String", "declarator": "THRESHOLD_DEP_ON = \"dependsOn\"", "var_name": "THRESHOLD_DEP_ON"}, {"original_string": "public static final String THRESHOLD_POT_EXE = \"potentiallyExecutes\";", "modifier": "public static final", "type": "String", "declarator": "THRESHOLD_POT_EXE = \"potentiallyExecutes\"", "var_name": "THRESHOLD_POT_EXE"}, {"original_string": "public static final String THRESHOLD_ACT_EXE = \"actuallyExecutes\";", "modifier": "public static final", "type": "String", "declarator": "THRESHOLD_ACT_EXE = \"actuallyExecutes\"", "var_name": "THRESHOLD_ACT_EXE"}, {"original_string": "private static final String TEMPLATE_FILE_HTML = \"velocity_template.html\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_FILE_HTML = \"velocity_template.html\"", "var_name": "TEMPLATE_FILE_HTML"}, {"original_string": "static final String REPORT_FILE_HTML = \"vulas-report.html\";", "modifier": "static final", "type": "String", "declarator": "REPORT_FILE_HTML = \"vulas-report.html\"", "var_name": "REPORT_FILE_HTML"}, {"original_string": "private static final String TEMPLATE_FILE_XML = \"velocity_template.xml\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_FILE_XML = \"velocity_template.xml\"", "var_name": "TEMPLATE_FILE_XML"}, {"original_string": "static final String REPORT_FILE_XML = \"vulas-report.xml\";", "modifier": "static final", "type": "String", "declarator": "REPORT_FILE_XML = \"vulas-report.xml\"", "var_name": "REPORT_FILE_XML"}, {"original_string": "private static final String TEMPLATE_FILE_JSON = \"velocity_template.json\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_FILE_JSON = \"velocity_template.json\"", "var_name": "TEMPLATE_FILE_JSON"}, {"original_string": "static final String REPORT_FILE_JSON = \"vulas-report.json\";", "modifier": "static final", "type": "String", "declarator": "REPORT_FILE_JSON = \"vulas-report.json\"", "var_name": "REPORT_FILE_JSON"}, {"original_string": "private Map<String, Long> stats = new HashMap<String, Long>();", "modifier": "private", "type": "Map<String, Long>", "declarator": "stats = new HashMap<String, Long>()", "var_name": "stats"}, {"original_string": "private String exceptionThreshold = THRESHOLD_POT_EXE;", "modifier": "private", "type": "String", "declarator": "exceptionThreshold = THRESHOLD_POT_EXE", "var_name": "exceptionThreshold"}, {"original_string": "private boolean createAffectedLibraries = false;", "modifier": "private", "type": "boolean", "declarator": "createAffectedLibraries = false", "var_name": "createAffectedLibraries"}, {"original_string": "private Set<AffectedLibrary> affectedLibraries = new HashSet<AffectedLibrary>();", "modifier": "private", "type": "Set<AffectedLibrary>", "declarator": "affectedLibraries = new HashSet<AffectedLibrary>()", "var_name": "affectedLibraries"}, {"original_string": "private ExemptionSet exemptions = new ExemptionSet();", "modifier": "private", "type": "ExemptionSet", "declarator": "exemptions = new ExemptionSet()", "var_name": "exemptions"}, {"original_string": "private Application app = null;", "modifier": "private", "type": "Application", "declarator": "app = null", "var_name": "app"}, {"original_string": "private Set<Application> modules = null;", "modifier": "private", "type": "Set<Application>", "declarator": "modules = null", "var_name": "modules"}, {"original_string": "private Set<AggregatedVuln> vulns = new TreeSet<AggregatedVuln>();", "modifier": "private", "type": "Set<AggregatedVuln>", "declarator": "vulns = new TreeSet<AggregatedVuln>()", "var_name": "vulns"}, {"original_string": "private Set<AggregatedVuln> vulnsAboveThreshold = new TreeSet<AggregatedVuln>();", "modifier": "private", "type": "Set<AggregatedVuln>", "declarator": "vulnsAboveThreshold = new TreeSet<AggregatedVuln>()", "var_name": "vulnsAboveThreshold"}, {"original_string": "private Set<AggregatedVuln> vulnsBelowThreshold = new TreeSet<AggregatedVuln>();", "modifier": "private", "type": "Set<AggregatedVuln>", "declarator": "vulnsBelowThreshold = new TreeSet<AggregatedVuln>()", "var_name": "vulnsBelowThreshold"}, {"original_string": "private Set<String> historicalVulns = new HashSet<String>();", "modifier": "private", "type": "Set<String>", "declarator": "historicalVulns = new HashSet<String>()", "var_name": "historicalVulns"}, {"original_string": "private Set<String> relevantVulns = new HashSet<String>();", "modifier": "private", "type": "Set<String>", "declarator": "relevantVulns = new HashSet<String>()", "var_name": "relevantVulns"}, {"original_string": "final VelocityContext context = new VelocityContext();", "modifier": "final", "type": "VelocityContext", "declarator": "context = new VelocityContext()", "var_name": "context"}, {"original_string": "private GoalContext goalContext = null;", "modifier": "private", "type": "GoalContext", "declarator": "goalContext = null", "var_name": "goalContext"}], "methods": [{"identifier": "Report", "parameters": "(GoalContext _ctx, Application _app, Set<Application> _modules)", "modifiers": "public", "return": "", "signature": " Report(GoalContext _ctx, Application _app, Set<Application> _modules)", "full_signature": "public  Report(GoalContext _ctx, Application _app, Set<Application> _modules)", "class_method_signature": "Report.Report(GoalContext _ctx, Application _app, Set<Application> _modules)", "testcase": false, "constructor": true}, {"identifier": "getExceptionThreshold", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExceptionThreshold()", "full_signature": "public String getExceptionThreshold()", "class_method_signature": "Report.getExceptionThreshold()", "testcase": false, "constructor": false}, {"identifier": "setExceptionThreshold", "parameters": "(String _threshold)", "modifiers": "public", "return": "void", "signature": "void setExceptionThreshold(String _threshold)", "full_signature": "public void setExceptionThreshold(String _threshold)", "class_method_signature": "Report.setExceptionThreshold(String _threshold)", "testcase": false, "constructor": false}, {"identifier": "isCreateAffectedLibraries", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCreateAffectedLibraries()", "full_signature": "public boolean isCreateAffectedLibraries()", "class_method_signature": "Report.isCreateAffectedLibraries()", "testcase": false, "constructor": false}, {"identifier": "setCreateAffectedLibraries", "parameters": "(boolean createAffectedLibraries)", "modifiers": "public", "return": "void", "signature": "void setCreateAffectedLibraries(boolean createAffectedLibraries)", "full_signature": "public void setCreateAffectedLibraries(boolean createAffectedLibraries)", "class_method_signature": "Report.setCreateAffectedLibraries(boolean createAffectedLibraries)", "testcase": false, "constructor": false}, {"identifier": "writeAffectedLibraries", "parameters": "(@NotNull Path _dir)", "modifiers": "private", "return": "void", "signature": "void writeAffectedLibraries(@NotNull Path _dir)", "full_signature": "private void writeAffectedLibraries(@NotNull Path _dir)", "class_method_signature": "Report.writeAffectedLibraries(@NotNull Path _dir)", "testcase": false, "constructor": false}, {"identifier": "setExemptions", "parameters": "(ExemptionSet _exemptions)", "modifiers": "public", "return": "void", "signature": "void setExemptions(ExemptionSet _exemptions)", "full_signature": "public void setExemptions(ExemptionSet _exemptions)", "class_method_signature": "Report.setExemptions(ExemptionSet _exemptions)", "testcase": false, "constructor": false}, {"identifier": "isAmongAggregatedModules", "parameters": "(LibraryId _libid)", "modifiers": "private", "return": "boolean", "signature": "boolean isAmongAggregatedModules(LibraryId _libid)", "full_signature": "private boolean isAmongAggregatedModules(LibraryId _libid)", "class_method_signature": "Report.isAmongAggregatedModules(LibraryId _libid)", "testcase": false, "constructor": false}, {"identifier": "fetchAppVulnerabilities", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void fetchAppVulnerabilities()", "full_signature": "public void fetchAppVulnerabilities()", "class_method_signature": "Report.fetchAppVulnerabilities()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Set<AggregatedVuln> _set, AggregatedVuln _av)", "modifiers": "private", "return": "AggregatedVuln", "signature": "AggregatedVuln update(Set<AggregatedVuln> _set, AggregatedVuln _av)", "full_signature": "private AggregatedVuln update(Set<AggregatedVuln> _set, AggregatedVuln _av)", "class_method_signature": "Report.update(Set<AggregatedVuln> _set, AggregatedVuln _av)", "testcase": false, "constructor": false}, {"identifier": "processVulnerabilities", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void processVulnerabilities()", "full_signature": "public void processVulnerabilities()", "class_method_signature": "Report.processVulnerabilities()", "testcase": false, "constructor": false}, {"identifier": "isAggregated", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isAggregated()", "full_signature": "private boolean isAggregated()", "class_method_signature": "Report.isAggregated()", "testcase": false, "constructor": false}, {"identifier": "isThrowBuildException", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isThrowBuildException()", "full_signature": "public boolean isThrowBuildException()", "class_method_signature": "Report.isThrowBuildException()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getConfiguration()", "full_signature": "public Map<String, String> getConfiguration()", "class_method_signature": "Report.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getStats", "parameters": "()", "modifiers": "public", "return": "Map<String, Long>", "signature": "Map<String, Long> getStats()", "full_signature": "public Map<String, Long> getStats()", "class_method_signature": "Report.getStats()", "testcase": false, "constructor": false}, {"identifier": "getExceptionMessage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExceptionMessage()", "full_signature": "public String getExceptionMessage()", "class_method_signature": "Report.getExceptionMessage()", "testcase": false, "constructor": false}, {"identifier": "getResultAsString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getResultAsString()", "full_signature": "public String getResultAsString()", "class_method_signature": "Report.getResultAsString()", "testcase": false, "constructor": false}, {"identifier": "writeResult", "parameters": "(@NotNull Path _dir)", "modifiers": "public", "return": "void", "signature": "void writeResult(@NotNull Path _dir)", "full_signature": "public void writeResult(@NotNull Path _dir)", "class_method_signature": "Report.writeResult(@NotNull Path _dir)", "testcase": false, "constructor": false}, {"identifier": "writeResult", "parameters": "(@NotNull Path _dir, String _template, String _report)", "modifiers": "public", "return": "Path", "signature": "Path writeResult(@NotNull Path _dir, String _template, String _report)", "full_signature": "public Path writeResult(@NotNull Path _dir, String _template, String _report)", "class_method_signature": "Report.writeResult(@NotNull Path _dir, String _template, String _report)", "testcase": false, "constructor": false}, {"identifier": "writeResultAsHtml", "parameters": "(@NotNull Path _dir)", "modifiers": "public", "return": "Path", "signature": "Path writeResultAsHtml(@NotNull Path _dir)", "full_signature": "public Path writeResultAsHtml(@NotNull Path _dir)", "class_method_signature": "Report.writeResultAsHtml(@NotNull Path _dir)", "testcase": false, "constructor": false}, {"identifier": "writeResultAsXml", "parameters": "(@NotNull Path _dir)", "modifiers": "public", "return": "Path", "signature": "Path writeResultAsXml(@NotNull Path _dir)", "full_signature": "public Path writeResultAsXml(@NotNull Path _dir)", "class_method_signature": "Report.writeResultAsXml(@NotNull Path _dir)", "testcase": false, "constructor": false}, {"identifier": "writeResultAsJson", "parameters": "(@NotNull Path _dir)", "modifiers": "public", "return": "Path", "signature": "Path writeResultAsJson(@NotNull Path _dir)", "full_signature": "public Path writeResultAsJson(@NotNull Path _dir)", "class_method_signature": "Report.writeResultAsJson(@NotNull Path _dir)", "testcase": false, "constructor": false}], "file": "lang/src/main/java/org/eclipse/steady/report/Report.java"}, "focal_method": {"identifier": "Report", "parameters": "(GoalContext _ctx, Application _app, Set<Application> _modules)", "modifiers": "public", "return": "", "body": "public Report(GoalContext _ctx, Application _app, Set<Application> _modules) {\n    this.goalContext = _ctx;\n    this.app = _app;\n\n    if (_modules == null) {\n      this.modules = new HashSet<Application>();\n      this.modules.add(this.app);\n    } else this.modules = _modules;\n\n    Report.log.info(\n        \"Report to be done for \"\n            + this.app\n            + \", [\"\n            + this.modules.size()\n            + \"] modules in total: \"\n            + this.modules);\n  }", "signature": " Report(GoalContext _ctx, Application _app, Set<Application> _modules)", "full_signature": "public  Report(GoalContext _ctx, Application _app, Set<Application> _modules)", "class_method_signature": "Report.Report(GoalContext _ctx, Application _app, Set<Application> _modules)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}