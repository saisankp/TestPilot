{"test_class": {"identifier": "KeyUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "memcached/src/test/java/com/bazaarvoice/dropwizard/caching/memcached/KeyUtilsTest.java"}, "test_case": {"identifier": "truncateKey", "parameters": "(String key, String expectedResult)", "modifiers": "@Test(dataProvider = \"truncateKeyData\") public", "return": "void", "body": "@Test(dataProvider = \"truncateKeyData\")\n    public void truncateKey(String key, String expectedResult) {\n        assertEquals(KeyUtils.truncateKey(key), expectedResult == null ? key : expectedResult);\n    }", "signature": "void truncateKey(String key, String expectedResult)", "full_signature": "@Test(dataProvider = \"truncateKeyData\") public void truncateKey(String key, String expectedResult)", "class_method_signature": "KeyUtilsTest.truncateKey(String key, String expectedResult)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "truncateKey"]}, "focal_class": {"identifier": "KeyUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int HASH_LENGTH = 28;", "modifier": "private static final", "type": "int", "declarator": "HASH_LENGTH = 28", "var_name": "HASH_LENGTH"}, {"original_string": "private static final char LAST_HASH_CHAR = '=';", "modifier": "private static final", "type": "char", "declarator": "LAST_HASH_CHAR = '='", "var_name": "LAST_HASH_CHAR"}, {"original_string": "private static final int MAX_KEY_BYTES = MemcachedClientIF.MAX_KEY_LENGTH;", "modifier": "private static final", "type": "int", "declarator": "MAX_KEY_BYTES = MemcachedClientIF.MAX_KEY_LENGTH", "var_name": "MAX_KEY_BYTES"}, {"original_string": "private static final int KEY_TRUNCATE_BYTES = MAX_KEY_BYTES - HASH_LENGTH;", "modifier": "private static final", "type": "int", "declarator": "KEY_TRUNCATE_BYTES = MAX_KEY_BYTES - HASH_LENGTH", "var_name": "KEY_TRUNCATE_BYTES"}], "methods": [{"identifier": "truncateKey", "parameters": "(String key)", "modifiers": "public static", "return": "String", "signature": "String truncateKey(String key)", "full_signature": "public static String truncateKey(String key)", "class_method_signature": "KeyUtils.truncateKey(String key)", "testcase": false, "constructor": false}, {"identifier": "generateKeyHash", "parameters": "(byte[] keyBytes)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] generateKeyHash(byte[] keyBytes)", "full_signature": "private static byte[] generateKeyHash(byte[] keyBytes)", "class_method_signature": "KeyUtils.generateKeyHash(byte[] keyBytes)", "testcase": false, "constructor": false}, {"identifier": "utf8CharLen", "parameters": "(byte byte1)", "modifiers": "private static", "return": "int", "signature": "int utf8CharLen(byte byte1)", "full_signature": "private static int utf8CharLen(byte byte1)", "class_method_signature": "KeyUtils.utf8CharLen(byte byte1)", "testcase": false, "constructor": false}], "file": "memcached/src/main/java/com/bazaarvoice/dropwizard/caching/memcached/KeyUtils.java"}, "focal_method": {"identifier": "truncateKey", "parameters": "(String key)", "modifiers": "public static", "return": "String", "body": "public static String truncateKey(String key) {\n        byte[] keyBytes = key.getBytes(Charsets.UTF_8);\n\n        if (keyBytes.length < MAX_KEY_BYTES || (keyBytes.length == MAX_KEY_BYTES && keyBytes[keyBytes.length - 1] != LAST_HASH_CHAR)) {\n            // Key is short enough\n            // If the key ends in equal sign, it could conflict with a truncated/hashed key, so\n            // truncate and hash it\n            return key;\n        }\n\n        // Generate hash of original, full key\n        byte[] keyHash = generateKeyHash(keyBytes);\n        assert keyHash.length == HASH_LENGTH;\n        assert keyHash[keyHash.length - 1] == LAST_HASH_CHAR;\n\n        // Overwrite ending partial character with single byte chars\n        // This is not strictly required, but keeps the key valid UTF-8\n        int lastCharIndex = KEY_TRUNCATE_BYTES - 1;\n\n        while ((keyBytes[lastCharIndex] & 0xC0) == 0x80) {\n            lastCharIndex -= 1;\n        }\n\n        if (utf8CharLen(keyBytes[lastCharIndex]) > (KEY_TRUNCATE_BYTES - lastCharIndex)) {\n            while (lastCharIndex < KEY_TRUNCATE_BYTES) {\n                keyBytes[lastCharIndex++] = '+';\n            }\n        }\n\n        // Append key hash\n        System.arraycopy(keyHash, 0, keyBytes, KEY_TRUNCATE_BYTES, keyHash.length);\n        return new String(keyBytes, 0, MAX_KEY_BYTES, Charsets.UTF_8);\n    }", "signature": "String truncateKey(String key)", "full_signature": "public static String truncateKey(String key)", "class_method_signature": "KeyUtils.truncateKey(String key)", "testcase": false, "constructor": false, "invocations": ["getBytes", "generateKeyHash", "utf8CharLen", "arraycopy"]}, "repository": {"repo_id": 21859706, "url": "https://github.com/bazaarvoice/dropwizard-caching-bundle", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 167, "license": "licensed"}}