{"test_class": {"identifier": "NetworkStateComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double EPS = Math.pow(10, -15);", "modifier": "private static final", "type": "double", "declarator": "EPS = Math.pow(10, -15)", "var_name": "EPS"}, {"original_string": "private FileSystem fileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}, {"original_string": "private Network network;", "modifier": "private", "type": "Network", "declarator": "network", "var_name": "network"}], "file": "iidm/iidm-comparator/src/test/java/com/powsybl/iidm/comparator/NetworkStateComparatorTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws IOException {\n        network.getVariantManager().cloneVariant(VariantManagerConstants.INITIAL_VARIANT_ID, \"other\");\n        network.getVariantManager().setWorkingVariant(\"other\");\n        network.getBusView().getBus(\"VLGEN_0\").setV(25.5);\n        network.getBusView().getBus(\"VLHV2_0\").setAngle(-3.4);\n        network.getBusView().getBus(\"VLLOAD_0\").setAngle(9);\n\n        Path xlsFile = fileSystem.getPath(\"/work/test.xls\");\n        new NetworkStateComparator(network, VariantManagerConstants.INITIAL_VARIANT_ID)\n                .generateXls(xlsFile);\n\n        try (InputStream is = Files.newInputStream(xlsFile)) {\n            Workbook wb = new XSSFWorkbook(is);\n            assertEquals(7, wb.getNumberOfSheets());\n            Sheet busesSheet = wb.getSheet(\"Buses\");\n            Sheet linesSheet = wb.getSheet(\"Lines\");\n            Sheet transformersSheet = wb.getSheet(\"Transformers\");\n            Sheet generatorsSheet = wb.getSheet(\"Generators\");\n            Sheet hvdcConverterStationsSheet = wb.getSheet(\"HVDC converter stations\");\n            Sheet loadsSheet = wb.getSheet(\"Loads\");\n            Sheet shuntsSheet = wb.getSheet(\"Shunts\");\n            assertNotNull(busesSheet);\n            assertNotNull(linesSheet);\n            assertNotNull(transformersSheet);\n            assertNotNull(hvdcConverterStationsSheet);\n            assertNotNull(generatorsSheet);\n            assertNotNull(loadsSheet);\n            assertNotNull(shuntsSheet);\n\n            FormulaEvaluator evaluator = wb.getCreationHelper().createFormulaEvaluator();\n            evaluator.evaluateAll();\n\n            // check buses sheet content\n\n            // other state, v\n            CellReference c3 = new CellReference(\"C3\");\n            CellReference c4 = new CellReference(\"C4\");\n            CellReference c5 = new CellReference(\"C5\");\n            CellReference c6 = new CellReference(\"C6\");\n            assertEquals(25.5, busesSheet.getRow(c3.getRow()).getCell(c3.getCol()).getNumericCellValue(), EPS);\n            assertEquals(402.14, busesSheet.getRow(c4.getRow()).getCell(c4.getCol()).getNumericCellValue(), EPS);\n            assertEquals(389.95, busesSheet.getRow(c5.getRow()).getCell(c5.getCol()).getNumericCellValue(), EPS);\n            assertEquals(147.58, busesSheet.getRow(c6.getRow()).getCell(c6.getCol()).getNumericCellValue(), EPS);\n\n            // other state, angle\n            CellReference d3 = new CellReference(\"D3\");\n            CellReference d4 = new CellReference(\"D4\");\n            CellReference d5 = new CellReference(\"D5\");\n            CellReference d6 = new CellReference(\"D6\");\n            assertEquals(2.33, busesSheet.getRow(d3.getRow()).getCell(d3.getCol()).getNumericCellValue(), EPS);\n            assertEquals(0, busesSheet.getRow(d4.getRow()).getCell(d4.getCol()).getNumericCellValue(), EPS);\n            assertEquals(-3.4, busesSheet.getRow(d5.getRow()).getCell(d5.getCol()).getNumericCellValue(), EPS);\n            assertEquals(9, busesSheet.getRow(d6.getRow()).getCell(d6.getCol()).getNumericCellValue(), EPS);\n\n            // initial state, v\n            CellReference e3 = new CellReference(\"E3\");\n            CellReference e4 = new CellReference(\"E4\");\n            CellReference e5 = new CellReference(\"E5\");\n            CellReference e6 = new CellReference(\"E6\");\n            assertEquals(24.5, busesSheet.getRow(e3.getRow()).getCell(e3.getCol()).getNumericCellValue(), EPS);\n            assertEquals(402.14, busesSheet.getRow(e4.getRow()).getCell(e4.getCol()).getNumericCellValue(), EPS);\n            assertEquals(389.95, busesSheet.getRow(e5.getRow()).getCell(e5.getCol()).getNumericCellValue(), EPS);\n            assertEquals(147.58, busesSheet.getRow(e6.getRow()).getCell(e6.getCol()).getNumericCellValue(), EPS);\n\n            // initial state, angle\n            CellReference f3 = new CellReference(\"F3\");\n            CellReference f4 = new CellReference(\"F4\");\n            CellReference f5 = new CellReference(\"F5\");\n            CellReference f6 = new CellReference(\"F6\");\n            assertEquals(2.33, busesSheet.getRow(f3.getRow()).getCell(f3.getCol()).getNumericCellValue(), EPS);\n            assertEquals(0, busesSheet.getRow(f4.getRow()).getCell(f4.getCol()).getNumericCellValue(), EPS);\n            assertEquals(-3.5, busesSheet.getRow(f5.getRow()).getCell(f5.getCol()).getNumericCellValue(), EPS);\n            assertEquals(9.61, busesSheet.getRow(f6.getRow()).getCell(f6.getCol()).getNumericCellValue(), EPS);\n\n            // diff, v\n            CellReference g3 = new CellReference(\"G3\");\n            CellReference g4 = new CellReference(\"G4\");\n            CellReference g5 = new CellReference(\"G5\");\n            CellReference g6 = new CellReference(\"G6\");\n            assertEquals(1, busesSheet.getRow(g3.getRow()).getCell(g3.getCol()).getNumericCellValue(), EPS);\n            assertEquals(0, busesSheet.getRow(g4.getRow()).getCell(g4.getCol()).getNumericCellValue(), EPS);\n            assertEquals(0, busesSheet.getRow(g5.getRow()).getCell(g5.getCol()).getNumericCellValue(), EPS);\n            assertEquals(0, busesSheet.getRow(g6.getRow()).getCell(g6.getCol()).getNumericCellValue(), EPS);\n\n            // diff, angle\n            CellReference h3 = new CellReference(\"H3\");\n            CellReference h4 = new CellReference(\"H4\");\n            CellReference h5 = new CellReference(\"H5\");\n            CellReference h6 = new CellReference(\"H6\");\n            assertEquals(0, busesSheet.getRow(h3.getRow()).getCell(h3.getCol()).getNumericCellValue(), EPS);\n            assertEquals(0, busesSheet.getRow(h4.getRow()).getCell(h4.getCol()).getNumericCellValue(), EPS);\n            assertEquals(0.1, busesSheet.getRow(h5.getRow()).getCell(h5.getCol()).getNumericCellValue(), EPS);\n            assertEquals(0.6099999999999994, busesSheet.getRow(h6.getRow()).getCell(h6.getCol()).getNumericCellValue(), EPS);\n\n            // statistics footer, v\n            CellReference g7 = new CellReference(\"G7\");\n            CellReference g8 = new CellReference(\"G8\");\n            CellReference g9 = new CellReference(\"G9\");\n            assertEquals(1, busesSheet.getRow(g7.getRow()).getCell(g7.getCol()).getNumericCellValue(), EPS); // max\n            assertEquals(0, busesSheet.getRow(g8.getRow()).getCell(g8.getCol()).getNumericCellValue(), EPS); // min\n            assertEquals(0.25, busesSheet.getRow(g9.getRow()).getCell(g9.getCol()).getNumericCellValue(), EPS); // average\n\n            // statistics footer, angle\n            CellReference h7 = new CellReference(\"H7\");\n            CellReference h8 = new CellReference(\"H8\");\n            CellReference h9 = new CellReference(\"H9\");\n            assertEquals(0.6099999999999994, busesSheet.getRow(h7.getRow()).getCell(h7.getCol()).getNumericCellValue(), EPS); // max\n            assertEquals(0, busesSheet.getRow(h8.getRow()).getCell(h8.getCol()).getNumericCellValue(), EPS); // min\n            assertEquals(0.17749999999999988, busesSheet.getRow(h9.getRow()).getCell(h9.getCol()).getNumericCellValue(), EPS); // average\n        }\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "NetworkStateComparatorTest.test()", "testcase": true, "constructor": false, "invocations": ["cloneVariant", "getVariantManager", "setWorkingVariant", "getVariantManager", "setV", "getBus", "getBusView", "setAngle", "getBus", "getBusView", "setAngle", "getBus", "getBusView", "getPath", "generateXls", "newInputStream", "assertEquals", "getNumberOfSheets", "getSheet", "getSheet", "getSheet", "getSheet", "getSheet", "getSheet", "getSheet", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "createFormulaEvaluator", "getCreationHelper", "evaluateAll", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol", "assertEquals", "getNumericCellValue", "getCell", "getRow", "getRow", "getCol"]}, "focal_class": {"identifier": "NetworkStateComparator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(NetworkStateComparator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(NetworkStateComparator.class)", "var_name": "LOGGER"}, {"original_string": "private static final ColumnMapper<Bus> BUS_V = new ColumnMapper<Bus>() {\n\n        @Override\n        public String getTitle() {\n            return \"v (KV)\";\n        }\n\n        @Override\n        public void setValue(Bus bus, Cell cell) {\n            if (!Double.isNaN(bus.getV())) {\n                cell.setCellValue(bus.getV());\n            }\n        }\n    };", "modifier": "private static final", "type": "ColumnMapper<Bus>", "declarator": "BUS_V = new ColumnMapper<Bus>() {\n\n        @Override\n        public String getTitle() {\n            return \"v (KV)\";\n        }\n\n        @Override\n        public void setValue(Bus bus, Cell cell) {\n            if (!Double.isNaN(bus.getV())) {\n                cell.setCellValue(bus.getV());\n            }\n        }\n    }", "var_name": "BUS_V"}, {"original_string": "private static final ColumnMapper<Bus> BUS_ANGLE = new ColumnMapper<Bus>() {\n\n        @Override\n        public String getTitle() {\n            return \"\\u03B8 (\u00b0)\";\n        }\n\n        @Override\n        public void setValue(Bus bus, Cell cell) {\n            if (!Double.isNaN(bus.getAngle())) {\n                cell.setCellValue(bus.getAngle());\n            }\n        }\n    };", "modifier": "private static final", "type": "ColumnMapper<Bus>", "declarator": "BUS_ANGLE = new ColumnMapper<Bus>() {\n\n        @Override\n        public String getTitle() {\n            return \"\\u03B8 (\u00b0)\";\n        }\n\n        @Override\n        public void setValue(Bus bus, Cell cell) {\n            if (!Double.isNaN(bus.getAngle())) {\n                cell.setCellValue(bus.getAngle());\n            }\n        }\n    }", "var_name": "BUS_ANGLE"}, {"original_string": "private static final BranchP1ColumnMapper<Line> LINE_P1 = new BranchP1ColumnMapper<>();", "modifier": "private static final", "type": "BranchP1ColumnMapper<Line>", "declarator": "LINE_P1 = new BranchP1ColumnMapper<>()", "var_name": "LINE_P1"}, {"original_string": "private static final BranchQ1ColumnMapper<Line> LINE_Q1 = new BranchQ1ColumnMapper<>();", "modifier": "private static final", "type": "BranchQ1ColumnMapper<Line>", "declarator": "LINE_Q1 = new BranchQ1ColumnMapper<>()", "var_name": "LINE_Q1"}, {"original_string": "private static final BranchP2ColumnMapper<Line> LINE_P2 = new BranchP2ColumnMapper<>();", "modifier": "private static final", "type": "BranchP2ColumnMapper<Line>", "declarator": "LINE_P2 = new BranchP2ColumnMapper<>()", "var_name": "LINE_P2"}, {"original_string": "private static final BranchQ2ColumnMapper<Line> LINE_Q2 = new BranchQ2ColumnMapper<>();", "modifier": "private static final", "type": "BranchQ2ColumnMapper<Line>", "declarator": "LINE_Q2 = new BranchQ2ColumnMapper<>()", "var_name": "LINE_Q2"}, {"original_string": "private static final BranchP1ColumnMapper<TwoWindingsTransformer> TWT_P1 = new BranchP1ColumnMapper<>();", "modifier": "private static final", "type": "BranchP1ColumnMapper<TwoWindingsTransformer>", "declarator": "TWT_P1 = new BranchP1ColumnMapper<>()", "var_name": "TWT_P1"}, {"original_string": "private static final BranchQ1ColumnMapper<TwoWindingsTransformer> TWT_Q1 = new BranchQ1ColumnMapper<>();", "modifier": "private static final", "type": "BranchQ1ColumnMapper<TwoWindingsTransformer>", "declarator": "TWT_Q1 = new BranchQ1ColumnMapper<>()", "var_name": "TWT_Q1"}, {"original_string": "private static final BranchP2ColumnMapper<TwoWindingsTransformer> TWT_P2 = new BranchP2ColumnMapper<>();", "modifier": "private static final", "type": "BranchP2ColumnMapper<TwoWindingsTransformer>", "declarator": "TWT_P2 = new BranchP2ColumnMapper<>()", "var_name": "TWT_P2"}, {"original_string": "private static final BranchQ2ColumnMapper<TwoWindingsTransformer> TWT_Q2 = new BranchQ2ColumnMapper<>();", "modifier": "private static final", "type": "BranchQ2ColumnMapper<TwoWindingsTransformer>", "declarator": "TWT_Q2 = new BranchQ2ColumnMapper<>()", "var_name": "TWT_Q2"}, {"original_string": "private static final BranchRatioColumnMapper<TwoWindingsTransformer> TWT_RATIO = new BranchRatioColumnMapper<>();", "modifier": "private static final", "type": "BranchRatioColumnMapper<TwoWindingsTransformer>", "declarator": "TWT_RATIO = new BranchRatioColumnMapper<>()", "var_name": "TWT_RATIO"}, {"original_string": "private static final BranchDephaColumnMapper<TwoWindingsTransformer> TWT_DEPHA = new BranchDephaColumnMapper<>();", "modifier": "private static final", "type": "BranchDephaColumnMapper<TwoWindingsTransformer>", "declarator": "TWT_DEPHA = new BranchDephaColumnMapper<>()", "var_name": "TWT_DEPHA"}, {"original_string": "private static final ColumnMapper<TwoWindingsTransformer> TWT_RATIO_TAP = new ColumnMapper<TwoWindingsTransformer>() {\n\n        @Override\n        public String getTitle() {\n            return \"ratio tap\";\n        }\n\n        @Override\n        public void setValue(TwoWindingsTransformer twt, Cell cell) {\n            RatioTapChanger rtc = twt.getRatioTapChanger();\n            if (rtc != null) {\n                cell.setCellValue(rtc.getTapPosition());\n            }\n        }\n    };", "modifier": "private static final", "type": "ColumnMapper<TwoWindingsTransformer>", "declarator": "TWT_RATIO_TAP = new ColumnMapper<TwoWindingsTransformer>() {\n\n        @Override\n        public String getTitle() {\n            return \"ratio tap\";\n        }\n\n        @Override\n        public void setValue(TwoWindingsTransformer twt, Cell cell) {\n            RatioTapChanger rtc = twt.getRatioTapChanger();\n            if (rtc != null) {\n                cell.setCellValue(rtc.getTapPosition());\n            }\n        }\n    }", "var_name": "TWT_RATIO_TAP"}, {"original_string": "private static final ColumnMapper<TwoWindingsTransformer> TWT_PHASE_TAP = new ColumnMapper<TwoWindingsTransformer>() {\n\n        @Override\n        public String getTitle() {\n            return \"phase tap\";\n        }\n\n        @Override\n        public void setValue(TwoWindingsTransformer twt, Cell cell) {\n            PhaseTapChanger ptc = twt.getPhaseTapChanger();\n            if (ptc != null) {\n                cell.setCellValue(ptc.getTapPosition());\n            }\n        }\n    };", "modifier": "private static final", "type": "ColumnMapper<TwoWindingsTransformer>", "declarator": "TWT_PHASE_TAP = new ColumnMapper<TwoWindingsTransformer>() {\n\n        @Override\n        public String getTitle() {\n            return \"phase tap\";\n        }\n\n        @Override\n        public void setValue(TwoWindingsTransformer twt, Cell cell) {\n            PhaseTapChanger ptc = twt.getPhaseTapChanger();\n            if (ptc != null) {\n                cell.setCellValue(ptc.getTapPosition());\n            }\n        }\n    }", "var_name": "TWT_PHASE_TAP"}, {"original_string": "private static final InjectionPColumnMapper<Generator> GEN_P = new InjectionPColumnMapper<>();", "modifier": "private static final", "type": "InjectionPColumnMapper<Generator>", "declarator": "GEN_P = new InjectionPColumnMapper<>()", "var_name": "GEN_P"}, {"original_string": "private static final InjectionQColumnMapper<Generator> GEN_Q = new InjectionQColumnMapper<>();", "modifier": "private static final", "type": "InjectionQColumnMapper<Generator>", "declarator": "GEN_Q = new InjectionQColumnMapper<>()", "var_name": "GEN_Q"}, {"original_string": "private static final InjectionVColumnMapper<Generator> GEN_V = new InjectionVColumnMapper<>();", "modifier": "private static final", "type": "InjectionVColumnMapper<Generator>", "declarator": "GEN_V = new InjectionVColumnMapper<>()", "var_name": "GEN_V"}, {"original_string": "private static final InjectionPColumnMapper<HvdcConverterStation> HVDC_P = new InjectionPColumnMapper<>();", "modifier": "private static final", "type": "InjectionPColumnMapper<HvdcConverterStation>", "declarator": "HVDC_P = new InjectionPColumnMapper<>()", "var_name": "HVDC_P"}, {"original_string": "private static final InjectionQColumnMapper<HvdcConverterStation> HVDC_Q = new InjectionQColumnMapper<>();", "modifier": "private static final", "type": "InjectionQColumnMapper<HvdcConverterStation>", "declarator": "HVDC_Q = new InjectionQColumnMapper<>()", "var_name": "HVDC_Q"}, {"original_string": "private static final InjectionVColumnMapper<HvdcConverterStation> HVDC_V = new InjectionVColumnMapper<>();", "modifier": "private static final", "type": "InjectionVColumnMapper<HvdcConverterStation>", "declarator": "HVDC_V = new InjectionVColumnMapper<>()", "var_name": "HVDC_V"}, {"original_string": "private static final InjectionPColumnMapper<Load> LOAD_P = new InjectionPColumnMapper<>();", "modifier": "private static final", "type": "InjectionPColumnMapper<Load>", "declarator": "LOAD_P = new InjectionPColumnMapper<>()", "var_name": "LOAD_P"}, {"original_string": "private static final InjectionQColumnMapper<Load> LOAD_Q = new InjectionQColumnMapper<>();", "modifier": "private static final", "type": "InjectionQColumnMapper<Load>", "declarator": "LOAD_Q = new InjectionQColumnMapper<>()", "var_name": "LOAD_Q"}, {"original_string": "private static final ColumnMapper<ShuntCompensator> SHUNT_SECTIONS = new ColumnMapper<ShuntCompensator>() {\n\n        @Override\n        public String getTitle() {\n            return \"shunt sections\";\n        }\n\n        @Override\n        public void setValue(ShuntCompensator sc, Cell cell) {\n            cell.setCellValue(sc.getSectionCount());\n        }\n    };", "modifier": "private static final", "type": "ColumnMapper<ShuntCompensator>", "declarator": "SHUNT_SECTIONS = new ColumnMapper<ShuntCompensator>() {\n\n        @Override\n        public String getTitle() {\n            return \"shunt sections\";\n        }\n\n        @Override\n        public void setValue(ShuntCompensator sc, Cell cell) {\n            cell.setCellValue(sc.getSectionCount());\n        }\n    }", "var_name": "SHUNT_SECTIONS"}, {"original_string": "private static final InjectionQColumnMapper<ShuntCompensator> SHUNT_Q = new InjectionQColumnMapper<>();", "modifier": "private static final", "type": "InjectionQColumnMapper<ShuntCompensator>", "declarator": "SHUNT_Q = new InjectionQColumnMapper<>()", "var_name": "SHUNT_Q"}, {"original_string": "private static final List<ColumnMapper<Bus>> BUS_MAPPERS = ImmutableList.of(BUS_V, BUS_ANGLE);", "modifier": "private static final", "type": "List<ColumnMapper<Bus>>", "declarator": "BUS_MAPPERS = ImmutableList.of(BUS_V, BUS_ANGLE)", "var_name": "BUS_MAPPERS"}, {"original_string": "private static final List<ColumnMapper<Line>> LINE_MAPPERS = ImmutableList.of(LINE_P1, LINE_P2, LINE_Q1, LINE_Q2);", "modifier": "private static final", "type": "List<ColumnMapper<Line>>", "declarator": "LINE_MAPPERS = ImmutableList.of(LINE_P1, LINE_P2, LINE_Q1, LINE_Q2)", "var_name": "LINE_MAPPERS"}, {"original_string": "private static final List<ColumnMapper<TwoWindingsTransformer>> TRANSFO_MAPPERS = ImmutableList.of(TWT_P1, TWT_P2, TWT_Q1, TWT_Q2, TWT_RATIO_TAP, TWT_PHASE_TAP, TWT_RATIO, TWT_DEPHA);", "modifier": "private static final", "type": "List<ColumnMapper<TwoWindingsTransformer>>", "declarator": "TRANSFO_MAPPERS = ImmutableList.of(TWT_P1, TWT_P2, TWT_Q1, TWT_Q2, TWT_RATIO_TAP, TWT_PHASE_TAP, TWT_RATIO, TWT_DEPHA)", "var_name": "TRANSFO_MAPPERS"}, {"original_string": "private static final List<ColumnMapper<Generator>> GENERATOR_MAPPERS = ImmutableList.of(GEN_P, GEN_Q, GEN_V);", "modifier": "private static final", "type": "List<ColumnMapper<Generator>>", "declarator": "GENERATOR_MAPPERS = ImmutableList.of(GEN_P, GEN_Q, GEN_V)", "var_name": "GENERATOR_MAPPERS"}, {"original_string": "private static final List<ColumnMapper<HvdcConverterStation>> HVDC_MAPPERS = ImmutableList.of(HVDC_P, HVDC_Q, HVDC_V);", "modifier": "private static final", "type": "List<ColumnMapper<HvdcConverterStation>>", "declarator": "HVDC_MAPPERS = ImmutableList.of(HVDC_P, HVDC_Q, HVDC_V)", "var_name": "HVDC_MAPPERS"}, {"original_string": "private static final List<ColumnMapper<Load>> LOAD_MAPPERS = ImmutableList.of(LOAD_P, LOAD_Q);", "modifier": "private static final", "type": "List<ColumnMapper<Load>>", "declarator": "LOAD_MAPPERS = ImmutableList.of(LOAD_P, LOAD_Q)", "var_name": "LOAD_MAPPERS"}, {"original_string": "private static final List<ColumnMapper<ShuntCompensator>> SHUNT_MAPPERS = ImmutableList.of(SHUNT_SECTIONS, SHUNT_Q);", "modifier": "private static final", "type": "List<ColumnMapper<ShuntCompensator>>", "declarator": "SHUNT_MAPPERS = ImmutableList.of(SHUNT_SECTIONS, SHUNT_Q)", "var_name": "SHUNT_MAPPERS"}, {"original_string": "private final Network network;", "modifier": "private final", "type": "Network", "declarator": "network", "var_name": "network"}, {"original_string": "private final String otherState;", "modifier": "private final", "type": "String", "declarator": "otherState", "var_name": "otherState"}], "methods": [{"identifier": "NetworkStateComparator", "parameters": "(Network network, String otherState)", "modifiers": "public", "return": "", "signature": " NetworkStateComparator(Network network, String otherState)", "full_signature": "public  NetworkStateComparator(Network network, String otherState)", "class_method_signature": "NetworkStateComparator.NetworkStateComparator(Network network, String otherState)", "testcase": false, "constructor": true}, {"identifier": "createTitleCell", "parameters": "(Row row, int i, CellStyle titleCellStyle)", "modifiers": "private static", "return": "Cell", "signature": "Cell createTitleCell(Row row, int i, CellStyle titleCellStyle)", "full_signature": "private static Cell createTitleCell(Row row, int i, CellStyle titleCellStyle)", "class_method_signature": "NetworkStateComparator.createTitleCell(Row row, int i, CellStyle titleCellStyle)", "testcase": false, "constructor": false}, {"identifier": "createColumnHeader", "parameters": "(SheetContext<T> sheetContext, CellStyle titleCellStyle)", "modifiers": "private static", "return": "void", "signature": "void createColumnHeader(SheetContext<T> sheetContext, CellStyle titleCellStyle)", "full_signature": "private static void createColumnHeader(SheetContext<T> sheetContext, CellStyle titleCellStyle)", "class_method_signature": "NetworkStateComparator.createColumnHeader(SheetContext<T> sheetContext, CellStyle titleCellStyle)", "testcase": false, "constructor": false}, {"identifier": "createColumns", "parameters": "(SheetContext<T> sheetContext, CellStyle titleCellStyle,\n                                                               int columnOffset, String columnsTitle, List<ColumnMapper<T>> mappers)", "modifiers": "private static", "return": "void", "signature": "void createColumns(SheetContext<T> sheetContext, CellStyle titleCellStyle,\n                                                               int columnOffset, String columnsTitle, List<ColumnMapper<T>> mappers)", "full_signature": "private static void createColumns(SheetContext<T> sheetContext, CellStyle titleCellStyle,\n                                                               int columnOffset, String columnsTitle, List<ColumnMapper<T>> mappers)", "class_method_signature": "NetworkStateComparator.createColumns(SheetContext<T> sheetContext, CellStyle titleCellStyle,\n                                                               int columnOffset, String columnsTitle, List<ColumnMapper<T>> mappers)", "testcase": false, "constructor": false}, {"identifier": "createSheet", "parameters": "(List<T> objs, Workbook wb, CellStyle titleCellStyle,\n                                                      String sheetTitle, List<ColumnMapper<T>> mappers)", "modifiers": "private", "return": "void", "signature": "void createSheet(List<T> objs, Workbook wb, CellStyle titleCellStyle,\n                                                      String sheetTitle, List<ColumnMapper<T>> mappers)", "full_signature": "private void createSheet(List<T> objs, Workbook wb, CellStyle titleCellStyle,\n                                                      String sheetTitle, List<ColumnMapper<T>> mappers)", "class_method_signature": "NetworkStateComparator.createSheet(List<T> objs, Workbook wb, CellStyle titleCellStyle,\n                                                      String sheetTitle, List<ColumnMapper<T>> mappers)", "testcase": false, "constructor": false}, {"identifier": "createRowFooter", "parameters": "(SheetContext<T> sheetContext, int diffColumnOffset,\n                                                          List<ColumnMapper<T>> mappers, int footerIndex, String title, BinaryOperator<String> function)", "modifiers": "private", "return": "void", "signature": "void createRowFooter(SheetContext<T> sheetContext, int diffColumnOffset,\n                                                          List<ColumnMapper<T>> mappers, int footerIndex, String title, BinaryOperator<String> function)", "full_signature": "private void createRowFooter(SheetContext<T> sheetContext, int diffColumnOffset,\n                                                          List<ColumnMapper<T>> mappers, int footerIndex, String title, BinaryOperator<String> function)", "class_method_signature": "NetworkStateComparator.createRowFooter(SheetContext<T> sheetContext, int diffColumnOffset,\n                                                          List<ColumnMapper<T>> mappers, int footerIndex, String title, BinaryOperator<String> function)", "testcase": false, "constructor": false}, {"identifier": "createSheets", "parameters": "(Workbook wb, CellStyle titleCellStyle)", "modifiers": "private", "return": "void", "signature": "void createSheets(Workbook wb, CellStyle titleCellStyle)", "full_signature": "private void createSheets(Workbook wb, CellStyle titleCellStyle)", "class_method_signature": "NetworkStateComparator.createSheets(Workbook wb, CellStyle titleCellStyle)", "testcase": false, "constructor": false}, {"identifier": "generateXls", "parameters": "(Path xsl)", "modifiers": "public", "return": "void", "signature": "void generateXls(Path xsl)", "full_signature": "public void generateXls(Path xsl)", "class_method_signature": "NetworkStateComparator.generateXls(Path xsl)", "testcase": false, "constructor": false}, {"identifier": "generateXls", "parameters": "(OutputStream out)", "modifiers": "public", "return": "void", "signature": "void generateXls(OutputStream out)", "full_signature": "public void generateXls(OutputStream out)", "class_method_signature": "NetworkStateComparator.generateXls(OutputStream out)", "testcase": false, "constructor": false}], "file": "iidm/iidm-comparator/src/main/java/com/powsybl/iidm/comparator/NetworkStateComparator.java"}, "focal_method": {"identifier": "generateXls", "parameters": "(Path xsl)", "modifiers": "public", "return": "void", "body": "public void generateXls(Path xsl) {\n        try (OutputStream out = Files.newOutputStream(xsl)) {\n            generateXls(out);\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }", "signature": "void generateXls(Path xsl)", "full_signature": "public void generateXls(Path xsl)", "class_method_signature": "NetworkStateComparator.generateXls(Path xsl)", "testcase": false, "constructor": false, "invocations": ["newOutputStream", "generateXls"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}