{"test_class": {"identifier": "LimitViolationFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FileSystem fileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}, {"original_string": "private InMemoryPlatformConfig platformConfig;", "modifier": "private", "type": "InMemoryPlatformConfig", "declarator": "platformConfig", "var_name": "platformConfig"}], "file": "security-analysis-api/src/test/java/com/powsybl/security/LimitViolationFilterTest.java"}, "test_case": {"identifier": "apply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void apply() throws Exception {\n        Network network = TestingNetworkFactory.create();\n\n        LimitViolation line1Violation = new LimitViolation(\"LINE1\", LimitViolationType.CURRENT, \"\", Integer.MAX_VALUE, 1000.0, 1, 1100.0, Branch.Side.ONE);\n        LimitViolation line2Violation = new LimitViolation(\"LINE2\", LimitViolationType.CURRENT, \"\", Integer.MAX_VALUE, 900.0, 1, 950.0, Branch.Side.TWO);\n        LimitViolation vl1Violation = new LimitViolation(\"VL1\", LimitViolationType.HIGH_VOLTAGE, 200.0, 1, 250.0);\n\n        LimitViolationFilter filter = new LimitViolationFilter();\n        List<LimitViolation> filteredViolations = filter.apply(Arrays.asList(line1Violation, line2Violation, vl1Violation), network);\n        assertEquals(3, filteredViolations.size());\n\n        filter = new LimitViolationFilter();\n        filter.setViolationTypes(EnumSet.of(LimitViolationType.HIGH_VOLTAGE));\n        filteredViolations = filter.apply(Arrays.asList(line1Violation, line2Violation, vl1Violation), network);\n        checkFilteredViolations(filteredViolations, network, \"VL1\", LimitViolationType.HIGH_VOLTAGE, 220.0, Country.FR, \"VL1\");\n\n        filter = new LimitViolationFilter();\n        filter.setMinBaseVoltage(300.0);\n        filteredViolations = filter.apply(Arrays.asList(line1Violation, line2Violation, vl1Violation), network);\n        checkFilteredViolations(filteredViolations, network, \"LINE1\", LimitViolationType.CURRENT, 380.0, Country.FR, \"VL2\");\n\n        filter = new LimitViolationFilter();\n        filter.setCountries(EnumSet.of(Country.BE));\n        filteredViolations = filter.apply(Arrays.asList(line1Violation, line2Violation, vl1Violation), network);\n        checkFilteredViolations(filteredViolations, network, \"LINE2\", LimitViolationType.CURRENT, 220.0, Country.BE, \"VL3\");\n\n        filter = new LimitViolationFilter(EnumSet.of(LimitViolationType.CURRENT), 300.0, EnumSet.of(Country.FR));\n        filteredViolations = filter.apply(Arrays.asList(line1Violation, line2Violation, vl1Violation), network);\n        checkFilteredViolations(filteredViolations, network, \"LINE1\", LimitViolationType.CURRENT, 380.0, Country.FR, \"VL2\");\n    }", "signature": "void apply()", "full_signature": "@Test public void apply()", "class_method_signature": "LimitViolationFilterTest.apply()", "testcase": true, "constructor": false, "invocations": ["create", "apply", "asList", "assertEquals", "size", "setViolationTypes", "of", "apply", "asList", "checkFilteredViolations", "setMinBaseVoltage", "apply", "asList", "checkFilteredViolations", "setCountries", "of", "apply", "asList", "checkFilteredViolations", "of", "of", "apply", "asList", "checkFilteredViolations"]}, "focal_class": {"identifier": "LimitViolationFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<LimitViolationType> DEFAULT_VIOLATION_TYPES = EnumSet.allOf(LimitViolationType.class);", "modifier": "private static final", "type": "Set<LimitViolationType>", "declarator": "DEFAULT_VIOLATION_TYPES = EnumSet.allOf(LimitViolationType.class)", "var_name": "DEFAULT_VIOLATION_TYPES"}, {"original_string": "private static final double DEFAULT_MIN_BASE_VOLTAGE = 0.0;", "modifier": "private static final", "type": "double", "declarator": "DEFAULT_MIN_BASE_VOLTAGE = 0.0", "var_name": "DEFAULT_MIN_BASE_VOLTAGE"}, {"original_string": "private static final Set<Country> DEFAULT_COUNTRIES = null;", "modifier": "private static final", "type": "Set<Country>", "declarator": "DEFAULT_COUNTRIES = null", "var_name": "DEFAULT_COUNTRIES"}, {"original_string": "private Set<LimitViolationType> violationTypes;", "modifier": "private", "type": "Set<LimitViolationType>", "declarator": "violationTypes", "var_name": "violationTypes"}, {"original_string": "private double minBaseVoltage;", "modifier": "private", "type": "double", "declarator": "minBaseVoltage", "var_name": "minBaseVoltage"}, {"original_string": "private Set<Country> countries;", "modifier": "private", "type": "Set<Country>", "declarator": "countries", "var_name": "countries"}], "methods": [{"identifier": "checkViolationTypes", "parameters": "(Set<LimitViolationType> violationTypes)", "modifiers": "private static", "return": "Set<LimitViolationType>", "signature": "Set<LimitViolationType> checkViolationTypes(Set<LimitViolationType> violationTypes)", "full_signature": "private static Set<LimitViolationType> checkViolationTypes(Set<LimitViolationType> violationTypes)", "class_method_signature": "LimitViolationFilter.checkViolationTypes(Set<LimitViolationType> violationTypes)", "testcase": false, "constructor": false}, {"identifier": "checkMinBaseVoltage", "parameters": "(double minBaseVoltage)", "modifiers": "private static", "return": "double", "signature": "double checkMinBaseVoltage(double minBaseVoltage)", "full_signature": "private static double checkMinBaseVoltage(double minBaseVoltage)", "class_method_signature": "LimitViolationFilter.checkMinBaseVoltage(double minBaseVoltage)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "()", "modifiers": "public static", "return": "LimitViolationFilter", "signature": "LimitViolationFilter load()", "full_signature": "public static LimitViolationFilter load()", "class_method_signature": "LimitViolationFilter.load()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(PlatformConfig platformConfig)", "modifiers": "public static", "return": "LimitViolationFilter", "signature": "LimitViolationFilter load(PlatformConfig platformConfig)", "full_signature": "public static LimitViolationFilter load(PlatformConfig platformConfig)", "class_method_signature": "LimitViolationFilter.load(PlatformConfig platformConfig)", "testcase": false, "constructor": false}, {"identifier": "LimitViolationFilter", "parameters": "(Set<LimitViolationType> violationTypes)", "modifiers": "public", "return": "", "signature": " LimitViolationFilter(Set<LimitViolationType> violationTypes)", "full_signature": "public  LimitViolationFilter(Set<LimitViolationType> violationTypes)", "class_method_signature": "LimitViolationFilter.LimitViolationFilter(Set<LimitViolationType> violationTypes)", "testcase": false, "constructor": true}, {"identifier": "LimitViolationFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " LimitViolationFilter()", "full_signature": "public  LimitViolationFilter()", "class_method_signature": "LimitViolationFilter.LimitViolationFilter()", "testcase": false, "constructor": true}, {"identifier": "LimitViolationFilter", "parameters": "(Set<LimitViolationType> violationTypes, double minBaseVoltage)", "modifiers": "public", "return": "", "signature": " LimitViolationFilter(Set<LimitViolationType> violationTypes, double minBaseVoltage)", "full_signature": "public  LimitViolationFilter(Set<LimitViolationType> violationTypes, double minBaseVoltage)", "class_method_signature": "LimitViolationFilter.LimitViolationFilter(Set<LimitViolationType> violationTypes, double minBaseVoltage)", "testcase": false, "constructor": true}, {"identifier": "LimitViolationFilter", "parameters": "(Set<LimitViolationType> violationTypes, double minBaseVoltage, Set<Country> countries)", "modifiers": "public", "return": "", "signature": " LimitViolationFilter(Set<LimitViolationType> violationTypes, double minBaseVoltage, Set<Country> countries)", "full_signature": "public  LimitViolationFilter(Set<LimitViolationType> violationTypes, double minBaseVoltage, Set<Country> countries)", "class_method_signature": "LimitViolationFilter.LimitViolationFilter(Set<LimitViolationType> violationTypes, double minBaseVoltage, Set<Country> countries)", "testcase": false, "constructor": true}, {"identifier": "getViolationTypes", "parameters": "()", "modifiers": "public", "return": "Set<LimitViolationType>", "signature": "Set<LimitViolationType> getViolationTypes()", "full_signature": "public Set<LimitViolationType> getViolationTypes()", "class_method_signature": "LimitViolationFilter.getViolationTypes()", "testcase": false, "constructor": false}, {"identifier": "setViolationTypes", "parameters": "(Set<LimitViolationType> violationTypes)", "modifiers": "public", "return": "LimitViolationFilter", "signature": "LimitViolationFilter setViolationTypes(Set<LimitViolationType> violationTypes)", "full_signature": "public LimitViolationFilter setViolationTypes(Set<LimitViolationType> violationTypes)", "class_method_signature": "LimitViolationFilter.setViolationTypes(Set<LimitViolationType> violationTypes)", "testcase": false, "constructor": false}, {"identifier": "getMinBaseVoltage", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMinBaseVoltage()", "full_signature": "public double getMinBaseVoltage()", "class_method_signature": "LimitViolationFilter.getMinBaseVoltage()", "testcase": false, "constructor": false}, {"identifier": "setMinBaseVoltage", "parameters": "(double minBaseVoltage)", "modifiers": "public", "return": "LimitViolationFilter", "signature": "LimitViolationFilter setMinBaseVoltage(double minBaseVoltage)", "full_signature": "public LimitViolationFilter setMinBaseVoltage(double minBaseVoltage)", "class_method_signature": "LimitViolationFilter.setMinBaseVoltage(double minBaseVoltage)", "testcase": false, "constructor": false}, {"identifier": "getCountries", "parameters": "()", "modifiers": "public", "return": "Set<Country>", "signature": "Set<Country> getCountries()", "full_signature": "public Set<Country> getCountries()", "class_method_signature": "LimitViolationFilter.getCountries()", "testcase": false, "constructor": false}, {"identifier": "setCountries", "parameters": "(Set<Country> countries)", "modifiers": "public", "return": "LimitViolationFilter", "signature": "LimitViolationFilter setCountries(Set<Country> countries)", "full_signature": "public LimitViolationFilter setCountries(Set<Country> countries)", "class_method_signature": "LimitViolationFilter.setCountries(Set<Country> countries)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(List<LimitViolation> violations, Network network)", "modifiers": "public", "return": "List<LimitViolation>", "signature": "List<LimitViolation> apply(List<LimitViolation> violations, Network network)", "full_signature": "public List<LimitViolation> apply(List<LimitViolation> violations, Network network)", "class_method_signature": "LimitViolationFilter.apply(List<LimitViolation> violations, Network network)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(Country country)", "modifiers": "private", "return": "boolean", "signature": "boolean accept(Country country)", "full_signature": "private boolean accept(Country country)", "class_method_signature": "LimitViolationFilter.accept(Country country)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(double baseVoltage)", "modifiers": "private", "return": "boolean", "signature": "boolean accept(double baseVoltage)", "full_signature": "private boolean accept(double baseVoltage)", "class_method_signature": "LimitViolationFilter.accept(double baseVoltage)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(LimitViolationType limitViolationType)", "modifiers": "private", "return": "boolean", "signature": "boolean accept(LimitViolationType limitViolationType)", "full_signature": "private boolean accept(LimitViolationType limitViolationType)", "class_method_signature": "LimitViolationFilter.accept(LimitViolationType limitViolationType)", "testcase": false, "constructor": false}], "file": "security-analysis-api/src/main/java/com/powsybl/security/LimitViolationFilter.java"}, "focal_method": {"identifier": "apply", "parameters": "(List<LimitViolation> violations, Network network)", "modifiers": "public", "return": "List<LimitViolation>", "body": "public List<LimitViolation> apply(List<LimitViolation> violations, Network network) {\n        Objects.requireNonNull(violations);\n        Objects.requireNonNull(network);\n\n        return violations.stream()\n                .filter(violation -> accept(violation.getLimitType()))\n                .filter(violation -> accept(LimitViolationHelper.getNominalVoltage(violation, network)))\n                .filter(violation -> accept(LimitViolationHelper.getCountry(violation, network).orElse(null)))\n                .collect(Collectors.toList());\n    }", "signature": "List<LimitViolation> apply(List<LimitViolation> violations, Network network)", "full_signature": "public List<LimitViolation> apply(List<LimitViolation> violations, Network network)", "class_method_signature": "LimitViolationFilter.apply(List<LimitViolation> violations, Network network)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "collect", "filter", "filter", "filter", "stream", "accept", "getLimitType", "accept", "getNominalVoltage", "accept", "orElse", "getCountry", "toList"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}