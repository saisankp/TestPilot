{"test_class": {"identifier": "TestDistributedCacheJars", "superclass": "extends KijiClientTest", "interfaces": "", "fields": [{"original_string": "private static final String CONF_TMPJARS = \"tmpjars\";", "modifier": "private static final", "type": "String", "declarator": "CONF_TMPJARS = \"tmpjars\"", "var_name": "CONF_TMPJARS"}], "file": "kiji-mapreduce/src/test/java/org/kiji/mapreduce/TestDistributedCacheJars.java"}, "test_case": {"identifier": "testJarsDeDupe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testJarsDeDupe() throws IOException {\n    final File tempDir = getLocalTempDir();\n\n    // Jar list should de-dupe to {\"myjar_a, \"myjar_b\", \"myjar_0\", \"myjar_1\"}\n    Set<String> dedupedJarNames = new HashSet<String>(4);\n    dedupedJarNames.add(\"myjar_a.jar\");\n    dedupedJarNames.add(\"myjar_b.jar\");\n    dedupedJarNames.add(\"myjar_0.jar\");\n    dedupedJarNames.add(\"myjar_1.jar\");\n\n    Job job = new Job();\n\n    List<String> someJars = new ArrayList<String>();\n    // Some unique jar names.\n    someJars.add(\"/somepath/myjar_a.jar\");\n    someJars.add(\"/another/path/myjar_b.jar\");\n    someJars.add(\"/myjar_0.jar\");\n\n    // Duplicate jars.\n    someJars.add(\"/another/path/myjar_b.jar\");\n    someJars.add(\"/yet/another/path/myjar_b.jar\");\n\n    job.getConfiguration().set(CONF_TMPJARS, StringUtils.join(someJars, \",\"));\n\n    // Now add some duplicate jars from mTempDir.\n    assertEquals(0, tempDir.list().length);\n    createTestJars(tempDir, \"myjar_0.jar\", \"myjar_1.jar\");\n    assertEquals(2, tempDir.list().length);\n    DistributedCacheJars.addJarsToDistributedCache(job, tempDir);\n\n    // Confirm each jar appears in de-dupe list exactly once.\n    String listedJars = job.getConfiguration().get(CONF_TMPJARS);\n    String[] jars = listedJars.split(\",\");\n    for (String jar : jars) {\n      // Check that path terminates in an expected jar.\n      Path p = new Path(jar);\n      assertTrue(dedupedJarNames.contains(p.getName()));\n      dedupedJarNames.remove(p.getName());\n    }\n    assertEquals(0, dedupedJarNames.size());\n  }", "signature": "void testJarsDeDupe()", "full_signature": "@Test public void testJarsDeDupe()", "class_method_signature": "TestDistributedCacheJars.testJarsDeDupe()", "testcase": true, "constructor": false, "invocations": ["getLocalTempDir", "add", "add", "add", "add", "add", "add", "add", "add", "add", "set", "getConfiguration", "join", "assertEquals", "list", "createTestJars", "assertEquals", "list", "addJarsToDistributedCache", "get", "getConfiguration", "split", "assertTrue", "contains", "getName", "remove", "getName", "assertEquals", "size"]}, "focal_class": {"identifier": "DistributedCacheJars", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DistributedCacheJars.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DistributedCacheJars.class)", "var_name": "LOG"}, {"original_string": "private static final String CONF_TMPJARS = \"tmpjars\";", "modifier": "private static final", "type": "String", "declarator": "CONF_TMPJARS = \"tmpjars\"", "var_name": "CONF_TMPJARS"}], "methods": [{"identifier": "DistributedCacheJars", "parameters": "()", "modifiers": "private", "return": "", "signature": " DistributedCacheJars()", "full_signature": "private  DistributedCacheJars()", "class_method_signature": "DistributedCacheJars.DistributedCacheJars()", "testcase": false, "constructor": true}, {"identifier": "qualifiedPathFromString", "parameters": "(String pathStr, Configuration conf)", "modifiers": "private static", "return": "Path", "signature": "Path qualifiedPathFromString(String pathStr, Configuration conf)", "full_signature": "private static Path qualifiedPathFromString(String pathStr, Configuration conf)", "class_method_signature": "DistributedCacheJars.qualifiedPathFromString(String pathStr, Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "addJarsToDistributedCache", "parameters": "(Job job, String jarDirectory)", "modifiers": "public static", "return": "void", "signature": "void addJarsToDistributedCache(Job job, String jarDirectory)", "full_signature": "public static void addJarsToDistributedCache(Job job, String jarDirectory)", "class_method_signature": "DistributedCacheJars.addJarsToDistributedCache(Job job, String jarDirectory)", "testcase": false, "constructor": false}, {"identifier": "addJarsToDistributedCache", "parameters": "(Job job, File jarDirectory)", "modifiers": "public static", "return": "void", "signature": "void addJarsToDistributedCache(Job job, File jarDirectory)", "full_signature": "public static void addJarsToDistributedCache(Job job, File jarDirectory)", "class_method_signature": "DistributedCacheJars.addJarsToDistributedCache(Job job, File jarDirectory)", "testcase": false, "constructor": false}, {"identifier": "addJarsToDistributedCache", "parameters": "(Job job, Path jarDirectory)", "modifiers": "public static", "return": "void", "signature": "void addJarsToDistributedCache(Job job, Path jarDirectory)", "full_signature": "public static void addJarsToDistributedCache(Job job, Path jarDirectory)", "class_method_signature": "DistributedCacheJars.addJarsToDistributedCache(Job job, Path jarDirectory)", "testcase": false, "constructor": false}, {"identifier": "addJarsToDistributedCache", "parameters": "(Job job, Collection<Path> jarFiles)", "modifiers": "public static", "return": "void", "signature": "void addJarsToDistributedCache(Job job, Collection<Path> jarFiles)", "full_signature": "public static void addJarsToDistributedCache(Job job, Collection<Path> jarFiles)", "class_method_signature": "DistributedCacheJars.addJarsToDistributedCache(Job job, Collection<Path> jarFiles)", "testcase": false, "constructor": false}, {"identifier": "getJarsFromConfiguration", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "List<Path>", "signature": "List<Path> getJarsFromConfiguration(Configuration conf)", "full_signature": "public static List<Path> getJarsFromConfiguration(Configuration conf)", "class_method_signature": "DistributedCacheJars.getJarsFromConfiguration(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "listJarFilesFromDirectory", "parameters": "(Configuration conf, Path jarDirectory)", "modifiers": "public static", "return": "Collection<Path>", "signature": "Collection<Path> listJarFilesFromDirectory(Configuration conf, Path jarDirectory)", "full_signature": "public static Collection<Path> listJarFilesFromDirectory(Configuration conf, Path jarDirectory)", "class_method_signature": "DistributedCacheJars.listJarFilesFromDirectory(Configuration conf, Path jarDirectory)", "testcase": false, "constructor": false}, {"identifier": "deDuplicateFilenames", "parameters": "(Iterable<Path> jarFiles)", "modifiers": "public static", "return": "List<Path>", "signature": "List<Path> deDuplicateFilenames(Iterable<Path> jarFiles)", "full_signature": "public static List<Path> deDuplicateFilenames(Iterable<Path> jarFiles)", "class_method_signature": "DistributedCacheJars.deDuplicateFilenames(Iterable<Path> jarFiles)", "testcase": false, "constructor": false}], "file": "kiji-mapreduce/src/main/java/org/kiji/mapreduce/DistributedCacheJars.java"}, "focal_method": {"identifier": "addJarsToDistributedCache", "parameters": "(Job job, String jarDirectory)", "modifiers": "public static", "return": "void", "body": "public static void addJarsToDistributedCache(Job job, String jarDirectory) throws IOException {\n    addJarsToDistributedCache(job, qualifiedPathFromString(jarDirectory, job.getConfiguration()));\n  }", "signature": "void addJarsToDistributedCache(Job job, String jarDirectory)", "full_signature": "public static void addJarsToDistributedCache(Job job, String jarDirectory)", "class_method_signature": "DistributedCacheJars.addJarsToDistributedCache(Job job, String jarDirectory)", "testcase": false, "constructor": false, "invocations": ["addJarsToDistributedCache", "qualifiedPathFromString", "getConfiguration"]}, "repository": {"repo_id": 7249073, "url": "https://github.com/kijiproject/kiji-mapreduce", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 12, "size": 5029, "license": "licensed"}}