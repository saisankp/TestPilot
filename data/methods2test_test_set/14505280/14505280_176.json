{"test_class": {"identifier": "SearchAttributesCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LAYER_ID = \"beans\";", "modifier": "private static final", "type": "String", "declarator": "LAYER_ID = \"beans\"", "var_name": "LAYER_ID"}, {"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}], "file": "command/src/test/java/org/geomajas/command/feature/SearchAttributesCommandTest.java"}, "test_case": {"identifier": "testSearchAttributes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSearchAttributes() throws Exception {\n\t\tSearchAttributesRequest request = new SearchAttributesRequest();\n\t\trequest.setLayerId(LAYER_ID);\n\t\trequest.setAttributePath(\"manyToOneAttr\");\n\t\tSearchAttributesResponse response = (SearchAttributesResponse) dispatcher.execute(\n\t\t\t\tSearchAttributesRequest.COMMAND, request, null, \"en\");\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\t\tList<Attribute<?>> attributes = response.getAttributes();\n\t\tAssert.assertNotNull(attributes);\n\t\tAssert.assertEquals(2, attributes.size());\n\t}", "signature": "void testSearchAttributes()", "full_signature": "@Test public void testSearchAttributes()", "class_method_signature": "SearchAttributesCommandTest.testSearchAttributes()", "testcase": true, "constructor": false, "invocations": ["setLayerId", "setAttributePath", "execute", "isError", "printStackTrace", "get", "getErrors", "assertFalse", "isError", "getAttributes", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "SearchAttributesCommand", "superclass": "", "interfaces": "implements CommandHasRequest<SearchAttributesRequest, SearchAttributesResponse>", "fields": [{"original_string": "@Autowired\n\tprivate FilterService filterService;", "modifier": "@Autowired\n\tprivate", "type": "FilterService", "declarator": "filterService", "var_name": "filterService"}, {"original_string": "@Autowired\n\tprivate VectorLayerService layerService;", "modifier": "@Autowired\n\tprivate", "type": "VectorLayerService", "declarator": "layerService", "var_name": "layerService"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "SearchAttributesRequest", "signature": "SearchAttributesRequest getEmptyCommandRequest()", "full_signature": "@Override public SearchAttributesRequest getEmptyCommandRequest()", "class_method_signature": "SearchAttributesCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "SearchAttributesResponse", "signature": "SearchAttributesResponse getEmptyCommandResponse()", "full_signature": "@Override public SearchAttributesResponse getEmptyCommandResponse()", "class_method_signature": "SearchAttributesCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(SearchAttributesRequest request, SearchAttributesResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(SearchAttributesRequest request, SearchAttributesResponse response)", "full_signature": "@Override public void execute(SearchAttributesRequest request, SearchAttributesResponse response)", "class_method_signature": "SearchAttributesCommand.execute(SearchAttributesRequest request, SearchAttributesResponse response)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/feature/SearchAttributesCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(SearchAttributesRequest request, SearchAttributesResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(SearchAttributesRequest request, SearchAttributesResponse response) throws Exception {\n\t\tString layerId = request.getLayerId();\n\t\tif (null == layerId) {\n\t\t\tthrow new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"layer\");\n\t\t}\n\n\t\tFilter filter = Filter.INCLUDE;\n\t\tif (request.getFilter() != null) {\n\t\t\tfilter = filterService.parseFilter(request.getFilter());\n\t\t}\n\n\t\tList<Attribute<?>> attributes = layerService.getAttributes(layerId, request.getAttributePath(), filter);\n\t\tresponse.setAttributes(attributes);\n\t}", "signature": "void execute(SearchAttributesRequest request, SearchAttributesResponse response)", "full_signature": "@Override public void execute(SearchAttributesRequest request, SearchAttributesResponse response)", "class_method_signature": "SearchAttributesCommand.execute(SearchAttributesRequest request, SearchAttributesResponse response)", "testcase": false, "constructor": false, "invocations": ["getLayerId", "getFilter", "parseFilter", "getFilter", "getAttributes", "getAttributePath", "setAttributes"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}