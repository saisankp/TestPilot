{"test_class": {"identifier": "ShapefileReaderTest", "superclass": "extends GeoSparkTestBase", "interfaces": "", "fields": [{"original_string": "public static FileSystem fs;", "modifier": "public static", "type": "FileSystem", "declarator": "fs", "var_name": "fs"}, {"original_string": "public static MiniDFSCluster hdfsCluster;", "modifier": "public static", "type": "MiniDFSCluster", "declarator": "hdfsCluster", "var_name": "hdfsCluster"}, {"original_string": "public static String hdfsURI;", "modifier": "public static", "type": "String", "declarator": "hdfsURI", "var_name": "hdfsURI"}], "file": "core/src/test/java/org/datasyslab/geospark/formatMapper/shapefileParser/shapes/ShapefileReaderTest.java"}, "test_case": {"identifier": "testReadBoundary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadBoundary()\n            throws IOException\n    {\n        String inputLocation = getShapeFilePath(\"dbf\");\n        // load shapefile with geotools's reader\n        ShpFiles shpFile = new ShpFiles(inputLocation + \"/map.shp\");\n        GeometryFactory geometryFactory = new GeometryFactory();\n        org.geotools.data.shapefile.shp.ShapefileReader gtlReader = new org.geotools.data.shapefile.shp.ShapefileReader(shpFile, false, true, geometryFactory);\n        String gtlbounds =\n                gtlReader.getHeader().minX() + \":\" +\n                        gtlReader.getHeader().minY() + \":\" +\n                        gtlReader.getHeader().maxX() + \":\" +\n                        gtlReader.getHeader().maxY();\n        // read shapefile by our reader\n        BoundBox bounds = ShapefileReader.readBoundBox(sc, inputLocation);\n        String myBounds =\n                bounds.getXMin() + \":\" +\n                        bounds.getYMin() + \":\" +\n                        bounds.getXMax() + \":\" +\n                        bounds.getYMax();\n        assertEquals(gtlbounds, myBounds);\n        gtlReader.close();\n    }", "signature": "void testReadBoundary()", "full_signature": "@Test public void testReadBoundary()", "class_method_signature": "ShapefileReaderTest.testReadBoundary()", "testcase": true, "constructor": false, "invocations": ["getShapeFilePath", "minX", "getHeader", "minY", "getHeader", "maxX", "getHeader", "maxY", "getHeader", "readBoundBox", "getXMin", "getYMin", "getXMax", "getYMax", "assertEquals", "close"]}, "focal_class": {"identifier": "ShapeFileReader", "superclass": "extends RecordReader<ShapeKey, ShpRecord>", "interfaces": "", "fields": [{"original_string": "private ShapeKey recordKey = null;", "modifier": "private", "type": "ShapeKey", "declarator": "recordKey = null", "var_name": "recordKey"}, {"original_string": "private ShpRecord recordContent = null;", "modifier": "private", "type": "ShpRecord", "declarator": "recordContent = null", "var_name": "recordContent"}, {"original_string": "private FSDataInputStream shpInputStream = null;", "modifier": "private", "type": "FSDataInputStream", "declarator": "shpInputStream = null", "var_name": "shpInputStream"}, {"original_string": "ShpFileParser parser = null;", "modifier": "", "type": "ShpFileParser", "declarator": "parser = null", "var_name": "parser"}, {"original_string": "private int[] indexes;", "modifier": "private", "type": "int[]", "declarator": "indexes", "var_name": "indexes"}, {"original_string": "private boolean useIndex = false;", "modifier": "private", "type": "boolean", "declarator": "useIndex = false", "var_name": "useIndex"}, {"original_string": "private int indexId = 0;", "modifier": "private", "type": "int", "declarator": "indexId = 0", "var_name": "indexId"}], "methods": [{"identifier": "ShapeFileReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " ShapeFileReader()", "full_signature": "public  ShapeFileReader()", "class_method_signature": "ShapeFileReader.ShapeFileReader()", "testcase": false, "constructor": true}, {"identifier": "ShapeFileReader", "parameters": "(int[] indexes)", "modifiers": "public", "return": "", "signature": " ShapeFileReader(int[] indexes)", "full_signature": "public  ShapeFileReader(int[] indexes)", "class_method_signature": "ShapeFileReader.ShapeFileReader(int[] indexes)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(InputSplit split, TaskAttemptContext context)", "modifiers": "public", "return": "void", "signature": "void initialize(InputSplit split, TaskAttemptContext context)", "full_signature": "public void initialize(InputSplit split, TaskAttemptContext context)", "class_method_signature": "ShapeFileReader.initialize(InputSplit split, TaskAttemptContext context)", "testcase": false, "constructor": false}, {"identifier": "nextKeyValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean nextKeyValue()", "full_signature": "public boolean nextKeyValue()", "class_method_signature": "ShapeFileReader.nextKeyValue()", "testcase": false, "constructor": false}, {"identifier": "getCurrentKey", "parameters": "()", "modifiers": "public", "return": "ShapeKey", "signature": "ShapeKey getCurrentKey()", "full_signature": "public ShapeKey getCurrentKey()", "class_method_signature": "ShapeFileReader.getCurrentKey()", "testcase": false, "constructor": false}, {"identifier": "getCurrentValue", "parameters": "()", "modifiers": "public", "return": "ShpRecord", "signature": "ShpRecord getCurrentValue()", "full_signature": "public ShpRecord getCurrentValue()", "class_method_signature": "ShapeFileReader.getCurrentValue()", "testcase": false, "constructor": false}, {"identifier": "getProgress", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getProgress()", "full_signature": "public float getProgress()", "class_method_signature": "ShapeFileReader.getProgress()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ShapeFileReader.close()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/datasyslab/geospark/formatMapper/shapefileParser/shapes/ShapeFileReader.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void close()\n            throws IOException\n    {\n        shpInputStream.close();\n    }", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ShapeFileReader.close()", "testcase": false, "constructor": false, "invocations": ["close"]}, "repository": {"repo_id": 34533675, "url": "https://github.com/DataSystemsLab/GeoSpark", "language": "Java", "is_fork": false, "fork_count": 357, "stargazer_count": 703, "size": 459019, "license": "licensed"}}