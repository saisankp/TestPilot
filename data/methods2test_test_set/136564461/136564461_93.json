{"test_class": {"identifier": "Ed25519PublicKeyDelegateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PublicKeyDelegate delegate = new Ed25519PublicKeyDelegate(HashAlgorithm.KECCAK_512);", "modifier": "private", "type": "PublicKeyDelegate", "declarator": "delegate = new Ed25519PublicKeyDelegate(HashAlgorithm.KECCAK_512)", "var_name": "delegate"}], "file": "eddsa/src/test/java/io/moatwel/crypto/eddsa/ed25519/Ed25519PublicKeyDelegateTest.java"}, "test_case": {"identifier": "success_GeneratePublicKeySeed_via_SHA_512_1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void success_GeneratePublicKeySeed_via_SHA_512_1() {\n        PublicKeyDelegate delegate1 = new Ed25519PublicKeyDelegate(HashAlgorithm.SHA_512);\n        PrivateKey privateKey = PrivateKeyEd25519.fromBytes(new byte[32]);\n\n        byte[] seed = delegate1.generatePublicKeySeed(privateKey);\n\n        byte[] value = new byte[]{59, 106, 39, -68, -50, -74, -92, 45, 98, -93, -88, -48, 42\n                , 111, 13, 115, 101, 50, 21, 119, 29, -30, 67, -90, 58, -64, 72, -95, -117, 89, -38, 41};\n\n        assertThat(HexEncoder.getString(value), is(\"3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"));\n        assertThat(seed, is(value));\n        assertThat(HexEncoder.getString(seed), is(\"3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\"));\n    }", "signature": "void success_GeneratePublicKeySeed_via_SHA_512_1()", "full_signature": "@Test public void success_GeneratePublicKeySeed_via_SHA_512_1()", "class_method_signature": "Ed25519PublicKeyDelegateTest.success_GeneratePublicKeySeed_via_SHA_512_1()", "testcase": true, "constructor": false, "invocations": ["fromBytes", "generatePublicKeySeed", "assertThat", "getString", "is", "assertThat", "is", "assertThat", "getString", "is"]}, "focal_class": {"identifier": "Ed25519PublicKeyDelegate", "superclass": "", "interfaces": "implements PublicKeyDelegate", "fields": [{"original_string": "private static final Curve25519 CURVE = Curve25519.getInstance();", "modifier": "private static final", "type": "Curve25519", "declarator": "CURVE = Curve25519.getInstance()", "var_name": "CURVE"}, {"original_string": "private final HashAlgorithm hashAlgorithm;", "modifier": "private final", "type": "HashAlgorithm", "declarator": "hashAlgorithm", "var_name": "hashAlgorithm"}], "methods": [{"identifier": "Ed25519PublicKeyDelegate", "parameters": "(HashAlgorithm hashAlgorithm)", "modifiers": "public", "return": "", "signature": " Ed25519PublicKeyDelegate(HashAlgorithm hashAlgorithm)", "full_signature": "public  Ed25519PublicKeyDelegate(HashAlgorithm hashAlgorithm)", "class_method_signature": "Ed25519PublicKeyDelegate.Ed25519PublicKeyDelegate(HashAlgorithm hashAlgorithm)", "testcase": false, "constructor": true}, {"identifier": "generatePublicKeySeed", "parameters": "(PrivateKey privateKey)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] generatePublicKeySeed(PrivateKey privateKey)", "full_signature": "@Override public byte[] generatePublicKeySeed(PrivateKey privateKey)", "class_method_signature": "Ed25519PublicKeyDelegate.generatePublicKeySeed(PrivateKey privateKey)", "testcase": false, "constructor": false}, {"identifier": "hashPrivateKey", "parameters": "(PrivateKey privateKey)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] hashPrivateKey(PrivateKey privateKey)", "full_signature": "@Override public byte[] hashPrivateKey(PrivateKey privateKey)", "class_method_signature": "Ed25519PublicKeyDelegate.hashPrivateKey(PrivateKey privateKey)", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/crypto/eddsa/ed25519/Ed25519PublicKeyDelegate.java"}, "focal_method": {"identifier": "generatePublicKeySeed", "parameters": "(PrivateKey privateKey)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n    public byte[] generatePublicKeySeed(PrivateKey privateKey) {\n        if (!(privateKey instanceof PrivateKeyEd25519)) {\n            throw new IllegalArgumentException(\"Public key on Curve25519 must be \" +\n                    CURVE.getPublicKeyByteLength() + \" byte length. Length: \" + privateKey.getRaw().length);\n        }\n\n        BigInteger s = privateKey.getScalarSeed(this);\n\n        Point point = CURVE.getBasePoint().scalarMultiply(s);\n        return point.encode().getValue();\n    }", "signature": "byte[] generatePublicKeySeed(PrivateKey privateKey)", "full_signature": "@Override public byte[] generatePublicKeySeed(PrivateKey privateKey)", "class_method_signature": "Ed25519PublicKeyDelegate.generatePublicKeySeed(PrivateKey privateKey)", "testcase": false, "constructor": false, "invocations": ["getPublicKeyByteLength", "getRaw", "getScalarSeed", "scalarMultiply", "getBasePoint", "getValue", "encode"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}