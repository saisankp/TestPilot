{"test_class": {"identifier": "PredicateConjunctionSplitterTest", "superclass": "", "interfaces": "", "fields": [], "file": "de.prob2.kernel/src/test/java/de/prob/model/classicalb/PredicateConjunctionSplitterTest.java"}, "test_case": {"identifier": "testSimpleConjunctionParens", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSimpleConjunctionParens() throws BCompoundException {\n\t\tStart parse = BParser.parse(\"#PREDICATE a=1 & (b=2 & c=3)\");\n\t\tPredicateConjunctionSplitter splitter = new PredicateConjunctionSplitter();\n\t\tparse.apply(splitter);\n\t\tassertEquals(3, splitter.getPredicates().size());\n\t}", "signature": "void testSimpleConjunctionParens()", "full_signature": "@Test public void testSimpleConjunctionParens()", "class_method_signature": "PredicateConjunctionSplitterTest.testSimpleConjunctionParens()", "testcase": true, "constructor": false, "invocations": ["parse", "apply", "assertEquals", "size", "getPredicates"]}, "focal_class": {"identifier": "PredicateConjunctionSplitter", "superclass": "extends DepthFirstAdapter", "interfaces": "", "fields": [{"original_string": "private final List<PPredicate> predicates = new ArrayList<>();", "modifier": "private final", "type": "List<PPredicate>", "declarator": "predicates = new ArrayList<>()", "var_name": "predicates"}, {"original_string": "private boolean skip;", "modifier": "private", "type": "boolean", "declarator": "skip", "var_name": "skip"}], "methods": [{"identifier": "caseAConjunctPredicate", "parameters": "(AConjunctPredicate node)", "modifiers": "@Override public", "return": "void", "signature": "void caseAConjunctPredicate(AConjunctPredicate node)", "full_signature": "@Override public void caseAConjunctPredicate(AConjunctPredicate node)", "class_method_signature": "PredicateConjunctionSplitter.caseAConjunctPredicate(AConjunctPredicate node)", "testcase": false, "constructor": false}, {"identifier": "defaultIn", "parameters": "(Node node)", "modifiers": "@Override public", "return": "void", "signature": "void defaultIn(Node node)", "full_signature": "@Override public void defaultIn(Node node)", "class_method_signature": "PredicateConjunctionSplitter.defaultIn(Node node)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(PPredicate p)", "modifiers": "private", "return": "void", "signature": "void process(PPredicate p)", "full_signature": "private void process(PPredicate p)", "class_method_signature": "PredicateConjunctionSplitter.process(PPredicate p)", "testcase": false, "constructor": false}, {"identifier": "getPredicates", "parameters": "()", "modifiers": "public", "return": "List<PPredicate>", "signature": "List<PPredicate> getPredicates()", "full_signature": "public List<PPredicate> getPredicates()", "class_method_signature": "PredicateConjunctionSplitter.getPredicates()", "testcase": false, "constructor": false}], "file": "de.prob2.kernel/src/main/java/de/prob/model/classicalb/PredicateConjunctionSplitter.java"}, "focal_method": {"identifier": "getPredicates", "parameters": "()", "modifiers": "public", "return": "List<PPredicate>", "body": "public List<PPredicate> getPredicates() {\n\t\treturn Collections.unmodifiableList(predicates);\n\t}", "signature": "List<PPredicate> getPredicates()", "full_signature": "public List<PPredicate> getPredicates()", "class_method_signature": "PredicateConjunctionSplitter.getPredicates()", "testcase": false, "constructor": false, "invocations": ["unmodifiableList"]}, "repository": {"repo_id": 5495723, "url": "https://github.com/bendisposto/prob2", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 11, "size": 32880, "license": "licensed"}}