{"test_class": {"identifier": "SecretsDeliveryResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ApiDate NOW = ApiDate.now();", "modifier": "private static final", "type": "ApiDate", "declarator": "NOW = ApiDate.now()", "var_name": "NOW"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock AclDAO aclDAO;", "modifier": "@Mock", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "SecretsDeliveryResource secretsDeliveryResource;", "modifier": "", "type": "SecretsDeliveryResource", "declarator": "secretsDeliveryResource", "var_name": "secretsDeliveryResource"}, {"original_string": "Secret firstSecret = new Secret(0, \"first_secret_name\", null,\n      () -> Base64.getEncoder().encodeToString(\"first_secret_contents\".getBytes(UTF_8)), \"checksum\", NOW, null, NOW, null, null,\n      null, null, 0, 1L, NOW, null);", "modifier": "", "type": "Secret", "declarator": "firstSecret = new Secret(0, \"first_secret_name\", null,\n      () -> Base64.getEncoder().encodeToString(\"first_secret_contents\".getBytes(UTF_8)), \"checksum\", NOW, null, NOW, null, null,\n      null, null, 0, 1L, NOW, null)", "var_name": "firstSecret"}, {"original_string": "SanitizedSecret sanitizedFirstSecret = SanitizedSecret.fromSecret(firstSecret);", "modifier": "", "type": "SanitizedSecret", "declarator": "sanitizedFirstSecret = SanitizedSecret.fromSecret(firstSecret)", "var_name": "sanitizedFirstSecret"}, {"original_string": "Secret secondSecret = new Secret(1, \"second_secret_name\", null,\n      () -> Base64.getEncoder().encodeToString(\"second_secret_contents\".getBytes(UTF_8)), \"checksum\", NOW, null, NOW, null, null,\n      null, null, 0, 1L, NOW, null);", "modifier": "", "type": "Secret", "declarator": "secondSecret = new Secret(1, \"second_secret_name\", null,\n      () -> Base64.getEncoder().encodeToString(\"second_secret_contents\".getBytes(UTF_8)), \"checksum\", NOW, null, NOW, null, null,\n      null, null, 0, 1L, NOW, null)", "var_name": "secondSecret"}, {"original_string": "SanitizedSecret sanitizedSecondSecret = SanitizedSecret.fromSecret(secondSecret);", "modifier": "", "type": "SanitizedSecret", "declarator": "sanitizedSecondSecret = SanitizedSecret.fromSecret(secondSecret)", "var_name": "sanitizedSecondSecret"}, {"original_string": "Client client;", "modifier": "", "type": "Client", "declarator": "client", "var_name": "client"}], "file": "server/src/test/java/keywhiz/service/resources/SecretsDeliveryResourceTest.java"}, "test_case": {"identifier": "returnsJsonArrayWhenUserHasOneSecret", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void returnsJsonArrayWhenUserHasOneSecret() throws Exception {\n    when(aclDAO.getSanitizedSecretsFor(client)).thenReturn(ImmutableSet.of(sanitizedFirstSecret));\n\n    List<SecretDeliveryResponse> secrets = secretsDeliveryResource.getSecrets(client);\n    assertThat(secrets).containsOnly(SecretDeliveryResponse.fromSanitizedSecret(\n        SanitizedSecret.fromSecret(firstSecret)));\n  }", "signature": "void returnsJsonArrayWhenUserHasOneSecret()", "full_signature": "@Test public void returnsJsonArrayWhenUserHasOneSecret()", "class_method_signature": "SecretsDeliveryResourceTest.returnsJsonArrayWhenUserHasOneSecret()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getSanitizedSecretsFor", "of", "getSecrets", "containsOnly", "assertThat", "fromSanitizedSecret", "fromSecret"]}, "focal_class": {"identifier": "SecretsDeliveryResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SecretsDeliveryResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SecretsDeliveryResource.class)", "var_name": "logger"}, {"original_string": "private final AclDAO aclDAO;", "modifier": "private final", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}], "methods": [{"identifier": "SecretsDeliveryResource", "parameters": "(AclDAOFactory aclDAOFactory)", "modifiers": "@Inject public", "return": "", "signature": " SecretsDeliveryResource(AclDAOFactory aclDAOFactory)", "full_signature": "@Inject public  SecretsDeliveryResource(AclDAOFactory aclDAOFactory)", "class_method_signature": "SecretsDeliveryResource.SecretsDeliveryResource(AclDAOFactory aclDAOFactory)", "testcase": false, "constructor": true}, {"identifier": "SecretsDeliveryResource", "parameters": "(AclDAO aclDAO)", "modifiers": "@VisibleForTesting", "return": "", "signature": " SecretsDeliveryResource(AclDAO aclDAO)", "full_signature": "@VisibleForTesting  SecretsDeliveryResource(AclDAO aclDAO)", "class_method_signature": "SecretsDeliveryResource.SecretsDeliveryResource(AclDAO aclDAO)", "testcase": false, "constructor": true}, {"identifier": "getSecrets", "parameters": "(@Auth Client client)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "List<SecretDeliveryResponse>", "signature": "List<SecretDeliveryResponse> getSecrets(@Auth Client client)", "full_signature": "@Timed @ExceptionMetered @GET public List<SecretDeliveryResponse> getSecrets(@Auth Client client)", "class_method_signature": "SecretsDeliveryResource.getSecrets(@Auth Client client)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/SecretsDeliveryResource.java"}, "focal_method": {"identifier": "getSecrets", "parameters": "(@Auth Client client)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "List<SecretDeliveryResponse>", "body": "@Timed @ExceptionMetered\n  @GET\n  public List<SecretDeliveryResponse> getSecrets(@Auth Client client) {\n    logger.info(\"Client {} listed available secrets.\", client.getName());\n    return aclDAO.getSanitizedSecretsFor(client).stream()\n        .map(SecretDeliveryResponse::fromSanitizedSecret)\n        .collect(toList());\n  }", "signature": "List<SecretDeliveryResponse> getSecrets(@Auth Client client)", "full_signature": "@Timed @ExceptionMetered @GET public List<SecretDeliveryResponse> getSecrets(@Auth Client client)", "class_method_signature": "SecretsDeliveryResource.getSecrets(@Auth Client client)", "testcase": false, "constructor": false, "invocations": ["info", "getName", "collect", "map", "stream", "getSanitizedSecretsFor", "toList"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}