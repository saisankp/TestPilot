{"test_class": {"identifier": "FromInstructionTest", "superclass": "", "interfaces": "", "fields": [], "file": "dockerfile-image-update/src/test/java/com/salesforce/dockerfileimageupdate/model/FromInstructionTest.java"}, "test_case": {"identifier": "testTagParsedCorrectly", "parameters": "(String fromInstruction, String expectedResult)", "modifiers": "@Test(dataProvider = \"tagData\") public", "return": "void", "body": "@Test(dataProvider = \"tagData\")\n    public void testTagParsedCorrectly(String fromInstruction, String expectedResult) {\n        assertEquals(new FromInstruction(fromInstruction).getTag(), expectedResult);\n    }", "signature": "void testTagParsedCorrectly(String fromInstruction, String expectedResult)", "full_signature": "@Test(dataProvider = \"tagData\") public void testTagParsedCorrectly(String fromInstruction, String expectedResult)", "class_method_signature": "FromInstructionTest.testTagParsedCorrectly(String fromInstruction, String expectedResult)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getTag"]}, "focal_class": {"identifier": "FromInstruction", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAME = \"FROM\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"FROM\"", "var_name": "NAME"}, {"original_string": "private static final String INVALID_INSTRUCTION_LINE = \"You have not provided a valid FROM instruction line.\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_INSTRUCTION_LINE = \"You have not provided a valid FROM instruction line.\"", "var_name": "INVALID_INSTRUCTION_LINE"}, {"original_string": "private final String baseImageName;", "modifier": "private final", "type": "String", "declarator": "baseImageName", "var_name": "baseImageName"}, {"original_string": "private final String tag;", "modifier": "private final", "type": "String", "declarator": "tag", "var_name": "tag"}, {"original_string": "private final List<String> additionalParts;", "modifier": "private final", "type": "List<String>", "declarator": "additionalParts", "var_name": "additionalParts"}, {"original_string": "private final String comments;", "modifier": "private final", "type": "String", "declarator": "comments", "var_name": "comments"}], "methods": [{"identifier": "FromInstruction", "parameters": "(String fromInstructionLine)", "modifiers": "public", "return": "", "signature": " FromInstruction(String fromInstructionLine)", "full_signature": "public  FromInstruction(String fromInstructionLine)", "class_method_signature": "FromInstruction.FromInstruction(String fromInstructionLine)", "testcase": false, "constructor": true}, {"identifier": "FromInstruction", "parameters": "(String baseImageName, String tag, List<String> additionalParts, String comments)", "modifiers": "private", "return": "", "signature": " FromInstruction(String baseImageName, String tag, List<String> additionalParts, String comments)", "full_signature": "private  FromInstruction(String baseImageName, String tag, List<String> additionalParts, String comments)", "class_method_signature": "FromInstruction.FromInstruction(String baseImageName, String tag, List<String> additionalParts, String comments)", "testcase": false, "constructor": true}, {"identifier": "isFromInstructionWithThisImageAndOlderTag", "parameters": "(String lineInFile, String imageName, String imageTag)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFromInstructionWithThisImageAndOlderTag(String lineInFile, String imageName, String imageTag)", "full_signature": "public static boolean isFromInstructionWithThisImageAndOlderTag(String lineInFile, String imageName, String imageTag)", "class_method_signature": "FromInstruction.isFromInstructionWithThisImageAndOlderTag(String lineInFile, String imageName, String imageTag)", "testcase": false, "constructor": false}, {"identifier": "getFromInstructionWithNewTag", "parameters": "(String newTag)", "modifiers": "public", "return": "FromInstruction", "signature": "FromInstruction getFromInstructionWithNewTag(String newTag)", "full_signature": "public FromInstruction getFromInstructionWithNewTag(String newTag)", "class_method_signature": "FromInstruction.getFromInstructionWithNewTag(String newTag)", "testcase": false, "constructor": false}, {"identifier": "isFromInstruction", "parameters": "(String dockerFileLine)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFromInstruction(String dockerFileLine)", "full_signature": "public static boolean isFromInstruction(String dockerFileLine)", "class_method_signature": "FromInstruction.isFromInstruction(String dockerFileLine)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FromInstruction.toString()", "testcase": false, "constructor": false}, {"identifier": "getBaseImageName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBaseImageName()", "full_signature": "public String getBaseImageName()", "class_method_signature": "FromInstruction.getBaseImageName()", "testcase": false, "constructor": false}, {"identifier": "hasBaseImage", "parameters": "(String imageToFind)", "modifiers": "public", "return": "boolean", "signature": "boolean hasBaseImage(String imageToFind)", "full_signature": "public boolean hasBaseImage(String imageToFind)", "class_method_signature": "FromInstruction.hasBaseImage(String imageToFind)", "testcase": false, "constructor": false}, {"identifier": "hasTag", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasTag()", "full_signature": "public boolean hasTag()", "class_method_signature": "FromInstruction.hasTag()", "testcase": false, "constructor": false}, {"identifier": "hasADifferentTag", "parameters": "(String expectedTag)", "modifiers": "public", "return": "boolean", "signature": "boolean hasADifferentTag(String expectedTag)", "full_signature": "public boolean hasADifferentTag(String expectedTag)", "class_method_signature": "FromInstruction.hasADifferentTag(String expectedTag)", "testcase": false, "constructor": false}, {"identifier": "getTag", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTag()", "full_signature": "public String getTag()", "class_method_signature": "FromInstruction.getTag()", "testcase": false, "constructor": false}, {"identifier": "getAdditionalParts", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAdditionalParts()", "full_signature": "public List<String> getAdditionalParts()", "class_method_signature": "FromInstruction.getAdditionalParts()", "testcase": false, "constructor": false}, {"identifier": "hasComments", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasComments()", "full_signature": "public boolean hasComments()", "class_method_signature": "FromInstruction.hasComments()", "testcase": false, "constructor": false}, {"identifier": "getComments", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getComments()", "full_signature": "public String getComments()", "class_method_signature": "FromInstruction.getComments()", "testcase": false, "constructor": false}], "file": "dockerfile-image-update/src/main/java/com/salesforce/dockerfileimageupdate/model/FromInstruction.java"}, "focal_method": {"identifier": "getTag", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getTag() {\n        return tag;\n    }", "signature": "String getTag()", "full_signature": "public String getTag()", "class_method_signature": "FromInstruction.getTag()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 104787715, "url": "https://github.com/salesforce/dockerfile-image-update", "stars": 62, "created": "9/25/2017 6:38:13 PM +00:00", "updates": "2020-01-23T07:15:59+00:00", "fork": "False", "license": "licensed"}}