{"test_class": {"identifier": "TestCopyListing", "superclass": "extends SimpleCopyListing", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(TestCopyListing.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(TestCopyListing.class)", "var_name": "LOG"}, {"original_string": "private static final Credentials CREDENTIALS = new Credentials();", "modifier": "private static final", "type": "Credentials", "declarator": "CREDENTIALS = new Credentials()", "var_name": "CREDENTIALS"}, {"original_string": "private static final Configuration config = new Configuration();", "modifier": "private static final", "type": "Configuration", "declarator": "config = new Configuration()", "var_name": "config"}, {"original_string": "private static MiniDFSCluster cluster;", "modifier": "private static", "type": "MiniDFSCluster", "declarator": "cluster", "var_name": "cluster"}], "file": "conduit-distcp/src/test/java/com/inmobi/conduit/distcp/tools/TestCopyListing.java"}, "test_case": {"identifier": "testBuildListingForSingleFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBuildListingForSingleFile() {\n    FileSystem fs = null;\n    String testRootString = \"/singleFileListing\";\n    Path testRoot = new Path(testRootString);\n    SequenceFile.Reader reader = null;\n    try {\n      fs = FileSystem.get(getConf());\n      if (fs.exists(testRoot))\n        TestDistCpUtils.delete(fs, testRootString);\n\n      Path sourceFile = new Path(testRoot, \"/source/foo/bar/source.txt\");\n      Path decoyFile  = new Path(testRoot, \"/target/moo/source.txt\");\n      Path targetFile = new Path(testRoot, \"/target/moo/target.txt\");\n\n      TestDistCpUtils.createFile(fs, sourceFile.toString());\n      TestDistCpUtils.createFile(fs, decoyFile.toString());\n      TestDistCpUtils.createFile(fs, targetFile.toString());\n\n      List<Path> srcPaths = new ArrayList<Path>();\n      srcPaths.add(sourceFile);\n\n      DistCpOptions options = new DistCpOptions(srcPaths, targetFile);\n      CopyListing listing = new SimpleCopyListing(getConf(), CREDENTIALS);\n\n      final Path listFile = new Path(testRoot, \"/tmp/fileList.seq\");\n      listing.buildListing(listFile, options);\n\n      reader = new SequenceFile.Reader(fs, listFile, getConf());\n      FileStatus fileStatus = new FileStatus();\n      Text relativePath = new Text();\n      Assert.assertTrue(reader.next(relativePath, fileStatus));\n      Assert.assertTrue(relativePath.toString().equals(\"\"));\n    }\n    catch (Exception e) {\n      Assert.fail(\"Unexpected exception encountered.\");\n      LOG.error(\"Unexpected exception: \", e);\n    }\n    finally {\n      TestDistCpUtils.delete(fs, testRootString);\n      IOUtils.closeStream(reader);\n    }\n  }", "signature": "void testBuildListingForSingleFile()", "full_signature": "@Test public void testBuildListingForSingleFile()", "class_method_signature": "TestCopyListing.testBuildListingForSingleFile()", "testcase": true, "constructor": false, "invocations": ["get", "getConf", "exists", "delete", "createFile", "toString", "createFile", "toString", "createFile", "toString", "add", "getConf", "buildListing", "getConf", "assertTrue", "next", "assertTrue", "equals", "toString", "fail", "error", "delete", "closeStream"]}, "focal_class": {"identifier": "CopyListing", "superclass": "extends Configured", "interfaces": "", "fields": [{"original_string": "private Credentials credentials;", "modifier": "private", "type": "Credentials", "declarator": "credentials", "var_name": "credentials"}], "methods": [{"identifier": "buildListing", "parameters": "(Path pathToListFile,\n                                 DistCpOptions options)", "modifiers": "public final", "return": "void", "signature": "void buildListing(Path pathToListFile,\n                                 DistCpOptions options)", "full_signature": "public final void buildListing(Path pathToListFile,\n                                 DistCpOptions options)", "class_method_signature": "CopyListing.buildListing(Path pathToListFile,\n                                 DistCpOptions options)", "testcase": false, "constructor": false}, {"identifier": "validatePaths", "parameters": "(DistCpOptions options)", "modifiers": "protected abstract", "return": "void", "signature": "void validatePaths(DistCpOptions options)", "full_signature": "protected abstract void validatePaths(DistCpOptions options)", "class_method_signature": "CopyListing.validatePaths(DistCpOptions options)", "testcase": false, "constructor": false}, {"identifier": "doBuildListing", "parameters": "(Path pathToListFile,\n                                         DistCpOptions options)", "modifiers": "protected abstract", "return": "void", "signature": "void doBuildListing(Path pathToListFile,\n                                         DistCpOptions options)", "full_signature": "protected abstract void doBuildListing(Path pathToListFile,\n                                         DistCpOptions options)", "class_method_signature": "CopyListing.doBuildListing(Path pathToListFile,\n                                         DistCpOptions options)", "testcase": false, "constructor": false}, {"identifier": "getBytesToCopy", "parameters": "()", "modifiers": "protected abstract", "return": "long", "signature": "long getBytesToCopy()", "full_signature": "protected abstract long getBytesToCopy()", "class_method_signature": "CopyListing.getBytesToCopy()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfPaths", "parameters": "()", "modifiers": "protected abstract", "return": "long", "signature": "long getNumberOfPaths()", "full_signature": "protected abstract long getNumberOfPaths()", "class_method_signature": "CopyListing.getNumberOfPaths()", "testcase": false, "constructor": false}, {"identifier": "checkForDuplicates", "parameters": "(Path pathToListFile)", "modifiers": "protected", "return": "void", "signature": "void checkForDuplicates(Path pathToListFile)", "full_signature": "protected void checkForDuplicates(Path pathToListFile)", "class_method_signature": "CopyListing.checkForDuplicates(Path pathToListFile)", "testcase": false, "constructor": false}, {"identifier": "CopyListing", "parameters": "(Configuration configuration, Credentials credentials)", "modifiers": "protected", "return": "", "signature": " CopyListing(Configuration configuration, Credentials credentials)", "full_signature": "protected  CopyListing(Configuration configuration, Credentials credentials)", "class_method_signature": "CopyListing.CopyListing(Configuration configuration, Credentials credentials)", "testcase": false, "constructor": true}, {"identifier": "setCredentials", "parameters": "(Credentials credentials)", "modifiers": "protected", "return": "void", "signature": "void setCredentials(Credentials credentials)", "full_signature": "protected void setCredentials(Credentials credentials)", "class_method_signature": "CopyListing.setCredentials(Credentials credentials)", "testcase": false, "constructor": false}, {"identifier": "getCredentials", "parameters": "()", "modifiers": "protected", "return": "Credentials", "signature": "Credentials getCredentials()", "full_signature": "protected Credentials getCredentials()", "class_method_signature": "CopyListing.getCredentials()", "testcase": false, "constructor": false}, {"identifier": "getCopyListing", "parameters": "(Configuration configuration,\n                                           Credentials credentials,\n                                           DistCpOptions options)", "modifiers": "public static", "return": "CopyListing", "signature": "CopyListing getCopyListing(Configuration configuration,\n                                           Credentials credentials,\n                                           DistCpOptions options)", "full_signature": "public static CopyListing getCopyListing(Configuration configuration,\n                                           Credentials credentials,\n                                           DistCpOptions options)", "class_method_signature": "CopyListing.getCopyListing(Configuration configuration,\n                                           Credentials credentials,\n                                           DistCpOptions options)", "testcase": false, "constructor": false}], "file": "conduit-distcp/src/main/java/com/inmobi/conduit/distcp/tools/CopyListing.java"}, "focal_method": {"identifier": "buildListing", "parameters": "(Path pathToListFile,\n                                 DistCpOptions options)", "modifiers": "public final", "return": "void", "body": "public final void buildListing(Path pathToListFile,\n                                 DistCpOptions options) throws IOException {\n    validatePaths(options);\n    doBuildListing(pathToListFile, options);\n    Configuration config = getConf();\n\n    config.set(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH, pathToListFile.toString());\n    config.setLong(DistCpConstants.CONF_LABEL_TOTAL_BYTES_TO_BE_COPIED, getBytesToCopy());\n    config.setLong(DistCpConstants.CONF_LABEL_TOTAL_NUMBER_OF_RECORDS, getNumberOfPaths());\n\n    checkForDuplicates(pathToListFile);\n  }", "signature": "void buildListing(Path pathToListFile,\n                                 DistCpOptions options)", "full_signature": "public final void buildListing(Path pathToListFile,\n                                 DistCpOptions options)", "class_method_signature": "CopyListing.buildListing(Path pathToListFile,\n                                 DistCpOptions options)", "testcase": false, "constructor": false, "invocations": ["validatePaths", "doBuildListing", "getConf", "set", "toString", "setLong", "getBytesToCopy", "setLong", "getNumberOfPaths", "checkForDuplicates"]}, "repository": {"repo_id": 7218024, "url": "https://github.com/InMobi/conduit", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 49400, "license": "licensed"}}