{"test_class": {"identifier": "SequenceScriptRunnerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "SequenceScriptRunner scriptRunner = new SequenceScriptRunner();", "modifier": "", "type": "SequenceScriptRunner", "declarator": "scriptRunner = new SequenceScriptRunner()", "var_name": "scriptRunner"}], "file": "beanmother-core/src/test/java/io/beanmother/core/script/std/SequenceScriptRunnerTest.java"}, "test_case": {"identifier": "testRaiseError", "parameters": "()", "modifiers": "@Test(expected = ScriptOperationException.class) public", "return": "void", "body": "@Test(expected = ScriptOperationException.class)\n    public void testRaiseError() {\n        scriptRunner.run(ScriptFragment.of(\"fail\"));\n    }", "signature": "void testRaiseError()", "full_signature": "@Test(expected = ScriptOperationException.class) public void testRaiseError()", "class_method_signature": "SequenceScriptRunnerTest.testRaiseError()", "testcase": true, "constructor": false, "invocations": ["run", "of"]}, "focal_class": {"identifier": "SequenceScriptRunner", "superclass": "", "interfaces": "implements ScriptRunner", "fields": [{"original_string": "private final static String NAMESPACE = \"sequence\";", "modifier": "private final static", "type": "String", "declarator": "NAMESPACE = \"sequence\"", "var_name": "NAMESPACE"}, {"original_string": "private final static String NUMBER_SEQUENCE_METHOD_NAME = \"number\";", "modifier": "private final static", "type": "String", "declarator": "NUMBER_SEQUENCE_METHOD_NAME = \"number\"", "var_name": "NUMBER_SEQUENCE_METHOD_NAME"}, {"original_string": "private AtomicLong longSequence = new AtomicLong(0);", "modifier": "private", "type": "AtomicLong", "declarator": "longSequence = new AtomicLong(0)", "var_name": "longSequence"}], "methods": [{"identifier": "run", "parameters": "(ScriptFragment scriptFragment)", "modifiers": "@Override public", "return": "Object", "signature": "Object run(ScriptFragment scriptFragment)", "full_signature": "@Override public Object run(ScriptFragment scriptFragment)", "class_method_signature": "SequenceScriptRunner.run(ScriptFragment scriptFragment)", "testcase": false, "constructor": false}, {"identifier": "canHandle", "parameters": "(ScriptFragment scriptFragment)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canHandle(ScriptFragment scriptFragment)", "full_signature": "@Override public boolean canHandle(ScriptFragment scriptFragment)", "class_method_signature": "SequenceScriptRunner.canHandle(ScriptFragment scriptFragment)", "testcase": false, "constructor": false}], "file": "beanmother-core/src/main/java/io/beanmother/core/script/std/SequenceScriptRunner.java"}, "focal_method": {"identifier": "run", "parameters": "(ScriptFragment scriptFragment)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object run(ScriptFragment scriptFragment) {\n        if (!canHandle(scriptFragment)) throw new ScriptOperationException(scriptFragment.getMethodName() + \" is not support.\");\n\n        if (scriptFragment.getNext() == null\n                || scriptFragment.getNext().getMethodName().equals(NUMBER_SEQUENCE_METHOD_NAME)) {\n            return longSequence.addAndGet(1l);\n        } else {\n            throw new ScriptOperationException(scriptFragment.getMethodName() + \" is not support.\");\n        }\n    }", "signature": "Object run(ScriptFragment scriptFragment)", "full_signature": "@Override public Object run(ScriptFragment scriptFragment)", "class_method_signature": "SequenceScriptRunner.run(ScriptFragment scriptFragment)", "testcase": false, "constructor": false, "invocations": ["canHandle", "getMethodName", "getNext", "equals", "getMethodName", "getNext", "addAndGet", "getMethodName"]}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}