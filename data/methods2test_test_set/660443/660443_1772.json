{"test_class": {"identifier": "ProtonAffinityHOSEDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [{"original_string": "ProtonAffinityHOSEDescriptor            descriptor;", "modifier": "", "type": "ProtonAffinityHOSEDescriptor", "declarator": "descriptor", "var_name": "descriptor"}, {"original_string": "LonePairElectronChecker                 lpcheck = new LonePairElectronChecker();", "modifier": "", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}, {"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/ProtonAffinityHOSEDescriptorTest.java"}, "test_case": {"identifier": "testAffinityDescriptor1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAffinityDescriptor1() throws Exception {\n\n        IAtomContainer mol = builder.newInstance(IAtomContainer.class);\n        mol.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        mol.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        mol.addBond(0, 1, IBond.Order.DOUBLE);\n        mol.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        mol.addBond(1, 2, IBond.Order.SINGLE);\n        mol.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        mol.addBond(2, 3, IBond.Order.DOUBLE);\n        mol.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        mol.addBond(3, 4, IBond.Order.SINGLE);\n        mol.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        mol.addBond(4, 5, IBond.Order.DOUBLE);\n        mol.addBond(5, 0, IBond.Order.SINGLE);\n        mol.addAtom(builder.newInstance(IAtom.class, \"Cl\"));\n        mol.addBond(0, 6, IBond.Order.SINGLE);\n\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        Aromaticity.cdkLegacy().apply(mol);\n        addExplicitHydrogens(mol);\n        lpcheck.saturate(mol);\n\n        double result = ((DoubleResult) descriptor.calculate(mol.getAtom(6), mol).getValue()).doubleValue();\n        double resultAccordingNIST = 753.1;\n\n        Assert.assertEquals(resultAccordingNIST, result, 0.00001);\n    }", "signature": "void testAffinityDescriptor1()", "full_signature": "@Test public void testAffinityDescriptor1()", "class_method_signature": "ProtonAffinityHOSEDescriptorTest.testAffinityDescriptor1()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addBond", "addAtom", "newInstance", "addBond", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "addExplicitHydrogens", "saturate", "doubleValue", "getValue", "calculate", "getAtom", "assertEquals"]}, "focal_class": {"identifier": "ProtonAffinityHOSEDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "", "fields": [{"original_string": "private static final String[] NAMES = {\"protonAffiHOSE\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"protonAffiHOSE\"}", "var_name": "NAMES"}, {"original_string": "int                           maxSpheresToUse = 10;", "modifier": "", "type": "int", "declarator": "maxSpheresToUse = 10", "var_name": "maxSpheresToUse"}, {"original_string": "private Affinitydb            db              = new Affinitydb();", "modifier": "private", "type": "Affinitydb", "declarator": "db              = new Affinitydb()", "var_name": "db"}], "methods": [{"identifier": "ProtonAffinityHOSEDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " ProtonAffinityHOSEDescriptor()", "full_signature": "public  ProtonAffinityHOSEDescriptor()", "class_method_signature": "ProtonAffinityHOSEDescriptor.ProtonAffinityHOSEDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "ProtonAffinityHOSEDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "ProtonAffinityHOSEDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "ProtonAffinityHOSEDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "ProtonAffinityHOSEDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "ProtonAffinityHOSEDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "familyHalogen", "parameters": "(IAtom atom)", "modifiers": "private", "return": "boolean", "signature": "boolean familyHalogen(IAtom atom)", "full_signature": "private boolean familyHalogen(IAtom atom)", "class_method_signature": "ProtonAffinityHOSEDescriptor.familyHalogen(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "ProtonAffinityHOSEDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "ProtonAffinityHOSEDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "extractInfo", "parameters": "(String str)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> extractInfo(String str)", "full_signature": "private static List<String> extractInfo(String str)", "class_method_signature": "ProtonAffinityHOSEDescriptor.extractInfo(String str)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/ProtonAffinityHOSEDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer container) {\n        double value;\n\n        try {\n            int i = container.indexOf(atom);\n            if (i < 0) throw new CDKException(\"atom was not a memeber of the provided container\");\n\n            // don't modify the original\n            container = container.clone();\n            atom = container.getAtom(i);\n\n            AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(container);\n            LonePairElectronChecker lpcheck = new LonePairElectronChecker();\n            lpcheck.saturate(container);\n        } catch (CDKException | CloneNotSupportedException e) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    Double.NaN), NAMES, null);\n        }\n\n        value = db.extractAffinity(container, atom);\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(value),\n                                   NAMES);\n\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "ProtonAffinityHOSEDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["indexOf", "clone", "getAtom", "percieveAtomTypesAndConfigureAtoms", "saturate", "getSpecification", "getParameterNames", "getParameters", "extractAffinity", "getSpecification", "getParameterNames", "getParameters"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}