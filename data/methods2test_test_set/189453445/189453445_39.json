{"test_class": {"identifier": "Route53RaiderImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Mock\n    AmazonRoute53 mockAmazonRoute53;", "modifier": "@Mock", "type": "AmazonRoute53", "declarator": "mockAmazonRoute53", "var_name": "mockAmazonRoute53"}, {"original_string": "@Autowired\n    private  Route53Raider route53RaiderUnderTest;", "modifier": "@Autowired\n    private", "type": "Route53Raider", "declarator": "route53RaiderUnderTest", "var_name": "route53RaiderUnderTest"}, {"original_string": "@Autowired\n    private Route53Delegator route53Delegator;", "modifier": "@Autowired\n    private", "type": "Route53Delegator", "declarator": "route53Delegator", "var_name": "route53Delegator"}, {"original_string": "private String aLoadBalancerName = \"elbName\";", "modifier": "private", "type": "String", "declarator": "aLoadBalancerName = \"elbName\"", "var_name": "aLoadBalancerName"}, {"original_string": "private final String SW1_R53_HEALTH_CHECK_ID = \"d5c9f928-c514-4318-86b4-e26313d2188a\";", "modifier": "private final", "type": "String", "declarator": "SW1_R53_HEALTH_CHECK_ID = \"d5c9f928-c514-4318-86b4-e26313d2188a\"", "var_name": "SW1_R53_HEALTH_CHECK_ID"}, {"original_string": "private final String SW2_R53_HEALTH_CHECK_ID = \"281406ee-8e57-45c1-9b44-fc2a05c5f011\";", "modifier": "private final", "type": "String", "declarator": "SW2_R53_HEALTH_CHECK_ID = \"281406ee-8e57-45c1-9b44-fc2a05c5f011\"", "var_name": "SW2_R53_HEALTH_CHECK_ID"}], "file": "cloudraider-core/src/test/java/com/intuit/cloudraider/core/impl/Route53RaiderImplTest.java"}, "test_case": {"identifier": "testSimpleGetHealthCheckerStatusWhenMultipleSuccessesShouldBeSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSimpleGetHealthCheckerStatusWhenMultipleSuccessesShouldBeSuccess() {\n        List<HealthCheckObservation> observations = createMultipleSuccessHealthObs();\n        observations.add(createSuccessHealthCheckOb());\n        GetHealthCheckStatusResult healthCheckResult = new GetHealthCheckStatusResult().withHealthCheckObservations(observations);\n        Mockito.when(mockAmazonRoute53.getHealthCheckStatus(Mockito.any())).thenReturn(healthCheckResult);\n\n        HealthCheckStatus actualHealthCheckResponse = route53RaiderUnderTest.getSimpleHealthCheckerStatus(SW2_R53_HEALTH_CHECK_ID);\n\n        Assert.assertEquals(HealthCheckStatus.SUCCESS, actualHealthCheckResponse);\n    }", "signature": "void testSimpleGetHealthCheckerStatusWhenMultipleSuccessesShouldBeSuccess()", "full_signature": "@Test public void testSimpleGetHealthCheckerStatusWhenMultipleSuccessesShouldBeSuccess()", "class_method_signature": "Route53RaiderImplTest.testSimpleGetHealthCheckerStatusWhenMultipleSuccessesShouldBeSuccess()", "testcase": true, "constructor": false, "invocations": ["createMultipleSuccessHealthObs", "add", "createSuccessHealthCheckOb", "withHealthCheckObservations", "thenReturn", "when", "getHealthCheckStatus", "any", "getSimpleHealthCheckerStatus", "assertEquals"]}, "focal_class": {"identifier": "Route53RaiderImpl", "superclass": "", "interfaces": "implements Route53Raider", "fields": [{"original_string": "Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "@Autowired\n    private Route53Delegator route53Delegator;", "modifier": "@Autowired\n    private", "type": "Route53Delegator", "declarator": "route53Delegator", "var_name": "route53Delegator"}], "methods": [{"identifier": "Route53RaiderImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " Route53RaiderImpl()", "full_signature": "public  Route53RaiderImpl()", "class_method_signature": "Route53RaiderImpl.Route53RaiderImpl()", "testcase": false, "constructor": true}, {"identifier": "listHealthCheckers", "parameters": "()", "modifiers": "@Override public", "return": "List<HealthCheck>", "signature": "List<HealthCheck> listHealthCheckers()", "full_signature": "@Override public List<HealthCheck> listHealthCheckers()", "class_method_signature": "Route53RaiderImpl.listHealthCheckers()", "testcase": false, "constructor": false}, {"identifier": "getHealthCheckerStatus", "parameters": "(String healthCheckerId)", "modifiers": "@Override public", "return": "List<HealthCheckObservation>", "signature": "List<HealthCheckObservation> getHealthCheckerStatus(String healthCheckerId)", "full_signature": "@Override public List<HealthCheckObservation> getHealthCheckerStatus(String healthCheckerId)", "class_method_signature": "Route53RaiderImpl.getHealthCheckerStatus(String healthCheckerId)", "testcase": false, "constructor": false}, {"identifier": "getSimpleHealthCheckerStatus", "parameters": "(String healthCheckerId)", "modifiers": "@Override public", "return": "HealthCheckStatus", "signature": "HealthCheckStatus getSimpleHealthCheckerStatus(String healthCheckerId)", "full_signature": "@Override public HealthCheckStatus getSimpleHealthCheckerStatus(String healthCheckerId)", "class_method_signature": "Route53RaiderImpl.getSimpleHealthCheckerStatus(String healthCheckerId)", "testcase": false, "constructor": false}, {"identifier": "updateTrafficPolicy", "parameters": "(String trafficPolicyName, int version)", "modifiers": "@Override public", "return": "void", "signature": "void updateTrafficPolicy(String trafficPolicyName, int version)", "full_signature": "@Override public void updateTrafficPolicy(String trafficPolicyName, int version)", "class_method_signature": "Route53RaiderImpl.updateTrafficPolicy(String trafficPolicyName, int version)", "testcase": false, "constructor": false}, {"identifier": "getTrafficPolicyVersion", "parameters": "(String trafficPolicyName)", "modifiers": "@Override public", "return": "int", "signature": "int getTrafficPolicyVersion(String trafficPolicyName)", "full_signature": "@Override public int getTrafficPolicyVersion(String trafficPolicyName)", "class_method_signature": "Route53RaiderImpl.getTrafficPolicyVersion(String trafficPolicyName)", "testcase": false, "constructor": false}, {"identifier": "getR53TrafficPolicyId", "parameters": "(String trafficPolicyName)", "modifiers": "private", "return": "String", "signature": "String getR53TrafficPolicyId(String trafficPolicyName)", "full_signature": "private String getR53TrafficPolicyId(String trafficPolicyName)", "class_method_signature": "Route53RaiderImpl.getR53TrafficPolicyId(String trafficPolicyName)", "testcase": false, "constructor": false}, {"identifier": "getR53PolicyId", "parameters": "(String policyId)", "modifiers": "public", "return": "String", "signature": "String getR53PolicyId(String policyId)", "full_signature": "public String getR53PolicyId(String policyId)", "class_method_signature": "Route53RaiderImpl.getR53PolicyId(String policyId)", "testcase": false, "constructor": false}, {"identifier": "updateHealthCheckRegions", "parameters": "(String healthCheckId, List<String> regions)", "modifiers": "@Override public", "return": "void", "signature": "void updateHealthCheckRegions(String healthCheckId, List<String> regions)", "full_signature": "@Override public void updateHealthCheckRegions(String healthCheckId, List<String> regions)", "class_method_signature": "Route53RaiderImpl.updateHealthCheckRegions(String healthCheckId, List<String> regions)", "testcase": false, "constructor": false}, {"identifier": "getHealthCheckRegions", "parameters": "(String healthCheckId)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getHealthCheckRegions(String healthCheckId)", "full_signature": "@Override public List<String> getHealthCheckRegions(String healthCheckId)", "class_method_signature": "Route53RaiderImpl.getHealthCheckRegions(String healthCheckId)", "testcase": false, "constructor": false}, {"identifier": "updateHealthCheckToDefaultRegions", "parameters": "(String healthCheckId)", "modifiers": "@Override public", "return": "void", "signature": "void updateHealthCheckToDefaultRegions(String healthCheckId)", "full_signature": "@Override public void updateHealthCheckToDefaultRegions(String healthCheckId)", "class_method_signature": "Route53RaiderImpl.updateHealthCheckToDefaultRegions(String healthCheckId)", "testcase": false, "constructor": false}], "file": "cloudraider-core/src/main/java/com/intuit/cloudraider/core/impl/Route53RaiderImpl.java"}, "focal_method": {"identifier": "getSimpleHealthCheckerStatus", "parameters": "(String healthCheckerId)", "modifiers": "@Override public", "return": "HealthCheckStatus", "body": "@Override\n    public HealthCheckStatus getSimpleHealthCheckerStatus(String healthCheckerId) {\n\n        GetHealthCheckStatusRequest getHealthCheckStatusRequest = new GetHealthCheckStatusRequest();\n        getHealthCheckStatusRequest.withHealthCheckId(healthCheckerId);\n        List<HealthCheckObservation> healthCheckObservations = route53Delegator.getAmazonRoute53().getHealthCheckStatus(getHealthCheckStatusRequest).getHealthCheckObservations();\n\n        for (HealthCheckObservation obs : healthCheckObservations) {\n            if (obs.getStatusReport().getStatus().contains(\"Failure\")) {\n                return HealthCheckStatus.FAILURE;\n            }\n        }\n\n        return HealthCheckStatus.SUCCESS;\n    }", "signature": "HealthCheckStatus getSimpleHealthCheckerStatus(String healthCheckerId)", "full_signature": "@Override public HealthCheckStatus getSimpleHealthCheckerStatus(String healthCheckerId)", "class_method_signature": "Route53RaiderImpl.getSimpleHealthCheckerStatus(String healthCheckerId)", "testcase": false, "constructor": false, "invocations": ["withHealthCheckId", "getHealthCheckObservations", "getHealthCheckStatus", "getAmazonRoute53", "contains", "getStatus", "getStatusReport"]}, "repository": {"repo_id": 189453445, "url": "https://github.com/intuit/CloudRaider", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 16, "size": 730, "license": "licensed"}}