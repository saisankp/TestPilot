{"test_class": {"identifier": "CharSequenceAccessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "ch-commons-charset/src/test/java/com/cloudhopper/commons/charset/CharSequenceAccessorTest.java"}, "test_case": {"identifier": "usage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void usage() throws Exception {\n        try {\n            String s0 = \"test\";\n            CharArrayWrapper wrapper = CharSequenceAccessor.access(s0);\n            Assert.assertEquals(0, wrapper.offset);\n            Assert.assertEquals(4, wrapper.length);\n            Assert.assertArrayEquals(new char[] { 't','e','s','t' }, wrapper.value);\n\n            // this usually retains same char[] but adjusts offset (may differ between JVMs)\n            String s1 = s0.substring(1);\n            wrapper = CharSequenceAccessor.access(s1);\n            Assert.assertEquals(1, wrapper.offset);\n            Assert.assertEquals(3, wrapper.length);\n            Assert.assertArrayEquals(new char[] { 't','e','s','t' }, wrapper.value);\n\n            StringBuilder sb = new StringBuilder(\"test\");\n            wrapper = CharSequenceAccessor.access(sb);\n            Assert.assertEquals(0, wrapper.offset);\n            Assert.assertEquals(4, wrapper.length);\n            // appears JVM actually creates a default size of 20 -- more than 4 -- only compare first 4 chars\n            Assert.assertArrayEquals(new char[] { 't','e','s','t' }, Arrays.copyOf(wrapper.value, 4));\n\n            // stringbuffer isn't supported -- should return null\n            StringBuffer sbf = new StringBuffer(\"test\");\n            wrapper = CharSequenceAccessor.access(sbf);\n            Assert.assertNull(wrapper);\n        } catch (Throwable t) {\n            System.out.println(\"WARN: CharSequenceAccessor tests failed... optimizations disabled\");\n        }\n    }", "signature": "void usage()", "full_signature": "@Test public void usage()", "class_method_signature": "CharSequenceAccessorTest.usage()", "testcase": true, "constructor": false, "invocations": ["access", "assertEquals", "assertEquals", "assertArrayEquals", "substring", "access", "assertEquals", "assertEquals", "assertArrayEquals", "access", "assertEquals", "assertEquals", "assertArrayEquals", "copyOf", "access", "assertNull", "println"]}, "focal_class": {"identifier": "CharSequenceAccessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "static private final Constructor<String> stringConstructor;", "modifier": "static private final", "type": "Constructor<String>", "declarator": "stringConstructor", "var_name": "stringConstructor"}, {"original_string": "static private final Field stringValueField;", "modifier": "static private final", "type": "Field", "declarator": "stringValueField", "var_name": "stringValueField"}, {"original_string": "static private final Field stringOffsetField;", "modifier": "static private final", "type": "Field", "declarator": "stringOffsetField", "var_name": "stringOffsetField"}, {"original_string": "static private final Field stringCountField;", "modifier": "static private final", "type": "Field", "declarator": "stringCountField", "var_name": "stringCountField"}, {"original_string": "static private final boolean hasStringFields;", "modifier": "static private final", "type": "boolean", "declarator": "hasStringFields", "var_name": "hasStringFields"}, {"original_string": "static private final Field stringBuilderValueField;", "modifier": "static private final", "type": "Field", "declarator": "stringBuilderValueField", "var_name": "stringBuilderValueField"}, {"original_string": "static private final Field stringBuilderCountField;", "modifier": "static private final", "type": "Field", "declarator": "stringBuilderCountField", "var_name": "stringBuilderCountField"}, {"original_string": "static private final boolean hasStringBuilderFields;", "modifier": "static private final", "type": "boolean", "declarator": "hasStringBuilderFields", "var_name": "hasStringBuilderFields"}], "methods": [{"identifier": "access", "parameters": "(CharSequence str)", "modifiers": "static public", "return": "CharArrayWrapper", "signature": "CharArrayWrapper access(CharSequence str)", "full_signature": "static public CharArrayWrapper access(CharSequence str)", "class_method_signature": "CharSequenceAccessor.access(CharSequence str)", "testcase": false, "constructor": false}, {"identifier": "createOptimizedString", "parameters": "(char[] buffer, int offset, int length)", "modifiers": "static public", "return": "String", "signature": "String createOptimizedString(char[] buffer, int offset, int length)", "full_signature": "static public String createOptimizedString(char[] buffer, int offset, int length)", "class_method_signature": "CharSequenceAccessor.createOptimizedString(char[] buffer, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "updateStringBuilder", "parameters": "(StringBuilder sb, int newLength)", "modifiers": "static public", "return": "void", "signature": "void updateStringBuilder(StringBuilder sb, int newLength)", "full_signature": "static public void updateStringBuilder(StringBuilder sb, int newLength)", "class_method_signature": "CharSequenceAccessor.updateStringBuilder(StringBuilder sb, int newLength)", "testcase": false, "constructor": false}], "file": "ch-commons-charset/src/main/java/com/cloudhopper/commons/charset/CharSequenceAccessor.java"}, "focal_method": {"identifier": "access", "parameters": "(CharSequence str)", "modifiers": "static public", "return": "CharArrayWrapper", "body": "static public CharArrayWrapper access(CharSequence str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            if (str instanceof String) {\n                if (hasStringFields) {\n                    CharArrayWrapper w = new CharArrayWrapper();\n                    w.value = (char[])stringValueField.get(str);\n                    w.offset = stringOffsetField.getInt(str);\n                    w.length = stringCountField.getInt(str);\n                    return w;\n                }\n            } else if (str instanceof StringBuilder) {\n                if (hasStringBuilderFields) {\n                    CharArrayWrapper w = new CharArrayWrapper();\n                    w.value = (char[])stringBuilderValueField.get(str);\n                    w.length = stringBuilderCountField.getInt(str);\n                    return w;\n                }\n            }\n        } catch (Throwable t) {\n            // do nothing\n        }\n        return null;\n    }", "signature": "CharArrayWrapper access(CharSequence str)", "full_signature": "static public CharArrayWrapper access(CharSequence str)", "class_method_signature": "CharSequenceAccessor.access(CharSequence str)", "testcase": false, "constructor": false, "invocations": ["get", "getInt", "getInt", "get", "getInt"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}