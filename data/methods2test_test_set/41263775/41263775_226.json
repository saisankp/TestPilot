{"test_class": {"identifier": "DBUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/index/sqlite/support/DBUtilsTest.java"}, "test_case": {"identifier": "testGetValueFromResultSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetValueFromResultSet() throws Exception{\n\n        ResultSet resultSet = mock(ResultSet.class);\n\n        when(resultSet.getInt(1)).thenReturn(Integer.MAX_VALUE);\n        DBUtils.getValueFromResultSet(1, resultSet, Integer.class);\n        verify(resultSet, times(1)).getInt(1);\n\n        when(resultSet.getLong(2)).thenReturn(Long.MAX_VALUE);\n        DBUtils.getValueFromResultSet(2, resultSet, Long.class);\n        verify(resultSet, times(1)).getLong(2);\n\n        when(resultSet.getShort(3)).thenReturn(Short.MAX_VALUE);\n        DBUtils.getValueFromResultSet(3, resultSet, Short.class);\n        verify(resultSet, times(1)).getShort(3);\n\n        when(resultSet.getBoolean(4)).thenReturn(Boolean.FALSE);\n        DBUtils.getValueFromResultSet(4, resultSet, Boolean.class);\n        verify(resultSet, times(1)).getBoolean(4);\n\n        when(resultSet.getFloat(5)).thenReturn(Float.MAX_VALUE);\n        DBUtils.getValueFromResultSet(5, resultSet, Float.class);\n        verify(resultSet, times(1)).getFloat(5);\n\n        when(resultSet.getDouble(6)).thenReturn(Double.MAX_VALUE);\n        DBUtils.getValueFromResultSet(6, resultSet, Double.class);\n        verify(resultSet, times(1)).getDouble(6);\n\n        when(resultSet.getString(7)).thenReturn(\"7 string\");\n        DBUtils.getValueFromResultSet(7, resultSet, String.class);\n        verify(resultSet, times(1)).getString(7);\n\n        when(resultSet.getString(8)).thenReturn(\"8 CharSequence\");\n        DBUtils.getValueFromResultSet(8, resultSet, CharSequence.class);\n        verify(resultSet, times(1)).getString(8);\n\n        when(resultSet.getBigDecimal(9)).thenReturn(new BigDecimal(\"1\"));\n        DBUtils.getValueFromResultSet(9, resultSet, BigDecimal.class);\n        verify(resultSet, times(1)).getBigDecimal(9);\n\n        final long now = System.currentTimeMillis();\n\n        when(resultSet.getLong(10)).thenReturn(now);\n        DBUtils.getValueFromResultSet(10, resultSet, java.util.Date.class);\n        verify(resultSet, times(1)).getLong(10);\n\n        when(resultSet.getLong(11)).thenReturn(now);\n        DBUtils.getValueFromResultSet(11, resultSet, java.sql.Date.class);\n        verify(resultSet, times(1)).getLong(11);\n\n        when(resultSet.getLong(12)).thenReturn(now);\n        DBUtils.getValueFromResultSet(12, resultSet, Time.class);\n        verify(resultSet, times(1)).getLong(12);\n\n        when(resultSet.getLong(13)).thenReturn(now);\n        DBUtils.getValueFromResultSet(13, resultSet, Timestamp.class);\n        verify(resultSet, times(1)).getLong(13);\n\n        when(resultSet.getBytes(14)).thenReturn(\"bytes\".getBytes());\n        DBUtils.getValueFromResultSet(14, resultSet, byte[].class);\n        verify(resultSet, times(1)).getBytes(14);\n    }", "signature": "void testGetValueFromResultSet()", "full_signature": "@Test public void testGetValueFromResultSet()", "class_method_signature": "DBUtilsTest.testGetValueFromResultSet()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getInt", "getValueFromResultSet", "getInt", "verify", "times", "thenReturn", "when", "getLong", "getValueFromResultSet", "getLong", "verify", "times", "thenReturn", "when", "getShort", "getValueFromResultSet", "getShort", "verify", "times", "thenReturn", "when", "getBoolean", "getValueFromResultSet", "getBoolean", "verify", "times", "thenReturn", "when", "getFloat", "getValueFromResultSet", "getFloat", "verify", "times", "thenReturn", "when", "getDouble", "getValueFromResultSet", "getDouble", "verify", "times", "thenReturn", "when", "getString", "getValueFromResultSet", "getString", "verify", "times", "thenReturn", "when", "getString", "getValueFromResultSet", "getString", "verify", "times", "thenReturn", "when", "getBigDecimal", "getValueFromResultSet", "getBigDecimal", "verify", "times", "currentTimeMillis", "thenReturn", "when", "getLong", "getValueFromResultSet", "getLong", "verify", "times", "thenReturn", "when", "getLong", "getValueFromResultSet", "getLong", "verify", "times", "thenReturn", "when", "getLong", "getValueFromResultSet", "getLong", "verify", "times", "thenReturn", "when", "getLong", "getValueFromResultSet", "getLong", "verify", "times", "thenReturn", "when", "getBytes", "getBytes", "getValueFromResultSet", "getBytes", "verify", "times"]}, "focal_class": {"identifier": "DBUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "wrapAsCloseable", "parameters": "(final ResultSet resultSet)", "modifiers": "public static", "return": "Closeable", "signature": "Closeable wrapAsCloseable(final ResultSet resultSet)", "full_signature": "public static Closeable wrapAsCloseable(final ResultSet resultSet)", "class_method_signature": "DBUtils.wrapAsCloseable(final ResultSet resultSet)", "testcase": false, "constructor": false}, {"identifier": "setAutoCommit", "parameters": "(final Connection connection, final boolean value)", "modifiers": "public static", "return": "boolean", "signature": "boolean setAutoCommit(final Connection connection, final boolean value)", "full_signature": "public static boolean setAutoCommit(final Connection connection, final boolean value)", "class_method_signature": "DBUtils.setAutoCommit(final Connection connection, final boolean value)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(final Connection connection)", "modifiers": "public static", "return": "void", "signature": "void commit(final Connection connection)", "full_signature": "public static void commit(final Connection connection)", "class_method_signature": "DBUtils.commit(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "(final Connection connection)", "modifiers": "public static", "return": "boolean", "signature": "boolean rollback(final Connection connection)", "full_signature": "public static boolean rollback(final Connection connection)", "class_method_signature": "DBUtils.rollback(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "closeQuietly", "parameters": "(java.sql.ResultSet resultSet)", "modifiers": "public static", "return": "void", "signature": "void closeQuietly(java.sql.ResultSet resultSet)", "full_signature": "public static void closeQuietly(java.sql.ResultSet resultSet)", "class_method_signature": "DBUtils.closeQuietly(java.sql.ResultSet resultSet)", "testcase": false, "constructor": false}, {"identifier": "closeQuietly", "parameters": "(Statement statement)", "modifiers": "public static", "return": "void", "signature": "void closeQuietly(Statement statement)", "full_signature": "public static void closeQuietly(Statement statement)", "class_method_signature": "DBUtils.closeQuietly(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "closeQuietly", "parameters": "(Connection connection)", "modifiers": "public static", "return": "void", "signature": "void closeQuietly(Connection connection)", "full_signature": "public static void closeQuietly(Connection connection)", "class_method_signature": "DBUtils.closeQuietly(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getDBTypeForClass", "parameters": "(final Class<?> valueType)", "modifiers": "public static", "return": "String", "signature": "String getDBTypeForClass(final Class<?> valueType)", "full_signature": "public static String getDBTypeForClass(final Class<?> valueType)", "class_method_signature": "DBUtils.getDBTypeForClass(final Class<?> valueType)", "testcase": false, "constructor": false}, {"identifier": "setValueToPreparedStatement", "parameters": "(int index, final PreparedStatement preparedStatement, Object value)", "modifiers": "public static", "return": "void", "signature": "void setValueToPreparedStatement(int index, final PreparedStatement preparedStatement, Object value)", "full_signature": "public static void setValueToPreparedStatement(int index, final PreparedStatement preparedStatement, Object value)", "class_method_signature": "DBUtils.setValueToPreparedStatement(int index, final PreparedStatement preparedStatement, Object value)", "testcase": false, "constructor": false}, {"identifier": "setValuesToPreparedStatement", "parameters": "(final int startIndex, final PreparedStatement preparedStatement, final Iterable values)", "modifiers": "public static", "return": "int", "signature": "int setValuesToPreparedStatement(final int startIndex, final PreparedStatement preparedStatement, final Iterable values)", "full_signature": "public static int setValuesToPreparedStatement(final int startIndex, final PreparedStatement preparedStatement, final Iterable values)", "class_method_signature": "DBUtils.setValuesToPreparedStatement(final int startIndex, final PreparedStatement preparedStatement, final Iterable values)", "testcase": false, "constructor": false}, {"identifier": "getValueFromResultSet", "parameters": "(int index, final ResultSet resultSet, final Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T getValueFromResultSet(int index, final ResultSet resultSet, final Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T getValueFromResultSet(int index, final ResultSet resultSet, final Class<T> type)", "class_method_signature": "DBUtils.getValueFromResultSet(int index, final ResultSet resultSet, final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "sanitizeForTableName", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String sanitizeForTableName(String input)", "full_signature": "public static String sanitizeForTableName(String input)", "class_method_signature": "DBUtils.sanitizeForTableName(String input)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/index/sqlite/support/DBUtils.java"}, "focal_method": {"identifier": "getValueFromResultSet", "parameters": "(int index, final ResultSet resultSet, final Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n    public static <T>T getValueFromResultSet(int index, final ResultSet resultSet, final Class<T> type){\n\n        try {\n            if (java.sql.Date.class.isAssignableFrom(type)) {\n                final long time = resultSet.getLong(index);\n                return (T)new java.sql.Date(time);\n\n            } else if (Time.class.isAssignableFrom(type)) {\n                final long time = resultSet.getLong(index);\n                return (T)new java.sql.Time(time);\n\n            } else if (Timestamp.class.isAssignableFrom(type)) {\n                final long time = resultSet.getLong(index);\n                return (T)new java.sql.Timestamp(time);\n\n            }else if (Date.class.isAssignableFrom(type)) {\n                final long time = resultSet.getLong(index);\n                return (T)new Date(time);\n\n            } else if (Long.class.isAssignableFrom(type)) {\n                return (T) Long.valueOf(resultSet.getLong(index));\n\n            } else if (Integer.class.isAssignableFrom(type)) {\n                return (T) Integer.valueOf(resultSet.getInt(index));\n\n            } else if (Short.class.isAssignableFrom(type)) {\n                return (T) Short.valueOf(resultSet.getShort(index));\n\n            } else if (Float.class.isAssignableFrom(type)) {\n                return (T) Float.valueOf(resultSet.getFloat(index));\n\n            } else if (Double.class.isAssignableFrom(type)) {\n                return (T) Double.valueOf(resultSet.getDouble(index));\n\n            } else if (Boolean.class.isAssignableFrom(type)) {\n                return (T) Boolean.valueOf(resultSet.getBoolean(index));\n\n            } else if (BigDecimal.class.isAssignableFrom(type)) {\n                return (T) resultSet.getBigDecimal(index);\n\n            } else if (CharSequence.class.isAssignableFrom(type)) {\n                return (T) resultSet.getString(index);\n\n            } else if (byte[].class.isAssignableFrom(type)) {\n                return (T) resultSet.getBytes(index);\n\n            } else {\n                throw new IllegalStateException(\"Type \" + type + \" not supported.\");\n            }\n        }catch (Exception e){\n            throw new IllegalStateException(\"Unable to read the value from the resultSet. Index:\" + index + \", type: \" + type, e);\n        }\n    }", "signature": "T getValueFromResultSet(int index, final ResultSet resultSet, final Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T getValueFromResultSet(int index, final ResultSet resultSet, final Class<T> type)", "class_method_signature": "DBUtils.getValueFromResultSet(int index, final ResultSet resultSet, final Class<T> type)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "getLong", "isAssignableFrom", "getLong", "isAssignableFrom", "getLong", "isAssignableFrom", "getLong", "isAssignableFrom", "valueOf", "getLong", "isAssignableFrom", "valueOf", "getInt", "isAssignableFrom", "valueOf", "getShort", "isAssignableFrom", "valueOf", "getFloat", "isAssignableFrom", "valueOf", "getDouble", "isAssignableFrom", "valueOf", "getBoolean", "isAssignableFrom", "getBigDecimal", "isAssignableFrom", "getString", "isAssignableFrom", "getBytes"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}