{"test_class": {"identifier": "PresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MortarScope root;", "modifier": "", "type": "MortarScope", "declarator": "root", "var_name": "root"}, {"original_string": "MortarScope activityScope;", "modifier": "", "type": "MortarScope", "declarator": "activityScope", "var_name": "activityScope"}], "file": "mortar/src/test/java/mortar/PresenterTest.java"}, "test_case": {"identifier": "onRegisteredIsFired", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void onRegisteredIsFired() {\n    SimplePresenter presenter = new SimplePresenter();\n    SomeView viewOne = new SomeView();\n\n    presenter.takeView(viewOne);\n    assertThat(presenter.registered).isSameAs(activityScope);\n  }", "signature": "void onRegisteredIsFired()", "full_signature": "@Test public void onRegisteredIsFired()", "class_method_signature": "PresenterTest.onRegisteredIsFired()", "testcase": true, "constructor": false, "invocations": ["takeView", "isSameAs", "assertThat"]}, "focal_class": {"identifier": "Presenter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private V view = null;", "modifier": "private", "type": "V", "declarator": "view = null", "var_name": "view"}, {"original_string": "private boolean loaded;", "modifier": "private", "type": "boolean", "declarator": "loaded", "var_name": "loaded"}, {"original_string": "private Bundler registration = new Bundler() {\n    @Override public String getMortarBundleKey() {\n      return Presenter.this.getMortarBundleKey();\n    }\n\n    @Override public void onLoad(Bundle savedInstanceState) {\n      if (hasView() && !loaded) {\n        loaded = true;\n        Presenter.this.onLoad(savedInstanceState);\n      }\n    }\n\n    @Override public void onSave(Bundle outState) {\n      Presenter.this.onSave(outState);\n    }\n\n    @Override public void onEnterScope(MortarScope scope) {\n      Presenter.this.onEnterScope(scope);\n    }\n\n    @Override public void onExitScope() {\n      Presenter.this.onExitScope();\n    }\n  };", "modifier": "private", "type": "Bundler", "declarator": "registration = new Bundler() {\n    @Override public String getMortarBundleKey() {\n      return Presenter.this.getMortarBundleKey();\n    }\n\n    @Override public void onLoad(Bundle savedInstanceState) {\n      if (hasView() && !loaded) {\n        loaded = true;\n        Presenter.this.onLoad(savedInstanceState);\n      }\n    }\n\n    @Override public void onSave(Bundle outState) {\n      Presenter.this.onSave(outState);\n    }\n\n    @Override public void onEnterScope(MortarScope scope) {\n      Presenter.this.onEnterScope(scope);\n    }\n\n    @Override public void onExitScope() {\n      Presenter.this.onExitScope();\n    }\n  }", "var_name": "registration"}], "methods": [{"identifier": "takeView", "parameters": "(V view)", "modifiers": "public final", "return": "void", "signature": "void takeView(V view)", "full_signature": "public final void takeView(V view)", "class_method_signature": "Presenter.takeView(V view)", "testcase": false, "constructor": false}, {"identifier": "dropView", "parameters": "(V view)", "modifiers": "public", "return": "void", "signature": "void dropView(V view)", "full_signature": "public void dropView(V view)", "class_method_signature": "Presenter.dropView(V view)", "testcase": false, "constructor": false}, {"identifier": "getMortarBundleKey", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getMortarBundleKey()", "full_signature": "protected String getMortarBundleKey()", "class_method_signature": "Presenter.getMortarBundleKey()", "testcase": false, "constructor": false}, {"identifier": "extractBundleService", "parameters": "(V view)", "modifiers": "protected abstract", "return": "BundleService", "signature": "BundleService extractBundleService(V view)", "full_signature": "protected abstract BundleService extractBundleService(V view)", "class_method_signature": "Presenter.extractBundleService(V view)", "testcase": false, "constructor": false}, {"identifier": "getView", "parameters": "()", "modifiers": "protected final", "return": "V", "signature": "V getView()", "full_signature": "protected final V getView()", "class_method_signature": "Presenter.getView()", "testcase": false, "constructor": false}, {"identifier": "hasView", "parameters": "()", "modifiers": "protected final", "return": "boolean", "signature": "boolean hasView()", "full_signature": "protected final boolean hasView()", "class_method_signature": "Presenter.hasView()", "testcase": false, "constructor": false}, {"identifier": "onEnterScope", "parameters": "(MortarScope scope)", "modifiers": "protected", "return": "void", "signature": "void onEnterScope(MortarScope scope)", "full_signature": "protected void onEnterScope(MortarScope scope)", "class_method_signature": "Presenter.onEnterScope(MortarScope scope)", "testcase": false, "constructor": false}, {"identifier": "onLoad", "parameters": "(Bundle savedInstanceState)", "modifiers": "protected", "return": "void", "signature": "void onLoad(Bundle savedInstanceState)", "full_signature": "protected void onLoad(Bundle savedInstanceState)", "class_method_signature": "Presenter.onLoad(Bundle savedInstanceState)", "testcase": false, "constructor": false}, {"identifier": "onSave", "parameters": "(Bundle outState)", "modifiers": "protected", "return": "void", "signature": "void onSave(Bundle outState)", "full_signature": "protected void onSave(Bundle outState)", "class_method_signature": "Presenter.onSave(Bundle outState)", "testcase": false, "constructor": false}, {"identifier": "onExitScope", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void onExitScope()", "full_signature": "protected void onExitScope()", "class_method_signature": "Presenter.onExitScope()", "testcase": false, "constructor": false}], "file": "mortar/src/main/java/mortar/Presenter.java"}, "focal_method": {"identifier": "takeView", "parameters": "(V view)", "modifiers": "public final", "return": "void", "body": "public final void takeView(V view) {\n    if (view == null) throw new NullPointerException(\"new view must not be null\");\n\n    if (this.view != view) {\n      if (this.view != null) dropView(this.view);\n\n      this.view = view;\n      extractBundleService(view).register(registration);\n    }\n  }", "signature": "void takeView(V view)", "full_signature": "public final void takeView(V view)", "class_method_signature": "Presenter.takeView(V view)", "testcase": false, "constructor": false, "invocations": ["dropView", "register", "extractBundleService"]}, "repository": {"repo_id": 14247776, "url": "https://github.com/square/mortar", "language": "Java", "is_fork": false, "fork_count": 172, "stargazer_count": 2189, "size": 884, "license": "licensed"}}