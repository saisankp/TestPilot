{"test_class": {"identifier": "ProcessToExecModelGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ProcessToExecModelGeneratorTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ProcessToExecModelGeneratorTest.class)", "var_name": "logger"}], "file": "jbpm/jbpm-flow-builder/src/test/java/org/jbpm/compiler/canonical/ProcessToExecModelGeneratorTest.java"}, "test_case": {"identifier": "testScriptAndWorkItemGeneration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScriptAndWorkItemGeneration() {\n\n        RuleFlowProcessFactory factory = RuleFlowProcessFactory.createProcess(\"demo.orders\");\n        factory\n            .variable(\"order\", new ObjectDataType(\"com.myspace.demo.Order\"))\n            .variable(\"approver\", new ObjectDataType(\"String\"))\n            .name(\"orders\")\n            .packageName(\"com.myspace.demo\")\n            .dynamic(false)\n            .version(\"1.0\")\n        .workItemNode(1)\n            .name(\"Log\")\n            .workName(\"Log\")\n            .done()\n        .actionNode(2)\n            .name(\"Dump order\")\n            .action(\"java\", \"System.out.println(\\\"Order has been created \\\" + order);\")\n            .done()\n        .endNode(3)\n            .name(\"end\")\n            .terminate(false)\n            .done()\n        .startNode(4)\n            .name(\"start\")\n            .done()\n        .connection(2, 1)\n        .connection(4, 2)\n        .connection(1, 3);\n        \n        WorkflowProcess process = factory.validate().getProcess();\n        \n        ProcessMetaData processMetadata = ProcessToExecModelGenerator.INSTANCE.generate(process);\n        assertNotNull(processMetadata, \"Dumper should return non null class for process\");\n        \n        logger.debug(processMetadata.getGeneratedClassModel().toString());\n        \n        assertEquals(\"orders\", processMetadata.getExtractedProcessId());\n        assertEquals(\"demo.orders\", processMetadata.getProcessId());\n        assertEquals(\"orders\", processMetadata.getProcessName());\n        assertEquals(\"1.0\", processMetadata.getProcessVersion());\n        assertEquals(\"com.myspace.demo.OrdersProcess\", processMetadata.getProcessClassName());\n        assertNotNull(processMetadata.getGeneratedClassModel());\n        assertEquals(1, processMetadata.getWorkItems().size());\n    }", "signature": "void testScriptAndWorkItemGeneration()", "full_signature": "@Test public void testScriptAndWorkItemGeneration()", "class_method_signature": "ProcessToExecModelGeneratorTest.testScriptAndWorkItemGeneration()", "testcase": true, "constructor": false, "invocations": ["createProcess", "connection", "connection", "connection", "done", "name", "startNode", "done", "terminate", "name", "endNode", "done", "action", "name", "actionNode", "done", "workName", "name", "workItemNode", "version", "dynamic", "packageName", "name", "variable", "variable", "getProcess", "validate", "generate", "assertNotNull", "debug", "toString", "getGeneratedClassModel", "assertEquals", "getExtractedProcessId", "assertEquals", "getProcessId", "assertEquals", "getProcessName", "assertEquals", "getProcessVersion", "assertEquals", "getProcessClassName", "assertNotNull", "getGeneratedClassModel", "assertEquals", "size", "getWorkItems"]}, "focal_class": {"identifier": "ProcessToExecModelGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final ProcessToExecModelGenerator INSTANCE = new ProcessToExecModelGenerator(\n                                                                                               ProcessToExecModelGenerator.class.getClassLoader());", "modifier": "public static final", "type": "ProcessToExecModelGenerator", "declarator": "INSTANCE = new ProcessToExecModelGenerator(\n                                                                                               ProcessToExecModelGenerator.class.getClassLoader())", "var_name": "INSTANCE"}, {"original_string": "private static final String PROCESS_CLASS_SUFFIX = \"Process\";", "modifier": "private static final", "type": "String", "declarator": "PROCESS_CLASS_SUFFIX = \"Process\"", "var_name": "PROCESS_CLASS_SUFFIX"}, {"original_string": "private static final String MODEL_CLASS_SUFFIX = \"Model\";", "modifier": "private static final", "type": "String", "declarator": "MODEL_CLASS_SUFFIX = \"Model\"", "var_name": "MODEL_CLASS_SUFFIX"}, {"original_string": "private static final String PROCESS_TEMPLATE_FILE = \"/class-templates/ProcessTemplate.java\";", "modifier": "private static final", "type": "String", "declarator": "PROCESS_TEMPLATE_FILE = \"/class-templates/ProcessTemplate.java\"", "var_name": "PROCESS_TEMPLATE_FILE"}, {"original_string": "private final ProcessVisitor processVisitor;", "modifier": "private final", "type": "ProcessVisitor", "declarator": "processVisitor", "var_name": "processVisitor"}], "methods": [{"identifier": "ProcessToExecModelGenerator", "parameters": "(ClassLoader contextClassLoader)", "modifiers": "public", "return": "", "signature": " ProcessToExecModelGenerator(ClassLoader contextClassLoader)", "full_signature": "public  ProcessToExecModelGenerator(ClassLoader contextClassLoader)", "class_method_signature": "ProcessToExecModelGenerator.ProcessToExecModelGenerator(ClassLoader contextClassLoader)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(WorkflowProcess process)", "modifiers": "public", "return": "ProcessMetaData", "signature": "ProcessMetaData generate(WorkflowProcess process)", "full_signature": "public ProcessMetaData generate(WorkflowProcess process)", "class_method_signature": "ProcessToExecModelGenerator.generate(WorkflowProcess process)", "testcase": false, "constructor": false}, {"identifier": "generateMethod", "parameters": "(WorkflowProcess process)", "modifiers": "public", "return": "MethodDeclaration", "signature": "MethodDeclaration generateMethod(WorkflowProcess process)", "full_signature": "public MethodDeclaration generateMethod(WorkflowProcess process)", "class_method_signature": "ProcessToExecModelGenerator.generateMethod(WorkflowProcess process)", "testcase": false, "constructor": false}, {"identifier": "generateModel", "parameters": "(WorkflowProcess process)", "modifiers": "public", "return": "ModelMetaData", "signature": "ModelMetaData generateModel(WorkflowProcess process)", "full_signature": "public ModelMetaData generateModel(WorkflowProcess process)", "class_method_signature": "ProcessToExecModelGenerator.generateModel(WorkflowProcess process)", "testcase": false, "constructor": false}, {"identifier": "generateInputModel", "parameters": "(WorkflowProcess process)", "modifiers": "public", "return": "ModelMetaData", "signature": "ModelMetaData generateInputModel(WorkflowProcess process)", "full_signature": "public ModelMetaData generateInputModel(WorkflowProcess process)", "class_method_signature": "ProcessToExecModelGenerator.generateInputModel(WorkflowProcess process)", "testcase": false, "constructor": false}, {"identifier": "generateOutputModel", "parameters": "(WorkflowProcess process)", "modifiers": "public", "return": "ModelMetaData", "signature": "ModelMetaData generateOutputModel(WorkflowProcess process)", "full_signature": "public ModelMetaData generateOutputModel(WorkflowProcess process)", "class_method_signature": "ProcessToExecModelGenerator.generateOutputModel(WorkflowProcess process)", "testcase": false, "constructor": false}, {"identifier": "getVariableScope", "parameters": "(WorkflowProcess process)", "modifiers": "private static", "return": "VariableScope", "signature": "VariableScope getVariableScope(WorkflowProcess process)", "full_signature": "private static VariableScope getVariableScope(WorkflowProcess process)", "class_method_signature": "ProcessToExecModelGenerator.getVariableScope(WorkflowProcess process)", "testcase": false, "constructor": false}, {"identifier": "extractModelClassName", "parameters": "(String processId)", "modifiers": "public static", "return": "String", "signature": "String extractModelClassName(String processId)", "full_signature": "public static String extractModelClassName(String processId)", "class_method_signature": "ProcessToExecModelGenerator.extractModelClassName(String processId)", "testcase": false, "constructor": false}, {"identifier": "generateUserTaskModel", "parameters": "(WorkflowProcess process)", "modifiers": "public", "return": "List<UserTaskModelMetaData>", "signature": "List<UserTaskModelMetaData> generateUserTaskModel(WorkflowProcess process)", "full_signature": "public List<UserTaskModelMetaData> generateUserTaskModel(WorkflowProcess process)", "class_method_signature": "ProcessToExecModelGenerator.generateUserTaskModel(WorkflowProcess process)", "testcase": false, "constructor": false}, {"identifier": "extractProcessId", "parameters": "(String processId)", "modifiers": "public static", "return": "String", "signature": "String extractProcessId(String processId)", "full_signature": "public static String extractProcessId(String processId)", "class_method_signature": "ProcessToExecModelGenerator.extractProcessId(String processId)", "testcase": false, "constructor": false}], "file": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(WorkflowProcess process)", "modifiers": "public", "return": "ProcessMetaData", "body": "public ProcessMetaData generate(WorkflowProcess process) {\n        CompilationUnit parsedClazzFile = parse(this.getClass().getResourceAsStream(PROCESS_TEMPLATE_FILE));\n        parsedClazzFile.setPackageDeclaration(process.getPackageName());\n        Optional<ClassOrInterfaceDeclaration> processClazzOptional = parsedClazzFile.findFirst(\n                                                                                               ClassOrInterfaceDeclaration.class,\n                                                                                               sl -> true);\n\n        String extractedProcessId = extractProcessId(process.getId());\n\n        if (!processClazzOptional.isPresent()) {\n            throw new NoSuchElementException(\"Cannot find class declaration in the template\");\n        }\n        ClassOrInterfaceDeclaration processClazz = processClazzOptional.get();\n        processClazz.setName(ucFirst(extractedProcessId + PROCESS_CLASS_SUFFIX));\n        String packageName = parsedClazzFile.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(null);\n        ProcessMetaData metadata =\n                new ProcessMetaData(process.getId(), extractedProcessId, process.getName(), process.getVersion(),\n                                    packageName, processClazz.getNameAsString());\n\n        Optional<MethodDeclaration> processMethod = parsedClazzFile.findFirst(MethodDeclaration.class, sl -> sl\n                                                                                                               .getName()\n                                                                                                               .asString()\n                                                                                                               .equals(\"process\"));\n\n        processVisitor.visitProcess(process, processMethod.get(), metadata);\n\n        metadata.setGeneratedClassModel(parsedClazzFile);\n        return metadata;\n    }", "signature": "ProcessMetaData generate(WorkflowProcess process)", "full_signature": "public ProcessMetaData generate(WorkflowProcess process)", "class_method_signature": "ProcessToExecModelGenerator.generate(WorkflowProcess process)", "testcase": false, "constructor": false, "invocations": ["parse", "getResourceAsStream", "getClass", "setPackageDeclaration", "getPackageName", "findFirst", "extractProcessId", "getId", "isPresent", "get", "setName", "ucFirst", "orElse", "map", "getPackageDeclaration", "getId", "getName", "getVersion", "getNameAsString", "findFirst", "equals", "asString", "getName", "visitProcess", "get", "setGeneratedClassModel"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}