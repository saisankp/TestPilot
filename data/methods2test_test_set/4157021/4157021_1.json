{"test_class": {"identifier": "AuditInfoExtractorTest", "superclass": "extends AuditingTestsBase", "interfaces": "", "fields": [], "file": "src/modules/rest/auditing/src/test/java/it/geosolutions/geostore/services/rest/auditing/AuditInfoExtractorTest.java"}, "test_case": {"identifier": "testSuccessExecution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSuccessExecution() {\n        Message message = Mockito.mock(Message.class);\n        Exchange exchange = Mockito.mock(Exchange.class);\n        Message inMessage = getInMessage();\n        Mockito.when(message.getExchange()).thenReturn(exchange);\n        Mockito.when(exchange.getInMessage()).thenReturn(inMessage);\n        Message outSuccessMessage = getOutSuccessMessage();\n        Mockito.when(exchange.getOutMessage()).thenReturn(outSuccessMessage);\n        Mockito.when(exchange.get(AuditInfo.START_TIME.getKey())).thenReturn(1000l);\n        Map<String, String> auditInfo = AuditInfoExtractor.extract(message);\n        assertEquals(auditInfo.size(), 18);\n        assertEquals(auditInfo.get(AuditInfo.HOST.getKey()), \"localhost\");\n        assertEquals(auditInfo.get(AuditInfo.RESPONSE_CONTENT_TYPE.getKey()), \"application/octet-stream\");\n        assertEquals(auditInfo.get(AuditInfo.HTTP_METHOD.getKey()), \"GET\");\n        assertEquals(auditInfo.get(AuditInfo.BODY_AS_STRING.getKey()), \"body-content\");\n        assertEquals(auditInfo.get(AuditInfo.USER_ROLE.getKey()), \"ADMIN\");\n        assertEquals(auditInfo.get(AuditInfo.REMOTE_HOST.getKey()), \"127.0.0.1\");\n        assertEquals(auditInfo.get(AuditInfo.START_TIME.getKey()), \"1000\");\n        assertEquals(auditInfo.get(AuditInfo.RESPONSE_LENGTH.getKey()), \"150\");\n        assertEquals(auditInfo.get(AuditInfo.BASE_PATH.getKey()), \"users\");\n        assertEquals(auditInfo.get(AuditInfo.QUERY_STRING.getKey()), \"\");\n        assertEquals(auditInfo.get(AuditInfo.USER_GROUPS.getKey()), \"everyone\");\n        assertEquals(auditInfo.get(AuditInfo.RESPONSE_STATUS_CODE.getKey()), \"200\");\n        assertEquals(auditInfo.get(AuditInfo.PATH.getKey()), \"users/user/15\");\n        assertEquals(auditInfo.get(AuditInfo.USER_NAME.getKey()), \"admin\");\n        assertEquals(auditInfo.get(AuditInfo.REMOTE_ADDR.getKey()), \"127.0.0.1\");\n        assertEquals(auditInfo.get(AuditInfo.REMOTE_USER.getKey()),\n                \"User[id=2, name=admin, group=[UserGroup[id=1, groupName=everyone]], role=ADMIN]\");\n        assertNotNull(auditInfo.get(AuditInfo.END_TIME.getKey()));\n        assertEquals(Long.parseLong(auditInfo.get(AuditInfo.TOTAL_TIME.getKey())),\n                Long.parseLong(auditInfo.get(AuditInfo.END_TIME.getKey())) - 1000);\n    }", "signature": "void testSuccessExecution()", "full_signature": "@Test public void testSuccessExecution()", "class_method_signature": "AuditInfoExtractorTest.testSuccessExecution()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "getInMessage", "thenReturn", "when", "getExchange", "thenReturn", "when", "getInMessage", "getOutSuccessMessage", "thenReturn", "when", "getOutMessage", "thenReturn", "when", "get", "getKey", "extract", "assertEquals", "size", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertEquals", "get", "getKey", "assertNotNull", "get", "getKey", "assertEquals", "parseLong", "get", "getKey", "parseLong", "get", "getKey"]}, "focal_class": {"identifier": "AuditInfoExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(AuditInfoExtractor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(AuditInfoExtractor.class)", "var_name": "LOGGER"}, {"original_string": "private static final Pattern geoStorePath = Pattern.compile(\"/geostore/(.*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "geoStorePath = Pattern.compile(\"/geostore/(.*)\")", "var_name": "geoStorePath"}], "methods": [{"identifier": "AuditInfoExtractor", "parameters": "()", "modifiers": "private", "return": "", "signature": " AuditInfoExtractor()", "full_signature": "private  AuditInfoExtractor()", "class_method_signature": "AuditInfoExtractor.AuditInfoExtractor()", "testcase": false, "constructor": true}, {"identifier": "extract", "parameters": "(Message message)", "modifiers": "static", "return": "Map<String, String>", "signature": "Map<String, String> extract(Message message)", "full_signature": "static Map<String, String> extract(Message message)", "class_method_signature": "AuditInfoExtractor.extract(Message message)", "testcase": false, "constructor": false}, {"identifier": "getResponseLength", "parameters": "(Message message)", "modifiers": "static", "return": "Integer", "signature": "Integer getResponseLength(Message message)", "full_signature": "static Integer getResponseLength(Message message)", "class_method_signature": "AuditInfoExtractor.getResponseLength(Message message)", "testcase": false, "constructor": false}, {"identifier": "handleInMessage", "parameters": "(Map<String, String> auditInfo, Message message)", "modifiers": "private static", "return": "void", "signature": "void handleInMessage(Map<String, String> auditInfo, Message message)", "full_signature": "private static void handleInMessage(Map<String, String> auditInfo, Message message)", "class_method_signature": "AuditInfoExtractor.handleInMessage(Map<String, String> auditInfo, Message message)", "testcase": false, "constructor": false}, {"identifier": "handleOutSuccessMessage", "parameters": "(Map<String, String> auditInfo, Message message)", "modifiers": "private static", "return": "void", "signature": "void handleOutSuccessMessage(Map<String, String> auditInfo, Message message)", "full_signature": "private static void handleOutSuccessMessage(Map<String, String> auditInfo, Message message)", "class_method_signature": "AuditInfoExtractor.handleOutSuccessMessage(Map<String, String> auditInfo, Message message)", "testcase": false, "constructor": false}, {"identifier": "handleOutFaultMessage", "parameters": "(Map<String, String> auditInfo, Message message)", "modifiers": "private static", "return": "void", "signature": "void handleOutFaultMessage(Map<String, String> auditInfo, Message message)", "full_signature": "private static void handleOutFaultMessage(Map<String, String> auditInfo, Message message)", "class_method_signature": "AuditInfoExtractor.handleOutFaultMessage(Map<String, String> auditInfo, Message message)", "testcase": false, "constructor": false}, {"identifier": "handleTime", "parameters": "(Map<String, String> auditInfo, Object startTimeObject)", "modifiers": "private static", "return": "void", "signature": "void handleTime(Map<String, String> auditInfo, Object startTimeObject)", "full_signature": "private static void handleTime(Map<String, String> auditInfo, Object startTimeObject)", "class_method_signature": "AuditInfoExtractor.handleTime(Map<String, String> auditInfo, Object startTimeObject)", "testcase": false, "constructor": false}, {"identifier": "safeToString", "parameters": "(Object value)", "modifiers": "private static", "return": "String", "signature": "String safeToString(Object value)", "full_signature": "private static String safeToString(Object value)", "class_method_signature": "AuditInfoExtractor.safeToString(Object value)", "testcase": false, "constructor": false}, {"identifier": "getPaylod", "parameters": "(Message message)", "modifiers": "private static", "return": "String", "signature": "String getPaylod(Message message)", "full_signature": "private static String getPaylod(Message message)", "class_method_signature": "AuditInfoExtractor.getPaylod(Message message)", "testcase": false, "constructor": false}, {"identifier": "fillAuthInfo", "parameters": "(Map<String, String> info, HttpServletRequest httpServletRequest)", "modifiers": "private static", "return": "void", "signature": "void fillAuthInfo(Map<String, String> info, HttpServletRequest httpServletRequest)", "full_signature": "private static void fillAuthInfo(Map<String, String> info, HttpServletRequest httpServletRequest)", "class_method_signature": "AuditInfoExtractor.fillAuthInfo(Map<String, String> info, HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false}, {"identifier": "groupsToString", "parameters": "(Set<UserGroup> groups)", "modifiers": "private static", "return": "String", "signature": "String groupsToString(Set<UserGroup> groups)", "full_signature": "private static String groupsToString(Set<UserGroup> groups)", "class_method_signature": "AuditInfoExtractor.groupsToString(Set<UserGroup> groups)", "testcase": false, "constructor": false}, {"identifier": "removeGeoStore", "parameters": "(String path)", "modifiers": "private static", "return": "String", "signature": "String removeGeoStore(String path)", "full_signature": "private static String removeGeoStore(String path)", "class_method_signature": "AuditInfoExtractor.removeGeoStore(String path)", "testcase": false, "constructor": false}], "file": "src/modules/rest/auditing/src/main/java/it/geosolutions/geostore/services/rest/auditing/AuditInfoExtractor.java"}, "focal_method": {"identifier": "extract", "parameters": "(Message message)", "modifiers": "static", "return": "Map<String, String>", "body": "static Map<String, String> extract(Message message) {\n        Map<String, String> auditInfo = new HashMap<String, String>();\n        try {\n            handleInMessage(auditInfo, message.getExchange().getInMessage());\n            handleOutSuccessMessage(auditInfo, message.getExchange().getOutMessage());\n            handleOutFaultMessage(auditInfo, message.getExchange().getOutFaultMessage());\n            handleTime(auditInfo, message.getExchange().get(AuditInfo.START_TIME.getKey()));\n        } catch (Exception exception) {\n            LogUtils.error(LOGGER, exception, \"Error obtaining auditing information.\");\n        }\n        return auditInfo;\n    }", "signature": "Map<String, String> extract(Message message)", "full_signature": "static Map<String, String> extract(Message message)", "class_method_signature": "AuditInfoExtractor.extract(Message message)", "testcase": false, "constructor": false, "invocations": ["handleInMessage", "getInMessage", "getExchange", "handleOutSuccessMessage", "getOutMessage", "getExchange", "handleOutFaultMessage", "getOutFaultMessage", "getExchange", "handleTime", "get", "getExchange", "getKey", "error"]}, "repository": {"repo_id": 4157021, "url": "https://github.com/geosolutions-it/geostore", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 19, "size": 1798, "license": "licensed"}}