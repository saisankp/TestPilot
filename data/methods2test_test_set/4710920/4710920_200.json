{"test_class": {"identifier": "DefaultTPSLimiterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultTPSLimiter defaultTPSLimiter = new DefaultTPSLimiter();", "modifier": "private", "type": "DefaultTPSLimiter", "declarator": "defaultTPSLimiter = new DefaultTPSLimiter()", "var_name": "defaultTPSLimiter"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/tps/DefaultTPSLimiterTest.java"}, "test_case": {"identifier": "testIsNotAllowable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsNotAllowable() throws Exception {\n        Invocation invocation = new MockInvocation();\n        URL url = URL.valueOf(\"test://test\");\n        url = url.addParameter(INTERFACE_KEY, \"org.apache.dubbo.rpc.file.TpsService\");\n        url = url.addParameter(TPS_LIMIT_RATE_KEY, 2);\n        url = url.addParameter(TPS_LIMIT_INTERVAL_KEY, 1000);\n        for (int i = 0; i < 4; i++) {\n            if (i == 3) {\n                Assertions.assertFalse(defaultTPSLimiter.isAllowable(url, invocation));\n            } else {\n                Assertions.assertTrue(defaultTPSLimiter.isAllowable(url, invocation));\n            }\n        }\n    }", "signature": "void testIsNotAllowable()", "full_signature": "@Test public void testIsNotAllowable()", "class_method_signature": "DefaultTPSLimiterTest.testIsNotAllowable()", "testcase": true, "constructor": false, "invocations": ["valueOf", "addParameter", "addParameter", "addParameter", "assertFalse", "isAllowable", "assertTrue", "isAllowable"]}, "focal_class": {"identifier": "DefaultTPSLimiter", "superclass": "", "interfaces": "implements TPSLimiter", "fields": [{"original_string": "private final ConcurrentMap<String, StatItem> stats = new ConcurrentHashMap<String, StatItem>();", "modifier": "private final", "type": "ConcurrentMap<String, StatItem>", "declarator": "stats = new ConcurrentHashMap<String, StatItem>()", "var_name": "stats"}], "methods": [{"identifier": "isAllowable", "parameters": "(URL url, Invocation invocation)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAllowable(URL url, Invocation invocation)", "full_signature": "@Override public boolean isAllowable(URL url, Invocation invocation)", "class_method_signature": "DefaultTPSLimiter.isAllowable(URL url, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/tps/DefaultTPSLimiter.java"}, "focal_method": {"identifier": "isAllowable", "parameters": "(URL url, Invocation invocation)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isAllowable(URL url, Invocation invocation) {\n        int rate = url.getParameter(TPS_LIMIT_RATE_KEY, -1);\n        long interval = url.getParameter(TPS_LIMIT_INTERVAL_KEY, DEFAULT_TPS_LIMIT_INTERVAL);\n        String serviceKey = url.getServiceKey();\n        if (rate > 0) {\n            StatItem statItem = stats.get(serviceKey);\n            if (statItem == null) {\n                stats.putIfAbsent(serviceKey, new StatItem(serviceKey, rate, interval));\n                statItem = stats.get(serviceKey);\n            } else {\n                //rate or interval has changed, rebuild\n                if (statItem.getRate() != rate || statItem.getInterval() != interval) {\n                    stats.put(serviceKey, new StatItem(serviceKey, rate, interval));\n                    statItem = stats.get(serviceKey);\n                }\n            }\n            return statItem.isAllowable();\n        } else {\n            StatItem statItem = stats.get(serviceKey);\n            if (statItem != null) {\n                stats.remove(serviceKey);\n            }\n        }\n\n        return true;\n    }", "signature": "boolean isAllowable(URL url, Invocation invocation)", "full_signature": "@Override public boolean isAllowable(URL url, Invocation invocation)", "class_method_signature": "DefaultTPSLimiter.isAllowable(URL url, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getParameter", "getParameter", "getServiceKey", "get", "putIfAbsent", "get", "getRate", "getInterval", "put", "get", "isAllowable", "get", "remove"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}