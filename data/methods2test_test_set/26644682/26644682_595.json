{"test_class": {"identifier": "OptimizedExportStrategyTest", "superclass": "extends TransformationServiceBaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    OptimizedExportStrategy optimizedExportStrategy;", "modifier": "@Autowired", "type": "OptimizedExportStrategy", "declarator": "optimizedExportStrategy", "var_name": "optimizedExportStrategy"}, {"original_string": "@Autowired\n    PreparationRepository preparationRepository;", "modifier": "@Autowired", "type": "PreparationRepository", "declarator": "preparationRepository", "var_name": "preparationRepository"}, {"original_string": "@Autowired\n    ContentCache contentCache;", "modifier": "@Autowired", "type": "ContentCache", "declarator": "contentCache", "var_name": "contentCache"}, {"original_string": "@Autowired\n    CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Autowired", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/service/export/OptimizedExportStrategyTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception {\n        // Given\n        final String datasetId = \"1234\";\n        final String format = \"JSON\";\n        final String preparation = createEmptyPreparationFromDataset(datasetId, \"test\");\n        applyAction(preparation, \"[{}]\");\n        applyAction(preparation, \"[{}]\");\n\n        final PreparationDTO preparationDetails = getPreparation(preparation);\n        for (String step : preparationDetails.getSteps()) {\n            try (OutputStream content = contentCache.put(cacheKeyGenerator.generateMetadataKey(preparation, step, HEAD),\n                    ContentCache.TimeToLive.DEFAULT)) {\n                content.write(\"{}\".getBytes());\n                content.flush();\n            }\n\n            final TransformationCacheKey key = cacheKeyGenerator.generateContentKey( //\n                    datasetId, //\n                    preparation, //\n                    step, //\n                    format, //\n                    HEAD, //\n                    \"\" // no filter\n            );\n            try (OutputStream content = contentCache.put(key, ContentCache.TimeToLive.DEFAULT)) {\n                content.write(\"{\\\"records\\\": [{\\\"0000\\\": \\\"a\\\"}]}\".getBytes());\n                content.flush();\n            }\n        }\n\n        ExportParameters exportParameters = new ExportParameters();\n        exportParameters.setPreparationId(preparation);\n        exportParameters.setDatasetId(datasetId);\n        exportParameters.setExportType(format);\n        exportParameters.setFrom(HEAD);\n\n        // Then\n        optimizedExportStrategy.execute(exportParameters);\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "OptimizedExportStrategyTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["createEmptyPreparationFromDataset", "applyAction", "applyAction", "getPreparation", "getSteps", "put", "generateMetadataKey", "write", "getBytes", "flush", "generateContentKey", "put", "write", "getBytes", "flush", "setPreparationId", "setDatasetId", "setExportType", "setFrom", "execute"]}, "focal_class": {"identifier": "OptimizedExportStrategy", "superclass": "extends BaseSampleExportStrategy", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(OptimizedExportStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(OptimizedExportStrategy.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Autowired\n    private", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}], "methods": [{"identifier": "test", "parameters": "(ExportParameters parameters)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean test(ExportParameters parameters)", "full_signature": "@Override public boolean test(ExportParameters parameters)", "class_method_signature": "OptimizedExportStrategy.test(ExportParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(ExportParameters parameters)", "modifiers": "@Override public", "return": "StreamingResponseBody", "signature": "StreamingResponseBody execute(ExportParameters parameters)", "full_signature": "@Override public StreamingResponseBody execute(ExportParameters parameters)", "class_method_signature": "OptimizedExportStrategy.execute(ExportParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "performOptimizedTransform", "parameters": "(ExportParameters parameters, OutputStream outputStream)", "modifiers": "private", "return": "void", "signature": "void performOptimizedTransform(ExportParameters parameters, OutputStream outputStream)", "full_signature": "private void performOptimizedTransform(ExportParameters parameters, OutputStream outputStream)", "class_method_signature": "OptimizedExportStrategy.performOptimizedTransform(ExportParameters parameters, OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "getMatchingSteps", "parameters": "(List<String> steps, String fromId, String toId)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getMatchingSteps(List<String> steps, String fromId, String toId)", "full_signature": "private List<String> getMatchingSteps(List<String> steps, String fromId, String toId)", "class_method_signature": "OptimizedExportStrategy.getMatchingSteps(List<String> steps, String fromId, String toId)", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/service/export/OptimizedExportStrategy.java"}, "focal_method": {"identifier": "execute", "parameters": "(ExportParameters parameters)", "modifiers": "@Override public", "return": "StreamingResponseBody", "body": "@Override\n    public StreamingResponseBody execute(ExportParameters parameters) {\n        final String formatName = parameters.getExportType();\n        final ExportFormat format = getFormat(formatName);\n        ExportUtils.setExportHeaders(parameters.getExportName(), //\n                parameters.getArguments().get(ExportFormat.PREFIX + CSVFormat.ParametersCSV.ENCODING), //\n                format);\n\n        return outputStream -> performOptimizedTransform(parameters, outputStream);\n    }", "signature": "StreamingResponseBody execute(ExportParameters parameters)", "full_signature": "@Override public StreamingResponseBody execute(ExportParameters parameters)", "class_method_signature": "OptimizedExportStrategy.execute(ExportParameters parameters)", "testcase": false, "constructor": false, "invocations": ["getExportType", "getFormat", "setExportHeaders", "getExportName", "get", "getArguments", "performOptimizedTransform"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}