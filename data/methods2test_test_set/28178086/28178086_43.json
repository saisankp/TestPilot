{"test_class": {"identifier": "DataSetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final DataSource id = DataSourceTest.newSample();", "modifier": "final", "type": "DataSource", "declarator": "id = DataSourceTest.newSample()", "var_name": "id"}, {"original_string": "final String k1 = \"domain\", v1 = \"NB01\";", "modifier": "final", "type": "String", "declarator": "k1 = \"domain\"", "var_name": "k1"}, {"original_string": "final ImmutableSortedMap<String, String> content = ImmutableSortedMap.of(k1, v1);", "modifier": "final", "type": "ImmutableSortedMap<String, String>", "declarator": "content = ImmutableSortedMap.of(k1, v1)", "var_name": "content"}, {"original_string": "final ImmutableSortedMap<String, String> emptyContent = ImmutableSortedMap.of();", "modifier": "final", "type": "ImmutableSortedMap<String, String>", "declarator": "emptyContent = ImmutableSortedMap.of()", "var_name": "emptyContent"}], "file": "jtss/src/test/java/ec/tss/tsproviders/DataSetTest.java"}, "test_case": {"identifier": "testHashCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHashCode() {\n        assertThat(newSample().hashCode())\n                .isEqualTo(newSample().hashCode())\n                .isNotEqualTo(new DataSet(id, DataSet.Kind.DUMMY, emptyContent).hashCode());\n    }", "signature": "void testHashCode()", "full_signature": "@Test public void testHashCode()", "class_method_signature": "DataSetTest.testHashCode()", "testcase": true, "constructor": false, "invocations": ["isNotEqualTo", "isEqualTo", "assertThat", "hashCode", "newSample", "hashCode", "newSample", "hashCode"]}, "focal_class": {"identifier": "DataSet", "superclass": "", "interfaces": "implements IConfig, Serializable", "fields": [{"original_string": "private final DataSource dataSource;", "modifier": "private final", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "private final Kind kind;", "modifier": "private final", "type": "Kind", "declarator": "kind", "var_name": "kind"}, {"original_string": "private final ImmutableSortedMap<String, String> params;", "modifier": "private final", "type": "ImmutableSortedMap<String, String>", "declarator": "params", "var_name": "params"}, {"original_string": "private static final ThreadLocal<Xml> XML = ThreadLocal.withInitial(Xml::new);", "modifier": "private static final", "type": "ThreadLocal<Xml>", "declarator": "XML = ThreadLocal.withInitial(Xml::new)", "var_name": "XML"}, {"original_string": "private static final String SCHEME = \"demetra\";", "modifier": "private static final", "type": "String", "declarator": "SCHEME = \"demetra\"", "var_name": "SCHEME"}, {"original_string": "private static final String HOST = \"tsprovider\";", "modifier": "private static final", "type": "String", "declarator": "HOST = \"tsprovider\"", "var_name": "HOST"}, {"original_string": "private static final Parsers.Parser<DataSet> URI_PARSER = new FailSafeParser<DataSet>() {\n        @Override\n        protected DataSet doParse(CharSequence input) throws Exception {\n            URI uri = new URI(input.toString());\n            if (!SCHEME.equals(uri.getScheme()) || !HOST.equals(uri.getHost())) {\n                return null;\n            }\n            String[] path = UriBuilder.getPathArray(uri, 3);\n            if (path == null) {\n                return null;\n            }\n            Map<String, String> query = UriBuilder.getQueryMap(uri);\n            if (query == null) {\n                return null;\n            }\n            Map<String, String> fragment = UriBuilder.getFragmentMap(uri);\n            if (fragment == null) {\n                return null;\n            }\n            DataSource dataSource = new DataSource(path[0], path[1], Util.toImmutable(query));\n            return new DataSet(dataSource, Kind.valueOf(path[2]), Util.toImmutable(fragment));\n        }\n    };", "modifier": "private static final", "type": "Parsers.Parser<DataSet>", "declarator": "URI_PARSER = new FailSafeParser<DataSet>() {\n        @Override\n        protected DataSet doParse(CharSequence input) throws Exception {\n            URI uri = new URI(input.toString());\n            if (!SCHEME.equals(uri.getScheme()) || !HOST.equals(uri.getHost())) {\n                return null;\n            }\n            String[] path = UriBuilder.getPathArray(uri, 3);\n            if (path == null) {\n                return null;\n            }\n            Map<String, String> query = UriBuilder.getQueryMap(uri);\n            if (query == null) {\n                return null;\n            }\n            Map<String, String> fragment = UriBuilder.getFragmentMap(uri);\n            if (fragment == null) {\n                return null;\n            }\n            DataSource dataSource = new DataSource(path[0], path[1], Util.toImmutable(query));\n            return new DataSet(dataSource, Kind.valueOf(path[2]), Util.toImmutable(fragment));\n        }\n    }", "var_name": "URI_PARSER"}, {"original_string": "private static final Formatters.Formatter<DataSet> URI_FORMATTER = Formatters.wrap(DataSet::formatAsUri);", "modifier": "private static final", "type": "Formatters.Formatter<DataSet>", "declarator": "URI_FORMATTER = Formatters.wrap(DataSet::formatAsUri)", "var_name": "URI_FORMATTER"}], "methods": [{"identifier": "DataSet", "parameters": "(@NonNull DataSource dataSource, @NonNull Kind kind, @NonNull ImmutableSortedMap<String, String> params)", "modifiers": "@VisibleForTesting", "return": "", "signature": " DataSet(@NonNull DataSource dataSource, @NonNull Kind kind, @NonNull ImmutableSortedMap<String, String> params)", "full_signature": "@VisibleForTesting  DataSet(@NonNull DataSource dataSource, @NonNull Kind kind, @NonNull ImmutableSortedMap<String, String> params)", "class_method_signature": "DataSet.DataSet(@NonNull DataSource dataSource, @NonNull Kind kind, @NonNull ImmutableSortedMap<String, String> params)", "testcase": false, "constructor": true}, {"identifier": "getDataSource", "parameters": "()", "modifiers": "@NonNull public", "return": "DataSource", "signature": "DataSource getDataSource()", "full_signature": "@NonNull public DataSource getDataSource()", "class_method_signature": "DataSet.getDataSource()", "testcase": false, "constructor": false}, {"identifier": "getKind", "parameters": "()", "modifiers": "@NonNull public", "return": "Kind", "signature": "Kind getKind()", "full_signature": "@NonNull public Kind getKind()", "class_method_signature": "DataSet.getKind()", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "()", "modifiers": "@Override public", "return": "SortedMap<String, String>", "signature": "SortedMap<String, String> getParams()", "full_signature": "@Override public SortedMap<String, String> getParams()", "class_method_signature": "DataSet.getParams()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DataSet.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(DataSet that)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(DataSet that)", "full_signature": "private boolean equals(DataSet that)", "class_method_signature": "DataSet.equals(DataSet that)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DataSet.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DataSet.toString()", "testcase": false, "constructor": false}, {"identifier": "toBuilder", "parameters": "(@NonNull Kind kind)", "modifiers": "@NonNull public", "return": "Builder", "signature": "Builder toBuilder(@NonNull Kind kind)", "full_signature": "@NonNull public Builder toBuilder(@NonNull Kind kind)", "class_method_signature": "DataSet.toBuilder(@NonNull Kind kind)", "testcase": false, "constructor": false}, {"identifier": "toBean", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "DataSetBean", "signature": "DataSetBean toBean()", "full_signature": "@VisibleForTesting DataSetBean toBean()", "class_method_signature": "DataSet.toBean()", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(@NonNull DataSource dataSource, @NonNull Kind kind)", "modifiers": "@NonNull public static", "return": "DataSet", "signature": "DataSet of(@NonNull DataSource dataSource, @NonNull Kind kind)", "full_signature": "@NonNull public static DataSet of(@NonNull DataSource dataSource, @NonNull Kind kind)", "class_method_signature": "DataSet.of(@NonNull DataSource dataSource, @NonNull Kind kind)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(@NonNull DataSource dataSource, @NonNull Kind kind, @NonNull String key, @NonNull String value)", "modifiers": "@NonNull public static", "return": "DataSet", "signature": "DataSet of(@NonNull DataSource dataSource, @NonNull Kind kind, @NonNull String key, @NonNull String value)", "full_signature": "@NonNull public static DataSet of(@NonNull DataSource dataSource, @NonNull Kind kind, @NonNull String key, @NonNull String value)", "class_method_signature": "DataSet.of(@NonNull DataSource dataSource, @NonNull Kind kind, @NonNull String key, @NonNull String value)", "testcase": false, "constructor": false}, {"identifier": "deepCopyOf", "parameters": "(@NonNull DataSource dataSource, @NonNull Kind kind, @NonNull Map<String, String> params)", "modifiers": "@NonNull public static", "return": "DataSet", "signature": "DataSet deepCopyOf(@NonNull DataSource dataSource, @NonNull Kind kind, @NonNull Map<String, String> params)", "full_signature": "@NonNull public static DataSet deepCopyOf(@NonNull DataSource dataSource, @NonNull Kind kind, @NonNull Map<String, String> params)", "class_method_signature": "DataSet.deepCopyOf(@NonNull DataSource dataSource, @NonNull Kind kind, @NonNull Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(@NonNull DataSource dataSource, @NonNull Kind kind)", "modifiers": "@NonNull public static", "return": "Builder", "signature": "Builder builder(@NonNull DataSource dataSource, @NonNull Kind kind)", "full_signature": "@NonNull public static Builder builder(@NonNull DataSource dataSource, @NonNull Kind kind)", "class_method_signature": "DataSet.builder(@NonNull DataSource dataSource, @NonNull Kind kind)", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(@NonNull DataSet dataSet, @NonNull Kind kind)", "modifiers": "@Deprecated @NonNull public static", "return": "Builder", "signature": "Builder builder(@NonNull DataSet dataSet, @NonNull Kind kind)", "full_signature": "@Deprecated @NonNull public static Builder builder(@NonNull DataSet dataSet, @NonNull Kind kind)", "class_method_signature": "DataSet.builder(@NonNull DataSet dataSet, @NonNull Kind kind)", "testcase": false, "constructor": false}, {"identifier": "xmlFormatter", "parameters": "(boolean formattedOutput)", "modifiers": "public static", "return": "Formatters.@NonNull Formatter<DataSet>", "signature": "Formatters.@NonNull Formatter<DataSet> xmlFormatter(boolean formattedOutput)", "full_signature": "public static Formatters.@NonNull Formatter<DataSet> xmlFormatter(boolean formattedOutput)", "class_method_signature": "DataSet.xmlFormatter(boolean formattedOutput)", "testcase": false, "constructor": false}, {"identifier": "xmlParser", "parameters": "()", "modifiers": "public static", "return": "Parsers.@NonNull Parser<DataSet>", "signature": "Parsers.@NonNull Parser<DataSet> xmlParser()", "full_signature": "public static Parsers.@NonNull Parser<DataSet> xmlParser()", "class_method_signature": "DataSet.xmlParser()", "testcase": false, "constructor": false}, {"identifier": "uriFormatter", "parameters": "()", "modifiers": "public static", "return": "Formatters.@NonNull Formatter<DataSet>", "signature": "Formatters.@NonNull Formatter<DataSet> uriFormatter()", "full_signature": "public static Formatters.@NonNull Formatter<DataSet> uriFormatter()", "class_method_signature": "DataSet.uriFormatter()", "testcase": false, "constructor": false}, {"identifier": "uriParser", "parameters": "()", "modifiers": "public static", "return": "Parsers.@NonNull Parser<DataSet>", "signature": "Parsers.@NonNull Parser<DataSet> uriParser()", "full_signature": "public static Parsers.@NonNull Parser<DataSet> uriParser()", "class_method_signature": "DataSet.uriParser()", "testcase": false, "constructor": false}, {"identifier": "formatAsUri", "parameters": "(DataSet value)", "modifiers": "private static", "return": "CharSequence", "signature": "CharSequence formatAsUri(DataSet value)", "full_signature": "private static CharSequence formatAsUri(DataSet value)", "class_method_signature": "DataSet.formatAsUri(DataSet value)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/DataSet.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        return Objects.hash(dataSource, kind, params);\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DataSet.hashCode()", "testcase": false, "constructor": false, "invocations": ["hash"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}