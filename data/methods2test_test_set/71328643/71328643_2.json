{"test_class": {"identifier": "SecurityServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource\n    private UserRepository userRepository;", "modifier": "@Resource\n    private", "type": "UserRepository", "declarator": "userRepository", "var_name": "userRepository"}, {"original_string": "@Resource\n    private PageRepository pageRepository;", "modifier": "@Resource\n    private", "type": "PageRepository", "declarator": "pageRepository", "var_name": "pageRepository"}, {"original_string": "@Resource\n    private ModuleRepository moduleRepository;", "modifier": "@Resource\n    private", "type": "ModuleRepository", "declarator": "moduleRepository", "var_name": "moduleRepository"}, {"original_string": "@Autowired\n    private SecurityService securityService;", "modifier": "@Autowired\n    private", "type": "SecurityService", "declarator": "securityService", "var_name": "securityService"}], "file": "abixen-platform-core/src/test/java/com/abixen/platform/core/application/service/SecurityServiceTest.java"}, "test_case": {"identifier": "userAdminHasPermissionToEditModule", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n    @Test\n    public void userAdminHasPermissionToEditModule() {\n        log.debug(\"userAdminHasPermissionToEditModule()\");\n        User admin = userRepository.findOne(1L);\n        Module module = moduleRepository.findOne(2L);\n        Boolean hasPermission = securityService.hasUserPermissionToObject(admin, PermissionName.MODULE_EDIT, module);\n\n        assertTrue(hasPermission);\n    }", "signature": "void userAdminHasPermissionToEditModule()", "full_signature": "@Ignore @Test public void userAdminHasPermissionToEditModule()", "class_method_signature": "SecurityServiceTest.userAdminHasPermissionToEditModule()", "testcase": true, "constructor": false, "invocations": ["debug", "findOne", "findOne", "hasUserPermissionToObject", "assertTrue"]}, "focal_class": {"identifier": "SecurityService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final UserService userService;", "modifier": "private final", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "private final AclEntryService aclEntryService;", "modifier": "private final", "type": "AclEntryService", "declarator": "aclEntryService", "var_name": "aclEntryService"}], "methods": [{"identifier": "SecurityService", "parameters": "(UserService userService,\n                           AclEntryService aclEntryService)", "modifiers": "@Autowired public", "return": "", "signature": " SecurityService(UserService userService,\n                           AclEntryService aclEntryService)", "full_signature": "@Autowired public  SecurityService(UserService userService,\n                           AclEntryService aclEntryService)", "class_method_signature": "SecurityService.SecurityService(UserService userService,\n                           AclEntryService aclEntryService)", "testcase": false, "constructor": true}, {"identifier": "hasUserPermissionToObject", "parameters": "(final User user, final PermissionName permissionName, final SecurableModel securableModel)", "modifiers": "public", "return": "Boolean", "signature": "Boolean hasUserPermissionToObject(final User user, final PermissionName permissionName, final SecurableModel securableModel)", "full_signature": "public Boolean hasUserPermissionToObject(final User user, final PermissionName permissionName, final SecurableModel securableModel)", "class_method_signature": "SecurityService.hasUserPermissionToObject(final User user, final PermissionName permissionName, final SecurableModel securableModel)", "testcase": false, "constructor": false}, {"identifier": "hasUserPermissionToClass", "parameters": "(User user, PermissionName permissionName, String domainCanonicalClassName)", "modifiers": "public", "return": "Boolean", "signature": "Boolean hasUserPermissionToClass(User user, PermissionName permissionName, String domainCanonicalClassName)", "full_signature": "public Boolean hasUserPermissionToClass(User user, PermissionName permissionName, String domainCanonicalClassName)", "class_method_signature": "SecurityService.hasUserPermissionToClass(User user, PermissionName permissionName, String domainCanonicalClassName)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizedUser", "parameters": "()", "modifiers": "public", "return": "PlatformUser", "signature": "PlatformUser getAuthorizedUser()", "full_signature": "public PlatformUser getAuthorizedUser()", "class_method_signature": "SecurityService.getAuthorizedUser()", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(String username, SecurableModel securibleObject, String permissionName)", "modifiers": "public", "return": "boolean", "signature": "boolean hasPermission(String username, SecurableModel securibleObject, String permissionName)", "full_signature": "public boolean hasPermission(String username, SecurableModel securibleObject, String permissionName)", "class_method_signature": "SecurityService.hasPermission(String username, SecurableModel securibleObject, String permissionName)", "testcase": false, "constructor": false}], "file": "abixen-platform-core/src/main/java/com/abixen/platform/core/application/service/SecurityService.java"}, "focal_method": {"identifier": "hasUserPermissionToObject", "parameters": "(final User user, final PermissionName permissionName, final SecurableModel securableModel)", "modifiers": "public", "return": "Boolean", "body": "public Boolean hasUserPermissionToObject(final User user, final PermissionName permissionName, final SecurableModel securableModel) {\n        if (user == null) {\n            throw new IllegalArgumentException(\"User can not be null.\");\n        }\n        if (permissionName == null) {\n            throw new IllegalArgumentException(\"Permission Name can not be null.\");\n        }\n        if (securableModel == null) {\n            throw new IllegalArgumentException(\"SecurableModel can not be null.\");\n        }\n\n        if (hasUserPermissionToClass(user, permissionName, securableModel.getClass().getCanonicalName())) {\n            return true;\n        }\n\n        final List<Long> userRoleIds = new ArrayList<>();\n        for (Role role : user.getRoles()) {\n            userRoleIds.add(role.getId());\n        }\n        final List<AclEntry> rolesAclEntries = aclEntryService.findAll(permissionName, AclSidType.ROLE, userRoleIds, AclClassName.getByName(securableModel.getClass().getCanonicalName()), securableModel.getId());\n\n        if (rolesAclEntries.size() > 0) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"User \" + user.getUsername() + \" has permission \" + permissionName + \" to object \" + securableModel.getClass().getCanonicalName() + \"[id=\" + securableModel.getId() + \"] based on the ACL security settings.\");\n            }\n            return true;\n        }\n\n        if (securableModel.getCreatedBy() != null && securableModel.getCreatedBy().getId().equals(user.getId())) {\n            List<AclEntry> ownerAclEntries = aclEntryService.findAll(permissionName, AclSidType.OWNER, 0L, AclClassName.getByName(securableModel.getClass().getCanonicalName()), securableModel.getId());\n            if (ownerAclEntries.size() > 0) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"User \" + user.getUsername() + \" has permission \" + permissionName + \" to object \" + securableModel.getClass().getCanonicalName() + \"[id=\" + securableModel.getId() + \"] based on that he is the owner.\");\n                }\n                return true;\n            }\n        }\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"User \" + user.getUsername() + \" has not permission \" + permissionName + \" to object \" + securableModel.getClass().getCanonicalName() + \"[id=\" + securableModel.getId() + \"].\");\n        }\n        return false;\n    }", "signature": "Boolean hasUserPermissionToObject(final User user, final PermissionName permissionName, final SecurableModel securableModel)", "full_signature": "public Boolean hasUserPermissionToObject(final User user, final PermissionName permissionName, final SecurableModel securableModel)", "class_method_signature": "SecurityService.hasUserPermissionToObject(final User user, final PermissionName permissionName, final SecurableModel securableModel)", "testcase": false, "constructor": false, "invocations": ["hasUserPermissionToClass", "getCanonicalName", "getClass", "getRoles", "add", "getId", "findAll", "getByName", "getCanonicalName", "getClass", "getId", "size", "isDebugEnabled", "debug", "getUsername", "getCanonicalName", "getClass", "getId", "getCreatedBy", "equals", "getId", "getCreatedBy", "getId", "findAll", "getByName", "getCanonicalName", "getClass", "getId", "size", "isDebugEnabled", "debug", "getUsername", "getCanonicalName", "getClass", "getId", "isDebugEnabled", "debug", "getUsername", "getCanonicalName", "getClass", "getId"]}, "repository": {"repo_id": 71328643, "url": "https://github.com/abixen/abixen-platform", "language": "Java", "is_fork": false, "fork_count": 186, "stargazer_count": 527, "size": 82130, "license": "licensed"}}