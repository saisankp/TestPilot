{"test_class": {"identifier": "SlideWindowDependencyTest", "superclass": "", "interfaces": "", "fields": [], "file": "status-core/src/test/java/com/indeed/status/core/SlideWindowDependencyTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws Exception {\n        final AtomicDouble failedRatio = new AtomicDouble(0);\n        final AtomicLong time = new AtomicLong(System.currentTimeMillis());\n        final double errorRange = 0.0001;\n        final TestDependency testDependency = new TestDependency(failedRatio, time, 0.05, 0.1, 0.2, 600 * 1000);\n        // Test OK\n        CheckResult checkResult = testDependency.call();\n        assertEquals(CheckStatus.OK, checkResult.getStatus());\n        assertEquals(0, Double.valueOf(checkResult.getErrorMessage()), errorRange);\n        // Test MINOR\n        failedRatio.set(0.12);\n        time.addAndGet(100 * 1000);\n        checkResult = testDependency.call();\n        assertEquals(CheckStatus.MINOR, checkResult.getStatus());\n        assertEquals(0.06, Double.valueOf(checkResult.getErrorMessage()), errorRange);\n        // Test MAJOR\n        failedRatio.set(0.24);\n        time.addAndGet(100 * 1000);\n        checkResult = testDependency.call();\n        assertEquals(CheckStatus.MAJOR, checkResult.getStatus());\n        assertEquals(0.12, Double.valueOf(checkResult.getErrorMessage()), errorRange);\n        // Test OUTAGE\n        failedRatio.set(0.48);\n        time.addAndGet(200 * 1000);\n        checkResult = testDependency.call();\n        assertEquals(CheckStatus.OUTAGE, checkResult.getStatus());\n        assertEquals(0.24, Double.valueOf(checkResult.getErrorMessage()), errorRange);\n        // Test ping throw Exception\n        failedRatio.set(100);\n        time.addAndGet(100 * 1000);\n        checkResult = testDependency.call();\n        assertEquals(CheckStatus.OUTAGE, checkResult.getStatus());\n        assertEquals(0.34, Double.valueOf(checkResult.getErrorMessage()), errorRange);\n        // Remove one point\n        failedRatio.set(0.48);\n        time.addAndGet(100 * 1000);\n        checkResult = testDependency.call();\n        assertEquals(CheckStatus.OUTAGE, checkResult.getStatus());\n        assertEquals(0.476, Double.valueOf(checkResult.getErrorMessage()), errorRange);\n        // Remove two point\n        failedRatio.set(0);\n        time.addAndGet(200 * 1000);\n        checkResult = testDependency.call();\n        assertEquals(CheckStatus.OUTAGE, checkResult.getStatus());\n        assertEquals(0.49, Double.valueOf(checkResult.getErrorMessage()), errorRange);\n        // Remove all points and add a new one.\n        failedRatio.set(0.04);\n        time.addAndGet(700 * 1000);\n        checkResult = testDependency.call();\n        assertEquals(CheckStatus.OK, checkResult.getStatus());\n        assertEquals(0.04, Double.valueOf(checkResult.getErrorMessage()), errorRange);\n        // Test recalculate\n        failedRatio.set(0.15);\n        time.addAndGet(10000 * 1000);\n        checkResult = testDependency.call();\n        assertEquals(CheckStatus.MAJOR, checkResult.getStatus());\n        assertEquals(0.15, Double.valueOf(checkResult.getErrorMessage()), errorRange);\n        // Test recalculate with multiple points.\n        failedRatio.set(0.1);\n        time.addAndGet(3400 * 1000);\n        testDependency.call();\n        failedRatio.set(0.1);\n        time.addAndGet(100 * 1000);\n        testDependency.call();\n        failedRatio.set(0.5);\n        time.addAndGet(300 * 1000);\n        checkResult = testDependency.call();\n        assertEquals(CheckStatus.OUTAGE, checkResult.getStatus());\n        assertEquals(0.25, Double.valueOf(checkResult.getErrorMessage()), errorRange);\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "SlideWindowDependencyTest.test()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "call", "assertEquals", "getStatus", "assertEquals", "valueOf", "getErrorMessage", "set", "addAndGet", "call", "assertEquals", "getStatus", "assertEquals", "valueOf", "getErrorMessage", "set", "addAndGet", "call", "assertEquals", "getStatus", "assertEquals", "valueOf", "getErrorMessage", "set", "addAndGet", "call", "assertEquals", "getStatus", "assertEquals", "valueOf", "getErrorMessage", "set", "addAndGet", "call", "assertEquals", "getStatus", "assertEquals", "valueOf", "getErrorMessage", "set", "addAndGet", "call", "assertEquals", "getStatus", "assertEquals", "valueOf", "getErrorMessage", "set", "addAndGet", "call", "assertEquals", "getStatus", "assertEquals", "valueOf", "getErrorMessage", "set", "addAndGet", "call", "assertEquals", "getStatus", "assertEquals", "valueOf", "getErrorMessage", "set", "addAndGet", "call", "assertEquals", "getStatus", "assertEquals", "valueOf", "getErrorMessage", "set", "addAndGet", "call", "set", "addAndGet", "call", "set", "addAndGet", "call", "assertEquals", "getStatus", "assertEquals", "valueOf", "getErrorMessage"]}, "focal_class": {"identifier": "SlideWindowDependency", "superclass": "extends AbstractDependency", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(SlideWindowDependency.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(SlideWindowDependency.class)", "var_name": "LOG"}, {"original_string": "private final EventList eventList;", "modifier": "private final", "type": "EventList", "declarator": "eventList", "var_name": "eventList"}, {"original_string": "protected final double maxOK;", "modifier": "protected final", "type": "double", "declarator": "maxOK", "var_name": "maxOK"}, {"original_string": "protected final double maxMinor;", "modifier": "protected final", "type": "double", "declarator": "maxMinor", "var_name": "maxMinor"}, {"original_string": "protected final double maxMajor;", "modifier": "protected final", "type": "double", "declarator": "maxMajor", "var_name": "maxMajor"}], "methods": [{"identifier": "SlideWindowDependency", "parameters": "(final String id,\n                                    final String description,\n                                    final long timeout,\n                                    final long pingPeriod,\n                                    final Urgency urgency,\n                                    final double maxOK,\n                                    final double maxMinor,\n                                    final double maxMajor,\n                                    final long timeInterval)", "modifiers": "protected", "return": "", "signature": " SlideWindowDependency(final String id,\n                                    final String description,\n                                    final long timeout,\n                                    final long pingPeriod,\n                                    final Urgency urgency,\n                                    final double maxOK,\n                                    final double maxMinor,\n                                    final double maxMajor,\n                                    final long timeInterval)", "full_signature": "protected  SlideWindowDependency(final String id,\n                                    final String description,\n                                    final long timeout,\n                                    final long pingPeriod,\n                                    final Urgency urgency,\n                                    final double maxOK,\n                                    final double maxMinor,\n                                    final double maxMajor,\n                                    final long timeInterval)", "class_method_signature": "SlideWindowDependency.SlideWindowDependency(final String id,\n                                    final String description,\n                                    final long timeout,\n                                    final long pingPeriod,\n                                    final Urgency urgency,\n                                    final double maxOK,\n                                    final double maxMinor,\n                                    final double maxMajor,\n                                    final long timeInterval)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "CheckResult", "signature": "CheckResult call()", "full_signature": "@Override public CheckResult call()", "class_method_signature": "SlideWindowDependency.call()", "testcase": false, "constructor": false}, {"identifier": "ping", "parameters": "()", "modifiers": "protected abstract", "return": "double", "signature": "double ping()", "full_signature": "protected abstract double ping()", "class_method_signature": "SlideWindowDependency.ping()", "testcase": false, "constructor": false}, {"identifier": "formatErrorMessage", "parameters": "(long timeInterval, double failedRatio)", "modifiers": "protected abstract", "return": "String", "signature": "String formatErrorMessage(long timeInterval, double failedRatio)", "full_signature": "protected abstract String formatErrorMessage(long timeInterval, double failedRatio)", "class_method_signature": "SlideWindowDependency.formatErrorMessage(long timeInterval, double failedRatio)", "testcase": false, "constructor": false}, {"identifier": "pingWrapper", "parameters": "()", "modifiers": "protected", "return": "Event", "signature": "Event pingWrapper()", "full_signature": "protected Event pingWrapper()", "class_method_signature": "SlideWindowDependency.pingWrapper()", "testcase": false, "constructor": false}], "file": "status-core/src/main/java/com/indeed/status/core/SlideWindowDependency.java"}, "focal_method": {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "CheckResult", "body": "@Override\n    public CheckResult call() throws Exception {\n        final long start = System.currentTimeMillis();\n        final double averageFailedRatio = eventList.addEvent(pingWrapper());\n        final CheckStatus status;\n        if (averageFailedRatio < maxOK) {\n            status = CheckStatus.OK;\n        } else if (averageFailedRatio < maxMinor) {\n            status = CheckStatus.MINOR;\n        } else if (averageFailedRatio < maxMajor) {\n            status = CheckStatus.MAJOR;\n        } else {\n            status = CheckStatus.OUTAGE;\n        }\n        final long duration = System.currentTimeMillis() - start;\n        final String errorMessage = formatErrorMessage(eventList.timeInterval, averageFailedRatio);\n        return CheckResult.newBuilder(this, status, errorMessage)\n                .setTimestamp(start)\n                .setDuration(duration)\n                .build();\n    }", "signature": "CheckResult call()", "full_signature": "@Override public CheckResult call()", "class_method_signature": "SlideWindowDependency.call()", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "addEvent", "pingWrapper", "currentTimeMillis", "formatErrorMessage", "build", "setDuration", "setTimestamp", "newBuilder"]}, "repository": {"repo_id": 15592774, "url": "https://github.com/indeedeng/status", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 17, "size": 467, "license": "licensed"}}