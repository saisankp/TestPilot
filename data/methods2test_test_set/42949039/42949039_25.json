{"test_class": {"identifier": "HerdFileUtilsTest", "superclass": "extends AbstractCoreTest", "interfaces": "", "fields": [{"original_string": "private Path localTempPath;", "modifier": "private", "type": "Path", "declarator": "localTempPath", "var_name": "localTempPath"}], "file": "herd-code/herd-core/src/test/java/org/finra/herd/core/HerdFileUtilsTest.java"}, "test_case": {"identifier": "testVerifyFileExistsAndReadableFileIsDirectory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVerifyFileExistsAndReadableFileIsDirectory() throws IOException\n    {\n        File testDirectory = localTempPath.toFile();\n        try\n        {\n            HerdFileUtils.verifyFileExistsAndReadable(testDirectory);\n            fail(\"Should throw an IllegalArgumentException when argument is a directory.\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            assertEquals(String.format(\"File \\\"%s\\\" is not a valid file that can be read as a manifest. Is it a directory?\", testDirectory.getName()),\n                e.getMessage());\n        }\n    }", "signature": "void testVerifyFileExistsAndReadableFileIsDirectory()", "full_signature": "@Test public void testVerifyFileExistsAndReadableFileIsDirectory()", "class_method_signature": "HerdFileUtilsTest.testVerifyFileExistsAndReadableFileIsDirectory()", "testcase": true, "constructor": false, "invocations": ["toFile", "verifyFileExistsAndReadable", "fail", "assertEquals", "format", "getName", "getMessage"]}, "focal_class": {"identifier": "HerdFileUtils", "superclass": "extends FileUtils", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HerdFileUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HerdFileUtils.class)", "var_name": "LOGGER"}, {"original_string": "public static final long BYTES_PER_GB = 1073741824L;", "modifier": "public static final", "type": "long", "declarator": "BYTES_PER_GB = 1073741824L", "var_name": "BYTES_PER_GB"}], "methods": [{"identifier": "verifyFileExistsAndReadable", "parameters": "(File file)", "modifiers": "public static", "return": "void", "signature": "void verifyFileExistsAndReadable(File file)", "full_signature": "public static void verifyFileExistsAndReadable(File file)", "class_method_signature": "HerdFileUtils.verifyFileExistsAndReadable(File file)", "testcase": false, "constructor": false}, {"identifier": "cleanDirectoryIgnoreException", "parameters": "(File directory)", "modifiers": "public static", "return": "void", "signature": "void cleanDirectoryIgnoreException(File directory)", "full_signature": "public static void cleanDirectoryIgnoreException(File directory)", "class_method_signature": "HerdFileUtils.cleanDirectoryIgnoreException(File directory)", "testcase": false, "constructor": false}, {"identifier": "deleteDirectoryIgnoreException", "parameters": "(File directory)", "modifiers": "public static", "return": "void", "signature": "void deleteDirectoryIgnoreException(File directory)", "full_signature": "public static void deleteDirectoryIgnoreException(File directory)", "class_method_signature": "HerdFileUtils.deleteDirectoryIgnoreException(File directory)", "testcase": false, "constructor": false}, {"identifier": "deleteFileIgnoreException", "parameters": "(File file)", "modifiers": "public static", "return": "void", "signature": "void deleteFileIgnoreException(File file)", "full_signature": "public static void deleteFileIgnoreException(File file)", "class_method_signature": "HerdFileUtils.deleteFileIgnoreException(File file)", "testcase": false, "constructor": false}], "file": "herd-code/herd-core/src/main/java/org/finra/herd/core/HerdFileUtils.java"}, "focal_method": {"identifier": "verifyFileExistsAndReadable", "parameters": "(File file)", "modifiers": "public static", "return": "void", "body": "public static void verifyFileExistsAndReadable(File file)\n    {\n        if (!file.exists())\n        {\n            throw new IllegalArgumentException(\"File \\\"\" + file.getName() + \"\\\" doesn't exist.\");\n        }\n        if (!file.isFile())\n        {\n            throw new IllegalArgumentException(\"File \\\"\" + file.getName() + \"\\\" is not a valid file that can be read as a manifest. Is it a directory?\");\n        }\n        if (!file.canRead())\n        {\n            throw new IllegalArgumentException(\"Unable to read file \\\"\" + file.getName() + \"\\\". Check permissions.\");\n        }\n    }", "signature": "void verifyFileExistsAndReadable(File file)", "full_signature": "public static void verifyFileExistsAndReadable(File file)", "class_method_signature": "HerdFileUtils.verifyFileExistsAndReadable(File file)", "testcase": false, "constructor": false, "invocations": ["exists", "getName", "isFile", "getName", "canRead", "getName"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}