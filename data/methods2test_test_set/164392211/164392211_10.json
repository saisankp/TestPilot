{"test_class": {"identifier": "TableSaverTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/TableSaverTest.java"}, "test_case": {"identifier": "testCreateSaveStrategy_Default", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateSaveStrategy_Default() {\n        TableSaver saver = new TableSaver(mock(DefaultJdbcConnector.class), TableFQName.forName(\"xt\"));\n\n        assertEquals(SaveViaInsert.class, saver.createSaveStrategy().getClass());\n    }", "signature": "void testCreateSaveStrategy_Default()", "full_signature": "@Test public void testCreateSaveStrategy_Default()", "class_method_signature": "TableSaverTest.testCreateSaveStrategy_Default()", "testcase": true, "constructor": false, "invocations": ["mock", "forName", "assertEquals", "getClass", "createSaveStrategy"]}, "focal_class": {"identifier": "TableSaver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TableSaver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TableSaver.class)", "var_name": "LOGGER"}, {"original_string": "protected JdbcConnector connector;", "modifier": "protected", "type": "JdbcConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private TableFQName tableName;", "modifier": "private", "type": "TableFQName", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "private boolean deleteTableData;", "modifier": "private", "type": "boolean", "declarator": "deleteTableData", "var_name": "deleteTableData"}, {"original_string": "private boolean deleteUnmatchedRows;", "modifier": "private", "type": "boolean", "declarator": "deleteUnmatchedRows", "var_name": "deleteUnmatchedRows"}, {"original_string": "private boolean mergeByPk;", "modifier": "private", "type": "boolean", "declarator": "mergeByPk", "var_name": "mergeByPk"}, {"original_string": "private String[] mergeByColumns;", "modifier": "private", "type": "String[]", "declarator": "mergeByColumns", "var_name": "mergeByColumns"}], "methods": [{"identifier": "TableSaver", "parameters": "(JdbcConnector connector, TableFQName tableName)", "modifiers": "public", "return": "", "signature": " TableSaver(JdbcConnector connector, TableFQName tableName)", "full_signature": "public  TableSaver(JdbcConnector connector, TableFQName tableName)", "class_method_signature": "TableSaver.TableSaver(JdbcConnector connector, TableFQName tableName)", "testcase": false, "constructor": true}, {"identifier": "deleteTableData", "parameters": "()", "modifiers": "public", "return": "TableSaver", "signature": "TableSaver deleteTableData()", "full_signature": "public TableSaver deleteTableData()", "class_method_signature": "TableSaver.deleteTableData()", "testcase": false, "constructor": false}, {"identifier": "deleteUnmatchedRows", "parameters": "()", "modifiers": "public", "return": "TableSaver", "signature": "TableSaver deleteUnmatchedRows()", "full_signature": "public TableSaver deleteUnmatchedRows()", "class_method_signature": "TableSaver.deleteUnmatchedRows()", "testcase": false, "constructor": false}, {"identifier": "mergeByPk", "parameters": "()", "modifiers": "public", "return": "TableSaver", "signature": "TableSaver mergeByPk()", "full_signature": "public TableSaver mergeByPk()", "class_method_signature": "TableSaver.mergeByPk()", "testcase": false, "constructor": false}, {"identifier": "mergeByColumns", "parameters": "(String... columns)", "modifiers": "public", "return": "TableSaver", "signature": "TableSaver mergeByColumns(String... columns)", "full_signature": "public TableSaver mergeByColumns(String... columns)", "class_method_signature": "TableSaver.mergeByColumns(String... columns)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(DataFrame df)", "modifiers": "public", "return": "SaveStats", "signature": "SaveStats save(DataFrame df)", "full_signature": "public SaveStats save(DataFrame df)", "class_method_signature": "TableSaver.save(DataFrame df)", "testcase": false, "constructor": false}, {"identifier": "createSaveStrategy", "parameters": "()", "modifiers": "protected", "return": "TableSaveStrategy", "signature": "TableSaveStrategy createSaveStrategy()", "full_signature": "protected TableSaveStrategy createSaveStrategy()", "class_method_signature": "TableSaver.createSaveStrategy()", "testcase": false, "constructor": false}, {"identifier": "getPkColumns", "parameters": "()", "modifiers": "protected", "return": "String[]", "signature": "String[] getPkColumns()", "full_signature": "protected String[] getPkColumns()", "class_method_signature": "TableSaver.getPkColumns()", "testcase": false, "constructor": false}], "file": "dflib-jdbc/src/main/java/com/nhl/dflib/jdbc/connector/TableSaver.java"}, "focal_method": {"identifier": "createSaveStrategy", "parameters": "()", "modifiers": "protected", "return": "TableSaveStrategy", "body": "protected TableSaveStrategy createSaveStrategy() {\n        \n        // if delete is in effect, we don't need the UPDATE part of \"UPSERT\"\n        if (deleteTableData) {\n            return new SaveViaDeleteThenInsert(connector, tableName);\n        }\n\n        if (!mergeByPk && mergeByColumns == null) {\n            return new SaveViaInsert(connector, tableName);\n        }\n\n        String[] keyColumns = mergeByPk ? getPkColumns() : mergeByColumns;\n        return deleteUnmatchedRows\n                ? new FullSync(connector, tableName, keyColumns)\n                : new SaveViaUpsert(connector, tableName, keyColumns);\n    }", "signature": "TableSaveStrategy createSaveStrategy()", "full_signature": "protected TableSaveStrategy createSaveStrategy()", "class_method_signature": "TableSaver.createSaveStrategy()", "testcase": false, "constructor": false, "invocations": ["getPkColumns"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}