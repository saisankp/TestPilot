{"test_class": {"identifier": "TestWebHookSecurityInterceptor", "superclass": "", "interfaces": "", "fields": [], "file": "mailjimp-webhook/src/test/java/mailjimp/webhook/TestWebHookSecurityInterceptor.java"}, "test_case": {"identifier": "testPreHandle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPreHandle() throws Exception {\n    MyTestWebHookAdapter adapter = new MyTestWebHookAdapter();\n    WebHookSecurityInterceptor interceptor = new WebHookSecurityInterceptor();\n    // set the adapter like spring would do.\n    Field field = WebHookSecurityInterceptor.class.getDeclaredField(\"webHookAdapter\");\n    field.setAccessible(true);\n    field.set(interceptor, adapter);\n    field.setAccessible(false);\n    // call the interceptor.\n    interceptor.preHandle(new MockHttpServletRequest(), new MockHttpServletResponse(), null);\n    // all we have to check is if the adapter was called.\n    assertTrue(adapter.wasCalled(\"isValidRequest\"));\n  }", "signature": "void testPreHandle()", "full_signature": "@Test public void testPreHandle()", "class_method_signature": "TestWebHookSecurityInterceptor.testPreHandle()", "testcase": true, "constructor": false, "invocations": ["getDeclaredField", "setAccessible", "set", "setAccessible", "preHandle", "assertTrue", "wasCalled"]}, "focal_class": {"identifier": "WebHookSecurityInterceptor", "superclass": "extends HandlerInterceptorAdapter", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private IWebHookAdapter webHookAdapter;", "modifier": "@Autowired\n  private", "type": "IWebHookAdapter", "declarator": "webHookAdapter", "var_name": "webHookAdapter"}], "methods": [{"identifier": "preHandle", "parameters": "(HttpServletRequest request, HttpServletResponse response, Object handler)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)", "full_signature": "@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)", "class_method_signature": "WebHookSecurityInterceptor.preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)", "testcase": false, "constructor": false}], "file": "mailjimp-webhook/src/main/java/mailjimp/webhook/WebHookSecurityInterceptor.java"}, "focal_method": {"identifier": "preHandle", "parameters": "(HttpServletRequest request, HttpServletResponse response, Object handler)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n    return webHookAdapter.isValidRequest(request);\n  }", "signature": "boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)", "full_signature": "@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)", "class_method_signature": "WebHookSecurityInterceptor.preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)", "testcase": false, "constructor": false, "invocations": ["isValidRequest"]}, "repository": {"repo_id": 781084, "url": "https://github.com/limone/MailJimp", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 28, "size": 646, "license": "licensed"}}