{"test_class": {"identifier": "LicenseKnowledgeBaseResolverTest", "superclass": "extends AntennaTestWithMockedContext", "interfaces": "", "fields": [{"original_string": "@Mock\n    ILicenseManagementKnowledgeBase knowledgeBaseMock = mock(ILicenseManagementKnowledgeBase.class);", "modifier": "@Mock", "type": "ILicenseManagementKnowledgeBase", "declarator": "knowledgeBaseMock = mock(ILicenseManagementKnowledgeBase.class)", "var_name": "knowledgeBaseMock"}, {"original_string": "@Mock\n    LicenseKnowledgeBaseFactory supplierMock = mock(LicenseKnowledgeBaseFactory.class);", "modifier": "@Mock", "type": "LicenseKnowledgeBaseFactory", "declarator": "supplierMock = mock(LicenseKnowledgeBaseFactory.class)", "var_name": "supplierMock"}, {"original_string": "LicenseKnowledgeBaseResolver knowledgeBaseResolver;", "modifier": "", "type": "LicenseKnowledgeBaseResolver", "declarator": "knowledgeBaseResolver", "var_name": "knowledgeBaseResolver"}, {"original_string": "private static final String LICENSE_ID = \"license id\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE_ID = \"license id\"", "var_name": "LICENSE_ID"}, {"original_string": "private static final String LICENSE_NAME = \"configured license name\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE_NAME = \"configured license name\"", "var_name": "LICENSE_NAME"}, {"original_string": "private static final String LICENSE_TEXT = \"configured license text\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE_TEXT = \"configured license text\"", "var_name": "LICENSE_TEXT"}, {"original_string": "private static final String LICENSE_THREAT_GROUP = \"configured threat group\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE_THREAT_GROUP = \"configured threat group\"", "var_name": "LICENSE_THREAT_GROUP"}, {"original_string": "private static final String LICENSE_CLASSIFICATION = \"configured classification\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE_CLASSIFICATION = \"configured classification\"", "var_name": "LICENSE_CLASSIFICATION"}, {"original_string": "private static final String KB_LICENSE_ID = \"license kb id\";", "modifier": "private static final", "type": "String", "declarator": "KB_LICENSE_ID = \"license kb id\"", "var_name": "KB_LICENSE_ID"}, {"original_string": "private static final String KB_LICENSE_NAME = \"knowlegdebase license name\";", "modifier": "private static final", "type": "String", "declarator": "KB_LICENSE_NAME = \"knowlegdebase license name\"", "var_name": "KB_LICENSE_NAME"}, {"original_string": "private static final String KB_LICENSE_TEXT = \"knowledgebase license text\";", "modifier": "private static final", "type": "String", "declarator": "KB_LICENSE_TEXT = \"knowledgebase license text\"", "var_name": "KB_LICENSE_TEXT"}, {"original_string": "private static final String KB_LICENSE_THREAT_GROUP = \"any threat group\";", "modifier": "private static final", "type": "String", "declarator": "KB_LICENSE_THREAT_GROUP = \"any threat group\"", "var_name": "KB_LICENSE_THREAT_GROUP"}, {"original_string": "private static final String KB_LICENSE_CLASSIFICATION = \"any classification\";", "modifier": "private static final", "type": "String", "declarator": "KB_LICENSE_CLASSIFICATION = \"any classification\"", "var_name": "KB_LICENSE_CLASSIFICATION"}], "file": "core/core-workflow-steps/src/test/java/org/eclipse/sw360/antenna/workflow/processors/LicenseKnowledgeBaseResolverTest.java"}, "test_case": {"identifier": "testArtifactWithUnknownLicense", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testArtifactWithUnknownLicense() {\n        String licenseName = \"Unknown license\";\n        License license = new License();\n        license.setId(licenseName);\n        \n        Artifact artifact = new Artifact();\n        artifact.addFact(new ConfiguredLicenseInformation(license));\n\n        knowledgeBaseResolver.process(Collections.singletonList(artifact));\n\n        final Collection<License> finalLicenses = ArtifactLicenseUtils.getFinalLicenses(artifact).getLicenses();\n        assertThat(finalLicenses.size()).isEqualTo(1);\n        assertThat(finalLicenses.stream()\n                .findAny()).hasValueSatisfying(l -> {\n                    assertThat(l.getId()).isEqualTo(licenseName);\n                    assertThat(l.getCommonName()).isBlank();\n                    assertThat(l.getText()).isBlank();\n                    assertThat(l.getThreatGroup()).isNotPresent();\n                    assertThat(l.getClassification()).isNotPresent();\n        });\n    }", "signature": "void testArtifactWithUnknownLicense()", "full_signature": "@Test public void testArtifactWithUnknownLicense()", "class_method_signature": "LicenseKnowledgeBaseResolverTest.testArtifactWithUnknownLicense()", "testcase": true, "constructor": false, "invocations": ["setId", "addFact", "process", "singletonList", "getLicenses", "getFinalLicenses", "isEqualTo", "assertThat", "size", "hasValueSatisfying", "assertThat", "findAny", "stream", "isEqualTo", "assertThat", "getId", "isBlank", "assertThat", "getCommonName", "isBlank", "assertThat", "getText", "isNotPresent", "assertThat", "getThreatGroup", "isNotPresent", "assertThat", "getClassification"]}, "focal_class": {"identifier": "LicenseKnowledgeBaseResolver", "superclass": "extends AbstractProcessor", "interfaces": "", "fields": [{"original_string": "private static final String CHOSEN_LICENSE_MANAGER_KEY = \"chosen.license.manager\";", "modifier": "private static final", "type": "String", "declarator": "CHOSEN_LICENSE_MANAGER_KEY = \"chosen.license.manager\"", "var_name": "CHOSEN_LICENSE_MANAGER_KEY"}, {"original_string": "private Supplier<List<ILicenseManagementKnowledgeBase>> knowledgeBaseSupplier;", "modifier": "private", "type": "Supplier<List<ILicenseManagementKnowledgeBase>>", "declarator": "knowledgeBaseSupplier", "var_name": "knowledgeBaseSupplier"}, {"original_string": "private ILicenseManagementKnowledgeBase knowledgeBase;", "modifier": "private", "type": "ILicenseManagementKnowledgeBase", "declarator": "knowledgeBase", "var_name": "knowledgeBase"}, {"original_string": "private String chosenManager;", "modifier": "private", "type": "String", "declarator": "chosenManager", "var_name": "chosenManager"}], "methods": [{"identifier": "LicenseKnowledgeBaseResolver", "parameters": "()", "modifiers": "public", "return": "", "signature": " LicenseKnowledgeBaseResolver()", "full_signature": "public  LicenseKnowledgeBaseResolver()", "class_method_signature": "LicenseKnowledgeBaseResolver.LicenseKnowledgeBaseResolver()", "testcase": false, "constructor": true}, {"identifier": "LicenseKnowledgeBaseResolver", "parameters": "(ILicenseManagementKnowledgeBase knowledgeBase)", "modifiers": "public", "return": "", "signature": " LicenseKnowledgeBaseResolver(ILicenseManagementKnowledgeBase knowledgeBase)", "full_signature": "public  LicenseKnowledgeBaseResolver(ILicenseManagementKnowledgeBase knowledgeBase)", "class_method_signature": "LicenseKnowledgeBaseResolver.LicenseKnowledgeBaseResolver(ILicenseManagementKnowledgeBase knowledgeBase)", "testcase": false, "constructor": true}, {"identifier": "LicenseKnowledgeBaseResolver", "parameters": "(ILicenseManagementKnowledgeBase knowledgeBase,\n                                        Supplier<List<ILicenseManagementKnowledgeBase>> supplier)", "modifiers": "public", "return": "", "signature": " LicenseKnowledgeBaseResolver(ILicenseManagementKnowledgeBase knowledgeBase,\n                                        Supplier<List<ILicenseManagementKnowledgeBase>> supplier)", "full_signature": "public  LicenseKnowledgeBaseResolver(ILicenseManagementKnowledgeBase knowledgeBase,\n                                        Supplier<List<ILicenseManagementKnowledgeBase>> supplier)", "class_method_signature": "LicenseKnowledgeBaseResolver.LicenseKnowledgeBaseResolver(ILicenseManagementKnowledgeBase knowledgeBase,\n                                        Supplier<List<ILicenseManagementKnowledgeBase>> supplier)", "testcase": false, "constructor": true}, {"identifier": "getKnowledgeBase", "parameters": "()", "modifiers": "public", "return": "ILicenseManagementKnowledgeBase", "signature": "ILicenseManagementKnowledgeBase getKnowledgeBase()", "full_signature": "public ILicenseManagementKnowledgeBase getKnowledgeBase()", "class_method_signature": "LicenseKnowledgeBaseResolver.getKnowledgeBase()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "Collection<Artifact>", "signature": "Collection<Artifact> process(Collection<Artifact> artifacts)", "full_signature": "@Override public Collection<Artifact> process(Collection<Artifact> artifacts)", "class_method_signature": "LicenseKnowledgeBaseResolver.process(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String,String> configMap)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String,String> configMap)", "full_signature": "@Override public void configure(Map<String,String> configMap)", "class_method_signature": "LicenseKnowledgeBaseResolver.configure(Map<String,String> configMap)", "testcase": false, "constructor": false}], "file": "core/core-workflow-steps/src/main/java/org/eclipse/sw360/antenna/workflow/processors/LicenseKnowledgeBaseResolver.java"}, "focal_method": {"identifier": "process", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "Collection<Artifact>", "body": "@Override\n    public Collection<Artifact> process(Collection<Artifact> artifacts) {\n        return new LicenseKnowledgeBaseResolverImpl(knowledgeBase).resolveKnowledgeBase(artifacts);\n    }", "signature": "Collection<Artifact> process(Collection<Artifact> artifacts)", "full_signature": "@Override public Collection<Artifact> process(Collection<Artifact> artifacts)", "class_method_signature": "LicenseKnowledgeBaseResolver.process(Collection<Artifact> artifacts)", "testcase": false, "constructor": false, "invocations": ["resolveKnowledgeBase"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}