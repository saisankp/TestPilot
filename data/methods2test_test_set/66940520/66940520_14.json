{"test_class": {"identifier": "NotesConverterServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NotesConverterService notesConverterService;", "modifier": "private", "type": "NotesConverterService", "declarator": "notesConverterService", "var_name": "notesConverterService"}, {"original_string": "private TrackerPreheat preheat;", "modifier": "private", "type": "TrackerPreheat", "declarator": "preheat", "var_name": "preheat"}, {"original_string": "private BeanRandomizer rnd;", "modifier": "private", "type": "BeanRandomizer", "declarator": "rnd", "var_name": "rnd"}], "file": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/converter/NotesConverterServiceTest.java"}, "test_case": {"identifier": "verifyConvertCommentsToNotes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyConvertCommentsToNotes()\n    {\n        List<Note> notes = rnd.randomObjects( Note.class, 10 );\n\n        final List<TrackedEntityComment> comments = notesConverterService.from( preheat, notes );\n\n        assertThat( comments, hasSize( 10 ) );\n\n        for ( Note note : notes )\n        {\n            assertNoteValues( comments.stream().filter( c -> c.getUid().equals( note.getNote() ) ).findFirst().get(),\n                note );\n        }\n    }", "signature": "void verifyConvertCommentsToNotes()", "full_signature": "@Test public void verifyConvertCommentsToNotes()", "class_method_signature": "NotesConverterServiceTest.verifyConvertCommentsToNotes()", "testcase": true, "constructor": false, "invocations": ["randomObjects", "from", "assertThat", "hasSize", "assertNoteValues", "get", "findFirst", "filter", "stream", "equals", "getUid", "getNote"]}, "focal_class": {"identifier": "NotesConverterService", "superclass": "", "interfaces": "implements TrackerConverterService<Note, TrackedEntityComment>", "fields": [], "methods": [{"identifier": "to", "parameters": "( TrackedEntityComment trackedEntityComment )", "modifiers": "@Override public", "return": "Note", "signature": "Note to( TrackedEntityComment trackedEntityComment )", "full_signature": "@Override public Note to( TrackedEntityComment trackedEntityComment )", "class_method_signature": "NotesConverterService.to( TrackedEntityComment trackedEntityComment )", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "( List<TrackedEntityComment> trackedEntityComments )", "modifiers": "@Override public", "return": "List<Note>", "signature": "List<Note> to( List<TrackedEntityComment> trackedEntityComments )", "full_signature": "@Override public List<Note> to( List<TrackedEntityComment> trackedEntityComments )", "class_method_signature": "NotesConverterService.to( List<TrackedEntityComment> trackedEntityComments )", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "( TrackerPreheat preheat, Note note )", "modifiers": "@Override public", "return": "TrackedEntityComment", "signature": "TrackedEntityComment from( TrackerPreheat preheat, Note note )", "full_signature": "@Override public TrackedEntityComment from( TrackerPreheat preheat, Note note )", "class_method_signature": "NotesConverterService.from( TrackerPreheat preheat, Note note )", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "( TrackerPreheat preheat, List<Note> notes )", "modifiers": "@Override public", "return": "List<TrackedEntityComment>", "signature": "List<TrackedEntityComment> from( TrackerPreheat preheat, List<Note> notes )", "full_signature": "@Override public List<TrackedEntityComment> from( TrackerPreheat preheat, List<Note> notes )", "class_method_signature": "NotesConverterService.from( TrackerPreheat preheat, List<Note> notes )", "testcase": false, "constructor": false}, {"identifier": "fromForRuleEngine", "parameters": "( TrackerPreheat preheat, Note object )", "modifiers": "@Override public", "return": "TrackedEntityComment", "signature": "TrackedEntityComment fromForRuleEngine( TrackerPreheat preheat, Note object )", "full_signature": "@Override public TrackedEntityComment fromForRuleEngine( TrackerPreheat preheat, Note object )", "class_method_signature": "NotesConverterService.fromForRuleEngine( TrackerPreheat preheat, Note object )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/NotesConverterService.java"}, "focal_method": {"identifier": "from", "parameters": "( TrackerPreheat preheat, Note note )", "modifiers": "@Override public", "return": "TrackedEntityComment", "body": "@Override\n    public TrackedEntityComment from( TrackerPreheat preheat, Note note )\n    {\n        TrackedEntityComment comment = new TrackedEntityComment();\n        comment.setUid( note.getNote() );\n        comment.setAutoFields();\n        comment.setCommentText( note.getValue() );\n\n        // FIXME: what about the storedBy and lastUpdatedBy -> currently they are set to\n        // null\n        return comment;\n    }", "signature": "TrackedEntityComment from( TrackerPreheat preheat, Note note )", "full_signature": "@Override public TrackedEntityComment from( TrackerPreheat preheat, Note note )", "class_method_signature": "NotesConverterService.from( TrackerPreheat preheat, Note note )", "testcase": false, "constructor": false, "invocations": ["setUid", "getNote", "setAutoFields", "setCommentText", "getValue"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}