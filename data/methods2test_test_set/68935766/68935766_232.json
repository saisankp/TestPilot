{"test_class": {"identifier": "TypingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TypeMirror mirror = mock(TypeMirror.class);", "modifier": "", "type": "TypeMirror", "declarator": "mirror = mock(TypeMirror.class)", "var_name": "mirror"}, {"original_string": "TypeMirror type = mock(TypeMirror.class);", "modifier": "", "type": "TypeMirror", "declarator": "type = mock(TypeMirror.class)", "var_name": "type"}, {"original_string": "TypeElement element = when(mock(TypeElement.class).asType()).thenReturn(type).getMock();", "modifier": "", "type": "TypeElement", "declarator": "element = when(mock(TypeElement.class).asType()).thenReturn(type).getMock()", "var_name": "element"}, {"original_string": "Elements elements = when(mock(Elements.class).getTypeElement(int.class.getName())).thenReturn(element).getMock();", "modifier": "", "type": "Elements", "declarator": "elements = when(mock(Elements.class).getTypeElement(int.class.getName())).thenReturn(element).getMock()", "var_name": "elements"}, {"original_string": "Types types = mock(Types.class);", "modifier": "", "type": "Types", "declarator": "types = mock(Types.class)", "var_name": "types"}, {"original_string": "Typing typing = new Typing(elements, types);", "modifier": "", "type": "Typing", "declarator": "typing = new Typing(elements, types)", "var_name": "typing"}], "file": "annotations/src/test/java/com/karuslabs/annotations/processor/TypingTest.java"}, "test_case": {"identifier": "specialize_classes", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void specialize_classes() {\n        var declared = mock(DeclaredType.class);\n        when(types.getDeclaredType(element, mirror)).thenReturn(declared);\n        \n        TypeElement string = when(mock(TypeElement.class).asType()).thenReturn(mirror).getMock();\n        when(elements.getTypeElement(String.class.getName())).thenReturn(string);\n        \n        assertEquals(declared, typing.specialize(int.class, String.class));\n    }", "signature": "void specialize_classes()", "full_signature": "@Test void specialize_classes()", "class_method_signature": "TypingTest.specialize_classes()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getDeclaredType", "getMock", "thenReturn", "when", "asType", "mock", "thenReturn", "when", "getTypeElement", "getName", "assertEquals", "specialize"]}, "focal_class": {"identifier": "Typing", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final Elements elements;", "modifier": "public final", "type": "Elements", "declarator": "elements", "var_name": "elements"}, {"original_string": "public final Types types;", "modifier": "public final", "type": "Types", "declarator": "types", "var_name": "types"}], "methods": [{"identifier": "Typing", "parameters": "(Elements elements, Types types)", "modifiers": "public", "return": "", "signature": " Typing(Elements elements, Types types)", "full_signature": "public  Typing(Elements elements, Types types)", "class_method_signature": "Typing.Typing(Elements elements, Types types)", "testcase": false, "constructor": true}, {"identifier": "type", "parameters": "(Class<?> type)", "modifiers": "public final", "return": "TypeMirror", "signature": "TypeMirror type(Class<?> type)", "full_signature": "public final TypeMirror type(Class<?> type)", "class_method_signature": "Typing.type(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "erasure", "parameters": "(Class<?> type)", "modifiers": "public final", "return": "TypeMirror", "signature": "TypeMirror erasure(Class<?> type)", "full_signature": "public final TypeMirror erasure(Class<?> type)", "class_method_signature": "Typing.erasure(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "specialize", "parameters": "(Class<?> type, Class<?>... parameters)", "modifiers": "public final", "return": "TypeMirror", "signature": "TypeMirror specialize(Class<?> type, Class<?>... parameters)", "full_signature": "public final TypeMirror specialize(Class<?> type, Class<?>... parameters)", "class_method_signature": "Typing.specialize(Class<?> type, Class<?>... parameters)", "testcase": false, "constructor": false}, {"identifier": "specialize", "parameters": "(Class<?> type, TypeMirror... parameters)", "modifiers": "public final", "return": "TypeMirror", "signature": "TypeMirror specialize(Class<?> type, TypeMirror... parameters)", "full_signature": "public final TypeMirror specialize(Class<?> type, TypeMirror... parameters)", "class_method_signature": "Typing.specialize(Class<?> type, TypeMirror... parameters)", "testcase": false, "constructor": false}], "file": "annotations/src/main/java/com/karuslabs/annotations/processor/Typing.java"}, "focal_method": {"identifier": "specialize", "parameters": "(Class<?> type, Class<?>... parameters)", "modifiers": "public final", "return": "TypeMirror", "body": "public final TypeMirror specialize(Class<?> type, Class<?>... parameters) {\n        var mirrors = new TypeMirror[parameters.length];\n        for (int i = 0; i < parameters.length; i++) {\n            mirrors[i] = type(parameters[i]);\n        }\n        \n        return specialize(type, mirrors);\n    }", "signature": "TypeMirror specialize(Class<?> type, Class<?>... parameters)", "full_signature": "public final TypeMirror specialize(Class<?> type, Class<?>... parameters)", "class_method_signature": "Typing.specialize(Class<?> type, Class<?>... parameters)", "testcase": false, "constructor": false, "invocations": ["type", "specialize"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}