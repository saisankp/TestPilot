{"test_class": {"identifier": "DownloaderWebClientTest", "superclass": "extends AbstractDownloaderTest", "interfaces": "", "fields": [], "file": "herd-code/herd-tools/herd-downloader/src/test/java/org/finra/herd/tools/downloader/DownloaderWebClientTest.java"}, "test_case": {"identifier": "testGetData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetData() throws Exception\n    {\n        // Upload and register business object data parents.\n        uploadAndRegisterTestDataParents(downloaderWebClient);\n\n        // Upload and register the initial version if of the test business object data.\n        uploadTestDataFilesToS3(S3_TEST_PATH_V0);\n        final UploaderInputManifestDto uploaderInputManifestDto = getTestUploaderInputManifestDto();\n\n        executeWithoutLogging(DataBridgeWebClient.class, new Command()\n        {\n            @Override\n            public void execute() throws Exception\n            {\n                BusinessObjectData businessObjectData =\n                    downloaderWebClient.preRegisterBusinessObjectData(uploaderInputManifestDto, StorageEntity.MANAGED_STORAGE, false);\n                BusinessObjectDataKey businessObjectDataKey = businessObjectDataHelper.getBusinessObjectDataKey(businessObjectData);\n                downloaderWebClient\n                    .addStorageFiles(businessObjectDataKey, uploaderInputManifestDto, getTestS3FileTransferRequestParamsDto(S3_TEST_PATH_V0 + \"/\"),\n                        StorageEntity.MANAGED_STORAGE);\n                downloaderWebClient.updateBusinessObjectDataStatus(businessObjectDataKey, BusinessObjectDataStatusEntity.VALID);\n            }\n        });\n\n        // Get business object data information.\n        DownloaderInputManifestDto downloaderInputManifestDto = getTestDownloaderInputManifestDto();\n        BusinessObjectData resultBusinessObjectData = downloaderWebClient.getBusinessObjectData(downloaderInputManifestDto);\n\n        // Validate the results.\n        assertNotNull(resultBusinessObjectData);\n    }", "signature": "void testGetData()", "full_signature": "@Test public void testGetData()", "class_method_signature": "DownloaderWebClientTest.testGetData()", "testcase": true, "constructor": false, "invocations": ["uploadAndRegisterTestDataParents", "uploadTestDataFilesToS3", "getTestUploaderInputManifestDto", "executeWithoutLogging", "preRegisterBusinessObjectData", "getBusinessObjectDataKey", "addStorageFiles", "getTestS3FileTransferRequestParamsDto", "updateBusinessObjectDataStatus", "getTestDownloaderInputManifestDto", "getBusinessObjectData", "assertNotNull"]}, "focal_class": {"identifier": "DownloaderWebClient", "superclass": "extends DataBridgeWebClient", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DownloaderWebClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DownloaderWebClient.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "getBusinessObjectData", "parameters": "(DownloaderInputManifestDto manifest)", "modifiers": "public", "return": "BusinessObjectData", "signature": "BusinessObjectData getBusinessObjectData(DownloaderInputManifestDto manifest)", "full_signature": "public BusinessObjectData getBusinessObjectData(DownloaderInputManifestDto manifest)", "class_method_signature": "DownloaderWebClient.getBusinessObjectData(DownloaderInputManifestDto manifest)", "testcase": false, "constructor": false}, {"identifier": "getS3KeyPrefix", "parameters": "(BusinessObjectData businessObjectData)", "modifiers": "public", "return": "S3KeyPrefixInformation", "signature": "S3KeyPrefixInformation getS3KeyPrefix(BusinessObjectData businessObjectData)", "full_signature": "public S3KeyPrefixInformation getS3KeyPrefix(BusinessObjectData businessObjectData)", "class_method_signature": "DownloaderWebClient.getS3KeyPrefix(BusinessObjectData businessObjectData)", "testcase": false, "constructor": false}, {"identifier": "getStorageUnitDownloadCredential", "parameters": "(DownloaderInputManifestDto manifest, String storageName)", "modifiers": "public", "return": "StorageUnitDownloadCredential", "signature": "StorageUnitDownloadCredential getStorageUnitDownloadCredential(DownloaderInputManifestDto manifest, String storageName)", "full_signature": "public StorageUnitDownloadCredential getStorageUnitDownloadCredential(DownloaderInputManifestDto manifest, String storageName)", "class_method_signature": "DownloaderWebClient.getStorageUnitDownloadCredential(DownloaderInputManifestDto manifest, String storageName)", "testcase": false, "constructor": false}, {"identifier": "getStorageUnitDownloadCredential", "parameters": "(CloseableHttpResponse response)", "modifiers": "private", "return": "StorageUnitDownloadCredential", "signature": "StorageUnitDownloadCredential getStorageUnitDownloadCredential(CloseableHttpResponse response)", "full_signature": "private StorageUnitDownloadCredential getStorageUnitDownloadCredential(CloseableHttpResponse response)", "class_method_signature": "DownloaderWebClient.getStorageUnitDownloadCredential(CloseableHttpResponse response)", "testcase": false, "constructor": false}], "file": "herd-code/herd-tools/herd-downloader/src/main/java/org/finra/herd/tools/downloader/DownloaderWebClient.java"}, "focal_method": {"identifier": "getBusinessObjectData", "parameters": "(DownloaderInputManifestDto manifest)", "modifiers": "public", "return": "BusinessObjectData", "body": "public BusinessObjectData getBusinessObjectData(DownloaderInputManifestDto manifest)\n        throws IOException, JAXBException, URISyntaxException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException\n    {\n        LOGGER.info(\"Retrieving business object data information from the registration server...\");\n\n        StringBuilder uriPathBuilder = new StringBuilder(HERD_APP_REST_URI_PREFIX);\n        uriPathBuilder.append(\"/businessObjectData\");\n        uriPathBuilder.append(\"/namespaces/\").append(manifest.getNamespace());\n        uriPathBuilder.append(\"/businessObjectDefinitionNames/\").append(manifest.getBusinessObjectDefinitionName());\n        uriPathBuilder.append(\"/businessObjectFormatUsages/\").append(manifest.getBusinessObjectFormatUsage());\n        uriPathBuilder.append(\"/businessObjectFormatFileTypes/\").append(manifest.getBusinessObjectFormatFileType());\n\n        URIBuilder uriBuilder =\n            new URIBuilder().setScheme(getUriScheme()).setHost(regServerAccessParamsDto.getRegServerHost()).setPort(regServerAccessParamsDto.getRegServerPort())\n                .setPath(uriPathBuilder.toString()).setParameter(\"partitionKey\", manifest.getPartitionKey())\n                .setParameter(\"partitionValue\", manifest.getPartitionValue())\n                .setParameter(\"businessObjectFormatVersion\", manifest.getBusinessObjectFormatVersion())\n                .setParameter(\"businessObjectDataVersion\", manifest.getBusinessObjectDataVersion());\n\n        if (manifest.getSubPartitionValues() != null)\n        {\n            uriBuilder.setParameter(\"subPartitionValues\", herdStringHelper.join(manifest.getSubPartitionValues(), \"|\", \"\\\\\"));\n        }\n\n        URI uri = uriBuilder.build();\n\n        CloseableHttpClient client = httpClientHelper\n            .createHttpClient(regServerAccessParamsDto.isTrustSelfSignedCertificate(), regServerAccessParamsDto.isDisableHostnameVerification());\n        HttpGet request = new HttpGet(uri);\n        request.addHeader(\"Accepts\", \"application/xml\");\n\n        // If SSL is enabled, set the client authentication header.\n        if (regServerAccessParamsDto.isUseSsl())\n        {\n            request.addHeader(getAuthorizationHeader());\n        }\n\n        LOGGER.info(String.format(\"    HTTP GET URI: %s\", request.getURI().toString()));\n\n        BusinessObjectData businessObjectData =\n            getBusinessObjectData(httpClientOperations.execute(client, request), \"retrieve business object data from the registration server\");\n\n        LOGGER.info(\"Successfully retrieved business object data from the registration server.\");\n\n        return businessObjectData;\n    }", "signature": "BusinessObjectData getBusinessObjectData(DownloaderInputManifestDto manifest)", "full_signature": "public BusinessObjectData getBusinessObjectData(DownloaderInputManifestDto manifest)", "class_method_signature": "DownloaderWebClient.getBusinessObjectData(DownloaderInputManifestDto manifest)", "testcase": false, "constructor": false, "invocations": ["info", "append", "append", "append", "getNamespace", "append", "append", "getBusinessObjectDefinitionName", "append", "append", "getBusinessObjectFormatUsage", "append", "append", "getBusinessObjectFormatFileType", "setParameter", "setParameter", "setParameter", "setParameter", "setPath", "setPort", "setHost", "setScheme", "getUriScheme", "getRegServerHost", "getRegServerPort", "toString", "getPartitionKey", "getPartitionValue", "getBusinessObjectFormatVersion", "getBusinessObjectDataVersion", "getSubPartitionValues", "setParameter", "join", "getSubPartitionValues", "build", "createHttpClient", "isTrustSelfSignedCertificate", "isDisableHostnameVerification", "addHeader", "isUseSsl", "addHeader", "getAuthorizationHeader", "info", "format", "toString", "getURI", "getBusinessObjectData", "execute", "info"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}