{"test_class": {"identifier": "ProtostuffCompilerTest", "superclass": "", "interfaces": "", "fields": [], "file": "protostuff-generator/src/test/java/io/protostuff/generator/ProtostuffCompilerTest.java"}, "test_case": {"identifier": "compile", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void compile() {\n        ProtostuffCompiler compiler = new ProtostuffCompiler();\n        compiler.compile(ImmutableModuleConfiguration.builder()\n                .name(\"none\")\n                .addProtoFiles(\"protostuff_unittest/messages_sample.proto\")\n                .generator(CompilerModule.DUMMY_COMPILER)\n                .output(\"none\")\n                .build());\n        Injector injector = compiler.injector;\n        CompilerRegistry registry = injector.getInstance(CompilerRegistry.class);\n        DummyGenerator generator = (DummyGenerator) registry.findCompiler(CompilerModule.DUMMY_COMPILER);\n        Assertions.assertNotNull(generator);\n        Module compiledModule = generator.getLastCompiledModule();\n        Assertions.assertNotNull(compiledModule);\n        Proto proto = compiledModule.getProtos().get(0);\n        Message a = proto.getMessage(\"A\");\n        Assertions.assertEquals(\"A\", a.getName());\n        Assertions.assertFalse(a.isNested());\n    }", "signature": "void compile()", "full_signature": "@Test void compile()", "class_method_signature": "ProtostuffCompilerTest.compile()", "testcase": true, "constructor": false, "invocations": ["compile", "build", "output", "generator", "addProtoFiles", "name", "builder", "getInstance", "findCompiler", "assertNotNull", "getLastCompiledModule", "assertNotNull", "get", "getProtos", "getMessage", "assertEquals", "getName", "assertFalse", "isNested"]}, "focal_class": {"identifier": "ProtostuffCompiler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ProtostuffCompiler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ProtostuffCompiler.class)", "var_name": "LOGGER"}, {"original_string": "protected final Injector injector;", "modifier": "protected final", "type": "Injector", "declarator": "injector", "var_name": "injector"}], "methods": [{"identifier": "ProtostuffCompiler", "parameters": "()", "modifiers": "public", "return": "", "signature": " ProtostuffCompiler()", "full_signature": "public  ProtostuffCompiler()", "class_method_signature": "ProtostuffCompiler.ProtostuffCompiler()", "testcase": false, "constructor": true}, {"identifier": "compile", "parameters": "(ModuleConfiguration configuration)", "modifiers": "public", "return": "void", "signature": "void compile(ModuleConfiguration configuration)", "full_signature": "public void compile(ModuleConfiguration configuration)", "class_method_signature": "ProtostuffCompiler.compile(ModuleConfiguration configuration)", "testcase": false, "constructor": false}], "file": "protostuff-generator/src/main/java/io/protostuff/generator/ProtostuffCompiler.java"}, "focal_method": {"identifier": "compile", "parameters": "(ModuleConfiguration configuration)", "modifiers": "public", "return": "void", "body": "public void compile(ModuleConfiguration configuration) {\n        LOGGER.debug(\"Compiling module {}\", configuration);\n        FileReaderFactory fileReaderFactory = injector.getInstance(FileReaderFactory.class);\n        Importer importer = injector.getInstance(Importer.class);\n        CompilerRegistry registry = injector.getInstance(CompilerRegistry.class);\n        ProtoCompiler compiler = registry.findCompiler(configuration.getGenerator());\n        if (compiler == null) {\n            throw new GeneratorException(\"Unknown template: %s | %s\", configuration.getGenerator(), registry.availableCompilers());\n        }\n        FileReader fileReader = fileReaderFactory.create(configuration.getIncludePaths());\n        Map<String, Proto> importedFiles = new HashMap<>();\n        for (String path : configuration.getProtoFiles()) {\n            LOGGER.info(\"Parse {}\", path);\n            ProtoContext context = importer.importFile(fileReader, path);\n            Proto proto = context.getProto();\n            importedFiles.put(path, proto);\n        }\n        ImmutableModule.Builder builder = ImmutableModule.builder();\n        builder.name(configuration.getName());\n        builder.output(configuration.getOutput());\n        builder.options(configuration.getOptions());\n        for (Proto proto : importedFiles.values()) {\n            builder.addProtos(proto);\n        }\n        UsageIndex index = UsageIndex.build(importedFiles.values());\n        builder.usageIndex(index);\n        ImmutableModule module = builder.build();\n        for (Proto proto : importedFiles.values()) {\n            proto.setModule(module);\n        }\n        compiler.compile(module);\n    }", "signature": "void compile(ModuleConfiguration configuration)", "full_signature": "public void compile(ModuleConfiguration configuration)", "class_method_signature": "ProtostuffCompiler.compile(ModuleConfiguration configuration)", "testcase": false, "constructor": false, "invocations": ["debug", "getInstance", "getInstance", "getInstance", "findCompiler", "getGenerator", "getGenerator", "availableCompilers", "create", "getIncludePaths", "getProtoFiles", "info", "importFile", "getProto", "put", "builder", "name", "getName", "output", "getOutput", "options", "getOptions", "values", "addProtos", "build", "values", "usageIndex", "build", "values", "setModule", "compile"]}, "repository": {"repo_id": 32651977, "url": "https://github.com/protostuff/protostuff-compiler", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 30, "size": 1539, "license": "licensed"}}