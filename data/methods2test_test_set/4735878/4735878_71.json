{"test_class": {"identifier": "CoordinatesUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WKTReader wKTReader = new WKTReader();", "modifier": "private", "type": "WKTReader", "declarator": "wKTReader = new WKTReader()", "var_name": "wKTReader"}], "file": "bundles/map-editor/src/test/java/org/orbisgis/mapeditor/map/geometryUtils/CoordinatesUtilsTest.java"}, "test_case": {"identifier": "testLength3D1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n        public void testLength3D1() throws Exception {\n                LineString geom = (LineString) wKTReader.read(\"LINESTRING(0 1 10, 10 1 0)\");\n                double length = CoordinatesUtils.length3D(geom.getCoordinateSequence());\n                double expectedLength = 14.1421356237309;\n                assertEquals(expectedLength, length, 10E-11);\n        }", "signature": "void testLength3D1()", "full_signature": "@Test public void testLength3D1()", "class_method_signature": "CoordinatesUtilsTest.testLength3D1()", "testcase": true, "constructor": false, "invocations": ["read", "length3D", "getCoordinateSequence", "assertEquals"]}, "focal_class": {"identifier": "CoordinatesUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "interpolate", "parameters": "(Coordinate firstCoordinate, Coordinate lastCoordinate, Coordinate toBeInterpolated)", "modifiers": "public static", "return": "double", "signature": "double interpolate(Coordinate firstCoordinate, Coordinate lastCoordinate, Coordinate toBeInterpolated)", "full_signature": "public static double interpolate(Coordinate firstCoordinate, Coordinate lastCoordinate, Coordinate toBeInterpolated)", "class_method_signature": "CoordinatesUtils.interpolate(Coordinate firstCoordinate, Coordinate lastCoordinate, Coordinate toBeInterpolated)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Coordinate[] coords, Coordinate coord)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(Coordinate[] coords, Coordinate coord)", "full_signature": "public static boolean contains(Coordinate[] coords, Coordinate coord)", "class_method_signature": "CoordinatesUtils.contains(Coordinate[] coords, Coordinate coord)", "testcase": false, "constructor": false}, {"identifier": "contains2D", "parameters": "(Coordinate[] coords, Coordinate coord)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains2D(Coordinate[] coords, Coordinate coord)", "full_signature": "public static boolean contains2D(Coordinate[] coords, Coordinate coord)", "class_method_signature": "CoordinatesUtils.contains2D(Coordinate[] coords, Coordinate coord)", "testcase": false, "constructor": false}, {"identifier": "contains3D", "parameters": "(Coordinate[] coords, Coordinate coord)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains3D(Coordinate[] coords, Coordinate coord)", "full_signature": "public static boolean contains3D(Coordinate[] coords, Coordinate coord)", "class_method_signature": "CoordinatesUtils.contains3D(Coordinate[] coords, Coordinate coord)", "testcase": false, "constructor": false}, {"identifier": "zMinMax", "parameters": "(final Coordinate[] cs)", "modifiers": "public static", "return": "double[]", "signature": "double[] zMinMax(final Coordinate[] cs)", "full_signature": "public static double[] zMinMax(final Coordinate[] cs)", "class_method_signature": "CoordinatesUtils.zMinMax(final Coordinate[] cs)", "testcase": false, "constructor": false}, {"identifier": "getFurthestCoordinate", "parameters": "(Coordinate base, Coordinate[] coords)", "modifiers": "public static", "return": "Coordinate[]", "signature": "Coordinate[] getFurthestCoordinate(Coordinate base, Coordinate[] coords)", "full_signature": "public static Coordinate[] getFurthestCoordinate(Coordinate base, Coordinate[] coords)", "class_method_signature": "CoordinatesUtils.getFurthestCoordinate(Coordinate base, Coordinate[] coords)", "testcase": false, "constructor": false}, {"identifier": "length3D", "parameters": "(CoordinateSequence pts)", "modifiers": "public static", "return": "double", "signature": "double length3D(CoordinateSequence pts)", "full_signature": "public static double length3D(CoordinateSequence pts)", "class_method_signature": "CoordinatesUtils.length3D(CoordinateSequence pts)", "testcase": false, "constructor": false}, {"identifier": "length3D", "parameters": "(Geometry geom)", "modifiers": "public static", "return": "double", "signature": "double length3D(Geometry geom)", "full_signature": "public static double length3D(Geometry geom)", "class_method_signature": "CoordinatesUtils.length3D(Geometry geom)", "testcase": false, "constructor": false}, {"identifier": "length3D", "parameters": "(LineString lineString)", "modifiers": "public static", "return": "double", "signature": "double length3D(LineString lineString)", "full_signature": "public static double length3D(LineString lineString)", "class_method_signature": "CoordinatesUtils.length3D(LineString lineString)", "testcase": false, "constructor": false}, {"identifier": "length3D", "parameters": "(Polygon polygon)", "modifiers": "public static", "return": "double", "signature": "double length3D(Polygon polygon)", "full_signature": "public static double length3D(Polygon polygon)", "class_method_signature": "CoordinatesUtils.length3D(Polygon polygon)", "testcase": false, "constructor": false}, {"identifier": "CoordinatesUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " CoordinatesUtils()", "full_signature": "private  CoordinatesUtils()", "class_method_signature": "CoordinatesUtils.CoordinatesUtils()", "testcase": false, "constructor": true}], "file": "bundles/map-editor/src/main/java/org/orbisgis/mapeditor/map/geometryUtils/CoordinatesUtils.java"}, "focal_method": {"identifier": "length3D", "parameters": "(CoordinateSequence pts)", "modifiers": "public static", "return": "double", "body": "public static double length3D(CoordinateSequence pts) {\n                // optimized for processing CoordinateSequences\n                int n = pts.size();\n                if (n <= 1) {\n                        return 0.0;\n                }\n\n                double len = 0.0;\n\n                Coordinate p = new Coordinate();\n                pts.getCoordinate(0, p);\n                double x0 = p.x;\n                double y0 = p.y;\n                double z0 = p.z;\n\n                if (Double.isNaN(z0)) {\n                        return 0.0;\n                }\n\n                for (int i = 1; i < n; i++) {\n                        pts.getCoordinate(i, p);\n\n                        double x1 = p.x;\n                        double y1 = p.y;\n                        double z1 = p.z;\n                        if (Double.isNaN(z1)) {\n                                return 0.0;\n                        }\n                        double dx = x1 - x0;\n                        double dy = y1 - y0;\n                        double dz = z1 - z0;\n\n                        len += Math.sqrt(dx * dx + dy * dy + dz * dz);\n                        x0 = x1;\n                        y0 = y1;\n                        z0 = z1;\n                }\n                return len;\n        }", "signature": "double length3D(CoordinateSequence pts)", "full_signature": "public static double length3D(CoordinateSequence pts)", "class_method_signature": "CoordinatesUtils.length3D(CoordinateSequence pts)", "testcase": false, "constructor": false, "invocations": ["size", "getCoordinate", "isNaN", "getCoordinate", "isNaN", "sqrt"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}