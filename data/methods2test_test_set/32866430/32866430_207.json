{"test_class": {"identifier": "BcryptAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "BcryptAuthenticator bcryptAuthenticator;", "modifier": "", "type": "BcryptAuthenticator", "declarator": "bcryptAuthenticator", "var_name": "bcryptAuthenticator"}, {"original_string": "String hashedPass;", "modifier": "", "type": "String", "declarator": "hashedPass", "var_name": "hashedPass"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock UserDAO userDAO;", "modifier": "@Mock", "type": "UserDAO", "declarator": "userDAO", "var_name": "userDAO"}], "file": "server/src/test/java/keywhiz/auth/bcrypt/BcryptAuthenticatorTest.java"}, "test_case": {"identifier": "bcryptAuthenticatorFailsForBadUser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void bcryptAuthenticatorFailsForBadUser() throws Exception {\n    when(userDAO.getHashedPassword(\"invaliduser\"))\n        .thenReturn(Optional.empty());\n\n    Optional<User> missingUser =\n        bcryptAuthenticator.authenticate(new BasicCredentials(\"invaliduser\", \"validpass\"));\n    assertThat(missingUser).isEmpty();\n  }", "signature": "void bcryptAuthenticatorFailsForBadUser()", "full_signature": "@Test public void bcryptAuthenticatorFailsForBadUser()", "class_method_signature": "BcryptAuthenticatorTest.bcryptAuthenticatorFailsForBadUser()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getHashedPassword", "empty", "authenticate", "isEmpty", "assertThat"]}, "focal_class": {"identifier": "BcryptAuthenticator", "superclass": "", "interfaces": "implements Authenticator<BasicCredentials, User>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(BcryptAuthenticator.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(BcryptAuthenticator.class)", "var_name": "logger"}, {"original_string": "private final UserDAO userDAO;", "modifier": "private final", "type": "UserDAO", "declarator": "userDAO", "var_name": "userDAO"}], "methods": [{"identifier": "BcryptAuthenticator", "parameters": "(UserDAO userDAO)", "modifiers": "public", "return": "", "signature": " BcryptAuthenticator(UserDAO userDAO)", "full_signature": "public  BcryptAuthenticator(UserDAO userDAO)", "class_method_signature": "BcryptAuthenticator.BcryptAuthenticator(UserDAO userDAO)", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "(BasicCredentials credentials)", "modifiers": "@Override public", "return": "Optional<User>", "signature": "Optional<User> authenticate(BasicCredentials credentials)", "full_signature": "@Override public Optional<User> authenticate(BasicCredentials credentials)", "class_method_signature": "BcryptAuthenticator.authenticate(BasicCredentials credentials)", "testcase": false, "constructor": false}, {"identifier": "hashPassword", "parameters": "(String password)", "modifiers": "public static", "return": "String", "signature": "String hashPassword(String password)", "full_signature": "public static String hashPassword(String password)", "class_method_signature": "BcryptAuthenticator.hashPassword(String password)", "testcase": false, "constructor": false}, {"identifier": "checkPassword", "parameters": "(String password, Optional<String> hash)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkPassword(String password, Optional<String> hash)", "full_signature": "private static boolean checkPassword(String password, Optional<String> hash)", "class_method_signature": "BcryptAuthenticator.checkPassword(String password, Optional<String> hash)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/auth/bcrypt/BcryptAuthenticator.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(BasicCredentials credentials)", "modifiers": "@Override public", "return": "Optional<User>", "body": "@Override public Optional<User> authenticate(BasicCredentials credentials)\n      throws AuthenticationException {\n    User user = null;\n    String username = credentials.getUsername();\n    if (!User.isSanitizedUsername(username)) {\n      logger.info(\"Username: {} must match pattern: {}\", username, User.USERNAME_PATTERN);\n      return Optional.empty();\n    }\n\n    // Get hashed password column from BCrypt table by username & verify hash against plaintext\n    String password = credentials.getPassword();\n    Optional<String> optionalHashedPwForUser = userDAO.getHashedPassword(username);\n    if (checkPassword(password, optionalHashedPwForUser)) {\n      user = User.named(username);\n    }\n\n    return Optional.ofNullable(user);\n  }", "signature": "Optional<User> authenticate(BasicCredentials credentials)", "full_signature": "@Override public Optional<User> authenticate(BasicCredentials credentials)", "class_method_signature": "BcryptAuthenticator.authenticate(BasicCredentials credentials)", "testcase": false, "constructor": false, "invocations": ["getUsername", "isSanitizedUsername", "info", "empty", "getPassword", "getHashedPassword", "checkPassword", "named", "ofNullable"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}