{"test_class": {"identifier": "CosineTransformTest", "superclass": "", "interfaces": "", "fields": [], "file": "JAICore/jaicore-basic/src/test/java/ai/libs/jaicore/basic/transform/vector/CosineTransformTest.java"}, "test_case": {"identifier": "testCorrectnessForTransformation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCorrectnessForTransformation() {\n        // Input.\n        double[] timeSeries = { 1, 2, 3, 4, 5 };\n        // Expectation.\n        double[] expectation = { 15, -4.97979657, 0, -0.4490279766, 0 };\n\n        CosineTransform cosineTransform = new CosineTransform();\n        double[] transformed = cosineTransform.transform(timeSeries);\n\n        assertArrayEquals(expectation, transformed, 0.0001);\n    }", "signature": "void testCorrectnessForTransformation()", "full_signature": "@Test public void testCorrectnessForTransformation()", "class_method_signature": "CosineTransformTest.testCorrectnessForTransformation()", "testcase": true, "constructor": false, "invocations": ["transform", "assertArrayEquals"]}, "focal_class": {"identifier": "CosineTransform", "superclass": "", "interfaces": "implements IVectorTransform", "fields": [], "methods": [{"identifier": "transform", "parameters": "(final double[] input)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] transform(final double[] input)", "full_signature": "@Override public double[] transform(final double[] input)", "class_method_signature": "CosineTransform.transform(final double[] input)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-basic/src/main/java/ai/libs/jaicore/basic/transform/vector/CosineTransform.java"}, "focal_method": {"identifier": "transform", "parameters": "(final double[] input)", "modifiers": "@Override public", "return": "double[]", "body": "@Override\n\tpublic double[] transform(final double[] input) {\n\t\tdouble n = input.length;\n\t\tdouble[] cosinusTransform = new double[input.length];\n\t\tfor (int k = 0; k < n; k++) {\n\t\t\t// Sum over all points of the input.\n\t\t\tdouble sum = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\t// Make (i - 0.5) to (i + 0.5) and (k-1) to k because of zero-indexing.\n\t\t\t\tsum += input[i] * Math.cos((Math.PI / n) * (i + 0.5) * k);\n\t\t\t}\n\t\t\tcosinusTransform[k] = sum;\n\t\t}\n\t\treturn cosinusTransform;\n\t}", "signature": "double[] transform(final double[] input)", "full_signature": "@Override public double[] transform(final double[] input)", "class_method_signature": "CosineTransform.transform(final double[] input)", "testcase": false, "constructor": false, "invocations": ["cos"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}