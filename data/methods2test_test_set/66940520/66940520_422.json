{"test_class": {"identifier": "AnalyticsUtilsTest", "superclass": "extends DhisConvenienceTest", "interfaces": "", "fields": [], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/util/AnalyticsUtilsTest.java"}, "test_case": {"identifier": "testHandleGridForDataValueSetEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandleGridForDataValueSetEmpty()\n    {\n        Grid grid = new ListGrid();\n\n        DataQueryParams params = DataQueryParams.newBuilder().\n            addDimension( new BaseDimensionalObject( DATA_X_DIM_ID, DimensionType.DATA_X, Lists.newArrayList() ) )\n            .build();\n\n        grid.addHeader( new GridHeader( DimensionalObject.DATA_X_DIM_ID ) );\n        grid.addHeader( new GridHeader( DimensionalObject.ORGUNIT_DIM_ID ) );\n        grid.addHeader( new GridHeader( DimensionalObject.PERIOD_DIM_ID ) );\n        grid.addHeader( new GridHeader( VALUE_ID, VALUE_HEADER_NAME, ValueType.NUMBER, Double.class.getName(), false, false ) );\n\n        assertEquals( 4, grid.getHeaders().size() );\n        assertEquals( 0, grid.getWidth() );\n        assertEquals( 0, grid.getHeight() );\n\n        AnalyticsUtils.handleGridForDataValueSet( params, grid );\n\n        assertEquals( 6, grid.getHeaders().size() );\n        assertEquals( 0, grid.getWidth() );\n        assertEquals( 0, grid.getHeight() );\n    }", "signature": "void testHandleGridForDataValueSetEmpty()", "full_signature": "@Test public void testHandleGridForDataValueSetEmpty()", "class_method_signature": "AnalyticsUtilsTest.testHandleGridForDataValueSetEmpty()", "testcase": true, "constructor": false, "invocations": ["build", "addDimension", "newBuilder", "newArrayList", "addHeader", "addHeader", "addHeader", "addHeader", "getName", "assertEquals", "size", "getHeaders", "assertEquals", "getWidth", "assertEquals", "getHeight", "handleGridForDataValueSet", "assertEquals", "size", "getHeaders", "assertEquals", "getWidth", "assertEquals", "getHeight"]}, "focal_class": {"identifier": "AnalyticsUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DECIMALS_NO_ROUNDING = 10;", "modifier": "private static final", "type": "int", "declarator": "DECIMALS_NO_ROUNDING = 10", "var_name": "DECIMALS_NO_ROUNDING"}, {"original_string": "private static final String KEY_AGG_VALUE = \"[aggregated]\";", "modifier": "private static final", "type": "String", "declarator": "KEY_AGG_VALUE = \"[aggregated]\"", "var_name": "KEY_AGG_VALUE"}, {"original_string": "private static final Pattern OU_LEVEL_PATTERN = Pattern.compile( DataQueryParams.PREFIX_ORG_UNIT_LEVEL + \"(\\\\d+)\" );", "modifier": "private static final", "type": "Pattern", "declarator": "OU_LEVEL_PATTERN = Pattern.compile( DataQueryParams.PREFIX_ORG_UNIT_LEVEL + \"(\\\\d+)\" )", "var_name": "OU_LEVEL_PATTERN"}, {"original_string": "public static final String ERR_MSG_TABLE_NOT_EXISTING = \"Query failed, likely because the requested analytics table does not exist\";", "modifier": "public static final", "type": "String", "declarator": "ERR_MSG_TABLE_NOT_EXISTING = \"Query failed, likely because the requested analytics table does not exist\"", "var_name": "ERR_MSG_TABLE_NOT_EXISTING"}], "methods": [{"identifier": "getDebugDataSql", "parameters": "( DataQueryParams params )", "modifiers": "public static", "return": "String", "signature": "String getDebugDataSql( DataQueryParams params )", "full_signature": "public static String getDebugDataSql( DataQueryParams params )", "class_method_signature": "AnalyticsUtils.getDebugDataSql( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getByDataDimensionItemType", "parameters": "( DataDimensionItemType itemType, List<DimensionalItemObject> dataDimensionOptions )", "modifiers": "public static", "return": "List<DimensionalItemObject>", "signature": "List<DimensionalItemObject> getByDataDimensionItemType( DataDimensionItemType itemType, List<DimensionalItemObject> dataDimensionOptions )", "full_signature": "public static List<DimensionalItemObject> getByDataDimensionItemType( DataDimensionItemType itemType, List<DimensionalItemObject> dataDimensionOptions )", "class_method_signature": "AnalyticsUtils.getByDataDimensionItemType( DataDimensionItemType itemType, List<DimensionalItemObject> dataDimensionOptions )", "testcase": false, "constructor": false}, {"identifier": "getRoundedValue", "parameters": "( DataQueryParams params, Integer decimals, Double value )", "modifiers": "public static", "return": "Number", "signature": "Number getRoundedValue( DataQueryParams params, Integer decimals, Double value )", "full_signature": "public static Number getRoundedValue( DataQueryParams params, Integer decimals, Double value )", "class_method_signature": "AnalyticsUtils.getRoundedValue( DataQueryParams params, Integer decimals, Double value )", "testcase": false, "constructor": false}, {"identifier": "getRoundedValueObject", "parameters": "( DataQueryParams params, Object value )", "modifiers": "public static", "return": "Object", "signature": "Object getRoundedValueObject( DataQueryParams params, Object value )", "full_signature": "public static Object getRoundedValueObject( DataQueryParams params, Object value )", "class_method_signature": "AnalyticsUtils.getRoundedValueObject( DataQueryParams params, Object value )", "testcase": false, "constructor": false}, {"identifier": "getColumnType", "parameters": "( ValueType valueType, boolean spatialSupport )", "modifiers": "public static", "return": "ColumnDataType", "signature": "ColumnDataType getColumnType( ValueType valueType, boolean spatialSupport )", "full_signature": "public static ColumnDataType getColumnType( ValueType valueType, boolean spatialSupport )", "class_method_signature": "AnalyticsUtils.getColumnType( ValueType valueType, boolean spatialSupport )", "testcase": false, "constructor": false}, {"identifier": "convertDxToOperand", "parameters": "( Map<String, T> valueMap, TotalType totalType )", "modifiers": "public static", "return": "Map<String, T>", "signature": "Map<String, T> convertDxToOperand( Map<String, T> valueMap, TotalType totalType )", "full_signature": "public static Map<String, T> convertDxToOperand( Map<String, T> valueMap, TotalType totalType )", "class_method_signature": "AnalyticsUtils.convertDxToOperand( Map<String, T> valueMap, TotalType totalType )", "testcase": false, "constructor": false}, {"identifier": "getDoubleMap", "parameters": "( Map<String, Object> map )", "modifiers": "public static", "return": "Map<String, Double>", "signature": "Map<String, Double> getDoubleMap( Map<String, Object> map )", "full_signature": "public static Map<String, Double> getDoubleMap( Map<String, Object> map )", "class_method_signature": "AnalyticsUtils.getDoubleMap( Map<String, Object> map )", "testcase": false, "constructor": false}, {"identifier": "getAggregatedDataValueMapping", "parameters": "( Grid grid )", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> getAggregatedDataValueMapping( Grid grid )", "full_signature": "public static Map<String, Object> getAggregatedDataValueMapping( Grid grid )", "class_method_signature": "AnalyticsUtils.getAggregatedDataValueMapping( Grid grid )", "testcase": false, "constructor": false}, {"identifier": "getDataValueSetFromGrid", "parameters": "( DataQueryParams params, Grid grid )", "modifiers": "public static", "return": "DataValueSet", "signature": "DataValueSet getDataValueSetFromGrid( DataQueryParams params, Grid grid )", "full_signature": "public static DataValueSet getDataValueSetFromGrid( DataQueryParams params, Grid grid )", "class_method_signature": "AnalyticsUtils.getDataValueSetFromGrid( DataQueryParams params, Grid grid )", "testcase": false, "constructor": false}, {"identifier": "handleGridForDataValueSet", "parameters": "( DataQueryParams params, Grid grid )", "modifiers": "public static", "return": "void", "signature": "void handleGridForDataValueSet( DataQueryParams params, Grid grid )", "full_signature": "public static void handleGridForDataValueSet( DataQueryParams params, Grid grid )", "class_method_signature": "AnalyticsUtils.handleGridForDataValueSet( DataQueryParams params, Grid grid )", "testcase": false, "constructor": false}, {"identifier": "getIntegerOrValue", "parameters": "( Object value, DimensionalItemObject item )", "modifiers": "public static", "return": "Object", "signature": "Object getIntegerOrValue( Object value, DimensionalItemObject item )", "full_signature": "public static Object getIntegerOrValue( Object value, DimensionalItemObject item )", "class_method_signature": "AnalyticsUtils.getIntegerOrValue( Object value, DimensionalItemObject item )", "testcase": false, "constructor": false}, {"identifier": "getDimensionalItemObjectMap", "parameters": "( DataQueryParams params )", "modifiers": "public static", "return": "Map<String, DimensionalItemObject>", "signature": "Map<String, DimensionalItemObject> getDimensionalItemObjectMap( DataQueryParams params )", "full_signature": "public static Map<String, DimensionalItemObject> getDimensionalItemObjectMap( DataQueryParams params )", "class_method_signature": "AnalyticsUtils.getDimensionalItemObjectMap( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getDimensionItemNameMap", "parameters": "( DataQueryParams params )", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getDimensionItemNameMap( DataQueryParams params )", "full_signature": "public static Map<String, String> getDimensionItemNameMap( DataQueryParams params )", "class_method_signature": "AnalyticsUtils.getDimensionItemNameMap( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getDimensionMetadataItemMap", "parameters": "( DataQueryParams params )", "modifiers": "public static", "return": "Map<String, MetadataItem>", "signature": "Map<String, MetadataItem> getDimensionMetadataItemMap( DataQueryParams params )", "full_signature": "public static Map<String, MetadataItem> getDimensionMetadataItemMap( DataQueryParams params )", "class_method_signature": "AnalyticsUtils.getDimensionMetadataItemMap( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getCocNameMap", "parameters": "( DataQueryParams params )", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getCocNameMap( DataQueryParams params )", "full_signature": "public static Map<String, String> getCocNameMap( DataQueryParams params )", "class_method_signature": "AnalyticsUtils.getCocNameMap( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getUidDisplayPropertyMap", "parameters": "( List<QueryItem> queryItems, DisplayProperty displayProperty )", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getUidDisplayPropertyMap( List<QueryItem> queryItems, DisplayProperty displayProperty )", "full_signature": "public static Map<String, String> getUidDisplayPropertyMap( List<QueryItem> queryItems, DisplayProperty displayProperty )", "class_method_signature": "AnalyticsUtils.getUidDisplayPropertyMap( List<QueryItem> queryItems, DisplayProperty displayProperty )", "testcase": false, "constructor": false}, {"identifier": "getUidDisplayPropertyMap", "parameters": "( List<DimensionalObject> dimensions, boolean hierarchyMeta, DisplayProperty displayProperty )", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getUidDisplayPropertyMap( List<DimensionalObject> dimensions, boolean hierarchyMeta, DisplayProperty displayProperty )", "full_signature": "public static Map<String, String> getUidDisplayPropertyMap( List<DimensionalObject> dimensions, boolean hierarchyMeta, DisplayProperty displayProperty )", "class_method_signature": "AnalyticsUtils.getUidDisplayPropertyMap( List<DimensionalObject> dimensions, boolean hierarchyMeta, DisplayProperty displayProperty )", "testcase": false, "constructor": false}, {"identifier": "periodIsOutsideApprovalMaxYears", "parameters": "( Integer year, Integer maxYears )", "modifiers": "public static", "return": "boolean", "signature": "boolean periodIsOutsideApprovalMaxYears( Integer year, Integer maxYears )", "full_signature": "public static boolean periodIsOutsideApprovalMaxYears( Integer year, Integer maxYears )", "class_method_signature": "AnalyticsUtils.periodIsOutsideApprovalMaxYears( Integer year, Integer maxYears )", "testcase": false, "constructor": false}, {"identifier": "getLevelFromOrgUnitDimensionName", "parameters": "( String dimensionName )", "modifiers": "public static", "return": "int", "signature": "int getLevelFromOrgUnitDimensionName( String dimensionName )", "full_signature": "public static int getLevelFromOrgUnitDimensionName( String dimensionName )", "class_method_signature": "AnalyticsUtils.getLevelFromOrgUnitDimensionName( String dimensionName )", "testcase": false, "constructor": false}, {"identifier": "isTableLayout", "parameters": "( List<String> columns, List<String> rows )", "modifiers": "public static", "return": "boolean", "signature": "boolean isTableLayout( List<String> columns, List<String> rows )", "full_signature": "public static boolean isTableLayout( List<String> columns, List<String> rows )", "class_method_signature": "AnalyticsUtils.isTableLayout( List<String> columns, List<String> rows )", "testcase": false, "constructor": false}, {"identifier": "calculateYearlyWeightedAverage", "parameters": "( Double year1Value, Double year2Value, Double factor )", "modifiers": "public static", "return": "Double", "signature": "Double calculateYearlyWeightedAverage( Double year1Value, Double year2Value, Double factor )", "full_signature": "public static Double calculateYearlyWeightedAverage( Double year1Value, Double year2Value, Double factor )", "class_method_signature": "AnalyticsUtils.calculateYearlyWeightedAverage( Double year1Value, Double year2Value, Double factor )", "testcase": false, "constructor": false}, {"identifier": "getBaseMonth", "parameters": "( PeriodType periodType )", "modifiers": "public static", "return": "Double", "signature": "Double getBaseMonth( PeriodType periodType )", "full_signature": "public static Double getBaseMonth( PeriodType periodType )", "class_method_signature": "AnalyticsUtils.getBaseMonth( PeriodType periodType )", "testcase": false, "constructor": false}, {"identifier": "throwIllegalQueryEx", "parameters": "( ErrorCode errorCode, Object... args )", "modifiers": "public static", "return": "void", "signature": "void throwIllegalQueryEx( ErrorCode errorCode, Object... args )", "full_signature": "public static void throwIllegalQueryEx( ErrorCode errorCode, Object... args )", "class_method_signature": "AnalyticsUtils.throwIllegalQueryEx( ErrorCode errorCode, Object... args )", "testcase": false, "constructor": false}, {"identifier": "isPeriodInPeriods", "parameters": "( String period, List<DimensionalItemObject> periods )", "modifiers": "public static", "return": "boolean", "signature": "boolean isPeriodInPeriods( String period, List<DimensionalItemObject> periods )", "full_signature": "public static boolean isPeriodInPeriods( String period, List<DimensionalItemObject> periods )", "class_method_signature": "AnalyticsUtils.isPeriodInPeriods( String period, List<DimensionalItemObject> periods )", "testcase": false, "constructor": false}, {"identifier": "findDimensionalItems", "parameters": "( String dimensionIdentifier,\n        List<DimensionalItemObject> items )", "modifiers": "public static", "return": "List<DimensionalItemObject>", "signature": "List<DimensionalItemObject> findDimensionalItems( String dimensionIdentifier,\n        List<DimensionalItemObject> items )", "full_signature": "public static List<DimensionalItemObject> findDimensionalItems( String dimensionIdentifier,\n        List<DimensionalItemObject> items )", "class_method_signature": "AnalyticsUtils.findDimensionalItems( String dimensionIdentifier,\n        List<DimensionalItemObject> items )", "testcase": false, "constructor": false}, {"identifier": "hasPeriod", "parameters": "( List<Object> row, int periodIndex )", "modifiers": "public static", "return": "boolean", "signature": "boolean hasPeriod( List<Object> row, int periodIndex )", "full_signature": "public static boolean hasPeriod( List<Object> row, int periodIndex )", "class_method_signature": "AnalyticsUtils.hasPeriod( List<Object> row, int periodIndex )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/util/AnalyticsUtils.java"}, "focal_method": {"identifier": "handleGridForDataValueSet", "parameters": "( DataQueryParams params, Grid grid )", "modifiers": "public static", "return": "void", "body": "public static void handleGridForDataValueSet( DataQueryParams params, Grid grid )\n    {\n        Map<String, DimensionalItemObject> dimItemObjectMap = AnalyticsUtils.getDimensionalItemObjectMap( params );\n\n        List<Object> cocCol = Lists.newArrayList();\n        List<Object> aocCol = Lists.newArrayList();\n\n        int dxInx = grid.getIndexOfHeader( DATA_X_DIM_ID );\n        int vlInx = grid.getHeaderWidth() - 1;\n\n        Assert.isTrue( dxInx >= 0, \"Data dimension index must be greater than or equal to zero\" );\n        Assert.isTrue( vlInx >= 0, \"Value index must be greater than or equal to zero\" );\n\n        for ( List<Object> row : grid.getRows() )\n        {\n            String dx = String.valueOf( row.get( dxInx ) );\n\n            Assert.notNull( dx, \"Data dimension item cannot be null\" );\n\n            DimensionalItemObject item = dimItemObjectMap.get( dx );\n\n            Assert.notNull( item, \"Dimensional item cannot be null\" );\n\n            Object value = AnalyticsUtils.getIntegerOrValue( row.get( vlInx ), item );\n\n            row.set( vlInx, value );\n\n            String coc = null, aoc = null;\n\n            if ( DataDimensionalItemObject.class.isAssignableFrom( item.getClass() ) )\n            {\n                DataDimensionalItemObject dataItem = (DataDimensionalItemObject) item;\n                coc = dataItem.getAggregateExportCategoryOptionCombo();\n                aoc = dataItem.getAggregateExportAttributeOptionCombo();\n            }\n            else if ( DataElementOperand.class.isAssignableFrom( item.getClass() ) )\n            {\n                row.set( dxInx, DimensionalObjectUtils.getFirstIdentifer( dx ) );\n                coc = DimensionalObjectUtils.getSecondIdentifer( dx );\n            }\n\n            cocCol.add( coc );\n            aocCol.add( aoc );\n        }\n\n        grid.addHeader( vlInx, new GridHeader( ATTRIBUTEOPTIONCOMBO_DIM_ID, ATTRIBUTEOPTIONCOMBO_DIM_ID, ValueType.TEXT, String.class.getName(), false, true ) )\n            .addHeader( vlInx, new GridHeader( CATEGORYOPTIONCOMBO_DIM_ID, CATEGORYOPTIONCOMBO_DIM_ID, ValueType.TEXT, String.class.getName(), false, true ) )\n            .addColumn( vlInx, aocCol )\n            .addColumn( vlInx, cocCol );\n    }", "signature": "void handleGridForDataValueSet( DataQueryParams params, Grid grid )", "full_signature": "public static void handleGridForDataValueSet( DataQueryParams params, Grid grid )", "class_method_signature": "AnalyticsUtils.handleGridForDataValueSet( DataQueryParams params, Grid grid )", "testcase": false, "constructor": false, "invocations": ["getDimensionalItemObjectMap", "newArrayList", "newArrayList", "getIndexOfHeader", "getHeaderWidth", "isTrue", "isTrue", "getRows", "valueOf", "get", "notNull", "get", "notNull", "getIntegerOrValue", "get", "set", "isAssignableFrom", "getClass", "getAggregateExportCategoryOptionCombo", "getAggregateExportAttributeOptionCombo", "isAssignableFrom", "getClass", "set", "getFirstIdentifer", "getSecondIdentifer", "add", "add", "addColumn", "addColumn", "addHeader", "addHeader", "getName", "getName"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}