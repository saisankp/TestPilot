{"test_class": {"identifier": "SqlDebugDriverTest", "superclass": "", "interfaces": "", "fields": [], "file": "plink-sql/plink-sql-core/src/test/java/com/github/hairless/plink/sql/SqlDebugDriverTest.java"}, "test_case": {"identifier": "debugWatermark", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void debugWatermark() throws Exception {\n        String sql = \"create table t1( \" +\n                \"data_time STRING ,\" +\n                \"row1_time AS to_timestamp(data_time),\" +\n                \"WATERMARK FOR row1_time AS row1_time - INTERVAL '5' SECOND \" +\n                \") with ( 'connector' = 'collection','data'='[]');\" +\n                \"create table t2(stime TIMESTAMP(3),cnt bigint) with ( 'connector' = 'print');\" +\n                \"insert into t2 select TUMBLE_START(row1_time, INTERVAL '1' MINUTE) as stime,count(1) cnt from t1 group by TUMBLE(row1_time, INTERVAL '1' MINUTE);\";\n        List<String> sourceData = Stream.of(\n                new JSONObject().fluentPut(\"data_time\", \"2020-01-01 12:00:01\").toJSONString(),\n                new JSONObject().fluentPut(\"data_time\", \"2020-01-01 12:00:02\").toJSONString(),\n                new JSONObject().fluentPut(\"data_time\", \"2020-01-01 12:00:03\").toJSONString(),\n                new JSONObject().fluentPut(\"data_time\", \"2020-01-01 12:01:01\").toJSONString()\n        ).collect(Collectors.toList());\n        SqlDebugConfig sqlDebugConfig = new SqlDebugConfig();\n        HashMap<String, SqlDebugConfig.SourceConfig> sourceConfigMap = new HashMap<>();\n        sourceConfigMap.put(\"t1\", new SqlDebugConfig.SourceConfig(sourceData));\n        sqlDebugConfig.setSourceConfigMap(sourceConfigMap);\n        sqlDebugConfig.setSql(sql);\n        log.info(\"sqlDebugConfig={}\", JSON.toJSONString(sqlDebugConfig));\n        Map<String, List<String>> debugResult = SqlDebugDriver.debug(sqlDebugConfig);\n        List<String> t2 = debugResult.get(\"t2\");\n        assert t2 != null && t2.size() > 0;\n        assert \"{\\\"stime\\\":\\\"2020-01-01 12:00:00\\\",\\\"cnt\\\":3}\".equals(t2.get(0));\n        assert \"{\\\"stime\\\":\\\"2020-01-01 12:01:00\\\",\\\"cnt\\\":1}\".equals(t2.get(1));\n    }", "signature": "void debugWatermark()", "full_signature": "@Test public void debugWatermark()", "class_method_signature": "SqlDebugDriverTest.debugWatermark()", "testcase": true, "constructor": false, "invocations": ["collect", "of", "toJSONString", "fluentPut", "toJSONString", "fluentPut", "toJSONString", "fluentPut", "toJSONString", "fluentPut", "toList", "put", "setSourceConfigMap", "setSql", "info", "toJSONString", "debug", "get", "size", "equals", "get", "equals", "get"]}, "focal_class": {"identifier": "SqlDebugDriver", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "debug", "parameters": "(SqlDebugConfig sqlDebugConfig)", "modifiers": "public static", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> debug(SqlDebugConfig sqlDebugConfig)", "full_signature": "public static Map<String, List<String>> debug(SqlDebugConfig sqlDebugConfig)", "class_method_signature": "SqlDebugDriver.debug(SqlDebugConfig sqlDebugConfig)", "testcase": false, "constructor": false}, {"identifier": "handleDebugSql", "parameters": "(final String identifier, String sql, SqlDebugConfig sqlDebugConfig)", "modifiers": "private static", "return": "String", "signature": "String handleDebugSql(final String identifier, String sql, SqlDebugConfig sqlDebugConfig)", "full_signature": "private static String handleDebugSql(final String identifier, String sql, SqlDebugConfig sqlDebugConfig)", "class_method_signature": "SqlDebugDriver.handleDebugSql(final String identifier, String sql, SqlDebugConfig sqlDebugConfig)", "testcase": false, "constructor": false}, {"identifier": "buildDebugSourceSql", "parameters": "(SqlParseNode sourceTable, SqlDebugConfig.SourceConfig sourceConfig)", "modifiers": "private static", "return": "String", "signature": "String buildDebugSourceSql(SqlParseNode sourceTable, SqlDebugConfig.SourceConfig sourceConfig)", "full_signature": "private static String buildDebugSourceSql(SqlParseNode sourceTable, SqlDebugConfig.SourceConfig sourceConfig)", "class_method_signature": "SqlDebugDriver.buildDebugSourceSql(SqlParseNode sourceTable, SqlDebugConfig.SourceConfig sourceConfig)", "testcase": false, "constructor": false}, {"identifier": "buildDebugSinkSql", "parameters": "(String identifier, SqlParseNode sinkTable)", "modifiers": "private static", "return": "String", "signature": "String buildDebugSinkSql(String identifier, SqlParseNode sinkTable)", "full_signature": "private static String buildDebugSinkSql(String identifier, SqlParseNode sinkTable)", "class_method_signature": "SqlDebugDriver.buildDebugSinkSql(String identifier, SqlParseNode sinkTable)", "testcase": false, "constructor": false}, {"identifier": "buildDebugSinkSql", "parameters": "(String identifier, SqlParseNode sinkTable, String newTableName)", "modifiers": "private static", "return": "String", "signature": "String buildDebugSinkSql(String identifier, SqlParseNode sinkTable, String newTableName)", "full_signature": "private static String buildDebugSinkSql(String identifier, SqlParseNode sinkTable, String newTableName)", "class_method_signature": "SqlDebugDriver.buildDebugSinkSql(String identifier, SqlParseNode sinkTable, String newTableName)", "testcase": false, "constructor": false}, {"identifier": "buildDebugInsertSql", "parameters": "(SqlParseNode fromTable, String targetTableName)", "modifiers": "private static", "return": "String", "signature": "String buildDebugInsertSql(SqlParseNode fromTable, String targetTableName)", "full_signature": "private static String buildDebugInsertSql(SqlParseNode fromTable, String targetTableName)", "class_method_signature": "SqlDebugDriver.buildDebugInsertSql(SqlParseNode fromTable, String targetTableName)", "testcase": false, "constructor": false}, {"identifier": "filterFormatProperties", "parameters": "(Map<String, String> properties)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> filterFormatProperties(Map<String, String> properties)", "full_signature": "private static Map<String, String> filterFormatProperties(Map<String, String> properties)", "class_method_signature": "SqlDebugDriver.filterFormatProperties(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "newSqlTableOption", "parameters": "(String key, String value)", "modifiers": "private static", "return": "SqlTableOption", "signature": "SqlTableOption newSqlTableOption(String key, String value)", "full_signature": "private static SqlTableOption newSqlTableOption(String key, String value)", "class_method_signature": "SqlDebugDriver.newSqlTableOption(String key, String value)", "testcase": false, "constructor": false}], "file": "plink-sql/plink-sql-core/src/main/java/com/github/hairless/plink/sql/SqlDebugDriver.java"}, "focal_method": {"identifier": "debug", "parameters": "(SqlDebugConfig sqlDebugConfig)", "modifiers": "public static", "return": "Map<String, List<String>>", "body": "public static Map<String, List<String>> debug(SqlDebugConfig sqlDebugConfig) throws Exception {\n        Preconditions.checkNotNull(sqlDebugConfig, \"sqlDebugConfig should be not null\");\n        Preconditions.checkNotNull(sqlDebugConfig.getSql(), \"sql should be not null\");\n        String identifier = UUID.randomUUID().toString();\n        String debugSql = handleDebugSql(identifier, sqlDebugConfig.getSql(), sqlDebugConfig);\n        log.debug(\"start sql debug,sql:{}\", debugSql);\n        SqlConfig config = SqlConfig.builder().sql(debugSql).jobName(\"sql_job_debug_test\").build();\n        SqlJob sqlJob = new SqlJob(config);\n        try {\n            CollectionDataWarehouse.registerLock(identifier);\n            sqlJob.start();\n            return CollectionDataWarehouse.getData(identifier);\n        } finally {\n            CollectionDataWarehouse.remove(identifier);\n        }\n    }", "signature": "Map<String, List<String>> debug(SqlDebugConfig sqlDebugConfig)", "full_signature": "public static Map<String, List<String>> debug(SqlDebugConfig sqlDebugConfig)", "class_method_signature": "SqlDebugDriver.debug(SqlDebugConfig sqlDebugConfig)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "getSql", "toString", "randomUUID", "handleDebugSql", "getSql", "debug", "build", "jobName", "sql", "builder", "registerLock", "start", "getData", "remove"]}, "repository": {"repo_id": 232481703, "url": "https://github.com/hairless/plink", "stars": 10, "created": "1/8/2020 5:01:32 AM +00:00", "updates": "2020-01-27T16:15:22+00:00", "fork": "False", "license": "licensed"}}