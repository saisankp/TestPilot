{"test_class": {"identifier": "MonitoringHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private RedisClient redisClient;", "modifier": "private", "type": "RedisClient", "declarator": "redisClient", "var_name": "redisClient"}, {"original_string": "private MockResourceStorage storage;", "modifier": "private", "type": "MockResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final String PREFIX = \"gateleen.\";", "modifier": "private final", "type": "String", "declarator": "PREFIX = \"gateleen.\"", "var_name": "PREFIX"}, {"original_string": "private final String PROPERTY_NAME = \"some_property_name\";", "modifier": "private final", "type": "String", "declarator": "PROPERTY_NAME = \"some_property_name\"", "var_name": "PROPERTY_NAME"}, {"original_string": "private final String REQUEST_PER_RULE_MONITORING_PATH = \"/playground/server/monitoring/rpr\";", "modifier": "private final", "type": "String", "declarator": "REQUEST_PER_RULE_MONITORING_PATH = \"/playground/server/monitoring/rpr\"", "var_name": "REQUEST_PER_RULE_MONITORING_PATH"}], "file": "gateleen-monitoring/src/test/java/org/swisspush/gateleen/monitoring/MonitoringHandlerTest.java"}, "test_case": {"identifier": "testInitRequestPerRuleMonitoringPath", "parameters": "(TestContext testContext)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitRequestPerRuleMonitoringPath(TestContext testContext){\n        MonitoringHandler mh = new MonitoringHandler(vertx, storage, PREFIX);\n        testContext.assertNull(mh.getRequestPerRuleMonitoringPath());\n\n        mh = new MonitoringHandler(vertx, storage, PREFIX, \"/gateleen/monitoring/rpr/\");\n        testContext.assertNotNull(mh.getRequestPerRuleMonitoringPath());\n        testContext.assertFalse(mh.getRequestPerRuleMonitoringPath().endsWith(\"/\"));\n\n        mh = new MonitoringHandler(vertx, storage, PREFIX, \"/gateleen/monitoring/rpr\");\n        testContext.assertNotNull(mh.getRequestPerRuleMonitoringPath());\n        testContext.assertFalse(mh.getRequestPerRuleMonitoringPath().endsWith(\"/\"));\n    }", "signature": "void testInitRequestPerRuleMonitoringPath(TestContext testContext)", "full_signature": "@Test public void testInitRequestPerRuleMonitoringPath(TestContext testContext)", "class_method_signature": "MonitoringHandlerTest.testInitRequestPerRuleMonitoringPath(TestContext testContext)", "testcase": true, "constructor": false, "invocations": ["assertNull", "getRequestPerRuleMonitoringPath", "assertNotNull", "getRequestPerRuleMonitoringPath", "assertFalse", "endsWith", "getRequestPerRuleMonitoringPath", "assertNotNull", "getRequestPerRuleMonitoringPath", "assertFalse", "endsWith", "getRequestPerRuleMonitoringPath"]}, "focal_class": {"identifier": "MonitoringHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String METRIC_NAME = \"name\";", "modifier": "public static final", "type": "String", "declarator": "METRIC_NAME = \"name\"", "var_name": "METRIC_NAME"}, {"original_string": "public static final String METRIC_ACTION = \"action\";", "modifier": "public static final", "type": "String", "declarator": "METRIC_ACTION = \"action\"", "var_name": "METRIC_ACTION"}, {"original_string": "public static final String MARK = \"mark\";", "modifier": "public static final", "type": "String", "declarator": "MARK = \"mark\"", "var_name": "MARK"}, {"original_string": "public static final String SET = \"set\";", "modifier": "public static final", "type": "String", "declarator": "SET = \"set\"", "var_name": "SET"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private boolean requestPerRuleMonitoringActive;", "modifier": "private", "type": "boolean", "declarator": "requestPerRuleMonitoringActive", "var_name": "requestPerRuleMonitoringActive"}, {"original_string": "private String requestPerRuleMonitoringProperty;", "modifier": "private", "type": "String", "declarator": "requestPerRuleMonitoringProperty", "var_name": "requestPerRuleMonitoringProperty"}, {"original_string": "private final String requestPerRuleMonitoringPath;", "modifier": "private final", "type": "String", "declarator": "requestPerRuleMonitoringPath", "var_name": "requestPerRuleMonitoringPath"}, {"original_string": "private Map<String, Long> requestPerRuleMonitoringMap;", "modifier": "private", "type": "Map<String, Long>", "declarator": "requestPerRuleMonitoringMap", "var_name": "requestPerRuleMonitoringMap"}, {"original_string": "private static Logger log = LoggerFactory.getLogger(MonitoringHandler.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MonitoringHandler.class)", "var_name": "log"}, {"original_string": "public static final String REQUESTS_CLIENT_NAME = \"requests.localhost\";", "modifier": "public static final", "type": "String", "declarator": "REQUESTS_CLIENT_NAME = \"requests.localhost\"", "var_name": "REQUESTS_CLIENT_NAME"}, {"original_string": "public static final String REQUESTS_BACKENDS_NAME = \"requests.backends\";", "modifier": "public static final", "type": "String", "declarator": "REQUESTS_BACKENDS_NAME = \"requests.backends\"", "var_name": "REQUESTS_BACKENDS_NAME"}, {"original_string": "private static final String REQUESTS_INCOMING_NAME = \"requests.incoming\";", "modifier": "private static final", "type": "String", "declarator": "REQUESTS_INCOMING_NAME = \"requests.incoming\"", "var_name": "REQUESTS_INCOMING_NAME"}, {"original_string": "public static final String PENDING_REQUESTS_METRIC = \"requests.pending.count\";", "modifier": "public static final", "type": "String", "declarator": "PENDING_REQUESTS_METRIC = \"requests.pending.count\"", "var_name": "PENDING_REQUESTS_METRIC"}, {"original_string": "public static final String ACTIVE_QUEUE_COUNT_METRIC = \"queues.active.count\";", "modifier": "public static final", "type": "String", "declarator": "ACTIVE_QUEUE_COUNT_METRIC = \"queues.active.count\"", "var_name": "ACTIVE_QUEUE_COUNT_METRIC"}, {"original_string": "public static final String LAST_USED_QUEUE_SIZE_METRIC = \"queues.last.size\";", "modifier": "public static final", "type": "String", "declarator": "LAST_USED_QUEUE_SIZE_METRIC = \"queues.last.size\"", "var_name": "LAST_USED_QUEUE_SIZE_METRIC"}, {"original_string": "public static final String ENQUEUE_METRIC = \"queues.enqueue\";", "modifier": "public static final", "type": "String", "declarator": "ENQUEUE_METRIC = \"queues.enqueue\"", "var_name": "ENQUEUE_METRIC"}, {"original_string": "public static final String DEQUEUE_METRIC = \"queues.dequeue\";", "modifier": "public static final", "type": "String", "declarator": "DEQUEUE_METRIC = \"queues.dequeue\"", "var_name": "DEQUEUE_METRIC"}, {"original_string": "public static final String LISTENER_COUNT_METRIC = \"hooks.listener.count\";", "modifier": "public static final", "type": "String", "declarator": "LISTENER_COUNT_METRIC = \"hooks.listener.count\"", "var_name": "LISTENER_COUNT_METRIC"}, {"original_string": "public static final String ROUTE_COUNT_METRIC = \"hooks.route.count\";", "modifier": "public static final", "type": "String", "declarator": "ROUTE_COUNT_METRIC = \"hooks.route.count\"", "var_name": "ROUTE_COUNT_METRIC"}, {"original_string": "@Deprecated\n    public static final String QUEUES_KEY_PREFIX = \"redisques:queues\";", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "QUEUES_KEY_PREFIX = \"redisques:queues\"", "var_name": "QUEUES_KEY_PREFIX"}, {"original_string": "@Deprecated\n    public static final int MAX_AGE_MILLISECONDS = 120000;", "modifier": "@Deprecated\n    public static final", "type": "int", "declarator": "MAX_AGE_MILLISECONDS = 120000", "var_name": "MAX_AGE_MILLISECONDS"}, {"original_string": "private static final int QUEUE_SIZE_REFRESH_TIME = 5000;", "modifier": "private static final", "type": "int", "declarator": "QUEUE_SIZE_REFRESH_TIME = 5000", "var_name": "QUEUE_SIZE_REFRESH_TIME"}, {"original_string": "public static final String REQUEST_PER_RULE_PREFIX = \"rpr.\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_PER_RULE_PREFIX = \"rpr.\"", "var_name": "REQUEST_PER_RULE_PREFIX"}, {"original_string": "public static final String REQUEST_PER_RULE_PROPERTY = \"org.swisspush.request.rule.property\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_PER_RULE_PROPERTY = \"org.swisspush.request.rule.property\"", "var_name": "REQUEST_PER_RULE_PROPERTY"}, {"original_string": "public static final String REQUEST_PER_RULE_SAMPLING_PROPERTY = \"org.swisspush.request.rule.sampling\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_PER_RULE_SAMPLING_PROPERTY = \"org.swisspush.request.rule.sampling\"", "var_name": "REQUEST_PER_RULE_SAMPLING_PROPERTY"}, {"original_string": "public static final String REQUEST_PER_RULE_EXPIRY_PROPERTY = \"org.swisspush.request.rule.expiry\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_PER_RULE_EXPIRY_PROPERTY = \"org.swisspush.request.rule.expiry\"", "var_name": "REQUEST_PER_RULE_EXPIRY_PROPERTY"}, {"original_string": "public static final long REQUEST_PER_RULE_DEFAULT_SAMPLING = 60000;", "modifier": "public static final", "type": "long", "declarator": "REQUEST_PER_RULE_DEFAULT_SAMPLING = 60000", "var_name": "REQUEST_PER_RULE_DEFAULT_SAMPLING"}, {"original_string": "public static final long REQUEST_PER_RULE_DEFAULT_EXPIRY = 86400;", "modifier": "public static final", "type": "long", "declarator": "REQUEST_PER_RULE_DEFAULT_EXPIRY = 86400", "var_name": "REQUEST_PER_RULE_DEFAULT_EXPIRY"}, {"original_string": "private final String UNKNOWN_VALUE = \"unknown\";", "modifier": "private final", "type": "String", "declarator": "UNKNOWN_VALUE = \"unknown\"", "var_name": "UNKNOWN_VALUE"}, {"original_string": "private final String EXPIRE_AFTER_HEADER = \"x-expire-after\";", "modifier": "private final", "type": "String", "declarator": "EXPIRE_AFTER_HEADER = \"x-expire-after\"", "var_name": "EXPIRE_AFTER_HEADER"}, {"original_string": "private String prefix;", "modifier": "private", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private long requestPerRuleSampling;", "modifier": "private", "type": "long", "declarator": "requestPerRuleSampling", "var_name": "requestPerRuleSampling"}, {"original_string": "private long requestPerRuleExpiry;", "modifier": "private", "type": "long", "declarator": "requestPerRuleExpiry", "var_name": "requestPerRuleExpiry"}, {"original_string": "private final UUID uuid;", "modifier": "private final", "type": "UUID", "declarator": "uuid", "var_name": "uuid"}], "methods": [{"identifier": "MonitoringHandler", "parameters": "(Vertx vertx, RedisClient redisClient, final ResourceStorage storage, String prefix)", "modifiers": "@Deprecated public", "return": "", "signature": " MonitoringHandler(Vertx vertx, RedisClient redisClient, final ResourceStorage storage, String prefix)", "full_signature": "@Deprecated public  MonitoringHandler(Vertx vertx, RedisClient redisClient, final ResourceStorage storage, String prefix)", "class_method_signature": "MonitoringHandler.MonitoringHandler(Vertx vertx, RedisClient redisClient, final ResourceStorage storage, String prefix)", "testcase": false, "constructor": true}, {"identifier": "MonitoringHandler", "parameters": "(Vertx vertx, RedisClient redisClient, final ResourceStorage storage, String prefix, String requestPerRulePath)", "modifiers": "@Deprecated public", "return": "", "signature": " MonitoringHandler(Vertx vertx, RedisClient redisClient, final ResourceStorage storage, String prefix, String requestPerRulePath)", "full_signature": "@Deprecated public  MonitoringHandler(Vertx vertx, RedisClient redisClient, final ResourceStorage storage, String prefix, String requestPerRulePath)", "class_method_signature": "MonitoringHandler.MonitoringHandler(Vertx vertx, RedisClient redisClient, final ResourceStorage storage, String prefix, String requestPerRulePath)", "testcase": false, "constructor": true}, {"identifier": "MonitoringHandler", "parameters": "(Vertx vertx, final ResourceStorage storage, String prefix)", "modifiers": "public", "return": "", "signature": " MonitoringHandler(Vertx vertx, final ResourceStorage storage, String prefix)", "full_signature": "public  MonitoringHandler(Vertx vertx, final ResourceStorage storage, String prefix)", "class_method_signature": "MonitoringHandler.MonitoringHandler(Vertx vertx, final ResourceStorage storage, String prefix)", "testcase": false, "constructor": true}, {"identifier": "MonitoringHandler", "parameters": "(Vertx vertx, final ResourceStorage storage, String prefix, String requestPerRulePath)", "modifiers": "public", "return": "", "signature": " MonitoringHandler(Vertx vertx, final ResourceStorage storage, String prefix, String requestPerRulePath)", "full_signature": "public  MonitoringHandler(Vertx vertx, final ResourceStorage storage, String prefix, String requestPerRulePath)", "class_method_signature": "MonitoringHandler.MonitoringHandler(Vertx vertx, final ResourceStorage storage, String prefix, String requestPerRulePath)", "testcase": false, "constructor": true}, {"identifier": "getMonitoringAddress", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getMonitoringAddress()", "full_signature": "protected String getMonitoringAddress()", "class_method_signature": "MonitoringHandler.getMonitoringAddress()", "testcase": false, "constructor": false}, {"identifier": "getRedisquesAddress", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getRedisquesAddress()", "full_signature": "protected String getRedisquesAddress()", "class_method_signature": "MonitoringHandler.getRedisquesAddress()", "testcase": false, "constructor": false}, {"identifier": "getRequestPerRuleMonitoringPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRequestPerRuleMonitoringPath()", "full_signature": "public String getRequestPerRuleMonitoringPath()", "class_method_signature": "MonitoringHandler.getRequestPerRuleMonitoringPath()", "testcase": false, "constructor": false}, {"identifier": "initRequestPerRuleMonitoringPath", "parameters": "(String requestPerRuleMonitoringPath)", "modifiers": "private", "return": "String", "signature": "String initRequestPerRuleMonitoringPath(String requestPerRuleMonitoringPath)", "full_signature": "private String initRequestPerRuleMonitoringPath(String requestPerRuleMonitoringPath)", "class_method_signature": "MonitoringHandler.initRequestPerRuleMonitoringPath(String requestPerRuleMonitoringPath)", "testcase": false, "constructor": false}, {"identifier": "handleRequestPerRuleMessage", "parameters": "(String metricName)", "modifiers": "private", "return": "void", "signature": "void handleRequestPerRuleMessage(String metricName)", "full_signature": "private void handleRequestPerRuleMessage(String metricName)", "class_method_signature": "MonitoringHandler.handleRequestPerRuleMessage(String metricName)", "testcase": false, "constructor": false}, {"identifier": "initRequestPerRuleMonitoring", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initRequestPerRuleMonitoring()", "full_signature": "private void initRequestPerRuleMonitoring()", "class_method_signature": "MonitoringHandler.initRequestPerRuleMonitoring()", "testcase": false, "constructor": false}, {"identifier": "isRequestPerRuleMonitoringActive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRequestPerRuleMonitoringActive()", "full_signature": "public boolean isRequestPerRuleMonitoringActive()", "class_method_signature": "MonitoringHandler.isRequestPerRuleMonitoringActive()", "testcase": false, "constructor": false}, {"identifier": "getRequestPerRuleMonitoringMap", "parameters": "()", "modifiers": "private", "return": "Map<String, Long>", "signature": "Map<String, Long> getRequestPerRuleMonitoringMap()", "full_signature": "private Map<String, Long> getRequestPerRuleMonitoringMap()", "class_method_signature": "MonitoringHandler.getRequestPerRuleMonitoringMap()", "testcase": false, "constructor": false}, {"identifier": "registerQueueSizeTrackingTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerQueueSizeTrackingTimer()", "full_signature": "private void registerQueueSizeTrackingTimer()", "class_method_signature": "MonitoringHandler.registerQueueSizeTrackingTimer()", "testcase": false, "constructor": false}, {"identifier": "registerRequestPerRuleMonitoringTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerRequestPerRuleMonitoringTimer()", "full_signature": "private void registerRequestPerRuleMonitoringTimer()", "class_method_signature": "MonitoringHandler.registerRequestPerRuleMonitoringTimer()", "testcase": false, "constructor": false}, {"identifier": "configureSamplingAndExpiry", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void configureSamplingAndExpiry()", "full_signature": "private void configureSamplingAndExpiry()", "class_method_signature": "MonitoringHandler.configureSamplingAndExpiry()", "testcase": false, "constructor": false}, {"identifier": "getRequestPerRuleSampling", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRequestPerRuleSampling()", "full_signature": "public long getRequestPerRuleSampling()", "class_method_signature": "MonitoringHandler.getRequestPerRuleSampling()", "testcase": false, "constructor": false}, {"identifier": "getRequestPerRuleExpiry", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRequestPerRuleExpiry()", "full_signature": "public long getRequestPerRuleExpiry()", "class_method_signature": "MonitoringHandler.getRequestPerRuleExpiry()", "testcase": false, "constructor": false}, {"identifier": "updateIncomingRequests", "parameters": "(HttpServerRequest request)", "modifiers": "public", "return": "void", "signature": "void updateIncomingRequests(HttpServerRequest request)", "full_signature": "public void updateIncomingRequests(HttpServerRequest request)", "class_method_signature": "MonitoringHandler.updateIncomingRequests(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "updateRequestPerRuleMonitoring", "parameters": "(HttpServerRequest request, String metricName)", "modifiers": "public", "return": "void", "signature": "void updateRequestPerRuleMonitoring(HttpServerRequest request, String metricName)", "full_signature": "public void updateRequestPerRuleMonitoring(HttpServerRequest request, String metricName)", "class_method_signature": "MonitoringHandler.updateRequestPerRuleMonitoring(HttpServerRequest request, String metricName)", "testcase": false, "constructor": false}, {"identifier": "submitRequestPerRuleMonitoringMetrics", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void submitRequestPerRuleMonitoringMetrics()", "full_signature": "private void submitRequestPerRuleMonitoringMetrics()", "class_method_signature": "MonitoringHandler.submitRequestPerRuleMonitoringMetrics()", "testcase": false, "constructor": false}, {"identifier": "writeRequestPerRuleMonitoringMetricsToStorage", "parameters": "(String name)", "modifiers": "private", "return": "void", "signature": "void writeRequestPerRuleMonitoringMetricsToStorage(String name)", "full_signature": "private void writeRequestPerRuleMonitoringMetricsToStorage(String name)", "class_method_signature": "MonitoringHandler.writeRequestPerRuleMonitoringMetricsToStorage(String name)", "testcase": false, "constructor": false}, {"identifier": "updateRequestsMeter", "parameters": "(String target, String uri)", "modifiers": "public", "return": "void", "signature": "void updateRequestsMeter(String target, String uri)", "full_signature": "public void updateRequestsMeter(String target, String uri)", "class_method_signature": "MonitoringHandler.updateRequestsMeter(String target, String uri)", "testcase": false, "constructor": false}, {"identifier": "startRequestMetricTracking", "parameters": "(final String metricName, String targetUri)", "modifiers": "public", "return": "long", "signature": "long startRequestMetricTracking(final String metricName, String targetUri)", "full_signature": "public long startRequestMetricTracking(final String metricName, String targetUri)", "class_method_signature": "MonitoringHandler.startRequestMetricTracking(final String metricName, String targetUri)", "testcase": false, "constructor": false}, {"identifier": "stopRequestMetricTracking", "parameters": "(final String metricName, long startTime, String targetUri)", "modifiers": "public", "return": "void", "signature": "void stopRequestMetricTracking(final String metricName, long startTime, String targetUri)", "full_signature": "public void stopRequestMetricTracking(final String metricName, long startTime, String targetUri)", "class_method_signature": "MonitoringHandler.stopRequestMetricTracking(final String metricName, long startTime, String targetUri)", "testcase": false, "constructor": false}, {"identifier": "updatePendingRequestCount", "parameters": "(boolean incrementCount)", "modifiers": "private", "return": "void", "signature": "void updatePendingRequestCount(boolean incrementCount)", "full_signature": "private void updatePendingRequestCount(boolean incrementCount)", "class_method_signature": "MonitoringHandler.updatePendingRequestCount(boolean incrementCount)", "testcase": false, "constructor": false}, {"identifier": "updateQueueCountInformation", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateQueueCountInformation()", "full_signature": "public void updateQueueCountInformation()", "class_method_signature": "MonitoringHandler.updateQueueCountInformation()", "testcase": false, "constructor": false}, {"identifier": "updateLastUsedQueueSizeInformation", "parameters": "(final String queue)", "modifiers": "public", "return": "void", "signature": "void updateLastUsedQueueSizeInformation(final String queue)", "full_signature": "public void updateLastUsedQueueSizeInformation(final String queue)", "class_method_signature": "MonitoringHandler.updateLastUsedQueueSizeInformation(final String queue)", "testcase": false, "constructor": false}, {"identifier": "updateQueuesSizesInformation", "parameters": "(final int numQueues, final boolean showEmptyQueues, final MonitoringCallback callback)", "modifiers": "public", "return": "void", "signature": "void updateQueuesSizesInformation(final int numQueues, final boolean showEmptyQueues, final MonitoringCallback callback)", "full_signature": "public void updateQueuesSizesInformation(final int numQueues, final boolean showEmptyQueues, final MonitoringCallback callback)", "class_method_signature": "MonitoringHandler.updateQueuesSizesInformation(final int numQueues, final boolean showEmptyQueues, final MonitoringCallback callback)", "testcase": false, "constructor": false}, {"identifier": "collectQueueLengths", "parameters": "(final List<String> queueNames, final int numOfQueues, final boolean showEmptyQueues, final QueueLengthCollectingCallback callback)", "modifiers": "private", "return": "void", "signature": "void collectQueueLengths(final List<String> queueNames, final int numOfQueues, final boolean showEmptyQueues, final QueueLengthCollectingCallback callback)", "full_signature": "private void collectQueueLengths(final List<String> queueNames, final int numOfQueues, final boolean showEmptyQueues, final QueueLengthCollectingCallback callback)", "class_method_signature": "MonitoringHandler.collectQueueLengths(final List<String> queueNames, final int numOfQueues, final boolean showEmptyQueues, final QueueLengthCollectingCallback callback)", "testcase": false, "constructor": false}, {"identifier": "updateEnqueue", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateEnqueue()", "full_signature": "public void updateEnqueue()", "class_method_signature": "MonitoringHandler.updateEnqueue()", "testcase": false, "constructor": false}, {"identifier": "updateDequeue", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateDequeue()", "full_signature": "public void updateDequeue()", "class_method_signature": "MonitoringHandler.updateDequeue()", "testcase": false, "constructor": false}, {"identifier": "updateListenerCount", "parameters": "(long count)", "modifiers": "public", "return": "void", "signature": "void updateListenerCount(long count)", "full_signature": "public void updateListenerCount(long count)", "class_method_signature": "MonitoringHandler.updateListenerCount(long count)", "testcase": false, "constructor": false}, {"identifier": "updateRoutesCount", "parameters": "(long count)", "modifiers": "public", "return": "void", "signature": "void updateRoutesCount(long count)", "full_signature": "public void updateRoutesCount(long count)", "class_method_signature": "MonitoringHandler.updateRoutesCount(long count)", "testcase": false, "constructor": false}, {"identifier": "sortResultMap", "parameters": "(List<Map.Entry<String, Long>> input)", "modifiers": "private", "return": "void", "signature": "void sortResultMap(List<Map.Entry<String, Long>> input)", "full_signature": "private void sortResultMap(List<Map.Entry<String, Long>> input)", "class_method_signature": "MonitoringHandler.sortResultMap(List<Map.Entry<String, Long>> input)", "testcase": false, "constructor": false}, {"identifier": "isRequestToExternalTarget", "parameters": "(String target)", "modifiers": "private", "return": "boolean", "signature": "boolean isRequestToExternalTarget(String target)", "full_signature": "private boolean isRequestToExternalTarget(String target)", "class_method_signature": "MonitoringHandler.isRequestToExternalTarget(String target)", "testcase": false, "constructor": false}, {"identifier": "shouldBeTracked", "parameters": "(String uri)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldBeTracked(String uri)", "full_signature": "private boolean shouldBeTracked(String uri)", "class_method_signature": "MonitoringHandler.shouldBeTracked(String uri)", "testcase": false, "constructor": false}], "file": "gateleen-monitoring/src/main/java/org/swisspush/gateleen/monitoring/MonitoringHandler.java"}, "focal_method": {"identifier": "initRequestPerRuleMonitoringPath", "parameters": "(String requestPerRuleMonitoringPath)", "modifiers": "private", "return": "String", "body": "private String initRequestPerRuleMonitoringPath(String requestPerRuleMonitoringPath){\n        String str = StringUtils.trim(requestPerRuleMonitoringPath);\n        if(StringUtils.isNotEmpty(str) && str.endsWith(\"/\")){\n            str = str.substring(0, str.length()-1);\n        }\n        return str;\n    }", "signature": "String initRequestPerRuleMonitoringPath(String requestPerRuleMonitoringPath)", "full_signature": "private String initRequestPerRuleMonitoringPath(String requestPerRuleMonitoringPath)", "class_method_signature": "MonitoringHandler.initRequestPerRuleMonitoringPath(String requestPerRuleMonitoringPath)", "testcase": false, "constructor": false, "invocations": ["trim", "isNotEmpty", "endsWith", "substring", "length"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}