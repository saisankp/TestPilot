{"test_class": {"identifier": "TestLogStrategy", "superclass": "extends TagStrategyTestBase", "interfaces": "", "fields": [], "file": "org.jvoicexml.profile.vxml21/src/test/java/org/jvoicexml/profile/vxml21/tagstrategy/TestLogStrategy.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception, JVoiceXMLEvent {\n        final Block block = createBlock();\n        final Log log = block.appendChild(Log.class);\n        final String message = TestAppender.TEST_PREFIX\n                + \"this is a simple log test\";\n        log.addText(message);\n\n        LogStrategy strategy = new LogStrategy();\n        executeTagStrategy(log, strategy);\n        Assert.assertTrue(\"message not found in appender\",\n                TestAppender.containsMessage(message));\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "TestLogStrategy.testExecute()", "testcase": true, "constructor": false, "invocations": ["createBlock", "appendChild", "addText", "executeTagStrategy", "assertTrue", "containsMessage"]}, "focal_class": {"identifier": "LogStrategy", "superclass": "extends AbstractTagStrategy", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager.getLogger(LogStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger(LogStrategy.class)", "var_name": "LOGGER"}, {"original_string": "private static final Collection<String> EVAL_ATTRIBUTES;", "modifier": "private static final", "type": "Collection<String>", "declarator": "EVAL_ATTRIBUTES", "var_name": "EVAL_ATTRIBUTES"}], "methods": [{"identifier": "LogStrategy", "parameters": "()", "modifiers": "", "return": "", "signature": " LogStrategy()", "full_signature": "  LogStrategy()", "class_method_signature": "LogStrategy.LogStrategy()", "testcase": false, "constructor": true}, {"identifier": "getEvalAttributes", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getEvalAttributes()", "full_signature": "public Collection<String> getEvalAttributes()", "class_method_signature": "LogStrategy.getEvalAttributes()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "public", "return": "void", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "LogStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.profile.vxml21/src/main/java/org/jvoicexml/profile/vxml21/tagstrategy/LogStrategy.java"}, "focal_method": {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "public", "return": "void", "body": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node) throws JVoiceXMLEvent {\n        final NodeList list = node.getChildNodes();\n        final StringBuilder outputText = new StringBuilder();\n\n        // get and write the label attribute\n        final String label = (String) getAttribute(Log.ATTRIBUTE_LABEL);\n        if (label != null) {\n            outputText.append(label);\n            outputText.append(\": \");\n        }\n\n        final String expr = (String) getAttribute(Log.ATTRIBUTE_EXPR);\n        if (expr != null) {\n            outputText.append(expr);\n        }\n\n        // process children\n        final DataModel model = context.getDataModel();\n        for (int i = 0; i < list.getLength(); i++) {\n            final VoiceXmlNode current = (VoiceXmlNode) list.item(i);\n            if (current instanceof Text) {\n                // text node handling\n                final Text text = (Text) current;\n                final String msg = text.getNodeValue();\n                if (msg == null) {\n                    LOGGER.warn(\"ignoring empty log node\");\n                } else {\n                    outputText.append(msg.trim());\n                }\n            }\n\n            if (current instanceof Value) {\n                // value node handling\n                final Value value = (Value) current;\n                String currentExpr = value.getExpr();\n                if (currentExpr != null) {\n                    final String unescapedCurrentExpr = StringEscapeUtils\n                            .unescapeXml(currentExpr);\n                    if (!currentExpr.endsWith(\";\")) {\n                        currentExpr += \";\";\n                    }\n                    final Object eval = model.evaluateExpression(\n                            unescapedCurrentExpr, Object.class);\n                    final String evalReadable = model.toString(eval);\n                    outputText.append(evalReadable);\n                }\n            }\n        }\n\n        // write the eventual tag-value to the class-logger,\n        // priority Level.INFO\n        if (outputText.length() > 0) {\n            LOGGER.info(outputText.toString());\n        }\n    }", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "LogStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false, "invocations": ["getChildNodes", "getAttribute", "append", "append", "getAttribute", "append", "getDataModel", "getLength", "item", "getNodeValue", "warn", "append", "trim", "getExpr", "unescapeXml", "endsWith", "evaluateExpression", "toString", "append", "length", "info", "toString"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}