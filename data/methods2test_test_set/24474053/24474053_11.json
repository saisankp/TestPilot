{"test_class": {"identifier": "SimSwitcherQueryTest", "superclass": "extends LuceneTestCase", "interfaces": "", "fields": [{"original_string": "private IndexSearcher searcherUnderTest;", "modifier": "private", "type": "IndexSearcher", "declarator": "searcherUnderTest", "var_name": "searcherUnderTest"}, {"original_string": "private RandomIndexWriter indexWriterUnderTest;", "modifier": "private", "type": "RandomIndexWriter", "declarator": "indexWriterUnderTest", "var_name": "indexWriterUnderTest"}, {"original_string": "private IndexReader indexReaderUnderTest;", "modifier": "private", "type": "IndexReader", "declarator": "indexReaderUnderTest", "var_name": "indexReaderUnderTest"}, {"original_string": "private Directory dirUnderTest;", "modifier": "private", "type": "Directory", "declarator": "dirUnderTest", "var_name": "dirUnderTest"}, {"original_string": "private Similarity similarity;", "modifier": "private", "type": "Similarity", "declarator": "similarity", "var_name": "similarity"}, {"original_string": "private StandardAnalyzer analyzer;", "modifier": "private", "type": "StandardAnalyzer", "declarator": "analyzer", "var_name": "analyzer"}, {"original_string": "private Map<String, Similarity> similarityMap;", "modifier": "private", "type": "Map<String, Similarity>", "declarator": "similarityMap", "var_name": "similarityMap"}, {"original_string": "private final String[] docs = new String[] {\"how now brown cow\",\n            \"brown is the color of cows\",\n            \"brown cow\",\n            \"banana cows are yummy\"};", "modifier": "private final", "type": "String[]", "declarator": "docs = new String[] {\"how now brown cow\",\n            \"brown is the color of cows\",\n            \"brown cow\",\n            \"banana cows are yummy\"}", "var_name": "docs"}], "file": "extra/src/test/java/org/wikimedia/search/extra/simswitcher/SimSwitcherQueryTest.java"}, "test_case": {"identifier": "testExplain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExplain() throws IOException {\n        String q = \"brown cow\";\n        for (Map.Entry<String, Similarity> entry : similarityMap.entrySet()) {\n            String msg = \"switch from \" + similarity.getClass().getSimpleName() + \" to \" + entry.getKey();\n            Query query = new QueryBuilder(analyzer).createBooleanQuery(entry.getKey(), q);\n            Query hacked = new SimSwitcherQuery(entry.getValue(), new QueryBuilder(analyzer).createBooleanQuery(\"main_field\", q));\n            TopDocs docs = searcherUnderTest.search(query, 10);\n            Weight weight = searcherUnderTest.createWeight(searcherUnderTest.rewrite(query), true, 1F);\n            Weight hackedWeight = searcherUnderTest.createWeight(searcherUnderTest.rewrite(hacked), true, 1F);\n            Explanation exp = searcherUnderTest.explain(query, docs.scoreDocs[0].doc);\n            Explanation hackExp = searcherUnderTest.explain(hacked, docs.scoreDocs[0].doc);\n            assertEquals(msg, exp.getValue(), hackExp.getValue(), Math.ulp(exp.getValue()));\n        }\n    }", "signature": "void testExplain()", "full_signature": "@Test public void testExplain()", "class_method_signature": "SimSwitcherQueryTest.testExplain()", "testcase": true, "constructor": false, "invocations": ["entrySet", "getSimpleName", "getClass", "getKey", "createBooleanQuery", "getKey", "getValue", "createBooleanQuery", "search", "createWeight", "rewrite", "createWeight", "rewrite", "explain", "explain", "assertEquals", "getValue", "getValue", "ulp", "getValue"]}, "focal_class": {"identifier": "SimSwitcherQuery", "superclass": "extends Query", "interfaces": "", "fields": [{"original_string": "private final Similarity similarity;", "modifier": "private final", "type": "Similarity", "declarator": "similarity", "var_name": "similarity"}, {"original_string": "private final Query subQuery;", "modifier": "private final", "type": "Query", "declarator": "subQuery", "var_name": "subQuery"}], "methods": [{"identifier": "SimSwitcherQuery", "parameters": "(Similarity similarity, Query subQuery)", "modifiers": "public", "return": "", "signature": " SimSwitcherQuery(Similarity similarity, Query subQuery)", "full_signature": "public  SimSwitcherQuery(Similarity similarity, Query subQuery)", "class_method_signature": "SimSwitcherQuery.SimSwitcherQuery(Similarity similarity, Query subQuery)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "(String field)", "modifiers": "@Override public", "return": "String", "signature": "String toString(String field)", "full_signature": "@Override public String toString(String field)", "class_method_signature": "SimSwitcherQuery.toString(String field)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override @SuppressFBWarnings(value = \"BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS\", justification = \"handled by sameClassAs\") public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override @SuppressFBWarnings(value = \"BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS\", justification = \"handled by sameClassAs\") public boolean equals(Object obj)", "class_method_signature": "SimSwitcherQuery.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SimSwitcherQuery.hashCode()", "testcase": false, "constructor": false}, {"identifier": "createWeight", "parameters": "(IndexSearcher searcher, boolean needsScores, float boost)", "modifiers": "@Override public", "return": "Weight", "signature": "Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost)", "full_signature": "@Override public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost)", "class_method_signature": "SimSwitcherQuery.createWeight(IndexSearcher searcher, boolean needsScores, float boost)", "testcase": false, "constructor": false}, {"identifier": "getSimilarity", "parameters": "()", "modifiers": "public", "return": "Similarity", "signature": "Similarity getSimilarity()", "full_signature": "public Similarity getSimilarity()", "class_method_signature": "SimSwitcherQuery.getSimilarity()", "testcase": false, "constructor": false}, {"identifier": "getSubQuery", "parameters": "()", "modifiers": "public", "return": "Query", "signature": "Query getSubQuery()", "full_signature": "public Query getSubQuery()", "class_method_signature": "SimSwitcherQuery.getSubQuery()", "testcase": false, "constructor": false}], "file": "extra/src/main/java/org/wikimedia/search/extra/simswitcher/SimSwitcherQuery.java"}, "focal_method": {"identifier": "createWeight", "parameters": "(IndexSearcher searcher, boolean needsScores, float boost)", "modifiers": "@Override public", "return": "Weight", "body": "@Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n        if (!needsScores) {\n            return searcher.createWeight(subQuery, false, boost);\n        }\n        final Similarity oldSim = searcher.getSimilarity(true);\n        try {\n            // XXX: hackish, this only works because a searcher\n            // is created per SearchContext (multiple queries does not share the\n            // same ContextIndexSearcher)\n            // and that setSimilarity is delegated to super not the real IndexSearcher\n            searcher.setSimilarity(similarity);\n            return searcher.createWeight(subQuery, true, boost);\n        } finally {\n            searcher.setSimilarity(oldSim);\n        }\n    }", "signature": "Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost)", "full_signature": "@Override public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost)", "class_method_signature": "SimSwitcherQuery.createWeight(IndexSearcher searcher, boolean needsScores, float boost)", "testcase": false, "constructor": false, "invocations": ["createWeight", "getSimilarity", "setSimilarity", "createWeight", "setSimilarity"]}, "repository": {"repo_id": 24474053, "url": "https://github.com/wikimedia/search-extra", "stars": 37, "created": "9/25/2014 8:26:03 PM +00:00", "updates": "2019-12-06T15:10:34+00:00", "fork": "False", "license": "licensed"}}