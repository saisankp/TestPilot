{"test_class": {"identifier": "FileUtilTest", "superclass": "extends CachedLogger", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/FileUtilTest.java"}, "test_case": {"identifier": "toFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toFile() {\n        assertNull(FileUtil.toFile(null));\n\n        File file = new File(ClassLoaderUtil.getClasspath());\n        try {\n            assertEquals(file, FileUtil.toFile(file.toURI().toURL()));\n        } catch (MalformedURLException e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "signature": "void toFile()", "full_signature": "@Test public void toFile()", "class_method_signature": "FileUtilTest.toFile()", "testcase": true, "constructor": false, "invocations": ["assertNull", "toFile", "getClasspath", "assertEquals", "toFile", "toURL", "toURI", "error", "getMessage"]}, "focal_class": {"identifier": "FileUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char COLON_CHAR = ':';", "modifier": "private static final", "type": "char", "declarator": "COLON_CHAR = ':'", "var_name": "COLON_CHAR"}, {"original_string": "private static final String UNC_PREFIX = \"//\";", "modifier": "private static final", "type": "String", "declarator": "UNC_PREFIX = \"//\"", "var_name": "UNC_PREFIX"}, {"original_string": "private static final String SLASH = \"/\";", "modifier": "private static final", "type": "String", "declarator": "SLASH = \"/\"", "var_name": "SLASH"}, {"original_string": "private static final char SLASH_CHAR = '/';", "modifier": "private static final", "type": "char", "declarator": "SLASH_CHAR = '/'", "var_name": "SLASH_CHAR"}, {"original_string": "private static final char BACKSLASH_CHAR = '\\\\';", "modifier": "private static final", "type": "char", "declarator": "BACKSLASH_CHAR = '\\\\'", "var_name": "BACKSLASH_CHAR"}, {"original_string": "private static final String ALL_SLASH = \"/\\\\\";", "modifier": "private static final", "type": "String", "declarator": "ALL_SLASH = \"/\\\\\"", "var_name": "ALL_SLASH"}, {"original_string": "public static final String CURRENT_DIR = \".\";", "modifier": "public static final", "type": "String", "declarator": "CURRENT_DIR = \".\"", "var_name": "CURRENT_DIR"}, {"original_string": "public static final String UP_LEVEL_DIR = \"..\";", "modifier": "public static final", "type": "String", "declarator": "UP_LEVEL_DIR = \"..\"", "var_name": "UP_LEVEL_DIR"}, {"original_string": "private static final char EXTENSION_SEPARATOR = '.';", "modifier": "private static final", "type": "char", "declarator": "EXTENSION_SEPARATOR = '.'", "var_name": "EXTENSION_SEPARATOR"}, {"original_string": "private static final char UNIX_SEPARATOR = '/';", "modifier": "private static final", "type": "char", "declarator": "UNIX_SEPARATOR = '/'", "var_name": "UNIX_SEPARATOR"}, {"original_string": "private static final char WINDOWS_SEPARATOR = '\\\\';", "modifier": "private static final", "type": "char", "declarator": "WINDOWS_SEPARATOR = '\\\\'", "var_name": "WINDOWS_SEPARATOR"}, {"original_string": "private static final String TEMP_FILE_PREFIX = \"temp_file_prefix-\";", "modifier": "private static final", "type": "String", "declarator": "TEMP_FILE_PREFIX = \"temp_file_prefix-\"", "var_name": "TEMP_FILE_PREFIX"}, {"original_string": "private static final Pattern schemePrefixPattern = Pattern.compile(\n            \"(file:/*[a-z]:)|(\\\\w+://.+?/)|((jar|zip):.+!/)|(\\\\w+:)\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "schemePrefixPattern = Pattern.compile(\n            \"(file:/*[a-z]:)|(\\\\w+://.+?/)|((jar|zip):.+!/)|(\\\\w+:)\", Pattern.CASE_INSENSITIVE)", "var_name": "schemePrefixPattern"}], "methods": [{"identifier": "toFile", "parameters": "(URL url)", "modifiers": "public static", "return": "File", "signature": "File toFile(URL url)", "full_signature": "public static File toFile(URL url)", "class_method_signature": "FileUtil.toFile(URL url)", "testcase": false, "constructor": false}, {"identifier": "exist", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean exist(String path)", "full_signature": "public static boolean exist(String path)", "class_method_signature": "FileUtil.exist(String path)", "testcase": false, "constructor": false}, {"identifier": "exist", "parameters": "(File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean exist(File file)", "full_signature": "public static boolean exist(File file)", "class_method_signature": "FileUtil.exist(File file)", "testcase": false, "constructor": false}, {"identifier": "exist", "parameters": "(String directory, String regexp)", "modifiers": "public static", "return": "boolean", "signature": "boolean exist(String directory, String regexp)", "full_signature": "public static boolean exist(String directory, String regexp)", "class_method_signature": "FileUtil.exist(String directory, String regexp)", "testcase": false, "constructor": false}, {"identifier": "isDirectory", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDirectory(String path)", "full_signature": "public static boolean isDirectory(String path)", "class_method_signature": "FileUtil.isDirectory(String path)", "testcase": false, "constructor": false}, {"identifier": "isDirectory", "parameters": "(File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDirectory(File file)", "full_signature": "public static boolean isDirectory(File file)", "class_method_signature": "FileUtil.isDirectory(File file)", "testcase": false, "constructor": false}, {"identifier": "isFile", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFile(String path)", "full_signature": "public static boolean isFile(String path)", "class_method_signature": "FileUtil.isFile(String path)", "testcase": false, "constructor": false}, {"identifier": "isFile", "parameters": "(File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFile(File file)", "full_signature": "public static boolean isFile(File file)", "class_method_signature": "FileUtil.isFile(File file)", "testcase": false, "constructor": false}, {"identifier": "listDirSuffixFiles", "parameters": "(File dir, final String suffix)", "modifiers": "public static", "return": "File[]", "signature": "File[] listDirSuffixFiles(File dir, final String suffix)", "full_signature": "public static File[] listDirSuffixFiles(File dir, final String suffix)", "class_method_signature": "FileUtil.listDirSuffixFiles(File dir, final String suffix)", "testcase": false, "constructor": false}, {"identifier": "listDirSuffixFiles", "parameters": "(String dirPath, final String suffix)", "modifiers": "public static", "return": "File[]", "signature": "File[] listDirSuffixFiles(String dirPath, final String suffix)", "full_signature": "public static File[] listDirSuffixFiles(String dirPath, final String suffix)", "class_method_signature": "FileUtil.listDirSuffixFiles(String dirPath, final String suffix)", "testcase": false, "constructor": false}, {"identifier": "listDirAllConditionFiles", "parameters": "(File dir, final boolean...conditions)", "modifiers": "public static", "return": "File[]", "signature": "File[] listDirAllConditionFiles(File dir, final boolean...conditions)", "full_signature": "public static File[] listDirAllConditionFiles(File dir, final boolean...conditions)", "class_method_signature": "FileUtil.listDirAllConditionFiles(File dir, final boolean...conditions)", "testcase": false, "constructor": false}, {"identifier": "listDirAllConditionFiles", "parameters": "(String dirPath, final boolean...conditions)", "modifiers": "public static", "return": "File[]", "signature": "File[] listDirAllConditionFiles(String dirPath, final boolean...conditions)", "full_signature": "public static File[] listDirAllConditionFiles(String dirPath, final boolean...conditions)", "class_method_signature": "FileUtil.listDirAllConditionFiles(String dirPath, final boolean...conditions)", "testcase": false, "constructor": false}, {"identifier": "listDirAnyConditionFiles", "parameters": "(File dir, final boolean...conditions)", "modifiers": "public static", "return": "File[]", "signature": "File[] listDirAnyConditionFiles(File dir, final boolean...conditions)", "full_signature": "public static File[] listDirAnyConditionFiles(File dir, final boolean...conditions)", "class_method_signature": "FileUtil.listDirAnyConditionFiles(File dir, final boolean...conditions)", "testcase": false, "constructor": false}, {"identifier": "listDirAnyConditionFiles", "parameters": "(String dirPath, final boolean...conditions)", "modifiers": "public static", "return": "File[]", "signature": "File[] listDirAnyConditionFiles(String dirPath, final boolean...conditions)", "full_signature": "public static File[] listDirAnyConditionFiles(String dirPath, final boolean...conditions)", "class_method_signature": "FileUtil.listDirAnyConditionFiles(String dirPath, final boolean...conditions)", "testcase": false, "constructor": false}, {"identifier": "file", "parameters": "(String filename)", "modifiers": "public static", "return": "File", "signature": "File file(String filename)", "full_signature": "public static File file(String filename)", "class_method_signature": "FileUtil.file(String filename)", "testcase": false, "constructor": false}, {"identifier": "file", "parameters": "(File parent, String child)", "modifiers": "public static", "return": "File", "signature": "File file(File parent, String child)", "full_signature": "public static File file(File parent, String child)", "class_method_signature": "FileUtil.file(File parent, String child)", "testcase": false, "constructor": false}, {"identifier": "readBytes", "parameters": "(String file)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readBytes(String file)", "full_signature": "public static byte[] readBytes(String file)", "class_method_signature": "FileUtil.readBytes(String file)", "testcase": false, "constructor": false}, {"identifier": "readBytes", "parameters": "(File file)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readBytes(File file)", "full_signature": "public static byte[] readBytes(File file)", "class_method_signature": "FileUtil.readBytes(File file)", "testcase": false, "constructor": false}, {"identifier": "getFileSize", "parameters": "(String fileName)", "modifiers": "public static", "return": "int", "signature": "int getFileSize(String fileName)", "full_signature": "public static int getFileSize(String fileName)", "class_method_signature": "FileUtil.getFileSize(String fileName)", "testcase": false, "constructor": false}, {"identifier": "createFile", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean createFile(String path)", "full_signature": "public static boolean createFile(String path)", "class_method_signature": "FileUtil.createFile(String path)", "testcase": false, "constructor": false}, {"identifier": "createFile", "parameters": "(String path, boolean override)", "modifiers": "public static", "return": "boolean", "signature": "boolean createFile(String path, boolean override)", "full_signature": "public static boolean createFile(String path, boolean override)", "class_method_signature": "FileUtil.createFile(String path, boolean override)", "testcase": false, "constructor": false}, {"identifier": "createDir", "parameters": "(String path, boolean override)", "modifiers": "public static", "return": "boolean", "signature": "boolean createDir(String path, boolean override)", "full_signature": "public static boolean createDir(String path, boolean override)", "class_method_signature": "FileUtil.createDir(String path, boolean override)", "testcase": false, "constructor": false}, {"identifier": "createDir", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean createDir(String path)", "full_signature": "public static boolean createDir(String path)", "class_method_signature": "FileUtil.createDir(String path)", "testcase": false, "constructor": false}, {"identifier": "createParentDir", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean createParentDir(String path)", "full_signature": "public static boolean createParentDir(String path)", "class_method_signature": "FileUtil.createParentDir(String path)", "testcase": false, "constructor": false}, {"identifier": "createParentDir", "parameters": "(File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean createParentDir(File file)", "full_signature": "public static boolean createParentDir(File file)", "class_method_signature": "FileUtil.createParentDir(File file)", "testcase": false, "constructor": false}, {"identifier": "createParentDir", "parameters": "(String path, boolean override)", "modifiers": "public static", "return": "boolean", "signature": "boolean createParentDir(String path, boolean override)", "full_signature": "public static boolean createParentDir(String path, boolean override)", "class_method_signature": "FileUtil.createParentDir(String path, boolean override)", "testcase": false, "constructor": false}, {"identifier": "createParentDir", "parameters": "(File file, boolean override)", "modifiers": "public static", "return": "boolean", "signature": "boolean createParentDir(File file, boolean override)", "full_signature": "public static boolean createParentDir(File file, boolean override)", "class_method_signature": "FileUtil.createParentDir(File file, boolean override)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean delete(File file)", "full_signature": "public static boolean delete(File file)", "class_method_signature": "FileUtil.delete(File file)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean delete(String path)", "full_signature": "public static boolean delete(String path)", "class_method_signature": "FileUtil.delete(String path)", "testcase": false, "constructor": false}, {"identifier": "deleteDir", "parameters": "(File dir)", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteDir(File dir)", "full_signature": "public static boolean deleteDir(File dir)", "class_method_signature": "FileUtil.deleteDir(File dir)", "testcase": false, "constructor": false}, {"identifier": "deleteDir", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteDir(String path)", "full_signature": "public static boolean deleteDir(String path)", "class_method_signature": "FileUtil.deleteDir(String path)", "testcase": false, "constructor": false}, {"identifier": "lastModifiedTime", "parameters": "(File file)", "modifiers": "public static", "return": "Date", "signature": "Date lastModifiedTime(File file)", "full_signature": "public static Date lastModifiedTime(File file)", "class_method_signature": "FileUtil.lastModifiedTime(File file)", "testcase": false, "constructor": false}, {"identifier": "lastModifiedTime", "parameters": "(String path)", "modifiers": "public static", "return": "Date", "signature": "Date lastModifiedTime(String path)", "full_signature": "public static Date lastModifiedTime(String path)", "class_method_signature": "FileUtil.lastModifiedTime(String path)", "testcase": false, "constructor": false}, {"identifier": "normalizeAbsolutePath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String normalizeAbsolutePath(String path)", "full_signature": "public static String normalizeAbsolutePath(String path)", "class_method_signature": "FileUtil.normalizeAbsolutePath(String path)", "testcase": false, "constructor": false}, {"identifier": "normalizeAbsolutePath", "parameters": "(String path, boolean removeTrailingSlash)", "modifiers": "public static", "return": "String", "signature": "String normalizeAbsolutePath(String path, boolean removeTrailingSlash)", "full_signature": "public static String normalizeAbsolutePath(String path, boolean removeTrailingSlash)", "class_method_signature": "FileUtil.normalizeAbsolutePath(String path, boolean removeTrailingSlash)", "testcase": false, "constructor": false}, {"identifier": "normalizeWindowsPath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String normalizeWindowsPath(String path)", "full_signature": "public static String normalizeWindowsPath(String path)", "class_method_signature": "FileUtil.normalizeWindowsPath(String path)", "testcase": false, "constructor": false}, {"identifier": "normalizeUnixPath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String normalizeUnixPath(String path)", "full_signature": "public static String normalizeUnixPath(String path)", "class_method_signature": "FileUtil.normalizeUnixPath(String path)", "testcase": false, "constructor": false}, {"identifier": "normalizeRelativePath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String normalizeRelativePath(String path)", "full_signature": "public static String normalizeRelativePath(String path)", "class_method_signature": "FileUtil.normalizeRelativePath(String path)", "testcase": false, "constructor": false}, {"identifier": "normalizeRelativePath", "parameters": "(String path, boolean removeTrailingSlash)", "modifiers": "public static", "return": "String", "signature": "String normalizeRelativePath(String path, boolean removeTrailingSlash)", "full_signature": "public static String normalizeRelativePath(String path, boolean removeTrailingSlash)", "class_method_signature": "FileUtil.normalizeRelativePath(String path, boolean removeTrailingSlash)", "testcase": false, "constructor": false}, {"identifier": "normalizePath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String normalizePath(String path)", "full_signature": "public static String normalizePath(String path)", "class_method_signature": "FileUtil.normalizePath(String path)", "testcase": false, "constructor": false}, {"identifier": "normalizePath", "parameters": "(String path, boolean removeTrailingSlash)", "modifiers": "public static", "return": "String", "signature": "String normalizePath(String path, boolean removeTrailingSlash)", "full_signature": "public static String normalizePath(String path, boolean removeTrailingSlash)", "class_method_signature": "FileUtil.normalizePath(String path, boolean removeTrailingSlash)", "testcase": false, "constructor": false}, {"identifier": "normalizePath", "parameters": "(String path, boolean forceAbsolute, boolean forceRelative,\n            boolean removeTrailingSlash)", "modifiers": "private static", "return": "String", "signature": "String normalizePath(String path, boolean forceAbsolute, boolean forceRelative,\n            boolean removeTrailingSlash)", "full_signature": "private static String normalizePath(String path, boolean forceAbsolute, boolean forceRelative,\n            boolean removeTrailingSlash)", "class_method_signature": "FileUtil.normalizePath(String path, boolean forceAbsolute, boolean forceRelative,\n            boolean removeTrailingSlash)", "testcase": false, "constructor": false}, {"identifier": "indexOfSlash", "parameters": "(char[] chars, int beginIndex, boolean slash)", "modifiers": "private static", "return": "int", "signature": "int indexOfSlash(char[] chars, int beginIndex, boolean slash)", "full_signature": "private static int indexOfSlash(char[] chars, int beginIndex, boolean slash)", "class_method_signature": "FileUtil.indexOfSlash(char[] chars, int beginIndex, boolean slash)", "testcase": false, "constructor": false}, {"identifier": "getAbsolutePathBasedOn", "parameters": "(String basedir, String path)", "modifiers": "public static", "return": "String", "signature": "String getAbsolutePathBasedOn(String basedir, String path)", "full_signature": "public static String getAbsolutePathBasedOn(String basedir, String path)", "class_method_signature": "FileUtil.getAbsolutePathBasedOn(String basedir, String path)", "testcase": false, "constructor": false}, {"identifier": "getSystemDependentAbsolutePathBasedOn", "parameters": "(String basedir, String path)", "modifiers": "public static", "return": "String", "signature": "String getSystemDependentAbsolutePathBasedOn(String basedir, String path)", "full_signature": "public static String getSystemDependentAbsolutePathBasedOn(String basedir, String path)", "class_method_signature": "FileUtil.getSystemDependentAbsolutePathBasedOn(String basedir, String path)", "testcase": false, "constructor": false}, {"identifier": "getSystemDependentPrefix", "parameters": "(String path, boolean isWindows)", "modifiers": "private static", "return": "String", "signature": "String getSystemDependentPrefix(String path, boolean isWindows)", "full_signature": "private static String getSystemDependentPrefix(String path, boolean isWindows)", "class_method_signature": "FileUtil.getSystemDependentPrefix(String path, boolean isWindows)", "testcase": false, "constructor": false}, {"identifier": "getRelativePath", "parameters": "(String basedir, String path)", "modifiers": "public static", "return": "String", "signature": "String getRelativePath(String basedir, String path)", "full_signature": "public static String getRelativePath(String basedir, String path)", "class_method_signature": "FileUtil.getRelativePath(String basedir, String path)", "testcase": false, "constructor": false}, {"identifier": "getPathBasedOn", "parameters": "(String basedir, String path)", "modifiers": "public static", "return": "String", "signature": "String getPathBasedOn(String basedir, String path)", "full_signature": "public static String getPathBasedOn(String basedir, String path)", "class_method_signature": "FileUtil.getPathBasedOn(String basedir, String path)", "testcase": false, "constructor": false}, {"identifier": "getWindowsPathBasedOn", "parameters": "(String basedir, String path)", "modifiers": "public static", "return": "String", "signature": "String getWindowsPathBasedOn(String basedir, String path)", "full_signature": "public static String getWindowsPathBasedOn(String basedir, String path)", "class_method_signature": "FileUtil.getWindowsPathBasedOn(String basedir, String path)", "testcase": false, "constructor": false}, {"identifier": "getUnixPathBasedOn", "parameters": "(String basedir, String path)", "modifiers": "public static", "return": "String", "signature": "String getUnixPathBasedOn(String basedir, String path)", "full_signature": "public static String getUnixPathBasedOn(String basedir, String path)", "class_method_signature": "FileUtil.getUnixPathBasedOn(String basedir, String path)", "testcase": false, "constructor": false}, {"identifier": "getPathBasedOn", "parameters": "(String basedir, String path, boolean isWindows)", "modifiers": "private static", "return": "String", "signature": "String getPathBasedOn(String basedir, String path, boolean isWindows)", "full_signature": "private static String getPathBasedOn(String basedir, String path, boolean isWindows)", "class_method_signature": "FileUtil.getPathBasedOn(String basedir, String path, boolean isWindows)", "testcase": false, "constructor": false}, {"identifier": "getWindowsRelativePath", "parameters": "(String basedir, String path)", "modifiers": "public static", "return": "String", "signature": "String getWindowsRelativePath(String basedir, String path)", "full_signature": "public static String getWindowsRelativePath(String basedir, String path)", "class_method_signature": "FileUtil.getWindowsRelativePath(String basedir, String path)", "testcase": false, "constructor": false}, {"identifier": "getUnixRelativePath", "parameters": "(String basedir, String path)", "modifiers": "public static", "return": "String", "signature": "String getUnixRelativePath(String basedir, String path)", "full_signature": "public static String getUnixRelativePath(String basedir, String path)", "class_method_signature": "FileUtil.getUnixRelativePath(String basedir, String path)", "testcase": false, "constructor": false}, {"identifier": "getRelativePath", "parameters": "(String basedir, String path, boolean isWindows)", "modifiers": "private static", "return": "String", "signature": "String getRelativePath(String basedir, String path, boolean isWindows)", "full_signature": "private static String getRelativePath(String basedir, String path, boolean isWindows)", "class_method_signature": "FileUtil.getRelativePath(String basedir, String path, boolean isWindows)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(String fileName)", "modifiers": "public static", "return": "String", "signature": "String getExtension(String fileName)", "full_signature": "public static String getExtension(String fileName)", "class_method_signature": "FileUtil.getExtension(String fileName)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(String fileName, boolean toLowerCase)", "modifiers": "public static", "return": "String", "signature": "String getExtension(String fileName, boolean toLowerCase)", "full_signature": "public static String getExtension(String fileName, boolean toLowerCase)", "class_method_signature": "FileUtil.getExtension(String fileName, boolean toLowerCase)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(String fileName, String nullExt)", "modifiers": "public static", "return": "String", "signature": "String getExtension(String fileName, String nullExt)", "full_signature": "public static String getExtension(String fileName, String nullExt)", "class_method_signature": "FileUtil.getExtension(String fileName, String nullExt)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(String fileName, String nullExt, boolean toLowerCase)", "modifiers": "public static", "return": "String", "signature": "String getExtension(String fileName, String nullExt, boolean toLowerCase)", "full_signature": "public static String getExtension(String fileName, String nullExt, boolean toLowerCase)", "class_method_signature": "FileUtil.getExtension(String fileName, String nullExt, boolean toLowerCase)", "testcase": false, "constructor": false}, {"identifier": "getFileNameAndExtension", "parameters": "(String path)", "modifiers": "public static", "return": "FileNameAndExtension", "signature": "FileNameAndExtension getFileNameAndExtension(String path)", "full_signature": "public static FileNameAndExtension getFileNameAndExtension(String path)", "class_method_signature": "FileUtil.getFileNameAndExtension(String path)", "testcase": false, "constructor": false}, {"identifier": "getFileNameAndExtension", "parameters": "(String path, boolean extensionToLowerCase)", "modifiers": "public static", "return": "FileNameAndExtension", "signature": "FileNameAndExtension getFileNameAndExtension(String path, boolean extensionToLowerCase)", "full_signature": "public static FileNameAndExtension getFileNameAndExtension(String path, boolean extensionToLowerCase)", "class_method_signature": "FileUtil.getFileNameAndExtension(String path, boolean extensionToLowerCase)", "testcase": false, "constructor": false}, {"identifier": "normalizeExtension", "parameters": "(String ext)", "modifiers": "public static", "return": "String", "signature": "String normalizeExtension(String ext)", "full_signature": "public static String normalizeExtension(String ext)", "class_method_signature": "FileUtil.normalizeExtension(String ext)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String getName(String filename)", "full_signature": "public static String getName(String filename)", "class_method_signature": "FileUtil.getName(String filename)", "testcase": false, "constructor": false}, {"identifier": "indexOfLastSeparator", "parameters": "(String filename)", "modifiers": "public static", "return": "int", "signature": "int indexOfLastSeparator(String filename)", "full_signature": "public static int indexOfLastSeparator(String filename)", "class_method_signature": "FileUtil.indexOfLastSeparator(String filename)", "testcase": false, "constructor": false}, {"identifier": "indexOfExtension", "parameters": "(String filename)", "modifiers": "public static", "return": "int", "signature": "int indexOfExtension(String filename)", "full_signature": "public static int indexOfExtension(String filename)", "class_method_signature": "FileUtil.indexOfExtension(String filename)", "testcase": false, "constructor": false}, {"identifier": "parseExtension", "parameters": "(String path)", "modifiers": "public static", "return": "String[]", "signature": "String[] parseExtension(String path)", "full_signature": "public static String[] parseExtension(String path)", "class_method_signature": "FileUtil.parseExtension(String path)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String url, String relativePath)", "modifiers": "public static", "return": "String", "signature": "String resolve(String url, String relativePath)", "full_signature": "public static String resolve(String url, String relativePath)", "class_method_signature": "FileUtil.resolve(String url, String relativePath)", "testcase": false, "constructor": false}, {"identifier": "getResourcesFile", "parameters": "(String resourceName)", "modifiers": "public static", "return": "File", "signature": "File getResourcesFile(String resourceName)", "full_signature": "public static File getResourcesFile(String resourceName)", "class_method_signature": "FileUtil.getResourcesFile(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "getResourcesFile", "parameters": "(URL url)", "modifiers": "public static", "return": "File", "signature": "File getResourcesFile(URL url)", "full_signature": "public static File getResourcesFile(URL url)", "class_method_signature": "FileUtil.getResourcesFile(URL url)", "testcase": false, "constructor": false}, {"identifier": "createAndReturnFile", "parameters": "(String filename)", "modifiers": "public static", "return": "File", "signature": "File createAndReturnFile(String filename)", "full_signature": "public static File createAndReturnFile(String filename)", "class_method_signature": "FileUtil.createAndReturnFile(String filename)", "testcase": false, "constructor": false}, {"identifier": "newFile", "parameters": "(String pathName)", "modifiers": "public static", "return": "File", "signature": "File newFile(String pathName)", "full_signature": "public static File newFile(String pathName)", "class_method_signature": "FileUtil.newFile(String pathName)", "testcase": false, "constructor": false}, {"identifier": "createTempDirectory", "parameters": "(String prefix, String suffix)", "modifiers": "public static", "return": "File", "signature": "File createTempDirectory(String prefix, String suffix)", "full_signature": "public static File createTempDirectory(String prefix, String suffix)", "class_method_signature": "FileUtil.createTempDirectory(String prefix, String suffix)", "testcase": false, "constructor": false}, {"identifier": "createTempDirectory", "parameters": "(String prefix, String suffix, String tempDirName)", "modifiers": "public static", "return": "File", "signature": "File createTempDirectory(String prefix, String suffix, String tempDirName)", "full_signature": "public static File createTempDirectory(String prefix, String suffix, String tempDirName)", "class_method_signature": "FileUtil.createTempDirectory(String prefix, String suffix, String tempDirName)", "testcase": false, "constructor": false}, {"identifier": "createTempDirectory", "parameters": "(String prefix, String suffix, File tempDir)", "modifiers": "public static", "return": "File", "signature": "File createTempDirectory(String prefix, String suffix, File tempDir)", "full_signature": "public static File createTempDirectory(String prefix, String suffix, File tempDir)", "class_method_signature": "FileUtil.createTempDirectory(String prefix, String suffix, File tempDir)", "testcase": false, "constructor": false}, {"identifier": "createTempFile", "parameters": "()", "modifiers": "public static", "return": "File", "signature": "File createTempFile()", "full_signature": "public static File createTempFile()", "class_method_signature": "FileUtil.createTempFile()", "testcase": false, "constructor": false}, {"identifier": "createTempFile", "parameters": "(boolean create)", "modifiers": "public static", "return": "File", "signature": "File createTempFile(boolean create)", "full_signature": "public static File createTempFile(boolean create)", "class_method_signature": "FileUtil.createTempFile(boolean create)", "testcase": false, "constructor": false}, {"identifier": "createTempFile", "parameters": "(String prefix, String suffix)", "modifiers": "public static", "return": "File", "signature": "File createTempFile(String prefix, String suffix)", "full_signature": "public static File createTempFile(String prefix, String suffix)", "class_method_signature": "FileUtil.createTempFile(String prefix, String suffix)", "testcase": false, "constructor": false}, {"identifier": "createTempFile", "parameters": "(String prefix, String suffix, boolean create)", "modifiers": "public static", "return": "File", "signature": "File createTempFile(String prefix, String suffix, boolean create)", "full_signature": "public static File createTempFile(String prefix, String suffix, boolean create)", "class_method_signature": "FileUtil.createTempFile(String prefix, String suffix, boolean create)", "testcase": false, "constructor": false}, {"identifier": "createTempFile", "parameters": "(String prefix, String suffix, String tempDirName)", "modifiers": "public static", "return": "File", "signature": "File createTempFile(String prefix, String suffix, String tempDirName)", "full_signature": "public static File createTempFile(String prefix, String suffix, String tempDirName)", "class_method_signature": "FileUtil.createTempFile(String prefix, String suffix, String tempDirName)", "testcase": false, "constructor": false}, {"identifier": "createTempFile", "parameters": "(String prefix, String suffix, File tempDir)", "modifiers": "public static", "return": "File", "signature": "File createTempFile(String prefix, String suffix, File tempDir)", "full_signature": "public static File createTempFile(String prefix, String suffix, File tempDir)", "class_method_signature": "FileUtil.createTempFile(String prefix, String suffix, File tempDir)", "testcase": false, "constructor": false}, {"identifier": "createTempFile", "parameters": "(String prefix, String suffix, String tempDirName, boolean create)", "modifiers": "public static", "return": "File", "signature": "File createTempFile(String prefix, String suffix, String tempDirName, boolean create)", "full_signature": "public static File createTempFile(String prefix, String suffix, String tempDirName, boolean create)", "class_method_signature": "FileUtil.createTempFile(String prefix, String suffix, String tempDirName, boolean create)", "testcase": false, "constructor": false}, {"identifier": "createTempFile", "parameters": "(String prefix, String suffix, File tempDir, boolean create)", "modifiers": "public static", "return": "File", "signature": "File createTempFile(String prefix, String suffix, File tempDir, boolean create)", "full_signature": "public static File createTempFile(String prefix, String suffix, File tempDir, boolean create)", "class_method_signature": "FileUtil.createTempFile(String prefix, String suffix, File tempDir, boolean create)", "testcase": false, "constructor": false}, {"identifier": "doCreateTempFile", "parameters": "(String prefix, String suffix, File dir)", "modifiers": "private static", "return": "File", "signature": "File doCreateTempFile(String prefix, String suffix, File dir)", "full_signature": "private static File doCreateTempFile(String prefix, String suffix, File dir)", "class_method_signature": "FileUtil.doCreateTempFile(String prefix, String suffix, File dir)", "testcase": false, "constructor": false}, {"identifier": "getClassFilePath", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String getClassFilePath(Class<?> clazz)", "full_signature": "public static String getClassFilePath(Class<?> clazz)", "class_method_signature": "FileUtil.getClassFilePath(Class<?> clazz)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/FileUtil.java"}, "focal_method": {"identifier": "toFile", "parameters": "(URL url)", "modifiers": "public static", "return": "File", "body": "public static File toFile(URL url) {\n        if (url == null) {\n            return null;\n        }\n\n        if (!\"file\".equals(url.getProtocol())) {\n            return null;\n        }\n\n        String path = url.getPath();\n\n        return (path != null) ? new File(StringEscapeUtil.unescapeURL(path)) : null;\n\n    }", "signature": "File toFile(URL url)", "full_signature": "public static File toFile(URL url)", "class_method_signature": "FileUtil.toFile(URL url)", "testcase": false, "constructor": false, "invocations": ["equals", "getProtocol", "getPath", "unescapeURL"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}