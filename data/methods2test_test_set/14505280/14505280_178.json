{"test_class": {"identifier": "CopyrightCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}], "file": "command/src/test/java/org/geomajas/command/general/CopyrightCommandTest.java"}, "test_case": {"identifier": "testCopyright", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCopyright() throws Exception {\n\t\tCopyrightRequest request = new CopyrightRequest();\n\t\tCopyrightResponse response = (CopyrightResponse) dispatcher.execute(\n\t\t\t\tCopyrightRequest.COMMAND, request, null, \"en\");\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\t\tList<CopyrightInfo> copyrights = response.getCopyrights();\n\t\tAssert.assertNotNull(copyrights);\n\t\tAssert.assertTrue(copyrights.size() > 12); // this number is somewhat arbitrary\n\t\tcontains(\"Geomajas\", copyrights);\n\t\tcontains(\"JTS\", copyrights);\n\t\tcontains(\"Spring Framework\", copyrights);\n\t\tcontains(\"Apache commons\", copyrights);\n\t\tcontains(\"slf4j\", copyrights);\n\t\tcontains(\"javax.annotation\", copyrights);\n\t\tcontains(\"javax.validation\", copyrights);\n\t\tcontains(\"GeoTools\", copyrights);\n\t}", "signature": "void testCopyright()", "full_signature": "@Test public void testCopyright()", "class_method_signature": "CopyrightCommandTest.testCopyright()", "testcase": true, "constructor": false, "invocations": ["execute", "isError", "printStackTrace", "get", "getErrors", "assertFalse", "isError", "getCopyrights", "assertNotNull", "assertTrue", "size", "contains", "contains", "contains", "contains", "contains", "contains", "contains", "contains"]}, "focal_class": {"identifier": "CopyrightCommand", "superclass": "", "interfaces": "implements CommandHasRequest<EmptyCommandRequest, CopyrightResponse>", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(CopyrightCommand.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CopyrightCommand.class)", "var_name": "log"}, {"original_string": "private Map<String, CopyrightInfo> copyrightMap = new HashMap<String, CopyrightInfo>();", "modifier": "private", "type": "Map<String, CopyrightInfo>", "declarator": "copyrightMap = new HashMap<String, CopyrightInfo>()", "var_name": "copyrightMap"}, {"original_string": "@Autowired(required = false)\n\tprotected Map<String, PluginInfo> declaredPlugins;", "modifier": "@Autowired(required = false)\n\tprotected", "type": "Map<String, PluginInfo>", "declarator": "declaredPlugins", "var_name": "declaredPlugins"}], "methods": [{"identifier": "buildCopyrightMap", "parameters": "()", "modifiers": "@PostConstruct protected", "return": "void", "signature": "void buildCopyrightMap()", "full_signature": "@PostConstruct protected void buildCopyrightMap()", "class_method_signature": "CopyrightCommand.buildCopyrightMap()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "EmptyCommandRequest", "signature": "EmptyCommandRequest getEmptyCommandRequest()", "full_signature": "@Override public EmptyCommandRequest getEmptyCommandRequest()", "class_method_signature": "CopyrightCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "CopyrightResponse", "signature": "CopyrightResponse getEmptyCommandResponse()", "full_signature": "@Override public CopyrightResponse getEmptyCommandResponse()", "class_method_signature": "CopyrightCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(EmptyCommandRequest request, CopyrightResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(EmptyCommandRequest request, CopyrightResponse response)", "full_signature": "@Override public void execute(EmptyCommandRequest request, CopyrightResponse response)", "class_method_signature": "CopyrightCommand.execute(EmptyCommandRequest request, CopyrightResponse response)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/general/CopyrightCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(EmptyCommandRequest request, CopyrightResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(EmptyCommandRequest request, CopyrightResponse response) throws Exception {\n\t\tresponse.setCopyrights(new ArrayList<CopyrightInfo>(copyrightMap.values()));\n\t}", "signature": "void execute(EmptyCommandRequest request, CopyrightResponse response)", "full_signature": "@Override public void execute(EmptyCommandRequest request, CopyrightResponse response)", "class_method_signature": "CopyrightCommand.execute(EmptyCommandRequest request, CopyrightResponse response)", "testcase": false, "constructor": false, "invocations": ["setCopyrights", "values"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}