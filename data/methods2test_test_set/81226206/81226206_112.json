{"test_class": {"identifier": "ElementFinderTest", "superclass": "", "interfaces": "", "fields": [], "file": "karate-core/src/test/java/com/intuit/karate/driver/ElementFinderTest.java"}, "test_case": {"identifier": "testToJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToJson() {\n        String condition = ElementFinder.exitCondition(\"{^a}Foo\");\n        assertEquals(\"e.textContent.trim().includes('Foo') && e.tagName == 'A'\", condition);\n    }", "signature": "void testToJson()", "full_signature": "@Test public void testToJson()", "class_method_signature": "ElementFinderTest.testToJson()", "testcase": true, "constructor": false, "invocations": ["exitCondition", "assertEquals"]}, "focal_class": {"identifier": "ElementFinder", "superclass": "", "interfaces": "implements Finder", "fields": [{"original_string": "private final Driver driver;", "modifier": "private final", "type": "Driver", "declarator": "driver", "var_name": "driver"}, {"original_string": "private final String fromLocator;", "modifier": "private final", "type": "String", "declarator": "fromLocator", "var_name": "fromLocator"}, {"original_string": "private final Type type;", "modifier": "private final", "type": "Type", "declarator": "type", "var_name": "type"}, {"original_string": "private String tag = \"INPUT\";", "modifier": "private", "type": "String", "declarator": "tag = \"INPUT\"", "var_name": "tag"}], "methods": [{"identifier": "ElementFinder", "parameters": "(Driver driver, String fromLocator, Type type)", "modifiers": "public", "return": "", "signature": " ElementFinder(Driver driver, String fromLocator, Type type)", "full_signature": "public  ElementFinder(Driver driver, String fromLocator, Type type)", "class_method_signature": "ElementFinder.ElementFinder(Driver driver, String fromLocator, Type type)", "testcase": false, "constructor": true}, {"identifier": "forLoopChunk", "parameters": "(ElementFinder.Type type)", "modifiers": "private static", "return": "String", "signature": "String forLoopChunk(ElementFinder.Type type)", "full_signature": "private static String forLoopChunk(ElementFinder.Type type)", "class_method_signature": "ElementFinder.forLoopChunk(ElementFinder.Type type)", "testcase": false, "constructor": false}, {"identifier": "exitCondition", "parameters": "(String findTag)", "modifiers": "public static", "return": "String", "signature": "String exitCondition(String findTag)", "full_signature": "public static String exitCondition(String findTag)", "class_method_signature": "ElementFinder.exitCondition(String findTag)", "testcase": false, "constructor": false}, {"identifier": "findScript", "parameters": "(Driver driver, String locator, ElementFinder.Type type, String findTag)", "modifiers": "private static", "return": "String", "signature": "String findScript(Driver driver, String locator, ElementFinder.Type type, String findTag)", "full_signature": "private static String findScript(Driver driver, String locator, ElementFinder.Type type, String findTag)", "class_method_signature": "ElementFinder.findScript(Driver driver, String locator, ElementFinder.Type type, String findTag)", "testcase": false, "constructor": false}, {"identifier": "getDebugString", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getDebugString()", "full_signature": "private String getDebugString()", "class_method_signature": "ElementFinder.getDebugString()", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element find()", "full_signature": "@Override public Element find()", "class_method_signature": "ElementFinder.find()", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String tag)", "modifiers": "@Override public", "return": "Element", "signature": "Element find(String tag)", "full_signature": "@Override public Element find(String tag)", "class_method_signature": "ElementFinder.find(String tag)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element clear()", "full_signature": "@Override public Element clear()", "class_method_signature": "ElementFinder.clear()", "testcase": false, "constructor": false}, {"identifier": "input", "parameters": "(String value)", "modifiers": "@Override public", "return": "Element", "signature": "Element input(String value)", "full_signature": "@Override public Element input(String value)", "class_method_signature": "ElementFinder.input(String value)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(String value)", "modifiers": "@Override public", "return": "Element", "signature": "Element select(String value)", "full_signature": "@Override public Element select(String value)", "class_method_signature": "ElementFinder.select(String value)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(int index)", "modifiers": "@Override public", "return": "Element", "signature": "Element select(int index)", "full_signature": "@Override public Element select(int index)", "class_method_signature": "ElementFinder.select(int index)", "testcase": false, "constructor": false}, {"identifier": "click", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element click()", "full_signature": "@Override public Element click()", "class_method_signature": "ElementFinder.click()", "testcase": false, "constructor": false}, {"identifier": "highlight", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element highlight()", "full_signature": "@Override public Element highlight()", "class_method_signature": "ElementFinder.highlight()", "testcase": false, "constructor": false}, {"identifier": "retry", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element retry()", "full_signature": "@Override public Element retry()", "class_method_signature": "ElementFinder.retry()", "testcase": false, "constructor": false}, {"identifier": "retry", "parameters": "(int count)", "modifiers": "@Override public", "return": "Element", "signature": "Element retry(int count)", "full_signature": "@Override public Element retry(int count)", "class_method_signature": "ElementFinder.retry(int count)", "testcase": false, "constructor": false}, {"identifier": "retry", "parameters": "(Integer count, Integer interval)", "modifiers": "@Override public", "return": "Element", "signature": "Element retry(Integer count, Integer interval)", "full_signature": "@Override public Element retry(Integer count, Integer interval)", "class_method_signature": "ElementFinder.retry(Integer count, Integer interval)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/driver/ElementFinder.java"}, "focal_method": {"identifier": "exitCondition", "parameters": "(String findTag)", "modifiers": "public static", "return": "String", "body": "public static String exitCondition(String findTag) {\n        int pos = findTag.indexOf('}');\n        if (pos == -1) {\n            return \"e.tagName == '\" + findTag.toUpperCase() + \"'\";\n        }\n        int caretPos = findTag.indexOf('^');        \n        boolean contains = caretPos != -1 && caretPos < pos;\n        if (!contains) {\n            caretPos = 0;\n        }\n        String tagName = StringUtils.trimToNull(findTag.substring(caretPos + 1, pos));\n        String suffix = tagName == null ? \"\" : \" && e.tagName == '\" + tagName.toUpperCase() + \"'\";\n        String findText = findTag.substring(pos + 1);        \n        if (contains) {\n            return \"e.textContent.trim().includes('\" + findText + \"')\" + suffix;\n        } else {\n            return \"e.textContent.trim() == '\" + findText + \"'\" + suffix;\n        }\n    }", "signature": "String exitCondition(String findTag)", "full_signature": "public static String exitCondition(String findTag)", "class_method_signature": "ElementFinder.exitCondition(String findTag)", "testcase": false, "constructor": false, "invocations": ["indexOf", "toUpperCase", "indexOf", "trimToNull", "substring", "toUpperCase", "substring"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}