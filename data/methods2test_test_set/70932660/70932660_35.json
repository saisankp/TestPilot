{"test_class": {"identifier": "NvaDaemonTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String testOutputDirectory;", "modifier": "private static", "type": "String", "declarator": "testOutputDirectory", "var_name": "testOutputDirectory"}], "file": "nvadaemon/src/test/java/com/microsoft/azure/practices/nvadaemon/NvaDaemonTest.java"}, "test_case": {"identifier": "test_non_existent_config_file_specified", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void test_non_existent_config_file_specified() {\n        NvaDaemon nvaDaemon = new NvaDaemon();\n        DaemonContext daemonContext = new DaemonContext() {\n            @Override\n            public DaemonController getController() {\n                return null;\n            }\n\n            @Override\n            public String[] getArguments() {\n                return new String[] { \"-c\", testOutputDirectory + \"/does-not-exist.json\" };\n            }\n        };\n\n        try {\n            nvaDaemon.init(daemonContext);\n        } catch (DaemonInitException e) {\n            // The DaemonInitException is coded incorrectly, so we have to check for our\n            // error message.\n            Assertions.assertTrue(e.getMessageWithCause().contains(\n                \"Error reading configuration file\"));\n        }\n    }", "signature": "void test_non_existent_config_file_specified()", "full_signature": "@Test void test_non_existent_config_file_specified()", "class_method_signature": "NvaDaemonTest.test_non_existent_config_file_specified()", "testcase": true, "constructor": false, "invocations": ["init", "assertTrue", "contains", "getMessageWithCause"]}, "focal_class": {"identifier": "NvaDaemon", "superclass": "", "interfaces": "implements Daemon", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(NvaDaemon.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(NvaDaemon.class)", "var_name": "log"}, {"original_string": "private static final String ZK_NAMESPACE = \"nvadaemon\";", "modifier": "private static final", "type": "String", "declarator": "ZK_NAMESPACE = \"nvadaemon\"", "var_name": "ZK_NAMESPACE"}, {"original_string": "private volatile boolean stopped;", "modifier": "private volatile", "type": "boolean", "declarator": "stopped", "var_name": "stopped"}, {"original_string": "private NvaDaemonConfiguration configuration;", "modifier": "private", "type": "NvaDaemonConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private CuratorFramework client;", "modifier": "private", "type": "CuratorFramework", "declarator": "client", "var_name": "client"}, {"original_string": "private ReentrantLock lock = new ReentrantLock();", "modifier": "private", "type": "ReentrantLock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}, {"original_string": "private Condition shutdown = lock.newCondition();", "modifier": "private", "type": "Condition", "declarator": "shutdown = lock.newCondition()", "var_name": "shutdown"}, {"original_string": "private final ExecutorService executorService = Executors.newSingleThreadExecutor();", "modifier": "private final", "type": "ExecutorService", "declarator": "executorService = Executors.newSingleThreadExecutor()", "var_name": "executorService"}, {"original_string": "private final AtomicReference<Future<?>> ourTask = new AtomicReference<>(null);", "modifier": "private final", "type": "AtomicReference<Future<?>>", "declarator": "ourTask = new AtomicReference<>(null)", "var_name": "ourTask"}], "methods": [{"identifier": "NvaDaemon", "parameters": "()", "modifiers": "public", "return": "", "signature": " NvaDaemon()", "full_signature": "public  NvaDaemon()", "class_method_signature": "NvaDaemon.NvaDaemon()", "testcase": false, "constructor": true}, {"identifier": "createClient", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createClient()", "full_signature": "private void createClient()", "class_method_signature": "NvaDaemon.createClient()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(DaemonContext daemonContext)", "modifiers": "@Override public", "return": "void", "signature": "void init(DaemonContext daemonContext)", "full_signature": "@Override public void init(DaemonContext daemonContext)", "class_method_signature": "NvaDaemon.init(DaemonContext daemonContext)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "NvaDaemon.start()", "testcase": false, "constructor": false}, {"identifier": "internalStart", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void internalStart()", "full_signature": "private synchronized void internalStart()", "class_method_signature": "NvaDaemon.internalStart()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void stop()", "full_signature": "@Override public synchronized void stop()", "class_method_signature": "NvaDaemon.stop()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "NvaDaemon.destroy()", "testcase": false, "constructor": false}, {"identifier": "parseArguments", "parameters": "(String[] args)", "modifiers": "private static", "return": "NvaDaemonConfiguration", "signature": "NvaDaemonConfiguration parseArguments(String[] args)", "full_signature": "private static NvaDaemonConfiguration parseArguments(String[] args)", "class_method_signature": "NvaDaemon.parseArguments(String[] args)", "testcase": false, "constructor": false}, {"identifier": "parseCommandLine", "parameters": "(String[] args)", "modifiers": "private static", "return": "CommandLine", "signature": "CommandLine parseCommandLine(String[] args)", "full_signature": "private static CommandLine parseCommandLine(String[] args)", "class_method_signature": "NvaDaemon.parseCommandLine(String[] args)", "testcase": false, "constructor": false}], "file": "nvadaemon/src/main/java/com/microsoft/azure/practices/nvadaemon/NvaDaemon.java"}, "focal_method": {"identifier": "init", "parameters": "(DaemonContext daemonContext)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void init(DaemonContext daemonContext) throws DaemonInitException {\n        Preconditions.checkNotNull(daemonContext, \"daemonContext cannot be null\");\n        try {\n            this.configuration = parseArguments(daemonContext.getArguments());\n        } catch (ConfigurationException e) {\n            throw new DaemonInitException(\"Error processing command line arguments\", e);\n        }\n    }", "signature": "void init(DaemonContext daemonContext)", "full_signature": "@Override public void init(DaemonContext daemonContext)", "class_method_signature": "NvaDaemon.init(DaemonContext daemonContext)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "parseArguments", "getArguments"]}, "repository": {"repo_id": 70932660, "url": "https://github.com/mspnp/ha-nva", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 27, "size": 38331, "license": "licensed"}}