{"test_class": {"identifier": "BinaryTreePostOrderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BinaryTreePostOrder binaryTreePostOrder;", "modifier": "private", "type": "BinaryTreePostOrder", "declarator": "binaryTreePostOrder", "var_name": "binaryTreePostOrder"}], "file": "algs/src/test/java/com/github/pedrovgs/problem16/BinaryTreePostOrderTest.java"}, "test_case": {"identifier": "shouldReturnBinaryNodesInPreOrderRecursive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnBinaryNodesInPreOrderRecursive() {\n    BinaryNode<Integer> root = new BinaryNode<Integer>(0);\n    BinaryNode<Integer> n1 = new BinaryNode<Integer>(1);\n    BinaryNode<Integer> n2 = new BinaryNode<Integer>(2);\n    BinaryNode<Integer> n3 = new BinaryNode<Integer>(3);\n    BinaryNode<Integer> n4 = new BinaryNode<Integer>(4);\n\n    root.setLeft(n1);\n    root.setRight(n2);\n    n1.setLeft(n3);\n    n1.setRight(n4);\n\n    List<BinaryNode> result = binaryTreePostOrder.getRecursive(root);\n\n    List<BinaryNode<Integer>> expected = Arrays.asList(n3, n4, n1, n2, root);\n    assertEquals(expected, result);\n  }", "signature": "void shouldReturnBinaryNodesInPreOrderRecursive()", "full_signature": "@Test public void shouldReturnBinaryNodesInPreOrderRecursive()", "class_method_signature": "BinaryTreePostOrderTest.shouldReturnBinaryNodesInPreOrderRecursive()", "testcase": true, "constructor": false, "invocations": ["setLeft", "setRight", "setLeft", "setRight", "getRecursive", "asList", "assertEquals"]}, "focal_class": {"identifier": "BinaryTreePostOrder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getRecursive", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getRecursive(BinaryNode root)", "full_signature": "public List<BinaryNode> getRecursive(BinaryNode root)", "class_method_signature": "BinaryTreePostOrder.getRecursive(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getInner", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getInner(BinaryNode root)", "full_signature": "private List<BinaryNode> getInner(BinaryNode root)", "class_method_signature": "BinaryTreePostOrder.getInner(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getIterative", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getIterative(BinaryNode root)", "full_signature": "public List<BinaryNode> getIterative(BinaryNode root)", "class_method_signature": "BinaryTreePostOrder.getIterative(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "validateTree", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "void", "signature": "void validateTree(BinaryNode root)", "full_signature": "private void validateTree(BinaryNode root)", "class_method_signature": "BinaryTreePostOrder.validateTree(BinaryNode root)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem16/BinaryTreePostOrder.java"}, "focal_method": {"identifier": "getRecursive", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode>", "body": "public List<BinaryNode> getRecursive(BinaryNode root) {\n    validateTree(root);\n    return getInner(root);\n  }", "signature": "List<BinaryNode> getRecursive(BinaryNode root)", "full_signature": "public List<BinaryNode> getRecursive(BinaryNode root)", "class_method_signature": "BinaryTreePostOrder.getRecursive(BinaryNode root)", "testcase": false, "constructor": false, "invocations": ["validateTree", "getInner"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}