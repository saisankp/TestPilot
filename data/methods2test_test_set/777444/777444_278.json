{"test_class": {"identifier": "JBossDetectorTest", "superclass": "extends BaseDetectorTest", "interfaces": "", "fields": [{"original_string": "private JBossDetector       detector;", "modifier": "private", "type": "JBossDetector", "declarator": "detector", "var_name": "detector"}, {"original_string": "private MBeanServer         server;", "modifier": "private", "type": "MBeanServer", "declarator": "server", "var_name": "server"}, {"original_string": "private MBeanServerExecutor servers;", "modifier": "private", "type": "MBeanServerExecutor", "declarator": "servers", "var_name": "servers"}], "file": "agent/core/src/test/java/org/jolokia/detector/JBossDetectorTest.java"}, "test_case": {"identifier": "simpleFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simpleFound() throws MalformedObjectNameException, InstanceNotFoundException, ReflectionException, AttributeNotFoundException, MBeanException, IntrospectionException {\n\n        expect(server.queryNames(new ObjectName(\"jboss.as:management-root=server\"),null)).andReturn(Collections.EMPTY_SET);\n        ObjectName oName = prepareQuery(\"jboss.system:type=Server\");\n        expect(server.isRegistered(oName)).andStubReturn(true);\n        expect(server.getAttribute(oName, \"Version\")).andReturn(\"5.1.0\");\n        replay(server);\n        ServerHandle handle = detector.detect(servers);\n        assertEquals(handle.getVersion(),\"5.1.0\");\n        assertEquals(handle.getVendor(),\"RedHat\");\n        assertEquals(handle.getProduct(),\"jboss\");\n\n\n        // Verify workaround\n        reset(server);\n        ObjectName memoryBean = new ObjectName(\"java.lang:type=Memory\");\n        expect(server.isRegistered(memoryBean)).andStubReturn(true);\n        replay(server);\n        handle.preDispatch(servers, new JmxRequestBuilder(RequestType.READ, memoryBean).attribute(\"HeapMemoryUsage\").<JmxRequest>build());\n        verify(server);\n    }", "signature": "void simpleFound()", "full_signature": "@Test public void simpleFound()", "class_method_signature": "JBossDetectorTest.simpleFound()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "queryNames", "prepareQuery", "andStubReturn", "expect", "isRegistered", "andReturn", "expect", "getAttribute", "replay", "detect", "assertEquals", "getVersion", "assertEquals", "getVendor", "assertEquals", "getProduct", "reset", "andStubReturn", "expect", "isRegistered", "replay", "preDispatch", "build", "attribute", "verify"]}, "focal_class": {"identifier": "JBossDetector", "superclass": "extends AbstractServerDetector", "interfaces": "", "fields": [{"original_string": "public static final String JBOSS_AS_MANAGEMENT_ROOT_SERVER = \"jboss.as:management-root=server\";", "modifier": "public static final", "type": "String", "declarator": "JBOSS_AS_MANAGEMENT_ROOT_SERVER = \"jboss.as:management-root=server\"", "var_name": "JBOSS_AS_MANAGEMENT_ROOT_SERVER"}, {"original_string": "public static final int LOGGING_DETECT_TIMEOUT = 5 * 60 * 1000;", "modifier": "public static final", "type": "int", "declarator": "LOGGING_DETECT_TIMEOUT = 5 * 60 * 1000", "var_name": "LOGGING_DETECT_TIMEOUT"}, {"original_string": "public static final int LOGGING_DETECT_INTERVAL = 200;", "modifier": "public static final", "type": "int", "declarator": "LOGGING_DETECT_INTERVAL = 200", "var_name": "LOGGING_DETECT_INTERVAL"}], "methods": [{"identifier": "detect", "parameters": "(MBeanServerExecutor pMBeanServerExecutor)", "modifiers": "public", "return": "ServerHandle", "signature": "ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor)", "full_signature": "public ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor)", "class_method_signature": "JBossDetector.detect(MBeanServerExecutor pMBeanServerExecutor)", "testcase": false, "constructor": false}, {"identifier": "checkForWildflySwarm", "parameters": "()", "modifiers": "private", "return": "ServerHandle", "signature": "ServerHandle checkForWildflySwarm()", "full_signature": "private ServerHandle checkForWildflySwarm()", "class_method_signature": "JBossDetector.checkForWildflySwarm()", "testcase": false, "constructor": false}, {"identifier": "jvmAgentStartup", "parameters": "(Instrumentation instrumentation)", "modifiers": "@Override public", "return": "void", "signature": "void jvmAgentStartup(Instrumentation instrumentation)", "full_signature": "@Override public void jvmAgentStartup(Instrumentation instrumentation)", "class_method_signature": "JBossDetector.jvmAgentStartup(Instrumentation instrumentation)", "testcase": false, "constructor": false}, {"identifier": "jvmAgentStartup", "parameters": "(Instrumentation instrumentation, ClassLoader classLoader)", "modifiers": "", "return": "void", "signature": "void jvmAgentStartup(Instrumentation instrumentation, ClassLoader classLoader)", "full_signature": " void jvmAgentStartup(Instrumentation instrumentation, ClassLoader classLoader)", "class_method_signature": "JBossDetector.jvmAgentStartup(Instrumentation instrumentation, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "isJBossModulesBasedContainer", "parameters": "(ClassLoader classLoader)", "modifiers": "protected", "return": "boolean", "signature": "boolean isJBossModulesBasedContainer(ClassLoader classLoader)", "full_signature": "protected boolean isJBossModulesBasedContainer(ClassLoader classLoader)", "class_method_signature": "JBossDetector.isJBossModulesBasedContainer(ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "hasWildflyProperties", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean hasWildflyProperties()", "full_signature": "private boolean hasWildflyProperties()", "class_method_signature": "JBossDetector.hasWildflyProperties()", "testcase": false, "constructor": false}, {"identifier": "awaitServerInitializationForJBossModulesBasedContainer", "parameters": "(Instrumentation instrumentation)", "modifiers": "private", "return": "void", "signature": "void awaitServerInitializationForJBossModulesBasedContainer(Instrumentation instrumentation)", "full_signature": "private void awaitServerInitializationForJBossModulesBasedContainer(Instrumentation instrumentation)", "class_method_signature": "JBossDetector.awaitServerInitializationForJBossModulesBasedContainer(Instrumentation instrumentation)", "testcase": false, "constructor": false}, {"identifier": "checkFromJSR77", "parameters": "(MBeanServerExecutor pMBeanServerExecutor)", "modifiers": "private", "return": "ServerHandle", "signature": "ServerHandle checkFromJSR77(MBeanServerExecutor pMBeanServerExecutor)", "full_signature": "private ServerHandle checkFromJSR77(MBeanServerExecutor pMBeanServerExecutor)", "class_method_signature": "JBossDetector.checkFromJSR77(MBeanServerExecutor pMBeanServerExecutor)", "testcase": false, "constructor": false}, {"identifier": "checkFor5viaJMX", "parameters": "(MBeanServerExecutor pMBeanServerExecutor)", "modifiers": "private", "return": "ServerHandle", "signature": "ServerHandle checkFor5viaJMX(MBeanServerExecutor pMBeanServerExecutor)", "full_signature": "private ServerHandle checkFor5viaJMX(MBeanServerExecutor pMBeanServerExecutor)", "class_method_signature": "JBossDetector.checkFor5viaJMX(MBeanServerExecutor pMBeanServerExecutor)", "testcase": false, "constructor": false}, {"identifier": "checkForManagementRootServerViaJMX", "parameters": "(MBeanServerExecutor pMBeanServerExecutor)", "modifiers": "private", "return": "ServerHandle", "signature": "ServerHandle checkForManagementRootServerViaJMX(MBeanServerExecutor pMBeanServerExecutor)", "full_signature": "private ServerHandle checkForManagementRootServerViaJMX(MBeanServerExecutor pMBeanServerExecutor)", "class_method_signature": "JBossDetector.checkForManagementRootServerViaJMX(MBeanServerExecutor pMBeanServerExecutor)", "testcase": false, "constructor": false}, {"identifier": "fallbackForVersion7Check", "parameters": "(MBeanServerExecutor pMBeanServerExecutor)", "modifiers": "private", "return": "ServerHandle", "signature": "ServerHandle fallbackForVersion7Check(MBeanServerExecutor pMBeanServerExecutor)", "full_signature": "private ServerHandle fallbackForVersion7Check(MBeanServerExecutor pMBeanServerExecutor)", "class_method_signature": "JBossDetector.fallbackForVersion7Check(MBeanServerExecutor pMBeanServerExecutor)", "testcase": false, "constructor": false}, {"identifier": "addMBeanServers", "parameters": "(Set<MBeanServerConnection> servers)", "modifiers": "@Override /** {@inheritDoc} */ public", "return": "void", "signature": "void addMBeanServers(Set<MBeanServerConnection> servers)", "full_signature": "@Override /** {@inheritDoc} */ public void addMBeanServers(Set<MBeanServerConnection> servers)", "class_method_signature": "JBossDetector.addMBeanServers(Set<MBeanServerConnection> servers)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/detector/JBossDetector.java"}, "focal_method": {"identifier": "detect", "parameters": "(MBeanServerExecutor pMBeanServerExecutor)", "modifiers": "public", "return": "ServerHandle", "body": "public ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor) {\n        ServerHandle handle = checkFromJSR77(pMBeanServerExecutor);\n        if (handle == null) {\n            handle = checkFor5viaJMX(pMBeanServerExecutor);\n            if (handle == null) {\n                handle = checkForManagementRootServerViaJMX(pMBeanServerExecutor);\n            }\n            if (handle == null) {\n                handle = checkForWildflySwarm();\n            }\n            if (handle == null) {\n                handle = fallbackForVersion7Check(pMBeanServerExecutor);\n            }\n        }\n        return handle;\n    }", "signature": "ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor)", "full_signature": "public ServerHandle detect(MBeanServerExecutor pMBeanServerExecutor)", "class_method_signature": "JBossDetector.detect(MBeanServerExecutor pMBeanServerExecutor)", "testcase": false, "constructor": false, "invocations": ["checkFromJSR77", "checkFor5viaJMX", "checkForManagementRootServerViaJMX", "checkForWildflySwarm", "fallbackForVersion7Check"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}