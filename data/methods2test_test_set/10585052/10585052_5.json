{"test_class": {"identifier": "StampTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Stamp seedStamp;", "modifier": "private", "type": "Stamp", "declarator": "seedStamp", "var_name": "seedStamp"}, {"original_string": "private Stamp forkedStamp1;", "modifier": "private", "type": "Stamp", "declarator": "forkedStamp1", "var_name": "forkedStamp1"}, {"original_string": "private Stamp forkedStamp2;", "modifier": "private", "type": "Stamp", "declarator": "forkedStamp2", "var_name": "forkedStamp2"}, {"original_string": "private Stamp joinedStamp;", "modifier": "private", "type": "Stamp", "declarator": "joinedStamp", "var_name": "joinedStamp"}, {"original_string": "private List<Stamp> stamps;", "modifier": "private", "type": "List<Stamp>", "declarator": "stamps", "var_name": "stamps"}], "file": "itc4j-core/src/test/java/itc4j/StampTest.java"}, "test_case": {"identifier": "testLeq", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLeq() {\n        Stamp s1 = new Stamp();\n        Stamp s2 = new Stamp();\n        Assert.assertTrue(s1.leq(s2.event()));\n        Assert.assertTrue(Causality.lessThanEquals(s1, s2.event()));\n        Assert.assertFalse(s2.event().leq(s1));\n        Assert.assertFalse(Causality.lessThanEquals(s2.event(), s1));\n    }", "signature": "void testLeq()", "full_signature": "@Test public void testLeq()", "class_method_signature": "StampTest.testLeq()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "leq", "event", "assertTrue", "lessThanEquals", "event", "assertFalse", "leq", "event", "assertFalse", "lessThanEquals", "event"]}, "focal_class": {"identifier": "Stamp", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1750149585711104601L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1750149585711104601L", "var_name": "serialVersionUID"}, {"original_string": "private final ID id;", "modifier": "private final", "type": "ID", "declarator": "id", "var_name": "id"}, {"original_string": "private final Event event;", "modifier": "private final", "type": "Event", "declarator": "event", "var_name": "event"}], "methods": [{"identifier": "Stamp", "parameters": "()", "modifiers": "public", "return": "", "signature": " Stamp()", "full_signature": "public  Stamp()", "class_method_signature": "Stamp.Stamp()", "testcase": false, "constructor": true}, {"identifier": "Stamp", "parameters": "(ID id, Event event)", "modifiers": "", "return": "", "signature": " Stamp(ID id, Event event)", "full_signature": "  Stamp(ID id, Event event)", "class_method_signature": "Stamp.Stamp(ID id, Event event)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "", "return": "ID", "signature": "ID getId()", "full_signature": " ID getId()", "class_method_signature": "Stamp.getId()", "testcase": false, "constructor": false}, {"identifier": "getEvent", "parameters": "()", "modifiers": "", "return": "Event", "signature": "Event getEvent()", "full_signature": " Event getEvent()", "class_method_signature": "Stamp.getEvent()", "testcase": false, "constructor": false}, {"identifier": "fork", "parameters": "()", "modifiers": "public", "return": "Stamp[]", "signature": "Stamp[] fork()", "full_signature": "public Stamp[] fork()", "class_method_signature": "Stamp.fork()", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "()", "modifiers": "public", "return": "Stamp[]", "signature": "Stamp[] peek()", "full_signature": "public Stamp[] peek()", "class_method_signature": "Stamp.peek()", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Stamp other)", "modifiers": "public", "return": "Stamp", "signature": "Stamp join(Stamp other)", "full_signature": "public Stamp join(Stamp other)", "class_method_signature": "Stamp.join(Stamp other)", "testcase": false, "constructor": false}, {"identifier": "event", "parameters": "()", "modifiers": "public", "return": "Stamp", "signature": "Stamp event()", "full_signature": "public Stamp event()", "class_method_signature": "Stamp.event()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Stamp.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Stamp.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Stamp.hashCode()", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "()", "modifiers": "public", "return": "Stamp[]", "signature": "Stamp[] send()", "full_signature": "public Stamp[] send()", "class_method_signature": "Stamp.send()", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(Stamp other)", "modifiers": "public", "return": "Stamp", "signature": "Stamp receive(Stamp other)", "full_signature": "public Stamp receive(Stamp other)", "class_method_signature": "Stamp.receive(Stamp other)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "(Stamp other)", "modifiers": "public", "return": "Stamp[]", "signature": "Stamp[] sync(Stamp other)", "full_signature": "public Stamp[] sync(Stamp other)", "class_method_signature": "Stamp.sync(Stamp other)", "testcase": false, "constructor": false}, {"identifier": "leq", "parameters": "(Stamp other)", "modifiers": "public", "return": "boolean", "signature": "boolean leq(Stamp other)", "full_signature": "public boolean leq(Stamp other)", "class_method_signature": "Stamp.leq(Stamp other)", "testcase": false, "constructor": false}], "file": "itc4j-core/src/main/java/itc4j/Stamp.java"}, "focal_method": {"identifier": "leq", "parameters": "(Stamp other)", "modifiers": "public", "return": "boolean", "body": "public boolean leq(Stamp other) {\n        return event.leq(other.event);\n    }", "signature": "boolean leq(Stamp other)", "full_signature": "public boolean leq(Stamp other)", "class_method_signature": "Stamp.leq(Stamp other)", "testcase": false, "constructor": false, "invocations": ["leq"]}, "repository": {"repo_id": 10585052, "url": "https://github.com/sinabz/itc4j", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 59, "size": 53, "license": "licensed"}}