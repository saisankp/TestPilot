{"test_class": {"identifier": "DiskLruCacheWrapperTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [], "file": "library/src/test/java/com/climate/mirage/cache/disk/DiskLruCacheWrapperTest.java"}, "test_case": {"identifier": "testSharedDiskLruCacheFactoryReset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSharedDiskLruCacheFactoryReset() throws Exception {\n\t\tDiskLruCacheWrapper.SharedDiskLruCacheFactory wrapper1 =\n\t\t\t\tnew DiskLruCacheWrapper.SharedDiskLruCacheFactory(\n\t\t\t\t\t\tnew File(getContext().getCacheDir(), \"blank\"),\n\t\t\t\t\t\t100 * 1024 * 1024);\n\n\t\tDiskLruCacheWrapper.SharedDiskLruCacheFactory wrapper2 =\n\t\t\t\tnew DiskLruCacheWrapper.SharedDiskLruCacheFactory(\n\t\t\t\t\t\tnew File(getContext().getCacheDir(), \"blank\"),\n\t\t\t\t\t\t100 * 1024 * 1024);\n\t\twrapper1.resetDiskCache();\n\t}", "signature": "void testSharedDiskLruCacheFactoryReset()", "full_signature": "@Test public void testSharedDiskLruCacheFactoryReset()", "class_method_signature": "DiskLruCacheWrapperTest.testSharedDiskLruCacheFactoryReset()", "testcase": true, "constructor": false, "invocations": ["getCacheDir", "getContext", "getCacheDir", "getContext", "resetDiskCache"]}, "focal_class": {"identifier": "DiskLruCacheWrapper", "superclass": "", "interfaces": "implements DiskCache", "fields": [{"original_string": "private static final String TAG = DiskLruCacheWrapper.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = DiskLruCacheWrapper.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private DiskLruCacheFactory diskLruCacheFactory;", "modifier": "private", "type": "DiskLruCacheFactory", "declarator": "diskLruCacheFactory", "var_name": "diskLruCacheFactory"}, {"original_string": "volatile private boolean isReadOnly = false;", "modifier": "volatile private", "type": "boolean", "declarator": "isReadOnly = false", "var_name": "isReadOnly"}], "methods": [{"identifier": "DiskLruCacheWrapper", "parameters": "(DiskLruCacheFactory diskLruCacheFactory)", "modifiers": "public", "return": "", "signature": " DiskLruCacheWrapper(DiskLruCacheFactory diskLruCacheFactory)", "full_signature": "public  DiskLruCacheWrapper(DiskLruCacheFactory diskLruCacheFactory)", "class_method_signature": "DiskLruCacheWrapper.DiskLruCacheWrapper(DiskLruCacheFactory diskLruCacheFactory)", "testcase": false, "constructor": true}, {"identifier": "setReadOnly", "parameters": "(boolean isReadOnly)", "modifiers": "synchronized public", "return": "void", "signature": "void setReadOnly(boolean isReadOnly)", "full_signature": "synchronized public void setReadOnly(boolean isReadOnly)", "class_method_signature": "DiskLruCacheWrapper.setReadOnly(boolean isReadOnly)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "@Override public", "return": "File", "signature": "File get(String key)", "full_signature": "@Override public File get(String key)", "class_method_signature": "DiskLruCacheWrapper.get(String key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, Writer writer)", "modifiers": "@Override public", "return": "void", "signature": "void put(String key, Writer writer)", "full_signature": "@Override public void put(String key, Writer writer)", "class_method_signature": "DiskLruCacheWrapper.put(String key, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String key)", "modifiers": "@Override public", "return": "void", "signature": "void delete(String key)", "full_signature": "@Override public void delete(String key)", "class_method_signature": "DiskLruCacheWrapper.delete(String key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void clear()", "full_signature": "@Override public synchronized void clear()", "class_method_signature": "DiskLruCacheWrapper.clear()", "testcase": false, "constructor": false}, {"identifier": "getDiskCache", "parameters": "()", "modifiers": "private synchronized", "return": "DiskLruCache", "signature": "DiskLruCache getDiskCache()", "full_signature": "private synchronized DiskLruCache getDiskCache()", "class_method_signature": "DiskLruCacheWrapper.getDiskCache()", "testcase": false, "constructor": false}, {"identifier": "resetDiskCache", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void resetDiskCache()", "full_signature": "private synchronized void resetDiskCache()", "class_method_signature": "DiskLruCacheWrapper.resetDiskCache()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/climate/mirage/cache/disk/DiskLruCacheWrapper.java"}, "focal_method": {"identifier": "resetDiskCache", "parameters": "()", "modifiers": "private synchronized", "return": "void", "body": "private synchronized void resetDiskCache() {\n\t\tdiskLruCacheFactory.resetDiskCache();\n\t}", "signature": "void resetDiskCache()", "full_signature": "private synchronized void resetDiskCache()", "class_method_signature": "DiskLruCacheWrapper.resetDiskCache()", "testcase": false, "constructor": false, "invocations": ["resetDiskCache"]}, "repository": {"repo_id": 35564219, "url": "https://github.com/TheClimateCorporation/mirage", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 3928, "license": "licensed"}}