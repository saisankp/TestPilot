{"test_class": {"identifier": "MathUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "momentsolver/src/test/java/com/github/stanfordfuturedata/momentsketch/MathUtilTest.java"}, "test_case": {"identifier": "testChebyCoefficient", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChebyCoefficient() {\n        int[][] cCoeffs = MathUtil.getChebyCoefficients(5);\n        int[] expected = {0, -3, 0, 4, 0, 0};\n        assertArrayEquals(expected, cCoeffs[3]);\n    }", "signature": "void testChebyCoefficient()", "full_signature": "@Test public void testChebyCoefficient()", "class_method_signature": "MathUtilTest.testChebyCoefficient()", "testcase": true, "constructor": false, "invocations": ["getChebyCoefficients", "assertArrayEquals"]}, "focal_class": {"identifier": "MathUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getBinomials", "parameters": "(int m)", "modifiers": "public static", "return": "long[][]", "signature": "long[][] getBinomials(int m)", "full_signature": "public static long[][] getBinomials(int m)", "class_method_signature": "MathUtil.getBinomials(int m)", "testcase": false, "constructor": false}, {"identifier": "getChebyCoefficients", "parameters": "(int k)", "modifiers": "public static", "return": "int[][]", "signature": "int[][] getChebyCoefficients(int k)", "full_signature": "public static int[][] getChebyCoefficients(int k)", "class_method_signature": "MathUtil.getChebyCoefficients(int k)", "testcase": false, "constructor": false}, {"identifier": "shiftPowerSum", "parameters": "(\n            double[] powerSums,\n            double r,\n            double xc\n    )", "modifiers": "public static", "return": "double[]", "signature": "double[] shiftPowerSum(\n            double[] powerSums,\n            double r,\n            double xc\n    )", "full_signature": "public static double[] shiftPowerSum(\n            double[] powerSums,\n            double r,\n            double xc\n    )", "class_method_signature": "MathUtil.shiftPowerSum(\n            double[] powerSums,\n            double r,\n            double xc\n    )", "testcase": false, "constructor": false}, {"identifier": "powerSumsToZerodMoments", "parameters": "(\n            double[] powerSums,\n            double min,\n            double max\n    )", "modifiers": "public static", "return": "double[]", "signature": "double[] powerSumsToZerodMoments(\n            double[] powerSums,\n            double min,\n            double max\n    )", "full_signature": "public static double[] powerSumsToZerodMoments(\n            double[] powerSums,\n            double min,\n            double max\n    )", "class_method_signature": "MathUtil.powerSumsToZerodMoments(\n            double[] powerSums,\n            double min,\n            double max\n    )", "testcase": false, "constructor": false}, {"identifier": "powerSumsToChebyMoments", "parameters": "(\n            double min,\n            double max,\n            double[] powerSums\n    )", "modifiers": "public static", "return": "double[]", "signature": "double[] powerSumsToChebyMoments(\n            double min,\n            double max,\n            double[] powerSums\n    )", "full_signature": "public static double[] powerSumsToChebyMoments(\n            double min,\n            double max,\n            double[] powerSums\n    )", "class_method_signature": "MathUtil.powerSumsToChebyMoments(\n            double min,\n            double max,\n            double[] powerSums\n    )", "testcase": false, "constructor": false}, {"identifier": "arrayMean", "parameters": "(double[] xs)", "modifiers": "public static", "return": "double", "signature": "double arrayMean(double[] xs)", "full_signature": "public static double arrayMean(double[] xs)", "class_method_signature": "MathUtil.arrayMean(double[] xs)", "testcase": false, "constructor": false}, {"identifier": "calcPowers", "parameters": "(double x, double[] powers)", "modifiers": "public static", "return": "void", "signature": "void calcPowers(double x, double[] powers)", "full_signature": "public static void calcPowers(double x, double[] powers)", "class_method_signature": "MathUtil.calcPowers(double x, double[] powers)", "testcase": false, "constructor": false}, {"identifier": "entropy", "parameters": "(double[] ps)", "modifiers": "public static", "return": "double", "signature": "double entropy(double[] ps)", "full_signature": "public static double entropy(double[] ps)", "class_method_signature": "MathUtil.entropy(double[] ps)", "testcase": false, "constructor": false}, {"identifier": "getMSE", "parameters": "(double[] error)", "modifiers": "public static", "return": "double", "signature": "double getMSE(double[] error)", "full_signature": "public static double getMSE(double[] error)", "class_method_signature": "MathUtil.getMSE(double[] error)", "testcase": false, "constructor": false}], "file": "momentsolver/src/main/java/com/github/stanfordfuturedata/momentsketch/MathUtil.java"}, "focal_method": {"identifier": "getChebyCoefficients", "parameters": "(int k)", "modifiers": "public static", "return": "int[][]", "body": "public static int[][] getChebyCoefficients(int k) {\n        int[][] chebyCoeffs = new int[k+1][k+1];\n        chebyCoeffs[0][0] = 1;\n        if (k == 0) {\n            return chebyCoeffs;\n        }\n        chebyCoeffs[1][1] = 1;\n        for (int i = 2; i <= k; i++) {\n            int[] c1 = chebyCoeffs[i-1];\n            int[] c2 = chebyCoeffs[i-2];\n            chebyCoeffs[i][0] = -c2[0];\n            for (int j = 1; j <= i; j++) {\n                chebyCoeffs[i][j] = 2*c1[j-1] - c2[j];\n            }\n        }\n        return chebyCoeffs;\n    }", "signature": "int[][] getChebyCoefficients(int k)", "full_signature": "public static int[][] getChebyCoefficients(int k)", "class_method_signature": "MathUtil.getChebyCoefficients(int k)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 147378679, "url": "https://github.com/stanford-futuredata/momentsketch", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 28, "size": 59, "license": "licensed"}}