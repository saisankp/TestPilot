{"test_class": {"identifier": "TestCopyCommitter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(TestCopyCommitter.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(TestCopyCommitter.class)", "var_name": "LOG"}, {"original_string": "private static final Random rand = new Random();", "modifier": "private static final", "type": "Random", "declarator": "rand = new Random()", "var_name": "rand"}, {"original_string": "private static final Counters EMPTY_COUNTERS = new Counters();", "modifier": "private static final", "type": "Counters", "declarator": "EMPTY_COUNTERS = new Counters()", "var_name": "EMPTY_COUNTERS"}, {"original_string": "private static final Credentials CREDENTIALS = new Credentials();", "modifier": "private static final", "type": "Credentials", "declarator": "CREDENTIALS = new Credentials()", "var_name": "CREDENTIALS"}, {"original_string": "private static Configuration config;", "modifier": "private static", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "private static MiniDFSCluster cluster;", "modifier": "private static", "type": "MiniDFSCluster", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "private static CounterProvider counterProvider;", "modifier": "private static", "type": "CounterProvider", "declarator": "counterProvider", "var_name": "counterProvider"}], "file": "conduit-distcp/src/test/java/com/inmobi/conduit/distcp/tools/mapred/TestCopyCommitter.java"}, "test_case": {"identifier": "testDeleteMissingFlatInterleavedFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDeleteMissingFlatInterleavedFiles() {\n    TaskAttemptContext taskAttemptContext = getTaskAttemptContext(config);\n    JobContext jobContext = Mockito.mock(JobContext.class);\n    Mockito.when(jobContext.getConfiguration()).thenReturn(config);\n    JobID jobID = new JobID();\n    Mockito.when(jobContext.getJobID()).thenReturn(jobID);\n    Configuration conf = jobContext.getConfiguration();\n\n\n    String sourceBase;\n    String targetBase;\n    FileSystem fs = null;\n    try {\n      OutputCommitter committer = new CopyCommitter(null, taskAttemptContext);\n      fs = FileSystem.get(conf);\n      sourceBase = \"/tmp1/\" + String.valueOf(rand.nextLong());\n      targetBase = \"/tmp1/\" + String.valueOf(rand.nextLong());\n      TestDistCpUtils.createFile(fs, sourceBase + \"/1\");\n      TestDistCpUtils.createFile(fs, sourceBase + \"/3\");\n      TestDistCpUtils.createFile(fs, sourceBase + \"/4\");\n      TestDistCpUtils.createFile(fs, sourceBase + \"/5\");\n      TestDistCpUtils.createFile(fs, sourceBase + \"/7\");\n      TestDistCpUtils.createFile(fs, sourceBase + \"/8\");\n      TestDistCpUtils.createFile(fs, sourceBase + \"/9\");\n\n      TestDistCpUtils.createFile(fs, targetBase + \"/2\");\n      TestDistCpUtils.createFile(fs, targetBase + \"/4\");\n      TestDistCpUtils.createFile(fs, targetBase + \"/5\");\n      TestDistCpUtils.createFile(fs, targetBase + \"/7\");\n      TestDistCpUtils.createFile(fs, targetBase + \"/9\");\n      TestDistCpUtils.createFile(fs, targetBase + \"/A\");\n\n      DistCpOptions options = new DistCpOptions(Arrays.asList(new Path(sourceBase)),\n        new Path(\"/out\"));\n      options.setSyncFolder(true);\n      options.setDeleteMissing(true);\n      options.appendToConf(conf);\n\n      CopyListing listing = new GlobbedCopyListing(conf, CREDENTIALS);\n      Path listingFile = new Path(\"/tmp1/\" + String.valueOf(rand.nextLong()));\n      listing.buildListing(listingFile, options);\n\n      conf.set(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH, targetBase);\n      conf.set(DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH, targetBase);\n\n      committer.commitJob(jobContext);\n      if (!TestDistCpUtils.checkIfFoldersAreInSync(fs, targetBase, sourceBase)) {\n        Assert.fail(\"Source and target folders are not in sync\");\n      }\n      Assert.assertEquals(fs.listStatus(new Path(targetBase)).length, 4);\n\n      //Test for idempotent commit\n      committer.commitJob(jobContext);\n      if (!TestDistCpUtils.checkIfFoldersAreInSync(fs, targetBase, sourceBase)) {\n        Assert.fail(\"Source and target folders are not in sync\");\n      }\n      Assert.assertEquals(fs.listStatus(new Path(targetBase)).length, 4);\n    } catch (IOException e) {\n      LOG.error(\"Exception encountered while testing for delete missing\", e);\n      Assert.fail(\"Delete missing failure\");\n    } finally {\n      TestDistCpUtils.delete(fs, \"/tmp1\");\n    }\n\n  }", "signature": "void testDeleteMissingFlatInterleavedFiles()", "full_signature": "@Test public void testDeleteMissingFlatInterleavedFiles()", "class_method_signature": "TestCopyCommitter.testDeleteMissingFlatInterleavedFiles()", "testcase": true, "constructor": false, "invocations": ["getTaskAttemptContext", "mock", "thenReturn", "when", "getConfiguration", "thenReturn", "when", "getJobID", "getConfiguration", "get", "valueOf", "nextLong", "valueOf", "nextLong", "createFile", "createFile", "createFile", "createFile", "createFile", "createFile", "createFile", "createFile", "createFile", "createFile", "createFile", "createFile", "createFile", "asList", "setSyncFolder", "setDeleteMissing", "appendToConf", "valueOf", "nextLong", "buildListing", "set", "set", "commitJob", "checkIfFoldersAreInSync", "fail", "assertEquals", "listStatus", "commitJob", "checkIfFoldersAreInSync", "fail", "assertEquals", "listStatus", "error", "fail", "delete"]}, "focal_class": {"identifier": "CopyCommitter", "superclass": "extends FileOutputCommitter", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(CopyCommitter.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(CopyCommitter.class)", "var_name": "LOG"}, {"original_string": "private final TaskAttemptContext taskAttemptContext;", "modifier": "private final", "type": "TaskAttemptContext", "declarator": "taskAttemptContext", "var_name": "taskAttemptContext"}], "methods": [{"identifier": "CopyCommitter", "parameters": "(Path outputPath, TaskAttemptContext context)", "modifiers": "public", "return": "", "signature": " CopyCommitter(Path outputPath, TaskAttemptContext context)", "full_signature": "public  CopyCommitter(Path outputPath, TaskAttemptContext context)", "class_method_signature": "CopyCommitter.CopyCommitter(Path outputPath, TaskAttemptContext context)", "testcase": false, "constructor": true}, {"identifier": "commitJob", "parameters": "(JobContext jobContext)", "modifiers": "@Override public", "return": "void", "signature": "void commitJob(JobContext jobContext)", "full_signature": "@Override public void commitJob(JobContext jobContext)", "class_method_signature": "CopyCommitter.commitJob(JobContext jobContext)", "testcase": false, "constructor": false}, {"identifier": "abortJob", "parameters": "(JobContext jobContext,\n                       JobStatus.State state)", "modifiers": "@Override public", "return": "void", "signature": "void abortJob(JobContext jobContext,\n                       JobStatus.State state)", "full_signature": "@Override public void abortJob(JobContext jobContext,\n                       JobStatus.State state)", "class_method_signature": "CopyCommitter.abortJob(JobContext jobContext,\n                       JobStatus.State state)", "testcase": false, "constructor": false}, {"identifier": "cleanupTempFiles", "parameters": "(JobContext context)", "modifiers": "private", "return": "void", "signature": "void cleanupTempFiles(JobContext context)", "full_signature": "private void cleanupTempFiles(JobContext context)", "class_method_signature": "CopyCommitter.cleanupTempFiles(JobContext context)", "testcase": false, "constructor": false}, {"identifier": "deleteAttemptTempFiles", "parameters": "(Path targetWorkPath,\n                                      FileSystem targetFS,\n                                      String jobId)", "modifiers": "private", "return": "void", "signature": "void deleteAttemptTempFiles(Path targetWorkPath,\n                                      FileSystem targetFS,\n                                      String jobId)", "full_signature": "private void deleteAttemptTempFiles(Path targetWorkPath,\n                                      FileSystem targetFS,\n                                      String jobId)", "class_method_signature": "CopyCommitter.deleteAttemptTempFiles(Path targetWorkPath,\n                                      FileSystem targetFS,\n                                      String jobId)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "signature": "void cleanup(Configuration conf)", "full_signature": "private void cleanup(Configuration conf)", "class_method_signature": "CopyCommitter.cleanup(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "preserveFileAttributes", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "signature": "void preserveFileAttributes(Configuration conf)", "full_signature": "private void preserveFileAttributes(Configuration conf)", "class_method_signature": "CopyCommitter.preserveFileAttributes(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "deleteMissing", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "signature": "void deleteMissing(Configuration conf)", "full_signature": "private void deleteMissing(Configuration conf)", "class_method_signature": "CopyCommitter.deleteMissing(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "commitData", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "signature": "void commitData(Configuration conf)", "full_signature": "private void commitData(Configuration conf)", "class_method_signature": "CopyCommitter.commitData(Configuration conf)", "testcase": false, "constructor": false}], "file": "conduit-distcp/src/main/java/com/inmobi/conduit/distcp/tools/mapred/CopyCommitter.java"}, "focal_method": {"identifier": "commitJob", "parameters": "(JobContext jobContext)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void commitJob(JobContext jobContext) throws IOException {\n    Configuration conf = HadoopCompat.getConfiguration(jobContext);\n    super.commitJob(jobContext);\n\n    cleanupTempFiles(jobContext);\n\n    String attributes = conf.get(DistCpConstants.CONF_LABEL_PRESERVE_STATUS);\n    if (attributes != null && !attributes.isEmpty()) {\n      preserveFileAttributes(conf);\n    }\n\n    if (conf.getBoolean(DistCpConstants.CONF_LABEL_DELETE_MISSING, false)) {\n      deleteMissing(conf);\n    } else if (conf.getBoolean(DistCpConstants.CONF_LABEL_ATOMIC_COPY, false)) {\n      commitData(conf);\n    }\n    HadoopCompat.setStatus(taskAttemptContext, \"Commit Successful\");\n    cleanup(conf);\n  }", "signature": "void commitJob(JobContext jobContext)", "full_signature": "@Override public void commitJob(JobContext jobContext)", "class_method_signature": "CopyCommitter.commitJob(JobContext jobContext)", "testcase": false, "constructor": false, "invocations": ["getConfiguration", "commitJob", "cleanupTempFiles", "get", "isEmpty", "preserveFileAttributes", "getBoolean", "deleteMissing", "getBoolean", "commitData", "setStatus", "cleanup"]}, "repository": {"repo_id": 7218024, "url": "https://github.com/InMobi/conduit", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 49400, "license": "licensed"}}