{"test_class": {"identifier": "RainWaterTest", "superclass": "", "interfaces": "", "fields": [], "file": "algs/src/test/java/com/github/kowshik/bigo/general/RainWaterTest.java"}, "test_case": {"identifier": "findAccumulatedWater_NoWaterAccumulated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void findAccumulatedWater_NoWaterAccumulated() {\n\t\tassertEquals(0L, RainWater.findAccumulatedWater(new int[] { 2, 1 }));\n\t}", "signature": "void findAccumulatedWater_NoWaterAccumulated()", "full_signature": "@Test public void findAccumulatedWater_NoWaterAccumulated()", "class_method_signature": "RainWaterTest.findAccumulatedWater_NoWaterAccumulated()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "findAccumulatedWater"]}, "focal_class": {"identifier": "RainWater", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findAccumulatedWater", "parameters": "(int[] terrain)", "modifiers": "public static", "return": "long", "signature": "long findAccumulatedWater(int[] terrain)", "full_signature": "public static long findAccumulatedWater(int[] terrain)", "class_method_signature": "RainWater.findAccumulatedWater(int[] terrain)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/kowshik/bigo/general/RainWater.java"}, "focal_method": {"identifier": "findAccumulatedWater", "parameters": "(int[] terrain)", "modifiers": "public static", "return": "long", "body": "public static long findAccumulatedWater(int[] terrain) {\n\t\tif (terrain == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tint maxIndex = 0;\n\t\tlong totalWater = 0;\n\t\tlong tempWater = 0;\n\n\t\tfor (int index = maxIndex + 1; index < terrain.length; index++) {\n\t\t\tif (terrain[index] >= terrain[maxIndex]) {\n\t\t\t\ttotalWater += tempWater;\n\t\t\t\ttempWater = 0; // flushing temp water stored\n\t\t\t\tmaxIndex = index;\n\t\t\t} else {\n\t\t\t\ttempWater += terrain[maxIndex] - terrain[index];\n\t\t\t}\n\t\t}\n\n\t\ttempWater = 0;\n\t\tint reverseMaxIndex = terrain.length - 1;\n\t\tfor (int index = reverseMaxIndex - 1; index >= maxIndex; index--) {\n\t\t\tif (terrain[index] >= terrain[reverseMaxIndex]) {\n\t\t\t\ttotalWater += tempWater;\n\t\t\t\ttempWater = 0; // flushing temp water stored\n\t\t\t\treverseMaxIndex = index;\n\t\t\t} else {\n\t\t\t\ttempWater += terrain[reverseMaxIndex] - terrain[index];\n\t\t\t}\n\t\t}\n\n\t\treturn totalWater;\n\t}", "signature": "long findAccumulatedWater(int[] terrain)", "full_signature": "public static long findAccumulatedWater(int[] terrain)", "class_method_signature": "RainWater.findAccumulatedWater(int[] terrain)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}