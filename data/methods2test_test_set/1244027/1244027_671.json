{"test_class": {"identifier": "DoubleValueFactoryTest", "superclass": "extends BaseValueFactoryTest", "interfaces": "", "fields": [{"original_string": "private DoubleValueFactory factory;", "modifier": "private", "type": "DoubleValueFactory", "declarator": "factory", "var_name": "factory"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/value/basic/DoubleValueFactoryTest.java"}, "test_case": {"identifier": "shouldNotCreateDoubleFromReference", "parameters": "()", "modifiers": "@Test( expected = ValueFormatException.class ) public", "return": "void", "body": "@Test( expected = ValueFormatException.class )\n    public void shouldNotCreateDoubleFromReference() {\n        factory.create(mock(Reference.class));\n    }", "signature": "void shouldNotCreateDoubleFromReference()", "full_signature": "@Test( expected = ValueFormatException.class ) public void shouldNotCreateDoubleFromReference()", "class_method_signature": "DoubleValueFactoryTest.shouldNotCreateDoubleFromReference()", "testcase": true, "constructor": false, "invocations": ["create", "mock"]}, "focal_class": {"identifier": "DoubleValueFactory", "superclass": "extends AbstractValueFactory<Double>", "interfaces": "", "fields": [], "methods": [{"identifier": "DoubleValueFactory", "parameters": "( TextDecoder decoder,\n                               ValueFactories factories )", "modifiers": "public", "return": "", "signature": " DoubleValueFactory( TextDecoder decoder,\n                               ValueFactories factories )", "full_signature": "public  DoubleValueFactory( TextDecoder decoder,\n                               ValueFactories factories )", "class_method_signature": "DoubleValueFactory.DoubleValueFactory( TextDecoder decoder,\n                               ValueFactories factories )", "testcase": false, "constructor": true}, {"identifier": "with", "parameters": "( ValueFactories valueFactories )", "modifiers": "@Override public", "return": "ValueFactory<Double>", "signature": "ValueFactory<Double> with( ValueFactories valueFactories )", "full_signature": "@Override public ValueFactory<Double> with( ValueFactories valueFactories )", "class_method_signature": "DoubleValueFactory.with( ValueFactories valueFactories )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( String value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( String value )", "full_signature": "@Override public Double create( String value )", "class_method_signature": "DoubleValueFactory.create( String value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( String value,\n                          TextDecoder decoder )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( String value,\n                          TextDecoder decoder )", "full_signature": "@Override public Double create( String value,\n                          TextDecoder decoder )", "class_method_signature": "DoubleValueFactory.create( String value,\n                          TextDecoder decoder )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( int value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( int value )", "full_signature": "@Override public Double create( int value )", "class_method_signature": "DoubleValueFactory.create( int value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( long value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( long value )", "full_signature": "@Override public Double create( long value )", "class_method_signature": "DoubleValueFactory.create( long value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( boolean value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( boolean value )", "full_signature": "@Override public Double create( boolean value )", "class_method_signature": "DoubleValueFactory.create( boolean value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( float value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( float value )", "full_signature": "@Override public Double create( float value )", "class_method_signature": "DoubleValueFactory.create( float value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( double value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( double value )", "full_signature": "@Override public Double create( double value )", "class_method_signature": "DoubleValueFactory.create( double value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( BigDecimal value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( BigDecimal value )", "full_signature": "@Override public Double create( BigDecimal value )", "class_method_signature": "DoubleValueFactory.create( BigDecimal value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Calendar value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( Calendar value )", "full_signature": "@Override public Double create( Calendar value )", "class_method_signature": "DoubleValueFactory.create( Calendar value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Date value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( Date value )", "full_signature": "@Override public Double create( Date value )", "class_method_signature": "DoubleValueFactory.create( Date value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( DateTime value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( DateTime value )", "full_signature": "@Override public Double create( DateTime value )", "class_method_signature": "DoubleValueFactory.create( DateTime value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Name value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( Name value )", "full_signature": "@Override public Double create( Name value )", "class_method_signature": "DoubleValueFactory.create( Name value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Path value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( Path value )", "full_signature": "@Override public Double create( Path value )", "class_method_signature": "DoubleValueFactory.create( Path value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Path.Segment value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( Path.Segment value )", "full_signature": "@Override public Double create( Path.Segment value )", "class_method_signature": "DoubleValueFactory.create( Path.Segment value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Reference value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( Reference value )", "full_signature": "@Override public Double create( Reference value )", "class_method_signature": "DoubleValueFactory.create( Reference value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( URI value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( URI value )", "full_signature": "@Override public Double create( URI value )", "class_method_signature": "DoubleValueFactory.create( URI value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( UUID value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( UUID value )", "full_signature": "@Override public Double create( UUID value )", "class_method_signature": "DoubleValueFactory.create( UUID value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( NodeKey value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( NodeKey value )", "full_signature": "@Override public Double create( NodeKey value )", "class_method_signature": "DoubleValueFactory.create( NodeKey value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( byte[] value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( byte[] value )", "full_signature": "@Override public Double create( byte[] value )", "class_method_signature": "DoubleValueFactory.create( byte[] value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( BinaryValue value )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( BinaryValue value )", "full_signature": "@Override public Double create( BinaryValue value )", "class_method_signature": "DoubleValueFactory.create( BinaryValue value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( InputStream stream )", "modifiers": "@Override public", "return": "Double", "signature": "Double create( InputStream stream )", "full_signature": "@Override public Double create( InputStream stream )", "class_method_signature": "DoubleValueFactory.create( InputStream stream )", "testcase": false, "constructor": false}, {"identifier": "createEmptyArray", "parameters": "( int length )", "modifiers": "@Override public", "return": "Double[]", "signature": "Double[] createEmptyArray( int length )", "full_signature": "@Override public Double[] createEmptyArray( int length )", "class_method_signature": "DoubleValueFactory.createEmptyArray( int length )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/value/basic/DoubleValueFactory.java"}, "focal_method": {"identifier": "create", "parameters": "( String value )", "modifiers": "@Override public", "return": "Double", "body": "@Override\n    public Double create( String value ) {\n        if (value == null) return null;\n        try {\n            return Double.valueOf(value.trim());\n        } catch (NumberFormatException err) {\n            throw new ValueFormatException(value, getPropertyType(),\n                                           GraphI18n.errorConvertingType.text(String.class.getSimpleName(),\n                                                                              Double.class.getSimpleName(),\n                                                                              value), err);\n        }\n    }", "signature": "Double create( String value )", "full_signature": "@Override public Double create( String value )", "class_method_signature": "DoubleValueFactory.create( String value )", "testcase": false, "constructor": false, "invocations": ["valueOf", "trim", "getPropertyType", "text", "getSimpleName", "getSimpleName"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}