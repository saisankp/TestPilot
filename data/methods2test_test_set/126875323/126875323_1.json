{"test_class": {"identifier": "ManagedExecutorsTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/jakarta/enterprise/concurrent/ManagedExecutorsTest.java"}, "test_case": {"identifier": "testManagedTask_Runnable_executionProperties_ManagedTaskListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testManagedTask_Runnable_executionProperties_ManagedTaskListener() {\n        RunnableImpl task = new RunnableImpl();\n        ManagedTaskListenerImpl taskListener = new ManagedTaskListenerImpl();\n        Map<String, String> executionProperties = new HashMap<String, String>();\n        final String TASK_NAME = \"task1\";\n        executionProperties.put(ManagedTask.IDENTITY_NAME, TASK_NAME);\n        executionProperties.put(ManagedTask.LONGRUNNING_HINT, \"true\");\n        \n        Runnable wrapped = ManagedExecutors.managedTask(task, executionProperties, taskListener);\n        ManagedTask managedTask = (ManagedTask) wrapped;\n        assertTrue(taskListener == managedTask.getManagedTaskListener());\n        assertEquals(\"true\", managedTask.getExecutionProperties().get(ManagedTask.LONGRUNNING_HINT));\n        assertEquals(TASK_NAME, managedTask.getExecutionProperties().get(ManagedTask.IDENTITY_NAME));\n        \n        wrapped.run();\n        assertTrue(task.ran);\n    }", "signature": "void testManagedTask_Runnable_executionProperties_ManagedTaskListener()", "full_signature": "@Test public void testManagedTask_Runnable_executionProperties_ManagedTaskListener()", "class_method_signature": "ManagedExecutorsTest.testManagedTask_Runnable_executionProperties_ManagedTaskListener()", "testcase": true, "constructor": false, "invocations": ["put", "put", "managedTask", "assertTrue", "getManagedTaskListener", "assertEquals", "get", "getExecutionProperties", "assertEquals", "get", "getExecutionProperties", "run", "assertTrue"]}, "focal_class": {"identifier": "ManagedExecutors", "superclass": "", "interfaces": "", "fields": [{"original_string": "final static String NULL_TASK_ERROR_MSG = \"Task cannot be null\";", "modifier": "final static", "type": "String", "declarator": "NULL_TASK_ERROR_MSG = \"Task cannot be null\"", "var_name": "NULL_TASK_ERROR_MSG"}], "methods": [{"identifier": "ManagedExecutors", "parameters": "()", "modifiers": "private", "return": "", "signature": " ManagedExecutors()", "full_signature": "private  ManagedExecutors()", "class_method_signature": "ManagedExecutors.ManagedExecutors()", "testcase": false, "constructor": true}, {"identifier": "isCurrentThreadShutdown", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isCurrentThreadShutdown()", "full_signature": "public static boolean isCurrentThreadShutdown()", "class_method_signature": "ManagedExecutors.isCurrentThreadShutdown()", "testcase": false, "constructor": false}, {"identifier": "managedTask", "parameters": "(Runnable task, ManagedTaskListener taskListener)", "modifiers": "public static", "return": "Runnable", "signature": "Runnable managedTask(Runnable task, ManagedTaskListener taskListener)", "full_signature": "public static Runnable managedTask(Runnable task, ManagedTaskListener taskListener)", "class_method_signature": "ManagedExecutors.managedTask(Runnable task, ManagedTaskListener taskListener)", "testcase": false, "constructor": false}, {"identifier": "managedTask", "parameters": "(Runnable task, Map<String, String> executionProperties, ManagedTaskListener taskListener)", "modifiers": "public static", "return": "Runnable", "signature": "Runnable managedTask(Runnable task, Map<String, String> executionProperties, ManagedTaskListener taskListener)", "full_signature": "public static Runnable managedTask(Runnable task, Map<String, String> executionProperties, ManagedTaskListener taskListener)", "class_method_signature": "ManagedExecutors.managedTask(Runnable task, Map<String, String> executionProperties, ManagedTaskListener taskListener)", "testcase": false, "constructor": false}, {"identifier": "managedTask", "parameters": "(Callable<V> task, ManagedTaskListener taskListener)", "modifiers": "public static", "return": "Callable<V>", "signature": "Callable<V> managedTask(Callable<V> task, ManagedTaskListener taskListener)", "full_signature": "public static Callable<V> managedTask(Callable<V> task, ManagedTaskListener taskListener)", "class_method_signature": "ManagedExecutors.managedTask(Callable<V> task, ManagedTaskListener taskListener)", "testcase": false, "constructor": false}, {"identifier": "managedTask", "parameters": "(Callable<V> task, Map<String, String> executionProperties, ManagedTaskListener taskListener)", "modifiers": "public static", "return": "Callable<V>", "signature": "Callable<V> managedTask(Callable<V> task, Map<String, String> executionProperties, ManagedTaskListener taskListener)", "full_signature": "public static Callable<V> managedTask(Callable<V> task, Map<String, String> executionProperties, ManagedTaskListener taskListener)", "class_method_signature": "ManagedExecutors.managedTask(Callable<V> task, Map<String, String> executionProperties, ManagedTaskListener taskListener)", "testcase": false, "constructor": false}], "file": "api/src/main/java/jakarta/enterprise/concurrent/ManagedExecutors.java"}, "focal_method": {"identifier": "managedTask", "parameters": "(Runnable task, ManagedTaskListener taskListener)", "modifiers": "public static", "return": "Runnable", "body": "public static Runnable managedTask(Runnable task, ManagedTaskListener taskListener)\n        throws IllegalArgumentException {\n        return managedTask(task, null, taskListener);\n    }", "signature": "Runnable managedTask(Runnable task, ManagedTaskListener taskListener)", "full_signature": "public static Runnable managedTask(Runnable task, ManagedTaskListener taskListener)", "class_method_signature": "ManagedExecutors.managedTask(Runnable task, ManagedTaskListener taskListener)", "testcase": false, "constructor": false, "invocations": ["managedTask"]}, "repository": {"repo_id": 126875323, "url": "https://github.com/eclipse-ee4j/concurrency-api", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 14, "size": 3614, "license": "licensed"}}