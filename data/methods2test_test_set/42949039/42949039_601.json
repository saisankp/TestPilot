{"test_class": {"identifier": "StoragePolicyProcessorHelperServiceImplTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private BusinessObjectDataDaoHelper businessObjectDataDaoHelper;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataDaoHelper", "declarator": "businessObjectDataDaoHelper", "var_name": "businessObjectDataDaoHelper"}, {"original_string": "@Mock\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Mock\n    private ConfigurationHelper configurationHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Mock\n    private JsonHelper jsonHelper;", "modifier": "@Mock\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Mock\n    private S3KeyPrefixHelper s3KeyPrefixHelper;", "modifier": "@Mock\n    private", "type": "S3KeyPrefixHelper", "declarator": "s3KeyPrefixHelper", "var_name": "s3KeyPrefixHelper"}, {"original_string": "@Mock\n    private S3Service s3Service;", "modifier": "@Mock\n    private", "type": "S3Service", "declarator": "s3Service", "var_name": "s3Service"}, {"original_string": "@Mock\n    private StorageFileHelper storageFileHelper;", "modifier": "@Mock\n    private", "type": "StorageFileHelper", "declarator": "storageFileHelper", "var_name": "storageFileHelper"}, {"original_string": "@Mock\n    private StorageHelper storageHelper;", "modifier": "@Mock\n    private", "type": "StorageHelper", "declarator": "storageHelper", "var_name": "storageHelper"}, {"original_string": "@Mock\n    private StoragePolicyDaoHelper storagePolicyDaoHelper;", "modifier": "@Mock\n    private", "type": "StoragePolicyDaoHelper", "declarator": "storagePolicyDaoHelper", "var_name": "storagePolicyDaoHelper"}, {"original_string": "@Mock\n    private StoragePolicyHelper storagePolicyHelper;", "modifier": "@Mock\n    private", "type": "StoragePolicyHelper", "declarator": "storagePolicyHelper", "var_name": "storagePolicyHelper"}, {"original_string": "@InjectMocks\n    private StoragePolicyProcessorHelperServiceImpl storagePolicyProcessorHelperServiceImpl;", "modifier": "@InjectMocks\n    private", "type": "StoragePolicyProcessorHelperServiceImpl", "declarator": "storagePolicyProcessorHelperServiceImpl", "var_name": "storagePolicyProcessorHelperServiceImpl"}, {"original_string": "@Mock\n    private StorageUnitDao storageUnitDao;", "modifier": "@Mock\n    private", "type": "StorageUnitDao", "declarator": "storageUnitDao", "var_name": "storageUnitDao"}, {"original_string": "@Mock\n    private StorageUnitDaoHelper storageUnitDaoHelper;", "modifier": "@Mock\n    private", "type": "StorageUnitDaoHelper", "declarator": "storageUnitDaoHelper", "var_name": "storageUnitDaoHelper"}, {"original_string": "@Mock\n    private StorageUnitHelper storageUnitHelper;", "modifier": "@Mock\n    private", "type": "StorageUnitHelper", "declarator": "storageUnitHelper", "var_name": "storageUnitHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/impl/StoragePolicyProcessorHelperServiceImplTest.java"}, "test_case": {"identifier": "testExecuteStoragePolicyTransitionImpl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteStoragePolicyTransitionImpl()\n    {\n        // Create a business object data key.\n        BusinessObjectDataKey businessObjectDataKey =\n            new BusinessObjectDataKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE,\n                NO_SUBPARTITION_VALUES, DATA_VERSION);\n\n        // Create a storage file path.\n        String storageFilePath = TEST_S3_KEY_PREFIX + \"/\" + LOCAL_FILE;\n\n        // Create a list of storage files to be passed as an input.\n        List<StorageFile> storageFiles = Collections.singletonList(new StorageFile(storageFilePath, FILE_SIZE_1_KB, ROW_COUNT_1000));\n\n        // Create a storage policy transition parameters DTO.\n        StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto =\n            new StoragePolicyTransitionParamsDto(businessObjectDataKey, STORAGE_NAME, S3_ENDPOINT, S3_BUCKET_NAME, TEST_S3_KEY_PREFIX,\n                StorageUnitStatusEntity.ARCHIVING, StorageUnitStatusEntity.ENABLED, storageFiles, S3_OBJECT_TAG_KEY, S3_OBJECT_TAG_VALUE,\n                S3_OBJECT_TAGGER_ROLE_ARN, S3_OBJECT_TAGGER_ROLE_SESSION_NAME);\n\n        // Create an S3 file transfer parameters DTO to access the S3 bucket.\n        S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto = new S3FileTransferRequestParamsDto();\n\n        // Create an S3 file transfer parameters DTO to be used for S3 object tagging operation.\n        S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto = new S3FileTransferRequestParamsDto();\n        s3ObjectTaggerParamsDto.setAwsAccessKeyId(AWS_ASSUMED_ROLE_ACCESS_KEY);\n        s3ObjectTaggerParamsDto.setAwsSecretKey(AWS_ASSUMED_ROLE_SECRET_KEY);\n        s3ObjectTaggerParamsDto.setSessionToken(AWS_ASSUMED_ROLE_SESSION_TOKEN);\n\n        // Create a list of S3 object summaries selected without zero byte directory markers.\n        List<S3ObjectSummary> actualS3FilesWithoutZeroByteDirectoryMarkers = Collections.singletonList(new S3ObjectSummary());\n\n        // Create a list of all S3 files matching the S3 key prefix form the S3 bucket.\n        List<S3ObjectSummary> actualS3Files = Collections.singletonList(new S3ObjectSummary());\n\n        // Create an updated S3 file transfer parameters DTO to access the S3 bucket.\n        S3FileTransferRequestParamsDto updatedS3FileTransferRequestParamsDto = new S3FileTransferRequestParamsDto();\n        updatedS3FileTransferRequestParamsDto.setS3Endpoint(S3_ENDPOINT);\n        updatedS3FileTransferRequestParamsDto.setS3BucketName(S3_BUCKET_NAME);\n        updatedS3FileTransferRequestParamsDto.setS3KeyPrefix(TEST_S3_KEY_PREFIX + \"/\");\n\n        // Create an updated S3 file transfer parameters DTO to be used for S3 object tagging operation.\n        S3FileTransferRequestParamsDto updatedS3ObjectTaggerParamsDto = new S3FileTransferRequestParamsDto();\n        updatedS3ObjectTaggerParamsDto.setAwsAccessKeyId(AWS_ASSUMED_ROLE_ACCESS_KEY);\n        updatedS3ObjectTaggerParamsDto.setAwsSecretKey(AWS_ASSUMED_ROLE_SECRET_KEY);\n        updatedS3ObjectTaggerParamsDto.setSessionToken(AWS_ASSUMED_ROLE_SESSION_TOKEN);\n        updatedS3ObjectTaggerParamsDto.setS3Endpoint(S3_ENDPOINT);\n\n        // Mock the external calls.\n        when(storageHelper.getS3FileTransferRequestParamsDto()).thenReturn(s3FileTransferRequestParamsDto);\n        when(storageHelper.getS3FileTransferRequestParamsDtoByRole(S3_OBJECT_TAGGER_ROLE_ARN, S3_OBJECT_TAGGER_ROLE_SESSION_NAME))\n            .thenReturn(s3ObjectTaggerParamsDto);\n        when(s3Service.listDirectory(s3FileTransferRequestParamsDto, true)).thenReturn(actualS3FilesWithoutZeroByteDirectoryMarkers);\n        when(s3Service.listDirectory(s3FileTransferRequestParamsDto, false)).thenReturn(actualS3Files);\n\n        // Call the method under test.\n        storagePolicyProcessorHelperServiceImpl.executeStoragePolicyTransitionImpl(storagePolicyTransitionParamsDto);\n\n        // Verify the external calls.\n        verify(storageHelper).getS3FileTransferRequestParamsDto();\n        verify(storageHelper).getS3FileTransferRequestParamsDtoByRole(S3_OBJECT_TAGGER_ROLE_ARN, S3_OBJECT_TAGGER_ROLE_SESSION_NAME);\n        verify(s3Service).listDirectory(s3FileTransferRequestParamsDto, true);\n        verify(storageFileHelper).validateRegisteredS3Files(storageFiles, actualS3FilesWithoutZeroByteDirectoryMarkers, STORAGE_NAME, businessObjectDataKey);\n        verify(s3Service).listDirectory(s3FileTransferRequestParamsDto, true);\n        verify(s3Service).listDirectory(s3FileTransferRequestParamsDto, false);\n        verify(s3Service)\n            .tagObjects(updatedS3FileTransferRequestParamsDto, updatedS3ObjectTaggerParamsDto, actualS3Files, new Tag(S3_OBJECT_TAG_KEY, S3_OBJECT_TAG_VALUE));\n        verifyNoMoreInteractionsHelper();\n\n        // Validate the results.\n        assertEquals(new StoragePolicyTransitionParamsDto(businessObjectDataKey, STORAGE_NAME, S3_ENDPOINT, S3_BUCKET_NAME, TEST_S3_KEY_PREFIX,\n            StorageUnitStatusEntity.ARCHIVING, StorageUnitStatusEntity.ENABLED, storageFiles, S3_OBJECT_TAG_KEY, S3_OBJECT_TAG_VALUE, S3_OBJECT_TAGGER_ROLE_ARN,\n            S3_OBJECT_TAGGER_ROLE_SESSION_NAME), storagePolicyTransitionParamsDto);\n    }", "signature": "void testExecuteStoragePolicyTransitionImpl()", "full_signature": "@Test public void testExecuteStoragePolicyTransitionImpl()", "class_method_signature": "StoragePolicyProcessorHelperServiceImplTest.testExecuteStoragePolicyTransitionImpl()", "testcase": true, "constructor": false, "invocations": ["singletonList", "setAwsAccessKeyId", "setAwsSecretKey", "setSessionToken", "singletonList", "singletonList", "setS3Endpoint", "setS3BucketName", "setS3KeyPrefix", "setAwsAccessKeyId", "setAwsSecretKey", "setSessionToken", "setS3Endpoint", "thenReturn", "when", "getS3FileTransferRequestParamsDto", "thenReturn", "when", "getS3FileTransferRequestParamsDtoByRole", "thenReturn", "when", "listDirectory", "thenReturn", "when", "listDirectory", "executeStoragePolicyTransitionImpl", "getS3FileTransferRequestParamsDto", "verify", "getS3FileTransferRequestParamsDtoByRole", "verify", "listDirectory", "verify", "validateRegisteredS3Files", "verify", "listDirectory", "verify", "listDirectory", "verify", "tagObjects", "verify", "verifyNoMoreInteractionsHelper", "assertEquals"]}, "focal_class": {"identifier": "StoragePolicyProcessorHelperServiceImpl", "superclass": "", "interfaces": "implements StoragePolicyProcessorHelperService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(StoragePolicyProcessorHelperServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(StoragePolicyProcessorHelperServiceImpl.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private BusinessObjectDataDaoHelper businessObjectDataDaoHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataDaoHelper", "declarator": "businessObjectDataDaoHelper", "var_name": "businessObjectDataDaoHelper"}, {"original_string": "@Autowired\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    private S3KeyPrefixHelper s3KeyPrefixHelper;", "modifier": "@Autowired\n    private", "type": "S3KeyPrefixHelper", "declarator": "s3KeyPrefixHelper", "var_name": "s3KeyPrefixHelper"}, {"original_string": "@Autowired\n    private S3Service s3Service;", "modifier": "@Autowired\n    private", "type": "S3Service", "declarator": "s3Service", "var_name": "s3Service"}, {"original_string": "@Autowired\n    private StorageFileHelper storageFileHelper;", "modifier": "@Autowired\n    private", "type": "StorageFileHelper", "declarator": "storageFileHelper", "var_name": "storageFileHelper"}, {"original_string": "@Autowired\n    private StorageHelper storageHelper;", "modifier": "@Autowired\n    private", "type": "StorageHelper", "declarator": "storageHelper", "var_name": "storageHelper"}, {"original_string": "@Autowired\n    private StoragePolicyDaoHelper storagePolicyDaoHelper;", "modifier": "@Autowired\n    private", "type": "StoragePolicyDaoHelper", "declarator": "storagePolicyDaoHelper", "var_name": "storagePolicyDaoHelper"}, {"original_string": "@Autowired\n    private StoragePolicyHelper storagePolicyHelper;", "modifier": "@Autowired\n    private", "type": "StoragePolicyHelper", "declarator": "storagePolicyHelper", "var_name": "storagePolicyHelper"}, {"original_string": "@Autowired\n    private StorageUnitDao storageUnitDao;", "modifier": "@Autowired\n    private", "type": "StorageUnitDao", "declarator": "storageUnitDao", "var_name": "storageUnitDao"}, {"original_string": "@Autowired\n    private StorageUnitDaoHelper storageUnitDaoHelper;", "modifier": "@Autowired\n    private", "type": "StorageUnitDaoHelper", "declarator": "storageUnitDaoHelper", "var_name": "storageUnitDaoHelper"}, {"original_string": "@Autowired\n    private StorageUnitHelper storageUnitHelper;", "modifier": "@Autowired\n    private", "type": "StorageUnitHelper", "declarator": "storageUnitHelper", "var_name": "storageUnitHelper"}], "methods": [{"identifier": "initiateStoragePolicyTransition", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "modifiers": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "signature": "void initiateStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "full_signature": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void initiateStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.initiateStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "testcase": false, "constructor": false}, {"identifier": "initiateStoragePolicyTransitionImpl", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "modifiers": "protected", "return": "void", "signature": "void initiateStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "full_signature": "protected void initiateStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.initiateStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto,\n        StoragePolicySelection storagePolicySelection)", "testcase": false, "constructor": false}, {"identifier": "validateStoragePolicySelection", "parameters": "(StoragePolicySelection storagePolicySelection)", "modifiers": "private", "return": "void", "signature": "void validateStoragePolicySelection(StoragePolicySelection storagePolicySelection)", "full_signature": "private void validateStoragePolicySelection(StoragePolicySelection storagePolicySelection)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.validateStoragePolicySelection(StoragePolicySelection storagePolicySelection)", "testcase": false, "constructor": false}, {"identifier": "validateBusinessObjectData", "parameters": "(BusinessObjectDataEntity businessObjectDataEntity, BusinessObjectDataKey businessObjectDataKey)", "modifiers": "private", "return": "void", "signature": "void validateBusinessObjectData(BusinessObjectDataEntity businessObjectDataEntity, BusinessObjectDataKey businessObjectDataKey)", "full_signature": "private void validateBusinessObjectData(BusinessObjectDataEntity businessObjectDataEntity, BusinessObjectDataKey businessObjectDataKey)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.validateBusinessObjectData(BusinessObjectDataEntity businessObjectDataEntity, BusinessObjectDataKey businessObjectDataKey)", "testcase": false, "constructor": false}, {"identifier": "validateStorage", "parameters": "(StorageEntity storageEntity, StoragePolicyKey storagePolicyKey, Integer storagePolicyVersion)", "modifiers": "private", "return": "void", "signature": "void validateStorage(StorageEntity storageEntity, StoragePolicyKey storagePolicyKey, Integer storagePolicyVersion)", "full_signature": "private void validateStorage(StorageEntity storageEntity, StoragePolicyKey storagePolicyKey, Integer storagePolicyVersion)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.validateStorage(StorageEntity storageEntity, StoragePolicyKey storagePolicyKey, Integer storagePolicyVersion)", "testcase": false, "constructor": false}, {"identifier": "validateStorageUnit", "parameters": "(StorageUnitEntity storageUnitEntity, String storageName, BusinessObjectDataKey businessObjectDataKey)", "modifiers": "private", "return": "void", "signature": "void validateStorageUnit(StorageUnitEntity storageUnitEntity, String storageName, BusinessObjectDataKey businessObjectDataKey)", "full_signature": "private void validateStorageUnit(StorageUnitEntity storageUnitEntity, String storageName, BusinessObjectDataKey businessObjectDataKey)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.validateStorageUnit(StorageUnitEntity storageUnitEntity, String storageName, BusinessObjectDataKey businessObjectDataKey)", "testcase": false, "constructor": false}, {"identifier": "executeStoragePolicyTransition", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "@Override @Transactional(propagation = Propagation.NOT_SUPPORTED) public", "return": "void", "signature": "void executeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "@Override @Transactional(propagation = Propagation.NOT_SUPPORTED) public void executeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.executeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false}, {"identifier": "executeStoragePolicyTransitionImpl", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "protected", "return": "void", "signature": "void executeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "protected void executeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.executeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false}, {"identifier": "completeStoragePolicyTransition", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "signature": "void completeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "@PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void completeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.completeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false}, {"identifier": "completeStoragePolicyTransitionImpl", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "protected", "return": "void", "signature": "void completeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "protected void completeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.completeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false}, {"identifier": "updateStoragePolicyTransitionFailedAttemptsIgnoreException", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "@Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "signature": "void updateStoragePolicyTransitionFailedAttemptsIgnoreException(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "@Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void updateStoragePolicyTransitionFailedAttemptsIgnoreException(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.updateStoragePolicyTransitionFailedAttemptsIgnoreException(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false}, {"identifier": "updateStoragePolicyTransitionFailedAttemptsIgnoreExceptionImpl", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "protected", "return": "void", "signature": "void updateStoragePolicyTransitionFailedAttemptsIgnoreExceptionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "protected void updateStoragePolicyTransitionFailedAttemptsIgnoreExceptionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.updateStoragePolicyTransitionFailedAttemptsIgnoreExceptionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/impl/StoragePolicyProcessorHelperServiceImpl.java"}, "focal_method": {"identifier": "executeStoragePolicyTransitionImpl", "parameters": "(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "modifiers": "protected", "return": "void", "body": "protected void executeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)\n    {\n        // Create an S3 file transfer parameters DTO to access the S3 bucket.\n        // Since the S3 key prefix represents a directory, we add a trailing '/' character to it.\n        S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto = storageHelper.getS3FileTransferRequestParamsDto();\n        s3FileTransferRequestParamsDto.setS3Endpoint(storagePolicyTransitionParamsDto.getS3Endpoint());\n        s3FileTransferRequestParamsDto.setS3BucketName(storagePolicyTransitionParamsDto.getS3BucketName());\n        s3FileTransferRequestParamsDto.setS3KeyPrefix(StringUtils.appendIfMissing(storagePolicyTransitionParamsDto.getS3KeyPrefix(), \"/\"));\n\n        // Create an S3 file transfer parameters DTO to be used for S3 object tagging operation.\n        S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto = storageHelper\n            .getS3FileTransferRequestParamsDtoByRole(storagePolicyTransitionParamsDto.getS3ObjectTaggerRoleArn(),\n                storagePolicyTransitionParamsDto.getS3ObjectTaggerRoleSessionName());\n        s3ObjectTaggerParamsDto.setS3Endpoint(storagePolicyTransitionParamsDto.getS3Endpoint());\n\n        // Get actual S3 files by selecting all S3 keys matching the S3 key prefix form the S3 bucket.\n        // When listing S3 files, we ignore 0 byte objects that represent S3 directories.\n        List<S3ObjectSummary> actualS3FilesWithoutZeroByteDirectoryMarkers = s3Service.listDirectory(s3FileTransferRequestParamsDto, true);\n\n        // Validate existence of the S3 files.\n        storageFileHelper.validateRegisteredS3Files(storagePolicyTransitionParamsDto.getStorageFiles(), actualS3FilesWithoutZeroByteDirectoryMarkers,\n            storagePolicyTransitionParamsDto.getStorageName(), storagePolicyTransitionParamsDto.getBusinessObjectDataKey());\n\n        // Get actual S3 files by selecting all S3 keys matching the S3 key prefix form the S3 bucket.\n        // This time, we do not ignore 0 byte objects that represent S3 directories.\n        List<S3ObjectSummary> actualS3Files = s3Service.listDirectory(s3FileTransferRequestParamsDto, false);\n\n        // Tag the S3 objects to initiate the archiving.\n        s3Service.tagObjects(s3FileTransferRequestParamsDto, s3ObjectTaggerParamsDto, actualS3Files,\n            new Tag(storagePolicyTransitionParamsDto.getS3ObjectTagKey(), storagePolicyTransitionParamsDto.getS3ObjectTagValue()));\n    }", "signature": "void executeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "full_signature": "protected void executeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "class_method_signature": "StoragePolicyProcessorHelperServiceImpl.executeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto)", "testcase": false, "constructor": false, "invocations": ["getS3FileTransferRequestParamsDto", "setS3Endpoint", "getS3Endpoint", "setS3BucketName", "getS3BucketName", "setS3KeyPrefix", "appendIfMissing", "getS3KeyPrefix", "getS3FileTransferRequestParamsDtoByRole", "getS3ObjectTaggerRoleArn", "getS3ObjectTaggerRoleSessionName", "setS3Endpoint", "getS3Endpoint", "listDirectory", "validateRegisteredS3Files", "getStorageFiles", "getStorageName", "getBusinessObjectDataKey", "listDirectory", "tagObjects", "getS3ObjectTagKey", "getS3ObjectTagValue"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}