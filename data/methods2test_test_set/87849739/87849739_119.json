{"test_class": {"identifier": "JsonValueParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static JsonArray knownJsonArray;", "modifier": "private static", "type": "JsonArray", "declarator": "knownJsonArray", "var_name": "knownJsonArray"}, {"original_string": "private static JsonObject knownJsonObject;", "modifier": "private static", "type": "JsonObject", "declarator": "knownJsonObject", "var_name": "knownJsonObject"}], "file": "json/src/test/java/org/eclipse/ditto/json/JsonValueParserTest.java"}, "test_case": {"identifier": "wrapsNullPointerException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void wrapsNullPointerException() {\n        final Function<String, JsonValue> underTest = JsonValueParser.fromString();\n\n        //noinspection ConfusingArgumentToVarargsMethod\n        assertThatExceptionOfType(JsonParseException.class)\n                .isThrownBy(() -> underTest.apply(null))\n                .withMessage(\"Failed to parse JSON string '%s'!\", null)\n                .withCauseExactlyInstanceOf(java.lang.NullPointerException.class);\n    }", "signature": "void wrapsNullPointerException()", "full_signature": "@Test public void wrapsNullPointerException()", "class_method_signature": "JsonValueParserTest.wrapsNullPointerException()", "testcase": true, "constructor": false, "invocations": ["fromString", "withCauseExactlyInstanceOf", "withMessage", "isThrownBy", "assertThatExceptionOfType", "apply"]}, "focal_class": {"identifier": "JsonValueParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Nullable private static Function<String, JsonValue> fromStringInstance = null;", "modifier": "@Nullable private static", "type": "Function<String, JsonValue>", "declarator": "fromStringInstance = null", "var_name": "fromStringInstance"}], "methods": [{"identifier": "JsonValueParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " JsonValueParser()", "full_signature": "private  JsonValueParser()", "class_method_signature": "JsonValueParser.JsonValueParser()", "testcase": false, "constructor": true}, {"identifier": "fromString", "parameters": "(final DittoJsonHandler<A, O, V> jsonHandler)", "modifiers": "public static", "return": "Consumer<String>", "signature": "Consumer<String> fromString(final DittoJsonHandler<A, O, V> jsonHandler)", "full_signature": "public static Consumer<String> fromString(final DittoJsonHandler<A, O, V> jsonHandler)", "class_method_signature": "JsonValueParser.fromString(final DittoJsonHandler<A, O, V> jsonHandler)", "testcase": false, "constructor": false}, {"identifier": "fromString", "parameters": "()", "modifiers": "public static", "return": "Function<String, JsonValue>", "signature": "Function<String, JsonValue> fromString()", "full_signature": "public static Function<String, JsonValue> fromString()", "class_method_signature": "JsonValueParser.fromString()", "testcase": false, "constructor": false}, {"identifier": "fromReader", "parameters": "()", "modifiers": "public static", "return": "Function<Reader, JsonValue>", "signature": "Function<Reader, JsonValue> fromReader()", "full_signature": "public static Function<Reader, JsonValue> fromReader()", "class_method_signature": "JsonValueParser.fromReader()", "testcase": false, "constructor": false}, {"identifier": "tryToParseJsonValue", "parameters": "(final String jsonString,\n            final DittoJsonHandler<?, ?, T> dittoJsonHandler)", "modifiers": "private static", "return": "T", "signature": "T tryToParseJsonValue(final String jsonString,\n            final DittoJsonHandler<?, ?, T> dittoJsonHandler)", "full_signature": "private static T tryToParseJsonValue(final String jsonString,\n            final DittoJsonHandler<?, ?, T> dittoJsonHandler)", "class_method_signature": "JsonValueParser.tryToParseJsonValue(final String jsonString,\n            final DittoJsonHandler<?, ?, T> dittoJsonHandler)", "testcase": false, "constructor": false}, {"identifier": "parseJsonValue", "parameters": "(final String jsonString, final DittoJsonHandler<?, ?, T> dittoJsonHandler)", "modifiers": "private static", "return": "T", "signature": "T parseJsonValue(final String jsonString, final DittoJsonHandler<?, ?, T> dittoJsonHandler)", "full_signature": "private static T parseJsonValue(final String jsonString, final DittoJsonHandler<?, ?, T> dittoJsonHandler)", "class_method_signature": "JsonValueParser.parseJsonValue(final String jsonString, final DittoJsonHandler<?, ?, T> dittoJsonHandler)", "testcase": false, "constructor": false}, {"identifier": "tryToReadJsonValueFrom", "parameters": "(final Reader reader)", "modifiers": "private static", "return": "JsonValue", "signature": "JsonValue tryToReadJsonValueFrom(final Reader reader)", "full_signature": "private static JsonValue tryToReadJsonValueFrom(final Reader reader)", "class_method_signature": "JsonValueParser.tryToReadJsonValueFrom(final Reader reader)", "testcase": false, "constructor": false}, {"identifier": "readJsonValueFrom", "parameters": "(final Reader reader)", "modifiers": "private static", "return": "JsonValue", "signature": "JsonValue readJsonValueFrom(final Reader reader)", "full_signature": "private static JsonValue readJsonValueFrom(final Reader reader)", "class_method_signature": "JsonValueParser.readJsonValueFrom(final Reader reader)", "testcase": false, "constructor": false}], "file": "json/src/main/java/org/eclipse/ditto/json/JsonValueParser.java"}, "focal_method": {"identifier": "fromString", "parameters": "(final DittoJsonHandler<A, O, V> jsonHandler)", "modifiers": "public static", "return": "Consumer<String>", "body": "public static <A, O, V> Consumer<String> fromString(final DittoJsonHandler<A, O, V> jsonHandler) {\n        return jsonString -> tryToParseJsonValue(jsonString, jsonHandler);\n    }", "signature": "Consumer<String> fromString(final DittoJsonHandler<A, O, V> jsonHandler)", "full_signature": "public static Consumer<String> fromString(final DittoJsonHandler<A, O, V> jsonHandler)", "class_method_signature": "JsonValueParser.fromString(final DittoJsonHandler<A, O, V> jsonHandler)", "testcase": false, "constructor": false, "invocations": ["tryToParseJsonValue"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}