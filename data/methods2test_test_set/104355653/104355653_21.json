{"test_class": {"identifier": "JsonUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String jsonStr=\"{\\\"name\\\":\\\"\u5f20\u4e09\\\",\\\"age\\\":22,\\\"list\\\":[1,2,3,4],\\\"map\\\":{},\\\"date\\\":\\\"2001-07-04T12:08:56.235-07:00\\\"}\";", "modifier": "private", "type": "String", "declarator": "jsonStr=\"{\\\"name\\\":\\\"\u5f20\u4e09\\\",\\\"age\\\":22,\\\"list\\\":[1,2,3,4],\\\"map\\\":{},\\\"date\\\":\\\"2001-07-04T12:08:56.235-07:00\\\"}\";", "var_name": "jsonStr"}, {"original_string": "private String listStr=\"[1,2,34,5]\";", "modifier": "private", "type": "String", "declarator": "listStr=\"[1,2,34,5]\"", "var_name": "listStr"}, {"original_string": "private String mapStr=\"{\\\"age\\\":13}\";", "modifier": "private", "type": "String", "declarator": "mapStr=\"{\\\"age\\\":13}\"", "var_name": "mapStr"}], "file": "support/core/src/test/java/com/meiduimall/core/util/JsonUtilsTest.java"}, "test_case": {"identifier": "jsonToBeanTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void jsonToBeanTest(){\n\t\tJson json=JsonUtils.jsonToBean(jsonStr, Json.class);\n\t\tAssert.assertNotNull(json);\n\t}", "signature": "void jsonToBeanTest()", "full_signature": "@Test public void jsonToBeanTest()", "class_method_signature": "JsonUtilsTest.jsonToBeanTest()", "testcase": true, "constructor": false, "invocations": ["jsonToBean", "assertNotNull"]}, "focal_class": {"identifier": "JsonUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(JsonUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JsonUtils.class)", "var_name": "logger"}, {"original_string": "private static JsonUtils jacksonUtil = new JsonUtils();", "modifier": "private static", "type": "JsonUtils", "declarator": "jacksonUtil = new JsonUtils()", "var_name": "jacksonUtil"}, {"original_string": "private ObjectMapper mapper;", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "JsonUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " JsonUtils()", "full_signature": "private  JsonUtils()", "class_method_signature": "JsonUtils.JsonUtils()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "ObjectMapper", "signature": "ObjectMapper getInstance()", "full_signature": "public static ObjectMapper getInstance()", "class_method_signature": "JsonUtils.getInstance()", "testcase": false, "constructor": false}, {"identifier": "jsonToBean", "parameters": "(String json,  Class<T> valueType)", "modifiers": "public static", "return": "T", "signature": "T jsonToBean(String json,  Class<T> valueType)", "full_signature": "public static T jsonToBean(String json,  Class<T> valueType)", "class_method_signature": "JsonUtils.jsonToBean(String json,  Class<T> valueType)", "testcase": false, "constructor": false}, {"identifier": "beanToJson", "parameters": "(Object bean)", "modifiers": "public static", "return": "String", "signature": "String beanToJson(Object bean)", "full_signature": "public static String beanToJson(Object bean)", "class_method_signature": "JsonUtils.beanToJson(Object bean)", "testcase": false, "constructor": false}, {"identifier": "jsonToList", "parameters": "(String json,Class<T> clazz)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> jsonToList(String json,Class<T> clazz)", "full_signature": "public static List<T> jsonToList(String json,Class<T> clazz)", "class_method_signature": "JsonUtils.jsonToList(String json,Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "beanToJsonAndFmDate", "parameters": "(Object channelList)", "modifiers": "public static", "return": "String", "signature": "String beanToJsonAndFmDate(Object channelList)", "full_signature": "public static String beanToJsonAndFmDate(Object channelList)", "class_method_signature": "JsonUtils.beanToJsonAndFmDate(Object channelList)", "testcase": false, "constructor": false}], "file": "support/core/src/main/java/com/meiduimall/core/util/JsonUtils.java"}, "focal_method": {"identifier": "jsonToBean", "parameters": "(String json,  Class<T> valueType)", "modifiers": "public static", "return": "T", "body": "public static <T> T jsonToBean(String json,  Class<T> valueType){\n    \tif(!Strings.isNullOrEmpty(json)){\n    \t\ttry {\n    \t\t\treturn getInstance().readValue(json, valueType);\n    \t\t} catch (JsonParseException e) {\n    \t\t\tlogger.error(e.getMessage(),e);\n    \t\t} catch (JsonMappingException e) {\n    \t\t\tlogger.error(e.getMessage(),e);\n    \t\t} catch (IOException e) {\n    \t\t\tlogger.error(e.getMessage(),e);\n    \t\t}\n    \t}\n    \treturn null;\n    }", "signature": "T jsonToBean(String json,  Class<T> valueType)", "full_signature": "public static T jsonToBean(String json,  Class<T> valueType)", "class_method_signature": "JsonUtils.jsonToBean(String json,  Class<T> valueType)", "testcase": false, "constructor": false, "invocations": ["isNullOrEmpty", "readValue", "getInstance", "error", "getMessage", "error", "getMessage", "error", "getMessage"]}, "repository": {"repo_id": 104355653, "url": "https://github.com/chenjy16/mall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 403, "license": "licensed"}}