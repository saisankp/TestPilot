{"test_class": {"identifier": "AttachmentAwareDatabaseHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AttachmentAwareDatabaseHandler handler;", "modifier": "", "type": "AttachmentAwareDatabaseHandler", "declarator": "handler", "var_name": "handler"}], "file": "backend/src-common/src/test/java/org/eclipse/sw360/datahandler/db/AttachmentAwareDatabaseHandlerTest.java"}, "test_case": {"identifier": "testGetAllAttachmentsToKeep", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAllAttachmentsToKeep() throws Exception {\n\n        // Try to delete one approved and one rejected attachment.\n        //  -> the approved one should not be deleted.\n        Attachment attachmentAccepted = new Attachment().setAttachmentContentId(\"acceptedAtt\").setFilename(\"att1.file\").setCheckStatus(CheckStatus.ACCEPTED);\n        Attachment attachmentRejected = new Attachment().setAttachmentContentId(\"rejectedAtt\").setFilename(\"att2.file\").setCheckStatus(CheckStatus.REJECTED);\n        Set<Attachment> attachmentsBefore = new HashSet<>();\n        attachmentsBefore.add(attachmentAccepted);\n        attachmentsBefore.add(attachmentRejected);\n        Set<Attachment> attachmentsAfter = new HashSet<>();\n\n        Set<Attachment> attachmentsToKeep = handler.getAllAttachmentsToKeep(attachmentsBefore, attachmentsAfter);\n\n        assertEquals(1, attachmentsToKeep.size());\n        assertTrue(attachmentsToKeep.contains(attachmentAccepted));\n        assertFalse(attachmentsToKeep.contains(attachmentRejected));\n\n        // Change an attachment\n        //  -> it should not be stored twice\n        Attachment originalAttachment = new Attachment().setAttachmentContentId(\"att\").setFilename(\"att.file\").setCheckStatus(CheckStatus.ACCEPTED);\n        attachmentsBefore = new HashSet<>();\n        attachmentsBefore.add(originalAttachment);\n\n        Attachment changedAttachment = originalAttachment.deepCopy().setCheckStatus(CheckStatus.REJECTED);\n        attachmentsAfter = new HashSet<>();\n        attachmentsAfter.add(changedAttachment);\n\n        attachmentsToKeep = handler.getAllAttachmentsToKeep(attachmentsBefore, attachmentsAfter);\n\n        assertEquals(1, attachmentsToKeep.size());\n        assertTrue(attachmentsToKeep.contains(changedAttachment));\n    }", "signature": "void testGetAllAttachmentsToKeep()", "full_signature": "@Test public void testGetAllAttachmentsToKeep()", "class_method_signature": "AttachmentAwareDatabaseHandlerTest.testGetAllAttachmentsToKeep()", "testcase": true, "constructor": false, "invocations": ["setCheckStatus", "setFilename", "setAttachmentContentId", "setCheckStatus", "setFilename", "setAttachmentContentId", "add", "add", "getAllAttachmentsToKeep", "assertEquals", "size", "assertTrue", "contains", "assertFalse", "contains", "setCheckStatus", "setFilename", "setAttachmentContentId", "add", "setCheckStatus", "deepCopy", "add", "getAllAttachmentsToKeep", "assertEquals", "size", "assertTrue", "contains"]}, "focal_class": {"identifier": "AttachmentAwareDatabaseHandler", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getAllAttachmentsToKeep", "parameters": "(Set<Attachment> originalAttachments, Set<Attachment> changedAttachments)", "modifiers": "public", "return": "Set<Attachment>", "signature": "Set<Attachment> getAllAttachmentsToKeep(Set<Attachment> originalAttachments, Set<Attachment> changedAttachments)", "full_signature": "public Set<Attachment> getAllAttachmentsToKeep(Set<Attachment> originalAttachments, Set<Attachment> changedAttachments)", "class_method_signature": "AttachmentAwareDatabaseHandler.getAllAttachmentsToKeep(Set<Attachment> originalAttachments, Set<Attachment> changedAttachments)", "testcase": false, "constructor": false}, {"identifier": "AttachmentAwareDatabaseHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " AttachmentAwareDatabaseHandler()", "full_signature": "public  AttachmentAwareDatabaseHandler()", "class_method_signature": "AttachmentAwareDatabaseHandler.AttachmentAwareDatabaseHandler()", "testcase": false, "constructor": true}], "file": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/AttachmentAwareDatabaseHandler.java"}, "focal_method": {"identifier": "getAllAttachmentsToKeep", "parameters": "(Set<Attachment> originalAttachments, Set<Attachment> changedAttachments)", "modifiers": "public", "return": "Set<Attachment>", "body": "public Set<Attachment> getAllAttachmentsToKeep(Set<Attachment> originalAttachments, Set<Attachment> changedAttachments) {\n        Set <Attachment> attachmentsToKeep = new HashSet<>();\n        attachmentsToKeep.addAll(nullToEmptySet(changedAttachments));\n        Set<String> alreadyPresentIdsInAttachmentsToKeep = nullToEmptyCollection(attachmentsToKeep).stream().map(Attachment::getAttachmentContentId).collect(Collectors.toSet());\n\n        // prevent deletion of already accepted attachments\n        Set<Attachment> acceptedAttachmentsNotYetToKeep = nullToEmptySet(originalAttachments).stream().filter(a -> (a.getCheckStatus() == CheckStatus.ACCEPTED && !alreadyPresentIdsInAttachmentsToKeep.contains(a.getAttachmentContentId()))).collect(Collectors.toSet());\n        attachmentsToKeep.addAll(acceptedAttachmentsNotYetToKeep);\n\n        return attachmentsToKeep;\n    }", "signature": "Set<Attachment> getAllAttachmentsToKeep(Set<Attachment> originalAttachments, Set<Attachment> changedAttachments)", "full_signature": "public Set<Attachment> getAllAttachmentsToKeep(Set<Attachment> originalAttachments, Set<Attachment> changedAttachments)", "class_method_signature": "AttachmentAwareDatabaseHandler.getAllAttachmentsToKeep(Set<Attachment> originalAttachments, Set<Attachment> changedAttachments)", "testcase": false, "constructor": false, "invocations": ["addAll", "nullToEmptySet", "collect", "map", "stream", "nullToEmptyCollection", "toSet", "collect", "filter", "stream", "nullToEmptySet", "getCheckStatus", "contains", "getAttachmentContentId", "toSet", "addAll"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}