{"test_class": {"identifier": "ClassLoaderXmlEntityResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String publicId=\"fakePublicId\";", "modifier": "private", "type": "String", "declarator": "publicId=\"fakePublicId\"", "var_name": "publicId"}, {"original_string": "protected final String JAR_FILE = \"/ClassLoader/zip/classLoader-test.zip\";", "modifier": "protected final", "type": "String", "declarator": "JAR_FILE = \"/ClassLoader/zip/classLoader-test.zip\"", "var_name": "JAR_FILE"}], "file": "core/src/test/java/nl/nn/adapterframework/xml/ClassLoaderXmlEntityResolverTest.java"}, "test_case": {"identifier": "bytesClassPathAbsolute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void bytesClassPathAbsolute() throws SAXException, IOException, ConfigurationException  {\n\t\tClassLoader localClassLoader = Thread.currentThread().getContextClassLoader();\n\n\t\tURL file = this.getClass().getResource(JAR_FILE);\n\t\tassertNotNull(\"jar url not found\", file);\n\t\tJarFile jarFile = new JarFile(file.getFile());\n\t\tassertNotNull(\"jar file not found\",jarFile);\n\n\t\tJarFileClassLoader cl = new JarFileClassLoader(localClassLoader);\n\t\tcl.setJar(file.getFile());\n\t\tcl.configure(null, \"\");\n\n\t\tClassLoaderXmlEntityResolver resolver = new ClassLoaderXmlEntityResolver(cl);\n\n\t\tXMLResourceIdentifier resourceIdentifier = getXMLResourceIdentifier(\"/ClassLoader/Xslt/names.xsl\");\n\n\t\tXMLInputSource inputSource = resolver.resolveEntity(resourceIdentifier);\n\t\tassertNotNull(inputSource);\n\t}", "signature": "void bytesClassPathAbsolute()", "full_signature": "@Test public void bytesClassPathAbsolute()", "class_method_signature": "ClassLoaderXmlEntityResolverTest.bytesClassPathAbsolute()", "testcase": true, "constructor": false, "invocations": ["getContextClassLoader", "currentThread", "getResource", "getClass", "assertNotNull", "getFile", "assertNotNull", "setJar", "getFile", "configure", "getXMLResourceIdentifier", "resolveEntity", "assertNotNull"]}, "focal_class": {"identifier": "ClassLoaderXmlEntityResolver", "superclass": "extends ClassLoaderURIResolver", "interfaces": "implements XMLEntityResolver", "fields": [], "methods": [{"identifier": "ClassLoaderXmlEntityResolver", "parameters": "(ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " ClassLoaderXmlEntityResolver(ClassLoader classLoader)", "full_signature": "public  ClassLoaderXmlEntityResolver(ClassLoader classLoader)", "class_method_signature": "ClassLoaderXmlEntityResolver.ClassLoaderXmlEntityResolver(ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "resolveEntity", "parameters": "(XMLResourceIdentifier resourceIdentifier)", "modifiers": "@Override public", "return": "XMLInputSource", "signature": "XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier)", "full_signature": "@Override public XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier)", "class_method_signature": "ClassLoaderXmlEntityResolver.resolveEntity(XMLResourceIdentifier resourceIdentifier)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/xml/ClassLoaderXmlEntityResolver.java"}, "focal_method": {"identifier": "resolveEntity", "parameters": "(XMLResourceIdentifier resourceIdentifier)", "modifiers": "@Override public", "return": "XMLInputSource", "body": "@Override\n\tpublic XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier) throws XNIException, IOException {\n\t\tif (log.isDebugEnabled()) log.debug(\"resolveEntity publicId [\"+resourceIdentifier.getPublicId()+\"] baseSystemId [\"+resourceIdentifier.getBaseSystemId()+\"] expandedSystemId [\"+resourceIdentifier.getExpandedSystemId()+\"] literalSystemId [\"+resourceIdentifier.getLiteralSystemId()+\"] namespace [\"+resourceIdentifier.getNamespace()+\"]\");\n\t\tif (resourceIdentifier.getBaseSystemId() == null\n\t\t\t\t&& resourceIdentifier.getExpandedSystemId() == null\n\t\t\t\t&& resourceIdentifier.getLiteralSystemId() == null\n\t\t\t\t&& resourceIdentifier.getNamespace() == null\n\t\t\t\t&& resourceIdentifier.getPublicId() == null) {\n\t\t\t// This seems to happen sometimes. For example with import of\n\t\t\t// sub01a.xsd and sub05.xsd without namespace in\n\t\t\t// /XmlValidator/import_include/root.xsd of Ibis4TestIAF. The\n\t\t\t// default resolve entity implementation seems to ignore it, hence\n\t\t\t// return null.\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tString base = resourceIdentifier.getBaseSystemId();\n\t\tString href = resourceIdentifier.getLiteralSystemId();\n\t\tif (href == null) {\n\t\t\t// Ignore import with namespace but without schemaLocation\n\t\t\treturn null;\n\t\t}\n\n\t\tResource resource;\n\t\ttry {\n\t\t\tresource = resolveToResource(href, base);\n\t\t} catch (TransformerException e) {\n\t\t\tthrow new XNIException(e);\n\t\t}\n\t\n\t\t\n\t\tInputStream inputStream = resource.getURL().openStream();\n\t\treturn new XMLInputSource(null, resource.getSystemId(), null, inputStream, null);\n\t}", "signature": "XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier)", "full_signature": "@Override public XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier)", "class_method_signature": "ClassLoaderXmlEntityResolver.resolveEntity(XMLResourceIdentifier resourceIdentifier)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "getPublicId", "getBaseSystemId", "getExpandedSystemId", "getLiteralSystemId", "getNamespace", "getBaseSystemId", "getExpandedSystemId", "getLiteralSystemId", "getNamespace", "getPublicId", "getBaseSystemId", "getLiteralSystemId", "resolveToResource", "openStream", "getURL", "getSystemId"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}