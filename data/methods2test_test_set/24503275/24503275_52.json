{"test_class": {"identifier": "CompactEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static byte T = 16;", "modifier": "private final static", "type": "byte", "declarator": "T = 16", "var_name": "T"}], "file": "ethereumj-core/src/test/java/org/ethereum/util/CompactEncoderTest.java"}, "test_case": {"identifier": "testCompactDecodeEvenTerminated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCompactDecodeEvenTerminated() {\n\t\tbyte[] test = new byte[] { 0x20, 0x0f, 0x1c, (byte) 0xb8 };\n\t\tbyte[] expected = new byte[] {0, 15, 1, 12, 11, 8, T};\n\t\tassertArrayEquals(\"even terminated compact decode fail\", expected, CompactEncoder.unpackToNibbles(test));\n\t}", "signature": "void testCompactDecodeEvenTerminated()", "full_signature": "@Test public void testCompactDecodeEvenTerminated()", "class_method_signature": "CompactEncoderTest.testCompactDecodeEvenTerminated()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "unpackToNibbles"]}, "focal_class": {"identifier": "CompactEncoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static byte TERMINATOR = 16;", "modifier": "private final static", "type": "byte", "declarator": "TERMINATOR = 16", "var_name": "TERMINATOR"}, {"original_string": "private final static Map<Character, Byte> hexMap = new HashMap<>();", "modifier": "private final static", "type": "Map<Character, Byte>", "declarator": "hexMap = new HashMap<>()", "var_name": "hexMap"}], "methods": [{"identifier": "packNibbles", "parameters": "(byte[] nibbles)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] packNibbles(byte[] nibbles)", "full_signature": "public static byte[] packNibbles(byte[] nibbles)", "class_method_signature": "CompactEncoder.packNibbles(byte[] nibbles)", "testcase": false, "constructor": false}, {"identifier": "unpackToNibbles", "parameters": "(byte[] str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] unpackToNibbles(byte[] str)", "full_signature": "public static byte[] unpackToNibbles(byte[] str)", "class_method_signature": "CompactEncoder.unpackToNibbles(byte[] str)", "testcase": false, "constructor": false}, {"identifier": "binToNibbles", "parameters": "(byte[] str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] binToNibbles(byte[] str)", "full_signature": "public static byte[] binToNibbles(byte[] str)", "class_method_signature": "CompactEncoder.binToNibbles(byte[] str)", "testcase": false, "constructor": false}, {"identifier": "binToNibblesNoTerminator", "parameters": "(byte[] str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] binToNibblesNoTerminator(byte[] str)", "full_signature": "public static byte[] binToNibblesNoTerminator(byte[] str)", "class_method_signature": "CompactEncoder.binToNibblesNoTerminator(byte[] str)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/util/CompactEncoder.java"}, "focal_method": {"identifier": "unpackToNibbles", "parameters": "(byte[] str)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] unpackToNibbles(byte[] str) {\n\t\tbyte[] base = binToNibbles(str);\n\t\tbase = copyOf(base, base.length - 1);\n\t\tif (base[0] >= 2) {\n\t\t\tbase = appendByte(base, TERMINATOR);\n\t\t}\n\t\tif (base[0] % 2 == 1) {\n\t\t\tbase = copyOfRange(base, 1, base.length);\n\t\t} else {\n\t\t\tbase = copyOfRange(base, 2, base.length);\n\t\t}\n\t\treturn base;\n\t}", "signature": "byte[] unpackToNibbles(byte[] str)", "full_signature": "public static byte[] unpackToNibbles(byte[] str)", "class_method_signature": "CompactEncoder.unpackToNibbles(byte[] str)", "testcase": false, "constructor": false, "invocations": ["binToNibbles", "copyOf", "appendByte", "copyOfRange", "copyOfRange"]}, "repository": {"repo_id": 24503275, "url": "https://github.com/ethereumj/ethereumj", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 27, "size": 13884, "license": "licensed"}}