{"test_class": {"identifier": "ResultSetGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-templates/src/test/java/org/drools/template/jdbc/ResultSetGeneratorTest.java"}, "test_case": {"identifier": "testResultSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResultSet() throws Exception {\n\n        // setup the HSQL database with our rules.\n        Class.forName(\"org.hsqldb.jdbcDriver\");\n        Connection conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:drools-templates\", \"sa\", \"\");\n\n        try {\n            update(\"CREATE TABLE cheese_rules ( id INTEGER IDENTITY, persons_age INTEGER, birth_date DATE, cheese_type VARCHAR(256), log VARCHAR(256) )\", conn);\n\n            update(\"INSERT INTO cheese_rules(persons_age,birth_date,cheese_type,log) VALUES(42, '1950-01-01', 'stilton', 'Old man stilton')\", conn);\n            update(\"INSERT INTO cheese_rules(persons_age,birth_date,cheese_type,log) VALUES(10, '2009-01-01', 'cheddar', 'Young man cheddar')\", conn);\n        } catch (SQLException e) {\n            throw new IllegalStateException(\"Could not initialize in memory database\", e);\n        }\n\n        // query the DB for the rule rows, convert them using the template.\n\n        Statement sta = conn.createStatement();\n        ResultSet rs = sta.executeQuery(\"SELECT persons_age, cheese_type, log \" +\n                                        \" FROM cheese_rules\");\n\n        final ResultSetGenerator converter = new ResultSetGenerator();\n        final String drl = converter.compile(rs, getRulesStream());\n\n        System.out.println(drl);\n\n        sta.close();\n\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add(ResourceFactory.newByteArrayResource(drl.getBytes()), ResourceType.DRL);\n        assertFalse(kbuilder.hasErrors());\n\n        InternalKnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n        kbase.addPackages(kbuilder.getKnowledgePackages());\n        KieSession kSession = kbase.newKieSession();\n\n        //now create some test data\n        kSession.insert(new Cheese(\"stilton\", 42));\n        kSession.insert(new Person(\"michael\", \"stilton\", 42));\n        List<String> list = new ArrayList<String>();\n        kSession.setGlobal(\"list\", list);\n\n        kSession.fireAllRules();\n\n        assertEquals(1, list.size());\n\n    }", "signature": "void testResultSet()", "full_signature": "@Test public void testResultSet()", "class_method_signature": "ResultSetGeneratorTest.testResultSet()", "testcase": true, "constructor": false, "invocations": ["forName", "getConnection", "update", "update", "update", "createStatement", "executeQuery", "compile", "getRulesStream", "println", "close", "newKnowledgeBuilder", "add", "newByteArrayResource", "getBytes", "assertFalse", "hasErrors", "newKnowledgeBase", "addPackages", "getKnowledgePackages", "newKieSession", "insert", "insert", "setGlobal", "fireAllRules", "assertEquals", "size"]}, "focal_class": {"identifier": "ResultSetGenerator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "compile", "parameters": "(final ResultSet rs,\n                          final String template)", "modifiers": "public", "return": "String", "signature": "String compile(final ResultSet rs,\n                          final String template)", "full_signature": "public String compile(final ResultSet rs,\n                          final String template)", "class_method_signature": "ResultSetGenerator.compile(final ResultSet rs,\n                          final String template)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final ResultSet rs,\n                          final InputStream templateStream)", "modifiers": "public", "return": "String", "signature": "String compile(final ResultSet rs,\n                          final InputStream templateStream)", "full_signature": "public String compile(final ResultSet rs,\n                          final InputStream templateStream)", "class_method_signature": "ResultSetGenerator.compile(final ResultSet rs,\n                          final InputStream templateStream)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final ResultSet rs,\n                          final TemplateDataListener listener)", "modifiers": "public", "return": "String", "signature": "String compile(final ResultSet rs,\n                          final TemplateDataListener listener)", "full_signature": "public String compile(final ResultSet rs,\n                          final TemplateDataListener listener)", "class_method_signature": "ResultSetGenerator.compile(final ResultSet rs,\n                          final TemplateDataListener listener)", "testcase": false, "constructor": false}, {"identifier": "processData", "parameters": "(final ResultSet rs,\n                             List<DataListener> listeners)", "modifiers": "private", "return": "void", "signature": "void processData(final ResultSet rs,\n                             List<DataListener> listeners)", "full_signature": "private void processData(final ResultSet rs,\n                             List<DataListener> listeners)", "class_method_signature": "ResultSetGenerator.processData(final ResultSet rs,\n                             List<DataListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "finishData", "parameters": "(List<DataListener> listeners)", "modifiers": "private", "return": "void", "signature": "void finishData(List<DataListener> listeners)", "full_signature": "private void finishData(List<DataListener> listeners)", "class_method_signature": "ResultSetGenerator.finishData(List<DataListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "newRow", "parameters": "(List<DataListener> listeners,\n                        int row,\n                        int cols)", "modifiers": "private", "return": "void", "signature": "void newRow(List<DataListener> listeners,\n                        int row,\n                        int cols)", "full_signature": "private void newRow(List<DataListener> listeners,\n                        int row,\n                        int cols)", "class_method_signature": "ResultSetGenerator.newRow(List<DataListener> listeners,\n                        int row,\n                        int cols)", "testcase": false, "constructor": false}, {"identifier": "newCell", "parameters": "(List<DataListener> listeners,\n                        int row,\n                        int column,\n                        String value,\n                        int mergedColStart)", "modifiers": "public", "return": "void", "signature": "void newCell(List<DataListener> listeners,\n                        int row,\n                        int column,\n                        String value,\n                        int mergedColStart)", "full_signature": "public void newCell(List<DataListener> listeners,\n                        int row,\n                        int column,\n                        String value,\n                        int mergedColStart)", "class_method_signature": "ResultSetGenerator.newCell(List<DataListener> listeners,\n                        int row,\n                        int column,\n                        String value,\n                        int mergedColStart)", "testcase": false, "constructor": false}, {"identifier": "closeStream", "parameters": "(final InputStream stream)", "modifiers": "protected", "return": "void", "signature": "void closeStream(final InputStream stream)", "full_signature": "protected void closeStream(final InputStream stream)", "class_method_signature": "ResultSetGenerator.closeStream(final InputStream stream)", "testcase": false, "constructor": false}], "file": "drools-templates/src/main/java/org/drools/template/jdbc/ResultSetGenerator.java"}, "focal_method": {"identifier": "compile", "parameters": "(final ResultSet rs,\n                          final String template)", "modifiers": "public", "return": "String", "body": "public String compile(final ResultSet rs,\n                          final String template) {\n        final InputStream templateStream = this.getClass().getResourceAsStream(template);\n        return compile(rs,\n                       templateStream);\n    }", "signature": "String compile(final ResultSet rs,\n                          final String template)", "full_signature": "public String compile(final ResultSet rs,\n                          final String template)", "class_method_signature": "ResultSetGenerator.compile(final ResultSet rs,\n                          final String template)", "testcase": false, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "compile"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}