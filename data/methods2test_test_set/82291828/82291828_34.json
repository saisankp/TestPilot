{"test_class": {"identifier": "CategoricalInputTest", "superclass": "", "interfaces": "", "fields": [], "file": "algo/src/test/java/org/neo4j/graphalgo/similarity/CategoricalInputTest.java"}, "test_case": {"identifier": "overlapShowsSmallerSideFirst", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void overlapShowsSmallerSideFirst() {\n        CategoricalInput one = new CategoricalInput(3, new long[]{1, 2, 3, 4});\n        CategoricalInput two = new CategoricalInput(7, new long[]{1, 2, 3});\n\n        SimilarityResult result = one.overlap(0.0, two);\n\n        assertEquals(7, result.item1);\n        assertEquals(3, result.item2);\n        assertEquals(3, result.count1);\n        assertEquals(4, result.count2);\n        assertEquals(3, result.intersection);\n        assertEquals(1.0, result.similarity, 0.01);\n    }", "signature": "void overlapShowsSmallerSideFirst()", "full_signature": "@Test public void overlapShowsSmallerSideFirst()", "class_method_signature": "CategoricalInputTest.overlapShowsSmallerSideFirst()", "testcase": true, "constructor": false, "invocations": ["overlap", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "CategoricalInput", "superclass": "", "interfaces": "implements  Comparable<CategoricalInput>, SimilarityInput", "fields": [{"original_string": "long id;", "modifier": "", "type": "long", "declarator": "id", "var_name": "id"}, {"original_string": "long[] targets;", "modifier": "", "type": "long[]", "declarator": "targets", "var_name": "targets"}], "methods": [{"identifier": "CategoricalInput", "parameters": "(long id, long[] targets)", "modifiers": "public", "return": "", "signature": " CategoricalInput(long id, long[] targets)", "full_signature": "public  CategoricalInput(long id, long[] targets)", "class_method_signature": "CategoricalInput.CategoricalInput(long id, long[] targets)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getId()", "full_signature": "public long getId()", "class_method_signature": "CategoricalInput.getId()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(CategoricalInput o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(CategoricalInput o)", "full_signature": "@Override public int compareTo(CategoricalInput o)", "class_method_signature": "CategoricalInput.compareTo(CategoricalInput o)", "testcase": false, "constructor": false}, {"identifier": "jaccard", "parameters": "(double similarityCutoff, CategoricalInput e2, boolean bidirectional)", "modifiers": "", "return": "SimilarityResult", "signature": "SimilarityResult jaccard(double similarityCutoff, CategoricalInput e2, boolean bidirectional)", "full_signature": " SimilarityResult jaccard(double similarityCutoff, CategoricalInput e2, boolean bidirectional)", "class_method_signature": "CategoricalInput.jaccard(double similarityCutoff, CategoricalInput e2, boolean bidirectional)", "testcase": false, "constructor": false}, {"identifier": "overlap", "parameters": "(double similarityCutoff, CategoricalInput e2)", "modifiers": "", "return": "SimilarityResult", "signature": "SimilarityResult overlap(double similarityCutoff, CategoricalInput e2)", "full_signature": " SimilarityResult overlap(double similarityCutoff, CategoricalInput e2)", "class_method_signature": "CategoricalInput.overlap(double similarityCutoff, CategoricalInput e2)", "testcase": false, "constructor": false}, {"identifier": "overlap", "parameters": "(double similarityCutoff, CategoricalInput e2, boolean inferReverse)", "modifiers": "", "return": "SimilarityResult", "signature": "SimilarityResult overlap(double similarityCutoff, CategoricalInput e2, boolean inferReverse)", "full_signature": " SimilarityResult overlap(double similarityCutoff, CategoricalInput e2, boolean inferReverse)", "class_method_signature": "CategoricalInput.overlap(double similarityCutoff, CategoricalInput e2, boolean inferReverse)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CategoricalInput.toString()", "testcase": false, "constructor": false}], "file": "algo/src/main/java/org/neo4j/graphalgo/similarity/CategoricalInput.java"}, "focal_method": {"identifier": "overlap", "parameters": "(double similarityCutoff, CategoricalInput e2)", "modifiers": "", "return": "SimilarityResult", "body": "SimilarityResult overlap(double similarityCutoff, CategoricalInput e2) {\n    return overlap(similarityCutoff, e2, true);\n    }", "signature": "SimilarityResult overlap(double similarityCutoff, CategoricalInput e2)", "full_signature": " SimilarityResult overlap(double similarityCutoff, CategoricalInput e2)", "class_method_signature": "CategoricalInput.overlap(double similarityCutoff, CategoricalInput e2)", "testcase": false, "constructor": false, "invocations": ["overlap"]}, "repository": {"repo_id": 82291828, "url": "https://github.com/neo4j-contrib/neo4j-graph-algorithms", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 689, "size": 43359, "license": "licensed"}}