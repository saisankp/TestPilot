{"test_class": {"identifier": "CompareXMLFilesTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/conditions/CompareXMLFilesTest.java"}, "test_case": {"identifier": "compareXMLInexistentFilesTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void compareXMLInexistentFilesTest() {\n        CompareXMLFiles compareXML;\n        TUExecutionResult executionResult;\n\n        Mockito.when(transformationContext.get(\"ATR\")).thenReturn(new File(transformedAppFolder, \"/src/main/resources/inexistent_file.xml\"));\n        compareXML = new CompareXMLFiles().setAttribute(\"ATR\").relative(\"pom.xml\");\n        executionResult = compareXML.execution(transformedAppFolder, transformationContext);\n        Assert.assertEquals(executionResult.getType(), TUExecutionResult.Type.VALUE);\n        Assert.assertFalse((Boolean) executionResult.getValue());\n\n        Mockito.when(transformationContext.get(\"ATR\")).thenReturn(new File(transformedAppFolder, \"/src/main/resources/inexistent_file.xml\"));\n        compareXML = new CompareXMLFiles().setAttribute(\"ATR\").relative(\"/src/main/resources/another_inexistent_file.yaml\");\n        executionResult = compareXML.execution(transformedAppFolder, transformationContext);\n        Assert.assertEquals(executionResult.getType(), TUExecutionResult.Type.VALUE);\n        Assert.assertTrue((Boolean) executionResult.getValue());\n\n        Mockito.when(transformationContext.get(\"ATR\")).thenReturn(new File(transformedAppFolder, \"pom.xml\"));\n        compareXML = new CompareXMLFiles().setAttribute(\"ATR\").relative(\"/src/main/resources/another_inexistent_file.xml\");\n        executionResult = compareXML.execution(transformedAppFolder, transformationContext);\n        Assert.assertEquals(executionResult.getType(), TUExecutionResult.Type.VALUE);\n        Assert.assertFalse((Boolean) executionResult.getValue());\n    }", "signature": "void compareXMLInexistentFilesTest()", "full_signature": "@Test public void compareXMLInexistentFilesTest()", "class_method_signature": "CompareXMLFilesTest.compareXMLInexistentFilesTest()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "get", "relative", "setAttribute", "execution", "assertEquals", "getType", "assertFalse", "getValue", "thenReturn", "when", "get", "relative", "setAttribute", "execution", "assertEquals", "getType", "assertTrue", "getValue", "thenReturn", "when", "get", "relative", "setAttribute", "execution", "assertEquals", "getType", "assertFalse", "getValue"]}, "focal_class": {"identifier": "CompareXMLFiles", "superclass": "extends DoubleCondition<CompareXMLFiles>", "interfaces": "", "fields": [{"original_string": "private static final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "modifier": "private static final", "type": "DocumentBuilderFactory", "declarator": "factory = DocumentBuilderFactory.newInstance()", "var_name": "factory"}, {"original_string": "private static final String DESCRIPTION = \"Compare XML file %s to another one, return true only if their contents are equal\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Compare XML file %s to another one, return true only if their contents are equal\"", "var_name": "DESCRIPTION"}], "methods": [{"identifier": "CompareXMLFiles", "parameters": "()", "modifiers": "public", "return": "", "signature": " CompareXMLFiles()", "full_signature": "public  CompareXMLFiles()", "class_method_signature": "CompareXMLFiles.CompareXMLFiles()", "testcase": false, "constructor": true}, {"identifier": "CompareXMLFiles", "parameters": "(String attribute)", "modifiers": "public", "return": "", "signature": " CompareXMLFiles(String attribute)", "full_signature": "public  CompareXMLFiles(String attribute)", "class_method_signature": "CompareXMLFiles.CompareXMLFiles(String attribute)", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(File baselineFile, File comparisonFile)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean compare(File baselineFile, File comparisonFile)", "full_signature": "@Override protected boolean compare(File baselineFile, File comparisonFile)", "class_method_signature": "CompareXMLFiles.compare(File baselineFile, File comparisonFile)", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TUExecutionResult", "signature": "TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "CompareXMLFiles.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "CompareXMLFiles.getDescription()", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/conditions/CompareXMLFiles.java"}, "focal_method": {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TUExecutionResult", "body": "@Override\n    protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext) {\n        return super.execution(transformedAppFolder, transformationContext);\n    }", "signature": "TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "CompareXMLFiles.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false, "invocations": ["execution"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}