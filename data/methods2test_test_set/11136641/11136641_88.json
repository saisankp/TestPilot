{"test_class": {"identifier": "DefaultObjectDirectoryMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultObjectDirectoryMapper tested;", "modifier": "private", "type": "DefaultObjectDirectoryMapper", "declarator": "tested", "var_name": "tested"}], "file": "core/src/test/java/org/springframework/ldap/odm/core/impl/DefaultObjectDirectoryMapperTest.java"}, "test_case": {"identifier": "testIndexedDnAttributesRequiresThatAllAreIndexed", "parameters": "()", "modifiers": "@Test(expected = MetaDataException.class) public", "return": "void", "body": "@Test(expected = MetaDataException.class)\n    public void testIndexedDnAttributesRequiresThatAllAreIndexed() {\n        tested.manageClass(UnitTestPersonWithIndexedAndUnindexedDnAttributes.class);\n    }", "signature": "void testIndexedDnAttributesRequiresThatAllAreIndexed()", "full_signature": "@Test(expected = MetaDataException.class) public void testIndexedDnAttributesRequiresThatAllAreIndexed()", "class_method_signature": "DefaultObjectDirectoryMapperTest.testIndexedDnAttributesRequiresThatAllAreIndexed()", "testcase": true, "constructor": false, "invocations": ["manageClass"]}, "focal_class": {"identifier": "DefaultObjectDirectoryMapper", "superclass": "", "interfaces": "implements ObjectDirectoryMapper", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DefaultObjectDirectoryMapper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DefaultObjectDirectoryMapper.class)", "var_name": "LOG"}, {"original_string": "private ConverterManager converterManager;", "modifier": "private", "type": "ConverterManager", "declarator": "converterManager", "var_name": "converterManager"}, {"original_string": "private static final String OBJECT_CLASS_ATTRIBUTE=\"objectclass\";", "modifier": "private static final", "type": "String", "declarator": "OBJECT_CLASS_ATTRIBUTE=\"objectclass\"", "var_name": "OBJECT_CLASS_ATTRIBUTE"}, {"original_string": "private static final CaseIgnoreString OBJECT_CLASS_ATTRIBUTE_CI=new CaseIgnoreString(OBJECT_CLASS_ATTRIBUTE);", "modifier": "private static final", "type": "CaseIgnoreString", "declarator": "OBJECT_CLASS_ATTRIBUTE_CI=new CaseIgnoreString(OBJECT_CLASS_ATTRIBUTE)", "var_name": "OBJECT_CLASS_ATTRIBUTE_CI"}, {"original_string": "private final ConcurrentMap<Class<?>, EntityData> metaDataMap=new ConcurrentHashMap<Class<?>, EntityData>();", "modifier": "private final", "type": "ConcurrentMap<Class<?>, EntityData>", "declarator": "metaDataMap=new ConcurrentHashMap<Class<?>, EntityData>()", "var_name": "metaDataMap"}], "methods": [{"identifier": "DefaultObjectDirectoryMapper", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultObjectDirectoryMapper()", "full_signature": "public  DefaultObjectDirectoryMapper()", "class_method_signature": "DefaultObjectDirectoryMapper.DefaultObjectDirectoryMapper()", "testcase": false, "constructor": true}, {"identifier": "createDefaultConverterManager", "parameters": "()", "modifiers": "private static", "return": "ConverterManager", "signature": "ConverterManager createDefaultConverterManager()", "full_signature": "private static ConverterManager createDefaultConverterManager()", "class_method_signature": "DefaultObjectDirectoryMapper.createDefaultConverterManager()", "testcase": false, "constructor": false}, {"identifier": "setConverterManager", "parameters": "(ConverterManager converterManager)", "modifiers": "public", "return": "void", "signature": "void setConverterManager(ConverterManager converterManager)", "full_signature": "public void setConverterManager(ConverterManager converterManager)", "class_method_signature": "DefaultObjectDirectoryMapper.setConverterManager(ConverterManager converterManager)", "testcase": false, "constructor": false}, {"identifier": "getEntityData", "parameters": "(Class<?> managedClass)", "modifiers": "private", "return": "EntityData", "signature": "EntityData getEntityData(Class<?> managedClass)", "full_signature": "private EntityData getEntityData(Class<?> managedClass)", "class_method_signature": "DefaultObjectDirectoryMapper.getEntityData(Class<?> managedClass)", "testcase": false, "constructor": false}, {"identifier": "manageClass", "parameters": "(Class<?> clazz)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] manageClass(Class<?> clazz)", "full_signature": "@Override public String[] manageClass(Class<?> clazz)", "class_method_signature": "DefaultObjectDirectoryMapper.manageClass(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "addManagedClass", "parameters": "(Class<?> managedClass)", "modifiers": "private", "return": "EntityData", "signature": "EntityData addManagedClass(Class<?> managedClass)", "full_signature": "private EntityData addManagedClass(Class<?> managedClass)", "class_method_signature": "DefaultObjectDirectoryMapper.addManagedClass(Class<?> managedClass)", "testcase": false, "constructor": false}, {"identifier": "verifyConversion", "parameters": "(Class<?> managedClass, Field field, AttributeMetaData attributeInfo)", "modifiers": "private", "return": "void", "signature": "void verifyConversion(Class<?> managedClass, Field field, AttributeMetaData attributeInfo)", "full_signature": "private void verifyConversion(Class<?> managedClass, Field field, AttributeMetaData attributeInfo)", "class_method_signature": "DefaultObjectDirectoryMapper.verifyConversion(Class<?> managedClass, Field field, AttributeMetaData attributeInfo)", "testcase": false, "constructor": false}, {"identifier": "mapToLdapDataEntry", "parameters": "(Object entry, LdapDataEntry context)", "modifiers": "@Override public", "return": "void", "signature": "void mapToLdapDataEntry(Object entry, LdapDataEntry context)", "full_signature": "@Override public void mapToLdapDataEntry(Object entry, LdapDataEntry context)", "class_method_signature": "DefaultObjectDirectoryMapper.mapToLdapDataEntry(Object entry, LdapDataEntry context)", "testcase": false, "constructor": false}, {"identifier": "populateMultiValueAttribute", "parameters": "(Object entry, LdapDataEntry context, Field field, AttributeMetaData attributeInfo, Class<?> targetClass)", "modifiers": "private", "return": "void", "signature": "void populateMultiValueAttribute(Object entry, LdapDataEntry context, Field field, AttributeMetaData attributeInfo, Class<?> targetClass)", "full_signature": "private void populateMultiValueAttribute(Object entry, LdapDataEntry context, Field field, AttributeMetaData attributeInfo, Class<?> targetClass)", "class_method_signature": "DefaultObjectDirectoryMapper.populateMultiValueAttribute(Object entry, LdapDataEntry context, Field field, AttributeMetaData attributeInfo, Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "populateSingleValueAttribute", "parameters": "(Object entry, LdapDataEntry context, Field field, AttributeMetaData attributeInfo, Class<?> targetClass)", "modifiers": "private", "return": "void", "signature": "void populateSingleValueAttribute(Object entry, LdapDataEntry context, Field field, AttributeMetaData attributeInfo, Class<?> targetClass)", "full_signature": "private void populateSingleValueAttribute(Object entry, LdapDataEntry context, Field field, AttributeMetaData attributeInfo, Class<?> targetClass)", "class_method_signature": "DefaultObjectDirectoryMapper.populateSingleValueAttribute(Object entry, LdapDataEntry context, Field field, AttributeMetaData attributeInfo, Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "mapFromLdapDataEntry", "parameters": "(LdapDataEntry context, Class<T> clazz)", "modifiers": "@Override public", "return": "T", "signature": "T mapFromLdapDataEntry(LdapDataEntry context, Class<T> clazz)", "full_signature": "@Override public T mapFromLdapDataEntry(LdapDataEntry context, Class<T> clazz)", "class_method_signature": "DefaultObjectDirectoryMapper.mapFromLdapDataEntry(LdapDataEntry context, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "populateMultiValueField", "parameters": "(T result, Map<CaseIgnoreString, Attribute> attributeValueMap, Field field, AttributeMetaData attributeInfo)", "modifiers": "private", "return": "void", "signature": "void populateMultiValueField(T result, Map<CaseIgnoreString, Attribute> attributeValueMap, Field field, AttributeMetaData attributeInfo)", "full_signature": "private void populateMultiValueField(T result, Map<CaseIgnoreString, Attribute> attributeValueMap, Field field, AttributeMetaData attributeInfo)", "class_method_signature": "DefaultObjectDirectoryMapper.populateMultiValueField(T result, Map<CaseIgnoreString, Attribute> attributeValueMap, Field field, AttributeMetaData attributeInfo)", "testcase": false, "constructor": false}, {"identifier": "populateSingleValueField", "parameters": "(T result, Map<CaseIgnoreString, Attribute> attributeValueMap, Field field, AttributeMetaData attributeInfo)", "modifiers": "private", "return": "void", "signature": "void populateSingleValueField(T result, Map<CaseIgnoreString, Attribute> attributeValueMap, Field field, AttributeMetaData attributeInfo)", "full_signature": "private void populateSingleValueField(T result, Map<CaseIgnoreString, Attribute> attributeValueMap, Field field, AttributeMetaData attributeInfo)", "class_method_signature": "DefaultObjectDirectoryMapper.populateSingleValueField(T result, Map<CaseIgnoreString, Attribute> attributeValueMap, Field field, AttributeMetaData attributeInfo)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "(Object entry)", "modifiers": "@Override public", "return": "Name", "signature": "Name getId(Object entry)", "full_signature": "@Override public Name getId(Object entry)", "class_method_signature": "DefaultObjectDirectoryMapper.getId(Object entry)", "testcase": false, "constructor": false}, {"identifier": "getIdField", "parameters": "(Object entry)", "modifiers": "private", "return": "Field", "signature": "Field getIdField(Object entry)", "full_signature": "private Field getIdField(Object entry)", "class_method_signature": "DefaultObjectDirectoryMapper.getIdField(Object entry)", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(Object entry, Name id)", "modifiers": "@Override public", "return": "void", "signature": "void setId(Object entry, Name id)", "full_signature": "@Override public void setId(Object entry, Name id)", "class_method_signature": "DefaultObjectDirectoryMapper.setId(Object entry, Name id)", "testcase": false, "constructor": false}, {"identifier": "getCalculatedId", "parameters": "(Object entry)", "modifiers": "@Override public", "return": "Name", "signature": "Name getCalculatedId(Object entry)", "full_signature": "@Override public Name getCalculatedId(Object entry)", "class_method_signature": "DefaultObjectDirectoryMapper.getCalculatedId(Object entry)", "testcase": false, "constructor": false}, {"identifier": "filterFor", "parameters": "(Class<?> clazz, Filter baseFilter)", "modifiers": "@Override public", "return": "Filter", "signature": "Filter filterFor(Class<?> clazz, Filter baseFilter)", "full_signature": "@Override public Filter filterFor(Class<?> clazz, Filter baseFilter)", "class_method_signature": "DefaultObjectDirectoryMapper.filterFor(Class<?> clazz, Filter baseFilter)", "testcase": false, "constructor": false}, {"identifier": "attributeFor", "parameters": "(Class<?> clazz, String fieldName)", "modifiers": "@Override public", "return": "String", "signature": "String attributeFor(Class<?> clazz, String fieldName)", "full_signature": "@Override public String attributeFor(Class<?> clazz, String fieldName)", "class_method_signature": "DefaultObjectDirectoryMapper.attributeFor(Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getMetaDataMap", "parameters": "()", "modifiers": "", "return": "ConcurrentMap<Class<?>, EntityData>", "signature": "ConcurrentMap<Class<?>, EntityData> getMetaDataMap()", "full_signature": " ConcurrentMap<Class<?>, EntityData> getMetaDataMap()", "class_method_signature": "DefaultObjectDirectoryMapper.getMetaDataMap()", "testcase": false, "constructor": false}, {"identifier": "collectionContainsAll", "parameters": "(Collection<?> collection, Set<?> shouldBePresent)", "modifiers": "static", "return": "boolean", "signature": "boolean collectionContainsAll(Collection<?> collection, Set<?> shouldBePresent)", "full_signature": "static boolean collectionContainsAll(Collection<?> collection, Set<?> shouldBePresent)", "class_method_signature": "DefaultObjectDirectoryMapper.collectionContainsAll(Collection<?> collection, Set<?> shouldBePresent)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/odm/core/impl/DefaultObjectDirectoryMapper.java"}, "focal_method": {"identifier": "manageClass", "parameters": "(Class<?> clazz)", "modifiers": "@Override public", "return": "String[]", "body": "@Override\n    public String[] manageClass(Class<?> clazz) {\n        // This throws exception if data is invalid\n        EntityData entityData = getEntityData(clazz);\n        Set<String> managedAttributeNames = new HashSet<String>();\n        // extract all relevant attributes\n        for (Field field : entityData.metaData) {\n            AttributeMetaData attributeMetaData = entityData.metaData.getAttribute(field);\n            // skip transient fields\n            if (attributeMetaData.isTransient()) {\n                continue;\n            }\n            String[] attributesOfField = attributeMetaData.getAttributes();\n            if (attributesOfField != null && attributesOfField.length > 0) {\n                // attribute names are either given through annotation\n                managedAttributeNames.addAll(Arrays.asList(attributesOfField));\n            } else {\n                // or implicitly by relying on the field name\n                managedAttributeNames.add(field.getName());\n            }\n        }\n        // always add the mandatory attribute objectclass (which is always used for the mapping)\n        managedAttributeNames.add(OBJECT_CLASS_ATTRIBUTE);\n        return managedAttributeNames.toArray(new String[managedAttributeNames.size()]);\n    }", "signature": "String[] manageClass(Class<?> clazz)", "full_signature": "@Override public String[] manageClass(Class<?> clazz)", "class_method_signature": "DefaultObjectDirectoryMapper.manageClass(Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["getEntityData", "getAttribute", "isTransient", "getAttributes", "addAll", "asList", "add", "getName", "add", "toArray", "size"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}