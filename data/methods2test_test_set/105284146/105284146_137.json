{"test_class": {"identifier": "SparseMatrixTest", "superclass": "extends AbstractMatrixTest", "interfaces": "", "fields": [{"original_string": "private final MatrixFactory matrixFactory = new SparseMatrixFactory();", "modifier": "private final", "type": "MatrixFactory", "declarator": "matrixFactory = new SparseMatrixFactory()", "var_name": "matrixFactory"}, {"original_string": "private final MatrixFactory otherMatrixFactory = new DenseMatrixFactory();", "modifier": "private final", "type": "MatrixFactory", "declarator": "otherMatrixFactory = new DenseMatrixFactory()", "var_name": "otherMatrixFactory"}], "file": "math/src/test/java/com/powsybl/math/matrix/SparseMatrixTest.java"}, "test_case": {"identifier": "testInitSparseMatrixFromCpp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitSparseMatrixFromCpp() {\n        SparseMatrix m = new SparseMatrix(2, 5, new int[] {0, -1, 2, -1, 3, 4}, new int[] {0, 1, 0, 1}, new double[] {1d, 2d, 3d, 4d});\n        assertArrayEquals(new int[] {2, 0, 1, 0, 1}, m.getColumnValueCount());\n    }", "signature": "void testInitSparseMatrixFromCpp()", "full_signature": "@Test public void testInitSparseMatrixFromCpp()", "class_method_signature": "SparseMatrixTest.testInitSparseMatrixFromCpp()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "getColumnValueCount"]}, "focal_class": {"identifier": "SparseMatrix", "superclass": "extends AbstractMatrix", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SparseMatrix.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SparseMatrix.class)", "var_name": "LOGGER"}, {"original_string": "private final int rowCount;", "modifier": "private final", "type": "int", "declarator": "rowCount", "var_name": "rowCount"}, {"original_string": "private final int columnCount;", "modifier": "private final", "type": "int", "declarator": "columnCount", "var_name": "columnCount"}, {"original_string": "private final int[] columnStart;", "modifier": "private final", "type": "int[]", "declarator": "columnStart", "var_name": "columnStart"}, {"original_string": "private final int[] columnValueCount;", "modifier": "private final", "type": "int[]", "declarator": "columnValueCount", "var_name": "columnValueCount"}, {"original_string": "private final TIntArrayListHack rowIndices;", "modifier": "private final", "type": "TIntArrayListHack", "declarator": "rowIndices", "var_name": "rowIndices"}, {"original_string": "private final TDoubleArrayListHack values;", "modifier": "private final", "type": "TDoubleArrayListHack", "declarator": "values", "var_name": "values"}, {"original_string": "private int currentColumn = -1;", "modifier": "private", "type": "int", "declarator": "currentColumn = -1", "var_name": "currentColumn"}], "methods": [{"identifier": "nativeInit", "parameters": "()", "modifiers": "private static native", "return": "void", "signature": "void nativeInit()", "full_signature": "private static native void nativeInit()", "class_method_signature": "SparseMatrix.nativeInit()", "testcase": false, "constructor": false}, {"identifier": "SparseMatrix", "parameters": "(int rowCount, int columnCount, int[] columnStart, int[] rowIndices, double[] values)", "modifiers": "", "return": "", "signature": " SparseMatrix(int rowCount, int columnCount, int[] columnStart, int[] rowIndices, double[] values)", "full_signature": "  SparseMatrix(int rowCount, int columnCount, int[] columnStart, int[] rowIndices, double[] values)", "class_method_signature": "SparseMatrix.SparseMatrix(int rowCount, int columnCount, int[] columnStart, int[] rowIndices, double[] values)", "testcase": false, "constructor": true}, {"identifier": "fillColumnValueCount", "parameters": "(int columnCount, int[] columnStart, int[] columnValueCount, TDoubleArrayListHack values)", "modifiers": "private static", "return": "void", "signature": "void fillColumnValueCount(int columnCount, int[] columnStart, int[] columnValueCount, TDoubleArrayListHack values)", "full_signature": "private static void fillColumnValueCount(int columnCount, int[] columnStart, int[] columnValueCount, TDoubleArrayListHack values)", "class_method_signature": "SparseMatrix.fillColumnValueCount(int columnCount, int[] columnStart, int[] columnValueCount, TDoubleArrayListHack values)", "testcase": false, "constructor": false}, {"identifier": "SparseMatrix", "parameters": "(int rowCount, int columnCount, int estimatedNonZeroValueCount)", "modifiers": "", "return": "", "signature": " SparseMatrix(int rowCount, int columnCount, int estimatedNonZeroValueCount)", "full_signature": "  SparseMatrix(int rowCount, int columnCount, int estimatedNonZeroValueCount)", "class_method_signature": "SparseMatrix.SparseMatrix(int rowCount, int columnCount, int estimatedNonZeroValueCount)", "testcase": false, "constructor": true}, {"identifier": "getColumnStart", "parameters": "()", "modifiers": "", "return": "int[]", "signature": "int[] getColumnStart()", "full_signature": " int[] getColumnStart()", "class_method_signature": "SparseMatrix.getColumnStart()", "testcase": false, "constructor": false}, {"identifier": "getColumnValueCount", "parameters": "()", "modifiers": "", "return": "int[]", "signature": "int[] getColumnValueCount()", "full_signature": " int[] getColumnValueCount()", "class_method_signature": "SparseMatrix.getColumnValueCount()", "testcase": false, "constructor": false}, {"identifier": "getRowIndices", "parameters": "()", "modifiers": "", "return": "int[]", "signature": "int[] getRowIndices()", "full_signature": " int[] getRowIndices()", "class_method_signature": "SparseMatrix.getRowIndices()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "", "return": "double[]", "signature": "double[] getValues()", "full_signature": " double[] getValues()", "class_method_signature": "SparseMatrix.getValues()", "testcase": false, "constructor": false}, {"identifier": "getRowCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRowCount()", "full_signature": "@Override public int getRowCount()", "class_method_signature": "SparseMatrix.getRowCount()", "testcase": false, "constructor": false}, {"identifier": "getColumnCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getColumnCount()", "full_signature": "@Override public int getColumnCount()", "class_method_signature": "SparseMatrix.getColumnCount()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int i, int j, double value)", "modifiers": "@Override public", "return": "void", "signature": "void set(int i, int j, double value)", "full_signature": "@Override public void set(int i, int j, double value)", "class_method_signature": "SparseMatrix.set(int i, int j, double value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int i, int j, double value)", "modifiers": "@Override public", "return": "void", "signature": "void add(int i, int j, double value)", "full_signature": "@Override public void add(int i, int j, double value)", "class_method_signature": "SparseMatrix.add(int i, int j, double value)", "testcase": false, "constructor": false}, {"identifier": "addAndGetElement", "parameters": "(int i, int j, double value)", "modifiers": "@Override public", "return": "Element", "signature": "Element addAndGetElement(int i, int j, double value)", "full_signature": "@Override public Element addAndGetElement(int i, int j, double value)", "class_method_signature": "SparseMatrix.addAndGetElement(int i, int j, double value)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "SparseMatrix.reset()", "testcase": false, "constructor": false}, {"identifier": "decomposeLU", "parameters": "()", "modifiers": "@Override public", "return": "LUDecomposition", "signature": "LUDecomposition decomposeLU()", "full_signature": "@Override public LUDecomposition decomposeLU()", "class_method_signature": "SparseMatrix.decomposeLU()", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(int m1, int n1, int[] ap1, int[] ai1, double[] ax1, int m2, int n2, int[] ap2, int[] ai2, double[] ax2)", "modifiers": "private native", "return": "SparseMatrix", "signature": "SparseMatrix times(int m1, int n1, int[] ap1, int[] ai1, double[] ax1, int m2, int n2, int[] ap2, int[] ai2, double[] ax2)", "full_signature": "private native SparseMatrix times(int m1, int n1, int[] ap1, int[] ai1, double[] ax1, int m2, int n2, int[] ap2, int[] ai2, double[] ax2)", "class_method_signature": "SparseMatrix.times(int m1, int n1, int[] ap1, int[] ai1, double[] ax1, int m2, int n2, int[] ap2, int[] ai2, double[] ax2)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(Matrix other)", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix times(Matrix other)", "full_signature": "@Override public Matrix times(Matrix other)", "class_method_signature": "SparseMatrix.times(Matrix other)", "testcase": false, "constructor": false}, {"identifier": "iterateNonZeroValue", "parameters": "(ElementHandler handler)", "modifiers": "@Override public", "return": "void", "signature": "void iterateNonZeroValue(ElementHandler handler)", "full_signature": "@Override public void iterateNonZeroValue(ElementHandler handler)", "class_method_signature": "SparseMatrix.iterateNonZeroValue(ElementHandler handler)", "testcase": false, "constructor": false}, {"identifier": "iterateNonZeroValueOfColumn", "parameters": "(int j, ElementHandler handler)", "modifiers": "@Override public", "return": "void", "signature": "void iterateNonZeroValueOfColumn(int j, ElementHandler handler)", "full_signature": "@Override public void iterateNonZeroValueOfColumn(int j, ElementHandler handler)", "class_method_signature": "SparseMatrix.iterateNonZeroValueOfColumn(int j, ElementHandler handler)", "testcase": false, "constructor": false}, {"identifier": "toDense", "parameters": "()", "modifiers": "@Override public", "return": "DenseMatrix", "signature": "DenseMatrix toDense()", "full_signature": "@Override public DenseMatrix toDense()", "class_method_signature": "SparseMatrix.toDense()", "testcase": false, "constructor": false}, {"identifier": "toSparse", "parameters": "()", "modifiers": "@Override public", "return": "SparseMatrix", "signature": "SparseMatrix toSparse()", "full_signature": "@Override public SparseMatrix toSparse()", "class_method_signature": "SparseMatrix.toSparse()", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(MatrixFactory factory)", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix to(MatrixFactory factory)", "full_signature": "@Override public Matrix to(MatrixFactory factory)", "class_method_signature": "SparseMatrix.to(MatrixFactory factory)", "testcase": false, "constructor": false}, {"identifier": "getEstimatedNonZeroValueCount", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int getEstimatedNonZeroValueCount()", "full_signature": "@Override protected int getEstimatedNonZeroValueCount()", "class_method_signature": "SparseMatrix.getEstimatedNonZeroValueCount()", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(PrintStream out)", "modifiers": "@Override public", "return": "void", "signature": "void print(PrintStream out)", "full_signature": "@Override public void print(PrintStream out)", "class_method_signature": "SparseMatrix.print(PrintStream out)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(PrintStream out, List<String> rowNames, List<String> columnNames)", "modifiers": "@Override public", "return": "void", "signature": "void print(PrintStream out, List<String> rowNames, List<String> columnNames)", "full_signature": "@Override public void print(PrintStream out, List<String> rowNames, List<String> columnNames)", "class_method_signature": "SparseMatrix.print(PrintStream out, List<String> rowNames, List<String> columnNames)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SparseMatrix.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SparseMatrix.equals(Object obj)", "testcase": false, "constructor": false}], "file": "math/src/main/java/com/powsybl/math/matrix/SparseMatrix.java"}, "focal_method": {"identifier": "getColumnValueCount", "parameters": "()", "modifiers": "", "return": "int[]", "body": "int[] getColumnValueCount() {\n        return columnValueCount;\n    }", "signature": "int[] getColumnValueCount()", "full_signature": " int[] getColumnValueCount()", "class_method_signature": "SparseMatrix.getColumnValueCount()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}