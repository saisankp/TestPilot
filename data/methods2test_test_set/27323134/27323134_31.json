{"test_class": {"identifier": "MediaItemDataStoreFactoryTest", "superclass": "extends ApplicationTestCase", "interfaces": "", "fields": [{"original_string": "private static final int FAKE_ID = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_ID = 1", "var_name": "FAKE_ID"}, {"original_string": "private MediaItemDataStoreFactory mediaItemDataStoreFactory;", "modifier": "private", "type": "MediaItemDataStoreFactory", "declarator": "mediaItemDataStoreFactory", "var_name": "mediaItemDataStoreFactory"}, {"original_string": "@Mock\n    DvrDataStoreFactory mockDvrDataStoreFactory;", "modifier": "@Mock", "type": "DvrDataStoreFactory", "declarator": "mockDvrDataStoreFactory", "var_name": "mockDvrDataStoreFactory"}, {"original_string": "@Mock\n    VideoDataStoreFactory mockVideoDataStoreFactory;", "modifier": "@Mock", "type": "VideoDataStoreFactory", "declarator": "mockVideoDataStoreFactory", "var_name": "mockVideoDataStoreFactory"}, {"original_string": "@Mock\n    ContentDataStoreFactory mockContentDataStoreFactory;", "modifier": "@Mock", "type": "ContentDataStoreFactory", "declarator": "mockContentDataStoreFactory", "var_name": "mockContentDataStoreFactory"}, {"original_string": "@Mock\n    SearchDataStoreFactory mockSearchDataStoreFactory;", "modifier": "@Mock", "type": "SearchDataStoreFactory", "declarator": "mockSearchDataStoreFactory", "var_name": "mockSearchDataStoreFactory"}, {"original_string": "@Mock\n    DualCache<MediaItemEntity> mockCache;", "modifier": "@Mock", "type": "DualCache<MediaItemEntity>", "declarator": "mockCache", "var_name": "mockCache"}], "file": "mythtv-player/src/test/java/org/mythtv/android/data/repository/datasource/MediaItemDataStoreFactoryTest.java"}, "test_case": {"identifier": "testCreateWithoutCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateWithoutCache() {\n\n        given( mockCache.contains( anyString() ) ).willReturn( false );\n\n        MediaItemDataStore mediaItemDataStore = mediaItemDataStoreFactory.create( FAKE_ID );\n\n        assertThat( mediaItemDataStore )\n                .isNotNull()\n                .isInstanceOf( MasterBackendMediaItemDataStore.class );\n\n        verify( mockCache, times( 1 ) ).contains( anyString() );\n\n    }", "signature": "void testCreateWithoutCache()", "full_signature": "@Test public void testCreateWithoutCache()", "class_method_signature": "MediaItemDataStoreFactoryTest.testCreateWithoutCache()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "contains", "anyString", "create", "isInstanceOf", "isNotNull", "assertThat", "contains", "verify", "times", "anyString"]}, "focal_class": {"identifier": "MediaItemDataStoreFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = MediaItemDataStoreFactory.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = MediaItemDataStoreFactory.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private final DvrDataStoreFactory dvrDataStoreFactory;", "modifier": "private final", "type": "DvrDataStoreFactory", "declarator": "dvrDataStoreFactory", "var_name": "dvrDataStoreFactory"}, {"original_string": "private final VideoDataStoreFactory videoDataStoreFactory;", "modifier": "private final", "type": "VideoDataStoreFactory", "declarator": "videoDataStoreFactory", "var_name": "videoDataStoreFactory"}, {"original_string": "private final ContentDataStoreFactory contentDataStoreFactory;", "modifier": "private final", "type": "ContentDataStoreFactory", "declarator": "contentDataStoreFactory", "var_name": "contentDataStoreFactory"}, {"original_string": "private final SearchDataStoreFactory searchDataStoreFactory;", "modifier": "private final", "type": "SearchDataStoreFactory", "declarator": "searchDataStoreFactory", "var_name": "searchDataStoreFactory"}, {"original_string": "private final DualCache<MediaItemEntity> cache;", "modifier": "private final", "type": "DualCache<MediaItemEntity>", "declarator": "cache", "var_name": "cache"}], "methods": [{"identifier": "MediaItemDataStoreFactory", "parameters": "(\n            final DvrDataStoreFactory dvrDataStoreFactory,\n            final VideoDataStoreFactory videoDataStoreFactory,\n            final ContentDataStoreFactory contentDataStoreFactory,\n            final SearchDataStoreFactory searchDataStoreFactory,\n            final DualCache<MediaItemEntity> cache\n    )", "modifiers": "@Inject public", "return": "", "signature": " MediaItemDataStoreFactory(\n            final DvrDataStoreFactory dvrDataStoreFactory,\n            final VideoDataStoreFactory videoDataStoreFactory,\n            final ContentDataStoreFactory contentDataStoreFactory,\n            final SearchDataStoreFactory searchDataStoreFactory,\n            final DualCache<MediaItemEntity> cache\n    )", "full_signature": "@Inject public  MediaItemDataStoreFactory(\n            final DvrDataStoreFactory dvrDataStoreFactory,\n            final VideoDataStoreFactory videoDataStoreFactory,\n            final ContentDataStoreFactory contentDataStoreFactory,\n            final SearchDataStoreFactory searchDataStoreFactory,\n            final DualCache<MediaItemEntity> cache\n    )", "class_method_signature": "MediaItemDataStoreFactory.MediaItemDataStoreFactory(\n            final DvrDataStoreFactory dvrDataStoreFactory,\n            final VideoDataStoreFactory videoDataStoreFactory,\n            final ContentDataStoreFactory contentDataStoreFactory,\n            final SearchDataStoreFactory searchDataStoreFactory,\n            final DualCache<MediaItemEntity> cache\n    )", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "( final int id )", "modifiers": "public", "return": "MediaItemDataStore", "signature": "MediaItemDataStore create( final int id )", "full_signature": "public MediaItemDataStore create( final int id )", "class_method_signature": "MediaItemDataStoreFactory.create( final int id )", "testcase": false, "constructor": false}, {"identifier": "createMasterBackendDataStore", "parameters": "()", "modifiers": "public", "return": "MediaItemDataStore", "signature": "MediaItemDataStore createMasterBackendDataStore()", "full_signature": "public MediaItemDataStore createMasterBackendDataStore()", "class_method_signature": "MediaItemDataStoreFactory.createMasterBackendDataStore()", "testcase": false, "constructor": false}], "file": "mythtv-player/src/main/java/org/mythtv/android/data/repository/datasource/MediaItemDataStoreFactory.java"}, "focal_method": {"identifier": "create", "parameters": "( final int id )", "modifiers": "public", "return": "MediaItemDataStore", "body": "public MediaItemDataStore create( final int id ) {\n        Log.d( TAG, \"create : enter\" );\n\n        if( cache.contains( String.valueOf( id ) ) ) {\n\n            Log.d( TAG, \"create : exit, getting mediaItemEntity from cache\" );\n            return new DiskMediaItemDataStore( this.dvrDataStoreFactory, this.contentDataStoreFactory, cache );\n\n        } else {\n\n            Log.d( TAG, \"create : exit, getting mediaItemEntity from master backend\" );\n            return createMasterBackendDataStore();\n        }\n\n\n    }", "signature": "MediaItemDataStore create( final int id )", "full_signature": "public MediaItemDataStore create( final int id )", "class_method_signature": "MediaItemDataStoreFactory.create( final int id )", "testcase": false, "constructor": false, "invocations": ["d", "contains", "valueOf", "d", "d", "createMasterBackendDataStore"]}, "repository": {"repo_id": 27323134, "url": "https://github.com/MythTV-Clients/MythtvPlayerForAndroid", "stars": 17, "created": "11/30/2014 3:26:45 AM +00:00", "updates": "2019-12-31T22:13:00+00:00", "fork": "False", "license": "licensed"}}