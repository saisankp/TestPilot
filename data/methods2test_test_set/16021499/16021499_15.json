{"test_class": {"identifier": "QNameComparatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "vault-core/src/test/java/org/apache/jackrabbit/vault/util/QNameComparatorTest.java"}, "test_case": {"identifier": "testCompare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompare() {\n        List<QName> names = new LinkedList<>();\n        QName name1 = new QName(\"localonly\");\n        names.add(name1);\n        QName name2 = new QName(XMLConstants.XML_NS_URI, \"xhtml\", XMLConstants.XML_NS_PREFIX);\n        names.add(name2);\n        QName name3 = new QName(NamespaceRegistry.NAMESPACE_JCR, \"UpperCase\", NamespaceRegistry.PREFIX_JCR);\n        names.add(name3);\n        QName name4 = new QName(NamespaceRegistry.NAMESPACE_JCR, \"primaryType\", NamespaceRegistry.PREFIX_JCR);\n        names.add(name4);\n        QName name5 = new QName(NamespaceRegistry.NAMESPACE_JCR, \"PrimaryType\", NamespaceRegistry.PREFIX_JCR);\n        names.add(name5);\n        Collections.sort(names, new QNameComparator());\n        \n        Assert.assertThat(names, Matchers.contains(name2, name5, name4, name3, name1));\n    }", "signature": "void testCompare()", "full_signature": "@Test public void testCompare()", "class_method_signature": "QNameComparatorTest.testCompare()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "sort", "assertThat", "contains"]}, "focal_class": {"identifier": "QNameComparator", "superclass": "", "interfaces": "implements Comparator<QName>", "fields": [{"original_string": "public static final QNameComparator INSTANCE = new QNameComparator();", "modifier": "public static final", "type": "QNameComparator", "declarator": "INSTANCE = new QNameComparator()", "var_name": "INSTANCE"}, {"original_string": "private static final int LESS_THAN = -1;", "modifier": "private static final", "type": "int", "declarator": "LESS_THAN = -1", "var_name": "LESS_THAN"}, {"original_string": "private static final int EQUAL = 0;", "modifier": "private static final", "type": "int", "declarator": "EQUAL = 0", "var_name": "EQUAL"}, {"original_string": "private static final int GREATER_THAN = 1;", "modifier": "private static final", "type": "int", "declarator": "GREATER_THAN = 1", "var_name": "GREATER_THAN"}], "methods": [{"identifier": "compare", "parameters": "(final QName o1, final QName o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(final QName o1, final QName o2)", "full_signature": "@Override public int compare(final QName o1, final QName o2)", "class_method_signature": "QNameComparator.compare(final QName o1, final QName o2)", "testcase": false, "constructor": false}], "file": "vault-core/src/main/java/org/apache/jackrabbit/vault/util/QNameComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(final QName o1, final QName o2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compare(final QName o1, final QName o2) {\n        // first namespace declarations\n        final boolean isXmlNs1 = o1.getPrefix().equalsIgnoreCase(XMLConstants.XML_NS_PREFIX);\n        final boolean isXmlNs2 = o2.getPrefix().equalsIgnoreCase(XMLConstants.XML_NS_PREFIX);\n        if (isXmlNs1 && !isXmlNs2) {\n            return LESS_THAN;\n        } else if (!isXmlNs1 && isXmlNs2) {\n            return GREATER_THAN;\n        }\n        // prefixed attributes before non-prefixed ones...\n        if (!o1.getPrefix().equalsIgnoreCase(XMLConstants.DEFAULT_NS_PREFIX) && o2.getPrefix().equalsIgnoreCase(XMLConstants.DEFAULT_NS_PREFIX)) {\n            return LESS_THAN;\n        } else if (o1.getPrefix().equalsIgnoreCase(XMLConstants.DEFAULT_NS_PREFIX) && !o2.getPrefix().equalsIgnoreCase(XMLConstants.DEFAULT_NS_PREFIX)) {\n            return GREATER_THAN;\n        } else {\n            // order first by prefix, then by local name\n            String lowerCaseQName1 = o1.getPrefix().toLowerCase(Locale.ROOT) + o1.getLocalPart().toLowerCase(Locale.ROOT);\n            String lowerCaseQName2 = o2.getPrefix().toLowerCase(Locale.ROOT) + o2.getLocalPart().toLowerCase(Locale.ROOT);\n            final int c = lowerCaseQName1.compareTo(lowerCaseQName2);\n            // if the lowercase versions are equal, they could differ in case (see JCRVLT-334)\n            if (c == EQUAL) {\n                String qName1 = o1.getPrefix() + o1.getLocalPart();\n                String qName2 = o2.getPrefix() + o2.getLocalPart();\n                return qName1.compareTo(qName2);\n            }\n            return c;\n        }\n    }", "signature": "int compare(final QName o1, final QName o2)", "full_signature": "@Override public int compare(final QName o1, final QName o2)", "class_method_signature": "QNameComparator.compare(final QName o1, final QName o2)", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "getPrefix", "equalsIgnoreCase", "getPrefix", "equalsIgnoreCase", "getPrefix", "equalsIgnoreCase", "getPrefix", "equalsIgnoreCase", "getPrefix", "equalsIgnoreCase", "getPrefix", "toLowerCase", "getPrefix", "toLowerCase", "getLocalPart", "toLowerCase", "getPrefix", "toLowerCase", "getLocalPart", "compareTo", "getPrefix", "getLocalPart", "getPrefix", "getLocalPart", "compareTo"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}