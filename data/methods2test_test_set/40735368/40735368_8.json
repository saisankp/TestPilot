{"test_class": {"identifier": "ImagePyramidReaderTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private final static String TEST_FILE = \"pyramid.properties\";", "modifier": "private final static", "type": "String", "declarator": "TEST_FILE = \"pyramid.properties\"", "var_name": "TEST_FILE"}], "file": "modules/plugin/imagepyramid/src/test/java/org/geotools/gce/imagepyramid/ImagePyramidReaderTest.java"}, "test_case": {"identifier": "testCropLevel2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCropLevel2() throws IOException,\n\t\t\tMismatchedDimensionException, NoSuchAuthorityCodeException {\n\n\t\t// /////////////////////////////////////////////////////////////////\n\t\t//\n\t\t// Get the resource.\n\t\t//\n\t\t//\n\t\t// /////////////////////////////////////////////////////////////////\n\t\tfinal URL testFile = TestData.getResource(this, \"goodpyramid/\"+TEST_FILE);\n\n\t\t//\n\t\t// Get a reader\n\t\t//\n\t\tfinal AbstractGridFormat format = new ImagePyramidFormat();\n\t\tfinal ImagePyramidReader reader = (ImagePyramidReader) format.getReader(testFile);\n\t\tassertNotNull(reader);\n\n\t\t//\n\t\t// crop\n\t\t//\n\t\tfinal ParameterValue<GridGeometry2D> gg =  ImageMosaicFormat.READ_GRIDGEOMETRY2D\n\t\t\t\t.createValue();\n\t\tfinal GeneralEnvelope oldEnvelop = reader.getOriginalEnvelope();\n\t\tfinal GeneralEnvelope cropEnvelope = new GeneralEnvelope(new double[] {\n\t\t\t\toldEnvelop.getLowerCorner().getOrdinate(0),\n\t\t\t\toldEnvelop.getLowerCorner().getOrdinate(1) }, new double[] {\n\t\t\t\toldEnvelop.getLowerCorner().getOrdinate(0)\n\t\t\t\t\t\t+ oldEnvelop.getSpan(0) / 2,\n\t\t\t\toldEnvelop.getLowerCorner().getOrdinate(1)\n\t\t\t\t\t\t+ oldEnvelop.getSpan(1) / 2 });\n\t\tcropEnvelope.setCoordinateReferenceSystem(DefaultGeographicCRS.WGS84);\n\t\tgg.setValue(new GridGeometry2D(new GridEnvelope2D(new Rectangle(0, 0,\n\t\t\t\t62, 62)), cropEnvelope));\n\n\t\t//\n\t\t// Show the coverage\n\t\t//\n\t\tGridCoverage2D coverage = ((GridCoverage2D) reader\n\t\t\t\t.read(new GeneralParameterValue[] { gg }));\n\t\tassertNotNull(\"Null value returned instead of a coverage\", coverage);\n\t\t// assertTrue(\"coverage dimensions different from what we expected\",\n\t\t// coverage.getGridGeometry().getGridRange().getSpan(0) == 31\n\t\t// && coverage.getGridGeometry().getGridRange().getSpan(\n\t\t// 1) == 31);\n\t\tif (TestData.isInteractiveTest())\n\t\t\tcoverage.show(\"testCropLevel1\");\n\t\telse\n\t\t    PlanarImage.wrapRenderedImage(((GridCoverage2D) coverage).getRenderedImage()).getTiles();\n\n\t}", "signature": "void testCropLevel2()", "full_signature": "@Test public void testCropLevel2()", "class_method_signature": "ImagePyramidReaderTest.testCropLevel2()", "testcase": true, "constructor": false, "invocations": ["getResource", "getReader", "assertNotNull", "createValue", "getOriginalEnvelope", "getOrdinate", "getLowerCorner", "getOrdinate", "getLowerCorner", "getOrdinate", "getLowerCorner", "getSpan", "getOrdinate", "getLowerCorner", "getSpan", "setCoordinateReferenceSystem", "setValue", "read", "assertNotNull", "isInteractiveTest", "show", "getTiles", "wrapRenderedImage", "getRenderedImage"]}, "focal_class": {"identifier": "ImagePyramidReader", "superclass": "extends AbstractGridCoverage2DReader", "interfaces": "implements GridCoverageReader", "fields": [{"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging.getLogger(ImagePyramidReader.class.toString());", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(ImagePyramidReader.class.toString())", "var_name": "LOGGER"}, {"original_string": "private URL sourceURL;", "modifier": "private", "type": "URL", "declarator": "sourceURL", "var_name": "sourceURL"}, {"original_string": "private String[] levelsDirs;", "modifier": "private", "type": "String[]", "declarator": "levelsDirs", "var_name": "levelsDirs"}, {"original_string": "private ConcurrentHashMap<Integer, ImageMosaicReader> readers =new ConcurrentHashMap<Integer, ImageMosaicReader>();", "modifier": "private", "type": "ConcurrentHashMap<Integer, ImageMosaicReader>", "declarator": "readers =new ConcurrentHashMap<Integer, ImageMosaicReader>()", "var_name": "readers"}], "methods": [{"identifier": "ImagePyramidReader", "parameters": "(Object source, Hints uHints)", "modifiers": "public", "return": "", "signature": " ImagePyramidReader(Object source, Hints uHints)", "full_signature": "public  ImagePyramidReader(Object source, Hints uHints)", "class_method_signature": "ImagePyramidReader.ImagePyramidReader(Object source, Hints uHints)", "testcase": false, "constructor": true}, {"identifier": "parseMainFile", "parameters": "(final URL sourceURL)", "modifiers": "private", "return": "void", "signature": "void parseMainFile(final URL sourceURL)", "full_signature": "private void parseMainFile(final URL sourceURL)", "class_method_signature": "ImagePyramidReader.parseMainFile(final URL sourceURL)", "testcase": false, "constructor": false}, {"identifier": "ImagePyramidReader", "parameters": "(Object source)", "modifiers": "public", "return": "", "signature": " ImagePyramidReader(Object source)", "full_signature": "public  ImagePyramidReader(Object source)", "class_method_signature": "ImagePyramidReader.ImagePyramidReader(Object source)", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "public", "return": "Format", "signature": "Format getFormat()", "full_signature": "public Format getFormat()", "class_method_signature": "ImagePyramidReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(GeneralParameterValue[] params)", "modifiers": "public", "return": "GridCoverage2D", "signature": "GridCoverage2D read(GeneralParameterValue[] params)", "full_signature": "public GridCoverage2D read(GeneralParameterValue[] params)", "class_method_signature": "ImagePyramidReader.read(GeneralParameterValue[] params)", "testcase": false, "constructor": false}, {"identifier": "loadTiles", "parameters": "(GeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, GeneralParameterValue[] params, OverviewPolicy overviewPolicy)", "modifiers": "private", "return": "GridCoverage2D", "signature": "GridCoverage2D loadTiles(GeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, GeneralParameterValue[] params, OverviewPolicy overviewPolicy)", "full_signature": "private GridCoverage2D loadTiles(GeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, GeneralParameterValue[] params, OverviewPolicy overviewPolicy)", "class_method_signature": "ImagePyramidReader.loadTiles(GeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, GeneralParameterValue[] params, OverviewPolicy overviewPolicy)", "testcase": false, "constructor": false}, {"identifier": "loadRequestedTiles", "parameters": "(\n\t\t\tGeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, \n\t\t\tGeneralParameterValue[] params, \n\t\t\tOverviewPolicy overviewPolicy)", "modifiers": "private", "return": "GridCoverage2D", "signature": "GridCoverage2D loadRequestedTiles(\n\t\t\tGeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, \n\t\t\tGeneralParameterValue[] params, \n\t\t\tOverviewPolicy overviewPolicy)", "full_signature": "private GridCoverage2D loadRequestedTiles(\n\t\t\tGeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, \n\t\t\tGeneralParameterValue[] params, \n\t\t\tOverviewPolicy overviewPolicy)", "class_method_signature": "ImagePyramidReader.loadRequestedTiles(\n\t\t\tGeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, \n\t\t\tGeneralParameterValue[] params, \n\t\t\tOverviewPolicy overviewPolicy)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void dispose()", "full_signature": "@Override public synchronized void dispose()", "class_method_signature": "ImagePyramidReader.dispose()", "testcase": false, "constructor": false}, {"identifier": "getGridCoverageCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getGridCoverageCount()", "full_signature": "@Override public int getGridCoverageCount()", "class_method_signature": "ImagePyramidReader.getGridCoverageCount()", "testcase": false, "constructor": false}, {"identifier": "getHighestRes", "parameters": "()", "modifiers": "", "return": "double[]", "signature": "double[] getHighestRes()", "full_signature": " double[] getHighestRes()", "class_method_signature": "ImagePyramidReader.getHighestRes()", "testcase": false, "constructor": false}, {"identifier": "getMetadataValue", "parameters": "(String coverageName, String name)", "modifiers": "@Override public", "return": "String", "signature": "String getMetadataValue(String coverageName, String name)", "full_signature": "@Override public String getMetadataValue(String coverageName, String name)", "class_method_signature": "ImagePyramidReader.getMetadataValue(String coverageName, String name)", "testcase": false, "constructor": false}, {"identifier": "getMetadataValue", "parameters": "(final String name)", "modifiers": "public", "return": "String", "signature": "String getMetadataValue(final String name)", "full_signature": "public String getMetadataValue(final String name)", "class_method_signature": "ImagePyramidReader.getMetadataValue(final String name)", "testcase": false, "constructor": false}, {"identifier": "getImageMosaicMetadataValue", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String getImageMosaicMetadataValue(String name)", "full_signature": "private String getImageMosaicMetadataValue(String name)", "class_method_signature": "ImagePyramidReader.getImageMosaicMetadataValue(String name)", "testcase": false, "constructor": false}, {"identifier": "getMetadataNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getMetadataNames()", "full_signature": "public String[] getMetadataNames()", "class_method_signature": "ImagePyramidReader.getMetadataNames()", "testcase": false, "constructor": false}, {"identifier": "hasTimeDomain", "parameters": "(ImageMosaicReader reader)", "modifiers": "private", "return": "boolean", "signature": "boolean hasTimeDomain(ImageMosaicReader reader)", "full_signature": "private boolean hasTimeDomain(ImageMosaicReader reader)", "class_method_signature": "ImagePyramidReader.hasTimeDomain(ImageMosaicReader reader)", "testcase": false, "constructor": false}, {"identifier": "getTimeDomain", "parameters": "(ImageMosaicReader reader, final String name)", "modifiers": "private", "return": "String", "signature": "String getTimeDomain(ImageMosaicReader reader, final String name)", "full_signature": "private String getTimeDomain(ImageMosaicReader reader, final String name)", "class_method_signature": "ImagePyramidReader.getTimeDomain(ImageMosaicReader reader, final String name)", "testcase": false, "constructor": false}, {"identifier": "getImageMosaicReaderForLevel", "parameters": "(Integer imageChoice)", "modifiers": "public", "return": "ImageMosaicReader", "signature": "ImageMosaicReader getImageMosaicReaderForLevel(Integer imageChoice)", "full_signature": "public ImageMosaicReader getImageMosaicReaderForLevel(Integer imageChoice)", "class_method_signature": "ImagePyramidReader.getImageMosaicReaderForLevel(Integer imageChoice)", "testcase": false, "constructor": false}], "file": "modules/plugin/imagepyramid/src/main/java/org/geotools/gce/imagepyramid/ImagePyramidReader.java"}, "focal_method": {"identifier": "read", "parameters": "(GeneralParameterValue[] params)", "modifiers": "public", "return": "GridCoverage2D", "body": "public GridCoverage2D read(GeneralParameterValue[] params) throws IOException {\n\n\t\tGeneralEnvelope requestedEnvelope = null;\n\t\tRectangle dim = null;\n\t\tOverviewPolicy overviewPolicy=null;\n\t\tif (params != null) {\n\t\t\t// /////////////////////////////////////////////////////////////////////\n\t\t\t//\n\t\t\t// Checking params\n\t\t\t//\n\t\t\t// /////////////////////////////////////////////////////////////////////\n\t\t\tif (params != null) {\n\t\t\t\tfor (int i = 0; i < params.length; i++) {\n\t\t\t\t\t@SuppressWarnings(\"rawtypes\")\n                    final ParameterValue param = (ParameterValue) params[i];\n\t\t\t\t\tif (param == null){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tfinal String name = param.getDescriptor().getName().getCode();\n\t\t\t\t\tif (name.equals(AbstractGridFormat.READ_GRIDGEOMETRY2D.getName().toString())) {\n\t\t\t\t\t\tfinal GridGeometry2D gg = (GridGeometry2D) param.getValue();\n\t\t\t\t\t\trequestedEnvelope = new GeneralEnvelope((Envelope)gg.getEnvelope2D());\n\t\t\t\t\t\tdim = gg.getGridRange2D().getBounds();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (name.equals(AbstractGridFormat.OVERVIEW_POLICY.getName().toString())) {\n\t\t\t\t\t\toverviewPolicy = (OverviewPolicy) param.getValue();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//\n\t\t// Loading tiles\n\t\t//\n\t\treturn loadTiles(requestedEnvelope, dim, params, overviewPolicy);\n\t}", "signature": "GridCoverage2D read(GeneralParameterValue[] params)", "full_signature": "public GridCoverage2D read(GeneralParameterValue[] params)", "class_method_signature": "ImagePyramidReader.read(GeneralParameterValue[] params)", "testcase": false, "constructor": false, "invocations": ["getCode", "getName", "getDescriptor", "equals", "toString", "getName", "getValue", "getEnvelope2D", "getBounds", "getGridRange2D", "equals", "toString", "getName", "getValue", "loadTiles"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}