{"test_class": {"identifier": "KeyStoreTemplateTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "protected final ContextStorage<Context> contextStorage = new UnmodifiableContextStorage(\n      EmptyContext.getInstance());", "modifier": "protected final", "type": "ContextStorage<Context>", "declarator": "contextStorage = new UnmodifiableContextStorage(\n      EmptyContext.getInstance())", "var_name": "contextStorage"}], "file": "core/transport/src/test/java/hera/client/KeyStoreTemplateTest.java"}, "test_case": {"identifier": "testSign", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSign() throws Exception {\n    // given\n    final KeyStoreTemplate keystoreTemplate = new KeyStoreTemplate(contextStorage);\n    final Requester mockRequester = mock(Requester.class);\n    final Transaction expected = anyTransaction;\n    when(mockRequester.request(ArgumentMatchers.<Invocation<?>>any()))\n        .thenReturn(expected);\n    keystoreTemplate.requester = mockRequester;\n\n    // then\n    final Transaction actual = keystoreTemplate.sign(anyRawTransaction);\n    assertEquals(expected, actual);\n  }", "signature": "void testSign()", "full_signature": "@Test public void testSign()", "class_method_signature": "KeyStoreTemplateTest.testSign()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "request", "any", "sign", "assertEquals"]}, "focal_class": {"identifier": "KeyStoreTemplate", "superclass": "extends AbstractTemplate", "interfaces": "implements KeyStoreOperation", "fields": [{"original_string": "protected final KeyStoreMethods keyStoreMethods = new KeyStoreMethods();", "modifier": "protected final", "type": "KeyStoreMethods", "declarator": "keyStoreMethods = new KeyStoreMethods()", "var_name": "keyStoreMethods"}], "methods": [{"identifier": "KeyStoreTemplate", "parameters": "(final ContextStorage<Context> contextStorage)", "modifiers": "", "return": "", "signature": " KeyStoreTemplate(final ContextStorage<Context> contextStorage)", "full_signature": "  KeyStoreTemplate(final ContextStorage<Context> contextStorage)", "class_method_signature": "KeyStoreTemplate.KeyStoreTemplate(final ContextStorage<Context> contextStorage)", "testcase": false, "constructor": true}, {"identifier": "list", "parameters": "()", "modifiers": "@Override public", "return": "List<AccountAddress>", "signature": "List<AccountAddress> list()", "full_signature": "@Override public List<AccountAddress> list()", "class_method_signature": "KeyStoreTemplate.list()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final String password)", "modifiers": "@Override public", "return": "AccountAddress", "signature": "AccountAddress create(final String password)", "full_signature": "@Override public AccountAddress create(final String password)", "class_method_signature": "KeyStoreTemplate.create(final String password)", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "(final Authentication authentication)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean lock(final Authentication authentication)", "full_signature": "@Override public boolean lock(final Authentication authentication)", "class_method_signature": "KeyStoreTemplate.lock(final Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "unlock", "parameters": "(final Authentication authentication)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean unlock(final Authentication authentication)", "full_signature": "@Override public boolean unlock(final Authentication authentication)", "class_method_signature": "KeyStoreTemplate.unlock(final Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(final RawTransaction rawTransaction)", "modifiers": "@Override public", "return": "Transaction", "signature": "Transaction sign(final RawTransaction rawTransaction)", "full_signature": "@Override public Transaction sign(final RawTransaction rawTransaction)", "class_method_signature": "KeyStoreTemplate.sign(final RawTransaction rawTransaction)", "testcase": false, "constructor": false}, {"identifier": "importKey", "parameters": "(final EncryptedPrivateKey encryptedKey, final String oldPassword,\n      final String newPassword)", "modifiers": "@Override public", "return": "AccountAddress", "signature": "AccountAddress importKey(final EncryptedPrivateKey encryptedKey, final String oldPassword,\n      final String newPassword)", "full_signature": "@Override public AccountAddress importKey(final EncryptedPrivateKey encryptedKey, final String oldPassword,\n      final String newPassword)", "class_method_signature": "KeyStoreTemplate.importKey(final EncryptedPrivateKey encryptedKey, final String oldPassword,\n      final String newPassword)", "testcase": false, "constructor": false}, {"identifier": "exportKey", "parameters": "(final Authentication authentication)", "modifiers": "@Override public", "return": "EncryptedPrivateKey", "signature": "EncryptedPrivateKey exportKey(final Authentication authentication)", "full_signature": "@Override public EncryptedPrivateKey exportKey(final Authentication authentication)", "class_method_signature": "KeyStoreTemplate.exportKey(final Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(final AccountAddress sender, final AccountAddress recipient, final Aer amount,\n      final BytesValue payload)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash send(final AccountAddress sender, final AccountAddress recipient, final Aer amount,\n      final BytesValue payload)", "full_signature": "@Override public TxHash send(final AccountAddress sender, final AccountAddress recipient, final Aer amount,\n      final BytesValue payload)", "class_method_signature": "KeyStoreTemplate.send(final AccountAddress sender, final AccountAddress recipient, final Aer amount,\n      final BytesValue payload)", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/client/KeyStoreTemplate.java"}, "focal_method": {"identifier": "sign", "parameters": "(final RawTransaction rawTransaction)", "modifiers": "@Override public", "return": "Transaction", "body": "@Override\n  public Transaction sign(final RawTransaction rawTransaction) {\n    return request(keyStoreMethods.getSign(), Arrays.<Object>asList(rawTransaction));\n  }", "signature": "Transaction sign(final RawTransaction rawTransaction)", "full_signature": "@Override public Transaction sign(final RawTransaction rawTransaction)", "class_method_signature": "KeyStoreTemplate.sign(final RawTransaction rawTransaction)", "testcase": false, "constructor": false, "invocations": ["request", "getSign", "asList"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}