{"test_class": {"identifier": "HealthCountsStreamTest", "superclass": "extends CommandStreamTest", "interfaces": "", "fields": [{"original_string": "HystrixRequestContext context;", "modifier": "", "type": "HystrixRequestContext", "declarator": "context", "var_name": "context"}, {"original_string": "HealthCountsStream stream;", "modifier": "", "type": "HealthCountsStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "static HystrixCommandGroupKey groupKey = HystrixCommandGroupKey.Factory.asKey(\"HealthCounts\");", "modifier": "static", "type": "HystrixCommandGroupKey", "declarator": "groupKey = HystrixCommandGroupKey.Factory.asKey(\"HealthCounts\")", "var_name": "groupKey"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/metric/consumer/HealthCountsStreamTest.java"}, "test_case": {"identifier": "testSingleSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSingleSuccess() {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(\"CMD-Health-B\");\n        stream = HealthCountsStream.getInstance(key, 10, 100);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        stream.observe().take(10).subscribe(getSubscriber(latch));\n\n        CommandStreamTest.Command cmd = CommandStreamTest.Command.from(groupKey, key, HystrixEventType.SUCCESS, 20);\n\n        cmd.observe();\n\n        try {\n            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n        } catch (InterruptedException ex) {\n            fail(\"Interrupted ex\");\n        }\n        System.out.println(\"ReqLog : \" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertEquals(0L, stream.getLatest().getErrorCount());\n        assertEquals(1L, stream.getLatest().getTotalRequests());\n    }", "signature": "void testSingleSuccess()", "full_signature": "@Test public void testSingleSuccess()", "class_method_signature": "HealthCountsStreamTest.testSingleSuccess()", "testcase": true, "constructor": false, "invocations": ["asKey", "getInstance", "subscribe", "take", "observe", "getSubscriber", "from", "observe", "assertTrue", "await", "fail", "println", "getExecutedCommandsAsString", "getCurrentRequest", "assertEquals", "getErrorCount", "getLatest", "assertEquals", "getTotalRequests", "getLatest"]}, "focal_class": {"identifier": "HealthCountsStream", "superclass": "extends BucketedRollingCounterStream<HystrixCommandCompletion, long[], HystrixCommandMetrics.HealthCounts>", "interfaces": "", "fields": [{"original_string": "private static final ConcurrentMap<String, HealthCountsStream> streams = new ConcurrentHashMap<String, HealthCountsStream>();", "modifier": "private static final", "type": "ConcurrentMap<String, HealthCountsStream>", "declarator": "streams = new ConcurrentHashMap<String, HealthCountsStream>()", "var_name": "streams"}, {"original_string": "private static final int NUM_EVENT_TYPES = HystrixEventType.values().length;", "modifier": "private static final", "type": "int", "declarator": "NUM_EVENT_TYPES = HystrixEventType.values().length", "var_name": "NUM_EVENT_TYPES"}, {"original_string": "private static final Func2<HystrixCommandMetrics.HealthCounts, long[], HystrixCommandMetrics.HealthCounts> healthCheckAccumulator = new Func2<HystrixCommandMetrics.HealthCounts, long[], HystrixCommandMetrics.HealthCounts>() {\n        @Override\n        public HystrixCommandMetrics.HealthCounts call(HystrixCommandMetrics.HealthCounts healthCounts, long[] bucketEventCounts) {\n            return healthCounts.plus(bucketEventCounts);\n        }\n    };", "modifier": "private static final", "type": "Func2<HystrixCommandMetrics.HealthCounts, long[], HystrixCommandMetrics.HealthCounts>", "declarator": "healthCheckAccumulator = new Func2<HystrixCommandMetrics.HealthCounts, long[], HystrixCommandMetrics.HealthCounts>() {\n        @Override\n        public HystrixCommandMetrics.HealthCounts call(HystrixCommandMetrics.HealthCounts healthCounts, long[] bucketEventCounts) {\n            return healthCounts.plus(bucketEventCounts);\n        }\n    }", "var_name": "healthCheckAccumulator"}], "methods": [{"identifier": "getInstance", "parameters": "(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "modifiers": "public static", "return": "HealthCountsStream", "signature": "HealthCountsStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "full_signature": "public static HealthCountsStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "class_method_signature": "HealthCountsStream.getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs)", "modifiers": "public static", "return": "HealthCountsStream", "signature": "HealthCountsStream getInstance(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs)", "full_signature": "public static HealthCountsStream getInstance(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs)", "class_method_signature": "HealthCountsStream.getInstance(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void reset()", "full_signature": "public static void reset()", "class_method_signature": "HealthCountsStream.reset()", "testcase": false, "constructor": false}, {"identifier": "removeByKey", "parameters": "(HystrixCommandKey key)", "modifiers": "public static", "return": "void", "signature": "void removeByKey(HystrixCommandKey key)", "full_signature": "public static void removeByKey(HystrixCommandKey key)", "class_method_signature": "HealthCountsStream.removeByKey(HystrixCommandKey key)", "testcase": false, "constructor": false}, {"identifier": "HealthCountsStream", "parameters": "(final HystrixCommandKey commandKey, final int numBuckets, final int bucketSizeInMs,\n                               Func2<long[], HystrixCommandCompletion, long[]> reduceCommandCompletion)", "modifiers": "private", "return": "", "signature": " HealthCountsStream(final HystrixCommandKey commandKey, final int numBuckets, final int bucketSizeInMs,\n                               Func2<long[], HystrixCommandCompletion, long[]> reduceCommandCompletion)", "full_signature": "private  HealthCountsStream(final HystrixCommandKey commandKey, final int numBuckets, final int bucketSizeInMs,\n                               Func2<long[], HystrixCommandCompletion, long[]> reduceCommandCompletion)", "class_method_signature": "HealthCountsStream.HealthCountsStream(final HystrixCommandKey commandKey, final int numBuckets, final int bucketSizeInMs,\n                               Func2<long[], HystrixCommandCompletion, long[]> reduceCommandCompletion)", "testcase": false, "constructor": true}, {"identifier": "getEmptyBucketSummary", "parameters": "()", "modifiers": "@Override", "return": "long[]", "signature": "long[] getEmptyBucketSummary()", "full_signature": "@Override long[] getEmptyBucketSummary()", "class_method_signature": "HealthCountsStream.getEmptyBucketSummary()", "testcase": false, "constructor": false}, {"identifier": "getEmptyOutputValue", "parameters": "()", "modifiers": "@Override", "return": "HystrixCommandMetrics.HealthCounts", "signature": "HystrixCommandMetrics.HealthCounts getEmptyOutputValue()", "full_signature": "@Override HystrixCommandMetrics.HealthCounts getEmptyOutputValue()", "class_method_signature": "HealthCountsStream.getEmptyOutputValue()", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/metric/consumer/HealthCountsStream.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "modifiers": "public static", "return": "HealthCountsStream", "body": "public static HealthCountsStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties) {\n        final int healthCountBucketSizeInMs = properties.metricsHealthSnapshotIntervalInMilliseconds().get();\n        if (healthCountBucketSizeInMs == 0) {\n            throw new RuntimeException(\"You have set the bucket size to 0ms.  Please set a positive number, so that the metric stream can be properly consumed\");\n        }\n        final int numHealthCountBuckets = properties.metricsRollingStatisticalWindowInMilliseconds().get() / healthCountBucketSizeInMs;\n\n        return getInstance(commandKey, numHealthCountBuckets, healthCountBucketSizeInMs);\n    }", "signature": "HealthCountsStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "full_signature": "public static HealthCountsStream getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "class_method_signature": "HealthCountsStream.getInstance(HystrixCommandKey commandKey, HystrixCommandProperties properties)", "testcase": false, "constructor": false, "invocations": ["get", "metricsHealthSnapshotIntervalInMilliseconds", "get", "metricsRollingStatisticalWindowInMilliseconds", "getInstance"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}