{"test_class": {"identifier": "JarDiffCmdTest", "superclass": "", "interfaces": "", "fields": [], "file": "rest-lib-utils/src/test/java/org/eclipse/steady/cia/dependencyfinder/JarDiffCmdTest.java"}, "test_case": {"identifier": "testDoProcessing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDoProcessing() {\n    Artifact old_doc = new Artifact(\"commons-fileupload\", \"commons-fileupload\", \"1.1.1\");\n\n    Artifact new_doc = new Artifact(\"commons-fileupload\", \"commons-fileupload\", \"1.3.1\");\n\n    Path old_jar = Paths.get(\"./src/test/resources/commons-fileupload-1.1.1.jar\");\n    Path new_jar = Paths.get(\"./src/test/resources/commons-fileupload-1.3.1.jar\");\n\n    JarDiffCmd cmd = new JarDiffCmd(old_doc, old_jar, new_doc, new_jar);\n\n    try {\n      final String[] args =\n          new String[] {\n            \"-old\", old_jar.toString(), \"-new\", new_jar.toString(), \"-name\", \"xyz\", \"-code\"\n          };\n      cmd.run(args);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    JarDiffResult result = cmd.getResult();\n\n    String json = JacksonUtil.asJsonString(result);\n    System.out.println(json);\n    assertTrue(result != null);\n  }", "signature": "void testDoProcessing()", "full_signature": "@Test public void testDoProcessing()", "class_method_signature": "JarDiffCmdTest.testDoProcessing()", "testcase": true, "constructor": false, "invocations": ["get", "get", "toString", "toString", "run", "printStackTrace", "getResult", "asJsonString", "println", "assertTrue"]}, "focal_class": {"identifier": "JarDiffCmd", "superclass": "extends DiffCommand", "interfaces": "", "fields": [{"original_string": "private Artifact oldLib, newLib;", "modifier": "private", "type": "Artifact", "declarator": "oldLib", "var_name": "oldLib"}, {"original_string": "private Path oldPath, newPath;", "modifier": "private", "type": "Path", "declarator": "oldPath", "var_name": "oldPath"}, {"original_string": "private JarDiffVisitor visitor;", "modifier": "private", "type": "JarDiffVisitor", "declarator": "visitor", "var_name": "visitor"}], "methods": [{"identifier": "JarDiffCmd", "parameters": "(Artifact _old, Path _old_path, Artifact _new, Path _new_path)", "modifiers": "public", "return": "", "signature": " JarDiffCmd(Artifact _old, Path _old_path, Artifact _new, Path _new_path)", "full_signature": "public  JarDiffCmd(Artifact _old, Path _old_path, Artifact _new, Path _new_path)", "class_method_signature": "JarDiffCmd.JarDiffCmd(Artifact _old, Path _old_path, Artifact _new, Path _new_path)", "testcase": false, "constructor": true}, {"identifier": "doProcessing", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void doProcessing()", "full_signature": "protected void doProcessing()", "class_method_signature": "JarDiffCmd.doProcessing()", "testcase": false, "constructor": false}, {"identifier": "getResult", "parameters": "()", "modifiers": "public", "return": "JarDiffResult", "signature": "JarDiffResult getResult()", "full_signature": "public JarDiffResult getResult()", "class_method_signature": "JarDiffCmd.getResult()", "testcase": false, "constructor": false}], "file": "rest-lib-utils/src/main/java/org/eclipse/steady/cia/dependencyfinder/JarDiffCmd.java"}, "focal_method": {"identifier": "doProcessing", "parameters": "()", "modifiers": "protected", "return": "void", "body": "protected void doProcessing() throws Exception {\n    // Old JAR\n    PackageMapper oldPackages = new PackageMapper();\n    ClassfileLoader oldJar = new AggregatingClassfileLoader();\n    oldJar.addLoadListener(oldPackages);\n    List<String> old_files = new ArrayList<String>();\n    old_files.add(this.oldPath.toString());\n    oldJar.load(old_files);\n\n    // New JAR\n    PackageMapper newPackages = new PackageMapper();\n    ClassfileLoader newJar = new AggregatingClassfileLoader();\n    newJar.addLoadListener(newPackages);\n    List<String> new_files = new ArrayList<String>();\n    new_files.add(this.newPath.toString());\n    newJar.load(new_files);\n\n    String name = this.oldLib.getLibId().getMvnGroup() + \":\" + this.oldLib.getLibId().getArtifact();\n    String oldLabel = name + \":\" + oldLib.getLibId().getVersion();\n    String newLabel = name + \":\" + newLib.getLibId().getVersion();\n\n    Differences differences =\n        getDifferencesFactory()\n            .createProjectDifferences(name, oldLabel, oldPackages, newLabel, newPackages);\n\n    // Report report = new Report(getCommandLine().getSingleSwitch(\"encoding\"),\n    // getCommandLine().getSingleSwitch(\"dtd-prefix\"));\n    visitor = new JarDiffVisitor(this.oldLib, this.newLib);\n\n    differences.accept(visitor);\n  }", "signature": "void doProcessing()", "full_signature": "protected void doProcessing()", "class_method_signature": "JarDiffCmd.doProcessing()", "testcase": false, "constructor": false, "invocations": ["addLoadListener", "add", "toString", "load", "addLoadListener", "add", "toString", "load", "getMvnGroup", "getLibId", "getArtifact", "getLibId", "getVersion", "getLibId", "getVersion", "getLibId", "createProjectDifferences", "getDifferencesFactory", "accept"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}