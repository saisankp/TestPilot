{"test_class": {"identifier": "ExponentialDeratingFunctionTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/functions/derating/ExponentialDeratingFunctionTest.java"}, "test_case": {"identifier": "testGetDeratedMultiplier", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDeratedMultiplier() throws Exception {\n        ExponentialDeratingFunction function = new ExponentialDeratingFunction();\n        double minimumDeratingValue = 0.01;\n        double radius = 1.0;\n        function.setMinimumDeratingValue(minimumDeratingValue);\n        function.setRadius(radius);\n\n        assertEquals(minimumDeratingValue, function.getDeratedMultiplier(0.0), 10E-10);\n        assertEquals(0.0158, function.getDeratedMultiplier(0.1), 10E-5);\n        assertEquals(0.0398, function.getDeratedMultiplier(0.3), 10E-5);\n        assertEquals(0.1, function.getDeratedMultiplier(0.5), 10E-5);\n        assertEquals(0.251, function.getDeratedMultiplier(0.7), 10E-4);\n        assertEquals(0.631, function.getDeratedMultiplier(0.9), 10E-5);\n        assertEquals(1.0, function.getDeratedMultiplier(radius), 0.0);\n        assertEquals(1.0, function.getDeratedMultiplier(2 * radius), 0.0);\n    }", "signature": "void testGetDeratedMultiplier()", "full_signature": "@Test public void testGetDeratedMultiplier()", "class_method_signature": "ExponentialDeratingFunctionTest.testGetDeratedMultiplier()", "testcase": true, "constructor": false, "invocations": ["setMinimumDeratingValue", "setRadius", "assertEquals", "getDeratedMultiplier", "assertEquals", "getDeratedMultiplier", "assertEquals", "getDeratedMultiplier", "assertEquals", "getDeratedMultiplier", "assertEquals", "getDeratedMultiplier", "assertEquals", "getDeratedMultiplier", "assertEquals", "getDeratedMultiplier", "assertEquals", "getDeratedMultiplier"]}, "focal_class": {"identifier": "ExponentialDeratingFunction", "superclass": "", "interfaces": "implements DeratingFunction", "fields": [{"original_string": "@Property(name = \"niche radius\", description = \"radius in which operates derating function\")\n    @Range(from = 0.0, to = Double.MAX_VALUE)\n    protected double radius = 1.0;", "modifier": "@Property(name = \"niche radius\", description = \"radius in which operates derating function\")\n    @Range(from = 0.0, to = Double.MAX_VALUE)\n    protected", "type": "double", "declarator": "radius = 1.0", "var_name": "radius"}, {"original_string": "@Property(name = \"minimum derating value\", description = \"value of derating multiplier that is returned if the distance is equal to zero\")\n    @Range(from = Double.MIN_VALUE, to = Double.MAX_VALUE)\n    protected double minimumDeratingValue = Double.MIN_VALUE;", "modifier": "@Property(name = \"minimum derating value\", description = \"value of derating multiplier that is returned if the distance is equal to zero\")\n    @Range(from = Double.MIN_VALUE, to = Double.MAX_VALUE)\n    protected", "type": "double", "declarator": "minimumDeratingValue = Double.MIN_VALUE", "var_name": "minimumDeratingValue"}], "methods": [{"identifier": "getDeratedMultiplier", "parameters": "(double distance)", "modifiers": "public", "return": "double", "signature": "double getDeratedMultiplier(double distance)", "full_signature": "public double getDeratedMultiplier(double distance)", "class_method_signature": "ExponentialDeratingFunction.getDeratedMultiplier(double distance)", "testcase": false, "constructor": false}, {"identifier": "getRadius", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRadius()", "full_signature": "public double getRadius()", "class_method_signature": "ExponentialDeratingFunction.getRadius()", "testcase": false, "constructor": false}, {"identifier": "setRadius", "parameters": "(double radius)", "modifiers": "public", "return": "void", "signature": "void setRadius(double radius)", "full_signature": "public void setRadius(double radius)", "class_method_signature": "ExponentialDeratingFunction.setRadius(double radius)", "testcase": false, "constructor": false}, {"identifier": "getMinimumDeratingValue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMinimumDeratingValue()", "full_signature": "public double getMinimumDeratingValue()", "class_method_signature": "ExponentialDeratingFunction.getMinimumDeratingValue()", "testcase": false, "constructor": false}, {"identifier": "setMinimumDeratingValue", "parameters": "(double minimumDeratingValue)", "modifiers": "public", "return": "void", "signature": "void setMinimumDeratingValue(double minimumDeratingValue)", "full_signature": "public void setMinimumDeratingValue(double minimumDeratingValue)", "class_method_signature": "ExponentialDeratingFunction.setMinimumDeratingValue(double minimumDeratingValue)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/functions/derating/ExponentialDeratingFunction.java"}, "focal_method": {"identifier": "getDeratedMultiplier", "parameters": "(double distance)", "modifiers": "public", "return": "double", "body": "public double getDeratedMultiplier(double distance) {\n        if (distance < this.radius){\n            // e^( ln(m) * (r - d) / r)\n            return Math.exp( Math.log(minimumDeratingValue) * ((radius - distance) / radius ) );\n        }\n        return 1.0;\n    }", "signature": "double getDeratedMultiplier(double distance)", "full_signature": "public double getDeratedMultiplier(double distance)", "class_method_signature": "ExponentialDeratingFunction.getDeratedMultiplier(double distance)", "testcase": false, "constructor": false, "invocations": ["exp", "log"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}