{"test_class": {"identifier": "RegexMatchTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/conditions/RegexMatchTest.java"}, "test_case": {"identifier": "evalInvalidFileTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void evalInvalidFileTest() {\n        RegexMatch regexMatch;\n        TUExecutionResult executionResult;\n\n        regexMatch = new RegexMatch(\"*Mustache*\").relative(\"/src/main/resources/caes.yaml\");\n        executionResult = regexMatch.execution(transformedAppFolder, transformationContext);\n        Assert.assertEquals(executionResult.getType(), TUExecutionResult.Type.ERROR);\n        Assert.assertNull(executionResult.getValue());\n        Assert.assertEquals(executionResult.getException().getClass(), FileNotFoundException.class);\n        Assert.assertEquals(executionResult.getException().getMessage(), \"File to be evaluated has not been found\");\n    }", "signature": "void evalInvalidFileTest()", "full_signature": "@Test public void evalInvalidFileTest()", "class_method_signature": "RegexMatchTest.evalInvalidFileTest()", "testcase": true, "constructor": false, "invocations": ["relative", "execution", "assertEquals", "getType", "assertNull", "getValue", "assertEquals", "getClass", "getException", "assertEquals", "getMessage", "getException"]}, "focal_class": {"identifier": "RegexMatch", "superclass": "extends SingleCondition<RegexMatch>", "interfaces": "", "fields": [{"original_string": "private static final String DESCRIPTION = \"Check if regular expression '%s' matches against any line in file %s\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Check if regular expression '%s' matches against any line in file %s\"", "var_name": "DESCRIPTION"}, {"original_string": "private String regex;", "modifier": "private", "type": "String", "declarator": "regex", "var_name": "regex"}], "methods": [{"identifier": "RegexMatch", "parameters": "()", "modifiers": "public", "return": "", "signature": " RegexMatch()", "full_signature": "public  RegexMatch()", "class_method_signature": "RegexMatch.RegexMatch()", "testcase": false, "constructor": true}, {"identifier": "RegexMatch", "parameters": "(String regex)", "modifiers": "public", "return": "", "signature": " RegexMatch(String regex)", "full_signature": "public  RegexMatch(String regex)", "class_method_signature": "RegexMatch.RegexMatch(String regex)", "testcase": false, "constructor": true}, {"identifier": "setRegex", "parameters": "(String regex)", "modifiers": "public", "return": "RegexMatch", "signature": "RegexMatch setRegex(String regex)", "full_signature": "public RegexMatch setRegex(String regex)", "class_method_signature": "RegexMatch.setRegex(String regex)", "testcase": false, "constructor": false}, {"identifier": "getRegex", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRegex()", "full_signature": "public String getRegex()", "class_method_signature": "RegexMatch.getRegex()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "RegexMatch.getDescription()", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TUExecutionResult", "signature": "TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "RegexMatch.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "boolean", "signature": "boolean evaluate(BufferedReader reader)", "full_signature": "private boolean evaluate(BufferedReader reader)", "class_method_signature": "RegexMatch.evaluate(BufferedReader reader)", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/conditions/RegexMatch.java"}, "focal_method": {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TUExecutionResult", "body": "@Override\n    protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext) {\n        File file = getAbsoluteFile(transformedAppFolder, transformationContext);\n\n        if (!file.exists()) {\n            // TODO Should this be done as pre-validation?\n            FileNotFoundException ex = new FileNotFoundException(\"File to be evaluated has not been found\");\n            return TUExecutionResult.error(this, ex);\n        }\n\n        BufferedReader reader = null;\n        boolean evalResult = false;\n        TUExecutionResult result = null;\n\n        try {\n            reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));\n            evalResult = evaluate(reader);\n            result = TUExecutionResult.value(this, evalResult);\n        } catch (Exception e) {\n            result = TUExecutionResult.error(this,  e);\n        } finally {\n            if(reader != null) try {\n                reader.close();\n            } catch (IOException e) {\n                if (result != null) {\n                    result.addWarning(e);\n                }\n            }\n        }\n\n        return result;\n    }", "signature": "TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "RegexMatch.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false, "invocations": ["getAbsoluteFile", "exists", "error", "evaluate", "value", "error", "close", "addWarning"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}