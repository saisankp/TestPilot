{"test_class": {"identifier": "TakeSnapshotTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    TakeSnapshotTask task = new TakeSnapshotTask(null, null, null, from(now()));", "modifier": "@InjectMocks", "type": "TakeSnapshotTask", "declarator": "task = new TakeSnapshotTask(null, null, null, from(now()))", "var_name": "task"}, {"original_string": "@Mock\n    Scorer scorer;", "modifier": "@Mock", "type": "Scorer", "declarator": "scorer", "var_name": "scorer"}, {"original_string": "@Mock\n    Date date = new Date();", "modifier": "@Mock", "type": "Date", "declarator": "date = new Date()", "var_name": "date"}, {"original_string": "static final String ORGANIZATION_LOGIN = \"myLogin\";", "modifier": "static final", "type": "String", "declarator": "ORGANIZATION_LOGIN = \"myLogin\"", "var_name": "ORGANIZATION_LOGIN"}, {"original_string": "static final int ORGANIZATION_ID = 77;", "modifier": "static final", "type": "int", "declarator": "ORGANIZATION_ID = 77", "var_name": "ORGANIZATION_ID"}], "file": "catwatch-backend/src/test/java/org/zalando/catwatch/backend/github/TakeSnapshotTaskTest.java"}, "test_case": {"identifier": "testCollectProjects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCollectProjects() throws Exception {\n\n        // given\n        RepositoryWrapper repo = mock(RepositoryWrapper.class);\n        when(repo.getId()).thenReturn(123);\n        when(repo.getName()).thenReturn(\"awesome\");\n        when(repo.getUrl()).thenReturn(new URL(\"http://a.com/b.html\"));\n        when(repo.getDescription()).thenReturn(\"cool\");\n        when(repo.getStarsCount()).thenReturn(11);\n        when(repo.getForksCount()).thenReturn(22);\n        when(repo.getLastPushed()).thenReturn(date);\n        when(repo.getPrimaryLanguage()).thenReturn(\"Go\");\n        when(repo.listLanguages()).thenReturn(toMap(\"C\", 30, \"Go\", 15, \"Java\", 4));\n        when(repo.listCommits()).thenReturn(mockList(GHCommit.class, 2));\n        when(repo.listContributors()).thenReturn(mockList(Contributor.class, 2));\n        when(repo.getFileContent(\"MAINTAINERS\")).thenReturn(new ByteArrayInputStream(\"foo\\nbar\".getBytes()));\n        when(repo.getFileContent(\".catwatch.yaml\")).thenReturn(new ByteArrayInputStream(\"image: test\\n\".getBytes()));\n        when(scorer.score(any(Project.class))).thenReturn(55);\n\n        // when\n        List<Project> projects = new ArrayList<>(task.collectProjects(org(singletonList(repo))));\n\n        // then\n        assertThat(projects, hasSize(1));\n        Project project = projects.get(0);\n\n        assertThat(project.getGitHubProjectId(), equalTo(123L));\n\n        assertThat(project.getSnapshotDate().getTime(), equalTo(((Date)ReflectionTestUtils.getField(task, \"snapshotDate\")).getTime()));\n        assertThat(project.getName(), equalTo(\"awesome\"));\n        assertThat(project.getUrl(), equalTo(\"http://a.com/b.html\"));\n        assertThat(project.getDescription(), equalTo(\"cool\"));\n        assertThat(project.getStarsCount(), equalTo(11));\n        assertThat(project.getForksCount(), equalTo(22));\n        assertThat(project.getLastPushed(), equalTo(date.toString()));\n        assertThat(project.getPrimaryLanguage(), equalTo(\"Go\"));\n        assertThat(project.getLanguageList(), containsInAnyOrder(\"C\", \"Go\", \"Java\"));\n        assertThat(project.getCommitsCount(), equalTo(2));\n        assertThat(project.getContributorsCount(), equalTo(2));\n        assertThat(project.getScore(), equalTo(55));\n        assertThat(project.getMaintainers(), containsInAnyOrder(\"foo\", \"bar\"));\n        assertThat(project.getImage(), equalTo(\"test\"));\n    }", "signature": "void testCollectProjects()", "full_signature": "@Test public void testCollectProjects()", "class_method_signature": "TakeSnapshotTaskTest.testCollectProjects()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getId", "thenReturn", "when", "getName", "thenReturn", "when", "getUrl", "thenReturn", "when", "getDescription", "thenReturn", "when", "getStarsCount", "thenReturn", "when", "getForksCount", "thenReturn", "when", "getLastPushed", "thenReturn", "when", "getPrimaryLanguage", "thenReturn", "when", "listLanguages", "toMap", "thenReturn", "when", "listCommits", "mockList", "thenReturn", "when", "listContributors", "mockList", "thenReturn", "when", "getFileContent", "getBytes", "thenReturn", "when", "getFileContent", "getBytes", "thenReturn", "when", "score", "any", "collectProjects", "org", "singletonList", "assertThat", "hasSize", "get", "assertThat", "getGitHubProjectId", "equalTo", "assertThat", "getTime", "getSnapshotDate", "equalTo", "getTime", "getField", "assertThat", "getName", "equalTo", "assertThat", "getUrl", "equalTo", "assertThat", "getDescription", "equalTo", "assertThat", "getStarsCount", "equalTo", "assertThat", "getForksCount", "equalTo", "assertThat", "getLastPushed", "equalTo", "toString", "assertThat", "getPrimaryLanguage", "equalTo", "assertThat", "getLanguageList", "containsInAnyOrder", "assertThat", "getCommitsCount", "equalTo", "assertThat", "getContributorsCount", "equalTo", "assertThat", "getScore", "equalTo", "assertThat", "getMaintainers", "containsInAnyOrder", "assertThat", "getImage", "equalTo"]}, "focal_class": {"identifier": "TakeSnapshotTask", "superclass": "", "interfaces": "implements Callable<Snapshot>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TakeSnapshotTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TakeSnapshotTask.class)", "var_name": "logger"}, {"original_string": "private final GitHub gitHub;", "modifier": "private final", "type": "GitHub", "declarator": "gitHub", "var_name": "gitHub"}, {"original_string": "private final String organisationName;", "modifier": "private final", "type": "String", "declarator": "organisationName", "var_name": "organisationName"}, {"original_string": "private final Date snapshotDate;", "modifier": "private final", "type": "Date", "declarator": "snapshotDate", "var_name": "snapshotDate"}, {"original_string": "private Scorer scorer;", "modifier": "private", "type": "Scorer", "declarator": "scorer", "var_name": "scorer"}], "methods": [{"identifier": "TakeSnapshotTask", "parameters": "(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "modifiers": "public", "return": "", "signature": " TakeSnapshotTask(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "full_signature": "public  TakeSnapshotTask(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "class_method_signature": "TakeSnapshotTask.TakeSnapshotTask(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "Snapshot", "signature": "Snapshot call()", "full_signature": "@Override public Snapshot call()", "class_method_signature": "TakeSnapshotTask.call()", "testcase": false, "constructor": false}, {"identifier": "collectStatistics", "parameters": "(final OrganizationWrapper organization)", "modifiers": "", "return": "Statistics", "signature": "Statistics collectStatistics(final OrganizationWrapper organization)", "full_signature": " Statistics collectStatistics(final OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectStatistics(final OrganizationWrapper organization)", "testcase": false, "constructor": false}, {"identifier": "collectProjects", "parameters": "(OrganizationWrapper organization)", "modifiers": "", "return": "Collection<Project>", "signature": "Collection<Project> collectProjects(OrganizationWrapper organization)", "full_signature": " Collection<Project> collectProjects(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectProjects(OrganizationWrapper organization)", "testcase": false, "constructor": false}, {"identifier": "getProjectMaintainers", "parameters": "(RepositoryWrapper repository)", "modifiers": "", "return": "List<String>", "signature": "List<String> getProjectMaintainers(RepositoryWrapper repository)", "full_signature": " List<String> getProjectMaintainers(RepositoryWrapper repository)", "class_method_signature": "TakeSnapshotTask.getProjectMaintainers(RepositoryWrapper repository)", "testcase": false, "constructor": false}, {"identifier": "readCatwatchYaml", "parameters": "(RepositoryWrapper repository, Project project)", "modifiers": "", "return": "void", "signature": "void readCatwatchYaml(RepositoryWrapper repository, Project project)", "full_signature": " void readCatwatchYaml(RepositoryWrapper repository, Project project)", "class_method_signature": "TakeSnapshotTask.readCatwatchYaml(RepositoryWrapper repository, Project project)", "testcase": false, "constructor": false}, {"identifier": "collectContributors", "parameters": "(OrganizationWrapper organization)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "Collection<Contributor>", "signature": "Collection<Contributor> collectContributors(OrganizationWrapper organization)", "full_signature": "@SuppressWarnings(\"unchecked\") Collection<Contributor> collectContributors(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectContributors(OrganizationWrapper organization)", "testcase": false, "constructor": false}, {"identifier": "collectLanguages", "parameters": "(OrganizationWrapper organization)", "modifiers": "@SuppressWarnings(\"rawtypes\")", "return": "Collection<Language>", "signature": "Collection<Language> collectLanguages(OrganizationWrapper organization)", "full_signature": "@SuppressWarnings(\"rawtypes\") Collection<Language> collectLanguages(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectLanguages(OrganizationWrapper organization)", "testcase": false, "constructor": false}], "file": "catwatch-backend/src/main/java/org/zalando/catwatch/backend/github/TakeSnapshotTask.java"}, "focal_method": {"identifier": "collectProjects", "parameters": "(OrganizationWrapper organization)", "modifiers": "", "return": "Collection<Project>", "body": "Collection<Project> collectProjects(OrganizationWrapper organization) throws IOException, URISyntaxException {\n        logger.info(\"Started collecting projects for organization '{}'.\", organisationName);\n\n        List<Project> projects = new ArrayList<>();\n\n        for (RepositoryWrapper repository : organization.listRepositories()) {\n            Project project = new Project();\n\n            project.setGitHubProjectId(repository.getId());\n            project.setSnapshotDate(snapshotDate);\n            project.setName(repository.getName());\n            project.setUrl(repository.getUrl().toURI().toString());\n            project.setDescription(repository.getDescription());\n            project.setStarsCount(repository.getStarsCount());\n            project.setForksCount(repository.getForksCount());\n            project.setLastPushed(repository.getLastPushed().toString());\n            project.setPrimaryLanguage(repository.getPrimaryLanguage());\n            project.setLanguageList(new ArrayList<>(repository.listLanguages().keySet()));\n            project.setOrganizationName(organization.getLogin());\n            project.setCommitsCount(repository.listCommits().size());\n            project.setContributorsCount(repository.listContributors().size());\n            project.setExternalContributorsCount((int) repository.listContributors().stream()\n                    .filter(contributor -> !organization.contributorIsMember(contributor))\n                    .map(GHRepository.Contributor::getId)\n                    .distinct()\n                    .count());\n            project.setScore(scorer.score(project));\n\n            project.setMaintainers(getProjectMaintainers(repository));\n\n            readCatwatchYaml(repository, project);\n\n            projects.add(project);\n        }\n\n        logger.info(\"Finished collecting projects for organization '{}'.\", organisationName);\n\n        return projects;\n    }", "signature": "Collection<Project> collectProjects(OrganizationWrapper organization)", "full_signature": " Collection<Project> collectProjects(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectProjects(OrganizationWrapper organization)", "testcase": false, "constructor": false, "invocations": ["info", "listRepositories", "setGitHubProjectId", "getId", "setSnapshotDate", "setName", "getName", "setUrl", "toString", "toURI", "getUrl", "setDescription", "getDescription", "setStarsCount", "getStarsCount", "setForksCount", "getForksCount", "setLastPushed", "toString", "getLastPushed", "setPrimaryLanguage", "getPrimaryLanguage", "setLanguageList", "keySet", "listLanguages", "setOrganizationName", "getLogin", "setCommitsCount", "size", "listCommits", "setContributorsCount", "size", "listContributors", "setExternalContributorsCount", "count", "distinct", "map", "filter", "stream", "listContributors", "contributorIsMember", "setScore", "score", "setMaintainers", "getProjectMaintainers", "readCatwatchYaml", "add", "info"]}, "repository": {"repo_id": 35957836, "url": "https://github.com/zalando-incubator/catwatch", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 55, "size": 1999, "license": "licensed"}}