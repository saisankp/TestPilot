{"test_class": {"identifier": "DifferencingModuleTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/demetra/DifferencingModuleTest.java"}, "test_case": {"identifier": "testSomeMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSomeMethod() {\n        ModellingContext context = new ModellingContext();\n        context.automodelling = true;\n        context.hasseas = true;\n        context.description = new ModelDescription(Data.P, null);\n //       context.description.setAirline(true);\n        context.description.setTransformation(DefaultTransformationType.Log);\n        DifferencingModule diff=new DifferencingModule();\n        diff.process(context);\n//        System.out.println(diff.getD());\n//        System.out.println(diff.getBD());\n//        System.out.println(diff.getTmean());\n//        System.out.println(diff.isMeanCorrection());\n    }", "signature": "void testSomeMethod()", "full_signature": "@Test public void testSomeMethod()", "class_method_signature": "DifferencingModuleTest.testSomeMethod()", "testcase": true, "constructor": false, "invocations": ["setTransformation", "process"]}, "focal_class": {"identifier": "DifferencingModule", "superclass": "extends DemetraModule", "interfaces": "implements IDifferencingModule, IPreprocessingModule", "fields": [{"original_string": "public static final int MAXD = 2, MAXBD = 1;", "modifier": "public static final", "type": "int", "declarator": "MAXD = 2", "var_name": "MAXD"}, {"original_string": "public static final double EPS = 1e-5;", "modifier": "public static final", "type": "double", "declarator": "EPS = 1e-5", "var_name": "EPS"}, {"original_string": "private int d, bd, freq;", "modifier": "private", "type": "int", "declarator": "d", "var_name": "d"}, {"original_string": "private double tmean;", "modifier": "private", "type": "double", "declarator": "tmean", "var_name": "tmean"}, {"original_string": "private double k = 1.2;", "modifier": "private", "type": "double", "declarator": "k = 1.2", "var_name": "k"}, {"original_string": "private double tstat = 1.96;", "modifier": "private", "type": "double", "declarator": "tstat = 1.96", "var_name": "tstat"}, {"original_string": "private int maxd = MAXD, maxbd = MAXBD;", "modifier": "private", "type": "int", "declarator": "maxd = MAXD", "var_name": "maxd"}, {"original_string": "private boolean regularFirst = false;", "modifier": "private", "type": "boolean", "declarator": "regularFirst = false", "var_name": "regularFirst"}, {"original_string": "private boolean mad = false;", "modifier": "private", "type": "boolean", "declarator": "mad = false", "var_name": "mad"}], "methods": [{"identifier": "DifferencingModule", "parameters": "()", "modifiers": "public", "return": "", "signature": " DifferencingModule()", "full_signature": "public  DifferencingModule()", "class_method_signature": "DifferencingModule.DifferencingModule()", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clear()", "full_signature": "private void clear()", "class_method_signature": "DifferencingModule.clear()", "testcase": false, "constructor": false}, {"identifier": "getBD", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getBD()", "full_signature": "@Override public int getBD()", "class_method_signature": "DifferencingModule.getBD()", "testcase": false, "constructor": false}, {"identifier": "isMeanCorrection", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMeanCorrection()", "full_signature": "@Override public boolean isMeanCorrection()", "class_method_signature": "DifferencingModule.isMeanCorrection()", "testcase": false, "constructor": false}, {"identifier": "getD", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getD()", "full_signature": "@Override public int getD()", "class_method_signature": "DifferencingModule.getD()", "testcase": false, "constructor": false}, {"identifier": "getDifferencingFilter", "parameters": "()", "modifiers": "public", "return": "BackFilter", "signature": "BackFilter getDifferencingFilter()", "full_signature": "public BackFilter getDifferencingFilter()", "class_method_signature": "DifferencingModule.getDifferencingFilter()", "testcase": false, "constructor": false}, {"identifier": "std", "parameters": "(IReadDataBlock z)", "modifiers": "private", "return": "double", "signature": "double std(IReadDataBlock z)", "full_signature": "private double std(IReadDataBlock z)", "class_method_signature": "DifferencingModule.std(IReadDataBlock z)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(ModellingContext context)", "modifiers": "@Override public", "return": "ProcessingResult", "signature": "ProcessingResult process(ModellingContext context)", "full_signature": "@Override public ProcessingResult process(ModellingContext context)", "class_method_signature": "DifferencingModule.process(ModellingContext context)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(final IReadDataBlock res, int freq, int curd, int curbd)", "modifiers": "@Override public", "return": "void", "signature": "void process(final IReadDataBlock res, int freq, int curd, int curbd)", "full_signature": "@Override public void process(final IReadDataBlock res, int freq, int curd, int curbd)", "class_method_signature": "DifferencingModule.process(final IReadDataBlock res, int freq, int curd, int curbd)", "testcase": false, "constructor": false}, {"identifier": "testMean", "parameters": "(DataBlock z)", "modifiers": "private", "return": "void", "signature": "void testMean(DataBlock z)", "full_signature": "private void testMean(DataBlock z)", "class_method_signature": "DifferencingModule.testMean(DataBlock z)", "testcase": false, "constructor": false}, {"identifier": "getTmean", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTmean()", "full_signature": "public double getTmean()", "class_method_signature": "DifferencingModule.getTmean()", "testcase": false, "constructor": false}, {"identifier": "getK", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getK()", "full_signature": "public double getK()", "class_method_signature": "DifferencingModule.getK()", "testcase": false, "constructor": false}, {"identifier": "setK", "parameters": "(double k)", "modifiers": "public", "return": "void", "signature": "void setK(double k)", "full_signature": "public void setK(double k)", "class_method_signature": "DifferencingModule.setK(double k)", "testcase": false, "constructor": false}, {"identifier": "getTstat", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTstat()", "full_signature": "public double getTstat()", "class_method_signature": "DifferencingModule.getTstat()", "testcase": false, "constructor": false}, {"identifier": "setTstat", "parameters": "(double tstat)", "modifiers": "public", "return": "void", "signature": "void setTstat(double tstat)", "full_signature": "public void setTstat(double tstat)", "class_method_signature": "DifferencingModule.setTstat(double tstat)", "testcase": false, "constructor": false}, {"identifier": "setLimits", "parameters": "(int maxd, int maxbd)", "modifiers": "@Override public", "return": "void", "signature": "void setLimits(int maxd, int maxbd)", "full_signature": "@Override public void setLimits(int maxd, int maxbd)", "class_method_signature": "DifferencingModule.setLimits(int maxd, int maxbd)", "testcase": false, "constructor": false}, {"identifier": "isRegularFirst", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRegularFirst()", "full_signature": "public boolean isRegularFirst()", "class_method_signature": "DifferencingModule.isRegularFirst()", "testcase": false, "constructor": false}, {"identifier": "setRegularFirst", "parameters": "(boolean regularFirst)", "modifiers": "public", "return": "void", "signature": "void setRegularFirst(boolean regularFirst)", "full_signature": "public void setRegularFirst(boolean regularFirst)", "class_method_signature": "DifferencingModule.setRegularFirst(boolean regularFirst)", "testcase": false, "constructor": false}, {"identifier": "isMad", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMad()", "full_signature": "public boolean isMad()", "class_method_signature": "DifferencingModule.isMad()", "testcase": false, "constructor": false}, {"identifier": "setMad", "parameters": "(boolean mad)", "modifiers": "public", "return": "void", "signature": "void setMad(boolean mad)", "full_signature": "public void setMad(boolean mad)", "class_method_signature": "DifferencingModule.setMad(boolean mad)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/demetra/DifferencingModule.java"}, "focal_method": {"identifier": "process", "parameters": "(ModellingContext context)", "modifiers": "@Override public", "return": "ProcessingResult", "body": "@Override\n    public ProcessingResult process(ModellingContext context) {\n        try {\n            // correct data for estimated outliers...\n            DataBlock res;\n            if (context.estimation != null) {\n                int xcount = context.estimation.getRegArima().getXCount();\n                int xout = context.description.getOutliers().size();\n\n                res = context.estimation.getCorrectedData(xcount - xout, xcount);\n            } else {\n                res = new DataBlock(context.description.transformedOriginal());\n            }\n            SarimaSpecification nspec = context.description.getSpecification();\n            // get residuals\n            freq = context.description.getFrequency();\n            process(res, freq, nspec.getD(), nspec.getBD());\n            boolean changed = false;\n            if (nspec.getD() != d || nspec.getBD() != bd) {\n                changed = true;\n                SarimaSpecification cspec = new SarimaSpecification(freq);\n                cspec.setD(d);\n                cspec.setBD(bd);\n                context.description.setSpecification(cspec);\n                context.estimation = null;\n            }\n            if (isMeanCorrection() != context.description.isEstimatedMean()) {\n                changed = true;\n                context.description.setMean(isMeanCorrection());\n                context.estimation = null;\n            }\n//            addDifferencingInfo(context, d, bd, mean);\n            return changed ? ProcessingResult.Changed : ProcessingResult.Unchanged;\n\n        } catch (RuntimeException err) {\n            context.description.setAirline(context.hasseas);\n            context.estimation = null;\n            return ProcessingResult.Failed;\n        }\n    }", "signature": "ProcessingResult process(ModellingContext context)", "full_signature": "@Override public ProcessingResult process(ModellingContext context)", "class_method_signature": "DifferencingModule.process(ModellingContext context)", "testcase": false, "constructor": false, "invocations": ["getXCount", "getRegArima", "size", "getOutliers", "getCorrectedData", "transformedOriginal", "getSpecification", "getFrequency", "process", "getD", "getBD", "getD", "getBD", "setD", "setBD", "setSpecification", "isMeanCorrection", "isEstimatedMean", "setMean", "isMeanCorrection", "setAirline"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}