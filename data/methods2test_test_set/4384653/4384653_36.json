{"test_class": {"identifier": "ReflectionUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "clara/src/test/java/org/vaadin/teemu/clara/util/ReflectionUtilsTest.java"}, "test_case": {"identifier": "test_getAllDeclaredMethodsFromBaseClassByAnnotation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_getAllDeclaredMethodsFromBaseClassByAnnotation() {\n        List<Method> methods = getAllDeclaredMethodsAnnotatedWith(\n                BaseClassToExamine.class, UiHandler.class);\n        assertEquals(1, methods.size());\n        assertEquals(\"onValueChangedBase\", methods.get(0).getName());\n    }", "signature": "void test_getAllDeclaredMethodsFromBaseClassByAnnotation()", "full_signature": "@Test public void test_getAllDeclaredMethodsFromBaseClassByAnnotation()", "class_method_signature": "ReflectionUtilsTest.test_getAllDeclaredMethodsFromBaseClassByAnnotation()", "testcase": true, "constructor": false, "invocations": ["getAllDeclaredMethodsAnnotatedWith", "assertEquals", "size", "assertEquals", "getName", "get"]}, "focal_class": {"identifier": "ReflectionUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ReflectionUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReflectionUtils()", "full_signature": "private  ReflectionUtils()", "class_method_signature": "ReflectionUtils.ReflectionUtils()", "testcase": false, "constructor": true}, {"identifier": "findMethods", "parameters": "(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> findMethods(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams)", "full_signature": "public static List<Method> findMethods(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams)", "class_method_signature": "ReflectionUtils.findMethods(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams)", "testcase": false, "constructor": false}, {"identifier": "findMethods", "parameters": "(Class<?> clazz, String nameRegex,\n            Class<?>... paramTypes)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> findMethods(Class<?> clazz, String nameRegex,\n            Class<?>... paramTypes)", "full_signature": "public static List<Method> findMethods(Class<?> clazz, String nameRegex,\n            Class<?>... paramTypes)", "class_method_signature": "ReflectionUtils.findMethods(Class<?> clazz, String nameRegex,\n            Class<?>... paramTypes)", "testcase": false, "constructor": false}, {"identifier": "isComponent", "parameters": "(Class<?> componentClass)", "modifiers": "public static", "return": "boolean", "signature": "boolean isComponent(Class<?> componentClass)", "full_signature": "public static boolean isComponent(Class<?> componentClass)", "class_method_signature": "ReflectionUtils.isComponent(Class<?> componentClass)", "testcase": false, "constructor": false}, {"identifier": "getAllDeclaredFields", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "List<Field>", "signature": "List<Field> getAllDeclaredFields(Class<?> type)", "full_signature": "public static List<Field> getAllDeclaredFields(Class<?> type)", "class_method_signature": "ReflectionUtils.getAllDeclaredFields(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getAllDeclaredFieldsAnnotatedWith", "parameters": "(Class<?> type,\n            Class<? extends Annotation> annotationType)", "modifiers": "public static", "return": "List<Field>", "signature": "List<Field> getAllDeclaredFieldsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "full_signature": "public static List<Field> getAllDeclaredFieldsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "class_method_signature": "ReflectionUtils.getAllDeclaredFieldsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false}, {"identifier": "getAllDeclaredMethods", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> getAllDeclaredMethods(Class<?> type)", "full_signature": "public static List<Method> getAllDeclaredMethods(Class<?> type)", "class_method_signature": "ReflectionUtils.getAllDeclaredMethods(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getAllDeclaredMethodsAnnotatedWith", "parameters": "(Class<?> type,\n            Class<? extends Annotation> annotationType)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> getAllDeclaredMethodsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "full_signature": "public static List<Method> getAllDeclaredMethodsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "class_method_signature": "ReflectionUtils.getAllDeclaredMethodsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false}, {"identifier": "filterByAnnotationType", "parameters": "(List<? extends AnnotatedElement> fields,\n            Class<? extends Annotation> annotationType)", "modifiers": "private static", "return": "void", "signature": "void filterByAnnotationType(List<? extends AnnotatedElement> fields,\n            Class<? extends Annotation> annotationType)", "full_signature": "private static void filterByAnnotationType(List<? extends AnnotatedElement> fields,\n            Class<? extends Annotation> annotationType)", "class_method_signature": "ReflectionUtils.filterByAnnotationType(List<? extends AnnotatedElement> fields,\n            Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false}], "file": "clara/src/main/java/org/vaadin/teemu/clara/util/ReflectionUtils.java"}, "focal_method": {"identifier": "getAllDeclaredMethodsAnnotatedWith", "parameters": "(Class<?> type,\n            Class<? extends Annotation> annotationType)", "modifiers": "public static", "return": "List<Method>", "body": "public static List<Method> getAllDeclaredMethodsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType) {\n        List<Method> methods = ReflectionUtils.getAllDeclaredMethods(type);\n        filterByAnnotationType(methods, annotationType);\n        return methods;\n    }", "signature": "List<Method> getAllDeclaredMethodsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "full_signature": "public static List<Method> getAllDeclaredMethodsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "class_method_signature": "ReflectionUtils.getAllDeclaredMethodsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false, "invocations": ["getAllDeclaredMethods", "filterByAnnotationType"]}, "repository": {"repo_id": 4384653, "url": "https://github.com/tehapo/Clara", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 38, "size": 7395, "license": "licensed"}}