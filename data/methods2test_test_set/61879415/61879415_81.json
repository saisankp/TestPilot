{"test_class": {"identifier": "RoleAccountManagementBulkActionTest", "superclass": "extends AbstractBulkActionTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate TestHelper helper;", "modifier": "@Autowired\n\tprivate", "type": "TestHelper", "declarator": "helper", "var_name": "helper"}, {"original_string": "@Autowired \n\tprivate TestProvisioningExceptionProcessor testProvisioningExceptionProcessor;", "modifier": "@Autowired \n\tprivate", "type": "TestProvisioningExceptionProcessor", "declarator": "testProvisioningExceptionProcessor", "var_name": "testProvisioningExceptionProcessor"}, {"original_string": "@Autowired \n\tprivate TestAccountExceptionProcessor testAccountExceptionProcessor;", "modifier": "@Autowired \n\tprivate", "type": "TestAccountExceptionProcessor", "declarator": "testAccountExceptionProcessor", "var_name": "testAccountExceptionProcessor"}, {"original_string": "@Autowired \n\tprivate IdmLongRunningTaskService longRunningTaskService;", "modifier": "@Autowired \n\tprivate", "type": "IdmLongRunningTaskService", "declarator": "longRunningTaskService", "var_name": "longRunningTaskService"}], "file": "Realization/backend/acc/src/test/java/eu/bcvsolutions/idm/acc/bulk/action/impl/RoleAccountManagementBulkActionTest.java"}, "test_case": {"identifier": "testPrevalidationBulkAction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPrevalidationBulkAction() {\n\t\tIdmRoleDto role = getHelper().createRole();\n\t\t\n\t\tIdmBulkActionDto bulkAction = this.findBulkAction(IdmRole.class, RoleAccountManagementBulkAction.NAME);\n\t\tbulkAction.getIdentifiers().add(role.getId());\n\t\t\n\t\t// Warning message, role hasn't identity\n\t\tResultModels resultModels = bulkActionManager.prevalidate(bulkAction);\n\t\tassertEquals(1, resultModels.getInfos().size());\n\t\tassertEquals(AccResultCode.ROLE_ACM_BULK_ACTION_NONE_IDENTITIES.getCode(), resultModels.getInfos().get(0).getStatusEnum());\n\t\t// Assign identity to role\n\t\tIdmIdentityDto identity = getHelper().createIdentity();\n\t\tgetHelper().createIdentityRole(identity, role);\n\t\t\n\t\t// Info message, role has identity\n\t\tresultModels = bulkActionManager.prevalidate(bulkAction);\n\t\tassertEquals(1, resultModels.getInfos().size());\n\t\tassertEquals(AccResultCode.ROLE_ACM_BULK_ACTION_NUMBER_OF_IDENTITIES.getCode(), resultModels.getInfos().get(0).getStatusEnum());\n\t}", "signature": "void testPrevalidationBulkAction()", "full_signature": "@Test public void testPrevalidationBulkAction()", "class_method_signature": "RoleAccountManagementBulkActionTest.testPrevalidationBulkAction()", "testcase": true, "constructor": false, "invocations": ["createRole", "getHelper", "findBulkAction", "add", "getIdentifiers", "getId", "prevalidate", "assertEquals", "size", "getInfos", "assertEquals", "getCode", "getStatusEnum", "get", "getInfos", "createIdentity", "getHelper", "createIdentityRole", "getHelper", "prevalidate", "assertEquals", "size", "getInfos", "assertEquals", "getCode", "getStatusEnum", "get", "getInfos"]}, "focal_class": {"identifier": "RoleAccountManagementBulkAction", "superclass": "extends AbstractBulkAction<IdmRoleDto, IdmRoleFilter>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RoleAccountManagementBulkAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RoleAccountManagementBulkAction.class)", "var_name": "LOG"}, {"original_string": "public static final String NAME = \"role-acm-bulk-action\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"role-acm-bulk-action\"", "var_name": "NAME"}, {"original_string": "@Autowired\n\tprivate IdmRoleService roleService;", "modifier": "@Autowired\n\tprivate", "type": "IdmRoleService", "declarator": "roleService", "var_name": "roleService"}, {"original_string": "@Autowired\n\tprivate IdmIdentityRoleService identityRoleService;", "modifier": "@Autowired\n\tprivate", "type": "IdmIdentityRoleService", "declarator": "identityRoleService", "var_name": "identityRoleService"}, {"original_string": "@Autowired \n\tprivate AccAccountManagementService accountManagementService;", "modifier": "@Autowired \n\tprivate", "type": "AccAccountManagementService", "declarator": "accountManagementService", "var_name": "accountManagementService"}, {"original_string": "@Autowired \n\tprivate ProvisioningService provisioningService;", "modifier": "@Autowired \n\tprivate", "type": "ProvisioningService", "declarator": "provisioningService", "var_name": "provisioningService"}, {"original_string": "@Autowired \n\tprivate AccAccountService accountService;", "modifier": "@Autowired \n\tprivate", "type": "AccAccountService", "declarator": "accountService", "var_name": "accountService"}], "methods": [{"identifier": "processDto", "parameters": "(IdmRoleDto dto)", "modifiers": "@Override protected", "return": "OperationResult", "signature": "OperationResult processDto(IdmRoleDto dto)", "full_signature": "@Override protected OperationResult processDto(IdmRoleDto dto)", "class_method_signature": "RoleAccountManagementBulkAction.processDto(IdmRoleDto dto)", "testcase": false, "constructor": false}, {"identifier": "prevalidate", "parameters": "()", "modifiers": "@Override public", "return": "ResultModels", "signature": "ResultModels prevalidate()", "full_signature": "@Override public ResultModels prevalidate()", "class_method_signature": "RoleAccountManagementBulkAction.prevalidate()", "testcase": false, "constructor": false}, {"identifier": "getAuthoritiesForEntity", "parameters": "()", "modifiers": "@Override protected", "return": "List<String>", "signature": "List<String> getAuthoritiesForEntity()", "full_signature": "@Override protected List<String> getAuthoritiesForEntity()", "class_method_signature": "RoleAccountManagementBulkAction.getAuthoritiesForEntity()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "RoleAccountManagementBulkAction.getName()", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getOrder()", "full_signature": "@Override public int getOrder()", "class_method_signature": "RoleAccountManagementBulkAction.getOrder()", "testcase": false, "constructor": false}, {"identifier": "getService", "parameters": "()", "modifiers": "@Override public", "return": "ReadWriteDtoService<IdmRoleDto, IdmRoleFilter>", "signature": "ReadWriteDtoService<IdmRoleDto, IdmRoleFilter> getService()", "full_signature": "@Override public ReadWriteDtoService<IdmRoleDto, IdmRoleFilter> getService()", "class_method_signature": "RoleAccountManagementBulkAction.getService()", "testcase": false, "constructor": false}, {"identifier": "getEmbeddedIdentity", "parameters": "(IdmIdentityRoleDto identityRole)", "modifiers": "private", "return": "IdmIdentityDto", "signature": "IdmIdentityDto getEmbeddedIdentity(IdmIdentityRoleDto identityRole)", "full_signature": "private IdmIdentityDto getEmbeddedIdentity(IdmIdentityRoleDto identityRole)", "class_method_signature": "RoleAccountManagementBulkAction.getEmbeddedIdentity(IdmIdentityRoleDto identityRole)", "testcase": false, "constructor": false}], "file": "Realization/backend/acc/src/main/java/eu/bcvsolutions/idm/acc/bulk/action/impl/RoleAccountManagementBulkAction.java"}, "focal_method": {"identifier": "prevalidate", "parameters": "()", "modifiers": "@Override public", "return": "ResultModels", "body": "@Override\n\tpublic ResultModels prevalidate() {\n\t\tIdmBulkActionDto action = getAction();\n\t\tList<UUID> entities = getEntities(action, new StringBuilder());\n\t\tResultModels result = new ResultModels();\n\n\t\tMap<ResultModel, Long> models = new HashMap<>();\n\t\tentities.forEach(roleId -> {\n\t\t\tIdmIdentityRoleFilter identityRoleFilter = new IdmIdentityRoleFilter();\n\t\t\tidentityRoleFilter.setRoleId(roleId);\n\t\t\tIdmRoleDto role = getService().get(roleId);\n\n\t\t\tlong count = identityRoleService.find(identityRoleFilter, PageRequest.of(0, 1)).getTotalElements();\n\t\t\tif (count > 0) {\n\t\t\t\tmodels.put(new DefaultResultModel(AccResultCode.ROLE_ACM_BULK_ACTION_NUMBER_OF_IDENTITIES,\n\t\t\t\t\t\tImmutableMap.of(\"role\", role.getCode(), \"count\", count)), count);\n\t\t\t}\n\t\t});\n\n\t\tboolean someIdentitiesFound = models.values() //\n\t\t\t\t.stream() //\n\t\t\t\t.filter(count -> count > 0) //\n\t\t\t\t.findFirst() //\n\t\t\t\t.isPresent(); //\n\n\t\tif (!someIdentitiesFound) {\n\t\t\tresult.addInfo(new DefaultResultModel(AccResultCode.ROLE_ACM_BULK_ACTION_NONE_IDENTITIES));\n\t\t} else {\n\t\t\t// Sort by count\n\t\t\tList<Entry<ResultModel, Long>> collect = models //\n\t\t\t\t\t.entrySet() //\n\t\t\t\t\t.stream() //\n\t\t\t\t\t.sorted(Collections.reverseOrder(Map.Entry.comparingByValue())) //\n\t\t\t\t\t.limit(5) //\n\t\t\t\t\t.collect(Collectors.toList()); //\n\t\t\tcollect.forEach(entry -> {\n\t\t\t\tresult.addInfo(entry.getKey());\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}", "signature": "ResultModels prevalidate()", "full_signature": "@Override public ResultModels prevalidate()", "class_method_signature": "RoleAccountManagementBulkAction.prevalidate()", "testcase": false, "constructor": false, "invocations": ["getAction", "getEntities", "forEach", "setRoleId", "get", "getService", "getTotalElements", "find", "of", "put", "of", "getCode", "isPresent", "findFirst", "filter", "stream", "values", "addInfo", "collect", "limit", "sorted", "stream", "entrySet", "reverseOrder", "comparingByValue", "toList", "forEach", "addInfo", "getKey"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}