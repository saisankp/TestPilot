{"test_class": {"identifier": "X509KeyLocationResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    JsonWebSignature signature;", "modifier": "@Mock", "type": "JsonWebSignature", "declarator": "signature", "var_name": "signature"}, {"original_string": "@Mock\n    HttpsJwks mockedHttpsJwks;", "modifier": "@Mock", "type": "HttpsJwks", "declarator": "mockedHttpsJwks", "var_name": "mockedHttpsJwks"}, {"original_string": "@Mock\n    UrlStreamResolver urlResolver;", "modifier": "@Mock", "type": "UrlStreamResolver", "declarator": "urlResolver", "var_name": "urlResolver"}, {"original_string": "RSAPublicKey key;", "modifier": "", "type": "RSAPublicKey", "declarator": "key", "var_name": "key"}, {"original_string": "String x5t;", "modifier": "", "type": "String", "declarator": "x5t", "var_name": "x5t"}, {"original_string": "String x5tS256;", "modifier": "", "type": "String", "declarator": "x5tS256", "var_name": "x5tS256"}, {"original_string": "String x5c;", "modifier": "", "type": "String", "declarator": "x5c", "var_name": "x5c"}, {"original_string": "@Rule\n    public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}], "file": "implementation/src/test/java/io/smallrye/jwt/auth/principal/X509KeyLocationResolverTest.java"}, "test_case": {"identifier": "testLoadHttpsJwksWithX5t", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadHttpsJwksWithX5t() throws Exception {\n        JWTAuthContextInfo contextInfo = new JWTAuthContextInfo(\"https://github.com/my_key.jwks\", \"issuer\");\n        contextInfo.setJwksRefreshInterval(10);\n\n        RsaJsonWebKey jwk = new RsaJsonWebKey(key);\n        jwk.setOtherParameter(\"x5c\", Collections.singletonList(x5c));\n        when(mockedHttpsJwks.getJsonWebKeys()).thenReturn(Collections.singletonList(jwk));\n        X509KeyLocationResolver keyLocationResolver = new X509KeyLocationResolver(contextInfo) {\n            protected HttpsJwks initializeHttpsJwks(String loc) {\n                return mockedHttpsJwks;\n            }\n        };\n        keyLocationResolver = Mockito.spy(keyLocationResolver);\n        when(signature.getX509CertSha1ThumbprintHeaderValue()).thenReturn(x5t);\n        assertEquals(key, keyLocationResolver.resolveKey(signature, emptyList()));\n    }", "signature": "void testLoadHttpsJwksWithX5t()", "full_signature": "@Test public void testLoadHttpsJwksWithX5t()", "class_method_signature": "X509KeyLocationResolverTest.testLoadHttpsJwksWithX5t()", "testcase": true, "constructor": false, "invocations": ["setJwksRefreshInterval", "setOtherParameter", "singletonList", "thenReturn", "when", "getJsonWebKeys", "singletonList", "spy", "thenReturn", "when", "getX509CertSha1ThumbprintHeaderValue", "assertEquals", "resolveKey", "emptyList"]}, "focal_class": {"identifier": "X509KeyLocationResolver", "superclass": "extends AbstractKeyLocationResolver", "interfaces": "implements VerificationKeyResolver", "fields": [{"original_string": "private X509VerificationKeyResolver resolver;", "modifier": "private", "type": "X509VerificationKeyResolver", "declarator": "resolver", "var_name": "resolver"}], "methods": [{"identifier": "X509KeyLocationResolver", "parameters": "(JWTAuthContextInfo authContextInfo)", "modifiers": "public", "return": "", "signature": " X509KeyLocationResolver(JWTAuthContextInfo authContextInfo)", "full_signature": "public  X509KeyLocationResolver(JWTAuthContextInfo authContextInfo)", "class_method_signature": "X509KeyLocationResolver.X509KeyLocationResolver(JWTAuthContextInfo authContextInfo)", "testcase": false, "constructor": true}, {"identifier": "resolveKey", "parameters": "(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "modifiers": "@Override public", "return": "Key", "signature": "Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "full_signature": "@Override public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "class_method_signature": "X509KeyLocationResolver.resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "testcase": false, "constructor": false}, {"identifier": "initializeInternalResolver", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initializeInternalResolver()", "full_signature": "protected void initializeInternalResolver()", "class_method_signature": "X509KeyLocationResolver.initializeInternalResolver()", "testcase": false, "constructor": false}, {"identifier": "initializeInternalResolverFromJwks", "parameters": "(List<JsonWebKey> jsonWebKeys)", "modifiers": "private", "return": "void", "signature": "void initializeInternalResolverFromJwks(List<JsonWebKey> jsonWebKeys)", "full_signature": "private void initializeInternalResolverFromJwks(List<JsonWebKey> jsonWebKeys)", "class_method_signature": "X509KeyLocationResolver.initializeInternalResolverFromJwks(List<JsonWebKey> jsonWebKeys)", "testcase": false, "constructor": false}, {"identifier": "initializeInternalResolverFromPEMCertificate", "parameters": "(String content)", "modifiers": "", "return": "void", "signature": "void initializeInternalResolverFromPEMCertificate(String content)", "full_signature": " void initializeInternalResolverFromPEMCertificate(String content)", "class_method_signature": "X509KeyLocationResolver.initializeInternalResolverFromPEMCertificate(String content)", "testcase": false, "constructor": false}], "file": "implementation/src/main/java/io/smallrye/jwt/auth/principal/X509KeyLocationResolver.java"}, "focal_method": {"identifier": "resolveKey", "parameters": "(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "modifiers": "@Override public", "return": "Key", "body": "@Override\n    public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext) throws UnresolvableKeyException {\n        return resolver.resolveKey(jws, nestingContext);\n    }", "signature": "Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "full_signature": "@Override public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "class_method_signature": "X509KeyLocationResolver.resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "testcase": false, "constructor": false, "invocations": ["resolveKey"]}, "repository": {"repo_id": 134901097, "url": "https://github.com/smallrye/smallrye-jwt", "stars": 19, "created": "5/25/2018 8:19:37 PM +00:00", "updates": "2020-01-23T18:42:37+00:00", "fork": "False", "license": "licensed"}}