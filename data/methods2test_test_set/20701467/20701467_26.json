{"test_class": {"identifier": "InitialFlowWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@MockitoAnnotations.Mock private SalFlowService salFlowService;", "modifier": "@MockitoAnnotations.Mock private", "type": "SalFlowService", "declarator": "salFlowService", "var_name": "salFlowService"}, {"original_string": "private InitialFlowWriter initialFlowWriter;", "modifier": "private", "type": "InitialFlowWriter", "declarator": "initialFlowWriter", "var_name": "initialFlowWriter"}], "file": "arphandler/src/test/java/org/opendaylight/l2switch/arphandler/flow/InitialFlowWriterTest.java"}, "test_case": {"identifier": "onDataChange_Valid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onDataChange_Valid() throws Exception {\n        InstanceIdentifier<Node> instanceId = InstanceIdentifier.builder(Nodes.class)\n                .child(Node.class, new NodeKey(new NodeId(\"openflow:1\")))\n                .build();\n        Node topoNode = new NodeBuilder().setId(new NodeId(\"openflow:1\")).build();\n\n        DataTreeModification<Node> mockChange = Mockito.mock(DataTreeModification.class);\n        DataObjectModification<Node> mockModification = Mockito.mock(DataObjectModification.class);\n        when(mockModification.getDataAfter()).thenReturn(topoNode);\n        when(mockModification.getModificationType()).thenReturn(DataObjectModification.ModificationType.WRITE);\n        when(mockChange.getRootPath()).thenReturn(new DataTreeIdentifier<>(LogicalDatastoreType.CONFIGURATION,\n                instanceId));\n        when(mockChange.getRootNode()).thenReturn(mockModification);\n\n        initialFlowWriter.onDataTreeChanged(Collections.singletonList(mockChange));\n        Thread.sleep(250);\n        verify(salFlowService, times(1)).addFlow(any(AddFlowInput.class));\n\n    }", "signature": "void onDataChange_Valid()", "full_signature": "@Test public void onDataChange_Valid()", "class_method_signature": "InitialFlowWriterTest.onDataChange_Valid()", "testcase": true, "constructor": false, "invocations": ["build", "child", "builder", "build", "setId", "mock", "mock", "thenReturn", "when", "getDataAfter", "thenReturn", "when", "getModificationType", "thenReturn", "when", "getRootPath", "thenReturn", "when", "getRootNode", "onDataTreeChanged", "singletonList", "sleep", "addFlow", "verify", "times", "any"]}, "focal_class": {"identifier": "InitialFlowWriter", "superclass": "", "interfaces": "implements DataTreeChangeListener<Node>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(InitialFlowWriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(InitialFlowWriter.class)", "var_name": "LOG"}, {"original_string": "private static final String FLOW_ID_PREFIX = \"L2switch-\";", "modifier": "private static final", "type": "String", "declarator": "FLOW_ID_PREFIX = \"L2switch-\"", "var_name": "FLOW_ID_PREFIX"}, {"original_string": "private final ExecutorService initialFlowExecutor = Executors.newCachedThreadPool();", "modifier": "private final", "type": "ExecutorService", "declarator": "initialFlowExecutor = Executors.newCachedThreadPool()", "var_name": "initialFlowExecutor"}, {"original_string": "private final SalFlowService salFlowService;", "modifier": "private final", "type": "SalFlowService", "declarator": "salFlowService", "var_name": "salFlowService"}, {"original_string": "private short flowTableId;", "modifier": "private", "type": "short", "declarator": "flowTableId", "var_name": "flowTableId"}, {"original_string": "private int flowPriority;", "modifier": "private", "type": "int", "declarator": "flowPriority", "var_name": "flowPriority"}, {"original_string": "private int flowIdleTimeout;", "modifier": "private", "type": "int", "declarator": "flowIdleTimeout", "var_name": "flowIdleTimeout"}, {"original_string": "private int flowHardTimeout;", "modifier": "private", "type": "int", "declarator": "flowHardTimeout", "var_name": "flowHardTimeout"}, {"original_string": "private boolean isHybridMode;", "modifier": "private", "type": "boolean", "declarator": "isHybridMode", "var_name": "isHybridMode"}, {"original_string": "private final AtomicLong flowIdInc = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "flowIdInc = new AtomicLong()", "var_name": "flowIdInc"}, {"original_string": "private final AtomicLong flowCookieInc = new AtomicLong(0x2b00000000000000L);", "modifier": "private final", "type": "AtomicLong", "declarator": "flowCookieInc = new AtomicLong(0x2b00000000000000L)", "var_name": "flowCookieInc"}], "methods": [{"identifier": "InitialFlowWriter", "parameters": "(SalFlowService salFlowService)", "modifiers": "public", "return": "", "signature": " InitialFlowWriter(SalFlowService salFlowService)", "full_signature": "public  InitialFlowWriter(SalFlowService salFlowService)", "class_method_signature": "InitialFlowWriter.InitialFlowWriter(SalFlowService salFlowService)", "testcase": false, "constructor": true}, {"identifier": "setFlowTableId", "parameters": "(short flowTableId)", "modifiers": "public", "return": "void", "signature": "void setFlowTableId(short flowTableId)", "full_signature": "public void setFlowTableId(short flowTableId)", "class_method_signature": "InitialFlowWriter.setFlowTableId(short flowTableId)", "testcase": false, "constructor": false}, {"identifier": "setFlowPriority", "parameters": "(int flowPriority)", "modifiers": "public", "return": "void", "signature": "void setFlowPriority(int flowPriority)", "full_signature": "public void setFlowPriority(int flowPriority)", "class_method_signature": "InitialFlowWriter.setFlowPriority(int flowPriority)", "testcase": false, "constructor": false}, {"identifier": "setFlowIdleTimeout", "parameters": "(int flowIdleTimeout)", "modifiers": "public", "return": "void", "signature": "void setFlowIdleTimeout(int flowIdleTimeout)", "full_signature": "public void setFlowIdleTimeout(int flowIdleTimeout)", "class_method_signature": "InitialFlowWriter.setFlowIdleTimeout(int flowIdleTimeout)", "testcase": false, "constructor": false}, {"identifier": "setFlowHardTimeout", "parameters": "(int flowHardTimeout)", "modifiers": "public", "return": "void", "signature": "void setFlowHardTimeout(int flowHardTimeout)", "full_signature": "public void setFlowHardTimeout(int flowHardTimeout)", "class_method_signature": "InitialFlowWriter.setFlowHardTimeout(int flowHardTimeout)", "testcase": false, "constructor": false}, {"identifier": "setIsHybridMode", "parameters": "(boolean isHybridMode)", "modifiers": "public", "return": "void", "signature": "void setIsHybridMode(boolean isHybridMode)", "full_signature": "public void setIsHybridMode(boolean isHybridMode)", "class_method_signature": "InitialFlowWriter.setIsHybridMode(boolean isHybridMode)", "testcase": false, "constructor": false}, {"identifier": "registerAsDataChangeListener", "parameters": "(DataBroker dataBroker)", "modifiers": "public", "return": "ListenerRegistration<InitialFlowWriter>", "signature": "ListenerRegistration<InitialFlowWriter> registerAsDataChangeListener(DataBroker dataBroker)", "full_signature": "public ListenerRegistration<InitialFlowWriter> registerAsDataChangeListener(DataBroker dataBroker)", "class_method_signature": "InitialFlowWriter.registerAsDataChangeListener(DataBroker dataBroker)", "testcase": false, "constructor": false}, {"identifier": "onDataTreeChanged", "parameters": "(Collection<DataTreeModification<Node>> changes)", "modifiers": "@Override public", "return": "void", "signature": "void onDataTreeChanged(Collection<DataTreeModification<Node>> changes)", "full_signature": "@Override public void onDataTreeChanged(Collection<DataTreeModification<Node>> changes)", "class_method_signature": "InitialFlowWriter.onDataTreeChanged(Collection<DataTreeModification<Node>> changes)", "testcase": false, "constructor": false}], "file": "arphandler/src/main/java/org/opendaylight/l2switch/arphandler/flow/InitialFlowWriter.java"}, "focal_method": {"identifier": "onDataTreeChanged", "parameters": "(Collection<DataTreeModification<Node>> changes)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onDataTreeChanged(Collection<DataTreeModification<Node>> changes) {\n        Set<InstanceIdentifier<?>> nodeIds = new HashSet<>();\n        for (DataTreeModification<Node> change: changes) {\n            DataObjectModification<Node> rootNode = change.getRootNode();\n            final InstanceIdentifier<Node> identifier = change.getRootPath().getRootIdentifier();\n            switch (rootNode.getModificationType()) {\n                case WRITE:\n                    if (rootNode.getDataBefore() == null) {\n                        nodeIds.add(identifier);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        if (!nodeIds.isEmpty()) {\n            initialFlowExecutor.execute(new InitialFlowWriterProcessor(nodeIds));\n        }\n    }", "signature": "void onDataTreeChanged(Collection<DataTreeModification<Node>> changes)", "full_signature": "@Override public void onDataTreeChanged(Collection<DataTreeModification<Node>> changes)", "class_method_signature": "InitialFlowWriter.onDataTreeChanged(Collection<DataTreeModification<Node>> changes)", "testcase": false, "constructor": false, "invocations": ["getRootNode", "getRootIdentifier", "getRootPath", "getModificationType", "getDataBefore", "add", "isEmpty", "execute"]}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}