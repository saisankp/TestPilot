{"test_class": {"identifier": "ActorServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SERVICE_NAME = \"test-service\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_NAME = \"test-service\"", "var_name": "SERVICE_NAME"}, {"original_string": "@Mock\n    private FailureHandler mFailureHandler;", "modifier": "@Mock\n    private", "type": "FailureHandler", "declarator": "mFailureHandler", "var_name": "mFailureHandler"}, {"original_string": "@Mock\n    private Message mMessage;", "modifier": "@Mock\n    private", "type": "Message", "declarator": "mMessage", "var_name": "mMessage"}, {"original_string": "private final Object mImpl = new Object();", "modifier": "private final", "type": "Object", "declarator": "mImpl = new Object()", "var_name": "mImpl"}], "file": "actors-library/src/test/java/com/truecaller/androidactors/ActorServiceTest.java"}, "test_case": {"identifier": "deliver_useWakeLocks_always", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void deliver_useWakeLocks_always() throws Exception {\n        ActorService service = createService(true);\n        IBinder binder = service.onBind(new Intent());\n        ActorService.RemoteMessageSender sender = (ActorService.RemoteMessageSender) binder.queryLocalInterface(ActorService.LOCAL_SENDER_INTERFACE);\n\n        sender.deliver(Transaction.<Object>obtain(mImpl, mMessage, mFailureHandler));\n\n        ShadowLooper shadowLooper = Shadows.shadowOf(service.mThread.getLooper());\n        shadowLooper.runOneTask();\n\n        PowerManager.WakeLock wakeLock = ShadowPowerManager.getLatestWakeLock();\n        Assert.assertNotNull(wakeLock);\n        Assert.assertEquals(false, wakeLock.isHeld());\n    }", "signature": "void deliver_useWakeLocks_always()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void deliver_useWakeLocks_always()", "class_method_signature": "ActorServiceTest.deliver_useWakeLocks_always()", "testcase": true, "constructor": false, "invocations": ["createService", "onBind", "queryLocalInterface", "deliver", "obtain", "shadowOf", "getLooper", "runOneTask", "getLatestWakeLock", "assertNotNull", "assertEquals", "isHeld"]}, "focal_class": {"identifier": "ActorService", "superclass": "extends Service", "interfaces": "", "fields": [{"original_string": "static final String LOCAL_SENDER_INTERFACE = \"ServiceMessageSender\";", "modifier": "static final", "type": "String", "declarator": "LOCAL_SENDER_INTERFACE = \"ServiceMessageSender\"", "var_name": "LOCAL_SENDER_INTERFACE"}, {"original_string": "static final String ACTION_DIRECT_START = \"com.truecaller.androidactors.ActorService\";", "modifier": "static final", "type": "String", "declarator": "ACTION_DIRECT_START = \"com.truecaller.androidactors.ActorService\"", "var_name": "ACTION_DIRECT_START"}, {"original_string": "@NonNull\n    private final String mServiceName;", "modifier": "@NonNull\n    private final", "type": "String", "declarator": "mServiceName", "var_name": "mServiceName"}, {"original_string": "private final boolean mUseWakelocks;", "modifier": "private final", "type": "boolean", "declarator": "mUseWakelocks", "var_name": "mUseWakelocks"}, {"original_string": "private final long mStopDelay;", "modifier": "private final", "type": "long", "declarator": "mStopDelay", "var_name": "mStopDelay"}, {"original_string": "@VisibleForTesting\n    /* package */ HandlerThread mThread;", "modifier": "@VisibleForTesting", "type": "HandlerThread", "declarator": "mThread", "var_name": "mThread"}, {"original_string": "@Nullable\n    private Binder mBinder;", "modifier": "@Nullable\n    private", "type": "Binder", "declarator": "mBinder", "var_name": "mBinder"}, {"original_string": "@Nullable\n    private ActorJobEngine mJobEngine = null;", "modifier": "@Nullable\n    private", "type": "ActorJobEngine", "declarator": "mJobEngine = null", "var_name": "mJobEngine"}], "methods": [{"identifier": "ActorService", "parameters": "(@NonNull String name)", "modifiers": "@SuppressWarnings({\"unused\", \"WeakerAccess\"}) protected", "return": "", "signature": " ActorService(@NonNull String name)", "full_signature": "@SuppressWarnings({\"unused\", \"WeakerAccess\"}) protected  ActorService(@NonNull String name)", "class_method_signature": "ActorService.ActorService(@NonNull String name)", "testcase": false, "constructor": true}, {"identifier": "ActorService", "parameters": "(@NonNull String name, long stopDelay)", "modifiers": "@SuppressWarnings({\"unused\", \"WeakerAccess\"}) protected", "return": "", "signature": " ActorService(@NonNull String name, long stopDelay)", "full_signature": "@SuppressWarnings({\"unused\", \"WeakerAccess\"}) protected  ActorService(@NonNull String name, long stopDelay)", "class_method_signature": "ActorService.ActorService(@NonNull String name, long stopDelay)", "testcase": false, "constructor": true}, {"identifier": "ActorService", "parameters": "(@NonNull String name, long stopDelay, boolean useWakeLocks)", "modifiers": "@SuppressWarnings({\"unused\", \"WeakerAccess\"}) protected", "return": "", "signature": " ActorService(@NonNull String name, long stopDelay, boolean useWakeLocks)", "full_signature": "@SuppressWarnings({\"unused\", \"WeakerAccess\"}) protected  ActorService(@NonNull String name, long stopDelay, boolean useWakeLocks)", "class_method_signature": "ActorService.ActorService(@NonNull String name, long stopDelay, boolean useWakeLocks)", "testcase": false, "constructor": true}, {"identifier": "onBind", "parameters": "(Intent intent)", "modifiers": "@Override public", "return": "IBinder", "signature": "IBinder onBind(Intent intent)", "full_signature": "@Override public IBinder onBind(Intent intent)", "class_method_signature": "ActorService.onBind(Intent intent)", "testcase": false, "constructor": false}, {"identifier": "onCreate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onCreate()", "full_signature": "@Override public void onCreate()", "class_method_signature": "ActorService.onCreate()", "testcase": false, "constructor": false}, {"identifier": "onStartCommand", "parameters": "(Intent intent, int flags, int startId)", "modifiers": "@Override public", "return": "int", "signature": "int onStartCommand(Intent intent, int flags, int startId)", "full_signature": "@Override public int onStartCommand(Intent intent, int flags, int startId)", "class_method_signature": "ActorService.onStartCommand(Intent intent, int flags, int startId)", "testcase": false, "constructor": false}, {"identifier": "onDestroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onDestroy()", "full_signature": "@Override public void onDestroy()", "class_method_signature": "ActorService.onDestroy()", "testcase": false, "constructor": false}, {"identifier": "getLegacyBinder", "parameters": "()", "modifiers": "private", "return": "IBinder", "signature": "IBinder getLegacyBinder()", "full_signature": "private IBinder getLegacyBinder()", "class_method_signature": "ActorService.getLegacyBinder()", "testcase": false, "constructor": false}, {"identifier": "getBinder", "parameters": "()", "modifiers": "@TargetApi(Build.VERSION_CODES.O) private", "return": "IBinder", "signature": "IBinder getBinder()", "full_signature": "@TargetApi(Build.VERSION_CODES.O) private IBinder getBinder()", "class_method_signature": "ActorService.getBinder()", "testcase": false, "constructor": false}], "file": "actors-library/src/main/java/com/truecaller/androidactors/ActorService.java"}, "focal_method": {"identifier": "onBind", "parameters": "(Intent intent)", "modifiers": "@Override public", "return": "IBinder", "body": "@Override\n    public IBinder onBind(Intent intent) {\n        // If service was started on pre-Oreo or it was direct service start (not from JobScheduler)\n        // we return binder which can be converted to commands executor\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O || ACTION_DIRECT_START.equals(intent.getAction())) {\n            return getLegacyBinder();\n        }\n        return getBinder();\n    }", "signature": "IBinder onBind(Intent intent)", "full_signature": "@Override public IBinder onBind(Intent intent)", "class_method_signature": "ActorService.onBind(Intent intent)", "testcase": false, "constructor": false, "invocations": ["equals", "getAction", "getLegacyBinder", "getBinder"]}, "repository": {"repo_id": 99569378, "url": "https://github.com/truecaller/android-actors-library", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 20, "size": 352, "license": "licensed"}}