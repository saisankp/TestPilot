{"test_class": {"identifier": "MobiusTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Update<String, Integer, Boolean> UPDATE =\n      (model, event) -> Next.next(model + event, effects(event % 2 == 0));", "modifier": "private static final", "type": "Update<String, Integer, Boolean>", "declarator": "UPDATE =\n      (model, event) -> Next.next(model + event, effects(event % 2 == 0))", "var_name": "UPDATE"}, {"original_string": "private static final Connectable<Boolean, Integer> HANDLER =\n      output ->\n          new SimpleConnection<Boolean>() {\n            @Override\n            public void accept(Boolean value) {\n              if (value) {\n                output.accept(3);\n              }\n            }\n          };", "modifier": "private static final", "type": "Connectable<Boolean, Integer>", "declarator": "HANDLER =\n      output ->\n          new SimpleConnection<Boolean>() {\n            @Override\n            public void accept(Boolean value) {\n              if (value) {\n                output.accept(3);\n              }\n            }\n          }", "var_name": "HANDLER"}, {"original_string": "private static final String MY_MODEL = \"start\";", "modifier": "private static final", "type": "String", "declarator": "MY_MODEL = \"start\"", "var_name": "MY_MODEL"}, {"original_string": "private MobiusLoop<String, Integer, Boolean> loop;", "modifier": "private", "type": "MobiusLoop<String, Integer, Boolean>", "declarator": "loop", "var_name": "loop"}], "file": "mobius-core/src/test/java/com/spotify/mobius/MobiusTest.java"}, "test_case": {"identifier": "shouldPermitUsingCustomInit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldPermitUsingCustomInit() throws Exception {\n    Init<String, Boolean> init =\n        new Init<String, Boolean>() {\n          @Nonnull\n          @Override\n          public First<String, Boolean> init(String model) {\n            return First.first(model, effects(true));\n          }\n        };\n\n    loop = Mobius.loop(UPDATE, HANDLER).init(init).startFrom(MY_MODEL);\n\n    loop.dispatchEvent(3);\n\n    await().atMost(Duration.ofSeconds(1)).until(() -> \"start33\".equals(loop.getMostRecentModel()));\n  }", "signature": "void shouldPermitUsingCustomInit()", "full_signature": "@Test public void shouldPermitUsingCustomInit()", "class_method_signature": "MobiusTest.shouldPermitUsingCustomInit()", "testcase": true, "constructor": false, "invocations": ["first", "effects", "startFrom", "init", "loop", "dispatchEvent", "until", "atMost", "await", "ofSeconds", "equals", "getMostRecentModel"]}, "focal_class": {"identifier": "Mobius", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Connectable<?, ?> NOOP_EVENT_SOURCE =\n      output ->\n          new Connection<Object>() {\n            @Override\n            public void accept(Object value) {}\n\n            @Override\n            public void dispose() {}\n          };", "modifier": "private static final", "type": "Connectable<?, ?>", "declarator": "NOOP_EVENT_SOURCE =\n      output ->\n          new Connection<Object>() {\n            @Override\n            public void accept(Object value) {}\n\n            @Override\n            public void dispose() {}\n          }", "var_name": "NOOP_EVENT_SOURCE"}, {"original_string": "private static final MobiusLoop.Logger<?, ?, ?> NOOP_LOGGER =\n      new MobiusLoop.Logger<Object, Object, Object>() {\n        @Override\n        public void beforeInit(Object model) {\n          /* noop */\n        }\n\n        @Override\n        public void afterInit(Object model, First<Object, Object> result) {\n          /* noop */\n        }\n\n        @Override\n        public void exceptionDuringInit(Object model, Throwable exception) {\n          System.err.println(\"error initialising from model: '\" + model + \"' - \" + exception);\n          exception.printStackTrace(System.err);\n        }\n\n        @Override\n        public void beforeUpdate(Object model, Object event) {\n          /* noop */\n        }\n\n        @Override\n        public void afterUpdate(Object model, Object event, Next<Object, Object> result) {\n          /* noop */\n        }\n\n        @Override\n        public void exceptionDuringUpdate(Object model, Object event, Throwable exception) {\n          System.err.println(\n              \"error updating model: '\" + model + \"' with event: '\" + event + \"' - \" + exception);\n          exception.printStackTrace(System.err);\n        }\n      };", "modifier": "private static final", "type": "MobiusLoop.Logger<?, ?, ?>", "declarator": "NOOP_LOGGER =\n      new MobiusLoop.Logger<Object, Object, Object>() {\n        @Override\n        public void beforeInit(Object model) {\n          /* noop */\n        }\n\n        @Override\n        public void afterInit(Object model, First<Object, Object> result) {\n          /* noop */\n        }\n\n        @Override\n        public void exceptionDuringInit(Object model, Throwable exception) {\n          System.err.println(\"error initialising from model: '\" + model + \"' - \" + exception);\n          exception.printStackTrace(System.err);\n        }\n\n        @Override\n        public void beforeUpdate(Object model, Object event) {\n          /* noop */\n        }\n\n        @Override\n        public void afterUpdate(Object model, Object event, Next<Object, Object> result) {\n          /* noop */\n        }\n\n        @Override\n        public void exceptionDuringUpdate(Object model, Object event, Throwable exception) {\n          System.err.println(\n              \"error updating model: '\" + model + \"' with event: '\" + event + \"' - \" + exception);\n          exception.printStackTrace(System.err);\n        }\n      }", "var_name": "NOOP_LOGGER"}], "methods": [{"identifier": "Mobius", "parameters": "()", "modifiers": "private", "return": "", "signature": " Mobius()", "full_signature": "private  Mobius()", "class_method_signature": "Mobius.Mobius()", "testcase": false, "constructor": true}, {"identifier": "loop", "parameters": "(\n      Update<M, E, F> update, Connectable<F, E> effectHandler)", "modifiers": "public static", "return": "MobiusLoop.Builder<M, E, F>", "signature": "MobiusLoop.Builder<M, E, F> loop(\n      Update<M, E, F> update, Connectable<F, E> effectHandler)", "full_signature": "public static MobiusLoop.Builder<M, E, F> loop(\n      Update<M, E, F> update, Connectable<F, E> effectHandler)", "class_method_signature": "Mobius.loop(\n      Update<M, E, F> update, Connectable<F, E> effectHandler)", "testcase": false, "constructor": false}, {"identifier": "controller", "parameters": "(\n      MobiusLoop.Factory<M, E, F> loopFactory, M defaultModel)", "modifiers": "public static", "return": "MobiusLoop.Controller<M, E>", "signature": "MobiusLoop.Controller<M, E> controller(\n      MobiusLoop.Factory<M, E, F> loopFactory, M defaultModel)", "full_signature": "public static MobiusLoop.Controller<M, E> controller(\n      MobiusLoop.Factory<M, E, F> loopFactory, M defaultModel)", "class_method_signature": "Mobius.controller(\n      MobiusLoop.Factory<M, E, F> loopFactory, M defaultModel)", "testcase": false, "constructor": false}, {"identifier": "controller", "parameters": "(\n      MobiusLoop.Factory<M, E, F> loopFactory, M defaultModel, Init<M, F> init)", "modifiers": "public static", "return": "MobiusLoop.Controller<M, E>", "signature": "MobiusLoop.Controller<M, E> controller(\n      MobiusLoop.Factory<M, E, F> loopFactory, M defaultModel, Init<M, F> init)", "full_signature": "public static MobiusLoop.Controller<M, E> controller(\n      MobiusLoop.Factory<M, E, F> loopFactory, M defaultModel, Init<M, F> init)", "class_method_signature": "Mobius.controller(\n      MobiusLoop.Factory<M, E, F> loopFactory, M defaultModel, Init<M, F> init)", "testcase": false, "constructor": false}, {"identifier": "controller", "parameters": "(\n      MobiusLoop.Factory<M, E, F> loopFactory, M defaultModel, WorkRunner modelRunner)", "modifiers": "public static", "return": "MobiusLoop.Controller<M, E>", "signature": "MobiusLoop.Controller<M, E> controller(\n      MobiusLoop.Factory<M, E, F> loopFactory, M defaultModel, WorkRunner modelRunner)", "full_signature": "public static MobiusLoop.Controller<M, E> controller(\n      MobiusLoop.Factory<M, E, F> loopFactory, M defaultModel, WorkRunner modelRunner)", "class_method_signature": "Mobius.controller(\n      MobiusLoop.Factory<M, E, F> loopFactory, M defaultModel, WorkRunner modelRunner)", "testcase": false, "constructor": false}, {"identifier": "controller", "parameters": "(\n      MobiusLoop.Factory<M, E, F> loopFactory,\n      M defaultModel,\n      Init<M, F> init,\n      WorkRunner modelRunner)", "modifiers": "public static", "return": "MobiusLoop.Controller<M, E>", "signature": "MobiusLoop.Controller<M, E> controller(\n      MobiusLoop.Factory<M, E, F> loopFactory,\n      M defaultModel,\n      Init<M, F> init,\n      WorkRunner modelRunner)", "full_signature": "public static MobiusLoop.Controller<M, E> controller(\n      MobiusLoop.Factory<M, E, F> loopFactory,\n      M defaultModel,\n      Init<M, F> init,\n      WorkRunner modelRunner)", "class_method_signature": "Mobius.controller(\n      MobiusLoop.Factory<M, E, F> loopFactory,\n      M defaultModel,\n      Init<M, F> init,\n      WorkRunner modelRunner)", "testcase": false, "constructor": false}], "file": "mobius-core/src/main/java/com/spotify/mobius/Mobius.java"}, "focal_method": {"identifier": "loop", "parameters": "(\n      Update<M, E, F> update, Connectable<F, E> effectHandler)", "modifiers": "public static", "return": "MobiusLoop.Builder<M, E, F>", "body": "public static <M, E, F> MobiusLoop.Builder<M, E, F> loop(\n      Update<M, E, F> update, Connectable<F, E> effectHandler) {\n\n    //noinspection unchecked\n    return new Builder<>(\n        update,\n        effectHandler,\n        null,\n        (Connectable<M, E>) NOOP_EVENT_SOURCE,\n        (MobiusLoop.Logger<M, E, F>) NOOP_LOGGER,\n        new Producer<WorkRunner>() {\n          @Nonnull\n          @Override\n          public WorkRunner get() {\n            return WorkRunners.from(Executors.newSingleThreadExecutor(Builder.THREAD_FACTORY));\n          }\n        },\n        new Producer<WorkRunner>() {\n          @Nonnull\n          @Override\n          public WorkRunner get() {\n            return WorkRunners.from(Executors.newCachedThreadPool(Builder.THREAD_FACTORY));\n          }\n        });\n  }", "signature": "MobiusLoop.Builder<M, E, F> loop(\n      Update<M, E, F> update, Connectable<F, E> effectHandler)", "full_signature": "public static MobiusLoop.Builder<M, E, F> loop(\n      Update<M, E, F> update, Connectable<F, E> effectHandler)", "class_method_signature": "Mobius.loop(\n      Update<M, E, F> update, Connectable<F, E> effectHandler)", "testcase": false, "constructor": false, "invocations": ["from", "newSingleThreadExecutor", "from", "newCachedThreadPool"]}, "repository": {"repo_id": 118132535, "url": "https://github.com/spotify/mobius", "stars": 663, "created": "1/19/2018 2:07:51 PM +00:00", "updates": "2020-01-27T22:05:43+00:00", "fork": "False", "license": "licensed"}}