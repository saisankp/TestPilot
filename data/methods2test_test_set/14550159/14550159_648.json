{"test_class": {"identifier": "PropertyResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private ApplicationContext  applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private Parameter           parameter;", "modifier": "private", "type": "Parameter", "declarator": "parameter", "var_name": "parameter"}, {"original_string": "private PropertyResolver propertyResolver;", "modifier": "private", "type": "PropertyResolver", "declarator": "propertyResolver", "var_name": "propertyResolver"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/method/PropertyResolverTest.java"}, "test_case": {"identifier": "retrievesDefaultValueWhenPropertyDoesNotPresentInApplicationContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void retrievesDefaultValueWhenPropertyDoesNotPresentInApplicationContext() throws Exception {\n        when(applicationContext.getInitialProperties().getProperties()).thenReturn(emptyMap());\n        when(parameter.getDefaultValue()).thenReturn(\"default\");\n\n        Object resolvedHeader = propertyResolver.resolve(parameter, applicationContext);\n\n        assertEquals(\"default\", resolvedHeader);\n    }", "signature": "void retrievesDefaultValueWhenPropertyDoesNotPresentInApplicationContext()", "full_signature": "@Test public void retrievesDefaultValueWhenPropertyDoesNotPresentInApplicationContext()", "class_method_signature": "PropertyResolverTest.retrievesDefaultValueWhenPropertyDoesNotPresentInApplicationContext()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getProperties", "getInitialProperties", "emptyMap", "thenReturn", "when", "getDefaultValue", "resolve", "assertEquals"]}, "focal_class": {"identifier": "PropertyResolver", "superclass": "", "interfaces": "implements ParameterResolver<Property>", "fields": [{"original_string": "private final Property property;", "modifier": "private final", "type": "Property", "declarator": "property", "var_name": "property"}], "methods": [{"identifier": "PropertyResolver", "parameters": "(Property property)", "modifiers": "", "return": "", "signature": " PropertyResolver(Property property)", "full_signature": "  PropertyResolver(Property property)", "class_method_signature": "PropertyResolver.PropertyResolver(Property property)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(Parameter parameter, ApplicationContext context)", "modifiers": "@Override public", "return": "Object", "signature": "Object resolve(Parameter parameter, ApplicationContext context)", "full_signature": "@Override public Object resolve(Parameter parameter, ApplicationContext context)", "class_method_signature": "PropertyResolver.resolve(Parameter parameter, ApplicationContext context)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/method/PropertyResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Parameter parameter, ApplicationContext context)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object resolve(Parameter parameter, ApplicationContext context) throws Exception {\n        if (parameter.getParameterClass() != String.class) {\n            throw new IllegalArgumentException(\"Only parameters and fields with string type may be annotated by @Property.\");\n        }\n        String param = this.property.value();\n\n        Object value = context.getInitialProperties().getProperties().get(param);\n        if (value == null) {\n            return parameter.getDefaultValue();\n        }\n\n        return value;\n    }", "signature": "Object resolve(Parameter parameter, ApplicationContext context)", "full_signature": "@Override public Object resolve(Parameter parameter, ApplicationContext context)", "class_method_signature": "PropertyResolver.resolve(Parameter parameter, ApplicationContext context)", "testcase": false, "constructor": false, "invocations": ["getParameterClass", "value", "get", "getProperties", "getInitialProperties", "getDefaultValue"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}