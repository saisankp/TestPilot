{"test_class": {"identifier": "ActionListCustomizationMediatorImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ActionListCustomizationMediatorImpl mediator = new ActionListCustomizationMediatorImpl();", "modifier": "private", "type": "ActionListCustomizationMediatorImpl", "declarator": "mediator = new ActionListCustomizationMediatorImpl()", "var_name": "mediator"}, {"original_string": "private final String FOO_ACTION_ITEM_ID = \"123\";", "modifier": "private final", "type": "String", "declarator": "FOO_ACTION_ITEM_ID = \"123\"", "var_name": "FOO_ACTION_ITEM_ID"}, {"original_string": "private final ActionItemCustomization fooResult =\n            ActionItemCustomization.Builder.create(\n                    FOO_ACTION_ITEM_ID,\n                    ActionSet.Builder.create().build(),\n                    DisplayParameters.Builder.create(Integer.valueOf(10)).build()\n            ).build();", "modifier": "private final", "type": "ActionItemCustomization", "declarator": "fooResult =\n            ActionItemCustomization.Builder.create(\n                    FOO_ACTION_ITEM_ID,\n                    ActionSet.Builder.create().build(),\n                    DisplayParameters.Builder.create(Integer.valueOf(10)).build()\n            ).build()", "var_name": "fooResult"}, {"original_string": "private final String DEFAULT_ACTION_ITEM_ID = \"987\";", "modifier": "private final", "type": "String", "declarator": "DEFAULT_ACTION_ITEM_ID = \"987\"", "var_name": "DEFAULT_ACTION_ITEM_ID"}, {"original_string": "private final ActionItemCustomization defaultResult;", "modifier": "private final", "type": "ActionItemCustomization", "declarator": "defaultResult", "var_name": "defaultResult"}], "file": "rice-middleware/impl/src/test/java/org/kuali/rice/kew/impl/actionlist/ActionListCustomizationMediatorImplTest.java"}, "test_case": {"identifier": "testEmptyPrincipalId", "parameters": "()", "modifiers": "@Test(expected = RiceIllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = RiceIllegalArgumentException.class) public void testEmptyPrincipalId() {\n        mediator.getActionListCustomizations(\"\", Collections.<ActionItem>emptyList());\n    }", "signature": "void testEmptyPrincipalId()", "full_signature": "@Test(expected = RiceIllegalArgumentException.class) public void testEmptyPrincipalId()", "class_method_signature": "ActionListCustomizationMediatorImplTest.testEmptyPrincipalId()", "testcase": true, "constructor": false, "invocations": ["getActionListCustomizations", "emptyList"]}, "focal_class": {"identifier": "ActionListCustomizationMediatorImpl", "superclass": "", "interfaces": "implements ActionListCustomizationMediator", "fields": [{"original_string": "private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(ActionListCustomizationMediatorImpl.class);", "modifier": "private static final", "type": "org.apache.log4j.Logger", "declarator": "LOG = org.apache.log4j.Logger.getLogger(ActionListCustomizationMediatorImpl.class)", "var_name": "LOG"}, {"original_string": "private DocumentTypeService documentTypeService;", "modifier": "private", "type": "DocumentTypeService", "declarator": "documentTypeService", "var_name": "documentTypeService"}, {"original_string": "private ActionListCustomizationHandlerServiceChooser actionListCustomizationHandlerServiceChooser =\n            new ActionListCustomizationHandlerServiceChooser();", "modifier": "private", "type": "ActionListCustomizationHandlerServiceChooser", "declarator": "actionListCustomizationHandlerServiceChooser =\n            new ActionListCustomizationHandlerServiceChooser()", "var_name": "actionListCustomizationHandlerServiceChooser"}], "methods": [{"identifier": "getActionListCustomizations", "parameters": "(String principalId,\n            List<ActionItem> actionItems)", "modifiers": "@Override public", "return": "Map<String, ActionItemCustomization>", "signature": "Map<String, ActionItemCustomization> getActionListCustomizations(String principalId,\n            List<ActionItem> actionItems)", "full_signature": "@Override public Map<String, ActionItemCustomization> getActionListCustomizations(String principalId,\n            List<ActionItem> actionItems)", "class_method_signature": "ActionListCustomizationMediatorImpl.getActionListCustomizations(String principalId,\n            List<ActionItem> actionItems)", "testcase": false, "constructor": false}, {"identifier": "getActionListCustomizationApplicationId", "parameters": "(DocumentType docType)", "modifiers": "private", "return": "String", "signature": "String getActionListCustomizationApplicationId(DocumentType docType)", "full_signature": "private String getActionListCustomizationApplicationId(DocumentType docType)", "class_method_signature": "ActionListCustomizationMediatorImpl.getActionListCustomizationApplicationId(DocumentType docType)", "testcase": false, "constructor": false}, {"identifier": "getDocumentTypeService", "parameters": "()", "modifiers": "public", "return": "DocumentTypeService", "signature": "DocumentTypeService getDocumentTypeService()", "full_signature": "public DocumentTypeService getDocumentTypeService()", "class_method_signature": "ActionListCustomizationMediatorImpl.getDocumentTypeService()", "testcase": false, "constructor": false}, {"identifier": "setDocumentTypeService", "parameters": "(DocumentTypeService documentTypeService)", "modifiers": "public", "return": "void", "signature": "void setDocumentTypeService(DocumentTypeService documentTypeService)", "full_signature": "public void setDocumentTypeService(DocumentTypeService documentTypeService)", "class_method_signature": "ActionListCustomizationMediatorImpl.setDocumentTypeService(DocumentTypeService documentTypeService)", "testcase": false, "constructor": false}, {"identifier": "getActionListCustomizationHandlerServiceChooser", "parameters": "()", "modifiers": "public", "return": "ActionListCustomizationHandlerServiceChooser", "signature": "ActionListCustomizationHandlerServiceChooser getActionListCustomizationHandlerServiceChooser()", "full_signature": "public ActionListCustomizationHandlerServiceChooser getActionListCustomizationHandlerServiceChooser()", "class_method_signature": "ActionListCustomizationMediatorImpl.getActionListCustomizationHandlerServiceChooser()", "testcase": false, "constructor": false}, {"identifier": "setActionListCustomizationHandlerServiceChooser", "parameters": "(\n            ActionListCustomizationHandlerServiceChooser actionListCustomizationHandlerServiceChooser)", "modifiers": "public", "return": "void", "signature": "void setActionListCustomizationHandlerServiceChooser(\n            ActionListCustomizationHandlerServiceChooser actionListCustomizationHandlerServiceChooser)", "full_signature": "public void setActionListCustomizationHandlerServiceChooser(\n            ActionListCustomizationHandlerServiceChooser actionListCustomizationHandlerServiceChooser)", "class_method_signature": "ActionListCustomizationMediatorImpl.setActionListCustomizationHandlerServiceChooser(\n            ActionListCustomizationHandlerServiceChooser actionListCustomizationHandlerServiceChooser)", "testcase": false, "constructor": false}], "file": "rice-middleware/impl/src/main/java/org/kuali/rice/kew/impl/actionlist/ActionListCustomizationMediatorImpl.java"}, "focal_method": {"identifier": "getActionListCustomizations", "parameters": "(String principalId,\n            List<ActionItem> actionItems)", "modifiers": "@Override public", "return": "Map<String, ActionItemCustomization>", "body": "@Override\n    public Map<String, ActionItemCustomization> getActionListCustomizations(String principalId,\n            List<ActionItem> actionItems) throws RiceIllegalArgumentException {\n        if (StringUtils.isBlank(principalId)) {\n            throw new RiceIllegalArgumentException(\"invalid principalId: \" + principalId);\n        }\n        if (actionItems == null) {\n            actionItems = Collections.emptyList();\n        }\n\n        // map from action item ID to ActionItemCustomization\n        Map<String, ActionItemCustomization> results = new HashMap<String, ActionItemCustomization>();\n\n        // group each action item by application id that needs to be called for action list customizations (note that\n        // the application id comes from the extension/rule attribute record, most action lists will have doc types\n        // with no custom action list attribute, though the default still needs to be run in this case)\n\n        ListMultimap<String, ActionItem> itemsByApplicationId = ArrayListMultimap.create();\n\n        for (ActionItem actionItem : actionItems) {\n            //DocumentType docType = KewApiServiceLocator.getDocumentTypeService().getDocumentTypeByName(actionItem.getDocName());\n            DocumentType docType = getDocumentTypeService().findByName(actionItem.getDocName());\n            if (docType == null) {\n                LOG.error(String.format(\"Action item %s has an invalid document type name of %s\",\n                        actionItem.getId(), actionItem.getDocName()));\n                // OK to have a null key, this represents the default app id\n                itemsByApplicationId.put(null, actionItem);\n            } else {\n                // OK to have a null key, this represents the default app id\n                itemsByApplicationId.put(getActionListCustomizationApplicationId(docType), actionItem);\n            }\n        }\n\n        // For each application id, pass all action items which might need to be customized (because they have a\n        // document type, which declares an action list attribute, which has an application id declared) to the\n        // appropriate ActionListCustomizationHandlerService endpoint\n\n        for (String applicationId : itemsByApplicationId.keySet()) {\n            ActionListCustomizationHandlerService actionListCustomizationHandler =\n                    getActionListCustomizationHandlerServiceChooser().getByApplicationId(applicationId);\n\n            if (actionListCustomizationHandler == null) {\n                // get the local ActionListCustomizationHandlerService as a fallback\n                actionListCustomizationHandler =\n                        getActionListCustomizationHandlerServiceChooser().getByApplicationId(null);\n            }\n\n            List<ActionItemCustomization> customizations =\n                    actionListCustomizationHandler.customizeActionList(principalId, itemsByApplicationId.get(\n                            applicationId));\n\n\n            // Get back the customized results and reassemble with customized results from all different application\n            // customizations (as well as default customizations)\n            if (customizations != null) for (ActionItemCustomization customization : customizations) {\n                results.put(customization.getActionItemId(), customization);\n            }\n        }\n\n        return results;\n    }", "signature": "Map<String, ActionItemCustomization> getActionListCustomizations(String principalId,\n            List<ActionItem> actionItems)", "full_signature": "@Override public Map<String, ActionItemCustomization> getActionListCustomizations(String principalId,\n            List<ActionItem> actionItems)", "class_method_signature": "ActionListCustomizationMediatorImpl.getActionListCustomizations(String principalId,\n            List<ActionItem> actionItems)", "testcase": false, "constructor": false, "invocations": ["isBlank", "emptyList", "create", "findByName", "getDocumentTypeService", "getDocName", "error", "format", "getId", "getDocName", "put", "put", "getActionListCustomizationApplicationId", "keySet", "getByApplicationId", "getActionListCustomizationHandlerServiceChooser", "getByApplicationId", "getActionListCustomizationHandlerServiceChooser", "customizeActionList", "get", "put", "getActionItemId"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}