{"test_class": {"identifier": "HandlerRoutingReceiverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<Object, IMessageReceiver> mapMock;", "modifier": "private", "type": "Map<Object, IMessageReceiver>", "declarator": "mapMock", "var_name": "mapMock"}, {"original_string": "private IMessageReceiver receiverMock;", "modifier": "private", "type": "IMessageReceiver", "declarator": "receiverMock", "var_name": "receiverMock"}, {"original_string": "private IField handlerFieldMock;", "modifier": "private", "type": "IField", "declarator": "handlerFieldMock", "var_name": "handlerFieldMock"}, {"original_string": "private IMessageProcessor messageProcessorMock;", "modifier": "private", "type": "IMessageProcessor", "declarator": "messageProcessorMock", "var_name": "messageProcessorMock"}, {"original_string": "private IObject argsMock;", "modifier": "private", "type": "IObject", "declarator": "argsMock", "var_name": "argsMock"}, {"original_string": "private IMessageProcessingSequence messageProcessingSequenceMock;", "modifier": "private", "type": "IMessageProcessingSequence", "declarator": "messageProcessingSequenceMock", "var_name": "messageProcessingSequenceMock"}], "file": "CoreFeatures/MessageProcessing/HandlerRoutingReceiver/src/test/java/info/smart_tools/smartactors/message_processing/handler_routing_receiver/HandlerRoutingReceiverTest.java"}, "test_case": {"identifier": "Should_callNestedReceiver_WhenItExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_callNestedReceiver_WhenItExist()\n            throws Exception {\n        IMessageReceiver theReceiverMock = mock(IMessageReceiver.class);\n\n        when(handlerFieldMock.in(same(argsMock))).thenReturn(\"theReceiver\");\n        when(mapMock.get(eq(\"theReceiver\"))).thenReturn(theReceiverMock);\n\n        new HandlerRoutingReceiver(mapMock).receive(messageProcessorMock);\n\n        verify(theReceiverMock).receive(same(messageProcessorMock));\n    }", "signature": "void Should_callNestedReceiver_WhenItExist()", "full_signature": "@Test public void Should_callNestedReceiver_WhenItExist()", "class_method_signature": "HandlerRoutingReceiverTest.Should_callNestedReceiver_WhenItExist()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "in", "same", "thenReturn", "when", "get", "eq", "receive", "receive", "verify", "same"]}, "focal_class": {"identifier": "HandlerRoutingReceiver", "superclass": "", "interfaces": "implements IMessageReceiver", "fields": [{"original_string": "private final Map<Object, IMessageReceiver> handlerReceiversMap;", "modifier": "private final", "type": "Map<Object, IMessageReceiver>", "declarator": "handlerReceiversMap", "var_name": "handlerReceiversMap"}, {"original_string": "private final IField handlerField;", "modifier": "private final", "type": "IField", "declarator": "handlerField", "var_name": "handlerField"}], "methods": [{"identifier": "HandlerRoutingReceiver", "parameters": "(final Map<Object, IMessageReceiver> handlerReceiversMap)", "modifiers": "public", "return": "", "signature": " HandlerRoutingReceiver(final Map<Object, IMessageReceiver> handlerReceiversMap)", "full_signature": "public  HandlerRoutingReceiver(final Map<Object, IMessageReceiver> handlerReceiversMap)", "class_method_signature": "HandlerRoutingReceiver.HandlerRoutingReceiver(final Map<Object, IMessageReceiver> handlerReceiversMap)", "testcase": false, "constructor": true}, {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "HandlerRoutingReceiver.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/HandlerRoutingReceiver/src/main/java/info/smart_tools/smartactors/message_processing/handler_routing_receiver/HandlerRoutingReceiver.java"}, "focal_method": {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void receive(final IMessageProcessor processor)\n            throws MessageReceiveException, AsynchronousOperationException {\n        try {\n            Object handlerId = handlerField.in(processor.getSequence().getCurrentReceiverArguments());\n            IMessageReceiver handlerReceiver = handlerReceiversMap.get(handlerId);\n\n            if (null == handlerReceiver) {\n                throw new MessageReceiveException(\"Handler not found.\");\n            } else {\n                handlerReceiver.receive(processor);\n            }\n        } catch (ReadValueException | InvalidArgumentException e) {\n            throw new MessageReceiveException(\"Error reading handler name.\");\n        }\n    }", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "HandlerRoutingReceiver.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false, "invocations": ["in", "getCurrentReceiverArguments", "getSequence", "get", "receive"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}