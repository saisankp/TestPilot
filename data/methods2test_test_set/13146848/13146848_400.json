{"test_class": {"identifier": "PageImageWriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/PageImageWriterTest.java"}, "test_case": {"identifier": "test_Gray_ICC_png", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_Gray_ICC_png() throws TaskIOException, IOException {\n        PDImageXObject result = PageImageWriter.toPDXImageObject(customNonPdfInput(\"image/icc_profile_gray.png\"));\n        assertThat(result.getColorSpace(), is(PDDeviceRGB.INSTANCE));\n\n        assertFalse(\"Original bytes should not be used; the image should be converted from ICC Gray to RGB\",\n                IOUtils.contentEquals(result.getCOSObject().getFilteredStream(), customNonPdfInput(\"image/icc_profile_gray.png\").getSource()));\n    }", "signature": "void test_Gray_ICC_png()", "full_signature": "@Test public void test_Gray_ICC_png()", "class_method_signature": "PageImageWriterTest.test_Gray_ICC_png()", "testcase": true, "constructor": false, "invocations": ["toPDXImageObject", "customNonPdfInput", "assertThat", "getColorSpace", "is", "assertFalse", "contentEquals", "getFilteredStream", "getCOSObject", "getSource", "customNonPdfInput"]}, "focal_class": {"identifier": "PageImageWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PageImageWriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PageImageWriter.class)", "var_name": "LOG"}, {"original_string": "private PDDocument document;", "modifier": "private", "type": "PDDocument", "declarator": "document", "var_name": "document"}], "methods": [{"identifier": "PageImageWriter", "parameters": "(PDDocument document)", "modifiers": "public", "return": "", "signature": " PageImageWriter(PDDocument document)", "full_signature": "public  PageImageWriter(PDDocument document)", "class_method_signature": "PageImageWriter.PageImageWriter(PDDocument document)", "testcase": false, "constructor": true}, {"identifier": "append", "parameters": "(PDPage page, PDImageXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "modifiers": "public", "return": "void", "signature": "void append(PDPage page, PDImageXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "full_signature": "public void append(PDPage page, PDImageXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "class_method_signature": "PageImageWriter.append(PDPage page, PDImageXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(PDPage page, PDFormXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "modifiers": "public", "return": "void", "signature": "void append(PDPage page, PDFormXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "full_signature": "public void append(PDPage page, PDFormXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "class_method_signature": "PageImageWriter.append(PDPage page, PDFormXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "testcase": false, "constructor": false}, {"identifier": "prepend", "parameters": "(PDPage page, PDImageXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "modifiers": "public", "return": "void", "signature": "void prepend(PDPage page, PDImageXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "full_signature": "public void prepend(PDPage page, PDImageXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "class_method_signature": "PageImageWriter.prepend(PDPage page, PDImageXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "testcase": false, "constructor": false}, {"identifier": "prepend", "parameters": "(PDPage page, PDFormXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "modifiers": "public", "return": "void", "signature": "void prepend(PDPage page, PDFormXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "full_signature": "public void prepend(PDPage page, PDFormXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "class_method_signature": "PageImageWriter.prepend(PDPage page, PDFormXObject image, Point2D position, float width, float height,\n            PDExtendedGraphicsState gs, int rotation)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(PDPage page, PDXObject image, Point2D position, float width, float height,\n            PDPageContentStream.AppendMode mode, PDExtendedGraphicsState gs, boolean resetContext, int rotation)", "modifiers": "private", "return": "void", "signature": "void write(PDPage page, PDXObject image, Point2D position, float width, float height,\n            PDPageContentStream.AppendMode mode, PDExtendedGraphicsState gs, boolean resetContext, int rotation)", "full_signature": "private void write(PDPage page, PDXObject image, Point2D position, float width, float height,\n            PDPageContentStream.AppendMode mode, PDExtendedGraphicsState gs, boolean resetContext, int rotation)", "class_method_signature": "PageImageWriter.write(PDPage page, PDXObject image, Point2D position, float width, float height,\n            PDPageContentStream.AppendMode mode, PDExtendedGraphicsState gs, boolean resetContext, int rotation)", "testcase": false, "constructor": false}, {"identifier": "toPDXImageObject", "parameters": "(Source<?> source)", "modifiers": "public static", "return": "PDImageXObject", "signature": "PDImageXObject toPDXImageObject(Source<?> source)", "full_signature": "public static PDImageXObject toPDXImageObject(Source<?> source)", "class_method_signature": "PageImageWriter.toPDXImageObject(Source<?> source)", "testcase": false, "constructor": false}, {"identifier": "createFromSeekableSource", "parameters": "(SeekableSource original, String name)", "modifiers": "public static", "return": "PDImageXObject", "signature": "PDImageXObject createFromSeekableSource(SeekableSource original, String name)", "full_signature": "public static PDImageXObject createFromSeekableSource(SeekableSource original, String name)", "class_method_signature": "PageImageWriter.createFromSeekableSource(SeekableSource original, String name)", "testcase": false, "constructor": false}, {"identifier": "convertTiffToJpg", "parameters": "(SeekableSource source)", "modifiers": "public static", "return": "SeekableSource", "signature": "SeekableSource convertTiffToJpg(SeekableSource source)", "full_signature": "public static SeekableSource convertTiffToJpg(SeekableSource source)", "class_method_signature": "PageImageWriter.convertTiffToJpg(SeekableSource source)", "testcase": false, "constructor": false}, {"identifier": "convertTiffToPng", "parameters": "(SeekableSource source)", "modifiers": "public static", "return": "SeekableSource", "signature": "SeekableSource convertTiffToPng(SeekableSource source)", "full_signature": "public static SeekableSource convertTiffToPng(SeekableSource source)", "class_method_signature": "PageImageWriter.convertTiffToPng(SeekableSource source)", "testcase": false, "constructor": false}, {"identifier": "getFileType", "parameters": "(SeekableSource source)", "modifiers": "private static", "return": "FileType", "signature": "FileType getFileType(SeekableSource source)", "full_signature": "private static FileType getFileType(SeekableSource source)", "class_method_signature": "PageImageWriter.getFileType(SeekableSource source)", "testcase": false, "constructor": false}, {"identifier": "convertImageTo", "parameters": "(SeekableSource source, String format)", "modifiers": "public static", "return": "SeekableSource", "signature": "SeekableSource convertImageTo(SeekableSource source, String format)", "full_signature": "public static SeekableSource convertImageTo(SeekableSource source, String format)", "class_method_signature": "PageImageWriter.convertImageTo(SeekableSource source, String format)", "testcase": false, "constructor": false}, {"identifier": "convertCMYKJpegIf", "parameters": "(SeekableSource source)", "modifiers": "private static", "return": "Optional<SeekableSource>", "signature": "Optional<SeekableSource> convertCMYKJpegIf(SeekableSource source)", "full_signature": "private static Optional<SeekableSource> convertCMYKJpegIf(SeekableSource source)", "class_method_signature": "PageImageWriter.convertCMYKJpegIf(SeekableSource source)", "testcase": false, "constructor": false}, {"identifier": "convertICCGrayPngIf", "parameters": "(SeekableSource source)", "modifiers": "private static", "return": "Optional<SeekableSource>", "signature": "Optional<SeekableSource> convertICCGrayPngIf(SeekableSource source)", "full_signature": "private static Optional<SeekableSource> convertICCGrayPngIf(SeekableSource source)", "class_method_signature": "PageImageWriter.convertICCGrayPngIf(SeekableSource source)", "testcase": false, "constructor": false}, {"identifier": "toARGB", "parameters": "(BufferedImage i)", "modifiers": "private static", "return": "BufferedImage", "signature": "BufferedImage toARGB(BufferedImage i)", "full_signature": "private static BufferedImage toARGB(BufferedImage i)", "class_method_signature": "PageImageWriter.toARGB(BufferedImage i)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/PageImageWriter.java"}, "focal_method": {"identifier": "toPDXImageObject", "parameters": "(Source<?> source)", "modifiers": "public static", "return": "PDImageXObject", "body": "public static PDImageXObject toPDXImageObject(Source<?> source) throws TaskIOException {\n        try {\n            return createFromSeekableSource(source.getSeekableSource(), source.getName());\n        } catch (Exception e) {\n            throw new TaskIOException(\"An error occurred creating PDImageXObject from file source: \" + source.getName(), e);\n        }\n    }", "signature": "PDImageXObject toPDXImageObject(Source<?> source)", "full_signature": "public static PDImageXObject toPDXImageObject(Source<?> source)", "class_method_signature": "PageImageWriter.toPDXImageObject(Source<?> source)", "testcase": false, "constructor": false, "invocations": ["createFromSeekableSource", "getSeekableSource", "getName", "getName"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}