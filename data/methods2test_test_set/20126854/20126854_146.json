{"test_class": {"identifier": "TypedRangeTest", "superclass": "", "interfaces": "", "fields": [], "file": "feya/libraries/archive_diff/diff.shared/src/test/java/com/google/archivepatcher/shared/TypedRangeTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEquals() {\n    TypedRange<String> range1a = new TypedRange<String>(123, 456, \"hi mom\");\n    Assert.assertEquals(range1a, range1a); // identity case\n    TypedRange<String> range1b = new TypedRange<String>(123, 456, \"hi mom\");\n    Assert.assertEquals(range1a, range1b); // equality case\n    Assert.assertNotEquals(range1a, new TypedRange<String>(123 + 1, 456, \"hi mom\")); // offset\n    Assert.assertNotEquals(range1a, new TypedRange<String>(123, 456 + 1, \"hi mom\")); // length\n    Assert.assertNotEquals(range1a, new TypedRange<String>(123, 456, \"foo\")); // metadata\n    Assert.assertNotEquals(range1a, new TypedRange<String>(123, 456, null)); // no metadata\n    Assert.assertNotEquals(new TypedRange<String>(123, 456, null), range1a); // other code branch\n    Assert.assertEquals(\n        new TypedRange<String>(123, 456, null),\n        new TypedRange<String>(123, 456, null)); // both with null metadata\n    Assert.assertNotEquals(range1a, null); // versus null\n    Assert.assertNotEquals(range1a, \"space channel 5\"); // versus object of different class\n  }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "TypedRangeTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "assertEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals", "assertNotEquals", "assertEquals", "assertNotEquals", "assertNotEquals"]}, "focal_class": {"identifier": "TypedRange", "superclass": "", "interfaces": "implements Comparable<TypedRange<T>>", "fields": [{"original_string": "private final long offset;", "modifier": "private final", "type": "long", "declarator": "offset", "var_name": "offset"}, {"original_string": "private final long length;", "modifier": "private final", "type": "long", "declarator": "length", "var_name": "length"}, {"original_string": "private final T metadata;", "modifier": "private final", "type": "T", "declarator": "metadata", "var_name": "metadata"}], "methods": [{"identifier": "TypedRange", "parameters": "(long offset, long length, T metadata)", "modifiers": "public", "return": "", "signature": " TypedRange(long offset, long length, T metadata)", "full_signature": "public  TypedRange(long offset, long length, T metadata)", "class_method_signature": "TypedRange.TypedRange(long offset, long length, T metadata)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TypedRange.toString()", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getOffset()", "full_signature": "public long getOffset()", "class_method_signature": "TypedRange.getOffset()", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLength()", "full_signature": "public long getLength()", "class_method_signature": "TypedRange.getLength()", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getMetadata()", "full_signature": "public T getMetadata()", "class_method_signature": "TypedRange.getMetadata()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TypedRange.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TypedRange.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(TypedRange<T> other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(TypedRange<T> other)", "full_signature": "@Override public int compareTo(TypedRange<T> other)", "class_method_signature": "TypedRange.compareTo(TypedRange<T> other)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.shared/src/main/java/com/google/archivepatcher/shared/TypedRange.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    TypedRange<?> other = (TypedRange<?>) obj;\n    if (length != other.length) return false;\n    if (metadata == null) {\n      if (other.metadata != null) return false;\n    } else if (!metadata.equals(other.metadata)) return false;\n    if (offset != other.offset) return false;\n    return true;\n  }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TypedRange.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}