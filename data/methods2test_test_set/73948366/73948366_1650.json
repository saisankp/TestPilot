{"test_class": {"identifier": "RoleMemberExpiryNotificationTaskTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zms/src/test/java/com/yahoo/athenz/zms/notification/RoleMemberExpiryNotificationTaskTest.java"}, "test_case": {"identifier": "testSendRoleMemberExpiryRemindersException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSendRoleMemberExpiryRemindersException() {\n\n        DBService dbsvc = Mockito.mock(DBService.class);\n        NotificationService mockNotificationService =  Mockito.mock(NotificationService.class);\n        NotificationServiceFactory testfact = () -> mockNotificationService;\n\n        // we're going to throw an exception when called\n\n        Mockito.when(dbsvc.getRoleExpiryMembers(1)).thenThrow(new IllegalArgumentException());\n        NotificationManager notificationManager = getNotificationManager(dbsvc, testfact);\n\n        RoleMemberExpiryNotificationTask roleMemberExpiryNotificationTask = new RoleMemberExpiryNotificationTask(dbsvc, USER_DOMAIN_PREFIX);\n        // to make sure we're not creating any notifications, we're going\n        // to configure our mock to throw an exception\n\n        Mockito.when(mockNotificationService.notify(any())).thenThrow(new IllegalArgumentException());\n\n        try {\n            roleMemberExpiryNotificationTask.getNotifications();\n            fail();\n        } catch (Exception ex) {\n            assertTrue(ex instanceof IllegalArgumentException);\n        }\n        notificationManager.shutdown();\n    }", "signature": "void testSendRoleMemberExpiryRemindersException()", "full_signature": "@Test public void testSendRoleMemberExpiryRemindersException()", "class_method_signature": "RoleMemberExpiryNotificationTaskTest.testSendRoleMemberExpiryRemindersException()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenThrow", "when", "getRoleExpiryMembers", "getNotificationManager", "thenThrow", "when", "notify", "any", "getNotifications", "fail", "assertTrue", "shutdown"]}, "focal_class": {"identifier": "RoleMemberExpiryNotificationTask", "superclass": "", "interfaces": "implements NotificationTask", "fields": [{"original_string": "private final DBService dbService;", "modifier": "private final", "type": "DBService", "declarator": "dbService", "var_name": "dbService"}, {"original_string": "private final RoleMemberNotificationCommon roleMemberNotificationCommon;", "modifier": "private final", "type": "RoleMemberNotificationCommon", "declarator": "roleMemberNotificationCommon", "var_name": "roleMemberNotificationCommon"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RoleMemberExpiryNotificationTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RoleMemberExpiryNotificationTask.class)", "var_name": "LOGGER"}, {"original_string": "private final static String DESCRIPTION = \"membership expiration reminders\";", "modifier": "private final static", "type": "String", "declarator": "DESCRIPTION = \"membership expiration reminders\"", "var_name": "DESCRIPTION"}, {"original_string": "private final static String NOTIFICATION_TYPE = \"role_membership_expiry\";", "modifier": "private final static", "type": "String", "declarator": "NOTIFICATION_TYPE = \"role_membership_expiry\"", "var_name": "NOTIFICATION_TYPE"}, {"original_string": "private final RoleExpiryDomainNotificationToEmailConverter roleExpiryDomainNotificationToEmailConverter;", "modifier": "private final", "type": "RoleExpiryDomainNotificationToEmailConverter", "declarator": "roleExpiryDomainNotificationToEmailConverter", "var_name": "roleExpiryDomainNotificationToEmailConverter"}, {"original_string": "private final RoleExpiryPrincipalNotificationToEmailConverter roleExpiryPrincipalNotificationToEmailConverter;", "modifier": "private final", "type": "RoleExpiryPrincipalNotificationToEmailConverter", "declarator": "roleExpiryPrincipalNotificationToEmailConverter", "var_name": "roleExpiryPrincipalNotificationToEmailConverter"}], "methods": [{"identifier": "RoleMemberExpiryNotificationTask", "parameters": "(DBService dbService, String userDomainPrefix)", "modifiers": "public", "return": "", "signature": " RoleMemberExpiryNotificationTask(DBService dbService, String userDomainPrefix)", "full_signature": "public  RoleMemberExpiryNotificationTask(DBService dbService, String userDomainPrefix)", "class_method_signature": "RoleMemberExpiryNotificationTask.RoleMemberExpiryNotificationTask(DBService dbService, String userDomainPrefix)", "testcase": false, "constructor": true}, {"identifier": "getNotifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Notification>", "signature": "List<Notification> getNotifications()", "full_signature": "@Override public List<Notification> getNotifications()", "class_method_signature": "RoleMemberExpiryNotificationTask.getNotifications()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "RoleMemberExpiryNotificationTask.getDescription()", "testcase": false, "constructor": false}], "file": "servers/zms/src/main/java/com/yahoo/athenz/zms/notification/RoleMemberExpiryNotificationTask.java"}, "focal_method": {"identifier": "getNotifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Notification>", "body": "@Override\n    public List<Notification> getNotifications() {\n        Map<String, DomainRoleMember> expiryMembers = dbService.getRoleExpiryMembers(1);\n        if (expiryMembers == null || expiryMembers.isEmpty()) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"No expiry members available to send notifications\");\n            }\n            return new ArrayList<>();\n        }\n\n        return roleMemberNotificationCommon.getNotificationDetails(\n                expiryMembers,\n                roleExpiryPrincipalNotificationToEmailConverter,\n                roleExpiryDomainNotificationToEmailConverter,\n                new ExpiryRoleMemberDetailStringer(),\n                NOTIFICATION_TYPE);\n    }", "signature": "List<Notification> getNotifications()", "full_signature": "@Override public List<Notification> getNotifications()", "class_method_signature": "RoleMemberExpiryNotificationTask.getNotifications()", "testcase": false, "constructor": false, "invocations": ["getRoleExpiryMembers", "isEmpty", "isDebugEnabled", "debug", "getNotificationDetails"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}