{"test_class": {"identifier": "SlstrGeoCodingSceneTransformProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SlstrGeoCodingSceneTransformProvider sceneTransformProvider;", "modifier": "private", "type": "SlstrGeoCodingSceneTransformProvider", "declarator": "sceneTransformProvider", "var_name": "sceneTransformProvider"}], "file": "s3tbx-sentinel3-reader/src/test/java/org/esa/s3tbx/dataio/s3/slstr/SlstrGeoCodingSceneTransformProviderTest.java"}, "test_case": {"identifier": "testGetSceneToModelTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSceneToModelTransform() throws TransformException {\n        final Point2D.Double[] ptSrcs = new Point2D.Double[]{new Point2D.Double(2, 2), new Point2D.Double(3.5, 2.5)};\n        final Point2D.Double[] expected = new Point2D.Double[]{new Point2D.Double(0, 0), new Point2D.Double(1.5, 0.5)};\n        for (int i = 0; i < 2; i++) {\n            final Point2D.Double ptDst = new Point2D.Double();\n            final Point2D result = sceneTransformProvider.getSceneToModelTransform().transform(ptSrcs[i], ptDst);\n            assertNotNull(result);\n            assertEquals(ptDst.getX(), result.getX(), 1e-8);\n            assertEquals(ptDst.getY(), result.getY(), 1e-8);\n            assertEquals(expected[i].getX(), ptDst.getX(), 1e-8);\n            assertEquals(expected[i].getY(), ptDst.getY(), 1e-8);\n        }\n    }", "signature": "void testGetSceneToModelTransform()", "full_signature": "@Test public void testGetSceneToModelTransform()", "class_method_signature": "SlstrGeoCodingSceneTransformProviderTest.testGetSceneToModelTransform()", "testcase": true, "constructor": false, "invocations": ["transform", "getSceneToModelTransform", "assertNotNull", "assertEquals", "getX", "getX", "assertEquals", "getY", "getY", "assertEquals", "getX", "getX", "assertEquals", "getY", "getY"]}, "focal_class": {"identifier": "SlstrGeoCodingSceneTransformProvider", "superclass": "", "interfaces": "implements SceneTransformProvider", "fields": [{"original_string": "private final GeoCoding sceneGeoCoding;", "modifier": "private final", "type": "GeoCoding", "declarator": "sceneGeoCoding", "var_name": "sceneGeoCoding"}, {"original_string": "private final GeoCoding modelGeoCoding;", "modifier": "private final", "type": "GeoCoding", "declarator": "modelGeoCoding", "var_name": "modelGeoCoding"}, {"original_string": "private final ModelToSceneTransform modelToSceneTransform;", "modifier": "private final", "type": "ModelToSceneTransform", "declarator": "modelToSceneTransform", "var_name": "modelToSceneTransform"}, {"original_string": "private final SceneToModelTransform sceneToModelTransform;", "modifier": "private final", "type": "SceneToModelTransform", "declarator": "sceneToModelTransform", "var_name": "sceneToModelTransform"}], "methods": [{"identifier": "SlstrGeoCodingSceneTransformProvider", "parameters": "(GeoCoding sceneGeoCoding, GeoCoding modelGeoCoding)", "modifiers": "public", "return": "", "signature": " SlstrGeoCodingSceneTransformProvider(GeoCoding sceneGeoCoding, GeoCoding modelGeoCoding)", "full_signature": "public  SlstrGeoCodingSceneTransformProvider(GeoCoding sceneGeoCoding, GeoCoding modelGeoCoding)", "class_method_signature": "SlstrGeoCodingSceneTransformProvider.SlstrGeoCodingSceneTransformProvider(GeoCoding sceneGeoCoding, GeoCoding modelGeoCoding)", "testcase": false, "constructor": true}, {"identifier": "getModelToSceneTransform", "parameters": "()", "modifiers": "@Override public", "return": "MathTransform2D", "signature": "MathTransform2D getModelToSceneTransform()", "full_signature": "@Override public MathTransform2D getModelToSceneTransform()", "class_method_signature": "SlstrGeoCodingSceneTransformProvider.getModelToSceneTransform()", "testcase": false, "constructor": false}, {"identifier": "getSceneToModelTransform", "parameters": "()", "modifiers": "@Override public", "return": "MathTransform2D", "signature": "MathTransform2D getSceneToModelTransform()", "full_signature": "@Override public MathTransform2D getSceneToModelTransform()", "class_method_signature": "SlstrGeoCodingSceneTransformProvider.getSceneToModelTransform()", "testcase": false, "constructor": false}], "file": "s3tbx-sentinel3-reader/src/main/java/org/esa/s3tbx/dataio/s3/slstr/SlstrGeoCodingSceneTransformProvider.java"}, "focal_method": {"identifier": "getSceneToModelTransform", "parameters": "()", "modifiers": "@Override public", "return": "MathTransform2D", "body": "@Override\n    public MathTransform2D getSceneToModelTransform() {\n        return sceneToModelTransform;\n    }", "signature": "MathTransform2D getSceneToModelTransform()", "full_signature": "@Override public MathTransform2D getSceneToModelTransform()", "class_method_signature": "SlstrGeoCodingSceneTransformProvider.getSceneToModelTransform()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}