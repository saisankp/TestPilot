{"test_class": {"identifier": "StringValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "fx-validation/src/test/java/de/aeoniumsystems/fx/validation/StringValidatorTest.java"}, "test_case": {"identifier": "testValidate", "parameters": "()", "modifiers": "@Test @Disabled(\"TODO\") public", "return": "void", "body": "@Test\n  @Disabled(\"TODO\")\n  public void testValidate() throws Exception {\n    System.out.println(\"validate\");\n    TextInputControl control = null;\n    FXString annotation = null;\n    StringValidator instance = new StringValidator();\n    instance.validate(control, annotation);\n    // TODO review the generated test code and remove the default call to fail.\n    fail(\"The test case is a prototype.\");\n  }", "signature": "void testValidate()", "full_signature": "@Test @Disabled(\"TODO\") public void testValidate()", "class_method_signature": "StringValidatorTest.testValidate()", "testcase": true, "constructor": false, "invocations": ["println", "validate", "fail"]}, "focal_class": {"identifier": "StringValidator", "superclass": "extends FXAbstractValidator<TextInputControl, FXString>", "interfaces": "", "fields": [{"original_string": "private Pattern pattern;", "modifier": "private", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}], "methods": [{"identifier": "StringValidator", "parameters": "()", "modifiers": "public", "return": "", "signature": " StringValidator()", "full_signature": "public  StringValidator()", "class_method_signature": "StringValidator.StringValidator()", "testcase": false, "constructor": true}, {"identifier": "StringValidator", "parameters": "(TextInputControl control, FXString annotation)", "modifiers": "public", "return": "", "signature": " StringValidator(TextInputControl control, FXString annotation)", "full_signature": "public  StringValidator(TextInputControl control, FXString annotation)", "class_method_signature": "StringValidator.StringValidator(TextInputControl control, FXString annotation)", "testcase": false, "constructor": true}, {"identifier": "createRegex", "parameters": "(FXString annotation)", "modifiers": "private", "return": "void", "signature": "void createRegex(FXString annotation)", "full_signature": "private void createRegex(FXString annotation)", "class_method_signature": "StringValidator.createRegex(FXString annotation)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(TextInputControl control, FXString annotation)", "modifiers": "@Override public", "return": "void", "signature": "void validate(TextInputControl control, FXString annotation)", "full_signature": "@Override public void validate(TextInputControl control, FXString annotation)", "class_method_signature": "StringValidator.validate(TextInputControl control, FXString annotation)", "testcase": false, "constructor": false}], "file": "fx-validation/src/main/java/de/aeoniumsystems/fx/validation/StringValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(TextInputControl control, FXString annotation)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void validate(TextInputControl control, FXString annotation) throws ValidationException {\n    // shortcut: do not check if disabled.\n    if (control.isDisabled()) {\n      this.isValid.set(true);\n      return;\n    }\n    if (!control.isVisible()) {\n      this.isValid.set(true);\n      return;\n    }\n\n    boolean valid = true;\n\n    // 1. minLength?\n    if (annotation.minLength() > 0) {\n      valid = valid && control.getText().length() >= annotation.minLength();\n      \n      this.isValid.set(valid);\n      if (!valid) {\n        String msg = annotation.messageMinLength();\n        if (annotation.messageMinLength().contains(\"%d\")) {\n          msg = String.format(annotation.messageMinLength(), annotation.minLength());\n        }\n        throw new ValidationException(msg);\n      }\n    }\n\n    // 2. maxLength?\n    if (annotation.maxLength() > 0) {\n      valid = valid && control.getText().length() <= annotation.maxLength();\n      this.isValid.set(valid);\n      if (!valid) {\n        String msg = annotation.messageMaxLength();\n        if (annotation.messageMaxLength().contains(\"%d\")) {\n          msg = String.format(annotation.messageMaxLength(), annotation.maxLength());\n        }\n        throw new ValidationException(msg);\n      }\n    }\n\n    // 3. pattern?\n    if (annotation.pattern().length() > 0) {\n      // check for necessary lazy initialization: \n      if (this.pattern == null) {\n        this.createRegex(annotation);\n      }\n      \n      valid = valid && this.pattern.matcher(control.getText()).matches();\n      this.isValid.set(valid);\n      if (!valid) {\n        String msg = annotation.messagePattern();\n        throw new ValidationException(msg);\n      }\n    }\n  }", "signature": "void validate(TextInputControl control, FXString annotation)", "full_signature": "@Override public void validate(TextInputControl control, FXString annotation)", "class_method_signature": "StringValidator.validate(TextInputControl control, FXString annotation)", "testcase": false, "constructor": false, "invocations": ["isDisabled", "set", "isVisible", "set", "minLength", "length", "getText", "minLength", "set", "messageMinLength", "contains", "messageMinLength", "format", "messageMinLength", "minLength", "maxLength", "length", "getText", "maxLength", "set", "messageMaxLength", "contains", "messageMaxLength", "format", "messageMaxLength", "maxLength", "length", "pattern", "createRegex", "matches", "matcher", "getText", "set", "messagePattern"]}, "repository": {"repo_id": 24095382, "url": "https://github.com/rrohm/fx-validation", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 8, "size": 942, "license": "licensed"}}