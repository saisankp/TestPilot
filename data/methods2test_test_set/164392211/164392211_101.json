{"test_class": {"identifier": "CsvLoaderTest", "superclass": "extends BaseCsvTest", "interfaces": "", "fields": [], "file": "dflib-csv/src/test/java/com/nhl/dflib/csv/CsvLoaderTest.java"}, "test_case": {"identifier": "testFromFile_DefaultFormat_Excel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromFile_DefaultFormat_Excel() {\n        DataFrame df = new CsvLoader().load(inPath(\"from_excel.csv\"));\n        new DataFrameAsserts(df, \"A\", \"b\", \"C\")\n                .expectHeight(2)\n                .expectRow(0, \"commas,quotes\\\"'\", \"-85.7\", \"3\")\n                .expectRow(1, \"with, commas\", \"5.50001\", \"6\");\n    }", "signature": "void testFromFile_DefaultFormat_Excel()", "full_signature": "@Test public void testFromFile_DefaultFormat_Excel()", "class_method_signature": "CsvLoaderTest.testFromFile_DefaultFormat_Excel()", "testcase": true, "constructor": false, "invocations": ["load", "inPath", "expectRow", "expectRow", "expectHeight"]}, "focal_class": {"identifier": "CsvLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int skipRows;", "modifier": "private", "type": "int", "declarator": "skipRows", "var_name": "skipRows"}, {"original_string": "private Index header;", "modifier": "private", "type": "Index", "declarator": "header", "var_name": "header"}, {"original_string": "private String[] includeColumns;", "modifier": "private", "type": "String[]", "declarator": "includeColumns", "var_name": "includeColumns"}, {"original_string": "private int[] includeColumnPositions;", "modifier": "private", "type": "int[]", "declarator": "includeColumnPositions", "var_name": "includeColumnPositions"}, {"original_string": "private String[] dropColumns;", "modifier": "private", "type": "String[]", "declarator": "dropColumns", "var_name": "dropColumns"}, {"original_string": "private CSVFormat format;", "modifier": "private", "type": "CSVFormat", "declarator": "format", "var_name": "format"}, {"original_string": "private int rowSampleSize;", "modifier": "private", "type": "int", "declarator": "rowSampleSize", "var_name": "rowSampleSize"}, {"original_string": "private Random rowsSampleRandom;", "modifier": "private", "type": "Random", "declarator": "rowsSampleRandom", "var_name": "rowsSampleRandom"}, {"original_string": "private List<ColumnConfig> columns;", "modifier": "private", "type": "List<ColumnConfig>", "declarator": "columns", "var_name": "columns"}, {"original_string": "private List<RowFilterConfig> rowFilters;", "modifier": "private", "type": "List<RowFilterConfig>", "declarator": "rowFilters", "var_name": "rowFilters"}], "methods": [{"identifier": "CsvLoader", "parameters": "()", "modifiers": "public", "return": "", "signature": " CsvLoader()", "full_signature": "public  CsvLoader()", "class_method_signature": "CsvLoader.CsvLoader()", "testcase": false, "constructor": true}, {"identifier": "skipRows", "parameters": "(int n)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader skipRows(int n)", "full_signature": "public CsvLoader skipRows(int n)", "class_method_signature": "CsvLoader.skipRows(int n)", "testcase": false, "constructor": false}, {"identifier": "sampleRows", "parameters": "(int size)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader sampleRows(int size)", "full_signature": "public CsvLoader sampleRows(int size)", "class_method_signature": "CsvLoader.sampleRows(int size)", "testcase": false, "constructor": false}, {"identifier": "sampleRows", "parameters": "(int size, Random random)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader sampleRows(int size, Random random)", "full_signature": "public CsvLoader sampleRows(int size, Random random)", "class_method_signature": "CsvLoader.sampleRows(int size, Random random)", "testcase": false, "constructor": false}, {"identifier": "filterRows", "parameters": "(String columnName, ValuePredicate<V> condition)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader filterRows(String columnName, ValuePredicate<V> condition)", "full_signature": "public CsvLoader filterRows(String columnName, ValuePredicate<V> condition)", "class_method_signature": "CsvLoader.filterRows(String columnName, ValuePredicate<V> condition)", "testcase": false, "constructor": false}, {"identifier": "filterRows", "parameters": "(int columnPos, ValuePredicate<V> condition)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader filterRows(int columnPos, ValuePredicate<V> condition)", "full_signature": "public CsvLoader filterRows(int columnPos, ValuePredicate<V> condition)", "class_method_signature": "CsvLoader.filterRows(int columnPos, ValuePredicate<V> condition)", "testcase": false, "constructor": false}, {"identifier": "columns", "parameters": "(String... columns)", "modifiers": "@Deprecated public", "return": "CsvLoader", "signature": "CsvLoader columns(String... columns)", "full_signature": "@Deprecated public CsvLoader columns(String... columns)", "class_method_signature": "CsvLoader.columns(String... columns)", "testcase": false, "constructor": false}, {"identifier": "header", "parameters": "(String... columns)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader header(String... columns)", "full_signature": "public CsvLoader header(String... columns)", "class_method_signature": "CsvLoader.header(String... columns)", "testcase": false, "constructor": false}, {"identifier": "selectColumns", "parameters": "(String... columns)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader selectColumns(String... columns)", "full_signature": "public CsvLoader selectColumns(String... columns)", "class_method_signature": "CsvLoader.selectColumns(String... columns)", "testcase": false, "constructor": false}, {"identifier": "selectColumns", "parameters": "(int... columns)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader selectColumns(int... columns)", "full_signature": "public CsvLoader selectColumns(int... columns)", "class_method_signature": "CsvLoader.selectColumns(int... columns)", "testcase": false, "constructor": false}, {"identifier": "dropColumns", "parameters": "(String... columns)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader dropColumns(String... columns)", "full_signature": "public CsvLoader dropColumns(String... columns)", "class_method_signature": "CsvLoader.dropColumns(String... columns)", "testcase": false, "constructor": false}, {"identifier": "columnType", "parameters": "(int column, ValueMapper<String, ?> mapper)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader columnType(int column, ValueMapper<String, ?> mapper)", "full_signature": "public CsvLoader columnType(int column, ValueMapper<String, ?> mapper)", "class_method_signature": "CsvLoader.columnType(int column, ValueMapper<String, ?> mapper)", "testcase": false, "constructor": false}, {"identifier": "columnType", "parameters": "(String column, ValueMapper<String, ?> mapper)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader columnType(String column, ValueMapper<String, ?> mapper)", "full_signature": "public CsvLoader columnType(String column, ValueMapper<String, ?> mapper)", "class_method_signature": "CsvLoader.columnType(String column, ValueMapper<String, ?> mapper)", "testcase": false, "constructor": false}, {"identifier": "intColumn", "parameters": "(int column)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader intColumn(int column)", "full_signature": "public CsvLoader intColumn(int column)", "class_method_signature": "CsvLoader.intColumn(int column)", "testcase": false, "constructor": false}, {"identifier": "intColumn", "parameters": "(String column)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader intColumn(String column)", "full_signature": "public CsvLoader intColumn(String column)", "class_method_signature": "CsvLoader.intColumn(String column)", "testcase": false, "constructor": false}, {"identifier": "intColumn", "parameters": "(int column, int forNull)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader intColumn(int column, int forNull)", "full_signature": "public CsvLoader intColumn(int column, int forNull)", "class_method_signature": "CsvLoader.intColumn(int column, int forNull)", "testcase": false, "constructor": false}, {"identifier": "intColumn", "parameters": "(String column, int forNull)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader intColumn(String column, int forNull)", "full_signature": "public CsvLoader intColumn(String column, int forNull)", "class_method_signature": "CsvLoader.intColumn(String column, int forNull)", "testcase": false, "constructor": false}, {"identifier": "longColumn", "parameters": "(int column)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader longColumn(int column)", "full_signature": "public CsvLoader longColumn(int column)", "class_method_signature": "CsvLoader.longColumn(int column)", "testcase": false, "constructor": false}, {"identifier": "longColumn", "parameters": "(String column)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader longColumn(String column)", "full_signature": "public CsvLoader longColumn(String column)", "class_method_signature": "CsvLoader.longColumn(String column)", "testcase": false, "constructor": false}, {"identifier": "longColumn", "parameters": "(int column, long forNull)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader longColumn(int column, long forNull)", "full_signature": "public CsvLoader longColumn(int column, long forNull)", "class_method_signature": "CsvLoader.longColumn(int column, long forNull)", "testcase": false, "constructor": false}, {"identifier": "longColumn", "parameters": "(String column, long forNull)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader longColumn(String column, long forNull)", "full_signature": "public CsvLoader longColumn(String column, long forNull)", "class_method_signature": "CsvLoader.longColumn(String column, long forNull)", "testcase": false, "constructor": false}, {"identifier": "doubleColumn", "parameters": "(int column)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader doubleColumn(int column)", "full_signature": "public CsvLoader doubleColumn(int column)", "class_method_signature": "CsvLoader.doubleColumn(int column)", "testcase": false, "constructor": false}, {"identifier": "doubleColumn", "parameters": "(String column)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader doubleColumn(String column)", "full_signature": "public CsvLoader doubleColumn(String column)", "class_method_signature": "CsvLoader.doubleColumn(String column)", "testcase": false, "constructor": false}, {"identifier": "doubleColumn", "parameters": "(int column, double forNull)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader doubleColumn(int column, double forNull)", "full_signature": "public CsvLoader doubleColumn(int column, double forNull)", "class_method_signature": "CsvLoader.doubleColumn(int column, double forNull)", "testcase": false, "constructor": false}, {"identifier": "doubleColumn", "parameters": "(String column, double forNull)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader doubleColumn(String column, double forNull)", "full_signature": "public CsvLoader doubleColumn(String column, double forNull)", "class_method_signature": "CsvLoader.doubleColumn(String column, double forNull)", "testcase": false, "constructor": false}, {"identifier": "booleanColumn", "parameters": "(int column)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader booleanColumn(int column)", "full_signature": "public CsvLoader booleanColumn(int column)", "class_method_signature": "CsvLoader.booleanColumn(int column)", "testcase": false, "constructor": false}, {"identifier": "booleanColumn", "parameters": "(String column)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader booleanColumn(String column)", "full_signature": "public CsvLoader booleanColumn(String column)", "class_method_signature": "CsvLoader.booleanColumn(String column)", "testcase": false, "constructor": false}, {"identifier": "numColumn", "parameters": "(int column, Class<? extends Number> type)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader numColumn(int column, Class<? extends Number> type)", "full_signature": "public CsvLoader numColumn(int column, Class<? extends Number> type)", "class_method_signature": "CsvLoader.numColumn(int column, Class<? extends Number> type)", "testcase": false, "constructor": false}, {"identifier": "numColumn", "parameters": "(String column, Class<? extends Number> type)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader numColumn(String column, Class<? extends Number> type)", "full_signature": "public CsvLoader numColumn(String column, Class<? extends Number> type)", "class_method_signature": "CsvLoader.numColumn(String column, Class<? extends Number> type)", "testcase": false, "constructor": false}, {"identifier": "numericMapper", "parameters": "(Class<? extends Number> type)", "modifiers": "private", "return": "ValueMapper<String, ?>", "signature": "ValueMapper<String, ?> numericMapper(Class<? extends Number> type)", "full_signature": "private ValueMapper<String, ?> numericMapper(Class<? extends Number> type)", "class_method_signature": "CsvLoader.numericMapper(Class<? extends Number> type)", "testcase": false, "constructor": false}, {"identifier": "dateColumn", "parameters": "(int column)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader dateColumn(int column)", "full_signature": "public CsvLoader dateColumn(int column)", "class_method_signature": "CsvLoader.dateColumn(int column)", "testcase": false, "constructor": false}, {"identifier": "dateColumn", "parameters": "(String column)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader dateColumn(String column)", "full_signature": "public CsvLoader dateColumn(String column)", "class_method_signature": "CsvLoader.dateColumn(String column)", "testcase": false, "constructor": false}, {"identifier": "dateTimeColumn", "parameters": "(int column)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader dateTimeColumn(int column)", "full_signature": "public CsvLoader dateTimeColumn(int column)", "class_method_signature": "CsvLoader.dateTimeColumn(int column)", "testcase": false, "constructor": false}, {"identifier": "dateTimeColumn", "parameters": "(String column)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader dateTimeColumn(String column)", "full_signature": "public CsvLoader dateTimeColumn(String column)", "class_method_signature": "CsvLoader.dateTimeColumn(String column)", "testcase": false, "constructor": false}, {"identifier": "dateColumn", "parameters": "(int column, DateTimeFormatter formatter)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader dateColumn(int column, DateTimeFormatter formatter)", "full_signature": "public CsvLoader dateColumn(int column, DateTimeFormatter formatter)", "class_method_signature": "CsvLoader.dateColumn(int column, DateTimeFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "dateColumn", "parameters": "(String column, DateTimeFormatter formatter)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader dateColumn(String column, DateTimeFormatter formatter)", "full_signature": "public CsvLoader dateColumn(String column, DateTimeFormatter formatter)", "class_method_signature": "CsvLoader.dateColumn(String column, DateTimeFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "dateTimeColumn", "parameters": "(int column, DateTimeFormatter formatter)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader dateTimeColumn(int column, DateTimeFormatter formatter)", "full_signature": "public CsvLoader dateTimeColumn(int column, DateTimeFormatter formatter)", "class_method_signature": "CsvLoader.dateTimeColumn(int column, DateTimeFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "dateTimeColumn", "parameters": "(String column, DateTimeFormatter formatter)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader dateTimeColumn(String column, DateTimeFormatter formatter)", "full_signature": "public CsvLoader dateTimeColumn(String column, DateTimeFormatter formatter)", "class_method_signature": "CsvLoader.dateTimeColumn(String column, DateTimeFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(CSVFormat format)", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader format(CSVFormat format)", "full_signature": "public CsvLoader format(CSVFormat format)", "class_method_signature": "CsvLoader.format(CSVFormat format)", "testcase": false, "constructor": false}, {"identifier": "emptyStringIsNull", "parameters": "()", "modifiers": "public", "return": "CsvLoader", "signature": "CsvLoader emptyStringIsNull()", "full_signature": "public CsvLoader emptyStringIsNull()", "class_method_signature": "CsvLoader.emptyStringIsNull()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(File file)", "modifiers": "public", "return": "DataFrame", "signature": "DataFrame load(File file)", "full_signature": "public DataFrame load(File file)", "class_method_signature": "CsvLoader.load(File file)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(String filePath)", "modifiers": "public", "return": "DataFrame", "signature": "DataFrame load(String filePath)", "full_signature": "public DataFrame load(String filePath)", "class_method_signature": "CsvLoader.load(String filePath)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Reader reader)", "modifiers": "public", "return": "DataFrame", "signature": "DataFrame load(Reader reader)", "full_signature": "public DataFrame load(Reader reader)", "class_method_signature": "CsvLoader.load(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "noSamplingWorker", "parameters": "(ColumnMap columnMap, ColumnConfig[] csvColumns)", "modifiers": "private", "return": "CsvLoaderWorker", "signature": "CsvLoaderWorker noSamplingWorker(ColumnMap columnMap, ColumnConfig[] csvColumns)", "full_signature": "private CsvLoaderWorker noSamplingWorker(ColumnMap columnMap, ColumnConfig[] csvColumns)", "class_method_signature": "CsvLoader.noSamplingWorker(ColumnMap columnMap, ColumnConfig[] csvColumns)", "testcase": false, "constructor": false}, {"identifier": "samplingWorker", "parameters": "(ColumnMap columnMap, ColumnConfig[] csvColumns)", "modifiers": "private", "return": "CsvLoaderWorker", "signature": "CsvLoaderWorker samplingWorker(ColumnMap columnMap, ColumnConfig[] csvColumns)", "full_signature": "private CsvLoaderWorker samplingWorker(ColumnMap columnMap, ColumnConfig[] csvColumns)", "class_method_signature": "CsvLoader.samplingWorker(ColumnMap columnMap, ColumnConfig[] csvColumns)", "testcase": false, "constructor": false}, {"identifier": "createRecordIterator", "parameters": "(Reader reader)", "modifiers": "private", "return": "Iterator<CSVRecord>", "signature": "Iterator<CSVRecord> createRecordIterator(Reader reader)", "full_signature": "private Iterator<CSVRecord> createRecordIterator(Reader reader)", "class_method_signature": "CsvLoader.createRecordIterator(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "createColumnMap", "parameters": "(Iterator<CSVRecord> it)", "modifiers": "private", "return": "ColumnMap", "signature": "ColumnMap createColumnMap(Iterator<CSVRecord> it)", "full_signature": "private ColumnMap createColumnMap(Iterator<CSVRecord> it)", "class_method_signature": "CsvLoader.createColumnMap(Iterator<CSVRecord> it)", "testcase": false, "constructor": false}, {"identifier": "createColumnMap", "parameters": "(Index csvHeader)", "modifiers": "private", "return": "ColumnMap", "signature": "ColumnMap createColumnMap(Index csvHeader)", "full_signature": "private ColumnMap createColumnMap(Index csvHeader)", "class_method_signature": "CsvLoader.createColumnMap(Index csvHeader)", "testcase": false, "constructor": false}, {"identifier": "createCsvHeader", "parameters": "(Iterator<CSVRecord> it)", "modifiers": "private", "return": "Index", "signature": "Index createCsvHeader(Iterator<CSVRecord> it)", "full_signature": "private Index createCsvHeader(Iterator<CSVRecord> it)", "class_method_signature": "CsvLoader.createCsvHeader(Iterator<CSVRecord> it)", "testcase": false, "constructor": false}, {"identifier": "loadCsvHeader", "parameters": "(CSVRecord header)", "modifiers": "private", "return": "Index", "signature": "Index loadCsvHeader(CSVRecord header)", "full_signature": "private Index loadCsvHeader(CSVRecord header)", "class_method_signature": "CsvLoader.loadCsvHeader(CSVRecord header)", "testcase": false, "constructor": false}, {"identifier": "createRowFilter", "parameters": "(Index columns)", "modifiers": "private", "return": "Predicate<CsvCell<?>[]>", "signature": "Predicate<CsvCell<?>[]> createRowFilter(Index columns)", "full_signature": "private Predicate<CsvCell<?>[]> createRowFilter(Index columns)", "class_method_signature": "CsvLoader.createRowFilter(Index columns)", "testcase": false, "constructor": false}], "file": "dflib-csv/src/main/java/com/nhl/dflib/csv/CsvLoader.java"}, "focal_method": {"identifier": "load", "parameters": "(File file)", "modifiers": "public", "return": "DataFrame", "body": "public DataFrame load(File file) {\n        try (Reader r = new FileReader(file)) {\n            return load(r);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error reading file: \" + file, e);\n        }\n    }", "signature": "DataFrame load(File file)", "full_signature": "public DataFrame load(File file)", "class_method_signature": "CsvLoader.load(File file)", "testcase": false, "constructor": false, "invocations": ["load"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}