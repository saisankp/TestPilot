{"test_class": {"identifier": "NotNegativeNumberValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NotNegativeNumberValidator victim = new NotNegativeNumberValidator();", "modifier": "private", "type": "NotNegativeNumberValidator", "declarator": "victim = new NotNegativeNumberValidator()", "var_name": "victim"}], "file": "sejda-model/src/test/java/org/sejda/model/validation/validator/NotNegativeNumberValidatorTest.java"}, "test_case": {"identifier": "testInvalidBigInteger", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidBigInteger() {\n        assertFalse(victim.isValid(new BigInteger(\"-3\"), null));\n    }", "signature": "void testInvalidBigInteger()", "full_signature": "@Test public void testInvalidBigInteger()", "class_method_signature": "NotNegativeNumberValidatorTest.testInvalidBigInteger()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isValid"]}, "focal_class": {"identifier": "NotNegativeNumberValidator", "superclass": "", "interfaces": "implements ConstraintValidator<NotNegative, Number>", "fields": [], "methods": [{"identifier": "initialize", "parameters": "(NotNegative minValue)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(NotNegative minValue)", "full_signature": "@Override public void initialize(NotNegative minValue)", "class_method_signature": "NotNegativeNumberValidator.initialize(NotNegative minValue)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(Number value, ConstraintValidatorContext constraintValidatorContext)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(Number value, ConstraintValidatorContext constraintValidatorContext)", "full_signature": "@Override public boolean isValid(Number value, ConstraintValidatorContext constraintValidatorContext)", "class_method_signature": "NotNegativeNumberValidator.isValid(Number value, ConstraintValidatorContext constraintValidatorContext)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/validation/validator/NotNegativeNumberValidator.java"}, "focal_method": {"identifier": "isValid", "parameters": "(Number value, ConstraintValidatorContext constraintValidatorContext)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isValid(Number value, ConstraintValidatorContext constraintValidatorContext) {\n        if (value == null) {\n            return true;\n        }\n        if (value instanceof BigDecimal) {\n            return ((BigDecimal) value).compareTo(BigDecimal.ZERO) == 1 ||\n                    ((BigDecimal) value).compareTo(BigDecimal.ZERO) == 0;\n        } else if (value instanceof BigInteger) {\n            return ((BigInteger) value).compareTo(BigInteger.ZERO) == 1 ||\n                    ((BigInteger) value).compareTo(BigInteger.ZERO) == 0;\n        } else {\n            return value.floatValue() >= 0;\n        }\n    }", "signature": "boolean isValid(Number value, ConstraintValidatorContext constraintValidatorContext)", "full_signature": "@Override public boolean isValid(Number value, ConstraintValidatorContext constraintValidatorContext)", "class_method_signature": "NotNegativeNumberValidator.isValid(Number value, ConstraintValidatorContext constraintValidatorContext)", "testcase": false, "constructor": false, "invocations": ["compareTo", "compareTo", "compareTo", "compareTo", "floatValue"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}