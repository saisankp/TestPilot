{"test_class": {"identifier": "MappingRestTest", "superclass": "extends MobiRestTestNg", "interfaces": "", "fields": [{"original_string": "private MappingRest rest;", "modifier": "private", "type": "MappingRest", "declarator": "rest", "var_name": "rest"}, {"original_string": "private static final String CATALOG_IRI = \"http://test.org/catalog\";", "modifier": "private static final", "type": "String", "declarator": "CATALOG_IRI = \"http://test.org/catalog\"", "var_name": "CATALOG_IRI"}, {"original_string": "private static final String MAPPING_IRI = \"http://test.org/test\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_IRI = \"http://test.org/test\"", "var_name": "MAPPING_IRI"}, {"original_string": "private static final String MAPPING_RECORD_IRI = \"http://test.org/record\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_RECORD_IRI = \"http://test.org/record\"", "var_name": "MAPPING_RECORD_IRI"}, {"original_string": "private static final String BRANCH_IRI = \"http://test.org/branch\";", "modifier": "private static final", "type": "String", "declarator": "BRANCH_IRI = \"http://test.org/branch\"", "var_name": "BRANCH_IRI"}, {"original_string": "private static final String ERROR_IRI = \"http://test.org/error\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_IRI = \"http://test.org/error\"", "var_name": "ERROR_IRI"}, {"original_string": "private String mappingJsonld;", "modifier": "private", "type": "String", "declarator": "mappingJsonld", "var_name": "mappingJsonld"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private OrmFactory<MappingRecord> mappingRecordFactory;", "modifier": "private", "type": "OrmFactory<MappingRecord>", "declarator": "mappingRecordFactory", "var_name": "mappingRecordFactory"}, {"original_string": "private Model fakeModel;", "modifier": "private", "type": "Model", "declarator": "fakeModel", "var_name": "fakeModel"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private MappingRecord record;", "modifier": "private", "type": "MappingRecord", "declarator": "record", "var_name": "record"}, {"original_string": "private IRI catalogId;", "modifier": "private", "type": "IRI", "declarator": "catalogId", "var_name": "catalogId"}, {"original_string": "private IRI recordId;", "modifier": "private", "type": "IRI", "declarator": "recordId", "var_name": "recordId"}, {"original_string": "@Mock\n    private MappingManager manager;", "modifier": "@Mock\n    private", "type": "MappingManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "@Mock\n    private MappingWrapper mappingWrapper;", "modifier": "@Mock\n    private", "type": "MappingWrapper", "declarator": "mappingWrapper", "var_name": "mappingWrapper"}, {"original_string": "@Mock\n    private MappingId mappingId;", "modifier": "@Mock\n    private", "type": "MappingId", "declarator": "mappingId", "var_name": "mappingId"}, {"original_string": "@Mock\n    private CatalogConfigProvider configProvider;", "modifier": "@Mock\n    private", "type": "CatalogConfigProvider", "declarator": "configProvider", "var_name": "configProvider"}, {"original_string": "@Mock\n    private CatalogManager catalogManager;", "modifier": "@Mock\n    private", "type": "CatalogManager", "declarator": "catalogManager", "var_name": "catalogManager"}, {"original_string": "@Mock\n    private EngineManager engineManager;", "modifier": "@Mock\n    private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "@Mock\n    private SesameTransformer sesameTransformer;", "modifier": "@Mock\n    private", "type": "SesameTransformer", "declarator": "sesameTransformer", "var_name": "sesameTransformer"}], "file": "com.mobi.etl.rest/src/test/java/com/mobi/etl/rest/MappingRestTest.java"}, "test_case": {"identifier": "deleteMappingTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deleteMappingTest() {\n        Response response = target().path(\"mappings/\" + encode(MAPPING_RECORD_IRI)).request().delete();\n        assertEquals(response.getStatus(), 200);\n\n        verify(catalogManager).deleteRecord(user, recordId, MappingRecord.class);\n        verify(engineManager, atLeastOnce()).retrieveUser(anyString());\n    }", "signature": "void deleteMappingTest()", "full_signature": "@Test public void deleteMappingTest()", "class_method_signature": "MappingRestTest.deleteMappingTest()", "testcase": true, "constructor": false, "invocations": ["delete", "request", "path", "target", "encode", "assertEquals", "getStatus", "deleteRecord", "verify", "retrieveUser", "verify", "atLeastOnce", "anyString"]}, "focal_class": {"identifier": "MappingRest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(MappingRest.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MappingRest.class)", "var_name": "logger"}, {"original_string": "private MappingManager manager;", "modifier": "private", "type": "MappingManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private CatalogConfigProvider configProvider;", "modifier": "private", "type": "CatalogConfigProvider", "declarator": "configProvider", "var_name": "configProvider"}, {"original_string": "private CatalogManager catalogManager;", "modifier": "private", "type": "CatalogManager", "declarator": "catalogManager", "var_name": "catalogManager"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private EngineManager engineManager;", "modifier": "private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "private SesameTransformer transformer;", "modifier": "private", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}], "methods": [{"identifier": "setManager", "parameters": "(MappingManager manager)", "modifiers": "@Reference", "return": "void", "signature": "void setManager(MappingManager manager)", "full_signature": "@Reference void setManager(MappingManager manager)", "class_method_signature": "MappingRest.setManager(MappingManager manager)", "testcase": false, "constructor": false}, {"identifier": "setConfigProvider", "parameters": "(CatalogConfigProvider configProvider)", "modifiers": "@Reference", "return": "void", "signature": "void setConfigProvider(CatalogConfigProvider configProvider)", "full_signature": "@Reference void setConfigProvider(CatalogConfigProvider configProvider)", "class_method_signature": "MappingRest.setConfigProvider(CatalogConfigProvider configProvider)", "testcase": false, "constructor": false}, {"identifier": "setCatalogManager", "parameters": "(CatalogManager catalogManager)", "modifiers": "@Reference", "return": "void", "signature": "void setCatalogManager(CatalogManager catalogManager)", "full_signature": "@Reference void setCatalogManager(CatalogManager catalogManager)", "class_method_signature": "MappingRest.setCatalogManager(CatalogManager catalogManager)", "testcase": false, "constructor": false}, {"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference void setVf(ValueFactory vf)", "class_method_signature": "MappingRest.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setEngineManager", "parameters": "(EngineManager engineManager)", "modifiers": "@Reference", "return": "void", "signature": "void setEngineManager(EngineManager engineManager)", "full_signature": "@Reference void setEngineManager(EngineManager engineManager)", "class_method_signature": "MappingRest.setEngineManager(EngineManager engineManager)", "testcase": false, "constructor": false}, {"identifier": "setTransformer", "parameters": "(SesameTransformer transformer)", "modifiers": "@Reference", "return": "void", "signature": "void setTransformer(SesameTransformer transformer)", "full_signature": "@Reference void setTransformer(SesameTransformer transformer)", "class_method_signature": "MappingRest.setTransformer(SesameTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "(@Context ContainerRequestContext context,\n                    @FormDataParam(\"title\") String title,\n                    @FormDataParam(\"description\") String description,\n                    @FormDataParam(\"markdown\") String markdown,\n                    @FormDataParam(\"keywords\") List<FormDataBodyPart> keywords,\n                    @FormDataParam(\"file\") InputStream fileInputStream,\n                    @FormDataParam(\"file\") FormDataContentDisposition fileDetail,\n                    @FormDataParam(\"jsonld\") String jsonld)", "modifiers": "@POST @Consumes(MediaType.MULTIPART_FORM_DATA) @RolesAllowed(\"user\") @ApiOperation(\"Upload mapping sent as form data.\") @ActionAttributes(@AttributeValue(id = com.mobi.ontologies.rdfs.Resource.type_IRI, value = MappingRecord.TYPE)) @ResourceId(\"http://mobi.com/catalog-local\") public", "return": "Response", "signature": "Response upload(@Context ContainerRequestContext context,\n                    @FormDataParam(\"title\") String title,\n                    @FormDataParam(\"description\") String description,\n                    @FormDataParam(\"markdown\") String markdown,\n                    @FormDataParam(\"keywords\") List<FormDataBodyPart> keywords,\n                    @FormDataParam(\"file\") InputStream fileInputStream,\n                    @FormDataParam(\"file\") FormDataContentDisposition fileDetail,\n                    @FormDataParam(\"jsonld\") String jsonld)", "full_signature": "@POST @Consumes(MediaType.MULTIPART_FORM_DATA) @RolesAllowed(\"user\") @ApiOperation(\"Upload mapping sent as form data.\") @ActionAttributes(@AttributeValue(id = com.mobi.ontologies.rdfs.Resource.type_IRI, value = MappingRecord.TYPE)) @ResourceId(\"http://mobi.com/catalog-local\") public Response upload(@Context ContainerRequestContext context,\n                    @FormDataParam(\"title\") String title,\n                    @FormDataParam(\"description\") String description,\n                    @FormDataParam(\"markdown\") String markdown,\n                    @FormDataParam(\"keywords\") List<FormDataBodyPart> keywords,\n                    @FormDataParam(\"file\") InputStream fileInputStream,\n                    @FormDataParam(\"file\") FormDataContentDisposition fileDetail,\n                    @FormDataParam(\"jsonld\") String jsonld)", "class_method_signature": "MappingRest.upload(@Context ContainerRequestContext context,\n                    @FormDataParam(\"title\") String title,\n                    @FormDataParam(\"description\") String description,\n                    @FormDataParam(\"markdown\") String markdown,\n                    @FormDataParam(\"keywords\") List<FormDataBodyPart> keywords,\n                    @FormDataParam(\"file\") InputStream fileInputStream,\n                    @FormDataParam(\"file\") FormDataContentDisposition fileDetail,\n                    @FormDataParam(\"jsonld\") String jsonld)", "testcase": false, "constructor": false}, {"identifier": "getMapping", "parameters": "(@PathParam(\"recordId\") String recordId)", "modifiers": "@GET @Path(\"{recordId}\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieve JSON-LD of an uploaded mapping\") @ResourceId(type = ValueType.PATH, value = \"recordId\") public", "return": "Response", "signature": "Response getMapping(@PathParam(\"recordId\") String recordId)", "full_signature": "@GET @Path(\"{recordId}\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieve JSON-LD of an uploaded mapping\") @ResourceId(type = ValueType.PATH, value = \"recordId\") public Response getMapping(@PathParam(\"recordId\") String recordId)", "class_method_signature": "MappingRest.getMapping(@PathParam(\"recordId\") String recordId)", "testcase": false, "constructor": false}, {"identifier": "downloadMapping", "parameters": "(@PathParam(\"recordId\") String recordId,\n                             @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format)", "modifiers": "@GET @Path(\"{recordId}\") @Produces({MediaType.APPLICATION_OCTET_STREAM, \"text/*\", \"application/*\"}) @RolesAllowed(\"user\") @ApiOperation(\"Download an uploaded mapping\") @ResourceId(type = ValueType.PATH, value = \"recordId\") public", "return": "Response", "signature": "Response downloadMapping(@PathParam(\"recordId\") String recordId,\n                             @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format)", "full_signature": "@GET @Path(\"{recordId}\") @Produces({MediaType.APPLICATION_OCTET_STREAM, \"text/*\", \"application/*\"}) @RolesAllowed(\"user\") @ApiOperation(\"Download an uploaded mapping\") @ResourceId(type = ValueType.PATH, value = \"recordId\") public Response downloadMapping(@PathParam(\"recordId\") String recordId,\n                             @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format)", "class_method_signature": "MappingRest.downloadMapping(@PathParam(\"recordId\") String recordId,\n                             @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format)", "testcase": false, "constructor": false}, {"identifier": "deleteMapping", "parameters": "(@Context ContainerRequestContext context,\n                           @PathParam(\"recordId\") String recordId)", "modifiers": "@DELETE @Path(\"{recordId}\") @RolesAllowed(\"user\") @ApiOperation(\"Delete an uploaded mapping\") @ActionId(Delete.TYPE) @ResourceId(type = ValueType.PATH, value = \"recordId\") public", "return": "Response", "signature": "Response deleteMapping(@Context ContainerRequestContext context,\n                           @PathParam(\"recordId\") String recordId)", "full_signature": "@DELETE @Path(\"{recordId}\") @RolesAllowed(\"user\") @ApiOperation(\"Delete an uploaded mapping\") @ActionId(Delete.TYPE) @ResourceId(type = ValueType.PATH, value = \"recordId\") public Response deleteMapping(@Context ContainerRequestContext context,\n                           @PathParam(\"recordId\") String recordId)", "class_method_signature": "MappingRest.deleteMapping(@Context ContainerRequestContext context,\n                           @PathParam(\"recordId\") String recordId)", "testcase": false, "constructor": false}], "file": "com.mobi.etl.rest/src/main/java/com/mobi/etl/rest/MappingRest.java"}, "focal_method": {"identifier": "deleteMapping", "parameters": "(@Context ContainerRequestContext context,\n                           @PathParam(\"recordId\") String recordId)", "modifiers": "@DELETE @Path(\"{recordId}\") @RolesAllowed(\"user\") @ApiOperation(\"Delete an uploaded mapping\") @ActionId(Delete.TYPE) @ResourceId(type = ValueType.PATH, value = \"recordId\") public", "return": "Response", "body": "@DELETE\n    @Path(\"{recordId}\")\n    @RolesAllowed(\"user\")\n    @ApiOperation(\"Delete an uploaded mapping\")\n    @ActionId(Delete.TYPE)\n    @ResourceId(type = ValueType.PATH, value = \"recordId\")\n    public Response deleteMapping(@Context ContainerRequestContext context,\n                           @PathParam(\"recordId\") String recordId) {\n        try {\n            catalogManager.deleteRecord(getActiveUser(context, engineManager), vf.createIRI(recordId),\n                    MappingRecord.class);\n        } catch (MobiException e) {\n            throw ErrorUtils.sendError(e, e.getMessage(), Response.Status.INTERNAL_SERVER_ERROR);\n        } catch (IllegalArgumentException e) {\n            throw ErrorUtils.sendError(e, e.getMessage(), Response.Status.BAD_REQUEST);\n        }\n        return Response.ok().build();\n    }", "signature": "Response deleteMapping(@Context ContainerRequestContext context,\n                           @PathParam(\"recordId\") String recordId)", "full_signature": "@DELETE @Path(\"{recordId}\") @RolesAllowed(\"user\") @ApiOperation(\"Delete an uploaded mapping\") @ActionId(Delete.TYPE) @ResourceId(type = ValueType.PATH, value = \"recordId\") public Response deleteMapping(@Context ContainerRequestContext context,\n                           @PathParam(\"recordId\") String recordId)", "class_method_signature": "MappingRest.deleteMapping(@Context ContainerRequestContext context,\n                           @PathParam(\"recordId\") String recordId)", "testcase": false, "constructor": false, "invocations": ["deleteRecord", "getActiveUser", "createIRI", "sendError", "getMessage", "sendError", "getMessage", "build", "ok"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}