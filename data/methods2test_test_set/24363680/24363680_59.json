{"test_class": {"identifier": "BlockChainTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BlockChain testNetChain;", "modifier": "private", "type": "BlockChain", "declarator": "testNetChain", "var_name": "testNetChain"}, {"original_string": "private Wallet wallet;", "modifier": "private", "type": "Wallet", "declarator": "wallet", "var_name": "wallet"}, {"original_string": "private BlockChain chain;", "modifier": "private", "type": "BlockChain", "declarator": "chain", "var_name": "chain"}, {"original_string": "private BlockStore blockStore;", "modifier": "private", "type": "BlockStore", "declarator": "blockStore", "var_name": "blockStore"}, {"original_string": "private Address coinbaseTo;", "modifier": "private", "type": "Address", "declarator": "coinbaseTo", "var_name": "coinbaseTo"}, {"original_string": "private NetworkParameters unitTestParams;", "modifier": "private", "type": "NetworkParameters", "declarator": "unitTestParams", "var_name": "unitTestParams"}, {"original_string": "private final StoredBlock[] block = new StoredBlock[1];", "modifier": "private final", "type": "StoredBlock[]", "declarator": "block = new StoredBlock[1]", "var_name": "block"}, {"original_string": "private Transaction coinbaseTransaction;", "modifier": "private", "type": "Transaction", "declarator": "coinbaseTransaction", "var_name": "coinbaseTransaction"}, {"original_string": "private static final TweakableTestNet2Params testNet = new TweakableTestNet2Params();", "modifier": "private static final", "type": "TweakableTestNet2Params", "declarator": "testNet = new TweakableTestNet2Params()", "var_name": "testNet"}], "file": "core/src/test/java/com/google/bitcoin/core/BlockChainTest.java"}, "test_case": {"identifier": "merkleRoots", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void merkleRoots() throws Exception {\n        // Test that merkle root verification takes place when a relevant transaction is present and doesn't when\n        // there isn't any such tx present (as an optimization).\n        Transaction tx1 = createFakeTx(unitTestParams,\n                                       Utils.toNanoCoins(1, 0),\n                                       wallet.getKeys().get(0).toAddress(unitTestParams));\n        Block b1 = createFakeBlock(blockStore, tx1).block;\n        chain.add(b1);\n        resetBlockStore();\n        Sha256Hash hash = b1.getMerkleRoot();\n        b1.setMerkleRoot(Sha256Hash.ZERO_HASH);\n        try {\n            chain.add(b1);\n            fail();\n        } catch (VerificationException e) {\n            // Expected.\n            b1.setMerkleRoot(hash);\n        }\n        // Now add a second block with no relevant transactions and then break it.\n        Transaction tx2 = createFakeTx(unitTestParams, Utils.toNanoCoins(1, 0),\n                                       new ECKey().toAddress(unitTestParams));\n        Block b2 = createFakeBlock(blockStore, tx2).block;\n        b2.getMerkleRoot();\n        b2.setMerkleRoot(Sha256Hash.ZERO_HASH);\n        b2.solve();\n        chain.add(b2);  // Broken block is accepted because its contents don't matter to us.\n    }", "signature": "void merkleRoots()", "full_signature": "@Test public void merkleRoots()", "class_method_signature": "BlockChainTest.merkleRoots()", "testcase": true, "constructor": false, "invocations": ["createFakeTx", "toNanoCoins", "toAddress", "get", "getKeys", "createFakeBlock", "add", "resetBlockStore", "getMerkleRoot", "setMerkleRoot", "add", "fail", "setMerkleRoot", "createFakeTx", "toNanoCoins", "toAddress", "createFakeBlock", "getMerkleRoot", "setMerkleRoot", "solve", "add"]}, "focal_class": {"identifier": "BlockChain", "superclass": "extends AbstractBlockChain", "interfaces": "", "fields": [{"original_string": "protected final BlockStore blockStore;", "modifier": "protected final", "type": "BlockStore", "declarator": "blockStore", "var_name": "blockStore"}], "methods": [{"identifier": "BlockChain", "parameters": "(NetworkParameters params, Wallet wallet, BlockStore blockStore)", "modifiers": "public", "return": "", "signature": " BlockChain(NetworkParameters params, Wallet wallet, BlockStore blockStore)", "full_signature": "public  BlockChain(NetworkParameters params, Wallet wallet, BlockStore blockStore)", "class_method_signature": "BlockChain.BlockChain(NetworkParameters params, Wallet wallet, BlockStore blockStore)", "testcase": false, "constructor": true}, {"identifier": "BlockChain", "parameters": "(NetworkParameters params, BlockStore blockStore)", "modifiers": "public", "return": "", "signature": " BlockChain(NetworkParameters params, BlockStore blockStore)", "full_signature": "public  BlockChain(NetworkParameters params, BlockStore blockStore)", "class_method_signature": "BlockChain.BlockChain(NetworkParameters params, BlockStore blockStore)", "testcase": false, "constructor": true}, {"identifier": "BlockChain", "parameters": "(NetworkParameters params, List<BlockChainListener> wallets,\n                      BlockStore blockStore)", "modifiers": "public", "return": "", "signature": " BlockChain(NetworkParameters params, List<BlockChainListener> wallets,\n                      BlockStore blockStore)", "full_signature": "public  BlockChain(NetworkParameters params, List<BlockChainListener> wallets,\n                      BlockStore blockStore)", "class_method_signature": "BlockChain.BlockChain(NetworkParameters params, List<BlockChainListener> wallets,\n                      BlockStore blockStore)", "testcase": false, "constructor": true}, {"identifier": "addToBlockStore", "parameters": "(StoredBlock storedPrev, Block blockHeader, TransactionOutputChanges txOutChanges)", "modifiers": "@Override protected", "return": "StoredBlock", "signature": "StoredBlock addToBlockStore(StoredBlock storedPrev, Block blockHeader, TransactionOutputChanges txOutChanges)", "full_signature": "@Override protected StoredBlock addToBlockStore(StoredBlock storedPrev, Block blockHeader, TransactionOutputChanges txOutChanges)", "class_method_signature": "BlockChain.addToBlockStore(StoredBlock storedPrev, Block blockHeader, TransactionOutputChanges txOutChanges)", "testcase": false, "constructor": false}, {"identifier": "addToBlockStore", "parameters": "(StoredBlock storedPrev, Block blockHeader)", "modifiers": "@Override protected", "return": "StoredBlock", "signature": "StoredBlock addToBlockStore(StoredBlock storedPrev, Block blockHeader)", "full_signature": "@Override protected StoredBlock addToBlockStore(StoredBlock storedPrev, Block blockHeader)", "class_method_signature": "BlockChain.addToBlockStore(StoredBlock storedPrev, Block blockHeader)", "testcase": false, "constructor": false}, {"identifier": "shouldVerifyTransactions", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean shouldVerifyTransactions()", "full_signature": "@Override protected boolean shouldVerifyTransactions()", "class_method_signature": "BlockChain.shouldVerifyTransactions()", "testcase": false, "constructor": false}, {"identifier": "connectTransactions", "parameters": "(int height, Block block)", "modifiers": "@Override protected", "return": "TransactionOutputChanges", "signature": "TransactionOutputChanges connectTransactions(int height, Block block)", "full_signature": "@Override protected TransactionOutputChanges connectTransactions(int height, Block block)", "class_method_signature": "BlockChain.connectTransactions(int height, Block block)", "testcase": false, "constructor": false}, {"identifier": "connectTransactions", "parameters": "(StoredBlock newBlock)", "modifiers": "@Override protected", "return": "TransactionOutputChanges", "signature": "TransactionOutputChanges connectTransactions(StoredBlock newBlock)", "full_signature": "@Override protected TransactionOutputChanges connectTransactions(StoredBlock newBlock)", "class_method_signature": "BlockChain.connectTransactions(StoredBlock newBlock)", "testcase": false, "constructor": false}, {"identifier": "disconnectTransactions", "parameters": "(StoredBlock block)", "modifiers": "@Override protected", "return": "void", "signature": "void disconnectTransactions(StoredBlock block)", "full_signature": "@Override protected void disconnectTransactions(StoredBlock block)", "class_method_signature": "BlockChain.disconnectTransactions(StoredBlock block)", "testcase": false, "constructor": false}, {"identifier": "doSetChainHead", "parameters": "(StoredBlock chainHead)", "modifiers": "@Override protected", "return": "void", "signature": "void doSetChainHead(StoredBlock chainHead)", "full_signature": "@Override protected void doSetChainHead(StoredBlock chainHead)", "class_method_signature": "BlockChain.doSetChainHead(StoredBlock chainHead)", "testcase": false, "constructor": false}, {"identifier": "notSettingChainHead", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void notSettingChainHead()", "full_signature": "@Override protected void notSettingChainHead()", "class_method_signature": "BlockChain.notSettingChainHead()", "testcase": false, "constructor": false}, {"identifier": "getStoredBlockInCurrentScope", "parameters": "(Sha256Hash hash)", "modifiers": "@Override protected", "return": "StoredBlock", "signature": "StoredBlock getStoredBlockInCurrentScope(Sha256Hash hash)", "full_signature": "@Override protected StoredBlock getStoredBlockInCurrentScope(Sha256Hash hash)", "class_method_signature": "BlockChain.getStoredBlockInCurrentScope(Sha256Hash hash)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(FilteredBlock block)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(FilteredBlock block)", "full_signature": "@Override public boolean add(FilteredBlock block)", "class_method_signature": "BlockChain.add(FilteredBlock block)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/google/bitcoin/core/BlockChain.java"}, "focal_method": {"identifier": "add", "parameters": "(FilteredBlock block)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean add(FilteredBlock block) throws VerificationException, PrunedException {\n        boolean success = super.add(block);\n        if (success) {\n            trackFilteredTransactions(block.getTransactionCount());\n        }\n        return success;\n    }", "signature": "boolean add(FilteredBlock block)", "full_signature": "@Override public boolean add(FilteredBlock block)", "class_method_signature": "BlockChain.add(FilteredBlock block)", "testcase": false, "constructor": false, "invocations": ["add", "trackFilteredTransactions", "getTransactionCount"]}, "repository": {"repo_id": 24363680, "url": "https://github.com/cannabiscoindev/cannabiscoinj", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 10126, "license": "licensed"}}