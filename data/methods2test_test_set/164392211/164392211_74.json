{"test_class": {"identifier": "SeriesTruncatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib/src/test/java/com/nhl/dflib/print/SeriesTruncatorTest.java"}, "test_case": {"identifier": "testCreate_Zero", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate_Zero() {\n        Series<Integer> s = new IntSequenceSeries(0, 10);\n        SeriesTruncator<Integer> tr = SeriesTruncator.create(s, 0);\n\n        assertSame(s, tr.series);\n        assertTrue(tr.truncated);\n        assertEquals(0, tr.head);\n        assertEquals(0, tr.tail);\n    }", "signature": "void testCreate_Zero()", "full_signature": "@Test public void testCreate_Zero()", "class_method_signature": "SeriesTruncatorTest.testCreate_Zero()", "testcase": true, "constructor": false, "invocations": ["create", "assertSame", "assertTrue", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "SeriesTruncator", "superclass": "", "interfaces": "", "fields": [{"original_string": "Series<T> series;", "modifier": "", "type": "Series<T>", "declarator": "series", "var_name": "series"}, {"original_string": "boolean truncated;", "modifier": "", "type": "boolean", "declarator": "truncated", "var_name": "truncated"}, {"original_string": "int head;", "modifier": "", "type": "int", "declarator": "head", "var_name": "head"}, {"original_string": "int tail;", "modifier": "", "type": "int", "declarator": "tail", "var_name": "tail"}], "methods": [{"identifier": "SeriesTruncator", "parameters": "(Series<T> series, boolean truncated, int head, int tail)", "modifiers": "private", "return": "", "signature": " SeriesTruncator(Series<T> series, boolean truncated, int head, int tail)", "full_signature": "private  SeriesTruncator(Series<T> series, boolean truncated, int head, int tail)", "class_method_signature": "SeriesTruncator.SeriesTruncator(Series<T> series, boolean truncated, int head, int tail)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(Series<T> series, int maxSize)", "modifiers": "public static", "return": "SeriesTruncator<T>", "signature": "SeriesTruncator<T> create(Series<T> series, int maxSize)", "full_signature": "public static SeriesTruncator<T> create(Series<T> series, int maxSize)", "class_method_signature": "SeriesTruncator.create(Series<T> series, int maxSize)", "testcase": false, "constructor": false}, {"identifier": "head", "parameters": "()", "modifiers": "public", "return": "Series<T>", "signature": "Series<T> head()", "full_signature": "public Series<T> head()", "class_method_signature": "SeriesTruncator.head()", "testcase": false, "constructor": false}, {"identifier": "tail", "parameters": "()", "modifiers": "public", "return": "Series<T>", "signature": "Series<T> tail()", "full_signature": "public Series<T> tail()", "class_method_signature": "SeriesTruncator.tail()", "testcase": false, "constructor": false}, {"identifier": "isTruncated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTruncated()", "full_signature": "public boolean isTruncated()", "class_method_signature": "SeriesTruncator.isTruncated()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "SeriesTruncator.size()", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/print/SeriesTruncator.java"}, "focal_method": {"identifier": "create", "parameters": "(Series<T> series, int maxSize)", "modifiers": "public static", "return": "SeriesTruncator<T>", "body": "public static <T> SeriesTruncator<T> create(Series<T> series, int maxSize) {\n\n        if (maxSize < 0) {\n            maxSize = 0;\n        }\n\n        int h = series.size();\n        if (h <= maxSize) {\n            return new SeriesTruncator<>(series, false, h, 0);\n        }\n\n        int head = maxSize / 2 + maxSize % 2;\n        int tail = maxSize - head;\n        return new SeriesTruncator<>(series, true, head, tail);\n    }", "signature": "SeriesTruncator<T> create(Series<T> series, int maxSize)", "full_signature": "public static SeriesTruncator<T> create(Series<T> series, int maxSize)", "class_method_signature": "SeriesTruncator.create(Series<T> series, int maxSize)", "testcase": false, "constructor": false, "invocations": ["size"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}