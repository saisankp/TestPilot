{"test_class": {"identifier": "TransformationServiceTest", "superclass": "extends TransformationServiceBaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ContentCache contentCache;", "modifier": "@Autowired\n    private", "type": "ContentCache", "declarator": "contentCache", "var_name": "contentCache"}, {"original_string": "@Autowired\n    private CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Autowired\n    private", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}, {"original_string": "@Autowired\n    private PreparationRepository preparationRepository;", "modifier": "@Autowired\n    private", "type": "PreparationRepository", "declarator": "preparationRepository", "var_name": "preparationRepository"}], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/service/TransformationServiceTest.java"}, "test_case": {"identifier": "getDictionary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDictionary() throws Exception {\n        // when\n        final InputStream dictionary = given() //\n                .when() //\n                .get(\"dictionary\") //\n                .asInputStream();\n\n        // then\n        final ObjectInputStream ois = new ObjectInputStream(new GZIPInputStream(dictionary));\n        final Object object = ois.readObject();\n        assertEquals(TdqCategories.class, object.getClass());\n    }", "signature": "void getDictionary()", "full_signature": "@Test public void getDictionary()", "class_method_signature": "TransformationServiceTest.getDictionary()", "testcase": true, "constructor": false, "invocations": ["asInputStream", "get", "when", "given", "readObject", "assertEquals", "getClass"]}, "focal_class": {"identifier": "TransformationService", "superclass": "extends BaseTransformationService", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TransformationService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TransformationService.class)", "var_name": "LOG"}, {"original_string": "@Autowired\n    private AnalyzerService analyzerService;", "modifier": "@Autowired\n    private", "type": "AnalyzerService", "declarator": "analyzerService", "var_name": "analyzerService"}, {"original_string": "@Autowired\n    private ApplicationContext context;", "modifier": "@Autowired\n    private", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Autowired\n    private ActionRegistry actionRegistry;", "modifier": "@Autowired\n    private", "type": "ActionRegistry", "declarator": "actionRegistry", "var_name": "actionRegistry"}, {"original_string": "@Autowired\n    private AggregationService aggregationService;", "modifier": "@Autowired\n    private", "type": "AggregationService", "declarator": "aggregationService", "var_name": "aggregationService"}, {"original_string": "@Autowired\n    private SuggestionEngine suggestionEngine;", "modifier": "@Autowired\n    private", "type": "SuggestionEngine", "declarator": "suggestionEngine", "var_name": "suggestionEngine"}, {"original_string": "@Autowired\n    private TransformerFactory factory;", "modifier": "@Autowired\n    private", "type": "TransformerFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "@Resource(name = \"serializer#json#executor\")\n    private TaskExecutor executor;", "modifier": "@Resource(name = \"serializer#json#executor\")\n    private", "type": "TaskExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "@Autowired\n    private SecurityProxy securityProxy;", "modifier": "@Autowired\n    private", "type": "SecurityProxy", "declarator": "securityProxy", "var_name": "securityProxy"}, {"original_string": "@Autowired\n    private ActionParser actionParser;", "modifier": "@Autowired\n    private", "type": "ActionParser", "declarator": "actionParser", "var_name": "actionParser"}, {"original_string": "@Autowired\n    private CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Autowired\n    private", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}, {"original_string": "@Autowired\n    private ContentCache contentCache;", "modifier": "@Autowired\n    private", "type": "ContentCache", "declarator": "contentCache", "var_name": "contentCache"}, {"original_string": "@Autowired\n    private BeanConversionService beanConversionService;", "modifier": "@Autowired\n    private", "type": "BeanConversionService", "declarator": "beanConversionService", "var_name": "beanConversionService"}, {"original_string": "@Autowired\n    private StatisticsAdapter statisticsAdapter;", "modifier": "@Autowired\n    private", "type": "StatisticsAdapter", "declarator": "statisticsAdapter", "var_name": "statisticsAdapter"}, {"original_string": "@Autowired\n    private PreparationExportStrategy preparationExportStrategy;", "modifier": "@Autowired\n    private", "type": "PreparationExportStrategy", "declarator": "preparationExportStrategy", "var_name": "preparationExportStrategy"}, {"original_string": "@Autowired\n    private ExportParametersUtil exportParametersUtil;", "modifier": "@Autowired\n    private", "type": "ExportParametersUtil", "declarator": "exportParametersUtil", "var_name": "exportParametersUtil"}, {"original_string": "@Autowired\n    private DatasetClient datasetClient;", "modifier": "@Autowired\n    private", "type": "DatasetClient", "declarator": "datasetClient", "var_name": "datasetClient"}], "methods": [{"identifier": "execute", "parameters": "(@ApiParam(\n                    value = \"Preparation id to apply.\") @RequestBody @Valid @AsyncParameter @AsyncExecutionId final ExportParameters parameters)", "modifiers": "@RequestMapping(value = \"/apply\", method = POST) @ApiOperation(value = \"Run the transformation given the provided export parameters\", notes = \"This operation transforms the dataset or preparation using parameters in export parameters.\") @VolumeMetered @AsyncOperation(conditionalClass = GetPrepContentAsyncCondition.class, // resultUrlGenerator = PreparationGetContentUrlGenerator.class, // executionIdGeneratorClass = ExportParametersExecutionIdGenerator.class // ) public", "return": "StreamingResponseBody", "signature": "StreamingResponseBody execute(@ApiParam(\n                    value = \"Preparation id to apply.\") @RequestBody @Valid @AsyncParameter @AsyncExecutionId final ExportParameters parameters)", "full_signature": "@RequestMapping(value = \"/apply\", method = POST) @ApiOperation(value = \"Run the transformation given the provided export parameters\", notes = \"This operation transforms the dataset or preparation using parameters in export parameters.\") @VolumeMetered @AsyncOperation(conditionalClass = GetPrepContentAsyncCondition.class, // resultUrlGenerator = PreparationGetContentUrlGenerator.class, // executionIdGeneratorClass = ExportParametersExecutionIdGenerator.class // ) public StreamingResponseBody execute(@ApiParam(\n                    value = \"Preparation id to apply.\") @RequestBody @Valid @AsyncParameter @AsyncExecutionId final ExportParameters parameters)", "class_method_signature": "TransformationService.execute(@ApiParam(\n                    value = \"Preparation id to apply.\") @RequestBody @Valid @AsyncParameter @AsyncExecutionId final ExportParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "executeMetadata", "parameters": "(@PathVariable(\"preparationId\") @AsyncParameter String preparationId,\n            @PathVariable(\"stepId\") @AsyncParameter String stepId)", "modifiers": "@RequestMapping(value = \"/apply/preparation/{preparationId}/{stepId}/metadata\", method = GET) @ApiOperation(value = \"Run the transformation given the provided export parameters\", notes = \"This operation transforms the dataset or preparation using parameters in export parameters.\") @VolumeMetered @AsyncOperation(conditionalClass = GetPrepMetadataAsyncCondition.class, // resultUrlGenerator = PrepMetadataGetContentUrlGenerator.class, // executionIdGeneratorClass = PrepMetadataExecutionIdGenerator.class) public", "return": "DataSetMetadata", "signature": "DataSetMetadata executeMetadata(@PathVariable(\"preparationId\") @AsyncParameter String preparationId,\n            @PathVariable(\"stepId\") @AsyncParameter String stepId)", "full_signature": "@RequestMapping(value = \"/apply/preparation/{preparationId}/{stepId}/metadata\", method = GET) @ApiOperation(value = \"Run the transformation given the provided export parameters\", notes = \"This operation transforms the dataset or preparation using parameters in export parameters.\") @VolumeMetered @AsyncOperation(conditionalClass = GetPrepMetadataAsyncCondition.class, // resultUrlGenerator = PrepMetadataGetContentUrlGenerator.class, // executionIdGeneratorClass = PrepMetadataExecutionIdGenerator.class) public DataSetMetadata executeMetadata(@PathVariable(\"preparationId\") @AsyncParameter String preparationId,\n            @PathVariable(\"stepId\") @AsyncParameter String stepId)", "class_method_signature": "TransformationService.executeMetadata(@PathVariable(\"preparationId\") @AsyncParameter String preparationId,\n            @PathVariable(\"stepId\") @AsyncParameter String stepId)", "testcase": false, "constructor": false}, {"identifier": "applyOnDataset", "parameters": "(@ApiParam(value = \"Preparation id to apply.\") @PathVariable(value = \"preparationId\") final String preparationId,\n                                                @ApiParam(value = \"DataSet id to transform.\") @PathVariable(value = \"datasetId\") final String datasetId,\n                                                @ApiParam(value = \"Output format\") @PathVariable(\"format\") final String formatName,\n                                                @ApiParam(value = \"Step id\", defaultValue = \"head\") @RequestParam(value = \"stepId\", required = false, defaultValue = \"head\") final String stepId,\n                                                @ApiParam(value = \"Name of the transformation\", defaultValue = \"untitled\") @RequestParam(value = \"name\", required = false, defaultValue = \"untitled\") final String name,\n                                                @RequestParam final Map<String, String> exportParams)", "modifiers": "@RequestMapping(value = \"/apply/preparation/{preparationId}/dataset/{datasetId}/{format}\", method = GET) @ApiOperation(value = \"Transform the given preparation to the given format on the given dataset id\", notes = \"This operation transforms the dataset using preparation id in the provided format.\") @VolumeMetered public", "return": "StreamingResponseBody", "signature": "StreamingResponseBody applyOnDataset(@ApiParam(value = \"Preparation id to apply.\") @PathVariable(value = \"preparationId\") final String preparationId,\n                                                @ApiParam(value = \"DataSet id to transform.\") @PathVariable(value = \"datasetId\") final String datasetId,\n                                                @ApiParam(value = \"Output format\") @PathVariable(\"format\") final String formatName,\n                                                @ApiParam(value = \"Step id\", defaultValue = \"head\") @RequestParam(value = \"stepId\", required = false, defaultValue = \"head\") final String stepId,\n                                                @ApiParam(value = \"Name of the transformation\", defaultValue = \"untitled\") @RequestParam(value = \"name\", required = false, defaultValue = \"untitled\") final String name,\n                                                @RequestParam final Map<String, String> exportParams)", "full_signature": "@RequestMapping(value = \"/apply/preparation/{preparationId}/dataset/{datasetId}/{format}\", method = GET) @ApiOperation(value = \"Transform the given preparation to the given format on the given dataset id\", notes = \"This operation transforms the dataset using preparation id in the provided format.\") @VolumeMetered public StreamingResponseBody applyOnDataset(@ApiParam(value = \"Preparation id to apply.\") @PathVariable(value = \"preparationId\") final String preparationId,\n                                                @ApiParam(value = \"DataSet id to transform.\") @PathVariable(value = \"datasetId\") final String datasetId,\n                                                @ApiParam(value = \"Output format\") @PathVariable(\"format\") final String formatName,\n                                                @ApiParam(value = \"Step id\", defaultValue = \"head\") @RequestParam(value = \"stepId\", required = false, defaultValue = \"head\") final String stepId,\n                                                @ApiParam(value = \"Name of the transformation\", defaultValue = \"untitled\") @RequestParam(value = \"name\", required = false, defaultValue = \"untitled\") final String name,\n                                                @RequestParam final Map<String, String> exportParams)", "class_method_signature": "TransformationService.applyOnDataset(@ApiParam(value = \"Preparation id to apply.\") @PathVariable(value = \"preparationId\") final String preparationId,\n                                                @ApiParam(value = \"DataSet id to transform.\") @PathVariable(value = \"datasetId\") final String datasetId,\n                                                @ApiParam(value = \"Output format\") @PathVariable(\"format\") final String formatName,\n                                                @ApiParam(value = \"Step id\", defaultValue = \"head\") @RequestParam(value = \"stepId\", required = false, defaultValue = \"head\") final String stepId,\n                                                @ApiParam(value = \"Name of the transformation\", defaultValue = \"untitled\") @RequestParam(value = \"name\", required = false, defaultValue = \"untitled\") final String name,\n                                                @RequestParam final Map<String, String> exportParams)", "testcase": false, "constructor": false}, {"identifier": "exportDataset", "parameters": "(\n            @ApiParam(value = \"DataSet id to transform.\") @PathVariable(value = \"datasetId\") final String datasetId,\n            @ApiParam(value = \"Output format\") @PathVariable(\"format\") final String formatName,\n            @ApiParam(value = \"Name of the transformation\", defaultValue = \"untitled\") @RequestParam(value = \"name\", required = false, defaultValue = \"untitled\") final String name,\n            @RequestParam final Map<String, String> exportParams)", "modifiers": "@RequestMapping(value = \"/export/dataset/{datasetId}/{format}\", method = GET) @ApiOperation(value = \"Export the given dataset\") @Timed public", "return": "StreamingResponseBody", "signature": "StreamingResponseBody exportDataset(\n            @ApiParam(value = \"DataSet id to transform.\") @PathVariable(value = \"datasetId\") final String datasetId,\n            @ApiParam(value = \"Output format\") @PathVariable(\"format\") final String formatName,\n            @ApiParam(value = \"Name of the transformation\", defaultValue = \"untitled\") @RequestParam(value = \"name\", required = false, defaultValue = \"untitled\") final String name,\n            @RequestParam final Map<String, String> exportParams)", "full_signature": "@RequestMapping(value = \"/export/dataset/{datasetId}/{format}\", method = GET) @ApiOperation(value = \"Export the given dataset\") @Timed public StreamingResponseBody exportDataset(\n            @ApiParam(value = \"DataSet id to transform.\") @PathVariable(value = \"datasetId\") final String datasetId,\n            @ApiParam(value = \"Output format\") @PathVariable(\"format\") final String formatName,\n            @ApiParam(value = \"Name of the transformation\", defaultValue = \"untitled\") @RequestParam(value = \"name\", required = false, defaultValue = \"untitled\") final String name,\n            @RequestParam final Map<String, String> exportParams)", "class_method_signature": "TransformationService.exportDataset(\n            @ApiParam(value = \"DataSet id to transform.\") @PathVariable(value = \"datasetId\") final String datasetId,\n            @ApiParam(value = \"Output format\") @PathVariable(\"format\") final String formatName,\n            @ApiParam(value = \"Name of the transformation\", defaultValue = \"untitled\") @RequestParam(value = \"name\", required = false, defaultValue = \"untitled\") final String name,\n            @RequestParam final Map<String, String> exportParams)", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(@ApiParam(value = \"The aggregation rawParams in json\") @RequestBody final String rawParams)", "modifiers": "@RequestMapping(value = \"/aggregate\", method = POST, consumes = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Compute the aggregation according to the request body rawParams\", consumes = APPLICATION_JSON_VALUE) @VolumeMetered public", "return": "AggregationResult", "signature": "AggregationResult aggregate(@ApiParam(value = \"The aggregation rawParams in json\") @RequestBody final String rawParams)", "full_signature": "@RequestMapping(value = \"/aggregate\", method = POST, consumes = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Compute the aggregation according to the request body rawParams\", consumes = APPLICATION_JSON_VALUE) @VolumeMetered public AggregationResult aggregate(@ApiParam(value = \"The aggregation rawParams in json\") @RequestBody final String rawParams)", "class_method_signature": "TransformationService.aggregate(@ApiParam(value = \"The aggregation rawParams in json\") @RequestBody final String rawParams)", "testcase": false, "constructor": false}, {"identifier": "getContentToAggregate", "parameters": "(AggregationParameters parameters)", "modifiers": "private", "return": "InputStream", "signature": "InputStream getContentToAggregate(AggregationParameters parameters)", "full_signature": "private InputStream getContentToAggregate(AggregationParameters parameters)", "class_method_signature": "TransformationService.getContentToAggregate(AggregationParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "transformPreview", "parameters": "(@ApiParam(name = \"body\", value = \"Preview parameters.\") @RequestBody final PreviewParameters previewParameters,\n                                 final OutputStream output)", "modifiers": "@RequestMapping(value = \"/transform/preview\", method = POST, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Preview the transformation on input data\", notes = \"This operation returns the input data diff between the old and the new transformation actions\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE) @VolumeMetered public", "return": "void", "signature": "void transformPreview(@ApiParam(name = \"body\", value = \"Preview parameters.\") @RequestBody final PreviewParameters previewParameters,\n                                 final OutputStream output)", "full_signature": "@RequestMapping(value = \"/transform/preview\", method = POST, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Preview the transformation on input data\", notes = \"This operation returns the input data diff between the old and the new transformation actions\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE) @VolumeMetered public void transformPreview(@ApiParam(name = \"body\", value = \"Preview parameters.\") @RequestBody final PreviewParameters previewParameters,\n                                 final OutputStream output)", "class_method_signature": "TransformationService.transformPreview(@ApiParam(name = \"body\", value = \"Preview parameters.\") @RequestBody final PreviewParameters previewParameters,\n                                 final OutputStream output)", "testcase": false, "constructor": false}, {"identifier": "executeDiffOnSample", "parameters": "(final PreviewParameters previewParameters, final OutputStream output)", "modifiers": "private", "return": "void", "signature": "void executeDiffOnSample(final PreviewParameters previewParameters, final OutputStream output)", "full_signature": "private void executeDiffOnSample(final PreviewParameters previewParameters, final OutputStream output)", "class_method_signature": "TransformationService.executeDiffOnSample(final PreviewParameters previewParameters, final OutputStream output)", "testcase": false, "constructor": false}, {"identifier": "executeDiffOnDataset", "parameters": "(final PreviewParameters previewParameters, final OutputStream output)", "modifiers": "private", "return": "void", "signature": "void executeDiffOnDataset(final PreviewParameters previewParameters, final OutputStream output)", "full_signature": "private void executeDiffOnDataset(final PreviewParameters previewParameters, final OutputStream output)", "class_method_signature": "TransformationService.executeDiffOnDataset(final PreviewParameters previewParameters, final OutputStream output)", "testcase": false, "constructor": false}, {"identifier": "shouldApplyDiffToSampleSource", "parameters": "(final PreviewParameters previewParameters)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldApplyDiffToSampleSource(final PreviewParameters previewParameters)", "full_signature": "private boolean shouldApplyDiffToSampleSource(final PreviewParameters previewParameters)", "class_method_signature": "TransformationService.shouldApplyDiffToSampleSource(final PreviewParameters previewParameters)", "testcase": false, "constructor": false}, {"identifier": "getCreatedColumns", "parameters": "(@ApiParam(name = \"body\", value = \"Preview parameters list in json.\") @RequestBody final List<PreviewParameters> previewParameters)", "modifiers": "@RequestMapping(value = \"/transform/diff/metadata\", method = POST) @ApiOperation(value = \"Given a list of requested preview, it applies the diff to each one. A diff is between 2 sets of actions and return the info like created columns ids\", notes = \"This operation returns the diff metadata\", consumes = APPLICATION_JSON_VALUE) @VolumeMetered public", "return": "Stream<StepDiff>", "signature": "Stream<StepDiff> getCreatedColumns(@ApiParam(name = \"body\", value = \"Preview parameters list in json.\") @RequestBody final List<PreviewParameters> previewParameters)", "full_signature": "@RequestMapping(value = \"/transform/diff/metadata\", method = POST) @ApiOperation(value = \"Given a list of requested preview, it applies the diff to each one. A diff is between 2 sets of actions and return the info like created columns ids\", notes = \"This operation returns the diff metadata\", consumes = APPLICATION_JSON_VALUE) @VolumeMetered public Stream<StepDiff> getCreatedColumns(@ApiParam(name = \"body\", value = \"Preview parameters list in json.\") @RequestBody final List<PreviewParameters> previewParameters)", "class_method_signature": "TransformationService.getCreatedColumns(@ApiParam(name = \"body\", value = \"Preview parameters list in json.\") @RequestBody final List<PreviewParameters> previewParameters)", "testcase": false, "constructor": false}, {"identifier": "evictCache", "parameters": "(@ApiParam(value = \"Preparation Id.\") @PathVariable(value = \"preparationId\") final String preparationId)", "modifiers": "@RequestMapping(value = \"/preparation/{preparationId}/cache\", method = DELETE) @ApiOperation(value = \"Evict content entries related to the preparation\", notes = \"This operation remove content entries related to the preparation.\") @VolumeMetered public", "return": "void", "signature": "void evictCache(@ApiParam(value = \"Preparation Id.\") @PathVariable(value = \"preparationId\") final String preparationId)", "full_signature": "@RequestMapping(value = \"/preparation/{preparationId}/cache\", method = DELETE) @ApiOperation(value = \"Evict content entries related to the preparation\", notes = \"This operation remove content entries related to the preparation.\") @VolumeMetered public void evictCache(@ApiParam(value = \"Preparation Id.\") @PathVariable(value = \"preparationId\") final String preparationId)", "class_method_signature": "TransformationService.evictCache(@ApiParam(value = \"Preparation Id.\") @PathVariable(value = \"preparationId\") final String preparationId)", "testcase": false, "constructor": false}, {"identifier": "evictCache", "parameters": "(final String preparationId, final ExportParameters.SourceType sourceType)", "modifiers": "private", "return": "void", "signature": "void evictCache(final String preparationId, final ExportParameters.SourceType sourceType)", "full_signature": "private void evictCache(final String preparationId, final ExportParameters.SourceType sourceType)", "class_method_signature": "TransformationService.evictCache(final String preparationId, final ExportParameters.SourceType sourceType)", "testcase": false, "constructor": false}, {"identifier": "getCreatedColumns", "parameters": "(final PreviewParameters previewParameters)", "modifiers": "private", "return": "StepDiff", "signature": "StepDiff getCreatedColumns(final PreviewParameters previewParameters)", "full_signature": "private StepDiff getCreatedColumns(final PreviewParameters previewParameters)", "class_method_signature": "TransformationService.getCreatedColumns(final PreviewParameters previewParameters)", "testcase": false, "constructor": false}, {"identifier": "applyActionsOnMetadata", "parameters": "(RowMetadata metadata, String actionsAsJson)", "modifiers": "private", "return": "void", "signature": "void applyActionsOnMetadata(RowMetadata metadata, String actionsAsJson)", "full_signature": "private void applyActionsOnMetadata(RowMetadata metadata, String actionsAsJson)", "class_method_signature": "TransformationService.applyActionsOnMetadata(RowMetadata metadata, String actionsAsJson)", "testcase": false, "constructor": false}, {"identifier": "executePreview", "parameters": "(final String actions, final String referenceActions, final String indexes, final DataSet dataSet,\n                                final OutputStream output)", "modifiers": "private", "return": "void", "signature": "void executePreview(final String actions, final String referenceActions, final String indexes, final DataSet dataSet,\n                                final OutputStream output)", "full_signature": "private void executePreview(final String actions, final String referenceActions, final String indexes, final DataSet dataSet,\n                                final OutputStream output)", "class_method_signature": "TransformationService.executePreview(final String actions, final String referenceActions, final String indexes, final DataSet dataSet,\n                                final OutputStream output)", "testcase": false, "constructor": false}, {"identifier": "dynamicParams", "parameters": "(\n            @ApiParam(value = \"Action name.\") @PathVariable(\"action\") final String action,\n            @ApiParam(value = \"The column id.\") @RequestParam(value = \"columnId\") final String columnId,\n            @ApiParam(value = \"Data set content as JSON\") final InputStream content)", "modifiers": "@RequestMapping(value = \"/transform/suggest/{action}/params\", method = POST) @ApiOperation(value = \"Get the transformation dynamic parameters\", notes = \"Returns the transformation parameters.\") @Timed public", "return": "GenericParameter", "signature": "GenericParameter dynamicParams(\n            @ApiParam(value = \"Action name.\") @PathVariable(\"action\") final String action,\n            @ApiParam(value = \"The column id.\") @RequestParam(value = \"columnId\") final String columnId,\n            @ApiParam(value = \"Data set content as JSON\") final InputStream content)", "full_signature": "@RequestMapping(value = \"/transform/suggest/{action}/params\", method = POST) @ApiOperation(value = \"Get the transformation dynamic parameters\", notes = \"Returns the transformation parameters.\") @Timed public GenericParameter dynamicParams(\n            @ApiParam(value = \"Action name.\") @PathVariable(\"action\") final String action,\n            @ApiParam(value = \"The column id.\") @RequestParam(value = \"columnId\") final String columnId,\n            @ApiParam(value = \"Data set content as JSON\") final InputStream content)", "class_method_signature": "TransformationService.dynamicParams(\n            @ApiParam(value = \"Action name.\") @PathVariable(\"action\") final String action,\n            @ApiParam(value = \"The column id.\") @RequestParam(value = \"columnId\") final String columnId,\n            @ApiParam(value = \"Data set content as JSON\") final InputStream content)", "testcase": false, "constructor": false}, {"identifier": "columnActions", "parameters": "(@RequestBody(required = false) ColumnMetadata column)", "modifiers": "@RequestMapping(value = \"/actions/column\", method = POST) @ApiOperation(value = \"Return all actions for a column (regardless of column metadata)\", notes = \"This operation returns an array of actions.\") @ResponseBody public", "return": "Stream<ActionForm>", "signature": "Stream<ActionForm> columnActions(@RequestBody(required = false) ColumnMetadata column)", "full_signature": "@RequestMapping(value = \"/actions/column\", method = POST) @ApiOperation(value = \"Return all actions for a column (regardless of column metadata)\", notes = \"This operation returns an array of actions.\") @ResponseBody public Stream<ActionForm> columnActions(@RequestBody(required = false) ColumnMetadata column)", "class_method_signature": "TransformationService.columnActions(@RequestBody(required = false) ColumnMetadata column)", "testcase": false, "constructor": false}, {"identifier": "suggest", "parameters": "(@RequestBody(required = false) ColumnMetadata column, //\n            @ApiParam(value = \"How many actions should be suggested at most\", defaultValue = \"5\") @RequestParam(\n                    value = \"limit\", defaultValue = \"5\", required = false) int limit)", "modifiers": "@RequestMapping(value = \"/suggest/column\", method = POST) @ApiOperation(value = \"Suggest actions for a given column metadata\", notes = \"This operation returns an array of suggested actions in decreasing order of importance.\") @ResponseBody public", "return": "Stream<ActionForm>", "signature": "Stream<ActionForm> suggest(@RequestBody(required = false) ColumnMetadata column, //\n            @ApiParam(value = \"How many actions should be suggested at most\", defaultValue = \"5\") @RequestParam(\n                    value = \"limit\", defaultValue = \"5\", required = false) int limit)", "full_signature": "@RequestMapping(value = \"/suggest/column\", method = POST) @ApiOperation(value = \"Suggest actions for a given column metadata\", notes = \"This operation returns an array of suggested actions in decreasing order of importance.\") @ResponseBody public Stream<ActionForm> suggest(@RequestBody(required = false) ColumnMetadata column, //\n            @ApiParam(value = \"How many actions should be suggested at most\", defaultValue = \"5\") @RequestParam(\n                    value = \"limit\", defaultValue = \"5\", required = false) int limit)", "class_method_signature": "TransformationService.suggest(@RequestBody(required = false) ColumnMetadata column, //\n            @ApiParam(value = \"How many actions should be suggested at most\", defaultValue = \"5\") @RequestParam(\n                    value = \"limit\", defaultValue = \"5\", required = false) int limit)", "testcase": false, "constructor": false}, {"identifier": "lineActions", "parameters": "()", "modifiers": "@RequestMapping(value = \"/actions/line\", method = GET) @ApiOperation(value = \"Return all actions on lines\", notes = \"This operation returns an array of actions.\") @ResponseBody public", "return": "Stream<ActionForm>", "signature": "Stream<ActionForm> lineActions()", "full_signature": "@RequestMapping(value = \"/actions/line\", method = GET) @ApiOperation(value = \"Return all actions on lines\", notes = \"This operation returns an array of actions.\") @ResponseBody public Stream<ActionForm> lineActions()", "class_method_signature": "TransformationService.lineActions()", "testcase": false, "constructor": false}, {"identifier": "datasetActions", "parameters": "()", "modifiers": "@RequestMapping(value = \"/actions/dataset\", method = GET) @ApiOperation(value = \"Return all actions on the whole dataset.\", notes = \"This operation returns an array of actions.\") @ResponseBody public", "return": "Stream<ActionForm>", "signature": "Stream<ActionForm> datasetActions()", "full_signature": "@RequestMapping(value = \"/actions/dataset\", method = GET) @ApiOperation(value = \"Return all actions on the whole dataset.\", notes = \"This operation returns an array of actions.\") @ResponseBody public Stream<ActionForm> datasetActions()", "class_method_signature": "TransformationService.datasetActions()", "testcase": false, "constructor": false}, {"identifier": "multiColumnsActions", "parameters": "()", "modifiers": "@RequestMapping(value = \"/actions/multi_columns\", method = GET) @ApiOperation(value = \"Return all actions on the selected columns.\", notes = \"This operation returns an array of actions.\") @ResponseBody public", "return": "Stream<ActionForm>", "signature": "Stream<ActionForm> multiColumnsActions()", "full_signature": "@RequestMapping(value = \"/actions/multi_columns\", method = GET) @ApiOperation(value = \"Return all actions on the selected columns.\", notes = \"This operation returns an array of actions.\") @ResponseBody public Stream<ActionForm> multiColumnsActions()", "class_method_signature": "TransformationService.multiColumnsActions()", "testcase": false, "constructor": false}, {"identifier": "listErrors", "parameters": "()", "modifiers": "@RequestMapping(value = \"/transform/errors\", method = RequestMethod.GET) @ApiOperation(value = \"Get all transformation related error codes.\", notes = \"Returns the list of all transformation related error codes.\") @Timed public", "return": "Iterable<JsonErrorCodeDescription>", "signature": "Iterable<JsonErrorCodeDescription> listErrors()", "full_signature": "@RequestMapping(value = \"/transform/errors\", method = RequestMethod.GET) @ApiOperation(value = \"Get all transformation related error codes.\", notes = \"Returns the list of all transformation related error codes.\") @Timed public Iterable<JsonErrorCodeDescription> listErrors()", "class_method_signature": "TransformationService.listErrors()", "testcase": false, "constructor": false}, {"identifier": "exportTypes", "parameters": "()", "modifiers": "@RequestMapping(value = \"/export/formats\", method = GET) @ApiOperation(value = \"Get the available format types\") @Timed @PublicAPI public", "return": "Stream<ExportFormatMessage>", "signature": "Stream<ExportFormatMessage> exportTypes()", "full_signature": "@RequestMapping(value = \"/export/formats\", method = GET) @ApiOperation(value = \"Get the available format types\") @Timed @PublicAPI public Stream<ExportFormatMessage> exportTypes()", "class_method_signature": "TransformationService.exportTypes()", "testcase": false, "constructor": false}, {"identifier": "getPreparationExportTypesForPreparation", "parameters": "(@PathVariable String preparationId)", "modifiers": "@RequestMapping(value = \"/export/formats/preparations/{preparationId}\", method = GET) @ApiOperation(value = \"Get the available format types for the preparation\") @Timed public", "return": "Stream<ExportFormatMessage>", "signature": "Stream<ExportFormatMessage> getPreparationExportTypesForPreparation(@PathVariable String preparationId)", "full_signature": "@RequestMapping(value = \"/export/formats/preparations/{preparationId}\", method = GET) @ApiOperation(value = \"Get the available format types for the preparation\") @Timed public Stream<ExportFormatMessage> getPreparationExportTypesForPreparation(@PathVariable String preparationId)", "class_method_signature": "TransformationService.getPreparationExportTypesForPreparation(@PathVariable String preparationId)", "testcase": false, "constructor": false}, {"identifier": "getPreparationExportTypesForDataSet", "parameters": "(@PathVariable String dataSetId)", "modifiers": "@RequestMapping(value = \"/export/formats/datasets/{dataSetId}\", method = GET) @ApiOperation(value = \"Get the available format types for the preparation\") @Timed public", "return": "Stream<ExportFormatMessage>", "signature": "Stream<ExportFormatMessage> getPreparationExportTypesForDataSet(@PathVariable String dataSetId)", "full_signature": "@RequestMapping(value = \"/export/formats/datasets/{dataSetId}\", method = GET) @ApiOperation(value = \"Get the available format types for the preparation\") @Timed public Stream<ExportFormatMessage> getPreparationExportTypesForDataSet(@PathVariable String dataSetId)", "class_method_signature": "TransformationService.getPreparationExportTypesForDataSet(@PathVariable String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "getDictionary", "parameters": "()", "modifiers": "@RequestMapping(value = \"/dictionary\", method = GET, produces = APPLICATION_OCTET_STREAM_VALUE) @ApiOperation(value = \"Get current dictionary (as serialized object).\") @Timed public", "return": "StreamingResponseBody", "signature": "StreamingResponseBody getDictionary()", "full_signature": "@RequestMapping(value = \"/dictionary\", method = GET, produces = APPLICATION_OCTET_STREAM_VALUE) @ApiOperation(value = \"Get current dictionary (as serialized object).\") @Timed public StreamingResponseBody getDictionary()", "class_method_signature": "TransformationService.getDictionary()", "testcase": false, "constructor": false}, {"identifier": "getPreparationColumnSemanticCategories", "parameters": "(\n            @ApiParam(value = \"The preparation id\") @PathVariable String preparationId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId,\n            @ApiParam(value = \"The preparation version\") @RequestParam(defaultValue = \"head\") String stepId)", "modifiers": "@RequestMapping(value = \"/preparations/{preparationId}/columns/{columnId}/types\", method = GET) @ApiOperation(value = \"list the types of the wanted column\", notes = \"This list can be used by user to change the column type.\") @Timed @PublicAPI public", "return": "List<SemanticDomain>", "signature": "List<SemanticDomain> getPreparationColumnSemanticCategories(\n            @ApiParam(value = \"The preparation id\") @PathVariable String preparationId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId,\n            @ApiParam(value = \"The preparation version\") @RequestParam(defaultValue = \"head\") String stepId)", "full_signature": "@RequestMapping(value = \"/preparations/{preparationId}/columns/{columnId}/types\", method = GET) @ApiOperation(value = \"list the types of the wanted column\", notes = \"This list can be used by user to change the column type.\") @Timed @PublicAPI public List<SemanticDomain> getPreparationColumnSemanticCategories(\n            @ApiParam(value = \"The preparation id\") @PathVariable String preparationId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId,\n            @ApiParam(value = \"The preparation version\") @RequestParam(defaultValue = \"head\") String stepId)", "class_method_signature": "TransformationService.getPreparationColumnSemanticCategories(\n            @ApiParam(value = \"The preparation id\") @PathVariable String preparationId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId,\n            @ApiParam(value = \"The preparation version\") @RequestParam(defaultValue = \"head\") String stepId)", "testcase": false, "constructor": false}, {"identifier": "getPreparation", "parameters": "(String preparationId)", "modifiers": "private", "return": "PreparationDTO", "signature": "PreparationDTO getPreparation(String preparationId)", "full_signature": "private PreparationDTO getPreparation(String preparationId)", "class_method_signature": "TransformationService.getPreparation(String preparationId)", "testcase": false, "constructor": false}, {"identifier": "getSemanticDomains", "parameters": "(DataSetMetadata metadata, String columnId, InputStream records)", "modifiers": "private", "return": "List<SemanticDomain>", "signature": "List<SemanticDomain> getSemanticDomains(DataSetMetadata metadata, String columnId, InputStream records)", "full_signature": "private List<SemanticDomain> getSemanticDomains(DataSetMetadata metadata, String columnId, InputStream records)", "class_method_signature": "TransformationService.getSemanticDomains(DataSetMetadata metadata, String columnId, InputStream records)", "testcase": false, "constructor": false}, {"identifier": "addPreparationInCache", "parameters": "(PreparationDTO preparation, String stepId)", "modifiers": "private", "return": "void", "signature": "void addPreparationInCache(PreparationDTO preparation, String stepId)", "full_signature": "private void addPreparationInCache(PreparationDTO preparation, String stepId)", "class_method_signature": "TransformationService.addPreparationInCache(PreparationDTO preparation, String stepId)", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/service/TransformationService.java"}, "focal_method": {"identifier": "getDictionary", "parameters": "()", "modifiers": "@RequestMapping(value = \"/dictionary\", method = GET, produces = APPLICATION_OCTET_STREAM_VALUE) @ApiOperation(value = \"Get current dictionary (as serialized object).\") @Timed public", "return": "StreamingResponseBody", "body": "@RequestMapping(value = \"/dictionary\", method = GET, produces = APPLICATION_OCTET_STREAM_VALUE)\n    @ApiOperation(value = \"Get current dictionary (as serialized object).\")\n    @Timed\n    public StreamingResponseBody getDictionary() {\n        return outputStream -> {\n            // Serialize it to output\n            LOG.debug(\"Returning DQ dictionaries\");\n            TdqCategories result = TdqCategoriesFactory.createFullTdqCategories();\n            try (ObjectOutputStream oos = new ObjectOutputStream(new GZIPOutputStream(outputStream))) {\n                oos.writeObject(result);\n            }\n        };\n    }", "signature": "StreamingResponseBody getDictionary()", "full_signature": "@RequestMapping(value = \"/dictionary\", method = GET, produces = APPLICATION_OCTET_STREAM_VALUE) @ApiOperation(value = \"Get current dictionary (as serialized object).\") @Timed public StreamingResponseBody getDictionary()", "class_method_signature": "TransformationService.getDictionary()", "testcase": false, "constructor": false, "invocations": ["debug", "createFullTdqCategories", "writeObject"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}