{"test_class": {"identifier": "LogImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Janbanery janbanery;", "modifier": "", "type": "Janbanery", "declarator": "janbanery", "var_name": "janbanery"}], "file": "janbanery-core/src/test/java/pl/project13/janbanery/core/dao/LogImplTest.java"}, "test_case": {"identifier": "shouldFetchAllAvailable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldFetchAllAvailable() throws Exception {\n    // given\n    Log log = janbanery.log();\n\n    // when\n    List<ProjectLogEntry> all = log.all();\n\n    // then\n    assertValidProjectLogEntries(all);\n    assertThat(all.size()).isEqualTo(100);\n  }", "signature": "void shouldFetchAllAvailable()", "full_signature": "@Test public void shouldFetchAllAvailable()", "class_method_signature": "LogImplTest.shouldFetchAllAvailable()", "testcase": true, "constructor": false, "invocations": ["log", "all", "assertValidProjectLogEntries", "isEqualTo", "assertThat", "size"]}, "focal_class": {"identifier": "LogImpl", "superclass": "", "interfaces": "implements Log", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}, {"original_string": "private Configuration conf;", "modifier": "private", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private RestClient restClient;", "modifier": "private", "type": "RestClient", "declarator": "restClient", "var_name": "restClient"}, {"original_string": "private Workspace currentWorkspace;", "modifier": "private", "type": "Workspace", "declarator": "currentWorkspace", "var_name": "currentWorkspace"}, {"original_string": "private Project currentProject;", "modifier": "private", "type": "Project", "declarator": "currentProject", "var_name": "currentProject"}, {"original_string": "private RssConverter rssConverter = new RssConverter();", "modifier": "private", "type": "RssConverter", "declarator": "rssConverter = new RssConverter()", "var_name": "rssConverter"}], "methods": [{"identifier": "LogImpl", "parameters": "(Configuration conf, RestClient restClient)", "modifiers": "public", "return": "", "signature": " LogImpl(Configuration conf, RestClient restClient)", "full_signature": "public  LogImpl(Configuration conf, RestClient restClient)", "class_method_signature": "LogImpl.LogImpl(Configuration conf, RestClient restClient)", "testcase": false, "constructor": true}, {"identifier": "all", "parameters": "()", "modifiers": "@Override public", "return": "List<ProjectLogEntry>", "signature": "List<ProjectLogEntry> all()", "full_signature": "@Override public List<ProjectLogEntry> all()", "class_method_signature": "LogImpl.all()", "testcase": false, "constructor": false}, {"identifier": "lastOne", "parameters": "()", "modifiers": "@Override public", "return": "ProjectLogEntry", "signature": "ProjectLogEntry lastOne()", "full_signature": "@Override public ProjectLogEntry lastOne()", "class_method_signature": "LogImpl.lastOne()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "(Integer numberOfActions)", "modifiers": "@Override public", "return": "List<ProjectLogEntry>", "signature": "List<ProjectLogEntry> last(Integer numberOfActions)", "full_signature": "@Override public List<ProjectLogEntry> last(Integer numberOfActions)", "class_method_signature": "LogImpl.last(Integer numberOfActions)", "testcase": false, "constructor": false}, {"identifier": "fresherThan", "parameters": "(ProjectLogEntry entry)", "modifiers": "@Override public", "return": "List<ProjectLogEntry>", "signature": "List<ProjectLogEntry> fresherThan(ProjectLogEntry entry)", "full_signature": "@Override public List<ProjectLogEntry> fresherThan(ProjectLogEntry entry)", "class_method_signature": "LogImpl.fresherThan(ProjectLogEntry entry)", "testcase": false, "constructor": false}, {"identifier": "asByteArrayInputStream", "parameters": "(String responseBody)", "modifiers": "private", "return": "ByteArrayInputStream", "signature": "ByteArrayInputStream asByteArrayInputStream(String responseBody)", "full_signature": "private ByteArrayInputStream asByteArrayInputStream(String responseBody)", "class_method_signature": "LogImpl.asByteArrayInputStream(String responseBody)", "testcase": false, "constructor": false}, {"identifier": "getDefaultLogUrl", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getDefaultLogUrl()", "full_signature": "private String getDefaultLogUrl()", "class_method_signature": "LogImpl.getDefaultLogUrl()", "testcase": false, "constructor": false}, {"identifier": "using", "parameters": "(Workspace currentWorkspace, Project currentProject)", "modifiers": "public", "return": "Log", "signature": "Log using(Workspace currentWorkspace, Project currentProject)", "full_signature": "public Log using(Workspace currentWorkspace, Project currentProject)", "class_method_signature": "LogImpl.using(Workspace currentWorkspace, Project currentProject)", "testcase": false, "constructor": false}], "file": "janbanery-core/src/main/java/pl/project13/janbanery/core/dao/LogImpl.java"}, "focal_method": {"identifier": "all", "parameters": "()", "modifiers": "@Override public", "return": "List<ProjectLogEntry>", "body": "@Override\n  public List<ProjectLogEntry> all() throws ServerCommunicationException {\n    String url = getDefaultLogUrl();\n\n    RestClientResponse response = restClient.doGet(url);\n    String responseBody = response.getResponseBody();\n\n    ByteArrayInputStream inStream = asByteArrayInputStream(responseBody);\n\n    RssResource.Rss rss = rssConverter.fromXml(inStream);\n    ProjectLog projectLog = ProjectLog.from(rss);\n\n    return projectLog.getItems();\n  }", "signature": "List<ProjectLogEntry> all()", "full_signature": "@Override public List<ProjectLogEntry> all()", "class_method_signature": "LogImpl.all()", "testcase": false, "constructor": false, "invocations": ["getDefaultLogUrl", "doGet", "getResponseBody", "asByteArrayInputStream", "fromXml", "from", "getItems"]}, "repository": {"repo_id": 1641128, "url": "https://github.com/ktoso/janbanery", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 2250, "license": "licensed"}}