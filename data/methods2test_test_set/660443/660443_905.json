{"test_class": {"identifier": "VicinitySamplerTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private static SmilesParser parser;", "modifier": "private static", "type": "SmilesParser", "declarator": "parser", "var_name": "parser"}], "file": "tool/structgen/src/test/java/org/openscience/cdk/structgen/VicinitySamplerTest.java"}, "test_case": {"identifier": "testVicinitySampler_sample", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVicinitySampler_sample() throws Exception {\n        IAtomContainer mol = TestMoleculeFactory.makeEthylPropylPhenantren();\n\n        Isotopes.getInstance().configureAtoms(mol);\n        addImplicitHydrogens(mol);\n\n        IAtomContainer temp = null;\n        List structures = VicinitySampler.sample(mol);\n        Assert.assertEquals(37, structures.size());\n        for (int f = 0; f < structures.size(); f++) {\n            temp = (IAtomContainer) structures.get(f);\n            Assert.assertNotNull(temp);\n            Assert.assertTrue(ConnectivityChecker.isConnected(temp));\n            Assert.assertEquals(mol.getAtomCount(), temp.getAtomCount());\n        }\n\n    }", "signature": "void testVicinitySampler_sample()", "full_signature": "@Test public void testVicinitySampler_sample()", "class_method_signature": "VicinitySamplerTest.testVicinitySampler_sample()", "testcase": true, "constructor": false, "invocations": ["makeEthylPropylPhenantren", "configureAtoms", "getInstance", "addImplicitHydrogens", "sample", "assertEquals", "size", "size", "get", "assertNotNull", "assertTrue", "isConnected", "assertEquals", "getAtomCount", "getAtomCount"]}, "focal_class": {"identifier": "VicinitySampler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static ILoggingTool LOGGER     = LoggingToolFactory.createLoggingTool(VicinitySampler.class);", "modifier": "private final static", "type": "ILoggingTool", "declarator": "LOGGER     = LoggingToolFactory.createLoggingTool(VicinitySampler.class)", "var_name": "LOGGER"}, {"original_string": "int                               molCounter = 0;", "modifier": "", "type": "int", "declarator": "molCounter = 0", "var_name": "molCounter"}], "methods": [{"identifier": "sample", "parameters": "(IAtomContainer ac)", "modifiers": "public static", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> sample(IAtomContainer ac)", "full_signature": "public static List<IAtomContainer> sample(IAtomContainer ac)", "class_method_signature": "VicinitySampler.sample(IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "change", "parameters": "(IAtomContainer ac, int x1, int y1, int x2, int y2, double b11, double b12,\n            double b21, double b22)", "modifiers": "private static", "return": "IAtomContainer", "signature": "IAtomContainer change(IAtomContainer ac, int x1, int y1, int x2, int y2, double b11, double b12,\n            double b21, double b22)", "full_signature": "private static IAtomContainer change(IAtomContainer ac, int x1, int y1, int x2, int y2, double b11, double b12,\n            double b21, double b22)", "class_method_signature": "VicinitySampler.change(IAtomContainer ac, int x1, int y1, int x2, int y2, double b11, double b12,\n            double b21, double b22)", "testcase": false, "constructor": false}], "file": "tool/structgen/src/main/java/org/openscience/cdk/structgen/VicinitySampler.java"}, "focal_method": {"identifier": "sample", "parameters": "(IAtomContainer ac)", "modifiers": "public static", "return": "List<IAtomContainer>", "body": "public static List<IAtomContainer> sample(IAtomContainer ac) {\n        LOGGER.debug(\"RandomGenerator->mutate() Start\");\n        List<IAtomContainer> structures = new ArrayList<IAtomContainer>();\n\n        int nrOfAtoms = ac.getAtomCount();\n        double a11 = 0, a12 = 0, a22 = 0, a21 = 0;\n        double b11 = 0, lowerborder = 0, upperborder = 0;\n        double b12 = 0;\n        double b21 = 0;\n        double b22 = 0;\n        double[] cmax = new double[4];\n        double[] cmin = new double[4];\n        IAtomContainer newAc = null;\n\n        IAtom ax1 = null, ax2 = null, ay1 = null, ay2 = null;\n        IBond b1 = null, b2 = null, b3 = null, b4 = null;\n        //int[] choices = new int[3];\n        /* We need at least two non-zero bonds in order to be successful */\n        int nonZeroBondsCounter = 0;\n        for (int x1 = 0; x1 < nrOfAtoms; x1++) {\n            for (int x2 = x1 + 1; x2 < nrOfAtoms; x2++) {\n                for (int y1 = x2 + 1; y1 < nrOfAtoms; y1++) {\n                    for (int y2 = y1 + 1; y2 < nrOfAtoms; y2++) {\n                        nonZeroBondsCounter = 0;\n                        ax1 = ac.getAtom(x1);\n                        ay1 = ac.getAtom(y1);\n                        ax2 = ac.getAtom(x2);\n                        ay2 = ac.getAtom(y2);\n\n                        /* Get four bonds for these four atoms */\n\n                        b1 = ac.getBond(ax1, ay1);\n                        if (b1 != null) {\n                            a11 = BondManipulator.destroyBondOrder(b1.getOrder());\n                            nonZeroBondsCounter++;\n                        } else {\n                            a11 = 0;\n                        }\n\n                        b2 = ac.getBond(ax1, ay2);\n                        if (b2 != null) {\n                            a12 = BondManipulator.destroyBondOrder(b2.getOrder());\n                            nonZeroBondsCounter++;\n                        } else {\n                            a12 = 0;\n                        }\n\n                        b3 = ac.getBond(ax2, ay1);\n                        if (b3 != null) {\n                            a21 = BondManipulator.destroyBondOrder(b3.getOrder());\n                            nonZeroBondsCounter++;\n                        } else {\n                            a21 = 0;\n                        }\n\n                        b4 = ac.getBond(ax2, ay2);\n                        if (b4 != null) {\n                            a22 = BondManipulator.destroyBondOrder(b4.getOrder());\n                            nonZeroBondsCounter++;\n                        } else {\n                            a22 = 0;\n                        }\n                        if (nonZeroBondsCounter > 1) {\n                            /*\n                             * Compute the range for b11 (see Faulons formulae\n                             * for details)\n                             */\n\n                            cmax[0] = 0;\n                            cmax[1] = a11 - a22;\n                            cmax[2] = a11 + a12 - 3;\n                            cmax[3] = a11 + a21 - 3;\n                            cmin[0] = 3;\n                            cmin[1] = a11 + a12;\n                            cmin[2] = a11 + a21;\n                            cmin[3] = a11 - a22 + 3;\n                            lowerborder = MathTools.max(cmax);\n                            upperborder = MathTools.min(cmin);\n                            for (b11 = lowerborder; b11 <= upperborder; b11++) {\n                                if (b11 != a11) {\n\n                                    b12 = a11 + a12 - b11;\n                                    b21 = a11 + a21 - b11;\n                                    b22 = a22 - a11 + b11;\n                                    LOGGER.debug(\"Trying atom combination : \" + x1 + \":\" + x2 + \":\" + y1 + \":\" + y2);\n                                    try {\n                                        newAc = (IAtomContainer) ac.clone();\n                                        change(newAc, x1, y1, x2, y2, b11, b12, b21, b22);\n                                        if (ConnectivityChecker.isConnected(newAc)) {\n                                            structures.add(newAc);\n                                        } else {\n                                            LOGGER.debug(\"not connected\");\n                                        }\n                                    } catch (CloneNotSupportedException e) {\n                                        LOGGER.error(\"Cloning exception: \" + e.getMessage());\n                                        LOGGER.debug(e);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return structures;\n    }", "signature": "List<IAtomContainer> sample(IAtomContainer ac)", "full_signature": "public static List<IAtomContainer> sample(IAtomContainer ac)", "class_method_signature": "VicinitySampler.sample(IAtomContainer ac)", "testcase": false, "constructor": false, "invocations": ["debug", "getAtomCount", "getAtom", "getAtom", "getAtom", "getAtom", "getBond", "destroyBondOrder", "getOrder", "getBond", "destroyBondOrder", "getOrder", "getBond", "destroyBondOrder", "getOrder", "getBond", "destroyBondOrder", "getOrder", "max", "min", "debug", "clone", "change", "isConnected", "add", "debug", "error", "getMessage", "debug"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}