{"test_class": {"identifier": "RDBMSPatternSingleTopicMapSourceTest", "superclass": "extends AbstractTopicMapSourceTest", "interfaces": "", "fields": [], "file": "ontopia-engine/src/test/java/net/ontopia/topicmaps/impl/rdbms/RDBMSPatternSingleTopicMapSourceTest.java"}, "test_case": {"identifier": "testRefresh", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRefresh() throws IOException {\n    // constants\n    final String title = \"test-topic-map\";\n    final String propfile = System.getProperty(\"net.ontopia.topicmaps.impl.rdbms.PropertyFile\");\n\n    RDBMSTopicMapStore store = null;\n    RDBMSTopicMapStore store2 = null;\n    try {\n      // create a new topic map matching pattern\n      store = new RDBMSTopicMapStore(propfile);\n      ((TopicMap) store.getTopicMap()).setTitle(title);\n      store.commit(); // make sure it's in the DB for real\n      \n      // verify that correct TM is being picked up\n      RDBMSPatternSingleTopicMapSource source = makeSource();\n      source.setMatch(\"title\");\n      source.setPattern(title);\n      TopicMapReferenceIF ref = (TopicMapReferenceIF)\n        source.getReferences().iterator().next();\n      Assert.assertTrue(\"reference has wrong ID: \" + ref,\n                 ((RDBMSTopicMapReference) ref).getTopicMapId() == store.getLongId());\n\n      // make another topic map matching pattern\n      store2 = new RDBMSTopicMapStore(propfile);\n      ((TopicMap) store2.getTopicMap()).setTitle(title);\n      store2.commit(); // make sure it's in the DB for real\n\n      // verify that new topic map is being picked up\n      source.refresh();\n      ref = (TopicMapReferenceIF) source.getReferences().iterator().next();\n      Assert.assertTrue(\"reference has wrong ID: \" + ref,\n                 ((RDBMSTopicMapReference) ref).getTopicMapId() == store2.getLongId());\n    } finally {\n      // clean up\n      if (store != null)\n        store.delete(true);\n      if (store2 != null)\n        store2.delete(true);\n    }\n  }", "signature": "void testRefresh()", "full_signature": "@Test public void testRefresh()", "class_method_signature": "RDBMSPatternSingleTopicMapSourceTest.testRefresh()", "testcase": true, "constructor": false, "invocations": ["getProperty", "setTitle", "getTopicMap", "commit", "makeSource", "setMatch", "setPattern", "next", "iterator", "getReferences", "assertTrue", "getTopicMapId", "getLongId", "setTitle", "getTopicMap", "commit", "refresh", "next", "iterator", "getReferences", "assertTrue", "getTopicMapId", "getLongId", "delete", "delete"]}, "focal_class": {"identifier": "RDBMSPatternSingleTopicMapSource", "superclass": "", "interfaces": "implements TopicMapSourceIF", "fields": [{"original_string": "protected String id;", "modifier": "protected", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "protected String referenceId;", "modifier": "protected", "type": "String", "declarator": "referenceId", "var_name": "referenceId"}, {"original_string": "protected String title;", "modifier": "protected", "type": "String", "declarator": "title", "var_name": "title"}, {"original_string": "protected LocatorIF base_address;", "modifier": "protected", "type": "LocatorIF", "declarator": "base_address", "var_name": "base_address"}, {"original_string": "protected String propfile;", "modifier": "protected", "type": "String", "declarator": "propfile", "var_name": "propfile"}, {"original_string": "protected String match = \"title\";", "modifier": "protected", "type": "String", "declarator": "match = \"title\"", "var_name": "match"}, {"original_string": "protected String pattern;", "modifier": "protected", "type": "String", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "protected RDBMSTopicMapReference reference;", "modifier": "protected", "type": "RDBMSTopicMapReference", "declarator": "reference", "var_name": "reference"}, {"original_string": "protected RDBMSStorage storage;", "modifier": "protected", "type": "RDBMSStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(RDBMSPatternSingleTopicMapSource.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RDBMSPatternSingleTopicMapSource.class.getName())", "var_name": "log"}], "methods": [{"identifier": "createTopicMap", "parameters": "(String name, String baseAddress)", "modifiers": "@Override public", "return": "TopicMapReferenceIF", "signature": "TopicMapReferenceIF createTopicMap(String name, String baseAddress)", "full_signature": "@Override public TopicMapReferenceIF createTopicMap(String name, String baseAddress)", "class_method_signature": "RDBMSPatternSingleTopicMapSource.createTopicMap(String name, String baseAddress)", "testcase": false, "constructor": false}, {"identifier": "getReferences", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Collection", "signature": "Collection getReferences()", "full_signature": "@Override public synchronized Collection getReferences()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.getReferences()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void refresh()", "full_signature": "@Override public synchronized void refresh()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.refresh()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.close()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void setId(String id)", "full_signature": "@Override public void setId(String id)", "class_method_signature": "RDBMSPatternSingleTopicMapSource.setId(String id)", "testcase": false, "constructor": false}, {"identifier": "getTitle", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTitle()", "full_signature": "@Override public String getTitle()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.getTitle()", "testcase": false, "constructor": false}, {"identifier": "setTitle", "parameters": "(String title)", "modifiers": "@Override public", "return": "void", "signature": "void setTitle(String title)", "full_signature": "@Override public void setTitle(String title)", "class_method_signature": "RDBMSPatternSingleTopicMapSource.setTitle(String title)", "testcase": false, "constructor": false}, {"identifier": "getMatch", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMatch()", "full_signature": "public String getMatch()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.getMatch()", "testcase": false, "constructor": false}, {"identifier": "setMatch", "parameters": "(String match)", "modifiers": "public", "return": "void", "signature": "void setMatch(String match)", "full_signature": "public void setMatch(String match)", "class_method_signature": "RDBMSPatternSingleTopicMapSource.setMatch(String match)", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPattern()", "full_signature": "public String getPattern()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.getPattern()", "testcase": false, "constructor": false}, {"identifier": "setPattern", "parameters": "(String pattern)", "modifiers": "public", "return": "void", "signature": "void setPattern(String pattern)", "full_signature": "public void setPattern(String pattern)", "class_method_signature": "RDBMSPatternSingleTopicMapSource.setPattern(String pattern)", "testcase": false, "constructor": false}, {"identifier": "supportsCreate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsCreate()", "full_signature": "@Override public boolean supportsCreate()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.supportsCreate()", "testcase": false, "constructor": false}, {"identifier": "supportsDelete", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsDelete()", "full_signature": "@Override public boolean supportsDelete()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.supportsDelete()", "testcase": false, "constructor": false}, {"identifier": "createStorage", "parameters": "()", "modifiers": "protected", "return": "RDBMSStorage", "signature": "RDBMSStorage createStorage()", "full_signature": "protected RDBMSStorage createStorage()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.createStorage()", "testcase": false, "constructor": false}, {"identifier": "getPropertyFile", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPropertyFile()", "full_signature": "public String getPropertyFile()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.getPropertyFile()", "testcase": false, "constructor": false}, {"identifier": "setPropertyFile", "parameters": "(String propfile)", "modifiers": "public", "return": "void", "signature": "void setPropertyFile(String propfile)", "full_signature": "public void setPropertyFile(String propfile)", "class_method_signature": "RDBMSPatternSingleTopicMapSource.setPropertyFile(String propfile)", "testcase": false, "constructor": false}, {"identifier": "getReferenceId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getReferenceId()", "full_signature": "public String getReferenceId()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.getReferenceId()", "testcase": false, "constructor": false}, {"identifier": "setReferenceId", "parameters": "(String referenceId)", "modifiers": "public", "return": "void", "signature": "void setReferenceId(String referenceId)", "full_signature": "public void setReferenceId(String referenceId)", "class_method_signature": "RDBMSPatternSingleTopicMapSource.setReferenceId(String referenceId)", "testcase": false, "constructor": false}, {"identifier": "getBaseAddress", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBaseAddress()", "full_signature": "public String getBaseAddress()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.getBaseAddress()", "testcase": false, "constructor": false}, {"identifier": "setBaseAddress", "parameters": "(String base_address)", "modifiers": "public", "return": "void", "signature": "void setBaseAddress(String base_address)", "full_signature": "public void setBaseAddress(String base_address)", "class_method_signature": "RDBMSPatternSingleTopicMapSource.setBaseAddress(String base_address)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/topicmaps/impl/rdbms/RDBMSPatternSingleTopicMapSource.java"}, "focal_method": {"identifier": "refresh", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n  public synchronized void refresh() {\n    if (match == null)\n      throw new OntopiaRuntimeException(\"match property must be specified on source with id '\" + getId() + \"'.\");\n    if (pattern == null)\n      throw new OntopiaRuntimeException(\"pattern property must be specified on source with id '\" + getId() + \"'.\");\n    if (referenceId == null)\n      throw new OntopiaRuntimeException(\"referenceId property must be specified on source with id '\" + getId() + \"'.\");\n    \n    boolean foundReference = false;\n    long topicmap_id = -2;\n    String _title = title;\n    LocatorIF _base_address = base_address;\n    \n    try {\n      createStorage();\n\n      // retrieve reference id from database\n      Connection conn = storage.getConnectionFactory(true).requestConnection();\n      try {\n\n        String sqlquery;\n        if (\"title\".equals(match))\n          sqlquery = \"select max(M.id), M.title, M.base_address from TM_TOPIC_MAP M where M.title = ? group by M.title, M.base_address order by max(M.id) desc\";\n        else if (\"comments\".equals(match))\n          sqlquery = \"select max(M.id), M.title, M.base_address from TM_TOPIC_MAP M where M.comments = ? group by M.title, M.base_address order by max(M.id) desc\";\n        else\n          throw new OntopiaRuntimeException(\"match property contains illegal value '\" + match + \"' on source with id '\" + getId() + \"'.\");\n        \n        PreparedStatement stm = conn.prepareStatement(sqlquery);\n        try {\n          stm.setString(1, pattern);\n          ResultSet rs = stm.executeQuery();\n          if (rs.next()) {\n            foundReference = true;\n            topicmap_id = rs.getLong(1);\n            if (_title == null)\n              _title = rs.getString(2);\n            if (_base_address == null) {\n              String loc = rs.getString(3);\n              if (loc != null)\n                _base_address = new URILocator(loc);\n            }\n          } else {\n            log.warn(\"Source with id '\" + getId() + \"' could not find any matching topic maps with pattern '\" + pattern + \"'.\");\n          }\n          rs.close();\n        } finally {\n          stm.close();\n        }\n      } catch (Exception e) {\n        throw new OntopiaRuntimeException(e);\n      } finally {\n        try { conn.close(); } catch (Exception e) { };\n      }\n\n      // close existing reference if new topic map id\n      if (reference != null && topicmap_id != reference.getTopicMapId()) {\n        try {\n          log.debug(\"Closing reference '\" + referenceId + \"' to topic map \" + reference.getTopicMapId() + \".\");\n          reference.close();\n        } catch (Exception e) {\n          log.error(\"Error occurred when closing reference.\", e);\n        }        \n      }\n      \n      // swap reference only if new or topic map id is different\n      if (foundReference) {\n        if (reference == null || topicmap_id != reference.getTopicMapId()) {\n          log.debug(\"Created new reference '\" + referenceId + \"' to topic map \" + topicmap_id);\n          \n          RDBMSTopicMapReference ref = new RDBMSTopicMapReference(referenceId, _title, storage, topicmap_id, _base_address);\n          ref.setSource(this);\n          this.reference = ref;\n        } else {\n          log.debug(\"Reference with id '\" + referenceId + \"' already refers to topic map \" + topicmap_id);\n        }\n      } else {\n        this.reference = null;\n      }\n      \n    } catch (Exception e) {\n      throw new OntopiaRuntimeException(e);\n    }\n  }", "signature": "void refresh()", "full_signature": "@Override public synchronized void refresh()", "class_method_signature": "RDBMSPatternSingleTopicMapSource.refresh()", "testcase": false, "constructor": false, "invocations": ["getId", "getId", "getId", "createStorage", "requestConnection", "getConnectionFactory", "equals", "equals", "getId", "prepareStatement", "setString", "executeQuery", "next", "getLong", "getString", "getString", "warn", "getId", "close", "close", "close", "getTopicMapId", "debug", "getTopicMapId", "close", "error", "getTopicMapId", "debug", "setSource", "debug"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}