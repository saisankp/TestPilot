{"test_class": {"identifier": "DeleteSelectedRowsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static DataSource dataSource;", "modifier": "private static", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}], "file": "bundles/editor-jdbc/src/test/java/org/orbisgis/editorjdbc/jobs/DeleteSelectedRowsTest.java"}, "test_case": {"identifier": "testDelete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDelete() throws SQLException {\n        try(Connection connection = dataSource.getConnection();\n            Statement st = connection.createStatement()) {\n            st.execute(\"DROP TABLE IF EXISTS \\\"MY TABLE\\\"\");\n            st.execute(\"CREATE TABLE \\\"MY TABLE\\\"(PK INTEGER PRIMARY KEY) AS SELECT X FROM SYSTEM_RANGE(1,50);\");\n            // Drop some rows\n            LongUnion pkToDelete = new LongUnion(1, 25);\n            DeleteSelectedRows deleteSelectedRows = new DeleteSelectedRows(pkToDelete, \"MY TABLE\", dataSource);\n            deleteSelectedRows.doInBackground();\n            // Check if rows are deleted\n            try(ResultSet rs = st.executeQuery(\"SELECT PK FROM \\\"MY TABLE\\\"\")) {\n                for(long expectedPk : new LongUnion(26,50)) {\n                    assertTrue(rs.next());\n                    assertEquals(expectedPk, rs.getLong(1));\n                }\n                assertFalse(rs.next());\n            }\n        }\n    }", "signature": "void testDelete()", "full_signature": "@Test public void testDelete()", "class_method_signature": "DeleteSelectedRowsTest.testDelete()", "testcase": true, "constructor": false, "invocations": ["getConnection", "createStatement", "execute", "execute", "doInBackground", "executeQuery", "assertTrue", "next", "assertEquals", "getLong", "assertFalse", "next"]}, "focal_class": {"identifier": "DeleteSelectedRows", "superclass": "extends SwingWorkerPM", "interfaces": "", "fields": [{"original_string": "private final LongUnion rowPkToDelete;", "modifier": "private final", "type": "LongUnion", "declarator": "rowPkToDelete", "var_name": "rowPkToDelete"}, {"original_string": "private final String tableName;", "modifier": "private final", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "private final DataSource dataSource;", "modifier": "private final", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "private final static I18n I18N = I18nFactory.getI18n(DeleteSelectedRows.class);", "modifier": "private final static", "type": "I18n", "declarator": "I18N = I18nFactory.getI18n(DeleteSelectedRows.class)", "var_name": "I18N"}, {"original_string": "private final static long TRY_LOCK_TIME  = 10;", "modifier": "private final static", "type": "long", "declarator": "TRY_LOCK_TIME  = 10", "var_name": "TRY_LOCK_TIME"}], "methods": [{"identifier": "DeleteSelectedRows", "parameters": "(SortedSet<Long> rowPkToDelete, String tableName, DataSource dataSource)", "modifiers": "public", "return": "", "signature": " DeleteSelectedRows(SortedSet<Long> rowPkToDelete, String tableName, DataSource dataSource)", "full_signature": "public  DeleteSelectedRows(SortedSet<Long> rowPkToDelete, String tableName, DataSource dataSource)", "class_method_signature": "DeleteSelectedRows.DeleteSelectedRows(SortedSet<Long> rowPkToDelete, String tableName, DataSource dataSource)", "testcase": false, "constructor": true}, {"identifier": "doInBackground", "parameters": "()", "modifiers": "@Override protected", "return": "Object", "signature": "Object doInBackground()", "full_signature": "@Override protected Object doInBackground()", "class_method_signature": "DeleteSelectedRows.doInBackground()", "testcase": false, "constructor": false}, {"identifier": "deleteUsingRowSet", "parameters": "(ReversibleRowSet reversibleRowSet, SortedSet<Long> rowPkToDelete)", "modifiers": "public static", "return": "void", "signature": "void deleteUsingRowSet(ReversibleRowSet reversibleRowSet, SortedSet<Long> rowPkToDelete)", "full_signature": "public static void deleteUsingRowSet(ReversibleRowSet reversibleRowSet, SortedSet<Long> rowPkToDelete)", "class_method_signature": "DeleteSelectedRows.deleteUsingRowSet(ReversibleRowSet reversibleRowSet, SortedSet<Long> rowPkToDelete)", "testcase": false, "constructor": false}], "file": "bundles/editor-jdbc/src/main/java/org/orbisgis/editorjdbc/jobs/DeleteSelectedRows.java"}, "focal_method": {"identifier": "doInBackground", "parameters": "()", "modifiers": "@Override protected", "return": "Object", "body": "@Override\n    protected Object doInBackground() throws SQLException {\n        try(Connection connection = dataSource.getConnection()) {\n            boolean isH2 = JDBCUtilities.isH2DataBase(connection.getMetaData());\n            int columnId = JDBCUtilities.getIntegerPrimaryKey(connection, tableName);\n            if(columnId > 0) {\n                String pkColumnName = JDBCUtilities.getFieldName(connection.getMetaData(), tableName, columnId);\n                // A deletion batch is an ordered set of pk values to remove (a complete serial of integer without holes)\n                List<Long> deletionBatch = rowPkToDelete.getValueRanges();\n                ProgressMonitor pmBatch = getProgressMonitor().startTask(deletionBatch.size() / 2);\n                try(PreparedStatement st = connection.prepareStatement(\n                        String.format(\"DELETE FROM %s WHERE %s >= ? AND %s <= ?\",\n                                TableLocation.parse(tableName).toString(isH2),pkColumnName, pkColumnName))) {\n                    for (int idDelBatch = 0; idDelBatch < deletionBatch.size() - 1; idDelBatch += 2) {\n                        long startBatch = deletionBatch.get(idDelBatch);\n                        long endBatch = deletionBatch.get(idDelBatch + 1);\n                        st.setLong(1, startBatch);\n                        st.setLong(2, endBatch);\n                        st.execute();\n                        pmBatch.endTask();\n                    }\n                }\n            }\n        }\n        return null;\n    }", "signature": "Object doInBackground()", "full_signature": "@Override protected Object doInBackground()", "class_method_signature": "DeleteSelectedRows.doInBackground()", "testcase": false, "constructor": false, "invocations": ["getConnection", "isH2DataBase", "getMetaData", "getIntegerPrimaryKey", "getFieldName", "getMetaData", "getValueRanges", "startTask", "getProgressMonitor", "size", "prepareStatement", "format", "toString", "parse", "size", "get", "get", "setLong", "setLong", "execute", "endTask"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}