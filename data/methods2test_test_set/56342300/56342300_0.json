{"test_class": {"identifier": "DescriptionHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "snomed-drools-engine/src/test/java/org/ihtsdo/drools/helper/DescriptionHelperTest.java"}, "test_case": {"identifier": "testIsSemanticTagEquivalentToAnother", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIsSemanticTagEquivalentToAnother() throws Exception {\n\t\tAssert.assertFalse(DescriptionHelper.isSemanticTagEquivalentToAnother(\"Clinical finding (finding)\", newSet(\"SNOMED CT Concept (SNOMED RT+CTV3)\")));\n\t\tAssert.assertTrue(DescriptionHelper.isSemanticTagEquivalentToAnother(\"Bleeding (finding)\", newSet(\"Clinical finding (finding)\")));\n\t}", "signature": "void testIsSemanticTagEquivalentToAnother()", "full_signature": "@Test public void testIsSemanticTagEquivalentToAnother()", "class_method_signature": "DescriptionHelperTest.testIsSemanticTagEquivalentToAnother()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isSemanticTagEquivalentToAnother", "newSet", "assertTrue", "isSemanticTagEquivalentToAnother", "newSet"]}, "focal_class": {"identifier": "DescriptionHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Pattern TAG_PATTERN = Pattern.compile(\"^.*\\\\((.*)\\\\)$\");", "modifier": "public static final", "type": "Pattern", "declarator": "TAG_PATTERN = Pattern.compile(\"^.*\\\\((.*)\\\\)$\")", "var_name": "TAG_PATTERN"}, {"original_string": "public static final Pattern FULL_TAG_PATTERN = Pattern.compile(\"^.*(\\\\s\\\\([^\\\\)]+\\\\))$\");", "modifier": "public static final", "type": "Pattern", "declarator": "FULL_TAG_PATTERN = Pattern.compile(\"^.*(\\\\s\\\\([^\\\\)]+\\\\))$\")", "var_name": "FULL_TAG_PATTERN"}, {"original_string": "public static final Pattern FIRST_WORD_PATTERN = Pattern.compile(\"([^\\\\s]*).*$\");", "modifier": "public static final", "type": "Pattern", "declarator": "FIRST_WORD_PATTERN = Pattern.compile(\"([^\\\\s]*).*$\")", "var_name": "FIRST_WORD_PATTERN"}], "methods": [{"identifier": "DescriptionHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " DescriptionHelper()", "full_signature": "private  DescriptionHelper()", "class_method_signature": "DescriptionHelper.DescriptionHelper()", "testcase": false, "constructor": true}, {"identifier": "filterByActiveTypeAndDialectPreferred", "parameters": "(Concept concept, boolean active,\n\t\t\tString typeId, String dialectPreferred)", "modifiers": "public static", "return": "Collection<Description>", "signature": "Collection<Description> filterByActiveTypeAndDialectPreferred(Concept concept, boolean active,\n\t\t\tString typeId, String dialectPreferred)", "full_signature": "public static Collection<Description> filterByActiveTypeAndDialectPreferred(Concept concept, boolean active,\n\t\t\tString typeId, String dialectPreferred)", "class_method_signature": "DescriptionHelper.filterByActiveTypeAndDialectPreferred(Concept concept, boolean active,\n\t\t\tString typeId, String dialectPreferred)", "testcase": false, "constructor": false}, {"identifier": "isMoreThanOneAcceptabilityPerDialect", "parameters": "(Concept concept, boolean active, String typeId, String acceptability)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMoreThanOneAcceptabilityPerDialect(Concept concept, boolean active, String typeId, String acceptability)", "full_signature": "public static boolean isMoreThanOneAcceptabilityPerDialect(Concept concept, boolean active, String typeId, String acceptability)", "class_method_signature": "DescriptionHelper.isMoreThanOneAcceptabilityPerDialect(Concept concept, boolean active, String typeId, String acceptability)", "testcase": false, "constructor": false}, {"identifier": "filterByActiveAndType", "parameters": "(Concept concept, boolean active, String typeId)", "modifiers": "public static", "return": "Collection<Description>", "signature": "Collection<Description> filterByActiveAndType(Concept concept, boolean active, String typeId)", "full_signature": "public static Collection<Description> filterByActiveAndType(Concept concept, boolean active, String typeId)", "class_method_signature": "DescriptionHelper.filterByActiveAndType(Concept concept, boolean active, String typeId)", "testcase": false, "constructor": false}, {"identifier": "hasAcceptabilityMap", "parameters": "(Description description)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasAcceptabilityMap(Description description)", "full_signature": "public static boolean hasAcceptabilityMap(Description description)", "class_method_signature": "DescriptionHelper.hasAcceptabilityMap(Description description)", "testcase": false, "constructor": false}, {"identifier": "isAcceptabilityValuePresentOnDescription", "parameters": "(Description description, String acceptabilityValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAcceptabilityValuePresentOnDescription(Description description, String acceptabilityValue)", "full_signature": "public static boolean isAcceptabilityValuePresentOnDescription(Description description, String acceptabilityValue)", "class_method_signature": "DescriptionHelper.isAcceptabilityValuePresentOnDescription(Description description, String acceptabilityValue)", "testcase": false, "constructor": false}, {"identifier": "isUniqueWithinConcept", "parameters": "(Description description, Concept concept)", "modifiers": "public static", "return": "boolean", "signature": "boolean isUniqueWithinConcept(Description description, Concept concept)", "full_signature": "public static boolean isUniqueWithinConcept(Description description, Concept concept)", "class_method_signature": "DescriptionHelper.isUniqueWithinConcept(Description description, Concept concept)", "testcase": false, "constructor": false}, {"identifier": "isPreferredInAnyDialect", "parameters": "(Description description)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPreferredInAnyDialect(Description description)", "full_signature": "public static boolean isPreferredInAnyDialect(Description description)", "class_method_signature": "DescriptionHelper.isPreferredInAnyDialect(Description description)", "testcase": false, "constructor": false}, {"identifier": "isSemanticTagEquivalentToAnother", "parameters": "(String testTerm, Set<String> otherTerms)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSemanticTagEquivalentToAnother(String testTerm, Set<String> otherTerms)", "full_signature": "public static boolean isSemanticTagEquivalentToAnother(String testTerm, Set<String> otherTerms)", "class_method_signature": "DescriptionHelper.isSemanticTagEquivalentToAnother(String testTerm, Set<String> otherTerms)", "testcase": false, "constructor": false}, {"identifier": "isAllParentSemanticTagMatchWithTerm", "parameters": "(String testTerm, List<String> otherTerms)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAllParentSemanticTagMatchWithTerm(String testTerm, List<String> otherTerms)", "full_signature": "public static boolean isAllParentSemanticTagMatchWithTerm(String testTerm, List<String> otherTerms)", "class_method_signature": "DescriptionHelper.isAllParentSemanticTagMatchWithTerm(String testTerm, List<String> otherTerms)", "testcase": false, "constructor": false}, {"identifier": "isSemanticTagEquivalentToAnother", "parameters": "(String testTerm, Set<String> otherTerms,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String[][] acceptablePairs)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSemanticTagEquivalentToAnother(String testTerm, Set<String> otherTerms,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String[][] acceptablePairs)", "full_signature": "public static boolean isSemanticTagEquivalentToAnother(String testTerm, Set<String> otherTerms,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String[][] acceptablePairs)", "class_method_signature": "DescriptionHelper.isSemanticTagEquivalentToAnother(String testTerm, Set<String> otherTerms,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   String[][] acceptablePairs)", "testcase": false, "constructor": false}, {"identifier": "isPreferredTermCaseSignificanceValid", "parameters": "(Concept c, Description d)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPreferredTermCaseSignificanceValid(Concept c, Description d)", "full_signature": "public static boolean isPreferredTermCaseSignificanceValid(Concept c, Description d)", "class_method_signature": "DescriptionHelper.isPreferredTermCaseSignificanceValid(Concept c, Description d)", "testcase": false, "constructor": false}, {"identifier": "isCaseSignificanceValidBetweenTerms", "parameters": "(Concept concept, Description description)", "modifiers": "@Deprecated public static", "return": "boolean", "signature": "boolean isCaseSignificanceValidBetweenTerms(Concept concept, Description description)", "full_signature": "@Deprecated public static boolean isCaseSignificanceValidBetweenTerms(Concept concept, Description description)", "class_method_signature": "DescriptionHelper.isCaseSignificanceValidBetweenTerms(Concept concept, Description description)", "testcase": false, "constructor": false}, {"identifier": "getTag", "parameters": "(String term)", "modifiers": "public static", "return": "String", "signature": "String getTag(String term)", "full_signature": "public static String getTag(String term)", "class_method_signature": "DescriptionHelper.getTag(String term)", "testcase": false, "constructor": false}, {"identifier": "getTags", "parameters": "(List<String> terms)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getTags(List<String> terms)", "full_signature": "public static Set<String> getTags(List<String> terms)", "class_method_signature": "DescriptionHelper.getTags(List<String> terms)", "testcase": false, "constructor": false}, {"identifier": "getTagForConcept", "parameters": "(Concept concept)", "modifiers": "public static", "return": "String", "signature": "String getTagForConcept(Concept concept)", "full_signature": "public static String getTagForConcept(Concept concept)", "class_method_signature": "DescriptionHelper.getTagForConcept(Concept concept)", "testcase": false, "constructor": false}, {"identifier": "getFsnTerm", "parameters": "(String term)", "modifiers": "public static", "return": "String", "signature": "String getFsnTerm(String term)", "full_signature": "public static String getFsnTerm(String term)", "class_method_signature": "DescriptionHelper.getFsnTerm(String term)", "testcase": false, "constructor": false}, {"identifier": "hasSemanticTag", "parameters": "(Description description)", "modifiers": "@Deprecated /** * TestResourceProvider should now be used to load the semantic tags into the DescriptionService implementation. */ public", "return": "boolean", "signature": "boolean hasSemanticTag(Description description)", "full_signature": "@Deprecated /** * TestResourceProvider should now be used to load the semantic tags into the DescriptionService implementation. */ public boolean hasSemanticTag(Description description)", "class_method_signature": "DescriptionHelper.hasSemanticTag(Description description)", "testcase": false, "constructor": false}, {"identifier": "getFirstWord", "parameters": "(String term)", "modifiers": "public static", "return": "String", "signature": "String getFirstWord(String term)", "full_signature": "public static String getFirstWord(String term)", "class_method_signature": "DescriptionHelper.getFirstWord(String term)", "testcase": false, "constructor": false}, {"identifier": "hasMatchingDescriptionByTypeTermLanguage", "parameters": "(Concept concept, Description description)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasMatchingDescriptionByTypeTermLanguage(Concept concept, Description description)", "full_signature": "public static boolean hasMatchingDescriptionByTypeTermLanguage(Concept concept, Description description)", "class_method_signature": "DescriptionHelper.hasMatchingDescriptionByTypeTermLanguage(Concept concept, Description description)", "testcase": false, "constructor": false}, {"identifier": "getCaseSensitiveWordsErrorMessage", "parameters": "(Description description, Set<String> caseSignificantWords)", "modifiers": "public static", "return": "String", "signature": "String getCaseSensitiveWordsErrorMessage(Description description, Set<String> caseSignificantWords)", "full_signature": "public static String getCaseSensitiveWordsErrorMessage(Description description, Set<String> caseSignificantWords)", "class_method_signature": "DescriptionHelper.getCaseSensitiveWordsErrorMessage(Description description, Set<String> caseSignificantWords)", "testcase": false, "constructor": false}, {"identifier": "getLanguageSpecificErrorMessage", "parameters": "(Description description, Map<String, String> usToGbTermMap)", "modifiers": "public static", "return": "String", "signature": "String getLanguageSpecificErrorMessage(Description description, Map<String, String> usToGbTermMap)", "full_signature": "public static String getLanguageSpecificErrorMessage(Description description, Map<String, String> usToGbTermMap)", "class_method_signature": "DescriptionHelper.getLanguageSpecificErrorMessage(Description description, Map<String, String> usToGbTermMap)", "testcase": false, "constructor": false}], "file": "snomed-drools-engine/src/main/java/org/ihtsdo/drools/helper/DescriptionHelper.java"}, "focal_method": {"identifier": "isSemanticTagEquivalentToAnother", "parameters": "(String testTerm, Set<String> otherTerms)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isSemanticTagEquivalentToAnother(String testTerm, Set<String> otherTerms) {\n\t\treturn isSemanticTagEquivalentToAnother(testTerm, otherTerms, null);\n\t}", "signature": "boolean isSemanticTagEquivalentToAnother(String testTerm, Set<String> otherTerms)", "full_signature": "public static boolean isSemanticTagEquivalentToAnother(String testTerm, Set<String> otherTerms)", "class_method_signature": "DescriptionHelper.isSemanticTagEquivalentToAnother(String testTerm, Set<String> otherTerms)", "testcase": false, "constructor": false, "invocations": ["isSemanticTagEquivalentToAnother"]}, "repository": {"repo_id": 56342300, "url": "https://github.com/IHTSDO/snomed-drools", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 384, "license": "licensed"}}