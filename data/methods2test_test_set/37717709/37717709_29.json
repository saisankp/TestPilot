{"test_class": {"identifier": "EcmaScriptDataModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Throwable throwable;", "modifier": "", "type": "Throwable", "declarator": "throwable", "var_name": "throwable"}], "file": "org.jvoicexml.interpreter.datamodel.ecmascript/src/test/java/org/jvoicexml/interpreter/datamodel/ecmascript/EcmaScriptDataModelTest.java"}, "test_case": {"identifier": "testGetUndefinedValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetUndefinedValue() {\n        final DataModel data = new EcmaScriptDataModel();\n        Assert.assertEquals(Context.getUndefinedValue(),\n                data.getUndefinedValue());\n    }", "signature": "void testGetUndefinedValue()", "full_signature": "@Test public void testGetUndefinedValue()", "class_method_signature": "EcmaScriptDataModelTest.testGetUndefinedValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getUndefinedValue", "getUndefinedValue"]}, "focal_class": {"identifier": "EcmaScriptDataModel", "superclass": "", "interfaces": "implements DataModel", "fields": [{"original_string": "private static final Logger LOGGER = Logger\n            .getLogger(EcmaScriptDataModel.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger\n            .getLogger(EcmaScriptDataModel.class)", "var_name": "LOGGER"}, {"original_string": "private Scriptable rootScope;", "modifier": "private", "type": "Scriptable", "declarator": "rootScope", "var_name": "rootScope"}, {"original_string": "private Scriptable topmostScope;", "modifier": "private", "type": "Scriptable", "declarator": "topmostScope", "var_name": "topmostScope"}, {"original_string": "private final Map<Scriptable, Scope> scopes;", "modifier": "private final", "type": "Map<Scriptable, Scope>", "declarator": "scopes", "var_name": "scopes"}, {"original_string": "private DataModelObjectSerializer serializer;", "modifier": "private", "type": "DataModelObjectSerializer", "declarator": "serializer", "var_name": "serializer"}], "methods": [{"identifier": "EcmaScriptDataModel", "parameters": "()", "modifiers": "public", "return": "", "signature": " EcmaScriptDataModel()", "full_signature": "public  EcmaScriptDataModel()", "class_method_signature": "EcmaScriptDataModel.EcmaScriptDataModel()", "testcase": false, "constructor": true}, {"identifier": "getContext", "parameters": "()", "modifiers": "private", "return": "Context", "signature": "Context getContext()", "full_signature": "private Context getContext()", "class_method_signature": "EcmaScriptDataModel.getContext()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "@Override public", "return": "DataModel", "signature": "DataModel newInstance()", "full_signature": "@Override public DataModel newInstance()", "class_method_signature": "EcmaScriptDataModel.newInstance()", "testcase": false, "constructor": false}, {"identifier": "getUndefinedValue", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getUndefinedValue()", "full_signature": "@Override public Object getUndefinedValue()", "class_method_signature": "EcmaScriptDataModel.getUndefinedValue()", "testcase": false, "constructor": false}, {"identifier": "createNewObject", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object createNewObject()", "full_signature": "@Override public Object createNewObject()", "class_method_signature": "EcmaScriptDataModel.createNewObject()", "testcase": false, "constructor": false}, {"identifier": "createScope", "parameters": "(final Scope scope)", "modifiers": "@Override public", "return": "int", "signature": "int createScope(final Scope scope)", "full_signature": "@Override public int createScope(final Scope scope)", "class_method_signature": "EcmaScriptDataModel.createScope(final Scope scope)", "testcase": false, "constructor": false}, {"identifier": "copyValues", "parameters": "(final DataModel model)", "modifiers": "@Override public", "return": "int", "signature": "int copyValues(final DataModel model)", "full_signature": "@Override public int copyValues(final DataModel model)", "class_method_signature": "EcmaScriptDataModel.copyValues(final DataModel model)", "testcase": false, "constructor": false}, {"identifier": "createScope", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int createScope()", "full_signature": "@Override public int createScope()", "class_method_signature": "EcmaScriptDataModel.createScope()", "testcase": false, "constructor": false}, {"identifier": "deleteScope", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int deleteScope()", "full_signature": "@Override public int deleteScope()", "class_method_signature": "EcmaScriptDataModel.deleteScope()", "testcase": false, "constructor": false}, {"identifier": "deleteScope", "parameters": "(final Scope scope)", "modifiers": "@Override public", "return": "int", "signature": "int deleteScope(final Scope scope)", "full_signature": "@Override public int deleteScope(final Scope scope)", "class_method_signature": "EcmaScriptDataModel.deleteScope(final Scope scope)", "testcase": false, "constructor": false}, {"identifier": "getAndCreateScope", "parameters": "(final Scriptable scope,\n            final String name)", "modifiers": "private", "return": "Scriptable", "signature": "Scriptable getAndCreateScope(final Scriptable scope,\n            final String name)", "full_signature": "private Scriptable getAndCreateScope(final Scriptable scope,\n            final String name)", "class_method_signature": "EcmaScriptDataModel.getAndCreateScope(final Scriptable scope,\n            final String name)", "testcase": false, "constructor": false}, {"identifier": "createVariable", "parameters": "(final String variableName)", "modifiers": "@Override public", "return": "int", "signature": "int createVariable(final String variableName)", "full_signature": "@Override public int createVariable(final String variableName)", "class_method_signature": "EcmaScriptDataModel.createVariable(final String variableName)", "testcase": false, "constructor": false}, {"identifier": "createVariable", "parameters": "(final String variableName, final Object value)", "modifiers": "@Override public", "return": "int", "signature": "int createVariable(final String variableName, final Object value)", "full_signature": "@Override public int createVariable(final String variableName, final Object value)", "class_method_signature": "EcmaScriptDataModel.createVariable(final String variableName, final Object value)", "testcase": false, "constructor": false}, {"identifier": "createVariable", "parameters": "(final String variableName, final Object value,\n            final Scope scope)", "modifiers": "@Override public", "return": "int", "signature": "int createVariable(final String variableName, final Object value,\n            final Scope scope)", "full_signature": "@Override public int createVariable(final String variableName, final Object value,\n            final Scope scope)", "class_method_signature": "EcmaScriptDataModel.createVariable(final String variableName, final Object value,\n            final Scope scope)", "testcase": false, "constructor": false}, {"identifier": "createVariableFor", "parameters": "(final Object variable,\n            final String variableName)", "modifiers": "@Override public", "return": "int", "signature": "int createVariableFor(final Object variable,\n            final String variableName)", "full_signature": "@Override public int createVariableFor(final Object variable,\n            final String variableName)", "class_method_signature": "EcmaScriptDataModel.createVariableFor(final Object variable,\n            final String variableName)", "testcase": false, "constructor": false}, {"identifier": "createVariableFor", "parameters": "(Object variable, final String variableName,\n            final Object value)", "modifiers": "@Override public", "return": "int", "signature": "int createVariableFor(Object variable, final String variableName,\n            final Object value)", "full_signature": "@Override public int createVariableFor(Object variable, final String variableName,\n            final Object value)", "class_method_signature": "EcmaScriptDataModel.createVariableFor(Object variable, final String variableName,\n            final Object value)", "testcase": false, "constructor": false}, {"identifier": "createVariable", "parameters": "(final String variableName, final Object value,\n            final Scope scope, final Scriptable start)", "modifiers": "private", "return": "int", "signature": "int createVariable(final String variableName, final Object value,\n            final Scope scope, final Scriptable start)", "full_signature": "private int createVariable(final String variableName, final Object value,\n            final Scope scope, final Scriptable start)", "class_method_signature": "EcmaScriptDataModel.createVariable(final String variableName, final Object value,\n            final Scope scope, final Scriptable start)", "testcase": false, "constructor": false}, {"identifier": "createArray", "parameters": "(String arrayName, int dimension)", "modifiers": "@Override public", "return": "int", "signature": "int createArray(String arrayName, int dimension)", "full_signature": "@Override public int createArray(String arrayName, int dimension)", "class_method_signature": "EcmaScriptDataModel.createArray(String arrayName, int dimension)", "testcase": false, "constructor": false}, {"identifier": "getScriptable", "parameters": "(final Scope scope)", "modifiers": "", "return": "Scriptable", "signature": "Scriptable getScriptable(final Scope scope)", "full_signature": " Scriptable getScriptable(final Scope scope)", "class_method_signature": "EcmaScriptDataModel.getScriptable(final Scope scope)", "testcase": false, "constructor": false}, {"identifier": "createArray", "parameters": "(final String arrayName, final int dimension,\n            final Scope scope)", "modifiers": "@Override public", "return": "int", "signature": "int createArray(final String arrayName, final int dimension,\n            final Scope scope)", "full_signature": "@Override public int createArray(final String arrayName, final int dimension,\n            final Scope scope)", "class_method_signature": "EcmaScriptDataModel.createArray(final String arrayName, final int dimension,\n            final Scope scope)", "testcase": false, "constructor": false}, {"identifier": "createArray", "parameters": "(final String arrayName, final int dimension,\n            final Scope scope, final Scriptable start)", "modifiers": "private", "return": "int", "signature": "int createArray(final String arrayName, final int dimension,\n            final Scope scope, final Scriptable start)", "full_signature": "private int createArray(final String arrayName, final int dimension,\n            final Scope scope, final Scriptable start)", "class_method_signature": "EcmaScriptDataModel.createArray(final String arrayName, final int dimension,\n            final Scope scope, final Scriptable start)", "testcase": false, "constructor": false}, {"identifier": "resizeArray", "parameters": "(final String arrayName, final int dimension)", "modifiers": "@Override public", "return": "int", "signature": "int resizeArray(final String arrayName, final int dimension)", "full_signature": "@Override public int resizeArray(final String arrayName, final int dimension)", "class_method_signature": "EcmaScriptDataModel.resizeArray(final String arrayName, final int dimension)", "testcase": false, "constructor": false}, {"identifier": "resizeArray", "parameters": "(final String arrayName, final int dimension,\n            final Scope scope)", "modifiers": "@Override public", "return": "int", "signature": "int resizeArray(final String arrayName, final int dimension,\n            final Scope scope)", "full_signature": "@Override public int resizeArray(final String arrayName, final int dimension,\n            final Scope scope)", "class_method_signature": "EcmaScriptDataModel.resizeArray(final String arrayName, final int dimension,\n            final Scope scope)", "testcase": false, "constructor": false}, {"identifier": "resizeArray", "parameters": "(final String arrayName, final int dimension,\n            final Scope scope, final Scriptable start)", "modifiers": "private", "return": "int", "signature": "int resizeArray(final String arrayName, final int dimension,\n            final Scope scope, final Scriptable start)", "full_signature": "private int resizeArray(final String arrayName, final int dimension,\n            final Scope scope, final Scriptable start)", "class_method_signature": "EcmaScriptDataModel.resizeArray(final String arrayName, final int dimension,\n            final Scope scope, final Scriptable start)", "testcase": false, "constructor": false}, {"identifier": "getScope", "parameters": "(Scriptable scriptable)", "modifiers": "private", "return": "Scope", "signature": "Scope getScope(Scriptable scriptable)", "full_signature": "private Scope getScope(Scriptable scriptable)", "class_method_signature": "EcmaScriptDataModel.getScope(Scriptable scriptable)", "testcase": false, "constructor": false}, {"identifier": "getScope", "parameters": "(final Scriptable scope, final String name)", "modifiers": "private", "return": "Scriptable", "signature": "Scriptable getScope(final Scriptable scope, final String name)", "full_signature": "private Scriptable getScope(final Scriptable scope, final String name)", "class_method_signature": "EcmaScriptDataModel.getScope(final Scriptable scope, final String name)", "testcase": false, "constructor": false}, {"identifier": "getFullScope", "parameters": "(final Scriptable scope, final String name)", "modifiers": "private", "return": "Scriptable", "signature": "Scriptable getFullScope(final Scriptable scope, final String name)", "full_signature": "private Scriptable getFullScope(final Scriptable scope, final String name)", "class_method_signature": "EcmaScriptDataModel.getFullScope(final Scriptable scope, final String name)", "testcase": false, "constructor": false}, {"identifier": "existsVariable", "parameters": "(final String variableName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean existsVariable(final String variableName)", "full_signature": "@Override public boolean existsVariable(final String variableName)", "class_method_signature": "EcmaScriptDataModel.existsVariable(final String variableName)", "testcase": false, "constructor": false}, {"identifier": "existsVariable", "parameters": "(final String variableName, final Scope scope)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean existsVariable(final String variableName, final Scope scope)", "full_signature": "@Override public boolean existsVariable(final String variableName, final Scope scope)", "class_method_signature": "EcmaScriptDataModel.existsVariable(final String variableName, final Scope scope)", "testcase": false, "constructor": false}, {"identifier": "existsVariable", "parameters": "(final String variableName, final Scope scope,\n            final Scriptable start)", "modifiers": "public", "return": "boolean", "signature": "boolean existsVariable(final String variableName, final Scope scope,\n            final Scriptable start)", "full_signature": "public boolean existsVariable(final String variableName, final Scope scope,\n            final Scriptable start)", "class_method_signature": "EcmaScriptDataModel.existsVariable(final String variableName, final Scope scope,\n            final Scriptable start)", "testcase": false, "constructor": false}, {"identifier": "deleteVariable", "parameters": "(final String variableName)", "modifiers": "@Override public", "return": "int", "signature": "int deleteVariable(final String variableName)", "full_signature": "@Override public int deleteVariable(final String variableName)", "class_method_signature": "EcmaScriptDataModel.deleteVariable(final String variableName)", "testcase": false, "constructor": false}, {"identifier": "deleteVariable", "parameters": "(final String variableName, final Scope scope)", "modifiers": "@Override public", "return": "int", "signature": "int deleteVariable(final String variableName, final Scope scope)", "full_signature": "@Override public int deleteVariable(final String variableName, final Scope scope)", "class_method_signature": "EcmaScriptDataModel.deleteVariable(final String variableName, final Scope scope)", "testcase": false, "constructor": false}, {"identifier": "deleteVariable", "parameters": "(final String variableName, final Scope scope,\n            final Scriptable start)", "modifiers": "private", "return": "int", "signature": "int deleteVariable(final String variableName, final Scope scope,\n            final Scriptable start)", "full_signature": "private int deleteVariable(final String variableName, final Scope scope,\n            final Scriptable start)", "class_method_signature": "EcmaScriptDataModel.deleteVariable(final String variableName, final Scope scope,\n            final Scriptable start)", "testcase": false, "constructor": false}, {"identifier": "updateVariable", "parameters": "(final String variableName, final Object newValue)", "modifiers": "@Override public", "return": "int", "signature": "int updateVariable(final String variableName, final Object newValue)", "full_signature": "@Override public int updateVariable(final String variableName, final Object newValue)", "class_method_signature": "EcmaScriptDataModel.updateVariable(final String variableName, final Object newValue)", "testcase": false, "constructor": false}, {"identifier": "updateVariable", "parameters": "(final String variableName, final Object newValue,\n            final Scope scope)", "modifiers": "@Override public", "return": "int", "signature": "int updateVariable(final String variableName, final Object newValue,\n            final Scope scope)", "full_signature": "@Override public int updateVariable(final String variableName, final Object newValue,\n            final Scope scope)", "class_method_signature": "EcmaScriptDataModel.updateVariable(final String variableName, final Object newValue,\n            final Scope scope)", "testcase": false, "constructor": false}, {"identifier": "updateVariableFor", "parameters": "(final Object variable,\n            final String variableName, final Object newValue)", "modifiers": "@Override public", "return": "int", "signature": "int updateVariableFor(final Object variable,\n            final String variableName, final Object newValue)", "full_signature": "@Override public int updateVariableFor(final Object variable,\n            final String variableName, final Object newValue)", "class_method_signature": "EcmaScriptDataModel.updateVariableFor(final Object variable,\n            final String variableName, final Object newValue)", "testcase": false, "constructor": false}, {"identifier": "updateVariable", "parameters": "(final String variableName,\n            final Object newValue, final Scope scope, final Scriptable start)", "modifiers": "private", "return": "int", "signature": "int updateVariable(final String variableName,\n            final Object newValue, final Scope scope, final Scriptable start)", "full_signature": "private int updateVariable(final String variableName,\n            final Object newValue, final Scope scope, final Scriptable start)", "class_method_signature": "EcmaScriptDataModel.updateVariable(final String variableName,\n            final Object newValue, final Scope scope, final Scriptable start)", "testcase": false, "constructor": false}, {"identifier": "updateArray", "parameters": "(final String variableName, final int position,\n            final Object newValue)", "modifiers": "@Override public", "return": "int", "signature": "int updateArray(final String variableName, final int position,\n            final Object newValue)", "full_signature": "@Override public int updateArray(final String variableName, final int position,\n            final Object newValue)", "class_method_signature": "EcmaScriptDataModel.updateArray(final String variableName, final int position,\n            final Object newValue)", "testcase": false, "constructor": false}, {"identifier": "updateArray", "parameters": "(final String variableName, final int position,\n            final Object newValue, final Scope scope)", "modifiers": "@Override public", "return": "int", "signature": "int updateArray(final String variableName, final int position,\n            final Object newValue, final Scope scope)", "full_signature": "@Override public int updateArray(final String variableName, final int position,\n            final Object newValue, final Scope scope)", "class_method_signature": "EcmaScriptDataModel.updateArray(final String variableName, final int position,\n            final Object newValue, final Scope scope)", "testcase": false, "constructor": false}, {"identifier": "updateArray", "parameters": "(final String variableName, final int position,\n            final Object newValue, final Scope scope, final Scriptable start)", "modifiers": "private", "return": "int", "signature": "int updateArray(final String variableName, final int position,\n            final Object newValue, final Scope scope, final Scriptable start)", "full_signature": "private int updateArray(final String variableName, final int position,\n            final Object newValue, final Scope scope, final Scriptable start)", "class_method_signature": "EcmaScriptDataModel.updateArray(final String variableName, final int position,\n            final Object newValue, final Scope scope, final Scriptable start)", "testcase": false, "constructor": false}, {"identifier": "readVariable", "parameters": "(final String variableName,\n            final Class<T> type)", "modifiers": "@Override public", "return": "T", "signature": "T readVariable(final String variableName,\n            final Class<T> type)", "full_signature": "@Override public T readVariable(final String variableName,\n            final Class<T> type)", "class_method_signature": "EcmaScriptDataModel.readVariable(final String variableName,\n            final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "readVariable", "parameters": "(String variableName, Scope scope,\n            final Class<T> type)", "modifiers": "@Override public", "return": "T", "signature": "T readVariable(String variableName, Scope scope,\n            final Class<T> type)", "full_signature": "@Override public T readVariable(String variableName, Scope scope,\n            final Class<T> type)", "class_method_signature": "EcmaScriptDataModel.readVariable(String variableName, Scope scope,\n            final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "readVariable", "parameters": "(String variableName, Scope scope,\n            final Scriptable start, final Class<T> type)", "modifiers": "private", "return": "T", "signature": "T readVariable(String variableName, Scope scope,\n            final Scriptable start, final Class<T> type)", "full_signature": "private T readVariable(String variableName, Scope scope,\n            final Scriptable start, final Class<T> type)", "class_method_signature": "EcmaScriptDataModel.readVariable(String variableName, Scope scope,\n            final Scriptable start, final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "readArray", "parameters": "(final String arrayName, final int position,\n            final Class<T> type)", "modifiers": "@Override public", "return": "T", "signature": "T readArray(final String arrayName, final int position,\n            final Class<T> type)", "full_signature": "@Override public T readArray(final String arrayName, final int position,\n            final Class<T> type)", "class_method_signature": "EcmaScriptDataModel.readArray(final String arrayName, final int position,\n            final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "readArray", "parameters": "(final String arrayName, final int position,\n            final Scope scope, final Class<T> type)", "modifiers": "@Override public", "return": "T", "signature": "T readArray(final String arrayName, final int position,\n            final Scope scope, final Class<T> type)", "full_signature": "@Override public T readArray(final String arrayName, final int position,\n            final Scope scope, final Class<T> type)", "class_method_signature": "EcmaScriptDataModel.readArray(final String arrayName, final int position,\n            final Scope scope, final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "readArray", "parameters": "(final String arrayName, final int position,\n            final Scope scope, final Scriptable start, final Class<T> type)", "modifiers": "private", "return": "T", "signature": "T readArray(final String arrayName, final int position,\n            final Scope scope, final Scriptable start, final Class<T> type)", "full_signature": "private T readArray(final String arrayName, final int position,\n            final Scope scope, final Scriptable start, final Class<T> type)", "class_method_signature": "EcmaScriptDataModel.readArray(final String arrayName, final int position,\n            final Scope scope, final Scriptable start, final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "prepareExpression", "parameters": "(final String expr)", "modifiers": "private", "return": "String", "signature": "String prepareExpression(final String expr)", "full_signature": "private String prepareExpression(final String expr)", "class_method_signature": "EcmaScriptDataModel.prepareExpression(final String expr)", "testcase": false, "constructor": false}, {"identifier": "evaluateExpression", "parameters": "(final String expr,\n            final Class<T> type)", "modifiers": "@Override public", "return": "T", "signature": "T evaluateExpression(final String expr,\n            final Class<T> type)", "full_signature": "@Override public T evaluateExpression(final String expr,\n            final Class<T> type)", "class_method_signature": "EcmaScriptDataModel.evaluateExpression(final String expr,\n            final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "evaluateExpression", "parameters": "(final String expr,\n            final Scope scope, final Class<T> type)", "modifiers": "@Override public", "return": "T", "signature": "T evaluateExpression(final String expr,\n            final Scope scope, final Class<T> type)", "full_signature": "@Override public T evaluateExpression(final String expr,\n            final Scope scope, final Class<T> type)", "class_method_signature": "EcmaScriptDataModel.evaluateExpression(final String expr,\n            final Scope scope, final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "evaluateExpression", "parameters": "(final String expr,\n            final Scope scope, final Scriptable start, final Class<T> type)", "modifiers": "private", "return": "T", "signature": "T evaluateExpression(final String expr,\n            final Scope scope, final Scriptable start, final Class<T> type)", "full_signature": "private T evaluateExpression(final String expr,\n            final Scope scope, final Scriptable start, final Class<T> type)", "class_method_signature": "EcmaScriptDataModel.evaluateExpression(final String expr,\n            final Scope scope, final Scriptable start, final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getConcatenadedErrorMessage", "parameters": "(final String message,\n            final RhinoException e)", "modifiers": "private", "return": "String", "signature": "String getConcatenadedErrorMessage(final String message,\n            final RhinoException e)", "full_signature": "private String getConcatenadedErrorMessage(final String message,\n            final RhinoException e)", "class_method_signature": "EcmaScriptDataModel.getConcatenadedErrorMessage(final String message,\n            final RhinoException e)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final Object object)", "modifiers": "@Override public", "return": "String", "signature": "String toString(final Object object)", "full_signature": "@Override public String toString(final Object object)", "class_method_signature": "EcmaScriptDataModel.toString(final Object object)", "testcase": false, "constructor": false}, {"identifier": "toJSON", "parameters": "(final Scriptable object)", "modifiers": "public static", "return": "String", "signature": "String toJSON(final Scriptable object)", "full_signature": "public static String toJSON(final Scriptable object)", "class_method_signature": "EcmaScriptDataModel.toJSON(final Scriptable object)", "testcase": false, "constructor": false}, {"identifier": "toJSONObject", "parameters": "(final Scriptable object)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "JSONObject", "signature": "JSONObject toJSONObject(final Scriptable object)", "full_signature": "@SuppressWarnings(\"unchecked\") private static JSONObject toJSONObject(final Scriptable object)", "class_method_signature": "EcmaScriptDataModel.toJSONObject(final Scriptable object)", "testcase": false, "constructor": false}, {"identifier": "setSerializer", "parameters": "(final DataModelObjectSerializer value)", "modifiers": "public", "return": "void", "signature": "void setSerializer(final DataModelObjectSerializer value)", "full_signature": "public void setSerializer(final DataModelObjectSerializer value)", "class_method_signature": "EcmaScriptDataModel.setSerializer(final DataModelObjectSerializer value)", "testcase": false, "constructor": false}, {"identifier": "getSerializer", "parameters": "()", "modifiers": "@Override public", "return": "DataModelObjectSerializer", "signature": "DataModelObjectSerializer getSerializer()", "full_signature": "@Override public DataModelObjectSerializer getSerializer()", "class_method_signature": "EcmaScriptDataModel.getSerializer()", "testcase": false, "constructor": false}], "file": "org.jvoicexml.interpreter.datamodel.ecmascript/src/main/java/org/jvoicexml/interpreter/datamodel/ecmascript/EcmaScriptDataModel.java"}, "focal_method": {"identifier": "getUndefinedValue", "parameters": "()", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object getUndefinedValue() {\n        return Context.getUndefinedValue();\n    }", "signature": "Object getUndefinedValue()", "full_signature": "@Override public Object getUndefinedValue()", "class_method_signature": "EcmaScriptDataModel.getUndefinedValue()", "testcase": false, "constructor": false, "invocations": ["getUndefinedValue"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}