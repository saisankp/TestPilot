{"test_class": {"identifier": "UserControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String USERNAME = \"username\";", "modifier": "private static final", "type": "String", "declarator": "USERNAME = \"username\"", "var_name": "USERNAME"}, {"original_string": "private static final String PASSWORD = \"password\";", "modifier": "private static final", "type": "String", "declarator": "PASSWORD = \"password\"", "var_name": "PASSWORD"}, {"original_string": "private static final String ROLE = \"role\";", "modifier": "private static final", "type": "String", "declarator": "ROLE = \"role\"", "var_name": "ROLE"}, {"original_string": "@Mock\n    private UserService mockUserService;", "modifier": "@Mock\n    private", "type": "UserService", "declarator": "mockUserService", "var_name": "mockUserService"}, {"original_string": "@Mock\n    private AuthenticationService mockAuthenticationService;", "modifier": "@Mock\n    private", "type": "AuthenticationService", "declarator": "mockAuthenticationService", "var_name": "mockAuthenticationService"}, {"original_string": "@Mock\n    private HttpServletRequest mockHttpServletRequest;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "mockHttpServletRequest", "var_name": "mockHttpServletRequest"}, {"original_string": "@Mock\n    private HttpServletResponse mockHttpServletResponse;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "mockHttpServletResponse", "var_name": "mockHttpServletResponse"}, {"original_string": "@Mock\n    private UserEntity mockUserEntity;", "modifier": "@Mock\n    private", "type": "UserEntity", "declarator": "mockUserEntity", "var_name": "mockUserEntity"}, {"original_string": "private UserController userController;", "modifier": "private", "type": "UserController", "declarator": "userController", "var_name": "userController"}], "file": "application/confagrid-webapp/src/test/java/com/aleggeup/confagrid/user/UserControllerTest.java"}, "test_case": {"identifier": "testCheckNotAnonymousHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckNotAnonymousHeader() {\n        Mockito.when(mockHttpServletResponse.getHeader(JwtFilter.HEADER_CLAIMS_SUBJECT)).thenReturn(\"not anonymous\");\n        Mockito.when(mockHttpServletResponse.getHeader(JwtFilter.JWT_TOKEN)).thenReturn(\"token\");\n\n        final LoginResponse loginResponse = userController.check(mockHttpServletResponse);\n\n        assertNotNull(loginResponse);\n\n        Mockito.verify(mockHttpServletResponse, Mockito.times(2)).getHeader(JwtFilter.HEADER_CLAIMS_SUBJECT);\n        Mockito.verify(mockHttpServletResponse).getHeader(JwtFilter.JWT_TOKEN);\n    }", "signature": "void testCheckNotAnonymousHeader()", "full_signature": "@Test public void testCheckNotAnonymousHeader()", "class_method_signature": "UserControllerTest.testCheckNotAnonymousHeader()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getHeader", "thenReturn", "when", "getHeader", "check", "assertNotNull", "getHeader", "verify", "times", "getHeader", "verify"]}, "focal_class": {"identifier": "UserController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final UserService userService;", "modifier": "private final", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "private final AuthenticationService authenticationService;", "modifier": "private final", "type": "AuthenticationService", "declarator": "authenticationService", "var_name": "authenticationService"}], "methods": [{"identifier": "UserController", "parameters": "(final UserService userService, final AuthenticationService authenticationService)", "modifiers": "@Autowired", "return": "", "signature": " UserController(final UserService userService, final AuthenticationService authenticationService)", "full_signature": "@Autowired  UserController(final UserService userService, final AuthenticationService authenticationService)", "class_method_signature": "UserController.UserController(final UserService userService, final AuthenticationService authenticationService)", "testcase": false, "constructor": true}, {"identifier": "login", "parameters": "(@NonNull @RequestBody final LoginRequest login)", "modifiers": "@RequestMapping(value = \"login\", method = RequestMethod.POST) public", "return": "LoginResponse", "signature": "LoginResponse login(@NonNull @RequestBody final LoginRequest login)", "full_signature": "@RequestMapping(value = \"login\", method = RequestMethod.POST) public LoginResponse login(@NonNull @RequestBody final LoginRequest login)", "class_method_signature": "UserController.login(@NonNull @RequestBody final LoginRequest login)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(final HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"check\", method = RequestMethod.GET) public", "return": "LoginResponse", "signature": "LoginResponse check(final HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"check\", method = RequestMethod.GET) public LoginResponse check(final HttpServletResponse response)", "class_method_signature": "UserController.check(final HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "claimContainsRole", "parameters": "(@PathVariable final String role,\n        final HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"role/{role}\", method = RequestMethod.GET) public", "return": "Boolean", "signature": "Boolean claimContainsRole(@PathVariable final String role,\n        final HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"role/{role}\", method = RequestMethod.GET) public Boolean claimContainsRole(@PathVariable final String role,\n        final HttpServletRequest request)", "class_method_signature": "UserController.claimContainsRole(@PathVariable final String role,\n        final HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getRoles", "parameters": "(final Claims claims)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "List<LinkedHashMap<String, String>>", "signature": "List<LinkedHashMap<String, String>> getRoles(final Claims claims)", "full_signature": "@SuppressWarnings(\"unchecked\") private List<LinkedHashMap<String, String>> getRoles(final Claims claims)", "class_method_signature": "UserController.getRoles(final Claims claims)", "testcase": false, "constructor": false}], "file": "application/confagrid-webapp/src/main/java/com/aleggeup/confagrid/user/UserController.java"}, "focal_method": {"identifier": "check", "parameters": "(final HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"check\", method = RequestMethod.GET) public", "return": "LoginResponse", "body": "@RequestMapping(value = \"check\", method = RequestMethod.GET)\n    public LoginResponse check(final HttpServletResponse response) {\n        if (JwtFilter.SUBJECT_ANONYMOUS.equals(response.getHeader(JwtFilter.HEADER_CLAIMS_SUBJECT))) {\n            return new LoginResponse(JwtFilter.ANONYMOUS_USER_ID, response.getHeader(JwtFilter.HEADER_CLAIMS_SUBJECT),\n                authenticationService.anonymousToken());\n        }\n\n        return new LoginResponse(response.getHeader(JwtFilter.HEADER_CLAIMS_USER_ID),\n            response.getHeader(JwtFilter.HEADER_CLAIMS_SUBJECT),\n            response.getHeader(JwtFilter.JWT_TOKEN));\n    }", "signature": "LoginResponse check(final HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"check\", method = RequestMethod.GET) public LoginResponse check(final HttpServletResponse response)", "class_method_signature": "UserController.check(final HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["equals", "getHeader", "getHeader", "anonymousToken", "getHeader", "getHeader", "getHeader"]}, "repository": {"repo_id": 97776141, "url": "https://github.com/ALeggeUp/confagrid", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 22043, "license": "licensed"}}