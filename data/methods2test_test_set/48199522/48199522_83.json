{"test_class": {"identifier": "NormalDistTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/edu/stanford/futuredata/macrobase/analysis/classify/stats/NormalDistTest.java"}, "test_case": {"identifier": "testCDF", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCDF() throws Exception {\n        NormalDist dist = new NormalDist();\n        double cdf;\n\n        cdf = dist.cdf(0.0, 1.0, 0.5);\n        assertEquals(0.6915, cdf, 0.001);\n\n        cdf = dist.cdf(5.0, 2.0, 4.0);\n        assertEquals(0.3085, cdf, 0.001);\n\n        // Test interpolation\n        cdf = dist.cdf(0.0, 1.0, 0.755);\n        assertEquals(0.7749, cdf, 0.001);\n\n        // Test max z-score\n        cdf = dist.cdf(0.0, 1.0, 4.0);\n        assertEquals(1.0, cdf, 0.001);\n\n        // Test min z-score\n        cdf = dist.cdf(0.0, 1.0, -4.0);\n        assertEquals(0.0, cdf, 0.001);\n    }", "signature": "void testCDF()", "full_signature": "@Test public void testCDF()", "class_method_signature": "NormalDistTest.testCDF()", "testcase": true, "constructor": false, "invocations": ["cdf", "assertEquals", "cdf", "assertEquals", "cdf", "assertEquals", "cdf", "assertEquals", "cdf", "assertEquals"]}, "focal_class": {"identifier": "NormalDist", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double GRANULARITY = 0.1;", "modifier": "public static final", "type": "double", "declarator": "GRANULARITY = 0.1", "var_name": "GRANULARITY"}, {"original_string": "public static final double MAXZSCORE = 3.5;", "modifier": "public static final", "type": "double", "declarator": "MAXZSCORE = 3.5", "var_name": "MAXZSCORE"}, {"original_string": "public static final double MINZSCORE = -3.5;", "modifier": "public static final", "type": "double", "declarator": "MINZSCORE = -3.5", "var_name": "MINZSCORE"}, {"original_string": "public static final double LUT_OFFSET = -MINZSCORE/GRANULARITY;", "modifier": "public static final", "type": "double", "declarator": "LUT_OFFSET = -MINZSCORE/GRANULARITY", "var_name": "LUT_OFFSET"}, {"original_string": "public static final double[] CDF_LUT = new double[]{\n            0.000233, 0.000337, 0.000483, 0.000687, 0.000968,\n            0.001350, 0.001866, 0.002555, 0.003467, 0.004661,\n            0.006210, 0.008198, 0.010724, 0.013903, 0.017864,\n            0.022750, 0.028717, 0.035930, 0.044565, 0.054799,\n            0.066807, 0.080757, 0.096800, 0.115070, 0.135666,\n            0.158655, 0.184060, 0.211855, 0.241964, 0.274253,\n            0.308538, 0.344578, 0.382089, 0.420740, 0.460172,\n            0.500000,\n            0.539828, 0.579260, 0.617911, 0.655422, 0.691462,\n            0.725747, 0.758036, 0.788145, 0.815940, 0.841345,\n            0.864334, 0.884930, 0.903200, 0.919243, 0.933193,\n            0.945201, 0.955435, 0.964070, 0.971283, 0.977250,\n            0.982136, 0.986097, 0.989276, 0.991802, 0.993790,\n            0.995339, 0.996533, 0.997445, 0.998134, 0.998650,\n            0.999032, 0.999313, 0.999517, 0.999663, 0.999767\n    };", "modifier": "public static final", "type": "double[]", "declarator": "CDF_LUT = new double[]{\n            0.000233, 0.000337, 0.000483, 0.000687, 0.000968,\n            0.001350, 0.001866, 0.002555, 0.003467, 0.004661,\n            0.006210, 0.008198, 0.010724, 0.013903, 0.017864,\n            0.022750, 0.028717, 0.035930, 0.044565, 0.054799,\n            0.066807, 0.080757, 0.096800, 0.115070, 0.135666,\n            0.158655, 0.184060, 0.211855, 0.241964, 0.274253,\n            0.308538, 0.344578, 0.382089, 0.420740, 0.460172,\n            0.500000,\n            0.539828, 0.579260, 0.617911, 0.655422, 0.691462,\n            0.725747, 0.758036, 0.788145, 0.815940, 0.841345,\n            0.864334, 0.884930, 0.903200, 0.919243, 0.933193,\n            0.945201, 0.955435, 0.964070, 0.971283, 0.977250,\n            0.982136, 0.986097, 0.989276, 0.991802, 0.993790,\n            0.995339, 0.996533, 0.997445, 0.998134, 0.998650,\n            0.999032, 0.999313, 0.999517, 0.999663, 0.999767\n    }", "var_name": "CDF_LUT"}], "methods": [{"identifier": "NormalDist", "parameters": "()", "modifiers": "public", "return": "", "signature": " NormalDist()", "full_signature": "public  NormalDist()", "class_method_signature": "NormalDist.NormalDist()", "testcase": false, "constructor": true}, {"identifier": "cdf", "parameters": "(double mean, double std, double x)", "modifiers": "public", "return": "double", "signature": "double cdf(double mean, double std, double x)", "full_signature": "public double cdf(double mean, double std, double x)", "class_method_signature": "NormalDist.cdf(double mean, double std, double x)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/edu/stanford/futuredata/macrobase/analysis/classify/stats/NormalDist.java"}, "focal_method": {"identifier": "cdf", "parameters": "(double mean, double std, double x)", "modifiers": "public", "return": "double", "body": "public double cdf(double mean, double std, double x) {\n        double zscore = (x - mean) / std;\n\n        if (zscore > MAXZSCORE) {\n            return 1.0;\n        }\n        if (zscore < MINZSCORE) {\n            return 0.0;\n        }\n\n        // Interpolate the CDF\n        double exactEntry = zscore / GRANULARITY + LUT_OFFSET;\n        int lowerEntry = (int) FastMath.floor(exactEntry);\n        int higherEntry = (int) FastMath.ceil(exactEntry);\n\n        if (lowerEntry == higherEntry) {\n            return CDF_LUT[lowerEntry];\n        } else {\n            return CDF_LUT[lowerEntry] +\n                    ((exactEntry - lowerEntry) * (CDF_LUT[higherEntry] - CDF_LUT[lowerEntry]));\n        }\n    }", "signature": "double cdf(double mean, double std, double x)", "full_signature": "public double cdf(double mean, double std, double x)", "class_method_signature": "NormalDist.cdf(double mean, double std, double x)", "testcase": false, "constructor": false, "invocations": ["floor", "ceil"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}