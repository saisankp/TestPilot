{"test_class": {"identifier": "ExternalLoadBalancerDeviceManagerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    NetworkExternalLoadBalancerDao _networkExternalLBDao;", "modifier": "@Mock", "type": "NetworkExternalLoadBalancerDao", "declarator": "_networkExternalLBDao", "var_name": "_networkExternalLBDao"}, {"original_string": "@Mock\n    ExternalLoadBalancerDeviceDao _externalLoadBalancerDeviceDao;", "modifier": "@Mock", "type": "ExternalLoadBalancerDeviceDao", "declarator": "_externalLoadBalancerDeviceDao", "var_name": "_externalLoadBalancerDeviceDao"}, {"original_string": "@Mock\n    HostDao _hostDao;", "modifier": "@Mock", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Mock\n    DataCenterDao _dcDao;", "modifier": "@Mock", "type": "DataCenterDao", "declarator": "_dcDao", "var_name": "_dcDao"}, {"original_string": "@Mock\n    NetworkModel _networkModel;", "modifier": "@Mock", "type": "NetworkModel", "declarator": "_networkModel", "var_name": "_networkModel"}, {"original_string": "@Mock\n    NetworkOrchestrationService _networkMgr;", "modifier": "@Mock", "type": "NetworkOrchestrationService", "declarator": "_networkMgr", "var_name": "_networkMgr"}, {"original_string": "@Mock\n    InlineLoadBalancerNicMapDao _inlineLoadBalancerNicMapDao;", "modifier": "@Mock", "type": "InlineLoadBalancerNicMapDao", "declarator": "_inlineLoadBalancerNicMapDao", "var_name": "_inlineLoadBalancerNicMapDao"}, {"original_string": "@Mock\n    NicDao _nicDao;", "modifier": "@Mock", "type": "NicDao", "declarator": "_nicDao", "var_name": "_nicDao"}, {"original_string": "@Mock\n    AgentManager _agentMgr;", "modifier": "@Mock", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "@Mock\n    ResourceManager _resourceMgr;", "modifier": "@Mock", "type": "ResourceManager", "declarator": "_resourceMgr", "var_name": "_resourceMgr"}, {"original_string": "@Mock\n    IPAddressDao _ipAddressDao;", "modifier": "@Mock", "type": "IPAddressDao", "declarator": "_ipAddressDao", "var_name": "_ipAddressDao"}, {"original_string": "@Mock\n    VlanDao _vlanDao;", "modifier": "@Mock", "type": "VlanDao", "declarator": "_vlanDao", "var_name": "_vlanDao"}, {"original_string": "@Mock\n    NetworkOfferingDao _networkOfferingDao;", "modifier": "@Mock", "type": "NetworkOfferingDao", "declarator": "_networkOfferingDao", "var_name": "_networkOfferingDao"}, {"original_string": "@Mock\n    AccountDao _accountDao;", "modifier": "@Mock", "type": "AccountDao", "declarator": "_accountDao", "var_name": "_accountDao"}, {"original_string": "@Mock\n    PhysicalNetworkDao _physicalNetworkDao;", "modifier": "@Mock", "type": "PhysicalNetworkDao", "declarator": "_physicalNetworkDao", "var_name": "_physicalNetworkDao"}, {"original_string": "@Mock\n    PhysicalNetworkServiceProviderDao _physicalNetworkServiceProviderDao;", "modifier": "@Mock", "type": "PhysicalNetworkServiceProviderDao", "declarator": "_physicalNetworkServiceProviderDao", "var_name": "_physicalNetworkServiceProviderDao"}, {"original_string": "@Mock\n    AccountManager _accountMgr;", "modifier": "@Mock", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Mock\n    UserStatisticsDao _userStatsDao;", "modifier": "@Mock", "type": "UserStatisticsDao", "declarator": "_userStatsDao", "var_name": "_userStatsDao"}, {"original_string": "@Mock\n    NetworkDao _networkDao;", "modifier": "@Mock", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Mock\n    DomainRouterDao _routerDao;", "modifier": "@Mock", "type": "DomainRouterDao", "declarator": "_routerDao", "var_name": "_routerDao"}, {"original_string": "@Mock\n    LoadBalancerDao _loadBalancerDao;", "modifier": "@Mock", "type": "LoadBalancerDao", "declarator": "_loadBalancerDao", "var_name": "_loadBalancerDao"}, {"original_string": "@Mock\n    PortForwardingRulesDao _portForwardingRulesDao;", "modifier": "@Mock", "type": "PortForwardingRulesDao", "declarator": "_portForwardingRulesDao", "var_name": "_portForwardingRulesDao"}, {"original_string": "@Mock\n    ConfigurationDao _configDao;", "modifier": "@Mock", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Mock\n    HostDetailsDao _hostDetailDao;", "modifier": "@Mock", "type": "HostDetailsDao", "declarator": "_hostDetailDao", "var_name": "_hostDetailDao"}, {"original_string": "@Mock\n    NetworkExternalLoadBalancerDao _networkLBDao;", "modifier": "@Mock", "type": "NetworkExternalLoadBalancerDao", "declarator": "_networkLBDao", "var_name": "_networkLBDao"}, {"original_string": "@Mock\n    NetworkServiceMapDao _ntwkSrvcProviderDao;", "modifier": "@Mock", "type": "NetworkServiceMapDao", "declarator": "_ntwkSrvcProviderDao", "var_name": "_ntwkSrvcProviderDao"}, {"original_string": "@Mock\n    NetworkExternalFirewallDao _networkExternalFirewallDao;", "modifier": "@Mock", "type": "NetworkExternalFirewallDao", "declarator": "_networkExternalFirewallDao", "var_name": "_networkExternalFirewallDao"}, {"original_string": "@Mock\n    ExternalFirewallDeviceDao _externalFirewallDeviceDao;", "modifier": "@Mock", "type": "ExternalFirewallDeviceDao", "declarator": "_externalFirewallDeviceDao", "var_name": "_externalFirewallDeviceDao"}, {"original_string": "@Mock\n    protected HostPodDao _podDao = null;", "modifier": "@Mock\n    protected", "type": "HostPodDao", "declarator": "_podDao = null", "var_name": "_podDao"}, {"original_string": "@Mock\n    IpAddressManager _ipAddrMgr;", "modifier": "@Mock", "type": "IpAddressManager", "declarator": "_ipAddrMgr", "var_name": "_ipAddrMgr"}, {"original_string": "@Mock\n    Network network;", "modifier": "@Mock", "type": "Network", "declarator": "network", "var_name": "network"}, {"original_string": "@Mock\n    LoadBalancingRule rule;", "modifier": "@Mock", "type": "LoadBalancingRule", "declarator": "rule", "var_name": "rule"}, {"original_string": "ExternalLoadBalancerDeviceManagerImpl externalLoadBalancerDeviceManager;", "modifier": "", "type": "ExternalLoadBalancerDeviceManagerImpl", "declarator": "externalLoadBalancerDeviceManager", "var_name": "externalLoadBalancerDeviceManager"}], "file": "server/src/test/java/com/cloud/network/ExternalLoadBalancerDeviceManagerImplTest.java"}, "test_case": {"identifier": "getLBHealthChecksNullAnswer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getLBHealthChecksNullAnswer() throws ResourceUnavailableException,\n            URISyntaxException {\n        setupLBHealthChecksMocks();\n\n        Mockito.when(\n                _agentMgr.easySend(Mockito.anyLong(),\n                        Mockito.any(Command.class))).thenReturn(null);\n\n        Assert.assertNull(externalLoadBalancerDeviceManager\n                .getLBHealthChecks(network, Arrays.asList(rule)));\n    }", "signature": "void getLBHealthChecksNullAnswer()", "full_signature": "@Test public void getLBHealthChecksNullAnswer()", "class_method_signature": "ExternalLoadBalancerDeviceManagerImplTest.getLBHealthChecksNullAnswer()", "testcase": true, "constructor": false, "invocations": ["setupLBHealthChecksMocks", "thenReturn", "when", "easySend", "anyLong", "any", "assertNull", "getLBHealthChecks", "asList"]}, "focal_class": {"identifier": "ExternalLoadBalancerDeviceManagerImpl", "superclass": "extends AdapterBase", "interfaces": "implements ExternalLoadBalancerDeviceManager, ResourceStateAdapter", "fields": [{"original_string": "@Inject\n    NetworkExternalLoadBalancerDao _networkExternalLBDao;", "modifier": "@Inject", "type": "NetworkExternalLoadBalancerDao", "declarator": "_networkExternalLBDao", "var_name": "_networkExternalLBDao"}, {"original_string": "@Inject\n    ExternalLoadBalancerDeviceDao _externalLoadBalancerDeviceDao;", "modifier": "@Inject", "type": "ExternalLoadBalancerDeviceDao", "declarator": "_externalLoadBalancerDeviceDao", "var_name": "_externalLoadBalancerDeviceDao"}, {"original_string": "@Inject\n    HostDao _hostDao;", "modifier": "@Inject", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Inject\n    DataCenterDao _dcDao;", "modifier": "@Inject", "type": "DataCenterDao", "declarator": "_dcDao", "var_name": "_dcDao"}, {"original_string": "@Inject\n    NetworkModel _networkModel;", "modifier": "@Inject", "type": "NetworkModel", "declarator": "_networkModel", "var_name": "_networkModel"}, {"original_string": "@Inject\n    NetworkOrchestrationService _networkMgr;", "modifier": "@Inject", "type": "NetworkOrchestrationService", "declarator": "_networkMgr", "var_name": "_networkMgr"}, {"original_string": "@Inject\n    InlineLoadBalancerNicMapDao _inlineLoadBalancerNicMapDao;", "modifier": "@Inject", "type": "InlineLoadBalancerNicMapDao", "declarator": "_inlineLoadBalancerNicMapDao", "var_name": "_inlineLoadBalancerNicMapDao"}, {"original_string": "@Inject\n    NicDao _nicDao;", "modifier": "@Inject", "type": "NicDao", "declarator": "_nicDao", "var_name": "_nicDao"}, {"original_string": "@Inject\n    AgentManager _agentMgr;", "modifier": "@Inject", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "@Inject\n    ResourceManager _resourceMgr;", "modifier": "@Inject", "type": "ResourceManager", "declarator": "_resourceMgr", "var_name": "_resourceMgr"}, {"original_string": "@Inject\n    IPAddressDao _ipAddressDao;", "modifier": "@Inject", "type": "IPAddressDao", "declarator": "_ipAddressDao", "var_name": "_ipAddressDao"}, {"original_string": "@Inject\n    VlanDao _vlanDao;", "modifier": "@Inject", "type": "VlanDao", "declarator": "_vlanDao", "var_name": "_vlanDao"}, {"original_string": "@Inject\n    NetworkOfferingDao _networkOfferingDao;", "modifier": "@Inject", "type": "NetworkOfferingDao", "declarator": "_networkOfferingDao", "var_name": "_networkOfferingDao"}, {"original_string": "@Inject\n    AccountDao _accountDao;", "modifier": "@Inject", "type": "AccountDao", "declarator": "_accountDao", "var_name": "_accountDao"}, {"original_string": "@Inject\n    PhysicalNetworkDao _physicalNetworkDao;", "modifier": "@Inject", "type": "PhysicalNetworkDao", "declarator": "_physicalNetworkDao", "var_name": "_physicalNetworkDao"}, {"original_string": "@Inject\n    PhysicalNetworkServiceProviderDao _physicalNetworkServiceProviderDao;", "modifier": "@Inject", "type": "PhysicalNetworkServiceProviderDao", "declarator": "_physicalNetworkServiceProviderDao", "var_name": "_physicalNetworkServiceProviderDao"}, {"original_string": "@Inject\n    AccountManager _accountMgr;", "modifier": "@Inject", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n    UserStatisticsDao _userStatsDao;", "modifier": "@Inject", "type": "UserStatisticsDao", "declarator": "_userStatsDao", "var_name": "_userStatsDao"}, {"original_string": "@Inject\n    NetworkDao _networkDao;", "modifier": "@Inject", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Inject\n    DomainRouterDao _routerDao;", "modifier": "@Inject", "type": "DomainRouterDao", "declarator": "_routerDao", "var_name": "_routerDao"}, {"original_string": "@Inject\n    LoadBalancerDao _loadBalancerDao;", "modifier": "@Inject", "type": "LoadBalancerDao", "declarator": "_loadBalancerDao", "var_name": "_loadBalancerDao"}, {"original_string": "@Inject\n    PortForwardingRulesDao _portForwardingRulesDao;", "modifier": "@Inject", "type": "PortForwardingRulesDao", "declarator": "_portForwardingRulesDao", "var_name": "_portForwardingRulesDao"}, {"original_string": "@Inject\n    ConfigurationDao _configDao;", "modifier": "@Inject", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Inject\n    HostDetailsDao _hostDetailDao;", "modifier": "@Inject", "type": "HostDetailsDao", "declarator": "_hostDetailDao", "var_name": "_hostDetailDao"}, {"original_string": "@Inject\n    NetworkExternalLoadBalancerDao _networkLBDao;", "modifier": "@Inject", "type": "NetworkExternalLoadBalancerDao", "declarator": "_networkLBDao", "var_name": "_networkLBDao"}, {"original_string": "@Inject\n    NetworkServiceMapDao _ntwkSrvcProviderDao;", "modifier": "@Inject", "type": "NetworkServiceMapDao", "declarator": "_ntwkSrvcProviderDao", "var_name": "_ntwkSrvcProviderDao"}, {"original_string": "@Inject\n    NetworkExternalFirewallDao _networkExternalFirewallDao;", "modifier": "@Inject", "type": "NetworkExternalFirewallDao", "declarator": "_networkExternalFirewallDao", "var_name": "_networkExternalFirewallDao"}, {"original_string": "@Inject\n    ExternalFirewallDeviceDao _externalFirewallDeviceDao;", "modifier": "@Inject", "type": "ExternalFirewallDeviceDao", "declarator": "_externalFirewallDeviceDao", "var_name": "_externalFirewallDeviceDao"}, {"original_string": "@Inject\n    protected HostPodDao _podDao = null;", "modifier": "@Inject\n    protected", "type": "HostPodDao", "declarator": "_podDao = null", "var_name": "_podDao"}, {"original_string": "@Inject\n    IpAddressManager _ipAddrMgr;", "modifier": "@Inject", "type": "IpAddressManager", "declarator": "_ipAddrMgr", "var_name": "_ipAddrMgr"}, {"original_string": "private long _defaultLbCapacity;", "modifier": "private", "type": "long", "declarator": "_defaultLbCapacity", "var_name": "_defaultLbCapacity"}, {"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(ExternalLoadBalancerDeviceManagerImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(ExternalLoadBalancerDeviceManagerImpl.class)", "var_name": "s_logger"}], "methods": [{"identifier": "addExternalLoadBalancer", "parameters": "(long physicalNetworkId, String url, String username, String password, final String deviceName,\n        ServerResource resource, final boolean gslbProvider, final boolean exclusiveGslbProivider,\n        final String gslbSitePublicIp, final String gslbSitePrivateIp)", "modifiers": "@Override @DB public", "return": "ExternalLoadBalancerDeviceVO", "signature": "ExternalLoadBalancerDeviceVO addExternalLoadBalancer(long physicalNetworkId, String url, String username, String password, final String deviceName,\n        ServerResource resource, final boolean gslbProvider, final boolean exclusiveGslbProivider,\n        final String gslbSitePublicIp, final String gslbSitePrivateIp)", "full_signature": "@Override @DB public ExternalLoadBalancerDeviceVO addExternalLoadBalancer(long physicalNetworkId, String url, String username, String password, final String deviceName,\n        ServerResource resource, final boolean gslbProvider, final boolean exclusiveGslbProivider,\n        final String gslbSitePublicIp, final String gslbSitePrivateIp)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.addExternalLoadBalancer(long physicalNetworkId, String url, String username, String password, final String deviceName,\n        ServerResource resource, final boolean gslbProvider, final boolean exclusiveGslbProivider,\n        final String gslbSitePublicIp, final String gslbSitePrivateIp)", "testcase": false, "constructor": false}, {"identifier": "deleteExternalLoadBalancer", "parameters": "(long hostId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteExternalLoadBalancer(long hostId)", "full_signature": "@Override public boolean deleteExternalLoadBalancer(long hostId)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.deleteExternalLoadBalancer(long hostId)", "testcase": false, "constructor": false}, {"identifier": "listExternalLoadBalancers", "parameters": "(long physicalNetworkId, String deviceName)", "modifiers": "@Override public", "return": "List<Host>", "signature": "List<Host> listExternalLoadBalancers(long physicalNetworkId, String deviceName)", "full_signature": "@Override public List<Host> listExternalLoadBalancers(long physicalNetworkId, String deviceName)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.listExternalLoadBalancers(long physicalNetworkId, String deviceName)", "testcase": false, "constructor": false}, {"identifier": "createExternalLoadBalancerResponse", "parameters": "(Host externalLoadBalancer)", "modifiers": "public", "return": "ExternalLoadBalancerResponse", "signature": "ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer)", "full_signature": "public ExternalLoadBalancerResponse createExternalLoadBalancerResponse(Host externalLoadBalancer)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.createExternalLoadBalancerResponse(Host externalLoadBalancer)", "testcase": false, "constructor": false}, {"identifier": "getExternalLoadBalancerResourceGuid", "parameters": "(long physicalNetworkId, String deviceName, String ip)", "modifiers": "public", "return": "String", "signature": "String getExternalLoadBalancerResourceGuid(long physicalNetworkId, String deviceName, String ip)", "full_signature": "public String getExternalLoadBalancerResourceGuid(long physicalNetworkId, String deviceName, String ip)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.getExternalLoadBalancerResourceGuid(long physicalNetworkId, String deviceName, String ip)", "testcase": false, "constructor": false}, {"identifier": "getExternalLoadBalancerForNetwork", "parameters": "(Network network)", "modifiers": "@Override public", "return": "ExternalLoadBalancerDeviceVO", "signature": "ExternalLoadBalancerDeviceVO getExternalLoadBalancerForNetwork(Network network)", "full_signature": "@Override public ExternalLoadBalancerDeviceVO getExternalLoadBalancerForNetwork(Network network)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.getExternalLoadBalancerForNetwork(Network network)", "testcase": false, "constructor": false}, {"identifier": "setExternalLoadBalancerForNetwork", "parameters": "(Network network, long externalLBDeviceID)", "modifiers": "public", "return": "void", "signature": "void setExternalLoadBalancerForNetwork(Network network, long externalLBDeviceID)", "full_signature": "public void setExternalLoadBalancerForNetwork(Network network, long externalLBDeviceID)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.setExternalLoadBalancerForNetwork(Network network, long externalLBDeviceID)", "testcase": false, "constructor": false}, {"identifier": "allocateLoadBalancerForNetwork", "parameters": "(final Network guestConfig)", "modifiers": "@DB protected", "return": "ExternalLoadBalancerDeviceVO", "signature": "ExternalLoadBalancerDeviceVO allocateLoadBalancerForNetwork(final Network guestConfig)", "full_signature": "@DB protected ExternalLoadBalancerDeviceVO allocateLoadBalancerForNetwork(final Network guestConfig)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.allocateLoadBalancerForNetwork(final Network guestConfig)", "testcase": false, "constructor": false}, {"identifier": "findSuitableLoadBalancerForNetwork", "parameters": "(Network network, boolean dedicatedLb)", "modifiers": "@Override public", "return": "ExternalLoadBalancerDeviceVO", "signature": "ExternalLoadBalancerDeviceVO findSuitableLoadBalancerForNetwork(Network network, boolean dedicatedLb)", "full_signature": "@Override public ExternalLoadBalancerDeviceVO findSuitableLoadBalancerForNetwork(Network network, boolean dedicatedLb)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.findSuitableLoadBalancerForNetwork(Network network, boolean dedicatedLb)", "testcase": false, "constructor": false}, {"identifier": "freeLoadBalancerForNetwork", "parameters": "(final Network guestConfig)", "modifiers": "@DB protected", "return": "boolean", "signature": "boolean freeLoadBalancerForNetwork(final Network guestConfig)", "full_signature": "@DB protected boolean freeLoadBalancerForNetwork(final Network guestConfig)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.freeLoadBalancerForNetwork(final Network guestConfig)", "testcase": false, "constructor": false}, {"identifier": "applyStaticNatRuleForInlineLBRule", "parameters": "(DataCenterVO zone, Network network, boolean revoked, String publicIp, String privateIp)", "modifiers": "private", "return": "void", "signature": "void applyStaticNatRuleForInlineLBRule(DataCenterVO zone, Network network, boolean revoked, String publicIp, String privateIp)", "full_signature": "private void applyStaticNatRuleForInlineLBRule(DataCenterVO zone, Network network, boolean revoked, String publicIp, String privateIp)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.applyStaticNatRuleForInlineLBRule(DataCenterVO zone, Network network, boolean revoked, String publicIp, String privateIp)", "testcase": false, "constructor": false}, {"identifier": "getLoadBalancingIpNic", "parameters": "(DataCenterVO zone, Network network, long sourceIpId, boolean revoked, String existedGuestIp)", "modifiers": "private", "return": "MappingNic", "signature": "MappingNic getLoadBalancingIpNic(DataCenterVO zone, Network network, long sourceIpId, boolean revoked, String existedGuestIp)", "full_signature": "private MappingNic getLoadBalancingIpNic(DataCenterVO zone, Network network, long sourceIpId, boolean revoked, String existedGuestIp)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.getLoadBalancingIpNic(DataCenterVO zone, Network network, long sourceIpId, boolean revoked, String existedGuestIp)", "testcase": false, "constructor": false}, {"identifier": "applyLoadBalancerRules", "parameters": "(Network network, List<LoadBalancingRule> loadBalancingRules)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyLoadBalancerRules(Network network, List<LoadBalancingRule> loadBalancingRules)", "full_signature": "@Override public boolean applyLoadBalancerRules(Network network, List<LoadBalancingRule> loadBalancingRules)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.applyLoadBalancerRules(Network network, List<LoadBalancingRule> loadBalancingRules)", "testcase": false, "constructor": false}, {"identifier": "manageGuestNetworkWithExternalLoadBalancer", "parameters": "(boolean add, Network guestConfig)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean manageGuestNetworkWithExternalLoadBalancer(boolean add, Network guestConfig)", "full_signature": "@Override public boolean manageGuestNetworkWithExternalLoadBalancer(boolean add, Network guestConfig)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.manageGuestNetworkWithExternalLoadBalancer(boolean add, Network guestConfig)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(String name, Map<String, Object> params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(String name, Map<String, Object> params)", "full_signature": "@Override public boolean configure(String name, Map<String, Object> params)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.configure(String name, Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stop()", "full_signature": "@Override public boolean stop()", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "createHostVOForConnectedAgent", "parameters": "(HostVO host, StartupCommand[] cmd)", "modifiers": "@Override public", "return": "HostVO", "signature": "HostVO createHostVOForConnectedAgent(HostVO host, StartupCommand[] cmd)", "full_signature": "@Override public HostVO createHostVOForConnectedAgent(HostVO host, StartupCommand[] cmd)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.createHostVOForConnectedAgent(HostVO host, StartupCommand[] cmd)", "testcase": false, "constructor": false}, {"identifier": "createHostVOForDirectConnectAgent", "parameters": "(HostVO host, StartupCommand[] startup, ServerResource resource, Map<String, String> details, List<String> hostTags)", "modifiers": "@Override public", "return": "HostVO", "signature": "HostVO createHostVOForDirectConnectAgent(HostVO host, StartupCommand[] startup, ServerResource resource, Map<String, String> details, List<String> hostTags)", "full_signature": "@Override public HostVO createHostVOForDirectConnectAgent(HostVO host, StartupCommand[] startup, ServerResource resource, Map<String, String> details, List<String> hostTags)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.createHostVOForDirectConnectAgent(HostVO host, StartupCommand[] startup, ServerResource resource, Map<String, String> details, List<String> hostTags)", "testcase": false, "constructor": false}, {"identifier": "deleteHost", "parameters": "(HostVO host, boolean isForced, boolean isForceDeleteStorage)", "modifiers": "@Override public", "return": "DeleteHostAnswer", "signature": "DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage)", "full_signature": "@Override public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage)", "testcase": false, "constructor": false}, {"identifier": "getIpDeployerForInlineMode", "parameters": "(Network network)", "modifiers": "protected", "return": "IpDeployer", "signature": "IpDeployer getIpDeployerForInlineMode(Network network)", "full_signature": "protected IpDeployer getIpDeployerForInlineMode(Network network)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.getIpDeployerForInlineMode(Network network)", "testcase": false, "constructor": false}, {"identifier": "getLBHealthChecks", "parameters": "(Network network, List<LoadBalancingRule> loadBalancingRules)", "modifiers": "@Override public", "return": "List<LoadBalancerTO>", "signature": "List<LoadBalancerTO> getLBHealthChecks(Network network, List<LoadBalancingRule> loadBalancingRules)", "full_signature": "@Override public List<LoadBalancerTO> getLBHealthChecks(Network network, List<LoadBalancingRule> loadBalancingRules)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.getLBHealthChecks(Network network, List<LoadBalancingRule> loadBalancingRules)", "testcase": false, "constructor": false}, {"identifier": "getPlaceholderNic", "parameters": "(Network network)", "modifiers": "private", "return": "NicVO", "signature": "NicVO getPlaceholderNic(Network network)", "full_signature": "private NicVO getPlaceholderNic(Network network)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.getPlaceholderNic(Network network)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/network/ExternalLoadBalancerDeviceManagerImpl.java"}, "focal_method": {"identifier": "getLBHealthChecks", "parameters": "(Network network, List<LoadBalancingRule> loadBalancingRules)", "modifiers": "@Override public", "return": "List<LoadBalancerTO>", "body": "@Override\n    public List<LoadBalancerTO> getLBHealthChecks(Network network, List<LoadBalancingRule> loadBalancingRules) throws ResourceUnavailableException {\n\n        // Find the external load balancer in this zone\n        long zoneId = network.getDataCenterId();\n        DataCenterVO zone = _dcDao.findById(zoneId);\n\n        if (loadBalancingRules == null || loadBalancingRules.isEmpty()) {\n            return null;\n        }\n\n        ExternalLoadBalancerDeviceVO lbDeviceVO = getExternalLoadBalancerForNetwork(network);\n        if (lbDeviceVO == null) {\n            s_logger.warn(\"There is no external load balancer device assigned to this network either network is not implement are already shutdown so just returning\");\n            return null;\n        }\n\n        HostVO externalLoadBalancer = _hostDao.findById(lbDeviceVO.getHostId());\n\n        boolean externalLoadBalancerIsInline = _networkMgr.isNetworkInlineMode(network);\n\n        if (network.getState() == Network.State.Allocated) {\n            s_logger.debug(\"External load balancer was asked to apply LB rules for network with ID \" + network.getId() +\n                \"; this network is not implemented. Skipping backend commands.\");\n            return null;\n        }\n\n        List<LoadBalancerTO> loadBalancersToApply = new ArrayList<LoadBalancerTO>();\n        List<MappingState> mappingStates = new ArrayList<MappingState>();\n        for (final LoadBalancingRule rule : loadBalancingRules) {\n            boolean revoked = (FirewallRule.State.Revoke.equals(rule.getState()));\n            String protocol = rule.getProtocol();\n            String algorithm = rule.getAlgorithm();\n            String uuid = rule.getUuid();\n            String srcIp = rule.getSourceIp().addr();\n            int srcPort = rule.getSourcePortStart();\n            List<LbDestination> destinations = rule.getDestinations();\n\n            if (externalLoadBalancerIsInline) {\n                long sourceIpId = _networkModel.getPublicIpAddress(rule.getSourceIp().addr(), network.getDataCenterId()).getId();\n                MappingNic nic = getLoadBalancingIpNic(zone, network, sourceIpId, revoked, null);\n                mappingStates.add(nic.getState());\n                Nic loadBalancingIpNic = nic.getNic();\n                if (loadBalancingIpNic == null) {\n                    continue;\n                }\n\n                // Change the source IP address for the load balancing rule to\n                // be the load balancing IP address\n                srcIp = loadBalancingIpNic.getIPv4Address();\n            }\n\n            if ((destinations != null && !destinations.isEmpty()) || !rule.isAutoScaleConfig()) {\n                boolean inline = _networkMgr.isNetworkInlineMode(network);\n                LoadBalancerTO loadBalancer =\n                    new LoadBalancerTO(uuid, srcIp, srcPort, protocol, algorithm, revoked, false, inline, destinations, rule.getStickinessPolicies(),\n                        rule.getHealthCheckPolicies(), rule.getLbSslCert(), rule.getLbProtocol());\n                loadBalancersToApply.add(loadBalancer);\n            }\n        }\n\n        try {\n            if (loadBalancersToApply.size() > 0) {\n                int numLoadBalancersForCommand = loadBalancersToApply.size();\n                LoadBalancerTO[] loadBalancersForCommand = loadBalancersToApply.toArray(new LoadBalancerTO[numLoadBalancersForCommand]);\n                // LoadBalancerConfigCommand cmd = new\n                // LoadBalancerConfigCommand(loadBalancersForCommand, null);\n                HealthCheckLBConfigCommand cmd = new HealthCheckLBConfigCommand(loadBalancersForCommand);\n                long guestVlanTag = Integer.parseInt(BroadcastDomainType.getValue(network.getBroadcastUri()));\n                cmd.setAccessDetail(NetworkElementCommand.GUEST_VLAN_TAG, String.valueOf(guestVlanTag));\n\n                HealthCheckLBConfigAnswer answer = (HealthCheckLBConfigAnswer) _agentMgr\n                        .easySend(externalLoadBalancer.getId(), cmd);\n                // easySend will return null on error\n                return answer == null ? null : answer.getLoadBalancers();\n            }\n        } catch (Exception ex) {\n            s_logger.error(\"Exception Occured \", ex);\n        }\n        //null return is handled by clients\n        return null;\n    }", "signature": "List<LoadBalancerTO> getLBHealthChecks(Network network, List<LoadBalancingRule> loadBalancingRules)", "full_signature": "@Override public List<LoadBalancerTO> getLBHealthChecks(Network network, List<LoadBalancingRule> loadBalancingRules)", "class_method_signature": "ExternalLoadBalancerDeviceManagerImpl.getLBHealthChecks(Network network, List<LoadBalancingRule> loadBalancingRules)", "testcase": false, "constructor": false, "invocations": ["getDataCenterId", "findById", "isEmpty", "getExternalLoadBalancerForNetwork", "warn", "findById", "getHostId", "isNetworkInlineMode", "getState", "debug", "getId", "equals", "getState", "getProtocol", "getAlgorithm", "getUuid", "addr", "getSourceIp", "getSourcePortStart", "getDestinations", "getId", "getPublicIpAddress", "addr", "getSourceIp", "getDataCenterId", "getLoadBalancingIpNic", "add", "getState", "getNic", "getIPv4Address", "isEmpty", "isAutoScaleConfig", "isNetworkInlineMode", "getStickinessPolicies", "getHealthCheckPolicies", "getLbSslCert", "getLbProtocol", "add", "size", "size", "toArray", "parseInt", "getValue", "getBroadcastUri", "setAccessDetail", "valueOf", "easySend", "getId", "getLoadBalancers", "error"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}