{"test_class": {"identifier": "ArtifactAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Artifact artifact = new Artifact()\n                           .addFact(new ArtifactPathnames(\"/tmp/foo/chet.txt\"))\n                           .addFact(new ArtifactCoordinates(new Coordinate(Coordinate.Types.MAVEN, \"com.foo\", \"chet\", \"3.2.1-RELEASE\")));", "modifier": "", "type": "Artifact", "declarator": "artifact = new Artifact()\n                           .addFact(new ArtifactPathnames(\"/tmp/foo/chet.txt\"))\n                           .addFact(new ArtifactCoordinates(new Coordinate(Coordinate.Types.MAVEN, \"com.foo\", \"chet\", \"3.2.1-RELEASE\")))", "var_name": "artifact"}, {"original_string": "Artifact artifact2 = new Artifact()\n                           .addFact(new ArtifactFilename(\"artifactFilename1.jar\"))\n                           .addFact(new ArtifactPathnames(\"sub/dir/anotherFilename2.jar\"))\n                           .addFact(new ArtifactCoordinates(new Coordinate(Coordinate.Types.MAVEN, \"org.example\", \"any-artifact\", \"1.0.0\")))\n                           .addFact(new CopyrightStatement(\"Some lines of copyright statement.\"))\n                           .addFact(new DeclaredLicenseInformation(LicenseSupport.mapLicenses(Arrays.asList(\"License-ID\"))));", "modifier": "", "type": "Artifact", "declarator": "artifact2 = new Artifact()\n                           .addFact(new ArtifactFilename(\"artifactFilename1.jar\"))\n                           .addFact(new ArtifactPathnames(\"sub/dir/anotherFilename2.jar\"))\n                           .addFact(new ArtifactCoordinates(new Coordinate(Coordinate.Types.MAVEN, \"org.example\", \"any-artifact\", \"1.0.0\")))\n                           .addFact(new CopyrightStatement(\"Some lines of copyright statement.\"))\n                           .addFact(new DeclaredLicenseInformation(LicenseSupport.mapLicenses(Arrays.asList(\"License-ID\"))))", "var_name": "artifact2"}], "file": "modules/attribution-document/attribution-document-generator/src/test/java/org/eclipse/sw360/antenna/attribution/document/workflow/generators/ArtifactAdapterTest.java"}, "test_case": {"identifier": "basicMavenArtifactTest", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n   void basicMavenArtifactTest() {\n      ArtifactAdapter adapter = new ArtifactAdapter(artifact);\n      assertThat(adapter.getFilename()).isEqualTo(\"chet.txt\");\n   }", "signature": "void basicMavenArtifactTest()", "full_signature": "@Test void basicMavenArtifactTest()", "class_method_signature": "ArtifactAdapterTest.basicMavenArtifactTest()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getFilename"]}, "focal_class": {"identifier": "ArtifactAdapter", "superclass": "", "interfaces": "implements ArtifactAndLicense", "fields": [{"original_string": "private final String filename;", "modifier": "private final", "type": "String", "declarator": "filename", "var_name": "filename"}, {"original_string": "private final Optional<String> copyrightStatement;", "modifier": "private final", "type": "Optional<String>", "declarator": "copyrightStatement", "var_name": "copyrightStatement"}, {"original_string": "private final List<LicenseInfo> licenses;", "modifier": "private final", "type": "List<LicenseInfo>", "declarator": "licenses", "var_name": "licenses"}, {"original_string": "private final String purl;", "modifier": "private final", "type": "String", "declarator": "purl", "var_name": "purl"}], "methods": [{"identifier": "ArtifactAdapter", "parameters": "(Artifact artifact)", "modifiers": "public", "return": "", "signature": " ArtifactAdapter(Artifact artifact)", "full_signature": "public  ArtifactAdapter(Artifact artifact)", "class_method_signature": "ArtifactAdapter.ArtifactAdapter(Artifact artifact)", "testcase": false, "constructor": true}, {"identifier": "getLicenseText", "parameters": "(License license)", "modifiers": "public static", "return": "String", "signature": "String getLicenseText(License license)", "full_signature": "public static String getLicenseText(License license)", "class_method_signature": "ArtifactAdapter.getLicenseText(License license)", "testcase": false, "constructor": false}, {"identifier": "createKey", "parameters": "(License license)", "modifiers": "public static", "return": "String", "signature": "String createKey(License license)", "full_signature": "public static String createKey(License license)", "class_method_signature": "ArtifactAdapter.createKey(License license)", "testcase": false, "constructor": false}, {"identifier": "getFilename", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getFilename()", "full_signature": "@Override public String getFilename()", "class_method_signature": "ArtifactAdapter.getFilename()", "testcase": false, "constructor": false}, {"identifier": "getLicenses", "parameters": "()", "modifiers": "@Override public", "return": "List<LicenseInfo>", "signature": "List<LicenseInfo> getLicenses()", "full_signature": "@Override public List<LicenseInfo> getLicenses()", "class_method_signature": "ArtifactAdapter.getLicenses()", "testcase": false, "constructor": false}, {"identifier": "getCopyrightStatement", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getCopyrightStatement()", "full_signature": "@Override public Optional<String> getCopyrightStatement()", "class_method_signature": "ArtifactAdapter.getCopyrightStatement()", "testcase": false, "constructor": false}, {"identifier": "getPurl", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getPurl()", "full_signature": "@Override public Optional<String> getPurl()", "class_method_signature": "ArtifactAdapter.getPurl()", "testcase": false, "constructor": false}, {"identifier": "figureOutArtifactFilename", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String figureOutArtifactFilename(Artifact artifact)", "full_signature": "private static String figureOutArtifactFilename(Artifact artifact)", "class_method_signature": "ArtifactAdapter.figureOutArtifactFilename(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "figureOutArtifactFilename", "parameters": "(ArtifactFilename artifactFilename)", "modifiers": "private static", "return": "String", "signature": "String figureOutArtifactFilename(ArtifactFilename artifactFilename)", "full_signature": "private static String figureOutArtifactFilename(ArtifactFilename artifactFilename)", "class_method_signature": "ArtifactAdapter.figureOutArtifactFilename(ArtifactFilename artifactFilename)", "testcase": false, "constructor": false}, {"identifier": "figureOutArtifactFilename", "parameters": "(ArtifactPathnames artifactPathnames)", "modifiers": "private static", "return": "String", "signature": "String figureOutArtifactFilename(ArtifactPathnames artifactPathnames)", "full_signature": "private static String figureOutArtifactFilename(ArtifactPathnames artifactPathnames)", "class_method_signature": "ArtifactAdapter.figureOutArtifactFilename(ArtifactPathnames artifactPathnames)", "testcase": false, "constructor": false}, {"identifier": "createLicenses", "parameters": "(LicenseInformation licenseInformation)", "modifiers": "private static", "return": "List<LicenseInfo>", "signature": "List<LicenseInfo> createLicenses(LicenseInformation licenseInformation)", "full_signature": "private static List<LicenseInfo> createLicenses(LicenseInformation licenseInformation)", "class_method_signature": "ArtifactAdapter.createLicenses(LicenseInformation licenseInformation)", "testcase": false, "constructor": false}, {"identifier": "toPurl", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "String", "signature": "String toPurl(Artifact artifact)", "full_signature": "private static String toPurl(Artifact artifact)", "class_method_signature": "ArtifactAdapter.toPurl(Artifact artifact)", "testcase": false, "constructor": false}], "file": "modules/attribution-document/attribution-document-generator/src/main/java/org/eclipse/sw360/antenna/attribution/document/workflow/generators/ArtifactAdapter.java"}, "focal_method": {"identifier": "getFilename", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n   public String getFilename() {\n      return filename;\n   }", "signature": "String getFilename()", "full_signature": "@Override public String getFilename()", "class_method_signature": "ArtifactAdapter.getFilename()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}