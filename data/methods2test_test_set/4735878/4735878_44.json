{"test_class": {"identifier": "CategorizedLineTest", "superclass": "extends AnalyzerTest", "interfaces": "", "fields": [], "file": "legend/src/test/java/org/orbisgis/legend/thematic/categorize/CategorizedLineTest.java"}, "test_case": {"identifier": "testTransformToCategorize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransformToCategorize() throws Exception {\n        LineSymbolizer ls = new LineSymbolizer();\n        CategorizedLine cl = new CategorizedLine(ls);\n        cl.put(25.0, new LineParameters(Color.decode(\"#dd6643\"), .725, 10.0, \"2 2 5\"));\n        PenStroke ps = (PenStroke) ls.getStroke();\n        assertTrue(ps.getWidth() instanceof Categorize);\n        assertTrue(ps.getDashArray() instanceof Categorize);\n        assertTrue(((SolidFill)ps.getFill()).getColor() instanceof Categorize);\n        assertTrue(((SolidFill)ps.getFill()).getOpacity() instanceof Categorize);\n    }", "signature": "void testTransformToCategorize()", "full_signature": "@Test public void testTransformToCategorize()", "class_method_signature": "CategorizedLineTest.testTransformToCategorize()", "testcase": true, "constructor": false, "invocations": ["put", "decode", "getStroke", "assertTrue", "getWidth", "assertTrue", "getDashArray", "assertTrue", "getColor", "getFill", "assertTrue", "getOpacity", "getFill"]}, "focal_class": {"identifier": "CategorizedLine", "superclass": "extends AbstractCategorizedLegend<LineParameters>", "interfaces": "", "fields": [{"original_string": "private LineSymbolizer symbolizer;", "modifier": "private", "type": "LineSymbolizer", "declarator": "symbolizer", "var_name": "symbolizer"}, {"original_string": "private CategorizedColor color;", "modifier": "private", "type": "CategorizedColor", "declarator": "color", "var_name": "color"}, {"original_string": "private CategorizedReal opacity;", "modifier": "private", "type": "CategorizedReal", "declarator": "opacity", "var_name": "opacity"}, {"original_string": "private CategorizedReal width;", "modifier": "private", "type": "CategorizedReal", "declarator": "width", "var_name": "width"}, {"original_string": "private CategorizedString dash;", "modifier": "private", "type": "CategorizedString", "declarator": "dash", "var_name": "dash"}, {"original_string": "private static final I18n I18N = I18nFactory.getI18n(CategorizedLine.class);", "modifier": "private static final", "type": "I18n", "declarator": "I18N = I18nFactory.getI18n(CategorizedLine.class)", "var_name": "I18N"}, {"original_string": "public static final String NAME = I18N.tr(\"Interval Classification - Line\");", "modifier": "public static final", "type": "String", "declarator": "NAME = I18N.tr(\"Interval Classification - Line\")", "var_name": "NAME"}], "methods": [{"identifier": "CategorizedLine", "parameters": "()", "modifiers": "public", "return": "", "signature": " CategorizedLine()", "full_signature": "public  CategorizedLine()", "class_method_signature": "CategorizedLine.CategorizedLine()", "testcase": false, "constructor": true}, {"identifier": "CategorizedLine", "parameters": "(LineSymbolizer ls)", "modifiers": "public", "return": "", "signature": " CategorizedLine(LineSymbolizer ls)", "full_signature": "public  CategorizedLine(LineSymbolizer ls)", "class_method_signature": "CategorizedLine.CategorizedLine(LineSymbolizer ls)", "testcase": false, "constructor": true}, {"identifier": "feedListeners", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void feedListeners()", "full_signature": "private void feedListeners()", "class_method_signature": "CategorizedLine.feedListeners()", "testcase": false, "constructor": false}, {"identifier": "getCategorizedLegend", "parameters": "()", "modifiers": "@Override public", "return": "List<CategorizedLegend>", "signature": "List<CategorizedLegend> getCategorizedLegend()", "full_signature": "@Override public List<CategorizedLegend> getCategorizedLegend()", "class_method_signature": "CategorizedLine.getCategorizedLegend()", "testcase": false, "constructor": false}, {"identifier": "setFallbackParameters", "parameters": "(LineParameters fallback)", "modifiers": "@Override public", "return": "void", "signature": "void setFallbackParameters(LineParameters fallback)", "full_signature": "@Override public void setFallbackParameters(LineParameters fallback)", "class_method_signature": "CategorizedLine.setFallbackParameters(LineParameters fallback)", "testcase": false, "constructor": false}, {"identifier": "getFallbackParameters", "parameters": "()", "modifiers": "@Override public", "return": "LineParameters", "signature": "LineParameters getFallbackParameters()", "full_signature": "@Override public LineParameters getFallbackParameters()", "class_method_signature": "CategorizedLine.getFallbackParameters()", "testcase": false, "constructor": false}, {"identifier": "getSymbolizer", "parameters": "()", "modifiers": "@Override public", "return": "Symbolizer", "signature": "Symbolizer getSymbolizer()", "full_signature": "@Override public Symbolizer getSymbolizer()", "class_method_signature": "CategorizedLine.getSymbolizer()", "testcase": false, "constructor": false}, {"identifier": "getLegendTypeName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLegendTypeName()", "full_signature": "@Override public String getLegendTypeName()", "class_method_signature": "CategorizedLine.getLegendTypeName()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object o)", "modifiers": "@Override public", "return": "LineParameters", "signature": "LineParameters get(Object o)", "full_signature": "@Override public LineParameters get(Object o)", "class_method_signature": "CategorizedLine.get(Object o)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Double d, LineParameters lp)", "modifiers": "@Override public", "return": "LineParameters", "signature": "LineParameters put(Double d, LineParameters lp)", "full_signature": "@Override public LineParameters put(Double d, LineParameters lp)", "class_method_signature": "CategorizedLine.put(Double d, LineParameters lp)", "testcase": false, "constructor": false}, {"identifier": "forceMapping", "parameters": "(Double d)", "modifiers": "private", "return": "void", "signature": "void forceMapping(Double d)", "full_signature": "private void forceMapping(Double d)", "class_method_signature": "CategorizedLine.forceMapping(Double d)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object o)", "modifiers": "@Override public", "return": "LineParameters", "signature": "LineParameters remove(Object o)", "full_signature": "@Override public LineParameters remove(Object o)", "class_method_signature": "CategorizedLine.remove(Object o)", "testcase": false, "constructor": false}, {"identifier": "getStrokeUom", "parameters": "()", "modifiers": "@Override public", "return": "Uom", "signature": "Uom getStrokeUom()", "full_signature": "@Override public Uom getStrokeUom()", "class_method_signature": "CategorizedLine.getStrokeUom()", "testcase": false, "constructor": false}, {"identifier": "setStrokeUom", "parameters": "(Uom u)", "modifiers": "@Override public", "return": "void", "signature": "void setStrokeUom(Uom u)", "full_signature": "@Override public void setStrokeUom(Uom u)", "class_method_signature": "CategorizedLine.setStrokeUom(Uom u)", "testcase": false, "constructor": false}, {"identifier": "getLegendTypeId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLegendTypeId()", "full_signature": "@Override public String getLegendTypeId()", "class_method_signature": "CategorizedLine.getLegendTypeId()", "testcase": false, "constructor": false}], "file": "legend/src/main/java/org/orbisgis/legend/thematic/categorize/CategorizedLine.java"}, "focal_method": {"identifier": "put", "parameters": "(Double d, LineParameters lp)", "modifiers": "@Override public", "return": "LineParameters", "body": "@Override\n    public LineParameters put(Double d, LineParameters lp) {\n        forceMapping(d);\n        LineParameters ret = null;\n        if(containsKey(d)){\n            ret = get(d);\n        }\n        color.put(d,lp.getLineColor());\n        opacity.put(d,lp.getLineOpacity());\n        width.put(d,lp.getLineWidth());\n        dash.put(d, lp.getLineDash());\n        return  ret;\n    }", "signature": "LineParameters put(Double d, LineParameters lp)", "full_signature": "@Override public LineParameters put(Double d, LineParameters lp)", "class_method_signature": "CategorizedLine.put(Double d, LineParameters lp)", "testcase": false, "constructor": false, "invocations": ["forceMapping", "containsKey", "get", "put", "getLineColor", "put", "getLineOpacity", "put", "getLineWidth", "put", "getLineDash"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}