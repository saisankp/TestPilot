{"test_class": {"identifier": "ConnectivityProxyActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThingId KNOWN_THING_ID = ThingId.of(\"ditto\", \"myThing\");", "modifier": "private static final", "type": "ThingId", "declarator": "KNOWN_THING_ID = ThingId.of(\"ditto\", \"myThing\")", "var_name": "KNOWN_THING_ID"}, {"original_string": "private static ActorSystem actorSystem;", "modifier": "private static", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/ConnectivityProxyActorTest.java"}, "test_case": {"identifier": "testForwardOtherSignal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForwardOtherSignal() {\n        new TestKit(actorSystem) {{\n            final Signal<?> signal = Mockito.mock(Signal.class);\n            Mockito.when(signal.getDittoHeaders()).thenReturn(DittoHeaders.empty());\n\n            final Props props = ConnectivityProxyActor.props(getRef());\n            final ActorRef proxy = actorSystem.actorOf(props);\n\n            // WHEN: signal is sent to proxy actor\n            proxy.tell(signal, getRef());\n\n            // THEN: signal is forwarded to concierge\n            expectMsg(signal);\n\n            // WHEN: concierge responds\n            final Signal<?> response = Mockito.mock(Signal.class);\n            Mockito.when(response.getDittoHeaders()).thenReturn(DittoHeaders.empty());\n            getLastSender().tell(response, ActorRef.noSender());\n\n            // THEN: original sender receives response\n            expectMsg(response);\n        }};\n    }", "signature": "void testForwardOtherSignal()", "full_signature": "@Test public void testForwardOtherSignal()", "class_method_signature": "ConnectivityProxyActorTest.testForwardOtherSignal()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getDittoHeaders", "empty", "props", "getRef", "actorOf", "tell", "getRef", "expectMsg", "mock", "thenReturn", "when", "getDittoHeaders", "empty", "tell", "getLastSender", "noSender", "expectMsg"]}, "focal_class": {"identifier": "ConnectivityProxyActor", "superclass": "extends AbstractActor", "interfaces": "", "fields": [{"original_string": "public static final String ACTOR_NAME = \"connectivityProxyActor\";", "modifier": "public static final", "type": "String", "declarator": "ACTOR_NAME = \"connectivityProxyActor\"", "var_name": "ACTOR_NAME"}, {"original_string": "private final DittoDiagnosticLoggingAdapter log = getDiagnosticLoggingAdapter(this);", "modifier": "private final", "type": "DittoDiagnosticLoggingAdapter", "declarator": "log = getDiagnosticLoggingAdapter(this)", "var_name": "log"}, {"original_string": "private final ActorRef conciergeForwarder;", "modifier": "private final", "type": "ActorRef", "declarator": "conciergeForwarder", "var_name": "conciergeForwarder"}, {"original_string": "private final ActorRef aggregatorProxyActor;", "modifier": "private final", "type": "ActorRef", "declarator": "aggregatorProxyActor", "var_name": "aggregatorProxyActor"}], "methods": [{"identifier": "ConnectivityProxyActor", "parameters": "(final ActorRef conciergeForwarder)", "modifiers": "private", "return": "", "signature": " ConnectivityProxyActor(final ActorRef conciergeForwarder)", "full_signature": "private  ConnectivityProxyActor(final ActorRef conciergeForwarder)", "class_method_signature": "ConnectivityProxyActor.ConnectivityProxyActor(final ActorRef conciergeForwarder)", "testcase": false, "constructor": true}, {"identifier": "props", "parameters": "(final ActorRef conciergeForwarder)", "modifiers": "public static", "return": "Props", "signature": "Props props(final ActorRef conciergeForwarder)", "full_signature": "public static Props props(final ActorRef conciergeForwarder)", "class_method_signature": "ConnectivityProxyActor.props(final ActorRef conciergeForwarder)", "testcase": false, "constructor": false}, {"identifier": "createReceive", "parameters": "()", "modifiers": "@Override public", "return": "Receive", "signature": "Receive createReceive()", "full_signature": "@Override public Receive createReceive()", "class_method_signature": "ConnectivityProxyActor.createReceive()", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/ConnectivityProxyActor.java"}, "focal_method": {"identifier": "props", "parameters": "(final ActorRef conciergeForwarder)", "modifiers": "public static", "return": "Props", "body": "public static Props props(final ActorRef conciergeForwarder) {\n        return Props.create(ConnectivityProxyActor.class, conciergeForwarder);\n    }", "signature": "Props props(final ActorRef conciergeForwarder)", "full_signature": "public static Props props(final ActorRef conciergeForwarder)", "class_method_signature": "ConnectivityProxyActor.props(final ActorRef conciergeForwarder)", "testcase": false, "constructor": false, "invocations": ["create"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}