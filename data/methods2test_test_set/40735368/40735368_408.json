{"test_class": {"identifier": "CSVSpecifiedWKTStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/unsupported/csv/src/test/java/org/geotools/data/csv/parse/CSVSpecifiedWKTStrategyTest.java"}, "test_case": {"identifier": "testBuildFeatureType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildFeatureType() {\n        String input = CSVTestStrategySupport.buildInputString(\"quux,morx\\n\");\n        CSVFileState fileState = new CSVFileState(input, \"foo\");\n        CSVStrategy strategy = new CSVSpecifiedWKTStrategy(fileState, \"quux\");\n        SimpleFeatureType featureType = strategy.getFeatureType();\n        assertEquals(\"Invalid attribute count\", 2, featureType.getAttributeCount());\n        GeometryDescriptor geometryDescriptor = featureType.getGeometryDescriptor();\n        assertEquals(\"Invalid geometry attribute name\", \"quux\", geometryDescriptor.getLocalName());\n    }", "signature": "void testBuildFeatureType()", "full_signature": "@Test public void testBuildFeatureType()", "class_method_signature": "CSVSpecifiedWKTStrategyTest.testBuildFeatureType()", "testcase": true, "constructor": false, "invocations": ["buildInputString", "getFeatureType", "assertEquals", "getAttributeCount", "getGeometryDescriptor", "assertEquals", "getLocalName"]}, "focal_class": {"identifier": "CSVSpecifiedWKTStrategy", "superclass": "extends CSVStrategy", "interfaces": "", "fields": [{"original_string": "private final String wktField;", "modifier": "private final", "type": "String", "declarator": "wktField", "var_name": "wktField"}], "methods": [{"identifier": "CSVSpecifiedWKTStrategy", "parameters": "(CSVFileState csvFileState, String wktField)", "modifiers": "public", "return": "", "signature": " CSVSpecifiedWKTStrategy(CSVFileState csvFileState, String wktField)", "full_signature": "public  CSVSpecifiedWKTStrategy(CSVFileState csvFileState, String wktField)", "class_method_signature": "CSVSpecifiedWKTStrategy.CSVSpecifiedWKTStrategy(CSVFileState csvFileState, String wktField)", "testcase": false, "constructor": true}, {"identifier": "buildFeatureType", "parameters": "()", "modifiers": "@Override protected", "return": "SimpleFeatureType", "signature": "SimpleFeatureType buildFeatureType()", "full_signature": "@Override protected SimpleFeatureType buildFeatureType()", "class_method_signature": "CSVSpecifiedWKTStrategy.buildFeatureType()", "testcase": false, "constructor": false}, {"identifier": "createSchema", "parameters": "(SimpleFeatureType featureType)", "modifiers": "@Override public", "return": "void", "signature": "void createSchema(SimpleFeatureType featureType)", "full_signature": "@Override public void createSchema(SimpleFeatureType featureType)", "class_method_signature": "CSVSpecifiedWKTStrategy.createSchema(SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(SimpleFeature feature)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] encode(SimpleFeature feature)", "full_signature": "@Override public String[] encode(SimpleFeature feature)", "class_method_signature": "CSVSpecifiedWKTStrategy.encode(SimpleFeature feature)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String recordId, String[] csvRecord)", "modifiers": "@Override public", "return": "SimpleFeature", "signature": "SimpleFeature decode(String recordId, String[] csvRecord)", "full_signature": "@Override public SimpleFeature decode(String recordId, String[] csvRecord)", "class_method_signature": "CSVSpecifiedWKTStrategy.decode(String recordId, String[] csvRecord)", "testcase": false, "constructor": false}], "file": "modules/unsupported/csv/src/main/java/org/geotools/data/csv/parse/CSVSpecifiedWKTStrategy.java"}, "focal_method": {"identifier": "buildFeatureType", "parameters": "()", "modifiers": "@Override protected", "return": "SimpleFeatureType", "body": "@Override\n    protected SimpleFeatureType buildFeatureType() {\n        // sets up a builder with a good guess at attribtues and values\n        // (based on trying to parse the first line of content to detect numbers, dates, etc...)\n        SimpleFeatureTypeBuilder featureBuilder = CSVStrategy.createBuilder(csvFileState);\n        AttributeDescriptor descriptor = featureBuilder.get(wktField);\n        if( descriptor != null ){\n            AttributeTypeBuilder attributeBuilder = new AttributeTypeBuilder();\n            attributeBuilder.init(descriptor);\n            attributeBuilder.setCRS(DefaultGeographicCRS.WGS84);\n            attributeBuilder.binding(Geometry.class);\n            \n            AttributeDescriptor modified = attributeBuilder.buildDescriptor(wktField);\n            featureBuilder.set(wktField,modified );\n        }\n        return featureBuilder.buildFeatureType();\n    }", "signature": "SimpleFeatureType buildFeatureType()", "full_signature": "@Override protected SimpleFeatureType buildFeatureType()", "class_method_signature": "CSVSpecifiedWKTStrategy.buildFeatureType()", "testcase": false, "constructor": false, "invocations": ["createBuilder", "get", "init", "setCRS", "binding", "buildDescriptor", "set", "buildFeatureType"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}